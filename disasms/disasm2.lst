
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 e7 01 01 00       	call   c0010207 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c0000025:	3d 40 d7 02 c0       	cmp    eax,0xc002d740
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 40 d7 02 c0       	push   0xc002d740
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c0000051:	2d 40 d7 02 c0       	sub    eax,0xc002d740
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 40 d7 02 c0       	push   0xc002d740
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f0c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 98 80 02 c0       	mov    ebx,0xc0028098
c0000097:	81 eb 94 80 02 c0    	sub    ebx,0xc0028094
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 94 80 02 c0       	mov    esi,0xc0028094
c00000a6:	a1 c4 f0 02 c0       	mov    eax,ds:0xc002f0c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 f0 02 c0       	mov    ds:0xc002f0c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 f0 02 c0       	mov    eax,ds:0xc002f0c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 40 d7 02 c0       	push   0xc002d740
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 f0 02 c0 01 	mov    BYTE PTR ds:0xc002f0c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 f0 02 c0       	push   0xc002f0c8
c0000108:	68 40 d7 02 c0       	push   0xc002d740
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 7b 63 01 00       	call   c0016628 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 b9 47 01 00       	call   c0014a7e <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 59 63 01 00       	call   c0016628 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 ba 68 01 00       	call   c0016ba8 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 1d 6e 01 00       	call   c0017114 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 18 31 03 c0 	lgdtd  ds:0xc0033118
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 92 f3 00 00       	jmp    c000f711 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 f0 02 c0       	mov    ds:0xc002f0e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 f0 02 c0    	mov    DWORD PTR ds:0xc002f0e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 a0 80 02 c0 02 	test   BYTE PTR [edx-0x3ffd7f60],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 a0 80 02 c0 01 	test   BYTE PTR [edx-0x3ffd7f60],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 a0 80 02 c0 08 	test   BYTE PTR [edx-0x3ffd7f60],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 a0 80 02 c0 08 	test   BYTE PTR [edx-0x3ffd7f60],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 a0 80 02 c0 04 	test   BYTE PTR [ecx-0x3ffd7f60],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 a0 80 02 c0 01 	test   BYTE PTR [edx-0x3ffd7f60],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d8d:	85 c9                	test   ecx,ecx
c0000d8f:	0f 84 01 01 00 00    	je     c0000e96 <dlfree+0x110>
c0000d95:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d98:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d9b:	8b 1d 00 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c3                	cmp    ebx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 cb 03             	or     ebx,0x3
c0000db0:	89 1d 00 f1 02 c0    	mov    DWORD PTR ds:0xc002f100,ebx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 1c 85 04 f1 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd0efc]
c0000dc0:	89 19                	mov    DWORD PTR [ecx],ebx
c0000dc2:	89 14 85 04 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0efc],edx
c0000dc9:	e9 c8 00 00 00       	jmp    c0000e96 <dlfree+0x110>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 cb 01             	or     ebx,0x1
c0000ddd:	89 1d 00 f1 02 c0    	mov    DWORD PTR ds:0xc002f100,ebx
c0000de3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000de6:	83 e3 fc             	and    ebx,0xfffffffc
c0000de9:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000df2:	29 ca                	sub    edx,ecx
c0000df4:	01 c8                	add    eax,ecx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dfc:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dff:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e02:	39 35 2c f1 02 c0    	cmp    DWORD PTR ds:0xc002f12c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000e0e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000e11:	80 e1 01             	and    cl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 d8                	add    eax,ebx
c0000e1b:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000e1e:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000e21:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e24:	8b 0d 3c f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f13c
c0000e2a:	c7 42 0c 34 f1 02 c0 	mov    DWORD PTR [edx+0xc],0xc002f134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c f1 02 c0    	mov    DWORD PTR ds:0xc002f13c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 d8                	add    eax,ebx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c f1 02 c0    	mov    DWORD PTR ds:0xc002f12c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 35                	jbe    c0000e96 <dlfree+0x110>
c0000e61:	f6 05 00 f1 02 c0 02 	test   BYTE PTR ds:0xc002f100,0x2
c0000e68:	74 2c                	je     c0000e96 <dlfree+0x110>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 f1 02 c0       	mov    eax,0xc002f100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e7a:	53                   	push   ebx
c0000e7b:	53                   	push   ebx
c0000e7c:	ff 0d 50 f4 02 c0    	dec    DWORD PTR ds:0xc002f450
c0000e82:	01 c8                	add    eax,ecx
c0000e84:	29 ca                	sub    edx,ecx
c0000e86:	50                   	push   eax
c0000e87:	52                   	push   edx
c0000e88:	29 05 64 f4 02 c0    	sub    DWORD PTR ds:0xc002f464,eax
c0000e8e:	e8 bf ef 00 00       	call   c000fe52 <munmap>
c0000e93:	83 c4 10             	add    esp,0x10
c0000e96:	5b                   	pop    ebx
c0000e97:	5e                   	pop    esi
c0000e98:	5f                   	pop    edi
c0000e99:	c3                   	ret    

c0000e9a <sYSMALLOc>:
c0000e9a:	55                   	push   ebp
c0000e9b:	57                   	push   edi
c0000e9c:	56                   	push   esi
c0000e9d:	53                   	push   ebx
c0000e9e:	89 d3                	mov    ebx,edx
c0000ea0:	83 ec 2c             	sub    esp,0x2c
c0000ea3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000ea7:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ead:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000eb0:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000eb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000eb7:	74 1f                	je     c0000ed8 <sYSMALLOc+0x3e>
c0000eb9:	89 d0                	mov    eax,edx
c0000ebb:	e8 df fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ec0:	83 ec 0c             	sub    esp,0xc
c0000ec3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ec7:	83 e8 07             	sub    eax,0x7
c0000eca:	50                   	push   eax
c0000ecb:	e8 78 03 00 00       	call   c0001248 <dlmalloc>
c0000ed0:	83 c4 10             	add    esp,0x10
c0000ed3:	e9 68 03 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0000ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000edc:	f7 d9                	neg    ecx
c0000ede:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000ee4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0000ee8:	0f 87 be 00 00 00    	ja     c0000fac <sYSMALLOc+0x112>
c0000eee:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ef4:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000efa:	0f 8d ac 00 00 00    	jge    c0000fac <sYSMALLOc+0x112>
c0000f00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000f08:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000f0c:	21 ce                	and    esi,ecx
c0000f0e:	39 fe                	cmp    esi,edi
c0000f10:	0f 86 96 00 00 00    	jbe    c0000fac <sYSMALLOc+0x112>
c0000f16:	52                   	push   edx
c0000f17:	52                   	push   edx
c0000f18:	6a 00                	push   0x0
c0000f1a:	6a ff                	push   0xffffffff
c0000f1c:	6a 0c                	push   0xc
c0000f1e:	6a 03                	push   0x3
c0000f20:	56                   	push   esi
c0000f21:	6a 00                	push   0x0
c0000f23:	e8 cc ee 00 00       	call   c000fdf4 <mmap>
c0000f28:	83 c4 20             	add    esp,0x20
c0000f2b:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2e:	74 7c                	je     c0000fac <sYSMALLOc+0x112>
c0000f30:	89 c1                	mov    ecx,eax
c0000f32:	83 e1 07             	and    ecx,0x7
c0000f35:	74 13                	je     c0000f4a <sYSMALLOc+0xb0>
c0000f37:	ba 08 00 00 00       	mov    edx,0x8
c0000f3c:	89 f7                	mov    edi,esi
c0000f3e:	29 ca                	sub    edx,ecx
c0000f40:	01 d0                	add    eax,edx
c0000f42:	29 d7                	sub    edi,edx
c0000f44:	89 10                	mov    DWORD PTR [eax],edx
c0000f46:	89 fa                	mov    edx,edi
c0000f48:	eb 08                	jmp    c0000f52 <sYSMALLOc+0xb8>
c0000f4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f50:	89 f2                	mov    edx,esi
c0000f52:	83 ca 02             	or     edx,0x2
c0000f55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f58:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f5e:	8d 57 01             	lea    edx,[edi+0x1]
c0000f61:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f67:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f6d:	7e 06                	jle    c0000f75 <sYSMALLOc+0xdb>
c0000f6f:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f75:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f7b:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f81:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f87:	76 06                	jbe    c0000f8f <sYSMALLOc+0xf5>
c0000f89:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f8f:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f95:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f9b:	0f 83 41 01 00 00    	jae    c00010e2 <sYSMALLOc+0x248>
c0000fa1:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000fa7:	e9 36 01 00 00       	jmp    c00010e2 <sYSMALLOc+0x248>
c0000fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000faf:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000fbc:	83 e0 fc             	and    eax,0xfffffffc
c0000fbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000fc7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fd3:	83 c0 10             	add    eax,0x10
c0000fd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000fda:	01 c5                	add    ebp,eax
c0000fdc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fe3:	74 04                	je     c0000fe9 <sYSMALLOc+0x14f>
c0000fe5:	2b 6c 24 04          	sub    ebp,DWORD PTR [esp+0x4]
c0000fe9:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c0000fed:	23 6c 24 14          	and    ebp,DWORD PTR [esp+0x14]
c0000ff1:	89 ee                	mov    esi,ebp
c0000ff3:	7f 19                	jg     c000100e <sYSMALLOc+0x174>
c0000ff5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ffc:	74 28                	je     c0001026 <sYSMALLOc+0x18c>
c0000ffe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001002:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001006:	01 ee                	add    esi,ebp
c0001008:	23 74 24 14          	and    esi,DWORD PTR [esp+0x14]
c000100c:	eb 18                	jmp    c0001026 <sYSMALLOc+0x18c>
c000100e:	83 ec 0c             	sub    esp,0xc
c0001011:	55                   	push   ebp
c0001012:	e8 a7 ed 00 00       	call   c000fdbe <sbrk_thunk>
c0001017:	83 c4 10             	add    esp,0x10
c000101a:	89 c7                	mov    edi,eax
c000101c:	83 c8 ff             	or     eax,0xffffffff
c000101f:	83 ff ff             	cmp    edi,0xffffffff
c0001022:	75 42                	jne    c0001066 <sYSMALLOc+0x1cc>
c0001024:	eb cf                	jmp    c0000ff5 <sYSMALLOc+0x15b>
c0001026:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c000102c:	77 05                	ja     c0001033 <sYSMALLOc+0x199>
c000102e:	be 00 c0 00 00       	mov    esi,0xc000
c0001033:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0001037:	77 07                	ja     c0001040 <sYSMALLOc+0x1a6>
c0001039:	31 c0                	xor    eax,eax
c000103b:	e9 00 02 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0001040:	50                   	push   eax
c0001041:	50                   	push   eax
c0001042:	6a 00                	push   0x0
c0001044:	6a ff                	push   0xffffffff
c0001046:	6a 0c                	push   0xc
c0001048:	6a 03                	push   0x3
c000104a:	56                   	push   esi
c000104b:	6a 00                	push   0x0
c000104d:	e8 a2 ed 00 00       	call   c000fdf4 <mmap>
c0001052:	83 c4 20             	add    esp,0x20
c0001055:	83 f8 ff             	cmp    eax,0xffffffff
c0001058:	89 c7                	mov    edi,eax
c000105a:	74 dd                	je     c0001039 <sYSMALLOc+0x19f>
c000105c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001063:	8d 04 30             	lea    eax,[eax+esi*1]
c0001066:	8b 8b 68 03 00 00    	mov    ecx,DWORD PTR [ebx+0x368]
c000106c:	01 f1                	add    ecx,esi
c000106e:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001072:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001078:	75 70                	jne    c00010ea <sYSMALLOc+0x250>
c000107a:	83 f8 ff             	cmp    eax,0xffffffff
c000107d:	75 6b                	jne    c00010ea <sYSMALLOc+0x250>
c000107f:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001083:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001087:	83 ce 01             	or     esi,0x1
c000108a:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c000108d:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001093:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001099:	73 06                	jae    c00010a1 <sYSMALLOc+0x207>
c000109b:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a1:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a7:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010ad:	73 06                	jae    c00010b5 <sYSMALLOc+0x21b>
c00010af:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bb:	83 e2 fc             	and    edx,0xfffffffc
c00010be:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
c00010c2:	0f 87 71 ff ff ff    	ja     c0001039 <sYSMALLOc+0x19f>
c00010c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cc:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010cf:	29 fa                	sub    edx,edi
c00010d1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d4:	89 fb                	mov    ebx,edi
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	83 cb 01             	or     ebx,0x1
c00010dc:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e2:	83 c0 08             	add    eax,0x8
c00010e5:	e9 56 01 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c00010ea:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010f0:	f6 c2 01             	test   dl,0x1
c00010f3:	74 1e                	je     c0001113 <sYSMALLOc+0x279>
c00010f5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010fa:	0f 84 bb 00 00 00    	je     c00011bb <sYSMALLOc+0x321>
c0001100:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001104:	0f 86 b1 00 00 00    	jbe    c00011bb <sYSMALLOc+0x321>
c000110a:	83 e2 fe             	and    edx,0xfffffffe
c000110d:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001113:	83 f8 ff             	cmp    eax,0xffffffff
c0001116:	89 fd                	mov    ebp,edi
c0001118:	75 24                	jne    c000113e <sYSMALLOc+0x2a4>
c000111a:	83 ec 0c             	sub    esp,0xc
c000111d:	89 fd                	mov    ebp,edi
c000111f:	6a 00                	push   0x0
c0001121:	e8 98 ec 00 00       	call   c000fdbe <sbrk_thunk>
c0001126:	83 c4 10             	add    esp,0x10
c0001129:	89 c2                	mov    edx,eax
c000112b:	29 fa                	sub    edx,edi
c000112d:	29 f2                	sub    edx,esi
c000112f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001135:	83 f8 ff             	cmp    eax,0xffffffff
c0001138:	0f 84 4f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000113e:	31 c9                	xor    ecx,ecx
c0001140:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001143:	29 e8                	sub    eax,ebp
c0001145:	01 c8                	add    eax,ecx
c0001147:	83 c8 01             	or     eax,0x1
c000114a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000114d:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001153:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001158:	0f 84 2f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000115e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0001162:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001166:	83 ee 0c             	sub    esi,0xc
c0001169:	83 e6 f8             	and    esi,0xfffffff8
c000116c:	89 f0                	mov    eax,esi
c000116e:	83 c8 01             	or     eax,0x1
c0001171:	83 fe 0f             	cmp    esi,0xf
c0001174:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001177:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c000117f:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c0001187:	0f 86 00 ff ff ff    	jbe    c000108d <sYSMALLOc+0x1f3>
c000118d:	83 ec 0c             	sub    esp,0xc
c0001190:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001196:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00011a4:	83 c0 08             	add    eax,0x8
c00011a7:	50                   	push   eax
c00011a8:	e8 d9 fb ff ff       	call   c0000d86 <dlfree>
c00011ad:	83 c4 10             	add    esp,0x10
c00011b0:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00011b6:	e9 d2 fe ff ff       	jmp    c000108d <sYSMALLOc+0x1f3>
c00011bb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00011c0:	74 0e                	je     c00011d0 <sYSMALLOc+0x336>
c00011c2:	89 f8                	mov    eax,edi
c00011c4:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00011c8:	01 c1                	add    ecx,eax
c00011ca:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c00011d0:	89 fa                	mov    edx,edi
c00011d2:	83 e2 07             	and    edx,0x7
c00011d5:	74 0c                	je     c00011e3 <sYSMALLOc+0x349>
c00011d7:	b8 08 00 00 00       	mov    eax,0x8
c00011dc:	29 d0                	sub    eax,edx
c00011de:	8d 2c 07             	lea    ebp,[edi+eax*1]
c00011e1:	eb 04                	jmp    c00011e7 <sYSMALLOc+0x34d>
c00011e3:	89 fd                	mov    ebp,edi
c00011e5:	31 c0                	xor    eax,eax
c00011e7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00011eb:	83 ec 0c             	sub    esp,0xc
c00011ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00011f2:	8d 14 06             	lea    edx,[esi+eax*1]
c00011f5:	01 fa                	add    edx,edi
c00011f7:	01 d1                	add    ecx,edx
c00011f9:	29 d0                	sub    eax,edx
c00011fb:	23 4c 24 20          	and    ecx,DWORD PTR [esp+0x20]
c00011ff:	01 c1                	add    ecx,eax
c0001201:	51                   	push   ecx
c0001202:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0001206:	e8 b3 eb 00 00       	call   c000fdbe <sbrk_thunk>
c000120b:	83 c4 10             	add    esp,0x10
c000120e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001212:	83 f8 ff             	cmp    eax,0xffffffff
c0001215:	75 12                	jne    c0001229 <sYSMALLOc+0x38f>
c0001217:	83 ec 0c             	sub    esp,0xc
c000121a:	6a 00                	push   0x0
c000121c:	e8 9d eb 00 00       	call   c000fdbe <sbrk_thunk>
c0001221:	83 c4 10             	add    esp,0x10
c0001224:	e9 0c ff ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001229:	39 f8                	cmp    eax,edi
c000122b:	0f 83 0f ff ff ff    	jae    c0001140 <sYSMALLOc+0x2a6>
c0001231:	8d 04 37             	lea    eax,[edi+esi*1]
c0001234:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000123b:	e9 f5 fe ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001240:	83 c4 2c             	add    esp,0x2c
c0001243:	5b                   	pop    ebx
c0001244:	5e                   	pop    esi
c0001245:	5f                   	pop    edi
c0001246:	5d                   	pop    ebp
c0001247:	c3                   	ret    

c0001248 <dlmalloc>:
c0001248:	55                   	push   ebp
c0001249:	57                   	push   edi
c000124a:	56                   	push   esi
c000124b:	53                   	push   ebx
c000124c:	83 ec 1c             	sub    esp,0x1c
c000124f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001253:	83 f8 df             	cmp    eax,0xffffffdf
c0001256:	0f 87 70 03 00 00    	ja     c00015cc <dlmalloc+0x384>
c000125c:	83 c0 0b             	add    eax,0xb
c000125f:	be 10 00 00 00       	mov    esi,0x10
c0001264:	83 f8 0f             	cmp    eax,0xf
c0001267:	76 05                	jbe    c000126e <dlmalloc+0x26>
c0001269:	83 e0 f8             	and    eax,0xfffffff8
c000126c:	89 c6                	mov    esi,eax
c000126e:	8b 3d 00 f1 02 c0    	mov    edi,DWORD PTR ds:0xc002f100
c0001274:	f7 c7 01 00 00 00    	test   edi,0x1
c000127a:	75 17                	jne    c0001293 <dlmalloc+0x4b>
c000127c:	85 ff                	test   edi,edi
c000127e:	0f 85 05 03 00 00    	jne    c0001589 <dlmalloc+0x341>
c0001284:	b8 00 f1 02 c0       	mov    eax,0xc002f100
c0001289:	e8 11 fa ff ff       	call   c0000c9f <malloc_consolidate>
c000128e:	e9 f6 02 00 00       	jmp    c0001589 <dlmalloc+0x341>
c0001293:	39 f7                	cmp    edi,esi
c0001295:	72 1f                	jb     c00012b6 <dlmalloc+0x6e>
c0001297:	89 f2                	mov    edx,esi
c0001299:	c1 ea 03             	shr    edx,0x3
c000129c:	83 ea 02             	sub    edx,0x2
c000129f:	8b 04 95 04 f1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0efc]
c00012a6:	85 c0                	test   eax,eax
c00012a8:	74 0c                	je     c00012b6 <dlmalloc+0x6e>
c00012aa:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00012ad:	89 0c 95 04 f1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0efc],ecx
c00012b4:	eb 30                	jmp    c00012e6 <dlmalloc+0x9e>
c00012b6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012bc:	89 f0                	mov    eax,esi
c00012be:	77 2e                	ja     c00012ee <dlmalloc+0xa6>
c00012c0:	c1 e8 03             	shr    eax,0x3
c00012c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012c7:	8d 14 c5 34 f1 02 c0 	lea    edx,[eax*8-0x3ffd0ecc]
c00012ce:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012d1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012d4:	39 c3                	cmp    ebx,eax
c00012d6:	74 2e                	je     c0001306 <dlmalloc+0xbe>
c00012d8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012db:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012e0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012e3:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012e6:	83 c0 08             	add    eax,0x8
c00012e9:	e9 e0 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00012ee:	e8 28 f9 ff ff       	call   c0000c1b <largebin_index>
c00012f3:	83 e7 02             	and    edi,0x2
c00012f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012fa:	74 0a                	je     c0001306 <dlmalloc+0xbe>
c00012fc:	b8 00 f1 02 c0       	mov    eax,0xc002f100
c0001301:	e8 99 f9 ff ff       	call   c0000c9f <malloc_consolidate>
c0001306:	8d 46 10             	lea    eax,[esi+0x10]
c0001309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000130d:	8b 1d 40 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f140
c0001313:	81 fb 34 f1 02 c0    	cmp    ebx,0xc002f134
c0001319:	0f 84 13 01 00 00    	je     c0001432 <dlmalloc+0x1ea>
c000131f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001325:	83 e7 fc             	and    edi,0xfffffffc
c0001328:	81 fe ff 00 00 00    	cmp    esi,0xff
c000132e:	77 4c                	ja     c000137c <dlmalloc+0x134>
c0001330:	3d 34 f1 02 c0       	cmp    eax,0xc002f134
c0001335:	75 45                	jne    c000137c <dlmalloc+0x134>
c0001337:	39 1d 30 f1 02 c0    	cmp    DWORD PTR ds:0xc002f130,ebx
c000133d:	75 3d                	jne    c000137c <dlmalloc+0x134>
c000133f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001343:	73 37                	jae    c000137c <dlmalloc+0x134>
c0001345:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001348:	89 fa                	mov    edx,edi
c000134a:	a3 3c f1 02 c0       	mov    ds:0xc002f13c,eax
c000134f:	29 f2                	sub    edx,esi
c0001351:	83 ce 01             	or     esi,0x1
c0001354:	a3 40 f1 02 c0       	mov    ds:0xc002f140,eax
c0001359:	89 d1                	mov    ecx,edx
c000135b:	a3 30 f1 02 c0       	mov    ds:0xc002f130,eax
c0001360:	83 c9 01             	or     ecx,0x1
c0001363:	c7 40 08 34 f1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002f134
c000136a:	c7 40 0c 34 f1 02 c0 	mov    DWORD PTR [eax+0xc],0xc002f134
c0001371:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001374:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001377:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000137a:	eb 15                	jmp    c0001391 <dlmalloc+0x149>
c000137c:	a3 40 f1 02 c0       	mov    ds:0xc002f140,eax
c0001381:	39 fe                	cmp    esi,edi
c0001383:	c7 40 08 34 f1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002f134
c000138a:	75 0d                	jne    c0001399 <dlmalloc+0x151>
c000138c:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001391:	8d 43 08             	lea    eax,[ebx+0x8]
c0001394:	e9 35 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c0001399:	81 ff ff 00 00 00    	cmp    edi,0xff
c000139f:	89 f8                	mov    eax,edi
c00013a1:	77 19                	ja     c00013bc <dlmalloc+0x174>
c00013a3:	c1 e8 03             	shr    eax,0x3
c00013a6:	8d 14 00             	lea    edx,[eax+eax*1]
c00013a9:	83 c2 0d             	add    edx,0xd
c00013ac:	8d 2c 95 f8 f0 02 c0 	lea    ebp,[edx*4-0x3ffd0f08]
c00013b3:	8b 14 95 00 f1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0f00]
c00013ba:	eb 46                	jmp    c0001402 <dlmalloc+0x1ba>
c00013bc:	e8 5a f8 ff ff       	call   c0000c1b <largebin_index>
c00013c1:	8d 14 00             	lea    edx,[eax+eax*1]
c00013c4:	83 c2 0d             	add    edx,0xd
c00013c7:	8d 0c 95 00 f1 02 c0 	lea    ecx,[edx*4-0x3ffd0f00]
c00013ce:	8b 14 95 00 f1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0f00]
c00013d5:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013d8:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013dc:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013e0:	89 d5                	mov    ebp,edx
c00013e2:	74 1e                	je     c0001402 <dlmalloc+0x1ba>
c00013e4:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013e7:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013ea:	77 12                	ja     c00013fe <dlmalloc+0x1b6>
c00013ec:	83 cf 01             	or     edi,0x1
c00013ef:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013f2:	76 05                	jbe    c00013f9 <dlmalloc+0x1b1>
c00013f4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013f7:	eb f6                	jmp    c00013ef <dlmalloc+0x1a7>
c00013f9:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013fc:	eb 04                	jmp    c0001402 <dlmalloc+0x1ba>
c00013fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001402:	89 c7                	mov    edi,eax
c0001404:	88 c1                	mov    cl,al
c0001406:	c1 ff 05             	sar    edi,0x5
c0001409:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000140d:	bf 01 00 00 00       	mov    edi,0x1
c0001412:	d3 e7                	shl    edi,cl
c0001414:	89 f8                	mov    eax,edi
c0001416:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000141a:	09 04 bd 34 f4 02 c0 	or     DWORD PTR [edi*4-0x3ffd0bcc],eax
c0001421:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001424:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001427:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000142a:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000142d:	e9 db fe ff ff       	jmp    c000130d <dlmalloc+0xc5>
c0001432:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001438:	76 78                	jbe    c00014b2 <dlmalloc+0x26a>
c000143a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000143e:	8d 04 c5 34 f1 02 c0 	lea    eax,[eax*8-0x3ffd0ecc]
c0001445:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001448:	8d 48 f8             	lea    ecx,[eax-0x8]
c000144b:	39 ca                	cmp    edx,ecx
c000144d:	74 63                	je     c00014b2 <dlmalloc+0x26a>
c000144f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001452:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001455:	83 e3 fc             	and    ebx,0xfffffffc
c0001458:	39 de                	cmp    esi,ebx
c000145a:	77 52                	ja     c00014ae <dlmalloc+0x266>
c000145c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000145f:	89 df                	mov    edi,ebx
c0001461:	01 d3                	add    ebx,edx
c0001463:	29 f7                	sub    edi,esi
c0001465:	83 ff 0f             	cmp    edi,0xf
c0001468:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000146b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000146e:	8d 42 08             	lea    eax,[edx+0x8]
c0001471:	77 09                	ja     c000147c <dlmalloc+0x234>
c0001473:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001477:	e9 52 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000147c:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000147f:	83 ce 01             	or     esi,0x1
c0001482:	89 0d 3c f1 02 c0    	mov    DWORD PTR ds:0xc002f13c,ecx
c0001488:	89 0d 40 f1 02 c0    	mov    DWORD PTR ds:0xc002f140,ecx
c000148e:	c7 41 08 34 f1 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002f134
c0001495:	c7 41 0c 34 f1 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002f134
c000149c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000149f:	89 fa                	mov    edx,edi
c00014a1:	83 ca 01             	or     edx,0x1
c00014a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014a7:	89 3b                	mov    DWORD PTR [ebx],edi
c00014a9:	e9 20 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00014ae:	89 c2                	mov    edx,eax
c00014b0:	eb 99                	jmp    c000144b <dlmalloc+0x203>
c00014b2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00014b6:	b8 01 00 00 00       	mov    eax,0x1
c00014bb:	41                   	inc    ecx
c00014bc:	8d 14 cd 2c f1 02 c0 	lea    edx,[ecx*8-0x3ffd0ed4]
c00014c3:	89 cb                	mov    ebx,ecx
c00014c5:	c1 eb 05             	shr    ebx,0x5
c00014c8:	8b 3c 9d 34 f4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0bcc]
c00014cf:	d3 e0                	shl    eax,cl
c00014d1:	39 f8                	cmp    eax,edi
c00014d3:	77 04                	ja     c00014d9 <dlmalloc+0x291>
c00014d5:	85 c0                	test   eax,eax
c00014d7:	75 26                	jne    c00014ff <dlmalloc+0x2b7>
c00014d9:	43                   	inc    ebx
c00014da:	83 fb 02             	cmp    ebx,0x2
c00014dd:	0f 87 a6 00 00 00    	ja     c0001589 <dlmalloc+0x341>
c00014e3:	8b 3c 9d 34 f4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0bcc]
c00014ea:	85 ff                	test   edi,edi
c00014ec:	74 eb                	je     c00014d9 <dlmalloc+0x291>
c00014ee:	89 d8                	mov    eax,ebx
c00014f0:	c1 e0 06             	shl    eax,0x6
c00014f3:	8d 14 85 2c f1 02 c0 	lea    edx,[eax*4-0x3ffd0ed4]
c00014fa:	b8 01 00 00 00       	mov    eax,0x1
c00014ff:	85 f8                	test   eax,edi
c0001501:	75 07                	jne    c000150a <dlmalloc+0x2c2>
c0001503:	83 c2 08             	add    edx,0x8
c0001506:	01 c0                	add    eax,eax
c0001508:	eb f5                	jmp    c00014ff <dlmalloc+0x2b7>
c000150a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000150d:	39 ca                	cmp    edx,ecx
c000150f:	75 14                	jne    c0001525 <dlmalloc+0x2dd>
c0001511:	89 c1                	mov    ecx,eax
c0001513:	83 c2 08             	add    edx,0x8
c0001516:	f7 d1                	not    ecx
c0001518:	01 c0                	add    eax,eax
c000151a:	21 cf                	and    edi,ecx
c000151c:	89 3c 9d 34 f4 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd0bcc],edi
c0001523:	eb ac                	jmp    c00014d1 <dlmalloc+0x289>
c0001525:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001528:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000152b:	83 e0 fc             	and    eax,0xfffffffc
c000152e:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001531:	89 c3                	mov    ebx,eax
c0001533:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001536:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001539:	29 f3                	sub    ebx,esi
c000153b:	8d 41 08             	lea    eax,[ecx+0x8]
c000153e:	83 fb 0f             	cmp    ebx,0xf
c0001541:	77 09                	ja     c000154c <dlmalloc+0x304>
c0001543:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001547:	e9 82 00 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000154c:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000154f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001555:	89 3d 3c f1 02 c0    	mov    DWORD PTR ds:0xc002f13c,edi
c000155b:	89 3d 40 f1 02 c0    	mov    DWORD PTR ds:0xc002f140,edi
c0001561:	c7 47 08 34 f1 02 c0 	mov    DWORD PTR [edi+0x8],0xc002f134
c0001568:	c7 47 0c 34 f1 02 c0 	mov    DWORD PTR [edi+0xc],0xc002f134
c000156f:	77 06                	ja     c0001577 <dlmalloc+0x32f>
c0001571:	89 3d 30 f1 02 c0    	mov    DWORD PTR ds:0xc002f130,edi
c0001577:	83 ce 01             	or     esi,0x1
c000157a:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000157d:	89 d9                	mov    ecx,ebx
c000157f:	83 c9 01             	or     ecx,0x1
c0001582:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001585:	89 1a                	mov    DWORD PTR [edx],ebx
c0001587:	eb 45                	jmp    c00015ce <dlmalloc+0x386>
c0001589:	a1 2c f1 02 c0       	mov    eax,ds:0xc002f12c
c000158e:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001591:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001594:	83 e2 fc             	and    edx,0xfffffffc
c0001597:	39 d1                	cmp    ecx,edx
c0001599:	77 1e                	ja     c00015b9 <dlmalloc+0x371>
c000159b:	89 f3                	mov    ebx,esi
c000159d:	29 f2                	sub    edx,esi
c000159f:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00015a2:	83 cb 01             	or     ebx,0x1
c00015a5:	89 0d 2c f1 02 c0    	mov    DWORD PTR ds:0xc002f12c,ecx
c00015ab:	83 ca 01             	or     edx,0x1
c00015ae:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015b1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00015b4:	e9 2d fd ff ff       	jmp    c00012e6 <dlmalloc+0x9e>
c00015b9:	83 c4 1c             	add    esp,0x1c
c00015bc:	89 f0                	mov    eax,esi
c00015be:	5b                   	pop    ebx
c00015bf:	ba 00 f1 02 c0       	mov    edx,0xc002f100
c00015c4:	5e                   	pop    esi
c00015c5:	5f                   	pop    edi
c00015c6:	5d                   	pop    ebp
c00015c7:	e9 ce f8 ff ff       	jmp    c0000e9a <sYSMALLOc>
c00015cc:	31 c0                	xor    eax,eax
c00015ce:	83 c4 1c             	add    esp,0x1c
c00015d1:	5b                   	pop    ebx
c00015d2:	5e                   	pop    esi
c00015d3:	5f                   	pop    edi
c00015d4:	5d                   	pop    ebp
c00015d5:	c3                   	ret    

c00015d6 <iALLOc>:
c00015d6:	55                   	push   ebp
c00015d7:	89 c5                	mov    ebp,eax
c00015d9:	57                   	push   edi
c00015da:	56                   	push   esi
c00015db:	53                   	push   ebx
c00015dc:	83 ec 2c             	sub    esp,0x2c
c00015df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015e7:	83 3d 00 f1 02 c0 00 	cmp    DWORD PTR ds:0xc002f100,0x0
c00015ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015f2:	75 12                	jne    c0001606 <iALLOc+0x30>
c00015f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015f8:	b8 00 f1 02 c0       	mov    eax,0xc002f100
c00015fd:	e8 9d f6 ff ff       	call   c0000c9f <malloc_consolidate>
c0001602:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001606:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000160b:	74 12                	je     c000161f <iALLOc+0x49>
c000160d:	85 ed                	test   ebp,ebp
c000160f:	0f 84 64 01 00 00    	je     c0001779 <iALLOc+0x1a3>
c0001615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000161d:	eb 33                	jmp    c0001652 <iALLOc+0x7c>
c000161f:	85 ed                	test   ebp,ebp
c0001621:	75 14                	jne    c0001637 <iALLOc+0x61>
c0001623:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000162b:	83 c4 2c             	add    esp,0x2c
c000162e:	5b                   	pop    ebx
c000162f:	5e                   	pop    esi
c0001630:	5f                   	pop    edi
c0001631:	5d                   	pop    ebp
c0001632:	e9 11 fc ff ff       	jmp    c0001248 <dlmalloc>
c0001637:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000163f:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001646:	83 f8 0f             	cmp    eax,0xf
c0001649:	76 07                	jbe    c0001652 <iALLOc+0x7c>
c000164b:	83 e0 f8             	and    eax,0xfffffff8
c000164e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001652:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001657:	75 09                	jne    c0001662 <iALLOc+0x8c>
c0001659:	89 d0                	mov    eax,edx
c000165b:	31 f6                	xor    esi,esi
c000165d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001660:	eb 3b                	jmp    c000169d <iALLOc+0xc7>
c0001662:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000166a:	8b 02                	mov    eax,DWORD PTR [edx]
c000166c:	83 c0 0b             	add    eax,0xb
c000166f:	83 f8 0f             	cmp    eax,0xf
c0001672:	76 07                	jbe    c000167b <iALLOc+0xa5>
c0001674:	83 e0 f8             	and    eax,0xfffffff8
c0001677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000167b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000167f:	0f af f5             	imul   esi,ebp
c0001682:	eb 25                	jmp    c00016a9 <iALLOc+0xd3>
c0001684:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001686:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001689:	bb 10 00 00 00       	mov    ebx,0x10
c000168e:	83 f9 0f             	cmp    ecx,0xf
c0001691:	76 05                	jbe    c0001698 <iALLOc+0xc2>
c0001693:	83 e1 f8             	and    ecx,0xfffffff8
c0001696:	89 cb                	mov    ebx,ecx
c0001698:	01 de                	add    esi,ebx
c000169a:	83 c0 04             	add    eax,0x4
c000169d:	39 c7                	cmp    edi,eax
c000169f:	75 e3                	jne    c0001684 <iALLOc+0xae>
c00016a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00016a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00016ad:	83 ec 0c             	sub    esp,0xc
c00016b0:	8b 1d 54 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f454
c00016b6:	c7 05 54 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f454,0x0
c00016c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016c4:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00016c8:	50                   	push   eax
c00016c9:	e8 7a fb ff ff       	call   c0001248 <dlmalloc>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	89 1d 54 f4 02 c0    	mov    DWORD PTR ds:0xc002f454,ebx
c00016d7:	85 c0                	test   eax,eax
c00016d9:	0f 84 92 00 00 00    	je     c0001771 <iALLOc+0x19b>
c00016df:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016e2:	8d 78 f8             	lea    edi,[eax-0x8]
c00016e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016e9:	83 e3 fc             	and    ebx,0xfffffffc
c00016ec:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016f1:	74 1e                	je     c0001711 <iALLOc+0x13b>
c00016f3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016f7:	89 d9                	mov    ecx,ebx
c00016f9:	52                   	push   edx
c00016fa:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016fe:	83 e9 04             	sub    ecx,0x4
c0001701:	51                   	push   ecx
c0001702:	6a 00                	push   0x0
c0001704:	50                   	push   eax
c0001705:	e8 e6 ed ff ff       	call   c00004f0 <memset>
c000170a:	83 c4 10             	add    esp,0x10
c000170d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001711:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001716:	75 14                	jne    c000172c <iALLOc+0x156>
c0001718:	8d 04 37             	lea    eax,[edi+esi*1]
c000171b:	29 f3                	sub    ebx,esi
c000171d:	8d 48 08             	lea    ecx,[eax+0x8]
c0001720:	83 cb 01             	or     ebx,0x1
c0001723:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001726:	89 f3                	mov    ebx,esi
c0001728:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000172c:	31 c0                	xor    eax,eax
c000172e:	4d                   	dec    ebp
c000172f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001733:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001736:	39 c5                	cmp    ebp,eax
c0001738:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000173b:	74 2c                	je     c0001769 <iALLOc+0x193>
c000173d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001741:	85 c9                	test   ecx,ecx
c0001743:	75 15                	jne    c000175a <iALLOc+0x184>
c0001745:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001748:	8d 71 0b             	lea    esi,[ecx+0xb]
c000174b:	b9 10 00 00 00       	mov    ecx,0x10
c0001750:	83 fe 0f             	cmp    esi,0xf
c0001753:	76 05                	jbe    c000175a <iALLOc+0x184>
c0001755:	83 e6 f8             	and    esi,0xfffffff8
c0001758:	89 f1                	mov    ecx,esi
c000175a:	89 ce                	mov    esi,ecx
c000175c:	29 cb                	sub    ebx,ecx
c000175e:	83 ce 01             	or     esi,0x1
c0001761:	40                   	inc    eax
c0001762:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001765:	01 cf                	add    edi,ecx
c0001767:	eb c6                	jmp    c000172f <iALLOc+0x159>
c0001769:	83 cb 01             	or     ebx,0x1
c000176c:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000176f:	eb 08                	jmp    c0001779 <iALLOc+0x1a3>
c0001771:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001779:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177d:	83 c4 2c             	add    esp,0x2c
c0001780:	5b                   	pop    ebx
c0001781:	5e                   	pop    esi
c0001782:	5f                   	pop    edi
c0001783:	5d                   	pop    ebp
c0001784:	c3                   	ret    

c0001785 <dlrealloc>:
c0001785:	55                   	push   ebp
c0001786:	57                   	push   edi
c0001787:	56                   	push   esi
c0001788:	53                   	push   ebx
c0001789:	83 ec 1c             	sub    esp,0x1c
c000178c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001790:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001794:	85 db                	test   ebx,ebx
c0001796:	75 10                	jne    c00017a8 <dlrealloc+0x23>
c0001798:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000179c:	83 c4 1c             	add    esp,0x1c
c000179f:	5b                   	pop    ebx
c00017a0:	5e                   	pop    esi
c00017a1:	5f                   	pop    edi
c00017a2:	5d                   	pop    ebp
c00017a3:	e9 a0 fa ff ff       	jmp    c0001248 <dlmalloc>
c00017a8:	83 f8 df             	cmp    eax,0xffffffdf
c00017ab:	0f 87 a6 01 00 00    	ja     c0001957 <dlrealloc+0x1d2>
c00017b1:	83 c0 0b             	add    eax,0xb
c00017b4:	bd 10 00 00 00       	mov    ebp,0x10
c00017b9:	83 f8 0f             	cmp    eax,0xf
c00017bc:	76 05                	jbe    c00017c3 <dlrealloc+0x3e>
c00017be:	83 e0 f8             	and    eax,0xfffffff8
c00017c1:	89 c5                	mov    ebp,eax
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	89 ce                	mov    esi,ecx
c00017c8:	83 e6 fc             	and    esi,0xfffffffc
c00017cb:	f6 c1 02             	test   cl,0x2
c00017ce:	0f 85 4e 01 00 00    	jne    c0001922 <dlrealloc+0x19d>
c00017d4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017d7:	39 f5                	cmp    ebp,esi
c00017d9:	0f 86 04 01 00 00    	jbe    c00018e3 <dlrealloc+0x15e>
c00017df:	8d 14 37             	lea    edx,[edi+esi*1]
c00017e2:	39 15 2c f1 02 c0    	cmp    DWORD PTR ds:0xc002f12c,edx
c00017e8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00017eb:	75 33                	jne    c0001820 <dlrealloc+0x9b>
c00017ed:	83 e0 fc             	and    eax,0xfffffffc
c00017f0:	01 f0                	add    eax,esi
c00017f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017f6:	8d 45 10             	lea    eax,[ebp+0x10]
c00017f9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00017fd:	77 49                	ja     c0001848 <dlrealloc+0xc3>
c00017ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001803:	83 e1 01             	and    ecx,0x1
c0001806:	01 ef                	add    edi,ebp
c0001808:	09 e9                	or     ecx,ebp
c000180a:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c000180d:	89 3d 2c f1 02 c0    	mov    DWORD PTR ds:0xc002f12c,edi
c0001813:	29 e8                	sub    eax,ebp
c0001815:	83 c8 01             	or     eax,0x1
c0001818:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000181b:	e9 39 01 00 00       	jmp    c0001959 <dlrealloc+0x1d4>
c0001820:	89 c1                	mov    ecx,eax
c0001822:	83 e1 fe             	and    ecx,0xfffffffe
c0001825:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000182a:	75 1c                	jne    c0001848 <dlrealloc+0xc3>
c000182c:	83 e0 fc             	and    eax,0xfffffffc
c000182f:	01 f0                	add    eax,esi
c0001831:	39 c5                	cmp    ebp,eax
c0001833:	77 13                	ja     c0001848 <dlrealloc+0xc3>
c0001835:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001838:	89 c6                	mov    esi,eax
c000183a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000183d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001840:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001843:	e9 9b 00 00 00       	jmp    c00018e3 <dlrealloc+0x15e>
c0001848:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000184c:	8d 45 f9             	lea    eax,[ebp-0x7]
c000184f:	83 ec 0c             	sub    esp,0xc
c0001852:	50                   	push   eax
c0001853:	e8 f0 f9 ff ff       	call   c0001248 <dlmalloc>
c0001858:	83 c4 10             	add    esp,0x10
c000185b:	85 c0                	test   eax,eax
c000185d:	0f 84 f4 00 00 00    	je     c0001957 <dlrealloc+0x1d2>
c0001863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001867:	8d 48 f8             	lea    ecx,[eax-0x8]
c000186a:	39 ca                	cmp    edx,ecx
c000186c:	75 0a                	jne    c0001878 <dlrealloc+0xf3>
c000186e:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001871:	83 e0 fc             	and    eax,0xfffffffc
c0001874:	01 c6                	add    esi,eax
c0001876:	eb 6b                	jmp    c00018e3 <dlrealloc+0x15e>
c0001878:	8d 4e fc             	lea    ecx,[esi-0x4]
c000187b:	83 f9 27             	cmp    ecx,0x27
c000187e:	76 08                	jbe    c0001888 <dlrealloc+0x103>
c0001880:	89 de                	mov    esi,ebx
c0001882:	89 c7                	mov    edi,eax
c0001884:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001886:	eb 43                	jmp    c00018cb <dlrealloc+0x146>
c0001888:	8b 13                	mov    edx,DWORD PTR [ebx]
c000188a:	83 f9 13             	cmp    ecx,0x13
c000188d:	89 10                	mov    DWORD PTR [eax],edx
c000188f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001892:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001895:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001898:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000189b:	76 2e                	jbe    c00018cb <dlrealloc+0x146>
c000189d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00018a0:	83 f9 1b             	cmp    ecx,0x1b
c00018a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00018a6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00018a9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00018ac:	76 1d                	jbe    c00018cb <dlrealloc+0x146>
c00018ae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00018b1:	83 f9 23             	cmp    ecx,0x23
c00018b4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00018b7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00018ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00018bd:	76 0c                	jbe    c00018cb <dlrealloc+0x146>
c00018bf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00018c2:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00018c5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00018c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00018cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018cf:	83 ec 0c             	sub    esp,0xc
c00018d2:	53                   	push   ebx
c00018d3:	e8 ae f4 ff ff       	call   c0000d86 <dlfree>
c00018d8:	83 c4 10             	add    esp,0x10
c00018db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018df:	89 c3                	mov    ebx,eax
c00018e1:	eb 76                	jmp    c0001959 <dlrealloc+0x1d4>
c00018e3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018e6:	8d 04 37             	lea    eax,[edi+esi*1]
c00018e9:	89 f2                	mov    edx,esi
c00018eb:	29 ea                	sub    edx,ebp
c00018ed:	83 e1 01             	and    ecx,0x1
c00018f0:	83 fa 0f             	cmp    edx,0xf
c00018f3:	77 0b                	ja     c0001900 <dlrealloc+0x17b>
c00018f5:	09 f1                	or     ecx,esi
c00018f7:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018fe:	eb 59                	jmp    c0001959 <dlrealloc+0x1d4>
c0001900:	01 ef                	add    edi,ebp
c0001902:	83 ca 01             	or     edx,0x1
c0001905:	09 cd                	or     ebp,ecx
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000190d:	83 c7 08             	add    edi,0x8
c0001910:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001913:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001917:	57                   	push   edi
c0001918:	e8 69 f4 ff ff       	call   c0000d86 <dlfree>
c000191d:	83 c4 10             	add    esp,0x10
c0001920:	eb 37                	jmp    c0001959 <dlrealloc+0x1d4>
c0001922:	8d 45 04             	lea    eax,[ebp+0x4]
c0001925:	39 f0                	cmp    eax,esi
c0001927:	76 30                	jbe    c0001959 <dlrealloc+0x1d4>
c0001929:	83 ec 0c             	sub    esp,0xc
c000192c:	83 ed 07             	sub    ebp,0x7
c000192f:	55                   	push   ebp
c0001930:	e8 13 f9 ff ff       	call   c0001248 <dlmalloc>
c0001935:	83 c4 10             	add    esp,0x10
c0001938:	85 c0                	test   eax,eax
c000193a:	89 c5                	mov    ebp,eax
c000193c:	74 19                	je     c0001957 <dlrealloc+0x1d2>
c000193e:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001941:	89 c7                	mov    edi,eax
c0001943:	89 de                	mov    esi,ebx
c0001945:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001947:	83 ec 0c             	sub    esp,0xc
c000194a:	53                   	push   ebx
c000194b:	89 eb                	mov    ebx,ebp
c000194d:	e8 34 f4 ff ff       	call   c0000d86 <dlfree>
c0001952:	83 c4 10             	add    esp,0x10
c0001955:	eb 02                	jmp    c0001959 <dlrealloc+0x1d4>
c0001957:	31 db                	xor    ebx,ebx
c0001959:	83 c4 1c             	add    esp,0x1c
c000195c:	89 d8                	mov    eax,ebx
c000195e:	5b                   	pop    ebx
c000195f:	5e                   	pop    esi
c0001960:	5f                   	pop    edi
c0001961:	5d                   	pop    ebp
c0001962:	c3                   	ret    

c0001963 <dlmemalign>:
c0001963:	55                   	push   ebp
c0001964:	57                   	push   edi
c0001965:	56                   	push   esi
c0001966:	53                   	push   ebx
c0001967:	83 ec 0c             	sub    esp,0xc
c000196a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000196e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001972:	83 fa 08             	cmp    edx,0x8
c0001975:	77 10                	ja     c0001987 <dlmemalign+0x24>
c0001977:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000197b:	83 c4 0c             	add    esp,0xc
c000197e:	5b                   	pop    ebx
c000197f:	5e                   	pop    esi
c0001980:	5f                   	pop    edi
c0001981:	5d                   	pop    ebp
c0001982:	e9 c1 f8 ff ff       	jmp    c0001248 <dlmalloc>
c0001987:	83 fa 0f             	cmp    edx,0xf
c000198a:	bf 10 00 00 00       	mov    edi,0x10
c000198f:	76 13                	jbe    c00019a4 <dlmemalign+0x41>
c0001991:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001994:	85 d1                	test   ecx,edx
c0001996:	75 04                	jne    c000199c <dlmemalign+0x39>
c0001998:	89 d7                	mov    edi,edx
c000199a:	eb 08                	jmp    c00019a4 <dlmemalign+0x41>
c000199c:	39 d7                	cmp    edi,edx
c000199e:	73 04                	jae    c00019a4 <dlmemalign+0x41>
c00019a0:	01 ff                	add    edi,edi
c00019a2:	eb f8                	jmp    c000199c <dlmemalign+0x39>
c00019a4:	83 f8 df             	cmp    eax,0xffffffdf
c00019a7:	76 07                	jbe    c00019b0 <dlmemalign+0x4d>
c00019a9:	31 c0                	xor    eax,eax
c00019ab:	e9 ce 00 00 00       	jmp    c0001a7e <dlmemalign+0x11b>
c00019b0:	83 c0 0b             	add    eax,0xb
c00019b3:	bd 10 00 00 00       	mov    ebp,0x10
c00019b8:	83 f8 0f             	cmp    eax,0xf
c00019bb:	76 05                	jbe    c00019c2 <dlmemalign+0x5f>
c00019bd:	83 e0 f8             	and    eax,0xfffffff8
c00019c0:	89 c5                	mov    ebp,eax
c00019c2:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00019c6:	83 ec 0c             	sub    esp,0xc
c00019c9:	50                   	push   eax
c00019ca:	e8 79 f8 ff ff       	call   c0001248 <dlmalloc>
c00019cf:	83 c4 10             	add    esp,0x10
c00019d2:	85 c0                	test   eax,eax
c00019d4:	89 c1                	mov    ecx,eax
c00019d6:	74 d1                	je     c00019a9 <dlmemalign+0x46>
c00019d8:	8d 70 f8             	lea    esi,[eax-0x8]
c00019db:	31 d2                	xor    edx,edx
c00019dd:	f7 f7                	div    edi
c00019df:	85 d2                	test   edx,edx
c00019e1:	74 62                	je     c0001a45 <dlmemalign+0xe2>
c00019e3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019e7:	89 f8                	mov    eax,edi
c00019e9:	f7 d8                	neg    eax
c00019eb:	21 c3                	and    ebx,eax
c00019ed:	83 eb 08             	sub    ebx,0x8
c00019f0:	89 d8                	mov    eax,ebx
c00019f2:	29 f0                	sub    eax,esi
c00019f4:	83 f8 0f             	cmp    eax,0xf
c00019f7:	77 02                	ja     c00019fb <dlmemalign+0x98>
c00019f9:	01 fb                	add    ebx,edi
c00019fb:	89 d8                	mov    eax,ebx
c00019fd:	29 f0                	sub    eax,esi
c00019ff:	89 c6                	mov    esi,eax
c0001a01:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a04:	89 c2                	mov    edx,eax
c0001a06:	83 e2 fc             	and    edx,0xfffffffc
c0001a09:	29 f2                	sub    edx,esi
c0001a0b:	a8 02                	test   al,0x2
c0001a0d:	74 10                	je     c0001a1f <dlmemalign+0xbc>
c0001a0f:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001a12:	83 ca 02             	or     edx,0x2
c0001a15:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001a18:	8d 43 08             	lea    eax,[ebx+0x8]
c0001a1b:	89 33                	mov    DWORD PTR [ebx],esi
c0001a1d:	eb 5f                	jmp    c0001a7e <dlmemalign+0x11b>
c0001a1f:	89 d0                	mov    eax,edx
c0001a21:	83 ec 0c             	sub    esp,0xc
c0001a24:	83 c8 01             	or     eax,0x1
c0001a27:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001a2a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a2f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a32:	83 e0 01             	and    eax,0x1
c0001a35:	09 f0                	or     eax,esi
c0001a37:	89 de                	mov    esi,ebx
c0001a39:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a3c:	51                   	push   ecx
c0001a3d:	e8 44 f3 ff ff       	call   c0000d86 <dlfree>
c0001a42:	83 c4 10             	add    esp,0x10
c0001a45:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a48:	a8 02                	test   al,0x2
c0001a4a:	75 2f                	jne    c0001a7b <dlmemalign+0x118>
c0001a4c:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a4f:	83 e0 fc             	and    eax,0xfffffffc
c0001a52:	39 c2                	cmp    edx,eax
c0001a54:	73 25                	jae    c0001a7b <dlmemalign+0x118>
c0001a56:	29 e8                	sub    eax,ebp
c0001a58:	83 ec 0c             	sub    esp,0xc
c0001a5b:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a5e:	83 c8 01             	or     eax,0x1
c0001a61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001a64:	83 c2 08             	add    edx,0x8
c0001a67:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a6a:	83 e0 01             	and    eax,0x1
c0001a6d:	09 c5                	or     ebp,eax
c0001a6f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a72:	52                   	push   edx
c0001a73:	e8 0e f3 ff ff       	call   c0000d86 <dlfree>
c0001a78:	83 c4 10             	add    esp,0x10
c0001a7b:	8d 46 08             	lea    eax,[esi+0x8]
c0001a7e:	83 c4 0c             	add    esp,0xc
c0001a81:	5b                   	pop    ebx
c0001a82:	5e                   	pop    esi
c0001a83:	5f                   	pop    edi
c0001a84:	5d                   	pop    ebp
c0001a85:	c3                   	ret    

c0001a86 <dlcalloc>:
c0001a86:	53                   	push   ebx
c0001a87:	83 ec 14             	sub    esp,0x14
c0001a8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a8e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a93:	50                   	push   eax
c0001a94:	e8 af f7 ff ff       	call   c0001248 <dlmalloc>
c0001a99:	83 c4 10             	add    esp,0x10
c0001a9c:	85 c0                	test   eax,eax
c0001a9e:	89 c3                	mov    ebx,eax
c0001aa0:	74 6e                	je     c0001b10 <dlcalloc+0x8a>
c0001aa2:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001aa5:	a8 02                	test   al,0x2
c0001aa7:	75 67                	jne    c0001b10 <dlcalloc+0x8a>
c0001aa9:	83 e0 fc             	and    eax,0xfffffffc
c0001aac:	83 e8 04             	sub    eax,0x4
c0001aaf:	83 f8 27             	cmp    eax,0x27
c0001ab2:	76 0f                	jbe    c0001ac3 <dlcalloc+0x3d>
c0001ab4:	52                   	push   edx
c0001ab5:	50                   	push   eax
c0001ab6:	6a 00                	push   0x0
c0001ab8:	53                   	push   ebx
c0001ab9:	e8 32 ea ff ff       	call   c00004f0 <memset>
c0001abe:	83 c4 10             	add    esp,0x10
c0001ac1:	eb 4d                	jmp    c0001b10 <dlcalloc+0x8a>
c0001ac3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001ac9:	83 f8 13             	cmp    eax,0x13
c0001acc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001ad3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001ada:	76 34                	jbe    c0001b10 <dlcalloc+0x8a>
c0001adc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ae3:	83 f8 1b             	cmp    eax,0x1b
c0001ae6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001aed:	76 21                	jbe    c0001b10 <dlcalloc+0x8a>
c0001aef:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001af6:	83 f8 23             	cmp    eax,0x23
c0001af9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001b00:	76 0e                	jbe    c0001b10 <dlcalloc+0x8a>
c0001b02:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001b09:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001b10:	83 c4 08             	add    esp,0x8
c0001b13:	89 d8                	mov    eax,ebx
c0001b15:	5b                   	pop    ebx
c0001b16:	c3                   	ret    

c0001b17 <dlcfree>:
c0001b17:	e9 6a f2 ff ff       	jmp    c0000d86 <dlfree>

c0001b1c <dlindependent_calloc>:
c0001b1c:	83 ec 28             	sub    esp,0x28
c0001b1f:	b9 03 00 00 00       	mov    ecx,0x3
c0001b24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001b2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b34:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b38:	e8 99 fa ff ff       	call   c00015d6 <iALLOc>
c0001b3d:	83 c4 2c             	add    esp,0x2c
c0001b40:	c3                   	ret    

c0001b41 <dlindependent_comalloc>:
c0001b41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b45:	31 c9                	xor    ecx,ecx
c0001b47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b53:	e9 7e fa ff ff       	jmp    c00015d6 <iALLOc>

c0001b58 <dlvalloc>:
c0001b58:	83 ec 0c             	sub    esp,0xc
c0001b5b:	83 3d 00 f1 02 c0 00 	cmp    DWORD PTR ds:0xc002f100,0x0
c0001b62:	75 0a                	jne    c0001b6e <dlvalloc+0x16>
c0001b64:	b8 00 f1 02 c0       	mov    eax,0xc002f100
c0001b69:	e8 31 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b6e:	50                   	push   eax
c0001b6f:	50                   	push   eax
c0001b70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b74:	ff 35 5c f4 02 c0    	push   DWORD PTR ds:0xc002f45c
c0001b7a:	e8 e4 fd ff ff       	call   c0001963 <dlmemalign>
c0001b7f:	83 c4 1c             	add    esp,0x1c
c0001b82:	c3                   	ret    

c0001b83 <dlpvalloc>:
c0001b83:	83 ec 0c             	sub    esp,0xc
c0001b86:	83 3d 00 f1 02 c0 00 	cmp    DWORD PTR ds:0xc002f100,0x0
c0001b8d:	75 0a                	jne    c0001b99 <dlpvalloc+0x16>
c0001b8f:	b8 00 f1 02 c0       	mov    eax,0xc002f100
c0001b94:	e8 06 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b99:	52                   	push   edx
c0001b9a:	a1 5c f4 02 c0       	mov    eax,ds:0xc002f45c
c0001b9f:	52                   	push   edx
c0001ba0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001ba4:	89 c1                	mov    ecx,eax
c0001ba6:	f7 d9                	neg    ecx
c0001ba8:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001bac:	21 ca                	and    edx,ecx
c0001bae:	52                   	push   edx
c0001baf:	50                   	push   eax
c0001bb0:	e8 ae fd ff ff       	call   c0001963 <dlmemalign>
c0001bb5:	83 c4 1c             	add    esp,0x1c
c0001bb8:	c3                   	ret    

c0001bb9 <dlmalloc_trim>:
c0001bb9:	b8 00 f1 02 c0       	mov    eax,0xc002f100
c0001bbe:	e8 dc f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001bc3:	31 c0                	xor    eax,eax
c0001bc5:	c3                   	ret    

c0001bc6 <dlmalloc_usable_size>:
c0001bc6:	53                   	push   ebx
c0001bc7:	31 c0                	xor    eax,eax
c0001bc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001bcd:	85 c9                	test   ecx,ecx
c0001bcf:	74 24                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bd1:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001bd4:	f6 c2 02             	test   dl,0x2
c0001bd7:	74 08                	je     c0001be1 <dlmalloc_usable_size+0x1b>
c0001bd9:	83 e2 fc             	and    edx,0xfffffffc
c0001bdc:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bdf:	eb 14                	jmp    c0001bf5 <dlmalloc_usable_size+0x2f>
c0001be1:	89 d3                	mov    ebx,edx
c0001be3:	31 c0                	xor    eax,eax
c0001be5:	83 e3 fe             	and    ebx,0xfffffffe
c0001be8:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bed:	74 06                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bef:	83 e2 fc             	and    edx,0xfffffffc
c0001bf2:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bf5:	5b                   	pop    ebx
c0001bf6:	c3                   	ret    

c0001bf7 <dlmallinfo>:
c0001bf7:	55                   	push   ebp
c0001bf8:	57                   	push   edi
c0001bf9:	56                   	push   esi
c0001bfa:	53                   	push   ebx
c0001bfb:	83 ec 08             	sub    esp,0x8
c0001bfe:	83 3d 2c f1 02 c0 00 	cmp    DWORD PTR ds:0xc002f12c,0x0
c0001c05:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001c09:	75 0a                	jne    c0001c15 <dlmallinfo+0x1e>
c0001c0b:	b8 00 f1 02 c0       	mov    eax,0xc002f100
c0001c10:	e8 8a f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001c15:	a1 2c f1 02 c0       	mov    eax,ds:0xc002f12c
c0001c1a:	31 ed                	xor    ebp,ebp
c0001c1c:	31 c9                	xor    ecx,ecx
c0001c1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001c21:	83 e0 fc             	and    eax,0xfffffffc
c0001c24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c28:	31 c0                	xor    eax,eax
c0001c2a:	8b 14 85 04 f1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0efc]
c0001c31:	85 d2                	test   edx,edx
c0001c33:	74 0e                	je     c0001c43 <dlmallinfo+0x4c>
c0001c35:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c38:	45                   	inc    ebp
c0001c39:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c3c:	83 e6 fc             	and    esi,0xfffffffc
c0001c3f:	01 f1                	add    ecx,esi
c0001c41:	eb ee                	jmp    c0001c31 <dlmallinfo+0x3a>
c0001c43:	40                   	inc    eax
c0001c44:	83 f8 0a             	cmp    eax,0xa
c0001c47:	75 e1                	jne    c0001c2a <dlmallinfo+0x33>
c0001c49:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c54:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c57:	b8 34 f1 02 c0       	mov    eax,0xc002f134
c0001c5c:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c5f:	39 f0                	cmp    eax,esi
c0001c61:	74 10                	je     c0001c73 <dlmallinfo+0x7c>
c0001c63:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c66:	ff 04 24             	inc    DWORD PTR [esp]
c0001c69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c6c:	83 e7 fc             	and    edi,0xfffffffc
c0001c6f:	01 fa                	add    edx,edi
c0001c71:	eb ec                	jmp    c0001c5f <dlmallinfo+0x68>
c0001c73:	83 c0 08             	add    eax,0x8
c0001c76:	3d 2c f4 02 c0       	cmp    eax,0xc002f42c
c0001c7b:	75 df                	jne    c0001c5c <dlmallinfo+0x65>
c0001c7d:	8b 35 50 f4 02 c0    	mov    esi,DWORD PTR ds:0xc002f450
c0001c83:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c86:	a1 68 f4 02 c0       	mov    eax,ds:0xc002f468
c0001c8b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c91:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c97:	8b 35 64 f4 02 c0    	mov    esi,DWORD PTR ds:0xc002f464
c0001c9d:	89 03                	mov    DWORD PTR [ebx],eax
c0001c9f:	29 d0                	sub    eax,edx
c0001ca1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ca8:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001cab:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001cae:	8b 35 74 f4 02 c0    	mov    esi,DWORD PTR ds:0xc002f474
c0001cb4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001cb7:	89 d8                	mov    eax,ebx
c0001cb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001cbc:	83 c4 08             	add    esp,0x8
c0001cbf:	5b                   	pop    ebx
c0001cc0:	5e                   	pop    esi
c0001cc1:	5f                   	pop    edi
c0001cc2:	5d                   	pop    ebp
c0001cc3:	c2 04 00             	ret    0x4

c0001cc6 <dlmalloc_stats>:
c0001cc6:	83 ec 30             	sub    esp,0x30
c0001cc9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001ccd:	50                   	push   eax
c0001cce:	e8 24 ff ff ff       	call   c0001bf7 <dlmallinfo>
c0001cd3:	83 c4 30             	add    esp,0x30
c0001cd6:	c3                   	ret    

c0001cd7 <dlmallopt>:
c0001cd7:	56                   	push   esi
c0001cd8:	b8 00 f1 02 c0       	mov    eax,0xc002f100
c0001cdd:	53                   	push   ebx
c0001cde:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001ce2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001ce6:	e8 b4 ef ff ff       	call   c0000c9f <malloc_consolidate>
c0001ceb:	8d 46 04             	lea    eax,[esi+0x4]
c0001cee:	83 f8 05             	cmp    eax,0x5
c0001cf1:	77 5d                	ja     c0001d50 <dlmallopt+0x79>
c0001cf3:	ff 24 85 a4 81 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd7e5c]
c0001cfa:	83 fb 50             	cmp    ebx,0x50
c0001cfd:	77 51                	ja     c0001d50 <dlmallopt+0x79>
c0001cff:	85 db                	test   ebx,ebx
c0001d01:	ba 08 00 00 00       	mov    edx,0x8
c0001d06:	74 12                	je     c0001d1a <dlmallopt+0x43>
c0001d08:	83 c3 0b             	add    ebx,0xb
c0001d0b:	ba 10 00 00 00       	mov    edx,0x10
c0001d10:	83 fb 0f             	cmp    ebx,0xf
c0001d13:	76 05                	jbe    c0001d1a <dlmallopt+0x43>
c0001d15:	89 da                	mov    edx,ebx
c0001d17:	83 e2 f8             	and    edx,0xfffffff8
c0001d1a:	a1 00 f1 02 c0       	mov    eax,ds:0xc002f100
c0001d1f:	83 e0 03             	and    eax,0x3
c0001d22:	09 d0                	or     eax,edx
c0001d24:	a3 00 f1 02 c0       	mov    ds:0xc002f100,eax
c0001d29:	eb 27                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d2b:	89 1d 44 f4 02 c0    	mov    DWORD PTR ds:0xc002f444,ebx
c0001d31:	eb 16                	jmp    c0001d49 <dlmallopt+0x72>
c0001d33:	89 1d 48 f4 02 c0    	mov    DWORD PTR ds:0xc002f448,ebx
c0001d39:	eb 0e                	jmp    c0001d49 <dlmallopt+0x72>
c0001d3b:	89 1d 4c f4 02 c0    	mov    DWORD PTR ds:0xc002f44c,ebx
c0001d41:	eb 06                	jmp    c0001d49 <dlmallopt+0x72>
c0001d43:	89 1d 54 f4 02 c0    	mov    DWORD PTR ds:0xc002f454,ebx
c0001d49:	be 01 00 00 00       	mov    esi,0x1
c0001d4e:	eb 02                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d50:	31 f6                	xor    esi,esi
c0001d52:	5b                   	pop    ebx
c0001d53:	89 f0                	mov    eax,esi
c0001d55:	5e                   	pop    esi
c0001d56:	c3                   	ret    
c0001d57:	90                   	nop

c0001d58 <isblank>:
c0001d58:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d5d:	74 09                	je     c0001d68 <isblank+0x10>
c0001d5f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d64:	75 0a                	jne    c0001d70 <isblank+0x18>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	b8 01 00 00 00       	mov    eax,0x1
c0001d6d:	c3                   	ret    
c0001d6e:	66 90                	xchg   ax,ax
c0001d70:	b8 00 00 00 00       	mov    eax,0x0
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax

c0001d78 <iscntrl>:
c0001d78:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d7d:	7e 09                	jle    c0001d88 <iscntrl+0x10>
c0001d7f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d84:	75 0a                	jne    c0001d90 <iscntrl+0x18>
c0001d86:	66 90                	xchg   ax,ax
c0001d88:	b8 01 00 00 00       	mov    eax,0x1
c0001d8d:	c3                   	ret    
c0001d8e:	66 90                	xchg   ax,ax
c0001d90:	b8 00 00 00 00       	mov    eax,0x0
c0001d95:	c3                   	ret    
c0001d96:	66 90                	xchg   ax,ax

c0001d98 <isdigit>:
c0001d98:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d9d:	7e 0d                	jle    c0001dac <isdigit+0x14>
c0001d9f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001da4:	7f 06                	jg     c0001dac <isdigit+0x14>
c0001da6:	b8 01 00 00 00       	mov    eax,0x1
c0001dab:	c3                   	ret    
c0001dac:	b8 00 00 00 00       	mov    eax,0x0
c0001db1:	c3                   	ret    
c0001db2:	66 90                	xchg   ax,ax

c0001db4 <islower>:
c0001db4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001db9:	7e 0d                	jle    c0001dc8 <islower+0x14>
c0001dbb:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001dc0:	7f 06                	jg     c0001dc8 <islower+0x14>
c0001dc2:	b8 01 00 00 00       	mov    eax,0x1
c0001dc7:	c3                   	ret    
c0001dc8:	b8 00 00 00 00       	mov    eax,0x0
c0001dcd:	c3                   	ret    
c0001dce:	66 90                	xchg   ax,ax

c0001dd0 <isspace>:
c0001dd0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001dd5:	7c 19                	jl     c0001df0 <isspace+0x20>
c0001dd7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001ddc:	7e 0a                	jle    c0001de8 <isspace+0x18>
c0001dde:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001de3:	75 0b                	jne    c0001df0 <isspace+0x20>
c0001de5:	8d 76 00             	lea    esi,[esi+0x0]
c0001de8:	b8 01 00 00 00       	mov    eax,0x1
c0001ded:	c3                   	ret    
c0001dee:	66 90                	xchg   ax,ax
c0001df0:	b8 00 00 00 00       	mov    eax,0x0
c0001df5:	c3                   	ret    
c0001df6:	66 90                	xchg   ax,ax

c0001df8 <isupper>:
c0001df8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dfd:	7e 0d                	jle    c0001e0c <isupper+0x14>
c0001dff:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001e04:	7f 06                	jg     c0001e0c <isupper+0x14>
c0001e06:	b8 01 00 00 00       	mov    eax,0x1
c0001e0b:	c3                   	ret    
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalpha>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 db ff ff ff       	call   c0001df8 <isupper>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalpha+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 87 ff ff ff       	call   c0001db4 <islower>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalpha+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <isalnum>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalpha>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 10                	jne    c0001e64 <isalnum+0x20>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 3b ff ff ff       	call   c0001d98 <isdigit>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	74 08                	je     c0001e6c <isalnum+0x28>
c0001e64:	b8 01 00 00 00       	mov    eax,0x1
c0001e69:	c3                   	ret    
c0001e6a:	66 90                	xchg   ax,ax
c0001e6c:	b8 00 00 00 00       	mov    eax,0x0
c0001e71:	c3                   	ret    
c0001e72:	66 90                	xchg   ax,ax

c0001e74 <ispunct>:
c0001e74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e78:	e8 c7 ff ff ff       	call   c0001e44 <isalnum>
c0001e7d:	83 c4 04             	add    esp,0x4
c0001e80:	85 c0                	test   eax,eax
c0001e82:	75 28                	jne    c0001eac <ispunct+0x38>
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 43 ff ff ff       	call   c0001dd0 <isspace>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 18                	jne    c0001eac <ispunct+0x38>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 db fe ff ff       	call   c0001d78 <iscntrl>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	75 08                	jne    c0001eac <ispunct+0x38>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isgraph>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 87 ff ff ff       	call   c0001e44 <isalnum>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 10                	jne    c0001ed4 <isgraph+0x20>
c0001ec4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ec8:	e8 a7 ff ff ff       	call   c0001e74 <ispunct>
c0001ecd:	83 c4 04             	add    esp,0x4
c0001ed0:	85 c0                	test   eax,eax
c0001ed2:	74 08                	je     c0001edc <isgraph+0x28>
c0001ed4:	b8 01 00 00 00       	mov    eax,0x1
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax
c0001edc:	b8 00 00 00 00       	mov    eax,0x0
c0001ee1:	c3                   	ret    
c0001ee2:	66 90                	xchg   ax,ax

c0001ee4 <isprint>:
c0001ee4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee8:	e8 c7 ff ff ff       	call   c0001eb4 <isgraph>
c0001eed:	83 c4 04             	add    esp,0x4
c0001ef0:	85 c0                	test   eax,eax
c0001ef2:	75 08                	jne    c0001efc <isprint+0x18>
c0001ef4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ef9:	75 09                	jne    c0001f04 <isprint+0x20>
c0001efb:	90                   	nop
c0001efc:	b8 01 00 00 00       	mov    eax,0x1
c0001f01:	c3                   	ret    
c0001f02:	66 90                	xchg   ax,ax
c0001f04:	b8 00 00 00 00       	mov    eax,0x0
c0001f09:	c3                   	ret    
c0001f0a:	66 90                	xchg   ax,ax

c0001f0c <isxdigit>:
c0001f0c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f10:	e8 83 fe ff ff       	call   c0001d98 <isdigit>
c0001f15:	83 c4 04             	add    esp,0x4
c0001f18:	85 c0                	test   eax,eax
c0001f1a:	75 20                	jne    c0001f3c <isxdigit+0x30>
c0001f1c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f21:	7e 09                	jle    c0001f2c <isxdigit+0x20>
c0001f23:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001f28:	7e 12                	jle    c0001f3c <isxdigit+0x30>
c0001f2a:	66 90                	xchg   ax,ax
c0001f2c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f31:	7e 11                	jle    c0001f44 <isxdigit+0x38>
c0001f33:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f38:	7f 0a                	jg     c0001f44 <isxdigit+0x38>
c0001f3a:	66 90                	xchg   ax,ax
c0001f3c:	b8 01 00 00 00       	mov    eax,0x1
c0001f41:	c3                   	ret    
c0001f42:	66 90                	xchg   ax,ax
c0001f44:	b8 00 00 00 00       	mov    eax,0x0
c0001f49:	c3                   	ret    
c0001f4a:	66 90                	xchg   ax,ax

c0001f4c <LWIP_PLATFORM_HTONS>:
c0001f4c:	83 ec 04             	sub    esp,0x4
c0001f4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f53:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f57:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f5b:	c1 e8 08             	shr    eax,0x8
c0001f5e:	89 c2                	mov    edx,eax
c0001f60:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f64:	c1 e0 08             	shl    eax,0x8
c0001f67:	09 d0                	or     eax,edx
c0001f69:	83 c4 04             	add    esp,0x4
c0001f6c:	c3                   	ret    
c0001f6d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f70 <LWIP_PLATFORM_HTONL>:
c0001f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f74:	c1 e8 18             	shr    eax,0x18
c0001f77:	89 c2                	mov    edx,eax
c0001f79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f7d:	c1 e8 08             	shr    eax,0x8
c0001f80:	25 00 ff 00 00       	and    eax,0xff00
c0001f85:	09 c2                	or     edx,eax
c0001f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f8b:	c1 e0 08             	shl    eax,0x8
c0001f8e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f93:	09 c2                	or     edx,eax
c0001f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f99:	c1 e0 18             	shl    eax,0x18
c0001f9c:	09 d0                	or     eax,edx
c0001f9e:	c3                   	ret    

c0001f9f <disk_status>:
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <disk_initialize>:
c0001fa2:	31 c0                	xor    eax,eax
c0001fa4:	c3                   	ret    

c0001fa5 <disk_read>:
c0001fa5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faa:	0f b6 04 85 20 55 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcaae0]
c0001fb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fb6:	e9 39 b6 01 00       	jmp    c001d5f4 <fatWrapperReadDisk>

c0001fbb <disk_write>:
c0001fbb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fc0:	0f b6 04 85 20 55 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcaae0]
c0001fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fcc:	e9 63 b6 01 00       	jmp    c001d634 <fatWrapperWriteDisk>

c0001fd1 <disk_ioctl>:
c0001fd1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001fda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fdf:	0f b6 04 85 20 55 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcaae0]
c0001fe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001feb:	e9 84 b6 01 00       	jmp    c001d674 <fatWrapperIoctl>

c0001ff0 <ld_word>:
c0001ff0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ff4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff7:	c1 e2 08             	shl    edx,0x8
c0001ffa:	09 d0                	or     eax,edx
c0001ffc:	c3                   	ret    

c0001ffd <ld_dword>:
c0001ffd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002001:	89 d1                	mov    ecx,edx
c0002003:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002007:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000200a:	c1 e1 08             	shl    ecx,0x8
c000200d:	09 ca                	or     edx,ecx
c000200f:	c1 e2 08             	shl    edx,0x8
c0002012:	09 d0                	or     eax,edx
c0002014:	c3                   	ret    

c0002015 <st_word>:
c0002015:	66 89 10             	mov    WORD PTR [eax],dx
c0002018:	c3                   	ret    

c0002019 <st_dword>:
c0002019:	89 10                	mov    DWORD PTR [eax],edx
c000201b:	c3                   	ret    

c000201c <mem_cpy>:
c000201c:	85 c9                	test   ecx,ecx
c000201e:	74 10                	je     c0002030 <mem_cpy+0x14>
c0002020:	57                   	push   edi
c0002021:	01 c1                	add    ecx,eax
c0002023:	56                   	push   esi
c0002024:	89 c7                	mov    edi,eax
c0002026:	89 d6                	mov    esi,edx
c0002028:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0002029:	39 f9                	cmp    ecx,edi
c000202b:	75 fb                	jne    c0002028 <mem_cpy+0xc>
c000202d:	5e                   	pop    esi
c000202e:	5f                   	pop    edi
c000202f:	c3                   	ret    
c0002030:	c3                   	ret    

c0002031 <mem_set>:
c0002031:	01 c1                	add    ecx,eax
c0002033:	88 10                	mov    BYTE PTR [eax],dl
c0002035:	40                   	inc    eax
c0002036:	39 c8                	cmp    eax,ecx
c0002038:	75 f9                	jne    c0002033 <mem_set+0x2>
c000203a:	c3                   	ret    

c000203b <mem_cmp>:
c000203b:	57                   	push   edi
c000203c:	56                   	push   esi
c000203d:	89 c6                	mov    esi,eax
c000203f:	53                   	push   ebx
c0002040:	46                   	inc    esi
c0002041:	42                   	inc    edx
c0002042:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0002046:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c000204a:	29 fb                	sub    ebx,edi
c000204c:	89 cf                	mov    edi,ecx
c000204e:	29 f7                	sub    edi,esi
c0002050:	01 c7                	add    edi,eax
c0002052:	74 04                	je     c0002058 <mem_cmp+0x1d>
c0002054:	85 db                	test   ebx,ebx
c0002056:	74 e8                	je     c0002040 <mem_cmp+0x5>
c0002058:	89 d8                	mov    eax,ebx
c000205a:	5b                   	pop    ebx
c000205b:	5e                   	pop    esi
c000205c:	5f                   	pop    edi
c000205d:	c3                   	ret    

c000205e <chk_chr>:
c000205e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002061:	85 c9                	test   ecx,ecx
c0002063:	74 07                	je     c000206c <chk_chr+0xe>
c0002065:	39 d1                	cmp    ecx,edx
c0002067:	74 03                	je     c000206c <chk_chr+0xe>
c0002069:	40                   	inc    eax
c000206a:	eb f2                	jmp    c000205e <chk_chr>
c000206c:	89 c8                	mov    eax,ecx
c000206e:	c3                   	ret    

c000206f <dbc_1st>:
c000206f:	31 c0                	xor    eax,eax
c0002071:	c3                   	ret    

c0002072 <dbc_2nd>:
c0002072:	31 c0                	xor    eax,eax
c0002074:	c3                   	ret    

c0002075 <tchar2uni>:
c0002075:	57                   	push   edi
c0002076:	56                   	push   esi
c0002077:	53                   	push   ebx
c0002078:	8b 18                	mov    ebx,DWORD PTR [eax]
c000207a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000207c:	8d 73 01             	lea    esi,[ebx+0x1]
c000207f:	f6 c1 80             	test   cl,0x80
c0002082:	75 0a                	jne    c000208e <tchar2uni+0x19>
c0002084:	0f b6 d1             	movzx  edx,cl
c0002087:	89 f3                	mov    ebx,esi
c0002089:	e9 b2 00 00 00       	jmp    c0002140 <tchar2uni+0xcb>
c000208e:	89 ca                	mov    edx,ecx
c0002090:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002096:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000209c:	89 ca                	mov    edx,ecx
c000209e:	75 0a                	jne    c00020aa <tchar2uni+0x35>
c00020a0:	83 e2 1f             	and    edx,0x1f
c00020a3:	b9 01 00 00 00       	mov    ecx,0x1
c00020a8:	eb 37                	jmp    c00020e1 <tchar2uni+0x6c>
c00020aa:	81 e2 f0 00 00 00    	and    edx,0xf0
c00020b0:	81 fa e0 00 00 00    	cmp    edx,0xe0
c00020b6:	75 0c                	jne    c00020c4 <tchar2uni+0x4f>
c00020b8:	89 ca                	mov    edx,ecx
c00020ba:	b9 02 00 00 00       	mov    ecx,0x2
c00020bf:	83 e2 0f             	and    edx,0xf
c00020c2:	eb 1d                	jmp    c00020e1 <tchar2uni+0x6c>
c00020c4:	89 cf                	mov    edi,ecx
c00020c6:	83 ca ff             	or     edx,0xffffffff
c00020c9:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020cf:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020d5:	75 70                	jne    c0002147 <tchar2uni+0xd2>
c00020d7:	89 ca                	mov    edx,ecx
c00020d9:	b9 03 00 00 00       	mov    ecx,0x3
c00020de:	83 e2 07             	and    edx,0x7
c00020e1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020e5:	46                   	inc    esi
c00020e6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020e9:	89 cf                	mov    edi,ecx
c00020eb:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020f1:	83 c7 80             	add    edi,0xffffff80
c00020f4:	75 4e                	jne    c0002144 <tchar2uni+0xcf>
c00020f6:	c1 e2 06             	shl    edx,0x6
c00020f9:	83 e1 3f             	and    ecx,0x3f
c00020fc:	09 ca                	or     edx,ecx
c00020fe:	39 de                	cmp    esi,ebx
c0002100:	75 e3                	jne    c00020e5 <tchar2uni+0x70>
c0002102:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002108:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000210e:	76 34                	jbe    c0002144 <tchar2uni+0xcf>
c0002110:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002113:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0002119:	77 29                	ja     c0002144 <tchar2uni+0xcf>
c000211b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002121:	76 1d                	jbe    c0002140 <tchar2uni+0xcb>
c0002123:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002129:	81 e2 ff 03 00 00    	and    edx,0x3ff
c000212f:	c1 e1 06             	shl    ecx,0x6
c0002132:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002138:	09 ca                	or     edx,ecx
c000213a:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002140:	89 18                	mov    DWORD PTR [eax],ebx
c0002142:	eb 03                	jmp    c0002147 <tchar2uni+0xd2>
c0002144:	83 ca ff             	or     edx,0xffffffff
c0002147:	5b                   	pop    ebx
c0002148:	89 d0                	mov    eax,edx
c000214a:	5e                   	pop    esi
c000214b:	5f                   	pop    edi
c000214c:	c3                   	ret    

c000214d <put_utf>:
c000214d:	53                   	push   ebx
c000214e:	83 f8 7f             	cmp    eax,0x7f
c0002151:	89 c3                	mov    ebx,eax
c0002153:	b0 00                	mov    al,0x0
c0002155:	77 11                	ja     c0002168 <put_utf+0x1b>
c0002157:	85 c9                	test   ecx,ecx
c0002159:	0f 84 e5 00 00 00    	je     c0002244 <put_utf+0xf7>
c000215f:	88 1a                	mov    BYTE PTR [edx],bl
c0002161:	b0 01                	mov    al,0x1
c0002163:	e9 dc 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002168:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000216e:	77 23                	ja     c0002193 <put_utf+0x46>
c0002170:	83 f9 01             	cmp    ecx,0x1
c0002173:	0f 86 cb 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c0002179:	89 d8                	mov    eax,ebx
c000217b:	83 e3 3f             	and    ebx,0x3f
c000217e:	c1 e8 06             	shr    eax,0x6
c0002181:	83 cb 80             	or     ebx,0xffffff80
c0002184:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0002187:	83 c8 c0             	or     eax,0xffffffc0
c000218a:	88 02                	mov    BYTE PTR [edx],al
c000218c:	b0 02                	mov    al,0x2
c000218e:	e9 b1 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002193:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002199:	77 40                	ja     c00021db <put_utf+0x8e>
c000219b:	83 f9 02             	cmp    ecx,0x2
c000219e:	0f 86 a0 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021a4:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00021aa:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00021b0:	0f 86 8e 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021b6:	89 d8                	mov    eax,ebx
c00021b8:	c1 e8 0c             	shr    eax,0xc
c00021bb:	83 c8 e0             	or     eax,0xffffffe0
c00021be:	88 02                	mov    BYTE PTR [edx],al
c00021c0:	89 d8                	mov    eax,ebx
c00021c2:	83 e3 3f             	and    ebx,0x3f
c00021c5:	c1 e8 06             	shr    eax,0x6
c00021c8:	83 cb 80             	or     ebx,0xffffff80
c00021cb:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021ce:	83 e0 3f             	and    eax,0x3f
c00021d1:	83 c8 80             	or     eax,0xffffff80
c00021d4:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021d7:	b0 03                	mov    al,0x3
c00021d9:	eb 69                	jmp    c0002244 <put_utf+0xf7>
c00021db:	83 f9 03             	cmp    ecx,0x3
c00021de:	76 64                	jbe    c0002244 <put_utf+0xf7>
c00021e0:	89 d9                	mov    ecx,ebx
c00021e2:	0f b7 c3             	movzx  eax,bx
c00021e5:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021eb:	66 31 c9             	xor    cx,cx
c00021ee:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021f4:	c1 e9 06             	shr    ecx,0x6
c00021f7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021fd:	77 43                	ja     c0002242 <put_utf+0xf5>
c00021ff:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002205:	77 3b                	ja     c0002242 <put_utf+0xf5>
c0002207:	09 cb                	or     ebx,ecx
c0002209:	81 c3 00 00 01 00    	add    ebx,0x10000
c000220f:	89 d8                	mov    eax,ebx
c0002211:	c1 e8 12             	shr    eax,0x12
c0002214:	83 c8 f0             	or     eax,0xfffffff0
c0002217:	88 02                	mov    BYTE PTR [edx],al
c0002219:	89 d8                	mov    eax,ebx
c000221b:	c1 e8 0c             	shr    eax,0xc
c000221e:	83 e0 3f             	and    eax,0x3f
c0002221:	83 c8 80             	or     eax,0xffffff80
c0002224:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002227:	89 d8                	mov    eax,ebx
c0002229:	83 e3 3f             	and    ebx,0x3f
c000222c:	c1 e8 06             	shr    eax,0x6
c000222f:	83 cb 80             	or     ebx,0xffffff80
c0002232:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002235:	83 e0 3f             	and    eax,0x3f
c0002238:	83 c8 80             	or     eax,0xffffff80
c000223b:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000223e:	b0 04                	mov    al,0x4
c0002240:	eb 02                	jmp    c0002244 <put_utf+0xf7>
c0002242:	31 c0                	xor    eax,eax
c0002244:	5b                   	pop    ebx
c0002245:	c3                   	ret    

c0002246 <clst2sect>:
c0002246:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002249:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000224c:	83 ea 02             	sub    edx,0x2
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	76 0d                	jbe    c0002260 <clst2sect+0x1a>
c0002253:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002257:	0f af d1             	imul   edx,ecx
c000225a:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000225d:	89 d0                	mov    eax,edx
c000225f:	c3                   	ret    
c0002260:	31 c0                	xor    eax,eax
c0002262:	c3                   	ret    

c0002263 <pick_lfn>:
c0002263:	55                   	push   ebp
c0002264:	57                   	push   edi
c0002265:	89 c7                	mov    edi,eax
c0002267:	56                   	push   esi
c0002268:	53                   	push   ebx
c0002269:	89 d3                	mov    ebx,edx
c000226b:	8d 42 1a             	lea    eax,[edx+0x1a]
c000226e:	e8 7d fd ff ff       	call   c0001ff0 <ld_word>
c0002273:	66 85 c0             	test   ax,ax
c0002276:	74 04                	je     c000227c <pick_lfn+0x19>
c0002278:	31 c0                	xor    eax,eax
c000227a:	eb 62                	jmp    c00022de <pick_lfn+0x7b>
c000227c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000227f:	bd 01 00 00 00       	mov    ebp,0x1
c0002284:	31 f6                	xor    esi,esi
c0002286:	83 e1 bf             	and    ecx,0xffffffbf
c0002289:	49                   	dec    ecx
c000228a:	6b c9 0d             	imul   ecx,ecx,0xd
c000228d:	0f b6 86 00 83 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd7d00]
c0002294:	01 d8                	add    eax,ebx
c0002296:	e8 55 fd ff ff       	call   c0001ff0 <ld_word>
c000229b:	66 85 ed             	test   bp,bp
c000229e:	74 11                	je     c00022b1 <pick_lfn+0x4e>
c00022a0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a6:	77 d0                	ja     c0002278 <pick_lfn+0x15>
c00022a8:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00022ac:	89 c5                	mov    ebp,eax
c00022ae:	41                   	inc    ecx
c00022af:	eb 0a                	jmp    c00022bb <pick_lfn+0x58>
c00022b1:	0f b7 c0             	movzx  eax,ax
c00022b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00022b9:	75 bd                	jne    c0002278 <pick_lfn+0x15>
c00022bb:	46                   	inc    esi
c00022bc:	83 fe 0d             	cmp    esi,0xd
c00022bf:	75 cc                	jne    c000228d <pick_lfn+0x2a>
c00022c1:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00022c4:	74 13                	je     c00022d9 <pick_lfn+0x76>
c00022c6:	66 85 ed             	test   bp,bp
c00022c9:	74 0e                	je     c00022d9 <pick_lfn+0x76>
c00022cb:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022d1:	77 a5                	ja     c0002278 <pick_lfn+0x15>
c00022d3:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022d9:	b8 01 00 00 00       	mov    eax,0x1
c00022de:	5b                   	pop    ebx
c00022df:	5e                   	pop    esi
c00022e0:	5f                   	pop    edi
c00022e1:	5d                   	pop    ebp
c00022e2:	c3                   	ret    

c00022e3 <put_lfn>:
c00022e3:	55                   	push   ebp
c00022e4:	57                   	push   edi
c00022e5:	89 d7                	mov    edi,edx
c00022e7:	56                   	push   esi
c00022e8:	31 f6                	xor    esi,esi
c00022ea:	53                   	push   ebx
c00022eb:	83 ec 0c             	sub    esp,0xc
c00022ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022f2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00022f6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022fc:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002300:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002303:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002306:	31 d2                	xor    edx,edx
c0002308:	e8 08 fd ff ff       	call   c0002015 <st_word>
c000230d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002314:	0f b6 d9             	movzx  ebx,cl
c0002317:	4b                   	dec    ebx
c0002318:	6b db 0d             	imul   ebx,ebx,0xd
c000231b:	0f b7 c6             	movzx  eax,si
c000231e:	3d ff ff 00 00       	cmp    eax,0xffff
c0002323:	74 09                	je     c000232e <put_lfn+0x4b>
c0002325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002329:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000232d:	43                   	inc    ebx
c000232e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002331:	0f b7 ee             	movzx  ebp,si
c0002334:	89 ea                	mov    edx,ebp
c0002336:	0f b6 80 00 83 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd7d00]
c000233d:	01 f8                	add    eax,edi
c000233f:	e8 d1 fc ff ff       	call   c0002015 <st_word>
c0002344:	85 ed                	test   ebp,ebp
c0002346:	75 05                	jne    c000234d <put_lfn+0x6a>
c0002348:	be ff ff 00 00       	mov    esi,0xffff
c000234d:	ff 04 24             	inc    DWORD PTR [esp]
c0002350:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002354:	75 c5                	jne    c000231b <put_lfn+0x38>
c0002356:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000235c:	74 0b                	je     c0002369 <put_lfn+0x86>
c000235e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002362:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002367:	75 07                	jne    c0002370 <put_lfn+0x8d>
c0002369:	83 c9 40             	or     ecx,0x40
c000236c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002370:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002374:	88 07                	mov    BYTE PTR [edi],al
c0002376:	83 c4 0c             	add    esp,0xc
c0002379:	5b                   	pop    ebx
c000237a:	5e                   	pop    esi
c000237b:	5f                   	pop    edi
c000237c:	5d                   	pop    ebp
c000237d:	c3                   	ret    

c000237e <gen_numname>:
c000237e:	57                   	push   edi
c000237f:	89 cf                	mov    edi,ecx
c0002381:	56                   	push   esi
c0002382:	b9 0b 00 00 00       	mov    ecx,0xb
c0002387:	53                   	push   ebx
c0002388:	89 c6                	mov    esi,eax
c000238a:	83 ec 10             	sub    esp,0x10
c000238d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002391:	e8 86 fc ff ff       	call   c000201c <mem_cpy>
c0002396:	83 fb 05             	cmp    ebx,0x5
c0002399:	76 30                	jbe    c00023cb <gen_numname+0x4d>
c000239b:	66 8b 07             	mov    ax,WORD PTR [edi]
c000239e:	66 85 c0             	test   ax,ax
c00023a1:	74 28                	je     c00023cb <gen_numname+0x4d>
c00023a3:	83 c7 02             	add    edi,0x2
c00023a6:	ba 10 00 00 00       	mov    edx,0x10
c00023ab:	89 c1                	mov    ecx,eax
c00023ad:	01 db                	add    ebx,ebx
c00023af:	c1 e0 10             	shl    eax,0x10
c00023b2:	83 e1 01             	and    ecx,0x1
c00023b5:	c1 e8 11             	shr    eax,0x11
c00023b8:	01 cb                	add    ebx,ecx
c00023ba:	0f ba e3 10          	bt     ebx,0x10
c00023be:	73 06                	jae    c00023c6 <gen_numname+0x48>
c00023c0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00023c6:	4a                   	dec    edx
c00023c7:	75 e2                	jne    c00023ab <gen_numname+0x2d>
c00023c9:	eb d0                	jmp    c000239b <gen_numname+0x1d>
c00023cb:	b8 07 00 00 00       	mov    eax,0x7
c00023d0:	89 d9                	mov    ecx,ebx
c00023d2:	83 e1 0f             	and    ecx,0xf
c00023d5:	8d 79 30             	lea    edi,[ecx+0x30]
c00023d8:	83 ff 39             	cmp    edi,0x39
c00023db:	89 fa                	mov    edx,edi
c00023dd:	76 03                	jbe    c00023e2 <gen_numname+0x64>
c00023df:	8d 51 37             	lea    edx,[ecx+0x37]
c00023e2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023e5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023e9:	89 da                	mov    edx,ebx
c00023eb:	c1 ea 04             	shr    edx,0x4
c00023ee:	83 fb 0f             	cmp    ebx,0xf
c00023f1:	76 06                	jbe    c00023f9 <gen_numname+0x7b>
c00023f3:	89 c8                	mov    eax,ecx
c00023f5:	89 d3                	mov    ebx,edx
c00023f7:	eb d7                	jmp    c00023d0 <gen_numname+0x52>
c00023f9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023fe:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002401:	31 d2                	xor    edx,edx
c0002403:	8d 04 16             	lea    eax,[esi+edx*1]
c0002406:	39 ca                	cmp    edx,ecx
c0002408:	73 19                	jae    c0002423 <gen_numname+0xa5>
c000240a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000240d:	83 f8 20             	cmp    eax,0x20
c0002410:	74 11                	je     c0002423 <gen_numname+0xa5>
c0002412:	e8 58 fc ff ff       	call   c000206f <dbc_1st>
c0002417:	85 c0                	test   eax,eax
c0002419:	74 05                	je     c0002420 <gen_numname+0xa2>
c000241b:	39 d3                	cmp    ebx,edx
c000241d:	74 04                	je     c0002423 <gen_numname+0xa5>
c000241f:	42                   	inc    edx
c0002420:	42                   	inc    edx
c0002421:	eb e0                	jmp    c0002403 <gen_numname+0x85>
c0002423:	83 f9 07             	cmp    ecx,0x7
c0002426:	b0 20                	mov    al,0x20
c0002428:	77 05                	ja     c000242f <gen_numname+0xb1>
c000242a:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000242e:	41                   	inc    ecx
c000242f:	42                   	inc    edx
c0002430:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002434:	83 fa 07             	cmp    edx,0x7
c0002437:	76 ea                	jbe    c0002423 <gen_numname+0xa5>
c0002439:	83 c4 10             	add    esp,0x10
c000243c:	5b                   	pop    ebx
c000243d:	5e                   	pop    esi
c000243e:	5f                   	pop    edi
c000243f:	c3                   	ret    

c0002440 <sum_sfn>:
c0002440:	53                   	push   ebx
c0002441:	31 c9                	xor    ecx,ecx
c0002443:	31 db                	xor    ebx,ebx
c0002445:	0f b6 d1             	movzx  edx,cl
c0002448:	d1 ea                	shr    edx,1
c000244a:	c1 e1 07             	shl    ecx,0x7
c000244d:	09 ca                	or     edx,ecx
c000244f:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002452:	43                   	inc    ebx
c0002453:	01 ca                	add    edx,ecx
c0002455:	83 fb 0b             	cmp    ebx,0xb
c0002458:	88 d1                	mov    cl,dl
c000245a:	75 e9                	jne    c0002445 <sum_sfn+0x5>
c000245c:	5b                   	pop    ebx
c000245d:	88 d0                	mov    al,dl
c000245f:	c3                   	ret    

c0002460 <get_ldnumber>:
c0002460:	55                   	push   ebp
c0002461:	57                   	push   edi
c0002462:	56                   	push   esi
c0002463:	83 ce ff             	or     esi,0xffffffff
c0002466:	53                   	push   ebx
c0002467:	8b 10                	mov    edx,DWORD PTR [eax]
c0002469:	85 d2                	test   edx,edx
c000246b:	74 38                	je     c00024a5 <get_ldnumber+0x45>
c000246d:	89 c5                	mov    ebp,eax
c000246f:	89 d1                	mov    ecx,edx
c0002471:	41                   	inc    ecx
c0002472:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002476:	80 fb 1f             	cmp    bl,0x1f
c0002479:	76 05                	jbe    c0002480 <get_ldnumber+0x20>
c000247b:	83 fb 3a             	cmp    ebx,0x3a
c000247e:	75 f1                	jne    c0002471 <get_ldnumber+0x11>
c0002480:	31 f6                	xor    esi,esi
c0002482:	83 fb 3a             	cmp    ebx,0x3a
c0002485:	75 1e                	jne    c00024a5 <get_ldnumber+0x45>
c0002487:	8a 1a                	mov    bl,BYTE PTR [edx]
c0002489:	83 ce ff             	or     esi,0xffffffff
c000248c:	8d 7b d0             	lea    edi,[ebx-0x30]
c000248f:	89 f8                	mov    eax,edi
c0002491:	3c 09                	cmp    al,0x9
c0002493:	77 10                	ja     c00024a5 <get_ldnumber+0x45>
c0002495:	83 c2 02             	add    edx,0x2
c0002498:	39 d1                	cmp    ecx,edx
c000249a:	75 09                	jne    c00024a5 <get_ldnumber+0x45>
c000249c:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000249f:	0f be f3             	movsx  esi,bl
c00024a2:	83 ee 30             	sub    esi,0x30
c00024a5:	5b                   	pop    ebx
c00024a6:	89 f0                	mov    eax,esi
c00024a8:	5e                   	pop    esi
c00024a9:	5f                   	pop    edi
c00024aa:	5d                   	pop    ebp
c00024ab:	c3                   	ret    

c00024ac <validate>:
c00024ac:	56                   	push   esi
c00024ad:	85 c0                	test   eax,eax
c00024af:	53                   	push   ebx
c00024b0:	89 d6                	mov    esi,edx
c00024b2:	51                   	push   ecx
c00024b3:	75 09                	jne    c00024be <validate+0x12>
c00024b5:	b8 09 00 00 00       	mov    eax,0x9
c00024ba:	31 c9                	xor    ecx,ecx
c00024bc:	eb 2e                	jmp    c00024ec <validate+0x40>
c00024be:	89 c3                	mov    ebx,eax
c00024c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00024c2:	85 c0                	test   eax,eax
c00024c4:	74 ef                	je     c00024b5 <validate+0x9>
c00024c6:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00024c9:	74 ea                	je     c00024b5 <validate+0x9>
c00024cb:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024ce:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024d2:	75 e1                	jne    c00024b5 <validate+0x9>
c00024d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	50                   	push   eax
c00024dc:	e8 be fa ff ff       	call   c0001f9f <disk_status>
c00024e1:	83 c4 10             	add    esp,0x10
c00024e4:	a8 01                	test   al,0x1
c00024e6:	75 cd                	jne    c00024b5 <validate+0x9>
c00024e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024ea:	31 c0                	xor    eax,eax
c00024ec:	89 0e                	mov    DWORD PTR [esi],ecx
c00024ee:	5a                   	pop    edx
c00024ef:	5b                   	pop    ebx
c00024f0:	5e                   	pop    esi
c00024f1:	c3                   	ret    

c00024f2 <sync_window>:
c00024f2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024f6:	74 58                	je     c0002550 <sync_window+0x5e>
c00024f8:	56                   	push   esi
c00024f9:	53                   	push   ebx
c00024fa:	89 c3                	mov    ebx,eax
c00024fc:	51                   	push   ecx
c00024fd:	6a 01                	push   0x1
c00024ff:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002502:	8d 70 34             	lea    esi,[eax+0x34]
c0002505:	56                   	push   esi
c0002506:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000250a:	50                   	push   eax
c000250b:	e8 ab fa ff ff       	call   c0001fbb <disk_write>
c0002510:	83 c4 10             	add    esp,0x10
c0002513:	ba 01 00 00 00       	mov    edx,0x1
c0002518:	85 c0                	test   eax,eax
c000251a:	75 2e                	jne    c000254a <sync_window+0x58>
c000251c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002520:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002523:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002526:	89 c1                	mov    ecx,eax
c0002528:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000252b:	39 d1                	cmp    ecx,edx
c000252d:	73 19                	jae    c0002548 <sync_window+0x56>
c000252f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002533:	75 13                	jne    c0002548 <sync_window+0x56>
c0002535:	6a 01                	push   0x1
c0002537:	01 d0                	add    eax,edx
c0002539:	50                   	push   eax
c000253a:	56                   	push   esi
c000253b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000253f:	50                   	push   eax
c0002540:	e8 76 fa ff ff       	call   c0001fbb <disk_write>
c0002545:	83 c4 10             	add    esp,0x10
c0002548:	31 d2                	xor    edx,edx
c000254a:	89 d0                	mov    eax,edx
c000254c:	5a                   	pop    edx
c000254d:	5b                   	pop    ebx
c000254e:	5e                   	pop    esi
c000254f:	c3                   	ret    
c0002550:	31 d2                	xor    edx,edx
c0002552:	89 d0                	mov    eax,edx
c0002554:	c3                   	ret    

c0002555 <move_window>:
c0002555:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002558:	74 3a                	je     c0002594 <move_window+0x3f>
c000255a:	56                   	push   esi
c000255b:	89 d6                	mov    esi,edx
c000255d:	53                   	push   ebx
c000255e:	89 c3                	mov    ebx,eax
c0002560:	51                   	push   ecx
c0002561:	e8 8c ff ff ff       	call   c00024f2 <sync_window>
c0002566:	85 c0                	test   eax,eax
c0002568:	75 2d                	jne    c0002597 <move_window+0x42>
c000256a:	6a 01                	push   0x1
c000256c:	56                   	push   esi
c000256d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002570:	50                   	push   eax
c0002571:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002575:	50                   	push   eax
c0002576:	e8 2a fa ff ff       	call   c0001fa5 <disk_read>
c000257b:	83 c4 10             	add    esp,0x10
c000257e:	89 c2                	mov    edx,eax
c0002580:	31 c0                	xor    eax,eax
c0002582:	85 d2                	test   edx,edx
c0002584:	ba ff ff ff ff       	mov    edx,0xffffffff
c0002589:	0f 45 f2             	cmovne esi,edx
c000258c:	0f 95 c0             	setne  al
c000258f:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0002592:	eb 03                	jmp    c0002597 <move_window+0x42>
c0002594:	31 c0                	xor    eax,eax
c0002596:	c3                   	ret    
c0002597:	5a                   	pop    edx
c0002598:	5b                   	pop    ebx
c0002599:	5e                   	pop    esi
c000259a:	c3                   	ret    

c000259b <check_fs>:
c000259b:	53                   	push   ebx
c000259c:	89 c3                	mov    ebx,eax
c000259e:	83 ec 08             	sub    esp,0x8
c00025a1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00025a5:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00025ac:	e8 a4 ff ff ff       	call   c0002555 <move_window>
c00025b1:	ba 04 00 00 00       	mov    edx,0x4
c00025b6:	85 c0                	test   eax,eax
c00025b8:	75 68                	jne    c0002622 <check_fs+0x87>
c00025ba:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00025c0:	e8 2b fa ff ff       	call   c0001ff0 <ld_word>
c00025c5:	ba 03 00 00 00       	mov    edx,0x3
c00025ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00025ce:	75 52                	jne    c0002622 <check_fs+0x87>
c00025d0:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025d3:	8d 50 18             	lea    edx,[eax+0x18]
c00025d6:	80 fa 01             	cmp    dl,0x1
c00025d9:	76 09                	jbe    c00025e4 <check_fs+0x49>
c00025db:	3c eb                	cmp    al,0xeb
c00025dd:	ba 02 00 00 00       	mov    edx,0x2
c00025e2:	75 3e                	jne    c0002622 <check_fs+0x87>
c00025e4:	ba 88 b3 02 c0       	mov    edx,0xc002b388
c00025e9:	b9 03 00 00 00       	mov    ecx,0x3
c00025ee:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025f1:	e8 45 fa ff ff       	call   c000203b <mem_cmp>
c00025f6:	31 d2                	xor    edx,edx
c00025f8:	85 c0                	test   eax,eax
c00025fa:	74 26                	je     c0002622 <check_fs+0x87>
c00025fc:	ba bc 81 02 c0       	mov    edx,0xc00281bc
c0002601:	b9 05 00 00 00       	mov    ecx,0x5
c0002606:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000260c:	e8 2a fa ff ff       	call   c000203b <mem_cmp>
c0002611:	31 d2                	xor    edx,edx
c0002613:	85 c0                	test   eax,eax
c0002615:	74 0b                	je     c0002622 <check_fs+0x87>
c0002617:	31 d2                	xor    edx,edx
c0002619:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000261d:	0f 95 c2             	setne  dl
c0002620:	01 d2                	add    edx,edx
c0002622:	83 c4 08             	add    esp,0x8
c0002625:	89 d0                	mov    eax,edx
c0002627:	5b                   	pop    ebx
c0002628:	c3                   	ret    

c0002629 <find_volume>:
c0002629:	55                   	push   ebp
c000262a:	57                   	push   edi
c000262b:	56                   	push   esi
c000262c:	89 c6                	mov    esi,eax
c000262e:	53                   	push   ebx
c000262f:	89 d3                	mov    ebx,edx
c0002631:	83 ec 2c             	sub    esp,0x2c
c0002634:	31 d2                	xor    edx,edx
c0002636:	e8 60 ff ff ff       	call   c000259b <check_fs>
c000263b:	85 db                	test   ebx,ebx
c000263d:	0f 94 c2             	sete   dl
c0002640:	83 f8 02             	cmp    eax,0x2
c0002643:	74 07                	je     c000264c <find_volume+0x23>
c0002645:	77 63                	ja     c00026aa <find_volume+0x81>
c0002647:	f6 c2 01             	test   dl,0x1
c000264a:	75 5e                	jne    c00026aa <find_volume+0x81>
c000264c:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002652:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002656:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000265c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0002660:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002664:	89 f8                	mov    eax,edi
c0002666:	83 c7 10             	add    edi,0x10
c0002669:	e8 8f f9 ff ff       	call   c0001ffd <ld_dword>
c000266e:	83 c5 04             	add    ebp,0x4
c0002671:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002675:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002678:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000267c:	75 e2                	jne    c0002660 <find_volume+0x37>
c000267e:	83 fb 01             	cmp    ebx,0x1
c0002681:	0f b6 fa             	movzx  edi,dl
c0002684:	83 d3 ff             	adc    ebx,0xffffffff
c0002687:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c000268b:	b8 03 00 00 00       	mov    eax,0x3
c0002690:	85 d2                	test   edx,edx
c0002692:	74 07                	je     c000269b <find_volume+0x72>
c0002694:	89 f0                	mov    eax,esi
c0002696:	e8 00 ff ff ff       	call   c000259b <check_fs>
c000269b:	83 f8 01             	cmp    eax,0x1
c000269e:	76 0a                	jbe    c00026aa <find_volume+0x81>
c00026a0:	85 ff                	test   edi,edi
c00026a2:	74 06                	je     c00026aa <find_volume+0x81>
c00026a4:	43                   	inc    ebx
c00026a5:	83 fb 03             	cmp    ebx,0x3
c00026a8:	76 dd                	jbe    c0002687 <find_volume+0x5e>
c00026aa:	83 c4 2c             	add    esp,0x2c
c00026ad:	5b                   	pop    ebx
c00026ae:	5e                   	pop    esi
c00026af:	5f                   	pop    edi
c00026b0:	5d                   	pop    ebp
c00026b1:	c3                   	ret    

c00026b2 <mount_volume>:
c00026b2:	55                   	push   ebp
c00026b3:	89 d5                	mov    ebp,edx
c00026b5:	57                   	push   edi
c00026b6:	89 cf                	mov    edi,ecx
c00026b8:	56                   	push   esi
c00026b9:	53                   	push   ebx
c00026ba:	bb 0b 00 00 00       	mov    ebx,0xb
c00026bf:	83 ec 2c             	sub    esp,0x2c
c00026c2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026c8:	e8 93 fd ff ff       	call   c0002460 <get_ldnumber>
c00026cd:	85 c0                	test   eax,eax
c00026cf:	0f 88 d0 02 00 00    	js     c00029a5 <mount_volume+0x2f3>
c00026d5:	8b 34 85 a0 f4 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd0b60]
c00026dc:	89 c2                	mov    edx,eax
c00026de:	bb 0c 00 00 00       	mov    ebx,0xc
c00026e3:	85 f6                	test   esi,esi
c00026e5:	0f 84 ba 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c00026eb:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026ee:	83 e7 fe             	and    edi,0xfffffffe
c00026f1:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026f4:	74 3c                	je     c0002732 <mount_volume+0x80>
c00026f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026fa:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026fe:	83 ec 0c             	sub    esp,0xc
c0002701:	50                   	push   eax
c0002702:	e8 98 f8 ff ff       	call   c0001f9f <disk_status>
c0002707:	83 c4 10             	add    esp,0x10
c000270a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000270e:	a8 01                	test   al,0x1
c0002710:	75 20                	jne    c0002732 <mount_volume+0x80>
c0002712:	31 db                	xor    ebx,ebx
c0002714:	81 e7 fe 00 00 00    	and    edi,0xfe
c000271a:	0f 84 85 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002720:	a8 04                	test   al,0x4
c0002722:	0f 84 7d 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002728:	bb 0a 00 00 00       	mov    ebx,0xa
c000272d:	e9 73 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002732:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002735:	83 ec 0c             	sub    esp,0xc
c0002738:	0f b6 c2             	movzx  eax,dl
c000273b:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000273e:	bb 03 00 00 00       	mov    ebx,0x3
c0002743:	50                   	push   eax
c0002744:	e8 59 f8 ff ff       	call   c0001fa2 <disk_initialize>
c0002749:	83 c4 10             	add    esp,0x10
c000274c:	a8 01                	test   al,0x1
c000274e:	0f 85 51 02 00 00    	jne    c00029a5 <mount_volume+0x2f3>
c0002754:	81 e7 fe 00 00 00    	and    edi,0xfe
c000275a:	74 04                	je     c0002760 <mount_volume+0xae>
c000275c:	a8 04                	test   al,0x4
c000275e:	75 c8                	jne    c0002728 <mount_volume+0x76>
c0002760:	31 d2                	xor    edx,edx
c0002762:	89 f0                	mov    eax,esi
c0002764:	e8 c0 fe ff ff       	call   c0002629 <find_volume>
c0002769:	bb 01 00 00 00       	mov    ebx,0x1
c000276e:	83 f8 04             	cmp    eax,0x4
c0002771:	0f 84 2e 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002777:	83 f8 01             	cmp    eax,0x1
c000277a:	76 0a                	jbe    c0002786 <mount_volume+0xd4>
c000277c:	bb 0d 00 00 00       	mov    ebx,0xd
c0002781:	e9 1f 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002786:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002789:	e8 62 f8 ff ff       	call   c0001ff0 <ld_word>
c000278e:	66 3d 00 02          	cmp    ax,0x200
c0002792:	75 e8                	jne    c000277c <mount_volume+0xca>
c0002794:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002797:	e8 54 f8 ff ff       	call   c0001ff0 <ld_word>
c000279c:	0f b7 c0             	movzx  eax,ax
c000279f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027a3:	85 c0                	test   eax,eax
c00027a5:	75 0c                	jne    c00027b3 <mount_volume+0x101>
c00027a7:	8d 46 58             	lea    eax,[esi+0x58]
c00027aa:	e8 4e f8 ff ff       	call   c0001ffd <ld_dword>
c00027af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027b3:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00027b6:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00027b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00027c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00027c4:	89 e8                	mov    eax,ebp
c00027c6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00027c9:	8d 45 ff             	lea    eax,[ebp-0x1]
c00027cc:	3c 01                	cmp    al,0x1
c00027ce:	77 ac                	ja     c000277c <mount_volume+0xca>
c00027d0:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00027d4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027d8:	66 85 c0             	test   ax,ax
c00027db:	89 c3                	mov    ebx,eax
c00027dd:	74 9d                	je     c000277c <mount_volume+0xca>
c00027df:	8d 40 ff             	lea    eax,[eax-0x1]
c00027e2:	85 d8                	test   eax,ebx
c00027e4:	75 96                	jne    c000277c <mount_volume+0xca>
c00027e6:	8d 46 45             	lea    eax,[esi+0x45]
c00027e9:	e8 02 f8 ff ff       	call   c0001ff0 <ld_word>
c00027ee:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027f2:	a8 0f                	test   al,0xf
c00027f4:	89 c7                	mov    edi,eax
c00027f6:	75 84                	jne    c000277c <mount_volume+0xca>
c00027f8:	8d 46 47             	lea    eax,[esi+0x47]
c00027fb:	e8 f0 f7 ff ff       	call   c0001ff0 <ld_word>
c0002800:	0f b7 d0             	movzx  edx,ax
c0002803:	85 d2                	test   edx,edx
c0002805:	75 0a                	jne    c0002811 <mount_volume+0x15f>
c0002807:	8d 46 54             	lea    eax,[esi+0x54]
c000280a:	e8 ee f7 ff ff       	call   c0001ffd <ld_dword>
c000280f:	89 c2                	mov    edx,eax
c0002811:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002815:	8d 46 42             	lea    eax,[esi+0x42]
c0002818:	e8 d3 f7 ff ff       	call   c0001ff0 <ld_word>
c000281d:	0f b7 c8             	movzx  ecx,ax
c0002820:	85 c9                	test   ecx,ecx
c0002822:	0f 84 54 ff ff ff    	je     c000277c <mount_volume+0xca>
c0002828:	89 e8                	mov    eax,ebp
c000282a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000282e:	0f b6 e8             	movzx  ebp,al
c0002831:	0f b7 c7             	movzx  eax,di
c0002834:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002839:	c1 e8 04             	shr    eax,0x4
c000283c:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0002840:	01 e8                	add    eax,ebp
c0002842:	01 c8                	add    eax,ecx
c0002844:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002848:	39 c2                	cmp    edx,eax
c000284a:	0f 82 2c ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002850:	29 c2                	sub    edx,eax
c0002852:	89 d5                	mov    ebp,edx
c0002854:	89 d0                	mov    eax,edx
c0002856:	31 d2                	xor    edx,edx
c0002858:	f7 f3                	div    ebx
c000285a:	39 dd                	cmp    ebp,ebx
c000285c:	0f 82 1a ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002862:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002867:	0f 87 0f ff ff ff    	ja     c000277c <mount_volume+0xca>
c000286d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002872:	0f 86 1e 01 00 00    	jbe    c0002996 <mount_volume+0x2e4>
c0002878:	bb 03 00 00 00       	mov    ebx,0x3
c000287d:	8d 68 02             	lea    ebp,[eax+0x2]
c0002880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002884:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002887:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000288b:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c000288f:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002892:	01 c8                	add    eax,ecx
c0002894:	83 fb 03             	cmp    ebx,0x3
c0002897:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000289a:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000289d:	75 23                	jne    c00028c2 <mount_volume+0x210>
c000289f:	8d 46 5e             	lea    eax,[esi+0x5e]
c00028a2:	e8 49 f7 ff ff       	call   c0001ff0 <ld_word>
c00028a7:	09 c7                	or     edi,eax
c00028a9:	66 85 ff             	test   di,di
c00028ac:	0f 85 ca fe ff ff    	jne    c000277c <mount_volume+0xca>
c00028b2:	8d 46 60             	lea    eax,[esi+0x60]
c00028b5:	e8 43 f7 ff ff       	call   c0001ffd <ld_dword>
c00028ba:	c1 e5 02             	shl    ebp,0x2
c00028bd:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028c0:	eb 25                	jmp    c00028e7 <mount_volume+0x235>
c00028c2:	66 85 ff             	test   di,di
c00028c5:	0f 84 b1 fe ff ff    	je     c000277c <mount_volume+0xca>
c00028cb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00028cf:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00028d3:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00028d7:	83 e5 01             	and    ebp,0x1
c00028da:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028dd:	d1 ea                	shr    edx,1
c00028df:	01 d5                	add    ebp,edx
c00028e1:	83 fb 02             	cmp    ebx,0x2
c00028e4:	0f 44 ef             	cmove  ebp,edi
c00028e7:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028ed:	c1 ed 09             	shr    ebp,0x9
c00028f0:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00028f4:	0f 87 82 fe ff ff    	ja     c000277c <mount_volume+0xca>
c00028fa:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002901:	83 fb 03             	cmp    ebx,0x3
c0002904:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000290b:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000290f:	75 6e                	jne    c000297f <mount_volume+0x2cd>
c0002911:	8d 46 64             	lea    eax,[esi+0x64]
c0002914:	e8 d7 f6 ff ff       	call   c0001ff0 <ld_word>
c0002919:	66 48                	dec    ax
c000291b:	75 62                	jne    c000297f <mount_volume+0x2cd>
c000291d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002921:	89 f0                	mov    eax,esi
c0002923:	42                   	inc    edx
c0002924:	e8 2c fc ff ff       	call   c0002555 <move_window>
c0002929:	85 c0                	test   eax,eax
c000292b:	75 52                	jne    c000297f <mount_volume+0x2cd>
c000292d:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002931:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002937:	e8 b4 f6 ff ff       	call   c0001ff0 <ld_word>
c000293c:	66 3d 55 aa          	cmp    ax,0xaa55
c0002940:	75 3d                	jne    c000297f <mount_volume+0x2cd>
c0002942:	8d 46 34             	lea    eax,[esi+0x34]
c0002945:	e8 b3 f6 ff ff       	call   c0001ffd <ld_dword>
c000294a:	3d 52 52 61 41       	cmp    eax,0x41615252
c000294f:	75 2e                	jne    c000297f <mount_volume+0x2cd>
c0002951:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002957:	e8 a1 f6 ff ff       	call   c0001ffd <ld_dword>
c000295c:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002961:	75 1c                	jne    c000297f <mount_volume+0x2cd>
c0002963:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002969:	e8 8f f6 ff ff       	call   c0001ffd <ld_dword>
c000296e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002971:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002977:	e8 81 f6 ff ff       	call   c0001ffd <ld_dword>
c000297c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000297f:	88 1e                	mov    BYTE PTR [esi],bl
c0002981:	66 a1 80 f4 02 c0    	mov    ax,ds:0xc002f480
c0002987:	31 db                	xor    ebx,ebx
c0002989:	40                   	inc    eax
c000298a:	66 a3 80 f4 02 c0    	mov    ds:0xc002f480,ax
c0002990:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002994:	eb 0f                	jmp    c00029a5 <mount_volume+0x2f3>
c0002996:	3d f6 0f 00 00       	cmp    eax,0xff6
c000299b:	19 db                	sbb    ebx,ebx
c000299d:	83 c3 02             	add    ebx,0x2
c00029a0:	e9 d8 fe ff ff       	jmp    c000287d <mount_volume+0x1cb>
c00029a5:	83 c4 2c             	add    esp,0x2c
c00029a8:	89 d8                	mov    eax,ebx
c00029aa:	5b                   	pop    ebx
c00029ab:	5e                   	pop    esi
c00029ac:	5f                   	pop    edi
c00029ad:	5d                   	pop    ebp
c00029ae:	c3                   	ret    

c00029af <put_fat>:
c00029af:	55                   	push   ebp
c00029b0:	bd 02 00 00 00       	mov    ebp,0x2
c00029b5:	57                   	push   edi
c00029b6:	56                   	push   esi
c00029b7:	53                   	push   ebx
c00029b8:	83 ec 1c             	sub    esp,0x1c
c00029bb:	83 fa 01             	cmp    edx,0x1
c00029be:	0f 86 38 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029c4:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00029c7:	0f 86 2f 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029cd:	89 c6                	mov    esi,eax
c00029cf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00029d2:	89 cf                	mov    edi,ecx
c00029d4:	89 d3                	mov    ebx,edx
c00029d6:	83 f8 02             	cmp    eax,0x2
c00029d9:	0f 84 b1 00 00 00    	je     c0002a90 <put_fat+0xe1>
c00029df:	83 f8 03             	cmp    eax,0x3
c00029e2:	0f 84 d5 00 00 00    	je     c0002abd <put_fat+0x10e>
c00029e8:	48                   	dec    eax
c00029e9:	0f 85 0d 01 00 00    	jne    c0002afc <put_fat+0x14d>
c00029ef:	89 d1                	mov    ecx,edx
c00029f1:	89 f0                	mov    eax,esi
c00029f3:	d1 e9                	shr    ecx,1
c00029f5:	01 d1                	add    ecx,edx
c00029f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029fb:	89 ca                	mov    edx,ecx
c00029fd:	c1 ea 09             	shr    edx,0x9
c0002a00:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a03:	e8 4d fb ff ff       	call   c0002555 <move_window>
c0002a08:	85 c0                	test   eax,eax
c0002a0a:	89 c5                	mov    ebp,eax
c0002a0c:	0f 85 ea 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a16:	8d 46 34             	lea    eax,[esi+0x34]
c0002a19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002a1d:	8d 41 01             	lea    eax,[ecx+0x1]
c0002a20:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002a26:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2a:	83 e3 01             	and    ebx,0x1
c0002a2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a31:	89 f8                	mov    eax,edi
c0002a33:	74 11                	je     c0002a46 <put_fat+0x97>
c0002a35:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002a37:	89 f8                	mov    eax,edi
c0002a39:	c1 e0 04             	shl    eax,0x4
c0002a3c:	25 f0 0f 00 00       	and    eax,0xff0
c0002a41:	83 e2 0f             	and    edx,0xf
c0002a44:	09 d0                	or     eax,edx
c0002a46:	88 01                	mov    BYTE PTR [ecx],al
c0002a48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a4c:	89 f0                	mov    eax,esi
c0002a4e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a52:	c1 ea 09             	shr    edx,0x9
c0002a55:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a58:	e8 f8 fa ff ff       	call   c0002555 <move_window>
c0002a5d:	85 c0                	test   eax,eax
c0002a5f:	89 c5                	mov    ebp,eax
c0002a61:	0f 85 95 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a6b:	25 ff 01 00 00       	and    eax,0x1ff
c0002a70:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	74 07                	je     c0002a7f <put_fat+0xd0>
c0002a78:	c1 ef 04             	shr    edi,0x4
c0002a7b:	89 f9                	mov    ecx,edi
c0002a7d:	eb 0d                	jmp    c0002a8c <put_fat+0xdd>
c0002a7f:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a81:	c1 ef 08             	shr    edi,0x8
c0002a84:	83 e7 0f             	and    edi,0xf
c0002a87:	83 e1 f0             	and    ecx,0xfffffff0
c0002a8a:	09 f9                	or     ecx,edi
c0002a8c:	88 08                	mov    BYTE PTR [eax],cl
c0002a8e:	eb 27                	jmp    c0002ab7 <put_fat+0x108>
c0002a90:	c1 ea 08             	shr    edx,0x8
c0002a93:	89 f0                	mov    eax,esi
c0002a95:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a98:	e8 b8 fa ff ff       	call   c0002555 <move_window>
c0002a9d:	85 c0                	test   eax,eax
c0002a9f:	89 c5                	mov    ebp,eax
c0002aa1:	75 59                	jne    c0002afc <put_fat+0x14d>
c0002aa3:	01 db                	add    ebx,ebx
c0002aa5:	0f b7 d7             	movzx  edx,di
c0002aa8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002aae:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002ab2:	e8 5e f5 ff ff       	call   c0002015 <st_word>
c0002ab7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002abb:	eb 3f                	jmp    c0002afc <put_fat+0x14d>
c0002abd:	c1 ea 07             	shr    edx,0x7
c0002ac0:	89 f0                	mov    eax,esi
c0002ac2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002ac5:	e8 8b fa ff ff       	call   c0002555 <move_window>
c0002aca:	85 c0                	test   eax,eax
c0002acc:	89 c5                	mov    ebp,eax
c0002ace:	75 2c                	jne    c0002afc <put_fat+0x14d>
c0002ad0:	c1 e3 02             	shl    ebx,0x2
c0002ad3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ad9:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002adf:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002ae3:	89 d8                	mov    eax,ebx
c0002ae5:	e8 13 f5 ff ff       	call   c0001ffd <ld_dword>
c0002aea:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aef:	09 f8                	or     eax,edi
c0002af1:	89 c2                	mov    edx,eax
c0002af3:	89 d8                	mov    eax,ebx
c0002af5:	e8 1f f5 ff ff       	call   c0002019 <st_dword>
c0002afa:	eb bb                	jmp    c0002ab7 <put_fat+0x108>
c0002afc:	83 c4 1c             	add    esp,0x1c
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	5b                   	pop    ebx
c0002b02:	5e                   	pop    esi
c0002b03:	5f                   	pop    edi
c0002b04:	5d                   	pop    ebp
c0002b05:	c3                   	ret    

c0002b06 <dir_clear>:
c0002b06:	55                   	push   ebp
c0002b07:	57                   	push   edi
c0002b08:	56                   	push   esi
c0002b09:	89 c6                	mov    esi,eax
c0002b0b:	53                   	push   ebx
c0002b0c:	83 ec 1c             	sub    esp,0x1c
c0002b0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002b13:	e8 da f9 ff ff       	call   c00024f2 <sync_window>
c0002b18:	85 c0                	test   eax,eax
c0002b1a:	0f 85 c1 00 00 00    	jne    c0002be1 <dir_clear+0xdb>
c0002b20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b24:	89 f0                	mov    eax,esi
c0002b26:	e8 1b f7 ff ff       	call   c0002246 <clst2sect>
c0002b2b:	31 d2                	xor    edx,edx
c0002b2d:	b9 00 02 00 00       	mov    ecx,0x200
c0002b32:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002b35:	89 c5                	mov    ebp,eax
c0002b37:	8d 46 34             	lea    eax,[esi+0x34]
c0002b3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b3e:	e8 ee f4 ff ff       	call   c0002031 <mem_set>
c0002b43:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b47:	b8 00 80 00 00       	mov    eax,0x8000
c0002b4c:	c1 e3 09             	shl    ebx,0x9
c0002b4f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b55:	0f 47 d8             	cmova  ebx,eax
c0002b58:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b5e:	76 16                	jbe    c0002b76 <dir_clear+0x70>
c0002b60:	83 ec 0c             	sub    esp,0xc
c0002b63:	53                   	push   ebx
c0002b64:	e8 cb 32 00 00       	call   c0005e34 <ff_memalloc>
c0002b69:	83 c4 10             	add    esp,0x10
c0002b6c:	85 c0                	test   eax,eax
c0002b6e:	89 c7                	mov    edi,eax
c0002b70:	75 76                	jne    c0002be8 <dir_clear+0xe2>
c0002b72:	d1 eb                	shr    ebx,1
c0002b74:	eb e2                	jmp    c0002b58 <dir_clear+0x52>
c0002b76:	31 db                	xor    ebx,ebx
c0002b78:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7c:	39 d8                	cmp    eax,ebx
c0002b7e:	76 53                	jbe    c0002bd3 <dir_clear+0xcd>
c0002b80:	6a 01                	push   0x1
c0002b82:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b85:	50                   	push   eax
c0002b86:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b8e:	50                   	push   eax
c0002b8f:	e8 27 f4 ff ff       	call   c0001fbb <disk_write>
c0002b94:	83 c4 10             	add    esp,0x10
c0002b97:	85 c0                	test   eax,eax
c0002b99:	75 38                	jne    c0002bd3 <dir_clear+0xcd>
c0002b9b:	43                   	inc    ebx
c0002b9c:	eb da                	jmp    c0002b78 <dir_clear+0x72>
c0002b9e:	52                   	push   edx
c0002b9f:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ba2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002ba6:	50                   	push   eax
c0002ba7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002bab:	57                   	push   edi
c0002bac:	50                   	push   eax
c0002bad:	e8 09 f4 ff ff       	call   c0001fbb <disk_write>
c0002bb2:	83 c4 10             	add    esp,0x10
c0002bb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bb9:	85 c0                	test   eax,eax
c0002bbb:	75 0a                	jne    c0002bc7 <dir_clear+0xc1>
c0002bbd:	01 d3                	add    ebx,edx
c0002bbf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bc3:	39 d8                	cmp    eax,ebx
c0002bc5:	77 d7                	ja     c0002b9e <dir_clear+0x98>
c0002bc7:	83 ec 0c             	sub    esp,0xc
c0002bca:	57                   	push   edi
c0002bcb:	e8 7c 32 00 00       	call   c0005e4c <ff_memfree>
c0002bd0:	83 c4 10             	add    esp,0x10
c0002bd3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bd7:	39 d8                	cmp    eax,ebx
c0002bd9:	0f 95 c0             	setne  al
c0002bdc:	0f b6 c0             	movzx  eax,al
c0002bdf:	eb 19                	jmp    c0002bfa <dir_clear+0xf4>
c0002be1:	b8 01 00 00 00       	mov    eax,0x1
c0002be6:	eb 12                	jmp    c0002bfa <dir_clear+0xf4>
c0002be8:	89 d9                	mov    ecx,ebx
c0002bea:	31 d2                	xor    edx,edx
c0002bec:	e8 40 f4 ff ff       	call   c0002031 <mem_set>
c0002bf1:	89 da                	mov    edx,ebx
c0002bf3:	31 db                	xor    ebx,ebx
c0002bf5:	c1 ea 09             	shr    edx,0x9
c0002bf8:	eb c5                	jmp    c0002bbf <dir_clear+0xb9>
c0002bfa:	83 c4 1c             	add    esp,0x1c
c0002bfd:	5b                   	pop    ebx
c0002bfe:	5e                   	pop    esi
c0002bff:	5f                   	pop    edi
c0002c00:	5d                   	pop    ebp
c0002c01:	c3                   	ret    

c0002c02 <create_name>:
c0002c02:	55                   	push   ebp
c0002c03:	89 c5                	mov    ebp,eax
c0002c05:	57                   	push   edi
c0002c06:	89 d7                	mov    edi,edx
c0002c08:	56                   	push   esi
c0002c09:	31 f6                	xor    esi,esi
c0002c0b:	53                   	push   ebx
c0002c0c:	83 ec 3c             	sub    esp,0x3c
c0002c0f:	8b 02                	mov    eax,DWORD PTR [edx]
c0002c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002c18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002c1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002c23:	e8 4d f4 ff ff       	call   c0002075 <tchar2uni>
c0002c28:	83 f8 ff             	cmp    eax,0xffffffff
c0002c2b:	89 c3                	mov    ebx,eax
c0002c2d:	75 0a                	jne    c0002c39 <create_name+0x37>
c0002c2f:	b8 06 00 00 00       	mov    eax,0x6
c0002c34:	e9 7c 02 00 00       	jmp    c0002eb5 <create_name+0x2b3>
c0002c39:	3d ff ff 00 00       	cmp    eax,0xffff
c0002c3e:	76 0c                	jbe    c0002c4c <create_name+0x4a>
c0002c40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002c44:	c1 e8 10             	shr    eax,0x10
c0002c47:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002c4b:	46                   	inc    esi
c0002c4c:	0f b7 d3             	movzx  edx,bx
c0002c4f:	89 d8                	mov    eax,ebx
c0002c51:	83 fa 1f             	cmp    edx,0x1f
c0002c54:	76 30                	jbe    c0002c86 <create_name+0x84>
c0002c56:	83 fa 2f             	cmp    edx,0x2f
c0002c59:	74 2b                	je     c0002c86 <create_name+0x84>
c0002c5b:	83 fa 5c             	cmp    edx,0x5c
c0002c5e:	74 35                	je     c0002c95 <create_name+0x93>
c0002c60:	83 fa 7f             	cmp    edx,0x7f
c0002c63:	77 0e                	ja     c0002c73 <create_name+0x71>
c0002c65:	b8 c2 81 02 c0       	mov    eax,0xc00281c2
c0002c6a:	e8 ef f3 ff ff       	call   c000205e <chk_chr>
c0002c6f:	85 c0                	test   eax,eax
c0002c71:	75 bc                	jne    c0002c2f <create_name+0x2d>
c0002c73:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c79:	77 b4                	ja     c0002c2f <create_name+0x2d>
c0002c7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c7f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c83:	46                   	inc    esi
c0002c84:	eb 99                	jmp    c0002c1f <create_name+0x1d>
c0002c86:	66 83 f8 1f          	cmp    ax,0x1f
c0002c8a:	b3 04                	mov    bl,0x4
c0002c8c:	76 1a                	jbe    c0002ca8 <create_name+0xa6>
c0002c8e:	eb 05                	jmp    c0002c95 <create_name+0x93>
c0002c90:	40                   	inc    eax
c0002c91:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c99:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c9c:	83 fa 2f             	cmp    edx,0x2f
c0002c9f:	74 ef                	je     c0002c90 <create_name+0x8e>
c0002ca1:	83 fa 5c             	cmp    edx,0x5c
c0002ca4:	74 ea                	je     c0002c90 <create_name+0x8e>
c0002ca6:	31 db                	xor    ebx,ebx
c0002ca8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002cac:	89 07                	mov    DWORD PTR [edi],eax
c0002cae:	85 f6                	test   esi,esi
c0002cb0:	74 16                	je     c0002cc8 <create_name+0xc6>
c0002cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cb6:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002cbb:	83 f8 20             	cmp    eax,0x20
c0002cbe:	74 05                	je     c0002cc5 <create_name+0xc3>
c0002cc0:	83 f8 2e             	cmp    eax,0x2e
c0002cc3:	75 03                	jne    c0002cc8 <create_name+0xc6>
c0002cc5:	4e                   	dec    esi
c0002cc6:	eb e6                	jmp    c0002cae <create_name+0xac>
c0002cc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ccc:	31 ff                	xor    edi,edi
c0002cce:	85 f6                	test   esi,esi
c0002cd0:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002cd6:	0f 84 53 ff ff ff    	je     c0002c2f <create_name+0x2d>
c0002cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ce0:	8d 57 01             	lea    edx,[edi+0x1]
c0002ce3:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ce7:	83 f8 20             	cmp    eax,0x20
c0002cea:	75 04                	jne    c0002cf0 <create_name+0xee>
c0002cec:	89 d7                	mov    edi,edx
c0002cee:	eb ec                	jmp    c0002cdc <create_name+0xda>
c0002cf0:	85 ff                	test   edi,edi
c0002cf2:	75 05                	jne    c0002cf9 <create_name+0xf7>
c0002cf4:	83 f8 2e             	cmp    eax,0x2e
c0002cf7:	75 08                	jne    c0002d01 <create_name+0xff>
c0002cf9:	83 cb 03             	or     ebx,0x3
c0002cfc:	eb 03                	jmp    c0002d01 <create_name+0xff>
c0002cfe:	4e                   	dec    esi
c0002cff:	74 0c                	je     c0002d0d <create_name+0x10b>
c0002d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d05:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002d0b:	75 f1                	jne    c0002cfe <create_name+0xfc>
c0002d0d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d12:	ba 20 00 00 00       	mov    edx,0x20
c0002d17:	8d 45 20             	lea    eax,[ebp+0x20]
c0002d1a:	e8 12 f3 ff ff       	call   c0002031 <mem_set>
c0002d1f:	31 c9                	xor    ecx,ecx
c0002d21:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002d29:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002d2e:	8d 47 01             	lea    eax,[edi+0x1]
c0002d31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d39:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002d3d:	85 c0                	test   eax,eax
c0002d3f:	89 c7                	mov    edi,eax
c0002d41:	0f 84 1d 01 00 00    	je     c0002e64 <create_name+0x262>
c0002d47:	83 f8 20             	cmp    eax,0x20
c0002d4a:	74 0b                	je     c0002d57 <create_name+0x155>
c0002d4c:	83 f8 2e             	cmp    eax,0x2e
c0002d4f:	75 0f                	jne    c0002d60 <create_name+0x15e>
c0002d51:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d55:	74 09                	je     c0002d60 <create_name+0x15e>
c0002d57:	83 cb 03             	or     ebx,0x3
c0002d5a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002d5e:	eb ce                	jmp    c0002d2e <create_name+0x12c>
c0002d60:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002d64:	73 06                	jae    c0002d6c <create_name+0x16a>
c0002d66:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d6a:	75 3a                	jne    c0002da6 <create_name+0x1a4>
c0002d6c:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002d71:	75 08                	jne    c0002d7b <create_name+0x179>
c0002d73:	83 cb 03             	or     ebx,0x3
c0002d76:	e9 e9 00 00 00       	jmp    c0002e64 <create_name+0x262>
c0002d7b:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d7f:	74 0d                	je     c0002d8e <create_name+0x18c>
c0002d81:	83 cb 03             	or     ebx,0x3
c0002d84:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d88:	0f 87 d6 00 00 00    	ja     c0002e64 <create_name+0x262>
c0002d8e:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d93:	b9 08 00 00 00       	mov    ecx,0x8
c0002d98:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002d9c:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002da4:	eb b4                	jmp    c0002d5a <create_name+0x158>
c0002da6:	0f b7 c7             	movzx  eax,di
c0002da9:	83 f8 7f             	cmp    eax,0x7f
c0002dac:	76 66                	jbe    c0002e14 <create_name+0x212>
c0002dae:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002db2:	89 d9                	mov    ecx,ebx
c0002db4:	83 c9 02             	or     ecx,0x2
c0002db7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dbb:	52                   	push   edx
c0002dbc:	52                   	push   edx
c0002dbd:	68 b5 01 00 00       	push   0x1b5
c0002dc2:	50                   	push   eax
c0002dc3:	e8 9c 30 00 00       	call   c0005e64 <ff_uni2oem>
c0002dc8:	83 c4 10             	add    esp,0x10
c0002dcb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002dcf:	a8 80                	test   al,0x80
c0002dd1:	89 c7                	mov    edi,eax
c0002dd3:	74 0c                	je     c0002de1 <create_name+0x1df>
c0002dd5:	83 e7 7f             	and    edi,0x7f
c0002dd8:	0f b6 bf 80 82 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffd7d80]
c0002ddf:	eb 2a                	jmp    c0002e0b <create_name+0x209>
c0002de1:	0f b7 c0             	movzx  eax,ax
c0002de4:	3d ff 00 00 00       	cmp    eax,0xff
c0002de9:	76 20                	jbe    c0002e0b <create_name+0x209>
c0002deb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002def:	4a                   	dec    edx
c0002df0:	39 ca                	cmp    edx,ecx
c0002df2:	77 0c                	ja     c0002e00 <create_name+0x1fe>
c0002df4:	83 cb 03             	or     ebx,0x3
c0002df7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002dfb:	e9 5a ff ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e00:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002e04:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e08:	41                   	inc    ecx
c0002e09:	eb 4d                	jmp    c0002e58 <create_name+0x256>
c0002e0b:	66 85 ff             	test   di,di
c0002e0e:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e12:	74 19                	je     c0002e2d <create_name+0x22b>
c0002e14:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002e18:	0f b7 d7             	movzx  edx,di
c0002e1b:	b8 cb 81 02 c0       	mov    eax,0xc00281cb
c0002e20:	e8 39 f2 ff ff       	call   c000205e <chk_chr>
c0002e25:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	74 0a                	je     c0002e37 <create_name+0x235>
c0002e2d:	83 cb 03             	or     ebx,0x3
c0002e30:	bf 5f 00 00 00       	mov    edi,0x5f
c0002e35:	eb 21                	jmp    c0002e58 <create_name+0x256>
c0002e37:	8d 47 bf             	lea    eax,[edi-0x41]
c0002e3a:	66 83 f8 19          	cmp    ax,0x19
c0002e3e:	77 07                	ja     c0002e47 <create_name+0x245>
c0002e40:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e45:	eb 11                	jmp    c0002e58 <create_name+0x256>
c0002e47:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e4a:	66 83 f8 19          	cmp    ax,0x19
c0002e4e:	77 08                	ja     c0002e58 <create_name+0x256>
c0002e50:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e55:	83 ef 20             	sub    edi,0x20
c0002e58:	89 f8                	mov    eax,edi
c0002e5a:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002e5e:	41                   	inc    ecx
c0002e5f:	e9 f6 fe ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e64:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002e68:	75 04                	jne    c0002e6e <create_name+0x26c>
c0002e6a:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002e6e:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002e73:	75 05                	jne    c0002e7a <create_name+0x278>
c0002e75:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e7e:	83 e0 0c             	and    eax,0xc
c0002e81:	83 f8 0c             	cmp    eax,0xc
c0002e84:	74 0c                	je     c0002e92 <create_name+0x290>
c0002e86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e8a:	83 e0 03             	and    eax,0x3
c0002e8d:	83 f8 03             	cmp    eax,0x3
c0002e90:	75 05                	jne    c0002e97 <create_name+0x295>
c0002e92:	83 cb 02             	or     ebx,0x2
c0002e95:	eb 19                	jmp    c0002eb0 <create_name+0x2ae>
c0002e97:	f6 c3 02             	test   bl,0x2
c0002e9a:	75 14                	jne    c0002eb0 <create_name+0x2ae>
c0002e9c:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002ea1:	74 03                	je     c0002ea6 <create_name+0x2a4>
c0002ea3:	83 cb 10             	or     ebx,0x10
c0002ea6:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002eab:	74 03                	je     c0002eb0 <create_name+0x2ae>
c0002ead:	83 cb 08             	or     ebx,0x8
c0002eb0:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002eb3:	31 c0                	xor    eax,eax
c0002eb5:	83 c4 3c             	add    esp,0x3c
c0002eb8:	5b                   	pop    ebx
c0002eb9:	5e                   	pop    esi
c0002eba:	5f                   	pop    edi
c0002ebb:	5d                   	pop    ebp
c0002ebc:	c3                   	ret    

c0002ebd <cmp_lfn>:
c0002ebd:	55                   	push   ebp
c0002ebe:	57                   	push   edi
c0002ebf:	89 d7                	mov    edi,edx
c0002ec1:	56                   	push   esi
c0002ec2:	53                   	push   ebx
c0002ec3:	83 ec 1c             	sub    esp,0x1c
c0002ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002eca:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ecd:	e8 1e f1 ff ff       	call   c0001ff0 <ld_word>
c0002ed2:	66 85 c0             	test   ax,ax
c0002ed5:	74 07                	je     c0002ede <cmp_lfn+0x21>
c0002ed7:	31 c0                	xor    eax,eax
c0002ed9:	e9 a4 00 00 00       	jmp    c0002f82 <cmp_lfn+0xc5>
c0002ede:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002ee0:	bd 01 00 00 00       	mov    ebp,0x1
c0002ee5:	31 c9                	xor    ecx,ecx
c0002ee7:	83 e3 3f             	and    ebx,0x3f
c0002eea:	4b                   	dec    ebx
c0002eeb:	6b db 0d             	imul   ebx,ebx,0xd
c0002eee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef2:	0f b6 81 00 83 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffd7d00]
c0002ef9:	01 f8                	add    eax,edi
c0002efb:	e8 f0 f0 ff ff       	call   c0001ff0 <ld_word>
c0002f00:	66 85 ed             	test   bp,bp
c0002f03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f07:	0f b7 f0             	movzx  esi,ax
c0002f0a:	74 44                	je     c0002f50 <cmp_lfn+0x93>
c0002f0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002f10:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002f16:	77 bf                	ja     c0002ed7 <cmp_lfn+0x1a>
c0002f18:	83 ec 0c             	sub    esp,0xc
c0002f1b:	0f b7 c6             	movzx  eax,si
c0002f1e:	50                   	push   eax
c0002f1f:	e8 54 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f24:	89 c5                	mov    ebp,eax
c0002f26:	8d 43 01             	lea    eax,[ebx+0x1]
c0002f29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f31:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f35:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f38:	e8 3b 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f3d:	83 c4 10             	add    esp,0x10
c0002f40:	39 c5                	cmp    ebp,eax
c0002f42:	75 93                	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f44:	89 f5                	mov    ebp,esi
c0002f46:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002f4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002f4e:	eb 0c                	jmp    c0002f5c <cmp_lfn+0x9f>
c0002f50:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002f56:	0f 85 7b ff ff ff    	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f5c:	41                   	inc    ecx
c0002f5d:	83 f9 0d             	cmp    ecx,0xd
c0002f60:	75 8c                	jne    c0002eee <cmp_lfn+0x31>
c0002f62:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f65:	74 16                	je     c0002f7d <cmp_lfn+0xc0>
c0002f67:	66 85 ed             	test   bp,bp
c0002f6a:	74 11                	je     c0002f7d <cmp_lfn+0xc0>
c0002f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f75:	0f 94 c0             	sete   al
c0002f78:	0f b6 c0             	movzx  eax,al
c0002f7b:	eb 05                	jmp    c0002f82 <cmp_lfn+0xc5>
c0002f7d:	b8 01 00 00 00       	mov    eax,0x1
c0002f82:	83 c4 1c             	add    esp,0x1c
c0002f85:	5b                   	pop    ebx
c0002f86:	5e                   	pop    esi
c0002f87:	5f                   	pop    edi
c0002f88:	5d                   	pop    ebp
c0002f89:	c3                   	ret    

c0002f8a <sync_fs>:
c0002f8a:	56                   	push   esi
c0002f8b:	53                   	push   ebx
c0002f8c:	53                   	push   ebx
c0002f8d:	89 c3                	mov    ebx,eax
c0002f8f:	e8 5e f5 ff ff       	call   c00024f2 <sync_window>
c0002f94:	85 c0                	test   eax,eax
c0002f96:	0f 85 9a 00 00 00    	jne    c0003036 <sync_fs+0xac>
c0002f9c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f9f:	75 7b                	jne    c000301c <sync_fs+0x92>
c0002fa1:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002fa5:	75 75                	jne    c000301c <sync_fs+0x92>
c0002fa7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002faa:	b9 00 02 00 00       	mov    ecx,0x200
c0002faf:	31 d2                	xor    edx,edx
c0002fb1:	89 f0                	mov    eax,esi
c0002fb3:	e8 79 f0 ff ff       	call   c0002031 <mem_set>
c0002fb8:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002fbe:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fc3:	e8 4d f0 ff ff       	call   c0002015 <st_word>
c0002fc8:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fcd:	89 f0                	mov    eax,esi
c0002fcf:	e8 45 f0 ff ff       	call   c0002019 <st_dword>
c0002fd4:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fda:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fdf:	e8 35 f0 ff ff       	call   c0002019 <st_dword>
c0002fe4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fe7:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fed:	e8 27 f0 ff ff       	call   c0002019 <st_dword>
c0002ff2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff5:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ffb:	e8 19 f0 ff ff       	call   c0002019 <st_dword>
c0003000:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0003003:	6a 01                	push   0x1
c0003005:	40                   	inc    eax
c0003006:	50                   	push   eax
c0003007:	56                   	push   esi
c0003008:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000300b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000300f:	50                   	push   eax
c0003010:	e8 a6 ef ff ff       	call   c0001fbb <disk_write>
c0003015:	83 c4 10             	add    esp,0x10
c0003018:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000301c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003020:	51                   	push   ecx
c0003021:	6a 00                	push   0x0
c0003023:	6a 00                	push   0x0
c0003025:	50                   	push   eax
c0003026:	e8 a6 ef ff ff       	call   c0001fd1 <disk_ioctl>
c000302b:	83 c4 10             	add    esp,0x10
c000302e:	85 c0                	test   eax,eax
c0003030:	0f 95 c0             	setne  al
c0003033:	0f b6 c0             	movzx  eax,al
c0003036:	5a                   	pop    edx
c0003037:	5b                   	pop    ebx
c0003038:	5e                   	pop    esi
c0003039:	c3                   	ret    

c000303a <create_partition>:
c000303a:	55                   	push   ebp
c000303b:	0f b6 c0             	movzx  eax,al
c000303e:	57                   	push   edi
c000303f:	56                   	push   esi
c0003040:	53                   	push   ebx
c0003041:	83 ec 40             	sub    esp,0x40
c0003044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003048:	8d 44 24 30          	lea    eax,[esp+0x30]
c000304c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003050:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003054:	50                   	push   eax
c0003055:	6a 01                	push   0x1
c0003057:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000305b:	e8 71 ef ff ff       	call   c0001fd1 <disk_ioctl>
c0003060:	83 c4 10             	add    esp,0x10
c0003063:	85 c0                	test   eax,eax
c0003065:	0f 85 68 01 00 00    	jne    c00031d3 <create_partition+0x199>
c000306b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000306f:	b9 05 00 00 00       	mov    ecx,0x5
c0003074:	be 08 00 00 00       	mov    esi,0x8
c0003079:	89 f0                	mov    eax,esi
c000307b:	31 d2                	xor    edx,edx
c000307d:	0f b6 d8             	movzx  ebx,al
c0003080:	89 e8                	mov    eax,ebp
c0003082:	f7 f3                	div    ebx
c0003084:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003089:	76 0a                	jbe    c0003095 <create_partition+0x5b>
c000308b:	d1 e6                	shl    esi,1
c000308d:	49                   	dec    ecx
c000308e:	75 e9                	jne    c0003079 <create_partition+0x3f>
c0003090:	be ff ff ff ff       	mov    esi,0xffffffff
c0003095:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003099:	b9 00 02 00 00       	mov    ecx,0x200
c000309e:	31 d2                	xor    edx,edx
c00030a0:	e8 8c ef ff ff       	call   c0002031 <mem_set>
c00030a5:	b9 64 00 00 00       	mov    ecx,0x64
c00030aa:	89 e8                	mov    eax,ebp
c00030ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00030b4:	31 d2                	xor    edx,edx
c00030b6:	f7 f1                	div    ecx
c00030b8:	b9 3f 00 00 00       	mov    ecx,0x3f
c00030bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00030c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030c5:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030cb:	89 f0                	mov    eax,esi
c00030cd:	0f b6 c0             	movzx  eax,al
c00030d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030d4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00030d9:	0f 96 c0             	setbe  al
c00030dc:	31 d2                	xor    edx,edx
c00030de:	85 c9                	test   ecx,ecx
c00030e0:	0f 95 c2             	setne  dl
c00030e3:	85 c2                	test   edx,eax
c00030e5:	0f 84 b7 00 00 00    	je     c00031a2 <create_partition+0x168>
c00030eb:	39 e9                	cmp    ecx,ebp
c00030ed:	0f 83 af 00 00 00    	jae    c00031a2 <create_partition+0x168>
c00030f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030fb:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030fe:	83 fe 64             	cmp    esi,0x64
c0003101:	77 0b                	ja     c000310e <create_partition+0xd4>
c0003103:	74 07                	je     c000310c <create_partition+0xd2>
c0003105:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c000310a:	eb 02                	jmp    c000310e <create_partition+0xd4>
c000310c:	89 ee                	mov    esi,ebp
c000310e:	89 ca                	mov    edx,ecx
c0003110:	31 c0                	xor    eax,eax
c0003112:	01 f2                	add    edx,esi
c0003114:	0f 92 c0             	setb   al
c0003117:	39 ea                	cmp    edx,ebp
c0003119:	77 04                	ja     c000311f <create_partition+0xe5>
c000311b:	85 c0                	test   eax,eax
c000311d:	74 06                	je     c0003125 <create_partition+0xeb>
c000311f:	89 ee                	mov    esi,ebp
c0003121:	29 ce                	sub    esi,ecx
c0003123:	eb 04                	jmp    c0003129 <create_partition+0xef>
c0003125:	85 f6                	test   esi,esi
c0003127:	74 79                	je     c00031a2 <create_partition+0x168>
c0003129:	89 ca                	mov    edx,ecx
c000312b:	89 d8                	mov    eax,ebx
c000312d:	e8 e7 ee ff ff       	call   c0002019 <st_dword>
c0003132:	8d 43 04             	lea    eax,[ebx+0x4]
c0003135:	89 f2                	mov    edx,esi
c0003137:	e8 dd ee ff ff       	call   c0002019 <st_dword>
c000313c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003140:	bf 3f 00 00 00       	mov    edi,0x3f
c0003145:	31 d2                	xor    edx,edx
c0003147:	83 c3 10             	add    ebx,0x10
c000314a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000314e:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003151:	89 c8                	mov    eax,ecx
c0003153:	01 f1                	add    ecx,esi
c0003155:	f7 f7                	div    edi
c0003157:	89 d7                	mov    edi,edx
c0003159:	31 d2                	xor    edx,edx
c000315b:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000315f:	47                   	inc    edi
c0003160:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003163:	89 c2                	mov    edx,eax
c0003165:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003168:	c1 ea 02             	shr    edx,0x2
c000316b:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316e:	83 e2 c0             	and    edx,0xffffffc0
c0003171:	09 fa                	or     edx,edi
c0003173:	bf 3f 00 00 00       	mov    edi,0x3f
c0003178:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c000317b:	31 d2                	xor    edx,edx
c000317d:	f7 f7                	div    edi
c000317f:	89 d6                	mov    esi,edx
c0003181:	31 d2                	xor    edx,edx
c0003183:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003187:	46                   	inc    esi
c0003188:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c000318b:	89 c7                	mov    edi,eax
c000318d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003190:	c1 ef 02             	shr    edi,0x2
c0003193:	83 e7 c0             	and    edi,0xffffffc0
c0003196:	09 fe                	or     esi,edi
c0003198:	89 f2                	mov    edx,esi
c000319a:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c000319d:	e9 32 ff ff ff       	jmp    c00030d4 <create_partition+0x9a>
c00031a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00031ab:	05 fe 01 00 00       	add    eax,0x1fe
c00031b0:	e8 60 ee ff ff       	call   c0002015 <st_word>
c00031b5:	6a 01                	push   0x1
c00031b7:	6a 00                	push   0x0
c00031b9:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00031bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00031c1:	e8 f5 ed ff ff       	call   c0001fbb <disk_write>
c00031c6:	83 c4 10             	add    esp,0x10
c00031c9:	85 c0                	test   eax,eax
c00031cb:	0f 95 c0             	setne  al
c00031ce:	0f b6 c0             	movzx  eax,al
c00031d1:	eb 05                	jmp    c00031d8 <create_partition+0x19e>
c00031d3:	b8 01 00 00 00       	mov    eax,0x1
c00031d8:	83 c4 3c             	add    esp,0x3c
c00031db:	5b                   	pop    ebx
c00031dc:	5e                   	pop    esi
c00031dd:	5f                   	pop    edi
c00031de:	5d                   	pop    ebp
c00031df:	c3                   	ret    

c00031e0 <get_fileinfo>:
c00031e0:	55                   	push   ebp
c00031e1:	57                   	push   edi
c00031e2:	56                   	push   esi
c00031e3:	53                   	push   ebx
c00031e4:	83 ec 1c             	sub    esp,0x1c
c00031e7:	8b 30                	mov    esi,DWORD PTR [eax]
c00031e9:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031ed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031f1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031f5:	0f 84 de 01 00 00    	je     c00033d9 <get_fileinfo+0x1f9>
c00031fb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031ff:	89 d3                	mov    ebx,edx
c0003201:	89 c6                	mov    esi,eax
c0003203:	74 7d                	je     c0003282 <get_fileinfo+0xa2>
c0003205:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000320d:	31 ff                	xor    edi,edi
c000320f:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000321a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000321e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003221:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003225:	85 c0                	test   eax,eax
c0003227:	89 c2                	mov    edx,eax
c0003229:	74 44                	je     c000326f <get_fileinfo+0x8f>
c000322b:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003230:	85 ed                	test   ebp,ebp
c0003232:	75 0d                	jne    c0003241 <get_fileinfo+0x61>
c0003234:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000323a:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000323f:	76 20                	jbe    c0003261 <get_fileinfo+0x81>
c0003241:	c1 e5 10             	shl    ebp,0x10
c0003244:	b9 ff 00 00 00       	mov    ecx,0xff
c0003249:	29 f9                	sub    ecx,edi
c000324b:	09 e8                	or     eax,ebp
c000324d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003251:	e8 f7 ee ff ff       	call   c000214d <put_utf>
c0003256:	0f b6 c0             	movzx  eax,al
c0003259:	85 c0                	test   eax,eax
c000325b:	74 10                	je     c000326d <get_fileinfo+0x8d>
c000325d:	01 c7                	add    edi,eax
c000325f:	31 d2                	xor    edx,edx
c0003261:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003266:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000326b:	eb a9                	jmp    c0003216 <get_fileinfo+0x36>
c000326d:	31 ff                	xor    edi,edi
c000326f:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003275:	b8 00 00 00 00       	mov    eax,0x0
c000327a:	0f 45 f8             	cmovne edi,eax
c000327d:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003282:	31 ff                	xor    edi,edi
c0003284:	31 c9                	xor    ecx,ecx
c0003286:	83 f9 0a             	cmp    ecx,0xa
c0003289:	0f 87 ac 00 00 00    	ja     c000333b <get_fileinfo+0x15b>
c000328f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003292:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003295:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003299:	83 f8 20             	cmp    eax,0x20
c000329c:	89 c2                	mov    edx,eax
c000329e:	0f 84 90 00 00 00    	je     c0003334 <get_fileinfo+0x154>
c00032a4:	83 f8 05             	cmp    eax,0x5
c00032a7:	75 05                	jne    c00032ae <get_fileinfo+0xce>
c00032a9:	ba e5 00 00 00       	mov    edx,0xe5
c00032ae:	83 fd 09             	cmp    ebp,0x9
c00032b1:	75 0b                	jne    c00032be <get_fileinfo+0xde>
c00032b3:	83 ff 0b             	cmp    edi,0xb
c00032b6:	77 06                	ja     c00032be <get_fileinfo+0xde>
c00032b8:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00032bd:	47                   	inc    edi
c00032be:	0f b7 c2             	movzx  eax,dx
c00032c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00032c5:	e8 a5 ed ff ff       	call   c000206f <dbc_1st>
c00032ca:	85 c0                	test   eax,eax
c00032cc:	74 2f                	je     c00032fd <get_fileinfo+0x11d>
c00032ce:	83 fd 08             	cmp    ebp,0x8
c00032d1:	74 2a                	je     c00032fd <get_fileinfo+0x11d>
c00032d3:	83 fd 0b             	cmp    ebp,0xb
c00032d6:	74 25                	je     c00032fd <get_fileinfo+0x11d>
c00032d8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032db:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032df:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c00032e3:	e8 8a ed ff ff       	call   c0002072 <dbc_2nd>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 11                	je     c00032fd <get_fileinfo+0x11d>
c00032ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032f0:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032f3:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c00032f8:	c1 e0 08             	shl    eax,0x8
c00032fb:	09 c2                	or     edx,eax
c00032fd:	50                   	push   eax
c00032fe:	0f b7 d2             	movzx  edx,dx
c0003301:	50                   	push   eax
c0003302:	68 b5 01 00 00       	push   0x1b5
c0003307:	52                   	push   edx
c0003308:	e8 f3 2b 00 00       	call   c0005f00 <ff_oem2uni>
c000330d:	83 c4 10             	add    esp,0x10
c0003310:	0f b7 c0             	movzx  eax,ax
c0003313:	85 c0                	test   eax,eax
c0003315:	75 04                	jne    c000331b <get_fileinfo+0x13b>
c0003317:	31 ff                	xor    edi,edi
c0003319:	eb 20                	jmp    c000333b <get_fileinfo+0x15b>
c000331b:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000331f:	b9 0c 00 00 00       	mov    ecx,0xc
c0003324:	29 f9                	sub    ecx,edi
c0003326:	e8 22 ee ff ff       	call   c000214d <put_utf>
c000332b:	0f b6 c0             	movzx  eax,al
c000332e:	85 c0                	test   eax,eax
c0003330:	74 e5                	je     c0003317 <get_fileinfo+0x137>
c0003332:	01 c7                	add    edi,eax
c0003334:	89 e9                	mov    ecx,ebp
c0003336:	e9 4b ff ff ff       	jmp    c0003286 <get_fileinfo+0xa6>
c000333b:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003340:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003344:	75 5f                	jne    c00033a5 <get_fileinfo+0x1c5>
c0003346:	85 ff                	test   edi,edi
c0003348:	75 0b                	jne    c0003355 <get_fileinfo+0x175>
c000334a:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000334e:	ba 01 00 00 00       	mov    edx,0x1
c0003353:	eb 3e                	jmp    c0003393 <get_fileinfo+0x1b3>
c0003355:	bf 08 00 00 00       	mov    edi,0x8
c000335a:	31 d2                	xor    edx,edx
c000335c:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003362:	84 c0                	test   al,al
c0003364:	74 2d                	je     c0003393 <get_fileinfo+0x1b3>
c0003366:	66 83 f8 2e          	cmp    ax,0x2e
c000336a:	74 1b                	je     c0003387 <get_fileinfo+0x1a7>
c000336c:	8d 48 bf             	lea    ecx,[eax-0x41]
c000336f:	66 83 f9 19          	cmp    cx,0x19
c0003373:	77 17                	ja     c000338c <get_fileinfo+0x1ac>
c0003375:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003378:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000337b:	21 f9                	and    ecx,edi
c000337d:	80 e1 18             	and    cl,0x18
c0003380:	74 0a                	je     c000338c <get_fileinfo+0x1ac>
c0003382:	83 c0 20             	add    eax,0x20
c0003385:	eb 05                	jmp    c000338c <get_fileinfo+0x1ac>
c0003387:	bf 10 00 00 00       	mov    edi,0x10
c000338c:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003390:	42                   	inc    edx
c0003391:	eb c9                	jmp    c000335c <get_fileinfo+0x17c>
c0003393:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003398:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000339b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000339f:	75 04                	jne    c00033a5 <get_fileinfo+0x1c5>
c00033a1:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00033a5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033a8:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00033ab:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00033ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033b1:	83 c0 1c             	add    eax,0x1c
c00033b4:	e8 44 ec ff ff       	call   c0001ffd <ld_dword>
c00033b9:	89 03                	mov    DWORD PTR [ebx],eax
c00033bb:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033be:	83 c0 16             	add    eax,0x16
c00033c1:	e8 2a ec ff ff       	call   c0001ff0 <ld_word>
c00033c6:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00033ca:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033cd:	83 c0 18             	add    eax,0x18
c00033d0:	e8 1b ec ff ff       	call   c0001ff0 <ld_word>
c00033d5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033d9:	83 c4 1c             	add    esp,0x1c
c00033dc:	5b                   	pop    ebx
c00033dd:	5e                   	pop    esi
c00033de:	5f                   	pop    edi
c00033df:	5d                   	pop    ebp
c00033e0:	c3                   	ret    

c00033e1 <ld_clust.isra.0>:
c00033e1:	56                   	push   esi
c00033e2:	89 c6                	mov    esi,eax
c00033e4:	53                   	push   ebx
c00033e5:	89 d3                	mov    ebx,edx
c00033e7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033ea:	e8 01 ec ff ff       	call   c0001ff0 <ld_word>
c00033ef:	0f b7 c8             	movzx  ecx,ax
c00033f2:	89 f0                	mov    eax,esi
c00033f4:	3c 03                	cmp    al,0x3
c00033f6:	75 0d                	jne    c0003405 <ld_clust.isra.0+0x24>
c00033f8:	8d 43 14             	lea    eax,[ebx+0x14]
c00033fb:	e8 f0 eb ff ff       	call   c0001ff0 <ld_word>
c0003400:	c1 e0 10             	shl    eax,0x10
c0003403:	09 c1                	or     ecx,eax
c0003405:	5b                   	pop    ebx
c0003406:	89 c8                	mov    eax,ecx
c0003408:	5e                   	pop    esi
c0003409:	c3                   	ret    

c000340a <st_clust.isra.1>:
c000340a:	56                   	push   esi
c000340b:	89 c6                	mov    esi,eax
c000340d:	53                   	push   ebx
c000340e:	89 d3                	mov    ebx,edx
c0003410:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003413:	0f b7 d1             	movzx  edx,cx
c0003416:	e8 fa eb ff ff       	call   c0002015 <st_word>
c000341b:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000341e:	75 0f                	jne    c000342f <st_clust.isra.1+0x25>
c0003420:	8d 43 14             	lea    eax,[ebx+0x14]
c0003423:	5b                   	pop    ebx
c0003424:	c1 e9 10             	shr    ecx,0x10
c0003427:	89 ca                	mov    edx,ecx
c0003429:	5e                   	pop    esi
c000342a:	e9 e6 eb ff ff       	jmp    c0002015 <st_word>
c000342f:	5b                   	pop    ebx
c0003430:	5e                   	pop    esi
c0003431:	c3                   	ret    

c0003432 <get_fat.isra.2>:
c0003432:	83 fa 01             	cmp    edx,0x1
c0003435:	b9 01 00 00 00       	mov    ecx,0x1
c000343a:	0f 86 f4 00 00 00    	jbe    c0003534 <get_fat.isra.2+0x102>
c0003440:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003443:	0f 83 eb 00 00 00    	jae    c0003534 <get_fat.isra.2+0x102>
c0003449:	55                   	push   ebp
c000344a:	57                   	push   edi
c000344b:	56                   	push   esi
c000344c:	89 c6                	mov    esi,eax
c000344e:	53                   	push   ebx
c000344f:	89 d3                	mov    ebx,edx
c0003451:	83 ec 0c             	sub    esp,0xc
c0003454:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003457:	83 f8 02             	cmp    eax,0x2
c000345a:	74 79                	je     c00034d5 <get_fat.isra.2+0xa3>
c000345c:	83 f8 03             	cmp    eax,0x3
c000345f:	0f 84 97 00 00 00    	je     c00034fc <get_fat.isra.2+0xca>
c0003465:	48                   	dec    eax
c0003466:	0f 85 be 00 00 00    	jne    c000352a <get_fat.isra.2+0xf8>
c000346c:	89 d7                	mov    edi,edx
c000346e:	89 f0                	mov    eax,esi
c0003470:	d1 ef                	shr    edi,1
c0003472:	01 d7                	add    edi,edx
c0003474:	89 fa                	mov    edx,edi
c0003476:	c1 ea 09             	shr    edx,0x9
c0003479:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000347c:	e8 d4 f0 ff ff       	call   c0002555 <move_window>
c0003481:	85 c0                	test   eax,eax
c0003483:	74 08                	je     c000348d <get_fat.isra.2+0x5b>
c0003485:	83 c9 ff             	or     ecx,0xffffffff
c0003488:	e9 9d 00 00 00       	jmp    c000352a <get_fat.isra.2+0xf8>
c000348d:	8d 6f 01             	lea    ebp,[edi+0x1]
c0003490:	89 f0                	mov    eax,esi
c0003492:	89 ea                	mov    edx,ebp
c0003494:	81 e7 ff 01 00 00    	and    edi,0x1ff
c000349a:	c1 ea 09             	shr    edx,0x9
c000349d:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00034a2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034a5:	e8 ab f0 ff ff       	call   c0002555 <move_window>
c00034aa:	85 c0                	test   eax,eax
c00034ac:	75 d7                	jne    c0003485 <get_fat.isra.2+0x53>
c00034ae:	89 f8                	mov    eax,edi
c00034b0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00034b6:	0f b6 f8             	movzx  edi,al
c00034b9:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00034be:	c1 e0 08             	shl    eax,0x8
c00034c1:	09 f8                	or     eax,edi
c00034c3:	89 c1                	mov    ecx,eax
c00034c5:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00034cb:	80 e3 01             	and    bl,0x1
c00034ce:	74 5a                	je     c000352a <get_fat.isra.2+0xf8>
c00034d0:	c1 e8 04             	shr    eax,0x4
c00034d3:	eb 53                	jmp    c0003528 <get_fat.isra.2+0xf6>
c00034d5:	c1 ea 08             	shr    edx,0x8
c00034d8:	89 f0                	mov    eax,esi
c00034da:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034dd:	e8 73 f0 ff ff       	call   c0002555 <move_window>
c00034e2:	85 c0                	test   eax,eax
c00034e4:	75 9f                	jne    c0003485 <get_fat.isra.2+0x53>
c00034e6:	01 db                	add    ebx,ebx
c00034e8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00034ee:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00034f2:	e8 f9 ea ff ff       	call   c0001ff0 <ld_word>
c00034f7:	0f b7 c8             	movzx  ecx,ax
c00034fa:	eb 2e                	jmp    c000352a <get_fat.isra.2+0xf8>
c00034fc:	c1 ea 07             	shr    edx,0x7
c00034ff:	89 f0                	mov    eax,esi
c0003501:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003504:	e8 4c f0 ff ff       	call   c0002555 <move_window>
c0003509:	85 c0                	test   eax,eax
c000350b:	0f 85 74 ff ff ff    	jne    c0003485 <get_fat.isra.2+0x53>
c0003511:	c1 e3 02             	shl    ebx,0x2
c0003514:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c000351a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000351e:	e8 da ea ff ff       	call   c0001ffd <ld_dword>
c0003523:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003528:	89 c1                	mov    ecx,eax
c000352a:	83 c4 0c             	add    esp,0xc
c000352d:	89 c8                	mov    eax,ecx
c000352f:	5b                   	pop    ebx
c0003530:	5e                   	pop    esi
c0003531:	5f                   	pop    edi
c0003532:	5d                   	pop    ebp
c0003533:	c3                   	ret    
c0003534:	89 c8                	mov    eax,ecx
c0003536:	c3                   	ret    

c0003537 <dir_sdi>:
c0003537:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000353d:	0f 87 b6 00 00 00    	ja     c00035f9 <dir_sdi+0xc2>
c0003543:	55                   	push   ebp
c0003544:	57                   	push   edi
c0003545:	56                   	push   esi
c0003546:	53                   	push   ebx
c0003547:	89 d3                	mov    ebx,edx
c0003549:	83 ec 1c             	sub    esp,0x1c
c000354c:	f6 c2 1f             	test   dl,0x1f
c000354f:	74 0a                	je     c000355b <dir_sdi+0x24>
c0003551:	b8 02 00 00 00       	mov    eax,0x2
c0003556:	e9 96 00 00 00       	jmp    c00035f1 <dir_sdi+0xba>
c000355b:	89 c6                	mov    esi,eax
c000355d:	8b 28                	mov    ebp,DWORD PTR [eax]
c000355f:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003562:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003565:	85 ff                	test   edi,edi
c0003567:	75 21                	jne    c000358a <dir_sdi+0x53>
c0003569:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000356d:	76 07                	jbe    c0003576 <dir_sdi+0x3f>
c000356f:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003572:	85 c0                	test   eax,eax
c0003574:	75 12                	jne    c0003588 <dir_sdi+0x51>
c0003576:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000357a:	89 da                	mov    edx,ebx
c000357c:	c1 ea 05             	shr    edx,0x5
c000357f:	39 c2                	cmp    edx,eax
c0003581:	73 ce                	jae    c0003551 <dir_sdi+0x1a>
c0003583:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003586:	eb 3c                	jmp    c00035c4 <dir_sdi+0x8d>
c0003588:	89 c7                	mov    edi,eax
c000358a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000358e:	c1 e1 09             	shl    ecx,0x9
c0003591:	39 cb                	cmp    ebx,ecx
c0003593:	72 26                	jb     c00035bb <dir_sdi+0x84>
c0003595:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003599:	8b 06                	mov    eax,DWORD PTR [esi]
c000359b:	89 fa                	mov    edx,edi
c000359d:	e8 90 fe ff ff       	call   c0003432 <get_fat.isra.2>
c00035a2:	83 f8 ff             	cmp    eax,0xffffffff
c00035a5:	89 c7                	mov    edi,eax
c00035a7:	74 43                	je     c00035ec <dir_sdi+0xb5>
c00035a9:	83 f8 01             	cmp    eax,0x1
c00035ac:	76 a3                	jbe    c0003551 <dir_sdi+0x1a>
c00035ae:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00035b1:	76 9e                	jbe    c0003551 <dir_sdi+0x1a>
c00035b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035b7:	29 cb                	sub    ebx,ecx
c00035b9:	eb d6                	jmp    c0003591 <dir_sdi+0x5a>
c00035bb:	89 fa                	mov    edx,edi
c00035bd:	89 e8                	mov    eax,ebp
c00035bf:	e8 82 ec ff ff       	call   c0002246 <clst2sect>
c00035c4:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035c7:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00035ca:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00035cd:	85 d2                	test   edx,edx
c00035cf:	74 80                	je     c0003551 <dir_sdi+0x1a>
c00035d1:	89 d8                	mov    eax,ebx
c00035d3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035d9:	c1 e8 09             	shr    eax,0x9
c00035dc:	01 d0                	add    eax,edx
c00035de:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035e1:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c00035e5:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035e8:	31 c0                	xor    eax,eax
c00035ea:	eb 05                	jmp    c00035f1 <dir_sdi+0xba>
c00035ec:	b8 01 00 00 00       	mov    eax,0x1
c00035f1:	83 c4 1c             	add    esp,0x1c
c00035f4:	5b                   	pop    ebx
c00035f5:	5e                   	pop    esi
c00035f6:	5f                   	pop    edi
c00035f7:	5d                   	pop    ebp
c00035f8:	c3                   	ret    
c00035f9:	b8 02 00 00 00       	mov    eax,0x2
c00035fe:	c3                   	ret    

c00035ff <create_chain>:
c00035ff:	55                   	push   ebp
c0003600:	89 c5                	mov    ebp,eax
c0003602:	57                   	push   edi
c0003603:	89 d7                	mov    edi,edx
c0003605:	56                   	push   esi
c0003606:	53                   	push   ebx
c0003607:	83 ec 1c             	sub    esp,0x1c
c000360a:	85 d2                	test   edx,edx
c000360c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000360e:	75 0e                	jne    c000361e <create_chain+0x1f>
c0003610:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003613:	85 c9                	test   ecx,ecx
c0003615:	74 32                	je     c0003649 <create_chain+0x4a>
c0003617:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000361a:	77 32                	ja     c000364e <create_chain+0x4f>
c000361c:	eb 2b                	jmp    c0003649 <create_chain+0x4a>
c000361e:	89 d8                	mov    eax,ebx
c0003620:	e8 0d fe ff ff       	call   c0003432 <get_fat.isra.2>
c0003625:	83 f8 01             	cmp    eax,0x1
c0003628:	77 0a                	ja     c0003634 <create_chain+0x35>
c000362a:	b8 01 00 00 00       	mov    eax,0x1
c000362f:	e9 fd 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003634:	83 f8 ff             	cmp    eax,0xffffffff
c0003637:	0f 84 f1 00 00 00    	je     c000372e <create_chain+0x12f>
c000363d:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003640:	89 f9                	mov    ecx,edi
c0003642:	76 0a                	jbe    c000364e <create_chain+0x4f>
c0003644:	e9 e8 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003649:	b9 01 00 00 00       	mov    ecx,0x1
c000364e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003652:	75 07                	jne    c000365b <create_chain+0x5c>
c0003654:	31 c0                	xor    eax,eax
c0003656:	e9 d6 00 00 00       	jmp    c0003731 <create_chain+0x132>
c000365b:	39 f9                	cmp    ecx,edi
c000365d:	75 49                	jne    c00036a8 <create_chain+0xa9>
c000365f:	8d 71 01             	lea    esi,[ecx+0x1]
c0003662:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003665:	77 05                	ja     c000366c <create_chain+0x6d>
c0003667:	be 02 00 00 00       	mov    esi,0x2
c000366c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003670:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003673:	89 f2                	mov    edx,esi
c0003675:	e8 b8 fd ff ff       	call   c0003432 <get_fat.isra.2>
c000367a:	83 f8 01             	cmp    eax,0x1
c000367d:	0f 84 ae 00 00 00    	je     c0003731 <create_chain+0x132>
c0003683:	83 f8 ff             	cmp    eax,0xffffffff
c0003686:	0f 84 a5 00 00 00    	je     c0003731 <create_chain+0x132>
c000368c:	85 c0                	test   eax,eax
c000368e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003692:	74 10                	je     c00036a4 <create_chain+0xa5>
c0003694:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003697:	83 f8 01             	cmp    eax,0x1
c000369a:	76 0c                	jbe    c00036a8 <create_chain+0xa9>
c000369c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000369f:	0f 47 c8             	cmova  ecx,eax
c00036a2:	eb 04                	jmp    c00036a8 <create_chain+0xa9>
c00036a4:	85 f6                	test   esi,esi
c00036a6:	75 3b                	jne    c00036e3 <create_chain+0xe4>
c00036a8:	89 ce                	mov    esi,ecx
c00036aa:	46                   	inc    esi
c00036ab:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00036ae:	77 0a                	ja     c00036ba <create_chain+0xbb>
c00036b0:	83 f9 01             	cmp    ecx,0x1
c00036b3:	76 9f                	jbe    c0003654 <create_chain+0x55>
c00036b5:	be 02 00 00 00       	mov    esi,0x2
c00036ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00036c1:	89 f2                	mov    edx,esi
c00036c3:	e8 6a fd ff ff       	call   c0003432 <get_fat.isra.2>
c00036c8:	85 c0                	test   eax,eax
c00036ca:	74 17                	je     c00036e3 <create_chain+0xe4>
c00036cc:	83 f8 01             	cmp    eax,0x1
c00036cf:	74 60                	je     c0003731 <create_chain+0x132>
c00036d1:	83 f8 ff             	cmp    eax,0xffffffff
c00036d4:	74 5b                	je     c0003731 <create_chain+0x132>
c00036d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036da:	39 ce                	cmp    esi,ecx
c00036dc:	75 cc                	jne    c00036aa <create_chain+0xab>
c00036de:	e9 71 ff ff ff       	jmp    c0003654 <create_chain+0x55>
c00036e3:	83 c9 ff             	or     ecx,0xffffffff
c00036e6:	89 f2                	mov    edx,esi
c00036e8:	89 d8                	mov    eax,ebx
c00036ea:	e8 c0 f2 ff ff       	call   c00029af <put_fat>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 0f                	jne    c0003702 <create_chain+0x103>
c00036f3:	85 ff                	test   edi,edi
c00036f5:	74 0b                	je     c0003702 <create_chain+0x103>
c00036f7:	89 f1                	mov    ecx,esi
c00036f9:	89 fa                	mov    edx,edi
c00036fb:	89 d8                	mov    eax,ebx
c00036fd:	e8 ad f2 ff ff       	call   c00029af <put_fat>
c0003702:	85 c0                	test   eax,eax
c0003704:	75 21                	jne    c0003727 <create_chain+0x128>
c0003706:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003709:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000370c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000370f:	8d 57 fe             	lea    edx,[edi-0x2]
c0003712:	39 d0                	cmp    eax,edx
c0003714:	77 04                	ja     c000371a <create_chain+0x11b>
c0003716:	48                   	dec    eax
c0003717:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000371a:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000371d:	83 c8 01             	or     eax,0x1
c0003720:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003723:	89 f0                	mov    eax,esi
c0003725:	eb 0a                	jmp    c0003731 <create_chain+0x132>
c0003727:	48                   	dec    eax
c0003728:	0f 85 fc fe ff ff    	jne    c000362a <create_chain+0x2b>
c000372e:	83 c8 ff             	or     eax,0xffffffff
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <remove_chain>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 d6                	mov    esi,edx
c000373e:	53                   	push   ebx
c000373f:	83 ec 0c             	sub    esp,0xc
c0003742:	83 fa 01             	cmp    edx,0x1
c0003745:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003747:	76 6a                	jbe    c00037b3 <remove_chain+0x7a>
c0003749:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000374c:	76 65                	jbe    c00037b3 <remove_chain+0x7a>
c000374e:	85 c9                	test   ecx,ecx
c0003750:	89 c5                	mov    ebp,eax
c0003752:	89 ca                	mov    edx,ecx
c0003754:	74 0e                	je     c0003764 <remove_chain+0x2b>
c0003756:	83 c9 ff             	or     ecx,0xffffffff
c0003759:	89 d8                	mov    eax,ebx
c000375b:	e8 4f f2 ff ff       	call   c00029af <put_fat>
c0003760:	85 c0                	test   eax,eax
c0003762:	75 5b                	jne    c00037bf <remove_chain+0x86>
c0003764:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003767:	89 f2                	mov    edx,esi
c0003769:	e8 c4 fc ff ff       	call   c0003432 <get_fat.isra.2>
c000376e:	85 c0                	test   eax,eax
c0003770:	89 c7                	mov    edi,eax
c0003772:	75 04                	jne    c0003778 <remove_chain+0x3f>
c0003774:	31 c0                	xor    eax,eax
c0003776:	eb 47                	jmp    c00037bf <remove_chain+0x86>
c0003778:	83 f8 01             	cmp    eax,0x1
c000377b:	74 36                	je     c00037b3 <remove_chain+0x7a>
c000377d:	83 f8 ff             	cmp    eax,0xffffffff
c0003780:	74 38                	je     c00037ba <remove_chain+0x81>
c0003782:	31 c9                	xor    ecx,ecx
c0003784:	89 f2                	mov    edx,esi
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 22 f2 ff ff       	call   c00029af <put_fat>
c000378d:	85 c0                	test   eax,eax
c000378f:	75 2e                	jne    c00037bf <remove_chain+0x86>
c0003791:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003797:	8d 4a fe             	lea    ecx,[edx-0x2]
c000379a:	39 c8                	cmp    eax,ecx
c000379c:	73 0d                	jae    c00037ab <remove_chain+0x72>
c000379e:	40                   	inc    eax
c000379f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00037a2:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00037a5:	83 c8 01             	or     eax,0x1
c00037a8:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00037ab:	39 fa                	cmp    edx,edi
c00037ad:	89 fe                	mov    esi,edi
c00037af:	77 b3                	ja     c0003764 <remove_chain+0x2b>
c00037b1:	eb c1                	jmp    c0003774 <remove_chain+0x3b>
c00037b3:	b8 02 00 00 00       	mov    eax,0x2
c00037b8:	eb 05                	jmp    c00037bf <remove_chain+0x86>
c00037ba:	b8 01 00 00 00       	mov    eax,0x1
c00037bf:	83 c4 0c             	add    esp,0xc
c00037c2:	5b                   	pop    ebx
c00037c3:	5e                   	pop    esi
c00037c4:	5f                   	pop    edi
c00037c5:	5d                   	pop    ebp
c00037c6:	c3                   	ret    

c00037c7 <dir_next>:
c00037c7:	55                   	push   ebp
c00037c8:	57                   	push   edi
c00037c9:	56                   	push   esi
c00037ca:	53                   	push   ebx
c00037cb:	83 ec 1c             	sub    esp,0x1c
c00037ce:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037d1:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037d3:	83 c7 20             	add    edi,0x20
c00037d6:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037dc:	76 07                	jbe    c00037e5 <dir_next+0x1e>
c00037de:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037e5:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037e8:	b9 04 00 00 00       	mov    ecx,0x4
c00037ed:	85 f6                	test   esi,esi
c00037ef:	0f 84 cd 00 00 00    	je     c00038c2 <dir_next+0xfb>
c00037f5:	89 c3                	mov    ebx,eax
c00037f7:	89 f8                	mov    eax,edi
c00037f9:	25 ff 01 00 00       	and    eax,0x1ff
c00037fe:	89 d1                	mov    ecx,edx
c0003800:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003804:	0f 85 a8 00 00 00    	jne    c00038b2 <dir_next+0xeb>
c000380a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000380d:	46                   	inc    esi
c000380e:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003811:	85 d2                	test   edx,edx
c0003813:	75 22                	jne    c0003837 <dir_next+0x70>
c0003815:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003819:	89 fa                	mov    edx,edi
c000381b:	c1 ea 05             	shr    edx,0x5
c000381e:	39 c2                	cmp    edx,eax
c0003820:	0f 82 8c 00 00 00    	jb     c00038b2 <dir_next+0xeb>
c0003826:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000382d:	b9 04 00 00 00       	mov    ecx,0x4
c0003832:	e9 8b 00 00 00       	jmp    c00038c2 <dir_next+0xfb>
c0003837:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000383b:	89 fe                	mov    esi,edi
c000383d:	c1 ee 09             	shr    esi,0x9
c0003840:	48                   	dec    eax
c0003841:	85 f0                	test   eax,esi
c0003843:	75 6d                	jne    c00038b2 <dir_next+0xeb>
c0003845:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003849:	89 e8                	mov    eax,ebp
c000384b:	e8 e2 fb ff ff       	call   c0003432 <get_fat.isra.2>
c0003850:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003854:	83 f8 01             	cmp    eax,0x1
c0003857:	89 c6                	mov    esi,eax
c0003859:	77 07                	ja     c0003862 <dir_next+0x9b>
c000385b:	b9 02 00 00 00       	mov    ecx,0x2
c0003860:	eb 60                	jmp    c00038c2 <dir_next+0xfb>
c0003862:	83 f8 ff             	cmp    eax,0xffffffff
c0003865:	75 07                	jne    c000386e <dir_next+0xa7>
c0003867:	b9 01 00 00 00       	mov    ecx,0x1
c000386c:	eb 54                	jmp    c00038c2 <dir_next+0xfb>
c000386e:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003871:	77 30                	ja     c00038a3 <dir_next+0xdc>
c0003873:	85 c9                	test   ecx,ecx
c0003875:	74 af                	je     c0003826 <dir_next+0x5f>
c0003877:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000387a:	89 d8                	mov    eax,ebx
c000387c:	e8 7e fd ff ff       	call   c00035ff <create_chain>
c0003881:	b9 07 00 00 00       	mov    ecx,0x7
c0003886:	85 c0                	test   eax,eax
c0003888:	89 c6                	mov    esi,eax
c000388a:	74 36                	je     c00038c2 <dir_next+0xfb>
c000388c:	83 f8 01             	cmp    eax,0x1
c000388f:	74 ca                	je     c000385b <dir_next+0x94>
c0003891:	83 f8 ff             	cmp    eax,0xffffffff
c0003894:	74 d1                	je     c0003867 <dir_next+0xa0>
c0003896:	89 c2                	mov    edx,eax
c0003898:	89 e8                	mov    eax,ebp
c000389a:	e8 67 f2 ff ff       	call   c0002b06 <dir_clear>
c000389f:	85 c0                	test   eax,eax
c00038a1:	75 c4                	jne    c0003867 <dir_next+0xa0>
c00038a3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00038a6:	89 f2                	mov    edx,esi
c00038a8:	89 e8                	mov    eax,ebp
c00038aa:	e8 97 e9 ff ff       	call   c0002246 <clst2sect>
c00038af:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00038b2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00038b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00038b9:	31 c9                	xor    ecx,ecx
c00038bb:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00038bf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00038c2:	83 c4 1c             	add    esp,0x1c
c00038c5:	89 c8                	mov    eax,ecx
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	5d                   	pop    ebp
c00038cb:	c3                   	ret    

c00038cc <dir_alloc>:
c00038cc:	55                   	push   ebp
c00038cd:	89 c5                	mov    ebp,eax
c00038cf:	57                   	push   edi
c00038d0:	89 d7                	mov    edi,edx
c00038d2:	56                   	push   esi
c00038d3:	31 d2                	xor    edx,edx
c00038d5:	53                   	push   ebx
c00038d6:	83 ec 0c             	sub    esp,0xc
c00038d9:	8b 30                	mov    esi,DWORD PTR [eax]
c00038db:	e8 57 fc ff ff       	call   c0003537 <dir_sdi>
c00038e0:	85 c0                	test   eax,eax
c00038e2:	75 3b                	jne    c000391f <dir_alloc+0x53>
c00038e4:	31 db                	xor    ebx,ebx
c00038e6:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038e9:	89 f0                	mov    eax,esi
c00038eb:	e8 65 ec ff ff       	call   c0002555 <move_window>
c00038f0:	85 c0                	test   eax,eax
c00038f2:	75 2b                	jne    c000391f <dir_alloc+0x53>
c00038f4:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038f7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038fa:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003900:	74 04                	je     c0003906 <dir_alloc+0x3a>
c0003902:	85 d2                	test   edx,edx
c0003904:	75 07                	jne    c000390d <dir_alloc+0x41>
c0003906:	43                   	inc    ebx
c0003907:	39 fb                	cmp    ebx,edi
c0003909:	75 04                	jne    c000390f <dir_alloc+0x43>
c000390b:	eb 1c                	jmp    c0003929 <dir_alloc+0x5d>
c000390d:	31 db                	xor    ebx,ebx
c000390f:	ba 01 00 00 00       	mov    edx,0x1
c0003914:	89 e8                	mov    eax,ebp
c0003916:	e8 ac fe ff ff       	call   c00037c7 <dir_next>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c7                	je     c00038e6 <dir_alloc+0x1a>
c000391f:	83 f8 04             	cmp    eax,0x4
c0003922:	75 05                	jne    c0003929 <dir_alloc+0x5d>
c0003924:	b8 07 00 00 00       	mov    eax,0x7
c0003929:	83 c4 0c             	add    esp,0xc
c000392c:	5b                   	pop    ebx
c000392d:	5e                   	pop    esi
c000392e:	5f                   	pop    edi
c000392f:	5d                   	pop    ebp
c0003930:	c3                   	ret    

c0003931 <dir_read>:
c0003931:	55                   	push   ebp
c0003932:	57                   	push   edi
c0003933:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003938:	56                   	push   esi
c0003939:	be 04 00 00 00       	mov    esi,0x4
c000393e:	53                   	push   ebx
c000393f:	89 c3                	mov    ebx,eax
c0003941:	83 ec 1c             	sub    esp,0x1c
c0003944:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003948:	8b 28                	mov    ebp,DWORD PTR [eax]
c000394a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000394f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003952:	85 d2                	test   edx,edx
c0003954:	0f 84 e3 00 00 00    	je     c0003a3d <dir_read+0x10c>
c000395a:	89 e8                	mov    eax,ebp
c000395c:	e8 f4 eb ff ff       	call   c0002555 <move_window>
c0003961:	85 c0                	test   eax,eax
c0003963:	89 c6                	mov    esi,eax
c0003965:	0f 85 dd 00 00 00    	jne    c0003a48 <dir_read+0x117>
c000396b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000396e:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003971:	88 04 24             	mov    BYTE PTR [esp],al
c0003974:	85 c0                	test   eax,eax
c0003976:	0f 84 c7 00 00 00    	je     c0003a43 <dir_read+0x112>
c000397c:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000397f:	83 e1 3f             	and    ecx,0x3f
c0003982:	3d e5 00 00 00       	cmp    eax,0xe5
c0003987:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000398a:	0f 84 93 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003990:	83 f8 2e             	cmp    eax,0x2e
c0003993:	0f 84 8a 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003999:	0f b6 c9             	movzx  ecx,cl
c000399c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00039a0:	83 e1 df             	and    ecx,0xffffffdf
c00039a3:	83 f9 08             	cmp    ecx,0x8
c00039a6:	0f 94 c1             	sete   cl
c00039a9:	0f b6 c9             	movzx  ecx,cl
c00039ac:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00039b0:	75 71                	jne    c0003a23 <dir_read+0xf2>
c00039b2:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00039b7:	75 4a                	jne    c0003a03 <dir_read+0xd2>
c00039b9:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00039bd:	74 16                	je     c00039d5 <dir_read+0xa4>
c00039bf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039c2:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00039c9:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039d0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039d3:	eb 0e                	jmp    c00039e3 <dir_read+0xb2>
c00039d5:	89 f9                	mov    ecx,edi
c00039d7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039dc:	0f b6 c9             	movzx  ecx,cl
c00039df:	39 c1                	cmp    ecx,eax
c00039e1:	75 45                	jne    c0003a28 <dir_read+0xf7>
c00039e3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039e7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ec:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039ef:	75 37                	jne    c0003a28 <dir_read+0xf7>
c00039f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039f4:	e8 6a e8 ff ff       	call   c0002263 <pick_lfn>
c00039f9:	85 c0                	test   eax,eax
c00039fb:	74 2b                	je     c0003a28 <dir_read+0xf7>
c00039fd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003a00:	4f                   	dec    edi
c0003a01:	eb 25                	jmp    c0003a28 <dir_read+0xf7>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	84 c0                	test   al,al
c0003a07:	75 11                	jne    c0003a1a <dir_read+0xe9>
c0003a09:	89 d0                	mov    eax,edx
c0003a0b:	e8 30 ea ff ff       	call   c0002440 <sum_sfn>
c0003a10:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003a14:	75 04                	jne    c0003a1a <dir_read+0xe9>
c0003a16:	31 f6                	xor    esi,esi
c0003a18:	eb 35                	jmp    c0003a4f <dir_read+0x11e>
c0003a1a:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a21:	eb 2c                	jmp    c0003a4f <dir_read+0x11e>
c0003a23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a28:	31 d2                	xor    edx,edx
c0003a2a:	89 d8                	mov    eax,ebx
c0003a2c:	e8 96 fd ff ff       	call   c00037c7 <dir_next>
c0003a31:	85 c0                	test   eax,eax
c0003a33:	89 c6                	mov    esi,eax
c0003a35:	0f 84 14 ff ff ff    	je     c000394f <dir_read+0x1e>
c0003a3b:	eb 0b                	jmp    c0003a48 <dir_read+0x117>
c0003a3d:	85 f6                	test   esi,esi
c0003a3f:	74 d5                	je     c0003a16 <dir_read+0xe5>
c0003a41:	eb 05                	jmp    c0003a48 <dir_read+0x117>
c0003a43:	be 04 00 00 00       	mov    esi,0x4
c0003a48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a4f:	83 c4 1c             	add    esp,0x1c
c0003a52:	89 f0                	mov    eax,esi
c0003a54:	5b                   	pop    ebx
c0003a55:	5e                   	pop    esi
c0003a56:	5f                   	pop    edi
c0003a57:	5d                   	pop    ebp
c0003a58:	c3                   	ret    

c0003a59 <dir_remove>:
c0003a59:	57                   	push   edi
c0003a5a:	56                   	push   esi
c0003a5b:	53                   	push   ebx
c0003a5c:	89 c3                	mov    ebx,eax
c0003a5e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a61:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a63:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a66:	83 fa ff             	cmp    edx,0xffffffff
c0003a69:	74 09                	je     c0003a74 <dir_remove+0x1b>
c0003a6b:	e8 c7 fa ff ff       	call   c0003537 <dir_sdi>
c0003a70:	85 c0                	test   eax,eax
c0003a72:	75 34                	jne    c0003aa8 <dir_remove+0x4f>
c0003a74:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a77:	89 f0                	mov    eax,esi
c0003a79:	e8 d7 ea ff ff       	call   c0002555 <move_window>
c0003a7e:	85 c0                	test   eax,eax
c0003a80:	75 1c                	jne    c0003a9e <dir_remove+0x45>
c0003a82:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a8c:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a8f:	73 17                	jae    c0003aa8 <dir_remove+0x4f>
c0003a91:	31 d2                	xor    edx,edx
c0003a93:	89 d8                	mov    eax,ebx
c0003a95:	e8 2d fd ff ff       	call   c00037c7 <dir_next>
c0003a9a:	85 c0                	test   eax,eax
c0003a9c:	74 d6                	je     c0003a74 <dir_remove+0x1b>
c0003a9e:	83 f8 04             	cmp    eax,0x4
c0003aa1:	75 05                	jne    c0003aa8 <dir_remove+0x4f>
c0003aa3:	b8 02 00 00 00       	mov    eax,0x2
c0003aa8:	5b                   	pop    ebx
c0003aa9:	5e                   	pop    esi
c0003aaa:	5f                   	pop    edi
c0003aab:	c3                   	ret    

c0003aac <dir_find>:
c0003aac:	55                   	push   ebp
c0003aad:	31 d2                	xor    edx,edx
c0003aaf:	57                   	push   edi
c0003ab0:	56                   	push   esi
c0003ab1:	53                   	push   ebx
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 ec 1c             	sub    esp,0x1c
c0003ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003abd:	89 d8                	mov    eax,ebx
c0003abf:	e8 73 fa ff ff       	call   c0003537 <dir_sdi>
c0003ac4:	85 c0                	test   eax,eax
c0003ac6:	89 c6                	mov    esi,eax
c0003ac8:	0f 85 22 01 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003ace:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003ad5:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003ada:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003adf:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ae6:	e8 6a ea ff ff       	call   c0002555 <move_window>
c0003aeb:	85 c0                	test   eax,eax
c0003aed:	89 c6                	mov    esi,eax
c0003aef:	0f 85 fb 00 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003af5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003af8:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003afb:	85 d2                	test   edx,edx
c0003afd:	89 d1                	mov    ecx,edx
c0003aff:	0f 84 e6 00 00 00    	je     c0003beb <dir_find+0x13f>
c0003b05:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003b08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b10:	83 e0 3f             	and    eax,0x3f
c0003b13:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003b19:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003b1c:	0f 84 a8 00 00 00    	je     c0003bca <dir_find+0x11e>
c0003b22:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003b27:	0f b6 c0             	movzx  eax,al
c0003b2a:	74 0b                	je     c0003b37 <dir_find+0x8b>
c0003b2c:	83 f8 0f             	cmp    eax,0xf
c0003b2f:	0f 85 95 00 00 00    	jne    c0003bca <dir_find+0x11e>
c0003b35:	eb 05                	jmp    c0003b3c <dir_find+0x90>
c0003b37:	83 f8 0f             	cmp    eax,0xf
c0003b3a:	75 62                	jne    c0003b9e <dir_find+0xf2>
c0003b3c:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b40:	0f 85 90 00 00 00    	jne    c0003bd6 <dir_find+0x12a>
c0003b46:	f6 c1 40             	test   cl,0x40
c0003b49:	74 15                	je     c0003b60 <dir_find+0xb4>
c0003b4b:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003b4e:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003b54:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003b58:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b5b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b5e:	eb 11                	jmp    c0003b71 <dir_find+0xc5>
c0003b60:	89 e8                	mov    eax,ebp
c0003b62:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b67:	0f b6 d0             	movzx  edx,al
c0003b6a:	0f b6 c1             	movzx  eax,cl
c0003b6d:	39 c2                	cmp    edx,eax
c0003b6f:	75 65                	jne    c0003bd6 <dir_find+0x12a>
c0003b71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b75:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b7a:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003b7d:	75 57                	jne    c0003bd6 <dir_find+0x12a>
c0003b7f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	89 fa                	mov    edx,edi
c0003b89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b8c:	e8 2c f3 ff ff       	call   c0002ebd <cmp_lfn>
c0003b91:	85 c0                	test   eax,eax
c0003b93:	74 41                	je     c0003bd6 <dir_find+0x12a>
c0003b95:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b99:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003b9c:	eb 38                	jmp    c0003bd6 <dir_find+0x12a>
c0003b9e:	89 e8                	mov    eax,ebp
c0003ba0:	84 c0                	test   al,al
c0003ba2:	75 0d                	jne    c0003bb1 <dir_find+0x105>
c0003ba4:	89 f8                	mov    eax,edi
c0003ba6:	e8 95 e8 ff ff       	call   c0002440 <sum_sfn>
c0003bab:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003baf:	74 3f                	je     c0003bf0 <dir_find+0x144>
c0003bb1:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003bb5:	75 13                	jne    c0003bca <dir_find+0x11e>
c0003bb7:	8d 53 20             	lea    edx,[ebx+0x20]
c0003bba:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bbf:	89 f8                	mov    eax,edi
c0003bc1:	e8 75 e4 ff ff       	call   c000203b <mem_cmp>
c0003bc6:	85 c0                	test   eax,eax
c0003bc8:	74 26                	je     c0003bf0 <dir_find+0x144>
c0003bca:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003bd1:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003bd6:	31 d2                	xor    edx,edx
c0003bd8:	89 d8                	mov    eax,ebx
c0003bda:	e8 e8 fb ff ff       	call   c00037c7 <dir_next>
c0003bdf:	85 c0                	test   eax,eax
c0003be1:	89 c6                	mov    esi,eax
c0003be3:	0f 84 f6 fe ff ff    	je     c0003adf <dir_find+0x33>
c0003be9:	eb 05                	jmp    c0003bf0 <dir_find+0x144>
c0003beb:	be 04 00 00 00       	mov    esi,0x4
c0003bf0:	83 c4 1c             	add    esp,0x1c
c0003bf3:	89 f0                	mov    eax,esi
c0003bf5:	5b                   	pop    ebx
c0003bf6:	5e                   	pop    esi
c0003bf7:	5f                   	pop    edi
c0003bf8:	5d                   	pop    ebp
c0003bf9:	c3                   	ret    

c0003bfa <follow_path>:
c0003bfa:	56                   	push   esi
c0003bfb:	53                   	push   ebx
c0003bfc:	89 c3                	mov    ebx,eax
c0003bfe:	83 ec 14             	sub    esp,0x14
c0003c01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003c05:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c0b:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003c0e:	83 fa 2f             	cmp    edx,0x2f
c0003c11:	75 07                	jne    c0003c1a <follow_path+0x20>
c0003c13:	40                   	inc    eax
c0003c14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c18:	eb ed                	jmp    c0003c07 <follow_path+0xd>
c0003c1a:	83 fa 5c             	cmp    edx,0x5c
c0003c1d:	74 f4                	je     c0003c13 <follow_path+0x19>
c0003c1f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003c26:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003c29:	77 3e                	ja     c0003c69 <follow_path+0x6f>
c0003c2b:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003c2f:	31 d2                	xor    edx,edx
c0003c31:	89 d8                	mov    eax,ebx
c0003c33:	e8 ff f8 ff ff       	call   c0003537 <dir_sdi>
c0003c38:	eb 57                	jmp    c0003c91 <follow_path+0x97>
c0003c3a:	89 d8                	mov    eax,ebx
c0003c3c:	e8 6b fe ff ff       	call   c0003aac <dir_find>
c0003c41:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c44:	85 c0                	test   eax,eax
c0003c46:	75 32                	jne    c0003c7a <follow_path+0x80>
c0003c48:	80 e2 04             	and    dl,0x4
c0003c4b:	75 44                	jne    c0003c91 <follow_path+0x97>
c0003c4d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c51:	74 39                	je     c0003c8c <follow_path+0x92>
c0003c53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c56:	25 ff 01 00 00       	and    eax,0x1ff
c0003c5b:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c5f:	8a 06                	mov    al,BYTE PTR [esi]
c0003c61:	e8 7b f7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003c66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c69:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c6d:	89 d8                	mov    eax,ebx
c0003c6f:	e8 8e ef ff ff       	call   c0002c02 <create_name>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 c2                	je     c0003c3a <follow_path+0x40>
c0003c78:	eb 17                	jmp    c0003c91 <follow_path+0x97>
c0003c7a:	83 f8 04             	cmp    eax,0x4
c0003c7d:	75 12                	jne    c0003c91 <follow_path+0x97>
c0003c7f:	80 e2 04             	and    dl,0x4
c0003c82:	ba 05 00 00 00       	mov    edx,0x5
c0003c87:	0f 44 c2             	cmove  eax,edx
c0003c8a:	eb 05                	jmp    c0003c91 <follow_path+0x97>
c0003c8c:	b8 05 00 00 00       	mov    eax,0x5
c0003c91:	83 c4 14             	add    esp,0x14
c0003c94:	5b                   	pop    ebx
c0003c95:	5e                   	pop    esi
c0003c96:	c3                   	ret    

c0003c97 <dir_register>:
c0003c97:	55                   	push   ebp
c0003c98:	57                   	push   edi
c0003c99:	56                   	push   esi
c0003c9a:	be 06 00 00 00       	mov    esi,0x6
c0003c9f:	53                   	push   ebx
c0003ca0:	83 ec 2c             	sub    esp,0x2c
c0003ca3:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ca6:	80 e2 a0             	and    dl,0xa0
c0003ca9:	0f 85 66 01 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003caf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003cb7:	8b 38                	mov    edi,DWORD PTR [eax]
c0003cb9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003cbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cc0:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003cc5:	74 06                	je     c0003ccd <dir_register+0x36>
c0003cc7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003ccb:	eb ef                	jmp    c0003cbc <dir_register+0x25>
c0003ccd:	89 c3                	mov    ebx,eax
c0003ccf:	b9 0c 00 00 00       	mov    ecx,0xc
c0003cd4:	8d 40 20             	lea    eax,[eax+0x20]
c0003cd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003cdb:	89 c2                	mov    edx,eax
c0003cdd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ce1:	e8 36 e3 ff ff       	call   c000201c <mem_cpy>
c0003ce6:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ceb:	74 48                	je     c0003d35 <dir_register+0x9e>
c0003ced:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cf1:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf6:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cf9:	55                   	push   ebp
c0003cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cfe:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003d02:	e8 77 e6 ff ff       	call   c000237e <gen_numname>
c0003d07:	58                   	pop    eax
c0003d08:	89 d8                	mov    eax,ebx
c0003d0a:	e8 9d fd ff ff       	call   c0003aac <dir_find>
c0003d0f:	85 c0                	test   eax,eax
c0003d11:	89 c6                	mov    esi,eax
c0003d13:	75 10                	jne    c0003d25 <dir_register+0x8e>
c0003d15:	45                   	inc    ebp
c0003d16:	83 fd 64             	cmp    ebp,0x64
c0003d19:	75 db                	jne    c0003cf6 <dir_register+0x5f>
c0003d1b:	be 07 00 00 00       	mov    esi,0x7
c0003d20:	e9 f0 00 00 00       	jmp    c0003e15 <dir_register+0x17e>
c0003d25:	83 f8 04             	cmp    eax,0x4
c0003d28:	0f 85 e7 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d2e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003d32:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003d35:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d3a:	bd 01 00 00 00       	mov    ebp,0x1
c0003d3f:	74 13                	je     c0003d54 <dir_register+0xbd>
c0003d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d45:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d4a:	31 d2                	xor    edx,edx
c0003d4c:	83 c0 0c             	add    eax,0xc
c0003d4f:	f7 f1                	div    ecx
c0003d51:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d54:	89 ea                	mov    edx,ebp
c0003d56:	89 d8                	mov    eax,ebx
c0003d58:	e8 6f fb ff ff       	call   c00038cc <dir_alloc>
c0003d5d:	85 c0                	test   eax,eax
c0003d5f:	89 c6                	mov    esi,eax
c0003d61:	0f 85 ae 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d67:	4d                   	dec    ebp
c0003d68:	74 6b                	je     c0003dd5 <dir_register+0x13e>
c0003d6a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d6d:	89 e8                	mov    eax,ebp
c0003d6f:	c1 e0 05             	shl    eax,0x5
c0003d72:	29 c2                	sub    edx,eax
c0003d74:	89 d8                	mov    eax,ebx
c0003d76:	e8 bc f7 ff ff       	call   c0003537 <dir_sdi>
c0003d7b:	85 c0                	test   eax,eax
c0003d7d:	89 c6                	mov    esi,eax
c0003d7f:	0f 85 90 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d89:	e8 b2 e6 ff ff       	call   c0002440 <sum_sfn>
c0003d8e:	0f b6 c0             	movzx  eax,al
c0003d91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d95:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d98:	89 f8                	mov    eax,edi
c0003d9a:	e8 b6 e7 ff ff       	call   c0002555 <move_window>
c0003d9f:	85 c0                	test   eax,eax
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	75 70                	jne    c0003e15 <dir_register+0x17e>
c0003da5:	83 ec 0c             	sub    esp,0xc
c0003da8:	89 e8                	mov    eax,ebp
c0003daa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dad:	0f b6 c8             	movzx  ecx,al
c0003db0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003db3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003db7:	e8 27 e5 ff ff       	call   c00022e3 <put_lfn>
c0003dbc:	31 d2                	xor    edx,edx
c0003dbe:	89 d8                	mov    eax,ebx
c0003dc0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dc4:	e8 fe f9 ff ff       	call   c00037c7 <dir_next>
c0003dc9:	83 c4 10             	add    esp,0x10
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	89 c6                	mov    esi,eax
c0003dd0:	75 43                	jne    c0003e15 <dir_register+0x17e>
c0003dd2:	4d                   	dec    ebp
c0003dd3:	75 c0                	jne    c0003d95 <dir_register+0xfe>
c0003dd5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003dd8:	89 f8                	mov    eax,edi
c0003dda:	e8 76 e7 ff ff       	call   c0002555 <move_window>
c0003ddf:	85 c0                	test   eax,eax
c0003de1:	89 c6                	mov    esi,eax
c0003de3:	75 30                	jne    c0003e15 <dir_register+0x17e>
c0003de5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003de8:	b9 20 00 00 00       	mov    ecx,0x20
c0003ded:	31 d2                	xor    edx,edx
c0003def:	e8 3d e2 ff ff       	call   c0002031 <mem_set>
c0003df4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e00:	e8 17 e2 ff ff       	call   c000201c <mem_cpy>
c0003e05:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003e08:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003e0b:	83 e0 18             	and    eax,0x18
c0003e0e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003e11:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003e15:	83 c4 2c             	add    esp,0x2c
c0003e18:	89 f0                	mov    eax,esi
c0003e1a:	5b                   	pop    ebx
c0003e1b:	5e                   	pop    esi
c0003e1c:	5f                   	pop    edi
c0003e1d:	5d                   	pop    ebp
c0003e1e:	c3                   	ret    

c0003e1f <f_mount>:
c0003e1f:	53                   	push   ebx
c0003e20:	83 ec 18             	sub    esp,0x18
c0003e23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003e27:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003e2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003e2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003e33:	e8 28 e6 ff ff       	call   c0002460 <get_ldnumber>
c0003e38:	89 c2                	mov    edx,eax
c0003e3a:	b8 0b 00 00 00       	mov    eax,0xb
c0003e3f:	85 d2                	test   edx,edx
c0003e41:	78 39                	js     c0003e7c <f_mount+0x5d>
c0003e43:	8b 04 95 a0 f4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0b60]
c0003e4a:	85 c0                	test   eax,eax
c0003e4c:	74 03                	je     c0003e51 <f_mount+0x32>
c0003e4e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e55:	85 c0                	test   eax,eax
c0003e57:	74 03                	je     c0003e5c <f_mount+0x3d>
c0003e59:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e60:	89 04 95 a0 f4 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0b60],eax
c0003e67:	31 c0                	xor    eax,eax
c0003e69:	84 db                	test   bl,bl
c0003e6b:	74 0f                	je     c0003e7c <f_mount+0x5d>
c0003e6d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e71:	31 c9                	xor    ecx,ecx
c0003e73:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e77:	e8 36 e8 ff ff       	call   c00026b2 <mount_volume>
c0003e7c:	83 c4 18             	add    esp,0x18
c0003e7f:	5b                   	pop    ebx
c0003e80:	c3                   	ret    

c0003e81 <f_open>:
c0003e81:	55                   	push   ebp
c0003e82:	b8 09 00 00 00       	mov    eax,0x9
c0003e87:	57                   	push   edi
c0003e88:	56                   	push   esi
c0003e89:	53                   	push   ebx
c0003e8a:	83 ec 5c             	sub    esp,0x5c
c0003e8d:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e95:	85 db                	test   ebx,ebx
c0003e97:	0f 84 9f 02 00 00    	je     c000413c <f_open+0x2bb>
c0003e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ea1:	89 fd                	mov    ebp,edi
c0003ea3:	83 e5 3f             	and    ebp,0x3f
c0003ea6:	89 e8                	mov    eax,ebp
c0003ea8:	89 ee                	mov    esi,ebp
c0003eaa:	0f b6 c8             	movzx  ecx,al
c0003ead:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003eb1:	e8 fc e7 ff ff       	call   c00026b2 <mount_volume>
c0003eb6:	85 c0                	test   eax,eax
c0003eb8:	0f 85 78 02 00 00    	jne    c0004136 <f_open+0x2b5>
c0003ebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec2:	83 ec 0c             	sub    esp,0xc
c0003ec5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ec9:	68 00 02 00 00       	push   0x200
c0003ece:	e8 61 1f 00 00       	call   c0005e34 <ff_memalloc>
c0003ed3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ed7:	83 c4 10             	add    esp,0x10
c0003eda:	b8 11 00 00 00       	mov    eax,0x11
c0003edf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ee4:	0f 84 52 02 00 00    	je     c000413c <f_open+0x2bb>
c0003eea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ef2:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ef6:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ef9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003efd:	e8 f8 fc ff ff       	call   c0003bfa <follow_path>
c0003f02:	85 c0                	test   eax,eax
c0003f04:	75 0d                	jne    c0003f13 <f_open+0x92>
c0003f06:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003f0b:	ba 06 00 00 00       	mov    edx,0x6
c0003f10:	0f 45 c2             	cmovne eax,edx
c0003f13:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003f19:	0f 84 d5 00 00 00    	je     c0003ff4 <f_open+0x173>
c0003f1f:	85 c0                	test   eax,eax
c0003f21:	74 21                	je     c0003f44 <f_open+0xc3>
c0003f23:	83 f8 04             	cmp    eax,0x4
c0003f26:	0f 85 ef 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f30:	e8 62 fd ff ff       	call   c0003c97 <dir_register>
c0003f35:	85 c0                	test   eax,eax
c0003f37:	0f 85 de 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f3d:	83 cd 08             	or     ebp,0x8
c0003f40:	89 ee                	mov    esi,ebp
c0003f42:	eb 2c                	jmp    c0003f70 <f_open+0xef>
c0003f44:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f48:	b8 07 00 00 00       	mov    eax,0x7
c0003f4d:	80 e2 11             	and    dl,0x11
c0003f50:	0f 85 c5 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f56:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f5c:	b8 08 00 00 00       	mov    eax,0x8
c0003f61:	0f 85 b4 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f67:	83 e7 08             	and    edi,0x8
c0003f6a:	0f 84 b1 00 00 00    	je     c0004021 <f_open+0x1a0>
c0003f70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f74:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f78:	8a 00                	mov    al,BYTE PTR [eax]
c0003f7a:	89 ea                	mov    edx,ebp
c0003f7c:	e8 60 f4 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003f81:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f86:	89 c7                	mov    edi,eax
c0003f88:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f8b:	e8 89 e0 ff ff       	call   c0002019 <st_dword>
c0003f90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f94:	31 c9                	xor    ecx,ecx
c0003f96:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003fa2:	e8 63 f4 ff ff       	call   c000340a <st_clust.isra.1>
c0003fa7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003fab:	31 d2                	xor    edx,edx
c0003fad:	83 c0 1c             	add    eax,0x1c
c0003fb0:	e8 64 e0 ff ff       	call   c0002019 <st_dword>
c0003fb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fb9:	85 ff                	test   edi,edi
c0003fbb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003fbf:	74 60                	je     c0004021 <f_open+0x1a0>
c0003fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fc5:	31 c9                	xor    ecx,ecx
c0003fc7:	89 fa                	mov    edx,edi
c0003fc9:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003fcc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003fd0:	e8 64 f7 ff ff       	call   c0003739 <remove_chain>
c0003fd5:	85 c0                	test   eax,eax
c0003fd7:	0f 85 3e 01 00 00    	jne    c000411b <f_open+0x29a>
c0003fdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fe1:	89 ea                	mov    edx,ebp
c0003fe3:	4f                   	dec    edi
c0003fe4:	e8 6c e5 ff ff       	call   c0002555 <move_window>
c0003fe9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fed:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ff0:	85 c0                	test   eax,eax
c0003ff2:	eb 27                	jmp    c000401b <f_open+0x19a>
c0003ff4:	85 c0                	test   eax,eax
c0003ff6:	0f 85 1f 01 00 00    	jne    c000411b <f_open+0x29a>
c0003ffc:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004000:	b8 04 00 00 00       	mov    eax,0x4
c0004005:	f6 c2 10             	test   dl,0x10
c0004008:	0f 85 0d 01 00 00    	jne    c000411b <f_open+0x29a>
c000400e:	83 e7 02             	and    edi,0x2
c0004011:	74 0e                	je     c0004021 <f_open+0x1a0>
c0004013:	b8 07 00 00 00       	mov    eax,0x7
c0004018:	80 e2 01             	and    dl,0x1
c000401b:	0f 85 fa 00 00 00    	jne    c000411b <f_open+0x29a>
c0004021:	f7 c6 08 00 00 00    	test   esi,0x8
c0004027:	74 03                	je     c000402c <f_open+0x1ab>
c0004029:	83 ce 40             	or     esi,0x40
c000402c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004030:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004034:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0004037:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000403a:	89 fa                	mov    edx,edi
c000403c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000403f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004042:	e8 9a f3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004047:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000404a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000404d:	e8 ab df ff ff       	call   c0001ffd <ld_dword>
c0004052:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004055:	31 d2                	xor    edx,edx
c0004057:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004059:	b9 00 02 00 00       	mov    ecx,0x200
c000405e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004061:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004065:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004069:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004070:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004077:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000407b:	89 f0                	mov    eax,esi
c000407d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004080:	89 f8                	mov    eax,edi
c0004082:	e8 aa df ff ff       	call   c0002031 <mem_set>
c0004087:	83 e6 20             	and    esi,0x20
c000408a:	75 07                	jne    c0004093 <f_open+0x212>
c000408c:	31 c0                	xor    eax,eax
c000408e:	e9 88 00 00 00       	jmp    c000411b <f_open+0x29a>
c0004093:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0004096:	85 f6                	test   esi,esi
c0004098:	74 f2                	je     c000408c <f_open+0x20b>
c000409a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000409d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040a1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00040a4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00040a8:	31 c0                	xor    eax,eax
c00040aa:	c1 e5 09             	shl    ebp,0x9
c00040ad:	85 c0                	test   eax,eax
c00040af:	75 23                	jne    c00040d4 <f_open+0x253>
c00040b1:	39 ee                	cmp    esi,ebp
c00040b3:	76 1f                	jbe    c00040d4 <f_open+0x253>
c00040b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040b7:	e8 76 f3 ff ff       	call   c0003432 <get_fat.isra.2>
c00040bc:	89 c2                	mov    edx,eax
c00040be:	b8 02 00 00 00       	mov    eax,0x2
c00040c3:	83 fa 01             	cmp    edx,0x1
c00040c6:	76 08                	jbe    c00040d0 <f_open+0x24f>
c00040c8:	31 c0                	xor    eax,eax
c00040ca:	83 fa ff             	cmp    edx,0xffffffff
c00040cd:	0f 94 c0             	sete   al
c00040d0:	29 ee                	sub    esi,ebp
c00040d2:	eb d9                	jmp    c00040ad <f_open+0x22c>
c00040d4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00040d7:	85 c0                	test   eax,eax
c00040d9:	75 40                	jne    c000411b <f_open+0x29a>
c00040db:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00040e1:	74 a9                	je     c000408c <f_open+0x20b>
c00040e3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00040e7:	89 e8                	mov    eax,ebp
c00040e9:	e8 58 e1 ff ff       	call   c0002246 <clst2sect>
c00040ee:	89 c2                	mov    edx,eax
c00040f0:	b8 02 00 00 00       	mov    eax,0x2
c00040f5:	85 d2                	test   edx,edx
c00040f7:	74 22                	je     c000411b <f_open+0x29a>
c00040f9:	c1 ee 09             	shr    esi,0x9
c00040fc:	8d 04 16             	lea    eax,[esi+edx*1]
c00040ff:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004102:	6a 01                	push   0x1
c0004104:	50                   	push   eax
c0004105:	57                   	push   edi
c0004106:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000410a:	50                   	push   eax
c000410b:	e8 95 de ff ff       	call   c0001fa5 <disk_read>
c0004110:	83 c4 10             	add    esp,0x10
c0004113:	85 c0                	test   eax,eax
c0004115:	0f 95 c0             	setne  al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000411f:	83 ec 0c             	sub    esp,0xc
c0004122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0004126:	e8 21 1d 00 00       	call   c0005e4c <ff_memfree>
c000412b:	83 c4 10             	add    esp,0x10
c000412e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004132:	85 c0                	test   eax,eax
c0004134:	74 06                	je     c000413c <f_open+0x2bb>
c0004136:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000413c:	83 c4 5c             	add    esp,0x5c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_read>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000415b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004161:	89 d8                	mov    eax,ebx
c0004163:	e8 44 e3 ff ff       	call   c00024ac <validate>
c0004168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000416c:	85 c0                	test   eax,eax
c000416e:	0f 85 a5 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004174:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0004178:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000417c:	85 c0                	test   eax,eax
c000417e:	0f 85 95 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004184:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004188:	0f 84 83 01 00 00    	je     c0004311 <f_read+0x1cd>
c000418e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004191:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004194:	39 f8                	cmp    eax,edi
c0004196:	0f 46 f8             	cmovbe edi,eax
c0004199:	85 ff                	test   edi,edi
c000419b:	0f 84 78 01 00 00    	je     c0004319 <f_read+0x1d5>
c00041a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a4:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a9:	0f 85 2b 01 00 00    	jne    c00042da <f_read+0x196>
c00041af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b3:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b7:	89 c2                	mov    edx,eax
c00041b9:	c1 ea 09             	shr    edx,0x9
c00041bc:	4d                   	dec    ebp
c00041bd:	21 d5                	and    ebp,edx
c00041bf:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c3:	75 42                	jne    c0004207 <f_read+0xc3>
c00041c5:	85 c0                	test   eax,eax
c00041c7:	75 05                	jne    c00041ce <f_read+0x8a>
c00041c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041cc:	eb 0a                	jmp    c00041d8 <f_read+0x94>
c00041ce:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d3:	e8 5a f2 ff ff       	call   c0003432 <get_fat.isra.2>
c00041d8:	83 f8 01             	cmp    eax,0x1
c00041db:	77 11                	ja     c00041ee <f_read+0xaa>
c00041dd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041e1:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c00041e9:	e9 2b 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c00041ee:	83 f8 ff             	cmp    eax,0xffffffff
c00041f1:	75 11                	jne    c0004204 <f_read+0xc0>
c00041f3:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041f7:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00041ff:	e9 15 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c0004204:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000420b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000420e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004212:	89 c8                	mov    eax,ecx
c0004214:	e8 2d e0 ff ff       	call   c0002246 <clst2sect>
c0004219:	85 c0                	test   eax,eax
c000421b:	74 c0                	je     c00041dd <f_read+0x99>
c000421d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004221:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004227:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000422a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000422e:	76 58                	jbe    c0004288 <f_read+0x144>
c0004230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004234:	89 fe                	mov    esi,edi
c0004236:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000423a:	c1 ee 09             	shr    esi,0x9
c000423d:	01 f2                	add    edx,esi
c000423f:	39 c2                	cmp    edx,eax
c0004241:	76 06                	jbe    c0004249 <f_read+0x105>
c0004243:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004247:	89 c6                	mov    esi,eax
c0004249:	56                   	push   esi
c000424a:	55                   	push   ebp
c000424b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000424f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004253:	50                   	push   eax
c0004254:	e8 4c dd ff ff       	call   c0001fa5 <disk_read>
c0004259:	83 c4 10             	add    esp,0x10
c000425c:	85 c0                	test   eax,eax
c000425e:	75 93                	jne    c00041f3 <f_read+0xaf>
c0004260:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004264:	74 1d                	je     c0004283 <f_read+0x13f>
c0004266:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004269:	29 e8                	sub    eax,ebp
c000426b:	39 f0                	cmp    eax,esi
c000426d:	73 14                	jae    c0004283 <f_read+0x13f>
c000426f:	c1 e0 09             	shl    eax,0x9
c0004272:	b9 00 02 00 00       	mov    ecx,0x200
c0004277:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000427b:	8d 53 28             	lea    edx,[ebx+0x28]
c000427e:	e8 99 dd ff ff       	call   c000201c <mem_cpy>
c0004283:	c1 e6 09             	shl    esi,0x9
c0004286:	eb 75                	jmp    c00042fd <f_read+0x1b9>
c0004288:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000428b:	39 e8                	cmp    eax,ebp
c000428d:	74 48                	je     c00042d7 <f_read+0x193>
c000428f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004293:	8d 73 28             	lea    esi,[ebx+0x28]
c0004296:	74 22                	je     c00042ba <f_read+0x176>
c0004298:	6a 01                	push   0x1
c000429a:	50                   	push   eax
c000429b:	56                   	push   esi
c000429c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042a0:	50                   	push   eax
c00042a1:	e8 15 dd ff ff       	call   c0001fbb <disk_write>
c00042a6:	83 c4 10             	add    esp,0x10
c00042a9:	85 c0                	test   eax,eax
c00042ab:	0f 85 42 ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042b1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042b4:	83 e0 7f             	and    eax,0x7f
c00042b7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ba:	6a 01                	push   0x1
c00042bc:	55                   	push   ebp
c00042bd:	56                   	push   esi
c00042be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042c6:	50                   	push   eax
c00042c7:	e8 d9 dc ff ff       	call   c0001fa5 <disk_read>
c00042cc:	83 c4 10             	add    esp,0x10
c00042cf:	85 c0                	test   eax,eax
c00042d1:	0f 85 1c ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042d7:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00042da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042dd:	be 00 02 00 00       	mov    esi,0x200
c00042e2:	25 ff 01 00 00       	and    eax,0x1ff
c00042e7:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042eb:	29 c6                	sub    esi,eax
c00042ed:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042f1:	39 f7                	cmp    edi,esi
c00042f3:	0f 46 f7             	cmovbe esi,edi
c00042f6:	89 f1                	mov    ecx,esi
c00042f8:	e8 1f dd ff ff       	call   c000201c <mem_cpy>
c00042fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004301:	29 f7                	sub    edi,esi
c0004303:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004307:	01 30                	add    DWORD PTR [eax],esi
c0004309:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000430c:	e9 88 fe ff ff       	jmp    c0004199 <f_read+0x55>
c0004311:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000431d:	83 c4 2c             	add    esp,0x2c
c0004320:	5b                   	pop    ebx
c0004321:	5e                   	pop    esi
c0004322:	5f                   	pop    edi
c0004323:	5d                   	pop    ebp
c0004324:	c3                   	ret    

c0004325 <f_write>:
c0004325:	55                   	push   ebp
c0004326:	57                   	push   edi
c0004327:	56                   	push   esi
c0004328:	53                   	push   ebx
c0004329:	83 ec 2c             	sub    esp,0x2c
c000432c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004330:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004334:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004338:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000433e:	89 d8                	mov    eax,ebx
c0004340:	e8 67 e1 ff ff       	call   c00024ac <validate>
c0004345:	85 c0                	test   eax,eax
c0004347:	89 c7                	mov    edi,eax
c0004349:	0f 85 13 02 00 00    	jne    c0004562 <f_write+0x23d>
c000434f:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004353:	85 ff                	test   edi,edi
c0004355:	0f 85 07 02 00 00    	jne    c0004562 <f_write+0x23d>
c000435b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435f:	0f 84 f8 01 00 00    	je     c000455d <f_write+0x238>
c0004365:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004368:	89 c1                	mov    ecx,eax
c000436a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000436e:	0f 83 ed 00 00 00    	jae    c0004461 <f_write+0x13c>
c0004374:	f7 d0                	not    eax
c0004376:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000437a:	e9 e2 00 00 00       	jmp    c0004461 <f_write+0x13c>
c000437f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004382:	a9 ff 01 00 00       	test   eax,0x1ff
c0004387:	0f 85 9b 01 00 00    	jne    c0004528 <f_write+0x203>
c000438d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004391:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0004395:	89 c2                	mov    edx,eax
c0004397:	c1 ea 09             	shr    edx,0x9
c000439a:	4d                   	dec    ebp
c000439b:	21 d5                	and    ebp,edx
c000439d:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00043a1:	0f 84 c7 00 00 00    	je     c000446e <f_write+0x149>
c00043a7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043ab:	0f 85 23 01 00 00    	jne    c00044d4 <f_write+0x1af>
c00043b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043bc:	89 c8                	mov    eax,ecx
c00043be:	e8 83 de ff ff       	call   c0002246 <clst2sect>
c00043c3:	85 c0                	test   eax,eax
c00043c5:	0f 84 d3 00 00 00    	je     c000449e <f_write+0x179>
c00043cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00043cf:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043d7:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00043da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043de:	0f 86 1c 01 00 00    	jbe    c0004500 <f_write+0x1db>
c00043e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043ec:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043f0:	c1 ee 09             	shr    esi,0x9
c00043f3:	01 f2                	add    edx,esi
c00043f5:	39 c2                	cmp    edx,eax
c00043f7:	76 06                	jbe    c00043ff <f_write+0xda>
c00043f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043fd:	89 c6                	mov    esi,eax
c00043ff:	56                   	push   esi
c0004400:	55                   	push   ebp
c0004401:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004405:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004409:	50                   	push   eax
c000440a:	e8 ac db ff ff       	call   c0001fbb <disk_write>
c000440f:	83 c4 10             	add    esp,0x10
c0004412:	85 c0                	test   eax,eax
c0004414:	0f 85 97 00 00 00    	jne    c00044b1 <f_write+0x18c>
c000441a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000441d:	29 ea                	sub    edx,ebp
c000441f:	39 f2                	cmp    edx,esi
c0004421:	73 1d                	jae    c0004440 <f_write+0x11b>
c0004423:	c1 e2 09             	shl    edx,0x9
c0004426:	b9 00 02 00 00       	mov    ecx,0x200
c000442b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000442f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004432:	e8 e5 db ff ff       	call   c000201c <mem_cpy>
c0004437:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000443a:	83 e0 7f             	and    eax,0x7f
c000443d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004440:	c1 e6 09             	shl    esi,0x9
c0004443:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004447:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000444b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000444f:	01 30                	add    DWORD PTR [eax],esi
c0004451:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004454:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004457:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000445a:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000445e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004461:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004466:	0f 85 13 ff ff ff    	jne    c000437f <f_write+0x5a>
c000446c:	eb 1d                	jmp    c000448b <f_write+0x166>
c000446e:	85 c0                	test   eax,eax
c0004470:	75 0b                	jne    c000447d <f_write+0x158>
c0004472:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004475:	31 d2                	xor    edx,edx
c0004477:	85 c0                	test   eax,eax
c0004479:	75 1e                	jne    c0004499 <f_write+0x174>
c000447b:	eb 03                	jmp    c0004480 <f_write+0x15b>
c000447d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004480:	89 d8                	mov    eax,ebx
c0004482:	e8 78 f1 ff ff       	call   c00035ff <create_chain>
c0004487:	85 c0                	test   eax,eax
c0004489:	75 0e                	jne    c0004499 <f_write+0x174>
c000448b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000448e:	83 c8 40             	or     eax,0x40
c0004491:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004494:	e9 c9 00 00 00       	jmp    c0004562 <f_write+0x23d>
c0004499:	83 f8 01             	cmp    eax,0x1
c000449c:	75 0e                	jne    c00044ac <f_write+0x187>
c000449e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044a2:	bf 02 00 00 00       	mov    edi,0x2
c00044a7:	e9 b6 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044ac:	83 f8 ff             	cmp    eax,0xffffffff
c00044af:	75 0e                	jne    c00044bf <f_write+0x19a>
c00044b1:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00044b5:	bf 01 00 00 00       	mov    edi,0x1
c00044ba:	e9 a3 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044bf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044c6:	0f 85 db fe ff ff    	jne    c00043a7 <f_write+0x82>
c00044cc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044cf:	e9 d3 fe ff ff       	jmp    c00043a7 <f_write+0x82>
c00044d4:	6a 01                	push   0x1
c00044d6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044d9:	8d 43 28             	lea    eax,[ebx+0x28]
c00044dc:	50                   	push   eax
c00044dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044e5:	50                   	push   eax
c00044e6:	e8 d0 da ff ff       	call   c0001fbb <disk_write>
c00044eb:	83 c4 10             	add    esp,0x10
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 bf                	jne    c00044b1 <f_write+0x18c>
c00044f2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044f5:	83 e0 7f             	and    eax,0x7f
c00044f8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044fb:	e9 b1 fe ff ff       	jmp    c00043b1 <f_write+0x8c>
c0004500:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004503:	74 20                	je     c0004525 <f_write+0x200>
c0004505:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004508:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000450b:	76 18                	jbe    c0004525 <f_write+0x200>
c000450d:	6a 01                	push   0x1
c000450f:	55                   	push   ebp
c0004510:	8d 43 28             	lea    eax,[ebx+0x28]
c0004513:	50                   	push   eax
c0004514:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004518:	50                   	push   eax
c0004519:	e8 87 da ff ff       	call   c0001fa5 <disk_read>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	85 c0                	test   eax,eax
c0004523:	75 8c                	jne    c00044b1 <f_write+0x18c>
c0004525:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004528:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000452b:	be 00 02 00 00       	mov    esi,0x200
c0004530:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004534:	25 ff 01 00 00       	and    eax,0x1ff
c0004539:	29 c6                	sub    esi,eax
c000453b:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000453f:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004543:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004548:	89 f1                	mov    ecx,esi
c000454a:	e8 cd da ff ff       	call   c000201c <mem_cpy>
c000454f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004552:	83 c8 80             	or     eax,0xffffff80
c0004555:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004558:	e9 e6 fe ff ff       	jmp    c0004443 <f_write+0x11e>
c000455d:	bf 07 00 00 00       	mov    edi,0x7
c0004562:	83 c4 2c             	add    esp,0x2c
c0004565:	89 f8                	mov    eax,edi
c0004567:	5b                   	pop    ebx
c0004568:	5e                   	pop    esi
c0004569:	5f                   	pop    edi
c000456a:	5d                   	pop    ebp
c000456b:	c3                   	ret    

c000456c <f_sync>:
c000456c:	56                   	push   esi
c000456d:	53                   	push   ebx
c000456e:	83 ec 14             	sub    esp,0x14
c0004571:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004575:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004579:	89 d8                	mov    eax,ebx
c000457b:	e8 2c df ff ff       	call   c00024ac <validate>
c0004580:	85 c0                	test   eax,eax
c0004582:	0f 85 a3 00 00 00    	jne    c000462b <f_sync+0xbf>
c0004588:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000458b:	f6 c2 40             	test   dl,0x40
c000458e:	0f 84 97 00 00 00    	je     c000462b <f_sync+0xbf>
c0004594:	80 e2 80             	and    dl,0x80
c0004597:	74 2e                	je     c00045c7 <f_sync+0x5b>
c0004599:	6a 01                	push   0x1
c000459b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000459e:	8d 43 28             	lea    eax,[ebx+0x28]
c00045a1:	50                   	push   eax
c00045a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045aa:	50                   	push   eax
c00045ab:	e8 0b da ff ff       	call   c0001fbb <disk_write>
c00045b0:	83 c4 10             	add    esp,0x10
c00045b3:	89 c2                	mov    edx,eax
c00045b5:	b8 01 00 00 00       	mov    eax,0x1
c00045ba:	85 d2                	test   edx,edx
c00045bc:	75 6d                	jne    c000462b <f_sync+0xbf>
c00045be:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045c1:	83 e0 7f             	and    eax,0x7f
c00045c4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045c7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045ce:	e8 82 df ff ff       	call   c0002555 <move_window>
c00045d3:	85 c0                	test   eax,eax
c00045d5:	75 54                	jne    c000462b <f_sync+0xbf>
c00045d7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045da:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045dd:	89 f2                	mov    edx,esi
c00045df:	83 c8 20             	or     eax,0x20
c00045e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045e5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045ea:	e8 1b ee ff ff       	call   c000340a <st_clust.isra.1>
c00045ef:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045f2:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045f5:	e8 1f da ff ff       	call   c0002019 <st_dword>
c00045fa:	8d 46 16             	lea    eax,[esi+0x16]
c00045fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004602:	e8 12 da ff ff       	call   c0002019 <st_dword>
c0004607:	8d 46 12             	lea    eax,[esi+0x12]
c000460a:	31 d2                	xor    edx,edx
c000460c:	e8 04 da ff ff       	call   c0002015 <st_word>
c0004611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004615:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461d:	e8 68 e9 ff ff       	call   c0002f8a <sync_fs>
c0004622:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004625:	83 e2 bf             	and    edx,0xffffffbf
c0004628:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000462b:	83 c4 14             	add    esp,0x14
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <f_close>:
c0004631:	53                   	push   ebx
c0004632:	83 ec 24             	sub    esp,0x24
c0004635:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004639:	53                   	push   ebx
c000463a:	e8 2d ff ff ff       	call   c000456c <f_sync>
c000463f:	83 c4 10             	add    esp,0x10
c0004642:	85 c0                	test   eax,eax
c0004644:	75 15                	jne    c000465b <f_close+0x2a>
c0004646:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000464a:	89 d8                	mov    eax,ebx
c000464c:	e8 5b de ff ff       	call   c00024ac <validate>
c0004651:	85 c0                	test   eax,eax
c0004653:	75 06                	jne    c000465b <f_close+0x2a>
c0004655:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000465b:	83 c4 18             	add    esp,0x18
c000465e:	5b                   	pop    ebx
c000465f:	c3                   	ret    

c0004660 <f_lseek>:
c0004660:	55                   	push   ebp
c0004661:	57                   	push   edi
c0004662:	56                   	push   esi
c0004663:	53                   	push   ebx
c0004664:	83 ec 2c             	sub    esp,0x2c
c0004667:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000466b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000466f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004673:	89 d8                	mov    eax,ebx
c0004675:	e8 32 de ff ff       	call   c00024ac <validate>
c000467a:	85 c0                	test   eax,eax
c000467c:	89 c5                	mov    ebp,eax
c000467e:	0f 85 82 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004684:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004688:	85 ed                	test   ebp,ebp
c000468a:	0f 85 76 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004690:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004693:	39 f0                	cmp    eax,esi
c0004695:	73 07                	jae    c000469e <f_lseek+0x3e>
c0004697:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000469b:	0f 44 f0             	cmove  esi,eax
c000469e:	85 f6                	test   esi,esi
c00046a0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00046a3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00046aa:	75 07                	jne    c00046b3 <f_lseek+0x53>
c00046ac:	31 f6                	xor    esi,esi
c00046ae:	e9 e2 00 00 00       	jmp    c0004795 <f_lseek+0x135>
c00046b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b7:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00046bb:	c1 e7 09             	shl    edi,0x9
c00046be:	85 c9                	test   ecx,ecx
c00046c0:	74 28                	je     c00046ea <f_lseek+0x8a>
c00046c2:	31 d2                	xor    edx,edx
c00046c4:	49                   	dec    ecx
c00046c5:	8d 46 ff             	lea    eax,[esi-0x1]
c00046c8:	f7 f7                	div    edi
c00046ca:	31 d2                	xor    edx,edx
c00046cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046d0:	89 c8                	mov    eax,ecx
c00046d2:	f7 f7                	div    edi
c00046d4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046d8:	72 10                	jb     c00046ea <f_lseek+0x8a>
c00046da:	89 f8                	mov    eax,edi
c00046dc:	f7 d8                	neg    eax
c00046de:	21 c1                	and    ecx,eax
c00046e0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046e3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046e6:	29 ce                	sub    esi,ecx
c00046e8:	eb 3c                	jmp    c0004726 <f_lseek+0xc6>
c00046ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046ed:	85 c0                	test   eax,eax
c00046ef:	75 32                	jne    c0004723 <f_lseek+0xc3>
c00046f1:	31 d2                	xor    edx,edx
c00046f3:	89 d8                	mov    eax,ebx
c00046f5:	e8 05 ef ff ff       	call   c00035ff <create_chain>
c00046fa:	83 f8 01             	cmp    eax,0x1
c00046fd:	75 0e                	jne    c000470d <f_lseek+0xad>
c00046ff:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004703:	bd 02 00 00 00       	mov    ebp,0x2
c0004708:	e9 f9 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c000470d:	83 f8 ff             	cmp    eax,0xffffffff
c0004710:	75 0e                	jne    c0004720 <f_lseek+0xc0>
c0004712:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004716:	bd 01 00 00 00       	mov    ebp,0x1
c000471b:	e9 e6 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c0004720:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004723:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004726:	85 c0                	test   eax,eax
c0004728:	74 82                	je     c00046ac <f_lseek+0x4c>
c000472a:	39 fe                	cmp    esi,edi
c000472c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000472f:	76 3d                	jbe    c000476e <f_lseek+0x10e>
c0004731:	01 fa                	add    edx,edi
c0004733:	29 fe                	sub    esi,edi
c0004735:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004739:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000473c:	89 c2                	mov    edx,eax
c000473e:	74 0d                	je     c000474d <f_lseek+0xed>
c0004740:	89 d8                	mov    eax,ebx
c0004742:	e8 b8 ee ff ff       	call   c00035ff <create_chain>
c0004747:	85 c0                	test   eax,eax
c0004749:	75 09                	jne    c0004754 <f_lseek+0xf4>
c000474b:	eb 1f                	jmp    c000476c <f_lseek+0x10c>
c000474d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000474f:	e8 de ec ff ff       	call   c0003432 <get_fat.isra.2>
c0004754:	83 f8 ff             	cmp    eax,0xffffffff
c0004757:	74 b9                	je     c0004712 <f_lseek+0xb2>
c0004759:	83 f8 01             	cmp    eax,0x1
c000475c:	76 a1                	jbe    c00046ff <f_lseek+0x9f>
c000475e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004762:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004765:	76 98                	jbe    c00046ff <f_lseek+0x9f>
c0004767:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000476a:	eb be                	jmp    c000472a <f_lseek+0xca>
c000476c:	31 f6                	xor    esi,esi
c000476e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004771:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004777:	0f 84 2f ff ff ff    	je     c00046ac <f_lseek+0x4c>
c000477d:	89 c2                	mov    edx,eax
c000477f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004783:	e8 be da ff ff       	call   c0002246 <clst2sect>
c0004788:	85 c0                	test   eax,eax
c000478a:	0f 84 6f ff ff ff    	je     c00046ff <f_lseek+0x9f>
c0004790:	c1 ee 09             	shr    esi,0x9
c0004793:	01 c6                	add    esi,eax
c0004795:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004798:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000479b:	76 0c                	jbe    c00047a9 <f_lseek+0x149>
c000479d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00047a0:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00047a3:	83 ca 40             	or     edx,0x40
c00047a6:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00047a9:	a9 ff 01 00 00       	test   eax,0x1ff
c00047ae:	74 56                	je     c0004806 <f_lseek+0x1a6>
c00047b0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00047b3:	39 f0                	cmp    eax,esi
c00047b5:	74 4f                	je     c0004806 <f_lseek+0x1a6>
c00047b7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047bb:	8d 7b 28             	lea    edi,[ebx+0x28]
c00047be:	74 26                	je     c00047e6 <f_lseek+0x186>
c00047c0:	6a 01                	push   0x1
c00047c2:	50                   	push   eax
c00047c3:	57                   	push   edi
c00047c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047c8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047cc:	50                   	push   eax
c00047cd:	e8 e9 d7 ff ff       	call   c0001fbb <disk_write>
c00047d2:	83 c4 10             	add    esp,0x10
c00047d5:	85 c0                	test   eax,eax
c00047d7:	0f 85 35 ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c00047dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047e0:	83 e0 7f             	and    eax,0x7f
c00047e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047e6:	6a 01                	push   0x1
c00047e8:	56                   	push   esi
c00047e9:	57                   	push   edi
c00047ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047ee:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047f2:	50                   	push   eax
c00047f3:	e8 ad d7 ff ff       	call   c0001fa5 <disk_read>
c00047f8:	83 c4 10             	add    esp,0x10
c00047fb:	85 c0                	test   eax,eax
c00047fd:	0f 85 0f ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c0004803:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004806:	83 c4 2c             	add    esp,0x2c
c0004809:	89 e8                	mov    eax,ebp
c000480b:	5b                   	pop    ebx
c000480c:	5e                   	pop    esi
c000480d:	5f                   	pop    edi
c000480e:	5d                   	pop    ebp
c000480f:	c3                   	ret    

c0004810 <f_opendir>:
c0004810:	56                   	push   esi
c0004811:	b8 09 00 00 00       	mov    eax,0x9
c0004816:	53                   	push   ebx
c0004817:	83 ec 24             	sub    esp,0x24
c000481a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000481e:	85 db                	test   ebx,ebx
c0004820:	0f 84 af 00 00 00    	je     c00048d5 <f_opendir+0xc5>
c0004826:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000482a:	31 c9                	xor    ecx,ecx
c000482c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004830:	e8 7d de ff ff       	call   c00026b2 <mount_volume>
c0004835:	85 c0                	test   eax,eax
c0004837:	0f 85 92 00 00 00    	jne    c00048cf <f_opendir+0xbf>
c000483d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004841:	83 ec 0c             	sub    esp,0xc
c0004844:	89 03                	mov    DWORD PTR [ebx],eax
c0004846:	68 00 02 00 00       	push   0x200
c000484b:	e8 e4 15 00 00       	call   c0005e34 <ff_memalloc>
c0004850:	83 c4 10             	add    esp,0x10
c0004853:	89 c6                	mov    esi,eax
c0004855:	b8 11 00 00 00       	mov    eax,0x11
c000485a:	85 f6                	test   esi,esi
c000485c:	74 77                	je     c00048d5 <f_opendir+0xc5>
c000485e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004862:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004866:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004869:	89 d8                	mov    eax,ebx
c000486b:	e8 8a f3 ff ff       	call   c0003bfa <follow_path>
c0004870:	85 c0                	test   eax,eax
c0004872:	75 37                	jne    c00048ab <f_opendir+0x9b>
c0004874:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004878:	75 1c                	jne    c0004896 <f_opendir+0x86>
c000487a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000487e:	b8 05 00 00 00       	mov    eax,0x5
c0004883:	74 26                	je     c00048ab <f_opendir+0x9b>
c0004885:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004889:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000488c:	8a 00                	mov    al,BYTE PTR [eax]
c000488e:	e8 4e eb ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004893:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004896:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000489a:	31 d2                	xor    edx,edx
c000489c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00048a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00048a4:	89 d8                	mov    eax,ebx
c00048a6:	e8 8c ec ff ff       	call   c0003537 <dir_sdi>
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	83 ec 0c             	sub    esp,0xc
c00048b2:	56                   	push   esi
c00048b3:	e8 94 15 00 00       	call   c0005e4c <ff_memfree>
c00048b8:	83 c4 10             	add    esp,0x10
c00048bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048bf:	83 f8 04             	cmp    eax,0x4
c00048c2:	74 06                	je     c00048ca <f_opendir+0xba>
c00048c4:	85 c0                	test   eax,eax
c00048c6:	74 0d                	je     c00048d5 <f_opendir+0xc5>
c00048c8:	eb 05                	jmp    c00048cf <f_opendir+0xbf>
c00048ca:	b8 05 00 00 00       	mov    eax,0x5
c00048cf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048d5:	83 c4 24             	add    esp,0x24
c00048d8:	5b                   	pop    ebx
c00048d9:	5e                   	pop    esi
c00048da:	c3                   	ret    

c00048db <f_closedir>:
c00048db:	53                   	push   ebx
c00048dc:	83 ec 18             	sub    esp,0x18
c00048df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048e3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048e7:	89 d8                	mov    eax,ebx
c00048e9:	e8 be db ff ff       	call   c00024ac <validate>
c00048ee:	85 c0                	test   eax,eax
c00048f0:	75 06                	jne    c00048f8 <f_closedir+0x1d>
c00048f2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048f8:	83 c4 18             	add    esp,0x18
c00048fb:	5b                   	pop    ebx
c00048fc:	c3                   	ret    

c00048fd <f_readdir>:
c00048fd:	57                   	push   edi
c00048fe:	56                   	push   esi
c00048ff:	53                   	push   ebx
c0004900:	83 ec 20             	sub    esp,0x20
c0004903:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004907:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000490b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000490f:	89 d8                	mov    eax,ebx
c0004911:	e8 96 db ff ff       	call   c00024ac <validate>
c0004916:	85 c0                	test   eax,eax
c0004918:	75 6e                	jne    c0004988 <f_readdir+0x8b>
c000491a:	85 ff                	test   edi,edi
c000491c:	75 0b                	jne    c0004929 <f_readdir+0x2c>
c000491e:	31 d2                	xor    edx,edx
c0004920:	89 d8                	mov    eax,ebx
c0004922:	e8 10 ec ff ff       	call   c0003537 <dir_sdi>
c0004927:	eb 5f                	jmp    c0004988 <f_readdir+0x8b>
c0004929:	83 ec 0c             	sub    esp,0xc
c000492c:	68 00 02 00 00       	push   0x200
c0004931:	e8 fe 14 00 00       	call   c0005e34 <ff_memalloc>
c0004936:	83 c4 10             	add    esp,0x10
c0004939:	89 c6                	mov    esi,eax
c000493b:	b8 11 00 00 00       	mov    eax,0x11
c0004940:	85 f6                	test   esi,esi
c0004942:	74 44                	je     c0004988 <f_readdir+0x8b>
c0004944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004948:	31 d2                	xor    edx,edx
c000494a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000494d:	89 d8                	mov    eax,ebx
c000494f:	e8 dd ef ff ff       	call   c0003931 <dir_read>
c0004954:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004959:	75 19                	jne    c0004974 <f_readdir+0x77>
c000495b:	89 fa                	mov    edx,edi
c000495d:	89 d8                	mov    eax,ebx
c000495f:	e8 7c e8 ff ff       	call   c00031e0 <get_fileinfo>
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 d8                	mov    eax,ebx
c0004968:	e8 5a ee ff ff       	call   c00037c7 <dir_next>
c000496d:	83 f8 04             	cmp    eax,0x4
c0004970:	75 02                	jne    c0004974 <f_readdir+0x77>
c0004972:	31 c0                	xor    eax,eax
c0004974:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004978:	83 ec 0c             	sub    esp,0xc
c000497b:	56                   	push   esi
c000497c:	e8 cb 14 00 00       	call   c0005e4c <ff_memfree>
c0004981:	83 c4 10             	add    esp,0x10
c0004984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004988:	83 c4 20             	add    esp,0x20
c000498b:	5b                   	pop    ebx
c000498c:	5e                   	pop    esi
c000498d:	5f                   	pop    edi
c000498e:	c3                   	ret    

c000498f <f_stat>:
c000498f:	57                   	push   edi
c0004990:	31 c9                	xor    ecx,ecx
c0004992:	56                   	push   esi
c0004993:	53                   	push   ebx
c0004994:	83 ec 30             	sub    esp,0x30
c0004997:	8d 44 24 40          	lea    eax,[esp+0x40]
c000499b:	89 e2                	mov    edx,esp
c000499d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00049a1:	e8 0c dd ff ff       	call   c00026b2 <mount_volume>
c00049a6:	85 c0                	test   eax,eax
c00049a8:	89 c3                	mov    ebx,eax
c00049aa:	75 59                	jne    c0004a05 <f_stat+0x76>
c00049ac:	83 ec 0c             	sub    esp,0xc
c00049af:	bb 11 00 00 00       	mov    ebx,0x11
c00049b4:	68 00 02 00 00       	push   0x200
c00049b9:	e8 76 14 00 00       	call   c0005e34 <ff_memalloc>
c00049be:	83 c4 10             	add    esp,0x10
c00049c1:	85 c0                	test   eax,eax
c00049c3:	89 c6                	mov    esi,eax
c00049c5:	74 3e                	je     c0004a05 <f_stat+0x76>
c00049c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ca:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049ce:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049d1:	89 e0                	mov    eax,esp
c00049d3:	e8 22 f2 ff ff       	call   c0003bfa <follow_path>
c00049d8:	85 c0                	test   eax,eax
c00049da:	89 c3                	mov    ebx,eax
c00049dc:	75 1b                	jne    c00049f9 <f_stat+0x6a>
c00049de:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049e3:	75 0f                	jne    c00049f4 <f_stat+0x65>
c00049e5:	85 ff                	test   edi,edi
c00049e7:	74 10                	je     c00049f9 <f_stat+0x6a>
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	89 e0                	mov    eax,esp
c00049ed:	e8 ee e7 ff ff       	call   c00031e0 <get_fileinfo>
c00049f2:	eb 05                	jmp    c00049f9 <f_stat+0x6a>
c00049f4:	bb 06 00 00 00       	mov    ebx,0x6
c00049f9:	83 ec 0c             	sub    esp,0xc
c00049fc:	56                   	push   esi
c00049fd:	e8 4a 14 00 00       	call   c0005e4c <ff_memfree>
c0004a02:	83 c4 10             	add    esp,0x10
c0004a05:	83 c4 30             	add    esp,0x30
c0004a08:	89 d8                	mov    eax,ebx
c0004a0a:	5b                   	pop    ebx
c0004a0b:	5e                   	pop    esi
c0004a0c:	5f                   	pop    edi
c0004a0d:	c3                   	ret    

c0004a0e <f_getfree>:
c0004a0e:	55                   	push   ebp
c0004a0f:	31 c9                	xor    ecx,ecx
c0004a11:	57                   	push   edi
c0004a12:	56                   	push   esi
c0004a13:	53                   	push   ebx
c0004a14:	83 ec 2c             	sub    esp,0x2c
c0004a17:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a1b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a1f:	e8 8e dc ff ff       	call   c00026b2 <mount_volume>
c0004a24:	85 c0                	test   eax,eax
c0004a26:	89 c6                	mov    esi,eax
c0004a28:	0f 85 df 00 00 00    	jne    c0004b0d <f_getfree+0xff>
c0004a2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004a32:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a36:	89 18                	mov    DWORD PTR [eax],ebx
c0004a38:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004a3b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a3e:	8d 57 fe             	lea    edx,[edi-0x2]
c0004a41:	39 d0                	cmp    eax,edx
c0004a43:	77 0b                	ja     c0004a50 <f_getfree+0x42>
c0004a45:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a49:	89 01                	mov    DWORD PTR [ecx],eax
c0004a4b:	e9 bd 00 00 00       	jmp    c0004b0d <f_getfree+0xff>
c0004a50:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004a53:	75 29                	jne    c0004a7e <f_getfree+0x70>
c0004a55:	bf 02 00 00 00       	mov    edi,0x2
c0004a5a:	31 ed                	xor    ebp,ebp
c0004a5c:	89 fa                	mov    edx,edi
c0004a5e:	89 d8                	mov    eax,ebx
c0004a60:	e8 cd e9 ff ff       	call   c0003432 <get_fat.isra.2>
c0004a65:	83 f8 ff             	cmp    eax,0xffffffff
c0004a68:	74 7d                	je     c0004ae7 <f_getfree+0xd9>
c0004a6a:	83 f8 01             	cmp    eax,0x1
c0004a6d:	74 7f                	je     c0004aee <f_getfree+0xe0>
c0004a6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a73:	83 d5 00             	adc    ebp,0x0
c0004a76:	47                   	inc    edi
c0004a77:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004a7a:	77 e0                	ja     c0004a5c <f_getfree+0x4e>
c0004a7c:	eb 79                	jmp    c0004af7 <f_getfree+0xe9>
c0004a7e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004a81:	31 ed                	xor    ebp,ebp
c0004a83:	31 db                	xor    ebx,ebx
c0004a85:	85 db                	test   ebx,ebx
c0004a87:	75 18                	jne    c0004aa1 <f_getfree+0x93>
c0004a89:	8d 42 01             	lea    eax,[edx+0x1]
c0004a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a94:	e8 bc da ff ff       	call   c0002555 <move_window>
c0004a99:	85 c0                	test   eax,eax
c0004a9b:	75 58                	jne    c0004af5 <f_getfree+0xe7>
c0004a9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004aa5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004aa9:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004aac:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004ab0:	75 13                	jne    c0004ac5 <f_getfree+0xb7>
c0004ab2:	e8 39 d5 ff ff       	call   c0001ff0 <ld_word>
c0004ab7:	0f b7 c0             	movzx  eax,ax
c0004aba:	83 f8 01             	cmp    eax,0x1
c0004abd:	83 d5 00             	adc    ebp,0x0
c0004ac0:	83 c3 02             	add    ebx,0x2
c0004ac3:	eb 13                	jmp    c0004ad8 <f_getfree+0xca>
c0004ac5:	e8 33 d5 ff ff       	call   c0001ffd <ld_dword>
c0004aca:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004acf:	83 f8 01             	cmp    eax,0x1
c0004ad2:	83 d5 00             	adc    ebp,0x0
c0004ad5:	83 c3 04             	add    ebx,0x4
c0004ad8:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004ade:	4f                   	dec    edi
c0004adf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ae3:	75 a0                	jne    c0004a85 <f_getfree+0x77>
c0004ae5:	eb 10                	jmp    c0004af7 <f_getfree+0xe9>
c0004ae7:	be 01 00 00 00       	mov    esi,0x1
c0004aec:	eb 09                	jmp    c0004af7 <f_getfree+0xe9>
c0004aee:	be 02 00 00 00       	mov    esi,0x2
c0004af3:	eb 02                	jmp    c0004af7 <f_getfree+0xe9>
c0004af5:	89 c6                	mov    esi,eax
c0004af7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004afb:	89 28                	mov    DWORD PTR [eax],ebp
c0004afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b01:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004b04:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004b07:	83 ca 01             	or     edx,0x1
c0004b0a:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004b0d:	83 c4 2c             	add    esp,0x2c
c0004b10:	89 f0                	mov    eax,esi
c0004b12:	5b                   	pop    ebx
c0004b13:	5e                   	pop    esi
c0004b14:	5f                   	pop    edi
c0004b15:	5d                   	pop    ebp
c0004b16:	c3                   	ret    

c0004b17 <f_truncate>:
c0004b17:	56                   	push   esi
c0004b18:	53                   	push   ebx
c0004b19:	83 ec 14             	sub    esp,0x14
c0004b1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b20:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b24:	89 d8                	mov    eax,ebx
c0004b26:	e8 81 d9 ff ff       	call   c00024ac <validate>
c0004b2b:	85 c0                	test   eax,eax
c0004b2d:	89 c6                	mov    esi,eax
c0004b2f:	0f 85 c4 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b35:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b39:	85 f6                	test   esi,esi
c0004b3b:	0f 85 b8 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b41:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b45:	0f 84 a9 00 00 00    	je     c0004bf4 <f_truncate+0xdd>
c0004b4b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b4e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b51:	0f 83 a2 00 00 00    	jae    c0004bf9 <f_truncate+0xe2>
c0004b57:	85 c0                	test   eax,eax
c0004b59:	75 15                	jne    c0004b70 <f_truncate+0x59>
c0004b5b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b5e:	31 c9                	xor    ecx,ecx
c0004b60:	89 d8                	mov    eax,ebx
c0004b62:	e8 d2 eb ff ff       	call   c0003739 <remove_chain>
c0004b67:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b6e:	eb 35                	jmp    c0004ba5 <f_truncate+0x8e>
c0004b70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b75:	e8 b8 e8 ff ff       	call   c0003432 <get_fat.isra.2>
c0004b7a:	89 c2                	mov    edx,eax
c0004b7c:	b8 01 00 00 00       	mov    eax,0x1
c0004b81:	83 fa ff             	cmp    edx,0xffffffff
c0004b84:	74 1f                	je     c0004ba5 <f_truncate+0x8e>
c0004b86:	83 fa 01             	cmp    edx,0x1
c0004b89:	b8 02 00 00 00       	mov    eax,0x2
c0004b8e:	74 15                	je     c0004ba5 <f_truncate+0x8e>
c0004b90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b94:	31 c0                	xor    eax,eax
c0004b96:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b99:	76 0a                	jbe    c0004ba5 <f_truncate+0x8e>
c0004b9b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b9e:	89 d8                	mov    eax,ebx
c0004ba0:	e8 94 eb ff ff       	call   c0003739 <remove_chain>
c0004ba5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ba8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004bab:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004bae:	83 ca 40             	or     edx,0x40
c0004bb1:	85 c0                	test   eax,eax
c0004bb3:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004bb6:	75 35                	jne    c0004bed <f_truncate+0xd6>
c0004bb8:	80 e2 80             	and    dl,0x80
c0004bbb:	74 3c                	je     c0004bf9 <f_truncate+0xe2>
c0004bbd:	6a 01                	push   0x1
c0004bbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004bc2:	8d 43 28             	lea    eax,[ebx+0x28]
c0004bc5:	50                   	push   eax
c0004bc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bce:	50                   	push   eax
c0004bcf:	e8 e7 d3 ff ff       	call   c0001fbb <disk_write>
c0004bd4:	83 c4 10             	add    esp,0x10
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	75 0d                	jne    c0004be8 <f_truncate+0xd1>
c0004bdb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bde:	31 f6                	xor    esi,esi
c0004be0:	83 e0 7f             	and    eax,0x7f
c0004be3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004be6:	eb 11                	jmp    c0004bf9 <f_truncate+0xe2>
c0004be8:	b8 01 00 00 00       	mov    eax,0x1
c0004bed:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	eb 05                	jmp    c0004bf9 <f_truncate+0xe2>
c0004bf4:	be 07 00 00 00       	mov    esi,0x7
c0004bf9:	83 c4 14             	add    esp,0x14
c0004bfc:	89 f0                	mov    eax,esi
c0004bfe:	5b                   	pop    ebx
c0004bff:	5e                   	pop    esi
c0004c00:	c3                   	ret    

c0004c01 <f_unlink>:
c0004c01:	55                   	push   ebp
c0004c02:	b9 02 00 00 00       	mov    ecx,0x2
c0004c07:	57                   	push   edi
c0004c08:	56                   	push   esi
c0004c09:	53                   	push   ebx
c0004c0a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004c10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c14:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004c1b:	e8 92 da ff ff       	call   c00026b2 <mount_volume>
c0004c20:	85 c0                	test   eax,eax
c0004c22:	0f 85 ee 00 00 00    	jne    c0004d16 <f_unlink+0x115>
c0004c28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c2c:	83 ec 0c             	sub    esp,0xc
c0004c2f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c33:	68 00 02 00 00       	push   0x200
c0004c38:	e8 f7 11 00 00       	call   c0005e34 <ff_memalloc>
c0004c3d:	83 c4 10             	add    esp,0x10
c0004c40:	89 c3                	mov    ebx,eax
c0004c42:	b8 11 00 00 00       	mov    eax,0x11
c0004c47:	85 db                	test   ebx,ebx
c0004c49:	0f 84 c7 00 00 00    	je     c0004d16 <f_unlink+0x115>
c0004c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c53:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c5a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c5d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c61:	e8 94 ef ff ff       	call   c0003bfa <follow_path>
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 94 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c6e:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c73:	b8 06 00 00 00       	mov    eax,0x6
c0004c78:	0f 85 84 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c7e:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c83:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c89:	74 07                	je     c0004c92 <f_unlink+0x91>
c0004c8b:	b8 07 00 00 00       	mov    eax,0x7
c0004c90:	eb 70                	jmp    c0004d02 <f_unlink+0x101>
c0004c92:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c9a:	8a 07                	mov    al,BYTE PTR [edi]
c0004c9c:	e8 40 e7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004ca1:	83 e5 10             	and    ebp,0x10
c0004ca4:	89 c6                	mov    esi,eax
c0004ca6:	75 20                	jne    c0004cc8 <f_unlink+0xc7>
c0004ca8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cac:	e8 a8 ed ff ff       	call   c0003a59 <dir_remove>
c0004cb1:	85 c0                	test   eax,eax
c0004cb3:	75 40                	jne    c0004cf5 <f_unlink+0xf4>
c0004cb5:	85 f6                	test   esi,esi
c0004cb7:	74 3c                	je     c0004cf5 <f_unlink+0xf4>
c0004cb9:	31 c9                	xor    ecx,ecx
c0004cbb:	89 f2                	mov    edx,esi
c0004cbd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc1:	e8 73 ea ff ff       	call   c0003739 <remove_chain>
c0004cc6:	eb 2d                	jmp    c0004cf5 <f_unlink+0xf4>
c0004cc8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ccc:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cd0:	31 d2                	xor    edx,edx
c0004cd2:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004cd6:	e8 5c e8 ff ff       	call   c0003537 <dir_sdi>
c0004cdb:	85 c0                	test   eax,eax
c0004cdd:	75 23                	jne    c0004d02 <f_unlink+0x101>
c0004cdf:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ce3:	31 d2                	xor    edx,edx
c0004ce5:	e8 47 ec ff ff       	call   c0003931 <dir_read>
c0004cea:	85 c0                	test   eax,eax
c0004cec:	74 9d                	je     c0004c8b <f_unlink+0x8a>
c0004cee:	83 f8 04             	cmp    eax,0x4
c0004cf1:	75 0f                	jne    c0004d02 <f_unlink+0x101>
c0004cf3:	eb b3                	jmp    c0004ca8 <f_unlink+0xa7>
c0004cf5:	85 c0                	test   eax,eax
c0004cf7:	75 09                	jne    c0004d02 <f_unlink+0x101>
c0004cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfd:	e8 88 e2 ff ff       	call   c0002f8a <sync_fs>
c0004d02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d06:	83 ec 0c             	sub    esp,0xc
c0004d09:	53                   	push   ebx
c0004d0a:	e8 3d 11 00 00       	call   c0005e4c <ff_memfree>
c0004d0f:	83 c4 10             	add    esp,0x10
c0004d12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d16:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	5f                   	pop    edi
c0004d1f:	5d                   	pop    ebp
c0004d20:	c3                   	ret    

c0004d21 <f_mkdir>:
c0004d21:	57                   	push   edi
c0004d22:	b9 02 00 00 00       	mov    ecx,0x2
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	83 ec 50             	sub    esp,0x50
c0004d2c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d30:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d34:	e8 79 d9 ff ff       	call   c00026b2 <mount_volume>
c0004d39:	85 c0                	test   eax,eax
c0004d3b:	89 c3                	mov    ebx,eax
c0004d3d:	0f 85 70 01 00 00    	jne    c0004eb3 <f_mkdir+0x192>
c0004d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d47:	83 ec 0c             	sub    esp,0xc
c0004d4a:	bb 11 00 00 00       	mov    ebx,0x11
c0004d4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d53:	68 00 02 00 00       	push   0x200
c0004d58:	e8 d7 10 00 00       	call   c0005e34 <ff_memalloc>
c0004d5d:	83 c4 10             	add    esp,0x10
c0004d60:	85 c0                	test   eax,eax
c0004d62:	89 c7                	mov    edi,eax
c0004d64:	0f 84 49 01 00 00    	je     c0004eb3 <f_mkdir+0x192>
c0004d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d72:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d75:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d79:	e8 7c ee ff ff       	call   c0003bfa <follow_path>
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	89 c3                	mov    ebx,eax
c0004d82:	74 3e                	je     c0004dc2 <f_mkdir+0xa1>
c0004d84:	83 f8 04             	cmp    eax,0x4
c0004d87:	75 3e                	jne    c0004dc7 <f_mkdir+0xa6>
c0004d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8d:	31 d2                	xor    edx,edx
c0004d8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d93:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d97:	e8 63 e8 ff ff       	call   c00035ff <create_chain>
c0004d9c:	85 c0                	test   eax,eax
c0004d9e:	89 c6                	mov    esi,eax
c0004da0:	74 0c                	je     c0004dae <f_mkdir+0x8d>
c0004da2:	83 f8 01             	cmp    eax,0x1
c0004da5:	bb 02 00 00 00       	mov    ebx,0x2
c0004daa:	74 07                	je     c0004db3 <f_mkdir+0x92>
c0004dac:	eb 2a                	jmp    c0004dd8 <f_mkdir+0xb7>
c0004dae:	bb 07 00 00 00       	mov    ebx,0x7
c0004db3:	31 c9                	xor    ecx,ecx
c0004db5:	89 f2                	mov    edx,esi
c0004db7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004dbb:	e8 79 e9 ff ff       	call   c0003739 <remove_chain>
c0004dc0:	eb 05                	jmp    c0004dc7 <f_mkdir+0xa6>
c0004dc2:	bb 08 00 00 00       	mov    ebx,0x8
c0004dc7:	83 ec 0c             	sub    esp,0xc
c0004dca:	57                   	push   edi
c0004dcb:	e8 7c 10 00 00       	call   c0005e4c <ff_memfree>
c0004dd0:	83 c4 10             	add    esp,0x10
c0004dd3:	e9 db 00 00 00       	jmp    c0004eb3 <f_mkdir+0x192>
c0004dd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004ddb:	bb 01 00 00 00       	mov    ebx,0x1
c0004de0:	74 d1                	je     c0004db3 <f_mkdir+0x92>
c0004de2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de6:	89 f2                	mov    edx,esi
c0004de8:	e8 19 dd ff ff       	call   c0002b06 <dir_clear>
c0004ded:	85 c0                	test   eax,eax
c0004def:	89 c3                	mov    ebx,eax
c0004df1:	75 c0                	jne    c0004db3 <f_mkdir+0x92>
c0004df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004dfc:	ba 20 00 00 00       	mov    edx,0x20
c0004e01:	83 c0 34             	add    eax,0x34
c0004e04:	e8 28 d2 ff ff       	call   c0002031 <mem_set>
c0004e09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e12:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004e16:	83 c0 4a             	add    eax,0x4a
c0004e19:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004e1d:	e8 f7 d1 ff ff       	call   c0002019 <st_dword>
c0004e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e26:	89 f1                	mov    ecx,esi
c0004e28:	8d 50 34             	lea    edx,[eax+0x34]
c0004e2b:	e8 da e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e34:	b9 20 00 00 00       	mov    ecx,0x20
c0004e39:	8d 50 34             	lea    edx,[eax+0x34]
c0004e3c:	83 c0 54             	add    eax,0x54
c0004e3f:	e8 d8 d1 ff ff       	call   c000201c <mem_cpy>
c0004e44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e48:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e4c:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e50:	8d 50 54             	lea    edx,[eax+0x54]
c0004e53:	e8 b2 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e60:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e64:	e8 2e ee ff ff       	call   c0003c97 <dir_register>
c0004e69:	85 c0                	test   eax,eax
c0004e6b:	89 c3                	mov    ebx,eax
c0004e6d:	0f 85 40 ff ff ff    	jne    c0004db3 <f_mkdir+0x92>
c0004e73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e77:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e7c:	83 c0 16             	add    eax,0x16
c0004e7f:	e8 95 d1 ff ff       	call   c0002019 <st_dword>
c0004e84:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e88:	89 f1                	mov    ecx,esi
c0004e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8e:	e8 77 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e97:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e9f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ea3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ea7:	e8 de e0 ff ff       	call   c0002f8a <sync_fs>
c0004eac:	89 c3                	mov    ebx,eax
c0004eae:	e9 14 ff ff ff       	jmp    c0004dc7 <f_mkdir+0xa6>
c0004eb3:	83 c4 50             	add    esp,0x50
c0004eb6:	89 d8                	mov    eax,ebx
c0004eb8:	5b                   	pop    ebx
c0004eb9:	5e                   	pop    esi
c0004eba:	5f                   	pop    edi
c0004ebb:	c3                   	ret    

c0004ebc <f_rename>:
c0004ebc:	57                   	push   edi
c0004ebd:	56                   	push   esi
c0004ebe:	53                   	push   ebx
c0004ebf:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ec5:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ecc:	e8 8f d5 ff ff       	call   c0002460 <get_ldnumber>
c0004ed1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ed5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eda:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ee1:	e8 cc d7 ff ff       	call   c00026b2 <mount_volume>
c0004ee6:	85 c0                	test   eax,eax
c0004ee8:	0f 85 7c 01 00 00    	jne    c000506a <f_rename+0x1ae>
c0004eee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef2:	83 ec 0c             	sub    esp,0xc
c0004ef5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ef9:	68 00 02 00 00       	push   0x200
c0004efe:	e8 31 0f 00 00       	call   c0005e34 <ff_memalloc>
c0004f03:	83 c4 10             	add    esp,0x10
c0004f06:	89 c6                	mov    esi,eax
c0004f08:	b8 11 00 00 00       	mov    eax,0x11
c0004f0d:	85 f6                	test   esi,esi
c0004f0f:	0f 84 55 01 00 00    	je     c000506a <f_rename+0x1ae>
c0004f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f19:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f20:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f23:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f27:	e8 ce ec ff ff       	call   c0003bfa <follow_path>
c0004f2c:	85 c0                	test   eax,eax
c0004f2e:	0f 85 22 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f34:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f38:	b8 06 00 00 00       	mov    eax,0x6
c0004f3d:	80 e2 a0             	and    dl,0xa0
c0004f40:	0f 85 10 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f4e:	b9 20 00 00 00       	mov    ecx,0x20
c0004f53:	e8 c4 d0 ff ff       	call   c000201c <mem_cpy>
c0004f58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f5c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f65:	e8 b2 d0 ff ff       	call   c000201c <mem_cpy>
c0004f6a:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f71:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f75:	e8 80 ec ff ff       	call   c0003bfa <follow_path>
c0004f7a:	85 c0                	test   eax,eax
c0004f7c:	75 20                	jne    c0004f9e <f_rename+0xe2>
c0004f7e:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f82:	b8 08 00 00 00       	mov    eax,0x8
c0004f87:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f8b:	0f 85 c5 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f91:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f95:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f9c:	eb 03                	jmp    c0004fa1 <f_rename+0xe5>
c0004f9e:	83 f8 04             	cmp    eax,0x4
c0004fa1:	0f 85 af 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fa7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fab:	e8 e7 ec ff ff       	call   c0003c97 <dir_register>
c0004fb0:	85 c0                	test   eax,eax
c0004fb2:	0f 85 9e 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fb8:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fbf:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004fc3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fc8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fcb:	e8 4c d0 ff ff       	call   c000201c <mem_cpy>
c0004fd0:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fd4:	a8 10                	test   al,0x10
c0004fd6:	75 03                	jne    c0004fdb <f_rename+0x11f>
c0004fd8:	83 c8 20             	or     eax,0x20
c0004fdb:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fe2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fe6:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fea:	74 54                	je     c0005040 <f_rename+0x184>
c0004fec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004ff0:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004ff4:	74 4a                	je     c0005040 <f_rename+0x184>
c0004ff6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ffa:	89 da                	mov    edx,ebx
c0004ffc:	8a 07                	mov    al,BYTE PTR [edi]
c0004ffe:	e8 de e3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0005003:	89 c2                	mov    edx,eax
c0005005:	89 f8                	mov    eax,edi
c0005007:	e8 3a d2 ff ff       	call   c0002246 <clst2sect>
c000500c:	89 c2                	mov    edx,eax
c000500e:	b8 02 00 00 00       	mov    eax,0x2
c0005013:	85 d2                	test   edx,edx
c0005015:	74 3f                	je     c0005056 <f_rename+0x19a>
c0005017:	89 f8                	mov    eax,edi
c0005019:	e8 37 d5 ff ff       	call   c0002555 <move_window>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 34                	jne    c0005056 <f_rename+0x19a>
c0005022:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005026:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000502a:	75 14                	jne    c0005040 <f_rename+0x184>
c000502c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005030:	8d 50 54             	lea    edx,[eax+0x54]
c0005033:	e8 d2 e3 ff ff       	call   c000340a <st_clust.isra.1>
c0005038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000503c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005040:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005044:	e8 10 ea ff ff       	call   c0003a59 <dir_remove>
c0005049:	85 c0                	test   eax,eax
c000504b:	75 09                	jne    c0005056 <f_rename+0x19a>
c000504d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005051:	e8 34 df ff ff       	call   c0002f8a <sync_fs>
c0005056:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000505a:	83 ec 0c             	sub    esp,0xc
c000505d:	56                   	push   esi
c000505e:	e8 e9 0d 00 00       	call   c0005e4c <ff_memfree>
c0005063:	83 c4 10             	add    esp,0x10
c0005066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000506a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005070:	5b                   	pop    ebx
c0005071:	5e                   	pop    esi
c0005072:	5f                   	pop    edi
c0005073:	c3                   	ret    

c0005074 <f_chmod>:
c0005074:	57                   	push   edi
c0005075:	b9 02 00 00 00       	mov    ecx,0x2
c000507a:	56                   	push   esi
c000507b:	53                   	push   ebx
c000507c:	83 ec 50             	sub    esp,0x50
c000507f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005083:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005087:	8d 44 24 60          	lea    eax,[esp+0x60]
c000508b:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000508f:	e8 1e d6 ff ff       	call   c00026b2 <mount_volume>
c0005094:	85 c0                	test   eax,eax
c0005096:	0f 85 81 00 00 00    	jne    c000511d <f_chmod+0xa9>
c000509c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a0:	83 ec 0c             	sub    esp,0xc
c00050a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00050a7:	68 00 02 00 00       	push   0x200
c00050ac:	e8 83 0d 00 00       	call   c0005e34 <ff_memalloc>
c00050b1:	83 c4 10             	add    esp,0x10
c00050b4:	89 c6                	mov    esi,eax
c00050b6:	b8 11 00 00 00       	mov    eax,0x11
c00050bb:	85 f6                	test   esi,esi
c00050bd:	74 5e                	je     c000511d <f_chmod+0xa9>
c00050bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050c3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ca:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050ce:	e8 27 eb ff ff       	call   c0003bfa <follow_path>
c00050d3:	85 c0                	test   eax,eax
c00050d5:	75 32                	jne    c0005109 <f_chmod+0x95>
c00050d7:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050db:	b8 06 00 00 00       	mov    eax,0x6
c00050e0:	80 e2 a0             	and    dl,0xa0
c00050e3:	75 24                	jne    c0005109 <f_chmod+0x95>
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050ec:	31 d7                	xor    edi,edx
c00050ee:	21 fb                	and    ebx,edi
c00050f0:	83 e3 27             	and    ebx,0x27
c00050f3:	31 d3                	xor    ebx,edx
c00050f5:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050fc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005104:	e8 81 de ff ff       	call   c0002f8a <sync_fs>
c0005109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000510d:	83 ec 0c             	sub    esp,0xc
c0005110:	56                   	push   esi
c0005111:	e8 36 0d 00 00       	call   c0005e4c <ff_memfree>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000511d:	83 c4 50             	add    esp,0x50
c0005120:	5b                   	pop    ebx
c0005121:	5e                   	pop    esi
c0005122:	5f                   	pop    edi
c0005123:	c3                   	ret    

c0005124 <f_utime>:
c0005124:	56                   	push   esi
c0005125:	b9 02 00 00 00       	mov    ecx,0x2
c000512a:	53                   	push   ebx
c000512b:	83 ec 54             	sub    esp,0x54
c000512e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005132:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005136:	8d 44 24 60          	lea    eax,[esp+0x60]
c000513a:	e8 73 d5 ff ff       	call   c00026b2 <mount_volume>
c000513f:	85 c0                	test   eax,eax
c0005141:	0f 85 87 00 00 00    	jne    c00051ce <f_utime+0xaa>
c0005147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000514b:	83 ec 0c             	sub    esp,0xc
c000514e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005152:	68 00 02 00 00       	push   0x200
c0005157:	e8 d8 0c 00 00       	call   c0005e34 <ff_memalloc>
c000515c:	83 c4 10             	add    esp,0x10
c000515f:	89 c3                	mov    ebx,eax
c0005161:	b8 11 00 00 00       	mov    eax,0x11
c0005166:	85 db                	test   ebx,ebx
c0005168:	74 64                	je     c00051ce <f_utime+0xaa>
c000516a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005172:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005175:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005179:	e8 7c ea ff ff       	call   c0003bfa <follow_path>
c000517e:	85 c0                	test   eax,eax
c0005180:	75 38                	jne    c00051ba <f_utime+0x96>
c0005182:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005186:	b8 06 00 00 00       	mov    eax,0x6
c000518b:	80 e2 a0             	and    dl,0xa0
c000518e:	75 2a                	jne    c00051ba <f_utime+0x96>
c0005190:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005194:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005198:	c1 e2 10             	shl    edx,0x10
c000519b:	09 c2                	or     edx,eax
c000519d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00051a1:	83 c0 16             	add    eax,0x16
c00051a4:	e8 70 ce ff ff       	call   c0002019 <st_dword>
c00051a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ad:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b5:	e8 d0 dd ff ff       	call   c0002f8a <sync_fs>
c00051ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051be:	83 ec 0c             	sub    esp,0xc
c00051c1:	53                   	push   ebx
c00051c2:	e8 85 0c 00 00       	call   c0005e4c <ff_memfree>
c00051c7:	83 c4 10             	add    esp,0x10
c00051ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051ce:	83 c4 54             	add    esp,0x54
c00051d1:	5b                   	pop    ebx
c00051d2:	5e                   	pop    esi
c00051d3:	c3                   	ret    

c00051d4 <f_getlabel>:
c00051d4:	55                   	push   ebp
c00051d5:	31 c9                	xor    ecx,ecx
c00051d7:	57                   	push   edi
c00051d8:	56                   	push   esi
c00051d9:	53                   	push   ebx
c00051da:	83 ec 5c             	sub    esp,0x5c
c00051dd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051e1:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c00051e5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051e9:	e8 c4 d4 ff ff       	call   c00026b2 <mount_volume>
c00051ee:	85 c0                	test   eax,eax
c00051f0:	89 c3                	mov    ebx,eax
c00051f2:	0f 85 d9 00 00 00    	jne    c00052d1 <f_getlabel+0xfd>
c00051f8:	85 ff                	test   edi,edi
c00051fa:	0f 84 d1 00 00 00    	je     c00052d1 <f_getlabel+0xfd>
c0005200:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000520c:	31 d2                	xor    edx,edx
c000520e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005216:	e8 1c e3 ff ff       	call   c0003537 <dir_sdi>
c000521b:	85 c0                	test   eax,eax
c000521d:	89 c3                	mov    ebx,eax
c000521f:	0f 85 a2 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c0005225:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005229:	ba 01 00 00 00       	mov    edx,0x1
c000522e:	e8 fe e6 ff ff       	call   c0003931 <dir_read>
c0005233:	85 c0                	test   eax,eax
c0005235:	89 c3                	mov    ebx,eax
c0005237:	0f 85 8a 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c000523d:	31 f6                	xor    esi,esi
c000523f:	31 d2                	xor    edx,edx
c0005241:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005245:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000524c:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c0005250:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005255:	89 c8                	mov    eax,ecx
c0005257:	e8 13 ce ff ff       	call   c000206f <dbc_1st>
c000525c:	85 c0                	test   eax,eax
c000525e:	74 19                	je     c0005279 <f_getlabel+0xa5>
c0005260:	83 fd 0b             	cmp    ebp,0xb
c0005263:	74 14                	je     c0005279 <f_getlabel+0xa5>
c0005265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005269:	c1 e1 08             	shl    ecx,0x8
c000526c:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0005270:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005273:	09 c1                	or     ecx,eax
c0005275:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005279:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000527e:	52                   	push   edx
c000527f:	52                   	push   edx
c0005280:	68 b5 01 00 00       	push   0x1b5
c0005285:	50                   	push   eax
c0005286:	e8 75 0c 00 00       	call   c0005f00 <ff_oem2uni>
c000528b:	83 c4 10             	add    esp,0x10
c000528e:	0f b7 c0             	movzx  eax,ax
c0005291:	85 c0                	test   eax,eax
c0005293:	74 1f                	je     c00052b4 <f_getlabel+0xe0>
c0005295:	8d 14 37             	lea    edx,[edi+esi*1]
c0005298:	b9 04 00 00 00       	mov    ecx,0x4
c000529d:	e8 ab ce ff ff       	call   c000214d <put_utf>
c00052a2:	0f b6 c0             	movzx  eax,al
c00052a5:	85 c0                	test   eax,eax
c00052a7:	74 0b                	je     c00052b4 <f_getlabel+0xe0>
c00052a9:	01 c6                	add    esi,eax
c00052ab:	83 fd 0b             	cmp    ebp,0xb
c00052ae:	74 06                	je     c00052b6 <f_getlabel+0xe2>
c00052b0:	89 ea                	mov    edx,ebp
c00052b2:	eb 8d                	jmp    c0005241 <f_getlabel+0x6d>
c00052b4:	31 f6                	xor    esi,esi
c00052b6:	01 fe                	add    esi,edi
c00052b8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00052bb:	39 f7                	cmp    edi,esi
c00052bd:	74 12                	je     c00052d1 <f_getlabel+0xfd>
c00052bf:	4e                   	dec    esi
c00052c0:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00052c3:	74 f3                	je     c00052b8 <f_getlabel+0xe4>
c00052c5:	eb 0a                	jmp    c00052d1 <f_getlabel+0xfd>
c00052c7:	83 fb 04             	cmp    ebx,0x4
c00052ca:	75 05                	jne    c00052d1 <f_getlabel+0xfd>
c00052cc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00052cf:	31 db                	xor    ebx,ebx
c00052d1:	85 db                	test   ebx,ebx
c00052d3:	75 49                	jne    c000531e <f_getlabel+0x14a>
c00052d5:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052da:	74 42                	je     c000531e <f_getlabel+0x14a>
c00052dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052e3:	e8 6d d2 ff ff       	call   c0002555 <move_window>
c00052e8:	85 c0                	test   eax,eax
c00052ea:	89 c3                	mov    ebx,eax
c00052ec:	75 30                	jne    c000531e <f_getlabel+0x14a>
c00052ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052f2:	b8 43 00 00 00       	mov    eax,0x43
c00052f7:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052fa:	83 f9 03             	cmp    ecx,0x3
c00052fd:	74 10                	je     c000530f <f_getlabel+0x13b>
c00052ff:	83 f9 04             	cmp    ecx,0x4
c0005302:	b8 64 00 00 00       	mov    eax,0x64
c0005307:	b9 27 00 00 00       	mov    ecx,0x27
c000530c:	0f 45 c1             	cmovne eax,ecx
c000530f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005313:	e8 e5 cc ff ff       	call   c0001ffd <ld_dword>
c0005318:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000531c:	89 07                	mov    DWORD PTR [edi],eax
c000531e:	83 c4 5c             	add    esp,0x5c
c0005321:	89 d8                	mov    eax,ebx
c0005323:	5b                   	pop    ebx
c0005324:	5e                   	pop    esi
c0005325:	5f                   	pop    edi
c0005326:	5d                   	pop    ebp
c0005327:	c3                   	ret    

c0005328 <f_setlabel>:
c0005328:	57                   	push   edi
c0005329:	b9 02 00 00 00       	mov    ecx,0x2
c000532e:	56                   	push   esi
c000532f:	53                   	push   ebx
c0005330:	83 ec 50             	sub    esp,0x50
c0005333:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005337:	8d 44 24 60          	lea    eax,[esp+0x60]
c000533b:	e8 72 d3 ff ff       	call   c00026b2 <mount_volume>
c0005340:	85 c0                	test   eax,eax
c0005342:	89 c6                	mov    esi,eax
c0005344:	0f 85 65 01 00 00    	jne    c00054af <f_setlabel+0x187>
c000534a:	b9 0b 00 00 00       	mov    ecx,0xb
c000534f:	ba 20 00 00 00       	mov    edx,0x20
c0005354:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005358:	31 db                	xor    ebx,ebx
c000535a:	e8 d2 cc ff ff       	call   c0002031 <mem_set>
c000535f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005363:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005366:	76 5d                	jbe    c00053c5 <f_setlabel+0x9d>
c0005368:	8d 44 24 60          	lea    eax,[esp+0x60]
c000536c:	e8 04 cd ff ff       	call   c0002075 <tchar2uni>
c0005371:	3d ff ff 00 00       	cmp    eax,0xffff
c0005376:	76 0a                	jbe    c0005382 <f_setlabel+0x5a>
c0005378:	be 06 00 00 00       	mov    esi,0x6
c000537d:	e9 2d 01 00 00       	jmp    c00054af <f_setlabel+0x187>
c0005382:	83 ec 0c             	sub    esp,0xc
c0005385:	50                   	push   eax
c0005386:	e8 ed 0b 00 00       	call   c0005f78 <ff_wtoupper>
c000538b:	5a                   	pop    edx
c000538c:	59                   	pop    ecx
c000538d:	68 b5 01 00 00       	push   0x1b5
c0005392:	50                   	push   eax
c0005393:	e8 cc 0a 00 00       	call   c0005e64 <ff_uni2oem>
c0005398:	83 c4 10             	add    esp,0x10
c000539b:	0f b7 f0             	movzx  esi,ax
c000539e:	85 f6                	test   esi,esi
c00053a0:	89 f7                	mov    edi,esi
c00053a2:	74 d4                	je     c0005378 <f_setlabel+0x50>
c00053a4:	89 f2                	mov    edx,esi
c00053a6:	b8 50 82 02 c0       	mov    eax,0xc0028250
c00053ab:	e8 ae cc ff ff       	call   c000205e <chk_chr>
c00053b0:	85 c0                	test   eax,eax
c00053b2:	75 c4                	jne    c0005378 <f_setlabel+0x50>
c00053b4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00053ba:	0f 87 c9 00 00 00    	ja     c0005489 <f_setlabel+0x161>
c00053c0:	e9 e0 00 00 00       	jmp    c00054a5 <f_setlabel+0x17d>
c00053c5:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ca:	74 ac                	je     c0005378 <f_setlabel+0x50>
c00053cc:	85 db                	test   ebx,ebx
c00053ce:	74 0e                	je     c00053de <f_setlabel+0xb6>
c00053d0:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053d5:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053d8:	75 04                	jne    c00053de <f_setlabel+0xb6>
c00053da:	89 c3                	mov    ebx,eax
c00053dc:	eb ee                	jmp    c00053cc <f_setlabel+0xa4>
c00053de:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053ea:	31 d2                	xor    edx,edx
c00053ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053f4:	e8 3e e1 ff ff       	call   c0003537 <dir_sdi>
c00053f9:	85 c0                	test   eax,eax
c00053fb:	89 c6                	mov    esi,eax
c00053fd:	0f 85 ac 00 00 00    	jne    c00054af <f_setlabel+0x187>
c0005403:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005407:	ba 01 00 00 00       	mov    edx,0x1
c000540c:	e8 20 e5 ff ff       	call   c0003931 <dir_read>
c0005411:	85 c0                	test   eax,eax
c0005413:	75 18                	jne    c000542d <f_setlabel+0x105>
c0005415:	85 db                	test   ebx,ebx
c0005417:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000541b:	74 0b                	je     c0005428 <f_setlabel+0x100>
c000541d:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005421:	b9 0b 00 00 00       	mov    ecx,0xb
c0005426:	eb 47                	jmp    c000546f <f_setlabel+0x147>
c0005428:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000542b:	eb 47                	jmp    c0005474 <f_setlabel+0x14c>
c000542d:	83 f8 04             	cmp    eax,0x4
c0005430:	75 53                	jne    c0005485 <f_setlabel+0x15d>
c0005432:	85 db                	test   ebx,ebx
c0005434:	74 79                	je     c00054af <f_setlabel+0x187>
c0005436:	8d 44 24 20          	lea    eax,[esp+0x20]
c000543a:	ba 01 00 00 00       	mov    edx,0x1
c000543f:	e8 88 e4 ff ff       	call   c00038cc <dir_alloc>
c0005444:	85 c0                	test   eax,eax
c0005446:	89 c6                	mov    esi,eax
c0005448:	75 65                	jne    c00054af <f_setlabel+0x187>
c000544a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000544e:	b9 20 00 00 00       	mov    ecx,0x20
c0005453:	31 d2                	xor    edx,edx
c0005455:	e8 d7 cb ff ff       	call   c0002031 <mem_set>
c000545a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000545e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005463:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005467:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000546b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000546f:	e8 a8 cb ff ff       	call   c000201c <mem_cpy>
c0005474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005478:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000547c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005480:	e8 05 db ff ff       	call   c0002f8a <sync_fs>
c0005485:	89 c6                	mov    esi,eax
c0005487:	eb 26                	jmp    c00054af <f_setlabel+0x187>
c0005489:	83 fb 09             	cmp    ebx,0x9
c000548c:	0f 87 e6 fe ff ff    	ja     c0005378 <f_setlabel+0x50>
c0005492:	89 f0                	mov    eax,esi
c0005494:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005498:	43                   	inc    ebx
c0005499:	89 f8                	mov    eax,edi
c000549b:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000549f:	43                   	inc    ebx
c00054a0:	e9 ba fe ff ff       	jmp    c000535f <f_setlabel+0x37>
c00054a5:	83 fb 0a             	cmp    ebx,0xa
c00054a8:	76 ef                	jbe    c0005499 <f_setlabel+0x171>
c00054aa:	e9 c9 fe ff ff       	jmp    c0005378 <f_setlabel+0x50>
c00054af:	83 c4 50             	add    esp,0x50
c00054b2:	89 f0                	mov    eax,esi
c00054b4:	5b                   	pop    ebx
c00054b5:	5e                   	pop    esi
c00054b6:	5f                   	pop    edi
c00054b7:	c3                   	ret    

c00054b8 <f_expand>:
c00054b8:	55                   	push   ebp
c00054b9:	57                   	push   edi
c00054ba:	56                   	push   esi
c00054bb:	53                   	push   ebx
c00054bc:	83 ec 2c             	sub    esp,0x2c
c00054bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054c7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054cf:	89 d8                	mov    eax,ebx
c00054d1:	e8 d6 cf ff ff       	call   c00024ac <validate>
c00054d6:	85 c0                	test   eax,eax
c00054d8:	89 c6                	mov    esi,eax
c00054da:	0f 85 3b 01 00 00    	jne    c000561b <f_expand+0x163>
c00054e0:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054e4:	85 f6                	test   esi,esi
c00054e6:	0f 85 2f 01 00 00    	jne    c000561b <f_expand+0x163>
c00054ec:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054f1:	75 0a                	jne    c00054fd <f_expand+0x45>
c00054f3:	be 07 00 00 00       	mov    esi,0x7
c00054f8:	e9 1e 01 00 00       	jmp    c000561b <f_expand+0x163>
c00054fd:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005501:	75 f0                	jne    c00054f3 <f_expand+0x3b>
c0005503:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005507:	74 ea                	je     c00054f3 <f_expand+0x3b>
c0005509:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000550d:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005511:	c1 e7 09             	shl    edi,0x9
c0005514:	8d 47 ff             	lea    eax,[edi-0x1]
c0005517:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000551b:	0f 95 c0             	setne  al
c000551e:	31 d2                	xor    edx,edx
c0005520:	0f b6 c0             	movzx  eax,al
c0005523:	89 c5                	mov    ebp,eax
c0005525:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005529:	f7 f7                	div    edi
c000552b:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000552e:	01 e8                	add    eax,ebp
c0005530:	83 ff 01             	cmp    edi,0x1
c0005533:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005537:	76 05                	jbe    c000553e <f_expand+0x86>
c0005539:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000553c:	77 05                	ja     c0005543 <f_expand+0x8b>
c000553e:	bf 02 00 00 00       	mov    edi,0x2
c0005543:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005546:	89 fd                	mov    ebp,edi
c0005548:	31 c9                	xor    ecx,ecx
c000554a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000554e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005550:	89 ea                	mov    edx,ebp
c0005552:	45                   	inc    ebp
c0005553:	e8 da de ff ff       	call   c0003432 <get_fat.isra.2>
c0005558:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000555c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005560:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005563:	77 05                	ja     c000556a <f_expand+0xb2>
c0005565:	bd 02 00 00 00       	mov    ebp,0x2
c000556a:	83 f8 01             	cmp    eax,0x1
c000556d:	74 20                	je     c000558f <f_expand+0xd7>
c000556f:	83 f8 ff             	cmp    eax,0xffffffff
c0005572:	74 25                	je     c0005599 <f_expand+0xe1>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 09                	jne    c0005581 <f_expand+0xc9>
c0005578:	41                   	inc    ecx
c0005579:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000557d:	75 07                	jne    c0005586 <f_expand+0xce>
c000557f:	eb 1f                	jmp    c00055a0 <f_expand+0xe8>
c0005581:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005584:	31 c9                	xor    ecx,ecx
c0005586:	39 fd                	cmp    ebp,edi
c0005588:	75 c0                	jne    c000554a <f_expand+0x92>
c000558a:	e9 64 ff ff ff       	jmp    c00054f3 <f_expand+0x3b>
c000558f:	be 02 00 00 00       	mov    esi,0x2
c0005594:	e9 82 00 00 00       	jmp    c000561b <f_expand+0x163>
c0005599:	be 01 00 00 00       	mov    esi,0x1
c000559e:	eb 7b                	jmp    c000561b <f_expand+0x163>
c00055a0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055a5:	74 2b                	je     c00055d2 <f_expand+0x11a>
c00055a7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00055aa:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00055ae:	85 ed                	test   ebp,ebp
c00055b0:	74 24                	je     c00055d6 <f_expand+0x11e>
c00055b2:	83 c9 ff             	or     ecx,0xffffffff
c00055b5:	83 fd 01             	cmp    ebp,0x1
c00055b8:	74 03                	je     c00055bd <f_expand+0x105>
c00055ba:	8d 4f 01             	lea    ecx,[edi+0x1]
c00055bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c1:	89 fa                	mov    edx,edi
c00055c3:	e8 e7 d3 ff ff       	call   c00029af <put_fat>
c00055c8:	85 c0                	test   eax,eax
c00055ca:	75 4d                	jne    c0005619 <f_expand+0x161>
c00055cc:	89 f8                	mov    eax,edi
c00055ce:	4d                   	dec    ebp
c00055cf:	47                   	inc    edi
c00055d0:	eb dc                	jmp    c00055ae <f_expand+0xf6>
c00055d2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055d5:	48                   	dec    eax
c00055d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055da:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055df:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055e2:	74 37                	je     c000561b <f_expand+0x163>
c00055e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055ee:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055f1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055f4:	83 c8 40             	or     eax,0x40
c00055f7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055fa:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055fd:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005600:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005603:	39 c8                	cmp    eax,ecx
c0005605:	77 14                	ja     c000561b <f_expand+0x163>
c0005607:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000560b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000560e:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005611:	83 c8 01             	or     eax,0x1
c0005614:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005617:	eb 02                	jmp    c000561b <f_expand+0x163>
c0005619:	89 c6                	mov    esi,eax
c000561b:	83 c4 2c             	add    esp,0x2c
c000561e:	89 f0                	mov    eax,esi
c0005620:	5b                   	pop    ebx
c0005621:	5e                   	pop    esi
c0005622:	5f                   	pop    edi
c0005623:	5d                   	pop    ebp
c0005624:	c3                   	ret    

c0005625 <f_mkfs>:
c0005625:	55                   	push   ebp
c0005626:	57                   	push   edi
c0005627:	56                   	push   esi
c0005628:	be 0b 00 00 00       	mov    esi,0xb
c000562d:	53                   	push   ebx
c000562e:	83 ec 5c             	sub    esp,0x5c
c0005631:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005635:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005639:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000563d:	e8 1e ce ff ff       	call   c0002460 <get_ldnumber>
c0005642:	85 c0                	test   eax,eax
c0005644:	0f 88 e0 07 00 00    	js     c0005e2a <f_mkfs+0x805>
c000564a:	8b 14 85 a0 f4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0b60]
c0005651:	85 d2                	test   edx,edx
c0005653:	74 03                	je     c0005658 <f_mkfs+0x33>
c0005655:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005658:	85 db                	test   ebx,ebx
c000565a:	75 05                	jne    c0005661 <f_mkfs+0x3c>
c000565c:	bb 40 82 02 c0       	mov    ebx,0xc0028240
c0005661:	0f b6 c0             	movzx  eax,al
c0005664:	83 ec 0c             	sub    esp,0xc
c0005667:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000566b:	be 03 00 00 00       	mov    esi,0x3
c0005670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005674:	e8 29 c9 ff ff       	call   c0001fa2 <disk_initialize>
c0005679:	83 c4 10             	add    esp,0x10
c000567c:	a8 01                	test   al,0x1
c000567e:	0f 85 a6 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005684:	a8 04                	test   al,0x4
c0005686:	be 0a 00 00 00       	mov    esi,0xa
c000568b:	0f 85 99 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005691:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005694:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005698:	85 c0                	test   eax,eax
c000569a:	75 20                	jne    c00056bc <f_mkfs+0x97>
c000569c:	51                   	push   ecx
c000569d:	8d 44 24 44          	lea    eax,[esp+0x44]
c00056a1:	50                   	push   eax
c00056a2:	6a 03                	push   0x3
c00056a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00056a8:	e8 24 c9 ff ff       	call   c0001fd1 <disk_ioctl>
c00056ad:	83 c4 10             	add    esp,0x10
c00056b0:	85 c0                	test   eax,eax
c00056b2:	74 08                	je     c00056bc <f_mkfs+0x97>
c00056b4:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056c0:	8d 42 ff             	lea    eax,[edx-0x1]
c00056c3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056c8:	77 04                	ja     c00056ce <f_mkfs+0xa9>
c00056ca:	85 c2                	test   edx,eax
c00056cc:	74 08                	je     c00056d6 <f_mkfs+0xb1>
c00056ce:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056d6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056d9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e1:	48                   	dec    eax
c00056e2:	3c 01                	cmp    al,0x1
c00056e4:	76 05                	jbe    c00056eb <f_mkfs+0xc6>
c00056e6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00056f2:	48                   	dec    eax
c00056f3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056f8:	77 15                	ja     c000570f <f_mkfs+0xea>
c00056fa:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c00056ff:	b8 00 02 00 00       	mov    eax,0x200
c0005704:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005709:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000570d:	eb 08                	jmp    c0005717 <f_mkfs+0xf2>
c000570f:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005717:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000571a:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005720:	77 0f                	ja     c0005731 <f_mkfs+0x10c>
c0005722:	8d 47 ff             	lea    eax,[edi-0x1]
c0005725:	85 f8                	test   eax,edi
c0005727:	b8 00 00 00 00       	mov    eax,0x0
c000572c:	0f 45 f8             	cmovne edi,eax
c000572f:	eb 02                	jmp    c0005733 <f_mkfs+0x10e>
c0005731:	31 ff                	xor    edi,edi
c0005733:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000573b:	77 0a                	ja     c0005747 <f_mkfs+0x122>
c000573d:	be 11 00 00 00       	mov    esi,0x11
c0005742:	e9 e3 06 00 00       	jmp    c0005e2a <f_mkfs+0x805>
c0005747:	85 ed                	test   ebp,ebp
c0005749:	8b 33                	mov    esi,DWORD PTR [ebx]
c000574b:	89 eb                	mov    ebx,ebp
c000574d:	75 1e                	jne    c000576d <f_mkfs+0x148>
c000574f:	83 ec 0c             	sub    esp,0xc
c0005752:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005759:	25 00 fe ff ff       	and    eax,0xfffffe00
c000575e:	50                   	push   eax
c000575f:	e8 d0 06 00 00       	call   c0005e34 <ff_memalloc>
c0005764:	83 c4 10             	add    esp,0x10
c0005767:	85 c0                	test   eax,eax
c0005769:	89 c3                	mov    ebx,eax
c000576b:	74 d0                	je     c000573d <f_mkfs+0x118>
c000576d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005775:	52                   	push   edx
c0005776:	8d 44 24 48          	lea    eax,[esp+0x48]
c000577a:	50                   	push   eax
c000577b:	6a 01                	push   0x1
c000577d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005781:	e8 4b c8 ff ff       	call   c0001fd1 <disk_ioctl>
c0005786:	83 c4 10             	add    esp,0x10
c0005789:	85 c0                	test   eax,eax
c000578b:	0f 85 42 06 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005791:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005799:	89 f0                	mov    eax,esi
c000579b:	83 e0 08             	and    eax,0x8
c000579e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00057a2:	75 18                	jne    c00057bc <f_mkfs+0x197>
c00057a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057a8:	83 f8 3f             	cmp    eax,0x3f
c00057ab:	76 0f                	jbe    c00057bc <f_mkfs+0x197>
c00057ad:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00057b5:	83 e8 3f             	sub    eax,0x3f
c00057b8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00057bc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00057c4:	83 f8 7f             	cmp    eax,0x7f
c00057c7:	0f 86 5f 02 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c00057cd:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057d3:	b9 80 00 00 00       	mov    ecx,0x80
c00057d8:	77 05                	ja     c00057df <f_mkfs+0x1ba>
c00057da:	c1 ef 09             	shr    edi,0x9
c00057dd:	89 f9                	mov    ecx,edi
c00057df:	89 f0                	mov    eax,esi
c00057e1:	89 f7                	mov    edi,esi
c00057e3:	83 e0 01             	and    eax,0x1
c00057e6:	83 e7 02             	and    edi,0x2
c00057e9:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057ed:	0f b6 c0             	movzx  eax,al
c00057f0:	74 0a                	je     c00057fc <f_mkfs+0x1d7>
c00057f2:	85 c0                	test   eax,eax
c00057f4:	0f 84 53 01 00 00    	je     c000594d <f_mkfs+0x328>
c00057fa:	eb 37                	jmp    c0005833 <f_mkfs+0x20e>
c00057fc:	85 c0                	test   eax,eax
c00057fe:	be 13 00 00 00       	mov    esi,0x13
c0005803:	75 2e                	jne    c0005833 <f_mkfs+0x20e>
c0005805:	e9 e0 05 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c000580a:	83 f8 02             	cmp    eax,0x2
c000580d:	0f 85 11 02 00 00    	jne    c0005a24 <f_mkfs+0x3ff>
c0005813:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005819:	0f 86 e8 01 00 00    	jbe    c0005a07 <f_mkfs+0x3e2>
c000581f:	85 c9                	test   ecx,ecx
c0005821:	0f 85 d5 05 00 00    	jne    c0005dfc <f_mkfs+0x7d7>
c0005827:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000582a:	83 f9 40             	cmp    ecx,0x40
c000582d:	0f 87 d9 05 00 00    	ja     c0005e0c <f_mkfs+0x7e7>
c0005833:	85 c9                	test   ecx,ecx
c0005835:	89 cf                	mov    edi,ecx
c0005837:	75 1c                	jne    c0005855 <f_mkfs+0x230>
c0005839:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000583d:	b8 20 82 02 c0       	mov    eax,0xc0028220
c0005842:	bf 01 00 00 00       	mov    edi,0x1
c0005847:	c1 ee 0c             	shr    esi,0xc
c000584a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000584d:	85 d2                	test   edx,edx
c000584f:	0f 85 67 01 00 00    	jne    c00059bc <f_mkfs+0x397>
c0005855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005859:	31 d2                	xor    edx,edx
c000585b:	f7 f7                	div    edi
c000585d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005862:	0f 86 66 01 00 00    	jbe    c00059ce <f_mkfs+0x3a9>
c0005868:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000586d:	83 c0 02             	add    eax,0x2
c0005870:	01 c0                	add    eax,eax
c0005872:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000587a:	05 ff 01 00 00       	add    eax,0x1ff
c000587f:	c1 e8 09             	shr    eax,0x9
c0005882:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000588a:	c1 e0 05             	shl    eax,0x5
c000588d:	c1 e8 09             	shr    eax,0x9
c0005890:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005894:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005899:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000589d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058a1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00058a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00058a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ad:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00058b2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00058b6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00058ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00058be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00058c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00058c6:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00058ca:	f7 d8                	neg    eax
c00058cc:	21 c6                	and    esi,eax
c00058ce:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058d3:	29 d6                	sub    esi,edx
c00058d5:	83 f8 03             	cmp    eax,0x3
c00058d8:	0f 85 03 01 00 00    	jne    c00059e1 <f_mkfs+0x3bc>
c00058de:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058e2:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058e6:	89 f8                	mov    eax,edi
c00058e8:	c1 e0 04             	shl    eax,0x4
c00058eb:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00058ef:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058f3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058f7:	0f 82 2f 01 00 00    	jb     c0005a2c <f_mkfs+0x407>
c00058fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005901:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005905:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005909:	89 c2                	mov    edx,eax
c000590b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000590f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005914:	29 c2                	sub    edx,eax
c0005916:	89 d0                	mov    eax,edx
c0005918:	31 d2                	xor    edx,edx
c000591a:	f7 f7                	div    edi
c000591c:	89 c6                	mov    esi,eax
c000591e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005923:	83 f8 03             	cmp    eax,0x3
c0005926:	0f 85 de fe ff ff    	jne    c000580a <f_mkfs+0x1e5>
c000592c:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005932:	0f 87 03 01 00 00    	ja     c0005a3b <f_mkfs+0x416>
c0005938:	85 c9                	test   ecx,ecx
c000593a:	0f 85 ec 00 00 00    	jne    c0005a2c <f_mkfs+0x407>
c0005940:	83 ff 01             	cmp    edi,0x1
c0005943:	0f 86 e3 00 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c0005949:	d1 ef                	shr    edi,1
c000594b:	89 f9                	mov    ecx,edi
c000594d:	85 c9                	test   ecx,ecx
c000594f:	89 ce                	mov    esi,ecx
c0005951:	75 25                	jne    c0005978 <f_mkfs+0x353>
c0005953:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005957:	b8 30 82 02 c0       	mov    eax,0xc0028230
c000595c:	b9 01 00 00 00       	mov    ecx,0x1
c0005961:	c1 ee 11             	shr    esi,0x11
c0005964:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005967:	85 d2                	test   edx,edx
c0005969:	74 0b                	je     c0005976 <f_mkfs+0x351>
c000596b:	83 c0 02             	add    eax,0x2
c000596e:	39 f2                	cmp    edx,esi
c0005970:	77 04                	ja     c0005976 <f_mkfs+0x351>
c0005972:	01 c9                	add    ecx,ecx
c0005974:	eb ee                	jmp    c0005964 <f_mkfs+0x33f>
c0005976:	31 f6                	xor    esi,esi
c0005978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000597c:	31 d2                	xor    edx,edx
c000597e:	f7 f1                	div    ecx
c0005980:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005987:	2d f6 ff 00 00       	sub    eax,0xfff6
c000598c:	c1 ea 09             	shr    edx,0x9
c000598f:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005994:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005998:	0f 87 8e 00 00 00    	ja     c0005a2c <f_mkfs+0x407>
c000599e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00059a6:	89 cf                	mov    edi,ecx
c00059a8:	89 f1                	mov    ecx,esi
c00059aa:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00059b2:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00059b7:	e9 d8 fe ff ff       	jmp    c0005894 <f_mkfs+0x26f>
c00059bc:	83 c0 02             	add    eax,0x2
c00059bf:	39 f2                	cmp    edx,esi
c00059c1:	0f 87 8e fe ff ff    	ja     c0005855 <f_mkfs+0x230>
c00059c7:	01 ff                	add    edi,edi
c00059c9:	e9 7c fe ff ff       	jmp    c000584a <f_mkfs+0x225>
c00059ce:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00059d3:	8d 04 40             	lea    eax,[eax+eax*2]
c00059d6:	40                   	inc    eax
c00059d7:	d1 e8                	shr    eax,1
c00059d9:	83 c0 03             	add    eax,0x3
c00059dc:	e9 91 fe ff ff       	jmp    c0005872 <f_mkfs+0x24d>
c00059e1:	31 d2                	xor    edx,edx
c00059e3:	89 f0                	mov    eax,esi
c00059e5:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059e9:	85 d2                	test   edx,edx
c00059eb:	74 09                	je     c00059f6 <f_mkfs+0x3d1>
c00059ed:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059f1:	4e                   	dec    esi
c00059f2:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059f6:	89 f0                	mov    eax,esi
c00059f8:	31 d2                	xor    edx,edx
c00059fa:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059fe:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005a02:	e9 df fe ff ff       	jmp    c00058e6 <f_mkfs+0x2c1>
c0005a07:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a0d:	77 2c                	ja     c0005a3b <f_mkfs+0x416>
c0005a0f:	85 c9                	test   ecx,ecx
c0005a11:	75 19                	jne    c0005a2c <f_mkfs+0x407>
c0005a13:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005a16:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a1c:	0f 86 11 fe ff ff    	jbe    c0005833 <f_mkfs+0x20e>
c0005a22:	eb 08                	jmp    c0005a2c <f_mkfs+0x407>
c0005a24:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a2a:	76 0a                	jbe    c0005a36 <f_mkfs+0x411>
c0005a2c:	be 0e 00 00 00       	mov    esi,0xe
c0005a31:	e9 b4 03 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c0005a36:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a3b:	31 d2                	xor    edx,edx
c0005a3d:	b9 00 02 00 00       	mov    ecx,0x200
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 e8 c5 ff ff       	call   c0002031 <mem_set>
c0005a49:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a4e:	ba d2 81 02 c0       	mov    edx,0xc00281d2
c0005a53:	89 d8                	mov    eax,ebx
c0005a55:	e8 c2 c5 ff ff       	call   c000201c <mem_cpy>
c0005a5a:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a5d:	ba 00 02 00 00       	mov    edx,0x200
c0005a62:	e8 ae c5 ff ff       	call   c0002015 <st_word>
c0005a67:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a6c:	89 f8                	mov    eax,edi
c0005a6e:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a71:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a74:	e8 9c c5 ff ff       	call   c0002015 <st_word>
c0005a79:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a7d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a80:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a85:	83 f8 03             	cmp    eax,0x3
c0005a88:	b8 00 00 00 00       	mov    eax,0x0
c0005a8d:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005a92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a96:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005a9d:	e8 73 c5 ff ff       	call   c0002015 <st_word>
c0005aa2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005aa6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005aac:	77 0a                	ja     c0005ab8 <f_mkfs+0x493>
c0005aae:	8d 43 13             	lea    eax,[ebx+0x13]
c0005ab1:	e8 5f c5 ff ff       	call   c0002015 <st_word>
c0005ab6:	eb 08                	jmp    c0005ac0 <f_mkfs+0x49b>
c0005ab8:	8d 43 20             	lea    eax,[ebx+0x20]
c0005abb:	e8 59 c5 ff ff       	call   c0002019 <st_dword>
c0005ac0:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005ac4:	8d 43 18             	lea    eax,[ebx+0x18]
c0005ac7:	ba 3f 00 00 00       	mov    edx,0x3f
c0005acc:	e8 44 c5 ff ff       	call   c0002015 <st_word>
c0005ad1:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005ad4:	ba ff 00 00 00       	mov    edx,0xff
c0005ad9:	e8 37 c5 ff ff       	call   c0002015 <st_word>
c0005ade:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ae2:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005ae5:	e8 2f c5 ff ff       	call   c0002019 <st_dword>
c0005aea:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005aef:	83 f8 03             	cmp    eax,0x3
c0005af2:	75 57                	jne    c0005b4b <f_mkfs+0x526>
c0005af4:	8d 43 43             	lea    eax,[ebx+0x43]
c0005af7:	ba 00 00 21 50       	mov    edx,0x50210000
c0005afc:	e8 18 c5 ff ff       	call   c0002019 <st_dword>
c0005b01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005b05:	8d 43 24             	lea    eax,[ebx+0x24]
c0005b08:	e8 0c c5 ff ff       	call   c0002019 <st_dword>
c0005b0d:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005b10:	ba 02 00 00 00       	mov    edx,0x2
c0005b15:	e8 ff c4 ff ff       	call   c0002019 <st_dword>
c0005b1a:	8d 43 30             	lea    eax,[ebx+0x30]
c0005b1d:	ba 01 00 00 00       	mov    edx,0x1
c0005b22:	e8 ee c4 ff ff       	call   c0002015 <st_word>
c0005b27:	8d 43 32             	lea    eax,[ebx+0x32]
c0005b2a:	ba 06 00 00 00       	mov    edx,0x6
c0005b2f:	e8 e1 c4 ff ff       	call   c0002015 <st_word>
c0005b34:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b37:	b9 13 00 00 00       	mov    ecx,0x13
c0005b3c:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005b40:	ba de 81 02 c0       	mov    edx,0xc00281de
c0005b45:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005b49:	eb 2f                	jmp    c0005b7a <f_mkfs+0x555>
c0005b4b:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b53:	e8 c1 c4 ff ff       	call   c0002019 <st_dword>
c0005b58:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b5d:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b60:	e8 b0 c4 ff ff       	call   c0002015 <st_word>
c0005b65:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b68:	b9 13 00 00 00       	mov    ecx,0x13
c0005b6d:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b71:	ba f2 81 02 c0       	mov    edx,0xc00281f2
c0005b76:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b7a:	e8 9d c4 ff ff       	call   c000201c <mem_cpy>
c0005b7f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b85:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b8e:	e8 82 c4 ff ff       	call   c0002015 <st_word>
c0005b93:	6a 01                	push   0x1
c0005b95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b99:	53                   	push   ebx
c0005b9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b9e:	e8 18 c4 ff ff       	call   c0001fbb <disk_write>
c0005ba3:	83 c4 10             	add    esp,0x10
c0005ba6:	85 c0                	test   eax,eax
c0005ba8:	0f 85 25 02 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005bae:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005bb3:	83 f8 03             	cmp    eax,0x3
c0005bb6:	0f 85 98 00 00 00    	jne    c0005c54 <f_mkfs+0x62f>
c0005bbc:	6a 01                	push   0x1
c0005bbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005bc2:	83 c0 06             	add    eax,0x6
c0005bc5:	50                   	push   eax
c0005bc6:	53                   	push   ebx
c0005bc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bcb:	e8 eb c3 ff ff       	call   c0001fbb <disk_write>
c0005bd0:	b9 00 02 00 00       	mov    ecx,0x200
c0005bd5:	31 d2                	xor    edx,edx
c0005bd7:	89 d8                	mov    eax,ebx
c0005bd9:	e8 53 c4 ff ff       	call   c0002031 <mem_set>
c0005bde:	ba 52 52 61 41       	mov    edx,0x41615252
c0005be3:	89 d8                	mov    eax,ebx
c0005be5:	e8 2f c4 ff ff       	call   c0002019 <st_dword>
c0005bea:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bf0:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bf5:	e8 1f c4 ff ff       	call   c0002019 <st_dword>
c0005bfa:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bfd:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005c03:	e8 11 c4 ff ff       	call   c0002019 <st_dword>
c0005c08:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005c0e:	ba 02 00 00 00       	mov    edx,0x2
c0005c13:	e8 01 c4 ff ff       	call   c0002019 <st_dword>
c0005c18:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005c1e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005c23:	e8 ed c3 ff ff       	call   c0002015 <st_word>
c0005c28:	6a 01                	push   0x1
c0005c2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005c2e:	83 c0 07             	add    eax,0x7
c0005c31:	50                   	push   eax
c0005c32:	53                   	push   ebx
c0005c33:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005c37:	e8 7f c3 ff ff       	call   c0001fbb <disk_write>
c0005c3c:	83 c4 20             	add    esp,0x20
c0005c3f:	6a 01                	push   0x1
c0005c41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c45:	40                   	inc    eax
c0005c46:	50                   	push   eax
c0005c47:	53                   	push   ebx
c0005c48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c4c:	e8 6a c3 ff ff       	call   c0001fbb <disk_write>
c0005c51:	83 c4 10             	add    esp,0x10
c0005c54:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c58:	31 d2                	xor    edx,edx
c0005c5a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c5e:	c1 e8 09             	shr    eax,0x9
c0005c61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c65:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c6b:	89 d8                	mov    eax,ebx
c0005c6d:	e8 bf c3 ff ff       	call   c0002031 <mem_set>
c0005c72:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c77:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005c7c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005c84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c89:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c8d:	83 f8 01             	cmp    eax,0x1
c0005c90:	0f 44 d1             	cmove  edx,ecx
c0005c93:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005c97:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c9c:	75 21                	jne    c0005cbf <f_mkfs+0x69a>
c0005c9e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ca3:	89 d8                	mov    eax,ebx
c0005ca5:	e8 6f c3 ff ff       	call   c0002019 <st_dword>
c0005caa:	8d 43 04             	lea    eax,[ebx+0x4]
c0005cad:	83 ca ff             	or     edx,0xffffffff
c0005cb0:	e8 64 c3 ff ff       	call   c0002019 <st_dword>
c0005cb5:	8d 43 08             	lea    eax,[ebx+0x8]
c0005cb8:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005cbd:	eb 06                	jmp    c0005cc5 <f_mkfs+0x6a0>
c0005cbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005cc3:	89 d8                	mov    eax,ebx
c0005cc5:	e8 4f c3 ff ff       	call   c0002019 <st_dword>
c0005cca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cd2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005cd6:	0f 46 c6             	cmovbe eax,esi
c0005cd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cdd:	50                   	push   eax
c0005cde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ce2:	53                   	push   ebx
c0005ce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ce7:	e8 cf c2 ff ff       	call   c0001fbb <disk_write>
c0005cec:	83 c4 10             	add    esp,0x10
c0005cef:	85 c0                	test   eax,eax
c0005cf1:	0f 85 dc 00 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005cf7:	b9 00 02 00 00       	mov    ecx,0x200
c0005cfc:	31 d2                	xor    edx,edx
c0005cfe:	89 d8                	mov    eax,ebx
c0005d00:	e8 2c c3 ff ff       	call   c0002031 <mem_set>
c0005d05:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005d09:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005d0d:	29 ce                	sub    esi,ecx
c0005d0f:	75 bd                	jne    c0005cce <f_mkfs+0x6a9>
c0005d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d15:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005d1d:	40                   	inc    eax
c0005d1e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005d22:	0f 87 6f ff ff ff    	ja     c0005c97 <f_mkfs+0x672>
c0005d28:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d2d:	83 f8 03             	cmp    eax,0x3
c0005d30:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005d35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d39:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d3d:	0f 46 f7             	cmovbe esi,edi
c0005d40:	56                   	push   esi
c0005d41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d45:	53                   	push   ebx
c0005d46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d4a:	e8 6c c2 ff ff       	call   c0001fbb <disk_write>
c0005d4f:	83 c4 10             	add    esp,0x10
c0005d52:	85 c0                	test   eax,eax
c0005d54:	75 7d                	jne    c0005dd3 <f_mkfs+0x7ae>
c0005d56:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d5a:	29 f7                	sub    edi,esi
c0005d5c:	75 d7                	jne    c0005d35 <f_mkfs+0x710>
c0005d5e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d63:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d68:	83 f8 03             	cmp    eax,0x3
c0005d6b:	74 1e                	je     c0005d8b <f_mkfs+0x766>
c0005d6d:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d75:	b9 06 00 00 00       	mov    ecx,0x6
c0005d7a:	77 0f                	ja     c0005d8b <f_mkfs+0x766>
c0005d7c:	83 f8 02             	cmp    eax,0x2
c0005d7f:	b9 04 00 00 00       	mov    ecx,0x4
c0005d84:	74 05                	je     c0005d8b <f_mkfs+0x766>
c0005d86:	b9 01 00 00 00       	mov    ecx,0x1
c0005d8b:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d90:	75 2a                	jne    c0005dbc <f_mkfs+0x797>
c0005d92:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d9a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d9e:	83 ec 0c             	sub    esp,0xc
c0005da1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005da5:	53                   	push   ebx
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005dae:	e8 87 d2 ff ff       	call   c000303a <create_partition>
c0005db3:	83 c4 10             	add    esp,0x10
c0005db6:	85 c0                	test   eax,eax
c0005db8:	89 c6                	mov    esi,eax
c0005dba:	75 2e                	jne    c0005dea <f_mkfs+0x7c5>
c0005dbc:	50                   	push   eax
c0005dbd:	31 f6                	xor    esi,esi
c0005dbf:	6a 00                	push   0x0
c0005dc1:	6a 00                	push   0x0
c0005dc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005dc7:	e8 05 c2 ff ff       	call   c0001fd1 <disk_ioctl>
c0005dcc:	83 c4 10             	add    esp,0x10
c0005dcf:	85 c0                	test   eax,eax
c0005dd1:	74 17                	je     c0005dea <f_mkfs+0x7c5>
c0005dd3:	85 ed                	test   ebp,ebp
c0005dd5:	75 0c                	jne    c0005de3 <f_mkfs+0x7be>
c0005dd7:	83 ec 0c             	sub    esp,0xc
c0005dda:	53                   	push   ebx
c0005ddb:	e8 6c 00 00 00       	call   c0005e4c <ff_memfree>
c0005de0:	83 c4 10             	add    esp,0x10
c0005de3:	be 01 00 00 00       	mov    esi,0x1
c0005de8:	eb 40                	jmp    c0005e2a <f_mkfs+0x805>
c0005dea:	85 ed                	test   ebp,ebp
c0005dec:	75 3c                	jne    c0005e2a <f_mkfs+0x805>
c0005dee:	83 ec 0c             	sub    esp,0xc
c0005df1:	53                   	push   ebx
c0005df2:	e8 55 00 00 00       	call   c0005e4c <ff_memfree>
c0005df7:	83 c4 10             	add    esp,0x10
c0005dfa:	eb 2e                	jmp    c0005e2a <f_mkfs+0x805>
c0005dfc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e01:	0f 85 46 fb ff ff    	jne    c000594d <f_mkfs+0x328>
c0005e07:	e9 20 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e0c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e11:	0f 85 3c fb ff ff    	jne    c0005953 <f_mkfs+0x32e>
c0005e17:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005e1d:	89 cf                	mov    edi,ecx
c0005e1f:	0f 86 30 fa ff ff    	jbe    c0005855 <f_mkfs+0x230>
c0005e25:	e9 02 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e2a:	83 c4 5c             	add    esp,0x5c
c0005e2d:	89 f0                	mov    eax,esi
c0005e2f:	5b                   	pop    ebx
c0005e30:	5e                   	pop    esi
c0005e31:	5f                   	pop    edi
c0005e32:	5d                   	pop    ebp
c0005e33:	c3                   	ret    

c0005e34 <ff_memalloc>:
c0005e34:	83 ec 0c             	sub    esp,0xc
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e3e:	e8 91 a0 00 00       	call   c000fed4 <malloc>
c0005e43:	83 c4 10             	add    esp,0x10
c0005e46:	83 c4 0c             	add    esp,0xc
c0005e49:	c3                   	ret    
c0005e4a:	66 90                	xchg   ax,ax

c0005e4c <ff_memfree>:
c0005e4c:	83 ec 0c             	sub    esp,0xc
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e56:	e8 89 a0 00 00       	call   c000fee4 <free>
c0005e5b:	83 c4 10             	add    esp,0x10
c0005e5e:	90                   	nop
c0005e5f:	83 c4 0c             	add    esp,0xc
c0005e62:	c3                   	ret    
c0005e63:	90                   	nop

c0005e64 <ff_uni2oem>:
c0005e64:	83 ec 14             	sub    esp,0x14
c0005e67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e6b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e6f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e76:	c7 44 24 0c 20 86 02 c0 	mov    DWORD PTR [esp+0xc],0xc0028620
c0005e7e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e83:	77 0b                	ja     c0005e90 <ff_uni2oem+0x2c>
c0005e85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e89:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e8e:	eb 64                	jmp    c0005ef4 <ff_uni2oem+0x90>
c0005e90:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e98:	77 5a                	ja     c0005ef4 <ff_uni2oem+0x90>
c0005e9a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e9e:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005ea3:	75 4f                	jne    c0005ef4 <ff_uni2oem+0x90>
c0005ea5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005eac:	eb 12                	jmp    c0005ec0 <ff_uni2oem+0x5c>
c0005eae:	66 90                	xchg   ax,ax
c0005eb0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005eb5:	83 c0 01             	add    eax,0x1
c0005eb8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ec0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ec5:	83 f8 7f             	cmp    eax,0x7f
c0005ec8:	77 1a                	ja     c0005ee4 <ff_uni2oem+0x80>
c0005eca:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ecf:	8d 14 00             	lea    edx,[eax+eax*1]
c0005ed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ed6:	01 d0                	add    eax,edx
c0005ed8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005edb:	0f b7 c0             	movzx  eax,ax
c0005ede:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ee2:	75 cc                	jne    c0005eb0 <ff_uni2oem+0x4c>
c0005ee4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ee9:	83 e8 80             	sub    eax,0xffffff80
c0005eec:	0f b6 c0             	movzx  eax,al
c0005eef:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ef4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ef9:	83 c4 14             	add    esp,0x14
c0005efc:	c3                   	ret    
c0005efd:	8d 76 00             	lea    esi,[esi+0x0]

c0005f00 <ff_oem2uni>:
c0005f00:	83 ec 18             	sub    esp,0x18
c0005f03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005f0b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005f10:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005f14:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005f1b:	c7 44 24 10 20 86 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028620
c0005f23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f28:	83 f8 7f             	cmp    eax,0x7f
c0005f2b:	77 0b                	ja     c0005f38 <ff_oem2uni+0x38>
c0005f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f31:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f36:	eb 34                	jmp    c0005f6c <ff_oem2uni+0x6c>
c0005f38:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f3c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f41:	75 29                	jne    c0005f6c <ff_oem2uni+0x6c>
c0005f43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f48:	3d ff 00 00 00       	cmp    eax,0xff
c0005f4d:	77 1d                	ja     c0005f6c <ff_oem2uni+0x6c>
c0005f4f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f54:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f59:	8d 14 00             	lea    edx,[eax+eax*1]
c0005f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f60:	01 d0                	add    eax,edx
c0005f62:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f65:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f6a:	66 90                	xchg   ax,ax
c0005f6c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f71:	83 c4 18             	add    esp,0x18
c0005f74:	c3                   	ret    
c0005f75:	8d 76 00             	lea    esi,[esi+0x0]

c0005f78 <ff_wtoupper>:
c0005f78:	83 ec 10             	sub    esp,0x10
c0005f7b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f83:	0f 87 a7 01 00 00    	ja     c0006130 <ff_wtoupper+0x1b8>
c0005f89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f8d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f92:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f97:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f9c:	77 0a                	ja     c0005fa8 <ff_wtoupper+0x30>
c0005f9e:	b8 20 84 02 c0       	mov    eax,0xc0028420
c0005fa3:	eb 0b                	jmp    c0005fb0 <ff_wtoupper+0x38>
c0005fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0005fa8:	b8 60 83 02 c0       	mov    eax,0xc0028360
c0005fad:	8d 76 00             	lea    esi,[esi+0x0]
c0005fb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb8:	8d 50 02             	lea    edx,[eax+0x2]
c0005fbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fbf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fc2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005fc7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fcc:	85 c0                	test   eax,eax
c0005fce:	0f 84 50 01 00 00    	je     c0006124 <ff_wtoupper+0x1ac>
c0005fd4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fd9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fde:	39 c2                	cmp    edx,eax
c0005fe0:	0f 82 3e 01 00 00    	jb     c0006124 <ff_wtoupper+0x1ac>
c0005fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fea:	8d 50 02             	lea    edx,[eax+0x2]
c0005fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ff1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ff4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005ff9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ffe:	c1 e8 08             	shr    eax,0x8
c0006001:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0006006:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000600b:	0f b6 c0             	movzx  eax,al
c000600e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006013:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006018:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000601d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0006022:	01 ca                	add    edx,ecx
c0006024:	39 d0                	cmp    eax,edx
c0006026:	0f 8d d4 00 00 00    	jge    c0006100 <ff_wtoupper+0x188>
c000602c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006031:	83 f8 08             	cmp    eax,0x8
c0006034:	0f 87 e6 00 00 00    	ja     c0006120 <ff_wtoupper+0x1a8>
c000603a:	8b 04 85 20 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce0]
c0006041:	ff e0                	jmp    eax
c0006043:	90                   	nop
c0006044:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006049:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000604e:	29 c2                	sub    edx,eax
c0006050:	89 d0                	mov    eax,edx
c0006052:	8d 14 00             	lea    edx,[eax+eax*1]
c0006055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006059:	01 d0                	add    eax,edx
c000605b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000605e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006063:	e9 94 00 00 00       	jmp    c00060fc <ff_wtoupper+0x184>
c0006068:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c000606d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006071:	89 d1                	mov    ecx,edx
c0006073:	29 c1                	sub    ecx,eax
c0006075:	89 c8                	mov    eax,ecx
c0006077:	83 e0 01             	and    eax,0x1
c000607a:	89 c2                	mov    edx,eax
c000607c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006081:	29 d0                	sub    eax,edx
c0006083:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006088:	eb 72                	jmp    c00060fc <ff_wtoupper+0x184>
c000608a:	66 90                	xchg   ax,ax
c000608c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006091:	83 e8 10             	sub    eax,0x10
c0006094:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006099:	eb 61                	jmp    c00060fc <ff_wtoupper+0x184>
c000609b:	90                   	nop
c000609c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060a1:	83 e8 20             	sub    eax,0x20
c00060a4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a9:	eb 51                	jmp    c00060fc <ff_wtoupper+0x184>
c00060ab:	90                   	nop
c00060ac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060b1:	83 e8 30             	sub    eax,0x30
c00060b4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b9:	eb 41                	jmp    c00060fc <ff_wtoupper+0x184>
c00060bb:	90                   	nop
c00060bc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060c1:	83 e8 1a             	sub    eax,0x1a
c00060c4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c9:	eb 31                	jmp    c00060fc <ff_wtoupper+0x184>
c00060cb:	90                   	nop
c00060cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060d1:	83 c0 08             	add    eax,0x8
c00060d4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d9:	eb 21                	jmp    c00060fc <ff_wtoupper+0x184>
c00060db:	90                   	nop
c00060dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060e1:	83 e8 50             	sub    eax,0x50
c00060e4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060e9:	eb 11                	jmp    c00060fc <ff_wtoupper+0x184>
c00060eb:	90                   	nop
c00060ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060f1:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060f6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060fb:	90                   	nop
c00060fc:	eb 22                	jmp    c0006120 <ff_wtoupper+0x1a8>
c00060fe:	66 90                	xchg   ax,ax
c0006100:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006105:	85 c0                	test   eax,eax
c0006107:	0f 85 a7 fe ff ff    	jne    c0005fb4 <ff_wtoupper+0x3c>
c000610d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006112:	d1 e0                	shl    eax,1
c0006114:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006118:	e9 97 fe ff ff       	jmp    c0005fb4 <ff_wtoupper+0x3c>
c000611d:	8d 76 00             	lea    esi,[esi+0x0]
c0006120:	90                   	nop
c0006121:	8d 76 00             	lea    esi,[esi+0x0]
c0006124:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006129:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000612d:	8d 76 00             	lea    esi,[esi+0x0]
c0006130:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006134:	83 c4 10             	add    esp,0x10
c0006137:	c3                   	ret    

c0006138 <utf2ucs>:
c0006138:	57                   	push   edi
c0006139:	31 c9                	xor    ecx,ecx
c000613b:	56                   	push   esi
c000613c:	89 d7                	mov    edi,edx
c000613e:	53                   	push   ebx
c000613f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006143:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006147:	89 de                	mov    esi,ebx
c0006149:	c1 fe 08             	sar    esi,0x8
c000614c:	89 f2                	mov    edx,esi
c000614e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006151:	41                   	inc    ecx
c0006152:	85 db                	test   ebx,ebx
c0006154:	75 e9                	jne    c000613f <utf2ucs+0x7>
c0006156:	5b                   	pop    ebx
c0006157:	5e                   	pop    esi
c0006158:	5f                   	pop    edi
c0006159:	c3                   	ret    

c000615a <ucs2utfn>:
c000615a:	83 e1 fe             	and    ecx,0xfffffffe
c000615d:	01 d1                	add    ecx,edx
c000615f:	39 d1                	cmp    ecx,edx
c0006161:	75 04                	jne    c0006167 <ucs2utfn+0xd>
c0006163:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006166:	c3                   	ret    
c0006167:	57                   	push   edi
c0006168:	56                   	push   esi
c0006169:	53                   	push   ebx
c000616a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c000616d:	83 c2 02             	add    edx,0x2
c0006170:	89 de                	mov    esi,ebx
c0006172:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006176:	c1 e6 08             	shl    esi,0x8
c0006179:	09 f3                	or     ebx,esi
c000617b:	83 fb 3b             	cmp    ebx,0x3b
c000617e:	74 50                	je     c00061d0 <ucs2utfn+0x76>
c0006180:	83 fb 7f             	cmp    ebx,0x7f
c0006183:	7f 05                	jg     c000618a <ucs2utfn+0x30>
c0006185:	88 18                	mov    BYTE PTR [eax],bl
c0006187:	40                   	inc    eax
c0006188:	eb 42                	jmp    c00061cc <ucs2utfn+0x72>
c000618a:	89 df                	mov    edi,ebx
c000618c:	89 de                	mov    esi,ebx
c000618e:	c1 fe 06             	sar    esi,0x6
c0006191:	83 e7 3f             	and    edi,0x3f
c0006194:	83 cf 80             	or     edi,0xffffff80
c0006197:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000619d:	7f 12                	jg     c00061b1 <ucs2utfn+0x57>
c000619f:	83 ce c0             	or     esi,0xffffffc0
c00061a2:	83 c0 02             	add    eax,0x2
c00061a5:	89 f3                	mov    ebx,esi
c00061a7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061aa:	89 fb                	mov    ebx,edi
c00061ac:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061af:	eb 1b                	jmp    c00061cc <ucs2utfn+0x72>
c00061b1:	c1 fb 0c             	sar    ebx,0xc
c00061b4:	83 e6 3f             	and    esi,0x3f
c00061b7:	83 cb e0             	or     ebx,0xffffffe0
c00061ba:	83 ce 80             	or     esi,0xffffff80
c00061bd:	88 18                	mov    BYTE PTR [eax],bl
c00061bf:	89 f3                	mov    ebx,esi
c00061c1:	83 c0 03             	add    eax,0x3
c00061c4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061c7:	89 fb                	mov    ebx,edi
c00061c9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061cc:	39 d1                	cmp    ecx,edx
c00061ce:	75 9a                	jne    c000616a <ucs2utfn+0x10>
c00061d0:	5b                   	pop    ebx
c00061d1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061d4:	5e                   	pop    esi
c00061d5:	5f                   	pop    edi
c00061d6:	c3                   	ret    

c00061d7 <isjoliet>:
c00061d7:	31 d2                	xor    edx,edx
c00061d9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061dc:	75 26                	jne    c0006204 <isjoliet+0x2d>
c00061de:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061e2:	75 20                	jne    c0006204 <isjoliet+0x2d>
c00061e4:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061e8:	ba 02 00 00 00       	mov    edx,0x2
c00061ed:	83 f8 43             	cmp    eax,0x43
c00061f0:	74 12                	je     c0006204 <isjoliet+0x2d>
c00061f2:	83 f8 45             	cmp    eax,0x45
c00061f5:	ba 03 00 00 00       	mov    edx,0x3
c00061fa:	74 08                	je     c0006204 <isjoliet+0x2d>
c00061fc:	31 d2                	xor    edx,edx
c00061fe:	83 f8 40             	cmp    eax,0x40
c0006201:	0f 94 c2             	sete   dl
c0006204:	89 d0                	mov    eax,edx
c0006206:	c3                   	ret    

c0006207 <htohl_32>:
c0006207:	8b 00                	mov    eax,DWORD PTR [eax]
c0006209:	c3                   	ret    

c000620a <iso_733>:
c000620a:	eb fb                	jmp    c0006207 <htohl_32>

c000620c <bgrad_cache>:
c000620c:	83 fa 0e             	cmp    edx,0xe
c000620f:	77 16                	ja     c0006227 <bgrad_cache+0x1b>
c0006211:	53                   	push   ebx
c0006212:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006215:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006219:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000621c:	42                   	inc    edx
c000621d:	83 fa 0f             	cmp    edx,0xf
c0006220:	75 f3                	jne    c0006215 <bgrad_cache+0x9>
c0006222:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006225:	5b                   	pop    ebx
c0006226:	c3                   	ret    
c0006227:	c3                   	ret    

c0006228 <ucscompare>:
c0006228:	55                   	push   ebp
c0006229:	57                   	push   edi
c000622a:	89 c7                	mov    edi,eax
c000622c:	56                   	push   esi
c000622d:	89 d6                	mov    esi,edx
c000622f:	53                   	push   ebx
c0006230:	31 d2                	xor    edx,edx
c0006232:	83 ec 1c             	sub    esp,0x1c
c0006235:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006239:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000623e:	c1 e3 08             	shl    ebx,0x8
c0006241:	09 c3                	or     ebx,eax
c0006243:	39 ca                	cmp    edx,ecx
c0006245:	7d 42                	jge    c0006289 <ucscompare+0x61>
c0006247:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000624b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000624f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006253:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006258:	c1 e0 08             	shl    eax,0x8
c000625b:	09 e8                	or     eax,ebp
c000625d:	83 f8 3b             	cmp    eax,0x3b
c0006260:	74 27                	je     c0006289 <ucscompare+0x61>
c0006262:	83 ec 0c             	sub    esp,0xc
c0006265:	50                   	push   eax
c0006266:	e8 15 a7 ff ff       	call   c0000980 <tolower>
c000626b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000626e:	89 c5                	mov    ebp,eax
c0006270:	e8 0b a7 ff ff       	call   c0000980 <tolower>
c0006275:	83 c4 10             	add    esp,0x10
c0006278:	39 c5                	cmp    ebp,eax
c000627a:	75 20                	jne    c000629c <ucscompare+0x74>
c000627c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006280:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006284:	83 c2 02             	add    edx,0x2
c0006287:	eb ac                	jmp    c0006235 <ucscompare+0xd>
c0006289:	83 fb 2f             	cmp    ebx,0x2f
c000628c:	0f 95 c2             	setne  dl
c000628f:	31 c0                	xor    eax,eax
c0006291:	85 db                	test   ebx,ebx
c0006293:	0f 95 c0             	setne  al
c0006296:	21 d0                	and    eax,edx
c0006298:	f7 d8                	neg    eax
c000629a:	eb 03                	jmp    c000629f <ucscompare+0x77>
c000629c:	83 c8 ff             	or     eax,0xffffffff
c000629f:	83 c4 1c             	add    esp,0x1c
c00062a2:	5b                   	pop    ebx
c00062a3:	5e                   	pop    esi
c00062a4:	5f                   	pop    edi
c00062a5:	5d                   	pop    ebp
c00062a6:	c3                   	ret    

c00062a7 <fncompare>:
c00062a7:	55                   	push   ebp
c00062a8:	57                   	push   edi
c00062a9:	89 c7                	mov    edi,eax
c00062ab:	56                   	push   esi
c00062ac:	89 ce                	mov    esi,ecx
c00062ae:	53                   	push   ebx
c00062af:	31 db                	xor    ebx,ebx
c00062b1:	83 ec 1c             	sub    esp,0x1c
c00062b4:	39 d3                	cmp    ebx,edx
c00062b6:	7d 45                	jge    c00062fd <fncompare+0x56>
c00062b8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00062bc:	83 f8 3b             	cmp    eax,0x3b
c00062bf:	74 3c                	je     c00062fd <fncompare+0x56>
c00062c1:	83 f8 2e             	cmp    eax,0x2e
c00062c4:	75 0e                	jne    c00062d4 <fncompare+0x2d>
c00062c6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062c9:	39 d9                	cmp    ecx,ebx
c00062cb:	74 30                	je     c00062fd <fncompare+0x56>
c00062cd:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062d2:	74 29                	je     c00062fd <fncompare+0x56>
c00062d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062d8:	83 ec 0c             	sub    esp,0xc
c00062db:	50                   	push   eax
c00062dc:	e8 9f a6 ff ff       	call   c0000980 <tolower>
c00062e1:	89 c5                	mov    ebp,eax
c00062e3:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00062ea:	e8 91 a6 ff ff       	call   c0000980 <tolower>
c00062ef:	83 c4 10             	add    esp,0x10
c00062f2:	39 c5                	cmp    ebp,eax
c00062f4:	75 1e                	jne    c0006314 <fncompare+0x6d>
c00062f6:	43                   	inc    ebx
c00062f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062fb:	eb b7                	jmp    c00062b4 <fncompare+0xd>
c00062fd:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006301:	83 fa 2f             	cmp    edx,0x2f
c0006304:	0f 95 c1             	setne  cl
c0006307:	31 c0                	xor    eax,eax
c0006309:	85 d2                	test   edx,edx
c000630b:	0f 95 c0             	setne  al
c000630e:	21 c8                	and    eax,ecx
c0006310:	f7 d8                	neg    eax
c0006312:	eb 03                	jmp    c0006317 <fncompare+0x70>
c0006314:	83 c8 ff             	or     eax,0xffffffff
c0006317:	83 c4 1c             	add    esp,0x1c
c000631a:	5b                   	pop    ebx
c000631b:	5e                   	pop    esi
c000631c:	5f                   	pop    edi
c000631d:	5d                   	pop    ebp
c000631e:	c3                   	ret    

c000631f <bclear_cache>:
c000631f:	83 ec 18             	sub    esp,0x18
c0006322:	68 20 87 02 c0       	push   0xc0028720
c0006327:	e8 6c 7c 01 00       	call   c001df98 <iso_kprintf>
c000632c:	83 c4 10             	add    esp,0x10
c000632f:	31 c0                	xor    eax,eax
c0006331:	8b 14 85 20 f0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0fe0]
c0006338:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000633e:	8b 14 85 80 f0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0f80]
c0006345:	40                   	inc    eax
c0006346:	83 f8 10             	cmp    eax,0x10
c0006349:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000634f:	75 e0                	jne    c0006331 <bclear_cache+0x12>
c0006351:	83 c4 0c             	add    esp,0xc
c0006354:	c3                   	ret    

c0006355 <bclear>:
c0006355:	eb c8                	jmp    c000631f <bclear_cache>

c0006357 <iso_break_all>:
c0006357:	83 ec 18             	sub    esp,0x18
c000635a:	68 2e 87 02 c0       	push   0xc002872e
c000635f:	e8 34 7c 01 00       	call   c001df98 <iso_kprintf>
c0006364:	83 c4 10             	add    esp,0x10
c0006367:	31 c0                	xor    eax,eax
c0006369:	c7 80 d0 f5 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd0a30],0x1
c0006373:	05 94 00 00 00       	add    eax,0x94
c0006378:	3d 40 09 00 00       	cmp    eax,0x940
c000637d:	75 ea                	jne    c0006369 <iso_break_all+0x12>
c000637f:	83 c4 0c             	add    esp,0xc
c0006382:	c3                   	ret    

c0006383 <isoReadDiscSector>:
c0006383:	83 ec 0c             	sub    esp,0xc
c0006386:	0f be 05 60 f0 02 c0 	movsx  eax,BYTE PTR ds:0xc002f060
c000638d:	50                   	push   eax
c000638e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000639a:	e8 9d 7b 01 00       	call   c001df3c <isoReadDiscSectorHelper>
c000639f:	83 c4 1c             	add    esp,0x1c
c00063a2:	c3                   	ret    

c00063a3 <bread_cache>:
c00063a3:	55                   	push   ebp
c00063a4:	57                   	push   edi
c00063a5:	89 d7                	mov    edi,edx
c00063a7:	56                   	push   esi
c00063a8:	ba 0f 00 00 00       	mov    edx,0xf
c00063ad:	53                   	push   ebx
c00063ae:	89 c6                	mov    esi,eax
c00063b0:	83 ec 0c             	sub    esp,0xc
c00063b3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00063b6:	39 38                	cmp    DWORD PTR [eax],edi
c00063b8:	74 3c                	je     c00063f6 <bread_cache+0x53>
c00063ba:	4a                   	dec    edx
c00063bb:	83 fa ff             	cmp    edx,0xffffffff
c00063be:	75 f3                	jne    c00063b3 <bread_cache+0x10>
c00063c0:	31 db                	xor    ebx,ebx
c00063c2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063c5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063c8:	74 08                	je     c00063d2 <bread_cache+0x2f>
c00063ca:	43                   	inc    ebx
c00063cb:	83 fb 10             	cmp    ebx,0x10
c00063ce:	75 f2                	jne    c00063c2 <bread_cache+0x1f>
c00063d0:	31 db                	xor    ebx,ebx
c00063d2:	50                   	push   eax
c00063d3:	6a 01                	push   0x1
c00063d5:	57                   	push   edi
c00063d6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063dc:	83 c0 04             	add    eax,0x4
c00063df:	50                   	push   eax
c00063e0:	e8 9e ff ff ff       	call   c0006383 <isoReadDiscSector>
c00063e5:	83 c4 10             	add    esp,0x10
c00063e8:	83 c9 ff             	or     ecx,0xffffffff
c00063eb:	85 c0                	test   eax,eax
c00063ed:	78 13                	js     c0006402 <bread_cache+0x5f>
c00063ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063f2:	89 da                	mov    edx,ebx
c00063f4:	89 38                	mov    DWORD PTR [eax],edi
c00063f6:	89 f0                	mov    eax,esi
c00063f8:	e8 0f fe ff ff       	call   c000620c <bgrad_cache>
c00063fd:	b9 0f 00 00 00       	mov    ecx,0xf
c0006402:	83 c4 0c             	add    esp,0xc
c0006405:	89 c8                	mov    eax,ecx
c0006407:	5b                   	pop    ebx
c0006408:	5e                   	pop    esi
c0006409:	5f                   	pop    edi
c000640a:	5d                   	pop    ebp
c000640b:	c3                   	ret    

c000640c <biread>:
c000640c:	89 c2                	mov    edx,eax
c000640e:	b8 80 f0 02 c0       	mov    eax,0xc002f080
c0006413:	eb 8e                	jmp    c00063a3 <bread_cache>

c0006415 <bdread>:
c0006415:	89 c2                	mov    edx,eax
c0006417:	b8 20 f0 02 c0       	mov    eax,0xc002f020
c000641c:	eb 85                	jmp    c00063a3 <bread_cache>

c000641e <strnicmp>:
c000641e:	55                   	push   ebp
c000641f:	57                   	push   edi
c0006420:	31 ff                	xor    edi,edi
c0006422:	56                   	push   esi
c0006423:	53                   	push   ebx
c0006424:	83 ec 0c             	sub    esp,0xc
c0006427:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000642b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000642f:	74 43                	je     c0006474 <strnicmp+0x56>
c0006431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006435:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006439:	85 c0                	test   eax,eax
c000643b:	74 37                	je     c0006474 <strnicmp+0x56>
c000643d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006441:	85 d2                	test   edx,edx
c0006443:	74 2f                	je     c0006474 <strnicmp+0x56>
c0006445:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006448:	39 d0                	cmp    eax,edx
c000644a:	75 04                	jne    c0006450 <strnicmp+0x32>
c000644c:	89 ef                	mov    edi,ebp
c000644e:	eb db                	jmp    c000642b <strnicmp+0xd>
c0006450:	83 ec 0c             	sub    esp,0xc
c0006453:	50                   	push   eax
c0006454:	e8 27 a5 ff ff       	call   c0000980 <tolower>
c0006459:	89 c3                	mov    ebx,eax
c000645b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000645f:	89 ef                	mov    edi,ebp
c0006461:	89 04 24             	mov    DWORD PTR [esp],eax
c0006464:	e8 17 a5 ff ff       	call   c0000980 <tolower>
c0006469:	83 c4 10             	add    esp,0x10
c000646c:	29 c3                	sub    ebx,eax
c000646e:	89 d8                	mov    eax,ebx
c0006470:	74 b9                	je     c000642b <strnicmp+0xd>
c0006472:	eb 02                	jmp    c0006476 <strnicmp+0x58>
c0006474:	31 c0                	xor    eax,eax
c0006476:	83 c4 0c             	add    esp,0xc
c0006479:	5b                   	pop    ebx
c000647a:	5e                   	pop    esi
c000647b:	5f                   	pop    edi
c000647c:	5d                   	pop    ebp
c000647d:	c3                   	ret    

c000647e <find_object>:
c000647e:	55                   	push   ebp
c000647f:	57                   	push   edi
c0006480:	89 c7                	mov    edi,eax
c0006482:	56                   	push   esi
c0006483:	53                   	push   ebx
c0006484:	89 d3                	mov    ebx,edx
c0006486:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000648c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0006490:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006497:	83 3d b4 fe 02 c0 00 	cmp    DWORD PTR ds:0xc002feb4,0x0
c000649e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00064a2:	74 0b                	je     c00064af <find_object+0x31>
c00064a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00064a8:	89 fa                	mov    edx,edi
c00064aa:	e8 89 fc ff ff       	call   c0006138 <utf2ucs>
c00064af:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00064b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064b6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00064bb:	7e 11                	jle    c00064ce <find_object+0x50>
c00064bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064c1:	e8 46 ff ff ff       	call   c000640c <biread>
c00064c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00064ca:	85 c0                	test   eax,eax
c00064cc:	79 07                	jns    c00064d5 <find_object+0x57>
c00064ce:	31 db                	xor    ebx,ebx
c00064d0:	e9 47 01 00 00       	jmp    c000661c <find_object+0x19e>
c00064d5:	31 ed                	xor    ebp,ebp
c00064d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064db:	8b 04 85 80 f0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0f80]
c00064e2:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c00064e6:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064e9:	85 f6                	test   esi,esi
c00064eb:	75 0e                	jne    c00064fb <find_object+0x7d>
c00064ed:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00064f1:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c00064f9:	eb bb                	jmp    c00064b6 <find_object+0x38>
c00064fb:	8b 0d b4 fe 02 c0    	mov    ecx,DWORD PTR ds:0xc002feb4
c0006501:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006505:	85 c9                	test   ecx,ecx
c0006507:	89 d0                	mov    eax,edx
c0006509:	74 2b                	je     c0006536 <find_object+0xb8>
c000650b:	8d 43 21             	lea    eax,[ebx+0x21]
c000650e:	89 d1                	mov    ecx,edx
c0006510:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006514:	e8 0f fd ff ff       	call   c0006228 <ucscompare>
c0006519:	85 c0                	test   eax,eax
c000651b:	0f 84 cd 00 00 00    	je     c00065ee <find_object+0x170>
c0006521:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006524:	01 c5                	add    ebp,eax
c0006526:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000652c:	7f bf                	jg     c00064ed <find_object+0x6f>
c000652e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006532:	7f a3                	jg     c00064d7 <find_object+0x59>
c0006534:	eb b7                	jmp    c00064ed <find_object+0x6f>
c0006536:	29 d6                	sub    esi,edx
c0006538:	a8 01                	test   al,0x1
c000653a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000653e:	74 05                	je     c0006545 <find_object+0xc7>
c0006540:	83 ee 21             	sub    esi,0x21
c0006543:	eb 6a                	jmp    c00065af <find_object+0x131>
c0006545:	42                   	inc    edx
c0006546:	83 ee 22             	sub    esi,0x22
c0006549:	eb 64                	jmp    c00065af <find_object+0x131>
c000654b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000654e:	48                   	dec    eax
c000654f:	3c 01                	cmp    al,0x1
c0006551:	77 61                	ja     c00065b4 <find_object+0x136>
c0006553:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006557:	50                   	push   eax
c0006558:	6a 02                	push   0x2
c000655a:	68 3d 87 02 c0       	push   0xc002873d
c000655f:	52                   	push   edx
c0006560:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006564:	e8 a7 a2 ff ff       	call   c0000810 <strncmp>
c0006569:	83 c4 10             	add    esp,0x10
c000656c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006570:	85 c0                	test   eax,eax
c0006572:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006576:	75 2f                	jne    c00065a7 <find_object+0x129>
c0006578:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000657c:	50                   	push   eax
c000657d:	8d 42 05             	lea    eax,[edx+0x5]
c0006580:	83 e9 05             	sub    ecx,0x5
c0006583:	51                   	push   ecx
c0006584:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0006588:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000658c:	50                   	push   eax
c000658d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006591:	50                   	push   eax
c0006592:	e8 f9 a0 ff ff       	call   c0000690 <strncpy>
c0006597:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000659b:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00065a0:	83 c4 10             	add    esp,0x10
c00065a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00065a7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00065ab:	29 c6                	sub    esi,eax
c00065ad:	01 c2                	add    edx,eax
c00065af:	83 fe 03             	cmp    esi,0x3
c00065b2:	7f 97                	jg     c000654b <find_object+0xcd>
c00065b4:	85 c9                	test   ecx,ecx
c00065b6:	7e 40                	jle    c00065f8 <find_object+0x17a>
c00065b8:	51                   	push   ecx
c00065b9:	51                   	push   ecx
c00065ba:	6a 2f                	push   0x2f
c00065bc:	57                   	push   edi
c00065bd:	e8 0e a2 ff ff       	call   c00007d0 <strchr>
c00065c2:	83 c4 10             	add    esp,0x10
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 04                	je     c00065cd <find_object+0x14f>
c00065c9:	29 f8                	sub    eax,edi
c00065cb:	eb 0c                	jmp    c00065d9 <find_object+0x15b>
c00065cd:	83 ec 0c             	sub    esp,0xc
c00065d0:	57                   	push   edi
c00065d1:	e8 aa 9f ff ff       	call   c0000580 <strlen>
c00065d6:	83 c4 10             	add    esp,0x10
c00065d9:	52                   	push   edx
c00065da:	50                   	push   eax
c00065db:	57                   	push   edi
c00065dc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065e0:	50                   	push   eax
c00065e1:	e8 38 fe ff ff       	call   c000641e <strnicmp>
c00065e6:	83 c4 10             	add    esp,0x10
c00065e9:	e9 2b ff ff ff       	jmp    c0006519 <find_object+0x9b>
c00065ee:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065f2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00065f6:	eb 1e                	jmp    c0006616 <find_object+0x198>
c00065f8:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065fc:	8d 43 21             	lea    eax,[ebx+0x21]
c00065ff:	89 f9                	mov    ecx,edi
c0006601:	e8 a1 fc ff ff       	call   c00062a7 <fncompare>
c0006606:	85 c0                	test   eax,eax
c0006608:	0f 85 13 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000660e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006612:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006616:	0f 85 05 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000661c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006622:	89 d8                	mov    eax,ebx
c0006624:	5b                   	pop    ebx
c0006625:	5e                   	pop    esi
c0006626:	5f                   	pop    edi
c0006627:	5d                   	pop    ebp
c0006628:	c3                   	ret    

c0006629 <find_object_path>:
c0006629:	55                   	push   ebp
c000662a:	57                   	push   edi
c000662b:	89 d7                	mov    edi,edx
c000662d:	56                   	push   esi
c000662e:	89 c6                	mov    esi,eax
c0006630:	53                   	push   ebx
c0006631:	89 cb                	mov    ebx,ecx
c0006633:	83 ec 0c             	sub    esp,0xc
c0006636:	50                   	push   eax
c0006637:	50                   	push   eax
c0006638:	6a 2f                	push   0x2f
c000663a:	56                   	push   esi
c000663b:	e8 90 a1 ff ff       	call   c00007d0 <strchr>
c0006640:	83 c4 10             	add    esp,0x10
c0006643:	85 c0                	test   eax,eax
c0006645:	89 c5                	mov    ebp,eax
c0006647:	74 3a                	je     c0006683 <find_object_path+0x5a>
c0006649:	39 ee                	cmp    esi,ebp
c000664b:	74 31                	je     c000667e <find_object_path+0x55>
c000664d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006650:	e8 b5 fb ff ff       	call   c000620a <iso_733>
c0006655:	89 c2                	mov    edx,eax
c0006657:	8d 43 02             	lea    eax,[ebx+0x2]
c000665a:	e8 ab fb ff ff       	call   c000620a <iso_733>
c000665f:	83 ec 0c             	sub    esp,0xc
c0006662:	52                   	push   edx
c0006663:	89 c1                	mov    ecx,eax
c0006665:	ba 01 00 00 00       	mov    edx,0x1
c000666a:	89 f0                	mov    eax,esi
c000666c:	e8 0d fe ff ff       	call   c000647e <find_object>
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	85 c0                	test   eax,eax
c0006676:	89 c3                	mov    ebx,eax
c0006678:	75 04                	jne    c000667e <find_object_path+0x55>
c000667a:	31 db                	xor    ebx,ebx
c000667c:	eb 36                	jmp    c00066b4 <find_object_path+0x8b>
c000667e:	8d 75 01             	lea    esi,[ebp+0x1]
c0006681:	eb b3                	jmp    c0006636 <find_object_path+0xd>
c0006683:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006686:	74 28                	je     c00066b0 <find_object_path+0x87>
c0006688:	8d 43 0a             	lea    eax,[ebx+0xa]
c000668b:	e8 7a fb ff ff       	call   c000620a <iso_733>
c0006690:	89 c2                	mov    edx,eax
c0006692:	8d 43 02             	lea    eax,[ebx+0x2]
c0006695:	e8 70 fb ff ff       	call   c000620a <iso_733>
c000669a:	83 ec 0c             	sub    esp,0xc
c000669d:	52                   	push   edx
c000669e:	89 c1                	mov    ecx,eax
c00066a0:	89 fa                	mov    edx,edi
c00066a2:	89 f0                	mov    eax,esi
c00066a4:	e8 d5 fd ff ff       	call   c000647e <find_object>
c00066a9:	83 c4 10             	add    esp,0x10
c00066ac:	89 c3                	mov    ebx,eax
c00066ae:	eb 04                	jmp    c00066b4 <find_object_path+0x8b>
c00066b0:	85 ff                	test   edi,edi
c00066b2:	74 c6                	je     c000667a <find_object_path+0x51>
c00066b4:	83 c4 0c             	add    esp,0xc
c00066b7:	89 d8                	mov    eax,ebx
c00066b9:	5b                   	pop    ebx
c00066ba:	5e                   	pop    esi
c00066bb:	5f                   	pop    edi
c00066bc:	5d                   	pop    ebp
c00066bd:	c3                   	ret    

c00066be <stricmp>:
c00066be:	57                   	push   edi
c00066bf:	56                   	push   esi
c00066c0:	31 f6                	xor    esi,esi
c00066c2:	53                   	push   ebx
c00066c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c7:	83 ec 0c             	sub    esp,0xc
c00066ca:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066d2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066d6:	46                   	inc    esi
c00066d7:	50                   	push   eax
c00066d8:	e8 83 a2 ff ff       	call   c0000960 <toupper>
c00066dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00066e0:	e8 9b a2 ff ff       	call   c0000980 <tolower>
c00066e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066e8:	89 c3                	mov    ebx,eax
c00066ea:	e8 71 a2 ff ff       	call   c0000960 <toupper>
c00066ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00066f2:	e8 89 a2 ff ff       	call   c0000980 <tolower>
c00066f7:	83 c4 10             	add    esp,0x10
c00066fa:	39 c3                	cmp    ebx,eax
c00066fc:	75 04                	jne    c0006702 <stricmp+0x44>
c00066fe:	85 db                	test   ebx,ebx
c0006700:	75 c1                	jne    c00066c3 <stricmp+0x5>
c0006702:	29 c3                	sub    ebx,eax
c0006704:	89 d8                	mov    eax,ebx
c0006706:	5b                   	pop    ebx
c0006707:	5e                   	pop    esi
c0006708:	5f                   	pop    edi
c0006709:	c3                   	ret    

c000670a <iso_open>:
c000670a:	57                   	push   edi
c000670b:	31 c0                	xor    eax,eax
c000670d:	56                   	push   esi
c000670e:	b9 80 fe 02 c0       	mov    ecx,0xc002fe80
c0006713:	53                   	push   ebx
c0006714:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006719:	0f 95 c0             	setne  al
c000671c:	89 c2                	mov    edx,eax
c000671e:	89 c6                	mov    esi,eax
c0006720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006724:	e8 00 ff ff ff       	call   c0006629 <find_object_path>
c0006729:	83 ca ff             	or     edx,0xffffffff
c000672c:	85 c0                	test   eax,eax
c000672e:	74 5e                	je     c000678e <iso_open+0x84>
c0006730:	89 c1                	mov    ecx,eax
c0006732:	31 d2                	xor    edx,edx
c0006734:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000673a:	83 bf 40 f5 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd0ac0],0x0
c0006741:	75 42                	jne    c0006785 <iso_open+0x7b>
c0006743:	c7 87 40 f5 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd0ac0],0xffffffff
c000674d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006750:	e8 b5 fa ff ff       	call   c000620a <iso_733>
c0006755:	89 b7 44 f5 02 c0    	mov    DWORD PTR [edi-0x3ffd0abc],esi
c000675b:	c7 87 48 f5 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd0ab8],0x0
c0006765:	89 87 40 f5 02 c0    	mov    DWORD PTR [edi-0x3ffd0ac0],eax
c000676b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000676e:	e8 97 fa ff ff       	call   c000620a <iso_733>
c0006773:	c7 87 d0 f5 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd0a30],0x0
c000677d:	89 87 4c f5 02 c0    	mov    DWORD PTR [edi-0x3ffd0ab4],eax
c0006783:	eb 09                	jmp    c000678e <iso_open+0x84>
c0006785:	42                   	inc    edx
c0006786:	83 fa 10             	cmp    edx,0x10
c0006789:	75 a9                	jne    c0006734 <iso_open+0x2a>
c000678b:	83 ca ff             	or     edx,0xffffffff
c000678e:	5b                   	pop    ebx
c000678f:	89 d0                	mov    eax,edx
c0006791:	5e                   	pop    esi
c0006792:	5f                   	pop    edi
c0006793:	c3                   	ret    

c0006794 <iso_close>:
c0006794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006798:	83 f8 0f             	cmp    eax,0xf
c000679b:	7f 10                	jg     c00067ad <iso_close+0x19>
c000679d:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00067a3:	c7 80 40 f5 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd0ac0],0x0
c00067ad:	e9 6d fb ff ff       	jmp    c000631f <bclear_cache>

c00067b2 <iso_read>:
c00067b2:	55                   	push   ebp
c00067b3:	57                   	push   edi
c00067b4:	56                   	push   esi
c00067b5:	53                   	push   ebx
c00067b6:	83 ec 1c             	sub    esp,0x1c
c00067b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067bd:	83 fd 0f             	cmp    ebp,0xf
c00067c0:	7e 0a                	jle    c00067cc <iso_read+0x1a>
c00067c2:	83 c8 ff             	or     eax,0xffffffff
c00067c5:	89 c2                	mov    edx,eax
c00067c7:	e9 f4 00 00 00       	jmp    c00068c0 <iso_read+0x10e>
c00067cc:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067d2:	83 bd 40 f5 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd0ac0],0x0
c00067d9:	74 e7                	je     c00067c2 <iso_read+0x10>
c00067db:	8b 95 d0 f5 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd0a30]
c00067e1:	85 d2                	test   edx,edx
c00067e3:	75 dd                	jne    c00067c2 <iso_read+0x10>
c00067e5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067ea:	0f 84 cd 00 00 00    	je     c00068bd <iso_read+0x10b>
c00067f0:	8b 85 48 f5 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd0ab8]
c00067f6:	8b 9d 4c f5 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd0ab4]
c00067fc:	29 c3                	sub    ebx,eax
c00067fe:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006802:	89 d9                	mov    ecx,ebx
c0006804:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006809:	85 c9                	test   ecx,ecx
c000680b:	0f 84 ac 00 00 00    	je     c00068bd <iso_read+0x10b>
c0006811:	89 c6                	mov    esi,eax
c0006813:	bb 00 08 00 00       	mov    ebx,0x800
c0006818:	c1 e8 0b             	shr    eax,0xb
c000681b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006821:	03 85 40 f5 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd0ac0]
c0006827:	29 f3                	sub    ebx,esi
c0006829:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000682f:	75 3f                	jne    c0006870 <iso_read+0xbe>
c0006831:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006837:	7e 37                	jle    c0006870 <iso_read+0xbe>
c0006839:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000683f:	be 20 00 00 00       	mov    esi,0x20
c0006844:	7f 05                	jg     c000684b <iso_read+0x99>
c0006846:	89 ce                	mov    esi,ecx
c0006848:	c1 fe 0b             	sar    esi,0xb
c000684b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000684f:	89 f3                	mov    ebx,esi
c0006851:	52                   	push   edx
c0006852:	56                   	push   esi
c0006853:	50                   	push   eax
c0006854:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006858:	c1 e3 0b             	shl    ebx,0xb
c000685b:	e8 23 fb ff ff       	call   c0006383 <isoReadDiscSector>
c0006860:	83 c4 10             	add    esp,0x10
c0006863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006867:	85 c0                	test   eax,eax
c0006869:	7f 3d                	jg     c00068a8 <iso_read+0xf6>
c000686b:	e9 52 ff ff ff       	jmp    c00067c2 <iso_read+0x10>
c0006870:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006874:	39 d9                	cmp    ecx,ebx
c0006876:	0f 4e d9             	cmovle ebx,ecx
c0006879:	e8 97 fb ff ff       	call   c0006415 <bdread>
c000687e:	85 c0                	test   eax,eax
c0006880:	0f 88 3c ff ff ff    	js     c00067c2 <iso_read+0x10>
c0006886:	8b 0c 85 20 f0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0fe0]
c000688d:	8b 85 48 f5 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd0ab8]
c0006893:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006897:	25 ff 07 00 00       	and    eax,0x7ff
c000689c:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00068a0:	89 d9                	mov    ecx,ebx
c00068a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00068a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00068a8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00068ac:	01 da                	add    edx,ebx
c00068ae:	01 9d 48 f5 02 c0    	add    DWORD PTR [ebp-0x3ffd0ab8],ebx
c00068b4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068b8:	e9 28 ff ff ff       	jmp    c00067e5 <iso_read+0x33>
c00068bd:	89 d0                	mov    eax,edx
c00068bf:	99                   	cdq    
c00068c0:	83 c4 1c             	add    esp,0x1c
c00068c3:	5b                   	pop    ebx
c00068c4:	5e                   	pop    esi
c00068c5:	5f                   	pop    edi
c00068c6:	5d                   	pop    ebp
c00068c7:	c3                   	ret    

c00068c8 <iso_seek>:
c00068c8:	55                   	push   ebp
c00068c9:	83 c8 ff             	or     eax,0xffffffff
c00068cc:	57                   	push   edi
c00068cd:	89 c2                	mov    edx,eax
c00068cf:	56                   	push   esi
c00068d0:	53                   	push   ebx
c00068d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068dd:	83 fe 0f             	cmp    esi,0xf
c00068e0:	7f 65                	jg     c0006947 <iso_seek+0x7f>
c00068e2:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068e8:	83 bd 40 f5 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd0ac0],0x0
c00068ef:	8d 8d 40 f5 02 c0    	lea    ecx,[ebp-0x3ffd0ac0]
c00068f5:	74 50                	je     c0006947 <iso_seek+0x7f>
c00068f7:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068fe:	75 47                	jne    c0006947 <iso_seek+0x7f>
c0006900:	83 fb 01             	cmp    ebx,0x1
c0006903:	74 0e                	je     c0006913 <iso_seek+0x4b>
c0006905:	83 fb 02             	cmp    ebx,0x2
c0006908:	74 0e                	je     c0006918 <iso_seek+0x50>
c000690a:	85 db                	test   ebx,ebx
c000690c:	75 39                	jne    c0006947 <iso_seek+0x7f>
c000690e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006911:	eb 0d                	jmp    c0006920 <iso_seek+0x58>
c0006913:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006916:	eb 08                	jmp    c0006920 <iso_seek+0x58>
c0006918:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000691b:	01 f8                	add    eax,edi
c000691d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006920:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006926:	8b 88 4c f5 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd0ab4]
c000692c:	05 40 f5 02 c0       	add    eax,0xc002f540
c0006931:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006934:	76 03                	jbe    c0006939 <iso_seek+0x71>
c0006936:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006939:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000693f:	8b 82 48 f5 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd0ab8]
c0006945:	31 d2                	xor    edx,edx
c0006947:	5b                   	pop    ebx
c0006948:	5e                   	pop    esi
c0006949:	5f                   	pop    edi
c000694a:	5d                   	pop    ebp
c000694b:	c3                   	ret    

c000694c <iso_tell>:
c000694c:	53                   	push   ebx
c000694d:	83 c8 ff             	or     eax,0xffffffff
c0006950:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006954:	89 c2                	mov    edx,eax
c0006956:	83 f9 0f             	cmp    ecx,0xf
c0006959:	7f 20                	jg     c000697b <iso_tell+0x2f>
c000695b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006961:	83 bb 40 f5 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd0ac0],0x0
c0006968:	74 11                	je     c000697b <iso_tell+0x2f>
c000696a:	83 bb d0 f5 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd0a30],0x0
c0006971:	75 08                	jne    c000697b <iso_tell+0x2f>
c0006973:	8b 83 48 f5 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd0ab8]
c0006979:	31 d2                	xor    edx,edx
c000697b:	5b                   	pop    ebx
c000697c:	c3                   	ret    

c000697d <iso_total>:
c000697d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006981:	83 c8 ff             	or     eax,0xffffffff
c0006984:	83 fa 0f             	cmp    edx,0xf
c0006987:	7f 1e                	jg     c00069a7 <iso_total+0x2a>
c0006989:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000698f:	83 ba 40 f5 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd0ac0],0x0
c0006996:	74 0f                	je     c00069a7 <iso_total+0x2a>
c0006998:	83 ba d0 f5 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd0a30],0x0
c000699f:	75 06                	jne    c00069a7 <iso_total+0x2a>
c00069a1:	8b 82 4c f5 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd0ab4]
c00069a7:	c3                   	ret    

c00069a8 <fn_postprocess>:
c00069a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00069ac:	89 d0                	mov    eax,edx
c00069ae:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00069b1:	85 c9                	test   ecx,ecx
c00069b3:	74 08                	je     c00069bd <fn_postprocess+0x15>
c00069b5:	83 f9 3b             	cmp    ecx,0x3b
c00069b8:	74 03                	je     c00069bd <fn_postprocess+0x15>
c00069ba:	40                   	inc    eax
c00069bb:	eb f1                	jmp    c00069ae <fn_postprocess+0x6>
c00069bd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069c0:	39 d0                	cmp    eax,edx
c00069c2:	76 0a                	jbe    c00069ce <fn_postprocess+0x26>
c00069c4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069c8:	75 04                	jne    c00069ce <fn_postprocess+0x26>
c00069ca:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069ce:	c3                   	ret    

c00069cf <iso_readdir>:
c00069cf:	55                   	push   ebp
c00069d0:	57                   	push   edi
c00069d1:	56                   	push   esi
c00069d2:	53                   	push   ebx
c00069d3:	83 ec 1c             	sub    esp,0x1c
c00069d6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069da:	83 fb 0f             	cmp    ebx,0xf
c00069dd:	7f 28                	jg     c0006a07 <iso_readdir+0x38>
c00069df:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069e5:	83 b8 40 f5 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd0ac0],0x0
c00069ec:	8d b8 40 f5 02 c0    	lea    edi,[eax-0x3ffd0ac0]
c00069f2:	74 13                	je     c0006a07 <iso_readdir+0x38>
c00069f4:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069f8:	74 0d                	je     c0006a07 <iso_readdir+0x38>
c00069fa:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006a01:	0f 84 b1 00 00 00    	je     c0006ab8 <iso_readdir+0xe9>
c0006a07:	83 ec 0c             	sub    esp,0xc
c0006a0a:	68 40 87 02 c0       	push   0xc0028740
c0006a0f:	e8 84 75 01 00       	call   c001df98 <iso_kprintf>
c0006a14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a17:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a1d:	e8 92 75 01 00       	call   c001dfb4 <iso_kprintfd>
c0006a22:	c7 04 24 45 87 02 c0 	mov    DWORD PTR [esp],0xc0028745
c0006a29:	e8 6a 75 01 00       	call   c001df98 <iso_kprintf>
c0006a2e:	58                   	pop    eax
c0006a2f:	ff b3 40 f5 02 c0    	push   DWORD PTR [ebx-0x3ffd0ac0]
c0006a35:	e8 7a 75 01 00       	call   c001dfb4 <iso_kprintfd>
c0006a3a:	c7 04 24 4b 87 02 c0 	mov    DWORD PTR [esp],0xc002874b
c0006a41:	e8 52 75 01 00       	call   c001df98 <iso_kprintf>
c0006a46:	58                   	pop    eax
c0006a47:	ff b3 44 f5 02 c0    	push   DWORD PTR [ebx-0x3ffd0abc]
c0006a4d:	e8 62 75 01 00       	call   c001dfb4 <iso_kprintfd>
c0006a52:	c7 04 24 51 87 02 c0 	mov    DWORD PTR [esp],0xc0028751
c0006a59:	e8 3a 75 01 00       	call   c001df98 <iso_kprintf>
c0006a5e:	58                   	pop    eax
c0006a5f:	ff b3 d0 f5 02 c0    	push   DWORD PTR [ebx-0x3ffd0a30]
c0006a65:	e8 4a 75 01 00       	call   c001dfb4 <iso_kprintfd>
c0006a6a:	83 c4 10             	add    esp,0x10
c0006a6d:	eb 42                	jmp    c0006ab1 <iso_readdir+0xe2>
c0006a6f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a72:	8b 34 85 80 f0 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd0f80]
c0006a79:	89 d1                	mov    ecx,edx
c0006a7b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a81:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a85:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a88:	75 35                	jne    c0006abf <iso_readdir+0xf0>
c0006a8a:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a90:	81 c2 00 08 00 00    	add    edx,0x800
c0006a96:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a99:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a9c:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a9f:	73 1e                	jae    c0006abf <iso_readdir+0xf0>
c0006aa1:	8b 07                	mov    eax,DWORD PTR [edi]
c0006aa3:	c1 ea 0b             	shr    edx,0xb
c0006aa6:	01 d0                	add    eax,edx
c0006aa8:	e8 5f f9 ff ff       	call   c000640c <biread>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	79 be                	jns    c0006a6f <iso_readdir+0xa0>
c0006ab1:	31 c0                	xor    eax,eax
c0006ab3:	e9 6a 01 00 00       	jmp    c0006c22 <iso_readdir+0x253>
c0006ab8:	31 f6                	xor    esi,esi
c0006aba:	83 c8 ff             	or     eax,0xffffffff
c0006abd:	eb da                	jmp    c0006a99 <iso_readdir+0xca>
c0006abf:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ac5:	8b ba 48 f5 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd0ab8]
c0006acb:	81 c2 40 f5 02 c0    	add    edx,0xc002f540
c0006ad1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006ad4:	73 db                	jae    c0006ab1 <iso_readdir+0xe2>
c0006ad6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ada:	75 34                	jne    c0006b10 <iso_readdir+0x141>
c0006adc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006ae0:	75 2e                	jne    c0006b10 <iso_readdir+0x141>
c0006ae2:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ae5:	8b 34 85 80 f0 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd0f80]
c0006aec:	01 f9                	add    ecx,edi
c0006aee:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006af1:	89 c8                	mov    eax,ecx
c0006af3:	25 ff 07 00 00       	and    eax,0x7ff
c0006af8:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006afd:	01 c8                	add    eax,ecx
c0006aff:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006b02:	25 ff 07 00 00       	and    eax,0x7ff
c0006b07:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006b0b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006b0e:	74 a1                	je     c0006ab1 <iso_readdir+0xe2>
c0006b10:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006b16:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b1a:	83 3d b4 fe 02 c0 00 	cmp    DWORD PTR ds:0xc002feb4,0x0
c0006b21:	8d 56 21             	lea    edx,[esi+0x21]
c0006b24:	8d af 58 f5 02 c0    	lea    ebp,[edi-0x3ffd0aa8]
c0006b2a:	74 0c                	je     c0006b38 <iso_readdir+0x169>
c0006b2c:	89 e8                	mov    eax,ebp
c0006b2e:	e8 27 f6 ff ff       	call   c000615a <ucs2utfn>
c0006b33:	e9 b1 00 00 00       	jmp    c0006be9 <iso_readdir+0x21a>
c0006b38:	50                   	push   eax
c0006b39:	51                   	push   ecx
c0006b3a:	52                   	push   edx
c0006b3b:	55                   	push   ebp
c0006b3c:	e8 4f 9b ff ff       	call   c0000690 <strncpy>
c0006b41:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b48:	c6 84 07 58 f5 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd0aa8],0x0
c0006b50:	e8 53 fe ff ff       	call   c00069a8 <fn_postprocess>
c0006b55:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b59:	83 c4 10             	add    esp,0x10
c0006b5c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b5f:	89 d1                	mov    ecx,edx
c0006b61:	29 d0                	sub    eax,edx
c0006b63:	80 e1 01             	and    cl,0x1
c0006b66:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006b6a:	74 05                	je     c0006b71 <iso_readdir+0x1a2>
c0006b6c:	83 e8 21             	sub    eax,0x21
c0006b6f:	eb 04                	jmp    c0006b75 <iso_readdir+0x1a6>
c0006b71:	42                   	inc    edx
c0006b72:	83 e8 22             	sub    eax,0x22
c0006b75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b79:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b83:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b88:	7e 5f                	jle    c0006be9 <iso_readdir+0x21a>
c0006b8a:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006b8d:	48                   	dec    eax
c0006b8e:	3c 01                	cmp    al,0x1
c0006b90:	77 57                	ja     c0006be9 <iso_readdir+0x21a>
c0006b92:	51                   	push   ecx
c0006b93:	6a 02                	push   0x2
c0006b95:	68 3d 87 02 c0       	push   0xc002873d
c0006b9a:	52                   	push   edx
c0006b9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006b9f:	e8 6c 9c ff ff       	call   c0000810 <strncmp>
c0006ba4:	83 c4 10             	add    esp,0x10
c0006ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006bab:	85 c0                	test   eax,eax
c0006bad:	75 2e                	jne    c0006bdd <iso_readdir+0x20e>
c0006baf:	50                   	push   eax
c0006bb0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bb4:	83 e8 05             	sub    eax,0x5
c0006bb7:	50                   	push   eax
c0006bb8:	8d 42 05             	lea    eax,[edx+0x5]
c0006bbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006bbf:	50                   	push   eax
c0006bc0:	55                   	push   ebp
c0006bc1:	e8 ca 9a ff ff       	call   c0000690 <strncpy>
c0006bc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006bca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006bce:	83 c4 10             	add    esp,0x10
c0006bd1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bd5:	c6 84 08 53 f5 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd0aad],0x0
c0006bdd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006be1:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006be5:	01 c2                	add    edx,eax
c0006be7:	eb 9a                	jmp    c0006b83 <iso_readdir+0x1b4>
c0006be9:	83 c8 ff             	or     eax,0xffffffff
c0006bec:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bf0:	89 c2                	mov    edx,eax
c0006bf2:	75 0a                	jne    c0006bfe <iso_readdir+0x22f>
c0006bf4:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bf7:	e8 0e f6 ff ff       	call   c000620a <iso_733>
c0006bfc:	31 d2                	xor    edx,edx
c0006bfe:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006c04:	89 83 50 f5 02 c0    	mov    DWORD PTR [ebx-0x3ffd0ab0],eax
c0006c0a:	89 93 54 f5 02 c0    	mov    DWORD PTR [ebx-0x3ffd0aac],edx
c0006c10:	81 c3 40 f5 02 c0    	add    ebx,0xc002f540
c0006c16:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006c19:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c1c:	8d 87 50 f5 02 c0    	lea    eax,[edi-0x3ffd0ab0]
c0006c22:	83 c4 1c             	add    esp,0x1c
c0006c25:	5b                   	pop    ebx
c0006c26:	5e                   	pop    esi
c0006c27:	5f                   	pop    edi
c0006c28:	5d                   	pop    ebp
c0006c29:	c3                   	ret    

c0006c2a <iso_reset>:
c0006c2a:	83 ec 18             	sub    esp,0x18
c0006c2d:	68 5a 87 02 c0       	push   0xc002875a
c0006c32:	e8 61 73 01 00       	call   c001df98 <iso_kprintf>
c0006c37:	e8 1b f7 ff ff       	call   c0006357 <iso_break_all>
c0006c3c:	e8 14 f7 ff ff       	call   c0006355 <bclear>
c0006c41:	31 c0                	xor    eax,eax
c0006c43:	83 c4 1c             	add    esp,0x1c
c0006c46:	c3                   	ret    

c0006c47 <init_percd>:
c0006c47:	57                   	push   edi
c0006c48:	56                   	push   esi
c0006c49:	53                   	push   ebx
c0006c4a:	bb 01 00 00 00       	mov    ebx,0x1
c0006c4f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006c53:	a2 60 f0 02 c0       	mov    ds:0xc002f060,al
c0006c58:	e8 cd ff ff ff       	call   c0006c2a <iso_reset>
c0006c5d:	c7 05 b4 fe 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002feb4,0x0
c0006c67:	a1 ac fe 02 c0       	mov    eax,ds:0xc002feac
c0006c6c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c70:	e8 97 f7 ff ff       	call   c000640c <biread>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	89 c6                	mov    esi,eax
c0006c79:	0f 88 ba 00 00 00    	js     c0006d39 <init_percd+0xf2>
c0006c7f:	8b 04 85 80 f0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0f80]
c0006c86:	52                   	push   edx
c0006c87:	6a 06                	push   0x6
c0006c89:	68 65 87 02 c0       	push   0xc0028765
c0006c8e:	83 c0 04             	add    eax,0x4
c0006c91:	50                   	push   eax
c0006c92:	e8 e9 96 ff ff       	call   c0000380 <memcmp>
c0006c97:	83 c4 10             	add    esp,0x10
c0006c9a:	85 c0                	test   eax,eax
c0006c9c:	74 08                	je     c0006ca6 <init_percd+0x5f>
c0006c9e:	43                   	inc    ebx
c0006c9f:	83 fb 04             	cmp    ebx,0x4
c0006ca2:	75 c3                	jne    c0006c67 <init_percd+0x20>
c0006ca4:	eb 1a                	jmp    c0006cc0 <init_percd+0x79>
c0006ca6:	8b 04 b5 80 f0 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd0f80]
c0006cad:	83 c0 5c             	add    eax,0x5c
c0006cb0:	e8 22 f5 ff ff       	call   c00061d7 <isjoliet>
c0006cb5:	a3 b4 fe 02 c0       	mov    ds:0xc002feb4,eax
c0006cba:	85 c0                	test   eax,eax
c0006cbc:	74 e0                	je     c0006c9e <init_percd+0x57>
c0006cbe:	eb 3e                	jmp    c0006cfe <init_percd+0xb7>
c0006cc0:	83 3d b4 fe 02 c0 00 	cmp    DWORD PTR ds:0xc002feb4,0x0
c0006cc7:	75 35                	jne    c0006cfe <init_percd+0xb7>
c0006cc9:	a1 ac fe 02 c0       	mov    eax,ds:0xc002feac
c0006cce:	83 c0 10             	add    eax,0x10
c0006cd1:	e8 36 f7 ff ff       	call   c000640c <biread>
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	89 c6                	mov    esi,eax
c0006cda:	78 5f                	js     c0006d3b <init_percd+0xf4>
c0006cdc:	50                   	push   eax
c0006cdd:	8b 04 b5 80 f0 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd0f80]
c0006ce4:	83 cb ff             	or     ebx,0xffffffff
c0006ce7:	6a 06                	push   0x6
c0006ce9:	68 6c 87 02 c0       	push   0xc002876c
c0006cee:	83 c0 04             	add    eax,0x4
c0006cf1:	50                   	push   eax
c0006cf2:	e8 89 96 ff ff       	call   c0000380 <memcmp>
c0006cf7:	83 c4 10             	add    esp,0x10
c0006cfa:	85 c0                	test   eax,eax
c0006cfc:	75 3d                	jne    c0006d3b <init_percd+0xf4>
c0006cfe:	8b 34 b5 80 f0 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd0f80]
c0006d05:	bf 80 fe 02 c0       	mov    edi,0xc002fe80
c0006d0a:	b9 22 00 00 00       	mov    ecx,0x22
c0006d0f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d17:	b8 82 fe 02 c0       	mov    eax,0xc002fe82
c0006d1c:	31 db                	xor    ebx,ebx
c0006d1e:	e8 e7 f4 ff ff       	call   c000620a <iso_733>
c0006d23:	a3 a8 fe 02 c0       	mov    ds:0xc002fea8,eax
c0006d28:	b8 8a fe 02 c0       	mov    eax,0xc002fe8a
c0006d2d:	e8 d8 f4 ff ff       	call   c000620a <iso_733>
c0006d32:	a3 a4 fe 02 c0       	mov    ds:0xc002fea4,eax
c0006d37:	eb 02                	jmp    c0006d3b <init_percd+0xf4>
c0006d39:	89 c3                	mov    ebx,eax
c0006d3b:	89 d8                	mov    eax,ebx
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	5f                   	pop    edi
c0006d40:	c3                   	ret    

c0006d41 <iso_ioctl>:
c0006d41:	83 ec 18             	sub    esp,0x18
c0006d44:	68 73 87 02 c0       	push   0xc0028773
c0006d49:	e8 4a 72 01 00       	call   c001df98 <iso_kprintf>
c0006d4e:	e8 d7 fe ff ff       	call   c0006c2a <iso_reset>
c0006d53:	31 c0                	xor    eax,eax
c0006d55:	83 c4 1c             	add    esp,0x1c
c0006d58:	c3                   	ret    

c0006d59 <fs_iso9660_init>:
c0006d59:	53                   	push   ebx
c0006d5a:	31 db                	xor    ebx,ebx
c0006d5c:	83 ec 14             	sub    esp,0x14
c0006d5f:	68 7e 87 02 c0       	push   0xc002877e
c0006d64:	e8 2f 72 01 00       	call   c001df98 <iso_kprintf>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	68 40 09 00 00       	push   0x940
c0006d71:	6a 00                	push   0x0
c0006d73:	68 40 f5 02 c0       	push   0xc002f540
c0006d78:	e8 73 97 ff ff       	call   c00004f0 <memset>
c0006d7d:	c7 05 40 f5 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc002f540,0xffffffff
c0006d87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d8e:	e8 41 91 00 00       	call   c000fed4 <malloc>
c0006d93:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d9a:	a3 b0 fe 02 c0       	mov    ds:0xc002feb0,eax
c0006d9f:	e8 30 91 00 00       	call   c000fed4 <malloc>
c0006da4:	83 c4 10             	add    esp,0x10
c0006da7:	a3 20 f5 02 c0       	mov    ds:0xc002f520,eax
c0006dac:	83 ec 0c             	sub    esp,0xc
c0006daf:	68 04 08 00 00       	push   0x804
c0006db4:	e8 1b 91 00 00       	call   c000fed4 <malloc>
c0006db9:	89 04 9d 80 f0 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd0f80],eax
c0006dc0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dc6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006dcd:	e8 02 91 00 00       	call   c000fed4 <malloc>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	89 04 9d 20 f0 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd0fe0],eax
c0006ddc:	43                   	inc    ebx
c0006ddd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006de3:	83 fb 10             	cmp    ebx,0x10
c0006de6:	75 c4                	jne    c0006dac <fs_iso9660_init+0x53>
c0006de8:	83 c4 08             	add    esp,0x8
c0006deb:	31 c0                	xor    eax,eax
c0006ded:	5b                   	pop    ebx
c0006dee:	c3                   	ret    

c0006def <fs_iso9660_shutdown>:
c0006def:	53                   	push   ebx
c0006df0:	31 db                	xor    ebx,ebx
c0006df2:	83 ec 08             	sub    esp,0x8
c0006df5:	83 ec 0c             	sub    esp,0xc
c0006df8:	ff 34 9d 80 f0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd0f80]
c0006dff:	e8 e0 90 00 00       	call   c000fee4 <free>
c0006e04:	58                   	pop    eax
c0006e05:	ff 34 9d 20 f0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd0fe0]
c0006e0c:	43                   	inc    ebx
c0006e0d:	e8 d2 90 00 00       	call   c000fee4 <free>
c0006e12:	83 c4 10             	add    esp,0x10
c0006e15:	83 fb 10             	cmp    ebx,0x10
c0006e18:	75 db                	jne    c0006df5 <fs_iso9660_shutdown+0x6>
c0006e1a:	a1 b0 fe 02 c0       	mov    eax,ds:0xc002feb0
c0006e1f:	85 c0                	test   eax,eax
c0006e21:	74 0c                	je     c0006e2f <fs_iso9660_shutdown+0x40>
c0006e23:	83 ec 0c             	sub    esp,0xc
c0006e26:	50                   	push   eax
c0006e27:	e8 b8 90 00 00       	call   c000fee4 <free>
c0006e2c:	83 c4 10             	add    esp,0x10
c0006e2f:	a1 20 f5 02 c0       	mov    eax,ds:0xc002f520
c0006e34:	85 c0                	test   eax,eax
c0006e36:	74 0c                	je     c0006e44 <fs_iso9660_shutdown+0x55>
c0006e38:	83 ec 0c             	sub    esp,0xc
c0006e3b:	50                   	push   eax
c0006e3c:	e8 a3 90 00 00       	call   c000fee4 <free>
c0006e41:	83 c4 10             	add    esp,0x10
c0006e44:	c7 05 20 f5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f520,0x0
c0006e4e:	31 c0                	xor    eax,eax
c0006e50:	c7 05 b0 fe 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002feb0,0x0
c0006e5a:	83 c4 08             	add    esp,0x8
c0006e5d:	5b                   	pop    ebx
c0006e5e:	c3                   	ret    

c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e5f:	55                   	push   ebp
c0006e60:	57                   	push   edi
c0006e61:	56                   	push   esi
c0006e62:	53                   	push   ebx
c0006e63:	83 ec 20             	sub    esp,0x20
c0006e66:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0006e6a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c0006e72:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0006e76:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c0006e7e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006e82:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c0006e8a:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c0006e92:	89 f7                	mov    edi,esi
c0006e94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0006e99:	89 eb                	mov    ebx,ebp
c0006e9b:	eb 02                	jmp    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0006e9d:	89 c7                	mov    edi,eax
c0006e9f:	31 d2                	xor    edx,edx
c0006ea1:	89 f8                	mov    eax,edi
c0006ea3:	f7 f1                	div    ecx
c0006ea5:	83 c3 01             	add    ebx,0x1
c0006ea8:	39 cf                	cmp    edi,ecx
c0006eaa:	73 f1                	jae    c0006e9d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c0006eac:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eaf:	eb 02                	jmp    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0006eb1:	89 c6                	mov    esi,eax
c0006eb3:	31 d2                	xor    edx,edx
c0006eb5:	89 f0                	mov    eax,esi
c0006eb7:	f7 f1                	div    ecx
c0006eb9:	83 eb 01             	sub    ebx,0x1
c0006ebc:	39 ce                	cmp    esi,ecx
c0006ebe:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec2:	88 13                	mov    BYTE PTR [ebx],dl
c0006ec4:	73 eb                	jae    c0006eb1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c0006ec6:	83 c4 20             	add    esp,0x20
c0006ec9:	89 e8                	mov    eax,ebp
c0006ecb:	5b                   	pop    ebx
c0006ecc:	5e                   	pop    esi
c0006ecd:	5f                   	pop    edi
c0006ece:	5d                   	pop    ebp
c0006ecf:	c3                   	ret    

c0006ed0 <Dbg::logc(char)>:
c0006ed0:	53                   	push   ebx
c0006ed1:	83 ec 14             	sub    esp,0x14
c0006ed4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ed8:	6a 10                	push   0x10
c0006eda:	e8 fd 6a 00 00       	call   c000d9dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006edf:	83 c4 10             	add    esp,0x10
c0006ee2:	84 c0                	test   al,al
c0006ee4:	75 12                	jne    c0006ef8 <Dbg::logc(char)+0x28>
c0006ee6:	ba fd 03 00 00       	mov    edx,0x3fd
c0006eeb:	ec                   	in     al,dx
c0006eec:	a8 20                	test   al,0x20
c0006eee:	74 fb                	je     c0006eeb <Dbg::logc(char)+0x1b>
c0006ef0:	ba f8 03 00 00       	mov    edx,0x3f8
c0006ef5:	88 d8                	mov    al,bl
c0006ef7:	ee                   	out    dx,al
c0006ef8:	83 c4 08             	add    esp,0x8
c0006efb:	5b                   	pop    ebx
c0006efc:	c3                   	ret    

c0006efd <Dbg::logs(char*)>:
c0006efd:	53                   	push   ebx
c0006efe:	83 ec 08             	sub    esp,0x8
c0006f01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006f05:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	74 16                	je     c0006f22 <Dbg::logs(char*)+0x25>
c0006f0c:	83 ec 0c             	sub    esp,0xc
c0006f0f:	83 c3 01             	add    ebx,0x1
c0006f12:	50                   	push   eax
c0006f13:	e8 b8 ff ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006f18:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1b:	83 c4 10             	add    esp,0x10
c0006f1e:	85 c0                	test   eax,eax
c0006f20:	75 ea                	jne    c0006f0c <Dbg::logs(char*)+0xf>
c0006f22:	83 c4 08             	add    esp,0x8
c0006f25:	5b                   	pop    ebx
c0006f26:	c3                   	ret    

c0006f27 <Dbg::logWriteInt(unsigned int)>:
c0006f27:	83 ec 1c             	sub    esp,0x1c
c0006f2a:	6a 0a                	push   0xa
c0006f2c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f30:	50                   	push   eax
c0006f31:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006f35:	50                   	push   eax
c0006f36:	e8 24 ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f3b:	50                   	push   eax
c0006f3c:	e8 bc ff ff ff       	call   c0006efd <Dbg::logs(char*)>
c0006f41:	83 c4 2c             	add    esp,0x2c
c0006f44:	c3                   	ret    

c0006f45 <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f45:	83 ec 1c             	sub    esp,0x1c
c0006f48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006f4c:	50                   	push   eax
c0006f4d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f51:	50                   	push   eax
c0006f52:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0006f56:	52                   	push   edx
c0006f57:	e8 03 ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f5c:	50                   	push   eax
c0006f5d:	e8 9b ff ff ff       	call   c0006efd <Dbg::logs(char*)>
c0006f62:	83 c4 2c             	add    esp,0x2c
c0006f65:	c3                   	ret    

c0006f66 <Dbg::kprintf(char const*, ...)>:
c0006f66:	55                   	push   ebp
c0006f67:	57                   	push   edi
c0006f68:	56                   	push   esi
c0006f69:	53                   	push   ebx
c0006f6a:	83 ec 1c             	sub    esp,0x1c
c0006f6d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006f71:	85 db                	test   ebx,ebx
c0006f73:	0f 84 4c 01 00 00    	je     c00070c5 <Dbg::kprintf(char const*, ...)+0x15f>
c0006f79:	83 ec 0c             	sub    esp,0xc
c0006f7c:	6a 10                	push   0x10
c0006f7e:	e8 59 6a 00 00       	call   c000d9dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006f83:	83 c4 10             	add    esp,0x10
c0006f86:	84 c0                	test   al,al
c0006f88:	74 08                	je     c0006f92 <Dbg::kprintf(char const*, ...)+0x2c>
c0006f8a:	83 c4 1c             	add    esp,0x1c
c0006f8d:	5b                   	pop    ebx
c0006f8e:	5e                   	pop    esi
c0006f8f:	5f                   	pop    edi
c0006f90:	5d                   	pop    ebp
c0006f91:	c3                   	ret    
c0006f92:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006f96:	31 ff                	xor    edi,edi
c0006f98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006f9c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f9f:	85 c0                	test   eax,eax
c0006fa1:	74 e7                	je     c0006f8a <Dbg::kprintf(char const*, ...)+0x24>
c0006fa3:	8d 77 01             	lea    esi,[edi+0x1]
c0006fa6:	83 f8 25             	cmp    eax,0x25
c0006fa9:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fac:	75 4c                	jne    c0006ffa <Dbg::kprintf(char const*, ...)+0x94>
c0006fae:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fb1:	83 c7 02             	add    edi,0x2
c0006fb4:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fb7:	83 e8 25             	sub    eax,0x25
c0006fba:	0f b6 c0             	movzx  eax,al
c0006fbd:	83 f8 53             	cmp    eax,0x53
c0006fc0:	0f 87 e1 00 00 00    	ja     c00070a7 <Dbg::kprintf(char const*, ...)+0x141>
c0006fc6:	ff 24 85 c8 87 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd7838]
c0006fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006fd1:	83 ec 0c             	sub    esp,0xc
c0006fd4:	89 c8                	mov    eax,ecx
c0006fd6:	83 c1 04             	add    ecx,0x4
c0006fd9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006fdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0006fdf:	50                   	push   eax
c0006fe0:	e8 42 ff ff ff       	call   c0006f27 <Dbg::logWriteInt(unsigned int)>
c0006fe5:	83 c4 10             	add    esp,0x10
c0006fe8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006feb:	85 c0                	test   eax,eax
c0006fed:	74 9b                	je     c0006f8a <Dbg::kprintf(char const*, ...)+0x24>
c0006fef:	8d 77 01             	lea    esi,[edi+0x1]
c0006ff2:	83 f8 25             	cmp    eax,0x25
c0006ff5:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006ff8:	74 b4                	je     c0006fae <Dbg::kprintf(char const*, ...)+0x48>
c0006ffa:	83 ec 0c             	sub    esp,0xc
c0006ffd:	89 f7                	mov    edi,esi
c0006fff:	50                   	push   eax
c0007000:	89 ee                	mov    esi,ebp
c0007002:	e8 c9 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007007:	83 c4 10             	add    esp,0x10
c000700a:	eb dc                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c000700c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007010:	83 ec 0c             	sub    esp,0xc
c0007013:	89 c8                	mov    eax,ecx
c0007015:	83 c1 04             	add    ecx,0x4
c0007018:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000701c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000701e:	55                   	push   ebp
c000701f:	e8 d9 fe ff ff       	call   c0006efd <Dbg::logs(char*)>
c0007024:	83 c4 10             	add    esp,0x10
c0007027:	eb bf                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007029:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000702d:	83 ec 0c             	sub    esp,0xc
c0007030:	89 d0                	mov    eax,edx
c0007032:	83 c2 04             	add    edx,0x4
c0007035:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007039:	8b 08                	mov    ecx,DWORD PTR [eax]
c000703b:	51                   	push   ecx
c000703c:	e8 e6 fe ff ff       	call   c0006f27 <Dbg::logWriteInt(unsigned int)>
c0007041:	83 c4 10             	add    esp,0x10
c0007044:	eb a2                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007046:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000704a:	83 ec 0c             	sub    esp,0xc
c000704d:	89 d0                	mov    eax,edx
c000704f:	83 c2 04             	add    edx,0x4
c0007052:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007056:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0007059:	50                   	push   eax
c000705a:	e8 71 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000705f:	83 c4 10             	add    esp,0x10
c0007062:	eb 84                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007064:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007068:	89 c8                	mov    eax,ecx
c000706a:	83 c1 04             	add    ecx,0x4
c000706d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007071:	83 ec 08             	sub    esp,0x8
c0007074:	6a 10                	push   0x10
c0007076:	8b 10                	mov    edx,DWORD PTR [eax]
c0007078:	52                   	push   edx
c0007079:	e8 c7 fe ff ff       	call   c0006f45 <Dbg::logWriteIntBase(unsigned int, int)>
c000707e:	83 c4 10             	add    esp,0x10
c0007081:	e9 62 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007086:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000708a:	89 d0                	mov    eax,edx
c000708c:	83 c2 08             	add    edx,0x8
c000708f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007093:	eb dc                	jmp    c0007071 <Dbg::kprintf(char const*, ...)+0x10b>
c0007095:	83 ec 0c             	sub    esp,0xc
c0007098:	6a 25                	push   0x25
c000709a:	e8 31 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000709f:	83 c4 10             	add    esp,0x10
c00070a2:	e9 41 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c00070a7:	83 ec 0c             	sub    esp,0xc
c00070aa:	6a 25                	push   0x25
c00070ac:	e8 1f fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c00070b1:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00070b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00070b8:	e8 13 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c00070bd:	83 c4 10             	add    esp,0x10
c00070c0:	e9 23 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c00070c5:	83 ec 0c             	sub    esp,0xc
c00070c8:	68 90 87 02 c0       	push   0xc0028790
c00070cd:	e8 94 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00070d2:	83 c4 10             	add    esp,0x10
c00070d5:	83 c4 1c             	add    esp,0x1c
c00070d8:	5b                   	pop    ebx
c00070d9:	5e                   	pop    esi
c00070da:	5f                   	pop    edi
c00070db:	5d                   	pop    ebp
c00070dc:	c3                   	ret    
c00070dd:	66 90                	xchg   ax,ax
c00070df:	90                   	nop

c00070e0 <KiUbsanPrintDetails(char const*, void*)>:
c00070e0:	83 ec 1c             	sub    esp,0x1c
c00070e3:	83 ec 08             	sub    esp,0x8
c00070e6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070ea:	68 18 89 02 c0       	push   0xc0028918
c00070ef:	e8 72 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00070f4:	83 c4 10             	add    esp,0x10
c00070f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00070fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007103:	8b 00                	mov    eax,DWORD PTR [eax]
c0007105:	83 ec 08             	sub    esp,0x8
c0007108:	50                   	push   eax
c0007109:	68 2c 89 02 c0       	push   0xc002892c
c000710e:	e8 53 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007113:	83 c4 10             	add    esp,0x10
c0007116:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000711a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000711d:	83 ec 08             	sub    esp,0x8
c0007120:	50                   	push   eax
c0007121:	68 36 89 02 c0       	push   0xc0028936
c0007126:	e8 3b fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000712b:	83 c4 10             	add    esp,0x10
c000712e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007132:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0007135:	83 ec 08             	sub    esp,0x8
c0007138:	50                   	push   eax
c0007139:	68 40 89 02 c0       	push   0xc0028940
c000713e:	e8 23 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007143:	83 c4 10             	add    esp,0x10
c0007146:	90                   	nop
c0007147:	83 c4 1c             	add    esp,0x1c
c000714a:	c3                   	ret    
c000714b:	90                   	nop

c000714c <__ubsan_handle_type_mismatch_v1>:
c000714c:	83 ec 0c             	sub    esp,0xc
c000714f:	83 ec 08             	sub    esp,0x8
c0007152:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007156:	68 84 8a 02 c0       	push   0xc0028a84
c000715b:	e8 80 ff ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007160:	83 c4 10             	add    esp,0x10
c0007163:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007168:	75 16                	jne    c0007180 <__ubsan_handle_type_mismatch_v1+0x34>
c000716a:	83 ec 0c             	sub    esp,0xc
c000716d:	68 4a 89 02 c0       	push   0xc002894a
c0007172:	e8 ef fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007177:	83 c4 10             	add    esp,0x10
c000717a:	e9 91 00 00 00       	jmp    c0007210 <__ubsan_handle_type_mismatch_v1+0xc4>
c000717f:	90                   	nop
c0007180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007184:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007187:	85 c0                	test   eax,eax
c0007189:	74 29                	je     c00071b4 <__ubsan_handle_type_mismatch_v1+0x68>
c000718b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000718f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007192:	83 e8 01             	sub    eax,0x1
c0007195:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0007199:	75 19                	jne    c00071b4 <__ubsan_handle_type_mismatch_v1+0x68>
c000719b:	83 ec 08             	sub    esp,0x8
c000719e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00071a2:	68 a4 8a 02 c0       	push   0xc0028aa4
c00071a7:	e8 ba fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071ac:	83 c4 10             	add    esp,0x10
c00071af:	eb 5f                	jmp    c0007210 <__ubsan_handle_type_mismatch_v1+0xc4>
c00071b1:	8d 76 00             	lea    esi,[esi+0x0]
c00071b4:	83 ec 0c             	sub    esp,0xc
c00071b7:	68 5f 89 02 c0       	push   0xc002895f
c00071bc:	e8 a5 fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071c1:	83 c4 10             	add    esp,0x10
c00071c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071c8:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071cb:	0f b6 c0             	movzx  eax,al
c00071ce:	83 ec 08             	sub    esp,0x8
c00071d1:	50                   	push   eax
c00071d2:	68 79 89 02 c0       	push   0xc0028979
c00071d7:	e8 8a fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071dc:	83 c4 10             	add    esp,0x10
c00071df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071e3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071e6:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071f1:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071f4:	0f b6 c0             	movzx  eax,al
c00071f7:	8b 04 85 60 cc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd33a0]
c00071fe:	51                   	push   ecx
c00071ff:	52                   	push   edx
c0007200:	50                   	push   eax
c0007201:	68 cc 8a 02 c0       	push   0xc0028acc
c0007206:	e8 5b fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000720b:	83 c4 10             	add    esp,0x10
c000720e:	66 90                	xchg   ax,ax
c0007210:	83 ec 0c             	sub    esp,0xc
c0007213:	68 84 8a 02 c0       	push   0xc0028a84
c0007218:	e8 0b 91 00 00       	call   c0010328 <KePanic(char const*)>
c000721d:	83 c4 10             	add    esp,0x10
c0007220:	90                   	nop
c0007221:	83 c4 0c             	add    esp,0xc
c0007224:	c3                   	ret    
c0007225:	8d 76 00             	lea    esi,[esi+0x0]

c0007228 <__ubsan_handle_pointer_overflow>:
c0007228:	83 ec 0c             	sub    esp,0xc
c000722b:	83 ec 08             	sub    esp,0x8
c000722e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007232:	68 14 8b 02 c0       	push   0xc0028b14
c0007237:	e8 a4 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c000723c:	83 c4 10             	add    esp,0x10
c000723f:	83 ec 0c             	sub    esp,0xc
c0007242:	68 14 8b 02 c0       	push   0xc0028b14
c0007247:	e8 dc 90 00 00       	call   c0010328 <KePanic(char const*)>
c000724c:	83 c4 10             	add    esp,0x10
c000724f:	90                   	nop
c0007250:	83 c4 0c             	add    esp,0xc
c0007253:	c3                   	ret    

c0007254 <__ubsan_handle_out_of_bounds>:
c0007254:	83 ec 0c             	sub    esp,0xc
c0007257:	83 ec 08             	sub    esp,0x8
c000725a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000725e:	68 84 89 02 c0       	push   0xc0028984
c0007263:	e8 78 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007268:	83 c4 10             	add    esp,0x10
c000726b:	83 ec 0c             	sub    esp,0xc
c000726e:	68 84 89 02 c0       	push   0xc0028984
c0007273:	e8 b0 90 00 00       	call   c0010328 <KePanic(char const*)>
c0007278:	83 c4 10             	add    esp,0x10
c000727b:	90                   	nop
c000727c:	83 c4 0c             	add    esp,0xc
c000727f:	c3                   	ret    

c0007280 <__ubsan_handle_add_overflow>:
c0007280:	83 ec 0c             	sub    esp,0xc
c0007283:	83 ec 08             	sub    esp,0x8
c0007286:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000728a:	68 a1 89 02 c0       	push   0xc00289a1
c000728f:	e8 4c fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007294:	83 c4 10             	add    esp,0x10
c0007297:	83 ec 0c             	sub    esp,0xc
c000729a:	68 a1 89 02 c0       	push   0xc00289a1
c000729f:	e8 84 90 00 00       	call   c0010328 <KePanic(char const*)>
c00072a4:	83 c4 10             	add    esp,0x10
c00072a7:	90                   	nop
c00072a8:	83 c4 0c             	add    esp,0xc
c00072ab:	c3                   	ret    

c00072ac <__ubsan_handle_load_invalid_value>:
c00072ac:	83 ec 0c             	sub    esp,0xc
c00072af:	83 ec 08             	sub    esp,0x8
c00072b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b6:	68 34 8b 02 c0       	push   0xc0028b34
c00072bb:	e8 20 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c00072c0:	83 c4 10             	add    esp,0x10
c00072c3:	83 ec 0c             	sub    esp,0xc
c00072c6:	68 34 8b 02 c0       	push   0xc0028b34
c00072cb:	e8 58 90 00 00       	call   c0010328 <KePanic(char const*)>
c00072d0:	83 c4 10             	add    esp,0x10
c00072d3:	90                   	nop
c00072d4:	83 c4 0c             	add    esp,0xc
c00072d7:	c3                   	ret    

c00072d8 <__ubsan_handle_divrem_overflow>:
c00072d8:	83 ec 0c             	sub    esp,0xc
c00072db:	83 ec 08             	sub    esp,0x8
c00072de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072e2:	68 58 8b 02 c0       	push   0xc0028b58
c00072e7:	e8 f4 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c00072ec:	83 c4 10             	add    esp,0x10
c00072ef:	83 ec 0c             	sub    esp,0xc
c00072f2:	68 58 8b 02 c0       	push   0xc0028b58
c00072f7:	e8 2c 90 00 00       	call   c0010328 <KePanic(char const*)>
c00072fc:	83 c4 10             	add    esp,0x10
c00072ff:	90                   	nop
c0007300:	83 c4 0c             	add    esp,0xc
c0007303:	c3                   	ret    

c0007304 <__ubsan_handle_mul_overflow>:
c0007304:	83 ec 0c             	sub    esp,0xc
c0007307:	83 ec 08             	sub    esp,0x8
c000730a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000730e:	68 bd 89 02 c0       	push   0xc00289bd
c0007313:	e8 c8 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007318:	83 c4 10             	add    esp,0x10
c000731b:	83 ec 0c             	sub    esp,0xc
c000731e:	68 bd 89 02 c0       	push   0xc00289bd
c0007323:	e8 00 90 00 00       	call   c0010328 <KePanic(char const*)>
c0007328:	83 c4 10             	add    esp,0x10
c000732b:	90                   	nop
c000732c:	83 c4 0c             	add    esp,0xc
c000732f:	c3                   	ret    

c0007330 <__ubsan_handle_sub_overflow>:
c0007330:	83 ec 0c             	sub    esp,0xc
c0007333:	83 ec 08             	sub    esp,0x8
c0007336:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000733a:	68 d9 89 02 c0       	push   0xc00289d9
c000733f:	e8 9c fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007344:	83 c4 10             	add    esp,0x10
c0007347:	83 ec 0c             	sub    esp,0xc
c000734a:	68 d9 89 02 c0       	push   0xc00289d9
c000734f:	e8 d4 8f 00 00       	call   c0010328 <KePanic(char const*)>
c0007354:	83 c4 10             	add    esp,0x10
c0007357:	90                   	nop
c0007358:	83 c4 0c             	add    esp,0xc
c000735b:	c3                   	ret    

c000735c <__ubsan_handle_shift_out_of_bounds>:
c000735c:	83 ec 0c             	sub    esp,0xc
c000735f:	83 ec 08             	sub    esp,0x8
c0007362:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007366:	68 78 8b 02 c0       	push   0xc0028b78
c000736b:	e8 70 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007370:	83 c4 10             	add    esp,0x10
c0007373:	83 ec 0c             	sub    esp,0xc
c0007376:	68 78 8b 02 c0       	push   0xc0028b78
c000737b:	e8 a8 8f 00 00       	call   c0010328 <KePanic(char const*)>
c0007380:	83 c4 10             	add    esp,0x10
c0007383:	90                   	nop
c0007384:	83 c4 0c             	add    esp,0xc
c0007387:	c3                   	ret    

c0007388 <__ubsan_handle_negate_overflow>:
c0007388:	83 ec 0c             	sub    esp,0xc
c000738b:	83 ec 08             	sub    esp,0x8
c000738e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007392:	68 9c 8b 02 c0       	push   0xc0028b9c
c0007397:	e8 44 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c000739c:	83 c4 10             	add    esp,0x10
c000739f:	83 ec 0c             	sub    esp,0xc
c00073a2:	68 9c 8b 02 c0       	push   0xc0028b9c
c00073a7:	e8 7c 8f 00 00       	call   c0010328 <KePanic(char const*)>
c00073ac:	83 c4 10             	add    esp,0x10
c00073af:	90                   	nop
c00073b0:	83 c4 0c             	add    esp,0xc
c00073b3:	c3                   	ret    

c00073b4 <Hardware::registerIRQ(int)>:
c00073b4:	53                   	push   ebx
c00073b5:	31 c9                	xor    ecx,ecx
c00073b7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00073bb:	0f b6 42 50          	movzx  eax,BYTE PTR [edx+0x50]
c00073bf:	89 c3                	mov    ebx,eax
c00073c1:	8d 76 00             	lea    esi,[esi+0x0]
c00073c4:	0f a3 c8             	bt     eax,ecx
c00073c7:	72 17                	jb     c00073e0 <Hardware::registerIRQ(int)+0x2c>
c00073c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00073cd:	89 44 8a 40          	mov    DWORD PTR [edx+ecx*4+0x40],eax
c00073d1:	b8 01 00 00 00       	mov    eax,0x1
c00073d6:	d3 e0                	shl    eax,cl
c00073d8:	09 d8                	or     eax,ebx
c00073da:	88 42 50             	mov    BYTE PTR [edx+0x50],al
c00073dd:	eb 09                	jmp    c00073e8 <Hardware::registerIRQ(int)+0x34>
c00073df:	90                   	nop
c00073e0:	41                   	inc    ecx
c00073e1:	83 f9 04             	cmp    ecx,0x4
c00073e4:	75 de                	jne    c00073c4 <Hardware::registerIRQ(int)+0x10>
c00073e6:	66 90                	xchg   ax,ax
c00073e8:	5b                   	pop    ebx
c00073e9:	c3                   	ret    

c00073ea <Hardware::deregisterIRQ(int)>:
c00073ea:	56                   	push   esi
c00073eb:	31 c9                	xor    ecx,ecx
c00073ed:	53                   	push   ebx
c00073ee:	bb 01 00 00 00       	mov    ebx,0x1
c00073f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00073f7:	90                   	nop
c00073f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00073fc:	39 44 8a 40          	cmp    DWORD PTR [edx+ecx*4+0x40],eax
c0007400:	75 0e                	jne    c0007410 <Hardware::deregisterIRQ(int)+0x26>
c0007402:	8b 72 50             	mov    esi,DWORD PTR [edx+0x50]
c0007405:	89 d8                	mov    eax,ebx
c0007407:	d3 e0                	shl    eax,cl
c0007409:	f7 d0                	not    eax
c000740b:	21 f0                	and    eax,esi
c000740d:	88 42 50             	mov    BYTE PTR [edx+0x50],al
c0007410:	41                   	inc    ecx
c0007411:	83 f9 04             	cmp    ecx,0x4
c0007414:	75 e2                	jne    c00073f8 <Hardware::deregisterIRQ(int)+0xe>
c0007416:	5b                   	pop    ebx
c0007417:	5e                   	pop    esi
c0007418:	c3                   	ret    
c0007419:	90                   	nop

c000741a <Hardware::getHumanReadableName()>:
c000741a:	83 ec 18             	sub    esp,0x18
c000741d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007421:	8b 10                	mov    edx,DWORD PTR [eax]
c0007423:	50                   	push   eax
c0007424:	ff 12                	call   DWORD PTR [edx]
c0007426:	83 c4 10             	add    esp,0x10
c0007429:	85 c0                	test   eax,eax
c000742b:	74 0f                	je     c000743c <Hardware::getHumanReadableName()+0x22>
c000742d:	8b 10                	mov    edx,DWORD PTR [eax]
c000742f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007433:	8b 02                	mov    eax,DWORD PTR [edx]
c0007435:	83 c4 0c             	add    esp,0xc
c0007438:	ff e0                	jmp    eax
c000743a:	66 90                	xchg   ax,ax
c000743c:	b8 bb 8b 02 c0       	mov    eax,0xc0028bbb
c0007441:	83 c4 0c             	add    esp,0xc
c0007444:	c3                   	ret    
c0007445:	90                   	nop
c0007446:	66 90                	xchg   ax,ax

c0007448 <Hardware::~Hardware()>:
c0007448:	83 ec 0c             	sub    esp,0xc
c000744b:	ba f8 8c 02 c0       	mov    edx,0xc0028cf8
c0007450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007454:	89 10                	mov    DWORD PTR [eax],edx
c0007456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000745a:	83 c0 2c             	add    eax,0x2c
c000745d:	83 ec 0c             	sub    esp,0xc
c0007460:	50                   	push   eax
c0007461:	e8 2a f4 01 00       	call   c0026890 <std::vector<DevicePortRange>::~vector()>
c0007466:	83 c4 10             	add    esp,0x10
c0007469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000746d:	83 c0 18             	add    eax,0x18
c0007470:	83 ec 0c             	sub    esp,0xc
c0007473:	50                   	push   eax
c0007474:	e8 e3 f3 01 00       	call   c002685c <std::vector<DeviceMemoryRange>::~vector()>
c0007479:	83 c4 10             	add    esp,0x10
c000747c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007480:	83 c0 04             	add    eax,0x4
c0007483:	83 ec 0c             	sub    esp,0xc
c0007486:	50                   	push   eax
c0007487:	e8 9c f3 01 00       	call   c0026828 <std::vector<Hardware*>::~vector()>
c000748c:	83 c4 10             	add    esp,0x10
c000748f:	90                   	nop
c0007490:	83 c4 0c             	add    esp,0xc
c0007493:	c3                   	ret    

c0007494 <Hardware::~Hardware()>:
c0007494:	83 ec 0c             	sub    esp,0xc
c0007497:	83 ec 0c             	sub    esp,0xc
c000749a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000749e:	e8 a5 ff ff ff       	call   c0007448 <Hardware::~Hardware()>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	83 ec 08             	sub    esp,0x8
c00074a9:	6a 54                	push   0x54
c00074ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00074af:	e8 20 66 00 00       	call   c000dad4 <operator delete(void*, unsigned long)>
c00074b4:	83 c4 10             	add    esp,0x10
c00074b7:	83 c4 0c             	add    esp,0xc
c00074ba:	c3                   	ret    
c00074bb:	90                   	nop

c00074bc <Hardware::Hardware()>:
c00074bc:	83 ec 0c             	sub    esp,0xc
c00074bf:	ba f8 8c 02 c0       	mov    edx,0xc0028cf8
c00074c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074c8:	89 10                	mov    DWORD PTR [eax],edx
c00074ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074ce:	83 c0 04             	add    eax,0x4
c00074d1:	83 ec 0c             	sub    esp,0xc
c00074d4:	50                   	push   eax
c00074d5:	e8 36 f4 01 00       	call   c0026910 <std::vector<Hardware*>::vector()>
c00074da:	83 c4 10             	add    esp,0x10
c00074dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074e1:	83 c0 18             	add    eax,0x18
c00074e4:	83 ec 0c             	sub    esp,0xc
c00074e7:	50                   	push   eax
c00074e8:	e8 9f f4 01 00       	call   c002698c <std::vector<DeviceMemoryRange>::vector()>
c00074ed:	83 c4 10             	add    esp,0x10
c00074f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074f4:	83 c0 2c             	add    eax,0x2c
c00074f7:	83 ec 0c             	sub    esp,0xc
c00074fa:	50                   	push   eax
c00074fb:	e8 08 f5 01 00       	call   c0026a08 <std::vector<DevicePortRange>::vector()>
c0007500:	83 c4 10             	add    esp,0x10
c0007503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007507:	c6 40 50 00          	mov    BYTE PTR [eax+0x50],0x0
c000750b:	90                   	nop
c000750c:	83 c4 0c             	add    esp,0xc
c000750f:	c3                   	ret    

c0007510 <KeSetupDeviceTree()>:
c0007510:	53                   	push   ebx
c0007511:	83 ec 14             	sub    esp,0x14
c0007514:	6a 58                	push   0x58
c0007516:	e8 b9 89 00 00       	call   c000fed4 <malloc>
c000751b:	89 04 24             	mov    DWORD PTR [esp],eax
c000751e:	89 c3                	mov    ebx,eax
c0007520:	e8 5f f5 01 00       	call   c0026a84 <RootHardware::RootHardware()>
c0007525:	89 1d b8 fe 02 c0    	mov    DWORD PTR ds:0xc002feb8,ebx
c000752b:	83 c4 18             	add    esp,0x18
c000752e:	5b                   	pop    ebx
c000752f:	c3                   	ret    

c0007530 <Hardware::printRecursively(int)>:
c0007530:	55                   	push   ebp
c0007531:	57                   	push   edi
c0007532:	56                   	push   esi
c0007533:	31 f6                	xor    esi,esi
c0007535:	53                   	push   ebx
c0007536:	83 ec 5c             	sub    esp,0x5c
c0007539:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000753d:	8b 6c 24 74          	mov    ebp,DWORD PTR [esp+0x74]
c0007541:	8d 76 00             	lea    esi,[esi+0x0]
c0007544:	39 ee                	cmp    esi,ebp
c0007546:	7d 14                	jge    c000755c <Hardware::printRecursively(int)+0x2c>
c0007548:	83 ec 0c             	sub    esp,0xc
c000754b:	46                   	inc    esi
c000754c:	68 0a b1 02 c0       	push   0xc002b10a
c0007551:	e8 10 fa ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007556:	83 c4 10             	add    esp,0x10
c0007559:	eb e9                	jmp    c0007544 <Hardware::printRecursively(int)+0x14>
c000755b:	90                   	nop
c000755c:	8d 7c 24 14          	lea    edi,[esp+0x14]
c0007560:	be 80 8c 02 c0       	mov    esi,0xc0028c80
c0007565:	b9 0f 00 00 00       	mov    ecx,0xf
c000756a:	fc                   	cld    
c000756b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000756d:	83 ec 0c             	sub    esp,0xc
c0007570:	53                   	push   ebx
c0007571:	e8 a4 fe ff ff       	call   c000741a <Hardware::getHumanReadableName()>
c0007576:	89 c6                	mov    esi,eax
c0007578:	8b 03                	mov    eax,DWORD PTR [ebx]
c000757a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000757d:	83 c3 04             	add    ebx,0x4
c0007580:	ff 50 04             	call   DWORD PTR [eax+0x4]
c0007583:	83 c4 0c             	add    esp,0xc
c0007586:	56                   	push   esi
c0007587:	6b c0 0c             	imul   eax,eax,0xc
c000758a:	8d 44 04 1c          	lea    eax,[esp+eax*1+0x1c]
c000758e:	50                   	push   eax
c000758f:	68 ca 8b 02 c0       	push   0xc0028bca
c0007594:	e8 cd f9 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007599:	8d 74 24 18          	lea    esi,[esp+0x18]
c000759d:	5f                   	pop    edi
c000759e:	58                   	pop    eax
c000759f:	53                   	push   ebx
c00075a0:	56                   	push   esi
c00075a1:	e8 76 f5 01 00       	call   c0026b1c <std::vector<Hardware*>::begin()>
c00075a6:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00075aa:	83 ec 0c             	sub    esp,0xc
c00075ad:	53                   	push   ebx
c00075ae:	57                   	push   edi
c00075af:	e8 8c f5 01 00       	call   c0026b40 <std::vector<Hardware*>::end()>
c00075b4:	83 c4 1c             	add    esp,0x1c
c00075b7:	90                   	nop
c00075b8:	51                   	push   ecx
c00075b9:	51                   	push   ecx
c00075ba:	57                   	push   edi
c00075bb:	56                   	push   esi
c00075bc:	e8 4b f2 01 00       	call   c002680c <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c00075c1:	83 c4 10             	add    esp,0x10
c00075c4:	84 c0                	test   al,al
c00075c6:	74 30                	je     c00075f8 <Hardware::printRecursively(int)+0xc8>
c00075c8:	83 ec 0c             	sub    esp,0xc
c00075cb:	56                   	push   esi
c00075cc:	e8 4f f2 01 00       	call   c0026820 <std::vector<Hardware*>::iterator::operator*() const>
c00075d1:	5a                   	pop    edx
c00075d2:	8d 55 01             	lea    edx,[ebp+0x1]
c00075d5:	59                   	pop    ecx
c00075d6:	52                   	push   edx
c00075d7:	ff 30                	push   DWORD PTR [eax]
c00075d9:	e8 52 ff ff ff       	call   c0007530 <Hardware::printRecursively(int)>
c00075de:	8d 5c 24 20          	lea    ebx,[esp+0x20]
c00075e2:	58                   	pop    eax
c00075e3:	5a                   	pop    edx
c00075e4:	56                   	push   esi
c00075e5:	53                   	push   ebx
c00075e6:	e8 79 f5 01 00       	call   c0026b64 <std::vector<Hardware*>::iterator::operator++()>
c00075eb:	53                   	push   ebx
c00075ec:	e8 07 f2 01 00       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c00075f1:	83 c4 10             	add    esp,0x10
c00075f4:	eb c2                	jmp    c00075b8 <Hardware::printRecursively(int)+0x88>
c00075f6:	66 90                	xchg   ax,ax
c00075f8:	83 ec 0c             	sub    esp,0xc
c00075fb:	57                   	push   edi
c00075fc:	e8 f7 f1 01 00       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c0007601:	89 34 24             	mov    DWORD PTR [esp],esi
c0007604:	e8 ef f1 01 00       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c0007609:	83 c4 6c             	add    esp,0x6c
c000760c:	5b                   	pop    ebx
c000760d:	5e                   	pop    esi
c000760e:	5f                   	pop    edi
c000760f:	5d                   	pop    ebp
c0007610:	c3                   	ret    

c0007611 <KePrintDeviceTree()>:
c0007611:	83 ec 18             	sub    esp,0x18
c0007614:	68 d1 8b 02 c0       	push   0xc0028bd1
c0007619:	e8 48 f9 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000761e:	58                   	pop    eax
c000761f:	5a                   	pop    edx
c0007620:	6a 00                	push   0x0
c0007622:	ff 35 b8 fe 02 c0    	push   DWORD PTR ds:0xc002feb8
c0007628:	e8 03 ff ff ff       	call   c0007530 <Hardware::printRecursively(int)>
c000762d:	c7 04 24 0c 8c 02 c0 	mov    DWORD PTR [esp],0xc0028c0c
c0007634:	e8 2d f9 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007639:	83 c4 1c             	add    esp,0x1c
c000763c:	c3                   	ret    
c000763d:	90                   	nop

c000763e <Hardware::detectRecursively()>:
c000763e:	57                   	push   edi
c000763f:	56                   	push   esi
c0007640:	53                   	push   ebx
c0007641:	83 ec 1c             	sub    esp,0x1c
c0007644:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0007648:	8b 03                	mov    eax,DWORD PTR [ebx]
c000764a:	53                   	push   ebx
c000764b:	ff 10                	call   DWORD PTR [eax]
c000764d:	83 c4 10             	add    esp,0x10
c0007650:	85 c0                	test   eax,eax
c0007652:	74 0c                	je     c0007660 <Hardware::detectRecursively()+0x22>
c0007654:	8b 10                	mov    edx,DWORD PTR [eax]
c0007656:	83 ec 0c             	sub    esp,0xc
c0007659:	50                   	push   eax
c000765a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000765d:	83 c4 10             	add    esp,0x10
c0007660:	8d 74 24 04          	lea    esi,[esp+0x4]
c0007664:	83 c3 04             	add    ebx,0x4
c0007667:	50                   	push   eax
c0007668:	50                   	push   eax
c0007669:	53                   	push   ebx
c000766a:	56                   	push   esi
c000766b:	e8 ac f4 01 00       	call   c0026b1c <std::vector<Hardware*>::begin()>
c0007670:	8d 7c 24 14          	lea    edi,[esp+0x14]
c0007674:	83 ec 0c             	sub    esp,0xc
c0007677:	53                   	push   ebx
c0007678:	57                   	push   edi
c0007679:	e8 c2 f4 01 00       	call   c0026b40 <std::vector<Hardware*>::end()>
c000767e:	83 c4 1c             	add    esp,0x1c
c0007681:	8d 76 00             	lea    esi,[esi+0x0]
c0007684:	50                   	push   eax
c0007685:	50                   	push   eax
c0007686:	57                   	push   edi
c0007687:	56                   	push   esi
c0007688:	e8 7f f1 01 00       	call   c002680c <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c000768d:	83 c4 10             	add    esp,0x10
c0007690:	84 c0                	test   al,al
c0007692:	74 2c                	je     c00076c0 <Hardware::detectRecursively()+0x82>
c0007694:	83 ec 0c             	sub    esp,0xc
c0007697:	56                   	push   esi
c0007698:	e8 83 f1 01 00       	call   c0026820 <std::vector<Hardware*>::iterator::operator*() const>
c000769d:	5a                   	pop    edx
c000769e:	ff 30                	push   DWORD PTR [eax]
c00076a0:	e8 99 ff ff ff       	call   c000763e <Hardware::detectRecursively()>
c00076a5:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00076a9:	59                   	pop    ecx
c00076aa:	58                   	pop    eax
c00076ab:	56                   	push   esi
c00076ac:	53                   	push   ebx
c00076ad:	e8 b2 f4 01 00       	call   c0026b64 <std::vector<Hardware*>::iterator::operator++()>
c00076b2:	53                   	push   ebx
c00076b3:	e8 40 f1 01 00       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c00076b8:	83 c4 10             	add    esp,0x10
c00076bb:	eb c7                	jmp    c0007684 <Hardware::detectRecursively()+0x46>
c00076bd:	8d 76 00             	lea    esi,[esi+0x0]
c00076c0:	83 ec 0c             	sub    esp,0xc
c00076c3:	57                   	push   edi
c00076c4:	e8 2f f1 01 00       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c00076c9:	89 34 24             	mov    DWORD PTR [esp],esi
c00076cc:	e8 27 f1 01 00       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c00076d1:	83 c4 20             	add    esp,0x20
c00076d4:	5b                   	pop    ebx
c00076d5:	5e                   	pop    esi
c00076d6:	5f                   	pop    edi
c00076d7:	c3                   	ret    

c00076d8 <Hardware::deinitialiseRecursively()>:
c00076d8:	55                   	push   ebp
c00076d9:	57                   	push   edi
c00076da:	56                   	push   esi
c00076db:	53                   	push   ebx
c00076dc:	83 ec 1c             	sub    esp,0x1c
c00076df:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00076e3:	8d 5c 24 04          	lea    ebx,[esp+0x4]
c00076e7:	50                   	push   eax
c00076e8:	50                   	push   eax
c00076e9:	8d 6e 04             	lea    ebp,[esi+0x4]
c00076ec:	55                   	push   ebp
c00076ed:	53                   	push   ebx
c00076ee:	e8 29 f4 01 00       	call   c0026b1c <std::vector<Hardware*>::begin()>
c00076f3:	8d 7c 24 14          	lea    edi,[esp+0x14]
c00076f7:	83 ec 0c             	sub    esp,0xc
c00076fa:	55                   	push   ebp
c00076fb:	57                   	push   edi
c00076fc:	e8 3f f4 01 00       	call   c0026b40 <std::vector<Hardware*>::end()>
c0007701:	83 c4 1c             	add    esp,0x1c
c0007704:	50                   	push   eax
c0007705:	50                   	push   eax
c0007706:	57                   	push   edi
c0007707:	53                   	push   ebx
c0007708:	e8 ff f0 01 00       	call   c002680c <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c000770d:	83 c4 10             	add    esp,0x10
c0007710:	84 c0                	test   al,al
c0007712:	74 2c                	je     c0007740 <Hardware::deinitialiseRecursively()+0x68>
c0007714:	83 ec 0c             	sub    esp,0xc
c0007717:	53                   	push   ebx
c0007718:	e8 03 f1 01 00       	call   c0026820 <std::vector<Hardware*>::iterator::operator*() const>
c000771d:	5a                   	pop    edx
c000771e:	ff 30                	push   DWORD PTR [eax]
c0007720:	e8 b3 ff ff ff       	call   c00076d8 <Hardware::deinitialiseRecursively()>
c0007725:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0007729:	59                   	pop    ecx
c000772a:	58                   	pop    eax
c000772b:	53                   	push   ebx
c000772c:	55                   	push   ebp
c000772d:	e8 32 f4 01 00       	call   c0026b64 <std::vector<Hardware*>::iterator::operator++()>
c0007732:	55                   	push   ebp
c0007733:	e8 c0 f0 01 00       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c0007738:	83 c4 10             	add    esp,0x10
c000773b:	eb c7                	jmp    c0007704 <Hardware::deinitialiseRecursively()+0x2c>
c000773d:	8d 76 00             	lea    esi,[esi+0x0]
c0007740:	83 ec 0c             	sub    esp,0xc
c0007743:	57                   	push   edi
c0007744:	e8 af f0 01 00       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c0007749:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000774c:	e8 a7 f0 01 00       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c0007751:	8b 06                	mov    eax,DWORD PTR [esi]
c0007753:	89 34 24             	mov    DWORD PTR [esp],esi
c0007756:	ff 10                	call   DWORD PTR [eax]
c0007758:	83 c4 10             	add    esp,0x10
c000775b:	85 c0                	test   eax,eax
c000775d:	74 0d                	je     c000776c <Hardware::deinitialiseRecursively()+0x94>
c000775f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007761:	83 ec 0c             	sub    esp,0xc
c0007764:	50                   	push   eax
c0007765:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007768:	83 c4 10             	add    esp,0x10
c000776b:	90                   	nop
c000776c:	83 c4 1c             	add    esp,0x1c
c000776f:	5b                   	pop    ebx
c0007770:	5e                   	pop    esi
c0007771:	5f                   	pop    edi
c0007772:	5d                   	pop    ebp
c0007773:	c3                   	ret    

c0007774 <Hardware::setPowerStateRecursively(DevicePowerState)>:
c0007774:	55                   	push   ebp
c0007775:	57                   	push   edi
c0007776:	56                   	push   esi
c0007777:	53                   	push   ebx
c0007778:	83 ec 1c             	sub    esp,0x1c
c000777b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000777f:	8d 5c 24 04          	lea    ebx,[esp+0x4]
c0007783:	55                   	push   ebp
c0007784:	55                   	push   ebp
c0007785:	8d 7e 04             	lea    edi,[esi+0x4]
c0007788:	57                   	push   edi
c0007789:	53                   	push   ebx
c000778a:	e8 8d f3 01 00       	call   c0026b1c <std::vector<Hardware*>::begin()>
c000778f:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0007793:	83 ec 0c             	sub    esp,0xc
c0007796:	57                   	push   edi
c0007797:	55                   	push   ebp
c0007798:	e8 a3 f3 01 00       	call   c0026b40 <std::vector<Hardware*>::end()>
c000779d:	83 c4 1c             	add    esp,0x1c
c00077a0:	51                   	push   ecx
c00077a1:	51                   	push   ecx
c00077a2:	55                   	push   ebp
c00077a3:	53                   	push   ebx
c00077a4:	e8 63 f0 01 00       	call   c002680c <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c00077a9:	83 c4 10             	add    esp,0x10
c00077ac:	84 c0                	test   al,al
c00077ae:	74 30                	je     c00077e0 <Hardware::setPowerStateRecursively(DevicePowerState)+0x6c>
c00077b0:	83 ec 0c             	sub    esp,0xc
c00077b3:	53                   	push   ebx
c00077b4:	e8 67 f0 01 00       	call   c0026820 <std::vector<Hardware*>::iterator::operator*() const>
c00077b9:	59                   	pop    ecx
c00077ba:	5f                   	pop    edi
c00077bb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00077bf:	ff 30                	push   DWORD PTR [eax]
c00077c1:	e8 ae ff ff ff       	call   c0007774 <Hardware::setPowerStateRecursively(DevicePowerState)>
c00077c6:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00077ca:	58                   	pop    eax
c00077cb:	5a                   	pop    edx
c00077cc:	53                   	push   ebx
c00077cd:	57                   	push   edi
c00077ce:	e8 91 f3 01 00       	call   c0026b64 <std::vector<Hardware*>::iterator::operator++()>
c00077d3:	57                   	push   edi
c00077d4:	e8 1f f0 01 00       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c00077d9:	83 c4 10             	add    esp,0x10
c00077dc:	eb c2                	jmp    c00077a0 <Hardware::setPowerStateRecursively(DevicePowerState)+0x2c>
c00077de:	66 90                	xchg   ax,ax
c00077e0:	83 ec 0c             	sub    esp,0xc
c00077e3:	55                   	push   ebp
c00077e4:	e8 0f f0 01 00       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c00077e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00077ec:	e8 07 f0 01 00       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c00077f1:	8b 06                	mov    eax,DWORD PTR [esi]
c00077f3:	89 34 24             	mov    DWORD PTR [esp],esi
c00077f6:	ff 10                	call   DWORD PTR [eax]
c00077f8:	83 c4 10             	add    esp,0x10
c00077fb:	85 c0                	test   eax,eax
c00077fd:	74 11                	je     c0007810 <Hardware::setPowerStateRecursively(DevicePowerState)+0x9c>
c00077ff:	52                   	push   edx
c0007800:	52                   	push   edx
c0007801:	8b 10                	mov    edx,DWORD PTR [eax]
c0007803:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007807:	50                   	push   eax
c0007808:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000780b:	83 c4 10             	add    esp,0x10
c000780e:	66 90                	xchg   ax,ax
c0007810:	83 c4 1c             	add    esp,0x1c
c0007813:	5b                   	pop    ebx
c0007814:	5e                   	pop    esi
c0007815:	5f                   	pop    edi
c0007816:	5d                   	pop    ebp
c0007817:	c3                   	ret    

c0007818 <Hardware::addChild(Hardware*)>:
c0007818:	83 ec 14             	sub    esp,0x14
c000781b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000781f:	50                   	push   eax
c0007820:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007824:	83 c0 04             	add    eax,0x4
c0007827:	50                   	push   eax
c0007828:	e8 33 f7 01 00       	call   c0026f60 <std::vector<Hardware*>::push_back(Hardware* const&)>
c000782d:	83 c4 1c             	add    esp,0x1c
c0007830:	c3                   	ret    
c0007831:	90                   	nop

c0007832 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)>:
c0007832:	55                   	push   ebp
c0007833:	57                   	push   edi
c0007834:	56                   	push   esi
c0007835:	53                   	push   ebx
c0007836:	83 ec 28             	sub    esp,0x28
c0007839:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000783d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0007841:	8b 07                	mov    eax,DWORD PTR [edi]
c0007843:	57                   	push   edi
c0007844:	ff 50 04             	call   DWORD PTR [eax+0x4]
c0007847:	83 c4 10             	add    esp,0x10
c000784a:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c000784e:	75 14                	jne    c0007864 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)+0x32>
c0007850:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0007854:	56                   	push   esi
c0007855:	56                   	push   esi
c0007856:	8d 44 24 14          	lea    eax,[esp+0x14]
c000785a:	50                   	push   eax
c000785b:	55                   	push   ebp
c000785c:	e8 ff f6 01 00       	call   c0026f60 <std::vector<Hardware*>::push_back(Hardware* const&)>
c0007861:	83 c4 10             	add    esp,0x10
c0007864:	8d 74 24 04          	lea    esi,[esp+0x4]
c0007868:	83 c7 04             	add    edi,0x4
c000786b:	53                   	push   ebx
c000786c:	53                   	push   ebx
c000786d:	57                   	push   edi
c000786e:	56                   	push   esi
c000786f:	e8 a8 f2 01 00       	call   c0026b1c <std::vector<Hardware*>::begin()>
c0007874:	8d 5c 24 14          	lea    ebx,[esp+0x14]
c0007878:	83 ec 0c             	sub    esp,0xc
c000787b:	57                   	push   edi
c000787c:	53                   	push   ebx
c000787d:	e8 be f2 01 00       	call   c0026b40 <std::vector<Hardware*>::end()>
c0007882:	83 c4 1c             	add    esp,0x1c
c0007885:	8d 76 00             	lea    esi,[esi+0x0]
c0007888:	51                   	push   ecx
c0007889:	51                   	push   ecx
c000788a:	53                   	push   ebx
c000788b:	56                   	push   esi
c000788c:	e8 7b ef 01 00       	call   c002680c <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c0007891:	83 c4 10             	add    esp,0x10
c0007894:	84 c0                	test   al,al
c0007896:	74 30                	je     c00078c8 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)+0x96>
c0007898:	83 ec 0c             	sub    esp,0xc
c000789b:	56                   	push   esi
c000789c:	e8 7f ef 01 00       	call   c0026820 <std::vector<Hardware*>::iterator::operator*() const>
c00078a1:	83 c4 0c             	add    esp,0xc
c00078a4:	55                   	push   ebp
c00078a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00078a9:	ff 30                	push   DWORD PTR [eax]
c00078ab:	e8 82 ff ff ff       	call   c0007832 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)>
c00078b0:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00078b4:	58                   	pop    eax
c00078b5:	5a                   	pop    edx
c00078b6:	56                   	push   esi
c00078b7:	57                   	push   edi
c00078b8:	e8 a7 f2 01 00       	call   c0026b64 <std::vector<Hardware*>::iterator::operator++()>
c00078bd:	57                   	push   edi
c00078be:	e8 35 ef 01 00       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c00078c3:	83 c4 10             	add    esp,0x10
c00078c6:	eb c0                	jmp    c0007888 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)+0x56>
c00078c8:	83 ec 0c             	sub    esp,0xc
c00078cb:	53                   	push   ebx
c00078cc:	e8 27 ef 01 00       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c00078d1:	89 34 24             	mov    DWORD PTR [esp],esi
c00078d4:	e8 1f ef 01 00       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c00078d9:	83 c4 2c             	add    esp,0x2c
c00078dc:	5b                   	pop    ebx
c00078dd:	5e                   	pop    esi
c00078de:	5f                   	pop    edi
c00078df:	5d                   	pop    ebp
c00078e0:	c3                   	ret    

c00078e1 <KeGetHardwareOfType(HardwareType)>:
c00078e1:	53                   	push   ebx
c00078e2:	83 ec 14             	sub    esp,0x14
c00078e5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00078e9:	53                   	push   ebx
c00078ea:	e8 21 f0 01 00       	call   c0026910 <std::vector<Hardware*>::vector()>
c00078ef:	83 c4 0c             	add    esp,0xc
c00078f2:	53                   	push   ebx
c00078f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00078f7:	ff 35 b8 fe 02 c0    	push   DWORD PTR ds:0xc002feb8
c00078fd:	e8 30 ff ff ff       	call   c0007832 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)>
c0007902:	83 c4 18             	add    esp,0x18
c0007905:	89 d8                	mov    eax,ebx
c0007907:	5b                   	pop    ebx
c0007908:	c2 04 00             	ret    0x4
c000790b:	90                   	nop

c000790c <Hardware::removeChild(Hardware*)>:
c000790c:	55                   	push   ebp
c000790d:	57                   	push   edi
c000790e:	56                   	push   esi
c000790f:	53                   	push   ebx
c0007910:	83 ec 2c             	sub    esp,0x2c
c0007913:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007917:	8d 74 24 18          	lea    esi,[esp+0x18]
c000791b:	8d 58 04             	lea    ebx,[eax+0x4]
c000791e:	50                   	push   eax
c000791f:	50                   	push   eax
c0007920:	53                   	push   ebx
c0007921:	56                   	push   esi
c0007922:	e8 19 f2 01 00       	call   c0026b40 <std::vector<Hardware*>::end()>
c0007927:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000792b:	83 ec 0c             	sub    esp,0xc
c000792e:	53                   	push   ebx
c000792f:	57                   	push   edi
c0007930:	e8 0b f2 01 00       	call   c0026b40 <std::vector<Hardware*>::end()>
c0007935:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007938:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000793c:	55                   	push   ebp
c000793d:	e8 da f1 01 00       	call   c0026b1c <std::vector<Hardware*>::begin()>
c0007942:	8d 44 24 30          	lea    eax,[esp+0x30]
c0007946:	83 c4 1c             	add    esp,0x1c
c0007949:	8d 54 24 44          	lea    edx,[esp+0x44]
c000794d:	52                   	push   edx
c000794e:	57                   	push   edi
c000794f:	55                   	push   ebp
c0007950:	50                   	push   eax
c0007951:	e8 26 f3 01 00       	call   c0026c7c <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>
c0007956:	8d 54 24 28          	lea    edx,[esp+0x28]
c000795a:	83 c4 0c             	add    esp,0xc
c000795d:	56                   	push   esi
c000795e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007962:	50                   	push   eax
c0007963:	53                   	push   ebx
c0007964:	52                   	push   edx
c0007965:	e8 86 f6 01 00       	call   c0026ff0 <std::vector<Hardware*>::erase(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator)>
c000796a:	8d 54 24 28          	lea    edx,[esp+0x28]
c000796e:	52                   	push   edx
c000796f:	e8 84 ee 01 00       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c0007974:	5a                   	pop    edx
c0007975:	8d 44 24 20          	lea    eax,[esp+0x20]
c0007979:	50                   	push   eax
c000797a:	e8 79 ee 01 00       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c000797f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0007982:	e8 71 ee 01 00       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c0007987:	89 3c 24             	mov    DWORD PTR [esp],edi
c000798a:	e8 69 ee 01 00       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c000798f:	89 34 24             	mov    DWORD PTR [esp],esi
c0007992:	e8 61 ee 01 00       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c0007997:	83 c4 3c             	add    esp,0x3c
c000799a:	5b                   	pop    ebx
c000799b:	5e                   	pop    esi
c000799c:	5f                   	pop    edi
c000799d:	5d                   	pop    ebp
c000799e:	c3                   	ret    
c000799f:	90                   	nop

c00079a0 <Hardware::registerMemoryRange(unsigned long, unsigned long)>:
c00079a0:	83 ec 24             	sub    esp,0x24
c00079a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00079a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00079b3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00079b7:	50                   	push   eax
c00079b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00079bc:	83 c0 18             	add    eax,0x18
c00079bf:	50                   	push   eax
c00079c0:	e8 d3 f8 01 00       	call   c0027298 <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)>
c00079c5:	83 c4 2c             	add    esp,0x2c
c00079c8:	c3                   	ret    
c00079c9:	90                   	nop

c00079ca <Hardware::registerPortRange(unsigned short, unsigned char, int)>:
c00079ca:	53                   	push   ebx
c00079cb:	83 ec 18             	sub    esp,0x18
c00079ce:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00079d2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00079d6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00079da:	83 fa 02             	cmp    edx,0x2
c00079dd:	74 2d                	je     c0007a0c <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x42>
c00079df:	7f 07                	jg     c00079e8 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x1e>
c00079e1:	31 c0                	xor    eax,eax
c00079e3:	4a                   	dec    edx
c00079e4:	eb 12                	jmp    c00079f8 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x2e>
c00079e6:	66 90                	xchg   ax,ax
c00079e8:	83 fa 04             	cmp    edx,0x4
c00079eb:	74 27                	je     c0007a14 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x4a>
c00079ed:	b8 03 00 00 00       	mov    eax,0x3
c00079f2:	83 fa 08             	cmp    edx,0x8
c00079f5:	8d 76 00             	lea    esi,[esi+0x0]
c00079f8:	74 22                	je     c0007a1c <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x52>
c00079fa:	83 ec 0c             	sub    esp,0xc
c00079fd:	68 39 8c 02 c0       	push   0xc0028c39
c0007a02:	e8 21 89 00 00       	call   c0010328 <KePanic(char const*)>
c0007a07:	eb 37                	jmp    c0007a40 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x76>
c0007a09:	8d 76 00             	lea    esi,[esi+0x0]
c0007a0c:	b8 01 00 00 00       	mov    eax,0x1
c0007a11:	eb 09                	jmp    c0007a1c <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x52>
c0007a13:	90                   	nop
c0007a14:	b8 02 00 00 00       	mov    eax,0x2
c0007a19:	8d 76 00             	lea    esi,[esi+0x0]
c0007a1c:	66 89 5c 24 0c       	mov    WORD PTR [esp+0xc],bx
c0007a21:	c1 e0 06             	shl    eax,0x6
c0007a24:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0007a28:	88 4c 24 0e          	mov    BYTE PTR [esp+0xe],cl
c0007a2c:	50                   	push   eax
c0007a2d:	50                   	push   eax
c0007a2e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007a32:	50                   	push   eax
c0007a33:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007a37:	83 c0 2c             	add    eax,0x2c
c0007a3a:	50                   	push   eax
c0007a3b:	e8 0c fa 01 00       	call   c002744c <std::vector<DevicePortRange>::push_back(DevicePortRange const&)>
c0007a40:	83 c4 10             	add    esp,0x10
c0007a43:	83 c4 18             	add    esp,0x18
c0007a46:	5b                   	pop    ebx
c0007a47:	c3                   	ret    

c0007a48 <RootDriver::detect()>:
c0007a48:	90                   	nop
c0007a49:	c3                   	ret    
c0007a4a:	66 90                	xchg   ax,ax

c0007a4c <RootDriver::deinitialise()>:
c0007a4c:	90                   	nop
c0007a4d:	c3                   	ret    
c0007a4e:	66 90                	xchg   ax,ax

c0007a50 <RootDriver::setPowerState(DevicePowerState)>:
c0007a50:	90                   	nop
c0007a51:	c3                   	ret    
c0007a52:	66 90                	xchg   ax,ax

c0007a54 <RootDriver::getHumanReadableName()>:
c0007a54:	b8 08 8d 02 c0       	mov    eax,0xc0028d08
c0007a59:	c3                   	ret    
c0007a5a:	66 90                	xchg   ax,ax

c0007a5c <RootDriver::hasACPI()>:
c0007a5c:	b0 01                	mov    al,0x1
c0007a5e:	c3                   	ret    
c0007a5f:	90                   	nop

c0007a60 <RootDriver::hasPCI()>:
c0007a60:	b0 01                	mov    al,0x1
c0007a62:	c3                   	ret    
c0007a63:	90                   	nop

c0007a64 <RootDriver::initialise()>:
c0007a64:	56                   	push   esi
c0007a65:	53                   	push   ebx
c0007a66:	83 ec 34             	sub    esp,0x34
c0007a69:	c7 44 24 1c 08 00 00 00 	mov    DWORD PTR [esp+0x1c],0x8
c0007a71:	83 ec 0c             	sub    esp,0xc
c0007a74:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a78:	e8 57 84 00 00       	call   c000fed4 <malloc>
c0007a7d:	83 c4 10             	add    esp,0x10
c0007a80:	89 c3                	mov    ebx,eax
c0007a82:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0007a88:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0007a8f:	83 ec 0c             	sub    esp,0xc
c0007a92:	53                   	push   ebx
c0007a93:	e8 fc fa 01 00       	call   c0027594 <ISADriver::ISADriver()>
c0007a98:	83 c4 10             	add    esp,0x10
c0007a9b:	89 de                	mov    esi,ebx
c0007a9d:	c7 44 24 20 58 00 00 00 	mov    DWORD PTR [esp+0x20],0x58
c0007aa5:	83 ec 0c             	sub    esp,0xc
c0007aa8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007aac:	e8 23 84 00 00       	call   c000fed4 <malloc>
c0007ab1:	83 c4 10             	add    esp,0x10
c0007ab4:	89 c3                	mov    ebx,eax
c0007ab6:	83 ec 08             	sub    esp,0x8
c0007ab9:	56                   	push   esi
c0007aba:	53                   	push   ebx
c0007abb:	e8 78 fa 01 00       	call   c0027538 <BusHardware::BusHardware(BusDriver*)>
c0007ac0:	83 c4 10             	add    esp,0x10
c0007ac3:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0007ac7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007ace:	83 ec 08             	sub    esp,0x8
c0007ad1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ad5:	50                   	push   eax
c0007ad6:	e8 3d fd ff ff       	call   c0007818 <Hardware::addChild(Hardware*)>
c0007adb:	83 c4 10             	add    esp,0x10
c0007ade:	83 ec 0c             	sub    esp,0xc
c0007ae1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0007ae5:	e8 72 ff ff ff       	call   c0007a5c <RootDriver::hasACPI()>
c0007aea:	83 c4 10             	add    esp,0x10
c0007aed:	0f b6 c0             	movzx  eax,al
c0007af0:	85 c0                	test   eax,eax
c0007af2:	74 78                	je     c0007b6c <RootDriver::initialise()+0x108>
c0007af4:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0007afc:	83 ec 0c             	sub    esp,0xc
c0007aff:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007b03:	e8 cc 83 00 00       	call   c000fed4 <malloc>
c0007b08:	83 c4 10             	add    esp,0x10
c0007b0b:	89 c3                	mov    ebx,eax
c0007b0d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0007b13:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0007b1a:	83 ec 0c             	sub    esp,0xc
c0007b1d:	53                   	push   ebx
c0007b1e:	e8 95 fa 01 00       	call   c00275b8 <ACPIDriver::ACPIDriver()>
c0007b23:	83 c4 10             	add    esp,0x10
c0007b26:	89 de                	mov    esi,ebx
c0007b28:	c7 44 24 18 58 00 00 00 	mov    DWORD PTR [esp+0x18],0x58
c0007b30:	83 ec 0c             	sub    esp,0xc
c0007b33:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007b37:	e8 98 83 00 00       	call   c000fed4 <malloc>
c0007b3c:	83 c4 10             	add    esp,0x10
c0007b3f:	89 c3                	mov    ebx,eax
c0007b41:	83 ec 08             	sub    esp,0x8
c0007b44:	56                   	push   esi
c0007b45:	53                   	push   ebx
c0007b46:	e8 ed f9 01 00       	call   c0027538 <BusHardware::BusHardware(BusDriver*)>
c0007b4b:	83 c4 10             	add    esp,0x10
c0007b4e:	89 5c 24 28          	mov    DWORD PTR [esp+0x28],ebx
c0007b52:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007b59:	83 ec 08             	sub    esp,0x8
c0007b5c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007b60:	50                   	push   eax
c0007b61:	e8 b2 fc ff ff       	call   c0007818 <Hardware::addChild(Hardware*)>
c0007b66:	83 c4 10             	add    esp,0x10
c0007b69:	8d 76 00             	lea    esi,[esi+0x0]
c0007b6c:	83 ec 0c             	sub    esp,0xc
c0007b6f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0007b73:	e8 e8 fe ff ff       	call   c0007a60 <RootDriver::hasPCI()>
c0007b78:	83 c4 10             	add    esp,0x10
c0007b7b:	0f b6 c0             	movzx  eax,al
c0007b7e:	85 c0                	test   eax,eax
c0007b80:	74 76                	je     c0007bf8 <RootDriver::initialise()+0x194>
c0007b82:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0007b8a:	83 ec 0c             	sub    esp,0xc
c0007b8d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007b91:	e8 3e 83 00 00       	call   c000fed4 <malloc>
c0007b96:	83 c4 10             	add    esp,0x10
c0007b99:	89 c3                	mov    ebx,eax
c0007b9b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0007ba1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0007ba8:	83 ec 0c             	sub    esp,0xc
c0007bab:	53                   	push   ebx
c0007bac:	e8 2b fa 01 00       	call   c00275dc <PCIDriver::PCIDriver()>
c0007bb1:	83 c4 10             	add    esp,0x10
c0007bb4:	89 de                	mov    esi,ebx
c0007bb6:	c7 44 24 10 58 00 00 00 	mov    DWORD PTR [esp+0x10],0x58
c0007bbe:	83 ec 0c             	sub    esp,0xc
c0007bc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007bc5:	e8 0a 83 00 00       	call   c000fed4 <malloc>
c0007bca:	83 c4 10             	add    esp,0x10
c0007bcd:	89 c3                	mov    ebx,eax
c0007bcf:	83 ec 08             	sub    esp,0x8
c0007bd2:	56                   	push   esi
c0007bd3:	53                   	push   ebx
c0007bd4:	e8 5f f9 01 00       	call   c0027538 <BusHardware::BusHardware(BusDriver*)>
c0007bd9:	83 c4 10             	add    esp,0x10
c0007bdc:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0007be0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007be4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007be7:	83 ec 08             	sub    esp,0x8
c0007bea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007bee:	50                   	push   eax
c0007bef:	e8 24 fc ff ff       	call   c0007818 <Hardware::addChild(Hardware*)>
c0007bf4:	83 c4 10             	add    esp,0x10
c0007bf7:	90                   	nop
c0007bf8:	90                   	nop
c0007bf9:	83 c4 34             	add    esp,0x34
c0007bfc:	5b                   	pop    ebx
c0007bfd:	5e                   	pop    esi
c0007bfe:	c3                   	ret    

c0007bff <KiIsHashInTable(unsigned short)>:
c0007bff:	0f b7 d0             	movzx  edx,ax
c0007c02:	83 e0 07             	and    eax,0x7
c0007c05:	c1 fa 03             	sar    edx,0x3
c0007c08:	88 c1                	mov    cl,al
c0007c0a:	0f b6 92 00 03 03 c0 	movzx  edx,BYTE PTR [edx-0x3ffcfd00]
c0007c11:	d3 fa                	sar    edx,cl
c0007c13:	89 d0                	mov    eax,edx
c0007c15:	83 e0 01             	and    eax,0x1
c0007c18:	c3                   	ret    

c0007c19 <KiSetHashInTable(unsigned short, bool)>:
c0007c19:	56                   	push   esi
c0007c1a:	53                   	push   ebx
c0007c1b:	0f b7 d8             	movzx  ebx,ax
c0007c1e:	c1 fb 03             	sar    ebx,0x3
c0007c21:	83 e0 07             	and    eax,0x7
c0007c24:	89 c1                	mov    ecx,eax
c0007c26:	b8 01 00 00 00       	mov    eax,0x1
c0007c2b:	0f b6 b3 00 03 03 c0 	movzx  esi,BYTE PTR [ebx-0x3ffcfd00]
c0007c32:	d3 e0                	shl    eax,cl
c0007c34:	84 d2                	test   dl,dl
c0007c36:	74 04                	je     c0007c3c <KiSetHashInTable(unsigned short, bool)+0x23>
c0007c38:	09 f0                	or     eax,esi
c0007c3a:	eb 04                	jmp    c0007c40 <KiSetHashInTable(unsigned short, bool)+0x27>
c0007c3c:	f7 d0                	not    eax
c0007c3e:	21 f0                	and    eax,esi
c0007c40:	88 83 00 03 03 c0    	mov    BYTE PTR [ebx-0x3ffcfd00],al
c0007c46:	5b                   	pop    ebx
c0007c47:	5e                   	pop    esi
c0007c48:	c3                   	ret    

c0007c49 <KiFlushSymlinkChanges()>:
c0007c49:	57                   	push   edi
c0007c4a:	56                   	push   esi
c0007c4b:	53                   	push   ebx
c0007c4c:	83 ec 1c             	sub    esp,0x1c
c0007c4f:	68 14 01 00 00       	push   0x114
c0007c54:	e8 7b 82 00 00       	call   c000fed4 <malloc>
c0007c59:	83 c4 0c             	add    esp,0xc
c0007c5c:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c0007c62:	68 48 8d 02 c0       	push   0xc0028d48
c0007c67:	50                   	push   eax
c0007c68:	89 c3                	mov    ebx,eax
c0007c6a:	e8 65 0d 00 00       	call   c00089d4 <File::File(char const*, Process*)>
c0007c6f:	83 c4 10             	add    esp,0x10
c0007c72:	85 db                	test   ebx,ebx
c0007c74:	75 10                	jne    c0007c86 <KiFlushSymlinkChanges()+0x3d>
c0007c76:	83 ec 0c             	sub    esp,0xc
c0007c79:	68 66 8d 02 c0       	push   0xc0028d66
c0007c7e:	e8 a5 86 00 00       	call   c0010328 <KePanic(char const*)>
c0007c83:	83 c4 10             	add    esp,0x10
c0007c86:	50                   	push   eax
c0007c87:	50                   	push   eax
c0007c88:	6a 06                	push   0x6
c0007c8a:	53                   	push   ebx
c0007c8b:	e8 62 0d 00 00       	call   c00089f2 <File::open(FileOpenMode)>
c0007c90:	83 c4 10             	add    esp,0x10
c0007c93:	85 c0                	test   eax,eax
c0007c95:	74 10                	je     c0007ca7 <KiFlushSymlinkChanges()+0x5e>
c0007c97:	83 ec 0c             	sub    esp,0xc
c0007c9a:	68 80 8d 02 c0       	push   0xc0028d80
c0007c9f:	e8 84 86 00 00       	call   c0010328 <KePanic(char const*)>
c0007ca4:	83 c4 10             	add    esp,0x10
c0007ca7:	31 f6                	xor    esi,esi
c0007ca9:	39 35 c0 fe 02 c0    	cmp    DWORD PTR ds:0xc002fec0,esi
c0007caf:	7e 70                	jle    c0007d21 <KiFlushSymlinkChanges()+0xd8>
c0007cb1:	83 ec 0c             	sub    esp,0xc
c0007cb4:	89 f0                	mov    eax,esi
c0007cb6:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007cb8:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007cbc:	c1 e0 08             	shl    eax,0x8
c0007cbf:	57                   	push   edi
c0007cc0:	05 00 ff 02 c0       	add    eax,0xc002ff00
c0007cc5:	50                   	push   eax
c0007cc6:	6a 00                	push   0x0
c0007cc8:	68 00 01 00 00       	push   0x100
c0007ccd:	53                   	push   ebx
c0007cce:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0007cd1:	83 c4 20             	add    esp,0x20
c0007cd4:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0007cdc:	74 10                	je     c0007cee <KiFlushSymlinkChanges()+0xa5>
c0007cde:	83 ec 0c             	sub    esp,0xc
c0007ce1:	68 9a 8d 02 c0       	push   0xc0028d9a
c0007ce6:	e8 3d 86 00 00       	call   c0010328 <KePanic(char const*)>
c0007ceb:	83 c4 10             	add    esp,0x10
c0007cee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007cf0:	8d 14 f5 e0 fe 02 c0 	lea    edx,[esi*8-0x3ffd0120]
c0007cf7:	83 ec 0c             	sub    esp,0xc
c0007cfa:	57                   	push   edi
c0007cfb:	52                   	push   edx
c0007cfc:	6a 00                	push   0x0
c0007cfe:	6a 08                	push   0x8
c0007d00:	53                   	push   ebx
c0007d01:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007d04:	83 c4 20             	add    esp,0x20
c0007d07:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007d0c:	74 10                	je     c0007d1e <KiFlushSymlinkChanges()+0xd5>
c0007d0e:	83 ec 0c             	sub    esp,0xc
c0007d11:	68 b4 8d 02 c0       	push   0xc0028db4
c0007d16:	e8 0d 86 00 00       	call   c0010328 <KePanic(char const*)>
c0007d1b:	83 c4 10             	add    esp,0x10
c0007d1e:	46                   	inc    esi
c0007d1f:	eb 88                	jmp    c0007ca9 <KiFlushSymlinkChanges()+0x60>
c0007d21:	83 ec 0c             	sub    esp,0xc
c0007d24:	53                   	push   ebx
c0007d25:	e8 26 0d 00 00       	call   c0008a50 <File::close()>
c0007d2a:	83 c4 10             	add    esp,0x10
c0007d2d:	85 db                	test   ebx,ebx
c0007d2f:	74 0c                	je     c0007d3d <KiFlushSymlinkChanges()+0xf4>
c0007d31:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007d33:	83 ec 0c             	sub    esp,0xc
c0007d36:	53                   	push   ebx
c0007d37:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007d3a:	83 c4 10             	add    esp,0x10
c0007d3d:	c7 05 c0 fe 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fec0,0x0
c0007d47:	83 c4 10             	add    esp,0x10
c0007d4a:	5b                   	pop    ebx
c0007d4b:	5e                   	pop    esi
c0007d4c:	5f                   	pop    edi
c0007d4d:	c3                   	ret    

c0007d4e <KiDeinitialiseSymlinks(void*)>:
c0007d4e:	e9 f6 fe ff ff       	jmp    c0007c49 <KiFlushSymlinkChanges()>

c0007d53 <KiGetSymlinkHash(char const*)>:
c0007d53:	53                   	push   ebx
c0007d54:	89 c3                	mov    ebx,eax
c0007d56:	83 ec 14             	sub    esp,0x14
c0007d59:	50                   	push   eax
c0007d5a:	e8 21 88 ff ff       	call   c0000580 <strlen>
c0007d5f:	5a                   	pop    edx
c0007d60:	59                   	pop    ecx
c0007d61:	50                   	push   eax
c0007d62:	53                   	push   ebx
c0007d63:	e8 29 6b 00 00       	call   c000e891 <KeCalculateCRC32(unsigned char*, int)>
c0007d68:	83 c4 18             	add    esp,0x18
c0007d6b:	5b                   	pop    ebx
c0007d6c:	89 c2                	mov    edx,eax
c0007d6e:	c1 ea 10             	shr    edx,0x10
c0007d71:	31 d0                	xor    eax,edx
c0007d73:	c3                   	ret    

c0007d74 <KiCreateSymlinkID()>:
c0007d74:	55                   	push   ebp
c0007d75:	57                   	push   edi
c0007d76:	56                   	push   esi
c0007d77:	53                   	push   ebx
c0007d78:	31 db                	xor    ebx,ebx
c0007d7a:	83 ec 1c             	sub    esp,0x1c
c0007d7d:	e8 7e 8f 00 00       	call   c0010d00 <KeRand()>
c0007d82:	8b 2d 00 23 03 c0    	mov    ebp,DWORD PTR ds:0xc0032300
c0007d88:	31 d2                	xor    edx,edx
c0007d8a:	43                   	inc    ebx
c0007d8b:	31 ff                	xor    edi,edi
c0007d8d:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0007d90:	89 ee                	mov    esi,ebp
c0007d92:	89 0d 00 23 03 c0    	mov    DWORD PTR ds:0xc0032300,ecx
c0007d98:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0007d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007da0:	c1 e0 1f             	shl    eax,0x1f
c0007da3:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007da9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dad:	75 10                	jne    c0007dbf <KiCreateSymlinkID()+0x4b>
c0007daf:	83 ec 0c             	sub    esp,0xc
c0007db2:	68 ce 8d 02 c0       	push   0xc0028dce
c0007db7:	e8 6c 85 00 00       	call   c0010328 <KePanic(char const*)>
c0007dbc:	83 c4 10             	add    esp,0x10
c0007dbf:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0007dc3:	75 06                	jne    c0007dcb <KiCreateSymlinkID()+0x57>
c0007dc5:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0007dc9:	74 b2                	je     c0007d7d <KiCreateSymlinkID()+0x9>
c0007dcb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dcf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007dd3:	83 c4 1c             	add    esp,0x1c
c0007dd6:	5b                   	pop    ebx
c0007dd7:	31 f0                	xor    eax,esi
c0007dd9:	5e                   	pop    esi
c0007dda:	31 fa                	xor    edx,edi
c0007ddc:	5f                   	pop    edi
c0007ddd:	5d                   	pop    ebp
c0007dde:	c3                   	ret    

c0007ddf <KeRegisterSymlink(char const*, unsigned long long)>:
c0007ddf:	53                   	push   ebx
c0007de0:	83 ec 0c             	sub    esp,0xc
c0007de3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007de7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007deb:	a1 c0 fe 02 c0       	mov    eax,ds:0xc002fec0
c0007df0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0007df4:	68 00 01 00 00       	push   0x100
c0007df9:	6a 00                	push   0x0
c0007dfb:	89 0c c5 e4 fe 02 c0 	mov    DWORD PTR [eax*8-0x3ffd011c],ecx
c0007e02:	89 14 c5 e0 fe 02 c0 	mov    DWORD PTR [eax*8-0x3ffd0120],edx
c0007e09:	c1 e0 08             	shl    eax,0x8
c0007e0c:	05 00 ff 02 c0       	add    eax,0xc002ff00
c0007e11:	50                   	push   eax
c0007e12:	e8 d9 86 ff ff       	call   c00004f0 <memset>
c0007e17:	58                   	pop    eax
c0007e18:	a1 c0 fe 02 c0       	mov    eax,ds:0xc002fec0
c0007e1d:	5a                   	pop    edx
c0007e1e:	c1 e0 08             	shl    eax,0x8
c0007e21:	53                   	push   ebx
c0007e22:	05 00 ff 02 c0       	add    eax,0xc002ff00
c0007e27:	50                   	push   eax
c0007e28:	e8 23 88 ff ff       	call   c0000650 <strcpy>
c0007e2d:	89 d8                	mov    eax,ebx
c0007e2f:	e8 1f ff ff ff       	call   c0007d53 <KiGetSymlinkHash(char const*)>
c0007e34:	ba 01 00 00 00       	mov    edx,0x1
c0007e39:	0f b7 c0             	movzx  eax,ax
c0007e3c:	e8 d8 fd ff ff       	call   c0007c19 <KiSetHashInTable(unsigned short, bool)>
c0007e41:	a1 c0 fe 02 c0       	mov    eax,ds:0xc002fec0
c0007e46:	83 c4 10             	add    esp,0x10
c0007e49:	40                   	inc    eax
c0007e4a:	a3 c0 fe 02 c0       	mov    ds:0xc002fec0,eax
c0007e4f:	83 f8 03             	cmp    eax,0x3
c0007e52:	7e 09                	jle    c0007e5d <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c0007e54:	83 c4 08             	add    esp,0x8
c0007e57:	5b                   	pop    ebx
c0007e58:	e9 ec fd ff ff       	jmp    c0007c49 <KiFlushSymlinkChanges()>
c0007e5d:	83 c4 08             	add    esp,0x8
c0007e60:	5b                   	pop    ebx
c0007e61:	c3                   	ret    

c0007e62 <KeInitialiseSymlinks()>:
c0007e62:	57                   	push   edi
c0007e63:	56                   	push   esi
c0007e64:	53                   	push   ebx
c0007e65:	81 ec 14 01 00 00    	sub    esp,0x114
c0007e6b:	68 00 20 00 00       	push   0x2000
c0007e70:	6a 00                	push   0x0
c0007e72:	68 00 03 03 c0       	push   0xc0030300
c0007e77:	c7 05 00 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032300,0x0
c0007e81:	c7 05 c0 fe 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fec0,0x0
c0007e8b:	e8 60 86 ff ff       	call   c00004f0 <memset>
c0007e90:	59                   	pop    ecx
c0007e91:	5b                   	pop    ebx
c0007e92:	6a 00                	push   0x0
c0007e94:	68 4e 7d 00 c0       	push   0xc0007d4e
c0007e99:	e8 ce 5a 00 00       	call   c000d96c <KeRegisterAtexit(void (*)(void*), void*)>
c0007e9e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0007ea5:	e8 2a 80 00 00       	call   c000fed4 <malloc>
c0007eaa:	83 c4 0c             	add    esp,0xc
c0007ead:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c0007eb3:	68 48 8d 02 c0       	push   0xc0028d48
c0007eb8:	50                   	push   eax
c0007eb9:	89 c3                	mov    ebx,eax
c0007ebb:	e8 14 0b 00 00       	call   c00089d4 <File::File(char const*, Process*)>
c0007ec0:	83 c4 10             	add    esp,0x10
c0007ec3:	85 db                	test   ebx,ebx
c0007ec5:	75 10                	jne    c0007ed7 <KeInitialiseSymlinks()+0x75>
c0007ec7:	83 ec 0c             	sub    esp,0xc
c0007eca:	68 d7 8d 02 c0       	push   0xc0028dd7
c0007ecf:	e8 54 84 00 00       	call   c0010328 <KePanic(char const*)>
c0007ed4:	83 c4 10             	add    esp,0x10
c0007ed7:	83 ec 0c             	sub    esp,0xc
c0007eda:	53                   	push   ebx
c0007edb:	e8 d6 0d 00 00       	call   c0008cb6 <File::exists()>
c0007ee0:	83 c4 10             	add    esp,0x10
c0007ee3:	84 c0                	test   al,al
c0007ee5:	75 3a                	jne    c0007f21 <KeInitialiseSymlinks()+0xbf>
c0007ee7:	52                   	push   edx
c0007ee8:	52                   	push   edx
c0007ee9:	6a 12                	push   0x12
c0007eeb:	53                   	push   ebx
c0007eec:	e8 01 0b 00 00       	call   c00089f2 <File::open(FileOpenMode)>
c0007ef1:	83 c4 10             	add    esp,0x10
c0007ef4:	85 c0                	test   eax,eax
c0007ef6:	74 10                	je     c0007f08 <KeInitialiseSymlinks()+0xa6>
c0007ef8:	83 ec 0c             	sub    esp,0xc
c0007efb:	68 f4 8d 02 c0       	push   0xc0028df4
c0007f00:	e8 23 84 00 00       	call   c0010328 <KePanic(char const*)>
c0007f05:	83 c4 10             	add    esp,0x10
c0007f08:	83 ec 0c             	sub    esp,0xc
c0007f0b:	53                   	push   ebx
c0007f0c:	e8 3f 0b 00 00       	call   c0008a50 <File::close()>
c0007f11:	83 c4 10             	add    esp,0x10
c0007f14:	85 db                	test   ebx,ebx
c0007f16:	0f 84 9e 00 00 00    	je     c0007fba <KeInitialiseSymlinks()+0x158>
c0007f1c:	e9 8d 00 00 00       	jmp    c0007fae <KeInitialiseSymlinks()+0x14c>
c0007f21:	50                   	push   eax
c0007f22:	50                   	push   eax
c0007f23:	6a 01                	push   0x1
c0007f25:	53                   	push   ebx
c0007f26:	e8 c7 0a 00 00       	call   c00089f2 <File::open(FileOpenMode)>
c0007f2b:	83 c4 10             	add    esp,0x10
c0007f2e:	85 c0                	test   eax,eax
c0007f30:	74 10                	je     c0007f42 <KeInitialiseSymlinks()+0xe0>
c0007f32:	83 ec 0c             	sub    esp,0xc
c0007f35:	68 11 8e 02 c0       	push   0xc0028e11
c0007f3a:	e8 e9 83 00 00       	call   c0010328 <KePanic(char const*)>
c0007f3f:	83 c4 10             	add    esp,0x10
c0007f42:	ff 05 00 23 03 c0    	inc    DWORD PTR ds:0xc0032300
c0007f48:	83 ec 0c             	sub    esp,0xc
c0007f4b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0007f4f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007f51:	57                   	push   edi
c0007f52:	8d 74 24 20          	lea    esi,[esp+0x20]
c0007f56:	56                   	push   esi
c0007f57:	6a 00                	push   0x0
c0007f59:	68 00 01 00 00       	push   0x100
c0007f5e:	53                   	push   ebx
c0007f5f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007f62:	83 c4 20             	add    esp,0x20
c0007f65:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007f6d:	75 33                	jne    c0007fa2 <KeInitialiseSymlinks()+0x140>
c0007f6f:	83 ec 0c             	sub    esp,0xc
c0007f72:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007f74:	57                   	push   edi
c0007f75:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007f79:	52                   	push   edx
c0007f7a:	6a 00                	push   0x0
c0007f7c:	6a 08                	push   0x8
c0007f7e:	53                   	push   ebx
c0007f7f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007f82:	83 c4 20             	add    esp,0x20
c0007f85:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007f8a:	75 16                	jne    c0007fa2 <KeInitialiseSymlinks()+0x140>
c0007f8c:	89 f0                	mov    eax,esi
c0007f8e:	e8 c0 fd ff ff       	call   c0007d53 <KiGetSymlinkHash(char const*)>
c0007f93:	ba 01 00 00 00       	mov    edx,0x1
c0007f98:	0f b7 c0             	movzx  eax,ax
c0007f9b:	e8 79 fc ff ff       	call   c0007c19 <KiSetHashInTable(unsigned short, bool)>
c0007fa0:	eb a0                	jmp    c0007f42 <KeInitialiseSymlinks()+0xe0>
c0007fa2:	83 ec 0c             	sub    esp,0xc
c0007fa5:	53                   	push   ebx
c0007fa6:	e8 a5 0a 00 00       	call   c0008a50 <File::close()>
c0007fab:	83 c4 10             	add    esp,0x10
c0007fae:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007fb0:	83 ec 0c             	sub    esp,0xc
c0007fb3:	53                   	push   ebx
c0007fb4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007fb7:	83 c4 10             	add    esp,0x10
c0007fba:	81 c4 10 01 00 00    	add    esp,0x110
c0007fc0:	5b                   	pop    ebx
c0007fc1:	5e                   	pop    esi
c0007fc2:	5f                   	pop    edi
c0007fc3:	c3                   	ret    

c0007fc4 <KiIsSymlinkRegistered(char const*)>:
c0007fc4:	55                   	push   ebp
c0007fc5:	57                   	push   edi
c0007fc6:	56                   	push   esi
c0007fc7:	53                   	push   ebx
c0007fc8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007fce:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0007fd5:	89 f0                	mov    eax,esi
c0007fd7:	e8 77 fd ff ff       	call   c0007d53 <KiGetSymlinkHash(char const*)>
c0007fdc:	0f b7 c0             	movzx  eax,ax
c0007fdf:	e8 1b fc ff ff       	call   c0007bff <KiIsHashInTable(unsigned short)>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	88 c1                	mov    cl,al
c0007fe8:	31 c0                	xor    eax,eax
c0007fea:	84 c9                	test   cl,cl
c0007fec:	0f 84 31 01 00 00    	je     c0008123 <KiIsSymlinkRegistered(char const*)+0x15f>
c0007ff2:	31 db                	xor    ebx,ebx
c0007ff4:	39 1d c0 fe 02 c0    	cmp    DWORD PTR ds:0xc002fec0,ebx
c0007ffa:	7e 30                	jle    c000802c <KiIsSymlinkRegistered(char const*)+0x68>
c0007ffc:	89 d8                	mov    eax,ebx
c0007ffe:	c1 e0 08             	shl    eax,0x8
c0008001:	51                   	push   ecx
c0008002:	05 00 ff 02 c0       	add    eax,0xc002ff00
c0008007:	51                   	push   ecx
c0008008:	50                   	push   eax
c0008009:	56                   	push   esi
c000800a:	e8 71 87 ff ff       	call   c0000780 <strcmp>
c000800f:	83 c4 10             	add    esp,0x10
c0008012:	85 c0                	test   eax,eax
c0008014:	75 13                	jne    c0008029 <KiIsSymlinkRegistered(char const*)+0x65>
c0008016:	8b 04 dd e0 fe 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd0120]
c000801d:	8b 14 dd e4 fe 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd011c]
c0008024:	e9 fa 00 00 00       	jmp    c0008123 <KiIsSymlinkRegistered(char const*)+0x15f>
c0008029:	43                   	inc    ebx
c000802a:	eb c8                	jmp    c0007ff4 <KiIsSymlinkRegistered(char const*)+0x30>
c000802c:	83 ec 0c             	sub    esp,0xc
c000802f:	68 14 01 00 00       	push   0x114
c0008034:	e8 9b 7e 00 00       	call   c000fed4 <malloc>
c0008039:	83 c4 0c             	add    esp,0xc
c000803c:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c0008042:	68 48 8d 02 c0       	push   0xc0028d48
c0008047:	50                   	push   eax
c0008048:	89 c3                	mov    ebx,eax
c000804a:	e8 85 09 00 00       	call   c00089d4 <File::File(char const*, Process*)>
c000804f:	83 c4 10             	add    esp,0x10
c0008052:	85 db                	test   ebx,ebx
c0008054:	75 12                	jne    c0008068 <KiIsSymlinkRegistered(char const*)+0xa4>
c0008056:	83 ec 0c             	sub    esp,0xc
c0008059:	68 2c 8e 02 c0       	push   0xc0028e2c
c000805e:	e8 c5 82 00 00       	call   c0010328 <KePanic(char const*)>
c0008063:	83 c4 10             	add    esp,0x10
c0008066:	eb 10                	jmp    c0008078 <KiIsSymlinkRegistered(char const*)+0xb4>
c0008068:	83 ec 0c             	sub    esp,0xc
c000806b:	53                   	push   ebx
c000806c:	e8 45 0c 00 00       	call   c0008cb6 <File::exists()>
c0008071:	83 c4 10             	add    esp,0x10
c0008074:	84 c0                	test   al,al
c0008076:	74 de                	je     c0008056 <KiIsSymlinkRegistered(char const*)+0x92>
c0008078:	52                   	push   edx
c0008079:	52                   	push   edx
c000807a:	6a 01                	push   0x1
c000807c:	53                   	push   ebx
c000807d:	e8 70 09 00 00       	call   c00089f2 <File::open(FileOpenMode)>
c0008082:	83 c4 10             	add    esp,0x10
c0008085:	85 c0                	test   eax,eax
c0008087:	74 10                	je     c0008099 <KiIsSymlinkRegistered(char const*)+0xd5>
c0008089:	83 ec 0c             	sub    esp,0xc
c000808c:	68 47 8e 02 c0       	push   0xc0028e47
c0008091:	e8 92 82 00 00       	call   c0010328 <KePanic(char const*)>
c0008096:	83 c4 10             	add    esp,0x10
c0008099:	83 ec 0c             	sub    esp,0xc
c000809c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000809e:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c00080a2:	55                   	push   ebp
c00080a3:	8d 7c 24 20          	lea    edi,[esp+0x20]
c00080a7:	57                   	push   edi
c00080a8:	6a 00                	push   0x0
c00080aa:	68 00 01 00 00       	push   0x100
c00080af:	53                   	push   ebx
c00080b0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00080b3:	83 c4 20             	add    esp,0x20
c00080b6:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00080be:	75 4b                	jne    c000810b <KiIsSymlinkRegistered(char const*)+0x147>
c00080c0:	83 ec 0c             	sub    esp,0xc
c00080c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00080c5:	55                   	push   ebp
c00080c6:	8d 54 24 18          	lea    edx,[esp+0x18]
c00080ca:	52                   	push   edx
c00080cb:	6a 00                	push   0x0
c00080cd:	6a 08                	push   0x8
c00080cf:	53                   	push   ebx
c00080d0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00080d3:	83 c4 20             	add    esp,0x20
c00080d6:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00080db:	75 2e                	jne    c000810b <KiIsSymlinkRegistered(char const*)+0x147>
c00080dd:	50                   	push   eax
c00080de:	50                   	push   eax
c00080df:	57                   	push   edi
c00080e0:	56                   	push   esi
c00080e1:	e8 9a 86 ff ff       	call   c0000780 <strcmp>
c00080e6:	83 c4 10             	add    esp,0x10
c00080e9:	85 c0                	test   eax,eax
c00080eb:	75 ac                	jne    c0008099 <KiIsSymlinkRegistered(char const*)+0xd5>
c00080ed:	83 ec 0c             	sub    esp,0xc
c00080f0:	53                   	push   ebx
c00080f1:	e8 5a 09 00 00       	call   c0008a50 <File::close()>
c00080f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00080f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00080fb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00080fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008102:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008106:	83 c4 10             	add    esp,0x10
c0008109:	eb 18                	jmp    c0008123 <KiIsSymlinkRegistered(char const*)+0x15f>
c000810b:	83 ec 0c             	sub    esp,0xc
c000810e:	53                   	push   ebx
c000810f:	e8 3c 09 00 00       	call   c0008a50 <File::close()>
c0008114:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008116:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008119:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000811c:	83 c4 10             	add    esp,0x10
c000811f:	31 c0                	xor    eax,eax
c0008121:	31 d2                	xor    edx,edx
c0008123:	81 c4 1c 01 00 00    	add    esp,0x11c
c0008129:	5b                   	pop    ebx
c000812a:	5e                   	pop    esi
c000812b:	5f                   	pop    edi
c000812c:	5d                   	pop    ebp
c000812d:	c3                   	ret    

c000812e <KeDereferenceSymlink(char const*, char*)>:
c000812e:	55                   	push   ebp
c000812f:	57                   	push   edi
c0008130:	56                   	push   esi
c0008131:	53                   	push   ebx
c0008132:	83 ec 48             	sub    esp,0x48
c0008135:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0008139:	56                   	push   esi
c000813a:	e8 85 fe ff ff       	call   c0007fc4 <KiIsSymlinkRegistered(char const*)>
c000813f:	83 c4 10             	add    esp,0x10
c0008142:	89 c7                	mov    edi,eax
c0008144:	89 d0                	mov    eax,edx
c0008146:	09 f8                	or     eax,edi
c0008148:	75 07                	jne    c0008151 <KeDereferenceSymlink(char const*, char*)+0x23>
c000814a:	31 c0                	xor    eax,eax
c000814c:	e9 7c 01 00 00       	jmp    c00082cd <KeDereferenceSymlink(char const*, char*)+0x19f>
c0008151:	83 ec 0c             	sub    esp,0xc
c0008154:	89 d5                	mov    ebp,edx
c0008156:	68 14 01 00 00       	push   0x114
c000815b:	e8 74 7d 00 00       	call   c000fed4 <malloc>
c0008160:	83 c4 0c             	add    esp,0xc
c0008163:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c0008169:	56                   	push   esi
c000816a:	50                   	push   eax
c000816b:	89 c3                	mov    ebx,eax
c000816d:	e8 62 08 00 00       	call   c00089d4 <File::File(char const*, Process*)>
c0008172:	83 c4 10             	add    esp,0x10
c0008175:	85 db                	test   ebx,ebx
c0008177:	0f 84 32 01 00 00    	je     c00082af <KeDereferenceSymlink(char const*, char*)+0x181>
c000817d:	56                   	push   esi
c000817e:	56                   	push   esi
c000817f:	6a 01                	push   0x1
c0008181:	53                   	push   ebx
c0008182:	e8 6b 08 00 00       	call   c00089f2 <File::open(FileOpenMode)>
c0008187:	83 c4 10             	add    esp,0x10
c000818a:	85 c0                	test   eax,eax
c000818c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000818e:	74 09                	je     c0008199 <KeDereferenceSymlink(char const*, char*)+0x6b>
c0008190:	83 ec 0c             	sub    esp,0xc
c0008193:	53                   	push   ebx
c0008194:	e9 10 01 00 00       	jmp    c00082a9 <KeDereferenceSymlink(char const*, char*)+0x17b>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	8d 74 24 18          	lea    esi,[esp+0x18]
c00081a0:	56                   	push   esi
c00081a1:	8d 54 24 37          	lea    edx,[esp+0x37]
c00081a5:	52                   	push   edx
c00081a6:	6a 00                	push   0x0
c00081a8:	6a 08                	push   0x8
c00081aa:	53                   	push   ebx
c00081ab:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00081ae:	83 c4 20             	add    esp,0x20
c00081b1:	85 c0                	test   eax,eax
c00081b3:	0f 85 e2 00 00 00    	jne    c000829b <KeDereferenceSymlink(char const*, char*)+0x16d>
c00081b9:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00081be:	0f 85 d7 00 00 00    	jne    c000829b <KeDereferenceSymlink(char const*, char*)+0x16d>
c00081c4:	83 ec 0c             	sub    esp,0xc
c00081c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00081c9:	56                   	push   esi
c00081ca:	8d 54 24 20          	lea    edx,[esp+0x20]
c00081ce:	52                   	push   edx
c00081cf:	6a 00                	push   0x0
c00081d1:	6a 08                	push   0x8
c00081d3:	53                   	push   ebx
c00081d4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00081d7:	83 c4 20             	add    esp,0x20
c00081da:	85 c0                	test   eax,eax
c00081dc:	0f 85 b9 00 00 00    	jne    c000829b <KeDereferenceSymlink(char const*, char*)+0x16d>
c00081e2:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00081e7:	0f 85 ae 00 00 00    	jne    c000829b <KeDereferenceSymlink(char const*, char*)+0x16d>
c00081ed:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c00081f1:	0f 85 53 ff ff ff    	jne    c000814a <KeDereferenceSymlink(char const*, char*)+0x1c>
c00081f7:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c00081fb:	0f 85 49 ff ff ff    	jne    c000814a <KeDereferenceSymlink(char const*, char*)+0x1c>
c0008201:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008209:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008211:	51                   	push   ecx
c0008212:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0008216:	50                   	push   eax
c0008217:	8d 44 24 20          	lea    eax,[esp+0x20]
c000821b:	50                   	push   eax
c000821c:	53                   	push   ebx
c000821d:	e8 d2 0a 00 00       	call   c0008cf4 <File::stat(unsigned long long*, bool*)>
c0008222:	83 c4 10             	add    esp,0x10
c0008225:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000822a:	75 6f                	jne    c000829b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000822c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008230:	31 c9                	xor    ecx,ecx
c0008232:	bf 0f 00 00 00       	mov    edi,0xf
c0008237:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000823b:	39 c7                	cmp    edi,eax
c000823d:	89 cf                	mov    edi,ecx
c000823f:	19 d7                	sbb    edi,edx
c0008241:	73 58                	jae    c000829b <KeDereferenceSymlink(char const*, char*)+0x16d>
c0008243:	83 c0 f0             	add    eax,0xfffffff0
c0008246:	bf ff 00 00 00       	mov    edi,0xff
c000824b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000824f:	83 d2 ff             	adc    edx,0xffffffff
c0008252:	39 c7                	cmp    edi,eax
c0008254:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008258:	19 d1                	sbb    ecx,edx
c000825a:	72 53                	jb     c00082af <KeDereferenceSymlink(char const*, char*)+0x181>
c000825c:	40                   	inc    eax
c000825d:	52                   	push   edx
c000825e:	50                   	push   eax
c000825f:	6a 00                	push   0x0
c0008261:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0008265:	e8 86 82 ff ff       	call   c00004f0 <memset>
c000826a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000826c:	89 34 24             	mov    DWORD PTR [esp],esi
c000826f:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0008273:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008277:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000827b:	53                   	push   ebx
c000827c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000827f:	83 c4 20             	add    esp,0x20
c0008282:	85 c0                	test   eax,eax
c0008284:	75 15                	jne    c000829b <KeDereferenceSymlink(char const*, char*)+0x16d>
c0008286:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000828a:	89 c7                	mov    edi,eax
c000828c:	c1 ff 1f             	sar    edi,0x1f
c000828f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0008293:	75 06                	jne    c000829b <KeDereferenceSymlink(char const*, char*)+0x16d>
c0008295:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0008299:	74 19                	je     c00082b4 <KeDereferenceSymlink(char const*, char*)+0x186>
c000829b:	83 ec 0c             	sub    esp,0xc
c000829e:	53                   	push   ebx
c000829f:	e8 ac 07 00 00       	call   c0008a50 <File::close()>
c00082a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00082a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00082a9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00082ac:	83 c4 10             	add    esp,0x10
c00082af:	83 c8 ff             	or     eax,0xffffffff
c00082b2:	eb 19                	jmp    c00082cd <KeDereferenceSymlink(char const*, char*)+0x19f>
c00082b4:	83 ec 0c             	sub    esp,0xc
c00082b7:	53                   	push   ebx
c00082b8:	e8 93 07 00 00       	call   c0008a50 <File::close()>
c00082bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00082bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00082c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00082c5:	83 c4 10             	add    esp,0x10
c00082c8:	b8 01 00 00 00       	mov    eax,0x1
c00082cd:	83 c4 3c             	add    esp,0x3c
c00082d0:	5b                   	pop    ebx
c00082d1:	5e                   	pop    esi
c00082d2:	5f                   	pop    edi
c00082d3:	5d                   	pop    ebp
c00082d4:	c3                   	ret    

c00082d5 <KeCreateSymlink(char const*, char const*)>:
c00082d5:	55                   	push   ebp
c00082d6:	57                   	push   edi
c00082d7:	56                   	push   esi
c00082d8:	53                   	push   ebx
c00082d9:	83 ec 38             	sub    esp,0x38
c00082dc:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00082e0:	68 14 01 00 00       	push   0x114
c00082e5:	e8 ea 7b 00 00       	call   c000fed4 <malloc>
c00082ea:	6a 00                	push   0x0
c00082ec:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c00082f2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00082f6:	89 c3                	mov    ebx,eax
c00082f8:	50                   	push   eax
c00082f9:	e8 d8 05 00 00       	call   c00088d6 <File::File(char const*, Process*, bool)>
c00082fe:	83 c4 20             	add    esp,0x20
c0008301:	85 db                	test   ebx,ebx
c0008303:	b8 01 00 00 00       	mov    eax,0x1
c0008308:	0f 84 fb 00 00 00    	je     c0008409 <KeCreateSymlink(char const*, char const*)+0x134>
c000830e:	52                   	push   edx
c000830f:	52                   	push   edx
c0008310:	6a 12                	push   0x12
c0008312:	53                   	push   ebx
c0008313:	e8 da 06 00 00       	call   c00089f2 <File::open(FileOpenMode)>
c0008318:	83 c4 10             	add    esp,0x10
c000831b:	85 c0                	test   eax,eax
c000831d:	74 0b                	je     c000832a <KeCreateSymlink(char const*, char const*)+0x55>
c000831f:	83 ec 0c             	sub    esp,0xc
c0008322:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008324:	53                   	push   ebx
c0008325:	e9 d4 00 00 00       	jmp    c00083fe <KeCreateSymlink(char const*, char const*)+0x129>
c000832a:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000832e:	be 62 8e 02 c0       	mov    esi,0xc0028e62
c0008333:	b9 09 00 00 00       	mov    ecx,0x9
c0008338:	fc                   	cld    
c0008339:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000833b:	83 ec 0c             	sub    esp,0xc
c000833e:	8d 74 24 10          	lea    esi,[esp+0x10]
c0008342:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008344:	56                   	push   esi
c0008345:	8d 54 24 27          	lea    edx,[esp+0x27]
c0008349:	52                   	push   edx
c000834a:	6a 00                	push   0x0
c000834c:	6a 08                	push   0x8
c000834e:	53                   	push   ebx
c000834f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0008352:	83 c4 20             	add    esp,0x20
c0008355:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000835a:	0f 85 90 00 00 00    	jne    c00083f0 <KeCreateSymlink(char const*, char const*)+0x11b>
c0008360:	85 c0                	test   eax,eax
c0008362:	0f 85 88 00 00 00    	jne    c00083f0 <KeCreateSymlink(char const*, char const*)+0x11b>
c0008368:	e8 07 fa ff ff       	call   c0007d74 <KiCreateSymlinkID()>
c000836d:	83 ec 0c             	sub    esp,0xc
c0008370:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008374:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008378:	8b 03                	mov    eax,DWORD PTR [ebx]
c000837a:	56                   	push   esi
c000837b:	8d 54 24 18          	lea    edx,[esp+0x18]
c000837f:	52                   	push   edx
c0008380:	6a 00                	push   0x0
c0008382:	6a 08                	push   0x8
c0008384:	53                   	push   ebx
c0008385:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0008388:	83 c4 20             	add    esp,0x20
c000838b:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0008390:	75 5e                	jne    c00083f0 <KeCreateSymlink(char const*, char const*)+0x11b>
c0008392:	85 c0                	test   eax,eax
c0008394:	75 5a                	jne    c00083f0 <KeCreateSymlink(char const*, char const*)+0x11b>
c0008396:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008398:	83 ec 0c             	sub    esp,0xc
c000839b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000839e:	55                   	push   ebp
c000839f:	e8 dc 81 ff ff       	call   c0000580 <strlen>
c00083a4:	31 d2                	xor    edx,edx
c00083a6:	89 34 24             	mov    DWORD PTR [esp],esi
c00083a9:	55                   	push   ebp
c00083aa:	52                   	push   edx
c00083ab:	50                   	push   eax
c00083ac:	53                   	push   ebx
c00083ad:	ff d7                	call   edi
c00083af:	83 c4 14             	add    esp,0x14
c00083b2:	55                   	push   ebp
c00083b3:	89 c6                	mov    esi,eax
c00083b5:	e8 c6 81 ff ff       	call   c0000580 <strlen>
c00083ba:	83 c4 10             	add    esp,0x10
c00083bd:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00083c1:	75 2d                	jne    c00083f0 <KeCreateSymlink(char const*, char const*)+0x11b>
c00083c3:	85 f6                	test   esi,esi
c00083c5:	75 29                	jne    c00083f0 <KeCreateSymlink(char const*, char const*)+0x11b>
c00083c7:	50                   	push   eax
c00083c8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00083cc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00083d0:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00083d4:	e8 06 fa ff ff       	call   c0007ddf <KeRegisterSymlink(char const*, unsigned long long)>
c00083d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00083dc:	e8 6f 06 00 00       	call   c0008a50 <File::close()>
c00083e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00083e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00083e6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00083e9:	83 c4 10             	add    esp,0x10
c00083ec:	31 c0                	xor    eax,eax
c00083ee:	eb 19                	jmp    c0008409 <KeCreateSymlink(char const*, char const*)+0x134>
c00083f0:	83 ec 0c             	sub    esp,0xc
c00083f3:	53                   	push   ebx
c00083f4:	e8 57 06 00 00       	call   c0008a50 <File::close()>
c00083f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00083fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00083fe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008401:	83 c4 10             	add    esp,0x10
c0008404:	b8 01 00 00 00       	mov    eax,0x1
c0008409:	83 c4 2c             	add    esp,0x2c
c000840c:	5b                   	pop    ebx
c000840d:	5e                   	pop    esi
c000840e:	5f                   	pop    edi
c000840f:	5d                   	pop    ebp
c0008410:	c3                   	ret    
c0008411:	90                   	nop

c0008412 <File::read(unsigned long long, void*, int*)>:
c0008412:	53                   	push   ebx
c0008413:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008417:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000841b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0008422:	83 f8 19             	cmp    eax,0x19
c0008425:	77 35                	ja     c000845c <File::read(unsigned long long, void*, int*)+0x4a>
c0008427:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c000842e:	85 c0                	test   eax,eax
c0008430:	74 2a                	je     c000845c <File::read(unsigned long long, void*, int*)+0x4a>
c0008432:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008438:	85 c0                	test   eax,eax
c000843a:	74 20                	je     c000845c <File::read(unsigned long long, void*, int*)+0x4a>
c000843c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008440:	74 21                	je     c0008463 <File::read(unsigned long long, void*, int*)+0x51>
c0008442:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008444:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008448:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000844e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008452:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008456:	5b                   	pop    ebx
c0008457:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000845a:	ff e0                	jmp    eax
c000845c:	b8 0b 00 00 00       	mov    eax,0xb
c0008461:	eb 05                	jmp    c0008468 <File::read(unsigned long long, void*, int*)+0x56>
c0008463:	b8 05 00 00 00       	mov    eax,0x5
c0008468:	5b                   	pop    ebx
c0008469:	c3                   	ret    

c000846a <File::write(unsigned long long, void*, int*)>:
c000846a:	53                   	push   ebx
c000846b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000846f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008473:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000847a:	83 f8 19             	cmp    eax,0x19
c000847d:	77 35                	ja     c00084b4 <File::write(unsigned long long, void*, int*)+0x4a>
c000847f:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c0008486:	85 c0                	test   eax,eax
c0008488:	74 2a                	je     c00084b4 <File::write(unsigned long long, void*, int*)+0x4a>
c000848a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008490:	85 c0                	test   eax,eax
c0008492:	74 20                	je     c00084b4 <File::write(unsigned long long, void*, int*)+0x4a>
c0008494:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008498:	74 21                	je     c00084bb <File::write(unsigned long long, void*, int*)+0x51>
c000849a:	8b 08                	mov    ecx,DWORD PTR [eax]
c000849c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00084a0:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00084a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00084aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00084ae:	5b                   	pop    ebx
c00084af:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00084b2:	ff e0                	jmp    eax
c00084b4:	b8 0b 00 00 00       	mov    eax,0xb
c00084b9:	eb 05                	jmp    c00084c0 <File::write(unsigned long long, void*, int*)+0x56>
c00084bb:	b8 05 00 00 00       	mov    eax,0x5
c00084c0:	5b                   	pop    ebx
c00084c1:	c3                   	ret    

c00084c2 <Directory::read(unsigned long long, void*, int*)>:
c00084c2:	53                   	push   ebx
c00084c3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00084c7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00084cb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00084d2:	83 f8 19             	cmp    eax,0x19
c00084d5:	77 35                	ja     c000850c <Directory::read(unsigned long long, void*, int*)+0x4a>
c00084d7:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c00084de:	85 c0                	test   eax,eax
c00084e0:	74 2a                	je     c000850c <Directory::read(unsigned long long, void*, int*)+0x4a>
c00084e2:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00084e8:	85 c0                	test   eax,eax
c00084ea:	74 20                	je     c000850c <Directory::read(unsigned long long, void*, int*)+0x4a>
c00084ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00084f0:	74 21                	je     c0008513 <Directory::read(unsigned long long, void*, int*)+0x51>
c00084f2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00084f4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00084f8:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00084fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008502:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008506:	5b                   	pop    ebx
c0008507:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000850a:	ff e0                	jmp    eax
c000850c:	b8 0b 00 00 00       	mov    eax,0xb
c0008511:	eb 05                	jmp    c0008518 <Directory::read(unsigned long long, void*, int*)+0x56>
c0008513:	b8 05 00 00 00       	mov    eax,0x5
c0008518:	5b                   	pop    ebx
c0008519:	c3                   	ret    

c000851a <Directory::write(unsigned long long, void*, int*)>:
c000851a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000851e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0008525:	b8 0b 00 00 00       	mov    eax,0xb
c000852a:	83 fa 19             	cmp    edx,0x19
c000852d:	77 18                	ja     c0008547 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000852f:	8b 14 95 e0 2a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcd520]
c0008536:	85 d2                	test   edx,edx
c0008538:	74 0d                	je     c0008547 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000853a:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0008541:	19 c0                	sbb    eax,eax
c0008543:	83 e0 0a             	and    eax,0xa
c0008546:	40                   	inc    eax
c0008547:	c3                   	ret    

c0008548 <File::isAtty()>:
c0008548:	31 c0                	xor    eax,eax
c000854a:	c3                   	ret    
c000854b:	90                   	nop

c000854c <Directory::isAtty()>:
c000854c:	31 c0                	xor    eax,eax
c000854e:	c3                   	ret    
c000854f:	90                   	nop

c0008550 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0008550:	b8 0a 00 00 00       	mov    eax,0xa
c0008555:	c3                   	ret    

c0008556 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0008556:	b8 0a 00 00 00       	mov    eax,0xa
c000855b:	c3                   	ret    

c000855c <Filesystem::allocateSwapfile(char const*, int)>:
c000855c:	31 c0                	xor    eax,eax
c000855e:	31 d2                	xor    edx,edx
c0008560:	c3                   	ret    
c0008561:	90                   	nop

c0008562 <File::~File()>:
c0008562:	83 ec 0c             	sub    esp,0xc
c0008565:	ba 38 8f 02 c0       	mov    edx,0xc0028f38
c000856a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000856e:	89 10                	mov    DWORD PTR [eax],edx
c0008570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008574:	83 ec 0c             	sub    esp,0xc
c0008577:	50                   	push   eax
c0008578:	e8 85 b0 00 00       	call   c0013602 <UnixFile::~UnixFile()>
c000857d:	83 c4 10             	add    esp,0x10
c0008580:	90                   	nop
c0008581:	83 c4 0c             	add    esp,0xc
c0008584:	c3                   	ret    
c0008585:	90                   	nop

c0008586 <File::~File()>:
c0008586:	83 ec 0c             	sub    esp,0xc
c0008589:	83 ec 0c             	sub    esp,0xc
c000858c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008590:	e8 cd ff ff ff       	call   c0008562 <File::~File()>
c0008595:	83 c4 10             	add    esp,0x10
c0008598:	83 ec 08             	sub    esp,0x8
c000859b:	68 14 01 00 00       	push   0x114
c00085a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085a4:	e8 2b 55 00 00       	call   c000dad4 <operator delete(void*, unsigned long)>
c00085a9:	83 c4 10             	add    esp,0x10
c00085ac:	83 c4 0c             	add    esp,0xc
c00085af:	c3                   	ret    

c00085b0 <Directory::~Directory()>:
c00085b0:	83 ec 0c             	sub    esp,0xc
c00085b3:	ba 54 8f 02 c0       	mov    edx,0xc0028f54
c00085b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085bc:	89 10                	mov    DWORD PTR [eax],edx
c00085be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085c2:	83 ec 0c             	sub    esp,0xc
c00085c5:	50                   	push   eax
c00085c6:	e8 37 b0 00 00       	call   c0013602 <UnixFile::~UnixFile()>
c00085cb:	83 c4 10             	add    esp,0x10
c00085ce:	90                   	nop
c00085cf:	83 c4 0c             	add    esp,0xc
c00085d2:	c3                   	ret    
c00085d3:	90                   	nop

c00085d4 <Directory::~Directory()>:
c00085d4:	83 ec 0c             	sub    esp,0xc
c00085d7:	83 ec 0c             	sub    esp,0xc
c00085da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085de:	e8 cd ff ff ff       	call   c00085b0 <Directory::~Directory()>
c00085e3:	83 c4 10             	add    esp,0x10
c00085e6:	83 ec 08             	sub    esp,0x8
c00085e9:	68 14 01 00 00       	push   0x114
c00085ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085f2:	e8 dd 54 00 00       	call   c000dad4 <operator delete(void*, unsigned long)>
c00085f7:	83 c4 10             	add    esp,0x10
c00085fa:	83 c4 0c             	add    esp,0xc
c00085fd:	c3                   	ret    

c00085fe <Filesystem::Filesystem()>:
c00085fe:	ba cc 8e 02 c0       	mov    edx,0xc0028ecc
c0008603:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008607:	89 10                	mov    DWORD PTR [eax],edx
c0008609:	8b 15 04 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032304
c000860f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008613:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008616:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000861a:	a3 04 23 03 c0       	mov    ds:0xc0032304,eax
c000861f:	90                   	nop
c0008620:	c3                   	ret    
c0008621:	90                   	nop

c0008622 <Filesystem::~Filesystem()>:
c0008622:	ba cc 8e 02 c0       	mov    edx,0xc0028ecc
c0008627:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000862b:	89 10                	mov    DWORD PTR [eax],edx
c000862d:	90                   	nop
c000862e:	c3                   	ret    
c000862f:	90                   	nop

c0008630 <Filesystem::~Filesystem()>:
c0008630:	83 ec 0c             	sub    esp,0xc
c0008633:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008637:	e8 e6 ff ff ff       	call   c0008622 <Filesystem::~Filesystem()>
c000863c:	83 c4 04             	add    esp,0x4
c000863f:	83 ec 08             	sub    esp,0x8
c0008642:	6a 08                	push   0x8
c0008644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008648:	e8 87 54 00 00       	call   c000dad4 <operator delete(void*, unsigned long)>
c000864d:	83 c4 10             	add    esp,0x10
c0008650:	83 c4 0c             	add    esp,0xc
c0008653:	c3                   	ret    

c0008654 <Fs::getcwd(Process*, char*, int)>:
c0008654:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008658:	31 c0                	xor    eax,eax
c000865a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000865e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0008661:	7d 15                	jge    c0008678 <Fs::getcwd(Process*, char*, int)+0x24>
c0008663:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0008667:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000866e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0008671:	84 c9                	test   cl,cl
c0008673:	74 06                	je     c000867b <Fs::getcwd(Process*, char*, int)+0x27>
c0008675:	40                   	inc    eax
c0008676:	eb e2                	jmp    c000865a <Fs::getcwd(Process*, char*, int)+0x6>
c0008678:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000867b:	31 c0                	xor    eax,eax
c000867d:	c3                   	ret    

c000867e <Fs::initVFS()>:
c000867e:	83 ec 18             	sub    esp,0x18
c0008681:	6a 08                	push   0x8
c0008683:	e8 4c 78 00 00       	call   c000fed4 <malloc>
c0008688:	89 04 24             	mov    DWORD PTR [esp],eax
c000868b:	e8 04 51 01 00       	call   c001d794 <FAT::FAT()>
c0008690:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0008697:	e8 38 78 00 00       	call   c000fed4 <malloc>
c000869c:	89 04 24             	mov    DWORD PTR [esp],eax
c000869f:	e8 1e 60 01 00       	call   c001e6c2 <ISO9660::ISO9660()>
c00086a4:	83 c4 1c             	add    esp,0x1c
c00086a7:	c3                   	ret    

c00086a8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c00086a8:	55                   	push   ebp
c00086a9:	57                   	push   edi
c00086aa:	56                   	push   esi
c00086ab:	53                   	push   ebx
c00086ac:	81 ec 20 04 00 00    	sub    esp,0x420
c00086b2:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c00086b9:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c00086c0:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c00086c7:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c00086ce:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00086d2:	68 00 04 00 00       	push   0x400
c00086d7:	6a 00                	push   0x0
c00086d9:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00086dd:	57                   	push   edi
c00086de:	e8 0d 7e ff ff       	call   c00004f0 <memset>
c00086e3:	83 c4 10             	add    esp,0x10
c00086e6:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c00086ea:	75 0b                	jne    c00086f7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c00086ec:	50                   	push   eax
c00086ed:	50                   	push   eax
c00086ee:	56                   	push   esi
c00086ef:	57                   	push   edi
c00086f0:	e8 5b 7f ff ff       	call   c0000650 <strcpy>
c00086f5:	eb 45                	jmp    c000873c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c00086f7:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00086fa:	83 f8 2f             	cmp    eax,0x2f
c00086fd:	74 05                	je     c0008704 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c00086ff:	83 f8 5c             	cmp    eax,0x5c
c0008702:	75 19                	jne    c000871d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c0008704:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0008707:	3c 60                	cmp    al,0x60
c0008709:	7e 03                	jle    c000870e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c000870b:	83 e8 20             	sub    eax,0x20
c000870e:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0008712:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0008719:	50                   	push   eax
c000871a:	50                   	push   eax
c000871b:	eb 18                	jmp    c0008735 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c000871d:	50                   	push   eax
c000871e:	50                   	push   eax
c000871f:	55                   	push   ebp
c0008720:	57                   	push   edi
c0008721:	e8 2a 7f ff ff       	call   c0000650 <strcpy>
c0008726:	58                   	pop    eax
c0008727:	5a                   	pop    edx
c0008728:	68 6e a8 02 c0       	push   0xc002a86e
c000872d:	57                   	push   edi
c000872e:	e8 3d 81 ff ff       	call   c0000870 <strcat>
c0008733:	59                   	pop    ecx
c0008734:	5d                   	pop    ebp
c0008735:	56                   	push   esi
c0008736:	57                   	push   edi
c0008737:	e8 34 81 ff ff       	call   c0000870 <strcat>
c000873c:	83 c4 10             	add    esp,0x10
c000873f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0008743:	3c 60                	cmp    al,0x60
c0008745:	7e 03                	jle    c000874a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c0008747:	83 e8 20             	sub    eax,0x20
c000874a:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000874e:	be 03 00 00 00       	mov    esi,0x3
c0008753:	88 03                	mov    BYTE PTR [ebx],al
c0008755:	b8 03 00 00 00       	mov    eax,0x3
c000875a:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0008761:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0008767:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000876b:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c0008770:	89 fa                	mov    edx,edi
c0008772:	0f be ea             	movsx  ebp,dl
c0008775:	85 ed                	test   ebp,ebp
c0008777:	0f 84 a1 00 00 00    	je     c000881e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c000877d:	8d 56 01             	lea    edx,[esi+0x1]
c0008780:	83 fd 2f             	cmp    ebp,0x2f
c0008783:	74 05                	je     c000878a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c0008785:	83 fd 5c             	cmp    ebp,0x5c
c0008788:	75 12                	jne    c000879c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000878a:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000878f:	89 c5                	mov    ebp,eax
c0008791:	74 09                	je     c000879c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0008793:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0008797:	40                   	inc    eax
c0008798:	89 d6                	mov    esi,edx
c000879a:	eb cf                	jmp    c000876b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000879c:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c00087a1:	89 f9                	mov    ecx,edi
c00087a3:	0f be e9             	movsx  ebp,cl
c00087a6:	75 61                	jne    c0008809 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c00087a8:	83 fd 2e             	cmp    ebp,0x2e
c00087ab:	75 5c                	jne    c0008809 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c00087ad:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c00087b2:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c00087b7:	74 19                	je     c00087d2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c00087b9:	83 fd 2e             	cmp    ebp,0x2e
c00087bc:	74 55                	je     c0008813 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c00087be:	89 f2                	mov    edx,esi
c00087c0:	42                   	inc    edx
c00087c1:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c00087c6:	83 f9 2f             	cmp    ecx,0x2f
c00087c9:	74 f5                	je     c00087c0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c00087cb:	83 f9 5c             	cmp    ecx,0x5c
c00087ce:	74 f0                	je     c00087c0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c00087d0:	eb c6                	jmp    c0008798 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c00087d2:	83 fd 2e             	cmp    ebp,0x2e
c00087d5:	74 3c                	je     c0008813 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c00087d7:	83 f8 03             	cmp    eax,0x3
c00087da:	74 bc                	je     c0008798 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c00087dc:	42                   	inc    edx
c00087dd:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c00087e2:	83 f9 2f             	cmp    ecx,0x2f
c00087e5:	74 f5                	je     c00087dc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c00087e7:	83 f9 5c             	cmp    ecx,0x5c
c00087ea:	74 f0                	je     c00087dc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c00087ec:	48                   	dec    eax
c00087ed:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00087f1:	75 06                	jne    c00087f9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c00087f3:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00087f7:	eb f3                	jmp    c00087ec <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c00087f9:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00087fd:	74 07                	je     c0008806 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c00087ff:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0008803:	48                   	dec    eax
c0008804:	eb f3                	jmp    c00087f9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0008806:	40                   	inc    eax
c0008807:	eb 8f                	jmp    c0008798 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0008809:	83 fd 2f             	cmp    ebp,0x2f
c000880c:	74 8a                	je     c0008798 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000880e:	83 fd 5c             	cmp    ebp,0x5c
c0008811:	74 85                	je     c0008798 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0008813:	89 f9                	mov    ecx,edi
c0008815:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0008818:	40                   	inc    eax
c0008819:	e9 7a ff ff ff       	jmp    c0008798 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000881e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0008822:	83 ec 0c             	sub    esp,0xc
c0008825:	53                   	push   ebx
c0008826:	e8 55 7d ff ff       	call   c0000580 <strlen>
c000882b:	83 c4 10             	add    esp,0x10
c000882e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0008833:	74 1c                	je     c0008851 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0008835:	83 ec 0c             	sub    esp,0xc
c0008838:	53                   	push   ebx
c0008839:	e8 42 7d ff ff       	call   c0000580 <strlen>
c000883e:	83 c4 10             	add    esp,0x10
c0008841:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0008846:	74 09                	je     c0008851 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0008848:	31 ff                	xor    edi,edi
c000884a:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c000884f:	eb 5c                	jmp    c00088ad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0008851:	83 ec 0c             	sub    esp,0xc
c0008854:	53                   	push   ebx
c0008855:	e8 26 7d ff ff       	call   c0000580 <strlen>
c000885a:	83 c4 10             	add    esp,0x10
c000885d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0008862:	74 e4                	je     c0008848 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c0008864:	83 ec 0c             	sub    esp,0xc
c0008867:	53                   	push   ebx
c0008868:	e8 13 7d ff ff       	call   c0000580 <strlen>
c000886d:	83 c4 10             	add    esp,0x10
c0008870:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0008875:	eb ab                	jmp    c0008822 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c0008877:	52                   	push   edx
c0008878:	52                   	push   edx
c0008879:	53                   	push   ebx
c000887a:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000887e:	55                   	push   ebp
c000887f:	e8 cc 7d ff ff       	call   c0000650 <strcpy>
c0008884:	59                   	pop    ecx
c0008885:	58                   	pop    eax
c0008886:	53                   	push   ebx
c0008887:	55                   	push   ebp
c0008888:	e8 a1 f8 ff ff       	call   c000812e <KeDereferenceSymlink(char const*, char*)>
c000888d:	83 c4 10             	add    esp,0x10
c0008890:	48                   	dec    eax
c0008891:	75 37                	jne    c00088ca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0008893:	50                   	push   eax
c0008894:	53                   	push   ebx
c0008895:	55                   	push   ebp
c0008896:	68 6b 8e 02 c0       	push   0xc0028e6b
c000889b:	e8 c6 e6 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00088a0:	8d 47 01             	lea    eax,[edi+0x1]
c00088a3:	83 c4 10             	add    esp,0x10
c00088a6:	83 ff 14             	cmp    edi,0x14
c00088a9:	74 08                	je     c00088b3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c00088ab:	89 c7                	mov    edi,eax
c00088ad:	85 f6                	test   esi,esi
c00088af:	75 c6                	jne    c0008877 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c00088b1:	eb 17                	jmp    c00088ca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c00088b3:	83 ec 0c             	sub    esp,0xc
c00088b6:	bf 15 00 00 00       	mov    edi,0x15
c00088bb:	68 86 8e 02 c0       	push   0xc0028e86
c00088c0:	e8 63 7a 00 00       	call   c0010328 <KePanic(char const*)>
c00088c5:	83 c4 10             	add    esp,0x10
c00088c8:	eb e3                	jmp    c00088ad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c00088ca:	81 c4 1c 04 00 00    	add    esp,0x41c
c00088d0:	5b                   	pop    ebx
c00088d1:	5e                   	pop    esi
c00088d2:	5f                   	pop    edi
c00088d3:	5d                   	pop    ebp
c00088d4:	c3                   	ret    
c00088d5:	90                   	nop

c00088d6 <File::File(char const*, Process*, bool)>:
c00088d6:	83 ec 1c             	sub    esp,0x1c
c00088d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00088dd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00088e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00088e5:	83 ec 08             	sub    esp,0x8
c00088e8:	6a 00                	push   0x0
c00088ea:	50                   	push   eax
c00088eb:	e8 2c ab 00 00       	call   c001341c <UnixFile::UnixFile(int)>
c00088f0:	83 c4 10             	add    esp,0x10
c00088f3:	ba 38 8f 02 c0       	mov    edx,0xc0028f38
c00088f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00088fc:	89 10                	mov    DWORD PTR [eax],edx
c00088fe:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0008903:	85 c0                	test   eax,eax
c0008905:	74 0f                	je     c0008916 <File::File(char const*, Process*, bool)+0x40>
c0008907:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c000890c:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0008910:	74 04                	je     c0008916 <File::File(char const*, Process*, bool)+0x40>
c0008912:	b0 01                	mov    al,0x1
c0008914:	eb 02                	jmp    c0008918 <File::File(char const*, Process*, bool)+0x42>
c0008916:	b0 00                	mov    al,0x0
c0008918:	0f b6 c0             	movzx  eax,al
c000891b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000891f:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008925:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008929:	83 c2 0d             	add    edx,0xd
c000892c:	50                   	push   eax
c000892d:	51                   	push   ecx
c000892e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008932:	52                   	push   edx
c0008933:	e8 70 fd ff ff       	call   c00086a8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008938:	83 c4 10             	add    esp,0x10
c000893b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000893f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008942:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008946:	83 c2 0d             	add    edx,0xd
c0008949:	83 ec 04             	sub    esp,0x4
c000894c:	50                   	push   eax
c000894d:	52                   	push   edx
c000894e:	68 ac 8e 02 c0       	push   0xc0028eac
c0008953:	e8 0e e6 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008958:	83 c4 10             	add    esp,0x10
c000895b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000895f:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008962:	83 e8 41             	sub    eax,0x41
c0008965:	88 c2                	mov    dl,al
c0008967:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000896b:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008971:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008975:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0008979:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000897d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008983:	0f b6 c0             	movzx  eax,al
c0008986:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c000898d:	85 c0                	test   eax,eax
c000898f:	74 3e                	je     c00089cf <File::File(char const*, Process*, bool)+0xf9>
c0008991:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008995:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000899b:	0f b6 c0             	movzx  eax,al
c000899e:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c00089a5:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00089ab:	85 c0                	test   eax,eax
c00089ad:	75 20                	jne    c00089cf <File::File(char const*, Process*, bool)+0xf9>
c00089af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00089b3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00089b9:	0f b6 c0             	movzx  eax,al
c00089bc:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	50                   	push   eax
c00089c7:	e8 d4 27 00 00       	call   c000b1a0 <LogicalDisk::mount()>
c00089cc:	83 c4 10             	add    esp,0x10
c00089cf:	90                   	nop
c00089d0:	83 c4 1c             	add    esp,0x1c
c00089d3:	c3                   	ret    

c00089d4 <File::File(char const*, Process*)>:
c00089d4:	83 ec 0c             	sub    esp,0xc
c00089d7:	6a 01                	push   0x1
c00089d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e5:	e8 ec fe ff ff       	call   c00088d6 <File::File(char const*, Process*, bool)>
c00089ea:	83 c4 10             	add    esp,0x10
c00089ed:	90                   	nop
c00089ee:	83 c4 0c             	add    esp,0xc
c00089f1:	c3                   	ret    

c00089f2 <File::open(FileOpenMode)>:
c00089f2:	53                   	push   ebx
c00089f3:	b8 0b 00 00 00       	mov    eax,0xb
c00089f8:	83 ec 08             	sub    esp,0x8
c00089fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00089ff:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008a06:	83 fa 19             	cmp    edx,0x19
c0008a09:	77 40                	ja     c0008a4b <File::open(FileOpenMode)+0x59>
c0008a0b:	8b 14 95 e0 2a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcd520]
c0008a12:	85 d2                	test   edx,edx
c0008a14:	74 35                	je     c0008a4b <File::open(FileOpenMode)+0x59>
c0008a16:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008a1c:	85 d2                	test   edx,edx
c0008a1e:	74 2b                	je     c0008a4b <File::open(FileOpenMode)+0x59>
c0008a20:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008a24:	b8 06 00 00 00       	mov    eax,0x6
c0008a29:	75 20                	jne    c0008a4b <File::open(FileOpenMode)+0x59>
c0008a2b:	8b 02                	mov    eax,DWORD PTR [edx]
c0008a2d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a37:	51                   	push   ecx
c0008a38:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008a3b:	51                   	push   ecx
c0008a3c:	52                   	push   edx
c0008a3d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0008a40:	83 c4 10             	add    esp,0x10
c0008a43:	85 c0                	test   eax,eax
c0008a45:	75 04                	jne    c0008a4b <File::open(FileOpenMode)+0x59>
c0008a47:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008a4b:	83 c4 08             	add    esp,0x8
c0008a4e:	5b                   	pop    ebx
c0008a4f:	c3                   	ret    

c0008a50 <File::close()>:
c0008a50:	53                   	push   ebx
c0008a51:	b8 0b 00 00 00       	mov    eax,0xb
c0008a56:	83 ec 08             	sub    esp,0x8
c0008a59:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008a5d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008a64:	83 f9 19             	cmp    ecx,0x19
c0008a67:	77 41                	ja     c0008aaa <File::close()+0x5a>
c0008a69:	8b 1c 8d e0 2a 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffcd520]
c0008a70:	85 db                	test   ebx,ebx
c0008a72:	74 36                	je     c0008aaa <File::close()+0x5a>
c0008a74:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008a7b:	74 2d                	je     c0008aaa <File::close()+0x5a>
c0008a7d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008a81:	b8 05 00 00 00       	mov    eax,0x5
c0008a86:	74 22                	je     c0008aaa <File::close()+0x5a>
c0008a88:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008a8c:	8b 04 8d e0 2a 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffcd520]
c0008a93:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008a99:	53                   	push   ebx
c0008a9a:	53                   	push   ebx
c0008a9b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008a9d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008aa3:	50                   	push   eax
c0008aa4:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c0008aa7:	83 c4 10             	add    esp,0x10
c0008aaa:	83 c4 08             	add    esp,0x8
c0008aad:	5b                   	pop    ebx
c0008aae:	c3                   	ret    
c0008aaf:	90                   	nop

c0008ab0 <File::seek(unsigned long long)>:
c0008ab0:	56                   	push   esi
c0008ab1:	b8 0b 00 00 00       	mov    eax,0xb
c0008ab6:	53                   	push   ebx
c0008ab7:	51                   	push   ecx
c0008ab8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008abc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ac0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008ac4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008acb:	83 fa 19             	cmp    edx,0x19
c0008ace:	77 31                	ja     c0008b01 <File::seek(unsigned long long)+0x51>
c0008ad0:	8b 14 95 e0 2a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcd520]
c0008ad7:	85 d2                	test   edx,edx
c0008ad9:	74 26                	je     c0008b01 <File::seek(unsigned long long)+0x51>
c0008adb:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008ae1:	85 d2                	test   edx,edx
c0008ae3:	74 1c                	je     c0008b01 <File::seek(unsigned long long)+0x51>
c0008ae5:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008ae9:	b8 05 00 00 00       	mov    eax,0x5
c0008aee:	74 11                	je     c0008b01 <File::seek(unsigned long long)+0x51>
c0008af0:	8b 02                	mov    eax,DWORD PTR [edx]
c0008af2:	53                   	push   ebx
c0008af3:	51                   	push   ecx
c0008af4:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008afa:	52                   	push   edx
c0008afb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	5a                   	pop    edx
c0008b02:	5b                   	pop    ebx
c0008b03:	5e                   	pop    esi
c0008b04:	c3                   	ret    
c0008b05:	90                   	nop

c0008b06 <File::truncate(unsigned long long)>:
c0008b06:	56                   	push   esi
c0008b07:	b8 0b 00 00 00       	mov    eax,0xb
c0008b0c:	53                   	push   ebx
c0008b0d:	51                   	push   ecx
c0008b0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008b12:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008b16:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b1a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008b21:	83 fa 19             	cmp    edx,0x19
c0008b24:	77 31                	ja     c0008b57 <File::truncate(unsigned long long)+0x51>
c0008b26:	8b 14 95 e0 2a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcd520]
c0008b2d:	85 d2                	test   edx,edx
c0008b2f:	74 26                	je     c0008b57 <File::truncate(unsigned long long)+0x51>
c0008b31:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008b37:	85 d2                	test   edx,edx
c0008b39:	74 1c                	je     c0008b57 <File::truncate(unsigned long long)+0x51>
c0008b3b:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008b3f:	b8 05 00 00 00       	mov    eax,0x5
c0008b44:	74 11                	je     c0008b57 <File::truncate(unsigned long long)+0x51>
c0008b46:	8b 02                	mov    eax,DWORD PTR [edx]
c0008b48:	53                   	push   ebx
c0008b49:	51                   	push   ecx
c0008b4a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008b50:	52                   	push   edx
c0008b51:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0008b54:	83 c4 10             	add    esp,0x10
c0008b57:	5a                   	pop    edx
c0008b58:	5b                   	pop    ebx
c0008b59:	5e                   	pop    esi
c0008b5a:	c3                   	ret    
c0008b5b:	90                   	nop

c0008b5c <File::tell(unsigned long long*)>:
c0008b5c:	83 ec 0c             	sub    esp,0xc
c0008b5f:	b8 0b 00 00 00       	mov    eax,0xb
c0008b64:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008b68:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0008b6f:	83 fa 19             	cmp    edx,0x19
c0008b72:	77 34                	ja     c0008ba8 <File::tell(unsigned long long*)+0x4c>
c0008b74:	8b 14 95 e0 2a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcd520]
c0008b7b:	85 d2                	test   edx,edx
c0008b7d:	74 29                	je     c0008ba8 <File::tell(unsigned long long*)+0x4c>
c0008b7f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008b85:	85 d2                	test   edx,edx
c0008b87:	74 1f                	je     c0008ba8 <File::tell(unsigned long long*)+0x4c>
c0008b89:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0008b8d:	b8 05 00 00 00       	mov    eax,0x5
c0008b92:	74 14                	je     c0008ba8 <File::tell(unsigned long long*)+0x4c>
c0008b94:	50                   	push   eax
c0008b95:	8b 02                	mov    eax,DWORD PTR [edx]
c0008b97:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008b9b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0008ba1:	52                   	push   edx
c0008ba2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	83 c4 0c             	add    esp,0xc
c0008bab:	c3                   	ret    

c0008bac <File::rewind()>:
c0008bac:	83 ec 10             	sub    esp,0x10
c0008baf:	6a 00                	push   0x0
c0008bb1:	6a 00                	push   0x0
c0008bb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008bb7:	e8 f4 fe ff ff       	call   c0008ab0 <File::seek(unsigned long long)>
c0008bbc:	83 c4 1c             	add    esp,0x1c
c0008bbf:	c3                   	ret    

c0008bc0 <File::unlink()>:
c0008bc0:	83 ec 0c             	sub    esp,0xc
c0008bc3:	b8 0b 00 00 00       	mov    eax,0xb
c0008bc8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bcc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008bd3:	83 f9 19             	cmp    ecx,0x19
c0008bd6:	77 2f                	ja     c0008c07 <File::unlink()+0x47>
c0008bd8:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c0008bdf:	85 c9                	test   ecx,ecx
c0008be1:	74 24                	je     c0008c07 <File::unlink()+0x47>
c0008be3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008be9:	85 c9                	test   ecx,ecx
c0008beb:	74 1a                	je     c0008c07 <File::unlink()+0x47>
c0008bed:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008bf1:	b8 06 00 00 00       	mov    eax,0x6
c0008bf6:	75 0f                	jne    c0008c07 <File::unlink()+0x47>
c0008bf8:	50                   	push   eax
c0008bf9:	83 c2 0d             	add    edx,0xd
c0008bfc:	50                   	push   eax
c0008bfd:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008bff:	52                   	push   edx
c0008c00:	51                   	push   ecx
c0008c01:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008c04:	83 c4 10             	add    esp,0x10
c0008c07:	83 c4 0c             	add    esp,0xc
c0008c0a:	c3                   	ret    
c0008c0b:	90                   	nop

c0008c0c <File::rename(char const*)>:
c0008c0c:	83 ec 0c             	sub    esp,0xc
c0008c0f:	b8 0b 00 00 00       	mov    eax,0xb
c0008c14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008c18:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008c1f:	83 f9 19             	cmp    ecx,0x19
c0008c22:	77 32                	ja     c0008c56 <File::rename(char const*)+0x4a>
c0008c24:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c0008c2b:	85 c9                	test   ecx,ecx
c0008c2d:	74 27                	je     c0008c56 <File::rename(char const*)+0x4a>
c0008c2f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008c35:	85 c9                	test   ecx,ecx
c0008c37:	74 1d                	je     c0008c56 <File::rename(char const*)+0x4a>
c0008c39:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008c3d:	b8 06 00 00 00       	mov    eax,0x6
c0008c42:	75 12                	jne    c0008c56 <File::rename(char const*)+0x4a>
c0008c44:	50                   	push   eax
c0008c45:	83 c2 0d             	add    edx,0xd
c0008c48:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008c4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008c4e:	52                   	push   edx
c0008c4f:	51                   	push   ecx
c0008c50:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008c53:	83 c4 10             	add    esp,0x10
c0008c56:	83 c4 0c             	add    esp,0xc
c0008c59:	c3                   	ret    

c0008c5a <File::chfatattr(unsigned char, unsigned char)>:
c0008c5a:	57                   	push   edi
c0008c5b:	b8 0b 00 00 00       	mov    eax,0xb
c0008c60:	56                   	push   esi
c0008c61:	53                   	push   ebx
c0008c62:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008c66:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008c6a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008c6e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008c75:	83 f9 19             	cmp    ecx,0x19
c0008c78:	77 37                	ja     c0008cb1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008c7a:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c0008c81:	85 c9                	test   ecx,ecx
c0008c83:	74 2c                	je     c0008cb1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008c85:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008c8b:	85 c9                	test   ecx,ecx
c0008c8d:	74 22                	je     c0008cb1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008c8f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008c93:	b8 06 00 00 00       	mov    eax,0x6
c0008c98:	75 17                	jne    c0008cb1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008c9a:	89 f0                	mov    eax,esi
c0008c9c:	8b 39                	mov    edi,DWORD PTR [ecx]
c0008c9e:	0f b6 db             	movzx  ebx,bl
c0008ca1:	0f b6 f0             	movzx  esi,al
c0008ca4:	83 c2 0d             	add    edx,0xd
c0008ca7:	56                   	push   esi
c0008ca8:	53                   	push   ebx
c0008ca9:	52                   	push   edx
c0008caa:	51                   	push   ecx
c0008cab:	ff 57 38             	call   DWORD PTR [edi+0x38]
c0008cae:	83 c4 10             	add    esp,0x10
c0008cb1:	5b                   	pop    ebx
c0008cb2:	5e                   	pop    esi
c0008cb3:	5f                   	pop    edi
c0008cb4:	c3                   	ret    
c0008cb5:	90                   	nop

c0008cb6 <File::exists()>:
c0008cb6:	83 ec 0c             	sub    esp,0xc
c0008cb9:	31 c0                	xor    eax,eax
c0008cbb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008cbf:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008cc6:	83 f9 19             	cmp    ecx,0x19
c0008cc9:	77 24                	ja     c0008cef <File::exists()+0x39>
c0008ccb:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c0008cd2:	85 c9                	test   ecx,ecx
c0008cd4:	74 19                	je     c0008cef <File::exists()+0x39>
c0008cd6:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008cdc:	85 c9                	test   ecx,ecx
c0008cde:	74 0f                	je     c0008cef <File::exists()+0x39>
c0008ce0:	50                   	push   eax
c0008ce1:	83 c2 0d             	add    edx,0xd
c0008ce4:	50                   	push   eax
c0008ce5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008ce7:	52                   	push   edx
c0008ce8:	51                   	push   ecx
c0008ce9:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008cec:	83 c4 10             	add    esp,0x10
c0008cef:	83 c4 0c             	add    esp,0xc
c0008cf2:	c3                   	ret    
c0008cf3:	90                   	nop

c0008cf4 <File::stat(unsigned long long*, bool*)>:
c0008cf4:	56                   	push   esi
c0008cf5:	53                   	push   ebx
c0008cf6:	50                   	push   eax
c0008cf7:	b8 0b 00 00 00       	mov    eax,0xb
c0008cfc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008d00:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008d04:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008d08:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008d0f:	83 f9 19             	cmp    ecx,0x19
c0008d12:	77 3d                	ja     c0008d51 <File::stat(unsigned long long*, bool*)+0x5d>
c0008d14:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c0008d1b:	85 c9                	test   ecx,ecx
c0008d1d:	74 32                	je     c0008d51 <File::stat(unsigned long long*, bool*)+0x5d>
c0008d1f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008d25:	85 c9                	test   ecx,ecx
c0008d27:	74 28                	je     c0008d51 <File::stat(unsigned long long*, bool*)+0x5d>
c0008d29:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008d2d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008d2f:	74 13                	je     c0008d44 <File::stat(unsigned long long*, bool*)+0x50>
c0008d31:	83 ec 04             	sub    esp,0x4
c0008d34:	56                   	push   esi
c0008d35:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008d3b:	51                   	push   ecx
c0008d3c:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0008d3f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0008d42:	eb 0a                	jmp    c0008d4e <File::stat(unsigned long long*, bool*)+0x5a>
c0008d44:	53                   	push   ebx
c0008d45:	83 c2 0d             	add    edx,0xd
c0008d48:	56                   	push   esi
c0008d49:	52                   	push   edx
c0008d4a:	51                   	push   ecx
c0008d4b:	ff 50 34             	call   DWORD PTR [eax+0x34]
c0008d4e:	83 c4 10             	add    esp,0x10
c0008d51:	5a                   	pop    edx
c0008d52:	5b                   	pop    ebx
c0008d53:	5e                   	pop    esi
c0008d54:	c3                   	ret    

c0008d55 <Fs::setcwd(Process*, char*)>:
c0008d55:	55                   	push   ebp
c0008d56:	57                   	push   edi
c0008d57:	56                   	push   esi
c0008d58:	53                   	push   ebx
c0008d59:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0008d5f:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c0008d66:	6a 00                	push   0x0
c0008d68:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0008d6e:	57                   	push   edi
c0008d6f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0008d76:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0008d7a:	56                   	push   esi
c0008d7b:	e8 28 f9 ff ff       	call   c00086a8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008d80:	89 34 24             	mov    DWORD PTR [esp],esi
c0008d83:	e8 f8 77 ff ff       	call   c0000580 <strlen>
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 f8 02             	cmp    eax,0x2
c0008d8e:	77 15                	ja     c0008da5 <Fs::setcwd(Process*, char*)+0x50>
c0008d90:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c0008d95:	83 eb 41             	sub    ebx,0x41
c0008d98:	8b 04 9d e0 2a 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffcd520]
c0008d9f:	85 c0                	test   eax,eax
c0008da1:	75 1c                	jne    c0008dbf <Fs::setcwd(Process*, char*)+0x6a>
c0008da3:	eb 2f                	jmp    c0008dd4 <Fs::setcwd(Process*, char*)+0x7f>
c0008da5:	83 ec 0c             	sub    esp,0xc
c0008da8:	56                   	push   esi
c0008da9:	e8 d2 77 ff ff       	call   c0000580 <strlen>
c0008dae:	83 c4 10             	add    esp,0x10
c0008db1:	83 f8 03             	cmp    eax,0x3
c0008db4:	75 57                	jne    c0008e0d <Fs::setcwd(Process*, char*)+0xb8>
c0008db6:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008dbb:	75 50                	jne    c0008e0d <Fs::setcwd(Process*, char*)+0xb8>
c0008dbd:	eb d1                	jmp    c0008d90 <Fs::setcwd(Process*, char*)+0x3b>
c0008dbf:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c0008dc6:	75 0c                	jne    c0008dd4 <Fs::setcwd(Process*, char*)+0x7f>
c0008dc8:	83 ec 0c             	sub    esp,0xc
c0008dcb:	50                   	push   eax
c0008dcc:	e8 cf 23 00 00       	call   c000b1a0 <LogicalDisk::mount()>
c0008dd1:	83 c4 10             	add    esp,0x10
c0008dd4:	83 fb 19             	cmp    ebx,0x19
c0008dd7:	b8 03 00 00 00       	mov    eax,0x3
c0008ddc:	0f 87 c6 00 00 00    	ja     c0008ea8 <Fs::setcwd(Process*, char*)+0x153>
c0008de2:	8b 14 9d e0 2a 03 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffcd520]
c0008de9:	b8 05 00 00 00       	mov    eax,0x5
c0008dee:	85 d2                	test   edx,edx
c0008df0:	0f 84 b2 00 00 00    	je     c0008ea8 <Fs::setcwd(Process*, char*)+0x153>
c0008df6:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008dfd:	b8 06 00 00 00       	mov    eax,0x6
c0008e02:	0f 85 92 00 00 00    	jne    c0008e9a <Fs::setcwd(Process*, char*)+0x145>
c0008e08:	e9 9b 00 00 00       	jmp    c0008ea8 <Fs::setcwd(Process*, char*)+0x153>
c0008e0d:	83 ec 0c             	sub    esp,0xc
c0008e10:	68 14 01 00 00       	push   0x114
c0008e15:	e8 ba 70 00 00       	call   c000fed4 <malloc>
c0008e1a:	83 c4 0c             	add    esp,0xc
c0008e1d:	55                   	push   ebp
c0008e1e:	56                   	push   esi
c0008e1f:	50                   	push   eax
c0008e20:	89 c3                	mov    ebx,eax
c0008e22:	e8 ad fb ff ff       	call   c00089d4 <File::File(char const*, Process*)>
c0008e27:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0008e2c:	83 c4 0c             	add    esp,0xc
c0008e2f:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0008e33:	50                   	push   eax
c0008e34:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008e38:	50                   	push   eax
c0008e39:	53                   	push   ebx
c0008e3a:	e8 b5 fe ff ff       	call   c0008cf4 <File::stat(unsigned long long*, bool*)>
c0008e3f:	83 c4 10             	add    esp,0x10
c0008e42:	83 f8 02             	cmp    eax,0x2
c0008e45:	74 27                	je     c0008e6e <Fs::setcwd(Process*, char*)+0x119>
c0008e47:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0008e4c:	75 1c                	jne    c0008e6a <Fs::setcwd(Process*, char*)+0x115>
c0008e4e:	85 db                	test   ebx,ebx
c0008e50:	b8 02 00 00 00       	mov    eax,0x2
c0008e55:	74 51                	je     c0008ea8 <Fs::setcwd(Process*, char*)+0x153>
c0008e57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008e59:	83 ec 0c             	sub    esp,0xc
c0008e5c:	53                   	push   ebx
c0008e5d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008e60:	83 c4 10             	add    esp,0x10
c0008e63:	b8 02 00 00 00       	mov    eax,0x2
c0008e68:	eb 3e                	jmp    c0008ea8 <Fs::setcwd(Process*, char*)+0x153>
c0008e6a:	85 c0                	test   eax,eax
c0008e6c:	74 1c                	je     c0008e8a <Fs::setcwd(Process*, char*)+0x135>
c0008e6e:	85 db                	test   ebx,ebx
c0008e70:	b8 01 00 00 00       	mov    eax,0x1
c0008e75:	74 31                	je     c0008ea8 <Fs::setcwd(Process*, char*)+0x153>
c0008e77:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008e79:	83 ec 0c             	sub    esp,0xc
c0008e7c:	53                   	push   ebx
c0008e7d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008e80:	83 c4 10             	add    esp,0x10
c0008e83:	b8 01 00 00 00       	mov    eax,0x1
c0008e88:	eb 1e                	jmp    c0008ea8 <Fs::setcwd(Process*, char*)+0x153>
c0008e8a:	85 db                	test   ebx,ebx
c0008e8c:	74 0c                	je     c0008e9a <Fs::setcwd(Process*, char*)+0x145>
c0008e8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008e90:	83 ec 0c             	sub    esp,0xc
c0008e93:	53                   	push   ebx
c0008e94:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008e97:	83 c4 10             	add    esp,0x10
c0008e9a:	50                   	push   eax
c0008e9b:	50                   	push   eax
c0008e9c:	56                   	push   esi
c0008e9d:	57                   	push   edi
c0008e9e:	e8 ad 77 ff ff       	call   c0000650 <strcpy>
c0008ea3:	83 c4 10             	add    esp,0x10
c0008ea6:	31 c0                	xor    eax,eax
c0008ea8:	81 c4 1c 02 00 00    	add    esp,0x21c
c0008eae:	5b                   	pop    ebx
c0008eaf:	5e                   	pop    esi
c0008eb0:	5f                   	pop    edi
c0008eb1:	5d                   	pop    ebp
c0008eb2:	c3                   	ret    
c0008eb3:	90                   	nop

c0008eb4 <Directory::Directory(char const*, Process*)>:
c0008eb4:	83 ec 0c             	sub    esp,0xc
c0008eb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ebb:	83 ec 08             	sub    esp,0x8
c0008ebe:	6a 00                	push   0x0
c0008ec0:	50                   	push   eax
c0008ec1:	e8 56 a5 00 00       	call   c001341c <UnixFile::UnixFile(int)>
c0008ec6:	83 c4 10             	add    esp,0x10
c0008ec9:	ba 54 8f 02 c0       	mov    edx,0xc0028f54
c0008ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ed2:	89 10                	mov    DWORD PTR [eax],edx
c0008ed4:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c0008ed9:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008edd:	0f 95 c0             	setne  al
c0008ee0:	0f b6 c0             	movzx  eax,al
c0008ee3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008ee7:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008eed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ef1:	83 c2 0d             	add    edx,0xd
c0008ef4:	50                   	push   eax
c0008ef5:	51                   	push   ecx
c0008ef6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008efa:	52                   	push   edx
c0008efb:	e8 a8 f7 ff ff       	call   c00086a8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008f00:	83 c4 10             	add    esp,0x10
c0008f03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f07:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008f0a:	83 e8 41             	sub    eax,0x41
c0008f0d:	88 c2                	mov    dl,al
c0008f0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f13:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008f19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f1d:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0008f21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f25:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008f2b:	0f b6 c0             	movzx  eax,al
c0008f2e:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c0008f35:	85 c0                	test   eax,eax
c0008f37:	74 3e                	je     c0008f77 <Directory::Directory(char const*, Process*)+0xc3>
c0008f39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f3d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008f43:	0f b6 c0             	movzx  eax,al
c0008f46:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c0008f4d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008f53:	85 c0                	test   eax,eax
c0008f55:	75 20                	jne    c0008f77 <Directory::Directory(char const*, Process*)+0xc3>
c0008f57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f5b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008f61:	0f b6 c0             	movzx  eax,al
c0008f64:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c0008f6b:	83 ec 0c             	sub    esp,0xc
c0008f6e:	50                   	push   eax
c0008f6f:	e8 2c 22 00 00       	call   c000b1a0 <LogicalDisk::mount()>
c0008f74:	83 c4 10             	add    esp,0x10
c0008f77:	90                   	nop
c0008f78:	83 c4 0c             	add    esp,0xc
c0008f7b:	c3                   	ret    

c0008f7c <Directory::open()>:
c0008f7c:	53                   	push   ebx
c0008f7d:	b8 0b 00 00 00       	mov    eax,0xb
c0008f82:	83 ec 08             	sub    esp,0x8
c0008f85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008f89:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008f90:	83 fa 19             	cmp    edx,0x19
c0008f93:	77 3d                	ja     c0008fd2 <Directory::open()+0x56>
c0008f95:	8b 14 95 e0 2a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcd520]
c0008f9c:	85 d2                	test   edx,edx
c0008f9e:	74 32                	je     c0008fd2 <Directory::open()+0x56>
c0008fa0:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008fa6:	85 d2                	test   edx,edx
c0008fa8:	74 28                	je     c0008fd2 <Directory::open()+0x56>
c0008faa:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008fae:	b8 06 00 00 00       	mov    eax,0x6
c0008fb3:	75 1d                	jne    c0008fd2 <Directory::open()+0x56>
c0008fb5:	50                   	push   eax
c0008fb6:	8b 02                	mov    eax,DWORD PTR [edx]
c0008fb8:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008fbe:	51                   	push   ecx
c0008fbf:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008fc2:	51                   	push   ecx
c0008fc3:	52                   	push   edx
c0008fc4:	ff 50 50             	call   DWORD PTR [eax+0x50]
c0008fc7:	83 c4 10             	add    esp,0x10
c0008fca:	85 c0                	test   eax,eax
c0008fcc:	75 04                	jne    c0008fd2 <Directory::open()+0x56>
c0008fce:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008fd2:	83 c4 08             	add    esp,0x8
c0008fd5:	5b                   	pop    ebx
c0008fd6:	c3                   	ret    
c0008fd7:	90                   	nop

c0008fd8 <Directory::close()>:
c0008fd8:	53                   	push   ebx
c0008fd9:	b8 0b 00 00 00       	mov    eax,0xb
c0008fde:	83 ec 08             	sub    esp,0x8
c0008fe1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008fe5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008fec:	83 f9 19             	cmp    ecx,0x19
c0008fef:	77 41                	ja     c0009032 <Directory::close()+0x5a>
c0008ff1:	8b 1c 8d e0 2a 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffcd520]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	74 36                	je     c0009032 <Directory::close()+0x5a>
c0008ffc:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0009003:	74 2d                	je     c0009032 <Directory::close()+0x5a>
c0009005:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009009:	b8 05 00 00 00       	mov    eax,0x5
c000900e:	74 22                	je     c0009032 <Directory::close()+0x5a>
c0009010:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0009014:	8b 04 8d e0 2a 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffcd520]
c000901b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0009021:	53                   	push   ebx
c0009022:	53                   	push   ebx
c0009023:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009025:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000902b:	50                   	push   eax
c000902c:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000902f:	83 c4 10             	add    esp,0x10
c0009032:	83 c4 08             	add    esp,0x8
c0009035:	5b                   	pop    ebx
c0009036:	c3                   	ret    
c0009037:	90                   	nop

c0009038 <Directory::unlink()>:
c0009038:	83 ec 0c             	sub    esp,0xc
c000903b:	b8 0b 00 00 00       	mov    eax,0xb
c0009040:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009044:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000904b:	83 f9 19             	cmp    ecx,0x19
c000904e:	77 2f                	ja     c000907f <Directory::unlink()+0x47>
c0009050:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c0009057:	85 c9                	test   ecx,ecx
c0009059:	74 24                	je     c000907f <Directory::unlink()+0x47>
c000905b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0009061:	85 c9                	test   ecx,ecx
c0009063:	74 1a                	je     c000907f <Directory::unlink()+0x47>
c0009065:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009069:	b8 06 00 00 00       	mov    eax,0x6
c000906e:	75 0f                	jne    c000907f <Directory::unlink()+0x47>
c0009070:	50                   	push   eax
c0009071:	83 c2 0d             	add    edx,0xd
c0009074:	50                   	push   eax
c0009075:	8b 01                	mov    eax,DWORD PTR [ecx]
c0009077:	52                   	push   edx
c0009078:	51                   	push   ecx
c0009079:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000907c:	83 c4 10             	add    esp,0x10
c000907f:	83 c4 0c             	add    esp,0xc
c0009082:	c3                   	ret    
c0009083:	90                   	nop

c0009084 <Directory::rename(char const*)>:
c0009084:	83 ec 0c             	sub    esp,0xc
c0009087:	b8 0b 00 00 00       	mov    eax,0xb
c000908c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009090:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0009097:	83 f9 19             	cmp    ecx,0x19
c000909a:	77 32                	ja     c00090ce <Directory::rename(char const*)+0x4a>
c000909c:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c00090a3:	85 c9                	test   ecx,ecx
c00090a5:	74 27                	je     c00090ce <Directory::rename(char const*)+0x4a>
c00090a7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00090ad:	85 c9                	test   ecx,ecx
c00090af:	74 1d                	je     c00090ce <Directory::rename(char const*)+0x4a>
c00090b1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00090b5:	b8 06 00 00 00       	mov    eax,0x6
c00090ba:	75 12                	jne    c00090ce <Directory::rename(char const*)+0x4a>
c00090bc:	50                   	push   eax
c00090bd:	83 c2 0d             	add    edx,0xd
c00090c0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00090c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00090c6:	52                   	push   edx
c00090c7:	51                   	push   ecx
c00090c8:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	83 c4 0c             	add    esp,0xc
c00090d1:	c3                   	ret    

c00090d2 <Directory::exists()>:
c00090d2:	83 ec 0c             	sub    esp,0xc
c00090d5:	31 c0                	xor    eax,eax
c00090d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00090db:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00090e2:	83 f9 19             	cmp    ecx,0x19
c00090e5:	77 24                	ja     c000910b <Directory::exists()+0x39>
c00090e7:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c00090ee:	85 c9                	test   ecx,ecx
c00090f0:	74 19                	je     c000910b <Directory::exists()+0x39>
c00090f2:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00090f8:	85 c9                	test   ecx,ecx
c00090fa:	74 0f                	je     c000910b <Directory::exists()+0x39>
c00090fc:	50                   	push   eax
c00090fd:	83 c2 0d             	add    edx,0xd
c0009100:	50                   	push   eax
c0009101:	8b 01                	mov    eax,DWORD PTR [ecx]
c0009103:	52                   	push   edx
c0009104:	51                   	push   ecx
c0009105:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0009108:	83 c4 10             	add    esp,0x10
c000910b:	83 c4 0c             	add    esp,0xc
c000910e:	c3                   	ret    
c000910f:	90                   	nop

c0009110 <Directory::read(dirent*)>:
c0009110:	83 ec 1c             	sub    esp,0x1c
c0009113:	b8 0b 00 00 00       	mov    eax,0xb
c0009118:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000911c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0009123:	83 f9 19             	cmp    ecx,0x19
c0009126:	77 30                	ja     c0009158 <Directory::read(dirent*)+0x48>
c0009128:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c000912f:	85 c9                	test   ecx,ecx
c0009131:	74 25                	je     c0009158 <Directory::read(dirent*)+0x48>
c0009133:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000913a:	74 1c                	je     c0009158 <Directory::read(dirent*)+0x48>
c000913c:	83 ec 0c             	sub    esp,0xc
c000913f:	8b 02                	mov    eax,DWORD PTR [edx]
c0009141:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0009145:	51                   	push   ecx
c0009146:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000914a:	6a 00                	push   0x0
c000914c:	68 10 01 00 00       	push   0x110
c0009151:	52                   	push   edx
c0009152:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009155:	83 c4 20             	add    esp,0x20
c0009158:	83 c4 1c             	add    esp,0x1c
c000915b:	c3                   	ret    

c000915c <Directory::create()>:
c000915c:	83 ec 0c             	sub    esp,0xc
c000915f:	b8 0b 00 00 00       	mov    eax,0xb
c0009164:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009168:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000916f:	83 f9 19             	cmp    ecx,0x19
c0009172:	77 2f                	ja     c00091a3 <Directory::create()+0x47>
c0009174:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c000917b:	85 c9                	test   ecx,ecx
c000917d:	74 24                	je     c00091a3 <Directory::create()+0x47>
c000917f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0009185:	85 c9                	test   ecx,ecx
c0009187:	74 1a                	je     c00091a3 <Directory::create()+0x47>
c0009189:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000918d:	b8 06 00 00 00       	mov    eax,0x6
c0009192:	75 0f                	jne    c00091a3 <Directory::create()+0x47>
c0009194:	50                   	push   eax
c0009195:	83 c2 0d             	add    edx,0xd
c0009198:	50                   	push   eax
c0009199:	8b 01                	mov    eax,DWORD PTR [ecx]
c000919b:	52                   	push   edx
c000919c:	51                   	push   ecx
c000919d:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00091a0:	83 c4 10             	add    esp,0x10
c00091a3:	83 c4 0c             	add    esp,0xc
c00091a6:	c3                   	ret    
c00091a7:	90                   	nop

c00091a8 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00091a8:	b8 0a 00 00 00       	mov    eax,0xa
c00091ad:	c3                   	ret    
c00091ae:	66 90                	xchg   ax,ax

c00091b0 <Bus::Bus(char const*)>:
c00091b0:	83 ec 0c             	sub    esp,0xc
c00091b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091b7:	83 ec 08             	sub    esp,0x8
c00091ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091be:	50                   	push   eax
c00091bf:	e8 e0 11 00 00       	call   c000a3a4 <Device::Device(char const*)>
c00091c4:	83 c4 10             	add    esp,0x10
c00091c7:	ba 70 8f 02 c0       	mov    edx,0xc0028f70
c00091cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091d0:	89 10                	mov    DWORD PTR [eax],edx
c00091d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091d6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00091e0:	90                   	nop
c00091e1:	83 c4 0c             	add    esp,0xc
c00091e4:	c3                   	ret    
c00091e5:	90                   	nop
c00091e6:	66 90                	xchg   ax,ax

c00091e8 <Bus::~Bus()>:
c00091e8:	83 ec 0c             	sub    esp,0xc
c00091eb:	ba 70 8f 02 c0       	mov    edx,0xc0028f70
c00091f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091f4:	89 10                	mov    DWORD PTR [eax],edx
c00091f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091fa:	83 ec 0c             	sub    esp,0xc
c00091fd:	50                   	push   eax
c00091fe:	e8 41 0f 00 00       	call   c000a144 <Device::~Device()>
c0009203:	83 c4 10             	add    esp,0x10
c0009206:	90                   	nop
c0009207:	83 c4 0c             	add    esp,0xc
c000920a:	c3                   	ret    
c000920b:	90                   	nop

c000920c <Bus::~Bus()>:
c000920c:	83 ec 0c             	sub    esp,0xc
c000920f:	83 ec 0c             	sub    esp,0xc
c0009212:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009216:	e8 cd ff ff ff       	call   c00091e8 <Bus::~Bus()>
c000921b:	83 c4 10             	add    esp,0x10
c000921e:	83 ec 08             	sub    esp,0x8
c0009221:	68 58 01 00 00       	push   0x158
c0009226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000922a:	e8 a5 48 00 00       	call   c000dad4 <operator delete(void*, unsigned long)>
c000922f:	83 c4 10             	add    esp,0x10
c0009232:	83 c4 0c             	add    esp,0xc
c0009235:	c3                   	ret    

c0009236 <KeBeepThread(void*)>:
c0009236:	83 ec 0c             	sub    esp,0xc
c0009239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000923d:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c0009244:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c000924b:	75 01                	jne    c000924e <KeBeepThread(void*)+0x18>
c000924d:	fb                   	sti    
c000924e:	6b c0 0a             	imul   eax,eax,0xa
c0009251:	52                   	push   edx
c0009252:	52                   	push   edx
c0009253:	99                   	cdq    
c0009254:	52                   	push   edx
c0009255:	50                   	push   eax
c0009256:	e8 49 de 00 00       	call   c00170a4 <milliTenthSleep(unsigned long long)>
c000925b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0009262:	e8 32 1f 01 00       	call   c001b199 <HalMakeBeep(int)>
c0009267:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000926f:	83 c4 1c             	add    esp,0x1c
c0009272:	e9 f9 dc 00 00       	jmp    c0016f70 <blockTask(TaskState)>

c0009277 <KeBeep(int, int, bool)>:
c0009277:	56                   	push   esi
c0009278:	53                   	push   ebx
c0009279:	83 ec 10             	sub    esp,0x10
c000927c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009280:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009288:	e8 0c 1f 01 00       	call   c001b199 <HalMakeBeep(int)>
c000928d:	89 f0                	mov    eax,esi
c000928f:	83 c4 10             	add    esp,0x10
c0009292:	84 c0                	test   al,al
c0009294:	74 1f                	je     c00092b5 <KeBeep(int, int, bool)+0x3e>
c0009296:	50                   	push   eax
c0009297:	50                   	push   eax
c0009298:	6b c3 0a             	imul   eax,ebx,0xa
c000929b:	99                   	cdq    
c000929c:	52                   	push   edx
c000929d:	50                   	push   eax
c000929e:	e8 01 de 00 00       	call   c00170a4 <milliTenthSleep(unsigned long long)>
c00092a3:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00092ab:	83 c4 14             	add    esp,0x14
c00092ae:	5b                   	pop    ebx
c00092af:	5e                   	pop    esi
c00092b0:	e9 e4 1e 01 00       	jmp    c001b199 <HalMakeBeep(int)>
c00092b5:	68 e6 00 00 00       	push   0xe6
c00092ba:	53                   	push   ebx
c00092bb:	68 36 92 00 c0       	push   0xc0009236
c00092c0:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c00092c6:	e8 31 d9 00 00       	call   c0016bfc <Process::createThread(void (*)(void*), void*, int)>
c00092cb:	83 c4 14             	add    esp,0x14
c00092ce:	5b                   	pop    ebx
c00092cf:	5e                   	pop    esi
c00092d0:	c3                   	ret    
c00092d1:	90                   	nop

c00092d2 <KeLoadTimezoneStrings()>:
c00092d2:	55                   	push   ebp
c00092d3:	89 e5                	mov    ebp,esp
c00092d5:	53                   	push   ebx
c00092d6:	83 ec 44             	sub    esp,0x44
c00092d9:	c6 05 20 23 03 c0 01 	mov    BYTE PTR ds:0xc0032320,0x1
c00092e0:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c00092e7:	83 ec 0c             	sub    esp,0xc
c00092ea:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c00092ed:	e8 e2 6b 00 00       	call   c000fed4 <malloc>
c00092f2:	83 c4 10             	add    esp,0x10
c00092f5:	89 c3                	mov    ebx,eax
c00092f7:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c00092fc:	83 ec 04             	sub    esp,0x4
c00092ff:	50                   	push   eax
c0009300:	68 a0 8f 02 c0       	push   0xc0028fa0
c0009305:	53                   	push   ebx
c0009306:	e8 c9 f6 ff ff       	call   c00089d4 <File::File(char const*, Process*)>
c000930b:	83 c4 10             	add    esp,0x10
c000930e:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0009311:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0009315:	75 10                	jne    c0009327 <KeLoadTimezoneStrings()+0x55>
c0009317:	83 ec 0c             	sub    esp,0xc
c000931a:	68 bf 8f 02 c0       	push   0xc0028fbf
c000931f:	e8 04 70 00 00       	call   c0010328 <KePanic(char const*)>
c0009324:	83 c4 10             	add    esp,0x10
c0009327:	83 ec 08             	sub    esp,0x8
c000932a:	6a 01                	push   0x1
c000932c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000932f:	e8 be f6 ff ff       	call   c00089f2 <File::open(FileOpenMode)>
c0009334:	83 c4 10             	add    esp,0x10
c0009337:	83 ec 04             	sub    esp,0x4
c000933a:	8d 45 cf             	lea    eax,[ebp-0x31]
c000933d:	50                   	push   eax
c000933e:	8d 45 d0             	lea    eax,[ebp-0x30]
c0009341:	50                   	push   eax
c0009342:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0009345:	e8 aa f9 ff ff       	call   c0008cf4 <File::stat(unsigned long long*, bool*)>
c000934a:	83 c4 10             	add    esp,0x10
c000934d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0009350:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0009353:	83 ec 08             	sub    esp,0x8
c0009356:	50                   	push   eax
c0009357:	68 d5 8f 02 c0       	push   0xc0028fd5
c000935c:	e8 05 dc ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009361:	83 c4 10             	add    esp,0x10
c0009364:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0009367:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000936a:	83 c0 01             	add    eax,0x1
c000936d:	83 ec 0c             	sub    esp,0xc
c0009370:	50                   	push   eax
c0009371:	e8 5e 6b 00 00       	call   c000fed4 <malloc>
c0009376:	83 c4 10             	add    esp,0x10
c0009379:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000937c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c000937f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0009382:	83 ec 04             	sub    esp,0x4
c0009385:	50                   	push   eax
c0009386:	6a 00                	push   0x0
c0009388:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000938b:	e8 60 71 ff ff       	call   c00004f0 <memset>
c0009390:	83 c4 10             	add    esp,0x10
c0009393:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009396:	8b 00                	mov    eax,DWORD PTR [eax]
c0009398:	83 c0 0c             	add    eax,0xc
c000939b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000939d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00093a0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00093a3:	83 ec 0c             	sub    esp,0xc
c00093a6:	8d 5d c8             	lea    ebx,[ebp-0x38]
c00093a9:	53                   	push   ebx
c00093aa:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00093ad:	52                   	push   edx
c00093ae:	50                   	push   eax
c00093af:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00093b2:	ff d1                	call   ecx
c00093b4:	83 c4 20             	add    esp,0x20
c00093b7:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00093ba:	83 ec 08             	sub    esp,0x8
c00093bd:	50                   	push   eax
c00093be:	68 e5 8f 02 c0       	push   0xc0028fe5
c00093c3:	e8 9e db ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00093c8:	83 c4 10             	add    esp,0x10
c00093cb:	83 ec 0c             	sub    esp,0xc
c00093ce:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00093d1:	e8 7a f6 ff ff       	call   c0008a50 <File::close()>
c00093d6:	83 c4 10             	add    esp,0x10
c00093d9:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00093dd:	74 15                	je     c00093f4 <KeLoadTimezoneStrings()+0x122>
c00093df:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00093e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00093e4:	83 c0 08             	add    eax,0x8
c00093e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00093e9:	83 ec 0c             	sub    esp,0xc
c00093ec:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00093ef:	ff d0                	call   eax
c00093f1:	83 c4 10             	add    esp,0x10
c00093f4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00093fb:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0009402:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c0009409:	7f 3a                	jg     c0009445 <KeLoadTimezoneStrings()+0x173>
c000940b:	83 ec 0c             	sub    esp,0xc
c000940e:	6a 78                	push   0x78
c0009410:	e8 bf 6a 00 00       	call   c000fed4 <malloc>
c0009415:	83 c4 10             	add    esp,0x10
c0009418:	89 c2                	mov    edx,eax
c000941a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000941d:	89 14 85 40 23 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdcc0],edx
c0009424:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009427:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c000942e:	83 ec 08             	sub    esp,0x8
c0009431:	68 ee 8f 02 c0       	push   0xc0028fee
c0009436:	50                   	push   eax
c0009437:	e8 14 72 ff ff       	call   c0000650 <strcpy>
c000943c:	83 c4 10             	add    esp,0x10
c000943f:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0009443:	eb bd                	jmp    c0009402 <KeLoadTimezoneStrings()+0x130>
c0009445:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c000944c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000944f:	8d 50 01             	lea    edx,[eax+0x1]
c0009452:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0009455:	89 c2                	mov    edx,eax
c0009457:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000945a:	01 d0                	add    eax,edx
c000945c:	8a 00                	mov    al,BYTE PTR [eax]
c000945e:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c0009461:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c0009465:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0009468:	0f be c0             	movsx  eax,al
c000946b:	83 f8 0d             	cmp    eax,0xd
c000946e:	0f 84 82 01 00 00    	je     c00095f6 <KeLoadTimezoneStrings()+0x324>
c0009474:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0009477:	0f be c0             	movsx  eax,al
c000947a:	83 f8 09             	cmp    eax,0x9
c000947d:	75 44                	jne    c00094c3 <KeLoadTimezoneStrings()+0x1f1>
c000947f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009482:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c0009489:	83 ec 0c             	sub    esp,0xc
c000948c:	50                   	push   eax
c000948d:	e8 ee 70 ff ff       	call   c0000580 <strlen>
c0009492:	83 c4 10             	add    esp,0x10
c0009495:	83 f8 08             	cmp    eax,0x8
c0009498:	0f 96 c0             	setbe  al
c000949b:	0f b6 c0             	movzx  eax,al
c000949e:	85 c0                	test   eax,eax
c00094a0:	0f 84 56 01 00 00    	je     c00095fc <KeLoadTimezoneStrings()+0x32a>
c00094a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00094a9:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c00094b0:	83 ec 08             	sub    esp,0x8
c00094b3:	68 ee 8f 02 c0       	push   0xc0028fee
c00094b8:	50                   	push   eax
c00094b9:	e8 b2 73 ff ff       	call   c0000870 <strcat>
c00094be:	83 c4 10             	add    esp,0x10
c00094c1:	eb bc                	jmp    c000947f <KeLoadTimezoneStrings()+0x1ad>
c00094c3:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c00094c6:	0f be c0             	movsx  eax,al
c00094c9:	83 f8 0a             	cmp    eax,0xa
c00094cc:	0f 85 9b 00 00 00    	jne    c000956d <KeLoadTimezoneStrings()+0x29b>
c00094d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00094d5:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c00094dc:	83 ec 0c             	sub    esp,0xc
c00094df:	50                   	push   eax
c00094e0:	e8 9b 70 ff ff       	call   c0000580 <strlen>
c00094e5:	83 c4 10             	add    esp,0x10
c00094e8:	83 f8 35             	cmp    eax,0x35
c00094eb:	0f 96 c0             	setbe  al
c00094ee:	0f b6 c0             	movzx  eax,al
c00094f1:	85 c0                	test   eax,eax
c00094f3:	74 1d                	je     c0009512 <KeLoadTimezoneStrings()+0x240>
c00094f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00094f8:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c00094ff:	83 ec 08             	sub    esp,0x8
c0009502:	68 ee 8f 02 c0       	push   0xc0028fee
c0009507:	50                   	push   eax
c0009508:	e8 63 73 ff ff       	call   c0000870 <strcat>
c000950d:	83 c4 10             	add    esp,0x10
c0009510:	eb c0                	jmp    c00094d2 <KeLoadTimezoneStrings()+0x200>
c0009512:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009516:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0009519:	89 c2                	mov    edx,eax
c000951b:	c1 fa 1f             	sar    edx,0x1f
c000951e:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0009521:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0009524:	39 c8                	cmp    eax,ecx
c0009526:	89 d0                	mov    eax,edx
c0009528:	19 d8                	sbb    eax,ebx
c000952a:	0f 82 d2 00 00 00    	jb     c0009602 <KeLoadTimezoneStrings()+0x330>
c0009530:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009533:	a3 24 23 03 c0       	mov    ds:0xc0032324,eax
c0009538:	83 ec 08             	sub    esp,0x8
c000953b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000953e:	68 f0 8f 02 c0       	push   0xc0028ff0
c0009543:	e8 1e da ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009548:	83 c4 10             	add    esp,0x10
c000954b:	a1 24 23 03 c0       	mov    eax,ds:0xc0032324
c0009550:	83 ec 08             	sub    esp,0x8
c0009553:	50                   	push   eax
c0009554:	68 05 90 02 c0       	push   0xc0029005
c0009559:	e8 08 da ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000955e:	83 c4 10             	add    esp,0x10
c0009561:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009568:	e9 9b 00 00 00       	jmp    c0009608 <KeLoadTimezoneStrings()+0x336>
c000956d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009570:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c0009577:	83 ec 0c             	sub    esp,0xc
c000957a:	50                   	push   eax
c000957b:	e8 00 70 ff ff       	call   c0000580 <strlen>
c0009580:	83 c4 10             	add    esp,0x10
c0009583:	83 f8 31             	cmp    eax,0x31
c0009586:	0f 96 c0             	setbe  al
c0009589:	0f b6 c0             	movzx  eax,al
c000958c:	85 c0                	test   eax,eax
c000958e:	74 1f                	je     c00095af <KeLoadTimezoneStrings()+0x2dd>
c0009590:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009593:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	8d 55 c6             	lea    edx,[ebp-0x3a]
c00095a0:	52                   	push   edx
c00095a1:	50                   	push   eax
c00095a2:	e8 c9 72 ff ff       	call   c0000870 <strcat>
c00095a7:	83 c4 10             	add    esp,0x10
c00095aa:	e9 9d fe ff ff       	jmp    c000944c <KeLoadTimezoneStrings()+0x17a>
c00095af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00095b2:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c00095b9:	83 ec 0c             	sub    esp,0xc
c00095bc:	50                   	push   eax
c00095bd:	e8 be 6f ff ff       	call   c0000580 <strlen>
c00095c2:	83 c4 10             	add    esp,0x10
c00095c5:	83 f8 32             	cmp    eax,0x32
c00095c8:	0f 94 c0             	sete   al
c00095cb:	0f b6 c0             	movzx  eax,al
c00095ce:	85 c0                	test   eax,eax
c00095d0:	0f 84 76 fe ff ff    	je     c000944c <KeLoadTimezoneStrings()+0x17a>
c00095d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00095d9:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c00095e0:	83 ec 08             	sub    esp,0x8
c00095e3:	68 09 90 02 c0       	push   0xc0029009
c00095e8:	50                   	push   eax
c00095e9:	e8 82 72 ff ff       	call   c0000870 <strcat>
c00095ee:	83 c4 10             	add    esp,0x10
c00095f1:	e9 56 fe ff ff       	jmp    c000944c <KeLoadTimezoneStrings()+0x17a>
c00095f6:	90                   	nop
c00095f7:	e9 50 fe ff ff       	jmp    c000944c <KeLoadTimezoneStrings()+0x17a>
c00095fc:	90                   	nop
c00095fd:	e9 4a fe ff ff       	jmp    c000944c <KeLoadTimezoneStrings()+0x17a>
c0009602:	90                   	nop
c0009603:	e9 44 fe ff ff       	jmp    c000944c <KeLoadTimezoneStrings()+0x17a>
c0009608:	a1 24 23 03 c0       	mov    eax,ds:0xc0032324
c000960d:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0009610:	7d 49                	jge    c000965b <KeLoadTimezoneStrings()+0x389>
c0009612:	a1 24 23 03 c0       	mov    eax,ds:0xc0032324
c0009617:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c000961a:	0f 9c c0             	setl   al
c000961d:	0f b6 d0             	movzx  edx,al
c0009620:	a1 24 23 03 c0       	mov    eax,ds:0xc0032324
c0009625:	52                   	push   edx
c0009626:	50                   	push   eax
c0009627:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000962a:	68 0e 90 02 c0       	push   0xc002900e
c000962f:	e8 32 d9 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009634:	83 c4 10             	add    esp,0x10
c0009637:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000963a:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c0009641:	83 ec 04             	sub    esp,0x4
c0009644:	50                   	push   eax
c0009645:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0009648:	68 1c 90 02 c0       	push   0xc002901c
c000964d:	e8 14 d9 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009652:	83 c4 10             	add    esp,0x10
c0009655:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c0009659:	eb ad                	jmp    c0009608 <KeLoadTimezoneStrings()+0x336>
c000965b:	90                   	nop
c000965c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000965f:	c9                   	leave  
c0009660:	c3                   	ret    

c0009661 <KeGetTimezoneStringFromID(int)>:
c0009661:	55                   	push   ebp
c0009662:	89 e5                	mov    ebp,esp
c0009664:	83 ec 08             	sub    esp,0x8
c0009667:	83 ec 08             	sub    esp,0x8
c000966a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000966d:	68 25 90 02 c0       	push   0xc0029025
c0009672:	e8 ef d8 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009677:	83 c4 10             	add    esp,0x10
c000967a:	a0 20 23 03 c0       	mov    al,ds:0xc0032320
c000967f:	83 f0 01             	xor    eax,0x1
c0009682:	0f b6 c0             	movzx  eax,al
c0009685:	85 c0                	test   eax,eax
c0009687:	74 15                	je     c000969e <KeGetTimezoneStringFromID(int)+0x3d>
c0009689:	e8 44 fc ff ff       	call   c00092d2 <KeLoadTimezoneStrings()>
c000968e:	83 ec 0c             	sub    esp,0xc
c0009691:	68 43 90 02 c0       	push   0xc0029043
c0009696:	e8 cb d8 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000969b:	83 c4 10             	add    esp,0x10
c000969e:	a1 24 23 03 c0       	mov    eax,ds:0xc0032324
c00096a3:	83 ec 04             	sub    esp,0x4
c00096a6:	50                   	push   eax
c00096a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00096aa:	68 54 90 02 c0       	push   0xc0029054
c00096af:	e8 b2 d8 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00096b4:	83 c4 10             	add    esp,0x10
c00096b7:	a1 24 23 03 c0       	mov    eax,ds:0xc0032324
c00096bc:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c00096bf:	7d 06                	jge    c00096c7 <KeGetTimezoneStringFromID(int)+0x66>
c00096c1:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c00096c5:	79 07                	jns    c00096ce <KeGetTimezoneStringFromID(int)+0x6d>
c00096c7:	b8 00 00 00 00       	mov    eax,0x0
c00096cc:	eb 2e                	jmp    c00096fc <KeGetTimezoneStringFromID(int)+0x9b>
c00096ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096d1:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c00096d8:	83 c0 01             	add    eax,0x1
c00096db:	83 ec 04             	sub    esp,0x4
c00096de:	50                   	push   eax
c00096df:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00096e2:	68 67 90 02 c0       	push   0xc0029067
c00096e7:	e8 7a d8 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00096ec:	83 c4 10             	add    esp,0x10
c00096ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096f2:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c00096f9:	83 c0 01             	add    eax,0x1
c00096fc:	c9                   	leave  
c00096fd:	c3                   	ret    

c00096fe <KeUpdateTimezone(char const*)>:
c00096fe:	55                   	push   ebp
c00096ff:	89 e5                	mov    ebp,esp
c0009701:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009704:	8a 00                	mov    al,BYTE PTR [eax]
c0009706:	0f be c0             	movsx  eax,al
c0009709:	83 f8 2b             	cmp    eax,0x2b
c000970c:	74 11                	je     c000971f <KeUpdateTimezone(char const*)+0x21>
c000970e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009711:	8a 00                	mov    al,BYTE PTR [eax]
c0009713:	0f be c0             	movsx  eax,al
c0009716:	83 f8 2d             	cmp    eax,0x2d
c0009719:	0f 85 be 00 00 00    	jne    c00097dd <KeUpdateTimezone(char const*)+0xdf>
c000971f:	c6 05 60 26 03 c0 00 	mov    BYTE PTR ds:0xc0032660,0x0
c0009726:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009729:	83 c0 02             	add    eax,0x2
c000972c:	8a 00                	mov    al,BYTE PTR [eax]
c000972e:	0f be c0             	movsx  eax,al
c0009731:	83 f8 2e             	cmp    eax,0x2e
c0009734:	75 10                	jne    c0009746 <KeUpdateTimezone(char const*)+0x48>
c0009736:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009739:	83 c0 03             	add    eax,0x3
c000973c:	8a 00                	mov    al,BYTE PTR [eax]
c000973e:	0f be c0             	movsx  eax,al
c0009741:	83 f8 35             	cmp    eax,0x35
c0009744:	74 20                	je     c0009766 <KeUpdateTimezone(char const*)+0x68>
c0009746:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009749:	83 c0 03             	add    eax,0x3
c000974c:	8a 00                	mov    al,BYTE PTR [eax]
c000974e:	0f be c0             	movsx  eax,al
c0009751:	83 f8 2e             	cmp    eax,0x2e
c0009754:	75 14                	jne    c000976a <KeUpdateTimezone(char const*)+0x6c>
c0009756:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009759:	83 c0 04             	add    eax,0x4
c000975c:	8a 00                	mov    al,BYTE PTR [eax]
c000975e:	0f be c0             	movsx  eax,al
c0009761:	83 f8 35             	cmp    eax,0x35
c0009764:	75 04                	jne    c000976a <KeUpdateTimezone(char const*)+0x6c>
c0009766:	b0 01                	mov    al,0x1
c0009768:	eb 02                	jmp    c000976c <KeUpdateTimezone(char const*)+0x6e>
c000976a:	b0 00                	mov    al,0x0
c000976c:	a2 61 26 03 c0       	mov    ds:0xc0032661,al
c0009771:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009774:	83 c0 01             	add    eax,0x1
c0009777:	8a 00                	mov    al,BYTE PTR [eax]
c0009779:	0f be c0             	movsx  eax,al
c000977c:	83 e8 30             	sub    eax,0x30
c000977f:	a3 64 26 03 c0       	mov    ds:0xc0032664,eax
c0009784:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009787:	83 c0 03             	add    eax,0x3
c000978a:	8a 00                	mov    al,BYTE PTR [eax]
c000978c:	0f be c0             	movsx  eax,al
c000978f:	83 f8 2e             	cmp    eax,0x2e
c0009792:	75 2e                	jne    c00097c2 <KeUpdateTimezone(char const*)+0xc4>
c0009794:	8b 15 64 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032664
c000979a:	89 d0                	mov    eax,edx
c000979c:	c1 e0 02             	shl    eax,0x2
c000979f:	01 d0                	add    eax,edx
c00097a1:	d1 e0                	shl    eax,1
c00097a3:	a3 64 26 03 c0       	mov    ds:0xc0032664,eax
c00097a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097ab:	83 c0 02             	add    eax,0x2
c00097ae:	8a 00                	mov    al,BYTE PTR [eax]
c00097b0:	0f be c0             	movsx  eax,al
c00097b3:	8d 50 d0             	lea    edx,[eax-0x30]
c00097b6:	a1 64 26 03 c0       	mov    eax,ds:0xc0032664
c00097bb:	01 d0                	add    eax,edx
c00097bd:	a3 64 26 03 c0       	mov    ds:0xc0032664,eax
c00097c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097c5:	8a 00                	mov    al,BYTE PTR [eax]
c00097c7:	0f be c0             	movsx  eax,al
c00097ca:	83 f8 2d             	cmp    eax,0x2d
c00097cd:	75 26                	jne    c00097f5 <KeUpdateTimezone(char const*)+0xf7>
c00097cf:	a1 64 26 03 c0       	mov    eax,ds:0xc0032664
c00097d4:	f7 d8                	neg    eax
c00097d6:	a3 64 26 03 c0       	mov    ds:0xc0032664,eax
c00097db:	eb 18                	jmp    c00097f5 <KeUpdateTimezone(char const*)+0xf7>
c00097dd:	c6 05 60 26 03 c0 00 	mov    BYTE PTR ds:0xc0032660,0x0
c00097e4:	c6 05 61 26 03 c0 00 	mov    BYTE PTR ds:0xc0032661,0x0
c00097eb:	c7 05 64 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032664,0x0
c00097f5:	90                   	nop
c00097f6:	5d                   	pop    ebp
c00097f7:	c3                   	ret    

c00097f8 <KeSetTimezone(char const*)>:
c00097f8:	55                   	push   ebp
c00097f9:	89 e5                	mov    ebp,esp
c00097fb:	83 ec 18             	sub    esp,0x18
c00097fe:	83 ec 0c             	sub    esp,0xc
c0009801:	68 74 90 02 c0       	push   0xc0029074
c0009806:	e8 1d 43 00 00       	call   c000db28 <CmOpen(char const*)>
c000980b:	83 c4 10             	add    esp,0x10
c000980e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009811:	83 ec 08             	sub    esp,0x8
c0009814:	68 99 90 02 c0       	push   0xc0029099
c0009819:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000981c:	e8 02 4f 00 00       	call   c000e723 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0009821:	83 c4 10             	add    esp,0x10
c0009824:	83 ec 04             	sub    esp,0x4
c0009827:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000982a:	50                   	push   eax
c000982b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000982e:	e8 c7 47 00 00       	call   c000dffa <CmSetString(Reghive_Tag*, int, char const*)>
c0009833:	83 c4 10             	add    esp,0x10
c0009836:	83 ec 0c             	sub    esp,0xc
c0009839:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000983c:	e8 05 44 00 00       	call   c000dc46 <CmClose(Reghive_Tag*)>
c0009841:	83 c4 10             	add    esp,0x10
c0009844:	83 ec 0c             	sub    esp,0xc
c0009847:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000984a:	e8 af fe ff ff       	call   c00096fe <KeUpdateTimezone(char const*)>
c000984f:	83 c4 10             	add    esp,0x10
c0009852:	90                   	nop
c0009853:	c9                   	leave  
c0009854:	c3                   	ret    

c0009855 <KeSetTimezone(int)>:
c0009855:	55                   	push   ebp
c0009856:	89 e5                	mov    ebp,esp
c0009858:	83 ec 18             	sub    esp,0x18
c000985b:	83 ec 0c             	sub    esp,0xc
c000985e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009861:	e8 fb fd ff ff       	call   c0009661 <KeGetTimezoneStringFromID(int)>
c0009866:	83 c4 10             	add    esp,0x10
c0009869:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000986c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009870:	74 12                	je     c0009884 <KeSetTimezone(int)+0x2f>
c0009872:	83 ec 0c             	sub    esp,0xc
c0009875:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009878:	e8 7b ff ff ff       	call   c00097f8 <KeSetTimezone(char const*)>
c000987d:	83 c4 10             	add    esp,0x10
c0009880:	b0 01                	mov    al,0x1
c0009882:	eb 02                	jmp    c0009886 <KeSetTimezone(int)+0x31>
c0009884:	b0 00                	mov    al,0x0
c0009886:	c9                   	leave  
c0009887:	c3                   	ret    

c0009888 <KeLoadTimezone()>:
c0009888:	55                   	push   ebp
c0009889:	89 e5                	mov    ebp,esp
c000988b:	81 ec 68 02 00 00    	sub    esp,0x268
c0009891:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c0009898:	83 ec 0c             	sub    esp,0xc
c000989b:	68 74 90 02 c0       	push   0xc0029074
c00098a0:	e8 83 42 00 00       	call   c000db28 <CmOpen(char const*)>
c00098a5:	83 c4 10             	add    esp,0x10
c00098a8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00098ab:	83 ec 08             	sub    esp,0x8
c00098ae:	68 99 90 02 c0       	push   0xc0029099
c00098b3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00098b6:	e8 68 4e 00 00       	call   c000e723 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00098bb:	83 c4 10             	add    esp,0x10
c00098be:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00098c1:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c00098c5:	7e 18                	jle    c00098df <KeLoadTimezone()+0x57>
c00098c7:	83 ec 04             	sub    esp,0x4
c00098ca:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c00098d0:	50                   	push   eax
c00098d1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00098d4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00098d7:	e8 bc 43 00 00       	call   c000dc98 <CmGetString(Reghive_Tag*, int, char*)>
c00098dc:	83 c4 10             	add    esp,0x10
c00098df:	83 ec 0c             	sub    esp,0xc
c00098e2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00098e5:	e8 5c 43 00 00       	call   c000dc46 <CmClose(Reghive_Tag*)>
c00098ea:	83 c4 10             	add    esp,0x10
c00098ed:	83 ec 0c             	sub    esp,0xc
c00098f0:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c00098f6:	50                   	push   eax
c00098f7:	e8 02 fe ff ff       	call   c00096fe <KeUpdateTimezone(char const*)>
c00098fc:	83 c4 10             	add    esp,0x10
c00098ff:	90                   	nop
c0009900:	c9                   	leave  
c0009901:	c3                   	ret    

c0009902 <Clock::Clock(char const*)>:
c0009902:	83 ec 0c             	sub    esp,0xc
c0009905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009909:	83 ec 08             	sub    esp,0x8
c000990c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009910:	50                   	push   eax
c0009911:	e8 8e 0a 00 00       	call   c000a3a4 <Device::Device(char const*)>
c0009916:	83 c4 10             	add    esp,0x10
c0009919:	ba f8 90 02 c0       	mov    edx,0xc00290f8
c000991e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009922:	89 10                	mov    DWORD PTR [eax],edx
c0009924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009928:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0009932:	90                   	nop
c0009933:	83 c4 0c             	add    esp,0xc
c0009936:	c3                   	ret    
c0009937:	90                   	nop

c0009938 <Clock::~Clock()>:
c0009938:	83 ec 0c             	sub    esp,0xc
c000993b:	ba f8 90 02 c0       	mov    edx,0xc00290f8
c0009940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009944:	89 10                	mov    DWORD PTR [eax],edx
c0009946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994a:	83 ec 0c             	sub    esp,0xc
c000994d:	50                   	push   eax
c000994e:	e8 f1 07 00 00       	call   c000a144 <Device::~Device()>
c0009953:	83 c4 10             	add    esp,0x10
c0009956:	90                   	nop
c0009957:	83 c4 0c             	add    esp,0xc
c000995a:	c3                   	ret    
c000995b:	90                   	nop

c000995c <Clock::~Clock()>:
c000995c:	83 ec 0c             	sub    esp,0xc
c000995f:	83 ec 0c             	sub    esp,0xc
c0009962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009966:	e8 cd ff ff ff       	call   c0009938 <Clock::~Clock()>
c000996b:	83 c4 10             	add    esp,0x10
c000996e:	83 ec 08             	sub    esp,0x8
c0009971:	68 58 01 00 00       	push   0x158
c0009976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000997a:	e8 55 41 00 00       	call   c000dad4 <operator delete(void*, unsigned long)>
c000997f:	83 c4 10             	add    esp,0x10
c0009982:	83 c4 0c             	add    esp,0xc
c0009985:	c3                   	ret    

c0009986 <Clock::timeInSecondsLocal()>:
c0009986:	55                   	push   ebp
c0009987:	89 e5                	mov    ebp,esp
c0009989:	53                   	push   ebx
c000998a:	83 ec 04             	sub    esp,0x4
c000998d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009990:	8b 00                	mov    eax,DWORD PTR [eax]
c0009992:	83 c0 24             	add    eax,0x24
c0009995:	8b 00                	mov    eax,DWORD PTR [eax]
c0009997:	83 ec 0c             	sub    esp,0xc
c000999a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000999d:	ff d0                	call   eax
c000999f:	83 c4 10             	add    esp,0x10
c00099a2:	89 c1                	mov    ecx,eax
c00099a4:	89 d3                	mov    ebx,edx
c00099a6:	a0 60 26 03 c0       	mov    al,ds:0xc0032660
c00099ab:	0f b6 d0             	movzx  edx,al
c00099ae:	a1 64 26 03 c0       	mov    eax,ds:0xc0032664
c00099b3:	01 d0                	add    eax,edx
c00099b5:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00099bb:	89 c2                	mov    edx,eax
c00099bd:	c1 fa 1f             	sar    edx,0x1f
c00099c0:	01 c1                	add    ecx,eax
c00099c2:	11 d3                	adc    ebx,edx
c00099c4:	a0 61 26 03 c0       	mov    al,ds:0xc0032661
c00099c9:	0f b6 c0             	movzx  eax,al
c00099cc:	85 c0                	test   eax,eax
c00099ce:	74 0c                	je     c00099dc <Clock::timeInSecondsLocal()+0x56>
c00099d0:	b8 08 07 00 00       	mov    eax,0x708
c00099d5:	ba 00 00 00 00       	mov    edx,0x0
c00099da:	eb 0a                	jmp    c00099e6 <Clock::timeInSecondsLocal()+0x60>
c00099dc:	b8 00 00 00 00       	mov    eax,0x0
c00099e1:	ba 00 00 00 00       	mov    edx,0x0
c00099e6:	01 c8                	add    eax,ecx
c00099e8:	11 da                	adc    edx,ebx
c00099ea:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00099ed:	c9                   	leave  
c00099ee:	c3                   	ret    
c00099ef:	90                   	nop

c00099f0 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00099f0:	55                   	push   ebp
c00099f1:	89 e5                	mov    ebp,esp
c00099f3:	56                   	push   esi
c00099f4:	53                   	push   ebx
c00099f5:	83 ec 10             	sub    esp,0x10
c00099f8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00099fb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00099fe:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009a01:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009a04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a07:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a09:	83 c0 2c             	add    eax,0x2c
c0009a0c:	8b 30                	mov    esi,DWORD PTR [eax]
c0009a0e:	a0 60 26 03 c0       	mov    al,ds:0xc0032660
c0009a13:	0f b6 d0             	movzx  edx,al
c0009a16:	a1 64 26 03 c0       	mov    eax,ds:0xc0032664
c0009a1b:	01 d0                	add    eax,edx
c0009a1d:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009a23:	89 c2                	mov    edx,eax
c0009a25:	c1 fa 1f             	sar    edx,0x1f
c0009a28:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009a2b:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c0009a2e:	29 c1                	sub    ecx,eax
c0009a30:	19 d3                	sbb    ebx,edx
c0009a32:	a0 61 26 03 c0       	mov    al,ds:0xc0032661
c0009a37:	0f b6 c0             	movzx  eax,al
c0009a3a:	85 c0                	test   eax,eax
c0009a3c:	74 0c                	je     c0009a4a <Clock::setTimeInSecondsLocal(unsigned long long)+0x5a>
c0009a3e:	b8 08 07 00 00       	mov    eax,0x708
c0009a43:	ba 00 00 00 00       	mov    edx,0x0
c0009a48:	eb 0a                	jmp    c0009a54 <Clock::setTimeInSecondsLocal(unsigned long long)+0x64>
c0009a4a:	b8 00 00 00 00       	mov    eax,0x0
c0009a4f:	ba 00 00 00 00       	mov    edx,0x0
c0009a54:	29 c1                	sub    ecx,eax
c0009a56:	19 d3                	sbb    ebx,edx
c0009a58:	89 c8                	mov    eax,ecx
c0009a5a:	89 da                	mov    edx,ebx
c0009a5c:	83 ec 04             	sub    esp,0x4
c0009a5f:	52                   	push   edx
c0009a60:	50                   	push   eax
c0009a61:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009a64:	ff d6                	call   esi
c0009a66:	83 c4 10             	add    esp,0x10
c0009a69:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009a6c:	5b                   	pop    ebx
c0009a6d:	5e                   	pop    esi
c0009a6e:	5d                   	pop    ebp
c0009a6f:	c3                   	ret    

c0009a70 <KeDatetimeToSeconds(datetime_t)>:
c0009a70:	55                   	push   ebp
c0009a71:	89 e5                	mov    ebp,esp
c0009a73:	53                   	push   ebx
c0009a74:	83 ec 24             	sub    esp,0x24
c0009a77:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009a7b:	2d 6c 07 00 00       	sub    eax,0x76c
c0009a80:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0009a84:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009a87:	83 e8 01             	sub    eax,0x1
c0009a8a:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c0009a8d:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009a94:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0009a9b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009aa2:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0009aa9:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c0009aac:	0f b6 c8             	movzx  ecx,al
c0009aaf:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0009ab2:	0f b6 d0             	movzx  edx,al
c0009ab5:	89 d0                	mov    eax,edx
c0009ab7:	c1 e0 04             	shl    eax,0x4
c0009aba:	29 d0                	sub    eax,edx
c0009abc:	c1 e0 02             	shl    eax,0x2
c0009abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0009ac2:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0009ac5:	0f b6 c0             	movzx  eax,al
c0009ac8:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009ace:	01 d0                	add    eax,edx
c0009ad0:	89 c2                	mov    edx,eax
c0009ad2:	c1 fa 1f             	sar    edx,0x1f
c0009ad5:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0009ad8:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009adb:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c0009ade:	0f b6 c0             	movzx  eax,al
c0009ae1:	83 e8 01             	sub    eax,0x1
c0009ae4:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c0009ae7:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009aea:	0f b6 c0             	movzx  eax,al
c0009aed:	8b 04 85 c0 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f40]
c0009af4:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c0009af7:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009afa:	0f b6 c0             	movzx  eax,al
c0009afd:	83 f8 01             	cmp    eax,0x1
c0009b00:	76 7c                	jbe    c0009b7e <KeDatetimeToSeconds(datetime_t)+0x10e>
c0009b02:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009b06:	0f b7 c0             	movzx  eax,ax
c0009b09:	83 e0 03             	and    eax,0x3
c0009b0c:	85 c0                	test   eax,eax
c0009b0e:	75 6e                	jne    c0009b7e <KeDatetimeToSeconds(datetime_t)+0x10e>
c0009b10:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009b14:	0f b7 c8             	movzx  ecx,ax
c0009b17:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c0009b1c:	89 c8                	mov    eax,ecx
c0009b1e:	f7 e2                	mul    edx
c0009b20:	c1 ea 05             	shr    edx,0x5
c0009b23:	89 d0                	mov    eax,edx
c0009b25:	c1 e0 02             	shl    eax,0x2
c0009b28:	01 d0                	add    eax,edx
c0009b2a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009b31:	01 d0                	add    eax,edx
c0009b33:	c1 e0 02             	shl    eax,0x2
c0009b36:	29 c1                	sub    ecx,eax
c0009b38:	89 c8                	mov    eax,ecx
c0009b3a:	0f b7 c0             	movzx  eax,ax
c0009b3d:	85 c0                	test   eax,eax
c0009b3f:	75 39                	jne    c0009b7a <KeDatetimeToSeconds(datetime_t)+0x10a>
c0009b41:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009b45:	0f b7 c0             	movzx  eax,ax
c0009b48:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009b4e:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009b53:	f7 e9                	imul   ecx
c0009b55:	c1 fa 07             	sar    edx,0x7
c0009b58:	89 c8                	mov    eax,ecx
c0009b5a:	c1 f8 1f             	sar    eax,0x1f
c0009b5d:	29 c2                	sub    edx,eax
c0009b5f:	89 d0                	mov    eax,edx
c0009b61:	c1 e0 02             	shl    eax,0x2
c0009b64:	01 d0                	add    eax,edx
c0009b66:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009b6d:	01 d0                	add    eax,edx
c0009b6f:	c1 e0 04             	shl    eax,0x4
c0009b72:	29 c1                	sub    ecx,eax
c0009b74:	89 ca                	mov    edx,ecx
c0009b76:	85 d2                	test   edx,edx
c0009b78:	75 04                	jne    c0009b7e <KeDatetimeToSeconds(datetime_t)+0x10e>
c0009b7a:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009b7e:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009b82:	0f b7 c0             	movzx  eax,ax
c0009b85:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009b88:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009b8b:	83 f8 46             	cmp    eax,0x46
c0009b8e:	0f 9f c0             	setg   al
c0009b91:	0f b6 c0             	movzx  eax,al
c0009b94:	85 c0                	test   eax,eax
c0009b96:	0f 84 a4 00 00 00    	je     c0009c40 <KeDatetimeToSeconds(datetime_t)+0x1d0>
c0009b9c:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c0009ba3:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009ba7:	0f b7 d0             	movzx  edx,ax
c0009baa:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009bad:	39 c2                	cmp    edx,eax
c0009baf:	0f 8e b8 01 00 00    	jle    c0009d6d <KeDatetimeToSeconds(datetime_t)+0x2fd>
c0009bb5:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009bb8:	83 e0 03             	and    eax,0x3
c0009bbb:	85 c0                	test   eax,eax
c0009bbd:	75 6b                	jne    c0009c2a <KeDatetimeToSeconds(datetime_t)+0x1ba>
c0009bbf:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009bc2:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009bc7:	f7 e9                	imul   ecx
c0009bc9:	c1 fa 05             	sar    edx,0x5
c0009bcc:	89 c8                	mov    eax,ecx
c0009bce:	c1 f8 1f             	sar    eax,0x1f
c0009bd1:	29 c2                	sub    edx,eax
c0009bd3:	89 d0                	mov    eax,edx
c0009bd5:	c1 e0 02             	shl    eax,0x2
c0009bd8:	01 d0                	add    eax,edx
c0009bda:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009be1:	01 d0                	add    eax,edx
c0009be3:	c1 e0 02             	shl    eax,0x2
c0009be6:	29 c1                	sub    ecx,eax
c0009be8:	89 ca                	mov    edx,ecx
c0009bea:	85 d2                	test   edx,edx
c0009bec:	75 35                	jne    c0009c23 <KeDatetimeToSeconds(datetime_t)+0x1b3>
c0009bee:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009bf1:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009bf7:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009bfc:	f7 e9                	imul   ecx
c0009bfe:	c1 fa 07             	sar    edx,0x7
c0009c01:	89 c8                	mov    eax,ecx
c0009c03:	c1 f8 1f             	sar    eax,0x1f
c0009c06:	29 c2                	sub    edx,eax
c0009c08:	89 d0                	mov    eax,edx
c0009c0a:	c1 e0 02             	shl    eax,0x2
c0009c0d:	01 d0                	add    eax,edx
c0009c0f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009c16:	01 d0                	add    eax,edx
c0009c18:	c1 e0 04             	shl    eax,0x4
c0009c1b:	29 c1                	sub    ecx,eax
c0009c1d:	89 ca                	mov    edx,ecx
c0009c1f:	85 d2                	test   edx,edx
c0009c21:	75 07                	jne    c0009c2a <KeDatetimeToSeconds(datetime_t)+0x1ba>
c0009c23:	b8 6e 01 00 00       	mov    eax,0x16e
c0009c28:	eb 05                	jmp    c0009c2f <KeDatetimeToSeconds(datetime_t)+0x1bf>
c0009c2a:	b8 6d 01 00 00       	mov    eax,0x16d
c0009c2f:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c0009c32:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009c35:	83 c0 01             	add    eax,0x1
c0009c38:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009c3b:	e9 63 ff ff ff       	jmp    c0009ba3 <KeDatetimeToSeconds(datetime_t)+0x133>
c0009c40:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009c43:	83 f8 45             	cmp    eax,0x45
c0009c46:	0f 8f 21 01 00 00    	jg     c0009d6d <KeDatetimeToSeconds(datetime_t)+0x2fd>
c0009c4c:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c0009c53:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009c57:	0f b7 d0             	movzx  edx,ax
c0009c5a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009c5d:	39 c2                	cmp    edx,eax
c0009c5f:	0f 8d 8b 00 00 00    	jge    c0009cf0 <KeDatetimeToSeconds(datetime_t)+0x280>
c0009c65:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009c68:	83 e0 03             	and    eax,0x3
c0009c6b:	85 c0                	test   eax,eax
c0009c6d:	75 6b                	jne    c0009cda <KeDatetimeToSeconds(datetime_t)+0x26a>
c0009c6f:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009c72:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009c77:	f7 e9                	imul   ecx
c0009c79:	c1 fa 05             	sar    edx,0x5
c0009c7c:	89 c8                	mov    eax,ecx
c0009c7e:	c1 f8 1f             	sar    eax,0x1f
c0009c81:	29 c2                	sub    edx,eax
c0009c83:	89 d0                	mov    eax,edx
c0009c85:	c1 e0 02             	shl    eax,0x2
c0009c88:	01 d0                	add    eax,edx
c0009c8a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009c91:	01 d0                	add    eax,edx
c0009c93:	c1 e0 02             	shl    eax,0x2
c0009c96:	29 c1                	sub    ecx,eax
c0009c98:	89 ca                	mov    edx,ecx
c0009c9a:	85 d2                	test   edx,edx
c0009c9c:	75 35                	jne    c0009cd3 <KeDatetimeToSeconds(datetime_t)+0x263>
c0009c9e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009ca1:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009ca7:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009cac:	f7 e9                	imul   ecx
c0009cae:	c1 fa 07             	sar    edx,0x7
c0009cb1:	89 c8                	mov    eax,ecx
c0009cb3:	c1 f8 1f             	sar    eax,0x1f
c0009cb6:	29 c2                	sub    edx,eax
c0009cb8:	89 d0                	mov    eax,edx
c0009cba:	c1 e0 02             	shl    eax,0x2
c0009cbd:	01 d0                	add    eax,edx
c0009cbf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009cc6:	01 d0                	add    eax,edx
c0009cc8:	c1 e0 04             	shl    eax,0x4
c0009ccb:	29 c1                	sub    ecx,eax
c0009ccd:	89 ca                	mov    edx,ecx
c0009ccf:	85 d2                	test   edx,edx
c0009cd1:	75 07                	jne    c0009cda <KeDatetimeToSeconds(datetime_t)+0x26a>
c0009cd3:	b8 6e 01 00 00       	mov    eax,0x16e
c0009cd8:	eb 05                	jmp    c0009cdf <KeDatetimeToSeconds(datetime_t)+0x26f>
c0009cda:	b8 6d 01 00 00       	mov    eax,0x16d
c0009cdf:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c0009ce2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009ce5:	83 e8 01             	sub    eax,0x1
c0009ce8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009ceb:	e9 63 ff ff ff       	jmp    c0009c53 <KeDatetimeToSeconds(datetime_t)+0x1e3>
c0009cf0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009cf3:	83 e0 03             	and    eax,0x3
c0009cf6:	85 c0                	test   eax,eax
c0009cf8:	75 6b                	jne    c0009d65 <KeDatetimeToSeconds(datetime_t)+0x2f5>
c0009cfa:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009cfd:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009d02:	f7 e9                	imul   ecx
c0009d04:	c1 fa 05             	sar    edx,0x5
c0009d07:	89 c8                	mov    eax,ecx
c0009d09:	c1 f8 1f             	sar    eax,0x1f
c0009d0c:	29 c2                	sub    edx,eax
c0009d0e:	89 d0                	mov    eax,edx
c0009d10:	c1 e0 02             	shl    eax,0x2
c0009d13:	01 d0                	add    eax,edx
c0009d15:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009d1c:	01 d0                	add    eax,edx
c0009d1e:	c1 e0 02             	shl    eax,0x2
c0009d21:	29 c1                	sub    ecx,eax
c0009d23:	89 ca                	mov    edx,ecx
c0009d25:	85 d2                	test   edx,edx
c0009d27:	75 35                	jne    c0009d5e <KeDatetimeToSeconds(datetime_t)+0x2ee>
c0009d29:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009d2c:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009d32:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009d37:	f7 e9                	imul   ecx
c0009d39:	c1 fa 07             	sar    edx,0x7
c0009d3c:	89 c8                	mov    eax,ecx
c0009d3e:	c1 f8 1f             	sar    eax,0x1f
c0009d41:	29 c2                	sub    edx,eax
c0009d43:	89 d0                	mov    eax,edx
c0009d45:	c1 e0 02             	shl    eax,0x2
c0009d48:	01 d0                	add    eax,edx
c0009d4a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009d51:	01 d0                	add    eax,edx
c0009d53:	c1 e0 04             	shl    eax,0x4
c0009d56:	29 c1                	sub    ecx,eax
c0009d58:	89 ca                	mov    edx,ecx
c0009d5a:	85 d2                	test   edx,edx
c0009d5c:	75 07                	jne    c0009d65 <KeDatetimeToSeconds(datetime_t)+0x2f5>
c0009d5e:	b8 6e 01 00 00       	mov    eax,0x16e
c0009d63:	eb 05                	jmp    c0009d6a <KeDatetimeToSeconds(datetime_t)+0x2fa>
c0009d65:	b8 6d 01 00 00       	mov    eax,0x16d
c0009d6a:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c0009d6d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d70:	89 c2                	mov    edx,eax
c0009d72:	c1 fa 1f             	sar    edx,0x1f
c0009d75:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c0009d7b:	6b c8 00             	imul   ecx,eax,0x0
c0009d7e:	01 d9                	add    ecx,ebx
c0009d80:	bb 80 51 01 00       	mov    ebx,0x15180
c0009d85:	f7 e3                	mul    ebx
c0009d87:	01 d1                	add    ecx,edx
c0009d89:	89 ca                	mov    edx,ecx
c0009d8b:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0009d8e:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009d91:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009d94:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009d97:	83 c4 24             	add    esp,0x24
c0009d9a:	5b                   	pop    ebx
c0009d9b:	5d                   	pop    ebp
c0009d9c:	c3                   	ret    
c0009d9d:	90                   	nop

c0009d9e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0009d9e:	55                   	push   ebp
c0009d9f:	89 e5                	mov    ebp,esp
c0009da1:	56                   	push   esi
c0009da2:	53                   	push   ebx
c0009da3:	83 ec 20             	sub    esp,0x20
c0009da6:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0009da9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009dac:	e8 bf fc ff ff       	call   c0009a70 <KeDatetimeToSeconds(datetime_t)>
c0009db1:	83 c4 08             	add    esp,0x8
c0009db4:	89 c3                	mov    ebx,eax
c0009db6:	89 d6                	mov    esi,edx
c0009db8:	a0 60 26 03 c0       	mov    al,ds:0xc0032660
c0009dbd:	0f b6 d0             	movzx  edx,al
c0009dc0:	a1 64 26 03 c0       	mov    eax,ds:0xc0032664
c0009dc5:	01 d0                	add    eax,edx
c0009dc7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009dcd:	89 c2                	mov    edx,eax
c0009dcf:	c1 fa 1f             	sar    edx,0x1f
c0009dd2:	29 c3                	sub    ebx,eax
c0009dd4:	19 d6                	sbb    esi,edx
c0009dd6:	a0 61 26 03 c0       	mov    al,ds:0xc0032661
c0009ddb:	0f b6 c0             	movzx  eax,al
c0009dde:	85 c0                	test   eax,eax
c0009de0:	74 0c                	je     c0009dee <Clock::setTimeInDatetimeLocal(datetime_t)+0x50>
c0009de2:	b8 08 07 00 00       	mov    eax,0x708
c0009de7:	ba 00 00 00 00       	mov    edx,0x0
c0009dec:	eb 0a                	jmp    c0009df8 <Clock::setTimeInDatetimeLocal(datetime_t)+0x5a>
c0009dee:	b8 00 00 00 00       	mov    eax,0x0
c0009df3:	ba 00 00 00 00       	mov    edx,0x0
c0009df8:	29 c3                	sub    ebx,eax
c0009dfa:	19 d6                	sbb    esi,edx
c0009dfc:	89 d8                	mov    eax,ebx
c0009dfe:	89 f2                	mov    edx,esi
c0009e00:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009e03:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009e06:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009e09:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009e0c:	89 d0                	mov    eax,edx
c0009e0e:	31 d2                	xor    edx,edx
c0009e10:	89 c3                	mov    ebx,eax
c0009e12:	89 d6                	mov    esi,edx
c0009e14:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009e17:	80 e5 ff             	and    ch,0xff
c0009e1a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0009e1d:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c0009e20:	83 e1 00             	and    ecx,0x0
c0009e23:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0009e26:	83 ec 0c             	sub    esp,0xc
c0009e29:	56                   	push   esi
c0009e2a:	53                   	push   ebx
c0009e2b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0009e2e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0009e31:	68 ae 90 02 c0       	push   0xc00290ae
c0009e36:	e8 2b d1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009e3b:	83 c4 20             	add    esp,0x20
c0009e3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009e41:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e43:	83 c0 2c             	add    eax,0x2c
c0009e46:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e48:	83 ec 04             	sub    esp,0x4
c0009e4b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009e4e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009e51:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009e54:	ff d0                	call   eax
c0009e56:	83 c4 10             	add    esp,0x10
c0009e59:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009e5c:	5b                   	pop    ebx
c0009e5d:	5e                   	pop    esi
c0009e5e:	5d                   	pop    ebp
c0009e5f:	c3                   	ret    

c0009e60 <KeSecondsToDatetime(unsigned long long)>:
c0009e60:	55                   	push   ebp
c0009e61:	89 e5                	mov    ebp,esp
c0009e63:	83 ec 48             	sub    esp,0x48
c0009e66:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009e69:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0009e6c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009e6f:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0009e72:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009e75:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009e78:	6a 00                	push   0x0
c0009e7a:	68 80 51 01 00       	push   0x15180
c0009e7f:	52                   	push   edx
c0009e80:	50                   	push   eax
c0009e81:	e8 1e 8e 01 00       	call   c0022ca4 <__udivdi3>
c0009e86:	83 c4 10             	add    esp,0x10
c0009e89:	05 6c fa 0a 00       	add    eax,0xafa6c
c0009e8e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009e91:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009e94:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009e97:	6a 00                	push   0x0
c0009e99:	68 80 51 01 00       	push   0x15180
c0009e9e:	52                   	push   edx
c0009e9f:	50                   	push   eax
c0009ea0:	e8 ff 8e 01 00       	call   c0022da4 <__umoddi3>
c0009ea5:	83 c4 10             	add    esp,0x10
c0009ea8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009eab:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009eaf:	79 0b                	jns    c0009ebc <KeSecondsToDatetime(unsigned long long)+0x5c>
c0009eb1:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c0009eb8:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c0009ebc:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009ebf:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c0009ec4:	89 c8                	mov    eax,ecx
c0009ec6:	f7 ea                	imul   edx
c0009ec8:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009ecb:	c1 f8 0b             	sar    eax,0xb
c0009ece:	89 c2                	mov    edx,eax
c0009ed0:	89 c8                	mov    eax,ecx
c0009ed2:	c1 f8 1f             	sar    eax,0x1f
c0009ed5:	29 c2                	sub    edx,eax
c0009ed7:	89 d0                	mov    eax,edx
c0009ed9:	88 c2                	mov    dl,al
c0009edb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ede:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0009ee1:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009ee4:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c0009ee9:	89 c8                	mov    eax,ecx
c0009eeb:	f7 ea                	imul   edx
c0009eed:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009ef0:	c1 f8 0b             	sar    eax,0xb
c0009ef3:	89 c2                	mov    edx,eax
c0009ef5:	89 c8                	mov    eax,ecx
c0009ef7:	c1 f8 1f             	sar    eax,0x1f
c0009efa:	29 c2                	sub    edx,eax
c0009efc:	89 d0                	mov    eax,edx
c0009efe:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009f04:	29 c1                	sub    ecx,eax
c0009f06:	89 c8                	mov    eax,ecx
c0009f08:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009f0b:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009f0e:	ba 89 88 88 88       	mov    edx,0x88888889
c0009f13:	89 c8                	mov    eax,ecx
c0009f15:	f7 ea                	imul   edx
c0009f17:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009f1a:	c1 f8 05             	sar    eax,0x5
c0009f1d:	89 c2                	mov    edx,eax
c0009f1f:	89 c8                	mov    eax,ecx
c0009f21:	c1 f8 1f             	sar    eax,0x1f
c0009f24:	29 c2                	sub    edx,eax
c0009f26:	89 d0                	mov    eax,edx
c0009f28:	88 c2                	mov    dl,al
c0009f2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009f2d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009f30:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009f33:	ba 89 88 88 88       	mov    edx,0x88888889
c0009f38:	89 c8                	mov    eax,ecx
c0009f3a:	f7 ea                	imul   edx
c0009f3c:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009f3f:	c1 f8 05             	sar    eax,0x5
c0009f42:	89 c2                	mov    edx,eax
c0009f44:	89 c8                	mov    eax,ecx
c0009f46:	c1 f8 1f             	sar    eax,0x1f
c0009f49:	29 c2                	sub    edx,eax
c0009f4b:	89 d0                	mov    eax,edx
c0009f4d:	c1 e0 04             	shl    eax,0x4
c0009f50:	29 d0                	sub    eax,edx
c0009f52:	c1 e0 02             	shl    eax,0x2
c0009f55:	29 c1                	sub    ecx,eax
c0009f57:	89 ca                	mov    edx,ecx
c0009f59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009f5c:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c0009f5f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009f63:	79 20                	jns    c0009f85 <KeSecondsToDatetime(unsigned long long)+0x125>
c0009f65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009f68:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c0009f6e:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009f73:	89 c8                	mov    eax,ecx
c0009f75:	f7 ea                	imul   edx
c0009f77:	c1 fa 0f             	sar    edx,0xf
c0009f7a:	89 c8                	mov    eax,ecx
c0009f7c:	c1 f8 1f             	sar    eax,0x1f
c0009f7f:	29 c2                	sub    edx,eax
c0009f81:	89 d0                	mov    eax,edx
c0009f83:	eb 18                	jmp    c0009f9d <KeSecondsToDatetime(unsigned long long)+0x13d>
c0009f85:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c0009f88:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009f8d:	89 c8                	mov    eax,ecx
c0009f8f:	f7 ea                	imul   edx
c0009f91:	c1 fa 0f             	sar    edx,0xf
c0009f94:	89 c8                	mov    eax,ecx
c0009f96:	c1 f8 1f             	sar    eax,0x1f
c0009f99:	29 c2                	sub    edx,eax
c0009f9b:	89 d0                	mov    eax,edx
c0009f9d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0009fa0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0009fa3:	69 d0 4f c5 fd ff    	imul   edx,eax,0xfffdc54f
c0009fa9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009fac:	01 d0                	add    eax,edx
c0009fae:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0009fb1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009fb4:	c1 e8 02             	shr    eax,0x2
c0009fb7:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c0009fbc:	f7 e2                	mul    edx
c0009fbe:	c1 ea 07             	shr    edx,0x7
c0009fc1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009fc4:	29 d0                	sub    eax,edx
c0009fc6:	89 c1                	mov    ecx,eax
c0009fc8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009fcb:	c1 e8 02             	shr    eax,0x2
c0009fce:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c0009fd3:	f7 e2                	mul    edx
c0009fd5:	89 d0                	mov    eax,edx
c0009fd7:	c1 e8 0b             	shr    eax,0xb
c0009fda:	01 c1                	add    ecx,eax
c0009fdc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009fdf:	c1 e8 04             	shr    eax,0x4
c0009fe2:	ba 41 d6 72 00       	mov    edx,0x72d641
c0009fe7:	f7 e2                	mul    edx
c0009fe9:	89 d0                	mov    eax,edx
c0009feb:	c1 e8 04             	shr    eax,0x4
c0009fee:	29 c1                	sub    ecx,eax
c0009ff0:	ba 61 f3 19 67       	mov    edx,0x6719f361
c0009ff5:	89 c8                	mov    eax,ecx
c0009ff7:	f7 e2                	mul    edx
c0009ff9:	89 c8                	mov    eax,ecx
c0009ffb:	29 d0                	sub    eax,edx
c0009ffd:	d1 e8                	shr    eax,1
c0009fff:	01 d0                	add    eax,edx
c000a001:	c1 e8 08             	shr    eax,0x8
c000a004:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000a007:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000a00a:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c000a00f:	f7 e2                	mul    edx
c000a011:	89 d1                	mov    ecx,edx
c000a013:	c1 e9 05             	shr    ecx,0x5
c000a016:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000a019:	89 d0                	mov    eax,edx
c000a01b:	c1 e0 03             	shl    eax,0x3
c000a01e:	01 d0                	add    eax,edx
c000a020:	c1 e0 03             	shl    eax,0x3
c000a023:	01 d0                	add    eax,edx
c000a025:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a02c:	01 c2                	add    edx,eax
c000a02e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000a031:	c1 e8 02             	shr    eax,0x2
c000a034:	01 d0                	add    eax,edx
c000a036:	29 c1                	sub    ecx,eax
c000a038:	89 ca                	mov    edx,ecx
c000a03a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000a03d:	01 d0                	add    eax,edx
c000a03f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000a042:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000a045:	89 d0                	mov    eax,edx
c000a047:	c1 e0 02             	shl    eax,0x2
c000a04a:	01 d0                	add    eax,edx
c000a04c:	83 c0 02             	add    eax,0x2
c000a04f:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c000a054:	f7 e2                	mul    edx
c000a056:	89 d0                	mov    eax,edx
c000a058:	c1 e8 07             	shr    eax,0x7
c000a05b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000a05e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000a061:	89 d0                	mov    eax,edx
c000a063:	c1 e0 03             	shl    eax,0x3
c000a066:	01 d0                	add    eax,edx
c000a068:	89 c2                	mov    edx,eax
c000a06a:	c1 e2 04             	shl    edx,0x4
c000a06d:	01 d0                	add    eax,edx
c000a06f:	83 c0 02             	add    eax,0x2
c000a072:	ba cd cc cc cc       	mov    edx,0xcccccccd
c000a077:	f7 e2                	mul    edx
c000a079:	c1 ea 02             	shr    edx,0x2
c000a07c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a07f:	29 d0                	sub    eax,edx
c000a081:	83 c0 01             	add    eax,0x1
c000a084:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000a087:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c000a08b:	77 07                	ja     c000a094 <KeSecondsToDatetime(unsigned long long)+0x234>
c000a08d:	b8 02 00 00 00       	mov    eax,0x2
c000a092:	eb 05                	jmp    c000a099 <KeSecondsToDatetime(unsigned long long)+0x239>
c000a094:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c000a099:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c000a09c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000a09f:	89 d0                	mov    eax,edx
c000a0a1:	c1 e0 02             	shl    eax,0x2
c000a0a4:	01 d0                	add    eax,edx
c000a0a6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a0ad:	01 d0                	add    eax,edx
c000a0af:	c1 e0 04             	shl    eax,0x4
c000a0b2:	89 c2                	mov    edx,eax
c000a0b4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000a0b7:	01 c2                	add    edx,eax
c000a0b9:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c000a0bd:	0f 96 c0             	setbe  al
c000a0c0:	0f b6 c0             	movzx  eax,al
c000a0c3:	01 d0                	add    eax,edx
c000a0c5:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c000a0c8:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000a0cb:	89 c2                	mov    edx,eax
c000a0cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0d0:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c000a0d4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c000a0d7:	83 c0 01             	add    eax,0x1
c000a0da:	88 c2                	mov    dl,al
c000a0dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0df:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a0e2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000a0e5:	88 c2                	mov    dl,al
c000a0e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0ea:	88 10                	mov    BYTE PTR [eax],dl
c000a0ec:	90                   	nop
c000a0ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0f0:	c9                   	leave  
c000a0f1:	c2 04 00             	ret    0x4

c000a0f4 <Clock::timeInDatetimeLocal()>:
c000a0f4:	55                   	push   ebp
c000a0f5:	89 e5                	mov    ebp,esp
c000a0f7:	83 ec 08             	sub    esp,0x8
c000a0fa:	83 ec 0c             	sub    esp,0xc
c000a0fd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000a100:	e8 81 f8 ff ff       	call   c0009986 <Clock::timeInSecondsLocal()>
c000a105:	83 c4 10             	add    esp,0x10
c000a108:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000a10b:	83 ec 04             	sub    esp,0x4
c000a10e:	52                   	push   edx
c000a10f:	50                   	push   eax
c000a110:	51                   	push   ecx
c000a111:	e8 4a fd ff ff       	call   c0009e60 <KeSecondsToDatetime(unsigned long long)>
c000a116:	83 c4 0c             	add    esp,0xc
c000a119:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a11c:	c9                   	leave  
c000a11d:	c2 04 00             	ret    0x4

c000a120 <Device::hibernate()>:
c000a120:	c3                   	ret    
c000a121:	90                   	nop

c000a122 <Device::wake()>:
c000a122:	c3                   	ret    
c000a123:	90                   	nop

c000a124 <Device::detect()>:
c000a124:	c3                   	ret    
c000a125:	90                   	nop

c000a126 <Device::disableLegacy()>:
c000a126:	c3                   	ret    
c000a127:	90                   	nop

c000a128 <Device::powerSaving(PowerSavingLevel)>:
c000a128:	c3                   	ret    
c000a129:	90                   	nop

c000a12a <DriverlessDevice::close(int, int, void*)>:
c000a12a:	31 c0                	xor    eax,eax
c000a12c:	c3                   	ret    
c000a12d:	90                   	nop

c000a12e <DriverlessDevice::detect()>:
c000a12e:	c3                   	ret    
c000a12f:	90                   	nop

c000a130 <DriverlessDevice::open(int, int, void*)>:
c000a130:	83 ec 18             	sub    esp,0x18
c000a133:	68 2c 91 02 c0       	push   0xc002912c
c000a138:	e8 eb 61 00 00       	call   c0010328 <KePanic(char const*)>
c000a13d:	83 c8 ff             	or     eax,0xffffffff
c000a140:	83 c4 1c             	add    esp,0x1c
c000a143:	c3                   	ret    

c000a144 <Device::~Device()>:
c000a144:	ba d0 91 02 c0       	mov    edx,0xc00291d0
c000a149:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a14d:	89 10                	mov    DWORD PTR [eax],edx
c000a14f:	90                   	nop
c000a150:	c3                   	ret    
c000a151:	90                   	nop

c000a152 <Device::~Device()>:
c000a152:	83 ec 0c             	sub    esp,0xc
c000a155:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a159:	e8 e6 ff ff ff       	call   c000a144 <Device::~Device()>
c000a15e:	83 c4 04             	add    esp,0x4
c000a161:	83 ec 08             	sub    esp,0x8
c000a164:	68 58 01 00 00       	push   0x158
c000a169:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a16d:	e8 62 39 00 00       	call   c000dad4 <operator delete(void*, unsigned long)>
c000a172:	83 c4 10             	add    esp,0x10
c000a175:	83 c4 0c             	add    esp,0xc
c000a178:	c3                   	ret    
c000a179:	90                   	nop

c000a17a <Device::findAndLoadDriver()>:
c000a17a:	c7 44 24 04 4a 91 02 c0 	mov    DWORD PTR [esp+0x4],0xc002914a
c000a182:	e9 df cd ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>
c000a187:	90                   	nop

c000a188 <Device::preOpenPCI(PCIDeviceInfo)>:
c000a188:	57                   	push   edi
c000a189:	b9 09 00 00 00       	mov    ecx,0x9
c000a18e:	56                   	push   esi
c000a18f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a193:	8d 74 24 10          	lea    esi,[esp+0x10]
c000a197:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000a1a1:	81 c7 18 01 00 00    	add    edi,0x118
c000a1a7:	fc                   	cld    
c000a1a8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a1aa:	5e                   	pop    esi
c000a1ab:	5f                   	pop    edi
c000a1ac:	c3                   	ret    
c000a1ad:	90                   	nop

c000a1ae <Device::preOpenACPI(void*, char*, char*)>:
c000a1ae:	57                   	push   edi
c000a1af:	b9 1e 00 00 00       	mov    ecx,0x1e
c000a1b4:	56                   	push   esi
c000a1b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1b9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a1bd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a1c1:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000a1cb:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000a1d1:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000a1d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a1d9:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000a1df:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000a1e3:	b9 0e 00 00 00       	mov    ecx,0xe
c000a1e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a1ea:	5e                   	pop    esi
c000a1eb:	5f                   	pop    edi
c000a1ec:	c3                   	ret    
c000a1ed:	90                   	nop

c000a1ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000a1ee:	53                   	push   ebx
c000a1ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a1f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a1f7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a1fb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a1ff:	0f b6 c0             	movzx  eax,al
c000a202:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a206:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a20a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000a20e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a212:	5b                   	pop    ebx
c000a213:	e9 37 14 01 00       	jmp    c001b64f <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000a218 <Device::getParent()>:
c000a218:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a21c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000a222:	c3                   	ret    
c000a223:	90                   	nop

c000a224 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000a224:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a228:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a22c:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000a231:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a235:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a239:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a23d:	e9 7e 15 01 00       	jmp    c001b7c0 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000a242 <Device::addChild(Device*)>:
c000a242:	53                   	push   ebx
c000a243:	83 ec 08             	sub    esp,0x8
c000a246:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a24a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a24e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000a254:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000a25a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a25c:	85 d2                	test   edx,edx
c000a25e:	74 04                	je     c000a264 <Device::addChild(Device*)+0x22>
c000a260:	89 d3                	mov    ebx,edx
c000a262:	eb f6                	jmp    c000a25a <Device::addChild(Device*)+0x18>
c000a264:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a267:	83 ec 0c             	sub    esp,0xc
c000a26a:	6a 08                	push   0x8
c000a26c:	e8 63 5c 00 00       	call   c000fed4 <malloc>
c000a271:	89 03                	mov    DWORD PTR [ebx],eax
c000a273:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000a279:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a280:	83 c4 18             	add    esp,0x18
c000a283:	5b                   	pop    ebx
c000a284:	c3                   	ret    
c000a285:	90                   	nop

c000a286 <Device::removeAllChildren()>:
c000a286:	56                   	push   esi
c000a287:	53                   	push   ebx
c000a288:	52                   	push   edx
c000a289:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a28d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000a293:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a296:	74 17                	je     c000a2af <Device::removeAllChildren()+0x29>
c000a298:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a29b:	85 c0                	test   eax,eax
c000a29d:	74 0c                	je     c000a2ab <Device::removeAllChildren()+0x25>
c000a29f:	8b 10                	mov    edx,DWORD PTR [eax]
c000a2a1:	83 ec 0c             	sub    esp,0xc
c000a2a4:	50                   	push   eax
c000a2a5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a2ad:	eb e4                	jmp    c000a293 <Device::removeAllChildren()+0xd>
c000a2af:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000a2b5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000a2bb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000a2c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a2c8:	58                   	pop    eax
c000a2c9:	5b                   	pop    ebx
c000a2ca:	5e                   	pop    esi
c000a2cb:	c3                   	ret    

c000a2cc <Device::hibernateAll()>:
c000a2cc:	53                   	push   ebx
c000a2cd:	83 ec 14             	sub    esp,0x14
c000a2d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a2d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a2d6:	53                   	push   ebx
c000a2d7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000a2da:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a2e0:	83 c4 10             	add    esp,0x10
c000a2e3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a2e6:	74 0f                	je     c000a2f7 <Device::hibernateAll()+0x2b>
c000a2e8:	83 ec 0c             	sub    esp,0xc
c000a2eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a2ee:	e8 d9 ff ff ff       	call   c000a2cc <Device::hibernateAll()>
c000a2f3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a2f5:	eb e9                	jmp    c000a2e0 <Device::hibernateAll()+0x14>
c000a2f7:	83 c4 08             	add    esp,0x8
c000a2fa:	5b                   	pop    ebx
c000a2fb:	c3                   	ret    

c000a2fc <Device::wakeAll()>:
c000a2fc:	53                   	push   ebx
c000a2fd:	83 ec 14             	sub    esp,0x14
c000a300:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a304:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a306:	53                   	push   ebx
c000a307:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000a30a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a310:	83 c4 10             	add    esp,0x10
c000a313:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a316:	74 0f                	je     c000a327 <Device::wakeAll()+0x2b>
c000a318:	83 ec 0c             	sub    esp,0xc
c000a31b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a31e:	e8 d9 ff ff ff       	call   c000a2fc <Device::wakeAll()>
c000a323:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a325:	eb e9                	jmp    c000a310 <Device::wakeAll()+0x14>
c000a327:	83 c4 08             	add    esp,0x8
c000a32a:	5b                   	pop    ebx
c000a32b:	c3                   	ret    

c000a32c <Device::detectAll()>:
c000a32c:	53                   	push   ebx
c000a32d:	83 ec 14             	sub    esp,0x14
c000a330:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a334:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a336:	53                   	push   ebx
c000a337:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000a33a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a340:	83 c4 10             	add    esp,0x10
c000a343:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a346:	74 0f                	je     c000a357 <Device::detectAll()+0x2b>
c000a348:	83 ec 0c             	sub    esp,0xc
c000a34b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a34e:	e8 d9 ff ff ff       	call   c000a32c <Device::detectAll()>
c000a353:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a355:	eb e9                	jmp    c000a340 <Device::detectAll()+0x14>
c000a357:	83 c4 08             	add    esp,0x8
c000a35a:	5b                   	pop    ebx
c000a35b:	c3                   	ret    

c000a35c <Device::disableLegacyAll()>:
c000a35c:	c3                   	ret    
c000a35d:	90                   	nop

c000a35e <Device::loadDriversForAll()>:
c000a35e:	c3                   	ret    
c000a35f:	90                   	nop

c000a360 <Device::powerSavingAll(PowerSavingLevel)>:
c000a360:	56                   	push   esi
c000a361:	53                   	push   ebx
c000a362:	83 ec 0c             	sub    esp,0xc
c000a365:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a369:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000a36d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a36f:	56                   	push   esi
c000a370:	53                   	push   ebx
c000a371:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000a374:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a37a:	83 c4 10             	add    esp,0x10
c000a37d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a380:	74 0f                	je     c000a391 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000a382:	52                   	push   edx
c000a383:	52                   	push   edx
c000a384:	56                   	push   esi
c000a385:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a388:	e8 d3 ff ff ff       	call   c000a360 <Device::powerSavingAll(PowerSavingLevel)>
c000a38d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a38f:	eb e9                	jmp    c000a37a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000a391:	58                   	pop    eax
c000a392:	5b                   	pop    ebx
c000a393:	5e                   	pop    esi
c000a394:	c3                   	ret    
c000a395:	90                   	nop

c000a396 <Device::setName(char const*)>:
c000a396:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000a39e:	e9 ad 62 ff ff       	jmp    c0000650 <strcpy>
c000a3a3:	90                   	nop

c000a3a4 <Device::Device(char const*)>:
c000a3a4:	83 ec 1c             	sub    esp,0x1c
c000a3a7:	ba d0 91 02 c0       	mov    edx,0xc00291d0
c000a3ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a3b0:	89 10                	mov    DWORD PTR [eax],edx
c000a3b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a3b6:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000a3c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a3c4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000a3ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a3d2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000a3dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a3e0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000a3ea:	83 ec 08             	sub    esp,0x8
c000a3ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3f5:	e8 9c ff ff ff       	call   c000a396 <Device::setName(char const*)>
c000a3fa:	83 c4 10             	add    esp,0x10
c000a3fd:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000a405:	83 ec 0c             	sub    esp,0xc
c000a408:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a40c:	e8 c3 5a 00 00       	call   c000fed4 <malloc>
c000a411:	83 c4 10             	add    esp,0x10
c000a414:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000a41a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a421:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000a425:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000a42b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a42f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000a435:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000a43b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a43f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000a445:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a44c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a450:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000a457:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a45b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000a462:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a466:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000a470:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a474:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000a47e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a482:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000a48c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a490:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000a49a:	90                   	nop
c000a49b:	83 c4 1c             	add    esp,0x1c
c000a49e:	c3                   	ret    
c000a49f:	90                   	nop

c000a4a0 <Device::getName()>:
c000a4a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a4a4:	05 d0 00 00 00       	add    eax,0xd0
c000a4a9:	c3                   	ret    

c000a4aa <Device::closeAll()>:
c000a4aa:	53                   	push   ebx
c000a4ab:	83 ec 08             	sub    esp,0x8
c000a4ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a4b2:	53                   	push   ebx
c000a4b3:	e8 e8 ff ff ff       	call   c000a4a0 <Device::getName()>
c000a4b8:	52                   	push   edx
c000a4b9:	50                   	push   eax
c000a4ba:	68 84 91 02 c0       	push   0xc0029184
c000a4bf:	e8 a2 ca ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000a4c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a4c6:	6a 00                	push   0x0
c000a4c8:	6a 00                	push   0x0
c000a4ca:	6a 00                	push   0x0
c000a4cc:	53                   	push   ebx
c000a4cd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000a4d0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a4d6:	83 c4 20             	add    esp,0x20
c000a4d9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a4dc:	74 12                	je     c000a4f0 <Device::closeAll()+0x46>
c000a4de:	83 ec 0c             	sub    esp,0xc
c000a4e1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a4e4:	e8 c1 ff ff ff       	call   c000a4aa <Device::closeAll()>
c000a4e9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a4eb:	83 c4 10             	add    esp,0x10
c000a4ee:	eb e9                	jmp    c000a4d9 <Device::closeAll()+0x2f>
c000a4f0:	83 c4 08             	add    esp,0x8
c000a4f3:	5b                   	pop    ebx
c000a4f4:	c3                   	ret    
c000a4f5:	90                   	nop

c000a4f6 <DriverlessDevice::DriverlessDevice(char const*)>:
c000a4f6:	83 ec 0c             	sub    esp,0xc
c000a4f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4fd:	83 ec 08             	sub    esp,0x8
c000a500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a504:	50                   	push   eax
c000a505:	e8 9a fe ff ff       	call   c000a3a4 <Device::Device(char const*)>
c000a50a:	83 c4 10             	add    esp,0x10
c000a50d:	ba fc 91 02 c0       	mov    edx,0xc00291fc
c000a512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a516:	89 10                	mov    DWORD PTR [eax],edx
c000a518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a51c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000a526:	90                   	nop
c000a527:	83 c4 0c             	add    esp,0xc
c000a52a:	c3                   	ret    
c000a52b:	90                   	nop

c000a52c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000a52c:	57                   	push   edi
c000a52d:	56                   	push   esi
c000a52e:	53                   	push   ebx
c000a52f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a533:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000a537:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a53b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000a541:	75 0c                	jne    c000a54f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000a543:	52                   	push   edx
c000a544:	52                   	push   edx
c000a545:	53                   	push   ebx
c000a546:	56                   	push   esi
c000a547:	e8 f8 d0 01 00       	call   c0027644 <LinkedList<Device>::addElement(Device*)>
c000a54c:	83 c4 10             	add    esp,0x10
c000a54f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a555:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a558:	74 12                	je     c000a56c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000a55a:	50                   	push   eax
c000a55b:	57                   	push   edi
c000a55c:	56                   	push   esi
c000a55d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a560:	e8 c7 ff ff ff       	call   c000a52c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000a565:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a567:	83 c4 10             	add    esp,0x10
c000a56a:	eb e9                	jmp    c000a555 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000a56c:	5b                   	pop    ebx
c000a56d:	5e                   	pop    esi
c000a56e:	5f                   	pop    edi
c000a56f:	c3                   	ret    

c000a570 <getDevicesOfType(DeviceType)>:
c000a570:	53                   	push   ebx
c000a571:	83 ec 14             	sub    esp,0x14
c000a574:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a578:	53                   	push   ebx
c000a579:	e8 a2 d1 01 00       	call   c0027720 <LinkedList<Device>::LinkedList()>
c000a57e:	83 c4 0c             	add    esp,0xc
c000a581:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a585:	53                   	push   ebx
c000a586:	ff 35 08 31 03 c0    	push   DWORD PTR ds:0xc0033108
c000a58c:	e8 9b ff ff ff       	call   c000a52c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000a591:	83 c4 18             	add    esp,0x18
c000a594:	89 d8                	mov    eax,ebx
c000a596:	5b                   	pop    ebx
c000a597:	c2 04 00             	ret    0x4
c000a59a:	66 90                	xchg   ax,ax

c000a59c <HardDiskController::HardDiskController(char const*)>:
c000a59c:	83 ec 0c             	sub    esp,0xc
c000a59f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a5a3:	83 ec 08             	sub    esp,0x8
c000a5a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a5aa:	50                   	push   eax
c000a5ab:	e8 f4 fd ff ff       	call   c000a3a4 <Device::Device(char const*)>
c000a5b0:	83 c4 10             	add    esp,0x10
c000a5b3:	ba 28 92 02 c0       	mov    edx,0xc0029228
c000a5b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a5bc:	89 10                	mov    DWORD PTR [eax],edx
c000a5be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a5c2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000a5cc:	90                   	nop
c000a5cd:	83 c4 0c             	add    esp,0xc
c000a5d0:	c3                   	ret    
c000a5d1:	90                   	nop
c000a5d2:	66 90                	xchg   ax,ax

c000a5d4 <HardDiskController::~HardDiskController()>:
c000a5d4:	83 ec 0c             	sub    esp,0xc
c000a5d7:	ba 28 92 02 c0       	mov    edx,0xc0029228
c000a5dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a5e0:	89 10                	mov    DWORD PTR [eax],edx
c000a5e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a5e6:	83 ec 0c             	sub    esp,0xc
c000a5e9:	50                   	push   eax
c000a5ea:	e8 55 fb ff ff       	call   c000a144 <Device::~Device()>
c000a5ef:	83 c4 10             	add    esp,0x10
c000a5f2:	90                   	nop
c000a5f3:	83 c4 0c             	add    esp,0xc
c000a5f6:	c3                   	ret    
c000a5f7:	90                   	nop

c000a5f8 <HardDiskController::~HardDiskController()>:
c000a5f8:	83 ec 0c             	sub    esp,0xc
c000a5fb:	83 ec 0c             	sub    esp,0xc
c000a5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a602:	e8 cd ff ff ff       	call   c000a5d4 <HardDiskController::~HardDiskController()>
c000a607:	83 c4 10             	add    esp,0x10
c000a60a:	83 ec 08             	sub    esp,0x8
c000a60d:	68 58 01 00 00       	push   0x158
c000a612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a616:	e8 b9 34 00 00       	call   c000dad4 <operator delete(void*, unsigned long)>
c000a61b:	83 c4 10             	add    esp,0x10
c000a61e:	83 c4 0c             	add    esp,0xc
c000a621:	c3                   	ret    

c000a622 <PhysicalDisk::eject()>:
c000a622:	83 c8 ff             	or     eax,0xffffffff
c000a625:	c3                   	ret    

c000a626 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000a626:	83 ec 0c             	sub    esp,0xc
c000a629:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a62d:	83 ec 08             	sub    esp,0x8
c000a630:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a634:	50                   	push   eax
c000a635:	e8 6a fd ff ff       	call   c000a3a4 <Device::Device(char const*)>
c000a63a:	83 c4 10             	add    esp,0x10
c000a63d:	ba 54 92 02 c0       	mov    edx,0xc0029254
c000a642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a646:	89 10                	mov    DWORD PTR [eax],edx
c000a648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a64c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a657:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000a65e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a662:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000a66c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a670:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a674:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000a67a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a67e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000a688:	90                   	nop
c000a689:	83 c4 0c             	add    esp,0xc
c000a68c:	c3                   	ret    
c000a68d:	90                   	nop

c000a68e <PhysicalDisk::startCache()>:
c000a68e:	56                   	push   esi
c000a68f:	53                   	push   ebx
c000a690:	83 ec 10             	sub    esp,0x10
c000a693:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a697:	6a 44                	push   0x44
c000a699:	e8 36 58 00 00       	call   c000fed4 <malloc>
c000a69e:	89 c6                	mov    esi,eax
c000a6a0:	58                   	pop    eax
c000a6a1:	5a                   	pop    edx
c000a6a2:	53                   	push   ebx
c000a6a3:	56                   	push   esi
c000a6a4:	e8 b7 13 00 00       	call   c000ba60 <VCache::VCache(PhysicalDisk*)>
c000a6a9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000a6af:	83 c4 14             	add    esp,0x14
c000a6b2:	5b                   	pop    ebx
c000a6b3:	5e                   	pop    esi
c000a6b4:	c3                   	ret    
c000a6b5:	90                   	nop

c000a6b6 <PhysicalDisk::~PhysicalDisk()>:
c000a6b6:	83 ec 0c             	sub    esp,0xc
c000a6b9:	ba 54 92 02 c0       	mov    edx,0xc0029254
c000a6be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6c2:	89 10                	mov    DWORD PTR [eax],edx
c000a6c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6c8:	83 ec 0c             	sub    esp,0xc
c000a6cb:	50                   	push   eax
c000a6cc:	e8 73 fa ff ff       	call   c000a144 <Device::~Device()>
c000a6d1:	83 c4 10             	add    esp,0x10
c000a6d4:	90                   	nop
c000a6d5:	83 c4 0c             	add    esp,0xc
c000a6d8:	c3                   	ret    
c000a6d9:	90                   	nop

c000a6da <PhysicalDisk::~PhysicalDisk()>:
c000a6da:	83 ec 0c             	sub    esp,0xc
c000a6dd:	83 ec 0c             	sub    esp,0xc
c000a6e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6e4:	e8 cd ff ff ff       	call   c000a6b6 <PhysicalDisk::~PhysicalDisk()>
c000a6e9:	83 c4 10             	add    esp,0x10
c000a6ec:	83 ec 08             	sub    esp,0x8
c000a6ef:	68 6c 01 00 00       	push   0x16c
c000a6f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6f8:	e8 d7 33 00 00       	call   c000dad4 <operator delete(void*, unsigned long)>
c000a6fd:	83 c4 10             	add    esp,0x10
c000a700:	83 c4 0c             	add    esp,0xc
c000a703:	c3                   	ret    

c000a704 <startGUI(void*)>:
c000a704:	55                   	push   ebp
c000a705:	89 e5                	mov    ebp,esp
c000a707:	83 ec 08             	sub    esp,0x8
c000a70a:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c000a712:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000a717:	85 c0                	test   eax,eax
c000a719:	75 01                	jne    c000a71c <startGUI(void*)+0x18>
c000a71b:	fb                   	sti    
c000a71c:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c000a721:	83 ec 04             	sub    esp,0x4
c000a724:	6a 00                	push   0x0
c000a726:	50                   	push   eax
c000a727:	68 84 92 02 c0       	push   0xc0029284
c000a72c:	e8 fd bd 00 00       	call   c001652e <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000a731:	83 c4 10             	add    esp,0x10
c000a734:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c000a739:	83 ec 04             	sub    esp,0x4
c000a73c:	6a 00                	push   0x0
c000a73e:	50                   	push   eax
c000a73f:	68 9e 92 02 c0       	push   0xc002929e
c000a744:	e8 e5 bd 00 00       	call   c001652e <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000a749:	83 c4 10             	add    esp,0x10
c000a74c:	eb fe                	jmp    c000a74c <startGUI(void*)+0x48>

c000a74e <startGUIVESA(void*)>:
c000a74e:	55                   	push   ebp
c000a74f:	89 e5                	mov    ebp,esp
c000a751:	83 ec 08             	sub    esp,0x8
c000a754:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c000a75c:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000a761:	85 c0                	test   eax,eax
c000a763:	75 01                	jne    c000a766 <startGUIVESA(void*)+0x18>
c000a765:	fb                   	sti    
c000a766:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c000a76b:	83 ec 04             	sub    esp,0x4
c000a76e:	6a 00                	push   0x0
c000a770:	50                   	push   eax
c000a771:	68 bc 92 02 c0       	push   0xc00292bc
c000a776:	e8 b3 bd 00 00       	call   c001652e <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000a77b:	83 c4 10             	add    esp,0x10
c000a77e:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c000a783:	83 ec 04             	sub    esp,0x4
c000a786:	6a 00                	push   0x0
c000a788:	50                   	push   eax
c000a789:	68 9e 92 02 c0       	push   0xc002929e
c000a78e:	e8 9b bd 00 00       	call   c001652e <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000a793:	83 c4 10             	add    esp,0x10
c000a796:	eb fe                	jmp    c000a796 <startGUIVESA(void*)+0x48>

c000a798 <sendKeyToTerminal(unsigned char)>:
c000a798:	55                   	push   ebp
c000a799:	89 e5                	mov    ebp,esp
c000a79b:	83 ec 28             	sub    esp,0x28
c000a79e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a7a1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000a7a4:	a1 f4 31 03 c0       	mov    eax,ds:0xc00331f4
c000a7a9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000a7ad:	83 ec 08             	sub    esp,0x8
c000a7b0:	52                   	push   edx
c000a7b1:	50                   	push   eax
c000a7b2:	e8 f9 87 00 00       	call   c0012fb0 <VgaText::receiveKey(unsigned char)>
c000a7b7:	83 c4 10             	add    esp,0x10
c000a7ba:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a7be:	83 f8 0a             	cmp    eax,0xa
c000a7c1:	74 16                	je     c000a7d9 <sendKeyToTerminal(unsigned char)+0x41>
c000a7c3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a7c7:	83 f8 03             	cmp    eax,0x3
c000a7ca:	74 0d                	je     c000a7d9 <sendKeyToTerminal(unsigned char)+0x41>
c000a7cc:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a7d0:	83 f8 1c             	cmp    eax,0x1c
c000a7d3:	0f 85 92 00 00 00    	jne    c000a86b <sendKeyToTerminal(unsigned char)+0xd3>
c000a7d9:	fa                   	cli    
c000a7da:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000a7df:	83 c0 01             	add    eax,0x1
c000a7e2:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c000a7e7:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c000a7ec:	83 c0 01             	add    eax,0x1
c000a7ef:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c000a7f4:	a1 80 26 03 c0       	mov    eax,ds:0xc0032680
c000a7f9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a7fc:	c7 05 80 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032680,0x0
c000a806:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000a80a:	74 1f                	je     c000a82b <sendKeyToTerminal(unsigned char)+0x93>
c000a80c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a80f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000a812:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a815:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a818:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a81b:	83 ec 0c             	sub    esp,0xc
c000a81e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000a821:	e8 e2 c9 00 00       	call   c0017208 <unblockTask(ThreadControlBlock*)>
c000a826:	83 c4 10             	add    esp,0x10
c000a829:	eb db                	jmp    c000a806 <sendKeyToTerminal(unsigned char)+0x6e>
c000a82b:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c000a830:	83 e8 01             	sub    eax,0x1
c000a833:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c000a838:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c000a83d:	85 c0                	test   eax,eax
c000a83f:	75 18                	jne    c000a859 <sendKeyToTerminal(unsigned char)+0xc1>
c000a841:	a1 28 33 03 c0       	mov    eax,ds:0xc0033328
c000a846:	85 c0                	test   eax,eax
c000a848:	74 0f                	je     c000a859 <sendKeyToTerminal(unsigned char)+0xc1>
c000a84a:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c000a854:	e8 57 c6 00 00       	call   c0016eb0 <schedule()>
c000a859:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c000a861:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000a866:	85 c0                	test   eax,eax
c000a868:	75 01                	jne    c000a86b <sendKeyToTerminal(unsigned char)+0xd3>
c000a86a:	fb                   	sti    
c000a86b:	90                   	nop
c000a86c:	c9                   	leave  
c000a86d:	c3                   	ret    

c000a86e <sendKeyboardToken(KeyboardToken)>:
c000a86e:	55                   	push   ebp
c000a86f:	89 e5                	mov    ebp,esp
c000a871:	83 ec 18             	sub    esp,0x18
c000a874:	e8 2c 63 00 00       	call   c0010ba5 <KeUserIOReceived()>
c000a879:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000a87c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a87f:	0f b7 c0             	movzx  eax,ax
c000a882:	83 f2 01             	xor    edx,0x1
c000a885:	88 90 a0 26 03 c0    	mov    BYTE PTR [eax-0x3ffcd960],dl
c000a88b:	a1 88 26 03 c0       	mov    eax,ds:0xc0032688
c000a890:	85 c0                	test   eax,eax
c000a892:	74 24                	je     c000a8b8 <sendKeyboardToken(KeyboardToken)+0x4a>
c000a894:	8b 15 88 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032688
c000a89a:	83 ec 04             	sub    esp,0x4
c000a89d:	68 a0 26 03 c0       	push   0xc00326a0
c000a8a2:	83 ec 08             	sub    esp,0x8
c000a8a5:	89 e0                	mov    eax,esp
c000a8a7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000a8aa:	89 08                	mov    DWORD PTR [eax],ecx
c000a8ac:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000a8af:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000a8b3:	ff d2                	call   edx
c000a8b5:	83 c4 10             	add    esp,0x10
c000a8b8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000a8bc:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000a8bf:	0f b6 c0             	movzx  eax,al
c000a8c2:	85 c0                	test   eax,eax
c000a8c4:	0f 84 da 00 00 00    	je     c000a9a4 <sendKeyboardToken(KeyboardToken)+0x136>
c000a8ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a8cd:	0f b7 c0             	movzx  eax,ax
c000a8d0:	3d 18 03 00 00       	cmp    eax,0x318
c000a8d5:	75 06                	jne    c000a8dd <sendKeyboardToken(KeyboardToken)+0x6f>
c000a8d7:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000a8dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a8e0:	0f b7 c0             	movzx  eax,ax
c000a8e3:	3d 19 03 00 00       	cmp    eax,0x319
c000a8e8:	75 06                	jne    c000a8f0 <sendKeyboardToken(KeyboardToken)+0x82>
c000a8ea:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000a8f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a8f3:	0f b7 c0             	movzx  eax,ax
c000a8f6:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a8fb:	75 06                	jne    c000a903 <sendKeyboardToken(KeyboardToken)+0x95>
c000a8fd:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000a903:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a906:	0f b7 c0             	movzx  eax,ax
c000a909:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a90e:	75 06                	jne    c000a916 <sendKeyboardToken(KeyboardToken)+0xa8>
c000a910:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000a916:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a919:	0f b7 c0             	movzx  eax,ax
c000a91c:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a921:	75 06                	jne    c000a929 <sendKeyboardToken(KeyboardToken)+0xbb>
c000a923:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000a929:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a92c:	0f b7 c0             	movzx  eax,ax
c000a92f:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a934:	75 06                	jne    c000a93c <sendKeyboardToken(KeyboardToken)+0xce>
c000a936:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a93c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a93f:	0f b7 c0             	movzx  eax,ax
c000a942:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a947:	75 06                	jne    c000a94f <sendKeyboardToken(KeyboardToken)+0xe1>
c000a949:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000a94f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a952:	0f b7 c0             	movzx  eax,ax
c000a955:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a95a:	75 06                	jne    c000a962 <sendKeyboardToken(KeyboardToken)+0xf4>
c000a95c:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000a962:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a965:	0f b7 c0             	movzx  eax,ax
c000a968:	3d 20 03 00 00       	cmp    eax,0x320
c000a96d:	75 06                	jne    c000a975 <sendKeyboardToken(KeyboardToken)+0x107>
c000a96f:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000a975:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a978:	0f b7 c0             	movzx  eax,ax
c000a97b:	3d 21 03 00 00       	cmp    eax,0x321
c000a980:	75 06                	jne    c000a988 <sendKeyboardToken(KeyboardToken)+0x11a>
c000a982:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000a988:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a98b:	0f b7 c0             	movzx  eax,ax
c000a98e:	3d 22 03 00 00       	cmp    eax,0x322
c000a993:	0f 85 f1 00 00 00    	jne    c000aa8a <sendKeyboardToken(KeyboardToken)+0x21c>
c000a999:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000a99f:	e9 e6 00 00 00       	jmp    c000aa8a <sendKeyboardToken(KeyboardToken)+0x21c>
c000a9a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a9a7:	0f b7 c0             	movzx  eax,ax
c000a9aa:	3d 18 03 00 00       	cmp    eax,0x318
c000a9af:	75 0a                	jne    c000a9bb <sendKeyboardToken(KeyboardToken)+0x14d>
c000a9b1:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000a9b7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a9bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a9be:	0f b7 c0             	movzx  eax,ax
c000a9c1:	3d 19 03 00 00       	cmp    eax,0x319
c000a9c6:	75 0a                	jne    c000a9d2 <sendKeyboardToken(KeyboardToken)+0x164>
c000a9c8:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000a9ce:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a9d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a9d5:	0f b7 c0             	movzx  eax,ax
c000a9d8:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a9dd:	75 0a                	jne    c000a9e9 <sendKeyboardToken(KeyboardToken)+0x17b>
c000a9df:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000a9e5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a9e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a9ec:	0f b7 c0             	movzx  eax,ax
c000a9ef:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a9f4:	75 0a                	jne    c000aa00 <sendKeyboardToken(KeyboardToken)+0x192>
c000a9f6:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000a9fc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000aa00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aa03:	0f b7 c0             	movzx  eax,ax
c000aa06:	3d 1c 03 00 00       	cmp    eax,0x31c
c000aa0b:	75 0a                	jne    c000aa17 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000aa0d:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000aa13:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000aa17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aa1a:	0f b7 c0             	movzx  eax,ax
c000aa1d:	3d 1d 03 00 00       	cmp    eax,0x31d
c000aa22:	75 0a                	jne    c000aa2e <sendKeyboardToken(KeyboardToken)+0x1c0>
c000aa24:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000aa2a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000aa2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aa31:	0f b7 c0             	movzx  eax,ax
c000aa34:	3d 1e 03 00 00       	cmp    eax,0x31e
c000aa39:	75 0a                	jne    c000aa45 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000aa3b:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000aa41:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000aa45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aa48:	0f b7 c0             	movzx  eax,ax
c000aa4b:	3d 1f 03 00 00       	cmp    eax,0x31f
c000aa50:	75 0a                	jne    c000aa5c <sendKeyboardToken(KeyboardToken)+0x1ee>
c000aa52:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000aa58:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000aa5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aa5f:	0f b7 c0             	movzx  eax,ax
c000aa62:	3d 20 03 00 00       	cmp    eax,0x320
c000aa67:	75 0a                	jne    c000aa73 <sendKeyboardToken(KeyboardToken)+0x205>
c000aa69:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000aa6f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000aa73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aa76:	0f b7 c0             	movzx  eax,ax
c000aa79:	3d 21 03 00 00       	cmp    eax,0x321
c000aa7e:	75 0a                	jne    c000aa8a <sendKeyboardToken(KeyboardToken)+0x21c>
c000aa80:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000aa86:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000aa8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aa8d:	0f b7 c0             	movzx  eax,ax
c000aa90:	3d 00 02 00 00       	cmp    eax,0x200
c000aa95:	75 2f                	jne    c000aac6 <sendKeyboardToken(KeyboardToken)+0x258>
c000aa97:	a0 a0 2a 03 c0       	mov    al,ds:0xc0032aa0
c000aa9c:	83 f0 01             	xor    eax,0x1
c000aa9f:	0f b6 c0             	movzx  eax,al
c000aaa2:	85 c0                	test   eax,eax
c000aaa4:	74 20                	je     c000aac6 <sendKeyboardToken(KeyboardToken)+0x258>
c000aaa6:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c000aaab:	6a 01                	push   0x1
c000aaad:	6a 00                	push   0x0
c000aaaf:	68 04 a7 00 c0       	push   0xc000a704
c000aab4:	50                   	push   eax
c000aab5:	e8 42 c1 00 00       	call   c0016bfc <Process::createThread(void (*)(void*), void*, int)>
c000aaba:	83 c4 10             	add    esp,0x10
c000aabd:	c6 05 a0 2a 03 c0 01 	mov    BYTE PTR ds:0xc0032aa0,0x1
c000aac4:	eb 3a                	jmp    c000ab00 <sendKeyboardToken(KeyboardToken)+0x292>
c000aac6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aac9:	0f b7 c0             	movzx  eax,ax
c000aacc:	3d 01 02 00 00       	cmp    eax,0x201
c000aad1:	75 2d                	jne    c000ab00 <sendKeyboardToken(KeyboardToken)+0x292>
c000aad3:	a0 a0 2a 03 c0       	mov    al,ds:0xc0032aa0
c000aad8:	83 f0 01             	xor    eax,0x1
c000aadb:	0f b6 c0             	movzx  eax,al
c000aade:	85 c0                	test   eax,eax
c000aae0:	74 1e                	je     c000ab00 <sendKeyboardToken(KeyboardToken)+0x292>
c000aae2:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c000aae7:	6a 01                	push   0x1
c000aae9:	6a 00                	push   0x0
c000aaeb:	68 4e a7 00 c0       	push   0xc000a74e
c000aaf0:	50                   	push   eax
c000aaf1:	e8 06 c1 00 00       	call   c0016bfc <Process::createThread(void (*)(void*), void*, int)>
c000aaf6:	83 c4 10             	add    esp,0x10
c000aaf9:	c6 05 a0 2a 03 c0 01 	mov    BYTE PTR ds:0xc0032aa0,0x1
c000ab00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ab03:	0f b7 c0             	movzx  eax,ax
c000ab06:	3d 25 03 00 00       	cmp    eax,0x325
c000ab0b:	75 06                	jne    c000ab13 <sendKeyboardToken(KeyboardToken)+0x2a5>
c000ab0d:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000ab13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ab16:	0f b7 c0             	movzx  eax,ax
c000ab19:	3d 24 03 00 00       	cmp    eax,0x324
c000ab1e:	75 06                	jne    c000ab26 <sendKeyboardToken(KeyboardToken)+0x2b8>
c000ab20:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000ab26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ab29:	0f b7 c0             	movzx  eax,ax
c000ab2c:	3d 23 03 00 00       	cmp    eax,0x323
c000ab31:	75 06                	jne    c000ab39 <sendKeyboardToken(KeyboardToken)+0x2cb>
c000ab33:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000ab39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ab3c:	0f b7 c0             	movzx  eax,ax
c000ab3f:	3d 26 03 00 00       	cmp    eax,0x326
c000ab44:	75 06                	jne    c000ab4c <sendKeyboardToken(KeyboardToken)+0x2de>
c000ab46:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000ab4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ab4f:	0f b7 c0             	movzx  eax,ax
c000ab52:	3d 27 03 00 00       	cmp    eax,0x327
c000ab57:	75 06                	jne    c000ab5f <sendKeyboardToken(KeyboardToken)+0x2f1>
c000ab59:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000ab5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ab62:	0f b7 c0             	movzx  eax,ax
c000ab65:	3d 22 03 00 00       	cmp    eax,0x322
c000ab6a:	75 06                	jne    c000ab72 <sendKeyboardToken(KeyboardToken)+0x304>
c000ab6c:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000ab72:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000ab76:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ab79:	83 f0 01             	xor    eax,0x1
c000ab7c:	0f b6 c0             	movzx  eax,al
c000ab7f:	85 c0                	test   eax,eax
c000ab81:	74 7c                	je     c000abff <sendKeyboardToken(KeyboardToken)+0x391>
c000ab83:	a0 a1 27 03 c0       	mov    al,ds:0xc00327a1
c000ab88:	0f b6 c0             	movzx  eax,al
c000ab8b:	85 c0                	test   eax,eax
c000ab8d:	74 43                	je     c000abd2 <sendKeyboardToken(KeyboardToken)+0x364>
c000ab8f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ab93:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000ab97:	85 c0                	test   eax,eax
c000ab99:	74 2b                	je     c000abc6 <sendKeyboardToken(KeyboardToken)+0x358>
c000ab9b:	8b 15 a4 2a 03 c0    	mov    edx,DWORD PTR ds:0xc0032aa4
c000aba1:	89 d0                	mov    eax,edx
c000aba3:	c1 e0 02             	shl    eax,0x2
c000aba6:	01 d0                	add    eax,edx
c000aba8:	d1 e0                	shl    eax,1
c000abaa:	a3 a4 2a 03 c0       	mov    ds:0xc0032aa4,eax
c000abaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000abb2:	0f b7 c0             	movzx  eax,ax
c000abb5:	8d 50 d0             	lea    edx,[eax-0x30]
c000abb8:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c000abbd:	01 d0                	add    eax,edx
c000abbf:	a3 a4 2a 03 c0       	mov    ds:0xc0032aa4,eax
c000abc4:	eb 71                	jmp    c000ac37 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000abc6:	c7 05 a4 2a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032aa4,0x0
c000abd0:	eb 65                	jmp    c000ac37 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000abd2:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c000abd7:	85 c0                	test   eax,eax
c000abd9:	74 18                	je     c000abf3 <sendKeyboardToken(KeyboardToken)+0x385>
c000abdb:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c000abe0:	0f b6 c0             	movzx  eax,al
c000abe3:	83 ec 0c             	sub    esp,0xc
c000abe6:	50                   	push   eax
c000abe7:	e8 ac fb ff ff       	call   c000a798 <sendKeyToTerminal(unsigned char)>
c000abec:	83 c4 10             	add    esp,0x10
c000abef:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000abf3:	c7 05 a4 2a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032aa4,0x0
c000abfd:	eb 38                	jmp    c000ac37 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000abff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac02:	0f b7 c0             	movzx  eax,ax
c000ac05:	3d 01 01 00 00       	cmp    eax,0x101
c000ac0a:	75 2b                	jne    c000ac37 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000ac0c:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c000ac11:	85 c0                	test   eax,eax
c000ac13:	74 18                	je     c000ac2d <sendKeyboardToken(KeyboardToken)+0x3bf>
c000ac15:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c000ac1a:	0f b6 c0             	movzx  eax,al
c000ac1d:	83 ec 0c             	sub    esp,0xc
c000ac20:	50                   	push   eax
c000ac21:	e8 72 fb ff ff       	call   c000a798 <sendKeyToTerminal(unsigned char)>
c000ac26:	83 c4 10             	add    esp,0x10
c000ac29:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ac2d:	c7 05 a4 2a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032aa4,0x0
c000ac37:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ac3a:	83 f0 01             	xor    eax,0x1
c000ac3d:	0f b6 c0             	movzx  eax,al
c000ac40:	85 c0                	test   eax,eax
c000ac42:	74 5a                	je     c000ac9e <sendKeyboardToken(KeyboardToken)+0x430>
c000ac44:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ac47:	83 f0 01             	xor    eax,0x1
c000ac4a:	0f b6 c0             	movzx  eax,al
c000ac4d:	85 c0                	test   eax,eax
c000ac4f:	74 4d                	je     c000ac9e <sendKeyboardToken(KeyboardToken)+0x430>
c000ac51:	a0 a0 27 03 c0       	mov    al,ds:0xc00327a0
c000ac56:	83 f0 01             	xor    eax,0x1
c000ac59:	0f b6 c0             	movzx  eax,al
c000ac5c:	85 c0                	test   eax,eax
c000ac5e:	74 3e                	je     c000ac9e <sendKeyboardToken(KeyboardToken)+0x430>
c000ac60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac63:	0f b7 c0             	movzx  eax,ax
c000ac66:	83 f8 1f             	cmp    eax,0x1f
c000ac69:	76 0b                	jbe    c000ac76 <sendKeyboardToken(KeyboardToken)+0x408>
c000ac6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac6e:	0f b7 c0             	movzx  eax,ax
c000ac71:	83 f8 7e             	cmp    eax,0x7e
c000ac74:	76 16                	jbe    c000ac8c <sendKeyboardToken(KeyboardToken)+0x41e>
c000ac76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac79:	0f b7 c0             	movzx  eax,ax
c000ac7c:	83 f8 0a             	cmp    eax,0xa
c000ac7f:	74 0b                	je     c000ac8c <sendKeyboardToken(KeyboardToken)+0x41e>
c000ac81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac84:	0f b7 c0             	movzx  eax,ax
c000ac87:	83 f8 08             	cmp    eax,0x8
c000ac8a:	75 12                	jne    c000ac9e <sendKeyboardToken(KeyboardToken)+0x430>
c000ac8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac8f:	0f b6 c0             	movzx  eax,al
c000ac92:	83 ec 0c             	sub    esp,0xc
c000ac95:	50                   	push   eax
c000ac96:	e8 fd fa ff ff       	call   c000a798 <sendKeyToTerminal(unsigned char)>
c000ac9b:	83 c4 10             	add    esp,0x10
c000ac9e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000aca1:	83 f0 01             	xor    eax,0x1
c000aca4:	0f b6 c0             	movzx  eax,al
c000aca7:	85 c0                	test   eax,eax
c000aca9:	74 5d                	je     c000ad08 <sendKeyboardToken(KeyboardToken)+0x49a>
c000acab:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000acae:	83 f0 01             	xor    eax,0x1
c000acb1:	0f b6 c0             	movzx  eax,al
c000acb4:	85 c0                	test   eax,eax
c000acb6:	74 50                	je     c000ad08 <sendKeyboardToken(KeyboardToken)+0x49a>
c000acb8:	a0 a0 27 03 c0       	mov    al,ds:0xc00327a0
c000acbd:	0f b6 c0             	movzx  eax,al
c000acc0:	85 c0                	test   eax,eax
c000acc2:	74 44                	je     c000ad08 <sendKeyboardToken(KeyboardToken)+0x49a>
c000acc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000acc7:	0f b7 c0             	movzx  eax,ax
c000acca:	83 f8 3f             	cmp    eax,0x3f
c000accd:	76 39                	jbe    c000ad08 <sendKeyboardToken(KeyboardToken)+0x49a>
c000accf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000acd2:	0f b7 c0             	movzx  eax,ax
c000acd5:	83 f8 7f             	cmp    eax,0x7f
c000acd8:	77 2e                	ja     c000ad08 <sendKeyboardToken(KeyboardToken)+0x49a>
c000acda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000acdd:	88 c2                	mov    dl,al
c000acdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ace2:	0f b7 c0             	movzx  eax,ax
c000ace5:	83 f8 5f             	cmp    eax,0x5f
c000ace8:	76 04                	jbe    c000acee <sendKeyboardToken(KeyboardToken)+0x480>
c000acea:	b0 20                	mov    al,0x20
c000acec:	eb 02                	jmp    c000acf0 <sendKeyboardToken(KeyboardToken)+0x482>
c000acee:	b0 00                	mov    al,0x0
c000acf0:	89 d1                	mov    ecx,edx
c000acf2:	29 c1                	sub    ecx,eax
c000acf4:	89 c8                	mov    eax,ecx
c000acf6:	83 e8 40             	sub    eax,0x40
c000acf9:	0f b6 c0             	movzx  eax,al
c000acfc:	83 ec 0c             	sub    esp,0xc
c000acff:	50                   	push   eax
c000ad00:	e8 93 fa ff ff       	call   c000a798 <sendKeyToTerminal(unsigned char)>
c000ad05:	83 c4 10             	add    esp,0x10
c000ad08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad0b:	0f b7 c0             	movzx  eax,ax
c000ad0e:	3d 00 03 00 00       	cmp    eax,0x300
c000ad13:	75 12                	jne    c000ad27 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000ad15:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ad18:	83 f0 01             	xor    eax,0x1
c000ad1b:	0f b6 c0             	movzx  eax,al
c000ad1e:	85 c0                	test   eax,eax
c000ad20:	74 05                	je     c000ad27 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000ad22:	e8 8e 79 00 00       	call   c00126b5 <doTerminalCycle()>
c000ad27:	90                   	nop
c000ad28:	c9                   	leave  
c000ad29:	c3                   	ret    

c000ad2a <clearInternalKeybuffer(VgaText*)>:
c000ad2a:	55                   	push   ebp
c000ad2b:	89 e5                	mov    ebp,esp
c000ad2d:	83 ec 08             	sub    esp,0x8
c000ad30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad33:	05 02 01 00 00       	add    eax,0x102
c000ad38:	83 ec 0c             	sub    esp,0xc
c000ad3b:	50                   	push   eax
c000ad3c:	e8 3f 58 ff ff       	call   c0000580 <strlen>
c000ad41:	83 c4 10             	add    esp,0x10
c000ad44:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ad47:	81 c2 02 01 00 00    	add    edx,0x102
c000ad4d:	83 ec 04             	sub    esp,0x4
c000ad50:	50                   	push   eax
c000ad51:	6a 00                	push   0x0
c000ad53:	52                   	push   edx
c000ad54:	e8 97 57 ff ff       	call   c00004f0 <memset>
c000ad59:	83 c4 10             	add    esp,0x10
c000ad5c:	90                   	nop
c000ad5d:	c9                   	leave  
c000ad5e:	c3                   	ret    

c000ad5f <readKeyboard(VgaText*, char*, unsigned long)>:
c000ad5f:	55                   	push   ebp
c000ad60:	89 e5                	mov    ebp,esp
c000ad62:	83 ec 18             	sub    esp,0x18
c000ad65:	a1 88 26 03 c0       	mov    eax,ds:0xc0032688
c000ad6a:	85 c0                	test   eax,eax
c000ad6c:	74 2a                	je     c000ad98 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000ad6e:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000ad74:	8b 15 88 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032688
c000ad7a:	83 ec 04             	sub    esp,0x4
c000ad7d:	68 a0 26 03 c0       	push   0xc00326a0
c000ad82:	83 ec 08             	sub    esp,0x8
c000ad85:	89 e0                	mov    eax,esp
c000ad87:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000ad8a:	89 08                	mov    DWORD PTR [eax],ecx
c000ad8c:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000ad8f:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000ad93:	ff d2                	call   edx
c000ad95:	83 c4 10             	add    esp,0x10
c000ad98:	fb                   	sti    
c000ad99:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000ada0:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000ada4:	0f 84 08 01 00 00    	je     c000aeb2 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000adaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000adad:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000adb3:	0f be c0             	movsx  eax,al
c000adb6:	85 c0                	test   eax,eax
c000adb8:	75 27                	jne    c000ade1 <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000adba:	fa                   	cli    
c000adbb:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000adc0:	83 c0 01             	add    eax,0x1
c000adc3:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c000adc8:	e8 e3 c0 00 00       	call   c0016eb0 <schedule()>
c000adcd:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c000add5:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000adda:	85 c0                	test   eax,eax
c000addc:	75 cc                	jne    c000adaa <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000adde:	fb                   	sti    
c000addf:	eb c9                	jmp    c000adaa <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ade1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ade4:	8d 50 01             	lea    edx,[eax+0x1]
c000ade7:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000adea:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000aded:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000adf3:	88 10                	mov    BYTE PTR [eax],dl
c000adf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000adf8:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000adfe:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000ae01:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ae05:	83 f8 03             	cmp    eax,0x3
c000ae08:	75 1e                	jne    c000ae28 <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000ae0a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000ae0f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ae11:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ae14:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000ae1a:	83 ec 08             	sub    esp,0x8
c000ae1d:	6a 02                	push   0x2
c000ae1f:	50                   	push   eax
c000ae20:	e8 12 67 00 00       	call   c0011537 <KeRaiseSignal(SigHandlerBlock*, int)>
c000ae25:	83 c4 10             	add    esp,0x10
c000ae28:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ae2c:	83 f8 1c             	cmp    eax,0x1c
c000ae2f:	75 1e                	jne    c000ae4f <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000ae31:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000ae36:	8b 00                	mov    eax,DWORD PTR [eax]
c000ae38:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ae3b:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000ae41:	83 ec 08             	sub    esp,0x8
c000ae44:	6a 09                	push   0x9
c000ae46:	50                   	push   eax
c000ae47:	e8 eb 66 00 00       	call   c0011537 <KeRaiseSignal(SigHandlerBlock*, int)>
c000ae4c:	83 c4 10             	add    esp,0x10
c000ae4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae52:	05 02 01 00 00       	add    eax,0x102
c000ae57:	83 ec 0c             	sub    esp,0xc
c000ae5a:	50                   	push   eax
c000ae5b:	e8 20 57 ff ff       	call   c0000580 <strlen>
c000ae60:	83 c4 10             	add    esp,0x10
c000ae63:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ae66:	81 c2 02 01 00 00    	add    edx,0x102
c000ae6c:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ae6f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ae72:	81 c2 02 01 00 00    	add    edx,0x102
c000ae78:	83 ec 04             	sub    esp,0x4
c000ae7b:	50                   	push   eax
c000ae7c:	51                   	push   ecx
c000ae7d:	52                   	push   edx
c000ae7e:	e8 4d 55 ff ff       	call   c00003d0 <memmove>
c000ae83:	83 c4 10             	add    esp,0x10
c000ae86:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000ae8a:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000ae8e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ae92:	83 f8 0a             	cmp    eax,0xa
c000ae95:	74 16                	je     c000aead <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000ae97:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ae9b:	83 f8 03             	cmp    eax,0x3
c000ae9e:	74 0d                	je     c000aead <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000aea0:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000aea4:	83 f8 1c             	cmp    eax,0x1c
c000aea7:	0f 85 f3 fe ff ff    	jne    c000ada0 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000aead:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000aeb0:	eb 03                	jmp    c000aeb5 <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000aeb2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000aeb5:	c9                   	leave  
c000aeb6:	c3                   	ret    
c000aeb7:	90                   	nop

c000aeb8 <Keyboard::Keyboard(char const*)>:
c000aeb8:	83 ec 0c             	sub    esp,0xc
c000aebb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aebf:	83 ec 08             	sub    esp,0x8
c000aec2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aec6:	50                   	push   eax
c000aec7:	e8 d8 f4 ff ff       	call   c000a3a4 <Device::Device(char const*)>
c000aecc:	83 c4 10             	add    esp,0x10
c000aecf:	ba e0 92 02 c0       	mov    edx,0xc00292e0
c000aed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed8:	89 10                	mov    DWORD PTR [eax],edx
c000aeda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aede:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000aee8:	c6 05 84 26 03 c0 01 	mov    BYTE PTR ds:0xc0032684,0x1
c000aeef:	90                   	nop
c000aef0:	83 c4 0c             	add    esp,0xc
c000aef3:	c3                   	ret    

c000aef4 <Keyboard::~Keyboard()>:
c000aef4:	83 ec 0c             	sub    esp,0xc
c000aef7:	ba e0 92 02 c0       	mov    edx,0xc00292e0
c000aefc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af00:	89 10                	mov    DWORD PTR [eax],edx
c000af02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af06:	83 ec 0c             	sub    esp,0xc
c000af09:	50                   	push   eax
c000af0a:	e8 35 f2 ff ff       	call   c000a144 <Device::~Device()>
c000af0f:	83 c4 10             	add    esp,0x10
c000af12:	90                   	nop
c000af13:	83 c4 0c             	add    esp,0xc
c000af16:	c3                   	ret    
c000af17:	90                   	nop

c000af18 <Keyboard::~Keyboard()>:
c000af18:	83 ec 0c             	sub    esp,0xc
c000af1b:	83 ec 0c             	sub    esp,0xc
c000af1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af22:	e8 cd ff ff ff       	call   c000aef4 <Keyboard::~Keyboard()>
c000af27:	83 c4 10             	add    esp,0x10
c000af2a:	83 ec 08             	sub    esp,0x8
c000af2d:	68 5c 01 00 00       	push   0x15c
c000af32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af36:	e8 99 2b 00 00       	call   c000dad4 <operator delete(void*, unsigned long)>
c000af3b:	83 c4 10             	add    esp,0x10
c000af3e:	83 c4 0c             	add    esp,0xc
c000af41:	c3                   	ret    

c000af42 <LogicalDisk::close(int, int, void*)>:
c000af42:	83 c8 ff             	or     eax,0xffffffff
c000af45:	c3                   	ret    

c000af46 <LogicalDisk::~LogicalDisk()>:
c000af46:	83 ec 0c             	sub    esp,0xc
c000af49:	ba 58 93 02 c0       	mov    edx,0xc0029358
c000af4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af52:	89 10                	mov    DWORD PTR [eax],edx
c000af54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af58:	83 ec 0c             	sub    esp,0xc
c000af5b:	50                   	push   eax
c000af5c:	e8 e3 f1 ff ff       	call   c000a144 <Device::~Device()>
c000af61:	83 c4 10             	add    esp,0x10
c000af64:	90                   	nop
c000af65:	83 c4 0c             	add    esp,0xc
c000af68:	c3                   	ret    
c000af69:	90                   	nop

c000af6a <LogicalDisk::~LogicalDisk()>:
c000af6a:	83 ec 0c             	sub    esp,0xc
c000af6d:	83 ec 0c             	sub    esp,0xc
c000af70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af74:	e8 cd ff ff ff       	call   c000af46 <LogicalDisk::~LogicalDisk()>
c000af79:	83 c4 10             	add    esp,0x10
c000af7c:	83 ec 08             	sub    esp,0x8
c000af7f:	68 78 01 00 00       	push   0x178
c000af84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af88:	e8 47 2b 00 00       	call   c000dad4 <operator delete(void*, unsigned long)>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	83 c4 0c             	add    esp,0xc
c000af93:	c3                   	ret    

c000af94 <LogicalDisk::open(int, int, void*)>:
c000af94:	83 ec 18             	sub    esp,0x18
c000af97:	68 0c 93 02 c0       	push   0xc002930c
c000af9c:	e8 87 53 00 00       	call   c0010328 <KePanic(char const*)>
c000afa1:	83 c8 ff             	or     eax,0xffffffff
c000afa4:	83 c4 1c             	add    esp,0x1c
c000afa7:	c3                   	ret    

c000afa8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000afa8:	53                   	push   ebx
c000afa9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000afad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000afb1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000afb5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000afbb:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000afc1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000afc7:	77 10                	ja     c000afd9 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000afc9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000afcf:	89 d3                	mov    ebx,edx
c000afd1:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000afd7:	72 05                	jb     c000afde <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000afd9:	83 c8 ff             	or     eax,0xffffffff
c000afdc:	89 c2                	mov    edx,eax
c000afde:	5b                   	pop    ebx
c000afdf:	c3                   	ret    

c000afe0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000afe0:	56                   	push   esi
c000afe1:	83 c8 ff             	or     eax,0xffffffff
c000afe4:	53                   	push   ebx
c000afe5:	89 c2                	mov    edx,eax
c000afe7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000afeb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000afef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aff3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aff9:	77 27                	ja     c000b022 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000affb:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000b001:	89 d8                	mov    eax,ebx
c000b003:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000b009:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b00e:	89 c2                	mov    edx,eax
c000b010:	73 10                	jae    c000b022 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000b012:	89 c8                	mov    eax,ecx
c000b014:	89 da                	mov    edx,ebx
c000b016:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000b01c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000b022:	5b                   	pop    ebx
c000b023:	5e                   	pop    esi
c000b024:	c3                   	ret    
c000b025:	90                   	nop

c000b026 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000b026:	83 ec 1c             	sub    esp,0x1c
c000b029:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b02d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b031:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b035:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b039:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b03d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b040:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b044:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b048:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b04c:	83 ec 08             	sub    esp,0x8
c000b04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b053:	50                   	push   eax
c000b054:	e8 4b f3 ff ff       	call   c000a3a4 <Device::Device(char const*)>
c000b059:	83 c4 10             	add    esp,0x10
c000b05c:	ba 58 93 02 c0       	mov    edx,0xc0029358
c000b061:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b065:	89 10                	mov    DWORD PTR [eax],edx
c000b067:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b06b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000b072:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b076:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000b07d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b081:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000b088:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b08c:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000b096:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b09a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b09e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b0a2:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000b0a8:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000b0ae:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b0b2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b0b9:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000b0bf:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000b0c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b0c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b0cd:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000b0d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b0d7:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000b0e1:	90                   	nop
c000b0e2:	83 c4 1c             	add    esp,0x1c
c000b0e5:	c3                   	ret    

c000b0e6 <LogicalDisk::assignDriveLetter()>:
c000b0e6:	55                   	push   ebp
c000b0e7:	57                   	push   edi
c000b0e8:	56                   	push   esi
c000b0e9:	53                   	push   ebx
c000b0ea:	83 ec 14             	sub    esp,0x14
c000b0ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b0f1:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000b0f7:	b0 41                	mov    al,0x41
c000b0f9:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000b0ff:	84 d2                	test   dl,dl
c000b101:	75 02                	jne    c000b105 <LogicalDisk::assignDriveLetter()+0x1f>
c000b103:	b0 43                	mov    al,0x43
c000b105:	8b 3d c0 2a 03 c0    	mov    edi,DWORD PTR ds:0xc0032ac0
c000b10b:	0f b6 ca             	movzx  ecx,dl
c000b10e:	0f be e8             	movsx  ebp,al
c000b111:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b115:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000b119:	8b 3d c4 2a 03 c0    	mov    edi,DWORD PTR ds:0xc0032ac4
c000b11f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000b123:	3c 43                	cmp    al,0x43
c000b125:	75 10                	jne    c000b137 <LogicalDisk::assignDriveLetter()+0x51>
c000b127:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000b12e:	75 5a                	jne    c000b18a <LogicalDisk::assignDriveLetter()+0xa4>
c000b130:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b135:	75 53                	jne    c000b18a <LogicalDisk::assignDriveLetter()+0xa4>
c000b137:	8d 75 bf             	lea    esi,[ebp-0x41]
c000b13a:	ba 01 00 00 00       	mov    edx,0x1
c000b13f:	89 34 24             	mov    DWORD PTR [esp],esi
c000b142:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000b145:	d3 e2                	shl    edx,cl
c000b147:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b14b:	89 d7                	mov    edi,edx
c000b14d:	89 d6                	mov    esi,edx
c000b14f:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000b153:	c1 ff 1f             	sar    edi,0x1f
c000b156:	21 f9                	and    ecx,edi
c000b158:	09 d1                	or     ecx,edx
c000b15a:	75 2e                	jne    c000b18a <LogicalDisk::assignDriveLetter()+0xa4>
c000b15c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b160:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000b164:	09 f2                	or     edx,esi
c000b166:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000b169:	89 15 c0 2a 03 c0    	mov    DWORD PTR ds:0xc0032ac0,edx
c000b16f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b173:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000b179:	89 1c b5 e0 2a 03 c0 	mov    DWORD PTR [esi*4-0x3ffcd520],ebx
c000b180:	09 fa                	or     edx,edi
c000b182:	89 15 c4 2a 03 c0    	mov    DWORD PTR ds:0xc0032ac4,edx
c000b188:	eb 0d                	jmp    c000b197 <LogicalDisk::assignDriveLetter()+0xb1>
c000b18a:	8d 50 01             	lea    edx,[eax+0x1]
c000b18d:	45                   	inc    ebp
c000b18e:	80 fa 5b             	cmp    dl,0x5b
c000b191:	88 d0                	mov    al,dl
c000b193:	75 8e                	jne    c000b123 <LogicalDisk::assignDriveLetter()+0x3d>
c000b195:	31 c0                	xor    eax,eax
c000b197:	83 c4 14             	add    esp,0x14
c000b19a:	5b                   	pop    ebx
c000b19b:	5e                   	pop    esi
c000b19c:	5f                   	pop    edi
c000b19d:	5d                   	pop    ebp
c000b19e:	c3                   	ret    
c000b19f:	90                   	nop

c000b1a0 <LogicalDisk::mount()>:
c000b1a0:	56                   	push   esi
c000b1a1:	53                   	push   ebx
c000b1a2:	53                   	push   ebx
c000b1a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b1a7:	8b 1d 04 23 03 c0    	mov    ebx,DWORD PTR ds:0xc0032304
c000b1ad:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000b1b7:	85 db                	test   ebx,ebx
c000b1b9:	74 27                	je     c000b1e2 <LogicalDisk::mount()+0x42>
c000b1bb:	51                   	push   ecx
c000b1bc:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000b1c3:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b1c5:	83 e8 41             	sub    eax,0x41
c000b1c8:	50                   	push   eax
c000b1c9:	56                   	push   esi
c000b1ca:	53                   	push   ebx
c000b1cb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000b1ce:	83 c4 10             	add    esp,0x10
c000b1d1:	84 c0                	test   al,al
c000b1d3:	74 08                	je     c000b1dd <LogicalDisk::mount()+0x3d>
c000b1d5:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000b1db:	eb 07                	jmp    c000b1e4 <LogicalDisk::mount()+0x44>
c000b1dd:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000b1e0:	eb d5                	jmp    c000b1b7 <LogicalDisk::mount()+0x17>
c000b1e2:	31 c0                	xor    eax,eax
c000b1e4:	5a                   	pop    edx
c000b1e5:	5b                   	pop    ebx
c000b1e6:	5e                   	pop    esi
c000b1e7:	c3                   	ret    

c000b1e8 <LogicalDisk::unmount()>:
c000b1e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1ec:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000b1f6:	c3                   	ret    
c000b1f7:	90                   	nop

c000b1f8 <LogicalDisk::eject()>:
c000b1f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1fc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000b202:	8b 10                	mov    edx,DWORD PTR [eax]
c000b204:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b208:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000b20b:	90                   	nop

c000b20c <LogicalDisk::unassignDriveLetter()>:
c000b20c:	57                   	push   edi
c000b20d:	56                   	push   esi
c000b20e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b212:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000b219:	85 c9                	test   ecx,ecx
c000b21b:	75 0f                	jne    c000b22c <LogicalDisk::unassignDriveLetter()+0x20>
c000b21d:	c7 44 24 0c 30 93 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029330
c000b225:	5e                   	pop    esi
c000b226:	5f                   	pop    edi
c000b227:	e9 fc 50 00 00       	jmp    c0010328 <KePanic(char const*)>
c000b22c:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000b233:	83 e9 41             	sub    ecx,0x41
c000b236:	b8 01 00 00 00       	mov    eax,0x1
c000b23b:	c7 04 8d e0 2a 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffcd520],0x0
c000b246:	d3 e0                	shl    eax,cl
c000b248:	89 c7                	mov    edi,eax
c000b24a:	f7 d0                	not    eax
c000b24c:	c1 ff 1f             	sar    edi,0x1f
c000b24f:	21 05 c0 2a 03 c0    	and    DWORD PTR ds:0xc0032ac0,eax
c000b255:	89 fe                	mov    esi,edi
c000b257:	f7 d6                	not    esi
c000b259:	21 35 c4 2a 03 c0    	and    DWORD PTR ds:0xc0032ac4,esi
c000b25f:	5e                   	pop    esi
c000b260:	5f                   	pop    edi
c000b261:	c3                   	ret    

c000b262 <LogicalDisk::read(unsigned long long, int, void*)>:
c000b262:	57                   	push   edi
c000b263:	56                   	push   esi
c000b264:	53                   	push   ebx
c000b265:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b269:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b26d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b271:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b275:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000b27b:	77 41                	ja     c000b2be <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000b27d:	99                   	cdq    
c000b27e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000b284:	01 c8                	add    eax,ecx
c000b286:	11 da                	adc    edx,ebx
c000b288:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000b28e:	19 d7                	sbb    edi,edx
c000b290:	72 33                	jb     c000b2c5 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000b292:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000b298:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000b29e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b2a2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000b2a6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000b2ac:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b2b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b2b6:	5b                   	pop    ebx
c000b2b7:	5e                   	pop    esi
c000b2b8:	5f                   	pop    edi
c000b2b9:	e9 bc 0b 00 00       	jmp    c000be7a <VCache::read(unsigned long long, int, void*)>
c000b2be:	b8 05 00 00 00       	mov    eax,0x5
c000b2c3:	eb 05                	jmp    c000b2ca <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000b2c5:	b8 07 00 00 00       	mov    eax,0x7
c000b2ca:	5b                   	pop    ebx
c000b2cb:	5e                   	pop    esi
c000b2cc:	5f                   	pop    edi
c000b2cd:	c3                   	ret    

c000b2ce <LogicalDisk::write(unsigned long long, int, void*)>:
c000b2ce:	57                   	push   edi
c000b2cf:	56                   	push   esi
c000b2d0:	53                   	push   ebx
c000b2d1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b2d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b2d9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b2dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b2e1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000b2e7:	77 41                	ja     c000b32a <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000b2e9:	99                   	cdq    
c000b2ea:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000b2f0:	01 c8                	add    eax,ecx
c000b2f2:	11 da                	adc    edx,ebx
c000b2f4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000b2fa:	19 d7                	sbb    edi,edx
c000b2fc:	72 33                	jb     c000b331 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000b2fe:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000b304:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000b30a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b30e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000b312:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000b318:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b31e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b322:	5b                   	pop    ebx
c000b323:	5e                   	pop    esi
c000b324:	5f                   	pop    edi
c000b325:	e9 82 09 00 00       	jmp    c000bcac <VCache::write(unsigned long long, int, void*)>
c000b32a:	b8 05 00 00 00       	mov    eax,0x5
c000b32f:	eb 05                	jmp    c000b336 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000b331:	b8 07 00 00 00       	mov    eax,0x7
c000b336:	5b                   	pop    ebx
c000b337:	5e                   	pop    esi
c000b338:	5f                   	pop    edi
c000b339:	c3                   	ret    
c000b33a:	66 90                	xchg   ax,ax

c000b33c <Mouse::Mouse(char const*)>:
c000b33c:	83 ec 0c             	sub    esp,0xc
c000b33f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b343:	83 ec 08             	sub    esp,0x8
c000b346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b34a:	50                   	push   eax
c000b34b:	e8 54 f0 ff ff       	call   c000a3a4 <Device::Device(char const*)>
c000b350:	83 c4 10             	add    esp,0x10
c000b353:	ba 84 93 02 c0       	mov    edx,0xc0029384
c000b358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b35c:	89 10                	mov    DWORD PTR [eax],edx
c000b35e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b362:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000b36c:	90                   	nop
c000b36d:	83 c4 0c             	add    esp,0xc
c000b370:	c3                   	ret    
c000b371:	90                   	nop
c000b372:	66 90                	xchg   ax,ax

c000b374 <Mouse::~Mouse()>:
c000b374:	83 ec 0c             	sub    esp,0xc
c000b377:	ba 84 93 02 c0       	mov    edx,0xc0029384
c000b37c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b380:	89 10                	mov    DWORD PTR [eax],edx
c000b382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b386:	83 ec 0c             	sub    esp,0xc
c000b389:	50                   	push   eax
c000b38a:	e8 b5 ed ff ff       	call   c000a144 <Device::~Device()>
c000b38f:	83 c4 10             	add    esp,0x10
c000b392:	90                   	nop
c000b393:	83 c4 0c             	add    esp,0xc
c000b396:	c3                   	ret    
c000b397:	90                   	nop

c000b398 <Mouse::~Mouse()>:
c000b398:	83 ec 0c             	sub    esp,0xc
c000b39b:	83 ec 0c             	sub    esp,0xc
c000b39e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3a2:	e8 cd ff ff ff       	call   c000b374 <Mouse::~Mouse()>
c000b3a7:	83 c4 10             	add    esp,0x10
c000b3aa:	83 ec 08             	sub    esp,0x8
c000b3ad:	68 58 01 00 00       	push   0x158
c000b3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b6:	e8 19 27 00 00       	call   c000dad4 <operator delete(void*, unsigned long)>
c000b3bb:	83 c4 10             	add    esp,0x10
c000b3be:	83 c4 0c             	add    esp,0xc
c000b3c1:	c3                   	ret    

c000b3c2 <NIC::getMAC()>:
c000b3c2:	31 c0                	xor    eax,eax
c000b3c4:	31 d2                	xor    edx,edx
c000b3c6:	c3                   	ret    
c000b3c7:	90                   	nop

c000b3c8 <NIC::write(int, unsigned char*, int*)>:
c000b3c8:	b8 01 00 00 00       	mov    eax,0x1
c000b3cd:	c3                   	ret    

c000b3ce <NIC::NIC(char const*)>:
c000b3ce:	83 ec 0c             	sub    esp,0xc
c000b3d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3d5:	83 ec 08             	sub    esp,0x8
c000b3d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3dc:	50                   	push   eax
c000b3dd:	e8 c2 ef ff ff       	call   c000a3a4 <Device::Device(char const*)>
c000b3e2:	83 c4 10             	add    esp,0x10
c000b3e5:	ba b0 93 02 c0       	mov    edx,0xc00293b0
c000b3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ee:	89 10                	mov    DWORD PTR [eax],edx
c000b3f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3f4:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000b3fe:	90                   	nop
c000b3ff:	83 c4 0c             	add    esp,0xc
c000b402:	c3                   	ret    
c000b403:	90                   	nop

c000b404 <NIC::~NIC()>:
c000b404:	83 ec 0c             	sub    esp,0xc
c000b407:	ba b0 93 02 c0       	mov    edx,0xc00293b0
c000b40c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b410:	89 10                	mov    DWORD PTR [eax],edx
c000b412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b416:	83 ec 0c             	sub    esp,0xc
c000b419:	50                   	push   eax
c000b41a:	e8 25 ed ff ff       	call   c000a144 <Device::~Device()>
c000b41f:	83 c4 10             	add    esp,0x10
c000b422:	90                   	nop
c000b423:	83 c4 0c             	add    esp,0xc
c000b426:	c3                   	ret    
c000b427:	90                   	nop

c000b428 <NIC::~NIC()>:
c000b428:	83 ec 0c             	sub    esp,0xc
c000b42b:	83 ec 0c             	sub    esp,0xc
c000b42e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b432:	e8 cd ff ff ff       	call   c000b404 <NIC::~NIC()>
c000b437:	83 c4 10             	add    esp,0x10
c000b43a:	83 ec 08             	sub    esp,0x8
c000b43d:	68 58 01 00 00       	push   0x158
c000b442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b446:	e8 89 26 00 00       	call   c000dad4 <operator delete(void*, unsigned long)>
c000b44b:	83 c4 10             	add    esp,0x10
c000b44e:	83 c4 0c             	add    esp,0xc
c000b451:	c3                   	ret    

c000b452 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000b452:	55                   	push   ebp
c000b453:	57                   	push   edi
c000b454:	56                   	push   esi
c000b455:	53                   	push   ebx
c000b456:	81 ec 28 01 00 00    	sub    esp,0x128
c000b45c:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000b463:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000b46a:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000b471:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000b478:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b47c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b480:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000b487:	e8 14 f0 ff ff       	call   c000a4a0 <Device::getName()>
c000b48c:	5a                   	pop    edx
c000b48d:	59                   	pop    ecx
c000b48e:	50                   	push   eax
c000b48f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000b493:	55                   	push   ebp
c000b494:	e8 b7 51 ff ff       	call   c0000650 <strcpy>
c000b499:	5b                   	pop    ebx
c000b49a:	58                   	pop    eax
c000b49b:	68 dc 93 02 c0       	push   0xc00293dc
c000b4a0:	55                   	push   ebp
c000b4a1:	e8 ca 53 ff ff       	call   c0000870 <strcat>
c000b4a6:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000b4ad:	e8 22 4a 00 00       	call   c000fed4 <malloc>
c000b4b2:	83 c4 0c             	add    esp,0xc
c000b4b5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b4b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b4bd:	89 c3                	mov    ebx,eax
c000b4bf:	57                   	push   edi
c000b4c0:	56                   	push   esi
c000b4c1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000b4c8:	55                   	push   ebp
c000b4c9:	50                   	push   eax
c000b4ca:	e8 57 fb ff ff       	call   c000b026 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000b4cf:	83 c4 14             	add    esp,0x14
c000b4d2:	53                   	push   ebx
c000b4d3:	e8 0e fc ff ff       	call   c000b0e6 <LogicalDisk::assignDriveLetter()>
c000b4d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b4db:	e8 c0 fc ff ff       	call   c000b1a0 <LogicalDisk::mount()>
c000b4e0:	58                   	pop    eax
c000b4e1:	5a                   	pop    edx
c000b4e2:	53                   	push   ebx
c000b4e3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000b4ea:	e8 53 ed ff ff       	call   c000a242 <Device::addChild(Device*)>
c000b4ef:	81 c4 2c 01 00 00    	add    esp,0x12c
c000b4f5:	5b                   	pop    ebx
c000b4f6:	5e                   	pop    esi
c000b4f7:	5f                   	pop    edi
c000b4f8:	5d                   	pop    ebp
c000b4f9:	c3                   	ret    

c000b4fa <createPartitionsForDisk(PhysicalDisk*)>:
c000b4fa:	55                   	push   ebp
c000b4fb:	57                   	push   edi
c000b4fc:	56                   	push   esi
c000b4fd:	53                   	push   ebx
c000b4fe:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000b504:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000b50b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000b511:	3d 00 02 00 00       	cmp    eax,0x200
c000b516:	74 27                	je     c000b53f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000b518:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000b51e:	83 ec 10             	sub    esp,0x10
c000b521:	99                   	cdq    
c000b522:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000b528:	52                   	push   edx
c000b529:	50                   	push   eax
c000b52a:	0f a4 f7 0a          	shld   edi,esi,0xa
c000b52e:	c1 e6 0a             	shl    esi,0xa
c000b531:	89 fd                	mov    ebp,edi
c000b533:	55                   	push   ebp
c000b534:	56                   	push   esi
c000b535:	e8 6a 77 01 00       	call   c0022ca4 <__udivdi3>
c000b53a:	e9 b9 00 00 00       	jmp    c000b5f8 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000b53f:	83 ec 0c             	sub    esp,0xc
c000b542:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b544:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000b548:	56                   	push   esi
c000b549:	6a 01                	push   0x1
c000b54b:	6a 00                	push   0x0
c000b54d:	6a 00                	push   0x0
c000b54f:	53                   	push   ebx
c000b550:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b553:	83 c4 20             	add    esp,0x20
c000b556:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000b55e:	75 0a                	jne    c000b56a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000b560:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000b568:	74 2c                	je     c000b596 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000b56a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000b570:	83 ec 10             	sub    esp,0x10
c000b573:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b579:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000b57f:	89 f7                	mov    edi,esi
c000b581:	c1 ff 1f             	sar    edi,0x1f
c000b584:	57                   	push   edi
c000b585:	0f a4 c2 0a          	shld   edx,eax,0xa
c000b589:	56                   	push   esi
c000b58a:	c1 e0 0a             	shl    eax,0xa
c000b58d:	52                   	push   edx
c000b58e:	50                   	push   eax
c000b58f:	e8 10 77 01 00       	call   c0022ca4 <__udivdi3>
c000b594:	eb 62                	jmp    c000b5f8 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000b596:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000b59d:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000b5a4:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000b5ab:	89 cf                	mov    edi,ecx
c000b5ad:	83 e2 7f             	and    edx,0x7f
c000b5b0:	83 e7 7f             	and    edi,0x7f
c000b5b3:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000b5b6:	83 e0 7f             	and    eax,0x7f
c000b5b9:	8d 14 01             	lea    edx,[ecx+eax*1]
c000b5bc:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000b5c3:	83 e0 7f             	and    eax,0x7f
c000b5c6:	01 d0                	add    eax,edx
c000b5c8:	84 c0                	test   al,al
c000b5ca:	89 c5                	mov    ebp,eax
c000b5cc:	74 41                	je     c000b60f <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000b5ce:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000b5d4:	83 ec 10             	sub    esp,0x10
c000b5d7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b5dd:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000b5e3:	89 f7                	mov    edi,esi
c000b5e5:	c1 ff 1f             	sar    edi,0x1f
c000b5e8:	57                   	push   edi
c000b5e9:	0f a4 c2 0a          	shld   edx,eax,0xa
c000b5ed:	56                   	push   esi
c000b5ee:	c1 e0 0a             	shl    eax,0xa
c000b5f1:	52                   	push   edx
c000b5f2:	50                   	push   eax
c000b5f3:	e8 ac 76 01 00       	call   c0022ca4 <__udivdi3>
c000b5f8:	83 c4 14             	add    esp,0x14
c000b5fb:	52                   	push   edx
c000b5fc:	50                   	push   eax
c000b5fd:	6a 00                	push   0x0
c000b5ff:	6a 00                	push   0x0
c000b601:	53                   	push   ebx
c000b602:	e8 4b fe ff ff       	call   c000b452 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000b607:	83 c4 20             	add    esp,0x20
c000b60a:	e9 73 01 00 00       	jmp    c000b782 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000b60f:	89 f0                	mov    eax,esi
c000b611:	31 c9                	xor    ecx,ecx
c000b613:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000b61a:	75 02                	jne    c000b61e <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000b61c:	89 cd                	mov    ebp,ecx
c000b61e:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000b626:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000b62d:	83 c0 10             	add    eax,0x10
c000b630:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000b638:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000b63f:	c1 e2 08             	shl    edx,0x8
c000b642:	c1 e6 10             	shl    esi,0x10
c000b645:	09 f2                	or     edx,esi
c000b647:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000b64e:	09 f2                	or     edx,esi
c000b650:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000b657:	c1 e6 18             	shl    esi,0x18
c000b65a:	09 f2                	or     edx,esi
c000b65c:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000b663:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000b667:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000b66e:	c1 e6 10             	shl    esi,0x10
c000b671:	c1 e2 08             	shl    edx,0x8
c000b674:	09 f2                	or     edx,esi
c000b676:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000b67d:	09 f2                	or     edx,esi
c000b67f:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000b686:	c1 e6 18             	shl    esi,0x18
c000b689:	09 f2                	or     edx,esi
c000b68b:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000b68f:	41                   	inc    ecx
c000b690:	83 f9 04             	cmp    ecx,0x4
c000b693:	0f 85 7a ff ff ff    	jne    c000b613 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000b699:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b69d:	83 f0 01             	xor    eax,0x1
c000b6a0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000b6a4:	75 4f                	jne    c000b6f5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000b6a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6aa:	83 f0 01             	xor    eax,0x1
c000b6ad:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000b6b1:	75 42                	jne    c000b6f5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000b6b3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000b6b9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000b6c1:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b6c7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b6cf:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000b6d5:	89 f7                	mov    edi,esi
c000b6d7:	c1 ff 1f             	sar    edi,0x1f
c000b6da:	57                   	push   edi
c000b6db:	56                   	push   esi
c000b6dc:	0f a4 c2 0a          	shld   edx,eax,0xa
c000b6e0:	52                   	push   edx
c000b6e1:	c1 e0 0a             	shl    eax,0xa
c000b6e4:	50                   	push   eax
c000b6e5:	e8 ba 75 01 00       	call   c0022ca4 <__udivdi3>
c000b6ea:	83 c4 10             	add    esp,0x10
c000b6ed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b6f1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000b6f5:	89 e8                	mov    eax,ebp
c000b6f7:	0f b6 e8             	movzx  ebp,al
c000b6fa:	85 ed                	test   ebp,ebp
c000b6fc:	74 50                	je     c000b74e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000b6fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b702:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b706:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b70a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000b70e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b712:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000b716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b71a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000b71e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b722:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b726:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b72a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b72e:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000b732:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000b736:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000b73a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000b73e:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000b742:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000b746:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000b74a:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000b74e:	31 ed                	xor    ebp,ebp
c000b750:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000b754:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000b758:	89 f8                	mov    eax,edi
c000b75a:	09 f0                	or     eax,esi
c000b75c:	74 1e                	je     c000b77c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000b75e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000b762:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000b766:	89 d1                	mov    ecx,edx
c000b768:	09 c1                	or     ecx,eax
c000b76a:	74 10                	je     c000b77c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000b76c:	83 ec 0c             	sub    esp,0xc
c000b76f:	57                   	push   edi
c000b770:	56                   	push   esi
c000b771:	52                   	push   edx
c000b772:	50                   	push   eax
c000b773:	53                   	push   ebx
c000b774:	e8 d9 fc ff ff       	call   c000b452 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000b779:	83 c4 20             	add    esp,0x20
c000b77c:	45                   	inc    ebp
c000b77d:	83 fd 04             	cmp    ebp,0x4
c000b780:	75 ce                	jne    c000b750 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000b782:	81 c4 5c 02 00 00    	add    esp,0x25c
c000b788:	5b                   	pop    ebx
c000b789:	5e                   	pop    esi
c000b78a:	5f                   	pop    edi
c000b78b:	5d                   	pop    ebp
c000b78c:	c3                   	ret    
c000b78d:	66 90                	xchg   ax,ax
c000b78f:	90                   	nop

c000b790 <Serial::Serial(char const*)>:
c000b790:	83 ec 0c             	sub    esp,0xc
c000b793:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b797:	83 ec 08             	sub    esp,0x8
c000b79a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79e:	50                   	push   eax
c000b79f:	e8 00 ec ff ff       	call   c000a3a4 <Device::Device(char const*)>
c000b7a4:	83 c4 10             	add    esp,0x10
c000b7a7:	ba f0 93 02 c0       	mov    edx,0xc00293f0
c000b7ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7b0:	89 10                	mov    DWORD PTR [eax],edx
c000b7b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7b6:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000b7c0:	90                   	nop
c000b7c1:	83 c4 0c             	add    esp,0xc
c000b7c4:	c3                   	ret    
c000b7c5:	90                   	nop
c000b7c6:	66 90                	xchg   ax,ax

c000b7c8 <Serial::~Serial()>:
c000b7c8:	83 ec 0c             	sub    esp,0xc
c000b7cb:	ba f0 93 02 c0       	mov    edx,0xc00293f0
c000b7d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7d4:	89 10                	mov    DWORD PTR [eax],edx
c000b7d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7da:	83 ec 0c             	sub    esp,0xc
c000b7dd:	50                   	push   eax
c000b7de:	e8 61 e9 ff ff       	call   c000a144 <Device::~Device()>
c000b7e3:	83 c4 10             	add    esp,0x10
c000b7e6:	90                   	nop
c000b7e7:	83 c4 0c             	add    esp,0xc
c000b7ea:	c3                   	ret    
c000b7eb:	90                   	nop

c000b7ec <Serial::~Serial()>:
c000b7ec:	83 ec 0c             	sub    esp,0xc
c000b7ef:	83 ec 0c             	sub    esp,0xc
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	e8 cd ff ff ff       	call   c000b7c8 <Serial::~Serial()>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	83 ec 08             	sub    esp,0x8
c000b801:	68 58 01 00 00       	push   0x158
c000b806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b80a:	e8 c5 22 00 00       	call   c000dad4 <operator delete(void*, unsigned long)>
c000b80f:	83 c4 10             	add    esp,0x10
c000b812:	83 c4 0c             	add    esp,0xc
c000b815:	c3                   	ret    
c000b816:	66 90                	xchg   ax,ax

c000b818 <Timer::Timer(char const*)>:
c000b818:	83 ec 0c             	sub    esp,0xc
c000b81b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b81f:	83 ec 08             	sub    esp,0x8
c000b822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b826:	50                   	push   eax
c000b827:	e8 78 eb ff ff       	call   c000a3a4 <Device::Device(char const*)>
c000b82c:	83 c4 10             	add    esp,0x10
c000b82f:	ba d0 94 02 c0       	mov    edx,0xc00294d0
c000b834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b838:	89 10                	mov    DWORD PTR [eax],edx
c000b83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b83e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000b848:	90                   	nop
c000b849:	83 c4 0c             	add    esp,0xc
c000b84c:	c3                   	ret    
c000b84d:	90                   	nop
c000b84e:	66 90                	xchg   ax,ax

c000b850 <Timer::~Timer()>:
c000b850:	83 ec 0c             	sub    esp,0xc
c000b853:	ba d0 94 02 c0       	mov    edx,0xc00294d0
c000b858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b85c:	89 10                	mov    DWORD PTR [eax],edx
c000b85e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b862:	83 ec 0c             	sub    esp,0xc
c000b865:	50                   	push   eax
c000b866:	e8 d9 e8 ff ff       	call   c000a144 <Device::~Device()>
c000b86b:	83 c4 10             	add    esp,0x10
c000b86e:	90                   	nop
c000b86f:	83 c4 0c             	add    esp,0xc
c000b872:	c3                   	ret    
c000b873:	90                   	nop

c000b874 <Timer::~Timer()>:
c000b874:	83 ec 0c             	sub    esp,0xc
c000b877:	83 ec 0c             	sub    esp,0xc
c000b87a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87e:	e8 cd ff ff ff       	call   c000b850 <Timer::~Timer()>
c000b883:	83 c4 10             	add    esp,0x10
c000b886:	83 ec 08             	sub    esp,0x8
c000b889:	68 5c 01 00 00       	push   0x15c
c000b88e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b892:	e8 3d 22 00 00       	call   c000dad4 <operator delete(void*, unsigned long)>
c000b897:	83 c4 10             	add    esp,0x10
c000b89a:	83 c4 0c             	add    esp,0xc
c000b89d:	c3                   	ret    

c000b89e <Timer::read()>:
c000b89e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8a2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b8a8:	c3                   	ret    

c000b8a9 <setupTimer(int)>:
c000b8a9:	53                   	push   ebx
c000b8aa:	83 ec 14             	sub    esp,0x14
c000b8ad:	68 5c 01 00 00       	push   0x15c
c000b8b2:	e8 1d 46 00 00       	call   c000fed4 <malloc>
c000b8b7:	89 04 24             	mov    DWORD PTR [esp],eax
c000b8ba:	89 c3                	mov    ebx,eax
c000b8bc:	e8 97 6c 01 00       	call   c0022558 <PIT::PIT()>
c000b8c1:	58                   	pop    eax
c000b8c2:	5a                   	pop    edx
c000b8c3:	53                   	push   ebx
c000b8c4:	ff 35 08 31 03 c0    	push   DWORD PTR ds:0xc0033108
c000b8ca:	e8 73 e9 ff ff       	call   c000a242 <Device::addChild(Device*)>
c000b8cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b8d1:	6a 00                	push   0x0
c000b8d3:	6a 00                	push   0x0
c000b8d5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b8d9:	53                   	push   ebx
c000b8da:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b8dd:	83 c4 28             	add    esp,0x28
c000b8e0:	89 d8                	mov    eax,ebx
c000b8e2:	5b                   	pop    ebx
c000b8e3:	c3                   	ret    

c000b8e4 <timerHandler(unsigned int)>:
c000b8e4:	57                   	push   edi
c000b8e5:	31 d2                	xor    edx,edx
c000b8e7:	56                   	push   esi
c000b8e8:	53                   	push   ebx
c000b8e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b8ed:	01 1d 50 2b 03 c0    	add    DWORD PTR ds:0xc0032b50,ebx
c000b8f3:	11 15 54 2b 03 c0    	adc    DWORD PTR ds:0xc0032b54,edx
c000b8f9:	80 3d 0d 31 03 c0 00 	cmp    BYTE PTR ds:0xc003310d,0x0
c000b900:	75 12                	jne    c000b914 <timerHandler(unsigned int)+0x30>
c000b902:	c7 44 24 10 7f 94 02 c0 	mov    DWORD PTR [esp+0x10],0xc002947f
c000b90a:	5b                   	pop    ebx
c000b90b:	5e                   	pop    esi
c000b90c:	5f                   	pop    edi
c000b90d:	e9 54 b6 ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>
c000b912:	66 90                	xchg   ax,ax
c000b914:	fa                   	cli    
c000b915:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c000b91b:	83 ec 0c             	sub    esp,0xc
c000b91e:	68 40 33 03 c0       	push   0xc0033340
c000b923:	e8 3c be 01 00       	call   c0027764 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b928:	83 c4 10             	add    esp,0x10
c000b92b:	84 c0                	test   al,al
c000b92d:	0f 85 a9 00 00 00    	jne    c000b9dc <timerHandler(unsigned int)+0xf8>
c000b933:	83 ec 0c             	sub    esp,0xc
c000b936:	68 40 33 03 c0       	push   0xc0033340
c000b93b:	e8 40 be 01 00       	call   c0027780 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b940:	83 c4 10             	add    esp,0x10
c000b943:	89 c6                	mov    esi,eax
c000b945:	8d 76 00             	lea    esi,[esi+0x0]
c000b948:	83 ec 0c             	sub    esp,0xc
c000b94b:	68 40 33 03 c0       	push   0xc0033340
c000b950:	e8 2b be 01 00       	call   c0027780 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b955:	c7 04 24 40 33 03 c0 	mov    DWORD PTR [esp],0xc0033340
c000b95c:	89 c7                	mov    edi,eax
c000b95e:	e8 25 be 01 00       	call   c0027788 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000b963:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c000b966:	83 c4 10             	add    esp,0x10
c000b969:	8b 4f 30             	mov    ecx,DWORD PTR [edi+0x30]
c000b96c:	a1 54 2b 03 c0       	mov    eax,ds:0xc0032b54
c000b971:	39 15 50 2b 03 c0    	cmp    DWORD PTR ds:0xc0032b50,edx
c000b977:	19 c8                	sbb    eax,ecx
c000b979:	72 21                	jb     c000b99c <timerHandler(unsigned int)+0xb8>
c000b97b:	83 ec 0c             	sub    esp,0xc
c000b97e:	57                   	push   edi
c000b97f:	e8 84 b8 00 00       	call   c0017208 <unblockTask(ThreadControlBlock*)>
c000b984:	83 c4 10             	add    esp,0x10
c000b987:	39 fe                	cmp    esi,edi
c000b989:	75 25                	jne    c000b9b0 <timerHandler(unsigned int)+0xcc>
c000b98b:	83 ec 0c             	sub    esp,0xc
c000b98e:	68 40 33 03 c0       	push   0xc0033340
c000b993:	e8 e8 bd 01 00       	call   c0027780 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b998:	89 c6                	mov    esi,eax
c000b99a:	eb 10                	jmp    c000b9ac <timerHandler(unsigned int)+0xc8>
c000b99c:	51                   	push   ecx
c000b99d:	51                   	push   ecx
c000b99e:	57                   	push   edi
c000b99f:	68 40 33 03 c0       	push   0xc0033340
c000b9a4:	e8 9b be 01 00       	call   c0027844 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000b9a9:	8d 76 00             	lea    esi,[esi+0x0]
c000b9ac:	83 c4 10             	add    esp,0x10
c000b9af:	90                   	nop
c000b9b0:	83 ec 0c             	sub    esp,0xc
c000b9b3:	68 40 33 03 c0       	push   0xc0033340
c000b9b8:	e8 a7 bd 01 00       	call   c0027764 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b9bd:	83 c4 10             	add    esp,0x10
c000b9c0:	84 c0                	test   al,al
c000b9c2:	75 18                	jne    c000b9dc <timerHandler(unsigned int)+0xf8>
c000b9c4:	83 ec 0c             	sub    esp,0xc
c000b9c7:	68 40 33 03 c0       	push   0xc0033340
c000b9cc:	e8 af bd 01 00       	call   c0027780 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b9d1:	83 c4 10             	add    esp,0x10
c000b9d4:	39 f0                	cmp    eax,esi
c000b9d6:	0f 85 6c ff ff ff    	jne    c000b948 <timerHandler(unsigned int)+0x64>
c000b9dc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b9e2:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b9e5:	85 c0                	test   eax,eax
c000b9e7:	74 5f                	je     c000ba48 <timerHandler(unsigned int)+0x164>
c000b9e9:	80 3d 0c 31 03 c0 00 	cmp    BYTE PTR ds:0xc003310c,0x0
c000b9f0:	74 56                	je     c000ba48 <timerHandler(unsigned int)+0x164>
c000b9f2:	3d e8 03 00 00       	cmp    eax,0x3e8
c000b9f7:	76 23                	jbe    c000ba1c <timerHandler(unsigned int)+0x138>
c000b9f9:	80 7a 62 00          	cmp    BYTE PTR [edx+0x62],0x0
c000b9fd:	75 11                	jne    c000ba10 <timerHandler(unsigned int)+0x12c>
c000b9ff:	52                   	push   edx
c000ba00:	52                   	push   edx
c000ba01:	50                   	push   eax
c000ba02:	68 95 94 02 c0       	push   0xc0029495
c000ba07:	e8 5a b5 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000ba0c:	83 c4 10             	add    esp,0x10
c000ba0f:	90                   	nop
c000ba10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ba15:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000ba1c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000ba22:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000ba25:	39 d8                	cmp    eax,ebx
c000ba27:	73 0b                	jae    c000ba34 <timerHandler(unsigned int)+0x150>
c000ba29:	c7 42 38 00 00 00 00 	mov    DWORD PTR [edx+0x38],0x0
c000ba30:	eb 0e                	jmp    c000ba40 <timerHandler(unsigned int)+0x15c>
c000ba32:	66 90                	xchg   ax,ax
c000ba34:	89 c1                	mov    ecx,eax
c000ba36:	29 d9                	sub    ecx,ebx
c000ba38:	39 d8                	cmp    eax,ebx
c000ba3a:	89 4a 38             	mov    DWORD PTR [edx+0x38],ecx
c000ba3d:	75 09                	jne    c000ba48 <timerHandler(unsigned int)+0x164>
c000ba3f:	90                   	nop
c000ba40:	e8 6b b4 00 00       	call   c0016eb0 <schedule()>
c000ba45:	8d 76 00             	lea    esi,[esi+0x0]
c000ba48:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c000ba4f:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c000ba56:	75 04                	jne    c000ba5c <timerHandler(unsigned int)+0x178>
c000ba58:	fb                   	sti    
c000ba59:	8d 76 00             	lea    esi,[esi+0x0]
c000ba5c:	5b                   	pop    ebx
c000ba5d:	5e                   	pop    esi
c000ba5e:	5f                   	pop    edi
c000ba5f:	c3                   	ret    

c000ba60 <VCache::VCache(PhysicalDisk*)>:
c000ba60:	53                   	push   ebx
c000ba61:	83 ec 18             	sub    esp,0x18
c000ba64:	ba 40 95 02 c0       	mov    edx,0xc0029540
c000ba69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba6d:	89 10                	mov    DWORD PTR [eax],edx
c000ba6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba73:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000ba7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba7e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000ba85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba89:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000ba90:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000ba97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba9b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000baa2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000baa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baad:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000bab4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bab8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000babc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bac0:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000bac7:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000bace:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bad2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000bad6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bada:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000bade:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bae2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000bae6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baea:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000baf1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000baf9:	83 ec 0c             	sub    esp,0xc
c000bafc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb00:	e8 cf 43 00 00       	call   c000fed4 <malloc>
c000bb05:	83 c4 10             	add    esp,0x10
c000bb08:	89 c3                	mov    ebx,eax
c000bb0a:	83 ec 0c             	sub    esp,0xc
c000bb0d:	53                   	push   ebx
c000bb0e:	e8 f5 47 00 00       	call   c0010308 <Mutex::Mutex()>
c000bb13:	83 c4 10             	add    esp,0x10
c000bb16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb1a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000bb1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb21:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bb25:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000bb28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb2c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000bb33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bb37:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000bb3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb41:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000bb44:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bb48:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000bb4e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bb54:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000bb58:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000bb5b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000bb5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb62:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000bb66:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bb6a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000bb70:	05 00 01 00 00       	add    eax,0x100
c000bb75:	c1 e0 04             	shl    eax,0x4
c000bb78:	83 ec 0c             	sub    esp,0xc
c000bb7b:	50                   	push   eax
c000bb7c:	e8 53 43 00 00       	call   c000fed4 <malloc>
c000bb81:	83 c4 10             	add    esp,0x10
c000bb84:	89 c2                	mov    edx,eax
c000bb86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb8a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000bb8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb91:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000bb98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb9c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000bba0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bba4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000bbaa:	89 d0                	mov    eax,edx
c000bbac:	c1 e0 02             	shl    eax,0x2
c000bbaf:	01 d0                	add    eax,edx
c000bbb1:	c1 e0 04             	shl    eax,0x4
c000bbb4:	83 ec 0c             	sub    esp,0xc
c000bbb7:	50                   	push   eax
c000bbb8:	e8 17 43 00 00       	call   c000fed4 <malloc>
c000bbbd:	83 c4 10             	add    esp,0x10
c000bbc0:	89 c2                	mov    edx,eax
c000bbc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbc6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000bbc9:	90                   	nop
c000bbca:	83 c4 18             	add    esp,0x18
c000bbcd:	5b                   	pop    ebx
c000bbce:	c3                   	ret    
c000bbcf:	90                   	nop

c000bbd0 <VCache::invalidateReadBuffer()>:
c000bbd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bbd4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000bbda:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000bbde:	c3                   	ret    
c000bbdf:	90                   	nop

c000bbe0 <VCache::writeWriteBuffer()>:
c000bbe0:	53                   	push   ebx
c000bbe1:	83 ec 08             	sub    esp,0x8
c000bbe4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bbe8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000bbec:	74 1e                	je     c000bc0c <VCache::writeWriteBuffer()+0x2c>
c000bbee:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000bbf1:	83 ec 0c             	sub    esp,0xc
c000bbf4:	8b 10                	mov    edx,DWORD PTR [eax]
c000bbf6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000bbf9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000bbfc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000bbff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bc02:	50                   	push   eax
c000bc03:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000bc06:	83 c4 20             	add    esp,0x20
c000bc09:	8d 76 00             	lea    esi,[esi+0x0]
c000bc0c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000bc13:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000bc1a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000bc1e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000bc25:	83 c4 08             	add    esp,0x8
c000bc28:	5b                   	pop    ebx
c000bc29:	c3                   	ret    
c000bc2a:	66 90                	xchg   ax,ax

c000bc2c <VCache::~VCache()>:
c000bc2c:	83 ec 0c             	sub    esp,0xc
c000bc2f:	ba 40 95 02 c0       	mov    edx,0xc0029540
c000bc34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc38:	89 10                	mov    DWORD PTR [eax],edx
c000bc3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc3e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000bc41:	0f b6 c0             	movzx  eax,al
c000bc44:	85 c0                	test   eax,eax
c000bc46:	74 10                	je     c000bc58 <VCache::~VCache()+0x2c>
c000bc48:	83 ec 0c             	sub    esp,0xc
c000bc4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc4f:	e8 8c ff ff ff       	call   c000bbe0 <VCache::writeWriteBuffer()>
c000bc54:	83 c4 10             	add    esp,0x10
c000bc57:	90                   	nop
c000bc58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc5c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000bc5f:	83 ec 0c             	sub    esp,0xc
c000bc62:	50                   	push   eax
c000bc63:	e8 7c 42 00 00       	call   c000fee4 <free>
c000bc68:	83 c4 10             	add    esp,0x10
c000bc6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc6f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000bc72:	83 ec 0c             	sub    esp,0xc
c000bc75:	50                   	push   eax
c000bc76:	e8 69 42 00 00       	call   c000fee4 <free>
c000bc7b:	83 c4 10             	add    esp,0x10
c000bc7e:	90                   	nop
c000bc7f:	83 c4 0c             	add    esp,0xc
c000bc82:	c3                   	ret    
c000bc83:	90                   	nop

c000bc84 <VCache::~VCache()>:
c000bc84:	83 ec 0c             	sub    esp,0xc
c000bc87:	83 ec 0c             	sub    esp,0xc
c000bc8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc8e:	e8 99 ff ff ff       	call   c000bc2c <VCache::~VCache()>
c000bc93:	83 c4 10             	add    esp,0x10
c000bc96:	83 ec 08             	sub    esp,0x8
c000bc99:	6a 44                	push   0x44
c000bc9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc9f:	e8 30 1e 00 00       	call   c000dad4 <operator delete(void*, unsigned long)>
c000bca4:	83 c4 10             	add    esp,0x10
c000bca7:	83 c4 0c             	add    esp,0xc
c000bcaa:	c3                   	ret    
c000bcab:	90                   	nop

c000bcac <VCache::write(unsigned long long, int, void*)>:
c000bcac:	55                   	push   ebp
c000bcad:	57                   	push   edi
c000bcae:	56                   	push   esi
c000bcaf:	53                   	push   ebx
c000bcb0:	83 ec 1c             	sub    esp,0x1c
c000bcb3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000bcb7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000bcbb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000bcbf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000bcc3:	e8 ec ae 00 00       	call   c0016bb4 <KeDisablePreemption()>
c000bcc8:	b9 00 10 00 00       	mov    ecx,0x1000
c000bccd:	50                   	push   eax
c000bcce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000bcd1:	0f af c3             	imul   eax,ebx
c000bcd4:	05 ff 0f 00 00       	add    eax,0xfff
c000bcd9:	99                   	cdq    
c000bcda:	f7 f9                	idiv   ecx
c000bcdc:	50                   	push   eax
c000bcdd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000bce1:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000bce7:	e8 da 88 00 00       	call   c00145c6 <VAS::canLockPages(unsigned long, int)>
c000bcec:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000bcf0:	83 c4 10             	add    esp,0x10
c000bcf3:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bcf8:	74 2a                	je     c000bd24 <VCache::write(unsigned long long, int, void*)+0x78>
c000bcfa:	50                   	push   eax
c000bcfb:	b9 00 10 00 00       	mov    ecx,0x1000
c000bd00:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000bd03:	0f af c3             	imul   eax,ebx
c000bd06:	05 ff 0f 00 00       	add    eax,0xfff
c000bd0b:	99                   	cdq    
c000bd0c:	f7 f9                	idiv   ecx
c000bd0e:	50                   	push   eax
c000bd0f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000bd13:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000bd19:	e8 46 8b 00 00       	call   c0014864 <VAS::lockPages(unsigned long, int)>
c000bd1e:	83 c4 10             	add    esp,0x10
c000bd21:	8d 76 00             	lea    esi,[esi+0x0]
c000bd24:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000bd28:	74 0e                	je     c000bd38 <VCache::write(unsigned long long, int, void*)+0x8c>
c000bd2a:	83 ec 0c             	sub    esp,0xc
c000bd2d:	55                   	push   ebp
c000bd2e:	e8 9d fe ff ff       	call   c000bbd0 <VCache::invalidateReadBuffer()>
c000bd33:	83 c4 10             	add    esp,0x10
c000bd36:	66 90                	xchg   ax,ax
c000bd38:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000bd3c:	74 72                	je     c000bdb0 <VCache::write(unsigned long long, int, void*)+0x104>
c000bd3e:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000bd41:	89 c8                	mov    eax,ecx
c000bd43:	99                   	cdq    
c000bd44:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000bd47:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000bd4a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd52:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd56:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd5a:	31 f0                	xor    eax,esi
c000bd5c:	31 fa                	xor    edx,edi
c000bd5e:	09 d0                	or     eax,edx
c000bd60:	75 42                	jne    c000bda4 <VCache::write(unsigned long long, int, void*)+0xf8>
c000bd62:	83 fb 01             	cmp    ebx,0x1
c000bd65:	75 3d                	jne    c000bda4 <VCache::write(unsigned long long, int, void*)+0xf8>
c000bd67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bd6a:	89 cf                	mov    edi,ecx
c000bd6c:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000bd70:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000bd76:	0f af f8             	imul   edi,eax
c000bd79:	89 c1                	mov    ecx,eax
c000bd7b:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000bd7e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bd80:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000bd83:	40                   	inc    eax
c000bd84:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000bd87:	83 f8 50             	cmp    eax,0x50
c000bd8a:	0f 85 a8 00 00 00    	jne    c000be38 <VCache::write(unsigned long long, int, void*)+0x18c>
c000bd90:	83 ec 0c             	sub    esp,0xc
c000bd93:	55                   	push   ebp
c000bd94:	e8 47 fe ff ff       	call   c000bbe0 <VCache::writeWriteBuffer()>
c000bd99:	83 c4 10             	add    esp,0x10
c000bd9c:	e9 97 00 00 00       	jmp    c000be38 <VCache::write(unsigned long long, int, void*)+0x18c>
c000bda1:	8d 76 00             	lea    esi,[esi+0x0]
c000bda4:	83 ec 0c             	sub    esp,0xc
c000bda7:	55                   	push   ebp
c000bda8:	e8 33 fe ff ff       	call   c000bbe0 <VCache::writeWriteBuffer()>
c000bdad:	83 c4 10             	add    esp,0x10
c000bdb0:	83 fb 4f             	cmp    ebx,0x4f
c000bdb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bdb6:	7f 20                	jg     c000bdd8 <VCache::write(unsigned long long, int, void*)+0x12c>
c000bdb8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000bdbb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000bdbf:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000bdc2:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000bdc5:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000bdc8:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000bdcc:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000bdd2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bdd4:	eb 62                	jmp    c000be38 <VCache::write(unsigned long long, int, void*)+0x18c>
c000bdd6:	66 90                	xchg   ax,ax
c000bdd8:	83 ec 0c             	sub    esp,0xc
c000bddb:	8b 10                	mov    edx,DWORD PTR [eax]
c000bddd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bde1:	53                   	push   ebx
c000bde2:	57                   	push   edi
c000bde3:	56                   	push   esi
c000bde4:	50                   	push   eax
c000bde5:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000bde8:	83 c4 20             	add    esp,0x20
c000bdeb:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bdf0:	89 c6                	mov    esi,eax
c000bdf2:	74 28                	je     c000be1c <VCache::write(unsigned long long, int, void*)+0x170>
c000bdf4:	52                   	push   edx
c000bdf5:	b9 00 10 00 00       	mov    ecx,0x1000
c000bdfa:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000bdfe:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000be04:	99                   	cdq    
c000be05:	f7 f9                	idiv   ecx
c000be07:	50                   	push   eax
c000be08:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000be0c:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000be12:	e8 eb 87 00 00       	call   c0014602 <VAS::unlockPages(unsigned long, int)>
c000be17:	83 c4 10             	add    esp,0x10
c000be1a:	66 90                	xchg   ax,ax
c000be1c:	e8 bb ad 00 00       	call   c0016bdc <KeRestorePreemption()>
c000be21:	85 f6                	test   esi,esi
c000be23:	74 4b                	je     c000be70 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000be25:	83 ec 0c             	sub    esp,0xc
c000be28:	68 f8 94 02 c0       	push   0xc00294f8
c000be2d:	e8 34 b1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	eb 39                	jmp    c000be70 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000be37:	90                   	nop
c000be38:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000be3d:	74 29                	je     c000be68 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000be3f:	50                   	push   eax
c000be40:	b9 00 10 00 00       	mov    ecx,0x1000
c000be45:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000be49:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000be4f:	99                   	cdq    
c000be50:	f7 f9                	idiv   ecx
c000be52:	50                   	push   eax
c000be53:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000be57:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000be5d:	e8 a0 87 00 00       	call   c0014602 <VAS::unlockPages(unsigned long, int)>
c000be62:	83 c4 10             	add    esp,0x10
c000be65:	8d 76 00             	lea    esi,[esi+0x0]
c000be68:	e8 6f ad 00 00       	call   c0016bdc <KeRestorePreemption()>
c000be6d:	31 f6                	xor    esi,esi
c000be6f:	90                   	nop
c000be70:	83 c4 1c             	add    esp,0x1c
c000be73:	89 f0                	mov    eax,esi
c000be75:	5b                   	pop    ebx
c000be76:	5e                   	pop    esi
c000be77:	5f                   	pop    edi
c000be78:	5d                   	pop    ebp
c000be79:	c3                   	ret    

c000be7a <VCache::read(unsigned long long, int, void*)>:
c000be7a:	55                   	push   ebp
c000be7b:	bd 00 10 00 00       	mov    ebp,0x1000
c000be80:	57                   	push   edi
c000be81:	56                   	push   esi
c000be82:	53                   	push   ebx
c000be83:	83 ec 2c             	sub    esp,0x2c
c000be86:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000be8a:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000be8e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000be92:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000be96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be9a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be9e:	e8 11 ad 00 00       	call   c0016bb4 <KeDisablePreemption()>
c000bea3:	50                   	push   eax
c000bea4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bea7:	0f af c6             	imul   eax,esi
c000beaa:	05 ff 0f 00 00       	add    eax,0xfff
c000beaf:	99                   	cdq    
c000beb0:	f7 fd                	idiv   ebp
c000beb2:	50                   	push   eax
c000beb3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000beb7:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000bebd:	e8 04 87 00 00       	call   c00145c6 <VAS::canLockPages(unsigned long, int)>
c000bec2:	83 c4 10             	add    esp,0x10
c000bec5:	84 c0                	test   al,al
c000bec7:	89 c7                	mov    edi,eax
c000bec9:	74 25                	je     c000bef0 <VCache::read(unsigned long long, int, void*)+0x76>
c000becb:	50                   	push   eax
c000becc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000becf:	0f af c6             	imul   eax,esi
c000bed2:	05 ff 0f 00 00       	add    eax,0xfff
c000bed7:	99                   	cdq    
c000bed8:	f7 fd                	idiv   ebp
c000beda:	50                   	push   eax
c000bedb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000bedf:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000bee5:	e8 7a 89 00 00       	call   c0014864 <VAS::lockPages(unsigned long, int)>
c000beea:	83 c4 10             	add    esp,0x10
c000beed:	8d 76 00             	lea    esi,[esi+0x0]
c000bef0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000bef4:	74 0e                	je     c000bf04 <VCache::read(unsigned long long, int, void*)+0x8a>
c000bef6:	83 ec 0c             	sub    esp,0xc
c000bef9:	53                   	push   ebx
c000befa:	e8 e1 fc ff ff       	call   c000bbe0 <VCache::writeWriteBuffer()>
c000beff:	83 c4 10             	add    esp,0x10
c000bf02:	66 90                	xchg   ax,ax
c000bf04:	83 fe 01             	cmp    esi,0x1
c000bf07:	0f 85 fb 00 00 00    	jne    c000c008 <VCache::read(unsigned long long, int, void*)+0x18e>
c000bf0d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000bf10:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000bf17:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bf1b:	0f 85 e7 00 00 00    	jne    c000c008 <VCache::read(unsigned long long, int, void*)+0x18e>
c000bf21:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000bf24:	89 ee                	mov    esi,ebp
c000bf26:	f7 de                	neg    esi
c000bf28:	89 f0                	mov    eax,esi
c000bf2a:	c1 f8 1f             	sar    eax,0x1f
c000bf2d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bf31:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000bf35:	23 4c 24 0c          	and    ecx,DWORD PTR [esp+0xc]
c000bf39:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000bf3d:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000bf41:	89 ca                	mov    edx,ecx
c000bf43:	89 f9                	mov    ecx,edi
c000bf45:	0f b6 f9             	movzx  edi,cl
c000bf48:	89 f0                	mov    eax,esi
c000bf4a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000bf4e:	74 0c                	je     c000bf5c <VCache::read(unsigned long long, int, void*)+0xe2>
c000bf50:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000bf53:	75 07                	jne    c000bf5c <VCache::read(unsigned long long, int, void*)+0xe2>
c000bf55:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c000bf58:	74 56                	je     c000bfb0 <VCache::read(unsigned long long, int, void*)+0x136>
c000bf5a:	66 90                	xchg   ax,ax
c000bf5c:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000bf60:	83 ec 0c             	sub    esp,0xc
c000bf63:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000bf66:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bf6a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bf6d:	8b 37                	mov    esi,DWORD PTR [edi]
c000bf6f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000bf72:	55                   	push   ebp
c000bf73:	52                   	push   edx
c000bf74:	50                   	push   eax
c000bf75:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bf79:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000bf7c:	83 c4 20             	add    esp,0x20
c000bf7f:	85 c0                	test   eax,eax
c000bf81:	89 c5                	mov    ebp,eax
c000bf83:	74 2b                	je     c000bfb0 <VCache::read(unsigned long long, int, void*)+0x136>
c000bf85:	83 ec 0c             	sub    esp,0xc
c000bf88:	68 10 95 02 c0       	push   0xc0029510
c000bf8d:	e8 d4 af ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000bf92:	83 c4 10             	add    esp,0x10
c000bf95:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bf9a:	0f 84 bc 00 00 00    	je     c000c05c <VCache::read(unsigned long long, int, void*)+0x1e2>
c000bfa0:	56                   	push   esi
c000bfa1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bfa4:	05 ff 0f 00 00       	add    eax,0xfff
c000bfa9:	e9 92 00 00 00       	jmp    c000c040 <VCache::read(unsigned long long, int, void*)+0x1c6>
c000bfae:	66 90                	xchg   ax,ax
c000bfb0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000bfb3:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000bfb7:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000bfbd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000bfc0:	8d 70 ff             	lea    esi,[eax-0x1]
c000bfc3:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000bfc7:	0f af f1             	imul   esi,ecx
c000bfca:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000bfcd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bfcf:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bfd4:	74 26                	je     c000bffc <VCache::read(unsigned long long, int, void*)+0x182>
c000bfd6:	51                   	push   ecx
c000bfd7:	b9 00 10 00 00       	mov    ecx,0x1000
c000bfdc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bfdf:	05 ff 0f 00 00       	add    eax,0xfff
c000bfe4:	99                   	cdq    
c000bfe5:	f7 f9                	idiv   ecx
c000bfe7:	50                   	push   eax
c000bfe8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000bfec:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000bff2:	e8 0b 86 00 00       	call   c0014602 <VAS::unlockPages(unsigned long, int)>
c000bff7:	83 c4 10             	add    esp,0x10
c000bffa:	66 90                	xchg   ax,ax
c000bffc:	e8 db ab 00 00       	call   c0016bdc <KeRestorePreemption()>
c000c001:	31 ed                	xor    ebp,ebp
c000c003:	eb 5f                	jmp    c000c064 <VCache::read(unsigned long long, int, void*)+0x1ea>
c000c005:	8d 76 00             	lea    esi,[esi+0x0]
c000c008:	83 ec 0c             	sub    esp,0xc
c000c00b:	53                   	push   ebx
c000c00c:	e8 bf fb ff ff       	call   c000bbd0 <VCache::invalidateReadBuffer()>
c000c011:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c014:	5a                   	pop    edx
c000c015:	8b 10                	mov    edx,DWORD PTR [eax]
c000c017:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000c01b:	56                   	push   esi
c000c01c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c020:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c024:	50                   	push   eax
c000c025:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000c028:	83 c4 20             	add    esp,0x20
c000c02b:	89 c5                	mov    ebp,eax
c000c02d:	89 f8                	mov    eax,edi
c000c02f:	84 c0                	test   al,al
c000c031:	74 29                	je     c000c05c <VCache::read(unsigned long long, int, void*)+0x1e2>
c000c033:	50                   	push   eax
c000c034:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000c038:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000c03e:	66 90                	xchg   ax,ax
c000c040:	b9 00 10 00 00       	mov    ecx,0x1000
c000c045:	99                   	cdq    
c000c046:	f7 f9                	idiv   ecx
c000c048:	50                   	push   eax
c000c049:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000c04d:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000c053:	e8 aa 85 00 00       	call   c0014602 <VAS::unlockPages(unsigned long, int)>
c000c058:	83 c4 10             	add    esp,0x10
c000c05b:	90                   	nop
c000c05c:	e8 7b ab 00 00       	call   c0016bdc <KeRestorePreemption()>
c000c061:	8d 76 00             	lea    esi,[esi+0x0]
c000c064:	83 c4 2c             	add    esp,0x2c
c000c067:	89 e8                	mov    eax,ebp
c000c069:	5b                   	pop    ebx
c000c06a:	5e                   	pop    esi
c000c06b:	5f                   	pop    edi
c000c06c:	5d                   	pop    ebp
c000c06d:	c3                   	ret    

c000c06e <Video::putrect(int, int, int, int, unsigned int)>:
c000c06e:	55                   	push   ebp
c000c06f:	57                   	push   edi
c000c070:	56                   	push   esi
c000c071:	53                   	push   ebx
c000c072:	83 ec 1c             	sub    esp,0x1c
c000c075:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c079:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c07d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000c081:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000c085:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c089:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c08d:	01 df                	add    edi,ebx
c000c08f:	39 fb                	cmp    ebx,edi
c000c091:	7d 1f                	jge    c000c0b2 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000c093:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c097:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000c09b:	7d 12                	jge    c000c0af <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000c09d:	8b 16                	mov    edx,DWORD PTR [esi]
c000c09f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c0a3:	53                   	push   ebx
c000c0a4:	55                   	push   ebp
c000c0a5:	45                   	inc    ebp
c000c0a6:	56                   	push   esi
c000c0a7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c0aa:	83 c4 10             	add    esp,0x10
c000c0ad:	eb e8                	jmp    c000c097 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000c0af:	43                   	inc    ebx
c000c0b0:	eb dd                	jmp    c000c08f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000c0b2:	83 c4 1c             	add    esp,0x1c
c000c0b5:	5b                   	pop    ebx
c000c0b6:	5e                   	pop    esi
c000c0b7:	5f                   	pop    edi
c000c0b8:	5d                   	pop    ebp
c000c0b9:	c3                   	ret    

c000c0ba <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000c0ba:	55                   	push   ebp
c000c0bb:	57                   	push   edi
c000c0bc:	31 ff                	xor    edi,edi
c000c0be:	56                   	push   esi
c000c0bf:	53                   	push   ebx
c000c0c0:	83 ec 1c             	sub    esp,0x1c
c000c0c3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000c0c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000c0cb:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000c0d2:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000c0d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0db:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000c0df:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000c0e3:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000c0e6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c0ea:	01 f9                	add    ecx,edi
c000c0ec:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000c0f0:	7d 2f                	jge    c000c121 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000c0f2:	31 f6                	xor    esi,esi
c000c0f4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c0f8:	01 f2                	add    edx,esi
c000c0fa:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000c0fe:	7d 1a                	jge    c000c11a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000c100:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c103:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000c106:	46                   	inc    esi
c000c107:	51                   	push   ecx
c000c108:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c10c:	52                   	push   edx
c000c10d:	55                   	push   ebp
c000c10e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000c111:	83 c4 10             	add    esp,0x10
c000c114:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c118:	eb da                	jmp    c000c0f4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000c11a:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000c11e:	47                   	inc    edi
c000c11f:	eb c5                	jmp    c000c0e6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000c121:	83 c4 1c             	add    esp,0x1c
c000c124:	5b                   	pop    ebx
c000c125:	5e                   	pop    esi
c000c126:	5f                   	pop    edi
c000c127:	5d                   	pop    ebp
c000c128:	c3                   	ret    
c000c129:	90                   	nop

c000c12a <Video::blit(unsigned int*, int, int, int, int)>:
c000c12a:	55                   	push   ebp
c000c12b:	ba 00 00 00 00       	mov    edx,0x0
c000c130:	57                   	push   edi
c000c131:	56                   	push   esi
c000c132:	53                   	push   ebx
c000c133:	83 ec 1c             	sub    esp,0x1c
c000c136:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c13a:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000c13e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c142:	85 c0                	test   eax,eax
c000c144:	0f 49 d0             	cmovns edx,eax
c000c147:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000c14e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000c152:	89 eb                	mov    ebx,ebp
c000c154:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c158:	01 ea                	add    edx,ebp
c000c15a:	39 da                	cmp    edx,ebx
c000c15c:	7e 54                	jle    c000c1b2 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000c15e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000c164:	7c 4c                	jl     c000c1b2 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000c166:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c16a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c16e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c172:	01 c1                	add    ecx,eax
c000c174:	39 f9                	cmp    ecx,edi
c000c176:	7e 2f                	jle    c000c1a7 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000c178:	83 c2 04             	add    edx,0x4
c000c17b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000c181:	7c 21                	jl     c000c1a4 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000c183:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c187:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000c189:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000c18c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c190:	55                   	push   ebp
c000c191:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c195:	56                   	push   esi
c000c196:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000c199:	83 c4 10             	add    esp,0x10
c000c19c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1a4:	47                   	inc    edi
c000c1a5:	eb c7                	jmp    c000c16e <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000c1a7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c1ab:	43                   	inc    ebx
c000c1ac:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000c1b0:	eb a2                	jmp    c000c154 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000c1b2:	83 c4 1c             	add    esp,0x1c
c000c1b5:	5b                   	pop    ebx
c000c1b6:	5e                   	pop    esi
c000c1b7:	5f                   	pop    edi
c000c1b8:	5d                   	pop    ebp
c000c1b9:	c3                   	ret    

c000c1ba <Video::clearScreen(unsigned int)>:
c000c1ba:	83 ec 14             	sub    esp,0x14
c000c1bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c1c1:	8b 10                	mov    edx,DWORD PTR [eax]
c000c1c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1c7:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000c1cd:	ff b0 58 01 00 00    	push   DWORD PTR [eax+0x158]
c000c1d3:	6a 00                	push   0x0
c000c1d5:	6a 00                	push   0x0
c000c1d7:	50                   	push   eax
c000c1d8:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000c1db:	83 c4 2c             	add    esp,0x2c
c000c1de:	c3                   	ret    
c000c1df:	90                   	nop

c000c1e0 <Video::putpixel(int, int, unsigned int)>:
c000c1e0:	c7 44 24 04 48 95 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029548
c000c1e8:	e9 3b 41 00 00       	jmp    c0010328 <KePanic(char const*)>
c000c1ed:	90                   	nop

c000c1ee <Video::readPixelApprox(int, int)>:
c000c1ee:	83 ec 18             	sub    esp,0x18
c000c1f1:	68 69 95 02 c0       	push   0xc0029569
c000c1f6:	e8 2d 41 00 00       	call   c0010328 <KePanic(char const*)>
c000c1fb:	31 c0                	xor    eax,eax
c000c1fd:	83 c4 1c             	add    esp,0x1c
c000c200:	c3                   	ret    
c000c201:	90                   	nop

c000c202 <Video::Video(char const*)>:
c000c202:	83 ec 0c             	sub    esp,0xc
c000c205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c209:	83 ec 08             	sub    esp,0x8
c000c20c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c210:	50                   	push   eax
c000c211:	e8 8e e1 ff ff       	call   c000a3a4 <Device::Device(char const*)>
c000c216:	83 c4 10             	add    esp,0x10
c000c219:	ba 0c 96 02 c0       	mov    edx,0xc002960c
c000c21e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c222:	89 10                	mov    DWORD PTR [eax],edx
c000c224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c228:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000c232:	90                   	nop
c000c233:	83 c4 0c             	add    esp,0xc
c000c236:	c3                   	ret    
c000c237:	90                   	nop

c000c238 <Video::~Video()>:
c000c238:	83 ec 0c             	sub    esp,0xc
c000c23b:	ba 0c 96 02 c0       	mov    edx,0xc002960c
c000c240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c244:	89 10                	mov    DWORD PTR [eax],edx
c000c246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c24a:	83 ec 0c             	sub    esp,0xc
c000c24d:	50                   	push   eax
c000c24e:	e8 f1 de ff ff       	call   c000a144 <Device::~Device()>
c000c253:	83 c4 10             	add    esp,0x10
c000c256:	90                   	nop
c000c257:	83 c4 0c             	add    esp,0xc
c000c25a:	c3                   	ret    
c000c25b:	90                   	nop

c000c25c <Video::~Video()>:
c000c25c:	83 ec 0c             	sub    esp,0xc
c000c25f:	83 ec 0c             	sub    esp,0xc
c000c262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c266:	e8 cd ff ff ff       	call   c000c238 <Video::~Video()>
c000c26b:	83 c4 10             	add    esp,0x10
c000c26e:	83 ec 08             	sub    esp,0x8
c000c271:	68 64 01 00 00       	push   0x164
c000c276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c27a:	e8 55 18 00 00       	call   c000dad4 <operator delete(void*, unsigned long)>
c000c27f:	83 c4 10             	add    esp,0x10
c000c282:	83 c4 0c             	add    esp,0xc
c000c285:	c3                   	ret    

c000c286 <Video::isMonochrome()>:
c000c286:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c28a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000c290:	c3                   	ret    
c000c291:	90                   	nop

c000c292 <Video::getWidth()>:
c000c292:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c296:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c29c:	c3                   	ret    
c000c29d:	90                   	nop

c000c29e <Video::getHeight()>:
c000c29e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c2a2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000c2a8:	c3                   	ret    
c000c2a9:	90                   	nop

c000c2aa <Video::drawCursor(int, int, unsigned int*, int)>:
c000c2aa:	55                   	push   ebp
c000c2ab:	57                   	push   edi
c000c2ac:	56                   	push   esi
c000c2ad:	53                   	push   ebx
c000c2ae:	83 ec 2c             	sub    esp,0x2c
c000c2b1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000c2b5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000c2b9:	83 f8 01             	cmp    eax,0x1
c000c2bc:	19 c9                	sbb    ecx,ecx
c000c2be:	31 db                	xor    ebx,ebx
c000c2c0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c2c4:	f7 54 24 14          	not    DWORD PTR [esp+0x14]
c000c2c8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000c2cc:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000c2d4:	81 64 24 14 ff ff ff 00 	and    DWORD PTR [esp+0x14],0xffffff
c000c2dc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000c2e0:	01 d8                	add    eax,ebx
c000c2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c2e6:	56                   	push   esi
c000c2e7:	e8 b2 ff ff ff       	call   c000c29e <Video::getHeight()>
c000c2ec:	59                   	pop    ecx
c000c2ed:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000c2f1:	0f 8e 80 00 00 00    	jle    c000c377 <Video::drawCursor(int, int, unsigned int*, int)+0xcd>
c000c2f7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c2fb:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000c2fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c302:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c306:	8b ac 98 80 00 00 00 	mov    ebp,DWORD PTR [eax+ebx*4+0x80]
c000c30d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c311:	09 e8                	or     eax,ebp
c000c313:	74 47                	je     c000c35c <Video::drawCursor(int, int, unsigned int*, int)+0xb2>
c000c315:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000c319:	89 f8                	mov    eax,edi
c000c31b:	83 c0 1f             	add    eax,0x1f
c000c31e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c322:	56                   	push   esi
c000c323:	e8 6a ff ff ff       	call   c000c292 <Video::getWidth()>
c000c328:	5a                   	pop    edx
c000c329:	39 c7                	cmp    edi,eax
c000c32b:	7d 2f                	jge    c000c35c <Video::drawCursor(int, int, unsigned int*, int)+0xb2>
c000c32d:	f7 c5 01 00 00 00    	test   ebp,0x1
c000c333:	74 33                	je     c000c368 <Video::drawCursor(int, int, unsigned int*, int)+0xbe>
c000c335:	8b 06                	mov    eax,DWORD PTR [esi]
c000c337:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c33b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c33f:	57                   	push   edi
c000c340:	56                   	push   esi
c000c341:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000c344:	83 c4 10             	add    esp,0x10
c000c347:	d1 ed                	shr    ebp,1
c000c349:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c000c34d:	39 7c 24 1c          	cmp    DWORD PTR [esp+0x1c],edi
c000c351:	74 09                	je     c000c35c <Video::drawCursor(int, int, unsigned int*, int)+0xb2>
c000c353:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c357:	47                   	inc    edi
c000c358:	09 e8                	or     eax,ebp
c000c35a:	75 c6                	jne    c000c322 <Video::drawCursor(int, int, unsigned int*, int)+0x78>
c000c35c:	43                   	inc    ebx
c000c35d:	83 fb 20             	cmp    ebx,0x20
c000c360:	0f 85 76 ff ff ff    	jne    c000c2dc <Video::drawCursor(int, int, unsigned int*, int)+0x32>
c000c366:	eb 0f                	jmp    c000c377 <Video::drawCursor(int, int, unsigned int*, int)+0xcd>
c000c368:	f6 44 24 0c 01       	test   BYTE PTR [esp+0xc],0x1
c000c36d:	74 d8                	je     c000c347 <Video::drawCursor(int, int, unsigned int*, int)+0x9d>
c000c36f:	8b 06                	mov    eax,DWORD PTR [esi]
c000c371:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c375:	eb c4                	jmp    c000c33b <Video::drawCursor(int, int, unsigned int*, int)+0x91>
c000c377:	83 c4 2c             	add    esp,0x2c
c000c37a:	5b                   	pop    ebx
c000c37b:	5e                   	pop    esi
c000c37c:	5f                   	pop    edi
c000c37d:	5d                   	pop    ebp
c000c37e:	c3                   	ret    
c000c37f:	90                   	nop

c000c380 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000c380:	55                   	push   ebp
c000c381:	57                   	push   edi
c000c382:	56                   	push   esi
c000c383:	53                   	push   ebx
c000c384:	83 ec 48             	sub    esp,0x48
c000c387:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000c38b:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000c38f:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000c393:	c1 e0 08             	shl    eax,0x8
c000c396:	01 d0                	add    eax,edx
c000c398:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000c39c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c3a0:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000c3a4:	c1 e0 08             	shl    eax,0x8
c000c3a7:	01 d0                	add    eax,edx
c000c3a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c3ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3b1:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c000c3b6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c3ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c3be:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000c3c5:	50                   	push   eax
c000c3c6:	e8 09 3b 00 00       	call   c000fed4 <malloc>
c000c3cb:	83 c4 10             	add    esp,0x10
c000c3ce:	85 c0                	test   eax,eax
c000c3d0:	89 c5                	mov    ebp,eax
c000c3d2:	75 10                	jne    c000c3e4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c000c3d4:	83 ec 0c             	sub    esp,0xc
c000c3d7:	68 94 95 02 c0       	push   0xc0029594
c000c3dc:	e8 47 3f 00 00       	call   c0010328 <KePanic(char const*)>
c000c3e1:	83 c4 10             	add    esp,0x10
c000c3e4:	52                   	push   edx
c000c3e5:	bf 12 00 00 00       	mov    edi,0x12
c000c3ea:	52                   	push   edx
c000c3eb:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000c3ef:	50                   	push   eax
c000c3f0:	68 a4 95 02 c0       	push   0xc00295a4
c000c3f5:	e8 6c ab ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c3fa:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000c3fd:	83 e0 20             	and    eax,0x20
c000c400:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000c404:	85 c0                	test   eax,eax
c000c406:	59                   	pop    ecx
c000c407:	0f 94 c0             	sete   al
c000c40a:	0f b6 c0             	movzx  eax,al
c000c40d:	5e                   	pop    esi
c000c40e:	50                   	push   eax
c000c40f:	68 ae 95 02 c0       	push   0xc00295ae
c000c414:	e8 4d ab ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c419:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000c41d:	83 c4 10             	add    esp,0x10
c000c420:	85 c0                	test   eax,eax
c000c422:	89 c2                	mov    edx,eax
c000c424:	74 11                	je     c000c437 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000c426:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c000c42a:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000c42e:	c1 ff 03             	sar    edi,0x3
c000c431:	0f af f9             	imul   edi,ecx
c000c434:	83 c7 12             	add    edi,0x12
c000c437:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000c43c:	74 07                	je     c000c445 <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c000c43e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000c443:	75 12                	jne    c000c457 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c000c445:	83 ec 0c             	sub    esp,0xc
c000c448:	68 bc 95 02 c0       	push   0xc00295bc
c000c44d:	e8 14 ab ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c452:	e9 aa 02 00 00       	jmp    c000c701 <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c000c457:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000c45b:	83 f9 02             	cmp    ecx,0x2
c000c45e:	74 0e                	je     c000c46e <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c000c460:	83 f9 0a             	cmp    ecx,0xa
c000c463:	0f 84 d1 00 00 00    	je     c000c53a <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c000c469:	e9 7e 02 00 00       	jmp    c000c6ec <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c000c46e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000c473:	75 0e                	jne    c000c483 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000c475:	84 d2                	test   dl,dl
c000c477:	75 0a                	jne    c000c483 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000c479:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000c47c:	83 e8 18             	sub    eax,0x18
c000c47f:	a8 f7                	test   al,0xf7
c000c481:	74 0d                	je     c000c490 <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c000c483:	83 ec 0c             	sub    esp,0xc
c000c486:	68 d1 95 02 c0       	push   0xc00295d1
c000c48b:	e9 64 02 00 00       	jmp    c000c6f4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000c490:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c498:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000c49d:	31 c0                	xor    eax,eax
c000c49f:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000c4a3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000c4ab:	89 c6                	mov    esi,eax
c000c4ad:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000c4b2:	75 15                	jne    c000c4c9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000c4b4:	99                   	cdq    
c000c4b5:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000c4b9:	85 d2                	test   edx,edx
c000c4bb:	75 0c                	jne    c000c4c9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000c4bd:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c4c1:	29 c6                	sub    esi,eax
c000c4c3:	4e                   	dec    esi
c000c4c4:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c000c4c9:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000c4cd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c4d5:	75 0c                	jne    c000c4e3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c000c4d7:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c000c4dc:	c1 e2 18             	shl    edx,0x18
c000c4df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c4e3:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c000c4e8:	8d 46 01             	lea    eax,[esi+0x1]
c000c4eb:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000c4ef:	c1 e1 10             	shl    ecx,0x10
c000c4f2:	89 ca                	mov    edx,ecx
c000c4f4:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c000c4f9:	c1 e1 08             	shl    ecx,0x8
c000c4fc:	09 d1                	or     ecx,edx
c000c4fe:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000c502:	09 d1                	or     ecx,edx
c000c504:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000c508:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c000c50c:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000c510:	c1 fa 03             	sar    edx,0x3
c000c513:	01 d7                	add    edi,edx
c000c515:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c519:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c000c51d:	7e 04                	jle    c000c523 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c000c51f:	89 c6                	mov    esi,eax
c000c521:	eb 8a                	jmp    c000c4ad <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c000c523:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c527:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c52b:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000c52f:	0f 8f 6e ff ff ff    	jg     c000c4a3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c000c535:	e9 ce 01 00 00       	jmp    c000c708 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000c53a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000c53f:	75 0e                	jne    c000c54f <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000c541:	85 c0                	test   eax,eax
c000c543:	75 0a                	jne    c000c54f <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000c545:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000c548:	83 e8 18             	sub    eax,0x18
c000c54b:	a8 f7                	test   al,0xf7
c000c54d:	74 0d                	je     c000c55c <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c000c54f:	83 ec 0c             	sub    esp,0xc
c000c552:	68 df 95 02 c0       	push   0xc00295df
c000c557:	e9 98 01 00 00       	jmp    c000c6f4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000c55c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000c564:	31 c9                	xor    ecx,ecx
c000c566:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c56e:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c000c572:	0f 8d 90 01 00 00    	jge    c000c708 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000c578:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c57c:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c000c580:	0f 8e 82 01 00 00    	jle    c000c708 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000c586:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000c58a:	8d 77 01             	lea    esi,[edi+0x1]
c000c58d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c591:	83 fa 7f             	cmp    edx,0x7f
c000c594:	89 d0                	mov    eax,edx
c000c596:	0f 8e a3 00 00 00    	jle    c000c63f <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c000c59c:	83 e0 7f             	and    eax,0x7f
c000c59f:	31 d2                	xor    edx,edx
c000c5a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c5a5:	40                   	inc    eax
c000c5a6:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000c5aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c5ae:	75 08                	jne    c000c5b8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c000c5b0:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c000c5b5:	c1 e2 18             	shl    edx,0x18
c000c5b8:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c000c5bd:	c1 e0 10             	shl    eax,0x10
c000c5c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c5c4:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c000c5c9:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000c5cd:	c1 e0 08             	shl    eax,0x8
c000c5d0:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000c5d4:	09 f8                	or     eax,edi
c000c5d6:	31 ff                	xor    edi,edi
c000c5d8:	09 d0                	or     eax,edx
c000c5da:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c5de:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000c5e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5e7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000c5ec:	75 1d                	jne    c000c60b <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000c5ee:	89 c8                	mov    eax,ecx
c000c5f0:	99                   	cdq    
c000c5f1:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000c5f5:	85 d2                	test   edx,edx
c000c5f7:	75 12                	jne    c000c60b <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000c5f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c5fd:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000c601:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000c605:	49                   	dec    ecx
c000c606:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000c60b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c60f:	8d 51 01             	lea    edx,[ecx+0x1]
c000c612:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c000c616:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000c61a:	8d 47 01             	lea    eax,[edi+0x1]
c000c61d:	7e 06                	jle    c000c625 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c000c61f:	89 c7                	mov    edi,eax
c000c621:	89 d1                	mov    ecx,edx
c000c623:	eb c2                	jmp    c000c5e7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c000c625:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000c629:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000c62d:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000c631:	c1 f8 03             	sar    eax,0x3
c000c634:	01 c6                	add    esi,eax
c000c636:	89 d1                	mov    ecx,edx
c000c638:	89 f7                	mov    edi,esi
c000c63a:	e9 2f ff ff ff       	jmp    c000c56e <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c000c63f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c647:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c64b:	40                   	inc    eax
c000c64c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c650:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000c655:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c659:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c65e:	75 1d                	jne    c000c67d <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000c660:	89 c8                	mov    eax,ecx
c000c662:	99                   	cdq    
c000c663:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000c667:	85 d2                	test   edx,edx
c000c669:	75 12                	jne    c000c67d <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000c66b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c66f:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000c673:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000c677:	49                   	dec    ecx
c000c678:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000c67d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000c681:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000c689:	75 0c                	jne    c000c697 <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c000c68b:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c000c690:	c1 e7 18             	shl    edi,0x18
c000c693:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000c697:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000c69c:	8d 51 01             	lea    edx,[ecx+0x1]
c000c69f:	c1 e0 10             	shl    eax,0x10
c000c6a2:	89 c7                	mov    edi,eax
c000c6a4:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c000c6a9:	c1 e0 08             	shl    eax,0x8
c000c6ac:	09 f8                	or     eax,edi
c000c6ae:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000c6b2:	09 f8                	or     eax,edi
c000c6b4:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000c6b8:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000c6bc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000c6c0:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000c6c4:	c1 f8 03             	sar    eax,0x3
c000c6c7:	01 c6                	add    esi,eax
c000c6c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c6cd:	40                   	inc    eax
c000c6ce:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c000c6d2:	7e 0b                	jle    c000c6df <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c000c6d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c6d8:	89 d1                	mov    ecx,edx
c000c6da:	e9 7a ff ff ff       	jmp    c000c659 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c000c6df:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000c6e3:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000c6e7:	e9 4a ff ff ff       	jmp    c000c636 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c000c6ec:	50                   	push   eax
c000c6ed:	50                   	push   eax
c000c6ee:	51                   	push   ecx
c000c6ef:	68 ee 95 02 c0       	push   0xc00295ee
c000c6f4:	e8 6d a8 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c6f9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c6fc:	e8 e3 37 00 00       	call   c000fee4 <free>
c000c701:	83 c4 10             	add    esp,0x10
c000c704:	31 ed                	xor    ebp,ebp
c000c706:	eb 14                	jmp    c000c71c <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c000c708:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000c70c:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c710:	89 18                	mov    DWORD PTR [eax],ebx
c000c712:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c716:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000c71a:	89 18                	mov    DWORD PTR [eax],ebx
c000c71c:	83 c4 3c             	add    esp,0x3c
c000c71f:	89 e8                	mov    eax,ebp
c000c721:	5b                   	pop    ebx
c000c722:	5e                   	pop    esi
c000c723:	5f                   	pop    edi
c000c724:	5d                   	pop    ebp
c000c725:	c3                   	ret    

c000c726 <Video::putTGA(int, int, unsigned char*, int)>:
c000c726:	55                   	push   ebp
c000c727:	57                   	push   edi
c000c728:	56                   	push   esi
c000c729:	53                   	push   ebx
c000c72a:	83 ec 28             	sub    esp,0x28
c000c72d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000c731:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000c735:	50                   	push   eax
c000c736:	8d 44 24 18          	lea    eax,[esp+0x18]
c000c73a:	50                   	push   eax
c000c73b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000c73f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000c743:	55                   	push   ebp
c000c744:	e8 37 fc ff ff       	call   c000c380 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000c749:	83 c4 20             	add    esp,0x20
c000c74c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c750:	85 c0                	test   eax,eax
c000c752:	74 3b                	je     c000c78f <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000c754:	89 c6                	mov    esi,eax
c000c756:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c75a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c75e:	39 d8                	cmp    eax,ebx
c000c760:	7e 2d                	jle    c000c78f <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000c762:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c766:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c76a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c76e:	39 f8                	cmp    eax,edi
c000c770:	7e 1a                	jle    c000c78c <Video::putTGA(int, int, unsigned char*, int)+0x66>
c000c772:	83 c6 04             	add    esi,0x4
c000c775:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000c778:	85 c0                	test   eax,eax
c000c77a:	79 0d                	jns    c000c789 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000c77c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c77f:	50                   	push   eax
c000c780:	53                   	push   ebx
c000c781:	57                   	push   edi
c000c782:	55                   	push   ebp
c000c783:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000c786:	83 c4 10             	add    esp,0x10
c000c789:	47                   	inc    edi
c000c78a:	eb da                	jmp    c000c766 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000c78c:	43                   	inc    ebx
c000c78d:	eb c7                	jmp    c000c756 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000c78f:	83 c4 1c             	add    esp,0x1c
c000c792:	5b                   	pop    ebx
c000c793:	5e                   	pop    esi
c000c794:	5f                   	pop    edi
c000c795:	5d                   	pop    ebp
c000c796:	c3                   	ret    
c000c797:	90                   	nop

c000c798 <ACPI::close(int, int, void*)>:
c000c798:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c79d:	c3                   	ret    
c000c79e:	66 90                	xchg   ax,ax

c000c7a0 <loadACPITables(unsigned char*)>:
c000c7a0:	57                   	push   edi
c000c7a1:	56                   	push   esi
c000c7a2:	53                   	push   ebx
c000c7a3:	83 ec 60             	sub    esp,0x60
c000c7a6:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000c7ab:	0f 84 43 02 00 00    	je     c000c9f4 <loadACPITables(unsigned char*)+0x254>
c000c7b1:	a0 80 2d 03 c0       	mov    al,ds:0xc0032d80
c000c7b6:	0f b6 c0             	movzx  eax,al
c000c7b9:	85 c0                	test   eax,eax
c000c7bb:	74 7b                	je     c000c838 <loadACPITables(unsigned char*)+0x98>
c000c7bd:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c7c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c7c5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000c7c9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c7cc:	83 e8 24             	sub    eax,0x24
c000c7cf:	c1 e8 03             	shr    eax,0x3
c000c7d2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c7d6:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000c7de:	66 90                	xchg   ax,ax
c000c7e0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000c7e4:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000c7e8:	0f 8d ba 00 00 00    	jge    c000c8a8 <loadACPITables(unsigned char*)+0x108>
c000c7ee:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c7f2:	83 c0 24             	add    eax,0x24
c000c7f5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c7f9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000c7fd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c801:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000c805:	c1 e0 03             	shl    eax,0x3
c000c808:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000c80c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c810:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000c813:	8b 00                	mov    eax,DWORD PTR [eax]
c000c815:	89 c1                	mov    ecx,eax
c000c817:	a1 60 2b 03 c0       	mov    eax,ds:0xc0032b60
c000c81c:	8d 50 01             	lea    edx,[eax+0x1]
c000c81f:	89 15 60 2b 03 c0    	mov    DWORD PTR ds:0xc0032b60,edx
c000c825:	89 ca                	mov    edx,ecx
c000c827:	89 14 c5 84 2b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd47c],edx
c000c82e:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000c833:	eb ab                	jmp    c000c7e0 <loadACPITables(unsigned char*)+0x40>
c000c835:	8d 76 00             	lea    esi,[esi+0x0]
c000c838:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c83c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c840:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c844:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c847:	83 e8 24             	sub    eax,0x24
c000c84a:	c1 e8 02             	shr    eax,0x2
c000c84d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c851:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000c859:	8d 76 00             	lea    esi,[esi+0x0]
c000c85c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c860:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000c864:	7d 42                	jge    c000c8a8 <loadACPITables(unsigned char*)+0x108>
c000c866:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c86a:	83 c0 24             	add    eax,0x24
c000c86d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c871:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c875:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c879:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c87d:	c1 e0 02             	shl    eax,0x2
c000c880:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000c884:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c888:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c88a:	a1 60 2b 03 c0       	mov    eax,ds:0xc0032b60
c000c88f:	8d 50 01             	lea    edx,[eax+0x1]
c000c892:	89 15 60 2b 03 c0    	mov    DWORD PTR ds:0xc0032b60,edx
c000c898:	89 ca                	mov    edx,ecx
c000c89a:	89 14 c5 84 2b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd47c],edx
c000c8a1:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000c8a6:	eb b4                	jmp    c000c85c <loadACPITables(unsigned char*)+0xbc>
c000c8a8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000c8b0:	a1 60 2b 03 c0       	mov    eax,ds:0xc0032b60
c000c8b5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000c8b9:	0f 8d 39 01 00 00    	jge    c000c9f8 <loadACPITables(unsigned char*)+0x258>
c000c8bf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c8c3:	8b 04 c5 84 2b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcd47c]
c000c8ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c8ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c8d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8da:	25 ff 0f 00 00       	and    eax,0xfff
c000c8df:	89 c6                	mov    esi,eax
c000c8e1:	8b 1d 90 32 03 c0    	mov    ebx,DWORD PTR ds:0xc0033290
c000c8e7:	83 ec 0c             	sub    esp,0xc
c000c8ea:	6a 01                	push   0x1
c000c8ec:	e8 7e 6f 00 00       	call   c001386f <Virt::allocateKernelVirtualPages(int)>
c000c8f1:	83 c4 10             	add    esp,0x10
c000c8f4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c8f8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c8fe:	83 ec 0c             	sub    esp,0xc
c000c901:	6a 01                	push   0x1
c000c903:	6a 01                	push   0x1
c000c905:	50                   	push   eax
c000c906:	52                   	push   edx
c000c907:	53                   	push   ebx
c000c908:	e8 35 78 00 00       	call   c0014142 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c90d:	83 c4 20             	add    esp,0x20
c000c910:	09 f0                	or     eax,esi
c000c912:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c916:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c91a:	c1 e0 03             	shl    eax,0x3
c000c91d:	05 80 2b 03 c0       	add    eax,0xc0032b80
c000c922:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c926:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c92a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c92e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000c936:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c93a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c93e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c942:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c946:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c94a:	89 c6                	mov    esi,eax
c000c94c:	89 d7                	mov    edi,edx
c000c94e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c950:	89 c8                	mov    eax,ecx
c000c952:	89 fa                	mov    edx,edi
c000c954:	89 f3                	mov    ebx,esi
c000c956:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c95a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c95e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c962:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c966:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c969:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c971:	05 00 10 00 00       	add    eax,0x1000
c000c976:	c1 e8 0c             	shr    eax,0xc
c000c979:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c97d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c981:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c985:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c989:	25 ff 0f 00 00       	and    eax,0xfff
c000c98e:	89 c6                	mov    esi,eax
c000c990:	8b 1d 90 32 03 c0    	mov    ebx,DWORD PTR ds:0xc0033290
c000c996:	83 ec 0c             	sub    esp,0xc
c000c999:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c99d:	e8 cd 6e 00 00       	call   c001386f <Virt::allocateKernelVirtualPages(int)>
c000c9a2:	83 c4 10             	add    esp,0x10
c000c9a5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c9a9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c9af:	83 ec 0c             	sub    esp,0xc
c000c9b2:	6a 01                	push   0x1
c000c9b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9b8:	50                   	push   eax
c000c9b9:	52                   	push   edx
c000c9ba:	53                   	push   ebx
c000c9bb:	e8 82 77 00 00       	call   c0014142 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c9c0:	83 c4 20             	add    esp,0x20
c000c9c3:	09 f0                	or     eax,esi
c000c9c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9cd:	83 ec 0c             	sub    esp,0xc
c000c9d0:	50                   	push   eax
c000c9d1:	e8 97 71 00 00       	call   c0013b6d <Virt::freeKernelVirtualPages(unsigned long)>
c000c9d6:	83 c4 10             	add    esp,0x10
c000c9d9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c9dd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c9e1:	89 14 c5 84 2b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd47c],edx
c000c9e8:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000c9ed:	e9 be fe ff ff       	jmp    c000c8b0 <loadACPITables(unsigned char*)+0x110>
c000c9f2:	66 90                	xchg   ax,ax
c000c9f4:	90                   	nop
c000c9f5:	8d 76 00             	lea    esi,[esi+0x0]
c000c9f8:	83 c4 60             	add    esp,0x60
c000c9fb:	5b                   	pop    ebx
c000c9fc:	5e                   	pop    esi
c000c9fd:	5f                   	pop    edi
c000c9fe:	c3                   	ret    
c000c9ff:	90                   	nop

c000ca00 <findRSDT(unsigned char*)>:
c000ca00:	57                   	push   edi
c000ca01:	56                   	push   esi
c000ca02:	53                   	push   ebx
c000ca03:	83 ec 50             	sub    esp,0x50
c000ca06:	a1 88 2d 03 c0       	mov    eax,ds:0xc0032d88
c000ca0b:	85 c0                	test   eax,eax
c000ca0d:	75 0d                	jne    c000ca1c <findRSDT(unsigned char*)+0x1c>
c000ca0f:	b8 00 00 00 00       	mov    eax,0x0
c000ca14:	e9 2b 01 00 00       	jmp    c000cb44 <findRSDT(unsigned char*)+0x144>
c000ca19:	8d 76 00             	lea    esi,[esi+0x0]
c000ca1c:	89 e0                	mov    eax,esp
c000ca1e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ca22:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ca26:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ca2a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000ca32:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ca36:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca3a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ca3e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ca42:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ca46:	89 c6                	mov    esi,eax
c000ca48:	89 d7                	mov    edi,edx
c000ca4a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ca4c:	89 c8                	mov    eax,ecx
c000ca4e:	89 fa                	mov    edx,edi
c000ca50:	89 f3                	mov    ebx,esi
c000ca52:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000ca56:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000ca5a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ca5e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ca62:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000ca66:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000ca6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ca72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ca76:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ca7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca7e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ca82:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ca86:	25 ff 0f 00 00       	and    eax,0xfff
c000ca8b:	89 c6                	mov    esi,eax
c000ca8d:	8b 1d 90 32 03 c0    	mov    ebx,DWORD PTR ds:0xc0033290
c000ca93:	83 ec 0c             	sub    esp,0xc
c000ca96:	6a 02                	push   0x2
c000ca98:	e8 d2 6d 00 00       	call   c001386f <Virt::allocateKernelVirtualPages(int)>
c000ca9d:	83 c4 10             	add    esp,0x10
c000caa0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000caa4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000caaa:	83 ec 0c             	sub    esp,0xc
c000caad:	6a 01                	push   0x1
c000caaf:	6a 02                	push   0x2
c000cab1:	50                   	push   eax
c000cab2:	52                   	push   edx
c000cab3:	53                   	push   ebx
c000cab4:	e8 89 76 00 00       	call   c0014142 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cab9:	83 c4 20             	add    esp,0x20
c000cabc:	09 f0                	or     eax,esi
c000cabe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000cac2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cac6:	25 ff 0f 00 00       	and    eax,0xfff
c000cacb:	89 c6                	mov    esi,eax
c000cacd:	8b 1d 90 32 03 c0    	mov    ebx,DWORD PTR ds:0xc0033290
c000cad3:	83 ec 0c             	sub    esp,0xc
c000cad6:	6a 02                	push   0x2
c000cad8:	e8 92 6d 00 00       	call   c001386f <Virt::allocateKernelVirtualPages(int)>
c000cadd:	83 c4 10             	add    esp,0x10
c000cae0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000cae4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000caea:	83 ec 0c             	sub    esp,0xc
c000caed:	6a 01                	push   0x1
c000caef:	6a 02                	push   0x2
c000caf1:	50                   	push   eax
c000caf2:	52                   	push   edx
c000caf3:	53                   	push   ebx
c000caf4:	e8 49 76 00 00       	call   c0014142 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000caf9:	83 c4 20             	add    esp,0x20
c000cafc:	09 f0                	or     eax,esi
c000cafe:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cb02:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000cb07:	85 c0                	test   eax,eax
c000cb09:	75 11                	jne    c000cb1c <findRSDT(unsigned char*)+0x11c>
c000cb0b:	c6 05 80 2d 03 c0 00 	mov    BYTE PTR ds:0xc0032d80,0x0
c000cb12:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb16:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb1a:	eb 24                	jmp    c000cb40 <findRSDT(unsigned char*)+0x140>
c000cb1c:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000cb21:	83 f8 02             	cmp    eax,0x2
c000cb24:	75 12                	jne    c000cb38 <findRSDT(unsigned char*)+0x138>
c000cb26:	c6 05 80 2d 03 c0 01 	mov    BYTE PTR ds:0xc0032d80,0x1
c000cb2d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000cb31:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb35:	eb 09                	jmp    c000cb40 <findRSDT(unsigned char*)+0x140>
c000cb37:	90                   	nop
c000cb38:	b8 00 00 00 00       	mov    eax,0x0
c000cb3d:	eb 05                	jmp    c000cb44 <findRSDT(unsigned char*)+0x144>
c000cb3f:	90                   	nop
c000cb40:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000cb44:	83 c4 50             	add    esp,0x50
c000cb47:	5b                   	pop    ebx
c000cb48:	5e                   	pop    esi
c000cb49:	5f                   	pop    edi
c000cb4a:	c3                   	ret    
c000cb4b:	90                   	nop

c000cb4c <findDataTable(unsigned char*, char*)>:
c000cb4c:	83 ec 1c             	sub    esp,0x1c
c000cb4f:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000cb54:	75 0a                	jne    c000cb60 <findDataTable(unsigned char*, char*)+0x14>
c000cb56:	b8 00 00 00 00       	mov    eax,0x0
c000cb5b:	eb 5f                	jmp    c000cbbc <findDataTable(unsigned char*, char*)+0x70>
c000cb5d:	8d 76 00             	lea    esi,[esi+0x0]
c000cb60:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000cb68:	a1 60 2b 03 c0       	mov    eax,ds:0xc0032b60
c000cb6d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000cb71:	7d 41                	jge    c000cbb4 <findDataTable(unsigned char*, char*)+0x68>
c000cb73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb77:	c1 e0 03             	shl    eax,0x3
c000cb7a:	05 80 2b 03 c0       	add    eax,0xc0032b80
c000cb7f:	83 ec 04             	sub    esp,0x4
c000cb82:	6a 04                	push   0x4
c000cb84:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb88:	50                   	push   eax
c000cb89:	e8 f2 37 ff ff       	call   c0000380 <memcmp>
c000cb8e:	83 c4 10             	add    esp,0x10
c000cb91:	85 c0                	test   eax,eax
c000cb93:	0f 94 c0             	sete   al
c000cb96:	0f b6 c0             	movzx  eax,al
c000cb99:	85 c0                	test   eax,eax
c000cb9b:	74 0f                	je     c000cbac <findDataTable(unsigned char*, char*)+0x60>
c000cb9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cba1:	8b 04 c5 84 2b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcd47c]
c000cba8:	eb 12                	jmp    c000cbbc <findDataTable(unsigned char*, char*)+0x70>
c000cbaa:	66 90                	xchg   ax,ax
c000cbac:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000cbb1:	eb b5                	jmp    c000cb68 <findDataTable(unsigned char*, char*)+0x1c>
c000cbb3:	90                   	nop
c000cbb4:	b8 00 00 00 00       	mov    eax,0x0
c000cbb9:	8d 76 00             	lea    esi,[esi+0x0]
c000cbbc:	83 c4 1c             	add    esp,0x1c
c000cbbf:	c3                   	ret    

c000cbc0 <scanMADT()>:
c000cbc0:	53                   	push   ebx
c000cbc1:	83 ec 38             	sub    esp,0x38
c000cbc4:	c7 05 88 2d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032d88,0x0
c000cbce:	c7 05 84 2d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032d84,0x0
c000cbd8:	83 ec 0c             	sub    esp,0xc
c000cbdb:	68 50 96 02 c0       	push   0xc0029650
c000cbe0:	e8 81 a3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000cbe5:	83 c4 10             	add    esp,0x10
c000cbe8:	e8 67 db 00 00       	call   c001a754 <HalFindRSDP()>
c000cbed:	a3 88 2d 03 c0       	mov    ds:0xc0032d88,eax
c000cbf2:	a1 88 2d 03 c0       	mov    eax,ds:0xc0032d88
c000cbf7:	85 c0                	test   eax,eax
c000cbf9:	0f 84 59 04 00 00    	je     c000d058 <scanMADT()+0x498>
c000cbff:	83 ec 0c             	sub    esp,0xc
c000cc02:	68 5e 96 02 c0       	push   0xc002965e
c000cc07:	e8 5a a3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000cc0c:	83 c4 10             	add    esp,0x10
c000cc0f:	a1 88 2d 03 c0       	mov    eax,ds:0xc0032d88
c000cc14:	83 ec 0c             	sub    esp,0xc
c000cc17:	50                   	push   eax
c000cc18:	e8 e3 fd ff ff       	call   c000ca00 <findRSDT(unsigned char*)>
c000cc1d:	83 c4 10             	add    esp,0x10
c000cc20:	a3 84 2d 03 c0       	mov    ds:0xc0032d84,eax
c000cc25:	a1 84 2d 03 c0       	mov    eax,ds:0xc0032d84
c000cc2a:	85 c0                	test   eax,eax
c000cc2c:	0f 84 2a 04 00 00    	je     c000d05c <scanMADT()+0x49c>
c000cc32:	8b 15 84 2d 03 c0    	mov    edx,DWORD PTR ds:0xc0032d84
c000cc38:	a1 88 2d 03 c0       	mov    eax,ds:0xc0032d88
c000cc3d:	83 ec 04             	sub    esp,0x4
c000cc40:	52                   	push   edx
c000cc41:	50                   	push   eax
c000cc42:	68 08 98 02 c0       	push   0xc0029808
c000cc47:	e8 1a a3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000cc4c:	83 c4 10             	add    esp,0x10
c000cc4f:	a1 84 2d 03 c0       	mov    eax,ds:0xc0032d84
c000cc54:	83 ec 0c             	sub    esp,0xc
c000cc57:	50                   	push   eax
c000cc58:	e8 43 fb ff ff       	call   c000c7a0 <loadACPITables(unsigned char*)>
c000cc5d:	83 c4 10             	add    esp,0x10
c000cc60:	a1 84 2d 03 c0       	mov    eax,ds:0xc0032d84
c000cc65:	83 ec 08             	sub    esp,0x8
c000cc68:	68 6d 96 02 c0       	push   0xc002966d
c000cc6d:	50                   	push   eax
c000cc6e:	e8 d9 fe ff ff       	call   c000cb4c <findDataTable(unsigned char*, char*)>
c000cc73:	83 c4 10             	add    esp,0x10
c000cc76:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7a:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cc7f:	0f 84 db 03 00 00    	je     c000d060 <scanMADT()+0x4a0>
c000cc85:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000cc8d:	8d 76 00             	lea    esi,[esi+0x0]
c000cc90:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cc94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cc97:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000cc9b:	0f 87 c7 03 00 00    	ja     c000d068 <scanMADT()+0x4a8>
c000cca1:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000cca9:	0f 87 b9 03 00 00    	ja     c000d068 <scanMADT()+0x4a8>
c000ccaf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ccb3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ccb7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ccbb:	8d 50 01             	lea    edx,[eax+0x1]
c000ccbe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccc2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ccc6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ccca:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000ccce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ccd2:	8d 50 01             	lea    edx,[eax+0x1]
c000ccd5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccd9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ccdd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000cce1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000cce5:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000ccea:	83 f8 02             	cmp    eax,0x2
c000cced:	0f 86 71 03 00 00    	jbe    c000d064 <scanMADT()+0x4a4>
c000ccf3:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ccf8:	85 c0                	test   eax,eax
c000ccfa:	75 58                	jne    c000cd54 <scanMADT()+0x194>
c000ccfc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cd00:	8d 50 01             	lea    edx,[eax+0x1]
c000cd03:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd07:	8a 15 80 2f 03 c0    	mov    dl,BYTE PTR ds:0xc0032f80
c000cd0d:	0f b6 d2             	movzx  edx,dl
c000cd10:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000cd14:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000cd18:	88 82 c0 2f 03 c0    	mov    BYTE PTR [edx-0x3ffcd040],al
c000cd1e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cd22:	8d 50 01             	lea    edx,[eax+0x1]
c000cd25:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd29:	8a 15 80 2f 03 c0    	mov    dl,BYTE PTR ds:0xc0032f80
c000cd2f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cd32:	88 0d 80 2f 03 c0    	mov    BYTE PTR ds:0xc0032f80,cl
c000cd38:	0f b6 d2             	movzx  edx,dl
c000cd3b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000cd3f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000cd43:	88 82 a0 2f 03 c0    	mov    BYTE PTR [edx-0x3ffcd060],al
c000cd49:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000cd4e:	e9 f1 02 00 00       	jmp    c000d044 <scanMADT()+0x484>
c000cd53:	90                   	nop
c000cd54:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000cd59:	83 f8 01             	cmp    eax,0x1
c000cd5c:	0f 85 32 01 00 00    	jne    c000ce94 <scanMADT()+0x2d4>
c000cd62:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cd66:	8d 50 01             	lea    edx,[eax+0x1]
c000cd69:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd6d:	8a 15 40 2e 03 c0    	mov    dl,BYTE PTR ds:0xc0032e40
c000cd73:	0f b6 d2             	movzx  edx,dl
c000cd76:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000cd7a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000cd7e:	88 82 60 2e 03 c0    	mov    BYTE PTR [edx-0x3ffcd1a0],al
c000cd84:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000cd89:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cd8d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cd91:	01 d0                	add    eax,edx
c000cd93:	83 c0 2c             	add    eax,0x2c
c000cd96:	8a 00                	mov    al,BYTE PTR [eax]
c000cd98:	0f b6 d0             	movzx  edx,al
c000cd9b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cd9f:	8d 48 01             	lea    ecx,[eax+0x1]
c000cda2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cda6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000cdaa:	0f b6 c0             	movzx  eax,al
c000cdad:	c1 e0 08             	shl    eax,0x8
c000cdb0:	89 d1                	mov    ecx,edx
c000cdb2:	09 c1                	or     ecx,eax
c000cdb4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cdb8:	8d 50 02             	lea    edx,[eax+0x2]
c000cdbb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cdbf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000cdc3:	0f b6 c0             	movzx  eax,al
c000cdc6:	c1 e0 10             	shl    eax,0x10
c000cdc9:	09 c1                	or     ecx,eax
c000cdcb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cdcf:	8d 50 03             	lea    edx,[eax+0x3]
c000cdd2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cdd6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000cdda:	0f b6 c0             	movzx  eax,al
c000cddd:	c1 e0 18             	shl    eax,0x18
c000cde0:	09 c1                	or     ecx,eax
c000cde2:	89 ca                	mov    edx,ecx
c000cde4:	a0 40 2e 03 c0       	mov    al,ds:0xc0032e40
c000cde9:	0f b6 c0             	movzx  eax,al
c000cdec:	89 14 85 80 2e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd180],edx
c000cdf3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000cdf8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cdfc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce00:	01 d0                	add    eax,edx
c000ce02:	83 c0 2c             	add    eax,0x2c
c000ce05:	8a 00                	mov    al,BYTE PTR [eax]
c000ce07:	0f b6 d0             	movzx  edx,al
c000ce0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce0e:	8d 48 01             	lea    ecx,[eax+0x1]
c000ce11:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce15:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ce19:	0f b6 c0             	movzx  eax,al
c000ce1c:	c1 e0 08             	shl    eax,0x8
c000ce1f:	89 d1                	mov    ecx,edx
c000ce21:	09 c1                	or     ecx,eax
c000ce23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce27:	8d 50 02             	lea    edx,[eax+0x2]
c000ce2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce2e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ce32:	0f b6 c0             	movzx  eax,al
c000ce35:	c1 e0 10             	shl    eax,0x10
c000ce38:	09 c1                	or     ecx,eax
c000ce3a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce3e:	8d 50 03             	lea    edx,[eax+0x3]
c000ce41:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce45:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ce49:	0f b6 c0             	movzx  eax,al
c000ce4c:	c1 e0 18             	shl    eax,0x18
c000ce4f:	09 c1                	or     ecx,eax
c000ce51:	89 ca                	mov    edx,ecx
c000ce53:	a0 40 2e 03 c0       	mov    al,ds:0xc0032e40
c000ce58:	0f b6 c0             	movzx  eax,al
c000ce5b:	89 14 85 00 2f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd100],edx
c000ce62:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ce67:	a0 40 2e 03 c0       	mov    al,ds:0xc0032e40
c000ce6c:	83 c0 01             	add    eax,0x1
c000ce6f:	a2 40 2e 03 c0       	mov    ds:0xc0032e40,al
c000ce74:	a0 40 2e 03 c0       	mov    al,ds:0xc0032e40
c000ce79:	0f b6 c0             	movzx  eax,al
c000ce7c:	83 ec 08             	sub    esp,0x8
c000ce7f:	50                   	push   eax
c000ce80:	68 72 96 02 c0       	push   0xc0029672
c000ce85:	e8 dc a0 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000ce8a:	83 c4 10             	add    esp,0x10
c000ce8d:	e9 b2 01 00 00       	jmp    c000d044 <scanMADT()+0x484>
c000ce92:	66 90                	xchg   ax,ax
c000ce94:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ce99:	83 f8 02             	cmp    eax,0x2
c000ce9c:	0f 85 ea 00 00 00    	jne    c000cf8c <scanMADT()+0x3cc>
c000cea2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cea6:	8d 50 01             	lea    edx,[eax+0x1]
c000cea9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cead:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ceb1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ceb5:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000ceb9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cebd:	8d 50 01             	lea    edx,[eax+0x1]
c000cec0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cec4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cec8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000cecc:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000ced0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ced4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ced8:	01 d0                	add    eax,edx
c000ceda:	83 c0 2c             	add    eax,0x2c
c000cedd:	8a 00                	mov    al,BYTE PTR [eax]
c000cedf:	0f b6 d0             	movzx  edx,al
c000cee2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cee6:	8d 48 01             	lea    ecx,[eax+0x1]
c000cee9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ceed:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000cef1:	0f b6 c0             	movzx  eax,al
c000cef4:	c1 e0 08             	shl    eax,0x8
c000cef7:	89 d1                	mov    ecx,edx
c000cef9:	09 c1                	or     ecx,eax
c000cefb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ceff:	8d 50 02             	lea    edx,[eax+0x2]
c000cf02:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cf06:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000cf0a:	0f b6 c0             	movzx  eax,al
c000cf0d:	c1 e0 10             	shl    eax,0x10
c000cf10:	09 c1                	or     ecx,eax
c000cf12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf16:	8d 50 03             	lea    edx,[eax+0x3]
c000cf19:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cf1d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000cf21:	0f b6 c0             	movzx  eax,al
c000cf24:	c1 e0 18             	shl    eax,0x18
c000cf27:	09 c8                	or     eax,ecx
c000cf29:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cf2d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000cf32:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cf36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf3a:	01 d0                	add    eax,edx
c000cf3c:	83 c0 2c             	add    eax,0x2c
c000cf3f:	8a 00                	mov    al,BYTE PTR [eax]
c000cf41:	0f b6 d0             	movzx  edx,al
c000cf44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf48:	8d 48 01             	lea    ecx,[eax+0x1]
c000cf4b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cf4f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000cf53:	0f b6 c0             	movzx  eax,al
c000cf56:	c1 e0 08             	shl    eax,0x8
c000cf59:	09 d0                	or     eax,edx
c000cf5b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000cf60:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000cf65:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000cf6a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cf6e:	88 90 88 cc 02 c0    	mov    BYTE PTR [eax-0x3ffd3378],dl
c000cf74:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000cf79:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000cf7e:	66 89 94 00 20 2e 03 c0 	mov    WORD PTR [eax+eax*1-0x3ffcd1e0],dx
c000cf86:	e9 b9 00 00 00       	jmp    c000d044 <scanMADT()+0x484>
c000cf8b:	90                   	nop
c000cf8c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000cf91:	83 f8 04             	cmp    eax,0x4
c000cf94:	0f 85 9a 00 00 00    	jne    c000d034 <scanMADT()+0x474>
c000cf9a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf9e:	8d 50 01             	lea    edx,[eax+0x1]
c000cfa1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cfa5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cfa9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000cfad:	0f b6 c0             	movzx  eax,al
c000cfb0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cfb4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cfb8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfbc:	01 d0                	add    eax,edx
c000cfbe:	83 c0 2c             	add    eax,0x2c
c000cfc1:	8a 00                	mov    al,BYTE PTR [eax]
c000cfc3:	0f b6 d0             	movzx  edx,al
c000cfc6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfca:	8d 48 01             	lea    ecx,[eax+0x1]
c000cfcd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cfd1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000cfd5:	0f b6 c0             	movzx  eax,al
c000cfd8:	c1 e0 08             	shl    eax,0x8
c000cfdb:	09 d0                	or     eax,edx
c000cfdd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cfe1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000cfe6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfea:	8d 50 01             	lea    edx,[eax+0x1]
c000cfed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cff1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cff5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000cff9:	0f b6 c0             	movzx  eax,al
c000cffc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d004:	c1 e0 08             	shl    eax,0x8
c000d007:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d00b:	89 c1                	mov    ecx,eax
c000d00d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d011:	c1 e0 18             	shl    eax,0x18
c000d014:	89 c3                	mov    ebx,eax
c000d016:	a1 8c 2d 03 c0       	mov    eax,ds:0xc0032d8c
c000d01b:	8d 50 01             	lea    edx,[eax+0x1]
c000d01e:	89 15 8c 2d 03 c0    	mov    DWORD PTR ds:0xc0032d8c,edx
c000d024:	09 d9                	or     ecx,ebx
c000d026:	89 ca                	mov    edx,ecx
c000d028:	89 14 85 a0 2d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd260],edx
c000d02f:	eb 13                	jmp    c000d044 <scanMADT()+0x484>
c000d031:	8d 76 00             	lea    esi,[esi+0x0]
c000d034:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000d039:	83 f8 05             	cmp    eax,0x5
c000d03c:	75 06                	jne    c000d044 <scanMADT()+0x484>
c000d03e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000d043:	90                   	nop
c000d044:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000d049:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d04d:	01 d0                	add    eax,edx
c000d04f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d053:	e9 38 fc ff ff       	jmp    c000cc90 <scanMADT()+0xd0>
c000d058:	90                   	nop
c000d059:	eb 0d                	jmp    c000d068 <scanMADT()+0x4a8>
c000d05b:	90                   	nop
c000d05c:	90                   	nop
c000d05d:	eb 09                	jmp    c000d068 <scanMADT()+0x4a8>
c000d05f:	90                   	nop
c000d060:	90                   	nop
c000d061:	eb 05                	jmp    c000d068 <scanMADT()+0x4a8>
c000d063:	90                   	nop
c000d064:	90                   	nop
c000d065:	8d 76 00             	lea    esi,[esi+0x0]
c000d068:	83 c4 38             	add    esp,0x38
c000d06b:	5b                   	pop    ebx
c000d06c:	c3                   	ret    
c000d06d:	90                   	nop
c000d06e:	66 90                	xchg   ax,ax

c000d070 <ACPI::ACPI()>:
c000d070:	83 ec 0c             	sub    esp,0xc
c000d073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d077:	83 ec 08             	sub    esp,0x8
c000d07a:	68 8e 96 02 c0       	push   0xc002968e
c000d07f:	50                   	push   eax
c000d080:	e8 1f d3 ff ff       	call   c000a3a4 <Device::Device(char const*)>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	ba ac 98 02 c0       	mov    edx,0xc00298ac
c000d08d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d091:	89 10                	mov    DWORD PTR [eax],edx
c000d093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d097:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000d09e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0a2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000d0ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0b0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000d0ba:	90                   	nop
c000d0bb:	83 c4 0c             	add    esp,0xc
c000d0be:	c3                   	ret    
c000d0bf:	90                   	nop

c000d0c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000d0c0:	83 ec 2c             	sub    esp,0x2c
c000d0c3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000d0c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d0cb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000d0cf:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000d0d3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000d0d8:	88 c8                	mov    al,cl
c000d0da:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000d0de:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d0e3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d0eb:	90                   	nop
c000d0ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d0f0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000d0f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000d0fa:	0f 8d b0 00 00 00    	jge    c000d1b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000d100:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d104:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d108:	83 c2 2a             	add    edx,0x2a
c000d10b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000d10f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000d114:	0f b7 c0             	movzx  eax,ax
c000d117:	39 c2                	cmp    edx,eax
c000d119:	0f 85 85 00 00 00    	jne    c000d1a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000d11f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d123:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d127:	83 c2 2a             	add    edx,0x2a
c000d12a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000d12e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000d133:	0f b6 c0             	movzx  eax,al
c000d136:	39 c2                	cmp    edx,eax
c000d138:	75 6a                	jne    c000d1a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000d13a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000d13f:	85 c0                	test   eax,eax
c000d141:	74 3d                	je     c000d180 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000d143:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d147:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d14b:	83 c2 2a             	add    edx,0x2a
c000d14e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000d152:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d156:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d159:	39 c2                	cmp    edx,eax
c000d15b:	74 13                	je     c000d170 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000d15d:	83 ec 0c             	sub    esp,0xc
c000d160:	68 2c 98 02 c0       	push   0xc002982c
c000d165:	e8 be 31 00 00       	call   c0010328 <KePanic(char const*)>
c000d16a:	83 c4 10             	add    esp,0x10
c000d16d:	8d 76 00             	lea    esi,[esi+0x0]
c000d170:	83 ec 0c             	sub    esp,0xc
c000d173:	68 93 96 02 c0       	push   0xc0029693
c000d178:	e8 ab 31 00 00       	call   c0010328 <KePanic(char const*)>
c000d17d:	83 c4 10             	add    esp,0x10
c000d180:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000d184:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d188:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d18c:	83 c2 2a             	add    edx,0x2a
c000d18f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000d193:	8b 02                	mov    eax,DWORD PTR [edx]
c000d195:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000d198:	89 01                	mov    DWORD PTR [ecx],eax
c000d19a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d19d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d1a2:	66 90                	xchg   ax,ax
c000d1a4:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000d1a9:	e9 3e ff ff ff       	jmp    c000d0ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000d1ae:	66 90                	xchg   ax,ax
c000d1b0:	90                   	nop
c000d1b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d1b5:	83 c4 2c             	add    esp,0x2c
c000d1b8:	c2 04 00             	ret    0x4
c000d1bb:	90                   	nop

c000d1bc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000d1bc:	83 ec 1c             	sub    esp,0x1c
c000d1bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d1c3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d1c7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000d1cb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000d1d0:	88 c8                	mov    al,cl
c000d1d2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000d1d6:	88 d0                	mov    al,dl
c000d1d8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000d1dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d1e0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000d1e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d1ea:	83 c2 2a             	add    edx,0x2a
c000d1ed:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000d1f1:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000d1f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d1f9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000d1ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d203:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000d206:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d20a:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000d20f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d213:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000d219:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000d21d:	83 c0 01             	add    eax,0x1
c000d220:	88 c1                	mov    cl,al
c000d222:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d226:	83 c2 2a             	add    edx,0x2a
c000d229:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000d22d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d231:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000d237:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d23b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000d23e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d242:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000d246:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d24a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000d250:	8d 50 01             	lea    edx,[eax+0x1]
c000d253:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d257:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000d25d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d261:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000d267:	3d 00 02 00 00       	cmp    eax,0x200
c000d26c:	75 12                	jne    c000d280 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000d26e:	83 ec 0c             	sub    esp,0xc
c000d271:	68 a2 96 02 c0       	push   0xc00296a2
c000d276:	e8 ad 30 00 00       	call   c0010328 <KePanic(char const*)>
c000d27b:	83 c4 10             	add    esp,0x10
c000d27e:	66 90                	xchg   ax,ax
c000d280:	90                   	nop
c000d281:	83 c4 1c             	add    esp,0x1c
c000d284:	c3                   	ret    
c000d285:	90                   	nop
c000d286:	66 90                	xchg   ax,ax

c000d288 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000d288:	b8 00 00 00 00       	mov    eax,0x0
c000d28d:	c3                   	ret    
c000d28e:	66 90                	xchg   ax,ax

c000d290 <ACPI::detectPCI()>:
c000d290:	53                   	push   ebx
c000d291:	83 ec 28             	sub    esp,0x28
c000d294:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d299:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000d29e:	a1 84 2d 03 c0       	mov    eax,ds:0xc0032d84
c000d2a3:	83 ec 08             	sub    esp,0x8
c000d2a6:	68 bf 96 02 c0       	push   0xc00296bf
c000d2ab:	50                   	push   eax
c000d2ac:	e8 9b f8 ff ff       	call   c000cb4c <findDataTable(unsigned char*, char*)>
c000d2b1:	83 c4 10             	add    esp,0x10
c000d2b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d2b8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000d2bd:	74 0d                	je     c000d2cc <ACPI::detectPCI()+0x3c>
c000d2bf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d2c4:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000d2c9:	8d 76 00             	lea    esi,[esi+0x0]
c000d2cc:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000d2d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d2d8:	8a 00                	mov    al,BYTE PTR [eax]
c000d2da:	0f b6 c0             	movzx  eax,al
c000d2dd:	83 f8 01             	cmp    eax,0x1
c000d2e0:	75 0e                	jne    c000d2f0 <ACPI::detectPCI()+0x60>
c000d2e2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d2e7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000d2ec:	eb 2e                	jmp    c000d31c <ACPI::detectPCI()+0x8c>
c000d2ee:	66 90                	xchg   ax,ax
c000d2f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d2f4:	8a 00                	mov    al,BYTE PTR [eax]
c000d2f6:	0f b6 c0             	movzx  eax,al
c000d2f9:	83 f8 02             	cmp    eax,0x2
c000d2fc:	75 1e                	jne    c000d31c <ACPI::detectPCI()+0x8c>
c000d2fe:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d303:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000d308:	85 c0                	test   eax,eax
c000d30a:	74 10                	je     c000d31c <ACPI::detectPCI()+0x8c>
c000d30c:	83 ec 0c             	sub    esp,0xc
c000d30f:	68 5c 98 02 c0       	push   0xc002985c
c000d314:	e8 0f 30 00 00       	call   c0010328 <KePanic(char const*)>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000d320:	83 f0 01             	xor    eax,0x1
c000d323:	0f b6 c0             	movzx  eax,al
c000d326:	85 c0                	test   eax,eax
c000d328:	74 46                	je     c000d370 <ACPI::detectPCI()+0xe0>
c000d32a:	e8 01 2e ff ff       	call   c0000130 <manualPCIProbe>
c000d32f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d333:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000d338:	75 0e                	jne    c000d348 <ACPI::detectPCI()+0xb8>
c000d33a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d33f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000d344:	eb 2a                	jmp    c000d370 <ACPI::detectPCI()+0xe0>
c000d346:	66 90                	xchg   ax,ax
c000d348:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000d34d:	75 21                	jne    c000d370 <ACPI::detectPCI()+0xe0>
c000d34f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d354:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000d359:	85 c0                	test   eax,eax
c000d35b:	74 13                	je     c000d370 <ACPI::detectPCI()+0xe0>
c000d35d:	83 ec 0c             	sub    esp,0xc
c000d360:	68 5c 98 02 c0       	push   0xc002985c
c000d365:	e8 be 2f 00 00       	call   c0010328 <KePanic(char const*)>
c000d36a:	83 c4 10             	add    esp,0x10
c000d36d:	8d 76 00             	lea    esi,[esi+0x0]
c000d370:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000d375:	85 c0                	test   eax,eax
c000d377:	0f 84 87 00 00 00    	je     c000d404 <ACPI::detectPCI()+0x174>
c000d37d:	83 ec 0c             	sub    esp,0xc
c000d380:	68 c4 96 02 c0       	push   0xc00296c4
c000d385:	e8 9f 06 00 00       	call   c000da29 <KeSetBootMessage(char const*)>
c000d38a:	83 c4 10             	add    esp,0x10
c000d38d:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000d395:	83 ec 0c             	sub    esp,0xc
c000d398:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d39c:	e8 33 2b 00 00       	call   c000fed4 <malloc>
c000d3a1:	83 c4 10             	add    esp,0x10
c000d3a4:	89 c3                	mov    ebx,eax
c000d3a6:	83 ec 0c             	sub    esp,0xc
c000d3a9:	53                   	push   ebx
c000d3aa:	e8 fb 19 01 00       	call   c001edaa <PCI::PCI()>
c000d3af:	83 c4 10             	add    esp,0x10
c000d3b2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000d3b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d3ba:	83 ec 08             	sub    esp,0x8
c000d3bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3c1:	50                   	push   eax
c000d3c2:	e8 7b ce ff ff       	call   c000a242 <Device::addChild(Device*)>
c000d3c7:	83 c4 10             	add    esp,0x10
c000d3ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3ce:	8b 00                	mov    eax,DWORD PTR [eax]
c000d3d0:	83 c0 08             	add    eax,0x8
c000d3d3:	8b 00                	mov    eax,DWORD PTR [eax]
c000d3d5:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000d3da:	85 d2                	test   edx,edx
c000d3dc:	74 0a                	je     c000d3e8 <ACPI::detectPCI()+0x158>
c000d3de:	ba 01 00 00 00       	mov    edx,0x1
c000d3e3:	eb 0b                	jmp    c000d3f0 <ACPI::detectPCI()+0x160>
c000d3e5:	8d 76 00             	lea    esi,[esi+0x0]
c000d3e8:	ba 02 00 00 00       	mov    edx,0x2
c000d3ed:	8d 76 00             	lea    esi,[esi+0x0]
c000d3f0:	6a 00                	push   0x0
c000d3f2:	6a 00                	push   0x0
c000d3f4:	52                   	push   edx
c000d3f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3f9:	ff d0                	call   eax
c000d3fb:	83 c4 10             	add    esp,0x10
c000d3fe:	e9 91 00 00 00       	jmp    c000d494 <ACPI::detectPCI()+0x204>
c000d403:	90                   	nop
c000d404:	83 ec 0c             	sub    esp,0xc
c000d407:	68 dc 96 02 c0       	push   0xc00296dc
c000d40c:	e8 18 06 00 00       	call   c000da29 <KeSetBootMessage(char const*)>
c000d411:	83 c4 10             	add    esp,0x10
c000d414:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000d41b:	83 ec 0c             	sub    esp,0xc
c000d41e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d422:	e8 ad 2a 00 00       	call   c000fed4 <malloc>
c000d427:	83 c4 10             	add    esp,0x10
c000d42a:	89 c3                	mov    ebx,eax
c000d42c:	83 ec 0c             	sub    esp,0xc
c000d42f:	53                   	push   ebx
c000d430:	e8 7d 25 01 00       	call   c001f9b2 <IDE::IDE()>
c000d435:	83 c4 10             	add    esp,0x10
c000d438:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000d43c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d440:	83 ec 08             	sub    esp,0x8
c000d443:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d447:	50                   	push   eax
c000d448:	e8 f5 cd ff ff       	call   c000a242 <Device::addChild(Device*)>
c000d44d:	83 c4 10             	add    esp,0x10
c000d450:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d454:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000d45e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d462:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000d46b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d46f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000d478:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d47c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d47e:	83 c0 08             	add    eax,0x8
c000d481:	8b 00                	mov    eax,DWORD PTR [eax]
c000d483:	6a 00                	push   0x0
c000d485:	6a 00                	push   0x0
c000d487:	6a 00                	push   0x0
c000d489:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d48d:	ff d0                	call   eax
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	66 90                	xchg   ax,ax
c000d494:	90                   	nop
c000d495:	83 c4 28             	add    esp,0x28
c000d498:	5b                   	pop    ebx
c000d499:	c3                   	ret    
c000d49a:	66 90                	xchg   ax,ax

c000d49c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000d49c:	83 ec 0c             	sub    esp,0xc
c000d49f:	83 ec 0c             	sub    esp,0xc
c000d4a2:	68 f1 96 02 c0       	push   0xc00296f1
c000d4a7:	e8 7c 2e 00 00       	call   c0010328 <KePanic(char const*)>
c000d4ac:	83 c4 10             	add    esp,0x10
c000d4af:	90                   	nop
c000d4b0:	83 c4 0c             	add    esp,0xc
c000d4b3:	c3                   	ret    

c000d4b4 <ACPI::open(int, int, void*)>:
c000d4b4:	55                   	push   ebp
c000d4b5:	89 e5                	mov    ebp,esp
c000d4b7:	53                   	push   ebx
c000d4b8:	81 ec 74 01 00 00    	sub    esp,0x174
c000d4be:	83 ec 0c             	sub    esp,0xc
c000d4c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000d4c4:	e8 c7 fd ff ff       	call   c000d290 <ACPI::detectPCI()>
c000d4c9:	83 c4 10             	add    esp,0x10
c000d4cc:	83 ec 0c             	sub    esp,0xc
c000d4cf:	68 84 98 02 c0       	push   0xc0029884
c000d4d4:	e8 50 05 00 00       	call   c000da29 <KeSetBootMessage(char const*)>
c000d4d9:	83 c4 10             	add    esp,0x10
c000d4dc:	b8 4c 05 00 00       	mov    eax,0x54c
c000d4e1:	8a 00                	mov    al,BYTE PTR [eax]
c000d4e3:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000d4e6:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000d4ea:	83 f8 01             	cmp    eax,0x1
c000d4ed:	75 15                	jne    c000d504 <ACPI::open(int, int, void*)+0x50>
c000d4ef:	83 ec 0c             	sub    esp,0xc
c000d4f2:	68 02 97 02 c0       	push   0xc0029702
c000d4f7:	e8 87 88 00 00       	call   c0015d83 <Thr::loadKernelSymbolTable(char const*)>
c000d4fc:	83 c4 10             	add    esp,0x10
c000d4ff:	eb 33                	jmp    c000d534 <ACPI::open(int, int, void*)+0x80>
c000d501:	8d 76 00             	lea    esi,[esi+0x0]
c000d504:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000d508:	3d bb 00 00 00       	cmp    eax,0xbb
c000d50d:	75 15                	jne    c000d524 <ACPI::open(int, int, void*)+0x70>
c000d50f:	83 ec 0c             	sub    esp,0xc
c000d512:	68 20 97 02 c0       	push   0xc0029720
c000d517:	e8 67 88 00 00       	call   c0015d83 <Thr::loadKernelSymbolTable(char const*)>
c000d51c:	83 c4 10             	add    esp,0x10
c000d51f:	eb 13                	jmp    c000d534 <ACPI::open(int, int, void*)+0x80>
c000d521:	8d 76 00             	lea    esi,[esi+0x0]
c000d524:	83 ec 0c             	sub    esp,0xc
c000d527:	68 3e 97 02 c0       	push   0xc002973e
c000d52c:	e8 f7 2d 00 00       	call   c0010328 <KePanic(char const*)>
c000d531:	83 c4 10             	add    esp,0x10
c000d534:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d538:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000d53f:	83 ec 0c             	sub    esp,0xc
c000d542:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000d545:	e8 8a 29 00 00       	call   c000fed4 <malloc>
c000d54a:	83 c4 10             	add    esp,0x10
c000d54d:	89 c3                	mov    ebx,eax
c000d54f:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c000d554:	83 ec 04             	sub    esp,0x4
c000d557:	50                   	push   eax
c000d558:	68 58 97 02 c0       	push   0xc0029758
c000d55d:	53                   	push   ebx
c000d55e:	e8 71 b4 ff ff       	call   c00089d4 <File::File(char const*, Process*)>
c000d563:	83 c4 10             	add    esp,0x10
c000d566:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000d569:	83 ec 08             	sub    esp,0x8
c000d56c:	6a 01                	push   0x1
c000d56e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d571:	e8 7c b4 ff ff       	call   c00089f2 <File::open(FileOpenMode)>
c000d576:	83 c4 10             	add    esp,0x10
c000d579:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000d57c:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000d580:	75 12                	jne    c000d594 <ACPI::open(int, int, void*)+0xe0>
c000d582:	83 ec 0c             	sub    esp,0xc
c000d585:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d588:	e8 c3 b4 ff ff       	call   c0008a50 <File::close()>
c000d58d:	83 c4 10             	add    esp,0x10
c000d590:	eb 06                	jmp    c000d598 <ACPI::open(int, int, void*)+0xe4>
c000d592:	66 90                	xchg   ax,ax
c000d594:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d598:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000d59c:	74 16                	je     c000d5b4 <ACPI::open(int, int, void*)+0x100>
c000d59e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d5a1:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5a3:	83 c0 08             	add    eax,0x8
c000d5a6:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5a8:	83 ec 0c             	sub    esp,0xc
c000d5ab:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d5ae:	ff d0                	call   eax
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	90                   	nop
c000d5b4:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000d5b7:	83 f0 01             	xor    eax,0x1
c000d5ba:	0f b6 c0             	movzx  eax,al
c000d5bd:	85 c0                	test   eax,eax
c000d5bf:	74 27                	je     c000d5e8 <ACPI::open(int, int, void*)+0x134>
c000d5c1:	83 ec 0c             	sub    esp,0xc
c000d5c4:	68 76 97 02 c0       	push   0xc0029776
c000d5c9:	e8 5b 04 00 00       	call   c000da29 <KeSetBootMessage(char const*)>
c000d5ce:	83 c4 10             	add    esp,0x10
c000d5d1:	c7 45 e8 0c 00 00 00 	mov    DWORD PTR [ebp-0x18],0xc
c000d5d8:	83 ec 0c             	sub    esp,0xc
c000d5db:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000d5de:	e8 b1 64 00 00       	call   c0013a94 <Virt::setupPageSwapping(int)>
c000d5e3:	83 c4 10             	add    esp,0x10
c000d5e6:	66 90                	xchg   ax,ax
c000d5e8:	83 ec 0c             	sub    esp,0xc
c000d5eb:	68 91 97 02 c0       	push   0xc0029791
c000d5f0:	e8 34 04 00 00       	call   c000da29 <KeSetBootMessage(char const*)>
c000d5f5:	83 c4 10             	add    esp,0x10
c000d5f8:	8d 45 b8             	lea    eax,[ebp-0x48]
c000d5fb:	83 ec 08             	sub    esp,0x8
c000d5fe:	6a 13                	push   0x13
c000d600:	50                   	push   eax
c000d601:	e8 6a cf ff ff       	call   c000a570 <getDevicesOfType(DeviceType)>
c000d606:	83 c4 0c             	add    esp,0xc
c000d609:	8d 76 00             	lea    esi,[esi+0x0]
c000d60c:	83 ec 0c             	sub    esp,0xc
c000d60f:	8d 45 b8             	lea    eax,[ebp-0x48]
c000d612:	50                   	push   eax
c000d613:	e8 5c a3 01 00       	call   c0027974 <LinkedList<Device>::isEmpty()>
c000d618:	83 c4 10             	add    esp,0x10
c000d61b:	83 f0 01             	xor    eax,0x1
c000d61e:	0f b6 c0             	movzx  eax,al
c000d621:	85 c0                	test   eax,eax
c000d623:	0f 84 13 01 00 00    	je     c000d73c <ACPI::open(int, int, void*)+0x288>
c000d629:	83 ec 0c             	sub    esp,0xc
c000d62c:	8d 45 b8             	lea    eax,[ebp-0x48]
c000d62f:	50                   	push   eax
c000d630:	e8 5b a3 01 00       	call   c0027990 <LinkedList<Device>::getFirstElement()>
c000d635:	83 c4 10             	add    esp,0x10
c000d638:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000d63b:	83 ec 0c             	sub    esp,0xc
c000d63e:	8d 45 b8             	lea    eax,[ebp-0x48]
c000d641:	50                   	push   eax
c000d642:	e8 51 a3 01 00       	call   c0027998 <LinkedList<Device>::removeFirst()>
c000d647:	83 c4 10             	add    esp,0x10
c000d64a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000d64d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000d650:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000d653:	b8 24 00 00 00       	mov    eax,0x24
c000d658:	83 e0 fc             	and    eax,0xfffffffc
c000d65b:	89 c3                	mov    ebx,eax
c000d65d:	b8 00 00 00 00       	mov    eax,0x0
c000d662:	66 90                	xchg   ax,ax
c000d664:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000d66b:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000d672:	83 c0 04             	add    eax,0x4
c000d675:	39 d8                	cmp    eax,ebx
c000d677:	72 eb                	jb     c000d664 <ACPI::open(int, int, void*)+0x1b0>
c000d679:	83 ec 08             	sub    esp,0x8
c000d67c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000d682:	50                   	push   eax
c000d683:	83 ec 24             	sub    esp,0x24
c000d686:	89 e1                	mov    ecx,esp
c000d688:	b8 24 00 00 00       	mov    eax,0x24
c000d68d:	83 e0 fc             	and    eax,0xfffffffc
c000d690:	89 c3                	mov    ebx,eax
c000d692:	b8 00 00 00 00       	mov    eax,0x0
c000d697:	90                   	nop
c000d698:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000d69f:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000d6a2:	83 c0 04             	add    eax,0x4
c000d6a5:	39 d8                	cmp    eax,ebx
c000d6a7:	72 ef                	jb     c000d698 <ACPI::open(int, int, void*)+0x1e4>
c000d6a9:	e8 e4 1b 01 00       	call   c001f292 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000d6ae:	83 c4 30             	add    esp,0x30
c000d6b1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000d6b4:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000d6b8:	0f 84 4e ff ff ff    	je     c000d60c <ACPI::open(int, int, void*)+0x158>
c000d6be:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000d6c5:	83 ec 0c             	sub    esp,0xc
c000d6c8:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000d6cb:	e8 04 28 00 00       	call   c000fed4 <malloc>
c000d6d0:	83 c4 10             	add    esp,0x10
c000d6d3:	89 c3                	mov    ebx,eax
c000d6d5:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c000d6da:	83 ec 04             	sub    esp,0x4
c000d6dd:	50                   	push   eax
c000d6de:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000d6e1:	53                   	push   ebx
c000d6e2:	e8 ed b2 ff ff       	call   c00089d4 <File::File(char const*, Process*)>
c000d6e7:	83 c4 10             	add    esp,0x10
c000d6ea:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000d6ed:	83 ec 0c             	sub    esp,0xc
c000d6f0:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000d6f3:	e8 be b5 ff ff       	call   c0008cb6 <File::exists()>
c000d6f8:	83 c4 10             	add    esp,0x10
c000d6fb:	0f b6 c0             	movzx  eax,al
c000d6fe:	85 c0                	test   eax,eax
c000d700:	74 16                	je     c000d718 <ACPI::open(int, int, void*)+0x264>
c000d702:	83 ec 04             	sub    esp,0x4
c000d705:	6a 00                	push   0x0
c000d707:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000d70a:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000d70d:	e8 1c 8e 00 00       	call   c001652e <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000d712:	83 c4 10             	add    esp,0x10
c000d715:	8d 76 00             	lea    esi,[esi+0x0]
c000d718:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000d71c:	0f 84 ea fe ff ff    	je     c000d60c <ACPI::open(int, int, void*)+0x158>
c000d722:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000d725:	8b 00                	mov    eax,DWORD PTR [eax]
c000d727:	83 c0 08             	add    eax,0x8
c000d72a:	8b 00                	mov    eax,DWORD PTR [eax]
c000d72c:	83 ec 0c             	sub    esp,0xc
c000d72f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000d732:	ff d0                	call   eax
c000d734:	83 c4 10             	add    esp,0x10
c000d737:	e9 d0 fe ff ff       	jmp    c000d60c <ACPI::open(int, int, void*)+0x158>
c000d73c:	83 ec 0c             	sub    esp,0xc
c000d73f:	8d 45 b8             	lea    eax,[ebp-0x48]
c000d742:	50                   	push   eax
c000d743:	e8 28 a2 01 00       	call   c0027970 <LinkedList<Device>::~LinkedList()>
c000d748:	83 c4 10             	add    esp,0x10
c000d74b:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c000d750:	83 ec 04             	sub    esp,0x4
c000d753:	6a 00                	push   0x0
c000d755:	50                   	push   eax
c000d756:	68 ab 97 02 c0       	push   0xc00297ab
c000d75b:	e8 ce 8d 00 00       	call   c001652e <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000d760:	83 c4 10             	add    esp,0x10
c000d763:	a1 84 2d 03 c0       	mov    eax,ds:0xc0032d84
c000d768:	85 c0                	test   eax,eax
c000d76a:	0f 84 e4 00 00 00    	je     c000d854 <ACPI::open(int, int, void*)+0x3a0>
c000d770:	a1 88 2d 03 c0       	mov    eax,ds:0xc0032d88
c000d775:	85 c0                	test   eax,eax
c000d777:	0f 84 d7 00 00 00    	je     c000d854 <ACPI::open(int, int, void*)+0x3a0>
c000d77d:	83 ec 0c             	sub    esp,0xc
c000d780:	68 c8 97 02 c0       	push   0xc00297c8
c000d785:	e8 9f 02 00 00       	call   c000da29 <KeSetBootMessage(char const*)>
c000d78a:	83 c4 10             	add    esp,0x10
c000d78d:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000d794:	83 ec 0c             	sub    esp,0xc
c000d797:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000d79a:	e8 35 27 00 00       	call   c000fed4 <malloc>
c000d79f:	83 c4 10             	add    esp,0x10
c000d7a2:	89 c3                	mov    ebx,eax
c000d7a4:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c000d7a9:	83 ec 04             	sub    esp,0x4
c000d7ac:	50                   	push   eax
c000d7ad:	68 e5 97 02 c0       	push   0xc00297e5
c000d7b2:	53                   	push   ebx
c000d7b3:	e8 1c b2 ff ff       	call   c00089d4 <File::File(char const*, Process*)>
c000d7b8:	83 c4 10             	add    esp,0x10
c000d7bb:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000d7be:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000d7c2:	74 1c                	je     c000d7e0 <ACPI::open(int, int, void*)+0x32c>
c000d7c4:	83 ec 0c             	sub    esp,0xc
c000d7c7:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000d7ca:	e8 e7 b4 ff ff       	call   c0008cb6 <File::exists()>
c000d7cf:	83 c4 10             	add    esp,0x10
c000d7d2:	0f b6 c0             	movzx  eax,al
c000d7d5:	85 c0                	test   eax,eax
c000d7d7:	74 07                	je     c000d7e0 <ACPI::open(int, int, void*)+0x32c>
c000d7d9:	b0 01                	mov    al,0x1
c000d7db:	eb 07                	jmp    c000d7e4 <ACPI::open(int, int, void*)+0x330>
c000d7dd:	8d 76 00             	lea    esi,[esi+0x0]
c000d7e0:	b0 00                	mov    al,0x0
c000d7e2:	66 90                	xchg   ax,ax
c000d7e4:	0f b6 c0             	movzx  eax,al
c000d7e7:	85 c0                	test   eax,eax
c000d7e9:	74 15                	je     c000d800 <ACPI::open(int, int, void*)+0x34c>
c000d7eb:	83 ec 04             	sub    esp,0x4
c000d7ee:	6a 00                	push   0x0
c000d7f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000d7f3:	68 e5 97 02 c0       	push   0xc00297e5
c000d7f8:	e8 31 8d 00 00       	call   c001652e <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000d7fd:	83 c4 10             	add    esp,0x10
c000d800:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000d804:	74 1e                	je     c000d824 <ACPI::open(int, int, void*)+0x370>
c000d806:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000d80a:	74 18                	je     c000d824 <ACPI::open(int, int, void*)+0x370>
c000d80c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000d80f:	8b 00                	mov    eax,DWORD PTR [eax]
c000d811:	83 c0 08             	add    eax,0x8
c000d814:	8b 00                	mov    eax,DWORD PTR [eax]
c000d816:	83 ec 0c             	sub    esp,0xc
c000d819:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000d81c:	ff d0                	call   eax
c000d81e:	83 c4 10             	add    esp,0x10
c000d821:	8d 76 00             	lea    esi,[esi+0x0]
c000d824:	a1 84 2d 03 c0       	mov    eax,ds:0xc0032d84
c000d829:	83 ec 08             	sub    esp,0x8
c000d82c:	68 02 98 02 c0       	push   0xc0029802
c000d831:	50                   	push   eax
c000d832:	e8 15 f3 ff ff       	call   c000cb4c <findDataTable(unsigned char*, char*)>
c000d837:	83 c4 10             	add    esp,0x10
c000d83a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000d83d:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000d841:	74 11                	je     c000d854 <ACPI::open(int, int, void*)+0x3a0>
c000d843:	83 ec 08             	sub    esp,0x8
c000d846:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000d849:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000d84c:	e8 4b fc ff ff       	call   c000d49c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000d851:	83 c4 10             	add    esp,0x10
c000d854:	b8 00 00 00 00       	mov    eax,0x0
c000d859:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d85c:	c9                   	leave  
c000d85d:	c3                   	ret    
c000d85e:	66 90                	xchg   ax,ax

c000d860 <KeAssertionFailed(char*, char const*, char const*, int)>:
c000d860:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000d866:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000d86d:	89 c2                	mov    edx,eax
c000d86f:	c1 fa 1f             	sar    edx,0x1f
c000d872:	83 ec 04             	sub    esp,0x4
c000d875:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000d879:	51                   	push   ecx
c000d87a:	52                   	push   edx
c000d87b:	50                   	push   eax
c000d87c:	e8 4b 24 00 00       	call   c000fccc <KeItoa(long long, char*)>
c000d881:	83 c4 10             	add    esp,0x10
c000d884:	83 ec 08             	sub    esp,0x8
c000d887:	68 d0 98 02 c0       	push   0xc00298d0
c000d88c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d890:	50                   	push   eax
c000d891:	e8 ba 2d ff ff       	call   c0000650 <strcpy>
c000d896:	83 c4 10             	add    esp,0x10
c000d899:	83 ec 08             	sub    esp,0x8
c000d89c:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000d8a3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d8a7:	50                   	push   eax
c000d8a8:	e8 c3 2f ff ff       	call   c0000870 <strcat>
c000d8ad:	83 c4 10             	add    esp,0x10
c000d8b0:	83 ec 08             	sub    esp,0x8
c000d8b3:	68 de 98 02 c0       	push   0xc00298de
c000d8b8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d8bc:	50                   	push   eax
c000d8bd:	e8 ae 2f ff ff       	call   c0000870 <strcat>
c000d8c2:	83 c4 10             	add    esp,0x10
c000d8c5:	83 ec 08             	sub    esp,0x8
c000d8c8:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d8cf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d8d3:	50                   	push   eax
c000d8d4:	e8 97 2f ff ff       	call   c0000870 <strcat>
c000d8d9:	83 c4 10             	add    esp,0x10
c000d8dc:	83 ec 08             	sub    esp,0x8
c000d8df:	68 e1 98 02 c0       	push   0xc00298e1
c000d8e4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d8e8:	50                   	push   eax
c000d8e9:	e8 82 2f ff ff       	call   c0000870 <strcat>
c000d8ee:	83 c4 10             	add    esp,0x10
c000d8f1:	83 ec 08             	sub    esp,0x8
c000d8f4:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000d8fb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d8ff:	50                   	push   eax
c000d900:	e8 6b 2f ff ff       	call   c0000870 <strcat>
c000d905:	83 c4 10             	add    esp,0x10
c000d908:	83 ec 08             	sub    esp,0x8
c000d90b:	68 e1 98 02 c0       	push   0xc00298e1
c000d910:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d914:	50                   	push   eax
c000d915:	e8 56 2f ff ff       	call   c0000870 <strcat>
c000d91a:	83 c4 10             	add    esp,0x10
c000d91d:	83 ec 08             	sub    esp,0x8
c000d920:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d924:	50                   	push   eax
c000d925:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d929:	50                   	push   eax
c000d92a:	e8 41 2f ff ff       	call   c0000870 <strcat>
c000d92f:	83 c4 10             	add    esp,0x10
c000d932:	83 ec 0c             	sub    esp,0xc
c000d935:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d939:	50                   	push   eax
c000d93a:	e8 e9 29 00 00       	call   c0010328 <KePanic(char const*)>
c000d93f:	83 c4 10             	add    esp,0x10
c000d942:	90                   	nop
c000d943:	81 c4 2c 02 00 00    	add    esp,0x22c
c000d949:	c3                   	ret    

c000d94a <KeInitialiseAtexit()>:
c000d94a:	83 ec 10             	sub    esp,0x10
c000d94d:	68 80 00 00 00       	push   0x80
c000d952:	6a 00                	push   0x0
c000d954:	68 80 30 03 c0       	push   0xc0033080
c000d959:	c7 05 e0 2f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032fe0,0x0
c000d963:	e8 88 2b ff ff       	call   c00004f0 <memset>
c000d968:	83 c4 1c             	add    esp,0x1c
c000d96b:	c3                   	ret    

c000d96c <KeRegisterAtexit(void (*)(void*), void*)>:
c000d96c:	a1 e0 2f 03 c0       	mov    eax,ds:0xc0032fe0
c000d971:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d975:	89 14 85 80 30 03 c0 	mov    DWORD PTR [eax*4-0x3ffccf80],edx
c000d97c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d980:	89 14 85 00 30 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd000],edx
c000d987:	40                   	inc    eax
c000d988:	a3 e0 2f 03 c0       	mov    ds:0xc0032fe0,eax
c000d98d:	83 f8 1f             	cmp    eax,0x1f
c000d990:	7e 0d                	jle    c000d99f <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000d992:	c7 44 24 04 e3 98 02 c0 	mov    DWORD PTR [esp+0x4],0xc00298e3
c000d99a:	e9 89 29 00 00       	jmp    c0010328 <KePanic(char const*)>
c000d99f:	c3                   	ret    

c000d9a0 <KeExecuteAtexit()>:
c000d9a0:	53                   	push   ebx
c000d9a1:	31 db                	xor    ebx,ebx
c000d9a3:	83 ec 08             	sub    esp,0x8
c000d9a6:	39 1d e0 2f 03 c0    	cmp    DWORD PTR ds:0xc0032fe0,ebx
c000d9ac:	7e 28                	jle    c000d9d6 <KeExecuteAtexit()+0x36>
c000d9ae:	8b 04 9d 80 30 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffccf80]
c000d9b5:	85 c0                	test   eax,eax
c000d9b7:	74 1a                	je     c000d9d3 <KeExecuteAtexit()+0x33>
c000d9b9:	83 ec 0c             	sub    esp,0xc
c000d9bc:	ff 34 9d 00 30 03 c0 	push   DWORD PTR [ebx*4-0x3ffcd000]
c000d9c3:	ff d0                	call   eax
c000d9c5:	c7 04 9d 80 30 03 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffccf80],0x0
c000d9d0:	83 c4 10             	add    esp,0x10
c000d9d3:	43                   	inc    ebx
c000d9d4:	eb d0                	jmp    c000d9a6 <KeExecuteAtexit()+0x6>
c000d9d6:	83 c4 08             	add    esp,0x8
c000d9d9:	5b                   	pop    ebx
c000d9da:	c3                   	ret    
c000d9db:	90                   	nop

c000d9dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>:
c000d9dc:	8b 15 00 31 03 c0    	mov    edx,DWORD PTR ds:0xc0033100
c000d9e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d9e6:	21 d0                	and    eax,edx
c000d9e8:	0f 95 c0             	setne  al
c000d9eb:	c3                   	ret    

c000d9ec <KeInitialiseBootConfigurationFlags()>:
c000d9ec:	b8 00 05 00 00       	mov    eax,0x500
c000d9f1:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9f3:	a3 00 31 03 c0       	mov    ds:0xc0033100,eax
c000d9f8:	90                   	nop
c000d9f9:	c3                   	ret    

c000d9fa <KeDisplaySplashScreen()>:
c000d9fa:	53                   	push   ebx
c000d9fb:	bb 01 00 00 00       	mov    ebx,0x1
c000da00:	83 ec 08             	sub    esp,0x8
c000da03:	43                   	inc    ebx
c000da04:	0f be 83 fa 98 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffd6706]
c000da0b:	85 c0                	test   eax,eax
c000da0d:	74 15                	je     c000da24 <KeDisplaySplashScreen()+0x2a>
c000da0f:	83 ec 0c             	sub    esp,0xc
c000da12:	6a 01                	push   0x1
c000da14:	53                   	push   ebx
c000da15:	6a 00                	push   0x0
c000da17:	6a 0f                	push   0xf
c000da19:	50                   	push   eax
c000da1a:	e8 e9 e7 00 00       	call   c001c208 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000da1f:	83 c4 20             	add    esp,0x20
c000da22:	eb df                	jmp    c000da03 <KeDisplaySplashScreen()+0x9>
c000da24:	83 c4 08             	add    esp,0x8
c000da27:	5b                   	pop    ebx
c000da28:	c3                   	ret    

c000da29 <KeSetBootMessage(char const*)>:
c000da29:	57                   	push   edi
c000da2a:	56                   	push   esi
c000da2b:	53                   	push   ebx
c000da2c:	31 db                	xor    ebx,ebx
c000da2e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da32:	83 ec 0c             	sub    esp,0xc
c000da35:	6a 14                	push   0x14
c000da37:	53                   	push   ebx
c000da38:	43                   	inc    ebx
c000da39:	6a 00                	push   0x0
c000da3b:	6a 00                	push   0x0
c000da3d:	6a 20                	push   0x20
c000da3f:	e8 c4 e7 00 00       	call   c001c208 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000da44:	83 c4 20             	add    esp,0x20
c000da47:	83 fb 50             	cmp    ebx,0x50
c000da4a:	75 e6                	jne    c000da32 <KeSetBootMessage(char const*)+0x9>
c000da4c:	83 ec 0c             	sub    esp,0xc
c000da4f:	56                   	push   esi
c000da50:	e8 2b 2b ff ff       	call   c0000580 <strlen>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	29 c3                	sub    ebx,eax
c000da5a:	d1 eb                	shr    ebx,1
c000da5c:	89 df                	mov    edi,ebx
c000da5e:	89 f0                	mov    eax,esi
c000da60:	29 d8                	sub    eax,ebx
c000da62:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000da66:	85 c0                	test   eax,eax
c000da68:	74 16                	je     c000da80 <KeSetBootMessage(char const*)+0x57>
c000da6a:	83 ec 0c             	sub    esp,0xc
c000da6d:	6a 14                	push   0x14
c000da6f:	57                   	push   edi
c000da70:	47                   	inc    edi
c000da71:	6a 00                	push   0x0
c000da73:	6a 07                	push   0x7
c000da75:	50                   	push   eax
c000da76:	e8 8d e7 00 00       	call   c001c208 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000da7b:	83 c4 20             	add    esp,0x20
c000da7e:	eb de                	jmp    c000da5e <KeSetBootMessage(char const*)+0x35>
c000da80:	5b                   	pop    ebx
c000da81:	5e                   	pop    esi
c000da82:	5f                   	pop    edi
c000da83:	c3                   	ret    

c000da84 <__cxa_atexit>:
c000da84:	31 c0                	xor    eax,eax
c000da86:	c3                   	ret    

c000da87 <__cxa_finalize>:
c000da87:	c3                   	ret    

c000da88 <__stack_chk_fail>:
c000da88:	55                   	push   ebp
c000da89:	89 e5                	mov    ebp,esp
c000da8b:	83 ec 10             	sub    esp,0x10
c000da8e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000da91:	68 0f 99 02 c0       	push   0xc002990f
c000da96:	e8 cb 94 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000da9b:	58                   	pop    eax
c000da9c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000da9f:	5a                   	pop    edx
c000daa0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000daa3:	68 0f 99 02 c0       	push   0xc002990f
c000daa8:	e8 b9 94 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000daad:	c7 04 24 17 99 02 c0 	mov    DWORD PTR [esp],0xc0029917
c000dab4:	e8 6f 28 00 00       	call   c0010328 <KePanic(char const*)>
c000dab9:	83 c4 10             	add    esp,0x10
c000dabc:	c9                   	leave  
c000dabd:	c3                   	ret    

c000dabe <__cxa_pure_virtual>:
c000dabe:	83 ec 18             	sub    esp,0x18
c000dac1:	68 2f 99 02 c0       	push   0xc002992f
c000dac6:	e8 5d 28 00 00       	call   c0010328 <KePanic(char const*)>
c000dacb:	83 c4 1c             	add    esp,0x1c
c000dace:	c3                   	ret    

c000dacf <operator new[](unsigned long)>:
c000dacf:	e9 00 24 00 00       	jmp    c000fed4 <malloc>

c000dad4 <operator delete(void*, unsigned long)>:
c000dad4:	e9 1b 24 00 00       	jmp    c000fef4 <rfree>

c000dad9 <operator delete[](void*)>:
c000dad9:	e9 16 24 00 00       	jmp    c000fef4 <rfree>

c000dade <operator delete[](void*, unsigned long)>:
c000dade:	e9 11 24 00 00       	jmp    c000fef4 <rfree>
c000dae3:	90                   	nop

c000dae4 <CUnlockScheduler>:
c000dae4:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c000daec:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000daf1:	85 c0                	test   eax,eax
c000daf3:	75 03                	jne    c000daf8 <CUnlockScheduler+0x14>
c000daf5:	fb                   	sti    
c000daf6:	66 90                	xchg   ax,ax
c000daf8:	90                   	nop
c000daf9:	c3                   	ret    
c000dafa:	66 90                	xchg   ax,ax

c000dafc <CLockScheduler>:
c000dafc:	fa                   	cli    
c000dafd:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000db02:	83 c0 01             	add    eax,0x1
c000db05:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c000db0a:	90                   	nop
c000db0b:	c3                   	ret    

c000db0c <CPrintf>:
c000db0c:	83 ec 0c             	sub    esp,0xc
c000db0f:	83 ec 08             	sub    esp,0x8
c000db12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db16:	68 42 99 02 c0       	push   0xc0029942
c000db1b:	e8 46 94 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000db20:	83 c4 10             	add    esp,0x10
c000db23:	90                   	nop
c000db24:	83 c4 0c             	add    esp,0xc
c000db27:	c3                   	ret    

c000db28 <CmOpen(char const*)>:
c000db28:	57                   	push   edi
c000db29:	56                   	push   esi
c000db2a:	53                   	push   ebx
c000db2b:	83 ec 1c             	sub    esp,0x1c
c000db2e:	6a 30                	push   0x30
c000db30:	e8 9f 23 00 00       	call   c000fed4 <malloc>
c000db35:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000db3c:	89 c3                	mov    ebx,eax
c000db3e:	e8 91 23 00 00       	call   c000fed4 <malloc>
c000db43:	83 c4 0c             	add    esp,0xc
c000db46:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c000db4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000db50:	89 c6                	mov    esi,eax
c000db52:	50                   	push   eax
c000db53:	e8 7c ae ff ff       	call   c00089d4 <File::File(char const*, Process*)>
c000db58:	83 c4 0c             	add    esp,0xc
c000db5b:	89 33                	mov    DWORD PTR [ebx],esi
c000db5d:	8d 44 24 07          	lea    eax,[esp+0x7]
c000db61:	50                   	push   eax
c000db62:	8d 44 24 10          	lea    eax,[esp+0x10]
c000db66:	50                   	push   eax
c000db67:	56                   	push   esi
c000db68:	e8 87 b1 ff ff       	call   c0008cf4 <File::stat(unsigned long long*, bool*)>
c000db6d:	5a                   	pop    edx
c000db6e:	59                   	pop    ecx
c000db6f:	6a 01                	push   0x1
c000db71:	ff 33                	push   DWORD PTR [ebx]
c000db73:	e8 7a ae ff ff       	call   c00089f2 <File::open(FileOpenMode)>
c000db78:	5e                   	pop    esi
c000db79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db7d:	e8 52 23 00 00       	call   c000fed4 <malloc>
c000db82:	5a                   	pop    edx
c000db83:	8d 74 24 10          	lea    esi,[esp+0x10]
c000db87:	89 c7                	mov    edi,eax
c000db89:	8b 03                	mov    eax,DWORD PTR [ebx]
c000db8b:	8b 10                	mov    edx,DWORD PTR [eax]
c000db8d:	56                   	push   esi
c000db8e:	57                   	push   edi
c000db8f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000db93:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000db97:	50                   	push   eax
c000db98:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000db9b:	83 c4 14             	add    esp,0x14
c000db9e:	ff 33                	push   DWORD PTR [ebx]
c000dba0:	e8 ab ae ff ff       	call   c0008a50 <File::close()>
c000dba5:	59                   	pop    ecx
c000dba6:	58                   	pop    eax
c000dba7:	6a 13                	push   0x13
c000dba9:	ff 33                	push   DWORD PTR [ebx]
c000dbab:	e8 42 ae ff ff       	call   c00089f2 <File::open(FileOpenMode)>
c000dbb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dbb2:	8b 10                	mov    edx,DWORD PTR [eax]
c000dbb4:	89 34 24             	mov    DWORD PTR [esp],esi
c000dbb7:	57                   	push   edi
c000dbb8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000dbbc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000dbc0:	50                   	push   eax
c000dbc1:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000dbc4:	83 c4 14             	add    esp,0x14
c000dbc7:	57                   	push   edi
c000dbc8:	e8 17 23 00 00       	call   c000fee4 <free>
c000dbcd:	83 c4 10             	add    esp,0x10
c000dbd0:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dbd3:	75 10                	jne    c000dbe5 <CmOpen(char const*)+0xbd>
c000dbd5:	83 ec 0c             	sub    esp,0xc
c000dbd8:	68 45 99 02 c0       	push   0xc0029945
c000dbdd:	e8 46 27 00 00       	call   c0010328 <KePanic(char const*)>
c000dbe2:	83 c4 10             	add    esp,0x10
c000dbe5:	50                   	push   eax
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 33                	push   DWORD PTR [ebx]
c000dbec:	8d 7b 05             	lea    edi,[ebx+0x5]
c000dbef:	e8 bc ae ff ff       	call   c0008ab0 <File::seek(unsigned long long)>
c000dbf4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dbf6:	8b 10                	mov    edx,DWORD PTR [eax]
c000dbf8:	89 34 24             	mov    DWORD PTR [esp],esi
c000dbfb:	57                   	push   edi
c000dbfc:	6a 00                	push   0x0
c000dbfe:	6a 2b                	push   0x2b
c000dc00:	50                   	push   eax
c000dc01:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dc04:	83 c4 1c             	add    esp,0x1c
c000dc07:	6a 00                	push   0x0
c000dc09:	6a 00                	push   0x0
c000dc0b:	ff 33                	push   DWORD PTR [ebx]
c000dc0d:	e8 9e ae ff ff       	call   c0008ab0 <File::seek(unsigned long long)>
c000dc12:	83 c4 0c             	add    esp,0xc
c000dc15:	6a 08                	push   0x8
c000dc17:	68 67 99 02 c0       	push   0xc0029967
c000dc1c:	57                   	push   edi
c000dc1d:	e8 5e 27 ff ff       	call   c0000380 <memcmp>
c000dc22:	83 c4 10             	add    esp,0x10
c000dc25:	85 c0                	test   eax,eax
c000dc27:	74 10                	je     c000dc39 <CmOpen(char const*)+0x111>
c000dc29:	83 ec 0c             	sub    esp,0xc
c000dc2c:	68 70 99 02 c0       	push   0xc0029970
c000dc31:	e8 f2 26 00 00       	call   c0010328 <KePanic(char const*)>
c000dc36:	83 c4 10             	add    esp,0x10
c000dc39:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000dc3d:	83 c4 10             	add    esp,0x10
c000dc40:	89 d8                	mov    eax,ebx
c000dc42:	5b                   	pop    ebx
c000dc43:	5e                   	pop    esi
c000dc44:	5f                   	pop    edi
c000dc45:	c3                   	ret    

c000dc46 <CmClose(Reghive_Tag*)>:
c000dc46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dc4a:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000dc4e:	74 0b                	je     c000dc5b <CmClose(Reghive_Tag*)+0x15>
c000dc50:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dc56:	e9 f5 ad ff ff       	jmp    c0008a50 <File::close()>
c000dc5b:	c3                   	ret    

c000dc5c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000dc5c:	53                   	push   ebx
c000dc5d:	83 ec 18             	sub    esp,0x18
c000dc60:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000dc64:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000dc68:	74 29                	je     c000dc93 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000dc6a:	50                   	push   eax
c000dc6b:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000dc70:	99                   	cdq    
c000dc71:	52                   	push   edx
c000dc72:	50                   	push   eax
c000dc73:	ff 33                	push   DWORD PTR [ebx]
c000dc75:	e8 36 ae ff ff       	call   c0008ab0 <File::seek(unsigned long long)>
c000dc7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dc7c:	5a                   	pop    edx
c000dc7d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000dc81:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc83:	51                   	push   ecx
c000dc84:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000dc88:	6a 00                	push   0x0
c000dc8a:	6a 2b                	push   0x2b
c000dc8c:	50                   	push   eax
c000dc8d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dc90:	83 c4 20             	add    esp,0x20
c000dc93:	83 c4 18             	add    esp,0x18
c000dc96:	5b                   	pop    ebx
c000dc97:	c3                   	ret    

c000dc98 <CmGetString(Reghive_Tag*, int, char*)>:
c000dc98:	55                   	push   ebp
c000dc99:	57                   	push   edi
c000dc9a:	56                   	push   esi
c000dc9b:	53                   	push   ebx
c000dc9c:	31 db                	xor    ebx,ebx
c000dc9e:	83 ec 70             	sub    esp,0x70
c000dca1:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000dca5:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000dcac:	50                   	push   eax
c000dcad:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000dcb4:	55                   	push   ebp
c000dcb5:	e8 a2 ff ff ff       	call   c000dc5c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dcba:	83 c4 10             	add    esp,0x10
c000dcbd:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000dcc2:	c1 e0 08             	shl    eax,0x8
c000dcc5:	89 c2                	mov    edx,eax
c000dcc7:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000dccc:	09 d0                	or     eax,edx
c000dcce:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000dcd3:	c1 e0 08             	shl    eax,0x8
c000dcd6:	09 d0                	or     eax,edx
c000dcd8:	74 25                	je     c000dcff <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000dcda:	52                   	push   edx
c000dcdb:	8d 54 24 39          	lea    edx,[esp+0x39]
c000dcdf:	52                   	push   edx
c000dce0:	6b fb 0d             	imul   edi,ebx,0xd
c000dce3:	50                   	push   eax
c000dce4:	55                   	push   ebp
c000dce5:	e8 72 ff ff ff       	call   c000dc5c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dcea:	8d 74 24 49          	lea    esi,[esp+0x49]
c000dcee:	b9 27 00 00 00       	mov    ecx,0x27
c000dcf3:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000dcfa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dcfc:	83 c4 10             	add    esp,0x10
c000dcff:	83 c3 03             	add    ebx,0x3
c000dd02:	83 fb 15             	cmp    ebx,0x15
c000dd05:	75 b6                	jne    c000dcbd <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000dd07:	83 c4 6c             	add    esp,0x6c
c000dd0a:	5b                   	pop    ebx
c000dd0b:	5e                   	pop    esi
c000dd0c:	5f                   	pop    edi
c000dd0d:	5d                   	pop    ebp
c000dd0e:	c3                   	ret    

c000dd0f <CmEnterDirectory(Reghive_Tag*, int)>:
c000dd0f:	83 ec 40             	sub    esp,0x40
c000dd12:	8d 44 24 09          	lea    eax,[esp+0x9]
c000dd16:	50                   	push   eax
c000dd17:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dd1b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dd1f:	e8 38 ff ff ff       	call   c000dc5c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dd24:	83 c4 10             	add    esp,0x10
c000dd27:	83 c8 ff             	or     eax,0xffffffff
c000dd2a:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000dd2f:	75 19                	jne    c000dd4a <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000dd31:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000dd36:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000dd3b:	c1 e0 08             	shl    eax,0x8
c000dd3e:	09 c2                	or     edx,eax
c000dd40:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000dd45:	c1 e0 10             	shl    eax,0x10
c000dd48:	09 d0                	or     eax,edx
c000dd4a:	83 c4 3c             	add    esp,0x3c
c000dd4d:	c3                   	ret    

c000dd4e <CmGetNext(Reghive_Tag*, int)>:
c000dd4e:	83 ec 40             	sub    esp,0x40
c000dd51:	8d 44 24 09          	lea    eax,[esp+0x9]
c000dd55:	50                   	push   eax
c000dd56:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dd5a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dd5e:	e8 f9 fe ff ff       	call   c000dc5c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dd63:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000dd68:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000dd6d:	c1 e0 08             	shl    eax,0x8
c000dd70:	09 c2                	or     edx,eax
c000dd72:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000dd77:	83 c4 4c             	add    esp,0x4c
c000dd7a:	c1 e0 10             	shl    eax,0x10
c000dd7d:	09 d0                	or     eax,edx
c000dd7f:	c3                   	ret    

c000dd80 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000dd80:	53                   	push   ebx
c000dd81:	83 ec 18             	sub    esp,0x18
c000dd84:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000dd88:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000dd8c:	74 29                	je     c000ddb7 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000dd8e:	50                   	push   eax
c000dd8f:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000dd94:	99                   	cdq    
c000dd95:	52                   	push   edx
c000dd96:	50                   	push   eax
c000dd97:	ff 33                	push   DWORD PTR [ebx]
c000dd99:	e8 12 ad ff ff       	call   c0008ab0 <File::seek(unsigned long long)>
c000dd9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dda0:	5a                   	pop    edx
c000dda1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000dda5:	8b 10                	mov    edx,DWORD PTR [eax]
c000dda7:	51                   	push   ecx
c000dda8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ddac:	6a 00                	push   0x0
c000ddae:	6a 2b                	push   0x2b
c000ddb0:	50                   	push   eax
c000ddb1:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ddb4:	83 c4 20             	add    esp,0x20
c000ddb7:	83 c4 18             	add    esp,0x18
c000ddba:	5b                   	pop    ebx
c000ddbb:	c3                   	ret    

c000ddbc <CmFreeExtent(Reghive_Tag*, int)>:
c000ddbc:	53                   	push   ebx
c000ddbd:	83 ec 3c             	sub    esp,0x3c
c000ddc0:	6a 2b                	push   0x2b
c000ddc2:	6a 00                	push   0x0
c000ddc4:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000ddc8:	53                   	push   ebx
c000ddc9:	e8 22 27 ff ff       	call   c00004f0 <memset>
c000ddce:	83 c4 0c             	add    esp,0xc
c000ddd1:	53                   	push   ebx
c000ddd2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ddd6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ddda:	e8 a1 ff ff ff       	call   c000dd80 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000dddf:	83 c4 48             	add    esp,0x48
c000dde2:	5b                   	pop    ebx
c000dde3:	c3                   	ret    

c000dde4 <CmUpdateHeader(Reghive_Tag*)>:
c000dde4:	83 ec 0c             	sub    esp,0xc
c000dde7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ddeb:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000ddef:	74 10                	je     c000de01 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000ddf1:	52                   	push   edx
c000ddf2:	8d 50 05             	lea    edx,[eax+0x5]
c000ddf5:	52                   	push   edx
c000ddf6:	6a 00                	push   0x0
c000ddf8:	50                   	push   eax
c000ddf9:	e8 82 ff ff ff       	call   c000dd80 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	83 c4 0c             	add    esp,0xc
c000de04:	c3                   	ret    

c000de05 <CmExpand(Reghive_Tag*, int)>:
c000de05:	55                   	push   ebp
c000de06:	57                   	push   edi
c000de07:	83 cf ff             	or     edi,0xffffffff
c000de0a:	56                   	push   esi
c000de0b:	53                   	push   ebx
c000de0c:	83 ec 3c             	sub    esp,0x3c
c000de0f:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000de13:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000de17:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000de1b:	74 59                	je     c000de76 <CmExpand(Reghive_Tag*, int)+0x71>
c000de1d:	50                   	push   eax
c000de1e:	31 d2                	xor    edx,edx
c000de20:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000de24:	31 ff                	xor    edi,edi
c000de26:	52                   	push   edx
c000de27:	50                   	push   eax
c000de28:	ff 33                	push   DWORD PTR [ebx]
c000de2a:	e8 81 ac ff ff       	call   c0008ab0 <File::seek(unsigned long long)>
c000de2f:	83 c4 0c             	add    esp,0xc
c000de32:	6a 2b                	push   0x2b
c000de34:	6a 00                	push   0x0
c000de36:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c000de3a:	55                   	push   ebp
c000de3b:	e8 b0 26 ff ff       	call   c00004f0 <memset>
c000de40:	83 c4 10             	add    esp,0x10
c000de43:	39 f7                	cmp    edi,esi
c000de45:	7d 1b                	jge    c000de62 <CmExpand(Reghive_Tag*, int)+0x5d>
c000de47:	8b 03                	mov    eax,DWORD PTR [ebx]
c000de49:	83 ec 0c             	sub    esp,0xc
c000de4c:	47                   	inc    edi
c000de4d:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000de51:	8b 10                	mov    edx,DWORD PTR [eax]
c000de53:	51                   	push   ecx
c000de54:	55                   	push   ebp
c000de55:	6a 00                	push   0x0
c000de57:	6a 2b                	push   0x2b
c000de59:	50                   	push   eax
c000de5a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000de5d:	83 c4 20             	add    esp,0x20
c000de60:	eb e1                	jmp    c000de43 <CmExpand(Reghive_Tag*, int)+0x3e>
c000de62:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c000de65:	83 ec 0c             	sub    esp,0xc
c000de68:	01 fe                	add    esi,edi
c000de6a:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c000de6d:	53                   	push   ebx
c000de6e:	e8 71 ff ff ff       	call   c000dde4 <CmUpdateHeader(Reghive_Tag*)>
c000de73:	83 c4 10             	add    esp,0x10
c000de76:	83 c4 3c             	add    esp,0x3c
c000de79:	89 f8                	mov    eax,edi
c000de7b:	5b                   	pop    ebx
c000de7c:	5e                   	pop    esi
c000de7d:	5f                   	pop    edi
c000de7e:	5d                   	pop    ebp
c000de7f:	c3                   	ret    

c000de80 <CmFindUnusedExtent(Reghive_Tag*)>:
c000de80:	55                   	push   ebp
c000de81:	57                   	push   edi
c000de82:	56                   	push   esi
c000de83:	53                   	push   ebx
c000de84:	83 cb ff             	or     ebx,0xffffffff
c000de87:	83 ec 1c             	sub    esp,0x1c
c000de8a:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000de8e:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000de92:	74 68                	je     c000defc <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000de94:	51                   	push   ecx
c000de95:	be 2b 00 00 00       	mov    esi,0x2b
c000de9a:	6a 00                	push   0x0
c000de9c:	31 ff                	xor    edi,edi
c000de9e:	6a 00                	push   0x0
c000dea0:	31 db                	xor    ebx,ebx
c000dea2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000dea5:	e8 06 ac ff ff       	call   c0008ab0 <File::seek(unsigned long long)>
c000deaa:	83 c4 10             	add    esp,0x10
c000dead:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000deb0:	76 3b                	jbe    c000deed <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000deb2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000deb5:	83 ec 0c             	sub    esp,0xc
c000deb8:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000debc:	8b 10                	mov    edx,DWORD PTR [eax]
c000debe:	51                   	push   ecx
c000debf:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000dec3:	51                   	push   ecx
c000dec4:	6a 00                	push   0x0
c000dec6:	6a 01                	push   0x1
c000dec8:	50                   	push   eax
c000dec9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000decc:	83 c4 20             	add    esp,0x20
c000decf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ded4:	74 26                	je     c000defc <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000ded6:	52                   	push   edx
c000ded7:	43                   	inc    ebx
c000ded8:	57                   	push   edi
c000ded9:	56                   	push   esi
c000deda:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000dedd:	e8 ce ab ff ff       	call   c0008ab0 <File::seek(unsigned long long)>
c000dee2:	83 c6 2b             	add    esi,0x2b
c000dee5:	83 d7 00             	adc    edi,0x0
c000dee8:	83 c4 10             	add    esp,0x10
c000deeb:	eb c0                	jmp    c000dead <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000deed:	50                   	push   eax
c000deee:	50                   	push   eax
c000deef:	6a 40                	push   0x40
c000def1:	55                   	push   ebp
c000def2:	e8 0e ff ff ff       	call   c000de05 <CmExpand(Reghive_Tag*, int)>
c000def7:	83 c4 10             	add    esp,0x10
c000defa:	89 c3                	mov    ebx,eax
c000defc:	83 c4 1c             	add    esp,0x1c
c000deff:	89 d8                	mov    eax,ebx
c000df01:	5b                   	pop    ebx
c000df02:	5e                   	pop    esi
c000df03:	5f                   	pop    edi
c000df04:	5d                   	pop    ebp
c000df05:	c3                   	ret    

c000df06 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000df06:	55                   	push   ebp
c000df07:	57                   	push   edi
c000df08:	56                   	push   esi
c000df09:	53                   	push   ebx
c000df0a:	81 ec 88 00 00 00    	sub    esp,0x88
c000df10:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000df17:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000df1e:	e8 5d ff ff ff       	call   c000de80 <CmFindUnusedExtent(Reghive_Tag*)>
c000df23:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df27:	83 c4 0c             	add    esp,0xc
c000df2a:	6a 2b                	push   0x2b
c000df2c:	6a 00                	push   0x0
c000df2e:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000df32:	55                   	push   ebp
c000df33:	e8 b8 25 ff ff       	call   c00004f0 <memset>
c000df38:	83 c4 10             	add    esp,0x10
c000df3b:	85 db                	test   ebx,ebx
c000df3d:	74 12                	je     c000df51 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000df3f:	51                   	push   ecx
c000df40:	55                   	push   ebp
c000df41:	53                   	push   ebx
c000df42:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000df49:	e8 0e fd ff ff       	call   c000dc5c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000df4e:	83 c4 10             	add    esp,0x10
c000df51:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000df55:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000df5c:	b9 2b 00 00 00       	mov    ecx,0x2b
c000df61:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000df63:	85 db                	test   ebx,ebx
c000df65:	74 49                	je     c000dfb0 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000df67:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000df6c:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000df71:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000df75:	c1 e0 08             	shl    eax,0x8
c000df78:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000df7e:	09 c8                	or     eax,ecx
c000df80:	74 11                	je     c000df93 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000df82:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000df86:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000df8a:	c1 e8 10             	shr    eax,0x10
c000df8d:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000df91:	eb 0f                	jmp    c000dfa2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000df93:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000df98:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000df9d:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000dfa2:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000dfa6:	c1 ea 08             	shr    edx,0x8
c000dfa9:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000dfae:	eb 0f                	jmp    c000dfbf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000dfb0:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000dfb5:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000dfba:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000dfbf:	52                   	push   edx
c000dfc0:	8d 44 24 49          	lea    eax,[esp+0x49]
c000dfc4:	50                   	push   eax
c000dfc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfc9:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000dfd0:	e8 ab fd ff ff       	call   c000dd80 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000dfd5:	83 c4 10             	add    esp,0x10
c000dfd8:	85 db                	test   ebx,ebx
c000dfda:	74 12                	je     c000dfee <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000dfdc:	50                   	push   eax
c000dfdd:	55                   	push   ebp
c000dfde:	53                   	push   ebx
c000dfdf:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000dfe6:	e8 95 fd ff ff       	call   c000dd80 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000dfeb:	83 c4 10             	add    esp,0x10
c000dfee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dff2:	83 c4 7c             	add    esp,0x7c
c000dff5:	5b                   	pop    ebx
c000dff6:	5e                   	pop    esi
c000dff7:	5f                   	pop    edi
c000dff8:	5d                   	pop    ebp
c000dff9:	c3                   	ret    

c000dffa <CmSetString(Reghive_Tag*, int, char const*)>:
c000dffa:	55                   	push   ebp
c000dffb:	57                   	push   edi
c000dffc:	56                   	push   esi
c000dffd:	53                   	push   ebx
c000dffe:	bb 27 00 00 00       	mov    ebx,0x27
c000e003:	81 ec 88 00 00 00    	sub    esp,0x88
c000e009:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c000e010:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000e017:	e8 64 25 ff ff       	call   c0000580 <strlen>
c000e01c:	8d 48 26             	lea    ecx,[eax+0x26]
c000e01f:	89 c8                	mov    eax,ecx
c000e021:	99                   	cdq    
c000e022:	f7 fb                	idiv   ebx
c000e024:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e028:	83 c4 10             	add    esp,0x10
c000e02b:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000e031:	7e 10                	jle    c000e043 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000e033:	83 ec 0c             	sub    esp,0xc
c000e036:	68 8b 99 02 c0       	push   0xc002998b
c000e03b:	e8 e8 22 00 00       	call   c0010328 <KePanic(char const*)>
c000e040:	83 c4 10             	add    esp,0x10
c000e043:	53                   	push   ebx
c000e044:	31 ed                	xor    ebp,ebp
c000e046:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000e04a:	53                   	push   ebx
c000e04b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e052:	57                   	push   edi
c000e053:	e8 04 fc ff ff       	call   c000dc5c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e058:	83 c4 10             	add    esp,0x10
c000e05b:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c000e05f:	89 f0                	mov    eax,esi
c000e061:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c000e065:	c1 e0 08             	shl    eax,0x8
c000e068:	09 c6                	or     esi,eax
c000e06a:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000e06e:	c1 e6 08             	shl    esi,0x8
c000e071:	09 c6                	or     esi,eax
c000e073:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000e077:	7e 72                	jle    c000e0eb <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c000e079:	85 f6                	test   esi,esi
c000e07b:	75 25                	jne    c000e0a2 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000e07d:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000e082:	8d 44 24 45          	lea    eax,[esp+0x45]
c000e086:	50                   	push   eax
c000e087:	6a 00                	push   0x0
c000e089:	6a 00                	push   0x0
c000e08b:	57                   	push   edi
c000e08c:	e8 75 fe ff ff       	call   c000df06 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000e091:	83 c4 10             	add    esp,0x10
c000e094:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000e097:	89 c6                	mov    esi,eax
c000e099:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000e09c:	c1 f8 10             	sar    eax,0x10
c000e09f:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000e0a2:	51                   	push   ecx
c000e0a3:	8d 54 24 49          	lea    edx,[esp+0x49]
c000e0a7:	52                   	push   edx
c000e0a8:	56                   	push   esi
c000e0a9:	57                   	push   edi
c000e0aa:	e8 ad fb ff ff       	call   c000dc5c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e0af:	83 c4 0c             	add    esp,0xc
c000e0b2:	6a 27                	push   0x27
c000e0b4:	6a 00                	push   0x0
c000e0b6:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000e0ba:	51                   	push   ecx
c000e0bb:	e8 30 24 ff ff       	call   c00004f0 <memset>
c000e0c0:	6b c5 27             	imul   eax,ebp,0x27
c000e0c3:	83 c4 0c             	add    esp,0xc
c000e0c6:	6a 27                	push   0x27
c000e0c8:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000e0cf:	50                   	push   eax
c000e0d0:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000e0d4:	51                   	push   ecx
c000e0d5:	e8 b6 25 ff ff       	call   c0000690 <strncpy>
c000e0da:	83 c4 0c             	add    esp,0xc
c000e0dd:	8d 54 24 49          	lea    edx,[esp+0x49]
c000e0e1:	52                   	push   edx
c000e0e2:	56                   	push   esi
c000e0e3:	57                   	push   edi
c000e0e4:	e8 97 fc ff ff       	call   c000dd80 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e0e9:	eb 19                	jmp    c000e104 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c000e0eb:	85 f6                	test   esi,esi
c000e0ed:	74 18                	je     c000e107 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c000e0ef:	52                   	push   edx
c000e0f0:	52                   	push   edx
c000e0f1:	56                   	push   esi
c000e0f2:	57                   	push   edi
c000e0f3:	e8 c4 fc ff ff       	call   c000ddbc <CmFreeExtent(Reghive_Tag*, int)>
c000e0f8:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000e0fc:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000e100:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000e104:	83 c4 10             	add    esp,0x10
c000e107:	45                   	inc    ebp
c000e108:	83 c3 03             	add    ebx,0x3
c000e10b:	83 fd 07             	cmp    ebp,0x7
c000e10e:	0f 85 47 ff ff ff    	jne    c000e05b <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000e114:	50                   	push   eax
c000e115:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000e119:	50                   	push   eax
c000e11a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e121:	57                   	push   edi
c000e122:	e8 59 fc ff ff       	call   c000dd80 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e127:	81 c4 8c 00 00 00    	add    esp,0x8c
c000e12d:	5b                   	pop    ebx
c000e12e:	5e                   	pop    esi
c000e12f:	5f                   	pop    edi
c000e130:	5d                   	pop    ebp
c000e131:	c3                   	ret    

c000e132 <CmGetMatch(char*, char*, bool, bool*)>:
c000e132:	56                   	push   esi
c000e133:	53                   	push   ebx
c000e134:	50                   	push   eax
c000e135:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e13a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e13e:	74 25                	je     c000e165 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000e140:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000e143:	31 db                	xor    ebx,ebx
c000e145:	50                   	push   eax
c000e146:	50                   	push   eax
c000e147:	8d 04 9d a0 cc 02 c0 	lea    eax,[ebx*4-0x3ffd3360]
c000e14e:	50                   	push   eax
c000e14f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e153:	e8 28 26 ff ff       	call   c0000780 <strcmp>
c000e158:	83 c4 10             	add    esp,0x10
c000e15b:	85 c0                	test   eax,eax
c000e15d:	74 2e                	je     c000e18d <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000e15f:	43                   	inc    ebx
c000e160:	83 fb 3f             	cmp    ebx,0x3f
c000e163:	75 e0                	jne    c000e145 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000e165:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000e168:	31 db                	xor    ebx,ebx
c000e16a:	51                   	push   ecx
c000e16b:	51                   	push   ecx
c000e16c:	8d 04 9d a0 cc 02 c0 	lea    eax,[ebx*4-0x3ffd3360]
c000e173:	50                   	push   eax
c000e174:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e178:	e8 03 26 ff ff       	call   c0000780 <strcmp>
c000e17d:	83 c4 10             	add    esp,0x10
c000e180:	85 c0                	test   eax,eax
c000e182:	74 09                	je     c000e18d <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000e184:	43                   	inc    ebx
c000e185:	83 fb 3f             	cmp    ebx,0x3f
c000e188:	75 e0                	jne    c000e16a <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000e18a:	83 cb ff             	or     ebx,0xffffffff
c000e18d:	5a                   	pop    edx
c000e18e:	89 d8                	mov    eax,ebx
c000e190:	5b                   	pop    ebx
c000e191:	5e                   	pop    esi
c000e192:	c3                   	ret    

c000e193 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000e193:	55                   	push   ebp
c000e194:	31 c0                	xor    eax,eax
c000e196:	57                   	push   edi
c000e197:	56                   	push   esi
c000e198:	53                   	push   ebx
c000e199:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e19d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000e1a1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e1a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e1a9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000e1ab:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000e1ae:	83 fd 1f             	cmp    ebp,0x1f
c000e1b1:	7f 0b                	jg     c000e1be <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000e1b3:	0f b6 c2             	movzx  eax,dl
c000e1b6:	d3 e0                	shl    eax,cl
c000e1b8:	09 07                	or     DWORD PTR [edi],eax
c000e1ba:	b0 01                	mov    al,0x1
c000e1bc:	01 33                	add    DWORD PTR [ebx],esi
c000e1be:	5b                   	pop    ebx
c000e1bf:	5e                   	pop    esi
c000e1c0:	5f                   	pop    edi
c000e1c1:	5d                   	pop    ebp
c000e1c2:	c3                   	ret    

c000e1c3 <CmGetShift(unsigned int*, int*, int, bool*)>:
c000e1c3:	57                   	push   edi
c000e1c4:	56                   	push   esi
c000e1c5:	53                   	push   ebx
c000e1c6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e1ca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e1ce:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000e1d2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e1d6:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000e1d8:	7c 17                	jl     c000e1f1 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000e1da:	8b 17                	mov    edx,DWORD PTR [edi]
c000e1dc:	b8 01 00 00 00       	mov    eax,0x1
c000e1e1:	d3 e0                	shl    eax,cl
c000e1e3:	48                   	dec    eax
c000e1e4:	21 d0                	and    eax,edx
c000e1e6:	d3 ea                	shr    edx,cl
c000e1e8:	89 17                	mov    DWORD PTR [edi],edx
c000e1ea:	29 0b                	sub    DWORD PTR [ebx],ecx
c000e1ec:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000e1ef:	eb 05                	jmp    c000e1f6 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000e1f1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000e1f4:	31 c0                	xor    eax,eax
c000e1f6:	5b                   	pop    ebx
c000e1f7:	5e                   	pop    esi
c000e1f8:	5f                   	pop    edi
c000e1f9:	c3                   	ret    

c000e1fa <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000e1fa:	83 ec 40             	sub    esp,0x40
c000e1fd:	8d 44 24 09          	lea    eax,[esp+0x9]
c000e201:	50                   	push   eax
c000e202:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e206:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e20a:	e8 4d fa ff ff       	call   c000dc5c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e20f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e213:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000e217:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000e21b:	89 10                	mov    DWORD PTR [eax],edx
c000e21d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000e220:	83 c4 4c             	add    esp,0x4c
c000e223:	c3                   	ret    

c000e224 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000e224:	55                   	push   ebp
c000e225:	57                   	push   edi
c000e226:	56                   	push   esi
c000e227:	53                   	push   ebx
c000e228:	83 ec 40             	sub    esp,0x40
c000e22b:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000e22f:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000e233:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000e237:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000e23b:	53                   	push   ebx
c000e23c:	56                   	push   esi
c000e23d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e241:	e8 16 fa ff ff       	call   c000dc5c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e246:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000e24a:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000e24e:	83 c4 0c             	add    esp,0xc
c000e251:	53                   	push   ebx
c000e252:	56                   	push   esi
c000e253:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e257:	e8 24 fb ff ff       	call   c000dd80 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e25c:	83 c4 4c             	add    esp,0x4c
c000e25f:	5b                   	pop    ebx
c000e260:	5e                   	pop    esi
c000e261:	5f                   	pop    edi
c000e262:	5d                   	pop    ebp
c000e263:	c3                   	ret    

c000e264 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000e264:	55                   	push   ebp
c000e265:	57                   	push   edi
c000e266:	56                   	push   esi
c000e267:	31 f6                	xor    esi,esi
c000e269:	53                   	push   ebx
c000e26a:	31 db                	xor    ebx,ebx
c000e26c:	83 ec 40             	sub    esp,0x40
c000e26f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e277:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e27f:	6a 12                	push   0x12
c000e281:	68 ee 00 00 00       	push   0xee
c000e286:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000e28a:	e8 61 22 ff ff       	call   c00004f0 <memset>
c000e28f:	83 c4 10             	add    esp,0x10
c000e292:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000e296:	6a 08                	push   0x8
c000e298:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e29c:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000e2a0:	50                   	push   eax
c000e2a1:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000e2a5:	55                   	push   ebp
c000e2a6:	57                   	push   edi
c000e2a7:	e8 e7 fe ff ff       	call   c000e193 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000e2ac:	83 c4 10             	add    esp,0x10
c000e2af:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000e2b3:	50                   	push   eax
c000e2b4:	6a 06                	push   0x6
c000e2b6:	55                   	push   ebp
c000e2b7:	57                   	push   edi
c000e2b8:	e8 06 ff ff ff       	call   c000e1c3 <CmGetShift(unsigned int*, int*, int, bool*)>
c000e2bd:	83 c4 10             	add    esp,0x10
c000e2c0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e2c5:	74 07                	je     c000e2ce <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000e2c7:	46                   	inc    esi
c000e2c8:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000e2cc:	eb e1                	jmp    c000e2af <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000e2ce:	43                   	inc    ebx
c000e2cf:	83 fb 12             	cmp    ebx,0x12
c000e2d2:	75 c2                	jne    c000e296 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000e2d4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e2d8:	31 f6                	xor    esi,esi
c000e2da:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000e2dd:	50                   	push   eax
c000e2de:	50                   	push   eax
c000e2df:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c000e2e4:	46                   	inc    esi
c000e2e5:	8d 04 85 a0 cc 02 c0 	lea    eax,[eax*4-0x3ffd3360]
c000e2ec:	50                   	push   eax
c000e2ed:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000e2f1:	e8 7a 25 ff ff       	call   c0000870 <strcat>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	83 fe 18             	cmp    esi,0x18
c000e2fc:	75 df                	jne    c000e2dd <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000e2fe:	83 c4 3c             	add    esp,0x3c
c000e301:	31 c0                	xor    eax,eax
c000e303:	5b                   	pop    ebx
c000e304:	5e                   	pop    esi
c000e305:	5f                   	pop    edi
c000e306:	5d                   	pop    ebp
c000e307:	c3                   	ret    

c000e308 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000e308:	83 ec 40             	sub    esp,0x40
c000e30b:	8d 44 24 09          	lea    eax,[esp+0x9]
c000e30f:	50                   	push   eax
c000e310:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e314:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e318:	e8 3f f9 ff ff       	call   c000dc5c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e31d:	58                   	pop    eax
c000e31e:	5a                   	pop    edx
c000e31f:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000e323:	8d 44 24 15          	lea    eax,[esp+0x15]
c000e327:	50                   	push   eax
c000e328:	e8 37 ff ff ff       	call   c000e264 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000e32d:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000e332:	83 c4 4c             	add    esp,0x4c
c000e335:	c3                   	ret    

c000e336 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000e336:	55                   	push   ebp
c000e337:	57                   	push   edi
c000e338:	56                   	push   esi
c000e339:	53                   	push   ebx
c000e33a:	31 db                	xor    ebx,ebx
c000e33c:	83 ec 70             	sub    esp,0x70
c000e33f:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000e346:	6a 30                	push   0x30
c000e348:	6a 00                	push   0x0
c000e34a:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000e34e:	56                   	push   esi
c000e34f:	e8 9c 21 ff ff       	call   c00004f0 <memset>
c000e354:	83 c4 10             	add    esp,0x10
c000e357:	83 ec 0c             	sub    esp,0xc
c000e35a:	57                   	push   edi
c000e35b:	e8 20 22 ff ff       	call   c0000580 <strlen>
c000e360:	83 c4 10             	add    esp,0x10
c000e363:	39 d8                	cmp    eax,ebx
c000e365:	76 16                	jbe    c000e37d <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000e367:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000e36b:	83 ec 0c             	sub    esp,0xc
c000e36e:	50                   	push   eax
c000e36f:	e8 ec 25 ff ff       	call   c0000960 <toupper>
c000e374:	83 c4 10             	add    esp,0x10
c000e377:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000e37a:	43                   	inc    ebx
c000e37b:	eb da                	jmp    c000e357 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000e37d:	52                   	push   edx
c000e37e:	31 db                	xor    ebx,ebx
c000e380:	6a 18                	push   0x18
c000e382:	31 ff                	xor    edi,edi
c000e384:	6a 3f                	push   0x3f
c000e386:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e38a:	50                   	push   eax
c000e38b:	e8 60 21 ff ff       	call   c00004f0 <memset>
c000e390:	83 c4 10             	add    esp,0x10
c000e393:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c000e397:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e39b:	84 c0                	test   al,al
c000e39d:	0f 84 af 00 00 00    	je     c000e452 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000e3a3:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000e3a7:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000e3aa:	83 ec 0c             	sub    esp,0xc
c000e3ad:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c000e3b2:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000e3b6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000e3ba:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000e3bf:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000e3c3:	56                   	push   esi
c000e3c4:	e8 b7 21 ff ff       	call   c0000580 <strlen>
c000e3c9:	83 c4 10             	add    esp,0x10
c000e3cc:	85 c0                	test   eax,eax
c000e3ce:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000e3d2:	74 0b                	je     c000e3df <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000e3d4:	50                   	push   eax
c000e3d5:	6a 01                	push   0x1
c000e3d7:	56                   	push   esi
c000e3d8:	8d 44 24 20          	lea    eax,[esp+0x20]
c000e3dc:	50                   	push   eax
c000e3dd:	eb 0a                	jmp    c000e3e9 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000e3df:	50                   	push   eax
c000e3e0:	6a 00                	push   0x0
c000e3e2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000e3e6:	50                   	push   eax
c000e3e7:	6a 00                	push   0x0
c000e3e9:	e8 44 fd ff ff       	call   c000e132 <CmGetMatch(char*, char*, bool, bool*)>
c000e3ee:	83 c4 10             	add    esp,0x10
c000e3f1:	83 f8 ff             	cmp    eax,0xffffffff
c000e3f4:	75 1a                	jne    c000e410 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000e3f6:	83 ec 0c             	sub    esp,0xc
c000e3f9:	68 a0 99 02 c0       	push   0xc00299a0
c000e3fe:	e8 25 1f 00 00       	call   c0010328 <KePanic(char const*)>
c000e403:	83 c4 10             	add    esp,0x10
c000e406:	b8 02 00 00 00       	mov    eax,0x2
c000e40b:	e9 bb 00 00 00       	jmp    c000e4cb <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000e410:	83 ff 18             	cmp    edi,0x18
c000e413:	75 1a                	jne    c000e42f <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000e415:	83 ec 0c             	sub    esp,0xc
c000e418:	68 b5 99 02 c0       	push   0xc00299b5
c000e41d:	e8 06 1f 00 00       	call   c0010328 <KePanic(char const*)>
c000e422:	83 c4 10             	add    esp,0x10
c000e425:	b8 01 00 00 00       	mov    eax,0x1
c000e42a:	e9 9c 00 00 00       	jmp    c000e4cb <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000e42f:	47                   	inc    edi
c000e430:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e435:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000e439:	0f 45 dd             	cmovne ebx,ebp
c000e43c:	83 ec 0c             	sub    esp,0xc
c000e43f:	56                   	push   esi
c000e440:	e8 3b 21 ff ff       	call   c0000580 <strlen>
c000e445:	83 c4 10             	add    esp,0x10
c000e448:	85 c0                	test   eax,eax
c000e44a:	74 06                	je     c000e452 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000e44c:	43                   	inc    ebx
c000e44d:	e9 41 ff ff ff       	jmp    c000e393 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000e452:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e45a:	31 db                	xor    ebx,ebx
c000e45c:	31 ff                	xor    edi,edi
c000e45e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e466:	50                   	push   eax
c000e467:	6a 12                	push   0x12
c000e469:	68 ee 00 00 00       	push   0xee
c000e46e:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000e475:	e8 76 20 ff ff       	call   c00004f0 <memset>
c000e47a:	83 c4 10             	add    esp,0x10
c000e47d:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000e481:	83 fb 17             	cmp    ebx,0x17
c000e484:	7e 26                	jle    c000e4ac <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c000e486:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000e48a:	50                   	push   eax
c000e48b:	6a 08                	push   0x8
c000e48d:	55                   	push   ebp
c000e48e:	56                   	push   esi
c000e48f:	e8 2f fd ff ff       	call   c000e1c3 <CmGetShift(unsigned int*, int*, int, bool*)>
c000e494:	83 c4 10             	add    esp,0x10
c000e497:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e49c:	74 26                	je     c000e4c4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c000e49e:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000e4a5:	4b                   	dec    ebx
c000e4a6:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000e4a9:	47                   	inc    edi
c000e4aa:	eb 1c                	jmp    c000e4c8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000e4ac:	6a 06                	push   0x6
c000e4ae:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c000e4b3:	50                   	push   eax
c000e4b4:	55                   	push   ebp
c000e4b5:	56                   	push   esi
c000e4b6:	e8 d8 fc ff ff       	call   c000e193 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000e4bb:	83 c4 10             	add    esp,0x10
c000e4be:	84 c0                	test   al,al
c000e4c0:	75 06                	jne    c000e4c8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000e4c2:	eb c2                	jmp    c000e486 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c000e4c4:	31 c0                	xor    eax,eax
c000e4c6:	eb 03                	jmp    c000e4cb <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000e4c8:	43                   	inc    ebx
c000e4c9:	eb b2                	jmp    c000e47d <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c000e4cb:	83 c4 6c             	add    esp,0x6c
c000e4ce:	5b                   	pop    ebx
c000e4cf:	5e                   	pop    esi
c000e4d0:	5f                   	pop    edi
c000e4d1:	5d                   	pop    ebp
c000e4d2:	c3                   	ret    

c000e4d3 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000e4d3:	53                   	push   ebx
c000e4d4:	83 ec 3c             	sub    esp,0x3c
c000e4d7:	6a 2b                	push   0x2b
c000e4d9:	6a 00                	push   0x0
c000e4db:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000e4df:	53                   	push   ebx
c000e4e0:	e8 0b 20 ff ff       	call   c00004f0 <memset>
c000e4e5:	58                   	pop    eax
c000e4e6:	5a                   	pop    edx
c000e4e7:	8d 44 24 11          	lea    eax,[esp+0x11]
c000e4eb:	50                   	push   eax
c000e4ec:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e4f0:	e8 41 fe ff ff       	call   c000e336 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000e4f5:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000e4fa:	83 c4 0c             	add    esp,0xc
c000e4fd:	6a 15                	push   0x15
c000e4ff:	6a 00                	push   0x0
c000e501:	8d 44 24 27          	lea    eax,[esp+0x27]
c000e505:	50                   	push   eax
c000e506:	e8 e5 1f ff ff       	call   c00004f0 <memset>
c000e50b:	53                   	push   ebx
c000e50c:	6a 00                	push   0x0
c000e50e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e512:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e516:	e8 eb f9 ff ff       	call   c000df06 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000e51b:	83 c4 58             	add    esp,0x58
c000e51e:	5b                   	pop    ebx
c000e51f:	c3                   	ret    

c000e520 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000e520:	56                   	push   esi
c000e521:	53                   	push   ebx
c000e522:	83 ec 48             	sub    esp,0x48
c000e525:	6a 12                	push   0x12
c000e527:	68 ff 00 00 00       	push   0xff
c000e52c:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000e530:	56                   	push   esi
c000e531:	e8 ba 1f ff ff       	call   c00004f0 <memset>
c000e536:	5a                   	pop    edx
c000e537:	59                   	pop    ecx
c000e538:	56                   	push   esi
c000e539:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000e53d:	e8 f4 fd ff ff       	call   c000e336 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000e542:	83 c4 10             	add    esp,0x10
c000e545:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000e549:	85 db                	test   ebx,ebx
c000e54b:	74 42                	je     c000e58f <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000e54d:	50                   	push   eax
c000e54e:	8d 44 24 19          	lea    eax,[esp+0x19]
c000e552:	50                   	push   eax
c000e553:	53                   	push   ebx
c000e554:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e558:	e8 ff f6 ff ff       	call   c000dc5c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e55d:	83 c4 0c             	add    esp,0xc
c000e560:	6a 12                	push   0x12
c000e562:	8d 44 24 21          	lea    eax,[esp+0x21]
c000e566:	50                   	push   eax
c000e567:	56                   	push   esi
c000e568:	e8 13 1e ff ff       	call   c0000380 <memcmp>
c000e56d:	83 c4 10             	add    esp,0x10
c000e570:	85 c0                	test   eax,eax
c000e572:	74 1e                	je     c000e592 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000e574:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000e579:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000e57e:	c1 e3 08             	shl    ebx,0x8
c000e581:	09 d8                	or     eax,ebx
c000e583:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000e588:	c1 e3 10             	shl    ebx,0x10
c000e58b:	09 c3                	or     ebx,eax
c000e58d:	eb ba                	jmp    c000e549 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000e58f:	83 cb ff             	or     ebx,0xffffffff
c000e592:	83 c4 44             	add    esp,0x44
c000e595:	89 d8                	mov    eax,ebx
c000e597:	5b                   	pop    ebx
c000e598:	5e                   	pop    esi
c000e599:	c3                   	ret    

c000e59a <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000e59a:	57                   	push   edi
c000e59b:	56                   	push   esi
c000e59c:	53                   	push   ebx
c000e59d:	83 ec 34             	sub    esp,0x34
c000e5a0:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000e5a4:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000e5a8:	6a 2b                	push   0x2b
c000e5aa:	6a 00                	push   0x0
c000e5ac:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000e5b0:	53                   	push   ebx
c000e5b1:	e8 3a 1f ff ff       	call   c00004f0 <memset>
c000e5b6:	58                   	pop    eax
c000e5b7:	5a                   	pop    edx
c000e5b8:	8d 44 24 11          	lea    eax,[esp+0x11]
c000e5bc:	50                   	push   eax
c000e5bd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e5c1:	e8 70 fd ff ff       	call   c000e336 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000e5c6:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c000e5ca:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000e5ce:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000e5d2:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000e5d6:	53                   	push   ebx
c000e5d7:	6a 00                	push   0x0
c000e5d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e5dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e5e1:	e8 20 f9 ff ff       	call   c000df06 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000e5e6:	83 c4 50             	add    esp,0x50
c000e5e9:	5b                   	pop    ebx
c000e5ea:	5e                   	pop    esi
c000e5eb:	5f                   	pop    edi
c000e5ec:	c3                   	ret    

c000e5ed <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000e5ed:	55                   	push   ebp
c000e5ee:	57                   	push   edi
c000e5ef:	56                   	push   esi
c000e5f0:	53                   	push   ebx
c000e5f1:	83 ec 40             	sub    esp,0x40
c000e5f4:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000e5f8:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000e5fc:	6a 2b                	push   0x2b
c000e5fe:	6a 00                	push   0x0
c000e600:	8d 74 24 11          	lea    esi,[esp+0x11]
c000e604:	56                   	push   esi
c000e605:	e8 e6 1e ff ff       	call   c00004f0 <memset>
c000e60a:	5f                   	pop    edi
c000e60b:	89 ef                	mov    edi,ebp
c000e60d:	58                   	pop    eax
c000e60e:	8d 44 24 11          	lea    eax,[esp+0x11]
c000e612:	50                   	push   eax
c000e613:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000e617:	e8 1a fd ff ff       	call   c000e336 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000e61c:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000e621:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000e626:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000e62b:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000e630:	83 c4 10             	add    esp,0x10
c000e633:	85 ed                	test   ebp,ebp
c000e635:	74 14                	je     c000e64b <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000e637:	51                   	push   ecx
c000e638:	51                   	push   ecx
c000e639:	57                   	push   edi
c000e63a:	53                   	push   ebx
c000e63b:	e8 0e f7 ff ff       	call   c000dd4e <CmGetNext(Reghive_Tag*, int)>
c000e640:	83 c4 10             	add    esp,0x10
c000e643:	85 c0                	test   eax,eax
c000e645:	74 04                	je     c000e64b <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000e647:	89 c7                	mov    edi,eax
c000e649:	eb e8                	jmp    c000e633 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000e64b:	56                   	push   esi
c000e64c:	6a 00                	push   0x0
c000e64e:	57                   	push   edi
c000e64f:	53                   	push   ebx
c000e650:	e8 b1 f8 ff ff       	call   c000df06 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000e655:	83 c4 0c             	add    esp,0xc
c000e658:	56                   	push   esi
c000e659:	50                   	push   eax
c000e65a:	89 c7                	mov    edi,eax
c000e65c:	53                   	push   ebx
c000e65d:	e8 fa f5 ff ff       	call   c000dc5c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e662:	58                   	pop    eax
c000e663:	5a                   	pop    edx
c000e664:	6a 6c                	push   0x6c
c000e666:	6a 00                	push   0x0
c000e668:	6a 00                	push   0x0
c000e66a:	68 c6 99 02 c0       	push   0xc00299c6
c000e66f:	57                   	push   edi
c000e670:	53                   	push   ebx
c000e671:	e8 24 ff ff ff       	call   c000e59a <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000e676:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000e67a:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000e67e:	c1 e8 10             	shr    eax,0x10
c000e681:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000e685:	83 c4 1c             	add    esp,0x1c
c000e688:	56                   	push   esi
c000e689:	57                   	push   edi
c000e68a:	53                   	push   ebx
c000e68b:	e8 f0 f6 ff ff       	call   c000dd80 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e690:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000e695:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000e69a:	c1 e0 08             	shl    eax,0x8
c000e69d:	09 c2                	or     edx,eax
c000e69f:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000e6a4:	83 c4 4c             	add    esp,0x4c
c000e6a7:	5b                   	pop    ebx
c000e6a8:	5e                   	pop    esi
c000e6a9:	c1 e0 10             	shl    eax,0x10
c000e6ac:	09 d0                	or     eax,edx
c000e6ae:	5f                   	pop    edi
c000e6af:	5d                   	pop    ebp
c000e6b0:	c3                   	ret    

c000e6b1 <zStrtok(char*, char const*)>:
c000e6b1:	55                   	push   ebp
c000e6b2:	57                   	push   edi
c000e6b3:	56                   	push   esi
c000e6b4:	53                   	push   ebx
c000e6b5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e6b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e6bd:	85 db                	test   ebx,ebx
c000e6bf:	74 2f                	je     c000e6f0 <zStrtok(char*, char const*)+0x3f>
c000e6c1:	85 c0                	test   eax,eax
c000e6c3:	75 09                	jne    c000e6ce <zStrtok(char*, char const*)+0x1d>
c000e6c5:	a1 04 31 03 c0       	mov    eax,ds:0xc0033104
c000e6ca:	85 c0                	test   eax,eax
c000e6cc:	74 50                	je     c000e71e <zStrtok(char*, char const*)+0x6d>
c000e6ce:	31 c9                	xor    ecx,ecx
c000e6d0:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000e6d4:	74 03                	je     c000e6d9 <zStrtok(char*, char const*)+0x28>
c000e6d6:	41                   	inc    ecx
c000e6d7:	eb f7                	jmp    c000e6d0 <zStrtok(char*, char const*)+0x1f>
c000e6d9:	31 d2                	xor    edx,edx
c000e6db:	39 ca                	cmp    edx,ecx
c000e6dd:	74 15                	je     c000e6f4 <zStrtok(char*, char const*)+0x43>
c000e6df:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000e6e3:	8d 3c 10             	lea    edi,[eax+edx*1]
c000e6e6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000e6e9:	39 ee                	cmp    esi,ebp
c000e6eb:	74 13                	je     c000e700 <zStrtok(char*, char const*)+0x4f>
c000e6ed:	42                   	inc    edx
c000e6ee:	eb eb                	jmp    c000e6db <zStrtok(char*, char const*)+0x2a>
c000e6f0:	31 c0                	xor    eax,eax
c000e6f2:	eb 2a                	jmp    c000e71e <zStrtok(char*, char const*)+0x6d>
c000e6f4:	c7 05 04 31 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033104,0x0
c000e6fe:	eb 1e                	jmp    c000e71e <zStrtok(char*, char const*)+0x6d>
c000e700:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000e703:	39 ce                	cmp    esi,ecx
c000e705:	75 0a                	jne    c000e711 <zStrtok(char*, char const*)+0x60>
c000e707:	40                   	inc    eax
c000e708:	a3 04 31 03 c0       	mov    ds:0xc0033104,eax
c000e70d:	89 d8                	mov    eax,ebx
c000e70f:	eb 0d                	jmp    c000e71e <zStrtok(char*, char const*)+0x6d>
c000e711:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000e714:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000e718:	89 15 04 31 03 c0    	mov    DWORD PTR ds:0xc0033104,edx
c000e71e:	5b                   	pop    ebx
c000e71f:	5e                   	pop    esi
c000e720:	5f                   	pop    edi
c000e721:	5d                   	pop    ebp
c000e722:	c3                   	ret    

c000e723 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000e723:	57                   	push   edi
c000e724:	56                   	push   esi
c000e725:	53                   	push   ebx
c000e726:	81 ec 08 01 00 00    	sub    esp,0x108
c000e72c:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000e733:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000e73a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000e73e:	53                   	push   ebx
c000e73f:	e8 0c 1f ff ff       	call   c0000650 <strcpy>
c000e744:	59                   	pop    ecx
c000e745:	5e                   	pop    esi
c000e746:	68 6e a8 02 c0       	push   0xc002a86e
c000e74b:	53                   	push   ebx
c000e74c:	bb 01 00 00 00       	mov    ebx,0x1
c000e751:	e8 5b ff ff ff       	call   c000e6b1 <zStrtok(char*, char const*)>
c000e756:	83 c4 10             	add    esp,0x10
c000e759:	85 c0                	test   eax,eax
c000e75b:	74 3b                	je     c000e798 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e75d:	52                   	push   edx
c000e75e:	50                   	push   eax
c000e75f:	6a 01                	push   0x1
c000e761:	57                   	push   edi
c000e762:	e8 b9 fd ff ff       	call   c000e520 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000e767:	59                   	pop    ecx
c000e768:	5e                   	pop    esi
c000e769:	89 c3                	mov    ebx,eax
c000e76b:	68 6e a8 02 c0       	push   0xc002a86e
c000e770:	6a 00                	push   0x0
c000e772:	e8 3a ff ff ff       	call   c000e6b1 <zStrtok(char*, char const*)>
c000e777:	83 c4 10             	add    esp,0x10
c000e77a:	85 c0                	test   eax,eax
c000e77c:	89 c6                	mov    esi,eax
c000e77e:	74 18                	je     c000e798 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e780:	52                   	push   edx
c000e781:	52                   	push   edx
c000e782:	53                   	push   ebx
c000e783:	57                   	push   edi
c000e784:	e8 86 f5 ff ff       	call   c000dd0f <CmEnterDirectory(Reghive_Tag*, int)>
c000e789:	83 c4 10             	add    esp,0x10
c000e78c:	83 f8 ff             	cmp    eax,0xffffffff
c000e78f:	89 c3                	mov    ebx,eax
c000e791:	74 05                	je     c000e798 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e793:	50                   	push   eax
c000e794:	56                   	push   esi
c000e795:	53                   	push   ebx
c000e796:	eb c9                	jmp    c000e761 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000e798:	81 c4 00 01 00 00    	add    esp,0x100
c000e79e:	89 d8                	mov    eax,ebx
c000e7a0:	5b                   	pop    ebx
c000e7a1:	5e                   	pop    esi
c000e7a2:	5f                   	pop    edi
c000e7a3:	c3                   	ret    

c000e7a4 <Computer::close(int, int, void*)>:
c000e7a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e7a9:	c3                   	ret    

c000e7aa <Computer::Computer()>:
c000e7aa:	83 ec 0c             	sub    esp,0xc
c000e7ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b1:	83 ec 08             	sub    esp,0x8
c000e7b4:	68 08 8d 02 c0       	push   0xc0028d08
c000e7b9:	50                   	push   eax
c000e7ba:	e8 e5 bb ff ff       	call   c000a3a4 <Device::Device(char const*)>
c000e7bf:	83 c4 10             	add    esp,0x10
c000e7c2:	ba 18 9a 02 c0       	mov    edx,0xc0029a18
c000e7c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7cb:	89 10                	mov    DWORD PTR [eax],edx
c000e7cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d1:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e7db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7df:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e7e9:	90                   	nop
c000e7ea:	83 c4 0c             	add    esp,0xc
c000e7ed:	c3                   	ret    

c000e7ee <Computer::open(int, int, void*)>:
c000e7ee:	56                   	push   esi
c000e7ef:	53                   	push   ebx
c000e7f0:	83 ec 04             	sub    esp,0x4
c000e7f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e7f7:	39 1d 08 31 03 c0    	cmp    DWORD PTR ds:0xc0033108,ebx
c000e7fd:	74 10                	je     c000e80f <Computer::open(int, int, void*)+0x21>
c000e7ff:	83 ec 0c             	sub    esp,0xc
c000e802:	68 e4 99 02 c0       	push   0xc00299e4
c000e807:	e8 1c 1b 00 00       	call   c0010328 <KePanic(char const*)>
c000e80c:	83 c4 10             	add    esp,0x10
c000e80f:	83 ec 0c             	sub    esp,0xc
c000e812:	68 78 11 00 00       	push   0x1178
c000e817:	e8 b8 16 00 00       	call   c000fed4 <malloc>
c000e81c:	89 04 24             	mov    DWORD PTR [esp],eax
c000e81f:	89 c6                	mov    esi,eax
c000e821:	e8 dc c9 00 00       	call   c001b202 <CPU::CPU()>
c000e826:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e82a:	89 b3 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],esi
c000e830:	50                   	push   eax
c000e831:	6a 00                	push   0x0
c000e833:	6a 00                	push   0x0
c000e835:	56                   	push   esi
c000e836:	e8 a9 cb 00 00       	call   c001b3e4 <CPU::open(int, int, void*)>
c000e83b:	83 c4 14             	add    esp,0x14
c000e83e:	68 cc 99 02 c0       	push   0xc00299cc
c000e843:	e8 e1 f1 ff ff       	call   c000da29 <KeSetBootMessage(char const*)>
c000e848:	e8 c3 8c ff ff       	call   c0007510 <KeSetupDeviceTree()>
c000e84d:	e8 bf 8d ff ff       	call   c0007611 <KePrintDeviceTree()>
c000e852:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000e859:	e8 76 16 00 00       	call   c000fed4 <malloc>
c000e85e:	89 04 24             	mov    DWORD PTR [esp],eax
c000e861:	89 c6                	mov    esi,eax
c000e863:	e8 08 e8 ff ff       	call   c000d070 <ACPI::ACPI()>
c000e868:	89 b3 64 01 00 00    	mov    DWORD PTR [ebx+0x164],esi
c000e86e:	5a                   	pop    edx
c000e86f:	59                   	pop    ecx
c000e870:	56                   	push   esi
c000e871:	53                   	push   ebx
c000e872:	e8 cb b9 ff ff       	call   c000a242 <Device::addChild(Device*)>
c000e877:	5e                   	pop    esi
c000e878:	58                   	pop    eax
c000e879:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e87f:	50                   	push   eax
c000e880:	53                   	push   ebx
c000e881:	e8 bc b9 ff ff       	call   c000a242 <Device::addChild(Device*)>
c000e886:	83 c4 14             	add    esp,0x14
c000e889:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e88e:	5b                   	pop    ebx
c000e88f:	5e                   	pop    esi
c000e890:	c3                   	ret    

c000e891 <KeCalculateCRC32(unsigned char*, int)>:
c000e891:	53                   	push   ebx
c000e892:	83 c8 ff             	or     eax,0xffffffff
c000e895:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e899:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e89d:	01 cb                	add    ebx,ecx
c000e89f:	39 d9                	cmp    ecx,ebx
c000e8a1:	74 15                	je     c000e8b8 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000e8a3:	41                   	inc    ecx
c000e8a4:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000e8a7:	31 c2                	xor    edx,eax
c000e8a9:	c1 e8 08             	shr    eax,0x8
c000e8ac:	0f b6 d2             	movzx  edx,dl
c000e8af:	33 04 95 a0 cd 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffd3260]
c000e8b6:	eb e7                	jmp    c000e89f <KeCalculateCRC32(unsigned char*, int)+0xe>
c000e8b8:	5b                   	pop    ebx
c000e8b9:	f7 d0                	not    eax
c000e8bb:	c3                   	ret    

c000e8bc <EnvVarContainer::getEnv(char const*)>:
c000e8bc:	57                   	push   edi
c000e8bd:	56                   	push   esi
c000e8be:	53                   	push   ebx
c000e8bf:	31 db                	xor    ebx,ebx
c000e8c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e8c5:	39 1e                	cmp    DWORD PTR [esi],ebx
c000e8c7:	7e 2b                	jle    c000e8f4 <EnvVarContainer::getEnv(char const*)+0x38>
c000e8c9:	50                   	push   eax
c000e8ca:	50                   	push   eax
c000e8cb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e8ce:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000e8d5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000e8d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e8dc:	e8 9f 1e ff ff       	call   c0000780 <strcmp>
c000e8e1:	83 c4 10             	add    esp,0x10
c000e8e4:	85 c0                	test   eax,eax
c000e8e6:	75 09                	jne    c000e8f1 <EnvVarContainer::getEnv(char const*)+0x35>
c000e8e8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e8eb:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000e8ef:	eb 05                	jmp    c000e8f6 <EnvVarContainer::getEnv(char const*)+0x3a>
c000e8f1:	43                   	inc    ebx
c000e8f2:	eb d1                	jmp    c000e8c5 <EnvVarContainer::getEnv(char const*)+0x9>
c000e8f4:	31 c0                	xor    eax,eax
c000e8f6:	5b                   	pop    ebx
c000e8f7:	5e                   	pop    esi
c000e8f8:	5f                   	pop    edi
c000e8f9:	c3                   	ret    

c000e8fa <EnvVarContainer::setEnv(char const*, char const*)>:
c000e8fa:	55                   	push   ebp
c000e8fb:	57                   	push   edi
c000e8fc:	56                   	push   esi
c000e8fd:	53                   	push   ebx
c000e8fe:	83 ec 28             	sub    esp,0x28
c000e901:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e905:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e909:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e90d:	56                   	push   esi
c000e90e:	e8 6d 1c ff ff       	call   c0000580 <strlen>
c000e913:	40                   	inc    eax
c000e914:	89 04 24             	mov    DWORD PTR [esp],eax
c000e917:	e8 b8 15 00 00       	call   c000fed4 <malloc>
c000e91c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e91f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e923:	e8 58 1c ff ff       	call   c0000580 <strlen>
c000e928:	40                   	inc    eax
c000e929:	89 04 24             	mov    DWORD PTR [esp],eax
c000e92c:	e8 a3 15 00 00       	call   c000fed4 <malloc>
c000e931:	89 34 24             	mov    DWORD PTR [esp],esi
c000e934:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e938:	e8 43 1c ff ff       	call   c0000580 <strlen>
c000e93d:	83 c4 0c             	add    esp,0xc
c000e940:	40                   	inc    eax
c000e941:	50                   	push   eax
c000e942:	6a 00                	push   0x0
c000e944:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e948:	e8 a3 1b ff ff       	call   c00004f0 <memset>
c000e94d:	89 34 24             	mov    DWORD PTR [esp],esi
c000e950:	e8 2b 1c ff ff       	call   c0000580 <strlen>
c000e955:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e959:	8d 48 01             	lea    ecx,[eax+0x1]
c000e95c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e95e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e961:	89 de                	mov    esi,ebx
c000e963:	e8 18 1c ff ff       	call   c0000580 <strlen>
c000e968:	83 c4 0c             	add    esp,0xc
c000e96b:	40                   	inc    eax
c000e96c:	50                   	push   eax
c000e96d:	6a 00                	push   0x0
c000e96f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e973:	e8 78 1b ff ff       	call   c00004f0 <memset>
c000e978:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e97b:	e8 00 1c ff ff       	call   c0000580 <strlen>
c000e980:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e984:	8d 48 01             	lea    ecx,[eax+0x1]
c000e987:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e989:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e98c:	40                   	inc    eax
c000e98d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e990:	c1 e0 03             	shl    eax,0x3
c000e993:	5a                   	pop    edx
c000e994:	59                   	pop    ecx
c000e995:	50                   	push   eax
c000e996:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000e999:	e8 22 15 00 00       	call   c000fec0 <realloc>
c000e99e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e9a1:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9a5:	b9 08 00 00 00       	mov    ecx,0x8
c000e9aa:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e9ad:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e9b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e9b3:	83 c4 2c             	add    esp,0x2c
c000e9b6:	5b                   	pop    ebx
c000e9b7:	5e                   	pop    esi
c000e9b8:	5f                   	pop    edi
c000e9b9:	5d                   	pop    ebp
c000e9ba:	c3                   	ret    
c000e9bb:	90                   	nop

c000e9bc <EnvVarContainer::deleteEnv(char const*)>:
c000e9bc:	c3                   	ret    
c000e9bd:	90                   	nop

c000e9be <EnvVarContainer::loadFrom(char const*, char const*)>:
c000e9be:	55                   	push   ebp
c000e9bf:	57                   	push   edi
c000e9c0:	56                   	push   esi
c000e9c1:	53                   	push   ebx
c000e9c2:	81 ec 38 01 00 00    	sub    esp,0x138
c000e9c8:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000e9cf:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000e9d6:	68 14 01 00 00       	push   0x114
c000e9db:	e8 f4 14 00 00       	call   c000fed4 <malloc>
c000e9e0:	83 c4 0c             	add    esp,0xc
c000e9e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e9e6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e9ed:	89 c3                	mov    ebx,eax
c000e9ef:	50                   	push   eax
c000e9f0:	e8 df 9f ff ff       	call   c00089d4 <File::File(char const*, Process*)>
c000e9f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e9f8:	e8 b9 a2 ff ff       	call   c0008cb6 <File::exists()>
c000e9fd:	83 c4 10             	add    esp,0x10
c000ea00:	84 c0                	test   al,al
c000ea02:	75 31                	jne    c000ea35 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000ea04:	50                   	push   eax
c000ea05:	50                   	push   eax
c000ea06:	6a 12                	push   0x12
c000ea08:	53                   	push   ebx
c000ea09:	e8 e4 9f ff ff       	call   c00089f2 <File::open(FileOpenMode)>
c000ea0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ea10:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000ea13:	89 34 24             	mov    DWORD PTR [esp],esi
c000ea16:	e8 65 1b ff ff       	call   c0000580 <strlen>
c000ea1b:	5a                   	pop    edx
c000ea1c:	8d 54 24 20          	lea    edx,[esp+0x20]
c000ea20:	52                   	push   edx
c000ea21:	31 d2                	xor    edx,edx
c000ea23:	56                   	push   esi
c000ea24:	52                   	push   edx
c000ea25:	50                   	push   eax
c000ea26:	53                   	push   ebx
c000ea27:	ff d7                	call   edi
c000ea29:	83 c4 14             	add    esp,0x14
c000ea2c:	53                   	push   ebx
c000ea2d:	e8 1e a0 ff ff       	call   c0008a50 <File::close()>
c000ea32:	83 c4 10             	add    esp,0x10
c000ea35:	56                   	push   esi
c000ea36:	31 f6                	xor    esi,esi
c000ea38:	68 00 01 00 00       	push   0x100
c000ea3d:	6a 00                	push   0x0
c000ea3f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000ea43:	50                   	push   eax
c000ea44:	e8 a7 1a ff ff       	call   c00004f0 <memset>
c000ea49:	5f                   	pop    edi
c000ea4a:	58                   	pop    eax
c000ea4b:	6a 01                	push   0x1
c000ea4d:	53                   	push   ebx
c000ea4e:	e8 9f 9f ff ff       	call   c00089f2 <File::open(FileOpenMode)>
c000ea53:	83 c4 10             	add    esp,0x10
c000ea56:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ea5e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000ea66:	83 ec 0c             	sub    esp,0xc
c000ea69:	8d 54 24 20          	lea    edx,[esp+0x20]
c000ea6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ea6f:	52                   	push   edx
c000ea70:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c000ea74:	51                   	push   ecx
c000ea75:	6a 00                	push   0x0
c000ea77:	6a 01                	push   0x1
c000ea79:	53                   	push   ebx
c000ea7a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ea7d:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000ea82:	83 c4 20             	add    esp,0x20
c000ea85:	85 c0                	test   eax,eax
c000ea87:	89 c1                	mov    ecx,eax
c000ea89:	0f 84 36 01 00 00    	je     c000ebc5 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000ea8f:	83 f8 0d             	cmp    eax,0xd
c000ea92:	0f 84 22 01 00 00    	je     c000ebba <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000ea98:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000ea9d:	0f 84 f0 00 00 00    	je     c000eb93 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000eaa3:	83 f8 0a             	cmp    eax,0xa
c000eaa6:	74 13                	je     c000eabb <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000eaa8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000eaad:	74 0c                	je     c000eabb <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000eaaf:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000eab5:	0f 8e f6 00 00 00    	jle    c000ebb1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000eabb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eabf:	83 ec 0c             	sub    esp,0xc
c000eac2:	8d 78 01             	lea    edi,[eax+0x1]
c000eac5:	57                   	push   edi
c000eac6:	e8 09 14 00 00       	call   c000fed4 <malloc>
c000eacb:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000eacf:	8d 56 04             	lea    edx,[esi+0x4]
c000ead2:	89 14 24             	mov    DWORD PTR [esp],edx
c000ead5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ead9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000eadd:	e8 f2 13 00 00       	call   c000fed4 <malloc>
c000eae2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000eae6:	83 c4 0c             	add    esp,0xc
c000eae9:	57                   	push   edi
c000eaea:	6a 00                	push   0x0
c000eaec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eaf0:	e8 fb 19 ff ff       	call   c00004f0 <memset>
c000eaf5:	8d 74 24 30          	lea    esi,[esp+0x30]
c000eaf9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000eafd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000eb01:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000eb03:	83 c4 0c             	add    esp,0xc
c000eb06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000eb0a:	52                   	push   edx
c000eb0b:	6a 00                	push   0x0
c000eb0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eb11:	e8 da 19 ff ff       	call   c00004f0 <memset>
c000eb16:	8d 74 24 30          	lea    esi,[esp+0x30]
c000eb1a:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000eb1e:	89 34 24             	mov    DWORD PTR [esp],esi
c000eb21:	e8 5a 1a ff ff       	call   c0000580 <strlen>
c000eb26:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000eb2a:	89 c1                	mov    ecx,eax
c000eb2c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000eb2e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eb31:	83 c4 10             	add    esp,0x10
c000eb34:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000eb37:	40                   	inc    eax
c000eb38:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000eb3b:	85 d2                	test   edx,edx
c000eb3d:	75 0c                	jne    c000eb4b <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000eb3f:	83 ec 0c             	sub    esp,0xc
c000eb42:	6a 08                	push   0x8
c000eb44:	e8 8b 13 00 00       	call   c000fed4 <malloc>
c000eb49:	eb 0c                	jmp    c000eb57 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000eb4b:	51                   	push   ecx
c000eb4c:	51                   	push   ecx
c000eb4d:	c1 e0 03             	shl    eax,0x3
c000eb50:	50                   	push   eax
c000eb51:	52                   	push   edx
c000eb52:	e8 69 13 00 00       	call   c000fec0 <realloc>
c000eb57:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000eb5a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000eb5d:	83 c4 10             	add    esp,0x10
c000eb60:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000eb63:	8d 74 24 18          	lea    esi,[esp+0x18]
c000eb67:	b9 08 00 00 00       	mov    ecx,0x8
c000eb6c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000eb70:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000eb72:	50                   	push   eax
c000eb73:	31 f6                	xor    esi,esi
c000eb75:	68 00 01 00 00       	push   0x100
c000eb7a:	6a 00                	push   0x0
c000eb7c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000eb80:	50                   	push   eax
c000eb81:	e8 6a 19 ff ff       	call   c00004f0 <memset>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000eb91:	eb 27                	jmp    c000ebba <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000eb93:	83 f8 3d             	cmp    eax,0x3d
c000eb96:	74 1e                	je     c000ebb6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000eb98:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000eb9e:	7f 07                	jg     c000eba7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000eba0:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c000eba4:	46                   	inc    esi
c000eba5:	eb 13                	jmp    c000ebba <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000eba7:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000ebaf:	eb 09                	jmp    c000ebba <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000ebb1:	83 f8 3d             	cmp    eax,0x3d
c000ebb4:	75 ea                	jne    c000eba0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000ebb6:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000ebba:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ebbf:	0f 85 99 fe ff ff    	jne    c000ea5e <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000ebc5:	83 ec 0c             	sub    esp,0xc
c000ebc8:	53                   	push   ebx
c000ebc9:	e8 82 9e ff ff       	call   c0008a50 <File::close()>
c000ebce:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ebd0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ebd3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ebd6:	81 c4 3c 01 00 00    	add    esp,0x13c
c000ebdc:	5b                   	pop    ebx
c000ebdd:	5e                   	pop    esi
c000ebde:	5f                   	pop    edi
c000ebdf:	5d                   	pop    ebp
c000ebe0:	c3                   	ret    
c000ebe1:	90                   	nop

c000ebe2 <EnvVarContainer::__loadSystem()>:
c000ebe2:	83 ec 10             	sub    esp,0x10
c000ebe5:	68 a0 d1 02 c0       	push   0xc002d1a0
c000ebea:	68 3c 9a 02 c0       	push   0xc0029a3c
c000ebef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebf3:	e8 c6 fd ff ff       	call   c000e9be <EnvVarContainer::loadFrom(char const*, char const*)>
c000ebf8:	83 c4 1c             	add    esp,0x1c
c000ebfb:	c3                   	ret    

c000ebfc <EnvVarContainer::__loadUser()>:
c000ebfc:	c3                   	ret    
c000ebfd:	90                   	nop

c000ebfe <EnvVarContainer::EnvVarContainer(Process*)>:
c000ebfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec02:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ec08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec10:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ec13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec17:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ec1e:	90                   	nop
c000ec1f:	c3                   	ret    

c000ec20 <EnvVarContainer::~EnvVarContainer()>:
c000ec20:	83 ec 0c             	sub    esp,0xc
c000ec23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec27:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ec2a:	85 c0                	test   eax,eax
c000ec2c:	74 1d                	je     c000ec4b <EnvVarContainer::~EnvVarContainer()+0x2b>
c000ec2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec32:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec34:	85 c0                	test   eax,eax
c000ec36:	74 13                	je     c000ec4b <EnvVarContainer::~EnvVarContainer()+0x2b>
c000ec38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ec3f:	83 ec 0c             	sub    esp,0xc
c000ec42:	50                   	push   eax
c000ec43:	e8 9c 12 00 00       	call   c000fee4 <free>
c000ec48:	83 c4 10             	add    esp,0x10
c000ec4b:	90                   	nop
c000ec4c:	83 c4 0c             	add    esp,0xc
c000ec4f:	c3                   	ret    

c000ec50 <KeGetEnv(Process*, char const*)>:
c000ec50:	53                   	push   ebx
c000ec51:	83 ec 08             	sub    esp,0x8
c000ec54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec58:	39 05 58 33 03 c0    	cmp    DWORD PTR ds:0xc0033358,eax
c000ec5e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ec62:	74 04                	je     c000ec68 <KeGetEnv(Process*, char const*)+0x18>
c000ec64:	85 c0                	test   eax,eax
c000ec66:	75 0b                	jne    c000ec73 <KeGetEnv(Process*, char const*)+0x23>
c000ec68:	a1 10 31 03 c0       	mov    eax,ds:0xc0033110
c000ec6d:	85 c0                	test   eax,eax
c000ec6f:	75 19                	jne    c000ec8a <KeGetEnv(Process*, char const*)+0x3a>
c000ec71:	eb 27                	jmp    c000ec9a <KeGetEnv(Process*, char const*)+0x4a>
c000ec73:	52                   	push   edx
c000ec74:	52                   	push   edx
c000ec75:	53                   	push   ebx
c000ec76:	ff b0 ba 07 00 00    	push   DWORD PTR [eax+0x7ba]
c000ec7c:	e8 3b fc ff ff       	call   c000e8bc <EnvVarContainer::getEnv(char const*)>
c000ec81:	83 c4 10             	add    esp,0x10
c000ec84:	85 c0                	test   eax,eax
c000ec86:	75 28                	jne    c000ecb0 <KeGetEnv(Process*, char const*)+0x60>
c000ec88:	eb de                	jmp    c000ec68 <KeGetEnv(Process*, char const*)+0x18>
c000ec8a:	52                   	push   edx
c000ec8b:	52                   	push   edx
c000ec8c:	53                   	push   ebx
c000ec8d:	50                   	push   eax
c000ec8e:	e8 29 fc ff ff       	call   c000e8bc <EnvVarContainer::getEnv(char const*)>
c000ec93:	83 c4 10             	add    esp,0x10
c000ec96:	85 c0                	test   eax,eax
c000ec98:	75 16                	jne    c000ecb0 <KeGetEnv(Process*, char const*)+0x60>
c000ec9a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ec9e:	a1 14 31 03 c0       	mov    eax,ds:0xc0033114
c000eca3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eca7:	83 c4 08             	add    esp,0x8
c000ecaa:	5b                   	pop    ebx
c000ecab:	e9 0c fc ff ff       	jmp    c000e8bc <EnvVarContainer::getEnv(char const*)>
c000ecb0:	83 c4 08             	add    esp,0x8
c000ecb3:	5b                   	pop    ebx
c000ecb4:	c3                   	ret    

c000ecb5 <KeSetEnvSystem(char const*, char const*)>:
c000ecb5:	83 ec 10             	sub    esp,0x10
c000ecb8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ecbc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ecc0:	ff 35 14 31 03 c0    	push   DWORD PTR ds:0xc0033114
c000ecc6:	e8 2f fc ff ff       	call   c000e8fa <EnvVarContainer::setEnv(char const*, char const*)>
c000eccb:	83 c4 1c             	add    esp,0x1c
c000ecce:	c3                   	ret    

c000eccf <KeSetEnvUser(char const*, char const*)>:
c000eccf:	a1 10 31 03 c0       	mov    eax,ds:0xc0033110
c000ecd4:	85 c0                	test   eax,eax
c000ecd6:	74 15                	je     c000eced <KeSetEnvUser(char const*, char const*)+0x1e>
c000ecd8:	83 ec 10             	sub    esp,0x10
c000ecdb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ecdf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ece3:	50                   	push   eax
c000ece4:	e8 11 fc ff ff       	call   c000e8fa <EnvVarContainer::setEnv(char const*, char const*)>
c000ece9:	83 c4 1c             	add    esp,0x1c
c000ecec:	c3                   	ret    
c000eced:	c3                   	ret    

c000ecee <KeSetEnvProcess(Process*, char const*, char const*)>:
c000ecee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecf2:	8b 80 ba 07 00 00    	mov    eax,DWORD PTR [eax+0x7ba]
c000ecf8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ecfc:	e9 f9 fb ff ff       	jmp    c000e8fa <EnvVarContainer::setEnv(char const*, char const*)>

c000ed01 <KeDeleteEnvSystem(char const*)>:
c000ed01:	c3                   	ret    

c000ed02 <KeDeleteEnvUser(char const*)>:
c000ed02:	c3                   	ret    

c000ed03 <KeDeleteEnvProcess(Process*, char const*)>:
c000ed03:	c3                   	ret    

c000ed04 <KeNewProcessEnv(Process*)>:
c000ed04:	83 ec 28             	sub    esp,0x28
c000ed07:	6a 0c                	push   0xc
c000ed09:	e8 c6 11 00 00       	call   c000fed4 <malloc>
c000ed0e:	5a                   	pop    edx
c000ed0f:	59                   	pop    ecx
c000ed10:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ed14:	50                   	push   eax
c000ed15:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ed19:	e8 e0 fe ff ff       	call   c000ebfe <EnvVarContainer::EnvVarContainer(Process*)>
c000ed1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ed22:	83 c4 2c             	add    esp,0x2c
c000ed25:	c3                   	ret    

c000ed26 <KeCopyProcessEnv(Process*, Process*)>:
c000ed26:	57                   	push   edi
c000ed27:	56                   	push   esi
c000ed28:	53                   	push   ebx
c000ed29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed2d:	83 ec 0c             	sub    esp,0xc
c000ed30:	8b b8 ba 07 00 00    	mov    edi,DWORD PTR [eax+0x7ba]
c000ed36:	6a 0c                	push   0xc
c000ed38:	e8 97 11 00 00       	call   c000fed4 <malloc>
c000ed3d:	89 c3                	mov    ebx,eax
c000ed3f:	58                   	pop    eax
c000ed40:	5a                   	pop    edx
c000ed41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ed45:	53                   	push   ebx
c000ed46:	e8 b3 fe ff ff       	call   c000ebfe <EnvVarContainer::EnvVarContainer(Process*)>
c000ed4b:	8b 07                	mov    eax,DWORD PTR [edi]
c000ed4d:	89 03                	mov    DWORD PTR [ebx],eax
c000ed4f:	c1 e0 03             	shl    eax,0x3
c000ed52:	89 04 24             	mov    DWORD PTR [esp],eax
c000ed55:	e8 7a 11 00 00       	call   c000fed4 <malloc>
c000ed5a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ed5d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ed5f:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000ed62:	89 c7                	mov    edi,eax
c000ed64:	c1 e1 03             	shl    ecx,0x3
c000ed67:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ed69:	83 c4 10             	add    esp,0x10
c000ed6c:	89 d8                	mov    eax,ebx
c000ed6e:	5b                   	pop    ebx
c000ed6f:	5e                   	pop    esi
c000ed70:	5f                   	pop    edi
c000ed71:	c3                   	ret    

c000ed72 <KeLoadSystemEnv()>:
c000ed72:	53                   	push   ebx
c000ed73:	83 ec 14             	sub    esp,0x14
c000ed76:	6a 0c                	push   0xc
c000ed78:	e8 57 11 00 00       	call   c000fed4 <malloc>
c000ed7d:	89 c3                	mov    ebx,eax
c000ed7f:	58                   	pop    eax
c000ed80:	5a                   	pop    edx
c000ed81:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c000ed87:	53                   	push   ebx
c000ed88:	e8 71 fe ff ff       	call   c000ebfe <EnvVarContainer::EnvVarContainer(Process*)>
c000ed8d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ed90:	89 1d 14 31 03 c0    	mov    DWORD PTR ds:0xc0033114,ebx
c000ed96:	e8 47 fe ff ff       	call   c000ebe2 <EnvVarContainer::__loadSystem()>
c000ed9b:	83 c4 18             	add    esp,0x18
c000ed9e:	5b                   	pop    ebx
c000ed9f:	c3                   	ret    

c000eda0 <KeLoadUserEnv()>:
c000eda0:	53                   	push   ebx
c000eda1:	83 ec 14             	sub    esp,0x14
c000eda4:	6a 0c                	push   0xc
c000eda6:	e8 29 11 00 00       	call   c000fed4 <malloc>
c000edab:	89 c3                	mov    ebx,eax
c000edad:	58                   	pop    eax
c000edae:	5a                   	pop    edx
c000edaf:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c000edb5:	53                   	push   ebx
c000edb6:	e8 43 fe ff ff       	call   c000ebfe <EnvVarContainer::EnvVarContainer(Process*)>
c000edbb:	89 1d 10 31 03 c0    	mov    DWORD PTR ds:0xc0033110,ebx
c000edc1:	83 c4 18             	add    esp,0x18
c000edc4:	5b                   	pop    ebx
c000edc5:	c3                   	ret    

c000edc6 <KeFlushEnv()>:
c000edc6:	c3                   	ret    

c000edc7 <KeGetProcessTotalEnvCount(Process*)>:
c000edc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edcb:	8b 15 10 31 03 c0    	mov    edx,DWORD PTR ds:0xc0033110
c000edd1:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000edd7:	a1 14 31 03 c0       	mov    eax,ds:0xc0033114
c000eddc:	8b 00                	mov    eax,DWORD PTR [eax]
c000edde:	03 01                	add    eax,DWORD PTR [ecx]
c000ede0:	85 d2                	test   edx,edx
c000ede2:	74 02                	je     c000ede6 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000ede4:	03 02                	add    eax,DWORD PTR [edx]
c000ede6:	c3                   	ret    

c000ede7 <KeGetProcessEnvPair(Process*, int)>:
c000ede7:	57                   	push   edi
c000ede8:	56                   	push   esi
c000ede9:	8b 35 10 31 03 c0    	mov    esi,DWORD PTR ds:0xc0033110
c000edef:	53                   	push   ebx
c000edf0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000edf4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf8:	85 f6                	test   esi,esi
c000edfa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edfe:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000ee04:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ee06:	75 16                	jne    c000ee1e <KeGetProcessEnvPair(Process*, int)+0x37>
c000ee08:	39 c2                	cmp    edx,eax
c000ee0a:	7c 16                	jl     c000ee22 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000ee0c:	8b 0d 14 31 03 c0    	mov    ecx,DWORD PTR ds:0xc0033114
c000ee12:	8b 31                	mov    esi,DWORD PTR [ecx]
c000ee14:	01 c6                	add    esi,eax
c000ee16:	39 d6                	cmp    esi,edx
c000ee18:	7e 3c                	jle    c000ee56 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000ee1a:	29 c2                	sub    edx,eax
c000ee1c:	eb 04                	jmp    c000ee22 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000ee1e:	39 c2                	cmp    edx,eax
c000ee20:	7d 05                	jge    c000ee27 <KeGetProcessEnvPair(Process*, int)+0x40>
c000ee22:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000ee25:	eb 20                	jmp    c000ee47 <KeGetProcessEnvPair(Process*, int)+0x60>
c000ee27:	8b 3e                	mov    edi,DWORD PTR [esi]
c000ee29:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000ee2c:	39 d1                	cmp    ecx,edx
c000ee2e:	7e 04                	jle    c000ee34 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000ee30:	29 c2                	sub    edx,eax
c000ee32:	eb 10                	jmp    c000ee44 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000ee34:	8b 35 14 31 03 c0    	mov    esi,DWORD PTR ds:0xc0033114
c000ee3a:	03 0e                	add    ecx,DWORD PTR [esi]
c000ee3c:	39 d1                	cmp    ecx,edx
c000ee3e:	7e 16                	jle    c000ee56 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000ee40:	29 c2                	sub    edx,eax
c000ee42:	29 fa                	sub    edx,edi
c000ee44:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ee47:	8d 14 d0             	lea    edx,[eax+edx*8]
c000ee4a:	8b 02                	mov    eax,DWORD PTR [edx]
c000ee4c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ee4f:	89 03                	mov    DWORD PTR [ebx],eax
c000ee51:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000ee54:	eb 1d                	jmp    c000ee73 <KeGetProcessEnvPair(Process*, int)+0x8c>
c000ee56:	83 ec 0c             	sub    esp,0xc
c000ee59:	68 5e 9a 02 c0       	push   0xc0029a5e
c000ee5e:	e8 c5 14 00 00       	call   c0010328 <KePanic(char const*)>
c000ee63:	83 c4 10             	add    esp,0x10
c000ee66:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000ee6c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000ee73:	89 d8                	mov    eax,ebx
c000ee75:	5b                   	pop    ebx
c000ee76:	5e                   	pop    esi
c000ee77:	5f                   	pop    edi
c000ee78:	c2 04 00             	ret    0x4
c000ee7b:	90                   	nop

c000ee7c <KeDisplayProgramFault(char const*)>:
c000ee7c:	83 ec 0c             	sub    esp,0xc
c000ee7f:	83 ec 0c             	sub    esp,0xc
c000ee82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ee86:	e8 db 80 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000ee8b:	83 c4 10             	add    esp,0x10
c000ee8e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000ee93:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee95:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ee98:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000ee9e:	85 c0                	test   eax,eax
c000eea0:	74 22                	je     c000eec4 <KeDisplayProgramFault(char const*)+0x48>
c000eea2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000eea7:	8b 00                	mov    eax,DWORD PTR [eax]
c000eea9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eeac:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000eeb2:	6a 04                	push   0x4
c000eeb4:	6a 0f                	push   0xf
c000eeb6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eeba:	50                   	push   eax
c000eebb:	e8 16 3e 00 00       	call   c0012cd6 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000eec0:	83 c4 10             	add    esp,0x10
c000eec3:	90                   	nop
c000eec4:	90                   	nop
c000eec5:	83 c4 0c             	add    esp,0xc
c000eec8:	c3                   	ret    
c000eec9:	8d 76 00             	lea    esi,[esi+0x0]

c000eecc <KeGeneralProtectionFault(void*, void*)>:
c000eecc:	83 ec 0c             	sub    esp,0xc
c000eecf:	83 ec 08             	sub    esp,0x8
c000eed2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eed6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eeda:	e8 4a b8 00 00       	call   c001a729 <HalHandleGeneralProtectionFault(void*, void*)>
c000eedf:	83 c4 10             	add    esp,0x10
c000eee2:	0f b6 c0             	movzx  eax,al
c000eee5:	85 c0                	test   eax,eax
c000eee7:	75 2f                	jne    c000ef18 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000eee9:	83 ec 0c             	sub    esp,0xc
c000eeec:	68 78 9a 02 c0       	push   0xc0029a78
c000eef1:	e8 86 ff ff ff       	call   c000ee7c <KeDisplayProgramFault(char const*)>
c000eef6:	83 c4 10             	add    esp,0x10
c000eef9:	83 ec 0c             	sub    esp,0xc
c000eefc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ef00:	e8 9d b9 00 00       	call   c001a8a2 <HalDisplayDebugInfo(void*)>
c000ef05:	83 c4 10             	add    esp,0x10
c000ef08:	83 ec 0c             	sub    esp,0xc
c000ef0b:	6a 7e                	push   0x7e
c000ef0d:	e8 92 87 00 00       	call   c00176a4 <KeTerminateCurrentThread(int)>
c000ef12:	83 c4 10             	add    esp,0x10
c000ef15:	eb 05                	jmp    c000ef1c <KeGeneralProtectionFault(void*, void*)+0x50>
c000ef17:	90                   	nop
c000ef18:	90                   	nop
c000ef19:	8d 76 00             	lea    esi,[esi+0x0]
c000ef1c:	83 c4 0c             	add    esp,0xc
c000ef1f:	c3                   	ret    

c000ef20 <KePageFault(void*, void*)>:
c000ef20:	83 ec 0c             	sub    esp,0xc
c000ef23:	83 ec 08             	sub    esp,0x8
c000ef26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ef2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ef2e:	e8 fe b8 00 00       	call   c001a831 <HalHandlePageFault(void*, void*)>
c000ef33:	83 c4 10             	add    esp,0x10
c000ef36:	0f b6 c0             	movzx  eax,al
c000ef39:	85 c0                	test   eax,eax
c000ef3b:	75 2f                	jne    c000ef6c <KePageFault(void*, void*)+0x4c>
c000ef3d:	83 ec 0c             	sub    esp,0xc
c000ef40:	68 91 9a 02 c0       	push   0xc0029a91
c000ef45:	e8 32 ff ff ff       	call   c000ee7c <KeDisplayProgramFault(char const*)>
c000ef4a:	83 c4 10             	add    esp,0x10
c000ef4d:	83 ec 0c             	sub    esp,0xc
c000ef50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ef54:	e8 49 b9 00 00       	call   c001a8a2 <HalDisplayDebugInfo(void*)>
c000ef59:	83 c4 10             	add    esp,0x10
c000ef5c:	83 ec 0c             	sub    esp,0xc
c000ef5f:	6a 7f                	push   0x7f
c000ef61:	e8 3e 87 00 00       	call   c00176a4 <KeTerminateCurrentThread(int)>
c000ef66:	83 c4 10             	add    esp,0x10
c000ef69:	eb 05                	jmp    c000ef70 <KePageFault(void*, void*)+0x50>
c000ef6b:	90                   	nop
c000ef6c:	90                   	nop
c000ef6d:	8d 76 00             	lea    esi,[esi+0x0]
c000ef70:	83 c4 0c             	add    esp,0xc
c000ef73:	c3                   	ret    

c000ef74 <KeOpcodeFault(void*, void*)>:
c000ef74:	83 ec 0c             	sub    esp,0xc
c000ef77:	83 ec 08             	sub    esp,0x8
c000ef7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ef7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ef82:	e8 d9 b8 00 00       	call   c001a860 <HalHandleOpcodeFault(void*, void*)>
c000ef87:	83 c4 10             	add    esp,0x10
c000ef8a:	0f b6 c0             	movzx  eax,al
c000ef8d:	85 c0                	test   eax,eax
c000ef8f:	75 2f                	jne    c000efc0 <KeOpcodeFault(void*, void*)+0x4c>
c000ef91:	83 ec 0c             	sub    esp,0xc
c000ef94:	68 9c 9a 02 c0       	push   0xc0029a9c
c000ef99:	e8 de fe ff ff       	call   c000ee7c <KeDisplayProgramFault(char const*)>
c000ef9e:	83 c4 10             	add    esp,0x10
c000efa1:	83 ec 0c             	sub    esp,0xc
c000efa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000efa8:	e8 f5 b8 00 00       	call   c001a8a2 <HalDisplayDebugInfo(void*)>
c000efad:	83 c4 10             	add    esp,0x10
c000efb0:	83 ec 0c             	sub    esp,0xc
c000efb3:	6a 7c                	push   0x7c
c000efb5:	e8 ea 86 00 00       	call   c00176a4 <KeTerminateCurrentThread(int)>
c000efba:	83 c4 10             	add    esp,0x10
c000efbd:	eb 05                	jmp    c000efc4 <KeOpcodeFault(void*, void*)+0x50>
c000efbf:	90                   	nop
c000efc0:	90                   	nop
c000efc1:	8d 76 00             	lea    esi,[esi+0x0]
c000efc4:	83 c4 0c             	add    esp,0xc
c000efc7:	c3                   	ret    

c000efc8 <KeOtherFault(void*, void*)>:
c000efc8:	83 ec 0c             	sub    esp,0xc
c000efcb:	83 ec 0c             	sub    esp,0xc
c000efce:	68 b8 9a 02 c0       	push   0xc0029ab8
c000efd3:	e8 a4 fe ff ff       	call   c000ee7c <KeDisplayProgramFault(char const*)>
c000efd8:	83 c4 10             	add    esp,0x10
c000efdb:	83 ec 0c             	sub    esp,0xc
c000efde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000efe2:	e8 bb b8 00 00       	call   c001a8a2 <HalDisplayDebugInfo(void*)>
c000efe7:	83 c4 10             	add    esp,0x10
c000efea:	83 ec 0c             	sub    esp,0xc
c000efed:	6a 7d                	push   0x7d
c000efef:	e8 b0 86 00 00       	call   c00176a4 <KeTerminateCurrentThread(int)>
c000eff4:	83 c4 10             	add    esp,0x10
c000eff7:	90                   	nop
c000eff8:	83 c4 0c             	add    esp,0xc
c000effb:	c3                   	ret    

c000effc <KeNonMaskableInterrupt(void*, void*)>:
c000effc:	83 ec 0c             	sub    esp,0xc
c000efff:	e8 2c bc 00 00       	call   c001ac30 <HalReceivedNMI()>
c000f004:	90                   	nop
c000f005:	83 c4 0c             	add    esp,0xc
c000f008:	c3                   	ret    
c000f009:	8d 76 00             	lea    esi,[esi+0x0]

c000f00c <KeDoubleFault(void*, void*)>:
c000f00c:	83 ec 0c             	sub    esp,0xc
c000f00f:	83 ec 0c             	sub    esp,0xc
c000f012:	68 a9 9a 02 c0       	push   0xc0029aa9
c000f017:	e8 0c 13 00 00       	call   c0010328 <KePanic(char const*)>
c000f01c:	83 c4 10             	add    esp,0x10
c000f01f:	90                   	nop
c000f020:	83 c4 0c             	add    esp,0xc
c000f023:	c3                   	ret    

c000f024 <GDTEntry::setBase(unsigned int)>:
c000f024:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f028:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f02c:	89 c1                	mov    ecx,eax
c000f02e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f032:	c1 e9 10             	shr    ecx,0x10
c000f035:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f038:	c1 e8 18             	shr    eax,0x18
c000f03b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f03e:	c3                   	ret    
c000f03f:	90                   	nop

c000f040 <GDTEntry::setLimit(unsigned int)>:
c000f040:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f044:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f048:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f04b:	66 89 01             	mov    WORD PTR [ecx],ax
c000f04e:	c1 e8 10             	shr    eax,0x10
c000f051:	83 e0 0f             	and    eax,0xf
c000f054:	83 e2 f0             	and    edx,0xfffffff0
c000f057:	09 d0                	or     eax,edx
c000f059:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f05c:	c3                   	ret    
c000f05d:	90                   	nop

c000f05e <GDT::GDT()>:
c000f05e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f062:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f06c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f072:	90                   	nop
c000f073:	c3                   	ret    

c000f074 <GDT::addEntry(GDTEntry)>:
c000f074:	53                   	push   ebx
c000f075:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f079:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f07d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f081:	8b 02                	mov    eax,DWORD PTR [edx]
c000f083:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000f087:	8d 48 01             	lea    ecx,[eax+0x1]
c000f08a:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000f08e:	c1 e0 03             	shl    eax,0x3
c000f091:	89 0a                	mov    DWORD PTR [edx],ecx
c000f093:	5b                   	pop    ebx
c000f094:	c3                   	ret    
c000f095:	90                   	nop

c000f096 <GDT::getNumberOfEntries()>:
c000f096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f09a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f09c:	c3                   	ret    
c000f09d:	90                   	nop

c000f09e <GDT::flush()>:
c000f09e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0a2:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0a4:	83 c0 04             	add    eax,0x4
c000f0a7:	a3 1a 31 03 c0       	mov    ds:0xc003311a,eax
c000f0ac:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0b3:	66 89 15 18 31 03 c0 	mov    WORD PTR ds:0xc0033118,dx
c000f0ba:	e9 9b 12 ff ff       	jmp    c000035a <loadGDT>
c000f0bf:	90                   	nop

c000f0c0 <GDT::setup()>:
c000f0c0:	57                   	push   edi
c000f0c1:	56                   	push   esi
c000f0c2:	53                   	push   ebx
c000f0c3:	83 ec 30             	sub    esp,0x30
c000f0c6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000f0ca:	6a 00                	push   0x0
c000f0cc:	8d 74 24 14          	lea    esi,[esp+0x14]
c000f0d0:	56                   	push   esi
c000f0d1:	e8 4e ff ff ff       	call   c000f024 <GDTEntry::setBase(unsigned int)>
c000f0d6:	6a 00                	push   0x0
c000f0d8:	56                   	push   esi
c000f0d9:	e8 62 ff ff ff       	call   c000f040 <GDTEntry::setLimit(unsigned int)>
c000f0de:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000f0e6:	6a 00                	push   0x0
c000f0e8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f0ec:	56                   	push   esi
c000f0ed:	e8 32 ff ff ff       	call   c000f024 <GDTEntry::setBase(unsigned int)>
c000f0f2:	68 ff ff ff 00       	push   0xffffff
c000f0f7:	56                   	push   esi
c000f0f8:	e8 43 ff ff ff       	call   c000f040 <GDTEntry::setLimit(unsigned int)>
c000f0fd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f101:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f105:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f10a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000f10e:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f113:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f117:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000f11b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f11f:	89 f8                	mov    eax,edi
c000f121:	89 fa                	mov    edx,edi
c000f123:	80 e4 f7             	and    ah,0xf7
c000f126:	80 ce 60             	or     dh,0x60
c000f129:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000f12d:	89 c7                	mov    edi,eax
c000f12f:	80 cc 60             	or     ah,0x60
c000f132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f136:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f13a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f13e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f142:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f146:	83 c4 20             	add    esp,0x20
c000f149:	6a 00                	push   0x0
c000f14b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f14f:	50                   	push   eax
c000f150:	e8 cf fe ff ff       	call   c000f024 <GDTEntry::setBase(unsigned int)>
c000f155:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000f159:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000f15d:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000f161:	83 e0 3f             	and    eax,0x3f
c000f164:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000f168:	6a 00                	push   0x0
c000f16a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000f16e:	50                   	push   eax
c000f16f:	e8 b0 fe ff ff       	call   c000f024 <GDTEntry::setBase(unsigned int)>
c000f174:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000f178:	83 e0 3f             	and    eax,0x3f
c000f17b:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000f17f:	83 c4 0c             	add    esp,0xc
c000f182:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f186:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f18a:	53                   	push   ebx
c000f18b:	e8 e4 fe ff ff       	call   c000f074 <GDT::addEntry(GDTEntry)>
c000f190:	83 c4 0c             	add    esp,0xc
c000f193:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f197:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f19b:	53                   	push   ebx
c000f19c:	e8 d3 fe ff ff       	call   c000f074 <GDT::addEntry(GDTEntry)>
c000f1a1:	83 c4 0c             	add    esp,0xc
c000f1a4:	57                   	push   edi
c000f1a5:	56                   	push   esi
c000f1a6:	53                   	push   ebx
c000f1a7:	e8 c8 fe ff ff       	call   c000f074 <GDT::addEntry(GDTEntry)>
c000f1ac:	83 c4 0c             	add    esp,0xc
c000f1af:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000f1b3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000f1b7:	53                   	push   ebx
c000f1b8:	e8 b7 fe ff ff       	call   c000f074 <GDT::addEntry(GDTEntry)>
c000f1bd:	83 c4 0c             	add    esp,0xc
c000f1c0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f1c4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f1c8:	53                   	push   ebx
c000f1c9:	e8 a6 fe ff ff       	call   c000f074 <GDT::addEntry(GDTEntry)>
c000f1ce:	83 c4 0c             	add    esp,0xc
c000f1d1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1d5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1d9:	53                   	push   ebx
c000f1da:	e8 95 fe ff ff       	call   c000f074 <GDT::addEntry(GDTEntry)>
c000f1df:	83 c4 0c             	add    esp,0xc
c000f1e2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1ea:	53                   	push   ebx
c000f1eb:	e8 84 fe ff ff       	call   c000f074 <GDT::addEntry(GDTEntry)>
c000f1f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f1f3:	e8 a6 fe ff ff       	call   c000f09e <GDT::flush()>
c000f1f8:	83 c4 40             	add    esp,0x40
c000f1fb:	5b                   	pop    ebx
c000f1fc:	5e                   	pop    esi
c000f1fd:	5f                   	pop    edi
c000f1fe:	c3                   	ret    

c000f1ff <idleFunction(void*)>:
c000f1ff:	83 ec 0c             	sub    esp,0xc
c000f202:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c000f209:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c000f210:	75 01                	jne    c000f213 <idleFunction(void*)+0x14>
c000f212:	fb                   	sti    
c000f213:	e8 b3 ba 00 00       	call   c001accb <HalSystemIdle()>
c000f218:	e8 81 88 01 00       	call   c0027a9e <idleCommon()>
c000f21d:	eb f4                	jmp    c000f213 <idleFunction(void*)+0x14>
c000f21f:	90                   	nop

c000f220 <IDTEntry::IDTEntry(bool)>:
c000f220:	53                   	push   ebx
c000f221:	83 ec 04             	sub    esp,0x4
c000f224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f228:	88 04 24             	mov    BYTE PTR [esp],al
c000f22b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f22f:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f235:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f239:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f23d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f241:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f244:	83 e2 f0             	and    edx,0xfffffff0
c000f247:	83 ca 0e             	or     edx,0xe
c000f24a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f24d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f251:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f254:	83 e2 ef             	and    edx,0xffffffef
c000f257:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f25a:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000f25e:	85 c0                	test   eax,eax
c000f260:	74 06                	je     c000f268 <IDTEntry::IDTEntry(bool)+0x48>
c000f262:	b2 03                	mov    dl,0x3
c000f264:	eb 06                	jmp    c000f26c <IDTEntry::IDTEntry(bool)+0x4c>
c000f266:	66 90                	xchg   ax,ax
c000f268:	b2 00                	mov    dl,0x0
c000f26a:	66 90                	xchg   ax,ax
c000f26c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f270:	83 e2 03             	and    edx,0x3
c000f273:	89 d3                	mov    ebx,edx
c000f275:	c1 e3 05             	shl    ebx,0x5
c000f278:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f27b:	83 e2 9f             	and    edx,0xffffff9f
c000f27e:	88 d1                	mov    cl,dl
c000f280:	88 da                	mov    dl,bl
c000f282:	09 ca                	or     edx,ecx
c000f284:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f287:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f28b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28e:	83 ca 80             	or     edx,0xffffff80
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	90                   	nop
c000f295:	83 c4 04             	add    esp,0x4
c000f298:	5b                   	pop    ebx
c000f299:	c3                   	ret    

c000f29a <IDTEntry::setOffset(unsigned int)>:
c000f29a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f29e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a2:	66 89 02             	mov    WORD PTR [edx],ax
c000f2a5:	c1 e8 10             	shr    eax,0x10
c000f2a8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2ac:	c3                   	ret    
c000f2ad:	90                   	nop
c000f2ae:	66 90                	xchg   ax,ax

c000f2b0 <IDT::IDT()>:
c000f2b0:	90                   	nop
c000f2b1:	c3                   	ret    

c000f2b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2b6:	83 c0 30             	add    eax,0x30
c000f2b9:	c3                   	ret    

c000f2ba <IDT::addEntry(IDTEntry, int)>:
c000f2ba:	53                   	push   ebx
c000f2bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2cb:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2ce:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2d2:	5b                   	pop    ebx
c000f2d3:	c3                   	ret    

c000f2d4 <IDT::addEntry(int, void (*)(), bool)>:
c000f2d4:	53                   	push   ebx
c000f2d5:	83 ec 10             	sub    esp,0x10
c000f2d8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2dd:	50                   	push   eax
c000f2de:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2e2:	53                   	push   ebx
c000f2e3:	e8 38 ff ff ff       	call   c000f220 <IDTEntry::IDTEntry(bool)>
c000f2e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 a8 ff ff ff       	call   c000f29a <IDTEntry::setOffset(unsigned int)>
c000f2f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f2f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f2fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f2fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f302:	e8 b3 ff ff ff       	call   c000f2ba <IDT::addEntry(IDTEntry, int)>
c000f307:	83 c4 30             	add    esp,0x30
c000f30a:	5b                   	pop    ebx
c000f30b:	c3                   	ret    

c000f30c <IDT::flush()>:
c000f30c:	66 c7 05 20 31 03 c0 ff 07 	mov    WORD PTR ds:0xc0033120,0x7ff
c000f315:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f319:	a3 22 31 03 c0       	mov    ds:0xc0033122,eax
c000f31e:	0f 01 1d 20 31 03 c0 	lidtd  ds:0xc0033120
c000f325:	c3                   	ret    

c000f326 <IDT::setup()>:
c000f326:	57                   	push   edi
c000f327:	56                   	push   esi
c000f328:	53                   	push   ebx
c000f329:	83 ec 10             	sub    esp,0x10
c000f32c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f330:	6a 00                	push   0x0
c000f332:	68 50 26 02 c0       	push   0xc0022650
c000f337:	6a 00                	push   0x0
c000f339:	53                   	push   ebx
c000f33a:	e8 95 ff ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f33f:	6a 00                	push   0x0
c000f341:	68 60 26 02 c0       	push   0xc0022660
c000f346:	6a 01                	push   0x1
c000f348:	53                   	push   ebx
c000f349:	e8 86 ff ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f34e:	83 c4 20             	add    esp,0x20
c000f351:	6a 00                	push   0x0
c000f353:	68 6a 26 02 c0       	push   0xc002266a
c000f358:	6a 02                	push   0x2
c000f35a:	53                   	push   ebx
c000f35b:	e8 74 ff ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	6a 00                	push   0x0
c000f362:	68 74 26 02 c0       	push   0xc0022674
c000f367:	6a 03                	push   0x3
c000f369:	53                   	push   ebx
c000f36a:	e8 65 ff ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f36f:	83 c4 20             	add    esp,0x20
c000f372:	6a 00                	push   0x0
c000f374:	68 7e 26 02 c0       	push   0xc002267e
c000f379:	6a 04                	push   0x4
c000f37b:	53                   	push   ebx
c000f37c:	e8 53 ff ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f381:	6a 00                	push   0x0
c000f383:	68 88 26 02 c0       	push   0xc0022688
c000f388:	6a 05                	push   0x5
c000f38a:	53                   	push   ebx
c000f38b:	e8 44 ff ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f390:	83 c4 20             	add    esp,0x20
c000f393:	6a 00                	push   0x0
c000f395:	68 92 26 02 c0       	push   0xc0022692
c000f39a:	6a 06                	push   0x6
c000f39c:	53                   	push   ebx
c000f39d:	e8 32 ff ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f3a2:	6a 00                	push   0x0
c000f3a4:	68 9c 26 02 c0       	push   0xc002269c
c000f3a9:	6a 07                	push   0x7
c000f3ab:	53                   	push   ebx
c000f3ac:	e8 23 ff ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f3b1:	83 c4 20             	add    esp,0x20
c000f3b4:	6a 00                	push   0x0
c000f3b6:	68 a6 26 02 c0       	push   0xc00226a6
c000f3bb:	6a 08                	push   0x8
c000f3bd:	53                   	push   ebx
c000f3be:	e8 11 ff ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f3c3:	6a 00                	push   0x0
c000f3c5:	68 ae 26 02 c0       	push   0xc00226ae
c000f3ca:	6a 09                	push   0x9
c000f3cc:	53                   	push   ebx
c000f3cd:	e8 02 ff ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f3d2:	83 c4 20             	add    esp,0x20
c000f3d5:	6a 00                	push   0x0
c000f3d7:	68 b8 26 02 c0       	push   0xc00226b8
c000f3dc:	6a 0a                	push   0xa
c000f3de:	53                   	push   ebx
c000f3df:	e8 f0 fe ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f3e4:	6a 00                	push   0x0
c000f3e6:	68 c0 26 02 c0       	push   0xc00226c0
c000f3eb:	6a 0b                	push   0xb
c000f3ed:	53                   	push   ebx
c000f3ee:	e8 e1 fe ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f3f3:	83 c4 20             	add    esp,0x20
c000f3f6:	6a 00                	push   0x0
c000f3f8:	68 c8 26 02 c0       	push   0xc00226c8
c000f3fd:	6a 0c                	push   0xc
c000f3ff:	53                   	push   ebx
c000f400:	e8 cf fe ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f405:	6a 00                	push   0x0
c000f407:	68 d0 26 02 c0       	push   0xc00226d0
c000f40c:	6a 0d                	push   0xd
c000f40e:	53                   	push   ebx
c000f40f:	e8 c0 fe ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f414:	83 c4 20             	add    esp,0x20
c000f417:	6a 00                	push   0x0
c000f419:	68 ea 26 02 c0       	push   0xc00226ea
c000f41e:	6a 0e                	push   0xe
c000f420:	53                   	push   ebx
c000f421:	e8 ae fe ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f426:	6a 00                	push   0x0
c000f428:	68 f2 26 02 c0       	push   0xc00226f2
c000f42d:	6a 0f                	push   0xf
c000f42f:	53                   	push   ebx
c000f430:	e8 9f fe ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f435:	83 c4 20             	add    esp,0x20
c000f438:	6a 00                	push   0x0
c000f43a:	68 fc 26 02 c0       	push   0xc00226fc
c000f43f:	6a 10                	push   0x10
c000f441:	53                   	push   ebx
c000f442:	e8 8d fe ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f447:	6a 00                	push   0x0
c000f449:	68 06 27 02 c0       	push   0xc0022706
c000f44e:	6a 11                	push   0x11
c000f450:	53                   	push   ebx
c000f451:	e8 7e fe ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f456:	83 c4 20             	add    esp,0x20
c000f459:	6a 00                	push   0x0
c000f45b:	68 10 27 02 c0       	push   0xc0022710
c000f460:	6a 12                	push   0x12
c000f462:	53                   	push   ebx
c000f463:	e8 6c fe ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f468:	6a 01                	push   0x1
c000f46a:	68 aa 27 02 c0       	push   0xc00227aa
c000f46f:	6a 60                	push   0x60
c000f471:	53                   	push   ebx
c000f472:	e8 5d fe ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f477:	83 c4 20             	add    esp,0x20
c000f47a:	6a 00                	push   0x0
c000f47c:	68 b1 27 02 c0       	push   0xc00227b1
c000f481:	6a 20                	push   0x20
c000f483:	53                   	push   ebx
c000f484:	e8 4b fe ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f489:	6a 00                	push   0x0
c000f48b:	68 9c 27 02 c0       	push   0xc002279c
c000f490:	6a 21                	push   0x21
c000f492:	53                   	push   ebx
c000f493:	e8 3c fe ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f498:	83 c4 20             	add    esp,0x20
c000f49b:	6a 00                	push   0x0
c000f49d:	68 a3 27 02 c0       	push   0xc00227a3
c000f4a2:	6a 22                	push   0x22
c000f4a4:	53                   	push   ebx
c000f4a5:	e8 2a fe ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f4aa:	6a 00                	push   0x0
c000f4ac:	68 1a 27 02 c0       	push   0xc002271a
c000f4b1:	6a 23                	push   0x23
c000f4b3:	53                   	push   ebx
c000f4b4:	e8 1b fe ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f4b9:	83 c4 20             	add    esp,0x20
c000f4bc:	6a 00                	push   0x0
c000f4be:	68 24 27 02 c0       	push   0xc0022724
c000f4c3:	6a 24                	push   0x24
c000f4c5:	53                   	push   ebx
c000f4c6:	e8 09 fe ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f4cb:	6a 00                	push   0x0
c000f4cd:	68 2e 27 02 c0       	push   0xc002272e
c000f4d2:	6a 25                	push   0x25
c000f4d4:	53                   	push   ebx
c000f4d5:	e8 fa fd ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f4da:	83 c4 20             	add    esp,0x20
c000f4dd:	6a 00                	push   0x0
c000f4df:	68 38 27 02 c0       	push   0xc0022738
c000f4e4:	6a 26                	push   0x26
c000f4e6:	53                   	push   ebx
c000f4e7:	e8 e8 fd ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f4ec:	6a 00                	push   0x0
c000f4ee:	68 42 27 02 c0       	push   0xc0022742
c000f4f3:	6a 27                	push   0x27
c000f4f5:	53                   	push   ebx
c000f4f6:	e8 d9 fd ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f4fb:	83 c4 20             	add    esp,0x20
c000f4fe:	6a 00                	push   0x0
c000f500:	68 4c 27 02 c0       	push   0xc002274c
c000f505:	6a 28                	push   0x28
c000f507:	53                   	push   ebx
c000f508:	e8 c7 fd ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f50d:	6a 00                	push   0x0
c000f50f:	68 56 27 02 c0       	push   0xc0022756
c000f514:	6a 29                	push   0x29
c000f516:	53                   	push   ebx
c000f517:	e8 b8 fd ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f51c:	83 c4 20             	add    esp,0x20
c000f51f:	6a 00                	push   0x0
c000f521:	68 60 27 02 c0       	push   0xc0022760
c000f526:	6a 2a                	push   0x2a
c000f528:	53                   	push   ebx
c000f529:	e8 a6 fd ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f52e:	6a 00                	push   0x0
c000f530:	68 6a 27 02 c0       	push   0xc002276a
c000f535:	6a 2b                	push   0x2b
c000f537:	53                   	push   ebx
c000f538:	e8 97 fd ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f53d:	83 c4 20             	add    esp,0x20
c000f540:	6a 00                	push   0x0
c000f542:	68 74 27 02 c0       	push   0xc0022774
c000f547:	6a 2c                	push   0x2c
c000f549:	53                   	push   ebx
c000f54a:	e8 85 fd ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f54f:	6a 00                	push   0x0
c000f551:	68 7e 27 02 c0       	push   0xc002277e
c000f556:	6a 2d                	push   0x2d
c000f558:	53                   	push   ebx
c000f559:	e8 76 fd ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f55e:	83 c4 20             	add    esp,0x20
c000f561:	6a 00                	push   0x0
c000f563:	68 88 27 02 c0       	push   0xc0022788
c000f568:	6a 2e                	push   0x2e
c000f56a:	53                   	push   ebx
c000f56b:	e8 64 fd ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f570:	6a 00                	push   0x0
c000f572:	68 92 27 02 c0       	push   0xc0022792
c000f577:	6a 2f                	push   0x2f
c000f579:	53                   	push   ebx
c000f57a:	e8 55 fd ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f57f:	83 c4 20             	add    esp,0x20
c000f582:	6a 00                	push   0x0
c000f584:	68 b8 28 02 c0       	push   0xc00228b8
c000f589:	6a 30                	push   0x30
c000f58b:	53                   	push   ebx
c000f58c:	e8 43 fd ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f591:	6a 00                	push   0x0
c000f593:	68 c2 28 02 c0       	push   0xc00228c2
c000f598:	6a 31                	push   0x31
c000f59a:	53                   	push   ebx
c000f59b:	e8 34 fd ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f5a0:	83 c4 20             	add    esp,0x20
c000f5a3:	6a 00                	push   0x0
c000f5a5:	68 cc 28 02 c0       	push   0xc00228cc
c000f5aa:	6a 32                	push   0x32
c000f5ac:	53                   	push   ebx
c000f5ad:	e8 22 fd ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f5b2:	6a 00                	push   0x0
c000f5b4:	68 d6 28 02 c0       	push   0xc00228d6
c000f5b9:	6a 33                	push   0x33
c000f5bb:	53                   	push   ebx
c000f5bc:	e8 13 fd ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f5c1:	83 c4 20             	add    esp,0x20
c000f5c4:	6a 00                	push   0x0
c000f5c6:	68 e0 28 02 c0       	push   0xc00228e0
c000f5cb:	6a 34                	push   0x34
c000f5cd:	53                   	push   ebx
c000f5ce:	e8 01 fd ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f5d3:	6a 00                	push   0x0
c000f5d5:	68 ea 28 02 c0       	push   0xc00228ea
c000f5da:	6a 35                	push   0x35
c000f5dc:	53                   	push   ebx
c000f5dd:	e8 f2 fc ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f5e2:	83 c4 20             	add    esp,0x20
c000f5e5:	6a 00                	push   0x0
c000f5e7:	68 f4 28 02 c0       	push   0xc00228f4
c000f5ec:	6a 36                	push   0x36
c000f5ee:	53                   	push   ebx
c000f5ef:	e8 e0 fc ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f5f4:	6a 00                	push   0x0
c000f5f6:	68 fe 28 02 c0       	push   0xc00228fe
c000f5fb:	6a 37                	push   0x37
c000f5fd:	53                   	push   ebx
c000f5fe:	e8 d1 fc ff ff       	call   c000f2d4 <IDT::addEntry(int, void (*)(), bool)>
c000f603:	83 c4 1c             	add    esp,0x1c
c000f606:	6a 03                	push   0x3
c000f608:	6a 02                	push   0x2
c000f60a:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000f610:	e8 3b 4a 00 00       	call   c0014050 <VAS::allocatePages(int, int)>
c000f615:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f61c:	89 c6                	mov    esi,eax
c000f61e:	e8 b1 08 00 00       	call   c000fed4 <malloc>
c000f623:	81 c6 00 20 00 00    	add    esi,0x2000
c000f629:	89 04 24             	mov    DWORD PTR [esp],eax
c000f62c:	89 c7                	mov    edi,eax
c000f62e:	e8 ed 3a 00 00       	call   c0013120 <TSS::TSS()>
c000f633:	83 c4 0c             	add    esp,0xc
c000f636:	68 a6 26 02 c0       	push   0xc00226a6
c000f63b:	56                   	push   esi
c000f63c:	57                   	push   edi
c000f63d:	e8 22 3b 00 00       	call   c0013164 <TSS::setup(unsigned long, unsigned long)>
c000f642:	89 c6                	mov    esi,eax
c000f644:	58                   	pop    eax
c000f645:	5a                   	pop    edx
c000f646:	6a 00                	push   0x0
c000f648:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f64c:	50                   	push   eax
c000f64d:	e8 ce fb ff ff       	call   c000f220 <IDTEntry::IDTEntry(bool)>
c000f652:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f656:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f65b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f662:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f66c:	80 ce 05             	or     dh,0x5
c000f66f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f676:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f67a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f67d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f680:	e8 87 fc ff ff       	call   c000f30c <IDT::flush()>
c000f685:	83 c4 20             	add    esp,0x20
c000f688:	5b                   	pop    ebx
c000f689:	5e                   	pop    esi
c000f68a:	5f                   	pop    edi
c000f68b:	c3                   	ret    

c000f68c <CPU::current()>:
c000f68c:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c000f691:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000f697:	c3                   	ret    

c000f698 <operator new(unsigned long)>:
c000f698:	e9 37 08 00 00       	jmp    c000fed4 <malloc>

c000f69d <operator delete(void*)>:
c000f69d:	e9 52 08 00 00       	jmp    c000fef4 <rfree>

c000f6a2 <disableIRQs()>:
c000f6a2:	fa                   	cli    
c000f6a3:	c3                   	ret    

c000f6a4 <enableIRQs()>:
c000f6a4:	fb                   	sti    
c000f6a5:	c3                   	ret    

c000f6a6 <lockScheduler()>:
c000f6a6:	fa                   	cli    
c000f6a7:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c000f6ad:	c3                   	ret    

c000f6ae <unlockScheduler()>:
c000f6ae:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c000f6b5:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c000f6bc:	75 01                	jne    c000f6bf <unlockScheduler()+0x11>
c000f6be:	fb                   	sti    
c000f6bf:	c3                   	ret    

c000f6c0 <lockStuff()>:
c000f6c0:	fa                   	cli    
c000f6c1:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c000f6c7:	ff 05 2c 33 03 c0    	inc    DWORD PTR ds:0xc003332c
c000f6cd:	c3                   	ret    

c000f6ce <unlockStuff()>:
c000f6ce:	83 ec 0c             	sub    esp,0xc
c000f6d1:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c000f6d6:	48                   	dec    eax
c000f6d7:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c000f6dc:	75 18                	jne    c000f6f6 <unlockStuff()+0x28>
c000f6de:	83 3d 28 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033328,0x0
c000f6e5:	74 0f                	je     c000f6f6 <unlockStuff()+0x28>
c000f6e7:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c000f6f1:	e8 ba 77 00 00       	call   c0016eb0 <schedule()>
c000f6f6:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c000f6fd:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c000f704:	75 01                	jne    c000f707 <unlockStuff()+0x39>
c000f706:	fb                   	sti    
c000f707:	83 c4 0c             	add    esp,0xc
c000f70a:	c3                   	ret    

c000f70b <Virt::getAKernelVAS()>:
c000f70b:	a1 90 32 03 c0       	mov    eax,ds:0xc0033290
c000f710:	c3                   	ret    

c000f711 <__not_memcpy>:
c000f711:	57                   	push   edi
c000f712:	56                   	push   esi
c000f713:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f717:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f71b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f71f:	89 c7                	mov    edi,eax
c000f721:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f723:	5e                   	pop    esi
c000f724:	5f                   	pop    edi
c000f725:	c3                   	ret    

c000f726 <KeFormatDate(char*, int, int, int, int, bool)>:
c000f726:	55                   	push   ebp
c000f727:	57                   	push   edi
c000f728:	56                   	push   esi
c000f729:	be e8 03 00 00       	mov    esi,0x3e8
c000f72e:	53                   	push   ebx
c000f72f:	bb 0a 00 00 00       	mov    ebx,0xa
c000f734:	81 ec ac 00 00 00    	sub    esp,0xac
c000f73a:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000f73f:	8b 8c 24 d0 00 00 00 	mov    ecx,DWORD PTR [esp+0xd0]
c000f746:	89 c8                	mov    eax,ecx
c000f748:	99                   	cdq    
c000f749:	f7 fb                	idiv   ebx
c000f74b:	89 d5                	mov    ebp,edx
c000f74d:	99                   	cdq    
c000f74e:	f7 fb                	idiv   ebx
c000f750:	8d 42 30             	lea    eax,[edx+0x30]
c000f753:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f757:	8d 45 30             	lea    eax,[ebp+0x30]
c000f75a:	0f b6 ac 24 d4 00 00 00 	movzx  ebp,BYTE PTR [esp+0xd4]
c000f762:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000f766:	89 c8                	mov    eax,ecx
c000f768:	99                   	cdq    
c000f769:	f7 fe                	idiv   esi
c000f76b:	be 64 00 00 00       	mov    esi,0x64
c000f770:	99                   	cdq    
c000f771:	f7 fb                	idiv   ebx
c000f773:	8d 42 30             	lea    eax,[edx+0x30]
c000f776:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000f77a:	89 c8                	mov    eax,ecx
c000f77c:	99                   	cdq    
c000f77d:	f7 fe                	idiv   esi
c000f77f:	99                   	cdq    
c000f780:	f7 fb                	idiv   ebx
c000f782:	31 db                	xor    ebx,ebx
c000f784:	8d 42 30             	lea    eax,[edx+0x30]
c000f787:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000f78b:	0f be 8b 44 31 03 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffccebc]
c000f792:	83 f9 59             	cmp    ecx,0x59
c000f795:	0f 84 1f 01 00 00    	je     c000f8ba <KeFormatDate(char*, int, int, int, int, bool)+0x194>
c000f79b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000f79f:	8b 94 24 c8 00 00 00 	mov    edx,DWORD PTR [esp+0xc8]
c000f7a6:	83 f9 4d             	cmp    ecx,0x4d
c000f7a9:	0f 44 94 24 cc 00 00 00 	cmove  edx,DWORD PTR [esp+0xcc]
c000f7b1:	57                   	push   edi
c000f7b2:	57                   	push   edi
c000f7b3:	89 d7                	mov    edi,edx
c000f7b5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f7b9:	c1 ff 1f             	sar    edi,0x1f
c000f7bc:	57                   	push   edi
c000f7bd:	52                   	push   edx
c000f7be:	e8 6d 04 00 00       	call   c000fc30 <KeGetDigitsInNumber(long long)>
c000f7c3:	83 c4 10             	add    esp,0x10
c000f7c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f7ca:	48                   	dec    eax
c000f7cb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f7cf:	75 1c                	jne    c000f7ed <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000f7d1:	83 f9 44             	cmp    ecx,0x44
c000f7d4:	75 09                	jne    c000f7df <KeFormatDate(char*, int, int, int, int, bool)+0xb9>
c000f7d6:	80 3d 60 31 03 c0 00 	cmp    BYTE PTR ds:0xc0033160,0x0
c000f7dd:	eb 0c                	jmp    c000f7eb <KeFormatDate(char*, int, int, int, int, bool)+0xc5>
c000f7df:	83 f9 4d             	cmp    ecx,0x4d
c000f7e2:	75 60                	jne    c000f844 <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000f7e4:	80 3d 61 31 03 c0 00 	cmp    BYTE PTR ds:0xc0033161,0x0
c000f7eb:	74 57                	je     c000f844 <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000f7ed:	89 d0                	mov    eax,edx
c000f7ef:	b9 0a 00 00 00       	mov    ecx,0xa
c000f7f4:	99                   	cdq    
c000f7f5:	f7 f9                	idiv   ecx
c000f7f7:	89 d6                	mov    esi,edx
c000f7f9:	99                   	cdq    
c000f7fa:	f7 f9                	idiv   ecx
c000f7fc:	83 c2 30             	add    edx,0x30
c000f7ff:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f803:	8d 56 30             	lea    edx,[esi+0x30]
c000f806:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000f80a:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000f80f:	56                   	push   esi
c000f810:	56                   	push   esi
c000f811:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000f815:	57                   	push   edi
c000f816:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f81a:	56                   	push   esi
c000f81b:	e8 50 10 ff ff       	call   c0000870 <strcat>
c000f820:	83 c4 10             	add    esp,0x10
c000f823:	83 fb 02             	cmp    ebx,0x2
c000f826:	74 34                	je     c000f85c <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000f828:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f82d:	a0 48 31 03 c0       	mov    al,ds:0xc0033148
c000f832:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f836:	51                   	push   ecx
c000f837:	51                   	push   ecx
c000f838:	57                   	push   edi
c000f839:	56                   	push   esi
c000f83a:	e8 31 10 ff ff       	call   c0000870 <strcat>
c000f83f:	83 c4 10             	add    esp,0x10
c000f842:	eb 18                	jmp    c000f85c <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000f844:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f849:	89 d0                	mov    eax,edx
c000f84b:	b9 0a 00 00 00       	mov    ecx,0xa
c000f850:	99                   	cdq    
c000f851:	f7 f9                	idiv   ecx
c000f853:	83 c2 30             	add    edx,0x30
c000f856:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f85a:	eb b3                	jmp    c000f80f <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000f85c:	43                   	inc    ebx
c000f85d:	83 fb 03             	cmp    ebx,0x3
c000f860:	0f 85 25 ff ff ff    	jne    c000f78b <KeFormatDate(char*, int, int, int, int, bool)+0x65>
c000f866:	52                   	push   edx
c000f867:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000f86e:	6a 00                	push   0x0
c000f870:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f877:	e8 74 0c ff ff       	call   c00004f0 <memset>
c000f87c:	89 34 24             	mov    DWORD PTR [esp],esi
c000f87f:	e8 fc 0c ff ff       	call   c0000580 <strlen>
c000f884:	83 c4 10             	add    esp,0x10
c000f887:	40                   	inc    eax
c000f888:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000f88f:	72 14                	jb     c000f8a5 <KeFormatDate(char*, int, int, int, int, bool)+0x17f>
c000f891:	50                   	push   eax
c000f892:	50                   	push   eax
c000f893:	56                   	push   esi
c000f894:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f89b:	e8 b0 0d ff ff       	call   c0000650 <strcpy>
c000f8a0:	83 c4 10             	add    esp,0x10
c000f8a3:	eb 58                	jmp    c000f8fd <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000f8a5:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000f8ac:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000f8b3:	8d 48 ff             	lea    ecx,[eax-0x1]
c000f8b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f8b8:	eb 43                	jmp    c000f8fd <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000f8ba:	85 ed                	test   ebp,ebp
c000f8bc:	74 2a                	je     c000f8e8 <KeFormatDate(char*, int, int, int, int, bool)+0x1c2>
c000f8be:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f8c3:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000f8c7:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f8cb:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f8cf:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f8d3:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f8d7:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000f8db:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f8df:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f8e3:	e9 27 ff ff ff       	jmp    c000f80f <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000f8e8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f8ec:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f8f0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f8f4:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f8f8:	e9 0d ff ff ff       	jmp    c000f80a <KeFormatDate(char*, int, int, int, int, bool)+0xe4>
c000f8fd:	81 c4 ac 00 00 00    	add    esp,0xac
c000f903:	5b                   	pop    ebx
c000f904:	5e                   	pop    esi
c000f905:	5f                   	pop    edi
c000f906:	5d                   	pop    ebp
c000f907:	c3                   	ret    

c000f908 <KeFormatShortDate(char*, int, int, int, int)>:
c000f908:	83 ec 14             	sub    esp,0x14
c000f90b:	6a 00                	push   0x0
c000f90d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f911:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f915:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f919:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f91d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f921:	e8 00 fe ff ff       	call   c000f726 <KeFormatDate(char*, int, int, int, int, bool)>
c000f926:	83 c4 2c             	add    esp,0x2c
c000f929:	c3                   	ret    

c000f92a <KeFormatLongDate(char*, int, int, int, int)>:
c000f92a:	83 ec 14             	sub    esp,0x14
c000f92d:	6a 01                	push   0x1
c000f92f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f933:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f937:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f93b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f93f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f943:	e8 de fd ff ff       	call   c000f726 <KeFormatDate(char*, int, int, int, int, bool)>
c000f948:	83 c4 2c             	add    esp,0x2c
c000f94b:	c3                   	ret    

c000f94c <KeSetLocale(klocale_t)>:
c000f94c:	57                   	push   edi
c000f94d:	b9 09 00 00 00       	mov    ecx,0x9
c000f952:	56                   	push   esi
c000f953:	bf 40 31 03 c0       	mov    edi,0xc0033140
c000f958:	fc                   	cld    
c000f959:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f95d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f95f:	5e                   	pop    esi
c000f960:	5f                   	pop    edi
c000f961:	c3                   	ret    

c000f962 <KeInitialiseLocale()>:
c000f962:	57                   	push   edi
c000f963:	56                   	push   esi
c000f964:	83 ec 3c             	sub    esp,0x3c
c000f967:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000f96f:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000f977:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000f97f:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000f987:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000f98e:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000f996:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000f99e:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000f9a5:	68 e0 9a 02 c0       	push   0xc0029ae0
c000f9aa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000f9ae:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f9b2:	50                   	push   eax
c000f9b3:	e8 98 0c ff ff       	call   c0000650 <strcpy>
c000f9b8:	83 ec 20             	sub    esp,0x20
c000f9bb:	b9 09 00 00 00       	mov    ecx,0x9
c000f9c0:	fc                   	cld    
c000f9c1:	89 e7                	mov    edi,esp
c000f9c3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f9c5:	e8 82 ff ff ff       	call   c000f94c <KeSetLocale(klocale_t)>
c000f9ca:	83 c4 64             	add    esp,0x64
c000f9cd:	5e                   	pop    esi
c000f9ce:	5f                   	pop    edi
c000f9cf:	c3                   	ret    

c000f9d0 <KeFormatCurrency(char*, int, long long, long long)>:
c000f9d0:	c3                   	ret    

c000f9d1 <KeFormatCurrency(char*, int, double)>:
c000f9d1:	c3                   	ret    

c000f9d2 <KeFormatNumber(char*, long long, long long)>:
c000f9d2:	c3                   	ret    

c000f9d3 <KeFormatNumber(char*, double)>:
c000f9d3:	c3                   	ret    

c000f9d4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000f9d4:	55                   	push   ebp
c000f9d5:	57                   	push   edi
c000f9d6:	56                   	push   esi
c000f9d7:	53                   	push   ebx
c000f9d8:	83 ec 4c             	sub    esp,0x4c
c000f9db:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f9df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f9e3:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f9e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f9eb:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000f9f3:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000f9fb:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000fa03:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000fa0b:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000fa10:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000fa14:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000fa18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa1c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fa20:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000fa24:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000fa28:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000fa2d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000fa31:	89 c2                	mov    edx,eax
c000fa33:	c1 fa 1f             	sar    edx,0x1f
c000fa36:	52                   	push   edx
c000fa37:	50                   	push   eax
c000fa38:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000fa3c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000fa40:	e8 5f 32 01 00       	call   c0022ca4 <__udivdi3>
c000fa45:	83 c4 10             	add    esp,0x10
c000fa48:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000fa4c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000fa50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa54:	80 f4 00             	xor    ah,0x0
c000fa57:	89 c7                	mov    edi,eax
c000fa59:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa5d:	80 f4 00             	xor    ah,0x0
c000fa60:	89 c5                	mov    ebp,eax
c000fa62:	89 e8                	mov    eax,ebp
c000fa64:	09 f8                	or     eax,edi
c000fa66:	74 04                	je     c000fa6c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x98>
c000fa68:	eb be                	jmp    c000fa28 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000fa6a:	66 90                	xchg   ax,ax
c000fa6c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000fa70:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fa73:	90                   	nop
c000fa74:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000fa78:	89 c7                	mov    edi,eax
c000fa7a:	89 c5                	mov    ebp,eax
c000fa7c:	c1 fd 1f             	sar    ebp,0x1f
c000fa7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fa87:	55                   	push   ebp
c000fa88:	57                   	push   edi
c000fa89:	52                   	push   edx
c000fa8a:	50                   	push   eax
c000fa8b:	e8 14 33 01 00       	call   c0022da4 <__umoddi3>
c000fa90:	83 c4 10             	add    esp,0x10
c000fa93:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000fa98:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000fa9c:	01 c8                	add    eax,ecx
c000fa9e:	8a 10                	mov    dl,BYTE PTR [eax]
c000faa0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000faa4:	88 10                	mov    BYTE PTR [eax],dl
c000faa6:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000faaa:	89 c2                	mov    edx,eax
c000faac:	c1 fa 1f             	sar    edx,0x1f
c000faaf:	52                   	push   edx
c000fab0:	50                   	push   eax
c000fab1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fab5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fab9:	e8 e6 31 01 00       	call   c0022ca4 <__udivdi3>
c000fabe:	83 c4 10             	add    esp,0x10
c000fac1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fac5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fac9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000facd:	80 f4 00             	xor    ah,0x0
c000fad0:	89 c3                	mov    ebx,eax
c000fad2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fad6:	80 f4 00             	xor    ah,0x0
c000fad9:	89 c6                	mov    esi,eax
c000fadb:	89 f0                	mov    eax,esi
c000fadd:	09 d8                	or     eax,ebx
c000fadf:	74 03                	je     c000fae4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x110>
c000fae1:	eb 91                	jmp    c000fa74 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa0>
c000fae3:	90                   	nop
c000fae4:	90                   	nop
c000fae5:	83 c4 4c             	add    esp,0x4c
c000fae8:	5b                   	pop    ebx
c000fae9:	5e                   	pop    esi
c000faea:	5f                   	pop    edi
c000faeb:	5d                   	pop    ebp
c000faec:	c3                   	ret    
c000faed:	8d 76 00             	lea    esi,[esi+0x0]

c000faf0 <KeBasedSignedIntegerToString(long long, char*, int)>:
c000faf0:	55                   	push   ebp
c000faf1:	57                   	push   edi
c000faf2:	56                   	push   esi
c000faf3:	53                   	push   ebx
c000faf4:	83 ec 4c             	sub    esp,0x4c
c000faf7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fafb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000faff:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000fb03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb07:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000fb0f:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000fb17:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000fb1f:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000fb27:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000fb2c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000fb30:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000fb34:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fb39:	79 1d                	jns    c000fb58 <KeBasedSignedIntegerToString(long long, char*, int)+0x68>
c000fb3b:	f7 5c 24 08          	neg    DWORD PTR [esp+0x8]
c000fb3f:	83 54 24 0c 00       	adc    DWORD PTR [esp+0xc],0x0
c000fb44:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c000fb48:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000fb4c:	8d 50 01             	lea    edx,[eax+0x1]
c000fb4f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000fb53:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000fb56:	66 90                	xchg   ax,ax
c000fb58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fb5c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fb60:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000fb64:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000fb68:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000fb6d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000fb71:	89 c2                	mov    edx,eax
c000fb73:	c1 fa 1f             	sar    edx,0x1f
c000fb76:	52                   	push   edx
c000fb77:	50                   	push   eax
c000fb78:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000fb7c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000fb80:	e8 1f 31 01 00       	call   c0022ca4 <__udivdi3>
c000fb85:	83 c4 10             	add    esp,0x10
c000fb88:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000fb8c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000fb90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fb94:	80 f4 00             	xor    ah,0x0
c000fb97:	89 c7                	mov    edi,eax
c000fb99:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fb9d:	80 f4 00             	xor    ah,0x0
c000fba0:	89 c5                	mov    ebp,eax
c000fba2:	89 e8                	mov    eax,ebp
c000fba4:	09 f8                	or     eax,edi
c000fba6:	74 04                	je     c000fbac <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000fba8:	eb be                	jmp    c000fb68 <KeBasedSignedIntegerToString(long long, char*, int)+0x78>
c000fbaa:	66 90                	xchg   ax,ax
c000fbac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000fbb0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fbb3:	90                   	nop
c000fbb4:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000fbb8:	89 c7                	mov    edi,eax
c000fbba:	89 c5                	mov    ebp,eax
c000fbbc:	c1 fd 1f             	sar    ebp,0x1f
c000fbbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fbc3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fbc7:	55                   	push   ebp
c000fbc8:	57                   	push   edi
c000fbc9:	52                   	push   edx
c000fbca:	50                   	push   eax
c000fbcb:	e8 54 2f 01 00       	call   c0022b24 <__moddi3>
c000fbd0:	83 c4 10             	add    esp,0x10
c000fbd3:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000fbd8:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000fbdc:	01 c8                	add    eax,ecx
c000fbde:	8a 10                	mov    dl,BYTE PTR [eax]
c000fbe0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000fbe4:	88 10                	mov    BYTE PTR [eax],dl
c000fbe6:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000fbea:	89 c2                	mov    edx,eax
c000fbec:	c1 fa 1f             	sar    edx,0x1f
c000fbef:	52                   	push   edx
c000fbf0:	50                   	push   eax
c000fbf1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fbf5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fbf9:	e8 da 2d 01 00       	call   c00229d8 <__divdi3>
c000fbfe:	83 c4 10             	add    esp,0x10
c000fc01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fc05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fc09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fc0d:	80 f4 00             	xor    ah,0x0
c000fc10:	89 c3                	mov    ebx,eax
c000fc12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc16:	80 f4 00             	xor    ah,0x0
c000fc19:	89 c6                	mov    esi,eax
c000fc1b:	89 f0                	mov    eax,esi
c000fc1d:	09 d8                	or     eax,ebx
c000fc1f:	74 03                	je     c000fc24 <KeBasedSignedIntegerToString(long long, char*, int)+0x134>
c000fc21:	eb 91                	jmp    c000fbb4 <KeBasedSignedIntegerToString(long long, char*, int)+0xc4>
c000fc23:	90                   	nop
c000fc24:	90                   	nop
c000fc25:	83 c4 4c             	add    esp,0x4c
c000fc28:	5b                   	pop    ebx
c000fc29:	5e                   	pop    esi
c000fc2a:	5f                   	pop    edi
c000fc2b:	5d                   	pop    ebp
c000fc2c:	c3                   	ret    
c000fc2d:	8d 76 00             	lea    esi,[esi+0x0]

c000fc30 <KeGetDigitsInNumber(long long)>:
c000fc30:	56                   	push   esi
c000fc31:	53                   	push   ebx
c000fc32:	83 ec 24             	sub    esp,0x24
c000fc35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fc39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fc3d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fc41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc45:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000fc4d:	8d 76 00             	lea    esi,[esi+0x0]
c000fc50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fc54:	80 f4 00             	xor    ah,0x0
c000fc57:	89 c3                	mov    ebx,eax
c000fc59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc5d:	80 f4 00             	xor    ah,0x0
c000fc60:	89 c6                	mov    esi,eax
c000fc62:	89 f0                	mov    eax,esi
c000fc64:	09 d8                	or     eax,ebx
c000fc66:	74 28                	je     c000fc90 <KeGetDigitsInNumber(long long)+0x60>
c000fc68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fc6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fc70:	6a 00                	push   0x0
c000fc72:	6a 0a                	push   0xa
c000fc74:	52                   	push   edx
c000fc75:	50                   	push   eax
c000fc76:	e8 5d 2d 01 00       	call   c00229d8 <__divdi3>
c000fc7b:	83 c4 10             	add    esp,0x10
c000fc7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fc82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fc86:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000fc8b:	eb c3                	jmp    c000fc50 <KeGetDigitsInNumber(long long)+0x20>
c000fc8d:	8d 76 00             	lea    esi,[esi+0x0]
c000fc90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fc94:	83 c4 24             	add    esp,0x24
c000fc97:	5b                   	pop    ebx
c000fc98:	5e                   	pop    esi
c000fc99:	c3                   	ret    
c000fc9a:	66 90                	xchg   ax,ax

c000fc9c <KeItoa(unsigned long long, char*)>:
c000fc9c:	83 ec 1c             	sub    esp,0x1c
c000fc9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fca3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fca7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fcaf:	6a 0a                	push   0xa
c000fcb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fcb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fcb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fcbd:	e8 12 fd ff ff       	call   c000f9d4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000fcc2:	83 c4 10             	add    esp,0x10
c000fcc5:	90                   	nop
c000fcc6:	83 c4 1c             	add    esp,0x1c
c000fcc9:	c3                   	ret    
c000fcca:	66 90                	xchg   ax,ax

c000fccc <KeItoa(long long, char*)>:
c000fccc:	83 ec 1c             	sub    esp,0x1c
c000fccf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcd3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fcd7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fcdf:	6a 0a                	push   0xa
c000fce1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fce5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fce9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fced:	e8 fe fd ff ff       	call   c000faf0 <KeBasedSignedIntegerToString(long long, char*, int)>
c000fcf2:	83 c4 10             	add    esp,0x10
c000fcf5:	90                   	nop
c000fcf6:	83 c4 1c             	add    esp,0x1c
c000fcf9:	c3                   	ret    
c000fcfa:	66 90                	xchg   ax,ax

c000fcfc <KeXtoa(unsigned long long, char*)>:
c000fcfc:	83 ec 1c             	sub    esp,0x1c
c000fcff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fd07:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fd0f:	6a 10                	push   0x10
c000fd11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fd15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fd19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fd1d:	e8 b2 fc ff ff       	call   c000f9d4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000fd22:	83 c4 10             	add    esp,0x10
c000fd25:	90                   	nop
c000fd26:	83 c4 1c             	add    esp,0x1c
c000fd29:	c3                   	ret    

c000fd2a <sbrk>:
c000fd2a:	55                   	push   ebp
c000fd2b:	57                   	push   edi
c000fd2c:	56                   	push   esi
c000fd2d:	53                   	push   ebx
c000fd2e:	83 ec 1c             	sub    esp,0x1c
c000fd31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fd35:	85 c0                	test   eax,eax
c000fd37:	74 66                	je     c000fd9f <sbrk+0x75>
c000fd39:	78 6b                	js     c000fda6 <sbrk+0x7c>
c000fd3b:	8b 15 f0 d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d1f0
c000fd41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fd45:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c000fd4b:	05 ff 0f 00 00       	add    eax,0xfff
c000fd50:	0f 49 e8             	cmovns ebp,eax
c000fd53:	c1 fd 0c             	sar    ebp,0xc
c000fd56:	bb 00 00 00 00       	mov    ebx,0x0
c000fd5b:	8b 35 90 32 03 c0    	mov    esi,DWORD PTR ds:0xc0033290
c000fd61:	8b 3d f0 d1 02 c0    	mov    edi,DWORD PTR ds:0xc002d1f0
c000fd67:	e8 b6 07 00 00       	call   c0010522 <Phys::allocatePage()>
c000fd6c:	68 01 04 00 00       	push   0x401
c000fd71:	57                   	push   edi
c000fd72:	50                   	push   eax
c000fd73:	56                   	push   esi
c000fd74:	e8 cf 41 00 00       	call   c0013f48 <VAS::mapPage(unsigned long, unsigned long, int)>
c000fd79:	81 05 f0 d1 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d1f0,0x1000
c000fd83:	83 c3 01             	add    ebx,0x1
c000fd86:	83 c4 10             	add    esp,0x10
c000fd89:	39 dd                	cmp    ebp,ebx
c000fd8b:	75 ce                	jne    c000fd5b <sbrk+0x31>
c000fd8d:	0f 20 d8             	mov    eax,cr3
c000fd90:	0f 22 d8             	mov    cr3,eax
c000fd93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd97:	83 c4 1c             	add    esp,0x1c
c000fd9a:	5b                   	pop    ebx
c000fd9b:	5e                   	pop    esi
c000fd9c:	5f                   	pop    edi
c000fd9d:	5d                   	pop    ebp
c000fd9e:	c3                   	ret    
c000fd9f:	a1 f0 d1 02 c0       	mov    eax,ds:0xc002d1f0
c000fda4:	eb f1                	jmp    c000fd97 <sbrk+0x6d>
c000fda6:	83 ec 08             	sub    esp,0x8
c000fda9:	50                   	push   eax
c000fdaa:	68 e4 9a 02 c0       	push   0xc0029ae4
c000fdaf:	e8 b2 71 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000fdb4:	83 c4 10             	add    esp,0x10
c000fdb7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fdbc:	eb d9                	jmp    c000fd97 <sbrk+0x6d>

c000fdbe <sbrk_thunk>:
c000fdbe:	83 ec 0c             	sub    esp,0xc
c000fdc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdc5:	3d ff bf 00 00       	cmp    eax,0xbfff
c000fdca:	7f 10                	jg     c000fddc <sbrk_thunk+0x1e>
c000fdcc:	83 ec 0c             	sub    esp,0xc
c000fdcf:	50                   	push   eax
c000fdd0:	e8 55 ff ff ff       	call   c000fd2a <sbrk>
c000fdd5:	83 c4 10             	add    esp,0x10
c000fdd8:	83 c4 0c             	add    esp,0xc
c000fddb:	c3                   	ret    
c000fddc:	83 ec 08             	sub    esp,0x8
c000fddf:	50                   	push   eax
c000fde0:	68 14 9b 02 c0       	push   0xc0029b14
c000fde5:	e8 7c 71 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000fdea:	83 c4 10             	add    esp,0x10
c000fded:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fdf2:	eb e4                	jmp    c000fdd8 <sbrk_thunk+0x1a>

c000fdf4 <mmap>:
c000fdf4:	55                   	push   ebp
c000fdf5:	57                   	push   edi
c000fdf6:	56                   	push   esi
c000fdf7:	53                   	push   ebx
c000fdf8:	83 ec 18             	sub    esp,0x18
c000fdfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fdff:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000fe05:	89 fb                	mov    ebx,edi
c000fe07:	c1 eb 0c             	shr    ebx,0xc
c000fe0a:	53                   	push   ebx
c000fe0b:	e8 5f 3a 00 00       	call   c001386f <Virt::allocateKernelVirtualPages(int)>
c000fe10:	89 c5                	mov    ebp,eax
c000fe12:	83 c4 10             	add    esp,0x10
c000fe15:	85 db                	test   ebx,ebx
c000fe17:	7e 2f                	jle    c000fe48 <mmap+0x54>
c000fe19:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000fe1f:	01 c7                	add    edi,eax
c000fe21:	89 c3                	mov    ebx,eax
c000fe23:	8b 35 90 32 03 c0    	mov    esi,DWORD PTR ds:0xc0033290
c000fe29:	e8 f4 06 00 00       	call   c0010522 <Phys::allocatePage()>
c000fe2e:	68 01 04 00 00       	push   0x401
c000fe33:	53                   	push   ebx
c000fe34:	50                   	push   eax
c000fe35:	56                   	push   esi
c000fe36:	e8 0d 41 00 00       	call   c0013f48 <VAS::mapPage(unsigned long, unsigned long, int)>
c000fe3b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000fe41:	83 c4 10             	add    esp,0x10
c000fe44:	39 fb                	cmp    ebx,edi
c000fe46:	75 db                	jne    c000fe23 <mmap+0x2f>
c000fe48:	89 e8                	mov    eax,ebp
c000fe4a:	83 c4 0c             	add    esp,0xc
c000fe4d:	5b                   	pop    ebx
c000fe4e:	5e                   	pop    esi
c000fe4f:	5f                   	pop    edi
c000fe50:	5d                   	pop    ebp
c000fe51:	c3                   	ret    

c000fe52 <munmap>:
c000fe52:	83 ec 18             	sub    esp,0x18
c000fe55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe59:	e8 0f 3d 00 00       	call   c0013b6d <Virt::freeKernelVirtualPages(unsigned long)>
c000fe5e:	b8 00 00 00 00       	mov    eax,0x0
c000fe63:	83 c4 1c             	add    esp,0x1c
c000fe66:	c3                   	ret    

c000fe67 <liballoc_lock()>:
c000fe67:	fa                   	cli    
c000fe68:	83 05 30 33 03 c0 01 	add    DWORD PTR ds:0xc0033330,0x1
c000fe6f:	b8 00 00 00 00       	mov    eax,0x0
c000fe74:	c3                   	ret    

c000fe75 <liballoc_unlock()>:
c000fe75:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c000fe7d:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c000fe84:	75 01                	jne    c000fe87 <liballoc_unlock()+0x12>
c000fe86:	fb                   	sti    
c000fe87:	b8 00 00 00 00       	mov    eax,0x0
c000fe8c:	c3                   	ret    

c000fe8d <liballoc_alloc(int)>:
c000fe8d:	83 ec 10             	sub    esp,0x10
c000fe90:	6a 01                	push   0x1
c000fe92:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fe96:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000fe9c:	e8 af 41 00 00       	call   c0014050 <VAS::allocatePages(int, int)>
c000fea1:	83 c4 1c             	add    esp,0x1c
c000fea4:	c3                   	ret    

c000fea5 <liballoc_free(void*, int)>:
c000fea5:	83 ec 14             	sub    esp,0x14
c000fea8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000feac:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000feb2:	e8 f3 3d 00 00       	call   c0013caa <VAS::freeAllocatedPages(unsigned long)>
c000feb7:	b8 00 00 00 00       	mov    eax,0x0
c000febc:	83 c4 1c             	add    esp,0x1c
c000febf:	c3                   	ret    

c000fec0 <realloc>:
c000fec0:	83 ec 14             	sub    esp,0x14
c000fec3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fec7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fecb:	e8 b5 18 ff ff       	call   c0001785 <dlrealloc>
c000fed0:	83 c4 1c             	add    esp,0x1c
c000fed3:	c3                   	ret    

c000fed4 <malloc>:
c000fed4:	83 ec 18             	sub    esp,0x18
c000fed7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fedb:	e8 68 13 ff ff       	call   c0001248 <dlmalloc>
c000fee0:	83 c4 1c             	add    esp,0x1c
c000fee3:	c3                   	ret    

c000fee4 <free>:
c000fee4:	83 ec 18             	sub    esp,0x18
c000fee7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feeb:	e8 96 0e ff ff       	call   c0000d86 <dlfree>
c000fef0:	83 c4 1c             	add    esp,0x1c
c000fef3:	c3                   	ret    

c000fef4 <rfree>:
c000fef4:	83 ec 18             	sub    esp,0x18
c000fef7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fefb:	e8 86 0e ff ff       	call   c0000d86 <dlfree>
c000ff00:	83 c4 1c             	add    esp,0x1c
c000ff03:	c3                   	ret    

c000ff04 <calloc>:
c000ff04:	56                   	push   esi
c000ff05:	53                   	push   ebx
c000ff06:	83 ec 10             	sub    esp,0x10
c000ff09:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ff0d:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000ff12:	53                   	push   ebx
c000ff13:	e8 bc ff ff ff       	call   c000fed4 <malloc>
c000ff18:	89 c6                	mov    esi,eax
c000ff1a:	83 c4 0c             	add    esp,0xc
c000ff1d:	53                   	push   ebx
c000ff1e:	6a 00                	push   0x0
c000ff20:	50                   	push   eax
c000ff21:	e8 ca 05 ff ff       	call   c00004f0 <memset>
c000ff26:	89 f0                	mov    eax,esi
c000ff28:	83 c4 14             	add    esp,0x14
c000ff2b:	5b                   	pop    ebx
c000ff2c:	5e                   	pop    esi
c000ff2d:	c3                   	ret    
c000ff2e:	66 90                	xchg   ax,ax

c000ff30 <KeMailboxTryPost(Mailbox*, void*)>:
c000ff30:	83 ec 10             	sub    esp,0x10
c000ff33:	fa                   	cli    
c000ff34:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000ff39:	83 c0 01             	add    eax,0x1
c000ff3c:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c000ff41:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ff46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff4d:	85 c0                	test   eax,eax
c000ff4f:	75 23                	jne    c000ff74 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000ff51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff55:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ff59:	89 10                	mov    DWORD PTR [eax],edx
c000ff5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff62:	8d 50 01             	lea    edx,[eax+0x1]
c000ff65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff69:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ff6c:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000ff71:	8d 76 00             	lea    esi,[esi+0x0]
c000ff74:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c000ff7c:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000ff81:	85 c0                	test   eax,eax
c000ff83:	75 03                	jne    c000ff88 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000ff85:	fb                   	sti    
c000ff86:	66 90                	xchg   ax,ax
c000ff88:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ff8c:	83 c4 10             	add    esp,0x10
c000ff8f:	c3                   	ret    

c000ff90 <KeMailboxTryGet(Mailbox*, void**)>:
c000ff90:	83 ec 10             	sub    esp,0x10
c000ff93:	fa                   	cli    
c000ff94:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000ff99:	83 c0 01             	add    eax,0x1
c000ff9c:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c000ffa1:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ffa6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffad:	83 f8 01             	cmp    eax,0x1
c000ffb0:	75 22                	jne    c000ffd4 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000ffb2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffb6:	8b 10                	mov    edx,DWORD PTR [eax]
c000ffb8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ffbc:	89 10                	mov    DWORD PTR [eax],edx
c000ffbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffc2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffc5:	8d 50 ff             	lea    edx,[eax-0x1]
c000ffc8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffcc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ffcf:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000ffd4:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c000ffdc:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000ffe1:	85 c0                	test   eax,eax
c000ffe3:	75 03                	jne    c000ffe8 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000ffe5:	fb                   	sti    
c000ffe6:	66 90                	xchg   ax,ax
c000ffe8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ffec:	83 c4 10             	add    esp,0x10
c000ffef:	c3                   	ret    

c000fff0 <KeMailboxCreate()>:
c000fff0:	83 ec 1c             	sub    esp,0x1c
c000fff3:	83 ec 0c             	sub    esp,0xc
c000fff6:	6a 08                	push   0x8
c000fff8:	e8 d7 fe ff ff       	call   c000fed4 <malloc>
c000fffd:	83 c4 10             	add    esp,0x10
c0010000:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010004:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010008:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001000e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010012:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010019:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001001d:	83 c4 1c             	add    esp,0x1c
c0010020:	c3                   	ret    
c0010021:	8d 76 00             	lea    esi,[esi+0x0]

c0010024 <KeMailboxPost(Mailbox*, void*)>:
c0010024:	83 ec 1c             	sub    esp,0x1c
c0010027:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001002c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010034:	e8 f7 fe ff ff       	call   c000ff30 <KeMailboxTryPost(Mailbox*, void*)>
c0010039:	83 c4 08             	add    esp,0x8
c001003c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0010040:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010044:	83 f0 01             	xor    eax,0x1
c0010047:	0f b6 c0             	movzx  eax,al
c001004a:	85 c0                	test   eax,eax
c001004c:	74 26                	je     c0010074 <KeMailboxPost(Mailbox*, void*)+0x50>
c001004e:	fa                   	cli    
c001004f:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0010054:	83 c0 01             	add    eax,0x1
c0010057:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c001005c:	e8 4f 6e 00 00       	call   c0016eb0 <schedule()>
c0010061:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0010069:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c001006e:	85 c0                	test   eax,eax
c0010070:	75 02                	jne    c0010074 <KeMailboxPost(Mailbox*, void*)+0x50>
c0010072:	fb                   	sti    
c0010073:	90                   	nop
c0010074:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0010079:	85 c0                	test   eax,eax
c001007b:	75 03                	jne    c0010080 <KeMailboxPost(Mailbox*, void*)+0x5c>
c001007d:	eb ad                	jmp    c001002c <KeMailboxPost(Mailbox*, void*)+0x8>
c001007f:	90                   	nop
c0010080:	90                   	nop
c0010081:	83 c4 1c             	add    esp,0x1c
c0010084:	c3                   	ret    
c0010085:	8d 76 00             	lea    esi,[esi+0x0]

c0010088 <KeMailboxGet(Mailbox*, void**)>:
c0010088:	83 ec 1c             	sub    esp,0x1c
c001008b:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0010090:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010094:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010098:	e8 f3 fe ff ff       	call   c000ff90 <KeMailboxTryGet(Mailbox*, void**)>
c001009d:	83 c4 08             	add    esp,0x8
c00100a0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00100a4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00100a8:	83 f0 01             	xor    eax,0x1
c00100ab:	0f b6 c0             	movzx  eax,al
c00100ae:	85 c0                	test   eax,eax
c00100b0:	74 26                	je     c00100d8 <KeMailboxGet(Mailbox*, void**)+0x50>
c00100b2:	fa                   	cli    
c00100b3:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00100b8:	83 c0 01             	add    eax,0x1
c00100bb:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c00100c0:	e8 eb 6d 00 00       	call   c0016eb0 <schedule()>
c00100c5:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c00100cd:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00100d2:	85 c0                	test   eax,eax
c00100d4:	75 02                	jne    c00100d8 <KeMailboxGet(Mailbox*, void**)+0x50>
c00100d6:	fb                   	sti    
c00100d7:	90                   	nop
c00100d8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00100dd:	85 c0                	test   eax,eax
c00100df:	75 03                	jne    c00100e4 <KeMailboxGet(Mailbox*, void**)+0x5c>
c00100e1:	eb ad                	jmp    c0010090 <KeMailboxGet(Mailbox*, void**)+0x8>
c00100e3:	90                   	nop
c00100e4:	90                   	nop
c00100e5:	83 c4 1c             	add    esp,0x1c
c00100e8:	c3                   	ret    
c00100e9:	8d 76 00             	lea    esi,[esi+0x0]

c00100ec <KeMailboxDestroy(Mailbox*)>:
c00100ec:	83 ec 0c             	sub    esp,0xc
c00100ef:	83 ec 0c             	sub    esp,0xc
c00100f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100f6:	e8 e9 fd ff ff       	call   c000fee4 <free>
c00100fb:	83 c4 10             	add    esp,0x10
c00100fe:	90                   	nop
c00100ff:	83 c4 0c             	add    esp,0xc
c0010102:	c3                   	ret    

c0010103 <KeFirstTask()>:
c0010103:	53                   	push   ebx
c0010104:	83 ec 08             	sub    esp,0x8
c0010107:	fb                   	sti    
c0010108:	e8 5c a5 00 00       	call   c001a669 <HalEnableNMI()>
c001010d:	83 ec 0c             	sub    esp,0xc
c0010110:	68 23 9b 02 c0       	push   0xc0029b23
c0010115:	e8 0f d9 ff ff       	call   c000da29 <KeSetBootMessage(char const*)>
c001011a:	c7 04 24 c4 07 00 00 	mov    DWORD PTR [esp],0x7c4
c0010121:	e8 ae fd ff ff       	call   c000fed4 <malloc>
c0010126:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001012d:	89 c3                	mov    ebx,eax
c001012f:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c0010134:	50                   	push   eax
c0010135:	68 3c 9b 02 c0       	push   0xc0029b3c
c001013a:	6a 01                	push   0x1
c001013c:	53                   	push   ebx
c001013d:	e8 7a 68 00 00       	call   c00169bc <Process::Process(bool, char const*, Process*, char**)>
c0010142:	83 c4 20             	add    esp,0x20
c0010145:	68 ff 00 00 00       	push   0xff
c001014a:	6a 00                	push   0x0
c001014c:	68 ff f1 00 c0       	push   0xc000f1ff
c0010151:	53                   	push   ebx
c0010152:	e8 a5 6a 00 00       	call   c0016bfc <Process::createThread(void (*)(void*), void*, int)>
c0010157:	8b 15 58 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033358
c001015d:	6a 7a                	push   0x7a
c001015f:	6a 00                	push   0x0
c0010161:	68 8c 75 01 c0       	push   0xc001758c
c0010166:	52                   	push   edx
c0010167:	e8 90 6a 00 00       	call   c0016bfc <Process::createThread(void (*)(void*), void*, int)>
c001016c:	83 c4 14             	add    esp,0x14
c001016f:	68 c4 9b 02 c0       	push   0xc0029bc4
c0010174:	a3 10 33 03 c0       	mov    ds:0xc0033310,eax
c0010179:	e8 ab d8 ff ff       	call   c000da29 <KeSetBootMessage(char const*)>
c001017e:	c6 05 0d 31 03 c0 01 	mov    BYTE PTR ds:0xc003310d,0x1
c0010185:	e8 df 0b 00 00       	call   c0010d69 <KeInitRand()>
c001018a:	e8 83 78 00 00       	call   c0017a12 <Vm::initialise8086()>
c001018f:	e8 ea 84 ff ff       	call   c000867e <Fs::initVFS()>
c0010194:	c7 04 24 91 97 02 c0 	mov    DWORD PTR [esp],0xc0029791
c001019b:	e8 89 d8 ff ff       	call   c000da29 <KeSetBootMessage(char const*)>
c00101a0:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c00101a5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00101ab:	8b 10                	mov    edx,DWORD PTR [eax]
c00101ad:	6a 00                	push   0x0
c00101af:	6a 00                	push   0x0
c00101b1:	6a 00                	push   0x0
c00101b3:	50                   	push   eax
c00101b4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00101b7:	83 c4 14             	add    esp,0x14
c00101ba:	68 c4 9b 02 c0       	push   0xc0029bc4
c00101bf:	e8 65 d8 ff ff       	call   c000da29 <KeSetBootMessage(char const*)>
c00101c4:	e8 99 7c ff ff       	call   c0007e62 <KeInitialiseSymlinks()>
c00101c9:	e8 a4 eb ff ff       	call   c000ed72 <KeLoadSystemEnv()>
c00101ce:	e8 dd 09 00 00       	call   c0010bb0 <KeSetupPowerManager()>
c00101d3:	c7 04 24 49 9b 02 c0 	mov    DWORD PTR [esp],0xc0029b49
c00101da:	e8 4a d8 ff ff       	call   c000da29 <KeSetBootMessage(char const*)>
c00101df:	8b 0d 08 31 03 c0    	mov    ecx,DWORD PTR ds:0xc0033108
c00101e5:	83 c4 0c             	add    esp,0xc
c00101e8:	6a 00                	push   0x0
c00101ea:	51                   	push   ecx
c00101eb:	68 5a 9b 02 c0       	push   0xc0029b5a
c00101f0:	e8 39 63 00 00       	call   c001652e <KeLoadAndExecuteDriver(char const*, void*, bool)>
c00101f5:	83 c4 10             	add    esp,0x10
c00101f8:	83 ec 0c             	sub    esp,0xc
c00101fb:	6a 02                	push   0x2
c00101fd:	e8 6e 6d 00 00       	call   c0016f70 <blockTask(TaskState)>
c0010202:	83 c4 10             	add    esp,0x10
c0010205:	eb f1                	jmp    c00101f8 <KeFirstTask()+0xf5>

c0010207 <KeEntryPoint>:
c0010207:	57                   	push   edi
c0010208:	bf f9 03 00 00       	mov    edi,0x3f9
c001020d:	56                   	push   esi
c001020e:	31 f6                	xor    esi,esi
c0010210:	53                   	push   ebx
c0010211:	83 ec 20             	sub    esp,0x20
c0010214:	e8 d3 d7 ff ff       	call   c000d9ec <KeInitialiseBootConfigurationFlags()>
c0010219:	89 f0                	mov    eax,esi
c001021b:	89 fa                	mov    edx,edi
c001021d:	ee                   	out    dx,al
c001021e:	bb fb 03 00 00       	mov    ebx,0x3fb
c0010223:	b0 80                	mov    al,0x80
c0010225:	89 da                	mov    edx,ebx
c0010227:	ee                   	out    dx,al
c0010228:	b1 03                	mov    cl,0x3
c001022a:	ba f8 03 00 00       	mov    edx,0x3f8
c001022f:	88 c8                	mov    al,cl
c0010231:	ee                   	out    dx,al
c0010232:	89 f0                	mov    eax,esi
c0010234:	89 fa                	mov    edx,edi
c0010236:	ee                   	out    dx,al
c0010237:	88 c8                	mov    al,cl
c0010239:	89 da                	mov    edx,ebx
c001023b:	ee                   	out    dx,al
c001023c:	b0 c7                	mov    al,0xc7
c001023e:	ba fa 03 00 00       	mov    edx,0x3fa
c0010243:	ee                   	out    dx,al
c0010244:	b0 0b                	mov    al,0xb
c0010246:	ba fc 03 00 00       	mov    edx,0x3fc
c001024b:	ee                   	out    dx,al
c001024c:	83 ec 0c             	sub    esp,0xc
c001024f:	68 76 9b 02 c0       	push   0xc0029b76
c0010254:	e8 0d 6d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010259:	e8 9c d7 ff ff       	call   c000d9fa <KeDisplaySplashScreen()>
c001025e:	a1 24 05 00 00       	mov    eax,ds:0x524
c0010263:	05 ff 0f 00 00       	add    eax,0xfff
c0010268:	25 00 f0 ff ff       	and    eax,0xfffff000
c001026d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010270:	e8 47 04 00 00       	call   c00106bc <Phys::physicalMemorySetup(unsigned int)>
c0010275:	e8 c9 37 00 00       	call   c0013a43 <Virt::virtualMemorySetup()>
c001027a:	e8 cb d6 ff ff       	call   c000d94a <KeInitialiseAtexit()>
c001027f:	58                   	pop    eax
c0010280:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0010284:	53                   	push   ebx
c0010285:	e8 a0 3a 00 00       	call   c0013d2a <VAS::VAS()>
c001028a:	89 1d 90 32 03 c0    	mov    DWORD PTR ds:0xc0033290,ebx
c0010290:	e8 03 65 01 00       	call   c0026798 <_init>
c0010295:	c7 04 24 8d 9b 02 c0 	mov    DWORD PTR [esp],0xc0029b8d
c001029c:	e8 88 d7 ff ff       	call   c000da29 <KeSetBootMessage(char const*)>
c00102a1:	c7 04 24 68 01 00 00 	mov    DWORD PTR [esp],0x168
c00102a8:	e8 27 fc ff ff       	call   c000fed4 <malloc>
c00102ad:	89 04 24             	mov    DWORD PTR [esp],eax
c00102b0:	89 c6                	mov    esi,eax
c00102b2:	e8 f3 e4 ff ff       	call   c000e7aa <Computer::Computer()>
c00102b7:	8b 15 90 32 03 c0    	mov    edx,DWORD PTR ds:0xc0033290
c00102bd:	89 35 08 31 03 c0    	mov    DWORD PTR ds:0xc0033108,esi
c00102c3:	52                   	push   edx
c00102c4:	6a 00                	push   0x0
c00102c6:	6a 00                	push   0x0
c00102c8:	56                   	push   esi
c00102c9:	e8 20 e5 ff ff       	call   c000e7ee <Computer::open(int, int, void*)>
c00102ce:	83 c4 14             	add    esp,0x14
c00102d1:	68 e8 9b 02 c0       	push   0xc0029be8
c00102d6:	e8 4e d7 ff ff       	call   c000da29 <KeSetBootMessage(char const*)>
c00102db:	e8 0f ab 00 00       	call   c001adef <HalInitialiseCoprocessor()>
c00102e0:	c7 04 24 a7 9b 02 c0 	mov    DWORD PTR [esp],0xc0029ba7
c00102e7:	e8 3d d7 ff ff       	call   c000da29 <KeSetBootMessage(char const*)>
c00102ec:	c7 04 24 03 01 01 c0 	mov    DWORD PTR [esp],0xc0010103
c00102f3:	e8 70 6a 00 00       	call   c0016d68 <setupMultitasking(void (*)())>
c00102f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102fb:	e8 e0 3a 00 00       	call   c0013de0 <VAS::~VAS()>
c0010300:	83 c4 30             	add    esp,0x30
c0010303:	5b                   	pop    ebx
c0010304:	5e                   	pop    esi
c0010305:	5f                   	pop    edi
c0010306:	c3                   	ret    
c0010307:	90                   	nop

c0010308 <Mutex::Mutex()>:
c0010308:	83 ec 0c             	sub    esp,0xc
c001030b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001030f:	83 ec 08             	sub    esp,0x8
c0010312:	6a 01                	push   0x1
c0010314:	50                   	push   eax
c0010315:	e8 ee 0c 00 00       	call   c0011008 <Semaphore::Semaphore(int)>
c001031a:	83 c4 10             	add    esp,0x10
c001031d:	90                   	nop
c001031e:	83 c4 0c             	add    esp,0xc
c0010321:	c3                   	ret    

c0010322 <KeIsKernelInPanic()>:
c0010322:	a0 64 31 03 c0       	mov    al,ds:0xc0033164
c0010327:	c3                   	ret    

c0010328 <KePanic(char const*)>:
c0010328:	c6 05 64 31 03 c0 01 	mov    BYTE PTR ds:0xc0033164,0x1
c001032f:	e9 59 ab 00 00       	jmp    c001ae8d <HalPanic(char const*)>

c0010334 <Phys::allocateDMA(unsigned long)>:
c0010334:	55                   	push   ebp
c0010335:	31 ed                	xor    ebp,ebp
c0010337:	57                   	push   edi
c0010338:	56                   	push   esi
c0010339:	31 f6                	xor    esi,esi
c001033b:	53                   	push   ebx
c001033c:	31 db                	xor    ebx,ebx
c001033e:	83 ec 1c             	sub    esp,0x1c
c0010341:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010345:	05 ff 0f 00 00       	add    eax,0xfff
c001034a:	c1 e8 0c             	shr    eax,0xc
c001034d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010351:	31 c0                	xor    eax,eax
c0010353:	eb 1b                	jmp    c0010370 <Phys::allocateDMA(unsigned long)+0x3c>
c0010355:	8d 78 01             	lea    edi,[eax+0x1]
c0010358:	85 c0                	test   eax,eax
c001035a:	0f 44 eb             	cmove  ebp,ebx
c001035d:	0f 44 f3             	cmove  esi,ebx
c0010360:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0010364:	74 37                	je     c001039d <Phys::allocateDMA(unsigned long)+0x69>
c0010366:	89 f8                	mov    eax,edi
c0010368:	83 c3 01             	add    ebx,0x1
c001036b:	83 fb 0f             	cmp    ebx,0xf
c001036e:	7f 13                	jg     c0010383 <Phys::allocateDMA(unsigned long)+0x4f>
c0010370:	80 bb 80 31 03 c0 00 	cmp    BYTE PTR [ebx-0x3ffcce80],0x0
c0010377:	74 dc                	je     c0010355 <Phys::allocateDMA(unsigned long)+0x21>
c0010379:	31 c0                	xor    eax,eax
c001037b:	83 c3 01             	add    ebx,0x1
c001037e:	83 fb 0f             	cmp    ebx,0xf
c0010381:	7e ed                	jle    c0010370 <Phys::allocateDMA(unsigned long)+0x3c>
c0010383:	83 ec 0c             	sub    esp,0xc
c0010386:	68 0c 9c 02 c0       	push   0xc0029c0c
c001038b:	e8 98 ff ff ff       	call   c0010328 <KePanic(char const*)>
c0010390:	83 c4 10             	add    esp,0x10
c0010393:	31 c0                	xor    eax,eax
c0010395:	83 c4 1c             	add    esp,0x1c
c0010398:	5b                   	pop    ebx
c0010399:	5e                   	pop    esi
c001039a:	5f                   	pop    edi
c001039b:	5d                   	pop    ebp
c001039c:	c3                   	ret    
c001039d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00103a1:	89 f2                	mov    edx,esi
c00103a3:	c1 fa 04             	sar    edx,0x4
c00103a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00103aa:	01 f1                	add    ecx,esi
c00103ac:	8d 51 0e             	lea    edx,[ecx+0xe]
c00103af:	83 e9 01             	sub    ecx,0x1
c00103b2:	0f 48 ca             	cmovs  ecx,edx
c00103b5:	c1 f9 04             	sar    ecx,0x4
c00103b8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00103bc:	74 06                	je     c00103c4 <Phys::allocateDMA(unsigned long)+0x90>
c00103be:	89 eb                	mov    ebx,ebp
c00103c0:	31 c0                	xor    eax,eax
c00103c2:	eb b7                	jmp    c001037b <Phys::allocateDMA(unsigned long)+0x47>
c00103c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103c8:	85 d2                	test   edx,edx
c00103ca:	74 17                	je     c00103e3 <Phys::allocateDMA(unsigned long)+0xaf>
c00103cc:	8d 96 80 31 03 c0    	lea    edx,[esi-0x3ffcce80]
c00103d2:	8d 84 06 81 31 03 c0 	lea    eax,[esi+eax*1-0x3ffcce7f]
c00103d9:	c6 02 01             	mov    BYTE PTR [edx],0x1
c00103dc:	83 c2 01             	add    edx,0x1
c00103df:	39 d0                	cmp    eax,edx
c00103e1:	75 f6                	jne    c00103d9 <Phys::allocateDMA(unsigned long)+0xa5>
c00103e3:	8b 15 78 31 03 c0    	mov    edx,DWORD PTR ds:0xc0033178
c00103e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00103ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00103f1:	01 c2                	add    edx,eax
c00103f3:	89 15 78 31 03 c0    	mov    DWORD PTR ds:0xc0033178,edx
c00103f9:	85 c9                	test   ecx,ecx
c00103fb:	74 17                	je     c0010414 <Phys::allocateDMA(unsigned long)+0xe0>
c00103fd:	83 ec 0c             	sub    esp,0xc
c0010400:	68 0c 9c 02 c0       	push   0xc0029c0c
c0010405:	e8 1e ff ff ff       	call   c0010328 <KePanic(char const*)>
c001040a:	83 c4 10             	add    esp,0x10
c001040d:	89 f8                	mov    eax,edi
c001040f:	e9 54 ff ff ff       	jmp    c0010368 <Phys::allocateDMA(unsigned long)+0x34>
c0010414:	c1 e6 0c             	shl    esi,0xc
c0010417:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c001041d:	e9 73 ff ff ff       	jmp    c0010395 <Phys::allocateDMA(unsigned long)+0x61>

c0010422 <Phys::freeDMA(unsigned long, unsigned long)>:
c0010422:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010426:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c001042c:	a1 78 31 03 c0       	mov    eax,ds:0xc0033178
c0010431:	c1 ea 0c             	shr    edx,0xc
c0010434:	29 d0                	sub    eax,edx
c0010436:	a3 78 31 03 c0       	mov    ds:0xc0033178,eax
c001043b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001043f:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0010444:	c1 e8 0c             	shr    eax,0xc
c0010447:	85 d2                	test   edx,edx
c0010449:	74 11                	je     c001045c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c001044b:	05 80 31 03 c0       	add    eax,0xc0033180
c0010450:	01 c2                	add    edx,eax
c0010452:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0010455:	83 c0 01             	add    eax,0x1
c0010458:	39 d0                	cmp    eax,edx
c001045a:	75 f6                	jne    c0010452 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c001045c:	c3                   	ret    

c001045d <Phys::setPageState(unsigned long, bool)>:
c001045d:	57                   	push   edi
c001045e:	56                   	push   esi
c001045f:	8b 35 58 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d258
c0010465:	53                   	push   ebx
c0010466:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c001046b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001046f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010473:	89 ca                	mov    edx,ecx
c0010475:	83 e1 07             	and    ecx,0x7
c0010478:	c1 ea 03             	shr    edx,0x3
c001047b:	0f b6 c0             	movzx  eax,al
c001047e:	d3 c3                	rol    ebx,cl
c0010480:	01 d6                	add    esi,edx
c0010482:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0010485:	d3 e0                	shl    eax,cl
c0010487:	21 fb                	and    ebx,edi
c0010489:	88 1e                	mov    BYTE PTR [esi],bl
c001048b:	8b 1d 58 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d258
c0010491:	01 da                	add    edx,ebx
c0010493:	8a 0a                	mov    cl,BYTE PTR [edx]
c0010495:	09 c8                	or     eax,ecx
c0010497:	88 02                	mov    BYTE PTR [edx],al
c0010499:	5b                   	pop    ebx
c001049a:	5e                   	pop    esi
c001049b:	5f                   	pop    edi
c001049c:	c3                   	ret    

c001049d <Phys::getPageState(unsigned long)>:
c001049d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00104a1:	8b 15 58 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d258
c00104a7:	89 c8                	mov    eax,ecx
c00104a9:	83 e1 07             	and    ecx,0x7
c00104ac:	c1 e8 03             	shr    eax,0x3
c00104af:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c00104b3:	d3 f8                	sar    eax,cl
c00104b5:	83 e0 01             	and    eax,0x1
c00104b8:	c3                   	ret    

c00104b9 <Phys::freePage(unsigned long)>:
c00104b9:	53                   	push   ebx
c00104ba:	83 ec 08             	sub    esp,0x8
c00104bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c1:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c00104c7:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00104cd:	76 41                	jbe    c0010510 <Phys::freePage(unsigned long)+0x57>
c00104cf:	c1 e8 0c             	shr    eax,0xc
c00104d2:	50                   	push   eax
c00104d3:	89 c3                	mov    ebx,eax
c00104d5:	e8 c3 ff ff ff       	call   c001049d <Phys::getPageState(unsigned long)>
c00104da:	5a                   	pop    edx
c00104db:	84 c0                	test   al,al
c00104dd:	74 20                	je     c00104ff <Phys::freePage(unsigned long)+0x46>
c00104df:	a1 78 31 03 c0       	mov    eax,ds:0xc0033178
c00104e4:	83 ec 08             	sub    esp,0x8
c00104e7:	6a 00                	push   0x0
c00104e9:	53                   	push   ebx
c00104ea:	83 e8 01             	sub    eax,0x1
c00104ed:	a3 78 31 03 c0       	mov    ds:0xc0033178,eax
c00104f2:	e8 66 ff ff ff       	call   c001045d <Phys::setPageState(unsigned long, bool)>
c00104f7:	83 c4 10             	add    esp,0x10
c00104fa:	83 c4 08             	add    esp,0x8
c00104fd:	5b                   	pop    ebx
c00104fe:	c3                   	ret    
c00104ff:	c7 44 24 10 1e 9c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029c1e
c0010507:	83 c4 08             	add    esp,0x8
c001050a:	5b                   	pop    ebx
c001050b:	e9 18 fe ff ff       	jmp    c0010328 <KePanic(char const*)>
c0010510:	68 00 10 00 00       	push   0x1000
c0010515:	50                   	push   eax
c0010516:	e8 07 ff ff ff       	call   c0010422 <Phys::freeDMA(unsigned long, unsigned long)>
c001051b:	59                   	pop    ecx
c001051c:	5b                   	pop    ebx
c001051d:	83 c4 08             	add    esp,0x8
c0010520:	5b                   	pop    ebx
c0010521:	c3                   	ret    

c0010522 <Phys::allocatePage()>:
c0010522:	56                   	push   esi
c0010523:	53                   	push   ebx
c0010524:	83 ec 14             	sub    esp,0x14
c0010527:	8b 35 6c 31 03 c0    	mov    esi,DWORD PTR ds:0xc003316c
c001052d:	89 f3                	mov    ebx,esi
c001052f:	eb 18                	jmp    c0010549 <Phys::allocatePage()+0x27>
c0010531:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010537:	75 0c                	jne    c0010545 <Phys::allocatePage()+0x23>
c0010539:	c7 05 6c 31 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003316c,0x0
c0010543:	31 db                	xor    ebx,ebx
c0010545:	39 de                	cmp    esi,ebx
c0010547:	74 5b                	je     c00105a4 <Phys::allocatePage()+0x82>
c0010549:	53                   	push   ebx
c001054a:	e8 4e ff ff ff       	call   c001049d <Phys::getPageState(unsigned long)>
c001054f:	59                   	pop    ecx
c0010550:	84 c0                	test   al,al
c0010552:	74 29                	je     c001057d <Phys::allocatePage()+0x5b>
c0010554:	83 c3 01             	add    ebx,0x1
c0010557:	89 1d 6c 31 03 c0    	mov    DWORD PTR ds:0xc003316c,ebx
c001055d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010563:	76 cc                	jbe    c0010531 <Phys::allocatePage()+0xf>
c0010565:	83 ec 0c             	sub    esp,0xc
c0010568:	68 34 9c 02 c0       	push   0xc0029c34
c001056d:	e8 b6 fd ff ff       	call   c0010328 <KePanic(char const*)>
c0010572:	8b 1d 6c 31 03 c0    	mov    ebx,DWORD PTR ds:0xc003316c
c0010578:	83 c4 10             	add    esp,0x10
c001057b:	eb b4                	jmp    c0010531 <Phys::allocatePage()+0xf>
c001057d:	6a 01                	push   0x1
c001057f:	53                   	push   ebx
c0010580:	e8 d8 fe ff ff       	call   c001045d <Phys::setPageState(unsigned long, bool)>
c0010585:	8b 1d 78 31 03 c0    	mov    ebx,DWORD PTR ds:0xc0033178
c001058b:	5e                   	pop    esi
c001058c:	a1 6c 31 03 c0       	mov    eax,ds:0xc003316c
c0010591:	5a                   	pop    edx
c0010592:	83 c3 01             	add    ebx,0x1
c0010595:	89 1d 78 31 03 c0    	mov    DWORD PTR ds:0xc0033178,ebx
c001059b:	c1 e0 0c             	shl    eax,0xc
c001059e:	83 c4 14             	add    esp,0x14
c00105a1:	5b                   	pop    ebx
c00105a2:	5e                   	pop    esi
c00105a3:	c3                   	ret    
c00105a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00105a9:	83 ec 0c             	sub    esp,0xc
c00105ac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00105af:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c00105b5:	51                   	push   ecx
c00105b6:	e8 85 43 00 00       	call   c0014940 <VAS::scanForEviction()>
c00105bb:	83 c4 10             	add    esp,0x10
c00105be:	85 c0                	test   eax,eax
c00105c0:	75 1b                	jne    c00105dd <Phys::allocatePage()+0xbb>
c00105c2:	83 ec 0c             	sub    esp,0xc
c00105c5:	68 7c 9c 02 c0       	push   0xc0029c7c
c00105ca:	e8 59 fd ff ff       	call   c0010328 <KePanic(char const*)>
c00105cf:	8b 1d 6c 31 03 c0    	mov    ebx,DWORD PTR ds:0xc003316c
c00105d5:	83 c4 10             	add    esp,0x10
c00105d8:	e9 6c ff ff ff       	jmp    c0010549 <Phys::allocatePage()+0x27>
c00105dd:	8b 15 78 31 03 c0    	mov    edx,DWORD PTR ds:0xc0033178
c00105e3:	83 ec 08             	sub    esp,0x8
c00105e6:	6a 01                	push   0x1
c00105e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00105ec:	83 c2 01             	add    edx,0x1
c00105ef:	89 15 78 31 03 c0    	mov    DWORD PTR ds:0xc0033178,edx
c00105f5:	89 c2                	mov    edx,eax
c00105f7:	c1 ea 0c             	shr    edx,0xc
c00105fa:	52                   	push   edx
c00105fb:	e8 5d fe ff ff       	call   c001045d <Phys::setPageState(unsigned long, bool)>
c0010600:	83 c4 10             	add    esp,0x10
c0010603:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010607:	eb 95                	jmp    c001059e <Phys::allocatePage()+0x7c>

c0010609 <Phys::allocateContiguousPages(int)>:
c0010609:	57                   	push   edi
c001060a:	56                   	push   esi
c001060b:	53                   	push   ebx
c001060c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0010610:	fa                   	cli    
c0010611:	8b 15 30 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033330
c0010617:	83 ec 0c             	sub    esp,0xc
c001061a:	31 db                	xor    ebx,ebx
c001061c:	68 ac 9c 02 c0       	push   0xc0029cac
c0010621:	83 c2 01             	add    edx,0x1
c0010624:	89 15 30 33 03 c0    	mov    DWORD PTR ds:0xc0033330,edx
c001062a:	e8 37 69 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001062f:	83 c4 10             	add    esp,0x10
c0010632:	85 db                	test   ebx,ebx
c0010634:	75 11                	jne    c0010647 <Phys::allocateContiguousPages(int)+0x3e>
c0010636:	e8 e7 fe ff ff       	call   c0010522 <Phys::allocatePage()>
c001063b:	83 ff 01             	cmp    edi,0x1
c001063e:	89 c6                	mov    esi,eax
c0010640:	74 21                	je     c0010663 <Phys::allocateContiguousPages(int)+0x5a>
c0010642:	bb 01 00 00 00       	mov    ebx,0x1
c0010647:	e8 d6 fe ff ff       	call   c0010522 <Phys::allocatePage()>
c001064c:	89 da                	mov    edx,ebx
c001064e:	c1 e2 0c             	shl    edx,0xc
c0010651:	01 f2                	add    edx,esi
c0010653:	39 c2                	cmp    edx,eax
c0010655:	74 24                	je     c001067b <Phys::allocateContiguousPages(int)+0x72>
c0010657:	83 ff 01             	cmp    edi,0x1
c001065a:	bb 01 00 00 00       	mov    ebx,0x1
c001065f:	89 c6                	mov    esi,eax
c0010661:	75 e4                	jne    c0010647 <Phys::allocateContiguousPages(int)+0x3e>
c0010663:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c001066b:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0010670:	85 c0                	test   eax,eax
c0010672:	75 01                	jne    c0010675 <Phys::allocateContiguousPages(int)+0x6c>
c0010674:	fb                   	sti    
c0010675:	5b                   	pop    ebx
c0010676:	89 f0                	mov    eax,esi
c0010678:	5e                   	pop    esi
c0010679:	5f                   	pop    edi
c001067a:	c3                   	ret    
c001067b:	83 c3 01             	add    ebx,0x1
c001067e:	39 fb                	cmp    ebx,edi
c0010680:	75 b0                	jne    c0010632 <Phys::allocateContiguousPages(int)+0x29>
c0010682:	eb df                	jmp    c0010663 <Phys::allocateContiguousPages(int)+0x5a>

c0010684 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010684:	56                   	push   esi
c0010685:	53                   	push   ebx
c0010686:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001068a:	39 1d 70 31 03 c0    	cmp    DWORD PTR ds:0xc0033170,ebx
c0010690:	73 06                	jae    c0010698 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010692:	89 1d 70 31 03 c0    	mov    DWORD PTR ds:0xc0033170,ebx
c0010698:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001069c:	c1 eb 0c             	shr    ebx,0xc
c001069f:	c1 e8 0c             	shr    eax,0xc
c00106a2:	39 d8                	cmp    eax,ebx
c00106a4:	73 13                	jae    c00106b9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c00106a6:	6a 00                	push   0x0
c00106a8:	50                   	push   eax
c00106a9:	8d 70 01             	lea    esi,[eax+0x1]
c00106ac:	e8 ac fd ff ff       	call   c001045d <Phys::setPageState(unsigned long, bool)>
c00106b1:	39 f3                	cmp    ebx,esi
c00106b3:	89 f0                	mov    eax,esi
c00106b5:	5a                   	pop    edx
c00106b6:	59                   	pop    ecx
c00106b7:	75 ed                	jne    c00106a6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00106b9:	5b                   	pop    ebx
c00106ba:	5e                   	pop    esi
c00106bb:	c3                   	ret    

c00106bc <Phys::physicalMemorySetup(unsigned int)>:
c00106bc:	55                   	push   ebp
c00106bd:	57                   	push   edi
c00106be:	56                   	push   esi
c00106bf:	53                   	push   ebx
c00106c0:	83 ec 40             	sub    esp,0x40
c00106c3:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00106c7:	6a 10                	push   0x10
c00106c9:	6a 00                	push   0x0
c00106cb:	68 80 31 03 c0       	push   0xc0033180
c00106d0:	e8 1b fe fe ff       	call   c00004f0 <memset>
c00106d5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00106db:	8d 83 00 10 00 00    	lea    eax,[ebx+0x1000]
c00106e1:	31 db                	xor    ebx,ebx
c00106e3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00106e7:	5a                   	pop    edx
c00106e8:	59                   	pop    ecx
c00106e9:	50                   	push   eax
c00106ea:	68 39 9c 02 c0       	push   0xc0029c39
c00106ef:	e8 72 68 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00106f4:	83 c4 10             	add    esp,0x10
c00106f7:	83 ec 08             	sub    esp,0x8
c00106fa:	6a 01                	push   0x1
c00106fc:	53                   	push   ebx
c00106fd:	83 c3 01             	add    ebx,0x1
c0010700:	e8 58 fd ff ff       	call   c001045d <Phys::setPageState(unsigned long, bool)>
c0010705:	83 c4 10             	add    esp,0x10
c0010708:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c001070e:	75 e7                	jne    c00106f7 <Phys::physicalMemorySetup(unsigned int)+0x3b>
c0010710:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0010717:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c001071e:	c1 e0 08             	shl    eax,0x8
c0010721:	09 c2                	or     edx,eax
c0010723:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0010727:	0f 84 ab 01 00 00    	je     c00108d8 <Phys::physicalMemorySetup(unsigned int)+0x21c>
c001072d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010735:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c001073a:	e9 82 00 00 00       	jmp    c00107c1 <Phys::physicalMemorySetup(unsigned int)+0x105>
c001073f:	ba 00 00 08 00       	mov    edx,0x80000
c0010744:	89 c1                	mov    ecx,eax
c0010746:	39 f2                	cmp    edx,esi
c0010748:	19 f9                	sbb    ecx,edi
c001074a:	0f 82 c4 00 00 00    	jb     c0010814 <Phys::physicalMemorySetup(unsigned int)+0x158>
c0010750:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010754:	89 c5                	mov    ebp,eax
c0010756:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001075a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001075e:	19 cd                	sbb    ebp,ecx
c0010760:	0f 83 b3 00 00 00    	jae    c0010819 <Phys::physicalMemorySetup(unsigned int)+0x15d>
c0010766:	89 d6                	mov    esi,edx
c0010768:	ba 00 00 0a 00       	mov    edx,0xa0000
c001076d:	39 f2                	cmp    edx,esi
c001076f:	89 cf                	mov    edi,ecx
c0010771:	19 c8                	sbb    eax,ecx
c0010773:	73 07                	jae    c001077c <Phys::physicalMemorySetup(unsigned int)+0xc0>
c0010775:	be 00 00 0a 00       	mov    esi,0xa0000
c001077a:	31 ff                	xor    edi,edi
c001077c:	89 f2                	mov    edx,esi
c001077e:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0010783:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c0010789:	89 f9                	mov    ecx,edi
c001078b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001078f:	83 d1 ff             	adc    ecx,0xffffffff
c0010792:	39 d0                	cmp    eax,edx
c0010794:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0010798:	b8 00 00 00 00       	mov    eax,0x0
c001079d:	19 c8                	sbb    eax,ecx
c001079f:	0f 82 c8 00 00 00    	jb     c001086d <Phys::physicalMemorySetup(unsigned int)+0x1b1>
c00107a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00107a9:	83 c3 18             	add    ebx,0x18
c00107ac:	83 c0 01             	add    eax,0x1
c00107af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00107b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00107b7:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00107bb:	0f 84 0f 01 00 00    	je     c00108d0 <Phys::physicalMemorySetup(unsigned int)+0x214>
c00107c1:	8b 33                	mov    esi,DWORD PTR [ebx]
c00107c3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00107c6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00107c9:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00107cc:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00107d0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00107d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00107d7:	01 f0                	add    eax,esi
c00107d9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00107dd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00107e1:	55                   	push   ebp
c00107e2:	11 fa                	adc    edx,edi
c00107e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00107e8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00107ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00107f0:	50                   	push   eax
c00107f1:	56                   	push   esi
c00107f2:	68 0c 9d 02 c0       	push   0xc0029d0c
c00107f7:	e8 6a 67 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00107fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010800:	83 c4 10             	add    esp,0x10
c0010803:	09 f8                	or     eax,edi
c0010805:	0f 85 c5 00 00 00    	jne    c00108d0 <Phys::physicalMemorySetup(unsigned int)+0x214>
c001080b:	83 fd 01             	cmp    ebp,0x1
c001080e:	0f 84 2b ff ff ff    	je     c001073f <Phys::physicalMemorySetup(unsigned int)+0x83>
c0010814:	83 fd 01             	cmp    ebp,0x1
c0010817:	75 8c                	jne    c00107a5 <Phys::physicalMemorySetup(unsigned int)+0xe9>
c0010819:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001081d:	31 d2                	xor    edx,edx
c001081f:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0010823:	89 c8                	mov    eax,ecx
c0010825:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010829:	19 d1                	sbb    ecx,edx
c001082b:	0f 82 74 ff ff ff    	jb     c00107a5 <Phys::physicalMemorySetup(unsigned int)+0xe9>
c0010831:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c0010836:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c001083a:	b9 00 00 00 00       	mov    ecx,0x0
c001083f:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c0010843:	0f 83 5c ff ff ff    	jae    c00107a5 <Phys::physicalMemorySetup(unsigned int)+0xe9>
c0010849:	39 c6                	cmp    esi,eax
c001084b:	19 d7                	sbb    edi,edx
c001084d:	73 2a                	jae    c0010879 <Phys::physicalMemorySetup(unsigned int)+0x1bd>
c001084f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010853:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010857:	29 c7                	sub    edi,eax
c0010859:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001085d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010861:	19 d5                	sbb    ebp,edx
c0010863:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010867:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001086b:	eb 0c                	jmp    c0010879 <Phys::physicalMemorySetup(unsigned int)+0x1bd>
c001086d:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010871:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c0010879:	83 ec 04             	sub    esp,0x4
c001087c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0010880:	56                   	push   esi
c0010881:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010885:	57                   	push   edi
c0010886:	68 30 9d 02 c0       	push   0xc0029d30
c001088b:	e8 d6 66 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010890:	5a                   	pop    edx
c0010891:	59                   	pop    ecx
c0010892:	56                   	push   esi
c0010893:	57                   	push   edi
c0010894:	e8 eb fd ff ff       	call   c0010684 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010899:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001089d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00108a1:	83 c4 0c             	add    esp,0xc
c00108a4:	8b 3d 7c 31 03 c0    	mov    edi,DWORD PTR ds:0xc003317c
c00108aa:	0f ac d0 0c          	shrd   eax,edx,0xc
c00108ae:	01 f8                	add    eax,edi
c00108b0:	a3 7c 31 03 c0       	mov    ds:0xc003317c,eax
c00108b5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00108bc:	52                   	push   edx
c00108bd:	50                   	push   eax
c00108be:	68 5f 9c 02 c0       	push   0xc0029c5f
c00108c3:	e8 9e 66 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00108c8:	83 c4 10             	add    esp,0x10
c00108cb:	e9 d5 fe ff ff       	jmp    c00107a5 <Phys::physicalMemorySetup(unsigned int)+0xe9>
c00108d0:	83 c4 3c             	add    esp,0x3c
c00108d3:	5b                   	pop    ebx
c00108d4:	5e                   	pop    esi
c00108d5:	5f                   	pop    edi
c00108d6:	5d                   	pop    ebp
c00108d7:	c3                   	ret    
c00108d8:	c7 44 24 50 51 9c 02 c0 	mov    DWORD PTR [esp+0x50],0xc0029c51
c00108e0:	83 c4 3c             	add    esp,0x3c
c00108e3:	5b                   	pop    ebx
c00108e4:	5e                   	pop    esi
c00108e5:	5f                   	pop    edi
c00108e6:	5d                   	pop    ebp
c00108e7:	e9 3c fa ff ff       	jmp    c0010328 <KePanic(char const*)>

c00108ec <Pipe::isAtty()>:
c00108ec:	31 c0                	xor    eax,eax
c00108ee:	c3                   	ret    
c00108ef:	90                   	nop

c00108f0 <Pipe::~Pipe()>:
c00108f0:	83 ec 0c             	sub    esp,0xc
c00108f3:	ba 9c 9d 02 c0       	mov    edx,0xc0029d9c
c00108f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fc:	89 10                	mov    DWORD PTR [eax],edx
c00108fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010902:	83 ec 0c             	sub    esp,0xc
c0010905:	50                   	push   eax
c0010906:	e8 f7 2c 00 00       	call   c0013602 <UnixFile::~UnixFile()>
c001090b:	83 c4 10             	add    esp,0x10
c001090e:	90                   	nop
c001090f:	83 c4 0c             	add    esp,0xc
c0010912:	c3                   	ret    
c0010913:	90                   	nop

c0010914 <Pipe::~Pipe()>:
c0010914:	83 ec 0c             	sub    esp,0xc
c0010917:	83 ec 0c             	sub    esp,0xc
c001091a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001091e:	e8 cd ff ff ff       	call   c00108f0 <Pipe::~Pipe()>
c0010923:	83 c4 10             	add    esp,0x10
c0010926:	83 ec 08             	sub    esp,0x8
c0010929:	6a 20                	push   0x20
c001092b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001092f:	e8 a0 d1 ff ff       	call   c000dad4 <operator delete(void*, unsigned long)>
c0010934:	83 c4 10             	add    esp,0x10
c0010937:	83 c4 0c             	add    esp,0xc
c001093a:	c3                   	ret    
c001093b:	90                   	nop

c001093c <Pipe::write(unsigned long long, void*, int*)>:
c001093c:	55                   	push   ebp
c001093d:	57                   	push   edi
c001093e:	56                   	push   esi
c001093f:	53                   	push   ebx
c0010940:	83 ec 1c             	sub    esp,0x1c
c0010943:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010947:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001094b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001094f:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0010952:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010956:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010959:	89 04 24             	mov    DWORD PTR [esp],eax
c001095c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010960:	89 d8                	mov    eax,ebx
c0010962:	89 d6                	mov    esi,edx
c0010964:	89 d7                	mov    edi,edx
c0010966:	c1 ff 1f             	sar    edi,0x1f
c0010969:	03 34 24             	add    esi,DWORD PTR [esp]
c001096c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0010970:	c1 f8 1f             	sar    eax,0x1f
c0010973:	39 f3                	cmp    ebx,esi
c0010975:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010979:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001097d:	19 f8                	sbb    eax,edi
c001097f:	b8 01 00 00 00       	mov    eax,0x1
c0010984:	72 72                	jb     c00109f8 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c0010986:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010989:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001098d:	01 d0                	add    eax,edx
c001098f:	99                   	cdq    
c0010990:	f7 fb                	idiv   ebx
c0010992:	89 d8                	mov    eax,ebx
c0010994:	29 d0                	sub    eax,edx
c0010996:	89 d6                	mov    esi,edx
c0010998:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001099b:	89 c3                	mov    ebx,eax
c001099d:	c1 fb 1f             	sar    ebx,0x1f
c00109a0:	39 c2                	cmp    edx,eax
c00109a2:	19 df                	sbb    edi,ebx
c00109a4:	bb 00 00 00 00       	mov    ebx,0x0
c00109a9:	72 04                	jb     c00109af <Pipe::write(unsigned long long, void*, int*)+0x73>
c00109ab:	89 d3                	mov    ebx,edx
c00109ad:	29 c3                	sub    ebx,eax
c00109af:	89 d0                	mov    eax,edx
c00109b1:	29 d8                	sub    eax,ebx
c00109b3:	74 0d                	je     c00109c2 <Pipe::write(unsigned long long, void*, int*)+0x86>
c00109b5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00109b8:	89 c1                	mov    ecx,eax
c00109ba:	01 f7                	add    edi,esi
c00109bc:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00109c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00109c2:	85 db                	test   ebx,ebx
c00109c4:	74 0d                	je     c00109d3 <Pipe::write(unsigned long long, void*, int*)+0x97>
c00109c6:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00109ca:	89 d9                	mov    ecx,ebx
c00109cc:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00109cf:	89 c6                	mov    esi,eax
c00109d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00109d3:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00109d6:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00109db:	75 10                	jne    c00109ed <Pipe::write(unsigned long long, void*, int*)+0xb1>
c00109dd:	83 ec 0c             	sub    esp,0xc
c00109e0:	68 59 9d 02 c0       	push   0xc0029d59
c00109e5:	e8 3e f9 ff ff       	call   c0010328 <KePanic(char const*)>
c00109ea:	83 c4 10             	add    esp,0x10
c00109ed:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00109f1:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00109f4:	89 08                	mov    DWORD PTR [eax],ecx
c00109f6:	31 c0                	xor    eax,eax
c00109f8:	83 c4 1c             	add    esp,0x1c
c00109fb:	5b                   	pop    ebx
c00109fc:	5e                   	pop    esi
c00109fd:	5f                   	pop    edi
c00109fe:	5d                   	pop    ebp
c00109ff:	c3                   	ret    

c0010a00 <Pipe::read(unsigned long long, void*, int*)>:
c0010a00:	55                   	push   ebp
c0010a01:	57                   	push   edi
c0010a02:	56                   	push   esi
c0010a03:	53                   	push   ebx
c0010a04:	83 ec 1c             	sub    esp,0x1c
c0010a07:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010a0b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010a0f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010a13:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010a16:	89 c8                	mov    eax,ecx
c0010a18:	99                   	cdq    
c0010a19:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010a1d:	74 27                	je     c0010a46 <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010a1f:	39 f9                	cmp    ecx,edi
c0010a21:	89 d1                	mov    ecx,edx
c0010a23:	19 f1                	sbb    ecx,esi
c0010a25:	73 1f                	jae    c0010a46 <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010a27:	fa                   	cli    
c0010a28:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c0010a2e:	e8 7d 64 00 00       	call   c0016eb0 <schedule()>
c0010a33:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c0010a3a:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c0010a41:	75 d0                	jne    c0010a13 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010a43:	fb                   	sti    
c0010a44:	eb cd                	jmp    c0010a13 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010a46:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010a4a:	39 f8                	cmp    eax,edi
c0010a4c:	89 d1                	mov    ecx,edx
c0010a4e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010a52:	19 f1                	sbb    ecx,esi
c0010a54:	73 08                	jae    c0010a5e <Pipe::read(unsigned long long, void*, int*)+0x5e>
c0010a56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010a5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010a5e:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0010a61:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0010a64:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0010a68:	29 f7                	sub    edi,esi
c0010a6a:	89 f8                	mov    eax,edi
c0010a6c:	99                   	cdq    
c0010a6d:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0010a71:	89 d0                	mov    eax,edx
c0010a73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010a77:	19 c2                	sbb    edx,eax
c0010a79:	89 f8                	mov    eax,edi
c0010a7b:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c0010a80:	89 ea                	mov    edx,ebp
c0010a82:	29 c2                	sub    edx,eax
c0010a84:	85 c0                	test   eax,eax
c0010a86:	74 0b                	je     c0010a93 <Pipe::read(unsigned long long, void*, int*)+0x93>
c0010a88:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010a8b:	89 c1                	mov    ecx,eax
c0010a8d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0010a91:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010a93:	85 d2                	test   edx,edx
c0010a95:	74 0d                	je     c0010aa4 <Pipe::read(unsigned long long, void*, int*)+0xa4>
c0010a97:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010a9b:	89 d1                	mov    ecx,edx
c0010a9d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010aa0:	89 c7                	mov    edi,eax
c0010aa2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010aa4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010aa7:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010aaa:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0010aad:	99                   	cdq    
c0010aae:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010ab2:	89 f7                	mov    edi,esi
c0010ab4:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010ab8:	c1 ff 1f             	sar    edi,0x1f
c0010abb:	57                   	push   edi
c0010abc:	56                   	push   esi
c0010abd:	52                   	push   edx
c0010abe:	50                   	push   eax
c0010abf:	e8 e0 22 01 00       	call   c0022da4 <__umoddi3>
c0010ac4:	83 c4 10             	add    esp,0x10
c0010ac7:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010acc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010acf:	75 10                	jne    c0010ae1 <Pipe::read(unsigned long long, void*, int*)+0xe1>
c0010ad1:	83 ec 0c             	sub    esp,0xc
c0010ad4:	68 76 9d 02 c0       	push   0xc0029d76
c0010ad9:	e8 4a f8 ff ff       	call   c0010328 <KePanic(char const*)>
c0010ade:	83 c4 10             	add    esp,0x10
c0010ae1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010ae5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ae9:	89 10                	mov    DWORD PTR [eax],edx
c0010aeb:	83 c4 1c             	add    esp,0x1c
c0010aee:	31 c0                	xor    eax,eax
c0010af0:	5b                   	pop    ebx
c0010af1:	5e                   	pop    esi
c0010af2:	5f                   	pop    edi
c0010af3:	5d                   	pop    ebp
c0010af4:	c3                   	ret    
c0010af5:	90                   	nop

c0010af6 <Pipe::Pipe(int)>:
c0010af6:	83 ec 0c             	sub    esp,0xc
c0010af9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010afd:	83 ec 08             	sub    esp,0x8
c0010b00:	6a 00                	push   0x0
c0010b02:	50                   	push   eax
c0010b03:	e8 14 29 00 00       	call   c001341c <UnixFile::UnixFile(int)>
c0010b08:	83 c4 10             	add    esp,0x10
c0010b0b:	ba 9c 9d 02 c0       	mov    edx,0xc0029d9c
c0010b10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b14:	89 10                	mov    DWORD PTR [eax],edx
c0010b16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b1a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010b1e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010b21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b25:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b30:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010b37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b3b:	83 ec 0c             	sub    esp,0xc
c0010b3e:	50                   	push   eax
c0010b3f:	e8 90 f3 ff ff       	call   c000fed4 <malloc>
c0010b44:	83 c4 10             	add    esp,0x10
c0010b47:	89 c2                	mov    edx,eax
c0010b49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b4d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b54:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010b58:	90                   	nop
c0010b59:	83 c4 0c             	add    esp,0xc
c0010b5c:	c3                   	ret    

c0010b5d <KePowerThread(void*)>:
c0010b5d:	83 ec 0c             	sub    esp,0xc
c0010b60:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c0010b67:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c0010b6e:	75 01                	jne    c0010b71 <KePowerThread(void*)+0x14>
c0010b70:	fb                   	sti    
c0010b71:	50                   	push   eax
c0010b72:	50                   	push   eax
c0010b73:	6a 00                	push   0x0
c0010b75:	6a 0a                	push   0xa
c0010b77:	c6 05 ac 31 03 c0 00 	mov    BYTE PTR ds:0xc00331ac,0x0
c0010b7e:	e8 39 65 00 00       	call   c00170bc <sleep(unsigned long long)>
c0010b83:	83 c4 10             	add    esp,0x10
c0010b86:	83 05 e4 31 03 c0 0a 	add    DWORD PTR ds:0xc00331e4,0xa
c0010b8d:	eb e2                	jmp    c0010b71 <KePowerThread(void*)+0x14>

c0010b8f <KeChangePowerSettings(PowerSettings)>:
c0010b8f:	57                   	push   edi
c0010b90:	b9 09 00 00 00       	mov    ecx,0x9
c0010b95:	56                   	push   esi
c0010b96:	bf c0 31 03 c0       	mov    edi,0xc00331c0
c0010b9b:	fc                   	cld    
c0010b9c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010ba0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010ba2:	5e                   	pop    esi
c0010ba3:	5f                   	pop    edi
c0010ba4:	c3                   	ret    

c0010ba5 <KeUserIOReceived()>:
c0010ba5:	c7 05 e4 31 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00331e4,0x0
c0010baf:	c3                   	ret    

c0010bb0 <KeSetupPowerManager()>:
c0010bb0:	83 ec 0c             	sub    esp,0xc
c0010bb3:	68 f0 00 00 00       	push   0xf0
c0010bb8:	6a 00                	push   0x0
c0010bba:	68 5d 0b 01 c0       	push   0xc0010b5d
c0010bbf:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c0010bc5:	c7 05 e4 31 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00331e4,0x0
c0010bcf:	c6 05 ac 31 03 c0 00 	mov    BYTE PTR ds:0xc00331ac,0x0
c0010bd6:	e8 21 60 00 00       	call   c0016bfc <Process::createThread(void (*)(void*), void*, int)>
c0010bdb:	c7 05 c0 31 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc00331c0,0x2
c0010be5:	c7 05 c4 31 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00331c4,0x1
c0010bef:	c7 05 c8 31 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc00331c8,0x3
c0010bf9:	c7 05 cc 31 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00331cc,0x0
c0010c03:	c7 05 d8 31 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00331d8,0x0
c0010c0d:	c7 05 d0 31 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00331d0,0x0
c0010c17:	c7 05 dc 31 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00331dc,0x0
c0010c21:	c7 05 d4 31 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00331d4,0x3c
c0010c2b:	c7 05 e0 31 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00331e0,0x3c
c0010c35:	83 c4 1c             	add    esp,0x1c
c0010c38:	c3                   	ret    

c0010c39 <KePrepareShutdown()>:
c0010c39:	83 ec 0c             	sub    esp,0xc
c0010c3c:	e8 5f cd ff ff       	call   c000d9a0 <KeExecuteAtexit()>
c0010c41:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c0010c46:	83 ec 0c             	sub    esp,0xc
c0010c49:	ff b0 64 01 00 00    	push   DWORD PTR [eax+0x164]
c0010c4f:	e8 56 98 ff ff       	call   c000a4aa <Device::closeAll()>
c0010c54:	83 c4 1c             	add    esp,0x1c
c0010c57:	c3                   	ret    

c0010c58 <KeRegisterShutdownHandler(void (*)())>:
c0010c58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c5c:	a3 a8 31 03 c0       	mov    ds:0xc00331a8,eax
c0010c61:	c3                   	ret    

c0010c62 <KeRegisterRestartHandler(void (*)())>:
c0010c62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c66:	a3 a4 31 03 c0       	mov    ds:0xc00331a4,eax
c0010c6b:	c3                   	ret    

c0010c6c <KeRegisterSleepHandler(void (*)())>:
c0010c6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c70:	a3 a0 31 03 c0       	mov    ds:0xc00331a0,eax
c0010c75:	c3                   	ret    

c0010c76 <KeShutdown()>:
c0010c76:	83 ec 0c             	sub    esp,0xc
c0010c79:	e8 bb ff ff ff       	call   c0010c39 <KePrepareShutdown()>
c0010c7e:	a1 a8 31 03 c0       	mov    eax,ds:0xc00331a8
c0010c83:	85 c0                	test   eax,eax
c0010c85:	74 04                	je     c0010c8b <KeShutdown()+0x15>
c0010c87:	ff d0                	call   eax
c0010c89:	eb 10                	jmp    c0010c9b <KeShutdown()+0x25>
c0010c8b:	83 ec 0c             	sub    esp,0xc
c0010c8e:	68 b0 9d 02 c0       	push   0xc0029db0
c0010c93:	e8 90 f6 ff ff       	call   c0010328 <KePanic(char const*)>
c0010c98:	83 c4 10             	add    esp,0x10
c0010c9b:	83 ec 0c             	sub    esp,0xc
c0010c9e:	68 d1 9d 02 c0       	push   0xc0029dd1
c0010ca3:	e8 80 f6 ff ff       	call   c0010328 <KePanic(char const*)>
c0010ca8:	83 c4 1c             	add    esp,0x1c
c0010cab:	c3                   	ret    

c0010cac <KeSleep()>:
c0010cac:	a1 a0 31 03 c0       	mov    eax,ds:0xc00331a0
c0010cb1:	85 c0                	test   eax,eax
c0010cb3:	74 02                	je     c0010cb7 <KeSleep()+0xb>
c0010cb5:	ff e0                	jmp    eax
c0010cb7:	c3                   	ret    

c0010cb8 <KeHandlePowerButton()>:
c0010cb8:	a1 c0 31 03 c0       	mov    eax,ds:0xc00331c0
c0010cbd:	83 f8 02             	cmp    eax,0x2
c0010cc0:	75 02                	jne    c0010cc4 <KeHandlePowerButton()+0xc>
c0010cc2:	eb b2                	jmp    c0010c76 <KeShutdown()>
c0010cc4:	48                   	dec    eax
c0010cc5:	75 02                	jne    c0010cc9 <KeHandlePowerButton()+0x11>
c0010cc7:	eb e3                	jmp    c0010cac <KeSleep()>
c0010cc9:	c3                   	ret    

c0010cca <KeHandleSleepButton()>:
c0010cca:	a1 c4 31 03 c0       	mov    eax,ds:0xc00331c4
c0010ccf:	83 f8 02             	cmp    eax,0x2
c0010cd2:	75 02                	jne    c0010cd6 <KeHandleSleepButton()+0xc>
c0010cd4:	eb a0                	jmp    c0010c76 <KeShutdown()>
c0010cd6:	48                   	dec    eax
c0010cd7:	75 02                	jne    c0010cdb <KeHandleSleepButton()+0x11>
c0010cd9:	eb d1                	jmp    c0010cac <KeSleep()>
c0010cdb:	c3                   	ret    

c0010cdc <KeRestart()>:
c0010cdc:	83 ec 0c             	sub    esp,0xc
c0010cdf:	e8 55 ff ff ff       	call   c0010c39 <KePrepareShutdown()>
c0010ce4:	a1 a4 31 03 c0       	mov    eax,ds:0xc00331a4
c0010ce9:	85 c0                	test   eax,eax
c0010ceb:	74 02                	je     c0010cef <KeRestart()+0x13>
c0010ced:	ff d0                	call   eax
c0010cef:	83 ec 0c             	sub    esp,0xc
c0010cf2:	68 f5 9d 02 c0       	push   0xc0029df5
c0010cf7:	e8 2c f6 ff ff       	call   c0010328 <KePanic(char const*)>
c0010cfc:	83 c4 1c             	add    esp,0x1c
c0010cff:	c3                   	ret    

c0010d00 <KeRand()>:
c0010d00:	69 05 e8 31 03 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc00331e8,0x2875
c0010d0a:	69 0d ec 31 03 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc00331ec,0xa2e7b175
c0010d14:	53                   	push   ebx
c0010d15:	01 c1                	add    ecx,eax
c0010d17:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010d1c:	f7 25 e8 31 03 c0    	mul    DWORD PTR ds:0xc00331e8
c0010d22:	01 ca                	add    edx,ecx
c0010d24:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010d29:	a3 e8 31 03 c0       	mov    ds:0xc00331e8,eax
c0010d2e:	83 d2 00             	adc    edx,0x0
c0010d31:	0f b7 da             	movzx  ebx,dx
c0010d34:	89 1d ec 31 03 c0    	mov    DWORD PTR ds:0xc00331ec,ebx
c0010d3a:	0f ac d8 0e          	shrd   eax,ebx,0xe
c0010d3e:	5b                   	pop    ebx
c0010d3f:	c3                   	ret    

c0010d40 <KeSeedRand(unsigned int)>:
c0010d40:	53                   	push   ebx
c0010d41:	83 ec 08             	sub    esp,0x8
c0010d44:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d48:	e8 86 a4 00 00       	call   c001b1d3 <HalGetRand()>
c0010d4d:	c7 05 ec 31 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00331ec,0x0
c0010d57:	31 d8                	xor    eax,ebx
c0010d59:	a3 e8 31 03 c0       	mov    ds:0xc00331e8,eax
c0010d5e:	e8 9d ff ff ff       	call   c0010d00 <KeRand()>
c0010d63:	83 c4 08             	add    esp,0x8
c0010d66:	5b                   	pop    ebx
c0010d67:	eb 97                	jmp    c0010d00 <KeRand()>

c0010d69 <KeInitRand()>:
c0010d69:	83 ec 0c             	sub    esp,0xc
c0010d6c:	e8 30 a2 00 00       	call   c001afa1 <HalQueryPerformanceCounter()>
c0010d71:	0f 20 da             	mov    edx,cr3
c0010d74:	0f 22 da             	mov    cr3,edx
c0010d77:	0f 20 da             	mov    edx,cr3
c0010d7a:	0f 22 da             	mov    cr3,edx
c0010d7d:	0f 20 da             	mov    edx,cr3
c0010d80:	0f 22 da             	mov    cr3,edx
c0010d83:	0f 20 da             	mov    edx,cr3
c0010d86:	0f 22 da             	mov    cr3,edx
c0010d89:	83 ec 0c             	sub    esp,0xc
c0010d8c:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010d91:	50                   	push   eax
c0010d92:	e8 a9 ff ff ff       	call   c0010d40 <KeSeedRand(unsigned int)>
c0010d97:	83 c4 1c             	add    esp,0x1c
c0010d9a:	c3                   	ret    
c0010d9b:	90                   	nop

c0010d9c <KeResolveCompatibilitySymbol(char*)>:
c0010d9c:	83 ec 0c             	sub    esp,0xc
c0010d9f:	83 ec 08             	sub    esp,0x8
c0010da2:	68 04 9e 02 c0       	push   0xc0029e04
c0010da7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dab:	e8 d0 f9 fe ff       	call   c0000780 <strcmp>
c0010db0:	83 c4 10             	add    esp,0x10
c0010db3:	85 c0                	test   eax,eax
c0010db5:	0f 94 c0             	sete   al
c0010db8:	0f b6 c0             	movzx  eax,al
c0010dbb:	85 c0                	test   eax,eax
c0010dbd:	74 0d                	je     c0010dcc <KeResolveCompatibilitySymbol(char*)+0x30>
c0010dbf:	b8 08 31 03 c0       	mov    eax,0xc0033108
c0010dc4:	e9 3b 02 00 00       	jmp    c0011004 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010dc9:	8d 76 00             	lea    esi,[esi+0x0]
c0010dcc:	83 ec 08             	sub    esp,0x8
c0010dcf:	68 0d 9e 02 c0       	push   0xc0029e0d
c0010dd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dd8:	e8 a3 f9 fe ff       	call   c0000780 <strcmp>
c0010ddd:	83 c4 10             	add    esp,0x10
c0010de0:	85 c0                	test   eax,eax
c0010de2:	0f 94 c0             	sete   al
c0010de5:	0f b6 c0             	movzx  eax,al
c0010de8:	85 c0                	test   eax,eax
c0010dea:	74 0c                	je     c0010df8 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010dec:	b8 a4 2c 02 c0       	mov    eax,0xc0022ca4
c0010df1:	e9 0e 02 00 00       	jmp    c0011004 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010df6:	66 90                	xchg   ax,ax
c0010df8:	83 ec 08             	sub    esp,0x8
c0010dfb:	68 17 9e 02 c0       	push   0xc0029e17
c0010e00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e04:	e8 77 f9 fe ff       	call   c0000780 <strcmp>
c0010e09:	83 c4 10             	add    esp,0x10
c0010e0c:	85 c0                	test   eax,eax
c0010e0e:	0f 94 c0             	sete   al
c0010e11:	0f b6 c0             	movzx  eax,al
c0010e14:	85 c0                	test   eax,eax
c0010e16:	74 0c                	je     c0010e24 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010e18:	b8 08 31 03 c0       	mov    eax,0xc0033108
c0010e1d:	e9 e2 01 00 00       	jmp    c0011004 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010e22:	66 90                	xchg   ax,ax
c0010e24:	83 ec 08             	sub    esp,0x8
c0010e27:	68 2a 9e 02 c0       	push   0xc0029e2a
c0010e2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e30:	e8 4b f9 fe ff       	call   c0000780 <strcmp>
c0010e35:	83 c4 10             	add    esp,0x10
c0010e38:	85 c0                	test   eax,eax
c0010e3a:	0f 94 c0             	sete   al
c0010e3d:	0f b6 c0             	movzx  eax,al
c0010e40:	85 c0                	test   eax,eax
c0010e42:	74 0c                	je     c0010e50 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010e44:	b8 d8 29 02 c0       	mov    eax,0xc00229d8
c0010e49:	e9 b6 01 00 00       	jmp    c0011004 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010e4e:	66 90                	xchg   ax,ax
c0010e50:	83 ec 08             	sub    esp,0x8
c0010e53:	68 33 9e 02 c0       	push   0xc0029e33
c0010e58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e5c:	e8 1f f9 fe ff       	call   c0000780 <strcmp>
c0010e61:	83 c4 10             	add    esp,0x10
c0010e64:	85 c0                	test   eax,eax
c0010e66:	0f 94 c0             	sete   al
c0010e69:	0f b6 c0             	movzx  eax,al
c0010e6c:	85 c0                	test   eax,eax
c0010e6e:	74 0c                	je     c0010e7c <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010e70:	b8 28 03 01 c0       	mov    eax,0xc0010328
c0010e75:	e9 8a 01 00 00       	jmp    c0011004 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010e7a:	66 90                	xchg   ax,ax
c0010e7c:	83 ec 08             	sub    esp,0x8
c0010e7f:	68 46 9e 02 c0       	push   0xc0029e46
c0010e84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e88:	e8 f3 f8 fe ff       	call   c0000780 <strcmp>
c0010e8d:	83 c4 10             	add    esp,0x10
c0010e90:	85 c0                	test   eax,eax
c0010e92:	0f 94 c0             	sete   al
c0010e95:	0f b6 c0             	movzx  eax,al
c0010e98:	85 c0                	test   eax,eax
c0010e9a:	74 0c                	je     c0010ea8 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010e9c:	b8 29 da 00 c0       	mov    eax,0xc000da29
c0010ea1:	e9 5e 01 00 00       	jmp    c0011004 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010ea6:	66 90                	xchg   ax,ax
c0010ea8:	83 ec 08             	sub    esp,0x8
c0010eab:	68 63 9e 02 c0       	push   0xc0029e63
c0010eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010eb4:	e8 c7 f8 fe ff       	call   c0000780 <strcmp>
c0010eb9:	83 c4 10             	add    esp,0x10
c0010ebc:	85 c0                	test   eax,eax
c0010ebe:	0f 94 c0             	sete   al
c0010ec1:	0f b6 c0             	movzx  eax,al
c0010ec4:	85 c0                	test   eax,eax
c0010ec6:	74 0c                	je     c0010ed4 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010ec8:	b8 a4 2d 02 c0       	mov    eax,0xc0022da4
c0010ecd:	e9 32 01 00 00       	jmp    c0011004 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010ed2:	66 90                	xchg   ax,ax
c0010ed4:	83 ec 08             	sub    esp,0x8
c0010ed7:	68 6d 9e 02 c0       	push   0xc0029e6d
c0010edc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ee0:	e8 9b f8 fe ff       	call   c0000780 <strcmp>
c0010ee5:	83 c4 10             	add    esp,0x10
c0010ee8:	85 c0                	test   eax,eax
c0010eea:	0f 94 c0             	sete   al
c0010eed:	0f b6 c0             	movzx  eax,al
c0010ef0:	85 c0                	test   eax,eax
c0010ef2:	74 0c                	je     c0010f00 <KeResolveCompatibilitySymbol(char*)+0x164>
c0010ef4:	b8 24 2b 02 c0       	mov    eax,0xc0022b24
c0010ef9:	e9 06 01 00 00       	jmp    c0011004 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010efe:	66 90                	xchg   ax,ax
c0010f00:	83 ec 08             	sub    esp,0x8
c0010f03:	68 76 9e 02 c0       	push   0xc0029e76
c0010f08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f0c:	e8 6f f8 fe ff       	call   c0000780 <strcmp>
c0010f11:	83 c4 10             	add    esp,0x10
c0010f14:	85 c0                	test   eax,eax
c0010f16:	0f 94 c0             	sete   al
c0010f19:	0f b6 c0             	movzx  eax,al
c0010f1c:	85 c0                	test   eax,eax
c0010f1e:	74 0c                	je     c0010f2c <KeResolveCompatibilitySymbol(char*)+0x190>
c0010f20:	b8 0c 31 03 c0       	mov    eax,0xc003310c
c0010f25:	e9 da 00 00 00       	jmp    c0011004 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010f2a:	66 90                	xchg   ax,ax
c0010f2c:	83 ec 08             	sub    esp,0x8
c0010f2f:	68 8e 9e 02 c0       	push   0xc0029e8e
c0010f34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f38:	e8 43 f8 fe ff       	call   c0000780 <strcmp>
c0010f3d:	83 c4 10             	add    esp,0x10
c0010f40:	85 c0                	test   eax,eax
c0010f42:	0f 94 c0             	sete   al
c0010f45:	0f b6 c0             	movzx  eax,al
c0010f48:	85 c0                	test   eax,eax
c0010f4a:	74 0c                	je     c0010f58 <KeResolveCompatibilitySymbol(char*)+0x1bc>
c0010f4c:	b8 0c 31 03 c0       	mov    eax,0xc003310c
c0010f51:	e9 ae 00 00 00       	jmp    c0011004 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010f56:	66 90                	xchg   ax,ax
c0010f58:	83 ec 08             	sub    esp,0x8
c0010f5b:	68 9b 9e 02 c0       	push   0xc0029e9b
c0010f60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f64:	e8 17 f8 fe ff       	call   c0000780 <strcmp>
c0010f69:	83 c4 10             	add    esp,0x10
c0010f6c:	85 c0                	test   eax,eax
c0010f6e:	0f 94 c0             	sete   al
c0010f71:	0f b6 c0             	movzx  eax,al
c0010f74:	85 c0                	test   eax,eax
c0010f76:	74 0c                	je     c0010f84 <KeResolveCompatibilitySymbol(char*)+0x1e8>
c0010f78:	b8 0d 31 03 c0       	mov    eax,0xc003310d
c0010f7d:	e9 82 00 00 00       	jmp    c0011004 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010f82:	66 90                	xchg   ax,ax
c0010f84:	83 ec 08             	sub    esp,0x8
c0010f87:	68 a8 9e 02 c0       	push   0xc0029ea8
c0010f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f90:	e8 eb f7 fe ff       	call   c0000780 <strcmp>
c0010f95:	83 c4 10             	add    esp,0x10
c0010f98:	85 c0                	test   eax,eax
c0010f9a:	0f 94 c0             	sete   al
c0010f9d:	0f b6 c0             	movzx  eax,al
c0010fa0:	85 c0                	test   eax,eax
c0010fa2:	74 08                	je     c0010fac <KeResolveCompatibilitySymbol(char*)+0x210>
c0010fa4:	b8 0c 31 03 c0       	mov    eax,0xc003310c
c0010fa9:	eb 59                	jmp    c0011004 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010fab:	90                   	nop
c0010fac:	83 ec 08             	sub    esp,0x8
c0010faf:	68 b9 9e 02 c0       	push   0xc0029eb9
c0010fb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fb8:	e8 c3 f7 fe ff       	call   c0000780 <strcmp>
c0010fbd:	83 c4 10             	add    esp,0x10
c0010fc0:	85 c0                	test   eax,eax
c0010fc2:	0f 94 c0             	sete   al
c0010fc5:	0f b6 c0             	movzx  eax,al
c0010fc8:	85 c0                	test   eax,eax
c0010fca:	74 08                	je     c0010fd4 <KeResolveCompatibilitySymbol(char*)+0x238>
c0010fcc:	b8 0d 31 03 c0       	mov    eax,0xc003310d
c0010fd1:	eb 31                	jmp    c0011004 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010fd3:	90                   	nop
c0010fd4:	83 ec 08             	sub    esp,0x8
c0010fd7:	68 ca 9e 02 c0       	push   0xc0029eca
c0010fdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fe0:	e8 9b f7 fe ff       	call   c0000780 <strcmp>
c0010fe5:	83 c4 10             	add    esp,0x10
c0010fe8:	85 c0                	test   eax,eax
c0010fea:	0f 94 c0             	sete   al
c0010fed:	0f b6 c0             	movzx  eax,al
c0010ff0:	85 c0                	test   eax,eax
c0010ff2:	74 08                	je     c0010ffc <KeResolveCompatibilitySymbol(char*)+0x260>
c0010ff4:	b8 a4 76 01 c0       	mov    eax,0xc00176a4
c0010ff9:	eb 09                	jmp    c0011004 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010ffb:	90                   	nop
c0010ffc:	b8 00 00 00 00       	mov    eax,0x0
c0011001:	8d 76 00             	lea    esi,[esi+0x0]
c0011004:	83 c4 0c             	add    esp,0xc
c0011007:	c3                   	ret    

c0011008 <Semaphore::Semaphore(int)>:
c0011008:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001100c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011010:	89 10                	mov    DWORD PTR [eax],edx
c0011012:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011016:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001101d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011021:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011028:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001102c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011033:	90                   	nop
c0011034:	c3                   	ret    
c0011035:	90                   	nop
c0011036:	66 90                	xchg   ax,ax

c0011038 <Semaphore::tryAcquire()>:
c0011038:	83 ec 0c             	sub    esp,0xc
c001103b:	fa                   	cli    
c001103c:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0011041:	83 c0 01             	add    eax,0x1
c0011044:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0011049:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c001104e:	83 c0 01             	add    eax,0x1
c0011051:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c0011056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001105a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001105d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011061:	8b 00                	mov    eax,DWORD PTR [eax]
c0011063:	39 c2                	cmp    edx,eax
c0011065:	7d 59                	jge    c00110c0 <Semaphore::tryAcquire()+0x88>
c0011067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001106b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001106e:	8d 50 01             	lea    edx,[eax+0x1]
c0011071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011075:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011078:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c001107d:	83 e8 01             	sub    eax,0x1
c0011080:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c0011085:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c001108a:	85 c0                	test   eax,eax
c001108c:	75 1a                	jne    c00110a8 <Semaphore::tryAcquire()+0x70>
c001108e:	a1 28 33 03 c0       	mov    eax,ds:0xc0033328
c0011093:	85 c0                	test   eax,eax
c0011095:	74 11                	je     c00110a8 <Semaphore::tryAcquire()+0x70>
c0011097:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c00110a1:	e8 0a 5e 00 00       	call   c0016eb0 <schedule()>
c00110a6:	66 90                	xchg   ax,ax
c00110a8:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c00110b0:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00110b5:	85 c0                	test   eax,eax
c00110b7:	75 03                	jne    c00110bc <Semaphore::tryAcquire()+0x84>
c00110b9:	fb                   	sti    
c00110ba:	66 90                	xchg   ax,ax
c00110bc:	b0 01                	mov    al,0x1
c00110be:	eb 48                	jmp    c0011108 <Semaphore::tryAcquire()+0xd0>
c00110c0:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c00110c5:	83 e8 01             	sub    eax,0x1
c00110c8:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c00110cd:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c00110d2:	85 c0                	test   eax,eax
c00110d4:	75 1a                	jne    c00110f0 <Semaphore::tryAcquire()+0xb8>
c00110d6:	a1 28 33 03 c0       	mov    eax,ds:0xc0033328
c00110db:	85 c0                	test   eax,eax
c00110dd:	74 11                	je     c00110f0 <Semaphore::tryAcquire()+0xb8>
c00110df:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c00110e9:	e8 c2 5d 00 00       	call   c0016eb0 <schedule()>
c00110ee:	66 90                	xchg   ax,ax
c00110f0:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c00110f8:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00110fd:	85 c0                	test   eax,eax
c00110ff:	75 03                	jne    c0011104 <Semaphore::tryAcquire()+0xcc>
c0011101:	fb                   	sti    
c0011102:	66 90                	xchg   ax,ax
c0011104:	b0 00                	mov    al,0x0
c0011106:	66 90                	xchg   ax,ax
c0011108:	83 c4 0c             	add    esp,0xc
c001110b:	c3                   	ret    

c001110c <Semaphore::assertLocked(char const*)>:
c001110c:	83 ec 0c             	sub    esp,0xc
c001110f:	fa                   	cli    
c0011110:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0011115:	83 c0 01             	add    eax,0x1
c0011118:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c001111d:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c0011122:	83 c0 01             	add    eax,0x1
c0011125:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c001112a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001112e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011135:	8b 00                	mov    eax,DWORD PTR [eax]
c0011137:	39 c2                	cmp    edx,eax
c0011139:	7d 11                	jge    c001114c <Semaphore::assertLocked(char const*)+0x40>
c001113b:	83 ec 0c             	sub    esp,0xc
c001113e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011142:	e8 e1 f1 ff ff       	call   c0010328 <KePanic(char const*)>
c0011147:	83 c4 10             	add    esp,0x10
c001114a:	66 90                	xchg   ax,ax
c001114c:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c0011151:	83 e8 01             	sub    eax,0x1
c0011154:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c0011159:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c001115e:	85 c0                	test   eax,eax
c0011160:	75 1a                	jne    c001117c <Semaphore::assertLocked(char const*)+0x70>
c0011162:	a1 28 33 03 c0       	mov    eax,ds:0xc0033328
c0011167:	85 c0                	test   eax,eax
c0011169:	74 11                	je     c001117c <Semaphore::assertLocked(char const*)+0x70>
c001116b:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c0011175:	e8 36 5d 00 00       	call   c0016eb0 <schedule()>
c001117a:	66 90                	xchg   ax,ax
c001117c:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0011184:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0011189:	85 c0                	test   eax,eax
c001118b:	75 03                	jne    c0011190 <Semaphore::assertLocked(char const*)+0x84>
c001118d:	fb                   	sti    
c001118e:	66 90                	xchg   ax,ax
c0011190:	90                   	nop
c0011191:	83 c4 0c             	add    esp,0xc
c0011194:	c3                   	ret    
c0011195:	90                   	nop
c0011196:	66 90                	xchg   ax,ax

c0011198 <Semaphore::acquire(int)>:
c0011198:	83 ec 1c             	sub    esp,0x1c
c001119b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00111a0:	0f 84 ae 00 00 00    	je     c0011254 <Semaphore::acquire(int)+0xbc>
c00111a6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00111ae:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00111b3:	90                   	nop
c00111b4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00111b9:	85 c0                	test   eax,eax
c00111bb:	0f 84 87 00 00 00    	je     c0011248 <Semaphore::acquire(int)+0xb0>
c00111c1:	83 ec 0c             	sub    esp,0xc
c00111c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00111c8:	e8 6b fe ff ff       	call   c0011038 <Semaphore::tryAcquire()>
c00111cd:	83 c4 10             	add    esp,0x10
c00111d0:	83 f0 01             	xor    eax,0x1
c00111d3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00111d7:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00111db:	83 f0 01             	xor    eax,0x1
c00111de:	0f b6 c0             	movzx  eax,al
c00111e1:	85 c0                	test   eax,eax
c00111e3:	75 5f                	jne    c0011244 <Semaphore::acquire(int)+0xac>
c00111e5:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c00111ea:	7f 34                	jg     c0011220 <Semaphore::acquire(int)+0x88>
c00111ec:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00111f0:	89 d0                	mov    eax,edx
c00111f2:	c1 e0 02             	shl    eax,0x2
c00111f5:	01 d0                	add    eax,edx
c00111f7:	d1 e0                	shl    eax,1
c00111f9:	89 c2                	mov    edx,eax
c00111fb:	c1 fa 1f             	sar    edx,0x1f
c00111fe:	83 ec 08             	sub    esp,0x8
c0011201:	52                   	push   edx
c0011202:	50                   	push   eax
c0011203:	e8 9c 5e 00 00       	call   c00170a4 <milliTenthSleep(unsigned long long)>
c0011208:	83 c4 10             	add    esp,0x10
c001120b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001120f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0011213:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001121b:	eb 97                	jmp    c00111b4 <Semaphore::acquire(int)+0x1c>
c001121d:	8d 76 00             	lea    esi,[esi+0x0]
c0011220:	83 ec 08             	sub    esp,0x8
c0011223:	6a 00                	push   0x0
c0011225:	68 90 01 00 00       	push   0x190
c001122a:	e8 75 5e 00 00       	call   c00170a4 <milliTenthSleep(unsigned long long)>
c001122f:	83 c4 10             	add    esp,0x10
c0011232:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0011237:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c001123c:	e9 73 ff ff ff       	jmp    c00111b4 <Semaphore::acquire(int)+0x1c>
c0011241:	8d 76 00             	lea    esi,[esi+0x0]
c0011244:	90                   	nop
c0011245:	8d 76 00             	lea    esi,[esi+0x0]
c0011248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001124c:	e9 fb 00 00 00       	jmp    c001134c <Semaphore::acquire(int)+0x1b4>
c0011251:	8d 76 00             	lea    esi,[esi+0x0]
c0011254:	fa                   	cli    
c0011255:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c001125a:	83 c0 01             	add    eax,0x1
c001125d:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0011262:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c0011267:	83 c0 01             	add    eax,0x1
c001126a:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c001126f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011273:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011276:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001127a:	8b 00                	mov    eax,DWORD PTR [eax]
c001127c:	39 c2                	cmp    edx,eax
c001127e:	7d 14                	jge    c0011294 <Semaphore::acquire(int)+0xfc>
c0011280:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011284:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011287:	8d 50 01             	lea    edx,[eax+0x1]
c001128a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001128e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011291:	eb 6d                	jmp    c0011300 <Semaphore::acquire(int)+0x168>
c0011293:	90                   	nop
c0011294:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011299:	8b 00                	mov    eax,DWORD PTR [eax]
c001129b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00112a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112a9:	85 c0                	test   eax,eax
c00112ab:	75 13                	jne    c00112c0 <Semaphore::acquire(int)+0x128>
c00112ad:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00112b2:	8b 10                	mov    edx,DWORD PTR [eax]
c00112b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112b8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00112bb:	eb 17                	jmp    c00112d4 <Semaphore::acquire(int)+0x13c>
c00112bd:	8d 76 00             	lea    esi,[esi+0x0]
c00112c0:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00112c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112c9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00112cc:	8b 12                	mov    edx,DWORD PTR [edx]
c00112ce:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00112d1:	8d 76 00             	lea    esi,[esi+0x0]
c00112d4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00112d9:	8b 10                	mov    edx,DWORD PTR [eax]
c00112db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112df:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00112e2:	83 ec 0c             	sub    esp,0xc
c00112e5:	68 e0 9e 02 c0       	push   0xc0029ee0
c00112ea:	e8 77 5c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00112ef:	83 c4 10             	add    esp,0x10
c00112f2:	83 ec 0c             	sub    esp,0xc
c00112f5:	6a 05                	push   0x5
c00112f7:	e8 74 5c 00 00       	call   c0016f70 <blockTask(TaskState)>
c00112fc:	83 c4 10             	add    esp,0x10
c00112ff:	90                   	nop
c0011300:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c0011305:	83 e8 01             	sub    eax,0x1
c0011308:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c001130d:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c0011312:	85 c0                	test   eax,eax
c0011314:	75 1a                	jne    c0011330 <Semaphore::acquire(int)+0x198>
c0011316:	a1 28 33 03 c0       	mov    eax,ds:0xc0033328
c001131b:	85 c0                	test   eax,eax
c001131d:	74 11                	je     c0011330 <Semaphore::acquire(int)+0x198>
c001131f:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c0011329:	e8 82 5b 00 00       	call   c0016eb0 <schedule()>
c001132e:	66 90                	xchg   ax,ax
c0011330:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0011338:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c001133d:	85 c0                	test   eax,eax
c001133f:	75 03                	jne    c0011344 <Semaphore::acquire(int)+0x1ac>
c0011341:	fb                   	sti    
c0011342:	66 90                	xchg   ax,ax
c0011344:	b8 00 00 00 00       	mov    eax,0x0
c0011349:	8d 76 00             	lea    esi,[esi+0x0]
c001134c:	83 c4 1c             	add    esp,0x1c
c001134f:	c3                   	ret    

c0011350 <Semaphore::acquire()>:
c0011350:	83 ec 0c             	sub    esp,0xc
c0011353:	83 ec 08             	sub    esp,0x8
c0011356:	6a 00                	push   0x0
c0011358:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001135c:	e8 37 fe ff ff       	call   c0011198 <Semaphore::acquire(int)>
c0011361:	83 c4 10             	add    esp,0x10
c0011364:	90                   	nop
c0011365:	83 c4 0c             	add    esp,0xc
c0011368:	c3                   	ret    
c0011369:	90                   	nop
c001136a:	66 90                	xchg   ax,ax

c001136c <Semaphore::release()>:
c001136c:	83 ec 1c             	sub    esp,0x1c
c001136f:	fa                   	cli    
c0011370:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0011375:	83 c0 01             	add    eax,0x1
c0011378:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c001137d:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c0011382:	83 c0 01             	add    eax,0x1
c0011385:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c001138a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001138e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011391:	85 c0                	test   eax,eax
c0011393:	74 2b                	je     c00113c0 <Semaphore::release()+0x54>
c0011395:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011399:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001139c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00113a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113a4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00113a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00113ab:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113ae:	83 ec 0c             	sub    esp,0xc
c00113b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113b5:	e8 4e 5e 00 00       	call   c0017208 <unblockTask(ThreadControlBlock*)>
c00113ba:	83 c4 10             	add    esp,0x10
c00113bd:	eb 15                	jmp    c00113d4 <Semaphore::release()+0x68>
c00113bf:	90                   	nop
c00113c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00113c4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00113c7:	8d 50 ff             	lea    edx,[eax-0x1]
c00113ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00113ce:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00113d1:	8d 76 00             	lea    esi,[esi+0x0]
c00113d4:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c00113d9:	83 e8 01             	sub    eax,0x1
c00113dc:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c00113e1:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c00113e6:	85 c0                	test   eax,eax
c00113e8:	75 1a                	jne    c0011404 <Semaphore::release()+0x98>
c00113ea:	a1 28 33 03 c0       	mov    eax,ds:0xc0033328
c00113ef:	85 c0                	test   eax,eax
c00113f1:	74 11                	je     c0011404 <Semaphore::release()+0x98>
c00113f3:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c00113fd:	e8 ae 5a 00 00       	call   c0016eb0 <schedule()>
c0011402:	66 90                	xchg   ax,ax
c0011404:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c001140c:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0011411:	85 c0                	test   eax,eax
c0011413:	75 03                	jne    c0011418 <Semaphore::release()+0xac>
c0011415:	fb                   	sti    
c0011416:	66 90                	xchg   ax,ax
c0011418:	90                   	nop
c0011419:	83 c4 1c             	add    esp,0x1c
c001141c:	c3                   	ret    

c001141d <KiSigKill(int)>:
c001141d:	83 ec 0c             	sub    esp,0xc
c0011420:	6a 00                	push   0x0
c0011422:	6a 00                	push   0x0
c0011424:	6a ff                	push   0xffffffff
c0011426:	6a 01                	push   0x1
c0011428:	e8 25 cc 01 00       	call   c002e052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001142d:	83 c4 1c             	add    esp,0x1c
c0011430:	c3                   	ret    

c0011431 <KiDefaultSignalHandlerIgnore(int)>:
c0011431:	c3                   	ret    

c0011432 <KiDefaultSignalHandlerPause(int)>:
c0011432:	57                   	push   edi
c0011433:	b9 07 00 00 00       	mov    ecx,0x7
c0011438:	56                   	push   esi
c0011439:	be 3b 9f 02 c0       	mov    esi,0xc0029f3b
c001143e:	83 ec 24             	sub    esp,0x24
c0011441:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011445:	fc                   	cld    
c0011446:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011448:	8d 44 24 04          	lea    eax,[esp+0x4]
c001144c:	50                   	push   eax
c001144d:	6a 00                	push   0x0
c001144f:	6a 00                	push   0x0
c0011451:	6a 27                	push   0x27
c0011453:	e8 fa cb 01 00       	call   c002e052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011458:	83 c4 34             	add    esp,0x34
c001145b:	5e                   	pop    esi
c001145c:	5f                   	pop    edi
c001145d:	c3                   	ret    

c001145e <KiDefaultSignalHandlerResume(int)>:
c001145e:	57                   	push   edi
c001145f:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011464:	56                   	push   esi
c0011465:	be 57 9f 02 c0       	mov    esi,0xc0029f57
c001146a:	83 ec 24             	sub    esp,0x24
c001146d:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011471:	fc                   	cld    
c0011472:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011474:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011478:	50                   	push   eax
c0011479:	6a 00                	push   0x0
c001147b:	6a 00                	push   0x0
c001147d:	6a 27                	push   0x27
c001147f:	e8 ce cb 01 00       	call   c002e052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011484:	83 c4 34             	add    esp,0x34
c0011487:	5e                   	pop    esi
c0011488:	5f                   	pop    edi
c0011489:	c3                   	ret    

c001148a <KeDeinitSignals(SigHandlerBlock*)>:
c001148a:	e9 55 ea ff ff       	jmp    c000fee4 <free>

c001148f <KeInitSignals()>:
c001148f:	53                   	push   ebx
c0011490:	83 ec 14             	sub    esp,0x14
c0011493:	68 c8 00 00 00       	push   0xc8
c0011498:	e8 37 ea ff ff       	call   c000fed4 <malloc>
c001149d:	83 c4 0c             	add    esp,0xc
c00114a0:	6a 04                	push   0x4
c00114a2:	6a 00                	push   0x0
c00114a4:	50                   	push   eax
c00114a5:	89 c3                	mov    ebx,eax
c00114a7:	e8 44 f0 fe ff       	call   c00004f0 <memset>
c00114ac:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00114b2:	83 c4 0c             	add    esp,0xc
c00114b5:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c00114bf:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c00114c9:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00114d0:	6a 20                	push   0x20
c00114d2:	6a 00                	push   0x0
c00114d4:	50                   	push   eax
c00114d5:	e8 16 f0 fe ff       	call   c00004f0 <memset>
c00114da:	83 c4 0c             	add    esp,0xc
c00114dd:	6a 44                	push   0x44
c00114df:	6a 00                	push   0x0
c00114e1:	53                   	push   ebx
c00114e2:	e8 09 f0 fe ff       	call   c00004f0 <memset>
c00114e7:	8d 83 88 00 00 00    	lea    eax,[ebx+0x88]
c00114ed:	83 c4 0c             	add    esp,0xc
c00114f0:	6a 11                	push   0x11
c00114f2:	6a 00                	push   0x0
c00114f4:	50                   	push   eax
c00114f5:	e8 f6 ef fe ff       	call   c00004f0 <memset>
c00114fa:	83 c4 18             	add    esp,0x18
c00114fd:	89 d8                	mov    eax,ebx
c00114ff:	5b                   	pop    ebx
c0011500:	c3                   	ret    

c0011501 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011501:	53                   	push   ebx
c0011502:	b8 01 00 00 00       	mov    eax,0x1
c0011507:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001150b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001150f:	83 f9 10             	cmp    ecx,0x10
c0011512:	7f 21                	jg     c0011535 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011518:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001151b:	89 03                	mov    DWORD PTR [ebx],eax
c001151d:	b8 01 00 00 00       	mov    eax,0x1
c0011522:	d3 e0                	shl    eax,cl
c0011524:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011528:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001152b:	31 c0                	xor    eax,eax
c001152d:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011535:	5b                   	pop    ebx
c0011536:	c3                   	ret    

c0011537 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011537:	55                   	push   ebp
c0011538:	57                   	push   edi
c0011539:	bf 08 00 00 00       	mov    edi,0x8
c001153e:	56                   	push   esi
c001153f:	53                   	push   ebx
c0011540:	83 ec 14             	sub    esp,0x14
c0011543:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0011547:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001154b:	68 74 9f 02 c0       	push   0xc0029f74
c0011550:	e8 11 5a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011555:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c001155b:	83 c4 10             	add    esp,0x10
c001155e:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011565:	31 c9                	xor    ecx,ecx
c0011567:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001156b:	99                   	cdq    
c001156c:	f7 ff                	idiv   edi
c001156e:	8d 42 24             	lea    eax,[edx+0x24]
c0011571:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011575:	85 f6                	test   esi,esi
c0011577:	75 1a                	jne    c0011593 <KeRaiseSignal(SigHandlerBlock*, int)+0x5c>
c0011579:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001157d:	89 7c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],edi
c0011581:	50                   	push   eax
c0011582:	50                   	push   eax
c0011583:	52                   	push   edx
c0011584:	68 8a 9f 02 c0       	push   0xc0029f8a
c0011589:	e8 d8 59 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001158e:	83 c4 10             	add    esp,0x10
c0011591:	eb 1b                	jmp    c00115ae <KeRaiseSignal(SigHandlerBlock*, int)+0x77>
c0011593:	41                   	inc    ecx
c0011594:	83 f9 08             	cmp    ecx,0x8
c0011597:	75 ce                	jne    c0011567 <KeRaiseSignal(SigHandlerBlock*, int)+0x30>
c0011599:	83 ec 0c             	sub    esp,0xc
c001159c:	be 01 00 00 00       	mov    esi,0x1
c00115a1:	68 ab 9f 02 c0       	push   0xc0029fab
c00115a6:	e8 bb 59 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00115ab:	83 c4 10             	add    esp,0x10
c00115ae:	83 c4 0c             	add    esp,0xc
c00115b1:	89 f0                	mov    eax,esi
c00115b3:	5b                   	pop    ebx
c00115b4:	5e                   	pop    esi
c00115b5:	5f                   	pop    edi
c00115b6:	5d                   	pop    ebp
c00115b7:	c3                   	ret    

c00115b8 <KeCheckSignal(SigHandlerBlock*, int*)>:
c00115b8:	55                   	push   ebp
c00115b9:	57                   	push   edi
c00115ba:	56                   	push   esi
c00115bb:	53                   	push   ebx
c00115bc:	83 ec 1c             	sub    esp,0x1c
c00115bf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00115c3:	85 db                	test   ebx,ebx
c00115c5:	0f 84 e0 00 00 00    	je     c00116ab <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c00115cb:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00115d2:	0f 84 d3 00 00 00    	je     c00116ab <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c00115d8:	31 c9                	xor    ecx,ecx
c00115da:	bf 08 00 00 00       	mov    edi,0x8
c00115df:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00115e5:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00115e8:	99                   	cdq    
c00115e9:	f7 ff                	idiv   edi
c00115eb:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00115f2:	85 ed                	test   ebp,ebp
c00115f4:	0f 84 d2 00 00 00    	je     c00116cc <KeCheckSignal(SigHandlerBlock*, int*)+0x114>
c00115fa:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011600:	89 e9                	mov    ecx,ebp
c0011602:	bf 01 00 00 00       	mov    edi,0x1
c0011607:	d3 e7                	shl    edi,cl
c0011609:	31 c9                	xor    ecx,ecx
c001160b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001160f:	b8 01 00 00 00       	mov    eax,0x1
c0011614:	d3 e0                	shl    eax,cl
c0011616:	85 44 24 0c          	test   DWORD PTR [esp+0xc],eax
c001161a:	74 0a                	je     c0011626 <KeCheckSignal(SigHandlerBlock*, int*)+0x6e>
c001161c:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011620:	0f 85 85 00 00 00    	jne    c00116ab <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011626:	41                   	inc    ecx
c0011627:	83 f9 11             	cmp    ecx,0x11
c001162a:	75 e3                	jne    c001160f <KeCheckSignal(SigHandlerBlock*, int*)+0x57>
c001162c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011630:	46                   	inc    esi
c0011631:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011637:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011642:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011649:	09 f8                	or     eax,edi
c001164b:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011651:	31 c0                	xor    eax,eax
c0011653:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c001165b:	74 09                	je     c0011666 <KeCheckSignal(SigHandlerBlock*, int*)+0xae>
c001165d:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011664:	eb 06                	jmp    c001166c <KeCheckSignal(SigHandlerBlock*, int*)+0xb4>
c0011666:	40                   	inc    eax
c0011667:	83 f8 08             	cmp    eax,0x8
c001166a:	75 e7                	jne    c0011653 <KeCheckSignal(SigHandlerBlock*, int*)+0x9b>
c001166c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011670:	83 fd 09             	cmp    ebp,0x9
c0011673:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011676:	89 2a                	mov    DWORD PTR [edx],ebp
c0011678:	75 14                	jne    c001168e <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c001167a:	83 ec 0c             	sub    esp,0xc
c001167d:	68 bc 9f 02 c0       	push   0xc0029fbc
c0011682:	e8 df 58 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011687:	b8 1d 14 01 c0       	mov    eax,0xc001141d
c001168c:	eb 39                	jmp    c00116c7 <KeCheckSignal(SigHandlerBlock*, int*)+0x10f>
c001168e:	83 f8 01             	cmp    eax,0x1
c0011691:	75 1c                	jne    c00116af <KeCheckSignal(SigHandlerBlock*, int*)+0xf7>
c0011693:	83 ec 0c             	sub    esp,0xc
c0011696:	f7 d7                	not    edi
c0011698:	68 c6 9f 02 c0       	push   0xc0029fc6
c001169d:	e8 c4 58 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00116a2:	83 c4 10             	add    esp,0x10
c00116a5:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c00116ab:	31 c0                	xor    eax,eax
c00116ad:	eb 30                	jmp    c00116df <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c00116af:	85 c0                	test   eax,eax
c00116b1:	75 2c                	jne    c00116df <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c00116b3:	83 ec 0c             	sub    esp,0xc
c00116b6:	68 d3 9f 02 c0       	push   0xc0029fd3
c00116bb:	e8 a6 58 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00116c0:	8b 04 ad 60 d2 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffd2da0]
c00116c7:	83 c4 10             	add    esp,0x10
c00116ca:	eb 13                	jmp    c00116df <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c00116cc:	41                   	inc    ecx
c00116cd:	46                   	inc    esi
c00116ce:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00116d4:	83 f9 08             	cmp    ecx,0x8
c00116d7:	0f 85 02 ff ff ff    	jne    c00115df <KeCheckSignal(SigHandlerBlock*, int*)+0x27>
c00116dd:	eb cc                	jmp    c00116ab <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c00116df:	83 c4 1c             	add    esp,0x1c
c00116e2:	5b                   	pop    ebx
c00116e3:	5e                   	pop    esi
c00116e4:	5f                   	pop    edi
c00116e5:	5d                   	pop    ebp
c00116e6:	c3                   	ret    

c00116e7 <KiCheckSignalZ>:
c00116e7:	80 3d 0c 31 03 c0 00 	cmp    BYTE PTR ds:0xc003310c,0x0
c00116ee:	74 43                	je     c0011733 <KiCheckSignalZ+0x4c>
c00116f0:	83 ec 24             	sub    esp,0x24
c00116f3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00116f7:	50                   	push   eax
c00116f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116fd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011700:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0011706:	e8 ad fe ff ff       	call   c00115b8 <KeCheckSignal(SigHandlerBlock*, int*)>
c001170b:	83 c4 10             	add    esp,0x10
c001170e:	31 d2                	xor    edx,edx
c0011710:	85 c0                	test   eax,eax
c0011712:	74 19                	je     c001172d <KiCheckSignalZ+0x46>
c0011714:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001171a:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001171d:	89 02                	mov    DWORD PTR [edx],eax
c001171f:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011726:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001172a:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001172d:	89 d0                	mov    eax,edx
c001172f:	83 c4 1c             	add    esp,0x1c
c0011732:	c3                   	ret    
c0011733:	31 d2                	xor    edx,edx
c0011735:	89 d0                	mov    eax,edx
c0011737:	c3                   	ret    

c0011738 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011738:	56                   	push   esi
c0011739:	53                   	push   ebx
c001173a:	bb 01 00 00 00       	mov    ebx,0x1
c001173f:	52                   	push   edx
c0011740:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011744:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011748:	d3 e3                	shl    ebx,cl
c001174a:	83 f9 10             	cmp    ecx,0x10
c001174d:	7f 08                	jg     c0011757 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c001174f:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011755:	75 10                	jne    c0011767 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011757:	83 ec 0c             	sub    esp,0xc
c001175a:	68 f6 9f 02 c0       	push   0xc0029ff6
c001175f:	e8 c4 eb ff ff       	call   c0010328 <KePanic(char const*)>
c0011764:	83 c4 10             	add    esp,0x10
c0011767:	f7 d3                	not    ebx
c0011769:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c001176f:	58                   	pop    eax
c0011770:	5b                   	pop    ebx
c0011771:	5e                   	pop    esi
c0011772:	c3                   	ret    

c0011773 <KiFinishSignalZ>:
c0011773:	53                   	push   ebx
c0011774:	83 ec 08             	sub    esp,0x8
c0011777:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001177c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011780:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0011783:	83 fa 08             	cmp    edx,0x8
c0011786:	75 0c                	jne    c0011794 <KiFinishSignalZ+0x21>
c0011788:	83 ec 0c             	sub    esp,0xc
c001178b:	50                   	push   eax
c001178c:	e8 77 5a 00 00       	call   c0017208 <unblockTask(ThreadControlBlock*)>
c0011791:	83 c4 10             	add    esp,0x10
c0011794:	50                   	push   eax
c0011795:	50                   	push   eax
c0011796:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011799:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001179e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117a1:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c00117a7:	e8 8c ff ff ff       	call   c0011738 <KeCompleteSignal(SigHandlerBlock*, int)>
c00117ac:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00117b2:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00117b9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00117c0:	83 c4 18             	add    esp,0x18
c00117c3:	5b                   	pop    ebx
c00117c4:	c3                   	ret    

c00117c5 <SysSeekDir(regs*)>:
c00117c5:	31 c0                	xor    eax,eax
c00117c7:	31 d2                	xor    edx,edx
c00117c9:	c3                   	ret    

c00117ca <SysTellDir(regs*)>:
c00117ca:	31 c0                	xor    eax,eax
c00117cc:	31 d2                	xor    edx,edx
c00117ce:	c3                   	ret    

c00117cf <SysVerify(regs*)>:
c00117cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117d3:	31 d2                	xor    edx,edx
c00117d5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00117d8:	c3                   	ret    

c00117d9 <SysGetArgc(regs*)>:
c00117d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117de:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117e1:	8b 80 b6 05 00 00    	mov    eax,DWORD PTR [eax+0x5b6]
c00117e7:	89 c2                	mov    edx,eax
c00117e9:	c1 fa 1f             	sar    edx,0x1f
c00117ec:	c3                   	ret    

c00117ed <SysTTYName(regs*)>:
c00117ed:	b8 01 00 00 00       	mov    eax,0x1
c00117f2:	31 d2                	xor    edx,edx
c00117f4:	c3                   	ret    

c00117f5 <SysFormatDisk(regs*)>:
c00117f5:	56                   	push   esi
c00117f6:	53                   	push   ebx
c00117f7:	83 ec 04             	sub    esp,0x4
c00117fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00117fe:	8b 1d 04 23 03 c0    	mov    ebx,DWORD PTR ds:0xc0032304
c0011804:	eb 2a                	jmp    c0011830 <SysFormatDisk(regs*)+0x3b>
c0011806:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011809:	83 ec 0c             	sub    esp,0xc
c001180c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001180f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011811:	51                   	push   ecx
c0011812:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011815:	51                   	push   ecx
c0011816:	50                   	push   eax
c0011817:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c001181e:	50                   	push   eax
c001181f:	53                   	push   ebx
c0011820:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011823:	83 c4 20             	add    esp,0x20
c0011826:	83 f8 08             	cmp    eax,0x8
c0011829:	89 c1                	mov    ecx,eax
c001182b:	75 14                	jne    c0011841 <SysFormatDisk(regs*)+0x4c>
c001182d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011830:	85 db                	test   ebx,ebx
c0011832:	75 d2                	jne    c0011806 <SysFormatDisk(regs*)+0x11>
c0011834:	b8 03 00 00 00       	mov    eax,0x3
c0011839:	31 d2                	xor    edx,edx
c001183b:	83 c4 04             	add    esp,0x4
c001183e:	5b                   	pop    ebx
c001183f:	5e                   	pop    esi
c0011840:	c3                   	ret    
c0011841:	85 c0                	test   eax,eax
c0011843:	74 13                	je     c0011858 <SysFormatDisk(regs*)+0x63>
c0011845:	31 d2                	xor    edx,edx
c0011847:	83 f9 09             	cmp    ecx,0x9
c001184a:	b8 01 00 00 00       	mov    eax,0x1
c001184f:	74 ea                	je     c001183b <SysFormatDisk(regs*)+0x46>
c0011851:	b8 02 00 00 00       	mov    eax,0x2
c0011856:	eb e1                	jmp    c0011839 <SysFormatDisk(regs*)+0x44>
c0011858:	31 c0                	xor    eax,eax
c001185a:	eb dd                	jmp    c0011839 <SysFormatDisk(regs*)+0x44>

c001185c <SysSetDiskVolumeLabel(regs*)>:
c001185c:	56                   	push   esi
c001185d:	53                   	push   ebx
c001185e:	83 ec 04             	sub    esp,0x4
c0011861:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011865:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011868:	83 f8 19             	cmp    eax,0x19
c001186b:	77 33                	ja     c00118a0 <SysSetDiskVolumeLabel(regs*)+0x44>
c001186d:	8b 0c 85 e0 2a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcd520]
c0011874:	85 c9                	test   ecx,ecx
c0011876:	74 28                	je     c00118a0 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011878:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001187b:	85 db                	test   ebx,ebx
c001187d:	74 21                	je     c00118a0 <SysSetDiskVolumeLabel(regs*)+0x44>
c001187f:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011885:	85 d2                	test   edx,edx
c0011887:	74 17                	je     c00118a0 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011889:	8b 32                	mov    esi,DWORD PTR [edx]
c001188b:	53                   	push   ebx
c001188c:	50                   	push   eax
c001188d:	51                   	push   ecx
c001188e:	52                   	push   edx
c001188f:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011892:	83 c4 10             	add    esp,0x10
c0011895:	83 c4 04             	add    esp,0x4
c0011898:	5b                   	pop    ebx
c0011899:	5e                   	pop    esi
c001189a:	89 c2                	mov    edx,eax
c001189c:	c1 fa 1f             	sar    edx,0x1f
c001189f:	c3                   	ret    
c00118a0:	83 c4 04             	add    esp,0x4
c00118a3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00118a8:	5b                   	pop    ebx
c00118a9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118ae:	5e                   	pop    esi
c00118af:	c3                   	ret    

c00118b0 <SysGetDiskVolumeLabel(regs*)>:
c00118b0:	57                   	push   edi
c00118b1:	56                   	push   esi
c00118b2:	53                   	push   ebx
c00118b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b7:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00118ba:	83 fa 19             	cmp    edx,0x19
c00118bd:	77 3c                	ja     c00118fb <SysGetDiskVolumeLabel(regs*)+0x4b>
c00118bf:	8b 0c 95 e0 2a 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffcd520]
c00118c6:	85 c9                	test   ecx,ecx
c00118c8:	74 31                	je     c00118fb <SysGetDiskVolumeLabel(regs*)+0x4b>
c00118ca:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00118cd:	85 db                	test   ebx,ebx
c00118cf:	74 2a                	je     c00118fb <SysGetDiskVolumeLabel(regs*)+0x4b>
c00118d1:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00118d4:	85 f6                	test   esi,esi
c00118d6:	74 23                	je     c00118fb <SysGetDiskVolumeLabel(regs*)+0x4b>
c00118d8:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c00118de:	85 c0                	test   eax,eax
c00118e0:	74 19                	je     c00118fb <SysGetDiskVolumeLabel(regs*)+0x4b>
c00118e2:	83 ec 0c             	sub    esp,0xc
c00118e5:	8b 38                	mov    edi,DWORD PTR [eax]
c00118e7:	56                   	push   esi
c00118e8:	53                   	push   ebx
c00118e9:	52                   	push   edx
c00118ea:	51                   	push   ecx
c00118eb:	50                   	push   eax
c00118ec:	ff 57 58             	call   DWORD PTR [edi+0x58]
c00118ef:	83 c4 20             	add    esp,0x20
c00118f2:	5b                   	pop    ebx
c00118f3:	5e                   	pop    esi
c00118f4:	89 c2                	mov    edx,eax
c00118f6:	c1 fa 1f             	sar    edx,0x1f
c00118f9:	5f                   	pop    edi
c00118fa:	c3                   	ret    
c00118fb:	5b                   	pop    ebx
c00118fc:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011901:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011906:	5e                   	pop    esi
c0011907:	5f                   	pop    edi
c0011908:	c3                   	ret    

c0011909 <SysRealpath(regs*)>:
c0011909:	53                   	push   ebx
c001190a:	83 ec 08             	sub    esp,0x8
c001190d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011911:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011914:	85 c9                	test   ecx,ecx
c0011916:	74 36                	je     c001194e <SysRealpath(regs*)+0x45>
c0011918:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001191b:	31 d2                	xor    edx,edx
c001191d:	b8 01 00 00 00       	mov    eax,0x1
c0011922:	85 db                	test   ebx,ebx
c0011924:	75 05                	jne    c001192b <SysRealpath(regs*)+0x22>
c0011926:	83 c4 08             	add    esp,0x8
c0011929:	5b                   	pop    ebx
c001192a:	c3                   	ret    
c001192b:	6a 00                	push   0x0
c001192d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011932:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011935:	05 0c 01 00 00       	add    eax,0x10c
c001193a:	50                   	push   eax
c001193b:	51                   	push   ecx
c001193c:	53                   	push   ebx
c001193d:	e8 66 6d ff ff       	call   c00086a8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011942:	83 c4 10             	add    esp,0x10
c0011945:	31 c0                	xor    eax,eax
c0011947:	31 d2                	xor    edx,edx
c0011949:	83 c4 08             	add    esp,0x8
c001194c:	5b                   	pop    ebx
c001194d:	c3                   	ret    
c001194e:	b8 01 00 00 00       	mov    eax,0x1
c0011953:	31 d2                	xor    edx,edx
c0011955:	eb f2                	jmp    c0011949 <SysRealpath(regs*)+0x40>

c0011957 <SysReadDir(regs*)>:
c0011957:	53                   	push   ebx
c0011958:	83 ec 18             	sub    esp,0x18
c001195b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001195f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011962:	83 f8 02             	cmp    eax,0x2
c0011965:	76 4f                	jbe    c00119b6 <SysReadDir(regs*)+0x5f>
c0011967:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001196e:	77 52                	ja     c00119c2 <SysReadDir(regs*)+0x6b>
c0011970:	83 ec 0c             	sub    esp,0xc
c0011973:	50                   	push   eax
c0011974:	e8 98 1d 00 00       	call   c0013711 <KeGetFileFromDescriptor(int)>
c0011979:	83 c4 10             	add    esp,0x10
c001197c:	85 c0                	test   eax,eax
c001197e:	74 42                	je     c00119c2 <SysReadDir(regs*)+0x6b>
c0011980:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011988:	83 ec 0c             	sub    esp,0xc
c001198b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001198f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011991:	51                   	push   ecx
c0011992:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011995:	51                   	push   ecx
c0011996:	6a 00                	push   0x0
c0011998:	68 10 01 00 00       	push   0x110
c001199d:	50                   	push   eax
c001199e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00119a1:	83 c4 20             	add    esp,0x20
c00119a4:	85 c0                	test   eax,eax
c00119a6:	89 c1                	mov    ecx,eax
c00119a8:	74 27                	je     c00119d1 <SysReadDir(regs*)+0x7a>
c00119aa:	31 d2                	xor    edx,edx
c00119ac:	83 f9 07             	cmp    ecx,0x7
c00119af:	b8 02 00 00 00       	mov    eax,0x2
c00119b4:	75 16                	jne    c00119cc <SysReadDir(regs*)+0x75>
c00119b6:	b8 01 00 00 00       	mov    eax,0x1
c00119bb:	31 d2                	xor    edx,edx
c00119bd:	83 c4 18             	add    esp,0x18
c00119c0:	5b                   	pop    ebx
c00119c1:	c3                   	ret    
c00119c2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00119c7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00119cc:	83 c4 18             	add    esp,0x18
c00119cf:	5b                   	pop    ebx
c00119d0:	c3                   	ret    
c00119d1:	31 c0                	xor    eax,eax
c00119d3:	31 d2                	xor    edx,edx
c00119d5:	eb e6                	jmp    c00119bd <SysReadDir(regs*)+0x66>

c00119d7 <SysIsATTY(regs*)>:
c00119d7:	83 ec 0c             	sub    esp,0xc
c00119da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119de:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00119e1:	83 f8 02             	cmp    eax,0x2
c00119e4:	76 07                	jbe    c00119ed <SysIsATTY(regs*)+0x16>
c00119e6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00119eb:	75 26                	jne    c0011a13 <SysIsATTY(regs*)+0x3c>
c00119ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119f2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119f5:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00119fb:	85 c0                	test   eax,eax
c00119fd:	74 24                	je     c0011a23 <SysIsATTY(regs*)+0x4c>
c00119ff:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a01:	83 ec 0c             	sub    esp,0xc
c0011a04:	50                   	push   eax
c0011a05:	ff 12                	call   DWORD PTR [edx]
c0011a07:	83 c4 10             	add    esp,0x10
c0011a0a:	31 d2                	xor    edx,edx
c0011a0c:	83 c4 0c             	add    esp,0xc
c0011a0f:	0f b6 c0             	movzx  eax,al
c0011a12:	c3                   	ret    
c0011a13:	83 ec 0c             	sub    esp,0xc
c0011a16:	50                   	push   eax
c0011a17:	e8 f5 1c 00 00       	call   c0013711 <KeGetFileFromDescriptor(int)>
c0011a1c:	83 c4 10             	add    esp,0x10
c0011a1f:	85 c0                	test   eax,eax
c0011a21:	75 dc                	jne    c00119ff <SysIsATTY(regs*)+0x28>
c0011a23:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a28:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a2d:	83 c4 0c             	add    esp,0xc
c0011a30:	c3                   	ret    

c0011a31 <SysSeek(regs*)>:
c0011a31:	53                   	push   ebx
c0011a32:	83 ec 08             	sub    esp,0x8
c0011a35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a39:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a3c:	8d 50 fd             	lea    edx,[eax-0x3]
c0011a3f:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011a45:	77 39                	ja     c0011a80 <SysSeek(regs*)+0x4f>
c0011a47:	83 ec 0c             	sub    esp,0xc
c0011a4a:	50                   	push   eax
c0011a4b:	e8 c1 1c 00 00       	call   c0013711 <KeGetFileFromDescriptor(int)>
c0011a50:	83 c4 10             	add    esp,0x10
c0011a53:	85 c0                	test   eax,eax
c0011a55:	74 29                	je     c0011a80 <SysSeek(regs*)+0x4f>
c0011a57:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011a5a:	83 ec 04             	sub    esp,0x4
c0011a5d:	31 db                	xor    ebx,ebx
c0011a5f:	53                   	push   ebx
c0011a60:	51                   	push   ecx
c0011a61:	50                   	push   eax
c0011a62:	e8 49 70 ff ff       	call   c0008ab0 <File::seek(unsigned long long)>
c0011a67:	83 c4 10             	add    esp,0x10
c0011a6a:	85 c0                	test   eax,eax
c0011a6c:	0f 95 c0             	setne  al
c0011a6f:	31 d2                	xor    edx,edx
c0011a71:	0f b6 c0             	movzx  eax,al
c0011a74:	f7 d8                	neg    eax
c0011a76:	83 d2 00             	adc    edx,0x0
c0011a79:	83 c4 08             	add    esp,0x8
c0011a7c:	5b                   	pop    ebx
c0011a7d:	f7 da                	neg    edx
c0011a7f:	c3                   	ret    
c0011a80:	83 c4 08             	add    esp,0x8
c0011a83:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a88:	5b                   	pop    ebx
c0011a89:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a8e:	c3                   	ret    

c0011a8f <SysTell(regs*)>:
c0011a8f:	53                   	push   ebx
c0011a90:	83 ec 08             	sub    esp,0x8
c0011a93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a97:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a9a:	83 f8 02             	cmp    eax,0x2
c0011a9d:	76 56                	jbe    c0011af5 <SysTell(regs*)+0x66>
c0011a9f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011aa4:	76 19                	jbe    c0011abf <SysTell(regs*)+0x30>
c0011aa6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011aa9:	31 d2                	xor    edx,edx
c0011aab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011ab1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011ab8:	83 c4 08             	add    esp,0x8
c0011abb:	31 c0                	xor    eax,eax
c0011abd:	5b                   	pop    ebx
c0011abe:	c3                   	ret    
c0011abf:	83 ec 0c             	sub    esp,0xc
c0011ac2:	50                   	push   eax
c0011ac3:	e8 49 1c 00 00       	call   c0013711 <KeGetFileFromDescriptor(int)>
c0011ac8:	83 c4 10             	add    esp,0x10
c0011acb:	85 c0                	test   eax,eax
c0011acd:	74 26                	je     c0011af5 <SysTell(regs*)+0x66>
c0011acf:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011ad2:	83 ec 08             	sub    esp,0x8
c0011ad5:	52                   	push   edx
c0011ad6:	50                   	push   eax
c0011ad7:	e8 80 70 ff ff       	call   c0008b5c <File::tell(unsigned long long*)>
c0011adc:	83 c4 10             	add    esp,0x10
c0011adf:	85 c0                	test   eax,eax
c0011ae1:	0f 95 c0             	setne  al
c0011ae4:	31 d2                	xor    edx,edx
c0011ae6:	0f b6 c0             	movzx  eax,al
c0011ae9:	f7 d8                	neg    eax
c0011aeb:	83 d2 00             	adc    edx,0x0
c0011aee:	83 c4 08             	add    esp,0x8
c0011af1:	5b                   	pop    ebx
c0011af2:	f7 da                	neg    edx
c0011af4:	c3                   	ret    
c0011af5:	83 c4 08             	add    esp,0x8
c0011af8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011afd:	5b                   	pop    ebx
c0011afe:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b03:	c3                   	ret    

c0011b04 <SysSize(regs*)>:
c0011b04:	53                   	push   ebx
c0011b05:	83 ec 18             	sub    esp,0x18
c0011b08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b0c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b0f:	83 f8 02             	cmp    eax,0x2
c0011b12:	76 5b                	jbe    c0011b6f <SysSize(regs*)+0x6b>
c0011b14:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011b19:	76 19                	jbe    c0011b34 <SysSize(regs*)+0x30>
c0011b1b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011b1e:	31 d2                	xor    edx,edx
c0011b20:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011b26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011b2d:	83 c4 18             	add    esp,0x18
c0011b30:	31 c0                	xor    eax,eax
c0011b32:	5b                   	pop    ebx
c0011b33:	c3                   	ret    
c0011b34:	83 ec 0c             	sub    esp,0xc
c0011b37:	50                   	push   eax
c0011b38:	e8 d4 1b 00 00       	call   c0013711 <KeGetFileFromDescriptor(int)>
c0011b3d:	83 c4 10             	add    esp,0x10
c0011b40:	85 c0                	test   eax,eax
c0011b42:	74 2b                	je     c0011b6f <SysSize(regs*)+0x6b>
c0011b44:	83 ec 04             	sub    esp,0x4
c0011b47:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011b4b:	52                   	push   edx
c0011b4c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011b4f:	52                   	push   edx
c0011b50:	50                   	push   eax
c0011b51:	e8 9e 71 ff ff       	call   c0008cf4 <File::stat(unsigned long long*, bool*)>
c0011b56:	83 c4 10             	add    esp,0x10
c0011b59:	85 c0                	test   eax,eax
c0011b5b:	0f 95 c0             	setne  al
c0011b5e:	31 d2                	xor    edx,edx
c0011b60:	0f b6 c0             	movzx  eax,al
c0011b63:	f7 d8                	neg    eax
c0011b65:	83 d2 00             	adc    edx,0x0
c0011b68:	83 c4 18             	add    esp,0x18
c0011b6b:	5b                   	pop    ebx
c0011b6c:	f7 da                	neg    edx
c0011b6e:	c3                   	ret    
c0011b6f:	83 c4 18             	add    esp,0x18
c0011b72:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b77:	5b                   	pop    ebx
c0011b78:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b7d:	c3                   	ret    

c0011b7e <SysSizeFromFilename(regs*)>:
c0011b7e:	55                   	push   ebp
c0011b7f:	57                   	push   edi
c0011b80:	56                   	push   esi
c0011b81:	53                   	push   ebx
c0011b82:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011b88:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011b8f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011b92:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011b95:	85 f6                	test   esi,esi
c0011b97:	89 f8                	mov    eax,edi
c0011b99:	74 09                	je     c0011ba4 <SysSizeFromFilename(regs*)+0x26>
c0011b9b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011ba1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011ba4:	83 f8 02             	cmp    eax,0x2
c0011ba7:	0f 86 c9 00 00 00    	jbe    c0011c76 <SysSizeFromFilename(regs*)+0xf8>
c0011bad:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011bb2:	76 1f                	jbe    c0011bd3 <SysSizeFromFilename(regs*)+0x55>
c0011bb4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011bb7:	31 d2                	xor    edx,edx
c0011bb9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011bbf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011bc6:	31 c0                	xor    eax,eax
c0011bc8:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011bce:	5b                   	pop    ebx
c0011bcf:	5e                   	pop    esi
c0011bd0:	5f                   	pop    edi
c0011bd1:	5d                   	pop    ebp
c0011bd2:	c3                   	ret    
c0011bd3:	83 ec 0c             	sub    esp,0xc
c0011bd6:	68 14 01 00 00       	push   0x114
c0011bdb:	e8 f4 e2 ff ff       	call   c000fed4 <malloc>
c0011be0:	6a 01                	push   0x1
c0011be2:	89 c5                	mov    ebp,eax
c0011be4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011be9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011bec:	50                   	push   eax
c0011bed:	57                   	push   edi
c0011bee:	55                   	push   ebp
c0011bef:	e8 e2 6c ff ff       	call   c00088d6 <File::File(char const*, Process*, bool)>
c0011bf4:	83 c4 20             	add    esp,0x20
c0011bf7:	85 ed                	test   ebp,ebp
c0011bf9:	74 7b                	je     c0011c76 <SysSizeFromFilename(regs*)+0xf8>
c0011bfb:	83 ec 04             	sub    esp,0x4
c0011bfe:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011c02:	50                   	push   eax
c0011c03:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011c06:	51                   	push   ecx
c0011c07:	55                   	push   ebp
c0011c08:	e8 e7 70 ff ff       	call   c0008cf4 <File::stat(unsigned long long*, bool*)>
c0011c0d:	89 c3                	mov    ebx,eax
c0011c0f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011c12:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011c15:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011c18:	83 c4 10             	add    esp,0x10
c0011c1b:	85 db                	test   ebx,ebx
c0011c1d:	75 57                	jne    c0011c76 <SysSizeFromFilename(regs*)+0xf8>
c0011c1f:	6a 00                	push   0x0
c0011c21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c26:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c29:	05 0c 01 00 00       	add    eax,0x10c
c0011c2e:	50                   	push   eax
c0011c2f:	57                   	push   edi
c0011c30:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0011c37:	53                   	push   ebx
c0011c38:	e8 6b 6a ff ff       	call   c00086a8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011c3d:	58                   	pop    eax
c0011c3e:	5a                   	pop    edx
c0011c3f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011c43:	50                   	push   eax
c0011c44:	53                   	push   ebx
c0011c45:	e8 e4 64 ff ff       	call   c000812e <KeDereferenceSymlink(char const*, char*)>
c0011c4a:	83 c4 10             	add    esp,0x10
c0011c4d:	ba 00 00 00 00       	mov    edx,0x0
c0011c52:	83 f8 01             	cmp    eax,0x1
c0011c55:	b8 00 00 00 00       	mov    eax,0x0
c0011c5a:	74 2f                	je     c0011c8b <SysSizeFromFilename(regs*)+0x10d>
c0011c5c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011c61:	74 3b                	je     c0011c9e <SysSizeFromFilename(regs*)+0x120>
c0011c63:	85 f6                	test   esi,esi
c0011c65:	0f 84 5d ff ff ff    	je     c0011bc8 <SysSizeFromFilename(regs*)+0x4a>
c0011c6b:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011c71:	e9 52 ff ff ff       	jmp    c0011bc8 <SysSizeFromFilename(regs*)+0x4a>
c0011c76:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011c7c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c81:	5b                   	pop    ebx
c0011c82:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c87:	5e                   	pop    esi
c0011c88:	5f                   	pop    edi
c0011c89:	5d                   	pop    ebp
c0011c8a:	c3                   	ret    
c0011c8b:	85 f6                	test   esi,esi
c0011c8d:	0f 84 35 ff ff ff    	je     c0011bc8 <SysSizeFromFilename(regs*)+0x4a>
c0011c93:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011c99:	e9 2a ff ff ff       	jmp    c0011bc8 <SysSizeFromFilename(regs*)+0x4a>
c0011c9e:	85 f6                	test   esi,esi
c0011ca0:	0f 84 22 ff ff ff    	je     c0011bc8 <SysSizeFromFilename(regs*)+0x4a>
c0011ca6:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011cac:	e9 17 ff ff ff       	jmp    c0011bc8 <SysSizeFromFilename(regs*)+0x4a>

c0011cb1 <SysSizeFromFilenameNoSymlink(regs*)>:
c0011cb1:	55                   	push   ebp
c0011cb2:	57                   	push   edi
c0011cb3:	56                   	push   esi
c0011cb4:	53                   	push   ebx
c0011cb5:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011cbb:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011cc2:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011cc5:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011cc8:	85 f6                	test   esi,esi
c0011cca:	89 f8                	mov    eax,edi
c0011ccc:	74 09                	je     c0011cd7 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c0011cce:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011cd4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011cd7:	83 f8 02             	cmp    eax,0x2
c0011cda:	0f 86 c9 00 00 00    	jbe    c0011da9 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c0011ce0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011ce5:	76 1f                	jbe    c0011d06 <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c0011ce7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011cea:	31 d2                	xor    edx,edx
c0011cec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011cf2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011cf9:	31 c0                	xor    eax,eax
c0011cfb:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011d01:	5b                   	pop    ebx
c0011d02:	5e                   	pop    esi
c0011d03:	5f                   	pop    edi
c0011d04:	5d                   	pop    ebp
c0011d05:	c3                   	ret    
c0011d06:	83 ec 0c             	sub    esp,0xc
c0011d09:	68 14 01 00 00       	push   0x114
c0011d0e:	e8 c1 e1 ff ff       	call   c000fed4 <malloc>
c0011d13:	6a 00                	push   0x0
c0011d15:	89 c5                	mov    ebp,eax
c0011d17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d1c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d1f:	50                   	push   eax
c0011d20:	57                   	push   edi
c0011d21:	55                   	push   ebp
c0011d22:	e8 af 6b ff ff       	call   c00088d6 <File::File(char const*, Process*, bool)>
c0011d27:	83 c4 20             	add    esp,0x20
c0011d2a:	85 ed                	test   ebp,ebp
c0011d2c:	74 7b                	je     c0011da9 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c0011d2e:	83 ec 04             	sub    esp,0x4
c0011d31:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011d35:	50                   	push   eax
c0011d36:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011d39:	51                   	push   ecx
c0011d3a:	55                   	push   ebp
c0011d3b:	e8 b4 6f ff ff       	call   c0008cf4 <File::stat(unsigned long long*, bool*)>
c0011d40:	89 c3                	mov    ebx,eax
c0011d42:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011d45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011d48:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d4b:	83 c4 10             	add    esp,0x10
c0011d4e:	85 db                	test   ebx,ebx
c0011d50:	75 57                	jne    c0011da9 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c0011d52:	6a 00                	push   0x0
c0011d54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d59:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d5c:	05 0c 01 00 00       	add    eax,0x10c
c0011d61:	50                   	push   eax
c0011d62:	57                   	push   edi
c0011d63:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0011d6a:	53                   	push   ebx
c0011d6b:	e8 38 69 ff ff       	call   c00086a8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011d70:	58                   	pop    eax
c0011d71:	5a                   	pop    edx
c0011d72:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011d76:	50                   	push   eax
c0011d77:	53                   	push   ebx
c0011d78:	e8 b1 63 ff ff       	call   c000812e <KeDereferenceSymlink(char const*, char*)>
c0011d7d:	83 c4 10             	add    esp,0x10
c0011d80:	ba 00 00 00 00       	mov    edx,0x0
c0011d85:	83 f8 01             	cmp    eax,0x1
c0011d88:	b8 00 00 00 00       	mov    eax,0x0
c0011d8d:	74 2f                	je     c0011dbe <SysSizeFromFilenameNoSymlink(regs*)+0x10d>
c0011d8f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011d94:	74 3b                	je     c0011dd1 <SysSizeFromFilenameNoSymlink(regs*)+0x120>
c0011d96:	85 f6                	test   esi,esi
c0011d98:	0f 84 5d ff ff ff    	je     c0011cfb <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011d9e:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011da4:	e9 52 ff ff ff       	jmp    c0011cfb <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011da9:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011daf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011db4:	5b                   	pop    ebx
c0011db5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011dba:	5e                   	pop    esi
c0011dbb:	5f                   	pop    edi
c0011dbc:	5d                   	pop    ebp
c0011dbd:	c3                   	ret    
c0011dbe:	85 f6                	test   esi,esi
c0011dc0:	0f 84 35 ff ff ff    	je     c0011cfb <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011dc6:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011dcc:	e9 2a ff ff ff       	jmp    c0011cfb <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011dd1:	85 f6                	test   esi,esi
c0011dd3:	0f 84 22 ff ff ff    	je     c0011cfb <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011dd9:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011ddf:	e9 17 ff ff ff       	jmp    c0011cfb <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c0011de4 <SysClose(regs*)>:
c0011de4:	57                   	push   edi
c0011de5:	56                   	push   esi
c0011de6:	53                   	push   ebx
c0011de7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011deb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011dee:	83 f8 02             	cmp    eax,0x2
c0011df1:	76 44                	jbe    c0011e37 <SysClose(regs*)+0x53>
c0011df3:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011df9:	31 f6                	xor    esi,esi
c0011dfb:	31 ff                	xor    edi,edi
c0011dfd:	83 fa 01             	cmp    edx,0x1
c0011e00:	76 2d                	jbe    c0011e2f <SysClose(regs*)+0x4b>
c0011e02:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011e07:	77 2e                	ja     c0011e37 <SysClose(regs*)+0x53>
c0011e09:	83 ec 0c             	sub    esp,0xc
c0011e0c:	50                   	push   eax
c0011e0d:	e8 ff 18 00 00       	call   c0013711 <KeGetFileFromDescriptor(int)>
c0011e12:	83 c4 10             	add    esp,0x10
c0011e15:	85 c0                	test   eax,eax
c0011e17:	89 c3                	mov    ebx,eax
c0011e19:	74 1c                	je     c0011e37 <SysClose(regs*)+0x53>
c0011e1b:	83 ec 0c             	sub    esp,0xc
c0011e1e:	50                   	push   eax
c0011e1f:	e8 2c 6c ff ff       	call   c0008a50 <File::close()>
c0011e24:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011e29:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e2c:	83 c4 10             	add    esp,0x10
c0011e2f:	5b                   	pop    ebx
c0011e30:	89 f0                	mov    eax,esi
c0011e32:	89 fa                	mov    edx,edi
c0011e34:	5e                   	pop    esi
c0011e35:	5f                   	pop    edi
c0011e36:	c3                   	ret    
c0011e37:	5b                   	pop    ebx
c0011e38:	be ff ff ff ff       	mov    esi,0xffffffff
c0011e3d:	89 f0                	mov    eax,esi
c0011e3f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011e44:	89 fa                	mov    edx,edi
c0011e46:	5e                   	pop    esi
c0011e47:	5f                   	pop    edi
c0011e48:	c3                   	ret    

c0011e49 <SysOpenDir(regs*)>:
c0011e49:	56                   	push   esi
c0011e4a:	53                   	push   ebx
c0011e4b:	83 ec 04             	sub    esp,0x4
c0011e4e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011e52:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011e55:	85 c9                	test   ecx,ecx
c0011e57:	74 5d                	je     c0011eb6 <SysOpenDir(regs*)+0x6d>
c0011e59:	83 ec 0c             	sub    esp,0xc
c0011e5c:	68 14 01 00 00       	push   0x114
c0011e61:	e8 6e e0 ff ff       	call   c000fed4 <malloc>
c0011e66:	83 c4 0c             	add    esp,0xc
c0011e69:	89 c6                	mov    esi,eax
c0011e6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e70:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e73:	50                   	push   eax
c0011e74:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011e77:	52                   	push   edx
c0011e78:	56                   	push   esi
c0011e79:	e8 36 70 ff ff       	call   c0008eb4 <Directory::Directory(char const*, Process*)>
c0011e7e:	83 c4 10             	add    esp,0x10
c0011e81:	85 f6                	test   esi,esi
c0011e83:	74 31                	je     c0011eb6 <SysOpenDir(regs*)+0x6d>
c0011e85:	83 ec 0c             	sub    esp,0xc
c0011e88:	56                   	push   esi
c0011e89:	e8 ee 70 ff ff       	call   c0008f7c <Directory::open()>
c0011e8e:	83 c4 10             	add    esp,0x10
c0011e91:	85 c0                	test   eax,eax
c0011e93:	75 21                	jne    c0011eb6 <SysOpenDir(regs*)+0x6d>
c0011e95:	83 ec 0c             	sub    esp,0xc
c0011e98:	56                   	push   esi
c0011e99:	e8 76 15 00 00       	call   c0013414 <UnixFile::getFileDescriptor()>
c0011e9e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011ea1:	83 c4 10             	add    esp,0x10
c0011ea4:	89 02                	mov    DWORD PTR [edx],eax
c0011ea6:	c1 f8 1f             	sar    eax,0x1f
c0011ea9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011eac:	83 c4 04             	add    esp,0x4
c0011eaf:	31 c0                	xor    eax,eax
c0011eb1:	5b                   	pop    ebx
c0011eb2:	31 d2                	xor    edx,edx
c0011eb4:	5e                   	pop    esi
c0011eb5:	c3                   	ret    
c0011eb6:	83 c4 04             	add    esp,0x4
c0011eb9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ebe:	5b                   	pop    ebx
c0011ebf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ec4:	5e                   	pop    esi
c0011ec5:	c3                   	ret    

c0011ec6 <SysMakeDir(regs*)>:
c0011ec6:	56                   	push   esi
c0011ec7:	53                   	push   ebx
c0011ec8:	83 ec 10             	sub    esp,0x10
c0011ecb:	68 14 01 00 00       	push   0x114
c0011ed0:	e8 ff df ff ff       	call   c000fed4 <malloc>
c0011ed5:	83 c4 0c             	add    esp,0xc
c0011ed8:	89 c3                	mov    ebx,eax
c0011eda:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011edf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ee2:	50                   	push   eax
c0011ee3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ee7:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011eea:	52                   	push   edx
c0011eeb:	53                   	push   ebx
c0011eec:	e8 c3 6f ff ff       	call   c0008eb4 <Directory::Directory(char const*, Process*)>
c0011ef1:	83 c4 10             	add    esp,0x10
c0011ef4:	85 db                	test   ebx,ebx
c0011ef6:	74 2c                	je     c0011f24 <SysMakeDir(regs*)+0x5e>
c0011ef8:	83 ec 0c             	sub    esp,0xc
c0011efb:	53                   	push   ebx
c0011efc:	e8 5b 72 ff ff       	call   c000915c <Directory::create()>
c0011f01:	89 c6                	mov    esi,eax
c0011f03:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f05:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011f08:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f0b:	83 c4 10             	add    esp,0x10
c0011f0e:	31 c0                	xor    eax,eax
c0011f10:	85 f6                	test   esi,esi
c0011f12:	0f 95 c0             	setne  al
c0011f15:	31 d2                	xor    edx,edx
c0011f17:	f7 d8                	neg    eax
c0011f19:	83 d2 00             	adc    edx,0x0
c0011f1c:	83 c4 04             	add    esp,0x4
c0011f1f:	5b                   	pop    ebx
c0011f20:	f7 da                	neg    edx
c0011f22:	5e                   	pop    esi
c0011f23:	c3                   	ret    
c0011f24:	83 c4 04             	add    esp,0x4
c0011f27:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f2c:	5b                   	pop    ebx
c0011f2d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f32:	5e                   	pop    esi
c0011f33:	c3                   	ret    

c0011f34 <SysCloseDir(regs*)>:
c0011f34:	53                   	push   ebx
c0011f35:	83 ec 08             	sub    esp,0x8
c0011f38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f3c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f3f:	8d 50 fd             	lea    edx,[eax-0x3]
c0011f42:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011f48:	77 2f                	ja     c0011f79 <SysCloseDir(regs*)+0x45>
c0011f4a:	83 ec 0c             	sub    esp,0xc
c0011f4d:	50                   	push   eax
c0011f4e:	e8 be 17 00 00       	call   c0013711 <KeGetFileFromDescriptor(int)>
c0011f53:	83 c4 10             	add    esp,0x10
c0011f56:	85 c0                	test   eax,eax
c0011f58:	89 c3                	mov    ebx,eax
c0011f5a:	74 1d                	je     c0011f79 <SysCloseDir(regs*)+0x45>
c0011f5c:	83 ec 0c             	sub    esp,0xc
c0011f5f:	50                   	push   eax
c0011f60:	e8 73 70 ff ff       	call   c0008fd8 <Directory::close()>
c0011f65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f67:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011f6a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f6d:	83 c4 10             	add    esp,0x10
c0011f70:	31 c0                	xor    eax,eax
c0011f72:	83 c4 08             	add    esp,0x8
c0011f75:	31 d2                	xor    edx,edx
c0011f77:	5b                   	pop    ebx
c0011f78:	c3                   	ret    
c0011f79:	83 c4 08             	add    esp,0x8
c0011f7c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f81:	5b                   	pop    ebx
c0011f82:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f87:	c3                   	ret    

c0011f88 <SysWait(regs*)>:
c0011f88:	83 ec 10             	sub    esp,0x10
c0011f8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011f8f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011f92:	52                   	push   edx
c0011f93:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011f96:	51                   	push   ecx
c0011f97:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f9a:	50                   	push   eax
c0011f9b:	e8 0c 50 00 00       	call   c0016fac <waitTask(int, int*, int)>
c0011fa0:	83 c4 1c             	add    esp,0x1c
c0011fa3:	89 c2                	mov    edx,eax
c0011fa5:	c1 fa 1f             	sar    edx,0x1f
c0011fa8:	c3                   	ret    

c0011fa9 <SysNotImpl(regs*)>:
c0011fa9:	83 ec 18             	sub    esp,0x18
c0011fac:	68 07 a0 02 c0       	push   0xc002a007
c0011fb1:	e8 72 e3 ff ff       	call   c0010328 <KePanic(char const*)>
c0011fb6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fbb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fc0:	83 c4 1c             	add    esp,0x1c
c0011fc3:	c3                   	ret    

c0011fc4 <SysPanic(regs*)>:
c0011fc4:	83 ec 18             	sub    esp,0x18
c0011fc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011fcb:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011fce:	50                   	push   eax
c0011fcf:	e8 54 e3 ff ff       	call   c0010328 <KePanic(char const*)>
c0011fd4:	b8 01 00 00 00       	mov    eax,0x1
c0011fd9:	31 d2                	xor    edx,edx
c0011fdb:	83 c4 1c             	add    esp,0x1c
c0011fde:	c3                   	ret    

c0011fdf <SysRmdir(regs*)>:
c0011fdf:	56                   	push   esi
c0011fe0:	53                   	push   ebx
c0011fe1:	83 ec 10             	sub    esp,0x10
c0011fe4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011fe8:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011feb:	68 14 01 00 00       	push   0x114
c0011ff0:	e8 df de ff ff       	call   c000fed4 <malloc>
c0011ff5:	6a 00                	push   0x0
c0011ff7:	89 c3                	mov    ebx,eax
c0011ff9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ffe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012001:	50                   	push   eax
c0012002:	56                   	push   esi
c0012003:	53                   	push   ebx
c0012004:	e8 cd 68 ff ff       	call   c00088d6 <File::File(char const*, Process*, bool)>
c0012009:	83 c4 14             	add    esp,0x14
c001200c:	53                   	push   ebx
c001200d:	e8 ae 6b ff ff       	call   c0008bc0 <File::unlink()>
c0012012:	83 c4 10             	add    esp,0x10
c0012015:	85 db                	test   ebx,ebx
c0012017:	89 c6                	mov    esi,eax
c0012019:	74 0c                	je     c0012027 <SysRmdir(regs*)+0x48>
c001201b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001201d:	83 ec 0c             	sub    esp,0xc
c0012020:	53                   	push   ebx
c0012021:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012024:	83 c4 10             	add    esp,0x10
c0012027:	31 c0                	xor    eax,eax
c0012029:	85 f6                	test   esi,esi
c001202b:	0f 95 c0             	setne  al
c001202e:	31 d2                	xor    edx,edx
c0012030:	f7 d8                	neg    eax
c0012032:	83 d2 00             	adc    edx,0x0
c0012035:	83 c4 04             	add    esp,0x4
c0012038:	5b                   	pop    ebx
c0012039:	f7 da                	neg    edx
c001203b:	5e                   	pop    esi
c001203c:	c3                   	ret    

c001203d <SysUnlink(regs*)>:
c001203d:	56                   	push   esi
c001203e:	53                   	push   ebx
c001203f:	83 ec 10             	sub    esp,0x10
c0012042:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012046:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012049:	68 14 01 00 00       	push   0x114
c001204e:	e8 81 de ff ff       	call   c000fed4 <malloc>
c0012053:	6a 00                	push   0x0
c0012055:	89 c3                	mov    ebx,eax
c0012057:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001205c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001205f:	50                   	push   eax
c0012060:	56                   	push   esi
c0012061:	53                   	push   ebx
c0012062:	e8 6f 68 ff ff       	call   c00088d6 <File::File(char const*, Process*, bool)>
c0012067:	83 c4 14             	add    esp,0x14
c001206a:	53                   	push   ebx
c001206b:	e8 50 6b ff ff       	call   c0008bc0 <File::unlink()>
c0012070:	83 c4 10             	add    esp,0x10
c0012073:	85 db                	test   ebx,ebx
c0012075:	89 c6                	mov    esi,eax
c0012077:	74 0c                	je     c0012085 <SysUnlink(regs*)+0x48>
c0012079:	8b 03                	mov    eax,DWORD PTR [ebx]
c001207b:	83 ec 0c             	sub    esp,0xc
c001207e:	53                   	push   ebx
c001207f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012082:	83 c4 10             	add    esp,0x10
c0012085:	31 c0                	xor    eax,eax
c0012087:	85 f6                	test   esi,esi
c0012089:	0f 95 c0             	setne  al
c001208c:	31 d2                	xor    edx,edx
c001208e:	f7 d8                	neg    eax
c0012090:	83 d2 00             	adc    edx,0x0
c0012093:	83 c4 04             	add    esp,0x4
c0012096:	5b                   	pop    ebx
c0012097:	f7 da                	neg    edx
c0012099:	5e                   	pop    esi
c001209a:	c3                   	ret    

c001209b <SysGetArgv(regs*)>:
c001209b:	83 ec 0c             	sub    esp,0xc
c001209e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00120a2:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00120a5:	85 c0                	test   eax,eax
c00120a7:	78 2c                	js     c00120d5 <SysGetArgv(regs*)+0x3a>
c00120a9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00120af:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00120b2:	3b 81 b6 05 00 00    	cmp    eax,DWORD PTR [ecx+0x5b6]
c00120b8:	7d 1b                	jge    c00120d5 <SysGetArgv(regs*)+0x3a>
c00120ba:	8b 84 81 ba 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x5ba]
c00120c1:	85 c0                	test   eax,eax
c00120c3:	74 18                	je     c00120dd <SysGetArgv(regs*)+0x42>
c00120c5:	83 ec 08             	sub    esp,0x8
c00120c8:	50                   	push   eax
c00120c9:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00120cc:	50                   	push   eax
c00120cd:	e8 7e e5 fe ff       	call   c0000650 <strcpy>
c00120d2:	83 c4 10             	add    esp,0x10
c00120d5:	31 c0                	xor    eax,eax
c00120d7:	31 d2                	xor    edx,edx
c00120d9:	83 c4 0c             	add    esp,0xc
c00120dc:	c3                   	ret    
c00120dd:	b8 01 00 00 00       	mov    eax,0x1
c00120e2:	31 d2                	xor    edx,edx
c00120e4:	83 c4 0c             	add    esp,0xc
c00120e7:	c3                   	ret    

c00120e8 <SysUSleep(regs*)>:
c00120e8:	83 ec 1c             	sub    esp,0x1c
c00120eb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00120ef:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00120f2:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00120f5:	6a 00                	push   0x0
c00120f7:	6a 64                	push   0x64
c00120f9:	52                   	push   edx
c00120fa:	50                   	push   eax
c00120fb:	e8 a4 0b 01 00       	call   c0022ca4 <__udivdi3>
c0012100:	83 c4 18             	add    esp,0x18
c0012103:	52                   	push   edx
c0012104:	50                   	push   eax
c0012105:	e8 9a 4f 00 00       	call   c00170a4 <milliTenthSleep(unsigned long long)>
c001210a:	31 c0                	xor    eax,eax
c001210c:	31 d2                	xor    edx,edx
c001210e:	83 c4 1c             	add    esp,0x1c
c0012111:	c3                   	ret    

c0012112 <SysSpawn(regs*)>:
c0012112:	56                   	push   esi
c0012113:	53                   	push   ebx
c0012114:	83 ec 04             	sub    esp,0x4
c0012117:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001211b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001211e:	85 f6                	test   esi,esi
c0012120:	75 0a                	jne    c001212c <SysSpawn(regs*)+0x1a>
c0012122:	83 c4 04             	add    esp,0x4
c0012125:	31 c0                	xor    eax,eax
c0012127:	5b                   	pop    ebx
c0012128:	31 d2                	xor    edx,edx
c001212a:	5e                   	pop    esi
c001212b:	c3                   	ret    
c001212c:	83 ec 0c             	sub    esp,0xc
c001212f:	68 c4 07 00 00       	push   0x7c4
c0012134:	e8 9b dd ff ff       	call   c000fed4 <malloc>
c0012139:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001213c:	83 c4 10             	add    esp,0x10
c001213f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012142:	89 c6                	mov    esi,eax
c0012144:	31 c0                	xor    eax,eax
c0012146:	85 c9                	test   ecx,ecx
c0012148:	74 08                	je     c0012152 <SysSpawn(regs*)+0x40>
c001214a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001214f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012152:	52                   	push   edx
c0012153:	50                   	push   eax
c0012154:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012157:	50                   	push   eax
c0012158:	56                   	push   esi
c0012159:	e8 26 46 00 00       	call   c0016784 <Process::Process(char const*, Process*, char**)>
c001215e:	83 c4 10             	add    esp,0x10
c0012161:	80 be be 07 00 00 00 	cmp    BYTE PTR [esi+0x7be],0x0
c0012168:	75 b8                	jne    c0012122 <SysSpawn(regs*)+0x10>
c001216a:	83 ec 0c             	sub    esp,0xc
c001216d:	56                   	push   esi
c001216e:	e8 d5 4b 00 00       	call   c0016d48 <Process::createUserThread()>
c0012173:	8b 06                	mov    eax,DWORD PTR [esi]
c0012175:	83 c4 10             	add    esp,0x10
c0012178:	83 c4 04             	add    esp,0x4
c001217b:	5b                   	pop    ebx
c001217c:	89 c2                	mov    edx,eax
c001217e:	c1 fa 1f             	sar    edx,0x1f
c0012181:	5e                   	pop    esi
c0012182:	c3                   	ret    

c0012183 <SysGetEnv(regs*)>:
c0012183:	57                   	push   edi
c0012184:	56                   	push   esi
c0012185:	53                   	push   ebx
c0012186:	83 ec 1c             	sub    esp,0x1c
c0012189:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001218e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012192:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0012195:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012198:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001219b:	51                   	push   ecx
c001219c:	e8 26 cc ff ff       	call   c000edc7 <KeGetProcessTotalEnvCount(Process*)>
c00121a1:	83 c4 10             	add    esp,0x10
c00121a4:	39 c7                	cmp    edi,eax
c00121a6:	7c 12                	jl     c00121ba <SysGetEnv(regs*)+0x37>
c00121a8:	31 c0                	xor    eax,eax
c00121aa:	31 d2                	xor    edx,edx
c00121ac:	85 f6                	test   esi,esi
c00121ae:	74 03                	je     c00121b3 <SysGetEnv(regs*)+0x30>
c00121b0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00121b3:	83 c4 10             	add    esp,0x10
c00121b6:	5b                   	pop    ebx
c00121b7:	5e                   	pop    esi
c00121b8:	5f                   	pop    edi
c00121b9:	c3                   	ret    
c00121ba:	8d 44 24 08          	lea    eax,[esp+0x8]
c00121be:	83 ec 04             	sub    esp,0x4
c00121c1:	57                   	push   edi
c00121c2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00121c8:	8b 7a 40             	mov    edi,DWORD PTR [edx+0x40]
c00121cb:	57                   	push   edi
c00121cc:	50                   	push   eax
c00121cd:	e8 15 cc ff ff       	call   c000ede7 <KeGetProcessEnvPair(Process*, int)>
c00121d2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00121d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121d9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00121dd:	83 c4 0c             	add    esp,0xc
c00121e0:	85 d2                	test   edx,edx
c00121e2:	75 23                	jne    c0012207 <SysGetEnv(regs*)+0x84>
c00121e4:	83 ec 0c             	sub    esp,0xc
c00121e7:	50                   	push   eax
c00121e8:	e8 93 e3 fe ff       	call   c0000580 <strlen>
c00121ed:	89 3c 24             	mov    DWORD PTR [esp],edi
c00121f0:	89 c3                	mov    ebx,eax
c00121f2:	e8 89 e3 fe ff       	call   c0000580 <strlen>
c00121f7:	83 c4 10             	add    esp,0x10
c00121fa:	31 d2                	xor    edx,edx
c00121fc:	83 c4 10             	add    esp,0x10
c00121ff:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012203:	5b                   	pop    ebx
c0012204:	5e                   	pop    esi
c0012205:	5f                   	pop    edi
c0012206:	c3                   	ret    
c0012207:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001220a:	83 ec 08             	sub    esp,0x8
c001220d:	50                   	push   eax
c001220e:	56                   	push   esi
c001220f:	e8 3c e4 fe ff       	call   c0000650 <strcpy>
c0012214:	58                   	pop    eax
c0012215:	5a                   	pop    edx
c0012216:	68 21 a0 02 c0       	push   0xc002a021
c001221b:	56                   	push   esi
c001221c:	e8 4f e6 fe ff       	call   c0000870 <strcat>
c0012221:	59                   	pop    ecx
c0012222:	5b                   	pop    ebx
c0012223:	57                   	push   edi
c0012224:	56                   	push   esi
c0012225:	e8 46 e6 fe ff       	call   c0000870 <strcat>
c001222a:	83 c4 10             	add    esp,0x10
c001222d:	31 c0                	xor    eax,eax
c001222f:	83 c4 10             	add    esp,0x10
c0012232:	31 d2                	xor    edx,edx
c0012234:	5b                   	pop    ebx
c0012235:	5e                   	pop    esi
c0012236:	5f                   	pop    edi
c0012237:	c3                   	ret    

c0012238 <SysSetFatAttrib(regs*)>:
c0012238:	57                   	push   edi
c0012239:	56                   	push   esi
c001223a:	53                   	push   ebx
c001223b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001223f:	83 ec 0c             	sub    esp,0xc
c0012242:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0012245:	68 14 01 00 00       	push   0x114
c001224a:	e8 85 dc ff ff       	call   c000fed4 <malloc>
c001224f:	83 c4 0c             	add    esp,0xc
c0012252:	89 c3                	mov    ebx,eax
c0012254:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012259:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001225c:	50                   	push   eax
c001225d:	57                   	push   edi
c001225e:	53                   	push   ebx
c001225f:	e8 70 67 ff ff       	call   c00089d4 <File::File(char const*, Process*)>
c0012264:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0012267:	83 c4 0c             	add    esp,0xc
c001226a:	0f b6 d4             	movzx  edx,ah
c001226d:	0f b6 c0             	movzx  eax,al
c0012270:	52                   	push   edx
c0012271:	50                   	push   eax
c0012272:	53                   	push   ebx
c0012273:	e8 e2 69 ff ff       	call   c0008c5a <File::chfatattr(unsigned char, unsigned char)>
c0012278:	83 c4 10             	add    esp,0x10
c001227b:	85 db                	test   ebx,ebx
c001227d:	89 c6                	mov    esi,eax
c001227f:	74 0c                	je     c001228d <SysSetFatAttrib(regs*)+0x55>
c0012281:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012283:	83 ec 0c             	sub    esp,0xc
c0012286:	53                   	push   ebx
c0012287:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001228a:	83 c4 10             	add    esp,0x10
c001228d:	5b                   	pop    ebx
c001228e:	31 c0                	xor    eax,eax
c0012290:	85 f6                	test   esi,esi
c0012292:	0f 95 c0             	setne  al
c0012295:	31 d2                	xor    edx,edx
c0012297:	5e                   	pop    esi
c0012298:	f7 d8                	neg    eax
c001229a:	83 d2 00             	adc    edx,0x0
c001229d:	f7 da                	neg    edx
c001229f:	5f                   	pop    edi
c00122a0:	c3                   	ret    

c00122a1 <SysShutdown(regs*)>:
c00122a1:	83 ec 1c             	sub    esp,0x1c
c00122a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122a8:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00122ab:	85 c9                	test   ecx,ecx
c00122ad:	74 18                	je     c00122c7 <SysShutdown(regs*)+0x26>
c00122af:	83 f9 01             	cmp    ecx,0x1
c00122b2:	74 26                	je     c00122da <SysShutdown(regs*)+0x39>
c00122b4:	83 f9 02             	cmp    ecx,0x2
c00122b7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00122bc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00122c1:	74 24                	je     c00122e7 <SysShutdown(regs*)+0x46>
c00122c3:	83 c4 1c             	add    esp,0x1c
c00122c6:	c3                   	ret    
c00122c7:	e8 aa e9 ff ff       	call   c0010c76 <KeShutdown()>
c00122cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00122d1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00122d6:	83 c4 1c             	add    esp,0x1c
c00122d9:	c3                   	ret    
c00122da:	e8 cd e9 ff ff       	call   c0010cac <KeSleep()>
c00122df:	31 c0                	xor    eax,eax
c00122e1:	31 d2                	xor    edx,edx
c00122e3:	83 c4 1c             	add    esp,0x1c
c00122e6:	c3                   	ret    
c00122e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122eb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00122ef:	e8 e8 e9 ff ff       	call   c0010cdc <KeRestart()>
c00122f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00122fc:	eb c5                	jmp    c00122c3 <SysShutdown(regs*)+0x22>

c00122fe <SysPipe(regs*)>:
c00122fe:	57                   	push   edi
c00122ff:	56                   	push   esi
c0012300:	53                   	push   ebx
c0012301:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012305:	83 ec 0c             	sub    esp,0xc
c0012308:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001230b:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001230e:	6a 20                	push   0x20
c0012310:	e8 bf db ff ff       	call   c000fed4 <malloc>
c0012315:	89 c3                	mov    ebx,eax
c0012317:	58                   	pop    eax
c0012318:	5a                   	pop    edx
c0012319:	68 00 50 00 00       	push   0x5000
c001231e:	53                   	push   ebx
c001231f:	e8 d2 e7 ff ff       	call   c0010af6 <Pipe::Pipe(int)>
c0012324:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012327:	e8 e8 10 00 00       	call   c0013414 <UnixFile::getFileDescriptor()>
c001232c:	89 07                	mov    DWORD PTR [edi],eax
c001232e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012331:	e8 de 10 00 00       	call   c0013414 <UnixFile::getFileDescriptor()>
c0012336:	83 c4 10             	add    esp,0x10
c0012339:	31 d2                	xor    edx,edx
c001233b:	89 06                	mov    DWORD PTR [esi],eax
c001233d:	31 c0                	xor    eax,eax
c001233f:	5b                   	pop    ebx
c0012340:	5e                   	pop    esi
c0012341:	5f                   	pop    edi
c0012342:	c3                   	ret    

c0012343 <SysGetUnixTime(regs*)>:
c0012343:	53                   	push   ebx
c0012344:	83 ec 10             	sub    esp,0x10
c0012347:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001234b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001234e:	52                   	push   edx
c001234f:	68 23 a0 02 c0       	push   0xc002a023
c0012354:	e8 0d 4c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012359:	83 c4 10             	add    esp,0x10
c001235c:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c0012360:	74 3b                	je     c001239d <SysGetUnixTime(regs*)+0x5a>
c0012362:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c0012367:	83 ec 0c             	sub    esp,0xc
c001236a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012370:	50                   	push   eax
c0012371:	e8 10 76 ff ff       	call   c0009986 <Clock::timeInSecondsLocal()>
c0012376:	83 c4 0c             	add    esp,0xc
c0012379:	52                   	push   edx
c001237a:	50                   	push   eax
c001237b:	68 37 a0 02 c0       	push   0xc002a037
c0012380:	e8 e1 4b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012385:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c001238a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012390:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012394:	83 c4 18             	add    esp,0x18
c0012397:	5b                   	pop    ebx
c0012398:	e9 e9 75 ff ff       	jmp    c0009986 <Clock::timeInSecondsLocal()>
c001239d:	6b 0d 54 2b 03 c0 64 	imul   ecx,DWORD PTR ds:0xc0032b54,0x64
c00123a4:	b8 64 00 00 00       	mov    eax,0x64
c00123a9:	f7 25 50 2b 03 c0    	mul    DWORD PTR ds:0xc0032b50
c00123af:	83 c4 08             	add    esp,0x8
c00123b2:	5b                   	pop    ebx
c00123b3:	01 ca                	add    edx,ecx
c00123b5:	c3                   	ret    

c00123b6 <string_ends_with(char const*, char const*)>:
c00123b6:	57                   	push   edi
c00123b7:	56                   	push   esi
c00123b8:	53                   	push   ebx
c00123b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00123bd:	83 ec 0c             	sub    esp,0xc
c00123c0:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00123c4:	53                   	push   ebx
c00123c5:	e8 b6 e1 fe ff       	call   c0000580 <strlen>
c00123ca:	89 3c 24             	mov    DWORD PTR [esp],edi
c00123cd:	89 c6                	mov    esi,eax
c00123cf:	e8 ac e1 fe ff       	call   c0000580 <strlen>
c00123d4:	83 c4 10             	add    esp,0x10
c00123d7:	31 d2                	xor    edx,edx
c00123d9:	39 c6                	cmp    esi,eax
c00123db:	7d 06                	jge    c00123e3 <string_ends_with(char const*, char const*)+0x2d>
c00123dd:	5b                   	pop    ebx
c00123de:	89 d0                	mov    eax,edx
c00123e0:	5e                   	pop    esi
c00123e1:	5f                   	pop    edi
c00123e2:	c3                   	ret    
c00123e3:	83 ec 08             	sub    esp,0x8
c00123e6:	29 c6                	sub    esi,eax
c00123e8:	57                   	push   edi
c00123e9:	01 f3                	add    ebx,esi
c00123eb:	53                   	push   ebx
c00123ec:	e8 8f e3 fe ff       	call   c0000780 <strcmp>
c00123f1:	83 c4 10             	add    esp,0x10
c00123f4:	31 d2                	xor    edx,edx
c00123f6:	5b                   	pop    ebx
c00123f7:	5e                   	pop    esi
c00123f8:	85 c0                	test   eax,eax
c00123fa:	5f                   	pop    edi
c00123fb:	0f 94 c2             	sete   dl
c00123fe:	89 d0                	mov    eax,edx
c0012400:	c3                   	ret    

c0012401 <SysOpen(regs*)>:
c0012401:	56                   	push   esi
c0012402:	53                   	push   ebx
c0012403:	81 ec 04 01 00 00    	sub    esp,0x104
c0012409:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012410:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012413:	85 c0                	test   eax,eax
c0012415:	0f 84 c4 01 00 00    	je     c00125df <SysOpen(regs*)+0x1de>
c001241b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001241e:	85 c0                	test   eax,eax
c0012420:	0f 84 b9 01 00 00    	je     c00125df <SysOpen(regs*)+0x1de>
c0012426:	6a 00                	push   0x0
c0012428:	68 3e a0 02 c0       	push   0xc002a03e
c001242d:	50                   	push   eax
c001242e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012432:	56                   	push   esi
c0012433:	e8 70 62 ff ff       	call   c00086a8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012438:	89 34 24             	mov    DWORD PTR [esp],esi
c001243b:	e8 40 e1 fe ff       	call   c0000580 <strlen>
c0012440:	83 c4 10             	add    esp,0x10
c0012443:	83 e8 01             	sub    eax,0x1
c0012446:	74 29                	je     c0012471 <SysOpen(regs*)+0x70>
c0012448:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c001244c:	83 fa 2e             	cmp    edx,0x2e
c001244f:	74 1c                	je     c001246d <SysOpen(regs*)+0x6c>
c0012451:	83 fa 3a             	cmp    edx,0x3a
c0012454:	74 17                	je     c001246d <SysOpen(regs*)+0x6c>
c0012456:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001245a:	83 e8 01             	sub    eax,0x1
c001245d:	74 12                	je     c0012471 <SysOpen(regs*)+0x70>
c001245f:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0012463:	83 fa 3a             	cmp    edx,0x3a
c0012466:	74 05                	je     c001246d <SysOpen(regs*)+0x6c>
c0012468:	83 fa 2e             	cmp    edx,0x2e
c001246b:	75 e9                	jne    c0012456 <SysOpen(regs*)+0x55>
c001246d:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0012471:	83 ec 08             	sub    esp,0x8
c0012474:	68 42 a0 02 c0       	push   0xc002a042
c0012479:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001247c:	50                   	push   eax
c001247d:	e8 34 ff ff ff       	call   c00123b6 <string_ends_with(char const*, char const*)>
c0012482:	83 c4 10             	add    esp,0x10
c0012485:	85 c0                	test   eax,eax
c0012487:	74 1d                	je     c00124a6 <SysOpen(regs*)+0xa5>
c0012489:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001248c:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012492:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012499:	81 c4 04 01 00 00    	add    esp,0x104
c001249f:	31 c0                	xor    eax,eax
c00124a1:	5b                   	pop    ebx
c00124a2:	31 d2                	xor    edx,edx
c00124a4:	5e                   	pop    esi
c00124a5:	c3                   	ret    
c00124a6:	83 ec 08             	sub    esp,0x8
c00124a9:	68 47 a0 02 c0       	push   0xc002a047
c00124ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00124b1:	50                   	push   eax
c00124b2:	e8 ff fe ff ff       	call   c00123b6 <string_ends_with(char const*, char const*)>
c00124b7:	83 c4 10             	add    esp,0x10
c00124ba:	85 c0                	test   eax,eax
c00124bc:	75 cb                	jne    c0012489 <SysOpen(regs*)+0x88>
c00124be:	83 ec 08             	sub    esp,0x8
c00124c1:	68 43 a0 02 c0       	push   0xc002a043
c00124c6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00124c9:	50                   	push   eax
c00124ca:	e8 b1 e2 fe ff       	call   c0000780 <strcmp>
c00124cf:	83 c4 10             	add    esp,0x10
c00124d2:	85 c0                	test   eax,eax
c00124d4:	74 b3                	je     c0012489 <SysOpen(regs*)+0x88>
c00124d6:	83 ec 08             	sub    esp,0x8
c00124d9:	68 42 a0 02 c0       	push   0xc002a042
c00124de:	56                   	push   esi
c00124df:	e8 d2 fe ff ff       	call   c00123b6 <string_ends_with(char const*, char const*)>
c00124e4:	83 c4 10             	add    esp,0x10
c00124e7:	85 c0                	test   eax,eax
c00124e9:	75 9e                	jne    c0012489 <SysOpen(regs*)+0x88>
c00124eb:	83 ec 08             	sub    esp,0x8
c00124ee:	68 4c a0 02 c0       	push   0xc002a04c
c00124f3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00124f6:	50                   	push   eax
c00124f7:	e8 ba fe ff ff       	call   c00123b6 <string_ends_with(char const*, char const*)>
c00124fc:	83 c4 10             	add    esp,0x10
c00124ff:	85 c0                	test   eax,eax
c0012501:	0f 85 eb 00 00 00    	jne    c00125f2 <SysOpen(regs*)+0x1f1>
c0012507:	83 ec 08             	sub    esp,0x8
c001250a:	68 51 a0 02 c0       	push   0xc002a051
c001250f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012512:	50                   	push   eax
c0012513:	e8 9e fe ff ff       	call   c00123b6 <string_ends_with(char const*, char const*)>
c0012518:	83 c4 10             	add    esp,0x10
c001251b:	85 c0                	test   eax,eax
c001251d:	0f 85 cf 00 00 00    	jne    c00125f2 <SysOpen(regs*)+0x1f1>
c0012523:	83 ec 08             	sub    esp,0x8
c0012526:	68 4d a0 02 c0       	push   0xc002a04d
c001252b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001252e:	51                   	push   ecx
c001252f:	e8 4c e2 fe ff       	call   c0000780 <strcmp>
c0012534:	83 c4 10             	add    esp,0x10
c0012537:	85 c0                	test   eax,eax
c0012539:	0f 84 b3 00 00 00    	je     c00125f2 <SysOpen(regs*)+0x1f1>
c001253f:	83 ec 08             	sub    esp,0x8
c0012542:	68 4c a0 02 c0       	push   0xc002a04c
c0012547:	56                   	push   esi
c0012548:	e8 69 fe ff ff       	call   c00123b6 <string_ends_with(char const*, char const*)>
c001254d:	83 c4 10             	add    esp,0x10
c0012550:	85 c0                	test   eax,eax
c0012552:	0f 85 9a 00 00 00    	jne    c00125f2 <SysOpen(regs*)+0x1f1>
c0012558:	83 ec 0c             	sub    esp,0xc
c001255b:	68 14 01 00 00       	push   0x114
c0012560:	e8 6f d9 ff ff       	call   c000fed4 <malloc>
c0012565:	83 c4 0c             	add    esp,0xc
c0012568:	89 c6                	mov    esi,eax
c001256a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001256f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012572:	50                   	push   eax
c0012573:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012576:	52                   	push   edx
c0012577:	56                   	push   esi
c0012578:	e8 57 64 ff ff       	call   c00089d4 <File::File(char const*, Process*)>
c001257d:	83 c4 10             	add    esp,0x10
c0012580:	85 f6                	test   esi,esi
c0012582:	74 5b                	je     c00125df <SysOpen(regs*)+0x1de>
c0012584:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012587:	0f b6 c2             	movzx  eax,dl
c001258a:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001258d:	89 d0                	mov    eax,edx
c001258f:	83 e0 01             	and    eax,0x1
c0012592:	f6 c2 02             	test   dl,0x2
c0012595:	74 03                	je     c001259a <SysOpen(regs*)+0x199>
c0012597:	83 c8 02             	or     eax,0x2
c001259a:	f6 c2 04             	test   dl,0x4
c001259d:	74 03                	je     c00125a2 <SysOpen(regs*)+0x1a1>
c001259f:	83 c8 04             	or     eax,0x4
c00125a2:	f6 c2 08             	test   dl,0x8
c00125a5:	74 03                	je     c00125aa <SysOpen(regs*)+0x1a9>
c00125a7:	83 c8 0a             	or     eax,0xa
c00125aa:	80 e2 10             	and    dl,0x10
c00125ad:	74 03                	je     c00125b2 <SysOpen(regs*)+0x1b1>
c00125af:	83 c8 12             	or     eax,0x12
c00125b2:	83 ec 08             	sub    esp,0x8
c00125b5:	50                   	push   eax
c00125b6:	56                   	push   esi
c00125b7:	e8 36 64 ff ff       	call   c00089f2 <File::open(FileOpenMode)>
c00125bc:	83 c4 10             	add    esp,0x10
c00125bf:	85 c0                	test   eax,eax
c00125c1:	75 1c                	jne    c00125df <SysOpen(regs*)+0x1de>
c00125c3:	83 ec 0c             	sub    esp,0xc
c00125c6:	56                   	push   esi
c00125c7:	e8 48 0e 00 00       	call   c0013414 <UnixFile::getFileDescriptor()>
c00125cc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00125cf:	83 c4 10             	add    esp,0x10
c00125d2:	89 02                	mov    DWORD PTR [edx],eax
c00125d4:	c1 f8 1f             	sar    eax,0x1f
c00125d7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00125da:	e9 ba fe ff ff       	jmp    c0012499 <SysOpen(regs*)+0x98>
c00125df:	81 c4 04 01 00 00    	add    esp,0x104
c00125e5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00125ea:	5b                   	pop    ebx
c00125eb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00125f0:	5e                   	pop    esi
c00125f1:	c3                   	ret    
c00125f2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00125f5:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00125fb:	e9 92 fe ff ff       	jmp    c0012492 <SysOpen(regs*)+0x91>

c0012600 <KeSystemCall(regs*, void*)>:
c0012600:	53                   	push   ebx
c0012601:	83 ec 08             	sub    esp,0x8
c0012604:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012608:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001260b:	83 f8 48             	cmp    eax,0x48
c001260e:	77 16                	ja     c0012626 <KeSystemCall(regs*, void*)+0x26>
c0012610:	8b 14 85 c0 d2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2d40]
c0012617:	85 d2                	test   edx,edx
c0012619:	74 0b                	je     c0012626 <KeSystemCall(regs*, void*)+0x26>
c001261b:	83 ec 0c             	sub    esp,0xc
c001261e:	53                   	push   ebx
c001261f:	ff d2                	call   edx
c0012621:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012624:	eb 0d                	jmp    c0012633 <KeSystemCall(regs*, void*)+0x33>
c0012626:	52                   	push   edx
c0012627:	52                   	push   edx
c0012628:	50                   	push   eax
c0012629:	68 56 a0 02 c0       	push   0xc002a056
c001262e:	e8 33 49 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012633:	83 c4 10             	add    esp,0x10
c0012636:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001263b:	83 c4 08             	add    esp,0x8
c001263e:	31 d2                	xor    edx,edx
c0012640:	5b                   	pop    ebx
c0012641:	c3                   	ret    

c0012642 <VgaText::isAtty()>:
c0012642:	b0 01                	mov    al,0x1
c0012644:	c3                   	ret    
c0012645:	90                   	nop

c0012646 <VgaText::~VgaText()>:
c0012646:	83 ec 0c             	sub    esp,0xc
c0012649:	ba d0 a0 02 c0       	mov    edx,0xc002a0d0
c001264e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012652:	89 10                	mov    DWORD PTR [eax],edx
c0012654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012658:	83 ec 0c             	sub    esp,0xc
c001265b:	50                   	push   eax
c001265c:	e8 a1 0f 00 00       	call   c0013602 <UnixFile::~UnixFile()>
c0012661:	83 c4 10             	add    esp,0x10
c0012664:	90                   	nop
c0012665:	83 c4 0c             	add    esp,0xc
c0012668:	c3                   	ret    
c0012669:	90                   	nop

c001266a <VgaText::~VgaText()>:
c001266a:	83 ec 0c             	sub    esp,0xc
c001266d:	83 ec 0c             	sub    esp,0xc
c0012670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012674:	e8 cd ff ff ff       	call   c0012646 <VgaText::~VgaText()>
c0012679:	83 c4 10             	add    esp,0x10
c001267c:	83 ec 08             	sub    esp,0x8
c001267f:	68 84 01 00 00       	push   0x184
c0012684:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012688:	e8 47 b4 ff ff       	call   c000dad4 <operator delete(void*, unsigned long)>
c001268d:	83 c4 10             	add    esp,0x10
c0012690:	83 c4 0c             	add    esp,0xc
c0012693:	c3                   	ret    

c0012694 <VgaText::read(unsigned long long, void*, int*)>:
c0012694:	83 ec 10             	sub    esp,0x10
c0012697:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001269b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001269f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126a3:	e8 b7 86 ff ff       	call   c000ad5f <readKeyboard(VgaText*, char*, unsigned long)>
c00126a8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00126ac:	89 02                	mov    DWORD PTR [edx],eax
c00126ae:	31 c0                	xor    eax,eax
c00126b0:	83 c4 1c             	add    esp,0x1c
c00126b3:	c3                   	ret    

c00126b4 <setTerminalScrollLock(bool)>:
c00126b4:	c3                   	ret    

c00126b5 <doTerminalCycle()>:
c00126b5:	c3                   	ret    

c00126b6 <addToTerminalCycle(VgaText*)>:
c00126b6:	c3                   	ret    

c00126b7 <scrollTerminalScrollLock(int)>:
c00126b7:	c3                   	ret    

c00126b8 <VgaText::updateTitle()>:
c00126b8:	c3                   	ret    
c00126b9:	90                   	nop

c00126ba <VgaText::load()>:
c00126ba:	c3                   	ret    
c00126bb:	90                   	nop

c00126bc <VgaText::updateCursor()>:
c00126bc:	83 ec 14             	sub    esp,0x14
c00126bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00126c3:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00126c6:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00126c9:	e8 9e 9b 00 00       	call   c001c26c <HalConsoleCursorUpdate(int, int)>
c00126ce:	83 c4 1c             	add    esp,0x1c
c00126d1:	c3                   	ret    

c00126d2 <VgaText::doANSI_SGR(int)>:
c00126d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126da:	85 d2                	test   edx,edx
c00126dc:	75 0b                	jne    c00126e9 <VgaText::doANSI_SGR(int)+0x17>
c00126de:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00126e1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00126e4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00126e7:	eb 59                	jmp    c0012742 <VgaText::doANSI_SGR(int)+0x70>
c00126e9:	83 fa 07             	cmp    edx,0x7
c00126ec:	75 0b                	jne    c00126f9 <VgaText::doANSI_SGR(int)+0x27>
c00126ee:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00126f1:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00126f4:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00126f7:	eb 49                	jmp    c0012742 <VgaText::doANSI_SGR(int)+0x70>
c00126f9:	83 fa 1b             	cmp    edx,0x1b
c00126fc:	74 e0                	je     c00126de <VgaText::doANSI_SGR(int)+0xc>
c00126fe:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0012701:	83 f9 07             	cmp    ecx,0x7
c0012704:	77 09                	ja     c001270f <VgaText::doANSI_SGR(int)+0x3d>
c0012706:	8b 14 8d 20 d4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2be0]
c001270d:	eb 20                	jmp    c001272f <VgaText::doANSI_SGR(int)+0x5d>
c001270f:	8d 4a d8             	lea    ecx,[edx-0x28]
c0012712:	83 f9 07             	cmp    ecx,0x7
c0012715:	77 09                	ja     c0012720 <VgaText::doANSI_SGR(int)+0x4e>
c0012717:	8b 14 8d 20 d4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2be0]
c001271e:	eb 22                	jmp    c0012742 <VgaText::doANSI_SGR(int)+0x70>
c0012720:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0012723:	83 f9 07             	cmp    ecx,0x7
c0012726:	77 0b                	ja     c0012733 <VgaText::doANSI_SGR(int)+0x61>
c0012728:	8b 14 95 d8 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2d28]
c001272f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012732:	c3                   	ret    
c0012733:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0012736:	83 f9 07             	cmp    ecx,0x7
c0012739:	77 0a                	ja     c0012745 <VgaText::doANSI_SGR(int)+0x73>
c001273b:	8b 14 95 b0 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2d50]
c0012742:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0012745:	c3                   	ret    

c0012746 <VgaText::setDefaultBgColour(VgaColour)>:
c0012746:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001274a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001274e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0012751:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0012754:	c3                   	ret    
c0012755:	90                   	nop

c0012756 <VgaText::setDefaultFgColour(VgaColour)>:
c0012756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001275a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001275e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0012761:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012764:	c3                   	ret    
c0012765:	90                   	nop

c0012766 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0012766:	53                   	push   ebx
c0012767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001276b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001276f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012773:	51                   	push   ecx
c0012774:	e8 cd ff ff ff       	call   c0012746 <VgaText::setDefaultBgColour(VgaColour)>
c0012779:	58                   	pop    eax
c001277a:	5a                   	pop    edx
c001277b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001277f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0012783:	5b                   	pop    ebx
c0012784:	eb d0                	jmp    c0012756 <VgaText::setDefaultFgColour(VgaColour)>

c0012786 <VgaText::setTitleTextColour(VgaColour)>:
c0012786:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001278a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001278e:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0012791:	c3                   	ret    

c0012792 <VgaText::setTitleColour(VgaColour)>:
c0012792:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012796:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001279a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001279d:	c3                   	ret    

c001279e <VgaText::setTitle(char*)>:
c001279e:	c3                   	ret    
c001279f:	90                   	nop

c00127a0 <VgaText::combineColours(unsigned char, unsigned char)>:
c00127a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127a4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00127a9:	83 e0 0f             	and    eax,0xf
c00127ac:	c1 e2 04             	shl    edx,0x4
c00127af:	09 d0                	or     eax,edx
c00127b1:	c3                   	ret    

c00127b2 <VgaText::scrollScreen()>:
c00127b2:	55                   	push   ebp
c00127b3:	57                   	push   edi
c00127b4:	56                   	push   esi
c00127b5:	be 01 00 00 00       	mov    esi,0x1
c00127ba:	53                   	push   ebx
c00127bb:	83 ec 0c             	sub    esp,0xc
c00127be:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00127c2:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00127c5:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00127cb:	31 ff                	xor    edi,edi
c00127cd:	01 e9                	add    ecx,ebp
c00127cf:	8a 01                	mov    al,BYTE PTR [ecx]
c00127d1:	83 fe 18             	cmp    esi,0x18
c00127d4:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c00127da:	75 20                	jne    c00127fc <VgaText::scrollScreen()+0x4a>
c00127dc:	f7 c7 01 00 00 00    	test   edi,0x1
c00127e2:	74 15                	je     c00127f9 <VgaText::scrollScreen()+0x47>
c00127e4:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00127e8:	50                   	push   eax
c00127e9:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00127ed:	50                   	push   eax
c00127ee:	e8 ad ff ff ff       	call   c00127a0 <VgaText::combineColours(unsigned char, unsigned char)>
c00127f3:	5a                   	pop    edx
c00127f4:	5a                   	pop    edx
c00127f5:	88 01                	mov    BYTE PTR [ecx],al
c00127f7:	eb 03                	jmp    c00127fc <VgaText::scrollScreen()+0x4a>
c00127f9:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c00127fc:	47                   	inc    edi
c00127fd:	41                   	inc    ecx
c00127fe:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0012804:	75 c9                	jne    c00127cf <VgaText::scrollScreen()+0x1d>
c0012806:	46                   	inc    esi
c0012807:	83 fe 19             	cmp    esi,0x19
c001280a:	75 b9                	jne    c00127c5 <VgaText::scrollScreen()+0x13>
c001280c:	39 1d f4 31 03 c0    	cmp    DWORD PTR ds:0xc00331f4,ebx
c0012812:	75 1f                	jne    c0012833 <VgaText::scrollScreen()+0x81>
c0012814:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0012818:	74 05                	je     c001281f <VgaText::scrollScreen()+0x6d>
c001281a:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001281d:	eb 14                	jmp    c0012833 <VgaText::scrollScreen()+0x81>
c001281f:	50                   	push   eax
c0012820:	50                   	push   eax
c0012821:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0012825:	50                   	push   eax
c0012826:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001282a:	50                   	push   eax
c001282b:	e8 d0 98 00 00       	call   c001c100 <HalConsoleScroll(int, int)>
c0012830:	83 c4 10             	add    esp,0x10
c0012833:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0012837:	83 c4 0c             	add    esp,0xc
c001283a:	5b                   	pop    ebx
c001283b:	5e                   	pop    esi
c001283c:	5f                   	pop    edi
c001283d:	5d                   	pop    ebp
c001283e:	e9 79 fe ff ff       	jmp    c00126bc <VgaText::updateCursor()>
c0012843:	90                   	nop

c0012844 <VgaText::combineCharAndColour(char, unsigned char)>:
c0012844:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0012849:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001284e:	c1 e0 08             	shl    eax,0x8
c0012851:	09 d0                	or     eax,edx
c0012853:	c3                   	ret    

c0012854 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0012854:	55                   	push   ebp
c0012855:	57                   	push   edi
c0012856:	56                   	push   esi
c0012857:	53                   	push   ebx
c0012858:	83 ec 1c             	sub    esp,0x1c
c001285b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001285f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012863:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012867:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001286b:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c001286e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012872:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012876:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001287a:	85 ed                	test   ebp,ebp
c001287c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012880:	75 14                	jne    c0012896 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c0012882:	c7 44 24 30 6a a0 02 c0 	mov    DWORD PTR [esp+0x30],0xc002a06a
c001288a:	83 c4 1c             	add    esp,0x1c
c001288d:	5b                   	pop    ebx
c001288e:	5e                   	pop    esi
c001288f:	5f                   	pop    edi
c0012890:	5d                   	pop    ebp
c0012891:	e9 92 da ff ff       	jmp    c0010328 <KePanic(char const*)>
c0012896:	50                   	push   eax
c0012897:	50                   	push   eax
c0012898:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001289d:	50                   	push   eax
c001289e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00128a3:	50                   	push   eax
c00128a4:	e8 f7 fe ff ff       	call   c00127a0 <VgaText::combineColours(unsigned char, unsigned char)>
c00128a9:	5a                   	pop    edx
c00128aa:	5a                   	pop    edx
c00128ab:	0f b6 c0             	movzx  eax,al
c00128ae:	0f be c9             	movsx  ecx,cl
c00128b1:	50                   	push   eax
c00128b2:	51                   	push   ecx
c00128b3:	e8 8c ff ff ff       	call   c0012844 <VgaText::combineCharAndColour(char, unsigned char)>
c00128b8:	6b d6 50             	imul   edx,esi,0x50
c00128bb:	83 c4 10             	add    esp,0x10
c00128be:	01 da                	add    edx,ebx
c00128c0:	0f b7 d2             	movzx  edx,dx
c00128c3:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c00128c8:	39 3d f4 31 03 c0    	cmp    DWORD PTR ds:0xc00331f4,edi
c00128ce:	75 28                	jne    c00128f8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c00128d0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00128d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00128d8:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c00128dc:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c00128e0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00128e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00128e8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00128ec:	83 c4 1c             	add    esp,0x1c
c00128ef:	5b                   	pop    ebx
c00128f0:	5e                   	pop    esi
c00128f1:	5f                   	pop    edi
c00128f2:	5d                   	pop    ebp
c00128f3:	e9 10 99 00 00       	jmp    c001c208 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00128f8:	83 c4 1c             	add    esp,0x1c
c00128fb:	5b                   	pop    ebx
c00128fc:	5e                   	pop    esi
c00128fd:	5f                   	pop    edi
c00128fe:	5d                   	pop    ebp
c00128ff:	c3                   	ret    

c0012900 <VgaText::getCursorX()>:
c0012900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012904:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0012907:	c3                   	ret    

c0012908 <VgaText::getCursorY()>:
c0012908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001290c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001290f:	c3                   	ret    

c0012910 <VgaText::setCursor(int, int)>:
c0012910:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012914:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012918:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001291b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001291f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012922:	e9 95 fd ff ff       	jmp    c00126bc <VgaText::updateCursor()>

c0012927 <setActiveTerminal(VgaText*)>:
c0012927:	53                   	push   ebx
c0012928:	83 ec 08             	sub    esp,0x8
c001292b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001292f:	85 db                	test   ebx,ebx
c0012931:	75 11                	jne    c0012944 <setActiveTerminal(VgaText*)+0x1d>
c0012933:	c7 44 24 10 7a a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a07a
c001293b:	83 c4 08             	add    esp,0x8
c001293e:	5b                   	pop    ebx
c001293f:	e9 e4 d9 ff ff       	jmp    c0010328 <KePanic(char const*)>
c0012944:	a1 f4 31 03 c0       	mov    eax,ds:0xc00331f4
c0012949:	85 c0                	test   eax,eax
c001294b:	74 0c                	je     c0012959 <setActiveTerminal(VgaText*)+0x32>
c001294d:	83 ec 0c             	sub    esp,0xc
c0012950:	50                   	push   eax
c0012951:	e8 66 fd ff ff       	call   c00126bc <VgaText::updateCursor()>
c0012956:	83 c4 10             	add    esp,0x10
c0012959:	50                   	push   eax
c001295a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001295d:	89 1d f4 31 03 c0    	mov    DWORD PTR ds:0xc00331f4,ebx
c0012963:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012966:	53                   	push   ebx
c0012967:	e8 a4 ff ff ff       	call   c0012910 <VgaText::setCursor(int, int)>
c001296c:	83 c4 18             	add    esp,0x18
c001296f:	5b                   	pop    ebx
c0012970:	c3                   	ret    
c0012971:	90                   	nop

c0012972 <VgaText::clearScreen()>:
c0012972:	57                   	push   edi
c0012973:	56                   	push   esi
c0012974:	31 f6                	xor    esi,esi
c0012976:	53                   	push   ebx
c0012977:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001297b:	52                   	push   edx
c001297c:	6a 00                	push   0x0
c001297e:	6a 00                	push   0x0
c0012980:	53                   	push   ebx
c0012981:	e8 8a ff ff ff       	call   c0012910 <VgaText::setCursor(int, int)>
c0012986:	83 c4 10             	add    esp,0x10
c0012989:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0012990:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0012993:	7e 20                	jle    c00129b5 <VgaText::clearScreen()+0x43>
c0012995:	31 ff                	xor    edi,edi
c0012997:	50                   	push   eax
c0012998:	50                   	push   eax
c0012999:	56                   	push   esi
c001299a:	57                   	push   edi
c001299b:	47                   	inc    edi
c001299c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001299f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00129a2:	6a 20                	push   0x20
c00129a4:	53                   	push   ebx
c00129a5:	e8 aa fe ff ff       	call   c0012854 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00129aa:	83 c4 20             	add    esp,0x20
c00129ad:	83 ff 50             	cmp    edi,0x50
c00129b0:	75 e5                	jne    c0012997 <VgaText::clearScreen()+0x25>
c00129b2:	46                   	inc    esi
c00129b3:	eb db                	jmp    c0012990 <VgaText::clearScreen()+0x1e>
c00129b5:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00129bc:	5b                   	pop    ebx
c00129bd:	5e                   	pop    esi
c00129be:	5f                   	pop    edi
c00129bf:	c3                   	ret    

c00129c0 <VgaText::setCursorX(int)>:
c00129c0:	83 ec 10             	sub    esp,0x10
c00129c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00129c7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00129ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129ce:	50                   	push   eax
c00129cf:	e8 3c ff ff ff       	call   c0012910 <VgaText::setCursor(int, int)>
c00129d4:	83 c4 1c             	add    esp,0x1c
c00129d7:	c3                   	ret    

c00129d8 <VgaText::setCursorY(int)>:
c00129d8:	83 ec 10             	sub    esp,0x10
c00129db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00129df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00129e3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00129e6:	50                   	push   eax
c00129e7:	e8 24 ff ff ff       	call   c0012910 <VgaText::setCursor(int, int)>
c00129ec:	83 c4 1c             	add    esp,0x1c
c00129ef:	c3                   	ret    

c00129f0 <VgaText::incrementCursor(bool)>:
c00129f0:	56                   	push   esi
c00129f1:	53                   	push   ebx
c00129f2:	51                   	push   ecx
c00129f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00129f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00129fb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00129fe:	40                   	inc    eax
c00129ff:	83 f8 50             	cmp    eax,0x50
c0012a02:	74 05                	je     c0012a09 <VgaText::incrementCursor(bool)+0x19>
c0012a04:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0012a07:	eb 24                	jmp    c0012a2d <VgaText::incrementCursor(bool)+0x3d>
c0012a09:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012a10:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012a13:	8d 50 01             	lea    edx,[eax+0x1]
c0012a16:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0012a19:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0012a1c:	75 0f                	jne    c0012a2d <VgaText::incrementCursor(bool)+0x3d>
c0012a1e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012a21:	83 ec 0c             	sub    esp,0xc
c0012a24:	53                   	push   ebx
c0012a25:	e8 88 fd ff ff       	call   c00127b2 <VgaText::scrollScreen()>
c0012a2a:	83 c4 10             	add    esp,0x10
c0012a2d:	89 f0                	mov    eax,esi
c0012a2f:	84 c0                	test   al,al
c0012a31:	74 0c                	je     c0012a3f <VgaText::incrementCursor(bool)+0x4f>
c0012a33:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a37:	5a                   	pop    edx
c0012a38:	5b                   	pop    ebx
c0012a39:	5e                   	pop    esi
c0012a3a:	e9 7d fc ff ff       	jmp    c00126bc <VgaText::updateCursor()>
c0012a3f:	58                   	pop    eax
c0012a40:	5b                   	pop    ebx
c0012a41:	5e                   	pop    esi
c0012a42:	c3                   	ret    
c0012a43:	90                   	nop

c0012a44 <VgaText::decrementCursor(bool)>:
c0012a44:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012a48:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012a4c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0012a4f:	85 c0                	test   eax,eax
c0012a51:	74 04                	je     c0012a57 <VgaText::decrementCursor(bool)+0x13>
c0012a53:	48                   	dec    eax
c0012a54:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0012a57:	84 c9                	test   cl,cl
c0012a59:	74 09                	je     c0012a64 <VgaText::decrementCursor(bool)+0x20>
c0012a5b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012a5f:	e9 58 fc ff ff       	jmp    c00126bc <VgaText::updateCursor()>
c0012a64:	c3                   	ret    
c0012a65:	90                   	nop

c0012a66 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0012a66:	53                   	push   ebx
c0012a67:	83 ec 08             	sub    esp,0x8
c0012a6a:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0012a6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012a73:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012a77:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012a7b:	83 f8 07             	cmp    eax,0x7
c0012a7e:	75 21                	jne    c0012aa1 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0012a80:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012a88:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0012a90:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0012a98:	83 c4 08             	add    esp,0x8
c0012a9b:	5b                   	pop    ebx
c0012a9c:	e9 d6 67 ff ff       	jmp    c0009277 <KeBeep(int, int, bool)>
c0012aa1:	83 f8 0d             	cmp    eax,0xd
c0012aa4:	75 09                	jne    c0012aaf <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0012aa6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012aad:	eb 2d                	jmp    c0012adc <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0012aaf:	83 f8 0a             	cmp    eax,0xa
c0012ab2:	75 31                	jne    c0012ae5 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0012ab4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012abb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012abe:	8d 50 01             	lea    edx,[eax+0x1]
c0012ac1:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0012ac4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0012ac7:	75 0f                	jne    c0012ad8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0012ac9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012acc:	83 ec 0c             	sub    esp,0xc
c0012acf:	53                   	push   ebx
c0012ad0:	e8 dd fc ff ff       	call   c00127b2 <VgaText::scrollScreen()>
c0012ad5:	83 c4 10             	add    esp,0x10
c0012ad8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012adc:	83 c4 08             	add    esp,0x8
c0012adf:	5b                   	pop    ebx
c0012ae0:	e9 d7 fb ff ff       	jmp    c00126bc <VgaText::updateCursor()>
c0012ae5:	83 f8 08             	cmp    eax,0x8
c0012ae8:	75 25                	jne    c0012b0f <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0012aea:	50                   	push   eax
c0012aeb:	50                   	push   eax
c0012aec:	6a 01                	push   0x1
c0012aee:	53                   	push   ebx
c0012aef:	e8 50 ff ff ff       	call   c0012a44 <VgaText::decrementCursor(bool)>
c0012af4:	5a                   	pop    edx
c0012af5:	59                   	pop    ecx
c0012af6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012af9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012afc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012aff:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012b02:	6a 20                	push   0x20
c0012b04:	53                   	push   ebx
c0012b05:	e8 4a fd ff ff       	call   c0012854 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012b0a:	83 c4 28             	add    esp,0x28
c0012b0d:	5b                   	pop    ebx
c0012b0e:	c3                   	ret    
c0012b0f:	83 ec 08             	sub    esp,0x8
c0012b12:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012b15:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012b18:	51                   	push   ecx
c0012b19:	52                   	push   edx
c0012b1a:	50                   	push   eax
c0012b1b:	53                   	push   ebx
c0012b1c:	e8 33 fd ff ff       	call   c0012854 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012b21:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0012b25:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0012b2d:	83 c4 28             	add    esp,0x28
c0012b30:	5b                   	pop    ebx
c0012b31:	e9 ba fe ff ff       	jmp    c00129f0 <VgaText::incrementCursor(bool)>

c0012b36 <VgaText::putchar(char)>:
c0012b36:	57                   	push   edi
c0012b37:	56                   	push   esi
c0012b38:	53                   	push   ebx
c0012b39:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012b3d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b41:	0f be c2             	movsx  eax,dl
c0012b44:	83 f8 5b             	cmp    eax,0x5b
c0012b47:	75 18                	jne    c0012b61 <VgaText::putchar(char)+0x2b>
c0012b49:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0012b4d:	74 20                	je     c0012b6f <VgaText::putchar(char)+0x39>
c0012b4f:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0012b55:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0012b5c:	e9 b8 00 00 00       	jmp    c0012c19 <VgaText::putchar(char)+0xe3>
c0012b61:	83 f8 1b             	cmp    eax,0x1b
c0012b64:	75 09                	jne    c0012b6f <VgaText::putchar(char)+0x39>
c0012b66:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0012b6a:	e9 aa 00 00 00       	jmp    c0012c19 <VgaText::putchar(char)+0xe3>
c0012b6f:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c0012b73:	89 f9                	mov    ecx,edi
c0012b75:	84 c9                	test   cl,cl
c0012b77:	0f 84 8c 00 00 00    	je     c0012c09 <VgaText::putchar(char)+0xd3>
c0012b7d:	8d 4a c0             	lea    ecx,[edx-0x40]
c0012b80:	80 f9 3e             	cmp    cl,0x3e
c0012b83:	77 70                	ja     c0012bf5 <VgaText::putchar(char)+0xbf>
c0012b85:	83 f8 6d             	cmp    eax,0x6d
c0012b88:	75 3f                	jne    c0012bc9 <VgaText::putchar(char)+0x93>
c0012b8a:	31 f6                	xor    esi,esi
c0012b8c:	31 d2                	xor    edx,edx
c0012b8e:	31 c0                	xor    eax,eax
c0012b90:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0012b93:	7e 25                	jle    c0012bba <VgaText::putchar(char)+0x84>
c0012b95:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0012b9a:	83 fa 3b             	cmp    edx,0x3b
c0012b9d:	75 0f                	jne    c0012bae <VgaText::putchar(char)+0x78>
c0012b9f:	50                   	push   eax
c0012ba0:	53                   	push   ebx
c0012ba1:	e8 2c fb ff ff       	call   c00126d2 <VgaText::doANSI_SGR(int)>
c0012ba6:	31 d2                	xor    edx,edx
c0012ba8:	59                   	pop    ecx
c0012ba9:	58                   	pop    eax
c0012baa:	31 c0                	xor    eax,eax
c0012bac:	eb 09                	jmp    c0012bb7 <VgaText::putchar(char)+0x81>
c0012bae:	6b c0 0a             	imul   eax,eax,0xa
c0012bb1:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0012bb5:	89 fa                	mov    edx,edi
c0012bb7:	46                   	inc    esi
c0012bb8:	eb d6                	jmp    c0012b90 <VgaText::putchar(char)+0x5a>
c0012bba:	84 d2                	test   dl,dl
c0012bbc:	74 2f                	je     c0012bed <VgaText::putchar(char)+0xb7>
c0012bbe:	50                   	push   eax
c0012bbf:	53                   	push   ebx
c0012bc0:	e8 0d fb ff ff       	call   c00126d2 <VgaText::doANSI_SGR(int)>
c0012bc5:	58                   	pop    eax
c0012bc6:	5a                   	pop    edx
c0012bc7:	eb 24                	jmp    c0012bed <VgaText::putchar(char)+0xb7>
c0012bc9:	83 f8 4a             	cmp    eax,0x4a
c0012bcc:	75 1f                	jne    c0012bed <VgaText::putchar(char)+0xb7>
c0012bce:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0012bd2:	75 19                	jne    c0012bed <VgaText::putchar(char)+0xb7>
c0012bd4:	83 ec 0c             	sub    esp,0xc
c0012bd7:	53                   	push   ebx
c0012bd8:	e8 95 fd ff ff       	call   c0012972 <VgaText::clearScreen()>
c0012bdd:	83 c4 0c             	add    esp,0xc
c0012be0:	6a 00                	push   0x0
c0012be2:	6a 00                	push   0x0
c0012be4:	53                   	push   ebx
c0012be5:	e8 26 fd ff ff       	call   c0012910 <VgaText::setCursor(int, int)>
c0012bea:	83 c4 10             	add    esp,0x10
c0012bed:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0012bf3:	eb 24                	jmp    c0012c19 <VgaText::putchar(char)+0xe3>
c0012bf5:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0012bf8:	83 f8 0e             	cmp    eax,0xe
c0012bfb:	7f 1c                	jg     c0012c19 <VgaText::putchar(char)+0xe3>
c0012bfd:	8d 48 01             	lea    ecx,[eax+0x1]
c0012c00:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0012c03:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0012c07:	eb 10                	jmp    c0012c19 <VgaText::putchar(char)+0xe3>
c0012c09:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012c0c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012c0f:	50                   	push   eax
c0012c10:	53                   	push   ebx
c0012c11:	e8 50 fe ff ff       	call   c0012a66 <VgaText::putchar(char, VgaColour, VgaColour)>
c0012c16:	83 c4 10             	add    esp,0x10
c0012c19:	5b                   	pop    ebx
c0012c1a:	5e                   	pop    esi
c0012c1b:	5f                   	pop    edi
c0012c1c:	c3                   	ret    
c0012c1d:	90                   	nop

c0012c1e <VgaText::putx(unsigned int)>:
c0012c1e:	57                   	push   edi
c0012c1f:	b9 11 00 00 00       	mov    ecx,0x11
c0012c24:	56                   	push   esi
c0012c25:	be 88 a0 02 c0       	mov    esi,0xc002a088
c0012c2a:	53                   	push   ebx
c0012c2b:	83 ec 20             	sub    esp,0x20
c0012c2e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012c32:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0012c36:	fc                   	cld    
c0012c37:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012c39:	be 08 00 00 00       	mov    esi,0x8
c0012c3e:	50                   	push   eax
c0012c3f:	50                   	push   eax
c0012c40:	89 d8                	mov    eax,ebx
c0012c42:	c1 e8 1c             	shr    eax,0x1c
c0012c45:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0012c4a:	c1 e3 04             	shl    ebx,0x4
c0012c4d:	50                   	push   eax
c0012c4e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c52:	e8 df fe ff ff       	call   c0012b36 <VgaText::putchar(char)>
c0012c57:	83 c4 10             	add    esp,0x10
c0012c5a:	4e                   	dec    esi
c0012c5b:	75 e1                	jne    c0012c3e <VgaText::putx(unsigned int)+0x20>
c0012c5d:	83 c4 20             	add    esp,0x20
c0012c60:	5b                   	pop    ebx
c0012c61:	5e                   	pop    esi
c0012c62:	5f                   	pop    edi
c0012c63:	c3                   	ret    

c0012c64 <VgaText::puts(char const*)>:
c0012c64:	53                   	push   ebx
c0012c65:	83 ec 08             	sub    esp,0x8
c0012c68:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012c6c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012c6f:	85 c0                	test   eax,eax
c0012c71:	74 12                	je     c0012c85 <VgaText::puts(char const*)+0x21>
c0012c73:	51                   	push   ecx
c0012c74:	43                   	inc    ebx
c0012c75:	51                   	push   ecx
c0012c76:	50                   	push   eax
c0012c77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c7b:	e8 b6 fe ff ff       	call   c0012b36 <VgaText::putchar(char)>
c0012c80:	83 c4 10             	add    esp,0x10
c0012c83:	eb e7                	jmp    c0012c6c <VgaText::puts(char const*)+0x8>
c0012c85:	83 c4 08             	add    esp,0x8
c0012c88:	5b                   	pop    ebx
c0012c89:	c3                   	ret    

c0012c8a <VgaText::write(unsigned long long, void*, int*)>:
c0012c8a:	55                   	push   ebp
c0012c8b:	57                   	push   edi
c0012c8c:	56                   	push   esi
c0012c8d:	53                   	push   ebx
c0012c8e:	83 ec 0c             	sub    esp,0xc
c0012c91:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012c95:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012c99:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012c9d:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0012ca4:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0012ca7:	39 eb                	cmp    ebx,ebp
c0012ca9:	74 13                	je     c0012cbe <VgaText::write(unsigned long long, void*, int*)+0x34>
c0012cab:	50                   	push   eax
c0012cac:	43                   	inc    ebx
c0012cad:	50                   	push   eax
c0012cae:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0012cb2:	50                   	push   eax
c0012cb3:	56                   	push   esi
c0012cb4:	e8 7d fe ff ff       	call   c0012b36 <VgaText::putchar(char)>
c0012cb9:	83 c4 10             	add    esp,0x10
c0012cbc:	eb e9                	jmp    c0012ca7 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0012cbe:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0012cc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012cc9:	89 38                	mov    DWORD PTR [eax],edi
c0012ccb:	83 c4 0c             	add    esp,0xc
c0012cce:	31 c0                	xor    eax,eax
c0012cd0:	5b                   	pop    ebx
c0012cd1:	5e                   	pop    esi
c0012cd2:	5f                   	pop    edi
c0012cd3:	5d                   	pop    ebp
c0012cd4:	c3                   	ret    
c0012cd5:	90                   	nop

c0012cd6 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0012cd6:	55                   	push   ebp
c0012cd7:	57                   	push   edi
c0012cd8:	56                   	push   esi
c0012cd9:	53                   	push   ebx
c0012cda:	83 ec 1c             	sub    esp,0x1c
c0012cdd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012ce1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012ce5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012ce9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0012ced:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c0012cf0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012cf4:	85 db                	test   ebx,ebx
c0012cf6:	75 14                	jne    c0012d0c <VgaText::puts(char const*, VgaColour, VgaColour)+0x36>
c0012cf8:	c7 44 24 30 99 a0 02 c0 	mov    DWORD PTR [esp+0x30],0xc002a099
c0012d00:	83 c4 1c             	add    esp,0x1c
c0012d03:	5b                   	pop    ebx
c0012d04:	5e                   	pop    esi
c0012d05:	5f                   	pop    edi
c0012d06:	5d                   	pop    ebp
c0012d07:	e9 1c d6 ff ff       	jmp    c0010328 <KePanic(char const*)>
c0012d0c:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c0012d13:	50                   	push   eax
c0012d14:	50                   	push   eax
c0012d15:	89 e8                	mov    eax,ebp
c0012d17:	0f b6 c0             	movzx  eax,al
c0012d1a:	50                   	push   eax
c0012d1b:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012d20:	50                   	push   eax
c0012d21:	e8 7a fa ff ff       	call   c00127a0 <VgaText::combineColours(unsigned char, unsigned char)>
c0012d26:	83 c4 10             	add    esp,0x10
c0012d29:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c0012d2d:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c0012d30:	0f b6 c0             	movzx  eax,al
c0012d33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012d37:	0f b7 c9             	movzx  ecx,cx
c0012d3a:	01 c9                	add    ecx,ecx
c0012d3c:	01 cb                	add    ebx,ecx
c0012d3e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012d41:	85 c0                	test   eax,eax
c0012d43:	0f 84 ef 00 00 00    	je     c0012e38 <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c0012d49:	83 f8 0d             	cmp    eax,0xd
c0012d4c:	75 0c                	jne    c0012d5a <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c0012d4e:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012d55:	e9 d8 00 00 00       	jmp    c0012e32 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012d5a:	83 f8 0a             	cmp    eax,0xa
c0012d5d:	75 44                	jne    c0012da3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c0012d5f:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012d66:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012d69:	8d 48 01             	lea    ecx,[eax+0x1]
c0012d6c:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c0012d6f:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c0012d72:	75 0f                	jne    c0012d83 <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c0012d74:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c0012d77:	83 ec 0c             	sub    esp,0xc
c0012d7a:	57                   	push   edi
c0012d7b:	e8 32 fa ff ff       	call   c00127b2 <VgaText::scrollScreen()>
c0012d80:	83 c4 10             	add    esp,0x10
c0012d83:	83 ec 0c             	sub    esp,0xc
c0012d86:	57                   	push   edi
c0012d87:	e8 30 f9 ff ff       	call   c00126bc <VgaText::updateCursor()>
c0012d8c:	83 c4 10             	add    esp,0x10
c0012d8f:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012d93:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012d96:	0f b7 db             	movzx  ebx,bx
c0012d99:	01 db                	add    ebx,ebx
c0012d9b:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012d9e:	e9 8f 00 00 00       	jmp    c0012e32 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012da3:	83 f8 08             	cmp    eax,0x8
c0012da6:	75 34                	jne    c0012ddc <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c0012da8:	51                   	push   ecx
c0012da9:	51                   	push   ecx
c0012daa:	6a 01                	push   0x1
c0012dac:	57                   	push   edi
c0012dad:	e8 92 fc ff ff       	call   c0012a44 <VgaText::decrementCursor(bool)>
c0012db2:	5b                   	pop    ebx
c0012db3:	58                   	pop    eax
c0012db4:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012db7:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012dba:	ff 77 30             	push   DWORD PTR [edi+0x30]
c0012dbd:	ff 77 34             	push   DWORD PTR [edi+0x34]
c0012dc0:	6a 20                	push   0x20
c0012dc2:	57                   	push   edi
c0012dc3:	e8 8c fa ff ff       	call   c0012854 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012dc8:	83 c4 20             	add    esp,0x20
c0012dcb:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012dcf:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012dd2:	0f b7 db             	movzx  ebx,bx
c0012dd5:	01 db                	add    ebx,ebx
c0012dd7:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012dda:	eb 56                	jmp    c0012e32 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012ddc:	52                   	push   edx
c0012ddd:	52                   	push   edx
c0012dde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012de2:	50                   	push   eax
c0012de3:	e8 5c fa ff ff       	call   c0012844 <VgaText::combineCharAndColour(char, unsigned char)>
c0012de8:	83 c4 10             	add    esp,0x10
c0012deb:	66 89 03             	mov    WORD PTR [ebx],ax
c0012dee:	39 3d f4 31 03 c0    	cmp    DWORD PTR ds:0xc00331f4,edi
c0012df4:	75 1a                	jne    c0012e10 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0012df6:	83 ec 0c             	sub    esp,0xc
c0012df9:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012dfc:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012dff:	55                   	push   ebp
c0012e00:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012e04:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012e07:	50                   	push   eax
c0012e08:	e8 fb 93 00 00       	call   c001c208 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012e0d:	83 c4 20             	add    esp,0x20
c0012e10:	50                   	push   eax
c0012e11:	83 c3 02             	add    ebx,0x2
c0012e14:	50                   	push   eax
c0012e15:	6a 00                	push   0x0
c0012e17:	57                   	push   edi
c0012e18:	e8 d3 fb ff ff       	call   c00129f0 <VgaText::incrementCursor(bool)>
c0012e1d:	83 c4 10             	add    esp,0x10
c0012e20:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c0012e24:	75 0c                	jne    c0012e32 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012e26:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012e2a:	0f b7 db             	movzx  ebx,bx
c0012e2d:	01 db                	add    ebx,ebx
c0012e2f:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012e32:	46                   	inc    esi
c0012e33:	e9 06 ff ff ff       	jmp    c0012d3e <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0012e38:	83 ec 0c             	sub    esp,0xc
c0012e3b:	57                   	push   edi
c0012e3c:	e8 7b f8 ff ff       	call   c00126bc <VgaText::updateCursor()>
c0012e41:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c0012e48:	83 c4 2c             	add    esp,0x2c
c0012e4b:	5b                   	pop    ebx
c0012e4c:	5e                   	pop    esi
c0012e4d:	5f                   	pop    edi
c0012e4e:	5d                   	pop    ebp
c0012e4f:	c3                   	ret    

c0012e50 <VgaText::VgaText(char const*)>:
c0012e50:	56                   	push   esi
c0012e51:	53                   	push   ebx
c0012e52:	83 ec 04             	sub    esp,0x4
c0012e55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e59:	83 ec 08             	sub    esp,0x8
c0012e5c:	6a 00                	push   0x0
c0012e5e:	50                   	push   eax
c0012e5f:	e8 b8 05 00 00       	call   c001341c <UnixFile::UnixFile(int)>
c0012e64:	83 c4 10             	add    esp,0x10
c0012e67:	ba d0 a0 02 c0       	mov    edx,0xc002a0d0
c0012e6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e70:	89 10                	mov    DWORD PTR [eax],edx
c0012e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e76:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0012e7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e81:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0012e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e8c:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0012e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e94:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0012e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e9c:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0012ea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ea7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0012eae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012eb2:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0012eb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ebd:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0012ec4:	83 ec 0c             	sub    esp,0xc
c0012ec7:	68 a9 a0 02 c0       	push   0xc002a0a9
c0012ecc:	e8 95 40 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012ed1:	83 c4 10             	add    esp,0x10
c0012ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ed8:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0012edf:	83 ec 0c             	sub    esp,0xc
c0012ee2:	6a 01                	push   0x1
c0012ee4:	e8 86 09 00 00       	call   c001386f <Virt::allocateKernelVirtualPages(int)>
c0012ee9:	83 c4 10             	add    esp,0x10
c0012eec:	89 c2                	mov    edx,eax
c0012eee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ef2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012ef5:	8b 1d 90 32 03 c0    	mov    ebx,DWORD PTR ds:0xc0033290
c0012efb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012eff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012f02:	89 c6                	mov    esi,eax
c0012f04:	e8 19 d6 ff ff       	call   c0010522 <Phys::allocatePage()>
c0012f09:	68 05 0c 00 00       	push   0xc05
c0012f0e:	56                   	push   esi
c0012f0f:	50                   	push   eax
c0012f10:	53                   	push   ebx
c0012f11:	e8 32 10 00 00       	call   c0013f48 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012f16:	83 c4 10             	add    esp,0x10
c0012f19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f1d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012f20:	83 ec 04             	sub    esp,0x4
c0012f23:	68 a0 0f 00 00       	push   0xfa0
c0012f28:	6a 00                	push   0x0
c0012f2a:	50                   	push   eax
c0012f2b:	e8 c0 d5 fe ff       	call   c00004f0 <memset>
c0012f30:	83 c4 10             	add    esp,0x10
c0012f33:	83 ec 04             	sub    esp,0x4
c0012f36:	6a 00                	push   0x0
c0012f38:	6a 07                	push   0x7
c0012f3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f3e:	e8 23 f8 ff ff       	call   c0012766 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0012f43:	83 c4 10             	add    esp,0x10
c0012f46:	83 ec 04             	sub    esp,0x4
c0012f49:	6a 00                	push   0x0
c0012f4b:	6a 00                	push   0x0
c0012f4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f51:	e8 ba f9 ff ff       	call   c0012910 <VgaText::setCursor(int, int)>
c0012f56:	83 c4 10             	add    esp,0x10
c0012f59:	83 ec 0c             	sub    esp,0xc
c0012f5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f60:	e8 0d fa ff ff       	call   c0012972 <VgaText::clearScreen()>
c0012f65:	83 c4 10             	add    esp,0x10
c0012f68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f6c:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0012f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f74:	05 82 00 00 00       	add    eax,0x82
c0012f79:	83 ec 04             	sub    esp,0x4
c0012f7c:	68 80 00 00 00       	push   0x80
c0012f81:	6a 00                	push   0x0
c0012f83:	50                   	push   eax
c0012f84:	e8 67 d5 fe ff       	call   c00004f0 <memset>
c0012f89:	83 c4 10             	add    esp,0x10
c0012f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f90:	05 02 01 00 00       	add    eax,0x102
c0012f95:	83 ec 04             	sub    esp,0x4
c0012f98:	68 80 00 00 00       	push   0x80
c0012f9d:	6a 00                	push   0x0
c0012f9f:	50                   	push   eax
c0012fa0:	e8 4b d5 fe ff       	call   c00004f0 <memset>
c0012fa5:	83 c4 10             	add    esp,0x10
c0012fa8:	90                   	nop
c0012fa9:	83 c4 04             	add    esp,0x4
c0012fac:	5b                   	pop    ebx
c0012fad:	5e                   	pop    esi
c0012fae:	c3                   	ret    
c0012faf:	90                   	nop

c0012fb0 <VgaText::receiveKey(unsigned char)>:
c0012fb0:	55                   	push   ebp
c0012fb1:	57                   	push   edi
c0012fb2:	56                   	push   esi
c0012fb3:	53                   	push   ebx
c0012fb4:	83 ec 2c             	sub    esp,0x2c
c0012fb7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012fbb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012fbf:	89 fd                	mov    ebp,edi
c0012fc1:	81 e5 ff 00 00 00    	and    ebp,0xff
c0012fc7:	0f 84 48 01 00 00    	je     c0013115 <VgaText::receiveKey(unsigned char)+0x165>
c0012fcd:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0012fd3:	83 fd 08             	cmp    ebp,0x8
c0012fd6:	75 6a                	jne    c0013042 <VgaText::receiveKey(unsigned char)+0x92>
c0012fd8:	83 ec 0c             	sub    esp,0xc
c0012fdb:	56                   	push   esi
c0012fdc:	e8 9f d5 fe ff       	call   c0000580 <strlen>
c0012fe1:	83 c4 10             	add    esp,0x10
c0012fe4:	85 c0                	test   eax,eax
c0012fe6:	0f 84 ef 00 00 00    	je     c00130db <VgaText::receiveKey(unsigned char)+0x12b>
c0012fec:	50                   	push   eax
c0012fed:	50                   	push   eax
c0012fee:	6a 08                	push   0x8
c0012ff0:	53                   	push   ebx
c0012ff1:	e8 40 fb ff ff       	call   c0012b36 <VgaText::putchar(char)>
c0012ff6:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ff9:	e8 82 d5 fe ff       	call   c0000580 <strlen>
c0012ffe:	83 c4 10             	add    esp,0x10
c0013001:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0013009:	83 fa 1f             	cmp    edx,0x1f
c001300c:	89 d0                	mov    eax,edx
c001300e:	7f 1c                	jg     c001302c <VgaText::receiveKey(unsigned char)+0x7c>
c0013010:	83 e8 08             	sub    eax,0x8
c0013013:	3c 02                	cmp    al,0x2
c0013015:	76 15                	jbe    c001302c <VgaText::receiveKey(unsigned char)+0x7c>
c0013017:	83 fa 0d             	cmp    edx,0xd
c001301a:	74 10                	je     c001302c <VgaText::receiveKey(unsigned char)+0x7c>
c001301c:	57                   	push   edi
c001301d:	57                   	push   edi
c001301e:	68 bc a0 02 c0       	push   0xc002a0bc
c0013023:	53                   	push   ebx
c0013024:	e8 3b fc ff ff       	call   c0012c64 <VgaText::puts(char const*)>
c0013029:	83 c4 10             	add    esp,0x10
c001302c:	83 ec 0c             	sub    esp,0xc
c001302f:	56                   	push   esi
c0013030:	e8 4b d5 fe ff       	call   c0000580 <strlen>
c0013035:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c001303d:	e9 96 00 00 00       	jmp    c00130d8 <VgaText::receiveKey(unsigned char)+0x128>
c0013042:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0013048:	83 ec 0c             	sub    esp,0xc
c001304b:	50                   	push   eax
c001304c:	e8 2f d5 fe ff       	call   c0000580 <strlen>
c0013051:	89 34 24             	mov    DWORD PTR [esp],esi
c0013054:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013058:	e8 23 d5 fe ff       	call   c0000580 <strlen>
c001305d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013061:	83 c4 10             	add    esp,0x10
c0013064:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0013068:	3d 80 00 00 00       	cmp    eax,0x80
c001306d:	0f 87 a2 00 00 00    	ja     c0013115 <VgaText::receiveKey(unsigned char)+0x165>
c0013073:	8d 47 ff             	lea    eax,[edi-0x1]
c0013076:	3c 1e                	cmp    al,0x1e
c0013078:	77 35                	ja     c00130af <VgaText::receiveKey(unsigned char)+0xff>
c001307a:	8d 47 f7             	lea    eax,[edi-0x9]
c001307d:	3c 01                	cmp    al,0x1
c001307f:	76 2e                	jbe    c00130af <VgaText::receiveKey(unsigned char)+0xff>
c0013081:	83 fd 0d             	cmp    ebp,0xd
c0013084:	74 29                	je     c00130af <VgaText::receiveKey(unsigned char)+0xff>
c0013086:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0013089:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001308c:	68 c2 a0 02 c0       	push   0xc002a0c2
c0013091:	53                   	push   ebx
c0013092:	e8 3f fc ff ff       	call   c0012cd6 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0013097:	8d 47 40             	lea    eax,[edi+0x40]
c001309a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001309d:	0f b6 c0             	movzx  eax,al
c00130a0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00130a3:	50                   	push   eax
c00130a4:	53                   	push   ebx
c00130a5:	e8 bc f9 ff ff       	call   c0012a66 <VgaText::putchar(char, VgaColour, VgaColour)>
c00130aa:	83 c4 20             	add    esp,0x20
c00130ad:	eb 11                	jmp    c00130c0 <VgaText::receiveKey(unsigned char)+0x110>
c00130af:	51                   	push   ecx
c00130b0:	89 f8                	mov    eax,edi
c00130b2:	51                   	push   ecx
c00130b3:	0f be c0             	movsx  eax,al
c00130b6:	50                   	push   eax
c00130b7:	53                   	push   ebx
c00130b8:	e8 79 fa ff ff       	call   c0012b36 <VgaText::putchar(char)>
c00130bd:	83 c4 10             	add    esp,0x10
c00130c0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00130c5:	89 f8                	mov    eax,edi
c00130c7:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00130cb:	52                   	push   edx
c00130cc:	52                   	push   edx
c00130cd:	8d 44 24 26          	lea    eax,[esp+0x26]
c00130d1:	50                   	push   eax
c00130d2:	56                   	push   esi
c00130d3:	e8 98 d7 fe ff       	call   c0000870 <strcat>
c00130d8:	83 c4 10             	add    esp,0x10
c00130db:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c00130e2:	75 0f                	jne    c00130f3 <VgaText::receiveKey(unsigned char)+0x143>
c00130e4:	83 fd 1c             	cmp    ebp,0x1c
c00130e7:	77 2c                	ja     c0013115 <VgaText::receiveKey(unsigned char)+0x165>
c00130e9:	b8 08 04 00 10       	mov    eax,0x10000408
c00130ee:	0f a3 e8             	bt     eax,ebp
c00130f1:	73 22                	jae    c0013115 <VgaText::receiveKey(unsigned char)+0x165>
c00130f3:	50                   	push   eax
c00130f4:	81 c3 02 01 00 00    	add    ebx,0x102
c00130fa:	50                   	push   eax
c00130fb:	56                   	push   esi
c00130fc:	53                   	push   ebx
c00130fd:	e8 6e d7 fe ff       	call   c0000870 <strcat>
c0013102:	83 c4 0c             	add    esp,0xc
c0013105:	68 80 00 00 00       	push   0x80
c001310a:	6a 00                	push   0x0
c001310c:	56                   	push   esi
c001310d:	e8 de d3 fe ff       	call   c00004f0 <memset>
c0013112:	83 c4 10             	add    esp,0x10
c0013115:	83 c4 2c             	add    esp,0x2c
c0013118:	5b                   	pop    ebx
c0013119:	5e                   	pop    esi
c001311a:	5f                   	pop    edi
c001311b:	5d                   	pop    ebp
c001311c:	c3                   	ret    
c001311d:	90                   	nop

c001311e <VgaText::doUpdate()>:
c001311e:	c3                   	ret    
c001311f:	90                   	nop

c0013120 <TSS::TSS()>:
c0013120:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013124:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001312b:	90                   	nop
c001312c:	c3                   	ret    
c001312d:	90                   	nop
c001312e:	66 90                	xchg   ax,ax

c0013130 <TSS::setESP(unsigned long)>:
c0013130:	55                   	push   ebp
c0013131:	89 e5                	mov    ebp,esp
c0013133:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013136:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013139:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001313c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001313f:	90                   	nop
c0013140:	5d                   	pop    ebp
c0013141:	c3                   	ret    
c0013142:	66 90                	xchg   ax,ax

c0013144 <TSS::flush()>:
c0013144:	55                   	push   ebp
c0013145:	89 e5                	mov    ebp,esp
c0013147:	83 ec 10             	sub    esp,0x10
c001314a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001314d:	8b 00                	mov    eax,DWORD PTR [eax]
c001314f:	83 c8 03             	or     eax,0x3
c0013152:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0013156:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001315a:	66 89 d0             	mov    ax,dx
c001315d:	0f 00 d8             	ltr    ax
c0013160:	90                   	nop
c0013161:	c9                   	leave  
c0013162:	c3                   	ret    
c0013163:	90                   	nop

c0013164 <TSS::setup(unsigned long, unsigned long)>:
c0013164:	55                   	push   ebp
c0013165:	89 e5                	mov    ebp,esp
c0013167:	83 ec 18             	sub    esp,0x18
c001316a:	83 ec 0c             	sub    esp,0xc
c001316d:	6a 68                	push   0x68
c001316f:	e8 60 cd ff ff       	call   c000fed4 <malloc>
c0013174:	83 c4 10             	add    esp,0x10
c0013177:	89 c2                	mov    edx,eax
c0013179:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001317c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001317f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013182:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013185:	83 ec 08             	sub    esp,0x8
c0013188:	50                   	push   eax
c0013189:	68 e4 a0 02 c0       	push   0xc002a0e4
c001318e:	e8 d3 3d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013193:	83 c4 10             	add    esp,0x10
c0013196:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013199:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001319c:	83 ec 04             	sub    esp,0x4
c001319f:	6a 68                	push   0x68
c00131a1:	6a 00                	push   0x0
c00131a3:	50                   	push   eax
c00131a4:	e8 47 d3 fe ff       	call   c00004f0 <memset>
c00131a9:	83 c4 10             	add    esp,0x10
c00131ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00131af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00131b2:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00131b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00131bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00131be:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00131c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00131c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00131ca:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00131cd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00131d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00131d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00131d6:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00131dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00131df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00131e2:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00131e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00131eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00131ee:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00131f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00131f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00131fa:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0013200:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013203:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013206:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001320c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001320f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013212:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0013218:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001321b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001321e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0013221:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0013224:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013227:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001322a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001322d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0013230:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013233:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013236:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c001323d:	83 ec 0c             	sub    esp,0xc
c0013240:	68 fb a0 02 c0       	push   0xc002a0fb
c0013245:	e8 1c 3d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001324a:	83 c4 10             	add    esp,0x10
c001324d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013250:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013253:	0f 20 da             	mov    edx,cr3
c0013256:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0013259:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001325c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001325f:	83 ec 0c             	sub    esp,0xc
c0013262:	68 fe a0 02 c0       	push   0xc002a0fe
c0013267:	e8 fa 3c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001326c:	83 c4 10             	add    esp,0x10
c001326f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013272:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013275:	83 ec 08             	sub    esp,0x8
c0013278:	50                   	push   eax
c0013279:	8d 45 ec             	lea    eax,[ebp-0x14]
c001327c:	50                   	push   eax
c001327d:	e8 a2 bd ff ff       	call   c000f024 <GDTEntry::setBase(unsigned int)>
c0013282:	83 c4 10             	add    esp,0x10
c0013285:	83 ec 08             	sub    esp,0x8
c0013288:	6a 68                	push   0x68
c001328a:	8d 45 ec             	lea    eax,[ebp-0x14]
c001328d:	50                   	push   eax
c001328e:	e8 ad bd ff ff       	call   c000f040 <GDTEntry::setLimit(unsigned int)>
c0013293:	83 c4 10             	add    esp,0x10
c0013296:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001329a:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001329d:	83 e0 0f             	and    eax,0xf
c00132a0:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00132a3:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00132a6:	83 c8 40             	or     eax,0x40
c00132a9:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00132ac:	83 ec 0c             	sub    esp,0xc
c00132af:	68 01 a1 02 c0       	push   0xc002a101
c00132b4:	e8 ad 3c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00132b9:	83 c4 10             	add    esp,0x10
c00132bc:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c00132c1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00132c7:	83 ec 08             	sub    esp,0x8
c00132ca:	50                   	push   eax
c00132cb:	68 04 a1 02 c0       	push   0xc002a104
c00132d0:	e8 91 3c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00132d5:	83 c4 10             	add    esp,0x10
c00132d8:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c00132dd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00132e3:	05 64 01 00 00       	add    eax,0x164
c00132e8:	83 ec 04             	sub    esp,0x4
c00132eb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00132ee:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00132f1:	50                   	push   eax
c00132f2:	e8 7d bd ff ff       	call   c000f074 <GDT::addEntry(GDTEntry)>
c00132f7:	83 c4 10             	add    esp,0x10
c00132fa:	89 c2                	mov    edx,eax
c00132fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00132ff:	89 10                	mov    DWORD PTR [eax],edx
c0013301:	83 ec 0c             	sub    esp,0xc
c0013304:	68 19 a1 02 c0       	push   0xc002a119
c0013309:	e8 58 3c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001330e:	83 c4 10             	add    esp,0x10
c0013311:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c0013316:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001331c:	05 64 01 00 00       	add    eax,0x164
c0013321:	83 ec 0c             	sub    esp,0xc
c0013324:	50                   	push   eax
c0013325:	e8 74 bd ff ff       	call   c000f09e <GDT::flush()>
c001332a:	83 c4 10             	add    esp,0x10
c001332d:	83 ec 0c             	sub    esp,0xc
c0013330:	68 1c a1 02 c0       	push   0xc002a11c
c0013335:	e8 2c 3c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001333a:	83 c4 10             	add    esp,0x10
c001333d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013340:	8b 00                	mov    eax,DWORD PTR [eax]
c0013342:	c9                   	leave  
c0013343:	c3                   	ret    

c0013344 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0013344:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013348:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001334c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001334f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0013354:	75 08                	jne    c001335e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0013356:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001335c:	eb 38                	jmp    c0013396 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001335e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0013363:	75 17                	jne    c001337c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0013365:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001336a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001336d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0013373:	8b 10                	mov    edx,DWORD PTR [eax]
c0013375:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013379:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001337c:	89 c1                	mov    ecx,eax
c001337e:	83 e1 fd             	and    ecx,0xfffffffd
c0013381:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0013387:	74 cd                	je     c0013356 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0013389:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001338e:	83 e0 ef             	and    eax,0xffffffef
c0013391:	83 f8 08             	cmp    eax,0x8
c0013394:	76 c0                	jbe    c0013356 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0013396:	31 c0                	xor    eax,eax
c0013398:	c3                   	ret    
c0013399:	90                   	nop

c001339a <ReservedFilename::isAtty()>:
c001339a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001339e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00133a1:	31 c0                	xor    eax,eax
c00133a3:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00133a9:	74 09                	je     c00133b4 <ReservedFilename::isAtty()+0x1a>
c00133ab:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00133b1:	0f 94 c0             	sete   al
c00133b4:	c3                   	ret    
c00133b5:	90                   	nop

c00133b6 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00133b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00133ba:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00133be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00133c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00133c5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00133ca:	75 08                	jne    c00133d4 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00133cc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00133d2:	eb 3d                	jmp    c0013411 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00133d4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00133d9:	75 17                	jne    c00133f2 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00133db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00133e3:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00133e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00133eb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00133ef:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00133f2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00133f7:	75 04                	jne    c00133fd <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00133f9:	89 0a                	mov    DWORD PTR [edx],ecx
c00133fb:	eb 14                	jmp    c0013411 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00133fd:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0013402:	74 c8                	je     c00133cc <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0013404:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0013409:	83 e0 ef             	and    eax,0xffffffef
c001340c:	83 f8 08             	cmp    eax,0x8
c001340f:	76 bb                	jbe    c00133cc <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0013411:	31 c0                	xor    eax,eax
c0013413:	c3                   	ret    

c0013414 <UnixFile::getFileDescriptor()>:
c0013414:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013418:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001341b:	c3                   	ret    

c001341c <UnixFile::UnixFile(int)>:
c001341c:	53                   	push   ebx
c001341d:	83 ec 28             	sub    esp,0x28
c0013420:	ba 48 a1 02 c0       	mov    edx,0xc002a148
c0013425:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013429:	89 10                	mov    DWORD PTR [eax],edx
c001342b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0013433:	0f 8f 90 01 00 00    	jg     c00135c9 <UnixFile::UnixFile(int)+0x1ad>
c0013439:	a1 60 d4 02 c0       	mov    eax,ds:0xc002d460
c001343e:	8d 50 01             	lea    edx,[eax+0x1]
c0013441:	89 15 60 d4 02 c0    	mov    DWORD PTR ds:0xc002d460,edx
c0013447:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001344b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001344e:	83 ec 08             	sub    esp,0x8
c0013451:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0013455:	68 78 32 03 c0       	push   0xc0033278
c001345a:	e8 a7 46 01 00       	call   c0027b06 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001345f:	83 c4 10             	add    esp,0x10
c0013462:	a0 74 32 03 c0       	mov    al,ds:0xc0033274
c0013467:	83 f0 01             	xor    eax,0x1
c001346a:	0f b6 c0             	movzx  eax,al
c001346d:	85 c0                	test   eax,eax
c001346f:	0f 84 55 01 00 00    	je     c00135ca <UnixFile::UnixFile(int)+0x1ae>
c0013475:	c6 05 74 32 03 c0 01 	mov    BYTE PTR ds:0xc0033274,0x1
c001347c:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0013484:	83 ec 0c             	sub    esp,0xc
c0013487:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001348b:	e8 44 ca ff ff       	call   c000fed4 <malloc>
c0013490:	83 c4 10             	add    esp,0x10
c0013493:	89 c3                	mov    ebx,eax
c0013495:	83 ec 08             	sub    esp,0x8
c0013498:	68 03 ff ff 0f       	push   0xfffff03
c001349d:	53                   	push   ebx
c001349e:	e8 2d 01 00 00       	call   c00135d0 <ReservedFilename::ReservedFilename(int)>
c00134a3:	83 c4 10             	add    esp,0x10
c00134a6:	89 1d 6c 32 03 c0    	mov    DWORD PTR ds:0xc003326c,ebx
c00134ac:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00134b4:	83 ec 0c             	sub    esp,0xc
c00134b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134bb:	e8 14 ca ff ff       	call   c000fed4 <malloc>
c00134c0:	83 c4 10             	add    esp,0x10
c00134c3:	89 c3                	mov    ebx,eax
c00134c5:	83 ec 08             	sub    esp,0x8
c00134c8:	68 01 ff ff 0f       	push   0xfffff01
c00134cd:	53                   	push   ebx
c00134ce:	e8 fd 00 00 00       	call   c00135d0 <ReservedFilename::ReservedFilename(int)>
c00134d3:	83 c4 10             	add    esp,0x10
c00134d6:	89 1d 70 32 03 c0    	mov    DWORD PTR ds:0xc0033270,ebx
c00134dc:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00134e4:	83 ec 0c             	sub    esp,0xc
c00134e7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00134eb:	e8 e4 c9 ff ff       	call   c000fed4 <malloc>
c00134f0:	83 c4 10             	add    esp,0x10
c00134f3:	89 c3                	mov    ebx,eax
c00134f5:	83 ec 08             	sub    esp,0x8
c00134f8:	68 00 ff ff 0f       	push   0xfffff00
c00134fd:	53                   	push   ebx
c00134fe:	e8 cd 00 00 00       	call   c00135d0 <ReservedFilename::ReservedFilename(int)>
c0013503:	83 c4 10             	add    esp,0x10
c0013506:	89 1d 64 32 03 c0    	mov    DWORD PTR ds:0xc0033264,ebx
c001350c:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0013514:	83 ec 0c             	sub    esp,0xc
c0013517:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001351b:	e8 b4 c9 ff ff       	call   c000fed4 <malloc>
c0013520:	83 c4 10             	add    esp,0x10
c0013523:	89 c3                	mov    ebx,eax
c0013525:	83 ec 08             	sub    esp,0x8
c0013528:	68 02 ff ff 0f       	push   0xfffff02
c001352d:	53                   	push   ebx
c001352e:	e8 9d 00 00 00       	call   c00135d0 <ReservedFilename::ReservedFilename(int)>
c0013533:	83 c4 10             	add    esp,0x10
c0013536:	89 1d 68 32 03 c0    	mov    DWORD PTR ds:0xc0033268,ebx
c001353c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013544:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0013549:	7f 7f                	jg     c00135ca <UnixFile::UnixFile(int)+0x1ae>
c001354b:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0013553:	83 ec 0c             	sub    esp,0xc
c0013556:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001355a:	e8 75 c9 ff ff       	call   c000fed4 <malloc>
c001355f:	83 c4 10             	add    esp,0x10
c0013562:	89 c3                	mov    ebx,eax
c0013564:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013568:	05 10 ff ff 0f       	add    eax,0xfffff10
c001356d:	83 ec 08             	sub    esp,0x8
c0013570:	50                   	push   eax
c0013571:	53                   	push   ebx
c0013572:	e8 59 00 00 00       	call   c00135d0 <ReservedFilename::ReservedFilename(int)>
c0013577:	83 c4 10             	add    esp,0x10
c001357a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001357e:	89 1c 85 40 32 03 c0 	mov    DWORD PTR [eax*4-0x3ffccdc0],ebx
c0013585:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001358d:	83 ec 0c             	sub    esp,0xc
c0013590:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013594:	e8 3b c9 ff ff       	call   c000fed4 <malloc>
c0013599:	83 c4 10             	add    esp,0x10
c001359c:	89 c3                	mov    ebx,eax
c001359e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135a2:	05 20 ff ff 0f       	add    eax,0xfffff20
c00135a7:	83 ec 08             	sub    esp,0x8
c00135aa:	50                   	push   eax
c00135ab:	53                   	push   ebx
c00135ac:	e8 1f 00 00 00       	call   c00135d0 <ReservedFilename::ReservedFilename(int)>
c00135b1:	83 c4 10             	add    esp,0x10
c00135b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135b8:	89 1c 85 00 32 03 c0 	mov    DWORD PTR [eax*4-0x3ffcce00],ebx
c00135bf:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00135c4:	e9 7b ff ff ff       	jmp    c0013544 <UnixFile::UnixFile(int)+0x128>
c00135c9:	90                   	nop
c00135ca:	83 c4 28             	add    esp,0x28
c00135cd:	5b                   	pop    ebx
c00135ce:	c3                   	ret    
c00135cf:	90                   	nop

c00135d0 <ReservedFilename::ReservedFilename(int)>:
c00135d0:	83 ec 0c             	sub    esp,0xc
c00135d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135d7:	83 ec 08             	sub    esp,0x8
c00135da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135de:	50                   	push   eax
c00135df:	e8 38 fe ff ff       	call   c001341c <UnixFile::UnixFile(int)>
c00135e4:	83 c4 10             	add    esp,0x10
c00135e7:	ba 64 a1 02 c0       	mov    edx,0xc002a164
c00135ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135f0:	89 10                	mov    DWORD PTR [eax],edx
c00135f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00135fa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00135fd:	90                   	nop
c00135fe:	83 c4 0c             	add    esp,0xc
c0013601:	c3                   	ret    

c0013602 <UnixFile::~UnixFile()>:
c0013602:	83 ec 1c             	sub    esp,0x1c
c0013605:	ba 48 a1 02 c0       	mov    edx,0xc002a148
c001360a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001360e:	89 10                	mov    DWORD PTR [eax],edx
c0013610:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013614:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013617:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001361c:	7f 76                	jg     c0013694 <UnixFile::~UnixFile()+0x92>
c001361e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013626:	83 ec 0c             	sub    esp,0xc
c0013629:	68 78 32 03 c0       	push   0xc0033278
c001362e:	e8 a7 45 01 00       	call   c0027bda <LinkedList<UnixFile>::getFirstElement()>
c0013633:	83 c4 10             	add    esp,0x10
c0013636:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001363a:	83 ec 0c             	sub    esp,0xc
c001363d:	68 78 32 03 c0       	push   0xc0033278
c0013642:	e8 9b 45 01 00       	call   c0027be2 <LinkedList<UnixFile>::removeFirst()>
c0013647:	83 c4 10             	add    esp,0x10
c001364a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001364e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0013652:	74 43                	je     c0013697 <UnixFile::~UnixFile()+0x95>
c0013654:	83 ec 08             	sub    esp,0x8
c0013657:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001365b:	68 78 32 03 c0       	push   0xc0033278
c0013660:	e8 a1 44 01 00       	call   c0027b06 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0013665:	83 c4 10             	add    esp,0x10
c0013668:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001366c:	8d 50 01             	lea    edx,[eax+0x1]
c001366f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013673:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0013678:	0f 94 c0             	sete   al
c001367b:	0f b6 c0             	movzx  eax,al
c001367e:	85 c0                	test   eax,eax
c0013680:	74 a4                	je     c0013626 <UnixFile::~UnixFile()+0x24>
c0013682:	83 ec 0c             	sub    esp,0xc
c0013685:	68 20 a1 02 c0       	push   0xc002a120
c001368a:	e8 99 cc ff ff       	call   c0010328 <KePanic(char const*)>
c001368f:	83 c4 10             	add    esp,0x10
c0013692:	eb 92                	jmp    c0013626 <UnixFile::~UnixFile()+0x24>
c0013694:	90                   	nop
c0013695:	eb 01                	jmp    c0013698 <UnixFile::~UnixFile()+0x96>
c0013697:	90                   	nop
c0013698:	90                   	nop
c0013699:	83 c4 1c             	add    esp,0x1c
c001369c:	c3                   	ret    
c001369d:	90                   	nop

c001369e <UnixFile::~UnixFile()>:
c001369e:	83 ec 0c             	sub    esp,0xc
c00136a1:	83 ec 0c             	sub    esp,0xc
c00136a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136a8:	e8 55 ff ff ff       	call   c0013602 <UnixFile::~UnixFile()>
c00136ad:	83 c4 10             	add    esp,0x10
c00136b0:	83 ec 08             	sub    esp,0x8
c00136b3:	6a 0c                	push   0xc
c00136b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136b9:	e8 16 a4 ff ff       	call   c000dad4 <operator delete(void*, unsigned long)>
c00136be:	83 c4 10             	add    esp,0x10
c00136c1:	83 c4 0c             	add    esp,0xc
c00136c4:	c3                   	ret    
c00136c5:	90                   	nop

c00136c6 <ReservedFilename::~ReservedFilename()>:
c00136c6:	83 ec 0c             	sub    esp,0xc
c00136c9:	ba 64 a1 02 c0       	mov    edx,0xc002a164
c00136ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136d2:	89 10                	mov    DWORD PTR [eax],edx
c00136d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136d8:	83 ec 0c             	sub    esp,0xc
c00136db:	50                   	push   eax
c00136dc:	e8 21 ff ff ff       	call   c0013602 <UnixFile::~UnixFile()>
c00136e1:	83 c4 10             	add    esp,0x10
c00136e4:	90                   	nop
c00136e5:	83 c4 0c             	add    esp,0xc
c00136e8:	c3                   	ret    
c00136e9:	90                   	nop

c00136ea <ReservedFilename::~ReservedFilename()>:
c00136ea:	83 ec 0c             	sub    esp,0xc
c00136ed:	83 ec 0c             	sub    esp,0xc
c00136f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136f4:	e8 cd ff ff ff       	call   c00136c6 <ReservedFilename::~ReservedFilename()>
c00136f9:	83 c4 10             	add    esp,0x10
c00136fc:	83 ec 08             	sub    esp,0x8
c00136ff:	6a 0c                	push   0xc
c0013701:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013705:	e8 ca a3 ff ff       	call   c000dad4 <operator delete(void*, unsigned long)>
c001370a:	83 c4 10             	add    esp,0x10
c001370d:	83 c4 0c             	add    esp,0xc
c0013710:	c3                   	ret    

c0013711 <KeGetFileFromDescriptor(int)>:
c0013711:	53                   	push   ebx
c0013712:	83 ec 08             	sub    esp,0x8
c0013715:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013719:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001371f:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0013725:	7f 30                	jg     c0013757 <KeGetFileFromDescriptor(int)+0x46>
c0013727:	83 ec 0c             	sub    esp,0xc
c001372a:	68 78 32 03 c0       	push   0xc0033278
c001372f:	e8 a6 44 01 00       	call   c0027bda <LinkedList<UnixFile>::getFirstElement()>
c0013734:	8d 50 ff             	lea    edx,[eax-0x1]
c0013737:	83 c4 10             	add    esp,0x10
c001373a:	83 fa fd             	cmp    edx,0xfffffffd
c001373d:	76 04                	jbe    c0013743 <KeGetFileFromDescriptor(int)+0x32>
c001373f:	31 c0                	xor    eax,eax
c0013741:	eb 6e                	jmp    c00137b1 <KeGetFileFromDescriptor(int)+0xa0>
c0013743:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0013746:	74 69                	je     c00137b1 <KeGetFileFromDescriptor(int)+0xa0>
c0013748:	52                   	push   edx
c0013749:	52                   	push   edx
c001374a:	50                   	push   eax
c001374b:	68 78 32 03 c0       	push   0xc0033278
c0013750:	e8 2f 45 01 00       	call   c0027c84 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0013755:	eb dd                	jmp    c0013734 <KeGetFileFromDescriptor(int)+0x23>
c0013757:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001375d:	a1 6c 32 03 c0       	mov    eax,ds:0xc003326c
c0013762:	74 4d                	je     c00137b1 <KeGetFileFromDescriptor(int)+0xa0>
c0013764:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c001376a:	a1 70 32 03 c0       	mov    eax,ds:0xc0033270
c001376f:	74 40                	je     c00137b1 <KeGetFileFromDescriptor(int)+0xa0>
c0013771:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0013777:	a1 68 32 03 c0       	mov    eax,ds:0xc0033268
c001377c:	74 33                	je     c00137b1 <KeGetFileFromDescriptor(int)+0xa0>
c001377e:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0013784:	a1 64 32 03 c0       	mov    eax,ds:0xc0033264
c0013789:	74 26                	je     c00137b1 <KeGetFileFromDescriptor(int)+0xa0>
c001378b:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0013791:	83 f8 08             	cmp    eax,0x8
c0013794:	77 09                	ja     c001379f <KeGetFileFromDescriptor(int)+0x8e>
c0013796:	8b 04 85 40 32 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccdc0]
c001379d:	eb 12                	jmp    c00137b1 <KeGetFileFromDescriptor(int)+0xa0>
c001379f:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00137a5:	83 fb 08             	cmp    ebx,0x8
c00137a8:	77 95                	ja     c001373f <KeGetFileFromDescriptor(int)+0x2e>
c00137aa:	8b 04 9d 00 32 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffcce00]
c00137b1:	83 c4 08             	add    esp,0x8
c00137b4:	5b                   	pop    ebx
c00137b5:	c3                   	ret    

c00137b6 <__static_initialization_and_destruction_0(int, int)>:
c00137b6:	83 ec 0c             	sub    esp,0xc
c00137b9:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00137be:	75 34                	jne    c00137f4 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00137c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00137c8:	75 2a                	jne    c00137f4 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00137ca:	83 ec 0c             	sub    esp,0xc
c00137cd:	68 78 32 03 c0       	push   0xc0033278
c00137d2:	e8 ed 42 01 00       	call   c0027ac4 <LinkedList<UnixFile>::LinkedList()>
c00137d7:	83 c4 10             	add    esp,0x10
c00137da:	83 ec 04             	sub    esp,0x4
c00137dd:	68 40 cc 02 c0       	push   0xc002cc40
c00137e2:	68 78 32 03 c0       	push   0xc0033278
c00137e7:	68 c2 7a 02 c0       	push   0xc0027ac2
c00137ec:	e8 93 a2 ff ff       	call   c000da84 <__cxa_atexit>
c00137f1:	83 c4 10             	add    esp,0x10
c00137f4:	90                   	nop
c00137f5:	83 c4 0c             	add    esp,0xc
c00137f8:	c3                   	ret    

c00137f9 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00137f9:	83 ec 0c             	sub    esp,0xc
c00137fc:	83 ec 08             	sub    esp,0x8
c00137ff:	68 ff ff 00 00       	push   0xffff
c0013804:	6a 01                	push   0x1
c0013806:	e8 ab ff ff ff       	call   c00137b6 <__static_initialization_and_destruction_0(int, int)>
c001380b:	83 c4 10             	add    esp,0x10
c001380e:	83 c4 0c             	add    esp,0xc
c0013811:	c3                   	ret    

c0013812 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0013812:	53                   	push   ebx
c0013813:	8b 15 68 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d468
c0013819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001381d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013821:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0013827:	89 d8                	mov    eax,ebx
c0013829:	d1 e8                	shr    eax,1
c001382b:	01 d0                	add    eax,edx
c001382d:	80 e3 01             	and    bl,0x1
c0013830:	8a 10                	mov    dl,BYTE PTR [eax]
c0013832:	75 09                	jne    c001383d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0013834:	83 e2 f0             	and    edx,0xfffffff0
c0013837:	09 ca                	or     edx,ecx
c0013839:	88 10                	mov    BYTE PTR [eax],dl
c001383b:	5b                   	pop    ebx
c001383c:	c3                   	ret    
c001383d:	0f b6 c9             	movzx  ecx,cl
c0013840:	83 e2 0f             	and    edx,0xf
c0013843:	c1 e1 04             	shl    ecx,0x4
c0013846:	09 ca                	or     edx,ecx
c0013848:	88 10                	mov    BYTE PTR [eax],dl
c001384a:	5b                   	pop    ebx
c001384b:	c3                   	ret    

c001384c <Virt::getPageState(unsigned long)>:
c001384c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013850:	8b 0d 68 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d468
c0013856:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001385c:	89 d0                	mov    eax,edx
c001385e:	d1 e8                	shr    eax,1
c0013860:	80 e2 01             	and    dl,0x1
c0013863:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0013866:	74 03                	je     c001386b <Virt::getPageState(unsigned long)+0x1f>
c0013868:	c1 e8 04             	shr    eax,0x4
c001386b:	83 e0 0f             	and    eax,0xf
c001386e:	c3                   	ret    

c001386f <Virt::allocateKernelVirtualPages(int)>:
c001386f:	55                   	push   ebp
c0013870:	57                   	push   edi
c0013871:	56                   	push   esi
c0013872:	31 f6                	xor    esi,esi
c0013874:	53                   	push   ebx
c0013875:	31 db                	xor    ebx,ebx
c0013877:	83 ec 1c             	sub    esp,0x1c
c001387a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001387f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013883:	8b 2d 64 d4 02 c0    	mov    ebp,DWORD PTR ds:0xc002d464
c0013889:	55                   	push   ebp
c001388a:	e8 bd ff ff ff       	call   c001384c <Virt::getPageState(unsigned long)>
c001388f:	5a                   	pop    edx
c0013890:	84 c0                	test   al,al
c0013892:	75 3d                	jne    c00138d1 <Virt::allocateKernelVirtualPages(int)+0x62>
c0013894:	85 db                	test   ebx,ebx
c0013896:	0f 44 f5             	cmove  esi,ebp
c0013899:	83 c3 01             	add    ebx,0x1
c001389c:	39 fb                	cmp    ebx,edi
c001389e:	74 5e                	je     c00138fe <Virt::allocateKernelVirtualPages(int)+0x8f>
c00138a0:	83 c5 01             	add    ebp,0x1
c00138a3:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c00138a9:	76 33                	jbe    c00138de <Virt::allocateKernelVirtualPages(int)+0x6f>
c00138ab:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00138b0:	c7 05 64 d4 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d464,0xc8000
c00138ba:	75 2a                	jne    c00138e6 <Virt::allocateKernelVirtualPages(int)+0x77>
c00138bc:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00138c1:	bd 00 80 0c 00       	mov    ebp,0xc8000
c00138c6:	55                   	push   ebp
c00138c7:	e8 80 ff ff ff       	call   c001384c <Virt::getPageState(unsigned long)>
c00138cc:	5a                   	pop    edx
c00138cd:	84 c0                	test   al,al
c00138cf:	74 c3                	je     c0013894 <Virt::allocateKernelVirtualPages(int)+0x25>
c00138d1:	83 c5 01             	add    ebp,0x1
c00138d4:	31 db                	xor    ebx,ebx
c00138d6:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c00138dc:	77 cd                	ja     c00138ab <Virt::allocateKernelVirtualPages(int)+0x3c>
c00138de:	89 2d 64 d4 02 c0    	mov    DWORD PTR ds:0xc002d464,ebp
c00138e4:	eb a3                	jmp    c0013889 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00138e6:	83 ec 0c             	sub    esp,0xc
c00138e9:	68 78 a1 02 c0       	push   0xc002a178
c00138ee:	e8 35 ca ff ff       	call   c0010328 <KePanic(char const*)>
c00138f3:	8b 2d 64 d4 02 c0    	mov    ebp,DWORD PTR ds:0xc002d464
c00138f9:	83 c4 10             	add    esp,0x10
c00138fc:	eb 8b                	jmp    c0013889 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00138fe:	89 35 64 d4 02 c0    	mov    DWORD PTR ds:0xc002d464,esi
c0013904:	83 fb 01             	cmp    ebx,0x1
c0013907:	74 63                	je     c001396c <Virt::allocateKernelVirtualPages(int)+0xfd>
c0013909:	85 ff                	test   edi,edi
c001390b:	74 41                	je     c001394e <Virt::allocateKernelVirtualPages(int)+0xdf>
c001390d:	89 f0                	mov    eax,esi
c001390f:	31 db                	xor    ebx,ebx
c0013911:	8d 6f ff             	lea    ebp,[edi-0x1]
c0013914:	eb 16                	jmp    c001392c <Virt::allocateKernelVirtualPages(int)+0xbd>
c0013916:	6a 01                	push   0x1
c0013918:	83 c3 01             	add    ebx,0x1
c001391b:	50                   	push   eax
c001391c:	e8 f1 fe ff ff       	call   c0013812 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013921:	39 fb                	cmp    ebx,edi
c0013923:	58                   	pop    eax
c0013924:	5a                   	pop    edx
c0013925:	74 27                	je     c001394e <Virt::allocateKernelVirtualPages(int)+0xdf>
c0013927:	a1 64 d4 02 c0       	mov    eax,ds:0xc002d464
c001392c:	8d 50 01             	lea    edx,[eax+0x1]
c001392f:	85 db                	test   ebx,ebx
c0013931:	89 15 64 d4 02 c0    	mov    DWORD PTR ds:0xc002d464,edx
c0013937:	74 22                	je     c001395b <Virt::allocateKernelVirtualPages(int)+0xec>
c0013939:	39 dd                	cmp    ebp,ebx
c001393b:	75 d9                	jne    c0013916 <Virt::allocateKernelVirtualPages(int)+0xa7>
c001393d:	6a 03                	push   0x3
c001393f:	83 c3 01             	add    ebx,0x1
c0013942:	50                   	push   eax
c0013943:	e8 ca fe ff ff       	call   c0013812 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013948:	39 fb                	cmp    ebx,edi
c001394a:	59                   	pop    ecx
c001394b:	58                   	pop    eax
c001394c:	75 d9                	jne    c0013927 <Virt::allocateKernelVirtualPages(int)+0xb8>
c001394e:	83 c4 1c             	add    esp,0x1c
c0013951:	89 f0                	mov    eax,esi
c0013953:	5b                   	pop    ebx
c0013954:	c1 e0 0c             	shl    eax,0xc
c0013957:	5e                   	pop    esi
c0013958:	5f                   	pop    edi
c0013959:	5d                   	pop    ebp
c001395a:	c3                   	ret    
c001395b:	6a 02                	push   0x2
c001395d:	bb 01 00 00 00       	mov    ebx,0x1
c0013962:	50                   	push   eax
c0013963:	e8 aa fe ff ff       	call   c0013812 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013968:	58                   	pop    eax
c0013969:	5a                   	pop    edx
c001396a:	eb bb                	jmp    c0013927 <Virt::allocateKernelVirtualPages(int)+0xb8>
c001396c:	6a 04                	push   0x4
c001396e:	56                   	push   esi
c001396f:	8d 46 01             	lea    eax,[esi+0x1]
c0013972:	a3 64 d4 02 c0       	mov    ds:0xc002d464,eax
c0013977:	e8 96 fe ff ff       	call   c0013812 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001397c:	89 f0                	mov    eax,esi
c001397e:	59                   	pop    ecx
c001397f:	c1 e0 0c             	shl    eax,0xc
c0013982:	5b                   	pop    ebx
c0013983:	83 c4 1c             	add    esp,0x1c
c0013986:	5b                   	pop    ebx
c0013987:	5e                   	pop    esi
c0013988:	5f                   	pop    edi
c0013989:	5d                   	pop    ebp
c001398a:	c3                   	ret    

c001398b <Virt::freeSwapfilePage(unsigned long)>:
c001398b:	53                   	push   ebx
c001398c:	8b 15 8c 32 03 c0    	mov    edx,DWORD PTR ds:0xc003328c
c0013992:	b8 01 00 00 00       	mov    eax,0x1
c0013997:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001399b:	d3 e0                	shl    eax,cl
c001399d:	89 cb                	mov    ebx,ecx
c001399f:	c1 eb 05             	shr    ebx,0x5
c00139a2:	f7 d0                	not    eax
c00139a4:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c00139a7:	21 c1                	and    ecx,eax
c00139a9:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c00139ac:	5b                   	pop    ebx
c00139ad:	c3                   	ret    

c00139ae <Virt::swapIDToSector(unsigned long)>:
c00139ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139b2:	8b 15 6c d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d46c
c00139b8:	8b 0d 74 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d474
c00139be:	0f af c2             	imul   eax,edx
c00139c1:	01 c8                	add    eax,ecx
c00139c3:	c3                   	ret    

c00139c4 <Virt::allocateSwapfilePage()>:
c00139c4:	55                   	push   ebp
c00139c5:	31 d2                	xor    edx,edx
c00139c7:	57                   	push   edi
c00139c8:	56                   	push   esi
c00139c9:	53                   	push   ebx
c00139ca:	83 ec 0c             	sub    esp,0xc
c00139cd:	8b 1d 70 d4 02 c0    	mov    ebx,DWORD PTR ds:0xc002d470
c00139d3:	8b 0d 6c d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d46c
c00139d9:	89 d8                	mov    eax,ebx
c00139db:	f7 f1                	div    ecx
c00139dd:	39 cb                	cmp    ebx,ecx
c00139df:	72 2f                	jb     c0013a10 <Virt::allocateSwapfilePage()+0x4c>
c00139e1:	8b 35 8c 32 03 c0    	mov    esi,DWORD PTR ds:0xc003328c
c00139e7:	8b 16                	mov    edx,DWORD PTR [esi]
c00139e9:	f6 c2 01             	test   dl,0x1
c00139ec:	74 3e                	je     c0013a2c <Virt::allocateSwapfilePage()+0x68>
c00139ee:	31 c9                	xor    ecx,ecx
c00139f0:	bf 01 00 00 00       	mov    edi,0x1
c00139f5:	eb 12                	jmp    c0013a09 <Virt::allocateSwapfilePage()+0x45>
c00139f7:	89 ca                	mov    edx,ecx
c00139f9:	89 fd                	mov    ebp,edi
c00139fb:	c1 ea 05             	shr    edx,0x5
c00139fe:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0013a01:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013a03:	d3 e5                	shl    ebp,cl
c0013a05:	85 ea                	test   edx,ebp
c0013a07:	74 2c                	je     c0013a35 <Virt::allocateSwapfilePage()+0x71>
c0013a09:	83 c1 01             	add    ecx,0x1
c0013a0c:	39 c8                	cmp    eax,ecx
c0013a0e:	77 e7                	ja     c00139f7 <Virt::allocateSwapfilePage()+0x33>
c0013a10:	83 ec 0c             	sub    esp,0xc
c0013a13:	68 8b a4 02 c0       	push   0xc002a48b
c0013a18:	e8 0b c9 ff ff       	call   c0010328 <KePanic(char const*)>
c0013a1d:	83 c4 10             	add    esp,0x10
c0013a20:	31 c9                	xor    ecx,ecx
c0013a22:	83 c4 0c             	add    esp,0xc
c0013a25:	89 c8                	mov    eax,ecx
c0013a27:	5b                   	pop    ebx
c0013a28:	5e                   	pop    esi
c0013a29:	5f                   	pop    edi
c0013a2a:	5d                   	pop    ebp
c0013a2b:	c3                   	ret    
c0013a2c:	89 f3                	mov    ebx,esi
c0013a2e:	bd 01 00 00 00       	mov    ebp,0x1
c0013a33:	31 c9                	xor    ecx,ecx
c0013a35:	09 ea                	or     edx,ebp
c0013a37:	89 c8                	mov    eax,ecx
c0013a39:	89 13                	mov    DWORD PTR [ebx],edx
c0013a3b:	83 c4 0c             	add    esp,0xc
c0013a3e:	5b                   	pop    ebx
c0013a3f:	5e                   	pop    esi
c0013a40:	5f                   	pop    edi
c0013a41:	5d                   	pop    ebp
c0013a42:	c3                   	ret    

c0013a43 <Virt::virtualMemorySetup()>:
c0013a43:	53                   	push   ebx
c0013a44:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0013a49:	6a 0f                	push   0xf
c0013a4b:	53                   	push   ebx
c0013a4c:	83 c3 01             	add    ebx,0x1
c0013a4f:	e8 be fd ff ff       	call   c0013812 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013a54:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0013a5a:	58                   	pop    eax
c0013a5b:	5a                   	pop    edx
c0013a5c:	75 eb                	jne    c0013a49 <Virt::virtualMemorySetup()+0x6>
c0013a5e:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0013a63:	6a 00                	push   0x0
c0013a65:	53                   	push   ebx
c0013a66:	83 c3 01             	add    ebx,0x1
c0013a69:	e8 a4 fd ff ff       	call   c0013812 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013a6e:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0013a74:	59                   	pop    ecx
c0013a75:	58                   	pop    eax
c0013a76:	75 eb                	jne    c0013a63 <Virt::virtualMemorySetup()+0x20>
c0013a78:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0013a7d:	6a 0f                	push   0xf
c0013a7f:	53                   	push   ebx
c0013a80:	83 c3 01             	add    ebx,0x1
c0013a83:	e8 8a fd ff ff       	call   c0013812 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013a88:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0013a8e:	58                   	pop    eax
c0013a8f:	5a                   	pop    edx
c0013a90:	75 eb                	jne    c0013a7d <Virt::virtualMemorySetup()+0x3a>
c0013a92:	5b                   	pop    ebx
c0013a93:	c3                   	ret    

c0013a94 <Virt::setupPageSwapping(int)>:
c0013a94:	53                   	push   ebx
c0013a95:	83 ec 0c             	sub    esp,0xc
c0013a98:	a1 e8 2a 03 c0       	mov    eax,ds:0xc0032ae8
c0013a9d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013aa1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0013aa7:	8b 10                	mov    edx,DWORD PTR [eax]
c0013aa9:	53                   	push   ebx
c0013aaa:	68 a2 a4 02 c0       	push   0xc002a4a2
c0013aaf:	50                   	push   eax
c0013ab0:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0013ab3:	c1 e3 0b             	shl    ebx,0xb
c0013ab6:	89 1d 70 d4 02 c0    	mov    DWORD PTR ds:0xc002d470,ebx
c0013abc:	c1 eb 08             	shr    ebx,0x8
c0013abf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ac2:	c6 05 78 d4 02 c0 43 	mov    BYTE PTR ds:0xc002d478,0x43
c0013ac9:	c7 05 6c d4 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002d46c,0x8
c0013ad3:	a3 74 d4 02 c0       	mov    ds:0xc002d474,eax
c0013ad8:	e8 f7 c3 ff ff       	call   c000fed4 <malloc>
c0013add:	31 d2                	xor    edx,edx
c0013adf:	83 c4 0c             	add    esp,0xc
c0013ae2:	a3 8c 32 03 c0       	mov    ds:0xc003328c,eax
c0013ae7:	89 c1                	mov    ecx,eax
c0013ae9:	a1 70 d4 02 c0       	mov    eax,ds:0xc002d470
c0013aee:	f7 35 6c d4 02 c0    	div    DWORD PTR ds:0xc002d46c
c0013af4:	c1 e8 05             	shr    eax,0x5
c0013af7:	50                   	push   eax
c0013af8:	6a 00                	push   0x0
c0013afa:	51                   	push   ecx
c0013afb:	e8 f0 c9 fe ff       	call   c00004f0 <memset>
c0013b00:	83 c4 18             	add    esp,0x18
c0013b03:	5b                   	pop    ebx
c0013b04:	c3                   	ret    
c0013b05:	90                   	nop

c0013b06 <VAS::setCPUSpecific(unsigned long)>:
c0013b06:	c3                   	ret    
c0013b07:	90                   	nop

c0013b08 <VAS::VAS(VAS*)>:
c0013b08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b17:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013b1e:	90                   	nop
c0013b1f:	c3                   	ret    

c0013b20 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0013b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013b24:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0013b29:	89 c2                	mov    edx,eax
c0013b2b:	c1 ea 16             	shr    edx,0x16
c0013b2e:	c1 e8 0a             	shr    eax,0xa
c0013b31:	83 f9 01             	cmp    ecx,0x1
c0013b34:	19 c9                	sbb    ecx,ecx
c0013b36:	25 fc 0f 00 00       	and    eax,0xffc
c0013b3b:	c1 e2 0c             	shl    edx,0xc
c0013b3e:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0013b44:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0013b4b:	01 d0                	add    eax,edx
c0013b4d:	c3                   	ret    

c0013b4e <VAS::getPageTableEntry(unsigned long)>:
c0013b4e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013b52:	89 ca                	mov    edx,ecx
c0013b54:	c1 ea 16             	shr    edx,0x16
c0013b57:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0013b5d:	c1 e9 0a             	shr    ecx,0xa
c0013b60:	c1 e0 0c             	shl    eax,0xc
c0013b63:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0013b69:	8d 04 08             	lea    eax,[eax+ecx*1]
c0013b6c:	c3                   	ret    

c0013b6d <Virt::freeKernelVirtualPages(unsigned long)>:
c0013b6d:	55                   	push   ebp
c0013b6e:	57                   	push   edi
c0013b6f:	bf 01 00 00 00       	mov    edi,0x1
c0013b74:	56                   	push   esi
c0013b75:	53                   	push   ebx
c0013b76:	83 ec 1c             	sub    esp,0x1c
c0013b79:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013b7d:	c1 ee 0c             	shr    esi,0xc
c0013b80:	eb 48                	jmp    c0013bca <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0013b82:	a1 90 32 03 c0       	mov    eax,ds:0xc0033290
c0013b87:	83 ec 08             	sub    esp,0x8
c0013b8a:	55                   	push   ebp
c0013b8b:	50                   	push   eax
c0013b8c:	e8 bd ff ff ff       	call   c0013b4e <VAS::getPageTableEntry(unsigned long)>
c0013b91:	83 c4 10             	add    esp,0x10
c0013b94:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b96:	f6 c6 04             	test   dh,0x4
c0013b99:	75 70                	jne    c0013c0b <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0013b9b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013ba1:	83 fb 04             	cmp    ebx,0x4
c0013ba4:	0f 84 8a 00 00 00    	je     c0013c34 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0013baa:	83 fb 02             	cmp    ebx,0x2
c0013bad:	0f 84 9a 00 00 00    	je     c0013c4d <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0013bb3:	83 fb 03             	cmp    ebx,0x3
c0013bb6:	0f 84 be 00 00 00    	je     c0013c7a <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0013bbc:	83 fb 01             	cmp    ebx,0x1
c0013bbf:	0f 84 a2 00 00 00    	je     c0013c67 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013bc5:	83 c6 01             	add    esi,0x1
c0013bc8:	31 ff                	xor    edi,edi
c0013bca:	56                   	push   esi
c0013bcb:	89 f5                	mov    ebp,esi
c0013bcd:	e8 7a fc ff ff       	call   c001384c <Virt::getPageState(unsigned long)>
c0013bd2:	c1 e5 0c             	shl    ebp,0xc
c0013bd5:	5a                   	pop    edx
c0013bd6:	0f b6 d8             	movzx  ebx,al
c0013bd9:	85 db                	test   ebx,ebx
c0013bdb:	75 a5                	jne    c0013b82 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0013bdd:	83 ec 0c             	sub    esp,0xc
c0013be0:	68 b9 a4 02 c0       	push   0xc002a4b9
c0013be5:	e8 3e c7 ff ff       	call   c0010328 <KePanic(char const*)>
c0013bea:	5a                   	pop    edx
c0013beb:	59                   	pop    ecx
c0013bec:	55                   	push   ebp
c0013bed:	8b 2d 90 32 03 c0    	mov    ebp,DWORD PTR ds:0xc0033290
c0013bf3:	55                   	push   ebp
c0013bf4:	e8 55 ff ff ff       	call   c0013b4e <VAS::getPageTableEntry(unsigned long)>
c0013bf9:	83 c4 10             	add    esp,0x10
c0013bfc:	8b 10                	mov    edx,DWORD PTR [eax]
c0013bfe:	f6 c6 04             	test   dh,0x4
c0013c01:	75 08                	jne    c0013c0b <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0013c03:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013c09:	eb ba                	jmp    c0013bc5 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013c0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013c0f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013c15:	83 ec 0c             	sub    esp,0xc
c0013c18:	52                   	push   edx
c0013c19:	e8 9b c8 ff ff       	call   c00104b9 <Phys::freePage(unsigned long)>
c0013c1e:	83 c4 10             	add    esp,0x10
c0013c21:	83 fb 04             	cmp    ebx,0x4
c0013c24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013c28:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013c2e:	0f 85 76 ff ff ff    	jne    c0013baa <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0013c34:	83 e7 01             	and    edi,0x1
c0013c37:	75 46                	jne    c0013c7f <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0013c39:	c7 44 24 30 98 a1 02 c0 	mov    DWORD PTR [esp+0x30],0xc002a198
c0013c41:	83 c4 1c             	add    esp,0x1c
c0013c44:	5b                   	pop    ebx
c0013c45:	5e                   	pop    esi
c0013c46:	5f                   	pop    edi
c0013c47:	5d                   	pop    ebp
c0013c48:	e9 db c6 ff ff       	jmp    c0010328 <KePanic(char const*)>
c0013c4d:	83 e7 01             	and    edi,0x1
c0013c50:	75 15                	jne    c0013c67 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013c52:	83 ec 0c             	sub    esp,0xc
c0013c55:	68 d5 a4 02 c0       	push   0xc002a4d5
c0013c5a:	e8 c9 c6 ff ff       	call   c0010328 <KePanic(char const*)>
c0013c5f:	83 c4 10             	add    esp,0x10
c0013c62:	e9 5e ff ff ff       	jmp    c0013bc5 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013c67:	83 ec 08             	sub    esp,0x8
c0013c6a:	6a 00                	push   0x0
c0013c6c:	56                   	push   esi
c0013c6d:	e8 a0 fb ff ff       	call   c0013812 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013c72:	83 c4 10             	add    esp,0x10
c0013c75:	e9 4b ff ff ff       	jmp    c0013bc5 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013c7a:	83 e7 01             	and    edi,0x1
c0013c7d:	75 16                	jne    c0013c95 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0013c7f:	83 ec 08             	sub    esp,0x8
c0013c82:	6a 00                	push   0x0
c0013c84:	56                   	push   esi
c0013c85:	e8 88 fb ff ff       	call   c0013812 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013c8a:	83 c4 10             	add    esp,0x10
c0013c8d:	83 c4 1c             	add    esp,0x1c
c0013c90:	5b                   	pop    ebx
c0013c91:	5e                   	pop    esi
c0013c92:	5f                   	pop    edi
c0013c93:	5d                   	pop    ebp
c0013c94:	c3                   	ret    
c0013c95:	c7 44 24 30 f1 a4 02 c0 	mov    DWORD PTR [esp+0x30],0xc002a4f1
c0013c9d:	83 c4 1c             	add    esp,0x1c
c0013ca0:	5b                   	pop    ebx
c0013ca1:	5e                   	pop    esi
c0013ca2:	5f                   	pop    edi
c0013ca3:	5d                   	pop    ebp
c0013ca4:	e9 7f c6 ff ff       	jmp    c0010328 <KePanic(char const*)>
c0013ca9:	90                   	nop

c0013caa <VAS::freeAllocatedPages(unsigned long)>:
c0013caa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013cb2:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0013cb6:	74 09                	je     c0013cc1 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0013cb8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013cbc:	e9 ac fe ff ff       	jmp    c0013b6d <Virt::freeKernelVirtualPages(unsigned long)>
c0013cc1:	c7 44 24 04 bc a1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a1bc
c0013cc9:	e9 98 32 ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>

c0013cce <VAS::virtualToPhysical(unsigned long)>:
c0013cce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013cd2:	50                   	push   eax
c0013cd3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013cd7:	52                   	push   edx
c0013cd8:	e8 71 fe ff ff       	call   c0013b4e <VAS::getPageTableEntry(unsigned long)>
c0013cdd:	59                   	pop    ecx
c0013cde:	5a                   	pop    edx
c0013cdf:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ce1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013ce6:	c3                   	ret    
c0013ce7:	90                   	nop

c0013ce8 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0013ce8:	55                   	push   ebp
c0013ce9:	57                   	push   edi
c0013cea:	56                   	push   esi
c0013ceb:	53                   	push   ebx
c0013cec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013cf0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0013cf4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013cf8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013cfc:	85 db                	test   ebx,ebx
c0013cfe:	7e 24                	jle    c0013d24 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0013d00:	c1 e3 0c             	shl    ebx,0xc
c0013d03:	01 f3                	add    ebx,esi
c0013d05:	56                   	push   esi
c0013d06:	81 c6 00 10 00 00    	add    esi,0x1000
c0013d0c:	55                   	push   ebp
c0013d0d:	e8 3c fe ff ff       	call   c0013b4e <VAS::getPageTableEntry(unsigned long)>
c0013d12:	5a                   	pop    edx
c0013d13:	59                   	pop    ecx
c0013d14:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013d16:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013d1a:	21 f9                	and    ecx,edi
c0013d1c:	09 d1                	or     ecx,edx
c0013d1e:	39 f3                	cmp    ebx,esi
c0013d20:	89 08                	mov    DWORD PTR [eax],ecx
c0013d22:	75 e1                	jne    c0013d05 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0013d24:	5b                   	pop    ebx
c0013d25:	5e                   	pop    esi
c0013d26:	5f                   	pop    edi
c0013d27:	5d                   	pop    ebp
c0013d28:	c3                   	ret    
c0013d29:	90                   	nop

c0013d2a <VAS::VAS()>:
c0013d2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d2e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d39:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013d40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d44:	a3 90 32 03 c0       	mov    ds:0xc0033290,eax
c0013d49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d4d:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0013d51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d55:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0013d58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d5c:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0013d63:	ba 7d e0 02 c0       	mov    edx,0xc002e07d
c0013d68:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c0013d6d:	29 c2                	sub    edx,eax
c0013d6f:	89 d0                	mov    eax,edx
c0013d71:	05 ff 0f 00 00       	add    eax,0xfff
c0013d76:	c1 e8 0c             	shr    eax,0xc
c0013d79:	89 c2                	mov    edx,eax
c0013d7b:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c0013d80:	6a 04                	push   0x4
c0013d82:	6a ff                	push   0xffffffff
c0013d84:	52                   	push   edx
c0013d85:	50                   	push   eax
c0013d86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013d8a:	e8 59 ff ff ff       	call   c0013ce8 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013d8f:	83 c4 14             	add    esp,0x14
c0013d92:	90                   	nop
c0013d93:	c3                   	ret    

c0013d94 <VAS::setToWriteCombining(unsigned long, int)>:
c0013d94:	a1 24 34 03 c0       	mov    eax,ds:0xc0033424
c0013d99:	50                   	push   eax
c0013d9a:	6a ff                	push   0xffffffff
c0013d9c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013da0:	52                   	push   edx
c0013da1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013da5:	51                   	push   ecx
c0013da6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013daa:	50                   	push   eax
c0013dab:	e8 38 ff ff ff       	call   c0013ce8 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013db0:	83 c4 14             	add    esp,0x14
c0013db3:	c3                   	ret    

c0013db4 <VAS::mapOtherVASIn(bool, VAS*)>:
c0013db4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013db8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013dbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013dbf:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0013dc2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013dc7:	83 f8 01             	cmp    eax,0x1
c0013dca:	19 c0                	sbb    eax,eax
c0013dcc:	83 ca 03             	or     edx,0x3
c0013dcf:	83 e0 fc             	and    eax,0xfffffffc
c0013dd2:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0013dd9:	0f 20 d8             	mov    eax,cr3
c0013ddc:	0f 22 d8             	mov    cr3,eax
c0013ddf:	c3                   	ret    

c0013de0 <VAS::~VAS()>:
c0013de0:	83 ec 2c             	sub    esp,0x2c
c0013de3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013deb:	fa                   	cli    
c0013dec:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0013df1:	83 c0 01             	add    eax,0x1
c0013df4:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0013df9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013dfe:	8b 00                	mov    eax,DWORD PTR [eax]
c0013e00:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013e03:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0013e09:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013e0d:	6a 01                	push   0x1
c0013e0f:	50                   	push   eax
c0013e10:	e8 9f ff ff ff       	call   c0013db4 <VAS::mapOtherVASIn(bool, VAS*)>
c0013e15:	83 c4 0c             	add    esp,0xc
c0013e18:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013e20:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0013e28:	0f 8f d8 00 00 00    	jg     c0013f06 <VAS::~VAS()+0x126>
c0013e2e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e32:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013e35:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e39:	c1 e2 02             	shl    edx,0x2
c0013e3c:	01 d0                	add    eax,edx
c0013e3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0013e40:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013e44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e48:	83 e0 01             	and    eax,0x1
c0013e4b:	0f 84 ab 00 00 00    	je     c0013efc <VAS::~VAS()+0x11c>
c0013e51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013e59:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0013e61:	7f 74                	jg     c0013ed7 <VAS::~VAS()+0xf7>
c0013e63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e67:	c1 e0 0a             	shl    eax,0xa
c0013e6a:	89 c2                	mov    edx,eax
c0013e6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e70:	01 d0                	add    eax,edx
c0013e72:	c1 e0 0c             	shl    eax,0xc
c0013e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013e79:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013e7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0013e80:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013e83:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0013e89:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013e8d:	6a 01                	push   0x1
c0013e8f:	50                   	push   eax
c0013e90:	e8 8b fc ff ff       	call   c0013b20 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0013e95:	83 c4 0c             	add    esp,0xc
c0013e98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013ea0:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ea2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013eaa:	25 01 04 00 00       	and    eax,0x401
c0013eaf:	3d 01 04 00 00       	cmp    eax,0x401
c0013eb4:	75 1a                	jne    c0013ed0 <VAS::~VAS()+0xf0>
c0013eb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013eba:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013ebf:	83 ec 0c             	sub    esp,0xc
c0013ec2:	50                   	push   eax
c0013ec3:	e8 f1 c5 ff ff       	call   c00104b9 <Phys::freePage(unsigned long)>
c0013ec8:	83 c4 10             	add    esp,0x10
c0013ecb:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013ed0:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0013ed5:	eb 82                	jmp    c0013e59 <VAS::~VAS()+0x79>
c0013ed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013edb:	25 00 04 00 00       	and    eax,0x400
c0013ee0:	74 1a                	je     c0013efc <VAS::~VAS()+0x11c>
c0013ee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ee6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013eeb:	83 ec 0c             	sub    esp,0xc
c0013eee:	50                   	push   eax
c0013eef:	e8 c5 c5 ff ff       	call   c00104b9 <Phys::freePage(unsigned long)>
c0013ef4:	83 c4 10             	add    esp,0x10
c0013ef7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013efc:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013f01:	e9 1a ff ff ff       	jmp    c0013e20 <VAS::~VAS()+0x40>
c0013f06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f0a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013f0d:	83 ec 0c             	sub    esp,0xc
c0013f10:	50                   	push   eax
c0013f11:	e8 57 fc ff ff       	call   c0013b6d <Virt::freeKernelVirtualPages(unsigned long)>
c0013f16:	83 c4 10             	add    esp,0x10
c0013f19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013f20:	83 ec 0c             	sub    esp,0xc
c0013f23:	50                   	push   eax
c0013f24:	e8 90 c5 ff ff       	call   c00104b9 <Phys::freePage(unsigned long)>
c0013f29:	83 c4 10             	add    esp,0x10
c0013f2c:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013f31:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0013f39:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0013f3e:	85 c0                	test   eax,eax
c0013f40:	75 01                	jne    c0013f43 <VAS::~VAS()+0x163>
c0013f42:	fb                   	sti    
c0013f43:	90                   	nop
c0013f44:	83 c4 2c             	add    esp,0x2c
c0013f47:	c3                   	ret    

c0013f48 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0013f48:	55                   	push   ebp
c0013f49:	57                   	push   edi
c0013f4a:	56                   	push   esi
c0013f4b:	53                   	push   ebx
c0013f4c:	83 ec 1c             	sub    esp,0x1c
c0013f4f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013f53:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013f57:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013f5b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0013f61:	77 08                	ja     c0013f6b <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0013f63:	0f 20 d8             	mov    eax,cr3
c0013f66:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0013f69:	75 43                	jne    c0013fae <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0013f6b:	89 d8                	mov    eax,ebx
c0013f6d:	09 f8                	or     eax,edi
c0013f6f:	a9 ff 0f 00 00       	test   eax,0xfff
c0013f74:	75 53                	jne    c0013fc9 <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0013f76:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0013f79:	89 de                	mov    esi,ebx
c0013f7b:	c1 ee 16             	shr    esi,0x16
c0013f7e:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0013f85:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0013f89:	74 50                	je     c0013fdb <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0013f8b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013f8f:	c1 eb 0a             	shr    ebx,0xa
c0013f92:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0013f98:	c1 e6 0c             	shl    esi,0xc
c0013f9b:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013fa1:	09 c7                	or     edi,eax
c0013fa3:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0013fa6:	83 c4 1c             	add    esp,0x1c
c0013fa9:	5b                   	pop    ebx
c0013faa:	5e                   	pop    esi
c0013fab:	5f                   	pop    edi
c0013fac:	5d                   	pop    ebp
c0013fad:	c3                   	ret    
c0013fae:	83 ec 0c             	sub    esp,0xc
c0013fb1:	68 e0 a1 02 c0       	push   0xc002a1e0
c0013fb6:	e8 ab 2f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013fbb:	89 d8                	mov    eax,ebx
c0013fbd:	83 c4 10             	add    esp,0x10
c0013fc0:	09 f8                	or     eax,edi
c0013fc2:	a9 ff 0f 00 00       	test   eax,0xfff
c0013fc7:	74 ad                	je     c0013f76 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0013fc9:	83 ec 0c             	sub    esp,0xc
c0013fcc:	68 48 a2 02 c0       	push   0xc002a248
c0013fd1:	e8 52 c3 ff ff       	call   c0010328 <KePanic(char const*)>
c0013fd6:	83 c4 10             	add    esp,0x10
c0013fd9:	eb 9b                	jmp    c0013f76 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0013fdb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013fdf:	e8 3e c5 ff ff       	call   c0010522 <Phys::allocatePage()>
c0013fe4:	8b 0d 90 32 03 c0    	mov    ecx,DWORD PTR ds:0xc0033290
c0013fea:	83 ec 0c             	sub    esp,0xc
c0013fed:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013ff1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013ff5:	6a 01                	push   0x1
c0013ff7:	e8 73 f8 ff ff       	call   c001386f <Virt::allocateKernelVirtualPages(int)>
c0013ffc:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0014003:	6a 01                	push   0x1
c0014005:	50                   	push   eax
c0014006:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001400a:	52                   	push   edx
c001400b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001400f:	51                   	push   ecx
c0014010:	e8 2d 01 00 00       	call   c0014142 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014015:	83 c4 1c             	add    esp,0x1c
c0014018:	68 00 10 00 00       	push   0x1000
c001401d:	6a 00                	push   0x0
c001401f:	50                   	push   eax
c0014020:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014024:	e8 c7 c4 fe ff       	call   c00004f0 <memset>
c0014029:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001402d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0014030:	e8 38 fb ff ff       	call   c0013b6d <Virt::freeKernelVirtualPages(unsigned long)>
c0014035:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014039:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001403d:	83 c4 10             	add    esp,0x10
c0014040:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0014043:	0d 07 04 00 00       	or     eax,0x407
c0014048:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c001404b:	e9 3b ff ff ff       	jmp    c0013f8b <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0014050 <VAS::allocatePages(int, int)>:
c0014050:	55                   	push   ebp
c0014051:	57                   	push   edi
c0014052:	56                   	push   esi
c0014053:	53                   	push   ebx
c0014054:	83 ec 1c             	sub    esp,0x1c
c0014057:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001405b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001405f:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0014063:	75 75                	jne    c00140da <VAS::allocatePages(int, int)+0x8a>
c0014065:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014068:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001406c:	85 c0                	test   eax,eax
c001406e:	74 49                	je     c00140b9 <VAS::allocatePages(int, int)+0x69>
c0014070:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0014074:	89 d5                	mov    ebp,edx
c0014076:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001407a:	c1 e5 0c             	shl    ebp,0xc
c001407d:	01 dd                	add    ebp,ebx
c001407f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0014082:	81 cf 00 04 00 00    	or     edi,0x400
c0014088:	85 d2                	test   edx,edx
c001408a:	7e 1b                	jle    c00140a7 <VAS::allocatePages(int, int)+0x57>
c001408c:	e8 91 c4 ff ff       	call   c0010522 <Phys::allocatePage()>
c0014091:	57                   	push   edi
c0014092:	53                   	push   ebx
c0014093:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014099:	50                   	push   eax
c001409a:	56                   	push   esi
c001409b:	e8 a8 fe ff ff       	call   c0013f48 <VAS::mapPage(unsigned long, unsigned long, int)>
c00140a0:	83 c4 10             	add    esp,0x10
c00140a3:	39 dd                	cmp    ebp,ebx
c00140a5:	75 e5                	jne    c001408c <VAS::allocatePages(int, int)+0x3c>
c00140a7:	0f 20 d8             	mov    eax,cr3
c00140aa:	0f 22 d8             	mov    cr3,eax
c00140ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00140b1:	83 c4 1c             	add    esp,0x1c
c00140b4:	5b                   	pop    ebx
c00140b5:	5e                   	pop    esi
c00140b6:	5f                   	pop    edi
c00140b7:	5d                   	pop    ebp
c00140b8:	c3                   	ret    
c00140b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00140bd:	83 ec 0c             	sub    esp,0xc
c00140c0:	68 6c a2 02 c0       	push   0xc002a26c
c00140c5:	e8 5e c2 ff ff       	call   c0010328 <KePanic(char const*)>
c00140ca:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00140cd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00140d1:	83 c4 10             	add    esp,0x10
c00140d4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00140d8:	eb 96                	jmp    c0014070 <VAS::allocatePages(int, int)+0x20>
c00140da:	83 ec 0c             	sub    esp,0xc
c00140dd:	52                   	push   edx
c00140de:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00140e2:	e8 88 f7 ff ff       	call   c001386f <Virt::allocateKernelVirtualPages(int)>
c00140e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00140eb:	83 c4 10             	add    esp,0x10
c00140ee:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00140f3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00140f7:	77 38                	ja     c0014131 <VAS::allocatePages(int, int)+0xe1>
c00140f9:	85 d2                	test   edx,edx
c00140fb:	7e aa                	jle    c00140a7 <VAS::allocatePages(int, int)+0x57>
c00140fd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0014101:	c1 e2 0c             	shl    edx,0xc
c0014104:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0014108:	81 cf 00 04 00 00    	or     edi,0x400
c001410e:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0014111:	e8 0c c4 ff ff       	call   c0010522 <Phys::allocatePage()>
c0014116:	57                   	push   edi
c0014117:	53                   	push   ebx
c0014118:	81 c3 00 10 00 00    	add    ebx,0x1000
c001411e:	50                   	push   eax
c001411f:	56                   	push   esi
c0014120:	e8 23 fe ff ff       	call   c0013f48 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014125:	83 c4 10             	add    esp,0x10
c0014128:	39 dd                	cmp    ebp,ebx
c001412a:	75 e5                	jne    c0014111 <VAS::allocatePages(int, int)+0xc1>
c001412c:	e9 76 ff ff ff       	jmp    c00140a7 <VAS::allocatePages(int, int)+0x57>
c0014131:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0014135:	a1 28 34 03 c0       	mov    eax,ds:0xc0033428
c001413a:	09 c1                	or     ecx,eax
c001413c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014140:	eb b7                	jmp    c00140f9 <VAS::allocatePages(int, int)+0xa9>

c0014142 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0014142:	55                   	push   ebp
c0014143:	57                   	push   edi
c0014144:	56                   	push   esi
c0014145:	53                   	push   ebx
c0014146:	83 ec 1c             	sub    esp,0x1c
c0014149:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001414d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0014151:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0014155:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0014159:	85 db                	test   ebx,ebx
c001415b:	7e 2c                	jle    c0014189 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c001415d:	c1 e3 0c             	shl    ebx,0xc
c0014160:	8d 04 33             	lea    eax,[ebx+esi*1]
c0014163:	89 f3                	mov    ebx,esi
c0014165:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014169:	55                   	push   ebp
c001416a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001416e:	29 f2                	sub    edx,esi
c0014170:	01 da                	add    edx,ebx
c0014172:	52                   	push   edx
c0014173:	53                   	push   ebx
c0014174:	81 c3 00 10 00 00    	add    ebx,0x1000
c001417a:	57                   	push   edi
c001417b:	e8 c8 fd ff ff       	call   c0013f48 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014180:	83 c4 10             	add    esp,0x10
c0014183:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0014187:	75 e0                	jne    c0014169 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0014189:	0f 20 d8             	mov    eax,cr3
c001418c:	0f 22 d8             	mov    cr3,eax
c001418f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014193:	83 c4 1c             	add    esp,0x1c
c0014196:	5b                   	pop    ebx
c0014197:	5e                   	pop    esi
c0014198:	5f                   	pop    edi
c0014199:	5d                   	pop    ebp
c001419a:	c3                   	ret    
c001419b:	90                   	nop

c001419c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001419c:	55                   	push   ebp
c001419d:	57                   	push   edi
c001419e:	56                   	push   esi
c001419f:	53                   	push   ebx
c00141a0:	83 ec 1c             	sub    esp,0x1c
c00141a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00141a7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00141ab:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00141af:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00141b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00141b7:	09 d8                	or     eax,ebx
c00141b9:	a9 ff 0f 00 00       	test   eax,0xfff
c00141be:	75 4b                	jne    c001420b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c00141c0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00141c3:	89 de                	mov    esi,ebx
c00141c5:	c1 ee 16             	shr    esi,0x16
c00141c8:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c00141cf:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c00141d3:	74 48                	je     c001421d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c00141d5:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c00141da:	c1 eb 0a             	shr    ebx,0xa
c00141dd:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00141e1:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00141e5:	83 ff 01             	cmp    edi,0x1
c00141e8:	19 c0                	sbb    eax,eax
c00141ea:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00141f0:	c1 e6 0c             	shl    esi,0xc
c00141f3:	25 00 00 c0 ff       	and    eax,0xffc00000
c00141f8:	01 f3                	add    ebx,esi
c00141fa:	09 ca                	or     edx,ecx
c00141fc:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0014203:	83 c4 1c             	add    esp,0x1c
c0014206:	5b                   	pop    ebx
c0014207:	5e                   	pop    esi
c0014208:	5f                   	pop    edi
c0014209:	5d                   	pop    ebp
c001420a:	c3                   	ret    
c001420b:	83 ec 0c             	sub    esp,0xc
c001420e:	68 98 a2 02 c0       	push   0xc002a298
c0014213:	e8 10 c1 ff ff       	call   c0010328 <KePanic(char const*)>
c0014218:	83 c4 10             	add    esp,0x10
c001421b:	eb a3                	jmp    c00141c0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c001421d:	e8 00 c3 ff ff       	call   c0010522 <Phys::allocatePage()>
c0014222:	8b 0d 90 32 03 c0    	mov    ecx,DWORD PTR ds:0xc0033290
c0014228:	83 ec 0c             	sub    esp,0xc
c001422b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001422f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014233:	6a 01                	push   0x1
c0014235:	e8 35 f6 ff ff       	call   c001386f <Virt::allocateKernelVirtualPages(int)>
c001423a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0014241:	6a 01                	push   0x1
c0014243:	50                   	push   eax
c0014244:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014248:	50                   	push   eax
c0014249:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001424d:	51                   	push   ecx
c001424e:	e8 ef fe ff ff       	call   c0014142 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014253:	83 c4 1c             	add    esp,0x1c
c0014256:	68 00 10 00 00       	push   0x1000
c001425b:	6a 00                	push   0x0
c001425d:	50                   	push   eax
c001425e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014262:	e8 89 c2 fe ff       	call   c00004f0 <memset>
c0014267:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001426b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001426e:	e8 fa f8 ff ff       	call   c0013b6d <Virt::freeKernelVirtualPages(unsigned long)>
c0014273:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014277:	83 c4 10             	add    esp,0x10
c001427a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001427d:	81 ca 07 04 00 00    	or     edx,0x407
c0014283:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c0014286:	e9 4a ff ff ff       	jmp    c00141d5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c001428b:	90                   	nop

c001428c <VAS::VAS(bool)>:
c001428c:	53                   	push   ebx
c001428d:	83 ec 28             	sub    esp,0x28
c0014290:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014294:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014298:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001429c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00142a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00142a7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00142ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00142b2:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00142b6:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00142b9:	e8 64 c2 ff ff       	call   c0010522 <Phys::allocatePage()>
c00142be:	89 c2                	mov    edx,eax
c00142c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00142c4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00142c7:	8b 1d 90 32 03 c0    	mov    ebx,DWORD PTR ds:0xc0033290
c00142cd:	83 ec 0c             	sub    esp,0xc
c00142d0:	6a 01                	push   0x1
c00142d2:	e8 98 f5 ff ff       	call   c001386f <Virt::allocateKernelVirtualPages(int)>
c00142d7:	83 c4 10             	add    esp,0x10
c00142da:	89 c2                	mov    edx,eax
c00142dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00142e0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00142e3:	83 ec 0c             	sub    esp,0xc
c00142e6:	6a 03                	push   0x3
c00142e8:	6a 01                	push   0x1
c00142ea:	52                   	push   edx
c00142eb:	50                   	push   eax
c00142ec:	53                   	push   ebx
c00142ed:	e8 50 fe ff ff       	call   c0014142 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00142f2:	83 c4 20             	add    esp,0x20
c00142f5:	89 c2                	mov    edx,eax
c00142f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00142fb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00142fe:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014306:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001430e:	7f 1d                	jg     c001432d <VAS::VAS(bool)+0xa1>
c0014310:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014314:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014317:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001431b:	c1 e2 02             	shl    edx,0x2
c001431e:	01 d0                	add    eax,edx
c0014320:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0014326:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001432b:	eb d9                	jmp    c0014306 <VAS::VAS(bool)+0x7a>
c001432d:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0014335:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001433d:	7f 59                	jg     c0014398 <VAS::VAS(bool)+0x10c>
c001433f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014343:	2d 00 02 00 00       	sub    eax,0x200
c0014348:	c1 e0 0c             	shl    eax,0xc
c001434b:	89 c2                	mov    edx,eax
c001434d:	a1 28 34 03 c0       	mov    eax,ds:0xc0033428
c0014352:	89 d1                	mov    ecx,edx
c0014354:	09 c1                	or     ecx,eax
c0014356:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001435a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001435d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014361:	c1 e2 02             	shl    edx,0x2
c0014364:	01 d0                	add    eax,edx
c0014366:	83 c9 05             	or     ecx,0x5
c0014369:	89 ca                	mov    edx,ecx
c001436b:	89 10                	mov    DWORD PTR [eax],edx
c001436d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014371:	2d 40 03 00 00       	sub    eax,0x340
c0014376:	83 f8 7f             	cmp    eax,0x7f
c0014379:	77 16                	ja     c0014391 <VAS::VAS(bool)+0x105>
c001437b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001437f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014382:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014386:	c1 e2 02             	shl    edx,0x2
c0014389:	01 d0                	add    eax,edx
c001438b:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0014391:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0014396:	eb 9d                	jmp    c0014335 <VAS::VAS(bool)+0xa9>
c0014398:	8b 15 28 34 03 c0    	mov    edx,DWORD PTR ds:0xc0033428
c001439e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00143a2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00143a5:	05 20 0c 00 00       	add    eax,0xc20
c00143aa:	81 ca 03 40 00 00    	or     edx,0x4003
c00143b0:	89 10                	mov    DWORD PTR [eax],edx
c00143b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00143b6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00143b9:	a1 28 34 03 c0       	mov    eax,ds:0xc0033428
c00143be:	09 c2                	or     edx,eax
c00143c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00143c4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00143c7:	05 fc 0f 00 00       	add    eax,0xffc
c00143cc:	83 ca 03             	or     edx,0x3
c00143cf:	89 10                	mov    DWORD PTR [eax],edx
c00143d1:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c00143d6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00143dc:	83 ec 0c             	sub    esp,0xc
c00143df:	50                   	push   eax
c00143e0:	e8 bb 60 ff ff       	call   c000a4a0 <Device::getName()>
c00143e5:	83 c4 10             	add    esp,0x10
c00143e8:	83 ec 08             	sub    esp,0x8
c00143eb:	68 0b a5 02 c0       	push   0xc002a50b
c00143f0:	50                   	push   eax
c00143f1:	e8 8a c3 fe ff       	call   c0000780 <strcmp>
c00143f6:	83 c4 10             	add    esp,0x10
c00143f9:	85 c0                	test   eax,eax
c00143fb:	0f 94 c0             	sete   al
c00143fe:	0f b6 c0             	movzx  eax,al
c0014401:	85 c0                	test   eax,eax
c0014403:	74 68                	je     c001446d <VAS::VAS(bool)+0x1e1>
c0014405:	fa                   	cli    
c0014406:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c001440b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0014411:	05 68 09 00 00       	add    eax,0x968
c0014416:	83 ec 0c             	sub    esp,0xc
c0014419:	50                   	push   eax
c001441a:	e8 93 ae ff ff       	call   c000f2b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001441f:	83 c4 10             	add    esp,0x10
c0014422:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014427:	89 c3                	mov    ebx,eax
c0014429:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c001442e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0014434:	05 68 09 00 00       	add    eax,0x968
c0014439:	83 ec 0c             	sub    esp,0xc
c001443c:	50                   	push   eax
c001443d:	e8 70 ae ff ff       	call   c000f2b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0014442:	83 c4 10             	add    esp,0x10
c0014445:	83 ec 08             	sub    esp,0x8
c0014448:	50                   	push   eax
c0014449:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001444d:	e8 fc f6 ff ff       	call   c0013b4e <VAS::getPageTableEntry(unsigned long)>
c0014452:	83 c4 10             	add    esp,0x10
c0014455:	8b 00                	mov    eax,DWORD PTR [eax]
c0014457:	25 00 f0 ff ff       	and    eax,0xfffff000
c001445c:	6a 11                	push   0x11
c001445e:	53                   	push   ebx
c001445f:	50                   	push   eax
c0014460:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014464:	e8 df fa ff ff       	call   c0013f48 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014469:	83 c4 10             	add    esp,0x10
c001446c:	fb                   	sti    
c001446d:	90                   	nop
c001446e:	83 c4 28             	add    esp,0x28
c0014471:	5b                   	pop    ebx
c0014472:	c3                   	ret    
c0014473:	90                   	nop

c0014474 <VAS::evict(unsigned long)>:
c0014474:	55                   	push   ebp
c0014475:	57                   	push   edi
c0014476:	56                   	push   esi
c0014477:	53                   	push   ebx
c0014478:	83 ec 24             	sub    esp,0x24
c001447b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001447f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0014483:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014487:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c001448c:	50                   	push   eax
c001448d:	68 19 a5 02 c0       	push   0xc002a519
c0014492:	e8 cf 2a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014497:	e8 28 f5 ff ff       	call   c00139c4 <Virt::allocateSwapfilePage()>
c001449c:	83 c4 10             	add    esp,0x10
c001449f:	89 c7                	mov    edi,eax
c00144a1:	a1 6c d4 02 c0       	mov    eax,ds:0xc002d46c
c00144a6:	85 c0                	test   eax,eax
c00144a8:	7e 40                	jle    c00144ea <VAS::evict(unsigned long)+0x76>
c00144aa:	89 ee                	mov    esi,ebp
c00144ac:	31 db                	xor    ebx,ebx
c00144ae:	83 ec 0c             	sub    esp,0xc
c00144b1:	57                   	push   edi
c00144b2:	e8 f7 f4 ff ff       	call   c00139ae <Virt::swapIDToSector(unsigned long)>
c00144b7:	31 d2                	xor    edx,edx
c00144b9:	89 34 24             	mov    DWORD PTR [esp],esi
c00144bc:	81 c6 00 02 00 00    	add    esi,0x200
c00144c2:	6a 01                	push   0x1
c00144c4:	52                   	push   edx
c00144c5:	01 d8                	add    eax,ebx
c00144c7:	83 c3 01             	add    ebx,0x1
c00144ca:	50                   	push   eax
c00144cb:	0f be 05 78 d4 02 c0 	movsx  eax,BYTE PTR ds:0xc002d478
c00144d2:	8b 04 85 dc 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd624]
c00144d9:	50                   	push   eax
c00144da:	e8 ef 6d ff ff       	call   c000b2ce <LogicalDisk::write(unsigned long long, int, void*)>
c00144df:	83 c4 20             	add    esp,0x20
c00144e2:	39 1d 6c d4 02 c0    	cmp    DWORD PTR ds:0xc002d46c,ebx
c00144e8:	7f c4                	jg     c00144ae <VAS::evict(unsigned long)+0x3a>
c00144ea:	c1 e7 0c             	shl    edi,0xc
c00144ed:	83 ec 08             	sub    esp,0x8
c00144f0:	55                   	push   ebp
c00144f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00144f5:	50                   	push   eax
c00144f6:	e8 53 f6 ff ff       	call   c0013b4e <VAS::getPageTableEntry(unsigned long)>
c00144fb:	8b 10                	mov    edx,DWORD PTR [eax]
c00144fd:	89 d3                	mov    ebx,edx
c00144ff:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0014505:	09 d7                	or     edi,edx
c0014507:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001450d:	89 38                	mov    DWORD PTR [eax],edi
c001450f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014512:	8b 15 88 32 03 c0    	mov    edx,DWORD PTR ds:0xc0033288
c0014518:	83 c2 01             	add    edx,0x1
c001451b:	89 15 88 32 03 c0    	mov    DWORD PTR ds:0xc0033288,edx
c0014521:	e8 93 bf ff ff       	call   c00104b9 <Phys::freePage(unsigned long)>
c0014526:	0f 20 d8             	mov    eax,cr3
c0014529:	0f 22 d8             	mov    cr3,eax
c001452c:	8b 0d 88 32 03 c0    	mov    ecx,DWORD PTR ds:0xc0033288
c0014532:	51                   	push   ecx
c0014533:	55                   	push   ebp
c0014534:	53                   	push   ebx
c0014535:	68 bc a2 02 c0       	push   0xc002a2bc
c001453a:	e8 27 2a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001453f:	a1 84 32 03 c0       	mov    eax,ds:0xc0033284
c0014544:	83 c4 18             	add    esp,0x18
c0014547:	50                   	push   eax
c0014548:	68 2e a5 02 c0       	push   0xc002a52e
c001454d:	8d 50 01             	lea    edx,[eax+0x1]
c0014550:	89 15 84 32 03 c0    	mov    DWORD PTR ds:0xc0033284,edx
c0014556:	e8 0b 2a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001455b:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0014560:	c7 44 24 40 40 a5 02 c0 	mov    DWORD PTR [esp+0x40],0xc002a540
c0014568:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001456c:	83 c4 2c             	add    esp,0x2c
c001456f:	5b                   	pop    ebx
c0014570:	5e                   	pop    esi
c0014571:	5f                   	pop    edi
c0014572:	5d                   	pop    ebp
c0014573:	e9 ee 29 ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>

c0014578 <VAS::canLockPage(unsigned long)>:
c0014578:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001457c:	50                   	push   eax
c001457d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014581:	52                   	push   edx
c0014582:	e8 c7 f5 ff ff       	call   c0013b4e <VAS::getPageTableEntry(unsigned long)>
c0014587:	59                   	pop    ecx
c0014588:	5a                   	pop    edx
c0014589:	8b 00                	mov    eax,DWORD PTR [eax]
c001458b:	c1 e8 0b             	shr    eax,0xb
c001458e:	83 e0 01             	and    eax,0x1
c0014591:	c3                   	ret    

c0014592 <VAS::unlockPage(unsigned long)>:
c0014592:	83 ec 0c             	sub    esp,0xc
c0014595:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014599:	50                   	push   eax
c001459a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001459e:	52                   	push   edx
c001459f:	e8 aa f5 ff ff       	call   c0013b4e <VAS::getPageTableEntry(unsigned long)>
c00145a4:	59                   	pop    ecx
c00145a5:	5a                   	pop    edx
c00145a6:	8b 10                	mov    edx,DWORD PTR [eax]
c00145a8:	f6 c6 08             	test   dh,0x8
c00145ab:	75 09                	jne    c00145b6 <VAS::unlockPage(unsigned long)+0x24>
c00145ad:	80 ce 08             	or     dh,0x8
c00145b0:	89 10                	mov    DWORD PTR [eax],edx
c00145b2:	83 c4 0c             	add    esp,0xc
c00145b5:	c3                   	ret    
c00145b6:	c7 44 24 10 f0 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a2f0
c00145be:	83 c4 0c             	add    esp,0xc
c00145c1:	e9 62 bd ff ff       	jmp    c0010328 <KePanic(char const*)>

c00145c6 <VAS::canLockPages(unsigned long, int)>:
c00145c6:	55                   	push   ebp
c00145c7:	57                   	push   edi
c00145c8:	56                   	push   esi
c00145c9:	53                   	push   ebx
c00145ca:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00145ce:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00145d2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00145d6:	85 ff                	test   edi,edi
c00145d8:	7e 23                	jle    c00145fd <VAS::canLockPages(unsigned long, int)+0x37>
c00145da:	31 f6                	xor    esi,esi
c00145dc:	eb 0d                	jmp    c00145eb <VAS::canLockPages(unsigned long, int)+0x25>
c00145de:	83 c6 01             	add    esi,0x1
c00145e1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00145e7:	39 f7                	cmp    edi,esi
c00145e9:	74 0d                	je     c00145f8 <VAS::canLockPages(unsigned long, int)+0x32>
c00145eb:	53                   	push   ebx
c00145ec:	55                   	push   ebp
c00145ed:	e8 86 ff ff ff       	call   c0014578 <VAS::canLockPage(unsigned long)>
c00145f2:	5a                   	pop    edx
c00145f3:	59                   	pop    ecx
c00145f4:	84 c0                	test   al,al
c00145f6:	75 e6                	jne    c00145de <VAS::canLockPages(unsigned long, int)+0x18>
c00145f8:	5b                   	pop    ebx
c00145f9:	5e                   	pop    esi
c00145fa:	5f                   	pop    edi
c00145fb:	5d                   	pop    ebp
c00145fc:	c3                   	ret    
c00145fd:	b0 01                	mov    al,0x1
c00145ff:	eb f7                	jmp    c00145f8 <VAS::canLockPages(unsigned long, int)+0x32>
c0014601:	90                   	nop

c0014602 <VAS::unlockPages(unsigned long, int)>:
c0014602:	55                   	push   ebp
c0014603:	57                   	push   edi
c0014604:	56                   	push   esi
c0014605:	53                   	push   ebx
c0014606:	83 ec 0c             	sub    esp,0xc
c0014609:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001460d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0014611:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014615:	85 ff                	test   edi,edi
c0014617:	7e 1c                	jle    c0014635 <VAS::unlockPages(unsigned long, int)+0x33>
c0014619:	31 f6                	xor    esi,esi
c001461b:	83 ec 08             	sub    esp,0x8
c001461e:	83 c6 01             	add    esi,0x1
c0014621:	53                   	push   ebx
c0014622:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014628:	55                   	push   ebp
c0014629:	e8 64 ff ff ff       	call   c0014592 <VAS::unlockPage(unsigned long)>
c001462e:	83 c4 10             	add    esp,0x10
c0014631:	39 f7                	cmp    edi,esi
c0014633:	75 e6                	jne    c001461b <VAS::unlockPages(unsigned long, int)+0x19>
c0014635:	83 c4 0c             	add    esp,0xc
c0014638:	5b                   	pop    ebx
c0014639:	5e                   	pop    esi
c001463a:	5f                   	pop    edi
c001463b:	5d                   	pop    ebp
c001463c:	c3                   	ret    
c001463d:	90                   	nop

c001463e <VAS::tryLoadBackOffDisk(unsigned long)>:
c001463e:	55                   	push   ebp
c001463f:	57                   	push   edi
c0014640:	56                   	push   esi
c0014641:	53                   	push   ebx
c0014642:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0014648:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c001464f:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0014655:	77 6f                	ja     c00146c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x88>
c0014657:	83 ec 08             	sub    esp,0x8
c001465a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0014660:	53                   	push   ebx
c0014661:	8b bc 24 3c 10 00 00 	mov    edi,DWORD PTR [esp+0x103c]
c0014668:	57                   	push   edi
c0014669:	e8 e0 f4 ff ff       	call   c0013b4e <VAS::getPageTableEntry(unsigned long)>
c001466e:	83 c4 10             	add    esp,0x10
c0014671:	85 c0                	test   eax,eax
c0014673:	89 c5                	mov    ebp,eax
c0014675:	0f 95 c0             	setne  al
c0014678:	85 db                	test   ebx,ebx
c001467a:	0f 95 c2             	setne  dl
c001467d:	21 d0                	and    eax,edx
c001467f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0014683:	a8 01                	test   al,0x1
c0014685:	75 0f                	jne    c0014696 <VAS::tryLoadBackOffDisk(unsigned long)+0x58>
c0014687:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001468b:	81 c4 1c 10 00 00    	add    esp,0x101c
c0014691:	5b                   	pop    ebx
c0014692:	5e                   	pop    esi
c0014693:	5f                   	pop    edi
c0014694:	5d                   	pop    ebp
c0014695:	c3                   	ret    
c0014696:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014699:	f6 c4 02             	test   ah,0x2
c001469c:	75 3d                	jne    c00146db <VAS::tryLoadBackOffDisk(unsigned long)+0x9d>
c001469e:	89 c1                	mov    ecx,eax
c00146a0:	81 e1 01 04 00 00    	and    ecx,0x401
c00146a6:	81 f9 00 04 00 00    	cmp    ecx,0x400
c00146ac:	0f 84 91 00 00 00    	je     c0014743 <VAS::tryLoadBackOffDisk(unsigned long)+0x105>
c00146b2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00146b7:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00146bb:	81 c4 1c 10 00 00    	add    esp,0x101c
c00146c1:	5b                   	pop    ebx
c00146c2:	5e                   	pop    esi
c00146c3:	5f                   	pop    edi
c00146c4:	5d                   	pop    ebp
c00146c5:	c3                   	ret    
c00146c6:	83 ec 0c             	sub    esp,0xc
c00146c9:	68 55 a5 02 c0       	push   0xc002a555
c00146ce:	e8 55 bc ff ff       	call   c0010328 <KePanic(char const*)>
c00146d3:	83 c4 10             	add    esp,0x10
c00146d6:	e9 7c ff ff ff       	jmp    c0014657 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c00146db:	83 ec 0c             	sub    esp,0xc
c00146de:	68 20 a3 02 c0       	push   0xc002a320
c00146e3:	e8 7e 28 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00146e8:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c00146eb:	e8 32 be ff ff       	call   c0010522 <Phys::allocatePage()>
c00146f0:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00146f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00146fa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00146fd:	83 c8 01             	or     eax,0x1
c0014700:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014703:	0f 20 d8             	mov    eax,cr3
c0014706:	0f 22 d8             	mov    cr3,eax
c0014709:	8d 54 24 20          	lea    edx,[esp+0x20]
c001470d:	b8 00 10 00 00       	mov    eax,0x1000
c0014712:	89 d7                	mov    edi,edx
c0014714:	89 c1                	mov    ecx,eax
c0014716:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014718:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001471b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001471f:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0014725:	09 f1                	or     ecx,esi
c0014727:	83 c9 02             	or     ecx,0x2
c001472a:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001472d:	0f 20 d9             	mov    ecx,cr3
c0014730:	0f 22 d9             	mov    cr3,ecx
c0014733:	89 d6                	mov    esi,edx
c0014735:	89 df                	mov    edi,ebx
c0014737:	89 c1                	mov    ecx,eax
c0014739:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001473b:	83 c4 10             	add    esp,0x10
c001473e:	e9 44 ff ff ff       	jmp    c0014687 <VAS::tryLoadBackOffDisk(unsigned long)+0x49>
c0014743:	c1 e8 0c             	shr    eax,0xc
c0014746:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001474a:	e8 d3 bd ff ff       	call   c0010522 <Phys::allocatePage()>
c001474f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014752:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0014758:	09 c1                	or     ecx,eax
c001475a:	81 c9 01 08 00 00    	or     ecx,0x801
c0014760:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0014763:	a1 6c d4 02 c0       	mov    eax,ds:0xc002d46c
c0014768:	85 c0                	test   eax,eax
c001476a:	7e 51                	jle    c00147bd <VAS::tryLoadBackOffDisk(unsigned long)+0x17f>
c001476c:	89 dd                	mov    ebp,ebx
c001476e:	31 f6                	xor    esi,esi
c0014770:	83 ec 08             	sub    esp,0x8
c0014773:	55                   	push   ebp
c0014774:	68 67 a5 02 c0       	push   0xc002a567
c0014779:	e8 e8 27 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001477e:	59                   	pop    ecx
c001477f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014783:	57                   	push   edi
c0014784:	e8 25 f2 ff ff       	call   c00139ae <Virt::swapIDToSector(unsigned long)>
c0014789:	31 d2                	xor    edx,edx
c001478b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001478e:	81 c5 00 02 00 00    	add    ebp,0x200
c0014794:	6a 01                	push   0x1
c0014796:	52                   	push   edx
c0014797:	8d 3c 06             	lea    edi,[esi+eax*1]
c001479a:	0f be 05 78 d4 02 c0 	movsx  eax,BYTE PTR ds:0xc002d478
c00147a1:	83 c6 01             	add    esi,0x1
c00147a4:	57                   	push   edi
c00147a5:	8b 04 85 dc 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd624]
c00147ac:	50                   	push   eax
c00147ad:	e8 b0 6a ff ff       	call   c000b262 <LogicalDisk::read(unsigned long long, int, void*)>
c00147b2:	83 c4 20             	add    esp,0x20
c00147b5:	39 35 6c d4 02 c0    	cmp    DWORD PTR ds:0xc002d46c,esi
c00147bb:	7f b3                	jg     c0014770 <VAS::tryLoadBackOffDisk(unsigned long)+0x132>
c00147bd:	a1 88 32 03 c0       	mov    eax,ds:0xc0033288
c00147c2:	83 ec 04             	sub    esp,0x4
c00147c5:	83 e8 01             	sub    eax,0x1
c00147c8:	50                   	push   eax
c00147c9:	53                   	push   ebx
c00147ca:	68 80 a5 02 c0       	push   0xc002a580
c00147cf:	a3 88 32 03 c0       	mov    ds:0xc0033288,eax
c00147d4:	e8 8d 27 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00147d9:	58                   	pop    eax
c00147da:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00147de:	52                   	push   edx
c00147df:	e8 a7 f1 ff ff       	call   c001398b <Virt::freeSwapfilePage(unsigned long)>
c00147e4:	0f 20 d8             	mov    eax,cr3
c00147e7:	0f 22 d8             	mov    cr3,eax
c00147ea:	83 c4 10             	add    esp,0x10
c00147ed:	e9 95 fe ff ff       	jmp    c0014687 <VAS::tryLoadBackOffDisk(unsigned long)+0x49>

c00147f2 <VAS::lockPage(unsigned long)>:
c00147f2:	56                   	push   esi
c00147f3:	53                   	push   ebx
c00147f4:	83 ec 04             	sub    esp,0x4
c00147f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00147ff:	50                   	push   eax
c0014800:	56                   	push   esi
c0014801:	e8 48 f3 ff ff       	call   c0013b4e <VAS::getPageTableEntry(unsigned long)>
c0014806:	5a                   	pop    edx
c0014807:	59                   	pop    ecx
c0014808:	89 c3                	mov    ebx,eax
c001480a:	8b 00                	mov    eax,DWORD PTR [eax]
c001480c:	a8 01                	test   al,0x1
c001480e:	74 10                	je     c0014820 <VAS::lockPage(unsigned long)+0x2e>
c0014810:	f6 c4 08             	test   ah,0x8
c0014813:	74 28                	je     c001483d <VAS::lockPage(unsigned long)+0x4b>
c0014815:	80 e4 f7             	and    ah,0xf7
c0014818:	89 03                	mov    DWORD PTR [ebx],eax
c001481a:	83 c4 04             	add    esp,0x4
c001481d:	5b                   	pop    ebx
c001481e:	5e                   	pop    esi
c001481f:	c3                   	ret    
c0014820:	83 ec 08             	sub    esp,0x8
c0014823:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014828:	50                   	push   eax
c0014829:	56                   	push   esi
c001482a:	e8 0f fe ff ff       	call   c001463e <VAS::tryLoadBackOffDisk(unsigned long)>
c001482f:	83 c4 10             	add    esp,0x10
c0014832:	84 c0                	test   al,al
c0014834:	74 19                	je     c001484f <VAS::lockPage(unsigned long)+0x5d>
c0014836:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014838:	f6 c4 08             	test   ah,0x8
c001483b:	75 d8                	jne    c0014815 <VAS::lockPage(unsigned long)+0x23>
c001483d:	c7 44 24 10 f0 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a2f0
c0014845:	83 c4 04             	add    esp,0x4
c0014848:	5b                   	pop    ebx
c0014849:	5e                   	pop    esi
c001484a:	e9 d9 ba ff ff       	jmp    c0010328 <KePanic(char const*)>
c001484f:	83 ec 0c             	sub    esp,0xc
c0014852:	68 40 a3 02 c0       	push   0xc002a340
c0014857:	e8 cc ba ff ff       	call   c0010328 <KePanic(char const*)>
c001485c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001485e:	83 c4 10             	add    esp,0x10
c0014861:	eb ad                	jmp    c0014810 <VAS::lockPage(unsigned long)+0x1e>
c0014863:	90                   	nop

c0014864 <VAS::lockPages(unsigned long, int)>:
c0014864:	55                   	push   ebp
c0014865:	57                   	push   edi
c0014866:	56                   	push   esi
c0014867:	53                   	push   ebx
c0014868:	83 ec 0c             	sub    esp,0xc
c001486b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001486f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0014873:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014877:	85 ff                	test   edi,edi
c0014879:	7e 1c                	jle    c0014897 <VAS::lockPages(unsigned long, int)+0x33>
c001487b:	31 f6                	xor    esi,esi
c001487d:	83 ec 08             	sub    esp,0x8
c0014880:	83 c6 01             	add    esi,0x1
c0014883:	53                   	push   ebx
c0014884:	81 c3 00 10 00 00    	add    ebx,0x1000
c001488a:	55                   	push   ebp
c001488b:	e8 62 ff ff ff       	call   c00147f2 <VAS::lockPage(unsigned long)>
c0014890:	83 c4 10             	add    esp,0x10
c0014893:	39 f7                	cmp    edi,esi
c0014895:	75 e6                	jne    c001487d <VAS::lockPages(unsigned long, int)+0x19>
c0014897:	83 c4 0c             	add    esp,0xc
c001489a:	5b                   	pop    ebx
c001489b:	5e                   	pop    esi
c001489c:	5f                   	pop    edi
c001489d:	5d                   	pop    ebp
c001489e:	c3                   	ret    
c001489f:	90                   	nop

c00148a0 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c00148a0:	55                   	push   ebp
c00148a1:	57                   	push   edi
c00148a2:	56                   	push   esi
c00148a3:	53                   	push   ebx
c00148a4:	83 ec 28             	sub    esp,0x28
c00148a7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00148ab:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00148af:	50                   	push   eax
c00148b0:	e8 ba ef ff ff       	call   c001386f <Virt::allocateKernelVirtualPages(int)>
c00148b5:	83 c4 0c             	add    esp,0xc
c00148b8:	6a 07                	push   0x7
c00148ba:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00148be:	52                   	push   edx
c00148bf:	89 c5                	mov    ebp,eax
c00148c1:	53                   	push   ebx
c00148c2:	e8 89 f7 ff ff       	call   c0014050 <VAS::allocatePages(int, int)>
c00148c7:	83 c4 10             	add    esp,0x10
c00148ca:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00148ce:	89 c7                	mov    edi,eax
c00148d0:	85 c9                	test   ecx,ecx
c00148d2:	74 2f                	je     c0014903 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c00148d4:	31 f6                	xor    esi,esi
c00148d6:	e8 47 bc ff ff       	call   c0010522 <Phys::allocatePage()>
c00148db:	83 c6 01             	add    esi,0x1
c00148de:	6a 03                	push   0x3
c00148e0:	55                   	push   ebp
c00148e1:	50                   	push   eax
c00148e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00148e6:	53                   	push   ebx
c00148e7:	e8 5c f6 ff ff       	call   c0013f48 <VAS::mapPage(unsigned long, unsigned long, int)>
c00148ec:	6a 07                	push   0x7
c00148ee:	57                   	push   edi
c00148ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00148f3:	50                   	push   eax
c00148f4:	53                   	push   ebx
c00148f5:	e8 4e f6 ff ff       	call   c0013f48 <VAS::mapPage(unsigned long, unsigned long, int)>
c00148fa:	83 c4 20             	add    esp,0x20
c00148fd:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c0014901:	75 d3                	jne    c00148d6 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0014903:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014907:	89 28                	mov    DWORD PTR [eax],ebp
c0014909:	83 c4 1c             	add    esp,0x1c
c001490c:	89 f8                	mov    eax,edi
c001490e:	5b                   	pop    ebx
c001490f:	5e                   	pop    esi
c0014910:	5f                   	pop    edi
c0014911:	5d                   	pop    ebp
c0014912:	c3                   	ret    
c0014913:	90                   	nop

c0014914 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0014914:	53                   	push   ebx
c0014915:	83 ec 14             	sub    esp,0x14
c0014918:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001491c:	68 70 a3 02 c0       	push   0xc002a370
c0014921:	e8 40 26 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014926:	c7 04 24 d0 a3 02 c0 	mov    DWORD PTR [esp],0xc002a3d0
c001492d:	e8 34 26 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014932:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014936:	83 c4 18             	add    esp,0x18
c0014939:	5b                   	pop    ebx
c001493a:	e9 2e f2 ff ff       	jmp    c0013b6d <Virt::freeKernelVirtualPages(unsigned long)>
c001493f:	90                   	nop

c0014940 <VAS::scanForEviction()>:
c0014940:	57                   	push   edi
c0014941:	56                   	push   esi
c0014942:	31 f6                	xor    esi,esi
c0014944:	53                   	push   ebx
c0014945:	83 ec 18             	sub    esp,0x18
c0014948:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c001494d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014951:	50                   	push   eax
c0014952:	68 4c a4 02 c0       	push   0xc002a44c
c0014957:	e8 0a 26 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001495c:	c7 04 24 95 a5 02 c0 	mov    DWORD PTR [esp],0xc002a595
c0014963:	e8 fe 25 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014968:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001496b:	83 c4 10             	add    esp,0x10
c001496e:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014974:	75 0e                	jne    c0014984 <VAS::scanForEviction()+0x44>
c0014976:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014979:	89 da                	mov    edx,ebx
c001497b:	c1 ea 16             	shr    edx,0x16
c001497e:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014982:	74 5b                	je     c00149df <VAS::scanForEviction()+0x9f>
c0014984:	83 ec 08             	sub    esp,0x8
c0014987:	53                   	push   ebx
c0014988:	57                   	push   edi
c0014989:	e8 c0 f1 ff ff       	call   c0013b4e <VAS::getPageTableEntry(unsigned long)>
c001498e:	83 c4 10             	add    esp,0x10
c0014991:	8b 10                	mov    edx,DWORD PTR [eax]
c0014993:	89 d1                	mov    ecx,edx
c0014995:	c1 e9 0c             	shr    ecx,0xc
c0014998:	74 10                	je     c00149aa <VAS::scanForEviction()+0x6a>
c001499a:	89 d1                	mov    ecx,edx
c001499c:	81 e1 00 0c 00 00    	and    ecx,0xc00
c00149a2:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c00149a8:	74 40                	je     c00149ea <VAS::scanForEviction()+0xaa>
c00149aa:	81 c3 00 10 00 00    	add    ebx,0x1000
c00149b0:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c00149b6:	76 2d                	jbe    c00149e5 <VAS::scanForEviction()+0xa5>
c00149b8:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c00149bf:	83 c6 01             	add    esi,0x1
c00149c2:	83 fe 03             	cmp    esi,0x3
c00149c5:	74 37                	je     c00149fe <VAS::scanForEviction()+0xbe>
c00149c7:	31 db                	xor    ebx,ebx
c00149c9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00149cf:	75 b3                	jne    c0014984 <VAS::scanForEviction()+0x44>
c00149d1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00149d4:	89 da                	mov    edx,ebx
c00149d6:	c1 ea 16             	shr    edx,0x16
c00149d9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00149dd:	75 a5                	jne    c0014984 <VAS::scanForEviction()+0x44>
c00149df:	81 c3 00 00 40 00    	add    ebx,0x400000
c00149e5:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c00149e8:	eb 84                	jmp    c001496e <VAS::scanForEviction()+0x2e>
c00149ea:	f6 c2 01             	test   dl,0x1
c00149ed:	74 bb                	je     c00149aa <VAS::scanForEviction()+0x6a>
c00149ef:	f6 c2 20             	test   dl,0x20
c00149f2:	74 13                	je     c0014a07 <VAS::scanForEviction()+0xc7>
c00149f4:	83 e2 df             	and    edx,0xffffffdf
c00149f7:	89 10                	mov    DWORD PTR [eax],edx
c00149f9:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00149fc:	eb ac                	jmp    c00149aa <VAS::scanForEviction()+0x6a>
c00149fe:	83 c4 10             	add    esp,0x10
c0014a01:	31 c0                	xor    eax,eax
c0014a03:	5b                   	pop    ebx
c0014a04:	5e                   	pop    esi
c0014a05:	5f                   	pop    edi
c0014a06:	c3                   	ret    
c0014a07:	89 d0                	mov    eax,edx
c0014a09:	83 ec 08             	sub    esp,0x8
c0014a0c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014a11:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a15:	53                   	push   ebx
c0014a16:	68 b1 a5 02 c0       	push   0xc002a5b1
c0014a1b:	e8 46 25 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014a20:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0014a23:	58                   	pop    eax
c0014a24:	5a                   	pop    edx
c0014a25:	51                   	push   ecx
c0014a26:	57                   	push   edi
c0014a27:	e8 48 fa ff ff       	call   c0014474 <VAS::evict(unsigned long)>
c0014a2c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014a2f:	5b                   	pop    ebx
c0014a30:	5e                   	pop    esi
c0014a31:	50                   	push   eax
c0014a32:	68 c5 a5 02 c0       	push   0xc002a5c5
c0014a37:	e8 2a 25 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014a3c:	58                   	pop    eax
c0014a3d:	5a                   	pop    edx
c0014a3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a42:	50                   	push   eax
c0014a43:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014a47:	68 d8 a5 02 c0       	push   0xc002a5d8
c0014a4c:	e8 15 25 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014a51:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0014a54:	81 c1 00 10 00 00    	add    ecx,0x1000
c0014a5a:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0014a5d:	8b 3d 30 33 03 c0    	mov    edi,DWORD PTR ds:0xc0033330
c0014a63:	5b                   	pop    ebx
c0014a64:	5e                   	pop    esi
c0014a65:	57                   	push   edi
c0014a66:	68 6c a4 02 c0       	push   0xc002a46c
c0014a6b:	e8 f6 24 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014a70:	83 c4 10             	add    esp,0x10
c0014a73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a77:	83 c4 10             	add    esp,0x10
c0014a7a:	5b                   	pop    ebx
c0014a7b:	5e                   	pop    esi
c0014a7c:	5f                   	pop    edi
c0014a7d:	c3                   	ret    

c0014a7e <mapVASFirstTime>:
c0014a7e:	55                   	push   ebp
c0014a7f:	57                   	push   edi
c0014a80:	56                   	push   esi
c0014a81:	53                   	push   ebx
c0014a82:	83 ec 0c             	sub    esp,0xc
c0014a85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a8a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014a8d:	83 fa 01             	cmp    edx,0x1
c0014a90:	0f 84 cb 00 00 00    	je     c0014b61 <mapVASFirstTime+0xe3>
c0014a96:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014a99:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0014a9e:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0014aa3:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0014aa6:	8b b2 b2 05 00 00    	mov    esi,DWORD PTR [edx+0x5b2]
c0014aac:	c1 e5 15             	shl    ebp,0x15
c0014aaf:	29 eb                	sub    ebx,ebp
c0014ab1:	29 ef                	sub    edi,ebp
c0014ab3:	e8 6a ba ff ff       	call   c0010522 <Phys::allocatePage()>
c0014ab8:	83 ec 0c             	sub    esp,0xc
c0014abb:	68 03 04 00 00       	push   0x403
c0014ac0:	6a 01                	push   0x1
c0014ac2:	53                   	push   ebx
c0014ac3:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014ac9:	50                   	push   eax
c0014aca:	56                   	push   esi
c0014acb:	e8 72 f6 ff ff       	call   c0014142 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014ad0:	83 c4 20             	add    esp,0x20
c0014ad3:	39 fb                	cmp    ebx,edi
c0014ad5:	75 dc                	jne    c0014ab3 <mapVASFirstTime+0x35>
c0014ad7:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0014adc:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0014ae1:	29 eb                	sub    ebx,ebp
c0014ae3:	29 ef                	sub    edi,ebp
c0014ae5:	e8 38 ba ff ff       	call   c0010522 <Phys::allocatePage()>
c0014aea:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0014aee:	83 fa 01             	cmp    edx,0x1
c0014af1:	19 d2                	sbb    edx,edx
c0014af3:	83 ec 0c             	sub    esp,0xc
c0014af6:	83 e2 04             	and    edx,0x4
c0014af9:	81 c2 03 04 00 00    	add    edx,0x403
c0014aff:	52                   	push   edx
c0014b00:	6a 01                	push   0x1
c0014b02:	53                   	push   ebx
c0014b03:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014b09:	50                   	push   eax
c0014b0a:	56                   	push   esi
c0014b0b:	e8 32 f6 ff ff       	call   c0014142 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014b10:	83 c4 20             	add    esp,0x20
c0014b13:	39 df                	cmp    edi,ebx
c0014b15:	75 ce                	jne    c0014ae5 <mapVASFirstTime+0x67>
c0014b17:	83 ec 0c             	sub    esp,0xc
c0014b1a:	bb 7c f0 02 c0       	mov    ebx,0xc002f07c
c0014b1f:	6a 04                	push   0x4
c0014b21:	81 eb 00 e0 02 c0    	sub    ebx,0xc002e000
c0014b27:	6a ff                	push   0xffffffff
c0014b29:	c1 eb 0c             	shr    ebx,0xc
c0014b2c:	53                   	push   ebx
c0014b2d:	68 00 e0 02 c0       	push   0xc002e000
c0014b32:	56                   	push   esi
c0014b33:	e8 b0 f1 ff ff       	call   c0013ce8 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0014b38:	83 c4 14             	add    esp,0x14
c0014b3b:	a1 90 32 03 c0       	mov    eax,ds:0xc0033290
c0014b40:	6a 04                	push   0x4
c0014b42:	6a ff                	push   0xffffffff
c0014b44:	53                   	push   ebx
c0014b45:	68 00 e0 02 c0       	push   0xc002e000
c0014b4a:	50                   	push   eax
c0014b4b:	e8 98 f1 ff ff       	call   c0013ce8 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0014b50:	0f 20 d8             	mov    eax,cr3
c0014b53:	0f 22 d8             	mov    cr3,eax
c0014b56:	83 c4 20             	add    esp,0x20
c0014b59:	83 c4 0c             	add    esp,0xc
c0014b5c:	5b                   	pop    ebx
c0014b5d:	5e                   	pop    esi
c0014b5e:	5f                   	pop    edi
c0014b5f:	5d                   	pop    ebp
c0014b60:	c3                   	ret    
c0014b61:	83 ec 0c             	sub    esp,0xc
c0014b64:	68 e5 a5 02 c0       	push   0xc002a5e5
c0014b69:	e8 f8 23 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014b6e:	83 c4 10             	add    esp,0x10
c0014b71:	83 c4 0c             	add    esp,0xc
c0014b74:	5b                   	pop    ebx
c0014b75:	5e                   	pop    esi
c0014b76:	5f                   	pop    edi
c0014b77:	5d                   	pop    ebp
c0014b78:	c3                   	ret    

c0014b79 <SysAlarm(regs*)>:
c0014b79:	53                   	push   ebx
c0014b7a:	83 ec 10             	sub    esp,0x10
c0014b7d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014b81:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014b84:	68 fe a5 02 c0       	push   0xc002a5fe
c0014b89:	e8 d8 23 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014b8e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014b91:	83 c4 0c             	add    esp,0xc
c0014b94:	31 d2                	xor    edx,edx
c0014b96:	52                   	push   edx
c0014b97:	50                   	push   eax
c0014b98:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0014b9e:	e8 c5 09 00 00       	call   c0015568 <KeAlarm(ThreadControlBlock*, unsigned long long)>
c0014ba3:	83 c4 18             	add    esp,0x18
c0014ba6:	5b                   	pop    ebx
c0014ba7:	c3                   	ret    

c0014ba8 <SysEject(regs*)>:
c0014ba8:	83 ec 0c             	sub    esp,0xc
c0014bab:	83 ca ff             	or     edx,0xffffffff
c0014bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014bb2:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014bb5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014bba:	83 e9 41             	sub    ecx,0x41
c0014bbd:	83 f9 19             	cmp    ecx,0x19
c0014bc0:	77 18                	ja     c0014bda <SysEject(regs*)+0x32>
c0014bc2:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c0014bc9:	85 c9                	test   ecx,ecx
c0014bcb:	74 0d                	je     c0014bda <SysEject(regs*)+0x32>
c0014bcd:	83 ec 0c             	sub    esp,0xc
c0014bd0:	51                   	push   ecx
c0014bd1:	e8 22 66 ff ff       	call   c000b1f8 <LogicalDisk::eject()>
c0014bd6:	83 c4 10             	add    esp,0x10
c0014bd9:	99                   	cdq    
c0014bda:	83 c4 0c             	add    esp,0xc
c0014bdd:	c3                   	ret    

c0014bde <SysExit(regs*)>:
c0014bde:	83 ec 18             	sub    esp,0x18
c0014be1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014be5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014be8:	e8 b7 2a 00 00       	call   c00176a4 <KeTerminateCurrentThread(int)>
c0014bed:	83 c8 ff             	or     eax,0xffffffff
c0014bf0:	83 c4 1c             	add    esp,0x1c
c0014bf3:	89 c2                	mov    edx,eax
c0014bf5:	c3                   	ret    

c0014bf6 <SysGetCwd(regs*)>:
c0014bf6:	83 ec 10             	sub    esp,0x10
c0014bf9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bfd:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014c00:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014c03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c08:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014c0b:	e8 44 3a ff ff       	call   c0008654 <Fs::getcwd(Process*, char*, int)>
c0014c10:	83 c4 1c             	add    esp,0x1c
c0014c13:	99                   	cdq    
c0014c14:	c3                   	ret    

c0014c15 <SysGetPID(regs*)>:
c0014c15:	83 ec 14             	sub    esp,0x14
c0014c18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c1d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014c20:	ff 30                	push   DWORD PTR [eax]
c0014c22:	68 13 a6 02 c0       	push   0xc002a613
c0014c27:	e8 3a 23 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014c2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c31:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014c34:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c36:	83 c4 1c             	add    esp,0x1c
c0014c39:	99                   	cdq    
c0014c3a:	c3                   	ret    

c0014c3b <SysGetRAMData(regs*)>:
c0014c3b:	a1 88 32 03 c0       	mov    eax,ds:0xc0033288
c0014c40:	03 05 78 31 03 c0    	add    eax,DWORD PTR ds:0xc0033178
c0014c46:	8b 0d 7c 31 03 c0    	mov    ecx,DWORD PTR ds:0xc003317c
c0014c4c:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c0014c52:	99                   	cdq    
c0014c53:	f7 f9                	idiv   ecx
c0014c55:	c1 e0 18             	shl    eax,0x18
c0014c58:	09 c8                	or     eax,ecx
c0014c5a:	99                   	cdq    
c0014c5b:	c3                   	ret    

c0014c5c <SysGetVGAPtr(regs*)>:
c0014c5c:	55                   	push   ebp
c0014c5d:	57                   	push   edi
c0014c5e:	56                   	push   esi
c0014c5f:	53                   	push   ebx
c0014c60:	83 ec 1c             	sub    esp,0x1c
c0014c63:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014c67:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0014c6a:	83 f8 ff             	cmp    eax,0xffffffff
c0014c6d:	74 23                	je     c0014c92 <SysGetVGAPtr(regs*)+0x36>
c0014c6f:	83 ec 0c             	sub    esp,0xc
c0014c72:	50                   	push   eax
c0014c73:	e8 e4 24 00 00       	call   c001715c <KeProcessFromPID(int)>
c0014c78:	31 d2                	xor    edx,edx
c0014c7a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014c7e:	83 c4 10             	add    esp,0x10
c0014c81:	b8 01 00 00 00       	mov    eax,0x1
c0014c86:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014c8b:	75 11                	jne    c0014c9e <SysGetVGAPtr(regs*)+0x42>
c0014c8d:	e9 80 00 00 00       	jmp    c0014d12 <SysGetVGAPtr(regs*)+0xb6>
c0014c92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c97:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014c9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014ca2:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0014ca6:	8b a8 a6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5a6]
c0014cac:	74 0c                	je     c0014cba <SysGetVGAPtr(regs*)+0x5e>
c0014cae:	83 ec 0c             	sub    esp,0xc
c0014cb1:	55                   	push   ebp
c0014cb2:	e8 70 dc ff ff       	call   c0012927 <setActiveTerminal(VgaText*)>
c0014cb7:	83 c4 10             	add    esp,0x10
c0014cba:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0014cbd:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014cc2:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0014cc5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014cc7:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0014cca:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014ccd:	89 88 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],ecx
c0014cd3:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0014cd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014cd9:	89 88 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],ecx
c0014cdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014ce3:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0014ce6:	0f b6 80 76 02 00 00 	movzx  eax,BYTE PTR [eax+0x276]
c0014ced:	c1 e8 07             	shr    eax,0x7
c0014cf0:	89 81 a8 0f 00 00    	mov    DWORD PTR [ecx+0xfa8],eax
c0014cf6:	50                   	push   eax
c0014cf7:	50                   	push   eax
c0014cf8:	68 22 a6 02 c0       	push   0xc002a622
c0014cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014d00:	05 ac 0f 00 00       	add    eax,0xfac
c0014d05:	50                   	push   eax
c0014d06:	e8 45 b9 fe ff       	call   c0000650 <strcpy>
c0014d0b:	83 c4 10             	add    esp,0x10
c0014d0e:	31 c0                	xor    eax,eax
c0014d10:	31 d2                	xor    edx,edx
c0014d12:	83 c4 1c             	add    esp,0x1c
c0014d15:	5b                   	pop    ebx
c0014d16:	5e                   	pop    esi
c0014d17:	5f                   	pop    edi
c0014d18:	5d                   	pop    ebp
c0014d19:	c3                   	ret    
c0014d1a:	66 90                	xchg   ax,ax

c0014d1c <SysKill(regs*)>:
c0014d1c:	53                   	push   ebx
c0014d1d:	83 ec 08             	sub    esp,0x8
c0014d20:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014d24:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0014d28:	75 16                	jne    c0014d40 <SysKill(regs*)+0x24>
c0014d2a:	83 ec 0c             	sub    esp,0xc
c0014d2d:	68 2c a6 02 c0       	push   0xc002a62c
c0014d32:	e8 f1 b5 ff ff       	call   c0010328 <KePanic(char const*)>
c0014d37:	83 c4 10             	add    esp,0x10
c0014d3a:	e9 89 00 00 00       	jmp    c0014dc8 <SysKill(regs*)+0xac>
c0014d3f:	90                   	nop
c0014d40:	83 ec 0c             	sub    esp,0xc
c0014d43:	68 4c 33 03 c0       	push   0xc003334c
c0014d48:	e8 33 2a 01 00       	call   c0027780 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014d4d:	8d 76 00             	lea    esi,[esi+0x0]
c0014d50:	83 c4 10             	add    esp,0x10
c0014d53:	85 c0                	test   eax,eax
c0014d55:	74 19                	je     c0014d70 <SysKill(regs*)+0x54>
c0014d57:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014d5a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014d5d:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014d5f:	74 33                	je     c0014d94 <SysKill(regs*)+0x78>
c0014d61:	52                   	push   edx
c0014d62:	52                   	push   edx
c0014d63:	50                   	push   eax
c0014d64:	68 4c 33 03 c0       	push   0xc003334c
c0014d69:	e8 1e 2f 01 00       	call   c0027c8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014d6e:	eb e0                	jmp    c0014d50 <SysKill(regs*)+0x34>
c0014d70:	83 ec 0c             	sub    esp,0xc
c0014d73:	68 40 33 03 c0       	push   0xc0033340
c0014d78:	e8 03 2a 01 00       	call   c0027780 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014d7d:	8d 76 00             	lea    esi,[esi+0x0]
c0014d80:	83 c4 10             	add    esp,0x10
c0014d83:	85 c0                	test   eax,eax
c0014d85:	74 41                	je     c0014dc8 <SysKill(regs*)+0xac>
c0014d87:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014d8a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014d8d:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014d8f:	75 27                	jne    c0014db8 <SysKill(regs*)+0x9c>
c0014d91:	8d 76 00             	lea    esi,[esi+0x0]
c0014d94:	51                   	push   ecx
c0014d95:	51                   	push   ecx
c0014d96:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014d99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d9e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014da1:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0014da7:	e8 8b c7 ff ff       	call   c0011537 <KeRaiseSignal(SigHandlerBlock*, int)>
c0014dac:	83 c4 10             	add    esp,0x10
c0014daf:	31 c0                	xor    eax,eax
c0014db1:	31 d2                	xor    edx,edx
c0014db3:	eb 1b                	jmp    c0014dd0 <SysKill(regs*)+0xb4>
c0014db5:	8d 76 00             	lea    esi,[esi+0x0]
c0014db8:	52                   	push   edx
c0014db9:	52                   	push   edx
c0014dba:	50                   	push   eax
c0014dbb:	68 40 33 03 c0       	push   0xc0033340
c0014dc0:	e8 c7 2e 01 00       	call   c0027c8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014dc5:	eb b9                	jmp    c0014d80 <SysKill(regs*)+0x64>
c0014dc7:	90                   	nop
c0014dc8:	83 c8 ff             	or     eax,0xffffffff
c0014dcb:	89 c2                	mov    edx,eax
c0014dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0014dd0:	83 c4 08             	add    esp,0x8
c0014dd3:	5b                   	pop    ebx
c0014dd4:	c3                   	ret    

c0014dd5 <SysLoadDLL(regs*)>:
c0014dd5:	56                   	push   esi
c0014dd6:	31 d2                	xor    edx,edx
c0014dd8:	53                   	push   ebx
c0014dd9:	b8 01 00 00 00       	mov    eax,0x1
c0014dde:	53                   	push   ebx
c0014ddf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014de3:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0014de7:	0f 84 82 00 00 00    	je     c0014e6f <SysLoadDLL(regs*)+0x9a>
c0014ded:	83 ec 0c             	sub    esp,0xc
c0014df0:	68 14 01 00 00       	push   0x114
c0014df5:	e8 da b0 ff ff       	call   c000fed4 <malloc>
c0014dfa:	83 c4 0c             	add    esp,0xc
c0014dfd:	89 c3                	mov    ebx,eax
c0014dff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e04:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014e07:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014e0a:	53                   	push   ebx
c0014e0b:	e8 c4 3b ff ff       	call   c00089d4 <File::File(char const*, Process*)>
c0014e10:	83 c4 10             	add    esp,0x10
c0014e13:	31 d2                	xor    edx,edx
c0014e15:	85 db                	test   ebx,ebx
c0014e17:	b8 02 00 00 00       	mov    eax,0x2
c0014e1c:	74 51                	je     c0014e6f <SysLoadDLL(regs*)+0x9a>
c0014e1e:	83 ec 0c             	sub    esp,0xc
c0014e21:	53                   	push   ebx
c0014e22:	e8 8f 3e ff ff       	call   c0008cb6 <File::exists()>
c0014e27:	83 c4 10             	add    esp,0x10
c0014e2a:	84 c0                	test   al,al
c0014e2c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e2e:	75 11                	jne    c0014e41 <SysLoadDLL(regs*)+0x6c>
c0014e30:	83 ec 0c             	sub    esp,0xc
c0014e33:	53                   	push   ebx
c0014e34:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014e37:	83 c4 10             	add    esp,0x10
c0014e3a:	b8 03 00 00 00       	mov    eax,0x3
c0014e3f:	eb 2c                	jmp    c0014e6d <SysLoadDLL(regs*)+0x98>
c0014e41:	83 ec 0c             	sub    esp,0xc
c0014e44:	53                   	push   ebx
c0014e45:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014e48:	83 c4 0c             	add    esp,0xc
c0014e4b:	6a 00                	push   0x0
c0014e4d:	ff 35 08 31 03 c0    	push   DWORD PTR ds:0xc0033108
c0014e53:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014e56:	e8 d3 16 00 00       	call   c001652e <KeLoadAndExecuteDriver(char const*, void*, bool)>
c0014e5b:	83 c4 10             	add    esp,0x10
c0014e5e:	31 d2                	xor    edx,edx
c0014e60:	88 c1                	mov    cl,al
c0014e62:	31 c0                	xor    eax,eax
c0014e64:	84 c9                	test   cl,cl
c0014e66:	75 07                	jne    c0014e6f <SysLoadDLL(regs*)+0x9a>
c0014e68:	b8 04 00 00 00       	mov    eax,0x4
c0014e6d:	31 d2                	xor    edx,edx
c0014e6f:	59                   	pop    ecx
c0014e70:	5b                   	pop    ebx
c0014e71:	5e                   	pop    esi
c0014e72:	c3                   	ret    

c0014e73 <SysPause(regs*)>:
c0014e73:	83 ec 18             	sub    esp,0x18
c0014e76:	6a 08                	push   0x8
c0014e78:	e8 f3 20 00 00       	call   c0016f70 <blockTask(TaskState)>
c0014e7d:	31 c0                	xor    eax,eax
c0014e7f:	31 d2                	xor    edx,edx
c0014e81:	83 c4 1c             	add    esp,0x1c
c0014e84:	c3                   	ret    

c0014e85 <SysPthreadCreate(regs*)>:
c0014e85:	83 ec 18             	sub    esp,0x18
c0014e88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e8d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014e90:	e8 b3 1e 00 00       	call   c0016d48 <Process::createUserThread()>
c0014e95:	31 c0                	xor    eax,eax
c0014e97:	31 d2                	xor    edx,edx
c0014e99:	83 c4 1c             	add    esp,0x1c
c0014e9c:	c3                   	ret    

c0014e9d <SysPthreadGetTID(regs*)>:
c0014e9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ea2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ea5:	99                   	cdq    
c0014ea6:	c3                   	ret    

c0014ea7 <SysInternalPthreadGetContext(regs*)>:
c0014ea7:	31 c0                	xor    eax,eax
c0014ea9:	31 d2                	xor    edx,edx
c0014eab:	c3                   	ret    

c0014eac <SysInternalPthreadGetStartLocation(regs*)>:
c0014eac:	31 c0                	xor    eax,eax
c0014eae:	31 d2                	xor    edx,edx
c0014eb0:	c3                   	ret    

c0014eb1 <SysPthreadJoin(regs*)>:
c0014eb1:	31 c0                	xor    eax,eax
c0014eb3:	31 d2                	xor    edx,edx
c0014eb5:	c3                   	ret    

c0014eb6 <SysPthreadExit(regs*)>:
c0014eb6:	83 ec 18             	sub    esp,0x18
c0014eb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ebd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014ec0:	e8 df 27 00 00       	call   c00176a4 <KeTerminateCurrentThread(int)>
c0014ec5:	83 c8 ff             	or     eax,0xffffffff
c0014ec8:	83 c4 1c             	add    esp,0x1c
c0014ecb:	89 c2                	mov    edx,eax
c0014ecd:	c3                   	ret    

c0014ece <SysRead(regs*)>:
c0014ece:	57                   	push   edi
c0014ecf:	56                   	push   esi
c0014ed0:	53                   	push   ebx
c0014ed1:	83 ec 10             	sub    esp,0x10
c0014ed4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014ed8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014edb:	83 f8 02             	cmp    eax,0x2
c0014ede:	77 10                	ja     c0014ef0 <SysRead(regs*)+0x22>
c0014ee0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ee5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ee8:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0014eee:	eb 0e                	jmp    c0014efe <SysRead(regs*)+0x30>
c0014ef0:	83 ec 0c             	sub    esp,0xc
c0014ef3:	50                   	push   eax
c0014ef4:	e8 18 e8 ff ff       	call   c0013711 <KeGetFileFromDescriptor(int)>
c0014ef9:	83 c4 10             	add    esp,0x10
c0014efc:	89 c1                	mov    ecx,eax
c0014efe:	83 c8 ff             	or     eax,0xffffffff
c0014f01:	85 c9                	test   ecx,ecx
c0014f03:	89 c2                	mov    edx,eax
c0014f05:	74 28                	je     c0014f2f <SysRead(regs*)+0x61>
c0014f07:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014f0f:	83 ec 0c             	sub    esp,0xc
c0014f12:	31 ff                	xor    edi,edi
c0014f14:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014f18:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014f1a:	52                   	push   edx
c0014f1b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014f1e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014f21:	57                   	push   edi
c0014f22:	56                   	push   esi
c0014f23:	51                   	push   ecx
c0014f24:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014f27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014f2b:	83 c4 20             	add    esp,0x20
c0014f2e:	99                   	cdq    
c0014f2f:	83 c4 10             	add    esp,0x10
c0014f32:	5b                   	pop    ebx
c0014f33:	5e                   	pop    esi
c0014f34:	5f                   	pop    edi
c0014f35:	c3                   	ret    

c0014f36 <SysRegisterSignal(regs*)>:
c0014f36:	83 ec 18             	sub    esp,0x18
c0014f39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014f3d:	6a 00                	push   0x0
c0014f3f:	6a 00                	push   0x0
c0014f41:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014f44:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014f47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f4c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f4f:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0014f55:	e8 a7 c5 ff ff       	call   c0011501 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014f5a:	83 c4 2c             	add    esp,0x2c
c0014f5d:	99                   	cdq    
c0014f5e:	c3                   	ret    

c0014f5f <SysRegistryGetTypeFromPath(regs*)>:
c0014f5f:	53                   	push   ebx
c0014f60:	81 ec 40 01 00 00    	sub    esp,0x140
c0014f66:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014f6d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014f70:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014f73:	e8 ab 97 ff ff       	call   c000e723 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014f78:	83 c4 10             	add    esp,0x10
c0014f7b:	85 c0                	test   eax,eax
c0014f7d:	89 c1                	mov    ecx,eax
c0014f7f:	74 15                	je     c0014f96 <SysRegistryGetTypeFromPath(regs*)+0x37>
c0014f81:	50                   	push   eax
c0014f82:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014f86:	50                   	push   eax
c0014f87:	51                   	push   ecx
c0014f88:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014f8b:	e8 78 93 ff ff       	call   c000e308 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014f90:	83 c4 10             	add    esp,0x10
c0014f93:	99                   	cdq    
c0014f94:	eb 05                	jmp    c0014f9b <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0014f96:	83 c8 ff             	or     eax,0xffffffff
c0014f99:	89 c2                	mov    edx,eax
c0014f9b:	81 c4 38 01 00 00    	add    esp,0x138
c0014fa1:	5b                   	pop    ebx
c0014fa2:	c3                   	ret    

c0014fa3 <SysRegistryReadExtent(regs*)>:
c0014fa3:	83 ec 1c             	sub    esp,0x1c
c0014fa6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014faa:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014fad:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014fb0:	85 c0                	test   eax,eax
c0014fb2:	79 1f                	jns    c0014fd3 <SysRegistryReadExtent(regs*)+0x30>
c0014fb4:	52                   	push   edx
c0014fb5:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014fba:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014fbe:	52                   	push   edx
c0014fbf:	50                   	push   eax
c0014fc0:	51                   	push   ecx
c0014fc1:	e8 34 92 ff ff       	call   c000e1fa <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014fce:	83 c4 10             	add    esp,0x10
c0014fd1:	eb 14                	jmp    c0014fe7 <SysRegistryReadExtent(regs*)+0x44>
c0014fd3:	83 ec 04             	sub    esp,0x4
c0014fd6:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014fd9:	50                   	push   eax
c0014fda:	51                   	push   ecx
c0014fdb:	e8 b8 8c ff ff       	call   c000dc98 <CmGetString(Reghive_Tag*, int, char*)>
c0014fe0:	83 c4 10             	add    esp,0x10
c0014fe3:	31 c0                	xor    eax,eax
c0014fe5:	31 d2                	xor    edx,edx
c0014fe7:	83 c4 1c             	add    esp,0x1c
c0014fea:	c3                   	ret    

c0014feb <SysRegistryPathToExtentLookup(regs*)>:
c0014feb:	83 ec 14             	sub    esp,0x14
c0014fee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ff2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014ff5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014ff8:	e8 26 97 ff ff       	call   c000e723 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014ffd:	83 c4 1c             	add    esp,0x1c
c0015000:	99                   	cdq    
c0015001:	c3                   	ret    

c0015002 <SysRegistryEnterDirectory(regs*)>:
c0015002:	83 ec 14             	sub    esp,0x14
c0015005:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015009:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001500c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001500f:	e8 fb 8c ff ff       	call   c000dd0f <CmEnterDirectory(Reghive_Tag*, int)>
c0015014:	83 c4 1c             	add    esp,0x1c
c0015017:	99                   	cdq    
c0015018:	c3                   	ret    

c0015019 <SysRegistryGetNext(regs*)>:
c0015019:	83 ec 14             	sub    esp,0x14
c001501c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015020:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015023:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015026:	e8 23 8d ff ff       	call   c000dd4e <CmGetNext(Reghive_Tag*, int)>
c001502b:	83 c4 1c             	add    esp,0x1c
c001502e:	99                   	cdq    
c001502f:	c3                   	ret    

c0015030 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0015030:	57                   	push   edi
c0015031:	56                   	push   esi
c0015032:	53                   	push   ebx
c0015033:	81 ec 34 01 00 00    	sub    esp,0x134
c0015039:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015040:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0015044:	57                   	push   edi
c0015045:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015048:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001504b:	e8 b8 92 ff ff       	call   c000e308 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0015050:	89 c3                	mov    ebx,eax
c0015052:	58                   	pop    eax
c0015053:	5a                   	pop    edx
c0015054:	57                   	push   edi
c0015055:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015058:	e8 f3 b5 fe ff       	call   c0000650 <strcpy>
c001505d:	81 c4 40 01 00 00    	add    esp,0x140
c0015063:	89 d8                	mov    eax,ebx
c0015065:	5b                   	pop    ebx
c0015066:	99                   	cdq    
c0015067:	5e                   	pop    esi
c0015068:	5f                   	pop    edi
c0015069:	c3                   	ret    

c001506a <SysRegistryOpen(regs*)>:
c001506a:	83 ec 18             	sub    esp,0x18
c001506d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015071:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015074:	e8 af 8a ff ff       	call   c000db28 <CmOpen(char const*)>
c0015079:	83 c4 1c             	add    esp,0x1c
c001507c:	99                   	cdq    
c001507d:	c3                   	ret    

c001507e <SysRegistryClose(regs*)>:
c001507e:	83 ec 18             	sub    esp,0x18
c0015081:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015085:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015088:	e8 b9 8b ff ff       	call   c000dc46 <CmClose(Reghive_Tag*)>
c001508d:	31 c0                	xor    eax,eax
c001508f:	31 d2                	xor    edx,edx
c0015091:	83 c4 1c             	add    esp,0x1c
c0015094:	c3                   	ret    

c0015095 <SysRegistryEasyReadString(regs*)>:
c0015095:	57                   	push   edi
c0015096:	56                   	push   esi
c0015097:	53                   	push   ebx
c0015098:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001509c:	83 ec 0c             	sub    esp,0xc
c001509f:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00150a2:	e8 81 8a ff ff       	call   c000db28 <CmOpen(char const*)>
c00150a7:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00150aa:	5a                   	pop    edx
c00150ab:	59                   	pop    ecx
c00150ac:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00150af:	89 c3                	mov    ebx,eax
c00150b1:	50                   	push   eax
c00150b2:	e8 6c 96 ff ff       	call   c000e723 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00150b7:	83 c4 10             	add    esp,0x10
c00150ba:	89 c1                	mov    ecx,eax
c00150bc:	b8 01 00 00 00       	mov    eax,0x1
c00150c1:	85 c9                	test   ecx,ecx
c00150c3:	7e 16                	jle    c00150db <SysRegistryEasyReadString(regs*)+0x46>
c00150c5:	50                   	push   eax
c00150c6:	57                   	push   edi
c00150c7:	51                   	push   ecx
c00150c8:	53                   	push   ebx
c00150c9:	e8 ca 8b ff ff       	call   c000dc98 <CmGetString(Reghive_Tag*, int, char*)>
c00150ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150d1:	e8 70 8b ff ff       	call   c000dc46 <CmClose(Reghive_Tag*)>
c00150d6:	83 c4 10             	add    esp,0x10
c00150d9:	31 c0                	xor    eax,eax
c00150db:	5b                   	pop    ebx
c00150dc:	31 d2                	xor    edx,edx
c00150de:	5e                   	pop    esi
c00150df:	5f                   	pop    edi
c00150e0:	c3                   	ret    

c00150e1 <SysRegistryEasyReadInteger(regs*)>:
c00150e1:	56                   	push   esi
c00150e2:	53                   	push   ebx
c00150e3:	83 ec 10             	sub    esp,0x10
c00150e6:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00150ea:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00150ed:	e8 36 8a ff ff       	call   c000db28 <CmOpen(char const*)>
c00150f2:	5a                   	pop    edx
c00150f3:	59                   	pop    ecx
c00150f4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00150f7:	89 c3                	mov    ebx,eax
c00150f9:	50                   	push   eax
c00150fa:	e8 24 96 ff ff       	call   c000e723 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00150ff:	83 c4 10             	add    esp,0x10
c0015102:	89 c1                	mov    ecx,eax
c0015104:	b8 01 00 00 00       	mov    eax,0x1
c0015109:	85 c9                	test   ecx,ecx
c001510b:	7e 18                	jle    c0015125 <SysRegistryEasyReadInteger(regs*)+0x44>
c001510d:	50                   	push   eax
c001510e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015111:	51                   	push   ecx
c0015112:	53                   	push   ebx
c0015113:	e8 e2 90 ff ff       	call   c000e1fa <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0015118:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001511b:	e8 26 8b ff ff       	call   c000dc46 <CmClose(Reghive_Tag*)>
c0015120:	83 c4 10             	add    esp,0x10
c0015123:	31 c0                	xor    eax,eax
c0015125:	59                   	pop    ecx
c0015126:	31 d2                	xor    edx,edx
c0015128:	5b                   	pop    ebx
c0015129:	5e                   	pop    esi
c001512a:	c3                   	ret    

c001512b <SysSbrk(regs*)>:
c001512b:	56                   	push   esi
c001512c:	53                   	push   ebx
c001512d:	50                   	push   eax
c001512e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015133:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015137:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001513a:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001513d:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c0015143:	85 db                	test   ebx,ebx
c0015145:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0015148:	74 02                	je     c001514c <SysSbrk(regs*)+0x21>
c001514a:	79 06                	jns    c0015152 <SysSbrk(regs*)+0x27>
c001514c:	89 f0                	mov    eax,esi
c001514e:	31 d2                	xor    edx,edx
c0015150:	eb 2a                	jmp    c001517c <SysSbrk(regs*)+0x51>
c0015152:	83 c8 ff             	or     eax,0xffffffff
c0015155:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001515b:	89 c2                	mov    edx,eax
c001515d:	77 1d                	ja     c001517c <SysSbrk(regs*)+0x51>
c001515f:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0015165:	50                   	push   eax
c0015166:	68 07 0c 00 00       	push   0xc07
c001516b:	c1 ea 0c             	shr    edx,0xc
c001516e:	52                   	push   edx
c001516f:	51                   	push   ecx
c0015170:	e8 db ee ff ff       	call   c0014050 <VAS::allocatePages(int, int)>
c0015175:	89 f0                	mov    eax,esi
c0015177:	31 d2                	xor    edx,edx
c0015179:	83 c4 10             	add    esp,0x10
c001517c:	59                   	pop    ecx
c001517d:	5b                   	pop    ebx
c001517e:	5e                   	pop    esi
c001517f:	c3                   	ret    

c0015180 <SysSetCwd(regs*)>:
c0015180:	83 ec 14             	sub    esp,0x14
c0015183:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015187:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001518a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001518f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015192:	e8 be 3b ff ff       	call   c0008d55 <Fs::setcwd(Process*, char*)>
c0015197:	83 c4 1c             	add    esp,0x1c
c001519a:	99                   	cdq    
c001519b:	c3                   	ret    

c001519c <SysSetTime(regs*)>:
c001519c:	55                   	push   ebp
c001519d:	31 d2                	xor    edx,edx
c001519f:	57                   	push   edi
c00151a0:	56                   	push   esi
c00151a1:	53                   	push   ebx
c00151a2:	bb 3c 00 00 00       	mov    ebx,0x3c
c00151a7:	83 ec 30             	sub    esp,0x30
c00151aa:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00151ae:	8b 71 20             	mov    esi,DWORD PTR [ecx+0x20]
c00151b1:	89 f0                	mov    eax,esi
c00151b3:	f7 f3                	div    ebx
c00151b5:	89 d7                	mov    edi,edx
c00151b7:	31 d2                	xor    edx,edx
c00151b9:	f7 f3                	div    ebx
c00151bb:	bb 10 0e 00 00       	mov    ebx,0xe10
c00151c0:	89 f0                	mov    eax,esi
c00151c2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00151c6:	31 d2                	xor    edx,edx
c00151c8:	f7 f3                	div    ebx
c00151ca:	bb 18 00 00 00       	mov    ebx,0x18
c00151cf:	31 d2                	xor    edx,edx
c00151d1:	f7 f3                	div    ebx
c00151d3:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00151d6:	bb 0c 00 00 00       	mov    ebx,0xc
c00151db:	89 c6                	mov    esi,eax
c00151dd:	c1 e8 05             	shr    eax,0x5
c00151e0:	83 e6 1f             	and    esi,0x1f
c00151e3:	46                   	inc    esi
c00151e4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00151e8:	31 d2                	xor    edx,edx
c00151ea:	f7 f3                	div    ebx
c00151ec:	31 db                	xor    ebx,ebx
c00151ee:	57                   	push   edi
c00151ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00151f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151f7:	0f b7 69 24          	movzx  ebp,WORD PTR [ecx+0x24]
c00151fb:	55                   	push   ebp
c00151fc:	52                   	push   edx
c00151fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0015201:	56                   	push   esi
c0015202:	68 4d a6 02 c0       	push   0xc002a64d
c0015207:	e8 5a 1d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001520c:	83 c4 1c             	add    esp,0x1c
c001520f:	57                   	push   edi
c0015210:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015214:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015218:	55                   	push   ebp
c0015219:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001521d:	52                   	push   edx
c001521e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015222:	56                   	push   esi
c0015223:	68 6f a6 02 c0       	push   0xc002a66f
c0015228:	e8 39 1d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001522d:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c0015232:	31 c9                	xor    ecx,ecx
c0015234:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015238:	8a 5c 24 30          	mov    bl,BYTE PTR [esp+0x30]
c001523c:	8a 7c 24 2c          	mov    bh,BYTE PTR [esp+0x2c]
c0015240:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015246:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001524a:	89 f0                	mov    eax,esi
c001524c:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0015250:	88 c1                	mov    cl,al
c0015252:	89 e8                	mov    eax,ebp
c0015254:	88 d5                	mov    ch,dl
c0015256:	83 c4 1c             	add    esp,0x1c
c0015259:	c1 e0 10             	shl    eax,0x10
c001525c:	0f b7 d1             	movzx  edx,cx
c001525f:	09 c2                	or     edx,eax
c0015261:	89 f8                	mov    eax,edi
c0015263:	c1 e0 10             	shl    eax,0x10
c0015266:	89 d1                	mov    ecx,edx
c0015268:	89 da                	mov    edx,ebx
c001526a:	81 e2 ff ff 00 ff    	and    edx,0xff00ffff
c0015270:	09 c2                	or     edx,eax
c0015272:	52                   	push   edx
c0015273:	51                   	push   ecx
c0015274:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015278:	e8 21 4b ff ff       	call   c0009d9e <Clock::setTimeInDatetimeLocal(datetime_t)>
c001527d:	83 c4 3c             	add    esp,0x3c
c0015280:	31 d2                	xor    edx,edx
c0015282:	5b                   	pop    ebx
c0015283:	5e                   	pop    esi
c0015284:	83 f0 01             	xor    eax,0x1
c0015287:	5f                   	pop    edi
c0015288:	0f b6 c0             	movzx  eax,al
c001528b:	5d                   	pop    ebp
c001528c:	c3                   	ret    

c001528d <SysSymlink(regs*)>:
c001528d:	56                   	push   esi
c001528e:	83 c8 ff             	or     eax,0xffffffff
c0015291:	53                   	push   ebx
c0015292:	89 c2                	mov    edx,eax
c0015294:	81 ec 34 02 00 00    	sub    esp,0x234
c001529a:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c00152a1:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00152a5:	74 50                	je     c00152f7 <SysSymlink(regs*)+0x6a>
c00152a7:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00152aa:	85 c9                	test   ecx,ecx
c00152ac:	74 49                	je     c00152f7 <SysSymlink(regs*)+0x6a>
c00152ae:	6a 01                	push   0x1
c00152b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152b8:	05 0c 01 00 00       	add    eax,0x10c
c00152bd:	50                   	push   eax
c00152be:	51                   	push   ecx
c00152bf:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00152c3:	56                   	push   esi
c00152c4:	e8 df 33 ff ff       	call   c00086a8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00152c9:	6a 01                	push   0x1
c00152cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152d0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152d3:	05 0c 01 00 00       	add    eax,0x10c
c00152d8:	50                   	push   eax
c00152d9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00152dc:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00152e3:	53                   	push   ebx
c00152e4:	e8 bf 33 ff ff       	call   c00086a8 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00152e9:	83 c4 18             	add    esp,0x18
c00152ec:	56                   	push   esi
c00152ed:	53                   	push   ebx
c00152ee:	e8 e2 2f ff ff       	call   c00082d5 <KeCreateSymlink(char const*, char const*)>
c00152f3:	83 c4 10             	add    esp,0x10
c00152f6:	99                   	cdq    
c00152f7:	81 c4 34 02 00 00    	add    esp,0x234
c00152fd:	5b                   	pop    ebx
c00152fe:	5e                   	pop    esi
c00152ff:	c3                   	ret    

c0015300 <SysTimezone(regs*)>:
c0015300:	83 ec 0c             	sub    esp,0xc
c0015303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015307:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c001530b:	75 17                	jne    c0015324 <SysTimezone(regs*)+0x24>
c001530d:	83 ec 0c             	sub    esp,0xc
c0015310:	68 91 a6 02 c0       	push   0xc002a691
c0015315:	e8 4c 1c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001531a:	83 c8 ff             	or     eax,0xffffffff
c001531d:	83 c4 10             	add    esp,0x10
c0015320:	89 c2                	mov    edx,eax
c0015322:	eb 16                	jmp    c001533a <SysTimezone(regs*)+0x3a>
c0015324:	83 ec 0c             	sub    esp,0xc
c0015327:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001532a:	e8 26 45 ff ff       	call   c0009855 <KeSetTimezone(int)>
c001532f:	31 d2                	xor    edx,edx
c0015331:	83 c4 10             	add    esp,0x10
c0015334:	83 f0 01             	xor    eax,0x1
c0015337:	0f b6 c0             	movzx  eax,al
c001533a:	83 c4 0c             	add    esp,0xc
c001533d:	c3                   	ret    

c001533e <SysTruncate(regs*)>:
c001533e:	55                   	push   ebp
c001533f:	57                   	push   edi
c0015340:	31 ff                	xor    edi,edi
c0015342:	56                   	push   esi
c0015343:	53                   	push   ebx
c0015344:	83 ec 0c             	sub    esp,0xc
c0015347:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001534b:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001534e:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0015352:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0015355:	89 ce                	mov    esi,ecx
c0015357:	0f 84 9a 00 00 00    	je     c00153f7 <SysTruncate(regs*)+0xb9>
c001535d:	83 ec 0c             	sub    esp,0xc
c0015360:	68 14 01 00 00       	push   0x114
c0015365:	e8 6a ab ff ff       	call   c000fed4 <malloc>
c001536a:	83 c4 0c             	add    esp,0xc
c001536d:	89 c3                	mov    ebx,eax
c001536f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015374:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015377:	55                   	push   ebp
c0015378:	53                   	push   ebx
c0015379:	e8 56 36 ff ff       	call   c00089d4 <File::File(char const*, Process*)>
c001537e:	83 c4 10             	add    esp,0x10
c0015381:	31 d2                	xor    edx,edx
c0015383:	85 db                	test   ebx,ebx
c0015385:	b8 03 00 00 00       	mov    eax,0x3
c001538a:	0f 84 a2 00 00 00    	je     c0015432 <SysTruncate(regs*)+0xf4>
c0015390:	51                   	push   ecx
c0015391:	51                   	push   ecx
c0015392:	6a 02                	push   0x2
c0015394:	53                   	push   ebx
c0015395:	e8 58 36 ff ff       	call   c00089f2 <File::open(FileOpenMode)>
c001539a:	83 c4 10             	add    esp,0x10
c001539d:	85 c0                	test   eax,eax
c001539f:	74 13                	je     c00153b4 <SysTruncate(regs*)+0x76>
c00153a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00153a3:	83 ec 0c             	sub    esp,0xc
c00153a6:	53                   	push   ebx
c00153a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00153aa:	83 c4 10             	add    esp,0x10
c00153ad:	b8 04 00 00 00       	mov    eax,0x4
c00153b2:	eb 7c                	jmp    c0015430 <SysTruncate(regs*)+0xf2>
c00153b4:	52                   	push   edx
c00153b5:	57                   	push   edi
c00153b6:	56                   	push   esi
c00153b7:	53                   	push   ebx
c00153b8:	e8 49 37 ff ff       	call   c0008b06 <File::truncate(unsigned long long)>
c00153bd:	83 c4 10             	add    esp,0x10
c00153c0:	85 c0                	test   eax,eax
c00153c2:	74 1b                	je     c00153df <SysTruncate(regs*)+0xa1>
c00153c4:	83 ec 0c             	sub    esp,0xc
c00153c7:	53                   	push   ebx
c00153c8:	e8 83 36 ff ff       	call   c0008a50 <File::close()>
c00153cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00153cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00153d2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00153d5:	83 c4 10             	add    esp,0x10
c00153d8:	b8 05 00 00 00       	mov    eax,0x5
c00153dd:	eb 51                	jmp    c0015430 <SysTruncate(regs*)+0xf2>
c00153df:	83 ec 0c             	sub    esp,0xc
c00153e2:	53                   	push   ebx
c00153e3:	e8 68 36 ff ff       	call   c0008a50 <File::close()>
c00153e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00153ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00153ed:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00153f0:	83 c4 10             	add    esp,0x10
c00153f3:	31 c0                	xor    eax,eax
c00153f5:	eb 39                	jmp    c0015430 <SysTruncate(regs*)+0xf2>
c00153f7:	31 d2                	xor    edx,edx
c00153f9:	83 fd 02             	cmp    ebp,0x2
c00153fc:	b8 01 00 00 00       	mov    eax,0x1
c0015401:	7e 2f                	jle    c0015432 <SysTruncate(regs*)+0xf4>
c0015403:	83 ec 0c             	sub    esp,0xc
c0015406:	51                   	push   ecx
c0015407:	e8 05 e3 ff ff       	call   c0013711 <KeGetFileFromDescriptor(int)>
c001540c:	83 c4 10             	add    esp,0x10
c001540f:	31 d2                	xor    edx,edx
c0015411:	89 c1                	mov    ecx,eax
c0015413:	b8 02 00 00 00       	mov    eax,0x2
c0015418:	85 c9                	test   ecx,ecx
c001541a:	74 16                	je     c0015432 <SysTruncate(regs*)+0xf4>
c001541c:	50                   	push   eax
c001541d:	57                   	push   edi
c001541e:	56                   	push   esi
c001541f:	51                   	push   ecx
c0015420:	e8 e1 36 ff ff       	call   c0008b06 <File::truncate(unsigned long long)>
c0015425:	83 c4 10             	add    esp,0x10
c0015428:	85 c0                	test   eax,eax
c001542a:	0f 95 c0             	setne  al
c001542d:	0f b6 c0             	movzx  eax,al
c0015430:	31 d2                	xor    edx,edx
c0015432:	83 c4 0c             	add    esp,0xc
c0015435:	5b                   	pop    ebx
c0015436:	5e                   	pop    esi
c0015437:	5f                   	pop    edi
c0015438:	5d                   	pop    ebp
c0015439:	c3                   	ret    

c001543a <SysWrite(regs*)>:
c001543a:	57                   	push   edi
c001543b:	56                   	push   esi
c001543c:	53                   	push   ebx
c001543d:	83 ec 10             	sub    esp,0x10
c0015440:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015444:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015447:	83 f8 02             	cmp    eax,0x2
c001544a:	77 10                	ja     c001545c <SysWrite(regs*)+0x22>
c001544c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015451:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015454:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c001545a:	eb 0e                	jmp    c001546a <SysWrite(regs*)+0x30>
c001545c:	83 ec 0c             	sub    esp,0xc
c001545f:	50                   	push   eax
c0015460:	e8 ac e2 ff ff       	call   c0013711 <KeGetFileFromDescriptor(int)>
c0015465:	83 c4 10             	add    esp,0x10
c0015468:	89 c1                	mov    ecx,eax
c001546a:	83 c8 ff             	or     eax,0xffffffff
c001546d:	85 c9                	test   ecx,ecx
c001546f:	89 c2                	mov    edx,eax
c0015471:	74 28                	je     c001549b <SysWrite(regs*)+0x61>
c0015473:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001547b:	83 ec 0c             	sub    esp,0xc
c001547e:	31 ff                	xor    edi,edi
c0015480:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015484:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015486:	52                   	push   edx
c0015487:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001548a:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001548d:	57                   	push   edi
c001548e:	56                   	push   esi
c001548f:	51                   	push   ecx
c0015490:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015493:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015497:	83 c4 20             	add    esp,0x20
c001549a:	99                   	cdq    
c001549b:	83 c4 10             	add    esp,0x10
c001549e:	5b                   	pop    ebx
c001549f:	5e                   	pop    esi
c00154a0:	5f                   	pop    edi
c00154a1:	c3                   	ret    

c00154a2 <SysWsbe(regs*)>:
c00154a2:	55                   	push   ebp
c00154a3:	57                   	push   edi
c00154a4:	56                   	push   esi
c00154a5:	53                   	push   ebx
c00154a6:	83 ec 3c             	sub    esp,0x3c
c00154a9:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00154ad:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c00154b4:	75 2d                	jne    c00154e3 <SysWsbe(regs*)+0x41>
c00154b6:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c00154bd:	75 24                	jne    c00154e3 <SysWsbe(regs*)+0x41>
c00154bf:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c00154c6:	75 1b                	jne    c00154e3 <SysWsbe(regs*)+0x41>
c00154c8:	6a 01                	push   0x1
c00154ca:	6a 00                	push   0x0
c00154cc:	68 4e a7 00 c0       	push   0xc000a74e
c00154d1:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c00154d7:	e8 20 17 00 00       	call   c0016bfc <Process::createThread(void (*)(void*), void*, int)>
c00154dc:	83 c4 10             	add    esp,0x10
c00154df:	31 c0                	xor    eax,eax
c00154e1:	eb 52                	jmp    c0015535 <SysWsbe(regs*)+0x93>
c00154e3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00154e7:	be a6 a6 02 c0       	mov    esi,0xc002a6a6
c00154ec:	b9 0b 00 00 00       	mov    ecx,0xb
c00154f1:	fc                   	cld    
c00154f2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00154f4:	83 ec 0c             	sub    esp,0xc
c00154f7:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00154fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015500:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015503:	8b b0 a6 05 00 00    	mov    esi,DWORD PTR [eax+0x5a6]
c0015509:	8b 06                	mov    eax,DWORD PTR [esi]
c001550b:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c001550e:	57                   	push   edi
c001550f:	e8 6c b0 fe ff       	call   c0000580 <strlen>
c0015514:	5a                   	pop    edx
c0015515:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015519:	52                   	push   edx
c001551a:	31 d2                	xor    edx,edx
c001551c:	57                   	push   edi
c001551d:	52                   	push   edx
c001551e:	50                   	push   eax
c001551f:	56                   	push   esi
c0015520:	ff d5                	call   ebp
c0015522:	83 c4 14             	add    esp,0x14
c0015525:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015528:	e8 77 21 00 00       	call   c00176a4 <KeTerminateCurrentThread(int)>
c001552d:	83 c4 10             	add    esp,0x10
c0015530:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015535:	83 c4 3c             	add    esp,0x3c
c0015538:	31 d2                	xor    edx,edx
c001553a:	5b                   	pop    ebx
c001553b:	5e                   	pop    esi
c001553c:	5f                   	pop    edi
c001553d:	5d                   	pop    ebp
c001553e:	c3                   	ret    

c001553f <SysYield(regs*)>:
c001553f:	83 ec 0c             	sub    esp,0xc
c0015542:	fa                   	cli    
c0015543:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c0015549:	e8 62 19 00 00       	call   c0016eb0 <schedule()>
c001554e:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c0015555:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c001555c:	75 01                	jne    c001555f <SysYield(regs*)+0x20>
c001555e:	fb                   	sti    
c001555f:	31 c0                	xor    eax,eax
c0015561:	31 d2                	xor    edx,edx
c0015563:	83 c4 0c             	add    esp,0xc
c0015566:	c3                   	ret    
c0015567:	90                   	nop

c0015568 <KeAlarm(ThreadControlBlock*, unsigned long long)>:
c0015568:	55                   	push   ebp
c0015569:	57                   	push   edi
c001556a:	56                   	push   esi
c001556b:	53                   	push   ebx
c001556c:	83 ec 2c             	sub    esp,0x2c
c001556f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0015573:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015577:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001557b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001557f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015583:	8b 7a 63             	mov    edi,DWORD PTR [edx+0x63]
c0015586:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c001558a:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c001558e:	c1 e0 08             	shl    eax,0x8
c0015591:	09 c6                	or     esi,eax
c0015593:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c0015597:	c1 e0 10             	shl    eax,0x10
c001559a:	09 c6                	or     esi,eax
c001559c:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c00155a0:	83 e0 7f             	and    eax,0x7f
c00155a3:	c1 e0 18             	shl    eax,0x18
c00155a6:	09 f0                	or     eax,esi
c00155a8:	89 c5                	mov    ebp,eax
c00155aa:	89 f8                	mov    eax,edi
c00155ac:	80 f4 00             	xor    ah,0x0
c00155af:	89 c1                	mov    ecx,eax
c00155b1:	89 e8                	mov    eax,ebp
c00155b3:	80 f4 00             	xor    ah,0x0
c00155b6:	89 c3                	mov    ebx,eax
c00155b8:	89 d8                	mov    eax,ebx
c00155ba:	09 c8                	or     eax,ecx
c00155bc:	74 42                	je     c0015600 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x98>
c00155be:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00155c2:	8b 4a 63             	mov    ecx,DWORD PTR [edx+0x63]
c00155c5:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c00155c9:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c00155cd:	c1 e0 08             	shl    eax,0x8
c00155d0:	09 c6                	or     esi,eax
c00155d2:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c00155d6:	c1 e0 10             	shl    eax,0x10
c00155d9:	09 c6                	or     esi,eax
c00155db:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c00155df:	83 e0 7f             	and    eax,0x7f
c00155e2:	c1 e0 18             	shl    eax,0x18
c00155e5:	09 f0                	or     eax,esi
c00155e7:	89 c3                	mov    ebx,eax
c00155e9:	a1 50 2b 03 c0       	mov    eax,ds:0xc0032b50
c00155ee:	8b 15 54 2b 03 c0    	mov    edx,DWORD PTR ds:0xc0032b54
c00155f4:	29 c1                	sub    ecx,eax
c00155f6:	19 d3                	sbb    ebx,edx
c00155f8:	89 c8                	mov    eax,ecx
c00155fa:	89 da                	mov    edx,ebx
c00155fc:	eb 0e                	jmp    c001560c <KeAlarm(ThreadControlBlock*, unsigned long long)+0xa4>
c00155fe:	66 90                	xchg   ax,ax
c0015600:	b8 00 00 00 00       	mov    eax,0x0
c0015605:	ba 00 00 00 00       	mov    edx,0x0
c001560a:	66 90                	xchg   ax,ax
c001560c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015610:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015618:	80 f4 00             	xor    ah,0x0
c001561b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001561f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015623:	80 f4 00             	xor    ah,0x0
c0015626:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001562a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001562e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0015632:	89 e8                	mov    eax,ebp
c0015634:	09 f8                	or     eax,edi
c0015636:	74 30                	je     c0015668 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x100>
c0015638:	8b 0d 50 2b 03 c0    	mov    ecx,DWORD PTR ds:0xc0032b50
c001563e:	8b 1d 54 2b 03 c0    	mov    ebx,DWORD PTR ds:0xc0032b54
c0015644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015648:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001564c:	01 c8                	add    eax,ecx
c001564e:	11 da                	adc    edx,ebx
c0015650:	89 c7                	mov    edi,eax
c0015652:	83 e7 ff             	and    edi,0xffffffff
c0015655:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015658:	89 d0                	mov    eax,edx
c001565a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001565f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015663:	eb 13                	jmp    c0015678 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x110>
c0015665:	8d 76 00             	lea    esi,[esi+0x0]
c0015668:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001566f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015677:	90                   	nop
c0015678:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001567c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001567f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0015683:	89 cf                	mov    edi,ecx
c0015685:	89 78 63             	mov    DWORD PTR [eax+0x63],edi
c0015688:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001568b:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001568f:	0f b6 5c 24 04       	movzx  ebx,BYTE PTR [esp+0x4]
c0015694:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c0015697:	83 e2 00             	and    edx,0x0
c001569a:	88 d1                	mov    cl,dl
c001569c:	88 da                	mov    dl,bl
c001569e:	09 ca                	or     edx,ecx
c00156a0:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c00156a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00156a7:	c1 ea 08             	shr    edx,0x8
c00156aa:	0f b6 da             	movzx  ebx,dl
c00156ad:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c00156b0:	83 e2 00             	and    edx,0x0
c00156b3:	88 d1                	mov    cl,dl
c00156b5:	88 da                	mov    dl,bl
c00156b7:	09 ca                	or     edx,ecx
c00156b9:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c00156bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00156c0:	c1 ea 10             	shr    edx,0x10
c00156c3:	0f b6 da             	movzx  ebx,dl
c00156c6:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c00156c9:	83 e2 00             	and    edx,0x0
c00156cc:	88 d1                	mov    cl,dl
c00156ce:	88 da                	mov    dl,bl
c00156d0:	09 ca                	or     edx,ecx
c00156d2:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c00156d5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00156d9:	c1 ea 18             	shr    edx,0x18
c00156dc:	83 e2 7f             	and    edx,0x7f
c00156df:	89 d3                	mov    ebx,edx
c00156e1:	83 e3 7f             	and    ebx,0x7f
c00156e4:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c00156e7:	83 e2 80             	and    edx,0xffffff80
c00156ea:	88 d1                	mov    cl,dl
c00156ec:	88 da                	mov    dl,bl
c00156ee:	09 ca                	or     edx,ecx
c00156f0:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c00156f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156f7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00156fb:	83 c4 2c             	add    esp,0x2c
c00156fe:	5b                   	pop    ebx
c00156ff:	5e                   	pop    esi
c0015700:	5f                   	pop    edi
c0015701:	5d                   	pop    ebp
c0015702:	c3                   	ret    
c0015703:	90                   	nop

c0015704 <KeCheckAlarm(ThreadControlBlock*)>:
c0015704:	55                   	push   ebp
c0015705:	57                   	push   edi
c0015706:	56                   	push   esi
c0015707:	53                   	push   ebx
c0015708:	83 ec 0c             	sub    esp,0xc
c001570b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001570f:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c0015712:	0f b6 78 67          	movzx  edi,BYTE PTR [eax+0x67]
c0015716:	0f b6 68 68          	movzx  ebp,BYTE PTR [eax+0x68]
c001571a:	c1 e5 08             	shl    ebp,0x8
c001571d:	09 fd                	or     ebp,edi
c001571f:	0f b6 78 69          	movzx  edi,BYTE PTR [eax+0x69]
c0015723:	c1 e7 10             	shl    edi,0x10
c0015726:	09 ef                	or     edi,ebp
c0015728:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c001572c:	83 e0 7f             	and    eax,0x7f
c001572f:	c1 e0 18             	shl    eax,0x18
c0015732:	09 f8                	or     eax,edi
c0015734:	89 c1                	mov    ecx,eax
c0015736:	89 d0                	mov    eax,edx
c0015738:	80 f4 00             	xor    ah,0x0
c001573b:	89 c3                	mov    ebx,eax
c001573d:	89 c8                	mov    eax,ecx
c001573f:	80 f4 00             	xor    ah,0x0
c0015742:	89 c6                	mov    esi,eax
c0015744:	89 f0                	mov    eax,esi
c0015746:	09 d8                	or     eax,ebx
c0015748:	0f 84 9e 00 00 00    	je     c00157ec <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c001574e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015752:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c0015755:	0f b6 58 67          	movzx  ebx,BYTE PTR [eax+0x67]
c0015759:	0f b6 70 68          	movzx  esi,BYTE PTR [eax+0x68]
c001575d:	c1 e6 08             	shl    esi,0x8
c0015760:	09 de                	or     esi,ebx
c0015762:	0f b6 58 69          	movzx  ebx,BYTE PTR [eax+0x69]
c0015766:	c1 e3 10             	shl    ebx,0x10
c0015769:	09 f3                	or     ebx,esi
c001576b:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c001576f:	83 e0 7f             	and    eax,0x7f
c0015772:	c1 e0 18             	shl    eax,0x18
c0015775:	09 d8                	or     eax,ebx
c0015777:	89 c1                	mov    ecx,eax
c0015779:	89 cb                	mov    ebx,ecx
c001577b:	89 d1                	mov    ecx,edx
c001577d:	a1 50 2b 03 c0       	mov    eax,ds:0xc0032b50
c0015782:	8b 15 54 2b 03 c0    	mov    edx,DWORD PTR ds:0xc0032b54
c0015788:	39 c8                	cmp    eax,ecx
c001578a:	89 d0                	mov    eax,edx
c001578c:	19 d8                	sbb    eax,ebx
c001578e:	72 5c                	jb     c00157ec <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c0015790:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015794:	c7 40 63 00 00 00 00 	mov    DWORD PTR [eax+0x63],0x0
c001579b:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c001579e:	83 e2 00             	and    edx,0x0
c00157a1:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c00157a4:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c00157a7:	83 e2 00             	and    edx,0x0
c00157aa:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c00157ad:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c00157b0:	83 e2 00             	and    edx,0x0
c00157b3:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c00157b6:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c00157b9:	83 e2 80             	and    edx,0xffffff80
c00157bc:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c00157bf:	83 ec 0c             	sub    esp,0xc
c00157c2:	68 d2 a6 02 c0       	push   0xc002a6d2
c00157c7:	e8 9a 17 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00157cc:	83 c4 10             	add    esp,0x10
c00157cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157d3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157d6:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c00157dc:	83 ec 08             	sub    esp,0x8
c00157df:	6a 0e                	push   0xe
c00157e1:	50                   	push   eax
c00157e2:	e8 50 bd ff ff       	call   c0011537 <KeRaiseSignal(SigHandlerBlock*, int)>
c00157e7:	83 c4 10             	add    esp,0x10
c00157ea:	66 90                	xchg   ax,ax
c00157ec:	90                   	nop
c00157ed:	83 c4 0c             	add    esp,0xc
c00157f0:	5b                   	pop    ebx
c00157f1:	5e                   	pop    esi
c00157f2:	5f                   	pop    edi
c00157f3:	5d                   	pop    ebp
c00157f4:	c3                   	ret    

c00157f5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00157f5:	55                   	push   ebp
c00157f6:	57                   	push   edi
c00157f7:	56                   	push   esi
c00157f8:	53                   	push   ebx
c00157f9:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00157ff:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001580a:	74 3b                	je     c0015847 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001580c:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0015814:	74 31                	je     c0015847 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0015816:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001581e:	75 27                	jne    c0015847 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0015820:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0015827:	05 00 10 00 00       	add    eax,0x1000
c001582c:	89 c2                	mov    edx,eax
c001582e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015833:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c001583a:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0015840:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0015847:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001584e:	83 ec 0c             	sub    esp,0xc
c0015851:	6a 01                	push   0x1
c0015853:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0015859:	e8 11 e0 ff ff       	call   c001386f <Virt::allocateKernelVirtualPages(int)>
c001585e:	83 c4 10             	add    esp,0x10
c0015861:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0015867:	89 c3                	mov    ebx,eax
c0015869:	0f 86 27 01 00 00    	jbe    c0015996 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a1>
c001586f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015877:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001587e:	c1 ee 0c             	shr    esi,0xc
c0015881:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0015885:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001588c:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0015893:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015897:	29 ef                	sub    edi,ebp
c0015899:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c001589d:	0f 83 fa 00 00 00    	jae    c001599d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c00158a3:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00158a9:	b8 00 10 00 00       	mov    eax,0x1000
c00158ae:	0f 47 f8             	cmova  edi,eax
c00158b1:	83 ec 0c             	sub    esp,0xc
c00158b4:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00158bb:	31 d2                	xor    edx,edx
c00158bd:	8b 08                	mov    ecx,DWORD PTR [eax]
c00158bf:	8d 44 24 28          	lea    eax,[esp+0x28]
c00158c3:	50                   	push   eax
c00158c4:	8d 74 24 30          	lea    esi,[esp+0x30]
c00158c8:	56                   	push   esi
c00158c9:	52                   	push   edx
c00158ca:	57                   	push   edi
c00158cb:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00158d2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00158d5:	83 c4 20             	add    esp,0x20
c00158d8:	85 c0                	test   eax,eax
c00158da:	75 06                	jne    c00158e2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c00158dc:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00158e0:	74 13                	je     c00158f5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c00158e2:	83 ec 0c             	sub    esp,0xc
c00158e5:	53                   	push   ebx
c00158e6:	e8 82 e2 ff ff       	call   c0013b6d <Virt::freeKernelVirtualPages(unsigned long)>
c00158eb:	83 c4 10             	add    esp,0x10
c00158ee:	31 c0                	xor    eax,eax
c00158f0:	e9 80 01 00 00       	jmp    c0015a75 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x280>
c00158f5:	fa                   	cli    
c00158f6:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c00158fc:	e8 21 ac ff ff       	call   c0010522 <Phys::allocatePage()>
c0015901:	6a 07                	push   0x7
c0015903:	53                   	push   ebx
c0015904:	50                   	push   eax
c0015905:	89 c7                	mov    edi,eax
c0015907:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001590c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001590f:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015915:	e8 2e e6 ff ff       	call   c0013f48 <VAS::mapPage(unsigned long, unsigned long, int)>
c001591a:	83 c4 0c             	add    esp,0xc
c001591d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015924:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001592a:	6a 00                	push   0x0
c001592c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015931:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015934:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001593a:	e8 75 e4 ff ff       	call   c0013db4 <VAS::mapOtherVASIn(bool, VAS*)>
c001593f:	58                   	pop    eax
c0015940:	5a                   	pop    edx
c0015941:	68 07 0c 00 00       	push   0xc07
c0015946:	55                   	push   ebp
c0015947:	57                   	push   edi
c0015948:	89 df                	mov    edi,ebx
c001594a:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0015951:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015957:	6a 00                	push   0x0
c0015959:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001595e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015961:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015967:	e8 30 e8 ff ff       	call   c001419c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001596c:	b9 00 10 00 00       	mov    ecx,0x1000
c0015971:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015973:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c001597a:	83 c4 20             	add    esp,0x20
c001597d:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c0015984:	75 01                	jne    c0015987 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c0015986:	fb                   	sti    
c0015987:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001598b:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015991:	e9 ef fe ff ff       	jmp    c0015885 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0015996:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001599d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00159a4:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00159aa:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00159b0:	0f 86 b1 00 00 00    	jbe    c0015a67 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c00159b6:	fa                   	cli    
c00159b7:	51                   	push   ecx
c00159b8:	31 ff                	xor    edi,edi
c00159ba:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00159c1:	c1 ee 0c             	shr    esi,0xc
c00159c4:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c00159ca:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00159d0:	6a 00                	push   0x0
c00159d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159d7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00159da:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00159e0:	e8 cf e3 ff ff       	call   c0013db4 <VAS::mapOtherVASIn(bool, VAS*)>
c00159e5:	83 c4 10             	add    esp,0x10
c00159e8:	e8 35 ab ff ff       	call   c0010522 <Phys::allocatePage()>
c00159ed:	47                   	inc    edi
c00159ee:	6a 07                	push   0x7
c00159f0:	53                   	push   ebx
c00159f1:	50                   	push   eax
c00159f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00159f6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00159fc:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00159ff:	ff b2 b2 05 00 00    	push   DWORD PTR [edx+0x5b2]
c0015a05:	e8 3e e5 ff ff       	call   c0013f48 <VAS::mapPage(unsigned long, unsigned long, int)>
c0015a0a:	58                   	pop    eax
c0015a0b:	5a                   	pop    edx
c0015a0c:	68 07 0c 00 00       	push   0xc07
c0015a11:	55                   	push   ebp
c0015a12:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015a18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015a1c:	50                   	push   eax
c0015a1d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0015a24:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015a2a:	6a 00                	push   0x0
c0015a2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a31:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015a34:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015a3a:	e8 5d e7 ff ff       	call   c001419c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0015a3f:	83 c4 1c             	add    esp,0x1c
c0015a42:	68 00 10 00 00       	push   0x1000
c0015a47:	6a 00                	push   0x0
c0015a49:	53                   	push   ebx
c0015a4a:	e8 a1 aa fe ff       	call   c00004f0 <memset>
c0015a4f:	83 c4 10             	add    esp,0x10
c0015a52:	39 fe                	cmp    esi,edi
c0015a54:	77 92                	ja     c00159e8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f3>
c0015a56:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c0015a5d:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c0015a64:	75 01                	jne    c0015a67 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c0015a66:	fb                   	sti    
c0015a67:	83 ec 0c             	sub    esp,0xc
c0015a6a:	53                   	push   ebx
c0015a6b:	e8 fd e0 ff ff       	call   c0013b6d <Virt::freeKernelVirtualPages(unsigned long)>
c0015a70:	83 c4 10             	add    esp,0x10
c0015a73:	b0 01                	mov    al,0x1
c0015a75:	81 c4 2c 10 00 00    	add    esp,0x102c
c0015a7b:	5b                   	pop    ebx
c0015a7c:	5e                   	pop    esi
c0015a7d:	5f                   	pop    edi
c0015a7e:	5d                   	pop    ebp
c0015a7f:	c3                   	ret    

c0015a80 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0015a80:	55                   	push   ebp
c0015a81:	57                   	push   edi
c0015a82:	56                   	push   esi
c0015a83:	53                   	push   ebx
c0015a84:	83 ec 68             	sub    esp,0x68
c0015a87:	68 14 01 00 00       	push   0x114
c0015a8c:	e8 43 a4 ff ff       	call   c000fed4 <malloc>
c0015a91:	83 c4 0c             	add    esp,0xc
c0015a94:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0015a98:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0015a9c:	89 c3                	mov    ebx,eax
c0015a9e:	50                   	push   eax
c0015a9f:	e8 30 2f ff ff       	call   c00089d4 <File::File(char const*, Process*)>
c0015aa4:	5e                   	pop    esi
c0015aa5:	5f                   	pop    edi
c0015aa6:	6a 01                	push   0x1
c0015aa8:	53                   	push   ebx
c0015aa9:	e8 44 2f ff ff       	call   c00089f2 <File::open(FileOpenMode)>
c0015aae:	83 c4 10             	add    esp,0x10
c0015ab1:	85 c0                	test   eax,eax
c0015ab3:	0f 85 cb 01 00 00    	jne    c0015c84 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015ab9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015ac1:	83 ec 0c             	sub    esp,0xc
c0015ac4:	6a 34                	push   0x34
c0015ac6:	e8 09 a4 ff ff       	call   c000fed4 <malloc>
c0015acb:	59                   	pop    ecx
c0015acc:	8d 74 24 34          	lea    esi,[esp+0x34]
c0015ad0:	89 c7                	mov    edi,eax
c0015ad2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ad4:	56                   	push   esi
c0015ad5:	57                   	push   edi
c0015ad6:	6a 00                	push   0x0
c0015ad8:	6a 34                	push   0x34
c0015ada:	53                   	push   ebx
c0015adb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015ade:	83 c4 20             	add    esp,0x20
c0015ae1:	85 c0                	test   eax,eax
c0015ae3:	0f 85 9b 01 00 00    	jne    c0015c84 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015ae9:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015aef:	0f 85 8f 01 00 00    	jne    c0015c84 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015af5:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015af8:	85 c0                	test   eax,eax
c0015afa:	0f 84 84 01 00 00    	je     c0015c84 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015b00:	52                   	push   edx
c0015b01:	31 d2                	xor    edx,edx
c0015b03:	52                   	push   edx
c0015b04:	50                   	push   eax
c0015b05:	53                   	push   ebx
c0015b06:	e8 a5 2f ff ff       	call   c0008ab0 <File::seek(unsigned long long)>
c0015b0b:	83 c4 10             	add    esp,0x10
c0015b0e:	85 c0                	test   eax,eax
c0015b10:	0f 85 6e 01 00 00    	jne    c0015c84 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015b16:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0015b19:	83 ec 0c             	sub    esp,0xc
c0015b1c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015b20:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015b24:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015b28:	0f af c2             	imul   eax,edx
c0015b2b:	50                   	push   eax
c0015b2c:	e8 a3 a3 ff ff       	call   c000fed4 <malloc>
c0015b31:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015b33:	89 34 24             	mov    DWORD PTR [esp],esi
c0015b36:	31 f6                	xor    esi,esi
c0015b38:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015b3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b40:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015b44:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015b48:	0f af c2             	imul   eax,edx
c0015b4b:	99                   	cdq    
c0015b4c:	52                   	push   edx
c0015b4d:	50                   	push   eax
c0015b4e:	53                   	push   ebx
c0015b4f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015b52:	83 c4 20             	add    esp,0x20
c0015b55:	66 3b 77 30          	cmp    si,WORD PTR [edi+0x30]
c0015b59:	0f b7 c6             	movzx  eax,si
c0015b5c:	73 71                	jae    c0015bcf <Thr::loadProgramIntoMemory(Process*, char const*)+0x14f>
c0015b5e:	55                   	push   ebp
c0015b5f:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0015b63:	6b c0 28             	imul   eax,eax,0x28
c0015b66:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015b6a:	6b d2 28             	imul   edx,edx,0x28
c0015b6d:	8b 04 01             	mov    eax,DWORD PTR [ecx+eax*1]
c0015b70:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015b74:	31 d2                	xor    edx,edx
c0015b76:	52                   	push   edx
c0015b77:	50                   	push   eax
c0015b78:	53                   	push   ebx
c0015b79:	e8 32 2f ff ff       	call   c0008ab0 <File::seek(unsigned long long)>
c0015b7e:	83 c4 0c             	add    esp,0xc
c0015b81:	6a 20                	push   0x20
c0015b83:	6a 00                	push   0x0
c0015b85:	8d 6c 24 3c          	lea    ebp,[esp+0x3c]
c0015b89:	55                   	push   ebp
c0015b8a:	e8 61 a9 fe ff       	call   c00004f0 <memset>
c0015b8f:	58                   	pop    eax
c0015b90:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b92:	8d 54 24 38          	lea    edx,[esp+0x38]
c0015b96:	52                   	push   edx
c0015b97:	55                   	push   ebp
c0015b98:	6a 00                	push   0x0
c0015b9a:	6a 1f                	push   0x1f
c0015b9c:	53                   	push   ebx
c0015b9d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015ba0:	83 c4 18             	add    esp,0x18
c0015ba3:	55                   	push   ebp
c0015ba4:	68 e3 a6 02 c0       	push   0xc002a6e3
c0015ba9:	e8 d2 ab fe ff       	call   c0000780 <strcmp>
c0015bae:	83 c4 10             	add    esp,0x10
c0015bb1:	85 c0                	test   eax,eax
c0015bb3:	75 17                	jne    c0015bcc <Thr::loadProgramIntoMemory(Process*, char const*)+0x14c>
c0015bb5:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0015bb9:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0015bbd:	8a 80 76 02 00 00    	mov    al,BYTE PTR [eax+0x276]
c0015bc3:	83 c8 80             	or     eax,0xffffff80
c0015bc6:	88 82 76 02 00 00    	mov    BYTE PTR [edx+0x276],al
c0015bcc:	46                   	inc    esi
c0015bcd:	eb 86                	jmp    c0015b55 <Thr::loadProgramIntoMemory(Process*, char const*)+0xd5>
c0015bcf:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0015bd2:	85 c0                	test   eax,eax
c0015bd4:	0f 84 aa 00 00 00    	je     c0015c84 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015bda:	31 d2                	xor    edx,edx
c0015bdc:	56                   	push   esi
c0015bdd:	52                   	push   edx
c0015bde:	50                   	push   eax
c0015bdf:	53                   	push   ebx
c0015be0:	e8 cb 2e ff ff       	call   c0008ab0 <File::seek(unsigned long long)>
c0015be5:	83 c4 10             	add    esp,0x10
c0015be8:	85 c0                	test   eax,eax
c0015bea:	0f 85 94 00 00 00    	jne    c0015c84 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015bf0:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015bf4:	83 ec 0c             	sub    esp,0xc
c0015bf7:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015bfb:	0f af c2             	imul   eax,edx
c0015bfe:	50                   	push   eax
c0015bff:	e8 d0 a2 ff ff       	call   c000fed4 <malloc>
c0015c04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015c08:	59                   	pop    ecx
c0015c09:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015c0b:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015c0f:	50                   	push   eax
c0015c10:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015c14:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015c18:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015c1c:	0f af c2             	imul   eax,edx
c0015c1f:	99                   	cdq    
c0015c20:	52                   	push   edx
c0015c21:	50                   	push   eax
c0015c22:	53                   	push   ebx
c0015c23:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015c26:	83 c4 20             	add    esp,0x20
c0015c29:	31 c9                	xor    ecx,ecx
c0015c2b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015c33:	66 3b 4f 2c          	cmp    cx,WORD PTR [edi+0x2c]
c0015c37:	0f b7 e9             	movzx  ebp,cx
c0015c3a:	0f 83 89 00 00 00    	jae    c0015cc9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x249>
c0015c40:	c1 e5 05             	shl    ebp,0x5
c0015c43:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c0015c47:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0015c4b:	75 76                	jne    c0015cc3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x243>
c0015c4d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0015c51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c54:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0015c57:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015c5b:	52                   	push   edx
c0015c5c:	31 d2                	xor    edx,edx
c0015c5e:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0015c61:	52                   	push   edx
c0015c62:	50                   	push   eax
c0015c63:	53                   	push   ebx
c0015c64:	e8 47 2e ff ff       	call   c0008ab0 <File::seek(unsigned long long)>
c0015c69:	83 c4 10             	add    esp,0x10
c0015c6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015c70:	85 c0                	test   eax,eax
c0015c72:	74 17                	je     c0015c8b <Thr::loadProgramIntoMemory(Process*, char const*)+0x20b>
c0015c74:	83 ec 0c             	sub    esp,0xc
c0015c77:	68 f2 a6 02 c0       	push   0xc002a6f2
c0015c7c:	e8 e5 12 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0015c81:	83 c4 10             	add    esp,0x10
c0015c84:	31 c0                	xor    eax,eax
c0015c86:	e9 8e 00 00 00       	jmp    c0015d19 <Thr::loadProgramIntoMemory(Process*, char const*)+0x299>
c0015c8b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0015c8f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0015c92:	83 ec 0c             	sub    esp,0xc
c0015c95:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0015c98:	50                   	push   eax
c0015c99:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015c9d:	56                   	push   esi
c0015c9e:	53                   	push   ebx
c0015c9f:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0015ca6:	e8 4a fb ff ff       	call   c00157f5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0015cab:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0015caf:	83 c4 20             	add    esp,0x20
c0015cb2:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0015cb6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015cba:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0015cbf:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0015cc3:	41                   	inc    ecx
c0015cc4:	e9 6a ff ff ff       	jmp    c0015c33 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b3>
c0015cc9:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c0015ccd:	83 ec 0c             	sub    esp,0xc
c0015cd0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015cd4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0015cd8:	8b 91 b2 05 00 00    	mov    edx,DWORD PTR [ecx+0x5b2]
c0015cde:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015ce3:	89 b1 ae 05 00 00    	mov    DWORD PTR [ecx+0x5ae],esi
c0015ce9:	05 00 10 00 00       	add    eax,0x1000
c0015cee:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015cf1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015cf5:	e8 ea a1 ff ff       	call   c000fee4 <free>
c0015cfa:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015cfd:	e8 e2 a1 ff ff       	call   c000fee4 <free>
c0015d02:	58                   	pop    eax
c0015d03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d07:	e8 d8 a1 ff ff       	call   c000fee4 <free>
c0015d0c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d0f:	e8 3c 2d ff ff       	call   c0008a50 <File::close()>
c0015d14:	83 c4 10             	add    esp,0x10
c0015d17:	b0 01                	mov    al,0x1
c0015d19:	83 c4 5c             	add    esp,0x5c
c0015d1c:	5b                   	pop    ebx
c0015d1d:	5e                   	pop    esi
c0015d1e:	5f                   	pop    edi
c0015d1f:	5d                   	pop    ebp
c0015d20:	c3                   	ret    

c0015d21 <Thr::runtimeReferenceHelper()>:
c0015d21:	83 ec 18             	sub    esp,0x18
c0015d24:	68 fa a6 02 c0       	push   0xc002a6fa
c0015d29:	e8 38 12 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0015d2e:	fa                   	cli    
c0015d2f:	83 c4 10             	add    esp,0x10
c0015d32:	eb fe                	jmp    c0015d32 <Thr::runtimeReferenceHelper()+0x11>

c0015d34 <Thr::getAddressOfKernelSymbol(char const*)>:
c0015d34:	57                   	push   edi
c0015d35:	56                   	push   esi
c0015d36:	53                   	push   ebx
c0015d37:	31 db                	xor    ebx,ebx
c0015d39:	39 1d 00 33 03 c0    	cmp    DWORD PTR ds:0xc0033300,ebx
c0015d3f:	7e 3c                	jle    c0015d7d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0015d41:	8b 34 9d e0 32 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffccd20]
c0015d48:	31 ff                	xor    edi,edi
c0015d4a:	39 3c 9d a0 32 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffccd60],edi
c0015d51:	7e 27                	jle    c0015d7a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0015d53:	50                   	push   eax
c0015d54:	50                   	push   eax
c0015d55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015d59:	8b 06                	mov    eax,DWORD PTR [esi]
c0015d5b:	03 04 9d c0 32 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffccd40]
c0015d62:	50                   	push   eax
c0015d63:	e8 18 aa fe ff       	call   c0000780 <strcmp>
c0015d68:	83 c4 10             	add    esp,0x10
c0015d6b:	85 c0                	test   eax,eax
c0015d6d:	75 05                	jne    c0015d74 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0015d6f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0015d72:	eb 0b                	jmp    c0015d7f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0015d74:	83 c6 10             	add    esi,0x10
c0015d77:	47                   	inc    edi
c0015d78:	eb d0                	jmp    c0015d4a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0015d7a:	43                   	inc    ebx
c0015d7b:	eb bc                	jmp    c0015d39 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0015d7d:	31 c0                	xor    eax,eax
c0015d7f:	5b                   	pop    ebx
c0015d80:	5e                   	pop    esi
c0015d81:	5f                   	pop    edi
c0015d82:	c3                   	ret    

c0015d83 <Thr::loadKernelSymbolTable(char const*)>:
c0015d83:	55                   	push   ebp
c0015d84:	57                   	push   edi
c0015d85:	56                   	push   esi
c0015d86:	53                   	push   ebx
c0015d87:	83 ec 68             	sub    esp,0x68
c0015d8a:	68 14 01 00 00       	push   0x114
c0015d8f:	8b 35 58 33 03 c0    	mov    esi,DWORD PTR ds:0xc0033358
c0015d95:	e8 3a a1 ff ff       	call   c000fed4 <malloc>
c0015d9a:	83 c4 0c             	add    esp,0xc
c0015d9d:	56                   	push   esi
c0015d9e:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015da2:	89 c3                	mov    ebx,eax
c0015da4:	50                   	push   eax
c0015da5:	e8 2a 2c ff ff       	call   c00089d4 <File::File(char const*, Process*)>
c0015daa:	5e                   	pop    esi
c0015dab:	5f                   	pop    edi
c0015dac:	6a 01                	push   0x1
c0015dae:	53                   	push   ebx
c0015daf:	e8 3e 2c ff ff       	call   c00089f2 <File::open(FileOpenMode)>
c0015db4:	83 c4 10             	add    esp,0x10
c0015db7:	85 c0                	test   eax,eax
c0015db9:	74 0a                	je     c0015dc5 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0015dbb:	83 ec 0c             	sub    esp,0xc
c0015dbe:	68 1c a7 02 c0       	push   0xc002a71c
c0015dc3:	eb 34                	jmp    c0015df9 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0015dc5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015dcd:	83 ec 0c             	sub    esp,0xc
c0015dd0:	6a 34                	push   0x34
c0015dd2:	e8 fd a0 ff ff       	call   c000fed4 <malloc>
c0015dd7:	59                   	pop    ecx
c0015dd8:	8d 74 24 34          	lea    esi,[esp+0x34]
c0015ddc:	89 c7                	mov    edi,eax
c0015dde:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015de0:	56                   	push   esi
c0015de1:	57                   	push   edi
c0015de2:	6a 00                	push   0x0
c0015de4:	6a 34                	push   0x34
c0015de6:	53                   	push   ebx
c0015de7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015dea:	83 c4 20             	add    esp,0x20
c0015ded:	85 c0                	test   eax,eax
c0015def:	74 17                	je     c0015e08 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0015df1:	83 ec 0c             	sub    esp,0xc
c0015df4:	68 33 a7 02 c0       	push   0xc002a733
c0015df9:	e8 2a a5 ff ff       	call   c0010328 <KePanic(char const*)>
c0015dfe:	83 c4 10             	add    esp,0x10
c0015e01:	31 c0                	xor    eax,eax
c0015e03:	e9 31 02 00 00       	jmp    c0016039 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0015e08:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015e0e:	75 e1                	jne    c0015df1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015e10:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015e13:	85 c0                	test   eax,eax
c0015e15:	74 da                	je     c0015df1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015e17:	52                   	push   edx
c0015e18:	31 d2                	xor    edx,edx
c0015e1a:	52                   	push   edx
c0015e1b:	50                   	push   eax
c0015e1c:	53                   	push   ebx
c0015e1d:	e8 8e 2c ff ff       	call   c0008ab0 <File::seek(unsigned long long)>
c0015e22:	83 c4 10             	add    esp,0x10
c0015e25:	85 c0                	test   eax,eax
c0015e27:	75 c8                	jne    c0015df1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015e29:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015e2d:	83 ec 0c             	sub    esp,0xc
c0015e30:	31 ed                	xor    ebp,ebp
c0015e32:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015e36:	0f af c2             	imul   eax,edx
c0015e39:	50                   	push   eax
c0015e3a:	e8 95 a0 ff ff       	call   c000fed4 <malloc>
c0015e3f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015e41:	89 34 24             	mov    DWORD PTR [esp],esi
c0015e44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015e48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015e4c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015e50:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015e54:	0f af c2             	imul   eax,edx
c0015e57:	99                   	cdq    
c0015e58:	52                   	push   edx
c0015e59:	50                   	push   eax
c0015e5a:	53                   	push   ebx
c0015e5b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015e5e:	83 c4 20             	add    esp,0x20
c0015e61:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015e69:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015e71:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015e79:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015e81:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0015e85:	0f b7 f5             	movzx  esi,bp
c0015e88:	0f 83 a7 00 00 00    	jae    c0015f35 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0015e8e:	6b f6 28             	imul   esi,esi,0x28
c0015e91:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015e95:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015e98:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015e9c:	50                   	push   eax
c0015e9d:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0015ea1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015ea5:	8b 16                	mov    edx,DWORD PTR [esi]
c0015ea7:	6b c0 28             	imul   eax,eax,0x28
c0015eaa:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0015eae:	89 d0                	mov    eax,edx
c0015eb0:	31 d2                	xor    edx,edx
c0015eb2:	52                   	push   edx
c0015eb3:	50                   	push   eax
c0015eb4:	53                   	push   ebx
c0015eb5:	e8 f6 2b ff ff       	call   c0008ab0 <File::seek(unsigned long long)>
c0015eba:	83 c4 0c             	add    esp,0xc
c0015ebd:	6a 20                	push   0x20
c0015ebf:	6a 00                	push   0x0
c0015ec1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015ec5:	52                   	push   edx
c0015ec6:	e8 25 a6 fe ff       	call   c00004f0 <memset>
c0015ecb:	58                   	pop    eax
c0015ecc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ece:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0015ed2:	51                   	push   ecx
c0015ed3:	8d 54 24 40          	lea    edx,[esp+0x40]
c0015ed7:	52                   	push   edx
c0015ed8:	6a 00                	push   0x0
c0015eda:	6a 1f                	push   0x1f
c0015edc:	53                   	push   ebx
c0015edd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015ee0:	83 c4 18             	add    esp,0x18
c0015ee3:	68 4a a7 02 c0       	push   0xc002a74a
c0015ee8:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015eec:	52                   	push   edx
c0015eed:	e8 8e a8 fe ff       	call   c0000780 <strcmp>
c0015ef2:	83 c4 10             	add    esp,0x10
c0015ef5:	85 c0                	test   eax,eax
c0015ef7:	75 0f                	jne    c0015f08 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0015ef9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015efc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015f00:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015f08:	50                   	push   eax
c0015f09:	50                   	push   eax
c0015f0a:	68 52 a7 02 c0       	push   0xc002a752
c0015f0f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0015f13:	50                   	push   eax
c0015f14:	e8 67 a8 fe ff       	call   c0000780 <strcmp>
c0015f19:	83 c4 10             	add    esp,0x10
c0015f1c:	85 c0                	test   eax,eax
c0015f1e:	75 0f                	jne    c0015f2f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0015f20:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015f23:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015f27:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015f2b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015f2f:	45                   	inc    ebp
c0015f30:	e9 4c ff ff ff       	jmp    c0015e81 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0015f35:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015f3a:	75 10                	jne    c0015f4c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0015f3c:	83 ec 0c             	sub    esp,0xc
c0015f3f:	68 5a a7 02 c0       	push   0xc002a75a
c0015f44:	e8 df a3 ff ff       	call   c0010328 <KePanic(char const*)>
c0015f49:	83 c4 10             	add    esp,0x10
c0015f4c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0015f51:	75 10                	jne    c0015f63 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0015f53:	83 ec 0c             	sub    esp,0xc
c0015f56:	68 5a a7 02 c0       	push   0xc002a75a
c0015f5b:	e8 c8 a3 ff ff       	call   c0010328 <KePanic(char const*)>
c0015f60:	83 c4 10             	add    esp,0x10
c0015f63:	50                   	push   eax
c0015f64:	31 d2                	xor    edx,edx
c0015f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f6a:	52                   	push   edx
c0015f6b:	50                   	push   eax
c0015f6c:	53                   	push   ebx
c0015f6d:	e8 3e 2b ff ff       	call   c0008ab0 <File::seek(unsigned long long)>
c0015f72:	5a                   	pop    edx
c0015f73:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015f77:	e8 58 9f ff ff       	call   c000fed4 <malloc>
c0015f7c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015f80:	31 c9                	xor    ecx,ecx
c0015f82:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015f86:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f88:	5e                   	pop    esi
c0015f89:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0015f8d:	55                   	push   ebp
c0015f8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f92:	51                   	push   ecx
c0015f93:	52                   	push   edx
c0015f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015f98:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0015f9c:	53                   	push   ebx
c0015f9d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015fa0:	83 c4 14             	add    esp,0x14
c0015fa3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015fa7:	e8 28 9f ff ff       	call   c000fed4 <malloc>
c0015fac:	89 c6                	mov    esi,eax
c0015fae:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fb0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015fb3:	56                   	push   esi
c0015fb4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0015fb8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015fbc:	51                   	push   ecx
c0015fbd:	52                   	push   edx
c0015fbe:	53                   	push   ebx
c0015fbf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015fc2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015fc6:	83 c4 1c             	add    esp,0x1c
c0015fc9:	8b 15 00 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033300
c0015fcf:	c1 e8 04             	shr    eax,0x4
c0015fd2:	89 04 95 a0 32 03 c0 	mov    DWORD PTR [edx*4-0x3ffccd60],eax
c0015fd9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015fdd:	31 d2                	xor    edx,edx
c0015fdf:	52                   	push   edx
c0015fe0:	50                   	push   eax
c0015fe1:	53                   	push   ebx
c0015fe2:	e8 c9 2a ff ff       	call   c0008ab0 <File::seek(unsigned long long)>
c0015fe7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015fe9:	31 d2                	xor    edx,edx
c0015feb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015fee:	56                   	push   esi
c0015fef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015ff3:	52                   	push   edx
c0015ff4:	50                   	push   eax
c0015ff5:	53                   	push   ebx
c0015ff6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015ff9:	83 c4 14             	add    esp,0x14
c0015ffc:	53                   	push   ebx
c0015ffd:	e8 4e 2a ff ff       	call   c0008a50 <File::close()>
c0016002:	5d                   	pop    ebp
c0016003:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016007:	e8 d8 9e ff ff       	call   c000fee4 <free>
c001600c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001600f:	e8 d0 9e ff ff       	call   c000fee4 <free>
c0016014:	a1 00 33 03 c0       	mov    eax,ds:0xc0033300
c0016019:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001601d:	83 c4 10             	add    esp,0x10
c0016020:	89 34 85 c0 32 03 c0 	mov    DWORD PTR [eax*4-0x3ffccd40],esi
c0016027:	8d 50 01             	lea    edx,[eax+0x1]
c001602a:	89 0c 85 e0 32 03 c0 	mov    DWORD PTR [eax*4-0x3ffccd20],ecx
c0016031:	b0 01                	mov    al,0x1
c0016033:	89 15 00 33 03 c0    	mov    DWORD PTR ds:0xc0033300,edx
c0016039:	83 c4 5c             	add    esp,0x5c
c001603c:	5b                   	pop    ebx
c001603d:	5e                   	pop    esi
c001603e:	5f                   	pop    edi
c001603f:	5d                   	pop    ebp
c0016040:	c3                   	ret    

c0016041 <KeIsELFValid(Elf32_Ehdr*)>:
c0016041:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016045:	31 c0                	xor    eax,eax
c0016047:	80 3a 7f             	cmp    BYTE PTR [edx],0x7f
c001604a:	75 13                	jne    c001605f <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c001604c:	80 7a 01 45          	cmp    BYTE PTR [edx+0x1],0x45
c0016050:	75 0d                	jne    c001605f <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c0016052:	80 7a 02 4c          	cmp    BYTE PTR [edx+0x2],0x4c
c0016056:	75 07                	jne    c001605f <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c0016058:	80 7a 03 46          	cmp    BYTE PTR [edx+0x3],0x46
c001605c:	0f 94 c0             	sete   al
c001605f:	c3                   	ret    

c0016060 <KeGetELFSectionHeader(unsigned char*, int)>:
c0016060:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016064:	6b 54 24 08 28       	imul   edx,DWORD PTR [esp+0x8],0x28
c0016069:	03 50 20             	add    edx,DWORD PTR [eax+0x20]
c001606c:	01 d0                	add    eax,edx
c001606e:	c3                   	ret    

c001606f <KeGetELFProgramHeader(unsigned char*, int)>:
c001606f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016073:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016077:	c1 e0 05             	shl    eax,0x5
c001607a:	03 42 1c             	add    eax,DWORD PTR [edx+0x1c]
c001607d:	01 d0                	add    eax,edx
c001607f:	c3                   	ret    

c0016080 <KeLookupELFString(unsigned char*, int)>:
c0016080:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016084:	31 c0                	xor    eax,eax
c0016086:	0f b7 51 32          	movzx  edx,WORD PTR [ecx+0x32]
c001608a:	85 d2                	test   edx,edx
c001608c:	74 14                	je     c00160a2 <KeLookupELFString(unsigned char*, int)+0x22>
c001608e:	52                   	push   edx
c001608f:	51                   	push   ecx
c0016090:	e8 cb ff ff ff       	call   c0016060 <KeGetELFSectionHeader(unsigned char*, int)>
c0016095:	5a                   	pop    edx
c0016096:	5a                   	pop    edx
c0016097:	03 48 10             	add    ecx,DWORD PTR [eax+0x10]
c001609a:	89 c8                	mov    eax,ecx
c001609c:	74 04                	je     c00160a2 <KeLookupELFString(unsigned char*, int)+0x22>
c001609e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00160a2:	c3                   	ret    

c00160a3 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)>:
c00160a3:	55                   	push   ebp
c00160a4:	31 ed                	xor    ebp,ebp
c00160a6:	57                   	push   edi
c00160a7:	56                   	push   esi
c00160a8:	53                   	push   ebx
c00160a9:	83 ec 1c             	sub    esp,0x1c
c00160ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00160b0:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00160b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00160b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00160ba:	0f b6 44 24 34       	movzx  eax,BYTE PTR [esp+0x34]
c00160bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00160c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00160c7:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
c00160cb:	39 e8                	cmp    eax,ebp
c00160cd:	7e 79                	jle    c0016148 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xa5>
c00160cf:	55                   	push   ebp
c00160d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00160d4:	e8 96 ff ff ff       	call   c001606f <KeGetELFProgramHeader(unsigned char*, int)>
c00160d9:	5a                   	pop    edx
c00160da:	59                   	pop    ecx
c00160db:	83 38 01             	cmp    DWORD PTR [eax],0x1
c00160de:	75 62                	jne    c0016142 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x9f>
c00160e0:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c00160e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00160e8:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
c00160eb:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00160ee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00160f2:	75 22                	jne    c0016116 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x73>
c00160f4:	83 ec 0c             	sub    esp,0xc
c00160f7:	01 f3                	add    ebx,esi
c00160f9:	68 74 a7 02 c0       	push   0xc002a774
c00160fe:	e8 25 a2 ff ff       	call   c0010328 <KePanic(char const*)>
c0016103:	03 5c 24 18          	add    ebx,DWORD PTR [esp+0x18]
c0016107:	83 c4 10             	add    esp,0x10
c001610a:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001610d:	0f 43 1c 24          	cmovae ebx,DWORD PTR [esp]
c0016111:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016114:	eb 2c                	jmp    c0016142 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x9f>
c0016116:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001611a:	89 d9                	mov    ecx,ebx
c001611c:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0016120:	01 f2                	add    edx,esi
c0016122:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016126:	03 70 04             	add    esi,DWORD PTR [eax+0x4]
c0016129:	89 d7                	mov    edi,edx
c001612b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001612d:	50                   	push   eax
c001612e:	01 da                	add    edx,ebx
c0016130:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016134:	29 d8                	sub    eax,ebx
c0016136:	50                   	push   eax
c0016137:	6a 00                	push   0x0
c0016139:	52                   	push   edx
c001613a:	e8 b1 a3 fe ff       	call   c00004f0 <memset>
c001613f:	83 c4 10             	add    esp,0x10
c0016142:	45                   	inc    ebp
c0016143:	e9 7b ff ff ff       	jmp    c00160c3 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x20>
c0016148:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001614b:	83 c4 1c             	add    esp,0x1c
c001614e:	5b                   	pop    ebx
c001614f:	5e                   	pop    esi
c0016150:	5f                   	pop    edi
c0016151:	5d                   	pop    ebp
c0016152:	c3                   	ret    

c0016153 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)>:
c0016153:	57                   	push   edi
c0016154:	56                   	push   esi
c0016155:	53                   	push   ebx
c0016156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001615a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001615e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016162:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016166:	85 c0                	test   eax,eax
c0016168:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001616b:	74 04                	je     c0016171 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x1e>
c001616d:	85 db                	test   ebx,ebx
c001616f:	75 05                	jne    c0016176 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x23>
c0016171:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0016174:	eb 5c                	jmp    c00161d2 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x7f>
c0016176:	50                   	push   eax
c0016177:	51                   	push   ecx
c0016178:	e8 e3 fe ff ff       	call   c0016060 <KeGetELFSectionHeader(unsigned char*, int)>
c001617d:	5f                   	pop    edi
c001617e:	5a                   	pop    edx
c001617f:	31 d2                	xor    edx,edx
c0016181:	89 c7                	mov    edi,eax
c0016183:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0016186:	f7 77 24             	div    DWORD PTR [edi+0x24]
c0016189:	39 c3                	cmp    ebx,eax
c001618b:	73 e4                	jae    c0016171 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x1e>
c001618d:	c1 e3 04             	shl    ebx,0x4
c0016190:	03 5f 10             	add    ebx,DWORD PTR [edi+0x10]
c0016193:	01 cb                	add    ebx,ecx
c0016195:	0f b7 53 0e          	movzx  edx,WORD PTR [ebx+0xe]
c0016199:	85 d2                	test   edx,edx
c001619b:	75 39                	jne    c00161d6 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x83>
c001619d:	ff 77 18             	push   DWORD PTR [edi+0x18]
c00161a0:	51                   	push   ecx
c00161a1:	e8 ba fe ff ff       	call   c0016060 <KeGetELFSectionHeader(unsigned char*, int)>
c00161a6:	52                   	push   edx
c00161a7:	03 0b                	add    ecx,DWORD PTR [ebx]
c00161a9:	03 48 10             	add    ecx,DWORD PTR [eax+0x10]
c00161ac:	51                   	push   ecx
c00161ad:	e8 82 fb ff ff       	call   c0015d34 <Thr::getAddressOfKernelSymbol(char const*)>
c00161b2:	83 c4 10             	add    esp,0x10
c00161b5:	85 c0                	test   eax,eax
c00161b7:	75 32                	jne    c00161eb <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c00161b9:	f6 43 0c 20          	test   BYTE PTR [ebx+0xc],0x20
c00161bd:	75 03                	jne    c00161c2 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x6f>
c00161bf:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00161c2:	83 ec 0c             	sub    esp,0xc
c00161c5:	68 9d a7 02 c0       	push   0xc002a79d
c00161ca:	e8 97 0d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00161cf:	83 c4 10             	add    esp,0x10
c00161d2:	31 c0                	xor    eax,eax
c00161d4:	eb 15                	jmp    c00161eb <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c00161d6:	81 fa f1 ff 00 00    	cmp    edx,0xfff1
c00161dc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00161df:	74 0a                	je     c00161eb <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c00161e1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00161e5:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c00161e9:	01 d0                	add    eax,edx
c00161eb:	5b                   	pop    ebx
c00161ec:	5e                   	pop    esi
c00161ed:	5f                   	pop    edi
c00161ee:	c3                   	ret    

c00161ef <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)>:
c00161ef:	55                   	push   ebp
c00161f0:	57                   	push   edi
c00161f1:	56                   	push   esi
c00161f2:	53                   	push   ebx
c00161f3:	83 ec 1c             	sub    esp,0x1c
c00161f6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00161fa:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00161fe:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016202:	8b 69 18             	mov    ebp,DWORD PTR [ecx+0x18]
c0016205:	8b 1e                	mov    ebx,DWORD PTR [esi]
c0016207:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001620a:	29 ef                	sub    edi,ebp
c001620c:	01 fb                	add    ebx,edi
c001620e:	c1 ea 08             	shr    edx,0x8
c0016211:	74 2d                	je     c0016240 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x51>
c0016213:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016218:	50                   	push   eax
c0016219:	50                   	push   eax
c001621a:	55                   	push   ebp
c001621b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001621f:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0016223:	50                   	push   eax
c0016224:	52                   	push   edx
c0016225:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016229:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001622c:	51                   	push   ecx
c001622d:	e8 21 ff ff ff       	call   c0016153 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)>
c0016232:	83 c4 20             	add    esp,0x20
c0016235:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001623a:	74 06                	je     c0016242 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x53>
c001623c:	31 c0                	xor    eax,eax
c001623e:	eb 27                	jmp    c0016267 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x78>
c0016240:	31 c0                	xor    eax,eax
c0016242:	0f b6 56 04          	movzx  edx,BYTE PTR [esi+0x4]
c0016246:	83 fa 01             	cmp    edx,0x1
c0016249:	75 04                	jne    c001624f <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x60>
c001624b:	01 03                	add    DWORD PTR [ebx],eax
c001624d:	eb 16                	jmp    c0016265 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x76>
c001624f:	83 fa 02             	cmp    edx,0x2
c0016252:	75 08                	jne    c001625c <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x6d>
c0016254:	03 03                	add    eax,DWORD PTR [ebx]
c0016256:	29 d8                	sub    eax,ebx
c0016258:	89 03                	mov    DWORD PTR [ebx],eax
c001625a:	eb 09                	jmp    c0016265 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x76>
c001625c:	31 c0                	xor    eax,eax
c001625e:	83 fa 08             	cmp    edx,0x8
c0016261:	75 04                	jne    c0016267 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x78>
c0016263:	01 3b                	add    DWORD PTR [ebx],edi
c0016265:	b0 01                	mov    al,0x1
c0016267:	83 c4 1c             	add    esp,0x1c
c001626a:	5b                   	pop    ebx
c001626b:	5e                   	pop    esi
c001626c:	5f                   	pop    edi
c001626d:	5d                   	pop    ebp
c001626e:	c3                   	ret    

c001626f <KePerformRelocations(unsigned char*, unsigned long)>:
c001626f:	55                   	push   ebp
c0016270:	31 ed                	xor    ebp,ebp
c0016272:	57                   	push   edi
c0016273:	56                   	push   esi
c0016274:	53                   	push   ebx
c0016275:	83 ec 1c             	sub    esp,0x1c
c0016278:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001627c:	0f b7 46 30          	movzx  eax,WORD PTR [esi+0x30]
c0016280:	39 e8                	cmp    eax,ebp
c0016282:	0f 8e 92 00 00 00    	jle    c001631a <KePerformRelocations(unsigned char*, unsigned long)+0xab>
c0016288:	55                   	push   ebp
c0016289:	56                   	push   esi
c001628a:	e8 d1 fd ff ff       	call   c0016060 <KeGetELFSectionHeader(unsigned char*, int)>
c001628f:	5a                   	pop    edx
c0016290:	59                   	pop    ecx
c0016291:	89 c3                	mov    ebx,eax
c0016293:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016296:	83 f8 09             	cmp    eax,0x9
c0016299:	75 64                	jne    c00162ff <KePerformRelocations(unsigned char*, unsigned long)+0x90>
c001629b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001629e:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00162a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00162a5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00162a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00162ac:	ff 33                	push   DWORD PTR [ebx]
c00162ae:	56                   	push   esi
c00162af:	e8 cc fd ff ff       	call   c0016080 <KeLookupELFString(unsigned char*, int)>
c00162b4:	68 be a7 02 c0       	push   0xc002a7be
c00162b9:	50                   	push   eax
c00162ba:	e8 c1 a4 fe ff       	call   c0000780 <strcmp>
c00162bf:	83 c4 10             	add    esp,0x10
c00162c2:	85 c0                	test   eax,eax
c00162c4:	89 c1                	mov    ecx,eax
c00162c6:	75 4c                	jne    c0016314 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c00162c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162cc:	31 d2                	xor    edx,edx
c00162ce:	01 f7                	add    edi,esi
c00162d0:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00162d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00162d8:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c00162dc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00162e0:	7d 32                	jge    c0016314 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c00162e2:	57                   	push   edi
c00162e3:	83 c7 08             	add    edi,0x8
c00162e6:	53                   	push   ebx
c00162e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00162eb:	56                   	push   esi
c00162ec:	e8 fe fe ff ff       	call   c00161ef <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)>
c00162f1:	83 c4 10             	add    esp,0x10
c00162f4:	84 c0                	test   al,al
c00162f6:	74 24                	je     c001631c <KePerformRelocations(unsigned char*, unsigned long)+0xad>
c00162f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00162fc:	41                   	inc    ecx
c00162fd:	eb d9                	jmp    c00162d8 <KePerformRelocations(unsigned char*, unsigned long)+0x69>
c00162ff:	83 f8 04             	cmp    eax,0x4
c0016302:	75 10                	jne    c0016314 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c0016304:	83 ec 0c             	sub    esp,0xc
c0016307:	68 c7 a7 02 c0       	push   0xc002a7c7
c001630c:	e8 17 a0 ff ff       	call   c0010328 <KePanic(char const*)>
c0016311:	83 c4 10             	add    esp,0x10
c0016314:	45                   	inc    ebp
c0016315:	e9 62 ff ff ff       	jmp    c001627c <KePerformRelocations(unsigned char*, unsigned long)+0xd>
c001631a:	b0 01                	mov    al,0x1
c001631c:	83 c4 1c             	add    esp,0x1c
c001631f:	5b                   	pop    ebx
c0016320:	5e                   	pop    esi
c0016321:	5f                   	pop    edi
c0016322:	5d                   	pop    ebp
c0016323:	c3                   	ret    

c0016324 <KeLoadELF(unsigned char*, bool, unsigned long)>:
c0016324:	57                   	push   edi
c0016325:	56                   	push   esi
c0016326:	53                   	push   ebx
c0016327:	83 ec 10             	sub    esp,0x10
c001632a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001632e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0016332:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016336:	53                   	push   ebx
c0016337:	e8 05 fd ff ff       	call   c0016041 <KeIsELFValid(Elf32_Ehdr*)>
c001633c:	59                   	pop    ecx
c001633d:	84 c0                	test   al,al
c001633f:	75 04                	jne    c0016345 <KeLoadELF(unsigned char*, bool, unsigned long)+0x21>
c0016341:	31 c0                	xor    eax,eax
c0016343:	eb 4d                	jmp    c0016392 <KeLoadELF(unsigned char*, bool, unsigned long)+0x6e>
c0016345:	81 e6 ff 00 00 00    	and    esi,0xff
c001634b:	74 07                	je     c0016354 <KeLoadELF(unsigned char*, bool, unsigned long)+0x30>
c001634d:	66 83 7b 30 00       	cmp    WORD PTR [ebx+0x30],0x0
c0016352:	74 ed                	je     c0016341 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c0016354:	66 83 7b 2c 00       	cmp    WORD PTR [ebx+0x2c],0x0
c0016359:	74 e6                	je     c0016341 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c001635b:	52                   	push   edx
c001635c:	57                   	push   edi
c001635d:	56                   	push   esi
c001635e:	53                   	push   ebx
c001635f:	e8 3f fd ff ff       	call   c00160a3 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)>
c0016364:	59                   	pop    ecx
c0016365:	5a                   	pop    edx
c0016366:	50                   	push   eax
c0016367:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001636b:	68 e8 a7 02 c0       	push   0xc002a7e8
c0016370:	e8 f1 0b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016375:	83 c4 10             	add    esp,0x10
c0016378:	85 f6                	test   esi,esi
c001637a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001637e:	74 12                	je     c0016392 <KeLoadELF(unsigned char*, bool, unsigned long)+0x6e>
c0016380:	50                   	push   eax
c0016381:	50                   	push   eax
c0016382:	57                   	push   edi
c0016383:	53                   	push   ebx
c0016384:	e8 e6 fe ff ff       	call   c001626f <KePerformRelocations(unsigned char*, unsigned long)>
c0016389:	83 c4 10             	add    esp,0x10
c001638c:	84 c0                	test   al,al
c001638e:	74 b1                	je     c0016341 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c0016390:	89 f8                	mov    eax,edi
c0016392:	83 c4 10             	add    esp,0x10
c0016395:	5b                   	pop    ebx
c0016396:	5e                   	pop    esi
c0016397:	5f                   	pop    edi
c0016398:	c3                   	ret    

c0016399 <KeLoadDriver(char const*)>:
c0016399:	55                   	push   ebp
c001639a:	57                   	push   edi
c001639b:	56                   	push   esi
c001639c:	53                   	push   ebx
c001639d:	83 ec 34             	sub    esp,0x34
c00163a0:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00163a4:	57                   	push   edi
c00163a5:	68 0c a8 02 c0       	push   0xc002a80c
c00163aa:	e8 b7 0b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00163af:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00163b6:	e8 19 9b ff ff       	call   c000fed4 <malloc>
c00163bb:	83 c4 0c             	add    esp,0xc
c00163be:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c00163c4:	57                   	push   edi
c00163c5:	50                   	push   eax
c00163c6:	89 c6                	mov    esi,eax
c00163c8:	e8 07 26 ff ff       	call   c00089d4 <File::File(char const*, Process*)>
c00163cd:	83 c4 10             	add    esp,0x10
c00163d0:	85 f6                	test   esi,esi
c00163d2:	0f 84 20 01 00 00    	je     c00164f8 <KeLoadDriver(char const*)+0x15f>
c00163d8:	50                   	push   eax
c00163d9:	8d 44 24 17          	lea    eax,[esp+0x17]
c00163dd:	50                   	push   eax
c00163de:	8d 44 24 20          	lea    eax,[esp+0x20]
c00163e2:	50                   	push   eax
c00163e3:	56                   	push   esi
c00163e4:	e8 0b 29 ff ff       	call   c0008cf4 <File::stat(unsigned long long*, bool*)>
c00163e9:	83 c4 10             	add    esp,0x10
c00163ec:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00163f1:	0f 85 01 01 00 00    	jne    c00164f8 <KeLoadDriver(char const*)+0x15f>
c00163f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00163fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00163ff:	89 d1                	mov    ecx,edx
c0016401:	09 c1                	or     ecx,eax
c0016403:	0f 84 ef 00 00 00    	je     c00164f8 <KeLoadDriver(char const*)+0x15f>
c0016409:	05 ff 0f 00 00       	add    eax,0xfff
c001640e:	51                   	push   ecx
c001640f:	83 d2 00             	adc    edx,0x0
c0016412:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016416:	6a 03                	push   0x3
c0016418:	50                   	push   eax
c0016419:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c001641f:	e8 2c dc ff ff       	call   c0014050 <VAS::allocatePages(int, int)>
c0016424:	83 c4 0c             	add    esp,0xc
c0016427:	50                   	push   eax
c0016428:	89 c3                	mov    ebx,eax
c001642a:	57                   	push   edi
c001642b:	68 22 a8 02 c0       	push   0xc002a822
c0016430:	e8 31 0b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016435:	5f                   	pop    edi
c0016436:	5d                   	pop    ebp
c0016437:	6a 01                	push   0x1
c0016439:	56                   	push   esi
c001643a:	e8 b3 25 ff ff       	call   c00089f2 <File::open(FileOpenMode)>
c001643f:	83 c4 10             	add    esp,0x10
c0016442:	85 c0                	test   eax,eax
c0016444:	74 11                	je     c0016457 <KeLoadDriver(char const*)+0xbe>
c0016446:	8b 06                	mov    eax,DWORD PTR [esi]
c0016448:	83 ec 0c             	sub    esp,0xc
c001644b:	56                   	push   esi
c001644c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001644f:	83 c4 10             	add    esp,0x10
c0016452:	e9 a1 00 00 00       	jmp    c00164f8 <KeLoadDriver(char const*)+0x15f>
c0016457:	83 ec 0c             	sub    esp,0xc
c001645a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001645e:	e8 71 9a ff ff       	call   c000fed4 <malloc>
c0016463:	5d                   	pop    ebp
c0016464:	31 ed                	xor    ebp,ebp
c0016466:	8d 54 24 20          	lea    edx,[esp+0x20]
c001646a:	89 c7                	mov    edi,eax
c001646c:	8b 06                	mov    eax,DWORD PTR [esi]
c001646e:	52                   	push   edx
c001646f:	57                   	push   edi
c0016470:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016474:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016478:	56                   	push   esi
c0016479:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001647c:	83 c4 14             	add    esp,0x14
c001647f:	56                   	push   esi
c0016480:	e8 cb 25 ff ff       	call   c0008a50 <File::close()>
c0016485:	83 c4 0c             	add    esp,0xc
c0016488:	53                   	push   ebx
c0016489:	6a 01                	push   0x1
c001648b:	57                   	push   edi
c001648c:	e8 93 fe ff ff       	call   c0016324 <KeLoadELF(unsigned char*, bool, unsigned long)>
c0016491:	83 c4 10             	add    esp,0x10
c0016494:	89 c6                	mov    esi,eax
c0016496:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001649a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001649e:	05 ff 0f 00 00       	add    eax,0xfff
c00164a3:	83 d2 00             	adc    edx,0x0
c00164a6:	0f ac d0 0c          	shrd   eax,edx,0xc
c00164aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00164ae:	c1 ea 0c             	shr    edx,0xc
c00164b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00164b5:	ba 00 00 00 00       	mov    edx,0x0
c00164ba:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00164be:	89 d0                	mov    eax,edx
c00164c0:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00164c4:	73 34                	jae    c00164fa <KeLoadDriver(char const*)+0x161>
c00164c6:	50                   	push   eax
c00164c7:	50                   	push   eax
c00164c8:	89 e8                	mov    eax,ebp
c00164ca:	c1 e0 0c             	shl    eax,0xc
c00164cd:	01 d8                	add    eax,ebx
c00164cf:	50                   	push   eax
c00164d0:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c00164d6:	e8 73 d6 ff ff       	call   c0013b4e <VAS::getPageTableEntry(unsigned long)>
c00164db:	83 c4 10             	add    esp,0x10
c00164de:	8b 00                	mov    eax,DWORD PTR [eax]
c00164e0:	a8 60                	test   al,0x60
c00164e2:	75 11                	jne    c00164f5 <KeLoadDriver(char const*)+0x15c>
c00164e4:	83 ec 0c             	sub    esp,0xc
c00164e7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00164ec:	50                   	push   eax
c00164ed:	e8 c7 9f ff ff       	call   c00104b9 <Phys::freePage(unsigned long)>
c00164f2:	83 c4 10             	add    esp,0x10
c00164f5:	45                   	inc    ebp
c00164f6:	eb 9e                	jmp    c0016496 <KeLoadDriver(char const*)+0xfd>
c00164f8:	31 f6                	xor    esi,esi
c00164fa:	83 c4 2c             	add    esp,0x2c
c00164fd:	89 f0                	mov    eax,esi
c00164ff:	5b                   	pop    ebx
c0016500:	5e                   	pop    esi
c0016501:	5f                   	pop    edi
c0016502:	5d                   	pop    ebp
c0016503:	c3                   	ret    

c0016504 <KeExecuteDriver(unsigned long, void*)>:
c0016504:	56                   	push   esi
c0016505:	53                   	push   ebx
c0016506:	51                   	push   ecx
c0016507:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001650b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001650f:	85 db                	test   ebx,ebx
c0016511:	75 10                	jne    c0016523 <KeExecuteDriver(unsigned long, void*)+0x1f>
c0016513:	83 ec 0c             	sub    esp,0xc
c0016516:	68 2e a8 02 c0       	push   0xc002a82e
c001651b:	e8 08 9e ff ff       	call   c0010328 <KePanic(char const*)>
c0016520:	83 c4 10             	add    esp,0x10
c0016523:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0016527:	89 d8                	mov    eax,ebx
c0016529:	5a                   	pop    edx
c001652a:	5b                   	pop    ebx
c001652b:	5e                   	pop    esi
c001652c:	ff e0                	jmp    eax

c001652e <KeLoadAndExecuteDriver(char const*, void*, bool)>:
c001652e:	57                   	push   edi
c001652f:	56                   	push   esi
c0016530:	53                   	push   ebx
c0016531:	81 ec 0c 01 00 00    	sub    esp,0x10c
c0016537:	8b b4 24 1c 01 00 00 	mov    esi,DWORD PTR [esp+0x11c]
c001653e:	8b bc 24 24 01 00 00 	mov    edi,DWORD PTR [esp+0x124]
c0016545:	56                   	push   esi
c0016546:	e8 4e fe ff ff       	call   c0016399 <KeLoadDriver(char const*)>
c001654b:	83 c4 10             	add    esp,0x10
c001654e:	85 c0                	test   eax,eax
c0016550:	74 16                	je     c0016568 <KeLoadAndExecuteDriver(char const*, void*, bool)+0x3a>
c0016552:	53                   	push   ebx
c0016553:	53                   	push   ebx
c0016554:	b3 01                	mov    bl,0x1
c0016556:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c001655d:	50                   	push   eax
c001655e:	e8 a1 ff ff ff       	call   c0016504 <KeExecuteDriver(unsigned long, void*)>
c0016563:	83 c4 10             	add    esp,0x10
c0016566:	eb 2d                	jmp    c0016595 <KeLoadAndExecuteDriver(char const*, void*, bool)+0x67>
c0016568:	89 fb                	mov    ebx,edi
c001656a:	84 db                	test   bl,bl
c001656c:	74 27                	je     c0016595 <KeLoadAndExecuteDriver(char const*, void*, bool)+0x67>
c001656e:	50                   	push   eax
c001656f:	50                   	push   eax
c0016570:	68 58 a8 02 c0       	push   0xc002a858
c0016575:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0016579:	53                   	push   ebx
c001657a:	e8 d1 a0 fe ff       	call   c0000650 <strcpy>
c001657f:	5a                   	pop    edx
c0016580:	59                   	pop    ecx
c0016581:	56                   	push   esi
c0016582:	53                   	push   ebx
c0016583:	e8 e8 a2 fe ff       	call   c0000870 <strcat>
c0016588:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001658b:	31 db                	xor    ebx,ebx
c001658d:	e8 96 9d ff ff       	call   c0010328 <KePanic(char const*)>
c0016592:	83 c4 10             	add    esp,0x10
c0016595:	81 c4 00 01 00 00    	add    esp,0x100
c001659b:	88 d8                	mov    al,bl
c001659d:	5b                   	pop    ebx
c001659e:	5e                   	pop    esi
c001659f:	5f                   	pop    edi
c00165a0:	c3                   	ret    

c00165a1 <KeProcessExec(Process*, char const*)>:
c00165a1:	56                   	push   esi
c00165a2:	53                   	push   ebx
c00165a3:	83 ec 04             	sub    esp,0x4
c00165a6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00165aa:	8b b3 b2 05 00 00    	mov    esi,DWORD PTR [ebx+0x5b2]
c00165b0:	85 f6                	test   esi,esi
c00165b2:	74 16                	je     c00165ca <KeProcessExec(Process*, char const*)+0x29>
c00165b4:	83 ec 0c             	sub    esp,0xc
c00165b7:	56                   	push   esi
c00165b8:	e8 23 d8 ff ff       	call   c0013de0 <VAS::~VAS()>
c00165bd:	58                   	pop    eax
c00165be:	5a                   	pop    edx
c00165bf:	6a 14                	push   0x14
c00165c1:	56                   	push   esi
c00165c2:	e8 0d 75 ff ff       	call   c000dad4 <operator delete(void*, unsigned long)>
c00165c7:	83 c4 10             	add    esp,0x10
c00165ca:	83 ec 0c             	sub    esp,0xc
c00165cd:	6a 14                	push   0x14
c00165cf:	e8 00 99 ff ff       	call   c000fed4 <malloc>
c00165d4:	89 c6                	mov    esi,eax
c00165d6:	58                   	pop    eax
c00165d7:	5a                   	pop    edx
c00165d8:	6a 00                	push   0x0
c00165da:	56                   	push   esi
c00165db:	e8 ac dc ff ff       	call   c001428c <VAS::VAS(bool)>
c00165e0:	89 b3 b2 05 00 00    	mov    DWORD PTR [ebx+0x5b2],esi
c00165e6:	59                   	pop    ecx
c00165e7:	5e                   	pop    esi
c00165e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165ec:	50                   	push   eax
c00165ed:	53                   	push   ebx
c00165ee:	e8 8d f4 ff ff       	call   c0015a80 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00165f3:	83 c4 14             	add    esp,0x14
c00165f6:	31 c0                	xor    eax,eax
c00165f8:	5b                   	pop    ebx
c00165f9:	5e                   	pop    esi
c00165fa:	c3                   	ret    
c00165fb:	90                   	nop

c00165fc <userModeEntryPoint(void*)>:
c00165fc:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0016604:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0016609:	85 c0                	test   eax,eax
c001660b:	75 03                	jne    c0016610 <userModeEntryPoint(void*)+0x14>
c001660d:	fb                   	sti    
c001660e:	66 90                	xchg   ax,ax
c0016610:	fb                   	sti    
c0016611:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016616:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016619:	8b 80 ae 05 00 00    	mov    eax,DWORD PTR [eax+0x5ae]
c001661f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016623:	e9 17 9c fe ff       	jmp    c000023f <goToUsermode>

c0016628 <changeTSS>:
c0016628:	83 ec 14             	sub    esp,0x14
c001662b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016630:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0016633:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0016638:	c1 e2 15             	shl    edx,0x15
c001663b:	29 d0                	sub    eax,edx
c001663d:	50                   	push   eax
c001663e:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c0016643:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016649:	05 68 11 00 00       	add    eax,0x1168
c001664e:	50                   	push   eax
c001664f:	e8 dc ca ff ff       	call   c0013130 <TSS::setESP(unsigned long)>
c0016654:	83 c4 1c             	add    esp,0x1c
c0016657:	c3                   	ret    

c0016658 <switchToThread(ThreadControlBlock*)>:
c0016658:	57                   	push   edi
c0016659:	8b 0d 2c 33 03 c0    	mov    ecx,DWORD PTR ds:0xc003332c
c001665f:	56                   	push   esi
c0016660:	53                   	push   ebx
c0016661:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016665:	85 c9                	test   ecx,ecx
c0016667:	0f 85 9b 00 00 00    	jne    c0016708 <switchToThread(ThreadControlBlock*)+0xb0>
c001666d:	0f b6 53 44          	movzx  edx,BYTE PTR [ebx+0x44]
c0016671:	81 fa ff 00 00 00    	cmp    edx,0xff
c0016677:	0f 84 87 00 00 00    	je     c0016704 <switchToThread(ThreadControlBlock*)+0xac>
c001667d:	b8 00 04 00 00       	mov    eax,0x400
c0016682:	29 d0                	sub    eax,edx
c0016684:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0016687:	d1 f8                	sar    eax,1
c0016689:	01 d0                	add    eax,edx
c001668b:	90                   	nop
c001668c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001668f:	e8 0d 49 00 00       	call   c001afa1 <HalQueryPerformanceCounter()>
c0016694:	a3 70 33 03 c0       	mov    ds:0xc0033370,eax
c0016699:	89 c6                	mov    esi,eax
c001669b:	89 d7                	mov    edi,edx
c001669d:	2b 35 60 33 03 c0    	sub    esi,DWORD PTR ds:0xc0033360
c00166a3:	a3 60 33 03 c0       	mov    ds:0xc0033360,eax
c00166a8:	1b 3d 64 33 03 c0    	sbb    edi,DWORD PTR ds:0xc0033364
c00166ae:	89 35 68 33 03 c0    	mov    DWORD PTR ds:0xc0033368,esi
c00166b4:	89 15 74 33 03 c0    	mov    DWORD PTR ds:0xc0033374,edx
c00166ba:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00166c0:	89 15 64 33 03 c0    	mov    DWORD PTR ds:0xc0033364,edx
c00166c6:	89 3d 6c 33 03 c0    	mov    DWORD PTR ds:0xc003336c,edi
c00166cc:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00166cf:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00166d2:	01 c6                	add    esi,eax
c00166d4:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00166d7:	11 d7                	adc    edi,edx
c00166d9:	83 ec 0c             	sub    esp,0xc
c00166dc:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00166df:	53                   	push   ebx
c00166e0:	e8 92 9b fe ff       	call   c0000277 <switchToThreadASM>
c00166e5:	0f 20 c0             	mov    eax,cr0
c00166e8:	83 c8 08             	or     eax,0x8
c00166eb:	0f 22 c0             	mov    cr0,eax
c00166ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166f3:	83 c4 10             	add    esp,0x10
c00166f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00166fa:	5b                   	pop    ebx
c00166fb:	5e                   	pop    esi
c00166fc:	5f                   	pop    edi
c00166fd:	e9 02 f0 ff ff       	jmp    c0015704 <KeCheckAlarm(ThreadControlBlock*)>
c0016702:	66 90                	xchg   ax,ax
c0016704:	31 c0                	xor    eax,eax
c0016706:	eb 84                	jmp    c001668c <switchToThread(ThreadControlBlock*)+0x34>
c0016708:	5b                   	pop    ebx
c0016709:	c7 05 28 33 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x1
c0016713:	5e                   	pop    esi
c0016714:	5f                   	pop    edi
c0016715:	c3                   	ret    
c0016716:	66 90                	xchg   ax,ax

c0016718 <Process::addArgs(char**)>:
c0016718:	57                   	push   edi
c0016719:	56                   	push   esi
c001671a:	53                   	push   ebx
c001671b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001671f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0016723:	85 f6                	test   esi,esi
c0016725:	c7 87 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x5b6],0x0
c001672f:	74 4f                	je     c0016780 <Process::addArgs(char**)+0x68>
c0016731:	8b 06                	mov    eax,DWORD PTR [esi]
c0016733:	85 c0                	test   eax,eax
c0016735:	74 49                	je     c0016780 <Process::addArgs(char**)+0x68>
c0016737:	31 db                	xor    ebx,ebx
c0016739:	8d 76 00             	lea    esi,[esi+0x0]
c001673c:	83 ec 0c             	sub    esp,0xc
c001673f:	50                   	push   eax
c0016740:	e8 3b 9e fe ff       	call   c0000580 <strlen>
c0016745:	83 c0 01             	add    eax,0x1
c0016748:	89 04 24             	mov    DWORD PTR [esp],eax
c001674b:	e8 84 97 ff ff       	call   c000fed4 <malloc>
c0016750:	89 84 9f ba 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x5ba],eax
c0016757:	5a                   	pop    edx
c0016758:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001675b:	83 c3 01             	add    ebx,0x1
c001675e:	59                   	pop    ecx
c001675f:	52                   	push   edx
c0016760:	50                   	push   eax
c0016761:	e8 ea 9e fe ff       	call   c0000650 <strcpy>
c0016766:	8b 8f b6 05 00 00    	mov    ecx,DWORD PTR [edi+0x5b6]
c001676c:	83 c4 10             	add    esp,0x10
c001676f:	83 c1 01             	add    ecx,0x1
c0016772:	89 8f b6 05 00 00    	mov    DWORD PTR [edi+0x5b6],ecx
c0016778:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c001677b:	85 c0                	test   eax,eax
c001677d:	75 bd                	jne    c001673c <Process::addArgs(char**)+0x24>
c001677f:	90                   	nop
c0016780:	5b                   	pop    ebx
c0016781:	5e                   	pop    esi
c0016782:	5f                   	pop    edi
c0016783:	c3                   	ret    

c0016784 <Process::Process(char const*, Process*, char**)>:
c0016784:	56                   	push   esi
c0016785:	53                   	push   ebx
c0016786:	83 ec 14             	sub    esp,0x14
c0016789:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001678d:	05 0c 02 00 00       	add    eax,0x20c
c0016792:	bb 07 00 00 00       	mov    ebx,0x7
c0016797:	89 c6                	mov    esi,eax
c0016799:	8d 76 00             	lea    esi,[esi+0x0]
c001679c:	85 db                	test   ebx,ebx
c001679e:	78 14                	js     c00167b4 <Process::Process(char const*, Process*, char**)+0x30>
c00167a0:	83 ec 0c             	sub    esp,0xc
c00167a3:	56                   	push   esi
c00167a4:	e8 ef 14 01 00       	call   c0027c98 <ThreadControlBlock::ThreadControlBlock()>
c00167a9:	83 c4 10             	add    esp,0x10
c00167ac:	83 c6 73             	add    esi,0x73
c00167af:	83 eb 01             	sub    ebx,0x1
c00167b2:	eb e8                	jmp    c001679c <Process::Process(char const*, Process*, char**)+0x18>
c00167b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167b8:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c00167bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167c3:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c00167ca:	83 ec 0c             	sub    esp,0xc
c00167cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00167d1:	e8 2e 85 ff ff       	call   c000ed04 <KeNewProcessEnv(Process*)>
c00167d6:	83 c4 10             	add    esp,0x10
c00167d9:	89 c2                	mov    edx,eax
c00167db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167df:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c00167e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167e9:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c00167f2:	a1 7c d4 02 c0       	mov    eax,ds:0xc002d47c
c00167f7:	8d 50 01             	lea    edx,[eax+0x1]
c00167fa:	89 15 7c d4 02 c0    	mov    DWORD PTR ds:0xc002d47c,edx
c0016800:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016804:	89 02                	mov    DWORD PTR [edx],eax
c0016806:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001680e:	83 ec 0c             	sub    esp,0xc
c0016811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016815:	e8 ba 96 ff ff       	call   c000fed4 <malloc>
c001681a:	83 c4 10             	add    esp,0x10
c001681d:	89 c3                	mov    ebx,eax
c001681f:	83 ec 08             	sub    esp,0x8
c0016822:	6a 00                	push   0x0
c0016824:	53                   	push   ebx
c0016825:	e8 62 da ff ff       	call   c001428c <VAS::VAS(bool)>
c001682a:	83 c4 10             	add    esp,0x10
c001682d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016831:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0016837:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001683b:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016845:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016849:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001684d:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0016853:	e8 37 ac ff ff       	call   c001148f <KeInitSignals()>
c0016858:	89 c2                	mov    edx,eax
c001685a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001685e:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016864:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016868:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001686e:	85 c0                	test   eax,eax
c0016870:	74 42                	je     c00168b4 <Process::Process(char const*, Process*, char**)+0x130>
c0016872:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016876:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001687c:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016882:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016886:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c001688c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016890:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016896:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001689c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168a0:	05 0c 01 00 00       	add    eax,0x10c
c00168a5:	83 ec 08             	sub    esp,0x8
c00168a8:	52                   	push   edx
c00168a9:	50                   	push   eax
c00168aa:	e8 a1 9d fe ff       	call   c0000650 <strcpy>
c00168af:	83 c4 10             	add    esp,0x10
c00168b2:	eb 7c                	jmp    c0016930 <Process::Process(char const*, Process*, char**)+0x1ac>
c00168b4:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c00168bc:	83 ec 0c             	sub    esp,0xc
c00168bf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00168c3:	e8 0c 96 ff ff       	call   c000fed4 <malloc>
c00168c8:	83 c4 10             	add    esp,0x10
c00168cb:	89 c3                	mov    ebx,eax
c00168cd:	83 ec 08             	sub    esp,0x8
c00168d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00168d4:	53                   	push   ebx
c00168d5:	e8 76 c5 ff ff       	call   c0012e50 <VgaText::VgaText(char const*)>
c00168da:	83 c4 10             	add    esp,0x10
c00168dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168e1:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c00168e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168eb:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00168f1:	83 ec 0c             	sub    esp,0xc
c00168f4:	50                   	push   eax
c00168f5:	e8 bc bd ff ff       	call   c00126b6 <addToTerminalCycle(VgaText*)>
c00168fa:	83 c4 10             	add    esp,0x10
c00168fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016901:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016907:	83 ec 0c             	sub    esp,0xc
c001690a:	50                   	push   eax
c001690b:	e8 17 c0 ff ff       	call   c0012927 <setActiveTerminal(VgaText*)>
c0016910:	83 c4 10             	add    esp,0x10
c0016913:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016917:	05 0c 01 00 00       	add    eax,0x10c
c001691c:	83 ec 08             	sub    esp,0x8
c001691f:	68 6c a8 02 c0       	push   0xc002a86c
c0016924:	50                   	push   eax
c0016925:	e8 26 9d fe ff       	call   c0000650 <strcpy>
c001692a:	83 c4 10             	add    esp,0x10
c001692d:	8d 76 00             	lea    esi,[esi+0x0]
c0016930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016934:	83 c0 0c             	add    eax,0xc
c0016937:	83 ec 08             	sub    esp,0x8
c001693a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001693e:	50                   	push   eax
c001693f:	e8 0c 9d fe ff       	call   c0000650 <strcpy>
c0016944:	83 c4 10             	add    esp,0x10
c0016947:	83 ec 08             	sub    esp,0x8
c001694a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001694e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016952:	e8 c1 fd ff ff       	call   c0016718 <Process::addArgs(char**)>
c0016957:	83 c4 10             	add    esp,0x10
c001695a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001695e:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016964:	83 e2 7f             	and    edx,0x7f
c0016967:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c001696d:	83 ec 08             	sub    esp,0x8
c0016970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016978:	e8 03 f1 ff ff       	call   c0015a80 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001697d:	83 c4 10             	add    esp,0x10
c0016980:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016984:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016988:	83 f0 01             	xor    eax,0x1
c001698b:	88 c2                	mov    dl,al
c001698d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016991:	88 90 be 07 00 00    	mov    BYTE PTR [eax+0x7be],dl
c0016997:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001699b:	8b 10                	mov    edx,DWORD PTR [eax]
c001699d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00169a2:	52                   	push   edx
c00169a3:	50                   	push   eax
c00169a4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169a8:	68 d8 a8 02 c0       	push   0xc002a8d8
c00169ad:	e8 b4 05 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00169b2:	83 c4 10             	add    esp,0x10
c00169b5:	90                   	nop
c00169b6:	83 c4 14             	add    esp,0x14
c00169b9:	5b                   	pop    ebx
c00169ba:	5e                   	pop    esi
c00169bb:	c3                   	ret    

c00169bc <Process::Process(bool, char const*, Process*, char**)>:
c00169bc:	56                   	push   esi
c00169bd:	53                   	push   ebx
c00169be:	83 ec 24             	sub    esp,0x24
c00169c1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00169c5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00169c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169cd:	05 0c 02 00 00       	add    eax,0x20c
c00169d2:	bb 07 00 00 00       	mov    ebx,0x7
c00169d7:	89 c6                	mov    esi,eax
c00169d9:	8d 76 00             	lea    esi,[esi+0x0]
c00169dc:	85 db                	test   ebx,ebx
c00169de:	78 14                	js     c00169f4 <Process::Process(bool, char const*, Process*, char**)+0x38>
c00169e0:	83 ec 0c             	sub    esp,0xc
c00169e3:	56                   	push   esi
c00169e4:	e8 af 12 01 00       	call   c0027c98 <ThreadControlBlock::ThreadControlBlock()>
c00169e9:	83 c4 10             	add    esp,0x10
c00169ec:	83 c6 73             	add    esi,0x73
c00169ef:	83 eb 01             	sub    ebx,0x1
c00169f2:	eb e8                	jmp    c00169dc <Process::Process(bool, char const*, Process*, char**)+0x20>
c00169f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169f8:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c00169ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a03:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c0016a0a:	83 ec 0c             	sub    esp,0xc
c0016a0d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016a11:	e8 ee 82 ff ff       	call   c000ed04 <KeNewProcessEnv(Process*)>
c0016a16:	83 c4 10             	add    esp,0x10
c0016a19:	89 c2                	mov    edx,eax
c0016a1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a1f:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016a25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a29:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016a32:	a1 7c d4 02 c0       	mov    eax,ds:0xc002d47c
c0016a37:	8d 50 01             	lea    edx,[eax+0x1]
c0016a3a:	89 15 7c d4 02 c0    	mov    DWORD PTR ds:0xc002d47c,edx
c0016a40:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016a44:	89 02                	mov    DWORD PTR [edx],eax
c0016a46:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0016a4e:	83 ec 0c             	sub    esp,0xc
c0016a51:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016a55:	e8 7a 94 ff ff       	call   c000fed4 <malloc>
c0016a5a:	83 c4 10             	add    esp,0x10
c0016a5d:	89 c3                	mov    ebx,eax
c0016a5f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016a64:	83 ec 08             	sub    esp,0x8
c0016a67:	50                   	push   eax
c0016a68:	53                   	push   ebx
c0016a69:	e8 1e d8 ff ff       	call   c001428c <VAS::VAS(bool)>
c0016a6e:	83 c4 10             	add    esp,0x10
c0016a71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a75:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0016a7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a7f:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016a89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a8d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016a91:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0016a97:	e8 f3 a9 ff ff       	call   c001148f <KeInitSignals()>
c0016a9c:	89 c2                	mov    edx,eax
c0016a9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016aa2:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016aa8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016aac:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016ab2:	85 c0                	test   eax,eax
c0016ab4:	74 42                	je     c0016af8 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0016ab6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016aba:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016ac0:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016ac6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016aca:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016ad0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ad4:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016ada:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016ae0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ae4:	05 0c 01 00 00       	add    eax,0x10c
c0016ae9:	83 ec 08             	sub    esp,0x8
c0016aec:	52                   	push   edx
c0016aed:	50                   	push   eax
c0016aee:	e8 5d 9b fe ff       	call   c0000650 <strcpy>
c0016af3:	83 c4 10             	add    esp,0x10
c0016af6:	eb 7c                	jmp    c0016b74 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0016af8:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0016b00:	83 ec 0c             	sub    esp,0xc
c0016b03:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016b07:	e8 c8 93 ff ff       	call   c000fed4 <malloc>
c0016b0c:	83 c4 10             	add    esp,0x10
c0016b0f:	89 c3                	mov    ebx,eax
c0016b11:	83 ec 08             	sub    esp,0x8
c0016b14:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016b18:	53                   	push   ebx
c0016b19:	e8 32 c3 ff ff       	call   c0012e50 <VgaText::VgaText(char const*)>
c0016b1e:	83 c4 10             	add    esp,0x10
c0016b21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b25:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016b2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b2f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016b35:	83 ec 0c             	sub    esp,0xc
c0016b38:	50                   	push   eax
c0016b39:	e8 78 bb ff ff       	call   c00126b6 <addToTerminalCycle(VgaText*)>
c0016b3e:	83 c4 10             	add    esp,0x10
c0016b41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b45:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016b4b:	83 ec 0c             	sub    esp,0xc
c0016b4e:	50                   	push   eax
c0016b4f:	e8 d3 bd ff ff       	call   c0012927 <setActiveTerminal(VgaText*)>
c0016b54:	83 c4 10             	add    esp,0x10
c0016b57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b5b:	05 0c 01 00 00       	add    eax,0x10c
c0016b60:	83 ec 08             	sub    esp,0x8
c0016b63:	68 6c a8 02 c0       	push   0xc002a86c
c0016b68:	50                   	push   eax
c0016b69:	e8 e2 9a fe ff       	call   c0000650 <strcpy>
c0016b6e:	83 c4 10             	add    esp,0x10
c0016b71:	8d 76 00             	lea    esi,[esi+0x0]
c0016b74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b78:	83 c0 0c             	add    eax,0xc
c0016b7b:	83 ec 08             	sub    esp,0x8
c0016b7e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016b82:	50                   	push   eax
c0016b83:	e8 c8 9a fe ff       	call   c0000650 <strcpy>
c0016b88:	83 c4 10             	add    esp,0x10
c0016b8b:	83 ec 08             	sub    esp,0x8
c0016b8e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016b92:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016b96:	e8 7d fb ff ff       	call   c0016718 <Process::addArgs(char**)>
c0016b9b:	83 c4 10             	add    esp,0x10
c0016b9e:	90                   	nop
c0016b9f:	83 c4 24             	add    esp,0x24
c0016ba2:	5b                   	pop    ebx
c0016ba3:	5e                   	pop    esi
c0016ba4:	c3                   	ret    
c0016ba5:	8d 76 00             	lea    esi,[esi+0x0]

c0016ba8 <taskStartupFunction>:
c0016ba8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bad:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016bb0:	c3                   	ret    
c0016bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0016bb4 <KeDisablePreemption()>:
c0016bb4:	a1 0c 33 03 c0       	mov    eax,ds:0xc003330c
c0016bb9:	85 c0                	test   eax,eax
c0016bbb:	75 13                	jne    c0016bd0 <KeDisablePreemption()+0x1c>
c0016bbd:	8a 15 0c 31 03 c0    	mov    dl,BYTE PTR ds:0xc003310c
c0016bc3:	c6 05 0c 31 03 c0 00 	mov    BYTE PTR ds:0xc003310c,0x0
c0016bca:	88 15 08 33 03 c0    	mov    BYTE PTR ds:0xc0033308,dl
c0016bd0:	83 c0 01             	add    eax,0x1
c0016bd3:	a3 0c 33 03 c0       	mov    ds:0xc003330c,eax
c0016bd8:	c3                   	ret    
c0016bd9:	8d 76 00             	lea    esi,[esi+0x0]

c0016bdc <KeRestorePreemption()>:
c0016bdc:	a1 0c 33 03 c0       	mov    eax,ds:0xc003330c
c0016be1:	83 e8 01             	sub    eax,0x1
c0016be4:	a3 0c 33 03 c0       	mov    ds:0xc003330c,eax
c0016be9:	75 0d                	jne    c0016bf8 <KeRestorePreemption()+0x1c>
c0016beb:	a0 08 33 03 c0       	mov    al,ds:0xc0033308
c0016bf0:	a2 0c 31 03 c0       	mov    ds:0xc003310c,al
c0016bf5:	8d 76 00             	lea    esi,[esi+0x0]
c0016bf8:	c3                   	ret    
c0016bf9:	90                   	nop
c0016bfa:	66 90                	xchg   ax,ax

c0016bfc <Process::createThread(void (*)(void*), void*, int)>:
c0016bfc:	55                   	push   ebp
c0016bfd:	31 c9                	xor    ecx,ecx
c0016bff:	57                   	push   edi
c0016c00:	56                   	push   esi
c0016c01:	53                   	push   ebx
c0016c02:	83 ec 0c             	sub    esp,0xc
c0016c05:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016c09:	66 8b b3 a4 05 00 00 	mov    si,WORD PTR [ebx+0x5a4]
c0016c10:	89 f2                	mov    edx,esi
c0016c12:	66 90                	xchg   ax,ax
c0016c14:	0f b7 c2             	movzx  eax,dx
c0016c17:	80 e2 01             	and    dl,0x1
c0016c1a:	74 18                	je     c0016c34 <Process::createThread(void (*)(void*), void*, int)+0x38>
c0016c1c:	d1 f8                	sar    eax,1
c0016c1e:	83 c1 01             	add    ecx,0x1
c0016c21:	83 f9 10             	cmp    ecx,0x10
c0016c24:	89 c2                	mov    edx,eax
c0016c26:	75 ec                	jne    c0016c14 <Process::createThread(void (*)(void*), void*, int)+0x18>
c0016c28:	83 c4 0c             	add    esp,0xc
c0016c2b:	31 db                	xor    ebx,ebx
c0016c2d:	89 d8                	mov    eax,ebx
c0016c2f:	5b                   	pop    ebx
c0016c30:	5e                   	pop    esi
c0016c31:	5f                   	pop    edi
c0016c32:	5d                   	pop    ebp
c0016c33:	c3                   	ret    
c0016c34:	b8 01 00 00 00       	mov    eax,0x1
c0016c39:	d3 e0                	shl    eax,cl
c0016c3b:	09 c6                	or     esi,eax
c0016c3d:	66 89 b3 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],si
c0016c44:	6b c1 73             	imul   eax,ecx,0x73
c0016c47:	01 d8                	add    eax,ebx
c0016c49:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c0016c50:	75 0a                	jne    c0016c5c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0016c52:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c0016c5c:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016c62:	6b f9 73             	imul   edi,ecx,0x73
c0016c65:	83 ec 0c             	sub    esp,0xc
c0016c68:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0016c6b:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0016c6e:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0016c74:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0016c7a:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0016c80:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0016c87:	c7 80 44 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x244],0x0
c0016c91:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0016c97:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016c9b:	c7 80 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x26f],0x0
c0016ca5:	c6 80 73 02 00 00 00 	mov    BYTE PTR [eax+0x273],0x0
c0016cac:	c6 80 74 02 00 00 00 	mov    BYTE PTR [eax+0x274],0x0
c0016cb3:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0016cb9:	89 ca                	mov    edx,ecx
c0016cbb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016cbf:	c6 80 75 02 00 00 00 	mov    BYTE PTR [eax+0x275],0x0
c0016cc6:	f7 da                	neg    edx
c0016cc8:	c1 e2 15             	shl    edx,0x15
c0016ccb:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0016cd1:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0016cd7:	8a 54 24 38          	mov    dl,BYTE PTR [esp+0x38]
c0016cdb:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0016ce5:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c0016ceb:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016cf5:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0016cfb:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016d01:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0016d0b:	83 e2 80             	and    edx,0xffffff80
c0016d0e:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0016d14:	68 00 01 00 00       	push   0x100
c0016d19:	e8 b6 91 ff ff       	call   c000fed4 <malloc>
c0016d1e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0016d21:	58                   	pop    eax
c0016d22:	5a                   	pop    edx
c0016d23:	53                   	push   ebx
c0016d24:	68 70 a8 02 c0       	push   0xc002a870
c0016d29:	e8 38 02 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016d2e:	59                   	pop    ecx
c0016d2f:	5e                   	pop    esi
c0016d30:	53                   	push   ebx
c0016d31:	68 4c 33 03 c0       	push   0xc003334c
c0016d36:	e8 09 0b 01 00       	call   c0027844 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016d3b:	83 c4 10             	add    esp,0x10
c0016d3e:	89 d8                	mov    eax,ebx
c0016d40:	83 c4 0c             	add    esp,0xc
c0016d43:	5b                   	pop    ebx
c0016d44:	5e                   	pop    esi
c0016d45:	5f                   	pop    edi
c0016d46:	5d                   	pop    ebp
c0016d47:	c3                   	ret    

c0016d48 <Process::createUserThread()>:
c0016d48:	83 ec 0c             	sub    esp,0xc
c0016d4b:	68 80 00 00 00       	push   0x80
c0016d50:	6a 00                	push   0x0
c0016d52:	68 fc 65 01 c0       	push   0xc00165fc
c0016d57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d5b:	50                   	push   eax
c0016d5c:	e8 9b fe ff ff       	call   c0016bfc <Process::createThread(void (*)(void*), void*, int)>
c0016d61:	83 c4 1c             	add    esp,0x1c
c0016d64:	c3                   	ret    
c0016d65:	8d 76 00             	lea    esi,[esi+0x0]

c0016d68 <setupMultitasking(void (*)())>:
c0016d68:	56                   	push   esi
c0016d69:	53                   	push   ebx
c0016d6a:	83 ec 04             	sub    esp,0x4
c0016d6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016d71:	eb 11                	jmp    c0016d84 <setupMultitasking(void (*)())+0x1c>
c0016d73:	90                   	nop
c0016d74:	83 ec 0c             	sub    esp,0xc
c0016d77:	68 4c 33 03 c0       	push   0xc003334c
c0016d7c:	e8 07 0a 01 00       	call   c0027788 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016d81:	83 c4 10             	add    esp,0x10
c0016d84:	83 ec 0c             	sub    esp,0xc
c0016d87:	68 4c 33 03 c0       	push   0xc003334c
c0016d8c:	e8 d3 09 01 00       	call   c0027764 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d91:	83 c4 10             	add    esp,0x10
c0016d94:	84 c0                	test   al,al
c0016d96:	74 dc                	je     c0016d74 <setupMultitasking(void (*)())+0xc>
c0016d98:	83 ec 0c             	sub    esp,0xc
c0016d9b:	68 c4 07 00 00       	push   0x7c4
c0016da0:	e8 2f 91 ff ff       	call   c000fed4 <malloc>
c0016da5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016dac:	6a 00                	push   0x0
c0016dae:	68 84 a8 02 c0       	push   0xc002a884
c0016db3:	6a 01                	push   0x1
c0016db5:	50                   	push   eax
c0016db6:	89 c3                	mov    ebx,eax
c0016db8:	e8 ff fb ff ff       	call   c00169bc <Process::Process(bool, char const*, Process*, char**)>
c0016dbd:	8b 83 a6 05 00 00    	mov    eax,DWORD PTR [ebx+0x5a6]
c0016dc3:	83 c4 14             	add    esp,0x14
c0016dc6:	89 1d 58 33 03 c0    	mov    DWORD PTR ds:0xc0033358,ebx
c0016dcc:	50                   	push   eax
c0016dcd:	e8 55 bb ff ff       	call   c0012927 <setActiveTerminal(VgaText*)>
c0016dd2:	66 8b 83 a4 05 00 00 	mov    ax,WORD PTR [ebx+0x5a4]
c0016dd9:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c0016de3:	83 c8 01             	or     eax,0x1
c0016de6:	66 89 83 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],ax
c0016ded:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016df3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016df6:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0016e00:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0016e06:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0016e10:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0016e16:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016e20:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0016e2a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016e30:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0016e36:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0016e40:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0016e4a:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016e51:	e8 7e 90 ff ff       	call   c000fed4 <malloc>
c0016e56:	c7 83 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x26f],0x0
c0016e60:	c6 83 73 02 00 00 00 	mov    BYTE PTR [ebx+0x273],0x0
c0016e67:	c6 83 74 02 00 00 00 	mov    BYTE PTR [ebx+0x274],0x0
c0016e6e:	c6 83 75 02 00 00 00 	mov    BYTE PTR [ebx+0x275],0x0
c0016e75:	c6 83 76 02 00 00 00 	mov    BYTE PTR [ebx+0x276],0x0
c0016e7c:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0016e82:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0016e88:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016e8e:	5a                   	pop    edx
c0016e8f:	59                   	pop    ecx
c0016e90:	68 6c a8 02 c0       	push   0xc002a86c
c0016e95:	50                   	push   eax
c0016e96:	e8 b5 97 fe ff       	call   c0000650 <strcpy>
c0016e9b:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0016ea2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016ea6:	83 c4 14             	add    esp,0x14
c0016ea9:	5b                   	pop    ebx
c0016eaa:	5e                   	pop    esi
c0016eab:	e9 b9 93 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>

c0016eb0 <schedule()>:
c0016eb0:	8b 15 2c 33 03 c0    	mov    edx,DWORD PTR ds:0xc003332c
c0016eb6:	85 d2                	test   edx,edx
c0016eb8:	74 0e                	je     c0016ec8 <schedule()+0x18>
c0016eba:	c7 05 28 33 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x1
c0016ec4:	c3                   	ret    
c0016ec5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ec8:	53                   	push   ebx
c0016ec9:	83 ec 14             	sub    esp,0x14
c0016ecc:	68 4c 33 03 c0       	push   0xc003334c
c0016ed1:	e8 8e 08 01 00       	call   c0027764 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016ed6:	83 c4 10             	add    esp,0x10
c0016ed9:	84 c0                	test   al,al
c0016edb:	75 3f                	jne    c0016f1c <schedule()+0x6c>
c0016edd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ee2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016ee5:	83 fa 01             	cmp    edx,0x1
c0016ee8:	74 3a                	je     c0016f24 <schedule()+0x74>
c0016eea:	66 90                	xchg   ax,ax
c0016eec:	83 ec 0c             	sub    esp,0xc
c0016eef:	68 4c 33 03 c0       	push   0xc003334c
c0016ef4:	e8 87 08 01 00       	call   c0027780 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ef9:	c7 04 24 4c 33 03 c0 	mov    DWORD PTR [esp],0xc003334c
c0016f00:	89 c3                	mov    ebx,eax
c0016f02:	e8 81 08 01 00       	call   c0027788 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016f07:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0016f0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f11:	e8 42 f7 ff ff       	call   c0016658 <switchToThread(ThreadControlBlock*)>
c0016f16:	83 c4 10             	add    esp,0x10
c0016f19:	8d 76 00             	lea    esi,[esi+0x0]
c0016f1c:	83 c4 08             	add    esp,0x8
c0016f1f:	5b                   	pop    ebx
c0016f20:	c3                   	ret    
c0016f21:	8d 76 00             	lea    esi,[esi+0x0]
c0016f24:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016f2b:	83 ec 08             	sub    esp,0x8
c0016f2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f33:	50                   	push   eax
c0016f34:	68 4c 33 03 c0       	push   0xc003334c
c0016f39:	e8 06 09 01 00       	call   c0027844 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016f3e:	83 c4 10             	add    esp,0x10
c0016f41:	eb a9                	jmp    c0016eec <schedule()+0x3c>
c0016f43:	90                   	nop

c0016f44 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0016f44:	83 ec 0c             	sub    esp,0xc
c0016f47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f4c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016f50:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016f53:	e8 58 ff ff ff       	call   c0016eb0 <schedule()>
c0016f58:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0016f60:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0016f65:	85 c0                	test   eax,eax
c0016f67:	75 03                	jne    c0016f6c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c0016f69:	fb                   	sti    
c0016f6a:	66 90                	xchg   ax,ax
c0016f6c:	83 c4 0c             	add    esp,0xc
c0016f6f:	c3                   	ret    

c0016f70 <blockTask(TaskState)>:
c0016f70:	83 ec 0c             	sub    esp,0xc
c0016f73:	fa                   	cli    
c0016f74:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0016f79:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016f7d:	83 c0 01             	add    eax,0x1
c0016f80:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0016f85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f8a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016f8d:	e8 1e ff ff ff       	call   c0016eb0 <schedule()>
c0016f92:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0016f9a:	8b 15 30 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033330
c0016fa0:	85 d2                	test   edx,edx
c0016fa2:	75 04                	jne    c0016fa8 <blockTask(TaskState)+0x38>
c0016fa4:	fb                   	sti    
c0016fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0016fa8:	83 c4 0c             	add    esp,0xc
c0016fab:	c3                   	ret    

c0016fac <waitTask(int, int*, int)>:
c0016fac:	83 ec 18             	sub    esp,0x18
c0016faf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fb4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016fb8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0016fbb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016fbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fc4:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0016fc7:	6a 07                	push   0x7
c0016fc9:	e8 a2 ff ff ff       	call   c0016f70 <blockTask(TaskState)>
c0016fce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fd3:	83 c4 10             	add    esp,0x10
c0016fd6:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0016fd9:	85 d2                	test   edx,edx
c0016fdb:	74 0b                	je     c0016fe8 <waitTask(int, int*, int)+0x3c>
c0016fdd:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0016fe0:	89 02                	mov    DWORD PTR [edx],eax
c0016fe2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fe7:	90                   	nop
c0016fe8:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0016feb:	83 c4 0c             	add    esp,0xc
c0016fee:	c3                   	ret    
c0016fef:	90                   	nop

c0016ff0 <milliTenthSleepUntil(unsigned long long)>:
c0016ff0:	83 ec 0c             	sub    esp,0xc
c0016ff3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016ff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ffb:	3b 05 50 2b 03 c0    	cmp    eax,DWORD PTR ds:0xc0032b50
c0017001:	89 d1                	mov    ecx,edx
c0017003:	1b 0d 54 2b 03 c0    	sbb    ecx,DWORD PTR ds:0xc0032b54
c0017009:	73 05                	jae    c0017010 <milliTenthSleepUntil(unsigned long long)+0x20>
c001700b:	90                   	nop
c001700c:	83 c4 0c             	add    esp,0xc
c001700f:	c3                   	ret    
c0017010:	fa                   	cli    
c0017011:	8b 0d 30 33 03 c0    	mov    ecx,DWORD PTR ds:0xc0033330
c0017017:	83 ec 08             	sub    esp,0x8
c001701a:	83 c1 01             	add    ecx,0x1
c001701d:	89 0d 30 33 03 c0    	mov    DWORD PTR ds:0xc0033330,ecx
c0017023:	8b 0d 2c 33 03 c0    	mov    ecx,DWORD PTR ds:0xc003332c
c0017029:	83 c1 01             	add    ecx,0x1
c001702c:	89 0d 2c 33 03 c0    	mov    DWORD PTR ds:0xc003332c,ecx
c0017032:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017038:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001703b:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001703e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017043:	50                   	push   eax
c0017044:	68 40 33 03 c0       	push   0xc0033340
c0017049:	e8 f6 07 01 00       	call   c0027844 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001704e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0017055:	e8 16 ff ff ff       	call   c0016f70 <blockTask(TaskState)>
c001705a:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c001705f:	83 c4 10             	add    esp,0x10
c0017062:	83 e8 01             	sub    eax,0x1
c0017065:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c001706a:	85 c0                	test   eax,eax
c001706c:	75 0a                	jne    c0017078 <milliTenthSleepUntil(unsigned long long)+0x88>
c001706e:	8b 15 28 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033328
c0017074:	85 d2                	test   edx,edx
c0017076:	75 18                	jne    c0017090 <milliTenthSleepUntil(unsigned long long)+0xa0>
c0017078:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017080:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017085:	85 c0                	test   eax,eax
c0017087:	75 83                	jne    c001700c <milliTenthSleepUntil(unsigned long long)+0x1c>
c0017089:	fb                   	sti    
c001708a:	83 c4 0c             	add    esp,0xc
c001708d:	c3                   	ret    
c001708e:	66 90                	xchg   ax,ax
c0017090:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c001709a:	e8 11 fe ff ff       	call   c0016eb0 <schedule()>
c001709f:	eb d7                	jmp    c0017078 <milliTenthSleepUntil(unsigned long long)+0x88>
c00170a1:	8d 76 00             	lea    esi,[esi+0x0]

c00170a4 <milliTenthSleep(unsigned long long)>:
c00170a4:	a1 50 2b 03 c0       	mov    eax,ds:0xc0032b50
c00170a9:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00170ad:	8b 15 54 2b 03 c0    	mov    edx,DWORD PTR ds:0xc0032b54
c00170b3:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c00170b7:	e9 34 ff ff ff       	jmp    c0016ff0 <milliTenthSleepUntil(unsigned long long)>

c00170bc <sleep(unsigned long long)>:
c00170bc:	69 4c 24 08 10 27 00 00 	imul   ecx,DWORD PTR [esp+0x8],0x2710
c00170c4:	b8 10 27 00 00       	mov    eax,0x2710
c00170c9:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c00170cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00170d1:	01 ca                	add    edx,ecx
c00170d3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00170d7:	eb cb                	jmp    c00170a4 <milliTenthSleep(unsigned long long)>
c00170d9:	8d 76 00             	lea    esi,[esi+0x0]

c00170dc <sleep(unsigned int)>:
c00170dc:	83 ec 14             	sub    esp,0x14
c00170df:	b8 10 27 00 00       	mov    eax,0x2710
c00170e4:	f7 64 24 18          	mul    DWORD PTR [esp+0x18]
c00170e8:	52                   	push   edx
c00170e9:	50                   	push   eax
c00170ea:	e8 b5 ff ff ff       	call   c00170a4 <milliTenthSleep(unsigned long long)>
c00170ef:	83 c4 1c             	add    esp,0x1c
c00170f2:	c3                   	ret    
c00170f3:	90                   	nop

c00170f4 <milliTenthSleep(unsigned int)>:
c00170f4:	83 ec 14             	sub    esp,0x14
c00170f7:	31 d2                	xor    edx,edx
c00170f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00170fd:	03 05 50 2b 03 c0    	add    eax,DWORD PTR ds:0xc0032b50
c0017103:	13 15 54 2b 03 c0    	adc    edx,DWORD PTR ds:0xc0032b54
c0017109:	52                   	push   edx
c001710a:	50                   	push   eax
c001710b:	e8 e0 fe ff ff       	call   c0016ff0 <milliTenthSleepUntil(unsigned long long)>
c0017110:	83 c4 1c             	add    esp,0x1c
c0017113:	c3                   	ret    

c0017114 <taskReturned>:
c0017114:	83 ec 18             	sub    esp,0x18
c0017117:	68 0c a9 02 c0       	push   0xc002a90c
c001711c:	e8 07 92 ff ff       	call   c0010328 <KePanic(char const*)>
c0017121:	83 c4 10             	add    esp,0x10
c0017124:	83 ec 0c             	sub    esp,0xc
c0017127:	6a 02                	push   0x2
c0017129:	e8 42 fe ff ff       	call   c0016f70 <blockTask(TaskState)>
c001712e:	fa                   	cli    
c001712f:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017134:	83 c0 01             	add    eax,0x1
c0017137:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c001713c:	e8 6f fd ff ff       	call   c0016eb0 <schedule()>
c0017141:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017149:	8b 15 30 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033330
c001714f:	83 c4 10             	add    esp,0x10
c0017152:	85 d2                	test   edx,edx
c0017154:	75 ce                	jne    c0017124 <taskReturned+0x10>
c0017156:	fb                   	sti    
c0017157:	eb cb                	jmp    c0017124 <taskReturned+0x10>
c0017159:	8d 76 00             	lea    esi,[esi+0x0]

c001715c <KeProcessFromPID(int)>:
c001715c:	57                   	push   edi
c001715d:	56                   	push   esi
c001715e:	53                   	push   ebx
c001715f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017163:	fa                   	cli    
c0017164:	8b 0d 30 33 03 c0    	mov    ecx,DWORD PTR ds:0xc0033330
c001716a:	83 ec 0c             	sub    esp,0xc
c001716d:	68 4c 33 03 c0       	push   0xc003334c
c0017172:	83 c1 01             	add    ecx,0x1
c0017175:	89 0d 30 33 03 c0    	mov    DWORD PTR ds:0xc0033330,ecx
c001717b:	e8 00 06 01 00       	call   c0027780 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017180:	83 c4 10             	add    esp,0x10
c0017183:	89 c7                	mov    edi,eax
c0017185:	eb 15                	jmp    c001719c <KeProcessFromPID(int)+0x40>
c0017187:	90                   	nop
c0017188:	83 ec 0c             	sub    esp,0xc
c001718b:	68 4c 33 03 c0       	push   0xc003334c
c0017190:	e8 eb 05 01 00       	call   c0027780 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017195:	83 c4 10             	add    esp,0x10
c0017198:	39 f8                	cmp    eax,edi
c001719a:	74 50                	je     c00171ec <KeProcessFromPID(int)+0x90>
c001719c:	83 ec 0c             	sub    esp,0xc
c001719f:	68 4c 33 03 c0       	push   0xc003334c
c00171a4:	e8 d7 05 01 00       	call   c0027780 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00171a9:	c7 04 24 4c 33 03 c0 	mov    DWORD PTR [esp],0xc003334c
c00171b0:	89 c3                	mov    ebx,eax
c00171b2:	e8 d1 05 01 00       	call   c0027788 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00171b7:	58                   	pop    eax
c00171b8:	5a                   	pop    edx
c00171b9:	53                   	push   ebx
c00171ba:	68 4c 33 03 c0       	push   0xc003334c
c00171bf:	e8 80 06 01 00       	call   c0027844 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00171c4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00171c7:	83 c4 10             	add    esp,0x10
c00171ca:	39 30                	cmp    DWORD PTR [eax],esi
c00171cc:	75 ba                	jne    c0017188 <KeProcessFromPID(int)+0x2c>
c00171ce:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c00171d6:	8b 0d 30 33 03 c0    	mov    ecx,DWORD PTR ds:0xc0033330
c00171dc:	85 c9                	test   ecx,ecx
c00171de:	74 08                	je     c00171e8 <KeProcessFromPID(int)+0x8c>
c00171e0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00171e3:	90                   	nop
c00171e4:	5b                   	pop    ebx
c00171e5:	5e                   	pop    esi
c00171e6:	5f                   	pop    edi
c00171e7:	c3                   	ret    
c00171e8:	fb                   	sti    
c00171e9:	eb f5                	jmp    c00171e0 <KeProcessFromPID(int)+0x84>
c00171eb:	90                   	nop
c00171ec:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c00171f4:	8b 15 30 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033330
c00171fa:	31 c0                	xor    eax,eax
c00171fc:	85 d2                	test   edx,edx
c00171fe:	75 e4                	jne    c00171e4 <KeProcessFromPID(int)+0x88>
c0017200:	fb                   	sti    
c0017201:	5b                   	pop    ebx
c0017202:	5e                   	pop    esi
c0017203:	5f                   	pop    edi
c0017204:	c3                   	ret    
c0017205:	8d 76 00             	lea    esi,[esi+0x0]

c0017208 <unblockTask(ThreadControlBlock*)>:
c0017208:	53                   	push   ebx
c0017209:	83 ec 08             	sub    esp,0x8
c001720c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017210:	fa                   	cli    
c0017211:	8b 15 30 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033330
c0017217:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001721a:	83 c2 01             	add    edx,0x1
c001721d:	89 15 30 33 03 c0    	mov    DWORD PTR ds:0xc0033330,edx
c0017223:	85 c0                	test   eax,eax
c0017225:	74 6d                	je     c0017294 <unblockTask(ThreadControlBlock*)+0x8c>
c0017227:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001722a:	83 f8 01             	cmp    eax,0x1
c001722d:	74 39                	je     c0017268 <unblockTask(ThreadControlBlock*)+0x60>
c001722f:	83 ec 0c             	sub    esp,0xc
c0017232:	68 4c 33 03 c0       	push   0xc003334c
c0017237:	e8 44 05 01 00       	call   c0027780 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001723c:	83 c4 10             	add    esp,0x10
c001723f:	85 c0                	test   eax,eax
c0017241:	75 1d                	jne    c0017260 <unblockTask(ThreadControlBlock*)+0x58>
c0017243:	eb 63                	jmp    c00172a8 <unblockTask(ThreadControlBlock*)+0xa0>
c0017245:	8d 76 00             	lea    esi,[esi+0x0]
c0017248:	83 ec 08             	sub    esp,0x8
c001724b:	50                   	push   eax
c001724c:	68 4c 33 03 c0       	push   0xc003334c
c0017251:	e8 36 0a 01 00       	call   c0027c8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0017256:	83 c4 10             	add    esp,0x10
c0017259:	85 c0                	test   eax,eax
c001725b:	74 4b                	je     c00172a8 <unblockTask(ThreadControlBlock*)+0xa0>
c001725d:	8d 76 00             	lea    esi,[esi+0x0]
c0017260:	39 c3                	cmp    ebx,eax
c0017262:	75 e4                	jne    c0017248 <unblockTask(ThreadControlBlock*)+0x40>
c0017264:	eb 12                	jmp    c0017278 <unblockTask(ThreadControlBlock*)+0x70>
c0017266:	66 90                	xchg   ax,ax
c0017268:	83 ec 0c             	sub    esp,0xc
c001726b:	68 a2 a8 02 c0       	push   0xc002a8a2
c0017270:	e8 f1 fc fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0017275:	83 c4 10             	add    esp,0x10
c0017278:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017280:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017285:	85 c0                	test   eax,eax
c0017287:	75 03                	jne    c001728c <unblockTask(ThreadControlBlock*)+0x84>
c0017289:	fb                   	sti    
c001728a:	66 90                	xchg   ax,ax
c001728c:	83 c4 08             	add    esp,0x8
c001728f:	5b                   	pop    ebx
c0017290:	c3                   	ret    
c0017291:	8d 76 00             	lea    esi,[esi+0x0]
c0017294:	83 ec 0c             	sub    esp,0xc
c0017297:	68 8b a8 02 c0       	push   0xc002a88b
c001729c:	e8 c5 fc fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00172a1:	83 c4 10             	add    esp,0x10
c00172a4:	eb d2                	jmp    c0017278 <unblockTask(ThreadControlBlock*)+0x70>
c00172a6:	66 90                	xchg   ax,ax
c00172a8:	83 ec 08             	sub    esp,0x8
c00172ab:	53                   	push   ebx
c00172ac:	68 4c 33 03 c0       	push   0xc003334c
c00172b1:	e8 8e 05 01 00       	call   c0027844 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00172b6:	83 c4 10             	add    esp,0x10
c00172b9:	eb bd                	jmp    c0017278 <unblockTask(ThreadControlBlock*)+0x70>
c00172bb:	90                   	nop

c00172bc <cleanupTerminatedTask(ThreadControlBlock*)>:
c00172bc:	55                   	push   ebp
c00172bd:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00172c2:	57                   	push   edi
c00172c3:	56                   	push   esi
c00172c4:	53                   	push   ebx
c00172c5:	83 ec 1c             	sub    esp,0x1c
c00172c8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00172cc:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c00172cf:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00172d2:	d3 c0                	rol    eax,cl
c00172d4:	66 8b 8a a4 05 00 00 	mov    cx,WORD PTR [edx+0x5a4]
c00172db:	21 c8                	and    eax,ecx
c00172dd:	66 89 82 a4 05 00 00 	mov    WORD PTR [edx+0x5a4],ax
c00172e4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00172e7:	66 83 b8 a4 05 00 00 00 	cmp    WORD PTR [eax+0x5a4],0x0
c00172ef:	0f 85 af 01 00 00    	jne    c00174a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c00172f5:	8b a8 b6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5b6]
c00172fb:	85 ed                	test   ebp,ebp
c00172fd:	7e 29                	jle    c0017328 <cleanupTerminatedTask(ThreadControlBlock*)+0x6c>
c00172ff:	31 f6                	xor    esi,esi
c0017301:	8d 76 00             	lea    esi,[esi+0x0]
c0017304:	8b bc b0 ba 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x5ba]
c001730b:	83 ec 0c             	sub    esp,0xc
c001730e:	83 c6 01             	add    esi,0x1
c0017311:	57                   	push   edi
c0017312:	e8 cd 8b ff ff       	call   c000fee4 <free>
c0017317:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001731a:	83 c4 10             	add    esp,0x10
c001731d:	39 b0 b6 05 00 00    	cmp    DWORD PTR [eax+0x5b6],esi
c0017323:	7f df                	jg     c0017304 <cleanupTerminatedTask(ThreadControlBlock*)+0x48>
c0017325:	8d 76 00             	lea    esi,[esi+0x0]
c0017328:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0017332:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017335:	8b ae ba 07 00 00    	mov    ebp,DWORD PTR [esi+0x7ba]
c001733b:	89 f7                	mov    edi,esi
c001733d:	85 ed                	test   ebp,ebp
c001733f:	74 1b                	je     c001735c <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0017341:	83 ec 0c             	sub    esp,0xc
c0017344:	55                   	push   ebp
c0017345:	e8 d6 78 ff ff       	call   c000ec20 <EnvVarContainer::~EnvVarContainer()>
c001734a:	59                   	pop    ecx
c001734b:	5e                   	pop    esi
c001734c:	6a 0c                	push   0xc
c001734e:	55                   	push   ebp
c001734f:	e8 80 67 ff ff       	call   c000dad4 <operator delete(void*, unsigned long)>
c0017354:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017357:	83 c4 10             	add    esp,0x10
c001735a:	89 f7                	mov    edi,esi
c001735c:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0017362:	85 c0                	test   eax,eax
c0017364:	0f 84 ae 00 00 00    	je     c0017418 <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c001736a:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001736d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017371:	31 c9                	xor    ecx,ecx
c0017373:	eb 17                	jmp    c001738c <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0017375:	8d 76 00             	lea    esi,[esi+0x0]
c0017378:	83 c1 01             	add    ecx,0x1
c001737b:	83 f9 10             	cmp    ecx,0x10
c001737e:	0f 84 94 00 00 00    	je     c0017418 <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c0017384:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c001738a:	66 90                	xchg   ax,ax
c001738c:	0f b7 90 a4 05 00 00 	movzx  edx,WORD PTR [eax+0x5a4]
c0017393:	d3 fa                	sar    edx,cl
c0017395:	80 e2 01             	and    dl,0x1
c0017398:	74 de                	je     c0017378 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001739a:	6b d1 73             	imul   edx,ecx,0x73
c001739d:	01 d0                	add    eax,edx
c001739f:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00173a5:	83 fd 07             	cmp    ebp,0x7
c00173a8:	75 ce                	jne    c0017378 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00173aa:	05 40 02 00 00       	add    eax,0x240
c00173af:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c00173b2:	83 fd ff             	cmp    ebp,0xffffffff
c00173b5:	0f 8c f1 00 00 00    	jl     c00174ac <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c00173bb:	0f 84 af 01 00 00    	je     c0017570 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b4>
c00173c1:	85 ed                	test   ebp,ebp
c00173c3:	0f 84 93 01 00 00    	je     c001755c <cleanupTerminatedTask(ThreadControlBlock*)+0x2a0>
c00173c9:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00173cb:	75 ab                	jne    c0017378 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00173cd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00173d1:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c00173d7:	01 d0                	add    eax,edx
c00173d9:	8d 76 00             	lea    esi,[esi+0x0]
c00173dc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00173e0:	83 ec 0c             	sub    esp,0xc
c00173e3:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c00173e9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173ec:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c00173f2:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00173f9:	50                   	push   eax
c00173fa:	e8 09 fe ff ff       	call   c0017208 <unblockTask(ThreadControlBlock*)>
c00173ff:	83 c4 10             	add    esp,0x10
c0017402:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017405:	89 f7                	mov    edi,esi
c0017407:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001740b:	83 c1 01             	add    ecx,0x1
c001740e:	83 f9 10             	cmp    ecx,0x10
c0017411:	0f 85 6d ff ff ff    	jne    c0017384 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0017417:	90                   	nop
c0017418:	8b 86 a6 05 00 00    	mov    eax,DWORD PTR [esi+0x5a6]
c001741e:	85 c0                	test   eax,eax
c0017420:	74 62                	je     c0017484 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c0017422:	8b 96 aa 05 00 00    	mov    edx,DWORD PTR [esi+0x5aa]
c0017428:	3b 82 a6 05 00 00    	cmp    eax,DWORD PTR [edx+0x5a6]
c001742e:	74 54                	je     c0017484 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c0017430:	83 ec 0c             	sub    esp,0xc
c0017433:	68 4c 33 03 c0       	push   0xc003334c
c0017438:	e8 43 03 01 00       	call   c0027780 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001743d:	c7 04 24 4c 33 03 c0 	mov    DWORD PTR [esp],0xc003334c
c0017444:	89 c7                	mov    edi,eax
c0017446:	e8 19 03 01 00       	call   c0027764 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001744b:	83 c4 10             	add    esp,0x10
c001744e:	84 c0                	test   al,al
c0017450:	0f 84 ce 00 00 00    	je     c0017524 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c0017456:	66 90                	xchg   ax,ax
c0017458:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001745b:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0017461:	85 d2                	test   edx,edx
c0017463:	74 0f                	je     c0017474 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c0017465:	8b 02                	mov    eax,DWORD PTR [edx]
c0017467:	83 ec 0c             	sub    esp,0xc
c001746a:	52                   	push   edx
c001746b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001746e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017471:	83 c4 10             	add    esp,0x10
c0017474:	c7 80 a6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5a6],0x0
c001747e:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0017481:	8d 76 00             	lea    esi,[esi+0x0]
c0017484:	8b 9f b2 05 00 00    	mov    ebx,DWORD PTR [edi+0x5b2]
c001748a:	85 db                	test   ebx,ebx
c001748c:	74 16                	je     c00174a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c001748e:	83 ec 0c             	sub    esp,0xc
c0017491:	53                   	push   ebx
c0017492:	e8 49 c9 ff ff       	call   c0013de0 <VAS::~VAS()>
c0017497:	58                   	pop    eax
c0017498:	5a                   	pop    edx
c0017499:	6a 14                	push   0x14
c001749b:	53                   	push   ebx
c001749c:	e8 33 66 ff ff       	call   c000dad4 <operator delete(void*, unsigned long)>
c00174a1:	83 c4 10             	add    esp,0x10
c00174a4:	83 c4 1c             	add    esp,0x1c
c00174a7:	5b                   	pop    ebx
c00174a8:	5e                   	pop    esi
c00174a9:	5f                   	pop    edi
c00174aa:	5d                   	pop    ebp
c00174ab:	c3                   	ret    
c00174ac:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00174b0:	83 ec 0c             	sub    esp,0xc
c00174b3:	68 40 a9 02 c0       	push   0xc002a940
c00174b8:	e8 6b 8e ff ff       	call   c0010328 <KePanic(char const*)>
c00174bd:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00174c0:	83 c4 10             	add    esp,0x10
c00174c3:	89 f7                	mov    edi,esi
c00174c5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00174c9:	e9 aa fe ff ff       	jmp    c0017378 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00174ce:	66 90                	xchg   ax,ax
c00174d0:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00174d6:	39 82 a6 05 00 00    	cmp    DWORD PTR [edx+0x5a6],eax
c00174dc:	75 1e                	jne    c00174fc <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c00174de:	83 ec 0c             	sub    esp,0xc
c00174e1:	68 a8 a9 02 c0       	push   0xc002a9a8
c00174e6:	e8 7b fa fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00174eb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00174f2:	e8 79 fa ff ff       	call   c0016f70 <blockTask(TaskState)>
c00174f7:	83 c4 10             	add    esp,0x10
c00174fa:	66 90                	xchg   ax,ax
c00174fc:	83 ec 08             	sub    esp,0x8
c00174ff:	56                   	push   esi
c0017500:	68 4c 33 03 c0       	push   0xc003334c
c0017505:	e8 3a 03 01 00       	call   c0027844 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001750a:	c7 04 24 4c 33 03 c0 	mov    DWORD PTR [esp],0xc003334c
c0017511:	e8 6a 02 01 00       	call   c0027780 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017516:	83 c4 10             	add    esp,0x10
c0017519:	39 f8                	cmp    eax,edi
c001751b:	0f 84 37 ff ff ff    	je     c0017458 <cleanupTerminatedTask(ThreadControlBlock*)+0x19c>
c0017521:	8d 76 00             	lea    esi,[esi+0x0]
c0017524:	83 ec 0c             	sub    esp,0xc
c0017527:	68 4c 33 03 c0       	push   0xc003334c
c001752c:	e8 4f 02 01 00       	call   c0027780 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017531:	c7 04 24 4c 33 03 c0 	mov    DWORD PTR [esp],0xc003334c
c0017538:	89 c6                	mov    esi,eax
c001753a:	e8 49 02 01 00       	call   c0027788 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001753f:	83 c4 10             	add    esp,0x10
c0017542:	39 f3                	cmp    ebx,esi
c0017544:	74 b6                	je     c00174fc <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c0017546:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0017549:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001754c:	39 82 aa 05 00 00    	cmp    DWORD PTR [edx+0x5aa],eax
c0017552:	75 a8                	jne    c00174fc <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c0017554:	e9 77 ff ff ff       	jmp    c00174d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x214>
c0017559:	8d 76 00             	lea    esi,[esi+0x0]
c001755c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017560:	83 ec 0c             	sub    esp,0xc
c0017563:	68 74 a9 02 c0       	push   0xc002a974
c0017568:	e9 4b ff ff ff       	jmp    c00174b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1fc>
c001756d:	8d 76 00             	lea    esi,[esi+0x0]
c0017570:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017574:	8b 36                	mov    esi,DWORD PTR [esi]
c0017576:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0017579:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001757c:	8b b8 aa 05 00 00    	mov    edi,DWORD PTR [eax+0x5aa]
c0017582:	01 d7                	add    edi,edx
c0017584:	89 f8                	mov    eax,edi
c0017586:	e9 51 fe ff ff       	jmp    c00173dc <cleanupTerminatedTask(ThreadControlBlock*)+0x120>
c001758b:	90                   	nop

c001758c <cleanerTaskFunction(void*)>:
c001758c:	53                   	push   ebx
c001758d:	83 ec 08             	sub    esp,0x8
c0017590:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017598:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c001759d:	85 c0                	test   eax,eax
c001759f:	75 03                	jne    c00175a4 <cleanerTaskFunction(void*)+0x18>
c00175a1:	fb                   	sti    
c00175a2:	66 90                	xchg   ax,ax
c00175a4:	fa                   	cli    
c00175a5:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00175aa:	83 c0 01             	add    eax,0x1
c00175ad:	80 3d 14 33 03 c0 00 	cmp    BYTE PTR ds:0xc0033314,0x0
c00175b4:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c00175b9:	0f 85 c9 00 00 00    	jne    c0017688 <cleanerTaskFunction(void*)+0xfc>
c00175bf:	83 ec 0c             	sub    esp,0xc
c00175c2:	6a 02                	push   0x2
c00175c4:	e8 7b f9 ff ff       	call   c0016f44 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00175c9:	83 c4 10             	add    esp,0x10
c00175cc:	c6 05 14 33 03 c0 00 	mov    BYTE PTR ds:0xc0033314,0x0
c00175d3:	fa                   	cli    
c00175d4:	8b 0d 30 33 03 c0    	mov    ecx,DWORD PTR ds:0xc0033330
c00175da:	8b 1d 2c 33 03 c0    	mov    ebx,DWORD PTR ds:0xc003332c
c00175e0:	83 c1 01             	add    ecx,0x1
c00175e3:	89 0d 30 33 03 c0    	mov    DWORD PTR ds:0xc0033330,ecx
c00175e9:	83 c3 01             	add    ebx,0x1
c00175ec:	89 1d 2c 33 03 c0    	mov    DWORD PTR ds:0xc003332c,ebx
c00175f2:	fa                   	cli    
c00175f3:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00175f8:	83 c0 01             	add    eax,0x1
c00175fb:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0017600:	eb 2a                	jmp    c001762c <cleanerTaskFunction(void*)+0xa0>
c0017602:	66 90                	xchg   ax,ax
c0017604:	83 ec 0c             	sub    esp,0xc
c0017607:	68 34 33 03 c0       	push   0xc0033334
c001760c:	e8 6f 01 01 00       	call   c0027780 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017611:	c7 04 24 34 33 03 c0 	mov    DWORD PTR [esp],0xc0033334
c0017618:	89 c3                	mov    ebx,eax
c001761a:	e8 69 01 01 00       	call   c0027788 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001761f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017622:	e8 95 fc ff ff       	call   c00172bc <cleanupTerminatedTask(ThreadControlBlock*)>
c0017627:	83 c4 10             	add    esp,0x10
c001762a:	66 90                	xchg   ax,ax
c001762c:	83 ec 0c             	sub    esp,0xc
c001762f:	68 34 33 03 c0       	push   0xc0033334
c0017634:	e8 2b 01 01 00       	call   c0027764 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017639:	83 c4 10             	add    esp,0x10
c001763c:	84 c0                	test   al,al
c001763e:	74 c4                	je     c0017604 <cleanerTaskFunction(void*)+0x78>
c0017640:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017648:	8b 15 30 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033330
c001764e:	85 d2                	test   edx,edx
c0017650:	75 02                	jne    c0017654 <cleanerTaskFunction(void*)+0xc8>
c0017652:	fb                   	sti    
c0017653:	90                   	nop
c0017654:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c0017659:	83 e8 01             	sub    eax,0x1
c001765c:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c0017661:	0f 85 29 ff ff ff    	jne    c0017590 <cleanerTaskFunction(void*)+0x4>
c0017667:	a1 28 33 03 c0       	mov    eax,ds:0xc0033328
c001766c:	85 c0                	test   eax,eax
c001766e:	0f 84 1c ff ff ff    	je     c0017590 <cleanerTaskFunction(void*)+0x4>
c0017674:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c001767e:	e8 2d f8 ff ff       	call   c0016eb0 <schedule()>
c0017683:	e9 08 ff ff ff       	jmp    c0017590 <cleanerTaskFunction(void*)+0x4>
c0017688:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017690:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017695:	85 c0                	test   eax,eax
c0017697:	0f 85 2f ff ff ff    	jne    c00175cc <cleanerTaskFunction(void*)+0x40>
c001769d:	fb                   	sti    
c001769e:	e9 29 ff ff ff       	jmp    c00175cc <cleanerTaskFunction(void*)+0x40>
c00176a3:	90                   	nop

c00176a4 <KeTerminateCurrentThread(int)>:
c00176a4:	83 ec 14             	sub    esp,0x14
c00176a7:	fa                   	cli    
c00176a8:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00176ad:	83 c0 01             	add    eax,0x1
c00176b0:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c00176b5:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c00176ba:	83 c0 01             	add    eax,0x1
c00176bd:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c00176c2:	fa                   	cli    
c00176c3:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00176c8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00176cc:	83 c0 01             	add    eax,0x1
c00176cf:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c00176d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00176d9:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c00176dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00176e1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00176e4:	50                   	push   eax
c00176e5:	68 34 33 03 c0       	push   0xc0033334
c00176ea:	e8 55 01 01 00       	call   c0027844 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00176ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00176f4:	83 c4 10             	add    esp,0x10
c00176f7:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00176fe:	a1 10 33 03 c0       	mov    eax,ds:0xc0033310
c0017703:	85 c0                	test   eax,eax
c0017705:	0f 84 81 00 00 00    	je     c001778c <KeTerminateCurrentThread(int)+0xe8>
c001770b:	c6 05 14 33 03 c0 01 	mov    BYTE PTR ds:0xc0033314,0x1
c0017712:	83 ec 0c             	sub    esp,0xc
c0017715:	50                   	push   eax
c0017716:	e8 ed fa ff ff       	call   c0017208 <unblockTask(ThreadControlBlock*)>
c001771b:	83 c4 10             	add    esp,0x10
c001771e:	66 90                	xchg   ax,ax
c0017720:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017728:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c001772d:	85 c0                	test   eax,eax
c001772f:	75 03                	jne    c0017734 <KeTerminateCurrentThread(int)+0x90>
c0017731:	fb                   	sti    
c0017732:	66 90                	xchg   ax,ax
c0017734:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c0017739:	83 e8 01             	sub    eax,0x1
c001773c:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c0017741:	75 09                	jne    c001774c <KeTerminateCurrentThread(int)+0xa8>
c0017743:	83 3d 28 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033328,0x0
c001774a:	75 54                	jne    c00177a0 <KeTerminateCurrentThread(int)+0xfc>
c001774c:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017754:	8b 0d 30 33 03 c0    	mov    ecx,DWORD PTR ds:0xc0033330
c001775a:	85 c9                	test   ecx,ecx
c001775c:	75 06                	jne    c0017764 <KeTerminateCurrentThread(int)+0xc0>
c001775e:	66 90                	xchg   ax,ax
c0017760:	fb                   	sti    
c0017761:	8d 76 00             	lea    esi,[esi+0x0]
c0017764:	fa                   	cli    
c0017765:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c001776a:	83 c0 01             	add    eax,0x1
c001776d:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0017772:	e8 39 f7 ff ff       	call   c0016eb0 <schedule()>
c0017777:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c001777f:	8b 15 30 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033330
c0017785:	85 d2                	test   edx,edx
c0017787:	75 db                	jne    c0017764 <KeTerminateCurrentThread(int)+0xc0>
c0017789:	eb d5                	jmp    c0017760 <KeTerminateCurrentThread(int)+0xbc>
c001778b:	90                   	nop
c001778c:	83 ec 0c             	sub    esp,0xc
c001778f:	68 b9 a8 02 c0       	push   0xc002a8b9
c0017794:	e8 cd f7 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0017799:	83 c4 10             	add    esp,0x10
c001779c:	eb 82                	jmp    c0017720 <KeTerminateCurrentThread(int)+0x7c>
c001779e:	66 90                	xchg   ax,ax
c00177a0:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c00177aa:	e8 01 f7 ff ff       	call   c0016eb0 <schedule()>
c00177af:	eb 9b                	jmp    c001774c <KeTerminateCurrentThread(int)+0xa8>
c00177b1:	8d 76 00             	lea    esi,[esi+0x0]

c00177b4 <__static_initialization_and_destruction_0(int, int)>:
c00177b4:	83 ec 0c             	sub    esp,0xc
c00177b7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00177bc:	0f 85 8e 00 00 00    	jne    c0017850 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00177c2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00177ca:	0f 85 80 00 00 00    	jne    c0017850 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00177d0:	83 ec 0c             	sub    esp,0xc
c00177d3:	68 4c 33 03 c0       	push   0xc003334c
c00177d8:	e8 07 05 01 00       	call   c0027ce4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00177dd:	83 c4 10             	add    esp,0x10
c00177e0:	83 ec 04             	sub    esp,0x4
c00177e3:	68 40 cc 02 c0       	push   0xc002cc40
c00177e8:	68 4c 33 03 c0       	push   0xc003334c
c00177ed:	68 94 7c 02 c0       	push   0xc0027c94
c00177f2:	e8 8d 62 ff ff       	call   c000da84 <__cxa_atexit>
c00177f7:	83 c4 10             	add    esp,0x10
c00177fa:	83 ec 0c             	sub    esp,0xc
c00177fd:	68 40 33 03 c0       	push   0xc0033340
c0017802:	e8 dd 04 01 00       	call   c0027ce4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017807:	83 c4 10             	add    esp,0x10
c001780a:	83 ec 04             	sub    esp,0x4
c001780d:	68 40 cc 02 c0       	push   0xc002cc40
c0017812:	68 40 33 03 c0       	push   0xc0033340
c0017817:	68 94 7c 02 c0       	push   0xc0027c94
c001781c:	e8 63 62 ff ff       	call   c000da84 <__cxa_atexit>
c0017821:	83 c4 10             	add    esp,0x10
c0017824:	83 ec 0c             	sub    esp,0xc
c0017827:	68 34 33 03 c0       	push   0xc0033334
c001782c:	e8 b3 04 01 00       	call   c0027ce4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017831:	83 c4 10             	add    esp,0x10
c0017834:	83 ec 04             	sub    esp,0x4
c0017837:	68 40 cc 02 c0       	push   0xc002cc40
c001783c:	68 34 33 03 c0       	push   0xc0033334
c0017841:	68 94 7c 02 c0       	push   0xc0027c94
c0017846:	e8 39 62 ff ff       	call   c000da84 <__cxa_atexit>
c001784b:	83 c4 10             	add    esp,0x10
c001784e:	66 90                	xchg   ax,ax
c0017850:	90                   	nop
c0017851:	83 c4 0c             	add    esp,0xc
c0017854:	c3                   	ret    
c0017855:	8d 76 00             	lea    esi,[esi+0x0]

c0017858 <_GLOBAL__sub_I_keNextPID>:
c0017858:	83 ec 0c             	sub    esp,0xc
c001785b:	83 ec 08             	sub    esp,0x8
c001785e:	68 ff ff 00 00       	push   0xffff
c0017863:	6a 01                	push   0x1
c0017865:	e8 4a ff ff ff       	call   c00177b4 <__static_initialization_and_destruction_0(int, int)>
c001786a:	83 c4 10             	add    esp,0x10
c001786d:	83 c4 0c             	add    esp,0xc
c0017870:	c3                   	ret    

c0017871 <Vm::inbv(unsigned short)>:
c0017871:	55                   	push   ebp
c0017872:	89 e5                	mov    ebp,esp
c0017874:	83 ec 14             	sub    esp,0x14
c0017877:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001787a:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
c001787e:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017882:	3d fe fe 00 00       	cmp    eax,0xfefe
c0017887:	75 07                	jne    c0017890 <Vm::inbv(unsigned short)+0x1f>
c0017889:	a1 90 33 03 c0       	mov    eax,ds:0xc0033390
c001788e:	eb 16                	jmp    c00178a6 <Vm::inbv(unsigned short)+0x35>
c0017890:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017894:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017898:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001789c:	89 c2                	mov    edx,eax
c001789e:	ec                   	in     al,dx
c001789f:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00178a2:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00178a5:	90                   	nop
c00178a6:	c9                   	leave  
c00178a7:	c3                   	ret    

c00178a8 <Vm::outbv(unsigned short, unsigned char)>:
c00178a8:	55                   	push   ebp
c00178a9:	89 e5                	mov    ebp,esp
c00178ab:	83 ec 18             	sub    esp,0x18
c00178ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178b1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00178b4:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
c00178b8:	88 d0                	mov    al,dl
c00178ba:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c00178bd:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c00178c1:	3d fe fe 00 00       	cmp    eax,0xfefe
c00178c6:	75 2d                	jne    c00178f5 <Vm::outbv(unsigned short, unsigned char)+0x4d>
c00178c8:	a1 90 33 03 c0       	mov    eax,ds:0xc0033390
c00178cd:	8d 50 01             	lea    edx,[eax+0x1]
c00178d0:	89 15 90 33 03 c0    	mov    DWORD PTR ds:0xc0033390,edx
c00178d6:	8a 55 e8             	mov    dl,BYTE PTR [ebp-0x18]
c00178d9:	88 90 a0 33 03 c0    	mov    BYTE PTR [eax-0x3ffccc60],dl
c00178df:	a1 90 33 03 c0       	mov    eax,ds:0xc0033390
c00178e4:	83 f8 20             	cmp    eax,0x20
c00178e7:	75 23                	jne    c001790c <Vm::outbv(unsigned short, unsigned char)+0x64>
c00178e9:	c7 05 90 33 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0033390,0x1f
c00178f3:	eb 17                	jmp    c001790c <Vm::outbv(unsigned short, unsigned char)+0x64>
c00178f5:	0f b6 55 e8          	movzx  edx,BYTE PTR [ebp-0x18]
c00178f9:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c00178fd:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017901:	88 55 fd             	mov    BYTE PTR [ebp-0x3],dl
c0017904:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0017907:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001790b:	ee                   	out    dx,al
c001790c:	90                   	nop
c001790d:	c9                   	leave  
c001790e:	c3                   	ret    

c001790f <Vm::realToLinear(unsigned short, unsigned short)>:
c001790f:	55                   	push   ebp
c0017910:	89 e5                	mov    ebp,esp
c0017912:	83 ec 08             	sub    esp,0x8
c0017915:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0017918:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001791b:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
c001791f:	66 89 45 f8          	mov    WORD PTR [ebp-0x8],ax
c0017923:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
c0017927:	c1 e0 04             	shl    eax,0x4
c001792a:	89 c2                	mov    edx,eax
c001792c:	0f b7 45 f8          	movzx  eax,WORD PTR [ebp-0x8]
c0017930:	01 d0                	add    eax,edx
c0017932:	c9                   	leave  
c0017933:	c3                   	ret    

c0017934 <Vm::getSegment(unsigned int)>:
c0017934:	55                   	push   ebp
c0017935:	89 e5                	mov    ebp,esp
c0017937:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001793a:	c1 e8 10             	shr    eax,0x10
c001793d:	5d                   	pop    ebp
c001793e:	c3                   	ret    

c001793f <Vm::getOffset(unsigned int)>:
c001793f:	55                   	push   ebp
c0017940:	89 e5                	mov    ebp,esp
c0017942:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017945:	5d                   	pop    ebp
c0017946:	c3                   	ret    

c0017947 <Vm::mainloop2()>:
c0017947:	55                   	push   ebp
c0017948:	89 e5                	mov    ebp,esp
c001794a:	53                   	push   ebx
c001794b:	83 ec 04             	sub    esp,0x4
c001794e:	fa                   	cli    
c001794f:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017954:	83 c0 01             	add    eax,0x1
c0017957:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c001795c:	c6 05 89 33 03 c0 01 	mov    BYTE PTR ds:0xc0033389,0x1
c0017963:	83 ec 0c             	sub    esp,0xc
c0017966:	6a 02                	push   0x2
c0017968:	e8 d7 f5 ff ff       	call   c0016f44 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001796d:	83 c4 10             	add    esp,0x10
c0017970:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017975:	8b 00                	mov    eax,DWORD PTR [eax]
c0017977:	66 8b 40 5f          	mov    ax,WORD PTR [eax+0x5f]
c001797b:	0f b7 d8             	movzx  ebx,ax
c001797e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017983:	8b 00                	mov    eax,DWORD PTR [eax]
c0017985:	66 8b 40 5d          	mov    ax,WORD PTR [eax+0x5d]
c0017989:	0f b7 c8             	movzx  ecx,ax
c001798c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017991:	8b 00                	mov    eax,DWORD PTR [eax]
c0017993:	66 8b 40 5b          	mov    ax,WORD PTR [eax+0x5b]
c0017997:	0f b7 d0             	movzx  edx,ax
c001799a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001799f:	8b 00                	mov    eax,DWORD PTR [eax]
c00179a1:	66 8b 40 59          	mov    ax,WORD PTR [eax+0x59]
c00179a5:	0f b7 c0             	movzx  eax,ax
c00179a8:	53                   	push   ebx
c00179a9:	51                   	push   ecx
c00179aa:	52                   	push   edx
c00179ab:	50                   	push   eax
c00179ac:	e8 5e 88 fe ff       	call   c000020f <goToVM86>
c00179b1:	83 c4 10             	add    esp,0x10
c00179b4:	90                   	nop
c00179b5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00179b8:	c9                   	leave  
c00179b9:	c3                   	ret    

c00179ba <Vm::mainVm8086Loop(void*)>:
c00179ba:	55                   	push   ebp
c00179bb:	89 e5                	mov    ebp,esp
c00179bd:	83 ec 08             	sub    esp,0x8
c00179c0:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c00179c8:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00179cd:	85 c0                	test   eax,eax
c00179cf:	75 01                	jne    c00179d2 <Vm::mainVm8086Loop(void*)+0x18>
c00179d1:	fb                   	sti    
c00179d2:	e8 70 ff ff ff       	call   c0017947 <Vm::mainloop2()>
c00179d7:	90                   	nop
c00179d8:	c9                   	leave  
c00179d9:	c3                   	ret    

c00179da <Vm::mainloop3(unsigned long)>:
c00179da:	55                   	push   ebp
c00179db:	89 e5                	mov    ebp,esp
c00179dd:	83 ec 08             	sub    esp,0x8
c00179e0:	fa                   	cli    
c00179e1:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00179e6:	83 c0 01             	add    eax,0x1
c00179e9:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c00179ee:	c6 05 88 33 03 c0 01 	mov    BYTE PTR ds:0xc0033388,0x1
c00179f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179f8:	a3 84 33 03 c0       	mov    ds:0xc0033384,eax
c00179fd:	83 ec 0c             	sub    esp,0xc
c0017a00:	6a 02                	push   0x2
c0017a02:	e8 3d f5 ff ff       	call   c0016f44 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017a07:	83 c4 10             	add    esp,0x10
c0017a0a:	e8 38 ff ff ff       	call   c0017947 <Vm::mainloop2()>
c0017a0f:	90                   	nop
c0017a10:	c9                   	leave  
c0017a11:	c3                   	ret    

c0017a12 <Vm::initialise8086()>:
c0017a12:	55                   	push   ebp
c0017a13:	89 e5                	mov    ebp,esp
c0017a15:	83 ec 08             	sub    esp,0x8
c0017a18:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c0017a1d:	68 80 00 00 00       	push   0x80
c0017a22:	6a 00                	push   0x0
c0017a24:	68 ba 79 01 c0       	push   0xc00179ba
c0017a29:	50                   	push   eax
c0017a2a:	e8 cd f1 ff ff       	call   c0016bfc <Process::createThread(void (*)(void*), void*, int)>
c0017a2f:	83 c4 10             	add    esp,0x10
c0017a32:	a3 8c 33 03 c0       	mov    ds:0xc003338c,eax
c0017a37:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c0017a3c:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0017a42:	83 ec 0c             	sub    esp,0xc
c0017a45:	6a 07                	push   0x7
c0017a47:	68 10 01 00 00       	push   0x110
c0017a4c:	6a 00                	push   0x0
c0017a4e:	6a 00                	push   0x0
c0017a50:	50                   	push   eax
c0017a51:	e8 ec c6 ff ff       	call   c0014142 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017a56:	83 c4 20             	add    esp,0x20
c0017a59:	90                   	nop
c0017a5a:	c9                   	leave  
c0017a5b:	c3                   	ret    

c0017a5c <Vm::finish8086()>:
c0017a5c:	55                   	push   ebp
c0017a5d:	89 e5                	mov    ebp,esp
c0017a5f:	83 ec 18             	sub    esp,0x18
c0017a62:	fa                   	cli    
c0017a63:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017a68:	83 c0 01             	add    eax,0x1
c0017a6b:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0017a70:	a0 88 33 03 c0       	mov    al,ds:0xc0033388
c0017a75:	0f b6 c0             	movzx  eax,al
c0017a78:	85 c0                	test   eax,eax
c0017a7a:	75 19                	jne    c0017a95 <Vm::finish8086()+0x39>
c0017a7c:	e8 2f f4 ff ff       	call   c0016eb0 <schedule()>
c0017a81:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017a89:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017a8e:	85 c0                	test   eax,eax
c0017a90:	75 d0                	jne    c0017a62 <Vm::finish8086()+0x6>
c0017a92:	fb                   	sti    
c0017a93:	eb cd                	jmp    c0017a62 <Vm::finish8086()+0x6>
c0017a95:	90                   	nop
c0017a96:	a1 84 33 03 c0       	mov    eax,ds:0xc0033384
c0017a9b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017a9e:	c6 05 88 33 03 c0 00 	mov    BYTE PTR ds:0xc0033388,0x0
c0017aa5:	a1 8c 33 03 c0       	mov    eax,ds:0xc003338c
c0017aaa:	83 ec 0c             	sub    esp,0xc
c0017aad:	50                   	push   eax
c0017aae:	e8 55 f7 ff ff       	call   c0017208 <unblockTask(ThreadControlBlock*)>
c0017ab3:	83 c4 10             	add    esp,0x10
c0017ab6:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017abe:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017ac3:	85 c0                	test   eax,eax
c0017ac5:	75 01                	jne    c0017ac8 <Vm::finish8086()+0x6c>
c0017ac7:	fb                   	sti    
c0017ac8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017acb:	c9                   	leave  
c0017acc:	c3                   	ret    

c0017acd <Vm::getOutput8086(unsigned char*)>:
c0017acd:	55                   	push   ebp
c0017ace:	89 e5                	mov    ebp,esp
c0017ad0:	57                   	push   edi
c0017ad1:	56                   	push   esi
c0017ad2:	53                   	push   ebx
c0017ad3:	83 ec 20             	sub    esp,0x20
c0017ad6:	a1 90 33 03 c0       	mov    eax,ds:0xc0033390
c0017adb:	89 c2                	mov    edx,eax
c0017add:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ae0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0017ae3:	c7 45 e8 a0 33 03 c0 	mov    DWORD PTR [ebp-0x18],0xc00333a0
c0017aea:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0017aed:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0017af0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0017af3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0017af6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0017af9:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0017afc:	89 c6                	mov    esi,eax
c0017afe:	89 d7                	mov    edi,edx
c0017b00:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017b02:	89 c8                	mov    eax,ecx
c0017b04:	89 fa                	mov    edx,edi
c0017b06:	89 f3                	mov    ebx,esi
c0017b08:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
c0017b0b:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0017b0e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0017b11:	a1 90 33 03 c0       	mov    eax,ds:0xc0033390
c0017b16:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0017b19:	c7 05 90 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033390,0x0
c0017b23:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0017b26:	83 c4 20             	add    esp,0x20
c0017b29:	5b                   	pop    ebx
c0017b2a:	5e                   	pop    esi
c0017b2b:	5f                   	pop    edi
c0017b2c:	5d                   	pop    ebp
c0017b2d:	c3                   	ret    

c0017b2e <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017b2e:	55                   	push   ebp
c0017b2f:	89 e5                	mov    ebp,esp
c0017b31:	57                   	push   edi
c0017b32:	56                   	push   esi
c0017b33:	53                   	push   ebx
c0017b34:	83 ec 3c             	sub    esp,0x3c
c0017b37:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0017b3a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0017b3d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0017b40:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0017b43:	66 89 5d c4          	mov    WORD PTR [ebp-0x3c],bx
c0017b47:	66 89 4d c0          	mov    WORD PTR [ebp-0x40],cx
c0017b4b:	66 89 55 bc          	mov    WORD PTR [ebp-0x44],dx
c0017b4f:	66 89 45 b8          	mov    WORD PTR [ebp-0x48],ax
c0017b53:	a0 80 33 03 c0       	mov    al,ds:0xc0033380
c0017b58:	83 f0 01             	xor    eax,0x1
c0017b5b:	0f b6 c0             	movzx  eax,al
c0017b5e:	85 c0                	test   eax,eax
c0017b60:	74 07                	je     c0017b69 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c0017b62:	c6 05 80 33 03 c0 01 	mov    BYTE PTR ds:0xc0033380,0x1
c0017b69:	fa                   	cli    
c0017b6a:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017b6f:	83 c0 01             	add    eax,0x1
c0017b72:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0017b77:	a0 89 33 03 c0       	mov    al,ds:0xc0033389
c0017b7c:	0f b6 c0             	movzx  eax,al
c0017b7f:	85 c0                	test   eax,eax
c0017b81:	75 19                	jne    c0017b9c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x6e>
c0017b83:	e8 28 f3 ff ff       	call   c0016eb0 <schedule()>
c0017b88:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017b90:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017b95:	85 c0                	test   eax,eax
c0017b97:	75 d0                	jne    c0017b69 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c0017b99:	fb                   	sti    
c0017b9a:	eb cd                	jmp    c0017b69 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c0017b9c:	90                   	nop
c0017b9d:	a1 8c 33 03 c0       	mov    eax,ds:0xc003338c
c0017ba2:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0017ba5:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0017ba9:	a1 8c 33 03 c0       	mov    eax,ds:0xc003338c
c0017bae:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c0017bb1:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0017bb5:	a1 8c 33 03 c0       	mov    eax,ds:0xc003338c
c0017bba:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0017bbd:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0017bc1:	a1 8c 33 03 c0       	mov    eax,ds:0xc003338c
c0017bc6:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
c0017bc9:	66 89 50 5f          	mov    WORD PTR [eax+0x5f],dx
c0017bcd:	a1 8c 33 03 c0       	mov    eax,ds:0xc003338c
c0017bd2:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017bd6:	c7 05 90 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033390,0x0
c0017be0:	83 ec 04             	sub    esp,0x4
c0017be3:	6a 20                	push   0x20
c0017be5:	6a 00                	push   0x0
c0017be7:	68 a0 33 03 c0       	push   0xc00333a0
c0017bec:	e8 ff 88 fe ff       	call   c00004f0 <memset>
c0017bf1:	83 c4 10             	add    esp,0x10
c0017bf4:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0017bf7:	0f b7 55 c4          	movzx  edx,WORD PTR [ebp-0x3c]
c0017bfb:	0f b7 45 c0          	movzx  eax,WORD PTR [ebp-0x40]
c0017bff:	83 ec 08             	sub    esp,0x8
c0017c02:	52                   	push   edx
c0017c03:	50                   	push   eax
c0017c04:	e8 06 fd ff ff       	call   c001790f <Vm::realToLinear(unsigned short, unsigned short)>
c0017c09:	83 c4 10             	add    esp,0x10
c0017c0c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0017c0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c12:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0017c15:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
c0017c18:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017c1b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0017c1e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0017c21:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0017c24:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0017c27:	89 c6                	mov    esi,eax
c0017c29:	89 d7                	mov    edi,edx
c0017c2b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017c2d:	89 c8                	mov    eax,ecx
c0017c2f:	89 fa                	mov    edx,edi
c0017c31:	89 f3                	mov    ebx,esi
c0017c33:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0017c36:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0017c39:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0017c3c:	c6 05 89 33 03 c0 00 	mov    BYTE PTR ds:0xc0033389,0x0
c0017c43:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017c4b:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017c50:	85 c0                	test   eax,eax
c0017c52:	75 01                	jne    c0017c55 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x127>
c0017c54:	fb                   	sti    
c0017c55:	a1 8c 33 03 c0       	mov    eax,ds:0xc003338c
c0017c5a:	83 ec 0c             	sub    esp,0xc
c0017c5d:	50                   	push   eax
c0017c5e:	e8 a5 f5 ff ff       	call   c0017208 <unblockTask(ThreadControlBlock*)>
c0017c63:	83 c4 10             	add    esp,0x10
c0017c66:	b0 01                	mov    al,0x1
c0017c68:	8d 65 f4             	lea    esp,[ebp-0xc]
c0017c6b:	5b                   	pop    ebx
c0017c6c:	5e                   	pop    esi
c0017c6d:	5f                   	pop    edi
c0017c6e:	5d                   	pop    ebp
c0017c6f:	c3                   	ret    

c0017c70 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017c70:	55                   	push   ebp
c0017c71:	89 e5                	mov    ebp,esp
c0017c73:	56                   	push   esi
c0017c74:	53                   	push   ebx
c0017c75:	83 ec 30             	sub    esp,0x30
c0017c78:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0017c7b:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0017c7e:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0017c81:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017c84:	66 89 5d d4          	mov    WORD PTR [ebp-0x2c],bx
c0017c88:	66 89 4d d0          	mov    WORD PTR [ebp-0x30],cx
c0017c8c:	66 89 55 cc          	mov    WORD PTR [ebp-0x34],dx
c0017c90:	66 89 45 c8          	mov    WORD PTR [ebp-0x38],ax
c0017c94:	a0 80 33 03 c0       	mov    al,ds:0xc0033380
c0017c99:	83 f0 01             	xor    eax,0x1
c0017c9c:	0f b6 c0             	movzx  eax,al
c0017c9f:	85 c0                	test   eax,eax
c0017ca1:	74 07                	je     c0017caa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x3a>
c0017ca3:	c6 05 80 33 03 c0 01 	mov    BYTE PTR ds:0xc0033380,0x1
c0017caa:	83 ec 08             	sub    esp,0x8
c0017cad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017cb0:	68 d0 a9 02 c0       	push   0xc002a9d0
c0017cb5:	e8 ac f2 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0017cba:	83 c4 10             	add    esp,0x10
c0017cbd:	fa                   	cli    
c0017cbe:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017cc3:	83 c0 01             	add    eax,0x1
c0017cc6:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0017ccb:	a0 89 33 03 c0       	mov    al,ds:0xc0033389
c0017cd0:	0f b6 c0             	movzx  eax,al
c0017cd3:	85 c0                	test   eax,eax
c0017cd5:	75 19                	jne    c0017cf0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x80>
c0017cd7:	e8 d4 f1 ff ff       	call   c0016eb0 <schedule()>
c0017cdc:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017ce4:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017ce9:	85 c0                	test   eax,eax
c0017ceb:	75 d0                	jne    c0017cbd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x4d>
c0017ced:	fb                   	sti    
c0017cee:	eb cd                	jmp    c0017cbd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x4d>
c0017cf0:	90                   	nop
c0017cf1:	a1 8c 33 03 c0       	mov    eax,ds:0xc003338c
c0017cf6:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0017cf9:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0017cfd:	a1 8c 33 03 c0       	mov    eax,ds:0xc003338c
c0017d02:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0017d05:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0017d09:	a1 8c 33 03 c0       	mov    eax,ds:0xc003338c
c0017d0e:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0017d11:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0017d15:	a1 8c 33 03 c0       	mov    eax,ds:0xc003338c
c0017d1a:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0017d1d:	66 89 50 5f          	mov    WORD PTR [eax+0x5f],dx
c0017d21:	a1 8c 33 03 c0       	mov    eax,ds:0xc003338c
c0017d26:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017d2a:	c7 05 90 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033390,0x0
c0017d34:	83 ec 04             	sub    esp,0x4
c0017d37:	6a 20                	push   0x20
c0017d39:	6a 00                	push   0x0
c0017d3b:	68 a0 33 03 c0       	push   0xc00333a0
c0017d40:	e8 ab 87 fe ff       	call   c00004f0 <memset>
c0017d45:	83 c4 10             	add    esp,0x10
c0017d48:	c7 45 ec 14 01 00 00 	mov    DWORD PTR [ebp-0x14],0x114
c0017d4f:	83 ec 0c             	sub    esp,0xc
c0017d52:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0017d55:	e8 7a 81 ff ff       	call   c000fed4 <malloc>
c0017d5a:	83 c4 10             	add    esp,0x10
c0017d5d:	89 c3                	mov    ebx,eax
c0017d5f:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c0017d64:	83 ec 04             	sub    esp,0x4
c0017d67:	50                   	push   eax
c0017d68:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017d6b:	53                   	push   ebx
c0017d6c:	e8 63 0c ff ff       	call   c00089d4 <File::File(char const*, Process*)>
c0017d71:	83 c4 10             	add    esp,0x10
c0017d74:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0017d77:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0017d7b:	75 29                	jne    c0017da6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x136>
c0017d7d:	83 ec 0c             	sub    esp,0xc
c0017d80:	68 f2 a9 02 c0       	push   0xc002a9f2
c0017d85:	e8 9e 85 ff ff       	call   c0010328 <KePanic(char const*)>
c0017d8a:	83 c4 10             	add    esp,0x10
c0017d8d:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017d95:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017d9a:	85 c0                	test   eax,eax
c0017d9c:	75 01                	jne    c0017d9f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x12f>
c0017d9e:	fb                   	sti    
c0017d9f:	b0 00                	mov    al,0x0
c0017da1:	e9 fb 00 00 00       	jmp    c0017ea1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x231>
c0017da6:	83 ec 04             	sub    esp,0x4
c0017da9:	8d 45 df             	lea    eax,[ebp-0x21]
c0017dac:	50                   	push   eax
c0017dad:	8d 45 e0             	lea    eax,[ebp-0x20]
c0017db0:	50                   	push   eax
c0017db1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0017db4:	e8 3b 0f ff ff       	call   c0008cf4 <File::stat(unsigned long long*, bool*)>
c0017db9:	83 c4 10             	add    esp,0x10
c0017dbc:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0017dbf:	0f b6 c0             	movzx  eax,al
c0017dc2:	85 c0                	test   eax,eax
c0017dc4:	74 29                	je     c0017def <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17f>
c0017dc6:	83 ec 0c             	sub    esp,0xc
c0017dc9:	68 06 aa 02 c0       	push   0xc002aa06
c0017dce:	e8 55 85 ff ff       	call   c0010328 <KePanic(char const*)>
c0017dd3:	83 c4 10             	add    esp,0x10
c0017dd6:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017dde:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017de3:	85 c0                	test   eax,eax
c0017de5:	75 01                	jne    c0017de8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x178>
c0017de7:	fb                   	sti    
c0017de8:	b0 00                	mov    al,0x0
c0017dea:	e9 b2 00 00 00       	jmp    c0017ea1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x231>
c0017def:	83 ec 08             	sub    esp,0x8
c0017df2:	6a 01                	push   0x1
c0017df4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0017df7:	e8 f6 0b ff ff       	call   c00089f2 <File::open(FileOpenMode)>
c0017dfc:	83 c4 10             	add    esp,0x10
c0017dff:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0017e02:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0017e06:	74 26                	je     c0017e2e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1be>
c0017e08:	83 ec 0c             	sub    esp,0xc
c0017e0b:	68 1f aa 02 c0       	push   0xc002aa1f
c0017e10:	e8 13 85 ff ff       	call   c0010328 <KePanic(char const*)>
c0017e15:	83 c4 10             	add    esp,0x10
c0017e18:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017e20:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017e25:	85 c0                	test   eax,eax
c0017e27:	75 01                	jne    c0017e2a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1ba>
c0017e29:	fb                   	sti    
c0017e2a:	b0 00                	mov    al,0x0
c0017e2c:	eb 73                	jmp    c0017ea1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x231>
c0017e2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017e31:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e33:	83 c0 0c             	add    eax,0xc
c0017e36:	8b 18                	mov    ebx,DWORD PTR [eax]
c0017e38:	0f b7 55 d4          	movzx  edx,WORD PTR [ebp-0x2c]
c0017e3c:	0f b7 45 d0          	movzx  eax,WORD PTR [ebp-0x30]
c0017e40:	83 ec 08             	sub    esp,0x8
c0017e43:	52                   	push   edx
c0017e44:	50                   	push   eax
c0017e45:	e8 c5 fa ff ff       	call   c001790f <Vm::realToLinear(unsigned short, unsigned short)>
c0017e4a:	83 c4 10             	add    esp,0x10
c0017e4d:	89 c6                	mov    esi,eax
c0017e4f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0017e52:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0017e55:	83 ec 0c             	sub    esp,0xc
c0017e58:	8d 4d d8             	lea    ecx,[ebp-0x28]
c0017e5b:	51                   	push   ecx
c0017e5c:	56                   	push   esi
c0017e5d:	52                   	push   edx
c0017e5e:	50                   	push   eax
c0017e5f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0017e62:	ff d3                	call   ebx
c0017e64:	83 c4 20             	add    esp,0x20
c0017e67:	83 ec 0c             	sub    esp,0xc
c0017e6a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0017e6d:	e8 de 0b ff ff       	call   c0008a50 <File::close()>
c0017e72:	83 c4 10             	add    esp,0x10
c0017e75:	c6 05 89 33 03 c0 00 	mov    BYTE PTR ds:0xc0033389,0x0
c0017e7c:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017e84:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017e89:	85 c0                	test   eax,eax
c0017e8b:	75 01                	jne    c0017e8e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x21e>
c0017e8d:	fb                   	sti    
c0017e8e:	a1 8c 33 03 c0       	mov    eax,ds:0xc003338c
c0017e93:	83 ec 0c             	sub    esp,0xc
c0017e96:	50                   	push   eax
c0017e97:	e8 6c f3 ff ff       	call   c0017208 <unblockTask(ThreadControlBlock*)>
c0017e9c:	83 c4 10             	add    esp,0x10
c0017e9f:	b0 01                	mov    al,0x1
c0017ea1:	8d 65 f8             	lea    esp,[ebp-0x8]
c0017ea4:	5b                   	pop    ebx
c0017ea5:	5e                   	pop    esi
c0017ea6:	5d                   	pop    ebp
c0017ea7:	c3                   	ret    

c0017ea8 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0017ea8:	55                   	push   ebp
c0017ea9:	89 e5                	mov    ebp,esp
c0017eab:	83 ec 68             	sub    esp,0x68
c0017eae:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0017eb1:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017eb4:	66 89 55 9c          	mov    WORD PTR [ebp-0x64],dx
c0017eb8:	66 89 45 98          	mov    WORD PTR [ebp-0x68],ax
c0017ebc:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
c0017ec3:	8b 45 98             	mov    eax,DWORD PTR [ebp-0x68]
c0017ec6:	83 e8 06             	sub    eax,0x6
c0017ec9:	66 89 45 98          	mov    WORD PTR [ebp-0x68],ax
c0017ecd:	0f b7 55 98          	movzx  edx,WORD PTR [ebp-0x68]
c0017ed1:	0f b7 45 9c          	movzx  eax,WORD PTR [ebp-0x64]
c0017ed5:	52                   	push   edx
c0017ed6:	50                   	push   eax
c0017ed7:	e8 33 fa ff ff       	call   c001790f <Vm::realToLinear(unsigned short, unsigned short)>
c0017edc:	83 c4 08             	add    esp,0x8
c0017edf:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c0017ee2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ee5:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017ee8:	83 e8 06             	sub    eax,0x6
c0017eeb:	0f b7 d0             	movzx  edx,ax
c0017eee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ef1:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0017ef4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ef7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017efa:	83 c0 02             	add    eax,0x2
c0017efd:	0f b7 c0             	movzx  eax,ax
c0017f00:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0017f03:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c0017f06:	66 89 45 da          	mov    WORD PTR [ebp-0x26],ax
c0017f0a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0017f0d:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0017f10:	66 8b 45 da          	mov    ax,WORD PTR [ebp-0x26]
c0017f14:	88 c2                	mov    dl,al
c0017f16:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017f19:	88 10                	mov    BYTE PTR [eax],dl
c0017f1b:	0f b7 45 da          	movzx  eax,WORD PTR [ebp-0x26]
c0017f1f:	c1 e8 08             	shr    eax,0x8
c0017f22:	89 c2                	mov    edx,eax
c0017f24:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017f27:	83 c0 01             	add    eax,0x1
c0017f2a:	88 10                	mov    BYTE PTR [eax],dl
c0017f2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f2f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017f32:	0f b7 c0             	movzx  eax,ax
c0017f35:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0017f38:	83 c2 02             	add    edx,0x2
c0017f3b:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
c0017f3e:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
c0017f42:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0017f45:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0017f48:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
c0017f4c:	88 c2                	mov    dl,al
c0017f4e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0017f51:	88 10                	mov    BYTE PTR [eax],dl
c0017f53:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
c0017f57:	c1 e8 08             	shr    eax,0x8
c0017f5a:	89 c2                	mov    edx,eax
c0017f5c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0017f5f:	83 c0 01             	add    eax,0x1
c0017f62:	88 10                	mov    BYTE PTR [eax],dl
c0017f64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f67:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017f6a:	0f b7 c0             	movzx  eax,ax
c0017f6d:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0017f70:	83 c2 04             	add    edx,0x4
c0017f73:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0017f76:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
c0017f7a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017f7d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0017f80:	66 8b 45 f2          	mov    ax,WORD PTR [ebp-0xe]
c0017f84:	88 c2                	mov    dl,al
c0017f86:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0017f89:	88 10                	mov    BYTE PTR [eax],dl
c0017f8b:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
c0017f8f:	c1 e8 08             	shr    eax,0x8
c0017f92:	89 c2                	mov    edx,eax
c0017f94:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0017f97:	83 c0 01             	add    eax,0x1
c0017f9a:	88 10                	mov    BYTE PTR [eax],dl
c0017f9c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017fa1:	8b 00                	mov    eax,DWORD PTR [eax]
c0017fa3:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c0017fa6:	0f b6 c0             	movzx  eax,al
c0017fa9:	85 c0                	test   eax,eax
c0017fab:	74 5e                	je     c001800b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x163>
c0017fad:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0017fb0:	83 c0 04             	add    eax,0x4
c0017fb3:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0017fb6:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0017fb9:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0017fbc:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0017fbf:	8a 00                	mov    al,BYTE PTR [eax]
c0017fc1:	0f b6 c0             	movzx  eax,al
c0017fc4:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c0017fc7:	83 c2 01             	add    edx,0x1
c0017fca:	8a 12                	mov    dl,BYTE PTR [edx]
c0017fcc:	0f b6 d2             	movzx  edx,dl
c0017fcf:	c1 e2 08             	shl    edx,0x8
c0017fd2:	09 d0                	or     eax,edx
c0017fd4:	80 cc 02             	or     ah,0x2
c0017fd7:	0f b7 c0             	movzx  eax,ax
c0017fda:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0017fdd:	83 c2 04             	add    edx,0x4
c0017fe0:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0017fe3:	66 89 45 ce          	mov    WORD PTR [ebp-0x32],ax
c0017fe7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017fea:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0017fed:	66 8b 45 ce          	mov    ax,WORD PTR [ebp-0x32]
c0017ff1:	88 c2                	mov    dl,al
c0017ff3:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0017ff6:	88 10                	mov    BYTE PTR [eax],dl
c0017ff8:	0f b7 45 ce          	movzx  eax,WORD PTR [ebp-0x32]
c0017ffc:	c1 e8 08             	shr    eax,0x8
c0017fff:	89 c2                	mov    edx,eax
c0018001:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0018004:	83 c0 01             	add    eax,0x1
c0018007:	88 10                	mov    BYTE PTR [eax],dl
c0018009:	eb 5e                	jmp    c0018069 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x1c1>
c001800b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001800e:	83 c0 04             	add    eax,0x4
c0018011:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
c0018014:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
c0018017:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
c001801a:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
c001801d:	8a 00                	mov    al,BYTE PTR [eax]
c001801f:	0f b6 c0             	movzx  eax,al
c0018022:	8b 55 ac             	mov    edx,DWORD PTR [ebp-0x54]
c0018025:	83 c2 01             	add    edx,0x1
c0018028:	8a 12                	mov    dl,BYTE PTR [edx]
c001802a:	0f b6 d2             	movzx  edx,dl
c001802d:	c1 e2 08             	shl    edx,0x8
c0018030:	09 d0                	or     eax,edx
c0018032:	0f b7 c0             	movzx  eax,ax
c0018035:	25 ff fd 00 00       	and    eax,0xfdff
c001803a:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c001803d:	83 c2 04             	add    edx,0x4
c0018040:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
c0018043:	66 89 45 ba          	mov    WORD PTR [ebp-0x46],ax
c0018047:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c001804a:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
c001804d:	66 8b 45 ba          	mov    ax,WORD PTR [ebp-0x46]
c0018051:	88 c2                	mov    dl,al
c0018053:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c0018056:	88 10                	mov    BYTE PTR [eax],dl
c0018058:	0f b7 45 ba          	movzx  eax,WORD PTR [ebp-0x46]
c001805c:	c1 e8 08             	shr    eax,0x8
c001805f:	89 c2                	mov    edx,eax
c0018061:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c0018064:	83 c0 01             	add    eax,0x1
c0018067:	88 10                	mov    BYTE PTR [eax],dl
c0018069:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001806e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018070:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018074:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018077:	c1 e0 02             	shl    eax,0x2
c001807a:	8d 50 02             	lea    edx,[eax+0x2]
c001807d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018080:	01 d0                	add    eax,edx
c0018082:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018085:	0f b7 d0             	movzx  edx,ax
c0018088:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001808b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c001808e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018091:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018098:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001809b:	01 d0                	add    eax,edx
c001809d:	66 8b 00             	mov    ax,WORD PTR [eax]
c00180a0:	0f b7 d0             	movzx  edx,ax
c00180a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00180a6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00180a9:	90                   	nop
c00180aa:	c9                   	leave  
c00180ab:	c3                   	ret    

c00180ac <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00180ac:	55                   	push   ebp
c00180ad:	89 e5                	mov    ebp,esp
c00180af:	83 ec 28             	sub    esp,0x28
c00180b2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00180b5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00180b8:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c00180bc:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c00180c0:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00180c4:	c1 e0 04             	shl    eax,0x4
c00180c7:	89 c2                	mov    edx,eax
c00180c9:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00180cd:	01 d0                	add    eax,edx
c00180cf:	3d ff ff 0f 00       	cmp    eax,0xfffff
c00180d4:	7e 10                	jle    c00180e6 <Vm::readByteFromReal(unsigned short, unsigned short)+0x3a>
c00180d6:	83 ec 0c             	sub    esp,0xc
c00180d9:	68 38 aa 02 c0       	push   0xc002aa38
c00180de:	e8 45 82 ff ff       	call   c0010328 <KePanic(char const*)>
c00180e3:	83 c4 10             	add    esp,0x10
c00180e6:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00180ea:	c1 e0 04             	shl    eax,0x4
c00180ed:	89 c2                	mov    edx,eax
c00180ef:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00180f3:	01 d0                	add    eax,edx
c00180f5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00180f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00180fb:	8a 00                	mov    al,BYTE PTR [eax]
c00180fd:	c9                   	leave  
c00180fe:	c3                   	ret    

c00180ff <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00180ff:	55                   	push   ebp
c0018100:	89 e5                	mov    ebp,esp
c0018102:	83 ec 28             	sub    esp,0x28
c0018105:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018108:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001810b:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c001810f:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0018113:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018117:	c1 e0 04             	shl    eax,0x4
c001811a:	89 c2                	mov    edx,eax
c001811c:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018120:	01 d0                	add    eax,edx
c0018122:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0018127:	7e 10                	jle    c0018139 <Vm::readWordFromReal(unsigned short, unsigned short)+0x3a>
c0018129:	83 ec 0c             	sub    esp,0xc
c001812c:	68 38 aa 02 c0       	push   0xc002aa38
c0018131:	e8 f2 81 ff ff       	call   c0010328 <KePanic(char const*)>
c0018136:	83 c4 10             	add    esp,0x10
c0018139:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c001813d:	c1 e0 04             	shl    eax,0x4
c0018140:	89 c2                	mov    edx,eax
c0018142:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018146:	01 d0                	add    eax,edx
c0018148:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001814b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001814e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018151:	c9                   	leave  
c0018152:	c3                   	ret    

c0018153 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0018153:	55                   	push   ebp
c0018154:	89 e5                	mov    ebp,esp
c0018156:	83 ec 28             	sub    esp,0x28
c0018159:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001815c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001815f:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0018163:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0018167:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c001816b:	c1 e0 04             	shl    eax,0x4
c001816e:	89 c2                	mov    edx,eax
c0018170:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018174:	01 d0                	add    eax,edx
c0018176:	3d ff ff 0f 00       	cmp    eax,0xfffff
c001817b:	7e 10                	jle    c001818d <Vm::readDwordFromReal(unsigned short, unsigned short)+0x3a>
c001817d:	83 ec 0c             	sub    esp,0xc
c0018180:	68 38 aa 02 c0       	push   0xc002aa38
c0018185:	e8 9e 81 ff ff       	call   c0010328 <KePanic(char const*)>
c001818a:	83 c4 10             	add    esp,0x10
c001818d:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018191:	c1 e0 04             	shl    eax,0x4
c0018194:	89 c2                	mov    edx,eax
c0018196:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c001819a:	01 d0                	add    eax,edx
c001819c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001819f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00181a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00181a4:	c9                   	leave  
c00181a5:	c3                   	ret    

c00181a6 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00181a6:	55                   	push   ebp
c00181a7:	89 e5                	mov    ebp,esp
c00181a9:	83 ec 28             	sub    esp,0x28
c00181ac:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00181af:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00181b2:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00181b5:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c00181b9:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c00181bd:	88 c8                	mov    al,cl
c00181bf:	88 45 dc             	mov    BYTE PTR [ebp-0x24],al
c00181c2:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00181c6:	c1 e0 04             	shl    eax,0x4
c00181c9:	89 c2                	mov    edx,eax
c00181cb:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00181cf:	01 d0                	add    eax,edx
c00181d1:	3d ff ff 0f 00       	cmp    eax,0xfffff
c00181d6:	7e 10                	jle    c00181e8 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)+0x42>
c00181d8:	83 ec 0c             	sub    esp,0xc
c00181db:	68 38 aa 02 c0       	push   0xc002aa38
c00181e0:	e8 43 81 ff ff       	call   c0010328 <KePanic(char const*)>
c00181e5:	83 c4 10             	add    esp,0x10
c00181e8:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00181ec:	c1 e0 04             	shl    eax,0x4
c00181ef:	89 c2                	mov    edx,eax
c00181f1:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00181f5:	01 d0                	add    eax,edx
c00181f7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00181fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00181fd:	8a 55 dc             	mov    dl,BYTE PTR [ebp-0x24]
c0018200:	88 10                	mov    BYTE PTR [eax],dl
c0018202:	90                   	nop
c0018203:	c9                   	leave  
c0018204:	c3                   	ret    

c0018205 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018205:	55                   	push   ebp
c0018206:	89 e5                	mov    ebp,esp
c0018208:	83 ec 28             	sub    esp,0x28
c001820b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001820e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0018211:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018214:	66 89 4d e4          	mov    WORD PTR [ebp-0x1c],cx
c0018218:	66 89 55 e0          	mov    WORD PTR [ebp-0x20],dx
c001821c:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018220:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018224:	c1 e0 04             	shl    eax,0x4
c0018227:	89 c2                	mov    edx,eax
c0018229:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c001822d:	01 d0                	add    eax,edx
c001822f:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0018234:	7e 10                	jle    c0018246 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)+0x41>
c0018236:	83 ec 0c             	sub    esp,0xc
c0018239:	68 38 aa 02 c0       	push   0xc002aa38
c001823e:	e8 e5 80 ff ff       	call   c0010328 <KePanic(char const*)>
c0018243:	83 c4 10             	add    esp,0x10
c0018246:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c001824a:	c1 e0 04             	shl    eax,0x4
c001824d:	89 c2                	mov    edx,eax
c001824f:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018253:	01 d0                	add    eax,edx
c0018255:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018258:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001825b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001825e:	66 89 10             	mov    WORD PTR [eax],dx
c0018261:	90                   	nop
c0018262:	c9                   	leave  
c0018263:	c3                   	ret    

c0018264 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018264:	55                   	push   ebp
c0018265:	89 e5                	mov    ebp,esp
c0018267:	83 ec 28             	sub    esp,0x28
c001826a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001826d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018270:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0018274:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0018278:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c001827c:	c1 e0 04             	shl    eax,0x4
c001827f:	89 c2                	mov    edx,eax
c0018281:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018285:	01 d0                	add    eax,edx
c0018287:	3d ff ff 0f 00       	cmp    eax,0xfffff
c001828c:	7e 10                	jle    c001829e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)+0x3a>
c001828e:	83 ec 0c             	sub    esp,0xc
c0018291:	68 38 aa 02 c0       	push   0xc002aa38
c0018296:	e8 8d 80 ff ff       	call   c0010328 <KePanic(char const*)>
c001829b:	83 c4 10             	add    esp,0x10
c001829e:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00182a2:	c1 e0 04             	shl    eax,0x4
c00182a5:	89 c2                	mov    edx,eax
c00182a7:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00182ab:	01 d0                	add    eax,edx
c00182ad:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00182b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00182b3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00182b6:	89 10                	mov    DWORD PTR [eax],edx
c00182b8:	90                   	nop
c00182b9:	c9                   	leave  
c00182ba:	c3                   	ret    

c00182bb <Vm::faultHandler(regs*)>:
c00182bb:	55                   	push   ebp
c00182bc:	89 e5                	mov    ebp,esp
c00182be:	57                   	push   edi
c00182bf:	56                   	push   esi
c00182c0:	53                   	push   ebx
c00182c1:	81 ec ac 00 00 00    	sub    esp,0xac
c00182c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182ca:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00182cd:	0f b7 d0             	movzx  edx,ax
c00182d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182d3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00182d6:	0f b7 c0             	movzx  eax,ax
c00182d9:	52                   	push   edx
c00182da:	50                   	push   eax
c00182db:	e8 2f f6 ff ff       	call   c001790f <Vm::realToLinear(unsigned short, unsigned short)>
c00182e0:	83 c4 08             	add    esp,0x8
c00182e3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00182e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182e9:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00182ec:	0f b7 d0             	movzx  edx,ax
c00182ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182f2:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c00182f5:	0f b7 c0             	movzx  eax,ax
c00182f8:	52                   	push   edx
c00182f9:	50                   	push   eax
c00182fa:	e8 10 f6 ff ff       	call   c001790f <Vm::realToLinear(unsigned short, unsigned short)>
c00182ff:	83 c4 08             	add    esp,0x8
c0018302:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0018305:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018308:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001830b:	0f b7 d0             	movzx  edx,ax
c001830e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018311:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0018314:	0f b7 c0             	movzx  eax,ax
c0018317:	52                   	push   edx
c0018318:	50                   	push   eax
c0018319:	e8 f1 f5 ff ff       	call   c001790f <Vm::realToLinear(unsigned short, unsigned short)>
c001831e:	83 c4 08             	add    esp,0x8
c0018321:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0018324:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001832b:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
c001832f:	c6 45 e2 00          	mov    BYTE PTR [ebp-0x1e],0x0
c0018333:	c6 45 e1 06          	mov    BYTE PTR [ebp-0x1f],0x6
c0018337:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001833a:	8a 00                	mov    al,BYTE PTR [eax]
c001833c:	0f b6 c0             	movzx  eax,al
c001833f:	83 e8 26             	sub    eax,0x26
c0018342:	3d d5 00 00 00       	cmp    eax,0xd5
c0018347:	0f 87 f8 0c 00 00    	ja     c0019045 <Vm::faultHandler(regs*)+0xd8a>
c001834d:	8b 04 85 b8 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5548]
c0018354:	ff e0                	jmp    eax
c0018356:	c6 45 e1 02          	mov    BYTE PTR [ebp-0x1f],0x2
c001835a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001835d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018360:	8d 50 01             	lea    edx,[eax+0x1]
c0018363:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018366:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018369:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c001836d:	e9 87 0d 00 00       	jmp    c00190f9 <Vm::faultHandler(regs*)+0xe3e>
c0018372:	c6 45 e1 00          	mov    BYTE PTR [ebp-0x1f],0x0
c0018376:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018379:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001837c:	8d 50 01             	lea    edx,[eax+0x1]
c001837f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018382:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018385:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018389:	e9 6b 0d 00 00       	jmp    c00190f9 <Vm::faultHandler(regs*)+0xe3e>
c001838e:	c6 45 e1 01          	mov    BYTE PTR [ebp-0x1f],0x1
c0018392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018395:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018398:	8d 50 01             	lea    edx,[eax+0x1]
c001839b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001839e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00183a1:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c00183a5:	e9 4f 0d 00 00       	jmp    c00190f9 <Vm::faultHandler(regs*)+0xe3e>
c00183aa:	c6 45 e1 03          	mov    BYTE PTR [ebp-0x1f],0x3
c00183ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00183b1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00183b4:	8d 50 01             	lea    edx,[eax+0x1]
c00183b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00183ba:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00183bd:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c00183c1:	e9 33 0d 00 00       	jmp    c00190f9 <Vm::faultHandler(regs*)+0xe3e>
c00183c6:	c6 45 e1 04          	mov    BYTE PTR [ebp-0x1f],0x4
c00183ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00183cd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00183d0:	8d 50 01             	lea    edx,[eax+0x1]
c00183d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00183d6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00183d9:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c00183dd:	e9 17 0d 00 00       	jmp    c00190f9 <Vm::faultHandler(regs*)+0xe3e>
c00183e2:	c6 45 e1 05          	mov    BYTE PTR [ebp-0x1f],0x5
c00183e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00183e9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00183ec:	8d 50 01             	lea    edx,[eax+0x1]
c00183ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00183f2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00183f5:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c00183f9:	e9 fb 0c 00 00       	jmp    c00190f9 <Vm::faultHandler(regs*)+0xe3e>
c00183fe:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0018402:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018405:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018408:	8d 50 01             	lea    edx,[eax+0x1]
c001840b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001840e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018411:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018415:	e9 df 0c 00 00       	jmp    c00190f9 <Vm::faultHandler(regs*)+0xe3e>
c001841a:	c6 45 e2 01          	mov    BYTE PTR [ebp-0x1e],0x1
c001841e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018421:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018424:	8d 50 01             	lea    edx,[eax+0x1]
c0018427:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001842a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001842d:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018431:	e9 c3 0c 00 00       	jmp    c00190f9 <Vm::faultHandler(regs*)+0xe3e>
c0018436:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018439:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001843c:	8d 50 01             	lea    edx,[eax+0x1]
c001843f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018442:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018445:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018449:	e9 ab 0c 00 00       	jmp    c00190f9 <Vm::faultHandler(regs*)+0xe3e>
c001844e:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018452:	85 c0                	test   eax,eax
c0018454:	74 5b                	je     c00184b1 <Vm::faultHandler(regs*)+0x1f6>
c0018456:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018459:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001845c:	83 e8 04             	sub    eax,0x4
c001845f:	0f b7 d0             	movzx  edx,ax
c0018462:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018465:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0018468:	83 6d d0 04          	sub    DWORD PTR [ebp-0x30],0x4
c001846c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001846f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018472:	25 ff 0d 00 00       	and    eax,0xdff
c0018477:	89 c2                	mov    edx,eax
c0018479:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001847c:	89 10                	mov    DWORD PTR [eax],edx
c001847e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018483:	8b 00                	mov    eax,DWORD PTR [eax]
c0018485:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c0018488:	0f b6 c0             	movzx  eax,al
c001848b:	85 c0                	test   eax,eax
c001848d:	74 11                	je     c00184a0 <Vm::faultHandler(regs*)+0x1e5>
c001848f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018492:	8b 00                	mov    eax,DWORD PTR [eax]
c0018494:	80 cc 02             	or     ah,0x2
c0018497:	89 c2                	mov    edx,eax
c0018499:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001849c:	89 10                	mov    DWORD PTR [eax],edx
c001849e:	eb 6a                	jmp    c001850a <Vm::faultHandler(regs*)+0x24f>
c00184a0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00184a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00184a5:	80 e4 fd             	and    ah,0xfd
c00184a8:	89 c2                	mov    edx,eax
c00184aa:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00184ad:	89 10                	mov    DWORD PTR [eax],edx
c00184af:	eb 59                	jmp    c001850a <Vm::faultHandler(regs*)+0x24f>
c00184b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184b4:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00184b7:	83 e8 02             	sub    eax,0x2
c00184ba:	0f b7 d0             	movzx  edx,ax
c00184bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184c0:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00184c3:	83 6d d4 02          	sub    DWORD PTR [ebp-0x2c],0x2
c00184c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184ca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00184cd:	89 c2                	mov    edx,eax
c00184cf:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00184d2:	66 89 10             	mov    WORD PTR [eax],dx
c00184d5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00184da:	8b 00                	mov    eax,DWORD PTR [eax]
c00184dc:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c00184df:	0f b6 c0             	movzx  eax,al
c00184e2:	85 c0                	test   eax,eax
c00184e4:	74 13                	je     c00184f9 <Vm::faultHandler(regs*)+0x23e>
c00184e6:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00184e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00184ec:	80 cc 02             	or     ah,0x2
c00184ef:	89 c2                	mov    edx,eax
c00184f1:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00184f4:	66 89 10             	mov    WORD PTR [eax],dx
c00184f7:	eb 11                	jmp    c001850a <Vm::faultHandler(regs*)+0x24f>
c00184f9:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00184fc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00184ff:	80 e4 fd             	and    ah,0xfd
c0018502:	89 c2                	mov    edx,eax
c0018504:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018507:	66 89 10             	mov    WORD PTR [eax],dx
c001850a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001850d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018510:	8d 50 01             	lea    edx,[eax+0x1]
c0018513:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018516:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018519:	b0 01                	mov    al,0x1
c001851b:	e9 de 0b 00 00       	jmp    c00190fe <Vm::faultHandler(regs*)+0xe43>
c0018520:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018524:	85 c0                	test   eax,eax
c0018526:	74 46                	je     c001856e <Vm::faultHandler(regs*)+0x2b3>
c0018528:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001852b:	8b 00                	mov    eax,DWORD PTR [eax]
c001852d:	25 ff 0d 00 00       	and    eax,0xdff
c0018532:	0d 00 02 02 00       	or     eax,0x20200
c0018537:	89 c2                	mov    edx,eax
c0018539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001853c:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001853f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018542:	8b 00                	mov    eax,DWORD PTR [eax]
c0018544:	25 00 02 00 00       	and    eax,0x200
c0018549:	89 c2                	mov    edx,eax
c001854b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018550:	8b 00                	mov    eax,DWORD PTR [eax]
c0018552:	85 d2                	test   edx,edx
c0018554:	0f 95 c2             	setne  dl
c0018557:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c001855a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001855d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018560:	83 c0 04             	add    eax,0x4
c0018563:	0f b7 d0             	movzx  edx,ax
c0018566:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018569:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001856c:	eb 47                	jmp    c00185b5 <Vm::faultHandler(regs*)+0x2fa>
c001856e:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018571:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018574:	0f b7 c0             	movzx  eax,ax
c0018577:	0d 00 02 02 00       	or     eax,0x20200
c001857c:	89 c2                	mov    edx,eax
c001857e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018581:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0018584:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018587:	66 8b 00             	mov    ax,WORD PTR [eax]
c001858a:	0f b7 c0             	movzx  eax,ax
c001858d:	25 00 02 00 00       	and    eax,0x200
c0018592:	89 c2                	mov    edx,eax
c0018594:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018599:	8b 00                	mov    eax,DWORD PTR [eax]
c001859b:	85 d2                	test   edx,edx
c001859d:	0f 95 c2             	setne  dl
c00185a0:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c00185a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185a6:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00185a9:	83 c0 02             	add    eax,0x2
c00185ac:	0f b7 d0             	movzx  edx,ax
c00185af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185b2:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00185b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185b8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00185bb:	8d 50 01             	lea    edx,[eax+0x1]
c00185be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185c1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00185c4:	b0 01                	mov    al,0x1
c00185c6:	e9 33 0b 00 00       	jmp    c00190fe <Vm::faultHandler(regs*)+0xe43>
c00185cb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00185ce:	83 c0 01             	add    eax,0x1
c00185d1:	8a 00                	mov    al,BYTE PTR [eax]
c00185d3:	0f b6 c0             	movzx  eax,al
c00185d6:	3d ee 00 00 00       	cmp    eax,0xee
c00185db:	75 19                	jne    c00185f6 <Vm::faultHandler(regs*)+0x33b>
c00185dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185e0:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00185e3:	83 ec 0c             	sub    esp,0xc
c00185e6:	50                   	push   eax
c00185e7:	e8 ee f3 ff ff       	call   c00179da <Vm::mainloop3(unsigned long)>
c00185ec:	83 c4 10             	add    esp,0x10
c00185ef:	b0 01                	mov    al,0x1
c00185f1:	e9 08 0b 00 00       	jmp    c00190fe <Vm::faultHandler(regs*)+0xe43>
c00185f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185f9:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00185fc:	0f b7 c8             	movzx  ecx,ax
c00185ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018602:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0018605:	0f b7 d0             	movzx  edx,ax
c0018608:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001860b:	83 c0 01             	add    eax,0x1
c001860e:	8a 00                	mov    al,BYTE PTR [eax]
c0018610:	0f b6 c0             	movzx  eax,al
c0018613:	83 ec 0c             	sub    esp,0xc
c0018616:	51                   	push   ecx
c0018617:	52                   	push   edx
c0018618:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001861b:	50                   	push   eax
c001861c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001861f:	e8 84 f8 ff ff       	call   c0017ea8 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018624:	83 c4 20             	add    esp,0x20
c0018627:	b0 01                	mov    al,0x1
c0018629:	e9 d0 0a 00 00       	jmp    c00190fe <Vm::faultHandler(regs*)+0xe43>
c001862e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018633:	8b 00                	mov    eax,DWORD PTR [eax]
c0018635:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018639:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001863c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001863f:	8d 50 01             	lea    edx,[eax+0x1]
c0018642:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018645:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018648:	b0 01                	mov    al,0x1
c001864a:	e9 af 0a 00 00       	jmp    c00190fe <Vm::faultHandler(regs*)+0xe43>
c001864f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018654:	8b 00                	mov    eax,DWORD PTR [eax]
c0018656:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001865a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001865d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018660:	8d 50 01             	lea    edx,[eax+0x1]
c0018663:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018666:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018669:	b0 01                	mov    al,0x1
c001866b:	e9 8e 0a 00 00       	jmp    c00190fe <Vm::faultHandler(regs*)+0xe43>
c0018670:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018673:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
c0018676:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
c0018679:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
c001867c:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
c001867f:	8a 00                	mov    al,BYTE PTR [eax]
c0018681:	0f b6 c0             	movzx  eax,al
c0018684:	8b 55 a8             	mov    edx,DWORD PTR [ebp-0x58]
c0018687:	83 c2 01             	add    edx,0x1
c001868a:	8a 12                	mov    dl,BYTE PTR [edx]
c001868c:	0f b6 d2             	movzx  edx,dl
c001868f:	c1 e2 08             	shl    edx,0x8
c0018692:	09 d0                	or     eax,edx
c0018694:	0f b7 d0             	movzx  edx,ax
c0018697:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001869a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001869d:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00186a0:	83 c0 02             	add    eax,0x2
c00186a3:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
c00186a6:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c00186a9:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
c00186ac:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
c00186af:	8a 00                	mov    al,BYTE PTR [eax]
c00186b1:	0f b6 c0             	movzx  eax,al
c00186b4:	8b 55 b0             	mov    edx,DWORD PTR [ebp-0x50]
c00186b7:	83 c2 01             	add    edx,0x1
c00186ba:	8a 12                	mov    dl,BYTE PTR [edx]
c00186bc:	0f b6 d2             	movzx  edx,dl
c00186bf:	c1 e2 08             	shl    edx,0x8
c00186c2:	09 d0                	or     eax,edx
c00186c4:	0f b7 d0             	movzx  edx,ax
c00186c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186ca:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00186cd:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00186d0:	83 c0 04             	add    eax,0x4
c00186d3:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
c00186d6:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c00186d9:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
c00186dc:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
c00186df:	8a 00                	mov    al,BYTE PTR [eax]
c00186e1:	0f b6 c0             	movzx  eax,al
c00186e4:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
c00186e7:	83 c2 01             	add    edx,0x1
c00186ea:	8a 12                	mov    dl,BYTE PTR [edx]
c00186ec:	0f b6 d2             	movzx  edx,dl
c00186ef:	c1 e2 08             	shl    edx,0x8
c00186f2:	09 d0                	or     eax,edx
c00186f4:	0f b7 c0             	movzx  eax,ax
c00186f7:	0d 00 02 02 00       	or     eax,0x20200
c00186fc:	89 c2                	mov    edx,eax
c00186fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018701:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0018704:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018707:	83 c0 04             	add    eax,0x4
c001870a:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c001870d:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0018710:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0018713:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0018716:	8a 00                	mov    al,BYTE PTR [eax]
c0018718:	0f b6 c0             	movzx  eax,al
c001871b:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c001871e:	83 c2 01             	add    edx,0x1
c0018721:	8a 12                	mov    dl,BYTE PTR [edx]
c0018723:	0f b6 d2             	movzx  edx,dl
c0018726:	c1 e2 08             	shl    edx,0x8
c0018729:	09 d0                	or     eax,edx
c001872b:	0f b7 c0             	movzx  eax,ax
c001872e:	25 00 02 00 00       	and    eax,0x200
c0018733:	89 c2                	mov    edx,eax
c0018735:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001873a:	8b 00                	mov    eax,DWORD PTR [eax]
c001873c:	85 d2                	test   edx,edx
c001873e:	0f 95 c2             	setne  dl
c0018741:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c0018744:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018747:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001874a:	83 c0 06             	add    eax,0x6
c001874d:	0f b7 d0             	movzx  edx,ax
c0018750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018753:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0018756:	b0 01                	mov    al,0x1
c0018758:	e9 a1 09 00 00       	jmp    c00190fe <Vm::faultHandler(regs*)+0xe43>
c001875d:	66 c7 45 ca 00 00    	mov    WORD PTR [ebp-0x36],0x0
c0018763:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018766:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018769:	66 89 45 ca          	mov    WORD PTR [ebp-0x36],ax
c001876d:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018771:	85 c0                	test   eax,eax
c0018773:	74 7a                	je     c00187ef <Vm::faultHandler(regs*)+0x534>
c0018775:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018778:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001877b:	3d ff ff 00 00       	cmp    eax,0xffff
c0018780:	76 6d                	jbe    c00187ef <Vm::faultHandler(regs*)+0x534>
c0018782:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018785:	83 c0 05             	add    eax,0x5
c0018788:	8a 00                	mov    al,BYTE PTR [eax]
c001878a:	0f b6 c0             	movzx  eax,al
c001878d:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018793:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018796:	83 c0 04             	add    eax,0x4
c0018799:	8a 00                	mov    al,BYTE PTR [eax]
c001879b:	0f b6 f8             	movzx  edi,al
c001879e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00187a1:	83 c0 03             	add    eax,0x3
c00187a4:	8a 00                	mov    al,BYTE PTR [eax]
c00187a6:	0f b6 f0             	movzx  esi,al
c00187a9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00187ac:	83 c0 02             	add    eax,0x2
c00187af:	8a 00                	mov    al,BYTE PTR [eax]
c00187b1:	0f b6 d8             	movzx  ebx,al
c00187b4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00187b7:	83 c0 01             	add    eax,0x1
c00187ba:	8a 00                	mov    al,BYTE PTR [eax]
c00187bc:	0f b6 c8             	movzx  ecx,al
c00187bf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00187c2:	8a 00                	mov    al,BYTE PTR [eax]
c00187c4:	0f b6 d0             	movzx  edx,al
c00187c7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00187ca:	8a 00                	mov    al,BYTE PTR [eax]
c00187cc:	0f b6 c0             	movzx  eax,al
c00187cf:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c00187d5:	57                   	push   edi
c00187d6:	56                   	push   esi
c00187d7:	53                   	push   ebx
c00187d8:	51                   	push   ecx
c00187d9:	52                   	push   edx
c00187da:	50                   	push   eax
c00187db:	68 58 aa 02 c0       	push   0xc002aa58
c00187e0:	e8 81 e7 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00187e5:	83 c4 20             	add    esp,0x20
c00187e8:	b0 00                	mov    al,0x0
c00187ea:	e9 0f 09 00 00       	jmp    c00190fe <Vm::faultHandler(regs*)+0xe43>
c00187ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187f2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00187f5:	0f b7 c0             	movzx  eax,ax
c00187f8:	83 ec 0c             	sub    esp,0xc
c00187fb:	50                   	push   eax
c00187fc:	e8 70 f0 ff ff       	call   c0017871 <Vm::inbv(unsigned short)>
c0018801:	83 c4 10             	add    esp,0x10
c0018804:	0f b6 c8             	movzx  ecx,al
c0018807:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001880a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001880d:	0f b7 d0             	movzx  edx,ax
c0018810:	0f b7 45 ca          	movzx  eax,WORD PTR [ebp-0x36]
c0018814:	83 ec 04             	sub    esp,0x4
c0018817:	51                   	push   ecx
c0018818:	52                   	push   edx
c0018819:	50                   	push   eax
c001881a:	e8 87 f9 ff ff       	call   c00181a6 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001881f:	83 c4 10             	add    esp,0x10
c0018822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018825:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018828:	25 00 04 00 00       	and    eax,0x400
c001882d:	85 c0                	test   eax,eax
c001882f:	74 14                	je     c0018845 <Vm::faultHandler(regs*)+0x58a>
c0018831:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018834:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018837:	83 e8 01             	sub    eax,0x1
c001883a:	0f b7 d0             	movzx  edx,ax
c001883d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018840:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018843:	eb 12                	jmp    c0018857 <Vm::faultHandler(regs*)+0x59c>
c0018845:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018848:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001884b:	83 c0 01             	add    eax,0x1
c001884e:	0f b7 d0             	movzx  edx,ax
c0018851:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018854:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018857:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001885a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001885d:	8d 50 01             	lea    edx,[eax+0x1]
c0018860:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018863:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018866:	b0 01                	mov    al,0x1
c0018868:	e9 91 08 00 00       	jmp    c00190fe <Vm::faultHandler(regs*)+0xe43>
c001886d:	66 c7 45 c8 00 00    	mov    WORD PTR [ebp-0x38],0x0
c0018873:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018876:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018879:	66 89 45 c8          	mov    WORD PTR [ebp-0x38],ax
c001887d:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018881:	85 c0                	test   eax,eax
c0018883:	74 7a                	je     c00188ff <Vm::faultHandler(regs*)+0x644>
c0018885:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018888:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001888b:	3d ff ff 00 00       	cmp    eax,0xffff
c0018890:	76 6d                	jbe    c00188ff <Vm::faultHandler(regs*)+0x644>
c0018892:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018895:	83 c0 05             	add    eax,0x5
c0018898:	8a 00                	mov    al,BYTE PTR [eax]
c001889a:	0f b6 c0             	movzx  eax,al
c001889d:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c00188a3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00188a6:	83 c0 04             	add    eax,0x4
c00188a9:	8a 00                	mov    al,BYTE PTR [eax]
c00188ab:	0f b6 f8             	movzx  edi,al
c00188ae:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00188b1:	83 c0 03             	add    eax,0x3
c00188b4:	8a 00                	mov    al,BYTE PTR [eax]
c00188b6:	0f b6 f0             	movzx  esi,al
c00188b9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00188bc:	83 c0 02             	add    eax,0x2
c00188bf:	8a 00                	mov    al,BYTE PTR [eax]
c00188c1:	0f b6 d8             	movzx  ebx,al
c00188c4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00188c7:	83 c0 01             	add    eax,0x1
c00188ca:	8a 00                	mov    al,BYTE PTR [eax]
c00188cc:	0f b6 c8             	movzx  ecx,al
c00188cf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00188d2:	8a 00                	mov    al,BYTE PTR [eax]
c00188d4:	0f b6 d0             	movzx  edx,al
c00188d7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00188da:	8a 00                	mov    al,BYTE PTR [eax]
c00188dc:	0f b6 c0             	movzx  eax,al
c00188df:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c00188e5:	57                   	push   edi
c00188e6:	56                   	push   esi
c00188e7:	53                   	push   ebx
c00188e8:	51                   	push   ecx
c00188e9:	52                   	push   edx
c00188ea:	50                   	push   eax
c00188eb:	68 58 aa 02 c0       	push   0xc002aa58
c00188f0:	e8 71 e6 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00188f5:	83 c4 20             	add    esp,0x20
c00188f8:	b0 00                	mov    al,0x0
c00188fa:	e9 ff 07 00 00       	jmp    c00190fe <Vm::faultHandler(regs*)+0xe43>
c00188ff:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018903:	85 c0                	test   eax,eax
c0018905:	74 6f                	je     c0018976 <Vm::faultHandler(regs*)+0x6bb>
c0018907:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001890a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001890d:	0f b7 c0             	movzx  eax,ax
c0018910:	66 89 45 a6          	mov    WORD PTR [ebp-0x5a],ax
c0018914:	66 8b 45 a6          	mov    ax,WORD PTR [ebp-0x5a]
c0018918:	89 c2                	mov    edx,eax
c001891a:	ed                   	in     eax,dx
c001891b:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
c001891e:	8b 4d a0             	mov    ecx,DWORD PTR [ebp-0x60]
c0018921:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018924:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018927:	0f b7 d0             	movzx  edx,ax
c001892a:	0f b7 45 c8          	movzx  eax,WORD PTR [ebp-0x38]
c001892e:	83 ec 04             	sub    esp,0x4
c0018931:	51                   	push   ecx
c0018932:	52                   	push   edx
c0018933:	50                   	push   eax
c0018934:	e8 2b f9 ff ff       	call   c0018264 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018939:	83 c4 10             	add    esp,0x10
c001893c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001893f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018942:	25 00 04 00 00       	and    eax,0x400
c0018947:	85 c0                	test   eax,eax
c0018949:	74 17                	je     c0018962 <Vm::faultHandler(regs*)+0x6a7>
c001894b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001894e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018951:	83 e8 04             	sub    eax,0x4
c0018954:	0f b7 d0             	movzx  edx,ax
c0018957:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001895a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001895d:	e9 83 00 00 00       	jmp    c00189e5 <Vm::faultHandler(regs*)+0x72a>
c0018962:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018965:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018968:	83 c0 04             	add    eax,0x4
c001896b:	0f b7 d0             	movzx  edx,ax
c001896e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018971:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018974:	eb 6f                	jmp    c00189e5 <Vm::faultHandler(regs*)+0x72a>
c0018976:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018979:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001897c:	0f b7 c0             	movzx  eax,ax
c001897f:	66 89 45 9e          	mov    WORD PTR [ebp-0x62],ax
c0018983:	66 8b 45 9e          	mov    ax,WORD PTR [ebp-0x62]
c0018987:	89 c2                	mov    edx,eax
c0018989:	66 ed                	in     ax,dx
c001898b:	66 89 45 9c          	mov    WORD PTR [ebp-0x64],ax
c001898f:	8b 45 9c             	mov    eax,DWORD PTR [ebp-0x64]
c0018992:	0f b7 c8             	movzx  ecx,ax
c0018995:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018998:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001899b:	0f b7 d0             	movzx  edx,ax
c001899e:	0f b7 45 c8          	movzx  eax,WORD PTR [ebp-0x38]
c00189a2:	83 ec 04             	sub    esp,0x4
c00189a5:	51                   	push   ecx
c00189a6:	52                   	push   edx
c00189a7:	50                   	push   eax
c00189a8:	e8 58 f8 ff ff       	call   c0018205 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00189ad:	83 c4 10             	add    esp,0x10
c00189b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189b3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00189b6:	25 00 04 00 00       	and    eax,0x400
c00189bb:	85 c0                	test   eax,eax
c00189bd:	74 14                	je     c00189d3 <Vm::faultHandler(regs*)+0x718>
c00189bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189c2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00189c5:	83 e8 02             	sub    eax,0x2
c00189c8:	0f b7 d0             	movzx  edx,ax
c00189cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189ce:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00189d1:	eb 12                	jmp    c00189e5 <Vm::faultHandler(regs*)+0x72a>
c00189d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189d6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00189d9:	83 c0 02             	add    eax,0x2
c00189dc:	0f b7 d0             	movzx  edx,ax
c00189df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189e2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00189e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189e8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00189eb:	8d 50 01             	lea    edx,[eax+0x1]
c00189ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189f1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00189f4:	b0 01                	mov    al,0x1
c00189f6:	e9 03 07 00 00       	jmp    c00190fe <Vm::faultHandler(regs*)+0xe43>
c00189fb:	66 c7 45 de 00 00    	mov    WORD PTR [ebp-0x22],0x0
c0018a01:	0f b6 45 e1          	movzx  eax,BYTE PTR [ebp-0x1f]
c0018a05:	83 f8 06             	cmp    eax,0x6
c0018a08:	77 4f                	ja     c0018a59 <Vm::faultHandler(regs*)+0x79e>
c0018a0a:	8b 04 85 10 ae 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd51f0]
c0018a11:	ff e0                	jmp    eax
c0018a13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a16:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018a19:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018a1d:	eb 3a                	jmp    c0018a59 <Vm::faultHandler(regs*)+0x79e>
c0018a1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a22:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018a25:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018a29:	eb 2e                	jmp    c0018a59 <Vm::faultHandler(regs*)+0x79e>
c0018a2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a2e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018a31:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018a35:	eb 22                	jmp    c0018a59 <Vm::faultHandler(regs*)+0x79e>
c0018a37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018a3d:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018a41:	eb 16                	jmp    c0018a59 <Vm::faultHandler(regs*)+0x79e>
c0018a43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a46:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a48:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018a4c:	eb 0b                	jmp    c0018a59 <Vm::faultHandler(regs*)+0x79e>
c0018a4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a51:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0018a54:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018a58:	90                   	nop
c0018a59:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018a5d:	85 c0                	test   eax,eax
c0018a5f:	74 7a                	je     c0018adb <Vm::faultHandler(regs*)+0x820>
c0018a61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a64:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018a67:	3d ff ff 00 00       	cmp    eax,0xffff
c0018a6c:	76 6d                	jbe    c0018adb <Vm::faultHandler(regs*)+0x820>
c0018a6e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018a71:	83 c0 05             	add    eax,0x5
c0018a74:	8a 00                	mov    al,BYTE PTR [eax]
c0018a76:	0f b6 c0             	movzx  eax,al
c0018a79:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018a7f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018a82:	83 c0 04             	add    eax,0x4
c0018a85:	8a 00                	mov    al,BYTE PTR [eax]
c0018a87:	0f b6 f8             	movzx  edi,al
c0018a8a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018a8d:	83 c0 03             	add    eax,0x3
c0018a90:	8a 00                	mov    al,BYTE PTR [eax]
c0018a92:	0f b6 f0             	movzx  esi,al
c0018a95:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018a98:	83 c0 02             	add    eax,0x2
c0018a9b:	8a 00                	mov    al,BYTE PTR [eax]
c0018a9d:	0f b6 d8             	movzx  ebx,al
c0018aa0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018aa3:	83 c0 01             	add    eax,0x1
c0018aa6:	8a 00                	mov    al,BYTE PTR [eax]
c0018aa8:	0f b6 c8             	movzx  ecx,al
c0018aab:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018aae:	8a 00                	mov    al,BYTE PTR [eax]
c0018ab0:	0f b6 d0             	movzx  edx,al
c0018ab3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018ab6:	8a 00                	mov    al,BYTE PTR [eax]
c0018ab8:	0f b6 c0             	movzx  eax,al
c0018abb:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018ac1:	57                   	push   edi
c0018ac2:	56                   	push   esi
c0018ac3:	53                   	push   ebx
c0018ac4:	51                   	push   ecx
c0018ac5:	52                   	push   edx
c0018ac6:	50                   	push   eax
c0018ac7:	68 58 aa 02 c0       	push   0xc002aa58
c0018acc:	e8 95 e4 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018ad1:	83 c4 20             	add    esp,0x20
c0018ad4:	b0 00                	mov    al,0x0
c0018ad6:	e9 23 06 00 00       	jmp    c00190fe <Vm::faultHandler(regs*)+0xe43>
c0018adb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ade:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018ae1:	0f b7 d0             	movzx  edx,ax
c0018ae4:	0f b7 45 de          	movzx  eax,WORD PTR [ebp-0x22]
c0018ae8:	83 ec 08             	sub    esp,0x8
c0018aeb:	52                   	push   edx
c0018aec:	50                   	push   eax
c0018aed:	e8 ba f5 ff ff       	call   c00180ac <Vm::readByteFromReal(unsigned short, unsigned short)>
c0018af2:	83 c4 10             	add    esp,0x10
c0018af5:	0f b6 d0             	movzx  edx,al
c0018af8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018afb:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018afe:	0f b7 c0             	movzx  eax,ax
c0018b01:	83 ec 08             	sub    esp,0x8
c0018b04:	52                   	push   edx
c0018b05:	50                   	push   eax
c0018b06:	e8 9d ed ff ff       	call   c00178a8 <Vm::outbv(unsigned short, unsigned char)>
c0018b0b:	83 c4 10             	add    esp,0x10
c0018b0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b11:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018b14:	25 00 04 00 00       	and    eax,0x400
c0018b19:	85 c0                	test   eax,eax
c0018b1b:	74 14                	je     c0018b31 <Vm::faultHandler(regs*)+0x876>
c0018b1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b20:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018b23:	83 e8 01             	sub    eax,0x1
c0018b26:	0f b7 d0             	movzx  edx,ax
c0018b29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b2c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018b2f:	eb 12                	jmp    c0018b43 <Vm::faultHandler(regs*)+0x888>
c0018b31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b34:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018b37:	83 c0 01             	add    eax,0x1
c0018b3a:	0f b7 d0             	movzx  edx,ax
c0018b3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b40:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018b43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b46:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018b49:	8d 50 01             	lea    edx,[eax+0x1]
c0018b4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b4f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018b52:	b0 01                	mov    al,0x1
c0018b54:	e9 a5 05 00 00       	jmp    c00190fe <Vm::faultHandler(regs*)+0xe43>
c0018b59:	66 c7 45 dc 00 00    	mov    WORD PTR [ebp-0x24],0x0
c0018b5f:	0f b6 45 e1          	movzx  eax,BYTE PTR [ebp-0x1f]
c0018b63:	83 f8 06             	cmp    eax,0x6
c0018b66:	77 4f                	ja     c0018bb7 <Vm::faultHandler(regs*)+0x8fc>
c0018b68:	8b 04 85 2c ae 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd51d4]
c0018b6f:	ff e0                	jmp    eax
c0018b71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b74:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018b77:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018b7b:	eb 3a                	jmp    c0018bb7 <Vm::faultHandler(regs*)+0x8fc>
c0018b7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b80:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018b83:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018b87:	eb 2e                	jmp    c0018bb7 <Vm::faultHandler(regs*)+0x8fc>
c0018b89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b8c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018b8f:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018b93:	eb 22                	jmp    c0018bb7 <Vm::faultHandler(regs*)+0x8fc>
c0018b95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018b9b:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018b9f:	eb 16                	jmp    c0018bb7 <Vm::faultHandler(regs*)+0x8fc>
c0018ba1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ba4:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ba6:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018baa:	eb 0b                	jmp    c0018bb7 <Vm::faultHandler(regs*)+0x8fc>
c0018bac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018baf:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0018bb2:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018bb6:	90                   	nop
c0018bb7:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018bbb:	85 c0                	test   eax,eax
c0018bbd:	74 7a                	je     c0018c39 <Vm::faultHandler(regs*)+0x97e>
c0018bbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bc2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018bc5:	3d ff ff 00 00       	cmp    eax,0xffff
c0018bca:	76 6d                	jbe    c0018c39 <Vm::faultHandler(regs*)+0x97e>
c0018bcc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018bcf:	83 c0 05             	add    eax,0x5
c0018bd2:	8a 00                	mov    al,BYTE PTR [eax]
c0018bd4:	0f b6 c0             	movzx  eax,al
c0018bd7:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018bdd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018be0:	83 c0 04             	add    eax,0x4
c0018be3:	8a 00                	mov    al,BYTE PTR [eax]
c0018be5:	0f b6 f8             	movzx  edi,al
c0018be8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018beb:	83 c0 03             	add    eax,0x3
c0018bee:	8a 00                	mov    al,BYTE PTR [eax]
c0018bf0:	0f b6 f0             	movzx  esi,al
c0018bf3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018bf6:	83 c0 02             	add    eax,0x2
c0018bf9:	8a 00                	mov    al,BYTE PTR [eax]
c0018bfb:	0f b6 d8             	movzx  ebx,al
c0018bfe:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018c01:	83 c0 01             	add    eax,0x1
c0018c04:	8a 00                	mov    al,BYTE PTR [eax]
c0018c06:	0f b6 c8             	movzx  ecx,al
c0018c09:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018c0c:	8a 00                	mov    al,BYTE PTR [eax]
c0018c0e:	0f b6 d0             	movzx  edx,al
c0018c11:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018c14:	8a 00                	mov    al,BYTE PTR [eax]
c0018c16:	0f b6 c0             	movzx  eax,al
c0018c19:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018c1f:	57                   	push   edi
c0018c20:	56                   	push   esi
c0018c21:	53                   	push   ebx
c0018c22:	51                   	push   ecx
c0018c23:	52                   	push   edx
c0018c24:	50                   	push   eax
c0018c25:	68 58 aa 02 c0       	push   0xc002aa58
c0018c2a:	e8 37 e3 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018c2f:	83 c4 20             	add    esp,0x20
c0018c32:	b0 00                	mov    al,0x0
c0018c34:	e9 c5 04 00 00       	jmp    c00190fe <Vm::faultHandler(regs*)+0xe43>
c0018c39:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018c3d:	85 c0                	test   eax,eax
c0018c3f:	74 6c                	je     c0018cad <Vm::faultHandler(regs*)+0x9f2>
c0018c41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c44:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018c47:	0f b7 d0             	movzx  edx,ax
c0018c4a:	0f b7 45 dc          	movzx  eax,WORD PTR [ebp-0x24]
c0018c4e:	83 ec 08             	sub    esp,0x8
c0018c51:	52                   	push   edx
c0018c52:	50                   	push   eax
c0018c53:	e8 fb f4 ff ff       	call   c0018153 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0018c58:	83 c4 10             	add    esp,0x10
c0018c5b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018c5e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0018c61:	0f b7 d2             	movzx  edx,dx
c0018c64:	66 89 55 9a          	mov    WORD PTR [ebp-0x66],dx
c0018c68:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
c0018c6b:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
c0018c6e:	66 8b 55 9a          	mov    dx,WORD PTR [ebp-0x66]
c0018c72:	ef                   	out    dx,eax
c0018c73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c76:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018c79:	25 00 04 00 00       	and    eax,0x400
c0018c7e:	85 c0                	test   eax,eax
c0018c80:	74 17                	je     c0018c99 <Vm::faultHandler(regs*)+0x9de>
c0018c82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c85:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018c88:	83 e8 04             	sub    eax,0x4
c0018c8b:	0f b7 d0             	movzx  edx,ax
c0018c8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c91:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018c94:	e9 80 00 00 00       	jmp    c0018d19 <Vm::faultHandler(regs*)+0xa5e>
c0018c99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c9c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018c9f:	83 c0 04             	add    eax,0x4
c0018ca2:	0f b7 d0             	movzx  edx,ax
c0018ca5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ca8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018cab:	eb 6c                	jmp    c0018d19 <Vm::faultHandler(regs*)+0xa5e>
c0018cad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018cb0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018cb3:	0f b7 d0             	movzx  edx,ax
c0018cb6:	0f b7 45 dc          	movzx  eax,WORD PTR [ebp-0x24]
c0018cba:	83 ec 08             	sub    esp,0x8
c0018cbd:	52                   	push   edx
c0018cbe:	50                   	push   eax
c0018cbf:	e8 3b f4 ff ff       	call   c00180ff <Vm::readWordFromReal(unsigned short, unsigned short)>
c0018cc4:	83 c4 10             	add    esp,0x10
c0018cc7:	0f b7 c0             	movzx  eax,ax
c0018cca:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018ccd:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0018cd0:	0f b7 d2             	movzx  edx,dx
c0018cd3:	66 89 55 92          	mov    WORD PTR [ebp-0x6e],dx
c0018cd7:	66 89 45 90          	mov    WORD PTR [ebp-0x70],ax
c0018cdb:	8b 45 90             	mov    eax,DWORD PTR [ebp-0x70]
c0018cde:	66 8b 55 92          	mov    dx,WORD PTR [ebp-0x6e]
c0018ce2:	66 ef                	out    dx,ax
c0018ce4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ce7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018cea:	25 00 04 00 00       	and    eax,0x400
c0018cef:	85 c0                	test   eax,eax
c0018cf1:	74 14                	je     c0018d07 <Vm::faultHandler(regs*)+0xa4c>
c0018cf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018cf6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018cf9:	83 e8 02             	sub    eax,0x2
c0018cfc:	0f b7 d0             	movzx  edx,ax
c0018cff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d02:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018d05:	eb 12                	jmp    c0018d19 <Vm::faultHandler(regs*)+0xa5e>
c0018d07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d0a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018d0d:	83 c0 02             	add    eax,0x2
c0018d10:	0f b7 d0             	movzx  edx,ax
c0018d13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d16:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018d19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d1c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018d1f:	8d 50 01             	lea    edx,[eax+0x1]
c0018d22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d25:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018d28:	b0 01                	mov    al,0x1
c0018d2a:	e9 cf 03 00 00       	jmp    c00190fe <Vm::faultHandler(regs*)+0xe43>
c0018d2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d32:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018d35:	b0 00                	mov    al,0x0
c0018d37:	89 c2                	mov    edx,eax
c0018d39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d3c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018d3f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018d42:	83 c0 01             	add    eax,0x1
c0018d45:	8a 00                	mov    al,BYTE PTR [eax]
c0018d47:	0f b6 c0             	movzx  eax,al
c0018d4a:	83 ec 0c             	sub    esp,0xc
c0018d4d:	50                   	push   eax
c0018d4e:	e8 1e eb ff ff       	call   c0017871 <Vm::inbv(unsigned short)>
c0018d53:	83 c4 10             	add    esp,0x10
c0018d56:	88 c1                	mov    cl,al
c0018d58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d5b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0018d5e:	0f b6 c1             	movzx  eax,cl
c0018d61:	09 c2                	or     edx,eax
c0018d63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d66:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018d69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d6c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018d6f:	8d 50 02             	lea    edx,[eax+0x2]
c0018d72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d75:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018d78:	b0 01                	mov    al,0x1
c0018d7a:	e9 7f 03 00 00       	jmp    c00190fe <Vm::faultHandler(regs*)+0xe43>
c0018d7f:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018d83:	85 c0                	test   eax,eax
c0018d85:	74 24                	je     c0018dab <Vm::faultHandler(regs*)+0xaf0>
c0018d87:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018d8a:	83 c0 01             	add    eax,0x1
c0018d8d:	8a 00                	mov    al,BYTE PTR [eax]
c0018d8f:	0f b6 c0             	movzx  eax,al
c0018d92:	66 89 45 8e          	mov    WORD PTR [ebp-0x72],ax
c0018d96:	66 8b 45 8e          	mov    ax,WORD PTR [ebp-0x72]
c0018d9a:	89 c2                	mov    edx,eax
c0018d9c:	ed                   	in     eax,dx
c0018d9d:	89 45 88             	mov    DWORD PTR [ebp-0x78],eax
c0018da0:	8b 55 88             	mov    edx,DWORD PTR [ebp-0x78]
c0018da3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018da6:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018da9:	eb 42                	jmp    c0018ded <Vm::faultHandler(regs*)+0xb32>
c0018dab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018dae:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018db1:	25 00 00 ff ff       	and    eax,0xffff0000
c0018db6:	89 c2                	mov    edx,eax
c0018db8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018dbb:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018dbe:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018dc1:	83 c0 01             	add    eax,0x1
c0018dc4:	8a 00                	mov    al,BYTE PTR [eax]
c0018dc6:	0f b6 c0             	movzx  eax,al
c0018dc9:	66 89 45 86          	mov    WORD PTR [ebp-0x7a],ax
c0018dcd:	66 8b 45 86          	mov    ax,WORD PTR [ebp-0x7a]
c0018dd1:	89 c2                	mov    edx,eax
c0018dd3:	66 ed                	in     ax,dx
c0018dd5:	66 89 45 84          	mov    WORD PTR [ebp-0x7c],ax
c0018dd9:	8b 4d 84             	mov    ecx,DWORD PTR [ebp-0x7c]
c0018ddc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ddf:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0018de2:	0f b7 c1             	movzx  eax,cx
c0018de5:	09 c2                	or     edx,eax
c0018de7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018dea:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018ded:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018df0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018df3:	8d 50 02             	lea    edx,[eax+0x2]
c0018df6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018df9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018dfc:	b0 01                	mov    al,0x1
c0018dfe:	e9 fb 02 00 00       	jmp    c00190fe <Vm::faultHandler(regs*)+0xe43>
c0018e03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e06:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018e09:	0f b6 d0             	movzx  edx,al
c0018e0c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018e0f:	83 c0 01             	add    eax,0x1
c0018e12:	8a 00                	mov    al,BYTE PTR [eax]
c0018e14:	0f b6 c0             	movzx  eax,al
c0018e17:	83 ec 08             	sub    esp,0x8
c0018e1a:	52                   	push   edx
c0018e1b:	50                   	push   eax
c0018e1c:	e8 87 ea ff ff       	call   c00178a8 <Vm::outbv(unsigned short, unsigned char)>
c0018e21:	83 c4 10             	add    esp,0x10
c0018e24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e27:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018e2a:	8d 50 02             	lea    edx,[eax+0x2]
c0018e2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e30:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018e33:	b0 01                	mov    al,0x1
c0018e35:	e9 c4 02 00 00       	jmp    c00190fe <Vm::faultHandler(regs*)+0xe43>
c0018e3a:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018e3e:	85 c0                	test   eax,eax
c0018e40:	74 28                	je     c0018e6a <Vm::faultHandler(regs*)+0xbaf>
c0018e42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e45:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018e48:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0018e4b:	83 c2 01             	add    edx,0x1
c0018e4e:	8a 12                	mov    dl,BYTE PTR [edx]
c0018e50:	0f b6 d2             	movzx  edx,dl
c0018e53:	66 89 55 82          	mov    WORD PTR [ebp-0x7e],dx
c0018e57:	89 85 7c ff ff ff    	mov    DWORD PTR [ebp-0x84],eax
c0018e5d:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [ebp-0x84]
c0018e63:	66 8b 55 82          	mov    dx,WORD PTR [ebp-0x7e]
c0018e67:	ef                   	out    dx,eax
c0018e68:	eb 31                	jmp    c0018e9b <Vm::faultHandler(regs*)+0xbe0>
c0018e6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e6d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018e70:	0f b7 c0             	movzx  eax,ax
c0018e73:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0018e76:	83 c2 01             	add    edx,0x1
c0018e79:	8a 12                	mov    dl,BYTE PTR [edx]
c0018e7b:	0f b6 d2             	movzx  edx,dl
c0018e7e:	66 89 95 7a ff ff ff 	mov    WORD PTR [ebp-0x86],dx
c0018e85:	66 89 85 78 ff ff ff 	mov    WORD PTR [ebp-0x88],ax
c0018e8c:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [ebp-0x88]
c0018e92:	66 8b 95 7a ff ff ff 	mov    dx,WORD PTR [ebp-0x86]
c0018e99:	66 ef                	out    dx,ax
c0018e9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e9e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018ea1:	8d 50 02             	lea    edx,[eax+0x2]
c0018ea4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ea7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018eaa:	b0 01                	mov    al,0x1
c0018eac:	e9 4d 02 00 00       	jmp    c00190fe <Vm::faultHandler(regs*)+0xe43>
c0018eb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018eb4:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018eb7:	b0 00                	mov    al,0x0
c0018eb9:	89 c2                	mov    edx,eax
c0018ebb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ebe:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018ec1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ec4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018ec7:	0f b7 c0             	movzx  eax,ax
c0018eca:	83 ec 0c             	sub    esp,0xc
c0018ecd:	50                   	push   eax
c0018ece:	e8 9e e9 ff ff       	call   c0017871 <Vm::inbv(unsigned short)>
c0018ed3:	83 c4 10             	add    esp,0x10
c0018ed6:	88 c1                	mov    cl,al
c0018ed8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018edb:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0018ede:	0f b6 c1             	movzx  eax,cl
c0018ee1:	09 c2                	or     edx,eax
c0018ee3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ee6:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018ee9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018eec:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018eef:	8d 50 01             	lea    edx,[eax+0x1]
c0018ef2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ef5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018ef8:	b0 01                	mov    al,0x1
c0018efa:	e9 ff 01 00 00       	jmp    c00190fe <Vm::faultHandler(regs*)+0xe43>
c0018eff:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018f03:	85 c0                	test   eax,eax
c0018f05:	74 2e                	je     c0018f35 <Vm::faultHandler(regs*)+0xc7a>
c0018f07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f0a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018f0d:	0f b7 c0             	movzx  eax,ax
c0018f10:	66 89 85 76 ff ff ff 	mov    WORD PTR [ebp-0x8a],ax
c0018f17:	66 8b 85 76 ff ff ff 	mov    ax,WORD PTR [ebp-0x8a]
c0018f1e:	89 c2                	mov    edx,eax
c0018f20:	ed                   	in     eax,dx
c0018f21:	89 85 70 ff ff ff    	mov    DWORD PTR [ebp-0x90],eax
c0018f27:	8b 95 70 ff ff ff    	mov    edx,DWORD PTR [ebp-0x90]
c0018f2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f30:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018f33:	eb 4c                	jmp    c0018f81 <Vm::faultHandler(regs*)+0xcc6>
c0018f35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f38:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018f3b:	25 00 00 ff ff       	and    eax,0xffff0000
c0018f40:	89 c2                	mov    edx,eax
c0018f42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f45:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018f48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f4b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018f4e:	0f b7 c0             	movzx  eax,ax
c0018f51:	66 89 85 6e ff ff ff 	mov    WORD PTR [ebp-0x92],ax
c0018f58:	66 8b 85 6e ff ff ff 	mov    ax,WORD PTR [ebp-0x92]
c0018f5f:	89 c2                	mov    edx,eax
c0018f61:	66 ed                	in     ax,dx
c0018f63:	66 89 85 6c ff ff ff 	mov    WORD PTR [ebp-0x94],ax
c0018f6a:	8b 8d 6c ff ff ff    	mov    ecx,DWORD PTR [ebp-0x94]
c0018f70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f73:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0018f76:	0f b7 c1             	movzx  eax,cx
c0018f79:	09 c2                	or     edx,eax
c0018f7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f7e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018f81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f84:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018f87:	8d 50 01             	lea    edx,[eax+0x1]
c0018f8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f8d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018f90:	b0 01                	mov    al,0x1
c0018f92:	e9 67 01 00 00       	jmp    c00190fe <Vm::faultHandler(regs*)+0xe43>
c0018f97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f9a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018f9d:	0f b6 d0             	movzx  edx,al
c0018fa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fa3:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018fa6:	0f b7 c0             	movzx  eax,ax
c0018fa9:	83 ec 08             	sub    esp,0x8
c0018fac:	52                   	push   edx
c0018fad:	50                   	push   eax
c0018fae:	e8 f5 e8 ff ff       	call   c00178a8 <Vm::outbv(unsigned short, unsigned char)>
c0018fb3:	83 c4 10             	add    esp,0x10
c0018fb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fb9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018fbc:	8d 50 01             	lea    edx,[eax+0x1]
c0018fbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fc2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018fc5:	b0 01                	mov    al,0x1
c0018fc7:	e9 32 01 00 00       	jmp    c00190fe <Vm::faultHandler(regs*)+0xe43>
c0018fcc:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018fd0:	85 c0                	test   eax,eax
c0018fd2:	74 2c                	je     c0019000 <Vm::faultHandler(regs*)+0xd45>
c0018fd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fd7:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018fda:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018fdd:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0018fe0:	0f b7 d2             	movzx  edx,dx
c0018fe3:	66 89 95 6a ff ff ff 	mov    WORD PTR [ebp-0x96],dx
c0018fea:	89 85 64 ff ff ff    	mov    DWORD PTR [ebp-0x9c],eax
c0018ff0:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [ebp-0x9c]
c0018ff6:	66 8b 95 6a ff ff ff 	mov    dx,WORD PTR [ebp-0x96]
c0018ffd:	ef                   	out    dx,eax
c0018ffe:	eb 2f                	jmp    c001902f <Vm::faultHandler(regs*)+0xd74>
c0019000:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019003:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019006:	0f b7 c0             	movzx  eax,ax
c0019009:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001900c:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001900f:	0f b7 d2             	movzx  edx,dx
c0019012:	66 89 95 62 ff ff ff 	mov    WORD PTR [ebp-0x9e],dx
c0019019:	66 89 85 60 ff ff ff 	mov    WORD PTR [ebp-0xa0],ax
c0019020:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [ebp-0xa0]
c0019026:	66 8b 95 62 ff ff ff 	mov    dx,WORD PTR [ebp-0x9e]
c001902d:	66 ef                	out    dx,ax
c001902f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019032:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019035:	8d 50 01             	lea    edx,[eax+0x1]
c0019038:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001903b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001903e:	b0 01                	mov    al,0x1
c0019040:	e9 b9 00 00 00       	jmp    c00190fe <Vm::faultHandler(regs*)+0xe43>
c0019045:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019048:	83 c0 05             	add    eax,0x5
c001904b:	8a 00                	mov    al,BYTE PTR [eax]
c001904d:	0f b6 c0             	movzx  eax,al
c0019050:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0019056:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019059:	83 c0 04             	add    eax,0x4
c001905c:	8a 00                	mov    al,BYTE PTR [eax]
c001905e:	0f b6 f8             	movzx  edi,al
c0019061:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019064:	83 c0 03             	add    eax,0x3
c0019067:	8a 00                	mov    al,BYTE PTR [eax]
c0019069:	0f b6 f0             	movzx  esi,al
c001906c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001906f:	83 c0 02             	add    eax,0x2
c0019072:	8a 00                	mov    al,BYTE PTR [eax]
c0019074:	0f b6 d8             	movzx  ebx,al
c0019077:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001907a:	83 c0 01             	add    eax,0x1
c001907d:	8a 00                	mov    al,BYTE PTR [eax]
c001907f:	0f b6 c8             	movzx  ecx,al
c0019082:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019085:	8a 00                	mov    al,BYTE PTR [eax]
c0019087:	0f b6 d0             	movzx  edx,al
c001908a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001908d:	8a 00                	mov    al,BYTE PTR [eax]
c001908f:	0f b6 c0             	movzx  eax,al
c0019092:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0019098:	57                   	push   edi
c0019099:	56                   	push   esi
c001909a:	53                   	push   ebx
c001909b:	51                   	push   ecx
c001909c:	52                   	push   edx
c001909d:	50                   	push   eax
c001909e:	68 88 aa 02 c0       	push   0xc002aa88
c00190a3:	e8 be de fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00190a8:	83 c4 20             	add    esp,0x20
c00190ab:	83 ec 0c             	sub    esp,0xc
c00190ae:	6a 60                	push   0x60
c00190b0:	e8 bc e7 ff ff       	call   c0017871 <Vm::inbv(unsigned short)>
c00190b5:	83 c4 10             	add    esp,0x10
c00190b8:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00190bb:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c00190bf:	83 f8 1c             	cmp    eax,0x1c
c00190c2:	74 09                	je     c00190cd <Vm::faultHandler(regs*)+0xe12>
c00190c4:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c00190c8:	83 f8 5a             	cmp    eax,0x5a
c00190cb:	75 24                	jne    c00190f1 <Vm::faultHandler(regs*)+0xe36>
c00190cd:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c00190d1:	83 f8 1c             	cmp    eax,0x1c
c00190d4:	74 09                	je     c00190df <Vm::faultHandler(regs*)+0xe24>
c00190d6:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c00190da:	83 f8 5a             	cmp    eax,0x5a
c00190dd:	75 15                	jne    c00190f4 <Vm::faultHandler(regs*)+0xe39>
c00190df:	83 ec 0c             	sub    esp,0xc
c00190e2:	6a 60                	push   0x60
c00190e4:	e8 88 e7 ff ff       	call   c0017871 <Vm::inbv(unsigned short)>
c00190e9:	83 c4 10             	add    esp,0x10
c00190ec:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00190ef:	eb dc                	jmp    c00190cd <Vm::faultHandler(regs*)+0xe12>
c00190f1:	90                   	nop
c00190f2:	eb b7                	jmp    c00190ab <Vm::faultHandler(regs*)+0xdf0>
c00190f4:	90                   	nop
c00190f5:	b0 00                	mov    al,0x0
c00190f7:	eb 05                	jmp    c00190fe <Vm::faultHandler(regs*)+0xe43>
c00190f9:	e9 39 f2 ff ff       	jmp    c0018337 <Vm::faultHandler(regs*)+0x7c>
c00190fe:	8d 65 f4             	lea    esp,[ebp-0xc]
c0019101:	5b                   	pop    ebx
c0019102:	5e                   	pop    esi
c0019103:	5f                   	pop    edi
c0019104:	5d                   	pop    ebp
c0019105:	c3                   	ret    

c0019106 <IOAPIC::close(int, int, void*)>:
c0019106:	b8 00 00 00 00       	mov    eax,0x0
c001910b:	c3                   	ret    

c001910c <apicGetBase()>:
c001910c:	55                   	push   ebp
c001910d:	89 e5                	mov    ebp,esp
c001910f:	83 ec 18             	sub    esp,0x18
c0019112:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0019117:	83 e0 08             	and    eax,0x8
c001911a:	0f b6 c0             	movzx  eax,al
c001911d:	85 c0                	test   eax,eax
c001911f:	75 07                	jne    c0019128 <apicGetBase()+0x1c>
c0019121:	b8 00 00 00 00       	mov    eax,0x0
c0019126:	eb 1b                	jmp    c0019143 <apicGetBase()+0x37>
c0019128:	83 ec 0c             	sub    esp,0xc
c001912b:	6a 1b                	push   0x1b
c001912d:	e8 74 15 00 00       	call   c001a6a6 <x86rdmsr(unsigned int)>
c0019132:	83 c4 10             	add    esp,0x10
c0019135:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0019138:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001913b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001913e:	25 00 00 ff ff       	and    eax,0xffff0000
c0019143:	c9                   	leave  
c0019144:	c3                   	ret    
c0019145:	90                   	nop

c0019146 <IOAPIC::IOAPIC()>:
c0019146:	83 ec 0c             	sub    esp,0xc
c0019149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001914d:	83 ec 08             	sub    esp,0x8
c0019150:	68 48 ae 02 c0       	push   0xc002ae48
c0019155:	50                   	push   eax
c0019156:	e8 49 12 ff ff       	call   c000a3a4 <Device::Device(char const*)>
c001915b:	83 c4 10             	add    esp,0x10
c001915e:	ba 68 ae 02 c0       	mov    edx,0xc002ae68
c0019163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019167:	89 10                	mov    DWORD PTR [eax],edx
c0019169:	90                   	nop
c001916a:	83 c4 0c             	add    esp,0xc
c001916d:	c3                   	ret    

c001916e <apicOpen()>:
c001916e:	55                   	push   ebp
c001916f:	89 e5                	mov    ebp,esp
c0019171:	53                   	push   ebx
c0019172:	83 ec 34             	sub    esp,0x34
c0019175:	83 ec 0c             	sub    esp,0xc
c0019178:	68 50 ae 02 c0       	push   0xc002ae50
c001917d:	e8 e4 dd fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019182:	83 c4 10             	add    esp,0x10
c0019185:	a0 00 34 03 c0       	mov    al,ds:0xc0033400
c001918a:	83 f0 01             	xor    eax,0x1
c001918d:	0f b6 c0             	movzx  eax,al
c0019190:	85 c0                	test   eax,eax
c0019192:	0f 84 a3 00 00 00    	je     c001923b <apicOpen()+0xcd>
c0019198:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001919c:	a0 40 2e 03 c0       	mov    al,ds:0xc0032e40
c00191a1:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c00191a5:	0f b6 c0             	movzx  eax,al
c00191a8:	39 c2                	cmp    edx,eax
c00191aa:	0f 83 84 00 00 00    	jae    c0019234 <apicOpen()+0xc6>
c00191b0:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c00191b7:	83 ec 0c             	sub    esp,0xc
c00191ba:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00191bd:	e8 12 6d ff ff       	call   c000fed4 <malloc>
c00191c2:	83 c4 10             	add    esp,0x10
c00191c5:	89 c3                	mov    ebx,eax
c00191c7:	83 ec 0c             	sub    esp,0xc
c00191ca:	53                   	push   ebx
c00191cb:	e8 76 ff ff ff       	call   c0019146 <IOAPIC::IOAPIC()>
c00191d0:	83 c4 10             	add    esp,0x10
c00191d3:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00191d6:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c00191da:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00191dd:	89 14 85 e0 33 03 c0 	mov    DWORD PTR [eax*4-0x3ffccc20],edx
c00191e4:	a1 c0 33 03 c0       	mov    eax,ds:0xc00333c0
c00191e9:	83 c0 01             	add    eax,0x1
c00191ec:	a3 c0 33 03 c0       	mov    ds:0xc00333c0,eax
c00191f1:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c00191f6:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00191fc:	83 ec 08             	sub    esp,0x8
c00191ff:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0019202:	50                   	push   eax
c0019203:	e8 3a 10 ff ff       	call   c000a242 <Device::addChild(Device*)>
c0019208:	83 c4 10             	add    esp,0x10
c001920b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001920e:	8b 00                	mov    eax,DWORD PTR [eax]
c0019210:	83 c0 08             	add    eax,0x8
c0019213:	8b 00                	mov    eax,DWORD PTR [eax]
c0019215:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0019219:	6a 00                	push   0x0
c001921b:	6a 00                	push   0x0
c001921d:	52                   	push   edx
c001921e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0019221:	ff d0                	call   eax
c0019223:	83 c4 10             	add    esp,0x10
c0019226:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c0019229:	83 c0 01             	add    eax,0x1
c001922c:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001922f:	e9 68 ff ff ff       	jmp    c001919c <apicOpen()+0x2e>
c0019234:	c6 05 00 34 03 c0 01 	mov    BYTE PTR ds:0xc0033400,0x1
c001923b:	e8 cc fe ff ff       	call   c001910c <apicGetBase()>
c0019240:	05 f0 00 00 00       	add    eax,0xf0
c0019245:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019248:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001924b:	8b 00                	mov    eax,DWORD PTR [eax]
c001924d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0019250:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c0019257:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001925e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0019261:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0019264:	89 10                	mov    DWORD PTR [eax],edx
c0019266:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001926d:	a1 8c 2d 03 c0       	mov    eax,ds:0xc0032d8c
c0019272:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c0019275:	7d 7c                	jge    c00192f3 <apicOpen()+0x185>
c0019277:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001927a:	8b 04 85 a0 2d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd260]
c0019281:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c0019284:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0019287:	8b 04 85 a0 2d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd260]
c001928e:	c1 e8 08             	shr    eax,0x8
c0019291:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0019295:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0019298:	8b 04 85 a0 2d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd260]
c001929f:	c1 e8 18             	shr    eax,0x18
c00192a2:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00192a5:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c00192a9:	3d ff 00 00 00       	cmp    eax,0xff
c00192ae:	75 3a                	jne    c00192ea <apicOpen()+0x17c>
c00192b0:	e8 57 fe ff ff       	call   c001910c <apicGetBase()>
c00192b5:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c00192b9:	83 fa 01             	cmp    edx,0x1
c00192bc:	75 07                	jne    c00192c5 <apicOpen()+0x157>
c00192be:	ba 60 03 00 00       	mov    edx,0x360
c00192c3:	eb 05                	jmp    c00192ca <apicOpen()+0x15c>
c00192c5:	ba 50 03 00 00       	mov    edx,0x350
c00192ca:	01 d0                	add    eax,edx
c00192cc:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00192cf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00192d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00192d4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00192d7:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c00192de:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c00192e2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00192e5:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00192e8:	89 10                	mov    DWORD PTR [eax],edx
c00192ea:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c00192ee:	e9 7a ff ff ff       	jmp    c001926d <apicOpen()+0xff>
c00192f3:	90                   	nop
c00192f4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00192f7:	c9                   	leave  
c00192f8:	c3                   	ret    
c00192f9:	90                   	nop

c00192fa <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00192fa:	55                   	push   ebp
c00192fb:	89 e5                	mov    ebp,esp
c00192fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019300:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019306:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0019309:	72 1d                	jb     c0019328 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001930b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001930e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0019314:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019317:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001931d:	01 d0                	add    eax,edx
c001931f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0019322:	73 04                	jae    c0019328 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0019324:	b0 01                	mov    al,0x1
c0019326:	eb 02                	jmp    c001932a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0019328:	b0 00                	mov    al,0x0
c001932a:	5d                   	pop    ebp
c001932b:	c3                   	ret    

c001932c <IOAPIC::read(int)>:
c001932c:	55                   	push   ebp
c001932d:	89 e5                	mov    ebp,esp
c001932f:	83 ec 10             	sub    esp,0x10
c0019332:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019335:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001933b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001933e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0019341:	0f b6 d0             	movzx  edx,al
c0019344:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0019347:	89 10                	mov    DWORD PTR [eax],edx
c0019349:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001934c:	83 c0 10             	add    eax,0x10
c001934f:	8b 00                	mov    eax,DWORD PTR [eax]
c0019351:	c9                   	leave  
c0019352:	c3                   	ret    
c0019353:	90                   	nop

c0019354 <IOAPIC::open(int, int, void*)>:
c0019354:	55                   	push   ebp
c0019355:	89 e5                	mov    ebp,esp
c0019357:	57                   	push   edi
c0019358:	56                   	push   esi
c0019359:	53                   	push   ebx
c001935a:	83 ec 04             	sub    esp,0x4
c001935d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019360:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0019363:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019369:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001936c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019372:	8b 14 85 80 2e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcd180]
c0019379:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001937c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019382:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019385:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001938b:	8b 14 85 00 2f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcd100]
c0019392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019395:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001939b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001939e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00193a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00193a7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00193ad:	0f b6 f0             	movzx  esi,al
c00193b0:	89 d0                	mov    eax,edx
c00193b2:	ba 00 00 00 00       	mov    edx,0x0
c00193b7:	89 c7                	mov    edi,eax
c00193b9:	83 e7 ff             	and    edi,0xffffffff
c00193bc:	89 f9                	mov    ecx,edi
c00193be:	0f b6 da             	movzx  ebx,dl
c00193c1:	89 c8                	mov    eax,ecx
c00193c3:	89 da                	mov    edx,ebx
c00193c5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00193c8:	8d 5e 08             	lea    ebx,[esi+0x8]
c00193cb:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00193cf:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00193d3:	83 e0 00             	and    eax,0x0
c00193d6:	09 d0                	or     eax,edx
c00193d8:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00193dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00193df:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00193e5:	8d 50 01             	lea    edx,[eax+0x1]
c00193e8:	88 d1                	mov    cl,dl
c00193ea:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00193ed:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c00193f3:	0f b6 d0             	movzx  edx,al
c00193f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00193f9:	83 c2 08             	add    edx,0x8
c00193fc:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0019400:	0f b6 c9             	movzx  ecx,cl
c0019403:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0019409:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001940d:	6a 01                	push   0x1
c001940f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019412:	e8 15 ff ff ff       	call   c001932c <IOAPIC::read(int)>
c0019417:	83 c4 08             	add    esp,0x8
c001941a:	c1 f8 10             	sar    eax,0x10
c001941d:	0f b6 c0             	movzx  eax,al
c0019420:	8d 50 01             	lea    edx,[eax+0x1]
c0019423:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019426:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001942c:	b8 00 00 00 00       	mov    eax,0x0
c0019431:	8d 65 f4             	lea    esp,[ebp-0xc]
c0019434:	5b                   	pop    ebx
c0019435:	5e                   	pop    esi
c0019436:	5f                   	pop    edi
c0019437:	5d                   	pop    ebp
c0019438:	c3                   	ret    
c0019439:	90                   	nop

c001943a <IOAPIC::write(int, int)>:
c001943a:	55                   	push   ebp
c001943b:	89 e5                	mov    ebp,esp
c001943d:	83 ec 10             	sub    esp,0x10
c0019440:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019443:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019449:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001944c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001944f:	0f b6 d0             	movzx  edx,al
c0019452:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0019455:	89 10                	mov    DWORD PTR [eax],edx
c0019457:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001945a:	8d 50 10             	lea    edx,[eax+0x10]
c001945d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0019460:	89 02                	mov    DWORD PTR [edx],eax
c0019462:	90                   	nop
c0019463:	c9                   	leave  
c0019464:	c3                   	ret    
c0019465:	90                   	nop

c0019466 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0019466:	55                   	push   ebp
c0019467:	89 e5                	mov    ebp,esp
c0019469:	53                   	push   ebx
c001946a:	83 ec 2c             	sub    esp,0x2c
c001946d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0019470:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0019473:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0019476:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0019479:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001947c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001947f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0019482:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0019485:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0019488:	88 d8                	mov    al,bl
c001948a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001948d:	88 c8                	mov    al,cl
c001948f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0019492:	88 d0                	mov    al,dl
c0019494:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0019497:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001949b:	83 c0 08             	add    eax,0x8
c001949e:	d1 e0                	shl    eax,1
c00194a0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00194a3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00194a7:	83 c0 08             	add    eax,0x8
c00194aa:	d1 e0                	shl    eax,1
c00194ac:	83 c0 01             	add    eax,0x1
c00194af:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00194b2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00194b5:	50                   	push   eax
c00194b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00194b9:	e8 6e fe ff ff       	call   c001932c <IOAPIC::read(int)>
c00194be:	83 c4 08             	add    esp,0x8
c00194c1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00194c4:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00194cb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00194ce:	c1 e0 18             	shl    eax,0x18
c00194d1:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00194d4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00194d7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00194da:	52                   	push   edx
c00194db:	50                   	push   eax
c00194dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00194df:	e8 56 ff ff ff       	call   c001943a <IOAPIC::write(int, int)>
c00194e4:	83 c4 0c             	add    esp,0xc
c00194e7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00194ea:	50                   	push   eax
c00194eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00194ee:	e8 39 fe ff ff       	call   c001932c <IOAPIC::read(int)>
c00194f3:	83 c4 08             	add    esp,0x8
c00194f6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00194f9:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0019500:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0019507:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001950e:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c0019512:	85 c0                	test   eax,eax
c0019514:	74 09                	je     c001951f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c0019516:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001951d:	eb 07                	jmp    c0019526 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001951f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0019526:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001952a:	85 c0                	test   eax,eax
c001952c:	74 09                	je     c0019537 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001952e:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0019535:	eb 07                	jmp    c001953e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c0019537:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001953e:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0019545:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0019549:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001954c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001954f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0019552:	52                   	push   edx
c0019553:	50                   	push   eax
c0019554:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019557:	e8 de fe ff ff       	call   c001943a <IOAPIC::write(int, int)>
c001955c:	83 c4 0c             	add    esp,0xc
c001955f:	90                   	nop
c0019560:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0019563:	c9                   	leave  
c0019564:	c3                   	ret    
c0019565:	90                   	nop

c0019566 <noCopro(unsigned long)>:
c0019566:	c3                   	ret    

c0019567 <HalRestart()>:
c0019567:	e4 64                	in     al,0x64
c0019569:	a8 02                	test   al,0x2
c001956b:	75 fa                	jne    c0019567 <HalRestart()>
c001956d:	b0 fe                	mov    al,0xfe
c001956f:	e6 64                	out    0x64,al
c0019571:	c3                   	ret    

c0019572 <HalShutdown()>:
c0019572:	c3                   	ret    

c0019573 <HalSleep()>:
c0019573:	c3                   	ret    

c0019574 <CPU::close(int, int, void*)>:
c0019574:	31 c0                	xor    eax,eax
c0019576:	c3                   	ret    

c0019577 <x86ReadCMOS(unsigned char)>:
c0019577:	83 ec 14             	sub    esp,0x14
c001957a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001957e:	88 04 24             	mov    BYTE PTR [esp],al
c0019581:	a0 2c 34 03 c0       	mov    al,ds:0xc003342c
c0019586:	0f b6 c0             	movzx  eax,al
c0019589:	85 c0                	test   eax,eax
c001958b:	74 04                	je     c0019591 <x86ReadCMOS(unsigned char)+0x1a>
c001958d:	b2 00                	mov    dl,0x0
c001958f:	eb 02                	jmp    c0019593 <x86ReadCMOS(unsigned char)+0x1c>
c0019591:	b2 80                	mov    dl,0x80
c0019593:	8a 04 24             	mov    al,BYTE PTR [esp]
c0019596:	09 d0                	or     eax,edx
c0019598:	0f b6 c0             	movzx  eax,al
c001959b:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c00195a2:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00195a6:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00195aa:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00195af:	ee                   	out    dx,al
c00195b0:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c00195b7:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00195bc:	89 c2                	mov    edx,eax
c00195be:	ec                   	in     al,dx
c00195bf:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00195c3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00195c7:	83 c4 14             	add    esp,0x14
c00195ca:	c3                   	ret    

c00195cb <x86WriteCMOS(unsigned char, unsigned char)>:
c00195cb:	83 ec 18             	sub    esp,0x18
c00195ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00195d2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00195d6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00195da:	88 d0                	mov    al,dl
c00195dc:	88 04 24             	mov    BYTE PTR [esp],al
c00195df:	a0 2c 34 03 c0       	mov    al,ds:0xc003342c
c00195e4:	0f b6 c0             	movzx  eax,al
c00195e7:	85 c0                	test   eax,eax
c00195e9:	74 04                	je     c00195ef <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c00195eb:	b2 00                	mov    dl,0x0
c00195ed:	eb 02                	jmp    c00195f1 <x86WriteCMOS(unsigned char, unsigned char)+0x26>
c00195ef:	b2 80                	mov    dl,0x80
c00195f1:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00195f5:	09 d0                	or     eax,edx
c00195f7:	0f b6 c0             	movzx  eax,al
c00195fa:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0019601:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019605:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019609:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c001960e:	ee                   	out    dx,al
c001960f:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0019613:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c001961a:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001961e:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0019622:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0019627:	ee                   	out    dx,al
c0019628:	90                   	nop
c0019629:	83 c4 18             	add    esp,0x18
c001962c:	c3                   	ret    

c001962d <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c001962d:	60                   	pusha  
c001962e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019632:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019636:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001963a:	9c                   	pushf  
c001963b:	fa                   	cli    
c001963c:	0f 09                	wbinvd 
c001963e:	0f 30                	wrmsr  
c0019640:	9d                   	popf   
c0019641:	89 c2                	mov    edx,eax
c0019643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019647:	89 10                	mov    DWORD PTR [eax],edx
c0019649:	61                   	popa   
c001964a:	90                   	nop
c001964b:	c3                   	ret    

c001964c <AMD_K6_read_msr(unsigned int, REGS*)>:
c001964c:	60                   	pusha  
c001964d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019651:	89 c1                	mov    ecx,eax
c0019653:	9c                   	pushf  
c0019654:	fa                   	cli    
c0019655:	0f 09                	wbinvd 
c0019657:	31 c0                	xor    eax,eax
c0019659:	31 d2                	xor    edx,edx
c001965b:	0f 32                	rdmsr  
c001965d:	9d                   	popf   
c001965e:	89 c2                	mov    edx,eax
c0019660:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019664:	89 10                	mov    DWORD PTR [eax],edx
c0019666:	61                   	popa   
c0019667:	90                   	nop
c0019668:	c3                   	ret    

c0019669 <AMD_K6_writeback(int, int, int)>:
c0019669:	83 ec 20             	sub    esp,0x20
c001966c:	a1 70 31 03 c0       	mov    eax,ds:0xc0033170
c0019671:	c1 e8 14             	shr    eax,0x14
c0019674:	c1 e8 02             	shr    eax,0x2
c0019677:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001967b:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0019680:	0f 85 9e 00 00 00    	jne    c0019724 <AMD_K6_writeback(int, int, int)+0xbb>
c0019686:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001968a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001968e:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0019693:	75 19                	jne    c00196ae <AMD_K6_writeback(int, int, int)+0x45>
c0019695:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c001969a:	7f 0a                	jg     c00196a6 <AMD_K6_writeback(int, int, int)+0x3d>
c001969c:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c00196a4:	eb 08                	jmp    c00196ae <AMD_K6_writeback(int, int, int)+0x45>
c00196a6:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c00196ae:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c00196b3:	7c 6e                	jl     c0019723 <AMD_K6_writeback(int, int, int)+0xba>
c00196b5:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c00196ba:	7e 09                	jle    c00196c5 <AMD_K6_writeback(int, int, int)+0x5c>
c00196bc:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c00196c1:	74 36                	je     c00196f9 <AMD_K6_writeback(int, int, int)+0x90>
c00196c3:	eb 5e                	jmp    c0019723 <AMD_K6_writeback(int, int, int)+0xba>
c00196c5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00196c9:	50                   	push   eax
c00196ca:	68 82 00 00 c0       	push   0xc0000082
c00196cf:	e8 78 ff ff ff       	call   c001964c <AMD_K6_read_msr(unsigned int, REGS*)>
c00196d4:	83 c4 08             	add    esp,0x8
c00196d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00196db:	d1 e0                	shl    eax,1
c00196dd:	83 e0 7f             	and    eax,0x7f
c00196e0:	89 c2                	mov    edx,eax
c00196e2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00196e6:	50                   	push   eax
c00196e7:	6a 00                	push   0x0
c00196e9:	52                   	push   edx
c00196ea:	68 82 00 00 c0       	push   0xc0000082
c00196ef:	e8 39 ff ff ff       	call   c001962d <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c00196f4:	83 c4 10             	add    esp,0x10
c00196f7:	eb 2b                	jmp    c0019724 <AMD_K6_writeback(int, int, int)+0xbb>
c00196f9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00196fd:	50                   	push   eax
c00196fe:	68 82 00 00 c0       	push   0xc0000082
c0019703:	e8 44 ff ff ff       	call   c001964c <AMD_K6_read_msr(unsigned int, REGS*)>
c0019708:	83 c4 08             	add    esp,0x8
c001970b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001970f:	50                   	push   eax
c0019710:	6a 00                	push   0x0
c0019712:	6a 00                	push   0x0
c0019714:	68 82 00 00 c0       	push   0xc0000082
c0019719:	e8 0f ff ff ff       	call   c001962d <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c001971e:	83 c4 10             	add    esp,0x10
c0019721:	eb 01                	jmp    c0019724 <AMD_K6_writeback(int, int, int)+0xbb>
c0019723:	90                   	nop
c0019724:	90                   	nop
c0019725:	83 c4 20             	add    esp,0x20
c0019728:	c3                   	ret    

c0019729 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0019729:	56                   	push   esi
c001972a:	53                   	push   ebx
c001972b:	a1 20 d7 02 c0       	mov    eax,ds:0xc002d720
c0019730:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0019734:	75 32                	jne    c0019768 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0019736:	8b 15 20 34 03 c0    	mov    edx,DWORD PTR ds:0xc0033420
c001973c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019740:	89 10                	mov    DWORD PTR [eax],edx
c0019742:	8b 15 1c 34 03 c0    	mov    edx,DWORD PTR ds:0xc003341c
c0019748:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001974c:	89 10                	mov    DWORD PTR [eax],edx
c001974e:	8b 15 18 34 03 c0    	mov    edx,DWORD PTR ds:0xc0033418
c0019754:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019758:	89 10                	mov    DWORD PTR [eax],edx
c001975a:	8b 15 14 34 03 c0    	mov    edx,DWORD PTR ds:0xc0033414
c0019760:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019764:	89 10                	mov    DWORD PTR [eax],edx
c0019766:	eb 5c                	jmp    c00197c4 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0019768:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001976c:	ba 00 00 00 00       	mov    edx,0x0
c0019771:	89 d1                	mov    ecx,edx
c0019773:	0f a2                	cpuid  
c0019775:	89 c6                	mov    esi,eax
c0019777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001977b:	89 30                	mov    DWORD PTR [eax],esi
c001977d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019781:	89 18                	mov    DWORD PTR [eax],ebx
c0019783:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019787:	89 08                	mov    DWORD PTR [eax],ecx
c0019789:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001978d:	89 10                	mov    DWORD PTR [eax],edx
c001978f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019793:	a3 20 d7 02 c0       	mov    ds:0xc002d720,eax
c0019798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001979c:	8b 00                	mov    eax,DWORD PTR [eax]
c001979e:	a3 20 34 03 c0       	mov    ds:0xc0033420,eax
c00197a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00197a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00197a9:	a3 1c 34 03 c0       	mov    ds:0xc003341c,eax
c00197ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00197b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00197b4:	a3 18 34 03 c0       	mov    ds:0xc0033418,eax
c00197b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00197bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00197bf:	a3 14 34 03 c0       	mov    ds:0xc0033414,eax
c00197c4:	5b                   	pop    ebx
c00197c5:	5e                   	pop    esi
c00197c6:	c3                   	ret    

c00197c7 <cpuidCheckEDX(unsigned int)>:
c00197c7:	83 ec 10             	sub    esp,0x10
c00197ca:	89 e0                	mov    eax,esp
c00197cc:	50                   	push   eax
c00197cd:	8d 44 24 08          	lea    eax,[esp+0x8]
c00197d1:	50                   	push   eax
c00197d2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00197d6:	50                   	push   eax
c00197d7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00197db:	50                   	push   eax
c00197dc:	6a 01                	push   0x1
c00197de:	e8 46 ff ff ff       	call   c0019729 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00197e3:	83 c4 14             	add    esp,0x14
c00197e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00197e9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00197ed:	0f 95 c0             	setne  al
c00197f0:	83 c4 10             	add    esp,0x10
c00197f3:	c3                   	ret    

c00197f4 <cpuidCheckECX(unsigned int)>:
c00197f4:	83 ec 10             	sub    esp,0x10
c00197f7:	89 e0                	mov    eax,esp
c00197f9:	50                   	push   eax
c00197fa:	8d 44 24 08          	lea    eax,[esp+0x8]
c00197fe:	50                   	push   eax
c00197ff:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019803:	50                   	push   eax
c0019804:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019808:	50                   	push   eax
c0019809:	6a 01                	push   0x1
c001980b:	e8 19 ff ff ff       	call   c0019729 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019810:	83 c4 14             	add    esp,0x14
c0019813:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019817:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c001981b:	0f 95 c0             	setne  al
c001981e:	83 c4 10             	add    esp,0x10
c0019821:	c3                   	ret    

c0019822 <cpuidCheckExtendedEBX(unsigned int)>:
c0019822:	83 ec 10             	sub    esp,0x10
c0019825:	89 e0                	mov    eax,esp
c0019827:	50                   	push   eax
c0019828:	8d 44 24 08          	lea    eax,[esp+0x8]
c001982c:	50                   	push   eax
c001982d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019831:	50                   	push   eax
c0019832:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019836:	50                   	push   eax
c0019837:	6a 07                	push   0x7
c0019839:	e8 eb fe ff ff       	call   c0019729 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001983e:	83 c4 14             	add    esp,0x14
c0019841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019845:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019849:	0f 95 c0             	setne  al
c001984c:	83 c4 10             	add    esp,0x10
c001984f:	c3                   	ret    

c0019850 <cpuidCheckExtendedECX(unsigned int)>:
c0019850:	83 ec 10             	sub    esp,0x10
c0019853:	89 e0                	mov    eax,esp
c0019855:	50                   	push   eax
c0019856:	8d 44 24 08          	lea    eax,[esp+0x8]
c001985a:	50                   	push   eax
c001985b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001985f:	50                   	push   eax
c0019860:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019864:	50                   	push   eax
c0019865:	6a 07                	push   0x7
c0019867:	e8 bd fe ff ff       	call   c0019729 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001986c:	83 c4 14             	add    esp,0x14
c001986f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019873:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019877:	0f 95 c0             	setne  al
c001987a:	83 c4 10             	add    esp,0x10
c001987d:	c3                   	ret    

c001987e <HalDetectFeatures()>:
c001987e:	57                   	push   edi
c001987f:	56                   	push   esi
c0019880:	53                   	push   ebx
c0019881:	81 ec 90 00 00 00    	sub    esp,0x90
c0019887:	83 ec 04             	sub    esp,0x4
c001988a:	6a 08                	push   0x8
c001988c:	6a 00                	push   0x0
c001988e:	68 4c 34 03 c0       	push   0xc003344c
c0019893:	e8 58 6c fe ff       	call   c00004f0 <memset>
c0019898:	83 c4 10             	add    esp,0x10
c001989b:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c00198a0:	83 c8 04             	or     eax,0x4
c00198a3:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c00198a8:	83 ec 0c             	sub    esp,0xc
c00198ab:	68 8c ae 02 c0       	push   0xc002ae8c
c00198b0:	e8 b1 d6 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00198b5:	83 c4 10             	add    esp,0x10
c00198b8:	e8 3c 69 fe ff       	call   c00001f9 <detectCPUID>
c00198bd:	85 c0                	test   eax,eax
c00198bf:	0f 95 c0             	setne  al
c00198c2:	83 e0 01             	and    eax,0x1
c00198c5:	83 e0 01             	and    eax,0x1
c00198c8:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00198cb:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c00198d0:	83 e0 fd             	and    eax,0xfffffffd
c00198d3:	88 c2                	mov    dl,al
c00198d5:	88 c8                	mov    al,cl
c00198d7:	09 d0                	or     eax,edx
c00198d9:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c00198de:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c00198e3:	83 e0 02             	and    eax,0x2
c00198e6:	0f b6 c0             	movzx  eax,al
c00198e9:	85 c0                	test   eax,eax
c00198eb:	0f 84 84 02 00 00    	je     c0019b75 <HalDetectFeatures()+0x2f7>
c00198f1:	83 ec 0c             	sub    esp,0xc
c00198f4:	6a 20                	push   0x20
c00198f6:	e8 cc fe ff ff       	call   c00197c7 <cpuidCheckEDX(unsigned int)>
c00198fb:	83 c4 10             	add    esp,0x10
c00198fe:	83 e0 01             	and    eax,0x1
c0019901:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019908:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001990d:	83 e0 f7             	and    eax,0xfffffff7
c0019910:	88 c2                	mov    dl,al
c0019912:	88 c8                	mov    al,cl
c0019914:	09 d0                	or     eax,edx
c0019916:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c001991b:	83 ec 0c             	sub    esp,0xc
c001991e:	68 00 00 00 04       	push   0x4000000
c0019923:	e8 9f fe ff ff       	call   c00197c7 <cpuidCheckEDX(unsigned int)>
c0019928:	83 c4 10             	add    esp,0x10
c001992b:	89 c1                	mov    ecx,eax
c001992d:	83 e1 01             	and    ecx,0x1
c0019930:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c0019935:	83 e0 fe             	and    eax,0xfffffffe
c0019938:	88 c2                	mov    dl,al
c001993a:	88 c8                	mov    al,cl
c001993c:	09 d0                	or     eax,edx
c001993e:	a2 4d 34 03 c0       	mov    ds:0xc003344d,al
c0019943:	83 ec 0c             	sub    esp,0xc
c0019946:	68 80 00 00 00       	push   0x80
c001994b:	e8 77 fe ff ff       	call   c00197c7 <cpuidCheckEDX(unsigned int)>
c0019950:	83 c4 10             	add    esp,0x10
c0019953:	89 c1                	mov    ecx,eax
c0019955:	c1 e1 07             	shl    ecx,0x7
c0019958:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c001995d:	83 e0 7f             	and    eax,0x7f
c0019960:	88 c2                	mov    dl,al
c0019962:	88 c8                	mov    al,cl
c0019964:	09 d0                	or     eax,edx
c0019966:	a2 4d 34 03 c0       	mov    ds:0xc003344d,al
c001996b:	83 ec 0c             	sub    esp,0xc
c001996e:	68 00 00 80 00       	push   0x800000
c0019973:	e8 4f fe ff ff       	call   c00197c7 <cpuidCheckEDX(unsigned int)>
c0019978:	83 c4 10             	add    esp,0x10
c001997b:	83 e0 01             	and    eax,0x1
c001997e:	89 c1                	mov    ecx,eax
c0019980:	c1 e1 05             	shl    ecx,0x5
c0019983:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0019988:	83 e0 df             	and    eax,0xffffffdf
c001998b:	88 c2                	mov    dl,al
c001998d:	88 c8                	mov    al,cl
c001998f:	09 d0                	or     eax,edx
c0019991:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c0019996:	83 ec 0c             	sub    esp,0xc
c0019999:	6a 01                	push   0x1
c001999b:	e8 3c 40 ff ff       	call   c000d9dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c00199a0:	83 c4 10             	add    esp,0x10
c00199a3:	0f b6 c0             	movzx  eax,al
c00199a6:	85 c0                	test   eax,eax
c00199a8:	75 17                	jne    c00199c1 <HalDetectFeatures()+0x143>
c00199aa:	83 ec 0c             	sub    esp,0xc
c00199ad:	68 00 04 00 00       	push   0x400
c00199b2:	e8 25 40 ff ff       	call   c000d9dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c00199b7:	83 c4 10             	add    esp,0x10
c00199ba:	0f b6 c0             	movzx  eax,al
c00199bd:	85 c0                	test   eax,eax
c00199bf:	74 04                	je     c00199c5 <HalDetectFeatures()+0x147>
c00199c1:	b0 01                	mov    al,0x1
c00199c3:	eb 02                	jmp    c00199c7 <HalDetectFeatures()+0x149>
c00199c5:	b0 00                	mov    al,0x0
c00199c7:	0f b6 c0             	movzx  eax,al
c00199ca:	85 c0                	test   eax,eax
c00199cc:	74 0f                	je     c00199dd <HalDetectFeatures()+0x15f>
c00199ce:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c00199d3:	83 e0 fe             	and    eax,0xfffffffe
c00199d6:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c00199db:	eb 28                	jmp    c0019a05 <HalDetectFeatures()+0x187>
c00199dd:	83 ec 0c             	sub    esp,0xc
c00199e0:	68 00 02 00 00       	push   0x200
c00199e5:	e8 dd fd ff ff       	call   c00197c7 <cpuidCheckEDX(unsigned int)>
c00199ea:	83 c4 10             	add    esp,0x10
c00199ed:	89 c1                	mov    ecx,eax
c00199ef:	83 e1 01             	and    ecx,0x1
c00199f2:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c00199f7:	83 e0 fe             	and    eax,0xfffffffe
c00199fa:	88 c2                	mov    dl,al
c00199fc:	88 c8                	mov    al,cl
c00199fe:	09 d0                	or     eax,edx
c0019a00:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c0019a05:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0019a0a:	83 e0 01             	and    eax,0x1
c0019a0d:	0f b6 c0             	movzx  eax,al
c0019a10:	85 c0                	test   eax,eax
c0019a12:	74 1c                	je     c0019a30 <HalDetectFeatures()+0x1b2>
c0019a14:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0019a19:	83 e0 08             	and    eax,0x8
c0019a1c:	0f b6 c0             	movzx  eax,al
c0019a1f:	85 c0                	test   eax,eax
c0019a21:	75 0d                	jne    c0019a30 <HalDetectFeatures()+0x1b2>
c0019a23:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0019a28:	83 e0 fe             	and    eax,0xfffffffe
c0019a2b:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c0019a30:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0019a38:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0019a40:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0019a48:	85 c0                	test   eax,eax
c0019a4a:	0f 84 ab 00 00 00    	je     c0019afb <HalDetectFeatures()+0x27d>
c0019a50:	83 ec 0c             	sub    esp,0xc
c0019a53:	6a 01                	push   0x1
c0019a55:	e8 9a fd ff ff       	call   c00197f4 <cpuidCheckECX(unsigned int)>
c0019a5a:	83 c4 10             	add    esp,0x10
c0019a5d:	83 e0 01             	and    eax,0x1
c0019a60:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019a63:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c0019a68:	83 e0 fd             	and    eax,0xfffffffd
c0019a6b:	88 c2                	mov    dl,al
c0019a6d:	88 c8                	mov    al,cl
c0019a6f:	09 d0                	or     eax,edx
c0019a71:	a2 4d 34 03 c0       	mov    ds:0xc003344d,al
c0019a76:	83 ec 0c             	sub    esp,0xc
c0019a79:	68 00 02 00 00       	push   0x200
c0019a7e:	e8 71 fd ff ff       	call   c00197f4 <cpuidCheckECX(unsigned int)>
c0019a83:	83 c4 10             	add    esp,0x10
c0019a86:	83 e0 01             	and    eax,0x1
c0019a89:	89 c1                	mov    ecx,eax
c0019a8b:	c1 e1 04             	shl    ecx,0x4
c0019a8e:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c0019a93:	83 e0 ef             	and    eax,0xffffffef
c0019a96:	88 c2                	mov    dl,al
c0019a98:	88 c8                	mov    al,cl
c0019a9a:	09 d0                	or     eax,edx
c0019a9c:	a2 4d 34 03 c0       	mov    ds:0xc003344d,al
c0019aa1:	83 ec 0c             	sub    esp,0xc
c0019aa4:	68 00 00 08 00       	push   0x80000
c0019aa9:	e8 46 fd ff ff       	call   c00197f4 <cpuidCheckECX(unsigned int)>
c0019aae:	83 c4 10             	add    esp,0x10
c0019ab1:	83 e0 01             	and    eax,0x1
c0019ab4:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019abb:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c0019ac0:	83 e0 fb             	and    eax,0xfffffffb
c0019ac3:	88 c2                	mov    dl,al
c0019ac5:	88 c8                	mov    al,cl
c0019ac7:	09 d0                	or     eax,edx
c0019ac9:	a2 4d 34 03 c0       	mov    ds:0xc003344d,al
c0019ace:	83 ec 0c             	sub    esp,0xc
c0019ad1:	68 00 00 10 00       	push   0x100000
c0019ad6:	e8 19 fd ff ff       	call   c00197f4 <cpuidCheckECX(unsigned int)>
c0019adb:	83 c4 10             	add    esp,0x10
c0019ade:	83 e0 01             	and    eax,0x1
c0019ae1:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019ae8:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c0019aed:	83 e0 f7             	and    eax,0xfffffff7
c0019af0:	88 c2                	mov    dl,al
c0019af2:	88 c8                	mov    al,cl
c0019af4:	09 d0                	or     eax,edx
c0019af6:	a2 4d 34 03 c0       	mov    ds:0xc003344d,al
c0019afb:	83 ec 0c             	sub    esp,0xc
c0019afe:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019b02:	50                   	push   eax
c0019b03:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019b07:	50                   	push   eax
c0019b08:	8d 44 24 34          	lea    eax,[esp+0x34]
c0019b0c:	50                   	push   eax
c0019b0d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019b11:	50                   	push   eax
c0019b12:	68 00 00 00 80       	push   0x80000000
c0019b17:	e8 0d fc ff ff       	call   c0019729 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019b1c:	83 c4 20             	add    esp,0x20
c0019b1f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019b23:	3d 00 00 00 80       	cmp    eax,0x80000000
c0019b28:	76 4b                	jbe    c0019b75 <HalDetectFeatures()+0x2f7>
c0019b2a:	83 ec 0c             	sub    esp,0xc
c0019b2d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019b31:	50                   	push   eax
c0019b32:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019b36:	50                   	push   eax
c0019b37:	8d 44 24 34          	lea    eax,[esp+0x34]
c0019b3b:	50                   	push   eax
c0019b3c:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019b40:	50                   	push   eax
c0019b41:	68 01 00 00 80       	push   0x80000001
c0019b46:	e8 de fb ff ff       	call   c0019729 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019b4b:	83 c4 20             	add    esp,0x20
c0019b4e:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0019b53:	83 e0 bf             	and    eax,0xffffffbf
c0019b56:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c0019b5b:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c0019b60:	83 e0 fd             	and    eax,0xfffffffd
c0019b63:	a2 4e 34 03 c0       	mov    ds:0xc003344e,al
c0019b68:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c0019b6d:	83 e0 fe             	and    eax,0xfffffffe
c0019b70:	a2 4e 34 03 c0       	mov    ds:0xc003344e,al
c0019b75:	83 ec 0c             	sub    esp,0xc
c0019b78:	68 00 04 00 00       	push   0x400
c0019b7d:	e8 5a 3e ff ff       	call   c000d9dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019b82:	83 c4 10             	add    esp,0x10
c0019b85:	0f b6 c0             	movzx  eax,al
c0019b88:	85 c0                	test   eax,eax
c0019b8a:	74 0d                	je     c0019b99 <HalDetectFeatures()+0x31b>
c0019b8c:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0019b91:	83 e0 fb             	and    eax,0xfffffffb
c0019b94:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c0019b99:	c6 05 48 34 03 c0 01 	mov    BYTE PTR ds:0xc0033448,0x1
c0019ba0:	83 ec 04             	sub    esp,0x4
c0019ba3:	6a 0d                	push   0xd
c0019ba5:	6a 00                	push   0x0
c0019ba7:	68 30 34 03 c0       	push   0xc0033430
c0019bac:	e8 3f 69 fe ff       	call   c00004f0 <memset>
c0019bb1:	83 c4 10             	add    esp,0x10
c0019bb4:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0019bb9:	83 e0 02             	and    eax,0x2
c0019bbc:	0f b6 c0             	movzx  eax,al
c0019bbf:	85 c0                	test   eax,eax
c0019bc1:	0f 84 16 08 00 00    	je     c001a3dd <HalDetectFeatures()+0xb5f>
c0019bc7:	83 ec 0c             	sub    esp,0xc
c0019bca:	6a 10                	push   0x10
c0019bcc:	e8 f6 fb ff ff       	call   c00197c7 <cpuidCheckEDX(unsigned int)>
c0019bd1:	83 c4 10             	add    esp,0x10
c0019bd4:	83 e0 01             	and    eax,0x1
c0019bd7:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019bde:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c0019be3:	83 e0 f7             	and    eax,0xfffffff7
c0019be6:	88 c2                	mov    dl,al
c0019be8:	88 c8                	mov    al,cl
c0019bea:	09 d0                	or     eax,edx
c0019bec:	a2 4e 34 03 c0       	mov    ds:0xc003344e,al
c0019bf1:	83 ec 0c             	sub    esp,0xc
c0019bf4:	6a 40                	push   0x40
c0019bf6:	e8 cc fb ff ff       	call   c00197c7 <cpuidCheckEDX(unsigned int)>
c0019bfb:	83 c4 10             	add    esp,0x10
c0019bfe:	83 e0 01             	and    eax,0x1
c0019c01:	89 c1                	mov    ecx,eax
c0019c03:	c1 e1 04             	shl    ecx,0x4
c0019c06:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c0019c0b:	83 e0 ef             	and    eax,0xffffffef
c0019c0e:	88 c2                	mov    dl,al
c0019c10:	88 c8                	mov    al,cl
c0019c12:	09 d0                	or     eax,edx
c0019c14:	a2 4e 34 03 c0       	mov    ds:0xc003344e,al
c0019c19:	83 ec 0c             	sub    esp,0xc
c0019c1c:	6a 08                	push   0x8
c0019c1e:	e8 a4 fb ff ff       	call   c00197c7 <cpuidCheckEDX(unsigned int)>
c0019c23:	83 c4 10             	add    esp,0x10
c0019c26:	83 e0 01             	and    eax,0x1
c0019c29:	89 c1                	mov    ecx,eax
c0019c2b:	c1 e1 05             	shl    ecx,0x5
c0019c2e:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c0019c33:	83 e0 df             	and    eax,0xffffffdf
c0019c36:	88 c2                	mov    dl,al
c0019c38:	88 c8                	mov    al,cl
c0019c3a:	09 d0                	or     eax,edx
c0019c3c:	a2 4e 34 03 c0       	mov    ds:0xc003344e,al
c0019c41:	83 ec 0c             	sub    esp,0xc
c0019c44:	68 00 20 00 00       	push   0x2000
c0019c49:	e8 79 fb ff ff       	call   c00197c7 <cpuidCheckEDX(unsigned int)>
c0019c4e:	83 c4 10             	add    esp,0x10
c0019c51:	83 e0 01             	and    eax,0x1
c0019c54:	89 c1                	mov    ecx,eax
c0019c56:	c1 e1 06             	shl    ecx,0x6
c0019c59:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c0019c5e:	83 e0 bf             	and    eax,0xffffffbf
c0019c61:	88 c2                	mov    dl,al
c0019c63:	88 c8                	mov    al,cl
c0019c65:	09 d0                	or     eax,edx
c0019c67:	a2 4e 34 03 c0       	mov    ds:0xc003344e,al
c0019c6c:	83 ec 0c             	sub    esp,0xc
c0019c6f:	68 00 00 01 00       	push   0x10000
c0019c74:	e8 4e fb ff ff       	call   c00197c7 <cpuidCheckEDX(unsigned int)>
c0019c79:	83 c4 10             	add    esp,0x10
c0019c7c:	89 c1                	mov    ecx,eax
c0019c7e:	c1 e1 07             	shl    ecx,0x7
c0019c81:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c0019c86:	83 e0 7f             	and    eax,0x7f
c0019c89:	88 c2                	mov    dl,al
c0019c8b:	88 c8                	mov    al,cl
c0019c8d:	09 d0                	or     eax,edx
c0019c8f:	a2 4e 34 03 c0       	mov    ds:0xc003344e,al
c0019c94:	83 ec 0c             	sub    esp,0xc
c0019c97:	6a 01                	push   0x1
c0019c99:	e8 29 fb ff ff       	call   c00197c7 <cpuidCheckEDX(unsigned int)>
c0019c9e:	83 c4 10             	add    esp,0x10
c0019ca1:	83 e0 01             	and    eax,0x1
c0019ca4:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019cab:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c0019cb0:	83 e0 f7             	and    eax,0xfffffff7
c0019cb3:	88 c2                	mov    dl,al
c0019cb5:	88 c8                	mov    al,cl
c0019cb7:	09 d0                	or     eax,edx
c0019cb9:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c0019cbe:	83 ec 0c             	sub    esp,0xc
c0019cc1:	68 00 08 00 00       	push   0x800
c0019cc6:	e8 fc fa ff ff       	call   c00197c7 <cpuidCheckEDX(unsigned int)>
c0019ccb:	83 c4 10             	add    esp,0x10
c0019cce:	89 c1                	mov    ecx,eax
c0019cd0:	83 e1 01             	and    ecx,0x1
c0019cd3:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c0019cd8:	83 e0 fe             	and    eax,0xfffffffe
c0019cdb:	88 c2                	mov    dl,al
c0019cdd:	88 c8                	mov    al,cl
c0019cdf:	09 d0                	or     eax,edx
c0019ce1:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c0019ce6:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c0019ceb:	83 e0 40             	and    eax,0x40
c0019cee:	0f b6 c0             	movzx  eax,al
c0019cf1:	85 c0                	test   eax,eax
c0019cf3:	74 0a                	je     c0019cff <HalDetectFeatures()+0x481>
c0019cf5:	c7 05 28 34 03 c0 00 01 00 00 	mov    DWORD PTR ds:0xc0033428,0x100
c0019cff:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c0019d04:	83 e0 80             	and    eax,0xffffff80
c0019d07:	0f b6 c0             	movzx  eax,al
c0019d0a:	85 c0                	test   eax,eax
c0019d0c:	74 0a                	je     c0019d18 <HalDetectFeatures()+0x49a>
c0019d0e:	c7 05 24 34 03 c0 80 00 00 00 	mov    DWORD PTR ds:0xc0033424,0x80
c0019d18:	83 ec 0c             	sub    esp,0xc
c0019d1b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d1f:	50                   	push   eax
c0019d20:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019d24:	50                   	push   eax
c0019d25:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019d29:	50                   	push   eax
c0019d2a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019d2e:	50                   	push   eax
c0019d2f:	6a 00                	push   0x0
c0019d31:	e8 f3 f9 ff ff       	call   c0019729 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019d36:	83 c4 20             	add    esp,0x20
c0019d39:	c7 44 24 48 30 34 03 c0 	mov    DWORD PTR [esp+0x48],0xc0033430
c0019d41:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d45:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0019d49:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c0019d51:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0019d55:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0019d59:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0019d5d:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0019d61:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019d65:	89 c6                	mov    esi,eax
c0019d67:	89 d7                	mov    edi,edx
c0019d69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d6b:	89 c8                	mov    eax,ecx
c0019d6d:	89 fa                	mov    edx,edi
c0019d6f:	89 f3                	mov    ebx,esi
c0019d71:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0019d75:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019d79:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0019d7d:	b8 34 34 03 c0       	mov    eax,0xc0033434
c0019d82:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0019d86:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019d8a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0019d8e:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c0019d96:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0019d9a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0019d9e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0019da2:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0019da6:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c0019daa:	89 c6                	mov    esi,eax
c0019dac:	89 d7                	mov    edi,edx
c0019dae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019db0:	89 c8                	mov    eax,ecx
c0019db2:	89 fa                	mov    edx,edi
c0019db4:	89 f3                	mov    ebx,esi
c0019db6:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c0019dba:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c0019dbe:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019dc2:	b8 38 34 03 c0       	mov    eax,0xc0033438
c0019dc7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0019dce:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019dd2:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c0019dd6:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c0019dde:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0019de5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0019de9:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0019ded:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0019df4:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0019df8:	89 c6                	mov    esi,eax
c0019dfa:	89 d7                	mov    edi,edx
c0019dfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019dfe:	89 c8                	mov    eax,ecx
c0019e00:	89 fa                	mov    edx,edi
c0019e02:	89 f3                	mov    ebx,esi
c0019e04:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c0019e08:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c0019e0c:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0019e10:	83 ec 08             	sub    esp,0x8
c0019e13:	68 a1 ae 02 c0       	push   0xc002aea1
c0019e18:	68 30 34 03 c0       	push   0xc0033430
c0019e1d:	e8 5e 69 fe ff       	call   c0000780 <strcmp>
c0019e22:	83 c4 10             	add    esp,0x10
c0019e25:	85 c0                	test   eax,eax
c0019e27:	74 19                	je     c0019e42 <HalDetectFeatures()+0x5c4>
c0019e29:	83 ec 08             	sub    esp,0x8
c0019e2c:	68 ae ae 02 c0       	push   0xc002aeae
c0019e31:	68 30 34 03 c0       	push   0xc0033430
c0019e36:	e8 45 69 fe ff       	call   c0000780 <strcmp>
c0019e3b:	83 c4 10             	add    esp,0x10
c0019e3e:	85 c0                	test   eax,eax
c0019e40:	75 04                	jne    c0019e46 <HalDetectFeatures()+0x5c8>
c0019e42:	b0 01                	mov    al,0x1
c0019e44:	eb 02                	jmp    c0019e48 <HalDetectFeatures()+0x5ca>
c0019e46:	b0 00                	mov    al,0x0
c0019e48:	0f b6 c0             	movzx  eax,al
c0019e4b:	85 c0                	test   eax,eax
c0019e4d:	74 0f                	je     c0019e5e <HalDetectFeatures()+0x5e0>
c0019e4f:	c7 05 44 34 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x2
c0019e59:	e9 0d 03 00 00       	jmp    c001a16b <HalDetectFeatures()+0x8ed>
c0019e5e:	83 ec 08             	sub    esp,0x8
c0019e61:	68 bb ae 02 c0       	push   0xc002aebb
c0019e66:	68 30 34 03 c0       	push   0xc0033430
c0019e6b:	e8 10 69 fe ff       	call   c0000780 <strcmp>
c0019e70:	83 c4 10             	add    esp,0x10
c0019e73:	85 c0                	test   eax,eax
c0019e75:	74 19                	je     c0019e90 <HalDetectFeatures()+0x612>
c0019e77:	83 ec 08             	sub    esp,0x8
c0019e7a:	68 c8 ae 02 c0       	push   0xc002aec8
c0019e7f:	68 30 34 03 c0       	push   0xc0033430
c0019e84:	e8 f7 68 fe ff       	call   c0000780 <strcmp>
c0019e89:	83 c4 10             	add    esp,0x10
c0019e8c:	85 c0                	test   eax,eax
c0019e8e:	75 04                	jne    c0019e94 <HalDetectFeatures()+0x616>
c0019e90:	b0 01                	mov    al,0x1
c0019e92:	eb 02                	jmp    c0019e96 <HalDetectFeatures()+0x618>
c0019e94:	b0 00                	mov    al,0x0
c0019e96:	0f b6 c0             	movzx  eax,al
c0019e99:	85 c0                	test   eax,eax
c0019e9b:	74 0f                	je     c0019eac <HalDetectFeatures()+0x62e>
c0019e9d:	c7 05 44 34 03 c0 04 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x4
c0019ea7:	e9 bf 02 00 00       	jmp    c001a16b <HalDetectFeatures()+0x8ed>
c0019eac:	83 ec 08             	sub    esp,0x8
c0019eaf:	68 d5 ae 02 c0       	push   0xc002aed5
c0019eb4:	68 30 34 03 c0       	push   0xc0033430
c0019eb9:	e8 c2 68 fe ff       	call   c0000780 <strcmp>
c0019ebe:	83 c4 10             	add    esp,0x10
c0019ec1:	85 c0                	test   eax,eax
c0019ec3:	74 19                	je     c0019ede <HalDetectFeatures()+0x660>
c0019ec5:	83 ec 08             	sub    esp,0x8
c0019ec8:	68 e2 ae 02 c0       	push   0xc002aee2
c0019ecd:	68 30 34 03 c0       	push   0xc0033430
c0019ed2:	e8 a9 68 fe ff       	call   c0000780 <strcmp>
c0019ed7:	83 c4 10             	add    esp,0x10
c0019eda:	85 c0                	test   eax,eax
c0019edc:	75 04                	jne    c0019ee2 <HalDetectFeatures()+0x664>
c0019ede:	b0 01                	mov    al,0x1
c0019ee0:	eb 02                	jmp    c0019ee4 <HalDetectFeatures()+0x666>
c0019ee2:	b0 00                	mov    al,0x0
c0019ee4:	0f b6 c0             	movzx  eax,al
c0019ee7:	85 c0                	test   eax,eax
c0019ee9:	74 0f                	je     c0019efa <HalDetectFeatures()+0x67c>
c0019eeb:	c7 05 44 34 03 c0 05 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x5
c0019ef5:	e9 71 02 00 00       	jmp    c001a16b <HalDetectFeatures()+0x8ed>
c0019efa:	83 ec 08             	sub    esp,0x8
c0019efd:	68 ef ae 02 c0       	push   0xc002aeef
c0019f02:	68 30 34 03 c0       	push   0xc0033430
c0019f07:	e8 74 68 fe ff       	call   c0000780 <strcmp>
c0019f0c:	83 c4 10             	add    esp,0x10
c0019f0f:	85 c0                	test   eax,eax
c0019f11:	0f 94 c0             	sete   al
c0019f14:	0f b6 c0             	movzx  eax,al
c0019f17:	85 c0                	test   eax,eax
c0019f19:	74 0f                	je     c0019f2a <HalDetectFeatures()+0x6ac>
c0019f1b:	c7 05 44 34 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x1
c0019f25:	e9 41 02 00 00       	jmp    c001a16b <HalDetectFeatures()+0x8ed>
c0019f2a:	83 ec 08             	sub    esp,0x8
c0019f2d:	68 fc ae 02 c0       	push   0xc002aefc
c0019f32:	68 30 34 03 c0       	push   0xc0033430
c0019f37:	e8 44 68 fe ff       	call   c0000780 <strcmp>
c0019f3c:	83 c4 10             	add    esp,0x10
c0019f3f:	85 c0                	test   eax,eax
c0019f41:	0f 94 c0             	sete   al
c0019f44:	0f b6 c0             	movzx  eax,al
c0019f47:	85 c0                	test   eax,eax
c0019f49:	74 0f                	je     c0019f5a <HalDetectFeatures()+0x6dc>
c0019f4b:	c7 05 44 34 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x3
c0019f55:	e9 11 02 00 00       	jmp    c001a16b <HalDetectFeatures()+0x8ed>
c0019f5a:	83 ec 08             	sub    esp,0x8
c0019f5d:	68 bb ae 02 c0       	push   0xc002aebb
c0019f62:	68 30 34 03 c0       	push   0xc0033430
c0019f67:	e8 14 68 fe ff       	call   c0000780 <strcmp>
c0019f6c:	83 c4 10             	add    esp,0x10
c0019f6f:	85 c0                	test   eax,eax
c0019f71:	0f 94 c0             	sete   al
c0019f74:	0f b6 c0             	movzx  eax,al
c0019f77:	85 c0                	test   eax,eax
c0019f79:	74 0f                	je     c0019f8a <HalDetectFeatures()+0x70c>
c0019f7b:	c7 05 44 34 03 c0 06 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x6
c0019f85:	e9 e1 01 00 00       	jmp    c001a16b <HalDetectFeatures()+0x8ed>
c0019f8a:	83 ec 08             	sub    esp,0x8
c0019f8d:	68 09 af 02 c0       	push   0xc002af09
c0019f92:	68 30 34 03 c0       	push   0xc0033430
c0019f97:	e8 e4 67 fe ff       	call   c0000780 <strcmp>
c0019f9c:	83 c4 10             	add    esp,0x10
c0019f9f:	85 c0                	test   eax,eax
c0019fa1:	0f 94 c0             	sete   al
c0019fa4:	0f b6 c0             	movzx  eax,al
c0019fa7:	85 c0                	test   eax,eax
c0019fa9:	74 0f                	je     c0019fba <HalDetectFeatures()+0x73c>
c0019fab:	c7 05 44 34 03 c0 07 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x7
c0019fb5:	e9 b1 01 00 00       	jmp    c001a16b <HalDetectFeatures()+0x8ed>
c0019fba:	83 ec 08             	sub    esp,0x8
c0019fbd:	68 16 af 02 c0       	push   0xc002af16
c0019fc2:	68 30 34 03 c0       	push   0xc0033430
c0019fc7:	e8 b4 67 fe ff       	call   c0000780 <strcmp>
c0019fcc:	83 c4 10             	add    esp,0x10
c0019fcf:	85 c0                	test   eax,eax
c0019fd1:	0f 94 c0             	sete   al
c0019fd4:	0f b6 c0             	movzx  eax,al
c0019fd7:	85 c0                	test   eax,eax
c0019fd9:	74 0f                	je     c0019fea <HalDetectFeatures()+0x76c>
c0019fdb:	c7 05 44 34 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x8
c0019fe5:	e9 81 01 00 00       	jmp    c001a16b <HalDetectFeatures()+0x8ed>
c0019fea:	83 ec 08             	sub    esp,0x8
c0019fed:	68 23 af 02 c0       	push   0xc002af23
c0019ff2:	68 30 34 03 c0       	push   0xc0033430
c0019ff7:	e8 84 67 fe ff       	call   c0000780 <strcmp>
c0019ffc:	83 c4 10             	add    esp,0x10
c0019fff:	85 c0                	test   eax,eax
c001a001:	0f 94 c0             	sete   al
c001a004:	0f b6 c0             	movzx  eax,al
c001a007:	85 c0                	test   eax,eax
c001a009:	74 0f                	je     c001a01a <HalDetectFeatures()+0x79c>
c001a00b:	c7 05 44 34 03 c0 09 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x9
c001a015:	e9 51 01 00 00       	jmp    c001a16b <HalDetectFeatures()+0x8ed>
c001a01a:	83 ec 08             	sub    esp,0x8
c001a01d:	68 30 af 02 c0       	push   0xc002af30
c001a022:	68 30 34 03 c0       	push   0xc0033430
c001a027:	e8 54 67 fe ff       	call   c0000780 <strcmp>
c001a02c:	83 c4 10             	add    esp,0x10
c001a02f:	85 c0                	test   eax,eax
c001a031:	0f 94 c0             	sete   al
c001a034:	0f b6 c0             	movzx  eax,al
c001a037:	85 c0                	test   eax,eax
c001a039:	74 0f                	je     c001a04a <HalDetectFeatures()+0x7cc>
c001a03b:	c7 05 44 34 03 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0033444,0xa
c001a045:	e9 21 01 00 00       	jmp    c001a16b <HalDetectFeatures()+0x8ed>
c001a04a:	83 ec 08             	sub    esp,0x8
c001a04d:	68 3d af 02 c0       	push   0xc002af3d
c001a052:	68 30 34 03 c0       	push   0xc0033430
c001a057:	e8 24 67 fe ff       	call   c0000780 <strcmp>
c001a05c:	83 c4 10             	add    esp,0x10
c001a05f:	85 c0                	test   eax,eax
c001a061:	0f 94 c0             	sete   al
c001a064:	0f b6 c0             	movzx  eax,al
c001a067:	85 c0                	test   eax,eax
c001a069:	74 0f                	je     c001a07a <HalDetectFeatures()+0x7fc>
c001a06b:	c7 05 44 34 03 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc0033444,0xb
c001a075:	e9 f1 00 00 00       	jmp    c001a16b <HalDetectFeatures()+0x8ed>
c001a07a:	83 ec 08             	sub    esp,0x8
c001a07d:	68 4a af 02 c0       	push   0xc002af4a
c001a082:	68 30 34 03 c0       	push   0xc0033430
c001a087:	e8 f4 66 fe ff       	call   c0000780 <strcmp>
c001a08c:	83 c4 10             	add    esp,0x10
c001a08f:	85 c0                	test   eax,eax
c001a091:	0f 94 c0             	sete   al
c001a094:	0f b6 c0             	movzx  eax,al
c001a097:	85 c0                	test   eax,eax
c001a099:	74 0f                	je     c001a0aa <HalDetectFeatures()+0x82c>
c001a09b:	c7 05 44 34 03 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc0033444,0xc
c001a0a5:	e9 c1 00 00 00       	jmp    c001a16b <HalDetectFeatures()+0x8ed>
c001a0aa:	83 ec 08             	sub    esp,0x8
c001a0ad:	68 57 af 02 c0       	push   0xc002af57
c001a0b2:	68 30 34 03 c0       	push   0xc0033430
c001a0b7:	e8 c4 66 fe ff       	call   c0000780 <strcmp>
c001a0bc:	83 c4 10             	add    esp,0x10
c001a0bf:	85 c0                	test   eax,eax
c001a0c1:	0f 94 c0             	sete   al
c001a0c4:	0f b6 c0             	movzx  eax,al
c001a0c7:	85 c0                	test   eax,eax
c001a0c9:	74 0f                	je     c001a0da <HalDetectFeatures()+0x85c>
c001a0cb:	c7 05 44 34 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0033444,0xd
c001a0d5:	e9 91 00 00 00       	jmp    c001a16b <HalDetectFeatures()+0x8ed>
c001a0da:	83 ec 08             	sub    esp,0x8
c001a0dd:	68 64 af 02 c0       	push   0xc002af64
c001a0e2:	68 30 34 03 c0       	push   0xc0033430
c001a0e7:	e8 94 66 fe ff       	call   c0000780 <strcmp>
c001a0ec:	83 c4 10             	add    esp,0x10
c001a0ef:	85 c0                	test   eax,eax
c001a0f1:	0f 94 c0             	sete   al
c001a0f4:	0f b6 c0             	movzx  eax,al
c001a0f7:	85 c0                	test   eax,eax
c001a0f9:	74 0c                	je     c001a107 <HalDetectFeatures()+0x889>
c001a0fb:	c7 05 44 34 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0033444,0xd
c001a105:	eb 64                	jmp    c001a16b <HalDetectFeatures()+0x8ed>
c001a107:	83 ec 08             	sub    esp,0x8
c001a10a:	68 71 af 02 c0       	push   0xc002af71
c001a10f:	68 30 34 03 c0       	push   0xc0033430
c001a114:	e8 67 66 fe ff       	call   c0000780 <strcmp>
c001a119:	83 c4 10             	add    esp,0x10
c001a11c:	85 c0                	test   eax,eax
c001a11e:	0f 94 c0             	sete   al
c001a121:	0f b6 c0             	movzx  eax,al
c001a124:	85 c0                	test   eax,eax
c001a126:	74 0c                	je     c001a134 <HalDetectFeatures()+0x8b6>
c001a128:	c7 05 44 34 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0033444,0xd
c001a132:	eb 37                	jmp    c001a16b <HalDetectFeatures()+0x8ed>
c001a134:	83 ec 08             	sub    esp,0x8
c001a137:	68 7e af 02 c0       	push   0xc002af7e
c001a13c:	68 30 34 03 c0       	push   0xc0033430
c001a141:	e8 3a 66 fe ff       	call   c0000780 <strcmp>
c001a146:	83 c4 10             	add    esp,0x10
c001a149:	85 c0                	test   eax,eax
c001a14b:	0f 94 c0             	sete   al
c001a14e:	0f b6 c0             	movzx  eax,al
c001a151:	85 c0                	test   eax,eax
c001a153:	74 0c                	je     c001a161 <HalDetectFeatures()+0x8e3>
c001a155:	c7 05 44 34 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0033444,0xd
c001a15f:	eb 0a                	jmp    c001a16b <HalDetectFeatures()+0x8ed>
c001a161:	c7 05 44 34 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x0
c001a16b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a16f:	83 f8 06             	cmp    eax,0x6
c001a172:	0f 86 cc 00 00 00    	jbe    c001a244 <HalDetectFeatures()+0x9c6>
c001a178:	83 ec 0c             	sub    esp,0xc
c001a17b:	68 80 00 00 00       	push   0x80
c001a180:	e8 9d f6 ff ff       	call   c0019822 <cpuidCheckExtendedEBX(unsigned int)>
c001a185:	83 c4 10             	add    esp,0x10
c001a188:	89 c1                	mov    ecx,eax
c001a18a:	83 e1 01             	and    ecx,0x1
c001a18d:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a192:	83 e0 fe             	and    eax,0xfffffffe
c001a195:	88 c2                	mov    dl,al
c001a197:	88 c8                	mov    al,cl
c001a199:	09 d0                	or     eax,edx
c001a19b:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a1a0:	83 ec 0c             	sub    esp,0xc
c001a1a3:	68 00 00 10 00       	push   0x100000
c001a1a8:	e8 75 f6 ff ff       	call   c0019822 <cpuidCheckExtendedEBX(unsigned int)>
c001a1ad:	83 c4 10             	add    esp,0x10
c001a1b0:	83 e0 01             	and    eax,0x1
c001a1b3:	89 c1                	mov    ecx,eax
c001a1b5:	c1 e1 06             	shl    ecx,0x6
c001a1b8:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a1bd:	83 e0 bf             	and    eax,0xffffffbf
c001a1c0:	88 c2                	mov    dl,al
c001a1c2:	88 c8                	mov    al,cl
c001a1c4:	09 d0                	or     eax,edx
c001a1c6:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a1cb:	83 ec 0c             	sub    esp,0xc
c001a1ce:	68 00 00 04 00       	push   0x40000
c001a1d3:	e8 4a f6 ff ff       	call   c0019822 <cpuidCheckExtendedEBX(unsigned int)>
c001a1d8:	83 c4 10             	add    esp,0x10
c001a1db:	83 e0 01             	and    eax,0x1
c001a1de:	8d 0c 00             	lea    ecx,[eax+eax*1]
c001a1e1:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a1e6:	83 e0 fd             	and    eax,0xfffffffd
c001a1e9:	88 c2                	mov    dl,al
c001a1eb:	88 c8                	mov    al,cl
c001a1ed:	09 d0                	or     eax,edx
c001a1ef:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a1f4:	83 ec 0c             	sub    esp,0xc
c001a1f7:	6a 04                	push   0x4
c001a1f9:	e8 52 f6 ff ff       	call   c0019850 <cpuidCheckExtendedECX(unsigned int)>
c001a1fe:	83 c4 10             	add    esp,0x10
c001a201:	83 e0 01             	and    eax,0x1
c001a204:	89 c1                	mov    ecx,eax
c001a206:	c1 e1 05             	shl    ecx,0x5
c001a209:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a20e:	83 e0 df             	and    eax,0xffffffdf
c001a211:	88 c2                	mov    dl,al
c001a213:	88 c8                	mov    al,cl
c001a215:	09 d0                	or     eax,edx
c001a217:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a21c:	83 ec 0c             	sub    esp,0xc
c001a21f:	6a 20                	push   0x20
c001a221:	e8 2a f6 ff ff       	call   c0019850 <cpuidCheckExtendedECX(unsigned int)>
c001a226:	83 c4 10             	add    esp,0x10
c001a229:	83 e0 01             	and    eax,0x1
c001a22c:	89 c1                	mov    ecx,eax
c001a22e:	c1 e1 04             	shl    ecx,0x4
c001a231:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a236:	83 e0 ef             	and    eax,0xffffffef
c001a239:	88 c2                	mov    dl,al
c001a23b:	88 c8                	mov    al,cl
c001a23d:	09 d0                	or     eax,edx
c001a23f:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c001a244:	83 ec 0c             	sub    esp,0xc
c001a247:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a24b:	50                   	push   eax
c001a24c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a250:	50                   	push   eax
c001a251:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a255:	50                   	push   eax
c001a256:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a25a:	50                   	push   eax
c001a25b:	6a 01                	push   0x1
c001a25d:	e8 c7 f4 ff ff       	call   c0019729 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001a262:	83 c4 20             	add    esp,0x20
c001a265:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a269:	83 e0 0f             	and    eax,0xf
c001a26c:	a2 40 34 03 c0       	mov    ds:0xc0033440,al
c001a271:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a275:	c1 e8 04             	shr    eax,0x4
c001a278:	83 e0 0f             	and    eax,0xf
c001a27b:	a2 3e 34 03 c0       	mov    ds:0xc003343e,al
c001a280:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a284:	c1 e8 08             	shr    eax,0x8
c001a287:	83 e0 0f             	and    eax,0xf
c001a28a:	a2 3d 34 03 c0       	mov    ds:0xc003343d,al
c001a28f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a293:	c1 e8 0c             	shr    eax,0xc
c001a296:	83 e0 03             	and    eax,0x3
c001a299:	a2 3f 34 03 c0       	mov    ds:0xc003343f,al
c001a29e:	a0 3d 34 03 c0       	mov    al,ds:0xc003343d
c001a2a3:	0f b6 c0             	movzx  eax,al
c001a2a6:	83 f8 06             	cmp    eax,0x6
c001a2a9:	74 0d                	je     c001a2b8 <HalDetectFeatures()+0xa3a>
c001a2ab:	a0 3d 34 03 c0       	mov    al,ds:0xc003343d
c001a2b0:	0f b6 c0             	movzx  eax,al
c001a2b3:	83 f8 0f             	cmp    eax,0xf
c001a2b6:	75 18                	jne    c001a2d0 <HalDetectFeatures()+0xa52>
c001a2b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a2bc:	c1 e8 10             	shr    eax,0x10
c001a2bf:	c1 e0 04             	shl    eax,0x4
c001a2c2:	88 c2                	mov    dl,al
c001a2c4:	a0 3e 34 03 c0       	mov    al,ds:0xc003343e
c001a2c9:	09 d0                	or     eax,edx
c001a2cb:	a2 3e 34 03 c0       	mov    ds:0xc003343e,al
c001a2d0:	a0 3d 34 03 c0       	mov    al,ds:0xc003343d
c001a2d5:	0f b6 c0             	movzx  eax,al
c001a2d8:	83 f8 0f             	cmp    eax,0xf
c001a2db:	75 15                	jne    c001a2f2 <HalDetectFeatures()+0xa74>
c001a2dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a2e1:	c1 e8 14             	shr    eax,0x14
c001a2e4:	88 c2                	mov    dl,al
c001a2e6:	a0 3d 34 03 c0       	mov    al,ds:0xc003343d
c001a2eb:	01 d0                	add    eax,edx
c001a2ed:	a2 3d 34 03 c0       	mov    ds:0xc003343d,al
c001a2f2:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c001a2fa:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c001a302:	85 c0                	test   eax,eax
c001a304:	74 2d                	je     c001a333 <HalDetectFeatures()+0xab5>
c001a306:	83 ec 0c             	sub    esp,0xc
c001a309:	68 00 00 00 40       	push   0x40000000
c001a30e:	e8 e1 f4 ff ff       	call   c00197f4 <cpuidCheckECX(unsigned int)>
c001a313:	83 c4 10             	add    esp,0x10
c001a316:	83 e0 01             	and    eax,0x1
c001a319:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c001a320:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c001a325:	83 e0 fb             	and    eax,0xfffffffb
c001a328:	88 c2                	mov    dl,al
c001a32a:	88 c8                	mov    al,cl
c001a32c:	09 d0                	or     eax,edx
c001a32e:	a2 4e 34 03 c0       	mov    ds:0xc003344e,al
c001a333:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a338:	83 c8 04             	or     eax,0x4
c001a33b:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a340:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a345:	83 c8 08             	or     eax,0x8
c001a348:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a34d:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a352:	83 c8 10             	or     eax,0x10
c001a355:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a35a:	83 ec 0c             	sub    esp,0xc
c001a35d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a361:	50                   	push   eax
c001a362:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a366:	50                   	push   eax
c001a367:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a36b:	50                   	push   eax
c001a36c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a370:	50                   	push   eax
c001a371:	68 00 00 00 80       	push   0x80000000
c001a376:	e8 ae f3 ff ff       	call   c0019729 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001a37b:	83 c4 20             	add    esp,0x20
c001a37e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a382:	3d 00 00 00 80       	cmp    eax,0x80000000
c001a387:	0f 86 96 01 00 00    	jbe    c001a523 <HalDetectFeatures()+0xca5>
c001a38d:	83 ec 0c             	sub    esp,0xc
c001a390:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a394:	50                   	push   eax
c001a395:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a399:	50                   	push   eax
c001a39a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a39e:	50                   	push   eax
c001a39f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a3a3:	50                   	push   eax
c001a3a4:	68 01 00 00 80       	push   0x80000001
c001a3a9:	e8 7b f3 ff ff       	call   c0019729 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001a3ae:	83 c4 20             	add    esp,0x20
c001a3b1:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a3b6:	83 e0 7f             	and    eax,0x7f
c001a3b9:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a3be:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a3c3:	83 e0 fb             	and    eax,0xfffffffb
c001a3c6:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c001a3cb:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a3d0:	83 e0 fd             	and    eax,0xfffffffd
c001a3d3:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c001a3d8:	e9 46 01 00 00       	jmp    c001a523 <HalDetectFeatures()+0xca5>
c001a3dd:	83 ec 08             	sub    esp,0x8
c001a3e0:	68 ef ae 02 c0       	push   0xc002aeef
c001a3e5:	68 30 34 03 c0       	push   0xc0033430
c001a3ea:	e8 61 62 fe ff       	call   c0000650 <strcpy>
c001a3ef:	83 c4 10             	add    esp,0x10
c001a3f2:	c7 05 44 34 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x1
c001a3fc:	e8 c2 5d fe ff       	call   c00001c3 <is486>
c001a401:	85 c0                	test   eax,eax
c001a403:	0f 95 c0             	setne  al
c001a406:	0f b6 c0             	movzx  eax,al
c001a409:	85 c0                	test   eax,eax
c001a40b:	0f 84 8d 00 00 00    	je     c001a49e <HalDetectFeatures()+0xc20>
c001a411:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a416:	83 c8 04             	or     eax,0x4
c001a419:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a41e:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a423:	83 c8 08             	or     eax,0x8
c001a426:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a42b:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a430:	83 c8 10             	or     eax,0x10
c001a433:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a438:	0f 20 c0             	mov    eax,cr0
c001a43b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a43f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a443:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a44a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a451:	83 e0 04             	and    eax,0x4
c001a454:	74 1e                	je     c001a474 <HalDetectFeatures()+0xbf6>
c001a456:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a45d:	83 e0 10             	and    eax,0x10
c001a460:	75 12                	jne    c001a474 <HalDetectFeatures()+0xbf6>
c001a462:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a467:	83 e0 f7             	and    eax,0xfffffff7
c001a46a:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c001a46f:	e9 af 00 00 00       	jmp    c001a523 <HalDetectFeatures()+0xca5>
c001a474:	e8 25 5d fe ff       	call   c000019e <hasLegacyFPU>
c001a479:	83 e0 01             	and    eax,0x1
c001a47c:	83 e0 01             	and    eax,0x1
c001a47f:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a486:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a48b:	83 e0 f7             	and    eax,0xfffffff7
c001a48e:	88 c2                	mov    dl,al
c001a490:	88 c8                	mov    al,cl
c001a492:	09 d0                	or     eax,edx
c001a494:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c001a499:	e9 85 00 00 00       	jmp    c001a523 <HalDetectFeatures()+0xca5>
c001a49e:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a4a3:	83 e0 fb             	and    eax,0xfffffffb
c001a4a6:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a4ab:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a4b0:	83 e0 f7             	and    eax,0xfffffff7
c001a4b3:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a4b8:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a4bd:	83 e0 ef             	and    eax,0xffffffef
c001a4c0:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a4c5:	0f 20 c0             	mov    eax,cr0
c001a4c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a4cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a4d0:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c001a4d7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4de:	83 e0 04             	and    eax,0x4
c001a4e1:	74 1b                	je     c001a4fe <HalDetectFeatures()+0xc80>
c001a4e3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4ea:	83 e0 10             	and    eax,0x10
c001a4ed:	75 0f                	jne    c001a4fe <HalDetectFeatures()+0xc80>
c001a4ef:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a4f4:	83 e0 f7             	and    eax,0xfffffff7
c001a4f7:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c001a4fc:	eb 25                	jmp    c001a523 <HalDetectFeatures()+0xca5>
c001a4fe:	e8 9b 5c fe ff       	call   c000019e <hasLegacyFPU>
c001a503:	83 e0 01             	and    eax,0x1
c001a506:	83 e0 01             	and    eax,0x1
c001a509:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a510:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a515:	83 e0 f7             	and    eax,0xfffffff7
c001a518:	88 c2                	mov    dl,al
c001a51a:	88 c8                	mov    al,cl
c001a51c:	09 d0                	or     eax,edx
c001a51e:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c001a523:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a528:	83 e0 08             	and    eax,0x8
c001a52b:	0f b6 c0             	movzx  eax,al
c001a52e:	85 c0                	test   eax,eax
c001a530:	75 25                	jne    c001a557 <HalDetectFeatures()+0xcd9>
c001a532:	e8 67 5c fe ff       	call   c000019e <hasLegacyFPU>
c001a537:	83 e0 01             	and    eax,0x1
c001a53a:	83 e0 01             	and    eax,0x1
c001a53d:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a544:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a549:	83 e0 f7             	and    eax,0xfffffff7
c001a54c:	88 c2                	mov    dl,al
c001a54e:	88 c8                	mov    al,cl
c001a550:	09 d0                	or     eax,edx
c001a552:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c001a557:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a55c:	83 e0 08             	and    eax,0x8
c001a55f:	0f b6 c0             	movzx  eax,al
c001a562:	85 c0                	test   eax,eax
c001a564:	74 0d                	je     c001a573 <HalDetectFeatures()+0xcf5>
c001a566:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a56b:	83 c8 10             	or     eax,0x10
c001a56e:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c001a573:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a578:	83 e0 10             	and    eax,0x10
c001a57b:	0f b6 c0             	movzx  eax,al
c001a57e:	85 c0                	test   eax,eax
c001a580:	75 23                	jne    c001a5a5 <HalDetectFeatures()+0xd27>
c001a582:	e8 df 83 00 00       	call   c0022966 <x87Detect>
c001a587:	83 e0 01             	and    eax,0x1
c001a58a:	83 e0 01             	and    eax,0x1
c001a58d:	89 c1                	mov    ecx,eax
c001a58f:	c1 e1 04             	shl    ecx,0x4
c001a592:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a597:	83 e0 ef             	and    eax,0xffffffef
c001a59a:	88 c2                	mov    dl,al
c001a59c:	88 c8                	mov    al,cl
c001a59e:	09 d0                	or     eax,edx
c001a5a0:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c001a5a5:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c001a5aa:	83 e0 01             	and    eax,0x1
c001a5ad:	0f b6 c0             	movzx  eax,al
c001a5b0:	85 c0                	test   eax,eax
c001a5b2:	75 2d                	jne    c001a5e1 <HalDetectFeatures()+0xd63>
c001a5b4:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c001a5b9:	83 e0 02             	and    eax,0x2
c001a5bc:	0f b6 c0             	movzx  eax,al
c001a5bf:	85 c0                	test   eax,eax
c001a5c1:	75 1e                	jne    c001a5e1 <HalDetectFeatures()+0xd63>
c001a5c3:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c001a5c8:	83 e0 04             	and    eax,0x4
c001a5cb:	0f b6 c0             	movzx  eax,al
c001a5ce:	85 c0                	test   eax,eax
c001a5d0:	75 0f                	jne    c001a5e1 <HalDetectFeatures()+0xd63>
c001a5d2:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c001a5d7:	83 e0 08             	and    eax,0x8
c001a5da:	0f b6 c0             	movzx  eax,al
c001a5dd:	85 c0                	test   eax,eax
c001a5df:	74 0d                	je     c001a5ee <HalDetectFeatures()+0xd70>
c001a5e1:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a5e6:	83 c8 80             	or     eax,0xffffff80
c001a5e9:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c001a5ee:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a5f3:	83 e0 10             	and    eax,0x10
c001a5f6:	0f b6 c0             	movzx  eax,al
c001a5f9:	85 c0                	test   eax,eax
c001a5fb:	74 2f                	je     c001a62c <HalDetectFeatures()+0xdae>
c001a5fd:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a602:	83 e0 80             	and    eax,0xffffff80
c001a605:	0f b6 c0             	movzx  eax,al
c001a608:	85 c0                	test   eax,eax
c001a60a:	75 20                	jne    c001a62c <HalDetectFeatures()+0xdae>
c001a60c:	e8 0f 83 00 00       	call   c0022920 <sseDetect>
c001a611:	83 e0 01             	and    eax,0x1
c001a614:	89 c1                	mov    ecx,eax
c001a616:	c1 e1 07             	shl    ecx,0x7
c001a619:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a61e:	83 e0 7f             	and    eax,0x7f
c001a621:	88 c2                	mov    dl,al
c001a623:	88 c8                	mov    al,cl
c001a625:	09 d0                	or     eax,edx
c001a627:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c001a62c:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a631:	83 e0 80             	and    eax,0xffffff80
c001a634:	0f b6 c0             	movzx  eax,al
c001a637:	85 c0                	test   eax,eax
c001a639:	74 1c                	je     c001a657 <HalDetectFeatures()+0xdd9>
c001a63b:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c001a640:	83 e0 20             	and    eax,0x20
c001a643:	0f b6 c0             	movzx  eax,al
c001a646:	85 c0                	test   eax,eax
c001a648:	75 0d                	jne    c001a657 <HalDetectFeatures()+0xdd9>
c001a64a:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c001a64f:	83 e0 df             	and    eax,0xffffffdf
c001a652:	a2 4d 34 03 c0       	mov    ds:0xc003344d,al
c001a657:	c6 05 48 34 03 c0 00 	mov    BYTE PTR ds:0xc0033448,0x0
c001a65e:	90                   	nop
c001a65f:	81 c4 90 00 00 00    	add    esp,0x90
c001a665:	5b                   	pop    ebx
c001a666:	5e                   	pop    esi
c001a667:	5f                   	pop    edi
c001a668:	c3                   	ret    

c001a669 <HalEnableNMI()>:
c001a669:	c6 05 2c 34 03 c0 01 	mov    BYTE PTR ds:0xc003342c,0x1
c001a670:	6a 10                	push   0x10
c001a672:	e8 00 ef ff ff       	call   c0019577 <x86ReadCMOS(unsigned char)>
c001a677:	83 c4 04             	add    esp,0x4
c001a67a:	90                   	nop
c001a67b:	c3                   	ret    

c001a67c <HalDisableNMI()>:
c001a67c:	c6 05 2c 34 03 c0 00 	mov    BYTE PTR ds:0xc003342c,0x0
c001a683:	6a 10                	push   0x10
c001a685:	e8 ed ee ff ff       	call   c0019577 <x86ReadCMOS(unsigned char)>
c001a68a:	83 c4 04             	add    esp,0x4
c001a68d:	90                   	nop
c001a68e:	c3                   	ret    

c001a68f <HalGetNMIState()>:
c001a68f:	a0 2c 34 03 c0       	mov    al,ds:0xc003342c
c001a694:	c3                   	ret    

c001a695 <HalIsAPICEnabled()>:
c001a695:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a69a:	83 e0 01             	and    eax,0x1
c001a69d:	0f b6 c0             	movzx  eax,al
c001a6a0:	85 c0                	test   eax,eax
c001a6a2:	0f 95 c0             	setne  al
c001a6a5:	c3                   	ret    

c001a6a6 <x86rdmsr(unsigned int)>:
c001a6a6:	83 ec 1c             	sub    esp,0x1c
c001a6a9:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a6ae:	83 e0 08             	and    eax,0x8
c001a6b1:	0f b6 c0             	movzx  eax,al
c001a6b4:	85 c0                	test   eax,eax
c001a6b6:	75 10                	jne    c001a6c8 <x86rdmsr(unsigned int)+0x22>
c001a6b8:	83 ec 0c             	sub    esp,0xc
c001a6bb:	68 8a af 02 c0       	push   0xc002af8a
c001a6c0:	e8 63 5c ff ff       	call   c0010328 <KePanic(char const*)>
c001a6c5:	83 c4 10             	add    esp,0x10
c001a6c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6cc:	89 c1                	mov    ecx,eax
c001a6ce:	0f 32                	rdmsr  
c001a6d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a6d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a6d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a6e0:	83 c4 1c             	add    esp,0x1c
c001a6e3:	c3                   	ret    

c001a6e4 <x86wrmsr(unsigned int, unsigned long long)>:
c001a6e4:	83 ec 1c             	sub    esp,0x1c
c001a6e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a6eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a6ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a6f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6f7:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a6fc:	83 e0 08             	and    eax,0x8
c001a6ff:	0f b6 c0             	movzx  eax,al
c001a702:	85 c0                	test   eax,eax
c001a704:	75 10                	jne    c001a716 <x86wrmsr(unsigned int, unsigned long long)+0x32>
c001a706:	83 ec 0c             	sub    esp,0xc
c001a709:	68 90 af 02 c0       	push   0xc002af90
c001a70e:	e8 15 5c ff ff       	call   c0010328 <KePanic(char const*)>
c001a713:	83 c4 10             	add    esp,0x10
c001a716:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001a71a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a71e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a722:	0f 30                	wrmsr  
c001a724:	90                   	nop
c001a725:	83 c4 1c             	add    esp,0x1c
c001a728:	c3                   	ret    

c001a729 <HalHandleGeneralProtectionFault(void*, void*)>:
c001a729:	83 ec 0c             	sub    esp,0xc
c001a72c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001a731:	8b 00                	mov    eax,DWORD PTR [eax]
c001a733:	8a 40 62             	mov    al,BYTE PTR [eax+0x62]
c001a736:	0f b6 c0             	movzx  eax,al
c001a739:	85 c0                	test   eax,eax
c001a73b:	74 11                	je     c001a74e <HalHandleGeneralProtectionFault(void*, void*)+0x25>
c001a73d:	83 ec 0c             	sub    esp,0xc
c001a740:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a744:	e8 72 db ff ff       	call   c00182bb <Vm::faultHandler(regs*)>
c001a749:	83 c4 10             	add    esp,0x10
c001a74c:	eb 02                	jmp    c001a750 <HalHandleGeneralProtectionFault(void*, void*)+0x27>
c001a74e:	b0 00                	mov    al,0x0
c001a750:	83 c4 0c             	add    esp,0xc
c001a753:	c3                   	ret    

c001a754 <HalFindRSDP()>:
c001a754:	83 ec 1c             	sub    esp,0x1c
c001a757:	a1 7c 31 03 c0       	mov    eax,ds:0xc003317c
c001a75c:	3d ff 07 00 00       	cmp    eax,0x7ff
c001a761:	7e 17                	jle    c001a77a <HalFindRSDP()+0x26>
c001a763:	83 ec 0c             	sub    esp,0xc
c001a766:	68 00 04 00 00       	push   0x400
c001a76b:	e8 6c 32 ff ff       	call   c000d9dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001a770:	83 c4 10             	add    esp,0x10
c001a773:	0f b6 c0             	movzx  eax,al
c001a776:	85 c0                	test   eax,eax
c001a778:	74 04                	je     c001a77e <HalFindRSDP()+0x2a>
c001a77a:	b0 01                	mov    al,0x1
c001a77c:	eb 02                	jmp    c001a780 <HalFindRSDP()+0x2c>
c001a77e:	b0 00                	mov    al,0x0
c001a780:	0f b6 c0             	movzx  eax,al
c001a783:	85 c0                	test   eax,eax
c001a785:	74 1d                	je     c001a7a4 <HalFindRSDP()+0x50>
c001a787:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a78c:	83 e0 fb             	and    eax,0xfffffffb
c001a78f:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c001a794:	83 ec 0c             	sub    esp,0xc
c001a797:	68 96 af 02 c0       	push   0xc002af96
c001a79c:	e8 c5 c7 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a7a1:	83 c4 10             	add    esp,0x10
c001a7a4:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a7a9:	83 e0 04             	and    eax,0x4
c001a7ac:	0f b6 c0             	movzx  eax,al
c001a7af:	85 c0                	test   eax,eax
c001a7b1:	75 17                	jne    c001a7ca <HalFindRSDP()+0x76>
c001a7b3:	83 ec 0c             	sub    esp,0xc
c001a7b6:	68 a5 af 02 c0       	push   0xc002afa5
c001a7bb:	e8 a6 c7 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a7c0:	83 c4 10             	add    esp,0x10
c001a7c3:	b8 00 00 00 00       	mov    eax,0x0
c001a7c8:	eb 63                	jmp    c001a82d <HalFindRSDP()+0xd9>
c001a7ca:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001a7d2:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001a7da:	77 2f                	ja     c001a80b <HalFindRSDP()+0xb7>
c001a7dc:	83 ec 04             	sub    esp,0x4
c001a7df:	6a 08                	push   0x8
c001a7e1:	68 af af 02 c0       	push   0xc002afaf
c001a7e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a7ea:	e8 91 5b fe ff       	call   c0000380 <memcmp>
c001a7ef:	83 c4 10             	add    esp,0x10
c001a7f2:	85 c0                	test   eax,eax
c001a7f4:	0f 94 c0             	sete   al
c001a7f7:	0f b6 c0             	movzx  eax,al
c001a7fa:	85 c0                	test   eax,eax
c001a7fc:	74 06                	je     c001a804 <HalFindRSDP()+0xb0>
c001a7fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a802:	eb 29                	jmp    c001a82d <HalFindRSDP()+0xd9>
c001a804:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001a809:	eb c7                	jmp    c001a7d2 <HalFindRSDP()+0x7e>
c001a80b:	83 ec 0c             	sub    esp,0xc
c001a80e:	68 b8 af 02 c0       	push   0xc002afb8
c001a813:	e8 4e c7 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a818:	83 c4 10             	add    esp,0x10
c001a81b:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a820:	83 e0 fb             	and    eax,0xfffffffb
c001a823:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c001a828:	b8 00 00 00 00       	mov    eax,0x0
c001a82d:	83 c4 1c             	add    esp,0x1c
c001a830:	c3                   	ret    

c001a831 <HalHandlePageFault(void*, void*)>:
c001a831:	83 ec 1c             	sub    esp,0x1c
c001a834:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001a839:	8b 00                	mov    eax,DWORD PTR [eax]
c001a83b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a83e:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c001a844:	0f 20 d2             	mov    edx,cr2
c001a847:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a84b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a84f:	83 ec 08             	sub    esp,0x8
c001a852:	52                   	push   edx
c001a853:	50                   	push   eax
c001a854:	e8 e5 9d ff ff       	call   c001463e <VAS::tryLoadBackOffDisk(unsigned long)>
c001a859:	83 c4 10             	add    esp,0x10
c001a85c:	83 c4 1c             	add    esp,0x1c
c001a85f:	c3                   	ret    

c001a860 <HalHandleOpcodeFault(void*, void*)>:
c001a860:	83 ec 1c             	sub    esp,0x1c
c001a863:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a867:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a86b:	a0 48 34 03 c0       	mov    al,ds:0xc0033448
c001a870:	0f b6 c0             	movzx  eax,al
c001a873:	85 c0                	test   eax,eax
c001a875:	74 25                	je     c001a89c <HalHandleOpcodeFault(void*, void*)+0x3c>
c001a877:	83 ec 0c             	sub    esp,0xc
c001a87a:	68 c4 b1 02 c0       	push   0xc002b1c4
c001a87f:	e8 e2 c6 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a884:	83 c4 10             	add    esp,0x10
c001a887:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a88b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a88e:	8d 50 19             	lea    edx,[eax+0x19]
c001a891:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a895:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a898:	b0 01                	mov    al,0x1
c001a89a:	eb 02                	jmp    c001a89e <HalHandleOpcodeFault(void*, void*)+0x3e>
c001a89c:	b0 00                	mov    al,0x0
c001a89e:	83 c4 1c             	add    esp,0x1c
c001a8a1:	c3                   	ret    

c001a8a2 <HalDisplayDebugInfo(void*)>:
c001a8a2:	83 ec 2c             	sub    esp,0x2c
c001a8a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a8a9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a8ad:	0f 20 c0             	mov    eax,cr0
c001a8b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a8b4:	0f 20 d0             	mov    eax,cr2
c001a8b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a8bb:	0f 20 d8             	mov    eax,cr3
c001a8be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a8c2:	0f 20 e0             	mov    eax,cr4
c001a8c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a8c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a8cd:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001a8d0:	83 ec 08             	sub    esp,0x8
c001a8d3:	50                   	push   eax
c001a8d4:	68 d2 af 02 c0       	push   0xc002afd2
c001a8d9:	e8 88 c6 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a8de:	83 c4 10             	add    esp,0x10
c001a8e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a8e5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001a8e8:	83 ec 08             	sub    esp,0x8
c001a8eb:	50                   	push   eax
c001a8ec:	68 c3 af 02 c0       	push   0xc002afc3
c001a8f1:	e8 70 c6 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a8f6:	83 c4 10             	add    esp,0x10
c001a8f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a8fd:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001a900:	83 ec 08             	sub    esp,0x8
c001a903:	50                   	push   eax
c001a904:	68 ce af 02 c0       	push   0xc002afce
c001a909:	e8 58 c6 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a90e:	83 c4 10             	add    esp,0x10
c001a911:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a915:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a918:	83 ec 08             	sub    esp,0x8
c001a91b:	50                   	push   eax
c001a91c:	68 dd af 02 c0       	push   0xc002afdd
c001a921:	e8 40 c6 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a926:	83 c4 10             	add    esp,0x10
c001a929:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a92d:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001a930:	83 ec 08             	sub    esp,0x8
c001a933:	50                   	push   eax
c001a934:	68 e8 af 02 c0       	push   0xc002afe8
c001a939:	e8 28 c6 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a93e:	83 c4 10             	add    esp,0x10
c001a941:	83 ec 08             	sub    esp,0x8
c001a944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a948:	68 f3 af 02 c0       	push   0xc002aff3
c001a94d:	e8 14 c6 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a952:	83 c4 10             	add    esp,0x10
c001a955:	83 ec 08             	sub    esp,0x8
c001a958:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a95c:	68 fe af 02 c0       	push   0xc002affe
c001a961:	e8 00 c6 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a966:	83 c4 10             	add    esp,0x10
c001a969:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a96d:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001a970:	c1 e0 05             	shl    eax,0x5
c001a973:	8d 90 80 d4 02 c0    	lea    edx,[eax-0x3ffd2b80]
c001a979:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a97d:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001a980:	83 ec 04             	sub    esp,0x4
c001a983:	52                   	push   edx
c001a984:	50                   	push   eax
c001a985:	68 09 b0 02 c0       	push   0xc002b009
c001a98a:	e8 d7 c5 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a98f:	83 c4 10             	add    esp,0x10
c001a992:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001a997:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a99d:	83 ec 0c             	sub    esp,0xc
c001a9a0:	50                   	push   eax
c001a9a1:	e8 81 7f ff ff       	call   c0012927 <setActiveTerminal(VgaText*)>
c001a9a6:	83 c4 10             	add    esp,0x10
c001a9a9:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001a9ae:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a9b4:	83 ec 08             	sub    esp,0x8
c001a9b7:	68 18 b0 02 c0       	push   0xc002b018
c001a9bc:	50                   	push   eax
c001a9bd:	e8 a2 82 ff ff       	call   c0012c64 <VgaText::puts(char const*)>
c001a9c2:	83 c4 10             	add    esp,0x10
c001a9c5:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001a9ca:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a9d0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a9d4:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001a9d7:	83 ec 08             	sub    esp,0x8
c001a9da:	52                   	push   edx
c001a9db:	50                   	push   eax
c001a9dc:	e8 3d 82 ff ff       	call   c0012c1e <VgaText::putx(unsigned int)>
c001a9e1:	83 c4 10             	add    esp,0x10
c001a9e4:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001a9e9:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a9ef:	83 ec 08             	sub    esp,0x8
c001a9f2:	68 26 b0 02 c0       	push   0xc002b026
c001a9f7:	50                   	push   eax
c001a9f8:	e8 67 82 ff ff       	call   c0012c64 <VgaText::puts(char const*)>
c001a9fd:	83 c4 10             	add    esp,0x10
c001aa00:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001aa05:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001aa0b:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001aa10:	8b 12                	mov    edx,DWORD PTR [edx]
c001aa12:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001aa15:	83 c2 0c             	add    edx,0xc
c001aa18:	83 ec 08             	sub    esp,0x8
c001aa1b:	52                   	push   edx
c001aa1c:	50                   	push   eax
c001aa1d:	e8 42 82 ff ff       	call   c0012c64 <VgaText::puts(char const*)>
c001aa22:	83 c4 10             	add    esp,0x10
c001aa25:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001aa2a:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001aa30:	83 ec 08             	sub    esp,0x8
c001aa33:	68 2f b0 02 c0       	push   0xc002b02f
c001aa38:	50                   	push   eax
c001aa39:	e8 26 82 ff ff       	call   c0012c64 <VgaText::puts(char const*)>
c001aa3e:	83 c4 10             	add    esp,0x10
c001aa41:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001aa46:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001aa4c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aa50:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001aa53:	83 ec 08             	sub    esp,0x8
c001aa56:	52                   	push   edx
c001aa57:	50                   	push   eax
c001aa58:	e8 c1 81 ff ff       	call   c0012c1e <VgaText::putx(unsigned int)>
c001aa5d:	83 c4 10             	add    esp,0x10
c001aa60:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001aa65:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001aa6b:	83 ec 08             	sub    esp,0x8
c001aa6e:	68 37 b0 02 c0       	push   0xc002b037
c001aa73:	50                   	push   eax
c001aa74:	e8 eb 81 ff ff       	call   c0012c64 <VgaText::puts(char const*)>
c001aa79:	83 c4 10             	add    esp,0x10
c001aa7c:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001aa81:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001aa87:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aa8b:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001aa8e:	83 ec 08             	sub    esp,0x8
c001aa91:	52                   	push   edx
c001aa92:	50                   	push   eax
c001aa93:	e8 86 81 ff ff       	call   c0012c1e <VgaText::putx(unsigned int)>
c001aa98:	83 c4 10             	add    esp,0x10
c001aa9b:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001aaa0:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001aaa6:	83 ec 08             	sub    esp,0x8
c001aaa9:	68 3f b0 02 c0       	push   0xc002b03f
c001aaae:	50                   	push   eax
c001aaaf:	e8 b0 81 ff ff       	call   c0012c64 <VgaText::puts(char const*)>
c001aab4:	83 c4 10             	add    esp,0x10
c001aab7:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001aabc:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001aac2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aac6:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001aac9:	83 ec 08             	sub    esp,0x8
c001aacc:	52                   	push   edx
c001aacd:	50                   	push   eax
c001aace:	e8 4b 81 ff ff       	call   c0012c1e <VgaText::putx(unsigned int)>
c001aad3:	83 c4 10             	add    esp,0x10
c001aad6:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001aadb:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001aae1:	83 ec 08             	sub    esp,0x8
c001aae4:	68 47 b0 02 c0       	push   0xc002b047
c001aae9:	50                   	push   eax
c001aaea:	e8 75 81 ff ff       	call   c0012c64 <VgaText::puts(char const*)>
c001aaef:	83 c4 10             	add    esp,0x10
c001aaf2:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001aaf7:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001aafd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ab01:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001ab04:	83 ec 08             	sub    esp,0x8
c001ab07:	52                   	push   edx
c001ab08:	50                   	push   eax
c001ab09:	e8 10 81 ff ff       	call   c0012c1e <VgaText::putx(unsigned int)>
c001ab0e:	83 c4 10             	add    esp,0x10
c001ab11:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001ab16:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ab1c:	83 ec 08             	sub    esp,0x8
c001ab1f:	68 4f b0 02 c0       	push   0xc002b04f
c001ab24:	50                   	push   eax
c001ab25:	e8 3a 81 ff ff       	call   c0012c64 <VgaText::puts(char const*)>
c001ab2a:	83 c4 10             	add    esp,0x10
c001ab2d:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001ab32:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ab38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ab3c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001ab3f:	83 ec 08             	sub    esp,0x8
c001ab42:	52                   	push   edx
c001ab43:	50                   	push   eax
c001ab44:	e8 d5 80 ff ff       	call   c0012c1e <VgaText::putx(unsigned int)>
c001ab49:	83 c4 10             	add    esp,0x10
c001ab4c:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001ab51:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ab57:	83 ec 08             	sub    esp,0x8
c001ab5a:	68 57 b0 02 c0       	push   0xc002b057
c001ab5f:	50                   	push   eax
c001ab60:	e8 ff 80 ff ff       	call   c0012c64 <VgaText::puts(char const*)>
c001ab65:	83 c4 10             	add    esp,0x10
c001ab68:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001ab6d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ab73:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ab77:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001ab7a:	83 ec 08             	sub    esp,0x8
c001ab7d:	52                   	push   edx
c001ab7e:	50                   	push   eax
c001ab7f:	e8 9a 80 ff ff       	call   c0012c1e <VgaText::putx(unsigned int)>
c001ab84:	83 c4 10             	add    esp,0x10
c001ab87:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001ab8c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ab92:	83 ec 08             	sub    esp,0x8
c001ab95:	68 5f b0 02 c0       	push   0xc002b05f
c001ab9a:	50                   	push   eax
c001ab9b:	e8 c4 80 ff ff       	call   c0012c64 <VgaText::puts(char const*)>
c001aba0:	83 c4 10             	add    esp,0x10
c001aba3:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001aba8:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001abae:	83 ec 08             	sub    esp,0x8
c001abb1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001abb5:	50                   	push   eax
c001abb6:	e8 63 80 ff ff       	call   c0012c1e <VgaText::putx(unsigned int)>
c001abbb:	83 c4 10             	add    esp,0x10
c001abbe:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001abc3:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001abc9:	83 ec 08             	sub    esp,0x8
c001abcc:	68 68 b0 02 c0       	push   0xc002b068
c001abd1:	50                   	push   eax
c001abd2:	e8 8d 80 ff ff       	call   c0012c64 <VgaText::puts(char const*)>
c001abd7:	83 c4 10             	add    esp,0x10
c001abda:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001abdf:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001abe5:	83 ec 08             	sub    esp,0x8
c001abe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abec:	50                   	push   eax
c001abed:	e8 2c 80 ff ff       	call   c0012c1e <VgaText::putx(unsigned int)>
c001abf2:	83 c4 10             	add    esp,0x10
c001abf5:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001abfa:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ac00:	83 ec 08             	sub    esp,0x8
c001ac03:	68 70 b0 02 c0       	push   0xc002b070
c001ac08:	50                   	push   eax
c001ac09:	e8 56 80 ff ff       	call   c0012c64 <VgaText::puts(char const*)>
c001ac0e:	83 c4 10             	add    esp,0x10
c001ac11:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001ac16:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ac1c:	83 ec 08             	sub    esp,0x8
c001ac1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ac23:	50                   	push   eax
c001ac24:	e8 f5 7f ff ff       	call   c0012c1e <VgaText::putx(unsigned int)>
c001ac29:	83 c4 10             	add    esp,0x10
c001ac2c:	fa                   	cli    
c001ac2d:	f4                   	hlt    
c001ac2e:	eb fe                	jmp    c001ac2e <HalDisplayDebugInfo(void*)+0x38c>

c001ac30 <HalReceivedNMI()>:
c001ac30:	83 ec 1c             	sub    esp,0x1c
c001ac33:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c001ac3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac3e:	89 c2                	mov    edx,eax
c001ac40:	ec                   	in     al,dx
c001ac41:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001ac45:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001ac49:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ac4d:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c001ac54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac58:	89 c2                	mov    edx,eax
c001ac5a:	ec                   	in     al,dx
c001ac5b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001ac5f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001ac63:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001ac67:	83 ec 0c             	sub    esp,0xc
c001ac6a:	68 78 b0 02 c0       	push   0xc002b078
c001ac6f:	e8 f2 c2 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ac74:	83 c4 10             	add    esp,0x10
c001ac77:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001ac7c:	83 e0 10             	and    eax,0x10
c001ac7f:	74 10                	je     c001ac91 <HalReceivedNMI()+0x61>
c001ac81:	83 ec 0c             	sub    esp,0xc
c001ac84:	68 89 b0 02 c0       	push   0xc002b089
c001ac89:	e8 9a 56 ff ff       	call   c0010328 <KePanic(char const*)>
c001ac8e:	83 c4 10             	add    esp,0x10
c001ac91:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001ac96:	83 e0 40             	and    eax,0x40
c001ac99:	74 10                	je     c001acab <HalReceivedNMI()+0x7b>
c001ac9b:	83 ec 0c             	sub    esp,0xc
c001ac9e:	68 96 b0 02 c0       	push   0xc002b096
c001aca3:	e8 80 56 ff ff       	call   c0010328 <KePanic(char const*)>
c001aca8:	83 c4 10             	add    esp,0x10
c001acab:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001acaf:	0f be c0             	movsx  eax,al
c001acb2:	85 c0                	test   eax,eax
c001acb4:	79 10                	jns    c001acc6 <HalReceivedNMI()+0x96>
c001acb6:	83 ec 0c             	sub    esp,0xc
c001acb9:	68 a0 b0 02 c0       	push   0xc002b0a0
c001acbe:	e8 65 56 ff ff       	call   c0010328 <KePanic(char const*)>
c001acc3:	83 c4 10             	add    esp,0x10
c001acc6:	90                   	nop
c001acc7:	83 c4 1c             	add    esp,0x1c
c001acca:	c3                   	ret    

c001accb <HalSystemIdle()>:
c001accb:	56                   	push   esi
c001accc:	53                   	push   ebx
c001accd:	83 ec 14             	sub    esp,0x14
c001acd0:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001acd5:	83 e0 10             	and    eax,0x10
c001acd8:	0f b6 c0             	movzx  eax,al
c001acdb:	85 c0                	test   eax,eax
c001acdd:	74 43                	je     c001ad22 <HalSystemIdle()+0x57>
c001acdf:	83 ec 0c             	sub    esp,0xc
c001ace2:	68 e1 00 00 00       	push   0xe1
c001ace7:	e8 ba f9 ff ff       	call   c001a6a6 <x86rdmsr(unsigned int)>
c001acec:	83 c4 10             	add    esp,0x10
c001acef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001acf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001acf7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001acfb:	83 e0 02             	and    eax,0x2
c001acfe:	89 c3                	mov    ebx,eax
c001ad00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad04:	83 e0 00             	and    eax,0x0
c001ad07:	89 c6                	mov    esi,eax
c001ad09:	83 ec 04             	sub    esp,0x4
c001ad0c:	56                   	push   esi
c001ad0d:	53                   	push   ebx
c001ad0e:	68 e1 00 00 00       	push   0xe1
c001ad13:	e8 cc f9 ff ff       	call   c001a6e4 <x86wrmsr(unsigned int, unsigned long long)>
c001ad18:	83 c4 10             	add    esp,0x10
c001ad1b:	e8 74 54 fe ff       	call   c0000194 <doTPAUSE>
c001ad20:	eb 01                	jmp    c001ad23 <HalSystemIdle()+0x58>
c001ad22:	f4                   	hlt    
c001ad23:	90                   	nop
c001ad24:	83 c4 14             	add    esp,0x14
c001ad27:	5b                   	pop    ebx
c001ad28:	5e                   	pop    esi
c001ad29:	c3                   	ret    

c001ad2a <i386SaveCoprocessor(void*)>:
c001ad2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad2e:	83 c0 3f             	add    eax,0x3f
c001ad31:	83 e0 c0             	and    eax,0xffffffc0
c001ad34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad38:	ff 25 10 34 03 c0    	jmp    DWORD PTR ds:0xc0033410

c001ad3e <i386LoadCoprocessor(void*)>:
c001ad3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad42:	83 c0 3f             	add    eax,0x3f
c001ad45:	83 e0 c0             	and    eax,0xffffffc0
c001ad48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad4c:	ff 25 0c 34 03 c0    	jmp    DWORD PTR ds:0xc003340c

c001ad52 <x87EmulHandler(regs*, void*)>:
c001ad52:	53                   	push   ebx
c001ad53:	83 ec 08             	sub    esp,0x8
c001ad56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad5b:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c001ad5f:	74 10                	je     c001ad71 <x87EmulHandler(regs*, void*)+0x1f>
c001ad61:	83 ec 0c             	sub    esp,0xc
c001ad64:	68 ad b0 02 c0       	push   0xc002b0ad
c001ad69:	e8 ba 55 ff ff       	call   c0010328 <KePanic(char const*)>
c001ad6e:	83 c4 10             	add    esp,0x10
c001ad71:	0f 20 c0             	mov    eax,cr0
c001ad74:	a8 08                	test   al,0x8
c001ad76:	74 59                	je     c001add1 <x87EmulHandler(regs*, void*)+0x7f>
c001ad78:	0f 06                	clts   
c001ad7a:	a1 08 34 03 c0       	mov    eax,ds:0xc0033408
c001ad7f:	85 c0                	test   eax,eax
c001ad81:	74 0e                	je     c001ad91 <x87EmulHandler(regs*, void*)+0x3f>
c001ad83:	83 ec 0c             	sub    esp,0xc
c001ad86:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001ad89:	e8 9c ff ff ff       	call   c001ad2a <i386SaveCoprocessor(void*)>
c001ad8e:	83 c4 10             	add    esp,0x10
c001ad91:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001ad97:	83 7b 59 00          	cmp    DWORD PTR [ebx+0x59],0x0
c001ad9b:	75 12                	jne    c001adaf <x87EmulHandler(regs*, void*)+0x5d>
c001ad9d:	83 ec 0c             	sub    esp,0xc
c001ada0:	68 40 02 00 00       	push   0x240
c001ada5:	e8 2a 51 ff ff       	call   c000fed4 <malloc>
c001adaa:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c001adad:	eb 10                	jmp    c001adbf <x87EmulHandler(regs*, void*)+0x6d>
c001adaf:	a1 08 34 03 c0       	mov    eax,ds:0xc0033408
c001adb4:	83 ec 0c             	sub    esp,0xc
c001adb7:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001adba:	e8 7f ff ff ff       	call   c001ad3e <i386LoadCoprocessor(void*)>
c001adbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001adc4:	83 c4 10             	add    esp,0x10
c001adc7:	a3 08 34 03 c0       	mov    ds:0xc0033408,eax
c001adcc:	83 c4 08             	add    esp,0x8
c001adcf:	5b                   	pop    ebx
c001add0:	c3                   	ret    
c001add1:	83 ec 0c             	sub    esp,0xc
c001add4:	68 c1 b0 02 c0       	push   0xc002b0c1
c001add9:	e8 88 c1 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001adde:	c7 44 24 20 01 00 00 00 	mov    DWORD PTR [esp+0x20],0x1
c001ade6:	83 c4 18             	add    esp,0x18
c001ade9:	5b                   	pop    ebx
c001adea:	e9 b5 c8 ff ff       	jmp    c00176a4 <KeTerminateCurrentThread(int)>

c001adef <HalInitialiseCoprocessor()>:
c001adef:	83 ec 10             	sub    esp,0x10
c001adf2:	6a 00                	push   0x0
c001adf4:	68 52 ad 01 c0       	push   0xc001ad52
c001adf9:	6a 07                	push   0x7
c001adfb:	c7 05 08 34 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033408,0x0
c001ae05:	e8 fb 07 00 00       	call   c001b605 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ae0a:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001ae0f:	83 c4 10             	add    esp,0x10
c001ae12:	a8 80                	test   al,0x80
c001ae14:	74 29                	je     c001ae3f <HalInitialiseCoprocessor()+0x50>
c001ae16:	83 ec 0c             	sub    esp,0xc
c001ae19:	68 d7 b0 02 c0       	push   0xc002b0d7
c001ae1e:	e8 43 c1 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ae23:	c7 05 10 34 03 c0 38 29 02 c0 	mov    DWORD PTR ds:0xc0033410,0xc0022938
c001ae2d:	c7 05 0c 34 03 c0 40 29 02 c0 	mov    DWORD PTR ds:0xc003340c,0xc0022940
c001ae37:	83 c4 1c             	add    esp,0x1c
c001ae3a:	e9 09 7b 00 00       	jmp    c0022948 <sseInit>
c001ae3f:	a8 10                	test   al,0x10
c001ae41:	74 29                	je     c001ae6c <HalInitialiseCoprocessor()+0x7d>
c001ae43:	83 ec 0c             	sub    esp,0xc
c001ae46:	68 e2 b0 02 c0       	push   0xc002b0e2
c001ae4b:	e8 16 c1 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ae50:	c7 05 10 34 03 c0 87 29 02 c0 	mov    DWORD PTR ds:0xc0033410,0xc0022987
c001ae5a:	c7 05 0c 34 03 c0 8e 29 02 c0 	mov    DWORD PTR ds:0xc003340c,0xc002298e
c001ae64:	83 c4 1c             	add    esp,0x1c
c001ae67:	e9 29 7b 00 00       	jmp    c0022995 <x87Init>
c001ae6c:	c7 05 10 34 03 c0 66 95 01 c0 	mov    DWORD PTR ds:0xc0033410,0xc0019566
c001ae76:	c7 05 0c 34 03 c0 66 95 01 c0 	mov    DWORD PTR ds:0xc003340c,0xc0019566
c001ae80:	0f 20 c0             	mov    eax,cr0
c001ae83:	83 c8 04             	or     eax,0x4
c001ae86:	0f 22 c0             	mov    cr0,eax
c001ae89:	83 c4 0c             	add    esp,0xc
c001ae8c:	c3                   	ret    

c001ae8d <HalPanic(char const*)>:
c001ae8d:	53                   	push   ebx
c001ae8e:	83 ec 10             	sub    esp,0x10
c001ae91:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ae95:	fa                   	cli    
c001ae96:	53                   	push   ebx
c001ae97:	68 ed b0 02 c0       	push   0xc002b0ed
c001ae9c:	e8 c5 c0 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001aea1:	a1 04 34 03 c0       	mov    eax,ds:0xc0033404
c001aea6:	83 c4 10             	add    esp,0x10
c001aea9:	85 c0                	test   eax,eax
c001aeab:	74 09                	je     c001aeb6 <HalPanic(char const*)+0x29>
c001aead:	83 ec 0c             	sub    esp,0xc
c001aeb0:	53                   	push   ebx
c001aeb1:	ff d0                	call   eax
c001aeb3:	83 c4 10             	add    esp,0x10
c001aeb6:	a1 f4 31 03 c0       	mov    eax,ds:0xc00331f4
c001aebb:	85 c0                	test   eax,eax
c001aebd:	0f 84 dc 00 00 00    	je     c001af9f <HalPanic(char const*)+0x112>
c001aec3:	52                   	push   edx
c001aec4:	6a 01                	push   0x1
c001aec6:	6a 0f                	push   0xf
c001aec8:	50                   	push   eax
c001aec9:	e8 98 78 ff ff       	call   c0012766 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001aece:	59                   	pop    ecx
c001aecf:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001aed5:	e8 98 7a ff ff       	call   c0012972 <VgaText::clearScreen()>
c001aeda:	58                   	pop    eax
c001aedb:	5a                   	pop    edx
c001aedc:	68 c1 a0 02 c0       	push   0xc002a0c1
c001aee1:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001aee7:	e8 b2 78 ff ff       	call   c001279e <VgaText::setTitle(char*)>
c001aeec:	83 c4 0c             	add    esp,0xc
c001aeef:	6a 01                	push   0x1
c001aef1:	6a 0f                	push   0xf
c001aef3:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001aef9:	e8 68 78 ff ff       	call   c0012766 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001aefe:	59                   	pop    ecx
c001aeff:	58                   	pop    eax
c001af00:	68 06 b1 02 c0       	push   0xc002b106
c001af05:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001af0b:	e8 54 7d ff ff       	call   c0012c64 <VgaText::puts(char const*)>
c001af10:	83 c4 0c             	add    esp,0xc
c001af13:	6a 0f                	push   0xf
c001af15:	6a 01                	push   0x1
c001af17:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001af1d:	e8 44 78 ff ff       	call   c0012766 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001af22:	58                   	pop    eax
c001af23:	5a                   	pop    edx
c001af24:	68 0f b1 02 c0       	push   0xc002b10f
c001af29:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001af2f:	e8 30 7d ff ff       	call   c0012c64 <VgaText::puts(char const*)>
c001af34:	83 c4 0c             	add    esp,0xc
c001af37:	6a 01                	push   0x1
c001af39:	6a 0f                	push   0xf
c001af3b:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001af41:	e8 20 78 ff ff       	call   c0012766 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001af46:	59                   	pop    ecx
c001af47:	58                   	pop    eax
c001af48:	68 36 8c 02 c0       	push   0xc0028c36
c001af4d:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001af53:	e8 0c 7d ff ff       	call   c0012c64 <VgaText::puts(char const*)>
c001af58:	58                   	pop    eax
c001af59:	5a                   	pop    edx
c001af5a:	68 1c b1 02 c0       	push   0xc002b11c
c001af5f:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001af65:	e8 fa 7c ff ff       	call   c0012c64 <VgaText::puts(char const*)>
c001af6a:	59                   	pop    ecx
c001af6b:	58                   	pop    eax
c001af6c:	68 56 b1 02 c0       	push   0xc002b156
c001af71:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001af77:	e8 e8 7c ff ff       	call   c0012c64 <VgaText::puts(char const*)>
c001af7c:	58                   	pop    eax
c001af7d:	5a                   	pop    edx
c001af7e:	53                   	push   ebx
c001af7f:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001af85:	e8 da 7c ff ff       	call   c0012c64 <VgaText::puts(char const*)>
c001af8a:	59                   	pop    ecx
c001af8b:	5b                   	pop    ebx
c001af8c:	68 36 8c 02 c0       	push   0xc0028c36
c001af91:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001af97:	e8 c8 7c ff ff       	call   c0012c64 <VgaText::puts(char const*)>
c001af9c:	83 c4 10             	add    esp,0x10
c001af9f:	eb fe                	jmp    c001af9f <HalPanic(char const*)+0x112>

c001afa1 <HalQueryPerformanceCounter()>:
c001afa1:	31 c0                	xor    eax,eax
c001afa3:	31 d2                	xor    edx,edx
c001afa5:	f6 05 4e 34 03 c0 08 	test   BYTE PTR ds:0xc003344e,0x8
c001afac:	75 02                	jne    c001afb0 <HalQueryPerformanceCounter()+0xf>
c001afae:	0f 31                	rdtsc  
c001afb0:	c3                   	ret    

c001afb1 <HalInitialise()>:
c001afb1:	53                   	push   ebx
c001afb2:	83 ec 08             	sub    esp,0x8
c001afb5:	e8 c4 e8 ff ff       	call   c001987e <HalDetectFeatures()>
c001afba:	83 ec 0c             	sub    esp,0xc
c001afbd:	68 67 95 01 c0       	push   0xc0019567
c001afc2:	e8 9b 5c ff ff       	call   c0010c62 <KeRegisterRestartHandler(void (*)())>
c001afc7:	c7 04 24 72 95 01 c0 	mov    DWORD PTR [esp],0xc0019572
c001afce:	e8 85 5c ff ff       	call   c0010c58 <KeRegisterShutdownHandler(void (*)())>
c001afd3:	c7 04 24 73 95 01 c0 	mov    DWORD PTR [esp],0xc0019573
c001afda:	e8 8d 5c ff ff       	call   c0010c6c <KeRegisterSleepHandler(void (*)())>
c001afdf:	e8 dc 1b ff ff       	call   c000cbc0 <scanMADT()>
c001afe4:	83 c4 10             	add    esp,0x10
c001afe7:	80 3d 40 2e 03 c0 00 	cmp    BYTE PTR ds:0xc0032e40,0x0
c001afee:	75 0d                	jne    c001affd <HalInitialise()+0x4c>
c001aff0:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001aff5:	83 e0 fe             	and    eax,0xfffffffe
c001aff8:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c001affd:	e8 ea 08 00 00       	call   c001b8ec <picOpen()>
c001b002:	f6 05 4c 34 03 c0 01 	test   BYTE PTR ds:0xc003344c,0x1
c001b009:	74 0a                	je     c001b015 <HalInitialise()+0x64>
c001b00b:	e8 2c 08 00 00       	call   c001b83c <picDisable()>
c001b010:	e8 59 e1 ff ff       	call   c001916e <apicOpen()>
c001b015:	50                   	push   eax
c001b016:	bb 0f 00 00 00       	mov    ebx,0xf
c001b01b:	6a 00                	push   0x0
c001b01d:	68 fc ef 00 c0       	push   0xc000effc
c001b022:	6a 02                	push   0x2
c001b024:	e8 dc 05 00 00       	call   c001b605 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b029:	83 c4 0c             	add    esp,0xc
c001b02c:	6a 00                	push   0x0
c001b02e:	68 74 ef 00 c0       	push   0xc000ef74
c001b033:	6a 06                	push   0x6
c001b035:	e8 cb 05 00 00       	call   c001b605 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b03a:	83 c4 0c             	add    esp,0xc
c001b03d:	6a 00                	push   0x0
c001b03f:	68 0c f0 00 c0       	push   0xc000f00c
c001b044:	6a 08                	push   0x8
c001b046:	e8 ba 05 00 00       	call   c001b605 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b04b:	83 c4 0c             	add    esp,0xc
c001b04e:	6a 00                	push   0x0
c001b050:	68 cc ee 00 c0       	push   0xc000eecc
c001b055:	6a 0d                	push   0xd
c001b057:	e8 a9 05 00 00       	call   c001b605 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b05c:	83 c4 0c             	add    esp,0xc
c001b05f:	6a 00                	push   0x0
c001b061:	68 20 ef 00 c0       	push   0xc000ef20
c001b066:	6a 0e                	push   0xe
c001b068:	e8 98 05 00 00       	call   c001b605 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b06d:	83 c4 0c             	add    esp,0xc
c001b070:	6a 00                	push   0x0
c001b072:	68 c8 ef 00 c0       	push   0xc000efc8
c001b077:	6a 00                	push   0x0
c001b079:	e8 87 05 00 00       	call   c001b605 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b07e:	83 c4 0c             	add    esp,0xc
c001b081:	6a 00                	push   0x0
c001b083:	68 c8 ef 00 c0       	push   0xc000efc8
c001b088:	6a 01                	push   0x1
c001b08a:	e8 76 05 00 00       	call   c001b605 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b08f:	83 c4 0c             	add    esp,0xc
c001b092:	6a 00                	push   0x0
c001b094:	68 c8 ef 00 c0       	push   0xc000efc8
c001b099:	6a 03                	push   0x3
c001b09b:	e8 65 05 00 00       	call   c001b605 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b0a0:	83 c4 0c             	add    esp,0xc
c001b0a3:	6a 00                	push   0x0
c001b0a5:	68 c8 ef 00 c0       	push   0xc000efc8
c001b0aa:	6a 04                	push   0x4
c001b0ac:	e8 54 05 00 00       	call   c001b605 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b0b1:	83 c4 0c             	add    esp,0xc
c001b0b4:	6a 00                	push   0x0
c001b0b6:	68 c8 ef 00 c0       	push   0xc000efc8
c001b0bb:	6a 05                	push   0x5
c001b0bd:	e8 43 05 00 00       	call   c001b605 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b0c2:	83 c4 0c             	add    esp,0xc
c001b0c5:	6a 00                	push   0x0
c001b0c7:	68 c8 ef 00 c0       	push   0xc000efc8
c001b0cc:	6a 00                	push   0x0
c001b0ce:	e8 32 05 00 00       	call   c001b605 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b0d3:	83 c4 0c             	add    esp,0xc
c001b0d6:	6a 00                	push   0x0
c001b0d8:	68 c8 ef 00 c0       	push   0xc000efc8
c001b0dd:	6a 01                	push   0x1
c001b0df:	e8 21 05 00 00       	call   c001b605 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b0e4:	83 c4 0c             	add    esp,0xc
c001b0e7:	6a 00                	push   0x0
c001b0e9:	68 c8 ef 00 c0       	push   0xc000efc8
c001b0ee:	6a 09                	push   0x9
c001b0f0:	e8 10 05 00 00       	call   c001b605 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b0f5:	83 c4 0c             	add    esp,0xc
c001b0f8:	6a 00                	push   0x0
c001b0fa:	68 c8 ef 00 c0       	push   0xc000efc8
c001b0ff:	6a 0a                	push   0xa
c001b101:	e8 ff 04 00 00       	call   c001b605 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b106:	83 c4 0c             	add    esp,0xc
c001b109:	6a 00                	push   0x0
c001b10b:	68 c8 ef 00 c0       	push   0xc000efc8
c001b110:	6a 0b                	push   0xb
c001b112:	e8 ee 04 00 00       	call   c001b605 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b117:	83 c4 10             	add    esp,0x10
c001b11a:	50                   	push   eax
c001b11b:	6a 00                	push   0x0
c001b11d:	68 c8 ef 00 c0       	push   0xc000efc8
c001b122:	53                   	push   ebx
c001b123:	43                   	inc    ebx
c001b124:	e8 dc 04 00 00       	call   c001b605 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b129:	83 c4 10             	add    esp,0x10
c001b12c:	83 fb 1e             	cmp    ebx,0x1e
c001b12f:	75 e9                	jne    c001b11a <HalInitialise()+0x169>
c001b131:	50                   	push   eax
c001b132:	6a 00                	push   0x0
c001b134:	68 00 26 01 c0       	push   0xc0012600
c001b139:	6a 60                	push   0x60
c001b13b:	e8 c5 04 00 00       	call   c001b605 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b140:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c001b145:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b14f:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001b156:	e8 79 4d ff ff       	call   c000fed4 <malloc>
c001b15b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b15e:	89 c3                	mov    ebx,eax
c001b160:	e8 ef 0e 00 00       	call   c001c054 <RTC::RTC()>
c001b165:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001b16f:	5a                   	pop    edx
c001b170:	59                   	pop    ecx
c001b171:	53                   	push   ebx
c001b172:	ff 35 08 31 03 c0    	push   DWORD PTR ds:0xc0033108
c001b178:	e8 c5 f0 fe ff       	call   c000a242 <Device::addChild(Device*)>
c001b17d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b17f:	6a 00                	push   0x0
c001b181:	6a 00                	push   0x0
c001b183:	6a 00                	push   0x0
c001b185:	53                   	push   ebx
c001b186:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b189:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c001b18e:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
c001b194:	83 c4 28             	add    esp,0x28
c001b197:	5b                   	pop    ebx
c001b198:	c3                   	ret    

c001b199 <HalMakeBeep(int)>:
c001b199:	53                   	push   ebx
c001b19a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b19e:	85 db                	test   ebx,ebx
c001b1a0:	75 07                	jne    c001b1a9 <HalMakeBeep(int)+0x10>
c001b1a2:	e4 61                	in     al,0x61
c001b1a4:	83 e0 fc             	and    eax,0xfffffffc
c001b1a7:	eb 26                	jmp    c001b1cf <HalMakeBeep(int)+0x36>
c001b1a9:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b1ae:	99                   	cdq    
c001b1af:	f7 fb                	idiv   ebx
c001b1b1:	89 c1                	mov    ecx,eax
c001b1b3:	b0 b6                	mov    al,0xb6
c001b1b5:	e6 43                	out    0x43,al
c001b1b7:	88 c8                	mov    al,cl
c001b1b9:	e6 42                	out    0x42,al
c001b1bb:	89 c8                	mov    eax,ecx
c001b1bd:	c1 e8 08             	shr    eax,0x8
c001b1c0:	e6 42                	out    0x42,al
c001b1c2:	e4 61                	in     al,0x61
c001b1c4:	89 c2                	mov    edx,eax
c001b1c6:	83 ca 03             	or     edx,0x3
c001b1c9:	38 d0                	cmp    al,dl
c001b1cb:	74 04                	je     c001b1d1 <HalMakeBeep(int)+0x38>
c001b1cd:	88 d0                	mov    al,dl
c001b1cf:	e6 61                	out    0x61,al
c001b1d1:	5b                   	pop    ebx
c001b1d2:	c3                   	ret    

c001b1d3 <HalGetRand()>:
c001b1d3:	31 c0                	xor    eax,eax
c001b1d5:	c3                   	ret    

c001b1d6 <HalEndOfInterrupt(int)>:
c001b1d6:	f6 05 4c 34 03 c0 01 	test   BYTE PTR ds:0xc003344c,0x1
c001b1dd:	74 1d                	je     c001b1fc <HalEndOfInterrupt(int)+0x26>
c001b1df:	83 ec 18             	sub    esp,0x18
c001b1e2:	6a 1b                	push   0x1b
c001b1e4:	e8 bd f4 ff ff       	call   c001a6a6 <x86rdmsr(unsigned int)>
c001b1e9:	25 00 f0 ff ff       	and    eax,0xfffff000
c001b1ee:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001b1f8:	83 c4 1c             	add    esp,0x1c
c001b1fb:	c3                   	ret    
c001b1fc:	e9 6f 08 00 00       	jmp    c001ba70 <picEOI(int)>
c001b201:	90                   	nop

c001b202 <CPU::CPU()>:
c001b202:	83 ec 0c             	sub    esp,0xc
c001b205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b209:	83 ec 08             	sub    esp,0x8
c001b20c:	68 de ae 02 c0       	push   0xc002aede
c001b211:	50                   	push   eax
c001b212:	e8 8d f1 fe ff       	call   c000a3a4 <Device::Device(char const*)>
c001b217:	83 c4 10             	add    esp,0x10
c001b21a:	ba f0 b1 02 c0       	mov    edx,0xc002b1f0
c001b21f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b223:	89 10                	mov    DWORD PTR [eax],edx
c001b225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b229:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b237:	05 64 01 00 00       	add    eax,0x164
c001b23c:	83 ec 0c             	sub    esp,0xc
c001b23f:	50                   	push   eax
c001b240:	e8 19 3e ff ff       	call   c000f05e <GDT::GDT()>
c001b245:	83 c4 10             	add    esp,0x10
c001b248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b24c:	05 68 09 00 00       	add    eax,0x968
c001b251:	83 ec 0c             	sub    esp,0xc
c001b254:	50                   	push   eax
c001b255:	e8 56 40 ff ff       	call   c000f2b0 <IDT::IDT()>
c001b25a:	83 c4 10             	add    esp,0x10
c001b25d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b261:	05 68 11 00 00       	add    eax,0x1168
c001b266:	83 ec 0c             	sub    esp,0xc
c001b269:	50                   	push   eax
c001b26a:	e8 b1 7e ff ff       	call   c0013120 <TSS::TSS()>
c001b26f:	83 c4 10             	add    esp,0x10
c001b272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b276:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001b280:	90                   	nop
c001b281:	83 c4 0c             	add    esp,0xc
c001b284:	c3                   	ret    
c001b285:	90                   	nop

c001b286 <CPU::setupSMEP()>:
c001b286:	0f 20 e0             	mov    eax,cr4
c001b289:	0d 00 00 10 00       	or     eax,0x100000
c001b28e:	0f 22 e0             	mov    cr4,eax
c001b291:	c3                   	ret    

c001b292 <CPU::setupUMIP()>:
c001b292:	0f 20 e0             	mov    eax,cr4
c001b295:	80 cc 08             	or     ah,0x8
c001b298:	0f 22 e0             	mov    cr4,eax
c001b29b:	c3                   	ret    

c001b29c <CPU::setupTSC()>:
c001b29c:	0f 20 e0             	mov    eax,cr4
c001b29f:	83 c8 04             	or     eax,0x4
c001b2a2:	0f 22 e0             	mov    cr4,eax
c001b2a5:	c3                   	ret    

c001b2a6 <CPU::setupLargePages()>:
c001b2a6:	0f 20 e0             	mov    eax,cr4
c001b2a9:	83 c8 10             	or     eax,0x10
c001b2ac:	0f 22 e0             	mov    cr4,eax
c001b2af:	c3                   	ret    

c001b2b0 <CPU::setupPAT()>:
c001b2b0:	f6 05 4c 34 03 c0 08 	test   BYTE PTR ds:0xc003344c,0x8
c001b2b7:	74 28                	je     c001b2e1 <CPU::setupPAT()+0x31>
c001b2b9:	53                   	push   ebx
c001b2ba:	83 ec 14             	sub    esp,0x14
c001b2bd:	68 77 02 00 00       	push   0x277
c001b2c2:	e8 df f3 ff ff       	call   c001a6a6 <x86rdmsr(unsigned int)>
c001b2c7:	83 c4 0c             	add    esp,0xc
c001b2ca:	83 e2 f8             	and    edx,0xfffffff8
c001b2cd:	83 ca 01             	or     edx,0x1
c001b2d0:	52                   	push   edx
c001b2d1:	50                   	push   eax
c001b2d2:	68 77 02 00 00       	push   0x277
c001b2d7:	e8 08 f4 ff ff       	call   c001a6e4 <x86wrmsr(unsigned int, unsigned long long)>
c001b2dc:	83 c4 18             	add    esp,0x18
c001b2df:	5b                   	pop    ebx
c001b2e0:	c3                   	ret    
c001b2e1:	c3                   	ret    

c001b2e2 <CPU::setupMTRR()>:
c001b2e2:	c3                   	ret    
c001b2e3:	90                   	nop

c001b2e4 <CPU::setupGlobalPages()>:
c001b2e4:	0f 20 e0             	mov    eax,cr4
c001b2e7:	0c 80                	or     al,0x80
c001b2e9:	0f 22 e0             	mov    cr4,eax
c001b2ec:	c3                   	ret    
c001b2ed:	90                   	nop

c001b2ee <CPU::allowUsermodeDataAccess()>:
c001b2ee:	f6 05 4f 34 03 c0 40 	test   BYTE PTR ds:0xc003344f,0x40
c001b2f5:	74 03                	je     c001b2fa <CPU::allowUsermodeDataAccess()+0xc>
c001b2f7:	0f 01 cb             	stac   
c001b2fa:	c3                   	ret    
c001b2fb:	90                   	nop

c001b2fc <CPU::prohibitUsermodeDataAccess()>:
c001b2fc:	f6 05 4f 34 03 c0 40 	test   BYTE PTR ds:0xc003344f,0x40
c001b303:	74 03                	je     c001b308 <CPU::prohibitUsermodeDataAccess()+0xc>
c001b305:	0f 01 ca             	clac   
c001b308:	c3                   	ret    
c001b309:	90                   	nop

c001b30a <CPU::setupSMAP()>:
c001b30a:	0f 20 e0             	mov    eax,cr4
c001b30d:	0d 00 00 20 00       	or     eax,0x200000
c001b312:	0f 22 e0             	mov    cr4,eax
c001b315:	eb e5                	jmp    c001b2fc <CPU::prohibitUsermodeDataAccess()>
c001b317:	90                   	nop

c001b318 <CPU::setupFeatures()>:
c001b318:	53                   	push   ebx
c001b319:	83 ec 08             	sub    esp,0x8
c001b31c:	f6 05 4f 34 03 c0 20 	test   BYTE PTR ds:0xc003344f,0x20
c001b323:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b327:	74 18                	je     c001b341 <CPU::setupFeatures()+0x29>
c001b329:	83 ec 0c             	sub    esp,0xc
c001b32c:	68 61 b1 02 c0       	push   0xc002b161
c001b331:	e8 30 bc fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001b336:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b339:	e8 54 ff ff ff       	call   c001b292 <CPU::setupUMIP()>
c001b33e:	83 c4 10             	add    esp,0x10
c001b341:	f6 05 4e 34 03 c0 08 	test   BYTE PTR ds:0xc003344e,0x8
c001b348:	74 18                	je     c001b362 <CPU::setupFeatures()+0x4a>
c001b34a:	83 ec 0c             	sub    esp,0xc
c001b34d:	68 6b b1 02 c0       	push   0xc002b16b
c001b352:	e8 0f bc fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001b357:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b35a:	e8 3d ff ff ff       	call   c001b29c <CPU::setupTSC()>
c001b35f:	83 c4 10             	add    esp,0x10
c001b362:	f6 05 4e 34 03 c0 20 	test   BYTE PTR ds:0xc003344e,0x20
c001b369:	74 18                	je     c001b383 <CPU::setupFeatures()+0x6b>
c001b36b:	83 ec 0c             	sub    esp,0xc
c001b36e:	68 74 b1 02 c0       	push   0xc002b174
c001b373:	e8 ee bb fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001b378:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b37b:	e8 26 ff ff ff       	call   c001b2a6 <CPU::setupLargePages()>
c001b380:	83 c4 10             	add    esp,0x10
c001b383:	f6 05 4e 34 03 c0 40 	test   BYTE PTR ds:0xc003344e,0x40
c001b38a:	74 18                	je     c001b3a4 <CPU::setupFeatures()+0x8c>
c001b38c:	83 ec 0c             	sub    esp,0xc
c001b38f:	68 7d b1 02 c0       	push   0xc002b17d
c001b394:	e8 cd bb fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001b399:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b39c:	e8 43 ff ff ff       	call   c001b2e4 <CPU::setupGlobalPages()>
c001b3a1:	83 c4 10             	add    esp,0x10
c001b3a4:	f6 05 4e 34 03 c0 80 	test   BYTE PTR ds:0xc003344e,0x80
c001b3ab:	74 18                	je     c001b3c5 <CPU::setupFeatures()+0xad>
c001b3ad:	83 ec 0c             	sub    esp,0xc
c001b3b0:	68 8f b1 02 c0       	push   0xc002b18f
c001b3b5:	e8 ac bb fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001b3ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3bd:	e8 ee fe ff ff       	call   c001b2b0 <CPU::setupPAT()>
c001b3c2:	83 c4 10             	add    esp,0x10
c001b3c5:	f6 05 50 34 03 c0 04 	test   BYTE PTR ds:0xc0033450,0x4
c001b3cc:	74 11                	je     c001b3df <CPU::setupFeatures()+0xc7>
c001b3ce:	c7 44 24 10 98 b1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b198
c001b3d6:	83 c4 08             	add    esp,0x8
c001b3d9:	5b                   	pop    ebx
c001b3da:	e9 87 bb fe ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>
c001b3df:	83 c4 08             	add    esp,0x8
c001b3e2:	5b                   	pop    ebx
c001b3e3:	c3                   	ret    

c001b3e4 <CPU::open(int, int, void*)>:
c001b3e4:	55                   	push   ebp
c001b3e5:	57                   	push   edi
c001b3e6:	56                   	push   esi
c001b3e7:	53                   	push   ebx
c001b3e8:	83 ec 18             	sub    esp,0x18
c001b3eb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b3ef:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b3f3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001b3f7:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001b3fd:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001b403:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001b409:	50                   	push   eax
c001b40a:	e8 b1 3c ff ff       	call   c000f0c0 <GDT::setup()>
c001b40f:	83 c4 0c             	add    esp,0xc
c001b412:	6a 00                	push   0x0
c001b414:	68 ef be ad de       	push   0xdeadbeef
c001b419:	55                   	push   ebp
c001b41a:	e8 45 7d ff ff       	call   c0013164 <TSS::setup(unsigned long, unsigned long)>
c001b41f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b422:	e8 1d 7d ff ff       	call   c0013144 <TSS::flush()>
c001b427:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001b42d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b430:	e8 f1 3e ff ff       	call   c000f326 <IDT::setup()>
c001b435:	b8 00 04 00 00       	mov    eax,0x400
c001b43a:	0f 23 f8             	mov    dr7,eax
c001b43d:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001b447:	e8 d6 50 ff ff       	call   c0010522 <Phys::allocatePage()>
c001b44c:	83 c4 10             	add    esp,0x10
c001b44f:	85 f6                	test   esi,esi
c001b451:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001b457:	89 38                	mov    DWORD PTR [eax],edi
c001b459:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b45f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001b462:	74 10                	je     c001b474 <CPU::open(int, int, void*)+0x90>
c001b464:	50                   	push   eax
c001b465:	50                   	push   eax
c001b466:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b46c:	56                   	push   esi
c001b46d:	e8 94 86 ff ff       	call   c0013b06 <VAS::setCPUSpecific(unsigned long)>
c001b472:	eb 0d                	jmp    c001b481 <CPU::open(int, int, void*)+0x9d>
c001b474:	83 ec 0c             	sub    esp,0xc
c001b477:	68 a2 b1 02 c0       	push   0xc002b1a2
c001b47c:	e8 a7 4e ff ff       	call   c0010328 <KePanic(char const*)>
c001b481:	83 c4 10             	add    esp,0x10
c001b484:	83 ec 0c             	sub    esp,0xc
c001b487:	68 b0 b1 02 c0       	push   0xc002b1b0
c001b48c:	e8 98 25 ff ff       	call   c000da29 <KeSetBootMessage(char const*)>
c001b491:	e8 1b fb ff ff       	call   c001afb1 <HalInitialise()>
c001b496:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
c001b49d:	e8 3a 25 ff ff       	call   c000d9dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001b4a2:	0f b6 c0             	movzx  eax,al
c001b4a5:	83 f8 01             	cmp    eax,0x1
c001b4a8:	19 c0                	sbb    eax,eax
c001b4aa:	25 aa 00 00 00       	and    eax,0xaa
c001b4af:	83 c0 1e             	add    eax,0x1e
c001b4b2:	89 04 24             	mov    DWORD PTR [esp],eax
c001b4b5:	e8 ef 03 ff ff       	call   c000b8a9 <setupTimer(int)>
c001b4ba:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001b4c0:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001b4c7:	e8 10 25 ff ff       	call   c000d9dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001b4cc:	83 c4 10             	add    esp,0x10
c001b4cf:	84 c0                	test   al,al
c001b4d1:	74 0c                	je     c001b4df <CPU::open(int, int, void*)+0xfb>
c001b4d3:	83 ec 0c             	sub    esp,0xc
c001b4d6:	53                   	push   ebx
c001b4d7:	e8 3c fe ff ff       	call   c001b318 <CPU::setupFeatures()>
c001b4dc:	83 c4 10             	add    esp,0x10
c001b4df:	83 c4 0c             	add    esp,0xc
c001b4e2:	31 c0                	xor    eax,eax
c001b4e4:	5b                   	pop    ebx
c001b4e5:	5e                   	pop    esi
c001b4e6:	5f                   	pop    edi
c001b4e7:	5d                   	pop    ebp
c001b4e8:	c3                   	ret    

c001b4e9 <convertLegacyIRQNumber(int)>:
c001b4e9:	83 ec 0c             	sub    esp,0xc
c001b4ec:	f6 05 4c 34 03 c0 01 	test   BYTE PTR ds:0xc003344c,0x1
c001b4f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4f7:	74 0c                	je     c001b505 <convertLegacyIRQNumber(int)+0x1c>
c001b4f9:	83 f8 0f             	cmp    eax,0xf
c001b4fc:	7f 0b                	jg     c001b509 <convertLegacyIRQNumber(int)+0x20>
c001b4fe:	0f b6 80 88 cc 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd3378]
c001b505:	83 c4 0c             	add    esp,0xc
c001b508:	c3                   	ret    
c001b509:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b50d:	83 ec 0c             	sub    esp,0xc
c001b510:	68 14 b2 02 c0       	push   0xc002b214
c001b515:	e8 0e 4e ff ff       	call   c0010328 <KePanic(char const*)>
c001b51a:	83 c4 10             	add    esp,0x10
c001b51d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b521:	83 c4 0c             	add    esp,0xc
c001b524:	c3                   	ret    

c001b525 <KeSetupInterrupts()>:
c001b525:	31 c0                	xor    eax,eax
c001b527:	c7 80 60 44 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcbba0],0x0
c001b531:	83 c0 10             	add    eax,0x10
c001b534:	c7 80 50 34 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffccbb0],0x0
c001b53e:	c7 80 54 44 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcbbac],0x0
c001b548:	c7 80 54 34 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffccbac],0x0
c001b552:	c7 80 58 44 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcbba8],0x0
c001b55c:	c7 80 58 34 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffccba8],0x0
c001b566:	c7 80 5c 44 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcbba4],0x0
c001b570:	c7 80 5c 34 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffccba4],0x0
c001b57a:	3d 00 10 00 00       	cmp    eax,0x1000
c001b57f:	75 a6                	jne    c001b527 <KeSetupInterrupts()+0x2>
c001b581:	c3                   	ret    

c001b582 <int_handler>:
c001b582:	55                   	push   ebp
c001b583:	57                   	push   edi
c001b584:	56                   	push   esi
c001b585:	53                   	push   ebx
c001b586:	83 ec 0c             	sub    esp,0xc
c001b589:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b58d:	eb 02                	jmp    c001b591 <int_handler+0xf>
c001b58f:	fa                   	cli    
c001b590:	f4                   	hlt    
c001b591:	e8 8c 4d ff ff       	call   c0010322 <KeIsKernelInPanic()>
c001b596:	84 c0                	test   al,al
c001b598:	75 f5                	jne    c001b58f <int_handler+0xd>
c001b59a:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001b59d:	8d 46 e0             	lea    eax,[esi-0x20]
c001b5a0:	83 f8 17             	cmp    eax,0x17
c001b5a3:	76 40                	jbe    c001b5e5 <int_handler+0x63>
c001b5a5:	c1 e6 04             	shl    esi,0x4
c001b5a8:	31 db                	xor    ebx,ebx
c001b5aa:	8d ae 60 44 03 c0    	lea    ebp,[esi-0x3ffcbba0]
c001b5b0:	81 c6 60 34 03 c0    	add    esi,0xc0033460
c001b5b6:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001b5ba:	85 c0                	test   eax,eax
c001b5bc:	74 13                	je     c001b5d1 <int_handler+0x4f>
c001b5be:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001b5c2:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001b5c5:	74 2c                	je     c001b5f3 <int_handler+0x71>
c001b5c7:	83 ec 08             	sub    esp,0x8
c001b5ca:	52                   	push   edx
c001b5cb:	57                   	push   edi
c001b5cc:	ff d0                	call   eax
c001b5ce:	83 c4 10             	add    esp,0x10
c001b5d1:	83 c3 01             	add    ebx,0x1
c001b5d4:	83 fb 04             	cmp    ebx,0x4
c001b5d7:	75 dd                	jne    c001b5b6 <int_handler+0x34>
c001b5d9:	83 c4 0c             	add    esp,0xc
c001b5dc:	31 c0                	xor    eax,eax
c001b5de:	5b                   	pop    ebx
c001b5df:	31 d2                	xor    edx,edx
c001b5e1:	5e                   	pop    esi
c001b5e2:	5f                   	pop    edi
c001b5e3:	5d                   	pop    ebp
c001b5e4:	c3                   	ret    
c001b5e5:	83 ec 0c             	sub    esp,0xc
c001b5e8:	50                   	push   eax
c001b5e9:	e8 e8 fb ff ff       	call   c001b1d6 <HalEndOfInterrupt(int)>
c001b5ee:	83 c4 10             	add    esp,0x10
c001b5f1:	eb b2                	jmp    c001b5a5 <int_handler+0x23>
c001b5f3:	83 ec 08             	sub    esp,0x8
c001b5f6:	52                   	push   edx
c001b5f7:	57                   	push   edi
c001b5f8:	ff d0                	call   eax
c001b5fa:	83 c4 10             	add    esp,0x10
c001b5fd:	83 c4 0c             	add    esp,0xc
c001b600:	5b                   	pop    ebx
c001b601:	5e                   	pop    esi
c001b602:	5f                   	pop    edi
c001b603:	5d                   	pop    ebp
c001b604:	c3                   	ret    

c001b605 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001b605:	56                   	push   esi
c001b606:	31 c0                	xor    eax,eax
c001b608:	53                   	push   ebx
c001b609:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b60d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b611:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b615:	89 ca                	mov    edx,ecx
c001b617:	c1 e2 04             	shl    edx,0x4
c001b61a:	83 bc 82 60 44 03 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffcbba0],0x0
c001b622:	74 17                	je     c001b63b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001b624:	83 c0 01             	add    eax,0x1
c001b627:	83 f8 04             	cmp    eax,0x4
c001b62a:	75 ee                	jne    c001b61a <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001b62c:	c7 44 24 0c 75 b2 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b275
c001b634:	5b                   	pop    ebx
c001b635:	5e                   	pop    esi
c001b636:	e9 ed 4c ff ff       	jmp    c0010328 <KePanic(char const*)>
c001b63b:	8d 04 88             	lea    eax,[eax+ecx*4]
c001b63e:	89 1c 85 60 44 03 c0 	mov    DWORD PTR [eax*4-0x3ffcbba0],ebx
c001b645:	5b                   	pop    ebx
c001b646:	89 34 85 60 34 03 c0 	mov    DWORD PTR [eax*4-0x3ffccba0],esi
c001b64d:	5e                   	pop    esi
c001b64e:	c3                   	ret    

c001b64f <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b64f:	55                   	push   ebp
c001b650:	57                   	push   edi
c001b651:	56                   	push   esi
c001b652:	53                   	push   ebx
c001b653:	83 ec 0c             	sub    esp,0xc
c001b656:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b65a:	f6 05 4c 34 03 c0 01 	test   BYTE PTR ds:0xc003344c,0x1
c001b661:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b665:	8d 6e 20             	lea    ebp,[esi+0x20]
c001b668:	74 57                	je     c001b6c1 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001b66a:	84 c0                	test   al,al
c001b66c:	89 c7                	mov    edi,eax
c001b66e:	74 1d                	je     c001b68d <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001b670:	83 fe 0f             	cmp    esi,0xf
c001b673:	0f 8f d9 00 00 00    	jg     c001b752 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x103>
c001b679:	0f b6 b6 88 cc 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd3378]
c001b680:	0f b7 bc 36 20 2e 03 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffcd1e0]
c001b688:	d1 ef                	shr    edi,1
c001b68a:	83 e7 01             	and    edi,0x1
c001b68d:	a1 c0 33 03 c0       	mov    eax,ds:0xc00333c0
c001b692:	83 ec 08             	sub    esp,0x8
c001b695:	31 db                	xor    ebx,ebx
c001b697:	50                   	push   eax
c001b698:	68 82 b2 02 c0       	push   0xc002b282
c001b69d:	e8 c4 b8 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001b6a2:	a1 c0 33 03 c0       	mov    eax,ds:0xc00333c0
c001b6a7:	83 c4 10             	add    esp,0x10
c001b6aa:	85 c0                	test   eax,eax
c001b6ac:	7f 59                	jg     c001b707 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb8>
c001b6ae:	8d 6e 20             	lea    ebp,[esi+0x20]
c001b6b1:	83 ec 0c             	sub    esp,0xc
c001b6b4:	68 99 b2 02 c0       	push   0xc002b299
c001b6b9:	e8 6a 4c ff ff       	call   c0010328 <KePanic(char const*)>
c001b6be:	83 c4 10             	add    esp,0x10
c001b6c1:	89 e8                	mov    eax,ebp
c001b6c3:	31 d2                	xor    edx,edx
c001b6c5:	c1 e0 04             	shl    eax,0x4
c001b6c8:	8b 8c 90 60 44 03 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffcbba0]
c001b6cf:	85 c9                	test   ecx,ecx
c001b6d1:	0f 84 92 00 00 00    	je     c001b769 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11a>
c001b6d7:	83 c2 01             	add    edx,0x1
c001b6da:	83 fa 04             	cmp    edx,0x4
c001b6dd:	75 e9                	jne    c001b6c8 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c001b6df:	83 ec 0c             	sub    esp,0xc
c001b6e2:	68 50 b2 02 c0       	push   0xc002b250
c001b6e7:	e8 3c 4c ff ff       	call   c0010328 <KePanic(char const*)>
c001b6ec:	83 c4 10             	add    esp,0x10
c001b6ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b6f4:	83 c4 0c             	add    esp,0xc
c001b6f7:	5b                   	pop    ebx
c001b6f8:	5e                   	pop    esi
c001b6f9:	5f                   	pop    edi
c001b6fa:	5d                   	pop    ebp
c001b6fb:	c3                   	ret    
c001b6fc:	83 c3 01             	add    ebx,0x1
c001b6ff:	39 1d c0 33 03 c0    	cmp    DWORD PTR ds:0xc00333c0,ebx
c001b705:	7e a7                	jle    c001b6ae <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001b707:	8b 2c 9d e0 33 03 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffccc20]
c001b70e:	83 ec 08             	sub    esp,0x8
c001b711:	56                   	push   esi
c001b712:	55                   	push   ebp
c001b713:	e8 e2 db ff ff       	call   c00192fa <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001b718:	83 c4 10             	add    esp,0x10
c001b71b:	84 c0                	test   al,al
c001b71d:	74 dd                	je     c001b6fc <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001b71f:	89 f8                	mov    eax,edi
c001b721:	83 ec 04             	sub    esp,0x4
c001b724:	8b 1c 9d e0 33 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffccc20]
c001b72b:	8d 6e 20             	lea    ebp,[esi+0x20]
c001b72e:	0f b6 f8             	movzx  edi,al
c001b731:	57                   	push   edi
c001b732:	89 e8                	mov    eax,ebp
c001b734:	6a 00                	push   0x0
c001b736:	0f b6 c0             	movzx  eax,al
c001b739:	50                   	push   eax
c001b73a:	89 f0                	mov    eax,esi
c001b73c:	6a 00                	push   0x0
c001b73e:	0f b6 c0             	movzx  eax,al
c001b741:	6a 00                	push   0x0
c001b743:	50                   	push   eax
c001b744:	53                   	push   ebx
c001b745:	e8 1c dd ff ff       	call   c0019466 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001b74a:	83 c4 20             	add    esp,0x20
c001b74d:	e9 6f ff ff ff       	jmp    c001b6c1 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001b752:	83 ec 0c             	sub    esp,0xc
c001b755:	31 ff                	xor    edi,edi
c001b757:	68 14 b2 02 c0       	push   0xc002b214
c001b75c:	e8 c7 4b ff ff       	call   c0010328 <KePanic(char const*)>
c001b761:	83 c4 10             	add    esp,0x10
c001b764:	e9 24 ff ff ff       	jmp    c001b68d <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001b769:	8d 04 aa             	lea    eax,[edx+ebp*4]
c001b76c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b770:	89 14 85 60 44 03 c0 	mov    DWORD PTR [eax*4-0x3ffcbba0],edx
c001b777:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b77b:	89 14 85 60 34 03 c0 	mov    DWORD PTR [eax*4-0x3ffccba0],edx
c001b782:	83 c4 0c             	add    esp,0xc
c001b785:	89 f0                	mov    eax,esi
c001b787:	5b                   	pop    ebx
c001b788:	5e                   	pop    esi
c001b789:	5f                   	pop    edi
c001b78a:	5d                   	pop    ebp
c001b78b:	c3                   	ret    

c001b78c <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001b78c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b790:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b794:	c1 e0 04             	shl    eax,0x4
c001b797:	8d 50 10             	lea    edx,[eax+0x10]
c001b79a:	39 88 60 44 03 c0    	cmp    DWORD PTR [eax-0x3ffcbba0],ecx
c001b7a0:	74 08                	je     c001b7aa <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001b7a2:	83 c0 04             	add    eax,0x4
c001b7a5:	39 d0                	cmp    eax,edx
c001b7a7:	75 f1                	jne    c001b79a <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001b7a9:	c3                   	ret    
c001b7aa:	c7 80 60 44 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcbba0],0x0
c001b7b4:	c7 80 60 34 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffccba0],0x0
c001b7be:	eb e2                	jmp    c001b7a2 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001b7c0 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b7c0:	56                   	push   esi
c001b7c1:	53                   	push   ebx
c001b7c2:	83 ec 04             	sub    esp,0x4
c001b7c5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b7ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b7ce:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b7d2:	74 09                	je     c001b7dd <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001b7d4:	f6 05 4c 34 03 c0 01 	test   BYTE PTR ds:0xc003344c,0x1
c001b7db:	75 34                	jne    c001b811 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x51>
c001b7dd:	8d 43 20             	lea    eax,[ebx+0x20]
c001b7e0:	c1 e0 04             	shl    eax,0x4
c001b7e3:	8d 50 10             	lea    edx,[eax+0x10]
c001b7e6:	39 b0 60 44 03 c0    	cmp    DWORD PTR [eax-0x3ffcbba0],esi
c001b7ec:	74 0d                	je     c001b7fb <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001b7ee:	83 c0 04             	add    eax,0x4
c001b7f1:	39 d0                	cmp    eax,edx
c001b7f3:	75 f1                	jne    c001b7e6 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x26>
c001b7f5:	83 c4 04             	add    esp,0x4
c001b7f8:	5b                   	pop    ebx
c001b7f9:	5e                   	pop    esi
c001b7fa:	c3                   	ret    
c001b7fb:	c7 80 60 44 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcbba0],0x0
c001b805:	c7 80 60 34 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffccba0],0x0
c001b80f:	eb dd                	jmp    c001b7ee <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2e>
c001b811:	83 fb 0f             	cmp    ebx,0xf
c001b814:	7f 09                	jg     c001b81f <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x5f>
c001b816:	0f b6 9b 88 cc 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd3378]
c001b81d:	eb be                	jmp    c001b7dd <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001b81f:	83 ec 0c             	sub    esp,0xc
c001b822:	68 a6 b2 02 c0       	push   0xc002b2a6
c001b827:	e8 fc 4a ff ff       	call   c0010328 <KePanic(char const*)>
c001b82c:	83 c4 10             	add    esp,0x10
c001b82f:	eb ac                	jmp    c001b7dd <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001b831:	66 90                	xchg   ax,ax
c001b833:	90                   	nop

c001b834 <picIoWait()>:
c001b834:	eb 00                	jmp    c001b836 <picIoWait()+0x2>
c001b836:	eb 00                	jmp    c001b838 <picIoWait()+0x4>
c001b838:	90                   	nop
c001b839:	c3                   	ret    
c001b83a:	66 90                	xchg   ax,ax

c001b83c <picDisable()>:
c001b83c:	83 ec 10             	sub    esp,0x10
c001b83f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001b846:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001b84b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b84f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b854:	ee                   	out    dx,al
c001b855:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001b85c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001b861:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001b865:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001b86a:	ee                   	out    dx,al
c001b86b:	90                   	nop
c001b86c:	83 c4 10             	add    esp,0x10
c001b86f:	c3                   	ret    

c001b870 <picGetIRQReg(int)>:
c001b870:	83 ec 10             	sub    esp,0x10
c001b873:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b877:	0f b6 c0             	movzx  eax,al
c001b87a:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001b881:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001b885:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b889:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b88e:	ee                   	out    dx,al
c001b88f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b893:	0f b6 c0             	movzx  eax,al
c001b896:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001b89d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b8a1:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b8a5:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b8aa:	ee                   	out    dx,al
c001b8ab:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001b8b2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001b8b7:	89 c2                	mov    edx,eax
c001b8b9:	ec                   	in     al,dx
c001b8ba:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b8be:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b8c2:	0f b6 c0             	movzx  eax,al
c001b8c5:	c1 e0 08             	shl    eax,0x8
c001b8c8:	89 c1                	mov    ecx,eax
c001b8ca:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001b8d1:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001b8d6:	89 c2                	mov    edx,eax
c001b8d8:	ec                   	in     al,dx
c001b8d9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001b8dd:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001b8e1:	0f b6 c0             	movzx  eax,al
c001b8e4:	09 c8                	or     eax,ecx
c001b8e6:	83 c4 10             	add    esp,0x10
c001b8e9:	c3                   	ret    
c001b8ea:	66 90                	xchg   ax,ax

c001b8ec <picOpen()>:
c001b8ec:	83 ec 50             	sub    esp,0x50
c001b8ef:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001b8f6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001b8fb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b8ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b903:	ee                   	out    dx,al
c001b904:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001b90b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b910:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001b914:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b918:	ee                   	out    dx,al
c001b919:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001b921:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001b929:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001b930:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b934:	89 c2                	mov    edx,eax
c001b936:	ec                   	in     al,dx
c001b937:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001b93b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001b93f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001b943:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001b94a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b94e:	89 c2                	mov    edx,eax
c001b950:	ec                   	in     al,dx
c001b951:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b955:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001b959:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001b95d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001b964:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001b969:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001b96d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b971:	ee                   	out    dx,al
c001b972:	e8 bd fe ff ff       	call   c001b834 <picIoWait()>
c001b977:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001b97e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001b983:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001b987:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b98b:	ee                   	out    dx,al
c001b98c:	e8 a3 fe ff ff       	call   c001b834 <picIoWait()>
c001b991:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b995:	0f b6 c0             	movzx  eax,al
c001b998:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001b99f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001b9a3:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001b9a7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b9ab:	ee                   	out    dx,al
c001b9ac:	e8 83 fe ff ff       	call   c001b834 <picIoWait()>
c001b9b1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001b9b5:	0f b6 c0             	movzx  eax,al
c001b9b8:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001b9bf:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b9c3:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b9c7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b9cb:	ee                   	out    dx,al
c001b9cc:	e8 63 fe ff ff       	call   c001b834 <picIoWait()>
c001b9d1:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001b9d8:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001b9dd:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001b9e1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b9e5:	ee                   	out    dx,al
c001b9e6:	e8 49 fe ff ff       	call   c001b834 <picIoWait()>
c001b9eb:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001b9f2:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001b9f7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001b9fb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b9ff:	ee                   	out    dx,al
c001ba00:	e8 2f fe ff ff       	call   c001b834 <picIoWait()>
c001ba05:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001ba0c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001ba11:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001ba15:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ba19:	ee                   	out    dx,al
c001ba1a:	e8 15 fe ff ff       	call   c001b834 <picIoWait()>
c001ba1f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001ba26:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001ba2b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001ba2f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ba33:	ee                   	out    dx,al
c001ba34:	e8 fb fd ff ff       	call   c001b834 <picIoWait()>
c001ba39:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001ba3e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001ba45:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001ba49:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001ba4d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001ba51:	ee                   	out    dx,al
c001ba52:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001ba57:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001ba5e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001ba62:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001ba66:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001ba6a:	ee                   	out    dx,al
c001ba6b:	90                   	nop
c001ba6c:	83 c4 50             	add    esp,0x50
c001ba6f:	c3                   	ret    

c001ba70 <picEOI(int)>:
c001ba70:	83 ec 10             	sub    esp,0x10
c001ba73:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001ba78:	75 1e                	jne    c001ba98 <picEOI(int)+0x28>
c001ba7a:	6a 0b                	push   0xb
c001ba7c:	e8 ef fd ff ff       	call   c001b870 <picGetIRQReg(int)>
c001ba81:	83 c4 04             	add    esp,0x4
c001ba84:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001ba89:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001ba8e:	25 80 00 00 00       	and    eax,0x80
c001ba93:	74 73                	je     c001bb08 <picEOI(int)+0x98>
c001ba95:	8d 76 00             	lea    esi,[esi+0x0]
c001ba98:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001ba9d:	75 31                	jne    c001bad0 <picEOI(int)+0x60>
c001ba9f:	6a 0b                	push   0xb
c001baa1:	e8 ca fd ff ff       	call   c001b870 <picGetIRQReg(int)>
c001baa6:	83 c4 04             	add    esp,0x4
c001baa9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001baae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bab2:	98                   	cwde   
c001bab3:	85 c0                	test   eax,eax
c001bab5:	78 19                	js     c001bad0 <picEOI(int)+0x60>
c001bab7:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001babe:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001bac3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001bac7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001bacc:	ee                   	out    dx,al
c001bacd:	eb 3d                	jmp    c001bb0c <picEOI(int)+0x9c>
c001bacf:	90                   	nop
c001bad0:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001bad5:	7e 19                	jle    c001baf0 <picEOI(int)+0x80>
c001bad7:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001bade:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001bae3:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001bae7:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001baec:	ee                   	out    dx,al
c001baed:	8d 76 00             	lea    esi,[esi+0x0]
c001baf0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001baf7:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001bafc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001bb00:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001bb05:	ee                   	out    dx,al
c001bb06:	eb 04                	jmp    c001bb0c <picEOI(int)+0x9c>
c001bb08:	90                   	nop
c001bb09:	8d 76 00             	lea    esi,[esi+0x0]
c001bb0c:	83 c4 10             	add    esp,0x10
c001bb0f:	c3                   	ret    

c001bb10 <RTC::open(int, int, void*)>:
c001bb10:	31 c0                	xor    eax,eax
c001bb12:	c3                   	ret    
c001bb13:	90                   	nop

c001bb14 <RTC::close(int, int, void*)>:
c001bb14:	31 c0                	xor    eax,eax
c001bb16:	c3                   	ret    
c001bb17:	90                   	nop

c001bb18 <RTC::timeInSecondsUTC()>:
c001bb18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb1c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001bb22:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001bb28:	c3                   	ret    
c001bb29:	90                   	nop

c001bb2a <RTC::timeInDatetimeUTC()>:
c001bb2a:	53                   	push   ebx
c001bb2b:	83 ec 14             	sub    esp,0x14
c001bb2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb32:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001bb36:	8b 10                	mov    edx,DWORD PTR [eax]
c001bb38:	50                   	push   eax
c001bb39:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001bb3c:	83 c4 0c             	add    esp,0xc
c001bb3f:	52                   	push   edx
c001bb40:	50                   	push   eax
c001bb41:	53                   	push   ebx
c001bb42:	e8 19 e3 fe ff       	call   c0009e60 <KeSecondsToDatetime(unsigned long long)>
c001bb47:	89 d8                	mov    eax,ebx
c001bb49:	83 c4 14             	add    esp,0x14
c001bb4c:	5b                   	pop    ebx
c001bb4d:	c2 04 00             	ret    0x4

c001bb50 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001bb50:	56                   	push   esi
c001bb51:	53                   	push   ebx
c001bb52:	83 ec 14             	sub    esp,0x14
c001bb55:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb59:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb5b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001bb5e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bb62:	52                   	push   edx
c001bb63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bb67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bb6b:	50                   	push   eax
c001bb6c:	e8 ef e2 fe ff       	call   c0009e60 <KeSecondsToDatetime(unsigned long long)>
c001bb71:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001bb75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bb79:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bb7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bb81:	89 f0                	mov    eax,esi
c001bb83:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001bb87:	83 c4 20             	add    esp,0x20
c001bb8a:	5b                   	pop    ebx
c001bb8b:	5e                   	pop    esi
c001bb8c:	ff e0                	jmp    eax

c001bb8e <RTC::~RTC()>:
c001bb8e:	83 ec 0c             	sub    esp,0xc
c001bb91:	ba d0 b2 02 c0       	mov    edx,0xc002b2d0
c001bb96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb9a:	89 10                	mov    DWORD PTR [eax],edx
c001bb9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bba0:	83 ec 0c             	sub    esp,0xc
c001bba3:	50                   	push   eax
c001bba4:	e8 8f dd fe ff       	call   c0009938 <Clock::~Clock()>
c001bba9:	83 c4 10             	add    esp,0x10
c001bbac:	90                   	nop
c001bbad:	83 c4 0c             	add    esp,0xc
c001bbb0:	c3                   	ret    
c001bbb1:	90                   	nop

c001bbb2 <RTC::~RTC()>:
c001bbb2:	83 ec 0c             	sub    esp,0xc
c001bbb5:	83 ec 0c             	sub    esp,0xc
c001bbb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bbbc:	e8 cd ff ff ff       	call   c001bb8e <RTC::~RTC()>
c001bbc1:	83 c4 10             	add    esp,0x10
c001bbc4:	83 ec 08             	sub    esp,0x8
c001bbc7:	68 60 01 00 00       	push   0x160
c001bbcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bbd0:	e8 ff 1e ff ff       	call   c000dad4 <operator delete(void*, unsigned long)>
c001bbd5:	83 c4 10             	add    esp,0x10
c001bbd8:	83 c4 0c             	add    esp,0xc
c001bbdb:	c3                   	ret    

c001bbdc <RTC::get_update_in_progress_flag()>:
c001bbdc:	83 ec 18             	sub    esp,0x18
c001bbdf:	6a 0a                	push   0xa
c001bbe1:	e8 91 d9 ff ff       	call   c0019577 <x86ReadCMOS(unsigned char)>
c001bbe6:	83 c4 1c             	add    esp,0x1c
c001bbe9:	0f b6 c0             	movzx  eax,al
c001bbec:	c1 e8 07             	shr    eax,0x7
c001bbef:	c3                   	ret    

c001bbf0 <RTC::completeRTCRefresh()>:
c001bbf0:	55                   	push   ebp
c001bbf1:	57                   	push   edi
c001bbf2:	56                   	push   esi
c001bbf3:	53                   	push   ebx
c001bbf4:	83 ec 3c             	sub    esp,0x3c
c001bbf7:	8b 1d 50 2b 03 c0    	mov    ebx,DWORD PTR ds:0xc0032b50
c001bbfd:	83 ec 0c             	sub    esp,0xc
c001bc00:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001bc04:	e8 d3 ff ff ff       	call   c001bbdc <RTC::get_update_in_progress_flag()>
c001bc09:	83 c4 10             	add    esp,0x10
c001bc0c:	84 c0                	test   al,al
c001bc0e:	74 0e                	je     c001bc1e <RTC::completeRTCRefresh()+0x2e>
c001bc10:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001bc16:	3b 05 50 2b 03 c0    	cmp    eax,DWORD PTR ds:0xc0032b50
c001bc1c:	73 df                	jae    c001bbfd <RTC::completeRTCRefresh()+0xd>
c001bc1e:	83 ec 0c             	sub    esp,0xc
c001bc21:	6a 00                	push   0x0
c001bc23:	e8 4f d9 ff ff       	call   c0019577 <x86ReadCMOS(unsigned char)>
c001bc28:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001bc2f:	89 c7                	mov    edi,eax
c001bc31:	e8 41 d9 ff ff       	call   c0019577 <x86ReadCMOS(unsigned char)>
c001bc36:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001bc3d:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001bc41:	e8 31 d9 ff ff       	call   c0019577 <x86ReadCMOS(unsigned char)>
c001bc46:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001bc4d:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001bc51:	e8 21 d9 ff ff       	call   c0019577 <x86ReadCMOS(unsigned char)>
c001bc56:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001bc5d:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001bc61:	e8 11 d9 ff ff       	call   c0019577 <x86ReadCMOS(unsigned char)>
c001bc66:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001bc6d:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001bc71:	e8 01 d9 ff ff       	call   c0019577 <x86ReadCMOS(unsigned char)>
c001bc76:	0f b6 c0             	movzx  eax,al
c001bc79:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001bc7d:	83 c4 10             	add    esp,0x10
c001bc80:	8b 1d 50 2b 03 c0    	mov    ebx,DWORD PTR ds:0xc0032b50
c001bc86:	83 ec 0c             	sub    esp,0xc
c001bc89:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001bc8d:	e8 4a ff ff ff       	call   c001bbdc <RTC::get_update_in_progress_flag()>
c001bc92:	83 c4 10             	add    esp,0x10
c001bc95:	84 c0                	test   al,al
c001bc97:	74 0e                	je     c001bca7 <RTC::completeRTCRefresh()+0xb7>
c001bc99:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001bc9f:	3b 05 50 2b 03 c0    	cmp    eax,DWORD PTR ds:0xc0032b50
c001bca5:	73 df                	jae    c001bc86 <RTC::completeRTCRefresh()+0x96>
c001bca7:	83 ec 0c             	sub    esp,0xc
c001bcaa:	6a 00                	push   0x0
c001bcac:	e8 c6 d8 ff ff       	call   c0019577 <x86ReadCMOS(unsigned char)>
c001bcb1:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001bcb8:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001bcbc:	e8 b6 d8 ff ff       	call   c0019577 <x86ReadCMOS(unsigned char)>
c001bcc1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001bcc8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bccc:	e8 a6 d8 ff ff       	call   c0019577 <x86ReadCMOS(unsigned char)>
c001bcd1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001bcd8:	88 c3                	mov    bl,al
c001bcda:	e8 98 d8 ff ff       	call   c0019577 <x86ReadCMOS(unsigned char)>
c001bcdf:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001bce6:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001bcea:	e8 88 d8 ff ff       	call   c0019577 <x86ReadCMOS(unsigned char)>
c001bcef:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001bcf6:	89 c6                	mov    esi,eax
c001bcf8:	e8 7a d8 ff ff       	call   c0019577 <x86ReadCMOS(unsigned char)>
c001bcfd:	89 f9                	mov    ecx,edi
c001bcff:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001bd03:	83 c4 10             	add    esp,0x10
c001bd06:	0f b6 e8             	movzx  ebp,al
c001bd09:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd0e:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001bd12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bd16:	74 27                	je     c001bd3f <RTC::completeRTCRefresh()+0x14f>
c001bd18:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001bd1c:	89 f0                	mov    eax,esi
c001bd1e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001bd22:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001bd26:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001bd2a:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001bd2e:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001bd32:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bd36:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001bd3a:	e9 41 ff ff ff       	jmp    c001bc80 <RTC::completeRTCRefresh()+0x90>
c001bd3f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bd44:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001bd48:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bd4c:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c001bd50:	75 c6                	jne    c001bd18 <RTC::completeRTCRefresh()+0x128>
c001bd52:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001bd57:	89 f1                	mov    ecx,esi
c001bd59:	0f b6 fb             	movzx  edi,bl
c001bd5c:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001bd60:	0f b6 c9             	movzx  ecx,cl
c001bd63:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001bd67:	89 f1                	mov    ecx,esi
c001bd69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bd6d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001bd71:	0f 94 c2             	sete   dl
c001bd74:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001bd78:	0f 94 c0             	sete   al
c001bd7b:	21 d0                	and    eax,edx
c001bd7d:	31 d2                	xor    edx,edx
c001bd7f:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001bd83:	0f 94 c2             	sete   dl
c001bd86:	85 c2                	test   edx,eax
c001bd88:	74 8e                	je     c001bd18 <RTC::completeRTCRefresh()+0x128>
c001bd8a:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001bd8e:	75 88                	jne    c001bd18 <RTC::completeRTCRefresh()+0x128>
c001bd90:	83 ec 0c             	sub    esp,0xc
c001bd93:	6a 0b                	push   0xb
c001bd95:	e8 dd d7 ff ff       	call   c0019577 <x86ReadCMOS(unsigned char)>
c001bd9a:	83 c4 10             	add    esp,0x10
c001bd9d:	a8 04                	test   al,0x4
c001bd9f:	75 7a                	jne    c001be1b <RTC::completeRTCRefresh()+0x22b>
c001bda1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bda5:	c1 ef 04             	shr    edi,0x4
c001bda8:	83 e6 0f             	and    esi,0xf
c001bdab:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bdaf:	c1 ed 04             	shr    ebp,0x4
c001bdb2:	6b ed 0a             	imul   ebp,ebp,0xa
c001bdb5:	c1 ea 04             	shr    edx,0x4
c001bdb8:	6b d2 0a             	imul   edx,edx,0xa
c001bdbb:	83 e1 0f             	and    ecx,0xf
c001bdbe:	01 d1                	add    ecx,edx
c001bdc0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bdc4:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001bdc8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bdcc:	c1 ea 04             	shr    edx,0x4
c001bdcf:	6b d2 0a             	imul   edx,edx,0xa
c001bdd2:	83 e1 0f             	and    ecx,0xf
c001bdd5:	01 d1                	add    ecx,edx
c001bdd7:	89 fa                	mov    edx,edi
c001bdd9:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001bddd:	83 e2 07             	and    edx,0x7
c001bde0:	89 d9                	mov    ecx,ebx
c001bde2:	6b d2 0a             	imul   edx,edx,0xa
c001bde5:	83 e1 0f             	and    ecx,0xf
c001bde8:	83 e3 80             	and    ebx,0xffffff80
c001bdeb:	01 d1                	add    ecx,edx
c001bded:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bdf1:	09 cb                	or     ebx,ecx
c001bdf3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bdf7:	c1 ea 04             	shr    edx,0x4
c001bdfa:	6b d2 0a             	imul   edx,edx,0xa
c001bdfd:	83 e1 0f             	and    ecx,0xf
c001be00:	01 d1                	add    ecx,edx
c001be02:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001be06:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001be0a:	c1 ea 04             	shr    edx,0x4
c001be0d:	6b d2 0a             	imul   edx,edx,0xa
c001be10:	01 d6                	add    esi,edx
c001be12:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001be16:	83 e2 0f             	and    edx,0xf
c001be19:	01 d5                	add    ebp,edx
c001be1b:	a8 02                	test   al,0x2
c001be1d:	75 15                	jne    c001be34 <RTC::completeRTCRefresh()+0x244>
c001be1f:	f6 c3 80             	test   bl,0x80
c001be22:	74 10                	je     c001be34 <RTC::completeRTCRefresh()+0x244>
c001be24:	83 e3 7f             	and    ebx,0x7f
c001be27:	b9 18 00 00 00       	mov    ecx,0x18
c001be2c:	8d 43 0c             	lea    eax,[ebx+0xc]
c001be2f:	99                   	cdq    
c001be30:	f7 f9                	idiv   ecx
c001be32:	88 d3                	mov    bl,dl
c001be34:	8d bd 6c 07 00 00    	lea    edi,[ebp+0x76c]
c001be3a:	81 ff b1 07 00 00    	cmp    edi,0x7b1
c001be40:	77 06                	ja     c001be48 <RTC::completeRTCRefresh()+0x258>
c001be42:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001be48:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be4d:	31 c9                	xor    ecx,ecx
c001be4f:	31 d2                	xor    edx,edx
c001be51:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001be55:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001be59:	89 cd                	mov    ebp,ecx
c001be5b:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c001be5f:	c1 e7 10             	shl    edi,0x10
c001be62:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001be68:	c1 e0 10             	shl    eax,0x10
c001be6b:	09 c5                	or     ebp,eax
c001be6d:	89 e9                	mov    ecx,ebp
c001be6f:	0f b7 c2             	movzx  eax,dx
c001be72:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001be76:	09 f8                	or     eax,edi
c001be78:	89 c2                	mov    edx,eax
c001be7a:	50                   	push   eax
c001be7b:	50                   	push   eax
c001be7c:	88 d9                	mov    cl,bl
c001be7e:	51                   	push   ecx
c001be7f:	52                   	push   edx
c001be80:	e8 eb db fe ff       	call   c0009a70 <KeDatetimeToSeconds(datetime_t)>
c001be85:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001be89:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001be8f:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001be95:	83 c4 4c             	add    esp,0x4c
c001be98:	5b                   	pop    ebx
c001be99:	5e                   	pop    esi
c001be9a:	5f                   	pop    edi
c001be9b:	5d                   	pop    ebp
c001be9c:	c3                   	ret    
c001be9d:	90                   	nop

c001be9e <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001be9e:	55                   	push   ebp
c001be9f:	57                   	push   edi
c001bea0:	56                   	push   esi
c001bea1:	53                   	push   ebx
c001bea2:	83 ec 34             	sub    esp,0x34
c001bea5:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001bea9:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001bead:	6a 00                	push   0x0
c001beaf:	6a 00                	push   0x0
c001beb1:	e8 15 d7 ff ff       	call   c00195cb <x86WriteCMOS(unsigned char, unsigned char)>
c001beb6:	5d                   	pop    ebp
c001beb7:	89 fb                	mov    ebx,edi
c001beb9:	58                   	pop    eax
c001beba:	6a 00                	push   0x0
c001bebc:	6a 02                	push   0x2
c001bebe:	e8 08 d7 ff ff       	call   c00195cb <x86WriteCMOS(unsigned char, unsigned char)>
c001bec3:	89 f8                	mov    eax,edi
c001bec5:	89 f9                	mov    ecx,edi
c001bec7:	0f b6 c4             	movzx  eax,ah
c001beca:	31 d2                	xor    edx,edx
c001becc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bed0:	c1 e9 10             	shr    ecx,0x10
c001bed3:	89 f0                	mov    eax,esi
c001bed5:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001bed9:	89 f0                	mov    eax,esi
c001bedb:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001bedf:	0f b6 c4             	movzx  eax,ah
c001bee2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bee6:	89 f0                	mov    eax,esi
c001bee8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001beec:	c1 e8 10             	shr    eax,0x10
c001beef:	b9 64 00 00 00       	mov    ecx,0x64
c001bef4:	f7 f1                	div    ecx
c001bef6:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001befd:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001bf01:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001bf05:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001bf09:	e8 69 d6 ff ff       	call   c0019577 <x86ReadCMOS(unsigned char)>
c001bf0e:	83 c4 10             	add    esp,0x10
c001bf11:	a8 04                	test   al,0x4
c001bf13:	89 c5                	mov    ebp,eax
c001bf15:	75 6e                	jne    c001bf85 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001bf17:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bf1b:	31 d2                	xor    edx,edx
c001bf1d:	0f b6 c1             	movzx  eax,cl
c001bf20:	b9 0a 00 00 00       	mov    ecx,0xa
c001bf25:	f7 f1                	div    ecx
c001bf27:	c1 e0 04             	shl    eax,0x4
c001bf2a:	09 d0                	or     eax,edx
c001bf2c:	31 d2                	xor    edx,edx
c001bf2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf32:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001bf37:	f7 f1                	div    ecx
c001bf39:	c1 e0 04             	shl    eax,0x4
c001bf3c:	09 d0                	or     eax,edx
c001bf3e:	31 d2                	xor    edx,edx
c001bf40:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bf44:	0f b6 c3             	movzx  eax,bl
c001bf47:	f7 f1                	div    ecx
c001bf49:	c1 e0 04             	shl    eax,0x4
c001bf4c:	09 d0                	or     eax,edx
c001bf4e:	31 d2                	xor    edx,edx
c001bf50:	89 c3                	mov    ebx,eax
c001bf52:	89 f0                	mov    eax,esi
c001bf54:	0f b6 c0             	movzx  eax,al
c001bf57:	f7 f1                	div    ecx
c001bf59:	c1 e0 04             	shl    eax,0x4
c001bf5c:	09 d0                	or     eax,edx
c001bf5e:	31 d2                	xor    edx,edx
c001bf60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bf64:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bf69:	f7 f1                	div    ecx
c001bf6b:	c1 e0 04             	shl    eax,0x4
c001bf6e:	09 d0                	or     eax,edx
c001bf70:	31 d2                	xor    edx,edx
c001bf72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bf76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf7a:	f7 f1                	div    ecx
c001bf7c:	c1 e0 04             	shl    eax,0x4
c001bf7f:	09 d0                	or     eax,edx
c001bf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bf85:	83 e5 02             	and    ebp,0x2
c001bf88:	75 1e                	jne    c001bfa8 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001bf8a:	0f b6 c3             	movzx  eax,bl
c001bf8d:	83 f8 0b             	cmp    eax,0xb
c001bf90:	76 10                	jbe    c001bfa2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001bf92:	8d 53 f4             	lea    edx,[ebx-0xc]
c001bf95:	84 d2                	test   dl,dl
c001bf97:	88 d3                	mov    bl,dl
c001bf99:	75 02                	jne    c001bf9d <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001bf9b:	b3 0c                	mov    bl,0xc
c001bf9d:	83 cb 80             	or     ebx,0xffffff80
c001bfa0:	eb 06                	jmp    c001bfa8 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001bfa2:	85 c0                	test   eax,eax
c001bfa4:	75 02                	jne    c001bfa8 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001bfa6:	b3 0c                	mov    bl,0xc
c001bfa8:	50                   	push   eax
c001bfa9:	0f b6 db             	movzx  ebx,bl
c001bfac:	50                   	push   eax
c001bfad:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001bfb2:	52                   	push   edx
c001bfb3:	6a 00                	push   0x0
c001bfb5:	e8 11 d6 ff ff       	call   c00195cb <x86WriteCMOS(unsigned char, unsigned char)>
c001bfba:	5a                   	pop    edx
c001bfbb:	59                   	pop    ecx
c001bfbc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bfc1:	50                   	push   eax
c001bfc2:	6a 02                	push   0x2
c001bfc4:	e8 02 d6 ff ff       	call   c00195cb <x86WriteCMOS(unsigned char, unsigned char)>
c001bfc9:	5e                   	pop    esi
c001bfca:	5f                   	pop    edi
c001bfcb:	53                   	push   ebx
c001bfcc:	6a 04                	push   0x4
c001bfce:	e8 f8 d5 ff ff       	call   c00195cb <x86WriteCMOS(unsigned char, unsigned char)>
c001bfd3:	5d                   	pop    ebp
c001bfd4:	58                   	pop    eax
c001bfd5:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001bfda:	52                   	push   edx
c001bfdb:	6a 07                	push   0x7
c001bfdd:	e8 e9 d5 ff ff       	call   c00195cb <x86WriteCMOS(unsigned char, unsigned char)>
c001bfe2:	58                   	pop    eax
c001bfe3:	5a                   	pop    edx
c001bfe4:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001bfe9:	50                   	push   eax
c001bfea:	6a 08                	push   0x8
c001bfec:	e8 da d5 ff ff       	call   c00195cb <x86WriteCMOS(unsigned char, unsigned char)>
c001bff1:	59                   	pop    ecx
c001bff2:	5b                   	pop    ebx
c001bff3:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001bff8:	55                   	push   ebp
c001bff9:	6a 09                	push   0x9
c001bffb:	e8 cb d5 ff ff       	call   c00195cb <x86WriteCMOS(unsigned char, unsigned char)>
c001c000:	5e                   	pop    esi
c001c001:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c005:	e8 e6 fb ff ff       	call   c001bbf0 <RTC::completeRTCRefresh()>
c001c00a:	83 c4 3c             	add    esp,0x3c
c001c00d:	b0 01                	mov    al,0x1
c001c00f:	5b                   	pop    ebx
c001c010:	5e                   	pop    esi
c001c011:	5f                   	pop    edi
c001c012:	5d                   	pop    ebp
c001c013:	c3                   	ret    

c001c014 <rtcIRQHandler(regs*, void*)>:
c001c014:	53                   	push   ebx
c001c015:	83 ec 14             	sub    esp,0x14
c001c018:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c01c:	6a 0c                	push   0xc
c001c01e:	e8 54 d5 ff ff       	call   c0019577 <x86ReadCMOS(unsigned char)>
c001c023:	83 c4 10             	add    esp,0x10
c001c026:	a8 80                	test   al,0x80
c001c028:	74 24                	je     c001c04e <rtcIRQHandler(regs*, void*)+0x3a>
c001c02a:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001c031:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001c038:	66 ff 05 60 54 03 c0 	inc    WORD PTR ds:0xc0035460
c001c03f:	75 0d                	jne    c001c04e <rtcIRQHandler(regs*, void*)+0x3a>
c001c041:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001c045:	83 c4 08             	add    esp,0x8
c001c048:	5b                   	pop    ebx
c001c049:	e9 a2 fb ff ff       	jmp    c001bbf0 <RTC::completeRTCRefresh()>
c001c04e:	83 c4 08             	add    esp,0x8
c001c051:	5b                   	pop    ebx
c001c052:	c3                   	ret    
c001c053:	90                   	nop

c001c054 <RTC::RTC()>:
c001c054:	83 ec 1c             	sub    esp,0x1c
c001c057:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c05b:	83 ec 08             	sub    esp,0x8
c001c05e:	68 b3 b2 02 c0       	push   0xc002b2b3
c001c063:	50                   	push   eax
c001c064:	e8 99 d8 fe ff       	call   c0009902 <Clock::Clock(char const*)>
c001c069:	83 c4 10             	add    esp,0x10
c001c06c:	ba d0 b2 02 c0       	mov    edx,0xc002b2d0
c001c071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c075:	89 10                	mov    DWORD PTR [eax],edx
c001c077:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c07b:	83 ec 0c             	sub    esp,0xc
c001c07e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c082:	6a 01                	push   0x1
c001c084:	68 14 c0 01 c0       	push   0xc001c014
c001c089:	6a 08                	push   0x8
c001c08b:	50                   	push   eax
c001c08c:	e8 5d e1 fe ff       	call   c000a1ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c091:	83 c4 20             	add    esp,0x20
c001c094:	89 c2                	mov    edx,eax
c001c096:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c09a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001c0a0:	fa                   	cli    
c001c0a1:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c001c0a6:	83 c0 01             	add    eax,0x1
c001c0a9:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c001c0ae:	83 ec 0c             	sub    esp,0xc
c001c0b1:	6a 0b                	push   0xb
c001c0b3:	e8 bf d4 ff ff       	call   c0019577 <x86ReadCMOS(unsigned char)>
c001c0b8:	83 c4 10             	add    esp,0x10
c001c0bb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c0bf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c0c3:	83 c8 10             	or     eax,0x10
c001c0c6:	0f b6 c0             	movzx  eax,al
c001c0c9:	83 ec 08             	sub    esp,0x8
c001c0cc:	50                   	push   eax
c001c0cd:	6a 0b                	push   0xb
c001c0cf:	e8 f7 d4 ff ff       	call   c00195cb <x86WriteCMOS(unsigned char, unsigned char)>
c001c0d4:	83 c4 10             	add    esp,0x10
c001c0d7:	83 ec 0c             	sub    esp,0xc
c001c0da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c0de:	e8 0d fb ff ff       	call   c001bbf0 <RTC::completeRTCRefresh()>
c001c0e3:	83 c4 10             	add    esp,0x10
c001c0e6:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c001c0ee:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c001c0f3:	85 c0                	test   eax,eax
c001c0f5:	75 01                	jne    c001c0f8 <RTC::RTC()+0xa4>
c001c0f7:	fb                   	sti    
c001c0f8:	90                   	nop
c001c0f9:	83 c4 1c             	add    esp,0x1c
c001c0fc:	c3                   	ret    
c001c0fd:	66 90                	xchg   ax,ax
c001c0ff:	90                   	nop

c001c100 <HalConsoleScroll(int, int)>:
c001c100:	83 ec 10             	sub    esp,0x10
c001c103:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001c10b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001c113:	90                   	nop
c001c114:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001c119:	0f 8f e1 00 00 00    	jg     c001c200 <HalConsoleScroll(int, int)+0x100>
c001c11f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c127:	90                   	nop
c001c128:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001c130:	0f 8f be 00 00 00    	jg     c001c1f4 <HalConsoleScroll(int, int)+0xf4>
c001c136:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c13a:	89 d0                	mov    eax,edx
c001c13c:	c1 e0 02             	shl    eax,0x2
c001c13f:	01 d0                	add    eax,edx
c001c141:	c1 e0 05             	shl    eax,0x5
c001c144:	89 c2                	mov    edx,eax
c001c146:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c14a:	01 d0                	add    eax,edx
c001c14c:	89 c2                	mov    edx,eax
c001c14e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c152:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001c155:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c159:	89 d0                	mov    eax,edx
c001c15b:	c1 e0 02             	shl    eax,0x2
c001c15e:	01 d0                	add    eax,edx
c001c160:	c1 e0 05             	shl    eax,0x5
c001c163:	89 c2                	mov    edx,eax
c001c165:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c169:	01 d0                	add    eax,edx
c001c16b:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001c171:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c175:	01 d0                	add    eax,edx
c001c177:	8a 11                	mov    dl,BYTE PTR [ecx]
c001c179:	88 10                	mov    BYTE PTR [eax],dl
c001c17b:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001c180:	75 66                	jne    c001c1e8 <HalConsoleScroll(int, int)+0xe8>
c001c182:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c186:	83 e0 01             	and    eax,0x1
c001c189:	74 39                	je     c001c1c4 <HalConsoleScroll(int, int)+0xc4>
c001c18b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c18f:	83 e0 0f             	and    eax,0xf
c001c192:	88 c2                	mov    dl,al
c001c194:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c198:	c1 e0 04             	shl    eax,0x4
c001c19b:	09 d0                	or     eax,edx
c001c19d:	88 c1                	mov    cl,al
c001c19f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c1a3:	89 d0                	mov    eax,edx
c001c1a5:	c1 e0 02             	shl    eax,0x2
c001c1a8:	01 d0                	add    eax,edx
c001c1aa:	c1 e0 05             	shl    eax,0x5
c001c1ad:	89 c2                	mov    edx,eax
c001c1af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c1b3:	01 d0                	add    eax,edx
c001c1b5:	89 c2                	mov    edx,eax
c001c1b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1bb:	01 d0                	add    eax,edx
c001c1bd:	88 ca                	mov    dl,cl
c001c1bf:	88 10                	mov    BYTE PTR [eax],dl
c001c1c1:	eb 25                	jmp    c001c1e8 <HalConsoleScroll(int, int)+0xe8>
c001c1c3:	90                   	nop
c001c1c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c1c8:	89 d0                	mov    eax,edx
c001c1ca:	c1 e0 02             	shl    eax,0x2
c001c1cd:	01 d0                	add    eax,edx
c001c1cf:	c1 e0 05             	shl    eax,0x5
c001c1d2:	89 c2                	mov    edx,eax
c001c1d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c1d8:	01 d0                	add    eax,edx
c001c1da:	89 c2                	mov    edx,eax
c001c1dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1e0:	01 d0                	add    eax,edx
c001c1e2:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001c1e5:	8d 76 00             	lea    esi,[esi+0x0]
c001c1e8:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001c1ed:	e9 36 ff ff ff       	jmp    c001c128 <HalConsoleScroll(int, int)+0x28>
c001c1f2:	66 90                	xchg   ax,ax
c001c1f4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001c1f9:	e9 16 ff ff ff       	jmp    c001c114 <HalConsoleScroll(int, int)+0x14>
c001c1fe:	66 90                	xchg   ax,ax
c001c200:	90                   	nop
c001c201:	83 c4 10             	add    esp,0x10
c001c204:	c3                   	ret    
c001c205:	8d 76 00             	lea    esi,[esi+0x0]

c001c208 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001c208:	83 ec 14             	sub    esp,0x14
c001c20b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c20f:	88 04 24             	mov    BYTE PTR [esp],al
c001c212:	8a 04 24             	mov    al,BYTE PTR [esp]
c001c215:	0f b6 c0             	movzx  eax,al
c001c218:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c21c:	89 d1                	mov    ecx,edx
c001c21e:	83 e1 0f             	and    ecx,0xf
c001c221:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c225:	c1 e2 04             	shl    edx,0x4
c001c228:	0f b6 d2             	movzx  edx,dl
c001c22b:	09 ca                	or     edx,ecx
c001c22d:	c1 e2 08             	shl    edx,0x8
c001c230:	09 d0                	or     eax,edx
c001c232:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001c237:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001c23f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c243:	89 d0                	mov    eax,edx
c001c245:	c1 e0 02             	shl    eax,0x2
c001c248:	01 d0                	add    eax,edx
c001c24a:	c1 e0 04             	shl    eax,0x4
c001c24d:	89 c2                	mov    edx,eax
c001c24f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c253:	01 d0                	add    eax,edx
c001c255:	d1 e0                	shl    eax,1
c001c257:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001c25b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c25f:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c001c264:	66 89 10             	mov    WORD PTR [eax],dx
c001c267:	90                   	nop
c001c268:	83 c4 14             	add    esp,0x14
c001c26b:	c3                   	ret    

c001c26c <HalConsoleCursorUpdate(int, int)>:
c001c26c:	83 ec 20             	sub    esp,0x20
c001c26f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c273:	89 c2                	mov    edx,eax
c001c275:	c1 e2 02             	shl    edx,0x2
c001c278:	01 d0                	add    eax,edx
c001c27a:	c1 e0 04             	shl    eax,0x4
c001c27d:	89 c2                	mov    edx,eax
c001c27f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c283:	01 d0                	add    eax,edx
c001c285:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001c28a:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001c291:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001c296:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c29a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c29e:	ee                   	out    dx,al
c001c29f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c2a4:	0f b6 c0             	movzx  eax,al
c001c2a7:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001c2ae:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001c2b2:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001c2b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c2ba:	ee                   	out    dx,al
c001c2bb:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001c2c2:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001c2c7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001c2cb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c2cf:	ee                   	out    dx,al
c001c2d0:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001c2d5:	c1 e8 08             	shr    eax,0x8
c001c2d8:	0f b6 c0             	movzx  eax,al
c001c2db:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001c2e2:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001c2e6:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001c2ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c2ee:	ee                   	out    dx,al
c001c2ef:	90                   	nop
c001c2f0:	83 c4 20             	add    esp,0x20
c001c2f3:	c3                   	ret    

c001c2f4 <ACPIDriver::initialise()>:
c001c2f4:	90                   	nop
c001c2f5:	c3                   	ret    
c001c2f6:	66 90                	xchg   ax,ax

c001c2f8 <ACPIDriver::detect()>:
c001c2f8:	90                   	nop
c001c2f9:	c3                   	ret    
c001c2fa:	66 90                	xchg   ax,ax

c001c2fc <ACPIDriver::deinitialise()>:
c001c2fc:	90                   	nop
c001c2fd:	c3                   	ret    
c001c2fe:	66 90                	xchg   ax,ax

c001c300 <ACPIDriver::setPowerState(DevicePowerState)>:
c001c300:	90                   	nop
c001c301:	c3                   	ret    
c001c302:	66 90                	xchg   ax,ax

c001c304 <ACPIDriver::getHumanReadableName()>:
c001c304:	b8 8e 96 02 c0       	mov    eax,0xc002968e
c001c309:	c3                   	ret    
c001c30a:	66 90                	xchg   ax,ax

c001c30c <ISADriver::initialise()>:
c001c30c:	90                   	nop
c001c30d:	c3                   	ret    
c001c30e:	66 90                	xchg   ax,ax

c001c310 <ISADriver::detect()>:
c001c310:	90                   	nop
c001c311:	c3                   	ret    
c001c312:	66 90                	xchg   ax,ax

c001c314 <ISADriver::deinitialise()>:
c001c314:	90                   	nop
c001c315:	c3                   	ret    
c001c316:	66 90                	xchg   ax,ax

c001c318 <ISADriver::setPowerState(DevicePowerState)>:
c001c318:	90                   	nop
c001c319:	c3                   	ret    
c001c31a:	66 90                	xchg   ax,ax

c001c31c <ISADriver::getHumanReadableName()>:
c001c31c:	b8 20 b3 02 c0       	mov    eax,0xc002b320
c001c321:	c3                   	ret    
c001c322:	66 90                	xchg   ax,ax

c001c324 <PCIDriver::detect()>:
c001c324:	90                   	nop
c001c325:	c3                   	ret    
c001c326:	66 90                	xchg   ax,ax

c001c328 <PCIDriver::deinitialise()>:
c001c328:	90                   	nop
c001c329:	c3                   	ret    
c001c32a:	66 90                	xchg   ax,ax

c001c32c <PCIDriver::setPowerState(DevicePowerState)>:
c001c32c:	90                   	nop
c001c32d:	c3                   	ret    
c001c32e:	66 90                	xchg   ax,ax

c001c330 <PCIDriver::getHumanReadableName()>:
c001c330:	b8 40 b3 02 c0       	mov    eax,0xc002b340
c001c335:	c3                   	ret    
c001c336:	66 90                	xchg   ax,ax

c001c338 <PCIDriver::enumerateDevices()>:
c001c338:	90                   	nop
c001c339:	c3                   	ret    
c001c33a:	66 90                	xchg   ax,ax

c001c33c <PCIDriver::initialise()>:
c001c33c:	83 ec 0c             	sub    esp,0xc
c001c33f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c343:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c346:	6a 04                	push   0x4
c001c348:	6a 08                	push   0x8
c001c34a:	68 f8 0c 00 00       	push   0xcf8
c001c34f:	50                   	push   eax
c001c350:	e8 75 b6 fe ff       	call   c00079ca <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001c355:	83 c4 10             	add    esp,0x10
c001c358:	83 ec 0c             	sub    esp,0xc
c001c35b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c35f:	e8 d4 ff ff ff       	call   c001c338 <PCIDriver::enumerateDevices()>
c001c364:	83 c4 10             	add    esp,0x10
c001c367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c36b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c36d:	83 c0 08             	add    eax,0x8
c001c370:	8b 00                	mov    eax,DWORD PTR [eax]
c001c372:	83 ec 0c             	sub    esp,0xc
c001c375:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c379:	ff d0                	call   eax
c001c37b:	83 c4 10             	add    esp,0x10
c001c37e:	90                   	nop
c001c37f:	83 c4 0c             	add    esp,0xc
c001c382:	c3                   	ret    
c001c383:	90                   	nop

c001c384 <PCIDriver::readBAR8(unsigned int, int)>:
c001c384:	83 ec 10             	sub    esp,0x10
c001c387:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c38b:	83 e0 01             	and    eax,0x1
c001c38e:	74 2c                	je     c001c3bc <PCIDriver::readBAR8(unsigned int, int)+0x38>
c001c390:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c394:	83 e0 fc             	and    eax,0xfffffffc
c001c397:	89 c2                	mov    edx,eax
c001c399:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c39d:	01 d0                	add    eax,edx
c001c39f:	0f b7 c0             	movzx  eax,ax
c001c3a2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c001c3a7:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001c3ac:	89 c2                	mov    edx,eax
c001c3ae:	ec                   	in     al,dx
c001c3af:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001c3b3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001c3b7:	eb 1f                	jmp    c001c3d8 <PCIDriver::readBAR8(unsigned int, int)+0x54>
c001c3b9:	8d 76 00             	lea    esi,[esi+0x0]
c001c3bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c3c0:	83 e0 f0             	and    eax,0xfffffff0
c001c3c3:	89 c2                	mov    edx,eax
c001c3c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c3c9:	01 d0                	add    eax,edx
c001c3cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c3cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c3d3:	8a 00                	mov    al,BYTE PTR [eax]
c001c3d5:	8d 76 00             	lea    esi,[esi+0x0]
c001c3d8:	83 c4 10             	add    esp,0x10
c001c3db:	c3                   	ret    

c001c3dc <PCIDriver::readBAR16(unsigned int, int)>:
c001c3dc:	83 ec 10             	sub    esp,0x10
c001c3df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c3e3:	83 e0 01             	and    eax,0x1
c001c3e6:	74 2c                	je     c001c414 <PCIDriver::readBAR16(unsigned int, int)+0x38>
c001c3e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c3ec:	83 e0 fc             	and    eax,0xfffffffc
c001c3ef:	89 c2                	mov    edx,eax
c001c3f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c3f5:	01 d0                	add    eax,edx
c001c3f7:	0f b7 c0             	movzx  eax,ax
c001c3fa:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c001c3ff:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001c404:	89 c2                	mov    edx,eax
c001c406:	66 ed                	in     ax,dx
c001c408:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001c40d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c411:	eb 1d                	jmp    c001c430 <PCIDriver::readBAR16(unsigned int, int)+0x54>
c001c413:	90                   	nop
c001c414:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c418:	83 e0 f0             	and    eax,0xfffffff0
c001c41b:	89 c2                	mov    edx,eax
c001c41d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c421:	01 d0                	add    eax,edx
c001c423:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c427:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c42b:	66 8b 00             	mov    ax,WORD PTR [eax]
c001c42e:	66 90                	xchg   ax,ax
c001c430:	83 c4 10             	add    esp,0x10
c001c433:	c3                   	ret    

c001c434 <PCIDriver::readBAR32(unsigned int, int)>:
c001c434:	83 ec 10             	sub    esp,0x10
c001c437:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c43b:	83 e0 01             	and    eax,0x1
c001c43e:	74 2c                	je     c001c46c <PCIDriver::readBAR32(unsigned int, int)+0x38>
c001c440:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c444:	83 e0 fc             	and    eax,0xfffffffc
c001c447:	89 c2                	mov    edx,eax
c001c449:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c44d:	01 d0                	add    eax,edx
c001c44f:	0f b7 c0             	movzx  eax,ax
c001c452:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c001c457:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001c45c:	89 c2                	mov    edx,eax
c001c45e:	ed                   	in     eax,dx
c001c45f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c463:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c467:	eb 1f                	jmp    c001c488 <PCIDriver::readBAR32(unsigned int, int)+0x54>
c001c469:	8d 76 00             	lea    esi,[esi+0x0]
c001c46c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c470:	83 e0 f0             	and    eax,0xfffffff0
c001c473:	89 c2                	mov    edx,eax
c001c475:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c479:	01 d0                	add    eax,edx
c001c47b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c47f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c483:	8b 00                	mov    eax,DWORD PTR [eax]
c001c485:	8d 76 00             	lea    esi,[esi+0x0]
c001c488:	83 c4 10             	add    esp,0x10
c001c48b:	c3                   	ret    

c001c48c <PCIDriver::writeBAR8(unsigned int, unsigned char, int)>:
c001c48c:	83 ec 14             	sub    esp,0x14
c001c48f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c493:	88 04 24             	mov    BYTE PTR [esp],al
c001c496:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c49a:	83 e0 01             	and    eax,0x1
c001c49d:	74 2d                	je     c001c4cc <PCIDriver::writeBAR8(unsigned int, unsigned char, int)+0x40>
c001c49f:	0f b6 14 24          	movzx  edx,BYTE PTR [esp]
c001c4a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c4a7:	83 e0 fc             	and    eax,0xfffffffc
c001c4aa:	89 c1                	mov    ecx,eax
c001c4ac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c4b0:	01 c8                	add    eax,ecx
c001c4b2:	0f b7 c0             	movzx  eax,ax
c001c4b5:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001c4ba:	88 54 24 0d          	mov    BYTE PTR [esp+0xd],dl
c001c4be:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001c4c2:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001c4c7:	ee                   	out    dx,al
c001c4c8:	eb 1e                	jmp    c001c4e8 <PCIDriver::writeBAR8(unsigned int, unsigned char, int)+0x5c>
c001c4ca:	66 90                	xchg   ax,ax
c001c4cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c4d0:	83 e0 f0             	and    eax,0xfffffff0
c001c4d3:	89 c2                	mov    edx,eax
c001c4d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c4d9:	01 d0                	add    eax,edx
c001c4db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c4df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4e3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001c4e6:	88 10                	mov    BYTE PTR [eax],dl
c001c4e8:	90                   	nop
c001c4e9:	83 c4 14             	add    esp,0x14
c001c4ec:	c3                   	ret    
c001c4ed:	90                   	nop
c001c4ee:	66 90                	xchg   ax,ax

c001c4f0 <PCIDriver::writeBAR16(unsigned int, unsigned short, int)>:
c001c4f0:	83 ec 14             	sub    esp,0x14
c001c4f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4f7:	66 89 04 24          	mov    WORD PTR [esp],ax
c001c4fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c4ff:	83 e0 01             	and    eax,0x1
c001c502:	74 30                	je     c001c534 <PCIDriver::writeBAR16(unsigned int, unsigned short, int)+0x44>
c001c504:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001c508:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c50c:	83 e2 fc             	and    edx,0xfffffffc
c001c50f:	89 d1                	mov    ecx,edx
c001c511:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001c515:	01 ca                	add    edx,ecx
c001c517:	0f b7 d2             	movzx  edx,dx
c001c51a:	66 89 54 24 0e       	mov    WORD PTR [esp+0xe],dx
c001c51f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001c524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c528:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001c52d:	66 ef                	out    dx,ax
c001c52f:	eb 23                	jmp    c001c554 <PCIDriver::writeBAR16(unsigned int, unsigned short, int)+0x64>
c001c531:	8d 76 00             	lea    esi,[esi+0x0]
c001c534:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c538:	83 e0 f0             	and    eax,0xfffffff0
c001c53b:	89 c2                	mov    edx,eax
c001c53d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c541:	01 d0                	add    eax,edx
c001c543:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c54b:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001c54e:	66 89 10             	mov    WORD PTR [eax],dx
c001c551:	8d 76 00             	lea    esi,[esi+0x0]
c001c554:	90                   	nop
c001c555:	83 c4 14             	add    esp,0x14
c001c558:	c3                   	ret    
c001c559:	90                   	nop
c001c55a:	66 90                	xchg   ax,ax

c001c55c <PCIDriver::writeBAR32(unsigned int, unsigned int, int)>:
c001c55c:	83 ec 10             	sub    esp,0x10
c001c55f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c563:	83 e0 01             	and    eax,0x1
c001c566:	74 2c                	je     c001c594 <PCIDriver::writeBAR32(unsigned int, unsigned int, int)+0x38>
c001c568:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c56c:	83 e0 fc             	and    eax,0xfffffffc
c001c56f:	89 c2                	mov    edx,eax
c001c571:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c575:	01 d0                	add    eax,edx
c001c577:	0f b7 c0             	movzx  eax,ax
c001c57a:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c001c57f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c583:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c587:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c58b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001c590:	ef                   	out    dx,eax
c001c591:	eb 21                	jmp    c001c5b4 <PCIDriver::writeBAR32(unsigned int, unsigned int, int)+0x58>
c001c593:	90                   	nop
c001c594:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c598:	83 e0 f0             	and    eax,0xfffffff0
c001c59b:	89 c2                	mov    edx,eax
c001c59d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c5a1:	01 d0                	add    eax,edx
c001c5a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c5a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c5ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c5af:	89 10                	mov    DWORD PTR [eax],edx
c001c5b1:	8d 76 00             	lea    esi,[esi+0x0]
c001c5b4:	90                   	nop
c001c5b5:	83 c4 10             	add    esp,0x10
c001c5b8:	c3                   	ret    
c001c5b9:	90                   	nop
c001c5ba:	66 90                	xchg   ax,ax

c001c5bc <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c5bc:	53                   	push   ebx
c001c5bd:	83 ec 30             	sub    esp,0x30
c001c5c0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c5c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c5c8:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001c5cc:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001c5d0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c5d4:	88 d8                	mov    al,bl
c001c5d6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c5da:	88 c8                	mov    al,cl
c001c5dc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001c5e0:	88 d0                	mov    al,dl
c001c5e2:	88 04 24             	mov    BYTE PTR [esp],al
c001c5e5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c5ea:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c5ee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c5f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c5f7:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c5fc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c600:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c604:	c1 e0 10             	shl    eax,0x10
c001c607:	89 c2                	mov    edx,eax
c001c609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c60d:	c1 e0 0b             	shl    eax,0xb
c001c610:	09 c2                	or     edx,eax
c001c612:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c616:	c1 e0 08             	shl    eax,0x8
c001c619:	09 c2                	or     edx,eax
c001c61b:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001c61f:	25 fc 00 00 00       	and    eax,0xfc
c001c624:	09 d0                	or     eax,edx
c001c626:	0d 00 00 00 80       	or     eax,0x80000000
c001c62b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c62f:	66 c7 44 24 16 f8 0c 	mov    WORD PTR [esp+0x16],0xcf8
c001c636:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c63a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c63e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c642:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c001c647:	ef                   	out    dx,eax
c001c648:	66 c7 44 24 1e fc 0c 	mov    WORD PTR [esp+0x1e],0xcfc
c001c64f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c654:	89 c2                	mov    edx,eax
c001c656:	ed                   	in     eax,dx
c001c657:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c65b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c65f:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001c663:	83 e0 02             	and    eax,0x2
c001c666:	c1 e0 03             	shl    eax,0x3
c001c669:	88 c1                	mov    cl,al
c001c66b:	d3 ea                	shr    edx,cl
c001c66d:	89 d0                	mov    eax,edx
c001c66f:	83 c4 30             	add    esp,0x30
c001c672:	5b                   	pop    ebx
c001c673:	c3                   	ret    

c001c674 <PCIDriver::writeWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001c674:	56                   	push   esi
c001c675:	53                   	push   ebx
c001c676:	83 ec 54             	sub    esp,0x54
c001c679:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c001c67d:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
c001c681:	8b 5c 24 6c          	mov    ebx,DWORD PTR [esp+0x6c]
c001c685:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c001c689:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001c68d:	88 54 24 10          	mov    BYTE PTR [esp+0x10],dl
c001c691:	89 f2                	mov    edx,esi
c001c693:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c697:	88 da                	mov    dl,bl
c001c699:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c001c69d:	88 ca                	mov    dl,cl
c001c69f:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001c6a3:	66 89 04 24          	mov    WORD PTR [esp],ax
c001c6a7:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001c6ac:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c6b0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c6b5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001c6b9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c6be:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c6c2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001c6c6:	c1 e0 10             	shl    eax,0x10
c001c6c9:	89 c2                	mov    edx,eax
c001c6cb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c6cf:	c1 e0 0b             	shl    eax,0xb
c001c6d2:	09 c2                	or     edx,eax
c001c6d4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001c6d8:	c1 e0 08             	shl    eax,0x8
c001c6db:	09 c2                	or     edx,eax
c001c6dd:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c6e2:	25 fc 00 00 00       	and    eax,0xfc
c001c6e7:	09 d0                	or     eax,edx
c001c6e9:	0d 00 00 00 80       	or     eax,0x80000000
c001c6ee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001c6f2:	66 c7 44 24 36 f8 0c 	mov    WORD PTR [esp+0x36],0xcf8
c001c6f9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001c6fd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c701:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c705:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c001c70a:	ef                   	out    dx,eax
c001c70b:	66 c7 44 24 3e fc 0c 	mov    WORD PTR [esp+0x3e],0xcfc
c001c712:	66 8b 44 24 3e       	mov    ax,WORD PTR [esp+0x3e]
c001c717:	89 c2                	mov    edx,eax
c001c719:	ed                   	in     eax,dx
c001c71a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001c71e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c722:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001c726:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c72b:	83 e0 02             	and    eax,0x2
c001c72e:	74 18                	je     c001c748 <PCIDriver::writeWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd4>
c001c730:	81 64 24 50 ff ff 00 00 	and    DWORD PTR [esp+0x50],0xffff
c001c738:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001c73c:	c1 e0 10             	shl    eax,0x10
c001c73f:	09 44 24 50          	or     DWORD PTR [esp+0x50],eax
c001c743:	eb 13                	jmp    c001c758 <PCIDriver::writeWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xe4>
c001c745:	8d 76 00             	lea    esi,[esi+0x0]
c001c748:	81 64 24 50 00 00 ff ff 	and    DWORD PTR [esp+0x50],0xffff0000
c001c750:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001c754:	09 44 24 50          	or     DWORD PTR [esp+0x50],eax
c001c758:	66 c7 44 24 26 f8 0c 	mov    WORD PTR [esp+0x26],0xcf8
c001c75f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001c763:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c767:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c76b:	66 8b 54 24 26       	mov    dx,WORD PTR [esp+0x26]
c001c770:	ef                   	out    dx,eax
c001c771:	66 c7 44 24 2e fc 0c 	mov    WORD PTR [esp+0x2e],0xcfc
c001c778:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c77c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c780:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c784:	66 8b 54 24 2e       	mov    dx,WORD PTR [esp+0x2e]
c001c789:	ef                   	out    dx,eax
c001c78a:	90                   	nop
c001c78b:	83 c4 54             	add    esp,0x54
c001c78e:	5b                   	pop    ebx
c001c78f:	5e                   	pop    esi
c001c790:	c3                   	ret    
c001c791:	90                   	nop
c001c792:	66 90                	xchg   ax,ax

c001c794 <PCIDriver::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001c794:	83 ec 0c             	sub    esp,0xc
c001c797:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c79b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c79f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c7a3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c7a7:	88 c8                	mov    al,cl
c001c7a9:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001c7ad:	88 d0                	mov    al,dl
c001c7af:	88 04 24             	mov    BYTE PTR [esp],al
c001c7b2:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001c7b6:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001c7bb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c7c0:	6a 00                	push   0x0
c001c7c2:	51                   	push   ecx
c001c7c3:	52                   	push   edx
c001c7c4:	50                   	push   eax
c001c7c5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c7c9:	e8 ee fd ff ff       	call   c001c5bc <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c7ce:	83 c4 14             	add    esp,0x14
c001c7d1:	83 c4 0c             	add    esp,0xc
c001c7d4:	c3                   	ret    
c001c7d5:	90                   	nop
c001c7d6:	66 90                	xchg   ax,ax

c001c7d8 <PCIDriver::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001c7d8:	83 ec 0c             	sub    esp,0xc
c001c7db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c7df:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c7e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c7e7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c7eb:	88 c8                	mov    al,cl
c001c7ed:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001c7f1:	88 d0                	mov    al,dl
c001c7f3:	88 04 24             	mov    BYTE PTR [esp],al
c001c7f6:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001c7fa:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001c7ff:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c804:	6a 0e                	push   0xe
c001c806:	51                   	push   ecx
c001c807:	52                   	push   edx
c001c808:	50                   	push   eax
c001c809:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c80d:	e8 aa fd ff ff       	call   c001c5bc <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c812:	83 c4 14             	add    esp,0x14
c001c815:	0f b6 c0             	movzx  eax,al
c001c818:	83 c4 0c             	add    esp,0xc
c001c81b:	c3                   	ret    

c001c81c <PCIDriver::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001c81c:	83 ec 1c             	sub    esp,0x1c
c001c81f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c823:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001c827:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c82b:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c82f:	88 c8                	mov    al,cl
c001c831:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001c835:	88 d0                	mov    al,dl
c001c837:	88 04 24             	mov    BYTE PTR [esp],al
c001c83a:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001c83e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001c843:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c848:	6a 0a                	push   0xa
c001c84a:	51                   	push   ecx
c001c84b:	52                   	push   edx
c001c84c:	50                   	push   eax
c001c84d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c851:	e8 66 fd ff ff       	call   c001c5bc <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c856:	83 c4 14             	add    esp,0x14
c001c859:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001c85d:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001c861:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001c866:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c86b:	6a 0a                	push   0xa
c001c86d:	51                   	push   ecx
c001c86e:	52                   	push   edx
c001c86f:	50                   	push   eax
c001c870:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c874:	e8 43 fd ff ff       	call   c001c5bc <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c879:	83 c4 14             	add    esp,0x14
c001c87c:	0f b7 c0             	movzx  eax,ax
c001c87f:	c1 f8 08             	sar    eax,0x8
c001c882:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c886:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c88b:	0f b6 54 24 1a       	movzx  edx,BYTE PTR [esp+0x1a]
c001c890:	c1 e2 08             	shl    edx,0x8
c001c893:	09 d0                	or     eax,edx
c001c895:	83 c4 1c             	add    esp,0x1c
c001c898:	c3                   	ret    
c001c899:	90                   	nop
c001c89a:	66 90                	xchg   ax,ax

c001c89c <PCIDriver::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001c89c:	83 ec 0c             	sub    esp,0xc
c001c89f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c8a3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c8a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c8ab:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c8af:	88 c8                	mov    al,cl
c001c8b1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001c8b5:	88 d0                	mov    al,dl
c001c8b7:	88 04 24             	mov    BYTE PTR [esp],al
c001c8ba:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001c8be:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001c8c3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c8c8:	6a 08                	push   0x8
c001c8ca:	51                   	push   ecx
c001c8cb:	52                   	push   edx
c001c8cc:	50                   	push   eax
c001c8cd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c8d1:	e8 e6 fc ff ff       	call   c001c5bc <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c8d6:	83 c4 14             	add    esp,0x14
c001c8d9:	0f b7 c0             	movzx  eax,ax
c001c8dc:	c1 f8 08             	sar    eax,0x8
c001c8df:	83 c4 0c             	add    esp,0xc
c001c8e2:	c3                   	ret    
c001c8e3:	90                   	nop

c001c8e4 <PCIDriver::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001c8e4:	83 ec 0c             	sub    esp,0xc
c001c8e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c8eb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c8ef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c8f3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c8f7:	88 c8                	mov    al,cl
c001c8f9:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001c8fd:	88 d0                	mov    al,dl
c001c8ff:	88 04 24             	mov    BYTE PTR [esp],al
c001c902:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001c906:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001c90b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c910:	6a 08                	push   0x8
c001c912:	51                   	push   ecx
c001c913:	52                   	push   edx
c001c914:	50                   	push   eax
c001c915:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c919:	e8 9e fc ff ff       	call   c001c5bc <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c91e:	83 c4 14             	add    esp,0x14
c001c921:	83 c4 0c             	add    esp,0xc
c001c924:	c3                   	ret    
c001c925:	90                   	nop
c001c926:	66 90                	xchg   ax,ax

c001c928 <PCIDriver::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001c928:	83 ec 0c             	sub    esp,0xc
c001c92b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c92f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c933:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c937:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c93b:	88 c8                	mov    al,cl
c001c93d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001c941:	88 d0                	mov    al,dl
c001c943:	88 04 24             	mov    BYTE PTR [esp],al
c001c946:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001c94a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001c94f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c954:	6a 3c                	push   0x3c
c001c956:	51                   	push   ecx
c001c957:	52                   	push   edx
c001c958:	50                   	push   eax
c001c959:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c95d:	e8 5a fc ff ff       	call   c001c5bc <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c962:	83 c4 14             	add    esp,0x14
c001c965:	83 c4 0c             	add    esp,0xc
c001c968:	c3                   	ret    
c001c969:	90                   	nop
c001c96a:	66 90                	xchg   ax,ax

c001c96c <PCIDriver::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001c96c:	83 ec 0c             	sub    esp,0xc
c001c96f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c973:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c977:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c97b:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c97f:	88 c8                	mov    al,cl
c001c981:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001c985:	88 d0                	mov    al,dl
c001c987:	88 04 24             	mov    BYTE PTR [esp],al
c001c98a:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001c98e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001c993:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c998:	6a 18                	push   0x18
c001c99a:	51                   	push   ecx
c001c99b:	52                   	push   edx
c001c99c:	50                   	push   eax
c001c99d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c9a1:	e8 16 fc ff ff       	call   c001c5bc <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c9a6:	83 c4 14             	add    esp,0x14
c001c9a9:	0f b7 c0             	movzx  eax,ax
c001c9ac:	c1 f8 08             	sar    eax,0x8
c001c9af:	83 c4 0c             	add    esp,0xc
c001c9b2:	c3                   	ret    
c001c9b3:	90                   	nop

c001c9b4 <PCIDriver::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c9b4:	56                   	push   esi
c001c9b5:	53                   	push   ebx
c001c9b6:	83 ec 10             	sub    esp,0x10
c001c9b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9bd:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c9c1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001c9c5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c9c9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c9cd:	88 d8                	mov    al,bl
c001c9cf:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c9d3:	88 c8                	mov    al,cl
c001c9d5:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001c9d9:	88 d0                	mov    al,dl
c001c9db:	88 04 24             	mov    BYTE PTR [esp],al
c001c9de:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c9e2:	c1 e0 02             	shl    eax,0x2
c001c9e5:	83 c0 12             	add    eax,0x12
c001c9e8:	0f b6 d8             	movzx  ebx,al
c001c9eb:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001c9ef:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001c9f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c9f9:	53                   	push   ebx
c001c9fa:	51                   	push   ecx
c001c9fb:	52                   	push   edx
c001c9fc:	50                   	push   eax
c001c9fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca01:	e8 b6 fb ff ff       	call   c001c5bc <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ca06:	83 c4 14             	add    esp,0x14
c001ca09:	0f b7 c0             	movzx  eax,ax
c001ca0c:	c1 e0 10             	shl    eax,0x10
c001ca0f:	89 c6                	mov    esi,eax
c001ca11:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ca15:	83 c0 04             	add    eax,0x4
c001ca18:	c1 e0 02             	shl    eax,0x2
c001ca1b:	0f b6 d8             	movzx  ebx,al
c001ca1e:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001ca22:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001ca27:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ca2c:	53                   	push   ebx
c001ca2d:	51                   	push   ecx
c001ca2e:	52                   	push   edx
c001ca2f:	50                   	push   eax
c001ca30:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca34:	e8 83 fb ff ff       	call   c001c5bc <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ca39:	83 c4 14             	add    esp,0x14
c001ca3c:	0f b7 c0             	movzx  eax,ax
c001ca3f:	09 f0                	or     eax,esi
c001ca41:	83 c4 10             	add    esp,0x10
c001ca44:	5b                   	pop    ebx
c001ca45:	5e                   	pop    esi
c001ca46:	c3                   	ret    
c001ca47:	90                   	nop

c001ca48 <FAT::getName()>:
c001ca48:	b8 64 b3 02 c0       	mov    eax,0xc002b364
c001ca4d:	c3                   	ret    
c001ca4e:	66 90                	xchg   ax,ax

c001ca50 <FAT::tell(void*, unsigned long long*)>:
c001ca50:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ca55:	75 09                	jne    c001ca60 <FAT::tell(void*, unsigned long long*)+0x10>
c001ca57:	b8 04 00 00 00       	mov    eax,0x4
c001ca5c:	c3                   	ret    
c001ca5d:	8d 76 00             	lea    esi,[esi+0x0]
c001ca60:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ca65:	75 09                	jne    c001ca70 <FAT::tell(void*, unsigned long long*)+0x20>
c001ca67:	b8 04 00 00 00       	mov    eax,0x4
c001ca6c:	c3                   	ret    
c001ca6d:	8d 76 00             	lea    esi,[esi+0x0]
c001ca70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca74:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ca77:	ba 00 00 00 00       	mov    edx,0x0
c001ca7c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ca80:	89 01                	mov    DWORD PTR [ecx],eax
c001ca82:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ca85:	b8 00 00 00 00       	mov    eax,0x0
c001ca8a:	c3                   	ret    
c001ca8b:	90                   	nop

c001ca8c <FAT::stat(void*, unsigned long long*)>:
c001ca8c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ca91:	75 09                	jne    c001ca9c <FAT::stat(void*, unsigned long long*)+0x10>
c001ca93:	b8 04 00 00 00       	mov    eax,0x4
c001ca98:	c3                   	ret    
c001ca99:	8d 76 00             	lea    esi,[esi+0x0]
c001ca9c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001caa1:	75 09                	jne    c001caac <FAT::stat(void*, unsigned long long*)+0x20>
c001caa3:	b8 04 00 00 00       	mov    eax,0x4
c001caa8:	c3                   	ret    
c001caa9:	8d 76 00             	lea    esi,[esi+0x0]
c001caac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cab0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cab3:	ba 00 00 00 00       	mov    edx,0x0
c001cab8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cabc:	89 01                	mov    DWORD PTR [ecx],eax
c001cabe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001cac1:	b8 00 00 00 00       	mov    eax,0x0
c001cac6:	c3                   	ret    
c001cac7:	90                   	nop

c001cac8 <FAT::~FAT()>:
c001cac8:	83 ec 0c             	sub    esp,0xc
c001cacb:	ba b0 b3 02 c0       	mov    edx,0xc002b3b0
c001cad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cad4:	89 10                	mov    DWORD PTR [eax],edx
c001cad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cada:	83 ec 0c             	sub    esp,0xc
c001cadd:	50                   	push   eax
c001cade:	e8 3f bb fe ff       	call   c0008622 <Filesystem::~Filesystem()>
c001cae3:	83 c4 10             	add    esp,0x10
c001cae6:	90                   	nop
c001cae7:	83 c4 0c             	add    esp,0xc
c001caea:	c3                   	ret    
c001caeb:	90                   	nop

c001caec <FAT::~FAT()>:
c001caec:	83 ec 0c             	sub    esp,0xc
c001caef:	83 ec 0c             	sub    esp,0xc
c001caf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001caf6:	e8 cd ff ff ff       	call   c001cac8 <FAT::~FAT()>
c001cafb:	83 c4 10             	add    esp,0x10
c001cafe:	83 ec 08             	sub    esp,0x8
c001cb01:	6a 08                	push   0x8
c001cb03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb07:	e8 c8 0f ff ff       	call   c000dad4 <operator delete(void*, unsigned long)>
c001cb0c:	83 c4 10             	add    esp,0x10
c001cb0f:	83 c4 0c             	add    esp,0xc
c001cb12:	c3                   	ret    
c001cb13:	90                   	nop

c001cb14 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001cb14:	83 ec 1c             	sub    esp,0x1c
c001cb17:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001cb1e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001cb23:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cb27:	8b 04 85 a0 54 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcab60]
c001cb2e:	83 f8 ff             	cmp    eax,0xffffffff
c001cb31:	75 35                	jne    c001cb68 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001cb33:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001cb37:	88 c2                	mov    dl,al
c001cb39:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001cb3e:	01 d0                	add    eax,edx
c001cb40:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001cb44:	8b 15 80 54 03 c0    	mov    edx,DWORD PTR ds:0xc0035480
c001cb4a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cb4e:	89 14 85 a0 54 03 c0 	mov    DWORD PTR [eax*4-0x3ffcab60],edx
c001cb55:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001cb5a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cb5e:	89 14 85 20 55 03 c0 	mov    DWORD PTR [eax*4-0x3ffcaae0],edx
c001cb65:	eb 19                	jmp    c001cb80 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001cb67:	90                   	nop
c001cb68:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001cb6c:	88 c2                	mov    dl,al
c001cb6e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cb72:	8b 04 85 a0 54 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcab60]
c001cb79:	01 d0                	add    eax,edx
c001cb7b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001cb7f:	90                   	nop
c001cb80:	83 ec 04             	sub    esp,0x4
c001cb83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001cb87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001cb8b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001cb8f:	50                   	push   eax
c001cb90:	e8 3f 86 fe ff       	call   c00051d4 <f_getlabel>
c001cb95:	83 c4 10             	add    esp,0x10
c001cb98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cb9c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cba1:	75 09                	jne    c001cbac <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001cba3:	b8 00 00 00 00       	mov    eax,0x0
c001cba8:	eb 0a                	jmp    c001cbb4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001cbaa:	66 90                	xchg   ax,ax
c001cbac:	b8 01 00 00 00       	mov    eax,0x1
c001cbb1:	8d 76 00             	lea    esi,[esi+0x0]
c001cbb4:	83 c4 1c             	add    esp,0x1c
c001cbb7:	c3                   	ret    

c001cbb8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001cbb8:	53                   	push   ebx
c001cbb9:	83 ec 58             	sub    esp,0x58
c001cbbc:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001cbc4:	8d 54 24 10          	lea    edx,[esp+0x10]
c001cbc8:	b9 00 00 00 00       	mov    ecx,0x0
c001cbcd:	b8 3c 00 00 00       	mov    eax,0x3c
c001cbd2:	83 e0 f8             	and    eax,0xfffffff8
c001cbd5:	89 c3                	mov    ebx,eax
c001cbd7:	b8 00 00 00 00       	mov    eax,0x0
c001cbdc:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c001cbe0:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c001cbe4:	83 c0 08             	add    eax,0x8
c001cbe7:	39 d8                	cmp    eax,ebx
c001cbe9:	72 f1                	jb     c001cbdc <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c001cbeb:	01 c2                	add    edx,eax
c001cbed:	89 0a                	mov    DWORD PTR [edx],ecx
c001cbef:	83 c2 04             	add    edx,0x4
c001cbf2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001cbf6:	8b 04 85 a0 54 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcab60]
c001cbfd:	83 f8 ff             	cmp    eax,0xffffffff
c001cc00:	75 36                	jne    c001cc38 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c001cc02:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001cc06:	88 c2                	mov    dl,al
c001cc08:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001cc0d:	01 d0                	add    eax,edx
c001cc0f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cc13:	8b 15 80 54 03 c0    	mov    edx,DWORD PTR ds:0xc0035480
c001cc19:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001cc1d:	89 14 85 a0 54 03 c0 	mov    DWORD PTR [eax*4-0x3ffcab60],edx
c001cc24:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001cc29:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001cc2d:	89 14 85 20 55 03 c0 	mov    DWORD PTR [eax*4-0x3ffcaae0],edx
c001cc34:	eb 1a                	jmp    c001cc50 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c001cc36:	66 90                	xchg   ax,ax
c001cc38:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001cc3c:	88 c2                	mov    dl,al
c001cc3e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001cc42:	8b 04 85 a0 54 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcab60]
c001cc49:	01 d0                	add    eax,edx
c001cc4b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cc4f:	90                   	nop
c001cc50:	83 ec 08             	sub    esp,0x8
c001cc53:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001cc57:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cc5b:	50                   	push   eax
c001cc5c:	e8 0f 3c fe ff       	call   c0000870 <strcat>
c001cc61:	83 c4 10             	add    esp,0x10
c001cc64:	83 ec 0c             	sub    esp,0xc
c001cc67:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cc6b:	50                   	push   eax
c001cc6c:	e8 b7 86 fe ff       	call   c0005328 <f_setlabel>
c001cc71:	83 c4 10             	add    esp,0x10
c001cc74:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001cc78:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001cc7d:	75 09                	jne    c001cc88 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c001cc7f:	b8 00 00 00 00       	mov    eax,0x0
c001cc84:	eb 0a                	jmp    c001cc90 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c001cc86:	66 90                	xchg   ax,ax
c001cc88:	b8 01 00 00 00       	mov    eax,0x1
c001cc8d:	8d 76 00             	lea    esi,[esi+0x0]
c001cc90:	83 c4 58             	add    esp,0x58
c001cc93:	5b                   	pop    ebx
c001cc94:	c3                   	ret    
c001cc95:	90                   	nop
c001cc96:	66 90                	xchg   ax,ax

c001cc98 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001cc98:	83 ec 2c             	sub    esp,0x2c
c001cc9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001cca3:	83 ec 08             	sub    esp,0x8
c001cca6:	68 88 b3 02 c0       	push   0xc002b388
c001ccab:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ccaf:	e8 cc 3a fe ff       	call   c0000780 <strcmp>
c001ccb4:	83 c4 10             	add    esp,0x10
c001ccb7:	85 c0                	test   eax,eax
c001ccb9:	0f 94 c0             	sete   al
c001ccbc:	0f b6 c0             	movzx  eax,al
c001ccbf:	85 c0                	test   eax,eax
c001ccc1:	74 0d                	je     c001ccd0 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001ccc3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001cccb:	e9 c0 00 00 00       	jmp    c001cd90 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001ccd0:	83 ec 08             	sub    esp,0x8
c001ccd3:	68 7a b3 02 c0       	push   0xc002b37a
c001ccd8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ccdc:	e8 9f 3a fe ff       	call   c0000780 <strcmp>
c001cce1:	83 c4 10             	add    esp,0x10
c001cce4:	85 c0                	test   eax,eax
c001cce6:	0f 94 c0             	sete   al
c001cce9:	0f b6 c0             	movzx  eax,al
c001ccec:	85 c0                	test   eax,eax
c001ccee:	74 10                	je     c001cd00 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001ccf0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ccf8:	e9 93 00 00 00       	jmp    c001cd90 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001ccfd:	8d 76 00             	lea    esi,[esi+0x0]
c001cd00:	83 ec 08             	sub    esp,0x8
c001cd03:	68 80 b3 02 c0       	push   0xc002b380
c001cd08:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001cd0c:	e8 6f 3a fe ff       	call   c0000780 <strcmp>
c001cd11:	83 c4 10             	add    esp,0x10
c001cd14:	85 c0                	test   eax,eax
c001cd16:	0f 94 c0             	sete   al
c001cd19:	0f b6 c0             	movzx  eax,al
c001cd1c:	85 c0                	test   eax,eax
c001cd1e:	74 0c                	je     c001cd2c <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001cd20:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001cd28:	eb 66                	jmp    c001cd90 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001cd2a:	66 90                	xchg   ax,ax
c001cd2c:	83 ec 08             	sub    esp,0x8
c001cd2f:	68 bc 81 02 c0       	push   0xc00281bc
c001cd34:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001cd38:	e8 43 3a fe ff       	call   c0000780 <strcmp>
c001cd3d:	83 c4 10             	add    esp,0x10
c001cd40:	85 c0                	test   eax,eax
c001cd42:	0f 94 c0             	sete   al
c001cd45:	0f b6 c0             	movzx  eax,al
c001cd48:	85 c0                	test   eax,eax
c001cd4a:	74 0c                	je     c001cd58 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001cd4c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001cd54:	eb 3a                	jmp    c001cd90 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001cd56:	66 90                	xchg   ax,ax
c001cd58:	83 ec 08             	sub    esp,0x8
c001cd5b:	68 86 b3 02 c0       	push   0xc002b386
c001cd60:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001cd64:	e8 17 3a fe ff       	call   c0000780 <strcmp>
c001cd69:	83 c4 10             	add    esp,0x10
c001cd6c:	85 c0                	test   eax,eax
c001cd6e:	0f 94 c0             	sete   al
c001cd71:	0f b6 c0             	movzx  eax,al
c001cd74:	85 c0                	test   eax,eax
c001cd76:	74 0c                	je     c001cd84 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001cd78:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001cd80:	eb 0e                	jmp    c001cd90 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001cd82:	66 90                	xchg   ax,ax
c001cd84:	b8 08 00 00 00       	mov    eax,0x8
c001cd89:	e9 ea 00 00 00       	jmp    c001ce78 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001cd8e:	66 90                	xchg   ax,ax
c001cd90:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001cd97:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001cd9c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cda0:	8b 04 85 a0 54 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcab60]
c001cda7:	83 f8 ff             	cmp    eax,0xffffffff
c001cdaa:	75 34                	jne    c001cde0 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001cdac:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001cdb0:	88 c2                	mov    dl,al
c001cdb2:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001cdb7:	01 d0                	add    eax,edx
c001cdb9:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001cdbd:	8b 15 80 54 03 c0    	mov    edx,DWORD PTR ds:0xc0035480
c001cdc3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cdc7:	89 14 85 a0 54 03 c0 	mov    DWORD PTR [eax*4-0x3ffcab60],edx
c001cdce:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001cdd3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001cdd7:	89 14 85 20 55 03 c0 	mov    DWORD PTR [eax*4-0x3ffcaae0],edx
c001cdde:	eb 18                	jmp    c001cdf8 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001cde0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001cde4:	88 c2                	mov    dl,al
c001cde6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cdea:	8b 04 85 a0 54 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcab60]
c001cdf1:	01 d0                	add    eax,edx
c001cdf3:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001cdf7:	90                   	nop
c001cdf8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cdfc:	88 04 24             	mov    BYTE PTR [esp],al
c001cdff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001ce03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce07:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ce0f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001ce14:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ce1c:	83 ec 0c             	sub    esp,0xc
c001ce1f:	68 00 20 00 00       	push   0x2000
c001ce24:	e8 ab 30 ff ff       	call   c000fed4 <malloc>
c001ce29:	83 c4 10             	add    esp,0x10
c001ce2c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce30:	68 00 20 00 00       	push   0x2000
c001ce35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce39:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ce3d:	50                   	push   eax
c001ce3e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001ce42:	50                   	push   eax
c001ce43:	e8 dd 87 fe ff       	call   c0005625 <f_mkfs>
c001ce48:	83 c4 10             	add    esp,0x10
c001ce4b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ce4f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ce54:	75 0a                	jne    c001ce60 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001ce56:	b8 00 00 00 00       	mov    eax,0x0
c001ce5b:	eb 1b                	jmp    c001ce78 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001ce5d:	8d 76 00             	lea    esi,[esi+0x0]
c001ce60:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001ce65:	75 09                	jne    c001ce70 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001ce67:	b8 09 00 00 00       	mov    eax,0x9
c001ce6c:	eb 0a                	jmp    c001ce78 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001ce6e:	66 90                	xchg   ax,ax
c001ce70:	b8 01 00 00 00       	mov    eax,0x1
c001ce75:	8d 76 00             	lea    esi,[esi+0x0]
c001ce78:	83 c4 2c             	add    esp,0x2c
c001ce7b:	c3                   	ret    

c001ce7c <FAT::tryMount(LogicalDisk*, int)>:
c001ce7c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001ce82:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001ce87:	83 f8 14             	cmp    eax,0x14
c001ce8a:	75 18                	jne    c001cea4 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001ce8c:	83 ec 0c             	sub    esp,0xc
c001ce8f:	68 8c b3 02 c0       	push   0xc002b38c
c001ce94:	e8 8f 34 ff ff       	call   c0010328 <KePanic(char const*)>
c001ce99:	83 c4 10             	add    esp,0x10
c001ce9c:	b0 00                	mov    al,0x0
c001ce9e:	e9 ed 01 00 00       	jmp    c001d090 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001cea3:	90                   	nop
c001cea4:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001ceab:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ceb1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ceb7:	3d 00 02 00 00       	cmp    eax,0x200
c001cebc:	74 0a                	je     c001cec8 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001cebe:	b0 00                	mov    al,0x0
c001cec0:	e9 cb 01 00 00       	jmp    c001d090 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001cec5:	8d 76 00             	lea    esi,[esi+0x0]
c001cec8:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001ced0:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001ced7:	8b 04 85 a0 54 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcab60]
c001cede:	83 f8 ff             	cmp    eax,0xffffffff
c001cee1:	74 09                	je     c001ceec <FAT::tryMount(LogicalDisk*, int)+0x70>
c001cee3:	b0 01                	mov    al,0x1
c001cee5:	e9 a6 01 00 00       	jmp    c001d090 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001ceea:	66 90                	xchg   ax,ax
c001ceec:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001cef6:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001cefe:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001cf05:	88 c2                	mov    dl,al
c001cf07:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001cf0c:	01 d0                	add    eax,edx
c001cf0e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001cf15:	8b 15 80 54 03 c0    	mov    edx,DWORD PTR ds:0xc0035480
c001cf1b:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001cf22:	89 14 85 a0 54 03 c0 	mov    DWORD PTR [eax*4-0x3ffcab60],edx
c001cf29:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001cf2e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001cf35:	89 14 85 20 55 03 c0 	mov    DWORD PTR [eax*4-0x3ffcaae0],edx
c001cf3c:	83 ec 0c             	sub    esp,0xc
c001cf3f:	68 34 02 00 00       	push   0x234
c001cf44:	e8 8b 2f ff ff       	call   c000fed4 <malloc>
c001cf49:	83 c4 10             	add    esp,0x10
c001cf4c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001cf53:	83 ec 04             	sub    esp,0x4
c001cf56:	6a 00                	push   0x0
c001cf58:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001cf5f:	50                   	push   eax
c001cf60:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001cf67:	e8 b3 6e fe ff       	call   c0003e1f <f_mount>
c001cf6c:	83 c4 10             	add    esp,0x10
c001cf6f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001cf76:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001cf7e:	74 1c                	je     c001cf9c <FAT::tryMount(LogicalDisk*, int)+0x120>
c001cf80:	83 ec 0c             	sub    esp,0xc
c001cf83:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001cf8a:	e8 65 2f ff ff       	call   c000fef4 <rfree>
c001cf8f:	83 c4 10             	add    esp,0x10
c001cf92:	b0 00                	mov    al,0x0
c001cf94:	e9 f7 00 00 00       	jmp    c001d090 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001cf99:	8d 76 00             	lea    esi,[esi+0x0]
c001cf9c:	83 ec 04             	sub    esp,0x4
c001cf9f:	68 00 01 00 00       	push   0x100
c001cfa4:	6a 00                	push   0x0
c001cfa6:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001cfad:	50                   	push   eax
c001cfae:	e8 3d 35 fe ff       	call   c00004f0 <memset>
c001cfb3:	83 c4 10             	add    esp,0x10
c001cfb6:	83 ec 08             	sub    esp,0x8
c001cfb9:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001cfc0:	50                   	push   eax
c001cfc1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001cfc8:	50                   	push   eax
c001cfc9:	e8 a2 38 fe ff       	call   c0000870 <strcat>
c001cfce:	83 c4 10             	add    esp,0x10
c001cfd1:	83 ec 08             	sub    esp,0x8
c001cfd4:	68 9a b3 02 c0       	push   0xc002b39a
c001cfd9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001cfe0:	50                   	push   eax
c001cfe1:	e8 8a 38 fe ff       	call   c0000870 <strcat>
c001cfe6:	83 c4 10             	add    esp,0x10
c001cfe9:	83 ec 04             	sub    esp,0x4
c001cfec:	6a 01                	push   0x1
c001cfee:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001cff5:	50                   	push   eax
c001cff6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cffa:	50                   	push   eax
c001cffb:	e8 81 6e fe ff       	call   c0003e81 <f_open>
c001d000:	83 c4 10             	add    esp,0x10
c001d003:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001d00a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001d011:	85 c0                	test   eax,eax
c001d013:	74 0b                	je     c001d020 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001d015:	78 31                	js     c001d048 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001d017:	83 e8 04             	sub    eax,0x4
c001d01a:	83 f8 01             	cmp    eax,0x1
c001d01d:	77 29                	ja     c001d048 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001d01f:	90                   	nop
c001d020:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001d028:	83 ec 0c             	sub    esp,0xc
c001d02b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d02f:	50                   	push   eax
c001d030:	e8 fc 75 fe ff       	call   c0004631 <f_close>
c001d035:	83 c4 10             	add    esp,0x10
c001d038:	90                   	nop
c001d039:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001d041:	85 c0                	test   eax,eax
c001d043:	74 43                	je     c001d088 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001d045:	eb 31                	jmp    c001d078 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001d047:	90                   	nop
c001d048:	83 ec 0c             	sub    esp,0xc
c001d04b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001d052:	e8 9d 2e ff ff       	call   c000fef4 <rfree>
c001d057:	83 c4 10             	add    esp,0x10
c001d05a:	83 ec 04             	sub    esp,0x4
c001d05d:	6a 00                	push   0x0
c001d05f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001d066:	50                   	push   eax
c001d067:	6a 00                	push   0x0
c001d069:	e8 b1 6d fe ff       	call   c0003e1f <f_mount>
c001d06e:	83 c4 10             	add    esp,0x10
c001d071:	b0 00                	mov    al,0x0
c001d073:	eb 1b                	jmp    c001d090 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001d075:	8d 76 00             	lea    esi,[esi+0x0]
c001d078:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001d07d:	83 c0 01             	add    eax,0x1
c001d080:	a3 80 54 03 c0       	mov    ds:0xc0035480,eax
c001d085:	8d 76 00             	lea    esi,[esi+0x0]
c001d088:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001d08f:	90                   	nop
c001d090:	81 c4 4c 03 00 00    	add    esp,0x34c
c001d096:	c3                   	ret    
c001d097:	90                   	nop

c001d098 <FAT::allocateSwapfile(char const*, int)>:
c001d098:	55                   	push   ebp
c001d099:	57                   	push   edi
c001d09a:	56                   	push   esi
c001d09b:	53                   	push   ebx
c001d09c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001d0a2:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001d0ad:	83 ec 0c             	sub    esp,0xc
c001d0b0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001d0b7:	e8 18 2e ff ff       	call   c000fed4 <malloc>
c001d0bc:	83 c4 10             	add    esp,0x10
c001d0bf:	89 c7                	mov    edi,eax
c001d0c1:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001d0c6:	83 ec 04             	sub    esp,0x4
c001d0c9:	50                   	push   eax
c001d0ca:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001d0d1:	57                   	push   edi
c001d0d2:	e8 fd b8 fe ff       	call   c00089d4 <File::File(char const*, Process*)>
c001d0d7:	83 c4 10             	add    esp,0x10
c001d0da:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001d0e1:	83 ec 04             	sub    esp,0x4
c001d0e4:	8d 44 24 13          	lea    eax,[esp+0x13]
c001d0e8:	50                   	push   eax
c001d0e9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d0ed:	50                   	push   eax
c001d0ee:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001d0f5:	e8 fa bb fe ff       	call   c0008cf4 <File::stat(unsigned long long*, bool*)>
c001d0fa:	83 c4 10             	add    esp,0x10
c001d0fd:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001d104:	c1 e0 14             	shl    eax,0x14
c001d107:	89 c7                	mov    edi,eax
c001d109:	89 c5                	mov    ebp,eax
c001d10b:	c1 fd 1f             	sar    ebp,0x1f
c001d10e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d112:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d116:	89 f9                	mov    ecx,edi
c001d118:	31 c1                	xor    ecx,eax
c001d11a:	89 cb                	mov    ebx,ecx
c001d11c:	89 e9                	mov    ecx,ebp
c001d11e:	31 d1                	xor    ecx,edx
c001d120:	89 ce                	mov    esi,ecx
c001d122:	89 f0                	mov    eax,esi
c001d124:	09 d8                	or     eax,ebx
c001d126:	0f 84 9c 00 00 00    	je     c001d1c8 <FAT::allocateSwapfile(char const*, int)+0x130>
c001d12c:	83 ec 0c             	sub    esp,0xc
c001d12f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001d136:	e8 85 ba fe ff       	call   c0008bc0 <File::unlink()>
c001d13b:	83 c4 10             	add    esp,0x10
c001d13e:	83 ec 08             	sub    esp,0x8
c001d141:	6a 12                	push   0x12
c001d143:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001d14a:	e8 a3 b8 fe ff       	call   c00089f2 <File::open(FileOpenMode)>
c001d14f:	83 c4 10             	add    esp,0x10
c001d152:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001d159:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001d15f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001d166:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001d16d:	c1 e0 14             	shl    eax,0x14
c001d170:	83 ec 04             	sub    esp,0x4
c001d173:	6a 01                	push   0x1
c001d175:	50                   	push   eax
c001d176:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001d17d:	e8 36 83 fe ff       	call   c00054b8 <f_expand>
c001d182:	83 c4 10             	add    esp,0x10
c001d185:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001d18c:	8b 00                	mov    eax,DWORD PTR [eax]
c001d18e:	83 c0 10             	add    eax,0x10
c001d191:	8b 00                	mov    eax,DWORD PTR [eax]
c001d193:	83 ec 0c             	sub    esp,0xc
c001d196:	8d 54 24 24          	lea    edx,[esp+0x24]
c001d19a:	52                   	push   edx
c001d19b:	8d 54 24 30          	lea    edx,[esp+0x30]
c001d19f:	52                   	push   edx
c001d1a0:	6a 00                	push   0x0
c001d1a2:	68 00 04 00 00       	push   0x400
c001d1a7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001d1ae:	ff d0                	call   eax
c001d1b0:	83 c4 20             	add    esp,0x20
c001d1b3:	83 ec 0c             	sub    esp,0xc
c001d1b6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001d1bd:	e8 8e b8 fe ff       	call   c0008a50 <File::close()>
c001d1c2:	83 c4 10             	add    esp,0x10
c001d1c5:	8d 76 00             	lea    esi,[esi+0x0]
c001d1c8:	83 ec 08             	sub    esp,0x8
c001d1cb:	6a 01                	push   0x1
c001d1cd:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001d1d4:	e8 19 b8 fe ff       	call   c00089f2 <File::open(FileOpenMode)>
c001d1d9:	83 c4 10             	add    esp,0x10
c001d1dc:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001d1e3:	8b 00                	mov    eax,DWORD PTR [eax]
c001d1e5:	83 c0 0c             	add    eax,0xc
c001d1e8:	8b 00                	mov    eax,DWORD PTR [eax]
c001d1ea:	83 ec 0c             	sub    esp,0xc
c001d1ed:	8d 54 24 24          	lea    edx,[esp+0x24]
c001d1f1:	52                   	push   edx
c001d1f2:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001d1f6:	52                   	push   edx
c001d1f7:	6a 00                	push   0x0
c001d1f9:	6a 04                	push   0x4
c001d1fb:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001d202:	ff d0                	call   eax
c001d204:	83 c4 20             	add    esp,0x20
c001d207:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001d20e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001d214:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001d21b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001d222:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001d225:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001d22c:	83 ec 0c             	sub    esp,0xc
c001d22f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001d236:	e8 15 b8 fe ff       	call   c0008a50 <File::close()>
c001d23b:	83 c4 10             	add    esp,0x10
c001d23e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001d245:	ba 00 00 00 00       	mov    edx,0x0
c001d24a:	81 c4 3c 04 00 00    	add    esp,0x43c
c001d250:	5b                   	pop    ebx
c001d251:	5e                   	pop    esi
c001d252:	5f                   	pop    edi
c001d253:	5d                   	pop    ebp
c001d254:	c3                   	ret    
c001d255:	90                   	nop
c001d256:	66 90                	xchg   ax,ax

c001d258 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001d258:	57                   	push   edi
c001d259:	56                   	push   esi
c001d25a:	53                   	push   ebx
c001d25b:	81 ec 50 02 00 00    	sub    esp,0x250
c001d261:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001d269:	74 0d                	je     c001d278 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001d26b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001d273:	75 0f                	jne    c001d284 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001d275:	8d 76 00             	lea    esi,[esi+0x0]
c001d278:	b8 04 00 00 00       	mov    eax,0x4
c001d27d:	e9 3a 01 00 00       	jmp    c001d3bc <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001d282:	66 90                	xchg   ax,ax
c001d284:	83 ec 08             	sub    esp,0x8
c001d287:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001d28e:	50                   	push   eax
c001d28f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001d296:	e8 62 76 fe ff       	call   c00048fd <f_readdir>
c001d29b:	83 c4 10             	add    esp,0x10
c001d29e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001d2a5:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001d2ac:	83 ec 0c             	sub    esp,0xc
c001d2af:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001d2b6:	83 c0 16             	add    eax,0x16
c001d2b9:	50                   	push   eax
c001d2ba:	e8 c1 32 fe ff       	call   c0000580 <strlen>
c001d2bf:	83 c4 10             	add    esp,0x10
c001d2c2:	ba 00 00 00 00       	mov    edx,0x0
c001d2c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2cb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001d2cf:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001d2d6:	0f b6 c0             	movzx  eax,al
c001d2d9:	83 e0 10             	and    eax,0x10
c001d2dc:	74 0a                	je     c001d2e8 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001d2de:	b8 02 00 00 00       	mov    eax,0x2
c001d2e3:	eb 0b                	jmp    c001d2f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001d2e5:	8d 76 00             	lea    esi,[esi+0x0]
c001d2e8:	b8 01 00 00 00       	mov    eax,0x1
c001d2ed:	8d 76 00             	lea    esi,[esi+0x0]
c001d2f0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d2f4:	83 ec 08             	sub    esp,0x8
c001d2f7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001d2fe:	83 c0 16             	add    eax,0x16
c001d301:	50                   	push   eax
c001d302:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d306:	83 c0 10             	add    eax,0x10
c001d309:	50                   	push   eax
c001d30a:	e8 41 33 fe ff       	call   c0000650 <strcpy>
c001d30f:	83 c4 10             	add    esp,0x10
c001d312:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001d319:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001d320:	8d 44 24 08          	lea    eax,[esp+0x8]
c001d324:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001d32b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001d332:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001d339:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001d340:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001d347:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001d34e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001d355:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001d35c:	89 c6                	mov    esi,eax
c001d35e:	89 d7                	mov    edi,edx
c001d360:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d362:	89 c8                	mov    eax,ecx
c001d364:	89 fa                	mov    edx,edi
c001d366:	89 f3                	mov    ebx,esi
c001d368:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001d36f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001d376:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001d37d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001d384:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001d38a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001d391:	0f be c0             	movsx  eax,al
c001d394:	85 c0                	test   eax,eax
c001d396:	75 08                	jne    c001d3a0 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001d398:	b8 07 00 00 00       	mov    eax,0x7
c001d39d:	eb 1d                	jmp    c001d3bc <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001d39f:	90                   	nop
c001d3a0:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001d3a7:	85 c0                	test   eax,eax
c001d3a9:	75 09                	jne    c001d3b4 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001d3ab:	b8 00 00 00 00       	mov    eax,0x0
c001d3b0:	eb 0a                	jmp    c001d3bc <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001d3b2:	66 90                	xchg   ax,ax
c001d3b4:	b8 01 00 00 00       	mov    eax,0x1
c001d3b9:	8d 76 00             	lea    esi,[esi+0x0]
c001d3bc:	81 c4 50 02 00 00    	add    esp,0x250
c001d3c2:	5b                   	pop    ebx
c001d3c3:	5e                   	pop    esi
c001d3c4:	5f                   	pop    edi
c001d3c5:	c3                   	ret    
c001d3c6:	66 90                	xchg   ax,ax

c001d3c8 <FAT::read(void*, unsigned long, void*, int*)>:
c001d3c8:	83 ec 1c             	sub    esp,0x1c
c001d3cb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001d3d0:	74 0a                	je     c001d3dc <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001d3d2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001d3d7:	75 0b                	jne    c001d3e4 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001d3d9:	8d 76 00             	lea    esi,[esi+0x0]
c001d3dc:	b8 04 00 00 00       	mov    eax,0x4
c001d3e1:	eb 41                	jmp    c001d424 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001d3e3:	90                   	nop
c001d3e4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001d3e8:	50                   	push   eax
c001d3e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d3ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d3f1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d3f5:	e8 4a 6d fe ff       	call   c0004144 <f_read>
c001d3fa:	83 c4 10             	add    esp,0x10
c001d3fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d401:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d405:	89 c2                	mov    edx,eax
c001d407:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d40b:	89 10                	mov    DWORD PTR [eax],edx
c001d40d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d411:	85 c0                	test   eax,eax
c001d413:	75 07                	jne    c001d41c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001d415:	b8 00 00 00 00       	mov    eax,0x0
c001d41a:	eb 08                	jmp    c001d424 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001d41c:	b8 01 00 00 00       	mov    eax,0x1
c001d421:	8d 76 00             	lea    esi,[esi+0x0]
c001d424:	83 c4 1c             	add    esp,0x1c
c001d427:	c3                   	ret    

c001d428 <FAT::write(void*, unsigned long, void*, int*)>:
c001d428:	83 ec 1c             	sub    esp,0x1c
c001d42b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001d430:	74 0a                	je     c001d43c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001d432:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001d437:	75 0b                	jne    c001d444 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001d439:	8d 76 00             	lea    esi,[esi+0x0]
c001d43c:	b8 04 00 00 00       	mov    eax,0x4
c001d441:	eb 41                	jmp    c001d484 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001d443:	90                   	nop
c001d444:	8d 44 24 08          	lea    eax,[esp+0x8]
c001d448:	50                   	push   eax
c001d449:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d44d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d451:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d455:	e8 cb 6e fe ff       	call   c0004325 <f_write>
c001d45a:	83 c4 10             	add    esp,0x10
c001d45d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d461:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d465:	89 c2                	mov    edx,eax
c001d467:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d46b:	89 10                	mov    DWORD PTR [eax],edx
c001d46d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d471:	85 c0                	test   eax,eax
c001d473:	75 07                	jne    c001d47c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001d475:	b8 00 00 00 00       	mov    eax,0x0
c001d47a:	eb 08                	jmp    c001d484 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001d47c:	b8 01 00 00 00       	mov    eax,0x1
c001d481:	8d 76 00             	lea    esi,[esi+0x0]
c001d484:	83 c4 1c             	add    esp,0x1c
c001d487:	c3                   	ret    

c001d488 <FAT::close(void*)>:
c001d488:	83 ec 1c             	sub    esp,0x1c
c001d48b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001d490:	75 0a                	jne    c001d49c <FAT::close(void*)+0x14>
c001d492:	b8 04 00 00 00       	mov    eax,0x4
c001d497:	eb 3f                	jmp    c001d4d8 <FAT::close(void*)+0x50>
c001d499:	8d 76 00             	lea    esi,[esi+0x0]
c001d49c:	83 ec 0c             	sub    esp,0xc
c001d49f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d4a3:	e8 89 71 fe ff       	call   c0004631 <f_close>
c001d4a8:	83 c4 10             	add    esp,0x10
c001d4ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d4af:	83 ec 0c             	sub    esp,0xc
c001d4b2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d4b6:	e8 29 2a ff ff       	call   c000fee4 <free>
c001d4bb:	83 c4 10             	add    esp,0x10
c001d4be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4c2:	85 c0                	test   eax,eax
c001d4c4:	75 0a                	jne    c001d4d0 <FAT::close(void*)+0x48>
c001d4c6:	b8 00 00 00 00       	mov    eax,0x0
c001d4cb:	eb 0b                	jmp    c001d4d8 <FAT::close(void*)+0x50>
c001d4cd:	8d 76 00             	lea    esi,[esi+0x0]
c001d4d0:	b8 01 00 00 00       	mov    eax,0x1
c001d4d5:	8d 76 00             	lea    esi,[esi+0x0]
c001d4d8:	83 c4 1c             	add    esp,0x1c
c001d4db:	c3                   	ret    

c001d4dc <FAT::closeDir(void*)>:
c001d4dc:	83 ec 1c             	sub    esp,0x1c
c001d4df:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001d4e4:	75 0a                	jne    c001d4f0 <FAT::closeDir(void*)+0x14>
c001d4e6:	b8 04 00 00 00       	mov    eax,0x4
c001d4eb:	eb 3f                	jmp    c001d52c <FAT::closeDir(void*)+0x50>
c001d4ed:	8d 76 00             	lea    esi,[esi+0x0]
c001d4f0:	83 ec 0c             	sub    esp,0xc
c001d4f3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d4f7:	e8 df 73 fe ff       	call   c00048db <f_closedir>
c001d4fc:	83 c4 10             	add    esp,0x10
c001d4ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d503:	83 ec 0c             	sub    esp,0xc
c001d506:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d50a:	e8 d5 29 ff ff       	call   c000fee4 <free>
c001d50f:	83 c4 10             	add    esp,0x10
c001d512:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d516:	85 c0                	test   eax,eax
c001d518:	75 0a                	jne    c001d524 <FAT::closeDir(void*)+0x48>
c001d51a:	b8 00 00 00 00       	mov    eax,0x0
c001d51f:	eb 0b                	jmp    c001d52c <FAT::closeDir(void*)+0x50>
c001d521:	8d 76 00             	lea    esi,[esi+0x0]
c001d524:	b8 01 00 00 00       	mov    eax,0x1
c001d529:	8d 76 00             	lea    esi,[esi+0x0]
c001d52c:	83 c4 1c             	add    esp,0x1c
c001d52f:	c3                   	ret    

c001d530 <FAT::truncate(void*, unsigned long long)>:
c001d530:	83 ec 2c             	sub    esp,0x2c
c001d533:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d537:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d53b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d53f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d543:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001d548:	75 0a                	jne    c001d554 <FAT::truncate(void*, unsigned long long)+0x24>
c001d54a:	b8 04 00 00 00       	mov    eax,0x4
c001d54f:	eb 47                	jmp    c001d598 <FAT::truncate(void*, unsigned long long)+0x68>
c001d551:	8d 76 00             	lea    esi,[esi+0x0]
c001d554:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d558:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d55b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d55f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001d567:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d56b:	83 ec 08             	sub    esp,0x8
c001d56e:	50                   	push   eax
c001d56f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d573:	e8 e8 70 fe ff       	call   c0004660 <f_lseek>
c001d578:	83 c4 10             	add    esp,0x10
c001d57b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d57f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d583:	85 c0                	test   eax,eax
c001d585:	75 09                	jne    c001d590 <FAT::truncate(void*, unsigned long long)+0x60>
c001d587:	b8 00 00 00 00       	mov    eax,0x0
c001d58c:	eb 0a                	jmp    c001d598 <FAT::truncate(void*, unsigned long long)+0x68>
c001d58e:	66 90                	xchg   ax,ax
c001d590:	b8 01 00 00 00       	mov    eax,0x1
c001d595:	8d 76 00             	lea    esi,[esi+0x0]
c001d598:	83 c4 2c             	add    esp,0x2c
c001d59b:	c3                   	ret    

c001d59c <FAT::seek(void*, unsigned long long)>:
c001d59c:	83 ec 2c             	sub    esp,0x2c
c001d59f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d5a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d5a7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d5ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d5af:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001d5b4:	75 0a                	jne    c001d5c0 <FAT::seek(void*, unsigned long long)+0x24>
c001d5b6:	b8 04 00 00 00       	mov    eax,0x4
c001d5bb:	eb 33                	jmp    c001d5f0 <FAT::seek(void*, unsigned long long)+0x54>
c001d5bd:	8d 76 00             	lea    esi,[esi+0x0]
c001d5c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d5c4:	83 ec 08             	sub    esp,0x8
c001d5c7:	50                   	push   eax
c001d5c8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d5cc:	e8 8f 70 fe ff       	call   c0004660 <f_lseek>
c001d5d1:	83 c4 10             	add    esp,0x10
c001d5d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d5d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d5dc:	85 c0                	test   eax,eax
c001d5de:	75 08                	jne    c001d5e8 <FAT::seek(void*, unsigned long long)+0x4c>
c001d5e0:	b8 00 00 00 00       	mov    eax,0x0
c001d5e5:	eb 09                	jmp    c001d5f0 <FAT::seek(void*, unsigned long long)+0x54>
c001d5e7:	90                   	nop
c001d5e8:	b8 01 00 00 00       	mov    eax,0x1
c001d5ed:	8d 76 00             	lea    esi,[esi+0x0]
c001d5f0:	83 c4 2c             	add    esp,0x2c
c001d5f3:	c3                   	ret    

c001d5f4 <fatWrapperReadDisk>:
c001d5f4:	53                   	push   ebx
c001d5f5:	83 ec 18             	sub    esp,0x18
c001d5f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5fc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d600:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d605:	8b 0c 85 e0 2a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcd520]
c001d60c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d610:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d614:	ba 00 00 00 00       	mov    edx,0x0
c001d619:	83 ec 0c             	sub    esp,0xc
c001d61c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d620:	53                   	push   ebx
c001d621:	52                   	push   edx
c001d622:	50                   	push   eax
c001d623:	51                   	push   ecx
c001d624:	e8 39 dc fe ff       	call   c000b262 <LogicalDisk::read(unsigned long long, int, void*)>
c001d629:	83 c4 20             	add    esp,0x20
c001d62c:	83 c4 18             	add    esp,0x18
c001d62f:	5b                   	pop    ebx
c001d630:	c3                   	ret    
c001d631:	8d 76 00             	lea    esi,[esi+0x0]

c001d634 <fatWrapperWriteDisk>:
c001d634:	53                   	push   ebx
c001d635:	83 ec 18             	sub    esp,0x18
c001d638:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d63c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d640:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d645:	8b 0c 85 e0 2a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcd520]
c001d64c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d650:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d654:	ba 00 00 00 00       	mov    edx,0x0
c001d659:	83 ec 0c             	sub    esp,0xc
c001d65c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d660:	53                   	push   ebx
c001d661:	52                   	push   edx
c001d662:	50                   	push   eax
c001d663:	51                   	push   ecx
c001d664:	e8 65 dc fe ff       	call   c000b2ce <LogicalDisk::write(unsigned long long, int, void*)>
c001d669:	83 c4 20             	add    esp,0x20
c001d66c:	83 c4 18             	add    esp,0x18
c001d66f:	5b                   	pop    ebx
c001d670:	c3                   	ret    
c001d671:	8d 76 00             	lea    esi,[esi+0x0]

c001d674 <fatWrapperIoctl>:
c001d674:	53                   	push   ebx
c001d675:	83 ec 28             	sub    esp,0x28
c001d678:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d67c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d680:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d684:	88 d0                	mov    al,dl
c001d686:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d68a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d68f:	83 f8 02             	cmp    eax,0x2
c001d692:	75 34                	jne    c001d6c8 <fatWrapperIoctl+0x54>
c001d694:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d698:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d69c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d6a1:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c001d6a8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001d6ae:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d6b4:	89 c2                	mov    edx,eax
c001d6b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d6ba:	66 89 10             	mov    WORD PTR [eax],dx
c001d6bd:	b8 00 00 00 00       	mov    eax,0x0
c001d6c2:	e9 c5 00 00 00       	jmp    c001d78c <fatWrapperIoctl+0x118>
c001d6c7:	90                   	nop
c001d6c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d6cd:	83 f8 01             	cmp    eax,0x1
c001d6d0:	75 6a                	jne    c001d73c <fatWrapperIoctl+0xc8>
c001d6d2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d6d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d6da:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d6df:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c001d6e6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001d6ec:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001d6f2:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001d6f8:	89 c8                	mov    eax,ecx
c001d6fa:	89 da                	mov    edx,ebx
c001d6fc:	0f a4 c2 0a          	shld   edx,eax,0xa
c001d700:	c1 e0 0a             	shl    eax,0xa
c001d703:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001d708:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c001d70f:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001d715:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001d71b:	89 cb                	mov    ebx,ecx
c001d71d:	c1 fb 1f             	sar    ebx,0x1f
c001d720:	53                   	push   ebx
c001d721:	51                   	push   ecx
c001d722:	52                   	push   edx
c001d723:	50                   	push   eax
c001d724:	e8 7b 55 00 00       	call   c0022ca4 <__udivdi3>
c001d729:	83 c4 10             	add    esp,0x10
c001d72c:	89 c2                	mov    edx,eax
c001d72e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d732:	89 10                	mov    DWORD PTR [eax],edx
c001d734:	b8 00 00 00 00       	mov    eax,0x0
c001d739:	eb 51                	jmp    c001d78c <fatWrapperIoctl+0x118>
c001d73b:	90                   	nop
c001d73c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d741:	85 c0                	test   eax,eax
c001d743:	75 07                	jne    c001d74c <fatWrapperIoctl+0xd8>
c001d745:	b8 00 00 00 00       	mov    eax,0x0
c001d74a:	eb 40                	jmp    c001d78c <fatWrapperIoctl+0x118>
c001d74c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d751:	83 f8 03             	cmp    eax,0x3
c001d754:	75 1a                	jne    c001d770 <fatWrapperIoctl+0xfc>
c001d756:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d75a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d75e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d762:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001d768:	b8 00 00 00 00       	mov    eax,0x0
c001d76d:	eb 1d                	jmp    c001d78c <fatWrapperIoctl+0x118>
c001d76f:	90                   	nop
c001d770:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d775:	83 f8 04             	cmp    eax,0x4
c001d778:	75 0a                	jne    c001d784 <fatWrapperIoctl+0x110>
c001d77a:	b8 00 00 00 00       	mov    eax,0x0
c001d77f:	eb 0b                	jmp    c001d78c <fatWrapperIoctl+0x118>
c001d781:	8d 76 00             	lea    esi,[esi+0x0]
c001d784:	b8 04 00 00 00       	mov    eax,0x4
c001d789:	8d 76 00             	lea    esi,[esi+0x0]
c001d78c:	83 c4 28             	add    esp,0x28
c001d78f:	5b                   	pop    ebx
c001d790:	c3                   	ret    
c001d791:	90                   	nop
c001d792:	66 90                	xchg   ax,ax

c001d794 <FAT::FAT()>:
c001d794:	83 ec 1c             	sub    esp,0x1c
c001d797:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d79b:	83 ec 0c             	sub    esp,0xc
c001d79e:	50                   	push   eax
c001d79f:	e8 5a ae fe ff       	call   c00085fe <Filesystem::Filesystem()>
c001d7a4:	83 c4 10             	add    esp,0x10
c001d7a7:	ba b0 b3 02 c0       	mov    edx,0xc002b3b0
c001d7ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7b0:	89 10                	mov    DWORD PTR [eax],edx
c001d7b2:	c7 05 80 54 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0035480,0x0
c001d7bc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d7c4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001d7c9:	7f 19                	jg     c001d7e4 <FAT::FAT()+0x50>
c001d7cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d7cf:	c7 04 85 a0 54 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcab60],0xffffffff
c001d7da:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001d7df:	eb e3                	jmp    c001d7c4 <FAT::FAT()+0x30>
c001d7e1:	8d 76 00             	lea    esi,[esi+0x0]
c001d7e4:	90                   	nop
c001d7e5:	83 c4 1c             	add    esp,0x1c
c001d7e8:	c3                   	ret    
c001d7e9:	90                   	nop
c001d7ea:	66 90                	xchg   ax,ax

c001d7ec <FAT::fixFilepath(char*)>:
c001d7ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d7f0:	8a 00                	mov    al,BYTE PTR [eax]
c001d7f2:	0f be c0             	movsx  eax,al
c001d7f5:	83 f8 40             	cmp    eax,0x40
c001d7f8:	7e 2e                	jle    c001d828 <FAT::fixFilepath(char*)+0x3c>
c001d7fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d7fe:	8a 00                	mov    al,BYTE PTR [eax]
c001d800:	83 e8 41             	sub    eax,0x41
c001d803:	88 c2                	mov    dl,al
c001d805:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d809:	88 10                	mov    BYTE PTR [eax],dl
c001d80b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d80f:	8a 00                	mov    al,BYTE PTR [eax]
c001d811:	0f be c0             	movsx  eax,al
c001d814:	8b 04 85 a0 54 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcab60]
c001d81b:	83 c0 30             	add    eax,0x30
c001d81e:	88 c2                	mov    dl,al
c001d820:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d824:	88 10                	mov    BYTE PTR [eax],dl
c001d826:	66 90                	xchg   ax,ax
c001d828:	90                   	nop
c001d829:	c3                   	ret    
c001d82a:	66 90                	xchg   ax,ax

c001d82c <FAT::open(char const*, void**, FileOpenMode)>:
c001d82c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d832:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001d83a:	74 0c                	je     c001d848 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001d83c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001d844:	75 0e                	jne    c001d854 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001d846:	66 90                	xchg   ax,ax
c001d848:	b8 04 00 00 00       	mov    eax,0x4
c001d84d:	e9 46 01 00 00       	jmp    c001d998 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001d852:	66 90                	xchg   ax,ax
c001d854:	83 ec 08             	sub    esp,0x8
c001d857:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001d85e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d862:	50                   	push   eax
c001d863:	e8 e8 2d fe ff       	call   c0000650 <strcpy>
c001d868:	83 c4 10             	add    esp,0x10
c001d86b:	83 ec 08             	sub    esp,0x8
c001d86e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001d872:	50                   	push   eax
c001d873:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001d87a:	e8 6d ff ff ff       	call   c001d7ec <FAT::fixFilepath(char*)>
c001d87f:	83 c4 10             	add    esp,0x10
c001d882:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001d88a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001d891:	83 e0 01             	and    eax,0x1
c001d894:	74 12                	je     c001d8a8 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001d896:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001d89d:	83 c8 01             	or     eax,0x1
c001d8a0:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001d8a7:	90                   	nop
c001d8a8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001d8af:	83 e0 04             	and    eax,0x4
c001d8b2:	74 24                	je     c001d8d8 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001d8b4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001d8bb:	83 c8 30             	or     eax,0x30
c001d8be:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001d8c5:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001d8cc:	83 c8 02             	or     eax,0x2
c001d8cf:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001d8d6:	66 90                	xchg   ax,ax
c001d8d8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001d8df:	83 e0 02             	and    eax,0x2
c001d8e2:	74 14                	je     c001d8f8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001d8e4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001d8eb:	83 c8 02             	or     eax,0x2
c001d8ee:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001d8f5:	8d 76 00             	lea    esi,[esi+0x0]
c001d8f8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001d8ff:	83 e0 08             	and    eax,0x8
c001d902:	74 14                	je     c001d918 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001d904:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001d90b:	83 c8 04             	or     eax,0x4
c001d90e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001d915:	8d 76 00             	lea    esi,[esi+0x0]
c001d918:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001d91f:	83 e0 10             	and    eax,0x10
c001d922:	74 14                	je     c001d938 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001d924:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001d92b:	83 c8 08             	or     eax,0x8
c001d92e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001d935:	8d 76 00             	lea    esi,[esi+0x0]
c001d938:	83 ec 0c             	sub    esp,0xc
c001d93b:	68 28 02 00 00       	push   0x228
c001d940:	e8 8f 25 ff ff       	call   c000fed4 <malloc>
c001d945:	83 c4 10             	add    esp,0x10
c001d948:	89 c2                	mov    edx,eax
c001d94a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001d951:	89 10                	mov    DWORD PTR [eax],edx
c001d953:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001d95b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001d962:	8b 00                	mov    eax,DWORD PTR [eax]
c001d964:	83 ec 04             	sub    esp,0x4
c001d967:	52                   	push   edx
c001d968:	8d 54 24 10          	lea    edx,[esp+0x10]
c001d96c:	52                   	push   edx
c001d96d:	50                   	push   eax
c001d96e:	e8 0e 65 fe ff       	call   c0003e81 <f_open>
c001d973:	83 c4 10             	add    esp,0x10
c001d976:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001d97d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001d985:	74 09                	je     c001d990 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001d987:	b8 01 00 00 00       	mov    eax,0x1
c001d98c:	eb 0a                	jmp    c001d998 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001d98e:	66 90                	xchg   ax,ax
c001d990:	b8 00 00 00 00       	mov    eax,0x0
c001d995:	8d 76 00             	lea    esi,[esi+0x0]
c001d998:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d99e:	c3                   	ret    
c001d99f:	90                   	nop

c001d9a0 <FAT::openDir(char const*, void**)>:
c001d9a0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d9a6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001d9ae:	74 0c                	je     c001d9bc <FAT::openDir(char const*, void**)+0x1c>
c001d9b0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001d9b8:	75 0e                	jne    c001d9c8 <FAT::openDir(char const*, void**)+0x28>
c001d9ba:	66 90                	xchg   ax,ax
c001d9bc:	b8 04 00 00 00       	mov    eax,0x4
c001d9c1:	e9 82 00 00 00       	jmp    c001da48 <FAT::openDir(char const*, void**)+0xa8>
c001d9c6:	66 90                	xchg   ax,ax
c001d9c8:	83 ec 08             	sub    esp,0x8
c001d9cb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001d9d2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d9d6:	50                   	push   eax
c001d9d7:	e8 74 2c fe ff       	call   c0000650 <strcpy>
c001d9dc:	83 c4 10             	add    esp,0x10
c001d9df:	83 ec 08             	sub    esp,0x8
c001d9e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d9e6:	50                   	push   eax
c001d9e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001d9ee:	e8 f9 fd ff ff       	call   c001d7ec <FAT::fixFilepath(char*)>
c001d9f3:	83 c4 10             	add    esp,0x10
c001d9f6:	83 ec 0c             	sub    esp,0xc
c001d9f9:	6a 30                	push   0x30
c001d9fb:	e8 d4 24 ff ff       	call   c000fed4 <malloc>
c001da00:	83 c4 10             	add    esp,0x10
c001da03:	89 c2                	mov    edx,eax
c001da05:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001da0c:	89 10                	mov    DWORD PTR [eax],edx
c001da0e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001da15:	8b 00                	mov    eax,DWORD PTR [eax]
c001da17:	83 ec 08             	sub    esp,0x8
c001da1a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001da1e:	52                   	push   edx
c001da1f:	50                   	push   eax
c001da20:	e8 eb 6d fe ff       	call   c0004810 <f_opendir>
c001da25:	83 c4 10             	add    esp,0x10
c001da28:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001da2f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001da37:	74 07                	je     c001da40 <FAT::openDir(char const*, void**)+0xa0>
c001da39:	b8 01 00 00 00       	mov    eax,0x1
c001da3e:	eb 08                	jmp    c001da48 <FAT::openDir(char const*, void**)+0xa8>
c001da40:	b8 00 00 00 00       	mov    eax,0x0
c001da45:	8d 76 00             	lea    esi,[esi+0x0]
c001da48:	81 c4 1c 01 00 00    	add    esp,0x11c
c001da4e:	c3                   	ret    
c001da4f:	90                   	nop

c001da50 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001da50:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001da56:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001da5e:	75 0c                	jne    c001da6c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001da60:	b8 04 00 00 00       	mov    eax,0x4
c001da65:	e9 d6 00 00 00       	jmp    c001db40 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001da6a:	66 90                	xchg   ax,ax
c001da6c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001da74:	75 0a                	jne    c001da80 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001da76:	b8 04 00 00 00       	mov    eax,0x4
c001da7b:	e9 c0 00 00 00       	jmp    c001db40 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001da80:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001da88:	75 0a                	jne    c001da94 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001da8a:	b8 04 00 00 00       	mov    eax,0x4
c001da8f:	e9 ac 00 00 00       	jmp    c001db40 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001da94:	83 ec 08             	sub    esp,0x8
c001da97:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001da9e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001daa5:	50                   	push   eax
c001daa6:	e8 a5 2b fe ff       	call   c0000650 <strcpy>
c001daab:	83 c4 10             	add    esp,0x10
c001daae:	83 ec 08             	sub    esp,0x8
c001dab1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001dab8:	50                   	push   eax
c001dab9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001dac0:	e8 27 fd ff ff       	call   c001d7ec <FAT::fixFilepath(char*)>
c001dac5:	83 c4 10             	add    esp,0x10
c001dac8:	83 ec 08             	sub    esp,0x8
c001dacb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001dacf:	50                   	push   eax
c001dad0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001dad7:	50                   	push   eax
c001dad8:	e8 b2 6e fe ff       	call   c000498f <f_stat>
c001dadd:	83 c4 10             	add    esp,0x10
c001dae0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001dae7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001daee:	85 c0                	test   eax,eax
c001daf0:	74 0a                	je     c001dafc <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001daf2:	83 f8 04             	cmp    eax,0x4
c001daf5:	74 39                	je     c001db30 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001daf7:	eb 3f                	jmp    c001db38 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001daf9:	8d 76 00             	lea    esi,[esi+0x0]
c001dafc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001db00:	0f b6 c0             	movzx  eax,al
c001db03:	83 e0 10             	and    eax,0x10
c001db06:	0f 95 c2             	setne  dl
c001db09:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001db10:	88 10                	mov    BYTE PTR [eax],dl
c001db12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db16:	ba 00 00 00 00       	mov    edx,0x0
c001db1b:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001db22:	89 01                	mov    DWORD PTR [ecx],eax
c001db24:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001db27:	b8 00 00 00 00       	mov    eax,0x0
c001db2c:	eb 12                	jmp    c001db40 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001db2e:	66 90                	xchg   ax,ax
c001db30:	b8 02 00 00 00       	mov    eax,0x2
c001db35:	eb 09                	jmp    c001db40 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001db37:	90                   	nop
c001db38:	b8 01 00 00 00       	mov    eax,0x1
c001db3d:	8d 76 00             	lea    esi,[esi+0x0]
c001db40:	81 c4 2c 02 00 00    	add    esp,0x22c
c001db46:	c3                   	ret    
c001db47:	90                   	nop

c001db48 <FAT::unlink(char const*)>:
c001db48:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001db4e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001db56:	75 08                	jne    c001db60 <FAT::unlink(char const*)+0x18>
c001db58:	b8 04 00 00 00       	mov    eax,0x4
c001db5d:	eb 61                	jmp    c001dbc0 <FAT::unlink(char const*)+0x78>
c001db5f:	90                   	nop
c001db60:	83 ec 08             	sub    esp,0x8
c001db63:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001db6a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001db6e:	50                   	push   eax
c001db6f:	e8 dc 2a fe ff       	call   c0000650 <strcpy>
c001db74:	83 c4 10             	add    esp,0x10
c001db77:	83 ec 08             	sub    esp,0x8
c001db7a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001db7e:	50                   	push   eax
c001db7f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001db86:	e8 61 fc ff ff       	call   c001d7ec <FAT::fixFilepath(char*)>
c001db8b:	83 c4 10             	add    esp,0x10
c001db8e:	83 ec 0c             	sub    esp,0xc
c001db91:	8d 44 24 18          	lea    eax,[esp+0x18]
c001db95:	50                   	push   eax
c001db96:	e8 66 70 fe ff       	call   c0004c01 <f_unlink>
c001db9b:	83 c4 10             	add    esp,0x10
c001db9e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001dba5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001dbac:	85 c0                	test   eax,eax
c001dbae:	75 08                	jne    c001dbb8 <FAT::unlink(char const*)+0x70>
c001dbb0:	b8 00 00 00 00       	mov    eax,0x0
c001dbb5:	eb 09                	jmp    c001dbc0 <FAT::unlink(char const*)+0x78>
c001dbb7:	90                   	nop
c001dbb8:	b8 01 00 00 00       	mov    eax,0x1
c001dbbd:	8d 76 00             	lea    esi,[esi+0x0]
c001dbc0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001dbc6:	c3                   	ret    
c001dbc7:	90                   	nop

c001dbc8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001dbc8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001dbce:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001dbd5:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001dbdc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dbe0:	88 d0                	mov    al,dl
c001dbe2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001dbe6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001dbee:	75 0c                	jne    c001dbfc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001dbf0:	b8 04 00 00 00       	mov    eax,0x4
c001dbf5:	e9 7e 01 00 00       	jmp    c001dd78 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001dbfa:	66 90                	xchg   ax,ax
c001dbfc:	83 ec 08             	sub    esp,0x8
c001dbff:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001dc06:	8d 44 24 24          	lea    eax,[esp+0x24]
c001dc0a:	50                   	push   eax
c001dc0b:	e8 40 2a fe ff       	call   c0000650 <strcpy>
c001dc10:	83 c4 10             	add    esp,0x10
c001dc13:	83 ec 08             	sub    esp,0x8
c001dc16:	8d 44 24 20          	lea    eax,[esp+0x20]
c001dc1a:	50                   	push   eax
c001dc1b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001dc22:	e8 c5 fb ff ff       	call   c001d7ec <FAT::fixFilepath(char*)>
c001dc27:	83 c4 10             	add    esp,0x10
c001dc2a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001dc32:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001dc3a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001dc3f:	83 e0 01             	and    eax,0x1
c001dc42:	74 14                	je     c001dc58 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001dc44:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001dc4b:	83 c8 01             	or     eax,0x1
c001dc4e:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001dc55:	8d 76 00             	lea    esi,[esi+0x0]
c001dc58:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001dc5d:	83 e0 02             	and    eax,0x2
c001dc60:	74 12                	je     c001dc74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001dc62:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001dc69:	83 c8 20             	or     eax,0x20
c001dc6c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001dc73:	90                   	nop
c001dc74:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001dc79:	83 e0 04             	and    eax,0x4
c001dc7c:	74 12                	je     c001dc90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001dc7e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001dc85:	83 c8 04             	or     eax,0x4
c001dc88:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001dc8f:	90                   	nop
c001dc90:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001dc95:	83 e0 08             	and    eax,0x8
c001dc98:	74 12                	je     c001dcac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001dc9a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001dca1:	83 c8 02             	or     eax,0x2
c001dca4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001dcab:	90                   	nop
c001dcac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dcb1:	83 e0 01             	and    eax,0x1
c001dcb4:	74 12                	je     c001dcc8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001dcb6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001dcbd:	83 c8 01             	or     eax,0x1
c001dcc0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001dcc7:	90                   	nop
c001dcc8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dccd:	83 e0 02             	and    eax,0x2
c001dcd0:	74 12                	je     c001dce4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001dcd2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001dcd9:	83 c8 20             	or     eax,0x20
c001dcdc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001dce3:	90                   	nop
c001dce4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dce9:	83 e0 04             	and    eax,0x4
c001dcec:	74 12                	je     c001dd00 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001dcee:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001dcf5:	83 c8 04             	or     eax,0x4
c001dcf8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001dcff:	90                   	nop
c001dd00:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dd05:	83 e0 08             	and    eax,0x8
c001dd08:	74 12                	je     c001dd1c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001dd0a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001dd11:	83 c8 02             	or     eax,0x2
c001dd14:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001dd1b:	90                   	nop
c001dd1c:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001dd23:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001dd2a:	09 d0                	or     eax,edx
c001dd2c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001dd33:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001dd3b:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001dd43:	83 ec 04             	sub    esp,0x4
c001dd46:	52                   	push   edx
c001dd47:	50                   	push   eax
c001dd48:	8d 44 24 24          	lea    eax,[esp+0x24]
c001dd4c:	50                   	push   eax
c001dd4d:	e8 22 73 fe ff       	call   c0005074 <f_chmod>
c001dd52:	83 c4 10             	add    esp,0x10
c001dd55:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001dd5c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001dd63:	85 c0                	test   eax,eax
c001dd65:	75 09                	jne    c001dd70 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001dd67:	b8 00 00 00 00       	mov    eax,0x0
c001dd6c:	eb 0a                	jmp    c001dd78 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001dd6e:	66 90                	xchg   ax,ax
c001dd70:	b8 01 00 00 00       	mov    eax,0x1
c001dd75:	8d 76 00             	lea    esi,[esi+0x0]
c001dd78:	81 c4 2c 01 00 00    	add    esp,0x12c
c001dd7e:	c3                   	ret    
c001dd7f:	90                   	nop

c001dd80 <FAT::rename(char const*, char const*)>:
c001dd80:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001dd86:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001dd8e:	74 0c                	je     c001dd9c <FAT::rename(char const*, char const*)+0x1c>
c001dd90:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001dd98:	75 0e                	jne    c001dda8 <FAT::rename(char const*, char const*)+0x28>
c001dd9a:	66 90                	xchg   ax,ax
c001dd9c:	b8 04 00 00 00       	mov    eax,0x4
c001dda1:	e9 9e 00 00 00       	jmp    c001de44 <FAT::rename(char const*, char const*)+0xc4>
c001dda6:	66 90                	xchg   ax,ax
c001dda8:	83 ec 08             	sub    esp,0x8
c001ddab:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ddb2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ddb9:	50                   	push   eax
c001ddba:	e8 91 28 fe ff       	call   c0000650 <strcpy>
c001ddbf:	83 c4 10             	add    esp,0x10
c001ddc2:	83 ec 08             	sub    esp,0x8
c001ddc5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001ddcc:	50                   	push   eax
c001ddcd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ddd4:	e8 13 fa ff ff       	call   c001d7ec <FAT::fixFilepath(char*)>
c001ddd9:	83 c4 10             	add    esp,0x10
c001dddc:	83 ec 08             	sub    esp,0x8
c001dddf:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001dde6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ddea:	50                   	push   eax
c001ddeb:	e8 60 28 fe ff       	call   c0000650 <strcpy>
c001ddf0:	83 c4 10             	add    esp,0x10
c001ddf3:	83 ec 08             	sub    esp,0x8
c001ddf6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ddfa:	50                   	push   eax
c001ddfb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001de02:	e8 e5 f9 ff ff       	call   c001d7ec <FAT::fixFilepath(char*)>
c001de07:	83 c4 10             	add    esp,0x10
c001de0a:	83 ec 08             	sub    esp,0x8
c001de0d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001de11:	50                   	push   eax
c001de12:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001de19:	50                   	push   eax
c001de1a:	e8 9d 70 fe ff       	call   c0004ebc <f_rename>
c001de1f:	83 c4 10             	add    esp,0x10
c001de22:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001de29:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001de30:	85 c0                	test   eax,eax
c001de32:	75 08                	jne    c001de3c <FAT::rename(char const*, char const*)+0xbc>
c001de34:	b8 00 00 00 00       	mov    eax,0x0
c001de39:	eb 09                	jmp    c001de44 <FAT::rename(char const*, char const*)+0xc4>
c001de3b:	90                   	nop
c001de3c:	b8 01 00 00 00       	mov    eax,0x1
c001de41:	8d 76 00             	lea    esi,[esi+0x0]
c001de44:	81 c4 1c 02 00 00    	add    esp,0x21c
c001de4a:	c3                   	ret    
c001de4b:	90                   	nop

c001de4c <FAT::mkdir(char const*)>:
c001de4c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001de52:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001de5a:	75 08                	jne    c001de64 <FAT::mkdir(char const*)+0x18>
c001de5c:	b8 04 00 00 00       	mov    eax,0x4
c001de61:	eb 61                	jmp    c001dec4 <FAT::mkdir(char const*)+0x78>
c001de63:	90                   	nop
c001de64:	83 ec 08             	sub    esp,0x8
c001de67:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001de6e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001de72:	50                   	push   eax
c001de73:	e8 d8 27 fe ff       	call   c0000650 <strcpy>
c001de78:	83 c4 10             	add    esp,0x10
c001de7b:	83 ec 08             	sub    esp,0x8
c001de7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001de82:	50                   	push   eax
c001de83:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001de8a:	e8 5d f9 ff ff       	call   c001d7ec <FAT::fixFilepath(char*)>
c001de8f:	83 c4 10             	add    esp,0x10
c001de92:	83 ec 0c             	sub    esp,0xc
c001de95:	8d 44 24 18          	lea    eax,[esp+0x18]
c001de99:	50                   	push   eax
c001de9a:	e8 82 6e fe ff       	call   c0004d21 <f_mkdir>
c001de9f:	83 c4 10             	add    esp,0x10
c001dea2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001dea9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001deb0:	85 c0                	test   eax,eax
c001deb2:	75 08                	jne    c001debc <FAT::mkdir(char const*)+0x70>
c001deb4:	b8 00 00 00 00       	mov    eax,0x0
c001deb9:	eb 09                	jmp    c001dec4 <FAT::mkdir(char const*)+0x78>
c001debb:	90                   	nop
c001debc:	b8 01 00 00 00       	mov    eax,0x1
c001dec1:	8d 76 00             	lea    esi,[esi+0x0]
c001dec4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001deca:	c3                   	ret    
c001decb:	90                   	nop

c001decc <FAT::exists(char const*)>:
c001decc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ded2:	83 ec 08             	sub    esp,0x8
c001ded5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001dedc:	8d 44 24 10          	lea    eax,[esp+0x10]
c001dee0:	50                   	push   eax
c001dee1:	e8 6a 27 fe ff       	call   c0000650 <strcpy>
c001dee6:	83 c4 10             	add    esp,0x10
c001dee9:	83 ec 08             	sub    esp,0x8
c001deec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001def0:	50                   	push   eax
c001def1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001def8:	e8 ef f8 ff ff       	call   c001d7ec <FAT::fixFilepath(char*)>
c001defd:	83 c4 10             	add    esp,0x10
c001df00:	83 ec 08             	sub    esp,0x8
c001df03:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001df0a:	50                   	push   eax
c001df0b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001df0f:	50                   	push   eax
c001df10:	e8 7a 6a fe ff       	call   c000498f <f_stat>
c001df15:	83 c4 10             	add    esp,0x10
c001df18:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001df1f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001df26:	85 c0                	test   eax,eax
c001df28:	75 06                	jne    c001df30 <FAT::exists(char const*)+0x64>
c001df2a:	b0 01                	mov    al,0x1
c001df2c:	eb 06                	jmp    c001df34 <FAT::exists(char const*)+0x68>
c001df2e:	66 90                	xchg   ax,ax
c001df30:	b0 00                	mov    al,0x0
c001df32:	66 90                	xchg   ax,ax
c001df34:	81 c4 2c 02 00 00    	add    esp,0x22c
c001df3a:	c3                   	ret    
c001df3b:	90                   	nop

c001df3c <isoReadDiscSectorHelper>:
c001df3c:	83 ec 2c             	sub    esp,0x2c
c001df3f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001df43:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001df47:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001df4c:	83 e8 41             	sub    eax,0x41
c001df4f:	8b 0c 85 e0 2a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcd520]
c001df56:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001df5a:	ba 00 00 00 00       	mov    edx,0x0
c001df5f:	83 ec 0c             	sub    esp,0xc
c001df62:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001df66:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df6a:	52                   	push   edx
c001df6b:	50                   	push   eax
c001df6c:	51                   	push   ecx
c001df6d:	e8 f0 d2 fe ff       	call   c000b262 <LogicalDisk::read(unsigned long long, int, void*)>
c001df72:	83 c4 20             	add    esp,0x20
c001df75:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001df79:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001df7e:	74 0c                	je     c001df8c <isoReadDiscSectorHelper+0x50>
c001df80:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001df84:	c1 e0 0b             	shl    eax,0xb
c001df87:	eb 0b                	jmp    c001df94 <isoReadDiscSectorHelper+0x58>
c001df89:	8d 76 00             	lea    esi,[esi+0x0]
c001df8c:	b8 00 00 00 00       	mov    eax,0x0
c001df91:	8d 76 00             	lea    esi,[esi+0x0]
c001df94:	83 c4 2c             	add    esp,0x2c
c001df97:	c3                   	ret    

c001df98 <iso_kprintf>:
c001df98:	83 ec 0c             	sub    esp,0xc
c001df9b:	83 ec 08             	sub    esp,0x8
c001df9e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dfa2:	68 14 b0 02 c0       	push   0xc002b014
c001dfa7:	e8 ba 8f fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001dfac:	83 c4 10             	add    esp,0x10
c001dfaf:	90                   	nop
c001dfb0:	83 c4 0c             	add    esp,0xc
c001dfb3:	c3                   	ret    

c001dfb4 <iso_kprintfd>:
c001dfb4:	83 ec 0c             	sub    esp,0xc
c001dfb7:	83 ec 08             	sub    esp,0x8
c001dfba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dfbe:	68 d2 a5 02 c0       	push   0xc002a5d2
c001dfc3:	e8 9e 8f fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001dfc8:	83 c4 10             	add    esp,0x10
c001dfcb:	90                   	nop
c001dfcc:	83 c4 0c             	add    esp,0xc
c001dfcf:	c3                   	ret    

c001dfd0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001dfd0:	b8 08 00 00 00       	mov    eax,0x8
c001dfd5:	c3                   	ret    

c001dfd6 <ISO9660::truncate(void*, unsigned long long)>:
c001dfd6:	b8 01 00 00 00       	mov    eax,0x1
c001dfdb:	c3                   	ret    

c001dfdc <ISO9660::getName()>:
c001dfdc:	b8 14 b4 02 c0       	mov    eax,0xc002b414
c001dfe1:	c3                   	ret    

c001dfe2 <ISO9660::closeDir(void*)>:
c001dfe2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfe6:	8b 00                	mov    eax,DWORD PTR [eax]
c001dfe8:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001dfeb:	90                   	nop

c001dfec <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001dfec:	b8 01 00 00 00       	mov    eax,0x1
c001dff1:	c3                   	ret    

c001dff2 <ISO9660::unlink(char const*)>:
c001dff2:	b8 01 00 00 00       	mov    eax,0x1
c001dff7:	c3                   	ret    

c001dff8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001dff8:	b8 03 00 00 00       	mov    eax,0x3
c001dffd:	c3                   	ret    

c001dffe <ISO9660::rename(char const*, char const*)>:
c001dffe:	b8 01 00 00 00       	mov    eax,0x1
c001e003:	c3                   	ret    

c001e004 <ISO9660::mkdir(char const*)>:
c001e004:	b8 01 00 00 00       	mov    eax,0x1
c001e009:	c3                   	ret    

c001e00a <ISO9660::~ISO9660()>:
c001e00a:	83 ec 0c             	sub    esp,0xc
c001e00d:	ba 54 b5 02 c0       	mov    edx,0xc002b554
c001e012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e016:	89 10                	mov    DWORD PTR [eax],edx
c001e018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e01c:	83 ec 0c             	sub    esp,0xc
c001e01f:	50                   	push   eax
c001e020:	e8 fd a5 fe ff       	call   c0008622 <Filesystem::~Filesystem()>
c001e025:	83 c4 10             	add    esp,0x10
c001e028:	90                   	nop
c001e029:	83 c4 0c             	add    esp,0xc
c001e02c:	c3                   	ret    
c001e02d:	90                   	nop

c001e02e <ISO9660::~ISO9660()>:
c001e02e:	83 ec 0c             	sub    esp,0xc
c001e031:	83 ec 0c             	sub    esp,0xc
c001e034:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e038:	e8 cd ff ff ff       	call   c001e00a <ISO9660::~ISO9660()>
c001e03d:	83 c4 10             	add    esp,0x10
c001e040:	83 ec 08             	sub    esp,0x8
c001e043:	6a 08                	push   0x8
c001e045:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e049:	e8 86 fa fe ff       	call   c000dad4 <operator delete(void*, unsigned long)>
c001e04e:	83 c4 10             	add    esp,0x10
c001e051:	83 c4 0c             	add    esp,0xc
c001e054:	c3                   	ret    
c001e055:	90                   	nop

c001e056 <ISO9660::exists(char const*)>:
c001e056:	83 ec 18             	sub    esp,0x18
c001e059:	68 2f b4 02 c0       	push   0xc002b42f
c001e05e:	e8 c5 22 ff ff       	call   c0010328 <KePanic(char const*)>
c001e063:	31 c0                	xor    eax,eax
c001e065:	83 c4 1c             	add    esp,0x1c
c001e068:	c3                   	ret    
c001e069:	90                   	nop

c001e06a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001e06a:	56                   	push   esi
c001e06b:	53                   	push   ebx
c001e06c:	53                   	push   ebx
c001e06d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e071:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001e075:	85 db                	test   ebx,ebx
c001e077:	0f 84 ca 00 00 00    	je     c001e147 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001e07d:	85 f6                	test   esi,esi
c001e07f:	0f 84 c2 00 00 00    	je     c001e147 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001e085:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001e08a:	b8 03 00 00 00       	mov    eax,0x3
c001e08f:	0f 85 b7 00 00 00    	jne    c001e14c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001e095:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001e097:	38 0d 80 55 03 c0    	cmp    BYTE PTR ds:0xc0035580,cl
c001e09d:	0f be 05 80 55 03 c0 	movsx  eax,BYTE PTR ds:0xc0035580
c001e0a4:	74 1b                	je     c001e0c1 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001e0a6:	85 c0                	test   eax,eax
c001e0a8:	74 10                	je     c001e0ba <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001e0aa:	83 ec 0c             	sub    esp,0xc
c001e0ad:	68 4d b4 02 c0       	push   0xc002b44d
c001e0b2:	e8 71 22 ff ff       	call   c0010328 <KePanic(char const*)>
c001e0b7:	83 c4 10             	add    esp,0x10
c001e0ba:	8a 03                	mov    al,BYTE PTR [ebx]
c001e0bc:	a2 80 55 03 c0       	mov    ds:0xc0035580,al
c001e0c1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001e0c4:	8b 04 85 dc 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd624]
c001e0cb:	85 c0                	test   eax,eax
c001e0cd:	74 09                	je     c001e0d8 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001e0cf:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001e0d6:	74 48                	je     c001e120 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001e0d8:	83 ec 0c             	sub    esp,0xc
c001e0db:	68 5d b4 02 c0       	push   0xc002b45d
c001e0e0:	e8 81 8e fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001e0e5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001e0e8:	83 c4 10             	add    esp,0x10
c001e0eb:	8b 04 85 dc 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd624]
c001e0f2:	85 c0                	test   eax,eax
c001e0f4:	74 17                	je     c001e10d <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001e0f6:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001e0fd:	83 ec 0c             	sub    esp,0xc
c001e100:	68 7d b4 02 c0       	push   0xc002b47d
c001e105:	e8 5c 8e fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001e10a:	83 c4 10             	add    esp,0x10
c001e10d:	0f be 05 80 55 03 c0 	movsx  eax,BYTE PTR ds:0xc0035580
c001e114:	83 ec 0c             	sub    esp,0xc
c001e117:	50                   	push   eax
c001e118:	e8 2a 8b fe ff       	call   c0006c47 <init_percd>
c001e11d:	83 c4 10             	add    esp,0x10
c001e120:	51                   	push   ecx
c001e121:	83 c3 03             	add    ebx,0x3
c001e124:	51                   	push   ecx
c001e125:	6a 00                	push   0x0
c001e127:	53                   	push   ebx
c001e128:	e8 dd 85 fe ff       	call   c000670a <iso_open>
c001e12d:	83 c4 10             	add    esp,0x10
c001e130:	89 c2                	mov    edx,eax
c001e132:	b8 01 00 00 00       	mov    eax,0x1
c001e137:	83 fa ff             	cmp    edx,0xffffffff
c001e13a:	74 10                	je     c001e14c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001e13c:	83 c2 32             	add    edx,0x32
c001e13f:	31 c0                	xor    eax,eax
c001e141:	01 d2                	add    edx,edx
c001e143:	89 16                	mov    DWORD PTR [esi],edx
c001e145:	eb 05                	jmp    c001e14c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001e147:	b8 04 00 00 00       	mov    eax,0x4
c001e14c:	5a                   	pop    edx
c001e14d:	5b                   	pop    ebx
c001e14e:	5e                   	pop    esi
c001e14f:	c3                   	ret    

c001e150 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001e150:	53                   	push   ebx
c001e151:	83 ec 08             	sub    esp,0x8
c001e154:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e158:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e15c:	85 c0                	test   eax,eax
c001e15e:	74 2d                	je     c001e18d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001e160:	85 db                	test   ebx,ebx
c001e162:	74 29                	je     c001e18d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001e164:	52                   	push   edx
c001e165:	b9 02 00 00 00       	mov    ecx,0x2
c001e16a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e16e:	99                   	cdq    
c001e16f:	f7 f9                	idiv   ecx
c001e171:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e175:	83 e8 32             	sub    eax,0x32
c001e178:	50                   	push   eax
c001e179:	e8 34 86 fe ff       	call   c00067b2 <iso_read>
c001e17e:	83 c4 10             	add    esp,0x10
c001e181:	89 03                	mov    DWORD PTR [ebx],eax
c001e183:	09 d0                	or     eax,edx
c001e185:	0f 94 c0             	sete   al
c001e188:	0f b6 c0             	movzx  eax,al
c001e18b:	eb 05                	jmp    c001e192 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001e18d:	b8 04 00 00 00       	mov    eax,0x4
c001e192:	83 c4 08             	add    esp,0x8
c001e195:	5b                   	pop    ebx
c001e196:	c3                   	ret    
c001e197:	90                   	nop

c001e198 <ISO9660::seek(void*, unsigned long long)>:
c001e198:	57                   	push   edi
c001e199:	b8 04 00 00 00       	mov    eax,0x4
c001e19e:	56                   	push   esi
c001e19f:	51                   	push   ecx
c001e1a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e1a4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001e1a8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e1ac:	85 d2                	test   edx,edx
c001e1ae:	74 26                	je     c001e1d6 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001e1b0:	89 d0                	mov    eax,edx
c001e1b2:	b9 02 00 00 00       	mov    ecx,0x2
c001e1b7:	6a 00                	push   0x0
c001e1b9:	99                   	cdq    
c001e1ba:	f7 f9                	idiv   ecx
c001e1bc:	57                   	push   edi
c001e1bd:	56                   	push   esi
c001e1be:	83 e8 32             	sub    eax,0x32
c001e1c1:	50                   	push   eax
c001e1c2:	e8 01 87 fe ff       	call   c00068c8 <iso_seek>
c001e1c7:	83 c4 10             	add    esp,0x10
c001e1ca:	31 f0                	xor    eax,esi
c001e1cc:	31 fa                	xor    edx,edi
c001e1ce:	09 d0                	or     eax,edx
c001e1d0:	0f 95 c0             	setne  al
c001e1d3:	0f b6 c0             	movzx  eax,al
c001e1d6:	5a                   	pop    edx
c001e1d7:	5e                   	pop    esi
c001e1d8:	5f                   	pop    edi
c001e1d9:	c3                   	ret    

c001e1da <ISO9660::tell(void*, unsigned long long*)>:
c001e1da:	53                   	push   ebx
c001e1db:	83 ec 08             	sub    esp,0x8
c001e1de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1e2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e1e6:	85 c0                	test   eax,eax
c001e1e8:	74 24                	je     c001e20e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001e1ea:	85 db                	test   ebx,ebx
c001e1ec:	74 20                	je     c001e20e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001e1ee:	b9 02 00 00 00       	mov    ecx,0x2
c001e1f3:	99                   	cdq    
c001e1f4:	f7 f9                	idiv   ecx
c001e1f6:	83 ec 0c             	sub    esp,0xc
c001e1f9:	83 e8 32             	sub    eax,0x32
c001e1fc:	50                   	push   eax
c001e1fd:	e8 4a 87 fe ff       	call   c000694c <iso_tell>
c001e202:	83 c4 10             	add    esp,0x10
c001e205:	89 03                	mov    DWORD PTR [ebx],eax
c001e207:	31 c0                	xor    eax,eax
c001e209:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001e20c:	eb 05                	jmp    c001e213 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001e20e:	b8 04 00 00 00       	mov    eax,0x4
c001e213:	83 c4 08             	add    esp,0x8
c001e216:	5b                   	pop    ebx
c001e217:	c3                   	ret    

c001e218 <ISO9660::stat(void*, unsigned long long*)>:
c001e218:	56                   	push   esi
c001e219:	53                   	push   ebx
c001e21a:	83 ec 10             	sub    esp,0x10
c001e21d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e221:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001e225:	68 a1 b4 02 c0       	push   0xc002b4a1
c001e22a:	e8 37 8d fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001e22f:	83 c4 10             	add    esp,0x10
c001e232:	85 db                	test   ebx,ebx
c001e234:	74 2a                	je     c001e260 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001e236:	85 f6                	test   esi,esi
c001e238:	74 26                	je     c001e260 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001e23a:	89 d8                	mov    eax,ebx
c001e23c:	b9 02 00 00 00       	mov    ecx,0x2
c001e241:	99                   	cdq    
c001e242:	83 ec 0c             	sub    esp,0xc
c001e245:	f7 f9                	idiv   ecx
c001e247:	83 e8 32             	sub    eax,0x32
c001e24a:	50                   	push   eax
c001e24b:	e8 2d 87 fe ff       	call   c000697d <iso_total>
c001e250:	83 c4 10             	add    esp,0x10
c001e253:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001e25a:	89 06                	mov    DWORD PTR [esi],eax
c001e25c:	31 c0                	xor    eax,eax
c001e25e:	eb 05                	jmp    c001e265 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001e260:	b8 04 00 00 00       	mov    eax,0x4
c001e265:	5a                   	pop    edx
c001e266:	5b                   	pop    ebx
c001e267:	5e                   	pop    esi
c001e268:	c3                   	ret    
c001e269:	90                   	nop

c001e26a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001e26a:	55                   	push   ebp
c001e26b:	57                   	push   edi
c001e26c:	56                   	push   esi
c001e26d:	53                   	push   ebx
c001e26e:	83 ec 18             	sub    esp,0x18
c001e271:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001e275:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001e279:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e27d:	68 a9 b4 02 c0       	push   0xc002b4a9
c001e282:	e8 df 8c fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001e287:	83 c4 10             	add    esp,0x10
c001e28a:	85 ff                	test   edi,edi
c001e28c:	0f 94 c0             	sete   al
c001e28f:	85 f6                	test   esi,esi
c001e291:	0f 94 c2             	sete   dl
c001e294:	09 d0                	or     eax,edx
c001e296:	a8 01                	test   al,0x1
c001e298:	0f 85 dd 00 00 00    	jne    c001e37b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001e29e:	85 db                	test   ebx,ebx
c001e2a0:	0f 84 d5 00 00 00    	je     c001e37b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001e2a6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001e2a9:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001e2af:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001e2b6:	0f be 05 80 55 03 c0 	movsx  eax,BYTE PTR ds:0xc0035580
c001e2bd:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001e2bf:	38 0d 80 55 03 c0    	cmp    BYTE PTR ds:0xc0035580,cl
c001e2c5:	74 1b                	je     c001e2e2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001e2c7:	85 c0                	test   eax,eax
c001e2c9:	74 10                	je     c001e2db <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001e2cb:	83 ec 0c             	sub    esp,0xc
c001e2ce:	68 4d b4 02 c0       	push   0xc002b44d
c001e2d3:	e8 50 20 ff ff       	call   c0010328 <KePanic(char const*)>
c001e2d8:	83 c4 10             	add    esp,0x10
c001e2db:	8a 03                	mov    al,BYTE PTR [ebx]
c001e2dd:	a2 80 55 03 c0       	mov    ds:0xc0035580,al
c001e2e2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001e2e5:	8b 04 85 dc 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd624]
c001e2ec:	85 c0                	test   eax,eax
c001e2ee:	74 09                	je     c001e2f9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001e2f0:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001e2f7:	74 51                	je     c001e34a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001e2f9:	83 ec 0c             	sub    esp,0xc
c001e2fc:	68 b1 b4 02 c0       	push   0xc002b4b1
c001e301:	e8 60 8c fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001e306:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001e309:	83 c4 10             	add    esp,0x10
c001e30c:	83 3c 85 dc 29 03 c0 00 	cmp    DWORD PTR [eax*4-0x3ffcd624],0x0
c001e314:	74 21                	je     c001e337 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001e316:	83 ec 0c             	sub    esp,0xc
c001e319:	68 d1 b4 02 c0       	push   0xc002b4d1
c001e31e:	e8 43 8c fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001e323:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001e326:	83 c4 10             	add    esp,0x10
c001e329:	8b 04 85 dc 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd624]
c001e330:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001e337:	0f be 05 80 55 03 c0 	movsx  eax,BYTE PTR ds:0xc0035580
c001e33e:	83 ec 0c             	sub    esp,0xc
c001e341:	50                   	push   eax
c001e342:	e8 00 89 fe ff       	call   c0006c47 <init_percd>
c001e347:	83 c4 10             	add    esp,0x10
c001e34a:	52                   	push   edx
c001e34b:	83 c3 03             	add    ebx,0x3
c001e34e:	52                   	push   edx
c001e34f:	6a 00                	push   0x0
c001e351:	53                   	push   ebx
c001e352:	e8 b3 83 fe ff       	call   c000670a <iso_open>
c001e357:	83 c4 10             	add    esp,0x10
c001e35a:	83 f8 ff             	cmp    eax,0xffffffff
c001e35d:	89 c5                	mov    ebp,eax
c001e35f:	75 21                	jne    c001e382 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001e361:	50                   	push   eax
c001e362:	50                   	push   eax
c001e363:	6a 01                	push   0x1
c001e365:	53                   	push   ebx
c001e366:	e8 9f 83 fe ff       	call   c000670a <iso_open>
c001e36b:	83 c4 10             	add    esp,0x10
c001e36e:	ba 02 00 00 00       	mov    edx,0x2
c001e373:	40                   	inc    eax
c001e374:	74 2b                	je     c001e3a1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001e376:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001e379:	eb 24                	jmp    c001e39f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001e37b:	ba 04 00 00 00       	mov    edx,0x4
c001e380:	eb 1f                	jmp    c001e3a1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001e382:	83 ec 0c             	sub    esp,0xc
c001e385:	50                   	push   eax
c001e386:	e8 f2 85 fe ff       	call   c000697d <iso_total>
c001e38b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001e392:	89 07                	mov    DWORD PTR [edi],eax
c001e394:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001e397:	e8 f8 83 fe ff       	call   c0006794 <iso_close>
c001e39c:	83 c4 10             	add    esp,0x10
c001e39f:	31 d2                	xor    edx,edx
c001e3a1:	83 c4 0c             	add    esp,0xc
c001e3a4:	89 d0                	mov    eax,edx
c001e3a6:	5b                   	pop    ebx
c001e3a7:	5e                   	pop    esi
c001e3a8:	5f                   	pop    edi
c001e3a9:	5d                   	pop    ebp
c001e3aa:	c3                   	ret    
c001e3ab:	90                   	nop

c001e3ac <ISO9660::close(void*)>:
c001e3ac:	83 ec 0c             	sub    esp,0xc
c001e3af:	b8 04 00 00 00       	mov    eax,0x4
c001e3b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e3b8:	85 d2                	test   edx,edx
c001e3ba:	74 1b                	je     c001e3d7 <ISO9660::close(void*)+0x2b>
c001e3bc:	89 d0                	mov    eax,edx
c001e3be:	b9 02 00 00 00       	mov    ecx,0x2
c001e3c3:	99                   	cdq    
c001e3c4:	83 ec 0c             	sub    esp,0xc
c001e3c7:	f7 f9                	idiv   ecx
c001e3c9:	83 e8 32             	sub    eax,0x32
c001e3cc:	50                   	push   eax
c001e3cd:	e8 c2 83 fe ff       	call   c0006794 <iso_close>
c001e3d2:	83 c4 10             	add    esp,0x10
c001e3d5:	31 c0                	xor    eax,eax
c001e3d7:	83 c4 0c             	add    esp,0xc
c001e3da:	c3                   	ret    
c001e3db:	90                   	nop

c001e3dc <ISO9660::openDir(char const*, void**)>:
c001e3dc:	56                   	push   esi
c001e3dd:	53                   	push   ebx
c001e3de:	50                   	push   eax
c001e3df:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e3e3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001e3e7:	85 db                	test   ebx,ebx
c001e3e9:	0f 84 bd 00 00 00    	je     c001e4ac <ISO9660::openDir(char const*, void**)+0xd0>
c001e3ef:	85 f6                	test   esi,esi
c001e3f1:	0f 84 b5 00 00 00    	je     c001e4ac <ISO9660::openDir(char const*, void**)+0xd0>
c001e3f7:	8a 13                	mov    dl,BYTE PTR [ebx]
c001e3f9:	38 15 80 55 03 c0    	cmp    BYTE PTR ds:0xc0035580,dl
c001e3ff:	0f be 05 80 55 03 c0 	movsx  eax,BYTE PTR ds:0xc0035580
c001e406:	74 1b                	je     c001e423 <ISO9660::openDir(char const*, void**)+0x47>
c001e408:	85 c0                	test   eax,eax
c001e40a:	74 10                	je     c001e41c <ISO9660::openDir(char const*, void**)+0x40>
c001e40c:	83 ec 0c             	sub    esp,0xc
c001e40f:	68 4d b4 02 c0       	push   0xc002b44d
c001e414:	e8 0f 1f ff ff       	call   c0010328 <KePanic(char const*)>
c001e419:	83 c4 10             	add    esp,0x10
c001e41c:	8a 03                	mov    al,BYTE PTR [ebx]
c001e41e:	a2 80 55 03 c0       	mov    ds:0xc0035580,al
c001e423:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001e426:	8b 04 85 dc 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd624]
c001e42d:	85 c0                	test   eax,eax
c001e42f:	74 10                	je     c001e441 <ISO9660::openDir(char const*, void**)+0x65>
c001e431:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001e438:	74 1a                	je     c001e454 <ISO9660::openDir(char const*, void**)+0x78>
c001e43a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001e441:	0f be 05 80 55 03 c0 	movsx  eax,BYTE PTR ds:0xc0035580
c001e448:	83 ec 0c             	sub    esp,0xc
c001e44b:	50                   	push   eax
c001e44c:	e8 f6 87 fe ff       	call   c0006c47 <init_percd>
c001e451:	83 c4 10             	add    esp,0x10
c001e454:	50                   	push   eax
c001e455:	83 c3 03             	add    ebx,0x3
c001e458:	50                   	push   eax
c001e459:	6a 01                	push   0x1
c001e45b:	53                   	push   ebx
c001e45c:	e8 a9 82 fe ff       	call   c000670a <iso_open>
c001e461:	83 c4 10             	add    esp,0x10
c001e464:	83 f8 ff             	cmp    eax,0xffffffff
c001e467:	89 c3                	mov    ebx,eax
c001e469:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001e46e:	75 1c                	jne    c001e48c <ISO9660::openDir(char const*, void**)+0xb0>
c001e470:	53                   	push   ebx
c001e471:	53                   	push   ebx
c001e472:	68 f5 b4 02 c0       	push   0xc002b4f5
c001e477:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001e47d:	e8 e2 47 ff ff       	call   c0012c64 <VgaText::puts(char const*)>
c001e482:	83 c4 10             	add    esp,0x10
c001e485:	b8 01 00 00 00       	mov    eax,0x1
c001e48a:	eb 25                	jmp    c001e4b1 <ISO9660::openDir(char const*, void**)+0xd5>
c001e48c:	51                   	push   ecx
c001e48d:	01 db                	add    ebx,ebx
c001e48f:	51                   	push   ecx
c001e490:	83 c3 65             	add    ebx,0x65
c001e493:	68 08 b5 02 c0       	push   0xc002b508
c001e498:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001e49e:	e8 c1 47 ff ff       	call   c0012c64 <VgaText::puts(char const*)>
c001e4a3:	83 c4 10             	add    esp,0x10
c001e4a6:	31 c0                	xor    eax,eax
c001e4a8:	89 1e                	mov    DWORD PTR [esi],ebx
c001e4aa:	eb 05                	jmp    c001e4b1 <ISO9660::openDir(char const*, void**)+0xd5>
c001e4ac:	b8 04 00 00 00       	mov    eax,0x4
c001e4b1:	5a                   	pop    edx
c001e4b2:	5b                   	pop    ebx
c001e4b3:	5e                   	pop    esi
c001e4b4:	c3                   	ret    
c001e4b5:	90                   	nop

c001e4b6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001e4b6:	55                   	push   ebp
c001e4b7:	57                   	push   edi
c001e4b8:	56                   	push   esi
c001e4b9:	53                   	push   ebx
c001e4ba:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001e4c0:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001e4c7:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001e4ce:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001e4d5:	85 db                	test   ebx,ebx
c001e4d7:	0f 84 e4 00 00 00    	je     c001e5c1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001e4dd:	85 ed                	test   ebp,ebp
c001e4df:	0f 84 dc 00 00 00    	je     c001e5c1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001e4e5:	83 ec 0c             	sub    esp,0xc
c001e4e8:	68 1b b5 02 c0       	push   0xc002b51b
c001e4ed:	e8 74 8a fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001e4f2:	89 d8                	mov    eax,ebx
c001e4f4:	b9 02 00 00 00       	mov    ecx,0x2
c001e4f9:	99                   	cdq    
c001e4fa:	f7 f9                	idiv   ecx
c001e4fc:	83 e8 32             	sub    eax,0x32
c001e4ff:	89 04 24             	mov    DWORD PTR [esp],eax
c001e502:	e8 c8 84 fe ff       	call   c00069cf <iso_readdir>
c001e507:	83 c4 10             	add    esp,0x10
c001e50a:	85 c0                	test   eax,eax
c001e50c:	89 c3                	mov    ebx,eax
c001e50e:	75 38                	jne    c001e548 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001e510:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001e515:	53                   	push   ebx
c001e516:	53                   	push   ebx
c001e517:	68 26 b5 02 c0       	push   0xc002b526
c001e51c:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001e522:	e8 3d 47 ff ff       	call   c0012c64 <VgaText::puts(char const*)>
c001e527:	83 c4 0c             	add    esp,0xc
c001e52a:	68 10 01 00 00       	push   0x110
c001e52f:	6a 00                	push   0x0
c001e531:	57                   	push   edi
c001e532:	e8 b9 1f fe ff       	call   c00004f0 <memset>
c001e537:	83 c4 10             	add    esp,0x10
c001e53a:	b8 01 00 00 00       	mov    eax,0x1
c001e53f:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001e546:	eb 7e                	jmp    c001e5c6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001e548:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001e54e:	8d 70 08             	lea    esi,[eax+0x8]
c001e551:	83 ec 0c             	sub    esp,0xc
c001e554:	56                   	push   esi
c001e555:	e8 26 20 fe ff       	call   c0000580 <strlen>
c001e55a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001e562:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e566:	83 c4 10             	add    esp,0x10
c001e569:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001e56d:	75 0a                	jne    c001e579 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001e56f:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001e572:	b8 02 00 00 00       	mov    eax,0x2
c001e577:	74 05                	je     c001e57e <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001e579:	b8 01 00 00 00       	mov    eax,0x1
c001e57e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e582:	50                   	push   eax
c001e583:	50                   	push   eax
c001e584:	56                   	push   esi
c001e585:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e589:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001e58d:	50                   	push   eax
c001e58e:	e8 bd 20 fe ff       	call   c0000650 <strcpy>
c001e593:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001e59a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e59c:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001e5a3:	5a                   	pop    edx
c001e5a4:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001e5a9:	59                   	pop    ecx
c001e5aa:	68 39 b5 02 c0       	push   0xc002b539
c001e5af:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001e5b5:	e8 aa 46 ff ff       	call   c0012c64 <VgaText::puts(char const*)>
c001e5ba:	83 c4 10             	add    esp,0x10
c001e5bd:	31 c0                	xor    eax,eax
c001e5bf:	eb 05                	jmp    c001e5c6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001e5c1:	b8 04 00 00 00       	mov    eax,0x4
c001e5c6:	81 c4 1c 01 00 00    	add    esp,0x11c
c001e5cc:	5b                   	pop    ebx
c001e5cd:	5e                   	pop    esi
c001e5ce:	5f                   	pop    edi
c001e5cf:	5d                   	pop    ebp
c001e5d0:	c3                   	ret    

c001e5d1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001e5d1:	57                   	push   edi
c001e5d2:	56                   	push   esi
c001e5d3:	53                   	push   ebx
c001e5d4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e5d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e5dc:	39 35 84 55 03 c0    	cmp    DWORD PTR ds:0xc0035584,esi
c001e5e2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e5e6:	0f be cb             	movsx  ecx,bl
c001e5e9:	75 0b                	jne    c001e5f6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001e5eb:	0f be 05 24 d7 02 c0 	movsx  eax,BYTE PTR ds:0xc002d724
c001e5f2:	39 c8                	cmp    eax,ecx
c001e5f4:	74 47                	je     c001e63d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001e5f6:	83 ec 0c             	sub    esp,0xc
c001e5f9:	31 d2                	xor    edx,edx
c001e5fb:	68 a0 55 03 c0       	push   0xc00355a0
c001e600:	6a 01                	push   0x1
c001e602:	52                   	push   edx
c001e603:	56                   	push   esi
c001e604:	ff 34 8d dc 29 03 c0 	push   DWORD PTR [ecx*4-0x3ffcd624]
c001e60b:	e8 52 cc fe ff       	call   c000b262 <LogicalDisk::read(unsigned long long, int, void*)>
c001e610:	83 c4 20             	add    esp,0x20
c001e613:	85 c0                	test   eax,eax
c001e615:	75 0e                	jne    c001e625 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001e617:	89 35 84 55 03 c0    	mov    DWORD PTR ds:0xc0035584,esi
c001e61d:	88 1d 24 d7 02 c0    	mov    BYTE PTR ds:0xc002d724,bl
c001e623:	eb 18                	jmp    c001e63d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001e625:	50                   	push   eax
c001e626:	68 00 08 00 00       	push   0x800
c001e62b:	6a 00                	push   0x0
c001e62d:	57                   	push   edi
c001e62e:	e8 bd 1e fe ff       	call   c00004f0 <memset>
c001e633:	83 c4 10             	add    esp,0x10
c001e636:	b8 01 00 00 00       	mov    eax,0x1
c001e63b:	eb 0e                	jmp    c001e64b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001e63d:	be a0 55 03 c0       	mov    esi,0xc00355a0
c001e642:	b9 00 08 00 00       	mov    ecx,0x800
c001e647:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e649:	31 c0                	xor    eax,eax
c001e64b:	5b                   	pop    ebx
c001e64c:	5e                   	pop    esi
c001e64d:	5f                   	pop    edi
c001e64e:	c3                   	ret    
c001e64f:	90                   	nop

c001e650 <ISO9660::tryMount(LogicalDisk*, int)>:
c001e650:	53                   	push   ebx
c001e651:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001e657:	c7 05 84 55 03 c0 ef be ad de 	mov    DWORD PTR ds:0xc0035584,0xdeadbeef
c001e661:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001e668:	8d 58 41             	lea    ebx,[eax+0x41]
c001e66b:	0f be db             	movsx  ebx,bl
c001e66e:	53                   	push   ebx
c001e66f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e673:	50                   	push   eax
c001e674:	6a 10                	push   0x10
c001e676:	e8 56 ff ff ff       	call   c001e5d1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001e67b:	83 c4 10             	add    esp,0x10
c001e67e:	31 d2                	xor    edx,edx
c001e680:	85 c0                	test   eax,eax
c001e682:	75 33                	jne    c001e6b7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001e684:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001e689:	75 2c                	jne    c001e6b7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001e68b:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001e690:	75 25                	jne    c001e6b7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001e692:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001e697:	75 1e                	jne    c001e6b7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001e699:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001e69e:	75 17                	jne    c001e6b7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001e6a0:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001e6a5:	75 10                	jne    c001e6b7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001e6a7:	83 ec 0c             	sub    esp,0xc
c001e6aa:	53                   	push   ebx
c001e6ab:	e8 97 85 fe ff       	call   c0006c47 <init_percd>
c001e6b0:	83 c4 10             	add    esp,0x10
c001e6b3:	40                   	inc    eax
c001e6b4:	0f 95 c2             	setne  dl
c001e6b7:	81 c4 08 08 00 00    	add    esp,0x808
c001e6bd:	88 d0                	mov    al,dl
c001e6bf:	5b                   	pop    ebx
c001e6c0:	c3                   	ret    
c001e6c1:	90                   	nop

c001e6c2 <ISO9660::ISO9660()>:
c001e6c2:	83 ec 0c             	sub    esp,0xc
c001e6c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6c9:	83 ec 0c             	sub    esp,0xc
c001e6cc:	50                   	push   eax
c001e6cd:	e8 2c 9f fe ff       	call   c00085fe <Filesystem::Filesystem()>
c001e6d2:	83 c4 10             	add    esp,0x10
c001e6d5:	ba 54 b5 02 c0       	mov    edx,0xc002b554
c001e6da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6de:	89 10                	mov    DWORD PTR [eax],edx
c001e6e0:	e8 74 86 fe ff       	call   c0006d59 <fs_iso9660_init>
c001e6e5:	90                   	nop
c001e6e6:	83 c4 0c             	add    esp,0xc
c001e6e9:	c3                   	ret    

c001e6ea <SoundCard::beginPlayback()>:
c001e6ea:	c7 44 24 04 b8 b5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b5b8
c001e6f2:	e9 31 1c ff ff       	jmp    c0010328 <KePanic(char const*)>
c001e6f7:	90                   	nop

c001e6f8 <SoundCard::stopPlayback()>:
c001e6f8:	c7 44 24 04 b8 b5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b5b8
c001e700:	e9 23 1c ff ff       	jmp    c0010328 <KePanic(char const*)>
c001e705:	90                   	nop

c001e706 <SoundCard::SoundCard(char const*)>:
c001e706:	83 ec 1c             	sub    esp,0x1c
c001e709:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e70d:	83 ec 08             	sub    esp,0x8
c001e710:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e714:	50                   	push   eax
c001e715:	e8 8a bc fe ff       	call   c000a3a4 <Device::Device(char const*)>
c001e71a:	83 c4 10             	add    esp,0x10
c001e71d:	ba 04 b6 02 c0       	mov    edx,0xc002b604
c001e722:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e726:	89 10                	mov    DWORD PTR [eax],edx
c001e728:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e72c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001e733:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e737:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001e741:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e745:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001e74f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e753:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001e75d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e761:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001e76b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e773:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001e778:	7f 1a                	jg     c001e794 <SoundCard::SoundCard(char const*)+0x8e>
c001e77a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e77e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e782:	83 c2 54             	add    edx,0x54
c001e785:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001e78d:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001e792:	eb df                	jmp    c001e773 <SoundCard::SoundCard(char const*)+0x6d>
c001e794:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e798:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001e79f:	90                   	nop
c001e7a0:	83 c4 1c             	add    esp,0x1c
c001e7a3:	c3                   	ret    

c001e7a4 <SoundCard::~SoundCard()>:
c001e7a4:	83 ec 0c             	sub    esp,0xc
c001e7a7:	ba 04 b6 02 c0       	mov    edx,0xc002b604
c001e7ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7b0:	89 10                	mov    DWORD PTR [eax],edx
c001e7b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7b6:	83 ec 0c             	sub    esp,0xc
c001e7b9:	50                   	push   eax
c001e7ba:	e8 85 b9 fe ff       	call   c000a144 <Device::~Device()>
c001e7bf:	83 c4 10             	add    esp,0x10
c001e7c2:	90                   	nop
c001e7c3:	83 c4 0c             	add    esp,0xc
c001e7c6:	c3                   	ret    
c001e7c7:	90                   	nop

c001e7c8 <SoundCard::~SoundCard()>:
c001e7c8:	83 ec 0c             	sub    esp,0xc
c001e7cb:	83 ec 0c             	sub    esp,0xc
c001e7ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7d2:	e8 cd ff ff ff       	call   c001e7a4 <SoundCard::~SoundCard()>
c001e7d7:	83 c4 10             	add    esp,0x10
c001e7da:	83 ec 08             	sub    esp,0x8
c001e7dd:	68 e8 01 00 00       	push   0x1e8
c001e7e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7e6:	e8 e9 f2 fe ff       	call   c000dad4 <operator delete(void*, unsigned long)>
c001e7eb:	83 c4 10             	add    esp,0x10
c001e7ee:	83 c4 0c             	add    esp,0xc
c001e7f1:	c3                   	ret    

c001e7f2 <SoundCard::configureRates(int, int, int)>:
c001e7f2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e7f6:	31 c0                	xor    eax,eax
c001e7f8:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001e7ff:	75 20                	jne    c001e821 <SoundCard::configureRates(int, int, int)+0x2f>
c001e801:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e805:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001e80b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e80f:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e819:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001e81f:	b0 01                	mov    al,0x1
c001e821:	c3                   	ret    

c001e822 <SoundCard::getSamples16(int, short*)>:
c001e822:	55                   	push   ebp
c001e823:	57                   	push   edi
c001e824:	31 ff                	xor    edi,edi
c001e826:	56                   	push   esi
c001e827:	53                   	push   ebx
c001e828:	31 db                	xor    ebx,ebx
c001e82a:	83 ec 10             	sub    esp,0x10
c001e82d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001e831:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001e835:	8d 04 36             	lea    eax,[esi+esi*1]
c001e838:	50                   	push   eax
c001e839:	6a 00                	push   0x0
c001e83b:	55                   	push   ebp
c001e83c:	e8 af 1c fe ff       	call   c00004f0 <memset>
c001e841:	83 c4 10             	add    esp,0x10
c001e844:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e848:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001e84f:	85 c0                	test   eax,eax
c001e851:	74 1a                	je     c001e86d <SoundCard::getSamples16(int, short*)+0x4b>
c001e853:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001e857:	75 14                	jne    c001e86d <SoundCard::getSamples16(int, short*)+0x4b>
c001e859:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e85d:	55                   	push   ebp
c001e85e:	56                   	push   esi
c001e85f:	50                   	push   eax
c001e860:	e8 8f 03 00 00       	call   c001ebf4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001e865:	83 c4 10             	add    esp,0x10
c001e868:	39 c3                	cmp    ebx,eax
c001e86a:	0f 4c d8             	cmovl  ebx,eax
c001e86d:	47                   	inc    edi
c001e86e:	83 ff 20             	cmp    edi,0x20
c001e871:	75 d1                	jne    c001e844 <SoundCard::getSamples16(int, short*)+0x22>
c001e873:	83 c4 0c             	add    esp,0xc
c001e876:	89 d8                	mov    eax,ebx
c001e878:	5b                   	pop    ebx
c001e879:	5e                   	pop    esi
c001e87a:	5f                   	pop    edi
c001e87b:	5d                   	pop    ebp
c001e87c:	c3                   	ret    
c001e87d:	90                   	nop

c001e87e <SoundCard::getSamples32(int, int*)>:
c001e87e:	55                   	push   ebp
c001e87f:	57                   	push   edi
c001e880:	31 ff                	xor    edi,edi
c001e882:	56                   	push   esi
c001e883:	31 f6                	xor    esi,esi
c001e885:	53                   	push   ebx
c001e886:	83 ec 10             	sub    esp,0x10
c001e889:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e88d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001e891:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001e895:	c1 e0 02             	shl    eax,0x2
c001e898:	50                   	push   eax
c001e899:	6a 00                	push   0x0
c001e89b:	55                   	push   ebp
c001e89c:	e8 4f 1c fe ff       	call   c00004f0 <memset>
c001e8a1:	83 c4 10             	add    esp,0x10
c001e8a4:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001e8ab:	85 c0                	test   eax,eax
c001e8ad:	74 1a                	je     c001e8c9 <SoundCard::getSamples32(int, int*)+0x4b>
c001e8af:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001e8b3:	75 14                	jne    c001e8c9 <SoundCard::getSamples32(int, int*)+0x4b>
c001e8b5:	53                   	push   ebx
c001e8b6:	55                   	push   ebp
c001e8b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e8bb:	50                   	push   eax
c001e8bc:	e8 03 04 00 00       	call   c001ecc4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001e8c1:	83 c4 10             	add    esp,0x10
c001e8c4:	39 c6                	cmp    esi,eax
c001e8c6:	0f 4c f0             	cmovl  esi,eax
c001e8c9:	47                   	inc    edi
c001e8ca:	83 ff 20             	cmp    edi,0x20
c001e8cd:	75 d5                	jne    c001e8a4 <SoundCard::getSamples32(int, int*)+0x26>
c001e8cf:	85 f6                	test   esi,esi
c001e8d1:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001e8d8:	75 0f                	jne    c001e8e9 <SoundCard::getSamples32(int, int*)+0x6b>
c001e8da:	85 c0                	test   eax,eax
c001e8dc:	74 1b                	je     c001e8f9 <SoundCard::getSamples32(int, int*)+0x7b>
c001e8de:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e8e0:	83 ec 0c             	sub    esp,0xc
c001e8e3:	53                   	push   ebx
c001e8e4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001e8e7:	eb 0d                	jmp    c001e8f6 <SoundCard::getSamples32(int, int*)+0x78>
c001e8e9:	85 c0                	test   eax,eax
c001e8eb:	75 0c                	jne    c001e8f9 <SoundCard::getSamples32(int, int*)+0x7b>
c001e8ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e8ef:	83 ec 0c             	sub    esp,0xc
c001e8f2:	53                   	push   ebx
c001e8f3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001e8f6:	83 c4 10             	add    esp,0x10
c001e8f9:	83 c4 0c             	add    esp,0xc
c001e8fc:	89 f0                	mov    eax,esi
c001e8fe:	5b                   	pop    ebx
c001e8ff:	5e                   	pop    esi
c001e900:	5f                   	pop    edi
c001e901:	5d                   	pop    ebp
c001e902:	c3                   	ret    
c001e903:	90                   	nop

c001e904 <SoundCard::addChannel(SoundPort*)>:
c001e904:	83 ec 0c             	sub    esp,0xc
c001e907:	31 c0                	xor    eax,eax
c001e909:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e90d:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001e915:	74 1b                	je     c001e932 <SoundCard::addChannel(SoundPort*)+0x2e>
c001e917:	40                   	inc    eax
c001e918:	83 f8 20             	cmp    eax,0x20
c001e91b:	75 f0                	jne    c001e90d <SoundCard::addChannel(SoundPort*)+0x9>
c001e91d:	83 ec 0c             	sub    esp,0xc
c001e920:	68 dd b5 02 c0       	push   0xc002b5dd
c001e925:	e8 fe 19 ff ff       	call   c0010328 <KePanic(char const*)>
c001e92a:	83 c4 10             	add    esp,0x10
c001e92d:	83 c8 ff             	or     eax,0xffffffff
c001e930:	eb 0b                	jmp    c001e93d <SoundCard::addChannel(SoundPort*)+0x39>
c001e932:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e936:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001e93d:	83 c4 0c             	add    esp,0xc
c001e940:	c3                   	ret    
c001e941:	90                   	nop

c001e942 <SoundCard::removeChannel(int)>:
c001e942:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e946:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e94a:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001e955:	c3                   	ret    
c001e956:	66 90                	xchg   ax,ax

c001e958 <SoundPort::SoundPort(int, int, int, int)>:
c001e958:	83 ec 0c             	sub    esp,0xc
c001e95b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e95f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001e966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e96a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001e96e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e972:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e976:	89 10                	mov    DWORD PTR [eax],edx
c001e978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e97c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e980:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e987:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e98b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e98e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001e993:	75 13                	jne    c001e9a8 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001e995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e999:	8b 00                	mov    eax,DWORD PTR [eax]
c001e99b:	05 a0 0f 00 00       	add    eax,0xfa0
c001e9a0:	d1 e0                	shl    eax,1
c001e9a2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e9a6:	66 90                	xchg   ax,ax
c001e9a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e9b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001e9b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9b7:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001e9be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e9c5:	c1 e0 02             	shl    eax,0x2
c001e9c8:	83 ec 0c             	sub    esp,0xc
c001e9cb:	50                   	push   eax
c001e9cc:	e8 03 15 ff ff       	call   c000fed4 <malloc>
c001e9d1:	83 c4 10             	add    esp,0x10
c001e9d4:	89 c2                	mov    edx,eax
c001e9d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9da:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e9dd:	90                   	nop
c001e9de:	83 c4 0c             	add    esp,0xc
c001e9e1:	c3                   	ret    
c001e9e2:	66 90                	xchg   ax,ax

c001e9e4 <SoundPort::~SoundPort()>:
c001e9e4:	83 ec 0c             	sub    esp,0xc
c001e9e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9eb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e9ee:	85 c0                	test   eax,eax
c001e9f0:	74 1e                	je     c001ea10 <SoundPort::~SoundPort()+0x2c>
c001e9f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e9f9:	83 ec 0c             	sub    esp,0xc
c001e9fc:	50                   	push   eax
c001e9fd:	e8 e2 14 ff ff       	call   c000fee4 <free>
c001ea02:	83 c4 10             	add    esp,0x10
c001ea05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea09:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ea10:	90                   	nop
c001ea11:	83 c4 0c             	add    esp,0xc
c001ea14:	c3                   	ret    
c001ea15:	90                   	nop
c001ea16:	66 90                	xchg   ax,ax

c001ea18 <SoundPort::unpause()>:
c001ea18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea1c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001ea20:	c3                   	ret    
c001ea21:	90                   	nop
c001ea22:	66 90                	xchg   ax,ax

c001ea24 <SoundPort::pause()>:
c001ea24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea28:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ea2c:	c3                   	ret    
c001ea2d:	90                   	nop
c001ea2e:	66 90                	xchg   ax,ax

c001ea30 <SoundPort::getBufferUsed()>:
c001ea30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea34:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ea37:	c3                   	ret    

c001ea38 <SoundPort::getBufferSize()>:
c001ea38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea3c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ea3f:	c3                   	ret    

c001ea40 <SoundPort::buffer8(signed char*, int)>:
c001ea40:	55                   	push   ebp
c001ea41:	57                   	push   edi
c001ea42:	56                   	push   esi
c001ea43:	53                   	push   ebx
c001ea44:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ea48:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001ea4c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001ea4f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001ea52:	74 70                	je     c001eac4 <SoundPort::buffer8(signed char*, int)+0x84>
c001ea54:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ea58:	85 c9                	test   ecx,ecx
c001ea5a:	7e 68                	jle    c001eac4 <SoundPort::buffer8(signed char*, int)+0x84>
c001ea5c:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001ea60:	8d 48 01             	lea    ecx,[eax+0x1]
c001ea63:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001ea66:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ea69:	89 f1                	mov    ecx,esi
c001ea6b:	c1 e1 18             	shl    ecx,0x18
c001ea6e:	29 f1                	sub    ecx,esi
c001ea70:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001ea73:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ea76:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ea79:	74 51                	je     c001eacc <SoundPort::buffer8(signed char*, int)+0x8c>
c001ea7b:	31 ff                	xor    edi,edi
c001ea7d:	eb 25                	jmp    c001eaa4 <SoundPort::buffer8(signed char*, int)+0x64>
c001ea7f:	90                   	nop
c001ea80:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001ea85:	8d 59 01             	lea    ebx,[ecx+0x1]
c001ea88:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001ea8b:	89 f3                	mov    ebx,esi
c001ea8d:	c1 e3 18             	shl    ebx,0x18
c001ea90:	29 f3                	sub    ebx,esi
c001ea92:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001ea95:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001ea98:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ea9b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ea9e:	74 1c                	je     c001eabc <SoundPort::buffer8(signed char*, int)+0x7c>
c001eaa0:	89 c7                	mov    edi,eax
c001eaa2:	66 90                	xchg   ax,ax
c001eaa4:	8d 47 01             	lea    eax,[edi+0x1]
c001eaa7:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001eaab:	75 d3                	jne    c001ea80 <SoundPort::buffer8(signed char*, int)+0x40>
c001eaad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eab1:	8d 76 00             	lea    esi,[esi+0x0]
c001eab4:	5b                   	pop    ebx
c001eab5:	5e                   	pop    esi
c001eab6:	5f                   	pop    edi
c001eab7:	5d                   	pop    ebp
c001eab8:	c3                   	ret    
c001eab9:	8d 76 00             	lea    esi,[esi+0x0]
c001eabc:	5b                   	pop    ebx
c001eabd:	8d 47 02             	lea    eax,[edi+0x2]
c001eac0:	5e                   	pop    esi
c001eac1:	5f                   	pop    edi
c001eac2:	5d                   	pop    ebp
c001eac3:	c3                   	ret    
c001eac4:	5b                   	pop    ebx
c001eac5:	31 c0                	xor    eax,eax
c001eac7:	5e                   	pop    esi
c001eac8:	5f                   	pop    edi
c001eac9:	5d                   	pop    ebp
c001eaca:	c3                   	ret    
c001eacb:	90                   	nop
c001eacc:	b8 01 00 00 00       	mov    eax,0x1
c001ead1:	eb e1                	jmp    c001eab4 <SoundPort::buffer8(signed char*, int)+0x74>
c001ead3:	90                   	nop

c001ead4 <SoundPort::buffer16(short*, int)>:
c001ead4:	55                   	push   ebp
c001ead5:	57                   	push   edi
c001ead6:	56                   	push   esi
c001ead7:	53                   	push   ebx
c001ead8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eadc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001eae0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001eae3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001eae6:	74 70                	je     c001eb58 <SoundPort::buffer16(short*, int)+0x84>
c001eae8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001eaec:	85 c9                	test   ecx,ecx
c001eaee:	7e 68                	jle    c001eb58 <SoundPort::buffer16(short*, int)+0x84>
c001eaf0:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001eaf4:	8d 48 01             	lea    ecx,[eax+0x1]
c001eaf7:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001eafa:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001eafd:	89 f1                	mov    ecx,esi
c001eaff:	c1 e1 10             	shl    ecx,0x10
c001eb02:	29 f1                	sub    ecx,esi
c001eb04:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001eb07:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001eb0a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001eb0d:	74 51                	je     c001eb60 <SoundPort::buffer16(short*, int)+0x8c>
c001eb0f:	31 ff                	xor    edi,edi
c001eb11:	eb 25                	jmp    c001eb38 <SoundPort::buffer16(short*, int)+0x64>
c001eb13:	90                   	nop
c001eb14:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001eb19:	8d 59 01             	lea    ebx,[ecx+0x1]
c001eb1c:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001eb1f:	89 f3                	mov    ebx,esi
c001eb21:	c1 e3 10             	shl    ebx,0x10
c001eb24:	29 f3                	sub    ebx,esi
c001eb26:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001eb29:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001eb2c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001eb2f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001eb32:	74 1c                	je     c001eb50 <SoundPort::buffer16(short*, int)+0x7c>
c001eb34:	89 c7                	mov    edi,eax
c001eb36:	66 90                	xchg   ax,ax
c001eb38:	8d 47 01             	lea    eax,[edi+0x1]
c001eb3b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001eb3f:	75 d3                	jne    c001eb14 <SoundPort::buffer16(short*, int)+0x40>
c001eb41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eb45:	8d 76 00             	lea    esi,[esi+0x0]
c001eb48:	5b                   	pop    ebx
c001eb49:	5e                   	pop    esi
c001eb4a:	5f                   	pop    edi
c001eb4b:	5d                   	pop    ebp
c001eb4c:	c3                   	ret    
c001eb4d:	8d 76 00             	lea    esi,[esi+0x0]
c001eb50:	5b                   	pop    ebx
c001eb51:	8d 47 02             	lea    eax,[edi+0x2]
c001eb54:	5e                   	pop    esi
c001eb55:	5f                   	pop    edi
c001eb56:	5d                   	pop    ebp
c001eb57:	c3                   	ret    
c001eb58:	5b                   	pop    ebx
c001eb59:	31 c0                	xor    eax,eax
c001eb5b:	5e                   	pop    esi
c001eb5c:	5f                   	pop    edi
c001eb5d:	5d                   	pop    ebp
c001eb5e:	c3                   	ret    
c001eb5f:	90                   	nop
c001eb60:	b8 01 00 00 00       	mov    eax,0x1
c001eb65:	eb e1                	jmp    c001eb48 <SoundPort::buffer16(short*, int)+0x74>
c001eb67:	90                   	nop

c001eb68 <SoundPort::buffer32(int*, int)>:
c001eb68:	55                   	push   ebp
c001eb69:	57                   	push   edi
c001eb6a:	56                   	push   esi
c001eb6b:	53                   	push   ebx
c001eb6c:	83 ec 04             	sub    esp,0x4
c001eb6f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001eb73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001eb7b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001eb7e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001eb81:	89 04 24             	mov    DWORD PTR [esp],eax
c001eb84:	74 5a                	je     c001ebe0 <SoundPort::buffer32(int*, int)+0x78>
c001eb86:	85 c0                	test   eax,eax
c001eb88:	7e 56                	jle    c001ebe0 <SoundPort::buffer32(int*, int)+0x78>
c001eb8a:	8d 71 01             	lea    esi,[ecx+0x1]
c001eb8d:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001eb90:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001eb93:	8b 37                	mov    esi,DWORD PTR [edi]
c001eb95:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001eb98:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001eb9b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001eb9e:	74 4c                	je     c001ebec <SoundPort::buffer32(int*, int)+0x84>
c001eba0:	31 f6                	xor    esi,esi
c001eba2:	eb 1c                	jmp    c001ebc0 <SoundPort::buffer32(int*, int)+0x58>
c001eba4:	8d 69 01             	lea    ebp,[ecx+0x1]
c001eba7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001ebaa:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001ebad:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001ebb0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001ebb4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ebb7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ebba:	74 18                	je     c001ebd4 <SoundPort::buffer32(int*, int)+0x6c>
c001ebbc:	89 de                	mov    esi,ebx
c001ebbe:	66 90                	xchg   ax,ax
c001ebc0:	8d 5e 01             	lea    ebx,[esi+0x1]
c001ebc3:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001ebc6:	75 dc                	jne    c001eba4 <SoundPort::buffer32(int*, int)+0x3c>
c001ebc8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ebcb:	90                   	nop
c001ebcc:	83 c4 04             	add    esp,0x4
c001ebcf:	5b                   	pop    ebx
c001ebd0:	5e                   	pop    esi
c001ebd1:	5f                   	pop    edi
c001ebd2:	5d                   	pop    ebp
c001ebd3:	c3                   	ret    
c001ebd4:	8d 46 02             	lea    eax,[esi+0x2]
c001ebd7:	83 c4 04             	add    esp,0x4
c001ebda:	5b                   	pop    ebx
c001ebdb:	5e                   	pop    esi
c001ebdc:	5f                   	pop    edi
c001ebdd:	5d                   	pop    ebp
c001ebde:	c3                   	ret    
c001ebdf:	90                   	nop
c001ebe0:	83 c4 04             	add    esp,0x4
c001ebe3:	31 c0                	xor    eax,eax
c001ebe5:	5b                   	pop    ebx
c001ebe6:	5e                   	pop    esi
c001ebe7:	5f                   	pop    edi
c001ebe8:	5d                   	pop    ebp
c001ebe9:	c3                   	ret    
c001ebea:	66 90                	xchg   ax,ax
c001ebec:	b8 01 00 00 00       	mov    eax,0x1
c001ebf1:	eb d9                	jmp    c001ebcc <SoundPort::buffer32(int*, int)+0x64>
c001ebf3:	90                   	nop

c001ebf4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001ebf4:	55                   	push   ebp
c001ebf5:	57                   	push   edi
c001ebf6:	56                   	push   esi
c001ebf7:	53                   	push   ebx
c001ebf8:	83 ec 0c             	sub    esp,0xc
c001ebfb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ebff:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ec03:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ec07:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ec0b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001ec11:	39 03                	cmp    DWORD PTR [ebx],eax
c001ec13:	74 13                	je     c001ec28 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001ec15:	83 ec 0c             	sub    esp,0xc
c001ec18:	68 30 b6 02 c0       	push   0xc002b630
c001ec1d:	e8 06 17 ff ff       	call   c0010328 <KePanic(char const*)>
c001ec22:	83 c4 10             	add    esp,0x10
c001ec25:	8d 76 00             	lea    esi,[esi+0x0]
c001ec28:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001ec2e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001ec31:	74 11                	je     c001ec44 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001ec33:	83 ec 0c             	sub    esp,0xc
c001ec36:	68 6f b6 02 c0       	push   0xc002b66f
c001ec3b:	e8 e8 16 ff ff       	call   c0010328 <KePanic(char const*)>
c001ec40:	83 c4 10             	add    esp,0x10
c001ec43:	90                   	nop
c001ec44:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001ec4a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001ec4d:	74 11                	je     c001ec60 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001ec4f:	83 ec 0c             	sub    esp,0xc
c001ec52:	68 6f b6 02 c0       	push   0xc002b66f
c001ec57:	e8 cc 16 ff ff       	call   c0010328 <KePanic(char const*)>
c001ec5c:	83 c4 10             	add    esp,0x10
c001ec5f:	90                   	nop
c001ec60:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001ec63:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001ec67:	85 f6                	test   esi,esi
c001ec69:	7e 2d                	jle    c001ec98 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001ec6b:	31 c0                	xor    eax,eax
c001ec6d:	8d 76 00             	lea    esi,[esi+0x0]
c001ec70:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ec73:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001ec76:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001ec7c:	85 c9                	test   ecx,ecx
c001ec7e:	0f 49 d1             	cmovns edx,ecx
c001ec81:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001ec85:	c1 fa 0f             	sar    edx,0xf
c001ec88:	01 d1                	add    ecx,edx
c001ec8a:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001ec8e:	83 c0 01             	add    eax,0x1
c001ec91:	39 f0                	cmp    eax,esi
c001ec93:	75 db                	jne    c001ec70 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001ec95:	8d 76 00             	lea    esi,[esi+0x0]
c001ec98:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec9b:	83 ec 04             	sub    esp,0x4
c001ec9e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001eca1:	29 f0                	sub    eax,esi
c001eca3:	c1 e0 02             	shl    eax,0x2
c001eca6:	50                   	push   eax
c001eca7:	8d 04 b2             	lea    eax,[edx+esi*4]
c001ecaa:	50                   	push   eax
c001ecab:	52                   	push   edx
c001ecac:	e8 1f 17 fe ff       	call   c00003d0 <memmove>
c001ecb1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ecb4:	29 f0                	sub    eax,esi
c001ecb6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ecb9:	83 c4 1c             	add    esp,0x1c
c001ecbc:	89 f0                	mov    eax,esi
c001ecbe:	5b                   	pop    ebx
c001ecbf:	5e                   	pop    esi
c001ecc0:	5f                   	pop    edi
c001ecc1:	5d                   	pop    ebp
c001ecc2:	c3                   	ret    
c001ecc3:	90                   	nop

c001ecc4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001ecc4:	55                   	push   ebp
c001ecc5:	57                   	push   edi
c001ecc6:	56                   	push   esi
c001ecc7:	53                   	push   ebx
c001ecc8:	83 ec 0c             	sub    esp,0xc
c001eccb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001eccf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ecd3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001ecd7:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ecdb:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001ece1:	39 03                	cmp    DWORD PTR [ebx],eax
c001ece3:	74 13                	je     c001ecf8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001ece5:	83 ec 0c             	sub    esp,0xc
c001ece8:	68 50 b6 02 c0       	push   0xc002b650
c001eced:	e8 36 16 ff ff       	call   c0010328 <KePanic(char const*)>
c001ecf2:	83 c4 10             	add    esp,0x10
c001ecf5:	8d 76 00             	lea    esi,[esi+0x0]
c001ecf8:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001ecfe:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001ed01:	74 11                	je     c001ed14 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001ed03:	83 ec 0c             	sub    esp,0xc
c001ed06:	68 8b b6 02 c0       	push   0xc002b68b
c001ed0b:	e8 18 16 ff ff       	call   c0010328 <KePanic(char const*)>
c001ed10:	83 c4 10             	add    esp,0x10
c001ed13:	90                   	nop
c001ed14:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001ed1a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001ed1d:	74 11                	je     c001ed30 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001ed1f:	83 ec 0c             	sub    esp,0xc
c001ed22:	68 8b b6 02 c0       	push   0xc002b68b
c001ed27:	e8 fc 15 ff ff       	call   c0010328 <KePanic(char const*)>
c001ed2c:	83 c4 10             	add    esp,0x10
c001ed2f:	90                   	nop
c001ed30:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001ed33:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001ed37:	85 ff                	test   edi,edi
c001ed39:	7e 21                	jle    c001ed5c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001ed3b:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001ed42:	31 c0                	xor    eax,eax
c001ed44:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ed47:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001ed4a:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001ed4d:	01 d5                	add    ebp,edx
c001ed4f:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001ed52:	83 c0 04             	add    eax,0x4
c001ed55:	39 c1                	cmp    ecx,eax
c001ed57:	75 eb                	jne    c001ed44 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001ed59:	8d 76 00             	lea    esi,[esi+0x0]
c001ed5c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ed5f:	83 ec 04             	sub    esp,0x4
c001ed62:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ed65:	29 f8                	sub    eax,edi
c001ed67:	c1 e0 02             	shl    eax,0x2
c001ed6a:	50                   	push   eax
c001ed6b:	8d 04 ba             	lea    eax,[edx+edi*4]
c001ed6e:	50                   	push   eax
c001ed6f:	52                   	push   edx
c001ed70:	e8 5b 16 fe ff       	call   c00003d0 <memmove>
c001ed75:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ed78:	29 f8                	sub    eax,edi
c001ed7a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ed7d:	83 c4 1c             	add    esp,0x1c
c001ed80:	89 f8                	mov    eax,edi
c001ed82:	5b                   	pop    ebx
c001ed83:	5e                   	pop    esi
c001ed84:	5f                   	pop    edi
c001ed85:	5d                   	pop    ebp
c001ed86:	c3                   	ret    
c001ed87:	90                   	nop

c001ed88 <PCI::open(int, int, void*)>:
c001ed88:	83 ec 18             	sub    esp,0x18
c001ed8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ed8f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ed93:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ed99:	8b 10                	mov    edx,DWORD PTR [eax]
c001ed9b:	50                   	push   eax
c001ed9c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ed9f:	31 c0                	xor    eax,eax
c001eda1:	83 c4 1c             	add    esp,0x1c
c001eda4:	c3                   	ret    
c001eda5:	90                   	nop

c001eda6 <PCI::close(int, int, void*)>:
c001eda6:	31 c0                	xor    eax,eax
c001eda8:	c3                   	ret    
c001eda9:	90                   	nop

c001edaa <PCI::PCI()>:
c001edaa:	83 ec 0c             	sub    esp,0xc
c001edad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb1:	83 ec 08             	sub    esp,0x8
c001edb4:	68 40 b3 02 c0       	push   0xc002b340
c001edb9:	50                   	push   eax
c001edba:	e8 f1 a3 fe ff       	call   c00091b0 <Bus::Bus(char const*)>
c001edbf:	83 c4 10             	add    esp,0x10
c001edc2:	ba ac b7 02 c0       	mov    edx,0xc002b7ac
c001edc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edcb:	89 10                	mov    DWORD PTR [eax],edx
c001edcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edd1:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001eddb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eddf:	a3 a0 5d 03 c0       	mov    ds:0xc0035da0,eax
c001ede4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ede8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001edee:	0f b6 d0             	movzx  edx,al
c001edf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edf5:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001edfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee00:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ee06:	0f b6 d0             	movzx  edx,al
c001ee09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee0d:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001ee12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee16:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ee1c:	8d 50 01             	lea    edx,[eax+0x1]
c001ee1f:	88 d1                	mov    cl,dl
c001ee21:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee25:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ee2b:	0f b6 d0             	movzx  edx,al
c001ee2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee32:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ee36:	83 c9 c0             	or     ecx,0xffffffc0
c001ee39:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ee3d:	90                   	nop
c001ee3e:	83 c4 0c             	add    esp,0xc
c001ee41:	c3                   	ret    

c001ee42 <PCI::readBAR8(unsigned int, int)>:
c001ee42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ee46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee4a:	f6 c2 01             	test   dl,0x1
c001ee4d:	74 07                	je     c001ee56 <PCI::readBAR8(unsigned int, int)+0x14>
c001ee4f:	83 e2 fc             	and    edx,0xfffffffc
c001ee52:	01 c2                	add    edx,eax
c001ee54:	ec                   	in     al,dx
c001ee55:	c3                   	ret    
c001ee56:	83 e2 f0             	and    edx,0xfffffff0
c001ee59:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001ee5c:	c3                   	ret    
c001ee5d:	90                   	nop

c001ee5e <PCI::readBAR16(unsigned int, int)>:
c001ee5e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ee62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee66:	f6 c2 01             	test   dl,0x1
c001ee69:	74 08                	je     c001ee73 <PCI::readBAR16(unsigned int, int)+0x15>
c001ee6b:	83 e2 fc             	and    edx,0xfffffffc
c001ee6e:	01 c2                	add    edx,eax
c001ee70:	66 ed                	in     ax,dx
c001ee72:	c3                   	ret    
c001ee73:	83 e2 f0             	and    edx,0xfffffff0
c001ee76:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001ee7a:	c3                   	ret    
c001ee7b:	90                   	nop

c001ee7c <PCI::readBAR32(unsigned int, int)>:
c001ee7c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ee80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee84:	f6 c2 01             	test   dl,0x1
c001ee87:	74 07                	je     c001ee90 <PCI::readBAR32(unsigned int, int)+0x14>
c001ee89:	83 e2 fc             	and    edx,0xfffffffc
c001ee8c:	01 c2                	add    edx,eax
c001ee8e:	ed                   	in     eax,dx
c001ee8f:	c3                   	ret    
c001ee90:	83 e2 f0             	and    edx,0xfffffff0
c001ee93:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001ee96:	c3                   	ret    
c001ee97:	90                   	nop

c001ee98 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001ee98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ee9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eea0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eea4:	f6 c2 01             	test   dl,0x1
c001eea7:	74 07                	je     c001eeb0 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001eea9:	83 e2 fc             	and    edx,0xfffffffc
c001eeac:	01 ca                	add    edx,ecx
c001eeae:	ee                   	out    dx,al
c001eeaf:	c3                   	ret    
c001eeb0:	83 e2 f0             	and    edx,0xfffffff0
c001eeb3:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001eeb6:	c3                   	ret    
c001eeb7:	90                   	nop

c001eeb8 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001eeb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001eebc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eec0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eec4:	f6 c2 01             	test   dl,0x1
c001eec7:	74 08                	je     c001eed1 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001eec9:	83 e2 fc             	and    edx,0xfffffffc
c001eecc:	01 ca                	add    edx,ecx
c001eece:	66 ef                	out    dx,ax
c001eed0:	c3                   	ret    
c001eed1:	83 e2 f0             	and    edx,0xfffffff0
c001eed4:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001eed8:	c3                   	ret    
c001eed9:	90                   	nop

c001eeda <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001eeda:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001eede:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eee2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eee6:	f6 c2 01             	test   dl,0x1
c001eee9:	74 07                	je     c001eef2 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001eeeb:	83 e2 fc             	and    edx,0xfffffffc
c001eeee:	01 ca                	add    edx,ecx
c001eef0:	ef                   	out    dx,eax
c001eef1:	c3                   	ret    
c001eef2:	83 e2 f0             	and    edx,0xfffffff0
c001eef5:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001eef8:	c3                   	ret    
c001eef9:	90                   	nop

c001eefa <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001eefa:	55                   	push   ebp
c001eefb:	57                   	push   edi
c001eefc:	56                   	push   esi
c001eefd:	53                   	push   ebx
c001eefe:	83 ec 0c             	sub    esp,0xc
c001ef01:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001ef06:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001ef0a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ef0e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ef12:	83 fe 07             	cmp    esi,0x7
c001ef15:	76 10                	jbe    c001ef27 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001ef17:	83 ec 0c             	sub    esp,0xc
c001ef1a:	68 a7 b6 02 c0       	push   0xc002b6a7
c001ef1f:	e8 04 14 ff ff       	call   c0010328 <KePanic(char const*)>
c001ef24:	83 c4 10             	add    esp,0x10
c001ef27:	0f b6 db             	movzx  ebx,bl
c001ef2a:	83 fb 0f             	cmp    ebx,0xf
c001ef2d:	76 10                	jbe    c001ef3f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001ef2f:	83 ec 0c             	sub    esp,0xc
c001ef32:	68 d7 b6 02 c0       	push   0xc002b6d7
c001ef37:	e8 ec 13 ff ff       	call   c0010328 <KePanic(char const*)>
c001ef3c:	83 c4 10             	add    esp,0x10
c001ef3f:	8d 04 36             	lea    eax,[esi+esi*1]
c001ef42:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ef47:	83 c8 f0             	or     eax,0xfffffff0
c001ef4a:	ee                   	out    dx,al
c001ef4b:	ba fa 0c 00 00       	mov    edx,0xcfa
c001ef50:	89 e8                	mov    eax,ebp
c001ef52:	ee                   	out    dx,al
c001ef53:	89 f9                	mov    ecx,edi
c001ef55:	89 d8                	mov    eax,ebx
c001ef57:	0f b6 d9             	movzx  ebx,cl
c001ef5a:	83 c4 0c             	add    esp,0xc
c001ef5d:	c1 e0 08             	shl    eax,0x8
c001ef60:	83 e3 fc             	and    ebx,0xfffffffc
c001ef63:	09 d8                	or     eax,ebx
c001ef65:	5b                   	pop    ebx
c001ef66:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001ef6b:	5e                   	pop    esi
c001ef6c:	5f                   	pop    edi
c001ef6d:	5d                   	pop    ebp
c001ef6e:	c3                   	ret    
c001ef6f:	90                   	nop

c001ef70 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ef70:	57                   	push   edi
c001ef71:	56                   	push   esi
c001ef72:	53                   	push   ebx
c001ef73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ef77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ef7b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ef7f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ef83:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001ef89:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ef8d:	83 ff 01             	cmp    edi,0x1
c001ef90:	75 3f                	jne    c001efd1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001ef92:	89 de                	mov    esi,ebx
c001ef94:	0f b6 c0             	movzx  eax,al
c001ef97:	c1 e0 10             	shl    eax,0x10
c001ef9a:	81 e6 fc 00 00 00    	and    esi,0xfc
c001efa0:	0f b6 c9             	movzx  ecx,cl
c001efa3:	09 f0                	or     eax,esi
c001efa5:	c1 e1 08             	shl    ecx,0x8
c001efa8:	0f b6 d2             	movzx  edx,dl
c001efab:	c1 e2 0b             	shl    edx,0xb
c001efae:	09 c8                	or     eax,ecx
c001efb0:	09 d0                	or     eax,edx
c001efb2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001efb7:	0d 00 00 00 80       	or     eax,0x80000000
c001efbc:	ef                   	out    dx,eax
c001efbd:	ba fc 0c 00 00       	mov    edx,0xcfc
c001efc2:	ed                   	in     eax,dx
c001efc3:	83 e3 02             	and    ebx,0x2
c001efc6:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001efcd:	d3 e8                	shr    eax,cl
c001efcf:	eb 44                	jmp    c001f015 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001efd1:	83 ff 02             	cmp    edi,0x2
c001efd4:	75 2d                	jne    c001f003 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001efd6:	83 ec 0c             	sub    esp,0xc
c001efd9:	0f b6 fb             	movzx  edi,bl
c001efdc:	57                   	push   edi
c001efdd:	0f b6 c9             	movzx  ecx,cl
c001efe0:	51                   	push   ecx
c001efe1:	0f b6 d2             	movzx  edx,dl
c001efe4:	52                   	push   edx
c001efe5:	0f b6 c0             	movzx  eax,al
c001efe8:	50                   	push   eax
c001efe9:	56                   	push   esi
c001efea:	e8 0b ff ff ff       	call   c001eefa <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001efef:	89 c2                	mov    edx,eax
c001eff1:	ed                   	in     eax,dx
c001eff2:	83 e3 02             	and    ebx,0x2
c001eff5:	83 c4 20             	add    esp,0x20
c001eff8:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001efff:	d3 e8                	shr    eax,cl
c001f001:	eb 12                	jmp    c001f015 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001f003:	83 ec 0c             	sub    esp,0xc
c001f006:	68 07 b7 02 c0       	push   0xc002b707
c001f00b:	e8 18 13 ff ff       	call   c0010328 <KePanic(char const*)>
c001f010:	83 c4 10             	add    esp,0x10
c001f013:	31 c0                	xor    eax,eax
c001f015:	5b                   	pop    ebx
c001f016:	5e                   	pop    esi
c001f017:	5f                   	pop    edi
c001f018:	c3                   	ret    
c001f019:	90                   	nop

c001f01a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001f01a:	83 ec 18             	sub    esp,0x18
c001f01d:	6a 00                	push   0x0
c001f01f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f024:	50                   	push   eax
c001f025:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f02a:	50                   	push   eax
c001f02b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f030:	50                   	push   eax
c001f031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f035:	e8 36 ff ff ff       	call   c001ef70 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f03a:	83 c4 2c             	add    esp,0x2c
c001f03d:	c3                   	ret    

c001f03e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001f03e:	83 ec 18             	sub    esp,0x18
c001f041:	6a 0e                	push   0xe
c001f043:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f048:	50                   	push   eax
c001f049:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f04e:	50                   	push   eax
c001f04f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f054:	50                   	push   eax
c001f055:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f059:	e8 12 ff ff ff       	call   c001ef70 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f05e:	83 c4 2c             	add    esp,0x2c
c001f061:	0f b6 c0             	movzx  eax,al
c001f064:	c3                   	ret    
c001f065:	90                   	nop

c001f066 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001f066:	55                   	push   ebp
c001f067:	57                   	push   edi
c001f068:	56                   	push   esi
c001f069:	53                   	push   ebx
c001f06a:	83 ec 18             	sub    esp,0x18
c001f06d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001f072:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001f077:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001f07c:	6a 0a                	push   0xa
c001f07e:	56                   	push   esi
c001f07f:	55                   	push   ebp
c001f080:	57                   	push   edi
c001f081:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f085:	e8 e6 fe ff ff       	call   c001ef70 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f08a:	83 c4 14             	add    esp,0x14
c001f08d:	6a 0a                	push   0xa
c001f08f:	56                   	push   esi
c001f090:	55                   	push   ebp
c001f091:	57                   	push   edi
c001f092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f096:	89 c3                	mov    ebx,eax
c001f098:	0f b6 db             	movzx  ebx,bl
c001f09b:	e8 d0 fe ff ff       	call   c001ef70 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f0a0:	83 c4 2c             	add    esp,0x2c
c001f0a3:	25 00 ff 00 00       	and    eax,0xff00
c001f0a8:	09 d8                	or     eax,ebx
c001f0aa:	5b                   	pop    ebx
c001f0ab:	5e                   	pop    esi
c001f0ac:	5f                   	pop    edi
c001f0ad:	5d                   	pop    ebp
c001f0ae:	c3                   	ret    
c001f0af:	90                   	nop

c001f0b0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001f0b0:	83 ec 18             	sub    esp,0x18
c001f0b3:	6a 08                	push   0x8
c001f0b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f0ba:	50                   	push   eax
c001f0bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f0c0:	50                   	push   eax
c001f0c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f0c6:	50                   	push   eax
c001f0c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f0cb:	e8 a0 fe ff ff       	call   c001ef70 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f0d0:	83 c4 2c             	add    esp,0x2c
c001f0d3:	0f b6 c4             	movzx  eax,ah
c001f0d6:	c3                   	ret    
c001f0d7:	90                   	nop

c001f0d8 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001f0d8:	83 ec 18             	sub    esp,0x18
c001f0db:	6a 08                	push   0x8
c001f0dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f0e2:	50                   	push   eax
c001f0e3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f0e8:	50                   	push   eax
c001f0e9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f0ee:	50                   	push   eax
c001f0ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f0f3:	e8 78 fe ff ff       	call   c001ef70 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f0f8:	83 c4 2c             	add    esp,0x2c
c001f0fb:	c3                   	ret    

c001f0fc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001f0fc:	83 ec 18             	sub    esp,0x18
c001f0ff:	6a 3c                	push   0x3c
c001f101:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f106:	50                   	push   eax
c001f107:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f10c:	50                   	push   eax
c001f10d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f112:	50                   	push   eax
c001f113:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f117:	e8 54 fe ff ff       	call   c001ef70 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f11c:	83 c4 2c             	add    esp,0x2c
c001f11f:	c3                   	ret    

c001f120 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001f120:	83 ec 18             	sub    esp,0x18
c001f123:	6a 18                	push   0x18
c001f125:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f12a:	50                   	push   eax
c001f12b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f130:	50                   	push   eax
c001f131:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f136:	50                   	push   eax
c001f137:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f13b:	e8 30 fe ff ff       	call   c001ef70 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f140:	83 c4 2c             	add    esp,0x2c
c001f143:	0f b6 c4             	movzx  eax,ah
c001f146:	c3                   	ret    
c001f147:	90                   	nop

c001f148 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001f148:	55                   	push   ebp
c001f149:	57                   	push   edi
c001f14a:	56                   	push   esi
c001f14b:	53                   	push   ebx
c001f14c:	83 ec 28             	sub    esp,0x28
c001f14f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001f153:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001f158:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001f15d:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001f162:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001f169:	8d 43 12             	lea    eax,[ebx+0x12]
c001f16c:	83 c3 10             	add    ebx,0x10
c001f16f:	0f b6 c0             	movzx  eax,al
c001f172:	0f b6 db             	movzx  ebx,bl
c001f175:	50                   	push   eax
c001f176:	51                   	push   ecx
c001f177:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001f17b:	57                   	push   edi
c001f17c:	55                   	push   ebp
c001f17d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f181:	e8 ea fd ff ff       	call   c001ef70 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f186:	83 c4 14             	add    esp,0x14
c001f189:	53                   	push   ebx
c001f18a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f18e:	51                   	push   ecx
c001f18f:	89 c6                	mov    esi,eax
c001f191:	57                   	push   edi
c001f192:	55                   	push   ebp
c001f193:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f197:	c1 e6 10             	shl    esi,0x10
c001f19a:	e8 d1 fd ff ff       	call   c001ef70 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f19f:	83 c4 3c             	add    esp,0x3c
c001f1a2:	5b                   	pop    ebx
c001f1a3:	0f b7 c0             	movzx  eax,ax
c001f1a6:	09 f0                	or     eax,esi
c001f1a8:	5e                   	pop    esi
c001f1a9:	5f                   	pop    edi
c001f1aa:	5d                   	pop    ebp
c001f1ab:	c3                   	ret    

c001f1ac <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001f1ac:	55                   	push   ebp
c001f1ad:	57                   	push   edi
c001f1ae:	56                   	push   esi
c001f1af:	53                   	push   ebx
c001f1b0:	83 ec 0c             	sub    esp,0xc
c001f1b3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001f1b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f1bb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f1bf:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001f1c3:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001f1c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f1cd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f1d1:	83 f9 01             	cmp    ecx,0x1
c001f1d4:	75 5d                	jne    c001f233 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001f1d6:	0f b6 c8             	movzx  ecx,al
c001f1d9:	89 f0                	mov    eax,esi
c001f1db:	25 fc 00 00 00       	and    eax,0xfc
c001f1e0:	0f b6 d2             	movzx  edx,dl
c001f1e3:	c1 e1 10             	shl    ecx,0x10
c001f1e6:	c1 e2 0b             	shl    edx,0xb
c001f1e9:	09 c1                	or     ecx,eax
c001f1eb:	89 f8                	mov    eax,edi
c001f1ed:	0f b6 f8             	movzx  edi,al
c001f1f0:	c1 e7 08             	shl    edi,0x8
c001f1f3:	09 f9                	or     ecx,edi
c001f1f5:	09 d1                	or     ecx,edx
c001f1f7:	ba f8 0c 00 00       	mov    edx,0xcf8
c001f1fc:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001f202:	89 c8                	mov    eax,ecx
c001f204:	ef                   	out    dx,eax
c001f205:	ba fc 0c 00 00       	mov    edx,0xcfc
c001f20a:	ed                   	in     eax,dx
c001f20b:	83 e6 02             	and    esi,0x2
c001f20e:	0f b7 db             	movzx  ebx,bx
c001f211:	74 0a                	je     c001f21d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001f213:	c1 e3 10             	shl    ebx,0x10
c001f216:	0f b7 d0             	movzx  edx,ax
c001f219:	09 d3                	or     ebx,edx
c001f21b:	eb 05                	jmp    c001f222 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001f21d:	66 31 c0             	xor    ax,ax
c001f220:	09 c3                	or     ebx,eax
c001f222:	ba f8 0c 00 00       	mov    edx,0xcf8
c001f227:	89 c8                	mov    eax,ecx
c001f229:	ef                   	out    dx,eax
c001f22a:	ba fc 0c 00 00       	mov    edx,0xcfc
c001f22f:	89 d8                	mov    eax,ebx
c001f231:	eb 41                	jmp    c001f274 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001f233:	83 f9 02             	cmp    ecx,0x2
c001f236:	75 45                	jne    c001f27d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001f238:	89 f1                	mov    ecx,esi
c001f23a:	83 ec 0c             	sub    esp,0xc
c001f23d:	0f b6 f1             	movzx  esi,cl
c001f240:	89 f9                	mov    ecx,edi
c001f242:	56                   	push   esi
c001f243:	0f b6 f9             	movzx  edi,cl
c001f246:	57                   	push   edi
c001f247:	0f b6 d2             	movzx  edx,dl
c001f24a:	52                   	push   edx
c001f24b:	0f b6 c0             	movzx  eax,al
c001f24e:	50                   	push   eax
c001f24f:	55                   	push   ebp
c001f250:	e8 a5 fc ff ff       	call   c001eefa <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f255:	89 c2                	mov    edx,eax
c001f257:	ed                   	in     eax,dx
c001f258:	83 c4 20             	add    esp,0x20
c001f25b:	f6 c2 02             	test   dl,0x2
c001f25e:	0f b7 db             	movzx  ebx,bx
c001f261:	74 0c                	je     c001f26f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001f263:	0f b7 c8             	movzx  ecx,ax
c001f266:	89 d8                	mov    eax,ebx
c001f268:	c1 e0 10             	shl    eax,0x10
c001f26b:	09 c8                	or     eax,ecx
c001f26d:	eb 05                	jmp    c001f274 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001f26f:	66 31 c0             	xor    ax,ax
c001f272:	09 d8                	or     eax,ebx
c001f274:	ef                   	out    dx,eax
c001f275:	83 c4 0c             	add    esp,0xc
c001f278:	5b                   	pop    ebx
c001f279:	5e                   	pop    esi
c001f27a:	5f                   	pop    edi
c001f27b:	5d                   	pop    ebp
c001f27c:	c3                   	ret    
c001f27d:	c7 44 24 20 07 b7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b707
c001f285:	83 c4 0c             	add    esp,0xc
c001f288:	5b                   	pop    ebx
c001f289:	5e                   	pop    esi
c001f28a:	5f                   	pop    edi
c001f28b:	5d                   	pop    ebp
c001f28c:	e9 97 10 ff ff       	jmp    c0010328 <KePanic(char const*)>
c001f291:	90                   	nop

c001f292 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001f292:	55                   	push   ebp
c001f293:	57                   	push   edi
c001f294:	56                   	push   esi
c001f295:	53                   	push   ebx
c001f296:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001f29c:	80 3d ac 5d 03 c0 00 	cmp    BYTE PTR ds:0xc0035dac,0x0
c001f2a3:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001f2aa:	0f 85 bd 00 00 00    	jne    c001f36d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001f2b0:	83 ec 0c             	sub    esp,0xc
c001f2b3:	68 14 01 00 00       	push   0x114
c001f2b8:	e8 17 0c ff ff       	call   c000fed4 <malloc>
c001f2bd:	83 c4 0c             	add    esp,0xc
c001f2c0:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c001f2c6:	68 0d b7 02 c0       	push   0xc002b70d
c001f2cb:	50                   	push   eax
c001f2cc:	89 c3                	mov    ebx,eax
c001f2ce:	e8 01 97 fe ff       	call   c00089d4 <File::File(char const*, Process*)>
c001f2d3:	83 c4 10             	add    esp,0x10
c001f2d6:	85 db                	test   ebx,ebx
c001f2d8:	0f 84 6b 02 00 00    	je     c001f549 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001f2de:	57                   	push   edi
c001f2df:	57                   	push   edi
c001f2e0:	6a 01                	push   0x1
c001f2e2:	53                   	push   ebx
c001f2e3:	e8 0a 97 fe ff       	call   c00089f2 <File::open(FileOpenMode)>
c001f2e8:	83 c4 10             	add    esp,0x10
c001f2eb:	85 c0                	test   eax,eax
c001f2ed:	0f 85 56 02 00 00    	jne    c001f549 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001f2f3:	52                   	push   edx
c001f2f4:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001f2f8:	50                   	push   eax
c001f2f9:	8d 44 24 48          	lea    eax,[esp+0x48]
c001f2fd:	50                   	push   eax
c001f2fe:	53                   	push   ebx
c001f2ff:	e8 f0 99 fe ff       	call   c0008cf4 <File::stat(unsigned long long*, bool*)>
c001f304:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f308:	40                   	inc    eax
c001f309:	89 04 24             	mov    DWORD PTR [esp],eax
c001f30c:	e8 c3 0b ff ff       	call   c000fed4 <malloc>
c001f311:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001f315:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001f319:	59                   	pop    ecx
c001f31a:	a3 a8 5d 03 c0       	mov    ds:0xc0035da8,eax
c001f31f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001f321:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001f325:	51                   	push   ecx
c001f326:	50                   	push   eax
c001f327:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001f32b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001f32f:	53                   	push   ebx
c001f330:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001f333:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001f337:	83 c4 20             	add    esp,0x20
c001f33a:	89 c8                	mov    eax,ecx
c001f33c:	99                   	cdq    
c001f33d:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001f341:	0f 85 02 02 00 00    	jne    c001f549 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001f347:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001f34b:	0f 85 f8 01 00 00    	jne    c001f549 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001f351:	83 ec 0c             	sub    esp,0xc
c001f354:	53                   	push   ebx
c001f355:	e8 f6 96 fe ff       	call   c0008a50 <File::close()>
c001f35a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f35e:	83 c4 10             	add    esp,0x10
c001f361:	c6 05 ac 5d 03 c0 01 	mov    BYTE PTR ds:0xc0035dac,0x1
c001f368:	a3 a4 5d 03 c0       	mov    ds:0xc0035da4,eax
c001f36d:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001f375:	31 c9                	xor    ecx,ecx
c001f377:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001f37e:	8b 2d a4 5d 03 c0    	mov    ebp,DWORD PTR ds:0xc0035da4
c001f384:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001f38b:	8b 15 a8 5d 03 c0    	mov    edx,DWORD PTR ds:0xc0035da8
c001f391:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001f396:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001f39e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001f3a3:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001f3ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001f3af:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001f3b7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001f3bb:	39 cd                	cmp    ebp,ecx
c001f3bd:	0f 8e 86 01 00 00    	jle    c001f549 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001f3c3:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001f3c6:	d4 40                	aam    0x40
c001f3c8:	d5 39                	aad    0x39
c001f3ca:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f3ce:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001f3d2:	d4 40                	aam    0x40
c001f3d4:	d5 39                	aad    0x39
c001f3d6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f3da:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001f3de:	d4 40                	aam    0x40
c001f3e0:	d5 39                	aad    0x39
c001f3e2:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001f3e6:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001f3ea:	d4 40                	aam    0x40
c001f3ec:	d5 39                	aad    0x39
c001f3ee:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001f3f2:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001f3f6:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001f3fa:	3c 56                	cmp    al,0x56
c001f3fc:	74 47                	je     c001f445 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001f3fe:	d4 40                	aam    0x40
c001f400:	d5 39                	aad    0x39
c001f402:	8d 58 d0             	lea    ebx,[eax-0x30]
c001f405:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001f409:	0f b6 db             	movzx  ebx,bl
c001f40c:	c1 e3 04             	shl    ebx,0x4
c001f40f:	d4 40                	aam    0x40
c001f411:	d5 39                	aad    0x39
c001f413:	83 e8 30             	sub    eax,0x30
c001f416:	0f b6 c0             	movzx  eax,al
c001f419:	09 c3                	or     ebx,eax
c001f41b:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001f41f:	c1 e3 04             	shl    ebx,0x4
c001f422:	d4 40                	aam    0x40
c001f424:	d5 39                	aad    0x39
c001f426:	83 e8 30             	sub    eax,0x30
c001f429:	0f b6 c0             	movzx  eax,al
c001f42c:	09 c3                	or     ebx,eax
c001f42e:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001f432:	c1 e3 04             	shl    ebx,0x4
c001f435:	d4 40                	aam    0x40
c001f437:	d5 39                	aad    0x39
c001f439:	83 e8 30             	sub    eax,0x30
c001f43c:	0f b6 c0             	movzx  eax,al
c001f43f:	09 c3                	or     ebx,eax
c001f441:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001f445:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001f449:	80 fb 58             	cmp    bl,0x58
c001f44c:	74 49                	je     c001f497 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001f44e:	88 d8                	mov    al,bl
c001f450:	d4 40                	aam    0x40
c001f452:	d5 39                	aad    0x39
c001f454:	83 e8 30             	sub    eax,0x30
c001f457:	0f b6 f8             	movzx  edi,al
c001f45a:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001f45e:	c1 e7 04             	shl    edi,0x4
c001f461:	d4 40                	aam    0x40
c001f463:	d5 39                	aad    0x39
c001f465:	83 e8 30             	sub    eax,0x30
c001f468:	0f b6 c0             	movzx  eax,al
c001f46b:	09 c7                	or     edi,eax
c001f46d:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001f471:	c1 e7 04             	shl    edi,0x4
c001f474:	d4 40                	aam    0x40
c001f476:	d5 39                	aad    0x39
c001f478:	83 e8 30             	sub    eax,0x30
c001f47b:	0f b6 c0             	movzx  eax,al
c001f47e:	09 c7                	or     edi,eax
c001f480:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001f484:	c1 e7 04             	shl    edi,0x4
c001f487:	d4 40                	aam    0x40
c001f489:	d5 39                	aad    0x39
c001f48b:	83 e8 30             	sub    eax,0x30
c001f48e:	0f b6 c0             	movzx  eax,al
c001f491:	09 c7                	or     edi,eax
c001f493:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001f497:	8d 41 10             	lea    eax,[ecx+0x10]
c001f49a:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001f49e:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001f4a2:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001f4a6:	83 f9 0a             	cmp    ecx,0xa
c001f4a9:	74 07                	je     c001f4b2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001f4ab:	47                   	inc    edi
c001f4ac:	39 c5                	cmp    ebp,eax
c001f4ae:	75 16                	jne    c001f4c6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001f4b0:	89 e8                	mov    eax,ebp
c001f4b2:	83 f9 0a             	cmp    ecx,0xa
c001f4b5:	0f 94 c1             	sete   cl
c001f4b8:	0f b6 c9             	movzx  ecx,cl
c001f4bb:	01 c1                	add    ecx,eax
c001f4bd:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001f4c2:	75 0f                	jne    c001f4d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001f4c4:	eb 1c                	jmp    c001f4e2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001f4c6:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001f4c9:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001f4cd:	40                   	inc    eax
c001f4ce:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001f4d1:	eb cb                	jmp    c001f49e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001f4d3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f4d7:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001f4dc:	0f 85 d9 fe ff ff    	jne    c001f3bb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001f4e2:	80 fb 58             	cmp    bl,0x58
c001f4e5:	74 10                	je     c001f4f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001f4e7:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001f4ec:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001f4f1:	0f 85 c4 fe ff ff    	jne    c001f3bb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001f4f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f4fb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f4ff:	83 e8 30             	sub    eax,0x30
c001f502:	c1 e0 04             	shl    eax,0x4
c001f505:	83 eb 30             	sub    ebx,0x30
c001f508:	09 d8                	or     eax,ebx
c001f50a:	0f b6 c0             	movzx  eax,al
c001f50d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001f511:	0f 85 a4 fe ff ff    	jne    c001f3bb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001f517:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f51b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001f51f:	83 e8 30             	sub    eax,0x30
c001f522:	c1 e0 04             	shl    eax,0x4
c001f525:	83 eb 30             	sub    ebx,0x30
c001f528:	09 d8                	or     eax,ebx
c001f52a:	0f b6 c0             	movzx  eax,al
c001f52d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001f531:	0f 85 84 fe ff ff    	jne    c001f3bb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001f537:	50                   	push   eax
c001f538:	50                   	push   eax
c001f539:	8d 44 24 48          	lea    eax,[esp+0x48]
c001f53d:	50                   	push   eax
c001f53e:	56                   	push   esi
c001f53f:	e8 0c 11 fe ff       	call   c0000650 <strcpy>
c001f544:	83 c4 10             	add    esp,0x10
c001f547:	eb 05                	jmp    c001f54e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001f549:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001f54c:	31 f6                	xor    esi,esi
c001f54e:	81 c4 4c 01 00 00    	add    esp,0x14c
c001f554:	89 f0                	mov    eax,esi
c001f556:	5b                   	pop    ebx
c001f557:	5e                   	pop    esi
c001f558:	5f                   	pop    edi
c001f559:	5d                   	pop    ebp
c001f55a:	c3                   	ret    
c001f55b:	90                   	nop

c001f55c <PCI::checkBus(unsigned char)>:
c001f55c:	56                   	push   esi
c001f55d:	53                   	push   ebx
c001f55e:	31 db                	xor    ebx,ebx
c001f560:	51                   	push   ecx
c001f561:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f566:	52                   	push   edx
c001f567:	53                   	push   ebx
c001f568:	43                   	inc    ebx
c001f569:	56                   	push   esi
c001f56a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f56e:	e8 6f 03 00 00       	call   c001f8e2 <PCI::checkDevice(unsigned char, unsigned char)>
c001f573:	83 c4 10             	add    esp,0x10
c001f576:	83 fb 20             	cmp    ebx,0x20
c001f579:	75 eb                	jne    c001f566 <PCI::checkBus(unsigned char)+0xa>
c001f57b:	58                   	pop    eax
c001f57c:	5b                   	pop    ebx
c001f57d:	5e                   	pop    esi
c001f57e:	c3                   	ret    
c001f57f:	90                   	nop

c001f580 <PCI::foundDevice(PCIDeviceInfo)>:
c001f580:	55                   	push   ebp
c001f581:	57                   	push   edi
c001f582:	56                   	push   esi
c001f583:	53                   	push   ebx
c001f584:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001f58a:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001f592:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001f599:	3d ff ff 00 00       	cmp    eax,0xffff
c001f59e:	0f 84 b6 01 00 00    	je     c001f75a <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001f5a4:	0f b7 ac 24 a4 00 00 00 	movzx  ebp,WORD PTR [esp+0xa4]
c001f5ac:	66 81 fd 06 04       	cmp    bp,0x406
c001f5b1:	75 32                	jne    c001f5e5 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001f5b3:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001f5bb:	50                   	push   eax
c001f5bc:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001f5c4:	50                   	push   eax
c001f5c5:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001f5cd:	50                   	push   eax
c001f5ce:	53                   	push   ebx
c001f5cf:	e8 4c fb ff ff       	call   c001f120 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001f5d4:	59                   	pop    ecx
c001f5d5:	5e                   	pop    esi
c001f5d6:	0f b6 c0             	movzx  eax,al
c001f5d9:	50                   	push   eax
c001f5da:	53                   	push   ebx
c001f5db:	e8 7c ff ff ff       	call   c001f55c <PCI::checkBus(unsigned char)>
c001f5e0:	e9 15 01 00 00       	jmp    c001f6fa <PCI::foundDevice(PCIDeviceInfo)+0x17a>
c001f5e5:	0f b6 94 24 c4 00 00 00 	movzx  edx,BYTE PTR [esp+0xc4]
c001f5ed:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001f5f3:	8b 8c 24 a4 00 00 00 	mov    ecx,DWORD PTR [esp+0xa4]
c001f5fa:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001f601:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f605:	85 c0                	test   eax,eax
c001f607:	74 34                	je     c001f63d <PCI::foundDevice(PCIDeviceInfo)+0xbd>
c001f609:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001f60c:	85 d2                	test   edx,edx
c001f60e:	74 29                	je     c001f639 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001f610:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001f616:	31 cf                	xor    edi,ecx
c001f618:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001f61e:	75 19                	jne    c001f639 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001f620:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001f626:	75 11                	jne    c001f639 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001f628:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001f62f:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001f633:	0f 84 21 01 00 00    	je     c001f75a <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001f639:	8b 00                	mov    eax,DWORD PTR [eax]
c001f63b:	eb c8                	jmp    c001f605 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001f63d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001f641:	be 40 b7 02 c0       	mov    esi,0xc002b740
c001f646:	b9 07 00 00 00       	mov    ecx,0x7
c001f64b:	fc                   	cld    
c001f64c:	31 d2                	xor    edx,edx
c001f64e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001f650:	b9 12 00 00 00       	mov    ecx,0x12
c001f655:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001f65c:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001f660:	83 ec 0c             	sub    esp,0xc
c001f663:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f665:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001f66d:	b9 0a 00 00 00       	mov    ecx,0xa
c001f672:	f7 f1                	div    ecx
c001f674:	83 c0 30             	add    eax,0x30
c001f677:	83 c2 30             	add    edx,0x30
c001f67a:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001f67e:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001f686:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001f68a:	31 d2                	xor    edx,edx
c001f68c:	f7 f1                	div    ecx
c001f68e:	83 c0 30             	add    eax,0x30
c001f691:	83 c2 30             	add    edx,0x30
c001f694:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001f698:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001f69c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f6a0:	50                   	push   eax
c001f6a1:	e8 83 e3 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c001f6a6:	83 c4 10             	add    esp,0x10
c001f6a9:	81 fd 01 06 00 00    	cmp    ebp,0x601
c001f6af:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001f6b6:	75 47                	jne    c001f6ff <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c001f6b8:	83 ec 0c             	sub    esp,0xc
c001f6bb:	68 64 01 00 00       	push   0x164
c001f6c0:	e8 0f 08 ff ff       	call   c000fed4 <malloc>
c001f6c5:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6c8:	89 c5                	mov    ebp,eax
c001f6ca:	e8 37 11 00 00       	call   c0020806 <SATABus::SATABus()>
c001f6cf:	58                   	pop    eax
c001f6d0:	5a                   	pop    edx
c001f6d1:	55                   	push   ebp
c001f6d2:	53                   	push   ebx
c001f6d3:	e8 6a ab fe ff       	call   c000a242 <Device::addChild(Device*)>
c001f6d8:	83 ec 1c             	sub    esp,0x1c
c001f6db:	b9 09 00 00 00       	mov    ecx,0x9
c001f6e0:	89 e7                	mov    edi,esp
c001f6e2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001f6e4:	55                   	push   ebp
c001f6e5:	e8 9e aa fe ff       	call   c000a188 <Device::preOpenPCI(PCIDeviceInfo)>
c001f6ea:	83 c4 30             	add    esp,0x30
c001f6ed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f6f0:	6a 00                	push   0x0
c001f6f2:	6a 00                	push   0x0
c001f6f4:	6a 00                	push   0x0
c001f6f6:	55                   	push   ebp
c001f6f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f6fa:	83 c4 10             	add    esp,0x10
c001f6fd:	eb 5b                	jmp    c001f75a <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001f6ff:	81 fd 01 01 00 00    	cmp    ebp,0x101
c001f705:	75 19                	jne    c001f720 <PCI::foundDevice(PCIDeviceInfo)+0x1a0>
c001f707:	83 ec 0c             	sub    esp,0xc
c001f70a:	68 70 02 00 00       	push   0x270
c001f70f:	e8 c0 07 ff ff       	call   c000fed4 <malloc>
c001f714:	89 04 24             	mov    DWORD PTR [esp],eax
c001f717:	89 c5                	mov    ebp,eax
c001f719:	e8 94 02 00 00       	call   c001f9b2 <IDE::IDE()>
c001f71e:	eb af                	jmp    c001f6cf <PCI::foundDevice(PCIDeviceInfo)+0x14f>
c001f720:	83 ec 0c             	sub    esp,0xc
c001f723:	68 58 01 00 00       	push   0x158
c001f728:	e8 a7 07 ff ff       	call   c000fed4 <malloc>
c001f72d:	89 c5                	mov    ebp,eax
c001f72f:	58                   	pop    eax
c001f730:	5a                   	pop    edx
c001f731:	68 26 b7 02 c0       	push   0xc002b726
c001f736:	55                   	push   ebp
c001f737:	e8 ba ad fe ff       	call   c000a4f6 <DriverlessDevice::DriverlessDevice(char const*)>
c001f73c:	59                   	pop    ecx
c001f73d:	5f                   	pop    edi
c001f73e:	55                   	push   ebp
c001f73f:	53                   	push   ebx
c001f740:	e8 fd aa fe ff       	call   c000a242 <Device::addChild(Device*)>
c001f745:	83 ec 1c             	sub    esp,0x1c
c001f748:	b9 09 00 00 00       	mov    ecx,0x9
c001f74d:	89 e7                	mov    edi,esp
c001f74f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001f751:	55                   	push   ebp
c001f752:	e8 31 aa fe ff       	call   c000a188 <Device::preOpenPCI(PCIDeviceInfo)>
c001f757:	83 c4 30             	add    esp,0x30
c001f75a:	81 c4 8c 00 00 00    	add    esp,0x8c
c001f760:	5b                   	pop    ebx
c001f761:	5e                   	pop    esi
c001f762:	5f                   	pop    edi
c001f763:	5d                   	pop    ebp
c001f764:	c3                   	ret    
c001f765:	90                   	nop

c001f766 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001f766:	55                   	push   ebp
c001f767:	57                   	push   edi
c001f768:	56                   	push   esi
c001f769:	53                   	push   ebx
c001f76a:	83 ec 68             	sub    esp,0x68
c001f76d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001f774:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001f778:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f77c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001f783:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001f788:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001f78c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001f793:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001f798:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001f79c:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001f7a1:	6a 0c                	push   0xc
c001f7a3:	57                   	push   edi
c001f7a4:	53                   	push   ebx
c001f7a5:	56                   	push   esi
c001f7a6:	55                   	push   ebp
c001f7a7:	e8 c4 f7 ff ff       	call   c001ef70 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f7ac:	83 c4 20             	add    esp,0x20
c001f7af:	57                   	push   edi
c001f7b0:	53                   	push   ebx
c001f7b1:	56                   	push   esi
c001f7b2:	55                   	push   ebp
c001f7b3:	e8 ae f8 ff ff       	call   c001f066 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001f7b8:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001f7bd:	57                   	push   edi
c001f7be:	53                   	push   ebx
c001f7bf:	56                   	push   esi
c001f7c0:	55                   	push   ebp
c001f7c1:	e8 36 f9 ff ff       	call   c001f0fc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001f7c6:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001f7ca:	83 c4 14             	add    esp,0x14
c001f7cd:	6a 3c                	push   0x3c
c001f7cf:	57                   	push   edi
c001f7d0:	53                   	push   ebx
c001f7d1:	56                   	push   esi
c001f7d2:	55                   	push   ebp
c001f7d3:	e8 98 f7 ff ff       	call   c001ef70 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f7d8:	0f b6 c4             	movzx  eax,ah
c001f7db:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001f7df:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001f7e3:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001f7e7:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c001f7ec:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001f7f2:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001f7f8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001f7fc:	83 c4 20             	add    esp,0x20
c001f7ff:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001f804:	74 30                	je     c001f836 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001f806:	31 c0                	xor    eax,eax
c001f808:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f80c:	7e 28                	jle    c001f836 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001f80e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001f816:	39 cb                	cmp    ebx,ecx
c001f818:	75 19                	jne    c001f833 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001f81a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001f822:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001f826:	75 0b                	jne    c001f833 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001f828:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001f82f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001f833:	40                   	inc    eax
c001f834:	eb d2                	jmp    c001f808 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001f836:	31 d2                	xor    edx,edx
c001f838:	83 ec 0c             	sub    esp,0xc
c001f83b:	57                   	push   edi
c001f83c:	53                   	push   ebx
c001f83d:	56                   	push   esi
c001f83e:	52                   	push   edx
c001f83f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001f843:	55                   	push   ebp
c001f844:	e8 ff f8 ff ff       	call   c001f148 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f849:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f84d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001f851:	42                   	inc    edx
c001f852:	83 c4 20             	add    esp,0x20
c001f855:	83 fa 06             	cmp    edx,0x6
c001f858:	75 de                	jne    c001f838 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001f85a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f85e:	83 ec 0c             	sub    esp,0xc
c001f861:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f865:	c1 e2 08             	shl    edx,0x8
c001f868:	0f b6 c4             	movzx  eax,ah
c001f86b:	09 d0                	or     eax,edx
c001f86d:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001f872:	6a 02                	push   0x2
c001f874:	57                   	push   edi
c001f875:	53                   	push   ebx
c001f876:	56                   	push   esi
c001f877:	55                   	push   ebp
c001f878:	e8 f3 f6 ff ff       	call   c001ef70 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f87d:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001f882:	83 c4 20             	add    esp,0x20
c001f885:	57                   	push   edi
c001f886:	53                   	push   ebx
c001f887:	56                   	push   esi
c001f888:	55                   	push   ebp
c001f889:	e8 22 f8 ff ff       	call   c001f0b0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001f88e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001f892:	57                   	push   edi
c001f893:	53                   	push   ebx
c001f894:	56                   	push   esi
c001f895:	55                   	push   ebp
c001f896:	e8 7f f7 ff ff       	call   c001f01a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001f89b:	b9 09 00 00 00       	mov    ecx,0x9
c001f8a0:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001f8a5:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001f8a9:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001f8ad:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001f8b1:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001f8b5:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001f8b9:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001f8bd:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001f8c1:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001f8c5:	83 ec 0c             	sub    esp,0xc
c001f8c8:	fc                   	cld    
c001f8c9:	8d 74 24 58          	lea    esi,[esp+0x58]
c001f8cd:	89 e7                	mov    edi,esp
c001f8cf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001f8d1:	55                   	push   ebp
c001f8d2:	e8 a9 fc ff ff       	call   c001f580 <PCI::foundDevice(PCIDeviceInfo)>
c001f8d7:	81 c4 8c 00 00 00    	add    esp,0x8c
c001f8dd:	5b                   	pop    ebx
c001f8de:	5e                   	pop    esi
c001f8df:	5f                   	pop    edi
c001f8e0:	5d                   	pop    ebp
c001f8e1:	c3                   	ret    

c001f8e2 <PCI::checkDevice(unsigned char, unsigned char)>:
c001f8e2:	55                   	push   ebp
c001f8e3:	57                   	push   edi
c001f8e4:	56                   	push   esi
c001f8e5:	53                   	push   ebx
c001f8e6:	83 ec 0c             	sub    esp,0xc
c001f8e9:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001f8ee:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001f8f3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001f8f7:	6a 00                	push   0x0
c001f8f9:	56                   	push   esi
c001f8fa:	57                   	push   edi
c001f8fb:	55                   	push   ebp
c001f8fc:	e8 19 f7 ff ff       	call   c001f01a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001f901:	6a 00                	push   0x0
c001f903:	56                   	push   esi
c001f904:	57                   	push   edi
c001f905:	55                   	push   ebp
c001f906:	e8 5b fe ff ff       	call   c001f766 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001f90b:	83 c4 20             	add    esp,0x20
c001f90e:	6a 00                	push   0x0
c001f910:	56                   	push   esi
c001f911:	57                   	push   edi
c001f912:	55                   	push   ebp
c001f913:	e8 26 f7 ff ff       	call   c001f03e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001f918:	83 c4 10             	add    esp,0x10
c001f91b:	a8 80                	test   al,0x80
c001f91d:	74 2d                	je     c001f94c <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001f91f:	bb 01 00 00 00       	mov    ebx,0x1
c001f924:	53                   	push   ebx
c001f925:	56                   	push   esi
c001f926:	57                   	push   edi
c001f927:	55                   	push   ebp
c001f928:	e8 ed f6 ff ff       	call   c001f01a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001f92d:	83 c4 10             	add    esp,0x10
c001f930:	0f b7 c0             	movzx  eax,ax
c001f933:	3d ff ff 00 00       	cmp    eax,0xffff
c001f938:	74 0c                	je     c001f946 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001f93a:	53                   	push   ebx
c001f93b:	56                   	push   esi
c001f93c:	57                   	push   edi
c001f93d:	55                   	push   ebp
c001f93e:	e8 23 fe ff ff       	call   c001f766 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001f943:	83 c4 10             	add    esp,0x10
c001f946:	43                   	inc    ebx
c001f947:	83 fb 08             	cmp    ebx,0x8
c001f94a:	75 d8                	jne    c001f924 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001f94c:	83 c4 0c             	add    esp,0xc
c001f94f:	5b                   	pop    ebx
c001f950:	5e                   	pop    esi
c001f951:	5f                   	pop    edi
c001f952:	5d                   	pop    ebp
c001f953:	c3                   	ret    

c001f954 <PCI::detect()>:
c001f954:	56                   	push   esi
c001f955:	53                   	push   ebx
c001f956:	53                   	push   ebx
c001f957:	31 db                	xor    ebx,ebx
c001f959:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f95d:	6a 00                	push   0x0
c001f95f:	6a 00                	push   0x0
c001f961:	6a 00                	push   0x0
c001f963:	56                   	push   esi
c001f964:	e8 d5 f6 ff ff       	call   c001f03e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001f969:	83 c4 10             	add    esp,0x10
c001f96c:	a8 80                	test   al,0x80
c001f96e:	75 21                	jne    c001f991 <PCI::detect()+0x3d>
c001f970:	51                   	push   ecx
c001f971:	51                   	push   ecx
c001f972:	6a 00                	push   0x0
c001f974:	56                   	push   esi
c001f975:	e8 e2 fb ff ff       	call   c001f55c <PCI::checkBus(unsigned char)>
c001f97a:	83 c4 10             	add    esp,0x10
c001f97d:	eb 2a                	jmp    c001f9a9 <PCI::detect()+0x55>
c001f97f:	52                   	push   edx
c001f980:	52                   	push   edx
c001f981:	53                   	push   ebx
c001f982:	43                   	inc    ebx
c001f983:	56                   	push   esi
c001f984:	e8 d3 fb ff ff       	call   c001f55c <PCI::checkBus(unsigned char)>
c001f989:	83 c4 10             	add    esp,0x10
c001f98c:	83 fb 08             	cmp    ebx,0x8
c001f98f:	74 18                	je     c001f9a9 <PCI::detect()+0x55>
c001f991:	53                   	push   ebx
c001f992:	6a 00                	push   0x0
c001f994:	6a 00                	push   0x0
c001f996:	56                   	push   esi
c001f997:	e8 7e f6 ff ff       	call   c001f01a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001f99c:	83 c4 10             	add    esp,0x10
c001f99f:	0f b7 c0             	movzx  eax,ax
c001f9a2:	3d ff ff 00 00       	cmp    eax,0xffff
c001f9a7:	74 d6                	je     c001f97f <PCI::detect()+0x2b>
c001f9a9:	58                   	pop    eax
c001f9aa:	5b                   	pop    ebx
c001f9ab:	5e                   	pop    esi
c001f9ac:	c3                   	ret    
c001f9ad:	90                   	nop

c001f9ae <IDE::close(int, int, void*)>:
c001f9ae:	83 c8 ff             	or     eax,0xffffffff
c001f9b1:	c3                   	ret    

c001f9b2 <IDE::IDE()>:
c001f9b2:	83 ec 0c             	sub    esp,0xc
c001f9b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b9:	83 ec 08             	sub    esp,0x8
c001f9bc:	68 d0 b7 02 c0       	push   0xc002b7d0
c001f9c1:	50                   	push   eax
c001f9c2:	e8 d5 ab fe ff       	call   c000a59c <HardDiskController::HardDiskController(char const*)>
c001f9c7:	83 c4 10             	add    esp,0x10
c001f9ca:	ba fc b8 02 c0       	mov    edx,0xc002b8fc
c001f9cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d3:	89 10                	mov    DWORD PTR [eax],edx
c001f9d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001f9e0:	90                   	nop
c001f9e1:	83 c4 0c             	add    esp,0xc
c001f9e4:	c3                   	ret    
c001f9e5:	90                   	nop

c001f9e6 <IDE::prepareInterrupt(unsigned char)>:
c001f9e6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f9eb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f9ef:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001f9f7:	c3                   	ret    

c001f9f8 <selectDrive(unsigned char, unsigned char)>:
c001f9f8:	c3                   	ret    
c001f9f9:	90                   	nop

c001f9fa <IDE::getBase(unsigned char)>:
c001f9fa:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001f9ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa03:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001fa0b:	c3                   	ret    

c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001fa0c:	55                   	push   ebp
c001fa0d:	57                   	push   edi
c001fa0e:	56                   	push   esi
c001fa0f:	53                   	push   ebx
c001fa10:	83 ec 1c             	sub    esp,0x1c
c001fa13:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001fa17:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001fa1b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001fa1f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001fa23:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001fa26:	80 f9 03             	cmp    cl,0x3
c001fa29:	77 4f                	ja     c001fa7a <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001fa2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa2f:	0f b6 f2             	movzx  esi,dl
c001fa32:	0f b6 db             	movzx  ebx,bl
c001fa35:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001fa38:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001fa3d:	80 ca 80             	or     dl,0x80
c001fa40:	52                   	push   edx
c001fa41:	6a 0c                	push   0xc
c001fa43:	56                   	push   esi
c001fa44:	57                   	push   edi
c001fa45:	e8 c2 ff ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa4a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001fa4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fa53:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001fa57:	ee                   	out    dx,al
c001fa58:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001fa5d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001fa61:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001fa65:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001fa6d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001fa71:	83 c4 2c             	add    esp,0x2c
c001fa74:	5b                   	pop    ebx
c001fa75:	5e                   	pop    esi
c001fa76:	5f                   	pop    edi
c001fa77:	5d                   	pop    ebp
c001fa78:	eb 92                	jmp    c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa7a:	0f b6 cb             	movzx  ecx,bl
c001fa7d:	83 f9 07             	cmp    ecx,0x7
c001fa80:	77 12                	ja     c001fa94 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001fa82:	0f b6 d2             	movzx  edx,dl
c001fa85:	0f b6 db             	movzx  ebx,bl
c001fa88:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001fa90:	01 da                	add    edx,ebx
c001fa92:	eb 2f                	jmp    c001fac3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001fa94:	83 f9 0d             	cmp    ecx,0xd
c001fa97:	77 13                	ja     c001faac <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001fa99:	0f b6 d2             	movzx  edx,dl
c001fa9c:	0f b6 db             	movzx  ebx,bl
c001fa9f:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001faa6:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001faaa:	eb 17                	jmp    c001fac3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001faac:	83 f9 15             	cmp    ecx,0x15
c001faaf:	77 13                	ja     c001fac4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001fab1:	0f b6 d2             	movzx  edx,dl
c001fab4:	0f b6 db             	movzx  ebx,bl
c001fab7:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001fabf:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001fac3:	ee                   	out    dx,al
c001fac4:	83 c4 1c             	add    esp,0x1c
c001fac7:	5b                   	pop    ebx
c001fac8:	5e                   	pop    esi
c001fac9:	5f                   	pop    edi
c001faca:	5d                   	pop    ebp
c001facb:	c3                   	ret    

c001facc <IDE::read(unsigned char, unsigned char)>:
c001facc:	57                   	push   edi
c001facd:	56                   	push   esi
c001face:	53                   	push   ebx
c001facf:	83 ec 10             	sub    esp,0x10
c001fad2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fad6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001fada:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001fade:	8d 42 f8             	lea    eax,[edx-0x8]
c001fae1:	3c 03                	cmp    al,0x3
c001fae3:	77 48                	ja     c001fb2d <IDE::read(unsigned char, unsigned char)+0x61>
c001fae5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fae9:	0f b6 f1             	movzx  esi,cl
c001faec:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001faef:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001faf4:	0c 80                	or     al,0x80
c001faf6:	50                   	push   eax
c001faf7:	6a 0c                	push   0xc
c001faf9:	56                   	push   esi
c001fafa:	53                   	push   ebx
c001fafb:	e8 0c ff ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb00:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fb04:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001fb09:	0f b6 d2             	movzx  edx,dl
c001fb0c:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001fb10:	ec                   	in     al,dx
c001fb11:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001fb15:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001fb1a:	52                   	push   edx
c001fb1b:	6a 0c                	push   0xc
c001fb1d:	56                   	push   esi
c001fb1e:	53                   	push   ebx
c001fb1f:	e8 e8 fe ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb24:	83 c4 20             	add    esp,0x20
c001fb27:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fb2b:	eb 4c                	jmp    c001fb79 <IDE::read(unsigned char, unsigned char)+0xad>
c001fb2d:	0f b6 f2             	movzx  esi,dl
c001fb30:	83 fe 07             	cmp    esi,0x7
c001fb33:	77 12                	ja     c001fb47 <IDE::read(unsigned char, unsigned char)+0x7b>
c001fb35:	0f b6 c9             	movzx  ecx,cl
c001fb38:	0f b6 d2             	movzx  edx,dl
c001fb3b:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001fb43:	01 c2                	add    edx,eax
c001fb45:	eb 31                	jmp    c001fb78 <IDE::read(unsigned char, unsigned char)+0xac>
c001fb47:	83 fe 0d             	cmp    esi,0xd
c001fb4a:	77 13                	ja     c001fb5f <IDE::read(unsigned char, unsigned char)+0x93>
c001fb4c:	0f b6 c9             	movzx  ecx,cl
c001fb4f:	0f b6 d2             	movzx  edx,dl
c001fb52:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001fb59:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001fb5d:	eb 19                	jmp    c001fb78 <IDE::read(unsigned char, unsigned char)+0xac>
c001fb5f:	31 c0                	xor    eax,eax
c001fb61:	83 fe 15             	cmp    esi,0x15
c001fb64:	77 13                	ja     c001fb79 <IDE::read(unsigned char, unsigned char)+0xad>
c001fb66:	0f b6 c9             	movzx  ecx,cl
c001fb69:	0f b6 d2             	movzx  edx,dl
c001fb6c:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001fb74:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001fb78:	ec                   	in     al,dx
c001fb79:	83 c4 10             	add    esp,0x10
c001fb7c:	5b                   	pop    ebx
c001fb7d:	5e                   	pop    esi
c001fb7e:	5f                   	pop    edi
c001fb7f:	c3                   	ret    

c001fb80 <IDE::waitInterrupt(unsigned char)>:
c001fb80:	55                   	push   ebp
c001fb81:	57                   	push   edi
c001fb82:	56                   	push   esi
c001fb83:	53                   	push   ebx
c001fb84:	31 db                	xor    ebx,ebx
c001fb86:	83 ec 0c             	sub    esp,0xc
c001fb89:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001fb8d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001fb92:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001fb9a:	89 e8                	mov    eax,ebp
c001fb9c:	84 c0                	test   al,al
c001fb9e:	75 31                	jne    c001fbd1 <IDE::waitInterrupt(unsigned char)+0x51>
c001fba0:	52                   	push   edx
c001fba1:	6a 0c                	push   0xc
c001fba3:	56                   	push   esi
c001fba4:	57                   	push   edi
c001fba5:	e8 22 ff ff ff       	call   c001facc <IDE::read(unsigned char, unsigned char)>
c001fbaa:	83 c4 10             	add    esp,0x10
c001fbad:	a8 01                	test   al,0x1
c001fbaf:	75 28                	jne    c001fbd9 <IDE::waitInterrupt(unsigned char)+0x59>
c001fbb1:	f6 c3 04             	test   bl,0x4
c001fbb4:	75 13                	jne    c001fbc9 <IDE::waitInterrupt(unsigned char)+0x49>
c001fbb6:	83 fb 32             	cmp    ebx,0x32
c001fbb9:	7e 0e                	jle    c001fbc9 <IDE::waitInterrupt(unsigned char)+0x49>
c001fbbb:	50                   	push   eax
c001fbbc:	50                   	push   eax
c001fbbd:	6a 00                	push   0x0
c001fbbf:	6a 64                	push   0x64
c001fbc1:	e8 de 74 ff ff       	call   c00170a4 <milliTenthSleep(unsigned long long)>
c001fbc6:	83 c4 10             	add    esp,0x10
c001fbc9:	83 fb 3c             	cmp    ebx,0x3c
c001fbcc:	74 0b                	je     c001fbd9 <IDE::waitInterrupt(unsigned char)+0x59>
c001fbce:	43                   	inc    ebx
c001fbcf:	eb c1                	jmp    c001fb92 <IDE::waitInterrupt(unsigned char)+0x12>
c001fbd1:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001fbd9:	83 c4 0c             	add    esp,0xc
c001fbdc:	89 e8                	mov    eax,ebp
c001fbde:	5b                   	pop    ebx
c001fbdf:	5e                   	pop    esi
c001fbe0:	5f                   	pop    edi
c001fbe1:	5d                   	pop    ebp
c001fbe2:	c3                   	ret    

c001fbe3 <ideChannel0IRQHandler(regs*, void*)>:
c001fbe3:	83 ec 10             	sub    esp,0x10
c001fbe6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fbea:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001fbf1:	6a 07                	push   0x7
c001fbf3:	6a 00                	push   0x0
c001fbf5:	50                   	push   eax
c001fbf6:	e8 d1 fe ff ff       	call   c001facc <IDE::read(unsigned char, unsigned char)>
c001fbfb:	83 c4 1c             	add    esp,0x1c
c001fbfe:	c3                   	ret    

c001fbff <ideChannel1IRQHandler(regs*, void*)>:
c001fbff:	83 ec 10             	sub    esp,0x10
c001fc02:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fc06:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001fc0d:	6a 07                	push   0x7
c001fc0f:	6a 01                	push   0x1
c001fc11:	50                   	push   eax
c001fc12:	e8 b5 fe ff ff       	call   c001facc <IDE::read(unsigned char, unsigned char)>
c001fc17:	83 c4 1c             	add    esp,0x1c
c001fc1a:	c3                   	ret    
c001fc1b:	90                   	nop

c001fc1c <IDE::enableIRQs(unsigned char, bool)>:
c001fc1c:	57                   	push   edi
c001fc1d:	b8 02 00 00 00       	mov    eax,0x2
c001fc22:	56                   	push   esi
c001fc23:	53                   	push   ebx
c001fc24:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001fc29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fc2d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fc31:	74 02                	je     c001fc35 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001fc33:	31 c0                	xor    eax,eax
c001fc35:	0f b6 db             	movzx  ebx,bl
c001fc38:	bf 04 00 00 00       	mov    edi,0x4
c001fc3d:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001fc44:	50                   	push   eax
c001fc45:	6a 0c                	push   0xc
c001fc47:	53                   	push   ebx
c001fc48:	56                   	push   esi
c001fc49:	e8 be fd ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc4e:	83 c4 10             	add    esp,0x10
c001fc51:	50                   	push   eax
c001fc52:	6a 0c                	push   0xc
c001fc54:	53                   	push   ebx
c001fc55:	56                   	push   esi
c001fc56:	e8 71 fe ff ff       	call   c001facc <IDE::read(unsigned char, unsigned char)>
c001fc5b:	83 c4 10             	add    esp,0x10
c001fc5e:	4f                   	dec    edi
c001fc5f:	75 f0                	jne    c001fc51 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001fc61:	5b                   	pop    ebx
c001fc62:	5e                   	pop    esi
c001fc63:	5f                   	pop    edi
c001fc64:	c3                   	ret    
c001fc65:	90                   	nop

c001fc66 <IDE::open(int, int, void*)>:
c001fc66:	55                   	push   ebp
c001fc67:	57                   	push   edi
c001fc68:	56                   	push   esi
c001fc69:	53                   	push   ebx
c001fc6a:	83 ec 1c             	sub    esp,0x1c
c001fc6d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fc71:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001fc78:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001fc81:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001fc8a:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001fc91:	0f 85 80 02 00 00    	jne    c001ff17 <IDE::open(int, int, void*)+0x2b1>
c001fc97:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001fc9d:	a8 70                	test   al,0x70
c001fc9f:	75 44                	jne    c001fce5 <IDE::open(int, int, void*)+0x7f>
c001fca1:	ba 20 84 00 00       	mov    edx,0x8420
c001fca6:	0f a3 c2             	bt     edx,eax
c001fca9:	73 3a                	jae    c001fce5 <IDE::open(int, int, void*)+0x7f>
c001fcab:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001fcb1:	83 ec 0c             	sub    esp,0xc
c001fcb4:	83 e0 fc             	and    eax,0xfffffffc
c001fcb7:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001fcbe:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001fcc4:	83 e0 fc             	and    eax,0xfffffffc
c001fcc7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001fcce:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001fcd4:	83 e0 fc             	and    eax,0xfffffffc
c001fcd7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001fcde:	68 2a 8e 02 c0       	push   0xc0028e2a
c001fce3:	eb 60                	jmp    c001fd45 <IDE::open(int, int, void*)+0xdf>
c001fce5:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001fcef:	be 64 00 00 00       	mov    esi,0x64
c001fcf4:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001fcfe:	57                   	push   edi
c001fcff:	57                   	push   edi
c001fd00:	68 e8 b7 02 c0       	push   0xc002b7e8
c001fd05:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001fd09:	57                   	push   edi
c001fd0a:	e8 41 09 fe ff       	call   c0000650 <strcpy>
c001fd0f:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001fd16:	31 d2                	xor    edx,edx
c001fd18:	89 3c 24             	mov    DWORD PTR [esp],edi
c001fd1b:	89 c8                	mov    eax,ecx
c001fd1d:	f7 f6                	div    esi
c001fd1f:	be 0a 00 00 00       	mov    esi,0xa
c001fd24:	31 d2                	xor    edx,edx
c001fd26:	83 c0 30             	add    eax,0x30
c001fd29:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001fd2d:	89 c8                	mov    eax,ecx
c001fd2f:	f7 f6                	div    esi
c001fd31:	89 d1                	mov    ecx,edx
c001fd33:	31 d2                	xor    edx,edx
c001fd35:	f7 f6                	div    esi
c001fd37:	83 c1 30             	add    ecx,0x30
c001fd3a:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001fd3e:	83 c2 30             	add    edx,0x30
c001fd41:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001fd45:	e8 df dc fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c001fd4a:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001fd51:	bf f8 0c 00 00       	mov    edi,0xcf8
c001fd56:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001fd5d:	83 c4 10             	add    esp,0x10
c001fd60:	89 fa                	mov    edx,edi
c001fd62:	c1 e1 10             	shl    ecx,0x10
c001fd65:	c1 e0 0b             	shl    eax,0xb
c001fd68:	09 c1                	or     ecx,eax
c001fd6a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001fd71:	c1 e0 08             	shl    eax,0x8
c001fd74:	09 c1                	or     ecx,eax
c001fd76:	89 c8                	mov    eax,ecx
c001fd78:	0d 08 00 00 80       	or     eax,0x80000008
c001fd7d:	ef                   	out    dx,eax
c001fd7e:	be fc 0c 00 00       	mov    esi,0xcfc
c001fd83:	89 f2                	mov    edx,esi
c001fd85:	ed                   	in     eax,dx
c001fd86:	c1 e8 10             	shr    eax,0x10
c001fd89:	3d ff ff 00 00       	cmp    eax,0xffff
c001fd8e:	0f 84 e1 00 00 00    	je     c001fe75 <IDE::open(int, int, void*)+0x20f>
c001fd94:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001fd9a:	89 fa                	mov    edx,edi
c001fd9c:	89 c8                	mov    eax,ecx
c001fd9e:	ef                   	out    dx,eax
c001fd9f:	b0 fe                	mov    al,0xfe
c001fda1:	89 f2                	mov    edx,esi
c001fda3:	ee                   	out    dx,al
c001fda4:	89 c8                	mov    eax,ecx
c001fda6:	89 fa                	mov    edx,edi
c001fda8:	ef                   	out    dx,eax
c001fda9:	89 f2                	mov    edx,esi
c001fdab:	ed                   	in     eax,dx
c001fdac:	3c fe                	cmp    al,0xfe
c001fdae:	0f 85 83 00 00 00    	jne    c001fe37 <IDE::open(int, int, void*)+0x1d1>
c001fdb4:	83 ec 0c             	sub    esp,0xc
c001fdb7:	68 60 8e 02 c0       	push   0xc0028e60
c001fdbc:	e8 68 dc fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c001fdc1:	c7 04 24 ee b7 02 c0 	mov    DWORD PTR [esp],0xc002b7ee
c001fdc8:	e8 99 71 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001fdcd:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001fdd7:	c7 04 24 48 91 02 c0 	mov    DWORD PTR [esp],0xc0029148
c001fdde:	e8 46 dc fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c001fde3:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001fdea:	89 fa                	mov    edx,edi
c001fdec:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001fdf3:	c1 e1 10             	shl    ecx,0x10
c001fdf6:	c1 e0 08             	shl    eax,0x8
c001fdf9:	09 c1                	or     ecx,eax
c001fdfb:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001fe02:	c1 e0 0b             	shl    eax,0xb
c001fe05:	09 c1                	or     ecx,eax
c001fe07:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001fe0d:	89 c8                	mov    eax,ecx
c001fe0f:	ef                   	out    dx,eax
c001fe10:	8b ab 50 01 00 00    	mov    ebp,DWORD PTR [ebx+0x150]
c001fe16:	89 f2                	mov    edx,esi
c001fe18:	89 e8                	mov    eax,ebp
c001fe1a:	ee                   	out    dx,al
c001fe1b:	89 c8                	mov    eax,ecx
c001fe1d:	89 fa                	mov    edx,edi
c001fe1f:	ef                   	out    dx,eax
c001fe20:	89 f2                	mov    edx,esi
c001fe22:	ed                   	in     eax,dx
c001fe23:	0f b6 c0             	movzx  eax,al
c001fe26:	83 c4 10             	add    esp,0x10
c001fe29:	39 e8                	cmp    eax,ebp
c001fe2b:	74 58                	je     c001fe85 <IDE::open(int, int, void*)+0x21f>
c001fe2d:	83 ec 0c             	sub    esp,0xc
c001fe30:	68 03 b8 02 c0       	push   0xc002b803
c001fe35:	eb 46                	jmp    c001fe7d <IDE::open(int, int, void*)+0x217>
c001fe37:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001fe40:	75 29                	jne    c001fe6b <IDE::open(int, int, void*)+0x205>
c001fe42:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001fe49:	3d 8a 00 00 00       	cmp    eax,0x8a
c001fe4e:	74 05                	je     c001fe55 <IDE::open(int, int, void*)+0x1ef>
c001fe50:	83 c0 80             	add    eax,0xffffff80
c001fe53:	75 16                	jne    c001fe6b <IDE::open(int, int, void*)+0x205>
c001fe55:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001fe5c:	83 ec 0c             	sub    esp,0xc
c001fe5f:	68 97 a0 02 c0       	push   0xc002a097
c001fe64:	e8 c0 db fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c001fe69:	eb 17                	jmp    c001fe82 <IDE::open(int, int, void*)+0x21c>
c001fe6b:	83 ec 0c             	sub    esp,0xc
c001fe6e:	68 0b b8 02 c0       	push   0xc002b80b
c001fe73:	eb 08                	jmp    c001fe7d <IDE::open(int, int, void*)+0x217>
c001fe75:	83 ec 0c             	sub    esp,0xc
c001fe78:	68 3c b8 02 c0       	push   0xc002b83c
c001fe7d:	e8 a6 04 ff ff       	call   c0010328 <KePanic(char const*)>
c001fe82:	83 c4 10             	add    esp,0x10
c001fe85:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001fe8c:	0f 84 bf 00 00 00    	je     c001ff51 <IDE::open(int, int, void*)+0x2eb>
c001fe92:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001fe98:	83 ec 0c             	sub    esp,0xc
c001fe9b:	83 e0 fc             	and    eax,0xfffffffc
c001fe9e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001fea5:	83 c0 08             	add    eax,0x8
c001fea8:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001feaf:	68 66 b8 02 c0       	push   0xc002b866
c001feb4:	e8 ad 70 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001feb9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001fec0:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001fec7:	50                   	push   eax
c001fec8:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001fecf:	50                   	push   eax
c001fed0:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001fed7:	50                   	push   eax
c001fed8:	ff 35 a0 5d 03 c0    	push   DWORD PTR ds:0xc0035da0
c001fede:	e8 8d f0 ff ff       	call   c001ef70 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001fee3:	83 c4 18             	add    esp,0x18
c001fee6:	83 c8 07             	or     eax,0x7
c001fee9:	0f b7 c0             	movzx  eax,ax
c001feec:	50                   	push   eax
c001feed:	6a 04                	push   0x4
c001feef:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001fef6:	50                   	push   eax
c001fef7:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001fefe:	50                   	push   eax
c001feff:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ff06:	50                   	push   eax
c001ff07:	ff 35 a0 5d 03 c0    	push   DWORD PTR ds:0xc0035da0
c001ff0d:	e8 9a f2 ff ff       	call   c001f1ac <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001ff12:	83 c4 20             	add    esp,0x20
c001ff15:	eb 3a                	jmp    c001ff51 <IDE::open(int, int, void*)+0x2eb>
c001ff17:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ff1e:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001ff24:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ff2b:	05 06 02 00 00       	add    eax,0x206
c001ff30:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ff37:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001ff3e:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ff45:	05 06 02 00 00       	add    eax,0x206
c001ff4a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ff51:	83 ec 0c             	sub    esp,0xc
c001ff54:	68 00 97 02 c0       	push   0xc0029700
c001ff59:	e8 cb da fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c001ff5e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001ff64:	83 c4 10             	add    esp,0x10
c001ff67:	89 c2                	mov    edx,eax
c001ff69:	83 e2 0f             	and    edx,0xf
c001ff6c:	83 fa 08             	cmp    edx,0x8
c001ff6f:	75 0a                	jne    c001ff7b <IDE::open(int, int, void*)+0x315>
c001ff71:	83 e8 02             	sub    eax,0x2
c001ff74:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ff7b:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001ff81:	89 c2                	mov    edx,eax
c001ff83:	83 e2 0f             	and    edx,0xf
c001ff86:	83 fa 08             	cmp    edx,0x8
c001ff89:	75 0a                	jne    c001ff95 <IDE::open(int, int, void*)+0x32f>
c001ff8b:	83 e8 02             	sub    eax,0x2
c001ff8e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ff95:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001ff9c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001ffa3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ffa6:	89 d0                	mov    eax,edx
c001ffa8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ffac:	8d 7a 01             	lea    edi,[edx+0x1]
c001ffaf:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001ffb3:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001ffb7:	83 e1 3f             	and    ecx,0x3f
c001ffba:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001ffbe:	89 f9                	mov    ecx,edi
c001ffc0:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001ffc7:	8d 78 02             	lea    edi,[eax+0x2]
c001ffca:	0f b6 c9             	movzx  ecx,cl
c001ffcd:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ffd0:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001ffd4:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ffd8:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001ffdc:	83 e2 3f             	and    edx,0x3f
c001ffdf:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001ffe3:	89 f9                	mov    ecx,edi
c001ffe5:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ffeb:	8d 78 03             	lea    edi,[eax+0x3]
c001ffee:	0f b6 d1             	movzx  edx,cl
c001fff1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001fff4:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001fff8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001fffc:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c0020000:	83 e1 3f             	and    ecx,0x3f
c0020003:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c0020007:	89 fa                	mov    edx,edi
c0020009:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002000f:	8d 78 04             	lea    edi,[eax+0x4]
c0020012:	0f b6 ca             	movzx  ecx,dl
c0020015:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0020018:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002001c:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0020020:	89 fa                	mov    edx,edi
c0020022:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0020028:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002002c:	83 e2 3f             	and    edx,0x3f
c002002f:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c0020033:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002003a:	66 85 f6             	test   si,si
c002003d:	74 24                	je     c0020063 <IDE::open(int, int, void*)+0x3fd>
c002003f:	89 f9                	mov    ecx,edi
c0020041:	83 c0 05             	add    eax,0x5
c0020044:	0f b6 d1             	movzx  edx,cl
c0020047:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002004a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002004e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0020052:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0020058:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c002005c:	83 e0 3f             	and    eax,0x3f
c002005f:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c0020063:	83 ec 0c             	sub    esp,0xc
c0020066:	68 66 8c 02 c0       	push   0xc0028c66
c002006b:	e8 b9 d9 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c0020070:	58                   	pop    eax
c0020071:	5a                   	pop    edx
c0020072:	6a 00                	push   0x0
c0020074:	53                   	push   ebx
c0020075:	e8 6c f9 ff ff       	call   c001f9e6 <IDE::prepareInterrupt(unsigned char)>
c002007a:	59                   	pop    ecx
c002007b:	5e                   	pop    esi
c002007c:	6a 01                	push   0x1
c002007e:	53                   	push   ebx
c002007f:	e8 62 f9 ff ff       	call   c001f9e6 <IDE::prepareInterrupt(unsigned char)>
c0020084:	c7 04 24 94 b0 02 c0 	mov    DWORD PTR [esp],0xc002b094
c002008b:	e8 99 d9 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c0020090:	83 c4 0c             	add    esp,0xc
c0020093:	6a 00                	push   0x0
c0020095:	6a 00                	push   0x0
c0020097:	53                   	push   ebx
c0020098:	e8 7f fb ff ff       	call   c001fc1c <IDE::enableIRQs(unsigned char, bool)>
c002009d:	83 c4 0c             	add    esp,0xc
c00200a0:	6a 00                	push   0x0
c00200a2:	6a 01                	push   0x1
c00200a4:	53                   	push   ebx
c00200a5:	e8 72 fb ff ff       	call   c001fc1c <IDE::enableIRQs(unsigned char, bool)>
c00200aa:	c7 04 24 7e b8 02 c0 	mov    DWORD PTR [esp],0xc002b87e
c00200b1:	e8 73 d9 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c00200b6:	83 c4 10             	add    esp,0x10
c00200b9:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00200c0:	74 3c                	je     c00200fe <IDE::open(int, int, void*)+0x498>
c00200c2:	83 ec 0c             	sub    esp,0xc
c00200c5:	53                   	push   ebx
c00200c6:	6a 01                	push   0x1
c00200c8:	68 e3 fb 01 c0       	push   0xc001fbe3
c00200cd:	6a 0e                	push   0xe
c00200cf:	53                   	push   ebx
c00200d0:	e8 19 a1 fe ff       	call   c000a1ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00200d5:	83 c4 14             	add    esp,0x14
c00200d8:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00200de:	53                   	push   ebx
c00200df:	6a 01                	push   0x1
c00200e1:	68 ff fb 01 c0       	push   0xc001fbff
c00200e6:	6a 0f                	push   0xf
c00200e8:	53                   	push   ebx
c00200e9:	e8 00 a1 fe ff       	call   c000a1ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00200ee:	83 c4 14             	add    esp,0x14
c00200f1:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00200f7:	68 4e 93 02 c0       	push   0xc002934e
c00200fc:	eb 40                	jmp    c002013e <IDE::open(int, int, void*)+0x4d8>
c00200fe:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0020108:	83 ec 0c             	sub    esp,0xc
c002010b:	53                   	push   ebx
c002010c:	6a 00                	push   0x0
c002010e:	68 e3 fb 01 c0       	push   0xc001fbe3
c0020113:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0020119:	53                   	push   ebx
c002011a:	e8 cf a0 fe ff       	call   c000a1ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002011f:	83 c4 14             	add    esp,0x14
c0020122:	53                   	push   ebx
c0020123:	6a 00                	push   0x0
c0020125:	68 ff fb 01 c0       	push   0xc001fbff
c002012a:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0020130:	53                   	push   ebx
c0020131:	e8 b8 a0 fe ff       	call   c000a1ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020136:	83 c4 14             	add    esp,0x14
c0020139:	68 86 a0 02 c0       	push   0xc002a086
c002013e:	e8 e6 d8 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c0020143:	83 c4 10             	add    esp,0x10
c0020146:	83 ec 0c             	sub    esp,0xc
c0020149:	68 80 b8 02 c0       	push   0xc002b880
c002014e:	e8 d6 d8 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c0020153:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020155:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020158:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002015b:	c7 04 24 09 a5 02 c0 	mov    DWORD PTR [esp],0xc002a509
c0020162:	e8 c2 d8 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c0020167:	83 c4 0c             	add    esp,0xc
c002016a:	6a 07                	push   0x7
c002016c:	6a 00                	push   0x0
c002016e:	53                   	push   ebx
c002016f:	e8 58 f9 ff ff       	call   c001facc <IDE::read(unsigned char, unsigned char)>
c0020174:	83 c4 0c             	add    esp,0xc
c0020177:	6a 07                	push   0x7
c0020179:	6a 01                	push   0x1
c002017b:	53                   	push   ebx
c002017c:	e8 4b f9 ff ff       	call   c001facc <IDE::read(unsigned char, unsigned char)>
c0020181:	c7 04 24 90 9d 02 c0 	mov    DWORD PTR [esp],0xc0029d90
c0020188:	e8 9c d8 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c002018d:	83 c4 0c             	add    esp,0xc
c0020190:	6a 01                	push   0x1
c0020192:	6a 00                	push   0x0
c0020194:	53                   	push   ebx
c0020195:	e8 82 fa ff ff       	call   c001fc1c <IDE::enableIRQs(unsigned char, bool)>
c002019a:	83 c4 0c             	add    esp,0xc
c002019d:	6a 01                	push   0x1
c002019f:	6a 01                	push   0x1
c00201a1:	53                   	push   ebx
c00201a2:	e8 75 fa ff ff       	call   c001fc1c <IDE::enableIRQs(unsigned char, bool)>
c00201a7:	c7 04 24 83 b8 02 c0 	mov    DWORD PTR [esp],0xc002b883
c00201ae:	e8 76 d8 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c00201b3:	83 c4 2c             	add    esp,0x2c
c00201b6:	31 c0                	xor    eax,eax
c00201b8:	5b                   	pop    ebx
c00201b9:	5e                   	pop    esi
c00201ba:	5f                   	pop    edi
c00201bb:	5d                   	pop    ebp
c00201bc:	c3                   	ret    
c00201bd:	90                   	nop

c00201be <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00201be:	55                   	push   ebp
c00201bf:	57                   	push   edi
c00201c0:	56                   	push   esi
c00201c1:	53                   	push   ebx
c00201c2:	83 ec 1c             	sub    esp,0x1c
c00201c5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00201c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00201cd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00201d1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00201d5:	8d 42 f8             	lea    eax,[edx-0x8]
c00201d8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00201dc:	3c 03                	cmp    al,0x3
c00201de:	77 5a                	ja     c002023a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c00201e0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00201e4:	0f b6 db             	movzx  ebx,bl
c00201e7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00201eb:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00201ee:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00201f3:	0c 80                	or     al,0x80
c00201f5:	50                   	push   eax
c00201f6:	6a 0c                	push   0xc
c00201f8:	53                   	push   ebx
c00201f9:	56                   	push   esi
c00201fa:	e8 0d f8 ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00201ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020203:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c0020208:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002020c:	0f b6 d2             	movzx  edx,dl
c002020f:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c0020213:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0020215:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002021a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002021e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0020222:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002022a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002022e:	83 c4 2c             	add    esp,0x2c
c0020231:	5b                   	pop    ebx
c0020232:	5e                   	pop    esi
c0020233:	5f                   	pop    edi
c0020234:	5d                   	pop    ebp
c0020235:	e9 d2 f7 ff ff       	jmp    c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002023a:	0f b6 c2             	movzx  eax,dl
c002023d:	83 f8 07             	cmp    eax,0x7
c0020240:	77 12                	ja     c0020254 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c0020242:	0f b6 db             	movzx  ebx,bl
c0020245:	0f b6 c2             	movzx  eax,dl
c0020248:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c0020250:	01 c2                	add    edx,eax
c0020252:	eb 2f                	jmp    c0020283 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c0020254:	83 f8 0d             	cmp    eax,0xd
c0020257:	77 13                	ja     c002026c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c0020259:	0f b6 db             	movzx  ebx,bl
c002025c:	0f b6 d2             	movzx  edx,dl
c002025f:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c0020266:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002026a:	eb 17                	jmp    c0020283 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002026c:	83 f8 15             	cmp    eax,0x15
c002026f:	77 14                	ja     c0020285 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c0020271:	0f b6 db             	movzx  ebx,bl
c0020274:	0f b6 d2             	movzx  edx,dl
c0020277:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c002027f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0020283:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0020285:	83 c4 1c             	add    esp,0x1c
c0020288:	5b                   	pop    ebx
c0020289:	5e                   	pop    esi
c002028a:	5f                   	pop    edi
c002028b:	5d                   	pop    ebp
c002028c:	c3                   	ret    
c002028d:	90                   	nop

c002028e <IDE::detect()>:
c002028e:	55                   	push   ebp
c002028f:	57                   	push   edi
c0020290:	56                   	push   esi
c0020291:	53                   	push   ebx
c0020292:	81 ec 28 02 00 00    	sub    esp,0x228
c0020298:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c002029f:	68 85 b8 02 c0       	push   0xc002b885
c00202a4:	e8 80 d7 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c00202a9:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c00202af:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00202b3:	83 c4 10             	add    esp,0x10
c00202b6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00202bb:	0f 85 26 04 00 00    	jne    c00206e7 <IDE::detect()+0x459>
c00202c1:	83 ec 0c             	sub    esp,0xc
c00202c4:	31 f6                	xor    esi,esi
c00202c6:	68 88 b8 02 c0       	push   0xc002b888
c00202cb:	31 ff                	xor    edi,edi
c00202cd:	e8 57 d7 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c00202d2:	83 c4 10             	add    esp,0x10
c00202d5:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00202dc:	83 ec 0c             	sub    esp,0xc
c00202df:	68 8b b8 02 c0       	push   0xc002b88b
c00202e4:	e8 40 d7 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c00202e9:	83 c4 10             	add    esp,0x10
c00202ec:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202f3:	83 ec 0c             	sub    esp,0xc
c00202f6:	31 ed                	xor    ebp,ebp
c00202f8:	68 8e b8 02 c0       	push   0xc002b88e
c00202fd:	e8 27 d7 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c0020302:	89 f8                	mov    eax,edi
c0020304:	c1 e0 06             	shl    eax,0x6
c0020307:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002030f:	c7 04 24 91 b8 02 c0 	mov    DWORD PTR [esp],0xc002b891
c0020316:	e8 0e d7 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c002031b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002031f:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0020323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020327:	c1 e0 04             	shl    eax,0x4
c002032a:	83 c8 a0             	or     eax,0xffffffa0
c002032d:	0f b6 c0             	movzx  eax,al
c0020330:	50                   	push   eax
c0020331:	6a 06                	push   0x6
c0020333:	56                   	push   esi
c0020334:	53                   	push   ebx
c0020335:	e8 d2 f6 ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002033a:	83 c4 1c             	add    esp,0x1c
c002033d:	6a 0c                	push   0xc
c002033f:	56                   	push   esi
c0020340:	53                   	push   ebx
c0020341:	e8 86 f7 ff ff       	call   c001facc <IDE::read(unsigned char, unsigned char)>
c0020346:	83 c4 0c             	add    esp,0xc
c0020349:	6a 0c                	push   0xc
c002034b:	56                   	push   esi
c002034c:	53                   	push   ebx
c002034d:	e8 7a f7 ff ff       	call   c001facc <IDE::read(unsigned char, unsigned char)>
c0020352:	83 c4 0c             	add    esp,0xc
c0020355:	6a 0c                	push   0xc
c0020357:	56                   	push   esi
c0020358:	53                   	push   ebx
c0020359:	e8 6e f7 ff ff       	call   c001facc <IDE::read(unsigned char, unsigned char)>
c002035e:	83 c4 0c             	add    esp,0xc
c0020361:	6a 0c                	push   0xc
c0020363:	56                   	push   esi
c0020364:	53                   	push   ebx
c0020365:	e8 62 f7 ff ff       	call   c001facc <IDE::read(unsigned char, unsigned char)>
c002036a:	c7 04 24 94 b8 02 c0 	mov    DWORD PTR [esp],0xc002b894
c0020371:	e8 b3 d6 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c0020376:	68 ec 00 00 00       	push   0xec
c002037b:	6a 07                	push   0x7
c002037d:	56                   	push   esi
c002037e:	53                   	push   ebx
c002037f:	e8 88 f6 ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020384:	83 c4 1c             	add    esp,0x1c
c0020387:	6a 0c                	push   0xc
c0020389:	56                   	push   esi
c002038a:	53                   	push   ebx
c002038b:	e8 3c f7 ff ff       	call   c001facc <IDE::read(unsigned char, unsigned char)>
c0020390:	83 c4 0c             	add    esp,0xc
c0020393:	6a 0c                	push   0xc
c0020395:	56                   	push   esi
c0020396:	53                   	push   ebx
c0020397:	e8 30 f7 ff ff       	call   c001facc <IDE::read(unsigned char, unsigned char)>
c002039c:	83 c4 0c             	add    esp,0xc
c002039f:	6a 0c                	push   0xc
c00203a1:	56                   	push   esi
c00203a2:	53                   	push   ebx
c00203a3:	e8 24 f7 ff ff       	call   c001facc <IDE::read(unsigned char, unsigned char)>
c00203a8:	83 c4 0c             	add    esp,0xc
c00203ab:	6a 0c                	push   0xc
c00203ad:	56                   	push   esi
c00203ae:	53                   	push   ebx
c00203af:	e8 18 f7 ff ff       	call   c001facc <IDE::read(unsigned char, unsigned char)>
c00203b4:	c7 04 24 97 b8 02 c0 	mov    DWORD PTR [esp],0xc002b897
c00203bb:	e8 69 d6 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c00203c0:	83 c4 0c             	add    esp,0xc
c00203c3:	6a 0c                	push   0xc
c00203c5:	56                   	push   esi
c00203c6:	53                   	push   ebx
c00203c7:	e8 00 f7 ff ff       	call   c001facc <IDE::read(unsigned char, unsigned char)>
c00203cc:	83 c4 10             	add    esp,0x10
c00203cf:	84 c0                	test   al,al
c00203d1:	75 1f                	jne    c00203f2 <IDE::detect()+0x164>
c00203d3:	83 ec 0c             	sub    esp,0xc
c00203d6:	68 9a b8 02 c0       	push   0xc002b89a
c00203db:	e8 49 d6 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c00203e0:	e9 e0 02 00 00       	jmp    c00206c5 <IDE::detect()+0x437>
c00203e5:	a8 80                	test   al,0x80
c00203e7:	74 21                	je     c002040a <IDE::detect()+0x17c>
c00203e9:	45                   	inc    ebp
c00203ea:	81 fd 17 01 00 00    	cmp    ebp,0x117
c00203f0:	7f 1e                	jg     c0020410 <IDE::detect()+0x182>
c00203f2:	50                   	push   eax
c00203f3:	6a 0c                	push   0xc
c00203f5:	56                   	push   esi
c00203f6:	53                   	push   ebx
c00203f7:	e8 d0 f6 ff ff       	call   c001facc <IDE::read(unsigned char, unsigned char)>
c00203fc:	83 c4 10             	add    esp,0x10
c00203ff:	a8 01                	test   al,0x1
c0020401:	74 e2                	je     c00203e5 <IDE::detect()+0x157>
c0020403:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c0020408:	eb 23                	jmp    c002042d <IDE::detect()+0x19f>
c002040a:	a8 08                	test   al,0x8
c002040c:	74 db                	je     c00203e9 <IDE::detect()+0x15b>
c002040e:	eb 18                	jmp    c0020428 <IDE::detect()+0x19a>
c0020410:	50                   	push   eax
c0020411:	50                   	push   eax
c0020412:	6a 00                	push   0x0
c0020414:	6a 32                	push   0x32
c0020416:	e8 89 6c ff ff       	call   c00170a4 <milliTenthSleep(unsigned long long)>
c002041b:	83 c4 10             	add    esp,0x10
c002041e:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c0020424:	75 cc                	jne    c00203f2 <IDE::detect()+0x164>
c0020426:	eb db                	jmp    c0020403 <IDE::detect()+0x175>
c0020428:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c002042d:	83 ec 0c             	sub    esp,0xc
c0020430:	68 9d b8 02 c0       	push   0xc002b89d
c0020435:	e8 ef d5 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c002043a:	83 c4 10             	add    esp,0x10
c002043d:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c0020442:	74 56                	je     c002049a <IDE::detect()+0x20c>
c0020444:	51                   	push   ecx
c0020445:	6a 04                	push   0x4
c0020447:	56                   	push   esi
c0020448:	53                   	push   ebx
c0020449:	e8 7e f6 ff ff       	call   c001facc <IDE::read(unsigned char, unsigned char)>
c002044e:	83 c4 0c             	add    esp,0xc
c0020451:	6a 05                	push   0x5
c0020453:	56                   	push   esi
c0020454:	53                   	push   ebx
c0020455:	89 c5                	mov    ebp,eax
c0020457:	e8 70 f6 ff ff       	call   c001facc <IDE::read(unsigned char, unsigned char)>
c002045c:	89 e9                	mov    ecx,ebp
c002045e:	83 c4 10             	add    esp,0x10
c0020461:	0f b6 e9             	movzx  ebp,cl
c0020464:	83 fd 14             	cmp    ebp,0x14
c0020467:	75 04                	jne    c002046d <IDE::detect()+0x1df>
c0020469:	3c eb                	cmp    al,0xeb
c002046b:	74 11                	je     c002047e <IDE::detect()+0x1f0>
c002046d:	83 fd 69             	cmp    ebp,0x69
c0020470:	0f 85 52 02 00 00    	jne    c00206c8 <IDE::detect()+0x43a>
c0020476:	3c 96                	cmp    al,0x96
c0020478:	0f 85 4a 02 00 00    	jne    c00206c8 <IDE::detect()+0x43a>
c002047e:	68 a1 00 00 00       	push   0xa1
c0020483:	6a 07                	push   0x7
c0020485:	56                   	push   esi
c0020486:	53                   	push   ebx
c0020487:	e8 80 f5 ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002048c:	58                   	pop    eax
c002048d:	5a                   	pop    edx
c002048e:	6a 00                	push   0x0
c0020490:	6a 0a                	push   0xa
c0020492:	e8 0d 6c ff ff       	call   c00170a4 <milliTenthSleep(unsigned long long)>
c0020497:	83 c4 10             	add    esp,0x10
c002049a:	83 ec 0c             	sub    esp,0xc
c002049d:	89 fd                	mov    ebp,edi
c002049f:	68 a0 b8 02 c0       	push   0xc002b8a0
c00204a4:	e8 80 d5 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c00204a9:	8d 54 24 20          	lea    edx,[esp+0x20]
c00204ad:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c00204b4:	c1 e5 06             	shl    ebp,0x6
c00204b7:	52                   	push   edx
c00204b8:	01 dd                	add    ebp,ebx
c00204ba:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00204be:	6a 00                	push   0x0
c00204c0:	56                   	push   esi
c00204c1:	53                   	push   ebx
c00204c2:	e8 f7 fc ff ff       	call   c00201be <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00204c7:	83 c4 14             	add    esp,0x14
c00204ca:	68 a4 b8 02 c0       	push   0xc002b8a4
c00204cf:	e8 55 d5 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c00204d4:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00204d9:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c00204e0:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c00204e7:	89 f0                	mov    eax,esi
c00204e9:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c00204ef:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00204f3:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c00204f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00204fd:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c0020504:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c002050c:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c0020513:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c002051b:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c0020521:	c7 04 24 a8 b8 02 c0 	mov    DWORD PTR [esp],0xc002b8a8
c0020528:	e8 fc d4 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c002052d:	83 c4 10             	add    esp,0x10
c0020530:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c0020537:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002053b:	74 09                	je     c0020546 <IDE::detect()+0x2b8>
c002053d:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c0020544:	eb 07                	jmp    c002054d <IDE::detect()+0x2bf>
c0020546:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c002054d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020551:	89 f8                	mov    eax,edi
c0020553:	83 ec 0c             	sub    esp,0xc
c0020556:	c1 e0 06             	shl    eax,0x6
c0020559:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c002055c:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c0020562:	68 ac b8 02 c0       	push   0xc002b8ac
c0020567:	e8 bd d4 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c002056c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020570:	89 e8                	mov    eax,ebp
c0020572:	83 c4 10             	add    esp,0x10
c0020575:	8d 6a 28             	lea    ebp,[edx+0x28]
c0020578:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c002057b:	83 c2 02             	add    edx,0x2
c002057e:	83 c0 02             	add    eax,0x2
c0020581:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c0020587:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c002058a:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c0020590:	39 d5                	cmp    ebp,edx
c0020592:	75 e4                	jne    c0020578 <IDE::detect()+0x2ea>
c0020594:	89 f8                	mov    eax,edi
c0020596:	c1 e0 06             	shl    eax,0x6
c0020599:	01 d8                	add    eax,ebx
c002059b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00205a2:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c00205a9:	c1 ea 09             	shr    edx,0x9
c00205ac:	83 e2 01             	and    edx,0x1
c00205af:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c00205b6:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00205bc:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c00205c0:	74 0c                	je     c00205ce <IDE::detect()+0x340>
c00205c2:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c00205cb:	0f 95 c2             	setne  dl
c00205ce:	89 fd                	mov    ebp,edi
c00205d0:	83 ec 0c             	sub    esp,0xc
c00205d3:	c1 e5 06             	shl    ebp,0x6
c00205d6:	01 dd                	add    ebp,ebx
c00205d8:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c00205de:	68 b0 b8 02 c0       	push   0xc002b8b0
c00205e3:	e8 41 d4 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c00205e8:	83 c4 10             	add    esp,0x10
c00205eb:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c00205f0:	75 66                	jne    c0020658 <IDE::detect()+0x3ca>
c00205f2:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c00205f9:	0f 84 b8 00 00 00    	je     c00206b7 <IDE::detect()+0x429>
c00205ff:	83 ec 0c             	sub    esp,0xc
c0020602:	68 b4 b8 02 c0       	push   0xc002b8b4
c0020607:	e8 1d d4 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c002060c:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c0020613:	e8 bc f8 fe ff       	call   c000fed4 <malloc>
c0020618:	89 04 24             	mov    DWORD PTR [esp],eax
c002061b:	89 c5                	mov    ebp,eax
c002061d:	e8 44 05 00 00       	call   c0020b66 <ATA::ATA()>
c0020622:	c7 04 24 b8 b8 02 c0 	mov    DWORD PTR [esp],0xc002b8b8
c0020629:	e8 fb d3 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c002062e:	59                   	pop    ecx
c002062f:	58                   	pop    eax
c0020630:	55                   	push   ebp
c0020631:	53                   	push   ebx
c0020632:	e8 0b 9c fe ff       	call   c000a242 <Device::addChild(Device*)>
c0020637:	c7 04 24 bd b8 02 c0 	mov    DWORD PTR [esp],0xc002b8bd
c002063e:	e8 e6 d3 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c0020643:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0020646:	53                   	push   ebx
c0020647:	57                   	push   edi
c0020648:	6a 00                	push   0x0
c002064a:	55                   	push   ebp
c002064b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002064e:	83 c4 14             	add    esp,0x14
c0020651:	68 c2 b8 02 c0       	push   0xc002b8c2
c0020656:	eb 57                	jmp    c00206af <IDE::detect()+0x421>
c0020658:	83 ec 0c             	sub    esp,0xc
c002065b:	68 c7 b8 02 c0       	push   0xc002b8c7
c0020660:	e8 c4 d3 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c0020665:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c002066c:	e8 63 f8 fe ff       	call   c000fed4 <malloc>
c0020671:	89 04 24             	mov    DWORD PTR [esp],eax
c0020674:	89 c5                	mov    ebp,eax
c0020676:	e8 b1 0c 00 00       	call   c002132c <ATAPI::ATAPI()>
c002067b:	c7 04 24 cd b8 02 c0 	mov    DWORD PTR [esp],0xc002b8cd
c0020682:	e8 a2 d3 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c0020687:	58                   	pop    eax
c0020688:	5a                   	pop    edx
c0020689:	55                   	push   ebp
c002068a:	53                   	push   ebx
c002068b:	e8 b2 9b fe ff       	call   c000a242 <Device::addChild(Device*)>
c0020690:	c7 04 24 d4 b8 02 c0 	mov    DWORD PTR [esp],0xc002b8d4
c0020697:	e8 8d d3 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c002069c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002069f:	53                   	push   ebx
c00206a0:	57                   	push   edi
c00206a1:	6a 00                	push   0x0
c00206a3:	55                   	push   ebp
c00206a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00206a7:	83 c4 14             	add    esp,0x14
c00206aa:	68 db b8 02 c0       	push   0xc002b8db
c00206af:	e8 75 d3 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c00206b4:	83 c4 10             	add    esp,0x10
c00206b7:	83 ec 0c             	sub    esp,0xc
c00206ba:	47                   	inc    edi
c00206bb:	68 e2 b8 02 c0       	push   0xc002b8e2
c00206c0:	e8 64 d3 fe ff       	call   c000da29 <KeSetBootMessage(char const*)>
c00206c5:	83 c4 10             	add    esp,0x10
c00206c8:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c00206cc:	74 0c                	je     c00206da <IDE::detect()+0x44c>
c00206ce:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00206d5:	e9 19 fc ff ff       	jmp    c00202f3 <IDE::detect()+0x65>
c00206da:	4e                   	dec    esi
c00206db:	74 0a                	je     c00206e7 <IDE::detect()+0x459>
c00206dd:	be 01 00 00 00       	mov    esi,0x1
c00206e2:	e9 f5 fb ff ff       	jmp    c00202dc <IDE::detect()+0x4e>
c00206e7:	81 c4 1c 02 00 00    	add    esp,0x21c
c00206ed:	5b                   	pop    ebx
c00206ee:	5e                   	pop    esi
c00206ef:	5f                   	pop    edi
c00206f0:	5d                   	pop    ebp
c00206f1:	c3                   	ret    

c00206f2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00206f2:	55                   	push   ebp
c00206f3:	57                   	push   edi
c00206f4:	56                   	push   esi
c00206f5:	53                   	push   ebx
c00206f6:	83 ec 1c             	sub    esp,0x1c
c00206f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00206fd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020701:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0020705:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020709:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002070d:	88 c3                	mov    bl,al
c002070f:	25 ff 00 00 00       	and    eax,0xff
c0020714:	0f 84 88 00 00 00    	je     c00207a2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002071a:	83 ec 0c             	sub    esp,0xc
c002071d:	89 c7                	mov    edi,eax
c002071f:	68 e6 b8 02 c0       	push   0xc002b8e6
c0020724:	e8 3d 68 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020729:	83 c4 10             	add    esp,0x10
c002072c:	83 ff 01             	cmp    edi,0x1
c002072f:	74 6b                	je     c002079c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c0020731:	83 ff 02             	cmp    edi,0x2
c0020734:	75 58                	jne    c002078e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c0020736:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c002073b:	50                   	push   eax
c002073c:	6a 01                	push   0x1
c002073e:	01 ff                	add    edi,edi
c0020740:	09 fe                	or     esi,edi
c0020742:	89 f0                	mov    eax,esi
c0020744:	0f b6 f0             	movzx  esi,al
c0020747:	c1 e6 06             	shl    esi,0x6
c002074a:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c0020752:	50                   	push   eax
c0020753:	55                   	push   ebp
c0020754:	e8 73 f3 ff ff       	call   c001facc <IDE::read(unsigned char, unsigned char)>
c0020759:	83 c4 10             	add    esp,0x10
c002075c:	a8 01                	test   al,0x1
c002075e:	74 02                	je     c0020762 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c0020760:	b3 07                	mov    bl,0x7
c0020762:	a8 02                	test   al,0x2
c0020764:	74 02                	je     c0020768 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c0020766:	b3 03                	mov    bl,0x3
c0020768:	a8 04                	test   al,0x4
c002076a:	74 02                	je     c002076e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c002076c:	b3 14                	mov    bl,0x14
c002076e:	a8 08                	test   al,0x8
c0020770:	74 02                	je     c0020774 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c0020772:	b3 03                	mov    bl,0x3
c0020774:	a8 10                	test   al,0x10
c0020776:	74 02                	je     c002077a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c0020778:	b3 15                	mov    bl,0x15
c002077a:	a8 20                	test   al,0x20
c002077c:	74 02                	je     c0020780 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c002077e:	b3 03                	mov    bl,0x3
c0020780:	a8 40                	test   al,0x40
c0020782:	74 02                	je     c0020786 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0020784:	b3 16                	mov    bl,0x16
c0020786:	a8 80                	test   al,0x80
c0020788:	74 18                	je     c00207a2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002078a:	b3 0d                	mov    bl,0xd
c002078c:	eb 14                	jmp    c00207a2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002078e:	83 ff 03             	cmp    edi,0x3
c0020791:	74 0d                	je     c00207a0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c0020793:	83 ff 04             	cmp    edi,0x4
c0020796:	75 0a                	jne    c00207a2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c0020798:	b3 08                	mov    bl,0x8
c002079a:	eb 06                	jmp    c00207a2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002079c:	b3 13                	mov    bl,0x13
c002079e:	eb 02                	jmp    c00207a2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c00207a0:	b3 17                	mov    bl,0x17
c00207a2:	83 c4 1c             	add    esp,0x1c
c00207a5:	88 d8                	mov    al,bl
c00207a7:	5b                   	pop    ebx
c00207a8:	5e                   	pop    esi
c00207a9:	5f                   	pop    edi
c00207aa:	5d                   	pop    ebp
c00207ab:	c3                   	ret    

c00207ac <IDE::polling(unsigned char, unsigned int)>:
c00207ac:	57                   	push   edi
c00207ad:	56                   	push   esi
c00207ae:	53                   	push   ebx
c00207af:	bb 04 00 00 00       	mov    ebx,0x4
c00207b4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00207b8:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00207bd:	52                   	push   edx
c00207be:	6a 0c                	push   0xc
c00207c0:	56                   	push   esi
c00207c1:	57                   	push   edi
c00207c2:	e8 05 f3 ff ff       	call   c001facc <IDE::read(unsigned char, unsigned char)>
c00207c7:	83 c4 10             	add    esp,0x10
c00207ca:	4b                   	dec    ebx
c00207cb:	75 f0                	jne    c00207bd <IDE::polling(unsigned char, unsigned int)+0x11>
c00207cd:	bb a0 86 01 00       	mov    ebx,0x186a0
c00207d2:	50                   	push   eax
c00207d3:	6a 0c                	push   0xc
c00207d5:	56                   	push   esi
c00207d6:	57                   	push   edi
c00207d7:	e8 f0 f2 ff ff       	call   c001facc <IDE::read(unsigned char, unsigned char)>
c00207dc:	83 c4 10             	add    esp,0x10
c00207df:	a8 01                	test   al,0x1
c00207e1:	75 17                	jne    c00207fa <IDE::polling(unsigned char, unsigned int)+0x4e>
c00207e3:	a8 20                	test   al,0x20
c00207e5:	75 0f                	jne    c00207f6 <IDE::polling(unsigned char, unsigned int)+0x4a>
c00207e7:	4b                   	dec    ebx
c00207e8:	74 10                	je     c00207fa <IDE::polling(unsigned char, unsigned int)+0x4e>
c00207ea:	a8 80                	test   al,0x80
c00207ec:	75 e4                	jne    c00207d2 <IDE::polling(unsigned char, unsigned int)+0x26>
c00207ee:	a8 08                	test   al,0x8
c00207f0:	74 e0                	je     c00207d2 <IDE::polling(unsigned char, unsigned int)+0x26>
c00207f2:	31 c0                	xor    eax,eax
c00207f4:	eb 06                	jmp    c00207fc <IDE::polling(unsigned char, unsigned int)+0x50>
c00207f6:	b0 01                	mov    al,0x1
c00207f8:	eb 02                	jmp    c00207fc <IDE::polling(unsigned char, unsigned int)+0x50>
c00207fa:	b0 02                	mov    al,0x2
c00207fc:	5b                   	pop    ebx
c00207fd:	5e                   	pop    esi
c00207fe:	5f                   	pop    edi
c00207ff:	c3                   	ret    

c0020800 <SATABus::close(int, int, void*)>:
c0020800:	31 c0                	xor    eax,eax
c0020802:	c3                   	ret    
c0020803:	90                   	nop

c0020804 <SATABus::detect()>:
c0020804:	c3                   	ret    
c0020805:	90                   	nop

c0020806 <SATABus::SATABus()>:
c0020806:	83 ec 0c             	sub    esp,0xc
c0020809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002080d:	83 ec 08             	sub    esp,0x8
c0020810:	68 20 b9 02 c0       	push   0xc002b920
c0020815:	50                   	push   eax
c0020816:	e8 81 9d fe ff       	call   c000a59c <HardDiskController::HardDiskController(char const*)>
c002081b:	83 c4 10             	add    esp,0x10
c002081e:	ba 4c b9 02 c0       	mov    edx,0xc002b94c
c0020823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020827:	89 10                	mov    DWORD PTR [eax],edx
c0020829:	83 ec 0c             	sub    esp,0xc
c002082c:	6a 50                	push   0x50
c002082e:	e8 d6 fd fe ff       	call   c0010609 <Phys::allocateContiguousPages(int)>
c0020833:	83 c4 10             	add    esp,0x10
c0020836:	89 c2                	mov    edx,eax
c0020838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002083c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020842:	83 ec 0c             	sub    esp,0xc
c0020845:	6a 50                	push   0x50
c0020847:	e8 23 30 ff ff       	call   c001386f <Virt::allocateKernelVirtualPages(int)>
c002084c:	83 c4 10             	add    esp,0x10
c002084f:	89 c2                	mov    edx,eax
c0020851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020855:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002085b:	a1 90 32 03 c0       	mov    eax,ds:0xc0033290
c0020860:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020864:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002086a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002086e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0020874:	83 ec 0c             	sub    esp,0xc
c0020877:	6a 03                	push   0x3
c0020879:	6a 50                	push   0x50
c002087b:	51                   	push   ecx
c002087c:	52                   	push   edx
c002087d:	50                   	push   eax
c002087e:	e8 bf 38 ff ff       	call   c0014142 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0020883:	83 c4 20             	add    esp,0x20
c0020886:	90                   	nop
c0020887:	83 c4 0c             	add    esp,0xc
c002088a:	c3                   	ret    
c002088b:	90                   	nop

c002088c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002088c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020890:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0020893:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020896:	09 c2                	or     edx,eax
c0020898:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002089c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00208a2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00208a4:	31 c0                	xor    eax,eax
c00208a6:	c1 e9 08             	shr    ecx,0x8
c00208a9:	83 e1 0f             	and    ecx,0xf
c00208ac:	39 c8                	cmp    eax,ecx
c00208ae:	74 0a                	je     c00208ba <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c00208b0:	f6 c2 01             	test   dl,0x1
c00208b3:	74 08                	je     c00208bd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00208b5:	d1 ea                	shr    edx,1
c00208b7:	40                   	inc    eax
c00208b8:	eb f2                	jmp    c00208ac <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c00208ba:	83 c8 ff             	or     eax,0xffffffff
c00208bd:	c3                   	ret    

c00208be <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00208be:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00208c2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00208c5:	89 c2                	mov    edx,eax
c00208c7:	c1 ea 08             	shr    edx,0x8
c00208ca:	83 e2 0f             	and    edx,0xf
c00208cd:	4a                   	dec    edx
c00208ce:	75 32                	jne    c0020902 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00208d0:	83 e0 0f             	and    eax,0xf
c00208d3:	83 f8 03             	cmp    eax,0x3
c00208d6:	75 2a                	jne    c0020902 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00208d8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c00208db:	b8 02 00 00 00       	mov    eax,0x2
c00208e0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c00208e6:	74 1c                	je     c0020904 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00208e8:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00208ee:	b8 04 00 00 00       	mov    eax,0x4
c00208f3:	74 0f                	je     c0020904 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00208f5:	31 c0                	xor    eax,eax
c00208f7:	83 fa 03             	cmp    edx,0x3
c00208fa:	0f 94 c0             	sete   al
c00208fd:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0020901:	c3                   	ret    
c0020902:	31 c0                	xor    eax,eax
c0020904:	c3                   	ret    
c0020905:	90                   	nop

c0020906 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0020906:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002090a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002090d:	0f ba e2 0f          	bt     edx,0xf
c0020911:	72 f7                	jb     c002090a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0020913:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0020916:	83 ca 10             	or     edx,0x10
c0020919:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002091c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002091f:	83 ca 01             	or     edx,0x1
c0020922:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0020925:	c3                   	ret    

c0020926 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0020926:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002092a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002092d:	83 e2 fe             	and    edx,0xfffffffe
c0020930:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0020933:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0020936:	83 e2 ef             	and    edx,0xffffffef
c0020939:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002093c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002093f:	0f ba e2 0e          	bt     edx,0xe
c0020943:	72 f7                	jb     c002093c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0020945:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0020948:	0f ba e2 0f          	bt     edx,0xf
c002094c:	72 ee                	jb     c002093c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002094e:	c3                   	ret    
c002094f:	90                   	nop

c0020950 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0020950:	55                   	push   ebp
c0020951:	57                   	push   edi
c0020952:	56                   	push   esi
c0020953:	53                   	push   ebx
c0020954:	83 ec 1c             	sub    esp,0x1c
c0020957:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002095b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002095f:	53                   	push   ebx
c0020960:	57                   	push   edi
c0020961:	e8 c0 ff ff ff       	call   c0020926 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0020966:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002096a:	83 ec 0c             	sub    esp,0xc
c002096d:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c0020973:	c1 e5 0a             	shl    ebp,0xa
c0020976:	01 e8                	add    eax,ebp
c0020978:	89 03                	mov    DWORD PTR [ebx],eax
c002097a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002097c:	68 00 04 00 00       	push   0x400
c0020981:	6a 00                	push   0x0
c0020983:	50                   	push   eax
c0020984:	e8 67 fb fd ff       	call   c00004f0 <memset>
c0020989:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c002098f:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0020993:	83 c4 1c             	add    esp,0x1c
c0020996:	01 e8                	add    eax,ebp
c0020998:	89 03                	mov    DWORD PTR [ebx],eax
c002099a:	c1 e6 08             	shl    esi,0x8
c002099d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00209a4:	81 c6 00 80 00 00    	add    esi,0x8000
c00209aa:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c00209b0:	01 f0                	add    eax,esi
c00209b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00209b5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00209b8:	68 00 01 00 00       	push   0x100
c00209bd:	6a 00                	push   0x0
c00209bf:	50                   	push   eax
c00209c0:	e8 2b fb fd ff       	call   c00004f0 <memset>
c00209c5:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c00209cb:	31 d2                	xor    edx,edx
c00209cd:	01 f0                	add    eax,esi
c00209cf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00209d2:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00209d9:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c00209df:	01 ee                	add    esi,ebp
c00209e1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00209e5:	83 c4 10             	add    esp,0x10
c00209e8:	c1 e5 0d             	shl    ebp,0xd
c00209eb:	81 c5 00 a0 00 00    	add    ebp,0xa000
c00209f1:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c00209f7:	83 c6 20             	add    esi,0x20
c00209fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00209fe:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c0020a04:	01 e8                	add    eax,ebp
c0020a06:	01 d0                	add    eax,edx
c0020a08:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c0020a0b:	52                   	push   edx
c0020a0c:	68 00 01 00 00       	push   0x100
c0020a11:	6a 00                	push   0x0
c0020a13:	50                   	push   eax
c0020a14:	e8 d7 fa fd ff       	call   c00004f0 <memset>
c0020a19:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c0020a1f:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c0020a26:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020a2a:	83 c4 10             	add    esp,0x10
c0020a2d:	01 e8                	add    eax,ebp
c0020a2f:	01 d0                	add    eax,edx
c0020a31:	81 c2 00 01 00 00    	add    edx,0x100
c0020a37:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c0020a3a:	81 fa 00 20 00 00    	cmp    edx,0x2000
c0020a40:	75 af                	jne    c00209f1 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c0020a42:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0020a49:	50                   	push   eax
c0020a4a:	50                   	push   eax
c0020a4b:	53                   	push   ebx
c0020a4c:	57                   	push   edi
c0020a4d:	e8 b4 fe ff ff       	call   c0020906 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0020a52:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0020a59:	83 c4 2c             	add    esp,0x2c
c0020a5c:	5b                   	pop    ebx
c0020a5d:	5e                   	pop    esi
c0020a5e:	5f                   	pop    edi
c0020a5f:	5d                   	pop    ebp
c0020a60:	c3                   	ret    
c0020a61:	90                   	nop

c0020a62 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0020a62:	55                   	push   ebp
c0020a63:	57                   	push   edi
c0020a64:	56                   	push   esi
c0020a65:	53                   	push   ebx
c0020a66:	31 db                	xor    ebx,ebx
c0020a68:	83 ec 0c             	sub    esp,0xc
c0020a6b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020a6f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020a73:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0020a76:	f7 c7 01 00 00 00    	test   edi,0x1
c0020a7c:	74 7a                	je     c0020af8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0020a7e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020a82:	89 d8                	mov    eax,ebx
c0020a84:	c1 e0 07             	shl    eax,0x7
c0020a87:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0020a8e:	55                   	push   ebp
c0020a8f:	56                   	push   esi
c0020a90:	e8 29 fe ff ff       	call   c00208be <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0020a95:	5a                   	pop    edx
c0020a96:	59                   	pop    ecx
c0020a97:	83 f8 01             	cmp    eax,0x1
c0020a9a:	75 21                	jne    c0020abd <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0020a9c:	50                   	push   eax
c0020a9d:	53                   	push   ebx
c0020a9e:	55                   	push   ebp
c0020a9f:	56                   	push   esi
c0020aa0:	e8 ab fe ff ff       	call   c0020950 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0020aa5:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0020aac:	e8 23 f4 fe ff       	call   c000fed4 <malloc>
c0020ab1:	89 04 24             	mov    DWORD PTR [esp],eax
c0020ab4:	89 c5                	mov    ebp,eax
c0020ab6:	e8 37 0f 00 00       	call   c00219f2 <SATA::SATA()>
c0020abb:	eb 24                	jmp    c0020ae1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0020abd:	83 f8 04             	cmp    eax,0x4
c0020ac0:	75 36                	jne    c0020af8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0020ac2:	51                   	push   ecx
c0020ac3:	53                   	push   ebx
c0020ac4:	55                   	push   ebp
c0020ac5:	56                   	push   esi
c0020ac6:	e8 85 fe ff ff       	call   c0020950 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0020acb:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0020ad2:	e8 fd f3 fe ff       	call   c000fed4 <malloc>
c0020ad7:	89 04 24             	mov    DWORD PTR [esp],eax
c0020ada:	89 c5                	mov    ebp,eax
c0020adc:	e8 a7 12 00 00       	call   c0021d88 <SATAPI::SATAPI()>
c0020ae1:	58                   	pop    eax
c0020ae2:	5a                   	pop    edx
c0020ae3:	55                   	push   ebp
c0020ae4:	56                   	push   esi
c0020ae5:	e8 58 97 fe ff       	call   c000a242 <Device::addChild(Device*)>
c0020aea:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0020aed:	56                   	push   esi
c0020aee:	6a 00                	push   0x0
c0020af0:	53                   	push   ebx
c0020af1:	55                   	push   ebp
c0020af2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0020af5:	83 c4 20             	add    esp,0x20
c0020af8:	d1 ef                	shr    edi,1
c0020afa:	43                   	inc    ebx
c0020afb:	83 fb 20             	cmp    ebx,0x20
c0020afe:	0f 85 72 ff ff ff    	jne    c0020a76 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0020b04:	83 c4 0c             	add    esp,0xc
c0020b07:	5b                   	pop    ebx
c0020b08:	5e                   	pop    esi
c0020b09:	5f                   	pop    edi
c0020b0a:	5d                   	pop    ebp
c0020b0b:	c3                   	ret    

c0020b0c <SATABus::open(int, int, void*)>:
c0020b0c:	53                   	push   ebx
c0020b0d:	83 ec 08             	sub    esp,0x8
c0020b10:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020b14:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c0020b1a:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0020b20:	e8 8f 60 ff ff       	call   c0016bb4 <KeDisablePreemption()>
c0020b25:	52                   	push   edx
c0020b26:	52                   	push   edx
c0020b27:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c0020b2d:	53                   	push   ebx
c0020b2e:	e8 2f ff ff ff       	call   c0020a62 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0020b33:	e8 a4 60 ff ff       	call   c0016bdc <KeRestorePreemption()>
c0020b38:	83 c4 18             	add    esp,0x18
c0020b3b:	31 c0                	xor    eax,eax
c0020b3d:	5b                   	pop    ebx
c0020b3e:	c3                   	ret    
c0020b3f:	90                   	nop

c0020b40 <ATA::close(int, int, void*)>:
c0020b40:	83 ec 0c             	sub    esp,0xc
c0020b43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b47:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020b4d:	85 c0                	test   eax,eax
c0020b4f:	74 0c                	je     c0020b5d <ATA::close(int, int, void*)+0x1d>
c0020b51:	8b 10                	mov    edx,DWORD PTR [eax]
c0020b53:	83 ec 0c             	sub    esp,0xc
c0020b56:	50                   	push   eax
c0020b57:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020b5a:	83 c4 10             	add    esp,0x10
c0020b5d:	31 c0                	xor    eax,eax
c0020b5f:	83 c4 0c             	add    esp,0xc
c0020b62:	c3                   	ret    
c0020b63:	90                   	nop

c0020b64 <ATA::powerSaving(PowerSavingLevel)>:
c0020b64:	c3                   	ret    
c0020b65:	90                   	nop

c0020b66 <ATA::ATA()>:
c0020b66:	83 ec 0c             	sub    esp,0xc
c0020b69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b6d:	83 ec 04             	sub    esp,0x4
c0020b70:	68 00 02 00 00       	push   0x200
c0020b75:	68 cd ba 02 c0       	push   0xc002bacd
c0020b7a:	50                   	push   eax
c0020b7b:	e8 a6 9a fe ff       	call   c000a626 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020b80:	83 c4 10             	add    esp,0x10
c0020b83:	ba 34 ba 02 c0       	mov    edx,0xc002ba34
c0020b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b8c:	89 10                	mov    DWORD PTR [eax],edx
c0020b8e:	90                   	nop
c0020b8f:	83 c4 0c             	add    esp,0xc
c0020b92:	c3                   	ret    
c0020b93:	90                   	nop

c0020b94 <ATA::flush(bool)>:
c0020b94:	53                   	push   ebx
c0020b95:	83 ec 08             	sub    esp,0x8
c0020b98:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020b9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020ba1:	83 f8 01             	cmp    eax,0x1
c0020ba4:	19 c0                	sbb    eax,eax
c0020ba6:	83 e0 fd             	and    eax,0xfffffffd
c0020ba9:	05 ea 00 00 00       	add    eax,0xea
c0020bae:	50                   	push   eax
c0020baf:	6a 07                	push   0x7
c0020bb1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020bb8:	50                   	push   eax
c0020bb9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020bbf:	e8 48 ee ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020bc4:	83 c4 0c             	add    esp,0xc
c0020bc7:	6a 00                	push   0x0
c0020bc9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020bd0:	50                   	push   eax
c0020bd1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020bd7:	e8 d0 fb ff ff       	call   c00207ac <IDE::polling(unsigned char, unsigned int)>
c0020bdc:	83 c4 18             	add    esp,0x18
c0020bdf:	5b                   	pop    ebx
c0020be0:	c3                   	ret    
c0020be1:	90                   	nop

c0020be2 <ATA::readyForCommand()>:
c0020be2:	56                   	push   esi
c0020be3:	53                   	push   ebx
c0020be4:	31 db                	xor    ebx,ebx
c0020be6:	50                   	push   eax
c0020be7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020beb:	50                   	push   eax
c0020bec:	6a 0c                	push   0xc
c0020bee:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0020bf5:	50                   	push   eax
c0020bf6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0020bfc:	e8 cb ee ff ff       	call   c001facc <IDE::read(unsigned char, unsigned char)>
c0020c01:	83 c4 10             	add    esp,0x10
c0020c04:	a8 88                	test   al,0x88
c0020c06:	74 20                	je     c0020c28 <ATA::readyForCommand()+0x46>
c0020c08:	43                   	inc    ebx
c0020c09:	83 fb 63             	cmp    ebx,0x63
c0020c0c:	7e dd                	jle    c0020beb <ATA::readyForCommand()+0x9>
c0020c0e:	51                   	push   ecx
c0020c0f:	51                   	push   ecx
c0020c10:	6a 00                	push   0x0
c0020c12:	6a 0a                	push   0xa
c0020c14:	e8 8b 64 ff ff       	call   c00170a4 <milliTenthSleep(unsigned long long)>
c0020c19:	83 c4 10             	add    esp,0x10
c0020c1c:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0020c22:	75 c7                	jne    c0020beb <ATA::readyForCommand()+0x9>
c0020c24:	31 c0                	xor    eax,eax
c0020c26:	eb 02                	jmp    c0020c2a <ATA::readyForCommand()+0x48>
c0020c28:	b0 01                	mov    al,0x1
c0020c2a:	5a                   	pop    edx
c0020c2b:	5b                   	pop    ebx
c0020c2c:	5e                   	pop    esi
c0020c2d:	c3                   	ret    

c0020c2e <ATA::access(unsigned long long, int, void*, bool)>:
c0020c2e:	55                   	push   ebp
c0020c2f:	57                   	push   edi
c0020c30:	56                   	push   esi
c0020c31:	53                   	push   ebx
c0020c32:	83 ec 2c             	sub    esp,0x2c
c0020c35:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020c39:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020c3d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0020c41:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0020c45:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020c49:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0020c4d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0020c51:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0020c57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020c5b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0020c61:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020c65:	c1 e0 06             	shl    eax,0x6
c0020c68:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0020c70:	74 5b                	je     c0020ccd <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c0020c72:	89 fa                	mov    edx,edi
c0020c74:	89 f0                	mov    eax,esi
c0020c76:	c1 ea 1c             	shr    edx,0x1c
c0020c79:	0f ac f8 1c          	shrd   eax,edi,0x1c
c0020c7d:	89 d1                	mov    ecx,edx
c0020c7f:	09 c1                	or     ecx,eax
c0020c81:	74 25                	je     c0020ca8 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0020c83:	31 ed                	xor    ebp,ebp
c0020c85:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0020c8c:	89 fa                	mov    edx,edi
c0020c8e:	89 f0                	mov    eax,esi
c0020c90:	0f ad d0             	shrd   eax,edx,cl
c0020c93:	d3 ea                	shr    edx,cl
c0020c95:	f6 c1 20             	test   cl,0x20
c0020c98:	74 02                	je     c0020c9c <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0020c9a:	89 d0                	mov    eax,edx
c0020c9c:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0020ca0:	45                   	inc    ebp
c0020ca1:	83 fd 06             	cmp    ebp,0x6
c0020ca4:	75 df                	jne    c0020c85 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0020ca6:	eb 71                	jmp    c0020d19 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c0020ca8:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0020cad:	89 f0                	mov    eax,esi
c0020caf:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0020cb6:	0f ac f8 10          	shrd   eax,edi,0x10
c0020cba:	bf 01 00 00 00       	mov    edi,0x1
c0020cbf:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0020cc3:	c1 ee 18             	shr    esi,0x18
c0020cc6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0020ccb:	eb 53                	jmp    c0020d20 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c0020ccd:	6a 00                	push   0x0
c0020ccf:	6a 3f                	push   0x3f
c0020cd1:	57                   	push   edi
c0020cd2:	56                   	push   esi
c0020cd3:	e8 cc 20 00 00       	call   c0022da4 <__umoddi3>
c0020cd8:	83 c4 10             	add    esp,0x10
c0020cdb:	40                   	inc    eax
c0020cdc:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0020ce0:	6a 00                	push   0x0
c0020ce2:	68 f0 03 00 00       	push   0x3f0
c0020ce7:	57                   	push   edi
c0020ce8:	56                   	push   esi
c0020ce9:	e8 b6 1f 00 00       	call   c0022ca4 <__udivdi3>
c0020cee:	83 c4 10             	add    esp,0x10
c0020cf1:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0020cf6:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0020cfd:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0020d02:	6a 00                	push   0x0
c0020d04:	6a 3f                	push   0x3f
c0020d06:	57                   	push   edi
c0020d07:	31 ff                	xor    edi,edi
c0020d09:	56                   	push   esi
c0020d0a:	e8 95 1f 00 00       	call   c0022ca4 <__udivdi3>
c0020d0f:	83 c4 10             	add    esp,0x10
c0020d12:	83 e0 0f             	and    eax,0xf
c0020d15:	89 c6                	mov    esi,eax
c0020d17:	eb 07                	jmp    c0020d20 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c0020d19:	31 f6                	xor    esi,esi
c0020d1b:	bf 02 00 00 00       	mov    edi,0x2
c0020d20:	55                   	push   ebp
c0020d21:	6a 00                	push   0x0
c0020d23:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020d2a:	50                   	push   eax
c0020d2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020d2f:	e8 e8 ee ff ff       	call   c001fc1c <IDE::enableIRQs(unsigned char, bool)>
c0020d34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020d37:	e8 a6 fe ff ff       	call   c0020be2 <ATA::readyForCommand()>
c0020d3c:	83 c4 10             	add    esp,0x10
c0020d3f:	84 c0                	test   al,al
c0020d41:	75 0a                	jne    c0020d4d <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c0020d43:	be 01 00 00 00       	mov    esi,0x1
c0020d48:	e9 df 02 00 00       	jmp    c002102c <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c0020d4d:	fa                   	cli    
c0020d4e:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c0020d54:	f7 c7 03 00 00 00    	test   edi,0x3
c0020d5a:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0020d60:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020d66:	75 0a                	jne    c0020d72 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c0020d68:	c1 e0 04             	shl    eax,0x4
c0020d6b:	09 c6                	or     esi,eax
c0020d6d:	83 ce a0             	or     esi,0xffffffa0
c0020d70:	eb 08                	jmp    c0020d7a <ATA::access(unsigned long long, int, void*, bool)+0x14c>
c0020d72:	c1 e0 04             	shl    eax,0x4
c0020d75:	09 c6                	or     esi,eax
c0020d77:	83 ce e0             	or     esi,0xffffffe0
c0020d7a:	89 f0                	mov    eax,esi
c0020d7c:	0f b6 d2             	movzx  edx,dl
c0020d7f:	0f b6 f0             	movzx  esi,al
c0020d82:	56                   	push   esi
c0020d83:	6a 06                	push   0x6
c0020d85:	52                   	push   edx
c0020d86:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020d8c:	e8 7b ec ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020d91:	83 c4 10             	add    esp,0x10
c0020d94:	6a 00                	push   0x0
c0020d96:	6a 01                	push   0x1
c0020d98:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020d9f:	50                   	push   eax
c0020da0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020da6:	e8 61 ec ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020dab:	89 f8                	mov    eax,edi
c0020dad:	83 c4 10             	add    esp,0x10
c0020db0:	0f b6 f0             	movzx  esi,al
c0020db3:	83 fe 02             	cmp    esi,0x2
c0020db6:	75 6e                	jne    c0020e26 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c0020db8:	6a 00                	push   0x0
c0020dba:	6a 08                	push   0x8
c0020dbc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020dc3:	50                   	push   eax
c0020dc4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020dca:	e8 3d ec ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020dcf:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0020dd4:	50                   	push   eax
c0020dd5:	6a 09                	push   0x9
c0020dd7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020dde:	50                   	push   eax
c0020ddf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020de5:	e8 22 ec ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020dea:	83 c4 20             	add    esp,0x20
c0020ded:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0020df2:	50                   	push   eax
c0020df3:	6a 0a                	push   0xa
c0020df5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020dfc:	50                   	push   eax
c0020dfd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020e03:	e8 04 ec ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020e08:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0020e0d:	50                   	push   eax
c0020e0e:	6a 0b                	push   0xb
c0020e10:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020e17:	50                   	push   eax
c0020e18:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020e1e:	e8 e9 eb ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020e23:	83 c4 20             	add    esp,0x20
c0020e26:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0020e2b:	50                   	push   eax
c0020e2c:	6a 02                	push   0x2
c0020e2e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020e35:	50                   	push   eax
c0020e36:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020e3c:	e8 cb eb ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020e41:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0020e46:	50                   	push   eax
c0020e47:	6a 03                	push   0x3
c0020e49:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020e50:	50                   	push   eax
c0020e51:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020e57:	e8 b0 eb ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020e5c:	83 c4 20             	add    esp,0x20
c0020e5f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0020e64:	50                   	push   eax
c0020e65:	6a 04                	push   0x4
c0020e67:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020e6e:	50                   	push   eax
c0020e6f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020e75:	e8 92 eb ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020e7a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020e7f:	50                   	push   eax
c0020e80:	6a 05                	push   0x5
c0020e82:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020e89:	50                   	push   eax
c0020e8a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020e90:	e8 77 eb ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020e95:	83 c4 20             	add    esp,0x20
c0020e98:	83 fe 02             	cmp    esi,0x2
c0020e9b:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c0020ea0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0020ea5:	85 c9                	test   ecx,ecx
c0020ea7:	74 07                	je     c0020eb0 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c0020ea9:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0020eae:	75 45                	jne    c0020ef5 <ATA::access(unsigned long long, int, void*, bool)+0x2c7>
c0020eb0:	89 f8                	mov    eax,edi
c0020eb2:	0f b6 f8             	movzx  edi,al
c0020eb5:	31 c0                	xor    eax,eax
c0020eb7:	4f                   	dec    edi
c0020eb8:	0f 94 c0             	sete   al
c0020ebb:	89 c6                	mov    esi,eax
c0020ebd:	75 0c                	jne    c0020ecb <ATA::access(unsigned long long, int, void*, bool)+0x29d>
c0020ebf:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0020ec4:	b8 30 00 00 00       	mov    eax,0x30
c0020ec9:	75 2f                	jne    c0020efa <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c0020ecb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020ecf:	83 f2 01             	xor    edx,0x1
c0020ed2:	85 c9                	test   ecx,ecx
c0020ed4:	74 09                	je     c0020edf <ATA::access(unsigned long long, int, void*, bool)+0x2b1>
c0020ed6:	84 d2                	test   dl,dl
c0020ed8:	b8 24 00 00 00       	mov    eax,0x24
c0020edd:	75 1b                	jne    c0020efa <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c0020edf:	85 f6                	test   esi,esi
c0020ee1:	0f 84 5c fe ff ff    	je     c0020d43 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c0020ee7:	84 d2                	test   dl,dl
c0020ee9:	b8 20 00 00 00       	mov    eax,0x20
c0020eee:	75 0a                	jne    c0020efa <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c0020ef0:	e9 4e fe ff ff       	jmp    c0020d43 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c0020ef5:	b8 34 00 00 00       	mov    eax,0x34
c0020efa:	50                   	push   eax
c0020efb:	6a 07                	push   0x7
c0020efd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020f04:	50                   	push   eax
c0020f05:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020f0b:	e8 fc ea ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020f10:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c0020f17:	83 c4 10             	add    esp,0x10
c0020f1a:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c0020f21:	75 01                	jne    c0020f24 <ATA::access(unsigned long long, int, void*, bool)+0x2f6>
c0020f23:	fb                   	sti    
c0020f24:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0020f28:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c0020f2d:	85 f6                	test   esi,esi
c0020f2f:	0f 84 dd 00 00 00    	je     c0021012 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c0020f35:	57                   	push   edi
c0020f36:	6a 01                	push   0x1
c0020f38:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020f3f:	50                   	push   eax
c0020f40:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020f46:	e8 61 f8 ff ff       	call   c00207ac <IDE::polling(unsigned char, unsigned int)>
c0020f4b:	83 c4 10             	add    esp,0x10
c0020f4e:	0f b6 c0             	movzx  eax,al
c0020f51:	85 c0                	test   eax,eax
c0020f53:	74 23                	je     c0020f78 <ATA::access(unsigned long long, int, void*, bool)+0x34a>
c0020f55:	50                   	push   eax
c0020f56:	89 c6                	mov    esi,eax
c0020f58:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0020f5f:	50                   	push   eax
c0020f60:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020f67:	50                   	push   eax
c0020f68:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020f6e:	e8 7f f7 ff ff       	call   c00206f2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0020f73:	e9 b1 00 00 00       	jmp    c0021029 <ATA::access(unsigned long long, int, void*, bool)+0x3fb>
c0020f78:	85 ed                	test   ebp,ebp
c0020f7a:	74 49                	je     c0020fc5 <ATA::access(unsigned long long, int, void*, bool)+0x397>
c0020f7c:	fa                   	cli    
c0020f7d:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c0020f83:	31 ff                	xor    edi,edi
c0020f85:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0020f89:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c0020f8d:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0020f92:	51                   	push   ecx
c0020f93:	51                   	push   ecx
c0020f94:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020f9b:	50                   	push   eax
c0020f9c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020fa2:	e8 53 ea ff ff       	call   c001f9fa <IDE::getBase(unsigned char)>
c0020fa7:	89 c2                	mov    edx,eax
c0020fa9:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0020fae:	66 ef                	out    dx,ax
c0020fb0:	47                   	inc    edi
c0020fb1:	83 c4 10             	add    esp,0x10
c0020fb4:	81 ff 00 01 00 00    	cmp    edi,0x100
c0020fba:	75 c9                	jne    c0020f85 <ATA::access(unsigned long long, int, void*, bool)+0x357>
c0020fbc:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c0020fc3:	eb 35                	jmp    c0020ffa <ATA::access(unsigned long long, int, void*, bool)+0x3cc>
c0020fc5:	fa                   	cli    
c0020fc6:	52                   	push   edx
c0020fc7:	52                   	push   edx
c0020fc8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020fcf:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c0020fd5:	50                   	push   eax
c0020fd6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020fdc:	e8 19 ea ff ff       	call   c001f9fa <IDE::getBase(unsigned char)>
c0020fe1:	b9 00 01 00 00       	mov    ecx,0x100
c0020fe6:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0020fea:	89 c2                	mov    edx,eax
c0020fec:	fc                   	cld    
c0020fed:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0020ff0:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c0020ff7:	83 c4 10             	add    esp,0x10
c0020ffa:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c0021001:	75 01                	jne    c0021004 <ATA::access(unsigned long long, int, void*, bool)+0x3d6>
c0021003:	fb                   	sti    
c0021004:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002100c:	4e                   	dec    esi
c002100d:	e9 1b ff ff ff       	jmp    c0020f2d <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c0021012:	31 f6                	xor    esi,esi
c0021014:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0021019:	74 11                	je     c002102c <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c002101b:	50                   	push   eax
c002101c:	50                   	push   eax
c002101d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0021022:	50                   	push   eax
c0021023:	53                   	push   ebx
c0021024:	e8 6b fb ff ff       	call   c0020b94 <ATA::flush(bool)>
c0021029:	83 c4 10             	add    esp,0x10
c002102c:	83 c4 2c             	add    esp,0x2c
c002102f:	89 f0                	mov    eax,esi
c0021031:	5b                   	pop    ebx
c0021032:	5e                   	pop    esi
c0021033:	5f                   	pop    edi
c0021034:	5d                   	pop    ebp
c0021035:	c3                   	ret    

c0021036 <ATA::read(unsigned long long, int, void*)>:
c0021036:	57                   	push   edi
c0021037:	b8 04 00 00 00       	mov    eax,0x4
c002103c:	56                   	push   esi
c002103d:	53                   	push   ebx
c002103e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021042:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021046:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002104a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002104e:	8d 7a ff             	lea    edi,[edx-0x1]
c0021051:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0021057:	77 25                	ja     c002107e <ATA::read(unsigned long long, int, void*)+0x48>
c0021059:	85 f6                	test   esi,esi
c002105b:	b8 06 00 00 00       	mov    eax,0x6
c0021060:	74 1c                	je     c002107e <ATA::read(unsigned long long, int, void*)+0x48>
c0021062:	50                   	push   eax
c0021063:	50                   	push   eax
c0021064:	6a 00                	push   0x0
c0021066:	56                   	push   esi
c0021067:	52                   	push   edx
c0021068:	53                   	push   ebx
c0021069:	51                   	push   ecx
c002106a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002106e:	e8 bb fb ff ff       	call   c0020c2e <ATA::access(unsigned long long, int, void*, bool)>
c0021073:	83 c4 20             	add    esp,0x20
c0021076:	85 c0                	test   eax,eax
c0021078:	0f 95 c0             	setne  al
c002107b:	0f b6 c0             	movzx  eax,al
c002107e:	5b                   	pop    ebx
c002107f:	5e                   	pop    esi
c0021080:	5f                   	pop    edi
c0021081:	c3                   	ret    

c0021082 <ATA::write(unsigned long long, int, void*)>:
c0021082:	57                   	push   edi
c0021083:	b8 04 00 00 00       	mov    eax,0x4
c0021088:	56                   	push   esi
c0021089:	53                   	push   ebx
c002108a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002108e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021092:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0021096:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002109a:	8d 7a ff             	lea    edi,[edx-0x1]
c002109d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00210a3:	77 25                	ja     c00210ca <ATA::write(unsigned long long, int, void*)+0x48>
c00210a5:	85 f6                	test   esi,esi
c00210a7:	b8 06 00 00 00       	mov    eax,0x6
c00210ac:	74 1c                	je     c00210ca <ATA::write(unsigned long long, int, void*)+0x48>
c00210ae:	50                   	push   eax
c00210af:	50                   	push   eax
c00210b0:	6a 01                	push   0x1
c00210b2:	56                   	push   esi
c00210b3:	52                   	push   edx
c00210b4:	53                   	push   ebx
c00210b5:	51                   	push   ecx
c00210b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00210ba:	e8 6f fb ff ff       	call   c0020c2e <ATA::access(unsigned long long, int, void*, bool)>
c00210bf:	83 c4 20             	add    esp,0x20
c00210c2:	85 c0                	test   eax,eax
c00210c4:	0f 95 c0             	setne  al
c00210c7:	0f b6 c0             	movzx  eax,al
c00210ca:	5b                   	pop    ebx
c00210cb:	5e                   	pop    esi
c00210cc:	5f                   	pop    edi
c00210cd:	c3                   	ret    

c00210ce <ATA::detectCHS()>:
c00210ce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00210d2:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00210d8:	c1 e0 06             	shl    eax,0x6
c00210db:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00210e1:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00210eb:	c7 44 24 04 70 b9 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b970
c00210f3:	e9 30 f2 fe ff       	jmp    c0010328 <KePanic(char const*)>

c00210f8 <ATA::open(int, int, void*)>:
c00210f8:	53                   	push   ebx
c00210f9:	83 ec 08             	sub    esp,0x8
c00210fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021100:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021104:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021108:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002110e:	c1 e0 06             	shl    eax,0x6
c0021111:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0021117:	01 d0                	add    eax,edx
c0021119:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0021120:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0021126:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002112d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0021137:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002113e:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0021144:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002114b:	75 0c                	jne    c0021159 <ATA::open(int, int, void*)+0x61>
c002114d:	83 ec 0c             	sub    esp,0xc
c0021150:	53                   	push   ebx
c0021151:	e8 78 ff ff ff       	call   c00210ce <ATA::detectCHS()>
c0021156:	83 c4 10             	add    esp,0x10
c0021159:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002115f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0021165:	c1 e0 06             	shl    eax,0x6
c0021168:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002116f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0021179:	d1 e8                	shr    eax,1
c002117b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0021181:	6a 04                	push   0x4
c0021183:	6a 0c                	push   0xc
c0021185:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002118c:	50                   	push   eax
c002118d:	52                   	push   edx
c002118e:	e8 79 e8 ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021193:	90                   	nop
c0021194:	90                   	nop
c0021195:	6a 00                	push   0x0
c0021197:	6a 0c                	push   0xc
c0021199:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00211a0:	50                   	push   eax
c00211a1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00211a7:	e8 60 e8 ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00211ac:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00211b2:	83 c4 20             	add    esp,0x20
c00211b5:	c1 e0 06             	shl    eax,0x6
c00211b8:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c00211be:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c00211c5:	0f 84 00 01 00 00    	je     c00212cb <ATA::open(int, int, void*)+0x1d3>
c00211cb:	83 ec 0c             	sub    esp,0xc
c00211ce:	6a 08                	push   0x8
c00211d0:	e8 34 f4 fe ff       	call   c0010609 <Phys::allocateContiguousPages(int)>
c00211d5:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00211db:	c7 04 24 82 b9 02 c0 	mov    DWORD PTR [esp],0xc002b982
c00211e2:	e8 7f 5d fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00211e7:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c00211ee:	e8 7c 26 ff ff       	call   c001386f <Virt::allocateKernelVirtualPages(int)>
c00211f3:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c00211f9:	6a 03                	push   0x3
c00211fb:	50                   	push   eax
c00211fc:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0021202:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c0021208:	e8 3b 2d ff ff       	call   c0013f48 <VAS::mapPage(unsigned long, unsigned long, int)>
c002120d:	83 c4 20             	add    esp,0x20
c0021210:	e8 0d f3 fe ff       	call   c0010522 <Phys::allocatePage()>
c0021215:	83 ec 0c             	sub    esp,0xc
c0021218:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c002121e:	6a 01                	push   0x1
c0021220:	e8 4a 26 ff ff       	call   c001386f <Virt::allocateKernelVirtualPages(int)>
c0021225:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c002122b:	6a 03                	push   0x3
c002122d:	50                   	push   eax
c002122e:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c0021234:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c002123a:	e8 09 2d ff ff       	call   c0013f48 <VAS::mapPage(unsigned long, unsigned long, int)>
c002123f:	83 c4 14             	add    esp,0x14
c0021242:	68 bb b9 02 c0       	push   0xc002b9bb
c0021247:	e8 1a 5d fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c002124c:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c0021253:	50                   	push   eax
c0021254:	6a 12                	push   0x12
c0021256:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002125d:	50                   	push   eax
c002125e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021264:	e8 a3 e7 ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021269:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c002126f:	83 c4 20             	add    esp,0x20
c0021272:	0f b6 c4             	movzx  eax,ah
c0021275:	50                   	push   eax
c0021276:	6a 13                	push   0x13
c0021278:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002127f:	50                   	push   eax
c0021280:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021286:	e8 81 e7 ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002128b:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c0021292:	50                   	push   eax
c0021293:	6a 14                	push   0x14
c0021295:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002129c:	50                   	push   eax
c002129d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00212a3:	e8 64 e7 ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00212a8:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c00212af:	83 c4 20             	add    esp,0x20
c00212b2:	50                   	push   eax
c00212b3:	6a 15                	push   0x15
c00212b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00212bc:	50                   	push   eax
c00212bd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00212c3:	e8 44 e7 ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00212c8:	83 c4 10             	add    esp,0x10
c00212cb:	83 ec 0c             	sub    esp,0xc
c00212ce:	53                   	push   ebx
c00212cf:	e8 ba 93 fe ff       	call   c000a68e <PhysicalDisk::startCache()>
c00212d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00212d7:	e8 1e a2 fe ff       	call   c000b4fa <createPartitionsForDisk(PhysicalDisk*)>
c00212dc:	83 c4 18             	add    esp,0x18
c00212df:	31 c0                	xor    eax,eax
c00212e1:	5b                   	pop    ebx
c00212e2:	c3                   	ret    

c00212e3 <combineCharAndColour(char, unsigned char)>:
c00212e3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00212e8:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c00212ee:	c1 e0 08             	shl    eax,0x8
c00212f1:	09 d0                	or     eax,edx
c00212f3:	c3                   	ret    

c00212f4 <combineColours(unsigned char, unsigned char)>:
c00212f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00212f9:	c1 e0 04             	shl    eax,0x4
c00212fc:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c0021300:	c3                   	ret    
c0021301:	90                   	nop

c0021302 <ATAPI::write(unsigned long long, int, void*)>:
c0021302:	b8 03 00 00 00       	mov    eax,0x3
c0021307:	c3                   	ret    

c0021308 <ATAPI::close(int, int, void*)>:
c0021308:	83 ec 0c             	sub    esp,0xc
c002130b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002130f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021315:	85 c0                	test   eax,eax
c0021317:	74 0c                	je     c0021325 <ATAPI::close(int, int, void*)+0x1d>
c0021319:	8b 10                	mov    edx,DWORD PTR [eax]
c002131b:	83 ec 0c             	sub    esp,0xc
c002131e:	50                   	push   eax
c002131f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0021322:	83 c4 10             	add    esp,0x10
c0021325:	31 c0                	xor    eax,eax
c0021327:	83 c4 0c             	add    esp,0xc
c002132a:	c3                   	ret    
c002132b:	90                   	nop

c002132c <ATAPI::ATAPI()>:
c002132c:	83 ec 0c             	sub    esp,0xc
c002132f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021333:	83 ec 04             	sub    esp,0x4
c0021336:	68 00 08 00 00       	push   0x800
c002133b:	68 6d bb 02 c0       	push   0xc002bb6d
c0021340:	50                   	push   eax
c0021341:	e8 e0 92 fe ff       	call   c000a626 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021346:	83 c4 10             	add    esp,0x10
c0021349:	ba 7c ba 02 c0       	mov    edx,0xc002ba7c
c002134e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021352:	89 10                	mov    DWORD PTR [eax],edx
c0021354:	90                   	nop
c0021355:	83 c4 0c             	add    esp,0xc
c0021358:	c3                   	ret    
c0021359:	90                   	nop

c002135a <ATAPI::readyForCommand()>:
c002135a:	56                   	push   esi
c002135b:	53                   	push   ebx
c002135c:	31 db                	xor    ebx,ebx
c002135e:	50                   	push   eax
c002135f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021363:	50                   	push   eax
c0021364:	6a 0c                	push   0xc
c0021366:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002136d:	50                   	push   eax
c002136e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0021374:	e8 53 e7 ff ff       	call   c001facc <IDE::read(unsigned char, unsigned char)>
c0021379:	83 c4 10             	add    esp,0x10
c002137c:	a8 88                	test   al,0x88
c002137e:	74 26                	je     c00213a6 <ATAPI::readyForCommand()+0x4c>
c0021380:	43                   	inc    ebx
c0021381:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c0021387:	7e da                	jle    c0021363 <ATAPI::readyForCommand()+0x9>
c0021389:	51                   	push   ecx
c002138a:	51                   	push   ecx
c002138b:	6a 00                	push   0x0
c002138d:	68 5e 01 00 00       	push   0x15e
c0021392:	e8 0d 5d ff ff       	call   c00170a4 <milliTenthSleep(unsigned long long)>
c0021397:	83 c4 10             	add    esp,0x10
c002139a:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c00213a0:	75 c1                	jne    c0021363 <ATAPI::readyForCommand()+0x9>
c00213a2:	31 c0                	xor    eax,eax
c00213a4:	eb 02                	jmp    c00213a8 <ATAPI::readyForCommand()+0x4e>
c00213a6:	b0 01                	mov    al,0x1
c00213a8:	5a                   	pop    edx
c00213a9:	5b                   	pop    ebx
c00213aa:	5e                   	pop    esi
c00213ab:	c3                   	ret    

c00213ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00213ac:	55                   	push   ebp
c00213ad:	57                   	push   edi
c00213ae:	56                   	push   esi
c00213af:	53                   	push   ebx
c00213b0:	83 ec 20             	sub    esp,0x20
c00213b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00213b7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00213bb:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00213bf:	6a 01                	push   0x1
c00213c1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00213c8:	50                   	push   eax
c00213c9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00213cf:	e8 48 e8 ff ff       	call   c001fc1c <IDE::enableIRQs(unsigned char, bool)>
c00213d4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00213db:	59                   	pop    ecx
c00213dc:	5e                   	pop    esi
c00213dd:	50                   	push   eax
c00213de:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00213e4:	e8 fd e5 ff ff       	call   c001f9e6 <IDE::prepareInterrupt(unsigned char)>
c00213e9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00213ec:	e8 69 ff ff ff       	call   c002135a <ATAPI::readyForCommand()>
c00213f1:	83 c4 10             	add    esp,0x10
c00213f4:	84 c0                	test   al,al
c00213f6:	75 0a                	jne    c0021402 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c00213f8:	bb 01 00 00 00       	mov    ebx,0x1
c00213fd:	e9 5f 02 00 00       	jmp    c0021661 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021402:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c0021408:	c1 e0 04             	shl    eax,0x4
c002140b:	0f b6 c0             	movzx  eax,al
c002140e:	50                   	push   eax
c002140f:	6a 06                	push   0x6
c0021411:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021418:	50                   	push   eax
c0021419:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002141f:	e8 e8 e5 ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021424:	6a 00                	push   0x0
c0021426:	6a 01                	push   0x1
c0021428:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002142f:	50                   	push   eax
c0021430:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021436:	e8 d1 e5 ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002143b:	83 c4 20             	add    esp,0x20
c002143e:	0f b6 c3             	movzx  eax,bl
c0021441:	50                   	push   eax
c0021442:	0f b6 df             	movzx  ebx,bh
c0021445:	6a 04                	push   0x4
c0021447:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002144e:	50                   	push   eax
c002144f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021455:	e8 b2 e5 ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002145a:	53                   	push   ebx
c002145b:	6a 05                	push   0x5
c002145d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021464:	50                   	push   eax
c0021465:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002146b:	e8 9c e5 ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021470:	83 c4 20             	add    esp,0x20
c0021473:	68 a0 00 00 00       	push   0xa0
c0021478:	6a 07                	push   0x7
c002147a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021481:	50                   	push   eax
c0021482:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021488:	e8 7f e5 ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002148d:	83 c4 0c             	add    esp,0xc
c0021490:	6a 01                	push   0x1
c0021492:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021499:	50                   	push   eax
c002149a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00214a0:	e8 07 f3 ff ff       	call   c00207ac <IDE::polling(unsigned char, unsigned int)>
c00214a5:	83 c4 10             	add    esp,0x10
c00214a8:	0f b6 d8             	movzx  ebx,al
c00214ab:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c00214b1:	85 db                	test   ebx,ebx
c00214b3:	74 20                	je     c00214d5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c00214b5:	53                   	push   ebx
c00214b6:	0f b6 c0             	movzx  eax,al
c00214b9:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c00214c0:	52                   	push   edx
c00214c1:	50                   	push   eax
c00214c2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00214c8:	e8 25 f2 ff ff       	call   c00206f2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00214cd:	83 c4 10             	add    esp,0x10
c00214d0:	e9 8c 01 00 00       	jmp    c0021661 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00214d5:	52                   	push   edx
c00214d6:	0f b6 c0             	movzx  eax,al
c00214d9:	52                   	push   edx
c00214da:	50                   	push   eax
c00214db:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00214e1:	e8 14 e5 ff ff       	call   c001f9fa <IDE::getBase(unsigned char)>
c00214e6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00214ea:	b9 06 00 00 00       	mov    ecx,0x6
c00214ef:	89 c2                	mov    edx,eax
c00214f1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00214f4:	89 e8                	mov    eax,ebp
c00214f6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00214fa:	83 c4 10             	add    esp,0x10
c00214fd:	0f b6 c0             	movzx  eax,al
c0021500:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021504:	85 db                	test   ebx,ebx
c0021506:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002150c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021513:	0f 84 eb 00 00 00    	je     c0021604 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0021519:	55                   	push   ebp
c002151a:	55                   	push   ebp
c002151b:	52                   	push   edx
c002151c:	50                   	push   eax
c002151d:	e8 5e e6 ff ff       	call   c001fb80 <IDE::waitInterrupt(unsigned char)>
c0021522:	83 c4 10             	add    esp,0x10
c0021525:	84 c0                	test   al,al
c0021527:	0f 84 cb fe ff ff    	je     c00213f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c002152d:	56                   	push   esi
c002152e:	56                   	push   esi
c002152f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021536:	50                   	push   eax
c0021537:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002153d:	e8 a4 e4 ff ff       	call   c001f9e6 <IDE::prepareInterrupt(unsigned char)>
c0021542:	83 c4 0c             	add    esp,0xc
c0021545:	6a 04                	push   0x4
c0021547:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002154e:	50                   	push   eax
c002154f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021555:	e8 72 e5 ff ff       	call   c001facc <IDE::read(unsigned char, unsigned char)>
c002155a:	83 c4 0c             	add    esp,0xc
c002155d:	6a 05                	push   0x5
c002155f:	89 c6                	mov    esi,eax
c0021561:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021568:	50                   	push   eax
c0021569:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002156f:	e8 58 e5 ff ff       	call   c001facc <IDE::read(unsigned char, unsigned char)>
c0021574:	83 c4 10             	add    esp,0x10
c0021577:	0f b6 e8             	movzx  ebp,al
c002157a:	89 f0                	mov    eax,esi
c002157c:	c1 e5 08             	shl    ebp,0x8
c002157f:	0f b6 f0             	movzx  esi,al
c0021582:	09 f5                	or     ebp,esi
c0021584:	31 f6                	xor    esi,esi
c0021586:	d1 fd                	sar    ebp,1
c0021588:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002158d:	74 5c                	je     c00215eb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c002158f:	39 ee                	cmp    esi,ebp
c0021591:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021597:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002159e:	75 0d                	jne    c00215ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c00215a0:	8d 0c 36             	lea    ecx,[esi+esi*1]
c00215a3:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c00215a7:	4b                   	dec    ebx
c00215a8:	e9 57 ff ff ff       	jmp    c0021504 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c00215ad:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00215b1:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c00215b5:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c00215ba:	51                   	push   ecx
c00215bb:	51                   	push   ecx
c00215bc:	52                   	push   edx
c00215bd:	50                   	push   eax
c00215be:	e8 37 e4 ff ff       	call   c001f9fa <IDE::getBase(unsigned char)>
c00215c3:	89 c2                	mov    edx,eax
c00215c5:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00215ca:	66 ef                	out    dx,ax
c00215cc:	46                   	inc    esi
c00215cd:	83 c4 10             	add    esp,0x10
c00215d0:	eb bd                	jmp    c002158f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c00215d2:	51                   	push   ecx
c00215d3:	51                   	push   ecx
c00215d4:	52                   	push   edx
c00215d5:	50                   	push   eax
c00215d6:	e8 1f e4 ff ff       	call   c001f9fa <IDE::getBase(unsigned char)>
c00215db:	89 c2                	mov    edx,eax
c00215dd:	66 ed                	in     ax,dx
c00215df:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00215e3:	83 c4 10             	add    esp,0x10
c00215e6:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c00215ea:	46                   	inc    esi
c00215eb:	39 ee                	cmp    esi,ebp
c00215ed:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00215f3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00215fa:	75 d6                	jne    c00215d2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c00215fc:	01 f6                	add    esi,esi
c00215fe:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c0021602:	eb a3                	jmp    c00215a7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c0021604:	51                   	push   ecx
c0021605:	51                   	push   ecx
c0021606:	52                   	push   edx
c0021607:	50                   	push   eax
c0021608:	e8 73 e5 ff ff       	call   c001fb80 <IDE::waitInterrupt(unsigned char)>
c002160d:	83 c4 10             	add    esp,0x10
c0021610:	84 c0                	test   al,al
c0021612:	0f 84 e0 fd ff ff    	je     c00213f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c0021618:	52                   	push   edx
c0021619:	bb a0 86 01 00       	mov    ebx,0x186a0
c002161e:	52                   	push   edx
c002161f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021626:	50                   	push   eax
c0021627:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002162d:	e8 b4 e3 ff ff       	call   c001f9e6 <IDE::prepareInterrupt(unsigned char)>
c0021632:	83 c4 10             	add    esp,0x10
c0021635:	50                   	push   eax
c0021636:	50                   	push   eax
c0021637:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002163e:	50                   	push   eax
c002163f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021645:	e8 b0 e3 ff ff       	call   c001f9fa <IDE::getBase(unsigned char)>
c002164a:	8d 50 07             	lea    edx,[eax+0x7]
c002164d:	ec                   	in     al,dx
c002164e:	83 c4 10             	add    esp,0x10
c0021651:	a8 88                	test   al,0x88
c0021653:	74 0a                	je     c002165f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0021655:	4b                   	dec    ebx
c0021656:	75 dd                	jne    c0021635 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0021658:	bb 02 00 00 00       	mov    ebx,0x2
c002165d:	eb 02                	jmp    c0021661 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002165f:	31 db                	xor    ebx,ebx
c0021661:	83 c4 1c             	add    esp,0x1c
c0021664:	89 d8                	mov    eax,ebx
c0021666:	5b                   	pop    ebx
c0021667:	5e                   	pop    esi
c0021668:	5f                   	pop    edi
c0021669:	5d                   	pop    ebp
c002166a:	c3                   	ret    
c002166b:	90                   	nop

c002166c <ATAPI::diskRemoved()>:
c002166c:	53                   	push   ebx
c002166d:	83 ec 14             	sub    esp,0x14
c0021670:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021674:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002167b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c0021681:	e8 62 9b fe ff       	call   c000b1e8 <LogicalDisk::unmount()>
c0021686:	58                   	pop    eax
c0021687:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002168d:	e8 4e a5 fe ff       	call   c000bbe0 <VCache::writeWriteBuffer()>
c0021692:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0021698:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002169c:	83 c4 18             	add    esp,0x18
c002169f:	5b                   	pop    ebx
c00216a0:	e9 2b a5 fe ff       	jmp    c000bbd0 <VCache::invalidateReadBuffer()>
c00216a5:	90                   	nop

c00216a6 <ATAPI::eject()>:
c00216a6:	57                   	push   edi
c00216a7:	b9 03 00 00 00       	mov    ecx,0x3
c00216ac:	53                   	push   ebx
c00216ad:	83 ec 14             	sub    esp,0x14
c00216b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00216b4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00216b8:	fc                   	cld    
c00216b9:	31 c0                	xor    eax,eax
c00216bb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00216bd:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00216c2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00216c7:	50                   	push   eax
c00216c8:	50                   	push   eax
c00216c9:	6a 00                	push   0x0
c00216cb:	6a 00                	push   0x0
c00216cd:	6a 00                	push   0x0
c00216cf:	6a 02                	push   0x2
c00216d1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00216d5:	50                   	push   eax
c00216d6:	53                   	push   ebx
c00216d7:	e8 d0 fc ff ff       	call   c00213ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00216dc:	83 c4 14             	add    esp,0x14
c00216df:	53                   	push   ebx
c00216e0:	e8 87 ff ff ff       	call   c002166c <ATAPI::diskRemoved()>
c00216e5:	83 c4 24             	add    esp,0x24
c00216e8:	31 c0                	xor    eax,eax
c00216ea:	5b                   	pop    ebx
c00216eb:	5f                   	pop    edi
c00216ec:	c3                   	ret    
c00216ed:	90                   	nop

c00216ee <ATAPI::diskInserted()>:
c00216ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216f2:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c00216f9:	c3                   	ret    

c00216fa <ATAPI::detectMedia()>:
c00216fa:	56                   	push   esi
c00216fb:	53                   	push   ebx
c00216fc:	83 ec 28             	sub    esp,0x28
c00216ff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021703:	6a 0c                	push   0xc
c0021705:	6a 00                	push   0x0
c0021707:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002170b:	56                   	push   esi
c002170c:	e8 df ed fd ff       	call   c00004f0 <memset>
c0021711:	58                   	pop    eax
c0021712:	5a                   	pop    edx
c0021713:	6a 00                	push   0x0
c0021715:	6a 00                	push   0x0
c0021717:	6a 00                	push   0x0
c0021719:	6a 00                	push   0x0
c002171b:	56                   	push   esi
c002171c:	53                   	push   ebx
c002171d:	e8 8a fc ff ff       	call   c00213ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021722:	83 c4 1c             	add    esp,0x1c
c0021725:	6a 0c                	push   0xc
c0021727:	6a 00                	push   0x0
c0021729:	56                   	push   esi
c002172a:	e8 c1 ed fd ff       	call   c00004f0 <memset>
c002172f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0021734:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0021739:	59                   	pop    ecx
c002173a:	58                   	pop    eax
c002173b:	6a 01                	push   0x1
c002173d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021741:	50                   	push   eax
c0021742:	6a 00                	push   0x0
c0021744:	6a 12                	push   0x12
c0021746:	56                   	push   esi
c0021747:	53                   	push   ebx
c0021748:	e8 5f fc ff ff       	call   c00213ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002174d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0021751:	83 c4 20             	add    esp,0x20
c0021754:	83 e0 7f             	and    eax,0x7f
c0021757:	83 f8 70             	cmp    eax,0x70
c002175a:	74 15                	je     c0021771 <ATAPI::detectMedia()+0x77>
c002175c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021763:	75 0c                	jne    c0021771 <ATAPI::detectMedia()+0x77>
c0021765:	83 ec 0c             	sub    esp,0xc
c0021768:	53                   	push   ebx
c0021769:	e8 80 ff ff ff       	call   c00216ee <ATAPI::diskInserted()>
c002176e:	83 c4 10             	add    esp,0x10
c0021771:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021775:	83 e0 0f             	and    eax,0xf
c0021778:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002177d:	0f b6 c0             	movzx  eax,al
c0021780:	75 19                	jne    c002179b <ATAPI::detectMedia()+0xa1>
c0021782:	83 f8 02             	cmp    eax,0x2
c0021785:	75 14                	jne    c002179b <ATAPI::detectMedia()+0xa1>
c0021787:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002178e:	74 24                	je     c00217b4 <ATAPI::detectMedia()+0xba>
c0021790:	83 ec 0c             	sub    esp,0xc
c0021793:	53                   	push   ebx
c0021794:	e8 d3 fe ff ff       	call   c002166c <ATAPI::diskRemoved()>
c0021799:	eb 16                	jmp    c00217b1 <ATAPI::detectMedia()+0xb7>
c002179b:	85 c0                	test   eax,eax
c002179d:	75 15                	jne    c00217b4 <ATAPI::detectMedia()+0xba>
c002179f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00217a6:	75 0c                	jne    c00217b4 <ATAPI::detectMedia()+0xba>
c00217a8:	83 ec 0c             	sub    esp,0xc
c00217ab:	53                   	push   ebx
c00217ac:	e8 3d ff ff ff       	call   c00216ee <ATAPI::diskInserted()>
c00217b1:	83 c4 10             	add    esp,0x10
c00217b4:	83 c4 24             	add    esp,0x24
c00217b7:	5b                   	pop    ebx
c00217b8:	5e                   	pop    esi
c00217b9:	c3                   	ret    

c00217ba <ATAPI::open(int, int, void*)>:
c00217ba:	56                   	push   esi
c00217bb:	53                   	push   ebx
c00217bc:	50                   	push   eax
c00217bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00217c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00217c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00217c9:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00217cf:	c1 e0 06             	shl    eax,0x6
c00217d2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00217d8:	01 d0                	add    eax,edx
c00217da:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00217e1:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00217e7:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00217ee:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00217f8:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00217ff:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0021805:	6a 04                	push   0x4
c0021807:	6a 0c                	push   0xc
c0021809:	51                   	push   ecx
c002180a:	52                   	push   edx
c002180b:	e8 fc e1 ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021810:	90                   	nop
c0021811:	90                   	nop
c0021812:	6a 00                	push   0x0
c0021814:	6a 0c                	push   0xc
c0021816:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002181d:	50                   	push   eax
c002181e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021824:	e8 e3 e1 ff ff       	call   c001fa0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021829:	83 c4 14             	add    esp,0x14
c002182c:	68 78 01 00 00       	push   0x178
c0021831:	e8 9e e6 fe ff       	call   c000fed4 <malloc>
c0021836:	83 c4 0c             	add    esp,0xc
c0021839:	6a 00                	push   0x0
c002183b:	68 ff ff ff 7f       	push   0x7fffffff
c0021840:	6a 00                	push   0x0
c0021842:	6a 00                	push   0x0
c0021844:	53                   	push   ebx
c0021845:	68 1f bc 02 c0       	push   0xc002bc1f
c002184a:	89 c6                	mov    esi,eax
c002184c:	50                   	push   eax
c002184d:	e8 d4 97 fe ff       	call   c000b026 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0021852:	83 c4 14             	add    esp,0x14
c0021855:	56                   	push   esi
c0021856:	e8 8b 98 fe ff       	call   c000b0e6 <LogicalDisk::assignDriveLetter()>
c002185b:	5a                   	pop    edx
c002185c:	59                   	pop    ecx
c002185d:	0f be c0             	movsx  eax,al
c0021860:	50                   	push   eax
c0021861:	68 64 ba 02 c0       	push   0xc002ba64
c0021866:	e8 fb 56 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c002186b:	58                   	pop    eax
c002186c:	5a                   	pop    edx
c002186d:	56                   	push   esi
c002186e:	53                   	push   ebx
c002186f:	e8 ce 89 fe ff       	call   c000a242 <Device::addChild(Device*)>
c0021874:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c002187a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002187d:	e8 0c 8e fe ff       	call   c000a68e <PhysicalDisk::startCache()>
c0021882:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0021889:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002188c:	e8 69 fe ff ff       	call   c00216fa <ATAPI::detectMedia()>
c0021891:	83 c4 14             	add    esp,0x14
c0021894:	31 c0                	xor    eax,eax
c0021896:	5b                   	pop    ebx
c0021897:	5e                   	pop    esi
c0021898:	c3                   	ret    
c0021899:	90                   	nop

c002189a <ATAPI::read(unsigned long long, int, void*)>:
c002189a:	55                   	push   ebp
c002189b:	57                   	push   edi
c002189c:	56                   	push   esi
c002189d:	53                   	push   ebx
c002189e:	83 ec 1c             	sub    esp,0x1c
c00218a1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00218a5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00218a9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00218ad:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00218b4:	74 3c                	je     c00218f2 <ATAPI::read(unsigned long long, int, void*)+0x58>
c00218b6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00218ba:	b9 03 00 00 00       	mov    ecx,0x3
c00218bf:	fc                   	cld    
c00218c0:	31 c0                	xor    eax,eax
c00218c2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00218c4:	89 e8                	mov    eax,ebp
c00218c6:	0f ce                	bswap  esi
c00218c8:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00218cc:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00218d1:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c00218d5:	50                   	push   eax
c00218d6:	50                   	push   eax
c00218d7:	55                   	push   ebp
c00218d8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00218dc:	c1 e5 0b             	shl    ebp,0xb
c00218df:	6a 00                	push   0x0
c00218e1:	55                   	push   ebp
c00218e2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00218e6:	50                   	push   eax
c00218e7:	53                   	push   ebx
c00218e8:	e8 bf fa ff ff       	call   c00213ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00218ed:	83 c4 20             	add    esp,0x20
c00218f0:	eb 1a                	jmp    c002190c <ATAPI::read(unsigned long long, int, void*)+0x72>
c00218f2:	83 ec 0c             	sub    esp,0xc
c00218f5:	53                   	push   ebx
c00218f6:	e8 ff fd ff ff       	call   c00216fa <ATAPI::detectMedia()>
c00218fb:	83 c4 10             	add    esp,0x10
c00218fe:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021905:	75 af                	jne    c00218b6 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0021907:	b8 02 00 00 00       	mov    eax,0x2
c002190c:	83 c4 1c             	add    esp,0x1c
c002190f:	5b                   	pop    ebx
c0021910:	5e                   	pop    esi
c0021911:	5f                   	pop    edi
c0021912:	5d                   	pop    ebp
c0021913:	c3                   	ret    

c0021914 <SATA::close(int, int, void*)>:
c0021914:	83 ec 0c             	sub    esp,0xc
c0021917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002191b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021921:	85 c0                	test   eax,eax
c0021923:	74 0c                	je     c0021931 <SATA::close(int, int, void*)+0x1d>
c0021925:	8b 10                	mov    edx,DWORD PTR [eax]
c0021927:	83 ec 0c             	sub    esp,0xc
c002192a:	50                   	push   eax
c002192b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002192e:	83 c4 10             	add    esp,0x10
c0021931:	31 c0                	xor    eax,eax
c0021933:	83 c4 0c             	add    esp,0xc
c0021936:	c3                   	ret    
c0021937:	90                   	nop

c0021938 <SATA::powerSaving(PowerSavingLevel)>:
c0021938:	c3                   	ret    
c0021939:	90                   	nop

c002193a <SATA::open(int, int, void*)>:
c002193a:	56                   	push   esi
c002193b:	53                   	push   ebx
c002193c:	83 ec 10             	sub    esp,0x10
c002193f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021943:	68 ac ba 02 c0       	push   0xc002baac
c0021948:	e8 19 56 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c002194d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021951:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002195b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0021965:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002196b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002196f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0021979:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0021980:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0021986:	e8 97 eb fe ff       	call   c0010522 <Phys::allocatePage()>
c002198b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0021991:	89 c6                	mov    esi,eax
c0021993:	e8 8a eb fe ff       	call   c0010522 <Phys::allocatePage()>
c0021998:	81 c6 00 10 00 00    	add    esi,0x1000
c002199e:	83 c4 10             	add    esp,0x10
c00219a1:	39 c6                	cmp    esi,eax
c00219a3:	74 10                	je     c00219b5 <SATA::open(int, int, void*)+0x7b>
c00219a5:	83 ec 0c             	sub    esp,0xc
c00219a8:	68 b8 ba 02 c0       	push   0xc002bab8
c00219ad:	e8 76 e9 fe ff       	call   c0010328 <KePanic(char const*)>
c00219b2:	83 c4 10             	add    esp,0x10
c00219b5:	83 ec 0c             	sub    esp,0xc
c00219b8:	6a 02                	push   0x2
c00219ba:	e8 b0 1e ff ff       	call   c001386f <Virt::allocateKernelVirtualPages(int)>
c00219bf:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00219c5:	6a 03                	push   0x3
c00219c7:	50                   	push   eax
c00219c8:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00219ce:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c00219d4:	e8 6f 25 ff ff       	call   c0013f48 <VAS::mapPage(unsigned long, unsigned long, int)>
c00219d9:	83 c4 14             	add    esp,0x14
c00219dc:	53                   	push   ebx
c00219dd:	e8 ac 8c fe ff       	call   c000a68e <PhysicalDisk::startCache()>
c00219e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00219e5:	e8 10 9b fe ff       	call   c000b4fa <createPartitionsForDisk(PhysicalDisk*)>
c00219ea:	83 c4 14             	add    esp,0x14
c00219ed:	31 c0                	xor    eax,eax
c00219ef:	5b                   	pop    ebx
c00219f0:	5e                   	pop    esi
c00219f1:	c3                   	ret    

c00219f2 <SATA::SATA()>:
c00219f2:	83 ec 0c             	sub    esp,0xc
c00219f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219f9:	83 ec 04             	sub    esp,0x4
c00219fc:	68 00 02 00 00       	push   0x200
c0021a01:	68 cc ba 02 c0       	push   0xc002bacc
c0021a06:	50                   	push   eax
c0021a07:	e8 1a 8c fe ff       	call   c000a626 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021a0c:	83 c4 10             	add    esp,0x10
c0021a0f:	ba 3c bb 02 c0       	mov    edx,0xc002bb3c
c0021a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a18:	89 10                	mov    DWORD PTR [eax],edx
c0021a1a:	90                   	nop
c0021a1b:	83 c4 0c             	add    esp,0xc
c0021a1e:	c3                   	ret    
c0021a1f:	90                   	nop

c0021a20 <SATA::access(unsigned long long, int, void*, bool)>:
c0021a20:	55                   	push   ebp
c0021a21:	57                   	push   edi
c0021a22:	56                   	push   esi
c0021a23:	53                   	push   ebx
c0021a24:	83 ec 2c             	sub    esp,0x2c
c0021a27:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0021a2b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0021a2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021a33:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021a3b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0021a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a43:	fa                   	cli    
c0021a44:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c0021a4a:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0021a4f:	7e 10                	jle    c0021a61 <SATA::access(unsigned long long, int, void*, bool)+0x41>
c0021a51:	83 ec 0c             	sub    esp,0xc
c0021a54:	68 dc ba 02 c0       	push   0xc002badc
c0021a59:	e8 ca e8 fe ff       	call   c0010328 <KePanic(char const*)>
c0021a5e:	83 c4 10             	add    esp,0x10
c0021a61:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0021a67:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c0021a6d:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0021a73:	89 e8                	mov    eax,ebp
c0021a75:	c1 e0 07             	shl    eax,0x7
c0021a78:	01 d0                	add    eax,edx
c0021a7a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0021a84:	8d 45 02             	lea    eax,[ebp+0x2]
c0021a87:	51                   	push   ecx
c0021a88:	c1 e0 07             	shl    eax,0x7
c0021a8b:	51                   	push   ecx
c0021a8c:	01 d0                	add    eax,edx
c0021a8e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021a92:	50                   	push   eax
c0021a93:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0021a99:	e8 ee ed ff ff       	call   c002088c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0021a9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021aa2:	83 c4 10             	add    esp,0x10
c0021aa5:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c0021aaa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021aae:	0f 84 a6 01 00 00    	je     c0021c5a <SATA::access(unsigned long long, int, void*, bool)+0x23a>
c0021ab4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0021ab8:	c1 e0 09             	shl    eax,0x9
c0021abb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0021ac0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021ac4:	74 0e                	je     c0021ad4 <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c0021ac6:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0021acc:	89 c1                	mov    ecx,eax
c0021ace:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0021ad2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021ad4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0021ad8:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0021ade:	8d 45 02             	lea    eax,[ebp+0x2]
c0021ae1:	c1 e0 07             	shl    eax,0x7
c0021ae4:	01 d0                	add    eax,edx
c0021ae6:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ae8:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0021aee:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0021af4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021af8:	c1 e1 05             	shl    ecx,0x5
c0021afb:	01 c8                	add    eax,ecx
c0021afd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021b01:	83 e1 01             	and    ecx,0x1
c0021b04:	89 ce                	mov    esi,ecx
c0021b06:	8a 08                	mov    cl,BYTE PTR [eax]
c0021b08:	c1 e6 06             	shl    esi,0x6
c0021b0b:	83 e1 bf             	and    ecx,0xffffffbf
c0021b0e:	09 f1                	or     ecx,esi
c0021b10:	88 08                	mov    BYTE PTR [eax],cl
c0021b12:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021b14:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0021b1a:	81 c9 05 00 01 00    	or     ecx,0x10005
c0021b20:	89 08                	mov    DWORD PTR [eax],ecx
c0021b22:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0021b28:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0021b2e:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0021b34:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0021b37:	50                   	push   eax
c0021b38:	68 90 00 00 00       	push   0x90
c0021b3d:	6a 00                	push   0x0
c0021b3f:	56                   	push   esi
c0021b40:	e8 ab e9 fd ff       	call   c00004f0 <memset>
c0021b45:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0021b4b:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0021b51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b55:	83 c4 10             	add    esp,0x10
c0021b58:	48                   	dec    eax
c0021b59:	25 ff ff 3f 00       	and    eax,0x3fffff
c0021b5e:	89 c1                	mov    ecx,eax
c0021b60:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0021b66:	25 00 00 c0 ff       	and    eax,0xffc00000
c0021b6b:	09 c8                	or     eax,ecx
c0021b6d:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0021b73:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c0021b79:	83 c8 80             	or     eax,0xffffff80
c0021b7c:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c0021b82:	66 8b 06             	mov    ax,WORD PTR [esi]
c0021b85:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021b89:	25 00 7f 00 00       	and    eax,0x7f00
c0021b8e:	0d 27 80 ff ff       	or     eax,0xffff8027
c0021b93:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0021b98:	66 89 06             	mov    WORD PTR [esi],ax
c0021b9b:	b0 35                	mov    al,0x35
c0021b9d:	75 02                	jne    c0021ba1 <SATA::access(unsigned long long, int, void*, bool)+0x181>
c0021b9f:	b0 25                	mov    al,0x25
c0021ba1:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0021ba4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021ba8:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0021bac:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c0021bb0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021bb4:	c1 e8 10             	shr    eax,0x10
c0021bb7:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0021bba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021bbe:	c1 e8 18             	shr    eax,0x18
c0021bc1:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0021bc4:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0021bc8:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0021bcb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021bcf:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0021bd2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0021bd6:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0021bda:	89 ee                	mov    esi,ebp
c0021bdc:	31 c0                	xor    eax,eax
c0021bde:	c1 e6 07             	shl    esi,0x7
c0021be1:	01 d6                	add    esi,edx
c0021be3:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0021be9:	80 e1 88             	and    cl,0x88
c0021bec:	74 0a                	je     c0021bf8 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c0021bee:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0021bf3:	74 0a                	je     c0021bff <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0021bf5:	40                   	inc    eax
c0021bf6:	eb eb                	jmp    c0021be3 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c0021bf8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0021bfd:	75 0a                	jne    c0021c09 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c0021bff:	83 ec 0c             	sub    esp,0xc
c0021c02:	68 15 bb 02 c0       	push   0xc002bb15
c0021c07:	eb 34                	jmp    c0021c3d <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0021c09:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0021c0d:	c1 e5 07             	shl    ebp,0x7
c0021c10:	b8 01 00 00 00       	mov    eax,0x1
c0021c15:	01 ea                	add    edx,ebp
c0021c17:	d3 e0                	shl    eax,cl
c0021c19:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0021c1f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0021c25:	85 c8                	test   eax,ecx
c0021c27:	74 25                	je     c0021c4e <SATA::access(unsigned long long, int, void*, bool)+0x22e>
c0021c29:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0021c2f:	0f ba e1 1e          	bt     ecx,0x1e
c0021c33:	73 ea                	jae    c0021c1f <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c0021c35:	83 ec 0c             	sub    esp,0xc
c0021c38:	68 23 bb 02 c0       	push   0xc002bb23
c0021c3d:	e8 24 53 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0021c42:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c0021c49:	83 c4 10             	add    esp,0x10
c0021c4c:	eb 13                	jmp    c0021c61 <SATA::access(unsigned long long, int, void*, bool)+0x241>
c0021c4e:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0021c54:	0f ba e0 1e          	bt     eax,0x1e
c0021c58:	73 18                	jae    c0021c72 <SATA::access(unsigned long long, int, void*, bool)+0x252>
c0021c5a:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c0021c61:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c0021c68:	75 01                	jne    c0021c6b <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c0021c6a:	fb                   	sti    
c0021c6b:	b8 01 00 00 00       	mov    eax,0x1
c0021c70:	eb 2c                	jmp    c0021c9e <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c0021c72:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0021c77:	75 10                	jne    c0021c89 <SATA::access(unsigned long long, int, void*, bool)+0x269>
c0021c79:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0021c7f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0021c83:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021c87:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021c89:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c0021c90:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0021c95:	85 c0                	test   eax,eax
c0021c97:	75 03                	jne    c0021c9c <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c0021c99:	fb                   	sti    
c0021c9a:	eb 02                	jmp    c0021c9e <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c0021c9c:	31 c0                	xor    eax,eax
c0021c9e:	83 c4 2c             	add    esp,0x2c
c0021ca1:	5b                   	pop    ebx
c0021ca2:	5e                   	pop    esi
c0021ca3:	5f                   	pop    edi
c0021ca4:	5d                   	pop    ebp
c0021ca5:	c3                   	ret    

c0021ca6 <SATA::read(unsigned long long, int, void*)>:
c0021ca6:	57                   	push   edi
c0021ca7:	b8 04 00 00 00       	mov    eax,0x4
c0021cac:	56                   	push   esi
c0021cad:	53                   	push   ebx
c0021cae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021cb2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021cb6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0021cba:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0021cbe:	8d 7a ff             	lea    edi,[edx-0x1]
c0021cc1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0021cc7:	77 25                	ja     c0021cee <SATA::read(unsigned long long, int, void*)+0x48>
c0021cc9:	85 f6                	test   esi,esi
c0021ccb:	b8 06 00 00 00       	mov    eax,0x6
c0021cd0:	74 1c                	je     c0021cee <SATA::read(unsigned long long, int, void*)+0x48>
c0021cd2:	50                   	push   eax
c0021cd3:	50                   	push   eax
c0021cd4:	6a 00                	push   0x0
c0021cd6:	56                   	push   esi
c0021cd7:	52                   	push   edx
c0021cd8:	53                   	push   ebx
c0021cd9:	51                   	push   ecx
c0021cda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021cde:	e8 3d fd ff ff       	call   c0021a20 <SATA::access(unsigned long long, int, void*, bool)>
c0021ce3:	83 c4 20             	add    esp,0x20
c0021ce6:	85 c0                	test   eax,eax
c0021ce8:	0f 95 c0             	setne  al
c0021ceb:	0f b6 c0             	movzx  eax,al
c0021cee:	5b                   	pop    ebx
c0021cef:	5e                   	pop    esi
c0021cf0:	5f                   	pop    edi
c0021cf1:	c3                   	ret    

c0021cf2 <SATA::write(unsigned long long, int, void*)>:
c0021cf2:	55                   	push   ebp
c0021cf3:	b8 04 00 00 00       	mov    eax,0x4
c0021cf8:	57                   	push   edi
c0021cf9:	56                   	push   esi
c0021cfa:	53                   	push   ebx
c0021cfb:	83 ec 0c             	sub    esp,0xc
c0021cfe:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021d02:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021d06:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0021d0a:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021d0e:	8d 73 ff             	lea    esi,[ebx-0x1]
c0021d11:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0021d17:	77 3d                	ja     c0021d56 <SATA::write(unsigned long long, int, void*)+0x64>
c0021d19:	85 ed                	test   ebp,ebp
c0021d1b:	b8 06 00 00 00       	mov    eax,0x6
c0021d20:	74 34                	je     c0021d56 <SATA::write(unsigned long long, int, void*)+0x64>
c0021d22:	c1 e3 09             	shl    ebx,0x9
c0021d25:	01 eb                	add    ebx,ebp
c0021d27:	50                   	push   eax
c0021d28:	89 d6                	mov    esi,edx
c0021d2a:	50                   	push   eax
c0021d2b:	83 c6 01             	add    esi,0x1
c0021d2e:	6a 01                	push   0x1
c0021d30:	89 cf                	mov    edi,ecx
c0021d32:	55                   	push   ebp
c0021d33:	83 d7 00             	adc    edi,0x0
c0021d36:	6a 01                	push   0x1
c0021d38:	81 c5 00 02 00 00    	add    ebp,0x200
c0021d3e:	51                   	push   ecx
c0021d3f:	52                   	push   edx
c0021d40:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021d44:	e8 d7 fc ff ff       	call   c0021a20 <SATA::access(unsigned long long, int, void*, bool)>
c0021d49:	83 c4 20             	add    esp,0x20
c0021d4c:	39 dd                	cmp    ebp,ebx
c0021d4e:	89 f2                	mov    edx,esi
c0021d50:	89 f9                	mov    ecx,edi
c0021d52:	75 d3                	jne    c0021d27 <SATA::write(unsigned long long, int, void*)+0x35>
c0021d54:	31 c0                	xor    eax,eax
c0021d56:	83 c4 0c             	add    esp,0xc
c0021d59:	5b                   	pop    ebx
c0021d5a:	5e                   	pop    esi
c0021d5b:	5f                   	pop    edi
c0021d5c:	5d                   	pop    ebp
c0021d5d:	c3                   	ret    

c0021d5e <SATAPI::write(unsigned long long, int, void*)>:
c0021d5e:	b8 03 00 00 00       	mov    eax,0x3
c0021d63:	c3                   	ret    

c0021d64 <SATAPI::close(int, int, void*)>:
c0021d64:	83 ec 0c             	sub    esp,0xc
c0021d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d6b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021d71:	85 c0                	test   eax,eax
c0021d73:	74 0c                	je     c0021d81 <SATAPI::close(int, int, void*)+0x1d>
c0021d75:	8b 10                	mov    edx,DWORD PTR [eax]
c0021d77:	83 ec 0c             	sub    esp,0xc
c0021d7a:	50                   	push   eax
c0021d7b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0021d7e:	83 c4 10             	add    esp,0x10
c0021d81:	31 c0                	xor    eax,eax
c0021d83:	83 c4 0c             	add    esp,0xc
c0021d86:	c3                   	ret    
c0021d87:	90                   	nop

c0021d88 <SATAPI::SATAPI()>:
c0021d88:	83 ec 0c             	sub    esp,0xc
c0021d8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d8f:	83 ec 04             	sub    esp,0x4
c0021d92:	68 00 08 00 00       	push   0x800
c0021d97:	68 6c bb 02 c0       	push   0xc002bb6c
c0021d9c:	50                   	push   eax
c0021d9d:	e8 84 88 fe ff       	call   c000a626 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021da2:	83 c4 10             	add    esp,0x10
c0021da5:	ba 60 bc 02 c0       	mov    edx,0xc002bc60
c0021daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dae:	89 10                	mov    DWORD PTR [eax],edx
c0021db0:	90                   	nop
c0021db1:	83 c4 0c             	add    esp,0xc
c0021db4:	c3                   	ret    
c0021db5:	90                   	nop

c0021db6 <SATAPI::diskRemoved()>:
c0021db6:	c3                   	ret    
c0021db7:	90                   	nop

c0021db8 <SATAPI::diskInserted()>:
c0021db8:	83 ec 18             	sub    esp,0x18
c0021dbb:	68 78 bb 02 c0       	push   0xc002bb78
c0021dc0:	e8 a1 51 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0021dc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021dc9:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0021dd0:	83 c4 1c             	add    esp,0x1c
c0021dd3:	c3                   	ret    

c0021dd4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0021dd4:	55                   	push   ebp
c0021dd5:	57                   	push   edi
c0021dd6:	56                   	push   esi
c0021dd7:	53                   	push   ebx
c0021dd8:	83 ec 34             	sub    esp,0x34
c0021ddb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0021ddf:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0021de3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021de7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021deb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021def:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0021df5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021dfb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021dff:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0021e05:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021e09:	83 c0 02             	add    eax,0x2
c0021e0c:	c1 e0 07             	shl    eax,0x7
c0021e0f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0021e13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021e17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021e1b:	c1 e0 07             	shl    eax,0x7
c0021e1e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0021e22:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021e26:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0021e30:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0021e34:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0021e3a:	e8 4d ea ff ff       	call   c002088c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0021e3f:	83 c4 10             	add    esp,0x10
c0021e42:	89 c2                	mov    edx,eax
c0021e44:	b8 01 00 00 00       	mov    eax,0x1
c0021e49:	83 fa ff             	cmp    edx,0xffffffff
c0021e4c:	0f 84 63 02 00 00    	je     c00220b5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2e1>
c0021e52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0021e56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e5a:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0021e60:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e62:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0021e68:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0021e6e:	89 d1                	mov    ecx,edx
c0021e70:	c1 e1 05             	shl    ecx,0x5
c0021e73:	01 c8                	add    eax,ecx
c0021e75:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021e77:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0021e7d:	81 c9 25 00 01 00    	or     ecx,0x10025
c0021e83:	89 08                	mov    DWORD PTR [eax],ecx
c0021e85:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0021e8b:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0021e91:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0021e97:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0021e9a:	50                   	push   eax
c0021e9b:	68 90 00 00 00       	push   0x90
c0021ea0:	6a 00                	push   0x0
c0021ea2:	53                   	push   ebx
c0021ea3:	e8 48 e6 fd ff       	call   c00004f0 <memset>
c0021ea8:	8d 7b 40             	lea    edi,[ebx+0x40]
c0021eab:	b9 0c 00 00 00       	mov    ecx,0xc
c0021eb0:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0021eb4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021eb6:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0021ebc:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0021ec0:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0021ec4:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0021eca:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021ece:	48                   	dec    eax
c0021ecf:	25 ff ff 3f 00       	and    eax,0x3fffff
c0021ed4:	89 c1                	mov    ecx,eax
c0021ed6:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0021edc:	25 00 00 c0 ff       	and    eax,0xffc00000
c0021ee1:	09 c8                	or     eax,ecx
c0021ee3:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0021ee9:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c0021eef:	83 c8 80             	or     eax,0xffffff80
c0021ef2:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c0021ef8:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0021efb:	25 00 7f 00 00       	and    eax,0x7f00
c0021f00:	0d 27 80 ff ff       	or     eax,0xffff8027
c0021f05:	66 89 03             	mov    WORD PTR [ebx],ax
c0021f08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f0c:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0021f10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f14:	c1 e8 10             	shr    eax,0x10
c0021f17:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0021f1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f1e:	c1 e8 18             	shr    eax,0x18
c0021f21:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0021f24:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0021f28:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0021f2b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021f2f:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0021f32:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0021f36:	83 c4 10             	add    esp,0x10
c0021f39:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021f3d:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0021f41:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0021f45:	31 c0                	xor    eax,eax
c0021f47:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0021f4d:	80 e1 88             	and    cl,0x88
c0021f50:	74 0a                	je     c0021f5c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c0021f52:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0021f57:	74 0a                	je     c0021f63 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c0021f59:	40                   	inc    eax
c0021f5a:	eb eb                	jmp    c0021f47 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c0021f5c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0021f61:	75 43                	jne    c0021fa6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c0021f63:	83 ec 0c             	sub    esp,0xc
c0021f66:	68 90 bb 02 c0       	push   0xc002bb90
c0021f6b:	e8 f6 4f fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0021f70:	58                   	pop    eax
c0021f71:	5a                   	pop    edx
c0021f72:	68 a5 bb 02 c0       	push   0xc002bba5
c0021f77:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c0021f7d:	e8 e2 0c ff ff       	call   c0012c64 <VgaText::puts(char const*)>
c0021f82:	59                   	pop    ecx
c0021f83:	5b                   	pop    ebx
c0021f84:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0021f88:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0021f8e:	e8 93 e9 ff ff       	call   c0020926 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0021f93:	5e                   	pop    esi
c0021f94:	5f                   	pop    edi
c0021f95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0021f99:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0021f9f:	e8 62 e9 ff ff       	call   c0020906 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0021fa4:	eb 48                	jmp    c0021fee <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c0021fa6:	b8 01 00 00 00       	mov    eax,0x1
c0021fab:	88 d1                	mov    cl,dl
c0021fad:	d3 e0                	shl    eax,cl
c0021faf:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c0021fb4:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0021fba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021fbe:	89 c7                	mov    edi,eax
c0021fc0:	c1 e3 07             	shl    ebx,0x7
c0021fc3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0021fc7:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c0021fcd:	85 c7                	test   edi,eax
c0021fcf:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0021fd5:	0f 84 a7 00 00 00    	je     c0022082 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2ae>
c0021fdb:	0f ba e0 1e          	bt     eax,0x1e
c0021fdf:	73 1a                	jae    c0021ffb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c0021fe1:	83 ec 0c             	sub    esp,0xc
c0021fe4:	68 b7 bb 02 c0       	push   0xc002bbb7
c0021fe9:	e8 78 4f fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0021fee:	83 c4 10             	add    esp,0x10
c0021ff1:	b8 01 00 00 00       	mov    eax,0x1
c0021ff6:	e9 ba 00 00 00       	jmp    c00220b5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2e1>
c0021ffb:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c0022001:	83 f8 0d             	cmp    eax,0xd
c0022004:	77 0b                	ja     c0022011 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23d>
c0022006:	50                   	push   eax
c0022007:	50                   	push   eax
c0022008:	6a 00                	push   0x0
c002200a:	68 c8 00 00 00       	push   0xc8
c002200f:	eb 2a                	jmp    c002203b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c0022011:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c0022017:	83 f8 0d             	cmp    eax,0xd
c002201a:	77 0b                	ja     c0022027 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c002201c:	51                   	push   ecx
c002201d:	51                   	push   ecx
c002201e:	6a 00                	push   0x0
c0022020:	68 58 02 00 00       	push   0x258
c0022025:	eb 14                	jmp    c002203b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c0022027:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c002202d:	83 f8 06             	cmp    eax,0x6
c0022030:	77 11                	ja     c0022043 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26f>
c0022032:	52                   	push   edx
c0022033:	52                   	push   edx
c0022034:	6a 00                	push   0x0
c0022036:	68 dc 05 00 00       	push   0x5dc
c002203b:	e8 64 50 ff ff       	call   c00170a4 <milliTenthSleep(unsigned long long)>
c0022040:	83 c4 10             	add    esp,0x10
c0022043:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0022047:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c002204a:	75 06                	jne    c0022052 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c002204c:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c0022050:	74 16                	je     c0022068 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c0022052:	83 fe 06             	cmp    esi,0x6
c0022055:	77 11                	ja     c0022068 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c0022057:	50                   	push   eax
c0022058:	50                   	push   eax
c0022059:	6a 00                	push   0x0
c002205b:	68 c4 09 00 00       	push   0x9c4
c0022060:	e8 3f 50 ff ff       	call   c00170a4 <milliTenthSleep(unsigned long long)>
c0022065:	83 c4 10             	add    esp,0x10
c0022068:	46                   	inc    esi
c0022069:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c002206f:	0f 85 52 ff ff ff    	jne    c0021fc7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c0022075:	83 ec 0c             	sub    esp,0xc
c0022078:	68 ca bb 02 c0       	push   0xc002bbca
c002207d:	e9 67 ff ff ff       	jmp    c0021fe9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c0022082:	0f ba e0 1e          	bt     eax,0x1e
c0022086:	73 0d                	jae    c0022095 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c1>
c0022088:	83 ec 0c             	sub    esp,0xc
c002208b:	68 de bb 02 c0       	push   0xc002bbde
c0022090:	e9 54 ff ff ff       	jmp    c0021fe9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c0022095:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002209a:	74 17                	je     c00220b3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2df>
c002209c:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c00220a1:	74 10                	je     c00220b3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2df>
c00220a3:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c00220a9:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00220ad:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00220b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00220b3:	31 c0                	xor    eax,eax
c00220b5:	83 c4 2c             	add    esp,0x2c
c00220b8:	5b                   	pop    ebx
c00220b9:	5e                   	pop    esi
c00220ba:	5f                   	pop    edi
c00220bb:	5d                   	pop    ebp
c00220bc:	c3                   	ret    
c00220bd:	90                   	nop

c00220be <SATAPI::eject()>:
c00220be:	57                   	push   edi
c00220bf:	b9 03 00 00 00       	mov    ecx,0x3
c00220c4:	83 ec 18             	sub    esp,0x18
c00220c7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00220cb:	fc                   	cld    
c00220cc:	31 c0                	xor    eax,eax
c00220ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00220d0:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00220d5:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00220da:	50                   	push   eax
c00220db:	6a 00                	push   0x0
c00220dd:	6a 00                	push   0x0
c00220df:	6a 00                	push   0x0
c00220e1:	6a 00                	push   0x0
c00220e3:	6a 02                	push   0x2
c00220e5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220e9:	50                   	push   eax
c00220ea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00220ee:	e8 e1 fc ff ff       	call   c0021dd4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00220f3:	83 c4 38             	add    esp,0x38
c00220f6:	31 c0                	xor    eax,eax
c00220f8:	5f                   	pop    edi
c00220f9:	c3                   	ret    

c00220fa <SATAPI::detectMedia()>:
c00220fa:	53                   	push   ebx
c00220fb:	83 ec 14             	sub    esp,0x14
c00220fe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022102:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0022108:	e8 d3 9a fe ff       	call   c000bbe0 <VCache::writeWriteBuffer()>
c002210d:	59                   	pop    ecx
c002210e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0022114:	e8 b7 9a fe ff       	call   c000bbd0 <VCache::invalidateReadBuffer()>
c0022119:	c7 04 24 f3 bb 02 c0 	mov    DWORD PTR [esp],0xc002bbf3
c0022120:	e8 41 4e fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0022125:	83 c4 10             	add    esp,0x10
c0022128:	31 c0                	xor    eax,eax
c002212a:	8b 14 85 e0 2a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcd520]
c0022131:	85 d2                	test   edx,edx
c0022133:	74 0f                	je     c0022144 <SATAPI::detectMedia()+0x4a>
c0022135:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c002213b:	75 07                	jne    c0022144 <SATAPI::detectMedia()+0x4a>
c002213d:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c0022144:	40                   	inc    eax
c0022145:	83 f8 1a             	cmp    eax,0x1a
c0022148:	75 e0                	jne    c002212a <SATAPI::detectMedia()+0x30>
c002214a:	83 c4 08             	add    esp,0x8
c002214d:	5b                   	pop    ebx
c002214e:	c3                   	ret    
c002214f:	90                   	nop

c0022150 <SATAPI::open(int, int, void*)>:
c0022150:	56                   	push   esi
c0022151:	53                   	push   ebx
c0022152:	51                   	push   ecx
c0022153:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022157:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002215b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0022165:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002216b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002216f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0022179:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0022183:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002218a:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0022190:	e8 8d e3 fe ff       	call   c0010522 <Phys::allocatePage()>
c0022195:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002219b:	89 c6                	mov    esi,eax
c002219d:	e8 80 e3 fe ff       	call   c0010522 <Phys::allocatePage()>
c00221a2:	81 c6 00 10 00 00    	add    esi,0x1000
c00221a8:	39 c6                	cmp    esi,eax
c00221aa:	74 10                	je     c00221bc <SATAPI::open(int, int, void*)+0x6c>
c00221ac:	83 ec 0c             	sub    esp,0xc
c00221af:	68 08 bc 02 c0       	push   0xc002bc08
c00221b4:	e8 6f e1 fe ff       	call   c0010328 <KePanic(char const*)>
c00221b9:	83 c4 10             	add    esp,0x10
c00221bc:	83 ec 0c             	sub    esp,0xc
c00221bf:	6a 02                	push   0x2
c00221c1:	e8 a9 16 ff ff       	call   c001386f <Virt::allocateKernelVirtualPages(int)>
c00221c6:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c00221cc:	6a 03                	push   0x3
c00221ce:	50                   	push   eax
c00221cf:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00221d5:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c00221db:	e8 68 1d ff ff       	call   c0013f48 <VAS::mapPage(unsigned long, unsigned long, int)>
c00221e0:	83 c4 14             	add    esp,0x14
c00221e3:	68 78 01 00 00       	push   0x178
c00221e8:	e8 e7 dc fe ff       	call   c000fed4 <malloc>
c00221ed:	83 c4 0c             	add    esp,0xc
c00221f0:	6a 00                	push   0x0
c00221f2:	68 ff ff ff 7f       	push   0x7fffffff
c00221f7:	6a 00                	push   0x0
c00221f9:	6a 00                	push   0x0
c00221fb:	53                   	push   ebx
c00221fc:	68 1e bc 02 c0       	push   0xc002bc1e
c0022201:	89 c6                	mov    esi,eax
c0022203:	50                   	push   eax
c0022204:	e8 1d 8e fe ff       	call   c000b026 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0022209:	83 c4 14             	add    esp,0x14
c002220c:	56                   	push   esi
c002220d:	e8 d4 8e fe ff       	call   c000b0e6 <LogicalDisk::assignDriveLetter()>
c0022212:	5a                   	pop    edx
c0022213:	59                   	pop    ecx
c0022214:	0f be c0             	movsx  eax,al
c0022217:	50                   	push   eax
c0022218:	68 64 ba 02 c0       	push   0xc002ba64
c002221d:	e8 44 4d fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0022222:	58                   	pop    eax
c0022223:	5a                   	pop    edx
c0022224:	56                   	push   esi
c0022225:	53                   	push   ebx
c0022226:	e8 17 80 fe ff       	call   c000a242 <Device::addChild(Device*)>
c002222b:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0022231:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022234:	e8 55 84 fe ff       	call   c000a68e <PhysicalDisk::startCache()>
c0022239:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0022240:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022243:	e8 b2 fe ff ff       	call   c00220fa <SATAPI::detectMedia()>
c0022248:	83 c4 14             	add    esp,0x14
c002224b:	31 c0                	xor    eax,eax
c002224d:	5b                   	pop    ebx
c002224e:	5e                   	pop    esi
c002224f:	c3                   	ret    

c0022250 <SATAPI::read(unsigned long long, int, void*)>:
c0022250:	55                   	push   ebp
c0022251:	57                   	push   edi
c0022252:	56                   	push   esi
c0022253:	53                   	push   ebx
c0022254:	83 ec 3c             	sub    esp,0x3c
c0022257:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c002225b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002225f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0022263:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0022267:	83 fd 04             	cmp    ebp,0x4
c002226a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002226e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022272:	7e 10                	jle    c0022284 <SATAPI::read(unsigned long long, int, void*)+0x34>
c0022274:	83 ec 0c             	sub    esp,0xc
c0022277:	68 2c bc 02 c0       	push   0xc002bc2c
c002227c:	e8 a7 e0 fe ff       	call   c0010328 <KePanic(char const*)>
c0022281:	83 c4 10             	add    esp,0x10
c0022284:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002228a:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0022290:	51                   	push   ecx
c0022291:	50                   	push   eax
c0022292:	83 c0 02             	add    eax,0x2
c0022295:	c1 e0 07             	shl    eax,0x7
c0022298:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c002229e:	50                   	push   eax
c002229f:	52                   	push   edx
c00222a0:	e8 ab e6 ff ff       	call   c0020950 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00222a5:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00222a9:	b9 03 00 00 00       	mov    ecx,0x3
c00222ae:	fc                   	cld    
c00222af:	31 c0                	xor    eax,eax
c00222b1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00222b3:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c00222b8:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00222bd:	83 c4 0c             	add    esp,0xc
c00222c0:	6a 00                	push   0x0
c00222c2:	6a 00                	push   0x0
c00222c4:	6a 00                	push   0x0
c00222c6:	6a 00                	push   0x0
c00222c8:	6a 02                	push   0x2
c00222ca:	8d 44 24 30          	lea    eax,[esp+0x30]
c00222ce:	50                   	push   eax
c00222cf:	53                   	push   ebx
c00222d0:	e8 ff fa ff ff       	call   c0021dd4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00222d5:	83 c4 20             	add    esp,0x20
c00222d8:	85 c0                	test   eax,eax
c00222da:	89 c6                	mov    esi,eax
c00222dc:	75 46                	jne    c0022324 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c00222de:	8d 7c 24 24          	lea    edi,[esp+0x24]
c00222e2:	b9 03 00 00 00       	mov    ecx,0x3
c00222e7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00222e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00222ed:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c00222f2:	0f c8                	bswap  eax
c00222f4:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c00222f8:	89 e8                	mov    eax,ebp
c00222fa:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00222fe:	50                   	push   eax
c00222ff:	55                   	push   ebp
c0022300:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c0022304:	c1 e5 0b             	shl    ebp,0xb
c0022307:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002230b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002230f:	55                   	push   ebp
c0022310:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0022314:	50                   	push   eax
c0022315:	53                   	push   ebx
c0022316:	e8 b9 fa ff ff       	call   c0021dd4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002231b:	83 c4 20             	add    esp,0x20
c002231e:	85 c0                	test   eax,eax
c0022320:	89 c6                	mov    esi,eax
c0022322:	74 0c                	je     c0022330 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c0022324:	83 ec 0c             	sub    esp,0xc
c0022327:	53                   	push   ebx
c0022328:	e8 cd fd ff ff       	call   c00220fa <SATAPI::detectMedia()>
c002232d:	83 c4 10             	add    esp,0x10
c0022330:	83 c4 3c             	add    esp,0x3c
c0022333:	89 f0                	mov    eax,esi
c0022335:	5b                   	pop    ebx
c0022336:	5e                   	pop    esi
c0022337:	5f                   	pop    edi
c0022338:	5d                   	pop    ebp
c0022339:	c3                   	ret    
c002233a:	66 90                	xchg   ax,ax

c002233c <APICTimer::close(int, int, void*)>:
c002233c:	b8 00 00 00 00       	mov    eax,0x0
c0022341:	c3                   	ret    
c0022342:	66 90                	xchg   ax,ax

c0022344 <apicTimerHandler(regs*, void*)>:
c0022344:	83 ec 0c             	sub    esp,0xc
c0022347:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002234b:	8b 08                	mov    ecx,DWORD PTR [eax]
c002234d:	b8 10 27 00 00       	mov    eax,0x2710
c0022352:	ba 00 00 00 00       	mov    edx,0x0
c0022357:	f7 f1                	div    ecx
c0022359:	83 ec 0c             	sub    esp,0xc
c002235c:	50                   	push   eax
c002235d:	e8 82 95 fe ff       	call   c000b8e4 <timerHandler(unsigned int)>
c0022362:	83 c4 10             	add    esp,0x10
c0022365:	90                   	nop
c0022366:	83 c4 0c             	add    esp,0xc
c0022369:	c3                   	ret    
c002236a:	66 90                	xchg   ax,ax

c002236c <APICTimer::open(int, int, void*)>:
c002236c:	83 ec 0c             	sub    esp,0xc
c002236f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022373:	8b 00                	mov    eax,DWORD PTR [eax]
c0022375:	83 c0 24             	add    eax,0x24
c0022378:	8b 00                	mov    eax,DWORD PTR [eax]
c002237a:	83 ec 08             	sub    esp,0x8
c002237d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022381:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022385:	ff d0                	call   eax
c0022387:	83 c4 10             	add    esp,0x10
c002238a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002238e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022392:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002239c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00223a0:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00223a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00223aa:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00223b0:	83 ec 0c             	sub    esp,0xc
c00223b3:	51                   	push   ecx
c00223b4:	6a 01                	push   0x1
c00223b6:	68 44 23 02 c0       	push   0xc0022344
c00223bb:	52                   	push   edx
c00223bc:	50                   	push   eax
c00223bd:	e8 2c 7e fe ff       	call   c000a1ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00223c2:	83 c4 20             	add    esp,0x20
c00223c5:	89 c2                	mov    edx,eax
c00223c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223cb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00223d1:	b8 00 00 00 00       	mov    eax,0x0
c00223d6:	83 c4 0c             	add    esp,0xc
c00223d9:	c3                   	ret    
c00223da:	66 90                	xchg   ax,ax

c00223dc <APICTimer::write(int)>:
c00223dc:	83 ec 0c             	sub    esp,0xc
c00223df:	83 ec 0c             	sub    esp,0xc
c00223e2:	68 90 bc 02 c0       	push   0xc002bc90
c00223e7:	e8 3c df fe ff       	call   c0010328 <KePanic(char const*)>
c00223ec:	83 c4 10             	add    esp,0x10
c00223ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223f3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00223f7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00223fd:	90                   	nop
c00223fe:	83 c4 0c             	add    esp,0xc
c0022401:	c3                   	ret    
c0022402:	66 90                	xchg   ax,ax

c0022404 <APICTimer::APICTimer()>:
c0022404:	83 ec 0c             	sub    esp,0xc
c0022407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002240b:	83 ec 08             	sub    esp,0x8
c002240e:	68 a0 bc 02 c0       	push   0xc002bca0
c0022413:	50                   	push   eax
c0022414:	e8 ff 93 fe ff       	call   c000b818 <Timer::Timer(char const*)>
c0022419:	83 c4 10             	add    esp,0x10
c002241c:	ba b4 bc 02 c0       	mov    edx,0xc002bcb4
c0022421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022425:	89 10                	mov    DWORD PTR [eax],edx
c0022427:	90                   	nop
c0022428:	83 c4 0c             	add    esp,0xc
c002242b:	c3                   	ret    

c002242c <PIT::write(int)>:
c002242c:	83 ec 10             	sub    esp,0x10
c002242f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022433:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022437:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002243d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022441:	a3 b8 5d 03 c0       	mov    ds:0xc0035db8,eax
c0022446:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002244b:	89 c2                	mov    edx,eax
c002244d:	c1 fa 1f             	sar    edx,0x1f
c0022450:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0022454:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022458:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002245f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0022464:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0022468:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002246d:	ee                   	out    dx,al
c002246e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022472:	0f b6 c0             	movzx  eax,al
c0022475:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002247c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022480:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0022484:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0022489:	ee                   	out    dx,al
c002248a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002248e:	c1 f8 08             	sar    eax,0x8
c0022491:	0f b6 c0             	movzx  eax,al
c0022494:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002249b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002249f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00224a3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00224a8:	ee                   	out    dx,al
c00224a9:	90                   	nop
c00224aa:	83 c4 10             	add    esp,0x10
c00224ad:	c3                   	ret    
c00224ae:	66 90                	xchg   ax,ax

c00224b0 <pitHandler(regs*, void*)>:
c00224b0:	83 ec 0c             	sub    esp,0xc
c00224b3:	8b 0d b8 5d 03 c0    	mov    ecx,DWORD PTR ds:0xc0035db8
c00224b9:	b8 10 27 00 00       	mov    eax,0x2710
c00224be:	89 c2                	mov    edx,eax
c00224c0:	c1 fa 1f             	sar    edx,0x1f
c00224c3:	f7 f9                	idiv   ecx
c00224c5:	83 ec 0c             	sub    esp,0xc
c00224c8:	50                   	push   eax
c00224c9:	e8 16 94 fe ff       	call   c000b8e4 <timerHandler(unsigned int)>
c00224ce:	83 c4 10             	add    esp,0x10
c00224d1:	90                   	nop
c00224d2:	83 c4 0c             	add    esp,0xc
c00224d5:	c3                   	ret    
c00224d6:	66 90                	xchg   ax,ax

c00224d8 <PIT::open(int, int, void*)>:
c00224d8:	83 ec 0c             	sub    esp,0xc
c00224db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224df:	8b 00                	mov    eax,DWORD PTR [eax]
c00224e1:	83 c0 24             	add    eax,0x24
c00224e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00224e6:	83 ec 08             	sub    esp,0x8
c00224e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224f1:	ff d0                	call   eax
c00224f3:	83 c4 10             	add    esp,0x10
c00224f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224fa:	83 ec 0c             	sub    esp,0xc
c00224fd:	6a 00                	push   0x0
c00224ff:	6a 01                	push   0x1
c0022501:	68 b0 24 02 c0       	push   0xc00224b0
c0022506:	6a 00                	push   0x0
c0022508:	50                   	push   eax
c0022509:	e8 e0 7c fe ff       	call   c000a1ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002250e:	83 c4 20             	add    esp,0x20
c0022511:	89 c2                	mov    edx,eax
c0022513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022517:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002251d:	b8 00 00 00 00       	mov    eax,0x0
c0022522:	83 c4 0c             	add    esp,0xc
c0022525:	c3                   	ret    
c0022526:	66 90                	xchg   ax,ax

c0022528 <PIT::close(int, int, void*)>:
c0022528:	83 ec 0c             	sub    esp,0xc
c002252b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002252f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0022539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002253d:	6a 01                	push   0x1
c002253f:	68 b0 24 02 c0       	push   0xc00224b0
c0022544:	6a 00                	push   0x0
c0022546:	50                   	push   eax
c0022547:	e8 d8 7c fe ff       	call   c000a224 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002254c:	83 c4 10             	add    esp,0x10
c002254f:	b8 00 00 00 00       	mov    eax,0x0
c0022554:	83 c4 0c             	add    esp,0xc
c0022557:	c3                   	ret    

c0022558 <PIT::PIT()>:
c0022558:	83 ec 0c             	sub    esp,0xc
c002255b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002255f:	83 ec 08             	sub    esp,0x8
c0022562:	68 dc bc 02 c0       	push   0xc002bcdc
c0022567:	50                   	push   eax
c0022568:	e8 ab 92 fe ff       	call   c000b818 <Timer::Timer(char const*)>
c002256d:	83 c4 10             	add    esp,0x10
c0022570:	ba 04 bd 02 c0       	mov    edx,0xc002bd04
c0022575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022579:	89 10                	mov    DWORD PTR [eax],edx
c002257b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002257f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022585:	0f b6 d0             	movzx  edx,al
c0022588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002258c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0022593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022597:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002259d:	0f b6 d0             	movzx  edx,al
c00225a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225a4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00225a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225ad:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00225b3:	8d 50 01             	lea    edx,[eax+0x1]
c00225b6:	88 d1                	mov    cl,dl
c00225b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00225bc:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c00225c2:	0f b6 d0             	movzx  edx,al
c00225c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225c9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00225cd:	83 e1 3f             	and    ecx,0x3f
c00225d0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00225d4:	90                   	nop
c00225d5:	83 c4 0c             	add    esp,0xc
c00225d8:	c3                   	ret    
c00225d9:	66 90                	xchg   ax,ax
c00225db:	66 90                	xchg   ax,ax
c00225dd:	66 90                	xchg   ax,ax
c00225df:	90                   	nop

c00225e0 <avxDetect>:
c00225e0:	b8 01 00 00 00       	mov    eax,0x1
c00225e5:	0f a2                	cpuid  
c00225e7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c00225ed:	74 15                	je     c0022604 <avxDetect.noAVX>
c00225ef:	b8 01 00 00 00       	mov    eax,0x1
c00225f4:	0f a2                	cpuid  
c00225f6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c00225fc:	74 06                	je     c0022604 <avxDetect.noAVX>
c00225fe:	b8 01 00 00 00       	mov    eax,0x1
c0022603:	c3                   	ret    

c0022604 <avxDetect.noAVX>:
c0022604:	b8 00 00 00 00       	mov    eax,0x0
c0022609:	c3                   	ret    

c002260a <avxSave>:
c002260a:	53                   	push   ebx
c002260b:	52                   	push   edx
c002260c:	31 c0                	xor    eax,eax
c002260e:	48                   	dec    eax
c002260f:	89 c2                	mov    edx,eax
c0022611:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022615:	0f ae 23             	xsave  [ebx]
c0022618:	5a                   	pop    edx
c0022619:	5b                   	pop    ebx
c002261a:	c3                   	ret    

c002261b <avxLoad>:
c002261b:	53                   	push   ebx
c002261c:	52                   	push   edx
c002261d:	31 c0                	xor    eax,eax
c002261f:	48                   	dec    eax
c0022620:	89 c2                	mov    edx,eax
c0022622:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022626:	0f ae 2b             	xrstor [ebx]
c0022629:	5a                   	pop    edx
c002262a:	5b                   	pop    ebx
c002262b:	c3                   	ret    

c002262c <avxInit>:
c002262c:	e8 17 03 00 00       	call   c0022948 <sseInit>
c0022631:	50                   	push   eax
c0022632:	51                   	push   ecx
c0022633:	0f 20 e0             	mov    eax,cr4
c0022636:	0d 00 00 04 00       	or     eax,0x40000
c002263b:	0f 22 e0             	mov    cr4,eax
c002263e:	31 c9                	xor    ecx,ecx
c0022640:	0f 01 d0             	xgetbv 
c0022643:	0d 07 00 00 00       	or     eax,0x7
c0022648:	0f 01 d1             	xsetbv 
c002264b:	59                   	pop    ecx
c002264c:	58                   	pop    eax
c002264d:	c3                   	ret    

c002264e <avxClose>:
c002264e:	c3                   	ret    
c002264f:	90                   	nop

c0022650 <isr0>:
c0022650:	fa                   	cli    
c0022651:	68 00 00 00 00       	push   0x0
c0022656:	68 00 00 00 00       	push   0x0
c002265b:	e9 56 01 00 00       	jmp    c00227b6 <int_common_stub>

c0022660 <isr1>:
c0022660:	fa                   	cli    
c0022661:	6a 00                	push   0x0
c0022663:	6a 01                	push   0x1
c0022665:	e9 4c 01 00 00       	jmp    c00227b6 <int_common_stub>

c002266a <isr2>:
c002266a:	fa                   	cli    
c002266b:	6a 00                	push   0x0
c002266d:	6a 02                	push   0x2
c002266f:	e9 42 01 00 00       	jmp    c00227b6 <int_common_stub>

c0022674 <isr3>:
c0022674:	fa                   	cli    
c0022675:	6a 00                	push   0x0
c0022677:	6a 03                	push   0x3
c0022679:	e9 38 01 00 00       	jmp    c00227b6 <int_common_stub>

c002267e <isr4>:
c002267e:	fa                   	cli    
c002267f:	6a 00                	push   0x0
c0022681:	6a 04                	push   0x4
c0022683:	e9 2e 01 00 00       	jmp    c00227b6 <int_common_stub>

c0022688 <isr5>:
c0022688:	fa                   	cli    
c0022689:	6a 00                	push   0x0
c002268b:	6a 05                	push   0x5
c002268d:	e9 24 01 00 00       	jmp    c00227b6 <int_common_stub>

c0022692 <isr6>:
c0022692:	fa                   	cli    
c0022693:	6a 00                	push   0x0
c0022695:	6a 06                	push   0x6
c0022697:	e9 1a 01 00 00       	jmp    c00227b6 <int_common_stub>

c002269c <isr7>:
c002269c:	fa                   	cli    
c002269d:	6a 00                	push   0x0
c002269f:	6a 07                	push   0x7
c00226a1:	e9 10 01 00 00       	jmp    c00227b6 <int_common_stub>

c00226a6 <isr8>:
c00226a6:	fa                   	cli    
c00226a7:	6a 08                	push   0x8
c00226a9:	e9 08 01 00 00       	jmp    c00227b6 <int_common_stub>

c00226ae <isr9>:
c00226ae:	fa                   	cli    
c00226af:	6a 00                	push   0x0
c00226b1:	6a 09                	push   0x9
c00226b3:	e9 fe 00 00 00       	jmp    c00227b6 <int_common_stub>

c00226b8 <isr10>:
c00226b8:	fa                   	cli    
c00226b9:	6a 0a                	push   0xa
c00226bb:	e9 f6 00 00 00       	jmp    c00227b6 <int_common_stub>

c00226c0 <isr11>:
c00226c0:	fa                   	cli    
c00226c1:	6a 0b                	push   0xb
c00226c3:	e9 ee 00 00 00       	jmp    c00227b6 <int_common_stub>

c00226c8 <isr12>:
c00226c8:	fa                   	cli    
c00226c9:	6a 0c                	push   0xc
c00226cb:	e9 e6 00 00 00       	jmp    c00227b6 <int_common_stub>

c00226d0 <isr13>:
c00226d0:	fa                   	cli    
c00226d1:	6a 0d                	push   0xd
c00226d3:	53                   	push   ebx
c00226d4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00226d8:	81 fb 7b 28 02 c0    	cmp    ebx,0xc002287b
c00226de:	5b                   	pop    ebx
c00226df:	0f 84 98 01 00 00    	je     c002287d <finishSignal2>
c00226e5:	e9 cc 00 00 00       	jmp    c00227b6 <int_common_stub>

c00226ea <isr14>:
c00226ea:	fa                   	cli    
c00226eb:	6a 0e                	push   0xe
c00226ed:	e9 c4 00 00 00       	jmp    c00227b6 <int_common_stub>

c00226f2 <isr15>:
c00226f2:	fa                   	cli    
c00226f3:	6a 00                	push   0x0
c00226f5:	6a 0f                	push   0xf
c00226f7:	e9 ba 00 00 00       	jmp    c00227b6 <int_common_stub>

c00226fc <isr16>:
c00226fc:	fa                   	cli    
c00226fd:	6a 00                	push   0x0
c00226ff:	6a 10                	push   0x10
c0022701:	e9 b0 00 00 00       	jmp    c00227b6 <int_common_stub>

c0022706 <isr17>:
c0022706:	fa                   	cli    
c0022707:	6a 00                	push   0x0
c0022709:	6a 11                	push   0x11
c002270b:	e9 a6 00 00 00       	jmp    c00227b6 <int_common_stub>

c0022710 <isr18>:
c0022710:	fa                   	cli    
c0022711:	6a 00                	push   0x0
c0022713:	6a 12                	push   0x12
c0022715:	e9 9c 00 00 00       	jmp    c00227b6 <int_common_stub>

c002271a <irq3>:
c002271a:	fa                   	cli    
c002271b:	6a 00                	push   0x0
c002271d:	6a 23                	push   0x23
c002271f:	e9 92 00 00 00       	jmp    c00227b6 <int_common_stub>

c0022724 <irq4>:
c0022724:	fa                   	cli    
c0022725:	6a 00                	push   0x0
c0022727:	6a 24                	push   0x24
c0022729:	e9 88 00 00 00       	jmp    c00227b6 <int_common_stub>

c002272e <irq5>:
c002272e:	fa                   	cli    
c002272f:	6a 00                	push   0x0
c0022731:	6a 25                	push   0x25
c0022733:	e9 7e 00 00 00       	jmp    c00227b6 <int_common_stub>

c0022738 <irq6>:
c0022738:	fa                   	cli    
c0022739:	6a 00                	push   0x0
c002273b:	6a 26                	push   0x26
c002273d:	e9 74 00 00 00       	jmp    c00227b6 <int_common_stub>

c0022742 <irq7>:
c0022742:	fa                   	cli    
c0022743:	6a 00                	push   0x0
c0022745:	6a 27                	push   0x27
c0022747:	e9 6a 00 00 00       	jmp    c00227b6 <int_common_stub>

c002274c <irq8>:
c002274c:	fa                   	cli    
c002274d:	6a 00                	push   0x0
c002274f:	6a 28                	push   0x28
c0022751:	e9 60 00 00 00       	jmp    c00227b6 <int_common_stub>

c0022756 <irq9>:
c0022756:	fa                   	cli    
c0022757:	6a 00                	push   0x0
c0022759:	6a 29                	push   0x29
c002275b:	e9 56 00 00 00       	jmp    c00227b6 <int_common_stub>

c0022760 <irq10>:
c0022760:	fa                   	cli    
c0022761:	6a 00                	push   0x0
c0022763:	6a 2a                	push   0x2a
c0022765:	e9 4c 00 00 00       	jmp    c00227b6 <int_common_stub>

c002276a <irq11>:
c002276a:	fa                   	cli    
c002276b:	6a 00                	push   0x0
c002276d:	6a 2b                	push   0x2b
c002276f:	e9 42 00 00 00       	jmp    c00227b6 <int_common_stub>

c0022774 <irq12>:
c0022774:	fa                   	cli    
c0022775:	6a 00                	push   0x0
c0022777:	6a 2c                	push   0x2c
c0022779:	e9 38 00 00 00       	jmp    c00227b6 <int_common_stub>

c002277e <irq13>:
c002277e:	fa                   	cli    
c002277f:	6a 00                	push   0x0
c0022781:	6a 2d                	push   0x2d
c0022783:	e9 2e 00 00 00       	jmp    c00227b6 <int_common_stub>

c0022788 <irq14>:
c0022788:	fa                   	cli    
c0022789:	6a 00                	push   0x0
c002278b:	6a 2e                	push   0x2e
c002278d:	e9 24 00 00 00       	jmp    c00227b6 <int_common_stub>

c0022792 <irq15>:
c0022792:	fa                   	cli    
c0022793:	6a 00                	push   0x0
c0022795:	6a 2f                	push   0x2f
c0022797:	e9 1a 00 00 00       	jmp    c00227b6 <int_common_stub>

c002279c <irq1>:
c002279c:	fa                   	cli    
c002279d:	6a 00                	push   0x0
c002279f:	6a 21                	push   0x21
c00227a1:	eb 13                	jmp    c00227b6 <int_common_stub>

c00227a3 <irq2>:
c00227a3:	fa                   	cli    
c00227a4:	6a 00                	push   0x0
c00227a6:	6a 22                	push   0x22
c00227a8:	eb 0c                	jmp    c00227b6 <int_common_stub>

c00227aa <isr96>:
c00227aa:	6a 00                	push   0x0
c00227ac:	6a 60                	push   0x60
c00227ae:	fb                   	sti    
c00227af:	eb 05                	jmp    c00227b6 <int_common_stub>

c00227b1 <irq0>:
c00227b1:	fa                   	cli    
c00227b2:	6a 00                	push   0x0
c00227b4:	6a 20                	push   0x20

c00227b6 <int_common_stub>:
c00227b6:	60                   	pusha  
c00227b7:	1e                   	push   ds
c00227b8:	06                   	push   es
c00227b9:	0f a0                	push   fs
c00227bb:	0f a8                	push   gs
c00227bd:	66 b8 10 00          	mov    ax,0x10
c00227c1:	66 8e d8             	mov    ds,ax
c00227c4:	66 8e c0             	mov    es,ax
c00227c7:	66 8e e0             	mov    fs,ax
c00227ca:	66 8e e8             	mov    gs,ax
c00227cd:	54                   	push   esp
c00227ce:	fc                   	cld    
c00227cf:	e8 ae 8d ff ff       	call   c001b582 <int_handler>
c00227d4:	81 c4 04 00 00 00    	add    esp,0x4
c00227da:	e8 08 ef fe ff       	call   c00116e7 <KiCheckSignalZ>
c00227df:	85 c0                	test   eax,eax
c00227e1:	75 0e                	jne    c00227f1 <doSignals>
c00227e3:	0f a9                	pop    gs
c00227e5:	0f a1                	pop    fs
c00227e7:	07                   	pop    es
c00227e8:	1f                   	pop    ds
c00227e9:	61                   	popa   
c00227ea:	81 c4 08 00 00 00    	add    esp,0x8
c00227f0:	cf                   	iret   

c00227f1 <doSignals>:
c00227f1:	0f a9                	pop    gs
c00227f3:	0f a1                	pop    fs
c00227f5:	07                   	pop    es
c00227f6:	1f                   	pop    ds
c00227f7:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c00227fc:	61                   	popa   
c00227fd:	53                   	push   ebx
c00227fe:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c0022804:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0022807:	5b                   	pop    ebx
c0022808:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c002280d:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c0022810:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c0022813:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022816:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c0022819:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c002281c:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c002281f:	81 c4 08 00 00 00    	add    esp,0x8
c0022825:	5e                   	pop    esi
c0022826:	5b                   	pop    ebx
c0022827:	59                   	pop    ecx
c0022828:	5a                   	pop    edx
c0022829:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c002282c:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c002282f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0022832:	52                   	push   edx
c0022833:	51                   	push   ecx
c0022834:	53                   	push   ebx
c0022835:	56                   	push   esi
c0022836:	81 ec 08 00 00 00    	sub    esp,0x8
c002283c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c002283f:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0022842:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c0022845:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022848:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002284b:	60                   	pusha  
c002284c:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c0022852:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0022855:	89 e3                	mov    ebx,esp
c0022857:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c002285a:	52                   	push   edx
c002285b:	68 7b 28 02 c0       	push   0xc002287b
c0022860:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c0022863:	89 dc                	mov    esp,ebx
c0022865:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0022868:	68 23 00 00 00       	push   0x23
c002286d:	51                   	push   ecx
c002286e:	68 02 02 00 00       	push   0x202
c0022873:	68 1b 00 00 00       	push   0x1b
c0022878:	ff 36                	push   DWORD PTR [esi]
c002287a:	cf                   	iret   

c002287b <finishSignal>:
c002287b:	cd 0f                	int    0xf

c002287d <finishSignal2>:
c002287d:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c0022883:	e8 eb ee fe ff       	call   c0011773 <KiFinishSignalZ>
c0022888:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c002288e:	68 23 00 00 00       	push   0x23
c0022893:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0022896:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0022899:	68 1b 00 00 00       	push   0x1b
c002289e:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c00228a1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00228a4:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00228a7:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00228aa:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00228ad:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c00228b0:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c00228b3:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c00228b6:	cf                   	iret   
c00228b7:	90                   	nop

c00228b8 <irq16>:
c00228b8:	fa                   	cli    
c00228b9:	6a 00                	push   0x0
c00228bb:	6a 30                	push   0x30
c00228bd:	e9 f4 fe ff ff       	jmp    c00227b6 <int_common_stub>

c00228c2 <irq17>:
c00228c2:	fa                   	cli    
c00228c3:	6a 00                	push   0x0
c00228c5:	6a 31                	push   0x31
c00228c7:	e9 ea fe ff ff       	jmp    c00227b6 <int_common_stub>

c00228cc <irq18>:
c00228cc:	fa                   	cli    
c00228cd:	6a 00                	push   0x0
c00228cf:	6a 32                	push   0x32
c00228d1:	e9 e0 fe ff ff       	jmp    c00227b6 <int_common_stub>

c00228d6 <irq19>:
c00228d6:	fa                   	cli    
c00228d7:	6a 00                	push   0x0
c00228d9:	6a 33                	push   0x33
c00228db:	e9 d6 fe ff ff       	jmp    c00227b6 <int_common_stub>

c00228e0 <irq20>:
c00228e0:	fa                   	cli    
c00228e1:	6a 00                	push   0x0
c00228e3:	6a 34                	push   0x34
c00228e5:	e9 cc fe ff ff       	jmp    c00227b6 <int_common_stub>

c00228ea <irq21>:
c00228ea:	fa                   	cli    
c00228eb:	6a 00                	push   0x0
c00228ed:	6a 35                	push   0x35
c00228ef:	e9 c2 fe ff ff       	jmp    c00227b6 <int_common_stub>

c00228f4 <irq22>:
c00228f4:	fa                   	cli    
c00228f5:	6a 00                	push   0x0
c00228f7:	6a 36                	push   0x36
c00228f9:	e9 b8 fe ff ff       	jmp    c00227b6 <int_common_stub>

c00228fe <irq23>:
c00228fe:	fa                   	cli    
c00228ff:	6a 00                	push   0x0
c0022901:	6a 37                	push   0x37
c0022903:	e9 ae fe ff ff       	jmp    c00227b6 <int_common_stub>
c0022908:	66 90                	xchg   ax,ax
c002290a:	66 90                	xchg   ax,ax
c002290c:	66 90                	xchg   ax,ax
c002290e:	66 90                	xchg   ax,ax

c0022910 <i386GetRDRAND>:
c0022910:	b9 64 00 00 00       	mov    ecx,0x64

c0022915 <retry>:
c0022915:	0f c7 f0             	rdrand eax
c0022918:	72 05                	jb     c002291f <retry.done>
c002291a:	e2 f9                	loop   c0022915 <retry>

c002291c <retry.fail>:
c002291c:	31 c0                	xor    eax,eax
c002291e:	c3                   	ret    

c002291f <retry.done>:
c002291f:	c3                   	ret    

c0022920 <sseDetect>:
c0022920:	b8 01 00 00 00       	mov    eax,0x1
c0022925:	0f a2                	cpuid  
c0022927:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002292d:	74 06                	je     c0022935 <sseDetect.noSSE>
c002292f:	b8 01 00 00 00       	mov    eax,0x1
c0022934:	c3                   	ret    

c0022935 <sseDetect.noSSE>:
c0022935:	31 c0                	xor    eax,eax
c0022937:	c3                   	ret    

c0022938 <sseSave>:
c0022938:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002293c:	0f ae 00             	fxsave [eax]
c002293f:	c3                   	ret    

c0022940 <sseLoad>:
c0022940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022944:	0f ae 08             	fxrstor [eax]
c0022947:	c3                   	ret    

c0022948 <sseInit>:
c0022948:	e8 48 00 00 00       	call   c0022995 <x87Init>
c002294d:	0f 20 e0             	mov    eax,cr4
c0022950:	66 0d 00 06          	or     ax,0x600
c0022954:	0f 22 e0             	mov    cr4,eax
c0022957:	c3                   	ret    

c0022958 <sseClose>:
c0022958:	c3                   	ret    
c0022959:	66 90                	xchg   ax,ax
c002295b:	66 90                	xchg   ax,ax
c002295d:	66 90                	xchg   ax,ax
c002295f:	90                   	nop

c0022960 <value_37F>:
c0022960:	7f 03                	jg     c0022965 <value_37A+0x1>

c0022962 <value_37E>:
c0022962:	7e 03                	jle    c0022967 <x87Detect+0x1>

c0022964 <value_37A>:
c0022964:	7a 03                	jp     c0022969 <x87Detect+0x3>

c0022966 <x87Detect>:
c0022966:	53                   	push   ebx
c0022967:	51                   	push   ecx
c0022968:	52                   	push   edx
c0022969:	b8 01 00 00 00       	mov    eax,0x1
c002296e:	0f a2                	cpuid  
c0022970:	f7 c2 01 00 00 00    	test   edx,0x1
c0022976:	74 06                	je     c002297e <x87Detect.nox87>
c0022978:	b8 01 00 00 00       	mov    eax,0x1
c002297d:	c3                   	ret    

c002297e <x87Detect.nox87>:
c002297e:	b8 00 00 00 00       	mov    eax,0x0
c0022983:	5a                   	pop    edx
c0022984:	59                   	pop    ecx
c0022985:	5b                   	pop    ebx
c0022986:	c3                   	ret    

c0022987 <x87Save>:
c0022987:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002298b:	dd 30                	fnsave [eax]
c002298d:	c3                   	ret    

c002298e <x87Load>:
c002298e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022992:	dd 20                	frstor [eax]
c0022994:	c3                   	ret    

c0022995 <x87Init>:
c0022995:	0f 20 c0             	mov    eax,cr0
c0022998:	66 25 fb ff          	and    ax,0xfffb
c002299c:	66 0d 22 00          	or     ax,0x22
c00229a0:	0f 22 c0             	mov    cr0,eax
c00229a3:	db e3                	fninit 
c00229a5:	0f 06                	clts   
c00229a7:	d9 2d 64 29 02 c0    	fldcw  WORD PTR ds:0xc0022964
c00229ad:	c3                   	ret    

c00229ae <x87Close>:
c00229ae:	c3                   	ret    
c00229af:	90                   	nop

c00229b0 <__do_global_ctors_aux>:
c00229b0:	a1 8c 80 02 c0       	mov    eax,ds:0xc002808c
c00229b5:	83 f8 ff             	cmp    eax,0xffffffff
c00229b8:	74 1a                	je     c00229d4 <__do_global_ctors_aux+0x24>
c00229ba:	55                   	push   ebp
c00229bb:	89 e5                	mov    ebp,esp
c00229bd:	53                   	push   ebx
c00229be:	52                   	push   edx
c00229bf:	bb 8c 80 02 c0       	mov    ebx,0xc002808c
c00229c4:	ff d0                	call   eax
c00229c6:	83 eb 04             	sub    ebx,0x4
c00229c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00229cb:	83 f8 ff             	cmp    eax,0xffffffff
c00229ce:	75 f4                	jne    c00229c4 <__do_global_ctors_aux+0x14>
c00229d0:	58                   	pop    eax
c00229d1:	5b                   	pop    ebx
c00229d2:	5d                   	pop    ebp
c00229d3:	c3                   	ret    
c00229d4:	c3                   	ret    
c00229d5:	66 90                	xchg   ax,ax
c00229d7:	90                   	nop

c00229d8 <__divdi3>:
c00229d8:	55                   	push   ebp
c00229d9:	57                   	push   edi
c00229da:	56                   	push   esi
c00229db:	53                   	push   ebx
c00229dc:	83 ec 1c             	sub    esp,0x1c
c00229df:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00229e3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00229e7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00229ea:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00229ee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00229f2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00229f6:	85 db                	test   ebx,ebx
c00229f8:	0f 88 8e 00 00 00    	js     c0022a8c <__divdi3+0xb4>
c00229fe:	89 dd                	mov    ebp,ebx
c0022a00:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022a08:	89 d3                	mov    ebx,edx
c0022a0a:	85 d2                	test   edx,edx
c0022a0c:	79 0d                	jns    c0022a1b <__divdi3+0x43>
c0022a0e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0022a12:	f7 d8                	neg    eax
c0022a14:	83 d2 00             	adc    edx,0x0
c0022a17:	f7 da                	neg    edx
c0022a19:	89 d3                	mov    ebx,edx
c0022a1b:	89 c7                	mov    edi,eax
c0022a1d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022a20:	85 db                	test   ebx,ebx
c0022a22:	75 48                	jne    c0022a6c <__divdi3+0x94>
c0022a24:	39 ef                	cmp    edi,ebp
c0022a26:	76 24                	jbe    c0022a4c <__divdi3+0x74>
c0022a28:	89 ea                	mov    edx,ebp
c0022a2a:	f7 f7                	div    edi
c0022a2c:	89 c1                	mov    ecx,eax
c0022a2e:	31 f6                	xor    esi,esi
c0022a30:	89 c8                	mov    eax,ecx
c0022a32:	89 f2                	mov    edx,esi
c0022a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022a38:	85 c9                	test   ecx,ecx
c0022a3a:	74 07                	je     c0022a43 <__divdi3+0x6b>
c0022a3c:	f7 d8                	neg    eax
c0022a3e:	83 d2 00             	adc    edx,0x0
c0022a41:	f7 da                	neg    edx
c0022a43:	83 c4 1c             	add    esp,0x1c
c0022a46:	5b                   	pop    ebx
c0022a47:	5e                   	pop    esi
c0022a48:	5f                   	pop    edi
c0022a49:	5d                   	pop    ebp
c0022a4a:	c3                   	ret    
c0022a4b:	90                   	nop
c0022a4c:	85 ff                	test   edi,edi
c0022a4e:	75 0b                	jne    c0022a5b <__divdi3+0x83>
c0022a50:	b8 01 00 00 00       	mov    eax,0x1
c0022a55:	31 d2                	xor    edx,edx
c0022a57:	f7 f3                	div    ebx
c0022a59:	89 c7                	mov    edi,eax
c0022a5b:	31 d2                	xor    edx,edx
c0022a5d:	89 e8                	mov    eax,ebp
c0022a5f:	f7 f7                	div    edi
c0022a61:	89 c6                	mov    esi,eax
c0022a63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022a66:	f7 f7                	div    edi
c0022a68:	89 c1                	mov    ecx,eax
c0022a6a:	eb c4                	jmp    c0022a30 <__divdi3+0x58>
c0022a6c:	39 eb                	cmp    ebx,ebp
c0022a6e:	77 3c                	ja     c0022aac <__divdi3+0xd4>
c0022a70:	0f bd f3             	bsr    esi,ebx
c0022a73:	83 f6 1f             	xor    esi,0x1f
c0022a76:	75 40                	jne    c0022ab8 <__divdi3+0xe0>
c0022a78:	39 eb                	cmp    ebx,ebp
c0022a7a:	72 09                	jb     c0022a85 <__divdi3+0xad>
c0022a7c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0022a7f:	0f 87 97 00 00 00    	ja     c0022b1c <__divdi3+0x144>
c0022a85:	b9 01 00 00 00       	mov    ecx,0x1
c0022a8a:	eb a4                	jmp    c0022a30 <__divdi3+0x58>
c0022a8c:	f7 d9                	neg    ecx
c0022a8e:	83 d3 00             	adc    ebx,0x0
c0022a91:	f7 db                	neg    ebx
c0022a93:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022a96:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0022a9a:	89 dd                	mov    ebp,ebx
c0022a9c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0022aa4:	e9 5f ff ff ff       	jmp    c0022a08 <__divdi3+0x30>
c0022aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0022aac:	31 f6                	xor    esi,esi
c0022aae:	31 c9                	xor    ecx,ecx
c0022ab0:	e9 7b ff ff ff       	jmp    c0022a30 <__divdi3+0x58>
c0022ab5:	8d 76 00             	lea    esi,[esi+0x0]
c0022ab8:	b8 20 00 00 00       	mov    eax,0x20
c0022abd:	29 f0                	sub    eax,esi
c0022abf:	89 f1                	mov    ecx,esi
c0022ac1:	d3 e3                	shl    ebx,cl
c0022ac3:	89 fa                	mov    edx,edi
c0022ac5:	88 c1                	mov    cl,al
c0022ac7:	d3 ea                	shr    edx,cl
c0022ac9:	09 da                	or     edx,ebx
c0022acb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022acf:	89 f1                	mov    ecx,esi
c0022ad1:	d3 e7                	shl    edi,cl
c0022ad3:	89 eb                	mov    ebx,ebp
c0022ad5:	88 c1                	mov    cl,al
c0022ad7:	d3 eb                	shr    ebx,cl
c0022ad9:	89 f1                	mov    ecx,esi
c0022adb:	d3 e5                	shl    ebp,cl
c0022add:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0022ae0:	88 c1                	mov    cl,al
c0022ae2:	d3 ea                	shr    edx,cl
c0022ae4:	09 d5                	or     ebp,edx
c0022ae6:	89 e8                	mov    eax,ebp
c0022ae8:	89 da                	mov    edx,ebx
c0022aea:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0022aee:	89 d3                	mov    ebx,edx
c0022af0:	89 c5                	mov    ebp,eax
c0022af2:	f7 e7                	mul    edi
c0022af4:	39 d3                	cmp    ebx,edx
c0022af6:	72 18                	jb     c0022b10 <__divdi3+0x138>
c0022af8:	74 0a                	je     c0022b04 <__divdi3+0x12c>
c0022afa:	89 e9                	mov    ecx,ebp
c0022afc:	31 f6                	xor    esi,esi
c0022afe:	e9 2d ff ff ff       	jmp    c0022a30 <__divdi3+0x58>
c0022b03:	90                   	nop
c0022b04:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022b07:	89 f1                	mov    ecx,esi
c0022b09:	d3 e7                	shl    edi,cl
c0022b0b:	39 c7                	cmp    edi,eax
c0022b0d:	73 eb                	jae    c0022afa <__divdi3+0x122>
c0022b0f:	90                   	nop
c0022b10:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0022b13:	31 f6                	xor    esi,esi
c0022b15:	e9 16 ff ff ff       	jmp    c0022a30 <__divdi3+0x58>
c0022b1a:	66 90                	xchg   ax,ax
c0022b1c:	31 c9                	xor    ecx,ecx
c0022b1e:	e9 0d ff ff ff       	jmp    c0022a30 <__divdi3+0x58>
c0022b23:	90                   	nop

c0022b24 <__moddi3>:
c0022b24:	55                   	push   ebp
c0022b25:	57                   	push   edi
c0022b26:	56                   	push   esi
c0022b27:	53                   	push   ebx
c0022b28:	83 ec 2c             	sub    esp,0x2c
c0022b2b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022b2f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0022b33:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022b37:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0022b3b:	85 db                	test   ebx,ebx
c0022b3d:	0f 88 85 00 00 00    	js     c0022bc8 <__moddi3+0xa4>
c0022b43:	89 de                	mov    esi,ebx
c0022b45:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022b4d:	89 d7                	mov    edi,edx
c0022b4f:	85 d2                	test   edx,edx
c0022b51:	79 09                	jns    c0022b5c <__moddi3+0x38>
c0022b53:	f7 d8                	neg    eax
c0022b55:	83 d2 00             	adc    edx,0x0
c0022b58:	f7 da                	neg    edx
c0022b5a:	89 d7                	mov    edi,edx
c0022b5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022b60:	89 cd                	mov    ebp,ecx
c0022b62:	85 ff                	test   edi,edi
c0022b64:	75 52                	jne    c0022bb8 <__moddi3+0x94>
c0022b66:	89 c3                	mov    ebx,eax
c0022b68:	39 f0                	cmp    eax,esi
c0022b6a:	76 24                	jbe    c0022b90 <__moddi3+0x6c>
c0022b6c:	89 c8                	mov    eax,ecx
c0022b6e:	89 f2                	mov    edx,esi
c0022b70:	f7 f3                	div    ebx
c0022b72:	89 d6                	mov    esi,edx
c0022b74:	89 f0                	mov    eax,esi
c0022b76:	31 d2                	xor    edx,edx
c0022b78:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022b7c:	85 c9                	test   ecx,ecx
c0022b7e:	74 07                	je     c0022b87 <__moddi3+0x63>
c0022b80:	f7 d8                	neg    eax
c0022b82:	83 d2 00             	adc    edx,0x0
c0022b85:	f7 da                	neg    edx
c0022b87:	83 c4 2c             	add    esp,0x2c
c0022b8a:	5b                   	pop    ebx
c0022b8b:	5e                   	pop    esi
c0022b8c:	5f                   	pop    edi
c0022b8d:	5d                   	pop    ebp
c0022b8e:	c3                   	ret    
c0022b8f:	90                   	nop
c0022b90:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022b94:	85 db                	test   ebx,ebx
c0022b96:	75 0d                	jne    c0022ba5 <__moddi3+0x81>
c0022b98:	b8 01 00 00 00       	mov    eax,0x1
c0022b9d:	31 d2                	xor    edx,edx
c0022b9f:	f7 f7                	div    edi
c0022ba1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022ba5:	89 f0                	mov    eax,esi
c0022ba7:	31 d2                	xor    edx,edx
c0022ba9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022bad:	f7 f7                	div    edi
c0022baf:	89 e8                	mov    eax,ebp
c0022bb1:	f7 f7                	div    edi
c0022bb3:	89 d6                	mov    esi,edx
c0022bb5:	eb bd                	jmp    c0022b74 <__moddi3+0x50>
c0022bb7:	90                   	nop
c0022bb8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022bbc:	39 f7                	cmp    edi,esi
c0022bbe:	76 20                	jbe    c0022be0 <__moddi3+0xbc>
c0022bc0:	89 c8                	mov    eax,ecx
c0022bc2:	89 f2                	mov    edx,esi
c0022bc4:	eb b2                	jmp    c0022b78 <__moddi3+0x54>
c0022bc6:	66 90                	xchg   ax,ax
c0022bc8:	f7 d9                	neg    ecx
c0022bca:	83 d3 00             	adc    ebx,0x0
c0022bcd:	f7 db                	neg    ebx
c0022bcf:	89 de                	mov    esi,ebx
c0022bd1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0022bd9:	e9 6f ff ff ff       	jmp    c0022b4d <__moddi3+0x29>
c0022bde:	66 90                	xchg   ax,ax
c0022be0:	0f bd c7             	bsr    eax,edi
c0022be3:	83 f0 1f             	xor    eax,0x1f
c0022be6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022bea:	75 24                	jne    c0022c10 <__moddi3+0xec>
c0022bec:	39 f7                	cmp    edi,esi
c0022bee:	72 06                	jb     c0022bf6 <__moddi3+0xd2>
c0022bf0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0022bf4:	77 0c                	ja     c0022c02 <__moddi3+0xde>
c0022bf6:	89 e9                	mov    ecx,ebp
c0022bf8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0022bfc:	19 fe                	sbb    esi,edi
c0022bfe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022c02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022c06:	89 f2                	mov    edx,esi
c0022c08:	e9 6b ff ff ff       	jmp    c0022b78 <__moddi3+0x54>
c0022c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0022c10:	b8 20 00 00 00       	mov    eax,0x20
c0022c15:	89 c2                	mov    edx,eax
c0022c17:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022c1b:	29 da                	sub    edx,ebx
c0022c1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022c21:	88 d9                	mov    cl,bl
c0022c23:	d3 e7                	shl    edi,cl
c0022c25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022c29:	88 d1                	mov    cl,dl
c0022c2b:	d3 e8                	shr    eax,cl
c0022c2d:	09 c7                	or     edi,eax
c0022c2f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0022c33:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022c37:	89 d8                	mov    eax,ebx
c0022c39:	88 d9                	mov    cl,bl
c0022c3b:	d3 e7                	shl    edi,cl
c0022c3d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022c41:	89 f3                	mov    ebx,esi
c0022c43:	88 d1                	mov    cl,dl
c0022c45:	d3 eb                	shr    ebx,cl
c0022c47:	89 c7                	mov    edi,eax
c0022c49:	88 c1                	mov    cl,al
c0022c4b:	d3 e6                	shl    esi,cl
c0022c4d:	89 e8                	mov    eax,ebp
c0022c4f:	88 d1                	mov    cl,dl
c0022c51:	d3 e8                	shr    eax,cl
c0022c53:	09 f0                	or     eax,esi
c0022c55:	89 f9                	mov    ecx,edi
c0022c57:	d3 e5                	shl    ebp,cl
c0022c59:	89 da                	mov    edx,ebx
c0022c5b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0022c5f:	89 d3                	mov    ebx,edx
c0022c61:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022c65:	89 c6                	mov    esi,eax
c0022c67:	89 d1                	mov    ecx,edx
c0022c69:	39 d3                	cmp    ebx,edx
c0022c6b:	72 27                	jb     c0022c94 <__moddi3+0x170>
c0022c6d:	74 21                	je     c0022c90 <__moddi3+0x16c>
c0022c6f:	29 f5                	sub    ebp,esi
c0022c71:	19 cb                	sbb    ebx,ecx
c0022c73:	89 de                	mov    esi,ebx
c0022c75:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0022c79:	d3 e6                	shl    esi,cl
c0022c7b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022c7f:	89 f9                	mov    ecx,edi
c0022c81:	d3 ed                	shr    ebp,cl
c0022c83:	09 ee                	or     esi,ebp
c0022c85:	89 f0                	mov    eax,esi
c0022c87:	d3 eb                	shr    ebx,cl
c0022c89:	89 da                	mov    edx,ebx
c0022c8b:	e9 e8 fe ff ff       	jmp    c0022b78 <__moddi3+0x54>
c0022c90:	39 c5                	cmp    ebp,eax
c0022c92:	73 db                	jae    c0022c6f <__moddi3+0x14b>
c0022c94:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022c98:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0022c9c:	89 d1                	mov    ecx,edx
c0022c9e:	89 c6                	mov    esi,eax
c0022ca0:	eb cd                	jmp    c0022c6f <__moddi3+0x14b>
c0022ca2:	66 90                	xchg   ax,ax

c0022ca4 <__udivdi3>:
c0022ca4:	55                   	push   ebp
c0022ca5:	57                   	push   edi
c0022ca6:	56                   	push   esi
c0022ca7:	53                   	push   ebx
c0022ca8:	83 ec 1c             	sub    esp,0x1c
c0022cab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0022caf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022cb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022cb7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022cbb:	85 d2                	test   edx,edx
c0022cbd:	75 41                	jne    c0022d00 <__udivdi3+0x5c>
c0022cbf:	39 f7                	cmp    edi,esi
c0022cc1:	76 15                	jbe    c0022cd8 <__udivdi3+0x34>
c0022cc3:	89 e8                	mov    eax,ebp
c0022cc5:	89 f2                	mov    edx,esi
c0022cc7:	f7 f7                	div    edi
c0022cc9:	31 db                	xor    ebx,ebx
c0022ccb:	89 da                	mov    edx,ebx
c0022ccd:	83 c4 1c             	add    esp,0x1c
c0022cd0:	5b                   	pop    ebx
c0022cd1:	5e                   	pop    esi
c0022cd2:	5f                   	pop    edi
c0022cd3:	5d                   	pop    ebp
c0022cd4:	c3                   	ret    
c0022cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0022cd8:	89 f9                	mov    ecx,edi
c0022cda:	85 ff                	test   edi,edi
c0022cdc:	75 0b                	jne    c0022ce9 <__udivdi3+0x45>
c0022cde:	b8 01 00 00 00       	mov    eax,0x1
c0022ce3:	31 d2                	xor    edx,edx
c0022ce5:	f7 f7                	div    edi
c0022ce7:	89 c1                	mov    ecx,eax
c0022ce9:	31 d2                	xor    edx,edx
c0022ceb:	89 f0                	mov    eax,esi
c0022ced:	f7 f1                	div    ecx
c0022cef:	89 c3                	mov    ebx,eax
c0022cf1:	89 e8                	mov    eax,ebp
c0022cf3:	f7 f1                	div    ecx
c0022cf5:	89 da                	mov    edx,ebx
c0022cf7:	83 c4 1c             	add    esp,0x1c
c0022cfa:	5b                   	pop    ebx
c0022cfb:	5e                   	pop    esi
c0022cfc:	5f                   	pop    edi
c0022cfd:	5d                   	pop    ebp
c0022cfe:	c3                   	ret    
c0022cff:	90                   	nop
c0022d00:	39 f2                	cmp    edx,esi
c0022d02:	77 1c                	ja     c0022d20 <__udivdi3+0x7c>
c0022d04:	0f bd da             	bsr    ebx,edx
c0022d07:	83 f3 1f             	xor    ebx,0x1f
c0022d0a:	75 24                	jne    c0022d30 <__udivdi3+0x8c>
c0022d0c:	39 f2                	cmp    edx,esi
c0022d0e:	72 08                	jb     c0022d18 <__udivdi3+0x74>
c0022d10:	39 ef                	cmp    edi,ebp
c0022d12:	0f 87 84 00 00 00    	ja     c0022d9c <__udivdi3+0xf8>
c0022d18:	b8 01 00 00 00       	mov    eax,0x1
c0022d1d:	eb ac                	jmp    c0022ccb <__udivdi3+0x27>
c0022d1f:	90                   	nop
c0022d20:	31 db                	xor    ebx,ebx
c0022d22:	31 c0                	xor    eax,eax
c0022d24:	89 da                	mov    edx,ebx
c0022d26:	83 c4 1c             	add    esp,0x1c
c0022d29:	5b                   	pop    ebx
c0022d2a:	5e                   	pop    esi
c0022d2b:	5f                   	pop    edi
c0022d2c:	5d                   	pop    ebp
c0022d2d:	c3                   	ret    
c0022d2e:	66 90                	xchg   ax,ax
c0022d30:	b8 20 00 00 00       	mov    eax,0x20
c0022d35:	29 d8                	sub    eax,ebx
c0022d37:	88 d9                	mov    cl,bl
c0022d39:	d3 e2                	shl    edx,cl
c0022d3b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0022d3f:	89 fa                	mov    edx,edi
c0022d41:	88 c1                	mov    cl,al
c0022d43:	d3 ea                	shr    edx,cl
c0022d45:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022d49:	09 d1                	or     ecx,edx
c0022d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022d4f:	88 d9                	mov    cl,bl
c0022d51:	d3 e7                	shl    edi,cl
c0022d53:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022d57:	89 f7                	mov    edi,esi
c0022d59:	88 c1                	mov    cl,al
c0022d5b:	d3 ef                	shr    edi,cl
c0022d5d:	88 d9                	mov    cl,bl
c0022d5f:	d3 e6                	shl    esi,cl
c0022d61:	89 ea                	mov    edx,ebp
c0022d63:	88 c1                	mov    cl,al
c0022d65:	d3 ea                	shr    edx,cl
c0022d67:	09 d6                	or     esi,edx
c0022d69:	89 f0                	mov    eax,esi
c0022d6b:	89 fa                	mov    edx,edi
c0022d6d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0022d71:	89 d7                	mov    edi,edx
c0022d73:	89 c6                	mov    esi,eax
c0022d75:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022d79:	39 d7                	cmp    edi,edx
c0022d7b:	72 13                	jb     c0022d90 <__udivdi3+0xec>
c0022d7d:	74 09                	je     c0022d88 <__udivdi3+0xe4>
c0022d7f:	89 f0                	mov    eax,esi
c0022d81:	31 db                	xor    ebx,ebx
c0022d83:	e9 43 ff ff ff       	jmp    c0022ccb <__udivdi3+0x27>
c0022d88:	88 d9                	mov    cl,bl
c0022d8a:	d3 e5                	shl    ebp,cl
c0022d8c:	39 c5                	cmp    ebp,eax
c0022d8e:	73 ef                	jae    c0022d7f <__udivdi3+0xdb>
c0022d90:	8d 46 ff             	lea    eax,[esi-0x1]
c0022d93:	31 db                	xor    ebx,ebx
c0022d95:	e9 31 ff ff ff       	jmp    c0022ccb <__udivdi3+0x27>
c0022d9a:	66 90                	xchg   ax,ax
c0022d9c:	31 c0                	xor    eax,eax
c0022d9e:	e9 28 ff ff ff       	jmp    c0022ccb <__udivdi3+0x27>
c0022da3:	90                   	nop

c0022da4 <__umoddi3>:
c0022da4:	55                   	push   ebp
c0022da5:	57                   	push   edi
c0022da6:	56                   	push   esi
c0022da7:	53                   	push   ebx
c0022da8:	83 ec 1c             	sub    esp,0x1c
c0022dab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022daf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022db3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022db7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022dbb:	89 da                	mov    edx,ebx
c0022dbd:	85 c0                	test   eax,eax
c0022dbf:	75 37                	jne    c0022df8 <__umoddi3+0x54>
c0022dc1:	39 df                	cmp    edi,ebx
c0022dc3:	76 13                	jbe    c0022dd8 <__umoddi3+0x34>
c0022dc5:	89 f0                	mov    eax,esi
c0022dc7:	f7 f7                	div    edi
c0022dc9:	89 d0                	mov    eax,edx
c0022dcb:	31 d2                	xor    edx,edx
c0022dcd:	83 c4 1c             	add    esp,0x1c
c0022dd0:	5b                   	pop    ebx
c0022dd1:	5e                   	pop    esi
c0022dd2:	5f                   	pop    edi
c0022dd3:	5d                   	pop    ebp
c0022dd4:	c3                   	ret    
c0022dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0022dd8:	89 fd                	mov    ebp,edi
c0022dda:	85 ff                	test   edi,edi
c0022ddc:	75 0b                	jne    c0022de9 <__umoddi3+0x45>
c0022dde:	b8 01 00 00 00       	mov    eax,0x1
c0022de3:	31 d2                	xor    edx,edx
c0022de5:	f7 f7                	div    edi
c0022de7:	89 c5                	mov    ebp,eax
c0022de9:	89 d8                	mov    eax,ebx
c0022deb:	31 d2                	xor    edx,edx
c0022ded:	f7 f5                	div    ebp
c0022def:	89 f0                	mov    eax,esi
c0022df1:	f7 f5                	div    ebp
c0022df3:	89 d0                	mov    eax,edx
c0022df5:	eb d4                	jmp    c0022dcb <__umoddi3+0x27>
c0022df7:	90                   	nop
c0022df8:	89 f1                	mov    ecx,esi
c0022dfa:	39 d8                	cmp    eax,ebx
c0022dfc:	76 0a                	jbe    c0022e08 <__umoddi3+0x64>
c0022dfe:	89 f0                	mov    eax,esi
c0022e00:	83 c4 1c             	add    esp,0x1c
c0022e03:	5b                   	pop    ebx
c0022e04:	5e                   	pop    esi
c0022e05:	5f                   	pop    edi
c0022e06:	5d                   	pop    ebp
c0022e07:	c3                   	ret    
c0022e08:	0f bd e8             	bsr    ebp,eax
c0022e0b:	83 f5 1f             	xor    ebp,0x1f
c0022e0e:	75 1c                	jne    c0022e2c <__umoddi3+0x88>
c0022e10:	39 d8                	cmp    eax,ebx
c0022e12:	72 04                	jb     c0022e18 <__umoddi3+0x74>
c0022e14:	39 f7                	cmp    edi,esi
c0022e16:	77 08                	ja     c0022e20 <__umoddi3+0x7c>
c0022e18:	89 da                	mov    edx,ebx
c0022e1a:	29 fe                	sub    esi,edi
c0022e1c:	19 c2                	sbb    edx,eax
c0022e1e:	89 f1                	mov    ecx,esi
c0022e20:	89 c8                	mov    eax,ecx
c0022e22:	83 c4 1c             	add    esp,0x1c
c0022e25:	5b                   	pop    ebx
c0022e26:	5e                   	pop    esi
c0022e27:	5f                   	pop    edi
c0022e28:	5d                   	pop    ebp
c0022e29:	c3                   	ret    
c0022e2a:	66 90                	xchg   ax,ax
c0022e2c:	ba 20 00 00 00       	mov    edx,0x20
c0022e31:	29 ea                	sub    edx,ebp
c0022e33:	89 e9                	mov    ecx,ebp
c0022e35:	d3 e0                	shl    eax,cl
c0022e37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022e3b:	89 f8                	mov    eax,edi
c0022e3d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022e41:	88 d1                	mov    cl,dl
c0022e43:	d3 e8                	shr    eax,cl
c0022e45:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022e49:	09 c1                	or     ecx,eax
c0022e4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022e4f:	89 e9                	mov    ecx,ebp
c0022e51:	d3 e7                	shl    edi,cl
c0022e53:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022e57:	89 d8                	mov    eax,ebx
c0022e59:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022e5d:	88 d1                	mov    cl,dl
c0022e5f:	d3 e8                	shr    eax,cl
c0022e61:	89 c7                	mov    edi,eax
c0022e63:	89 e9                	mov    ecx,ebp
c0022e65:	d3 e3                	shl    ebx,cl
c0022e67:	89 f0                	mov    eax,esi
c0022e69:	88 d1                	mov    cl,dl
c0022e6b:	d3 e8                	shr    eax,cl
c0022e6d:	09 d8                	or     eax,ebx
c0022e6f:	89 e9                	mov    ecx,ebp
c0022e71:	d3 e6                	shl    esi,cl
c0022e73:	89 f3                	mov    ebx,esi
c0022e75:	89 fa                	mov    edx,edi
c0022e77:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0022e7b:	89 d1                	mov    ecx,edx
c0022e7d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022e81:	89 c6                	mov    esi,eax
c0022e83:	89 d7                	mov    edi,edx
c0022e85:	39 d1                	cmp    ecx,edx
c0022e87:	72 27                	jb     c0022eb0 <__umoddi3+0x10c>
c0022e89:	74 21                	je     c0022eac <__umoddi3+0x108>
c0022e8b:	89 ca                	mov    edx,ecx
c0022e8d:	29 f3                	sub    ebx,esi
c0022e8f:	19 fa                	sbb    edx,edi
c0022e91:	89 d0                	mov    eax,edx
c0022e93:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0022e97:	d3 e0                	shl    eax,cl
c0022e99:	89 e9                	mov    ecx,ebp
c0022e9b:	d3 eb                	shr    ebx,cl
c0022e9d:	09 d8                	or     eax,ebx
c0022e9f:	d3 ea                	shr    edx,cl
c0022ea1:	83 c4 1c             	add    esp,0x1c
c0022ea4:	5b                   	pop    ebx
c0022ea5:	5e                   	pop    esi
c0022ea6:	5f                   	pop    edi
c0022ea7:	5d                   	pop    ebp
c0022ea8:	c3                   	ret    
c0022ea9:	8d 76 00             	lea    esi,[esi+0x0]
c0022eac:	39 c3                	cmp    ebx,eax
c0022eae:	73 db                	jae    c0022e8b <__umoddi3+0xe7>
c0022eb0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022eb4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0022eb8:	89 d7                	mov    edi,edx
c0022eba:	89 c6                	mov    esi,eax
c0022ebc:	eb cd                	jmp    c0022e8b <__umoddi3+0xe7>
c0022ebe:	66 90                	xchg   ax,ax

c0022ec0 <acos>:
c0022ec0:	83 ec 4c             	sub    esp,0x4c
c0022ec3:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0022ec7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0022ecb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022ecf:	89 d0                	mov    eax,edx
c0022ed1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0022ed6:	3d ff ff ef 3f       	cmp    eax,0x3fefffff
c0022edb:	7e 23                	jle    c0022f00 <acos+0x40>
c0022edd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022ee1:	2d 00 00 f0 3f       	sub    eax,0x3ff00000
c0022ee6:	09 c8                	or     eax,ecx
c0022ee8:	0f 85 32 01 00 00    	jne    c0023020 <acos+0x160>
c0022eee:	85 d2                	test   edx,edx
c0022ef0:	0f 8e 4a 01 00 00    	jle    c0023040 <acos+0x180>
c0022ef6:	d9 ee                	fldz   
c0022ef8:	83 c4 4c             	add    esp,0x4c
c0022efb:	c3                   	ret    
c0022efc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0022f00:	3d ff ff df 3f       	cmp    eax,0x3fdfffff
c0022f05:	7f 29                	jg     c0022f30 <acos+0x70>
c0022f07:	3d 00 00 60 3c       	cmp    eax,0x3c600000
c0022f0c:	0f 8f 4e 01 00 00    	jg     c0023060 <acos+0x1a0>
c0022f12:	dd 05 28 d7 02 c0    	fld    QWORD PTR ds:0xc002d728
c0022f18:	dc 05 38 bd 02 c0    	fadd   QWORD PTR ds:0xc002bd38
c0022f1e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022f22:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022f26:	83 c4 4c             	add    esp,0x4c
c0022f29:	c3                   	ret    
c0022f2a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0022f30:	85 d2                	test   edx,edx
c0022f32:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022f36:	0f 88 d4 01 00 00    	js     c0023110 <acos+0x250>
c0022f3c:	d9 e8                	fld1   
c0022f3e:	de e1                	fsubrp st(1),st
c0022f40:	d8 0d 94 bd 02 c0    	fmul   DWORD PTR ds:0xc002bd94
c0022f46:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022f4a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022f4e:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c0022f52:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022f55:	e8 36 27 00 00       	call   c0025690 <sqrt>
c0022f5a:	31 c0                	xor    eax,eax
c0022f5c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022f60:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0022f64:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022f68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0022f6c:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022f70:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0022f74:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022f78:	d9 c1                	fld    st(1)
c0022f7a:	dc 0d 40 bd 02 c0    	fmul   QWORD PTR ds:0xc002bd40
c0022f80:	dc 05 48 bd 02 c0    	fadd   QWORD PTR ds:0xc002bd48
c0022f86:	d8 ca                	fmul   st,st(2)
c0022f88:	dc 25 50 bd 02 c0    	fsub   QWORD PTR ds:0xc002bd50
c0022f8e:	d8 ca                	fmul   st,st(2)
c0022f90:	dc 05 58 bd 02 c0    	fadd   QWORD PTR ds:0xc002bd58
c0022f96:	d8 ca                	fmul   st,st(2)
c0022f98:	dc 25 60 bd 02 c0    	fsub   QWORD PTR ds:0xc002bd60
c0022f9e:	d8 ca                	fmul   st,st(2)
c0022fa0:	dc 05 68 bd 02 c0    	fadd   QWORD PTR ds:0xc002bd68
c0022fa6:	d8 ca                	fmul   st,st(2)
c0022fa8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022fac:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022fb0:	d9 c2                	fld    st(2)
c0022fb2:	dc 0d 70 bd 02 c0    	fmul   QWORD PTR ds:0xc002bd70
c0022fb8:	dc 25 78 bd 02 c0    	fsub   QWORD PTR ds:0xc002bd78
c0022fbe:	d8 cb                	fmul   st,st(3)
c0022fc0:	dc 05 80 bd 02 c0    	fadd   QWORD PTR ds:0xc002bd80
c0022fc6:	d8 cb                	fmul   st,st(3)
c0022fc8:	dc 25 88 bd 02 c0    	fsub   QWORD PTR ds:0xc002bd88
c0022fce:	d8 cb                	fmul   st,st(3)
c0022fd0:	d9 e8                	fld1   
c0022fd2:	de c1                	faddp  st(1),st
c0022fd4:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022fd8:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022fdc:	de f9                	fdivp  st(1),st
c0022fde:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022fe2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022fe6:	d8 c9                	fmul   st,st(1)
c0022fe8:	d9 c3                	fld    st(3)
c0022fea:	d8 cc                	fmul   st,st(4)
c0022fec:	de eb                	fsubp  st(3),st
c0022fee:	d9 c9                	fxch   st(1)
c0022ff0:	d8 c3                	fadd   st,st(3)
c0022ff2:	de fa                	fdivp  st(2),st
c0022ff4:	d9 c9                	fxch   st(1)
c0022ff6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022ffa:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022ffe:	de c1                	faddp  st(1),st
c0023000:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0023004:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0023008:	de c1                	faddp  st(1),st
c002300a:	d8 c0                	fadd   st,st(0)
c002300c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0023010:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0023014:	83 c4 4c             	add    esp,0x4c
c0023017:	c3                   	ret    
c0023018:	90                   	nop
c0023019:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023020:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023024:	d8 e0                	fsub   st,st(0)
c0023026:	d8 f0                	fdiv   st,st(0)
c0023028:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002302c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0023030:	83 c4 4c             	add    esp,0x4c
c0023033:	c3                   	ret    
c0023034:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002303a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0023040:	dd 05 28 d7 02 c0    	fld    QWORD PTR ds:0xc002d728
c0023046:	d8 c0                	fadd   st,st(0)
c0023048:	dc 05 30 bd 02 c0    	fadd   QWORD PTR ds:0xc002bd30
c002304e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0023052:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0023056:	83 c4 4c             	add    esp,0x4c
c0023059:	c3                   	ret    
c002305a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0023060:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023064:	d9 c0                	fld    st(0)
c0023066:	d8 c9                	fmul   st,st(1)
c0023068:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002306c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0023070:	dd 05 28 d7 02 c0    	fld    QWORD PTR ds:0xc002d728
c0023076:	d9 c1                	fld    st(1)
c0023078:	dc 0d 40 bd 02 c0    	fmul   QWORD PTR ds:0xc002bd40
c002307e:	dc 05 48 bd 02 c0    	fadd   QWORD PTR ds:0xc002bd48
c0023084:	d8 ca                	fmul   st,st(2)
c0023086:	dc 25 50 bd 02 c0    	fsub   QWORD PTR ds:0xc002bd50
c002308c:	d8 ca                	fmul   st,st(2)
c002308e:	dc 05 58 bd 02 c0    	fadd   QWORD PTR ds:0xc002bd58
c0023094:	d8 ca                	fmul   st,st(2)
c0023096:	dc 25 60 bd 02 c0    	fsub   QWORD PTR ds:0xc002bd60
c002309c:	d8 ca                	fmul   st,st(2)
c002309e:	dc 05 68 bd 02 c0    	fadd   QWORD PTR ds:0xc002bd68
c00230a4:	d8 ca                	fmul   st,st(2)
c00230a6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00230aa:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00230ae:	d9 c2                	fld    st(2)
c00230b0:	dc 0d 70 bd 02 c0    	fmul   QWORD PTR ds:0xc002bd70
c00230b6:	dc 25 78 bd 02 c0    	fsub   QWORD PTR ds:0xc002bd78
c00230bc:	d8 cb                	fmul   st,st(3)
c00230be:	dc 05 80 bd 02 c0    	fadd   QWORD PTR ds:0xc002bd80
c00230c4:	d8 cb                	fmul   st,st(3)
c00230c6:	dc 25 88 bd 02 c0    	fsub   QWORD PTR ds:0xc002bd88
c00230cc:	de cb                	fmulp  st(3),st
c00230ce:	d9 ca                	fxch   st(2)
c00230d0:	d8 05 90 bd 02 c0    	fadd   DWORD PTR ds:0xc002bd90
c00230d6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00230da:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00230de:	de fa                	fdivp  st(2),st
c00230e0:	d9 c9                	fxch   st(1)
c00230e2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00230e6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00230ea:	d8 ca                	fmul   st,st(2)
c00230ec:	de e9                	fsubp  st(1),st
c00230ee:	de e9                	fsubp  st(1),st
c00230f0:	dc 2d 38 bd 02 c0    	fsubr  QWORD PTR ds:0xc002bd38
c00230f6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00230fa:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00230fe:	83 c4 4c             	add    esp,0x4c
c0023101:	c3                   	ret    
c0023102:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023109:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023110:	d9 e8                	fld1   
c0023112:	de c1                	faddp  st(1),st
c0023114:	d8 0d 94 bd 02 c0    	fmul   DWORD PTR ds:0xc002bd94
c002311a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002311e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0023122:	d9 c0                	fld    st(0)
c0023124:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0023128:	dd 1c 24             	fstp   QWORD PTR [esp]
c002312b:	e8 60 25 00 00       	call   c0025690 <sqrt>
c0023130:	dd 05 28 d7 02 c0    	fld    QWORD PTR ds:0xc002d728
c0023136:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c002313a:	d9 c0                	fld    st(0)
c002313c:	dc 0d 40 bd 02 c0    	fmul   QWORD PTR ds:0xc002bd40
c0023142:	dc 05 48 bd 02 c0    	fadd   QWORD PTR ds:0xc002bd48
c0023148:	d8 c9                	fmul   st,st(1)
c002314a:	dc 25 50 bd 02 c0    	fsub   QWORD PTR ds:0xc002bd50
c0023150:	d8 c9                	fmul   st,st(1)
c0023152:	dc 05 58 bd 02 c0    	fadd   QWORD PTR ds:0xc002bd58
c0023158:	d8 c9                	fmul   st,st(1)
c002315a:	dc 25 60 bd 02 c0    	fsub   QWORD PTR ds:0xc002bd60
c0023160:	d8 c9                	fmul   st,st(1)
c0023162:	dc 05 68 bd 02 c0    	fadd   QWORD PTR ds:0xc002bd68
c0023168:	d8 c9                	fmul   st,st(1)
c002316a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002316e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0023172:	d9 c1                	fld    st(1)
c0023174:	dc 0d 70 bd 02 c0    	fmul   QWORD PTR ds:0xc002bd70
c002317a:	dc 25 78 bd 02 c0    	fsub   QWORD PTR ds:0xc002bd78
c0023180:	d8 ca                	fmul   st,st(2)
c0023182:	dc 05 80 bd 02 c0    	fadd   QWORD PTR ds:0xc002bd80
c0023188:	d8 ca                	fmul   st,st(2)
c002318a:	dc 25 88 bd 02 c0    	fsub   QWORD PTR ds:0xc002bd88
c0023190:	de ca                	fmulp  st(2),st
c0023192:	d9 e8                	fld1   
c0023194:	de c2                	faddp  st(2),st
c0023196:	d9 c9                	fxch   st(1)
c0023198:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002319c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00231a0:	de f9                	fdivp  st(1),st
c00231a2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00231a6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00231aa:	d8 ca                	fmul   st,st(2)
c00231ac:	de e1                	fsubrp st(1),st
c00231ae:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00231b2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00231b6:	de c1                	faddp  st(1),st
c00231b8:	d8 c0                	fadd   st,st(0)
c00231ba:	dc 2d 30 bd 02 c0    	fsubr  QWORD PTR ds:0xc002bd30
c00231c0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00231c4:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00231c8:	83 c4 4c             	add    esp,0x4c
c00231cb:	c3                   	ret    
c00231cc:	66 90                	xchg   ax,ax
c00231ce:	66 90                	xchg   ax,ax

c00231d0 <asin>:
c00231d0:	56                   	push   esi
c00231d1:	53                   	push   ebx
c00231d2:	83 ec 44             	sub    esp,0x44
c00231d5:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c00231d9:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00231dd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00231e1:	89 f3                	mov    ebx,esi
c00231e3:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00231e9:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c00231ef:	7e 4f                	jle    c0023240 <asin+0x70>
c00231f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231f5:	81 eb 00 00 f0 3f    	sub    ebx,0x3ff00000
c00231fb:	09 c3                	or     ebx,eax
c00231fd:	74 21                	je     c0023220 <asin+0x50>
c00231ff:	d8 e0                	fsub   st,st(0)
c0023201:	d8 f0                	fdiv   st,st(0)
c0023203:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0023207:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002320b:	eb 05                	jmp    c0023212 <asin+0x42>
c002320d:	8d 76 00             	lea    esi,[esi+0x0]
c0023210:	dd d9                	fstp   st(1)
c0023212:	83 c4 44             	add    esp,0x44
c0023215:	5b                   	pop    ebx
c0023216:	5e                   	pop    esi
c0023217:	c3                   	ret    
c0023218:	90                   	nop
c0023219:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023220:	d9 c0                	fld    st(0)
c0023222:	dc 0d 38 bd 02 c0    	fmul   QWORD PTR ds:0xc002bd38
c0023228:	d9 c9                	fxch   st(1)
c002322a:	dc 0d 98 bd 02 c0    	fmul   QWORD PTR ds:0xc002bd98
c0023230:	de c1                	faddp  st(1),st
c0023232:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0023236:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002323a:	83 c4 44             	add    esp,0x44
c002323d:	5b                   	pop    ebx
c002323e:	5e                   	pop    esi
c002323f:	c3                   	ret    
c0023240:	dd d8                	fstp   st(0)
c0023242:	81 fb ff ff df 3f    	cmp    ebx,0x3fdfffff
c0023248:	0f 8f b2 00 00 00    	jg     c0023300 <asin+0x130>
c002324e:	81 fb ff ff 4f 3e    	cmp    ebx,0x3e4fffff
c0023254:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023258:	7f 16                	jg     c0023270 <asin+0xa0>
c002325a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002325e:	d9 e8                	fld1   
c0023260:	d9 c2                	fld    st(2)
c0023262:	dc 05 a0 bd 02 c0    	fadd   QWORD PTR ds:0xc002bda0
c0023268:	df f1                	fcomip st,st(1)
c002326a:	dd d8                	fstp   st(0)
c002326c:	77 a2                	ja     c0023210 <asin+0x40>
c002326e:	dd d8                	fstp   st(0)
c0023270:	d9 c0                	fld    st(0)
c0023272:	d8 c9                	fmul   st,st(1)
c0023274:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0023278:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002327c:	d9 c0                	fld    st(0)
c002327e:	dc 0d 40 bd 02 c0    	fmul   QWORD PTR ds:0xc002bd40
c0023284:	dc 05 48 bd 02 c0    	fadd   QWORD PTR ds:0xc002bd48
c002328a:	d8 c9                	fmul   st,st(1)
c002328c:	dc 25 50 bd 02 c0    	fsub   QWORD PTR ds:0xc002bd50
c0023292:	d8 c9                	fmul   st,st(1)
c0023294:	dc 05 58 bd 02 c0    	fadd   QWORD PTR ds:0xc002bd58
c002329a:	d8 c9                	fmul   st,st(1)
c002329c:	dc 25 60 bd 02 c0    	fsub   QWORD PTR ds:0xc002bd60
c00232a2:	d8 c9                	fmul   st,st(1)
c00232a4:	dc 05 68 bd 02 c0    	fadd   QWORD PTR ds:0xc002bd68
c00232aa:	d8 c9                	fmul   st,st(1)
c00232ac:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00232b0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00232b4:	d9 c1                	fld    st(1)
c00232b6:	dc 0d 70 bd 02 c0    	fmul   QWORD PTR ds:0xc002bd70
c00232bc:	dc 25 78 bd 02 c0    	fsub   QWORD PTR ds:0xc002bd78
c00232c2:	d8 ca                	fmul   st,st(2)
c00232c4:	dc 05 80 bd 02 c0    	fadd   QWORD PTR ds:0xc002bd80
c00232ca:	d8 ca                	fmul   st,st(2)
c00232cc:	dc 25 88 bd 02 c0    	fsub   QWORD PTR ds:0xc002bd88
c00232d2:	de ca                	fmulp  st(2),st
c00232d4:	d9 c9                	fxch   st(1)
c00232d6:	d8 05 90 bd 02 c0    	fadd   DWORD PTR ds:0xc002bd90
c00232dc:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00232e0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00232e4:	de f9                	fdivp  st(1),st
c00232e6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00232ea:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00232ee:	d8 c9                	fmul   st,st(1)
c00232f0:	de c1                	faddp  st(1),st
c00232f2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00232f6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00232fa:	83 c4 44             	add    esp,0x44
c00232fd:	5b                   	pop    ebx
c00232fe:	5e                   	pop    esi
c00232ff:	c3                   	ret    
c0023300:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023304:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023307:	e8 34 1d 00 00       	call   c0025040 <fabs>
c002330c:	d9 e8                	fld1   
c002330e:	dc e1                	fsubr  st(1),st
c0023310:	d9 c9                	fxch   st(1)
c0023312:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0023316:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002331a:	d9 05 94 bd 02 c0    	fld    DWORD PTR ds:0xc002bd94
c0023320:	de c9                	fmulp  st(1),st
c0023322:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0023326:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002332a:	d9 c0                	fld    st(0)
c002332c:	d9 c0                	fld    st(0)
c002332e:	dc 0d 40 bd 02 c0    	fmul   QWORD PTR ds:0xc002bd40
c0023334:	dc 05 48 bd 02 c0    	fadd   QWORD PTR ds:0xc002bd48
c002333a:	d8 c9                	fmul   st,st(1)
c002333c:	dc 25 50 bd 02 c0    	fsub   QWORD PTR ds:0xc002bd50
c0023342:	d8 c9                	fmul   st,st(1)
c0023344:	dc 05 58 bd 02 c0    	fadd   QWORD PTR ds:0xc002bd58
c002334a:	d8 c9                	fmul   st,st(1)
c002334c:	dc 25 60 bd 02 c0    	fsub   QWORD PTR ds:0xc002bd60
c0023352:	d8 c9                	fmul   st,st(1)
c0023354:	dc 05 68 bd 02 c0    	fadd   QWORD PTR ds:0xc002bd68
c002335a:	d8 c9                	fmul   st,st(1)
c002335c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023360:	d9 c0                	fld    st(0)
c0023362:	dc 0d 70 bd 02 c0    	fmul   QWORD PTR ds:0xc002bd70
c0023368:	dc 25 78 bd 02 c0    	fsub   QWORD PTR ds:0xc002bd78
c002336e:	d8 c9                	fmul   st,st(1)
c0023370:	dc 05 80 bd 02 c0    	fadd   QWORD PTR ds:0xc002bd80
c0023376:	d8 c9                	fmul   st,st(1)
c0023378:	dc 25 88 bd 02 c0    	fsub   QWORD PTR ds:0xc002bd88
c002337e:	d8 c9                	fmul   st,st(1)
c0023380:	d9 c9                	fxch   st(1)
c0023382:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0023386:	de c2                	faddp  st(2),st
c0023388:	d9 c9                	fxch   st(1)
c002338a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c002338e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023391:	e8 fa 22 00 00       	call   c0025690 <sqrt>
c0023396:	81 fb 32 33 ef 3f    	cmp    ebx,0x3fef3332
c002339c:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00233a0:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c00233a4:	7e 4a                	jle    c00233f0 <asin+0x220>
c00233a6:	dd d8                	fstp   st(0)
c00233a8:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00233ac:	dc 74 24 30          	fdiv   QWORD PTR [esp+0x30]
c00233b0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00233b4:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00233b8:	d8 c9                	fmul   st,st(1)
c00233ba:	de c1                	faddp  st(1),st
c00233bc:	d8 c0                	fadd   st,st(0)
c00233be:	dc 25 98 bd 02 c0    	fsub   QWORD PTR ds:0xc002bd98
c00233c4:	dc 2d 38 bd 02 c0    	fsubr  QWORD PTR ds:0xc002bd38
c00233ca:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00233ce:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00233d2:	85 f6                	test   esi,esi
c00233d4:	0f 8f 38 fe ff ff    	jg     c0023212 <asin+0x42>
c00233da:	d9 e0                	fchs   
c00233dc:	e9 31 fe ff ff       	jmp    c0023212 <asin+0x42>
c00233e1:	eb 0d                	jmp    c00233f0 <asin+0x220>
c00233e3:	90                   	nop
c00233e4:	90                   	nop
c00233e5:	90                   	nop
c00233e6:	90                   	nop
c00233e7:	90                   	nop
c00233e8:	90                   	nop
c00233e9:	90                   	nop
c00233ea:	90                   	nop
c00233eb:	90                   	nop
c00233ec:	90                   	nop
c00233ed:	90                   	nop
c00233ee:	90                   	nop
c00233ef:	90                   	nop
c00233f0:	dd d9                	fstp   st(1)
c00233f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00233f6:	31 c0                	xor    eax,eax
c00233f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00233fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0023400:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023404:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023408:	d9 c0                	fld    st(0)
c002340a:	d8 c1                	fadd   st,st(1)
c002340c:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023410:	dc 74 24 30          	fdiv   QWORD PTR [esp+0x30]
c0023414:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0023418:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002341c:	de c9                	fmulp  st(1),st
c002341e:	d9 c2                	fld    st(2)
c0023420:	d8 cb                	fmul   st,st(3)
c0023422:	de ec                	fsubp  st(4),st
c0023424:	d9 c9                	fxch   st(1)
c0023426:	d8 c2                	fadd   st,st(2)
c0023428:	de fb                	fdivp  st(3),st
c002342a:	d9 ca                	fxch   st(2)
c002342c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0023430:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0023434:	d8 c0                	fadd   st,st(0)
c0023436:	dc 2d 98 bd 02 c0    	fsubr  QWORD PTR ds:0xc002bd98
c002343c:	de ea                	fsubp  st(2),st
c002343e:	d9 c9                	fxch   st(1)
c0023440:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0023444:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0023448:	d9 c9                	fxch   st(1)
c002344a:	d8 c0                	fadd   st,st(0)
c002344c:	dd 05 a8 bd 02 c0    	fld    QWORD PTR ds:0xc002bda8
c0023452:	dc e1                	fsubr  st(1),st
c0023454:	d9 c9                	fxch   st(1)
c0023456:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002345a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002345e:	de ea                	fsubp  st(2),st
c0023460:	de e1                	fsubrp st(1),st
c0023462:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0023466:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002346a:	e9 63 ff ff ff       	jmp    c00233d2 <asin+0x202>
c002346f:	90                   	nop

c0023470 <atan2>:
c0023470:	83 ec 4c             	sub    esp,0x4c
c0023473:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0023477:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c002347b:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002347f:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c0023483:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023487:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c002348b:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c002348f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0023493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023497:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002349b:	89 c1                	mov    ecx,eax
c002349d:	f7 d9                	neg    ecx
c002349f:	89 d3                	mov    ebx,edx
c00234a1:	09 c1                	or     ecx,eax
c00234a3:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00234a9:	c1 e9 1f             	shr    ecx,0x1f
c00234ac:	09 d9                	or     ecx,ebx
c00234ae:	81 f9 00 00 f0 7f    	cmp    ecx,0x7ff00000
c00234b4:	77 7a                	ja     c0023530 <atan2+0xc0>
c00234b6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00234ba:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00234be:	89 f1                	mov    ecx,esi
c00234c0:	f7 d9                	neg    ecx
c00234c2:	89 ef                	mov    edi,ebp
c00234c4:	09 f1                	or     ecx,esi
c00234c6:	81 e7 ff ff ff 7f    	and    edi,0x7fffffff
c00234cc:	c1 e9 1f             	shr    ecx,0x1f
c00234cf:	09 f9                	or     ecx,edi
c00234d1:	81 f9 00 00 f0 7f    	cmp    ecx,0x7ff00000
c00234d7:	77 57                	ja     c0023530 <atan2+0xc0>
c00234d9:	81 fa 00 00 f0 3f    	cmp    edx,0x3ff00000
c00234df:	75 08                	jne    c00234e9 <atan2+0x79>
c00234e1:	85 c0                	test   eax,eax
c00234e3:	0f 84 f7 00 00 00    	je     c00235e0 <atan2+0x170>
c00234e9:	89 d1                	mov    ecx,edx
c00234eb:	c1 f9 1e             	sar    ecx,0x1e
c00234ee:	83 e1 02             	and    ecx,0x2
c00234f1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00234f5:	89 e9                	mov    ecx,ebp
c00234f7:	c1 e9 1f             	shr    ecx,0x1f
c00234fa:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00234fe:	09 fe                	or     esi,edi
c0023500:	75 5e                	jne    c0023560 <atan2+0xf0>
c0023502:	83 f9 02             	cmp    ecx,0x2
c0023505:	0f 84 65 01 00 00    	je     c0023670 <atan2+0x200>
c002350b:	83 f9 03             	cmp    ecx,0x3
c002350e:	0f 85 1c 01 00 00    	jne    c0023630 <atan2+0x1c0>
c0023514:	dd 05 38 d7 02 c0    	fld    QWORD PTR ds:0xc002d738
c002351a:	dd 05 b0 bd 02 c0    	fld    QWORD PTR ds:0xc002bdb0
c0023520:	de e1                	fsubrp st(1),st
c0023522:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023526:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002352a:	eb 14                	jmp    c0023540 <atan2+0xd0>
c002352c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0023530:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023534:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0023538:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002353c:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023540:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0023544:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0023548:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c002354c:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0023550:	83 c4 4c             	add    esp,0x4c
c0023553:	c3                   	ret    
c0023554:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002355a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0023560:	09 d8                	or     eax,ebx
c0023562:	0f 84 98 00 00 00    	je     c0023600 <atan2+0x190>
c0023568:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c002356e:	0f 84 1c 01 00 00    	je     c0023690 <atan2+0x220>
c0023574:	81 ff 00 00 f0 7f    	cmp    edi,0x7ff00000
c002357a:	0f 84 80 00 00 00    	je     c0023600 <atan2+0x190>
c0023580:	29 df                	sub    edi,ebx
c0023582:	c1 ff 14             	sar    edi,0x14
c0023585:	83 ff 3c             	cmp    edi,0x3c
c0023588:	0f 8f b2 00 00 00    	jg     c0023640 <atan2+0x1d0>
c002358e:	c1 ea 1f             	shr    edx,0x1f
c0023591:	84 d2                	test   dl,dl
c0023593:	0f 84 97 01 00 00    	je     c0023730 <atan2+0x2c0>
c0023599:	83 ff c4             	cmp    edi,0xffffffc4
c002359c:	0f 8d 8e 01 00 00    	jge    c0023730 <atan2+0x2c0>
c00235a2:	d9 ee                	fldz   
c00235a4:	83 f9 01             	cmp    ecx,0x1
c00235a7:	0f 84 02 01 00 00    	je     c00236af <atan2+0x23f>
c00235ad:	83 f9 02             	cmp    ecx,0x2
c00235b0:	0f 84 2a 01 00 00    	je     c00236e0 <atan2+0x270>
c00235b6:	85 c9                	test   ecx,ecx
c00235b8:	74 86                	je     c0023540 <atan2+0xd0>
c00235ba:	dd 05 30 d7 02 c0    	fld    QWORD PTR ds:0xc002d730
c00235c0:	de e9                	fsubp  st(1),st
c00235c2:	dc 25 30 bd 02 c0    	fsub   QWORD PTR ds:0xc002bd30
c00235c8:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00235cc:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00235d0:	e9 6b ff ff ff       	jmp    c0023540 <atan2+0xd0>
c00235d5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00235d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00235e0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00235e4:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00235e8:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00235ec:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00235f0:	83 c4 4c             	add    esp,0x4c
c00235f3:	e9 a8 11 00 00       	jmp    c00247a0 <atan>
c00235f8:	90                   	nop
c00235f9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023600:	85 ed                	test   ebp,ebp
c0023602:	0f 88 b8 00 00 00    	js     c00236c0 <atan2+0x250>
c0023608:	dd 05 38 d7 02 c0    	fld    QWORD PTR ds:0xc002d738
c002360e:	dc 05 38 bd 02 c0    	fadd   QWORD PTR ds:0xc002bd38
c0023614:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023618:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002361c:	e9 1f ff ff ff       	jmp    c0023540 <atan2+0xd0>
c0023621:	eb 0d                	jmp    c0023630 <atan2+0x1c0>
c0023623:	90                   	nop
c0023624:	90                   	nop
c0023625:	90                   	nop
c0023626:	90                   	nop
c0023627:	90                   	nop
c0023628:	90                   	nop
c0023629:	90                   	nop
c002362a:	90                   	nop
c002362b:	90                   	nop
c002362c:	90                   	nop
c002362d:	90                   	nop
c002362e:	90                   	nop
c002362f:	90                   	nop
c0023630:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023634:	e9 07 ff ff ff       	jmp    c0023540 <atan2+0xd0>
c0023639:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023640:	dd 05 30 d7 02 c0    	fld    QWORD PTR ds:0xc002d730
c0023646:	83 e1 01             	and    ecx,0x1
c0023649:	d9 05 94 bd 02 c0    	fld    DWORD PTR ds:0xc002bd94
c002364f:	de c9                	fmulp  st(1),st
c0023651:	dc 05 38 bd 02 c0    	fadd   QWORD PTR ds:0xc002bd38
c0023657:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002365b:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002365f:	e9 40 ff ff ff       	jmp    c00235a4 <atan2+0x134>
c0023664:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002366a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0023670:	dd 05 38 d7 02 c0    	fld    QWORD PTR ds:0xc002d738
c0023676:	dc 05 30 bd 02 c0    	fadd   QWORD PTR ds:0xc002bd30
c002367c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023680:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023684:	e9 b7 fe ff ff       	jmp    c0023540 <atan2+0xd0>
c0023689:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023690:	81 ff 00 00 f0 7f    	cmp    edi,0x7ff00000
c0023696:	74 68                	je     c0023700 <atan2+0x290>
c0023698:	83 f9 02             	cmp    ecx,0x2
c002369b:	74 d3                	je     c0023670 <atan2+0x200>
c002369d:	83 f9 03             	cmp    ecx,0x3
c00236a0:	0f 84 6e fe ff ff    	je     c0023514 <atan2+0xa4>
c00236a6:	d9 ee                	fldz   
c00236a8:	49                   	dec    ecx
c00236a9:	0f 85 91 fe ff ff    	jne    c0023540 <atan2+0xd0>
c00236af:	d9 e0                	fchs   
c00236b1:	e9 8a fe ff ff       	jmp    c0023540 <atan2+0xd0>
c00236b6:	8d 76 00             	lea    esi,[esi+0x0]
c00236b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00236c0:	dd 05 38 d7 02 c0    	fld    QWORD PTR ds:0xc002d738
c00236c6:	dd 05 b8 bd 02 c0    	fld    QWORD PTR ds:0xc002bdb8
c00236cc:	de e1                	fsubrp st(1),st
c00236ce:	e9 41 ff ff ff       	jmp    c0023614 <atan2+0x1a4>
c00236d3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00236d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00236e0:	dd 05 30 d7 02 c0    	fld    QWORD PTR ds:0xc002d730
c00236e6:	de e9                	fsubp  st(1),st
c00236e8:	dc 2d 30 bd 02 c0    	fsubr  QWORD PTR ds:0xc002bd30
c00236ee:	e9 21 ff ff ff       	jmp    c0023614 <atan2+0x1a4>
c00236f3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00236f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023700:	83 f9 02             	cmp    ecx,0x2
c0023703:	0f 84 82 00 00 00    	je     c002378b <atan2+0x31b>
c0023709:	83 f9 03             	cmp    ecx,0x3
c002370c:	74 62                	je     c0023770 <atan2+0x300>
c002370e:	49                   	dec    ecx
c002370f:	90                   	nop
c0023710:	74 43                	je     c0023755 <atan2+0x2e5>
c0023712:	dd 05 38 d7 02 c0    	fld    QWORD PTR ds:0xc002d738
c0023718:	dc 05 a8 bd 02 c0    	fadd   QWORD PTR ds:0xc002bda8
c002371e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023722:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023726:	e9 15 fe ff ff       	jmp    c0023540 <atan2+0xd0>
c002372b:	90                   	nop
c002372c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0023730:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0023734:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023738:	dc 74 24 10          	fdiv   QWORD PTR [esp+0x10]
c002373c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002373f:	e8 fc 18 00 00       	call   c0025040 <fabs>
c0023744:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023747:	e8 54 10 00 00       	call   c00247a0 <atan>
c002374c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023750:	e9 4f fe ff ff       	jmp    c00235a4 <atan2+0x134>
c0023755:	dd 05 38 d7 02 c0    	fld    QWORD PTR ds:0xc002d738
c002375b:	dd 05 c0 bd 02 c0    	fld    QWORD PTR ds:0xc002bdc0
c0023761:	de e1                	fsubrp st(1),st
c0023763:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023767:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002376b:	e9 d0 fd ff ff       	jmp    c0023540 <atan2+0xd0>
c0023770:	dd 05 38 d7 02 c0    	fld    QWORD PTR ds:0xc002d738
c0023776:	dd 05 d0 bd 02 c0    	fld    QWORD PTR ds:0xc002bdd0
c002377c:	de e1                	fsubrp st(1),st
c002377e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023782:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023786:	e9 b5 fd ff ff       	jmp    c0023540 <atan2+0xd0>
c002378b:	dd 05 38 d7 02 c0    	fld    QWORD PTR ds:0xc002d738
c0023791:	dc 05 c8 bd 02 c0    	fadd   QWORD PTR ds:0xc002bdc8
c0023797:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002379b:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002379f:	e9 9c fd ff ff       	jmp    c0023540 <atan2+0xd0>
c00237a4:	66 90                	xchg   ax,ax
c00237a6:	66 90                	xchg   ax,ax
c00237a8:	66 90                	xchg   ax,ax
c00237aa:	66 90                	xchg   ax,ax
c00237ac:	66 90                	xchg   ax,ax
c00237ae:	66 90                	xchg   ax,ax

c00237b0 <cosh>:
c00237b0:	53                   	push   ebx
c00237b1:	83 ec 28             	sub    esp,0x28
c00237b4:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00237b8:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00237bc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00237c0:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00237c6:	81 fb ff ff ef 7f    	cmp    ebx,0x7fefffff
c00237cc:	0f 8f 9e 00 00 00    	jg     c0023870 <cosh+0xc0>
c00237d2:	dd d8                	fstp   st(0)
c00237d4:	81 fb 42 2e d6 3f    	cmp    ebx,0x3fd62e42
c00237da:	7e 44                	jle    c0023820 <cosh+0x70>
c00237dc:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c00237e2:	0f 8e a8 00 00 00    	jle    c0023890 <cosh+0xe0>
c00237e8:	81 fb 41 2e 86 40    	cmp    ebx,0x40862e41
c00237ee:	0f 8e dc 00 00 00    	jle    c00238d0 <cosh+0x120>
c00237f4:	81 fb ce 33 86 40    	cmp    ebx,0x408633ce
c00237fa:	0f 8e 00 01 00 00    	jle    c0023900 <cosh+0x150>
c0023800:	d9 05 d8 bd 02 c0    	fld    DWORD PTR ds:0xc002bdd8
c0023806:	eb 0c                	jmp    c0023814 <cosh+0x64>
c0023808:	90                   	nop
c0023809:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023810:	dd d9                	fstp   st(1)
c0023812:	dd d9                	fstp   st(1)
c0023814:	83 c4 28             	add    esp,0x28
c0023817:	5b                   	pop    ebx
c0023818:	c3                   	ret    
c0023819:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023820:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023824:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023827:	e8 14 18 00 00       	call   c0025040 <fabs>
c002382c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002382f:	e8 7c 13 00 00       	call   c0024bb0 <expm1>
c0023834:	81 fb ff ff 7f 3c    	cmp    ebx,0x3c7fffff
c002383a:	d9 e8                	fld1   
c002383c:	d9 c1                	fld    st(1)
c002383e:	d8 c1                	fadd   st,st(1)
c0023840:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023844:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023848:	7e c6                	jle    c0023810 <cosh+0x60>
c002384a:	d9 ca                	fxch   st(2)
c002384c:	d8 c8                	fmul   st,st(0)
c002384e:	d9 ca                	fxch   st(2)
c0023850:	d8 c0                	fadd   st,st(0)
c0023852:	de fa                	fdivp  st(2),st
c0023854:	de c1                	faddp  st(1),st
c0023856:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002385a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002385e:	83 c4 28             	add    esp,0x28
c0023861:	5b                   	pop    ebx
c0023862:	c3                   	ret    
c0023863:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0023869:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023870:	d9 c0                	fld    st(0)
c0023872:	de c9                	fmulp  st(1),st
c0023874:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023878:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002387c:	83 c4 28             	add    esp,0x28
c002387f:	5b                   	pop    ebx
c0023880:	c3                   	ret    
c0023881:	eb 0d                	jmp    c0023890 <cosh+0xe0>
c0023883:	90                   	nop
c0023884:	90                   	nop
c0023885:	90                   	nop
c0023886:	90                   	nop
c0023887:	90                   	nop
c0023888:	90                   	nop
c0023889:	90                   	nop
c002388a:	90                   	nop
c002388b:	90                   	nop
c002388c:	90                   	nop
c002388d:	90                   	nop
c002388e:	90                   	nop
c002388f:	90                   	nop
c0023890:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023894:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023897:	e8 a4 17 00 00       	call   c0025040 <fabs>
c002389c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002389f:	e8 54 1d 00 00       	call   c00255f8 <exp>
c00238a4:	d9 05 94 bd 02 c0    	fld    DWORD PTR ds:0xc002bd94
c00238aa:	d9 c1                	fld    st(1)
c00238ac:	d8 c9                	fmul   st,st(1)
c00238ae:	d9 c9                	fxch   st(1)
c00238b0:	de f2                	fdivrp st(2),st
c00238b2:	de c1                	faddp  st(1),st
c00238b4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00238b8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00238bc:	e9 53 ff ff ff       	jmp    c0023814 <cosh+0x64>
c00238c1:	eb 0d                	jmp    c00238d0 <cosh+0x120>
c00238c3:	90                   	nop
c00238c4:	90                   	nop
c00238c5:	90                   	nop
c00238c6:	90                   	nop
c00238c7:	90                   	nop
c00238c8:	90                   	nop
c00238c9:	90                   	nop
c00238ca:	90                   	nop
c00238cb:	90                   	nop
c00238cc:	90                   	nop
c00238cd:	90                   	nop
c00238ce:	90                   	nop
c00238cf:	90                   	nop
c00238d0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00238d4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00238d7:	e8 64 17 00 00       	call   c0025040 <fabs>
c00238dc:	dd 1c 24             	fstp   QWORD PTR [esp]
c00238df:	e8 14 1d 00 00       	call   c00255f8 <exp>
c00238e4:	d9 05 94 bd 02 c0    	fld    DWORD PTR ds:0xc002bd94
c00238ea:	de c9                	fmulp  st(1),st
c00238ec:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00238f0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00238f4:	e9 1b ff ff ff       	jmp    c0023814 <cosh+0x64>
c00238f9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023900:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023904:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023907:	e8 34 17 00 00       	call   c0025040 <fabs>
c002390c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0023911:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023915:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023918:	e8 d3 0c 00 00       	call   c00245f0 <__ldexp_exp>
c002391d:	e9 f2 fe ff ff       	jmp    c0023814 <cosh+0x64>
c0023922:	66 90                	xchg   ax,ax
c0023924:	66 90                	xchg   ax,ax
c0023926:	66 90                	xchg   ax,ax
c0023928:	66 90                	xchg   ax,ax
c002392a:	66 90                	xchg   ax,ax
c002392c:	66 90                	xchg   ax,ax
c002392e:	66 90                	xchg   ax,ax

c0023930 <pow>:
c0023930:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0023936:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
c002393d:	dd 84 24 a0 00 00 00 	fld    QWORD PTR [esp+0xa0]
c0023944:	89 9c 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],ebx
c002394b:	89 bc 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],edi
c0023952:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023956:	89 ac 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],ebp
c002395d:	dd 84 24 a8 00 00 00 	fld    QWORD PTR [esp+0xa8]
c0023964:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0023968:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002396c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023970:	89 f3                	mov    ebx,esi
c0023972:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0023978:	89 d9                	mov    ecx,ebx
c002397a:	09 c1                	or     ecx,eax
c002397c:	0f 84 9e 00 00 00    	je     c0023a20 <pow+0xf0>
c0023982:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0023986:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002398a:	81 ff 00 00 f0 3f    	cmp    edi,0x3ff00000
c0023990:	75 3e                	jne    c00239d0 <pow+0xa0>
c0023992:	85 ed                	test   ebp,ebp
c0023994:	75 3a                	jne    c00239d0 <pow+0xa0>
c0023996:	d9 e8                	fld1   
c0023998:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002399c:	eb 02                	jmp    c00239a0 <pow+0x70>
c002399e:	dd d8                	fstp   st(0)
c00239a0:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00239a4:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c00239ab:	8b b4 24 90 00 00 00 	mov    esi,DWORD PTR [esp+0x90]
c00239b2:	8b bc 24 94 00 00 00 	mov    edi,DWORD PTR [esp+0x94]
c00239b9:	8b ac 24 98 00 00 00 	mov    ebp,DWORD PTR [esp+0x98]
c00239c0:	81 c4 9c 00 00 00    	add    esp,0x9c
c00239c6:	c3                   	ret    
c00239c7:	89 f6                	mov    esi,esi
c00239c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00239d0:	89 fa                	mov    edx,edi
c00239d2:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00239d8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00239dc:	81 fa 00 00 f0 7f    	cmp    edx,0x7ff00000
c00239e2:	7f 1c                	jg     c0023a00 <pow+0xd0>
c00239e4:	0f 94 c1             	sete   cl
c00239e7:	85 ed                	test   ebp,ebp
c00239e9:	0f 95 c2             	setne  dl
c00239ec:	84 ca                	test   dl,cl
c00239ee:	75 10                	jne    c0023a00 <pow+0xd0>
c00239f0:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c00239f6:	7f 08                	jg     c0023a00 <pow+0xd0>
c00239f8:	75 36                	jne    c0023a30 <pow+0x100>
c00239fa:	85 c0                	test   eax,eax
c00239fc:	74 32                	je     c0023a30 <pow+0x100>
c00239fe:	66 90                	xchg   ax,ax
c0023a00:	d9 ee                	fldz   
c0023a02:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023a06:	d8 c1                	fadd   st,st(1)
c0023a08:	d9 c9                	fxch   st(1)
c0023a0a:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0023a0e:	de c1                	faddp  st(1),st
c0023a10:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023a14:	eb 8a                	jmp    c00239a0 <pow+0x70>
c0023a16:	8d 76 00             	lea    esi,[esi+0x0]
c0023a19:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023a20:	d9 e8                	fld1   
c0023a22:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023a26:	e9 75 ff ff ff       	jmp    c00239a0 <pow+0x70>
c0023a2b:	90                   	nop
c0023a2c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0023a30:	31 c9                	xor    ecx,ecx
c0023a32:	85 ff                	test   edi,edi
c0023a34:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0023a38:	0f 88 22 01 00 00    	js     c0023b60 <pow+0x230>
c0023a3e:	85 c0                	test   eax,eax
c0023a40:	75 5e                	jne    c0023aa0 <pow+0x170>
c0023a42:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c0023a48:	0f 84 72 01 00 00    	je     c0023bc0 <pow+0x290>
c0023a4e:	81 fb 00 00 f0 3f    	cmp    ebx,0x3ff00000
c0023a54:	0f 84 b6 01 00 00    	je     c0023c10 <pow+0x2e0>
c0023a5a:	81 fe 00 00 00 40    	cmp    esi,0x40000000
c0023a60:	0f 84 38 07 00 00    	je     c002419e <pow+0x86e>
c0023a66:	81 fe 00 00 08 40    	cmp    esi,0x40080000
c0023a6c:	0f 84 33 08 00 00    	je     c00242a5 <pow+0x975>
c0023a72:	81 fe 00 00 10 40    	cmp    esi,0x40100000
c0023a78:	0f 84 4f 08 00 00    	je     c00242cd <pow+0x99d>
c0023a7e:	81 fe 00 00 e0 3f    	cmp    esi,0x3fe00000
c0023a84:	75 1a                	jne    c0023aa0 <pow+0x170>
c0023a86:	89 f8                	mov    eax,edi
c0023a88:	f7 d0                	not    eax
c0023a8a:	c1 e8 1f             	shr    eax,0x1f
c0023a8d:	84 c0                	test   al,al
c0023a8f:	0f 85 f1 08 00 00    	jne    c0024386 <pow+0xa56>
c0023a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0023a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023aa0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023aa4:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023aa7:	e8 94 15 00 00       	call   c0025040 <fabs>
c0023aac:	85 ed                	test   ebp,ebp
c0023aae:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023ab2:	75 1e                	jne    c0023ad2 <pow+0x1a2>
c0023ab4:	89 f8                	mov    eax,edi
c0023ab6:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0023abb:	3d 00 00 f0 3f       	cmp    eax,0x3ff00000
c0023ac0:	0f 84 33 06 00 00    	je     c00240f9 <pow+0x7c9>
c0023ac6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023aca:	85 c0                	test   eax,eax
c0023acc:	0f 84 27 06 00 00    	je     c00240f9 <pow+0x7c9>
c0023ad2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0023ad6:	89 f8                	mov    eax,edi
c0023ad8:	c1 e8 1f             	shr    eax,0x1f
c0023adb:	48                   	dec    eax
c0023adc:	09 c1                	or     ecx,eax
c0023ade:	0f 84 49 01 00 00    	je     c0023c2d <pow+0x2fd>
c0023ae4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0023ae8:	d9 ee                	fldz   
c0023aea:	49                   	dec    ecx
c0023aeb:	09 c1                	or     ecx,eax
c0023aed:	0f 85 4b 01 00 00    	jne    c0023c3e <pow+0x30e>
c0023af3:	d9 e0                	fchs   
c0023af5:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0023af9:	d9 05 dc bd 02 c0    	fld    DWORD PTR ds:0xc002bddc
c0023aff:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0023b03:	db 2d 30 be 02 c0    	fld    TBYTE PTR ds:0xc002be30
c0023b09:	db 2d 40 be 02 c0    	fld    TBYTE PTR ds:0xc002be40
c0023b0f:	d9 e8                	fld1   
c0023b11:	d9 e0                	fchs   
c0023b13:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c0023b17:	81 fb 00 00 e0 41    	cmp    ebx,0x41e00000
c0023b1d:	0f 8e 40 01 00 00    	jle    c0023c63 <pow+0x333>
c0023b23:	81 fb 00 00 f0 43    	cmp    ebx,0x43f00000
c0023b29:	0f 8e 93 06 00 00    	jle    c00241c2 <pow+0x892>
c0023b2f:	dd d8                	fstp   st(0)
c0023b31:	dd d8                	fstp   st(0)
c0023b33:	81 7c 24 30 ff ff ef 3f 	cmp    DWORD PTR [esp+0x30],0x3fefffff
c0023b3b:	0f 8f c9 07 00 00    	jg     c002430a <pow+0x9da>
c0023b41:	85 f6                	test   esi,esi
c0023b43:	0f 88 94 08 00 00    	js     c00243dd <pow+0xaad>
c0023b49:	d9 ee                	fldz   
c0023b4b:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023b4f:	e9 4c fe ff ff       	jmp    c00239a0 <pow+0x70>
c0023b54:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0023b5a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0023b60:	81 fb ff ff 3f 43    	cmp    ebx,0x433fffff
c0023b66:	0f 8f 94 00 00 00    	jg     c0023c00 <pow+0x2d0>
c0023b6c:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c0023b72:	0f 8e c6 fe ff ff    	jle    c0023a3e <pow+0x10e>
c0023b78:	89 d9                	mov    ecx,ebx
c0023b7a:	c1 f9 14             	sar    ecx,0x14
c0023b7d:	81 e9 ff 03 00 00    	sub    ecx,0x3ff
c0023b83:	83 f9 14             	cmp    ecx,0x14
c0023b86:	0f 8e e5 06 00 00    	jle    c0024271 <pow+0x941>
c0023b8c:	ba 34 00 00 00       	mov    edx,0x34
c0023b91:	29 ca                	sub    edx,ecx
c0023b93:	89 d1                	mov    ecx,edx
c0023b95:	89 c2                	mov    edx,eax
c0023b97:	d3 ea                	shr    edx,cl
c0023b99:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023b9d:	d3 e2                	shl    edx,cl
c0023b9f:	39 c2                	cmp    edx,eax
c0023ba1:	0f 85 97 fe ff ff    	jne    c0023a3e <pow+0x10e>
c0023ba7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0023bab:	b9 02 00 00 00       	mov    ecx,0x2
c0023bb0:	83 e2 01             	and    edx,0x1
c0023bb3:	29 d1                	sub    ecx,edx
c0023bb5:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0023bb9:	e9 80 fe ff ff       	jmp    c0023a3e <pow+0x10e>
c0023bbe:	66 90                	xchg   ax,ax
c0023bc0:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023bc4:	8d 87 00 00 10 c0    	lea    eax,[edi-0x3ff00000]
c0023bca:	09 e8                	or     eax,ebp
c0023bcc:	0f 84 61 05 00 00    	je     c0024133 <pow+0x803>
c0023bd2:	81 ff ff ff ef 3f    	cmp    edi,0x3fefffff
c0023bd8:	0f 8e 60 05 00 00    	jle    c002413e <pow+0x80e>
c0023bde:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023be2:	85 f6                	test   esi,esi
c0023be4:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023be8:	0f 89 b2 fd ff ff    	jns    c00239a0 <pow+0x70>
c0023bee:	e9 56 ff ff ff       	jmp    c0023b49 <pow+0x219>
c0023bf3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0023bf9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023c00:	ba 02 00 00 00       	mov    edx,0x2
c0023c05:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0023c09:	e9 30 fe ff ff       	jmp    c0023a3e <pow+0x10e>
c0023c0e:	66 90                	xchg   ax,ax
c0023c10:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023c14:	85 f6                	test   esi,esi
c0023c16:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c0023c1a:	0f 89 7e fd ff ff    	jns    c002399e <pow+0x6e>
c0023c20:	d9 e8                	fld1   
c0023c22:	de f1                	fdivrp st(1),st
c0023c24:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023c28:	e9 73 fd ff ff       	jmp    c00239a0 <pow+0x70>
c0023c2d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023c31:	d8 e0                	fsub   st,st(0)
c0023c33:	d8 f0                	fdiv   st,st(0)
c0023c35:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023c39:	e9 62 fd ff ff       	jmp    c00239a0 <pow+0x70>
c0023c3e:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0023c42:	d9 05 d8 bd 02 c0    	fld    DWORD PTR ds:0xc002bdd8
c0023c48:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0023c4c:	db 2d 10 be 02 c0    	fld    TBYTE PTR ds:0xc002be10
c0023c52:	db 2d 20 be 02 c0    	fld    TBYTE PTR ds:0xc002be20
c0023c58:	d9 e8                	fld1   
c0023c5a:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c0023c5e:	e9 b4 fe ff ff       	jmp    c0023b17 <pow+0x1e7>
c0023c63:	dd d8                	fstp   st(0)
c0023c65:	dd d8                	fstp   st(0)
c0023c67:	31 c0                	xor    eax,eax
c0023c69:	81 e7 00 00 f0 7f    	and    edi,0x7ff00000
c0023c6f:	75 1b                	jne    c0023c8c <pow+0x35c>
c0023c71:	d9 05 f0 bd 02 c0    	fld    DWORD PTR ds:0xc002bdf0
c0023c77:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0023c7b:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023c7f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0023c83:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0023c87:	b8 cb ff ff ff       	mov    eax,0xffffffcb
c0023c8c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023c90:	89 f9                	mov    ecx,edi
c0023c92:	81 e7 ff ff 0f 00    	and    edi,0xfffff
c0023c98:	c1 f9 14             	sar    ecx,0x14
c0023c9b:	8d 8c 08 01 fc ff ff 	lea    ecx,[eax+ecx*1-0x3ff]
c0023ca2:	89 f8                	mov    eax,edi
c0023ca4:	0d 00 00 f0 3f       	or     eax,0x3ff00000
c0023ca9:	81 ff 8e 98 03 00    	cmp    edi,0x3988e
c0023caf:	0f 8e f8 04 00 00    	jle    c00241ad <pow+0x87d>
c0023cb5:	81 ff 79 b6 0b 00    	cmp    edi,0xbb679
c0023cbb:	0f 8e 25 06 00 00    	jle    c00242e6 <pow+0x9b6>
c0023cc1:	d9 ee                	fldz   
c0023cc3:	41                   	inc    ecx
c0023cc4:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c0023cc8:	2d 00 00 10 00       	sub    eax,0x100000
c0023ccd:	31 d2                	xor    edx,edx
c0023ccf:	d9 ee                	fldz   
c0023cd1:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c0023cd5:	d9 e8                	fld1   
c0023cd7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023cdb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023cdf:	d1 f8                	sar    eax,1
c0023ce1:	31 f6                	xor    esi,esi
c0023ce3:	0d 00 00 00 20       	or     eax,0x20000000
c0023ce8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023cec:	8d 84 02 00 00 08 00 	lea    eax,[edx+eax*1+0x80000]
c0023cf3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0023cf7:	31 ff                	xor    edi,edi
c0023cf9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023cfd:	d9 c0                	fld    st(0)
c0023cff:	d8 e2                	fsub   st,st(2)
c0023d01:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023d05:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023d09:	d9 c1                	fld    st(1)
c0023d0b:	d8 c3                	fadd   st,st(3)
c0023d0d:	d8 3d 90 bd 02 c0    	fdivr  DWORD PTR ds:0xc002bd90
c0023d13:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023d17:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023d1b:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0023d1f:	d9 c0                	fld    st(0)
c0023d21:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0023d25:	de ca                	fmulp  st(2),st
c0023d27:	d9 c9                	fxch   st(1)
c0023d29:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023d2d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0023d31:	89 6c 24 34          	mov    DWORD PTR [esp+0x34],ebp
c0023d35:	31 ed                	xor    ebp,ebp
c0023d37:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0023d3b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0023d3f:	31 c0                	xor    eax,eax
c0023d41:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
c0023d45:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0023d49:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023d4d:	d9 c0                	fld    st(0)
c0023d4f:	d8 c9                	fmul   st,st(1)
c0023d51:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023d55:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023d59:	d9 c2                	fld    st(2)
c0023d5b:	d8 cc                	fmul   st,st(4)
c0023d5d:	de ed                	fsubp  st(5),st
c0023d5f:	d9 ca                	fxch   st(2)
c0023d61:	de e6                	fsubrp st(6),st
c0023d63:	d9 cc                	fxch   st(4)
c0023d65:	de e5                	fsubrp st(5),st
c0023d67:	d9 cc                	fxch   st(4)
c0023d69:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023d6d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023d71:	d8 c9                	fmul   st,st(1)
c0023d73:	de ea                	fsubp  st(2),st
c0023d75:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0023d79:	de ca                	fmulp  st(2),st
c0023d7b:	d9 c9                	fxch   st(1)
c0023d7d:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023d81:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023d85:	d9 c3                	fld    st(3)
c0023d87:	dc 0d 78 be 02 c0    	fmul   QWORD PTR ds:0xc002be78
c0023d8d:	dc 05 80 be 02 c0    	fadd   QWORD PTR ds:0xc002be80
c0023d93:	d8 cc                	fmul   st,st(4)
c0023d95:	dc 05 88 be 02 c0    	fadd   QWORD PTR ds:0xc002be88
c0023d9b:	d8 cc                	fmul   st,st(4)
c0023d9d:	dc 05 90 be 02 c0    	fadd   QWORD PTR ds:0xc002be90
c0023da3:	d8 cc                	fmul   st,st(4)
c0023da5:	dc 05 98 be 02 c0    	fadd   QWORD PTR ds:0xc002be98
c0023dab:	d8 cc                	fmul   st,st(4)
c0023dad:	dc 05 a0 be 02 c0    	fadd   QWORD PTR ds:0xc002bea0
c0023db3:	d9 cc                	fxch   st(4)
c0023db5:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0023db9:	d8 c8                	fmul   st,st(0)
c0023dbb:	de cc                	fmulp  st(4),st
c0023dbd:	d9 cb                	fxch   st(3)
c0023dbf:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023dc3:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023dc7:	d9 c1                	fld    st(1)
c0023dc9:	d8 c3                	fadd   st,st(3)
c0023dcb:	d8 cc                	fmul   st,st(4)
c0023dcd:	de c1                	faddp  st(1),st
c0023dcf:	d9 c1                	fld    st(1)
c0023dd1:	d8 ca                	fmul   st,st(2)
c0023dd3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023dd7:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023ddb:	d9 c9                	fxch   st(1)
c0023ddd:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023de1:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023de5:	d9 05 f4 bd 02 c0    	fld    DWORD PTR ds:0xc002bdf4
c0023deb:	d9 c2                	fld    st(2)
c0023ded:	d8 c1                	fadd   st,st(1)
c0023def:	d8 c2                	fadd   st,st(2)
c0023df1:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023df5:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0023df9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0023dfd:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023e01:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023e05:	31 c0                	xor    eax,eax
c0023e07:	dc cc                	fmul   st(4),st
c0023e09:	d9 cc                	fxch   st(4)
c0023e0b:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023e0f:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023e13:	d9 c9                	fxch   st(1)
c0023e15:	d8 ec                	fsubr  st,st(4)
c0023e17:	de e3                	fsubrp st(3),st
c0023e19:	d9 c9                	fxch   st(1)
c0023e1b:	de e2                	fsubrp st(2),st
c0023e1d:	d9 c9                	fxch   st(1)
c0023e1f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023e23:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023e27:	de cb                	fmulp  st(3),st
c0023e29:	d9 cb                	fxch   st(3)
c0023e2b:	de c9                	fmulp  st(1),st
c0023e2d:	de c1                	faddp  st(1),st
c0023e2f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023e33:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023e37:	d9 c1                	fld    st(1)
c0023e39:	d8 c1                	fadd   st,st(1)
c0023e3b:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023e3f:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0023e43:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0023e47:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023e4b:	d9 c0                	fld    st(0)
c0023e4d:	d8 0d f8 bd 02 c0    	fmul   DWORD PTR ds:0xc002bdf8
c0023e53:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023e57:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023e5b:	d9 cb                	fxch   st(3)
c0023e5d:	d8 e9                	fsubr  st,st(1)
c0023e5f:	de ea                	fsubp  st(2),st
c0023e61:	d9 c9                	fxch   st(1)
c0023e63:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023e67:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023e6b:	dc 0d a8 be 02 c0    	fmul   QWORD PTR ds:0xc002bea8
c0023e71:	d9 c9                	fxch   st(1)
c0023e73:	dc 0d b0 be 02 c0    	fmul   QWORD PTR ds:0xc002beb0
c0023e79:	de c1                	faddp  st(1),st
c0023e7b:	db 6c 24 58          	fld    TBYTE PTR [esp+0x58]
c0023e7f:	de c1                	faddp  st(1),st
c0023e81:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023e85:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0023e89:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023e8d:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0023e91:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023e95:	d9 c2                	fld    st(2)
c0023e97:	d8 c2                	fadd   st,st(2)
c0023e99:	db 6c 24 68          	fld    TBYTE PTR [esp+0x68]
c0023e9d:	dc c1                	fadd   st(1),st
c0023e9f:	d9 c9                	fxch   st(1)
c0023ea1:	d8 c2                	fadd   st,st(2)
c0023ea3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023ea7:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0023eab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0023eaf:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023eb3:	dc e2                	fsubr  st(2),st
c0023eb5:	d9 ca                	fxch   st(2)
c0023eb7:	de e1                	fsubrp st(1),st
c0023eb9:	de e3                	fsubrp st(3),st
c0023ebb:	d9 ca                	fxch   st(2)
c0023ebd:	de e9                	fsubp  st(1),st
c0023ebf:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023ec3:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023ec7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023ecb:	31 db                	xor    ebx,ebx
c0023ecd:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0023ed1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0023ed5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023ed9:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023edd:	d9 c0                	fld    st(0)
c0023edf:	d8 e2                	fsub   st,st(2)
c0023ee1:	d8 cc                	fmul   st,st(4)
c0023ee3:	d9 c9                	fxch   st(1)
c0023ee5:	de cb                	fmulp  st(3),st
c0023ee7:	de c2                	faddp  st(2),st
c0023ee9:	d9 c9                	fxch   st(1)
c0023eeb:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023eef:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023ef3:	d9 ca                	fxch   st(2)
c0023ef5:	de c9                	fmulp  st(1),st
c0023ef7:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023efb:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023eff:	d9 c1                	fld    st(1)
c0023f01:	d8 c1                	fadd   st,st(1)
c0023f03:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023f07:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0023f0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0023f0f:	81 fa ff ff 8f 40    	cmp    edx,0x408fffff
c0023f15:	89 d3                	mov    ebx,edx
c0023f17:	0f 8e 38 02 00 00    	jle    c0024155 <pow+0x825>
c0023f1d:	8d 8a 00 00 70 bf    	lea    ecx,[edx-0x40900000]
c0023f23:	09 c1                	or     ecx,eax
c0023f25:	0f 85 f6 03 00 00    	jne    c0024321 <pow+0x9f1>
c0023f2b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023f2f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0023f33:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023f37:	d8 e1                	fsub   st,st(1)
c0023f39:	d9 c2                	fld    st(2)
c0023f3b:	dc 05 b8 be 02 c0    	fadd   QWORD PTR ds:0xc002beb8
c0023f41:	df f1                	fcomip st,st(1)
c0023f43:	dd d8                	fstp   st(0)
c0023f45:	0f 87 2a 04 00 00    	ja     c0024375 <pow+0xa45>
c0023f4b:	89 d9                	mov    ecx,ebx
c0023f4d:	c1 f9 14             	sar    ecx,0x14
c0023f50:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0023f56:	81 e9 fe 03 00 00    	sub    ecx,0x3fe
c0023f5c:	b8 00 00 10 00       	mov    eax,0x100000
c0023f61:	d3 f8                	sar    eax,cl
c0023f63:	31 c9                	xor    ecx,ecx
c0023f65:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0023f69:	01 d8                	add    eax,ebx
c0023f6b:	be ff ff 0f 00       	mov    esi,0xfffff
c0023f70:	89 c2                	mov    edx,eax
c0023f72:	c1 fa 14             	sar    edx,0x14
c0023f75:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0023f7b:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0023f81:	88 d1                	mov    cl,dl
c0023f83:	d3 fe                	sar    esi,cl
c0023f85:	b9 14 00 00 00       	mov    ecx,0x14
c0023f8a:	f7 d6                	not    esi
c0023f8c:	29 d1                	sub    ecx,edx
c0023f8e:	21 c6                	and    esi,eax
c0023f90:	25 ff ff 0f 00       	and    eax,0xfffff
c0023f95:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0023f99:	0d 00 00 10 00       	or     eax,0x100000
c0023f9e:	d3 f8                	sar    eax,cl
c0023fa0:	85 db                	test   ebx,ebx
c0023fa2:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023fa6:	89 c1                	mov    ecx,eax
c0023fa8:	79 02                	jns    c0023fac <pow+0x67c>
c0023faa:	f7 d9                	neg    ecx
c0023fac:	de e9                	fsubp  st(1),st
c0023fae:	89 ce                	mov    esi,ecx
c0023fb0:	c1 e6 14             	shl    esi,0x14
c0023fb3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023fb7:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023fbb:	d9 c1                	fld    st(1)
c0023fbd:	d8 c1                	fadd   st,st(1)
c0023fbf:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023fc3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0023fc7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0023fcb:	31 c0                	xor    eax,eax
c0023fcd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023fd1:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023fd5:	d9 c0                	fld    st(0)
c0023fd7:	d8 0d fc bd 02 c0    	fmul   DWORD PTR ds:0xc002bdfc
c0023fdd:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023fe1:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023fe5:	d9 ca                	fxch   st(2)
c0023fe7:	d8 e9                	fsubr  st,st(1)
c0023fe9:	de eb                	fsubp  st(3),st
c0023feb:	d9 ca                	fxch   st(2)
c0023fed:	dc 0d c0 be 02 c0    	fmul   QWORD PTR ds:0xc002bec0
c0023ff3:	d9 ca                	fxch   st(2)
c0023ff5:	dc 0d c8 be 02 c0    	fmul   QWORD PTR ds:0xc002bec8
c0023ffb:	de c2                	faddp  st(2),st
c0023ffd:	d9 c9                	fxch   st(1)
c0023fff:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0024003:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0024007:	d9 c1                	fld    st(1)
c0024009:	d8 c1                	fadd   st,st(1)
c002400b:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002400f:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0024013:	d9 c0                	fld    st(0)
c0024015:	d8 c9                	fmul   st,st(1)
c0024017:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002401b:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002401f:	d9 c0                	fld    st(0)
c0024021:	dc 0d d0 be 02 c0    	fmul   QWORD PTR ds:0xc002bed0
c0024027:	dc 25 d8 be 02 c0    	fsub   QWORD PTR ds:0xc002bed8
c002402d:	d8 c9                	fmul   st,st(1)
c002402f:	dc 05 e0 be 02 c0    	fadd   QWORD PTR ds:0xc002bee0
c0024035:	d8 c9                	fmul   st,st(1)
c0024037:	dc 25 e8 be 02 c0    	fsub   QWORD PTR ds:0xc002bee8
c002403d:	d8 c9                	fmul   st,st(1)
c002403f:	dc 05 f0 be 02 c0    	fadd   QWORD PTR ds:0xc002bef0
c0024045:	de c9                	fmulp  st(1),st
c0024047:	d8 e9                	fsubr  st,st(1)
c0024049:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002404d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0024051:	d9 cb                	fxch   st(3)
c0024053:	d8 e9                	fsubr  st,st(1)
c0024055:	de ea                	fsubp  st(2),st
c0024057:	d9 c9                	fxch   st(1)
c0024059:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002405d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0024061:	d9 c1                	fld    st(1)
c0024063:	d8 cb                	fmul   st,st(3)
c0024065:	d9 cb                	fxch   st(3)
c0024067:	d8 25 00 be 02 c0    	fsub   DWORD PTR ds:0xc002be00
c002406d:	de fb                	fdivp  st(3),st
c002406f:	d9 c1                	fld    st(1)
c0024071:	d8 c9                	fmul   st,st(1)
c0024073:	de c1                	faddp  st(1),st
c0024075:	de ea                	fsubp  st(2),st
c0024077:	d9 c9                	fxch   st(1)
c0024079:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002407d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0024081:	de e1                	fsubrp st(1),st
c0024083:	d8 2d 90 bd 02 c0    	fsubr  DWORD PTR ds:0xc002bd90
c0024089:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002408d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0024091:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0024095:	89 d3                	mov    ebx,edx
c0024097:	01 f3                	add    ebx,esi
c0024099:	81 fb ff ff 0f 00    	cmp    ebx,0xfffff
c002409f:	0f 8e a7 02 00 00    	jle    c002434c <pow+0xa1c>
c00240a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00240a9:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00240ad:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00240b1:	db 6c 24 38          	fld    TBYTE PTR [esp+0x38]
c00240b5:	de c9                	fmulp  st(1),st
c00240b7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00240bb:	e9 e0 f8 ff ff       	jmp    c00239a0 <pow+0x70>
c00240c0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00240c4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00240c7:	e8 74 0f 00 00       	call   c0025040 <fabs>
c00240cc:	85 ed                	test   ebp,ebp
c00240ce:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00240d2:	0f 85 55 fb ff ff    	jne    c0023c2d <pow+0x2fd>
c00240d8:	89 f8                	mov    eax,edi
c00240da:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00240df:	3d 00 00 f0 3f       	cmp    eax,0x3ff00000
c00240e4:	74 0b                	je     c00240f1 <pow+0x7c1>
c00240e6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00240eb:	0f 85 3c fb ff ff    	jne    c0023c2d <pow+0x2fd>
c00240f1:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00240f9:	85 f6                	test   esi,esi
c00240fb:	79 0a                	jns    c0024107 <pow+0x7d7>
c00240fd:	d9 e8                	fld1   
c00240ff:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0024103:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024107:	85 ff                	test   edi,edi
c0024109:	0f 89 91 f8 ff ff    	jns    c00239a0 <pow+0x70>
c002410f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024113:	2d 00 00 f0 3f       	sub    eax,0x3ff00000
c0024118:	0b 44 24 38          	or     eax,DWORD PTR [esp+0x38]
c002411c:	0f 85 10 02 00 00    	jne    c0024332 <pow+0xa02>
c0024122:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024126:	d8 e0                	fsub   st,st(0)
c0024128:	d8 f0                	fdiv   st,st(0)
c002412a:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002412e:	e9 6d f8 ff ff       	jmp    c00239a0 <pow+0x70>
c0024133:	d9 e8                	fld1   
c0024135:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024139:	e9 62 f8 ff ff       	jmp    c00239a0 <pow+0x70>
c002413e:	85 f6                	test   esi,esi
c0024140:	0f 89 03 fa ff ff    	jns    c0023b49 <pow+0x219>
c0024146:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002414a:	d9 e0                	fchs   
c002414c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024150:	e9 4b f8 ff ff       	jmp    c00239a0 <pow+0x70>
c0024155:	89 d1                	mov    ecx,edx
c0024157:	81 e1 ff ff ff 7f    	and    ecx,0x7fffffff
c002415d:	81 f9 ff cb 90 40    	cmp    ecx,0x4090cbff
c0024163:	0f 8e 4f 01 00 00    	jle    c00242b8 <pow+0x988>
c0024169:	8d 8a 00 34 6f 3f    	lea    ecx,[edx+0x3f6f3400]
c002416f:	09 c1                	or     ecx,eax
c0024171:	0f 85 55 02 00 00    	jne    c00243cc <pow+0xa9c>
c0024177:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002417b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002417f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024183:	d8 e1                	fsub   st,st(1)
c0024185:	df f2                	fcomip st,st(2)
c0024187:	0f 82 be fd ff ff    	jb     c0023f4b <pow+0x61b>
c002418d:	dd d8                	fstp   st(0)
c002418f:	dd d8                	fstp   st(0)
c0024191:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0024195:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024199:	e9 02 f8 ff ff       	jmp    c00239a0 <pow+0x70>
c002419e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00241a2:	d8 c8                	fmul   st,st(0)
c00241a4:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00241a8:	e9 f3 f7 ff ff       	jmp    c00239a0 <pow+0x70>
c00241ad:	d9 ee                	fldz   
c00241af:	31 d2                	xor    edx,edx
c00241b1:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c00241b5:	d9 ee                	fldz   
c00241b7:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c00241bb:	d9 e8                	fld1   
c00241bd:	e9 15 fb ff ff       	jmp    c0023cd7 <pow+0x3a7>
c00241c2:	81 7c 24 30 fe ff ef 3f 	cmp    DWORD PTR [esp+0x30],0x3feffffe
c00241ca:	0f 8e 91 01 00 00    	jle    c0024361 <pow+0xa31>
c00241d0:	81 7c 24 30 00 00 f0 3f 	cmp    DWORD PTR [esp+0x30],0x3ff00000
c00241d8:	0f 8f da 01 00 00    	jg     c00243b8 <pow+0xa88>
c00241de:	dd d8                	fstp   st(0)
c00241e0:	dd d8                	fstp   st(0)
c00241e2:	d9 e8                	fld1   
c00241e4:	31 c0                	xor    eax,eax
c00241e6:	dc 6c 24 28          	fsubr  QWORD PTR [esp+0x28]
c00241ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00241ee:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00241f2:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00241f6:	d9 c0                	fld    st(0)
c00241f8:	d8 0d e8 bd 02 c0    	fmul   DWORD PTR ds:0xc002bde8
c00241fe:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0024202:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0024206:	d9 c1                	fld    st(1)
c0024208:	dc 0d 68 be 02 c0    	fmul   QWORD PTR ds:0xc002be68
c002420e:	d9 c2                	fld    st(2)
c0024210:	d8 0d ec bd 02 c0    	fmul   DWORD PTR ds:0xc002bdec
c0024216:	db 2d 50 be 02 c0    	fld    TBYTE PTR ds:0xc002be50
c002421c:	de e1                	fsubrp st(1),st
c002421e:	d8 cb                	fmul   st,st(3)
c0024220:	d8 2d 94 bd 02 c0    	fsubr  DWORD PTR ds:0xc002bd94
c0024226:	d9 cb                	fxch   st(3)
c0024228:	d8 c8                	fmul   st,st(0)
c002422a:	de cb                	fmulp  st(3),st
c002422c:	d9 ca                	fxch   st(2)
c002422e:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0024232:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0024236:	dc 0d 70 be 02 c0    	fmul   QWORD PTR ds:0xc002be70
c002423c:	de ea                	fsubp  st(2),st
c002423e:	d9 c9                	fxch   st(1)
c0024240:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0024244:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0024248:	d9 c1                	fld    st(1)
c002424a:	d8 c1                	fadd   st,st(1)
c002424c:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0024250:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0024254:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024258:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002425c:	dc e2                	fsubr  st(2),st
c002425e:	d9 c9                	fxch   st(1)
c0024260:	de e2                	fsubrp st(2),st
c0024262:	d9 c9                	fxch   st(1)
c0024264:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0024268:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002426c:	e9 56 fc ff ff       	jmp    c0023ec7 <pow+0x597>
c0024271:	85 c0                	test   eax,eax
c0024273:	0f 85 47 fe ff ff    	jne    c00240c0 <pow+0x790>
c0024279:	b8 14 00 00 00       	mov    eax,0x14
c002427e:	29 c8                	sub    eax,ecx
c0024280:	89 c1                	mov    ecx,eax
c0024282:	89 d8                	mov    eax,ebx
c0024284:	d3 f8                	sar    eax,cl
c0024286:	89 c2                	mov    edx,eax
c0024288:	d3 e2                	shl    edx,cl
c002428a:	39 da                	cmp    edx,ebx
c002428c:	0f 85 bc f7 ff ff    	jne    c0023a4e <pow+0x11e>
c0024292:	83 e0 01             	and    eax,0x1
c0024295:	b9 02 00 00 00       	mov    ecx,0x2
c002429a:	29 c1                	sub    ecx,eax
c002429c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00242a0:	e9 a9 f7 ff ff       	jmp    c0023a4e <pow+0x11e>
c00242a5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00242a9:	d9 c0                	fld    st(0)
c00242ab:	d8 c9                	fmul   st,st(1)
c00242ad:	de c9                	fmulp  st(1),st
c00242af:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00242b3:	e9 e8 f6 ff ff       	jmp    c00239a0 <pow+0x70>
c00242b8:	81 f9 00 00 e0 3f    	cmp    ecx,0x3fe00000
c00242be:	0f 8f 28 01 00 00    	jg     c00243ec <pow+0xabc>
c00242c4:	31 f6                	xor    esi,esi
c00242c6:	31 c9                	xor    ecx,ecx
c00242c8:	e9 fa fc ff ff       	jmp    c0023fc7 <pow+0x697>
c00242cd:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00242d1:	d8 c8                	fmul   st,st(0)
c00242d3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00242d7:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00242db:	d8 c8                	fmul   st,st(0)
c00242dd:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00242e1:	e9 ba f6 ff ff       	jmp    c00239a0 <pow+0x70>
c00242e6:	d9 05 e0 bd 02 c0    	fld    DWORD PTR ds:0xc002bde0
c00242ec:	ba 00 00 04 00       	mov    edx,0x40000
c00242f1:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c00242f5:	dd 05 60 be 02 c0    	fld    QWORD PTR ds:0xc002be60
c00242fb:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c00242ff:	d9 05 e4 bd 02 c0    	fld    DWORD PTR ds:0xc002bde4
c0024305:	e9 cd f9 ff ff       	jmp    c0023cd7 <pow+0x3a7>
c002430a:	85 f6                	test   esi,esi
c002430c:	0f 8e 37 f8 ff ff    	jle    c0023b49 <pow+0x219>
c0024312:	d9 05 d8 bd 02 c0    	fld    DWORD PTR ds:0xc002bdd8
c0024318:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002431c:	e9 7f f6 ff ff       	jmp    c00239a0 <pow+0x70>
c0024321:	dd d8                	fstp   st(0)
c0024323:	dd d8                	fstp   st(0)
c0024325:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024329:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002432d:	e9 6e f6 ff ff       	jmp    c00239a0 <pow+0x70>
c0024332:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0024337:	0f 85 63 f6 ff ff    	jne    c00239a0 <pow+0x70>
c002433d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024341:	d9 e0                	fchs   
c0024343:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024347:	e9 54 f6 ff ff       	jmp    c00239a0 <pow+0x70>
c002434c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0024350:	89 04 24             	mov    DWORD PTR [esp],eax
c0024353:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0024357:	e8 c0 13 00 00       	call   c002571c <ldexp>
c002435c:	e9 50 fd ff ff       	jmp    c00240b1 <pow+0x781>
c0024361:	85 f6                	test   esi,esi
c0024363:	0f 99 c0             	setns  al
c0024366:	84 c0                	test   al,al
c0024368:	db c9                	fcmovne st,st(1)
c002436a:	dd d9                	fstp   st(1)
c002436c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024370:	e9 2b f6 ff ff       	jmp    c00239a0 <pow+0x70>
c0024375:	dd d8                	fstp   st(0)
c0024377:	dd d8                	fstp   st(0)
c0024379:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002437d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024381:	e9 1a f6 ff ff       	jmp    c00239a0 <pow+0x70>
c0024386:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c002438d:	8b b4 24 90 00 00 00 	mov    esi,DWORD PTR [esp+0x90]
c0024394:	8b bc 24 94 00 00 00 	mov    edi,DWORD PTR [esp+0x94]
c002439b:	8b ac 24 98 00 00 00 	mov    ebp,DWORD PTR [esp+0x98]
c00243a2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00243a6:	dd 9c 24 a0 00 00 00 	fstp   QWORD PTR [esp+0xa0]
c00243ad:	81 c4 9c 00 00 00    	add    esp,0x9c
c00243b3:	e9 d8 12 00 00       	jmp    c0025690 <sqrt>
c00243b8:	85 f6                	test   esi,esi
c00243ba:	0f 9e c0             	setle  al
c00243bd:	84 c0                	test   al,al
c00243bf:	db c9                	fcmovne st,st(1)
c00243c1:	dd d9                	fstp   st(1)
c00243c3:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00243c7:	e9 d4 f5 ff ff       	jmp    c00239a0 <pow+0x70>
c00243cc:	dd d8                	fstp   st(0)
c00243ce:	dd d8                	fstp   st(0)
c00243d0:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c00243d4:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00243d8:	e9 c3 f5 ff ff       	jmp    c00239a0 <pow+0x70>
c00243dd:	d9 05 d8 bd 02 c0    	fld    DWORD PTR ds:0xc002bdd8
c00243e3:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00243e7:	e9 b4 f5 ff ff       	jmp    c00239a0 <pow+0x70>
c00243ec:	c1 f9 14             	sar    ecx,0x14
c00243ef:	e9 62 fb ff ff       	jmp    c0023f56 <pow+0x626>
c00243f4:	66 90                	xchg   ax,ax
c00243f6:	66 90                	xchg   ax,ax
c00243f8:	66 90                	xchg   ax,ax
c00243fa:	66 90                	xchg   ax,ax
c00243fc:	66 90                	xchg   ax,ax
c00243fe:	66 90                	xchg   ax,ax

c0024400 <sinh>:
c0024400:	53                   	push   ebx
c0024401:	83 ec 38             	sub    esp,0x38
c0024404:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0024408:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c002440c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024410:	89 c3                	mov    ebx,eax
c0024412:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024418:	81 fb ff ff ef 7f    	cmp    ebx,0x7fefffff
c002441e:	0f 8f ec 00 00 00    	jg     c0024510 <sinh+0x110>
c0024424:	dd d8                	fstp   st(0)
c0024426:	d9 e8                	fld1   
c0024428:	85 c0                	test   eax,eax
c002442a:	0f 88 90 00 00 00    	js     c00244c0 <sinh+0xc0>
c0024430:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c0024436:	d9 05 94 bd 02 c0    	fld    DWORD PTR ds:0xc002bd94
c002443c:	0f 8f 8e 00 00 00    	jg     c00244d0 <sinh+0xd0>
c0024442:	dd d9                	fstp   st(1)
c0024444:	eb 0c                	jmp    c0024452 <sinh+0x52>
c0024446:	8d 76 00             	lea    esi,[esi+0x0]
c0024449:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024450:	dd d9                	fstp   st(1)
c0024452:	81 fb ff ff 2f 3e    	cmp    ebx,0x3e2fffff
c0024458:	0f 8f d2 00 00 00    	jg     c0024530 <sinh+0x130>
c002445e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024462:	d9 e8                	fld1   
c0024464:	d9 c1                	fld    st(1)
c0024466:	dc 05 00 bf 02 c0    	fadd   QWORD PTR ds:0xc002bf00
c002446c:	df f1                	fcomip st,st(1)
c002446e:	dd d8                	fstp   st(0)
c0024470:	77 3e                	ja     c00244b0 <sinh+0xb0>
c0024472:	dd d8                	fstp   st(0)
c0024474:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0024478:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002447c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002447f:	e8 bc 0b 00 00       	call   c0025040 <fabs>
c0024484:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024487:	e8 24 07 00 00       	call   c0024bb0 <expm1>
c002448c:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0024490:	d9 c1                	fld    st(1)
c0024492:	d8 c2                	fadd   st,st(2)
c0024494:	d9 c2                	fld    st(2)
c0024496:	d8 cb                	fmul   st,st(3)
c0024498:	d9 cb                	fxch   st(3)
c002449a:	d8 05 90 bd 02 c0    	fadd   DWORD PTR ds:0xc002bd90
c00244a0:	de fb                	fdivp  st(3),st
c00244a2:	de e2                	fsubrp st(2),st
c00244a4:	de c9                	fmulp  st(1),st
c00244a6:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00244aa:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00244ae:	eb 02                	jmp    c00244b2 <sinh+0xb2>
c00244b0:	dd d9                	fstp   st(1)
c00244b2:	83 c4 38             	add    esp,0x38
c00244b5:	5b                   	pop    ebx
c00244b6:	c3                   	ret    
c00244b7:	89 f6                	mov    esi,esi
c00244b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00244c0:	d9 e0                	fchs   
c00244c2:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c00244c8:	d9 05 f8 be 02 c0    	fld    DWORD PTR ds:0xc002bef8
c00244ce:	7e 80                	jle    c0024450 <sinh+0x50>
c00244d0:	81 fb 41 2e 86 40    	cmp    ebx,0x40862e41
c00244d6:	0f 8e a4 00 00 00    	jle    c0024580 <sinh+0x180>
c00244dc:	dd d8                	fstp   st(0)
c00244de:	81 fb ce 33 86 40    	cmp    ebx,0x408633ce
c00244e4:	0f 8e c6 00 00 00    	jle    c00245b0 <sinh+0x1b0>
c00244ea:	dd d8                	fstp   st(0)
c00244ec:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00244f0:	dc 0d 00 bf 02 c0    	fmul   QWORD PTR ds:0xc002bf00
c00244f6:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00244fa:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00244fe:	83 c4 38             	add    esp,0x38
c0024501:	5b                   	pop    ebx
c0024502:	c3                   	ret    
c0024503:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024510:	d9 c0                	fld    st(0)
c0024512:	de c1                	faddp  st(1),st
c0024514:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024518:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002451c:	83 c4 38             	add    esp,0x38
c002451f:	5b                   	pop    ebx
c0024520:	c3                   	ret    
c0024521:	eb 0d                	jmp    c0024530 <sinh+0x130>
c0024523:	90                   	nop
c0024524:	90                   	nop
c0024525:	90                   	nop
c0024526:	90                   	nop
c0024527:	90                   	nop
c0024528:	90                   	nop
c0024529:	90                   	nop
c002452a:	90                   	nop
c002452b:	90                   	nop
c002452c:	90                   	nop
c002452d:	90                   	nop
c002452e:	90                   	nop
c002452f:	90                   	nop
c0024530:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0024534:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024538:	dd 1c 24             	fstp   QWORD PTR [esp]
c002453b:	e8 00 0b 00 00       	call   c0025040 <fabs>
c0024540:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024543:	e8 68 06 00 00       	call   c0024bb0 <expm1>
c0024548:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c002454e:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0024552:	0f 8e 38 ff ff ff    	jle    c0024490 <sinh+0x90>
c0024558:	d9 c1                	fld    st(1)
c002455a:	d8 05 90 bd 02 c0    	fadd   DWORD PTR ds:0xc002bd90
c0024560:	d8 fa                	fdivr  st,st(2)
c0024562:	de c2                	faddp  st(2),st
c0024564:	de c9                	fmulp  st(1),st
c0024566:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002456a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002456e:	83 c4 38             	add    esp,0x38
c0024571:	5b                   	pop    ebx
c0024572:	c3                   	ret    
c0024573:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024579:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024580:	dd d9                	fstp   st(1)
c0024582:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0024586:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002458a:	dd 1c 24             	fstp   QWORD PTR [esp]
c002458d:	e8 ae 0a 00 00       	call   c0025040 <fabs>
c0024592:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024595:	e8 5e 10 00 00       	call   c00255f8 <exp>
c002459a:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c002459e:	de c9                	fmulp  st(1),st
c00245a0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00245a4:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00245a8:	e9 05 ff ff ff       	jmp    c00244b2 <sinh+0xb2>
c00245ad:	8d 76 00             	lea    esi,[esi+0x0]
c00245b0:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c00245b4:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00245b8:	dd 1c 24             	fstp   QWORD PTR [esp]
c00245bb:	e8 80 0a 00 00       	call   c0025040 <fabs>
c00245c0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00245c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00245c9:	dd 1c 24             	fstp   QWORD PTR [esp]
c00245cc:	e8 1f 00 00 00       	call   c00245f0 <__ldexp_exp>
c00245d1:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c00245d5:	de c9                	fmulp  st(1),st
c00245d7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00245db:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00245df:	e9 ce fe ff ff       	jmp    c00244b2 <sinh+0xb2>
c00245e4:	66 90                	xchg   ax,ax
c00245e6:	66 90                	xchg   ax,ax
c00245e8:	66 90                	xchg   ax,ax
c00245ea:	66 90                	xchg   ax,ax
c00245ec:	66 90                	xchg   ax,ax
c00245ee:	66 90                	xchg   ax,ax

c00245f0 <__ldexp_exp>:
c00245f0:	53                   	push   ebx
c00245f1:	83 ec 28             	sub    esp,0x28
c00245f4:	dd 05 08 bf 02 c0    	fld    QWORD PTR ds:0xc002bf08
c00245fa:	dc 6c 24 30          	fsubr  QWORD PTR [esp+0x30]
c00245fe:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024601:	e8 f2 0f 00 00       	call   c00255f8 <exp>
c0024606:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c002460a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002460e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024612:	89 da                	mov    edx,ebx
c0024614:	89 d8                	mov    eax,ebx
c0024616:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002461a:	c1 e8 14             	shr    eax,0x14
c002461d:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0024623:	81 ca 00 00 e0 7f    	or     edx,0x7fe00000
c0024629:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002462d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0024631:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024635:	8d 84 02 08 03 00 00 	lea    eax,[edx+eax*1+0x308]
c002463c:	c1 e0 14             	shl    eax,0x14
c002463f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024643:	31 c0                	xor    eax,eax
c0024645:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024649:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002464d:	de c9                	fmulp  st(1),st
c002464f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024653:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024657:	83 c4 28             	add    esp,0x28
c002465a:	5b                   	pop    ebx
c002465b:	c3                   	ret    
c002465c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0024660 <__ldexp_cexp>:
c0024660:	57                   	push   edi
c0024661:	56                   	push   esi
c0024662:	53                   	push   ebx
c0024663:	83 ec 60             	sub    esp,0x60
c0024666:	dd 44 24 7c          	fld    QWORD PTR [esp+0x7c]
c002466a:	dd 44 24 74          	fld    QWORD PTR [esp+0x74]
c002466e:	dd 14 24             	fst    QWORD PTR [esp]
c0024671:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0024675:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0024679:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c002467d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024681:	e8 6a 0f 00 00       	call   c00255f0 <creal>
c0024686:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c002468a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c002468e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024691:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024695:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024699:	e8 42 0f 00 00       	call   c00255e0 <cimag>
c002469e:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00246a2:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00246a6:	dc 25 08 bf 02 c0    	fsub   QWORD PTR ds:0xc002bf08
c00246ac:	dd 1c 24             	fstp   QWORD PTR [esp]
c00246af:	e8 44 0f 00 00       	call   c00255f8 <exp>
c00246b4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00246b8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00246bc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00246c0:	89 fa                	mov    edx,edi
c00246c2:	89 f8                	mov    eax,edi
c00246c4:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00246c8:	c1 e8 14             	shr    eax,0x14
c00246cb:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c00246d1:	81 ca 00 00 e0 7f    	or     edx,0x7fe00000
c00246d7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00246db:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c00246e2:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00246e6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00246ea:	8d 94 02 09 ff ff ff 	lea    edx,[edx+eax*1-0xf7]
c00246f1:	89 d1                	mov    ecx,edx
c00246f3:	c1 e9 1f             	shr    ecx,0x1f
c00246f6:	01 d1                	add    ecx,edx
c00246f8:	d1 f9                	sar    ecx,1
c00246fa:	8d 81 ff 03 00 00    	lea    eax,[ecx+0x3ff]
c0024700:	29 ca                	sub    edx,ecx
c0024702:	c1 e0 14             	shl    eax,0x14
c0024705:	81 c2 ff 03 00 00    	add    edx,0x3ff
c002470b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002470f:	c1 e2 14             	shl    edx,0x14
c0024712:	31 c0                	xor    eax,eax
c0024714:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024718:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002471c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0024720:	31 d2                	xor    edx,edx
c0024722:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0024726:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c002472a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002472e:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0024732:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024736:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024739:	e8 12 03 00 00       	call   c0024a50 <cos>
c002473e:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0024742:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024746:	db 7c 24 48          	fstp   TBYTE PTR [esp+0x48]
c002474a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c002474e:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c0024752:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0024756:	db 7c 24 20          	fstp   TBYTE PTR [esp+0x20]
c002475a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002475e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024761:	e8 fa 0b 00 00       	call   c0025360 <sin>
c0024766:	89 d8                	mov    eax,ebx
c0024768:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002476c:	db 6c 24 48          	fld    TBYTE PTR [esp+0x48]
c0024770:	dc c9                	fmul   st(1),st
c0024772:	db 6c 24 38          	fld    TBYTE PTR [esp+0x38]
c0024776:	dc ca                	fmul   st(2),st
c0024778:	db 6c 24 20          	fld    TBYTE PTR [esp+0x20]
c002477c:	dc cb                	fmul   st(3),st
c002477e:	d9 cb                	fxch   st(3)
c0024780:	dd 1b                	fstp   QWORD PTR [ebx]
c0024782:	d9 cb                	fxch   st(3)
c0024784:	de c9                	fmulp  st(1),st
c0024786:	de ca                	fmulp  st(2),st
c0024788:	de c9                	fmulp  st(1),st
c002478a:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c002478d:	83 c4 60             	add    esp,0x60
c0024790:	5b                   	pop    ebx
c0024791:	5e                   	pop    esi
c0024792:	5f                   	pop    edi
c0024793:	c2 04 00             	ret    0x4
c0024796:	66 90                	xchg   ax,ax
c0024798:	66 90                	xchg   ax,ax
c002479a:	66 90                	xchg   ax,ax
c002479c:	66 90                	xchg   ax,ax
c002479e:	66 90                	xchg   ax,ax

c00247a0 <atan>:
c00247a0:	56                   	push   esi
c00247a1:	53                   	push   ebx
c00247a2:	83 ec 24             	sub    esp,0x24
c00247a5:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00247a9:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00247ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00247b1:	89 f3                	mov    ebx,esi
c00247b3:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00247b9:	81 fb ff ff 0f 44    	cmp    ebx,0x440fffff
c00247bf:	7e 5f                	jle    c0024820 <atan+0x80>
c00247c1:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c00247c7:	7f 0a                	jg     c00247d3 <atan+0x33>
c00247c9:	75 25                	jne    c00247f0 <atan+0x50>
c00247cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247cf:	85 c0                	test   eax,eax
c00247d1:	74 1d                	je     c00247f0 <atan+0x50>
c00247d3:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00247d7:	d8 c0                	fadd   st,st(0)
c00247d9:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00247dd:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00247e1:	83 c4 24             	add    esp,0x24
c00247e4:	5b                   	pop    ebx
c00247e5:	5e                   	pop    esi
c00247e6:	c3                   	ret    
c00247e7:	89 f6                	mov    esi,esi
c00247e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00247f0:	85 f6                	test   esi,esi
c00247f2:	dd 05 38 bf 02 c0    	fld    QWORD PTR ds:0xc002bf38
c00247f8:	0f 8e 22 01 00 00    	jle    c0024920 <atan+0x180>
c00247fe:	dc 05 38 bd 02 c0    	fadd   QWORD PTR ds:0xc002bd38
c0024804:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024808:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002480c:	83 c4 24             	add    esp,0x24
c002480f:	5b                   	pop    ebx
c0024810:	5e                   	pop    esi
c0024811:	c3                   	ret    
c0024812:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024819:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024820:	81 fb ff ff db 3f    	cmp    ebx,0x3fdbffff
c0024826:	0f 8f 34 01 00 00    	jg     c0024960 <atan+0x1c0>
c002482c:	81 fb ff ff 3f 3e    	cmp    ebx,0x3e3fffff
c0024832:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024836:	0f 8e c4 00 00 00    	jle    c0024900 <atan+0x160>
c002483c:	eb 04                	jmp    c0024842 <atan+0xa2>
c002483e:	66 90                	xchg   ax,ax
c0024840:	dd d8                	fstp   st(0)
c0024842:	d9 ee                	fldz   
c0024844:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0024849:	d9 ee                	fldz   
c002484b:	d9 c2                	fld    st(2)
c002484d:	40                   	inc    eax
c002484e:	d8 cb                	fmul   st,st(3)
c0024850:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024854:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024858:	d9 c0                	fld    st(0)
c002485a:	d8 c9                	fmul   st,st(1)
c002485c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024860:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024864:	d9 c0                	fld    st(0)
c0024866:	dc 0d 68 bf 02 c0    	fmul   QWORD PTR ds:0xc002bf68
c002486c:	dc 05 70 bf 02 c0    	fadd   QWORD PTR ds:0xc002bf70
c0024872:	d8 c9                	fmul   st,st(1)
c0024874:	dc 05 78 bf 02 c0    	fadd   QWORD PTR ds:0xc002bf78
c002487a:	d8 c9                	fmul   st,st(1)
c002487c:	dc 05 80 bf 02 c0    	fadd   QWORD PTR ds:0xc002bf80
c0024882:	d8 c9                	fmul   st,st(1)
c0024884:	dc 05 88 bf 02 c0    	fadd   QWORD PTR ds:0xc002bf88
c002488a:	d8 c9                	fmul   st,st(1)
c002488c:	dc 05 90 bf 02 c0    	fadd   QWORD PTR ds:0xc002bf90
c0024892:	de ca                	fmulp  st(2),st
c0024894:	d9 c9                	fxch   st(1)
c0024896:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002489a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002489e:	d9 c1                	fld    st(1)
c00248a0:	dc 0d 98 bf 02 c0    	fmul   QWORD PTR ds:0xc002bf98
c00248a6:	dc 25 a0 bf 02 c0    	fsub   QWORD PTR ds:0xc002bfa0
c00248ac:	d8 ca                	fmul   st,st(2)
c00248ae:	dc 25 a8 bf 02 c0    	fsub   QWORD PTR ds:0xc002bfa8
c00248b4:	d8 ca                	fmul   st,st(2)
c00248b6:	dc 25 b0 bf 02 c0    	fsub   QWORD PTR ds:0xc002bfb0
c00248bc:	d8 ca                	fmul   st,st(2)
c00248be:	dc 25 b8 bf 02 c0    	fsub   QWORD PTR ds:0xc002bfb8
c00248c4:	de ca                	fmulp  st(2),st
c00248c6:	d9 c9                	fxch   st(1)
c00248c8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00248cc:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00248d0:	de c1                	faddp  st(1),st
c00248d2:	d8 cb                	fmul   st,st(3)
c00248d4:	74 6a                	je     c0024940 <atan+0x1a0>
c00248d6:	85 f6                	test   esi,esi
c00248d8:	de e2                	fsubrp st(2),st
c00248da:	d9 c9                	fxch   st(1)
c00248dc:	de e2                	fsubrp st(2),st
c00248de:	de e1                	fsubrp st(1),st
c00248e0:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00248e4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00248e8:	0f 89 f3 fe ff ff    	jns    c00247e1 <atan+0x41>
c00248ee:	d9 e0                	fchs   
c00248f0:	83 c4 24             	add    esp,0x24
c00248f3:	5b                   	pop    ebx
c00248f4:	5e                   	pop    esi
c00248f5:	c3                   	ret    
c00248f6:	8d 76 00             	lea    esi,[esi+0x0]
c00248f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024900:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024904:	d9 e8                	fld1   
c0024906:	d9 c2                	fld    st(2)
c0024908:	dc 05 a0 bd 02 c0    	fadd   QWORD PTR ds:0xc002bda0
c002490e:	df f1                	fcomip st,st(1)
c0024910:	dd d8                	fstp   st(0)
c0024912:	0f 86 28 ff ff ff    	jbe    c0024840 <atan+0xa0>
c0024918:	dd d9                	fstp   st(1)
c002491a:	e9 c2 fe ff ff       	jmp    c00247e1 <atan+0x41>
c002491f:	90                   	nop
c0024920:	dd 05 b8 bd 02 c0    	fld    QWORD PTR ds:0xc002bdb8
c0024926:	de e1                	fsubrp st(1),st
c0024928:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002492c:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024930:	e9 ac fe ff ff       	jmp    c00247e1 <atan+0x41>
c0024935:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024939:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024940:	dd da                	fstp   st(2)
c0024942:	dd d8                	fstp   st(0)
c0024944:	de e9                	fsubp  st(1),st
c0024946:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002494a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002494e:	83 c4 24             	add    esp,0x24
c0024951:	5b                   	pop    ebx
c0024952:	5e                   	pop    esi
c0024953:	c3                   	ret    
c0024954:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002495a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024960:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024964:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024967:	e8 d4 06 00 00       	call   c0025040 <fabs>
c002496c:	81 fb ff ff f2 3f    	cmp    ebx,0x3ff2ffff
c0024972:	7f 3c                	jg     c00249b0 <atan+0x210>
c0024974:	81 fb ff ff e5 3f    	cmp    ebx,0x3fe5ffff
c002497a:	0f 8f a0 00 00 00    	jg     c0024a20 <atan+0x280>
c0024980:	d9 c0                	fld    st(0)
c0024982:	31 c0                	xor    eax,eax
c0024984:	d8 c1                	fadd   st,st(1)
c0024986:	d8 25 90 bd 02 c0    	fsub   DWORD PTR ds:0xc002bd90
c002498c:	d9 c9                	fxch   st(1)
c002498e:	d8 05 00 be 02 c0    	fadd   DWORD PTR ds:0xc002be00
c0024994:	de f9                	fdivp  st(1),st
c0024996:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002499a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002499e:	dd 05 58 bf 02 c0    	fld    QWORD PTR ds:0xc002bf58
c00249a4:	dd 05 60 bf 02 c0    	fld    QWORD PTR ds:0xc002bf60
c00249aa:	e9 9c fe ff ff       	jmp    c002484b <atan+0xab>
c00249af:	90                   	nop
c00249b0:	81 fb ff 7f 03 40    	cmp    ebx,0x40037fff
c00249b6:	7f 38                	jg     c00249f0 <atan+0x250>
c00249b8:	d9 05 e4 bd 02 c0    	fld    DWORD PTR ds:0xc002bde4
c00249be:	b8 02 00 00 00       	mov    eax,0x2
c00249c3:	d9 c1                	fld    st(1)
c00249c5:	d8 e1                	fsub   st,st(1)
c00249c7:	d9 ca                	fxch   st(2)
c00249c9:	de c9                	fmulp  st(1),st
c00249cb:	d8 05 90 bd 02 c0    	fadd   DWORD PTR ds:0xc002bd90
c00249d1:	de f9                	fdivp  st(1),st
c00249d3:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00249d7:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00249db:	dd 05 48 bf 02 c0    	fld    QWORD PTR ds:0xc002bf48
c00249e1:	dd 05 50 bf 02 c0    	fld    QWORD PTR ds:0xc002bf50
c00249e7:	e9 5f fe ff ff       	jmp    c002484b <atan+0xab>
c00249ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00249f0:	d8 3d c0 bf 02 c0    	fdivr  DWORD PTR ds:0xc002bfc0
c00249f6:	b8 03 00 00 00       	mov    eax,0x3
c00249fb:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00249ff:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024a03:	dd 05 98 bd 02 c0    	fld    QWORD PTR ds:0xc002bd98
c0024a09:	dd 05 38 bd 02 c0    	fld    QWORD PTR ds:0xc002bd38
c0024a0f:	e9 37 fe ff ff       	jmp    c002484b <atan+0xab>
c0024a14:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024a1a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024a20:	d9 e8                	fld1   
c0024a22:	b8 01 00 00 00       	mov    eax,0x1
c0024a27:	d9 c1                	fld    st(1)
c0024a29:	d8 e1                	fsub   st,st(1)
c0024a2b:	d9 ca                	fxch   st(2)
c0024a2d:	de c1                	faddp  st(1),st
c0024a2f:	de f9                	fdivp  st(1),st
c0024a31:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024a35:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024a39:	dd 05 40 bf 02 c0    	fld    QWORD PTR ds:0xc002bf40
c0024a3f:	dd 05 a8 bd 02 c0    	fld    QWORD PTR ds:0xc002bda8
c0024a45:	e9 01 fe ff ff       	jmp    c002484b <atan+0xab>
c0024a4a:	66 90                	xchg   ax,ax
c0024a4c:	66 90                	xchg   ax,ax
c0024a4e:	66 90                	xchg   ax,ax

c0024a50 <cos>:
c0024a50:	83 ec 5c             	sub    esp,0x5c
c0024a53:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c0024a57:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c0024a5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0024a5f:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024a64:	3d fb 21 e9 3f       	cmp    eax,0x3fe921fb
c0024a69:	7f 55                	jg     c0024ac0 <cos+0x70>
c0024a6b:	3d 9d a0 46 3e       	cmp    eax,0x3e46a09d
c0024a70:	7f 2e                	jg     c0024aa0 <cos+0x50>
c0024a72:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c0024a76:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c0024a7b:	66 0d 00 0c          	or     ax,0xc00
c0024a7f:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c0024a84:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0024a88:	db 5c 24 30          	fistp  DWORD PTR [esp+0x30]
c0024a8c:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0024a90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024a94:	85 c0                	test   eax,eax
c0024a96:	0f 84 94 00 00 00    	je     c0024b30 <cos+0xe0>
c0024a9c:	eb 04                	jmp    c0024aa2 <cos+0x52>
c0024a9e:	66 90                	xchg   ax,ax
c0024aa0:	dd d8                	fstp   st(0)
c0024aa2:	d9 ee                	fldz   
c0024aa4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024aa8:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024aac:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024aaf:	e8 ac 11 00 00       	call   c0025c60 <__kernel_cos>
c0024ab4:	83 c4 5c             	add    esp,0x5c
c0024ab7:	c3                   	ret    
c0024ab8:	90                   	nop
c0024ab9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024ac0:	dd d8                	fstp   st(0)
c0024ac2:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0024ac7:	7e 17                	jle    c0024ae0 <cos+0x90>
c0024ac9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024acd:	d8 e0                	fsub   st,st(0)
c0024acf:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024ad3:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024ad7:	83 c4 5c             	add    esp,0x5c
c0024ada:	c3                   	ret    
c0024adb:	90                   	nop
c0024adc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024ae0:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024ae4:	8d 44 24 40          	lea    eax,[esp+0x40]
c0024ae8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024aec:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024aef:	e8 3c 0c 00 00       	call   c0025730 <__ieee754_rem_pio2>
c0024af4:	83 e0 03             	and    eax,0x3
c0024af7:	83 f8 01             	cmp    eax,0x1
c0024afa:	0f 84 80 00 00 00    	je     c0024b80 <cos+0x130>
c0024b00:	83 f8 02             	cmp    eax,0x2
c0024b03:	74 5b                	je     c0024b60 <cos+0x110>
c0024b05:	85 c0                	test   eax,eax
c0024b07:	74 37                	je     c0024b40 <cos+0xf0>
c0024b09:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024b0d:	b8 01 00 00 00       	mov    eax,0x1
c0024b12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024b16:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024b1a:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0024b1e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024b21:	e8 ba 1b 00 00       	call   c00266e0 <__kernel_sin>
c0024b26:	eb 8c                	jmp    c0024ab4 <cos+0x64>
c0024b28:	90                   	nop
c0024b29:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024b30:	d9 e8                	fld1   
c0024b32:	83 c4 5c             	add    esp,0x5c
c0024b35:	c3                   	ret    
c0024b36:	8d 76 00             	lea    esi,[esi+0x0]
c0024b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024b40:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024b44:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024b48:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0024b4c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024b4f:	e8 0c 11 00 00       	call   c0025c60 <__kernel_cos>
c0024b54:	e9 5b ff ff ff       	jmp    c0024ab4 <cos+0x64>
c0024b59:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024b60:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024b64:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024b68:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0024b6c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024b6f:	e8 ec 10 00 00       	call   c0025c60 <__kernel_cos>
c0024b74:	d9 e0                	fchs   
c0024b76:	e9 39 ff ff ff       	jmp    c0024ab4 <cos+0x64>
c0024b7b:	90                   	nop
c0024b7c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024b80:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024b84:	ba 01 00 00 00       	mov    edx,0x1
c0024b89:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0024b8d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024b91:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0024b95:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024b98:	e8 43 1b 00 00       	call   c00266e0 <__kernel_sin>
c0024b9d:	d9 e0                	fchs   
c0024b9f:	e9 10 ff ff ff       	jmp    c0024ab4 <cos+0x64>
c0024ba4:	66 90                	xchg   ax,ax
c0024ba6:	66 90                	xchg   ax,ax
c0024ba8:	66 90                	xchg   ax,ax
c0024baa:	66 90                	xchg   ax,ax
c0024bac:	66 90                	xchg   ax,ax
c0024bae:	66 90                	xchg   ax,ax

c0024bb0 <expm1>:
c0024bb0:	d9 05 d0 bf 02 c0    	fld    DWORD PTR ds:0xc002bfd0
c0024bb6:	83 ec 24             	sub    esp,0x24
c0024bb9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024bbd:	dd 14 24             	fst    QWORD PTR [esp]
c0024bc0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024bc4:	89 d0                	mov    eax,edx
c0024bc6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024bcb:	3d 79 68 43 40       	cmp    eax,0x40436879
c0024bd0:	0f 86 ea 00 00 00    	jbe    c0024cc0 <expm1+0x110>
c0024bd6:	dd d9                	fstp   st(1)
c0024bd8:	3d 41 2e 86 40       	cmp    eax,0x40862e41
c0024bdd:	76 51                	jbe    c0024c30 <expm1+0x80>
c0024bdf:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0024be4:	76 2a                	jbe    c0024c10 <expm1+0x60>
c0024be6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0024be9:	89 d1                	mov    ecx,edx
c0024beb:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0024bf1:	09 c1                	or     ecx,eax
c0024bf3:	0f 84 b7 03 00 00    	je     c0024fb0 <expm1+0x400>
c0024bf9:	d9 c0                	fld    st(0)
c0024bfb:	de c1                	faddp  st(1),st
c0024bfd:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024c01:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024c05:	e9 0a 02 00 00       	jmp    c0024e14 <expm1+0x264>
c0024c0a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024c10:	dd d8                	fstp   st(0)
c0024c12:	dd 05 e8 bf 02 c0    	fld    QWORD PTR ds:0xc002bfe8
c0024c18:	dd 04 24             	fld    QWORD PTR [esp]
c0024c1b:	df f1                	fcomip st,st(1)
c0024c1d:	dd d8                	fstp   st(0)
c0024c1f:	0f 87 cb 03 00 00    	ja     c0024ff0 <expm1+0x440>
c0024c25:	eb 0b                	jmp    c0024c32 <expm1+0x82>
c0024c27:	89 f6                	mov    esi,esi
c0024c29:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024c30:	dd d8                	fstp   st(0)
c0024c32:	85 d2                	test   edx,edx
c0024c34:	dd 04 24             	fld    QWORD PTR [esp]
c0024c37:	0f 88 e3 01 00 00    	js     c0024e20 <expm1+0x270>
c0024c3d:	d9 c0                	fld    st(0)
c0024c3f:	dc 0d 70 be 02 c0    	fmul   QWORD PTR ds:0xc002be70
c0024c45:	d9 05 94 bd 02 c0    	fld    DWORD PTR ds:0xc002bd94
c0024c4b:	d9 7c 24 16          	fnstcw WORD PTR [esp+0x16]
c0024c4f:	de c1                	faddp  st(1),st
c0024c51:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0024c56:	66 0d 00 0c          	or     ax,0xc00
c0024c5a:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0024c5f:	d9 6c 24 14          	fldcw  WORD PTR [esp+0x14]
c0024c63:	db 5c 24 10          	fistp  DWORD PTR [esp+0x10]
c0024c67:	d9 6c 24 16          	fldcw  WORD PTR [esp+0x16]
c0024c6b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024c6f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0024c72:	db 04 24             	fild   DWORD PTR [esp]
c0024c75:	d9 c0                	fld    st(0)
c0024c77:	dc 0d f8 bf 02 c0    	fmul   QWORD PTR ds:0xc002bff8
c0024c7d:	de ea                	fsubp  st(2),st
c0024c7f:	d9 c9                	fxch   st(1)
c0024c81:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024c85:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024c89:	d9 c9                	fxch   st(1)
c0024c8b:	dc 0d e0 bf 02 c0    	fmul   QWORD PTR ds:0xc002bfe0
c0024c91:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024c95:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024c99:	d9 c1                	fld    st(1)
c0024c9b:	d8 e1                	fsub   st,st(1)
c0024c9d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024ca0:	dd 04 24             	fld    QWORD PTR [esp]
c0024ca3:	dc ea                	fsub   st(2),st
c0024ca5:	d9 ca                	fxch   st(2)
c0024ca7:	de e1                	fsubrp st(1),st
c0024ca9:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024cad:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024cb1:	eb 2c                	jmp    c0024cdf <expm1+0x12f>
c0024cb3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024cb9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024cc0:	dd d8                	fstp   st(0)
c0024cc2:	3d 42 2e d6 3f       	cmp    eax,0x3fd62e42
c0024cc7:	dd 04 24             	fld    QWORD PTR [esp]
c0024cca:	0f 87 c0 01 00 00    	ja     c0024e90 <expm1+0x2e0>
c0024cd0:	31 c9                	xor    ecx,ecx
c0024cd2:	3d ff ff 8f 3c       	cmp    eax,0x3c8fffff
c0024cd7:	0f 86 f3 01 00 00    	jbe    c0024ed0 <expm1+0x320>
c0024cdd:	d9 c9                	fxch   st(1)
c0024cdf:	d9 05 94 bd 02 c0    	fld    DWORD PTR ds:0xc002bd94
c0024ce5:	85 c9                	test   ecx,ecx
c0024ce7:	d9 c2                	fld    st(2)
c0024ce9:	d8 c9                	fmul   st,st(1)
c0024ceb:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024cef:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024cf3:	d9 c0                	fld    st(0)
c0024cf5:	d8 cc                	fmul   st,st(4)
c0024cf7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024cfb:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024cff:	d9 c0                	fld    st(0)
c0024d01:	dc 0d 00 c0 02 c0    	fmul   QWORD PTR ds:0xc002c000
c0024d07:	dc 05 08 c0 02 c0    	fadd   QWORD PTR ds:0xc002c008
c0024d0d:	d8 c9                	fmul   st,st(1)
c0024d0f:	dc 25 10 c0 02 c0    	fsub   QWORD PTR ds:0xc002c010
c0024d15:	d8 c9                	fmul   st,st(1)
c0024d17:	dc 05 18 c0 02 c0    	fadd   QWORD PTR ds:0xc002c018
c0024d1d:	d8 c9                	fmul   st,st(1)
c0024d1f:	dc 25 20 c0 02 c0    	fsub   QWORD PTR ds:0xc002c020
c0024d25:	d8 c9                	fmul   st,st(1)
c0024d27:	d9 e8                	fld1   
c0024d29:	dc c1                	fadd   st(1),st
c0024d2b:	d9 c9                	fxch   st(1)
c0024d2d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024d31:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024d35:	dc cb                	fmul   st(3),st
c0024d37:	d9 cb                	fxch   st(3)
c0024d39:	d8 2d f4 bd 02 c0    	fsubr  DWORD PTR ds:0xc002bdf4
c0024d3f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024d43:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024d47:	dc eb                	fsub   st(3),st
c0024d49:	d8 ce                	fmul   st,st(6)
c0024d4b:	d8 2d c4 bf 02 c0    	fsubr  DWORD PTR ds:0xc002bfc4
c0024d51:	de fb                	fdivp  st(3),st
c0024d53:	d9 ca                	fxch   st(2)
c0024d55:	d8 c9                	fmul   st,st(1)
c0024d57:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024d5b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024d5f:	0f 84 9b 00 00 00    	je     c0024e00 <expm1+0x250>
c0024d65:	89 c8                	mov    eax,ecx
c0024d67:	c1 e0 14             	shl    eax,0x14
c0024d6a:	05 00 00 f0 3f       	add    eax,0x3ff00000
c0024d6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024d73:	31 c0                	xor    eax,eax
c0024d75:	83 f9 ff             	cmp    ecx,0xffffffff
c0024d78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024d7c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0024d80:	d9 c9                	fxch   st(1)
c0024d82:	d8 e5                	fsub   st,st(5)
c0024d84:	d8 ce                	fmul   st,st(6)
c0024d86:	de e5                	fsubrp st(5),st
c0024d88:	d9 cc                	fxch   st(4)
c0024d8a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024d8e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024d92:	de e1                	fsubrp st(1),st
c0024d94:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024d98:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024d9c:	0f 84 9e 01 00 00    	je     c0024f40 <expm1+0x390>
c0024da2:	83 f9 01             	cmp    ecx,0x1
c0024da5:	0f 84 55 01 00 00    	je     c0024f00 <expm1+0x350>
c0024dab:	dd da                	fstp   st(2)
c0024dad:	d9 c9                	fxch   st(1)
c0024daf:	8d 41 01             	lea    eax,[ecx+0x1]
c0024db2:	83 f8 39             	cmp    eax,0x39
c0024db5:	0f 87 95 00 00 00    	ja     c0024e50 <expm1+0x2a0>
c0024dbb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0024dc2:	83 f9 13             	cmp    ecx,0x13
c0024dc5:	0f 8f b5 01 00 00    	jg     c0024f80 <expm1+0x3d0>
c0024dcb:	dd d9                	fstp   st(1)
c0024dcd:	b8 00 00 20 00       	mov    eax,0x200000
c0024dd2:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c0024dd7:	d3 f8                	sar    eax,cl
c0024dd9:	29 c2                	sub    edx,eax
c0024ddb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0024ddf:	dd 04 24             	fld    QWORD PTR [esp]
c0024de2:	d9 cb                	fxch   st(3)
c0024de4:	de e9                	fsubp  st(1),st
c0024de6:	de ea                	fsubp  st(2),st
c0024de8:	d9 c9                	fxch   st(1)
c0024dea:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024dee:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024df2:	de c9                	fmulp  st(1),st
c0024df4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024df8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024dfc:	83 c4 24             	add    esp,0x24
c0024dff:	c3                   	ret    
c0024e00:	dd db                	fstp   st(3)
c0024e02:	dd db                	fstp   st(3)
c0024e04:	dd d8                	fstp   st(0)
c0024e06:	d8 ca                	fmul   st,st(2)
c0024e08:	de e1                	fsubrp st(1),st
c0024e0a:	de e9                	fsubp  st(1),st
c0024e0c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024e10:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024e14:	83 c4 24             	add    esp,0x24
c0024e17:	c3                   	ret    
c0024e18:	90                   	nop
c0024e19:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024e20:	d9 ee                	fldz   
c0024e22:	d9 c1                	fld    st(1)
c0024e24:	dc 05 f0 bf 02 c0    	fadd   QWORD PTR ds:0xc002bff0
c0024e2a:	d9 c9                	fxch   st(1)
c0024e2c:	df f1                	fcomip st,st(1)
c0024e2e:	dd d8                	fstp   st(0)
c0024e30:	0f 87 8a 01 00 00    	ja     c0024fc0 <expm1+0x410>
c0024e36:	d9 c0                	fld    st(0)
c0024e38:	dc 0d 70 be 02 c0    	fmul   QWORD PTR ds:0xc002be70
c0024e3e:	d9 05 f8 be 02 c0    	fld    DWORD PTR ds:0xc002bef8
c0024e44:	e9 02 fe ff ff       	jmp    c0024c4b <expm1+0x9b>
c0024e49:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024e50:	de e3                	fsubrp st(3),st
c0024e52:	81 f9 00 04 00 00    	cmp    ecx,0x400
c0024e58:	de e2                	fsubrp st(2),st
c0024e5a:	d9 c9                	fxch   st(1)
c0024e5c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024e60:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024e64:	0f 84 96 01 00 00    	je     c0025000 <expm1+0x450>
c0024e6a:	de c9                	fmulp  st(1),st
c0024e6c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024e70:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024e74:	d9 e8                	fld1   
c0024e76:	de e9                	fsubp  st(1),st
c0024e78:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024e7c:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024e80:	eb 92                	jmp    c0024e14 <expm1+0x264>
c0024e82:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024e89:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024e90:	dd d9                	fstp   st(1)
c0024e92:	3d b1 a2 f0 3f       	cmp    eax,0x3ff0a2b1
c0024e97:	0f 87 7a 01 00 00    	ja     c0025017 <expm1+0x467>
c0024e9d:	85 d2                	test   edx,edx
c0024e9f:	0f 88 bb 00 00 00    	js     c0024f60 <expm1+0x3b0>
c0024ea5:	dc 25 f8 bf 02 c0    	fsub   QWORD PTR ds:0xc002bff8
c0024eab:	b9 01 00 00 00       	mov    ecx,0x1
c0024eb0:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024eb4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024eb8:	dd 05 e0 bf 02 c0    	fld    QWORD PTR ds:0xc002bfe0
c0024ebe:	e9 d6 fd ff ff       	jmp    c0024c99 <expm1+0xe9>
c0024ec3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024ec9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024ed0:	dd d9                	fstp   st(1)
c0024ed2:	d9 c0                	fld    st(0)
c0024ed4:	dc 05 a0 bd 02 c0    	fadd   QWORD PTR ds:0xc002bda0
c0024eda:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c0024ede:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024ee2:	de e1                	fsubrp st(1),st
c0024ee4:	de e9                	fsubp  st(1),st
c0024ee6:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024eea:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024eee:	83 c4 24             	add    esp,0x24
c0024ef1:	c3                   	ret    
c0024ef2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024ef9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024f00:	dd db                	fstp   st(3)
c0024f02:	d9 c9                	fxch   st(1)
c0024f04:	d9 ca                	fxch   st(2)
c0024f06:	dd 04 24             	fld    QWORD PTR [esp]
c0024f09:	d9 05 c8 bf 02 c0    	fld    DWORD PTR ds:0xc002bfc8
c0024f0f:	df f1                	fcomip st,st(1)
c0024f11:	dd d8                	fstp   st(0)
c0024f13:	0f 86 b7 00 00 00    	jbe    c0024fd0 <expm1+0x420>
c0024f19:	dd d9                	fstp   st(1)
c0024f1b:	d9 ca                	fxch   st(2)
c0024f1d:	de c1                	faddp  st(1),st
c0024f1f:	de e9                	fsubp  st(1),st
c0024f21:	d8 0d cc bf 02 c0    	fmul   DWORD PTR ds:0xc002bfcc
c0024f27:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024f2b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024f2f:	e9 e0 fe ff ff       	jmp    c0024e14 <expm1+0x264>
c0024f34:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024f3a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024f40:	dd db                	fstp   st(3)
c0024f42:	dd d8                	fstp   st(0)
c0024f44:	d9 c9                	fxch   st(1)
c0024f46:	de ea                	fsubp  st(2),st
c0024f48:	dc c9                	fmul   st(1),st
c0024f4a:	de e9                	fsubp  st(1),st
c0024f4c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024f50:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024f54:	e9 bb fe ff ff       	jmp    c0024e14 <expm1+0x264>
c0024f59:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024f60:	dc 05 f8 bf 02 c0    	fadd   QWORD PTR ds:0xc002bff8
c0024f66:	b9 ff ff ff ff       	mov    ecx,0xffffffff
c0024f6b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024f6f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024f73:	dd 05 d8 bf 02 c0    	fld    QWORD PTR ds:0xc002bfd8
c0024f79:	e9 1b fd ff ff       	jmp    c0024c99 <expm1+0xe9>
c0024f7e:	66 90                	xchg   ax,ax
c0024f80:	b8 ff 03 00 00       	mov    eax,0x3ff
c0024f85:	29 c8                	sub    eax,ecx
c0024f87:	c1 e0 14             	shl    eax,0x14
c0024f8a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024f8e:	dd 04 24             	fld    QWORD PTR [esp]
c0024f91:	de c1                	faddp  st(1),st
c0024f93:	de eb                	fsubp  st(3),st
c0024f95:	d9 ca                	fxch   st(2)
c0024f97:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024f9b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024f9f:	de c2                	faddp  st(2),st
c0024fa1:	d9 c9                	fxch   st(1)
c0024fa3:	e9 42 fe ff ff       	jmp    c0024dea <expm1+0x23a>
c0024fa8:	90                   	nop
c0024fa9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024fb0:	dd d8                	fstp   st(0)
c0024fb2:	85 d2                	test   edx,edx
c0024fb4:	78 0c                	js     c0024fc2 <expm1+0x412>
c0024fb6:	dd 04 24             	fld    QWORD PTR [esp]
c0024fb9:	e9 56 fe ff ff       	jmp    c0024e14 <expm1+0x264>
c0024fbe:	66 90                	xchg   ax,ax
c0024fc0:	dd d8                	fstp   st(0)
c0024fc2:	d9 e8                	fld1   
c0024fc4:	d9 e0                	fchs   
c0024fc6:	e9 49 fe ff ff       	jmp    c0024e14 <expm1+0x264>
c0024fcb:	90                   	nop
c0024fcc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024fd0:	dd da                	fstp   st(2)
c0024fd2:	d9 c9                	fxch   st(1)
c0024fd4:	de ea                	fsubp  st(2),st
c0024fd6:	d9 c9                	fxch   st(1)
c0024fd8:	d8 c0                	fadd   st,st(0)
c0024fda:	de c1                	faddp  st(1),st
c0024fdc:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024fe0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024fe4:	e9 2b fe ff ff       	jmp    c0024e14 <expm1+0x264>
c0024fe9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024ff0:	d9 05 d8 bd 02 c0    	fld    DWORD PTR ds:0xc002bdd8
c0024ff6:	e9 19 fe ff ff       	jmp    c0024e14 <expm1+0x264>
c0024ffb:	90                   	nop
c0024ffc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0025000:	dd d9                	fstp   st(1)
c0025002:	d8 c0                	fadd   st,st(0)
c0025004:	dc 0d 28 c0 02 c0    	fmul   QWORD PTR ds:0xc002c028
c002500a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002500e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025012:	e9 5d fe ff ff       	jmp    c0024e74 <expm1+0x2c4>
c0025017:	d9 c0                	fld    st(0)
c0025019:	85 d2                	test   edx,edx
c002501b:	dc 0d 70 be 02 c0    	fmul   QWORD PTR ds:0xc002be70
c0025021:	0f 88 17 fe ff ff    	js     c0024e3e <expm1+0x28e>
c0025027:	d9 05 94 bd 02 c0    	fld    DWORD PTR ds:0xc002bd94
c002502d:	e9 19 fc ff ff       	jmp    c0024c4b <expm1+0x9b>
c0025032:	66 90                	xchg   ax,ax
c0025034:	66 90                	xchg   ax,ax
c0025036:	66 90                	xchg   ax,ax
c0025038:	66 90                	xchg   ax,ax
c002503a:	66 90                	xchg   ax,ax
c002503c:	66 90                	xchg   ax,ax
c002503e:	66 90                	xchg   ax,ax

c0025040 <fabs>:
c0025040:	83 ec 0c             	sub    esp,0xc
c0025043:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025047:	89 04 24             	mov    DWORD PTR [esp],eax
c002504a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002504e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025053:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0025057:	dd 04 24             	fld    QWORD PTR [esp]
c002505a:	83 c4 0c             	add    esp,0xc
c002505d:	c3                   	ret    
c002505e:	66 90                	xchg   ax,ax

c0025060 <frexp>:
c0025060:	53                   	push   ebx
c0025061:	83 ec 10             	sub    esp,0x10
c0025064:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025068:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002506c:	dd 14 24             	fst    QWORD PTR [esp]
c002506f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025073:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c0025079:	89 d0                	mov    eax,edx
c002507b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025080:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0025085:	7f 59                	jg     c00250e0 <frexp+0x80>
c0025087:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c002508a:	09 c3                	or     ebx,eax
c002508c:	74 62                	je     c00250f0 <frexp+0x90>
c002508e:	31 db                	xor    ebx,ebx
c0025090:	f7 c2 00 00 f0 7f    	test   edx,0x7ff00000
c0025096:	75 28                	jne    c00250c0 <frexp+0x60>
c0025098:	d9 05 30 c0 02 c0    	fld    DWORD PTR ds:0xc002c030
c002509e:	bb ca ff ff ff       	mov    ebx,0xffffffca
c00250a3:	de c9                	fmulp  st(1),st
c00250a5:	dd 1c 24             	fstp   QWORD PTR [esp]
c00250a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00250ac:	89 d0                	mov    eax,edx
c00250ae:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00250b3:	eb 0d                	jmp    c00250c2 <frexp+0x62>
c00250b5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00250b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00250c0:	dd d8                	fstp   st(0)
c00250c2:	c1 f8 14             	sar    eax,0x14
c00250c5:	81 e2 ff ff 0f 80    	and    edx,0x800fffff
c00250cb:	8d 84 03 02 fc ff ff 	lea    eax,[ebx+eax*1-0x3fe]
c00250d2:	81 ca 00 00 e0 3f    	or     edx,0x3fe00000
c00250d8:	89 01                	mov    DWORD PTR [ecx],eax
c00250da:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00250de:	eb 12                	jmp    c00250f2 <frexp+0x92>
c00250e0:	dd d8                	fstp   st(0)
c00250e2:	eb 0e                	jmp    c00250f2 <frexp+0x92>
c00250e4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00250ea:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00250f0:	dd d8                	fstp   st(0)
c00250f2:	dd 04 24             	fld    QWORD PTR [esp]
c00250f5:	83 c4 10             	add    esp,0x10
c00250f8:	5b                   	pop    ebx
c00250f9:	c3                   	ret    
c00250fa:	66 90                	xchg   ax,ax
c00250fc:	66 90                	xchg   ax,ax
c00250fe:	66 90                	xchg   ax,ax

c0025100 <modf>:
c0025100:	53                   	push   ebx
c0025101:	83 ec 18             	sub    esp,0x18
c0025104:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0025108:	dd 14 24             	fst    QWORD PTR [esp]
c002510b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002510f:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0025112:	89 d0                	mov    eax,edx
c0025114:	c1 f8 14             	sar    eax,0x14
c0025117:	25 ff 07 00 00       	and    eax,0x7ff
c002511c:	8d 88 01 fc ff ff    	lea    ecx,[eax-0x3ff]
c0025122:	83 f9 13             	cmp    ecx,0x13
c0025125:	7f 49                	jg     c0025170 <modf+0x70>
c0025127:	85 c9                	test   ecx,ecx
c0025129:	0f 88 f1 00 00 00    	js     c0025220 <modf+0x120>
c002512f:	dd d8                	fstp   st(0)
c0025131:	b8 ff ff 0f 00       	mov    eax,0xfffff
c0025136:	d3 f8                	sar    eax,cl
c0025138:	89 d1                	mov    ecx,edx
c002513a:	21 c1                	and    ecx,eax
c002513c:	09 d9                	or     ecx,ebx
c002513e:	0f 84 ac 00 00 00    	je     c00251f0 <modf+0xf0>
c0025144:	f7 d0                	not    eax
c0025146:	21 d0                	and    eax,edx
c0025148:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002514c:	31 c0                	xor    eax,eax
c002514e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025152:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025156:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c002515a:	dd 10                	fst    QWORD PTR [eax]
c002515c:	dd 04 24             	fld    QWORD PTR [esp]
c002515f:	de e1                	fsubrp st(1),st
c0025161:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0025165:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025169:	83 c4 18             	add    esp,0x18
c002516c:	5b                   	pop    ebx
c002516d:	c3                   	ret    
c002516e:	66 90                	xchg   ax,ax
c0025170:	dd d8                	fstp   st(0)
c0025172:	83 f9 33             	cmp    ecx,0x33
c0025175:	7e 39                	jle    c00251b0 <modf+0xb0>
c0025177:	81 f9 00 04 00 00    	cmp    ecx,0x400
c002517d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025181:	0f 84 e9 00 00 00    	je     c0025270 <modf+0x170>
c0025187:	dd 04 24             	fld    QWORD PTR [esp]
c002518a:	81 e2 00 00 00 80    	and    edx,0x80000000
c0025190:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0025197:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002519b:	dd 18                	fstp   QWORD PTR [eax]
c002519d:	dd 04 24             	fld    QWORD PTR [esp]
c00251a0:	83 c4 18             	add    esp,0x18
c00251a3:	5b                   	pop    ebx
c00251a4:	c3                   	ret    
c00251a5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00251a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00251b0:	8d 88 ed fb ff ff    	lea    ecx,[eax-0x413]
c00251b6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00251bb:	d3 e8                	shr    eax,cl
c00251bd:	85 d8                	test   eax,ebx
c00251bf:	75 7f                	jne    c0025240 <modf+0x140>
c00251c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00251c5:	81 e2 00 00 00 80    	and    edx,0x80000000
c00251cb:	dd 04 24             	fld    QWORD PTR [esp]
c00251ce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00251d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00251d9:	dd 18                	fstp   QWORD PTR [eax]
c00251db:	dd 04 24             	fld    QWORD PTR [esp]
c00251de:	83 c4 18             	add    esp,0x18
c00251e1:	5b                   	pop    ebx
c00251e2:	c3                   	ret    
c00251e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00251e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00251f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00251f4:	81 e2 00 00 00 80    	and    edx,0x80000000
c00251fa:	dd 04 24             	fld    QWORD PTR [esp]
c00251fd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0025204:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0025208:	dd 18                	fstp   QWORD PTR [eax]
c002520a:	dd 04 24             	fld    QWORD PTR [esp]
c002520d:	83 c4 18             	add    esp,0x18
c0025210:	5b                   	pop    ebx
c0025211:	c3                   	ret    
c0025212:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025219:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025220:	81 e2 00 00 00 80    	and    edx,0x80000000
c0025226:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002522a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002522e:	31 d2                	xor    edx,edx
c0025230:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0025234:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0025238:	dd 18                	fstp   QWORD PTR [eax]
c002523a:	83 c4 18             	add    esp,0x18
c002523d:	5b                   	pop    ebx
c002523e:	c3                   	ret    
c002523f:	90                   	nop
c0025240:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025244:	f7 d0                	not    eax
c0025246:	21 d8                	and    eax,ebx
c0025248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002524c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025250:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0025254:	dd 10                	fst    QWORD PTR [eax]
c0025256:	dd 04 24             	fld    QWORD PTR [esp]
c0025259:	de e1                	fsubrp st(1),st
c002525b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c002525f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025263:	83 c4 18             	add    esp,0x18
c0025266:	5b                   	pop    ebx
c0025267:	c3                   	ret    
c0025268:	90                   	nop
c0025269:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025270:	dd 04 24             	fld    QWORD PTR [esp]
c0025273:	dd 10                	fst    QWORD PTR [eax]
c0025275:	d9 ee                	fldz   
c0025277:	de f1                	fdivrp st(1),st
c0025279:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c002527d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025281:	e9 e3 fe ff ff       	jmp    c0025169 <modf+0x69>
c0025286:	66 90                	xchg   ax,ax
c0025288:	66 90                	xchg   ax,ax
c002528a:	66 90                	xchg   ax,ax
c002528c:	66 90                	xchg   ax,ax
c002528e:	66 90                	xchg   ax,ax

c0025290 <round>:
c0025290:	83 ec 2c             	sub    esp,0x2c
c0025293:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0025297:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c002529b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002529f:	89 c2                	mov    edx,eax
c00252a1:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00252a7:	81 fa 00 00 f0 7f    	cmp    edx,0x7ff00000
c00252ad:	0f 84 9d 00 00 00    	je     c0025350 <round+0xc0>
c00252b3:	dd d8                	fstp   st(0)
c00252b5:	85 c0                	test   eax,eax
c00252b7:	78 47                	js     c0025300 <round+0x70>
c00252b9:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00252bd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00252c0:	e8 ff 03 00 00       	call   c00256c4 <floor>
c00252c5:	d9 c0                	fld    st(0)
c00252c7:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00252cb:	d8 e9                	fsubr  st,st(1)
c00252cd:	d9 05 f8 be 02 c0    	fld    DWORD PTR ds:0xc002bef8
c00252d3:	df f1                	fcomip st,st(1)
c00252d5:	dd d8                	fstp   st(0)
c00252d7:	72 17                	jb     c00252f0 <round+0x60>
c00252d9:	dd d9                	fstp   st(1)
c00252db:	d8 05 90 bd 02 c0    	fadd   DWORD PTR ds:0xc002bd90
c00252e1:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00252e5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00252e9:	eb 07                	jmp    c00252f2 <round+0x62>
c00252eb:	90                   	nop
c00252ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00252f0:	dd d8                	fstp   st(0)
c00252f2:	83 c4 2c             	add    esp,0x2c
c00252f5:	c3                   	ret    
c00252f6:	8d 76 00             	lea    esi,[esi+0x0]
c00252f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025300:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025304:	d9 e0                	fchs   
c0025306:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025309:	e8 b6 03 00 00       	call   c00256c4 <floor>
c002530e:	d9 c0                	fld    st(0)
c0025310:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025314:	d8 c1                	fadd   st,st(1)
c0025316:	d9 05 f8 be 02 c0    	fld    DWORD PTR ds:0xc002bef8
c002531c:	df f1                	fcomip st,st(1)
c002531e:	dd d8                	fstp   st(0)
c0025320:	72 1e                	jb     c0025340 <round+0xb0>
c0025322:	dd d9                	fstp   st(1)
c0025324:	d8 05 90 bd 02 c0    	fadd   DWORD PTR ds:0xc002bd90
c002532a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002532e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025332:	eb 0e                	jmp    c0025342 <round+0xb2>
c0025334:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002533a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0025340:	dd d8                	fstp   st(0)
c0025342:	d9 e0                	fchs   
c0025344:	83 c4 2c             	add    esp,0x2c
c0025347:	c3                   	ret    
c0025348:	90                   	nop
c0025349:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025350:	d9 c0                	fld    st(0)
c0025352:	de c1                	faddp  st(1),st
c0025354:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025358:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002535c:	83 c4 2c             	add    esp,0x2c
c002535f:	c3                   	ret    

c0025360 <sin>:
c0025360:	83 ec 5c             	sub    esp,0x5c
c0025363:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c0025367:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c002536b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002536f:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025374:	3d fb 21 e9 3f       	cmp    eax,0x3fe921fb
c0025379:	7f 65                	jg     c00253e0 <sin+0x80>
c002537b:	3d ff ff 4f 3e       	cmp    eax,0x3e4fffff
c0025380:	7f 2e                	jg     c00253b0 <sin+0x50>
c0025382:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c0025386:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c002538b:	66 0d 00 0c          	or     ax,0xc00
c002538f:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c0025394:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0025398:	db 54 24 30          	fist   DWORD PTR [esp+0x30]
c002539c:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c00253a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00253a4:	85 c0                	test   eax,eax
c00253a6:	75 18                	jne    c00253c0 <sin+0x60>
c00253a8:	83 c4 5c             	add    esp,0x5c
c00253ab:	c3                   	ret    
c00253ac:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00253b0:	dd d8                	fstp   st(0)
c00253b2:	eb 0e                	jmp    c00253c2 <sin+0x62>
c00253b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00253ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00253c0:	dd d8                	fstp   st(0)
c00253c2:	d9 ee                	fldz   
c00253c4:	31 c9                	xor    ecx,ecx
c00253c6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00253ca:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00253ce:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00253d2:	dd 1c 24             	fstp   QWORD PTR [esp]
c00253d5:	e8 06 13 00 00       	call   c00266e0 <__kernel_sin>
c00253da:	83 c4 5c             	add    esp,0x5c
c00253dd:	c3                   	ret    
c00253de:	66 90                	xchg   ax,ax
c00253e0:	dd d8                	fstp   st(0)
c00253e2:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c00253e7:	7e 17                	jle    c0025400 <sin+0xa0>
c00253e9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00253ed:	d8 e0                	fsub   st,st(0)
c00253ef:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00253f3:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00253f7:	83 c4 5c             	add    esp,0x5c
c00253fa:	c3                   	ret    
c00253fb:	90                   	nop
c00253fc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0025400:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025404:	8d 44 24 40          	lea    eax,[esp+0x40]
c0025408:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002540c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002540f:	e8 1c 03 00 00       	call   c0025730 <__ieee754_rem_pio2>
c0025414:	83 e0 03             	and    eax,0x3
c0025417:	83 f8 01             	cmp    eax,0x1
c002541a:	0f 84 90 00 00 00    	je     c00254b0 <sin+0x150>
c0025420:	83 f8 02             	cmp    eax,0x2
c0025423:	74 2b                	je     c0025450 <sin+0xf0>
c0025425:	85 c0                	test   eax,eax
c0025427:	74 57                	je     c0025480 <sin+0x120>
c0025429:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002542d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0025431:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0025435:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025438:	e8 23 08 00 00       	call   c0025c60 <__kernel_cos>
c002543d:	d9 e0                	fchs   
c002543f:	e9 64 ff ff ff       	jmp    c00253a8 <sin+0x48>
c0025444:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002544a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0025450:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025454:	b8 01 00 00 00       	mov    eax,0x1
c0025459:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002545d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0025461:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0025465:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025468:	e8 73 12 00 00       	call   c00266e0 <__kernel_sin>
c002546d:	d9 e0                	fchs   
c002546f:	e9 34 ff ff ff       	jmp    c00253a8 <sin+0x48>
c0025474:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002547a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0025480:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025484:	ba 01 00 00 00       	mov    edx,0x1
c0025489:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c002548d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0025491:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0025495:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025498:	e8 43 12 00 00       	call   c00266e0 <__kernel_sin>
c002549d:	e9 06 ff ff ff       	jmp    c00253a8 <sin+0x48>
c00254a2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00254a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00254b0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00254b4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00254b8:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00254bc:	dd 1c 24             	fstp   QWORD PTR [esp]
c00254bf:	e8 9c 07 00 00       	call   c0025c60 <__kernel_cos>
c00254c4:	e9 df fe ff ff       	jmp    c00253a8 <sin+0x48>
c00254c9:	66 90                	xchg   ax,ax
c00254cb:	66 90                	xchg   ax,ax
c00254cd:	66 90                	xchg   ax,ax
c00254cf:	90                   	nop

c00254d0 <tanh>:
c00254d0:	53                   	push   ebx
c00254d1:	83 ec 28             	sub    esp,0x28
c00254d4:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00254d8:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00254dc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00254e0:	89 d8                	mov    eax,ebx
c00254e2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00254e7:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c00254ec:	7e 32                	jle    c0025520 <tanh+0x50>
c00254ee:	d9 e8                	fld1   
c00254f0:	85 db                	test   ebx,ebx
c00254f2:	dc f1                	fdivr  st(1),st
c00254f4:	78 1a                	js     c0025510 <tanh+0x40>
c00254f6:	de c1                	faddp  st(1),st
c00254f8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00254fc:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025500:	83 c4 28             	add    esp,0x28
c0025503:	5b                   	pop    ebx
c0025504:	c3                   	ret    
c0025505:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0025509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025510:	de e9                	fsubp  st(1),st
c0025512:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025516:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002551a:	83 c4 28             	add    esp,0x28
c002551d:	5b                   	pop    ebx
c002551e:	c3                   	ret    
c002551f:	90                   	nop
c0025520:	dd d8                	fstp   st(0)
c0025522:	3d ff ff 35 40       	cmp    eax,0x4035ffff
c0025527:	7f 57                	jg     c0025580 <tanh+0xb0>
c0025529:	3d ff ff 2f 3e       	cmp    eax,0x3e2fffff
c002552e:	7f 70                	jg     c00255a0 <tanh+0xd0>
c0025530:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025534:	d9 e8                	fld1   
c0025536:	d9 c1                	fld    st(1)
c0025538:	dc 05 a0 bd 02 c0    	fadd   QWORD PTR ds:0xc002bda0
c002553e:	df f1                	fcomip st,st(1)
c0025540:	dd d8                	fstp   st(0)
c0025542:	77 bc                	ja     c0025500 <tanh+0x30>
c0025544:	dd d8                	fstp   st(0)
c0025546:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002554a:	dd 1c 24             	fstp   QWORD PTR [esp]
c002554d:	e8 ee fa ff ff       	call   c0025040 <fabs>
c0025552:	d9 05 cc bf 02 c0    	fld    DWORD PTR ds:0xc002bfcc
c0025558:	de c9                	fmulp  st(1),st
c002555a:	dd 1c 24             	fstp   QWORD PTR [esp]
c002555d:	e8 4e f6 ff ff       	call   c0024bb0 <expm1>
c0025562:	d9 c0                	fld    st(0)
c0025564:	d9 e0                	fchs   
c0025566:	d9 05 00 be 02 c0    	fld    DWORD PTR ds:0xc002be00
c002556c:	de c2                	faddp  st(2),st
c002556e:	de f1                	fdivrp st(1),st
c0025570:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025574:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025578:	eb 08                	jmp    c0025582 <tanh+0xb2>
c002557a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025580:	d9 e8                	fld1   
c0025582:	85 db                	test   ebx,ebx
c0025584:	0f 89 76 ff ff ff    	jns    c0025500 <tanh+0x30>
c002558a:	d9 e0                	fchs   
c002558c:	83 c4 28             	add    esp,0x28
c002558f:	5b                   	pop    ebx
c0025590:	c3                   	ret    
c0025591:	eb 0d                	jmp    c00255a0 <tanh+0xd0>
c0025593:	90                   	nop
c0025594:	90                   	nop
c0025595:	90                   	nop
c0025596:	90                   	nop
c0025597:	90                   	nop
c0025598:	90                   	nop
c0025599:	90                   	nop
c002559a:	90                   	nop
c002559b:	90                   	nop
c002559c:	90                   	nop
c002559d:	90                   	nop
c002559e:	90                   	nop
c002559f:	90                   	nop
c00255a0:	3d ff ff ef 3f       	cmp    eax,0x3fefffff
c00255a5:	7e 9f                	jle    c0025546 <tanh+0x76>
c00255a7:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00255ab:	dd 1c 24             	fstp   QWORD PTR [esp]
c00255ae:	e8 8d fa ff ff       	call   c0025040 <fabs>
c00255b3:	d8 c0                	fadd   st,st(0)
c00255b5:	dd 1c 24             	fstp   QWORD PTR [esp]
c00255b8:	e8 f3 f5 ff ff       	call   c0024bb0 <expm1>
c00255bd:	d9 05 00 be 02 c0    	fld    DWORD PTR ds:0xc002be00
c00255c3:	dc c1                	fadd   st(1),st
c00255c5:	de f1                	fdivrp st(1),st
c00255c7:	d8 2d 90 bd 02 c0    	fsubr  DWORD PTR ds:0xc002bd90
c00255cd:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00255d1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00255d5:	eb ab                	jmp    c0025582 <tanh+0xb2>
c00255d7:	66 90                	xchg   ax,ax
c00255d9:	66 90                	xchg   ax,ax
c00255db:	66 90                	xchg   ax,ax
c00255dd:	66 90                	xchg   ax,ax
c00255df:	90                   	nop

c00255e0 <cimag>:
c00255e0:	dd 44 24 0c          	fld    QWORD PTR [esp+0xc]
c00255e4:	c3                   	ret    
c00255e5:	66 90                	xchg   ax,ax
c00255e7:	66 90                	xchg   ax,ax
c00255e9:	66 90                	xchg   ax,ax
c00255eb:	66 90                	xchg   ax,ax
c00255ed:	66 90                	xchg   ax,ax
c00255ef:	90                   	nop

c00255f0 <creal>:
c00255f0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00255f4:	c3                   	ret    
c00255f5:	66 90                	xchg   ax,ax
c00255f7:	90                   	nop

c00255f8 <exp>:
c00255f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00255fc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025601:	3d 00 00 f0 7f       	cmp    eax,0x7ff00000
c0025606:	73 42                	jae    c002564a <x_Inf_or_NaN>
c0025608:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c002560c:	9b d9 7c 24 04       	fstcw  WORD PTR [esp+0x4]
c0025611:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025615:	25 00 03 00 00       	and    eax,0x300
c002561a:	3d 00 03 00 00       	cmp    eax,0x300
c002561f:	74 0c                	je     c002562d <exp+0x35>
c0025621:	c7 44 24 08 7f 13 00 00 	mov    DWORD PTR [esp+0x8],0x137f
c0025629:	d9 6c 24 08          	fldcw  WORD PTR [esp+0x8]
c002562d:	d9 ea                	fldl2e 
c002562f:	de c9                	fmulp  st(1),st
c0025631:	dd d1                	fst    st(1)
c0025633:	d9 fc                	frndint 
c0025635:	dd d2                	fst    st(2)
c0025637:	de e9                	fsubp  st(1),st
c0025639:	d9 f0                	f2xm1  
c002563b:	d9 e8                	fld1   
c002563d:	de c1                	faddp  st(1),st
c002563f:	d9 fd                	fscale 
c0025641:	dd d9                	fstp   st(1)
c0025643:	74 04                	je     c0025649 <exp+0x51>
c0025645:	d9 6c 24 04          	fldcw  WORD PTR [esp+0x4]
c0025649:	c3                   	ret    

c002564a <x_Inf_or_NaN>:
c002564a:	81 7c 24 08 00 00 f0 ff 	cmp    DWORD PTR [esp+0x8],0xfff00000
c0025652:	75 0a                	jne    c002565e <x_not_minus_Inf>
c0025654:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0025659:	75 03                	jne    c002565e <x_not_minus_Inf>
c002565b:	d9 ee                	fldz   
c002565d:	c3                   	ret    

c002565e <x_not_minus_Inf>:
c002565e:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0025662:	c3                   	ret    
c0025663:	90                   	nop

c0025664 <fmod>:
c0025664:	dd 44 24 0c          	fld    QWORD PTR [esp+0xc]
c0025668:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c002566c:	d9 f8                	fprem  
c002566e:	9b df e0             	fstsw  ax
c0025671:	9e                   	sahf   
c0025672:	7a f8                	jp     c002566c <fmod+0x8>
c0025674:	dd d9                	fstp   st(1)
c0025676:	c3                   	ret    
c0025677:	90                   	nop

c0025678 <log>:
c0025678:	d9 ed                	fldln2 
c002567a:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c002567e:	d9 f1                	fyl2x  
c0025680:	c3                   	ret    
c0025681:	66 90                	xchg   ax,ax
c0025683:	90                   	nop

c0025684 <log10>:
c0025684:	d9 ec                	fldlg2 
c0025686:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c002568a:	d9 f1                	fyl2x  
c002568c:	c3                   	ret    
c002568d:	66 90                	xchg   ax,ax
c002568f:	90                   	nop

c0025690 <sqrt>:
c0025690:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0025694:	d9 fa                	fsqrt  
c0025696:	c3                   	ret    
c0025697:	90                   	nop

c0025698 <ceil>:
c0025698:	55                   	push   ebp
c0025699:	89 e5                	mov    ebp,esp
c002569b:	83 ec 08             	sub    esp,0x8
c002569e:	9b d9 7d fc          	fstcw  WORD PTR [ebp-0x4]
c00256a2:	66 8b 55 fc          	mov    dx,WORD PTR [ebp-0x4]
c00256a6:	66 81 ca 00 08       	or     dx,0x800
c00256ab:	66 81 e2 ff fb       	and    dx,0xfbff
c00256b0:	66 89 55 f8          	mov    WORD PTR [ebp-0x8],dx
c00256b4:	d9 6d f8             	fldcw  WORD PTR [ebp-0x8]
c00256b7:	dd 45 08             	fld    QWORD PTR [ebp+0x8]
c00256ba:	d9 fc                	frndint 
c00256bc:	d9 6d fc             	fldcw  WORD PTR [ebp-0x4]
c00256bf:	c9                   	leave  
c00256c0:	c3                   	ret    
c00256c1:	66 90                	xchg   ax,ax
c00256c3:	90                   	nop

c00256c4 <floor>:
c00256c4:	55                   	push   ebp
c00256c5:	89 e5                	mov    ebp,esp
c00256c7:	83 ec 08             	sub    esp,0x8
c00256ca:	9b d9 7d fc          	fstcw  WORD PTR [ebp-0x4]
c00256ce:	66 8b 55 fc          	mov    dx,WORD PTR [ebp-0x4]
c00256d2:	66 81 ca 00 04       	or     dx,0x400
c00256d7:	66 81 e2 ff f7       	and    dx,0xf7ff
c00256dc:	66 89 55 f8          	mov    WORD PTR [ebp-0x8],dx
c00256e0:	d9 6d f8             	fldcw  WORD PTR [ebp-0x8]
c00256e3:	dd 45 08             	fld    QWORD PTR [ebp+0x8]
c00256e6:	d9 fc                	frndint 
c00256e8:	d9 6d fc             	fldcw  WORD PTR [ebp-0x4]
c00256eb:	c9                   	leave  
c00256ec:	c3                   	ret    
c00256ed:	66 90                	xchg   ax,ax
c00256ef:	90                   	nop

c00256f0 <tan>:
c00256f0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00256f4:	d9 f2                	fptan  
c00256f6:	df e0                	fnstsw ax
c00256f8:	66 25 00 04          	and    ax,0x400
c00256fc:	75 03                	jne    c0025701 <tan+0x11>
c00256fe:	dd d8                	fstp   st(0)
c0025700:	c3                   	ret    
c0025701:	d9 eb                	fldpi  
c0025703:	d8 c0                	fadd   st,st(0)
c0025705:	d9 c9                	fxch   st(1)
c0025707:	d9 f5                	fprem1 
c0025709:	9b df e0             	fstsw  ax
c002570c:	66 25 00 04          	and    ax,0x400
c0025710:	75 f5                	jne    c0025707 <tan+0x17>
c0025712:	dd d9                	fstp   st(1)
c0025714:	d9 f2                	fptan  
c0025716:	dd d8                	fstp   st(0)
c0025718:	c3                   	ret    
c0025719:	66 90                	xchg   ax,ax
c002571b:	90                   	nop

c002571c <ldexp>:
c002571c:	db 44 24 0c          	fild   DWORD PTR [esp+0xc]
c0025720:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0025724:	d9 fd                	fscale 
c0025726:	dd d9                	fstp   st(1)
c0025728:	c3                   	ret    
c0025729:	66 90                	xchg   ax,ax
c002572b:	66 90                	xchg   ax,ax
c002572d:	66 90                	xchg   ax,ax
c002572f:	90                   	nop

c0025730 <__ieee754_rem_pio2>:
c0025730:	56                   	push   esi
c0025731:	53                   	push   ebx
c0025732:	83 ec 74             	sub    esp,0x74
c0025735:	dd 84 24 80 00 00 00 	fld    QWORD PTR [esp+0x80]
c002573c:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0025743:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c0025747:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002574b:	89 f2                	mov    edx,esi
c002574d:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025753:	81 fa 7a 6a 0f 40    	cmp    edx,0x400f6a7a
c0025759:	7f 65                	jg     c00257c0 <__ieee754_rem_pio2+0x90>
c002575b:	89 f0                	mov    eax,esi
c002575d:	25 ff ff 0f 00       	and    eax,0xfffff
c0025762:	3d fb 21 09 00       	cmp    eax,0x921fb
c0025767:	0f 84 57 02 00 00    	je     c00259c4 <__ieee754_rem_pio2+0x294>
c002576d:	81 fa 7c d9 02 40    	cmp    edx,0x4002d97c
c0025773:	0f 8f b7 01 00 00    	jg     c0025930 <__ieee754_rem_pio2+0x200>
c0025779:	85 f6                	test   esi,esi
c002577b:	0f 8e 3a 04 00 00    	jle    c0025bbb <__ieee754_rem_pio2+0x48b>
c0025781:	dc 25 38 c0 02 c0    	fsub   QWORD PTR ds:0xc002c038
c0025787:	b8 01 00 00 00       	mov    eax,0x1
c002578c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025790:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025794:	dd 05 40 c0 02 c0    	fld    QWORD PTR ds:0xc002c040
c002579a:	d9 c1                	fld    st(1)
c002579c:	d8 e1                	fsub   st,st(1)
c002579e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00257a2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00257a6:	dd 13                	fst    QWORD PTR [ebx]
c00257a8:	de ea                	fsubp  st(2),st
c00257aa:	de e9                	fsubp  st(1),st
c00257ac:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c00257af:	83 c4 74             	add    esp,0x74
c00257b2:	5b                   	pop    ebx
c00257b3:	5e                   	pop    esi
c00257b4:	c3                   	ret    
c00257b5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00257b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00257c0:	dd d8                	fstp   st(0)
c00257c2:	81 fa 3b 46 1c 40    	cmp    edx,0x401c463b
c00257c8:	7f 66                	jg     c0025830 <__ieee754_rem_pio2+0x100>
c00257ca:	81 fa bc fd 15 40    	cmp    edx,0x4015fdbc
c00257d0:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00257d4:	0f 8f 96 01 00 00    	jg     c0025970 <__ieee754_rem_pio2+0x240>
c00257da:	81 fa 7c d9 12 40    	cmp    edx,0x4012d97c
c00257e0:	0f 84 de 01 00 00    	je     c00259c4 <__ieee754_rem_pio2+0x294>
c00257e6:	85 f6                	test   esi,esi
c00257e8:	0f 8e 00 04 00 00    	jle    c0025bee <__ieee754_rem_pio2+0x4be>
c00257ee:	dc 25 58 c0 02 c0    	fsub   QWORD PTR ds:0xc002c058
c00257f4:	b8 03 00 00 00       	mov    eax,0x3
c00257f9:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00257fd:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025801:	db 2d a0 c0 02 c0    	fld    TBYTE PTR ds:0xc002c0a0
c0025807:	d9 c1                	fld    st(1)
c0025809:	d8 e1                	fsub   st,st(1)
c002580b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002580f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025813:	dd 13                	fst    QWORD PTR [ebx]
c0025815:	de ea                	fsubp  st(2),st
c0025817:	de e9                	fsubp  st(1),st
c0025819:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c002581c:	83 c4 74             	add    esp,0x74
c002581f:	5b                   	pop    ebx
c0025820:	5e                   	pop    esi
c0025821:	c3                   	ret    
c0025822:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025829:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025830:	81 fa fa 21 39 41    	cmp    edx,0x413921fa
c0025836:	0f 8e 84 01 00 00    	jle    c00259c0 <__ieee754_rem_pio2+0x290>
c002583c:	81 fa ff ff ef 7f    	cmp    edx,0x7fefffff
c0025842:	0f 8f d8 02 00 00    	jg     c0025b20 <__ieee754_rem_pio2+0x3f0>
c0025848:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c002584c:	89 d1                	mov    ecx,edx
c002584e:	c1 f9 14             	sar    ecx,0x14
c0025851:	81 e9 16 04 00 00    	sub    ecx,0x416
c0025857:	89 c8                	mov    eax,ecx
c0025859:	c1 e0 14             	shl    eax,0x14
c002585c:	29 c2                	sub    edx,eax
c002585e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025862:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0025866:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002586a:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c002586f:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025873:	66 0d 00 0c          	or     ax,0xc00
c0025877:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c002587c:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0025880:	db 54 24 20          	fist   DWORD PTR [esp+0x20]
c0025884:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0025888:	db 44 24 20          	fild   DWORD PTR [esp+0x20]
c002588c:	dd 54 24 58          	fst    QWORD PTR [esp+0x58]
c0025890:	de e9                	fsubp  st(1),st
c0025892:	d9 05 b4 c0 02 c0    	fld    DWORD PTR ds:0xc002c0b4
c0025898:	dc c9                	fmul   st(1),st
c002589a:	d9 c9                	fxch   st(1)
c002589c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00258a0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00258a4:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c00258a8:	db 54 24 20          	fist   DWORD PTR [esp+0x20]
c00258ac:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c00258b0:	db 44 24 20          	fild   DWORD PTR [esp+0x20]
c00258b4:	dd 54 24 60          	fst    QWORD PTR [esp+0x60]
c00258b8:	de e9                	fsubp  st(1),st
c00258ba:	de c9                	fmulp  st(1),st
c00258bc:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00258c0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00258c4:	dd 54 24 68          	fst    QWORD PTR [esp+0x68]
c00258c8:	d9 ee                	fldz   
c00258ca:	d9 c9                	fxch   st(1)
c00258cc:	df e9                	fucomip st,st(1)
c00258ce:	dd d8                	fstp   st(0)
c00258d0:	0f 8a 8a 02 00 00    	jp     c0025b60 <__ieee754_rem_pio2+0x430>
c00258d6:	0f 85 84 02 00 00    	jne    c0025b60 <__ieee754_rem_pio2+0x430>
c00258dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00258e0:	31 c0                	xor    eax,eax
c00258e2:	85 d2                	test   edx,edx
c00258e4:	0f 95 c0             	setne  al
c00258e7:	40                   	inc    eax
c00258e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00258ec:	8d 44 24 48          	lea    eax,[esp+0x48]
c00258f0:	ba 01 00 00 00       	mov    edx,0x1
c00258f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00258f9:	8d 44 24 58          	lea    eax,[esp+0x58]
c00258fd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0025901:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025905:	89 04 24             	mov    DWORD PTR [esp],eax
c0025908:	e8 f3 03 00 00       	call   c0025d00 <__kernel_rem_pio2>
c002590d:	85 f6                	test   esi,esi
c002590f:	0f 88 5b 02 00 00    	js     c0025b70 <__ieee754_rem_pio2+0x440>
c0025915:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025919:	dd 1b                	fstp   QWORD PTR [ebx]
c002591b:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c002591f:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0025922:	e9 88 fe ff ff       	jmp    c00257af <__ieee754_rem_pio2+0x7f>
c0025927:	89 f6                	mov    esi,esi
c0025929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025930:	85 f6                	test   esi,esi
c0025932:	0f 8e 50 02 00 00    	jle    c0025b88 <__ieee754_rem_pio2+0x458>
c0025938:	dc 25 48 c0 02 c0    	fsub   QWORD PTR ds:0xc002c048
c002593e:	b8 02 00 00 00       	mov    eax,0x2
c0025943:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025947:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002594b:	dd 05 50 c0 02 c0    	fld    QWORD PTR ds:0xc002c050
c0025951:	d9 c1                	fld    st(1)
c0025953:	d8 e1                	fsub   st,st(1)
c0025955:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025959:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002595d:	dd 13                	fst    QWORD PTR [ebx]
c002595f:	de ea                	fsubp  st(2),st
c0025961:	de e9                	fsubp  st(1),st
c0025963:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0025966:	83 c4 74             	add    esp,0x74
c0025969:	5b                   	pop    ebx
c002596a:	5e                   	pop    esi
c002596b:	c3                   	ret    
c002596c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0025970:	81 fa fb 21 19 40    	cmp    edx,0x401921fb
c0025976:	74 4c                	je     c00259c4 <__ieee754_rem_pio2+0x294>
c0025978:	85 f6                	test   esi,esi
c002597a:	0f 8e a1 02 00 00    	jle    c0025c21 <__ieee754_rem_pio2+0x4f1>
c0025980:	dc 25 60 c0 02 c0    	fsub   QWORD PTR ds:0xc002c060
c0025986:	b8 04 00 00 00       	mov    eax,0x4
c002598b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002598f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025993:	dd 05 68 c0 02 c0    	fld    QWORD PTR ds:0xc002c068
c0025999:	d9 c1                	fld    st(1)
c002599b:	d8 e1                	fsub   st,st(1)
c002599d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00259a1:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00259a5:	dd 13                	fst    QWORD PTR [ebx]
c00259a7:	de ea                	fsubp  st(2),st
c00259a9:	de e9                	fsubp  st(1),st
c00259ab:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c00259ae:	83 c4 74             	add    esp,0x74
c00259b1:	5b                   	pop    ebx
c00259b2:	5e                   	pop    esi
c00259b3:	c3                   	ret    
c00259b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00259ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00259c0:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00259c4:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c00259c8:	d9 c0                	fld    st(0)
c00259ca:	dc 0d 70 c0 02 c0    	fmul   QWORD PTR ds:0xc002c070
c00259d0:	c1 fa 14             	sar    edx,0x14
c00259d3:	89 d6                	mov    esi,edx
c00259d5:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c00259da:	d9 05 b0 c0 02 c0    	fld    DWORD PTR ds:0xc002c0b0
c00259e0:	dc c1                	fadd   st(1),st
c00259e2:	d9 c9                	fxch   st(1)
c00259e4:	66 0d 00 0c          	or     ax,0xc00
c00259e8:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c00259ed:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00259f1:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00259f5:	de e1                	fsubrp st(1),st
c00259f7:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00259fb:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00259ff:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0025a03:	db 54 24 30          	fist   DWORD PTR [esp+0x30]
c0025a07:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0025a0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025a0f:	d9 c0                	fld    st(0)
c0025a11:	dc 0d 38 c0 02 c0    	fmul   QWORD PTR ds:0xc002c038
c0025a17:	de ea                	fsubp  st(2),st
c0025a19:	d9 c9                	fxch   st(1)
c0025a1b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025a1f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025a23:	d9 c1                	fld    st(1)
c0025a25:	dc 0d 40 c0 02 c0    	fmul   QWORD PTR ds:0xc002c040
c0025a2b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025a2f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025a33:	d9 c1                	fld    st(1)
c0025a35:	d8 e1                	fsub   st,st(1)
c0025a37:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0025a3b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0025a3f:	c1 e9 14             	shr    ecx,0x14
c0025a42:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0025a48:	29 ce                	sub    esi,ecx
c0025a4a:	83 fe 10             	cmp    esi,0x10
c0025a4d:	7f 21                	jg     c0025a70 <__ieee754_rem_pio2+0x340>
c0025a4f:	dd da                	fstp   st(2)
c0025a51:	d9 c9                	fxch   st(1)
c0025a53:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0025a57:	dd 1b                	fstp   QWORD PTR [ebx]
c0025a59:	d9 c9                	fxch   st(1)
c0025a5b:	dc 64 24 20          	fsub   QWORD PTR [esp+0x20]
c0025a5f:	de e1                	fsubrp st(1),st
c0025a61:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0025a64:	83 c4 74             	add    esp,0x74
c0025a67:	5b                   	pop    ebx
c0025a68:	5e                   	pop    esi
c0025a69:	c3                   	ret    
c0025a6a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025a70:	dd d8                	fstp   st(0)
c0025a72:	d9 c1                	fld    st(1)
c0025a74:	dc 0d 78 c0 02 c0    	fmul   QWORD PTR ds:0xc002c078
c0025a7a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025a7e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025a82:	d9 c1                	fld    st(1)
c0025a84:	d8 e1                	fsub   st,st(1)
c0025a86:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025a8a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025a8e:	d9 c0                	fld    st(0)
c0025a90:	dc eb                	fsub   st(3),st
c0025a92:	d9 cb                	fxch   st(3)
c0025a94:	de e2                	fsubrp st(2),st
c0025a96:	d9 c3                	fld    st(3)
c0025a98:	dc 0d 80 c0 02 c0    	fmul   QWORD PTR ds:0xc002c080
c0025a9e:	de e2                	fsubrp st(2),st
c0025aa0:	d9 c9                	fxch   st(1)
c0025aa2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025aa6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025aaa:	d9 c2                	fld    st(2)
c0025aac:	d8 e1                	fsub   st,st(1)
c0025aae:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0025ab2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0025ab6:	c1 e9 14             	shr    ecx,0x14
c0025ab9:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0025abf:	29 ca                	sub    edx,ecx
c0025ac1:	83 fa 31             	cmp    edx,0x31
c0025ac4:	7e 7a                	jle    c0025b40 <__ieee754_rem_pio2+0x410>
c0025ac6:	dd d8                	fstp   st(0)
c0025ac8:	dd d8                	fstp   st(0)
c0025aca:	d9 c1                	fld    st(1)
c0025acc:	dc 0d 88 c0 02 c0    	fmul   QWORD PTR ds:0xc002c088
c0025ad2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025ad6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025ada:	d9 c1                	fld    st(1)
c0025adc:	d8 e1                	fsub   st,st(1)
c0025ade:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025ae2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025ae6:	d9 cb                	fxch   st(3)
c0025ae8:	dc 0d 90 c0 02 c0    	fmul   QWORD PTR ds:0xc002c090
c0025aee:	d9 ca                	fxch   st(2)
c0025af0:	d8 e3                	fsub   st,st(3)
c0025af2:	de e1                	fsubrp st(1),st
c0025af4:	de e9                	fsubp  st(1),st
c0025af6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025afa:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025afe:	d9 c1                	fld    st(1)
c0025b00:	d8 e1                	fsub   st,st(1)
c0025b02:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0025b06:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0025b0a:	dd 1b                	fstp   QWORD PTR [ebx]
c0025b0c:	d9 c9                	fxch   st(1)
c0025b0e:	e9 48 ff ff ff       	jmp    c0025a5b <__ieee754_rem_pio2+0x32b>
c0025b13:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025b19:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025b20:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0025b24:	31 c0                	xor    eax,eax
c0025b26:	d8 e0                	fsub   st,st(0)
c0025b28:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025b2c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025b30:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0025b33:	dd 1b                	fstp   QWORD PTR [ebx]
c0025b35:	e9 75 fc ff ff       	jmp    c00257af <__ieee754_rem_pio2+0x7f>
c0025b3a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025b40:	dd da                	fstp   st(2)
c0025b42:	dd da                	fstp   st(2)
c0025b44:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0025b48:	dd 1b                	fstp   QWORD PTR [ebx]
c0025b4a:	d9 c9                	fxch   st(1)
c0025b4c:	e9 0a ff ff ff       	jmp    c0025a5b <__ieee754_rem_pio2+0x32b>
c0025b51:	eb 0d                	jmp    c0025b60 <__ieee754_rem_pio2+0x430>
c0025b53:	90                   	nop
c0025b54:	90                   	nop
c0025b55:	90                   	nop
c0025b56:	90                   	nop
c0025b57:	90                   	nop
c0025b58:	90                   	nop
c0025b59:	90                   	nop
c0025b5a:	90                   	nop
c0025b5b:	90                   	nop
c0025b5c:	90                   	nop
c0025b5d:	90                   	nop
c0025b5e:	90                   	nop
c0025b5f:	90                   	nop
c0025b60:	b8 03 00 00 00       	mov    eax,0x3
c0025b65:	e9 7e fd ff ff       	jmp    c00258e8 <__ieee754_rem_pio2+0x1b8>
c0025b6a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025b70:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025b74:	f7 d8                	neg    eax
c0025b76:	d9 e0                	fchs   
c0025b78:	dd 1b                	fstp   QWORD PTR [ebx]
c0025b7a:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0025b7e:	d9 e0                	fchs   
c0025b80:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0025b83:	e9 27 fc ff ff       	jmp    c00257af <__ieee754_rem_pio2+0x7f>
c0025b88:	dc 05 48 c0 02 c0    	fadd   QWORD PTR ds:0xc002c048
c0025b8e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0025b93:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025b97:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025b9b:	dd 05 50 c0 02 c0    	fld    QWORD PTR ds:0xc002c050
c0025ba1:	d9 c1                	fld    st(1)
c0025ba3:	d8 c1                	fadd   st,st(1)
c0025ba5:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025ba9:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025bad:	dd 13                	fst    QWORD PTR [ebx]
c0025baf:	de ea                	fsubp  st(2),st
c0025bb1:	de c1                	faddp  st(1),st
c0025bb3:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0025bb6:	e9 f4 fb ff ff       	jmp    c00257af <__ieee754_rem_pio2+0x7f>
c0025bbb:	dc 05 38 c0 02 c0    	fadd   QWORD PTR ds:0xc002c038
c0025bc1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025bc6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025bca:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025bce:	dd 05 40 c0 02 c0    	fld    QWORD PTR ds:0xc002c040
c0025bd4:	d9 c1                	fld    st(1)
c0025bd6:	d8 c1                	fadd   st,st(1)
c0025bd8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025bdc:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025be0:	dd 13                	fst    QWORD PTR [ebx]
c0025be2:	de ea                	fsubp  st(2),st
c0025be4:	de c1                	faddp  st(1),st
c0025be6:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0025be9:	e9 c1 fb ff ff       	jmp    c00257af <__ieee754_rem_pio2+0x7f>
c0025bee:	dc 05 58 c0 02 c0    	fadd   QWORD PTR ds:0xc002c058
c0025bf4:	b8 fd ff ff ff       	mov    eax,0xfffffffd
c0025bf9:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025bfd:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025c01:	db 2d a0 c0 02 c0    	fld    TBYTE PTR ds:0xc002c0a0
c0025c07:	d9 c1                	fld    st(1)
c0025c09:	d8 c1                	fadd   st,st(1)
c0025c0b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025c0f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025c13:	dd 13                	fst    QWORD PTR [ebx]
c0025c15:	de ea                	fsubp  st(2),st
c0025c17:	de c1                	faddp  st(1),st
c0025c19:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0025c1c:	e9 8e fb ff ff       	jmp    c00257af <__ieee754_rem_pio2+0x7f>
c0025c21:	dc 05 60 c0 02 c0    	fadd   QWORD PTR ds:0xc002c060
c0025c27:	b8 fc ff ff ff       	mov    eax,0xfffffffc
c0025c2c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025c30:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025c34:	dd 05 68 c0 02 c0    	fld    QWORD PTR ds:0xc002c068
c0025c3a:	d9 c1                	fld    st(1)
c0025c3c:	d8 c1                	fadd   st,st(1)
c0025c3e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025c42:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025c46:	dd 13                	fst    QWORD PTR [ebx]
c0025c48:	de ea                	fsubp  st(2),st
c0025c4a:	de c1                	faddp  st(1),st
c0025c4c:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0025c4f:	e9 5b fb ff ff       	jmp    c00257af <__ieee754_rem_pio2+0x7f>
c0025c54:	66 90                	xchg   ax,ax
c0025c56:	66 90                	xchg   ax,ax
c0025c58:	66 90                	xchg   ax,ax
c0025c5a:	66 90                	xchg   ax,ax
c0025c5c:	66 90                	xchg   ax,ax
c0025c5e:	66 90                	xchg   ax,ax

c0025c60 <__kernel_cos>:
c0025c60:	83 ec 0c             	sub    esp,0xc
c0025c63:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025c67:	d9 c0                	fld    st(0)
c0025c69:	d8 c9                	fmul   st,st(1)
c0025c6b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025c6e:	dd 04 24             	fld    QWORD PTR [esp]
c0025c71:	d9 c0                	fld    st(0)
c0025c73:	d8 c9                	fmul   st,st(1)
c0025c75:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025c78:	dd 04 24             	fld    QWORD PTR [esp]
c0025c7b:	d9 c1                	fld    st(1)
c0025c7d:	d8 0d 94 bd 02 c0    	fmul   DWORD PTR ds:0xc002bd94
c0025c83:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025c86:	dd 04 24             	fld    QWORD PTR [esp]
c0025c89:	d9 e8                	fld1   
c0025c8b:	d9 c0                	fld    st(0)
c0025c8d:	d8 e2                	fsub   st,st(2)
c0025c8f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025c92:	dd 04 24             	fld    QWORD PTR [esp]
c0025c95:	d9 c4                	fld    st(4)
c0025c97:	dc 0d b8 c0 02 c0    	fmul   QWORD PTR ds:0xc002c0b8
c0025c9d:	dc 05 c0 c0 02 c0    	fadd   QWORD PTR ds:0xc002c0c0
c0025ca3:	d8 cd                	fmul   st,st(5)
c0025ca5:	dc 25 c8 c0 02 c0    	fsub   QWORD PTR ds:0xc002c0c8
c0025cab:	d9 cc                	fxch   st(4)
c0025cad:	d8 c8                	fmul   st,st(0)
c0025caf:	de cc                	fmulp  st(4),st
c0025cb1:	d9 c4                	fld    st(4)
c0025cb3:	dc 0d d0 c0 02 c0    	fmul   QWORD PTR ds:0xc002c0d0
c0025cb9:	dc 25 d8 c0 02 c0    	fsub   QWORD PTR ds:0xc002c0d8
c0025cbf:	d8 cd                	fmul   st,st(5)
c0025cc1:	dc 05 e0 c0 02 c0    	fadd   QWORD PTR ds:0xc002c0e0
c0025cc7:	d8 cd                	fmul   st,st(5)
c0025cc9:	de c4                	faddp  st(4),st
c0025ccb:	d9 cb                	fxch   st(3)
c0025ccd:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025cd0:	dd 04 24             	fld    QWORD PTR [esp]
c0025cd3:	de cc                	fmulp  st(4),st
c0025cd5:	d9 cc                	fxch   st(4)
c0025cd7:	dc 4c 24 18          	fmul   QWORD PTR [esp+0x18]
c0025cdb:	de eb                	fsubp  st(3),st
c0025cdd:	d9 cb                	fxch   st(3)
c0025cdf:	d8 e1                	fsub   st,st(1)
c0025ce1:	de e3                	fsubrp st(3),st
c0025ce3:	d9 c9                	fxch   st(1)
c0025ce5:	de c2                	faddp  st(2),st
c0025ce7:	de c1                	faddp  st(1),st
c0025ce9:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025cec:	dd 04 24             	fld    QWORD PTR [esp]
c0025cef:	83 c4 0c             	add    esp,0xc
c0025cf2:	c3                   	ret    
c0025cf3:	66 90                	xchg   ax,ax
c0025cf5:	66 90                	xchg   ax,ax
c0025cf7:	66 90                	xchg   ax,ax
c0025cf9:	66 90                	xchg   ax,ax
c0025cfb:	66 90                	xchg   ax,ax
c0025cfd:	66 90                	xchg   ax,ax
c0025cff:	90                   	nop

c0025d00 <__kernel_rem_pio2>:
c0025d00:	55                   	push   ebp
c0025d01:	57                   	push   edi
c0025d02:	56                   	push   esi
c0025d03:	53                   	push   ebx
c0025d04:	81 ec 8c 02 00 00    	sub    esp,0x28c
c0025d0a:	8b 84 24 b0 02 00 00 	mov    eax,DWORD PTR [esp+0x2b0]
c0025d11:	8b 9c 24 a8 02 00 00 	mov    ebx,DWORD PTR [esp+0x2a8]
c0025d18:	8b 04 85 c8 cb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3438]
c0025d1f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0025d23:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c0025d2a:	48                   	dec    eax
c0025d2b:	83 fb ec             	cmp    ebx,0xffffffec
c0025d2e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025d32:	0f 8c 44 08 00 00    	jl     c002657c <__kernel_rem_pio2+0x87c>
c0025d38:	8d 4b fd             	lea    ecx,[ebx-0x3]
c0025d3b:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
c0025d40:	89 c8                	mov    eax,ecx
c0025d42:	f7 ea                	imul   edx
c0025d44:	c1 f9 1f             	sar    ecx,0x1f
c0025d47:	c1 fa 02             	sar    edx,0x2
c0025d4a:	29 ca                	sub    edx,ecx
c0025d4c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0025d50:	8d 42 01             	lea    eax,[edx+0x1]
c0025d53:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0025d5a:	29 d0                	sub    eax,edx
c0025d5c:	c1 e0 03             	shl    eax,0x3
c0025d5f:	01 d8                	add    eax,ebx
c0025d61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025d65:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0025d69:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0025d6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025d71:	29 c2                	sub    edx,eax
c0025d73:	01 c6                	add    esi,eax
c0025d75:	78 58                	js     c0025dcf <__kernel_rem_pio2+0xcf>
c0025d77:	85 d2                	test   edx,edx
c0025d79:	0f 89 f4 04 00 00    	jns    c0026273 <__kernel_rem_pio2+0x573>
c0025d7f:	8d 5c 16 01          	lea    ebx,[esi+edx*1+0x1]
c0025d83:	b8 00 00 00 00       	mov    eax,0x0
c0025d88:	8d 8c 24 a0 00 00 00 	lea    ecx,[esp+0xa0]
c0025d8f:	85 db                	test   ebx,ebx
c0025d91:	0f 4f d8             	cmovg  ebx,eax
c0025d94:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025d9a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0025da0:	d9 ee                	fldz   
c0025da2:	42                   	inc    edx
c0025da3:	dd 1c c1             	fstp   QWORD PTR [ecx+eax*8]
c0025da6:	40                   	inc    eax
c0025da7:	39 da                	cmp    edx,ebx
c0025da9:	7c f5                	jl     c0025da0 <__kernel_rem_pio2+0xa0>
c0025dab:	39 c6                	cmp    esi,eax
c0025dad:	7c 20                	jl     c0025dcf <__kernel_rem_pio2+0xcf>
c0025daf:	29 c2                	sub    edx,eax
c0025db1:	c1 e2 02             	shl    edx,0x2
c0025db4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025dba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0025dc0:	db 84 82 00 c1 02 c0 	fild   DWORD PTR [edx+eax*4-0x3ffd3f00]
c0025dc7:	dd 1c c1             	fstp   QWORD PTR [ecx+eax*8]
c0025dca:	40                   	inc    eax
c0025dcb:	39 c6                	cmp    esi,eax
c0025dcd:	7d f1                	jge    c0025dc0 <__kernel_rem_pio2+0xc0>
c0025dcf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025dd3:	85 c0                	test   eax,eax
c0025dd5:	78 7c                	js     c0025e53 <__kernel_rem_pio2+0x153>
c0025dd7:	8d 2c c5 08 00 00 00 	lea    ebp,[eax*8+0x8]
c0025dde:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c0025de5:	31 db                	xor    ebx,ebx
c0025de7:	8b 8c 24 a0 02 00 00 	mov    ecx,DWORD PTR [esp+0x2a0]
c0025dee:	8d b4 24 e0 01 00 00 	lea    esi,[esp+0x1e0]
c0025df5:	c1 e0 03             	shl    eax,0x3
c0025df8:	8d bc 04 98 00 00 00 	lea    edi,[esp+eax*1+0x98]
c0025dff:	01 c1                	add    ecx,eax
c0025e01:	eb 0d                	jmp    c0025e10 <__kernel_rem_pio2+0x110>
c0025e03:	90                   	nop
c0025e04:	90                   	nop
c0025e05:	90                   	nop
c0025e06:	90                   	nop
c0025e07:	90                   	nop
c0025e08:	90                   	nop
c0025e09:	90                   	nop
c0025e0a:	90                   	nop
c0025e0b:	90                   	nop
c0025e0c:	90                   	nop
c0025e0d:	90                   	nop
c0025e0e:	90                   	nop
c0025e0f:	90                   	nop
c0025e10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e14:	85 c0                	test   eax,eax
c0025e16:	0f 88 65 04 00 00    	js     c0026281 <__kernel_rem_pio2+0x581>
c0025e1c:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c0025e23:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0025e26:	d9 ee                	fldz   
c0025e28:	90                   	nop
c0025e29:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025e30:	dd 02                	fld    QWORD PTR [edx]
c0025e32:	83 c0 08             	add    eax,0x8
c0025e35:	83 ea 08             	sub    edx,0x8
c0025e38:	dc 48 f8             	fmul   QWORD PTR [eax-0x8]
c0025e3b:	39 c1                	cmp    ecx,eax
c0025e3d:	de c1                	faddp  st(1),st
c0025e3f:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025e43:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025e47:	75 e7                	jne    c0025e30 <__kernel_rem_pio2+0x130>
c0025e49:	dd 1c 1e             	fstp   QWORD PTR [esi+ebx*1]
c0025e4c:	83 c3 08             	add    ebx,0x8
c0025e4f:	39 dd                	cmp    ebp,ebx
c0025e51:	75 bd                	jne    c0025e10 <__kernel_rem_pio2+0x110>
c0025e53:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0025e57:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0025e5b:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
c0025e62:	8d 7c 04 4c          	lea    edi,[esp+eax*1+0x4c]
c0025e66:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
c0025e6a:	8d 44 04 48          	lea    eax,[esp+eax*1+0x48]
c0025e6e:	8b bc 24 ac 02 00 00 	mov    edi,DWORD PTR [esp+0x2ac]
c0025e75:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0025e79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e7d:	c1 e0 02             	shl    eax,0x2
c0025e80:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025e84:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c0025e8b:	8d 1c f8             	lea    ebx,[eax+edi*8]
c0025e8e:	b8 18 00 00 00       	mov    eax,0x18
c0025e93:	29 e8                	sub    eax,ebp
c0025e95:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0025e99:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025ea0:	85 f6                	test   esi,esi
c0025ea2:	dd 84 f4 e0 01 00 00 	fld    QWORD PTR [esp+esi*8+0x1e0]
c0025ea9:	7e 6a                	jle    c0025f15 <__kernel_rem_pio2+0x215>
c0025eab:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c0025eaf:	8d ac 24 e0 01 00 00 	lea    ebp,[esp+0x1e0]
c0025eb6:	8d 44 f5 f8          	lea    eax,[ebp+esi*8-0x8]
c0025eba:	8d 54 24 50          	lea    edx,[esp+0x50]
c0025ebe:	0f b7 4c 24 46       	movzx  ecx,WORD PTR [esp+0x46]
c0025ec3:	66 81 c9 00 0c       	or     cx,0xc00
c0025ec8:	66 89 4c 24 44       	mov    WORD PTR [esp+0x44],cx
c0025ecd:	eb 03                	jmp    c0025ed2 <__kernel_rem_pio2+0x1d2>
c0025ecf:	90                   	nop
c0025ed0:	89 c8                	mov    eax,ecx
c0025ed2:	83 c2 04             	add    edx,0x4
c0025ed5:	d9 c0                	fld    st(0)
c0025ed7:	d8 0d dc cb 02 c0    	fmul   DWORD PTR ds:0xc002cbdc
c0025edd:	8d 48 f8             	lea    ecx,[eax-0x8]
c0025ee0:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0025ee4:	db 5c 24 10          	fistp  DWORD PTR [esp+0x10]
c0025ee8:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c0025eec:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0025ef0:	d9 c0                	fld    st(0)
c0025ef2:	d8 0d b4 c0 02 c0    	fmul   DWORD PTR ds:0xc002c0b4
c0025ef8:	de ea                	fsubp  st(2),st
c0025efa:	d9 c9                	fxch   st(1)
c0025efc:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0025f00:	db 5a fc             	fistp  DWORD PTR [edx-0x4]
c0025f03:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c0025f07:	39 c5                	cmp    ebp,eax
c0025f09:	dc 00                	fadd   QWORD PTR [eax]
c0025f0b:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025f0f:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025f13:	75 bb                	jne    c0025ed0 <__kernel_rem_pio2+0x1d0>
c0025f15:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0025f19:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025f1c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0025f20:	e8 f7 f7 ff ff       	call   c002571c <ldexp>
c0025f25:	d9 c0                	fld    st(0)
c0025f27:	db 7c 24 10          	fstp   TBYTE PTR [esp+0x10]
c0025f2b:	d8 0d e0 cb 02 c0    	fmul   DWORD PTR ds:0xc002cbe0
c0025f31:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025f34:	e8 8b f7 ff ff       	call   c00256c4 <floor>
c0025f39:	d9 05 e4 cb 02 c0    	fld    DWORD PTR ds:0xc002cbe4
c0025f3f:	de c9                	fmulp  st(1),st
c0025f41:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c0025f45:	db 6c 24 10          	fld    TBYTE PTR [esp+0x10]
c0025f49:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c0025f4e:	de e1                	fsubrp st(1),st
c0025f50:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025f54:	66 0d 00 0c          	or     ax,0xc00
c0025f58:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c0025f5d:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025f61:	85 ff                	test   edi,edi
c0025f63:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0025f67:	db 54 24 40          	fist   DWORD PTR [esp+0x40]
c0025f6b:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c0025f6f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0025f73:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0025f77:	db 44 24 24          	fild   DWORD PTR [esp+0x24]
c0025f7b:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0025f7f:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0025f83:	de e9                	fsubp  st(1),st
c0025f85:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025f89:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025f8d:	0f 8e 2d 01 00 00    	jle    c00260c0 <__kernel_rem_pio2+0x3c0>
c0025f93:	8d 7e ff             	lea    edi,[esi-0x1]
c0025f96:	0f b6 4c 24 2c       	movzx  ecx,BYTE PTR [esp+0x2c]
c0025f9b:	8b 44 bc 50          	mov    eax,DWORD PTR [esp+edi*4+0x50]
c0025f9f:	89 c2                	mov    edx,eax
c0025fa1:	d3 fa                	sar    edx,cl
c0025fa3:	01 d5                	add    ebp,edx
c0025fa5:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0025fa9:	d3 e2                	shl    edx,cl
c0025fab:	b9 17 00 00 00       	mov    ecx,0x17
c0025fb0:	29 d0                	sub    eax,edx
c0025fb2:	89 44 bc 50          	mov    DWORD PTR [esp+edi*4+0x50],eax
c0025fb6:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0025fba:	29 f9                	sub    ecx,edi
c0025fbc:	d3 f8                	sar    eax,cl
c0025fbe:	89 c5                	mov    ebp,eax
c0025fc0:	85 ed                	test   ebp,ebp
c0025fc2:	0f 8f 0e 01 00 00    	jg     c00260d6 <__kernel_rem_pio2+0x3d6>
c0025fc8:	d9 ee                	fldz   
c0025fca:	d9 c9                	fxch   st(1)
c0025fcc:	db e9                	fucomi st,st(1)
c0025fce:	dd d9                	fstp   st(1)
c0025fd0:	0f 8a a2 01 00 00    	jp     c0026178 <__kernel_rem_pio2+0x478>
c0025fd6:	0f 85 9c 01 00 00    	jne    c0026178 <__kernel_rem_pio2+0x478>
c0025fdc:	dd d8                	fstp   st(0)
c0025fde:	8d 7e ff             	lea    edi,[esi-0x1]
c0025fe1:	39 7c 24 28          	cmp    DWORD PTR [esp+0x28],edi
c0025fe5:	7f 2a                	jg     c0026011 <__kernel_rem_pio2+0x311>
c0025fe7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0025feb:	8d 44 b4 4c          	lea    eax,[esp+esi*4+0x4c]
c0025fef:	31 d2                	xor    edx,edx
c0025ff1:	eb 0d                	jmp    c0026000 <__kernel_rem_pio2+0x300>
c0025ff3:	90                   	nop
c0025ff4:	90                   	nop
c0025ff5:	90                   	nop
c0025ff6:	90                   	nop
c0025ff7:	90                   	nop
c0025ff8:	90                   	nop
c0025ff9:	90                   	nop
c0025ffa:	90                   	nop
c0025ffb:	90                   	nop
c0025ffc:	90                   	nop
c0025ffd:	90                   	nop
c0025ffe:	90                   	nop
c0025fff:	90                   	nop
c0026000:	0b 10                	or     edx,DWORD PTR [eax]
c0026002:	83 e8 04             	sub    eax,0x4
c0026005:	39 c1                	cmp    ecx,eax
c0026007:	75 f7                	jne    c0026000 <__kernel_rem_pio2+0x300>
c0026009:	85 d2                	test   edx,edx
c002600b:	0f 85 85 02 00 00    	jne    c0026296 <__kernel_rem_pio2+0x596>
c0026011:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0026015:	8b 4c 84 4c          	mov    ecx,DWORD PTR [esp+eax*4+0x4c]
c0026019:	85 c9                	test   ecx,ecx
c002601b:	0f 85 48 02 00 00    	jne    c0026269 <__kernel_rem_pio2+0x569>
c0026021:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0026025:	bf 01 00 00 00       	mov    edi,0x1
c002602a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0026030:	83 e8 04             	sub    eax,0x4
c0026033:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0026036:	47                   	inc    edi
c0026037:	85 d2                	test   edx,edx
c0026039:	74 f5                	je     c0026030 <__kernel_rem_pio2+0x330>
c002603b:	8d 4e 01             	lea    ecx,[esi+0x1]
c002603e:	01 f7                	add    edi,esi
c0026040:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c0026047:	8d ac 24 e0 01 00 00 	lea    ebp,[esp+0x1e0]
c002604e:	01 c6                	add    esi,eax
c0026050:	8d b4 f4 a0 00 00 00 	lea    esi,[esp+esi*8+0xa0]
c0026057:	89 f6                	mov    esi,esi
c0026059:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026060:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026064:	db 84 88 00 c1 02 c0 	fild   DWORD PTR [eax+ecx*4-0x3ffd3f00]
c002606b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002606f:	85 c0                	test   eax,eax
c0026071:	dd 1e                	fstp   QWORD PTR [esi]
c0026073:	78 3b                	js     c00260b0 <__kernel_rem_pio2+0x3b0>
c0026075:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c002607c:	d9 ee                	fldz   
c002607e:	89 f2                	mov    edx,esi
c0026080:	dd 02                	fld    QWORD PTR [edx]
c0026082:	83 c0 08             	add    eax,0x8
c0026085:	83 ea 08             	sub    edx,0x8
c0026088:	dc 48 f8             	fmul   QWORD PTR [eax-0x8]
c002608b:	39 c3                	cmp    ebx,eax
c002608d:	de c1                	faddp  st(1),st
c002608f:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0026093:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026097:	75 e7                	jne    c0026080 <__kernel_rem_pio2+0x380>
c0026099:	dd 5c cd 00          	fstp   QWORD PTR [ebp+ecx*8+0x0]
c002609d:	41                   	inc    ecx
c002609e:	83 c6 08             	add    esi,0x8
c00260a1:	39 cf                	cmp    edi,ecx
c00260a3:	7d bb                	jge    c0026060 <__kernel_rem_pio2+0x360>
c00260a5:	89 fe                	mov    esi,edi
c00260a7:	e9 f4 fd ff ff       	jmp    c0025ea0 <__kernel_rem_pio2+0x1a0>
c00260ac:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00260b0:	d9 ee                	fldz   
c00260b2:	83 c6 08             	add    esi,0x8
c00260b5:	dd 5c cd 00          	fstp   QWORD PTR [ebp+ecx*8+0x0]
c00260b9:	41                   	inc    ecx
c00260ba:	39 cf                	cmp    edi,ecx
c00260bc:	7d a2                	jge    c0026060 <__kernel_rem_pio2+0x360>
c00260be:	eb e5                	jmp    c00260a5 <__kernel_rem_pio2+0x3a5>
c00260c0:	0f 85 8a 01 00 00    	jne    c0026250 <__kernel_rem_pio2+0x550>
c00260c6:	8b 6c b4 4c          	mov    ebp,DWORD PTR [esp+esi*4+0x4c]
c00260ca:	c1 fd 17             	sar    ebp,0x17
c00260cd:	85 ed                	test   ebp,ebp
c00260cf:	90                   	nop
c00260d0:	0f 8e f2 fe ff ff    	jle    c0025fc8 <__kernel_rem_pio2+0x2c8>
c00260d6:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00260da:	85 f6                	test   esi,esi
c00260dc:	0f 8e d3 04 00 00    	jle    c00265b5 <__kernel_rem_pio2+0x8b5>
c00260e2:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00260e6:	85 d2                	test   edx,edx
c00260e8:	0f 85 12 01 00 00    	jne    c0026200 <__kernel_rem_pio2+0x500>
c00260ee:	83 fe 01             	cmp    esi,0x1
c00260f1:	b9 01 00 00 00       	mov    ecx,0x1
c00260f6:	74 15                	je     c002610d <__kernel_rem_pio2+0x40d>
c00260f8:	8b 54 8c 50          	mov    edx,DWORD PTR [esp+ecx*4+0x50]
c00260fc:	8d 41 01             	lea    eax,[ecx+0x1]
c00260ff:	85 d2                	test   edx,edx
c0026101:	0f 85 00 01 00 00    	jne    c0026207 <__kernel_rem_pio2+0x507>
c0026107:	39 c6                	cmp    esi,eax
c0026109:	89 c1                	mov    ecx,eax
c002610b:	75 eb                	jne    c00260f8 <__kernel_rem_pio2+0x3f8>
c002610d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0026111:	85 c0                	test   eax,eax
c0026113:	7e 16                	jle    c002612b <__kernel_rem_pio2+0x42b>
c0026115:	83 f8 01             	cmp    eax,0x1
c0026118:	0f 84 51 04 00 00    	je     c002656f <__kernel_rem_pio2+0x86f>
c002611e:	83 f8 02             	cmp    eax,0x2
c0026121:	75 08                	jne    c002612b <__kernel_rem_pio2+0x42b>
c0026123:	81 64 b4 4c ff ff 3f 00 	and    DWORD PTR [esp+esi*4+0x4c],0x3fffff
c002612b:	83 fd 02             	cmp    ebp,0x2
c002612e:	0f 85 94 fe ff ff    	jne    c0025fc8 <__kernel_rem_pio2+0x2c8>
c0026134:	d9 e8                	fld1   
c0026136:	85 d2                	test   edx,edx
c0026138:	de e1                	fsubrp st(1),st
c002613a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002613e:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026142:	0f 84 80 fe ff ff    	je     c0025fc8 <__kernel_rem_pio2+0x2c8>
c0026148:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002614c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0026150:	d9 e8                	fld1   
c0026152:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026155:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026159:	e8 be f5 ff ff       	call   c002571c <ldexp>
c002615e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0026162:	de e1                	fsubrp st(1),st
c0026164:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0026168:	d9 ee                	fldz   
c002616a:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002616e:	db e9                	fucomi st,st(1)
c0026170:	dd d9                	fstp   st(1)
c0026172:	0f 8b 5e fe ff ff    	jnp    c0025fd6 <__kernel_rem_pio2+0x2d6>
c0026178:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c002617c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002617f:	89 d8                	mov    eax,ebx
c0026181:	f7 d8                	neg    eax
c0026183:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026187:	e8 90 f5 ff ff       	call   c002571c <ldexp>
c002618c:	d9 05 b4 c0 02 c0    	fld    DWORD PTR ds:0xc002c0b4
c0026192:	d9 c9                	fxch   st(1)
c0026194:	db f1                	fcomi  st,st(1)
c0026196:	dd d9                	fstp   st(1)
c0026198:	0f 82 94 04 00 00    	jb     c0026632 <__kernel_rem_pio2+0x932>
c002619e:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c00261a2:	83 c3 18             	add    ebx,0x18
c00261a5:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c00261a9:	d9 c0                	fld    st(0)
c00261ab:	d8 0d dc cb 02 c0    	fmul   DWORD PTR ds:0xc002cbdc
c00261b1:	8d 7e 01             	lea    edi,[esi+0x1]
c00261b4:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c00261b9:	66 0d 00 0c          	or     ax,0xc00
c00261bd:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c00261c2:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c00261c6:	db 5c 24 40          	fistp  DWORD PTR [esp+0x40]
c00261ca:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c00261ce:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00261d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00261d6:	db 44 24 1c          	fild   DWORD PTR [esp+0x1c]
c00261da:	d8 0d b4 c0 02 c0    	fmul   DWORD PTR ds:0xc002c0b4
c00261e0:	de e9                	fsubp  st(1),st
c00261e2:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c00261e6:	db 5c b4 50          	fistp  DWORD PTR [esp+esi*4+0x50]
c00261ea:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c00261ee:	89 44 bc 50          	mov    DWORD PTR [esp+edi*4+0x50],eax
c00261f2:	89 d8                	mov    eax,ebx
c00261f4:	e9 be 00 00 00       	jmp    c00262b7 <__kernel_rem_pio2+0x5b7>
c00261f9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026200:	b8 01 00 00 00       	mov    eax,0x1
c0026205:	31 c9                	xor    ecx,ecx
c0026207:	bf 00 00 00 01       	mov    edi,0x1000000
c002620c:	29 d7                	sub    edi,edx
c002620e:	39 c6                	cmp    esi,eax
c0026210:	89 7c 8c 50          	mov    DWORD PTR [esp+ecx*4+0x50],edi
c0026214:	7e 30                	jle    c0026246 <__kernel_rem_pio2+0x546>
c0026216:	8b 4c 84 50          	mov    ecx,DWORD PTR [esp+eax*4+0x50]
c002621a:	ba ff ff ff 00       	mov    edx,0xffffff
c002621f:	29 ca                	sub    edx,ecx
c0026221:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0026225:	40                   	inc    eax
c0026226:	39 c6                	cmp    esi,eax
c0026228:	7e 1c                	jle    c0026246 <__kernel_rem_pio2+0x546>
c002622a:	8d 44 84 50          	lea    eax,[esp+eax*4+0x50]
c002622e:	b9 ff ff ff 00       	mov    ecx,0xffffff
c0026233:	8d 7c b4 50          	lea    edi,[esp+esi*4+0x50]
c0026237:	89 ca                	mov    edx,ecx
c0026239:	83 c0 04             	add    eax,0x4
c002623c:	2b 50 fc             	sub    edx,DWORD PTR [eax-0x4]
c002623f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0026242:	39 c7                	cmp    edi,eax
c0026244:	75 f1                	jne    c0026237 <__kernel_rem_pio2+0x537>
c0026246:	ba 01 00 00 00       	mov    edx,0x1
c002624b:	e9 bd fe ff ff       	jmp    c002610d <__kernel_rem_pio2+0x40d>
c0026250:	d9 05 94 bd 02 c0    	fld    DWORD PTR ds:0xc002bd94
c0026256:	d9 c9                	fxch   st(1)
c0026258:	db f1                	fcomi  st,st(1)
c002625a:	dd d9                	fstp   st(1)
c002625c:	0f 83 2a 03 00 00    	jae    c002658c <__kernel_rem_pio2+0x88c>
c0026262:	31 ed                	xor    ebp,ebp
c0026264:	e9 5f fd ff ff       	jmp    c0025fc8 <__kernel_rem_pio2+0x2c8>
c0026269:	8d 4e 01             	lea    ecx,[esi+0x1]
c002626c:	89 cf                	mov    edi,ecx
c002626e:	e9 cd fd ff ff       	jmp    c0026040 <__kernel_rem_pio2+0x340>
c0026273:	8d 8c 24 a0 00 00 00 	lea    ecx,[esp+0xa0]
c002627a:	31 c0                	xor    eax,eax
c002627c:	e9 2e fb ff ff       	jmp    c0025daf <__kernel_rem_pio2+0xaf>
c0026281:	d9 ee                	fldz   
c0026283:	dd 1c 1e             	fstp   QWORD PTR [esi+ebx*1]
c0026286:	83 c3 08             	add    ebx,0x8
c0026289:	39 dd                	cmp    ebp,ebx
c002628b:	0f 85 7f fb ff ff    	jne    c0025e10 <__kernel_rem_pio2+0x110>
c0026291:	e9 bd fb ff ff       	jmp    c0025e53 <__kernel_rem_pio2+0x153>
c0026296:	8b 5c bc 50          	mov    ebx,DWORD PTR [esp+edi*4+0x50]
c002629a:	83 6c 24 24 18       	sub    DWORD PTR [esp+0x24],0x18
c002629f:	85 db                	test   ebx,ebx
c00262a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00262a5:	75 10                	jne    c00262b7 <__kernel_rem_pio2+0x5b7>
c00262a7:	4f                   	dec    edi
c00262a8:	83 e8 18             	sub    eax,0x18
c00262ab:	8b 4c bc 50          	mov    ecx,DWORD PTR [esp+edi*4+0x50]
c00262af:	85 c9                	test   ecx,ecx
c00262b1:	74 f4                	je     c00262a7 <__kernel_rem_pio2+0x5a7>
c00262b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00262b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00262bb:	d9 e8                	fld1   
c00262bd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00262c0:	e8 57 f4 ff ff       	call   c002571c <ldexp>
c00262c5:	85 ff                	test   edi,edi
c00262c7:	0f 88 d2 03 00 00    	js     c002669f <__kernel_rem_pio2+0x99f>
c00262cd:	8d b4 24 e0 01 00 00 	lea    esi,[esp+0x1e0]
c00262d4:	89 f8                	mov    eax,edi
c00262d6:	8d 76 00             	lea    esi,[esi+0x0]
c00262d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00262e0:	db 44 84 50          	fild   DWORD PTR [esp+eax*4+0x50]
c00262e4:	d8 c9                	fmul   st,st(1)
c00262e6:	dd 1c c6             	fstp   QWORD PTR [esi+eax*8]
c00262e9:	48                   	dec    eax
c00262ea:	d8 0d dc cb 02 c0    	fmul   DWORD PTR ds:0xc002cbdc
c00262f0:	83 f8 ff             	cmp    eax,0xffffffff
c00262f3:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00262f7:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00262fb:	75 e3                	jne    c00262e0 <__kernel_rem_pio2+0x5e0>
c00262fd:	dd d8                	fstp   st(0)
c00262ff:	8d 04 fd 00 00 00 00 	lea    eax,[edi*8+0x0]
c0026306:	31 d2                	xor    edx,edx
c0026308:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002630c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026310:	8d 8c 24 40 01 00 00 	lea    ecx,[esp+0x140]
c0026317:	01 f0                	add    eax,esi
c0026319:	89 6c 24 20          	mov    DWORD PTR [esp+0x20],ebp
c002631d:	eb 03                	jmp    c0026322 <__kernel_rem_pio2+0x622>
c002631f:	90                   	nop
c0026320:	89 e8                	mov    eax,ebp
c0026322:	85 db                	test   ebx,ebx
c0026324:	0f 88 84 02 00 00    	js     c00265ae <__kernel_rem_pio2+0x8ae>
c002632a:	d9 05 fc cb 02 c0    	fld    DWORD PTR ds:0xc002cbfc
c0026330:	dc 08                	fmul   QWORD PTR [eax]
c0026332:	d8 05 d8 cb 02 c0    	fadd   DWORD PTR ds:0xc002cbd8
c0026338:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002633c:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026340:	0f 84 d9 00 00 00    	je     c002641f <__kernel_rem_pio2+0x71f>
c0026346:	85 d2                	test   edx,edx
c0026348:	0f 84 d1 00 00 00    	je     c002641f <__kernel_rem_pio2+0x71f>
c002634e:	d9 05 e8 cb 02 c0    	fld    DWORD PTR ds:0xc002cbe8
c0026354:	83 fb 01             	cmp    ebx,0x1
c0026357:	dc 48 08             	fmul   QWORD PTR [eax+0x8]
c002635a:	de c1                	faddp  st(1),st
c002635c:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0026360:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026364:	0f 84 b5 00 00 00    	je     c002641f <__kernel_rem_pio2+0x71f>
c002636a:	83 fa 01             	cmp    edx,0x1
c002636d:	0f 84 ac 00 00 00    	je     c002641f <__kernel_rem_pio2+0x71f>
c0026373:	d9 05 ec cb 02 c0    	fld    DWORD PTR ds:0xc002cbec
c0026379:	83 fb 02             	cmp    ebx,0x2
c002637c:	dc 48 10             	fmul   QWORD PTR [eax+0x10]
c002637f:	de c1                	faddp  st(1),st
c0026381:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0026385:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026389:	0f 84 90 00 00 00    	je     c002641f <__kernel_rem_pio2+0x71f>
c002638f:	83 fa 02             	cmp    edx,0x2
c0026392:	0f 84 87 00 00 00    	je     c002641f <__kernel_rem_pio2+0x71f>
c0026398:	d9 05 f0 cb 02 c0    	fld    DWORD PTR ds:0xc002cbf0
c002639e:	83 fb 03             	cmp    ebx,0x3
c00263a1:	dc 48 18             	fmul   QWORD PTR [eax+0x18]
c00263a4:	de c1                	faddp  st(1),st
c00263a6:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00263aa:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00263ae:	74 6f                	je     c002641f <__kernel_rem_pio2+0x71f>
c00263b0:	83 fa 03             	cmp    edx,0x3
c00263b3:	74 6a                	je     c002641f <__kernel_rem_pio2+0x71f>
c00263b5:	d9 05 f4 cb 02 c0    	fld    DWORD PTR ds:0xc002cbf4
c00263bb:	83 fb 04             	cmp    ebx,0x4
c00263be:	dc 48 20             	fmul   QWORD PTR [eax+0x20]
c00263c1:	de c1                	faddp  st(1),st
c00263c3:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00263c7:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00263cb:	74 52                	je     c002641f <__kernel_rem_pio2+0x71f>
c00263cd:	83 fa 04             	cmp    edx,0x4
c00263d0:	74 4d                	je     c002641f <__kernel_rem_pio2+0x71f>
c00263d2:	d9 05 f8 cb 02 c0    	fld    DWORD PTR ds:0xc002cbf8
c00263d8:	83 fb 05             	cmp    ebx,0x5
c00263db:	dc 48 28             	fmul   QWORD PTR [eax+0x28]
c00263de:	de c1                	faddp  st(1),st
c00263e0:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00263e4:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00263e8:	74 35                	je     c002641f <__kernel_rem_pio2+0x71f>
c00263ea:	83 fa 05             	cmp    edx,0x5
c00263ed:	74 30                	je     c002641f <__kernel_rem_pio2+0x71f>
c00263ef:	dd 05 00 cc 02 c0    	fld    QWORD PTR ds:0xc002cc00
c00263f5:	83 fb 06             	cmp    ebx,0x6
c00263f8:	dc 48 30             	fmul   QWORD PTR [eax+0x30]
c00263fb:	de c1                	faddp  st(1),st
c00263fd:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0026401:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026405:	74 18                	je     c002641f <__kernel_rem_pio2+0x71f>
c0026407:	83 fa 06             	cmp    edx,0x6
c002640a:	74 13                	je     c002641f <__kernel_rem_pio2+0x71f>
c002640c:	dd 05 08 cc 02 c0    	fld    QWORD PTR ds:0xc002cc08
c0026412:	dc 48 38             	fmul   QWORD PTR [eax+0x38]
c0026415:	de c1                	faddp  st(1),st
c0026417:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002641b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002641f:	dd 1c d1             	fstp   QWORD PTR [ecx+edx*8]
c0026422:	42                   	inc    edx
c0026423:	8d 68 f8             	lea    ebp,[eax-0x8]
c0026426:	39 c6                	cmp    esi,eax
c0026428:	0f 85 f2 fe ff ff    	jne    c0026320 <__kernel_rem_pio2+0x620>
c002642e:	83 bc 24 b0 02 00 00 02 	cmp    DWORD PTR [esp+0x2b0],0x2
c0026436:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002643a:	7f 4f                	jg     c002648b <__kernel_rem_pio2+0x78b>
c002643c:	8b 84 24 b0 02 00 00 	mov    eax,DWORD PTR [esp+0x2b0]
c0026443:	85 c0                	test   eax,eax
c0026445:	0f 8f 71 01 00 00    	jg     c00265bc <__kernel_rem_pio2+0x8bc>
c002644b:	75 2c                	jne    c0026479 <__kernel_rem_pio2+0x779>
c002644d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026451:	d9 ee                	fldz   
c0026453:	01 c8                	add    eax,ecx
c0026455:	eb 02                	jmp    c0026459 <__kernel_rem_pio2+0x759>
c0026457:	89 d0                	mov    eax,edx
c0026459:	39 c8                	cmp    eax,ecx
c002645b:	dc 00                	fadd   QWORD PTR [eax]
c002645d:	8d 50 f8             	lea    edx,[eax-0x8]
c0026460:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0026464:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026468:	75 ed                	jne    c0026457 <__kernel_rem_pio2+0x757>
c002646a:	85 ed                	test   ebp,ebp
c002646c:	74 02                	je     c0026470 <__kernel_rem_pio2+0x770>
c002646e:	d9 e0                	fchs   
c0026470:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0026477:	dd 18                	fstp   QWORD PTR [eax]
c0026479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002647d:	81 c4 8c 02 00 00    	add    esp,0x28c
c0026483:	5b                   	pop    ebx
c0026484:	5e                   	pop    esi
c0026485:	83 e0 07             	and    eax,0x7
c0026488:	5f                   	pop    edi
c0026489:	5d                   	pop    ebp
c002648a:	c3                   	ret    
c002648b:	83 bc 24 b0 02 00 00 03 	cmp    DWORD PTR [esp+0x2b0],0x3
c0026493:	75 e4                	jne    c0026479 <__kernel_rem_pio2+0x779>
c0026495:	85 ff                	test   edi,edi
c0026497:	0f 8e 38 02 00 00    	jle    c00266d5 <__kernel_rem_pio2+0x9d5>
c002649d:	8d 14 fd 00 00 00 00 	lea    edx,[edi*8+0x0]
c00264a4:	8d 8c 24 40 01 00 00 	lea    ecx,[esp+0x140]
c00264ab:	dd 84 14 40 01 00 00 	fld    QWORD PTR [esp+edx*1+0x140]
c00264b2:	8d 44 11 f8          	lea    eax,[ecx+edx*1-0x8]
c00264b6:	eb 02                	jmp    c00264ba <__kernel_rem_pio2+0x7ba>
c00264b8:	89 d0                	mov    eax,edx
c00264ba:	dd 00                	fld    QWORD PTR [eax]
c00264bc:	8d 50 f8             	lea    edx,[eax-0x8]
c00264bf:	39 c1                	cmp    ecx,eax
c00264c1:	d9 c1                	fld    st(1)
c00264c3:	d9 c1                	fld    st(1)
c00264c5:	de c3                	faddp  st(3),st
c00264c7:	d9 ca                	fxch   st(2)
c00264c9:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00264cd:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00264d1:	d9 c0                	fld    st(0)
c00264d3:	dc ea                	fsub   st(2),st
c00264d5:	d9 ca                	fxch   st(2)
c00264d7:	de c3                	faddp  st(3),st
c00264d9:	d9 ca                	fxch   st(2)
c00264db:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c00264de:	d9 c9                	fxch   st(1)
c00264e0:	dd 18                	fstp   QWORD PTR [eax]
c00264e2:	75 d4                	jne    c00264b8 <__kernel_rem_pio2+0x7b8>
c00264e4:	dd d8                	fstp   st(0)
c00264e6:	83 ff 01             	cmp    edi,0x1
c00264e9:	0f 8e e6 01 00 00    	jle    c00266d5 <__kernel_rem_pio2+0x9d5>
c00264ef:	c1 e7 03             	shl    edi,0x3
c00264f2:	8d 44 39 f8          	lea    eax,[ecx+edi*1-0x8]
c00264f6:	dd 84 3c 40 01 00 00 	fld    QWORD PTR [esp+edi*1+0x140]
c00264fd:	eb 02                	jmp    c0026501 <__kernel_rem_pio2+0x801>
c00264ff:	89 d0                	mov    eax,edx
c0026501:	dd 00                	fld    QWORD PTR [eax]
c0026503:	8d 50 f8             	lea    edx,[eax-0x8]
c0026506:	d9 c1                	fld    st(1)
c0026508:	39 d1                	cmp    ecx,edx
c002650a:	d9 c1                	fld    st(1)
c002650c:	de c3                	faddp  st(3),st
c002650e:	d9 ca                	fxch   st(2)
c0026510:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0026514:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026518:	d9 c0                	fld    st(0)
c002651a:	dc ea                	fsub   st(2),st
c002651c:	d9 ca                	fxch   st(2)
c002651e:	de c3                	faddp  st(3),st
c0026520:	d9 ca                	fxch   st(2)
c0026522:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c0026525:	d9 c9                	fxch   st(1)
c0026527:	dd 18                	fstp   QWORD PTR [eax]
c0026529:	75 d4                	jne    c00264ff <__kernel_rem_pio2+0x7ff>
c002652b:	dd d8                	fstp   st(0)
c002652d:	d9 ee                	fldz   
c002652f:	01 f9                	add    ecx,edi
c0026531:	83 e9 08             	sub    ecx,0x8
c0026534:	dc 41 08             	fadd   QWORD PTR [ecx+0x8]
c0026537:	39 c8                	cmp    eax,ecx
c0026539:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002653d:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026541:	75 ee                	jne    c0026531 <__kernel_rem_pio2+0x831>
c0026543:	dd 84 24 40 01 00 00 	fld    QWORD PTR [esp+0x140]
c002654a:	85 ed                	test   ebp,ebp
c002654c:	dd 84 24 48 01 00 00 	fld    QWORD PTR [esp+0x148]
c0026553:	0f 85 02 01 00 00    	jne    c002665b <__kernel_rem_pio2+0x95b>
c0026559:	d9 c9                	fxch   st(1)
c002655b:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0026562:	dd 18                	fstp   QWORD PTR [eax]
c0026564:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c0026567:	dd 58 10             	fstp   QWORD PTR [eax+0x10]
c002656a:	e9 0a ff ff ff       	jmp    c0026479 <__kernel_rem_pio2+0x779>
c002656f:	81 64 b4 4c ff ff 7f 00 	and    DWORD PTR [esp+esi*4+0x4c],0x7fffff
c0026577:	e9 af fb ff ff       	jmp    c002612b <__kernel_rem_pio2+0x42b>
c002657c:	31 d2                	xor    edx,edx
c002657e:	b8 e8 ff ff ff       	mov    eax,0xffffffe8
c0026583:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0026587:	e9 d3 f7 ff ff       	jmp    c0025d5f <__kernel_rem_pio2+0x5f>
c002658c:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0026590:	85 f6                	test   esi,esi
c0026592:	bd 02 00 00 00       	mov    ebp,0x2
c0026597:	0f 8f 45 fb ff ff    	jg     c00260e2 <__kernel_rem_pio2+0x3e2>
c002659d:	d9 e8                	fld1   
c002659f:	de e1                	fsubrp st(1),st
c00265a1:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00265a5:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00265a9:	e9 1a fa ff ff       	jmp    c0025fc8 <__kernel_rem_pio2+0x2c8>
c00265ae:	d9 ee                	fldz   
c00265b0:	e9 6a fe ff ff       	jmp    c002641f <__kernel_rem_pio2+0x71f>
c00265b5:	31 d2                	xor    edx,edx
c00265b7:	e9 51 fb ff ff       	jmp    c002610d <__kernel_rem_pio2+0x40d>
c00265bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00265c0:	d9 ee                	fldz   
c00265c2:	01 c8                	add    eax,ecx
c00265c4:	eb 02                	jmp    c00265c8 <__kernel_rem_pio2+0x8c8>
c00265c6:	89 d0                	mov    eax,edx
c00265c8:	39 c8                	cmp    eax,ecx
c00265ca:	dc 00                	fadd   QWORD PTR [eax]
c00265cc:	8d 50 f8             	lea    edx,[eax-0x8]
c00265cf:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00265d3:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00265d7:	75 ed                	jne    c00265c6 <__kernel_rem_pio2+0x8c6>
c00265d9:	d9 c0                	fld    st(0)
c00265db:	85 ed                	test   ebp,ebp
c00265dd:	0f 85 94 00 00 00    	jne    c0026677 <__kernel_rem_pio2+0x977>
c00265e3:	d9 c9                	fxch   st(1)
c00265e5:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c00265ec:	85 ff                	test   edi,edi
c00265ee:	dd 18                	fstp   QWORD PTR [eax]
c00265f0:	dc ac 24 40 01 00 00 	fsubr  QWORD PTR [esp+0x140]
c00265f7:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00265fb:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00265ff:	7e 22                	jle    c0026623 <__kernel_rem_pio2+0x923>
c0026601:	8d 84 24 48 01 00 00 	lea    eax,[esp+0x148]
c0026608:	8d 14 f8             	lea    edx,[eax+edi*8]
c002660b:	83 c0 08             	add    eax,0x8
c002660e:	dc 40 f8             	fadd   QWORD PTR [eax-0x8]
c0026611:	39 d0                	cmp    eax,edx
c0026613:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0026617:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002661b:	75 ee                	jne    c002660b <__kernel_rem_pio2+0x90b>
c002661d:	85 ed                	test   ebp,ebp
c002661f:	74 02                	je     c0026623 <__kernel_rem_pio2+0x923>
c0026621:	d9 e0                	fchs   
c0026623:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c002662a:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c002662d:	e9 47 fe ff ff       	jmp    c0026479 <__kernel_rem_pio2+0x779>
c0026632:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c0026636:	89 f7                	mov    edi,esi
c0026638:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c002663d:	66 0d 00 0c          	or     ax,0xc00
c0026641:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c0026646:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002664a:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c002664e:	db 5c b4 50          	fistp  DWORD PTR [esp+esi*4+0x50]
c0026652:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c0026656:	e9 5c fc ff ff       	jmp    c00262b7 <__kernel_rem_pio2+0x5b7>
c002665b:	d9 c9                	fxch   st(1)
c002665d:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0026664:	d9 e0                	fchs   
c0026666:	dd 18                	fstp   QWORD PTR [eax]
c0026668:	d9 e0                	fchs   
c002666a:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c002666d:	d9 e0                	fchs   
c002666f:	dd 58 10             	fstp   QWORD PTR [eax+0x10]
c0026672:	e9 02 fe ff ff       	jmp    c0026479 <__kernel_rem_pio2+0x779>
c0026677:	d9 c9                	fxch   st(1)
c0026679:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0026680:	d9 e0                	fchs   
c0026682:	85 ff                	test   edi,edi
c0026684:	dd 18                	fstp   QWORD PTR [eax]
c0026686:	dc ac 24 40 01 00 00 	fsubr  QWORD PTR [esp+0x140]
c002668d:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0026691:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026695:	0f 8f 66 ff ff ff    	jg     c0026601 <__kernel_rem_pio2+0x901>
c002669b:	d9 e0                	fchs   
c002669d:	eb 84                	jmp    c0026623 <__kernel_rem_pio2+0x923>
c002669f:	dd d8                	fstp   st(0)
c00266a1:	83 bc 24 b0 02 00 00 02 	cmp    DWORD PTR [esp+0x2b0],0x2
c00266a9:	0f 8f dc fd ff ff    	jg     c002648b <__kernel_rem_pio2+0x78b>
c00266af:	8b 94 24 b0 02 00 00 	mov    edx,DWORD PTR [esp+0x2b0]
c00266b6:	85 d2                	test   edx,edx
c00266b8:	7f 0d                	jg     c00266c7 <__kernel_rem_pio2+0x9c7>
c00266ba:	0f 85 b9 fd ff ff    	jne    c0026479 <__kernel_rem_pio2+0x779>
c00266c0:	d9 ee                	fldz   
c00266c2:	e9 a3 fd ff ff       	jmp    c002646a <__kernel_rem_pio2+0x76a>
c00266c7:	d9 ee                	fldz   
c00266c9:	d9 ee                	fldz   
c00266cb:	90                   	nop
c00266cc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00266d0:	e9 06 ff ff ff       	jmp    c00265db <__kernel_rem_pio2+0x8db>
c00266d5:	d9 ee                	fldz   
c00266d7:	e9 67 fe ff ff       	jmp    c0026543 <__kernel_rem_pio2+0x843>
c00266dc:	66 90                	xchg   ax,ax
c00266de:	66 90                	xchg   ax,ax

c00266e0 <__kernel_sin>:
c00266e0:	83 ec 0c             	sub    esp,0xc
c00266e3:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00266e7:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00266eb:	d9 c0                	fld    st(0)
c00266ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00266f1:	d8 c9                	fmul   st,st(1)
c00266f3:	85 c0                	test   eax,eax
c00266f5:	dd 1c 24             	fstp   QWORD PTR [esp]
c00266f8:	dd 04 24             	fld    QWORD PTR [esp]
c00266fb:	d9 c1                	fld    st(1)
c00266fd:	d8 c9                	fmul   st,st(1)
c00266ff:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026702:	dd 04 24             	fld    QWORD PTR [esp]
c0026705:	d9 c1                	fld    st(1)
c0026707:	d8 ca                	fmul   st,st(2)
c0026709:	dd 1c 24             	fstp   QWORD PTR [esp]
c002670c:	dd 04 24             	fld    QWORD PTR [esp]
c002670f:	d8 ca                	fmul   st,st(2)
c0026711:	d9 c2                	fld    st(2)
c0026713:	dc 0d 10 cc 02 c0    	fmul   QWORD PTR ds:0xc002cc10
c0026719:	dc 25 18 cc 02 c0    	fsub   QWORD PTR ds:0xc002cc18
c002671f:	de c9                	fmulp  st(1),st
c0026721:	d9 c2                	fld    st(2)
c0026723:	dc 0d 20 cc 02 c0    	fmul   QWORD PTR ds:0xc002cc20
c0026729:	dc 25 28 cc 02 c0    	fsub   QWORD PTR ds:0xc002cc28
c002672f:	d8 cb                	fmul   st,st(3)
c0026731:	dc 05 30 cc 02 c0    	fadd   QWORD PTR ds:0xc002cc30
c0026737:	de c1                	faddp  st(1),st
c0026739:	dd 1c 24             	fstp   QWORD PTR [esp]
c002673c:	dd 04 24             	fld    QWORD PTR [esp]
c002673f:	75 2f                	jne    c0026770 <__kernel_sin+0x90>
c0026741:	dd dc                	fstp   st(4)
c0026743:	d9 c9                	fxch   st(1)
c0026745:	d9 ca                	fxch   st(2)
c0026747:	d9 cb                	fxch   st(3)
c0026749:	de ca                	fmulp  st(2),st
c002674b:	d9 c9                	fxch   st(1)
c002674d:	dc 25 38 cc 02 c0    	fsub   QWORD PTR ds:0xc002cc38
c0026753:	de c9                	fmulp  st(1),st
c0026755:	de c1                	faddp  st(1),st
c0026757:	dd 1c 24             	fstp   QWORD PTR [esp]
c002675a:	dd 04 24             	fld    QWORD PTR [esp]
c002675d:	83 c4 0c             	add    esp,0xc
c0026760:	c3                   	ret    
c0026761:	eb 0d                	jmp    c0026770 <__kernel_sin+0x90>
c0026763:	90                   	nop
c0026764:	90                   	nop
c0026765:	90                   	nop
c0026766:	90                   	nop
c0026767:	90                   	nop
c0026768:	90                   	nop
c0026769:	90                   	nop
c002676a:	90                   	nop
c002676b:	90                   	nop
c002676c:	90                   	nop
c002676d:	90                   	nop
c002676e:	90                   	nop
c002676f:	90                   	nop
c0026770:	d9 c4                	fld    st(4)
c0026772:	d8 0d 94 bd 02 c0    	fmul   DWORD PTR ds:0xc002bd94
c0026778:	d9 c9                	fxch   st(1)
c002677a:	d8 ca                	fmul   st,st(2)
c002677c:	de e9                	fsubp  st(1),st
c002677e:	de ca                	fmulp  st(2),st
c0026780:	d9 c9                	fxch   st(1)
c0026782:	de e3                	fsubrp st(3),st
c0026784:	dc 0d 38 cc 02 c0    	fmul   QWORD PTR ds:0xc002cc38
c002678a:	de c2                	faddp  st(2),st
c002678c:	de e1                	fsubrp st(1),st
c002678e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026791:	dd 04 24             	fld    QWORD PTR [esp]
c0026794:	83 c4 0c             	add    esp,0xc
c0026797:	c3                   	ret    

Disassembly of section .init:

c0026798 <_init>:
c0026798:	55                   	push   ebp
c0026799:	89 e5                	mov    ebp,esp
c002679b:	e8 54 99 fd ff       	call   c00000f4 <frame_dummy>
c00267a0:	e8 0b c2 ff ff       	call   c00229b0 <__do_global_ctors_aux>
c00267a5:	5d                   	pop    ebp
c00267a6:	c3                   	ret    

Disassembly of section .fini:

c00267a7 <_fini>:
c00267a7:	55                   	push   ebp
c00267a8:	89 e5                	mov    ebp,esp
c00267aa:	e8 d5 98 fd ff       	call   c0000084 <__do_global_dtors_aux>
c00267af:	5d                   	pop    ebp
c00267b0:	c3                   	ret    

Disassembly of section .text._ZN12RootHardware10_getDriverEv:

c00267b4 <RootHardware::_getDriver()>:
c00267b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00267b8:	8b 40 54             	mov    eax,DWORD PTR [eax+0x54]
c00267bb:	c3                   	ret    

Disassembly of section .text._ZN12RootHardware7getTypeEv:

c00267bc <RootHardware::getType()>:
c00267bc:	b8 04 00 00 00       	mov    eax,0x4
c00267c1:	c3                   	ret    

Disassembly of section .text._ZN6DriverC2Ev:

c00267c4 <Driver::Driver()>:
c00267c4:	ba c4 8c 02 c0       	mov    edx,0xc0028cc4
c00267c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00267cd:	89 10                	mov    DWORD PTR [eax],edx
c00267cf:	90                   	nop
c00267d0:	c3                   	ret    

Disassembly of section .text._ZN10RootDriverC2Ev:

c00267d4 <RootDriver::RootDriver()>:
c00267d4:	83 ec 0c             	sub    esp,0xc
c00267d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267db:	83 ec 0c             	sub    esp,0xc
c00267de:	50                   	push   eax
c00267df:	e8 e0 ff ff ff       	call   c00267c4 <Driver::Driver()>
c00267e4:	83 c4 10             	add    esp,0x10
c00267e7:	ba 34 8d 02 c0       	mov    edx,0xc0028d34
c00267ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267f0:	89 10                	mov    DWORD PTR [eax],edx
c00267f2:	90                   	nop
c00267f3:	83 c4 0c             	add    esp,0xc
c00267f6:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorD2Ev:

c00267f8 <std::vector<Hardware*>::iterator::~iterator()>:
c00267f8:	90                   	nop
c00267f9:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorC2ERKS3_:

c00267fc <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>:
c00267fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026800:	8b 10                	mov    edx,DWORD PTR [eax]
c0026802:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026806:	89 10                	mov    DWORD PTR [eax],edx
c0026808:	90                   	nop
c0026809:	c3                   	ret    

Disassembly of section .text._ZNKSt6vectorIP8HardwareE8iteratorneERKS3_:

c002680c <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>:
c002680c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026810:	8b 10                	mov    edx,DWORD PTR [eax]
c0026812:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026816:	8b 00                	mov    eax,DWORD PTR [eax]
c0026818:	39 c2                	cmp    edx,eax
c002681a:	0f 95 c0             	setne  al
c002681d:	c3                   	ret    

Disassembly of section .text._ZNKSt6vectorIP8HardwareE8iteratordeEv:

c0026820 <std::vector<Hardware*>::iterator::operator*() const>:
c0026820:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026824:	8b 00                	mov    eax,DWORD PTR [eax]
c0026826:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareED2Ev:

c0026828 <std::vector<Hardware*>::~vector()>:
c0026828:	83 ec 0c             	sub    esp,0xc
c002682b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002682f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026832:	85 c0                	test   eax,eax
c0026834:	74 1e                	je     c0026854 <std::vector<Hardware*>::~vector()+0x2c>
c0026836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002683a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002683d:	85 c0                	test   eax,eax
c002683f:	74 13                	je     c0026854 <std::vector<Hardware*>::~vector()+0x2c>
c0026841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026845:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026848:	83 ec 0c             	sub    esp,0xc
c002684b:	50                   	push   eax
c002684c:	e8 88 72 fe ff       	call   c000dad9 <operator delete[](void*)>
c0026851:	83 c4 10             	add    esp,0x10
c0026854:	90                   	nop
c0026855:	83 c4 0c             	add    esp,0xc
c0026858:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeED2Ev:

c002685c <std::vector<DeviceMemoryRange>::~vector()>:
c002685c:	83 ec 0c             	sub    esp,0xc
c002685f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026863:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026866:	85 c0                	test   eax,eax
c0026868:	74 1e                	je     c0026888 <std::vector<DeviceMemoryRange>::~vector()+0x2c>
c002686a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002686e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026871:	85 c0                	test   eax,eax
c0026873:	74 13                	je     c0026888 <std::vector<DeviceMemoryRange>::~vector()+0x2c>
c0026875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026879:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002687c:	83 ec 0c             	sub    esp,0xc
c002687f:	50                   	push   eax
c0026880:	e8 54 72 fe ff       	call   c000dad9 <operator delete[](void*)>
c0026885:	83 c4 10             	add    esp,0x10
c0026888:	90                   	nop
c0026889:	83 c4 0c             	add    esp,0xc
c002688c:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeED2Ev:

c0026890 <std::vector<DevicePortRange>::~vector()>:
c0026890:	83 ec 0c             	sub    esp,0xc
c0026893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026897:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002689a:	85 c0                	test   eax,eax
c002689c:	74 1e                	je     c00268bc <std::vector<DevicePortRange>::~vector()+0x2c>
c002689e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268a2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00268a5:	85 c0                	test   eax,eax
c00268a7:	74 13                	je     c00268bc <std::vector<DevicePortRange>::~vector()+0x2c>
c00268a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268ad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00268b0:	83 ec 0c             	sub    esp,0xc
c00268b3:	50                   	push   eax
c00268b4:	e8 20 72 fe ff       	call   c000dad9 <operator delete[](void*)>
c00268b9:	83 c4 10             	add    esp,0x10
c00268bc:	90                   	nop
c00268bd:	83 c4 0c             	add    esp,0xc
c00268c0:	c3                   	ret    

Disassembly of section .text._ZN12RootHardwareD2Ev:

c00268c4 <RootHardware::~RootHardware()>:
c00268c4:	83 ec 0c             	sub    esp,0xc
c00268c7:	ba e0 8c 02 c0       	mov    edx,0xc0028ce0
c00268cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268d0:	89 10                	mov    DWORD PTR [eax],edx
c00268d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268d6:	83 ec 0c             	sub    esp,0xc
c00268d9:	50                   	push   eax
c00268da:	e8 69 0b fe ff       	call   c0007448 <Hardware::~Hardware()>
c00268df:	83 c4 10             	add    esp,0x10
c00268e2:	90                   	nop
c00268e3:	83 c4 0c             	add    esp,0xc
c00268e6:	c3                   	ret    

Disassembly of section .text._ZN12RootHardwareD0Ev:

c00268e8 <RootHardware::~RootHardware()>:
c00268e8:	83 ec 0c             	sub    esp,0xc
c00268eb:	83 ec 0c             	sub    esp,0xc
c00268ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00268f2:	e8 cd ff ff ff       	call   c00268c4 <RootHardware::~RootHardware()>
c00268f7:	83 c4 10             	add    esp,0x10
c00268fa:	83 ec 08             	sub    esp,0x8
c00268fd:	6a 58                	push   0x58
c00268ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026903:	e8 cc 71 fe ff       	call   c000dad4 <operator delete(void*, unsigned long)>
c0026908:	83 c4 10             	add    esp,0x10
c002690b:	83 c4 0c             	add    esp,0xc
c002690e:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareEC2Ev:

c0026910 <std::vector<Hardware*>::vector()>:
c0026910:	83 ec 1c             	sub    esp,0x1c
c0026913:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026917:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c002691e:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0026926:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002692a:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c002692f:	77 07                	ja     c0026938 <std::vector<Hardware*>::vector()+0x28>
c0026931:	c1 e0 02             	shl    eax,0x2
c0026934:	eb 0a                	jmp    c0026940 <std::vector<Hardware*>::vector()+0x30>
c0026936:	66 90                	xchg   ax,ax
c0026938:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002693d:	8d 76 00             	lea    esi,[esi+0x0]
c0026940:	83 ec 0c             	sub    esp,0xc
c0026943:	50                   	push   eax
c0026944:	e8 86 71 fe ff       	call   c000dacf <operator new[](unsigned long)>
c0026949:	83 c4 10             	add    esp,0x10
c002694c:	89 c2                	mov    edx,eax
c002694e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026952:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026955:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026959:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002695c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026960:	89 10                	mov    DWORD PTR [eax],edx
c0026962:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026966:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0026969:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002696d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026970:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026974:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c002697b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002697f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026983:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0026986:	90                   	nop
c0026987:	83 c4 1c             	add    esp,0x1c
c002698a:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeEC2Ev:

c002698c <std::vector<DeviceMemoryRange>::vector()>:
c002698c:	83 ec 1c             	sub    esp,0x1c
c002698f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026993:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c002699a:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00269a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00269a6:	3d ff ff ff 0f       	cmp    eax,0xfffffff
c00269ab:	77 07                	ja     c00269b4 <std::vector<DeviceMemoryRange>::vector()+0x28>
c00269ad:	c1 e0 03             	shl    eax,0x3
c00269b0:	eb 0a                	jmp    c00269bc <std::vector<DeviceMemoryRange>::vector()+0x30>
c00269b2:	66 90                	xchg   ax,ax
c00269b4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00269b9:	8d 76 00             	lea    esi,[esi+0x0]
c00269bc:	83 ec 0c             	sub    esp,0xc
c00269bf:	50                   	push   eax
c00269c0:	e8 0a 71 fe ff       	call   c000dacf <operator new[](unsigned long)>
c00269c5:	83 c4 10             	add    esp,0x10
c00269c8:	89 c2                	mov    edx,eax
c00269ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00269ce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00269d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00269d5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00269d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00269dc:	89 10                	mov    DWORD PTR [eax],edx
c00269de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00269e2:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00269e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00269e9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00269ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00269f0:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00269f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00269fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00269ff:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0026a02:	90                   	nop
c0026a03:	83 c4 1c             	add    esp,0x1c
c0026a06:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeEC2Ev:

c0026a08 <std::vector<DevicePortRange>::vector()>:
c0026a08:	83 ec 1c             	sub    esp,0x1c
c0026a0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026a0f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0026a16:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0026a1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026a22:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c0026a27:	77 07                	ja     c0026a30 <std::vector<DevicePortRange>::vector()+0x28>
c0026a29:	c1 e0 02             	shl    eax,0x2
c0026a2c:	eb 0a                	jmp    c0026a38 <std::vector<DevicePortRange>::vector()+0x30>
c0026a2e:	66 90                	xchg   ax,ax
c0026a30:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026a35:	8d 76 00             	lea    esi,[esi+0x0]
c0026a38:	83 ec 0c             	sub    esp,0xc
c0026a3b:	50                   	push   eax
c0026a3c:	e8 8e 70 fe ff       	call   c000dacf <operator new[](unsigned long)>
c0026a41:	83 c4 10             	add    esp,0x10
c0026a44:	89 c2                	mov    edx,eax
c0026a46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026a4a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026a4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026a51:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0026a54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026a58:	89 10                	mov    DWORD PTR [eax],edx
c0026a5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026a5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0026a61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026a65:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026a68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026a6c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0026a73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026a77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026a7b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0026a7e:	90                   	nop
c0026a7f:	83 c4 1c             	add    esp,0x1c
c0026a82:	c3                   	ret    

Disassembly of section .text._ZN12RootHardwareC2Ev:

c0026a84 <RootHardware::RootHardware()>:
c0026a84:	53                   	push   ebx
c0026a85:	83 ec 18             	sub    esp,0x18
c0026a88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026a8c:	83 ec 0c             	sub    esp,0xc
c0026a8f:	50                   	push   eax
c0026a90:	e8 27 0a fe ff       	call   c00074bc <Hardware::Hardware()>
c0026a95:	83 c4 10             	add    esp,0x10
c0026a98:	ba e0 8c 02 c0       	mov    edx,0xc0028ce0
c0026a9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026aa1:	89 10                	mov    DWORD PTR [eax],edx
c0026aa3:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0026aab:	83 ec 0c             	sub    esp,0xc
c0026aae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0026ab2:	e8 1d 94 fe ff       	call   c000fed4 <malloc>
c0026ab7:	83 c4 10             	add    esp,0x10
c0026aba:	89 c3                	mov    ebx,eax
c0026abc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0026ac2:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0026ac9:	83 ec 0c             	sub    esp,0xc
c0026acc:	53                   	push   ebx
c0026acd:	e8 02 fd ff ff       	call   c00267d4 <RootDriver::RootDriver()>
c0026ad2:	83 c4 10             	add    esp,0x10
c0026ad5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026ad9:	89 58 54             	mov    DWORD PTR [eax+0x54],ebx
c0026adc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026ae0:	8b 40 54             	mov    eax,DWORD PTR [eax+0x54]
c0026ae3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026ae7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026aea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026aee:	8b 50 54             	mov    edx,DWORD PTR [eax+0x54]
c0026af1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026af5:	8b 40 54             	mov    eax,DWORD PTR [eax+0x54]
c0026af8:	8b 00                	mov    eax,DWORD PTR [eax]
c0026afa:	83 c0 04             	add    eax,0x4
c0026afd:	8b 00                	mov    eax,DWORD PTR [eax]
c0026aff:	83 ec 0c             	sub    esp,0xc
c0026b02:	52                   	push   edx
c0026b03:	ff d0                	call   eax
c0026b05:	83 c4 10             	add    esp,0x10
c0026b08:	90                   	nop
c0026b09:	83 c4 18             	add    esp,0x18
c0026b0c:	5b                   	pop    ebx
c0026b0d:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorC2EPS1_:

c0026b10 <std::vector<Hardware*>::iterator::iterator(Hardware**)>:
c0026b10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026b14:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0026b18:	89 10                	mov    DWORD PTR [eax],edx
c0026b1a:	90                   	nop
c0026b1b:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE5beginEv:

c0026b1c <std::vector<Hardware*>::begin()>:
c0026b1c:	83 ec 0c             	sub    esp,0xc
c0026b1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026b23:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b25:	83 ec 08             	sub    esp,0x8
c0026b28:	50                   	push   eax
c0026b29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b2d:	e8 de ff ff ff       	call   c0026b10 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0026b32:	83 c4 10             	add    esp,0x10
c0026b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b39:	83 c4 0c             	add    esp,0xc
c0026b3c:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE3endEv:

c0026b40 <std::vector<Hardware*>::end()>:
c0026b40:	83 ec 0c             	sub    esp,0xc
c0026b43:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026b47:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026b4a:	83 ec 08             	sub    esp,0x8
c0026b4d:	50                   	push   eax
c0026b4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b52:	e8 b9 ff ff ff       	call   c0026b10 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0026b57:	83 c4 10             	add    esp,0x10
c0026b5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b5e:	83 c4 0c             	add    esp,0xc
c0026b61:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorppEv:

c0026b64 <std::vector<Hardware*>::iterator::operator++()>:
c0026b64:	83 ec 0c             	sub    esp,0xc
c0026b67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026b6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b6d:	8d 50 04             	lea    edx,[eax+0x4]
c0026b70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026b74:	89 10                	mov    DWORD PTR [eax],edx
c0026b76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026b7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b7c:	83 ec 08             	sub    esp,0x8
c0026b7f:	50                   	push   eax
c0026b80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b84:	e8 87 ff ff ff       	call   c0026b10 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0026b89:	83 c4 10             	add    esp,0x10
c0026b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b90:	83 c4 0c             	add    esp,0xc
c0026b93:	c2 04 00             	ret    0x4

Disassembly of section .text._ZSt4findINSt6vectorIP8HardwareE8iteratorES2_ET_S5_S5_RKT0_:

c0026b98 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>:
c0026b98:	83 ec 1c             	sub    esp,0x1c
c0026b9b:	90                   	nop
c0026b9c:	83 ec 08             	sub    esp,0x8
c0026b9f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0026ba3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0026ba7:	e8 60 fc ff ff       	call   c002680c <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c0026bac:	83 c4 10             	add    esp,0x10
c0026baf:	0f b6 c0             	movzx  eax,al
c0026bb2:	85 c0                	test   eax,eax
c0026bb4:	74 62                	je     c0026c18 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x80>
c0026bb6:	83 ec 0c             	sub    esp,0xc
c0026bb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0026bbd:	e8 5e fc ff ff       	call   c0026820 <std::vector<Hardware*>::iterator::operator*() const>
c0026bc2:	83 c4 10             	add    esp,0x10
c0026bc5:	8b 10                	mov    edx,DWORD PTR [eax]
c0026bc7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0026bcb:	8b 00                	mov    eax,DWORD PTR [eax]
c0026bcd:	39 c2                	cmp    edx,eax
c0026bcf:	0f 94 c0             	sete   al
c0026bd2:	0f b6 c0             	movzx  eax,al
c0026bd5:	85 c0                	test   eax,eax
c0026bd7:	74 17                	je     c0026bf0 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x58>
c0026bd9:	83 ec 08             	sub    esp,0x8
c0026bdc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026be0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026be4:	e8 13 fc ff ff       	call   c00267fc <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0026be9:	83 c4 10             	add    esp,0x10
c0026bec:	eb 3e                	jmp    c0026c2c <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x94>
c0026bee:	66 90                	xchg   ax,ax
c0026bf0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0026bf4:	83 ec 08             	sub    esp,0x8
c0026bf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026bfb:	50                   	push   eax
c0026bfc:	e8 63 ff ff ff       	call   c0026b64 <std::vector<Hardware*>::iterator::operator++()>
c0026c01:	83 c4 0c             	add    esp,0xc
c0026c04:	83 ec 0c             	sub    esp,0xc
c0026c07:	8d 44 24 18          	lea    eax,[esp+0x18]
c0026c0b:	50                   	push   eax
c0026c0c:	e8 e7 fb ff ff       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c0026c11:	83 c4 10             	add    esp,0x10
c0026c14:	eb 86                	jmp    c0026b9c <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x4>
c0026c16:	66 90                	xchg   ax,ax
c0026c18:	83 ec 08             	sub    esp,0x8
c0026c1b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0026c1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026c23:	e8 d4 fb ff ff       	call   c00267fc <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0026c28:	83 c4 10             	add    esp,0x10
c0026c2b:	90                   	nop
c0026c2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026c30:	83 c4 1c             	add    esp,0x1c
c0026c33:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratoraSERKS3_:

c0026c38 <std::vector<Hardware*>::iterator::operator=(std::vector<Hardware*>::iterator const&)>:
c0026c38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026c3c:	8b 10                	mov    edx,DWORD PTR [eax]
c0026c3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026c42:	89 10                	mov    DWORD PTR [eax],edx
c0026c44:	90                   	nop
c0026c45:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorppEi:

c0026c48 <std::vector<Hardware*>::iterator::operator++(int)>:
c0026c48:	83 ec 0c             	sub    esp,0xc
c0026c4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026c4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c51:	8d 48 04             	lea    ecx,[eax+0x4]
c0026c54:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026c58:	89 0a                	mov    DWORD PTR [edx],ecx
c0026c5a:	83 ec 08             	sub    esp,0x8
c0026c5d:	50                   	push   eax
c0026c5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c62:	e8 a9 fe ff ff       	call   c0026b10 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0026c67:	83 c4 10             	add    esp,0x10
c0026c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c6e:	83 c4 0c             	add    esp,0xc
c0026c71:	c2 04 00             	ret    0x4

Disassembly of section .text._ZSt4moveIRP8HardwareEONSt16remove_referenceIT_E4typeEOS4_:

c0026c74 <std::remove_reference<Hardware*&>::type&& std::move<Hardware*&>(Hardware*&)>:
c0026c74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026c78:	c3                   	ret    

Disassembly of section .text._ZSt6removeINSt6vectorIP8HardwareE8iteratorES2_ET_S5_S5_RKT0_:

c0026c7c <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>:
c0026c7c:	53                   	push   ebx
c0026c7d:	83 ec 28             	sub    esp,0x28
c0026c80:	83 ec 08             	sub    esp,0x8
c0026c83:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0026c87:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0026c8b:	50                   	push   eax
c0026c8c:	e8 6b fb ff ff       	call   c00267fc <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0026c91:	83 c4 10             	add    esp,0x10
c0026c94:	83 ec 08             	sub    esp,0x8
c0026c97:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0026c9b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0026c9f:	50                   	push   eax
c0026ca0:	e8 57 fb ff ff       	call   c00267fc <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0026ca5:	83 c4 10             	add    esp,0x10
c0026ca8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0026cac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0026cb0:	8d 54 24 14          	lea    edx,[esp+0x14]
c0026cb4:	52                   	push   edx
c0026cb5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0026cb9:	52                   	push   edx
c0026cba:	50                   	push   eax
c0026cbb:	e8 d8 fe ff ff       	call   c0026b98 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>
c0026cc0:	83 c4 0c             	add    esp,0xc
c0026cc3:	83 ec 08             	sub    esp,0x8
c0026cc6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0026cca:	50                   	push   eax
c0026ccb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0026ccf:	e8 64 ff ff ff       	call   c0026c38 <std::vector<Hardware*>::iterator::operator=(std::vector<Hardware*>::iterator const&)>
c0026cd4:	83 c4 10             	add    esp,0x10
c0026cd7:	83 ec 0c             	sub    esp,0xc
c0026cda:	8d 44 24 18          	lea    eax,[esp+0x18]
c0026cde:	50                   	push   eax
c0026cdf:	e8 14 fb ff ff       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c0026ce4:	83 c4 10             	add    esp,0x10
c0026ce7:	83 ec 0c             	sub    esp,0xc
c0026cea:	8d 44 24 20          	lea    eax,[esp+0x20]
c0026cee:	50                   	push   eax
c0026cef:	e8 04 fb ff ff       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c0026cf4:	83 c4 10             	add    esp,0x10
c0026cf7:	83 ec 0c             	sub    esp,0xc
c0026cfa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0026cfe:	50                   	push   eax
c0026cff:	e8 f4 fa ff ff       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c0026d04:	83 c4 10             	add    esp,0x10
c0026d07:	83 ec 08             	sub    esp,0x8
c0026d0a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0026d0e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0026d12:	e8 f5 fa ff ff       	call   c002680c <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c0026d17:	83 c4 10             	add    esp,0x10
c0026d1a:	0f b6 c0             	movzx  eax,al
c0026d1d:	85 c0                	test   eax,eax
c0026d1f:	0f 84 ef 00 00 00    	je     c0026e14 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x198>
c0026d25:	83 ec 08             	sub    esp,0x8
c0026d28:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0026d2c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0026d30:	50                   	push   eax
c0026d31:	e8 c6 fa ff ff       	call   c00267fc <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0026d36:	83 c4 10             	add    esp,0x10
c0026d39:	8d 76 00             	lea    esi,[esi+0x0]
c0026d3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0026d40:	83 ec 08             	sub    esp,0x8
c0026d43:	8d 54 24 10          	lea    edx,[esp+0x10]
c0026d47:	52                   	push   edx
c0026d48:	50                   	push   eax
c0026d49:	e8 16 fe ff ff       	call   c0026b64 <std::vector<Hardware*>::iterator::operator++()>
c0026d4e:	83 c4 0c             	add    esp,0xc
c0026d51:	83 ec 08             	sub    esp,0x8
c0026d54:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0026d58:	8d 44 24 24          	lea    eax,[esp+0x24]
c0026d5c:	50                   	push   eax
c0026d5d:	e8 aa fa ff ff       	call   c002680c <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c0026d62:	83 c4 10             	add    esp,0x10
c0026d65:	88 c3                	mov    bl,al
c0026d67:	83 ec 0c             	sub    esp,0xc
c0026d6a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0026d6e:	50                   	push   eax
c0026d6f:	e8 84 fa ff ff       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c0026d74:	83 c4 10             	add    esp,0x10
c0026d77:	0f b6 c3             	movzx  eax,bl
c0026d7a:	85 c0                	test   eax,eax
c0026d7c:	0f 84 82 00 00 00    	je     c0026e04 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x188>
c0026d82:	83 ec 0c             	sub    esp,0xc
c0026d85:	8d 44 24 14          	lea    eax,[esp+0x14]
c0026d89:	50                   	push   eax
c0026d8a:	e8 91 fa ff ff       	call   c0026820 <std::vector<Hardware*>::iterator::operator*() const>
c0026d8f:	83 c4 10             	add    esp,0x10
c0026d92:	8b 10                	mov    edx,DWORD PTR [eax]
c0026d94:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026d98:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d9a:	39 c2                	cmp    edx,eax
c0026d9c:	0f 95 c0             	setne  al
c0026d9f:	0f b6 c0             	movzx  eax,al
c0026da2:	85 c0                	test   eax,eax
c0026da4:	74 96                	je     c0026d3c <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0xc0>
c0026da6:	83 ec 0c             	sub    esp,0xc
c0026da9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0026dad:	50                   	push   eax
c0026dae:	e8 6d fa ff ff       	call   c0026820 <std::vector<Hardware*>::iterator::operator*() const>
c0026db3:	83 c4 10             	add    esp,0x10
c0026db6:	83 ec 0c             	sub    esp,0xc
c0026db9:	50                   	push   eax
c0026dba:	e8 b5 fe ff ff       	call   c0026c74 <std::remove_reference<Hardware*&>::type&& std::move<Hardware*&>(Hardware*&)>
c0026dbf:	83 c4 10             	add    esp,0x10
c0026dc2:	89 c3                	mov    ebx,eax
c0026dc4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0026dc8:	83 ec 04             	sub    esp,0x4
c0026dcb:	6a 00                	push   0x0
c0026dcd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0026dd1:	50                   	push   eax
c0026dd2:	e8 71 fe ff ff       	call   c0026c48 <std::vector<Hardware*>::iterator::operator++(int)>
c0026dd7:	83 c4 0c             	add    esp,0xc
c0026dda:	83 ec 0c             	sub    esp,0xc
c0026ddd:	8d 44 24 28          	lea    eax,[esp+0x28]
c0026de1:	50                   	push   eax
c0026de2:	e8 39 fa ff ff       	call   c0026820 <std::vector<Hardware*>::iterator::operator*() const>
c0026de7:	83 c4 10             	add    esp,0x10
c0026dea:	8b 13                	mov    edx,DWORD PTR [ebx]
c0026dec:	89 10                	mov    DWORD PTR [eax],edx
c0026dee:	83 ec 0c             	sub    esp,0xc
c0026df1:	8d 44 24 28          	lea    eax,[esp+0x28]
c0026df5:	50                   	push   eax
c0026df6:	e8 fd f9 ff ff       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c0026dfb:	83 c4 10             	add    esp,0x10
c0026dfe:	e9 39 ff ff ff       	jmp    c0026d3c <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0xc0>
c0026e03:	90                   	nop
c0026e04:	83 ec 0c             	sub    esp,0xc
c0026e07:	8d 44 24 14          	lea    eax,[esp+0x14]
c0026e0b:	50                   	push   eax
c0026e0c:	e8 e7 f9 ff ff       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c0026e11:	83 c4 10             	add    esp,0x10
c0026e14:	83 ec 08             	sub    esp,0x8
c0026e17:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0026e1b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0026e1f:	e8 d8 f9 ff ff       	call   c00267fc <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0026e24:	83 c4 10             	add    esp,0x10
c0026e27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026e2b:	83 c4 28             	add    esp,0x28
c0026e2e:	5b                   	pop    ebx
c0026e2f:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratormiES3_:

c0026e34 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>:
c0026e34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026e38:	8b 10                	mov    edx,DWORD PTR [eax]
c0026e3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026e3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026e40:	29 c2                	sub    edx,eax
c0026e42:	89 d0                	mov    eax,edx
c0026e44:	c1 f8 02             	sar    eax,0x2
c0026e47:	c3                   	ret    

Disassembly of section .text._ZSt4copyIPP8HardwareS2_ET0_T_S4_S3_:

c0026e48 <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>:
c0026e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026e4c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0026e50:	74 1a                	je     c0026e6c <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)+0x24>
c0026e52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026e56:	8b 10                	mov    edx,DWORD PTR [eax]
c0026e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026e5c:	89 10                	mov    DWORD PTR [eax],edx
c0026e5e:	83 44 24 04 04       	add    DWORD PTR [esp+0x4],0x4
c0026e63:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c0026e68:	eb de                	jmp    c0026e48 <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>
c0026e6a:	66 90                	xchg   ax,ax
c0026e6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026e70:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE7reserveEm:

c0026e74 <std::vector<Hardware*>::reserve(unsigned long)>:
c0026e74:	83 ec 1c             	sub    esp,0x1c
c0026e77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026e7b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0026e7e:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0026e82:	0f 86 d0 00 00 00    	jbe    c0026f58 <std::vector<Hardware*>::reserve(unsigned long)+0xe4>
c0026e88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026e8c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0026e8f:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0026e93:	76 13                	jbe    c0026ea8 <std::vector<Hardware*>::reserve(unsigned long)+0x34>
c0026e95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026e99:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0026e9c:	8d 14 00             	lea    edx,[eax+eax*1]
c0026e9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026ea3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0026ea6:	eb e0                	jmp    c0026e88 <std::vector<Hardware*>::reserve(unsigned long)+0x14>
c0026ea8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026eac:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0026eaf:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c0026eb4:	77 06                	ja     c0026ebc <std::vector<Hardware*>::reserve(unsigned long)+0x48>
c0026eb6:	c1 e0 02             	shl    eax,0x2
c0026eb9:	eb 09                	jmp    c0026ec4 <std::vector<Hardware*>::reserve(unsigned long)+0x50>
c0026ebb:	90                   	nop
c0026ebc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026ec1:	8d 76 00             	lea    esi,[esi+0x0]
c0026ec4:	83 ec 0c             	sub    esp,0xc
c0026ec7:	50                   	push   eax
c0026ec8:	e8 02 6c fe ff       	call   c000dacf <operator new[](unsigned long)>
c0026ecd:	83 c4 10             	add    esp,0x10
c0026ed0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026ed4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026ed8:	8b 10                	mov    edx,DWORD PTR [eax]
c0026eda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026ede:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026ee1:	39 c2                	cmp    edx,eax
c0026ee3:	74 1f                	je     c0026f04 <std::vector<Hardware*>::reserve(unsigned long)+0x90>
c0026ee5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026ee9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0026eec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026ef0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026ef3:	83 ec 04             	sub    esp,0x4
c0026ef6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026efa:	52                   	push   edx
c0026efb:	50                   	push   eax
c0026efc:	e8 47 ff ff ff       	call   c0026e48 <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>
c0026f01:	83 c4 10             	add    esp,0x10
c0026f04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026f08:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026f0b:	85 c0                	test   eax,eax
c0026f0d:	74 15                	je     c0026f24 <std::vector<Hardware*>::reserve(unsigned long)+0xb0>
c0026f0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026f13:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026f16:	83 ec 0c             	sub    esp,0xc
c0026f19:	50                   	push   eax
c0026f1a:	e8 ba 6b fe ff       	call   c000dad9 <operator delete[](void*)>
c0026f1f:	83 c4 10             	add    esp,0x10
c0026f22:	66 90                	xchg   ax,ax
c0026f24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026f28:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026f2c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026f2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026f33:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0026f36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026f3a:	89 10                	mov    DWORD PTR [eax],edx
c0026f3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026f40:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0026f43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026f47:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0026f4a:	c1 e0 02             	shl    eax,0x2
c0026f4d:	01 c2                	add    edx,eax
c0026f4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026f53:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026f56:	66 90                	xchg   ax,ax
c0026f58:	90                   	nop
c0026f59:	83 c4 1c             	add    esp,0x1c
c0026f5c:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE9push_backERKS1_:

c0026f60 <std::vector<Hardware*>::push_back(Hardware* const&)>:
c0026f60:	83 ec 0c             	sub    esp,0xc
c0026f63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f67:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0026f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f6e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0026f71:	39 c2                	cmp    edx,eax
c0026f73:	73 2f                	jae    c0026fa4 <std::vector<Hardware*>::push_back(Hardware* const&)+0x44>
c0026f75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f79:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026f7c:	8d 48 04             	lea    ecx,[eax+0x4]
c0026f7f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026f83:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0026f86:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026f8a:	8b 12                	mov    edx,DWORD PTR [edx]
c0026f8c:	89 10                	mov    DWORD PTR [eax],edx
c0026f8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f92:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0026f95:	8d 50 01             	lea    edx,[eax+0x1]
c0026f98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f9c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0026f9f:	eb 47                	jmp    c0026fe8 <std::vector<Hardware*>::push_back(Hardware* const&)+0x88>
c0026fa1:	8d 76 00             	lea    esi,[esi+0x0]
c0026fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fa8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0026fab:	d1 e0                	shl    eax,1
c0026fad:	83 ec 08             	sub    esp,0x8
c0026fb0:	50                   	push   eax
c0026fb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026fb5:	e8 ba fe ff ff       	call   c0026e74 <std::vector<Hardware*>::reserve(unsigned long)>
c0026fba:	83 c4 10             	add    esp,0x10
c0026fbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fc1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0026fc4:	8d 50 01             	lea    edx,[eax+0x1]
c0026fc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fcb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0026fce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fd2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026fd5:	8d 48 04             	lea    ecx,[eax+0x4]
c0026fd8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026fdc:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0026fdf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026fe3:	8b 12                	mov    edx,DWORD PTR [edx]
c0026fe5:	89 10                	mov    DWORD PTR [eax],edx
c0026fe7:	90                   	nop
c0026fe8:	90                   	nop
c0026fe9:	83 c4 0c             	add    esp,0xc
c0026fec:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE5eraseENS2_8iteratorES3_:

c0026ff0 <std::vector<Hardware*>::erase(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator)>:
c0026ff0:	53                   	push   ebx
c0026ff1:	83 ec 28             	sub    esp,0x28
c0026ff4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0026ff8:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ffa:	83 ec 08             	sub    esp,0x8
c0026ffd:	50                   	push   eax
c0026ffe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0027002:	50                   	push   eax
c0027003:	e8 08 fb ff ff       	call   c0026b10 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0027008:	83 c4 10             	add    esp,0x10
c002700b:	83 ec 08             	sub    esp,0x8
c002700e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0027012:	50                   	push   eax
c0027013:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0027017:	e8 18 fe ff ff       	call   c0026e34 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c002701c:	83 c4 10             	add    esp,0x10
c002701f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0027023:	83 ec 0c             	sub    esp,0xc
c0027026:	8d 44 24 14          	lea    eax,[esp+0x14]
c002702a:	50                   	push   eax
c002702b:	e8 c8 f7 ff ff       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c0027030:	83 c4 10             	add    esp,0x10
c0027033:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0027037:	8b 00                	mov    eax,DWORD PTR [eax]
c0027039:	83 ec 08             	sub    esp,0x8
c002703c:	50                   	push   eax
c002703d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0027041:	50                   	push   eax
c0027042:	e8 c9 fa ff ff       	call   c0026b10 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0027047:	83 c4 10             	add    esp,0x10
c002704a:	83 ec 08             	sub    esp,0x8
c002704d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0027051:	50                   	push   eax
c0027052:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0027056:	e8 d9 fd ff ff       	call   c0026e34 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c002705b:	83 c4 10             	add    esp,0x10
c002705e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0027062:	83 ec 0c             	sub    esp,0xc
c0027065:	8d 44 24 18          	lea    eax,[esp+0x18]
c0027069:	50                   	push   eax
c002706a:	e8 89 f7 ff ff       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c002706f:	83 c4 10             	add    esp,0x10
c0027072:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0027076:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027079:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002707d:	c1 e2 02             	shl    edx,0x2
c0027080:	8d 0c 10             	lea    ecx,[eax+edx*1]
c0027083:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0027087:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002708a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002708e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0027091:	c1 e0 02             	shl    eax,0x2
c0027094:	01 c2                	add    edx,eax
c0027096:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002709a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002709d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00270a1:	c1 e3 02             	shl    ebx,0x2
c00270a4:	01 d8                	add    eax,ebx
c00270a6:	83 ec 04             	sub    esp,0x4
c00270a9:	51                   	push   ecx
c00270aa:	52                   	push   edx
c00270ab:	50                   	push   eax
c00270ac:	e8 97 fd ff ff       	call   c0026e48 <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>
c00270b1:	83 c4 10             	add    esp,0x10
c00270b4:	83 ec 08             	sub    esp,0x8
c00270b7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00270bb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00270bf:	50                   	push   eax
c00270c0:	e8 37 f7 ff ff       	call   c00267fc <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c00270c5:	83 c4 10             	add    esp,0x10
c00270c8:	83 ec 08             	sub    esp,0x8
c00270cb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00270cf:	50                   	push   eax
c00270d0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00270d4:	e8 5b fd ff ff       	call   c0026e34 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c00270d9:	83 c4 10             	add    esp,0x10
c00270dc:	89 c2                	mov    edx,eax
c00270de:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00270e2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00270e5:	29 d0                	sub    eax,edx
c00270e7:	89 c2                	mov    edx,eax
c00270e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00270ed:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00270f0:	83 ec 0c             	sub    esp,0xc
c00270f3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00270f7:	50                   	push   eax
c00270f8:	e8 fb f6 ff ff       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c00270fd:	83 c4 10             	add    esp,0x10
c0027100:	83 ec 08             	sub    esp,0x8
c0027103:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0027107:	8d 44 24 20          	lea    eax,[esp+0x20]
c002710b:	50                   	push   eax
c002710c:	e8 eb f6 ff ff       	call   c00267fc <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0027111:	83 c4 10             	add    esp,0x10
c0027114:	83 ec 08             	sub    esp,0x8
c0027117:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002711b:	50                   	push   eax
c002711c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0027120:	e8 0f fd ff ff       	call   c0026e34 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c0027125:	83 c4 10             	add    esp,0x10
c0027128:	89 c2                	mov    edx,eax
c002712a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002712e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027131:	c1 e2 02             	shl    edx,0x2
c0027134:	f7 da                	neg    edx
c0027136:	01 c2                	add    edx,eax
c0027138:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002713c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002713f:	83 ec 0c             	sub    esp,0xc
c0027142:	8d 44 24 20          	lea    eax,[esp+0x20]
c0027146:	50                   	push   eax
c0027147:	e8 ac f6 ff ff       	call   c00267f8 <std::vector<Hardware*>::iterator::~iterator()>
c002714c:	83 c4 10             	add    esp,0x10
c002714f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0027153:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027156:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002715a:	c1 e2 02             	shl    edx,0x2
c002715d:	01 d0                	add    eax,edx
c002715f:	83 ec 08             	sub    esp,0x8
c0027162:	50                   	push   eax
c0027163:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0027167:	e8 a4 f9 ff ff       	call   c0026b10 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c002716c:	83 c4 10             	add    esp,0x10
c002716f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0027173:	83 c4 28             	add    esp,0x28
c0027176:	5b                   	pop    ebx
c0027177:	c2 04 00             	ret    0x4

Disassembly of section .text._ZSt4copyIP17DeviceMemoryRangeS1_ET0_T_S3_S2_:

c002717c <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)>:
c002717c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027180:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0027184:	74 1e                	je     c00271a4 <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)+0x28>
c0027186:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002718a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002718e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0027191:	8b 00                	mov    eax,DWORD PTR [eax]
c0027193:	89 01                	mov    DWORD PTR [ecx],eax
c0027195:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0027198:	83 44 24 04 08       	add    DWORD PTR [esp+0x4],0x8
c002719d:	83 44 24 0c 08       	add    DWORD PTR [esp+0xc],0x8
c00271a2:	eb d8                	jmp    c002717c <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)>
c00271a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00271a8:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeE7reserveEm:

c00271ac <std::vector<DeviceMemoryRange>::reserve(unsigned long)>:
c00271ac:	83 ec 1c             	sub    esp,0x1c
c00271af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00271b3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00271b6:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c00271ba:	0f 86 d0 00 00 00    	jbe    c0027290 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0xe4>
c00271c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00271c4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00271c7:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c00271cb:	76 13                	jbe    c00271e0 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x34>
c00271cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00271d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00271d4:	8d 14 00             	lea    edx,[eax+eax*1]
c00271d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00271db:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00271de:	eb e0                	jmp    c00271c0 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x14>
c00271e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00271e4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00271e7:	3d ff ff ff 0f       	cmp    eax,0xfffffff
c00271ec:	77 06                	ja     c00271f4 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x48>
c00271ee:	c1 e0 03             	shl    eax,0x3
c00271f1:	eb 09                	jmp    c00271fc <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x50>
c00271f3:	90                   	nop
c00271f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00271f9:	8d 76 00             	lea    esi,[esi+0x0]
c00271fc:	83 ec 0c             	sub    esp,0xc
c00271ff:	50                   	push   eax
c0027200:	e8 ca 68 fe ff       	call   c000dacf <operator new[](unsigned long)>
c0027205:	83 c4 10             	add    esp,0x10
c0027208:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002720c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027210:	8b 10                	mov    edx,DWORD PTR [eax]
c0027212:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027216:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027219:	39 c2                	cmp    edx,eax
c002721b:	74 1f                	je     c002723c <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x90>
c002721d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027221:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0027224:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027228:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002722b:	83 ec 04             	sub    esp,0x4
c002722e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0027232:	52                   	push   edx
c0027233:	50                   	push   eax
c0027234:	e8 43 ff ff ff       	call   c002717c <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)>
c0027239:	83 c4 10             	add    esp,0x10
c002723c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027240:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027243:	85 c0                	test   eax,eax
c0027245:	74 15                	je     c002725c <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0xb0>
c0027247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002724b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002724e:	83 ec 0c             	sub    esp,0xc
c0027251:	50                   	push   eax
c0027252:	e8 82 68 fe ff       	call   c000dad9 <operator delete[](void*)>
c0027257:	83 c4 10             	add    esp,0x10
c002725a:	66 90                	xchg   ax,ax
c002725c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027260:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027264:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027267:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002726b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002726e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027272:	89 10                	mov    DWORD PTR [eax],edx
c0027274:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027278:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002727b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002727f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0027282:	c1 e0 03             	shl    eax,0x3
c0027285:	01 c2                	add    edx,eax
c0027287:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002728b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002728e:	66 90                	xchg   ax,ax
c0027290:	90                   	nop
c0027291:	83 c4 1c             	add    esp,0x1c
c0027294:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeE9push_backERKS0_:

c0027298 <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)>:
c0027298:	83 ec 0c             	sub    esp,0xc
c002729b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002729f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00272a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00272a9:	39 c2                	cmp    edx,eax
c00272ab:	73 33                	jae    c00272e0 <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)+0x48>
c00272ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272b1:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00272b4:	8d 51 08             	lea    edx,[ecx+0x8]
c00272b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272bb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00272be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00272c2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00272c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00272c7:	89 01                	mov    DWORD PTR [ecx],eax
c00272c9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00272cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272d0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00272d3:	8d 50 01             	lea    edx,[eax+0x1]
c00272d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272da:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00272dd:	eb 4d                	jmp    c002732c <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)+0x94>
c00272df:	90                   	nop
c00272e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272e4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00272e7:	d1 e0                	shl    eax,1
c00272e9:	83 ec 08             	sub    esp,0x8
c00272ec:	50                   	push   eax
c00272ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00272f1:	e8 b6 fe ff ff       	call   c00271ac <std::vector<DeviceMemoryRange>::reserve(unsigned long)>
c00272f6:	83 c4 10             	add    esp,0x10
c00272f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272fd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0027300:	8d 50 01             	lea    edx,[eax+0x1]
c0027303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027307:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002730a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002730e:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0027311:	8d 51 08             	lea    edx,[ecx+0x8]
c0027314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027318:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002731b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002731f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0027322:	8b 00                	mov    eax,DWORD PTR [eax]
c0027324:	89 01                	mov    DWORD PTR [ecx],eax
c0027326:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0027329:	8d 76 00             	lea    esi,[esi+0x0]
c002732c:	90                   	nop
c002732d:	83 c4 0c             	add    esp,0xc
c0027330:	c3                   	ret    

Disassembly of section .text._ZSt4copyIP15DevicePortRangeS1_ET0_T_S3_S2_:

c0027334 <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)>:
c0027334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027338:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c002733c:	74 1a                	je     c0027358 <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)+0x24>
c002733e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027342:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0027346:	8b 12                	mov    edx,DWORD PTR [edx]
c0027348:	89 10                	mov    DWORD PTR [eax],edx
c002734a:	83 44 24 04 04       	add    DWORD PTR [esp+0x4],0x4
c002734f:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c0027354:	eb de                	jmp    c0027334 <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)>
c0027356:	66 90                	xchg   ax,ax
c0027358:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002735c:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeE7reserveEm:

c0027360 <std::vector<DevicePortRange>::reserve(unsigned long)>:
c0027360:	83 ec 1c             	sub    esp,0x1c
c0027363:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027367:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002736a:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c002736e:	0f 86 d0 00 00 00    	jbe    c0027444 <std::vector<DevicePortRange>::reserve(unsigned long)+0xe4>
c0027374:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027378:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002737b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c002737f:	76 13                	jbe    c0027394 <std::vector<DevicePortRange>::reserve(unsigned long)+0x34>
c0027381:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027385:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0027388:	8d 14 00             	lea    edx,[eax+eax*1]
c002738b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002738f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0027392:	eb e0                	jmp    c0027374 <std::vector<DevicePortRange>::reserve(unsigned long)+0x14>
c0027394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027398:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002739b:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c00273a0:	77 06                	ja     c00273a8 <std::vector<DevicePortRange>::reserve(unsigned long)+0x48>
c00273a2:	c1 e0 02             	shl    eax,0x2
c00273a5:	eb 09                	jmp    c00273b0 <std::vector<DevicePortRange>::reserve(unsigned long)+0x50>
c00273a7:	90                   	nop
c00273a8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00273ad:	8d 76 00             	lea    esi,[esi+0x0]
c00273b0:	83 ec 0c             	sub    esp,0xc
c00273b3:	50                   	push   eax
c00273b4:	e8 16 67 fe ff       	call   c000dacf <operator new[](unsigned long)>
c00273b9:	83 c4 10             	add    esp,0x10
c00273bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00273c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00273c4:	8b 10                	mov    edx,DWORD PTR [eax]
c00273c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00273ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00273cd:	39 c2                	cmp    edx,eax
c00273cf:	74 1f                	je     c00273f0 <std::vector<DevicePortRange>::reserve(unsigned long)+0x90>
c00273d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00273d5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00273d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00273dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00273df:	83 ec 04             	sub    esp,0x4
c00273e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00273e6:	52                   	push   edx
c00273e7:	50                   	push   eax
c00273e8:	e8 47 ff ff ff       	call   c0027334 <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)>
c00273ed:	83 c4 10             	add    esp,0x10
c00273f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00273f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00273f7:	85 c0                	test   eax,eax
c00273f9:	74 15                	je     c0027410 <std::vector<DevicePortRange>::reserve(unsigned long)+0xb0>
c00273fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00273ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027402:	83 ec 0c             	sub    esp,0xc
c0027405:	50                   	push   eax
c0027406:	e8 ce 66 fe ff       	call   c000dad9 <operator delete[](void*)>
c002740b:	83 c4 10             	add    esp,0x10
c002740e:	66 90                	xchg   ax,ax
c0027410:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027414:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027418:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002741b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002741f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0027422:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027426:	89 10                	mov    DWORD PTR [eax],edx
c0027428:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002742c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002742f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027433:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0027436:	c1 e0 02             	shl    eax,0x2
c0027439:	01 c2                	add    edx,eax
c002743b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002743f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027442:	66 90                	xchg   ax,ax
c0027444:	90                   	nop
c0027445:	83 c4 1c             	add    esp,0x1c
c0027448:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeE9push_backERKS0_:

c002744c <std::vector<DevicePortRange>::push_back(DevicePortRange const&)>:
c002744c:	83 ec 0c             	sub    esp,0xc
c002744f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027453:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0027456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002745a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002745d:	39 c2                	cmp    edx,eax
c002745f:	73 2f                	jae    c0027490 <std::vector<DevicePortRange>::push_back(DevicePortRange const&)+0x44>
c0027461:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027465:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027468:	8d 48 04             	lea    ecx,[eax+0x4]
c002746b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002746f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0027472:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027476:	8b 12                	mov    edx,DWORD PTR [edx]
c0027478:	89 10                	mov    DWORD PTR [eax],edx
c002747a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002747e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0027481:	8d 50 01             	lea    edx,[eax+0x1]
c0027484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027488:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002748b:	eb 47                	jmp    c00274d4 <std::vector<DevicePortRange>::push_back(DevicePortRange const&)+0x88>
c002748d:	8d 76 00             	lea    esi,[esi+0x0]
c0027490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027494:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0027497:	d1 e0                	shl    eax,1
c0027499:	83 ec 08             	sub    esp,0x8
c002749c:	50                   	push   eax
c002749d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00274a1:	e8 ba fe ff ff       	call   c0027360 <std::vector<DevicePortRange>::reserve(unsigned long)>
c00274a6:	83 c4 10             	add    esp,0x10
c00274a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274ad:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00274b0:	8d 50 01             	lea    edx,[eax+0x1]
c00274b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274b7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00274ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00274c1:	8d 48 04             	lea    ecx,[eax+0x4]
c00274c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00274c8:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00274cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00274cf:	8b 12                	mov    edx,DWORD PTR [edx]
c00274d1:	89 10                	mov    DWORD PTR [eax],edx
c00274d3:	90                   	nop
c00274d4:	90                   	nop
c00274d5:	83 c4 0c             	add    esp,0xc
c00274d8:	c3                   	ret    

Disassembly of section .text._ZN11BusHardware10_getDriverEv:

c00274dc <BusHardware::_getDriver()>:
c00274dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00274e0:	8b 40 54             	mov    eax,DWORD PTR [eax+0x54]
c00274e3:	c3                   	ret    

Disassembly of section .text._ZN11BusHardware7getTypeEv:

c00274e4 <BusHardware::getType()>:
c00274e4:	b8 01 00 00 00       	mov    eax,0x1
c00274e9:	c3                   	ret    

Disassembly of section .text._ZN11BusHardwareD2Ev:

c00274ec <BusHardware::~BusHardware()>:
c00274ec:	83 ec 0c             	sub    esp,0xc
c00274ef:	ba 1c 8d 02 c0       	mov    edx,0xc0028d1c
c00274f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274f8:	89 10                	mov    DWORD PTR [eax],edx
c00274fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274fe:	83 ec 0c             	sub    esp,0xc
c0027501:	50                   	push   eax
c0027502:	e8 41 ff fd ff       	call   c0007448 <Hardware::~Hardware()>
c0027507:	83 c4 10             	add    esp,0x10
c002750a:	90                   	nop
c002750b:	83 c4 0c             	add    esp,0xc
c002750e:	c3                   	ret    

Disassembly of section .text._ZN11BusHardwareD0Ev:

c0027510 <BusHardware::~BusHardware()>:
c0027510:	83 ec 0c             	sub    esp,0xc
c0027513:	83 ec 0c             	sub    esp,0xc
c0027516:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002751a:	e8 cd ff ff ff       	call   c00274ec <BusHardware::~BusHardware()>
c002751f:	83 c4 10             	add    esp,0x10
c0027522:	83 ec 08             	sub    esp,0x8
c0027525:	6a 58                	push   0x58
c0027527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002752b:	e8 a4 65 fe ff       	call   c000dad4 <operator delete(void*, unsigned long)>
c0027530:	83 c4 10             	add    esp,0x10
c0027533:	83 c4 0c             	add    esp,0xc
c0027536:	c3                   	ret    

Disassembly of section .text._ZN11BusHardwareC2EP9BusDriver:

c0027538 <BusHardware::BusHardware(BusDriver*)>:
c0027538:	83 ec 0c             	sub    esp,0xc
c002753b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002753f:	83 ec 0c             	sub    esp,0xc
c0027542:	50                   	push   eax
c0027543:	e8 74 ff fd ff       	call   c00074bc <Hardware::Hardware()>
c0027548:	83 c4 10             	add    esp,0x10
c002754b:	ba 1c 8d 02 c0       	mov    edx,0xc0028d1c
c0027550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027554:	89 10                	mov    DWORD PTR [eax],edx
c0027556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002755a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002755e:	89 50 54             	mov    DWORD PTR [eax+0x54],edx
c0027561:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027565:	8b 40 54             	mov    eax,DWORD PTR [eax+0x54]
c0027568:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002756c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002756f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027573:	8b 40 54             	mov    eax,DWORD PTR [eax+0x54]
c0027576:	89 c2                	mov    edx,eax
c0027578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002757c:	8b 40 54             	mov    eax,DWORD PTR [eax+0x54]
c002757f:	8b 00                	mov    eax,DWORD PTR [eax]
c0027581:	83 c0 04             	add    eax,0x4
c0027584:	8b 00                	mov    eax,DWORD PTR [eax]
c0027586:	83 ec 0c             	sub    esp,0xc
c0027589:	52                   	push   edx
c002758a:	ff d0                	call   eax
c002758c:	83 c4 10             	add    esp,0x10
c002758f:	90                   	nop
c0027590:	83 c4 0c             	add    esp,0xc
c0027593:	c3                   	ret    

Disassembly of section .text._ZN9ISADriverC2Ev:

c0027594 <ISADriver::ISADriver()>:
c0027594:	83 ec 0c             	sub    esp,0xc
c0027597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002759b:	83 ec 0c             	sub    esp,0xc
c002759e:	50                   	push   eax
c002759f:	e8 20 f2 ff ff       	call   c00267c4 <Driver::Driver()>
c00275a4:	83 c4 10             	add    esp,0x10
c00275a7:	ba 2c b3 02 c0       	mov    edx,0xc002b32c
c00275ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275b0:	89 10                	mov    DWORD PTR [eax],edx
c00275b2:	90                   	nop
c00275b3:	83 c4 0c             	add    esp,0xc
c00275b6:	c3                   	ret    

Disassembly of section .text._ZN10ACPIDriverC2Ev:

c00275b8 <ACPIDriver::ACPIDriver()>:
c00275b8:	83 ec 0c             	sub    esp,0xc
c00275bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275bf:	83 ec 0c             	sub    esp,0xc
c00275c2:	50                   	push   eax
c00275c3:	e8 fc f1 ff ff       	call   c00267c4 <Driver::Driver()>
c00275c8:	83 c4 10             	add    esp,0x10
c00275cb:	ba 0c b3 02 c0       	mov    edx,0xc002b30c
c00275d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275d4:	89 10                	mov    DWORD PTR [eax],edx
c00275d6:	90                   	nop
c00275d7:	83 c4 0c             	add    esp,0xc
c00275da:	c3                   	ret    

Disassembly of section .text._ZN9PCIDriverC2Ev:

c00275dc <PCIDriver::PCIDriver()>:
c00275dc:	83 ec 0c             	sub    esp,0xc
c00275df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275e3:	83 ec 0c             	sub    esp,0xc
c00275e6:	50                   	push   eax
c00275e7:	e8 d8 f1 ff ff       	call   c00267c4 <Driver::Driver()>
c00275ec:	83 c4 10             	add    esp,0x10
c00275ef:	ba 50 b3 02 c0       	mov    edx,0xc002b350
c00275f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275f8:	89 10                	mov    DWORD PTR [eax],edx
c00275fa:	90                   	nop
c00275fb:	83 c4 0c             	add    esp,0xc
c00275fe:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0027600 <DriverlessDevice::~DriverlessDevice()>:
c0027600:	ba fc 91 02 c0       	mov    edx,0xc00291fc
c0027605:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027609:	89 10                	mov    DWORD PTR [eax],edx
c002760b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002760f:	50                   	push   eax
c0027610:	e8 2f 2b fe ff       	call   c000a144 <Device::~Device()>
c0027615:	83 c4 04             	add    esp,0x4
c0027618:	90                   	nop
c0027619:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002761a <DriverlessDevice::~DriverlessDevice()>:
c002761a:	83 ec 0c             	sub    esp,0xc
c002761d:	83 ec 0c             	sub    esp,0xc
c0027620:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027624:	e8 d7 ff ff ff       	call   c0027600 <DriverlessDevice::~DriverlessDevice()>
c0027629:	83 c4 10             	add    esp,0x10
c002762c:	83 ec 08             	sub    esp,0x8
c002762f:	68 58 01 00 00       	push   0x158
c0027634:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027638:	e8 97 64 fe ff       	call   c000dad4 <operator delete(void*, unsigned long)>
c002763d:	83 c4 10             	add    esp,0x10
c0027640:	83 c4 0c             	add    esp,0xc
c0027643:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0027644 <LinkedList<Device>::addElement(Device*)>:
c0027644:	83 ec 0c             	sub    esp,0xc
c0027647:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002764c:	75 10                	jne    c002765e <LinkedList<Device>::addElement(Device*)+0x1a>
c002764e:	83 ec 0c             	sub    esp,0xc
c0027651:	68 90 91 02 c0       	push   0xc0029190
c0027656:	e8 cd 8c fe ff       	call   c0010328 <KePanic(char const*)>
c002765b:	83 c4 10             	add    esp,0x10
c002765e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027662:	8b 00                	mov    eax,DWORD PTR [eax]
c0027664:	85 c0                	test   eax,eax
c0027666:	74 3a                	je     c00276a2 <LinkedList<Device>::addElement(Device*)+0x5e>
c0027668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002766c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002766f:	85 c0                	test   eax,eax
c0027671:	74 2f                	je     c00276a2 <LinkedList<Device>::addElement(Device*)+0x5e>
c0027673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027677:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002767a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002767e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0027684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027688:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002768c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002768f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027693:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027696:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00276a0:	eb 68                	jmp    c002770a <LinkedList<Device>::addElement(Device*)+0xc6>
c00276a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00276a8:	85 c0                	test   eax,eax
c00276aa:	75 4e                	jne    c00276fa <LinkedList<Device>::addElement(Device*)+0xb6>
c00276ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00276b3:	85 c0                	test   eax,eax
c00276b5:	75 43                	jne    c00276fa <LinkedList<Device>::addElement(Device*)+0xb6>
c00276b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00276bf:	89 10                	mov    DWORD PTR [eax],edx
c00276c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276c5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00276c9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00276cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00276d3:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00276dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276e1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00276e4:	85 c0                	test   eax,eax
c00276e6:	74 22                	je     c002770a <LinkedList<Device>::addElement(Device*)+0xc6>
c00276e8:	83 ec 0c             	sub    esp,0xc
c00276eb:	68 b2 91 02 c0       	push   0xc00291b2
c00276f0:	e8 33 8c fe ff       	call   c0010328 <KePanic(char const*)>
c00276f5:	83 c4 10             	add    esp,0x10
c00276f8:	eb 10                	jmp    c002770a <LinkedList<Device>::addElement(Device*)+0xc6>
c00276fa:	83 ec 0c             	sub    esp,0xc
c00276fd:	68 bc 91 02 c0       	push   0xc00291bc
c0027702:	e8 21 8c fe ff       	call   c0010328 <KePanic(char const*)>
c0027707:	83 c4 10             	add    esp,0x10
c002770a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002770e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027711:	8d 50 01             	lea    edx,[eax+0x1]
c0027714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027718:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002771b:	90                   	nop
c002771c:	83 c4 0c             	add    esp,0xc
c002771f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0027720 <LinkedList<Device>::LinkedList()>:
c0027720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027724:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002772a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002772e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027735:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027739:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027740:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027744:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002774a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002774e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027759:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027760:	90                   	nop
c0027761:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0027764 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0027764:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027768:	8b 00                	mov    eax,DWORD PTR [eax]
c002776a:	85 c0                	test   eax,eax
c002776c:	75 0e                	jne    c002777c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002776e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027772:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027775:	85 c0                	test   eax,eax
c0027777:	75 03                	jne    c002777c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0027779:	b0 01                	mov    al,0x1
c002777b:	c3                   	ret    
c002777c:	b0 00                	mov    al,0x0
c002777e:	90                   	nop
c002777f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0027780 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0027780:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027784:	8b 00                	mov    eax,DWORD PTR [eax]
c0027786:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0027788 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0027788:	83 ec 0c             	sub    esp,0xc
c002778b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002778f:	8b 00                	mov    eax,DWORD PTR [eax]
c0027791:	85 c0                	test   eax,eax
c0027793:	75 17                	jne    c00277ac <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0027795:	83 ec 0c             	sub    esp,0xc
c0027798:	68 2c 94 02 c0       	push   0xc002942c
c002779d:	e8 86 8b fe ff       	call   c0010328 <KePanic(char const*)>
c00277a2:	83 c4 10             	add    esp,0x10
c00277a5:	e9 96 00 00 00       	jmp    c0027840 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c00277aa:	66 90                	xchg   ax,ax
c00277ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00277b3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00277b6:	85 c0                	test   eax,eax
c00277b8:	0f 95 c0             	setne  al
c00277bb:	0f b6 c0             	movzx  eax,al
c00277be:	85 c0                	test   eax,eax
c00277c0:	74 12                	je     c00277d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c00277c2:	83 ec 0c             	sub    esp,0xc
c00277c5:	68 77 94 02 c0       	push   0xc0029477
c00277ca:	e8 59 8b fe ff       	call   c0010328 <KePanic(char const*)>
c00277cf:	83 c4 10             	add    esp,0x10
c00277d2:	66 90                	xchg   ax,ax
c00277d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00277da:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00277dd:	85 c0                	test   eax,eax
c00277df:	0f 94 c0             	sete   al
c00277e2:	0f b6 c0             	movzx  eax,al
c00277e5:	85 c0                	test   eax,eax
c00277e7:	74 33                	je     c002781c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c00277e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00277f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00277fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027802:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027805:	83 f8 01             	cmp    eax,0x1
c0027808:	74 22                	je     c002782c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002780a:	83 ec 0c             	sub    esp,0xc
c002780d:	68 50 94 02 c0       	push   0xc0029450
c0027812:	e8 11 8b fe ff       	call   c0010328 <KePanic(char const*)>
c0027817:	83 c4 10             	add    esp,0x10
c002781a:	eb 10                	jmp    c002782c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002781c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027820:	8b 00                	mov    eax,DWORD PTR [eax]
c0027822:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0027825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027829:	89 10                	mov    DWORD PTR [eax],edx
c002782b:	90                   	nop
c002782c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027830:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027833:	8d 50 ff             	lea    edx,[eax-0x1]
c0027836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002783a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002783d:	8d 76 00             	lea    esi,[esi+0x0]
c0027840:	83 c4 0c             	add    esp,0xc
c0027843:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0027844 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0027844:	83 ec 0c             	sub    esp,0xc
c0027847:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002784c:	75 12                	jne    c0027860 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002784e:	83 ec 0c             	sub    esp,0xc
c0027851:	68 90 91 02 c0       	push   0xc0029190
c0027856:	e8 cd 8a fe ff       	call   c0010328 <KePanic(char const*)>
c002785b:	83 c4 10             	add    esp,0x10
c002785e:	66 90                	xchg   ax,ax
c0027860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027864:	8b 00                	mov    eax,DWORD PTR [eax]
c0027866:	85 c0                	test   eax,eax
c0027868:	74 36                	je     c00278a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002786a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002786e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027871:	85 c0                	test   eax,eax
c0027873:	74 2b                	je     c00278a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0027875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027879:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002787c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027880:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0027883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027887:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002788b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002788e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027892:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027895:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002789c:	eb 6a                	jmp    c0027908 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002789e:	66 90                	xchg   ax,ax
c00278a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00278a6:	85 c0                	test   eax,eax
c00278a8:	75 4e                	jne    c00278f8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00278aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00278b1:	85 c0                	test   eax,eax
c00278b3:	75 43                	jne    c00278f8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00278b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00278bd:	89 10                	mov    DWORD PTR [eax],edx
c00278bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00278c7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00278ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00278d1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00278d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00278df:	85 c0                	test   eax,eax
c00278e1:	74 25                	je     c0027908 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00278e3:	83 ec 0c             	sub    esp,0xc
c00278e6:	68 b2 91 02 c0       	push   0xc00291b2
c00278eb:	e8 38 8a fe ff       	call   c0010328 <KePanic(char const*)>
c00278f0:	83 c4 10             	add    esp,0x10
c00278f3:	eb 13                	jmp    c0027908 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00278f5:	8d 76 00             	lea    esi,[esi+0x0]
c00278f8:	83 ec 0c             	sub    esp,0xc
c00278fb:	68 bc 91 02 c0       	push   0xc00291bc
c0027900:	e8 23 8a fe ff       	call   c0010328 <KePanic(char const*)>
c0027905:	83 c4 10             	add    esp,0x10
c0027908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002790c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002790f:	8d 50 01             	lea    edx,[eax+0x1]
c0027912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027916:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027919:	90                   	nop
c002791a:	83 c4 0c             	add    esp,0xc
c002791d:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0027920 <ACPI::~ACPI()>:
c0027920:	83 ec 0c             	sub    esp,0xc
c0027923:	ba ac 98 02 c0       	mov    edx,0xc00298ac
c0027928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002792c:	89 10                	mov    DWORD PTR [eax],edx
c002792e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027932:	83 ec 0c             	sub    esp,0xc
c0027935:	50                   	push   eax
c0027936:	e8 09 28 fe ff       	call   c000a144 <Device::~Device()>
c002793b:	83 c4 10             	add    esp,0x10
c002793e:	90                   	nop
c002793f:	83 c4 0c             	add    esp,0xc
c0027942:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0027944 <ACPI::~ACPI()>:
c0027944:	83 ec 0c             	sub    esp,0xc
c0027947:	83 ec 0c             	sub    esp,0xc
c002794a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002794e:	e8 cd ff ff ff       	call   c0027920 <ACPI::~ACPI()>
c0027953:	83 c4 10             	add    esp,0x10
c0027956:	83 ec 08             	sub    esp,0x8
c0027959:	68 64 12 00 00       	push   0x1264
c002795e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027962:	e8 6d 61 fe ff       	call   c000dad4 <operator delete(void*, unsigned long)>
c0027967:	83 c4 10             	add    esp,0x10
c002796a:	83 c4 0c             	add    esp,0xc
c002796d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0027970 <LinkedList<Device>::~LinkedList()>:
c0027970:	90                   	nop
c0027971:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0027974 <LinkedList<Device>::isEmpty()>:
c0027974:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027978:	8b 00                	mov    eax,DWORD PTR [eax]
c002797a:	85 c0                	test   eax,eax
c002797c:	75 0e                	jne    c002798c <LinkedList<Device>::isEmpty()+0x18>
c002797e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027982:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027985:	85 c0                	test   eax,eax
c0027987:	75 03                	jne    c002798c <LinkedList<Device>::isEmpty()+0x18>
c0027989:	b0 01                	mov    al,0x1
c002798b:	c3                   	ret    
c002798c:	b0 00                	mov    al,0x0
c002798e:	90                   	nop
c002798f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0027990 <LinkedList<Device>::getFirstElement()>:
c0027990:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027994:	8b 00                	mov    eax,DWORD PTR [eax]
c0027996:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0027998 <LinkedList<Device>::removeFirst()>:
c0027998:	83 ec 0c             	sub    esp,0xc
c002799b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002799f:	8b 00                	mov    eax,DWORD PTR [eax]
c00279a1:	85 c0                	test   eax,eax
c00279a3:	75 17                	jne    c00279bc <LinkedList<Device>::removeFirst()+0x24>
c00279a5:	83 ec 0c             	sub    esp,0xc
c00279a8:	68 2c 94 02 c0       	push   0xc002942c
c00279ad:	e8 76 89 fe ff       	call   c0010328 <KePanic(char const*)>
c00279b2:	83 c4 10             	add    esp,0x10
c00279b5:	e9 92 00 00 00       	jmp    c0027a4c <LinkedList<Device>::removeFirst()+0xb4>
c00279ba:	66 90                	xchg   ax,ax
c00279bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00279c3:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00279c9:	85 c0                	test   eax,eax
c00279cb:	74 13                	je     c00279e0 <LinkedList<Device>::removeFirst()+0x48>
c00279cd:	83 ec 0c             	sub    esp,0xc
c00279d0:	68 77 94 02 c0       	push   0xc0029477
c00279d5:	e8 4e 89 fe ff       	call   c0010328 <KePanic(char const*)>
c00279da:	83 c4 10             	add    esp,0x10
c00279dd:	8d 76 00             	lea    esi,[esi+0x0]
c00279e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00279e6:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00279ec:	85 c0                	test   eax,eax
c00279ee:	75 34                	jne    c0027a24 <LinkedList<Device>::removeFirst()+0x8c>
c00279f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279f4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00279fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279fe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027a05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a09:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027a0c:	83 f8 01             	cmp    eax,0x1
c0027a0f:	74 27                	je     c0027a38 <LinkedList<Device>::removeFirst()+0xa0>
c0027a11:	83 ec 0c             	sub    esp,0xc
c0027a14:	68 50 94 02 c0       	push   0xc0029450
c0027a19:	e8 0a 89 fe ff       	call   c0010328 <KePanic(char const*)>
c0027a1e:	83 c4 10             	add    esp,0x10
c0027a21:	eb 15                	jmp    c0027a38 <LinkedList<Device>::removeFirst()+0xa0>
c0027a23:	90                   	nop
c0027a24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a28:	8b 00                	mov    eax,DWORD PTR [eax]
c0027a2a:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0027a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a34:	89 10                	mov    DWORD PTR [eax],edx
c0027a36:	66 90                	xchg   ax,ax
c0027a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a3c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027a3f:	8d 50 ff             	lea    edx,[eax-0x1]
c0027a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a46:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027a49:	8d 76 00             	lea    esi,[esi+0x0]
c0027a4c:	83 c4 0c             	add    esp,0xc
c0027a4f:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0027a50 <Computer::~Computer()>:
c0027a50:	83 ec 0c             	sub    esp,0xc
c0027a53:	ba 18 9a 02 c0       	mov    edx,0xc0029a18
c0027a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a5c:	89 10                	mov    DWORD PTR [eax],edx
c0027a5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a62:	83 ec 0c             	sub    esp,0xc
c0027a65:	50                   	push   eax
c0027a66:	e8 d9 26 fe ff       	call   c000a144 <Device::~Device()>
c0027a6b:	83 c4 10             	add    esp,0x10
c0027a6e:	90                   	nop
c0027a6f:	83 c4 0c             	add    esp,0xc
c0027a72:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0027a74 <Computer::~Computer()>:
c0027a74:	83 ec 0c             	sub    esp,0xc
c0027a77:	83 ec 0c             	sub    esp,0xc
c0027a7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a7e:	e8 cd ff ff ff       	call   c0027a50 <Computer::~Computer()>
c0027a83:	83 c4 10             	add    esp,0x10
c0027a86:	83 ec 08             	sub    esp,0x8
c0027a89:	68 68 01 00 00       	push   0x168
c0027a8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a92:	e8 3d 60 fe ff       	call   c000dad4 <operator delete(void*, unsigned long)>
c0027a97:	83 c4 10             	add    esp,0x10
c0027a9a:	83 c4 0c             	add    esp,0xc
c0027a9d:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0027a9e <idleCommon()>:
c0027a9e:	83 ec 0c             	sub    esp,0xc
c0027aa1:	fa                   	cli    
c0027aa2:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c0027aa8:	e8 03 f4 fe ff       	call   c0016eb0 <schedule()>
c0027aad:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c0027ab4:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c0027abb:	75 01                	jne    c0027abe <idleCommon()+0x20>
c0027abd:	fb                   	sti    
c0027abe:	83 c4 0c             	add    esp,0xc
c0027ac1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0027ac2 <LinkedList<UnixFile>::~LinkedList()>:
c0027ac2:	90                   	nop
c0027ac3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0027ac4 <LinkedList<UnixFile>::LinkedList()>:
c0027ac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027ac8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027ace:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027ad2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027ad9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027add:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027ae4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027ae8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027aee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027af2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027af9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027afd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027b04:	90                   	nop
c0027b05:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0027b06 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0027b06:	83 ec 0c             	sub    esp,0xc
c0027b09:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027b0e:	75 10                	jne    c0027b20 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0027b10:	83 ec 0c             	sub    esp,0xc
c0027b13:	68 90 91 02 c0       	push   0xc0029190
c0027b18:	e8 0b 88 fe ff       	call   c0010328 <KePanic(char const*)>
c0027b1d:	83 c4 10             	add    esp,0x10
c0027b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b24:	8b 00                	mov    eax,DWORD PTR [eax]
c0027b26:	85 c0                	test   eax,eax
c0027b28:	74 34                	je     c0027b5e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027b2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027b31:	85 c0                	test   eax,eax
c0027b33:	74 29                	je     c0027b5e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b39:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027b3c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027b40:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027b43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b47:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027b4b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027b55:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027b5c:	eb 65                	jmp    c0027bc3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027b5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b62:	8b 00                	mov    eax,DWORD PTR [eax]
c0027b64:	85 c0                	test   eax,eax
c0027b66:	75 4b                	jne    c0027bb3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0027b68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027b6f:	85 c0                	test   eax,eax
c0027b71:	75 40                	jne    c0027bb3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0027b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b77:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027b7b:	89 10                	mov    DWORD PTR [eax],edx
c0027b7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027b85:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027b8f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b9a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027b9d:	85 c0                	test   eax,eax
c0027b9f:	74 22                	je     c0027bc3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027ba1:	83 ec 0c             	sub    esp,0xc
c0027ba4:	68 b2 91 02 c0       	push   0xc00291b2
c0027ba9:	e8 7a 87 fe ff       	call   c0010328 <KePanic(char const*)>
c0027bae:	83 c4 10             	add    esp,0x10
c0027bb1:	eb 10                	jmp    c0027bc3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027bb3:	83 ec 0c             	sub    esp,0xc
c0027bb6:	68 bc 91 02 c0       	push   0xc00291bc
c0027bbb:	e8 68 87 fe ff       	call   c0010328 <KePanic(char const*)>
c0027bc0:	83 c4 10             	add    esp,0x10
c0027bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027bc7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027bca:	8d 50 01             	lea    edx,[eax+0x1]
c0027bcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027bd1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027bd4:	90                   	nop
c0027bd5:	83 c4 0c             	add    esp,0xc
c0027bd8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0027bda <LinkedList<UnixFile>::getFirstElement()>:
c0027bda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027bde:	8b 00                	mov    eax,DWORD PTR [eax]
c0027be0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0027be2 <LinkedList<UnixFile>::removeFirst()>:
c0027be2:	83 ec 0c             	sub    esp,0xc
c0027be5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027be9:	8b 00                	mov    eax,DWORD PTR [eax]
c0027beb:	85 c0                	test   eax,eax
c0027bed:	75 12                	jne    c0027c01 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0027bef:	83 ec 0c             	sub    esp,0xc
c0027bf2:	68 2c 94 02 c0       	push   0xc002942c
c0027bf7:	e8 2c 87 fe ff       	call   c0010328 <KePanic(char const*)>
c0027bfc:	83 c4 10             	add    esp,0x10
c0027bff:	eb 7e                	jmp    c0027c7f <LinkedList<UnixFile>::removeFirst()+0x9d>
c0027c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c05:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027c08:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027c0b:	85 c0                	test   eax,eax
c0027c0d:	74 10                	je     c0027c1f <LinkedList<UnixFile>::removeFirst()+0x3d>
c0027c0f:	83 ec 0c             	sub    esp,0xc
c0027c12:	68 77 94 02 c0       	push   0xc0029477
c0027c17:	e8 0c 87 fe ff       	call   c0010328 <KePanic(char const*)>
c0027c1c:	83 c4 10             	add    esp,0x10
c0027c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c23:	8b 00                	mov    eax,DWORD PTR [eax]
c0027c25:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027c28:	85 c0                	test   eax,eax
c0027c2a:	75 33                	jne    c0027c5f <LinkedList<UnixFile>::removeFirst()+0x7d>
c0027c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c30:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c3a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027c41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c45:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027c48:	83 f8 01             	cmp    eax,0x1
c0027c4b:	74 21                	je     c0027c6e <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027c4d:	83 ec 0c             	sub    esp,0xc
c0027c50:	68 50 94 02 c0       	push   0xc0029450
c0027c55:	e8 ce 86 fe ff       	call   c0010328 <KePanic(char const*)>
c0027c5a:	83 c4 10             	add    esp,0x10
c0027c5d:	eb 0f                	jmp    c0027c6e <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027c5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c63:	8b 00                	mov    eax,DWORD PTR [eax]
c0027c65:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0027c68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c6c:	89 10                	mov    DWORD PTR [eax],edx
c0027c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c72:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027c75:	8d 50 ff             	lea    edx,[eax-0x1]
c0027c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c7c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027c7f:	83 c4 0c             	add    esp,0xc
c0027c82:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0027c84 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0027c84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027c88:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027c8b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0027c8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0027c8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027c90:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0027c93:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0027c94 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0027c94:	90                   	nop
c0027c95:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0027c98 <ThreadControlBlock::ThreadControlBlock()>:
c0027c98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027c9c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027ca3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027ca7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0027cae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027cb2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0027cb9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027cbd:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0027cc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027cc8:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0027ccf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027cd3:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0027cd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027cdb:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0027cdf:	90                   	nop
c0027ce0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0027ce4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0027ce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027ce8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027cee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027cf2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027cf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027cfd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027d04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027d08:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027d0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027d12:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027d19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027d1d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027d24:	90                   	nop
c0027d25:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0027d26 <IOAPIC::~IOAPIC()>:
c0027d26:	83 ec 0c             	sub    esp,0xc
c0027d29:	ba 68 ae 02 c0       	mov    edx,0xc002ae68
c0027d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d32:	89 10                	mov    DWORD PTR [eax],edx
c0027d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d38:	83 ec 0c             	sub    esp,0xc
c0027d3b:	50                   	push   eax
c0027d3c:	e8 03 24 fe ff       	call   c000a144 <Device::~Device()>
c0027d41:	83 c4 10             	add    esp,0x10
c0027d44:	90                   	nop
c0027d45:	83 c4 0c             	add    esp,0xc
c0027d48:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0027d4a <IOAPIC::~IOAPIC()>:
c0027d4a:	83 ec 0c             	sub    esp,0xc
c0027d4d:	83 ec 0c             	sub    esp,0xc
c0027d50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027d54:	e8 cd ff ff ff       	call   c0027d26 <IOAPIC::~IOAPIC()>
c0027d59:	83 c4 10             	add    esp,0x10
c0027d5c:	83 ec 08             	sub    esp,0x8
c0027d5f:	68 68 01 00 00       	push   0x168
c0027d64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027d68:	e8 67 5d fe ff       	call   c000dad4 <operator delete(void*, unsigned long)>
c0027d6d:	83 c4 10             	add    esp,0x10
c0027d70:	83 c4 0c             	add    esp,0xc
c0027d73:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0027d74 <CPU::~CPU()>:
c0027d74:	83 ec 0c             	sub    esp,0xc
c0027d77:	ba f0 b1 02 c0       	mov    edx,0xc002b1f0
c0027d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d80:	89 10                	mov    DWORD PTR [eax],edx
c0027d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d86:	83 ec 0c             	sub    esp,0xc
c0027d89:	50                   	push   eax
c0027d8a:	e8 b5 23 fe ff       	call   c000a144 <Device::~Device()>
c0027d8f:	83 c4 10             	add    esp,0x10
c0027d92:	90                   	nop
c0027d93:	83 c4 0c             	add    esp,0xc
c0027d96:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0027d98 <CPU::~CPU()>:
c0027d98:	83 ec 0c             	sub    esp,0xc
c0027d9b:	83 ec 0c             	sub    esp,0xc
c0027d9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027da2:	e8 cd ff ff ff       	call   c0027d74 <CPU::~CPU()>
c0027da7:	83 c4 10             	add    esp,0x10
c0027daa:	83 ec 08             	sub    esp,0x8
c0027dad:	68 78 11 00 00       	push   0x1178
c0027db2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027db6:	e8 19 5d fe ff       	call   c000dad4 <operator delete(void*, unsigned long)>
c0027dbb:	83 c4 10             	add    esp,0x10
c0027dbe:	83 c4 0c             	add    esp,0xc
c0027dc1:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0027dc2 <PCI::~PCI()>:
c0027dc2:	83 ec 0c             	sub    esp,0xc
c0027dc5:	ba ac b7 02 c0       	mov    edx,0xc002b7ac
c0027dca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027dce:	89 10                	mov    DWORD PTR [eax],edx
c0027dd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027dd4:	83 ec 0c             	sub    esp,0xc
c0027dd7:	50                   	push   eax
c0027dd8:	e8 0b 14 fe ff       	call   c00091e8 <Bus::~Bus()>
c0027ddd:	83 c4 10             	add    esp,0x10
c0027de0:	90                   	nop
c0027de1:	83 c4 0c             	add    esp,0xc
c0027de4:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0027de6 <PCI::~PCI()>:
c0027de6:	83 ec 0c             	sub    esp,0xc
c0027de9:	83 ec 0c             	sub    esp,0xc
c0027dec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027df0:	e8 cd ff ff ff       	call   c0027dc2 <PCI::~PCI()>
c0027df5:	83 c4 10             	add    esp,0x10
c0027df8:	83 ec 08             	sub    esp,0x8
c0027dfb:	68 5c 01 00 00       	push   0x15c
c0027e00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e04:	e8 cb 5c fe ff       	call   c000dad4 <operator delete(void*, unsigned long)>
c0027e09:	83 c4 10             	add    esp,0x10
c0027e0c:	83 c4 0c             	add    esp,0xc
c0027e0f:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0027e10 <IDE::~IDE()>:
c0027e10:	83 ec 0c             	sub    esp,0xc
c0027e13:	ba fc b8 02 c0       	mov    edx,0xc002b8fc
c0027e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e1c:	89 10                	mov    DWORD PTR [eax],edx
c0027e1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e22:	83 ec 0c             	sub    esp,0xc
c0027e25:	50                   	push   eax
c0027e26:	e8 a9 27 fe ff       	call   c000a5d4 <HardDiskController::~HardDiskController()>
c0027e2b:	83 c4 10             	add    esp,0x10
c0027e2e:	90                   	nop
c0027e2f:	83 c4 0c             	add    esp,0xc
c0027e32:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0027e34 <IDE::~IDE()>:
c0027e34:	83 ec 0c             	sub    esp,0xc
c0027e37:	83 ec 0c             	sub    esp,0xc
c0027e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e3e:	e8 cd ff ff ff       	call   c0027e10 <IDE::~IDE()>
c0027e43:	83 c4 10             	add    esp,0x10
c0027e46:	83 ec 08             	sub    esp,0x8
c0027e49:	68 70 02 00 00       	push   0x270
c0027e4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e52:	e8 7d 5c fe ff       	call   c000dad4 <operator delete(void*, unsigned long)>
c0027e57:	83 c4 10             	add    esp,0x10
c0027e5a:	83 c4 0c             	add    esp,0xc
c0027e5d:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0027e5e <SATABus::~SATABus()>:
c0027e5e:	83 ec 0c             	sub    esp,0xc
c0027e61:	ba 4c b9 02 c0       	mov    edx,0xc002b94c
c0027e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e6a:	89 10                	mov    DWORD PTR [eax],edx
c0027e6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e70:	83 ec 0c             	sub    esp,0xc
c0027e73:	50                   	push   eax
c0027e74:	e8 5b 27 fe ff       	call   c000a5d4 <HardDiskController::~HardDiskController()>
c0027e79:	83 c4 10             	add    esp,0x10
c0027e7c:	90                   	nop
c0027e7d:	83 c4 0c             	add    esp,0xc
c0027e80:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0027e82 <SATABus::~SATABus()>:
c0027e82:	83 ec 0c             	sub    esp,0xc
c0027e85:	83 ec 0c             	sub    esp,0xc
c0027e88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e8c:	e8 cd ff ff ff       	call   c0027e5e <SATABus::~SATABus()>
c0027e91:	83 c4 10             	add    esp,0x10
c0027e94:	83 ec 08             	sub    esp,0x8
c0027e97:	68 64 01 00 00       	push   0x164
c0027e9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ea0:	e8 2f 5c fe ff       	call   c000dad4 <operator delete(void*, unsigned long)>
c0027ea5:	83 c4 10             	add    esp,0x10
c0027ea8:	83 c4 0c             	add    esp,0xc
c0027eab:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0027eac <ATA::~ATA()>:
c0027eac:	83 ec 0c             	sub    esp,0xc
c0027eaf:	ba 34 ba 02 c0       	mov    edx,0xc002ba34
c0027eb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027eb8:	89 10                	mov    DWORD PTR [eax],edx
c0027eba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ebe:	83 ec 0c             	sub    esp,0xc
c0027ec1:	50                   	push   eax
c0027ec2:	e8 ef 27 fe ff       	call   c000a6b6 <PhysicalDisk::~PhysicalDisk()>
c0027ec7:	83 c4 10             	add    esp,0x10
c0027eca:	90                   	nop
c0027ecb:	83 c4 0c             	add    esp,0xc
c0027ece:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0027ed0 <ATA::~ATA()>:
c0027ed0:	83 ec 0c             	sub    esp,0xc
c0027ed3:	83 ec 0c             	sub    esp,0xc
c0027ed6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027eda:	e8 cd ff ff ff       	call   c0027eac <ATA::~ATA()>
c0027edf:	83 c4 10             	add    esp,0x10
c0027ee2:	83 ec 08             	sub    esp,0x8
c0027ee5:	68 8c 01 00 00       	push   0x18c
c0027eea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027eee:	e8 e1 5b fe ff       	call   c000dad4 <operator delete(void*, unsigned long)>
c0027ef3:	83 c4 10             	add    esp,0x10
c0027ef6:	83 c4 0c             	add    esp,0xc
c0027ef9:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0027efa <ATAPI::~ATAPI()>:
c0027efa:	83 ec 0c             	sub    esp,0xc
c0027efd:	ba 7c ba 02 c0       	mov    edx,0xc002ba7c
c0027f02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f06:	89 10                	mov    DWORD PTR [eax],edx
c0027f08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f0c:	83 ec 0c             	sub    esp,0xc
c0027f0f:	50                   	push   eax
c0027f10:	e8 a1 27 fe ff       	call   c000a6b6 <PhysicalDisk::~PhysicalDisk()>
c0027f15:	83 c4 10             	add    esp,0x10
c0027f18:	90                   	nop
c0027f19:	83 c4 0c             	add    esp,0xc
c0027f1c:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0027f1e <ATAPI::~ATAPI()>:
c0027f1e:	83 ec 0c             	sub    esp,0xc
c0027f21:	83 ec 0c             	sub    esp,0xc
c0027f24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027f28:	e8 cd ff ff ff       	call   c0027efa <ATAPI::~ATAPI()>
c0027f2d:	83 c4 10             	add    esp,0x10
c0027f30:	83 ec 08             	sub    esp,0x8
c0027f33:	68 84 01 00 00       	push   0x184
c0027f38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027f3c:	e8 93 5b fe ff       	call   c000dad4 <operator delete(void*, unsigned long)>
c0027f41:	83 c4 10             	add    esp,0x10
c0027f44:	83 c4 0c             	add    esp,0xc
c0027f47:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0027f48 <SATA::~SATA()>:
c0027f48:	83 ec 0c             	sub    esp,0xc
c0027f4b:	ba 3c bb 02 c0       	mov    edx,0xc002bb3c
c0027f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f54:	89 10                	mov    DWORD PTR [eax],edx
c0027f56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f5a:	83 ec 0c             	sub    esp,0xc
c0027f5d:	50                   	push   eax
c0027f5e:	e8 53 27 fe ff       	call   c000a6b6 <PhysicalDisk::~PhysicalDisk()>
c0027f63:	83 c4 10             	add    esp,0x10
c0027f66:	90                   	nop
c0027f67:	83 c4 0c             	add    esp,0xc
c0027f6a:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0027f6c <SATA::~SATA()>:
c0027f6c:	83 ec 0c             	sub    esp,0xc
c0027f6f:	83 ec 0c             	sub    esp,0xc
c0027f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027f76:	e8 cd ff ff ff       	call   c0027f48 <SATA::~SATA()>
c0027f7b:	83 c4 10             	add    esp,0x10
c0027f7e:	83 ec 08             	sub    esp,0x8
c0027f81:	68 7c 01 00 00       	push   0x17c
c0027f86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027f8a:	e8 45 5b fe ff       	call   c000dad4 <operator delete(void*, unsigned long)>
c0027f8f:	83 c4 10             	add    esp,0x10
c0027f92:	83 c4 0c             	add    esp,0xc
c0027f95:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0027f96 <SATAPI::~SATAPI()>:
c0027f96:	83 ec 0c             	sub    esp,0xc
c0027f99:	ba 60 bc 02 c0       	mov    edx,0xc002bc60
c0027f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fa2:	89 10                	mov    DWORD PTR [eax],edx
c0027fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fa8:	83 ec 0c             	sub    esp,0xc
c0027fab:	50                   	push   eax
c0027fac:	e8 05 27 fe ff       	call   c000a6b6 <PhysicalDisk::~PhysicalDisk()>
c0027fb1:	83 c4 10             	add    esp,0x10
c0027fb4:	90                   	nop
c0027fb5:	83 c4 0c             	add    esp,0xc
c0027fb8:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0027fba <SATAPI::~SATAPI()>:
c0027fba:	83 ec 0c             	sub    esp,0xc
c0027fbd:	83 ec 0c             	sub    esp,0xc
c0027fc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027fc4:	e8 cd ff ff ff       	call   c0027f96 <SATAPI::~SATAPI()>
c0027fc9:	83 c4 10             	add    esp,0x10
c0027fcc:	83 ec 08             	sub    esp,0x8
c0027fcf:	68 84 01 00 00       	push   0x184
c0027fd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027fd8:	e8 f7 5a fe ff       	call   c000dad4 <operator delete(void*, unsigned long)>
c0027fdd:	83 c4 10             	add    esp,0x10
c0027fe0:	83 c4 0c             	add    esp,0xc
c0027fe3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0027fe4 <APICTimer::~APICTimer()>:
c0027fe4:	83 ec 0c             	sub    esp,0xc
c0027fe7:	ba b4 bc 02 c0       	mov    edx,0xc002bcb4
c0027fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ff0:	89 10                	mov    DWORD PTR [eax],edx
c0027ff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ff6:	83 ec 0c             	sub    esp,0xc
c0027ff9:	50                   	push   eax
c0027ffa:	e8 51 38 fe ff       	call   c000b850 <Timer::~Timer()>
c0027fff:	83 c4 10             	add    esp,0x10
c0028002:	90                   	nop
c0028003:	83 c4 0c             	add    esp,0xc
c0028006:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028008 <APICTimer::~APICTimer()>:
c0028008:	83 ec 0c             	sub    esp,0xc
c002800b:	83 ec 0c             	sub    esp,0xc
c002800e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028012:	e8 cd ff ff ff       	call   c0027fe4 <APICTimer::~APICTimer()>
c0028017:	83 c4 10             	add    esp,0x10
c002801a:	83 ec 08             	sub    esp,0x8
c002801d:	68 60 01 00 00       	push   0x160
c0028022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028026:	e8 a9 5a fe ff       	call   c000dad4 <operator delete(void*, unsigned long)>
c002802b:	83 c4 10             	add    esp,0x10
c002802e:	83 c4 0c             	add    esp,0xc
c0028031:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028034 <PIT::~PIT()>:
c0028034:	83 ec 0c             	sub    esp,0xc
c0028037:	ba 04 bd 02 c0       	mov    edx,0xc002bd04
c002803c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028040:	89 10                	mov    DWORD PTR [eax],edx
c0028042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028046:	83 ec 0c             	sub    esp,0xc
c0028049:	50                   	push   eax
c002804a:	e8 01 38 fe ff       	call   c000b850 <Timer::~Timer()>
c002804f:	83 c4 10             	add    esp,0x10
c0028052:	90                   	nop
c0028053:	83 c4 0c             	add    esp,0xc
c0028056:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028058 <PIT::~PIT()>:
c0028058:	83 ec 0c             	sub    esp,0xc
c002805b:	83 ec 0c             	sub    esp,0xc
c002805e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028062:	e8 cd ff ff ff       	call   c0028034 <PIT::~PIT()>
c0028067:	83 c4 10             	add    esp,0x10
c002806a:	83 ec 08             	sub    esp,0x8
c002806d:	68 5c 01 00 00       	push   0x15c
c0028072:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028076:	e8 59 5a fe ff       	call   c000dad4 <operator delete(void*, unsigned long)>
c002807b:	83 c4 10             	add    esp,0x10
c002807e:	83 c4 0c             	add    esp,0xc
c0028081:	c3                   	ret    

Disassembly of section userkernel:

c002e000 <KiDefaultSignalHandlerAbort(int)>:
c002e000:	57                   	push   edi
c002e001:	b9 07 00 00 00       	mov    ecx,0x7
c002e006:	56                   	push   esi
c002e007:	be ff 9e 02 c0       	mov    esi,0xc0029eff
c002e00c:	83 ec 24             	sub    esp,0x24
c002e00f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002e013:	fc                   	cld    
c002e014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002e016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002e01a:	50                   	push   eax
c002e01b:	6a 00                	push   0x0
c002e01d:	6a 38                	push   0x38
c002e01f:	6a 01                	push   0x1
c002e021:	e8 2c 00 00 00       	call   c002e052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002e026:	83 c4 34             	add    esp,0x34
c002e029:	5e                   	pop    esi
c002e02a:	5f                   	pop    edi
c002e02b:	c3                   	ret    

c002e02c <KiDefaultSignalHandlerTerminate(int)>:
c002e02c:	57                   	push   edi
c002e02d:	b9 08 00 00 00       	mov    ecx,0x8
c002e032:	56                   	push   esi
c002e033:	be 1b 9f 02 c0       	mov    esi,0xc0029f1b
c002e038:	83 ec 24             	sub    esp,0x24
c002e03b:	89 e7                	mov    edi,esp
c002e03d:	fc                   	cld    
c002e03e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002e040:	54                   	push   esp
c002e041:	6a 00                	push   0x0
c002e043:	6a 37                	push   0x37
c002e045:	6a 01                	push   0x1
c002e047:	e8 06 00 00 00       	call   c002e052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002e04c:	83 c4 34             	add    esp,0x34
c002e04f:	5e                   	pop    esi
c002e050:	5f                   	pop    edi
c002e051:	c3                   	ret    

c002e052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c002e052:	53                   	push   ebx
c002e053:	83 ec 10             	sub    esp,0x10
c002e056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002e05a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002e05e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002e062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002e066:	cd 60                	int    0x60
c002e068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002e06c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002e070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002e074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002e078:	83 c4 10             	add    esp,0x10
c002e07b:	5b                   	pop    ebx
c002e07c:	c3                   	ret    

Disassembly of section align_previous:

c002f000 <DO_NOT_DELETE()>:
c002f000:	c3                   	ret    
