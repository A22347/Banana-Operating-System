
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 7f fc 00 00       	call   c000fc9f <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 08 64 02 c0       	mov    eax,0xc0026408
c0000025:	3d 08 64 02 c0       	cmp    eax,0xc0026408
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 08 64 02 c0       	push   0xc0026408
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 08 64 02 c0       	mov    eax,0xc0026408
c0000051:	2d 08 64 02 c0       	sub    eax,0xc0026408
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 08 64 02 c0       	push   0xc0026408
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 80 02 c0 00 	cmp    BYTE PTR ds:0xc00280c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 10 20 02 c0       	mov    ebx,0xc0022010
c0000097:	81 eb 0c 20 02 c0    	sub    ebx,0xc002200c
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 0c 20 02 c0       	mov    esi,0xc002200c
c00000a6:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 80 02 c0       	mov    ds:0xc00280c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 08 64 02 c0       	push   0xc0026408
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 80 02 c0 01 	mov    BYTE PTR ds:0xc00280c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 80 02 c0       	push   0xc00280c8
c0000108:	68 08 64 02 c0       	push   0xc0026408
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 1f 5f 01 00       	call   c00161cc <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 16 42 01 00       	call   c00144db <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 fd 5e 01 00       	call   c00161cc <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 3e 64 01 00       	call   c001672c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 ed 68 01 00       	call   c0016be4 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 e0 e0 02 c0 	lgdtd  ds:0xc002e0e0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 2e ef 00 00       	jmp    c000f2ad <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 80 02 c0       	mov    ds:0xc00280e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 80 02 c0    	mov    DWORD PTR ds:0xc00280e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 20 20 02 c0 02 	test   BYTE PTR [edx-0x3ffddfe0],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 20 20 02 c0 01 	test   BYTE PTR [edx-0x3ffddfe0],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 20 20 02 c0 08 	test   BYTE PTR [edx-0x3ffddfe0],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 20 20 02 c0 08 	test   BYTE PTR [edx-0x3ffddfe0],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 20 20 02 c0 04 	test   BYTE PTR [ecx-0x3ffddfe0],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 20 20 02 c0 01 	test   BYTE PTR [edx-0x3ffddfe0],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d8d:	85 c9                	test   ecx,ecx
c0000d8f:	0f 84 01 01 00 00    	je     c0000e96 <dlfree+0x110>
c0000d95:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d98:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d9b:	8b 1d 00 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c3                	cmp    ebx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 cb 03             	or     ebx,0x3
c0000db0:	89 1d 00 81 02 c0    	mov    DWORD PTR ds:0xc0028100,ebx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 1c 85 04 81 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd7efc]
c0000dc0:	89 19                	mov    DWORD PTR [ecx],ebx
c0000dc2:	89 14 85 04 81 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7efc],edx
c0000dc9:	e9 c8 00 00 00       	jmp    c0000e96 <dlfree+0x110>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 cb 01             	or     ebx,0x1
c0000ddd:	89 1d 00 81 02 c0    	mov    DWORD PTR ds:0xc0028100,ebx
c0000de3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000de6:	83 e3 fc             	and    ebx,0xfffffffc
c0000de9:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000df2:	29 ca                	sub    edx,ecx
c0000df4:	01 c8                	add    eax,ecx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dfc:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dff:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e02:	39 35 2c 81 02 c0    	cmp    DWORD PTR ds:0xc002812c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000e0e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000e11:	80 e1 01             	and    cl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 d8                	add    eax,ebx
c0000e1b:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000e1e:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000e21:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e24:	8b 0d 3c 81 02 c0    	mov    ecx,DWORD PTR ds:0xc002813c
c0000e2a:	c7 42 0c 34 81 02 c0 	mov    DWORD PTR [edx+0xc],0xc0028134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 d8                	add    eax,ebx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 35                	jbe    c0000e96 <dlfree+0x110>
c0000e61:	f6 05 00 81 02 c0 02 	test   BYTE PTR ds:0xc0028100,0x2
c0000e68:	74 2c                	je     c0000e96 <dlfree+0x110>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e7a:	53                   	push   ebx
c0000e7b:	53                   	push   ebx
c0000e7c:	ff 0d 50 84 02 c0    	dec    DWORD PTR ds:0xc0028450
c0000e82:	01 c8                	add    eax,ecx
c0000e84:	29 ca                	sub    edx,ecx
c0000e86:	50                   	push   eax
c0000e87:	52                   	push   edx
c0000e88:	29 05 64 84 02 c0    	sub    DWORD PTR ds:0xc0028464,eax
c0000e8e:	e8 5b eb 00 00       	call   c000f9ee <munmap>
c0000e93:	83 c4 10             	add    esp,0x10
c0000e96:	5b                   	pop    ebx
c0000e97:	5e                   	pop    esi
c0000e98:	5f                   	pop    edi
c0000e99:	c3                   	ret    

c0000e9a <sYSMALLOc>:
c0000e9a:	55                   	push   ebp
c0000e9b:	57                   	push   edi
c0000e9c:	56                   	push   esi
c0000e9d:	53                   	push   ebx
c0000e9e:	89 d3                	mov    ebx,edx
c0000ea0:	83 ec 2c             	sub    esp,0x2c
c0000ea3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000ea7:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ead:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000eb0:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000eb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000eb7:	74 1f                	je     c0000ed8 <sYSMALLOc+0x3e>
c0000eb9:	89 d0                	mov    eax,edx
c0000ebb:	e8 df fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ec0:	83 ec 0c             	sub    esp,0xc
c0000ec3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ec7:	83 e8 07             	sub    eax,0x7
c0000eca:	50                   	push   eax
c0000ecb:	e8 78 03 00 00       	call   c0001248 <dlmalloc>
c0000ed0:	83 c4 10             	add    esp,0x10
c0000ed3:	e9 68 03 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0000ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000edc:	f7 d9                	neg    ecx
c0000ede:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000ee4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0000ee8:	0f 87 be 00 00 00    	ja     c0000fac <sYSMALLOc+0x112>
c0000eee:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ef4:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000efa:	0f 8d ac 00 00 00    	jge    c0000fac <sYSMALLOc+0x112>
c0000f00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000f08:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000f0c:	21 ce                	and    esi,ecx
c0000f0e:	39 fe                	cmp    esi,edi
c0000f10:	0f 86 96 00 00 00    	jbe    c0000fac <sYSMALLOc+0x112>
c0000f16:	52                   	push   edx
c0000f17:	52                   	push   edx
c0000f18:	6a 00                	push   0x0
c0000f1a:	6a ff                	push   0xffffffff
c0000f1c:	6a 0c                	push   0xc
c0000f1e:	6a 03                	push   0x3
c0000f20:	56                   	push   esi
c0000f21:	6a 00                	push   0x0
c0000f23:	e8 68 ea 00 00       	call   c000f990 <mmap>
c0000f28:	83 c4 20             	add    esp,0x20
c0000f2b:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2e:	74 7c                	je     c0000fac <sYSMALLOc+0x112>
c0000f30:	89 c1                	mov    ecx,eax
c0000f32:	83 e1 07             	and    ecx,0x7
c0000f35:	74 13                	je     c0000f4a <sYSMALLOc+0xb0>
c0000f37:	ba 08 00 00 00       	mov    edx,0x8
c0000f3c:	89 f7                	mov    edi,esi
c0000f3e:	29 ca                	sub    edx,ecx
c0000f40:	01 d0                	add    eax,edx
c0000f42:	29 d7                	sub    edi,edx
c0000f44:	89 10                	mov    DWORD PTR [eax],edx
c0000f46:	89 fa                	mov    edx,edi
c0000f48:	eb 08                	jmp    c0000f52 <sYSMALLOc+0xb8>
c0000f4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f50:	89 f2                	mov    edx,esi
c0000f52:	83 ca 02             	or     edx,0x2
c0000f55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f58:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f5e:	8d 57 01             	lea    edx,[edi+0x1]
c0000f61:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f67:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f6d:	7e 06                	jle    c0000f75 <sYSMALLOc+0xdb>
c0000f6f:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f75:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f7b:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f81:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f87:	76 06                	jbe    c0000f8f <sYSMALLOc+0xf5>
c0000f89:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f8f:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f95:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f9b:	0f 83 41 01 00 00    	jae    c00010e2 <sYSMALLOc+0x248>
c0000fa1:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000fa7:	e9 36 01 00 00       	jmp    c00010e2 <sYSMALLOc+0x248>
c0000fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000faf:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000fbc:	83 e0 fc             	and    eax,0xfffffffc
c0000fbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000fc7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fd3:	83 c0 10             	add    eax,0x10
c0000fd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000fda:	01 c5                	add    ebp,eax
c0000fdc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fe3:	74 04                	je     c0000fe9 <sYSMALLOc+0x14f>
c0000fe5:	2b 6c 24 04          	sub    ebp,DWORD PTR [esp+0x4]
c0000fe9:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c0000fed:	23 6c 24 14          	and    ebp,DWORD PTR [esp+0x14]
c0000ff1:	89 ee                	mov    esi,ebp
c0000ff3:	7f 19                	jg     c000100e <sYSMALLOc+0x174>
c0000ff5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ffc:	74 28                	je     c0001026 <sYSMALLOc+0x18c>
c0000ffe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001002:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001006:	01 ee                	add    esi,ebp
c0001008:	23 74 24 14          	and    esi,DWORD PTR [esp+0x14]
c000100c:	eb 18                	jmp    c0001026 <sYSMALLOc+0x18c>
c000100e:	83 ec 0c             	sub    esp,0xc
c0001011:	55                   	push   ebp
c0001012:	e8 43 e9 00 00       	call   c000f95a <sbrk_thunk>
c0001017:	83 c4 10             	add    esp,0x10
c000101a:	89 c7                	mov    edi,eax
c000101c:	83 c8 ff             	or     eax,0xffffffff
c000101f:	83 ff ff             	cmp    edi,0xffffffff
c0001022:	75 42                	jne    c0001066 <sYSMALLOc+0x1cc>
c0001024:	eb cf                	jmp    c0000ff5 <sYSMALLOc+0x15b>
c0001026:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c000102c:	77 05                	ja     c0001033 <sYSMALLOc+0x199>
c000102e:	be 00 c0 00 00       	mov    esi,0xc000
c0001033:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0001037:	77 07                	ja     c0001040 <sYSMALLOc+0x1a6>
c0001039:	31 c0                	xor    eax,eax
c000103b:	e9 00 02 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0001040:	50                   	push   eax
c0001041:	50                   	push   eax
c0001042:	6a 00                	push   0x0
c0001044:	6a ff                	push   0xffffffff
c0001046:	6a 0c                	push   0xc
c0001048:	6a 03                	push   0x3
c000104a:	56                   	push   esi
c000104b:	6a 00                	push   0x0
c000104d:	e8 3e e9 00 00       	call   c000f990 <mmap>
c0001052:	83 c4 20             	add    esp,0x20
c0001055:	83 f8 ff             	cmp    eax,0xffffffff
c0001058:	89 c7                	mov    edi,eax
c000105a:	74 dd                	je     c0001039 <sYSMALLOc+0x19f>
c000105c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001063:	8d 04 30             	lea    eax,[eax+esi*1]
c0001066:	8b 8b 68 03 00 00    	mov    ecx,DWORD PTR [ebx+0x368]
c000106c:	01 f1                	add    ecx,esi
c000106e:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001072:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001078:	75 70                	jne    c00010ea <sYSMALLOc+0x250>
c000107a:	83 f8 ff             	cmp    eax,0xffffffff
c000107d:	75 6b                	jne    c00010ea <sYSMALLOc+0x250>
c000107f:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001083:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001087:	83 ce 01             	or     esi,0x1
c000108a:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c000108d:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001093:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001099:	73 06                	jae    c00010a1 <sYSMALLOc+0x207>
c000109b:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a1:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a7:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010ad:	73 06                	jae    c00010b5 <sYSMALLOc+0x21b>
c00010af:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bb:	83 e2 fc             	and    edx,0xfffffffc
c00010be:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
c00010c2:	0f 87 71 ff ff ff    	ja     c0001039 <sYSMALLOc+0x19f>
c00010c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cc:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010cf:	29 fa                	sub    edx,edi
c00010d1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d4:	89 fb                	mov    ebx,edi
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	83 cb 01             	or     ebx,0x1
c00010dc:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e2:	83 c0 08             	add    eax,0x8
c00010e5:	e9 56 01 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c00010ea:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010f0:	f6 c2 01             	test   dl,0x1
c00010f3:	74 1e                	je     c0001113 <sYSMALLOc+0x279>
c00010f5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010fa:	0f 84 bb 00 00 00    	je     c00011bb <sYSMALLOc+0x321>
c0001100:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001104:	0f 86 b1 00 00 00    	jbe    c00011bb <sYSMALLOc+0x321>
c000110a:	83 e2 fe             	and    edx,0xfffffffe
c000110d:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001113:	83 f8 ff             	cmp    eax,0xffffffff
c0001116:	89 fd                	mov    ebp,edi
c0001118:	75 24                	jne    c000113e <sYSMALLOc+0x2a4>
c000111a:	83 ec 0c             	sub    esp,0xc
c000111d:	89 fd                	mov    ebp,edi
c000111f:	6a 00                	push   0x0
c0001121:	e8 34 e8 00 00       	call   c000f95a <sbrk_thunk>
c0001126:	83 c4 10             	add    esp,0x10
c0001129:	89 c2                	mov    edx,eax
c000112b:	29 fa                	sub    edx,edi
c000112d:	29 f2                	sub    edx,esi
c000112f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001135:	83 f8 ff             	cmp    eax,0xffffffff
c0001138:	0f 84 4f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000113e:	31 c9                	xor    ecx,ecx
c0001140:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001143:	29 e8                	sub    eax,ebp
c0001145:	01 c8                	add    eax,ecx
c0001147:	83 c8 01             	or     eax,0x1
c000114a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000114d:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001153:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001158:	0f 84 2f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000115e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0001162:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001166:	83 ee 0c             	sub    esi,0xc
c0001169:	83 e6 f8             	and    esi,0xfffffff8
c000116c:	89 f0                	mov    eax,esi
c000116e:	83 c8 01             	or     eax,0x1
c0001171:	83 fe 0f             	cmp    esi,0xf
c0001174:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001177:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c000117f:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c0001187:	0f 86 00 ff ff ff    	jbe    c000108d <sYSMALLOc+0x1f3>
c000118d:	83 ec 0c             	sub    esp,0xc
c0001190:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001196:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00011a4:	83 c0 08             	add    eax,0x8
c00011a7:	50                   	push   eax
c00011a8:	e8 d9 fb ff ff       	call   c0000d86 <dlfree>
c00011ad:	83 c4 10             	add    esp,0x10
c00011b0:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00011b6:	e9 d2 fe ff ff       	jmp    c000108d <sYSMALLOc+0x1f3>
c00011bb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00011c0:	74 0e                	je     c00011d0 <sYSMALLOc+0x336>
c00011c2:	89 f8                	mov    eax,edi
c00011c4:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00011c8:	01 c1                	add    ecx,eax
c00011ca:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c00011d0:	89 fa                	mov    edx,edi
c00011d2:	83 e2 07             	and    edx,0x7
c00011d5:	74 0c                	je     c00011e3 <sYSMALLOc+0x349>
c00011d7:	b8 08 00 00 00       	mov    eax,0x8
c00011dc:	29 d0                	sub    eax,edx
c00011de:	8d 2c 07             	lea    ebp,[edi+eax*1]
c00011e1:	eb 04                	jmp    c00011e7 <sYSMALLOc+0x34d>
c00011e3:	89 fd                	mov    ebp,edi
c00011e5:	31 c0                	xor    eax,eax
c00011e7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00011eb:	83 ec 0c             	sub    esp,0xc
c00011ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00011f2:	8d 14 06             	lea    edx,[esi+eax*1]
c00011f5:	01 fa                	add    edx,edi
c00011f7:	01 d1                	add    ecx,edx
c00011f9:	29 d0                	sub    eax,edx
c00011fb:	23 4c 24 20          	and    ecx,DWORD PTR [esp+0x20]
c00011ff:	01 c1                	add    ecx,eax
c0001201:	51                   	push   ecx
c0001202:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0001206:	e8 4f e7 00 00       	call   c000f95a <sbrk_thunk>
c000120b:	83 c4 10             	add    esp,0x10
c000120e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001212:	83 f8 ff             	cmp    eax,0xffffffff
c0001215:	75 12                	jne    c0001229 <sYSMALLOc+0x38f>
c0001217:	83 ec 0c             	sub    esp,0xc
c000121a:	6a 00                	push   0x0
c000121c:	e8 39 e7 00 00       	call   c000f95a <sbrk_thunk>
c0001221:	83 c4 10             	add    esp,0x10
c0001224:	e9 0c ff ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001229:	39 f8                	cmp    eax,edi
c000122b:	0f 83 0f ff ff ff    	jae    c0001140 <sYSMALLOc+0x2a6>
c0001231:	8d 04 37             	lea    eax,[edi+esi*1]
c0001234:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000123b:	e9 f5 fe ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001240:	83 c4 2c             	add    esp,0x2c
c0001243:	5b                   	pop    ebx
c0001244:	5e                   	pop    esi
c0001245:	5f                   	pop    edi
c0001246:	5d                   	pop    ebp
c0001247:	c3                   	ret    

c0001248 <dlmalloc>:
c0001248:	55                   	push   ebp
c0001249:	57                   	push   edi
c000124a:	56                   	push   esi
c000124b:	53                   	push   ebx
c000124c:	83 ec 1c             	sub    esp,0x1c
c000124f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001253:	83 f8 df             	cmp    eax,0xffffffdf
c0001256:	0f 87 70 03 00 00    	ja     c00015cc <dlmalloc+0x384>
c000125c:	83 c0 0b             	add    eax,0xb
c000125f:	be 10 00 00 00       	mov    esi,0x10
c0001264:	83 f8 0f             	cmp    eax,0xf
c0001267:	76 05                	jbe    c000126e <dlmalloc+0x26>
c0001269:	83 e0 f8             	and    eax,0xfffffff8
c000126c:	89 c6                	mov    esi,eax
c000126e:	8b 3d 00 81 02 c0    	mov    edi,DWORD PTR ds:0xc0028100
c0001274:	f7 c7 01 00 00 00    	test   edi,0x1
c000127a:	75 17                	jne    c0001293 <dlmalloc+0x4b>
c000127c:	85 ff                	test   edi,edi
c000127e:	0f 85 05 03 00 00    	jne    c0001589 <dlmalloc+0x341>
c0001284:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001289:	e8 11 fa ff ff       	call   c0000c9f <malloc_consolidate>
c000128e:	e9 f6 02 00 00       	jmp    c0001589 <dlmalloc+0x341>
c0001293:	39 f7                	cmp    edi,esi
c0001295:	72 1f                	jb     c00012b6 <dlmalloc+0x6e>
c0001297:	89 f2                	mov    edx,esi
c0001299:	c1 ea 03             	shr    edx,0x3
c000129c:	83 ea 02             	sub    edx,0x2
c000129f:	8b 04 95 04 81 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7efc]
c00012a6:	85 c0                	test   eax,eax
c00012a8:	74 0c                	je     c00012b6 <dlmalloc+0x6e>
c00012aa:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00012ad:	89 0c 95 04 81 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7efc],ecx
c00012b4:	eb 30                	jmp    c00012e6 <dlmalloc+0x9e>
c00012b6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012bc:	89 f0                	mov    eax,esi
c00012be:	77 2e                	ja     c00012ee <dlmalloc+0xa6>
c00012c0:	c1 e8 03             	shr    eax,0x3
c00012c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012c7:	8d 14 c5 34 81 02 c0 	lea    edx,[eax*8-0x3ffd7ecc]
c00012ce:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012d1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012d4:	39 c3                	cmp    ebx,eax
c00012d6:	74 2e                	je     c0001306 <dlmalloc+0xbe>
c00012d8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012db:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012e0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012e3:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012e6:	83 c0 08             	add    eax,0x8
c00012e9:	e9 e0 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00012ee:	e8 28 f9 ff ff       	call   c0000c1b <largebin_index>
c00012f3:	83 e7 02             	and    edi,0x2
c00012f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012fa:	74 0a                	je     c0001306 <dlmalloc+0xbe>
c00012fc:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001301:	e8 99 f9 ff ff       	call   c0000c9f <malloc_consolidate>
c0001306:	8d 46 10             	lea    eax,[esi+0x10]
c0001309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000130d:	8b 1d 40 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028140
c0001313:	81 fb 34 81 02 c0    	cmp    ebx,0xc0028134
c0001319:	0f 84 13 01 00 00    	je     c0001432 <dlmalloc+0x1ea>
c000131f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001325:	83 e7 fc             	and    edi,0xfffffffc
c0001328:	81 fe ff 00 00 00    	cmp    esi,0xff
c000132e:	77 4c                	ja     c000137c <dlmalloc+0x134>
c0001330:	3d 34 81 02 c0       	cmp    eax,0xc0028134
c0001335:	75 45                	jne    c000137c <dlmalloc+0x134>
c0001337:	39 1d 30 81 02 c0    	cmp    DWORD PTR ds:0xc0028130,ebx
c000133d:	75 3d                	jne    c000137c <dlmalloc+0x134>
c000133f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001343:	73 37                	jae    c000137c <dlmalloc+0x134>
c0001345:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001348:	89 fa                	mov    edx,edi
c000134a:	a3 3c 81 02 c0       	mov    ds:0xc002813c,eax
c000134f:	29 f2                	sub    edx,esi
c0001351:	83 ce 01             	or     esi,0x1
c0001354:	a3 40 81 02 c0       	mov    ds:0xc0028140,eax
c0001359:	89 d1                	mov    ecx,edx
c000135b:	a3 30 81 02 c0       	mov    ds:0xc0028130,eax
c0001360:	83 c9 01             	or     ecx,0x1
c0001363:	c7 40 08 34 81 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028134
c000136a:	c7 40 0c 34 81 02 c0 	mov    DWORD PTR [eax+0xc],0xc0028134
c0001371:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001374:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001377:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000137a:	eb 15                	jmp    c0001391 <dlmalloc+0x149>
c000137c:	a3 40 81 02 c0       	mov    ds:0xc0028140,eax
c0001381:	39 fe                	cmp    esi,edi
c0001383:	c7 40 08 34 81 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028134
c000138a:	75 0d                	jne    c0001399 <dlmalloc+0x151>
c000138c:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001391:	8d 43 08             	lea    eax,[ebx+0x8]
c0001394:	e9 35 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c0001399:	81 ff ff 00 00 00    	cmp    edi,0xff
c000139f:	89 f8                	mov    eax,edi
c00013a1:	77 19                	ja     c00013bc <dlmalloc+0x174>
c00013a3:	c1 e8 03             	shr    eax,0x3
c00013a6:	8d 14 00             	lea    edx,[eax+eax*1]
c00013a9:	83 c2 0d             	add    edx,0xd
c00013ac:	8d 2c 95 f8 80 02 c0 	lea    ebp,[edx*4-0x3ffd7f08]
c00013b3:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c00013ba:	eb 46                	jmp    c0001402 <dlmalloc+0x1ba>
c00013bc:	e8 5a f8 ff ff       	call   c0000c1b <largebin_index>
c00013c1:	8d 14 00             	lea    edx,[eax+eax*1]
c00013c4:	83 c2 0d             	add    edx,0xd
c00013c7:	8d 0c 95 00 81 02 c0 	lea    ecx,[edx*4-0x3ffd7f00]
c00013ce:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c00013d5:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013d8:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013dc:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013e0:	89 d5                	mov    ebp,edx
c00013e2:	74 1e                	je     c0001402 <dlmalloc+0x1ba>
c00013e4:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013e7:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013ea:	77 12                	ja     c00013fe <dlmalloc+0x1b6>
c00013ec:	83 cf 01             	or     edi,0x1
c00013ef:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013f2:	76 05                	jbe    c00013f9 <dlmalloc+0x1b1>
c00013f4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013f7:	eb f6                	jmp    c00013ef <dlmalloc+0x1a7>
c00013f9:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013fc:	eb 04                	jmp    c0001402 <dlmalloc+0x1ba>
c00013fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001402:	89 c7                	mov    edi,eax
c0001404:	88 c1                	mov    cl,al
c0001406:	c1 ff 05             	sar    edi,0x5
c0001409:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000140d:	bf 01 00 00 00       	mov    edi,0x1
c0001412:	d3 e7                	shl    edi,cl
c0001414:	89 f8                	mov    eax,edi
c0001416:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000141a:	09 04 bd 34 84 02 c0 	or     DWORD PTR [edi*4-0x3ffd7bcc],eax
c0001421:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001424:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001427:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000142a:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000142d:	e9 db fe ff ff       	jmp    c000130d <dlmalloc+0xc5>
c0001432:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001438:	76 78                	jbe    c00014b2 <dlmalloc+0x26a>
c000143a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000143e:	8d 04 c5 34 81 02 c0 	lea    eax,[eax*8-0x3ffd7ecc]
c0001445:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001448:	8d 48 f8             	lea    ecx,[eax-0x8]
c000144b:	39 ca                	cmp    edx,ecx
c000144d:	74 63                	je     c00014b2 <dlmalloc+0x26a>
c000144f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001452:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001455:	83 e3 fc             	and    ebx,0xfffffffc
c0001458:	39 de                	cmp    esi,ebx
c000145a:	77 52                	ja     c00014ae <dlmalloc+0x266>
c000145c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000145f:	89 df                	mov    edi,ebx
c0001461:	01 d3                	add    ebx,edx
c0001463:	29 f7                	sub    edi,esi
c0001465:	83 ff 0f             	cmp    edi,0xf
c0001468:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000146b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000146e:	8d 42 08             	lea    eax,[edx+0x8]
c0001471:	77 09                	ja     c000147c <dlmalloc+0x234>
c0001473:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001477:	e9 52 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000147c:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000147f:	83 ce 01             	or     esi,0x1
c0001482:	89 0d 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,ecx
c0001488:	89 0d 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,ecx
c000148e:	c7 41 08 34 81 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0028134
c0001495:	c7 41 0c 34 81 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0028134
c000149c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000149f:	89 fa                	mov    edx,edi
c00014a1:	83 ca 01             	or     edx,0x1
c00014a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014a7:	89 3b                	mov    DWORD PTR [ebx],edi
c00014a9:	e9 20 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00014ae:	89 c2                	mov    edx,eax
c00014b0:	eb 99                	jmp    c000144b <dlmalloc+0x203>
c00014b2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00014b6:	b8 01 00 00 00       	mov    eax,0x1
c00014bb:	41                   	inc    ecx
c00014bc:	8d 14 cd 2c 81 02 c0 	lea    edx,[ecx*8-0x3ffd7ed4]
c00014c3:	89 cb                	mov    ebx,ecx
c00014c5:	c1 eb 05             	shr    ebx,0x5
c00014c8:	8b 3c 9d 34 84 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7bcc]
c00014cf:	d3 e0                	shl    eax,cl
c00014d1:	39 f8                	cmp    eax,edi
c00014d3:	77 04                	ja     c00014d9 <dlmalloc+0x291>
c00014d5:	85 c0                	test   eax,eax
c00014d7:	75 26                	jne    c00014ff <dlmalloc+0x2b7>
c00014d9:	43                   	inc    ebx
c00014da:	83 fb 02             	cmp    ebx,0x2
c00014dd:	0f 87 a6 00 00 00    	ja     c0001589 <dlmalloc+0x341>
c00014e3:	8b 3c 9d 34 84 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7bcc]
c00014ea:	85 ff                	test   edi,edi
c00014ec:	74 eb                	je     c00014d9 <dlmalloc+0x291>
c00014ee:	89 d8                	mov    eax,ebx
c00014f0:	c1 e0 06             	shl    eax,0x6
c00014f3:	8d 14 85 2c 81 02 c0 	lea    edx,[eax*4-0x3ffd7ed4]
c00014fa:	b8 01 00 00 00       	mov    eax,0x1
c00014ff:	85 f8                	test   eax,edi
c0001501:	75 07                	jne    c000150a <dlmalloc+0x2c2>
c0001503:	83 c2 08             	add    edx,0x8
c0001506:	01 c0                	add    eax,eax
c0001508:	eb f5                	jmp    c00014ff <dlmalloc+0x2b7>
c000150a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000150d:	39 ca                	cmp    edx,ecx
c000150f:	75 14                	jne    c0001525 <dlmalloc+0x2dd>
c0001511:	89 c1                	mov    ecx,eax
c0001513:	83 c2 08             	add    edx,0x8
c0001516:	f7 d1                	not    ecx
c0001518:	01 c0                	add    eax,eax
c000151a:	21 cf                	and    edi,ecx
c000151c:	89 3c 9d 34 84 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7bcc],edi
c0001523:	eb ac                	jmp    c00014d1 <dlmalloc+0x289>
c0001525:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001528:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000152b:	83 e0 fc             	and    eax,0xfffffffc
c000152e:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001531:	89 c3                	mov    ebx,eax
c0001533:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001536:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001539:	29 f3                	sub    ebx,esi
c000153b:	8d 41 08             	lea    eax,[ecx+0x8]
c000153e:	83 fb 0f             	cmp    ebx,0xf
c0001541:	77 09                	ja     c000154c <dlmalloc+0x304>
c0001543:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001547:	e9 82 00 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000154c:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000154f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001555:	89 3d 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,edi
c000155b:	89 3d 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edi
c0001561:	c7 47 08 34 81 02 c0 	mov    DWORD PTR [edi+0x8],0xc0028134
c0001568:	c7 47 0c 34 81 02 c0 	mov    DWORD PTR [edi+0xc],0xc0028134
c000156f:	77 06                	ja     c0001577 <dlmalloc+0x32f>
c0001571:	89 3d 30 81 02 c0    	mov    DWORD PTR ds:0xc0028130,edi
c0001577:	83 ce 01             	or     esi,0x1
c000157a:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000157d:	89 d9                	mov    ecx,ebx
c000157f:	83 c9 01             	or     ecx,0x1
c0001582:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001585:	89 1a                	mov    DWORD PTR [edx],ebx
c0001587:	eb 45                	jmp    c00015ce <dlmalloc+0x386>
c0001589:	a1 2c 81 02 c0       	mov    eax,ds:0xc002812c
c000158e:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001591:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001594:	83 e2 fc             	and    edx,0xfffffffc
c0001597:	39 d1                	cmp    ecx,edx
c0001599:	77 1e                	ja     c00015b9 <dlmalloc+0x371>
c000159b:	89 f3                	mov    ebx,esi
c000159d:	29 f2                	sub    edx,esi
c000159f:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00015a2:	83 cb 01             	or     ebx,0x1
c00015a5:	89 0d 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,ecx
c00015ab:	83 ca 01             	or     edx,0x1
c00015ae:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015b1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00015b4:	e9 2d fd ff ff       	jmp    c00012e6 <dlmalloc+0x9e>
c00015b9:	83 c4 1c             	add    esp,0x1c
c00015bc:	89 f0                	mov    eax,esi
c00015be:	5b                   	pop    ebx
c00015bf:	ba 00 81 02 c0       	mov    edx,0xc0028100
c00015c4:	5e                   	pop    esi
c00015c5:	5f                   	pop    edi
c00015c6:	5d                   	pop    ebp
c00015c7:	e9 ce f8 ff ff       	jmp    c0000e9a <sYSMALLOc>
c00015cc:	31 c0                	xor    eax,eax
c00015ce:	83 c4 1c             	add    esp,0x1c
c00015d1:	5b                   	pop    ebx
c00015d2:	5e                   	pop    esi
c00015d3:	5f                   	pop    edi
c00015d4:	5d                   	pop    ebp
c00015d5:	c3                   	ret    

c00015d6 <iALLOc>:
c00015d6:	55                   	push   ebp
c00015d7:	89 c5                	mov    ebp,eax
c00015d9:	57                   	push   edi
c00015da:	56                   	push   esi
c00015db:	53                   	push   ebx
c00015dc:	83 ec 2c             	sub    esp,0x2c
c00015df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015e7:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c00015ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015f2:	75 12                	jne    c0001606 <iALLOc+0x30>
c00015f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015f8:	b8 00 81 02 c0       	mov    eax,0xc0028100
c00015fd:	e8 9d f6 ff ff       	call   c0000c9f <malloc_consolidate>
c0001602:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001606:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000160b:	74 12                	je     c000161f <iALLOc+0x49>
c000160d:	85 ed                	test   ebp,ebp
c000160f:	0f 84 64 01 00 00    	je     c0001779 <iALLOc+0x1a3>
c0001615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000161d:	eb 33                	jmp    c0001652 <iALLOc+0x7c>
c000161f:	85 ed                	test   ebp,ebp
c0001621:	75 14                	jne    c0001637 <iALLOc+0x61>
c0001623:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000162b:	83 c4 2c             	add    esp,0x2c
c000162e:	5b                   	pop    ebx
c000162f:	5e                   	pop    esi
c0001630:	5f                   	pop    edi
c0001631:	5d                   	pop    ebp
c0001632:	e9 11 fc ff ff       	jmp    c0001248 <dlmalloc>
c0001637:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000163f:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001646:	83 f8 0f             	cmp    eax,0xf
c0001649:	76 07                	jbe    c0001652 <iALLOc+0x7c>
c000164b:	83 e0 f8             	and    eax,0xfffffff8
c000164e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001652:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001657:	75 09                	jne    c0001662 <iALLOc+0x8c>
c0001659:	89 d0                	mov    eax,edx
c000165b:	31 f6                	xor    esi,esi
c000165d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001660:	eb 3b                	jmp    c000169d <iALLOc+0xc7>
c0001662:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000166a:	8b 02                	mov    eax,DWORD PTR [edx]
c000166c:	83 c0 0b             	add    eax,0xb
c000166f:	83 f8 0f             	cmp    eax,0xf
c0001672:	76 07                	jbe    c000167b <iALLOc+0xa5>
c0001674:	83 e0 f8             	and    eax,0xfffffff8
c0001677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000167b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000167f:	0f af f5             	imul   esi,ebp
c0001682:	eb 25                	jmp    c00016a9 <iALLOc+0xd3>
c0001684:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001686:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001689:	bb 10 00 00 00       	mov    ebx,0x10
c000168e:	83 f9 0f             	cmp    ecx,0xf
c0001691:	76 05                	jbe    c0001698 <iALLOc+0xc2>
c0001693:	83 e1 f8             	and    ecx,0xfffffff8
c0001696:	89 cb                	mov    ebx,ecx
c0001698:	01 de                	add    esi,ebx
c000169a:	83 c0 04             	add    eax,0x4
c000169d:	39 c7                	cmp    edi,eax
c000169f:	75 e3                	jne    c0001684 <iALLOc+0xae>
c00016a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00016a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00016ad:	83 ec 0c             	sub    esp,0xc
c00016b0:	8b 1d 54 84 02 c0    	mov    ebx,DWORD PTR ds:0xc0028454
c00016b6:	c7 05 54 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028454,0x0
c00016c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016c4:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00016c8:	50                   	push   eax
c00016c9:	e8 7a fb ff ff       	call   c0001248 <dlmalloc>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	89 1d 54 84 02 c0    	mov    DWORD PTR ds:0xc0028454,ebx
c00016d7:	85 c0                	test   eax,eax
c00016d9:	0f 84 92 00 00 00    	je     c0001771 <iALLOc+0x19b>
c00016df:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016e2:	8d 78 f8             	lea    edi,[eax-0x8]
c00016e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016e9:	83 e3 fc             	and    ebx,0xfffffffc
c00016ec:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016f1:	74 1e                	je     c0001711 <iALLOc+0x13b>
c00016f3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016f7:	89 d9                	mov    ecx,ebx
c00016f9:	52                   	push   edx
c00016fa:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016fe:	83 e9 04             	sub    ecx,0x4
c0001701:	51                   	push   ecx
c0001702:	6a 00                	push   0x0
c0001704:	50                   	push   eax
c0001705:	e8 e6 ed ff ff       	call   c00004f0 <memset>
c000170a:	83 c4 10             	add    esp,0x10
c000170d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001711:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001716:	75 14                	jne    c000172c <iALLOc+0x156>
c0001718:	8d 04 37             	lea    eax,[edi+esi*1]
c000171b:	29 f3                	sub    ebx,esi
c000171d:	8d 48 08             	lea    ecx,[eax+0x8]
c0001720:	83 cb 01             	or     ebx,0x1
c0001723:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001726:	89 f3                	mov    ebx,esi
c0001728:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000172c:	31 c0                	xor    eax,eax
c000172e:	4d                   	dec    ebp
c000172f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001733:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001736:	39 c5                	cmp    ebp,eax
c0001738:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000173b:	74 2c                	je     c0001769 <iALLOc+0x193>
c000173d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001741:	85 c9                	test   ecx,ecx
c0001743:	75 15                	jne    c000175a <iALLOc+0x184>
c0001745:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001748:	8d 71 0b             	lea    esi,[ecx+0xb]
c000174b:	b9 10 00 00 00       	mov    ecx,0x10
c0001750:	83 fe 0f             	cmp    esi,0xf
c0001753:	76 05                	jbe    c000175a <iALLOc+0x184>
c0001755:	83 e6 f8             	and    esi,0xfffffff8
c0001758:	89 f1                	mov    ecx,esi
c000175a:	89 ce                	mov    esi,ecx
c000175c:	29 cb                	sub    ebx,ecx
c000175e:	83 ce 01             	or     esi,0x1
c0001761:	40                   	inc    eax
c0001762:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001765:	01 cf                	add    edi,ecx
c0001767:	eb c6                	jmp    c000172f <iALLOc+0x159>
c0001769:	83 cb 01             	or     ebx,0x1
c000176c:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000176f:	eb 08                	jmp    c0001779 <iALLOc+0x1a3>
c0001771:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001779:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177d:	83 c4 2c             	add    esp,0x2c
c0001780:	5b                   	pop    ebx
c0001781:	5e                   	pop    esi
c0001782:	5f                   	pop    edi
c0001783:	5d                   	pop    ebp
c0001784:	c3                   	ret    

c0001785 <dlrealloc>:
c0001785:	55                   	push   ebp
c0001786:	57                   	push   edi
c0001787:	56                   	push   esi
c0001788:	53                   	push   ebx
c0001789:	83 ec 1c             	sub    esp,0x1c
c000178c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001790:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001794:	85 db                	test   ebx,ebx
c0001796:	75 10                	jne    c00017a8 <dlrealloc+0x23>
c0001798:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000179c:	83 c4 1c             	add    esp,0x1c
c000179f:	5b                   	pop    ebx
c00017a0:	5e                   	pop    esi
c00017a1:	5f                   	pop    edi
c00017a2:	5d                   	pop    ebp
c00017a3:	e9 a0 fa ff ff       	jmp    c0001248 <dlmalloc>
c00017a8:	83 f8 df             	cmp    eax,0xffffffdf
c00017ab:	0f 87 a6 01 00 00    	ja     c0001957 <dlrealloc+0x1d2>
c00017b1:	83 c0 0b             	add    eax,0xb
c00017b4:	bd 10 00 00 00       	mov    ebp,0x10
c00017b9:	83 f8 0f             	cmp    eax,0xf
c00017bc:	76 05                	jbe    c00017c3 <dlrealloc+0x3e>
c00017be:	83 e0 f8             	and    eax,0xfffffff8
c00017c1:	89 c5                	mov    ebp,eax
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	89 ce                	mov    esi,ecx
c00017c8:	83 e6 fc             	and    esi,0xfffffffc
c00017cb:	f6 c1 02             	test   cl,0x2
c00017ce:	0f 85 4e 01 00 00    	jne    c0001922 <dlrealloc+0x19d>
c00017d4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017d7:	39 f5                	cmp    ebp,esi
c00017d9:	0f 86 04 01 00 00    	jbe    c00018e3 <dlrealloc+0x15e>
c00017df:	8d 14 37             	lea    edx,[edi+esi*1]
c00017e2:	39 15 2c 81 02 c0    	cmp    DWORD PTR ds:0xc002812c,edx
c00017e8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00017eb:	75 33                	jne    c0001820 <dlrealloc+0x9b>
c00017ed:	83 e0 fc             	and    eax,0xfffffffc
c00017f0:	01 f0                	add    eax,esi
c00017f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017f6:	8d 45 10             	lea    eax,[ebp+0x10]
c00017f9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00017fd:	77 49                	ja     c0001848 <dlrealloc+0xc3>
c00017ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001803:	83 e1 01             	and    ecx,0x1
c0001806:	01 ef                	add    edi,ebp
c0001808:	09 e9                	or     ecx,ebp
c000180a:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c000180d:	89 3d 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,edi
c0001813:	29 e8                	sub    eax,ebp
c0001815:	83 c8 01             	or     eax,0x1
c0001818:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000181b:	e9 39 01 00 00       	jmp    c0001959 <dlrealloc+0x1d4>
c0001820:	89 c1                	mov    ecx,eax
c0001822:	83 e1 fe             	and    ecx,0xfffffffe
c0001825:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000182a:	75 1c                	jne    c0001848 <dlrealloc+0xc3>
c000182c:	83 e0 fc             	and    eax,0xfffffffc
c000182f:	01 f0                	add    eax,esi
c0001831:	39 c5                	cmp    ebp,eax
c0001833:	77 13                	ja     c0001848 <dlrealloc+0xc3>
c0001835:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001838:	89 c6                	mov    esi,eax
c000183a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000183d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001840:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001843:	e9 9b 00 00 00       	jmp    c00018e3 <dlrealloc+0x15e>
c0001848:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000184c:	8d 45 f9             	lea    eax,[ebp-0x7]
c000184f:	83 ec 0c             	sub    esp,0xc
c0001852:	50                   	push   eax
c0001853:	e8 f0 f9 ff ff       	call   c0001248 <dlmalloc>
c0001858:	83 c4 10             	add    esp,0x10
c000185b:	85 c0                	test   eax,eax
c000185d:	0f 84 f4 00 00 00    	je     c0001957 <dlrealloc+0x1d2>
c0001863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001867:	8d 48 f8             	lea    ecx,[eax-0x8]
c000186a:	39 ca                	cmp    edx,ecx
c000186c:	75 0a                	jne    c0001878 <dlrealloc+0xf3>
c000186e:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001871:	83 e0 fc             	and    eax,0xfffffffc
c0001874:	01 c6                	add    esi,eax
c0001876:	eb 6b                	jmp    c00018e3 <dlrealloc+0x15e>
c0001878:	8d 4e fc             	lea    ecx,[esi-0x4]
c000187b:	83 f9 27             	cmp    ecx,0x27
c000187e:	76 08                	jbe    c0001888 <dlrealloc+0x103>
c0001880:	89 de                	mov    esi,ebx
c0001882:	89 c7                	mov    edi,eax
c0001884:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001886:	eb 43                	jmp    c00018cb <dlrealloc+0x146>
c0001888:	8b 13                	mov    edx,DWORD PTR [ebx]
c000188a:	83 f9 13             	cmp    ecx,0x13
c000188d:	89 10                	mov    DWORD PTR [eax],edx
c000188f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001892:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001895:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001898:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000189b:	76 2e                	jbe    c00018cb <dlrealloc+0x146>
c000189d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00018a0:	83 f9 1b             	cmp    ecx,0x1b
c00018a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00018a6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00018a9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00018ac:	76 1d                	jbe    c00018cb <dlrealloc+0x146>
c00018ae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00018b1:	83 f9 23             	cmp    ecx,0x23
c00018b4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00018b7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00018ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00018bd:	76 0c                	jbe    c00018cb <dlrealloc+0x146>
c00018bf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00018c2:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00018c5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00018c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00018cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018cf:	83 ec 0c             	sub    esp,0xc
c00018d2:	53                   	push   ebx
c00018d3:	e8 ae f4 ff ff       	call   c0000d86 <dlfree>
c00018d8:	83 c4 10             	add    esp,0x10
c00018db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018df:	89 c3                	mov    ebx,eax
c00018e1:	eb 76                	jmp    c0001959 <dlrealloc+0x1d4>
c00018e3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018e6:	8d 04 37             	lea    eax,[edi+esi*1]
c00018e9:	89 f2                	mov    edx,esi
c00018eb:	29 ea                	sub    edx,ebp
c00018ed:	83 e1 01             	and    ecx,0x1
c00018f0:	83 fa 0f             	cmp    edx,0xf
c00018f3:	77 0b                	ja     c0001900 <dlrealloc+0x17b>
c00018f5:	09 f1                	or     ecx,esi
c00018f7:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018fe:	eb 59                	jmp    c0001959 <dlrealloc+0x1d4>
c0001900:	01 ef                	add    edi,ebp
c0001902:	83 ca 01             	or     edx,0x1
c0001905:	09 cd                	or     ebp,ecx
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000190d:	83 c7 08             	add    edi,0x8
c0001910:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001913:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001917:	57                   	push   edi
c0001918:	e8 69 f4 ff ff       	call   c0000d86 <dlfree>
c000191d:	83 c4 10             	add    esp,0x10
c0001920:	eb 37                	jmp    c0001959 <dlrealloc+0x1d4>
c0001922:	8d 45 04             	lea    eax,[ebp+0x4]
c0001925:	39 f0                	cmp    eax,esi
c0001927:	76 30                	jbe    c0001959 <dlrealloc+0x1d4>
c0001929:	83 ec 0c             	sub    esp,0xc
c000192c:	83 ed 07             	sub    ebp,0x7
c000192f:	55                   	push   ebp
c0001930:	e8 13 f9 ff ff       	call   c0001248 <dlmalloc>
c0001935:	83 c4 10             	add    esp,0x10
c0001938:	85 c0                	test   eax,eax
c000193a:	89 c5                	mov    ebp,eax
c000193c:	74 19                	je     c0001957 <dlrealloc+0x1d2>
c000193e:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001941:	89 c7                	mov    edi,eax
c0001943:	89 de                	mov    esi,ebx
c0001945:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001947:	83 ec 0c             	sub    esp,0xc
c000194a:	53                   	push   ebx
c000194b:	89 eb                	mov    ebx,ebp
c000194d:	e8 34 f4 ff ff       	call   c0000d86 <dlfree>
c0001952:	83 c4 10             	add    esp,0x10
c0001955:	eb 02                	jmp    c0001959 <dlrealloc+0x1d4>
c0001957:	31 db                	xor    ebx,ebx
c0001959:	83 c4 1c             	add    esp,0x1c
c000195c:	89 d8                	mov    eax,ebx
c000195e:	5b                   	pop    ebx
c000195f:	5e                   	pop    esi
c0001960:	5f                   	pop    edi
c0001961:	5d                   	pop    ebp
c0001962:	c3                   	ret    

c0001963 <dlmemalign>:
c0001963:	55                   	push   ebp
c0001964:	57                   	push   edi
c0001965:	56                   	push   esi
c0001966:	53                   	push   ebx
c0001967:	83 ec 0c             	sub    esp,0xc
c000196a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000196e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001972:	83 fa 08             	cmp    edx,0x8
c0001975:	77 10                	ja     c0001987 <dlmemalign+0x24>
c0001977:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000197b:	83 c4 0c             	add    esp,0xc
c000197e:	5b                   	pop    ebx
c000197f:	5e                   	pop    esi
c0001980:	5f                   	pop    edi
c0001981:	5d                   	pop    ebp
c0001982:	e9 c1 f8 ff ff       	jmp    c0001248 <dlmalloc>
c0001987:	83 fa 0f             	cmp    edx,0xf
c000198a:	bf 10 00 00 00       	mov    edi,0x10
c000198f:	76 13                	jbe    c00019a4 <dlmemalign+0x41>
c0001991:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001994:	85 d1                	test   ecx,edx
c0001996:	75 04                	jne    c000199c <dlmemalign+0x39>
c0001998:	89 d7                	mov    edi,edx
c000199a:	eb 08                	jmp    c00019a4 <dlmemalign+0x41>
c000199c:	39 d7                	cmp    edi,edx
c000199e:	73 04                	jae    c00019a4 <dlmemalign+0x41>
c00019a0:	01 ff                	add    edi,edi
c00019a2:	eb f8                	jmp    c000199c <dlmemalign+0x39>
c00019a4:	83 f8 df             	cmp    eax,0xffffffdf
c00019a7:	76 07                	jbe    c00019b0 <dlmemalign+0x4d>
c00019a9:	31 c0                	xor    eax,eax
c00019ab:	e9 ce 00 00 00       	jmp    c0001a7e <dlmemalign+0x11b>
c00019b0:	83 c0 0b             	add    eax,0xb
c00019b3:	bd 10 00 00 00       	mov    ebp,0x10
c00019b8:	83 f8 0f             	cmp    eax,0xf
c00019bb:	76 05                	jbe    c00019c2 <dlmemalign+0x5f>
c00019bd:	83 e0 f8             	and    eax,0xfffffff8
c00019c0:	89 c5                	mov    ebp,eax
c00019c2:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00019c6:	83 ec 0c             	sub    esp,0xc
c00019c9:	50                   	push   eax
c00019ca:	e8 79 f8 ff ff       	call   c0001248 <dlmalloc>
c00019cf:	83 c4 10             	add    esp,0x10
c00019d2:	85 c0                	test   eax,eax
c00019d4:	89 c1                	mov    ecx,eax
c00019d6:	74 d1                	je     c00019a9 <dlmemalign+0x46>
c00019d8:	8d 70 f8             	lea    esi,[eax-0x8]
c00019db:	31 d2                	xor    edx,edx
c00019dd:	f7 f7                	div    edi
c00019df:	85 d2                	test   edx,edx
c00019e1:	74 62                	je     c0001a45 <dlmemalign+0xe2>
c00019e3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019e7:	89 f8                	mov    eax,edi
c00019e9:	f7 d8                	neg    eax
c00019eb:	21 c3                	and    ebx,eax
c00019ed:	83 eb 08             	sub    ebx,0x8
c00019f0:	89 d8                	mov    eax,ebx
c00019f2:	29 f0                	sub    eax,esi
c00019f4:	83 f8 0f             	cmp    eax,0xf
c00019f7:	77 02                	ja     c00019fb <dlmemalign+0x98>
c00019f9:	01 fb                	add    ebx,edi
c00019fb:	89 d8                	mov    eax,ebx
c00019fd:	29 f0                	sub    eax,esi
c00019ff:	89 c6                	mov    esi,eax
c0001a01:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a04:	89 c2                	mov    edx,eax
c0001a06:	83 e2 fc             	and    edx,0xfffffffc
c0001a09:	29 f2                	sub    edx,esi
c0001a0b:	a8 02                	test   al,0x2
c0001a0d:	74 10                	je     c0001a1f <dlmemalign+0xbc>
c0001a0f:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001a12:	83 ca 02             	or     edx,0x2
c0001a15:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001a18:	8d 43 08             	lea    eax,[ebx+0x8]
c0001a1b:	89 33                	mov    DWORD PTR [ebx],esi
c0001a1d:	eb 5f                	jmp    c0001a7e <dlmemalign+0x11b>
c0001a1f:	89 d0                	mov    eax,edx
c0001a21:	83 ec 0c             	sub    esp,0xc
c0001a24:	83 c8 01             	or     eax,0x1
c0001a27:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001a2a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a2f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a32:	83 e0 01             	and    eax,0x1
c0001a35:	09 f0                	or     eax,esi
c0001a37:	89 de                	mov    esi,ebx
c0001a39:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a3c:	51                   	push   ecx
c0001a3d:	e8 44 f3 ff ff       	call   c0000d86 <dlfree>
c0001a42:	83 c4 10             	add    esp,0x10
c0001a45:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a48:	a8 02                	test   al,0x2
c0001a4a:	75 2f                	jne    c0001a7b <dlmemalign+0x118>
c0001a4c:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a4f:	83 e0 fc             	and    eax,0xfffffffc
c0001a52:	39 c2                	cmp    edx,eax
c0001a54:	73 25                	jae    c0001a7b <dlmemalign+0x118>
c0001a56:	29 e8                	sub    eax,ebp
c0001a58:	83 ec 0c             	sub    esp,0xc
c0001a5b:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a5e:	83 c8 01             	or     eax,0x1
c0001a61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001a64:	83 c2 08             	add    edx,0x8
c0001a67:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a6a:	83 e0 01             	and    eax,0x1
c0001a6d:	09 c5                	or     ebp,eax
c0001a6f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a72:	52                   	push   edx
c0001a73:	e8 0e f3 ff ff       	call   c0000d86 <dlfree>
c0001a78:	83 c4 10             	add    esp,0x10
c0001a7b:	8d 46 08             	lea    eax,[esi+0x8]
c0001a7e:	83 c4 0c             	add    esp,0xc
c0001a81:	5b                   	pop    ebx
c0001a82:	5e                   	pop    esi
c0001a83:	5f                   	pop    edi
c0001a84:	5d                   	pop    ebp
c0001a85:	c3                   	ret    

c0001a86 <dlcalloc>:
c0001a86:	53                   	push   ebx
c0001a87:	83 ec 14             	sub    esp,0x14
c0001a8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a8e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a93:	50                   	push   eax
c0001a94:	e8 af f7 ff ff       	call   c0001248 <dlmalloc>
c0001a99:	83 c4 10             	add    esp,0x10
c0001a9c:	85 c0                	test   eax,eax
c0001a9e:	89 c3                	mov    ebx,eax
c0001aa0:	74 6e                	je     c0001b10 <dlcalloc+0x8a>
c0001aa2:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001aa5:	a8 02                	test   al,0x2
c0001aa7:	75 67                	jne    c0001b10 <dlcalloc+0x8a>
c0001aa9:	83 e0 fc             	and    eax,0xfffffffc
c0001aac:	83 e8 04             	sub    eax,0x4
c0001aaf:	83 f8 27             	cmp    eax,0x27
c0001ab2:	76 0f                	jbe    c0001ac3 <dlcalloc+0x3d>
c0001ab4:	52                   	push   edx
c0001ab5:	50                   	push   eax
c0001ab6:	6a 00                	push   0x0
c0001ab8:	53                   	push   ebx
c0001ab9:	e8 32 ea ff ff       	call   c00004f0 <memset>
c0001abe:	83 c4 10             	add    esp,0x10
c0001ac1:	eb 4d                	jmp    c0001b10 <dlcalloc+0x8a>
c0001ac3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001ac9:	83 f8 13             	cmp    eax,0x13
c0001acc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001ad3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001ada:	76 34                	jbe    c0001b10 <dlcalloc+0x8a>
c0001adc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ae3:	83 f8 1b             	cmp    eax,0x1b
c0001ae6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001aed:	76 21                	jbe    c0001b10 <dlcalloc+0x8a>
c0001aef:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001af6:	83 f8 23             	cmp    eax,0x23
c0001af9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001b00:	76 0e                	jbe    c0001b10 <dlcalloc+0x8a>
c0001b02:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001b09:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001b10:	83 c4 08             	add    esp,0x8
c0001b13:	89 d8                	mov    eax,ebx
c0001b15:	5b                   	pop    ebx
c0001b16:	c3                   	ret    

c0001b17 <dlcfree>:
c0001b17:	e9 6a f2 ff ff       	jmp    c0000d86 <dlfree>

c0001b1c <dlindependent_calloc>:
c0001b1c:	83 ec 28             	sub    esp,0x28
c0001b1f:	b9 03 00 00 00       	mov    ecx,0x3
c0001b24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001b2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b34:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b38:	e8 99 fa ff ff       	call   c00015d6 <iALLOc>
c0001b3d:	83 c4 2c             	add    esp,0x2c
c0001b40:	c3                   	ret    

c0001b41 <dlindependent_comalloc>:
c0001b41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b45:	31 c9                	xor    ecx,ecx
c0001b47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b53:	e9 7e fa ff ff       	jmp    c00015d6 <iALLOc>

c0001b58 <dlvalloc>:
c0001b58:	83 ec 0c             	sub    esp,0xc
c0001b5b:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c0001b62:	75 0a                	jne    c0001b6e <dlvalloc+0x16>
c0001b64:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b69:	e8 31 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b6e:	50                   	push   eax
c0001b6f:	50                   	push   eax
c0001b70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b74:	ff 35 5c 84 02 c0    	push   DWORD PTR ds:0xc002845c
c0001b7a:	e8 e4 fd ff ff       	call   c0001963 <dlmemalign>
c0001b7f:	83 c4 1c             	add    esp,0x1c
c0001b82:	c3                   	ret    

c0001b83 <dlpvalloc>:
c0001b83:	83 ec 0c             	sub    esp,0xc
c0001b86:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c0001b8d:	75 0a                	jne    c0001b99 <dlpvalloc+0x16>
c0001b8f:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b94:	e8 06 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b99:	52                   	push   edx
c0001b9a:	a1 5c 84 02 c0       	mov    eax,ds:0xc002845c
c0001b9f:	52                   	push   edx
c0001ba0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001ba4:	89 c1                	mov    ecx,eax
c0001ba6:	f7 d9                	neg    ecx
c0001ba8:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001bac:	21 ca                	and    edx,ecx
c0001bae:	52                   	push   edx
c0001baf:	50                   	push   eax
c0001bb0:	e8 ae fd ff ff       	call   c0001963 <dlmemalign>
c0001bb5:	83 c4 1c             	add    esp,0x1c
c0001bb8:	c3                   	ret    

c0001bb9 <dlmalloc_trim>:
c0001bb9:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001bbe:	e8 dc f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001bc3:	31 c0                	xor    eax,eax
c0001bc5:	c3                   	ret    

c0001bc6 <dlmalloc_usable_size>:
c0001bc6:	53                   	push   ebx
c0001bc7:	31 c0                	xor    eax,eax
c0001bc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001bcd:	85 c9                	test   ecx,ecx
c0001bcf:	74 24                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bd1:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001bd4:	f6 c2 02             	test   dl,0x2
c0001bd7:	74 08                	je     c0001be1 <dlmalloc_usable_size+0x1b>
c0001bd9:	83 e2 fc             	and    edx,0xfffffffc
c0001bdc:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bdf:	eb 14                	jmp    c0001bf5 <dlmalloc_usable_size+0x2f>
c0001be1:	89 d3                	mov    ebx,edx
c0001be3:	31 c0                	xor    eax,eax
c0001be5:	83 e3 fe             	and    ebx,0xfffffffe
c0001be8:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bed:	74 06                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bef:	83 e2 fc             	and    edx,0xfffffffc
c0001bf2:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bf5:	5b                   	pop    ebx
c0001bf6:	c3                   	ret    

c0001bf7 <dlmallinfo>:
c0001bf7:	55                   	push   ebp
c0001bf8:	57                   	push   edi
c0001bf9:	56                   	push   esi
c0001bfa:	53                   	push   ebx
c0001bfb:	83 ec 08             	sub    esp,0x8
c0001bfe:	83 3d 2c 81 02 c0 00 	cmp    DWORD PTR ds:0xc002812c,0x0
c0001c05:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001c09:	75 0a                	jne    c0001c15 <dlmallinfo+0x1e>
c0001c0b:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001c10:	e8 8a f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001c15:	a1 2c 81 02 c0       	mov    eax,ds:0xc002812c
c0001c1a:	31 ed                	xor    ebp,ebp
c0001c1c:	31 c9                	xor    ecx,ecx
c0001c1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001c21:	83 e0 fc             	and    eax,0xfffffffc
c0001c24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c28:	31 c0                	xor    eax,eax
c0001c2a:	8b 14 85 04 81 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7efc]
c0001c31:	85 d2                	test   edx,edx
c0001c33:	74 0e                	je     c0001c43 <dlmallinfo+0x4c>
c0001c35:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c38:	45                   	inc    ebp
c0001c39:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c3c:	83 e6 fc             	and    esi,0xfffffffc
c0001c3f:	01 f1                	add    ecx,esi
c0001c41:	eb ee                	jmp    c0001c31 <dlmallinfo+0x3a>
c0001c43:	40                   	inc    eax
c0001c44:	83 f8 0a             	cmp    eax,0xa
c0001c47:	75 e1                	jne    c0001c2a <dlmallinfo+0x33>
c0001c49:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c54:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c57:	b8 34 81 02 c0       	mov    eax,0xc0028134
c0001c5c:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c5f:	39 f0                	cmp    eax,esi
c0001c61:	74 10                	je     c0001c73 <dlmallinfo+0x7c>
c0001c63:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c66:	ff 04 24             	inc    DWORD PTR [esp]
c0001c69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c6c:	83 e7 fc             	and    edi,0xfffffffc
c0001c6f:	01 fa                	add    edx,edi
c0001c71:	eb ec                	jmp    c0001c5f <dlmallinfo+0x68>
c0001c73:	83 c0 08             	add    eax,0x8
c0001c76:	3d 2c 84 02 c0       	cmp    eax,0xc002842c
c0001c7b:	75 df                	jne    c0001c5c <dlmallinfo+0x65>
c0001c7d:	8b 35 50 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028450
c0001c83:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c86:	a1 68 84 02 c0       	mov    eax,ds:0xc0028468
c0001c8b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c91:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c97:	8b 35 64 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028464
c0001c9d:	89 03                	mov    DWORD PTR [ebx],eax
c0001c9f:	29 d0                	sub    eax,edx
c0001ca1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ca8:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001cab:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001cae:	8b 35 74 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028474
c0001cb4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001cb7:	89 d8                	mov    eax,ebx
c0001cb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001cbc:	83 c4 08             	add    esp,0x8
c0001cbf:	5b                   	pop    ebx
c0001cc0:	5e                   	pop    esi
c0001cc1:	5f                   	pop    edi
c0001cc2:	5d                   	pop    ebp
c0001cc3:	c2 04 00             	ret    0x4

c0001cc6 <dlmalloc_stats>:
c0001cc6:	83 ec 30             	sub    esp,0x30
c0001cc9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001ccd:	50                   	push   eax
c0001cce:	e8 24 ff ff ff       	call   c0001bf7 <dlmallinfo>
c0001cd3:	83 c4 30             	add    esp,0x30
c0001cd6:	c3                   	ret    

c0001cd7 <dlmallopt>:
c0001cd7:	56                   	push   esi
c0001cd8:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001cdd:	53                   	push   ebx
c0001cde:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001ce2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001ce6:	e8 b4 ef ff ff       	call   c0000c9f <malloc_consolidate>
c0001ceb:	8d 46 04             	lea    eax,[esi+0x4]
c0001cee:	83 f8 05             	cmp    eax,0x5
c0001cf1:	77 5d                	ja     c0001d50 <dlmallopt+0x79>
c0001cf3:	ff 24 85 24 21 02 c0 	jmp    DWORD PTR [eax*4-0x3ffddedc]
c0001cfa:	83 fb 50             	cmp    ebx,0x50
c0001cfd:	77 51                	ja     c0001d50 <dlmallopt+0x79>
c0001cff:	85 db                	test   ebx,ebx
c0001d01:	ba 08 00 00 00       	mov    edx,0x8
c0001d06:	74 12                	je     c0001d1a <dlmallopt+0x43>
c0001d08:	83 c3 0b             	add    ebx,0xb
c0001d0b:	ba 10 00 00 00       	mov    edx,0x10
c0001d10:	83 fb 0f             	cmp    ebx,0xf
c0001d13:	76 05                	jbe    c0001d1a <dlmallopt+0x43>
c0001d15:	89 da                	mov    edx,ebx
c0001d17:	83 e2 f8             	and    edx,0xfffffff8
c0001d1a:	a1 00 81 02 c0       	mov    eax,ds:0xc0028100
c0001d1f:	83 e0 03             	and    eax,0x3
c0001d22:	09 d0                	or     eax,edx
c0001d24:	a3 00 81 02 c0       	mov    ds:0xc0028100,eax
c0001d29:	eb 27                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d2b:	89 1d 44 84 02 c0    	mov    DWORD PTR ds:0xc0028444,ebx
c0001d31:	eb 16                	jmp    c0001d49 <dlmallopt+0x72>
c0001d33:	89 1d 48 84 02 c0    	mov    DWORD PTR ds:0xc0028448,ebx
c0001d39:	eb 0e                	jmp    c0001d49 <dlmallopt+0x72>
c0001d3b:	89 1d 4c 84 02 c0    	mov    DWORD PTR ds:0xc002844c,ebx
c0001d41:	eb 06                	jmp    c0001d49 <dlmallopt+0x72>
c0001d43:	89 1d 54 84 02 c0    	mov    DWORD PTR ds:0xc0028454,ebx
c0001d49:	be 01 00 00 00       	mov    esi,0x1
c0001d4e:	eb 02                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d50:	31 f6                	xor    esi,esi
c0001d52:	5b                   	pop    ebx
c0001d53:	89 f0                	mov    eax,esi
c0001d55:	5e                   	pop    esi
c0001d56:	c3                   	ret    
c0001d57:	90                   	nop

c0001d58 <isblank>:
c0001d58:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d5d:	74 09                	je     c0001d68 <isblank+0x10>
c0001d5f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d64:	75 0a                	jne    c0001d70 <isblank+0x18>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	b8 01 00 00 00       	mov    eax,0x1
c0001d6d:	c3                   	ret    
c0001d6e:	66 90                	xchg   ax,ax
c0001d70:	b8 00 00 00 00       	mov    eax,0x0
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax

c0001d78 <iscntrl>:
c0001d78:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d7d:	7e 09                	jle    c0001d88 <iscntrl+0x10>
c0001d7f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d84:	75 0a                	jne    c0001d90 <iscntrl+0x18>
c0001d86:	66 90                	xchg   ax,ax
c0001d88:	b8 01 00 00 00       	mov    eax,0x1
c0001d8d:	c3                   	ret    
c0001d8e:	66 90                	xchg   ax,ax
c0001d90:	b8 00 00 00 00       	mov    eax,0x0
c0001d95:	c3                   	ret    
c0001d96:	66 90                	xchg   ax,ax

c0001d98 <isdigit>:
c0001d98:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d9d:	7e 0d                	jle    c0001dac <isdigit+0x14>
c0001d9f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001da4:	7f 06                	jg     c0001dac <isdigit+0x14>
c0001da6:	b8 01 00 00 00       	mov    eax,0x1
c0001dab:	c3                   	ret    
c0001dac:	b8 00 00 00 00       	mov    eax,0x0
c0001db1:	c3                   	ret    
c0001db2:	66 90                	xchg   ax,ax

c0001db4 <islower>:
c0001db4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001db9:	7e 0d                	jle    c0001dc8 <islower+0x14>
c0001dbb:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001dc0:	7f 06                	jg     c0001dc8 <islower+0x14>
c0001dc2:	b8 01 00 00 00       	mov    eax,0x1
c0001dc7:	c3                   	ret    
c0001dc8:	b8 00 00 00 00       	mov    eax,0x0
c0001dcd:	c3                   	ret    
c0001dce:	66 90                	xchg   ax,ax

c0001dd0 <isspace>:
c0001dd0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001dd5:	7c 19                	jl     c0001df0 <isspace+0x20>
c0001dd7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001ddc:	7e 0a                	jle    c0001de8 <isspace+0x18>
c0001dde:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001de3:	75 0b                	jne    c0001df0 <isspace+0x20>
c0001de5:	8d 76 00             	lea    esi,[esi+0x0]
c0001de8:	b8 01 00 00 00       	mov    eax,0x1
c0001ded:	c3                   	ret    
c0001dee:	66 90                	xchg   ax,ax
c0001df0:	b8 00 00 00 00       	mov    eax,0x0
c0001df5:	c3                   	ret    
c0001df6:	66 90                	xchg   ax,ax

c0001df8 <isupper>:
c0001df8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dfd:	7e 0d                	jle    c0001e0c <isupper+0x14>
c0001dff:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001e04:	7f 06                	jg     c0001e0c <isupper+0x14>
c0001e06:	b8 01 00 00 00       	mov    eax,0x1
c0001e0b:	c3                   	ret    
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalpha>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 db ff ff ff       	call   c0001df8 <isupper>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalpha+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 87 ff ff ff       	call   c0001db4 <islower>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalpha+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <isalnum>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalpha>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 10                	jne    c0001e64 <isalnum+0x20>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 3b ff ff ff       	call   c0001d98 <isdigit>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	74 08                	je     c0001e6c <isalnum+0x28>
c0001e64:	b8 01 00 00 00       	mov    eax,0x1
c0001e69:	c3                   	ret    
c0001e6a:	66 90                	xchg   ax,ax
c0001e6c:	b8 00 00 00 00       	mov    eax,0x0
c0001e71:	c3                   	ret    
c0001e72:	66 90                	xchg   ax,ax

c0001e74 <ispunct>:
c0001e74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e78:	e8 c7 ff ff ff       	call   c0001e44 <isalnum>
c0001e7d:	83 c4 04             	add    esp,0x4
c0001e80:	85 c0                	test   eax,eax
c0001e82:	75 28                	jne    c0001eac <ispunct+0x38>
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 43 ff ff ff       	call   c0001dd0 <isspace>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 18                	jne    c0001eac <ispunct+0x38>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 db fe ff ff       	call   c0001d78 <iscntrl>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	75 08                	jne    c0001eac <ispunct+0x38>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isgraph>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 87 ff ff ff       	call   c0001e44 <isalnum>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 10                	jne    c0001ed4 <isgraph+0x20>
c0001ec4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ec8:	e8 a7 ff ff ff       	call   c0001e74 <ispunct>
c0001ecd:	83 c4 04             	add    esp,0x4
c0001ed0:	85 c0                	test   eax,eax
c0001ed2:	74 08                	je     c0001edc <isgraph+0x28>
c0001ed4:	b8 01 00 00 00       	mov    eax,0x1
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax
c0001edc:	b8 00 00 00 00       	mov    eax,0x0
c0001ee1:	c3                   	ret    
c0001ee2:	66 90                	xchg   ax,ax

c0001ee4 <isprint>:
c0001ee4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee8:	e8 c7 ff ff ff       	call   c0001eb4 <isgraph>
c0001eed:	83 c4 04             	add    esp,0x4
c0001ef0:	85 c0                	test   eax,eax
c0001ef2:	75 08                	jne    c0001efc <isprint+0x18>
c0001ef4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ef9:	75 09                	jne    c0001f04 <isprint+0x20>
c0001efb:	90                   	nop
c0001efc:	b8 01 00 00 00       	mov    eax,0x1
c0001f01:	c3                   	ret    
c0001f02:	66 90                	xchg   ax,ax
c0001f04:	b8 00 00 00 00       	mov    eax,0x0
c0001f09:	c3                   	ret    
c0001f0a:	66 90                	xchg   ax,ax

c0001f0c <isxdigit>:
c0001f0c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f10:	e8 83 fe ff ff       	call   c0001d98 <isdigit>
c0001f15:	83 c4 04             	add    esp,0x4
c0001f18:	85 c0                	test   eax,eax
c0001f1a:	75 20                	jne    c0001f3c <isxdigit+0x30>
c0001f1c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f21:	7e 09                	jle    c0001f2c <isxdigit+0x20>
c0001f23:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001f28:	7e 12                	jle    c0001f3c <isxdigit+0x30>
c0001f2a:	66 90                	xchg   ax,ax
c0001f2c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f31:	7e 11                	jle    c0001f44 <isxdigit+0x38>
c0001f33:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f38:	7f 0a                	jg     c0001f44 <isxdigit+0x38>
c0001f3a:	66 90                	xchg   ax,ax
c0001f3c:	b8 01 00 00 00       	mov    eax,0x1
c0001f41:	c3                   	ret    
c0001f42:	66 90                	xchg   ax,ax
c0001f44:	b8 00 00 00 00       	mov    eax,0x0
c0001f49:	c3                   	ret    
c0001f4a:	66 90                	xchg   ax,ax

c0001f4c <LWIP_PLATFORM_HTONS>:
c0001f4c:	83 ec 04             	sub    esp,0x4
c0001f4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f53:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f57:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f5b:	c1 e8 08             	shr    eax,0x8
c0001f5e:	89 c2                	mov    edx,eax
c0001f60:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f64:	c1 e0 08             	shl    eax,0x8
c0001f67:	09 d0                	or     eax,edx
c0001f69:	83 c4 04             	add    esp,0x4
c0001f6c:	c3                   	ret    
c0001f6d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f70 <LWIP_PLATFORM_HTONL>:
c0001f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f74:	c1 e8 18             	shr    eax,0x18
c0001f77:	89 c2                	mov    edx,eax
c0001f79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f7d:	c1 e8 08             	shr    eax,0x8
c0001f80:	25 00 ff 00 00       	and    eax,0xff00
c0001f85:	09 c2                	or     edx,eax
c0001f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f8b:	c1 e0 08             	shl    eax,0x8
c0001f8e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f93:	09 c2                	or     edx,eax
c0001f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f99:	c1 e0 18             	shl    eax,0x18
c0001f9c:	09 d0                	or     eax,edx
c0001f9e:	c3                   	ret    

c0001f9f <disk_status>:
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <disk_initialize>:
c0001fa2:	31 c0                	xor    eax,eax
c0001fa4:	c3                   	ret    

c0001fa5 <disk_read>:
c0001fa5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faa:	0f b6 04 85 c0 eb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1440]
c0001fb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fb6:	e9 71 98 01 00       	jmp    c001b82c <fatWrapperReadDisk>

c0001fbb <disk_write>:
c0001fbb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fc0:	0f b6 04 85 c0 eb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1440]
c0001fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fcc:	e9 9b 98 01 00       	jmp    c001b86c <fatWrapperWriteDisk>

c0001fd1 <disk_ioctl>:
c0001fd1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001fda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fdf:	0f b6 04 85 c0 eb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1440]
c0001fe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001feb:	e9 bc 98 01 00       	jmp    c001b8ac <fatWrapperIoctl>

c0001ff0 <ld_word>:
c0001ff0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ff4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff7:	c1 e2 08             	shl    edx,0x8
c0001ffa:	09 d0                	or     eax,edx
c0001ffc:	c3                   	ret    

c0001ffd <ld_dword>:
c0001ffd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002001:	89 d1                	mov    ecx,edx
c0002003:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002007:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000200a:	c1 e1 08             	shl    ecx,0x8
c000200d:	09 ca                	or     edx,ecx
c000200f:	c1 e2 08             	shl    edx,0x8
c0002012:	09 d0                	or     eax,edx
c0002014:	c3                   	ret    

c0002015 <st_word>:
c0002015:	66 89 10             	mov    WORD PTR [eax],dx
c0002018:	c3                   	ret    

c0002019 <st_dword>:
c0002019:	89 10                	mov    DWORD PTR [eax],edx
c000201b:	c3                   	ret    

c000201c <mem_cpy>:
c000201c:	85 c9                	test   ecx,ecx
c000201e:	74 10                	je     c0002030 <mem_cpy+0x14>
c0002020:	57                   	push   edi
c0002021:	01 c1                	add    ecx,eax
c0002023:	56                   	push   esi
c0002024:	89 c7                	mov    edi,eax
c0002026:	89 d6                	mov    esi,edx
c0002028:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0002029:	39 f9                	cmp    ecx,edi
c000202b:	75 fb                	jne    c0002028 <mem_cpy+0xc>
c000202d:	5e                   	pop    esi
c000202e:	5f                   	pop    edi
c000202f:	c3                   	ret    
c0002030:	c3                   	ret    

c0002031 <mem_set>:
c0002031:	01 c1                	add    ecx,eax
c0002033:	88 10                	mov    BYTE PTR [eax],dl
c0002035:	40                   	inc    eax
c0002036:	39 c8                	cmp    eax,ecx
c0002038:	75 f9                	jne    c0002033 <mem_set+0x2>
c000203a:	c3                   	ret    

c000203b <mem_cmp>:
c000203b:	57                   	push   edi
c000203c:	56                   	push   esi
c000203d:	89 c6                	mov    esi,eax
c000203f:	53                   	push   ebx
c0002040:	46                   	inc    esi
c0002041:	42                   	inc    edx
c0002042:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0002046:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c000204a:	29 fb                	sub    ebx,edi
c000204c:	89 cf                	mov    edi,ecx
c000204e:	29 f7                	sub    edi,esi
c0002050:	01 c7                	add    edi,eax
c0002052:	74 04                	je     c0002058 <mem_cmp+0x1d>
c0002054:	85 db                	test   ebx,ebx
c0002056:	74 e8                	je     c0002040 <mem_cmp+0x5>
c0002058:	89 d8                	mov    eax,ebx
c000205a:	5b                   	pop    ebx
c000205b:	5e                   	pop    esi
c000205c:	5f                   	pop    edi
c000205d:	c3                   	ret    

c000205e <chk_chr>:
c000205e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002061:	85 c9                	test   ecx,ecx
c0002063:	74 07                	je     c000206c <chk_chr+0xe>
c0002065:	39 d1                	cmp    ecx,edx
c0002067:	74 03                	je     c000206c <chk_chr+0xe>
c0002069:	40                   	inc    eax
c000206a:	eb f2                	jmp    c000205e <chk_chr>
c000206c:	89 c8                	mov    eax,ecx
c000206e:	c3                   	ret    

c000206f <dbc_1st>:
c000206f:	31 c0                	xor    eax,eax
c0002071:	c3                   	ret    

c0002072 <dbc_2nd>:
c0002072:	31 c0                	xor    eax,eax
c0002074:	c3                   	ret    

c0002075 <tchar2uni>:
c0002075:	57                   	push   edi
c0002076:	56                   	push   esi
c0002077:	53                   	push   ebx
c0002078:	8b 18                	mov    ebx,DWORD PTR [eax]
c000207a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000207c:	8d 73 01             	lea    esi,[ebx+0x1]
c000207f:	f6 c1 80             	test   cl,0x80
c0002082:	75 0a                	jne    c000208e <tchar2uni+0x19>
c0002084:	0f b6 d1             	movzx  edx,cl
c0002087:	89 f3                	mov    ebx,esi
c0002089:	e9 b2 00 00 00       	jmp    c0002140 <tchar2uni+0xcb>
c000208e:	89 ca                	mov    edx,ecx
c0002090:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002096:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000209c:	89 ca                	mov    edx,ecx
c000209e:	75 0a                	jne    c00020aa <tchar2uni+0x35>
c00020a0:	83 e2 1f             	and    edx,0x1f
c00020a3:	b9 01 00 00 00       	mov    ecx,0x1
c00020a8:	eb 37                	jmp    c00020e1 <tchar2uni+0x6c>
c00020aa:	81 e2 f0 00 00 00    	and    edx,0xf0
c00020b0:	81 fa e0 00 00 00    	cmp    edx,0xe0
c00020b6:	75 0c                	jne    c00020c4 <tchar2uni+0x4f>
c00020b8:	89 ca                	mov    edx,ecx
c00020ba:	b9 02 00 00 00       	mov    ecx,0x2
c00020bf:	83 e2 0f             	and    edx,0xf
c00020c2:	eb 1d                	jmp    c00020e1 <tchar2uni+0x6c>
c00020c4:	89 cf                	mov    edi,ecx
c00020c6:	83 ca ff             	or     edx,0xffffffff
c00020c9:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020cf:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020d5:	75 70                	jne    c0002147 <tchar2uni+0xd2>
c00020d7:	89 ca                	mov    edx,ecx
c00020d9:	b9 03 00 00 00       	mov    ecx,0x3
c00020de:	83 e2 07             	and    edx,0x7
c00020e1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020e5:	46                   	inc    esi
c00020e6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020e9:	89 cf                	mov    edi,ecx
c00020eb:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020f1:	83 c7 80             	add    edi,0xffffff80
c00020f4:	75 4e                	jne    c0002144 <tchar2uni+0xcf>
c00020f6:	c1 e2 06             	shl    edx,0x6
c00020f9:	83 e1 3f             	and    ecx,0x3f
c00020fc:	09 ca                	or     edx,ecx
c00020fe:	39 de                	cmp    esi,ebx
c0002100:	75 e3                	jne    c00020e5 <tchar2uni+0x70>
c0002102:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002108:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000210e:	76 34                	jbe    c0002144 <tchar2uni+0xcf>
c0002110:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002113:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0002119:	77 29                	ja     c0002144 <tchar2uni+0xcf>
c000211b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002121:	76 1d                	jbe    c0002140 <tchar2uni+0xcb>
c0002123:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002129:	81 e2 ff 03 00 00    	and    edx,0x3ff
c000212f:	c1 e1 06             	shl    ecx,0x6
c0002132:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002138:	09 ca                	or     edx,ecx
c000213a:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002140:	89 18                	mov    DWORD PTR [eax],ebx
c0002142:	eb 03                	jmp    c0002147 <tchar2uni+0xd2>
c0002144:	83 ca ff             	or     edx,0xffffffff
c0002147:	5b                   	pop    ebx
c0002148:	89 d0                	mov    eax,edx
c000214a:	5e                   	pop    esi
c000214b:	5f                   	pop    edi
c000214c:	c3                   	ret    

c000214d <put_utf>:
c000214d:	53                   	push   ebx
c000214e:	83 f8 7f             	cmp    eax,0x7f
c0002151:	89 c3                	mov    ebx,eax
c0002153:	b0 00                	mov    al,0x0
c0002155:	77 11                	ja     c0002168 <put_utf+0x1b>
c0002157:	85 c9                	test   ecx,ecx
c0002159:	0f 84 e5 00 00 00    	je     c0002244 <put_utf+0xf7>
c000215f:	88 1a                	mov    BYTE PTR [edx],bl
c0002161:	b0 01                	mov    al,0x1
c0002163:	e9 dc 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002168:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000216e:	77 23                	ja     c0002193 <put_utf+0x46>
c0002170:	83 f9 01             	cmp    ecx,0x1
c0002173:	0f 86 cb 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c0002179:	89 d8                	mov    eax,ebx
c000217b:	83 e3 3f             	and    ebx,0x3f
c000217e:	c1 e8 06             	shr    eax,0x6
c0002181:	83 cb 80             	or     ebx,0xffffff80
c0002184:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0002187:	83 c8 c0             	or     eax,0xffffffc0
c000218a:	88 02                	mov    BYTE PTR [edx],al
c000218c:	b0 02                	mov    al,0x2
c000218e:	e9 b1 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002193:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002199:	77 40                	ja     c00021db <put_utf+0x8e>
c000219b:	83 f9 02             	cmp    ecx,0x2
c000219e:	0f 86 a0 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021a4:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00021aa:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00021b0:	0f 86 8e 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021b6:	89 d8                	mov    eax,ebx
c00021b8:	c1 e8 0c             	shr    eax,0xc
c00021bb:	83 c8 e0             	or     eax,0xffffffe0
c00021be:	88 02                	mov    BYTE PTR [edx],al
c00021c0:	89 d8                	mov    eax,ebx
c00021c2:	83 e3 3f             	and    ebx,0x3f
c00021c5:	c1 e8 06             	shr    eax,0x6
c00021c8:	83 cb 80             	or     ebx,0xffffff80
c00021cb:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021ce:	83 e0 3f             	and    eax,0x3f
c00021d1:	83 c8 80             	or     eax,0xffffff80
c00021d4:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021d7:	b0 03                	mov    al,0x3
c00021d9:	eb 69                	jmp    c0002244 <put_utf+0xf7>
c00021db:	83 f9 03             	cmp    ecx,0x3
c00021de:	76 64                	jbe    c0002244 <put_utf+0xf7>
c00021e0:	89 d9                	mov    ecx,ebx
c00021e2:	0f b7 c3             	movzx  eax,bx
c00021e5:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021eb:	66 31 c9             	xor    cx,cx
c00021ee:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021f4:	c1 e9 06             	shr    ecx,0x6
c00021f7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021fd:	77 43                	ja     c0002242 <put_utf+0xf5>
c00021ff:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002205:	77 3b                	ja     c0002242 <put_utf+0xf5>
c0002207:	09 cb                	or     ebx,ecx
c0002209:	81 c3 00 00 01 00    	add    ebx,0x10000
c000220f:	89 d8                	mov    eax,ebx
c0002211:	c1 e8 12             	shr    eax,0x12
c0002214:	83 c8 f0             	or     eax,0xfffffff0
c0002217:	88 02                	mov    BYTE PTR [edx],al
c0002219:	89 d8                	mov    eax,ebx
c000221b:	c1 e8 0c             	shr    eax,0xc
c000221e:	83 e0 3f             	and    eax,0x3f
c0002221:	83 c8 80             	or     eax,0xffffff80
c0002224:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002227:	89 d8                	mov    eax,ebx
c0002229:	83 e3 3f             	and    ebx,0x3f
c000222c:	c1 e8 06             	shr    eax,0x6
c000222f:	83 cb 80             	or     ebx,0xffffff80
c0002232:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002235:	83 e0 3f             	and    eax,0x3f
c0002238:	83 c8 80             	or     eax,0xffffff80
c000223b:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000223e:	b0 04                	mov    al,0x4
c0002240:	eb 02                	jmp    c0002244 <put_utf+0xf7>
c0002242:	31 c0                	xor    eax,eax
c0002244:	5b                   	pop    ebx
c0002245:	c3                   	ret    

c0002246 <clst2sect>:
c0002246:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002249:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000224c:	83 ea 02             	sub    edx,0x2
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	76 0d                	jbe    c0002260 <clst2sect+0x1a>
c0002253:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002257:	0f af d1             	imul   edx,ecx
c000225a:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000225d:	89 d0                	mov    eax,edx
c000225f:	c3                   	ret    
c0002260:	31 c0                	xor    eax,eax
c0002262:	c3                   	ret    

c0002263 <pick_lfn>:
c0002263:	55                   	push   ebp
c0002264:	57                   	push   edi
c0002265:	89 c7                	mov    edi,eax
c0002267:	56                   	push   esi
c0002268:	53                   	push   ebx
c0002269:	89 d3                	mov    ebx,edx
c000226b:	8d 42 1a             	lea    eax,[edx+0x1a]
c000226e:	e8 7d fd ff ff       	call   c0001ff0 <ld_word>
c0002273:	66 85 c0             	test   ax,ax
c0002276:	74 04                	je     c000227c <pick_lfn+0x19>
c0002278:	31 c0                	xor    eax,eax
c000227a:	eb 62                	jmp    c00022de <pick_lfn+0x7b>
c000227c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000227f:	bd 01 00 00 00       	mov    ebp,0x1
c0002284:	31 f6                	xor    esi,esi
c0002286:	83 e1 bf             	and    ecx,0xffffffbf
c0002289:	49                   	dec    ecx
c000228a:	6b c9 0d             	imul   ecx,ecx,0xd
c000228d:	0f b6 86 80 22 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffddd80]
c0002294:	01 d8                	add    eax,ebx
c0002296:	e8 55 fd ff ff       	call   c0001ff0 <ld_word>
c000229b:	66 85 ed             	test   bp,bp
c000229e:	74 11                	je     c00022b1 <pick_lfn+0x4e>
c00022a0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a6:	77 d0                	ja     c0002278 <pick_lfn+0x15>
c00022a8:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00022ac:	89 c5                	mov    ebp,eax
c00022ae:	41                   	inc    ecx
c00022af:	eb 0a                	jmp    c00022bb <pick_lfn+0x58>
c00022b1:	0f b7 c0             	movzx  eax,ax
c00022b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00022b9:	75 bd                	jne    c0002278 <pick_lfn+0x15>
c00022bb:	46                   	inc    esi
c00022bc:	83 fe 0d             	cmp    esi,0xd
c00022bf:	75 cc                	jne    c000228d <pick_lfn+0x2a>
c00022c1:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00022c4:	74 13                	je     c00022d9 <pick_lfn+0x76>
c00022c6:	66 85 ed             	test   bp,bp
c00022c9:	74 0e                	je     c00022d9 <pick_lfn+0x76>
c00022cb:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022d1:	77 a5                	ja     c0002278 <pick_lfn+0x15>
c00022d3:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022d9:	b8 01 00 00 00       	mov    eax,0x1
c00022de:	5b                   	pop    ebx
c00022df:	5e                   	pop    esi
c00022e0:	5f                   	pop    edi
c00022e1:	5d                   	pop    ebp
c00022e2:	c3                   	ret    

c00022e3 <put_lfn>:
c00022e3:	55                   	push   ebp
c00022e4:	57                   	push   edi
c00022e5:	89 d7                	mov    edi,edx
c00022e7:	56                   	push   esi
c00022e8:	31 f6                	xor    esi,esi
c00022ea:	53                   	push   ebx
c00022eb:	83 ec 0c             	sub    esp,0xc
c00022ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022f2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00022f6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022fc:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002300:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002303:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002306:	31 d2                	xor    edx,edx
c0002308:	e8 08 fd ff ff       	call   c0002015 <st_word>
c000230d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002314:	0f b6 d9             	movzx  ebx,cl
c0002317:	4b                   	dec    ebx
c0002318:	6b db 0d             	imul   ebx,ebx,0xd
c000231b:	0f b7 c6             	movzx  eax,si
c000231e:	3d ff ff 00 00       	cmp    eax,0xffff
c0002323:	74 09                	je     c000232e <put_lfn+0x4b>
c0002325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002329:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000232d:	43                   	inc    ebx
c000232e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002331:	0f b7 ee             	movzx  ebp,si
c0002334:	89 ea                	mov    edx,ebp
c0002336:	0f b6 80 80 22 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffddd80]
c000233d:	01 f8                	add    eax,edi
c000233f:	e8 d1 fc ff ff       	call   c0002015 <st_word>
c0002344:	85 ed                	test   ebp,ebp
c0002346:	75 05                	jne    c000234d <put_lfn+0x6a>
c0002348:	be ff ff 00 00       	mov    esi,0xffff
c000234d:	ff 04 24             	inc    DWORD PTR [esp]
c0002350:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002354:	75 c5                	jne    c000231b <put_lfn+0x38>
c0002356:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000235c:	74 0b                	je     c0002369 <put_lfn+0x86>
c000235e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002362:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002367:	75 07                	jne    c0002370 <put_lfn+0x8d>
c0002369:	83 c9 40             	or     ecx,0x40
c000236c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002370:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002374:	88 07                	mov    BYTE PTR [edi],al
c0002376:	83 c4 0c             	add    esp,0xc
c0002379:	5b                   	pop    ebx
c000237a:	5e                   	pop    esi
c000237b:	5f                   	pop    edi
c000237c:	5d                   	pop    ebp
c000237d:	c3                   	ret    

c000237e <gen_numname>:
c000237e:	57                   	push   edi
c000237f:	89 cf                	mov    edi,ecx
c0002381:	56                   	push   esi
c0002382:	b9 0b 00 00 00       	mov    ecx,0xb
c0002387:	53                   	push   ebx
c0002388:	89 c6                	mov    esi,eax
c000238a:	83 ec 10             	sub    esp,0x10
c000238d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002391:	e8 86 fc ff ff       	call   c000201c <mem_cpy>
c0002396:	83 fb 05             	cmp    ebx,0x5
c0002399:	76 30                	jbe    c00023cb <gen_numname+0x4d>
c000239b:	66 8b 07             	mov    ax,WORD PTR [edi]
c000239e:	66 85 c0             	test   ax,ax
c00023a1:	74 28                	je     c00023cb <gen_numname+0x4d>
c00023a3:	83 c7 02             	add    edi,0x2
c00023a6:	ba 10 00 00 00       	mov    edx,0x10
c00023ab:	89 c1                	mov    ecx,eax
c00023ad:	01 db                	add    ebx,ebx
c00023af:	c1 e0 10             	shl    eax,0x10
c00023b2:	83 e1 01             	and    ecx,0x1
c00023b5:	c1 e8 11             	shr    eax,0x11
c00023b8:	01 cb                	add    ebx,ecx
c00023ba:	0f ba e3 10          	bt     ebx,0x10
c00023be:	73 06                	jae    c00023c6 <gen_numname+0x48>
c00023c0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00023c6:	4a                   	dec    edx
c00023c7:	75 e2                	jne    c00023ab <gen_numname+0x2d>
c00023c9:	eb d0                	jmp    c000239b <gen_numname+0x1d>
c00023cb:	b8 07 00 00 00       	mov    eax,0x7
c00023d0:	89 d9                	mov    ecx,ebx
c00023d2:	83 e1 0f             	and    ecx,0xf
c00023d5:	8d 79 30             	lea    edi,[ecx+0x30]
c00023d8:	83 ff 39             	cmp    edi,0x39
c00023db:	89 fa                	mov    edx,edi
c00023dd:	76 03                	jbe    c00023e2 <gen_numname+0x64>
c00023df:	8d 51 37             	lea    edx,[ecx+0x37]
c00023e2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023e5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023e9:	89 da                	mov    edx,ebx
c00023eb:	c1 ea 04             	shr    edx,0x4
c00023ee:	83 fb 0f             	cmp    ebx,0xf
c00023f1:	76 06                	jbe    c00023f9 <gen_numname+0x7b>
c00023f3:	89 c8                	mov    eax,ecx
c00023f5:	89 d3                	mov    ebx,edx
c00023f7:	eb d7                	jmp    c00023d0 <gen_numname+0x52>
c00023f9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023fe:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002401:	31 d2                	xor    edx,edx
c0002403:	8d 04 16             	lea    eax,[esi+edx*1]
c0002406:	39 ca                	cmp    edx,ecx
c0002408:	73 19                	jae    c0002423 <gen_numname+0xa5>
c000240a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000240d:	83 f8 20             	cmp    eax,0x20
c0002410:	74 11                	je     c0002423 <gen_numname+0xa5>
c0002412:	e8 58 fc ff ff       	call   c000206f <dbc_1st>
c0002417:	85 c0                	test   eax,eax
c0002419:	74 05                	je     c0002420 <gen_numname+0xa2>
c000241b:	39 d3                	cmp    ebx,edx
c000241d:	74 04                	je     c0002423 <gen_numname+0xa5>
c000241f:	42                   	inc    edx
c0002420:	42                   	inc    edx
c0002421:	eb e0                	jmp    c0002403 <gen_numname+0x85>
c0002423:	83 f9 07             	cmp    ecx,0x7
c0002426:	b0 20                	mov    al,0x20
c0002428:	77 05                	ja     c000242f <gen_numname+0xb1>
c000242a:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000242e:	41                   	inc    ecx
c000242f:	42                   	inc    edx
c0002430:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002434:	83 fa 07             	cmp    edx,0x7
c0002437:	76 ea                	jbe    c0002423 <gen_numname+0xa5>
c0002439:	83 c4 10             	add    esp,0x10
c000243c:	5b                   	pop    ebx
c000243d:	5e                   	pop    esi
c000243e:	5f                   	pop    edi
c000243f:	c3                   	ret    

c0002440 <sum_sfn>:
c0002440:	53                   	push   ebx
c0002441:	31 c9                	xor    ecx,ecx
c0002443:	31 db                	xor    ebx,ebx
c0002445:	0f b6 d1             	movzx  edx,cl
c0002448:	d1 ea                	shr    edx,1
c000244a:	c1 e1 07             	shl    ecx,0x7
c000244d:	09 ca                	or     edx,ecx
c000244f:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002452:	43                   	inc    ebx
c0002453:	01 ca                	add    edx,ecx
c0002455:	83 fb 0b             	cmp    ebx,0xb
c0002458:	88 d1                	mov    cl,dl
c000245a:	75 e9                	jne    c0002445 <sum_sfn+0x5>
c000245c:	5b                   	pop    ebx
c000245d:	88 d0                	mov    al,dl
c000245f:	c3                   	ret    

c0002460 <get_ldnumber>:
c0002460:	55                   	push   ebp
c0002461:	57                   	push   edi
c0002462:	56                   	push   esi
c0002463:	83 ce ff             	or     esi,0xffffffff
c0002466:	53                   	push   ebx
c0002467:	8b 10                	mov    edx,DWORD PTR [eax]
c0002469:	85 d2                	test   edx,edx
c000246b:	74 38                	je     c00024a5 <get_ldnumber+0x45>
c000246d:	89 c5                	mov    ebp,eax
c000246f:	89 d1                	mov    ecx,edx
c0002471:	41                   	inc    ecx
c0002472:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002476:	80 fb 1f             	cmp    bl,0x1f
c0002479:	76 05                	jbe    c0002480 <get_ldnumber+0x20>
c000247b:	83 fb 3a             	cmp    ebx,0x3a
c000247e:	75 f1                	jne    c0002471 <get_ldnumber+0x11>
c0002480:	31 f6                	xor    esi,esi
c0002482:	83 fb 3a             	cmp    ebx,0x3a
c0002485:	75 1e                	jne    c00024a5 <get_ldnumber+0x45>
c0002487:	8a 1a                	mov    bl,BYTE PTR [edx]
c0002489:	83 ce ff             	or     esi,0xffffffff
c000248c:	8d 7b d0             	lea    edi,[ebx-0x30]
c000248f:	89 f8                	mov    eax,edi
c0002491:	3c 09                	cmp    al,0x9
c0002493:	77 10                	ja     c00024a5 <get_ldnumber+0x45>
c0002495:	83 c2 02             	add    edx,0x2
c0002498:	39 d1                	cmp    ecx,edx
c000249a:	75 09                	jne    c00024a5 <get_ldnumber+0x45>
c000249c:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000249f:	0f be f3             	movsx  esi,bl
c00024a2:	83 ee 30             	sub    esi,0x30
c00024a5:	5b                   	pop    ebx
c00024a6:	89 f0                	mov    eax,esi
c00024a8:	5e                   	pop    esi
c00024a9:	5f                   	pop    edi
c00024aa:	5d                   	pop    ebp
c00024ab:	c3                   	ret    

c00024ac <validate>:
c00024ac:	56                   	push   esi
c00024ad:	85 c0                	test   eax,eax
c00024af:	53                   	push   ebx
c00024b0:	89 d6                	mov    esi,edx
c00024b2:	51                   	push   ecx
c00024b3:	75 09                	jne    c00024be <validate+0x12>
c00024b5:	b8 09 00 00 00       	mov    eax,0x9
c00024ba:	31 c9                	xor    ecx,ecx
c00024bc:	eb 2e                	jmp    c00024ec <validate+0x40>
c00024be:	89 c3                	mov    ebx,eax
c00024c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00024c2:	85 c0                	test   eax,eax
c00024c4:	74 ef                	je     c00024b5 <validate+0x9>
c00024c6:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00024c9:	74 ea                	je     c00024b5 <validate+0x9>
c00024cb:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024ce:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024d2:	75 e1                	jne    c00024b5 <validate+0x9>
c00024d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	50                   	push   eax
c00024dc:	e8 be fa ff ff       	call   c0001f9f <disk_status>
c00024e1:	83 c4 10             	add    esp,0x10
c00024e4:	a8 01                	test   al,0x1
c00024e6:	75 cd                	jne    c00024b5 <validate+0x9>
c00024e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024ea:	31 c0                	xor    eax,eax
c00024ec:	89 0e                	mov    DWORD PTR [esi],ecx
c00024ee:	5a                   	pop    edx
c00024ef:	5b                   	pop    ebx
c00024f0:	5e                   	pop    esi
c00024f1:	c3                   	ret    

c00024f2 <sync_window>:
c00024f2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024f6:	74 58                	je     c0002550 <sync_window+0x5e>
c00024f8:	56                   	push   esi
c00024f9:	53                   	push   ebx
c00024fa:	89 c3                	mov    ebx,eax
c00024fc:	51                   	push   ecx
c00024fd:	6a 01                	push   0x1
c00024ff:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002502:	8d 70 34             	lea    esi,[eax+0x34]
c0002505:	56                   	push   esi
c0002506:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000250a:	50                   	push   eax
c000250b:	e8 ab fa ff ff       	call   c0001fbb <disk_write>
c0002510:	83 c4 10             	add    esp,0x10
c0002513:	ba 01 00 00 00       	mov    edx,0x1
c0002518:	85 c0                	test   eax,eax
c000251a:	75 2e                	jne    c000254a <sync_window+0x58>
c000251c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002520:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002523:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002526:	89 c1                	mov    ecx,eax
c0002528:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000252b:	39 d1                	cmp    ecx,edx
c000252d:	73 19                	jae    c0002548 <sync_window+0x56>
c000252f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002533:	75 13                	jne    c0002548 <sync_window+0x56>
c0002535:	6a 01                	push   0x1
c0002537:	01 d0                	add    eax,edx
c0002539:	50                   	push   eax
c000253a:	56                   	push   esi
c000253b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000253f:	50                   	push   eax
c0002540:	e8 76 fa ff ff       	call   c0001fbb <disk_write>
c0002545:	83 c4 10             	add    esp,0x10
c0002548:	31 d2                	xor    edx,edx
c000254a:	89 d0                	mov    eax,edx
c000254c:	5a                   	pop    edx
c000254d:	5b                   	pop    ebx
c000254e:	5e                   	pop    esi
c000254f:	c3                   	ret    
c0002550:	31 d2                	xor    edx,edx
c0002552:	89 d0                	mov    eax,edx
c0002554:	c3                   	ret    

c0002555 <move_window>:
c0002555:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002558:	74 3a                	je     c0002594 <move_window+0x3f>
c000255a:	56                   	push   esi
c000255b:	89 d6                	mov    esi,edx
c000255d:	53                   	push   ebx
c000255e:	89 c3                	mov    ebx,eax
c0002560:	51                   	push   ecx
c0002561:	e8 8c ff ff ff       	call   c00024f2 <sync_window>
c0002566:	85 c0                	test   eax,eax
c0002568:	75 2d                	jne    c0002597 <move_window+0x42>
c000256a:	6a 01                	push   0x1
c000256c:	56                   	push   esi
c000256d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002570:	50                   	push   eax
c0002571:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002575:	50                   	push   eax
c0002576:	e8 2a fa ff ff       	call   c0001fa5 <disk_read>
c000257b:	83 c4 10             	add    esp,0x10
c000257e:	89 c2                	mov    edx,eax
c0002580:	31 c0                	xor    eax,eax
c0002582:	85 d2                	test   edx,edx
c0002584:	ba ff ff ff ff       	mov    edx,0xffffffff
c0002589:	0f 45 f2             	cmovne esi,edx
c000258c:	0f 95 c0             	setne  al
c000258f:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0002592:	eb 03                	jmp    c0002597 <move_window+0x42>
c0002594:	31 c0                	xor    eax,eax
c0002596:	c3                   	ret    
c0002597:	5a                   	pop    edx
c0002598:	5b                   	pop    ebx
c0002599:	5e                   	pop    esi
c000259a:	c3                   	ret    

c000259b <check_fs>:
c000259b:	53                   	push   ebx
c000259c:	89 c3                	mov    ebx,eax
c000259e:	83 ec 08             	sub    esp,0x8
c00025a1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00025a5:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00025ac:	e8 a4 ff ff ff       	call   c0002555 <move_window>
c00025b1:	ba 04 00 00 00       	mov    edx,0x4
c00025b6:	85 c0                	test   eax,eax
c00025b8:	75 68                	jne    c0002622 <check_fs+0x87>
c00025ba:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00025c0:	e8 2b fa ff ff       	call   c0001ff0 <ld_word>
c00025c5:	ba 03 00 00 00       	mov    edx,0x3
c00025ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00025ce:	75 52                	jne    c0002622 <check_fs+0x87>
c00025d0:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025d3:	8d 50 18             	lea    edx,[eax+0x18]
c00025d6:	80 fa 01             	cmp    dl,0x1
c00025d9:	76 09                	jbe    c00025e4 <check_fs+0x49>
c00025db:	3c eb                	cmp    al,0xeb
c00025dd:	ba 02 00 00 00       	mov    edx,0x2
c00025e2:	75 3e                	jne    c0002622 <check_fs+0x87>
c00025e4:	ba a8 4f 02 c0       	mov    edx,0xc0024fa8
c00025e9:	b9 03 00 00 00       	mov    ecx,0x3
c00025ee:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025f1:	e8 45 fa ff ff       	call   c000203b <mem_cmp>
c00025f6:	31 d2                	xor    edx,edx
c00025f8:	85 c0                	test   eax,eax
c00025fa:	74 26                	je     c0002622 <check_fs+0x87>
c00025fc:	ba 3c 21 02 c0       	mov    edx,0xc002213c
c0002601:	b9 05 00 00 00       	mov    ecx,0x5
c0002606:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000260c:	e8 2a fa ff ff       	call   c000203b <mem_cmp>
c0002611:	31 d2                	xor    edx,edx
c0002613:	85 c0                	test   eax,eax
c0002615:	74 0b                	je     c0002622 <check_fs+0x87>
c0002617:	31 d2                	xor    edx,edx
c0002619:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000261d:	0f 95 c2             	setne  dl
c0002620:	01 d2                	add    edx,edx
c0002622:	83 c4 08             	add    esp,0x8
c0002625:	89 d0                	mov    eax,edx
c0002627:	5b                   	pop    ebx
c0002628:	c3                   	ret    

c0002629 <find_volume>:
c0002629:	55                   	push   ebp
c000262a:	57                   	push   edi
c000262b:	56                   	push   esi
c000262c:	89 c6                	mov    esi,eax
c000262e:	53                   	push   ebx
c000262f:	89 d3                	mov    ebx,edx
c0002631:	83 ec 2c             	sub    esp,0x2c
c0002634:	31 d2                	xor    edx,edx
c0002636:	e8 60 ff ff ff       	call   c000259b <check_fs>
c000263b:	85 db                	test   ebx,ebx
c000263d:	0f 94 c2             	sete   dl
c0002640:	83 f8 02             	cmp    eax,0x2
c0002643:	74 07                	je     c000264c <find_volume+0x23>
c0002645:	77 63                	ja     c00026aa <find_volume+0x81>
c0002647:	f6 c2 01             	test   dl,0x1
c000264a:	75 5e                	jne    c00026aa <find_volume+0x81>
c000264c:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002652:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002656:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000265c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0002660:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002664:	89 f8                	mov    eax,edi
c0002666:	83 c7 10             	add    edi,0x10
c0002669:	e8 8f f9 ff ff       	call   c0001ffd <ld_dword>
c000266e:	83 c5 04             	add    ebp,0x4
c0002671:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002675:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002678:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000267c:	75 e2                	jne    c0002660 <find_volume+0x37>
c000267e:	83 fb 01             	cmp    ebx,0x1
c0002681:	0f b6 fa             	movzx  edi,dl
c0002684:	83 d3 ff             	adc    ebx,0xffffffff
c0002687:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c000268b:	b8 03 00 00 00       	mov    eax,0x3
c0002690:	85 d2                	test   edx,edx
c0002692:	74 07                	je     c000269b <find_volume+0x72>
c0002694:	89 f0                	mov    eax,esi
c0002696:	e8 00 ff ff ff       	call   c000259b <check_fs>
c000269b:	83 f8 01             	cmp    eax,0x1
c000269e:	76 0a                	jbe    c00026aa <find_volume+0x81>
c00026a0:	85 ff                	test   edi,edi
c00026a2:	74 06                	je     c00026aa <find_volume+0x81>
c00026a4:	43                   	inc    ebx
c00026a5:	83 fb 03             	cmp    ebx,0x3
c00026a8:	76 dd                	jbe    c0002687 <find_volume+0x5e>
c00026aa:	83 c4 2c             	add    esp,0x2c
c00026ad:	5b                   	pop    ebx
c00026ae:	5e                   	pop    esi
c00026af:	5f                   	pop    edi
c00026b0:	5d                   	pop    ebp
c00026b1:	c3                   	ret    

c00026b2 <mount_volume>:
c00026b2:	55                   	push   ebp
c00026b3:	89 d5                	mov    ebp,edx
c00026b5:	57                   	push   edi
c00026b6:	89 cf                	mov    edi,ecx
c00026b8:	56                   	push   esi
c00026b9:	53                   	push   ebx
c00026ba:	bb 0b 00 00 00       	mov    ebx,0xb
c00026bf:	83 ec 2c             	sub    esp,0x2c
c00026c2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026c8:	e8 93 fd ff ff       	call   c0002460 <get_ldnumber>
c00026cd:	85 c0                	test   eax,eax
c00026cf:	0f 88 d0 02 00 00    	js     c00029a5 <mount_volume+0x2f3>
c00026d5:	8b 34 85 a0 84 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7b60]
c00026dc:	89 c2                	mov    edx,eax
c00026de:	bb 0c 00 00 00       	mov    ebx,0xc
c00026e3:	85 f6                	test   esi,esi
c00026e5:	0f 84 ba 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c00026eb:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026ee:	83 e7 fe             	and    edi,0xfffffffe
c00026f1:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026f4:	74 3c                	je     c0002732 <mount_volume+0x80>
c00026f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026fa:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026fe:	83 ec 0c             	sub    esp,0xc
c0002701:	50                   	push   eax
c0002702:	e8 98 f8 ff ff       	call   c0001f9f <disk_status>
c0002707:	83 c4 10             	add    esp,0x10
c000270a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000270e:	a8 01                	test   al,0x1
c0002710:	75 20                	jne    c0002732 <mount_volume+0x80>
c0002712:	31 db                	xor    ebx,ebx
c0002714:	81 e7 fe 00 00 00    	and    edi,0xfe
c000271a:	0f 84 85 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002720:	a8 04                	test   al,0x4
c0002722:	0f 84 7d 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002728:	bb 0a 00 00 00       	mov    ebx,0xa
c000272d:	e9 73 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002732:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002735:	83 ec 0c             	sub    esp,0xc
c0002738:	0f b6 c2             	movzx  eax,dl
c000273b:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000273e:	bb 03 00 00 00       	mov    ebx,0x3
c0002743:	50                   	push   eax
c0002744:	e8 59 f8 ff ff       	call   c0001fa2 <disk_initialize>
c0002749:	83 c4 10             	add    esp,0x10
c000274c:	a8 01                	test   al,0x1
c000274e:	0f 85 51 02 00 00    	jne    c00029a5 <mount_volume+0x2f3>
c0002754:	81 e7 fe 00 00 00    	and    edi,0xfe
c000275a:	74 04                	je     c0002760 <mount_volume+0xae>
c000275c:	a8 04                	test   al,0x4
c000275e:	75 c8                	jne    c0002728 <mount_volume+0x76>
c0002760:	31 d2                	xor    edx,edx
c0002762:	89 f0                	mov    eax,esi
c0002764:	e8 c0 fe ff ff       	call   c0002629 <find_volume>
c0002769:	bb 01 00 00 00       	mov    ebx,0x1
c000276e:	83 f8 04             	cmp    eax,0x4
c0002771:	0f 84 2e 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002777:	83 f8 01             	cmp    eax,0x1
c000277a:	76 0a                	jbe    c0002786 <mount_volume+0xd4>
c000277c:	bb 0d 00 00 00       	mov    ebx,0xd
c0002781:	e9 1f 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002786:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002789:	e8 62 f8 ff ff       	call   c0001ff0 <ld_word>
c000278e:	66 3d 00 02          	cmp    ax,0x200
c0002792:	75 e8                	jne    c000277c <mount_volume+0xca>
c0002794:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002797:	e8 54 f8 ff ff       	call   c0001ff0 <ld_word>
c000279c:	0f b7 c0             	movzx  eax,ax
c000279f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027a3:	85 c0                	test   eax,eax
c00027a5:	75 0c                	jne    c00027b3 <mount_volume+0x101>
c00027a7:	8d 46 58             	lea    eax,[esi+0x58]
c00027aa:	e8 4e f8 ff ff       	call   c0001ffd <ld_dword>
c00027af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027b3:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00027b6:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00027b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00027c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00027c4:	89 e8                	mov    eax,ebp
c00027c6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00027c9:	8d 45 ff             	lea    eax,[ebp-0x1]
c00027cc:	3c 01                	cmp    al,0x1
c00027ce:	77 ac                	ja     c000277c <mount_volume+0xca>
c00027d0:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00027d4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027d8:	66 85 c0             	test   ax,ax
c00027db:	89 c3                	mov    ebx,eax
c00027dd:	74 9d                	je     c000277c <mount_volume+0xca>
c00027df:	8d 40 ff             	lea    eax,[eax-0x1]
c00027e2:	85 d8                	test   eax,ebx
c00027e4:	75 96                	jne    c000277c <mount_volume+0xca>
c00027e6:	8d 46 45             	lea    eax,[esi+0x45]
c00027e9:	e8 02 f8 ff ff       	call   c0001ff0 <ld_word>
c00027ee:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027f2:	a8 0f                	test   al,0xf
c00027f4:	89 c7                	mov    edi,eax
c00027f6:	75 84                	jne    c000277c <mount_volume+0xca>
c00027f8:	8d 46 47             	lea    eax,[esi+0x47]
c00027fb:	e8 f0 f7 ff ff       	call   c0001ff0 <ld_word>
c0002800:	0f b7 d0             	movzx  edx,ax
c0002803:	85 d2                	test   edx,edx
c0002805:	75 0a                	jne    c0002811 <mount_volume+0x15f>
c0002807:	8d 46 54             	lea    eax,[esi+0x54]
c000280a:	e8 ee f7 ff ff       	call   c0001ffd <ld_dword>
c000280f:	89 c2                	mov    edx,eax
c0002811:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002815:	8d 46 42             	lea    eax,[esi+0x42]
c0002818:	e8 d3 f7 ff ff       	call   c0001ff0 <ld_word>
c000281d:	0f b7 c8             	movzx  ecx,ax
c0002820:	85 c9                	test   ecx,ecx
c0002822:	0f 84 54 ff ff ff    	je     c000277c <mount_volume+0xca>
c0002828:	89 e8                	mov    eax,ebp
c000282a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000282e:	0f b6 e8             	movzx  ebp,al
c0002831:	0f b7 c7             	movzx  eax,di
c0002834:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002839:	c1 e8 04             	shr    eax,0x4
c000283c:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0002840:	01 e8                	add    eax,ebp
c0002842:	01 c8                	add    eax,ecx
c0002844:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002848:	39 c2                	cmp    edx,eax
c000284a:	0f 82 2c ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002850:	29 c2                	sub    edx,eax
c0002852:	89 d5                	mov    ebp,edx
c0002854:	89 d0                	mov    eax,edx
c0002856:	31 d2                	xor    edx,edx
c0002858:	f7 f3                	div    ebx
c000285a:	39 dd                	cmp    ebp,ebx
c000285c:	0f 82 1a ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002862:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002867:	0f 87 0f ff ff ff    	ja     c000277c <mount_volume+0xca>
c000286d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002872:	0f 86 1e 01 00 00    	jbe    c0002996 <mount_volume+0x2e4>
c0002878:	bb 03 00 00 00       	mov    ebx,0x3
c000287d:	8d 68 02             	lea    ebp,[eax+0x2]
c0002880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002884:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002887:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000288b:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c000288f:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002892:	01 c8                	add    eax,ecx
c0002894:	83 fb 03             	cmp    ebx,0x3
c0002897:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000289a:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000289d:	75 23                	jne    c00028c2 <mount_volume+0x210>
c000289f:	8d 46 5e             	lea    eax,[esi+0x5e]
c00028a2:	e8 49 f7 ff ff       	call   c0001ff0 <ld_word>
c00028a7:	09 c7                	or     edi,eax
c00028a9:	66 85 ff             	test   di,di
c00028ac:	0f 85 ca fe ff ff    	jne    c000277c <mount_volume+0xca>
c00028b2:	8d 46 60             	lea    eax,[esi+0x60]
c00028b5:	e8 43 f7 ff ff       	call   c0001ffd <ld_dword>
c00028ba:	c1 e5 02             	shl    ebp,0x2
c00028bd:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028c0:	eb 25                	jmp    c00028e7 <mount_volume+0x235>
c00028c2:	66 85 ff             	test   di,di
c00028c5:	0f 84 b1 fe ff ff    	je     c000277c <mount_volume+0xca>
c00028cb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00028cf:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00028d3:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00028d7:	83 e5 01             	and    ebp,0x1
c00028da:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028dd:	d1 ea                	shr    edx,1
c00028df:	01 d5                	add    ebp,edx
c00028e1:	83 fb 02             	cmp    ebx,0x2
c00028e4:	0f 44 ef             	cmove  ebp,edi
c00028e7:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028ed:	c1 ed 09             	shr    ebp,0x9
c00028f0:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00028f4:	0f 87 82 fe ff ff    	ja     c000277c <mount_volume+0xca>
c00028fa:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002901:	83 fb 03             	cmp    ebx,0x3
c0002904:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000290b:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000290f:	75 6e                	jne    c000297f <mount_volume+0x2cd>
c0002911:	8d 46 64             	lea    eax,[esi+0x64]
c0002914:	e8 d7 f6 ff ff       	call   c0001ff0 <ld_word>
c0002919:	66 48                	dec    ax
c000291b:	75 62                	jne    c000297f <mount_volume+0x2cd>
c000291d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002921:	89 f0                	mov    eax,esi
c0002923:	42                   	inc    edx
c0002924:	e8 2c fc ff ff       	call   c0002555 <move_window>
c0002929:	85 c0                	test   eax,eax
c000292b:	75 52                	jne    c000297f <mount_volume+0x2cd>
c000292d:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002931:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002937:	e8 b4 f6 ff ff       	call   c0001ff0 <ld_word>
c000293c:	66 3d 55 aa          	cmp    ax,0xaa55
c0002940:	75 3d                	jne    c000297f <mount_volume+0x2cd>
c0002942:	8d 46 34             	lea    eax,[esi+0x34]
c0002945:	e8 b3 f6 ff ff       	call   c0001ffd <ld_dword>
c000294a:	3d 52 52 61 41       	cmp    eax,0x41615252
c000294f:	75 2e                	jne    c000297f <mount_volume+0x2cd>
c0002951:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002957:	e8 a1 f6 ff ff       	call   c0001ffd <ld_dword>
c000295c:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002961:	75 1c                	jne    c000297f <mount_volume+0x2cd>
c0002963:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002969:	e8 8f f6 ff ff       	call   c0001ffd <ld_dword>
c000296e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002971:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002977:	e8 81 f6 ff ff       	call   c0001ffd <ld_dword>
c000297c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000297f:	88 1e                	mov    BYTE PTR [esi],bl
c0002981:	66 a1 80 84 02 c0    	mov    ax,ds:0xc0028480
c0002987:	31 db                	xor    ebx,ebx
c0002989:	40                   	inc    eax
c000298a:	66 a3 80 84 02 c0    	mov    ds:0xc0028480,ax
c0002990:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002994:	eb 0f                	jmp    c00029a5 <mount_volume+0x2f3>
c0002996:	3d f6 0f 00 00       	cmp    eax,0xff6
c000299b:	19 db                	sbb    ebx,ebx
c000299d:	83 c3 02             	add    ebx,0x2
c00029a0:	e9 d8 fe ff ff       	jmp    c000287d <mount_volume+0x1cb>
c00029a5:	83 c4 2c             	add    esp,0x2c
c00029a8:	89 d8                	mov    eax,ebx
c00029aa:	5b                   	pop    ebx
c00029ab:	5e                   	pop    esi
c00029ac:	5f                   	pop    edi
c00029ad:	5d                   	pop    ebp
c00029ae:	c3                   	ret    

c00029af <put_fat>:
c00029af:	55                   	push   ebp
c00029b0:	bd 02 00 00 00       	mov    ebp,0x2
c00029b5:	57                   	push   edi
c00029b6:	56                   	push   esi
c00029b7:	53                   	push   ebx
c00029b8:	83 ec 1c             	sub    esp,0x1c
c00029bb:	83 fa 01             	cmp    edx,0x1
c00029be:	0f 86 38 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029c4:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00029c7:	0f 86 2f 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029cd:	89 c6                	mov    esi,eax
c00029cf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00029d2:	89 cf                	mov    edi,ecx
c00029d4:	89 d3                	mov    ebx,edx
c00029d6:	83 f8 02             	cmp    eax,0x2
c00029d9:	0f 84 b1 00 00 00    	je     c0002a90 <put_fat+0xe1>
c00029df:	83 f8 03             	cmp    eax,0x3
c00029e2:	0f 84 d5 00 00 00    	je     c0002abd <put_fat+0x10e>
c00029e8:	48                   	dec    eax
c00029e9:	0f 85 0d 01 00 00    	jne    c0002afc <put_fat+0x14d>
c00029ef:	89 d1                	mov    ecx,edx
c00029f1:	89 f0                	mov    eax,esi
c00029f3:	d1 e9                	shr    ecx,1
c00029f5:	01 d1                	add    ecx,edx
c00029f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029fb:	89 ca                	mov    edx,ecx
c00029fd:	c1 ea 09             	shr    edx,0x9
c0002a00:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a03:	e8 4d fb ff ff       	call   c0002555 <move_window>
c0002a08:	85 c0                	test   eax,eax
c0002a0a:	89 c5                	mov    ebp,eax
c0002a0c:	0f 85 ea 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a16:	8d 46 34             	lea    eax,[esi+0x34]
c0002a19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002a1d:	8d 41 01             	lea    eax,[ecx+0x1]
c0002a20:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002a26:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2a:	83 e3 01             	and    ebx,0x1
c0002a2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a31:	89 f8                	mov    eax,edi
c0002a33:	74 11                	je     c0002a46 <put_fat+0x97>
c0002a35:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002a37:	89 f8                	mov    eax,edi
c0002a39:	c1 e0 04             	shl    eax,0x4
c0002a3c:	25 f0 0f 00 00       	and    eax,0xff0
c0002a41:	83 e2 0f             	and    edx,0xf
c0002a44:	09 d0                	or     eax,edx
c0002a46:	88 01                	mov    BYTE PTR [ecx],al
c0002a48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a4c:	89 f0                	mov    eax,esi
c0002a4e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a52:	c1 ea 09             	shr    edx,0x9
c0002a55:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a58:	e8 f8 fa ff ff       	call   c0002555 <move_window>
c0002a5d:	85 c0                	test   eax,eax
c0002a5f:	89 c5                	mov    ebp,eax
c0002a61:	0f 85 95 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a6b:	25 ff 01 00 00       	and    eax,0x1ff
c0002a70:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	74 07                	je     c0002a7f <put_fat+0xd0>
c0002a78:	c1 ef 04             	shr    edi,0x4
c0002a7b:	89 f9                	mov    ecx,edi
c0002a7d:	eb 0d                	jmp    c0002a8c <put_fat+0xdd>
c0002a7f:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a81:	c1 ef 08             	shr    edi,0x8
c0002a84:	83 e7 0f             	and    edi,0xf
c0002a87:	83 e1 f0             	and    ecx,0xfffffff0
c0002a8a:	09 f9                	or     ecx,edi
c0002a8c:	88 08                	mov    BYTE PTR [eax],cl
c0002a8e:	eb 27                	jmp    c0002ab7 <put_fat+0x108>
c0002a90:	c1 ea 08             	shr    edx,0x8
c0002a93:	89 f0                	mov    eax,esi
c0002a95:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a98:	e8 b8 fa ff ff       	call   c0002555 <move_window>
c0002a9d:	85 c0                	test   eax,eax
c0002a9f:	89 c5                	mov    ebp,eax
c0002aa1:	75 59                	jne    c0002afc <put_fat+0x14d>
c0002aa3:	01 db                	add    ebx,ebx
c0002aa5:	0f b7 d7             	movzx  edx,di
c0002aa8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002aae:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002ab2:	e8 5e f5 ff ff       	call   c0002015 <st_word>
c0002ab7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002abb:	eb 3f                	jmp    c0002afc <put_fat+0x14d>
c0002abd:	c1 ea 07             	shr    edx,0x7
c0002ac0:	89 f0                	mov    eax,esi
c0002ac2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002ac5:	e8 8b fa ff ff       	call   c0002555 <move_window>
c0002aca:	85 c0                	test   eax,eax
c0002acc:	89 c5                	mov    ebp,eax
c0002ace:	75 2c                	jne    c0002afc <put_fat+0x14d>
c0002ad0:	c1 e3 02             	shl    ebx,0x2
c0002ad3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ad9:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002adf:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002ae3:	89 d8                	mov    eax,ebx
c0002ae5:	e8 13 f5 ff ff       	call   c0001ffd <ld_dword>
c0002aea:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aef:	09 f8                	or     eax,edi
c0002af1:	89 c2                	mov    edx,eax
c0002af3:	89 d8                	mov    eax,ebx
c0002af5:	e8 1f f5 ff ff       	call   c0002019 <st_dword>
c0002afa:	eb bb                	jmp    c0002ab7 <put_fat+0x108>
c0002afc:	83 c4 1c             	add    esp,0x1c
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	5b                   	pop    ebx
c0002b02:	5e                   	pop    esi
c0002b03:	5f                   	pop    edi
c0002b04:	5d                   	pop    ebp
c0002b05:	c3                   	ret    

c0002b06 <dir_clear>:
c0002b06:	55                   	push   ebp
c0002b07:	57                   	push   edi
c0002b08:	56                   	push   esi
c0002b09:	89 c6                	mov    esi,eax
c0002b0b:	53                   	push   ebx
c0002b0c:	83 ec 1c             	sub    esp,0x1c
c0002b0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002b13:	e8 da f9 ff ff       	call   c00024f2 <sync_window>
c0002b18:	85 c0                	test   eax,eax
c0002b1a:	0f 85 c1 00 00 00    	jne    c0002be1 <dir_clear+0xdb>
c0002b20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b24:	89 f0                	mov    eax,esi
c0002b26:	e8 1b f7 ff ff       	call   c0002246 <clst2sect>
c0002b2b:	31 d2                	xor    edx,edx
c0002b2d:	b9 00 02 00 00       	mov    ecx,0x200
c0002b32:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002b35:	89 c5                	mov    ebp,eax
c0002b37:	8d 46 34             	lea    eax,[esi+0x34]
c0002b3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b3e:	e8 ee f4 ff ff       	call   c0002031 <mem_set>
c0002b43:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b47:	b8 00 80 00 00       	mov    eax,0x8000
c0002b4c:	c1 e3 09             	shl    ebx,0x9
c0002b4f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b55:	0f 47 d8             	cmova  ebx,eax
c0002b58:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b5e:	76 16                	jbe    c0002b76 <dir_clear+0x70>
c0002b60:	83 ec 0c             	sub    esp,0xc
c0002b63:	53                   	push   ebx
c0002b64:	e8 cb 32 00 00       	call   c0005e34 <ff_memalloc>
c0002b69:	83 c4 10             	add    esp,0x10
c0002b6c:	85 c0                	test   eax,eax
c0002b6e:	89 c7                	mov    edi,eax
c0002b70:	75 76                	jne    c0002be8 <dir_clear+0xe2>
c0002b72:	d1 eb                	shr    ebx,1
c0002b74:	eb e2                	jmp    c0002b58 <dir_clear+0x52>
c0002b76:	31 db                	xor    ebx,ebx
c0002b78:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7c:	39 d8                	cmp    eax,ebx
c0002b7e:	76 53                	jbe    c0002bd3 <dir_clear+0xcd>
c0002b80:	6a 01                	push   0x1
c0002b82:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b85:	50                   	push   eax
c0002b86:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b8e:	50                   	push   eax
c0002b8f:	e8 27 f4 ff ff       	call   c0001fbb <disk_write>
c0002b94:	83 c4 10             	add    esp,0x10
c0002b97:	85 c0                	test   eax,eax
c0002b99:	75 38                	jne    c0002bd3 <dir_clear+0xcd>
c0002b9b:	43                   	inc    ebx
c0002b9c:	eb da                	jmp    c0002b78 <dir_clear+0x72>
c0002b9e:	52                   	push   edx
c0002b9f:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ba2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002ba6:	50                   	push   eax
c0002ba7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002bab:	57                   	push   edi
c0002bac:	50                   	push   eax
c0002bad:	e8 09 f4 ff ff       	call   c0001fbb <disk_write>
c0002bb2:	83 c4 10             	add    esp,0x10
c0002bb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bb9:	85 c0                	test   eax,eax
c0002bbb:	75 0a                	jne    c0002bc7 <dir_clear+0xc1>
c0002bbd:	01 d3                	add    ebx,edx
c0002bbf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bc3:	39 d8                	cmp    eax,ebx
c0002bc5:	77 d7                	ja     c0002b9e <dir_clear+0x98>
c0002bc7:	83 ec 0c             	sub    esp,0xc
c0002bca:	57                   	push   edi
c0002bcb:	e8 7c 32 00 00       	call   c0005e4c <ff_memfree>
c0002bd0:	83 c4 10             	add    esp,0x10
c0002bd3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bd7:	39 d8                	cmp    eax,ebx
c0002bd9:	0f 95 c0             	setne  al
c0002bdc:	0f b6 c0             	movzx  eax,al
c0002bdf:	eb 19                	jmp    c0002bfa <dir_clear+0xf4>
c0002be1:	b8 01 00 00 00       	mov    eax,0x1
c0002be6:	eb 12                	jmp    c0002bfa <dir_clear+0xf4>
c0002be8:	89 d9                	mov    ecx,ebx
c0002bea:	31 d2                	xor    edx,edx
c0002bec:	e8 40 f4 ff ff       	call   c0002031 <mem_set>
c0002bf1:	89 da                	mov    edx,ebx
c0002bf3:	31 db                	xor    ebx,ebx
c0002bf5:	c1 ea 09             	shr    edx,0x9
c0002bf8:	eb c5                	jmp    c0002bbf <dir_clear+0xb9>
c0002bfa:	83 c4 1c             	add    esp,0x1c
c0002bfd:	5b                   	pop    ebx
c0002bfe:	5e                   	pop    esi
c0002bff:	5f                   	pop    edi
c0002c00:	5d                   	pop    ebp
c0002c01:	c3                   	ret    

c0002c02 <create_name>:
c0002c02:	55                   	push   ebp
c0002c03:	89 c5                	mov    ebp,eax
c0002c05:	57                   	push   edi
c0002c06:	89 d7                	mov    edi,edx
c0002c08:	56                   	push   esi
c0002c09:	31 f6                	xor    esi,esi
c0002c0b:	53                   	push   ebx
c0002c0c:	83 ec 3c             	sub    esp,0x3c
c0002c0f:	8b 02                	mov    eax,DWORD PTR [edx]
c0002c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002c18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002c1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002c23:	e8 4d f4 ff ff       	call   c0002075 <tchar2uni>
c0002c28:	83 f8 ff             	cmp    eax,0xffffffff
c0002c2b:	89 c3                	mov    ebx,eax
c0002c2d:	75 0a                	jne    c0002c39 <create_name+0x37>
c0002c2f:	b8 06 00 00 00       	mov    eax,0x6
c0002c34:	e9 7c 02 00 00       	jmp    c0002eb5 <create_name+0x2b3>
c0002c39:	3d ff ff 00 00       	cmp    eax,0xffff
c0002c3e:	76 0c                	jbe    c0002c4c <create_name+0x4a>
c0002c40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002c44:	c1 e8 10             	shr    eax,0x10
c0002c47:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002c4b:	46                   	inc    esi
c0002c4c:	0f b7 d3             	movzx  edx,bx
c0002c4f:	89 d8                	mov    eax,ebx
c0002c51:	83 fa 1f             	cmp    edx,0x1f
c0002c54:	76 30                	jbe    c0002c86 <create_name+0x84>
c0002c56:	83 fa 2f             	cmp    edx,0x2f
c0002c59:	74 2b                	je     c0002c86 <create_name+0x84>
c0002c5b:	83 fa 5c             	cmp    edx,0x5c
c0002c5e:	74 35                	je     c0002c95 <create_name+0x93>
c0002c60:	83 fa 7f             	cmp    edx,0x7f
c0002c63:	77 0e                	ja     c0002c73 <create_name+0x71>
c0002c65:	b8 42 21 02 c0       	mov    eax,0xc0022142
c0002c6a:	e8 ef f3 ff ff       	call   c000205e <chk_chr>
c0002c6f:	85 c0                	test   eax,eax
c0002c71:	75 bc                	jne    c0002c2f <create_name+0x2d>
c0002c73:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c79:	77 b4                	ja     c0002c2f <create_name+0x2d>
c0002c7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c7f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c83:	46                   	inc    esi
c0002c84:	eb 99                	jmp    c0002c1f <create_name+0x1d>
c0002c86:	66 83 f8 1f          	cmp    ax,0x1f
c0002c8a:	b3 04                	mov    bl,0x4
c0002c8c:	76 1a                	jbe    c0002ca8 <create_name+0xa6>
c0002c8e:	eb 05                	jmp    c0002c95 <create_name+0x93>
c0002c90:	40                   	inc    eax
c0002c91:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c99:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c9c:	83 fa 2f             	cmp    edx,0x2f
c0002c9f:	74 ef                	je     c0002c90 <create_name+0x8e>
c0002ca1:	83 fa 5c             	cmp    edx,0x5c
c0002ca4:	74 ea                	je     c0002c90 <create_name+0x8e>
c0002ca6:	31 db                	xor    ebx,ebx
c0002ca8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002cac:	89 07                	mov    DWORD PTR [edi],eax
c0002cae:	85 f6                	test   esi,esi
c0002cb0:	74 16                	je     c0002cc8 <create_name+0xc6>
c0002cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cb6:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002cbb:	83 f8 20             	cmp    eax,0x20
c0002cbe:	74 05                	je     c0002cc5 <create_name+0xc3>
c0002cc0:	83 f8 2e             	cmp    eax,0x2e
c0002cc3:	75 03                	jne    c0002cc8 <create_name+0xc6>
c0002cc5:	4e                   	dec    esi
c0002cc6:	eb e6                	jmp    c0002cae <create_name+0xac>
c0002cc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ccc:	31 ff                	xor    edi,edi
c0002cce:	85 f6                	test   esi,esi
c0002cd0:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002cd6:	0f 84 53 ff ff ff    	je     c0002c2f <create_name+0x2d>
c0002cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ce0:	8d 57 01             	lea    edx,[edi+0x1]
c0002ce3:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ce7:	83 f8 20             	cmp    eax,0x20
c0002cea:	75 04                	jne    c0002cf0 <create_name+0xee>
c0002cec:	89 d7                	mov    edi,edx
c0002cee:	eb ec                	jmp    c0002cdc <create_name+0xda>
c0002cf0:	85 ff                	test   edi,edi
c0002cf2:	75 05                	jne    c0002cf9 <create_name+0xf7>
c0002cf4:	83 f8 2e             	cmp    eax,0x2e
c0002cf7:	75 08                	jne    c0002d01 <create_name+0xff>
c0002cf9:	83 cb 03             	or     ebx,0x3
c0002cfc:	eb 03                	jmp    c0002d01 <create_name+0xff>
c0002cfe:	4e                   	dec    esi
c0002cff:	74 0c                	je     c0002d0d <create_name+0x10b>
c0002d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d05:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002d0b:	75 f1                	jne    c0002cfe <create_name+0xfc>
c0002d0d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d12:	ba 20 00 00 00       	mov    edx,0x20
c0002d17:	8d 45 20             	lea    eax,[ebp+0x20]
c0002d1a:	e8 12 f3 ff ff       	call   c0002031 <mem_set>
c0002d1f:	31 c9                	xor    ecx,ecx
c0002d21:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002d29:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002d2e:	8d 47 01             	lea    eax,[edi+0x1]
c0002d31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d39:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002d3d:	85 c0                	test   eax,eax
c0002d3f:	89 c7                	mov    edi,eax
c0002d41:	0f 84 1d 01 00 00    	je     c0002e64 <create_name+0x262>
c0002d47:	83 f8 20             	cmp    eax,0x20
c0002d4a:	74 0b                	je     c0002d57 <create_name+0x155>
c0002d4c:	83 f8 2e             	cmp    eax,0x2e
c0002d4f:	75 0f                	jne    c0002d60 <create_name+0x15e>
c0002d51:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d55:	74 09                	je     c0002d60 <create_name+0x15e>
c0002d57:	83 cb 03             	or     ebx,0x3
c0002d5a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002d5e:	eb ce                	jmp    c0002d2e <create_name+0x12c>
c0002d60:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002d64:	73 06                	jae    c0002d6c <create_name+0x16a>
c0002d66:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d6a:	75 3a                	jne    c0002da6 <create_name+0x1a4>
c0002d6c:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002d71:	75 08                	jne    c0002d7b <create_name+0x179>
c0002d73:	83 cb 03             	or     ebx,0x3
c0002d76:	e9 e9 00 00 00       	jmp    c0002e64 <create_name+0x262>
c0002d7b:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d7f:	74 0d                	je     c0002d8e <create_name+0x18c>
c0002d81:	83 cb 03             	or     ebx,0x3
c0002d84:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d88:	0f 87 d6 00 00 00    	ja     c0002e64 <create_name+0x262>
c0002d8e:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d93:	b9 08 00 00 00       	mov    ecx,0x8
c0002d98:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002d9c:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002da4:	eb b4                	jmp    c0002d5a <create_name+0x158>
c0002da6:	0f b7 c7             	movzx  eax,di
c0002da9:	83 f8 7f             	cmp    eax,0x7f
c0002dac:	76 66                	jbe    c0002e14 <create_name+0x212>
c0002dae:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002db2:	89 d9                	mov    ecx,ebx
c0002db4:	83 c9 02             	or     ecx,0x2
c0002db7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dbb:	52                   	push   edx
c0002dbc:	52                   	push   edx
c0002dbd:	68 b5 01 00 00       	push   0x1b5
c0002dc2:	50                   	push   eax
c0002dc3:	e8 9c 30 00 00       	call   c0005e64 <ff_uni2oem>
c0002dc8:	83 c4 10             	add    esp,0x10
c0002dcb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002dcf:	a8 80                	test   al,0x80
c0002dd1:	89 c7                	mov    edi,eax
c0002dd3:	74 0c                	je     c0002de1 <create_name+0x1df>
c0002dd5:	83 e7 7f             	and    edi,0x7f
c0002dd8:	0f b6 bf 00 22 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdde00]
c0002ddf:	eb 2a                	jmp    c0002e0b <create_name+0x209>
c0002de1:	0f b7 c0             	movzx  eax,ax
c0002de4:	3d ff 00 00 00       	cmp    eax,0xff
c0002de9:	76 20                	jbe    c0002e0b <create_name+0x209>
c0002deb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002def:	4a                   	dec    edx
c0002df0:	39 ca                	cmp    edx,ecx
c0002df2:	77 0c                	ja     c0002e00 <create_name+0x1fe>
c0002df4:	83 cb 03             	or     ebx,0x3
c0002df7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002dfb:	e9 5a ff ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e00:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002e04:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e08:	41                   	inc    ecx
c0002e09:	eb 4d                	jmp    c0002e58 <create_name+0x256>
c0002e0b:	66 85 ff             	test   di,di
c0002e0e:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e12:	74 19                	je     c0002e2d <create_name+0x22b>
c0002e14:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002e18:	0f b7 d7             	movzx  edx,di
c0002e1b:	b8 4b 21 02 c0       	mov    eax,0xc002214b
c0002e20:	e8 39 f2 ff ff       	call   c000205e <chk_chr>
c0002e25:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	74 0a                	je     c0002e37 <create_name+0x235>
c0002e2d:	83 cb 03             	or     ebx,0x3
c0002e30:	bf 5f 00 00 00       	mov    edi,0x5f
c0002e35:	eb 21                	jmp    c0002e58 <create_name+0x256>
c0002e37:	8d 47 bf             	lea    eax,[edi-0x41]
c0002e3a:	66 83 f8 19          	cmp    ax,0x19
c0002e3e:	77 07                	ja     c0002e47 <create_name+0x245>
c0002e40:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e45:	eb 11                	jmp    c0002e58 <create_name+0x256>
c0002e47:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e4a:	66 83 f8 19          	cmp    ax,0x19
c0002e4e:	77 08                	ja     c0002e58 <create_name+0x256>
c0002e50:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e55:	83 ef 20             	sub    edi,0x20
c0002e58:	89 f8                	mov    eax,edi
c0002e5a:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002e5e:	41                   	inc    ecx
c0002e5f:	e9 f6 fe ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e64:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002e68:	75 04                	jne    c0002e6e <create_name+0x26c>
c0002e6a:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002e6e:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002e73:	75 05                	jne    c0002e7a <create_name+0x278>
c0002e75:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e7e:	83 e0 0c             	and    eax,0xc
c0002e81:	83 f8 0c             	cmp    eax,0xc
c0002e84:	74 0c                	je     c0002e92 <create_name+0x290>
c0002e86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e8a:	83 e0 03             	and    eax,0x3
c0002e8d:	83 f8 03             	cmp    eax,0x3
c0002e90:	75 05                	jne    c0002e97 <create_name+0x295>
c0002e92:	83 cb 02             	or     ebx,0x2
c0002e95:	eb 19                	jmp    c0002eb0 <create_name+0x2ae>
c0002e97:	f6 c3 02             	test   bl,0x2
c0002e9a:	75 14                	jne    c0002eb0 <create_name+0x2ae>
c0002e9c:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002ea1:	74 03                	je     c0002ea6 <create_name+0x2a4>
c0002ea3:	83 cb 10             	or     ebx,0x10
c0002ea6:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002eab:	74 03                	je     c0002eb0 <create_name+0x2ae>
c0002ead:	83 cb 08             	or     ebx,0x8
c0002eb0:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002eb3:	31 c0                	xor    eax,eax
c0002eb5:	83 c4 3c             	add    esp,0x3c
c0002eb8:	5b                   	pop    ebx
c0002eb9:	5e                   	pop    esi
c0002eba:	5f                   	pop    edi
c0002ebb:	5d                   	pop    ebp
c0002ebc:	c3                   	ret    

c0002ebd <cmp_lfn>:
c0002ebd:	55                   	push   ebp
c0002ebe:	57                   	push   edi
c0002ebf:	89 d7                	mov    edi,edx
c0002ec1:	56                   	push   esi
c0002ec2:	53                   	push   ebx
c0002ec3:	83 ec 1c             	sub    esp,0x1c
c0002ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002eca:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ecd:	e8 1e f1 ff ff       	call   c0001ff0 <ld_word>
c0002ed2:	66 85 c0             	test   ax,ax
c0002ed5:	74 07                	je     c0002ede <cmp_lfn+0x21>
c0002ed7:	31 c0                	xor    eax,eax
c0002ed9:	e9 a4 00 00 00       	jmp    c0002f82 <cmp_lfn+0xc5>
c0002ede:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002ee0:	bd 01 00 00 00       	mov    ebp,0x1
c0002ee5:	31 c9                	xor    ecx,ecx
c0002ee7:	83 e3 3f             	and    ebx,0x3f
c0002eea:	4b                   	dec    ebx
c0002eeb:	6b db 0d             	imul   ebx,ebx,0xd
c0002eee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef2:	0f b6 81 80 22 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffddd80]
c0002ef9:	01 f8                	add    eax,edi
c0002efb:	e8 f0 f0 ff ff       	call   c0001ff0 <ld_word>
c0002f00:	66 85 ed             	test   bp,bp
c0002f03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f07:	0f b7 f0             	movzx  esi,ax
c0002f0a:	74 44                	je     c0002f50 <cmp_lfn+0x93>
c0002f0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002f10:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002f16:	77 bf                	ja     c0002ed7 <cmp_lfn+0x1a>
c0002f18:	83 ec 0c             	sub    esp,0xc
c0002f1b:	0f b7 c6             	movzx  eax,si
c0002f1e:	50                   	push   eax
c0002f1f:	e8 54 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f24:	89 c5                	mov    ebp,eax
c0002f26:	8d 43 01             	lea    eax,[ebx+0x1]
c0002f29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f31:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f35:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f38:	e8 3b 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f3d:	83 c4 10             	add    esp,0x10
c0002f40:	39 c5                	cmp    ebp,eax
c0002f42:	75 93                	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f44:	89 f5                	mov    ebp,esi
c0002f46:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002f4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002f4e:	eb 0c                	jmp    c0002f5c <cmp_lfn+0x9f>
c0002f50:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002f56:	0f 85 7b ff ff ff    	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f5c:	41                   	inc    ecx
c0002f5d:	83 f9 0d             	cmp    ecx,0xd
c0002f60:	75 8c                	jne    c0002eee <cmp_lfn+0x31>
c0002f62:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f65:	74 16                	je     c0002f7d <cmp_lfn+0xc0>
c0002f67:	66 85 ed             	test   bp,bp
c0002f6a:	74 11                	je     c0002f7d <cmp_lfn+0xc0>
c0002f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f75:	0f 94 c0             	sete   al
c0002f78:	0f b6 c0             	movzx  eax,al
c0002f7b:	eb 05                	jmp    c0002f82 <cmp_lfn+0xc5>
c0002f7d:	b8 01 00 00 00       	mov    eax,0x1
c0002f82:	83 c4 1c             	add    esp,0x1c
c0002f85:	5b                   	pop    ebx
c0002f86:	5e                   	pop    esi
c0002f87:	5f                   	pop    edi
c0002f88:	5d                   	pop    ebp
c0002f89:	c3                   	ret    

c0002f8a <sync_fs>:
c0002f8a:	56                   	push   esi
c0002f8b:	53                   	push   ebx
c0002f8c:	53                   	push   ebx
c0002f8d:	89 c3                	mov    ebx,eax
c0002f8f:	e8 5e f5 ff ff       	call   c00024f2 <sync_window>
c0002f94:	85 c0                	test   eax,eax
c0002f96:	0f 85 9a 00 00 00    	jne    c0003036 <sync_fs+0xac>
c0002f9c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f9f:	75 7b                	jne    c000301c <sync_fs+0x92>
c0002fa1:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002fa5:	75 75                	jne    c000301c <sync_fs+0x92>
c0002fa7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002faa:	b9 00 02 00 00       	mov    ecx,0x200
c0002faf:	31 d2                	xor    edx,edx
c0002fb1:	89 f0                	mov    eax,esi
c0002fb3:	e8 79 f0 ff ff       	call   c0002031 <mem_set>
c0002fb8:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002fbe:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fc3:	e8 4d f0 ff ff       	call   c0002015 <st_word>
c0002fc8:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fcd:	89 f0                	mov    eax,esi
c0002fcf:	e8 45 f0 ff ff       	call   c0002019 <st_dword>
c0002fd4:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fda:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fdf:	e8 35 f0 ff ff       	call   c0002019 <st_dword>
c0002fe4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fe7:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fed:	e8 27 f0 ff ff       	call   c0002019 <st_dword>
c0002ff2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff5:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ffb:	e8 19 f0 ff ff       	call   c0002019 <st_dword>
c0003000:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0003003:	6a 01                	push   0x1
c0003005:	40                   	inc    eax
c0003006:	50                   	push   eax
c0003007:	56                   	push   esi
c0003008:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000300b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000300f:	50                   	push   eax
c0003010:	e8 a6 ef ff ff       	call   c0001fbb <disk_write>
c0003015:	83 c4 10             	add    esp,0x10
c0003018:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000301c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003020:	51                   	push   ecx
c0003021:	6a 00                	push   0x0
c0003023:	6a 00                	push   0x0
c0003025:	50                   	push   eax
c0003026:	e8 a6 ef ff ff       	call   c0001fd1 <disk_ioctl>
c000302b:	83 c4 10             	add    esp,0x10
c000302e:	85 c0                	test   eax,eax
c0003030:	0f 95 c0             	setne  al
c0003033:	0f b6 c0             	movzx  eax,al
c0003036:	5a                   	pop    edx
c0003037:	5b                   	pop    ebx
c0003038:	5e                   	pop    esi
c0003039:	c3                   	ret    

c000303a <create_partition>:
c000303a:	55                   	push   ebp
c000303b:	0f b6 c0             	movzx  eax,al
c000303e:	57                   	push   edi
c000303f:	56                   	push   esi
c0003040:	53                   	push   ebx
c0003041:	83 ec 40             	sub    esp,0x40
c0003044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003048:	8d 44 24 30          	lea    eax,[esp+0x30]
c000304c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003050:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003054:	50                   	push   eax
c0003055:	6a 01                	push   0x1
c0003057:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000305b:	e8 71 ef ff ff       	call   c0001fd1 <disk_ioctl>
c0003060:	83 c4 10             	add    esp,0x10
c0003063:	85 c0                	test   eax,eax
c0003065:	0f 85 68 01 00 00    	jne    c00031d3 <create_partition+0x199>
c000306b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000306f:	b9 05 00 00 00       	mov    ecx,0x5
c0003074:	be 08 00 00 00       	mov    esi,0x8
c0003079:	89 f0                	mov    eax,esi
c000307b:	31 d2                	xor    edx,edx
c000307d:	0f b6 d8             	movzx  ebx,al
c0003080:	89 e8                	mov    eax,ebp
c0003082:	f7 f3                	div    ebx
c0003084:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003089:	76 0a                	jbe    c0003095 <create_partition+0x5b>
c000308b:	d1 e6                	shl    esi,1
c000308d:	49                   	dec    ecx
c000308e:	75 e9                	jne    c0003079 <create_partition+0x3f>
c0003090:	be ff ff ff ff       	mov    esi,0xffffffff
c0003095:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003099:	b9 00 02 00 00       	mov    ecx,0x200
c000309e:	31 d2                	xor    edx,edx
c00030a0:	e8 8c ef ff ff       	call   c0002031 <mem_set>
c00030a5:	b9 64 00 00 00       	mov    ecx,0x64
c00030aa:	89 e8                	mov    eax,ebp
c00030ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00030b4:	31 d2                	xor    edx,edx
c00030b6:	f7 f1                	div    ecx
c00030b8:	b9 3f 00 00 00       	mov    ecx,0x3f
c00030bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00030c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030c5:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030cb:	89 f0                	mov    eax,esi
c00030cd:	0f b6 c0             	movzx  eax,al
c00030d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030d4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00030d9:	0f 96 c0             	setbe  al
c00030dc:	31 d2                	xor    edx,edx
c00030de:	85 c9                	test   ecx,ecx
c00030e0:	0f 95 c2             	setne  dl
c00030e3:	85 c2                	test   edx,eax
c00030e5:	0f 84 b7 00 00 00    	je     c00031a2 <create_partition+0x168>
c00030eb:	39 e9                	cmp    ecx,ebp
c00030ed:	0f 83 af 00 00 00    	jae    c00031a2 <create_partition+0x168>
c00030f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030fb:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030fe:	83 fe 64             	cmp    esi,0x64
c0003101:	77 0b                	ja     c000310e <create_partition+0xd4>
c0003103:	74 07                	je     c000310c <create_partition+0xd2>
c0003105:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c000310a:	eb 02                	jmp    c000310e <create_partition+0xd4>
c000310c:	89 ee                	mov    esi,ebp
c000310e:	89 ca                	mov    edx,ecx
c0003110:	31 c0                	xor    eax,eax
c0003112:	01 f2                	add    edx,esi
c0003114:	0f 92 c0             	setb   al
c0003117:	39 ea                	cmp    edx,ebp
c0003119:	77 04                	ja     c000311f <create_partition+0xe5>
c000311b:	85 c0                	test   eax,eax
c000311d:	74 06                	je     c0003125 <create_partition+0xeb>
c000311f:	89 ee                	mov    esi,ebp
c0003121:	29 ce                	sub    esi,ecx
c0003123:	eb 04                	jmp    c0003129 <create_partition+0xef>
c0003125:	85 f6                	test   esi,esi
c0003127:	74 79                	je     c00031a2 <create_partition+0x168>
c0003129:	89 ca                	mov    edx,ecx
c000312b:	89 d8                	mov    eax,ebx
c000312d:	e8 e7 ee ff ff       	call   c0002019 <st_dword>
c0003132:	8d 43 04             	lea    eax,[ebx+0x4]
c0003135:	89 f2                	mov    edx,esi
c0003137:	e8 dd ee ff ff       	call   c0002019 <st_dword>
c000313c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003140:	bf 3f 00 00 00       	mov    edi,0x3f
c0003145:	31 d2                	xor    edx,edx
c0003147:	83 c3 10             	add    ebx,0x10
c000314a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000314e:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003151:	89 c8                	mov    eax,ecx
c0003153:	01 f1                	add    ecx,esi
c0003155:	f7 f7                	div    edi
c0003157:	89 d7                	mov    edi,edx
c0003159:	31 d2                	xor    edx,edx
c000315b:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000315f:	47                   	inc    edi
c0003160:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003163:	89 c2                	mov    edx,eax
c0003165:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003168:	c1 ea 02             	shr    edx,0x2
c000316b:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316e:	83 e2 c0             	and    edx,0xffffffc0
c0003171:	09 fa                	or     edx,edi
c0003173:	bf 3f 00 00 00       	mov    edi,0x3f
c0003178:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c000317b:	31 d2                	xor    edx,edx
c000317d:	f7 f7                	div    edi
c000317f:	89 d6                	mov    esi,edx
c0003181:	31 d2                	xor    edx,edx
c0003183:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003187:	46                   	inc    esi
c0003188:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c000318b:	89 c7                	mov    edi,eax
c000318d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003190:	c1 ef 02             	shr    edi,0x2
c0003193:	83 e7 c0             	and    edi,0xffffffc0
c0003196:	09 fe                	or     esi,edi
c0003198:	89 f2                	mov    edx,esi
c000319a:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c000319d:	e9 32 ff ff ff       	jmp    c00030d4 <create_partition+0x9a>
c00031a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00031ab:	05 fe 01 00 00       	add    eax,0x1fe
c00031b0:	e8 60 ee ff ff       	call   c0002015 <st_word>
c00031b5:	6a 01                	push   0x1
c00031b7:	6a 00                	push   0x0
c00031b9:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00031bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00031c1:	e8 f5 ed ff ff       	call   c0001fbb <disk_write>
c00031c6:	83 c4 10             	add    esp,0x10
c00031c9:	85 c0                	test   eax,eax
c00031cb:	0f 95 c0             	setne  al
c00031ce:	0f b6 c0             	movzx  eax,al
c00031d1:	eb 05                	jmp    c00031d8 <create_partition+0x19e>
c00031d3:	b8 01 00 00 00       	mov    eax,0x1
c00031d8:	83 c4 3c             	add    esp,0x3c
c00031db:	5b                   	pop    ebx
c00031dc:	5e                   	pop    esi
c00031dd:	5f                   	pop    edi
c00031de:	5d                   	pop    ebp
c00031df:	c3                   	ret    

c00031e0 <get_fileinfo>:
c00031e0:	55                   	push   ebp
c00031e1:	57                   	push   edi
c00031e2:	56                   	push   esi
c00031e3:	53                   	push   ebx
c00031e4:	83 ec 1c             	sub    esp,0x1c
c00031e7:	8b 30                	mov    esi,DWORD PTR [eax]
c00031e9:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031ed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031f1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031f5:	0f 84 de 01 00 00    	je     c00033d9 <get_fileinfo+0x1f9>
c00031fb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031ff:	89 d3                	mov    ebx,edx
c0003201:	89 c6                	mov    esi,eax
c0003203:	74 7d                	je     c0003282 <get_fileinfo+0xa2>
c0003205:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000320d:	31 ff                	xor    edi,edi
c000320f:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000321a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000321e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003221:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003225:	85 c0                	test   eax,eax
c0003227:	89 c2                	mov    edx,eax
c0003229:	74 44                	je     c000326f <get_fileinfo+0x8f>
c000322b:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003230:	85 ed                	test   ebp,ebp
c0003232:	75 0d                	jne    c0003241 <get_fileinfo+0x61>
c0003234:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000323a:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000323f:	76 20                	jbe    c0003261 <get_fileinfo+0x81>
c0003241:	c1 e5 10             	shl    ebp,0x10
c0003244:	b9 ff 00 00 00       	mov    ecx,0xff
c0003249:	29 f9                	sub    ecx,edi
c000324b:	09 e8                	or     eax,ebp
c000324d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003251:	e8 f7 ee ff ff       	call   c000214d <put_utf>
c0003256:	0f b6 c0             	movzx  eax,al
c0003259:	85 c0                	test   eax,eax
c000325b:	74 10                	je     c000326d <get_fileinfo+0x8d>
c000325d:	01 c7                	add    edi,eax
c000325f:	31 d2                	xor    edx,edx
c0003261:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003266:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000326b:	eb a9                	jmp    c0003216 <get_fileinfo+0x36>
c000326d:	31 ff                	xor    edi,edi
c000326f:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003275:	b8 00 00 00 00       	mov    eax,0x0
c000327a:	0f 45 f8             	cmovne edi,eax
c000327d:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003282:	31 ff                	xor    edi,edi
c0003284:	31 c9                	xor    ecx,ecx
c0003286:	83 f9 0a             	cmp    ecx,0xa
c0003289:	0f 87 ac 00 00 00    	ja     c000333b <get_fileinfo+0x15b>
c000328f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003292:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003295:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003299:	83 f8 20             	cmp    eax,0x20
c000329c:	89 c2                	mov    edx,eax
c000329e:	0f 84 90 00 00 00    	je     c0003334 <get_fileinfo+0x154>
c00032a4:	83 f8 05             	cmp    eax,0x5
c00032a7:	75 05                	jne    c00032ae <get_fileinfo+0xce>
c00032a9:	ba e5 00 00 00       	mov    edx,0xe5
c00032ae:	83 fd 09             	cmp    ebp,0x9
c00032b1:	75 0b                	jne    c00032be <get_fileinfo+0xde>
c00032b3:	83 ff 0b             	cmp    edi,0xb
c00032b6:	77 06                	ja     c00032be <get_fileinfo+0xde>
c00032b8:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00032bd:	47                   	inc    edi
c00032be:	0f b7 c2             	movzx  eax,dx
c00032c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00032c5:	e8 a5 ed ff ff       	call   c000206f <dbc_1st>
c00032ca:	85 c0                	test   eax,eax
c00032cc:	74 2f                	je     c00032fd <get_fileinfo+0x11d>
c00032ce:	83 fd 08             	cmp    ebp,0x8
c00032d1:	74 2a                	je     c00032fd <get_fileinfo+0x11d>
c00032d3:	83 fd 0b             	cmp    ebp,0xb
c00032d6:	74 25                	je     c00032fd <get_fileinfo+0x11d>
c00032d8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032db:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032df:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c00032e3:	e8 8a ed ff ff       	call   c0002072 <dbc_2nd>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 11                	je     c00032fd <get_fileinfo+0x11d>
c00032ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032f0:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032f3:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c00032f8:	c1 e0 08             	shl    eax,0x8
c00032fb:	09 c2                	or     edx,eax
c00032fd:	50                   	push   eax
c00032fe:	0f b7 d2             	movzx  edx,dx
c0003301:	50                   	push   eax
c0003302:	68 b5 01 00 00       	push   0x1b5
c0003307:	52                   	push   edx
c0003308:	e8 f3 2b 00 00       	call   c0005f00 <ff_oem2uni>
c000330d:	83 c4 10             	add    esp,0x10
c0003310:	0f b7 c0             	movzx  eax,ax
c0003313:	85 c0                	test   eax,eax
c0003315:	75 04                	jne    c000331b <get_fileinfo+0x13b>
c0003317:	31 ff                	xor    edi,edi
c0003319:	eb 20                	jmp    c000333b <get_fileinfo+0x15b>
c000331b:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000331f:	b9 0c 00 00 00       	mov    ecx,0xc
c0003324:	29 f9                	sub    ecx,edi
c0003326:	e8 22 ee ff ff       	call   c000214d <put_utf>
c000332b:	0f b6 c0             	movzx  eax,al
c000332e:	85 c0                	test   eax,eax
c0003330:	74 e5                	je     c0003317 <get_fileinfo+0x137>
c0003332:	01 c7                	add    edi,eax
c0003334:	89 e9                	mov    ecx,ebp
c0003336:	e9 4b ff ff ff       	jmp    c0003286 <get_fileinfo+0xa6>
c000333b:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003340:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003344:	75 5f                	jne    c00033a5 <get_fileinfo+0x1c5>
c0003346:	85 ff                	test   edi,edi
c0003348:	75 0b                	jne    c0003355 <get_fileinfo+0x175>
c000334a:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000334e:	ba 01 00 00 00       	mov    edx,0x1
c0003353:	eb 3e                	jmp    c0003393 <get_fileinfo+0x1b3>
c0003355:	bf 08 00 00 00       	mov    edi,0x8
c000335a:	31 d2                	xor    edx,edx
c000335c:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003362:	84 c0                	test   al,al
c0003364:	74 2d                	je     c0003393 <get_fileinfo+0x1b3>
c0003366:	66 83 f8 2e          	cmp    ax,0x2e
c000336a:	74 1b                	je     c0003387 <get_fileinfo+0x1a7>
c000336c:	8d 48 bf             	lea    ecx,[eax-0x41]
c000336f:	66 83 f9 19          	cmp    cx,0x19
c0003373:	77 17                	ja     c000338c <get_fileinfo+0x1ac>
c0003375:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003378:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000337b:	21 f9                	and    ecx,edi
c000337d:	80 e1 18             	and    cl,0x18
c0003380:	74 0a                	je     c000338c <get_fileinfo+0x1ac>
c0003382:	83 c0 20             	add    eax,0x20
c0003385:	eb 05                	jmp    c000338c <get_fileinfo+0x1ac>
c0003387:	bf 10 00 00 00       	mov    edi,0x10
c000338c:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003390:	42                   	inc    edx
c0003391:	eb c9                	jmp    c000335c <get_fileinfo+0x17c>
c0003393:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003398:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000339b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000339f:	75 04                	jne    c00033a5 <get_fileinfo+0x1c5>
c00033a1:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00033a5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033a8:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00033ab:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00033ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033b1:	83 c0 1c             	add    eax,0x1c
c00033b4:	e8 44 ec ff ff       	call   c0001ffd <ld_dword>
c00033b9:	89 03                	mov    DWORD PTR [ebx],eax
c00033bb:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033be:	83 c0 16             	add    eax,0x16
c00033c1:	e8 2a ec ff ff       	call   c0001ff0 <ld_word>
c00033c6:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00033ca:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033cd:	83 c0 18             	add    eax,0x18
c00033d0:	e8 1b ec ff ff       	call   c0001ff0 <ld_word>
c00033d5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033d9:	83 c4 1c             	add    esp,0x1c
c00033dc:	5b                   	pop    ebx
c00033dd:	5e                   	pop    esi
c00033de:	5f                   	pop    edi
c00033df:	5d                   	pop    ebp
c00033e0:	c3                   	ret    

c00033e1 <ld_clust.isra.0>:
c00033e1:	56                   	push   esi
c00033e2:	89 c6                	mov    esi,eax
c00033e4:	53                   	push   ebx
c00033e5:	89 d3                	mov    ebx,edx
c00033e7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033ea:	e8 01 ec ff ff       	call   c0001ff0 <ld_word>
c00033ef:	0f b7 c8             	movzx  ecx,ax
c00033f2:	89 f0                	mov    eax,esi
c00033f4:	3c 03                	cmp    al,0x3
c00033f6:	75 0d                	jne    c0003405 <ld_clust.isra.0+0x24>
c00033f8:	8d 43 14             	lea    eax,[ebx+0x14]
c00033fb:	e8 f0 eb ff ff       	call   c0001ff0 <ld_word>
c0003400:	c1 e0 10             	shl    eax,0x10
c0003403:	09 c1                	or     ecx,eax
c0003405:	5b                   	pop    ebx
c0003406:	89 c8                	mov    eax,ecx
c0003408:	5e                   	pop    esi
c0003409:	c3                   	ret    

c000340a <st_clust.isra.1>:
c000340a:	56                   	push   esi
c000340b:	89 c6                	mov    esi,eax
c000340d:	53                   	push   ebx
c000340e:	89 d3                	mov    ebx,edx
c0003410:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003413:	0f b7 d1             	movzx  edx,cx
c0003416:	e8 fa eb ff ff       	call   c0002015 <st_word>
c000341b:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000341e:	75 0f                	jne    c000342f <st_clust.isra.1+0x25>
c0003420:	8d 43 14             	lea    eax,[ebx+0x14]
c0003423:	5b                   	pop    ebx
c0003424:	c1 e9 10             	shr    ecx,0x10
c0003427:	89 ca                	mov    edx,ecx
c0003429:	5e                   	pop    esi
c000342a:	e9 e6 eb ff ff       	jmp    c0002015 <st_word>
c000342f:	5b                   	pop    ebx
c0003430:	5e                   	pop    esi
c0003431:	c3                   	ret    

c0003432 <get_fat.isra.2>:
c0003432:	83 fa 01             	cmp    edx,0x1
c0003435:	b9 01 00 00 00       	mov    ecx,0x1
c000343a:	0f 86 f4 00 00 00    	jbe    c0003534 <get_fat.isra.2+0x102>
c0003440:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003443:	0f 83 eb 00 00 00    	jae    c0003534 <get_fat.isra.2+0x102>
c0003449:	55                   	push   ebp
c000344a:	57                   	push   edi
c000344b:	56                   	push   esi
c000344c:	89 c6                	mov    esi,eax
c000344e:	53                   	push   ebx
c000344f:	89 d3                	mov    ebx,edx
c0003451:	83 ec 0c             	sub    esp,0xc
c0003454:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003457:	83 f8 02             	cmp    eax,0x2
c000345a:	74 79                	je     c00034d5 <get_fat.isra.2+0xa3>
c000345c:	83 f8 03             	cmp    eax,0x3
c000345f:	0f 84 97 00 00 00    	je     c00034fc <get_fat.isra.2+0xca>
c0003465:	48                   	dec    eax
c0003466:	0f 85 be 00 00 00    	jne    c000352a <get_fat.isra.2+0xf8>
c000346c:	89 d7                	mov    edi,edx
c000346e:	89 f0                	mov    eax,esi
c0003470:	d1 ef                	shr    edi,1
c0003472:	01 d7                	add    edi,edx
c0003474:	89 fa                	mov    edx,edi
c0003476:	c1 ea 09             	shr    edx,0x9
c0003479:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000347c:	e8 d4 f0 ff ff       	call   c0002555 <move_window>
c0003481:	85 c0                	test   eax,eax
c0003483:	74 08                	je     c000348d <get_fat.isra.2+0x5b>
c0003485:	83 c9 ff             	or     ecx,0xffffffff
c0003488:	e9 9d 00 00 00       	jmp    c000352a <get_fat.isra.2+0xf8>
c000348d:	8d 6f 01             	lea    ebp,[edi+0x1]
c0003490:	89 f0                	mov    eax,esi
c0003492:	89 ea                	mov    edx,ebp
c0003494:	81 e7 ff 01 00 00    	and    edi,0x1ff
c000349a:	c1 ea 09             	shr    edx,0x9
c000349d:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00034a2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034a5:	e8 ab f0 ff ff       	call   c0002555 <move_window>
c00034aa:	85 c0                	test   eax,eax
c00034ac:	75 d7                	jne    c0003485 <get_fat.isra.2+0x53>
c00034ae:	89 f8                	mov    eax,edi
c00034b0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00034b6:	0f b6 f8             	movzx  edi,al
c00034b9:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00034be:	c1 e0 08             	shl    eax,0x8
c00034c1:	09 f8                	or     eax,edi
c00034c3:	89 c1                	mov    ecx,eax
c00034c5:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00034cb:	80 e3 01             	and    bl,0x1
c00034ce:	74 5a                	je     c000352a <get_fat.isra.2+0xf8>
c00034d0:	c1 e8 04             	shr    eax,0x4
c00034d3:	eb 53                	jmp    c0003528 <get_fat.isra.2+0xf6>
c00034d5:	c1 ea 08             	shr    edx,0x8
c00034d8:	89 f0                	mov    eax,esi
c00034da:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034dd:	e8 73 f0 ff ff       	call   c0002555 <move_window>
c00034e2:	85 c0                	test   eax,eax
c00034e4:	75 9f                	jne    c0003485 <get_fat.isra.2+0x53>
c00034e6:	01 db                	add    ebx,ebx
c00034e8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00034ee:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00034f2:	e8 f9 ea ff ff       	call   c0001ff0 <ld_word>
c00034f7:	0f b7 c8             	movzx  ecx,ax
c00034fa:	eb 2e                	jmp    c000352a <get_fat.isra.2+0xf8>
c00034fc:	c1 ea 07             	shr    edx,0x7
c00034ff:	89 f0                	mov    eax,esi
c0003501:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003504:	e8 4c f0 ff ff       	call   c0002555 <move_window>
c0003509:	85 c0                	test   eax,eax
c000350b:	0f 85 74 ff ff ff    	jne    c0003485 <get_fat.isra.2+0x53>
c0003511:	c1 e3 02             	shl    ebx,0x2
c0003514:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c000351a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000351e:	e8 da ea ff ff       	call   c0001ffd <ld_dword>
c0003523:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003528:	89 c1                	mov    ecx,eax
c000352a:	83 c4 0c             	add    esp,0xc
c000352d:	89 c8                	mov    eax,ecx
c000352f:	5b                   	pop    ebx
c0003530:	5e                   	pop    esi
c0003531:	5f                   	pop    edi
c0003532:	5d                   	pop    ebp
c0003533:	c3                   	ret    
c0003534:	89 c8                	mov    eax,ecx
c0003536:	c3                   	ret    

c0003537 <dir_sdi>:
c0003537:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000353d:	0f 87 b6 00 00 00    	ja     c00035f9 <dir_sdi+0xc2>
c0003543:	55                   	push   ebp
c0003544:	57                   	push   edi
c0003545:	56                   	push   esi
c0003546:	53                   	push   ebx
c0003547:	89 d3                	mov    ebx,edx
c0003549:	83 ec 1c             	sub    esp,0x1c
c000354c:	f6 c2 1f             	test   dl,0x1f
c000354f:	74 0a                	je     c000355b <dir_sdi+0x24>
c0003551:	b8 02 00 00 00       	mov    eax,0x2
c0003556:	e9 96 00 00 00       	jmp    c00035f1 <dir_sdi+0xba>
c000355b:	89 c6                	mov    esi,eax
c000355d:	8b 28                	mov    ebp,DWORD PTR [eax]
c000355f:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003562:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003565:	85 ff                	test   edi,edi
c0003567:	75 21                	jne    c000358a <dir_sdi+0x53>
c0003569:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000356d:	76 07                	jbe    c0003576 <dir_sdi+0x3f>
c000356f:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003572:	85 c0                	test   eax,eax
c0003574:	75 12                	jne    c0003588 <dir_sdi+0x51>
c0003576:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000357a:	89 da                	mov    edx,ebx
c000357c:	c1 ea 05             	shr    edx,0x5
c000357f:	39 c2                	cmp    edx,eax
c0003581:	73 ce                	jae    c0003551 <dir_sdi+0x1a>
c0003583:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003586:	eb 3c                	jmp    c00035c4 <dir_sdi+0x8d>
c0003588:	89 c7                	mov    edi,eax
c000358a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000358e:	c1 e1 09             	shl    ecx,0x9
c0003591:	39 cb                	cmp    ebx,ecx
c0003593:	72 26                	jb     c00035bb <dir_sdi+0x84>
c0003595:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003599:	8b 06                	mov    eax,DWORD PTR [esi]
c000359b:	89 fa                	mov    edx,edi
c000359d:	e8 90 fe ff ff       	call   c0003432 <get_fat.isra.2>
c00035a2:	83 f8 ff             	cmp    eax,0xffffffff
c00035a5:	89 c7                	mov    edi,eax
c00035a7:	74 43                	je     c00035ec <dir_sdi+0xb5>
c00035a9:	83 f8 01             	cmp    eax,0x1
c00035ac:	76 a3                	jbe    c0003551 <dir_sdi+0x1a>
c00035ae:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00035b1:	76 9e                	jbe    c0003551 <dir_sdi+0x1a>
c00035b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035b7:	29 cb                	sub    ebx,ecx
c00035b9:	eb d6                	jmp    c0003591 <dir_sdi+0x5a>
c00035bb:	89 fa                	mov    edx,edi
c00035bd:	89 e8                	mov    eax,ebp
c00035bf:	e8 82 ec ff ff       	call   c0002246 <clst2sect>
c00035c4:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035c7:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00035ca:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00035cd:	85 d2                	test   edx,edx
c00035cf:	74 80                	je     c0003551 <dir_sdi+0x1a>
c00035d1:	89 d8                	mov    eax,ebx
c00035d3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035d9:	c1 e8 09             	shr    eax,0x9
c00035dc:	01 d0                	add    eax,edx
c00035de:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035e1:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c00035e5:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035e8:	31 c0                	xor    eax,eax
c00035ea:	eb 05                	jmp    c00035f1 <dir_sdi+0xba>
c00035ec:	b8 01 00 00 00       	mov    eax,0x1
c00035f1:	83 c4 1c             	add    esp,0x1c
c00035f4:	5b                   	pop    ebx
c00035f5:	5e                   	pop    esi
c00035f6:	5f                   	pop    edi
c00035f7:	5d                   	pop    ebp
c00035f8:	c3                   	ret    
c00035f9:	b8 02 00 00 00       	mov    eax,0x2
c00035fe:	c3                   	ret    

c00035ff <create_chain>:
c00035ff:	55                   	push   ebp
c0003600:	89 c5                	mov    ebp,eax
c0003602:	57                   	push   edi
c0003603:	89 d7                	mov    edi,edx
c0003605:	56                   	push   esi
c0003606:	53                   	push   ebx
c0003607:	83 ec 1c             	sub    esp,0x1c
c000360a:	85 d2                	test   edx,edx
c000360c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000360e:	75 0e                	jne    c000361e <create_chain+0x1f>
c0003610:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003613:	85 c9                	test   ecx,ecx
c0003615:	74 32                	je     c0003649 <create_chain+0x4a>
c0003617:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000361a:	77 32                	ja     c000364e <create_chain+0x4f>
c000361c:	eb 2b                	jmp    c0003649 <create_chain+0x4a>
c000361e:	89 d8                	mov    eax,ebx
c0003620:	e8 0d fe ff ff       	call   c0003432 <get_fat.isra.2>
c0003625:	83 f8 01             	cmp    eax,0x1
c0003628:	77 0a                	ja     c0003634 <create_chain+0x35>
c000362a:	b8 01 00 00 00       	mov    eax,0x1
c000362f:	e9 fd 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003634:	83 f8 ff             	cmp    eax,0xffffffff
c0003637:	0f 84 f1 00 00 00    	je     c000372e <create_chain+0x12f>
c000363d:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003640:	89 f9                	mov    ecx,edi
c0003642:	76 0a                	jbe    c000364e <create_chain+0x4f>
c0003644:	e9 e8 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003649:	b9 01 00 00 00       	mov    ecx,0x1
c000364e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003652:	75 07                	jne    c000365b <create_chain+0x5c>
c0003654:	31 c0                	xor    eax,eax
c0003656:	e9 d6 00 00 00       	jmp    c0003731 <create_chain+0x132>
c000365b:	39 f9                	cmp    ecx,edi
c000365d:	75 49                	jne    c00036a8 <create_chain+0xa9>
c000365f:	8d 71 01             	lea    esi,[ecx+0x1]
c0003662:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003665:	77 05                	ja     c000366c <create_chain+0x6d>
c0003667:	be 02 00 00 00       	mov    esi,0x2
c000366c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003670:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003673:	89 f2                	mov    edx,esi
c0003675:	e8 b8 fd ff ff       	call   c0003432 <get_fat.isra.2>
c000367a:	83 f8 01             	cmp    eax,0x1
c000367d:	0f 84 ae 00 00 00    	je     c0003731 <create_chain+0x132>
c0003683:	83 f8 ff             	cmp    eax,0xffffffff
c0003686:	0f 84 a5 00 00 00    	je     c0003731 <create_chain+0x132>
c000368c:	85 c0                	test   eax,eax
c000368e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003692:	74 10                	je     c00036a4 <create_chain+0xa5>
c0003694:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003697:	83 f8 01             	cmp    eax,0x1
c000369a:	76 0c                	jbe    c00036a8 <create_chain+0xa9>
c000369c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000369f:	0f 47 c8             	cmova  ecx,eax
c00036a2:	eb 04                	jmp    c00036a8 <create_chain+0xa9>
c00036a4:	85 f6                	test   esi,esi
c00036a6:	75 3b                	jne    c00036e3 <create_chain+0xe4>
c00036a8:	89 ce                	mov    esi,ecx
c00036aa:	46                   	inc    esi
c00036ab:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00036ae:	77 0a                	ja     c00036ba <create_chain+0xbb>
c00036b0:	83 f9 01             	cmp    ecx,0x1
c00036b3:	76 9f                	jbe    c0003654 <create_chain+0x55>
c00036b5:	be 02 00 00 00       	mov    esi,0x2
c00036ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00036c1:	89 f2                	mov    edx,esi
c00036c3:	e8 6a fd ff ff       	call   c0003432 <get_fat.isra.2>
c00036c8:	85 c0                	test   eax,eax
c00036ca:	74 17                	je     c00036e3 <create_chain+0xe4>
c00036cc:	83 f8 01             	cmp    eax,0x1
c00036cf:	74 60                	je     c0003731 <create_chain+0x132>
c00036d1:	83 f8 ff             	cmp    eax,0xffffffff
c00036d4:	74 5b                	je     c0003731 <create_chain+0x132>
c00036d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036da:	39 ce                	cmp    esi,ecx
c00036dc:	75 cc                	jne    c00036aa <create_chain+0xab>
c00036de:	e9 71 ff ff ff       	jmp    c0003654 <create_chain+0x55>
c00036e3:	83 c9 ff             	or     ecx,0xffffffff
c00036e6:	89 f2                	mov    edx,esi
c00036e8:	89 d8                	mov    eax,ebx
c00036ea:	e8 c0 f2 ff ff       	call   c00029af <put_fat>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 0f                	jne    c0003702 <create_chain+0x103>
c00036f3:	85 ff                	test   edi,edi
c00036f5:	74 0b                	je     c0003702 <create_chain+0x103>
c00036f7:	89 f1                	mov    ecx,esi
c00036f9:	89 fa                	mov    edx,edi
c00036fb:	89 d8                	mov    eax,ebx
c00036fd:	e8 ad f2 ff ff       	call   c00029af <put_fat>
c0003702:	85 c0                	test   eax,eax
c0003704:	75 21                	jne    c0003727 <create_chain+0x128>
c0003706:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003709:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000370c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000370f:	8d 57 fe             	lea    edx,[edi-0x2]
c0003712:	39 d0                	cmp    eax,edx
c0003714:	77 04                	ja     c000371a <create_chain+0x11b>
c0003716:	48                   	dec    eax
c0003717:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000371a:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000371d:	83 c8 01             	or     eax,0x1
c0003720:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003723:	89 f0                	mov    eax,esi
c0003725:	eb 0a                	jmp    c0003731 <create_chain+0x132>
c0003727:	48                   	dec    eax
c0003728:	0f 85 fc fe ff ff    	jne    c000362a <create_chain+0x2b>
c000372e:	83 c8 ff             	or     eax,0xffffffff
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <remove_chain>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 d6                	mov    esi,edx
c000373e:	53                   	push   ebx
c000373f:	83 ec 0c             	sub    esp,0xc
c0003742:	83 fa 01             	cmp    edx,0x1
c0003745:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003747:	76 6a                	jbe    c00037b3 <remove_chain+0x7a>
c0003749:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000374c:	76 65                	jbe    c00037b3 <remove_chain+0x7a>
c000374e:	85 c9                	test   ecx,ecx
c0003750:	89 c5                	mov    ebp,eax
c0003752:	89 ca                	mov    edx,ecx
c0003754:	74 0e                	je     c0003764 <remove_chain+0x2b>
c0003756:	83 c9 ff             	or     ecx,0xffffffff
c0003759:	89 d8                	mov    eax,ebx
c000375b:	e8 4f f2 ff ff       	call   c00029af <put_fat>
c0003760:	85 c0                	test   eax,eax
c0003762:	75 5b                	jne    c00037bf <remove_chain+0x86>
c0003764:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003767:	89 f2                	mov    edx,esi
c0003769:	e8 c4 fc ff ff       	call   c0003432 <get_fat.isra.2>
c000376e:	85 c0                	test   eax,eax
c0003770:	89 c7                	mov    edi,eax
c0003772:	75 04                	jne    c0003778 <remove_chain+0x3f>
c0003774:	31 c0                	xor    eax,eax
c0003776:	eb 47                	jmp    c00037bf <remove_chain+0x86>
c0003778:	83 f8 01             	cmp    eax,0x1
c000377b:	74 36                	je     c00037b3 <remove_chain+0x7a>
c000377d:	83 f8 ff             	cmp    eax,0xffffffff
c0003780:	74 38                	je     c00037ba <remove_chain+0x81>
c0003782:	31 c9                	xor    ecx,ecx
c0003784:	89 f2                	mov    edx,esi
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 22 f2 ff ff       	call   c00029af <put_fat>
c000378d:	85 c0                	test   eax,eax
c000378f:	75 2e                	jne    c00037bf <remove_chain+0x86>
c0003791:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003797:	8d 4a fe             	lea    ecx,[edx-0x2]
c000379a:	39 c8                	cmp    eax,ecx
c000379c:	73 0d                	jae    c00037ab <remove_chain+0x72>
c000379e:	40                   	inc    eax
c000379f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00037a2:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00037a5:	83 c8 01             	or     eax,0x1
c00037a8:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00037ab:	39 fa                	cmp    edx,edi
c00037ad:	89 fe                	mov    esi,edi
c00037af:	77 b3                	ja     c0003764 <remove_chain+0x2b>
c00037b1:	eb c1                	jmp    c0003774 <remove_chain+0x3b>
c00037b3:	b8 02 00 00 00       	mov    eax,0x2
c00037b8:	eb 05                	jmp    c00037bf <remove_chain+0x86>
c00037ba:	b8 01 00 00 00       	mov    eax,0x1
c00037bf:	83 c4 0c             	add    esp,0xc
c00037c2:	5b                   	pop    ebx
c00037c3:	5e                   	pop    esi
c00037c4:	5f                   	pop    edi
c00037c5:	5d                   	pop    ebp
c00037c6:	c3                   	ret    

c00037c7 <dir_next>:
c00037c7:	55                   	push   ebp
c00037c8:	57                   	push   edi
c00037c9:	56                   	push   esi
c00037ca:	53                   	push   ebx
c00037cb:	83 ec 1c             	sub    esp,0x1c
c00037ce:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037d1:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037d3:	83 c7 20             	add    edi,0x20
c00037d6:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037dc:	76 07                	jbe    c00037e5 <dir_next+0x1e>
c00037de:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037e5:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037e8:	b9 04 00 00 00       	mov    ecx,0x4
c00037ed:	85 f6                	test   esi,esi
c00037ef:	0f 84 cd 00 00 00    	je     c00038c2 <dir_next+0xfb>
c00037f5:	89 c3                	mov    ebx,eax
c00037f7:	89 f8                	mov    eax,edi
c00037f9:	25 ff 01 00 00       	and    eax,0x1ff
c00037fe:	89 d1                	mov    ecx,edx
c0003800:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003804:	0f 85 a8 00 00 00    	jne    c00038b2 <dir_next+0xeb>
c000380a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000380d:	46                   	inc    esi
c000380e:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003811:	85 d2                	test   edx,edx
c0003813:	75 22                	jne    c0003837 <dir_next+0x70>
c0003815:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003819:	89 fa                	mov    edx,edi
c000381b:	c1 ea 05             	shr    edx,0x5
c000381e:	39 c2                	cmp    edx,eax
c0003820:	0f 82 8c 00 00 00    	jb     c00038b2 <dir_next+0xeb>
c0003826:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000382d:	b9 04 00 00 00       	mov    ecx,0x4
c0003832:	e9 8b 00 00 00       	jmp    c00038c2 <dir_next+0xfb>
c0003837:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000383b:	89 fe                	mov    esi,edi
c000383d:	c1 ee 09             	shr    esi,0x9
c0003840:	48                   	dec    eax
c0003841:	85 f0                	test   eax,esi
c0003843:	75 6d                	jne    c00038b2 <dir_next+0xeb>
c0003845:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003849:	89 e8                	mov    eax,ebp
c000384b:	e8 e2 fb ff ff       	call   c0003432 <get_fat.isra.2>
c0003850:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003854:	83 f8 01             	cmp    eax,0x1
c0003857:	89 c6                	mov    esi,eax
c0003859:	77 07                	ja     c0003862 <dir_next+0x9b>
c000385b:	b9 02 00 00 00       	mov    ecx,0x2
c0003860:	eb 60                	jmp    c00038c2 <dir_next+0xfb>
c0003862:	83 f8 ff             	cmp    eax,0xffffffff
c0003865:	75 07                	jne    c000386e <dir_next+0xa7>
c0003867:	b9 01 00 00 00       	mov    ecx,0x1
c000386c:	eb 54                	jmp    c00038c2 <dir_next+0xfb>
c000386e:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003871:	77 30                	ja     c00038a3 <dir_next+0xdc>
c0003873:	85 c9                	test   ecx,ecx
c0003875:	74 af                	je     c0003826 <dir_next+0x5f>
c0003877:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000387a:	89 d8                	mov    eax,ebx
c000387c:	e8 7e fd ff ff       	call   c00035ff <create_chain>
c0003881:	b9 07 00 00 00       	mov    ecx,0x7
c0003886:	85 c0                	test   eax,eax
c0003888:	89 c6                	mov    esi,eax
c000388a:	74 36                	je     c00038c2 <dir_next+0xfb>
c000388c:	83 f8 01             	cmp    eax,0x1
c000388f:	74 ca                	je     c000385b <dir_next+0x94>
c0003891:	83 f8 ff             	cmp    eax,0xffffffff
c0003894:	74 d1                	je     c0003867 <dir_next+0xa0>
c0003896:	89 c2                	mov    edx,eax
c0003898:	89 e8                	mov    eax,ebp
c000389a:	e8 67 f2 ff ff       	call   c0002b06 <dir_clear>
c000389f:	85 c0                	test   eax,eax
c00038a1:	75 c4                	jne    c0003867 <dir_next+0xa0>
c00038a3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00038a6:	89 f2                	mov    edx,esi
c00038a8:	89 e8                	mov    eax,ebp
c00038aa:	e8 97 e9 ff ff       	call   c0002246 <clst2sect>
c00038af:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00038b2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00038b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00038b9:	31 c9                	xor    ecx,ecx
c00038bb:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00038bf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00038c2:	83 c4 1c             	add    esp,0x1c
c00038c5:	89 c8                	mov    eax,ecx
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	5d                   	pop    ebp
c00038cb:	c3                   	ret    

c00038cc <dir_alloc>:
c00038cc:	55                   	push   ebp
c00038cd:	89 c5                	mov    ebp,eax
c00038cf:	57                   	push   edi
c00038d0:	89 d7                	mov    edi,edx
c00038d2:	56                   	push   esi
c00038d3:	31 d2                	xor    edx,edx
c00038d5:	53                   	push   ebx
c00038d6:	83 ec 0c             	sub    esp,0xc
c00038d9:	8b 30                	mov    esi,DWORD PTR [eax]
c00038db:	e8 57 fc ff ff       	call   c0003537 <dir_sdi>
c00038e0:	85 c0                	test   eax,eax
c00038e2:	75 3b                	jne    c000391f <dir_alloc+0x53>
c00038e4:	31 db                	xor    ebx,ebx
c00038e6:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038e9:	89 f0                	mov    eax,esi
c00038eb:	e8 65 ec ff ff       	call   c0002555 <move_window>
c00038f0:	85 c0                	test   eax,eax
c00038f2:	75 2b                	jne    c000391f <dir_alloc+0x53>
c00038f4:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038f7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038fa:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003900:	74 04                	je     c0003906 <dir_alloc+0x3a>
c0003902:	85 d2                	test   edx,edx
c0003904:	75 07                	jne    c000390d <dir_alloc+0x41>
c0003906:	43                   	inc    ebx
c0003907:	39 fb                	cmp    ebx,edi
c0003909:	75 04                	jne    c000390f <dir_alloc+0x43>
c000390b:	eb 1c                	jmp    c0003929 <dir_alloc+0x5d>
c000390d:	31 db                	xor    ebx,ebx
c000390f:	ba 01 00 00 00       	mov    edx,0x1
c0003914:	89 e8                	mov    eax,ebp
c0003916:	e8 ac fe ff ff       	call   c00037c7 <dir_next>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c7                	je     c00038e6 <dir_alloc+0x1a>
c000391f:	83 f8 04             	cmp    eax,0x4
c0003922:	75 05                	jne    c0003929 <dir_alloc+0x5d>
c0003924:	b8 07 00 00 00       	mov    eax,0x7
c0003929:	83 c4 0c             	add    esp,0xc
c000392c:	5b                   	pop    ebx
c000392d:	5e                   	pop    esi
c000392e:	5f                   	pop    edi
c000392f:	5d                   	pop    ebp
c0003930:	c3                   	ret    

c0003931 <dir_read>:
c0003931:	55                   	push   ebp
c0003932:	57                   	push   edi
c0003933:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003938:	56                   	push   esi
c0003939:	be 04 00 00 00       	mov    esi,0x4
c000393e:	53                   	push   ebx
c000393f:	89 c3                	mov    ebx,eax
c0003941:	83 ec 1c             	sub    esp,0x1c
c0003944:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003948:	8b 28                	mov    ebp,DWORD PTR [eax]
c000394a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000394f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003952:	85 d2                	test   edx,edx
c0003954:	0f 84 e3 00 00 00    	je     c0003a3d <dir_read+0x10c>
c000395a:	89 e8                	mov    eax,ebp
c000395c:	e8 f4 eb ff ff       	call   c0002555 <move_window>
c0003961:	85 c0                	test   eax,eax
c0003963:	89 c6                	mov    esi,eax
c0003965:	0f 85 dd 00 00 00    	jne    c0003a48 <dir_read+0x117>
c000396b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000396e:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003971:	88 04 24             	mov    BYTE PTR [esp],al
c0003974:	85 c0                	test   eax,eax
c0003976:	0f 84 c7 00 00 00    	je     c0003a43 <dir_read+0x112>
c000397c:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000397f:	83 e1 3f             	and    ecx,0x3f
c0003982:	3d e5 00 00 00       	cmp    eax,0xe5
c0003987:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000398a:	0f 84 93 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003990:	83 f8 2e             	cmp    eax,0x2e
c0003993:	0f 84 8a 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003999:	0f b6 c9             	movzx  ecx,cl
c000399c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00039a0:	83 e1 df             	and    ecx,0xffffffdf
c00039a3:	83 f9 08             	cmp    ecx,0x8
c00039a6:	0f 94 c1             	sete   cl
c00039a9:	0f b6 c9             	movzx  ecx,cl
c00039ac:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00039b0:	75 71                	jne    c0003a23 <dir_read+0xf2>
c00039b2:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00039b7:	75 4a                	jne    c0003a03 <dir_read+0xd2>
c00039b9:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00039bd:	74 16                	je     c00039d5 <dir_read+0xa4>
c00039bf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039c2:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00039c9:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039d0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039d3:	eb 0e                	jmp    c00039e3 <dir_read+0xb2>
c00039d5:	89 f9                	mov    ecx,edi
c00039d7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039dc:	0f b6 c9             	movzx  ecx,cl
c00039df:	39 c1                	cmp    ecx,eax
c00039e1:	75 45                	jne    c0003a28 <dir_read+0xf7>
c00039e3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039e7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ec:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039ef:	75 37                	jne    c0003a28 <dir_read+0xf7>
c00039f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039f4:	e8 6a e8 ff ff       	call   c0002263 <pick_lfn>
c00039f9:	85 c0                	test   eax,eax
c00039fb:	74 2b                	je     c0003a28 <dir_read+0xf7>
c00039fd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003a00:	4f                   	dec    edi
c0003a01:	eb 25                	jmp    c0003a28 <dir_read+0xf7>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	84 c0                	test   al,al
c0003a07:	75 11                	jne    c0003a1a <dir_read+0xe9>
c0003a09:	89 d0                	mov    eax,edx
c0003a0b:	e8 30 ea ff ff       	call   c0002440 <sum_sfn>
c0003a10:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003a14:	75 04                	jne    c0003a1a <dir_read+0xe9>
c0003a16:	31 f6                	xor    esi,esi
c0003a18:	eb 35                	jmp    c0003a4f <dir_read+0x11e>
c0003a1a:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a21:	eb 2c                	jmp    c0003a4f <dir_read+0x11e>
c0003a23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a28:	31 d2                	xor    edx,edx
c0003a2a:	89 d8                	mov    eax,ebx
c0003a2c:	e8 96 fd ff ff       	call   c00037c7 <dir_next>
c0003a31:	85 c0                	test   eax,eax
c0003a33:	89 c6                	mov    esi,eax
c0003a35:	0f 84 14 ff ff ff    	je     c000394f <dir_read+0x1e>
c0003a3b:	eb 0b                	jmp    c0003a48 <dir_read+0x117>
c0003a3d:	85 f6                	test   esi,esi
c0003a3f:	74 d5                	je     c0003a16 <dir_read+0xe5>
c0003a41:	eb 05                	jmp    c0003a48 <dir_read+0x117>
c0003a43:	be 04 00 00 00       	mov    esi,0x4
c0003a48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a4f:	83 c4 1c             	add    esp,0x1c
c0003a52:	89 f0                	mov    eax,esi
c0003a54:	5b                   	pop    ebx
c0003a55:	5e                   	pop    esi
c0003a56:	5f                   	pop    edi
c0003a57:	5d                   	pop    ebp
c0003a58:	c3                   	ret    

c0003a59 <dir_remove>:
c0003a59:	57                   	push   edi
c0003a5a:	56                   	push   esi
c0003a5b:	53                   	push   ebx
c0003a5c:	89 c3                	mov    ebx,eax
c0003a5e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a61:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a63:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a66:	83 fa ff             	cmp    edx,0xffffffff
c0003a69:	74 09                	je     c0003a74 <dir_remove+0x1b>
c0003a6b:	e8 c7 fa ff ff       	call   c0003537 <dir_sdi>
c0003a70:	85 c0                	test   eax,eax
c0003a72:	75 34                	jne    c0003aa8 <dir_remove+0x4f>
c0003a74:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a77:	89 f0                	mov    eax,esi
c0003a79:	e8 d7 ea ff ff       	call   c0002555 <move_window>
c0003a7e:	85 c0                	test   eax,eax
c0003a80:	75 1c                	jne    c0003a9e <dir_remove+0x45>
c0003a82:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a8c:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a8f:	73 17                	jae    c0003aa8 <dir_remove+0x4f>
c0003a91:	31 d2                	xor    edx,edx
c0003a93:	89 d8                	mov    eax,ebx
c0003a95:	e8 2d fd ff ff       	call   c00037c7 <dir_next>
c0003a9a:	85 c0                	test   eax,eax
c0003a9c:	74 d6                	je     c0003a74 <dir_remove+0x1b>
c0003a9e:	83 f8 04             	cmp    eax,0x4
c0003aa1:	75 05                	jne    c0003aa8 <dir_remove+0x4f>
c0003aa3:	b8 02 00 00 00       	mov    eax,0x2
c0003aa8:	5b                   	pop    ebx
c0003aa9:	5e                   	pop    esi
c0003aaa:	5f                   	pop    edi
c0003aab:	c3                   	ret    

c0003aac <dir_find>:
c0003aac:	55                   	push   ebp
c0003aad:	31 d2                	xor    edx,edx
c0003aaf:	57                   	push   edi
c0003ab0:	56                   	push   esi
c0003ab1:	53                   	push   ebx
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 ec 1c             	sub    esp,0x1c
c0003ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003abd:	89 d8                	mov    eax,ebx
c0003abf:	e8 73 fa ff ff       	call   c0003537 <dir_sdi>
c0003ac4:	85 c0                	test   eax,eax
c0003ac6:	89 c6                	mov    esi,eax
c0003ac8:	0f 85 22 01 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003ace:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003ad5:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003ada:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003adf:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ae6:	e8 6a ea ff ff       	call   c0002555 <move_window>
c0003aeb:	85 c0                	test   eax,eax
c0003aed:	89 c6                	mov    esi,eax
c0003aef:	0f 85 fb 00 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003af5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003af8:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003afb:	85 d2                	test   edx,edx
c0003afd:	89 d1                	mov    ecx,edx
c0003aff:	0f 84 e6 00 00 00    	je     c0003beb <dir_find+0x13f>
c0003b05:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003b08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b10:	83 e0 3f             	and    eax,0x3f
c0003b13:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003b19:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003b1c:	0f 84 a8 00 00 00    	je     c0003bca <dir_find+0x11e>
c0003b22:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003b27:	0f b6 c0             	movzx  eax,al
c0003b2a:	74 0b                	je     c0003b37 <dir_find+0x8b>
c0003b2c:	83 f8 0f             	cmp    eax,0xf
c0003b2f:	0f 85 95 00 00 00    	jne    c0003bca <dir_find+0x11e>
c0003b35:	eb 05                	jmp    c0003b3c <dir_find+0x90>
c0003b37:	83 f8 0f             	cmp    eax,0xf
c0003b3a:	75 62                	jne    c0003b9e <dir_find+0xf2>
c0003b3c:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b40:	0f 85 90 00 00 00    	jne    c0003bd6 <dir_find+0x12a>
c0003b46:	f6 c1 40             	test   cl,0x40
c0003b49:	74 15                	je     c0003b60 <dir_find+0xb4>
c0003b4b:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003b4e:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003b54:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003b58:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b5b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b5e:	eb 11                	jmp    c0003b71 <dir_find+0xc5>
c0003b60:	89 e8                	mov    eax,ebp
c0003b62:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b67:	0f b6 d0             	movzx  edx,al
c0003b6a:	0f b6 c1             	movzx  eax,cl
c0003b6d:	39 c2                	cmp    edx,eax
c0003b6f:	75 65                	jne    c0003bd6 <dir_find+0x12a>
c0003b71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b75:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b7a:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003b7d:	75 57                	jne    c0003bd6 <dir_find+0x12a>
c0003b7f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	89 fa                	mov    edx,edi
c0003b89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b8c:	e8 2c f3 ff ff       	call   c0002ebd <cmp_lfn>
c0003b91:	85 c0                	test   eax,eax
c0003b93:	74 41                	je     c0003bd6 <dir_find+0x12a>
c0003b95:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b99:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003b9c:	eb 38                	jmp    c0003bd6 <dir_find+0x12a>
c0003b9e:	89 e8                	mov    eax,ebp
c0003ba0:	84 c0                	test   al,al
c0003ba2:	75 0d                	jne    c0003bb1 <dir_find+0x105>
c0003ba4:	89 f8                	mov    eax,edi
c0003ba6:	e8 95 e8 ff ff       	call   c0002440 <sum_sfn>
c0003bab:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003baf:	74 3f                	je     c0003bf0 <dir_find+0x144>
c0003bb1:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003bb5:	75 13                	jne    c0003bca <dir_find+0x11e>
c0003bb7:	8d 53 20             	lea    edx,[ebx+0x20]
c0003bba:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bbf:	89 f8                	mov    eax,edi
c0003bc1:	e8 75 e4 ff ff       	call   c000203b <mem_cmp>
c0003bc6:	85 c0                	test   eax,eax
c0003bc8:	74 26                	je     c0003bf0 <dir_find+0x144>
c0003bca:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003bd1:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003bd6:	31 d2                	xor    edx,edx
c0003bd8:	89 d8                	mov    eax,ebx
c0003bda:	e8 e8 fb ff ff       	call   c00037c7 <dir_next>
c0003bdf:	85 c0                	test   eax,eax
c0003be1:	89 c6                	mov    esi,eax
c0003be3:	0f 84 f6 fe ff ff    	je     c0003adf <dir_find+0x33>
c0003be9:	eb 05                	jmp    c0003bf0 <dir_find+0x144>
c0003beb:	be 04 00 00 00       	mov    esi,0x4
c0003bf0:	83 c4 1c             	add    esp,0x1c
c0003bf3:	89 f0                	mov    eax,esi
c0003bf5:	5b                   	pop    ebx
c0003bf6:	5e                   	pop    esi
c0003bf7:	5f                   	pop    edi
c0003bf8:	5d                   	pop    ebp
c0003bf9:	c3                   	ret    

c0003bfa <follow_path>:
c0003bfa:	56                   	push   esi
c0003bfb:	53                   	push   ebx
c0003bfc:	89 c3                	mov    ebx,eax
c0003bfe:	83 ec 14             	sub    esp,0x14
c0003c01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003c05:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c0b:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003c0e:	83 fa 2f             	cmp    edx,0x2f
c0003c11:	75 07                	jne    c0003c1a <follow_path+0x20>
c0003c13:	40                   	inc    eax
c0003c14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c18:	eb ed                	jmp    c0003c07 <follow_path+0xd>
c0003c1a:	83 fa 5c             	cmp    edx,0x5c
c0003c1d:	74 f4                	je     c0003c13 <follow_path+0x19>
c0003c1f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003c26:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003c29:	77 3e                	ja     c0003c69 <follow_path+0x6f>
c0003c2b:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003c2f:	31 d2                	xor    edx,edx
c0003c31:	89 d8                	mov    eax,ebx
c0003c33:	e8 ff f8 ff ff       	call   c0003537 <dir_sdi>
c0003c38:	eb 57                	jmp    c0003c91 <follow_path+0x97>
c0003c3a:	89 d8                	mov    eax,ebx
c0003c3c:	e8 6b fe ff ff       	call   c0003aac <dir_find>
c0003c41:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c44:	85 c0                	test   eax,eax
c0003c46:	75 32                	jne    c0003c7a <follow_path+0x80>
c0003c48:	80 e2 04             	and    dl,0x4
c0003c4b:	75 44                	jne    c0003c91 <follow_path+0x97>
c0003c4d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c51:	74 39                	je     c0003c8c <follow_path+0x92>
c0003c53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c56:	25 ff 01 00 00       	and    eax,0x1ff
c0003c5b:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c5f:	8a 06                	mov    al,BYTE PTR [esi]
c0003c61:	e8 7b f7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003c66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c69:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c6d:	89 d8                	mov    eax,ebx
c0003c6f:	e8 8e ef ff ff       	call   c0002c02 <create_name>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 c2                	je     c0003c3a <follow_path+0x40>
c0003c78:	eb 17                	jmp    c0003c91 <follow_path+0x97>
c0003c7a:	83 f8 04             	cmp    eax,0x4
c0003c7d:	75 12                	jne    c0003c91 <follow_path+0x97>
c0003c7f:	80 e2 04             	and    dl,0x4
c0003c82:	ba 05 00 00 00       	mov    edx,0x5
c0003c87:	0f 44 c2             	cmove  eax,edx
c0003c8a:	eb 05                	jmp    c0003c91 <follow_path+0x97>
c0003c8c:	b8 05 00 00 00       	mov    eax,0x5
c0003c91:	83 c4 14             	add    esp,0x14
c0003c94:	5b                   	pop    ebx
c0003c95:	5e                   	pop    esi
c0003c96:	c3                   	ret    

c0003c97 <dir_register>:
c0003c97:	55                   	push   ebp
c0003c98:	57                   	push   edi
c0003c99:	56                   	push   esi
c0003c9a:	be 06 00 00 00       	mov    esi,0x6
c0003c9f:	53                   	push   ebx
c0003ca0:	83 ec 2c             	sub    esp,0x2c
c0003ca3:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ca6:	80 e2 a0             	and    dl,0xa0
c0003ca9:	0f 85 66 01 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003caf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003cb7:	8b 38                	mov    edi,DWORD PTR [eax]
c0003cb9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003cbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cc0:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003cc5:	74 06                	je     c0003ccd <dir_register+0x36>
c0003cc7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003ccb:	eb ef                	jmp    c0003cbc <dir_register+0x25>
c0003ccd:	89 c3                	mov    ebx,eax
c0003ccf:	b9 0c 00 00 00       	mov    ecx,0xc
c0003cd4:	8d 40 20             	lea    eax,[eax+0x20]
c0003cd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003cdb:	89 c2                	mov    edx,eax
c0003cdd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ce1:	e8 36 e3 ff ff       	call   c000201c <mem_cpy>
c0003ce6:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ceb:	74 48                	je     c0003d35 <dir_register+0x9e>
c0003ced:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cf1:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf6:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cf9:	55                   	push   ebp
c0003cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cfe:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003d02:	e8 77 e6 ff ff       	call   c000237e <gen_numname>
c0003d07:	58                   	pop    eax
c0003d08:	89 d8                	mov    eax,ebx
c0003d0a:	e8 9d fd ff ff       	call   c0003aac <dir_find>
c0003d0f:	85 c0                	test   eax,eax
c0003d11:	89 c6                	mov    esi,eax
c0003d13:	75 10                	jne    c0003d25 <dir_register+0x8e>
c0003d15:	45                   	inc    ebp
c0003d16:	83 fd 64             	cmp    ebp,0x64
c0003d19:	75 db                	jne    c0003cf6 <dir_register+0x5f>
c0003d1b:	be 07 00 00 00       	mov    esi,0x7
c0003d20:	e9 f0 00 00 00       	jmp    c0003e15 <dir_register+0x17e>
c0003d25:	83 f8 04             	cmp    eax,0x4
c0003d28:	0f 85 e7 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d2e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003d32:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003d35:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d3a:	bd 01 00 00 00       	mov    ebp,0x1
c0003d3f:	74 13                	je     c0003d54 <dir_register+0xbd>
c0003d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d45:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d4a:	31 d2                	xor    edx,edx
c0003d4c:	83 c0 0c             	add    eax,0xc
c0003d4f:	f7 f1                	div    ecx
c0003d51:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d54:	89 ea                	mov    edx,ebp
c0003d56:	89 d8                	mov    eax,ebx
c0003d58:	e8 6f fb ff ff       	call   c00038cc <dir_alloc>
c0003d5d:	85 c0                	test   eax,eax
c0003d5f:	89 c6                	mov    esi,eax
c0003d61:	0f 85 ae 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d67:	4d                   	dec    ebp
c0003d68:	74 6b                	je     c0003dd5 <dir_register+0x13e>
c0003d6a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d6d:	89 e8                	mov    eax,ebp
c0003d6f:	c1 e0 05             	shl    eax,0x5
c0003d72:	29 c2                	sub    edx,eax
c0003d74:	89 d8                	mov    eax,ebx
c0003d76:	e8 bc f7 ff ff       	call   c0003537 <dir_sdi>
c0003d7b:	85 c0                	test   eax,eax
c0003d7d:	89 c6                	mov    esi,eax
c0003d7f:	0f 85 90 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d89:	e8 b2 e6 ff ff       	call   c0002440 <sum_sfn>
c0003d8e:	0f b6 c0             	movzx  eax,al
c0003d91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d95:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d98:	89 f8                	mov    eax,edi
c0003d9a:	e8 b6 e7 ff ff       	call   c0002555 <move_window>
c0003d9f:	85 c0                	test   eax,eax
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	75 70                	jne    c0003e15 <dir_register+0x17e>
c0003da5:	83 ec 0c             	sub    esp,0xc
c0003da8:	89 e8                	mov    eax,ebp
c0003daa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dad:	0f b6 c8             	movzx  ecx,al
c0003db0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003db3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003db7:	e8 27 e5 ff ff       	call   c00022e3 <put_lfn>
c0003dbc:	31 d2                	xor    edx,edx
c0003dbe:	89 d8                	mov    eax,ebx
c0003dc0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dc4:	e8 fe f9 ff ff       	call   c00037c7 <dir_next>
c0003dc9:	83 c4 10             	add    esp,0x10
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	89 c6                	mov    esi,eax
c0003dd0:	75 43                	jne    c0003e15 <dir_register+0x17e>
c0003dd2:	4d                   	dec    ebp
c0003dd3:	75 c0                	jne    c0003d95 <dir_register+0xfe>
c0003dd5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003dd8:	89 f8                	mov    eax,edi
c0003dda:	e8 76 e7 ff ff       	call   c0002555 <move_window>
c0003ddf:	85 c0                	test   eax,eax
c0003de1:	89 c6                	mov    esi,eax
c0003de3:	75 30                	jne    c0003e15 <dir_register+0x17e>
c0003de5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003de8:	b9 20 00 00 00       	mov    ecx,0x20
c0003ded:	31 d2                	xor    edx,edx
c0003def:	e8 3d e2 ff ff       	call   c0002031 <mem_set>
c0003df4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e00:	e8 17 e2 ff ff       	call   c000201c <mem_cpy>
c0003e05:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003e08:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003e0b:	83 e0 18             	and    eax,0x18
c0003e0e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003e11:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003e15:	83 c4 2c             	add    esp,0x2c
c0003e18:	89 f0                	mov    eax,esi
c0003e1a:	5b                   	pop    ebx
c0003e1b:	5e                   	pop    esi
c0003e1c:	5f                   	pop    edi
c0003e1d:	5d                   	pop    ebp
c0003e1e:	c3                   	ret    

c0003e1f <f_mount>:
c0003e1f:	53                   	push   ebx
c0003e20:	83 ec 18             	sub    esp,0x18
c0003e23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003e27:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003e2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003e2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003e33:	e8 28 e6 ff ff       	call   c0002460 <get_ldnumber>
c0003e38:	89 c2                	mov    edx,eax
c0003e3a:	b8 0b 00 00 00       	mov    eax,0xb
c0003e3f:	85 d2                	test   edx,edx
c0003e41:	78 39                	js     c0003e7c <f_mount+0x5d>
c0003e43:	8b 04 95 a0 84 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7b60]
c0003e4a:	85 c0                	test   eax,eax
c0003e4c:	74 03                	je     c0003e51 <f_mount+0x32>
c0003e4e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e55:	85 c0                	test   eax,eax
c0003e57:	74 03                	je     c0003e5c <f_mount+0x3d>
c0003e59:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e60:	89 04 95 a0 84 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7b60],eax
c0003e67:	31 c0                	xor    eax,eax
c0003e69:	84 db                	test   bl,bl
c0003e6b:	74 0f                	je     c0003e7c <f_mount+0x5d>
c0003e6d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e71:	31 c9                	xor    ecx,ecx
c0003e73:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e77:	e8 36 e8 ff ff       	call   c00026b2 <mount_volume>
c0003e7c:	83 c4 18             	add    esp,0x18
c0003e7f:	5b                   	pop    ebx
c0003e80:	c3                   	ret    

c0003e81 <f_open>:
c0003e81:	55                   	push   ebp
c0003e82:	b8 09 00 00 00       	mov    eax,0x9
c0003e87:	57                   	push   edi
c0003e88:	56                   	push   esi
c0003e89:	53                   	push   ebx
c0003e8a:	83 ec 5c             	sub    esp,0x5c
c0003e8d:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e95:	85 db                	test   ebx,ebx
c0003e97:	0f 84 9f 02 00 00    	je     c000413c <f_open+0x2bb>
c0003e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ea1:	89 fd                	mov    ebp,edi
c0003ea3:	83 e5 3f             	and    ebp,0x3f
c0003ea6:	89 e8                	mov    eax,ebp
c0003ea8:	89 ee                	mov    esi,ebp
c0003eaa:	0f b6 c8             	movzx  ecx,al
c0003ead:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003eb1:	e8 fc e7 ff ff       	call   c00026b2 <mount_volume>
c0003eb6:	85 c0                	test   eax,eax
c0003eb8:	0f 85 78 02 00 00    	jne    c0004136 <f_open+0x2b5>
c0003ebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec2:	83 ec 0c             	sub    esp,0xc
c0003ec5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ec9:	68 00 02 00 00       	push   0x200
c0003ece:	e8 61 1f 00 00       	call   c0005e34 <ff_memalloc>
c0003ed3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ed7:	83 c4 10             	add    esp,0x10
c0003eda:	b8 11 00 00 00       	mov    eax,0x11
c0003edf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ee4:	0f 84 52 02 00 00    	je     c000413c <f_open+0x2bb>
c0003eea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ef2:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ef6:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ef9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003efd:	e8 f8 fc ff ff       	call   c0003bfa <follow_path>
c0003f02:	85 c0                	test   eax,eax
c0003f04:	75 0d                	jne    c0003f13 <f_open+0x92>
c0003f06:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003f0b:	ba 06 00 00 00       	mov    edx,0x6
c0003f10:	0f 45 c2             	cmovne eax,edx
c0003f13:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003f19:	0f 84 d5 00 00 00    	je     c0003ff4 <f_open+0x173>
c0003f1f:	85 c0                	test   eax,eax
c0003f21:	74 21                	je     c0003f44 <f_open+0xc3>
c0003f23:	83 f8 04             	cmp    eax,0x4
c0003f26:	0f 85 ef 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f30:	e8 62 fd ff ff       	call   c0003c97 <dir_register>
c0003f35:	85 c0                	test   eax,eax
c0003f37:	0f 85 de 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f3d:	83 cd 08             	or     ebp,0x8
c0003f40:	89 ee                	mov    esi,ebp
c0003f42:	eb 2c                	jmp    c0003f70 <f_open+0xef>
c0003f44:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f48:	b8 07 00 00 00       	mov    eax,0x7
c0003f4d:	80 e2 11             	and    dl,0x11
c0003f50:	0f 85 c5 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f56:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f5c:	b8 08 00 00 00       	mov    eax,0x8
c0003f61:	0f 85 b4 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f67:	83 e7 08             	and    edi,0x8
c0003f6a:	0f 84 b1 00 00 00    	je     c0004021 <f_open+0x1a0>
c0003f70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f74:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f78:	8a 00                	mov    al,BYTE PTR [eax]
c0003f7a:	89 ea                	mov    edx,ebp
c0003f7c:	e8 60 f4 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003f81:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f86:	89 c7                	mov    edi,eax
c0003f88:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f8b:	e8 89 e0 ff ff       	call   c0002019 <st_dword>
c0003f90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f94:	31 c9                	xor    ecx,ecx
c0003f96:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003fa2:	e8 63 f4 ff ff       	call   c000340a <st_clust.isra.1>
c0003fa7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003fab:	31 d2                	xor    edx,edx
c0003fad:	83 c0 1c             	add    eax,0x1c
c0003fb0:	e8 64 e0 ff ff       	call   c0002019 <st_dword>
c0003fb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fb9:	85 ff                	test   edi,edi
c0003fbb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003fbf:	74 60                	je     c0004021 <f_open+0x1a0>
c0003fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fc5:	31 c9                	xor    ecx,ecx
c0003fc7:	89 fa                	mov    edx,edi
c0003fc9:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003fcc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003fd0:	e8 64 f7 ff ff       	call   c0003739 <remove_chain>
c0003fd5:	85 c0                	test   eax,eax
c0003fd7:	0f 85 3e 01 00 00    	jne    c000411b <f_open+0x29a>
c0003fdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fe1:	89 ea                	mov    edx,ebp
c0003fe3:	4f                   	dec    edi
c0003fe4:	e8 6c e5 ff ff       	call   c0002555 <move_window>
c0003fe9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fed:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ff0:	85 c0                	test   eax,eax
c0003ff2:	eb 27                	jmp    c000401b <f_open+0x19a>
c0003ff4:	85 c0                	test   eax,eax
c0003ff6:	0f 85 1f 01 00 00    	jne    c000411b <f_open+0x29a>
c0003ffc:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004000:	b8 04 00 00 00       	mov    eax,0x4
c0004005:	f6 c2 10             	test   dl,0x10
c0004008:	0f 85 0d 01 00 00    	jne    c000411b <f_open+0x29a>
c000400e:	83 e7 02             	and    edi,0x2
c0004011:	74 0e                	je     c0004021 <f_open+0x1a0>
c0004013:	b8 07 00 00 00       	mov    eax,0x7
c0004018:	80 e2 01             	and    dl,0x1
c000401b:	0f 85 fa 00 00 00    	jne    c000411b <f_open+0x29a>
c0004021:	f7 c6 08 00 00 00    	test   esi,0x8
c0004027:	74 03                	je     c000402c <f_open+0x1ab>
c0004029:	83 ce 40             	or     esi,0x40
c000402c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004030:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004034:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0004037:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000403a:	89 fa                	mov    edx,edi
c000403c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000403f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004042:	e8 9a f3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004047:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000404a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000404d:	e8 ab df ff ff       	call   c0001ffd <ld_dword>
c0004052:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004055:	31 d2                	xor    edx,edx
c0004057:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004059:	b9 00 02 00 00       	mov    ecx,0x200
c000405e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004061:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004065:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004069:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004070:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004077:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000407b:	89 f0                	mov    eax,esi
c000407d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004080:	89 f8                	mov    eax,edi
c0004082:	e8 aa df ff ff       	call   c0002031 <mem_set>
c0004087:	83 e6 20             	and    esi,0x20
c000408a:	75 07                	jne    c0004093 <f_open+0x212>
c000408c:	31 c0                	xor    eax,eax
c000408e:	e9 88 00 00 00       	jmp    c000411b <f_open+0x29a>
c0004093:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0004096:	85 f6                	test   esi,esi
c0004098:	74 f2                	je     c000408c <f_open+0x20b>
c000409a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000409d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040a1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00040a4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00040a8:	31 c0                	xor    eax,eax
c00040aa:	c1 e5 09             	shl    ebp,0x9
c00040ad:	85 c0                	test   eax,eax
c00040af:	75 23                	jne    c00040d4 <f_open+0x253>
c00040b1:	39 ee                	cmp    esi,ebp
c00040b3:	76 1f                	jbe    c00040d4 <f_open+0x253>
c00040b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040b7:	e8 76 f3 ff ff       	call   c0003432 <get_fat.isra.2>
c00040bc:	89 c2                	mov    edx,eax
c00040be:	b8 02 00 00 00       	mov    eax,0x2
c00040c3:	83 fa 01             	cmp    edx,0x1
c00040c6:	76 08                	jbe    c00040d0 <f_open+0x24f>
c00040c8:	31 c0                	xor    eax,eax
c00040ca:	83 fa ff             	cmp    edx,0xffffffff
c00040cd:	0f 94 c0             	sete   al
c00040d0:	29 ee                	sub    esi,ebp
c00040d2:	eb d9                	jmp    c00040ad <f_open+0x22c>
c00040d4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00040d7:	85 c0                	test   eax,eax
c00040d9:	75 40                	jne    c000411b <f_open+0x29a>
c00040db:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00040e1:	74 a9                	je     c000408c <f_open+0x20b>
c00040e3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00040e7:	89 e8                	mov    eax,ebp
c00040e9:	e8 58 e1 ff ff       	call   c0002246 <clst2sect>
c00040ee:	89 c2                	mov    edx,eax
c00040f0:	b8 02 00 00 00       	mov    eax,0x2
c00040f5:	85 d2                	test   edx,edx
c00040f7:	74 22                	je     c000411b <f_open+0x29a>
c00040f9:	c1 ee 09             	shr    esi,0x9
c00040fc:	8d 04 16             	lea    eax,[esi+edx*1]
c00040ff:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004102:	6a 01                	push   0x1
c0004104:	50                   	push   eax
c0004105:	57                   	push   edi
c0004106:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000410a:	50                   	push   eax
c000410b:	e8 95 de ff ff       	call   c0001fa5 <disk_read>
c0004110:	83 c4 10             	add    esp,0x10
c0004113:	85 c0                	test   eax,eax
c0004115:	0f 95 c0             	setne  al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000411f:	83 ec 0c             	sub    esp,0xc
c0004122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0004126:	e8 21 1d 00 00       	call   c0005e4c <ff_memfree>
c000412b:	83 c4 10             	add    esp,0x10
c000412e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004132:	85 c0                	test   eax,eax
c0004134:	74 06                	je     c000413c <f_open+0x2bb>
c0004136:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000413c:	83 c4 5c             	add    esp,0x5c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_read>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000415b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004161:	89 d8                	mov    eax,ebx
c0004163:	e8 44 e3 ff ff       	call   c00024ac <validate>
c0004168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000416c:	85 c0                	test   eax,eax
c000416e:	0f 85 a5 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004174:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0004178:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000417c:	85 c0                	test   eax,eax
c000417e:	0f 85 95 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004184:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004188:	0f 84 83 01 00 00    	je     c0004311 <f_read+0x1cd>
c000418e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004191:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004194:	39 f8                	cmp    eax,edi
c0004196:	0f 46 f8             	cmovbe edi,eax
c0004199:	85 ff                	test   edi,edi
c000419b:	0f 84 78 01 00 00    	je     c0004319 <f_read+0x1d5>
c00041a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a4:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a9:	0f 85 2b 01 00 00    	jne    c00042da <f_read+0x196>
c00041af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b3:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b7:	89 c2                	mov    edx,eax
c00041b9:	c1 ea 09             	shr    edx,0x9
c00041bc:	4d                   	dec    ebp
c00041bd:	21 d5                	and    ebp,edx
c00041bf:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c3:	75 42                	jne    c0004207 <f_read+0xc3>
c00041c5:	85 c0                	test   eax,eax
c00041c7:	75 05                	jne    c00041ce <f_read+0x8a>
c00041c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041cc:	eb 0a                	jmp    c00041d8 <f_read+0x94>
c00041ce:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d3:	e8 5a f2 ff ff       	call   c0003432 <get_fat.isra.2>
c00041d8:	83 f8 01             	cmp    eax,0x1
c00041db:	77 11                	ja     c00041ee <f_read+0xaa>
c00041dd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041e1:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c00041e9:	e9 2b 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c00041ee:	83 f8 ff             	cmp    eax,0xffffffff
c00041f1:	75 11                	jne    c0004204 <f_read+0xc0>
c00041f3:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041f7:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00041ff:	e9 15 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c0004204:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000420b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000420e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004212:	89 c8                	mov    eax,ecx
c0004214:	e8 2d e0 ff ff       	call   c0002246 <clst2sect>
c0004219:	85 c0                	test   eax,eax
c000421b:	74 c0                	je     c00041dd <f_read+0x99>
c000421d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004221:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004227:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000422a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000422e:	76 58                	jbe    c0004288 <f_read+0x144>
c0004230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004234:	89 fe                	mov    esi,edi
c0004236:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000423a:	c1 ee 09             	shr    esi,0x9
c000423d:	01 f2                	add    edx,esi
c000423f:	39 c2                	cmp    edx,eax
c0004241:	76 06                	jbe    c0004249 <f_read+0x105>
c0004243:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004247:	89 c6                	mov    esi,eax
c0004249:	56                   	push   esi
c000424a:	55                   	push   ebp
c000424b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000424f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004253:	50                   	push   eax
c0004254:	e8 4c dd ff ff       	call   c0001fa5 <disk_read>
c0004259:	83 c4 10             	add    esp,0x10
c000425c:	85 c0                	test   eax,eax
c000425e:	75 93                	jne    c00041f3 <f_read+0xaf>
c0004260:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004264:	74 1d                	je     c0004283 <f_read+0x13f>
c0004266:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004269:	29 e8                	sub    eax,ebp
c000426b:	39 f0                	cmp    eax,esi
c000426d:	73 14                	jae    c0004283 <f_read+0x13f>
c000426f:	c1 e0 09             	shl    eax,0x9
c0004272:	b9 00 02 00 00       	mov    ecx,0x200
c0004277:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000427b:	8d 53 28             	lea    edx,[ebx+0x28]
c000427e:	e8 99 dd ff ff       	call   c000201c <mem_cpy>
c0004283:	c1 e6 09             	shl    esi,0x9
c0004286:	eb 75                	jmp    c00042fd <f_read+0x1b9>
c0004288:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000428b:	39 e8                	cmp    eax,ebp
c000428d:	74 48                	je     c00042d7 <f_read+0x193>
c000428f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004293:	8d 73 28             	lea    esi,[ebx+0x28]
c0004296:	74 22                	je     c00042ba <f_read+0x176>
c0004298:	6a 01                	push   0x1
c000429a:	50                   	push   eax
c000429b:	56                   	push   esi
c000429c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042a0:	50                   	push   eax
c00042a1:	e8 15 dd ff ff       	call   c0001fbb <disk_write>
c00042a6:	83 c4 10             	add    esp,0x10
c00042a9:	85 c0                	test   eax,eax
c00042ab:	0f 85 42 ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042b1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042b4:	83 e0 7f             	and    eax,0x7f
c00042b7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ba:	6a 01                	push   0x1
c00042bc:	55                   	push   ebp
c00042bd:	56                   	push   esi
c00042be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042c6:	50                   	push   eax
c00042c7:	e8 d9 dc ff ff       	call   c0001fa5 <disk_read>
c00042cc:	83 c4 10             	add    esp,0x10
c00042cf:	85 c0                	test   eax,eax
c00042d1:	0f 85 1c ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042d7:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00042da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042dd:	be 00 02 00 00       	mov    esi,0x200
c00042e2:	25 ff 01 00 00       	and    eax,0x1ff
c00042e7:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042eb:	29 c6                	sub    esi,eax
c00042ed:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042f1:	39 f7                	cmp    edi,esi
c00042f3:	0f 46 f7             	cmovbe esi,edi
c00042f6:	89 f1                	mov    ecx,esi
c00042f8:	e8 1f dd ff ff       	call   c000201c <mem_cpy>
c00042fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004301:	29 f7                	sub    edi,esi
c0004303:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004307:	01 30                	add    DWORD PTR [eax],esi
c0004309:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000430c:	e9 88 fe ff ff       	jmp    c0004199 <f_read+0x55>
c0004311:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000431d:	83 c4 2c             	add    esp,0x2c
c0004320:	5b                   	pop    ebx
c0004321:	5e                   	pop    esi
c0004322:	5f                   	pop    edi
c0004323:	5d                   	pop    ebp
c0004324:	c3                   	ret    

c0004325 <f_write>:
c0004325:	55                   	push   ebp
c0004326:	57                   	push   edi
c0004327:	56                   	push   esi
c0004328:	53                   	push   ebx
c0004329:	83 ec 2c             	sub    esp,0x2c
c000432c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004330:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004334:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004338:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000433e:	89 d8                	mov    eax,ebx
c0004340:	e8 67 e1 ff ff       	call   c00024ac <validate>
c0004345:	85 c0                	test   eax,eax
c0004347:	89 c7                	mov    edi,eax
c0004349:	0f 85 13 02 00 00    	jne    c0004562 <f_write+0x23d>
c000434f:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004353:	85 ff                	test   edi,edi
c0004355:	0f 85 07 02 00 00    	jne    c0004562 <f_write+0x23d>
c000435b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435f:	0f 84 f8 01 00 00    	je     c000455d <f_write+0x238>
c0004365:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004368:	89 c1                	mov    ecx,eax
c000436a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000436e:	0f 83 ed 00 00 00    	jae    c0004461 <f_write+0x13c>
c0004374:	f7 d0                	not    eax
c0004376:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000437a:	e9 e2 00 00 00       	jmp    c0004461 <f_write+0x13c>
c000437f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004382:	a9 ff 01 00 00       	test   eax,0x1ff
c0004387:	0f 85 9b 01 00 00    	jne    c0004528 <f_write+0x203>
c000438d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004391:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0004395:	89 c2                	mov    edx,eax
c0004397:	c1 ea 09             	shr    edx,0x9
c000439a:	4d                   	dec    ebp
c000439b:	21 d5                	and    ebp,edx
c000439d:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00043a1:	0f 84 c7 00 00 00    	je     c000446e <f_write+0x149>
c00043a7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043ab:	0f 85 23 01 00 00    	jne    c00044d4 <f_write+0x1af>
c00043b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043bc:	89 c8                	mov    eax,ecx
c00043be:	e8 83 de ff ff       	call   c0002246 <clst2sect>
c00043c3:	85 c0                	test   eax,eax
c00043c5:	0f 84 d3 00 00 00    	je     c000449e <f_write+0x179>
c00043cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00043cf:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043d7:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00043da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043de:	0f 86 1c 01 00 00    	jbe    c0004500 <f_write+0x1db>
c00043e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043ec:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043f0:	c1 ee 09             	shr    esi,0x9
c00043f3:	01 f2                	add    edx,esi
c00043f5:	39 c2                	cmp    edx,eax
c00043f7:	76 06                	jbe    c00043ff <f_write+0xda>
c00043f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043fd:	89 c6                	mov    esi,eax
c00043ff:	56                   	push   esi
c0004400:	55                   	push   ebp
c0004401:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004405:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004409:	50                   	push   eax
c000440a:	e8 ac db ff ff       	call   c0001fbb <disk_write>
c000440f:	83 c4 10             	add    esp,0x10
c0004412:	85 c0                	test   eax,eax
c0004414:	0f 85 97 00 00 00    	jne    c00044b1 <f_write+0x18c>
c000441a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000441d:	29 ea                	sub    edx,ebp
c000441f:	39 f2                	cmp    edx,esi
c0004421:	73 1d                	jae    c0004440 <f_write+0x11b>
c0004423:	c1 e2 09             	shl    edx,0x9
c0004426:	b9 00 02 00 00       	mov    ecx,0x200
c000442b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000442f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004432:	e8 e5 db ff ff       	call   c000201c <mem_cpy>
c0004437:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000443a:	83 e0 7f             	and    eax,0x7f
c000443d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004440:	c1 e6 09             	shl    esi,0x9
c0004443:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004447:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000444b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000444f:	01 30                	add    DWORD PTR [eax],esi
c0004451:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004454:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004457:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000445a:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000445e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004461:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004466:	0f 85 13 ff ff ff    	jne    c000437f <f_write+0x5a>
c000446c:	eb 1d                	jmp    c000448b <f_write+0x166>
c000446e:	85 c0                	test   eax,eax
c0004470:	75 0b                	jne    c000447d <f_write+0x158>
c0004472:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004475:	31 d2                	xor    edx,edx
c0004477:	85 c0                	test   eax,eax
c0004479:	75 1e                	jne    c0004499 <f_write+0x174>
c000447b:	eb 03                	jmp    c0004480 <f_write+0x15b>
c000447d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004480:	89 d8                	mov    eax,ebx
c0004482:	e8 78 f1 ff ff       	call   c00035ff <create_chain>
c0004487:	85 c0                	test   eax,eax
c0004489:	75 0e                	jne    c0004499 <f_write+0x174>
c000448b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000448e:	83 c8 40             	or     eax,0x40
c0004491:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004494:	e9 c9 00 00 00       	jmp    c0004562 <f_write+0x23d>
c0004499:	83 f8 01             	cmp    eax,0x1
c000449c:	75 0e                	jne    c00044ac <f_write+0x187>
c000449e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044a2:	bf 02 00 00 00       	mov    edi,0x2
c00044a7:	e9 b6 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044ac:	83 f8 ff             	cmp    eax,0xffffffff
c00044af:	75 0e                	jne    c00044bf <f_write+0x19a>
c00044b1:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00044b5:	bf 01 00 00 00       	mov    edi,0x1
c00044ba:	e9 a3 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044bf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044c6:	0f 85 db fe ff ff    	jne    c00043a7 <f_write+0x82>
c00044cc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044cf:	e9 d3 fe ff ff       	jmp    c00043a7 <f_write+0x82>
c00044d4:	6a 01                	push   0x1
c00044d6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044d9:	8d 43 28             	lea    eax,[ebx+0x28]
c00044dc:	50                   	push   eax
c00044dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044e5:	50                   	push   eax
c00044e6:	e8 d0 da ff ff       	call   c0001fbb <disk_write>
c00044eb:	83 c4 10             	add    esp,0x10
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 bf                	jne    c00044b1 <f_write+0x18c>
c00044f2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044f5:	83 e0 7f             	and    eax,0x7f
c00044f8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044fb:	e9 b1 fe ff ff       	jmp    c00043b1 <f_write+0x8c>
c0004500:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004503:	74 20                	je     c0004525 <f_write+0x200>
c0004505:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004508:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000450b:	76 18                	jbe    c0004525 <f_write+0x200>
c000450d:	6a 01                	push   0x1
c000450f:	55                   	push   ebp
c0004510:	8d 43 28             	lea    eax,[ebx+0x28]
c0004513:	50                   	push   eax
c0004514:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004518:	50                   	push   eax
c0004519:	e8 87 da ff ff       	call   c0001fa5 <disk_read>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	85 c0                	test   eax,eax
c0004523:	75 8c                	jne    c00044b1 <f_write+0x18c>
c0004525:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004528:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000452b:	be 00 02 00 00       	mov    esi,0x200
c0004530:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004534:	25 ff 01 00 00       	and    eax,0x1ff
c0004539:	29 c6                	sub    esi,eax
c000453b:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000453f:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004543:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004548:	89 f1                	mov    ecx,esi
c000454a:	e8 cd da ff ff       	call   c000201c <mem_cpy>
c000454f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004552:	83 c8 80             	or     eax,0xffffff80
c0004555:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004558:	e9 e6 fe ff ff       	jmp    c0004443 <f_write+0x11e>
c000455d:	bf 07 00 00 00       	mov    edi,0x7
c0004562:	83 c4 2c             	add    esp,0x2c
c0004565:	89 f8                	mov    eax,edi
c0004567:	5b                   	pop    ebx
c0004568:	5e                   	pop    esi
c0004569:	5f                   	pop    edi
c000456a:	5d                   	pop    ebp
c000456b:	c3                   	ret    

c000456c <f_sync>:
c000456c:	56                   	push   esi
c000456d:	53                   	push   ebx
c000456e:	83 ec 14             	sub    esp,0x14
c0004571:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004575:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004579:	89 d8                	mov    eax,ebx
c000457b:	e8 2c df ff ff       	call   c00024ac <validate>
c0004580:	85 c0                	test   eax,eax
c0004582:	0f 85 a3 00 00 00    	jne    c000462b <f_sync+0xbf>
c0004588:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000458b:	f6 c2 40             	test   dl,0x40
c000458e:	0f 84 97 00 00 00    	je     c000462b <f_sync+0xbf>
c0004594:	80 e2 80             	and    dl,0x80
c0004597:	74 2e                	je     c00045c7 <f_sync+0x5b>
c0004599:	6a 01                	push   0x1
c000459b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000459e:	8d 43 28             	lea    eax,[ebx+0x28]
c00045a1:	50                   	push   eax
c00045a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045aa:	50                   	push   eax
c00045ab:	e8 0b da ff ff       	call   c0001fbb <disk_write>
c00045b0:	83 c4 10             	add    esp,0x10
c00045b3:	89 c2                	mov    edx,eax
c00045b5:	b8 01 00 00 00       	mov    eax,0x1
c00045ba:	85 d2                	test   edx,edx
c00045bc:	75 6d                	jne    c000462b <f_sync+0xbf>
c00045be:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045c1:	83 e0 7f             	and    eax,0x7f
c00045c4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045c7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045ce:	e8 82 df ff ff       	call   c0002555 <move_window>
c00045d3:	85 c0                	test   eax,eax
c00045d5:	75 54                	jne    c000462b <f_sync+0xbf>
c00045d7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045da:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045dd:	89 f2                	mov    edx,esi
c00045df:	83 c8 20             	or     eax,0x20
c00045e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045e5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045ea:	e8 1b ee ff ff       	call   c000340a <st_clust.isra.1>
c00045ef:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045f2:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045f5:	e8 1f da ff ff       	call   c0002019 <st_dword>
c00045fa:	8d 46 16             	lea    eax,[esi+0x16]
c00045fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004602:	e8 12 da ff ff       	call   c0002019 <st_dword>
c0004607:	8d 46 12             	lea    eax,[esi+0x12]
c000460a:	31 d2                	xor    edx,edx
c000460c:	e8 04 da ff ff       	call   c0002015 <st_word>
c0004611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004615:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461d:	e8 68 e9 ff ff       	call   c0002f8a <sync_fs>
c0004622:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004625:	83 e2 bf             	and    edx,0xffffffbf
c0004628:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000462b:	83 c4 14             	add    esp,0x14
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <f_close>:
c0004631:	53                   	push   ebx
c0004632:	83 ec 24             	sub    esp,0x24
c0004635:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004639:	53                   	push   ebx
c000463a:	e8 2d ff ff ff       	call   c000456c <f_sync>
c000463f:	83 c4 10             	add    esp,0x10
c0004642:	85 c0                	test   eax,eax
c0004644:	75 15                	jne    c000465b <f_close+0x2a>
c0004646:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000464a:	89 d8                	mov    eax,ebx
c000464c:	e8 5b de ff ff       	call   c00024ac <validate>
c0004651:	85 c0                	test   eax,eax
c0004653:	75 06                	jne    c000465b <f_close+0x2a>
c0004655:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000465b:	83 c4 18             	add    esp,0x18
c000465e:	5b                   	pop    ebx
c000465f:	c3                   	ret    

c0004660 <f_lseek>:
c0004660:	55                   	push   ebp
c0004661:	57                   	push   edi
c0004662:	56                   	push   esi
c0004663:	53                   	push   ebx
c0004664:	83 ec 2c             	sub    esp,0x2c
c0004667:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000466b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000466f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004673:	89 d8                	mov    eax,ebx
c0004675:	e8 32 de ff ff       	call   c00024ac <validate>
c000467a:	85 c0                	test   eax,eax
c000467c:	89 c5                	mov    ebp,eax
c000467e:	0f 85 82 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004684:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004688:	85 ed                	test   ebp,ebp
c000468a:	0f 85 76 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004690:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004693:	39 f0                	cmp    eax,esi
c0004695:	73 07                	jae    c000469e <f_lseek+0x3e>
c0004697:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000469b:	0f 44 f0             	cmove  esi,eax
c000469e:	85 f6                	test   esi,esi
c00046a0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00046a3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00046aa:	75 07                	jne    c00046b3 <f_lseek+0x53>
c00046ac:	31 f6                	xor    esi,esi
c00046ae:	e9 e2 00 00 00       	jmp    c0004795 <f_lseek+0x135>
c00046b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b7:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00046bb:	c1 e7 09             	shl    edi,0x9
c00046be:	85 c9                	test   ecx,ecx
c00046c0:	74 28                	je     c00046ea <f_lseek+0x8a>
c00046c2:	31 d2                	xor    edx,edx
c00046c4:	49                   	dec    ecx
c00046c5:	8d 46 ff             	lea    eax,[esi-0x1]
c00046c8:	f7 f7                	div    edi
c00046ca:	31 d2                	xor    edx,edx
c00046cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046d0:	89 c8                	mov    eax,ecx
c00046d2:	f7 f7                	div    edi
c00046d4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046d8:	72 10                	jb     c00046ea <f_lseek+0x8a>
c00046da:	89 f8                	mov    eax,edi
c00046dc:	f7 d8                	neg    eax
c00046de:	21 c1                	and    ecx,eax
c00046e0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046e3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046e6:	29 ce                	sub    esi,ecx
c00046e8:	eb 3c                	jmp    c0004726 <f_lseek+0xc6>
c00046ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046ed:	85 c0                	test   eax,eax
c00046ef:	75 32                	jne    c0004723 <f_lseek+0xc3>
c00046f1:	31 d2                	xor    edx,edx
c00046f3:	89 d8                	mov    eax,ebx
c00046f5:	e8 05 ef ff ff       	call   c00035ff <create_chain>
c00046fa:	83 f8 01             	cmp    eax,0x1
c00046fd:	75 0e                	jne    c000470d <f_lseek+0xad>
c00046ff:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004703:	bd 02 00 00 00       	mov    ebp,0x2
c0004708:	e9 f9 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c000470d:	83 f8 ff             	cmp    eax,0xffffffff
c0004710:	75 0e                	jne    c0004720 <f_lseek+0xc0>
c0004712:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004716:	bd 01 00 00 00       	mov    ebp,0x1
c000471b:	e9 e6 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c0004720:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004723:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004726:	85 c0                	test   eax,eax
c0004728:	74 82                	je     c00046ac <f_lseek+0x4c>
c000472a:	39 fe                	cmp    esi,edi
c000472c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000472f:	76 3d                	jbe    c000476e <f_lseek+0x10e>
c0004731:	01 fa                	add    edx,edi
c0004733:	29 fe                	sub    esi,edi
c0004735:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004739:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000473c:	89 c2                	mov    edx,eax
c000473e:	74 0d                	je     c000474d <f_lseek+0xed>
c0004740:	89 d8                	mov    eax,ebx
c0004742:	e8 b8 ee ff ff       	call   c00035ff <create_chain>
c0004747:	85 c0                	test   eax,eax
c0004749:	75 09                	jne    c0004754 <f_lseek+0xf4>
c000474b:	eb 1f                	jmp    c000476c <f_lseek+0x10c>
c000474d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000474f:	e8 de ec ff ff       	call   c0003432 <get_fat.isra.2>
c0004754:	83 f8 ff             	cmp    eax,0xffffffff
c0004757:	74 b9                	je     c0004712 <f_lseek+0xb2>
c0004759:	83 f8 01             	cmp    eax,0x1
c000475c:	76 a1                	jbe    c00046ff <f_lseek+0x9f>
c000475e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004762:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004765:	76 98                	jbe    c00046ff <f_lseek+0x9f>
c0004767:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000476a:	eb be                	jmp    c000472a <f_lseek+0xca>
c000476c:	31 f6                	xor    esi,esi
c000476e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004771:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004777:	0f 84 2f ff ff ff    	je     c00046ac <f_lseek+0x4c>
c000477d:	89 c2                	mov    edx,eax
c000477f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004783:	e8 be da ff ff       	call   c0002246 <clst2sect>
c0004788:	85 c0                	test   eax,eax
c000478a:	0f 84 6f ff ff ff    	je     c00046ff <f_lseek+0x9f>
c0004790:	c1 ee 09             	shr    esi,0x9
c0004793:	01 c6                	add    esi,eax
c0004795:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004798:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000479b:	76 0c                	jbe    c00047a9 <f_lseek+0x149>
c000479d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00047a0:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00047a3:	83 ca 40             	or     edx,0x40
c00047a6:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00047a9:	a9 ff 01 00 00       	test   eax,0x1ff
c00047ae:	74 56                	je     c0004806 <f_lseek+0x1a6>
c00047b0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00047b3:	39 f0                	cmp    eax,esi
c00047b5:	74 4f                	je     c0004806 <f_lseek+0x1a6>
c00047b7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047bb:	8d 7b 28             	lea    edi,[ebx+0x28]
c00047be:	74 26                	je     c00047e6 <f_lseek+0x186>
c00047c0:	6a 01                	push   0x1
c00047c2:	50                   	push   eax
c00047c3:	57                   	push   edi
c00047c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047c8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047cc:	50                   	push   eax
c00047cd:	e8 e9 d7 ff ff       	call   c0001fbb <disk_write>
c00047d2:	83 c4 10             	add    esp,0x10
c00047d5:	85 c0                	test   eax,eax
c00047d7:	0f 85 35 ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c00047dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047e0:	83 e0 7f             	and    eax,0x7f
c00047e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047e6:	6a 01                	push   0x1
c00047e8:	56                   	push   esi
c00047e9:	57                   	push   edi
c00047ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047ee:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047f2:	50                   	push   eax
c00047f3:	e8 ad d7 ff ff       	call   c0001fa5 <disk_read>
c00047f8:	83 c4 10             	add    esp,0x10
c00047fb:	85 c0                	test   eax,eax
c00047fd:	0f 85 0f ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c0004803:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004806:	83 c4 2c             	add    esp,0x2c
c0004809:	89 e8                	mov    eax,ebp
c000480b:	5b                   	pop    ebx
c000480c:	5e                   	pop    esi
c000480d:	5f                   	pop    edi
c000480e:	5d                   	pop    ebp
c000480f:	c3                   	ret    

c0004810 <f_opendir>:
c0004810:	56                   	push   esi
c0004811:	b8 09 00 00 00       	mov    eax,0x9
c0004816:	53                   	push   ebx
c0004817:	83 ec 24             	sub    esp,0x24
c000481a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000481e:	85 db                	test   ebx,ebx
c0004820:	0f 84 af 00 00 00    	je     c00048d5 <f_opendir+0xc5>
c0004826:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000482a:	31 c9                	xor    ecx,ecx
c000482c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004830:	e8 7d de ff ff       	call   c00026b2 <mount_volume>
c0004835:	85 c0                	test   eax,eax
c0004837:	0f 85 92 00 00 00    	jne    c00048cf <f_opendir+0xbf>
c000483d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004841:	83 ec 0c             	sub    esp,0xc
c0004844:	89 03                	mov    DWORD PTR [ebx],eax
c0004846:	68 00 02 00 00       	push   0x200
c000484b:	e8 e4 15 00 00       	call   c0005e34 <ff_memalloc>
c0004850:	83 c4 10             	add    esp,0x10
c0004853:	89 c6                	mov    esi,eax
c0004855:	b8 11 00 00 00       	mov    eax,0x11
c000485a:	85 f6                	test   esi,esi
c000485c:	74 77                	je     c00048d5 <f_opendir+0xc5>
c000485e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004862:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004866:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004869:	89 d8                	mov    eax,ebx
c000486b:	e8 8a f3 ff ff       	call   c0003bfa <follow_path>
c0004870:	85 c0                	test   eax,eax
c0004872:	75 37                	jne    c00048ab <f_opendir+0x9b>
c0004874:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004878:	75 1c                	jne    c0004896 <f_opendir+0x86>
c000487a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000487e:	b8 05 00 00 00       	mov    eax,0x5
c0004883:	74 26                	je     c00048ab <f_opendir+0x9b>
c0004885:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004889:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000488c:	8a 00                	mov    al,BYTE PTR [eax]
c000488e:	e8 4e eb ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004893:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004896:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000489a:	31 d2                	xor    edx,edx
c000489c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00048a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00048a4:	89 d8                	mov    eax,ebx
c00048a6:	e8 8c ec ff ff       	call   c0003537 <dir_sdi>
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	83 ec 0c             	sub    esp,0xc
c00048b2:	56                   	push   esi
c00048b3:	e8 94 15 00 00       	call   c0005e4c <ff_memfree>
c00048b8:	83 c4 10             	add    esp,0x10
c00048bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048bf:	83 f8 04             	cmp    eax,0x4
c00048c2:	74 06                	je     c00048ca <f_opendir+0xba>
c00048c4:	85 c0                	test   eax,eax
c00048c6:	74 0d                	je     c00048d5 <f_opendir+0xc5>
c00048c8:	eb 05                	jmp    c00048cf <f_opendir+0xbf>
c00048ca:	b8 05 00 00 00       	mov    eax,0x5
c00048cf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048d5:	83 c4 24             	add    esp,0x24
c00048d8:	5b                   	pop    ebx
c00048d9:	5e                   	pop    esi
c00048da:	c3                   	ret    

c00048db <f_closedir>:
c00048db:	53                   	push   ebx
c00048dc:	83 ec 18             	sub    esp,0x18
c00048df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048e3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048e7:	89 d8                	mov    eax,ebx
c00048e9:	e8 be db ff ff       	call   c00024ac <validate>
c00048ee:	85 c0                	test   eax,eax
c00048f0:	75 06                	jne    c00048f8 <f_closedir+0x1d>
c00048f2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048f8:	83 c4 18             	add    esp,0x18
c00048fb:	5b                   	pop    ebx
c00048fc:	c3                   	ret    

c00048fd <f_readdir>:
c00048fd:	57                   	push   edi
c00048fe:	56                   	push   esi
c00048ff:	53                   	push   ebx
c0004900:	83 ec 20             	sub    esp,0x20
c0004903:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004907:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000490b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000490f:	89 d8                	mov    eax,ebx
c0004911:	e8 96 db ff ff       	call   c00024ac <validate>
c0004916:	85 c0                	test   eax,eax
c0004918:	75 6e                	jne    c0004988 <f_readdir+0x8b>
c000491a:	85 ff                	test   edi,edi
c000491c:	75 0b                	jne    c0004929 <f_readdir+0x2c>
c000491e:	31 d2                	xor    edx,edx
c0004920:	89 d8                	mov    eax,ebx
c0004922:	e8 10 ec ff ff       	call   c0003537 <dir_sdi>
c0004927:	eb 5f                	jmp    c0004988 <f_readdir+0x8b>
c0004929:	83 ec 0c             	sub    esp,0xc
c000492c:	68 00 02 00 00       	push   0x200
c0004931:	e8 fe 14 00 00       	call   c0005e34 <ff_memalloc>
c0004936:	83 c4 10             	add    esp,0x10
c0004939:	89 c6                	mov    esi,eax
c000493b:	b8 11 00 00 00       	mov    eax,0x11
c0004940:	85 f6                	test   esi,esi
c0004942:	74 44                	je     c0004988 <f_readdir+0x8b>
c0004944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004948:	31 d2                	xor    edx,edx
c000494a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000494d:	89 d8                	mov    eax,ebx
c000494f:	e8 dd ef ff ff       	call   c0003931 <dir_read>
c0004954:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004959:	75 19                	jne    c0004974 <f_readdir+0x77>
c000495b:	89 fa                	mov    edx,edi
c000495d:	89 d8                	mov    eax,ebx
c000495f:	e8 7c e8 ff ff       	call   c00031e0 <get_fileinfo>
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 d8                	mov    eax,ebx
c0004968:	e8 5a ee ff ff       	call   c00037c7 <dir_next>
c000496d:	83 f8 04             	cmp    eax,0x4
c0004970:	75 02                	jne    c0004974 <f_readdir+0x77>
c0004972:	31 c0                	xor    eax,eax
c0004974:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004978:	83 ec 0c             	sub    esp,0xc
c000497b:	56                   	push   esi
c000497c:	e8 cb 14 00 00       	call   c0005e4c <ff_memfree>
c0004981:	83 c4 10             	add    esp,0x10
c0004984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004988:	83 c4 20             	add    esp,0x20
c000498b:	5b                   	pop    ebx
c000498c:	5e                   	pop    esi
c000498d:	5f                   	pop    edi
c000498e:	c3                   	ret    

c000498f <f_stat>:
c000498f:	57                   	push   edi
c0004990:	31 c9                	xor    ecx,ecx
c0004992:	56                   	push   esi
c0004993:	53                   	push   ebx
c0004994:	83 ec 30             	sub    esp,0x30
c0004997:	8d 44 24 40          	lea    eax,[esp+0x40]
c000499b:	89 e2                	mov    edx,esp
c000499d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00049a1:	e8 0c dd ff ff       	call   c00026b2 <mount_volume>
c00049a6:	85 c0                	test   eax,eax
c00049a8:	89 c3                	mov    ebx,eax
c00049aa:	75 59                	jne    c0004a05 <f_stat+0x76>
c00049ac:	83 ec 0c             	sub    esp,0xc
c00049af:	bb 11 00 00 00       	mov    ebx,0x11
c00049b4:	68 00 02 00 00       	push   0x200
c00049b9:	e8 76 14 00 00       	call   c0005e34 <ff_memalloc>
c00049be:	83 c4 10             	add    esp,0x10
c00049c1:	85 c0                	test   eax,eax
c00049c3:	89 c6                	mov    esi,eax
c00049c5:	74 3e                	je     c0004a05 <f_stat+0x76>
c00049c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ca:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049ce:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049d1:	89 e0                	mov    eax,esp
c00049d3:	e8 22 f2 ff ff       	call   c0003bfa <follow_path>
c00049d8:	85 c0                	test   eax,eax
c00049da:	89 c3                	mov    ebx,eax
c00049dc:	75 1b                	jne    c00049f9 <f_stat+0x6a>
c00049de:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049e3:	75 0f                	jne    c00049f4 <f_stat+0x65>
c00049e5:	85 ff                	test   edi,edi
c00049e7:	74 10                	je     c00049f9 <f_stat+0x6a>
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	89 e0                	mov    eax,esp
c00049ed:	e8 ee e7 ff ff       	call   c00031e0 <get_fileinfo>
c00049f2:	eb 05                	jmp    c00049f9 <f_stat+0x6a>
c00049f4:	bb 06 00 00 00       	mov    ebx,0x6
c00049f9:	83 ec 0c             	sub    esp,0xc
c00049fc:	56                   	push   esi
c00049fd:	e8 4a 14 00 00       	call   c0005e4c <ff_memfree>
c0004a02:	83 c4 10             	add    esp,0x10
c0004a05:	83 c4 30             	add    esp,0x30
c0004a08:	89 d8                	mov    eax,ebx
c0004a0a:	5b                   	pop    ebx
c0004a0b:	5e                   	pop    esi
c0004a0c:	5f                   	pop    edi
c0004a0d:	c3                   	ret    

c0004a0e <f_getfree>:
c0004a0e:	55                   	push   ebp
c0004a0f:	31 c9                	xor    ecx,ecx
c0004a11:	57                   	push   edi
c0004a12:	56                   	push   esi
c0004a13:	53                   	push   ebx
c0004a14:	83 ec 2c             	sub    esp,0x2c
c0004a17:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a1b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a1f:	e8 8e dc ff ff       	call   c00026b2 <mount_volume>
c0004a24:	85 c0                	test   eax,eax
c0004a26:	89 c6                	mov    esi,eax
c0004a28:	0f 85 df 00 00 00    	jne    c0004b0d <f_getfree+0xff>
c0004a2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004a32:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a36:	89 18                	mov    DWORD PTR [eax],ebx
c0004a38:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004a3b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a3e:	8d 57 fe             	lea    edx,[edi-0x2]
c0004a41:	39 d0                	cmp    eax,edx
c0004a43:	77 0b                	ja     c0004a50 <f_getfree+0x42>
c0004a45:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a49:	89 01                	mov    DWORD PTR [ecx],eax
c0004a4b:	e9 bd 00 00 00       	jmp    c0004b0d <f_getfree+0xff>
c0004a50:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004a53:	75 29                	jne    c0004a7e <f_getfree+0x70>
c0004a55:	bf 02 00 00 00       	mov    edi,0x2
c0004a5a:	31 ed                	xor    ebp,ebp
c0004a5c:	89 fa                	mov    edx,edi
c0004a5e:	89 d8                	mov    eax,ebx
c0004a60:	e8 cd e9 ff ff       	call   c0003432 <get_fat.isra.2>
c0004a65:	83 f8 ff             	cmp    eax,0xffffffff
c0004a68:	74 7d                	je     c0004ae7 <f_getfree+0xd9>
c0004a6a:	83 f8 01             	cmp    eax,0x1
c0004a6d:	74 7f                	je     c0004aee <f_getfree+0xe0>
c0004a6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a73:	83 d5 00             	adc    ebp,0x0
c0004a76:	47                   	inc    edi
c0004a77:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004a7a:	77 e0                	ja     c0004a5c <f_getfree+0x4e>
c0004a7c:	eb 79                	jmp    c0004af7 <f_getfree+0xe9>
c0004a7e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004a81:	31 ed                	xor    ebp,ebp
c0004a83:	31 db                	xor    ebx,ebx
c0004a85:	85 db                	test   ebx,ebx
c0004a87:	75 18                	jne    c0004aa1 <f_getfree+0x93>
c0004a89:	8d 42 01             	lea    eax,[edx+0x1]
c0004a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a94:	e8 bc da ff ff       	call   c0002555 <move_window>
c0004a99:	85 c0                	test   eax,eax
c0004a9b:	75 58                	jne    c0004af5 <f_getfree+0xe7>
c0004a9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004aa5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004aa9:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004aac:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004ab0:	75 13                	jne    c0004ac5 <f_getfree+0xb7>
c0004ab2:	e8 39 d5 ff ff       	call   c0001ff0 <ld_word>
c0004ab7:	0f b7 c0             	movzx  eax,ax
c0004aba:	83 f8 01             	cmp    eax,0x1
c0004abd:	83 d5 00             	adc    ebp,0x0
c0004ac0:	83 c3 02             	add    ebx,0x2
c0004ac3:	eb 13                	jmp    c0004ad8 <f_getfree+0xca>
c0004ac5:	e8 33 d5 ff ff       	call   c0001ffd <ld_dword>
c0004aca:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004acf:	83 f8 01             	cmp    eax,0x1
c0004ad2:	83 d5 00             	adc    ebp,0x0
c0004ad5:	83 c3 04             	add    ebx,0x4
c0004ad8:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004ade:	4f                   	dec    edi
c0004adf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ae3:	75 a0                	jne    c0004a85 <f_getfree+0x77>
c0004ae5:	eb 10                	jmp    c0004af7 <f_getfree+0xe9>
c0004ae7:	be 01 00 00 00       	mov    esi,0x1
c0004aec:	eb 09                	jmp    c0004af7 <f_getfree+0xe9>
c0004aee:	be 02 00 00 00       	mov    esi,0x2
c0004af3:	eb 02                	jmp    c0004af7 <f_getfree+0xe9>
c0004af5:	89 c6                	mov    esi,eax
c0004af7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004afb:	89 28                	mov    DWORD PTR [eax],ebp
c0004afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b01:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004b04:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004b07:	83 ca 01             	or     edx,0x1
c0004b0a:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004b0d:	83 c4 2c             	add    esp,0x2c
c0004b10:	89 f0                	mov    eax,esi
c0004b12:	5b                   	pop    ebx
c0004b13:	5e                   	pop    esi
c0004b14:	5f                   	pop    edi
c0004b15:	5d                   	pop    ebp
c0004b16:	c3                   	ret    

c0004b17 <f_truncate>:
c0004b17:	56                   	push   esi
c0004b18:	53                   	push   ebx
c0004b19:	83 ec 14             	sub    esp,0x14
c0004b1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b20:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b24:	89 d8                	mov    eax,ebx
c0004b26:	e8 81 d9 ff ff       	call   c00024ac <validate>
c0004b2b:	85 c0                	test   eax,eax
c0004b2d:	89 c6                	mov    esi,eax
c0004b2f:	0f 85 c4 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b35:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b39:	85 f6                	test   esi,esi
c0004b3b:	0f 85 b8 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b41:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b45:	0f 84 a9 00 00 00    	je     c0004bf4 <f_truncate+0xdd>
c0004b4b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b4e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b51:	0f 83 a2 00 00 00    	jae    c0004bf9 <f_truncate+0xe2>
c0004b57:	85 c0                	test   eax,eax
c0004b59:	75 15                	jne    c0004b70 <f_truncate+0x59>
c0004b5b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b5e:	31 c9                	xor    ecx,ecx
c0004b60:	89 d8                	mov    eax,ebx
c0004b62:	e8 d2 eb ff ff       	call   c0003739 <remove_chain>
c0004b67:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b6e:	eb 35                	jmp    c0004ba5 <f_truncate+0x8e>
c0004b70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b75:	e8 b8 e8 ff ff       	call   c0003432 <get_fat.isra.2>
c0004b7a:	89 c2                	mov    edx,eax
c0004b7c:	b8 01 00 00 00       	mov    eax,0x1
c0004b81:	83 fa ff             	cmp    edx,0xffffffff
c0004b84:	74 1f                	je     c0004ba5 <f_truncate+0x8e>
c0004b86:	83 fa 01             	cmp    edx,0x1
c0004b89:	b8 02 00 00 00       	mov    eax,0x2
c0004b8e:	74 15                	je     c0004ba5 <f_truncate+0x8e>
c0004b90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b94:	31 c0                	xor    eax,eax
c0004b96:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b99:	76 0a                	jbe    c0004ba5 <f_truncate+0x8e>
c0004b9b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b9e:	89 d8                	mov    eax,ebx
c0004ba0:	e8 94 eb ff ff       	call   c0003739 <remove_chain>
c0004ba5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ba8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004bab:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004bae:	83 ca 40             	or     edx,0x40
c0004bb1:	85 c0                	test   eax,eax
c0004bb3:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004bb6:	75 35                	jne    c0004bed <f_truncate+0xd6>
c0004bb8:	80 e2 80             	and    dl,0x80
c0004bbb:	74 3c                	je     c0004bf9 <f_truncate+0xe2>
c0004bbd:	6a 01                	push   0x1
c0004bbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004bc2:	8d 43 28             	lea    eax,[ebx+0x28]
c0004bc5:	50                   	push   eax
c0004bc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bce:	50                   	push   eax
c0004bcf:	e8 e7 d3 ff ff       	call   c0001fbb <disk_write>
c0004bd4:	83 c4 10             	add    esp,0x10
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	75 0d                	jne    c0004be8 <f_truncate+0xd1>
c0004bdb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bde:	31 f6                	xor    esi,esi
c0004be0:	83 e0 7f             	and    eax,0x7f
c0004be3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004be6:	eb 11                	jmp    c0004bf9 <f_truncate+0xe2>
c0004be8:	b8 01 00 00 00       	mov    eax,0x1
c0004bed:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	eb 05                	jmp    c0004bf9 <f_truncate+0xe2>
c0004bf4:	be 07 00 00 00       	mov    esi,0x7
c0004bf9:	83 c4 14             	add    esp,0x14
c0004bfc:	89 f0                	mov    eax,esi
c0004bfe:	5b                   	pop    ebx
c0004bff:	5e                   	pop    esi
c0004c00:	c3                   	ret    

c0004c01 <f_unlink>:
c0004c01:	55                   	push   ebp
c0004c02:	b9 02 00 00 00       	mov    ecx,0x2
c0004c07:	57                   	push   edi
c0004c08:	56                   	push   esi
c0004c09:	53                   	push   ebx
c0004c0a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004c10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c14:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004c1b:	e8 92 da ff ff       	call   c00026b2 <mount_volume>
c0004c20:	85 c0                	test   eax,eax
c0004c22:	0f 85 ee 00 00 00    	jne    c0004d16 <f_unlink+0x115>
c0004c28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c2c:	83 ec 0c             	sub    esp,0xc
c0004c2f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c33:	68 00 02 00 00       	push   0x200
c0004c38:	e8 f7 11 00 00       	call   c0005e34 <ff_memalloc>
c0004c3d:	83 c4 10             	add    esp,0x10
c0004c40:	89 c3                	mov    ebx,eax
c0004c42:	b8 11 00 00 00       	mov    eax,0x11
c0004c47:	85 db                	test   ebx,ebx
c0004c49:	0f 84 c7 00 00 00    	je     c0004d16 <f_unlink+0x115>
c0004c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c53:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c5a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c5d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c61:	e8 94 ef ff ff       	call   c0003bfa <follow_path>
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 94 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c6e:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c73:	b8 06 00 00 00       	mov    eax,0x6
c0004c78:	0f 85 84 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c7e:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c83:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c89:	74 07                	je     c0004c92 <f_unlink+0x91>
c0004c8b:	b8 07 00 00 00       	mov    eax,0x7
c0004c90:	eb 70                	jmp    c0004d02 <f_unlink+0x101>
c0004c92:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c9a:	8a 07                	mov    al,BYTE PTR [edi]
c0004c9c:	e8 40 e7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004ca1:	83 e5 10             	and    ebp,0x10
c0004ca4:	89 c6                	mov    esi,eax
c0004ca6:	75 20                	jne    c0004cc8 <f_unlink+0xc7>
c0004ca8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cac:	e8 a8 ed ff ff       	call   c0003a59 <dir_remove>
c0004cb1:	85 c0                	test   eax,eax
c0004cb3:	75 40                	jne    c0004cf5 <f_unlink+0xf4>
c0004cb5:	85 f6                	test   esi,esi
c0004cb7:	74 3c                	je     c0004cf5 <f_unlink+0xf4>
c0004cb9:	31 c9                	xor    ecx,ecx
c0004cbb:	89 f2                	mov    edx,esi
c0004cbd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc1:	e8 73 ea ff ff       	call   c0003739 <remove_chain>
c0004cc6:	eb 2d                	jmp    c0004cf5 <f_unlink+0xf4>
c0004cc8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ccc:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cd0:	31 d2                	xor    edx,edx
c0004cd2:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004cd6:	e8 5c e8 ff ff       	call   c0003537 <dir_sdi>
c0004cdb:	85 c0                	test   eax,eax
c0004cdd:	75 23                	jne    c0004d02 <f_unlink+0x101>
c0004cdf:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ce3:	31 d2                	xor    edx,edx
c0004ce5:	e8 47 ec ff ff       	call   c0003931 <dir_read>
c0004cea:	85 c0                	test   eax,eax
c0004cec:	74 9d                	je     c0004c8b <f_unlink+0x8a>
c0004cee:	83 f8 04             	cmp    eax,0x4
c0004cf1:	75 0f                	jne    c0004d02 <f_unlink+0x101>
c0004cf3:	eb b3                	jmp    c0004ca8 <f_unlink+0xa7>
c0004cf5:	85 c0                	test   eax,eax
c0004cf7:	75 09                	jne    c0004d02 <f_unlink+0x101>
c0004cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfd:	e8 88 e2 ff ff       	call   c0002f8a <sync_fs>
c0004d02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d06:	83 ec 0c             	sub    esp,0xc
c0004d09:	53                   	push   ebx
c0004d0a:	e8 3d 11 00 00       	call   c0005e4c <ff_memfree>
c0004d0f:	83 c4 10             	add    esp,0x10
c0004d12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d16:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	5f                   	pop    edi
c0004d1f:	5d                   	pop    ebp
c0004d20:	c3                   	ret    

c0004d21 <f_mkdir>:
c0004d21:	57                   	push   edi
c0004d22:	b9 02 00 00 00       	mov    ecx,0x2
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	83 ec 50             	sub    esp,0x50
c0004d2c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d30:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d34:	e8 79 d9 ff ff       	call   c00026b2 <mount_volume>
c0004d39:	85 c0                	test   eax,eax
c0004d3b:	89 c3                	mov    ebx,eax
c0004d3d:	0f 85 70 01 00 00    	jne    c0004eb3 <f_mkdir+0x192>
c0004d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d47:	83 ec 0c             	sub    esp,0xc
c0004d4a:	bb 11 00 00 00       	mov    ebx,0x11
c0004d4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d53:	68 00 02 00 00       	push   0x200
c0004d58:	e8 d7 10 00 00       	call   c0005e34 <ff_memalloc>
c0004d5d:	83 c4 10             	add    esp,0x10
c0004d60:	85 c0                	test   eax,eax
c0004d62:	89 c7                	mov    edi,eax
c0004d64:	0f 84 49 01 00 00    	je     c0004eb3 <f_mkdir+0x192>
c0004d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d72:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d75:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d79:	e8 7c ee ff ff       	call   c0003bfa <follow_path>
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	89 c3                	mov    ebx,eax
c0004d82:	74 3e                	je     c0004dc2 <f_mkdir+0xa1>
c0004d84:	83 f8 04             	cmp    eax,0x4
c0004d87:	75 3e                	jne    c0004dc7 <f_mkdir+0xa6>
c0004d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8d:	31 d2                	xor    edx,edx
c0004d8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d93:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d97:	e8 63 e8 ff ff       	call   c00035ff <create_chain>
c0004d9c:	85 c0                	test   eax,eax
c0004d9e:	89 c6                	mov    esi,eax
c0004da0:	74 0c                	je     c0004dae <f_mkdir+0x8d>
c0004da2:	83 f8 01             	cmp    eax,0x1
c0004da5:	bb 02 00 00 00       	mov    ebx,0x2
c0004daa:	74 07                	je     c0004db3 <f_mkdir+0x92>
c0004dac:	eb 2a                	jmp    c0004dd8 <f_mkdir+0xb7>
c0004dae:	bb 07 00 00 00       	mov    ebx,0x7
c0004db3:	31 c9                	xor    ecx,ecx
c0004db5:	89 f2                	mov    edx,esi
c0004db7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004dbb:	e8 79 e9 ff ff       	call   c0003739 <remove_chain>
c0004dc0:	eb 05                	jmp    c0004dc7 <f_mkdir+0xa6>
c0004dc2:	bb 08 00 00 00       	mov    ebx,0x8
c0004dc7:	83 ec 0c             	sub    esp,0xc
c0004dca:	57                   	push   edi
c0004dcb:	e8 7c 10 00 00       	call   c0005e4c <ff_memfree>
c0004dd0:	83 c4 10             	add    esp,0x10
c0004dd3:	e9 db 00 00 00       	jmp    c0004eb3 <f_mkdir+0x192>
c0004dd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004ddb:	bb 01 00 00 00       	mov    ebx,0x1
c0004de0:	74 d1                	je     c0004db3 <f_mkdir+0x92>
c0004de2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de6:	89 f2                	mov    edx,esi
c0004de8:	e8 19 dd ff ff       	call   c0002b06 <dir_clear>
c0004ded:	85 c0                	test   eax,eax
c0004def:	89 c3                	mov    ebx,eax
c0004df1:	75 c0                	jne    c0004db3 <f_mkdir+0x92>
c0004df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004dfc:	ba 20 00 00 00       	mov    edx,0x20
c0004e01:	83 c0 34             	add    eax,0x34
c0004e04:	e8 28 d2 ff ff       	call   c0002031 <mem_set>
c0004e09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e12:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004e16:	83 c0 4a             	add    eax,0x4a
c0004e19:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004e1d:	e8 f7 d1 ff ff       	call   c0002019 <st_dword>
c0004e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e26:	89 f1                	mov    ecx,esi
c0004e28:	8d 50 34             	lea    edx,[eax+0x34]
c0004e2b:	e8 da e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e34:	b9 20 00 00 00       	mov    ecx,0x20
c0004e39:	8d 50 34             	lea    edx,[eax+0x34]
c0004e3c:	83 c0 54             	add    eax,0x54
c0004e3f:	e8 d8 d1 ff ff       	call   c000201c <mem_cpy>
c0004e44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e48:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e4c:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e50:	8d 50 54             	lea    edx,[eax+0x54]
c0004e53:	e8 b2 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e60:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e64:	e8 2e ee ff ff       	call   c0003c97 <dir_register>
c0004e69:	85 c0                	test   eax,eax
c0004e6b:	89 c3                	mov    ebx,eax
c0004e6d:	0f 85 40 ff ff ff    	jne    c0004db3 <f_mkdir+0x92>
c0004e73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e77:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e7c:	83 c0 16             	add    eax,0x16
c0004e7f:	e8 95 d1 ff ff       	call   c0002019 <st_dword>
c0004e84:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e88:	89 f1                	mov    ecx,esi
c0004e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8e:	e8 77 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e97:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e9f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ea3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ea7:	e8 de e0 ff ff       	call   c0002f8a <sync_fs>
c0004eac:	89 c3                	mov    ebx,eax
c0004eae:	e9 14 ff ff ff       	jmp    c0004dc7 <f_mkdir+0xa6>
c0004eb3:	83 c4 50             	add    esp,0x50
c0004eb6:	89 d8                	mov    eax,ebx
c0004eb8:	5b                   	pop    ebx
c0004eb9:	5e                   	pop    esi
c0004eba:	5f                   	pop    edi
c0004ebb:	c3                   	ret    

c0004ebc <f_rename>:
c0004ebc:	57                   	push   edi
c0004ebd:	56                   	push   esi
c0004ebe:	53                   	push   ebx
c0004ebf:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ec5:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ecc:	e8 8f d5 ff ff       	call   c0002460 <get_ldnumber>
c0004ed1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ed5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eda:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ee1:	e8 cc d7 ff ff       	call   c00026b2 <mount_volume>
c0004ee6:	85 c0                	test   eax,eax
c0004ee8:	0f 85 7c 01 00 00    	jne    c000506a <f_rename+0x1ae>
c0004eee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef2:	83 ec 0c             	sub    esp,0xc
c0004ef5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ef9:	68 00 02 00 00       	push   0x200
c0004efe:	e8 31 0f 00 00       	call   c0005e34 <ff_memalloc>
c0004f03:	83 c4 10             	add    esp,0x10
c0004f06:	89 c6                	mov    esi,eax
c0004f08:	b8 11 00 00 00       	mov    eax,0x11
c0004f0d:	85 f6                	test   esi,esi
c0004f0f:	0f 84 55 01 00 00    	je     c000506a <f_rename+0x1ae>
c0004f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f19:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f20:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f23:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f27:	e8 ce ec ff ff       	call   c0003bfa <follow_path>
c0004f2c:	85 c0                	test   eax,eax
c0004f2e:	0f 85 22 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f34:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f38:	b8 06 00 00 00       	mov    eax,0x6
c0004f3d:	80 e2 a0             	and    dl,0xa0
c0004f40:	0f 85 10 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f4e:	b9 20 00 00 00       	mov    ecx,0x20
c0004f53:	e8 c4 d0 ff ff       	call   c000201c <mem_cpy>
c0004f58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f5c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f65:	e8 b2 d0 ff ff       	call   c000201c <mem_cpy>
c0004f6a:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f71:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f75:	e8 80 ec ff ff       	call   c0003bfa <follow_path>
c0004f7a:	85 c0                	test   eax,eax
c0004f7c:	75 20                	jne    c0004f9e <f_rename+0xe2>
c0004f7e:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f82:	b8 08 00 00 00       	mov    eax,0x8
c0004f87:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f8b:	0f 85 c5 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f91:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f95:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f9c:	eb 03                	jmp    c0004fa1 <f_rename+0xe5>
c0004f9e:	83 f8 04             	cmp    eax,0x4
c0004fa1:	0f 85 af 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fa7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fab:	e8 e7 ec ff ff       	call   c0003c97 <dir_register>
c0004fb0:	85 c0                	test   eax,eax
c0004fb2:	0f 85 9e 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fb8:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fbf:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004fc3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fc8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fcb:	e8 4c d0 ff ff       	call   c000201c <mem_cpy>
c0004fd0:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fd4:	a8 10                	test   al,0x10
c0004fd6:	75 03                	jne    c0004fdb <f_rename+0x11f>
c0004fd8:	83 c8 20             	or     eax,0x20
c0004fdb:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fe2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fe6:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fea:	74 54                	je     c0005040 <f_rename+0x184>
c0004fec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004ff0:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004ff4:	74 4a                	je     c0005040 <f_rename+0x184>
c0004ff6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ffa:	89 da                	mov    edx,ebx
c0004ffc:	8a 07                	mov    al,BYTE PTR [edi]
c0004ffe:	e8 de e3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0005003:	89 c2                	mov    edx,eax
c0005005:	89 f8                	mov    eax,edi
c0005007:	e8 3a d2 ff ff       	call   c0002246 <clst2sect>
c000500c:	89 c2                	mov    edx,eax
c000500e:	b8 02 00 00 00       	mov    eax,0x2
c0005013:	85 d2                	test   edx,edx
c0005015:	74 3f                	je     c0005056 <f_rename+0x19a>
c0005017:	89 f8                	mov    eax,edi
c0005019:	e8 37 d5 ff ff       	call   c0002555 <move_window>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 34                	jne    c0005056 <f_rename+0x19a>
c0005022:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005026:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000502a:	75 14                	jne    c0005040 <f_rename+0x184>
c000502c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005030:	8d 50 54             	lea    edx,[eax+0x54]
c0005033:	e8 d2 e3 ff ff       	call   c000340a <st_clust.isra.1>
c0005038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000503c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005040:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005044:	e8 10 ea ff ff       	call   c0003a59 <dir_remove>
c0005049:	85 c0                	test   eax,eax
c000504b:	75 09                	jne    c0005056 <f_rename+0x19a>
c000504d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005051:	e8 34 df ff ff       	call   c0002f8a <sync_fs>
c0005056:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000505a:	83 ec 0c             	sub    esp,0xc
c000505d:	56                   	push   esi
c000505e:	e8 e9 0d 00 00       	call   c0005e4c <ff_memfree>
c0005063:	83 c4 10             	add    esp,0x10
c0005066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000506a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005070:	5b                   	pop    ebx
c0005071:	5e                   	pop    esi
c0005072:	5f                   	pop    edi
c0005073:	c3                   	ret    

c0005074 <f_chmod>:
c0005074:	57                   	push   edi
c0005075:	b9 02 00 00 00       	mov    ecx,0x2
c000507a:	56                   	push   esi
c000507b:	53                   	push   ebx
c000507c:	83 ec 50             	sub    esp,0x50
c000507f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005083:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005087:	8d 44 24 60          	lea    eax,[esp+0x60]
c000508b:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000508f:	e8 1e d6 ff ff       	call   c00026b2 <mount_volume>
c0005094:	85 c0                	test   eax,eax
c0005096:	0f 85 81 00 00 00    	jne    c000511d <f_chmod+0xa9>
c000509c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a0:	83 ec 0c             	sub    esp,0xc
c00050a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00050a7:	68 00 02 00 00       	push   0x200
c00050ac:	e8 83 0d 00 00       	call   c0005e34 <ff_memalloc>
c00050b1:	83 c4 10             	add    esp,0x10
c00050b4:	89 c6                	mov    esi,eax
c00050b6:	b8 11 00 00 00       	mov    eax,0x11
c00050bb:	85 f6                	test   esi,esi
c00050bd:	74 5e                	je     c000511d <f_chmod+0xa9>
c00050bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050c3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ca:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050ce:	e8 27 eb ff ff       	call   c0003bfa <follow_path>
c00050d3:	85 c0                	test   eax,eax
c00050d5:	75 32                	jne    c0005109 <f_chmod+0x95>
c00050d7:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050db:	b8 06 00 00 00       	mov    eax,0x6
c00050e0:	80 e2 a0             	and    dl,0xa0
c00050e3:	75 24                	jne    c0005109 <f_chmod+0x95>
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050ec:	31 d7                	xor    edi,edx
c00050ee:	21 fb                	and    ebx,edi
c00050f0:	83 e3 27             	and    ebx,0x27
c00050f3:	31 d3                	xor    ebx,edx
c00050f5:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050fc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005104:	e8 81 de ff ff       	call   c0002f8a <sync_fs>
c0005109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000510d:	83 ec 0c             	sub    esp,0xc
c0005110:	56                   	push   esi
c0005111:	e8 36 0d 00 00       	call   c0005e4c <ff_memfree>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000511d:	83 c4 50             	add    esp,0x50
c0005120:	5b                   	pop    ebx
c0005121:	5e                   	pop    esi
c0005122:	5f                   	pop    edi
c0005123:	c3                   	ret    

c0005124 <f_utime>:
c0005124:	56                   	push   esi
c0005125:	b9 02 00 00 00       	mov    ecx,0x2
c000512a:	53                   	push   ebx
c000512b:	83 ec 54             	sub    esp,0x54
c000512e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005132:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005136:	8d 44 24 60          	lea    eax,[esp+0x60]
c000513a:	e8 73 d5 ff ff       	call   c00026b2 <mount_volume>
c000513f:	85 c0                	test   eax,eax
c0005141:	0f 85 87 00 00 00    	jne    c00051ce <f_utime+0xaa>
c0005147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000514b:	83 ec 0c             	sub    esp,0xc
c000514e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005152:	68 00 02 00 00       	push   0x200
c0005157:	e8 d8 0c 00 00       	call   c0005e34 <ff_memalloc>
c000515c:	83 c4 10             	add    esp,0x10
c000515f:	89 c3                	mov    ebx,eax
c0005161:	b8 11 00 00 00       	mov    eax,0x11
c0005166:	85 db                	test   ebx,ebx
c0005168:	74 64                	je     c00051ce <f_utime+0xaa>
c000516a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005172:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005175:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005179:	e8 7c ea ff ff       	call   c0003bfa <follow_path>
c000517e:	85 c0                	test   eax,eax
c0005180:	75 38                	jne    c00051ba <f_utime+0x96>
c0005182:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005186:	b8 06 00 00 00       	mov    eax,0x6
c000518b:	80 e2 a0             	and    dl,0xa0
c000518e:	75 2a                	jne    c00051ba <f_utime+0x96>
c0005190:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005194:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005198:	c1 e2 10             	shl    edx,0x10
c000519b:	09 c2                	or     edx,eax
c000519d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00051a1:	83 c0 16             	add    eax,0x16
c00051a4:	e8 70 ce ff ff       	call   c0002019 <st_dword>
c00051a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ad:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b5:	e8 d0 dd ff ff       	call   c0002f8a <sync_fs>
c00051ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051be:	83 ec 0c             	sub    esp,0xc
c00051c1:	53                   	push   ebx
c00051c2:	e8 85 0c 00 00       	call   c0005e4c <ff_memfree>
c00051c7:	83 c4 10             	add    esp,0x10
c00051ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051ce:	83 c4 54             	add    esp,0x54
c00051d1:	5b                   	pop    ebx
c00051d2:	5e                   	pop    esi
c00051d3:	c3                   	ret    

c00051d4 <f_getlabel>:
c00051d4:	55                   	push   ebp
c00051d5:	31 c9                	xor    ecx,ecx
c00051d7:	57                   	push   edi
c00051d8:	56                   	push   esi
c00051d9:	53                   	push   ebx
c00051da:	83 ec 5c             	sub    esp,0x5c
c00051dd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051e1:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c00051e5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051e9:	e8 c4 d4 ff ff       	call   c00026b2 <mount_volume>
c00051ee:	85 c0                	test   eax,eax
c00051f0:	89 c3                	mov    ebx,eax
c00051f2:	0f 85 d9 00 00 00    	jne    c00052d1 <f_getlabel+0xfd>
c00051f8:	85 ff                	test   edi,edi
c00051fa:	0f 84 d1 00 00 00    	je     c00052d1 <f_getlabel+0xfd>
c0005200:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000520c:	31 d2                	xor    edx,edx
c000520e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005216:	e8 1c e3 ff ff       	call   c0003537 <dir_sdi>
c000521b:	85 c0                	test   eax,eax
c000521d:	89 c3                	mov    ebx,eax
c000521f:	0f 85 a2 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c0005225:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005229:	ba 01 00 00 00       	mov    edx,0x1
c000522e:	e8 fe e6 ff ff       	call   c0003931 <dir_read>
c0005233:	85 c0                	test   eax,eax
c0005235:	89 c3                	mov    ebx,eax
c0005237:	0f 85 8a 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c000523d:	31 f6                	xor    esi,esi
c000523f:	31 d2                	xor    edx,edx
c0005241:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005245:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000524c:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c0005250:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005255:	89 c8                	mov    eax,ecx
c0005257:	e8 13 ce ff ff       	call   c000206f <dbc_1st>
c000525c:	85 c0                	test   eax,eax
c000525e:	74 19                	je     c0005279 <f_getlabel+0xa5>
c0005260:	83 fd 0b             	cmp    ebp,0xb
c0005263:	74 14                	je     c0005279 <f_getlabel+0xa5>
c0005265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005269:	c1 e1 08             	shl    ecx,0x8
c000526c:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0005270:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005273:	09 c1                	or     ecx,eax
c0005275:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005279:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000527e:	52                   	push   edx
c000527f:	52                   	push   edx
c0005280:	68 b5 01 00 00       	push   0x1b5
c0005285:	50                   	push   eax
c0005286:	e8 75 0c 00 00       	call   c0005f00 <ff_oem2uni>
c000528b:	83 c4 10             	add    esp,0x10
c000528e:	0f b7 c0             	movzx  eax,ax
c0005291:	85 c0                	test   eax,eax
c0005293:	74 1f                	je     c00052b4 <f_getlabel+0xe0>
c0005295:	8d 14 37             	lea    edx,[edi+esi*1]
c0005298:	b9 04 00 00 00       	mov    ecx,0x4
c000529d:	e8 ab ce ff ff       	call   c000214d <put_utf>
c00052a2:	0f b6 c0             	movzx  eax,al
c00052a5:	85 c0                	test   eax,eax
c00052a7:	74 0b                	je     c00052b4 <f_getlabel+0xe0>
c00052a9:	01 c6                	add    esi,eax
c00052ab:	83 fd 0b             	cmp    ebp,0xb
c00052ae:	74 06                	je     c00052b6 <f_getlabel+0xe2>
c00052b0:	89 ea                	mov    edx,ebp
c00052b2:	eb 8d                	jmp    c0005241 <f_getlabel+0x6d>
c00052b4:	31 f6                	xor    esi,esi
c00052b6:	01 fe                	add    esi,edi
c00052b8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00052bb:	39 f7                	cmp    edi,esi
c00052bd:	74 12                	je     c00052d1 <f_getlabel+0xfd>
c00052bf:	4e                   	dec    esi
c00052c0:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00052c3:	74 f3                	je     c00052b8 <f_getlabel+0xe4>
c00052c5:	eb 0a                	jmp    c00052d1 <f_getlabel+0xfd>
c00052c7:	83 fb 04             	cmp    ebx,0x4
c00052ca:	75 05                	jne    c00052d1 <f_getlabel+0xfd>
c00052cc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00052cf:	31 db                	xor    ebx,ebx
c00052d1:	85 db                	test   ebx,ebx
c00052d3:	75 49                	jne    c000531e <f_getlabel+0x14a>
c00052d5:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052da:	74 42                	je     c000531e <f_getlabel+0x14a>
c00052dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052e3:	e8 6d d2 ff ff       	call   c0002555 <move_window>
c00052e8:	85 c0                	test   eax,eax
c00052ea:	89 c3                	mov    ebx,eax
c00052ec:	75 30                	jne    c000531e <f_getlabel+0x14a>
c00052ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052f2:	b8 43 00 00 00       	mov    eax,0x43
c00052f7:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052fa:	83 f9 03             	cmp    ecx,0x3
c00052fd:	74 10                	je     c000530f <f_getlabel+0x13b>
c00052ff:	83 f9 04             	cmp    ecx,0x4
c0005302:	b8 64 00 00 00       	mov    eax,0x64
c0005307:	b9 27 00 00 00       	mov    ecx,0x27
c000530c:	0f 45 c1             	cmovne eax,ecx
c000530f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005313:	e8 e5 cc ff ff       	call   c0001ffd <ld_dword>
c0005318:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000531c:	89 07                	mov    DWORD PTR [edi],eax
c000531e:	83 c4 5c             	add    esp,0x5c
c0005321:	89 d8                	mov    eax,ebx
c0005323:	5b                   	pop    ebx
c0005324:	5e                   	pop    esi
c0005325:	5f                   	pop    edi
c0005326:	5d                   	pop    ebp
c0005327:	c3                   	ret    

c0005328 <f_setlabel>:
c0005328:	57                   	push   edi
c0005329:	b9 02 00 00 00       	mov    ecx,0x2
c000532e:	56                   	push   esi
c000532f:	53                   	push   ebx
c0005330:	83 ec 50             	sub    esp,0x50
c0005333:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005337:	8d 44 24 60          	lea    eax,[esp+0x60]
c000533b:	e8 72 d3 ff ff       	call   c00026b2 <mount_volume>
c0005340:	85 c0                	test   eax,eax
c0005342:	89 c6                	mov    esi,eax
c0005344:	0f 85 65 01 00 00    	jne    c00054af <f_setlabel+0x187>
c000534a:	b9 0b 00 00 00       	mov    ecx,0xb
c000534f:	ba 20 00 00 00       	mov    edx,0x20
c0005354:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005358:	31 db                	xor    ebx,ebx
c000535a:	e8 d2 cc ff ff       	call   c0002031 <mem_set>
c000535f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005363:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005366:	76 5d                	jbe    c00053c5 <f_setlabel+0x9d>
c0005368:	8d 44 24 60          	lea    eax,[esp+0x60]
c000536c:	e8 04 cd ff ff       	call   c0002075 <tchar2uni>
c0005371:	3d ff ff 00 00       	cmp    eax,0xffff
c0005376:	76 0a                	jbe    c0005382 <f_setlabel+0x5a>
c0005378:	be 06 00 00 00       	mov    esi,0x6
c000537d:	e9 2d 01 00 00       	jmp    c00054af <f_setlabel+0x187>
c0005382:	83 ec 0c             	sub    esp,0xc
c0005385:	50                   	push   eax
c0005386:	e8 ed 0b 00 00       	call   c0005f78 <ff_wtoupper>
c000538b:	5a                   	pop    edx
c000538c:	59                   	pop    ecx
c000538d:	68 b5 01 00 00       	push   0x1b5
c0005392:	50                   	push   eax
c0005393:	e8 cc 0a 00 00       	call   c0005e64 <ff_uni2oem>
c0005398:	83 c4 10             	add    esp,0x10
c000539b:	0f b7 f0             	movzx  esi,ax
c000539e:	85 f6                	test   esi,esi
c00053a0:	89 f7                	mov    edi,esi
c00053a2:	74 d4                	je     c0005378 <f_setlabel+0x50>
c00053a4:	89 f2                	mov    edx,esi
c00053a6:	b8 d0 21 02 c0       	mov    eax,0xc00221d0
c00053ab:	e8 ae cc ff ff       	call   c000205e <chk_chr>
c00053b0:	85 c0                	test   eax,eax
c00053b2:	75 c4                	jne    c0005378 <f_setlabel+0x50>
c00053b4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00053ba:	0f 87 c9 00 00 00    	ja     c0005489 <f_setlabel+0x161>
c00053c0:	e9 e0 00 00 00       	jmp    c00054a5 <f_setlabel+0x17d>
c00053c5:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ca:	74 ac                	je     c0005378 <f_setlabel+0x50>
c00053cc:	85 db                	test   ebx,ebx
c00053ce:	74 0e                	je     c00053de <f_setlabel+0xb6>
c00053d0:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053d5:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053d8:	75 04                	jne    c00053de <f_setlabel+0xb6>
c00053da:	89 c3                	mov    ebx,eax
c00053dc:	eb ee                	jmp    c00053cc <f_setlabel+0xa4>
c00053de:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053ea:	31 d2                	xor    edx,edx
c00053ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053f4:	e8 3e e1 ff ff       	call   c0003537 <dir_sdi>
c00053f9:	85 c0                	test   eax,eax
c00053fb:	89 c6                	mov    esi,eax
c00053fd:	0f 85 ac 00 00 00    	jne    c00054af <f_setlabel+0x187>
c0005403:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005407:	ba 01 00 00 00       	mov    edx,0x1
c000540c:	e8 20 e5 ff ff       	call   c0003931 <dir_read>
c0005411:	85 c0                	test   eax,eax
c0005413:	75 18                	jne    c000542d <f_setlabel+0x105>
c0005415:	85 db                	test   ebx,ebx
c0005417:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000541b:	74 0b                	je     c0005428 <f_setlabel+0x100>
c000541d:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005421:	b9 0b 00 00 00       	mov    ecx,0xb
c0005426:	eb 47                	jmp    c000546f <f_setlabel+0x147>
c0005428:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000542b:	eb 47                	jmp    c0005474 <f_setlabel+0x14c>
c000542d:	83 f8 04             	cmp    eax,0x4
c0005430:	75 53                	jne    c0005485 <f_setlabel+0x15d>
c0005432:	85 db                	test   ebx,ebx
c0005434:	74 79                	je     c00054af <f_setlabel+0x187>
c0005436:	8d 44 24 20          	lea    eax,[esp+0x20]
c000543a:	ba 01 00 00 00       	mov    edx,0x1
c000543f:	e8 88 e4 ff ff       	call   c00038cc <dir_alloc>
c0005444:	85 c0                	test   eax,eax
c0005446:	89 c6                	mov    esi,eax
c0005448:	75 65                	jne    c00054af <f_setlabel+0x187>
c000544a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000544e:	b9 20 00 00 00       	mov    ecx,0x20
c0005453:	31 d2                	xor    edx,edx
c0005455:	e8 d7 cb ff ff       	call   c0002031 <mem_set>
c000545a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000545e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005463:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005467:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000546b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000546f:	e8 a8 cb ff ff       	call   c000201c <mem_cpy>
c0005474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005478:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000547c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005480:	e8 05 db ff ff       	call   c0002f8a <sync_fs>
c0005485:	89 c6                	mov    esi,eax
c0005487:	eb 26                	jmp    c00054af <f_setlabel+0x187>
c0005489:	83 fb 09             	cmp    ebx,0x9
c000548c:	0f 87 e6 fe ff ff    	ja     c0005378 <f_setlabel+0x50>
c0005492:	89 f0                	mov    eax,esi
c0005494:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005498:	43                   	inc    ebx
c0005499:	89 f8                	mov    eax,edi
c000549b:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000549f:	43                   	inc    ebx
c00054a0:	e9 ba fe ff ff       	jmp    c000535f <f_setlabel+0x37>
c00054a5:	83 fb 0a             	cmp    ebx,0xa
c00054a8:	76 ef                	jbe    c0005499 <f_setlabel+0x171>
c00054aa:	e9 c9 fe ff ff       	jmp    c0005378 <f_setlabel+0x50>
c00054af:	83 c4 50             	add    esp,0x50
c00054b2:	89 f0                	mov    eax,esi
c00054b4:	5b                   	pop    ebx
c00054b5:	5e                   	pop    esi
c00054b6:	5f                   	pop    edi
c00054b7:	c3                   	ret    

c00054b8 <f_expand>:
c00054b8:	55                   	push   ebp
c00054b9:	57                   	push   edi
c00054ba:	56                   	push   esi
c00054bb:	53                   	push   ebx
c00054bc:	83 ec 2c             	sub    esp,0x2c
c00054bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054c7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054cf:	89 d8                	mov    eax,ebx
c00054d1:	e8 d6 cf ff ff       	call   c00024ac <validate>
c00054d6:	85 c0                	test   eax,eax
c00054d8:	89 c6                	mov    esi,eax
c00054da:	0f 85 3b 01 00 00    	jne    c000561b <f_expand+0x163>
c00054e0:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054e4:	85 f6                	test   esi,esi
c00054e6:	0f 85 2f 01 00 00    	jne    c000561b <f_expand+0x163>
c00054ec:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054f1:	75 0a                	jne    c00054fd <f_expand+0x45>
c00054f3:	be 07 00 00 00       	mov    esi,0x7
c00054f8:	e9 1e 01 00 00       	jmp    c000561b <f_expand+0x163>
c00054fd:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005501:	75 f0                	jne    c00054f3 <f_expand+0x3b>
c0005503:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005507:	74 ea                	je     c00054f3 <f_expand+0x3b>
c0005509:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000550d:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005511:	c1 e7 09             	shl    edi,0x9
c0005514:	8d 47 ff             	lea    eax,[edi-0x1]
c0005517:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000551b:	0f 95 c0             	setne  al
c000551e:	31 d2                	xor    edx,edx
c0005520:	0f b6 c0             	movzx  eax,al
c0005523:	89 c5                	mov    ebp,eax
c0005525:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005529:	f7 f7                	div    edi
c000552b:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000552e:	01 e8                	add    eax,ebp
c0005530:	83 ff 01             	cmp    edi,0x1
c0005533:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005537:	76 05                	jbe    c000553e <f_expand+0x86>
c0005539:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000553c:	77 05                	ja     c0005543 <f_expand+0x8b>
c000553e:	bf 02 00 00 00       	mov    edi,0x2
c0005543:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005546:	89 fd                	mov    ebp,edi
c0005548:	31 c9                	xor    ecx,ecx
c000554a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000554e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005550:	89 ea                	mov    edx,ebp
c0005552:	45                   	inc    ebp
c0005553:	e8 da de ff ff       	call   c0003432 <get_fat.isra.2>
c0005558:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000555c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005560:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005563:	77 05                	ja     c000556a <f_expand+0xb2>
c0005565:	bd 02 00 00 00       	mov    ebp,0x2
c000556a:	83 f8 01             	cmp    eax,0x1
c000556d:	74 20                	je     c000558f <f_expand+0xd7>
c000556f:	83 f8 ff             	cmp    eax,0xffffffff
c0005572:	74 25                	je     c0005599 <f_expand+0xe1>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 09                	jne    c0005581 <f_expand+0xc9>
c0005578:	41                   	inc    ecx
c0005579:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000557d:	75 07                	jne    c0005586 <f_expand+0xce>
c000557f:	eb 1f                	jmp    c00055a0 <f_expand+0xe8>
c0005581:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005584:	31 c9                	xor    ecx,ecx
c0005586:	39 fd                	cmp    ebp,edi
c0005588:	75 c0                	jne    c000554a <f_expand+0x92>
c000558a:	e9 64 ff ff ff       	jmp    c00054f3 <f_expand+0x3b>
c000558f:	be 02 00 00 00       	mov    esi,0x2
c0005594:	e9 82 00 00 00       	jmp    c000561b <f_expand+0x163>
c0005599:	be 01 00 00 00       	mov    esi,0x1
c000559e:	eb 7b                	jmp    c000561b <f_expand+0x163>
c00055a0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055a5:	74 2b                	je     c00055d2 <f_expand+0x11a>
c00055a7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00055aa:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00055ae:	85 ed                	test   ebp,ebp
c00055b0:	74 24                	je     c00055d6 <f_expand+0x11e>
c00055b2:	83 c9 ff             	or     ecx,0xffffffff
c00055b5:	83 fd 01             	cmp    ebp,0x1
c00055b8:	74 03                	je     c00055bd <f_expand+0x105>
c00055ba:	8d 4f 01             	lea    ecx,[edi+0x1]
c00055bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c1:	89 fa                	mov    edx,edi
c00055c3:	e8 e7 d3 ff ff       	call   c00029af <put_fat>
c00055c8:	85 c0                	test   eax,eax
c00055ca:	75 4d                	jne    c0005619 <f_expand+0x161>
c00055cc:	89 f8                	mov    eax,edi
c00055ce:	4d                   	dec    ebp
c00055cf:	47                   	inc    edi
c00055d0:	eb dc                	jmp    c00055ae <f_expand+0xf6>
c00055d2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055d5:	48                   	dec    eax
c00055d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055da:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055df:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055e2:	74 37                	je     c000561b <f_expand+0x163>
c00055e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055ee:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055f1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055f4:	83 c8 40             	or     eax,0x40
c00055f7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055fa:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055fd:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005600:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005603:	39 c8                	cmp    eax,ecx
c0005605:	77 14                	ja     c000561b <f_expand+0x163>
c0005607:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000560b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000560e:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005611:	83 c8 01             	or     eax,0x1
c0005614:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005617:	eb 02                	jmp    c000561b <f_expand+0x163>
c0005619:	89 c6                	mov    esi,eax
c000561b:	83 c4 2c             	add    esp,0x2c
c000561e:	89 f0                	mov    eax,esi
c0005620:	5b                   	pop    ebx
c0005621:	5e                   	pop    esi
c0005622:	5f                   	pop    edi
c0005623:	5d                   	pop    ebp
c0005624:	c3                   	ret    

c0005625 <f_mkfs>:
c0005625:	55                   	push   ebp
c0005626:	57                   	push   edi
c0005627:	56                   	push   esi
c0005628:	be 0b 00 00 00       	mov    esi,0xb
c000562d:	53                   	push   ebx
c000562e:	83 ec 5c             	sub    esp,0x5c
c0005631:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005635:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005639:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000563d:	e8 1e ce ff ff       	call   c0002460 <get_ldnumber>
c0005642:	85 c0                	test   eax,eax
c0005644:	0f 88 e0 07 00 00    	js     c0005e2a <f_mkfs+0x805>
c000564a:	8b 14 85 a0 84 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7b60]
c0005651:	85 d2                	test   edx,edx
c0005653:	74 03                	je     c0005658 <f_mkfs+0x33>
c0005655:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005658:	85 db                	test   ebx,ebx
c000565a:	75 05                	jne    c0005661 <f_mkfs+0x3c>
c000565c:	bb c0 21 02 c0       	mov    ebx,0xc00221c0
c0005661:	0f b6 c0             	movzx  eax,al
c0005664:	83 ec 0c             	sub    esp,0xc
c0005667:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000566b:	be 03 00 00 00       	mov    esi,0x3
c0005670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005674:	e8 29 c9 ff ff       	call   c0001fa2 <disk_initialize>
c0005679:	83 c4 10             	add    esp,0x10
c000567c:	a8 01                	test   al,0x1
c000567e:	0f 85 a6 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005684:	a8 04                	test   al,0x4
c0005686:	be 0a 00 00 00       	mov    esi,0xa
c000568b:	0f 85 99 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005691:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005694:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005698:	85 c0                	test   eax,eax
c000569a:	75 20                	jne    c00056bc <f_mkfs+0x97>
c000569c:	51                   	push   ecx
c000569d:	8d 44 24 44          	lea    eax,[esp+0x44]
c00056a1:	50                   	push   eax
c00056a2:	6a 03                	push   0x3
c00056a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00056a8:	e8 24 c9 ff ff       	call   c0001fd1 <disk_ioctl>
c00056ad:	83 c4 10             	add    esp,0x10
c00056b0:	85 c0                	test   eax,eax
c00056b2:	74 08                	je     c00056bc <f_mkfs+0x97>
c00056b4:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056c0:	8d 42 ff             	lea    eax,[edx-0x1]
c00056c3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056c8:	77 04                	ja     c00056ce <f_mkfs+0xa9>
c00056ca:	85 c2                	test   edx,eax
c00056cc:	74 08                	je     c00056d6 <f_mkfs+0xb1>
c00056ce:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056d6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056d9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e1:	48                   	dec    eax
c00056e2:	3c 01                	cmp    al,0x1
c00056e4:	76 05                	jbe    c00056eb <f_mkfs+0xc6>
c00056e6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00056f2:	48                   	dec    eax
c00056f3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056f8:	77 15                	ja     c000570f <f_mkfs+0xea>
c00056fa:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c00056ff:	b8 00 02 00 00       	mov    eax,0x200
c0005704:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005709:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000570d:	eb 08                	jmp    c0005717 <f_mkfs+0xf2>
c000570f:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005717:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000571a:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005720:	77 0f                	ja     c0005731 <f_mkfs+0x10c>
c0005722:	8d 47 ff             	lea    eax,[edi-0x1]
c0005725:	85 f8                	test   eax,edi
c0005727:	b8 00 00 00 00       	mov    eax,0x0
c000572c:	0f 45 f8             	cmovne edi,eax
c000572f:	eb 02                	jmp    c0005733 <f_mkfs+0x10e>
c0005731:	31 ff                	xor    edi,edi
c0005733:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000573b:	77 0a                	ja     c0005747 <f_mkfs+0x122>
c000573d:	be 11 00 00 00       	mov    esi,0x11
c0005742:	e9 e3 06 00 00       	jmp    c0005e2a <f_mkfs+0x805>
c0005747:	85 ed                	test   ebp,ebp
c0005749:	8b 33                	mov    esi,DWORD PTR [ebx]
c000574b:	89 eb                	mov    ebx,ebp
c000574d:	75 1e                	jne    c000576d <f_mkfs+0x148>
c000574f:	83 ec 0c             	sub    esp,0xc
c0005752:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005759:	25 00 fe ff ff       	and    eax,0xfffffe00
c000575e:	50                   	push   eax
c000575f:	e8 d0 06 00 00       	call   c0005e34 <ff_memalloc>
c0005764:	83 c4 10             	add    esp,0x10
c0005767:	85 c0                	test   eax,eax
c0005769:	89 c3                	mov    ebx,eax
c000576b:	74 d0                	je     c000573d <f_mkfs+0x118>
c000576d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005775:	52                   	push   edx
c0005776:	8d 44 24 48          	lea    eax,[esp+0x48]
c000577a:	50                   	push   eax
c000577b:	6a 01                	push   0x1
c000577d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005781:	e8 4b c8 ff ff       	call   c0001fd1 <disk_ioctl>
c0005786:	83 c4 10             	add    esp,0x10
c0005789:	85 c0                	test   eax,eax
c000578b:	0f 85 42 06 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005791:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005799:	89 f0                	mov    eax,esi
c000579b:	83 e0 08             	and    eax,0x8
c000579e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00057a2:	75 18                	jne    c00057bc <f_mkfs+0x197>
c00057a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057a8:	83 f8 3f             	cmp    eax,0x3f
c00057ab:	76 0f                	jbe    c00057bc <f_mkfs+0x197>
c00057ad:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00057b5:	83 e8 3f             	sub    eax,0x3f
c00057b8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00057bc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00057c4:	83 f8 7f             	cmp    eax,0x7f
c00057c7:	0f 86 5f 02 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c00057cd:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057d3:	b9 80 00 00 00       	mov    ecx,0x80
c00057d8:	77 05                	ja     c00057df <f_mkfs+0x1ba>
c00057da:	c1 ef 09             	shr    edi,0x9
c00057dd:	89 f9                	mov    ecx,edi
c00057df:	89 f0                	mov    eax,esi
c00057e1:	89 f7                	mov    edi,esi
c00057e3:	83 e0 01             	and    eax,0x1
c00057e6:	83 e7 02             	and    edi,0x2
c00057e9:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057ed:	0f b6 c0             	movzx  eax,al
c00057f0:	74 0a                	je     c00057fc <f_mkfs+0x1d7>
c00057f2:	85 c0                	test   eax,eax
c00057f4:	0f 84 53 01 00 00    	je     c000594d <f_mkfs+0x328>
c00057fa:	eb 37                	jmp    c0005833 <f_mkfs+0x20e>
c00057fc:	85 c0                	test   eax,eax
c00057fe:	be 13 00 00 00       	mov    esi,0x13
c0005803:	75 2e                	jne    c0005833 <f_mkfs+0x20e>
c0005805:	e9 e0 05 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c000580a:	83 f8 02             	cmp    eax,0x2
c000580d:	0f 85 11 02 00 00    	jne    c0005a24 <f_mkfs+0x3ff>
c0005813:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005819:	0f 86 e8 01 00 00    	jbe    c0005a07 <f_mkfs+0x3e2>
c000581f:	85 c9                	test   ecx,ecx
c0005821:	0f 85 d5 05 00 00    	jne    c0005dfc <f_mkfs+0x7d7>
c0005827:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000582a:	83 f9 40             	cmp    ecx,0x40
c000582d:	0f 87 d9 05 00 00    	ja     c0005e0c <f_mkfs+0x7e7>
c0005833:	85 c9                	test   ecx,ecx
c0005835:	89 cf                	mov    edi,ecx
c0005837:	75 1c                	jne    c0005855 <f_mkfs+0x230>
c0005839:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000583d:	b8 a0 21 02 c0       	mov    eax,0xc00221a0
c0005842:	bf 01 00 00 00       	mov    edi,0x1
c0005847:	c1 ee 0c             	shr    esi,0xc
c000584a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000584d:	85 d2                	test   edx,edx
c000584f:	0f 85 67 01 00 00    	jne    c00059bc <f_mkfs+0x397>
c0005855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005859:	31 d2                	xor    edx,edx
c000585b:	f7 f7                	div    edi
c000585d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005862:	0f 86 66 01 00 00    	jbe    c00059ce <f_mkfs+0x3a9>
c0005868:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000586d:	83 c0 02             	add    eax,0x2
c0005870:	01 c0                	add    eax,eax
c0005872:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000587a:	05 ff 01 00 00       	add    eax,0x1ff
c000587f:	c1 e8 09             	shr    eax,0x9
c0005882:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000588a:	c1 e0 05             	shl    eax,0x5
c000588d:	c1 e8 09             	shr    eax,0x9
c0005890:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005894:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005899:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000589d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058a1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00058a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00058a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ad:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00058b2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00058b6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00058ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00058be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00058c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00058c6:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00058ca:	f7 d8                	neg    eax
c00058cc:	21 c6                	and    esi,eax
c00058ce:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058d3:	29 d6                	sub    esi,edx
c00058d5:	83 f8 03             	cmp    eax,0x3
c00058d8:	0f 85 03 01 00 00    	jne    c00059e1 <f_mkfs+0x3bc>
c00058de:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058e2:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058e6:	89 f8                	mov    eax,edi
c00058e8:	c1 e0 04             	shl    eax,0x4
c00058eb:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00058ef:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058f3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058f7:	0f 82 2f 01 00 00    	jb     c0005a2c <f_mkfs+0x407>
c00058fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005901:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005905:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005909:	89 c2                	mov    edx,eax
c000590b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000590f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005914:	29 c2                	sub    edx,eax
c0005916:	89 d0                	mov    eax,edx
c0005918:	31 d2                	xor    edx,edx
c000591a:	f7 f7                	div    edi
c000591c:	89 c6                	mov    esi,eax
c000591e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005923:	83 f8 03             	cmp    eax,0x3
c0005926:	0f 85 de fe ff ff    	jne    c000580a <f_mkfs+0x1e5>
c000592c:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005932:	0f 87 03 01 00 00    	ja     c0005a3b <f_mkfs+0x416>
c0005938:	85 c9                	test   ecx,ecx
c000593a:	0f 85 ec 00 00 00    	jne    c0005a2c <f_mkfs+0x407>
c0005940:	83 ff 01             	cmp    edi,0x1
c0005943:	0f 86 e3 00 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c0005949:	d1 ef                	shr    edi,1
c000594b:	89 f9                	mov    ecx,edi
c000594d:	85 c9                	test   ecx,ecx
c000594f:	89 ce                	mov    esi,ecx
c0005951:	75 25                	jne    c0005978 <f_mkfs+0x353>
c0005953:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005957:	b8 b0 21 02 c0       	mov    eax,0xc00221b0
c000595c:	b9 01 00 00 00       	mov    ecx,0x1
c0005961:	c1 ee 11             	shr    esi,0x11
c0005964:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005967:	85 d2                	test   edx,edx
c0005969:	74 0b                	je     c0005976 <f_mkfs+0x351>
c000596b:	83 c0 02             	add    eax,0x2
c000596e:	39 f2                	cmp    edx,esi
c0005970:	77 04                	ja     c0005976 <f_mkfs+0x351>
c0005972:	01 c9                	add    ecx,ecx
c0005974:	eb ee                	jmp    c0005964 <f_mkfs+0x33f>
c0005976:	31 f6                	xor    esi,esi
c0005978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000597c:	31 d2                	xor    edx,edx
c000597e:	f7 f1                	div    ecx
c0005980:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005987:	2d f6 ff 00 00       	sub    eax,0xfff6
c000598c:	c1 ea 09             	shr    edx,0x9
c000598f:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005994:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005998:	0f 87 8e 00 00 00    	ja     c0005a2c <f_mkfs+0x407>
c000599e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00059a6:	89 cf                	mov    edi,ecx
c00059a8:	89 f1                	mov    ecx,esi
c00059aa:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00059b2:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00059b7:	e9 d8 fe ff ff       	jmp    c0005894 <f_mkfs+0x26f>
c00059bc:	83 c0 02             	add    eax,0x2
c00059bf:	39 f2                	cmp    edx,esi
c00059c1:	0f 87 8e fe ff ff    	ja     c0005855 <f_mkfs+0x230>
c00059c7:	01 ff                	add    edi,edi
c00059c9:	e9 7c fe ff ff       	jmp    c000584a <f_mkfs+0x225>
c00059ce:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00059d3:	8d 04 40             	lea    eax,[eax+eax*2]
c00059d6:	40                   	inc    eax
c00059d7:	d1 e8                	shr    eax,1
c00059d9:	83 c0 03             	add    eax,0x3
c00059dc:	e9 91 fe ff ff       	jmp    c0005872 <f_mkfs+0x24d>
c00059e1:	31 d2                	xor    edx,edx
c00059e3:	89 f0                	mov    eax,esi
c00059e5:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059e9:	85 d2                	test   edx,edx
c00059eb:	74 09                	je     c00059f6 <f_mkfs+0x3d1>
c00059ed:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059f1:	4e                   	dec    esi
c00059f2:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059f6:	89 f0                	mov    eax,esi
c00059f8:	31 d2                	xor    edx,edx
c00059fa:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059fe:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005a02:	e9 df fe ff ff       	jmp    c00058e6 <f_mkfs+0x2c1>
c0005a07:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a0d:	77 2c                	ja     c0005a3b <f_mkfs+0x416>
c0005a0f:	85 c9                	test   ecx,ecx
c0005a11:	75 19                	jne    c0005a2c <f_mkfs+0x407>
c0005a13:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005a16:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a1c:	0f 86 11 fe ff ff    	jbe    c0005833 <f_mkfs+0x20e>
c0005a22:	eb 08                	jmp    c0005a2c <f_mkfs+0x407>
c0005a24:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a2a:	76 0a                	jbe    c0005a36 <f_mkfs+0x411>
c0005a2c:	be 0e 00 00 00       	mov    esi,0xe
c0005a31:	e9 b4 03 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c0005a36:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a3b:	31 d2                	xor    edx,edx
c0005a3d:	b9 00 02 00 00       	mov    ecx,0x200
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 e8 c5 ff ff       	call   c0002031 <mem_set>
c0005a49:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a4e:	ba 52 21 02 c0       	mov    edx,0xc0022152
c0005a53:	89 d8                	mov    eax,ebx
c0005a55:	e8 c2 c5 ff ff       	call   c000201c <mem_cpy>
c0005a5a:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a5d:	ba 00 02 00 00       	mov    edx,0x200
c0005a62:	e8 ae c5 ff ff       	call   c0002015 <st_word>
c0005a67:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a6c:	89 f8                	mov    eax,edi
c0005a6e:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a71:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a74:	e8 9c c5 ff ff       	call   c0002015 <st_word>
c0005a79:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a7d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a80:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a85:	83 f8 03             	cmp    eax,0x3
c0005a88:	b8 00 00 00 00       	mov    eax,0x0
c0005a8d:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005a92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a96:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005a9d:	e8 73 c5 ff ff       	call   c0002015 <st_word>
c0005aa2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005aa6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005aac:	77 0a                	ja     c0005ab8 <f_mkfs+0x493>
c0005aae:	8d 43 13             	lea    eax,[ebx+0x13]
c0005ab1:	e8 5f c5 ff ff       	call   c0002015 <st_word>
c0005ab6:	eb 08                	jmp    c0005ac0 <f_mkfs+0x49b>
c0005ab8:	8d 43 20             	lea    eax,[ebx+0x20]
c0005abb:	e8 59 c5 ff ff       	call   c0002019 <st_dword>
c0005ac0:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005ac4:	8d 43 18             	lea    eax,[ebx+0x18]
c0005ac7:	ba 3f 00 00 00       	mov    edx,0x3f
c0005acc:	e8 44 c5 ff ff       	call   c0002015 <st_word>
c0005ad1:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005ad4:	ba ff 00 00 00       	mov    edx,0xff
c0005ad9:	e8 37 c5 ff ff       	call   c0002015 <st_word>
c0005ade:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ae2:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005ae5:	e8 2f c5 ff ff       	call   c0002019 <st_dword>
c0005aea:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005aef:	83 f8 03             	cmp    eax,0x3
c0005af2:	75 57                	jne    c0005b4b <f_mkfs+0x526>
c0005af4:	8d 43 43             	lea    eax,[ebx+0x43]
c0005af7:	ba 00 00 21 50       	mov    edx,0x50210000
c0005afc:	e8 18 c5 ff ff       	call   c0002019 <st_dword>
c0005b01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005b05:	8d 43 24             	lea    eax,[ebx+0x24]
c0005b08:	e8 0c c5 ff ff       	call   c0002019 <st_dword>
c0005b0d:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005b10:	ba 02 00 00 00       	mov    edx,0x2
c0005b15:	e8 ff c4 ff ff       	call   c0002019 <st_dword>
c0005b1a:	8d 43 30             	lea    eax,[ebx+0x30]
c0005b1d:	ba 01 00 00 00       	mov    edx,0x1
c0005b22:	e8 ee c4 ff ff       	call   c0002015 <st_word>
c0005b27:	8d 43 32             	lea    eax,[ebx+0x32]
c0005b2a:	ba 06 00 00 00       	mov    edx,0x6
c0005b2f:	e8 e1 c4 ff ff       	call   c0002015 <st_word>
c0005b34:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b37:	b9 13 00 00 00       	mov    ecx,0x13
c0005b3c:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005b40:	ba 5e 21 02 c0       	mov    edx,0xc002215e
c0005b45:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005b49:	eb 2f                	jmp    c0005b7a <f_mkfs+0x555>
c0005b4b:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b53:	e8 c1 c4 ff ff       	call   c0002019 <st_dword>
c0005b58:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b5d:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b60:	e8 b0 c4 ff ff       	call   c0002015 <st_word>
c0005b65:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b68:	b9 13 00 00 00       	mov    ecx,0x13
c0005b6d:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b71:	ba 72 21 02 c0       	mov    edx,0xc0022172
c0005b76:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b7a:	e8 9d c4 ff ff       	call   c000201c <mem_cpy>
c0005b7f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b85:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b8e:	e8 82 c4 ff ff       	call   c0002015 <st_word>
c0005b93:	6a 01                	push   0x1
c0005b95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b99:	53                   	push   ebx
c0005b9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b9e:	e8 18 c4 ff ff       	call   c0001fbb <disk_write>
c0005ba3:	83 c4 10             	add    esp,0x10
c0005ba6:	85 c0                	test   eax,eax
c0005ba8:	0f 85 25 02 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005bae:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005bb3:	83 f8 03             	cmp    eax,0x3
c0005bb6:	0f 85 98 00 00 00    	jne    c0005c54 <f_mkfs+0x62f>
c0005bbc:	6a 01                	push   0x1
c0005bbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005bc2:	83 c0 06             	add    eax,0x6
c0005bc5:	50                   	push   eax
c0005bc6:	53                   	push   ebx
c0005bc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bcb:	e8 eb c3 ff ff       	call   c0001fbb <disk_write>
c0005bd0:	b9 00 02 00 00       	mov    ecx,0x200
c0005bd5:	31 d2                	xor    edx,edx
c0005bd7:	89 d8                	mov    eax,ebx
c0005bd9:	e8 53 c4 ff ff       	call   c0002031 <mem_set>
c0005bde:	ba 52 52 61 41       	mov    edx,0x41615252
c0005be3:	89 d8                	mov    eax,ebx
c0005be5:	e8 2f c4 ff ff       	call   c0002019 <st_dword>
c0005bea:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bf0:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bf5:	e8 1f c4 ff ff       	call   c0002019 <st_dword>
c0005bfa:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bfd:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005c03:	e8 11 c4 ff ff       	call   c0002019 <st_dword>
c0005c08:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005c0e:	ba 02 00 00 00       	mov    edx,0x2
c0005c13:	e8 01 c4 ff ff       	call   c0002019 <st_dword>
c0005c18:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005c1e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005c23:	e8 ed c3 ff ff       	call   c0002015 <st_word>
c0005c28:	6a 01                	push   0x1
c0005c2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005c2e:	83 c0 07             	add    eax,0x7
c0005c31:	50                   	push   eax
c0005c32:	53                   	push   ebx
c0005c33:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005c37:	e8 7f c3 ff ff       	call   c0001fbb <disk_write>
c0005c3c:	83 c4 20             	add    esp,0x20
c0005c3f:	6a 01                	push   0x1
c0005c41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c45:	40                   	inc    eax
c0005c46:	50                   	push   eax
c0005c47:	53                   	push   ebx
c0005c48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c4c:	e8 6a c3 ff ff       	call   c0001fbb <disk_write>
c0005c51:	83 c4 10             	add    esp,0x10
c0005c54:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c58:	31 d2                	xor    edx,edx
c0005c5a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c5e:	c1 e8 09             	shr    eax,0x9
c0005c61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c65:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c6b:	89 d8                	mov    eax,ebx
c0005c6d:	e8 bf c3 ff ff       	call   c0002031 <mem_set>
c0005c72:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c77:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005c7c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005c84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c89:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c8d:	83 f8 01             	cmp    eax,0x1
c0005c90:	0f 44 d1             	cmove  edx,ecx
c0005c93:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005c97:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c9c:	75 21                	jne    c0005cbf <f_mkfs+0x69a>
c0005c9e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ca3:	89 d8                	mov    eax,ebx
c0005ca5:	e8 6f c3 ff ff       	call   c0002019 <st_dword>
c0005caa:	8d 43 04             	lea    eax,[ebx+0x4]
c0005cad:	83 ca ff             	or     edx,0xffffffff
c0005cb0:	e8 64 c3 ff ff       	call   c0002019 <st_dword>
c0005cb5:	8d 43 08             	lea    eax,[ebx+0x8]
c0005cb8:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005cbd:	eb 06                	jmp    c0005cc5 <f_mkfs+0x6a0>
c0005cbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005cc3:	89 d8                	mov    eax,ebx
c0005cc5:	e8 4f c3 ff ff       	call   c0002019 <st_dword>
c0005cca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cd2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005cd6:	0f 46 c6             	cmovbe eax,esi
c0005cd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cdd:	50                   	push   eax
c0005cde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ce2:	53                   	push   ebx
c0005ce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ce7:	e8 cf c2 ff ff       	call   c0001fbb <disk_write>
c0005cec:	83 c4 10             	add    esp,0x10
c0005cef:	85 c0                	test   eax,eax
c0005cf1:	0f 85 dc 00 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005cf7:	b9 00 02 00 00       	mov    ecx,0x200
c0005cfc:	31 d2                	xor    edx,edx
c0005cfe:	89 d8                	mov    eax,ebx
c0005d00:	e8 2c c3 ff ff       	call   c0002031 <mem_set>
c0005d05:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005d09:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005d0d:	29 ce                	sub    esi,ecx
c0005d0f:	75 bd                	jne    c0005cce <f_mkfs+0x6a9>
c0005d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d15:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005d1d:	40                   	inc    eax
c0005d1e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005d22:	0f 87 6f ff ff ff    	ja     c0005c97 <f_mkfs+0x672>
c0005d28:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d2d:	83 f8 03             	cmp    eax,0x3
c0005d30:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005d35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d39:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d3d:	0f 46 f7             	cmovbe esi,edi
c0005d40:	56                   	push   esi
c0005d41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d45:	53                   	push   ebx
c0005d46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d4a:	e8 6c c2 ff ff       	call   c0001fbb <disk_write>
c0005d4f:	83 c4 10             	add    esp,0x10
c0005d52:	85 c0                	test   eax,eax
c0005d54:	75 7d                	jne    c0005dd3 <f_mkfs+0x7ae>
c0005d56:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d5a:	29 f7                	sub    edi,esi
c0005d5c:	75 d7                	jne    c0005d35 <f_mkfs+0x710>
c0005d5e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d63:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d68:	83 f8 03             	cmp    eax,0x3
c0005d6b:	74 1e                	je     c0005d8b <f_mkfs+0x766>
c0005d6d:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d75:	b9 06 00 00 00       	mov    ecx,0x6
c0005d7a:	77 0f                	ja     c0005d8b <f_mkfs+0x766>
c0005d7c:	83 f8 02             	cmp    eax,0x2
c0005d7f:	b9 04 00 00 00       	mov    ecx,0x4
c0005d84:	74 05                	je     c0005d8b <f_mkfs+0x766>
c0005d86:	b9 01 00 00 00       	mov    ecx,0x1
c0005d8b:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d90:	75 2a                	jne    c0005dbc <f_mkfs+0x797>
c0005d92:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d9a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d9e:	83 ec 0c             	sub    esp,0xc
c0005da1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005da5:	53                   	push   ebx
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005dae:	e8 87 d2 ff ff       	call   c000303a <create_partition>
c0005db3:	83 c4 10             	add    esp,0x10
c0005db6:	85 c0                	test   eax,eax
c0005db8:	89 c6                	mov    esi,eax
c0005dba:	75 2e                	jne    c0005dea <f_mkfs+0x7c5>
c0005dbc:	50                   	push   eax
c0005dbd:	31 f6                	xor    esi,esi
c0005dbf:	6a 00                	push   0x0
c0005dc1:	6a 00                	push   0x0
c0005dc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005dc7:	e8 05 c2 ff ff       	call   c0001fd1 <disk_ioctl>
c0005dcc:	83 c4 10             	add    esp,0x10
c0005dcf:	85 c0                	test   eax,eax
c0005dd1:	74 17                	je     c0005dea <f_mkfs+0x7c5>
c0005dd3:	85 ed                	test   ebp,ebp
c0005dd5:	75 0c                	jne    c0005de3 <f_mkfs+0x7be>
c0005dd7:	83 ec 0c             	sub    esp,0xc
c0005dda:	53                   	push   ebx
c0005ddb:	e8 6c 00 00 00       	call   c0005e4c <ff_memfree>
c0005de0:	83 c4 10             	add    esp,0x10
c0005de3:	be 01 00 00 00       	mov    esi,0x1
c0005de8:	eb 40                	jmp    c0005e2a <f_mkfs+0x805>
c0005dea:	85 ed                	test   ebp,ebp
c0005dec:	75 3c                	jne    c0005e2a <f_mkfs+0x805>
c0005dee:	83 ec 0c             	sub    esp,0xc
c0005df1:	53                   	push   ebx
c0005df2:	e8 55 00 00 00       	call   c0005e4c <ff_memfree>
c0005df7:	83 c4 10             	add    esp,0x10
c0005dfa:	eb 2e                	jmp    c0005e2a <f_mkfs+0x805>
c0005dfc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e01:	0f 85 46 fb ff ff    	jne    c000594d <f_mkfs+0x328>
c0005e07:	e9 20 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e0c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e11:	0f 85 3c fb ff ff    	jne    c0005953 <f_mkfs+0x32e>
c0005e17:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005e1d:	89 cf                	mov    edi,ecx
c0005e1f:	0f 86 30 fa ff ff    	jbe    c0005855 <f_mkfs+0x230>
c0005e25:	e9 02 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e2a:	83 c4 5c             	add    esp,0x5c
c0005e2d:	89 f0                	mov    eax,esi
c0005e2f:	5b                   	pop    ebx
c0005e30:	5e                   	pop    esi
c0005e31:	5f                   	pop    edi
c0005e32:	5d                   	pop    ebp
c0005e33:	c3                   	ret    

c0005e34 <ff_memalloc>:
c0005e34:	83 ec 0c             	sub    esp,0xc
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e3e:	e8 2d 9c 00 00       	call   c000fa70 <malloc>
c0005e43:	83 c4 10             	add    esp,0x10
c0005e46:	83 c4 0c             	add    esp,0xc
c0005e49:	c3                   	ret    
c0005e4a:	66 90                	xchg   ax,ax

c0005e4c <ff_memfree>:
c0005e4c:	83 ec 0c             	sub    esp,0xc
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e56:	e8 25 9c 00 00       	call   c000fa80 <free>
c0005e5b:	83 c4 10             	add    esp,0x10
c0005e5e:	90                   	nop
c0005e5f:	83 c4 0c             	add    esp,0xc
c0005e62:	c3                   	ret    
c0005e63:	90                   	nop

c0005e64 <ff_uni2oem>:
c0005e64:	83 ec 14             	sub    esp,0x14
c0005e67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e6b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e6f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e76:	c7 44 24 0c a0 25 02 c0 	mov    DWORD PTR [esp+0xc],0xc00225a0
c0005e7e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e83:	77 0b                	ja     c0005e90 <ff_uni2oem+0x2c>
c0005e85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e89:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e8e:	eb 64                	jmp    c0005ef4 <ff_uni2oem+0x90>
c0005e90:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e98:	77 5a                	ja     c0005ef4 <ff_uni2oem+0x90>
c0005e9a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e9e:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005ea3:	75 4f                	jne    c0005ef4 <ff_uni2oem+0x90>
c0005ea5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005eac:	eb 12                	jmp    c0005ec0 <ff_uni2oem+0x5c>
c0005eae:	66 90                	xchg   ax,ax
c0005eb0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005eb5:	83 c0 01             	add    eax,0x1
c0005eb8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ec0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ec5:	83 f8 7f             	cmp    eax,0x7f
c0005ec8:	77 1a                	ja     c0005ee4 <ff_uni2oem+0x80>
c0005eca:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ecf:	8d 14 00             	lea    edx,[eax+eax*1]
c0005ed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ed6:	01 d0                	add    eax,edx
c0005ed8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005edb:	0f b7 c0             	movzx  eax,ax
c0005ede:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ee2:	75 cc                	jne    c0005eb0 <ff_uni2oem+0x4c>
c0005ee4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ee9:	83 e8 80             	sub    eax,0xffffff80
c0005eec:	0f b6 c0             	movzx  eax,al
c0005eef:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ef4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ef9:	83 c4 14             	add    esp,0x14
c0005efc:	c3                   	ret    
c0005efd:	8d 76 00             	lea    esi,[esi+0x0]

c0005f00 <ff_oem2uni>:
c0005f00:	83 ec 18             	sub    esp,0x18
c0005f03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005f0b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005f10:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005f14:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005f1b:	c7 44 24 10 a0 25 02 c0 	mov    DWORD PTR [esp+0x10],0xc00225a0
c0005f23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f28:	83 f8 7f             	cmp    eax,0x7f
c0005f2b:	77 0b                	ja     c0005f38 <ff_oem2uni+0x38>
c0005f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f31:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f36:	eb 34                	jmp    c0005f6c <ff_oem2uni+0x6c>
c0005f38:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f3c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f41:	75 29                	jne    c0005f6c <ff_oem2uni+0x6c>
c0005f43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f48:	3d ff 00 00 00       	cmp    eax,0xff
c0005f4d:	77 1d                	ja     c0005f6c <ff_oem2uni+0x6c>
c0005f4f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f54:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f59:	8d 14 00             	lea    edx,[eax+eax*1]
c0005f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f60:	01 d0                	add    eax,edx
c0005f62:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f65:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f6a:	66 90                	xchg   ax,ax
c0005f6c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f71:	83 c4 18             	add    esp,0x18
c0005f74:	c3                   	ret    
c0005f75:	8d 76 00             	lea    esi,[esi+0x0]

c0005f78 <ff_wtoupper>:
c0005f78:	83 ec 10             	sub    esp,0x10
c0005f7b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f83:	0f 87 a7 01 00 00    	ja     c0006130 <ff_wtoupper+0x1b8>
c0005f89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f8d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f92:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f97:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f9c:	77 0a                	ja     c0005fa8 <ff_wtoupper+0x30>
c0005f9e:	b8 a0 23 02 c0       	mov    eax,0xc00223a0
c0005fa3:	eb 0b                	jmp    c0005fb0 <ff_wtoupper+0x38>
c0005fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0005fa8:	b8 e0 22 02 c0       	mov    eax,0xc00222e0
c0005fad:	8d 76 00             	lea    esi,[esi+0x0]
c0005fb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb8:	8d 50 02             	lea    edx,[eax+0x2]
c0005fbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fbf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fc2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005fc7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fcc:	85 c0                	test   eax,eax
c0005fce:	0f 84 50 01 00 00    	je     c0006124 <ff_wtoupper+0x1ac>
c0005fd4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fd9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fde:	39 c2                	cmp    edx,eax
c0005fe0:	0f 82 3e 01 00 00    	jb     c0006124 <ff_wtoupper+0x1ac>
c0005fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fea:	8d 50 02             	lea    edx,[eax+0x2]
c0005fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ff1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ff4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005ff9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ffe:	c1 e8 08             	shr    eax,0x8
c0006001:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0006006:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000600b:	0f b6 c0             	movzx  eax,al
c000600e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006013:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006018:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000601d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0006022:	01 ca                	add    edx,ecx
c0006024:	39 d0                	cmp    eax,edx
c0006026:	0f 8d d4 00 00 00    	jge    c0006100 <ff_wtoupper+0x188>
c000602c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006031:	83 f8 08             	cmp    eax,0x8
c0006034:	0f 87 e6 00 00 00    	ja     c0006120 <ff_wtoupper+0x1a8>
c000603a:	8b 04 85 a0 22 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddd60]
c0006041:	ff e0                	jmp    eax
c0006043:	90                   	nop
c0006044:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006049:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000604e:	29 c2                	sub    edx,eax
c0006050:	89 d0                	mov    eax,edx
c0006052:	8d 14 00             	lea    edx,[eax+eax*1]
c0006055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006059:	01 d0                	add    eax,edx
c000605b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000605e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006063:	e9 94 00 00 00       	jmp    c00060fc <ff_wtoupper+0x184>
c0006068:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c000606d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006071:	89 d1                	mov    ecx,edx
c0006073:	29 c1                	sub    ecx,eax
c0006075:	89 c8                	mov    eax,ecx
c0006077:	83 e0 01             	and    eax,0x1
c000607a:	89 c2                	mov    edx,eax
c000607c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006081:	29 d0                	sub    eax,edx
c0006083:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006088:	eb 72                	jmp    c00060fc <ff_wtoupper+0x184>
c000608a:	66 90                	xchg   ax,ax
c000608c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006091:	83 e8 10             	sub    eax,0x10
c0006094:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006099:	eb 61                	jmp    c00060fc <ff_wtoupper+0x184>
c000609b:	90                   	nop
c000609c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060a1:	83 e8 20             	sub    eax,0x20
c00060a4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a9:	eb 51                	jmp    c00060fc <ff_wtoupper+0x184>
c00060ab:	90                   	nop
c00060ac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060b1:	83 e8 30             	sub    eax,0x30
c00060b4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b9:	eb 41                	jmp    c00060fc <ff_wtoupper+0x184>
c00060bb:	90                   	nop
c00060bc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060c1:	83 e8 1a             	sub    eax,0x1a
c00060c4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c9:	eb 31                	jmp    c00060fc <ff_wtoupper+0x184>
c00060cb:	90                   	nop
c00060cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060d1:	83 c0 08             	add    eax,0x8
c00060d4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d9:	eb 21                	jmp    c00060fc <ff_wtoupper+0x184>
c00060db:	90                   	nop
c00060dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060e1:	83 e8 50             	sub    eax,0x50
c00060e4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060e9:	eb 11                	jmp    c00060fc <ff_wtoupper+0x184>
c00060eb:	90                   	nop
c00060ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060f1:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060f6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060fb:	90                   	nop
c00060fc:	eb 22                	jmp    c0006120 <ff_wtoupper+0x1a8>
c00060fe:	66 90                	xchg   ax,ax
c0006100:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006105:	85 c0                	test   eax,eax
c0006107:	0f 85 a7 fe ff ff    	jne    c0005fb4 <ff_wtoupper+0x3c>
c000610d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006112:	d1 e0                	shl    eax,1
c0006114:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006118:	e9 97 fe ff ff       	jmp    c0005fb4 <ff_wtoupper+0x3c>
c000611d:	8d 76 00             	lea    esi,[esi+0x0]
c0006120:	90                   	nop
c0006121:	8d 76 00             	lea    esi,[esi+0x0]
c0006124:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006129:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000612d:	8d 76 00             	lea    esi,[esi+0x0]
c0006130:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006134:	83 c4 10             	add    esp,0x10
c0006137:	c3                   	ret    

c0006138 <utf2ucs>:
c0006138:	57                   	push   edi
c0006139:	31 c9                	xor    ecx,ecx
c000613b:	56                   	push   esi
c000613c:	89 d7                	mov    edi,edx
c000613e:	53                   	push   ebx
c000613f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006143:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006147:	89 de                	mov    esi,ebx
c0006149:	c1 fe 08             	sar    esi,0x8
c000614c:	89 f2                	mov    edx,esi
c000614e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006151:	41                   	inc    ecx
c0006152:	85 db                	test   ebx,ebx
c0006154:	75 e9                	jne    c000613f <utf2ucs+0x7>
c0006156:	5b                   	pop    ebx
c0006157:	5e                   	pop    esi
c0006158:	5f                   	pop    edi
c0006159:	c3                   	ret    

c000615a <ucs2utfn>:
c000615a:	83 e1 fe             	and    ecx,0xfffffffe
c000615d:	01 d1                	add    ecx,edx
c000615f:	39 d1                	cmp    ecx,edx
c0006161:	75 04                	jne    c0006167 <ucs2utfn+0xd>
c0006163:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006166:	c3                   	ret    
c0006167:	57                   	push   edi
c0006168:	56                   	push   esi
c0006169:	53                   	push   ebx
c000616a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c000616d:	83 c2 02             	add    edx,0x2
c0006170:	89 de                	mov    esi,ebx
c0006172:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006176:	c1 e6 08             	shl    esi,0x8
c0006179:	09 f3                	or     ebx,esi
c000617b:	83 fb 3b             	cmp    ebx,0x3b
c000617e:	74 50                	je     c00061d0 <ucs2utfn+0x76>
c0006180:	83 fb 7f             	cmp    ebx,0x7f
c0006183:	7f 05                	jg     c000618a <ucs2utfn+0x30>
c0006185:	88 18                	mov    BYTE PTR [eax],bl
c0006187:	40                   	inc    eax
c0006188:	eb 42                	jmp    c00061cc <ucs2utfn+0x72>
c000618a:	89 df                	mov    edi,ebx
c000618c:	89 de                	mov    esi,ebx
c000618e:	c1 fe 06             	sar    esi,0x6
c0006191:	83 e7 3f             	and    edi,0x3f
c0006194:	83 cf 80             	or     edi,0xffffff80
c0006197:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000619d:	7f 12                	jg     c00061b1 <ucs2utfn+0x57>
c000619f:	83 ce c0             	or     esi,0xffffffc0
c00061a2:	83 c0 02             	add    eax,0x2
c00061a5:	89 f3                	mov    ebx,esi
c00061a7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061aa:	89 fb                	mov    ebx,edi
c00061ac:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061af:	eb 1b                	jmp    c00061cc <ucs2utfn+0x72>
c00061b1:	c1 fb 0c             	sar    ebx,0xc
c00061b4:	83 e6 3f             	and    esi,0x3f
c00061b7:	83 cb e0             	or     ebx,0xffffffe0
c00061ba:	83 ce 80             	or     esi,0xffffff80
c00061bd:	88 18                	mov    BYTE PTR [eax],bl
c00061bf:	89 f3                	mov    ebx,esi
c00061c1:	83 c0 03             	add    eax,0x3
c00061c4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061c7:	89 fb                	mov    ebx,edi
c00061c9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061cc:	39 d1                	cmp    ecx,edx
c00061ce:	75 9a                	jne    c000616a <ucs2utfn+0x10>
c00061d0:	5b                   	pop    ebx
c00061d1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061d4:	5e                   	pop    esi
c00061d5:	5f                   	pop    edi
c00061d6:	c3                   	ret    

c00061d7 <isjoliet>:
c00061d7:	31 d2                	xor    edx,edx
c00061d9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061dc:	75 26                	jne    c0006204 <isjoliet+0x2d>
c00061de:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061e2:	75 20                	jne    c0006204 <isjoliet+0x2d>
c00061e4:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061e8:	ba 02 00 00 00       	mov    edx,0x2
c00061ed:	83 f8 43             	cmp    eax,0x43
c00061f0:	74 12                	je     c0006204 <isjoliet+0x2d>
c00061f2:	83 f8 45             	cmp    eax,0x45
c00061f5:	ba 03 00 00 00       	mov    edx,0x3
c00061fa:	74 08                	je     c0006204 <isjoliet+0x2d>
c00061fc:	31 d2                	xor    edx,edx
c00061fe:	83 f8 40             	cmp    eax,0x40
c0006201:	0f 94 c2             	sete   dl
c0006204:	89 d0                	mov    eax,edx
c0006206:	c3                   	ret    

c0006207 <htohl_32>:
c0006207:	8b 00                	mov    eax,DWORD PTR [eax]
c0006209:	c3                   	ret    

c000620a <iso_733>:
c000620a:	eb fb                	jmp    c0006207 <htohl_32>

c000620c <bgrad_cache>:
c000620c:	83 fa 0e             	cmp    edx,0xe
c000620f:	77 16                	ja     c0006227 <bgrad_cache+0x1b>
c0006211:	53                   	push   ebx
c0006212:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006215:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006219:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000621c:	42                   	inc    edx
c000621d:	83 fa 0f             	cmp    edx,0xf
c0006220:	75 f3                	jne    c0006215 <bgrad_cache+0x9>
c0006222:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006225:	5b                   	pop    ebx
c0006226:	c3                   	ret    
c0006227:	c3                   	ret    

c0006228 <ucscompare>:
c0006228:	55                   	push   ebp
c0006229:	57                   	push   edi
c000622a:	89 c7                	mov    edi,eax
c000622c:	56                   	push   esi
c000622d:	89 d6                	mov    esi,edx
c000622f:	53                   	push   ebx
c0006230:	31 d2                	xor    edx,edx
c0006232:	83 ec 1c             	sub    esp,0x1c
c0006235:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006239:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000623e:	c1 e3 08             	shl    ebx,0x8
c0006241:	09 c3                	or     ebx,eax
c0006243:	39 ca                	cmp    edx,ecx
c0006245:	7d 42                	jge    c0006289 <ucscompare+0x61>
c0006247:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000624b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000624f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006253:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006258:	c1 e0 08             	shl    eax,0x8
c000625b:	09 e8                	or     eax,ebp
c000625d:	83 f8 3b             	cmp    eax,0x3b
c0006260:	74 27                	je     c0006289 <ucscompare+0x61>
c0006262:	83 ec 0c             	sub    esp,0xc
c0006265:	50                   	push   eax
c0006266:	e8 15 a7 ff ff       	call   c0000980 <tolower>
c000626b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000626e:	89 c5                	mov    ebp,eax
c0006270:	e8 0b a7 ff ff       	call   c0000980 <tolower>
c0006275:	83 c4 10             	add    esp,0x10
c0006278:	39 c5                	cmp    ebp,eax
c000627a:	75 20                	jne    c000629c <ucscompare+0x74>
c000627c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006280:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006284:	83 c2 02             	add    edx,0x2
c0006287:	eb ac                	jmp    c0006235 <ucscompare+0xd>
c0006289:	83 fb 2f             	cmp    ebx,0x2f
c000628c:	0f 95 c2             	setne  dl
c000628f:	31 c0                	xor    eax,eax
c0006291:	85 db                	test   ebx,ebx
c0006293:	0f 95 c0             	setne  al
c0006296:	21 d0                	and    eax,edx
c0006298:	f7 d8                	neg    eax
c000629a:	eb 03                	jmp    c000629f <ucscompare+0x77>
c000629c:	83 c8 ff             	or     eax,0xffffffff
c000629f:	83 c4 1c             	add    esp,0x1c
c00062a2:	5b                   	pop    ebx
c00062a3:	5e                   	pop    esi
c00062a4:	5f                   	pop    edi
c00062a5:	5d                   	pop    ebp
c00062a6:	c3                   	ret    

c00062a7 <fncompare>:
c00062a7:	55                   	push   ebp
c00062a8:	57                   	push   edi
c00062a9:	89 c7                	mov    edi,eax
c00062ab:	56                   	push   esi
c00062ac:	89 ce                	mov    esi,ecx
c00062ae:	53                   	push   ebx
c00062af:	31 db                	xor    ebx,ebx
c00062b1:	83 ec 1c             	sub    esp,0x1c
c00062b4:	39 d3                	cmp    ebx,edx
c00062b6:	7d 45                	jge    c00062fd <fncompare+0x56>
c00062b8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00062bc:	83 f8 3b             	cmp    eax,0x3b
c00062bf:	74 3c                	je     c00062fd <fncompare+0x56>
c00062c1:	83 f8 2e             	cmp    eax,0x2e
c00062c4:	75 0e                	jne    c00062d4 <fncompare+0x2d>
c00062c6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062c9:	39 d9                	cmp    ecx,ebx
c00062cb:	74 30                	je     c00062fd <fncompare+0x56>
c00062cd:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062d2:	74 29                	je     c00062fd <fncompare+0x56>
c00062d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062d8:	83 ec 0c             	sub    esp,0xc
c00062db:	50                   	push   eax
c00062dc:	e8 9f a6 ff ff       	call   c0000980 <tolower>
c00062e1:	89 c5                	mov    ebp,eax
c00062e3:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00062ea:	e8 91 a6 ff ff       	call   c0000980 <tolower>
c00062ef:	83 c4 10             	add    esp,0x10
c00062f2:	39 c5                	cmp    ebp,eax
c00062f4:	75 1e                	jne    c0006314 <fncompare+0x6d>
c00062f6:	43                   	inc    ebx
c00062f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062fb:	eb b7                	jmp    c00062b4 <fncompare+0xd>
c00062fd:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006301:	83 fa 2f             	cmp    edx,0x2f
c0006304:	0f 95 c1             	setne  cl
c0006307:	31 c0                	xor    eax,eax
c0006309:	85 d2                	test   edx,edx
c000630b:	0f 95 c0             	setne  al
c000630e:	21 c8                	and    eax,ecx
c0006310:	f7 d8                	neg    eax
c0006312:	eb 03                	jmp    c0006317 <fncompare+0x70>
c0006314:	83 c8 ff             	or     eax,0xffffffff
c0006317:	83 c4 1c             	add    esp,0x1c
c000631a:	5b                   	pop    ebx
c000631b:	5e                   	pop    esi
c000631c:	5f                   	pop    edi
c000631d:	5d                   	pop    ebp
c000631e:	c3                   	ret    

c000631f <bclear_cache>:
c000631f:	83 ec 18             	sub    esp,0x18
c0006322:	68 a0 26 02 c0       	push   0xc00226a0
c0006327:	e8 a4 5e 01 00       	call   c001c1d0 <iso_kprintf>
c000632c:	83 c4 10             	add    esp,0x10
c000632f:	31 c0                	xor    eax,eax
c0006331:	8b 14 85 20 80 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7fe0]
c0006338:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000633e:	8b 14 85 80 80 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7f80]
c0006345:	40                   	inc    eax
c0006346:	83 f8 10             	cmp    eax,0x10
c0006349:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000634f:	75 e0                	jne    c0006331 <bclear_cache+0x12>
c0006351:	83 c4 0c             	add    esp,0xc
c0006354:	c3                   	ret    

c0006355 <bclear>:
c0006355:	eb c8                	jmp    c000631f <bclear_cache>

c0006357 <iso_break_all>:
c0006357:	83 ec 18             	sub    esp,0x18
c000635a:	68 ae 26 02 c0       	push   0xc00226ae
c000635f:	e8 6c 5e 01 00       	call   c001c1d0 <iso_kprintf>
c0006364:	83 c4 10             	add    esp,0x10
c0006367:	31 c0                	xor    eax,eax
c0006369:	c7 80 d0 85 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd7a30],0x1
c0006373:	05 94 00 00 00       	add    eax,0x94
c0006378:	3d 40 09 00 00       	cmp    eax,0x940
c000637d:	75 ea                	jne    c0006369 <iso_break_all+0x12>
c000637f:	83 c4 0c             	add    esp,0xc
c0006382:	c3                   	ret    

c0006383 <isoReadDiscSector>:
c0006383:	83 ec 0c             	sub    esp,0xc
c0006386:	0f be 05 60 80 02 c0 	movsx  eax,BYTE PTR ds:0xc0028060
c000638d:	50                   	push   eax
c000638e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000639a:	e8 d5 5d 01 00       	call   c001c174 <isoReadDiscSectorHelper>
c000639f:	83 c4 1c             	add    esp,0x1c
c00063a2:	c3                   	ret    

c00063a3 <bread_cache>:
c00063a3:	55                   	push   ebp
c00063a4:	57                   	push   edi
c00063a5:	89 d7                	mov    edi,edx
c00063a7:	56                   	push   esi
c00063a8:	ba 0f 00 00 00       	mov    edx,0xf
c00063ad:	53                   	push   ebx
c00063ae:	89 c6                	mov    esi,eax
c00063b0:	83 ec 0c             	sub    esp,0xc
c00063b3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00063b6:	39 38                	cmp    DWORD PTR [eax],edi
c00063b8:	74 3c                	je     c00063f6 <bread_cache+0x53>
c00063ba:	4a                   	dec    edx
c00063bb:	83 fa ff             	cmp    edx,0xffffffff
c00063be:	75 f3                	jne    c00063b3 <bread_cache+0x10>
c00063c0:	31 db                	xor    ebx,ebx
c00063c2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063c5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063c8:	74 08                	je     c00063d2 <bread_cache+0x2f>
c00063ca:	43                   	inc    ebx
c00063cb:	83 fb 10             	cmp    ebx,0x10
c00063ce:	75 f2                	jne    c00063c2 <bread_cache+0x1f>
c00063d0:	31 db                	xor    ebx,ebx
c00063d2:	50                   	push   eax
c00063d3:	6a 01                	push   0x1
c00063d5:	57                   	push   edi
c00063d6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063dc:	83 c0 04             	add    eax,0x4
c00063df:	50                   	push   eax
c00063e0:	e8 9e ff ff ff       	call   c0006383 <isoReadDiscSector>
c00063e5:	83 c4 10             	add    esp,0x10
c00063e8:	83 c9 ff             	or     ecx,0xffffffff
c00063eb:	85 c0                	test   eax,eax
c00063ed:	78 13                	js     c0006402 <bread_cache+0x5f>
c00063ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063f2:	89 da                	mov    edx,ebx
c00063f4:	89 38                	mov    DWORD PTR [eax],edi
c00063f6:	89 f0                	mov    eax,esi
c00063f8:	e8 0f fe ff ff       	call   c000620c <bgrad_cache>
c00063fd:	b9 0f 00 00 00       	mov    ecx,0xf
c0006402:	83 c4 0c             	add    esp,0xc
c0006405:	89 c8                	mov    eax,ecx
c0006407:	5b                   	pop    ebx
c0006408:	5e                   	pop    esi
c0006409:	5f                   	pop    edi
c000640a:	5d                   	pop    ebp
c000640b:	c3                   	ret    

c000640c <biread>:
c000640c:	89 c2                	mov    edx,eax
c000640e:	b8 80 80 02 c0       	mov    eax,0xc0028080
c0006413:	eb 8e                	jmp    c00063a3 <bread_cache>

c0006415 <bdread>:
c0006415:	89 c2                	mov    edx,eax
c0006417:	b8 20 80 02 c0       	mov    eax,0xc0028020
c000641c:	eb 85                	jmp    c00063a3 <bread_cache>

c000641e <strnicmp>:
c000641e:	55                   	push   ebp
c000641f:	57                   	push   edi
c0006420:	31 ff                	xor    edi,edi
c0006422:	56                   	push   esi
c0006423:	53                   	push   ebx
c0006424:	83 ec 0c             	sub    esp,0xc
c0006427:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000642b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000642f:	74 43                	je     c0006474 <strnicmp+0x56>
c0006431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006435:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006439:	85 c0                	test   eax,eax
c000643b:	74 37                	je     c0006474 <strnicmp+0x56>
c000643d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006441:	85 d2                	test   edx,edx
c0006443:	74 2f                	je     c0006474 <strnicmp+0x56>
c0006445:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006448:	39 d0                	cmp    eax,edx
c000644a:	75 04                	jne    c0006450 <strnicmp+0x32>
c000644c:	89 ef                	mov    edi,ebp
c000644e:	eb db                	jmp    c000642b <strnicmp+0xd>
c0006450:	83 ec 0c             	sub    esp,0xc
c0006453:	50                   	push   eax
c0006454:	e8 27 a5 ff ff       	call   c0000980 <tolower>
c0006459:	89 c3                	mov    ebx,eax
c000645b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000645f:	89 ef                	mov    edi,ebp
c0006461:	89 04 24             	mov    DWORD PTR [esp],eax
c0006464:	e8 17 a5 ff ff       	call   c0000980 <tolower>
c0006469:	83 c4 10             	add    esp,0x10
c000646c:	29 c3                	sub    ebx,eax
c000646e:	89 d8                	mov    eax,ebx
c0006470:	74 b9                	je     c000642b <strnicmp+0xd>
c0006472:	eb 02                	jmp    c0006476 <strnicmp+0x58>
c0006474:	31 c0                	xor    eax,eax
c0006476:	83 c4 0c             	add    esp,0xc
c0006479:	5b                   	pop    ebx
c000647a:	5e                   	pop    esi
c000647b:	5f                   	pop    edi
c000647c:	5d                   	pop    ebp
c000647d:	c3                   	ret    

c000647e <find_object>:
c000647e:	55                   	push   ebp
c000647f:	57                   	push   edi
c0006480:	89 c7                	mov    edi,eax
c0006482:	56                   	push   esi
c0006483:	53                   	push   ebx
c0006484:	89 d3                	mov    ebx,edx
c0006486:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000648c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0006490:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006497:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c000649e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00064a2:	74 0b                	je     c00064af <find_object+0x31>
c00064a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00064a8:	89 fa                	mov    edx,edi
c00064aa:	e8 89 fc ff ff       	call   c0006138 <utf2ucs>
c00064af:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00064b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064b6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00064bb:	7e 11                	jle    c00064ce <find_object+0x50>
c00064bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064c1:	e8 46 ff ff ff       	call   c000640c <biread>
c00064c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00064ca:	85 c0                	test   eax,eax
c00064cc:	79 07                	jns    c00064d5 <find_object+0x57>
c00064ce:	31 db                	xor    ebx,ebx
c00064d0:	e9 47 01 00 00       	jmp    c000661c <find_object+0x19e>
c00064d5:	31 ed                	xor    ebp,ebp
c00064d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064db:	8b 04 85 80 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f80]
c00064e2:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c00064e6:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064e9:	85 f6                	test   esi,esi
c00064eb:	75 0e                	jne    c00064fb <find_object+0x7d>
c00064ed:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00064f1:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c00064f9:	eb bb                	jmp    c00064b6 <find_object+0x38>
c00064fb:	8b 0d b4 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028eb4
c0006501:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006505:	85 c9                	test   ecx,ecx
c0006507:	89 d0                	mov    eax,edx
c0006509:	74 2b                	je     c0006536 <find_object+0xb8>
c000650b:	8d 43 21             	lea    eax,[ebx+0x21]
c000650e:	89 d1                	mov    ecx,edx
c0006510:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006514:	e8 0f fd ff ff       	call   c0006228 <ucscompare>
c0006519:	85 c0                	test   eax,eax
c000651b:	0f 84 cd 00 00 00    	je     c00065ee <find_object+0x170>
c0006521:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006524:	01 c5                	add    ebp,eax
c0006526:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000652c:	7f bf                	jg     c00064ed <find_object+0x6f>
c000652e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006532:	7f a3                	jg     c00064d7 <find_object+0x59>
c0006534:	eb b7                	jmp    c00064ed <find_object+0x6f>
c0006536:	29 d6                	sub    esi,edx
c0006538:	a8 01                	test   al,0x1
c000653a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000653e:	74 05                	je     c0006545 <find_object+0xc7>
c0006540:	83 ee 21             	sub    esi,0x21
c0006543:	eb 6a                	jmp    c00065af <find_object+0x131>
c0006545:	42                   	inc    edx
c0006546:	83 ee 22             	sub    esi,0x22
c0006549:	eb 64                	jmp    c00065af <find_object+0x131>
c000654b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000654e:	48                   	dec    eax
c000654f:	3c 01                	cmp    al,0x1
c0006551:	77 61                	ja     c00065b4 <find_object+0x136>
c0006553:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006557:	50                   	push   eax
c0006558:	6a 02                	push   0x2
c000655a:	68 bd 26 02 c0       	push   0xc00226bd
c000655f:	52                   	push   edx
c0006560:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006564:	e8 a7 a2 ff ff       	call   c0000810 <strncmp>
c0006569:	83 c4 10             	add    esp,0x10
c000656c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006570:	85 c0                	test   eax,eax
c0006572:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006576:	75 2f                	jne    c00065a7 <find_object+0x129>
c0006578:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000657c:	50                   	push   eax
c000657d:	8d 42 05             	lea    eax,[edx+0x5]
c0006580:	83 e9 05             	sub    ecx,0x5
c0006583:	51                   	push   ecx
c0006584:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0006588:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000658c:	50                   	push   eax
c000658d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006591:	50                   	push   eax
c0006592:	e8 f9 a0 ff ff       	call   c0000690 <strncpy>
c0006597:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000659b:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00065a0:	83 c4 10             	add    esp,0x10
c00065a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00065a7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00065ab:	29 c6                	sub    esi,eax
c00065ad:	01 c2                	add    edx,eax
c00065af:	83 fe 03             	cmp    esi,0x3
c00065b2:	7f 97                	jg     c000654b <find_object+0xcd>
c00065b4:	85 c9                	test   ecx,ecx
c00065b6:	7e 40                	jle    c00065f8 <find_object+0x17a>
c00065b8:	51                   	push   ecx
c00065b9:	51                   	push   ecx
c00065ba:	6a 2f                	push   0x2f
c00065bc:	57                   	push   edi
c00065bd:	e8 0e a2 ff ff       	call   c00007d0 <strchr>
c00065c2:	83 c4 10             	add    esp,0x10
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 04                	je     c00065cd <find_object+0x14f>
c00065c9:	29 f8                	sub    eax,edi
c00065cb:	eb 0c                	jmp    c00065d9 <find_object+0x15b>
c00065cd:	83 ec 0c             	sub    esp,0xc
c00065d0:	57                   	push   edi
c00065d1:	e8 aa 9f ff ff       	call   c0000580 <strlen>
c00065d6:	83 c4 10             	add    esp,0x10
c00065d9:	52                   	push   edx
c00065da:	50                   	push   eax
c00065db:	57                   	push   edi
c00065dc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065e0:	50                   	push   eax
c00065e1:	e8 38 fe ff ff       	call   c000641e <strnicmp>
c00065e6:	83 c4 10             	add    esp,0x10
c00065e9:	e9 2b ff ff ff       	jmp    c0006519 <find_object+0x9b>
c00065ee:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065f2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00065f6:	eb 1e                	jmp    c0006616 <find_object+0x198>
c00065f8:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065fc:	8d 43 21             	lea    eax,[ebx+0x21]
c00065ff:	89 f9                	mov    ecx,edi
c0006601:	e8 a1 fc ff ff       	call   c00062a7 <fncompare>
c0006606:	85 c0                	test   eax,eax
c0006608:	0f 85 13 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000660e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006612:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006616:	0f 85 05 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000661c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006622:	89 d8                	mov    eax,ebx
c0006624:	5b                   	pop    ebx
c0006625:	5e                   	pop    esi
c0006626:	5f                   	pop    edi
c0006627:	5d                   	pop    ebp
c0006628:	c3                   	ret    

c0006629 <find_object_path>:
c0006629:	55                   	push   ebp
c000662a:	57                   	push   edi
c000662b:	89 d7                	mov    edi,edx
c000662d:	56                   	push   esi
c000662e:	89 c6                	mov    esi,eax
c0006630:	53                   	push   ebx
c0006631:	89 cb                	mov    ebx,ecx
c0006633:	83 ec 0c             	sub    esp,0xc
c0006636:	50                   	push   eax
c0006637:	50                   	push   eax
c0006638:	6a 2f                	push   0x2f
c000663a:	56                   	push   esi
c000663b:	e8 90 a1 ff ff       	call   c00007d0 <strchr>
c0006640:	83 c4 10             	add    esp,0x10
c0006643:	85 c0                	test   eax,eax
c0006645:	89 c5                	mov    ebp,eax
c0006647:	74 3a                	je     c0006683 <find_object_path+0x5a>
c0006649:	39 ee                	cmp    esi,ebp
c000664b:	74 31                	je     c000667e <find_object_path+0x55>
c000664d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006650:	e8 b5 fb ff ff       	call   c000620a <iso_733>
c0006655:	89 c2                	mov    edx,eax
c0006657:	8d 43 02             	lea    eax,[ebx+0x2]
c000665a:	e8 ab fb ff ff       	call   c000620a <iso_733>
c000665f:	83 ec 0c             	sub    esp,0xc
c0006662:	52                   	push   edx
c0006663:	89 c1                	mov    ecx,eax
c0006665:	ba 01 00 00 00       	mov    edx,0x1
c000666a:	89 f0                	mov    eax,esi
c000666c:	e8 0d fe ff ff       	call   c000647e <find_object>
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	85 c0                	test   eax,eax
c0006676:	89 c3                	mov    ebx,eax
c0006678:	75 04                	jne    c000667e <find_object_path+0x55>
c000667a:	31 db                	xor    ebx,ebx
c000667c:	eb 36                	jmp    c00066b4 <find_object_path+0x8b>
c000667e:	8d 75 01             	lea    esi,[ebp+0x1]
c0006681:	eb b3                	jmp    c0006636 <find_object_path+0xd>
c0006683:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006686:	74 28                	je     c00066b0 <find_object_path+0x87>
c0006688:	8d 43 0a             	lea    eax,[ebx+0xa]
c000668b:	e8 7a fb ff ff       	call   c000620a <iso_733>
c0006690:	89 c2                	mov    edx,eax
c0006692:	8d 43 02             	lea    eax,[ebx+0x2]
c0006695:	e8 70 fb ff ff       	call   c000620a <iso_733>
c000669a:	83 ec 0c             	sub    esp,0xc
c000669d:	52                   	push   edx
c000669e:	89 c1                	mov    ecx,eax
c00066a0:	89 fa                	mov    edx,edi
c00066a2:	89 f0                	mov    eax,esi
c00066a4:	e8 d5 fd ff ff       	call   c000647e <find_object>
c00066a9:	83 c4 10             	add    esp,0x10
c00066ac:	89 c3                	mov    ebx,eax
c00066ae:	eb 04                	jmp    c00066b4 <find_object_path+0x8b>
c00066b0:	85 ff                	test   edi,edi
c00066b2:	74 c6                	je     c000667a <find_object_path+0x51>
c00066b4:	83 c4 0c             	add    esp,0xc
c00066b7:	89 d8                	mov    eax,ebx
c00066b9:	5b                   	pop    ebx
c00066ba:	5e                   	pop    esi
c00066bb:	5f                   	pop    edi
c00066bc:	5d                   	pop    ebp
c00066bd:	c3                   	ret    

c00066be <stricmp>:
c00066be:	57                   	push   edi
c00066bf:	56                   	push   esi
c00066c0:	31 f6                	xor    esi,esi
c00066c2:	53                   	push   ebx
c00066c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c7:	83 ec 0c             	sub    esp,0xc
c00066ca:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066d2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066d6:	46                   	inc    esi
c00066d7:	50                   	push   eax
c00066d8:	e8 83 a2 ff ff       	call   c0000960 <toupper>
c00066dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00066e0:	e8 9b a2 ff ff       	call   c0000980 <tolower>
c00066e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066e8:	89 c3                	mov    ebx,eax
c00066ea:	e8 71 a2 ff ff       	call   c0000960 <toupper>
c00066ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00066f2:	e8 89 a2 ff ff       	call   c0000980 <tolower>
c00066f7:	83 c4 10             	add    esp,0x10
c00066fa:	39 c3                	cmp    ebx,eax
c00066fc:	75 04                	jne    c0006702 <stricmp+0x44>
c00066fe:	85 db                	test   ebx,ebx
c0006700:	75 c1                	jne    c00066c3 <stricmp+0x5>
c0006702:	29 c3                	sub    ebx,eax
c0006704:	89 d8                	mov    eax,ebx
c0006706:	5b                   	pop    ebx
c0006707:	5e                   	pop    esi
c0006708:	5f                   	pop    edi
c0006709:	c3                   	ret    

c000670a <iso_open>:
c000670a:	57                   	push   edi
c000670b:	31 c0                	xor    eax,eax
c000670d:	56                   	push   esi
c000670e:	b9 80 8e 02 c0       	mov    ecx,0xc0028e80
c0006713:	53                   	push   ebx
c0006714:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006719:	0f 95 c0             	setne  al
c000671c:	89 c2                	mov    edx,eax
c000671e:	89 c6                	mov    esi,eax
c0006720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006724:	e8 00 ff ff ff       	call   c0006629 <find_object_path>
c0006729:	83 ca ff             	or     edx,0xffffffff
c000672c:	85 c0                	test   eax,eax
c000672e:	74 5e                	je     c000678e <iso_open+0x84>
c0006730:	89 c1                	mov    ecx,eax
c0006732:	31 d2                	xor    edx,edx
c0006734:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000673a:	83 bf 40 85 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd7ac0],0x0
c0006741:	75 42                	jne    c0006785 <iso_open+0x7b>
c0006743:	c7 87 40 85 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd7ac0],0xffffffff
c000674d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006750:	e8 b5 fa ff ff       	call   c000620a <iso_733>
c0006755:	89 b7 44 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7abc],esi
c000675b:	c7 87 48 85 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd7ab8],0x0
c0006765:	89 87 40 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7ac0],eax
c000676b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000676e:	e8 97 fa ff ff       	call   c000620a <iso_733>
c0006773:	c7 87 d0 85 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd7a30],0x0
c000677d:	89 87 4c 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7ab4],eax
c0006783:	eb 09                	jmp    c000678e <iso_open+0x84>
c0006785:	42                   	inc    edx
c0006786:	83 fa 10             	cmp    edx,0x10
c0006789:	75 a9                	jne    c0006734 <iso_open+0x2a>
c000678b:	83 ca ff             	or     edx,0xffffffff
c000678e:	5b                   	pop    ebx
c000678f:	89 d0                	mov    eax,edx
c0006791:	5e                   	pop    esi
c0006792:	5f                   	pop    edi
c0006793:	c3                   	ret    

c0006794 <iso_close>:
c0006794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006798:	83 f8 0f             	cmp    eax,0xf
c000679b:	7f 10                	jg     c00067ad <iso_close+0x19>
c000679d:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00067a3:	c7 80 40 85 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7ac0],0x0
c00067ad:	e9 6d fb ff ff       	jmp    c000631f <bclear_cache>

c00067b2 <iso_read>:
c00067b2:	55                   	push   ebp
c00067b3:	57                   	push   edi
c00067b4:	56                   	push   esi
c00067b5:	53                   	push   ebx
c00067b6:	83 ec 1c             	sub    esp,0x1c
c00067b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067bd:	83 fd 0f             	cmp    ebp,0xf
c00067c0:	7e 0a                	jle    c00067cc <iso_read+0x1a>
c00067c2:	83 c8 ff             	or     eax,0xffffffff
c00067c5:	89 c2                	mov    edx,eax
c00067c7:	e9 f4 00 00 00       	jmp    c00068c0 <iso_read+0x10e>
c00067cc:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067d2:	83 bd 40 85 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd7ac0],0x0
c00067d9:	74 e7                	je     c00067c2 <iso_read+0x10>
c00067db:	8b 95 d0 85 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd7a30]
c00067e1:	85 d2                	test   edx,edx
c00067e3:	75 dd                	jne    c00067c2 <iso_read+0x10>
c00067e5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067ea:	0f 84 cd 00 00 00    	je     c00068bd <iso_read+0x10b>
c00067f0:	8b 85 48 85 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd7ab8]
c00067f6:	8b 9d 4c 85 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd7ab4]
c00067fc:	29 c3                	sub    ebx,eax
c00067fe:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006802:	89 d9                	mov    ecx,ebx
c0006804:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006809:	85 c9                	test   ecx,ecx
c000680b:	0f 84 ac 00 00 00    	je     c00068bd <iso_read+0x10b>
c0006811:	89 c6                	mov    esi,eax
c0006813:	bb 00 08 00 00       	mov    ebx,0x800
c0006818:	c1 e8 0b             	shr    eax,0xb
c000681b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006821:	03 85 40 85 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd7ac0]
c0006827:	29 f3                	sub    ebx,esi
c0006829:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000682f:	75 3f                	jne    c0006870 <iso_read+0xbe>
c0006831:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006837:	7e 37                	jle    c0006870 <iso_read+0xbe>
c0006839:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000683f:	be 20 00 00 00       	mov    esi,0x20
c0006844:	7f 05                	jg     c000684b <iso_read+0x99>
c0006846:	89 ce                	mov    esi,ecx
c0006848:	c1 fe 0b             	sar    esi,0xb
c000684b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000684f:	89 f3                	mov    ebx,esi
c0006851:	52                   	push   edx
c0006852:	56                   	push   esi
c0006853:	50                   	push   eax
c0006854:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006858:	c1 e3 0b             	shl    ebx,0xb
c000685b:	e8 23 fb ff ff       	call   c0006383 <isoReadDiscSector>
c0006860:	83 c4 10             	add    esp,0x10
c0006863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006867:	85 c0                	test   eax,eax
c0006869:	7f 3d                	jg     c00068a8 <iso_read+0xf6>
c000686b:	e9 52 ff ff ff       	jmp    c00067c2 <iso_read+0x10>
c0006870:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006874:	39 d9                	cmp    ecx,ebx
c0006876:	0f 4e d9             	cmovle ebx,ecx
c0006879:	e8 97 fb ff ff       	call   c0006415 <bdread>
c000687e:	85 c0                	test   eax,eax
c0006880:	0f 88 3c ff ff ff    	js     c00067c2 <iso_read+0x10>
c0006886:	8b 0c 85 20 80 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7fe0]
c000688d:	8b 85 48 85 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd7ab8]
c0006893:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006897:	25 ff 07 00 00       	and    eax,0x7ff
c000689c:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00068a0:	89 d9                	mov    ecx,ebx
c00068a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00068a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00068a8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00068ac:	01 da                	add    edx,ebx
c00068ae:	01 9d 48 85 02 c0    	add    DWORD PTR [ebp-0x3ffd7ab8],ebx
c00068b4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068b8:	e9 28 ff ff ff       	jmp    c00067e5 <iso_read+0x33>
c00068bd:	89 d0                	mov    eax,edx
c00068bf:	99                   	cdq    
c00068c0:	83 c4 1c             	add    esp,0x1c
c00068c3:	5b                   	pop    ebx
c00068c4:	5e                   	pop    esi
c00068c5:	5f                   	pop    edi
c00068c6:	5d                   	pop    ebp
c00068c7:	c3                   	ret    

c00068c8 <iso_seek>:
c00068c8:	55                   	push   ebp
c00068c9:	83 c8 ff             	or     eax,0xffffffff
c00068cc:	57                   	push   edi
c00068cd:	89 c2                	mov    edx,eax
c00068cf:	56                   	push   esi
c00068d0:	53                   	push   ebx
c00068d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068dd:	83 fe 0f             	cmp    esi,0xf
c00068e0:	7f 65                	jg     c0006947 <iso_seek+0x7f>
c00068e2:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068e8:	83 bd 40 85 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd7ac0],0x0
c00068ef:	8d 8d 40 85 02 c0    	lea    ecx,[ebp-0x3ffd7ac0]
c00068f5:	74 50                	je     c0006947 <iso_seek+0x7f>
c00068f7:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068fe:	75 47                	jne    c0006947 <iso_seek+0x7f>
c0006900:	83 fb 01             	cmp    ebx,0x1
c0006903:	74 0e                	je     c0006913 <iso_seek+0x4b>
c0006905:	83 fb 02             	cmp    ebx,0x2
c0006908:	74 0e                	je     c0006918 <iso_seek+0x50>
c000690a:	85 db                	test   ebx,ebx
c000690c:	75 39                	jne    c0006947 <iso_seek+0x7f>
c000690e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006911:	eb 0d                	jmp    c0006920 <iso_seek+0x58>
c0006913:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006916:	eb 08                	jmp    c0006920 <iso_seek+0x58>
c0006918:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000691b:	01 f8                	add    eax,edi
c000691d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006920:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006926:	8b 88 4c 85 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd7ab4]
c000692c:	05 40 85 02 c0       	add    eax,0xc0028540
c0006931:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006934:	76 03                	jbe    c0006939 <iso_seek+0x71>
c0006936:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006939:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000693f:	8b 82 48 85 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd7ab8]
c0006945:	31 d2                	xor    edx,edx
c0006947:	5b                   	pop    ebx
c0006948:	5e                   	pop    esi
c0006949:	5f                   	pop    edi
c000694a:	5d                   	pop    ebp
c000694b:	c3                   	ret    

c000694c <iso_tell>:
c000694c:	53                   	push   ebx
c000694d:	83 c8 ff             	or     eax,0xffffffff
c0006950:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006954:	89 c2                	mov    edx,eax
c0006956:	83 f9 0f             	cmp    ecx,0xf
c0006959:	7f 20                	jg     c000697b <iso_tell+0x2f>
c000695b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006961:	83 bb 40 85 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd7ac0],0x0
c0006968:	74 11                	je     c000697b <iso_tell+0x2f>
c000696a:	83 bb d0 85 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd7a30],0x0
c0006971:	75 08                	jne    c000697b <iso_tell+0x2f>
c0006973:	8b 83 48 85 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd7ab8]
c0006979:	31 d2                	xor    edx,edx
c000697b:	5b                   	pop    ebx
c000697c:	c3                   	ret    

c000697d <iso_total>:
c000697d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006981:	83 c8 ff             	or     eax,0xffffffff
c0006984:	83 fa 0f             	cmp    edx,0xf
c0006987:	7f 1e                	jg     c00069a7 <iso_total+0x2a>
c0006989:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000698f:	83 ba 40 85 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd7ac0],0x0
c0006996:	74 0f                	je     c00069a7 <iso_total+0x2a>
c0006998:	83 ba d0 85 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd7a30],0x0
c000699f:	75 06                	jne    c00069a7 <iso_total+0x2a>
c00069a1:	8b 82 4c 85 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd7ab4]
c00069a7:	c3                   	ret    

c00069a8 <fn_postprocess>:
c00069a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00069ac:	89 d0                	mov    eax,edx
c00069ae:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00069b1:	85 c9                	test   ecx,ecx
c00069b3:	74 08                	je     c00069bd <fn_postprocess+0x15>
c00069b5:	83 f9 3b             	cmp    ecx,0x3b
c00069b8:	74 03                	je     c00069bd <fn_postprocess+0x15>
c00069ba:	40                   	inc    eax
c00069bb:	eb f1                	jmp    c00069ae <fn_postprocess+0x6>
c00069bd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069c0:	39 d0                	cmp    eax,edx
c00069c2:	76 0a                	jbe    c00069ce <fn_postprocess+0x26>
c00069c4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069c8:	75 04                	jne    c00069ce <fn_postprocess+0x26>
c00069ca:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069ce:	c3                   	ret    

c00069cf <iso_readdir>:
c00069cf:	55                   	push   ebp
c00069d0:	57                   	push   edi
c00069d1:	56                   	push   esi
c00069d2:	53                   	push   ebx
c00069d3:	83 ec 1c             	sub    esp,0x1c
c00069d6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069da:	83 fb 0f             	cmp    ebx,0xf
c00069dd:	7f 28                	jg     c0006a07 <iso_readdir+0x38>
c00069df:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069e5:	83 b8 40 85 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd7ac0],0x0
c00069ec:	8d b8 40 85 02 c0    	lea    edi,[eax-0x3ffd7ac0]
c00069f2:	74 13                	je     c0006a07 <iso_readdir+0x38>
c00069f4:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069f8:	74 0d                	je     c0006a07 <iso_readdir+0x38>
c00069fa:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006a01:	0f 84 b1 00 00 00    	je     c0006ab8 <iso_readdir+0xe9>
c0006a07:	83 ec 0c             	sub    esp,0xc
c0006a0a:	68 c0 26 02 c0       	push   0xc00226c0
c0006a0f:	e8 bc 57 01 00       	call   c001c1d0 <iso_kprintf>
c0006a14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a17:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a1d:	e8 ca 57 01 00       	call   c001c1ec <iso_kprintfd>
c0006a22:	c7 04 24 c5 26 02 c0 	mov    DWORD PTR [esp],0xc00226c5
c0006a29:	e8 a2 57 01 00       	call   c001c1d0 <iso_kprintf>
c0006a2e:	58                   	pop    eax
c0006a2f:	ff b3 40 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7ac0]
c0006a35:	e8 b2 57 01 00       	call   c001c1ec <iso_kprintfd>
c0006a3a:	c7 04 24 cb 26 02 c0 	mov    DWORD PTR [esp],0xc00226cb
c0006a41:	e8 8a 57 01 00       	call   c001c1d0 <iso_kprintf>
c0006a46:	58                   	pop    eax
c0006a47:	ff b3 44 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7abc]
c0006a4d:	e8 9a 57 01 00       	call   c001c1ec <iso_kprintfd>
c0006a52:	c7 04 24 d1 26 02 c0 	mov    DWORD PTR [esp],0xc00226d1
c0006a59:	e8 72 57 01 00       	call   c001c1d0 <iso_kprintf>
c0006a5e:	58                   	pop    eax
c0006a5f:	ff b3 d0 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7a30]
c0006a65:	e8 82 57 01 00       	call   c001c1ec <iso_kprintfd>
c0006a6a:	83 c4 10             	add    esp,0x10
c0006a6d:	eb 42                	jmp    c0006ab1 <iso_readdir+0xe2>
c0006a6f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a72:	8b 34 85 80 80 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7f80]
c0006a79:	89 d1                	mov    ecx,edx
c0006a7b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a81:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a85:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a88:	75 35                	jne    c0006abf <iso_readdir+0xf0>
c0006a8a:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a90:	81 c2 00 08 00 00    	add    edx,0x800
c0006a96:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a99:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a9c:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a9f:	73 1e                	jae    c0006abf <iso_readdir+0xf0>
c0006aa1:	8b 07                	mov    eax,DWORD PTR [edi]
c0006aa3:	c1 ea 0b             	shr    edx,0xb
c0006aa6:	01 d0                	add    eax,edx
c0006aa8:	e8 5f f9 ff ff       	call   c000640c <biread>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	79 be                	jns    c0006a6f <iso_readdir+0xa0>
c0006ab1:	31 c0                	xor    eax,eax
c0006ab3:	e9 6a 01 00 00       	jmp    c0006c22 <iso_readdir+0x253>
c0006ab8:	31 f6                	xor    esi,esi
c0006aba:	83 c8 ff             	or     eax,0xffffffff
c0006abd:	eb da                	jmp    c0006a99 <iso_readdir+0xca>
c0006abf:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ac5:	8b ba 48 85 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd7ab8]
c0006acb:	81 c2 40 85 02 c0    	add    edx,0xc0028540
c0006ad1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006ad4:	73 db                	jae    c0006ab1 <iso_readdir+0xe2>
c0006ad6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ada:	75 34                	jne    c0006b10 <iso_readdir+0x141>
c0006adc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006ae0:	75 2e                	jne    c0006b10 <iso_readdir+0x141>
c0006ae2:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ae5:	8b 34 85 80 80 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7f80]
c0006aec:	01 f9                	add    ecx,edi
c0006aee:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006af1:	89 c8                	mov    eax,ecx
c0006af3:	25 ff 07 00 00       	and    eax,0x7ff
c0006af8:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006afd:	01 c8                	add    eax,ecx
c0006aff:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006b02:	25 ff 07 00 00       	and    eax,0x7ff
c0006b07:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006b0b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006b0e:	74 a1                	je     c0006ab1 <iso_readdir+0xe2>
c0006b10:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006b16:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b1a:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c0006b21:	8d 56 21             	lea    edx,[esi+0x21]
c0006b24:	8d af 58 85 02 c0    	lea    ebp,[edi-0x3ffd7aa8]
c0006b2a:	74 0c                	je     c0006b38 <iso_readdir+0x169>
c0006b2c:	89 e8                	mov    eax,ebp
c0006b2e:	e8 27 f6 ff ff       	call   c000615a <ucs2utfn>
c0006b33:	e9 b1 00 00 00       	jmp    c0006be9 <iso_readdir+0x21a>
c0006b38:	50                   	push   eax
c0006b39:	51                   	push   ecx
c0006b3a:	52                   	push   edx
c0006b3b:	55                   	push   ebp
c0006b3c:	e8 4f 9b ff ff       	call   c0000690 <strncpy>
c0006b41:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b48:	c6 84 07 58 85 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd7aa8],0x0
c0006b50:	e8 53 fe ff ff       	call   c00069a8 <fn_postprocess>
c0006b55:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b59:	83 c4 10             	add    esp,0x10
c0006b5c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b5f:	89 d1                	mov    ecx,edx
c0006b61:	29 d0                	sub    eax,edx
c0006b63:	80 e1 01             	and    cl,0x1
c0006b66:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006b6a:	74 05                	je     c0006b71 <iso_readdir+0x1a2>
c0006b6c:	83 e8 21             	sub    eax,0x21
c0006b6f:	eb 04                	jmp    c0006b75 <iso_readdir+0x1a6>
c0006b71:	42                   	inc    edx
c0006b72:	83 e8 22             	sub    eax,0x22
c0006b75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b79:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b83:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b88:	7e 5f                	jle    c0006be9 <iso_readdir+0x21a>
c0006b8a:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006b8d:	48                   	dec    eax
c0006b8e:	3c 01                	cmp    al,0x1
c0006b90:	77 57                	ja     c0006be9 <iso_readdir+0x21a>
c0006b92:	51                   	push   ecx
c0006b93:	6a 02                	push   0x2
c0006b95:	68 bd 26 02 c0       	push   0xc00226bd
c0006b9a:	52                   	push   edx
c0006b9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006b9f:	e8 6c 9c ff ff       	call   c0000810 <strncmp>
c0006ba4:	83 c4 10             	add    esp,0x10
c0006ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006bab:	85 c0                	test   eax,eax
c0006bad:	75 2e                	jne    c0006bdd <iso_readdir+0x20e>
c0006baf:	50                   	push   eax
c0006bb0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bb4:	83 e8 05             	sub    eax,0x5
c0006bb7:	50                   	push   eax
c0006bb8:	8d 42 05             	lea    eax,[edx+0x5]
c0006bbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006bbf:	50                   	push   eax
c0006bc0:	55                   	push   ebp
c0006bc1:	e8 ca 9a ff ff       	call   c0000690 <strncpy>
c0006bc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006bca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006bce:	83 c4 10             	add    esp,0x10
c0006bd1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bd5:	c6 84 08 53 85 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd7aad],0x0
c0006bdd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006be1:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006be5:	01 c2                	add    edx,eax
c0006be7:	eb 9a                	jmp    c0006b83 <iso_readdir+0x1b4>
c0006be9:	83 c8 ff             	or     eax,0xffffffff
c0006bec:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bf0:	89 c2                	mov    edx,eax
c0006bf2:	75 0a                	jne    c0006bfe <iso_readdir+0x22f>
c0006bf4:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bf7:	e8 0e f6 ff ff       	call   c000620a <iso_733>
c0006bfc:	31 d2                	xor    edx,edx
c0006bfe:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006c04:	89 83 50 85 02 c0    	mov    DWORD PTR [ebx-0x3ffd7ab0],eax
c0006c0a:	89 93 54 85 02 c0    	mov    DWORD PTR [ebx-0x3ffd7aac],edx
c0006c10:	81 c3 40 85 02 c0    	add    ebx,0xc0028540
c0006c16:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006c19:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c1c:	8d 87 50 85 02 c0    	lea    eax,[edi-0x3ffd7ab0]
c0006c22:	83 c4 1c             	add    esp,0x1c
c0006c25:	5b                   	pop    ebx
c0006c26:	5e                   	pop    esi
c0006c27:	5f                   	pop    edi
c0006c28:	5d                   	pop    ebp
c0006c29:	c3                   	ret    

c0006c2a <iso_reset>:
c0006c2a:	83 ec 18             	sub    esp,0x18
c0006c2d:	68 da 26 02 c0       	push   0xc00226da
c0006c32:	e8 99 55 01 00       	call   c001c1d0 <iso_kprintf>
c0006c37:	e8 1b f7 ff ff       	call   c0006357 <iso_break_all>
c0006c3c:	e8 14 f7 ff ff       	call   c0006355 <bclear>
c0006c41:	31 c0                	xor    eax,eax
c0006c43:	83 c4 1c             	add    esp,0x1c
c0006c46:	c3                   	ret    

c0006c47 <init_percd>:
c0006c47:	57                   	push   edi
c0006c48:	56                   	push   esi
c0006c49:	53                   	push   ebx
c0006c4a:	bb 01 00 00 00       	mov    ebx,0x1
c0006c4f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006c53:	a2 60 80 02 c0       	mov    ds:0xc0028060,al
c0006c58:	e8 cd ff ff ff       	call   c0006c2a <iso_reset>
c0006c5d:	c7 05 b4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eb4,0x0
c0006c67:	a1 ac 8e 02 c0       	mov    eax,ds:0xc0028eac
c0006c6c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c70:	e8 97 f7 ff ff       	call   c000640c <biread>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	89 c6                	mov    esi,eax
c0006c79:	0f 88 ba 00 00 00    	js     c0006d39 <init_percd+0xf2>
c0006c7f:	8b 04 85 80 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f80]
c0006c86:	52                   	push   edx
c0006c87:	6a 06                	push   0x6
c0006c89:	68 e5 26 02 c0       	push   0xc00226e5
c0006c8e:	83 c0 04             	add    eax,0x4
c0006c91:	50                   	push   eax
c0006c92:	e8 e9 96 ff ff       	call   c0000380 <memcmp>
c0006c97:	83 c4 10             	add    esp,0x10
c0006c9a:	85 c0                	test   eax,eax
c0006c9c:	74 08                	je     c0006ca6 <init_percd+0x5f>
c0006c9e:	43                   	inc    ebx
c0006c9f:	83 fb 04             	cmp    ebx,0x4
c0006ca2:	75 c3                	jne    c0006c67 <init_percd+0x20>
c0006ca4:	eb 1a                	jmp    c0006cc0 <init_percd+0x79>
c0006ca6:	8b 04 b5 80 80 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7f80]
c0006cad:	83 c0 5c             	add    eax,0x5c
c0006cb0:	e8 22 f5 ff ff       	call   c00061d7 <isjoliet>
c0006cb5:	a3 b4 8e 02 c0       	mov    ds:0xc0028eb4,eax
c0006cba:	85 c0                	test   eax,eax
c0006cbc:	74 e0                	je     c0006c9e <init_percd+0x57>
c0006cbe:	eb 3e                	jmp    c0006cfe <init_percd+0xb7>
c0006cc0:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c0006cc7:	75 35                	jne    c0006cfe <init_percd+0xb7>
c0006cc9:	a1 ac 8e 02 c0       	mov    eax,ds:0xc0028eac
c0006cce:	83 c0 10             	add    eax,0x10
c0006cd1:	e8 36 f7 ff ff       	call   c000640c <biread>
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	89 c6                	mov    esi,eax
c0006cda:	78 5f                	js     c0006d3b <init_percd+0xf4>
c0006cdc:	50                   	push   eax
c0006cdd:	8b 04 b5 80 80 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7f80]
c0006ce4:	83 cb ff             	or     ebx,0xffffffff
c0006ce7:	6a 06                	push   0x6
c0006ce9:	68 ec 26 02 c0       	push   0xc00226ec
c0006cee:	83 c0 04             	add    eax,0x4
c0006cf1:	50                   	push   eax
c0006cf2:	e8 89 96 ff ff       	call   c0000380 <memcmp>
c0006cf7:	83 c4 10             	add    esp,0x10
c0006cfa:	85 c0                	test   eax,eax
c0006cfc:	75 3d                	jne    c0006d3b <init_percd+0xf4>
c0006cfe:	8b 34 b5 80 80 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd7f80]
c0006d05:	bf 80 8e 02 c0       	mov    edi,0xc0028e80
c0006d0a:	b9 22 00 00 00       	mov    ecx,0x22
c0006d0f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d17:	b8 82 8e 02 c0       	mov    eax,0xc0028e82
c0006d1c:	31 db                	xor    ebx,ebx
c0006d1e:	e8 e7 f4 ff ff       	call   c000620a <iso_733>
c0006d23:	a3 a8 8e 02 c0       	mov    ds:0xc0028ea8,eax
c0006d28:	b8 8a 8e 02 c0       	mov    eax,0xc0028e8a
c0006d2d:	e8 d8 f4 ff ff       	call   c000620a <iso_733>
c0006d32:	a3 a4 8e 02 c0       	mov    ds:0xc0028ea4,eax
c0006d37:	eb 02                	jmp    c0006d3b <init_percd+0xf4>
c0006d39:	89 c3                	mov    ebx,eax
c0006d3b:	89 d8                	mov    eax,ebx
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	5f                   	pop    edi
c0006d40:	c3                   	ret    

c0006d41 <iso_ioctl>:
c0006d41:	83 ec 18             	sub    esp,0x18
c0006d44:	68 f3 26 02 c0       	push   0xc00226f3
c0006d49:	e8 82 54 01 00       	call   c001c1d0 <iso_kprintf>
c0006d4e:	e8 d7 fe ff ff       	call   c0006c2a <iso_reset>
c0006d53:	31 c0                	xor    eax,eax
c0006d55:	83 c4 1c             	add    esp,0x1c
c0006d58:	c3                   	ret    

c0006d59 <fs_iso9660_init>:
c0006d59:	53                   	push   ebx
c0006d5a:	31 db                	xor    ebx,ebx
c0006d5c:	83 ec 14             	sub    esp,0x14
c0006d5f:	68 fe 26 02 c0       	push   0xc00226fe
c0006d64:	e8 67 54 01 00       	call   c001c1d0 <iso_kprintf>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	68 40 09 00 00       	push   0x940
c0006d71:	6a 00                	push   0x0
c0006d73:	68 40 85 02 c0       	push   0xc0028540
c0006d78:	e8 73 97 ff ff       	call   c00004f0 <memset>
c0006d7d:	c7 05 40 85 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0028540,0xffffffff
c0006d87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d8e:	e8 dd 8c 00 00       	call   c000fa70 <malloc>
c0006d93:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d9a:	a3 b0 8e 02 c0       	mov    ds:0xc0028eb0,eax
c0006d9f:	e8 cc 8c 00 00       	call   c000fa70 <malloc>
c0006da4:	83 c4 10             	add    esp,0x10
c0006da7:	a3 20 85 02 c0       	mov    ds:0xc0028520,eax
c0006dac:	83 ec 0c             	sub    esp,0xc
c0006daf:	68 04 08 00 00       	push   0x804
c0006db4:	e8 b7 8c 00 00       	call   c000fa70 <malloc>
c0006db9:	89 04 9d 80 80 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7f80],eax
c0006dc0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dc6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006dcd:	e8 9e 8c 00 00       	call   c000fa70 <malloc>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	89 04 9d 20 80 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7fe0],eax
c0006ddc:	43                   	inc    ebx
c0006ddd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006de3:	83 fb 10             	cmp    ebx,0x10
c0006de6:	75 c4                	jne    c0006dac <fs_iso9660_init+0x53>
c0006de8:	83 c4 08             	add    esp,0x8
c0006deb:	31 c0                	xor    eax,eax
c0006ded:	5b                   	pop    ebx
c0006dee:	c3                   	ret    

c0006def <fs_iso9660_shutdown>:
c0006def:	53                   	push   ebx
c0006df0:	31 db                	xor    ebx,ebx
c0006df2:	83 ec 08             	sub    esp,0x8
c0006df5:	83 ec 0c             	sub    esp,0xc
c0006df8:	ff 34 9d 80 80 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7f80]
c0006dff:	e8 7c 8c 00 00       	call   c000fa80 <free>
c0006e04:	58                   	pop    eax
c0006e05:	ff 34 9d 20 80 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7fe0]
c0006e0c:	43                   	inc    ebx
c0006e0d:	e8 6e 8c 00 00       	call   c000fa80 <free>
c0006e12:	83 c4 10             	add    esp,0x10
c0006e15:	83 fb 10             	cmp    ebx,0x10
c0006e18:	75 db                	jne    c0006df5 <fs_iso9660_shutdown+0x6>
c0006e1a:	a1 b0 8e 02 c0       	mov    eax,ds:0xc0028eb0
c0006e1f:	85 c0                	test   eax,eax
c0006e21:	74 0c                	je     c0006e2f <fs_iso9660_shutdown+0x40>
c0006e23:	83 ec 0c             	sub    esp,0xc
c0006e26:	50                   	push   eax
c0006e27:	e8 54 8c 00 00       	call   c000fa80 <free>
c0006e2c:	83 c4 10             	add    esp,0x10
c0006e2f:	a1 20 85 02 c0       	mov    eax,ds:0xc0028520
c0006e34:	85 c0                	test   eax,eax
c0006e36:	74 0c                	je     c0006e44 <fs_iso9660_shutdown+0x55>
c0006e38:	83 ec 0c             	sub    esp,0xc
c0006e3b:	50                   	push   eax
c0006e3c:	e8 3f 8c 00 00       	call   c000fa80 <free>
c0006e41:	83 c4 10             	add    esp,0x10
c0006e44:	c7 05 20 85 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028520,0x0
c0006e4e:	31 c0                	xor    eax,eax
c0006e50:	c7 05 b0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eb0,0x0
c0006e5a:	83 c4 08             	add    esp,0x8
c0006e5d:	5b                   	pop    ebx
c0006e5e:	c3                   	ret    

c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e5f:	55                   	push   ebp
c0006e60:	57                   	push   edi
c0006e61:	56                   	push   esi
c0006e62:	53                   	push   ebx
c0006e63:	83 ec 20             	sub    esp,0x20
c0006e66:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0006e6a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c0006e72:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0006e76:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c0006e7e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006e82:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c0006e8a:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c0006e92:	89 f7                	mov    edi,esi
c0006e94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0006e99:	89 eb                	mov    ebx,ebp
c0006e9b:	eb 02                	jmp    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0006e9d:	89 c7                	mov    edi,eax
c0006e9f:	31 d2                	xor    edx,edx
c0006ea1:	89 f8                	mov    eax,edi
c0006ea3:	f7 f1                	div    ecx
c0006ea5:	83 c3 01             	add    ebx,0x1
c0006ea8:	39 cf                	cmp    edi,ecx
c0006eaa:	73 f1                	jae    c0006e9d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c0006eac:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eaf:	eb 02                	jmp    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0006eb1:	89 c6                	mov    esi,eax
c0006eb3:	31 d2                	xor    edx,edx
c0006eb5:	89 f0                	mov    eax,esi
c0006eb7:	f7 f1                	div    ecx
c0006eb9:	83 eb 01             	sub    ebx,0x1
c0006ebc:	39 ce                	cmp    esi,ecx
c0006ebe:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec2:	88 13                	mov    BYTE PTR [ebx],dl
c0006ec4:	73 eb                	jae    c0006eb1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c0006ec6:	83 c4 20             	add    esp,0x20
c0006ec9:	89 e8                	mov    eax,ebp
c0006ecb:	5b                   	pop    ebx
c0006ecc:	5e                   	pop    esi
c0006ecd:	5f                   	pop    edi
c0006ece:	5d                   	pop    ebp
c0006ecf:	c3                   	ret    

c0006ed0 <Dbg::logc(char)>:
c0006ed0:	f6 05 24 e1 02 c0 10 	test   BYTE PTR ds:0xc002e124,0x10
c0006ed7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006edb:	75 12                	jne    c0006eef <Dbg::logc(char)+0x1f>
c0006edd:	ba fd 03 00 00       	mov    edx,0x3fd
c0006ee2:	ec                   	in     al,dx
c0006ee3:	a8 20                	test   al,0x20
c0006ee5:	74 fb                	je     c0006ee2 <Dbg::logc(char)+0x12>
c0006ee7:	ba f8 03 00 00       	mov    edx,0x3f8
c0006eec:	88 c8                	mov    al,cl
c0006eee:	ee                   	out    dx,al
c0006eef:	c3                   	ret    

c0006ef0 <Dbg::logs(char*)>:
c0006ef0:	53                   	push   ebx
c0006ef1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006ef5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006ef8:	85 c0                	test   eax,eax
c0006efa:	74 11                	je     c0006f0d <Dbg::logs(char*)+0x1d>
c0006efc:	50                   	push   eax
c0006efd:	83 c3 01             	add    ebx,0x1
c0006f00:	e8 cb ff ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006f05:	58                   	pop    eax
c0006f06:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f09:	85 c0                	test   eax,eax
c0006f0b:	75 ef                	jne    c0006efc <Dbg::logs(char*)+0xc>
c0006f0d:	5b                   	pop    ebx
c0006f0e:	c3                   	ret    

c0006f0f <Dbg::logWriteInt(unsigned int)>:
c0006f0f:	83 ec 10             	sub    esp,0x10
c0006f12:	6a 0a                	push   0xa
c0006f14:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f18:	50                   	push   eax
c0006f19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006f1d:	50                   	push   eax
c0006f1e:	e8 3c ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f23:	50                   	push   eax
c0006f24:	e8 c7 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006f29:	83 c4 20             	add    esp,0x20
c0006f2c:	c3                   	ret    

c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f2d:	83 ec 10             	sub    esp,0x10
c0006f30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006f34:	50                   	push   eax
c0006f35:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f39:	50                   	push   eax
c0006f3a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006f3e:	52                   	push   edx
c0006f3f:	e8 1b ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f44:	50                   	push   eax
c0006f45:	e8 a6 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006f4a:	83 c4 20             	add    esp,0x20
c0006f4d:	c3                   	ret    

c0006f4e <Dbg::kprintf(char const*, ...)>:
c0006f4e:	55                   	push   ebp
c0006f4f:	57                   	push   edi
c0006f50:	56                   	push   esi
c0006f51:	53                   	push   ebx
c0006f52:	83 ec 0c             	sub    esp,0xc
c0006f55:	f6 05 24 e1 02 c0 10 	test   BYTE PTR ds:0xc002e124,0x10
c0006f5c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006f60:	74 08                	je     c0006f6a <Dbg::kprintf(char const*, ...)+0x1c>
c0006f62:	83 c4 0c             	add    esp,0xc
c0006f65:	5b                   	pop    ebx
c0006f66:	5e                   	pop    esi
c0006f67:	5f                   	pop    edi
c0006f68:	5d                   	pop    ebp
c0006f69:	c3                   	ret    
c0006f6a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f6e:	31 ff                	xor    edi,edi
c0006f70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f74:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f77:	85 c0                	test   eax,eax
c0006f79:	74 e7                	je     c0006f62 <Dbg::kprintf(char const*, ...)+0x14>
c0006f7b:	8d 77 01             	lea    esi,[edi+0x1]
c0006f7e:	83 f8 25             	cmp    eax,0x25
c0006f81:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006f84:	75 47                	jne    c0006fcd <Dbg::kprintf(char const*, ...)+0x7f>
c0006f86:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006f89:	83 c7 02             	add    edi,0x2
c0006f8c:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006f8f:	83 e8 25             	sub    eax,0x25
c0006f92:	0f b6 c0             	movzx  eax,al
c0006f95:	83 f8 53             	cmp    eax,0x53
c0006f98:	0f 87 ce 00 00 00    	ja     c000706c <Dbg::kprintf(char const*, ...)+0x11e>
c0006f9e:	ff 24 85 10 27 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd8f0]
c0006fa5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fa9:	89 c8                	mov    eax,ecx
c0006fab:	83 c1 04             	add    ecx,0x4
c0006fae:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fb2:	8b 28                	mov    ebp,DWORD PTR [eax]
c0006fb4:	55                   	push   ebp
c0006fb5:	e8 55 ff ff ff       	call   c0006f0f <Dbg::logWriteInt(unsigned int)>
c0006fba:	58                   	pop    eax
c0006fbb:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006fbe:	85 c0                	test   eax,eax
c0006fc0:	74 a0                	je     c0006f62 <Dbg::kprintf(char const*, ...)+0x14>
c0006fc2:	8d 77 01             	lea    esi,[edi+0x1]
c0006fc5:	83 f8 25             	cmp    eax,0x25
c0006fc8:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fcb:	74 b9                	je     c0006f86 <Dbg::kprintf(char const*, ...)+0x38>
c0006fcd:	50                   	push   eax
c0006fce:	89 f7                	mov    edi,esi
c0006fd0:	e8 fb fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006fd5:	89 ee                	mov    esi,ebp
c0006fd7:	58                   	pop    eax
c0006fd8:	eb e1                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0006fda:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fde:	89 c8                	mov    eax,ecx
c0006fe0:	83 c1 04             	add    ecx,0x4
c0006fe3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fe7:	8b 00                	mov    eax,DWORD PTR [eax]
c0006fe9:	50                   	push   eax
c0006fea:	e8 01 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006fef:	58                   	pop    eax
c0006ff0:	eb c9                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0006ff2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006ff6:	89 d0                	mov    eax,edx
c0006ff8:	83 c2 04             	add    edx,0x4
c0006ffb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0006fff:	8b 00                	mov    eax,DWORD PTR [eax]
c0007001:	50                   	push   eax
c0007002:	e8 08 ff ff ff       	call   c0006f0f <Dbg::logWriteInt(unsigned int)>
c0007007:	58                   	pop    eax
c0007008:	eb b1                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000700a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000700e:	89 d0                	mov    eax,edx
c0007010:	83 c2 04             	add    edx,0x4
c0007013:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007017:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000701a:	50                   	push   eax
c000701b:	e8 b0 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007020:	58                   	pop    eax
c0007021:	eb 98                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0007023:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007027:	89 c8                	mov    eax,ecx
c0007029:	83 c1 04             	add    ecx,0x4
c000702c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007030:	6a 10                	push   0x10
c0007032:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007034:	51                   	push   ecx
c0007035:	e8 f3 fe ff ff       	call   c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>
c000703a:	5d                   	pop    ebp
c000703b:	58                   	pop    eax
c000703c:	e9 7a ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0007041:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007045:	89 d0                	mov    eax,edx
c0007047:	83 c2 08             	add    edx,0x8
c000704a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000704e:	6a 10                	push   0x10
c0007050:	8b 00                	mov    eax,DWORD PTR [eax]
c0007052:	50                   	push   eax
c0007053:	e8 d5 fe ff ff       	call   c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>
c0007058:	58                   	pop    eax
c0007059:	5a                   	pop    edx
c000705a:	e9 5c ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000705f:	6a 25                	push   0x25
c0007061:	e8 6a fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007066:	5a                   	pop    edx
c0007067:	e9 4f ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000706c:	6a 25                	push   0x25
c000706e:	e8 5d fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007073:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007077:	50                   	push   eax
c0007078:	e8 53 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000707d:	5a                   	pop    edx
c000707e:	59                   	pop    ecx
c000707f:	e9 37 ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>

c0007084 <KiUbsanPrintDetails(char const*, void*)>:
c0007084:	83 ec 1c             	sub    esp,0x1c
c0007087:	83 ec 08             	sub    esp,0x8
c000708a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000708e:	68 60 28 02 c0       	push   0xc0022860
c0007093:	e8 b6 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007098:	83 c4 10             	add    esp,0x10
c000709b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000709f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00070a9:	83 ec 08             	sub    esp,0x8
c00070ac:	50                   	push   eax
c00070ad:	68 74 28 02 c0       	push   0xc0022874
c00070b2:	e8 97 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070b7:	83 c4 10             	add    esp,0x10
c00070ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00070c1:	83 ec 08             	sub    esp,0x8
c00070c4:	50                   	push   eax
c00070c5:	68 7e 28 02 c0       	push   0xc002287e
c00070ca:	e8 7f fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070cf:	83 c4 10             	add    esp,0x10
c00070d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00070d9:	83 ec 08             	sub    esp,0x8
c00070dc:	50                   	push   eax
c00070dd:	68 88 28 02 c0       	push   0xc0022888
c00070e2:	e8 67 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	90                   	nop
c00070eb:	83 c4 1c             	add    esp,0x1c
c00070ee:	c3                   	ret    
c00070ef:	90                   	nop

c00070f0 <__ubsan_handle_type_mismatch_v1>:
c00070f0:	83 ec 0c             	sub    esp,0xc
c00070f3:	83 ec 08             	sub    esp,0x8
c00070f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070fa:	68 cc 29 02 c0       	push   0xc00229cc
c00070ff:	e8 80 ff ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007104:	83 c4 10             	add    esp,0x10
c0007107:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000710c:	75 16                	jne    c0007124 <__ubsan_handle_type_mismatch_v1+0x34>
c000710e:	83 ec 0c             	sub    esp,0xc
c0007111:	68 92 28 02 c0       	push   0xc0022892
c0007116:	e8 33 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000711b:	83 c4 10             	add    esp,0x10
c000711e:	e9 91 00 00 00       	jmp    c00071b4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007123:	90                   	nop
c0007124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007128:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000712b:	85 c0                	test   eax,eax
c000712d:	74 29                	je     c0007158 <__ubsan_handle_type_mismatch_v1+0x68>
c000712f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007133:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007136:	83 e8 01             	sub    eax,0x1
c0007139:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000713d:	75 19                	jne    c0007158 <__ubsan_handle_type_mismatch_v1+0x68>
c000713f:	83 ec 08             	sub    esp,0x8
c0007142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007146:	68 ec 29 02 c0       	push   0xc00229ec
c000714b:	e8 fe fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007150:	83 c4 10             	add    esp,0x10
c0007153:	eb 5f                	jmp    c00071b4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007155:	8d 76 00             	lea    esi,[esi+0x0]
c0007158:	83 ec 0c             	sub    esp,0xc
c000715b:	68 a7 28 02 c0       	push   0xc00228a7
c0007160:	e8 e9 fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007165:	83 c4 10             	add    esp,0x10
c0007168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000716c:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000716f:	0f b6 c0             	movzx  eax,al
c0007172:	83 ec 08             	sub    esp,0x8
c0007175:	50                   	push   eax
c0007176:	68 c1 28 02 c0       	push   0xc00228c1
c000717b:	e8 ce fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007180:	83 c4 10             	add    esp,0x10
c0007183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007187:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000718a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000718d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007195:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007198:	0f b6 c0             	movzx  eax,al
c000719b:	8b 04 85 c0 59 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda640]
c00071a2:	51                   	push   ecx
c00071a3:	52                   	push   edx
c00071a4:	50                   	push   eax
c00071a5:	68 14 2a 02 c0       	push   0xc0022a14
c00071aa:	e8 9f fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00071af:	83 c4 10             	add    esp,0x10
c00071b2:	66 90                	xchg   ax,ax
c00071b4:	83 ec 0c             	sub    esp,0xc
c00071b7:	68 cc 29 02 c0       	push   0xc00229cc
c00071bc:	e8 f5 8b 00 00       	call   c000fdb6 <KePanic(char const*)>
c00071c1:	83 c4 10             	add    esp,0x10
c00071c4:	90                   	nop
c00071c5:	83 c4 0c             	add    esp,0xc
c00071c8:	c3                   	ret    
c00071c9:	8d 76 00             	lea    esi,[esi+0x0]

c00071cc <__ubsan_handle_pointer_overflow>:
c00071cc:	83 ec 0c             	sub    esp,0xc
c00071cf:	83 ec 08             	sub    esp,0x8
c00071d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071d6:	68 5c 2a 02 c0       	push   0xc0022a5c
c00071db:	e8 a4 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00071e0:	83 c4 10             	add    esp,0x10
c00071e3:	83 ec 0c             	sub    esp,0xc
c00071e6:	68 5c 2a 02 c0       	push   0xc0022a5c
c00071eb:	e8 c6 8b 00 00       	call   c000fdb6 <KePanic(char const*)>
c00071f0:	83 c4 10             	add    esp,0x10
c00071f3:	90                   	nop
c00071f4:	83 c4 0c             	add    esp,0xc
c00071f7:	c3                   	ret    

c00071f8 <__ubsan_handle_out_of_bounds>:
c00071f8:	83 ec 0c             	sub    esp,0xc
c00071fb:	83 ec 08             	sub    esp,0x8
c00071fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007202:	68 cc 28 02 c0       	push   0xc00228cc
c0007207:	e8 78 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c000720c:	83 c4 10             	add    esp,0x10
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	68 cc 28 02 c0       	push   0xc00228cc
c0007217:	e8 9a 8b 00 00       	call   c000fdb6 <KePanic(char const*)>
c000721c:	83 c4 10             	add    esp,0x10
c000721f:	90                   	nop
c0007220:	83 c4 0c             	add    esp,0xc
c0007223:	c3                   	ret    

c0007224 <__ubsan_handle_add_overflow>:
c0007224:	83 ec 0c             	sub    esp,0xc
c0007227:	83 ec 08             	sub    esp,0x8
c000722a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000722e:	68 e9 28 02 c0       	push   0xc00228e9
c0007233:	e8 4c fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007238:	83 c4 10             	add    esp,0x10
c000723b:	83 ec 0c             	sub    esp,0xc
c000723e:	68 e9 28 02 c0       	push   0xc00228e9
c0007243:	e8 6e 8b 00 00       	call   c000fdb6 <KePanic(char const*)>
c0007248:	83 c4 10             	add    esp,0x10
c000724b:	90                   	nop
c000724c:	83 c4 0c             	add    esp,0xc
c000724f:	c3                   	ret    

c0007250 <__ubsan_handle_load_invalid_value>:
c0007250:	83 ec 0c             	sub    esp,0xc
c0007253:	83 ec 08             	sub    esp,0x8
c0007256:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000725a:	68 7c 2a 02 c0       	push   0xc0022a7c
c000725f:	e8 20 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007264:	83 c4 10             	add    esp,0x10
c0007267:	83 ec 0c             	sub    esp,0xc
c000726a:	68 7c 2a 02 c0       	push   0xc0022a7c
c000726f:	e8 42 8b 00 00       	call   c000fdb6 <KePanic(char const*)>
c0007274:	83 c4 10             	add    esp,0x10
c0007277:	90                   	nop
c0007278:	83 c4 0c             	add    esp,0xc
c000727b:	c3                   	ret    

c000727c <__ubsan_handle_divrem_overflow>:
c000727c:	83 ec 0c             	sub    esp,0xc
c000727f:	83 ec 08             	sub    esp,0x8
c0007282:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007286:	68 a0 2a 02 c0       	push   0xc0022aa0
c000728b:	e8 f4 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007290:	83 c4 10             	add    esp,0x10
c0007293:	83 ec 0c             	sub    esp,0xc
c0007296:	68 a0 2a 02 c0       	push   0xc0022aa0
c000729b:	e8 16 8b 00 00       	call   c000fdb6 <KePanic(char const*)>
c00072a0:	83 c4 10             	add    esp,0x10
c00072a3:	90                   	nop
c00072a4:	83 c4 0c             	add    esp,0xc
c00072a7:	c3                   	ret    

c00072a8 <__ubsan_handle_mul_overflow>:
c00072a8:	83 ec 0c             	sub    esp,0xc
c00072ab:	83 ec 08             	sub    esp,0x8
c00072ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b2:	68 05 29 02 c0       	push   0xc0022905
c00072b7:	e8 c8 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00072bc:	83 c4 10             	add    esp,0x10
c00072bf:	83 ec 0c             	sub    esp,0xc
c00072c2:	68 05 29 02 c0       	push   0xc0022905
c00072c7:	e8 ea 8a 00 00       	call   c000fdb6 <KePanic(char const*)>
c00072cc:	83 c4 10             	add    esp,0x10
c00072cf:	90                   	nop
c00072d0:	83 c4 0c             	add    esp,0xc
c00072d3:	c3                   	ret    

c00072d4 <__ubsan_handle_sub_overflow>:
c00072d4:	83 ec 0c             	sub    esp,0xc
c00072d7:	83 ec 08             	sub    esp,0x8
c00072da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072de:	68 21 29 02 c0       	push   0xc0022921
c00072e3:	e8 9c fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00072e8:	83 c4 10             	add    esp,0x10
c00072eb:	83 ec 0c             	sub    esp,0xc
c00072ee:	68 21 29 02 c0       	push   0xc0022921
c00072f3:	e8 be 8a 00 00       	call   c000fdb6 <KePanic(char const*)>
c00072f8:	83 c4 10             	add    esp,0x10
c00072fb:	90                   	nop
c00072fc:	83 c4 0c             	add    esp,0xc
c00072ff:	c3                   	ret    

c0007300 <__ubsan_handle_shift_out_of_bounds>:
c0007300:	83 ec 0c             	sub    esp,0xc
c0007303:	83 ec 08             	sub    esp,0x8
c0007306:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000730a:	68 c0 2a 02 c0       	push   0xc0022ac0
c000730f:	e8 70 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007314:	83 c4 10             	add    esp,0x10
c0007317:	83 ec 0c             	sub    esp,0xc
c000731a:	68 c0 2a 02 c0       	push   0xc0022ac0
c000731f:	e8 92 8a 00 00       	call   c000fdb6 <KePanic(char const*)>
c0007324:	83 c4 10             	add    esp,0x10
c0007327:	90                   	nop
c0007328:	83 c4 0c             	add    esp,0xc
c000732b:	c3                   	ret    

c000732c <__ubsan_handle_negate_overflow>:
c000732c:	83 ec 0c             	sub    esp,0xc
c000732f:	83 ec 08             	sub    esp,0x8
c0007332:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007336:	68 e4 2a 02 c0       	push   0xc0022ae4
c000733b:	e8 44 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007340:	83 c4 10             	add    esp,0x10
c0007343:	83 ec 0c             	sub    esp,0xc
c0007346:	68 e4 2a 02 c0       	push   0xc0022ae4
c000734b:	e8 66 8a 00 00       	call   c000fdb6 <KePanic(char const*)>
c0007350:	83 c4 10             	add    esp,0x10
c0007353:	90                   	nop
c0007354:	83 c4 0c             	add    esp,0xc
c0007357:	c3                   	ret    

c0007358 <KiIsHashInTable(unsigned short)>:
c0007358:	0f b7 d0             	movzx  edx,ax
c000735b:	83 e0 07             	and    eax,0x7
c000735e:	c1 fa 03             	sar    edx,0x3
c0007361:	88 c1                	mov    cl,al
c0007363:	0f b6 92 00 93 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd6d00]
c000736a:	d3 fa                	sar    edx,cl
c000736c:	89 d0                	mov    eax,edx
c000736e:	83 e0 01             	and    eax,0x1
c0007371:	c3                   	ret    

c0007372 <KiSetHashInTable(unsigned short, bool)>:
c0007372:	56                   	push   esi
c0007373:	53                   	push   ebx
c0007374:	0f b7 d8             	movzx  ebx,ax
c0007377:	c1 fb 03             	sar    ebx,0x3
c000737a:	83 e0 07             	and    eax,0x7
c000737d:	89 c1                	mov    ecx,eax
c000737f:	b8 01 00 00 00       	mov    eax,0x1
c0007384:	0f b6 b3 00 93 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd6d00]
c000738b:	d3 e0                	shl    eax,cl
c000738d:	84 d2                	test   dl,dl
c000738f:	74 04                	je     c0007395 <KiSetHashInTable(unsigned short, bool)+0x23>
c0007391:	09 f0                	or     eax,esi
c0007393:	eb 04                	jmp    c0007399 <KiSetHashInTable(unsigned short, bool)+0x27>
c0007395:	f7 d0                	not    eax
c0007397:	21 f0                	and    eax,esi
c0007399:	88 83 00 93 02 c0    	mov    BYTE PTR [ebx-0x3ffd6d00],al
c000739f:	5b                   	pop    ebx
c00073a0:	5e                   	pop    esi
c00073a1:	c3                   	ret    

c00073a2 <KiFlushSymlinkChanges()>:
c00073a2:	57                   	push   edi
c00073a3:	56                   	push   esi
c00073a4:	53                   	push   ebx
c00073a5:	83 ec 1c             	sub    esp,0x1c
c00073a8:	68 14 01 00 00       	push   0x114
c00073ad:	e8 be 86 00 00       	call   c000fa70 <malloc>
c00073b2:	83 c4 0c             	add    esp,0xc
c00073b5:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00073bb:	68 03 2b 02 c0       	push   0xc0022b03
c00073c0:	50                   	push   eax
c00073c1:	89 c3                	mov    ebx,eax
c00073c3:	e8 64 0d 00 00       	call   c000812c <File::File(char const*, Process*)>
c00073c8:	83 c4 10             	add    esp,0x10
c00073cb:	85 db                	test   ebx,ebx
c00073cd:	75 10                	jne    c00073df <KiFlushSymlinkChanges()+0x3d>
c00073cf:	83 ec 0c             	sub    esp,0xc
c00073d2:	68 21 2b 02 c0       	push   0xc0022b21
c00073d7:	e8 da 89 00 00       	call   c000fdb6 <KePanic(char const*)>
c00073dc:	83 c4 10             	add    esp,0x10
c00073df:	50                   	push   eax
c00073e0:	50                   	push   eax
c00073e1:	6a 06                	push   0x6
c00073e3:	53                   	push   ebx
c00073e4:	e8 61 0d 00 00       	call   c000814a <File::open(FileOpenMode)>
c00073e9:	83 c4 10             	add    esp,0x10
c00073ec:	85 c0                	test   eax,eax
c00073ee:	74 10                	je     c0007400 <KiFlushSymlinkChanges()+0x5e>
c00073f0:	83 ec 0c             	sub    esp,0xc
c00073f3:	68 3b 2b 02 c0       	push   0xc0022b3b
c00073f8:	e8 b9 89 00 00       	call   c000fdb6 <KePanic(char const*)>
c00073fd:	83 c4 10             	add    esp,0x10
c0007400:	31 f6                	xor    esi,esi
c0007402:	39 35 c0 8e 02 c0    	cmp    DWORD PTR ds:0xc0028ec0,esi
c0007408:	7e 70                	jle    c000747a <KiFlushSymlinkChanges()+0xd8>
c000740a:	83 ec 0c             	sub    esp,0xc
c000740d:	89 f0                	mov    eax,esi
c000740f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007411:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007415:	c1 e0 08             	shl    eax,0x8
c0007418:	57                   	push   edi
c0007419:	05 00 8f 02 c0       	add    eax,0xc0028f00
c000741e:	50                   	push   eax
c000741f:	6a 00                	push   0x0
c0007421:	68 00 01 00 00       	push   0x100
c0007426:	53                   	push   ebx
c0007427:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000742a:	83 c4 20             	add    esp,0x20
c000742d:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0007435:	74 10                	je     c0007447 <KiFlushSymlinkChanges()+0xa5>
c0007437:	83 ec 0c             	sub    esp,0xc
c000743a:	68 55 2b 02 c0       	push   0xc0022b55
c000743f:	e8 72 89 00 00       	call   c000fdb6 <KePanic(char const*)>
c0007444:	83 c4 10             	add    esp,0x10
c0007447:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007449:	8d 14 f5 e0 8e 02 c0 	lea    edx,[esi*8-0x3ffd7120]
c0007450:	83 ec 0c             	sub    esp,0xc
c0007453:	57                   	push   edi
c0007454:	52                   	push   edx
c0007455:	6a 00                	push   0x0
c0007457:	6a 08                	push   0x8
c0007459:	53                   	push   ebx
c000745a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000745d:	83 c4 20             	add    esp,0x20
c0007460:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007465:	74 10                	je     c0007477 <KiFlushSymlinkChanges()+0xd5>
c0007467:	83 ec 0c             	sub    esp,0xc
c000746a:	68 6f 2b 02 c0       	push   0xc0022b6f
c000746f:	e8 42 89 00 00       	call   c000fdb6 <KePanic(char const*)>
c0007474:	83 c4 10             	add    esp,0x10
c0007477:	46                   	inc    esi
c0007478:	eb 88                	jmp    c0007402 <KiFlushSymlinkChanges()+0x60>
c000747a:	83 ec 0c             	sub    esp,0xc
c000747d:	53                   	push   ebx
c000747e:	e8 25 0d 00 00       	call   c00081a8 <File::close()>
c0007483:	83 c4 10             	add    esp,0x10
c0007486:	85 db                	test   ebx,ebx
c0007488:	74 0c                	je     c0007496 <KiFlushSymlinkChanges()+0xf4>
c000748a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000748c:	83 ec 0c             	sub    esp,0xc
c000748f:	53                   	push   ebx
c0007490:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	c7 05 c0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x0
c00074a0:	83 c4 10             	add    esp,0x10
c00074a3:	5b                   	pop    ebx
c00074a4:	5e                   	pop    esi
c00074a5:	5f                   	pop    edi
c00074a6:	c3                   	ret    

c00074a7 <KiDeinitialiseSymlinks(void*)>:
c00074a7:	e9 f6 fe ff ff       	jmp    c00073a2 <KiFlushSymlinkChanges()>

c00074ac <KiGetSymlinkHash(char const*)>:
c00074ac:	53                   	push   ebx
c00074ad:	89 c3                	mov    ebx,eax
c00074af:	83 ec 14             	sub    esp,0x14
c00074b2:	50                   	push   eax
c00074b3:	e8 c8 90 ff ff       	call   c0000580 <strlen>
c00074b8:	5a                   	pop    edx
c00074b9:	59                   	pop    ecx
c00074ba:	50                   	push   eax
c00074bb:	53                   	push   ebx
c00074bc:	e8 b0 6d 00 00       	call   c000e271 <KeCalculateCRC32(unsigned char*, int)>
c00074c1:	83 c4 18             	add    esp,0x18
c00074c4:	5b                   	pop    ebx
c00074c5:	89 c2                	mov    edx,eax
c00074c7:	c1 ea 10             	shr    edx,0x10
c00074ca:	31 d0                	xor    eax,edx
c00074cc:	c3                   	ret    

c00074cd <KiCreateSymlinkID()>:
c00074cd:	55                   	push   ebp
c00074ce:	57                   	push   edi
c00074cf:	56                   	push   esi
c00074d0:	53                   	push   ebx
c00074d1:	31 db                	xor    ebx,ebx
c00074d3:	83 ec 1c             	sub    esp,0x1c
c00074d6:	e8 c9 92 00 00       	call   c00107a4 <KeRand()>
c00074db:	8b 2d 00 b3 02 c0    	mov    ebp,DWORD PTR ds:0xc002b300
c00074e1:	31 d2                	xor    edx,edx
c00074e3:	43                   	inc    ebx
c00074e4:	31 ff                	xor    edi,edi
c00074e6:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00074e9:	89 ee                	mov    esi,ebp
c00074eb:	89 0d 00 b3 02 c0    	mov    DWORD PTR ds:0xc002b300,ecx
c00074f1:	0f a4 c2 1f          	shld   edx,eax,0x1f
c00074f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00074f9:	c1 e0 1f             	shl    eax,0x1f
c00074fc:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007502:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007506:	75 10                	jne    c0007518 <KiCreateSymlinkID()+0x4b>
c0007508:	83 ec 0c             	sub    esp,0xc
c000750b:	68 89 2b 02 c0       	push   0xc0022b89
c0007510:	e8 a1 88 00 00       	call   c000fdb6 <KePanic(char const*)>
c0007515:	83 c4 10             	add    esp,0x10
c0007518:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000751c:	75 06                	jne    c0007524 <KiCreateSymlinkID()+0x57>
c000751e:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0007522:	74 b2                	je     c00074d6 <KiCreateSymlinkID()+0x9>
c0007524:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007528:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000752c:	83 c4 1c             	add    esp,0x1c
c000752f:	5b                   	pop    ebx
c0007530:	31 f0                	xor    eax,esi
c0007532:	5e                   	pop    esi
c0007533:	31 fa                	xor    edx,edi
c0007535:	5f                   	pop    edi
c0007536:	5d                   	pop    ebp
c0007537:	c3                   	ret    

c0007538 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007538:	53                   	push   ebx
c0007539:	83 ec 0c             	sub    esp,0xc
c000753c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007540:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007544:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c0007549:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000754d:	68 00 01 00 00       	push   0x100
c0007552:	6a 00                	push   0x0
c0007554:	89 0c c5 e4 8e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd711c],ecx
c000755b:	89 14 c5 e0 8e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7120],edx
c0007562:	c1 e0 08             	shl    eax,0x8
c0007565:	05 00 8f 02 c0       	add    eax,0xc0028f00
c000756a:	50                   	push   eax
c000756b:	e8 80 8f ff ff       	call   c00004f0 <memset>
c0007570:	58                   	pop    eax
c0007571:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c0007576:	5a                   	pop    edx
c0007577:	c1 e0 08             	shl    eax,0x8
c000757a:	53                   	push   ebx
c000757b:	05 00 8f 02 c0       	add    eax,0xc0028f00
c0007580:	50                   	push   eax
c0007581:	e8 ca 90 ff ff       	call   c0000650 <strcpy>
c0007586:	89 d8                	mov    eax,ebx
c0007588:	e8 1f ff ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c000758d:	ba 01 00 00 00       	mov    edx,0x1
c0007592:	0f b7 c0             	movzx  eax,ax
c0007595:	e8 d8 fd ff ff       	call   c0007372 <KiSetHashInTable(unsigned short, bool)>
c000759a:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c000759f:	83 c4 10             	add    esp,0x10
c00075a2:	40                   	inc    eax
c00075a3:	a3 c0 8e 02 c0       	mov    ds:0xc0028ec0,eax
c00075a8:	83 f8 03             	cmp    eax,0x3
c00075ab:	7e 09                	jle    c00075b6 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c00075ad:	83 c4 08             	add    esp,0x8
c00075b0:	5b                   	pop    ebx
c00075b1:	e9 ec fd ff ff       	jmp    c00073a2 <KiFlushSymlinkChanges()>
c00075b6:	83 c4 08             	add    esp,0x8
c00075b9:	5b                   	pop    ebx
c00075ba:	c3                   	ret    

c00075bb <KeInitialiseSymlinks()>:
c00075bb:	57                   	push   edi
c00075bc:	56                   	push   esi
c00075bd:	53                   	push   ebx
c00075be:	81 ec 14 01 00 00    	sub    esp,0x114
c00075c4:	68 00 20 00 00       	push   0x2000
c00075c9:	6a 00                	push   0x0
c00075cb:	68 00 93 02 c0       	push   0xc0029300
c00075d0:	c7 05 00 b3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b300,0x0
c00075da:	c7 05 c0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x0
c00075e4:	e8 07 8f ff ff       	call   c00004f0 <memset>
c00075e9:	59                   	pop    ecx
c00075ea:	5b                   	pop    ebx
c00075eb:	6a 00                	push   0x0
c00075ed:	68 a7 74 00 c0       	push   0xc00074a7
c00075f2:	e8 6a 5a 00 00       	call   c000d061 <KeRegisterAtexit(void (*)(void*), void*)>
c00075f7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00075fe:	e8 6d 84 00 00       	call   c000fa70 <malloc>
c0007603:	83 c4 0c             	add    esp,0xc
c0007606:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000760c:	68 03 2b 02 c0       	push   0xc0022b03
c0007611:	50                   	push   eax
c0007612:	89 c3                	mov    ebx,eax
c0007614:	e8 13 0b 00 00       	call   c000812c <File::File(char const*, Process*)>
c0007619:	83 c4 10             	add    esp,0x10
c000761c:	85 db                	test   ebx,ebx
c000761e:	75 10                	jne    c0007630 <KeInitialiseSymlinks()+0x75>
c0007620:	83 ec 0c             	sub    esp,0xc
c0007623:	68 92 2b 02 c0       	push   0xc0022b92
c0007628:	e8 89 87 00 00       	call   c000fdb6 <KePanic(char const*)>
c000762d:	83 c4 10             	add    esp,0x10
c0007630:	83 ec 0c             	sub    esp,0xc
c0007633:	53                   	push   ebx
c0007634:	e8 d5 0d 00 00       	call   c000840e <File::exists()>
c0007639:	83 c4 10             	add    esp,0x10
c000763c:	84 c0                	test   al,al
c000763e:	75 3a                	jne    c000767a <KeInitialiseSymlinks()+0xbf>
c0007640:	52                   	push   edx
c0007641:	52                   	push   edx
c0007642:	6a 12                	push   0x12
c0007644:	53                   	push   ebx
c0007645:	e8 00 0b 00 00       	call   c000814a <File::open(FileOpenMode)>
c000764a:	83 c4 10             	add    esp,0x10
c000764d:	85 c0                	test   eax,eax
c000764f:	74 10                	je     c0007661 <KeInitialiseSymlinks()+0xa6>
c0007651:	83 ec 0c             	sub    esp,0xc
c0007654:	68 af 2b 02 c0       	push   0xc0022baf
c0007659:	e8 58 87 00 00       	call   c000fdb6 <KePanic(char const*)>
c000765e:	83 c4 10             	add    esp,0x10
c0007661:	83 ec 0c             	sub    esp,0xc
c0007664:	53                   	push   ebx
c0007665:	e8 3e 0b 00 00       	call   c00081a8 <File::close()>
c000766a:	83 c4 10             	add    esp,0x10
c000766d:	85 db                	test   ebx,ebx
c000766f:	0f 84 9e 00 00 00    	je     c0007713 <KeInitialiseSymlinks()+0x158>
c0007675:	e9 8d 00 00 00       	jmp    c0007707 <KeInitialiseSymlinks()+0x14c>
c000767a:	50                   	push   eax
c000767b:	50                   	push   eax
c000767c:	6a 01                	push   0x1
c000767e:	53                   	push   ebx
c000767f:	e8 c6 0a 00 00       	call   c000814a <File::open(FileOpenMode)>
c0007684:	83 c4 10             	add    esp,0x10
c0007687:	85 c0                	test   eax,eax
c0007689:	74 10                	je     c000769b <KeInitialiseSymlinks()+0xe0>
c000768b:	83 ec 0c             	sub    esp,0xc
c000768e:	68 cc 2b 02 c0       	push   0xc0022bcc
c0007693:	e8 1e 87 00 00       	call   c000fdb6 <KePanic(char const*)>
c0007698:	83 c4 10             	add    esp,0x10
c000769b:	ff 05 00 b3 02 c0    	inc    DWORD PTR ds:0xc002b300
c00076a1:	83 ec 0c             	sub    esp,0xc
c00076a4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076aa:	57                   	push   edi
c00076ab:	8d 74 24 20          	lea    esi,[esp+0x20]
c00076af:	56                   	push   esi
c00076b0:	6a 00                	push   0x0
c00076b2:	68 00 01 00 00       	push   0x100
c00076b7:	53                   	push   ebx
c00076b8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076bb:	83 c4 20             	add    esp,0x20
c00076be:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00076c6:	75 33                	jne    c00076fb <KeInitialiseSymlinks()+0x140>
c00076c8:	83 ec 0c             	sub    esp,0xc
c00076cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076cd:	57                   	push   edi
c00076ce:	8d 54 24 18          	lea    edx,[esp+0x18]
c00076d2:	52                   	push   edx
c00076d3:	6a 00                	push   0x0
c00076d5:	6a 08                	push   0x8
c00076d7:	53                   	push   ebx
c00076d8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076db:	83 c4 20             	add    esp,0x20
c00076de:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00076e3:	75 16                	jne    c00076fb <KeInitialiseSymlinks()+0x140>
c00076e5:	89 f0                	mov    eax,esi
c00076e7:	e8 c0 fd ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c00076ec:	ba 01 00 00 00       	mov    edx,0x1
c00076f1:	0f b7 c0             	movzx  eax,ax
c00076f4:	e8 79 fc ff ff       	call   c0007372 <KiSetHashInTable(unsigned short, bool)>
c00076f9:	eb a0                	jmp    c000769b <KeInitialiseSymlinks()+0xe0>
c00076fb:	83 ec 0c             	sub    esp,0xc
c00076fe:	53                   	push   ebx
c00076ff:	e8 a4 0a 00 00       	call   c00081a8 <File::close()>
c0007704:	83 c4 10             	add    esp,0x10
c0007707:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007709:	83 ec 0c             	sub    esp,0xc
c000770c:	53                   	push   ebx
c000770d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007710:	83 c4 10             	add    esp,0x10
c0007713:	81 c4 10 01 00 00    	add    esp,0x110
c0007719:	5b                   	pop    ebx
c000771a:	5e                   	pop    esi
c000771b:	5f                   	pop    edi
c000771c:	c3                   	ret    

c000771d <KiIsSymlinkRegistered(char const*)>:
c000771d:	55                   	push   ebp
c000771e:	57                   	push   edi
c000771f:	56                   	push   esi
c0007720:	53                   	push   ebx
c0007721:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007727:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000772e:	89 f0                	mov    eax,esi
c0007730:	e8 77 fd ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c0007735:	0f b7 c0             	movzx  eax,ax
c0007738:	e8 1b fc ff ff       	call   c0007358 <KiIsHashInTable(unsigned short)>
c000773d:	31 d2                	xor    edx,edx
c000773f:	88 c1                	mov    cl,al
c0007741:	31 c0                	xor    eax,eax
c0007743:	84 c9                	test   cl,cl
c0007745:	0f 84 31 01 00 00    	je     c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c000774b:	31 db                	xor    ebx,ebx
c000774d:	39 1d c0 8e 02 c0    	cmp    DWORD PTR ds:0xc0028ec0,ebx
c0007753:	7e 30                	jle    c0007785 <KiIsSymlinkRegistered(char const*)+0x68>
c0007755:	89 d8                	mov    eax,ebx
c0007757:	c1 e0 08             	shl    eax,0x8
c000775a:	51                   	push   ecx
c000775b:	05 00 8f 02 c0       	add    eax,0xc0028f00
c0007760:	51                   	push   ecx
c0007761:	50                   	push   eax
c0007762:	56                   	push   esi
c0007763:	e8 18 90 ff ff       	call   c0000780 <strcmp>
c0007768:	83 c4 10             	add    esp,0x10
c000776b:	85 c0                	test   eax,eax
c000776d:	75 13                	jne    c0007782 <KiIsSymlinkRegistered(char const*)+0x65>
c000776f:	8b 04 dd e0 8e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd7120]
c0007776:	8b 14 dd e4 8e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd711c]
c000777d:	e9 fa 00 00 00       	jmp    c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c0007782:	43                   	inc    ebx
c0007783:	eb c8                	jmp    c000774d <KiIsSymlinkRegistered(char const*)+0x30>
c0007785:	83 ec 0c             	sub    esp,0xc
c0007788:	68 14 01 00 00       	push   0x114
c000778d:	e8 de 82 00 00       	call   c000fa70 <malloc>
c0007792:	83 c4 0c             	add    esp,0xc
c0007795:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000779b:	68 03 2b 02 c0       	push   0xc0022b03
c00077a0:	50                   	push   eax
c00077a1:	89 c3                	mov    ebx,eax
c00077a3:	e8 84 09 00 00       	call   c000812c <File::File(char const*, Process*)>
c00077a8:	83 c4 10             	add    esp,0x10
c00077ab:	85 db                	test   ebx,ebx
c00077ad:	75 12                	jne    c00077c1 <KiIsSymlinkRegistered(char const*)+0xa4>
c00077af:	83 ec 0c             	sub    esp,0xc
c00077b2:	68 e7 2b 02 c0       	push   0xc0022be7
c00077b7:	e8 fa 85 00 00       	call   c000fdb6 <KePanic(char const*)>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	eb 10                	jmp    c00077d1 <KiIsSymlinkRegistered(char const*)+0xb4>
c00077c1:	83 ec 0c             	sub    esp,0xc
c00077c4:	53                   	push   ebx
c00077c5:	e8 44 0c 00 00       	call   c000840e <File::exists()>
c00077ca:	83 c4 10             	add    esp,0x10
c00077cd:	84 c0                	test   al,al
c00077cf:	74 de                	je     c00077af <KiIsSymlinkRegistered(char const*)+0x92>
c00077d1:	52                   	push   edx
c00077d2:	52                   	push   edx
c00077d3:	6a 01                	push   0x1
c00077d5:	53                   	push   ebx
c00077d6:	e8 6f 09 00 00       	call   c000814a <File::open(FileOpenMode)>
c00077db:	83 c4 10             	add    esp,0x10
c00077de:	85 c0                	test   eax,eax
c00077e0:	74 10                	je     c00077f2 <KiIsSymlinkRegistered(char const*)+0xd5>
c00077e2:	83 ec 0c             	sub    esp,0xc
c00077e5:	68 02 2c 02 c0       	push   0xc0022c02
c00077ea:	e8 c7 85 00 00       	call   c000fdb6 <KePanic(char const*)>
c00077ef:	83 c4 10             	add    esp,0x10
c00077f2:	83 ec 0c             	sub    esp,0xc
c00077f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00077f7:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c00077fb:	55                   	push   ebp
c00077fc:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0007800:	57                   	push   edi
c0007801:	6a 00                	push   0x0
c0007803:	68 00 01 00 00       	push   0x100
c0007808:	53                   	push   ebx
c0007809:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000780c:	83 c4 20             	add    esp,0x20
c000780f:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007817:	75 4b                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0x147>
c0007819:	83 ec 0c             	sub    esp,0xc
c000781c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000781e:	55                   	push   ebp
c000781f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007823:	52                   	push   edx
c0007824:	6a 00                	push   0x0
c0007826:	6a 08                	push   0x8
c0007828:	53                   	push   ebx
c0007829:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000782c:	83 c4 20             	add    esp,0x20
c000782f:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007834:	75 2e                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0x147>
c0007836:	50                   	push   eax
c0007837:	50                   	push   eax
c0007838:	57                   	push   edi
c0007839:	56                   	push   esi
c000783a:	e8 41 8f ff ff       	call   c0000780 <strcmp>
c000783f:	83 c4 10             	add    esp,0x10
c0007842:	85 c0                	test   eax,eax
c0007844:	75 ac                	jne    c00077f2 <KiIsSymlinkRegistered(char const*)+0xd5>
c0007846:	83 ec 0c             	sub    esp,0xc
c0007849:	53                   	push   ebx
c000784a:	e8 59 09 00 00       	call   c00081a8 <File::close()>
c000784f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007851:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007854:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007857:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000785b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000785f:	83 c4 10             	add    esp,0x10
c0007862:	eb 18                	jmp    c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c0007864:	83 ec 0c             	sub    esp,0xc
c0007867:	53                   	push   ebx
c0007868:	e8 3b 09 00 00       	call   c00081a8 <File::close()>
c000786d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000786f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007872:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007875:	83 c4 10             	add    esp,0x10
c0007878:	31 c0                	xor    eax,eax
c000787a:	31 d2                	xor    edx,edx
c000787c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0007882:	5b                   	pop    ebx
c0007883:	5e                   	pop    esi
c0007884:	5f                   	pop    edi
c0007885:	5d                   	pop    ebp
c0007886:	c3                   	ret    

c0007887 <KeDereferenceSymlink(char const*, char*)>:
c0007887:	55                   	push   ebp
c0007888:	57                   	push   edi
c0007889:	56                   	push   esi
c000788a:	53                   	push   ebx
c000788b:	83 ec 48             	sub    esp,0x48
c000788e:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0007892:	56                   	push   esi
c0007893:	e8 85 fe ff ff       	call   c000771d <KiIsSymlinkRegistered(char const*)>
c0007898:	83 c4 10             	add    esp,0x10
c000789b:	89 c7                	mov    edi,eax
c000789d:	89 d0                	mov    eax,edx
c000789f:	09 f8                	or     eax,edi
c00078a1:	75 07                	jne    c00078aa <KeDereferenceSymlink(char const*, char*)+0x23>
c00078a3:	31 c0                	xor    eax,eax
c00078a5:	e9 7c 01 00 00       	jmp    c0007a26 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00078aa:	83 ec 0c             	sub    esp,0xc
c00078ad:	89 d5                	mov    ebp,edx
c00078af:	68 14 01 00 00       	push   0x114
c00078b4:	e8 b7 81 00 00       	call   c000fa70 <malloc>
c00078b9:	83 c4 0c             	add    esp,0xc
c00078bc:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00078c2:	56                   	push   esi
c00078c3:	50                   	push   eax
c00078c4:	89 c3                	mov    ebx,eax
c00078c6:	e8 61 08 00 00       	call   c000812c <File::File(char const*, Process*)>
c00078cb:	83 c4 10             	add    esp,0x10
c00078ce:	85 db                	test   ebx,ebx
c00078d0:	0f 84 32 01 00 00    	je     c0007a08 <KeDereferenceSymlink(char const*, char*)+0x181>
c00078d6:	56                   	push   esi
c00078d7:	56                   	push   esi
c00078d8:	6a 01                	push   0x1
c00078da:	53                   	push   ebx
c00078db:	e8 6a 08 00 00       	call   c000814a <File::open(FileOpenMode)>
c00078e0:	83 c4 10             	add    esp,0x10
c00078e3:	85 c0                	test   eax,eax
c00078e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078e7:	74 09                	je     c00078f2 <KeDereferenceSymlink(char const*, char*)+0x6b>
c00078e9:	83 ec 0c             	sub    esp,0xc
c00078ec:	53                   	push   ebx
c00078ed:	e9 10 01 00 00       	jmp    c0007a02 <KeDereferenceSymlink(char const*, char*)+0x17b>
c00078f2:	83 ec 0c             	sub    esp,0xc
c00078f5:	8d 74 24 18          	lea    esi,[esp+0x18]
c00078f9:	56                   	push   esi
c00078fa:	8d 54 24 37          	lea    edx,[esp+0x37]
c00078fe:	52                   	push   edx
c00078ff:	6a 00                	push   0x0
c0007901:	6a 08                	push   0x8
c0007903:	53                   	push   ebx
c0007904:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007907:	83 c4 20             	add    esp,0x20
c000790a:	85 c0                	test   eax,eax
c000790c:	0f 85 e2 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007912:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007917:	0f 85 d7 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000791d:	83 ec 0c             	sub    esp,0xc
c0007920:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007922:	56                   	push   esi
c0007923:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007927:	52                   	push   edx
c0007928:	6a 00                	push   0x0
c000792a:	6a 08                	push   0x8
c000792c:	53                   	push   ebx
c000792d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007930:	83 c4 20             	add    esp,0x20
c0007933:	85 c0                	test   eax,eax
c0007935:	0f 85 b9 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000793b:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007940:	0f 85 ae 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007946:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000794a:	0f 85 53 ff ff ff    	jne    c00078a3 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007950:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0007954:	0f 85 49 ff ff ff    	jne    c00078a3 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000795a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0007962:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000796a:	51                   	push   ecx
c000796b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000796f:	50                   	push   eax
c0007970:	8d 44 24 20          	lea    eax,[esp+0x20]
c0007974:	50                   	push   eax
c0007975:	53                   	push   ebx
c0007976:	e8 d1 0a 00 00       	call   c000844c <File::stat(unsigned long long*, bool*)>
c000797b:	83 c4 10             	add    esp,0x10
c000797e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0007983:	75 6f                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007985:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007989:	31 c9                	xor    ecx,ecx
c000798b:	bf 0f 00 00 00       	mov    edi,0xf
c0007990:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007994:	39 c7                	cmp    edi,eax
c0007996:	89 cf                	mov    edi,ecx
c0007998:	19 d7                	sbb    edi,edx
c000799a:	73 58                	jae    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000799c:	83 c0 f0             	add    eax,0xfffffff0
c000799f:	bf ff 00 00 00       	mov    edi,0xff
c00079a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079a8:	83 d2 ff             	adc    edx,0xffffffff
c00079ab:	39 c7                	cmp    edi,eax
c00079ad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079b1:	19 d1                	sbb    ecx,edx
c00079b3:	72 53                	jb     c0007a08 <KeDereferenceSymlink(char const*, char*)+0x181>
c00079b5:	40                   	inc    eax
c00079b6:	52                   	push   edx
c00079b7:	50                   	push   eax
c00079b8:	6a 00                	push   0x0
c00079ba:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00079be:	e8 2d 8b ff ff       	call   c00004f0 <memset>
c00079c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00079c8:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00079cc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079d0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079d4:	53                   	push   ebx
c00079d5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079d8:	83 c4 20             	add    esp,0x20
c00079db:	85 c0                	test   eax,eax
c00079dd:	75 15                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079e3:	89 c7                	mov    edi,eax
c00079e5:	c1 ff 1f             	sar    edi,0x1f
c00079e8:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00079ec:	75 06                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079ee:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00079f2:	74 19                	je     c0007a0d <KeDereferenceSymlink(char const*, char*)+0x186>
c00079f4:	83 ec 0c             	sub    esp,0xc
c00079f7:	53                   	push   ebx
c00079f8:	e8 ab 07 00 00       	call   c00081a8 <File::close()>
c00079fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a02:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a05:	83 c4 10             	add    esp,0x10
c0007a08:	83 c8 ff             	or     eax,0xffffffff
c0007a0b:	eb 19                	jmp    c0007a26 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a0d:	83 ec 0c             	sub    esp,0xc
c0007a10:	53                   	push   ebx
c0007a11:	e8 92 07 00 00       	call   c00081a8 <File::close()>
c0007a16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a1b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a1e:	83 c4 10             	add    esp,0x10
c0007a21:	b8 01 00 00 00       	mov    eax,0x1
c0007a26:	83 c4 3c             	add    esp,0x3c
c0007a29:	5b                   	pop    ebx
c0007a2a:	5e                   	pop    esi
c0007a2b:	5f                   	pop    edi
c0007a2c:	5d                   	pop    ebp
c0007a2d:	c3                   	ret    

c0007a2e <KeCreateSymlink(char const*, char const*)>:
c0007a2e:	55                   	push   ebp
c0007a2f:	57                   	push   edi
c0007a30:	56                   	push   esi
c0007a31:	53                   	push   ebx
c0007a32:	83 ec 38             	sub    esp,0x38
c0007a35:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a39:	68 14 01 00 00       	push   0x114
c0007a3e:	e8 2d 80 00 00       	call   c000fa70 <malloc>
c0007a43:	6a 00                	push   0x0
c0007a45:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0007a4b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a4f:	89 c3                	mov    ebx,eax
c0007a51:	50                   	push   eax
c0007a52:	e8 d7 05 00 00       	call   c000802e <File::File(char const*, Process*, bool)>
c0007a57:	83 c4 20             	add    esp,0x20
c0007a5a:	85 db                	test   ebx,ebx
c0007a5c:	b8 01 00 00 00       	mov    eax,0x1
c0007a61:	0f 84 fb 00 00 00    	je     c0007b62 <KeCreateSymlink(char const*, char const*)+0x134>
c0007a67:	52                   	push   edx
c0007a68:	52                   	push   edx
c0007a69:	6a 12                	push   0x12
c0007a6b:	53                   	push   ebx
c0007a6c:	e8 d9 06 00 00       	call   c000814a <File::open(FileOpenMode)>
c0007a71:	83 c4 10             	add    esp,0x10
c0007a74:	85 c0                	test   eax,eax
c0007a76:	74 0b                	je     c0007a83 <KeCreateSymlink(char const*, char const*)+0x55>
c0007a78:	83 ec 0c             	sub    esp,0xc
c0007a7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a7d:	53                   	push   ebx
c0007a7e:	e9 d4 00 00 00       	jmp    c0007b57 <KeCreateSymlink(char const*, char const*)+0x129>
c0007a83:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007a87:	be 1d 2c 02 c0       	mov    esi,0xc0022c1d
c0007a8c:	b9 09 00 00 00       	mov    ecx,0x9
c0007a91:	fc                   	cld    
c0007a92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007a94:	83 ec 0c             	sub    esp,0xc
c0007a97:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007a9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a9d:	56                   	push   esi
c0007a9e:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007aa2:	52                   	push   edx
c0007aa3:	6a 00                	push   0x0
c0007aa5:	6a 08                	push   0x8
c0007aa7:	53                   	push   ebx
c0007aa8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007aab:	83 c4 20             	add    esp,0x20
c0007aae:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007ab3:	0f 85 90 00 00 00    	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ab9:	85 c0                	test   eax,eax
c0007abb:	0f 85 88 00 00 00    	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ac1:	e8 07 fa ff ff       	call   c00074cd <KiCreateSymlinkID()>
c0007ac6:	83 ec 0c             	sub    esp,0xc
c0007ac9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007acd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007ad1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ad3:	56                   	push   esi
c0007ad4:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007ad8:	52                   	push   edx
c0007ad9:	6a 00                	push   0x0
c0007adb:	6a 08                	push   0x8
c0007add:	53                   	push   ebx
c0007ade:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ae1:	83 c4 20             	add    esp,0x20
c0007ae4:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007ae9:	75 5e                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007aeb:	85 c0                	test   eax,eax
c0007aed:	75 5a                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007aef:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007af1:	83 ec 0c             	sub    esp,0xc
c0007af4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007af7:	55                   	push   ebp
c0007af8:	e8 83 8a ff ff       	call   c0000580 <strlen>
c0007afd:	31 d2                	xor    edx,edx
c0007aff:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b02:	55                   	push   ebp
c0007b03:	52                   	push   edx
c0007b04:	50                   	push   eax
c0007b05:	53                   	push   ebx
c0007b06:	ff d7                	call   edi
c0007b08:	83 c4 14             	add    esp,0x14
c0007b0b:	55                   	push   ebp
c0007b0c:	89 c6                	mov    esi,eax
c0007b0e:	e8 6d 8a ff ff       	call   c0000580 <strlen>
c0007b13:	83 c4 10             	add    esp,0x10
c0007b16:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b1a:	75 2d                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b1c:	85 f6                	test   esi,esi
c0007b1e:	75 29                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b20:	50                   	push   eax
c0007b21:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b25:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b29:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b2d:	e8 06 fa ff ff       	call   c0007538 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b35:	e8 6e 06 00 00       	call   c00081a8 <File::close()>
c0007b3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b3f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b42:	83 c4 10             	add    esp,0x10
c0007b45:	31 c0                	xor    eax,eax
c0007b47:	eb 19                	jmp    c0007b62 <KeCreateSymlink(char const*, char const*)+0x134>
c0007b49:	83 ec 0c             	sub    esp,0xc
c0007b4c:	53                   	push   ebx
c0007b4d:	e8 56 06 00 00       	call   c00081a8 <File::close()>
c0007b52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b57:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b5a:	83 c4 10             	add    esp,0x10
c0007b5d:	b8 01 00 00 00       	mov    eax,0x1
c0007b62:	83 c4 2c             	add    esp,0x2c
c0007b65:	5b                   	pop    ebx
c0007b66:	5e                   	pop    esi
c0007b67:	5f                   	pop    edi
c0007b68:	5d                   	pop    ebp
c0007b69:	c3                   	ret    

c0007b6a <File::read(unsigned long long, void*, int*)>:
c0007b6a:	53                   	push   ebx
c0007b6b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007b6f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007b73:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007b7a:	83 f8 19             	cmp    eax,0x19
c0007b7d:	77 35                	ja     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b7f:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007b86:	85 c0                	test   eax,eax
c0007b88:	74 2a                	je     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b8a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007b90:	85 c0                	test   eax,eax
c0007b92:	74 20                	je     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b94:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007b98:	74 21                	je     c0007bbb <File::read(unsigned long long, void*, int*)+0x51>
c0007b9a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007b9c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007ba0:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007ba6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007baa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007bae:	5b                   	pop    ebx
c0007baf:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007bb2:	ff e0                	jmp    eax
c0007bb4:	b8 0b 00 00 00       	mov    eax,0xb
c0007bb9:	eb 05                	jmp    c0007bc0 <File::read(unsigned long long, void*, int*)+0x56>
c0007bbb:	b8 05 00 00 00       	mov    eax,0x5
c0007bc0:	5b                   	pop    ebx
c0007bc1:	c3                   	ret    

c0007bc2 <File::write(unsigned long long, void*, int*)>:
c0007bc2:	53                   	push   ebx
c0007bc3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007bc7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007bcb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bd2:	83 f8 19             	cmp    eax,0x19
c0007bd5:	77 35                	ja     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007bd7:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007bde:	85 c0                	test   eax,eax
c0007be0:	74 2a                	je     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007be2:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007be8:	85 c0                	test   eax,eax
c0007bea:	74 20                	je     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007bec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bf0:	74 21                	je     c0007c13 <File::write(unsigned long long, void*, int*)+0x51>
c0007bf2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bf4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bf8:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007bfe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c02:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c06:	5b                   	pop    ebx
c0007c07:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c0a:	ff e0                	jmp    eax
c0007c0c:	b8 0b 00 00 00       	mov    eax,0xb
c0007c11:	eb 05                	jmp    c0007c18 <File::write(unsigned long long, void*, int*)+0x56>
c0007c13:	b8 05 00 00 00       	mov    eax,0x5
c0007c18:	5b                   	pop    ebx
c0007c19:	c3                   	ret    

c0007c1a <Directory::read(unsigned long long, void*, int*)>:
c0007c1a:	53                   	push   ebx
c0007c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c1f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c23:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c2a:	83 f8 19             	cmp    eax,0x19
c0007c2d:	77 35                	ja     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c2f:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007c36:	85 c0                	test   eax,eax
c0007c38:	74 2a                	je     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c3a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c40:	85 c0                	test   eax,eax
c0007c42:	74 20                	je     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c44:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c48:	74 21                	je     c0007c6b <Directory::read(unsigned long long, void*, int*)+0x51>
c0007c4a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c4c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c50:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c5e:	5b                   	pop    ebx
c0007c5f:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007c62:	ff e0                	jmp    eax
c0007c64:	b8 0b 00 00 00       	mov    eax,0xb
c0007c69:	eb 05                	jmp    c0007c70 <Directory::read(unsigned long long, void*, int*)+0x56>
c0007c6b:	b8 05 00 00 00       	mov    eax,0x5
c0007c70:	5b                   	pop    ebx
c0007c71:	c3                   	ret    

c0007c72 <Directory::write(unsigned long long, void*, int*)>:
c0007c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c76:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007c7d:	b8 0b 00 00 00       	mov    eax,0xb
c0007c82:	83 fa 19             	cmp    edx,0x19
c0007c85:	77 18                	ja     c0007c9f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007c87:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0007c8e:	85 d2                	test   edx,edx
c0007c90:	74 0d                	je     c0007c9f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007c92:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007c99:	19 c0                	sbb    eax,eax
c0007c9b:	83 e0 0a             	and    eax,0xa
c0007c9e:	40                   	inc    eax
c0007c9f:	c3                   	ret    

c0007ca0 <File::isAtty()>:
c0007ca0:	31 c0                	xor    eax,eax
c0007ca2:	c3                   	ret    
c0007ca3:	90                   	nop

c0007ca4 <Directory::isAtty()>:
c0007ca4:	31 c0                	xor    eax,eax
c0007ca6:	c3                   	ret    
c0007ca7:	90                   	nop

c0007ca8 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007ca8:	b8 0a 00 00 00       	mov    eax,0xa
c0007cad:	c3                   	ret    

c0007cae <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007cae:	b8 0a 00 00 00       	mov    eax,0xa
c0007cb3:	c3                   	ret    

c0007cb4 <Filesystem::allocateSwapfile(char const*, int)>:
c0007cb4:	31 c0                	xor    eax,eax
c0007cb6:	31 d2                	xor    edx,edx
c0007cb8:	c3                   	ret    
c0007cb9:	90                   	nop

c0007cba <File::~File()>:
c0007cba:	83 ec 0c             	sub    esp,0xc
c0007cbd:	ba f4 2c 02 c0       	mov    edx,0xc0022cf4
c0007cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cc6:	89 10                	mov    DWORD PTR [eax],edx
c0007cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ccc:	83 ec 0c             	sub    esp,0xc
c0007ccf:	50                   	push   eax
c0007cd0:	e8 25 b2 00 00       	call   c0012efa <UnixFile::~UnixFile()>
c0007cd5:	83 c4 10             	add    esp,0x10
c0007cd8:	90                   	nop
c0007cd9:	83 c4 0c             	add    esp,0xc
c0007cdc:	c3                   	ret    
c0007cdd:	90                   	nop

c0007cde <File::~File()>:
c0007cde:	83 ec 0c             	sub    esp,0xc
c0007ce1:	83 ec 0c             	sub    esp,0xc
c0007ce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ce8:	e8 cd ff ff ff       	call   c0007cba <File::~File()>
c0007ced:	83 c4 10             	add    esp,0x10
c0007cf0:	83 ec 08             	sub    esp,0x8
c0007cf3:	68 14 01 00 00       	push   0x114
c0007cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cfc:	e8 e6 54 00 00       	call   c000d1e7 <operator delete(void*, unsigned long)>
c0007d01:	83 c4 10             	add    esp,0x10
c0007d04:	83 c4 0c             	add    esp,0xc
c0007d07:	c3                   	ret    

c0007d08 <Directory::~Directory()>:
c0007d08:	83 ec 0c             	sub    esp,0xc
c0007d0b:	ba 10 2d 02 c0       	mov    edx,0xc0022d10
c0007d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d14:	89 10                	mov    DWORD PTR [eax],edx
c0007d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d1a:	83 ec 0c             	sub    esp,0xc
c0007d1d:	50                   	push   eax
c0007d1e:	e8 d7 b1 00 00       	call   c0012efa <UnixFile::~UnixFile()>
c0007d23:	83 c4 10             	add    esp,0x10
c0007d26:	90                   	nop
c0007d27:	83 c4 0c             	add    esp,0xc
c0007d2a:	c3                   	ret    
c0007d2b:	90                   	nop

c0007d2c <Directory::~Directory()>:
c0007d2c:	83 ec 0c             	sub    esp,0xc
c0007d2f:	83 ec 0c             	sub    esp,0xc
c0007d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d36:	e8 cd ff ff ff       	call   c0007d08 <Directory::~Directory()>
c0007d3b:	83 c4 10             	add    esp,0x10
c0007d3e:	83 ec 08             	sub    esp,0x8
c0007d41:	68 14 01 00 00       	push   0x114
c0007d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d4a:	e8 98 54 00 00       	call   c000d1e7 <operator delete(void*, unsigned long)>
c0007d4f:	83 c4 10             	add    esp,0x10
c0007d52:	83 c4 0c             	add    esp,0xc
c0007d55:	c3                   	ret    

c0007d56 <Filesystem::Filesystem()>:
c0007d56:	ba 88 2c 02 c0       	mov    edx,0xc0022c88
c0007d5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d5f:	89 10                	mov    DWORD PTR [eax],edx
c0007d61:	8b 15 04 b3 02 c0    	mov    edx,DWORD PTR ds:0xc002b304
c0007d67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d6b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007d6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d72:	a3 04 b3 02 c0       	mov    ds:0xc002b304,eax
c0007d77:	90                   	nop
c0007d78:	c3                   	ret    
c0007d79:	90                   	nop

c0007d7a <Filesystem::~Filesystem()>:
c0007d7a:	ba 88 2c 02 c0       	mov    edx,0xc0022c88
c0007d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d83:	89 10                	mov    DWORD PTR [eax],edx
c0007d85:	90                   	nop
c0007d86:	c3                   	ret    
c0007d87:	90                   	nop

c0007d88 <Filesystem::~Filesystem()>:
c0007d88:	83 ec 0c             	sub    esp,0xc
c0007d8b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007d8f:	e8 e6 ff ff ff       	call   c0007d7a <Filesystem::~Filesystem()>
c0007d94:	83 c4 04             	add    esp,0x4
c0007d97:	83 ec 08             	sub    esp,0x8
c0007d9a:	6a 08                	push   0x8
c0007d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007da0:	e8 42 54 00 00       	call   c000d1e7 <operator delete(void*, unsigned long)>
c0007da5:	83 c4 10             	add    esp,0x10
c0007da8:	83 c4 0c             	add    esp,0xc
c0007dab:	c3                   	ret    

c0007dac <Fs::getcwd(Process*, char*, int)>:
c0007dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007db0:	31 c0                	xor    eax,eax
c0007db2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007db6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007db9:	7d 15                	jge    c0007dd0 <Fs::getcwd(Process*, char*, int)+0x24>
c0007dbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007dbf:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007dc6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007dc9:	84 c9                	test   cl,cl
c0007dcb:	74 06                	je     c0007dd3 <Fs::getcwd(Process*, char*, int)+0x27>
c0007dcd:	40                   	inc    eax
c0007dce:	eb e2                	jmp    c0007db2 <Fs::getcwd(Process*, char*, int)+0x6>
c0007dd0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007dd3:	31 c0                	xor    eax,eax
c0007dd5:	c3                   	ret    

c0007dd6 <Fs::initVFS()>:
c0007dd6:	83 ec 18             	sub    esp,0x18
c0007dd9:	6a 08                	push   0x8
c0007ddb:	e8 90 7c 00 00       	call   c000fa70 <malloc>
c0007de0:	89 04 24             	mov    DWORD PTR [esp],eax
c0007de3:	e8 e4 3b 01 00       	call   c001b9cc <FAT::FAT()>
c0007de8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007def:	e8 7c 7c 00 00       	call   c000fa70 <malloc>
c0007df4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007df7:	e8 fe 4a 01 00       	call   c001c8fa <ISO9660::ISO9660()>
c0007dfc:	83 c4 1c             	add    esp,0x1c
c0007dff:	c3                   	ret    

c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e00:	55                   	push   ebp
c0007e01:	57                   	push   edi
c0007e02:	56                   	push   esi
c0007e03:	53                   	push   ebx
c0007e04:	81 ec 20 04 00 00    	sub    esp,0x420
c0007e0a:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c0007e11:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c0007e18:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c0007e1f:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c0007e26:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0007e2a:	68 00 04 00 00       	push   0x400
c0007e2f:	6a 00                	push   0x0
c0007e31:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0007e35:	57                   	push   edi
c0007e36:	e8 b5 86 ff ff       	call   c00004f0 <memset>
c0007e3b:	83 c4 10             	add    esp,0x10
c0007e3e:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c0007e42:	75 0b                	jne    c0007e4f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c0007e44:	50                   	push   eax
c0007e45:	50                   	push   eax
c0007e46:	56                   	push   esi
c0007e47:	57                   	push   edi
c0007e48:	e8 03 88 ff ff       	call   c0000650 <strcpy>
c0007e4d:	eb 45                	jmp    c0007e94 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c0007e4f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007e52:	83 f8 2f             	cmp    eax,0x2f
c0007e55:	74 05                	je     c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c0007e57:	83 f8 5c             	cmp    eax,0x5c
c0007e5a:	75 19                	jne    c0007e75 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c0007e5c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0007e5f:	3c 60                	cmp    al,0x60
c0007e61:	7e 03                	jle    c0007e66 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c0007e63:	83 e8 20             	sub    eax,0x20
c0007e66:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007e6a:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007e71:	50                   	push   eax
c0007e72:	50                   	push   eax
c0007e73:	eb 18                	jmp    c0007e8d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c0007e75:	50                   	push   eax
c0007e76:	50                   	push   eax
c0007e77:	55                   	push   ebp
c0007e78:	57                   	push   edi
c0007e79:	e8 d2 87 ff ff       	call   c0000650 <strcpy>
c0007e7e:	58                   	pop    eax
c0007e7f:	5a                   	pop    edx
c0007e80:	68 67 48 02 c0       	push   0xc0024867
c0007e85:	57                   	push   edi
c0007e86:	e8 e5 89 ff ff       	call   c0000870 <strcat>
c0007e8b:	59                   	pop    ecx
c0007e8c:	5d                   	pop    ebp
c0007e8d:	56                   	push   esi
c0007e8e:	57                   	push   edi
c0007e8f:	e8 dc 89 ff ff       	call   c0000870 <strcat>
c0007e94:	83 c4 10             	add    esp,0x10
c0007e97:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0007e9b:	3c 60                	cmp    al,0x60
c0007e9d:	7e 03                	jle    c0007ea2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c0007e9f:	83 e8 20             	sub    eax,0x20
c0007ea2:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007ea6:	be 03 00 00 00       	mov    esi,0x3
c0007eab:	88 03                	mov    BYTE PTR [ebx],al
c0007ead:	b8 03 00 00 00       	mov    eax,0x3
c0007eb2:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007eb9:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0007ebf:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0007ec3:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c0007ec8:	89 fa                	mov    edx,edi
c0007eca:	0f be ea             	movsx  ebp,dl
c0007ecd:	85 ed                	test   ebp,ebp
c0007ecf:	0f 84 a1 00 00 00    	je     c0007f76 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c0007ed5:	8d 56 01             	lea    edx,[esi+0x1]
c0007ed8:	83 fd 2f             	cmp    ebp,0x2f
c0007edb:	74 05                	je     c0007ee2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c0007edd:	83 fd 5c             	cmp    ebp,0x5c
c0007ee0:	75 12                	jne    c0007ef4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007ee2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007ee7:	89 c5                	mov    ebp,eax
c0007ee9:	74 09                	je     c0007ef4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007eeb:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0007eef:	40                   	inc    eax
c0007ef0:	89 d6                	mov    esi,edx
c0007ef2:	eb cf                	jmp    c0007ec3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007ef4:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c0007ef9:	89 f9                	mov    ecx,edi
c0007efb:	0f be e9             	movsx  ebp,cl
c0007efe:	75 61                	jne    c0007f61 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f00:	83 fd 2e             	cmp    ebp,0x2e
c0007f03:	75 5c                	jne    c0007f61 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f05:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c0007f0a:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c0007f0f:	74 19                	je     c0007f2a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c0007f11:	83 fd 2e             	cmp    ebp,0x2e
c0007f14:	74 55                	je     c0007f6b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f16:	89 f2                	mov    edx,esi
c0007f18:	42                   	inc    edx
c0007f19:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f1e:	83 f9 2f             	cmp    ecx,0x2f
c0007f21:	74 f5                	je     c0007f18 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f23:	83 f9 5c             	cmp    ecx,0x5c
c0007f26:	74 f0                	je     c0007f18 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f28:	eb c6                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f2a:	83 fd 2e             	cmp    ebp,0x2e
c0007f2d:	74 3c                	je     c0007f6b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f2f:	83 f8 03             	cmp    eax,0x3
c0007f32:	74 bc                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f34:	42                   	inc    edx
c0007f35:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f3a:	83 f9 2f             	cmp    ecx,0x2f
c0007f3d:	74 f5                	je     c0007f34 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f3f:	83 f9 5c             	cmp    ecx,0x5c
c0007f42:	74 f0                	je     c0007f34 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f44:	48                   	dec    eax
c0007f45:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007f49:	75 06                	jne    c0007f51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007f4b:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f4f:	eb f3                	jmp    c0007f44 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c0007f51:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007f55:	74 07                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c0007f57:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f5b:	48                   	dec    eax
c0007f5c:	eb f3                	jmp    c0007f51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007f5e:	40                   	inc    eax
c0007f5f:	eb 8f                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f61:	83 fd 2f             	cmp    ebp,0x2f
c0007f64:	74 8a                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f66:	83 fd 5c             	cmp    ebp,0x5c
c0007f69:	74 85                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f6b:	89 f9                	mov    ecx,edi
c0007f6d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0007f70:	40                   	inc    eax
c0007f71:	e9 7a ff ff ff       	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f76:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f7a:	83 ec 0c             	sub    esp,0xc
c0007f7d:	53                   	push   ebx
c0007f7e:	e8 fd 85 ff ff       	call   c0000580 <strlen>
c0007f83:	83 c4 10             	add    esp,0x10
c0007f86:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0007f8b:	74 1c                	je     c0007fa9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007f8d:	83 ec 0c             	sub    esp,0xc
c0007f90:	53                   	push   ebx
c0007f91:	e8 ea 85 ff ff       	call   c0000580 <strlen>
c0007f96:	83 c4 10             	add    esp,0x10
c0007f99:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007f9e:	74 09                	je     c0007fa9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007fa0:	31 ff                	xor    edi,edi
c0007fa2:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c0007fa7:	eb 5c                	jmp    c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0007fa9:	83 ec 0c             	sub    esp,0xc
c0007fac:	53                   	push   ebx
c0007fad:	e8 ce 85 ff ff       	call   c0000580 <strlen>
c0007fb2:	83 c4 10             	add    esp,0x10
c0007fb5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0007fba:	74 e4                	je     c0007fa0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c0007fbc:	83 ec 0c             	sub    esp,0xc
c0007fbf:	53                   	push   ebx
c0007fc0:	e8 bb 85 ff ff       	call   c0000580 <strlen>
c0007fc5:	83 c4 10             	add    esp,0x10
c0007fc8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0007fcd:	eb ab                	jmp    c0007f7a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c0007fcf:	52                   	push   edx
c0007fd0:	52                   	push   edx
c0007fd1:	53                   	push   ebx
c0007fd2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0007fd6:	55                   	push   ebp
c0007fd7:	e8 74 86 ff ff       	call   c0000650 <strcpy>
c0007fdc:	59                   	pop    ecx
c0007fdd:	58                   	pop    eax
c0007fde:	53                   	push   ebx
c0007fdf:	55                   	push   ebp
c0007fe0:	e8 a2 f8 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c0007fe5:	83 c4 10             	add    esp,0x10
c0007fe8:	48                   	dec    eax
c0007fe9:	75 37                	jne    c0008022 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0007feb:	50                   	push   eax
c0007fec:	53                   	push   ebx
c0007fed:	55                   	push   ebp
c0007fee:	68 26 2c 02 c0       	push   0xc0022c26
c0007ff3:	e8 56 ef ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007ff8:	8d 47 01             	lea    eax,[edi+0x1]
c0007ffb:	83 c4 10             	add    esp,0x10
c0007ffe:	83 ff 14             	cmp    edi,0x14
c0008001:	74 08                	je     c000800b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c0008003:	89 c7                	mov    edi,eax
c0008005:	85 f6                	test   esi,esi
c0008007:	75 c6                	jne    c0007fcf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c0008009:	eb 17                	jmp    c0008022 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000800b:	83 ec 0c             	sub    esp,0xc
c000800e:	bf 15 00 00 00       	mov    edi,0x15
c0008013:	68 41 2c 02 c0       	push   0xc0022c41
c0008018:	e8 99 7d 00 00       	call   c000fdb6 <KePanic(char const*)>
c000801d:	83 c4 10             	add    esp,0x10
c0008020:	eb e3                	jmp    c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0008022:	81 c4 1c 04 00 00    	add    esp,0x41c
c0008028:	5b                   	pop    ebx
c0008029:	5e                   	pop    esi
c000802a:	5f                   	pop    edi
c000802b:	5d                   	pop    ebp
c000802c:	c3                   	ret    
c000802d:	90                   	nop

c000802e <File::File(char const*, Process*, bool)>:
c000802e:	83 ec 1c             	sub    esp,0x1c
c0008031:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008035:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000803d:	83 ec 08             	sub    esp,0x8
c0008040:	6a 00                	push   0x0
c0008042:	50                   	push   eax
c0008043:	e8 cc ac 00 00       	call   c0012d14 <UnixFile::UnixFile(int)>
c0008048:	83 c4 10             	add    esp,0x10
c000804b:	ba f4 2c 02 c0       	mov    edx,0xc0022cf4
c0008050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008054:	89 10                	mov    DWORD PTR [eax],edx
c0008056:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000805b:	85 c0                	test   eax,eax
c000805d:	74 0f                	je     c000806e <File::File(char const*, Process*, bool)+0x40>
c000805f:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0008064:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0008068:	74 04                	je     c000806e <File::File(char const*, Process*, bool)+0x40>
c000806a:	b0 01                	mov    al,0x1
c000806c:	eb 02                	jmp    c0008070 <File::File(char const*, Process*, bool)+0x42>
c000806e:	b0 00                	mov    al,0x0
c0008070:	0f b6 c0             	movzx  eax,al
c0008073:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008077:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000807d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008081:	83 c2 0d             	add    edx,0xd
c0008084:	50                   	push   eax
c0008085:	51                   	push   ecx
c0008086:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000808a:	52                   	push   edx
c000808b:	e8 70 fd ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008090:	83 c4 10             	add    esp,0x10
c0008093:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008097:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000809a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000809e:	83 c2 0d             	add    edx,0xd
c00080a1:	83 ec 04             	sub    esp,0x4
c00080a4:	50                   	push   eax
c00080a5:	52                   	push   edx
c00080a6:	68 67 2c 02 c0       	push   0xc0022c67
c00080ab:	e8 9e ee ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00080b0:	83 c4 10             	add    esp,0x10
c00080b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b7:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00080ba:	83 e8 41             	sub    eax,0x41
c00080bd:	88 c2                	mov    dl,al
c00080bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080c3:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00080c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080cd:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00080d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080d5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080db:	0f b6 c0             	movzx  eax,al
c00080de:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00080e5:	85 c0                	test   eax,eax
c00080e7:	74 3e                	je     c0008127 <File::File(char const*, Process*, bool)+0xf9>
c00080e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080ed:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080f3:	0f b6 c0             	movzx  eax,al
c00080f6:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00080fd:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008103:	85 c0                	test   eax,eax
c0008105:	75 20                	jne    c0008127 <File::File(char const*, Process*, bool)+0xf9>
c0008107:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000810b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008111:	0f b6 c0             	movzx  eax,al
c0008114:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c000811b:	83 ec 0c             	sub    esp,0xc
c000811e:	50                   	push   eax
c000811f:	e8 06 28 00 00       	call   c000a92a <LogicalDisk::mount()>
c0008124:	83 c4 10             	add    esp,0x10
c0008127:	90                   	nop
c0008128:	83 c4 1c             	add    esp,0x1c
c000812b:	c3                   	ret    

c000812c <File::File(char const*, Process*)>:
c000812c:	83 ec 0c             	sub    esp,0xc
c000812f:	6a 01                	push   0x1
c0008131:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008135:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008139:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000813d:	e8 ec fe ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0008142:	83 c4 10             	add    esp,0x10
c0008145:	90                   	nop
c0008146:	83 c4 0c             	add    esp,0xc
c0008149:	c3                   	ret    

c000814a <File::open(FileOpenMode)>:
c000814a:	53                   	push   ebx
c000814b:	b8 0b 00 00 00       	mov    eax,0xb
c0008150:	83 ec 08             	sub    esp,0x8
c0008153:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008157:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000815e:	83 fa 19             	cmp    edx,0x19
c0008161:	77 40                	ja     c00081a3 <File::open(FileOpenMode)+0x59>
c0008163:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c000816a:	85 d2                	test   edx,edx
c000816c:	74 35                	je     c00081a3 <File::open(FileOpenMode)+0x59>
c000816e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008174:	85 d2                	test   edx,edx
c0008176:	74 2b                	je     c00081a3 <File::open(FileOpenMode)+0x59>
c0008178:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000817c:	b8 06 00 00 00       	mov    eax,0x6
c0008181:	75 20                	jne    c00081a3 <File::open(FileOpenMode)+0x59>
c0008183:	8b 02                	mov    eax,DWORD PTR [edx]
c0008185:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000818b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000818f:	51                   	push   ecx
c0008190:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008193:	51                   	push   ecx
c0008194:	52                   	push   edx
c0008195:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0008198:	83 c4 10             	add    esp,0x10
c000819b:	85 c0                	test   eax,eax
c000819d:	75 04                	jne    c00081a3 <File::open(FileOpenMode)+0x59>
c000819f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00081a3:	83 c4 08             	add    esp,0x8
c00081a6:	5b                   	pop    ebx
c00081a7:	c3                   	ret    

c00081a8 <File::close()>:
c00081a8:	53                   	push   ebx
c00081a9:	b8 0b 00 00 00       	mov    eax,0xb
c00081ae:	83 ec 08             	sub    esp,0x8
c00081b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00081b5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00081bc:	83 f9 19             	cmp    ecx,0x19
c00081bf:	77 41                	ja     c0008202 <File::close()+0x5a>
c00081c1:	8b 1c 8d e0 ba 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4520]
c00081c8:	85 db                	test   ebx,ebx
c00081ca:	74 36                	je     c0008202 <File::close()+0x5a>
c00081cc:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00081d3:	74 2d                	je     c0008202 <File::close()+0x5a>
c00081d5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00081d9:	b8 05 00 00 00       	mov    eax,0x5
c00081de:	74 22                	je     c0008202 <File::close()+0x5a>
c00081e0:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00081e4:	8b 04 8d e0 ba 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4520]
c00081eb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00081f1:	53                   	push   ebx
c00081f2:	53                   	push   ebx
c00081f3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00081f5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00081fb:	50                   	push   eax
c00081fc:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c00081ff:	83 c4 10             	add    esp,0x10
c0008202:	83 c4 08             	add    esp,0x8
c0008205:	5b                   	pop    ebx
c0008206:	c3                   	ret    
c0008207:	90                   	nop

c0008208 <File::seek(unsigned long long)>:
c0008208:	56                   	push   esi
c0008209:	b8 0b 00 00 00       	mov    eax,0xb
c000820e:	53                   	push   ebx
c000820f:	51                   	push   ecx
c0008210:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008214:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008218:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000821c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008223:	83 fa 19             	cmp    edx,0x19
c0008226:	77 31                	ja     c0008259 <File::seek(unsigned long long)+0x51>
c0008228:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c000822f:	85 d2                	test   edx,edx
c0008231:	74 26                	je     c0008259 <File::seek(unsigned long long)+0x51>
c0008233:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008239:	85 d2                	test   edx,edx
c000823b:	74 1c                	je     c0008259 <File::seek(unsigned long long)+0x51>
c000823d:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008241:	b8 05 00 00 00       	mov    eax,0x5
c0008246:	74 11                	je     c0008259 <File::seek(unsigned long long)+0x51>
c0008248:	8b 02                	mov    eax,DWORD PTR [edx]
c000824a:	53                   	push   ebx
c000824b:	51                   	push   ecx
c000824c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008252:	52                   	push   edx
c0008253:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0008256:	83 c4 10             	add    esp,0x10
c0008259:	5a                   	pop    edx
c000825a:	5b                   	pop    ebx
c000825b:	5e                   	pop    esi
c000825c:	c3                   	ret    
c000825d:	90                   	nop

c000825e <File::truncate(unsigned long long)>:
c000825e:	56                   	push   esi
c000825f:	b8 0b 00 00 00       	mov    eax,0xb
c0008264:	53                   	push   ebx
c0008265:	51                   	push   ecx
c0008266:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000826a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000826e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008272:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008279:	83 fa 19             	cmp    edx,0x19
c000827c:	77 31                	ja     c00082af <File::truncate(unsigned long long)+0x51>
c000827e:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0008285:	85 d2                	test   edx,edx
c0008287:	74 26                	je     c00082af <File::truncate(unsigned long long)+0x51>
c0008289:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000828f:	85 d2                	test   edx,edx
c0008291:	74 1c                	je     c00082af <File::truncate(unsigned long long)+0x51>
c0008293:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008297:	b8 05 00 00 00       	mov    eax,0x5
c000829c:	74 11                	je     c00082af <File::truncate(unsigned long long)+0x51>
c000829e:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a0:	53                   	push   ebx
c00082a1:	51                   	push   ecx
c00082a2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082a8:	52                   	push   edx
c00082a9:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00082ac:	83 c4 10             	add    esp,0x10
c00082af:	5a                   	pop    edx
c00082b0:	5b                   	pop    ebx
c00082b1:	5e                   	pop    esi
c00082b2:	c3                   	ret    
c00082b3:	90                   	nop

c00082b4 <File::tell(unsigned long long*)>:
c00082b4:	83 ec 0c             	sub    esp,0xc
c00082b7:	b8 0b 00 00 00       	mov    eax,0xb
c00082bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00082c0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00082c7:	83 fa 19             	cmp    edx,0x19
c00082ca:	77 34                	ja     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082cc:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c00082d3:	85 d2                	test   edx,edx
c00082d5:	74 29                	je     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082d7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082dd:	85 d2                	test   edx,edx
c00082df:	74 1f                	je     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082e1:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00082e5:	b8 05 00 00 00       	mov    eax,0x5
c00082ea:	74 14                	je     c0008300 <File::tell(unsigned long long*)+0x4c>
c00082ec:	50                   	push   eax
c00082ed:	8b 02                	mov    eax,DWORD PTR [edx]
c00082ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082f3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00082f9:	52                   	push   edx
c00082fa:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00082fd:	83 c4 10             	add    esp,0x10
c0008300:	83 c4 0c             	add    esp,0xc
c0008303:	c3                   	ret    

c0008304 <File::rewind()>:
c0008304:	83 ec 10             	sub    esp,0x10
c0008307:	6a 00                	push   0x0
c0008309:	6a 00                	push   0x0
c000830b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000830f:	e8 f4 fe ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0008314:	83 c4 1c             	add    esp,0x1c
c0008317:	c3                   	ret    

c0008318 <File::unlink()>:
c0008318:	83 ec 0c             	sub    esp,0xc
c000831b:	b8 0b 00 00 00       	mov    eax,0xb
c0008320:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008324:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000832b:	83 f9 19             	cmp    ecx,0x19
c000832e:	77 2f                	ja     c000835f <File::unlink()+0x47>
c0008330:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008337:	85 c9                	test   ecx,ecx
c0008339:	74 24                	je     c000835f <File::unlink()+0x47>
c000833b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008341:	85 c9                	test   ecx,ecx
c0008343:	74 1a                	je     c000835f <File::unlink()+0x47>
c0008345:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008349:	b8 06 00 00 00       	mov    eax,0x6
c000834e:	75 0f                	jne    c000835f <File::unlink()+0x47>
c0008350:	50                   	push   eax
c0008351:	83 c2 0d             	add    edx,0xd
c0008354:	50                   	push   eax
c0008355:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008357:	52                   	push   edx
c0008358:	51                   	push   ecx
c0008359:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000835c:	83 c4 10             	add    esp,0x10
c000835f:	83 c4 0c             	add    esp,0xc
c0008362:	c3                   	ret    
c0008363:	90                   	nop

c0008364 <File::rename(char const*)>:
c0008364:	83 ec 0c             	sub    esp,0xc
c0008367:	b8 0b 00 00 00       	mov    eax,0xb
c000836c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008370:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008377:	83 f9 19             	cmp    ecx,0x19
c000837a:	77 32                	ja     c00083ae <File::rename(char const*)+0x4a>
c000837c:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008383:	85 c9                	test   ecx,ecx
c0008385:	74 27                	je     c00083ae <File::rename(char const*)+0x4a>
c0008387:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000838d:	85 c9                	test   ecx,ecx
c000838f:	74 1d                	je     c00083ae <File::rename(char const*)+0x4a>
c0008391:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008395:	b8 06 00 00 00       	mov    eax,0x6
c000839a:	75 12                	jne    c00083ae <File::rename(char const*)+0x4a>
c000839c:	50                   	push   eax
c000839d:	83 c2 0d             	add    edx,0xd
c00083a0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083a6:	52                   	push   edx
c00083a7:	51                   	push   ecx
c00083a8:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00083ab:	83 c4 10             	add    esp,0x10
c00083ae:	83 c4 0c             	add    esp,0xc
c00083b1:	c3                   	ret    

c00083b2 <File::chfatattr(unsigned char, unsigned char)>:
c00083b2:	57                   	push   edi
c00083b3:	b8 0b 00 00 00       	mov    eax,0xb
c00083b8:	56                   	push   esi
c00083b9:	53                   	push   ebx
c00083ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083be:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00083c2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00083c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083cd:	83 f9 19             	cmp    ecx,0x19
c00083d0:	77 37                	ja     c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083d2:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00083d9:	85 c9                	test   ecx,ecx
c00083db:	74 2c                	je     c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083dd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083e3:	85 c9                	test   ecx,ecx
c00083e5:	74 22                	je     c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083e7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083eb:	b8 06 00 00 00       	mov    eax,0x6
c00083f0:	75 17                	jne    c0008409 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083f2:	89 f0                	mov    eax,esi
c00083f4:	8b 39                	mov    edi,DWORD PTR [ecx]
c00083f6:	0f b6 db             	movzx  ebx,bl
c00083f9:	0f b6 f0             	movzx  esi,al
c00083fc:	83 c2 0d             	add    edx,0xd
c00083ff:	56                   	push   esi
c0008400:	53                   	push   ebx
c0008401:	52                   	push   edx
c0008402:	51                   	push   ecx
c0008403:	ff 57 38             	call   DWORD PTR [edi+0x38]
c0008406:	83 c4 10             	add    esp,0x10
c0008409:	5b                   	pop    ebx
c000840a:	5e                   	pop    esi
c000840b:	5f                   	pop    edi
c000840c:	c3                   	ret    
c000840d:	90                   	nop

c000840e <File::exists()>:
c000840e:	83 ec 0c             	sub    esp,0xc
c0008411:	31 c0                	xor    eax,eax
c0008413:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008417:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000841e:	83 f9 19             	cmp    ecx,0x19
c0008421:	77 24                	ja     c0008447 <File::exists()+0x39>
c0008423:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c000842a:	85 c9                	test   ecx,ecx
c000842c:	74 19                	je     c0008447 <File::exists()+0x39>
c000842e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008434:	85 c9                	test   ecx,ecx
c0008436:	74 0f                	je     c0008447 <File::exists()+0x39>
c0008438:	50                   	push   eax
c0008439:	83 c2 0d             	add    edx,0xd
c000843c:	50                   	push   eax
c000843d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000843f:	52                   	push   edx
c0008440:	51                   	push   ecx
c0008441:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008444:	83 c4 10             	add    esp,0x10
c0008447:	83 c4 0c             	add    esp,0xc
c000844a:	c3                   	ret    
c000844b:	90                   	nop

c000844c <File::stat(unsigned long long*, bool*)>:
c000844c:	56                   	push   esi
c000844d:	53                   	push   ebx
c000844e:	50                   	push   eax
c000844f:	b8 0b 00 00 00       	mov    eax,0xb
c0008454:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008458:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000845c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008460:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008467:	83 f9 19             	cmp    ecx,0x19
c000846a:	77 3d                	ja     c00084a9 <File::stat(unsigned long long*, bool*)+0x5d>
c000846c:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008473:	85 c9                	test   ecx,ecx
c0008475:	74 32                	je     c00084a9 <File::stat(unsigned long long*, bool*)+0x5d>
c0008477:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000847d:	85 c9                	test   ecx,ecx
c000847f:	74 28                	je     c00084a9 <File::stat(unsigned long long*, bool*)+0x5d>
c0008481:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008485:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008487:	74 13                	je     c000849c <File::stat(unsigned long long*, bool*)+0x50>
c0008489:	83 ec 04             	sub    esp,0x4
c000848c:	56                   	push   esi
c000848d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008493:	51                   	push   ecx
c0008494:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0008497:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000849a:	eb 0a                	jmp    c00084a6 <File::stat(unsigned long long*, bool*)+0x5a>
c000849c:	53                   	push   ebx
c000849d:	83 c2 0d             	add    edx,0xd
c00084a0:	56                   	push   esi
c00084a1:	52                   	push   edx
c00084a2:	51                   	push   ecx
c00084a3:	ff 50 34             	call   DWORD PTR [eax+0x34]
c00084a6:	83 c4 10             	add    esp,0x10
c00084a9:	5a                   	pop    edx
c00084aa:	5b                   	pop    ebx
c00084ab:	5e                   	pop    esi
c00084ac:	c3                   	ret    

c00084ad <Fs::setcwd(Process*, char*)>:
c00084ad:	55                   	push   ebp
c00084ae:	57                   	push   edi
c00084af:	56                   	push   esi
c00084b0:	53                   	push   ebx
c00084b1:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00084b7:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c00084be:	6a 00                	push   0x0
c00084c0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00084c6:	57                   	push   edi
c00084c7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00084ce:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00084d2:	56                   	push   esi
c00084d3:	e8 28 f9 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00084d8:	89 34 24             	mov    DWORD PTR [esp],esi
c00084db:	e8 a0 80 ff ff       	call   c0000580 <strlen>
c00084e0:	83 c4 10             	add    esp,0x10
c00084e3:	83 f8 02             	cmp    eax,0x2
c00084e6:	77 15                	ja     c00084fd <Fs::setcwd(Process*, char*)+0x50>
c00084e8:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c00084ed:	83 eb 41             	sub    ebx,0x41
c00084f0:	8b 04 9d e0 ba 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4520]
c00084f7:	85 c0                	test   eax,eax
c00084f9:	75 1c                	jne    c0008517 <Fs::setcwd(Process*, char*)+0x6a>
c00084fb:	eb 2f                	jmp    c000852c <Fs::setcwd(Process*, char*)+0x7f>
c00084fd:	83 ec 0c             	sub    esp,0xc
c0008500:	56                   	push   esi
c0008501:	e8 7a 80 ff ff       	call   c0000580 <strlen>
c0008506:	83 c4 10             	add    esp,0x10
c0008509:	83 f8 03             	cmp    eax,0x3
c000850c:	75 57                	jne    c0008565 <Fs::setcwd(Process*, char*)+0xb8>
c000850e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008513:	75 50                	jne    c0008565 <Fs::setcwd(Process*, char*)+0xb8>
c0008515:	eb d1                	jmp    c00084e8 <Fs::setcwd(Process*, char*)+0x3b>
c0008517:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000851e:	75 0c                	jne    c000852c <Fs::setcwd(Process*, char*)+0x7f>
c0008520:	83 ec 0c             	sub    esp,0xc
c0008523:	50                   	push   eax
c0008524:	e8 01 24 00 00       	call   c000a92a <LogicalDisk::mount()>
c0008529:	83 c4 10             	add    esp,0x10
c000852c:	83 fb 19             	cmp    ebx,0x19
c000852f:	b8 03 00 00 00       	mov    eax,0x3
c0008534:	0f 87 c6 00 00 00    	ja     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c000853a:	8b 14 9d e0 ba 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4520]
c0008541:	b8 05 00 00 00       	mov    eax,0x5
c0008546:	85 d2                	test   edx,edx
c0008548:	0f 84 b2 00 00 00    	je     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c000854e:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008555:	b8 06 00 00 00       	mov    eax,0x6
c000855a:	0f 85 92 00 00 00    	jne    c00085f2 <Fs::setcwd(Process*, char*)+0x145>
c0008560:	e9 9b 00 00 00       	jmp    c0008600 <Fs::setcwd(Process*, char*)+0x153>
c0008565:	83 ec 0c             	sub    esp,0xc
c0008568:	68 14 01 00 00       	push   0x114
c000856d:	e8 fe 74 00 00       	call   c000fa70 <malloc>
c0008572:	83 c4 0c             	add    esp,0xc
c0008575:	55                   	push   ebp
c0008576:	56                   	push   esi
c0008577:	50                   	push   eax
c0008578:	89 c3                	mov    ebx,eax
c000857a:	e8 ad fb ff ff       	call   c000812c <File::File(char const*, Process*)>
c000857f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0008584:	83 c4 0c             	add    esp,0xc
c0008587:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000858b:	50                   	push   eax
c000858c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008590:	50                   	push   eax
c0008591:	53                   	push   ebx
c0008592:	e8 b5 fe ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0008597:	83 c4 10             	add    esp,0x10
c000859a:	83 f8 02             	cmp    eax,0x2
c000859d:	74 27                	je     c00085c6 <Fs::setcwd(Process*, char*)+0x119>
c000859f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00085a4:	75 1c                	jne    c00085c2 <Fs::setcwd(Process*, char*)+0x115>
c00085a6:	85 db                	test   ebx,ebx
c00085a8:	b8 02 00 00 00       	mov    eax,0x2
c00085ad:	74 51                	je     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085b1:	83 ec 0c             	sub    esp,0xc
c00085b4:	53                   	push   ebx
c00085b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085b8:	83 c4 10             	add    esp,0x10
c00085bb:	b8 02 00 00 00       	mov    eax,0x2
c00085c0:	eb 3e                	jmp    c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085c2:	85 c0                	test   eax,eax
c00085c4:	74 1c                	je     c00085e2 <Fs::setcwd(Process*, char*)+0x135>
c00085c6:	85 db                	test   ebx,ebx
c00085c8:	b8 01 00 00 00       	mov    eax,0x1
c00085cd:	74 31                	je     c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085d1:	83 ec 0c             	sub    esp,0xc
c00085d4:	53                   	push   ebx
c00085d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085d8:	83 c4 10             	add    esp,0x10
c00085db:	b8 01 00 00 00       	mov    eax,0x1
c00085e0:	eb 1e                	jmp    c0008600 <Fs::setcwd(Process*, char*)+0x153>
c00085e2:	85 db                	test   ebx,ebx
c00085e4:	74 0c                	je     c00085f2 <Fs::setcwd(Process*, char*)+0x145>
c00085e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085e8:	83 ec 0c             	sub    esp,0xc
c00085eb:	53                   	push   ebx
c00085ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085ef:	83 c4 10             	add    esp,0x10
c00085f2:	50                   	push   eax
c00085f3:	50                   	push   eax
c00085f4:	56                   	push   esi
c00085f5:	57                   	push   edi
c00085f6:	e8 55 80 ff ff       	call   c0000650 <strcpy>
c00085fb:	83 c4 10             	add    esp,0x10
c00085fe:	31 c0                	xor    eax,eax
c0008600:	81 c4 1c 02 00 00    	add    esp,0x21c
c0008606:	5b                   	pop    ebx
c0008607:	5e                   	pop    esi
c0008608:	5f                   	pop    edi
c0008609:	5d                   	pop    ebp
c000860a:	c3                   	ret    
c000860b:	90                   	nop

c000860c <Directory::Directory(char const*, Process*)>:
c000860c:	83 ec 0c             	sub    esp,0xc
c000860f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008613:	83 ec 08             	sub    esp,0x8
c0008616:	6a 00                	push   0x0
c0008618:	50                   	push   eax
c0008619:	e8 f6 a6 00 00       	call   c0012d14 <UnixFile::UnixFile(int)>
c000861e:	83 c4 10             	add    esp,0x10
c0008621:	ba 10 2d 02 c0       	mov    edx,0xc0022d10
c0008626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000862a:	89 10                	mov    DWORD PTR [eax],edx
c000862c:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0008631:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008635:	0f 95 c0             	setne  al
c0008638:	0f b6 c0             	movzx  eax,al
c000863b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000863f:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008645:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008649:	83 c2 0d             	add    edx,0xd
c000864c:	50                   	push   eax
c000864d:	51                   	push   ecx
c000864e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008652:	52                   	push   edx
c0008653:	e8 a8 f7 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008658:	83 c4 10             	add    esp,0x10
c000865b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000865f:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008662:	83 e8 41             	sub    eax,0x41
c0008665:	88 c2                	mov    dl,al
c0008667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000866b:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008675:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0008679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000867d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008683:	0f b6 c0             	movzx  eax,al
c0008686:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c000868d:	85 c0                	test   eax,eax
c000868f:	74 3e                	je     c00086cf <Directory::Directory(char const*, Process*)+0xc3>
c0008691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008695:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000869b:	0f b6 c0             	movzx  eax,al
c000869e:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00086a5:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00086ab:	85 c0                	test   eax,eax
c00086ad:	75 20                	jne    c00086cf <Directory::Directory(char const*, Process*)+0xc3>
c00086af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086b3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086b9:	0f b6 c0             	movzx  eax,al
c00086bc:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00086c3:	83 ec 0c             	sub    esp,0xc
c00086c6:	50                   	push   eax
c00086c7:	e8 5e 22 00 00       	call   c000a92a <LogicalDisk::mount()>
c00086cc:	83 c4 10             	add    esp,0x10
c00086cf:	90                   	nop
c00086d0:	83 c4 0c             	add    esp,0xc
c00086d3:	c3                   	ret    

c00086d4 <Directory::open()>:
c00086d4:	53                   	push   ebx
c00086d5:	b8 0b 00 00 00       	mov    eax,0xb
c00086da:	83 ec 08             	sub    esp,0x8
c00086dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086e1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00086e8:	83 fa 19             	cmp    edx,0x19
c00086eb:	77 3d                	ja     c000872a <Directory::open()+0x56>
c00086ed:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c00086f4:	85 d2                	test   edx,edx
c00086f6:	74 32                	je     c000872a <Directory::open()+0x56>
c00086f8:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00086fe:	85 d2                	test   edx,edx
c0008700:	74 28                	je     c000872a <Directory::open()+0x56>
c0008702:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008706:	b8 06 00 00 00       	mov    eax,0x6
c000870b:	75 1d                	jne    c000872a <Directory::open()+0x56>
c000870d:	50                   	push   eax
c000870e:	8b 02                	mov    eax,DWORD PTR [edx]
c0008710:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008716:	51                   	push   ecx
c0008717:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000871a:	51                   	push   ecx
c000871b:	52                   	push   edx
c000871c:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000871f:	83 c4 10             	add    esp,0x10
c0008722:	85 c0                	test   eax,eax
c0008724:	75 04                	jne    c000872a <Directory::open()+0x56>
c0008726:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000872a:	83 c4 08             	add    esp,0x8
c000872d:	5b                   	pop    ebx
c000872e:	c3                   	ret    
c000872f:	90                   	nop

c0008730 <Directory::close()>:
c0008730:	53                   	push   ebx
c0008731:	b8 0b 00 00 00       	mov    eax,0xb
c0008736:	83 ec 08             	sub    esp,0x8
c0008739:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000873d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008744:	83 f9 19             	cmp    ecx,0x19
c0008747:	77 41                	ja     c000878a <Directory::close()+0x5a>
c0008749:	8b 1c 8d e0 ba 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4520]
c0008750:	85 db                	test   ebx,ebx
c0008752:	74 36                	je     c000878a <Directory::close()+0x5a>
c0008754:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000875b:	74 2d                	je     c000878a <Directory::close()+0x5a>
c000875d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008761:	b8 05 00 00 00       	mov    eax,0x5
c0008766:	74 22                	je     c000878a <Directory::close()+0x5a>
c0008768:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000876c:	8b 04 8d e0 ba 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4520]
c0008773:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008779:	53                   	push   ebx
c000877a:	53                   	push   ebx
c000877b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000877d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008783:	50                   	push   eax
c0008784:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c0008787:	83 c4 10             	add    esp,0x10
c000878a:	83 c4 08             	add    esp,0x8
c000878d:	5b                   	pop    ebx
c000878e:	c3                   	ret    
c000878f:	90                   	nop

c0008790 <Directory::unlink()>:
c0008790:	83 ec 0c             	sub    esp,0xc
c0008793:	b8 0b 00 00 00       	mov    eax,0xb
c0008798:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000879c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a3:	83 f9 19             	cmp    ecx,0x19
c00087a6:	77 2f                	ja     c00087d7 <Directory::unlink()+0x47>
c00087a8:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00087af:	85 c9                	test   ecx,ecx
c00087b1:	74 24                	je     c00087d7 <Directory::unlink()+0x47>
c00087b3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00087b9:	85 c9                	test   ecx,ecx
c00087bb:	74 1a                	je     c00087d7 <Directory::unlink()+0x47>
c00087bd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087c1:	b8 06 00 00 00       	mov    eax,0x6
c00087c6:	75 0f                	jne    c00087d7 <Directory::unlink()+0x47>
c00087c8:	50                   	push   eax
c00087c9:	83 c2 0d             	add    edx,0xd
c00087cc:	50                   	push   eax
c00087cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087cf:	52                   	push   edx
c00087d0:	51                   	push   ecx
c00087d1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00087d4:	83 c4 10             	add    esp,0x10
c00087d7:	83 c4 0c             	add    esp,0xc
c00087da:	c3                   	ret    
c00087db:	90                   	nop

c00087dc <Directory::rename(char const*)>:
c00087dc:	83 ec 0c             	sub    esp,0xc
c00087df:	b8 0b 00 00 00       	mov    eax,0xb
c00087e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087e8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087ef:	83 f9 19             	cmp    ecx,0x19
c00087f2:	77 32                	ja     c0008826 <Directory::rename(char const*)+0x4a>
c00087f4:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00087fb:	85 c9                	test   ecx,ecx
c00087fd:	74 27                	je     c0008826 <Directory::rename(char const*)+0x4a>
c00087ff:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008805:	85 c9                	test   ecx,ecx
c0008807:	74 1d                	je     c0008826 <Directory::rename(char const*)+0x4a>
c0008809:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000880d:	b8 06 00 00 00       	mov    eax,0x6
c0008812:	75 12                	jne    c0008826 <Directory::rename(char const*)+0x4a>
c0008814:	50                   	push   eax
c0008815:	83 c2 0d             	add    edx,0xd
c0008818:	8b 01                	mov    eax,DWORD PTR [ecx]
c000881a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000881e:	52                   	push   edx
c000881f:	51                   	push   ecx
c0008820:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 c4 0c             	add    esp,0xc
c0008829:	c3                   	ret    

c000882a <Directory::exists()>:
c000882a:	83 ec 0c             	sub    esp,0xc
c000882d:	31 c0                	xor    eax,eax
c000882f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008833:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000883a:	83 f9 19             	cmp    ecx,0x19
c000883d:	77 24                	ja     c0008863 <Directory::exists()+0x39>
c000883f:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008846:	85 c9                	test   ecx,ecx
c0008848:	74 19                	je     c0008863 <Directory::exists()+0x39>
c000884a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008850:	85 c9                	test   ecx,ecx
c0008852:	74 0f                	je     c0008863 <Directory::exists()+0x39>
c0008854:	50                   	push   eax
c0008855:	83 c2 0d             	add    edx,0xd
c0008858:	50                   	push   eax
c0008859:	8b 01                	mov    eax,DWORD PTR [ecx]
c000885b:	52                   	push   edx
c000885c:	51                   	push   ecx
c000885d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008860:	83 c4 10             	add    esp,0x10
c0008863:	83 c4 0c             	add    esp,0xc
c0008866:	c3                   	ret    
c0008867:	90                   	nop

c0008868 <Directory::read(dirent*)>:
c0008868:	83 ec 1c             	sub    esp,0x1c
c000886b:	b8 0b 00 00 00       	mov    eax,0xb
c0008870:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008874:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000887b:	83 f9 19             	cmp    ecx,0x19
c000887e:	77 30                	ja     c00088b0 <Directory::read(dirent*)+0x48>
c0008880:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008887:	85 c9                	test   ecx,ecx
c0008889:	74 25                	je     c00088b0 <Directory::read(dirent*)+0x48>
c000888b:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0008892:	74 1c                	je     c00088b0 <Directory::read(dirent*)+0x48>
c0008894:	83 ec 0c             	sub    esp,0xc
c0008897:	8b 02                	mov    eax,DWORD PTR [edx]
c0008899:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000889d:	51                   	push   ecx
c000889e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00088a2:	6a 00                	push   0x0
c00088a4:	68 10 01 00 00       	push   0x110
c00088a9:	52                   	push   edx
c00088aa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00088ad:	83 c4 20             	add    esp,0x20
c00088b0:	83 c4 1c             	add    esp,0x1c
c00088b3:	c3                   	ret    

c00088b4 <Directory::create()>:
c00088b4:	83 ec 0c             	sub    esp,0xc
c00088b7:	b8 0b 00 00 00       	mov    eax,0xb
c00088bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088c0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088c7:	83 f9 19             	cmp    ecx,0x19
c00088ca:	77 2f                	ja     c00088fb <Directory::create()+0x47>
c00088cc:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00088d3:	85 c9                	test   ecx,ecx
c00088d5:	74 24                	je     c00088fb <Directory::create()+0x47>
c00088d7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088dd:	85 c9                	test   ecx,ecx
c00088df:	74 1a                	je     c00088fb <Directory::create()+0x47>
c00088e1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00088e5:	b8 06 00 00 00       	mov    eax,0x6
c00088ea:	75 0f                	jne    c00088fb <Directory::create()+0x47>
c00088ec:	50                   	push   eax
c00088ed:	83 c2 0d             	add    edx,0xd
c00088f0:	50                   	push   eax
c00088f1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088f3:	52                   	push   edx
c00088f4:	51                   	push   ecx
c00088f5:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00088f8:	83 c4 10             	add    esp,0x10
c00088fb:	83 c4 0c             	add    esp,0xc
c00088fe:	c3                   	ret    
c00088ff:	90                   	nop

c0008900 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0008900:	b8 0a 00 00 00       	mov    eax,0xa
c0008905:	c3                   	ret    
c0008906:	66 90                	xchg   ax,ax

c0008908 <Bus::Bus(char const*)>:
c0008908:	83 ec 0c             	sub    esp,0xc
c000890b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000890f:	83 ec 08             	sub    esp,0x8
c0008912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008916:	50                   	push   eax
c0008917:	e8 de 11 00 00       	call   c0009afa <Device::Device(char const*)>
c000891c:	83 c4 10             	add    esp,0x10
c000891f:	ba 2c 2d 02 c0       	mov    edx,0xc0022d2c
c0008924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008928:	89 10                	mov    DWORD PTR [eax],edx
c000892a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008938:	90                   	nop
c0008939:	83 c4 0c             	add    esp,0xc
c000893c:	c3                   	ret    
c000893d:	90                   	nop
c000893e:	66 90                	xchg   ax,ax

c0008940 <Bus::~Bus()>:
c0008940:	83 ec 0c             	sub    esp,0xc
c0008943:	ba 2c 2d 02 c0       	mov    edx,0xc0022d2c
c0008948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000894c:	89 10                	mov    DWORD PTR [eax],edx
c000894e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008952:	83 ec 0c             	sub    esp,0xc
c0008955:	50                   	push   eax
c0008956:	e8 3f 0f 00 00       	call   c000989a <Device::~Device()>
c000895b:	83 c4 10             	add    esp,0x10
c000895e:	90                   	nop
c000895f:	83 c4 0c             	add    esp,0xc
c0008962:	c3                   	ret    
c0008963:	90                   	nop

c0008964 <Bus::~Bus()>:
c0008964:	83 ec 0c             	sub    esp,0xc
c0008967:	83 ec 0c             	sub    esp,0xc
c000896a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000896e:	e8 cd ff ff ff       	call   c0008940 <Bus::~Bus()>
c0008973:	83 c4 10             	add    esp,0x10
c0008976:	83 ec 08             	sub    esp,0x8
c0008979:	68 58 01 00 00       	push   0x158
c000897e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008982:	e8 60 48 00 00       	call   c000d1e7 <operator delete(void*, unsigned long)>
c0008987:	83 c4 10             	add    esp,0x10
c000898a:	83 c4 0c             	add    esp,0xc
c000898d:	c3                   	ret    

c000898e <KeBeepThread(void*)>:
c000898e:	83 ec 0c             	sub    esp,0xc
c0008991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008995:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000899c:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00089a3:	75 01                	jne    c00089a6 <KeBeepThread(void*)+0x18>
c00089a5:	fb                   	sti    
c00089a6:	6b c0 0a             	imul   eax,eax,0xa
c00089a9:	83 ec 0c             	sub    esp,0xc
c00089ac:	50                   	push   eax
c00089ad:	e8 0e e2 00 00       	call   c0016bc0 <milliTenthSleep(unsigned int)>
c00089b2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00089b9:	e8 57 12 01 00       	call   c0019c15 <HalMakeBeep(int)>
c00089be:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00089c6:	83 c4 1c             	add    esp,0x1c
c00089c9:	e9 ca e0 00 00       	jmp    c0016a98 <blockTask(TaskState)>

c00089ce <KeBeep(int, int, bool)>:
c00089ce:	56                   	push   esi
c00089cf:	53                   	push   ebx
c00089d0:	83 ec 10             	sub    esp,0x10
c00089d3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089d7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089df:	e8 31 12 01 00       	call   c0019c15 <HalMakeBeep(int)>
c00089e4:	89 f0                	mov    eax,esi
c00089e6:	83 c4 10             	add    esp,0x10
c00089e9:	84 c0                	test   al,al
c00089eb:	74 1e                	je     c0008a0b <KeBeep(int, int, bool)+0x3d>
c00089ed:	6b db 0a             	imul   ebx,ebx,0xa
c00089f0:	83 ec 0c             	sub    esp,0xc
c00089f3:	53                   	push   ebx
c00089f4:	e8 c7 e1 00 00       	call   c0016bc0 <milliTenthSleep(unsigned int)>
c00089f9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a01:	83 c4 14             	add    esp,0x14
c0008a04:	5b                   	pop    ebx
c0008a05:	5e                   	pop    esi
c0008a06:	e9 0a 12 01 00       	jmp    c0019c15 <HalMakeBeep(int)>
c0008a0b:	68 e6 00 00 00       	push   0xe6
c0008a10:	53                   	push   ebx
c0008a11:	68 8e 89 00 c0       	push   0xc000898e
c0008a16:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0008a1c:	e8 5f dd 00 00       	call   c0016780 <Process::createThread(void (*)(void*), void*, int)>
c0008a21:	83 c4 14             	add    esp,0x14
c0008a24:	5b                   	pop    ebx
c0008a25:	5e                   	pop    esi
c0008a26:	c3                   	ret    
c0008a27:	90                   	nop

c0008a28 <KeLoadTimezoneStrings()>:
c0008a28:	55                   	push   ebp
c0008a29:	89 e5                	mov    ebp,esp
c0008a2b:	53                   	push   ebx
c0008a2c:	83 ec 44             	sub    esp,0x44
c0008a2f:	c6 05 20 b3 02 c0 01 	mov    BYTE PTR ds:0xc002b320,0x1
c0008a36:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c0008a3d:	83 ec 0c             	sub    esp,0xc
c0008a40:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0008a43:	e8 28 70 00 00       	call   c000fa70 <malloc>
c0008a48:	83 c4 10             	add    esp,0x10
c0008a4b:	89 c3                	mov    ebx,eax
c0008a4d:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0008a52:	83 ec 04             	sub    esp,0x4
c0008a55:	50                   	push   eax
c0008a56:	68 60 2d 02 c0       	push   0xc0022d60
c0008a5b:	53                   	push   ebx
c0008a5c:	e8 cb f6 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0008a61:	83 c4 10             	add    esp,0x10
c0008a64:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0008a67:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008a6b:	75 10                	jne    c0008a7d <KeLoadTimezoneStrings()+0x55>
c0008a6d:	83 ec 0c             	sub    esp,0xc
c0008a70:	68 7f 2d 02 c0       	push   0xc0022d7f
c0008a75:	e8 3c 73 00 00       	call   c000fdb6 <KePanic(char const*)>
c0008a7a:	83 c4 10             	add    esp,0x10
c0008a7d:	83 ec 08             	sub    esp,0x8
c0008a80:	6a 01                	push   0x1
c0008a82:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008a85:	e8 c0 f6 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0008a8a:	83 c4 10             	add    esp,0x10
c0008a8d:	83 ec 04             	sub    esp,0x4
c0008a90:	8d 45 cf             	lea    eax,[ebp-0x31]
c0008a93:	50                   	push   eax
c0008a94:	8d 45 d0             	lea    eax,[ebp-0x30]
c0008a97:	50                   	push   eax
c0008a98:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008a9b:	e8 ac f9 ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0008aa0:	83 c4 10             	add    esp,0x10
c0008aa3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008aa6:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008aa9:	83 ec 08             	sub    esp,0x8
c0008aac:	50                   	push   eax
c0008aad:	68 95 2d 02 c0       	push   0xc0022d95
c0008ab2:	e8 97 e4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008ab7:	83 c4 10             	add    esp,0x10
c0008aba:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008abd:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008ac0:	83 c0 01             	add    eax,0x1
c0008ac3:	83 ec 0c             	sub    esp,0xc
c0008ac6:	50                   	push   eax
c0008ac7:	e8 a4 6f 00 00       	call   c000fa70 <malloc>
c0008acc:	83 c4 10             	add    esp,0x10
c0008acf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0008ad2:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008ad5:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008ad8:	83 ec 04             	sub    esp,0x4
c0008adb:	50                   	push   eax
c0008adc:	6a 00                	push   0x0
c0008ade:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008ae1:	e8 0a 7a ff ff       	call   c00004f0 <memset>
c0008ae6:	83 c4 10             	add    esp,0x10
c0008ae9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008aec:	8b 00                	mov    eax,DWORD PTR [eax]
c0008aee:	83 c0 0c             	add    eax,0xc
c0008af1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008af3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008af6:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008af9:	83 ec 0c             	sub    esp,0xc
c0008afc:	8d 5d c8             	lea    ebx,[ebp-0x38]
c0008aff:	53                   	push   ebx
c0008b00:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b03:	52                   	push   edx
c0008b04:	50                   	push   eax
c0008b05:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b08:	ff d1                	call   ecx
c0008b0a:	83 c4 20             	add    esp,0x20
c0008b0d:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0008b10:	83 ec 08             	sub    esp,0x8
c0008b13:	50                   	push   eax
c0008b14:	68 a5 2d 02 c0       	push   0xc0022da5
c0008b19:	e8 30 e4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008b1e:	83 c4 10             	add    esp,0x10
c0008b21:	83 ec 0c             	sub    esp,0xc
c0008b24:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b27:	e8 7c f6 ff ff       	call   c00081a8 <File::close()>
c0008b2c:	83 c4 10             	add    esp,0x10
c0008b2f:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008b33:	74 15                	je     c0008b4a <KeLoadTimezoneStrings()+0x122>
c0008b35:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b38:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b3a:	83 c0 08             	add    eax,0x8
c0008b3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b3f:	83 ec 0c             	sub    esp,0xc
c0008b42:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b45:	ff d0                	call   eax
c0008b47:	83 c4 10             	add    esp,0x10
c0008b4a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0008b51:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0008b58:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c0008b5f:	7f 3a                	jg     c0008b9b <KeLoadTimezoneStrings()+0x173>
c0008b61:	83 ec 0c             	sub    esp,0xc
c0008b64:	6a 78                	push   0x78
c0008b66:	e8 05 6f 00 00       	call   c000fa70 <malloc>
c0008b6b:	83 c4 10             	add    esp,0x10
c0008b6e:	89 c2                	mov    edx,eax
c0008b70:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008b73:	89 14 85 40 b3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4cc0],edx
c0008b7a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008b7d:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008b84:	83 ec 08             	sub    esp,0x8
c0008b87:	68 ae 2d 02 c0       	push   0xc0022dae
c0008b8c:	50                   	push   eax
c0008b8d:	e8 be 7a ff ff       	call   c0000650 <strcpy>
c0008b92:	83 c4 10             	add    esp,0x10
c0008b95:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0008b99:	eb bd                	jmp    c0008b58 <KeLoadTimezoneStrings()+0x130>
c0008b9b:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0008ba2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008ba5:	8d 50 01             	lea    edx,[eax+0x1]
c0008ba8:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0008bab:	89 c2                	mov    edx,eax
c0008bad:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0008bb0:	01 d0                	add    eax,edx
c0008bb2:	8a 00                	mov    al,BYTE PTR [eax]
c0008bb4:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c0008bb7:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c0008bbb:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008bbe:	0f be c0             	movsx  eax,al
c0008bc1:	83 f8 0d             	cmp    eax,0xd
c0008bc4:	0f 84 82 01 00 00    	je     c0008d4c <KeLoadTimezoneStrings()+0x324>
c0008bca:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008bcd:	0f be c0             	movsx  eax,al
c0008bd0:	83 f8 09             	cmp    eax,0x9
c0008bd3:	75 44                	jne    c0008c19 <KeLoadTimezoneStrings()+0x1f1>
c0008bd5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008bd8:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008bdf:	83 ec 0c             	sub    esp,0xc
c0008be2:	50                   	push   eax
c0008be3:	e8 98 79 ff ff       	call   c0000580 <strlen>
c0008be8:	83 c4 10             	add    esp,0x10
c0008beb:	83 f8 08             	cmp    eax,0x8
c0008bee:	0f 96 c0             	setbe  al
c0008bf1:	0f b6 c0             	movzx  eax,al
c0008bf4:	85 c0                	test   eax,eax
c0008bf6:	0f 84 56 01 00 00    	je     c0008d52 <KeLoadTimezoneStrings()+0x32a>
c0008bfc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008bff:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c06:	83 ec 08             	sub    esp,0x8
c0008c09:	68 ae 2d 02 c0       	push   0xc0022dae
c0008c0e:	50                   	push   eax
c0008c0f:	e8 5c 7c ff ff       	call   c0000870 <strcat>
c0008c14:	83 c4 10             	add    esp,0x10
c0008c17:	eb bc                	jmp    c0008bd5 <KeLoadTimezoneStrings()+0x1ad>
c0008c19:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c1c:	0f be c0             	movsx  eax,al
c0008c1f:	83 f8 0a             	cmp    eax,0xa
c0008c22:	0f 85 9b 00 00 00    	jne    c0008cc3 <KeLoadTimezoneStrings()+0x29b>
c0008c28:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c2b:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 45 79 ff ff       	call   c0000580 <strlen>
c0008c3b:	83 c4 10             	add    esp,0x10
c0008c3e:	83 f8 35             	cmp    eax,0x35
c0008c41:	0f 96 c0             	setbe  al
c0008c44:	0f b6 c0             	movzx  eax,al
c0008c47:	85 c0                	test   eax,eax
c0008c49:	74 1d                	je     c0008c68 <KeLoadTimezoneStrings()+0x240>
c0008c4b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c4e:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c55:	83 ec 08             	sub    esp,0x8
c0008c58:	68 ae 2d 02 c0       	push   0xc0022dae
c0008c5d:	50                   	push   eax
c0008c5e:	e8 0d 7c ff ff       	call   c0000870 <strcat>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	eb c0                	jmp    c0008c28 <KeLoadTimezoneStrings()+0x200>
c0008c68:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0008c6c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008c6f:	89 c2                	mov    edx,eax
c0008c71:	c1 fa 1f             	sar    edx,0x1f
c0008c74:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0008c77:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0008c7a:	39 c8                	cmp    eax,ecx
c0008c7c:	89 d0                	mov    eax,edx
c0008c7e:	19 d8                	sbb    eax,ebx
c0008c80:	0f 82 d2 00 00 00    	jb     c0008d58 <KeLoadTimezoneStrings()+0x330>
c0008c86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c89:	a3 24 b3 02 c0       	mov    ds:0xc002b324,eax
c0008c8e:	83 ec 08             	sub    esp,0x8
c0008c91:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008c94:	68 b0 2d 02 c0       	push   0xc0022db0
c0008c99:	e8 b0 e2 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008c9e:	83 c4 10             	add    esp,0x10
c0008ca1:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008ca6:	83 ec 08             	sub    esp,0x8
c0008ca9:	50                   	push   eax
c0008caa:	68 c5 2d 02 c0       	push   0xc0022dc5
c0008caf:	e8 9a e2 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008cb4:	83 c4 10             	add    esp,0x10
c0008cb7:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0008cbe:	e9 9b 00 00 00       	jmp    c0008d5e <KeLoadTimezoneStrings()+0x336>
c0008cc3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008cc6:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008ccd:	83 ec 0c             	sub    esp,0xc
c0008cd0:	50                   	push   eax
c0008cd1:	e8 aa 78 ff ff       	call   c0000580 <strlen>
c0008cd6:	83 c4 10             	add    esp,0x10
c0008cd9:	83 f8 31             	cmp    eax,0x31
c0008cdc:	0f 96 c0             	setbe  al
c0008cdf:	0f b6 c0             	movzx  eax,al
c0008ce2:	85 c0                	test   eax,eax
c0008ce4:	74 1f                	je     c0008d05 <KeLoadTimezoneStrings()+0x2dd>
c0008ce6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008ce9:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008cf0:	83 ec 08             	sub    esp,0x8
c0008cf3:	8d 55 c6             	lea    edx,[ebp-0x3a]
c0008cf6:	52                   	push   edx
c0008cf7:	50                   	push   eax
c0008cf8:	e8 73 7b ff ff       	call   c0000870 <strcat>
c0008cfd:	83 c4 10             	add    esp,0x10
c0008d00:	e9 9d fe ff ff       	jmp    c0008ba2 <KeLoadTimezoneStrings()+0x17a>
c0008d05:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d08:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d0f:	83 ec 0c             	sub    esp,0xc
c0008d12:	50                   	push   eax
c0008d13:	e8 68 78 ff ff       	call   c0000580 <strlen>
c0008d18:	83 c4 10             	add    esp,0x10
c0008d1b:	83 f8 32             	cmp    eax,0x32
c0008d1e:	0f 94 c0             	sete   al
c0008d21:	0f b6 c0             	movzx  eax,al
c0008d24:	85 c0                	test   eax,eax
c0008d26:	0f 84 76 fe ff ff    	je     c0008ba2 <KeLoadTimezoneStrings()+0x17a>
c0008d2c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d2f:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d36:	83 ec 08             	sub    esp,0x8
c0008d39:	68 c9 2d 02 c0       	push   0xc0022dc9
c0008d3e:	50                   	push   eax
c0008d3f:	e8 2c 7b ff ff       	call   c0000870 <strcat>
c0008d44:	83 c4 10             	add    esp,0x10
c0008d47:	e9 56 fe ff ff       	jmp    c0008ba2 <KeLoadTimezoneStrings()+0x17a>
c0008d4c:	90                   	nop
c0008d4d:	e9 50 fe ff ff       	jmp    c0008ba2 <KeLoadTimezoneStrings()+0x17a>
c0008d52:	90                   	nop
c0008d53:	e9 4a fe ff ff       	jmp    c0008ba2 <KeLoadTimezoneStrings()+0x17a>
c0008d58:	90                   	nop
c0008d59:	e9 44 fe ff ff       	jmp    c0008ba2 <KeLoadTimezoneStrings()+0x17a>
c0008d5e:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008d63:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008d66:	7d 49                	jge    c0008db1 <KeLoadTimezoneStrings()+0x389>
c0008d68:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008d6d:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008d70:	0f 9c c0             	setl   al
c0008d73:	0f b6 d0             	movzx  edx,al
c0008d76:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008d7b:	52                   	push   edx
c0008d7c:	50                   	push   eax
c0008d7d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008d80:	68 ce 2d 02 c0       	push   0xc0022dce
c0008d85:	e8 c4 e1 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008d8a:	83 c4 10             	add    esp,0x10
c0008d8d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0008d90:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d97:	83 ec 04             	sub    esp,0x4
c0008d9a:	50                   	push   eax
c0008d9b:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008d9e:	68 dc 2d 02 c0       	push   0xc0022ddc
c0008da3:	e8 a6 e1 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008da8:	83 c4 10             	add    esp,0x10
c0008dab:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c0008daf:	eb ad                	jmp    c0008d5e <KeLoadTimezoneStrings()+0x336>
c0008db1:	90                   	nop
c0008db2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0008db5:	c9                   	leave  
c0008db6:	c3                   	ret    

c0008db7 <KeGetTimezoneStringFromID(int)>:
c0008db7:	55                   	push   ebp
c0008db8:	89 e5                	mov    ebp,esp
c0008dba:	83 ec 08             	sub    esp,0x8
c0008dbd:	83 ec 08             	sub    esp,0x8
c0008dc0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008dc3:	68 e5 2d 02 c0       	push   0xc0022de5
c0008dc8:	e8 81 e1 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008dcd:	83 c4 10             	add    esp,0x10
c0008dd0:	a0 20 b3 02 c0       	mov    al,ds:0xc002b320
c0008dd5:	83 f0 01             	xor    eax,0x1
c0008dd8:	0f b6 c0             	movzx  eax,al
c0008ddb:	85 c0                	test   eax,eax
c0008ddd:	74 15                	je     c0008df4 <KeGetTimezoneStringFromID(int)+0x3d>
c0008ddf:	e8 44 fc ff ff       	call   c0008a28 <KeLoadTimezoneStrings()>
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	68 03 2e 02 c0       	push   0xc0022e03
c0008dec:	e8 5d e1 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008df1:	83 c4 10             	add    esp,0x10
c0008df4:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008df9:	83 ec 04             	sub    esp,0x4
c0008dfc:	50                   	push   eax
c0008dfd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e00:	68 14 2e 02 c0       	push   0xc0022e14
c0008e05:	e8 44 e1 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008e0a:	83 c4 10             	add    esp,0x10
c0008e0d:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008e12:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c0008e15:	7d 06                	jge    c0008e1d <KeGetTimezoneStringFromID(int)+0x66>
c0008e17:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0008e1b:	79 07                	jns    c0008e24 <KeGetTimezoneStringFromID(int)+0x6d>
c0008e1d:	b8 00 00 00 00       	mov    eax,0x0
c0008e22:	eb 2e                	jmp    c0008e52 <KeGetTimezoneStringFromID(int)+0x9b>
c0008e24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e27:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008e2e:	83 c0 01             	add    eax,0x1
c0008e31:	83 ec 04             	sub    esp,0x4
c0008e34:	50                   	push   eax
c0008e35:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e38:	68 27 2e 02 c0       	push   0xc0022e27
c0008e3d:	e8 0c e1 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008e42:	83 c4 10             	add    esp,0x10
c0008e45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e48:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008e4f:	83 c0 01             	add    eax,0x1
c0008e52:	c9                   	leave  
c0008e53:	c3                   	ret    

c0008e54 <KeUpdateTimezone(char const*)>:
c0008e54:	55                   	push   ebp
c0008e55:	89 e5                	mov    ebp,esp
c0008e57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e5a:	8a 00                	mov    al,BYTE PTR [eax]
c0008e5c:	0f be c0             	movsx  eax,al
c0008e5f:	83 f8 2b             	cmp    eax,0x2b
c0008e62:	74 11                	je     c0008e75 <KeUpdateTimezone(char const*)+0x21>
c0008e64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e67:	8a 00                	mov    al,BYTE PTR [eax]
c0008e69:	0f be c0             	movsx  eax,al
c0008e6c:	83 f8 2d             	cmp    eax,0x2d
c0008e6f:	0f 85 be 00 00 00    	jne    c0008f33 <KeUpdateTimezone(char const*)+0xdf>
c0008e75:	c6 05 60 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b660,0x0
c0008e7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e7f:	83 c0 02             	add    eax,0x2
c0008e82:	8a 00                	mov    al,BYTE PTR [eax]
c0008e84:	0f be c0             	movsx  eax,al
c0008e87:	83 f8 2e             	cmp    eax,0x2e
c0008e8a:	75 10                	jne    c0008e9c <KeUpdateTimezone(char const*)+0x48>
c0008e8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e8f:	83 c0 03             	add    eax,0x3
c0008e92:	8a 00                	mov    al,BYTE PTR [eax]
c0008e94:	0f be c0             	movsx  eax,al
c0008e97:	83 f8 35             	cmp    eax,0x35
c0008e9a:	74 20                	je     c0008ebc <KeUpdateTimezone(char const*)+0x68>
c0008e9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e9f:	83 c0 03             	add    eax,0x3
c0008ea2:	8a 00                	mov    al,BYTE PTR [eax]
c0008ea4:	0f be c0             	movsx  eax,al
c0008ea7:	83 f8 2e             	cmp    eax,0x2e
c0008eaa:	75 14                	jne    c0008ec0 <KeUpdateTimezone(char const*)+0x6c>
c0008eac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eaf:	83 c0 04             	add    eax,0x4
c0008eb2:	8a 00                	mov    al,BYTE PTR [eax]
c0008eb4:	0f be c0             	movsx  eax,al
c0008eb7:	83 f8 35             	cmp    eax,0x35
c0008eba:	75 04                	jne    c0008ec0 <KeUpdateTimezone(char const*)+0x6c>
c0008ebc:	b0 01                	mov    al,0x1
c0008ebe:	eb 02                	jmp    c0008ec2 <KeUpdateTimezone(char const*)+0x6e>
c0008ec0:	b0 00                	mov    al,0x0
c0008ec2:	a2 61 b6 02 c0       	mov    ds:0xc002b661,al
c0008ec7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eca:	83 c0 01             	add    eax,0x1
c0008ecd:	8a 00                	mov    al,BYTE PTR [eax]
c0008ecf:	0f be c0             	movsx  eax,al
c0008ed2:	83 e8 30             	sub    eax,0x30
c0008ed5:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008eda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008edd:	83 c0 03             	add    eax,0x3
c0008ee0:	8a 00                	mov    al,BYTE PTR [eax]
c0008ee2:	0f be c0             	movsx  eax,al
c0008ee5:	83 f8 2e             	cmp    eax,0x2e
c0008ee8:	75 2e                	jne    c0008f18 <KeUpdateTimezone(char const*)+0xc4>
c0008eea:	8b 15 64 b6 02 c0    	mov    edx,DWORD PTR ds:0xc002b664
c0008ef0:	89 d0                	mov    eax,edx
c0008ef2:	c1 e0 02             	shl    eax,0x2
c0008ef5:	01 d0                	add    eax,edx
c0008ef7:	d1 e0                	shl    eax,1
c0008ef9:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008efe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f01:	83 c0 02             	add    eax,0x2
c0008f04:	8a 00                	mov    al,BYTE PTR [eax]
c0008f06:	0f be c0             	movsx  eax,al
c0008f09:	8d 50 d0             	lea    edx,[eax-0x30]
c0008f0c:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0008f11:	01 d0                	add    eax,edx
c0008f13:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f1b:	8a 00                	mov    al,BYTE PTR [eax]
c0008f1d:	0f be c0             	movsx  eax,al
c0008f20:	83 f8 2d             	cmp    eax,0x2d
c0008f23:	75 26                	jne    c0008f4b <KeUpdateTimezone(char const*)+0xf7>
c0008f25:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0008f2a:	f7 d8                	neg    eax
c0008f2c:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f31:	eb 18                	jmp    c0008f4b <KeUpdateTimezone(char const*)+0xf7>
c0008f33:	c6 05 60 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b660,0x0
c0008f3a:	c6 05 61 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b661,0x0
c0008f41:	c7 05 64 b6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b664,0x0
c0008f4b:	90                   	nop
c0008f4c:	5d                   	pop    ebp
c0008f4d:	c3                   	ret    

c0008f4e <KeSetTimezone(char const*)>:
c0008f4e:	55                   	push   ebp
c0008f4f:	89 e5                	mov    ebp,esp
c0008f51:	83 ec 18             	sub    esp,0x18
c0008f54:	83 ec 0c             	sub    esp,0xc
c0008f57:	68 34 2e 02 c0       	push   0xc0022e34
c0008f5c:	e8 db 42 00 00       	call   c000d23c <CmOpen(char const*)>
c0008f61:	83 c4 10             	add    esp,0x10
c0008f64:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008f67:	83 ec 08             	sub    esp,0x8
c0008f6a:	68 59 2e 02 c0       	push   0xc0022e59
c0008f6f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008f72:	e8 c0 4e 00 00       	call   c000de37 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	83 ec 04             	sub    esp,0x4
c0008f7d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008f80:	50                   	push   eax
c0008f81:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008f84:	e8 85 47 00 00       	call   c000d70e <CmSetString(Reghive_Tag*, int, char const*)>
c0008f89:	83 c4 10             	add    esp,0x10
c0008f8c:	83 ec 0c             	sub    esp,0xc
c0008f8f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008f92:	e8 c3 43 00 00       	call   c000d35a <CmClose(Reghive_Tag*)>
c0008f97:	83 c4 10             	add    esp,0x10
c0008f9a:	83 ec 0c             	sub    esp,0xc
c0008f9d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fa0:	e8 af fe ff ff       	call   c0008e54 <KeUpdateTimezone(char const*)>
c0008fa5:	83 c4 10             	add    esp,0x10
c0008fa8:	90                   	nop
c0008fa9:	c9                   	leave  
c0008faa:	c3                   	ret    

c0008fab <KeSetTimezone(int)>:
c0008fab:	55                   	push   ebp
c0008fac:	89 e5                	mov    ebp,esp
c0008fae:	83 ec 18             	sub    esp,0x18
c0008fb1:	83 ec 0c             	sub    esp,0xc
c0008fb4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fb7:	e8 fb fd ff ff       	call   c0008db7 <KeGetTimezoneStringFromID(int)>
c0008fbc:	83 c4 10             	add    esp,0x10
c0008fbf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008fc2:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0008fc6:	74 12                	je     c0008fda <KeSetTimezone(int)+0x2f>
c0008fc8:	83 ec 0c             	sub    esp,0xc
c0008fcb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fce:	e8 7b ff ff ff       	call   c0008f4e <KeSetTimezone(char const*)>
c0008fd3:	83 c4 10             	add    esp,0x10
c0008fd6:	b0 01                	mov    al,0x1
c0008fd8:	eb 02                	jmp    c0008fdc <KeSetTimezone(int)+0x31>
c0008fda:	b0 00                	mov    al,0x0
c0008fdc:	c9                   	leave  
c0008fdd:	c3                   	ret    

c0008fde <KeLoadTimezone()>:
c0008fde:	55                   	push   ebp
c0008fdf:	89 e5                	mov    ebp,esp
c0008fe1:	81 ec 68 02 00 00    	sub    esp,0x268
c0008fe7:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c0008fee:	83 ec 0c             	sub    esp,0xc
c0008ff1:	68 34 2e 02 c0       	push   0xc0022e34
c0008ff6:	e8 41 42 00 00       	call   c000d23c <CmOpen(char const*)>
c0008ffb:	83 c4 10             	add    esp,0x10
c0008ffe:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009001:	83 ec 08             	sub    esp,0x8
c0009004:	68 59 2e 02 c0       	push   0xc0022e59
c0009009:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000900c:	e8 26 4e 00 00       	call   c000de37 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0009011:	83 c4 10             	add    esp,0x10
c0009014:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009017:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000901b:	7e 18                	jle    c0009035 <KeLoadTimezone()+0x57>
c000901d:	83 ec 04             	sub    esp,0x4
c0009020:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009026:	50                   	push   eax
c0009027:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000902a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000902d:	e8 7a 43 00 00       	call   c000d3ac <CmGetString(Reghive_Tag*, int, char*)>
c0009032:	83 c4 10             	add    esp,0x10
c0009035:	83 ec 0c             	sub    esp,0xc
c0009038:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000903b:	e8 1a 43 00 00       	call   c000d35a <CmClose(Reghive_Tag*)>
c0009040:	83 c4 10             	add    esp,0x10
c0009043:	83 ec 0c             	sub    esp,0xc
c0009046:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c000904c:	50                   	push   eax
c000904d:	e8 02 fe ff ff       	call   c0008e54 <KeUpdateTimezone(char const*)>
c0009052:	83 c4 10             	add    esp,0x10
c0009055:	90                   	nop
c0009056:	c9                   	leave  
c0009057:	c3                   	ret    

c0009058 <Clock::Clock(char const*)>:
c0009058:	83 ec 0c             	sub    esp,0xc
c000905b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000905f:	83 ec 08             	sub    esp,0x8
c0009062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009066:	50                   	push   eax
c0009067:	e8 8e 0a 00 00       	call   c0009afa <Device::Device(char const*)>
c000906c:	83 c4 10             	add    esp,0x10
c000906f:	ba b8 2e 02 c0       	mov    edx,0xc0022eb8
c0009074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009078:	89 10                	mov    DWORD PTR [eax],edx
c000907a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000907e:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0009088:	90                   	nop
c0009089:	83 c4 0c             	add    esp,0xc
c000908c:	c3                   	ret    
c000908d:	90                   	nop

c000908e <Clock::~Clock()>:
c000908e:	83 ec 0c             	sub    esp,0xc
c0009091:	ba b8 2e 02 c0       	mov    edx,0xc0022eb8
c0009096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000909a:	89 10                	mov    DWORD PTR [eax],edx
c000909c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090a0:	83 ec 0c             	sub    esp,0xc
c00090a3:	50                   	push   eax
c00090a4:	e8 f1 07 00 00       	call   c000989a <Device::~Device()>
c00090a9:	83 c4 10             	add    esp,0x10
c00090ac:	90                   	nop
c00090ad:	83 c4 0c             	add    esp,0xc
c00090b0:	c3                   	ret    
c00090b1:	90                   	nop

c00090b2 <Clock::~Clock()>:
c00090b2:	83 ec 0c             	sub    esp,0xc
c00090b5:	83 ec 0c             	sub    esp,0xc
c00090b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090bc:	e8 cd ff ff ff       	call   c000908e <Clock::~Clock()>
c00090c1:	83 c4 10             	add    esp,0x10
c00090c4:	83 ec 08             	sub    esp,0x8
c00090c7:	68 58 01 00 00       	push   0x158
c00090cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090d0:	e8 12 41 00 00       	call   c000d1e7 <operator delete(void*, unsigned long)>
c00090d5:	83 c4 10             	add    esp,0x10
c00090d8:	83 c4 0c             	add    esp,0xc
c00090db:	c3                   	ret    

c00090dc <Clock::timeInSecondsLocal()>:
c00090dc:	55                   	push   ebp
c00090dd:	89 e5                	mov    ebp,esp
c00090df:	53                   	push   ebx
c00090e0:	83 ec 04             	sub    esp,0x4
c00090e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00090e8:	83 c0 24             	add    eax,0x24
c00090eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00090ed:	83 ec 0c             	sub    esp,0xc
c00090f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00090f3:	ff d0                	call   eax
c00090f5:	83 c4 10             	add    esp,0x10
c00090f8:	89 c1                	mov    ecx,eax
c00090fa:	89 d3                	mov    ebx,edx
c00090fc:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c0009101:	0f b6 d0             	movzx  edx,al
c0009104:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0009109:	01 d0                	add    eax,edx
c000910b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009111:	89 c2                	mov    edx,eax
c0009113:	c1 fa 1f             	sar    edx,0x1f
c0009116:	01 c1                	add    ecx,eax
c0009118:	11 d3                	adc    ebx,edx
c000911a:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c000911f:	0f b6 c0             	movzx  eax,al
c0009122:	85 c0                	test   eax,eax
c0009124:	74 0c                	je     c0009132 <Clock::timeInSecondsLocal()+0x56>
c0009126:	b8 08 07 00 00       	mov    eax,0x708
c000912b:	ba 00 00 00 00       	mov    edx,0x0
c0009130:	eb 0a                	jmp    c000913c <Clock::timeInSecondsLocal()+0x60>
c0009132:	b8 00 00 00 00       	mov    eax,0x0
c0009137:	ba 00 00 00 00       	mov    edx,0x0
c000913c:	01 c8                	add    eax,ecx
c000913e:	11 da                	adc    edx,ebx
c0009140:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0009143:	c9                   	leave  
c0009144:	c3                   	ret    
c0009145:	90                   	nop

c0009146 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0009146:	55                   	push   ebp
c0009147:	89 e5                	mov    ebp,esp
c0009149:	56                   	push   esi
c000914a:	53                   	push   ebx
c000914b:	83 ec 10             	sub    esp,0x10
c000914e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009151:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009154:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009157:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000915a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000915d:	8b 00                	mov    eax,DWORD PTR [eax]
c000915f:	83 c0 2c             	add    eax,0x2c
c0009162:	8b 30                	mov    esi,DWORD PTR [eax]
c0009164:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c0009169:	0f b6 d0             	movzx  edx,al
c000916c:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0009171:	01 d0                	add    eax,edx
c0009173:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009179:	89 c2                	mov    edx,eax
c000917b:	c1 fa 1f             	sar    edx,0x1f
c000917e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009181:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c0009184:	29 c1                	sub    ecx,eax
c0009186:	19 d3                	sbb    ebx,edx
c0009188:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c000918d:	0f b6 c0             	movzx  eax,al
c0009190:	85 c0                	test   eax,eax
c0009192:	74 0c                	je     c00091a0 <Clock::setTimeInSecondsLocal(unsigned long long)+0x5a>
c0009194:	b8 08 07 00 00       	mov    eax,0x708
c0009199:	ba 00 00 00 00       	mov    edx,0x0
c000919e:	eb 0a                	jmp    c00091aa <Clock::setTimeInSecondsLocal(unsigned long long)+0x64>
c00091a0:	b8 00 00 00 00       	mov    eax,0x0
c00091a5:	ba 00 00 00 00       	mov    edx,0x0
c00091aa:	29 c1                	sub    ecx,eax
c00091ac:	19 d3                	sbb    ebx,edx
c00091ae:	89 c8                	mov    eax,ecx
c00091b0:	89 da                	mov    edx,ebx
c00091b2:	83 ec 04             	sub    esp,0x4
c00091b5:	52                   	push   edx
c00091b6:	50                   	push   eax
c00091b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00091ba:	ff d6                	call   esi
c00091bc:	83 c4 10             	add    esp,0x10
c00091bf:	8d 65 f8             	lea    esp,[ebp-0x8]
c00091c2:	5b                   	pop    ebx
c00091c3:	5e                   	pop    esi
c00091c4:	5d                   	pop    ebp
c00091c5:	c3                   	ret    

c00091c6 <KeDatetimeToSeconds(datetime_t)>:
c00091c6:	55                   	push   ebp
c00091c7:	89 e5                	mov    ebp,esp
c00091c9:	53                   	push   ebx
c00091ca:	83 ec 24             	sub    esp,0x24
c00091cd:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00091d1:	2d 6c 07 00 00       	sub    eax,0x76c
c00091d6:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00091da:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00091dd:	83 e8 01             	sub    eax,0x1
c00091e0:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c00091e3:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c00091ea:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00091f1:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00091f8:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00091ff:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c0009202:	0f b6 c8             	movzx  ecx,al
c0009205:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0009208:	0f b6 d0             	movzx  edx,al
c000920b:	89 d0                	mov    eax,edx
c000920d:	c1 e0 04             	shl    eax,0x4
c0009210:	29 d0                	sub    eax,edx
c0009212:	c1 e0 02             	shl    eax,0x2
c0009215:	8d 14 01             	lea    edx,[ecx+eax*1]
c0009218:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000921b:	0f b6 c0             	movzx  eax,al
c000921e:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009224:	01 d0                	add    eax,edx
c0009226:	89 c2                	mov    edx,eax
c0009228:	c1 fa 1f             	sar    edx,0x1f
c000922b:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c000922e:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009231:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c0009234:	0f b6 c0             	movzx  eax,al
c0009237:	83 e8 01             	sub    eax,0x1
c000923a:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c000923d:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009240:	0f b6 c0             	movzx  eax,al
c0009243:	8b 04 85 80 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd180]
c000924a:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c000924d:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009250:	0f b6 c0             	movzx  eax,al
c0009253:	83 f8 01             	cmp    eax,0x1
c0009256:	76 7c                	jbe    c00092d4 <KeDatetimeToSeconds(datetime_t)+0x10e>
c0009258:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000925c:	0f b7 c0             	movzx  eax,ax
c000925f:	83 e0 03             	and    eax,0x3
c0009262:	85 c0                	test   eax,eax
c0009264:	75 6e                	jne    c00092d4 <KeDatetimeToSeconds(datetime_t)+0x10e>
c0009266:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000926a:	0f b7 c8             	movzx  ecx,ax
c000926d:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c0009272:	89 c8                	mov    eax,ecx
c0009274:	f7 e2                	mul    edx
c0009276:	c1 ea 05             	shr    edx,0x5
c0009279:	89 d0                	mov    eax,edx
c000927b:	c1 e0 02             	shl    eax,0x2
c000927e:	01 d0                	add    eax,edx
c0009280:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009287:	01 d0                	add    eax,edx
c0009289:	c1 e0 02             	shl    eax,0x2
c000928c:	29 c1                	sub    ecx,eax
c000928e:	89 c8                	mov    eax,ecx
c0009290:	0f b7 c0             	movzx  eax,ax
c0009293:	85 c0                	test   eax,eax
c0009295:	75 39                	jne    c00092d0 <KeDatetimeToSeconds(datetime_t)+0x10a>
c0009297:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000929b:	0f b7 c0             	movzx  eax,ax
c000929e:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00092a4:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00092a9:	f7 e9                	imul   ecx
c00092ab:	c1 fa 07             	sar    edx,0x7
c00092ae:	89 c8                	mov    eax,ecx
c00092b0:	c1 f8 1f             	sar    eax,0x1f
c00092b3:	29 c2                	sub    edx,eax
c00092b5:	89 d0                	mov    eax,edx
c00092b7:	c1 e0 02             	shl    eax,0x2
c00092ba:	01 d0                	add    eax,edx
c00092bc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00092c3:	01 d0                	add    eax,edx
c00092c5:	c1 e0 04             	shl    eax,0x4
c00092c8:	29 c1                	sub    ecx,eax
c00092ca:	89 ca                	mov    edx,ecx
c00092cc:	85 d2                	test   edx,edx
c00092ce:	75 04                	jne    c00092d4 <KeDatetimeToSeconds(datetime_t)+0x10e>
c00092d0:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c00092d4:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092d8:	0f b7 c0             	movzx  eax,ax
c00092db:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00092de:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00092e1:	83 f8 46             	cmp    eax,0x46
c00092e4:	0f 9f c0             	setg   al
c00092e7:	0f b6 c0             	movzx  eax,al
c00092ea:	85 c0                	test   eax,eax
c00092ec:	0f 84 a4 00 00 00    	je     c0009396 <KeDatetimeToSeconds(datetime_t)+0x1d0>
c00092f2:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c00092f9:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092fd:	0f b7 d0             	movzx  edx,ax
c0009300:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009303:	39 c2                	cmp    edx,eax
c0009305:	0f 8e b8 01 00 00    	jle    c00094c3 <KeDatetimeToSeconds(datetime_t)+0x2fd>
c000930b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000930e:	83 e0 03             	and    eax,0x3
c0009311:	85 c0                	test   eax,eax
c0009313:	75 6b                	jne    c0009380 <KeDatetimeToSeconds(datetime_t)+0x1ba>
c0009315:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009318:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000931d:	f7 e9                	imul   ecx
c000931f:	c1 fa 05             	sar    edx,0x5
c0009322:	89 c8                	mov    eax,ecx
c0009324:	c1 f8 1f             	sar    eax,0x1f
c0009327:	29 c2                	sub    edx,eax
c0009329:	89 d0                	mov    eax,edx
c000932b:	c1 e0 02             	shl    eax,0x2
c000932e:	01 d0                	add    eax,edx
c0009330:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009337:	01 d0                	add    eax,edx
c0009339:	c1 e0 02             	shl    eax,0x2
c000933c:	29 c1                	sub    ecx,eax
c000933e:	89 ca                	mov    edx,ecx
c0009340:	85 d2                	test   edx,edx
c0009342:	75 35                	jne    c0009379 <KeDatetimeToSeconds(datetime_t)+0x1b3>
c0009344:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009347:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000934d:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009352:	f7 e9                	imul   ecx
c0009354:	c1 fa 07             	sar    edx,0x7
c0009357:	89 c8                	mov    eax,ecx
c0009359:	c1 f8 1f             	sar    eax,0x1f
c000935c:	29 c2                	sub    edx,eax
c000935e:	89 d0                	mov    eax,edx
c0009360:	c1 e0 02             	shl    eax,0x2
c0009363:	01 d0                	add    eax,edx
c0009365:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000936c:	01 d0                	add    eax,edx
c000936e:	c1 e0 04             	shl    eax,0x4
c0009371:	29 c1                	sub    ecx,eax
c0009373:	89 ca                	mov    edx,ecx
c0009375:	85 d2                	test   edx,edx
c0009377:	75 07                	jne    c0009380 <KeDatetimeToSeconds(datetime_t)+0x1ba>
c0009379:	b8 6e 01 00 00       	mov    eax,0x16e
c000937e:	eb 05                	jmp    c0009385 <KeDatetimeToSeconds(datetime_t)+0x1bf>
c0009380:	b8 6d 01 00 00       	mov    eax,0x16d
c0009385:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c0009388:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000938b:	83 c0 01             	add    eax,0x1
c000938e:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009391:	e9 63 ff ff ff       	jmp    c00092f9 <KeDatetimeToSeconds(datetime_t)+0x133>
c0009396:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009399:	83 f8 45             	cmp    eax,0x45
c000939c:	0f 8f 21 01 00 00    	jg     c00094c3 <KeDatetimeToSeconds(datetime_t)+0x2fd>
c00093a2:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c00093a9:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00093ad:	0f b7 d0             	movzx  edx,ax
c00093b0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093b3:	39 c2                	cmp    edx,eax
c00093b5:	0f 8d 8b 00 00 00    	jge    c0009446 <KeDatetimeToSeconds(datetime_t)+0x280>
c00093bb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093be:	83 e0 03             	and    eax,0x3
c00093c1:	85 c0                	test   eax,eax
c00093c3:	75 6b                	jne    c0009430 <KeDatetimeToSeconds(datetime_t)+0x26a>
c00093c5:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00093c8:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093cd:	f7 e9                	imul   ecx
c00093cf:	c1 fa 05             	sar    edx,0x5
c00093d2:	89 c8                	mov    eax,ecx
c00093d4:	c1 f8 1f             	sar    eax,0x1f
c00093d7:	29 c2                	sub    edx,eax
c00093d9:	89 d0                	mov    eax,edx
c00093db:	c1 e0 02             	shl    eax,0x2
c00093de:	01 d0                	add    eax,edx
c00093e0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00093e7:	01 d0                	add    eax,edx
c00093e9:	c1 e0 02             	shl    eax,0x2
c00093ec:	29 c1                	sub    ecx,eax
c00093ee:	89 ca                	mov    edx,ecx
c00093f0:	85 d2                	test   edx,edx
c00093f2:	75 35                	jne    c0009429 <KeDatetimeToSeconds(datetime_t)+0x263>
c00093f4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093f7:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00093fd:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009402:	f7 e9                	imul   ecx
c0009404:	c1 fa 07             	sar    edx,0x7
c0009407:	89 c8                	mov    eax,ecx
c0009409:	c1 f8 1f             	sar    eax,0x1f
c000940c:	29 c2                	sub    edx,eax
c000940e:	89 d0                	mov    eax,edx
c0009410:	c1 e0 02             	shl    eax,0x2
c0009413:	01 d0                	add    eax,edx
c0009415:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000941c:	01 d0                	add    eax,edx
c000941e:	c1 e0 04             	shl    eax,0x4
c0009421:	29 c1                	sub    ecx,eax
c0009423:	89 ca                	mov    edx,ecx
c0009425:	85 d2                	test   edx,edx
c0009427:	75 07                	jne    c0009430 <KeDatetimeToSeconds(datetime_t)+0x26a>
c0009429:	b8 6e 01 00 00       	mov    eax,0x16e
c000942e:	eb 05                	jmp    c0009435 <KeDatetimeToSeconds(datetime_t)+0x26f>
c0009430:	b8 6d 01 00 00       	mov    eax,0x16d
c0009435:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c0009438:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000943b:	83 e8 01             	sub    eax,0x1
c000943e:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009441:	e9 63 ff ff ff       	jmp    c00093a9 <KeDatetimeToSeconds(datetime_t)+0x1e3>
c0009446:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009449:	83 e0 03             	and    eax,0x3
c000944c:	85 c0                	test   eax,eax
c000944e:	75 6b                	jne    c00094bb <KeDatetimeToSeconds(datetime_t)+0x2f5>
c0009450:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009453:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009458:	f7 e9                	imul   ecx
c000945a:	c1 fa 05             	sar    edx,0x5
c000945d:	89 c8                	mov    eax,ecx
c000945f:	c1 f8 1f             	sar    eax,0x1f
c0009462:	29 c2                	sub    edx,eax
c0009464:	89 d0                	mov    eax,edx
c0009466:	c1 e0 02             	shl    eax,0x2
c0009469:	01 d0                	add    eax,edx
c000946b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009472:	01 d0                	add    eax,edx
c0009474:	c1 e0 02             	shl    eax,0x2
c0009477:	29 c1                	sub    ecx,eax
c0009479:	89 ca                	mov    edx,ecx
c000947b:	85 d2                	test   edx,edx
c000947d:	75 35                	jne    c00094b4 <KeDatetimeToSeconds(datetime_t)+0x2ee>
c000947f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009482:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009488:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000948d:	f7 e9                	imul   ecx
c000948f:	c1 fa 07             	sar    edx,0x7
c0009492:	89 c8                	mov    eax,ecx
c0009494:	c1 f8 1f             	sar    eax,0x1f
c0009497:	29 c2                	sub    edx,eax
c0009499:	89 d0                	mov    eax,edx
c000949b:	c1 e0 02             	shl    eax,0x2
c000949e:	01 d0                	add    eax,edx
c00094a0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094a7:	01 d0                	add    eax,edx
c00094a9:	c1 e0 04             	shl    eax,0x4
c00094ac:	29 c1                	sub    ecx,eax
c00094ae:	89 ca                	mov    edx,ecx
c00094b0:	85 d2                	test   edx,edx
c00094b2:	75 07                	jne    c00094bb <KeDatetimeToSeconds(datetime_t)+0x2f5>
c00094b4:	b8 6e 01 00 00       	mov    eax,0x16e
c00094b9:	eb 05                	jmp    c00094c0 <KeDatetimeToSeconds(datetime_t)+0x2fa>
c00094bb:	b8 6d 01 00 00       	mov    eax,0x16d
c00094c0:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c00094c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00094c6:	89 c2                	mov    edx,eax
c00094c8:	c1 fa 1f             	sar    edx,0x1f
c00094cb:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c00094d1:	6b c8 00             	imul   ecx,eax,0x0
c00094d4:	01 d9                	add    ecx,ebx
c00094d6:	bb 80 51 01 00       	mov    ebx,0x15180
c00094db:	f7 e3                	mul    ebx
c00094dd:	01 d1                	add    ecx,edx
c00094df:	89 ca                	mov    edx,ecx
c00094e1:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c00094e4:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c00094e7:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00094ea:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00094ed:	83 c4 24             	add    esp,0x24
c00094f0:	5b                   	pop    ebx
c00094f1:	5d                   	pop    ebp
c00094f2:	c3                   	ret    
c00094f3:	90                   	nop

c00094f4 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00094f4:	55                   	push   ebp
c00094f5:	89 e5                	mov    ebp,esp
c00094f7:	56                   	push   esi
c00094f8:	53                   	push   ebx
c00094f9:	83 ec 20             	sub    esp,0x20
c00094fc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00094ff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009502:	e8 bf fc ff ff       	call   c00091c6 <KeDatetimeToSeconds(datetime_t)>
c0009507:	83 c4 08             	add    esp,0x8
c000950a:	89 c3                	mov    ebx,eax
c000950c:	89 d6                	mov    esi,edx
c000950e:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c0009513:	0f b6 d0             	movzx  edx,al
c0009516:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c000951b:	01 d0                	add    eax,edx
c000951d:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009523:	89 c2                	mov    edx,eax
c0009525:	c1 fa 1f             	sar    edx,0x1f
c0009528:	29 c3                	sub    ebx,eax
c000952a:	19 d6                	sbb    esi,edx
c000952c:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c0009531:	0f b6 c0             	movzx  eax,al
c0009534:	85 c0                	test   eax,eax
c0009536:	74 0c                	je     c0009544 <Clock::setTimeInDatetimeLocal(datetime_t)+0x50>
c0009538:	b8 08 07 00 00       	mov    eax,0x708
c000953d:	ba 00 00 00 00       	mov    edx,0x0
c0009542:	eb 0a                	jmp    c000954e <Clock::setTimeInDatetimeLocal(datetime_t)+0x5a>
c0009544:	b8 00 00 00 00       	mov    eax,0x0
c0009549:	ba 00 00 00 00       	mov    edx,0x0
c000954e:	29 c3                	sub    ebx,eax
c0009550:	19 d6                	sbb    esi,edx
c0009552:	89 d8                	mov    eax,ebx
c0009554:	89 f2                	mov    edx,esi
c0009556:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009559:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000955c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000955f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009562:	89 d0                	mov    eax,edx
c0009564:	31 d2                	xor    edx,edx
c0009566:	89 c3                	mov    ebx,eax
c0009568:	89 d6                	mov    esi,edx
c000956a:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000956d:	80 e5 ff             	and    ch,0xff
c0009570:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0009573:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c0009576:	83 e1 00             	and    ecx,0x0
c0009579:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c000957c:	83 ec 0c             	sub    esp,0xc
c000957f:	56                   	push   esi
c0009580:	53                   	push   ebx
c0009581:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0009584:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0009587:	68 6e 2e 02 c0       	push   0xc0022e6e
c000958c:	e8 bd d9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0009591:	83 c4 20             	add    esp,0x20
c0009594:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009597:	8b 00                	mov    eax,DWORD PTR [eax]
c0009599:	83 c0 2c             	add    eax,0x2c
c000959c:	8b 00                	mov    eax,DWORD PTR [eax]
c000959e:	83 ec 04             	sub    esp,0x4
c00095a1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00095a4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00095a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00095aa:	ff d0                	call   eax
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	8d 65 f8             	lea    esp,[ebp-0x8]
c00095b2:	5b                   	pop    ebx
c00095b3:	5e                   	pop    esi
c00095b4:	5d                   	pop    ebp
c00095b5:	c3                   	ret    

c00095b6 <KeSecondsToDatetime(unsigned long long)>:
c00095b6:	55                   	push   ebp
c00095b7:	89 e5                	mov    ebp,esp
c00095b9:	83 ec 48             	sub    esp,0x48
c00095bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00095bf:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c00095c2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00095c5:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c00095c8:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00095cb:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00095ce:	6a 00                	push   0x0
c00095d0:	68 80 51 01 00       	push   0x15180
c00095d5:	52                   	push   edx
c00095d6:	50                   	push   eax
c00095d7:	e8 68 7d 01 00       	call   c0021344 <__udivdi3>
c00095dc:	83 c4 10             	add    esp,0x10
c00095df:	05 6c fa 0a 00       	add    eax,0xafa6c
c00095e4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00095e7:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00095ea:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00095ed:	6a 00                	push   0x0
c00095ef:	68 80 51 01 00       	push   0x15180
c00095f4:	52                   	push   edx
c00095f5:	50                   	push   eax
c00095f6:	e8 49 7e 01 00       	call   c0021444 <__umoddi3>
c00095fb:	83 c4 10             	add    esp,0x10
c00095fe:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009601:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009605:	79 0b                	jns    c0009612 <KeSecondsToDatetime(unsigned long long)+0x5c>
c0009607:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c000960e:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c0009612:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009615:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c000961a:	89 c8                	mov    eax,ecx
c000961c:	f7 ea                	imul   edx
c000961e:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009621:	c1 f8 0b             	sar    eax,0xb
c0009624:	89 c2                	mov    edx,eax
c0009626:	89 c8                	mov    eax,ecx
c0009628:	c1 f8 1f             	sar    eax,0x1f
c000962b:	29 c2                	sub    edx,eax
c000962d:	89 d0                	mov    eax,edx
c000962f:	88 c2                	mov    dl,al
c0009631:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009634:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0009637:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000963a:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c000963f:	89 c8                	mov    eax,ecx
c0009641:	f7 ea                	imul   edx
c0009643:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009646:	c1 f8 0b             	sar    eax,0xb
c0009649:	89 c2                	mov    edx,eax
c000964b:	89 c8                	mov    eax,ecx
c000964d:	c1 f8 1f             	sar    eax,0x1f
c0009650:	29 c2                	sub    edx,eax
c0009652:	89 d0                	mov    eax,edx
c0009654:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000965a:	29 c1                	sub    ecx,eax
c000965c:	89 c8                	mov    eax,ecx
c000965e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009661:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009664:	ba 89 88 88 88       	mov    edx,0x88888889
c0009669:	89 c8                	mov    eax,ecx
c000966b:	f7 ea                	imul   edx
c000966d:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009670:	c1 f8 05             	sar    eax,0x5
c0009673:	89 c2                	mov    edx,eax
c0009675:	89 c8                	mov    eax,ecx
c0009677:	c1 f8 1f             	sar    eax,0x1f
c000967a:	29 c2                	sub    edx,eax
c000967c:	89 d0                	mov    eax,edx
c000967e:	88 c2                	mov    dl,al
c0009680:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009683:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009686:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009689:	ba 89 88 88 88       	mov    edx,0x88888889
c000968e:	89 c8                	mov    eax,ecx
c0009690:	f7 ea                	imul   edx
c0009692:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009695:	c1 f8 05             	sar    eax,0x5
c0009698:	89 c2                	mov    edx,eax
c000969a:	89 c8                	mov    eax,ecx
c000969c:	c1 f8 1f             	sar    eax,0x1f
c000969f:	29 c2                	sub    edx,eax
c00096a1:	89 d0                	mov    eax,edx
c00096a3:	c1 e0 04             	shl    eax,0x4
c00096a6:	29 d0                	sub    eax,edx
c00096a8:	c1 e0 02             	shl    eax,0x2
c00096ab:	29 c1                	sub    ecx,eax
c00096ad:	89 ca                	mov    edx,ecx
c00096af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096b2:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c00096b5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00096b9:	79 20                	jns    c00096db <KeSecondsToDatetime(unsigned long long)+0x125>
c00096bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00096be:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c00096c4:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c00096c9:	89 c8                	mov    eax,ecx
c00096cb:	f7 ea                	imul   edx
c00096cd:	c1 fa 0f             	sar    edx,0xf
c00096d0:	89 c8                	mov    eax,ecx
c00096d2:	c1 f8 1f             	sar    eax,0x1f
c00096d5:	29 c2                	sub    edx,eax
c00096d7:	89 d0                	mov    eax,edx
c00096d9:	eb 18                	jmp    c00096f3 <KeSecondsToDatetime(unsigned long long)+0x13d>
c00096db:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c00096de:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c00096e3:	89 c8                	mov    eax,ecx
c00096e5:	f7 ea                	imul   edx
c00096e7:	c1 fa 0f             	sar    edx,0xf
c00096ea:	89 c8                	mov    eax,ecx
c00096ec:	c1 f8 1f             	sar    eax,0x1f
c00096ef:	29 c2                	sub    edx,eax
c00096f1:	89 d0                	mov    eax,edx
c00096f3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00096f6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00096f9:	69 d0 4f c5 fd ff    	imul   edx,eax,0xfffdc54f
c00096ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009702:	01 d0                	add    eax,edx
c0009704:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0009707:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000970a:	c1 e8 02             	shr    eax,0x2
c000970d:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c0009712:	f7 e2                	mul    edx
c0009714:	c1 ea 07             	shr    edx,0x7
c0009717:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000971a:	29 d0                	sub    eax,edx
c000971c:	89 c1                	mov    ecx,eax
c000971e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009721:	c1 e8 02             	shr    eax,0x2
c0009724:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c0009729:	f7 e2                	mul    edx
c000972b:	89 d0                	mov    eax,edx
c000972d:	c1 e8 0b             	shr    eax,0xb
c0009730:	01 c1                	add    ecx,eax
c0009732:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009735:	c1 e8 04             	shr    eax,0x4
c0009738:	ba 41 d6 72 00       	mov    edx,0x72d641
c000973d:	f7 e2                	mul    edx
c000973f:	89 d0                	mov    eax,edx
c0009741:	c1 e8 04             	shr    eax,0x4
c0009744:	29 c1                	sub    ecx,eax
c0009746:	ba 61 f3 19 67       	mov    edx,0x6719f361
c000974b:	89 c8                	mov    eax,ecx
c000974d:	f7 e2                	mul    edx
c000974f:	89 c8                	mov    eax,ecx
c0009751:	29 d0                	sub    eax,edx
c0009753:	d1 e8                	shr    eax,1
c0009755:	01 d0                	add    eax,edx
c0009757:	c1 e8 08             	shr    eax,0x8
c000975a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000975d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009760:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c0009765:	f7 e2                	mul    edx
c0009767:	89 d1                	mov    ecx,edx
c0009769:	c1 e9 05             	shr    ecx,0x5
c000976c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000976f:	89 d0                	mov    eax,edx
c0009771:	c1 e0 03             	shl    eax,0x3
c0009774:	01 d0                	add    eax,edx
c0009776:	c1 e0 03             	shl    eax,0x3
c0009779:	01 d0                	add    eax,edx
c000977b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009782:	01 c2                	add    edx,eax
c0009784:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009787:	c1 e8 02             	shr    eax,0x2
c000978a:	01 d0                	add    eax,edx
c000978c:	29 c1                	sub    ecx,eax
c000978e:	89 ca                	mov    edx,ecx
c0009790:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009793:	01 d0                	add    eax,edx
c0009795:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009798:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000979b:	89 d0                	mov    eax,edx
c000979d:	c1 e0 02             	shl    eax,0x2
c00097a0:	01 d0                	add    eax,edx
c00097a2:	83 c0 02             	add    eax,0x2
c00097a5:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c00097aa:	f7 e2                	mul    edx
c00097ac:	89 d0                	mov    eax,edx
c00097ae:	c1 e8 07             	shr    eax,0x7
c00097b1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00097b4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00097b7:	89 d0                	mov    eax,edx
c00097b9:	c1 e0 03             	shl    eax,0x3
c00097bc:	01 d0                	add    eax,edx
c00097be:	89 c2                	mov    edx,eax
c00097c0:	c1 e2 04             	shl    edx,0x4
c00097c3:	01 d0                	add    eax,edx
c00097c5:	83 c0 02             	add    eax,0x2
c00097c8:	ba cd cc cc cc       	mov    edx,0xcccccccd
c00097cd:	f7 e2                	mul    edx
c00097cf:	c1 ea 02             	shr    edx,0x2
c00097d2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00097d5:	29 d0                	sub    eax,edx
c00097d7:	83 c0 01             	add    eax,0x1
c00097da:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00097dd:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c00097e1:	77 07                	ja     c00097ea <KeSecondsToDatetime(unsigned long long)+0x234>
c00097e3:	b8 02 00 00 00       	mov    eax,0x2
c00097e8:	eb 05                	jmp    c00097ef <KeSecondsToDatetime(unsigned long long)+0x239>
c00097ea:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c00097ef:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c00097f2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00097f5:	89 d0                	mov    eax,edx
c00097f7:	c1 e0 02             	shl    eax,0x2
c00097fa:	01 d0                	add    eax,edx
c00097fc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009803:	01 d0                	add    eax,edx
c0009805:	c1 e0 04             	shl    eax,0x4
c0009808:	89 c2                	mov    edx,eax
c000980a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000980d:	01 c2                	add    edx,eax
c000980f:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c0009813:	0f 96 c0             	setbe  al
c0009816:	0f b6 c0             	movzx  eax,al
c0009819:	01 d0                	add    eax,edx
c000981b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c000981e:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0009821:	89 c2                	mov    edx,eax
c0009823:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009826:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c000982a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c000982d:	83 c0 01             	add    eax,0x1
c0009830:	88 c2                	mov    dl,al
c0009832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009835:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009838:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000983b:	88 c2                	mov    dl,al
c000983d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009840:	88 10                	mov    BYTE PTR [eax],dl
c0009842:	90                   	nop
c0009843:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009846:	c9                   	leave  
c0009847:	c2 04 00             	ret    0x4

c000984a <Clock::timeInDatetimeLocal()>:
c000984a:	55                   	push   ebp
c000984b:	89 e5                	mov    ebp,esp
c000984d:	83 ec 08             	sub    esp,0x8
c0009850:	83 ec 0c             	sub    esp,0xc
c0009853:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009856:	e8 81 f8 ff ff       	call   c00090dc <Clock::timeInSecondsLocal()>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0009861:	83 ec 04             	sub    esp,0x4
c0009864:	52                   	push   edx
c0009865:	50                   	push   eax
c0009866:	51                   	push   ecx
c0009867:	e8 4a fd ff ff       	call   c00095b6 <KeSecondsToDatetime(unsigned long long)>
c000986c:	83 c4 0c             	add    esp,0xc
c000986f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009872:	c9                   	leave  
c0009873:	c2 04 00             	ret    0x4

c0009876 <Device::hibernate()>:
c0009876:	c3                   	ret    
c0009877:	90                   	nop

c0009878 <Device::wake()>:
c0009878:	c3                   	ret    
c0009879:	90                   	nop

c000987a <Device::detect()>:
c000987a:	c3                   	ret    
c000987b:	90                   	nop

c000987c <Device::disableLegacy()>:
c000987c:	c3                   	ret    
c000987d:	90                   	nop

c000987e <Device::powerSaving(PowerSavingLevel)>:
c000987e:	c3                   	ret    
c000987f:	90                   	nop

c0009880 <DriverlessDevice::close(int, int, void*)>:
c0009880:	31 c0                	xor    eax,eax
c0009882:	c3                   	ret    
c0009883:	90                   	nop

c0009884 <DriverlessDevice::detect()>:
c0009884:	c3                   	ret    
c0009885:	90                   	nop

c0009886 <DriverlessDevice::open(int, int, void*)>:
c0009886:	83 ec 18             	sub    esp,0x18
c0009889:	68 ec 2e 02 c0       	push   0xc0022eec
c000988e:	e8 23 65 00 00       	call   c000fdb6 <KePanic(char const*)>
c0009893:	83 c8 ff             	or     eax,0xffffffff
c0009896:	83 c4 1c             	add    esp,0x1c
c0009899:	c3                   	ret    

c000989a <Device::~Device()>:
c000989a:	ba 90 2f 02 c0       	mov    edx,0xc0022f90
c000989f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098a3:	89 10                	mov    DWORD PTR [eax],edx
c00098a5:	90                   	nop
c00098a6:	c3                   	ret    
c00098a7:	90                   	nop

c00098a8 <Device::~Device()>:
c00098a8:	83 ec 0c             	sub    esp,0xc
c00098ab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00098af:	e8 e6 ff ff ff       	call   c000989a <Device::~Device()>
c00098b4:	83 c4 04             	add    esp,0x4
c00098b7:	83 ec 08             	sub    esp,0x8
c00098ba:	68 58 01 00 00       	push   0x158
c00098bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098c3:	e8 1f 39 00 00       	call   c000d1e7 <operator delete(void*, unsigned long)>
c00098c8:	83 c4 10             	add    esp,0x10
c00098cb:	83 c4 0c             	add    esp,0xc
c00098ce:	c3                   	ret    
c00098cf:	90                   	nop

c00098d0 <Device::findAndLoadDriver()>:
c00098d0:	c7 44 24 04 0a 2f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022f0a
c00098d8:	e9 71 d6 ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c00098dd:	90                   	nop

c00098de <Device::preOpenPCI(PCIDeviceInfo)>:
c00098de:	57                   	push   edi
c00098df:	b9 09 00 00 00       	mov    ecx,0x9
c00098e4:	56                   	push   esi
c00098e5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00098e9:	8d 74 24 10          	lea    esi,[esp+0x10]
c00098ed:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00098f7:	81 c7 18 01 00 00    	add    edi,0x118
c00098fd:	fc                   	cld    
c00098fe:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0009900:	5e                   	pop    esi
c0009901:	5f                   	pop    edi
c0009902:	c3                   	ret    
c0009903:	90                   	nop

c0009904 <Device::preOpenACPI(void*, char*, char*)>:
c0009904:	57                   	push   edi
c0009905:	b9 1e 00 00 00       	mov    ecx,0x1e
c000990a:	56                   	push   esi
c000990b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000990f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009913:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009917:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0009921:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0009927:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000992d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000992f:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0009935:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009939:	b9 0e 00 00 00       	mov    ecx,0xe
c000993e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009940:	5e                   	pop    esi
c0009941:	5f                   	pop    edi
c0009942:	c3                   	ret    
c0009943:	90                   	nop

c0009944 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0009944:	53                   	push   ebx
c0009945:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009949:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000994d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009951:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009955:	0f b6 c0             	movzx  eax,al
c0009958:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000995c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009960:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0009964:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009968:	5b                   	pop    ebx
c0009969:	e9 6f 06 01 00       	jmp    c0019fdd <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000996e <Device::getParent()>:
c000996e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009972:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0009978:	c3                   	ret    
c0009979:	90                   	nop

c000997a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000997a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000997e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009982:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0009987:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000998b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000998f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009993:	e9 b6 07 01 00       	jmp    c001a14e <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c0009998 <Device::addChild(Device*)>:
c0009998:	53                   	push   ebx
c0009999:	83 ec 08             	sub    esp,0x8
c000999c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00099a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00099a4:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00099aa:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00099b0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00099b2:	85 d2                	test   edx,edx
c00099b4:	74 04                	je     c00099ba <Device::addChild(Device*)+0x22>
c00099b6:	89 d3                	mov    ebx,edx
c00099b8:	eb f6                	jmp    c00099b0 <Device::addChild(Device*)+0x18>
c00099ba:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00099bd:	83 ec 0c             	sub    esp,0xc
c00099c0:	6a 08                	push   0x8
c00099c2:	e8 a9 60 00 00       	call   c000fa70 <malloc>
c00099c7:	89 03                	mov    DWORD PTR [ebx],eax
c00099c9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099cf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00099d6:	83 c4 18             	add    esp,0x18
c00099d9:	5b                   	pop    ebx
c00099da:	c3                   	ret    
c00099db:	90                   	nop

c00099dc <Device::removeAllChildren()>:
c00099dc:	56                   	push   esi
c00099dd:	53                   	push   ebx
c00099de:	52                   	push   edx
c00099df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00099e3:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00099e9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00099ec:	74 17                	je     c0009a05 <Device::removeAllChildren()+0x29>
c00099ee:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00099f1:	85 c0                	test   eax,eax
c00099f3:	74 0c                	je     c0009a01 <Device::removeAllChildren()+0x25>
c00099f5:	8b 10                	mov    edx,DWORD PTR [eax]
c00099f7:	83 ec 0c             	sub    esp,0xc
c00099fa:	50                   	push   eax
c00099fb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00099fe:	83 c4 10             	add    esp,0x10
c0009a01:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009a03:	eb e4                	jmp    c00099e9 <Device::removeAllChildren()+0xd>
c0009a05:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009a0b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a11:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009a17:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a1e:	58                   	pop    eax
c0009a1f:	5b                   	pop    ebx
c0009a20:	5e                   	pop    esi
c0009a21:	c3                   	ret    

c0009a22 <Device::hibernateAll()>:
c0009a22:	53                   	push   ebx
c0009a23:	83 ec 14             	sub    esp,0x14
c0009a26:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009a2c:	53                   	push   ebx
c0009a2d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009a30:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009a36:	83 c4 10             	add    esp,0x10
c0009a39:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009a3c:	74 0f                	je     c0009a4d <Device::hibernateAll()+0x2b>
c0009a3e:	83 ec 0c             	sub    esp,0xc
c0009a41:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009a44:	e8 d9 ff ff ff       	call   c0009a22 <Device::hibernateAll()>
c0009a49:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009a4b:	eb e9                	jmp    c0009a36 <Device::hibernateAll()+0x14>
c0009a4d:	83 c4 08             	add    esp,0x8
c0009a50:	5b                   	pop    ebx
c0009a51:	c3                   	ret    

c0009a52 <Device::wakeAll()>:
c0009a52:	53                   	push   ebx
c0009a53:	83 ec 14             	sub    esp,0x14
c0009a56:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009a5c:	53                   	push   ebx
c0009a5d:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0009a60:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009a66:	83 c4 10             	add    esp,0x10
c0009a69:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009a6c:	74 0f                	je     c0009a7d <Device::wakeAll()+0x2b>
c0009a6e:	83 ec 0c             	sub    esp,0xc
c0009a71:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009a74:	e8 d9 ff ff ff       	call   c0009a52 <Device::wakeAll()>
c0009a79:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009a7b:	eb e9                	jmp    c0009a66 <Device::wakeAll()+0x14>
c0009a7d:	83 c4 08             	add    esp,0x8
c0009a80:	5b                   	pop    ebx
c0009a81:	c3                   	ret    

c0009a82 <Device::detectAll()>:
c0009a82:	53                   	push   ebx
c0009a83:	83 ec 14             	sub    esp,0x14
c0009a86:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009a8c:	53                   	push   ebx
c0009a8d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0009a90:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009a96:	83 c4 10             	add    esp,0x10
c0009a99:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009a9c:	74 0f                	je     c0009aad <Device::detectAll()+0x2b>
c0009a9e:	83 ec 0c             	sub    esp,0xc
c0009aa1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009aa4:	e8 d9 ff ff ff       	call   c0009a82 <Device::detectAll()>
c0009aa9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009aab:	eb e9                	jmp    c0009a96 <Device::detectAll()+0x14>
c0009aad:	83 c4 08             	add    esp,0x8
c0009ab0:	5b                   	pop    ebx
c0009ab1:	c3                   	ret    

c0009ab2 <Device::disableLegacyAll()>:
c0009ab2:	c3                   	ret    
c0009ab3:	90                   	nop

c0009ab4 <Device::loadDriversForAll()>:
c0009ab4:	c3                   	ret    
c0009ab5:	90                   	nop

c0009ab6 <Device::powerSavingAll(PowerSavingLevel)>:
c0009ab6:	56                   	push   esi
c0009ab7:	53                   	push   ebx
c0009ab8:	83 ec 0c             	sub    esp,0xc
c0009abb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009abf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009ac3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009ac5:	56                   	push   esi
c0009ac6:	53                   	push   ebx
c0009ac7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009aca:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009ad0:	83 c4 10             	add    esp,0x10
c0009ad3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009ad6:	74 0f                	je     c0009ae7 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009ad8:	52                   	push   edx
c0009ad9:	52                   	push   edx
c0009ada:	56                   	push   esi
c0009adb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009ade:	e8 d3 ff ff ff       	call   c0009ab6 <Device::powerSavingAll(PowerSavingLevel)>
c0009ae3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009ae5:	eb e9                	jmp    c0009ad0 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009ae7:	58                   	pop    eax
c0009ae8:	5b                   	pop    ebx
c0009ae9:	5e                   	pop    esi
c0009aea:	c3                   	ret    
c0009aeb:	90                   	nop

c0009aec <Device::setName(char const*)>:
c0009aec:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0009af4:	e9 57 6b ff ff       	jmp    c0000650 <strcpy>
c0009af9:	90                   	nop

c0009afa <Device::Device(char const*)>:
c0009afa:	83 ec 1c             	sub    esp,0x1c
c0009afd:	ba 90 2f 02 c0       	mov    edx,0xc0022f90
c0009b02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b06:	89 10                	mov    DWORD PTR [eax],edx
c0009b08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b0c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0009b16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b1a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009b24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b28:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009b32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b36:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009b40:	83 ec 08             	sub    esp,0x8
c0009b43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009b47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009b4b:	e8 9c ff ff ff       	call   c0009aec <Device::setName(char const*)>
c0009b50:	83 c4 10             	add    esp,0x10
c0009b53:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009b5b:	83 ec 0c             	sub    esp,0xc
c0009b5e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009b62:	e8 09 5f 00 00       	call   c000fa70 <malloc>
c0009b67:	83 c4 10             	add    esp,0x10
c0009b6a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009b70:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009b77:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009b7b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0009b81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b85:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009b8b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009b91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b95:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009b9b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ba2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ba6:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009bad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bb1:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009bb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bbc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009bc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bca:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009bd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bd8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009be2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009be6:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c0009bf0:	90                   	nop
c0009bf1:	83 c4 1c             	add    esp,0x1c
c0009bf4:	c3                   	ret    
c0009bf5:	90                   	nop

c0009bf6 <Device::getName()>:
c0009bf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009bfa:	05 d0 00 00 00       	add    eax,0xd0
c0009bff:	c3                   	ret    

c0009c00 <Device::closeAll()>:
c0009c00:	53                   	push   ebx
c0009c01:	83 ec 08             	sub    esp,0x8
c0009c04:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009c08:	53                   	push   ebx
c0009c09:	e8 e8 ff ff ff       	call   c0009bf6 <Device::getName()>
c0009c0e:	52                   	push   edx
c0009c0f:	50                   	push   eax
c0009c10:	68 44 2f 02 c0       	push   0xc0022f44
c0009c15:	e8 34 d3 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0009c1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009c1c:	6a 00                	push   0x0
c0009c1e:	6a 00                	push   0x0
c0009c20:	6a 00                	push   0x0
c0009c22:	53                   	push   ebx
c0009c23:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009c26:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009c2c:	83 c4 20             	add    esp,0x20
c0009c2f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009c32:	74 12                	je     c0009c46 <Device::closeAll()+0x46>
c0009c34:	83 ec 0c             	sub    esp,0xc
c0009c37:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009c3a:	e8 c1 ff ff ff       	call   c0009c00 <Device::closeAll()>
c0009c3f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009c41:	83 c4 10             	add    esp,0x10
c0009c44:	eb e9                	jmp    c0009c2f <Device::closeAll()+0x2f>
c0009c46:	83 c4 08             	add    esp,0x8
c0009c49:	5b                   	pop    ebx
c0009c4a:	c3                   	ret    
c0009c4b:	90                   	nop

c0009c4c <DriverlessDevice::DriverlessDevice(char const*)>:
c0009c4c:	83 ec 0c             	sub    esp,0xc
c0009c4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c53:	83 ec 08             	sub    esp,0x8
c0009c56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c5a:	50                   	push   eax
c0009c5b:	e8 9a fe ff ff       	call   c0009afa <Device::Device(char const*)>
c0009c60:	83 c4 10             	add    esp,0x10
c0009c63:	ba bc 2f 02 c0       	mov    edx,0xc0022fbc
c0009c68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c6c:	89 10                	mov    DWORD PTR [eax],edx
c0009c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c72:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009c7c:	90                   	nop
c0009c7d:	83 c4 0c             	add    esp,0xc
c0009c80:	c3                   	ret    
c0009c81:	90                   	nop

c0009c82 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009c82:	57                   	push   edi
c0009c83:	56                   	push   esi
c0009c84:	53                   	push   ebx
c0009c85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009c89:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009c8d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009c91:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009c97:	75 0c                	jne    c0009ca5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009c99:	52                   	push   edx
c0009c9a:	52                   	push   edx
c0009c9b:	53                   	push   ebx
c0009c9c:	56                   	push   esi
c0009c9d:	e8 1a 79 01 00       	call   c00215bc <LinkedList<Device>::addElement(Device*)>
c0009ca2:	83 c4 10             	add    esp,0x10
c0009ca5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009cab:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009cae:	74 12                	je     c0009cc2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0009cb0:	50                   	push   eax
c0009cb1:	57                   	push   edi
c0009cb2:	56                   	push   esi
c0009cb3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009cb6:	e8 c7 ff ff ff       	call   c0009c82 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009cbb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009cbd:	83 c4 10             	add    esp,0x10
c0009cc0:	eb e9                	jmp    c0009cab <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009cc2:	5b                   	pop    ebx
c0009cc3:	5e                   	pop    esi
c0009cc4:	5f                   	pop    edi
c0009cc5:	c3                   	ret    

c0009cc6 <getDevicesOfType(DeviceType)>:
c0009cc6:	53                   	push   ebx
c0009cc7:	83 ec 14             	sub    esp,0x14
c0009cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009cce:	53                   	push   ebx
c0009ccf:	e8 c4 79 01 00       	call   c0021698 <LinkedList<Device>::LinkedList()>
c0009cd4:	83 c4 0c             	add    esp,0xc
c0009cd7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009cdb:	53                   	push   ebx
c0009cdc:	ff 35 d0 c0 02 c0    	push   DWORD PTR ds:0xc002c0d0
c0009ce2:	e8 9b ff ff ff       	call   c0009c82 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009ce7:	83 c4 18             	add    esp,0x18
c0009cea:	89 d8                	mov    eax,ebx
c0009cec:	5b                   	pop    ebx
c0009ced:	c2 04 00             	ret    0x4

c0009cf0 <HardDiskController::HardDiskController(char const*)>:
c0009cf0:	83 ec 0c             	sub    esp,0xc
c0009cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cf7:	83 ec 08             	sub    esp,0x8
c0009cfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cfe:	50                   	push   eax
c0009cff:	e8 f6 fd ff ff       	call   c0009afa <Device::Device(char const*)>
c0009d04:	83 c4 10             	add    esp,0x10
c0009d07:	ba e8 2f 02 c0       	mov    edx,0xc0022fe8
c0009d0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d10:	89 10                	mov    DWORD PTR [eax],edx
c0009d12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d16:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0009d20:	90                   	nop
c0009d21:	83 c4 0c             	add    esp,0xc
c0009d24:	c3                   	ret    
c0009d25:	90                   	nop
c0009d26:	66 90                	xchg   ax,ax

c0009d28 <HardDiskController::~HardDiskController()>:
c0009d28:	83 ec 0c             	sub    esp,0xc
c0009d2b:	ba e8 2f 02 c0       	mov    edx,0xc0022fe8
c0009d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d34:	89 10                	mov    DWORD PTR [eax],edx
c0009d36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d3a:	83 ec 0c             	sub    esp,0xc
c0009d3d:	50                   	push   eax
c0009d3e:	e8 57 fb ff ff       	call   c000989a <Device::~Device()>
c0009d43:	83 c4 10             	add    esp,0x10
c0009d46:	90                   	nop
c0009d47:	83 c4 0c             	add    esp,0xc
c0009d4a:	c3                   	ret    
c0009d4b:	90                   	nop

c0009d4c <HardDiskController::~HardDiskController()>:
c0009d4c:	83 ec 0c             	sub    esp,0xc
c0009d4f:	83 ec 0c             	sub    esp,0xc
c0009d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d56:	e8 cd ff ff ff       	call   c0009d28 <HardDiskController::~HardDiskController()>
c0009d5b:	83 c4 10             	add    esp,0x10
c0009d5e:	83 ec 08             	sub    esp,0x8
c0009d61:	68 58 01 00 00       	push   0x158
c0009d66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d6a:	e8 78 34 00 00       	call   c000d1e7 <operator delete(void*, unsigned long)>
c0009d6f:	83 c4 10             	add    esp,0x10
c0009d72:	83 c4 0c             	add    esp,0xc
c0009d75:	c3                   	ret    

c0009d76 <PhysicalDisk::eject()>:
c0009d76:	83 c8 ff             	or     eax,0xffffffff
c0009d79:	c3                   	ret    

c0009d7a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009d7a:	83 ec 0c             	sub    esp,0xc
c0009d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d81:	83 ec 08             	sub    esp,0x8
c0009d84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d88:	50                   	push   eax
c0009d89:	e8 6c fd ff ff       	call   c0009afa <Device::Device(char const*)>
c0009d8e:	83 c4 10             	add    esp,0x10
c0009d91:	ba 14 30 02 c0       	mov    edx,0xc0023014
c0009d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d9a:	89 10                	mov    DWORD PTR [eax],edx
c0009d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009da0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009da7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dab:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0009db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009db6:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009dc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dc4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009dc8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0009dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dd2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0009ddc:	90                   	nop
c0009ddd:	83 c4 0c             	add    esp,0xc
c0009de0:	c3                   	ret    
c0009de1:	90                   	nop

c0009de2 <PhysicalDisk::startCache()>:
c0009de2:	56                   	push   esi
c0009de3:	53                   	push   ebx
c0009de4:	83 ec 10             	sub    esp,0x10
c0009de7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009deb:	6a 44                	push   0x44
c0009ded:	e8 7e 5c 00 00       	call   c000fa70 <malloc>
c0009df2:	89 c6                	mov    esi,eax
c0009df4:	58                   	pop    eax
c0009df5:	5a                   	pop    edx
c0009df6:	53                   	push   ebx
c0009df7:	56                   	push   esi
c0009df8:	e8 97 13 00 00       	call   c000b194 <VCache::VCache(PhysicalDisk*)>
c0009dfd:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0009e03:	83 c4 14             	add    esp,0x14
c0009e06:	5b                   	pop    ebx
c0009e07:	5e                   	pop    esi
c0009e08:	c3                   	ret    
c0009e09:	90                   	nop

c0009e0a <PhysicalDisk::~PhysicalDisk()>:
c0009e0a:	83 ec 0c             	sub    esp,0xc
c0009e0d:	ba 14 30 02 c0       	mov    edx,0xc0023014
c0009e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e16:	89 10                	mov    DWORD PTR [eax],edx
c0009e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e1c:	83 ec 0c             	sub    esp,0xc
c0009e1f:	50                   	push   eax
c0009e20:	e8 75 fa ff ff       	call   c000989a <Device::~Device()>
c0009e25:	83 c4 10             	add    esp,0x10
c0009e28:	90                   	nop
c0009e29:	83 c4 0c             	add    esp,0xc
c0009e2c:	c3                   	ret    
c0009e2d:	90                   	nop

c0009e2e <PhysicalDisk::~PhysicalDisk()>:
c0009e2e:	83 ec 0c             	sub    esp,0xc
c0009e31:	83 ec 0c             	sub    esp,0xc
c0009e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e38:	e8 cd ff ff ff       	call   c0009e0a <PhysicalDisk::~PhysicalDisk()>
c0009e3d:	83 c4 10             	add    esp,0x10
c0009e40:	83 ec 08             	sub    esp,0x8
c0009e43:	68 6c 01 00 00       	push   0x16c
c0009e48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e4c:	e8 96 33 00 00       	call   c000d1e7 <operator delete(void*, unsigned long)>
c0009e51:	83 c4 10             	add    esp,0x10
c0009e54:	83 c4 0c             	add    esp,0xc
c0009e57:	c3                   	ret    

c0009e58 <startGUI(void*)>:
c0009e58:	55                   	push   ebp
c0009e59:	89 e5                	mov    ebp,esp
c0009e5b:	53                   	push   ebx
c0009e5c:	83 ec 04             	sub    esp,0x4
c0009e5f:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0009e67:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0009e6c:	85 c0                	test   eax,eax
c0009e6e:	75 01                	jne    c0009e71 <startGUI(void*)+0x19>
c0009e70:	fb                   	sti    
c0009e71:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c0009e77:	83 ec 08             	sub    esp,0x8
c0009e7a:	6a 01                	push   0x1
c0009e7c:	68 44 30 02 c0       	push   0xc0023044
c0009e81:	e8 26 c0 00 00       	call   c0015eac <Thr::loadDLL(char const*, bool)>
c0009e86:	83 c4 10             	add    esp,0x10
c0009e89:	83 ec 08             	sub    esp,0x8
c0009e8c:	53                   	push   ebx
c0009e8d:	50                   	push   eax
c0009e8e:	e8 7a c2 00 00       	call   c001610d <Thr::executeDLL(unsigned long, void*)>
c0009e93:	83 c4 10             	add    esp,0x10
c0009e96:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c0009e9c:	83 ec 08             	sub    esp,0x8
c0009e9f:	6a 01                	push   0x1
c0009ea1:	68 5e 30 02 c0       	push   0xc002305e
c0009ea6:	e8 01 c0 00 00       	call   c0015eac <Thr::loadDLL(char const*, bool)>
c0009eab:	83 c4 10             	add    esp,0x10
c0009eae:	83 ec 08             	sub    esp,0x8
c0009eb1:	53                   	push   ebx
c0009eb2:	50                   	push   eax
c0009eb3:	e8 55 c2 00 00       	call   c001610d <Thr::executeDLL(unsigned long, void*)>
c0009eb8:	83 c4 10             	add    esp,0x10
c0009ebb:	eb fe                	jmp    c0009ebb <startGUI(void*)+0x63>

c0009ebd <startGUIVESA(void*)>:
c0009ebd:	55                   	push   ebp
c0009ebe:	89 e5                	mov    ebp,esp
c0009ec0:	53                   	push   ebx
c0009ec1:	83 ec 04             	sub    esp,0x4
c0009ec4:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0009ecc:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0009ed1:	85 c0                	test   eax,eax
c0009ed3:	75 01                	jne    c0009ed6 <startGUIVESA(void*)+0x19>
c0009ed5:	fb                   	sti    
c0009ed6:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c0009edc:	83 ec 08             	sub    esp,0x8
c0009edf:	6a 01                	push   0x1
c0009ee1:	68 7c 30 02 c0       	push   0xc002307c
c0009ee6:	e8 c1 bf 00 00       	call   c0015eac <Thr::loadDLL(char const*, bool)>
c0009eeb:	83 c4 10             	add    esp,0x10
c0009eee:	83 ec 08             	sub    esp,0x8
c0009ef1:	53                   	push   ebx
c0009ef2:	50                   	push   eax
c0009ef3:	e8 15 c2 00 00       	call   c001610d <Thr::executeDLL(unsigned long, void*)>
c0009ef8:	83 c4 10             	add    esp,0x10
c0009efb:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c0009f01:	83 ec 08             	sub    esp,0x8
c0009f04:	6a 01                	push   0x1
c0009f06:	68 5e 30 02 c0       	push   0xc002305e
c0009f0b:	e8 9c bf 00 00       	call   c0015eac <Thr::loadDLL(char const*, bool)>
c0009f10:	83 c4 10             	add    esp,0x10
c0009f13:	83 ec 08             	sub    esp,0x8
c0009f16:	53                   	push   ebx
c0009f17:	50                   	push   eax
c0009f18:	e8 f0 c1 00 00       	call   c001610d <Thr::executeDLL(unsigned long, void*)>
c0009f1d:	83 c4 10             	add    esp,0x10
c0009f20:	eb fe                	jmp    c0009f20 <startGUIVESA(void*)+0x63>

c0009f22 <sendKeyToTerminal(unsigned char)>:
c0009f22:	55                   	push   ebp
c0009f23:	89 e5                	mov    ebp,esp
c0009f25:	83 ec 28             	sub    esp,0x28
c0009f28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009f2b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0009f2e:	a1 b4 e1 02 c0       	mov    eax,ds:0xc002e1b4
c0009f33:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009f37:	83 ec 08             	sub    esp,0x8
c0009f3a:	52                   	push   edx
c0009f3b:	50                   	push   eax
c0009f3c:	e8 67 89 00 00       	call   c00128a8 <VgaText::receiveKey(unsigned char)>
c0009f41:	83 c4 10             	add    esp,0x10
c0009f44:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009f48:	83 f8 0a             	cmp    eax,0xa
c0009f4b:	74 16                	je     c0009f63 <sendKeyToTerminal(unsigned char)+0x41>
c0009f4d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009f51:	83 f8 03             	cmp    eax,0x3
c0009f54:	74 0d                	je     c0009f63 <sendKeyToTerminal(unsigned char)+0x41>
c0009f56:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009f5a:	83 f8 1c             	cmp    eax,0x1c
c0009f5d:	0f 85 92 00 00 00    	jne    c0009ff5 <sendKeyToTerminal(unsigned char)+0xd3>
c0009f63:	fa                   	cli    
c0009f64:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0009f69:	83 c0 01             	add    eax,0x1
c0009f6c:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0009f71:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0009f76:	83 c0 01             	add    eax,0x1
c0009f79:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0009f7e:	a1 80 b6 02 c0       	mov    eax,ds:0xc002b680
c0009f83:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009f86:	c7 05 80 b6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b680,0x0
c0009f90:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009f94:	74 1f                	je     c0009fb5 <sendKeyToTerminal(unsigned char)+0x93>
c0009f96:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009f99:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009f9c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009f9f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009fa2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009fa5:	83 ec 0c             	sub    esp,0xc
c0009fa8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009fab:	e8 28 cd 00 00       	call   c0016cd8 <unblockTask(ThreadControlBlock*)>
c0009fb0:	83 c4 10             	add    esp,0x10
c0009fb3:	eb db                	jmp    c0009f90 <sendKeyToTerminal(unsigned char)+0x6e>
c0009fb5:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0009fba:	83 e8 01             	sub    eax,0x1
c0009fbd:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0009fc2:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0009fc7:	85 c0                	test   eax,eax
c0009fc9:	75 18                	jne    c0009fe3 <sendKeyToTerminal(unsigned char)+0xc1>
c0009fcb:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0009fd0:	85 c0                	test   eax,eax
c0009fd2:	74 0f                	je     c0009fe3 <sendKeyToTerminal(unsigned char)+0xc1>
c0009fd4:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0009fde:	e8 f5 c9 00 00       	call   c00169d8 <schedule()>
c0009fe3:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0009feb:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0009ff0:	85 c0                	test   eax,eax
c0009ff2:	75 01                	jne    c0009ff5 <sendKeyToTerminal(unsigned char)+0xd3>
c0009ff4:	fb                   	sti    
c0009ff5:	90                   	nop
c0009ff6:	c9                   	leave  
c0009ff7:	c3                   	ret    

c0009ff8 <sendKeyboardToken(KeyboardToken)>:
c0009ff8:	55                   	push   ebp
c0009ff9:	89 e5                	mov    ebp,esp
c0009ffb:	83 ec 18             	sub    esp,0x18
c0009ffe:	e8 dd 66 00 00       	call   c00106e0 <KeUserIOReceived()>
c000a003:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000a006:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a009:	0f b7 c0             	movzx  eax,ax
c000a00c:	83 f2 01             	xor    edx,0x1
c000a00f:	88 90 a0 b6 02 c0    	mov    BYTE PTR [eax-0x3ffd4960],dl
c000a015:	a1 88 b6 02 c0       	mov    eax,ds:0xc002b688
c000a01a:	85 c0                	test   eax,eax
c000a01c:	74 24                	je     c000a042 <sendKeyboardToken(KeyboardToken)+0x4a>
c000a01e:	8b 15 88 b6 02 c0    	mov    edx,DWORD PTR ds:0xc002b688
c000a024:	83 ec 04             	sub    esp,0x4
c000a027:	68 a0 b6 02 c0       	push   0xc002b6a0
c000a02c:	83 ec 08             	sub    esp,0x8
c000a02f:	89 e0                	mov    eax,esp
c000a031:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000a034:	89 08                	mov    DWORD PTR [eax],ecx
c000a036:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000a039:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000a03d:	ff d2                	call   edx
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000a046:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000a049:	0f b6 c0             	movzx  eax,al
c000a04c:	85 c0                	test   eax,eax
c000a04e:	0f 84 da 00 00 00    	je     c000a12e <sendKeyboardToken(KeyboardToken)+0x136>
c000a054:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a057:	0f b7 c0             	movzx  eax,ax
c000a05a:	3d 18 03 00 00       	cmp    eax,0x318
c000a05f:	75 06                	jne    c000a067 <sendKeyboardToken(KeyboardToken)+0x6f>
c000a061:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000a067:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a06a:	0f b7 c0             	movzx  eax,ax
c000a06d:	3d 19 03 00 00       	cmp    eax,0x319
c000a072:	75 06                	jne    c000a07a <sendKeyboardToken(KeyboardToken)+0x82>
c000a074:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000a07a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a07d:	0f b7 c0             	movzx  eax,ax
c000a080:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a085:	75 06                	jne    c000a08d <sendKeyboardToken(KeyboardToken)+0x95>
c000a087:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000a08d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a090:	0f b7 c0             	movzx  eax,ax
c000a093:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a098:	75 06                	jne    c000a0a0 <sendKeyboardToken(KeyboardToken)+0xa8>
c000a09a:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000a0a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0a3:	0f b7 c0             	movzx  eax,ax
c000a0a6:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a0ab:	75 06                	jne    c000a0b3 <sendKeyboardToken(KeyboardToken)+0xbb>
c000a0ad:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000a0b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0b6:	0f b7 c0             	movzx  eax,ax
c000a0b9:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a0be:	75 06                	jne    c000a0c6 <sendKeyboardToken(KeyboardToken)+0xce>
c000a0c0:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a0c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0c9:	0f b7 c0             	movzx  eax,ax
c000a0cc:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a0d1:	75 06                	jne    c000a0d9 <sendKeyboardToken(KeyboardToken)+0xe1>
c000a0d3:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000a0d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0dc:	0f b7 c0             	movzx  eax,ax
c000a0df:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a0e4:	75 06                	jne    c000a0ec <sendKeyboardToken(KeyboardToken)+0xf4>
c000a0e6:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000a0ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0ef:	0f b7 c0             	movzx  eax,ax
c000a0f2:	3d 20 03 00 00       	cmp    eax,0x320
c000a0f7:	75 06                	jne    c000a0ff <sendKeyboardToken(KeyboardToken)+0x107>
c000a0f9:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000a0ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a102:	0f b7 c0             	movzx  eax,ax
c000a105:	3d 21 03 00 00       	cmp    eax,0x321
c000a10a:	75 06                	jne    c000a112 <sendKeyboardToken(KeyboardToken)+0x11a>
c000a10c:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000a112:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a115:	0f b7 c0             	movzx  eax,ax
c000a118:	3d 22 03 00 00       	cmp    eax,0x322
c000a11d:	0f 85 f1 00 00 00    	jne    c000a214 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a123:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000a129:	e9 e6 00 00 00       	jmp    c000a214 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a12e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a131:	0f b7 c0             	movzx  eax,ax
c000a134:	3d 18 03 00 00       	cmp    eax,0x318
c000a139:	75 0a                	jne    c000a145 <sendKeyboardToken(KeyboardToken)+0x14d>
c000a13b:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000a141:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a148:	0f b7 c0             	movzx  eax,ax
c000a14b:	3d 19 03 00 00       	cmp    eax,0x319
c000a150:	75 0a                	jne    c000a15c <sendKeyboardToken(KeyboardToken)+0x164>
c000a152:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000a158:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a15c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a15f:	0f b7 c0             	movzx  eax,ax
c000a162:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a167:	75 0a                	jne    c000a173 <sendKeyboardToken(KeyboardToken)+0x17b>
c000a169:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000a16f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a176:	0f b7 c0             	movzx  eax,ax
c000a179:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a17e:	75 0a                	jne    c000a18a <sendKeyboardToken(KeyboardToken)+0x192>
c000a180:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000a186:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a18a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a18d:	0f b7 c0             	movzx  eax,ax
c000a190:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a195:	75 0a                	jne    c000a1a1 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000a197:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000a19d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1a4:	0f b7 c0             	movzx  eax,ax
c000a1a7:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a1ac:	75 0a                	jne    c000a1b8 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000a1ae:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a1b4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1bb:	0f b7 c0             	movzx  eax,ax
c000a1be:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a1c3:	75 0a                	jne    c000a1cf <sendKeyboardToken(KeyboardToken)+0x1d7>
c000a1c5:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000a1cb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1d2:	0f b7 c0             	movzx  eax,ax
c000a1d5:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a1da:	75 0a                	jne    c000a1e6 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000a1dc:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000a1e2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1e9:	0f b7 c0             	movzx  eax,ax
c000a1ec:	3d 20 03 00 00       	cmp    eax,0x320
c000a1f1:	75 0a                	jne    c000a1fd <sendKeyboardToken(KeyboardToken)+0x205>
c000a1f3:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000a1f9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a200:	0f b7 c0             	movzx  eax,ax
c000a203:	3d 21 03 00 00       	cmp    eax,0x321
c000a208:	75 0a                	jne    c000a214 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a20a:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000a210:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a214:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a217:	0f b7 c0             	movzx  eax,ax
c000a21a:	3d 00 02 00 00       	cmp    eax,0x200
c000a21f:	75 2f                	jne    c000a250 <sendKeyboardToken(KeyboardToken)+0x258>
c000a221:	a0 a0 ba 02 c0       	mov    al,ds:0xc002baa0
c000a226:	83 f0 01             	xor    eax,0x1
c000a229:	0f b6 c0             	movzx  eax,al
c000a22c:	85 c0                	test   eax,eax
c000a22e:	74 20                	je     c000a250 <sendKeyboardToken(KeyboardToken)+0x258>
c000a230:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000a235:	6a 01                	push   0x1
c000a237:	6a 00                	push   0x0
c000a239:	68 58 9e 00 c0       	push   0xc0009e58
c000a23e:	50                   	push   eax
c000a23f:	e8 3c c5 00 00       	call   c0016780 <Process::createThread(void (*)(void*), void*, int)>
c000a244:	83 c4 10             	add    esp,0x10
c000a247:	c6 05 a0 ba 02 c0 01 	mov    BYTE PTR ds:0xc002baa0,0x1
c000a24e:	eb 3a                	jmp    c000a28a <sendKeyboardToken(KeyboardToken)+0x292>
c000a250:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a253:	0f b7 c0             	movzx  eax,ax
c000a256:	3d 01 02 00 00       	cmp    eax,0x201
c000a25b:	75 2d                	jne    c000a28a <sendKeyboardToken(KeyboardToken)+0x292>
c000a25d:	a0 a0 ba 02 c0       	mov    al,ds:0xc002baa0
c000a262:	83 f0 01             	xor    eax,0x1
c000a265:	0f b6 c0             	movzx  eax,al
c000a268:	85 c0                	test   eax,eax
c000a26a:	74 1e                	je     c000a28a <sendKeyboardToken(KeyboardToken)+0x292>
c000a26c:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000a271:	6a 01                	push   0x1
c000a273:	6a 00                	push   0x0
c000a275:	68 bd 9e 00 c0       	push   0xc0009ebd
c000a27a:	50                   	push   eax
c000a27b:	e8 00 c5 00 00       	call   c0016780 <Process::createThread(void (*)(void*), void*, int)>
c000a280:	83 c4 10             	add    esp,0x10
c000a283:	c6 05 a0 ba 02 c0 01 	mov    BYTE PTR ds:0xc002baa0,0x1
c000a28a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a28d:	0f b7 c0             	movzx  eax,ax
c000a290:	3d 25 03 00 00       	cmp    eax,0x325
c000a295:	75 06                	jne    c000a29d <sendKeyboardToken(KeyboardToken)+0x2a5>
c000a297:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000a29d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2a0:	0f b7 c0             	movzx  eax,ax
c000a2a3:	3d 24 03 00 00       	cmp    eax,0x324
c000a2a8:	75 06                	jne    c000a2b0 <sendKeyboardToken(KeyboardToken)+0x2b8>
c000a2aa:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000a2b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2b3:	0f b7 c0             	movzx  eax,ax
c000a2b6:	3d 23 03 00 00       	cmp    eax,0x323
c000a2bb:	75 06                	jne    c000a2c3 <sendKeyboardToken(KeyboardToken)+0x2cb>
c000a2bd:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000a2c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2c6:	0f b7 c0             	movzx  eax,ax
c000a2c9:	3d 26 03 00 00       	cmp    eax,0x326
c000a2ce:	75 06                	jne    c000a2d6 <sendKeyboardToken(KeyboardToken)+0x2de>
c000a2d0:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000a2d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2d9:	0f b7 c0             	movzx  eax,ax
c000a2dc:	3d 27 03 00 00       	cmp    eax,0x327
c000a2e1:	75 06                	jne    c000a2e9 <sendKeyboardToken(KeyboardToken)+0x2f1>
c000a2e3:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000a2e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2ec:	0f b7 c0             	movzx  eax,ax
c000a2ef:	3d 22 03 00 00       	cmp    eax,0x322
c000a2f4:	75 06                	jne    c000a2fc <sendKeyboardToken(KeyboardToken)+0x304>
c000a2f6:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000a2fc:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000a300:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a303:	83 f0 01             	xor    eax,0x1
c000a306:	0f b6 c0             	movzx  eax,al
c000a309:	85 c0                	test   eax,eax
c000a30b:	74 7c                	je     c000a389 <sendKeyboardToken(KeyboardToken)+0x391>
c000a30d:	a0 a1 b7 02 c0       	mov    al,ds:0xc002b7a1
c000a312:	0f b6 c0             	movzx  eax,al
c000a315:	85 c0                	test   eax,eax
c000a317:	74 43                	je     c000a35c <sendKeyboardToken(KeyboardToken)+0x364>
c000a319:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a31d:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000a321:	85 c0                	test   eax,eax
c000a323:	74 2b                	je     c000a350 <sendKeyboardToken(KeyboardToken)+0x358>
c000a325:	8b 15 a4 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002baa4
c000a32b:	89 d0                	mov    eax,edx
c000a32d:	c1 e0 02             	shl    eax,0x2
c000a330:	01 d0                	add    eax,edx
c000a332:	d1 e0                	shl    eax,1
c000a334:	a3 a4 ba 02 c0       	mov    ds:0xc002baa4,eax
c000a339:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a33c:	0f b7 c0             	movzx  eax,ax
c000a33f:	8d 50 d0             	lea    edx,[eax-0x30]
c000a342:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a347:	01 d0                	add    eax,edx
c000a349:	a3 a4 ba 02 c0       	mov    ds:0xc002baa4,eax
c000a34e:	eb 71                	jmp    c000a3c1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a350:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a35a:	eb 65                	jmp    c000a3c1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a35c:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a361:	85 c0                	test   eax,eax
c000a363:	74 18                	je     c000a37d <sendKeyboardToken(KeyboardToken)+0x385>
c000a365:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a36a:	0f b6 c0             	movzx  eax,al
c000a36d:	83 ec 0c             	sub    esp,0xc
c000a370:	50                   	push   eax
c000a371:	e8 ac fb ff ff       	call   c0009f22 <sendKeyToTerminal(unsigned char)>
c000a376:	83 c4 10             	add    esp,0x10
c000a379:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a37d:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a387:	eb 38                	jmp    c000a3c1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a389:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a38c:	0f b7 c0             	movzx  eax,ax
c000a38f:	3d 01 01 00 00       	cmp    eax,0x101
c000a394:	75 2b                	jne    c000a3c1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a396:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a39b:	85 c0                	test   eax,eax
c000a39d:	74 18                	je     c000a3b7 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000a39f:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3a4:	0f b6 c0             	movzx  eax,al
c000a3a7:	83 ec 0c             	sub    esp,0xc
c000a3aa:	50                   	push   eax
c000a3ab:	e8 72 fb ff ff       	call   c0009f22 <sendKeyToTerminal(unsigned char)>
c000a3b0:	83 c4 10             	add    esp,0x10
c000a3b3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a3b7:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a3c1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a3c4:	83 f0 01             	xor    eax,0x1
c000a3c7:	0f b6 c0             	movzx  eax,al
c000a3ca:	85 c0                	test   eax,eax
c000a3cc:	74 5a                	je     c000a428 <sendKeyboardToken(KeyboardToken)+0x430>
c000a3ce:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a3d1:	83 f0 01             	xor    eax,0x1
c000a3d4:	0f b6 c0             	movzx  eax,al
c000a3d7:	85 c0                	test   eax,eax
c000a3d9:	74 4d                	je     c000a428 <sendKeyboardToken(KeyboardToken)+0x430>
c000a3db:	a0 a0 b7 02 c0       	mov    al,ds:0xc002b7a0
c000a3e0:	83 f0 01             	xor    eax,0x1
c000a3e3:	0f b6 c0             	movzx  eax,al
c000a3e6:	85 c0                	test   eax,eax
c000a3e8:	74 3e                	je     c000a428 <sendKeyboardToken(KeyboardToken)+0x430>
c000a3ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3ed:	0f b7 c0             	movzx  eax,ax
c000a3f0:	83 f8 1f             	cmp    eax,0x1f
c000a3f3:	76 0b                	jbe    c000a400 <sendKeyboardToken(KeyboardToken)+0x408>
c000a3f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3f8:	0f b7 c0             	movzx  eax,ax
c000a3fb:	83 f8 7e             	cmp    eax,0x7e
c000a3fe:	76 16                	jbe    c000a416 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a400:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a403:	0f b7 c0             	movzx  eax,ax
c000a406:	83 f8 0a             	cmp    eax,0xa
c000a409:	74 0b                	je     c000a416 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a40b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a40e:	0f b7 c0             	movzx  eax,ax
c000a411:	83 f8 08             	cmp    eax,0x8
c000a414:	75 12                	jne    c000a428 <sendKeyboardToken(KeyboardToken)+0x430>
c000a416:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a419:	0f b6 c0             	movzx  eax,al
c000a41c:	83 ec 0c             	sub    esp,0xc
c000a41f:	50                   	push   eax
c000a420:	e8 fd fa ff ff       	call   c0009f22 <sendKeyToTerminal(unsigned char)>
c000a425:	83 c4 10             	add    esp,0x10
c000a428:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a42b:	83 f0 01             	xor    eax,0x1
c000a42e:	0f b6 c0             	movzx  eax,al
c000a431:	85 c0                	test   eax,eax
c000a433:	74 5d                	je     c000a492 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a435:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a438:	83 f0 01             	xor    eax,0x1
c000a43b:	0f b6 c0             	movzx  eax,al
c000a43e:	85 c0                	test   eax,eax
c000a440:	74 50                	je     c000a492 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a442:	a0 a0 b7 02 c0       	mov    al,ds:0xc002b7a0
c000a447:	0f b6 c0             	movzx  eax,al
c000a44a:	85 c0                	test   eax,eax
c000a44c:	74 44                	je     c000a492 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a44e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a451:	0f b7 c0             	movzx  eax,ax
c000a454:	83 f8 3f             	cmp    eax,0x3f
c000a457:	76 39                	jbe    c000a492 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a459:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a45c:	0f b7 c0             	movzx  eax,ax
c000a45f:	83 f8 7f             	cmp    eax,0x7f
c000a462:	77 2e                	ja     c000a492 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a467:	88 c2                	mov    dl,al
c000a469:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a46c:	0f b7 c0             	movzx  eax,ax
c000a46f:	83 f8 5f             	cmp    eax,0x5f
c000a472:	76 04                	jbe    c000a478 <sendKeyboardToken(KeyboardToken)+0x480>
c000a474:	b0 20                	mov    al,0x20
c000a476:	eb 02                	jmp    c000a47a <sendKeyboardToken(KeyboardToken)+0x482>
c000a478:	b0 00                	mov    al,0x0
c000a47a:	89 d1                	mov    ecx,edx
c000a47c:	29 c1                	sub    ecx,eax
c000a47e:	89 c8                	mov    eax,ecx
c000a480:	83 e8 40             	sub    eax,0x40
c000a483:	0f b6 c0             	movzx  eax,al
c000a486:	83 ec 0c             	sub    esp,0xc
c000a489:	50                   	push   eax
c000a48a:	e8 93 fa ff ff       	call   c0009f22 <sendKeyToTerminal(unsigned char)>
c000a48f:	83 c4 10             	add    esp,0x10
c000a492:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a495:	0f b7 c0             	movzx  eax,ax
c000a498:	3d 00 03 00 00       	cmp    eax,0x300
c000a49d:	75 12                	jne    c000a4b1 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a49f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a4a2:	83 f0 01             	xor    eax,0x1
c000a4a5:	0f b6 c0             	movzx  eax,al
c000a4a8:	85 c0                	test   eax,eax
c000a4aa:	74 05                	je     c000a4b1 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a4ac:	e8 fc 7a 00 00       	call   c0011fad <doTerminalCycle()>
c000a4b1:	90                   	nop
c000a4b2:	c9                   	leave  
c000a4b3:	c3                   	ret    

c000a4b4 <clearInternalKeybuffer(VgaText*)>:
c000a4b4:	55                   	push   ebp
c000a4b5:	89 e5                	mov    ebp,esp
c000a4b7:	83 ec 08             	sub    esp,0x8
c000a4ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4bd:	05 02 01 00 00       	add    eax,0x102
c000a4c2:	83 ec 0c             	sub    esp,0xc
c000a4c5:	50                   	push   eax
c000a4c6:	e8 b5 60 ff ff       	call   c0000580 <strlen>
c000a4cb:	83 c4 10             	add    esp,0x10
c000a4ce:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a4d1:	81 c2 02 01 00 00    	add    edx,0x102
c000a4d7:	83 ec 04             	sub    esp,0x4
c000a4da:	50                   	push   eax
c000a4db:	6a 00                	push   0x0
c000a4dd:	52                   	push   edx
c000a4de:	e8 0d 60 ff ff       	call   c00004f0 <memset>
c000a4e3:	83 c4 10             	add    esp,0x10
c000a4e6:	90                   	nop
c000a4e7:	c9                   	leave  
c000a4e8:	c3                   	ret    

c000a4e9 <readKeyboard(VgaText*, char*, unsigned long)>:
c000a4e9:	55                   	push   ebp
c000a4ea:	89 e5                	mov    ebp,esp
c000a4ec:	83 ec 18             	sub    esp,0x18
c000a4ef:	a1 88 b6 02 c0       	mov    eax,ds:0xc002b688
c000a4f4:	85 c0                	test   eax,eax
c000a4f6:	74 2a                	je     c000a522 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000a4f8:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000a4fe:	8b 15 88 b6 02 c0    	mov    edx,DWORD PTR ds:0xc002b688
c000a504:	83 ec 04             	sub    esp,0x4
c000a507:	68 a0 b6 02 c0       	push   0xc002b6a0
c000a50c:	83 ec 08             	sub    esp,0x8
c000a50f:	89 e0                	mov    eax,esp
c000a511:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000a514:	89 08                	mov    DWORD PTR [eax],ecx
c000a516:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000a519:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000a51d:	ff d2                	call   edx
c000a51f:	83 c4 10             	add    esp,0x10
c000a522:	fb                   	sti    
c000a523:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000a52a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000a52e:	0f 84 08 01 00 00    	je     c000a63c <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000a534:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a537:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a53d:	0f be c0             	movsx  eax,al
c000a540:	85 c0                	test   eax,eax
c000a542:	75 27                	jne    c000a56b <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000a544:	fa                   	cli    
c000a545:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000a54a:	83 c0 01             	add    eax,0x1
c000a54d:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000a552:	e8 81 c4 00 00       	call   c00169d8 <schedule()>
c000a557:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000a55f:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000a564:	85 c0                	test   eax,eax
c000a566:	75 cc                	jne    c000a534 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a568:	fb                   	sti    
c000a569:	eb c9                	jmp    c000a534 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a56b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a56e:	8d 50 01             	lea    edx,[eax+0x1]
c000a571:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000a574:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a577:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000a57d:	88 10                	mov    BYTE PTR [eax],dl
c000a57f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a582:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a588:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000a58b:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a58f:	83 f8 03             	cmp    eax,0x3
c000a592:	75 1e                	jne    c000a5b2 <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000a594:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a599:	8b 00                	mov    eax,DWORD PTR [eax]
c000a59b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a59e:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000a5a4:	83 ec 08             	sub    esp,0x8
c000a5a7:	6a 02                	push   0x2
c000a5a9:	50                   	push   eax
c000a5aa:	e8 45 69 00 00       	call   c0010ef4 <KeRaiseSignal(SigHandlerBlock*, int)>
c000a5af:	83 c4 10             	add    esp,0x10
c000a5b2:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a5b6:	83 f8 1c             	cmp    eax,0x1c
c000a5b9:	75 1e                	jne    c000a5d9 <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000a5bb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a5c0:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a5c5:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000a5cb:	83 ec 08             	sub    esp,0x8
c000a5ce:	6a 09                	push   0x9
c000a5d0:	50                   	push   eax
c000a5d1:	e8 1e 69 00 00       	call   c0010ef4 <KeRaiseSignal(SigHandlerBlock*, int)>
c000a5d6:	83 c4 10             	add    esp,0x10
c000a5d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5dc:	05 02 01 00 00       	add    eax,0x102
c000a5e1:	83 ec 0c             	sub    esp,0xc
c000a5e4:	50                   	push   eax
c000a5e5:	e8 96 5f ff ff       	call   c0000580 <strlen>
c000a5ea:	83 c4 10             	add    esp,0x10
c000a5ed:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a5f0:	81 c2 02 01 00 00    	add    edx,0x102
c000a5f6:	8d 4a 01             	lea    ecx,[edx+0x1]
c000a5f9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a5fc:	81 c2 02 01 00 00    	add    edx,0x102
c000a602:	83 ec 04             	sub    esp,0x4
c000a605:	50                   	push   eax
c000a606:	51                   	push   ecx
c000a607:	52                   	push   edx
c000a608:	e8 c3 5d ff ff       	call   c00003d0 <memmove>
c000a60d:	83 c4 10             	add    esp,0x10
c000a610:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000a614:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000a618:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a61c:	83 f8 0a             	cmp    eax,0xa
c000a61f:	74 16                	je     c000a637 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a621:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a625:	83 f8 03             	cmp    eax,0x3
c000a628:	74 0d                	je     c000a637 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a62a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a62e:	83 f8 1c             	cmp    eax,0x1c
c000a631:	0f 85 f3 fe ff ff    	jne    c000a52a <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000a637:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a63a:	eb 03                	jmp    c000a63f <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000a63c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a63f:	c9                   	leave  
c000a640:	c3                   	ret    
c000a641:	90                   	nop

c000a642 <Keyboard::Keyboard(char const*)>:
c000a642:	83 ec 0c             	sub    esp,0xc
c000a645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a649:	83 ec 08             	sub    esp,0x8
c000a64c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a650:	50                   	push   eax
c000a651:	e8 a4 f4 ff ff       	call   c0009afa <Device::Device(char const*)>
c000a656:	83 c4 10             	add    esp,0x10
c000a659:	ba a0 30 02 c0       	mov    edx,0xc00230a0
c000a65e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a662:	89 10                	mov    DWORD PTR [eax],edx
c000a664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a668:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000a672:	c6 05 84 b6 02 c0 01 	mov    BYTE PTR ds:0xc002b684,0x1
c000a679:	90                   	nop
c000a67a:	83 c4 0c             	add    esp,0xc
c000a67d:	c3                   	ret    

c000a67e <Keyboard::~Keyboard()>:
c000a67e:	83 ec 0c             	sub    esp,0xc
c000a681:	ba a0 30 02 c0       	mov    edx,0xc00230a0
c000a686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a68a:	89 10                	mov    DWORD PTR [eax],edx
c000a68c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a690:	83 ec 0c             	sub    esp,0xc
c000a693:	50                   	push   eax
c000a694:	e8 01 f2 ff ff       	call   c000989a <Device::~Device()>
c000a699:	83 c4 10             	add    esp,0x10
c000a69c:	90                   	nop
c000a69d:	83 c4 0c             	add    esp,0xc
c000a6a0:	c3                   	ret    
c000a6a1:	90                   	nop

c000a6a2 <Keyboard::~Keyboard()>:
c000a6a2:	83 ec 0c             	sub    esp,0xc
c000a6a5:	83 ec 0c             	sub    esp,0xc
c000a6a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6ac:	e8 cd ff ff ff       	call   c000a67e <Keyboard::~Keyboard()>
c000a6b1:	83 c4 10             	add    esp,0x10
c000a6b4:	83 ec 08             	sub    esp,0x8
c000a6b7:	68 5c 01 00 00       	push   0x15c
c000a6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6c0:	e8 22 2b 00 00       	call   c000d1e7 <operator delete(void*, unsigned long)>
c000a6c5:	83 c4 10             	add    esp,0x10
c000a6c8:	83 c4 0c             	add    esp,0xc
c000a6cb:	c3                   	ret    

c000a6cc <LogicalDisk::close(int, int, void*)>:
c000a6cc:	83 c8 ff             	or     eax,0xffffffff
c000a6cf:	c3                   	ret    

c000a6d0 <LogicalDisk::~LogicalDisk()>:
c000a6d0:	83 ec 0c             	sub    esp,0xc
c000a6d3:	ba 18 31 02 c0       	mov    edx,0xc0023118
c000a6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6dc:	89 10                	mov    DWORD PTR [eax],edx
c000a6de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6e2:	83 ec 0c             	sub    esp,0xc
c000a6e5:	50                   	push   eax
c000a6e6:	e8 af f1 ff ff       	call   c000989a <Device::~Device()>
c000a6eb:	83 c4 10             	add    esp,0x10
c000a6ee:	90                   	nop
c000a6ef:	83 c4 0c             	add    esp,0xc
c000a6f2:	c3                   	ret    
c000a6f3:	90                   	nop

c000a6f4 <LogicalDisk::~LogicalDisk()>:
c000a6f4:	83 ec 0c             	sub    esp,0xc
c000a6f7:	83 ec 0c             	sub    esp,0xc
c000a6fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6fe:	e8 cd ff ff ff       	call   c000a6d0 <LogicalDisk::~LogicalDisk()>
c000a703:	83 c4 10             	add    esp,0x10
c000a706:	83 ec 08             	sub    esp,0x8
c000a709:	68 78 01 00 00       	push   0x178
c000a70e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a712:	e8 d0 2a 00 00       	call   c000d1e7 <operator delete(void*, unsigned long)>
c000a717:	83 c4 10             	add    esp,0x10
c000a71a:	83 c4 0c             	add    esp,0xc
c000a71d:	c3                   	ret    

c000a71e <LogicalDisk::open(int, int, void*)>:
c000a71e:	83 ec 18             	sub    esp,0x18
c000a721:	68 cc 30 02 c0       	push   0xc00230cc
c000a726:	e8 8b 56 00 00       	call   c000fdb6 <KePanic(char const*)>
c000a72b:	83 c8 ff             	or     eax,0xffffffff
c000a72e:	83 c4 1c             	add    esp,0x1c
c000a731:	c3                   	ret    

c000a732 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000a732:	53                   	push   ebx
c000a733:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a737:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a73b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a73f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000a745:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000a74b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000a751:	77 10                	ja     c000a763 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000a753:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000a759:	89 d3                	mov    ebx,edx
c000a75b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000a761:	72 05                	jb     c000a768 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000a763:	83 c8 ff             	or     eax,0xffffffff
c000a766:	89 c2                	mov    edx,eax
c000a768:	5b                   	pop    ebx
c000a769:	c3                   	ret    

c000a76a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000a76a:	56                   	push   esi
c000a76b:	83 c8 ff             	or     eax,0xffffffff
c000a76e:	53                   	push   ebx
c000a76f:	89 c2                	mov    edx,eax
c000a771:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a775:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000a779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a77d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a783:	77 27                	ja     c000a7ac <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a785:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000a78b:	89 d8                	mov    eax,ebx
c000a78d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000a793:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000a798:	89 c2                	mov    edx,eax
c000a79a:	73 10                	jae    c000a7ac <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a79c:	89 c8                	mov    eax,ecx
c000a79e:	89 da                	mov    edx,ebx
c000a7a0:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000a7a6:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000a7ac:	5b                   	pop    ebx
c000a7ad:	5e                   	pop    esi
c000a7ae:	c3                   	ret    
c000a7af:	90                   	nop

c000a7b0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a7b0:	83 ec 1c             	sub    esp,0x1c
c000a7b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a7b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a7bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a7bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a7c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a7c7:	89 04 24             	mov    DWORD PTR [esp],eax
c000a7ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a7ce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a7d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a7d6:	83 ec 08             	sub    esp,0x8
c000a7d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a7dd:	50                   	push   eax
c000a7de:	e8 17 f3 ff ff       	call   c0009afa <Device::Device(char const*)>
c000a7e3:	83 c4 10             	add    esp,0x10
c000a7e6:	ba 18 31 02 c0       	mov    edx,0xc0023118
c000a7eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a7ef:	89 10                	mov    DWORD PTR [eax],edx
c000a7f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a7f5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a7fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a800:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000a807:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a80b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a812:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a816:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000a820:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a824:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a828:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a82c:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000a832:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000a838:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a83c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a83f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a843:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000a849:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000a84f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a853:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a857:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000a85d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a861:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a86b:	90                   	nop
c000a86c:	83 c4 1c             	add    esp,0x1c
c000a86f:	c3                   	ret    

c000a870 <LogicalDisk::assignDriveLetter()>:
c000a870:	55                   	push   ebp
c000a871:	57                   	push   edi
c000a872:	56                   	push   esi
c000a873:	53                   	push   ebx
c000a874:	83 ec 14             	sub    esp,0x14
c000a877:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a87b:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000a881:	b0 41                	mov    al,0x41
c000a883:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000a889:	84 d2                	test   dl,dl
c000a88b:	75 02                	jne    c000a88f <LogicalDisk::assignDriveLetter()+0x1f>
c000a88d:	b0 43                	mov    al,0x43
c000a88f:	8b 3d c0 ba 02 c0    	mov    edi,DWORD PTR ds:0xc002bac0
c000a895:	0f b6 ca             	movzx  ecx,dl
c000a898:	0f be e8             	movsx  ebp,al
c000a89b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a89f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000a8a3:	8b 3d c4 ba 02 c0    	mov    edi,DWORD PTR ds:0xc002bac4
c000a8a9:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000a8ad:	3c 43                	cmp    al,0x43
c000a8af:	75 10                	jne    c000a8c1 <LogicalDisk::assignDriveLetter()+0x51>
c000a8b1:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000a8b8:	75 5a                	jne    c000a914 <LogicalDisk::assignDriveLetter()+0xa4>
c000a8ba:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a8bf:	75 53                	jne    c000a914 <LogicalDisk::assignDriveLetter()+0xa4>
c000a8c1:	8d 75 bf             	lea    esi,[ebp-0x41]
c000a8c4:	ba 01 00 00 00       	mov    edx,0x1
c000a8c9:	89 34 24             	mov    DWORD PTR [esp],esi
c000a8cc:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000a8cf:	d3 e2                	shl    edx,cl
c000a8d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a8d5:	89 d7                	mov    edi,edx
c000a8d7:	89 d6                	mov    esi,edx
c000a8d9:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000a8dd:	c1 ff 1f             	sar    edi,0x1f
c000a8e0:	21 f9                	and    ecx,edi
c000a8e2:	09 d1                	or     ecx,edx
c000a8e4:	75 2e                	jne    c000a914 <LogicalDisk::assignDriveLetter()+0xa4>
c000a8e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8ea:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000a8ee:	09 f2                	or     edx,esi
c000a8f0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000a8f3:	89 15 c0 ba 02 c0    	mov    DWORD PTR ds:0xc002bac0,edx
c000a8f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a8fd:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000a903:	89 1c b5 e0 ba 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4520],ebx
c000a90a:	09 fa                	or     edx,edi
c000a90c:	89 15 c4 ba 02 c0    	mov    DWORD PTR ds:0xc002bac4,edx
c000a912:	eb 0d                	jmp    c000a921 <LogicalDisk::assignDriveLetter()+0xb1>
c000a914:	8d 50 01             	lea    edx,[eax+0x1]
c000a917:	45                   	inc    ebp
c000a918:	80 fa 5b             	cmp    dl,0x5b
c000a91b:	88 d0                	mov    al,dl
c000a91d:	75 8e                	jne    c000a8ad <LogicalDisk::assignDriveLetter()+0x3d>
c000a91f:	31 c0                	xor    eax,eax
c000a921:	83 c4 14             	add    esp,0x14
c000a924:	5b                   	pop    ebx
c000a925:	5e                   	pop    esi
c000a926:	5f                   	pop    edi
c000a927:	5d                   	pop    ebp
c000a928:	c3                   	ret    
c000a929:	90                   	nop

c000a92a <LogicalDisk::mount()>:
c000a92a:	56                   	push   esi
c000a92b:	53                   	push   ebx
c000a92c:	53                   	push   ebx
c000a92d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a931:	8b 1d 04 b3 02 c0    	mov    ebx,DWORD PTR ds:0xc002b304
c000a937:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a941:	85 db                	test   ebx,ebx
c000a943:	74 27                	je     c000a96c <LogicalDisk::mount()+0x42>
c000a945:	51                   	push   ecx
c000a946:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a94d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a94f:	83 e8 41             	sub    eax,0x41
c000a952:	50                   	push   eax
c000a953:	56                   	push   esi
c000a954:	53                   	push   ebx
c000a955:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a958:	83 c4 10             	add    esp,0x10
c000a95b:	84 c0                	test   al,al
c000a95d:	74 08                	je     c000a967 <LogicalDisk::mount()+0x3d>
c000a95f:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a965:	eb 07                	jmp    c000a96e <LogicalDisk::mount()+0x44>
c000a967:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a96a:	eb d5                	jmp    c000a941 <LogicalDisk::mount()+0x17>
c000a96c:	31 c0                	xor    eax,eax
c000a96e:	5a                   	pop    edx
c000a96f:	5b                   	pop    ebx
c000a970:	5e                   	pop    esi
c000a971:	c3                   	ret    

c000a972 <LogicalDisk::unmount()>:
c000a972:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a976:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a980:	c3                   	ret    
c000a981:	90                   	nop

c000a982 <LogicalDisk::eject()>:
c000a982:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a986:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a98c:	8b 10                	mov    edx,DWORD PTR [eax]
c000a98e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a992:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a995:	90                   	nop

c000a996 <LogicalDisk::unassignDriveLetter()>:
c000a996:	57                   	push   edi
c000a997:	56                   	push   esi
c000a998:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a99c:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000a9a3:	85 c9                	test   ecx,ecx
c000a9a5:	75 0f                	jne    c000a9b6 <LogicalDisk::unassignDriveLetter()+0x20>
c000a9a7:	c7 44 24 0c f0 30 02 c0 	mov    DWORD PTR [esp+0xc],0xc00230f0
c000a9af:	5e                   	pop    esi
c000a9b0:	5f                   	pop    edi
c000a9b1:	e9 00 54 00 00       	jmp    c000fdb6 <KePanic(char const*)>
c000a9b6:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000a9bd:	83 e9 41             	sub    ecx,0x41
c000a9c0:	b8 01 00 00 00       	mov    eax,0x1
c000a9c5:	c7 04 8d e0 ba 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4520],0x0
c000a9d0:	d3 e0                	shl    eax,cl
c000a9d2:	89 c7                	mov    edi,eax
c000a9d4:	f7 d0                	not    eax
c000a9d6:	c1 ff 1f             	sar    edi,0x1f
c000a9d9:	21 05 c0 ba 02 c0    	and    DWORD PTR ds:0xc002bac0,eax
c000a9df:	89 fe                	mov    esi,edi
c000a9e1:	f7 d6                	not    esi
c000a9e3:	21 35 c4 ba 02 c0    	and    DWORD PTR ds:0xc002bac4,esi
c000a9e9:	5e                   	pop    esi
c000a9ea:	5f                   	pop    edi
c000a9eb:	c3                   	ret    

c000a9ec <LogicalDisk::read(unsigned long long, int, void*)>:
c000a9ec:	57                   	push   edi
c000a9ed:	56                   	push   esi
c000a9ee:	53                   	push   ebx
c000a9ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a9f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a9f7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a9fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a9ff:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aa05:	77 41                	ja     c000aa48 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000aa07:	99                   	cdq    
c000aa08:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aa0e:	01 c8                	add    eax,ecx
c000aa10:	11 da                	adc    edx,ebx
c000aa12:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aa18:	19 d7                	sbb    edi,edx
c000aa1a:	72 33                	jb     c000aa4f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000aa1c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aa22:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aa28:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aa2c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aa30:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000aa36:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aa3c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aa40:	5b                   	pop    ebx
c000aa41:	5e                   	pop    esi
c000aa42:	5f                   	pop    edi
c000aa43:	e9 66 0b 00 00       	jmp    c000b5ae <VCache::read(unsigned long long, int, void*)>
c000aa48:	b8 05 00 00 00       	mov    eax,0x5
c000aa4d:	eb 05                	jmp    c000aa54 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000aa4f:	b8 07 00 00 00       	mov    eax,0x7
c000aa54:	5b                   	pop    ebx
c000aa55:	5e                   	pop    esi
c000aa56:	5f                   	pop    edi
c000aa57:	c3                   	ret    

c000aa58 <LogicalDisk::write(unsigned long long, int, void*)>:
c000aa58:	57                   	push   edi
c000aa59:	56                   	push   esi
c000aa5a:	53                   	push   ebx
c000aa5b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aa5f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aa63:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aa67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa6b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aa71:	77 41                	ja     c000aab4 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000aa73:	99                   	cdq    
c000aa74:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aa7a:	01 c8                	add    eax,ecx
c000aa7c:	11 da                	adc    edx,ebx
c000aa7e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aa84:	19 d7                	sbb    edi,edx
c000aa86:	72 33                	jb     c000aabb <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000aa88:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aa8e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aa94:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aa98:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aa9c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000aaa2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aaa8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaac:	5b                   	pop    ebx
c000aaad:	5e                   	pop    esi
c000aaae:	5f                   	pop    edi
c000aaaf:	e9 2c 09 00 00       	jmp    c000b3e0 <VCache::write(unsigned long long, int, void*)>
c000aab4:	b8 05 00 00 00       	mov    eax,0x5
c000aab9:	eb 05                	jmp    c000aac0 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000aabb:	b8 07 00 00 00       	mov    eax,0x7
c000aac0:	5b                   	pop    ebx
c000aac1:	5e                   	pop    esi
c000aac2:	5f                   	pop    edi
c000aac3:	c3                   	ret    

c000aac4 <Mouse::Mouse(char const*)>:
c000aac4:	83 ec 0c             	sub    esp,0xc
c000aac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aacb:	83 ec 08             	sub    esp,0x8
c000aace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aad2:	50                   	push   eax
c000aad3:	e8 22 f0 ff ff       	call   c0009afa <Device::Device(char const*)>
c000aad8:	83 c4 10             	add    esp,0x10
c000aadb:	ba 44 31 02 c0       	mov    edx,0xc0023144
c000aae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae4:	89 10                	mov    DWORD PTR [eax],edx
c000aae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaea:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000aaf4:	90                   	nop
c000aaf5:	83 c4 0c             	add    esp,0xc
c000aaf8:	c3                   	ret    
c000aaf9:	90                   	nop
c000aafa:	66 90                	xchg   ax,ax

c000aafc <Mouse::~Mouse()>:
c000aafc:	83 ec 0c             	sub    esp,0xc
c000aaff:	ba 44 31 02 c0       	mov    edx,0xc0023144
c000ab04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab08:	89 10                	mov    DWORD PTR [eax],edx
c000ab0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab0e:	83 ec 0c             	sub    esp,0xc
c000ab11:	50                   	push   eax
c000ab12:	e8 83 ed ff ff       	call   c000989a <Device::~Device()>
c000ab17:	83 c4 10             	add    esp,0x10
c000ab1a:	90                   	nop
c000ab1b:	83 c4 0c             	add    esp,0xc
c000ab1e:	c3                   	ret    
c000ab1f:	90                   	nop

c000ab20 <Mouse::~Mouse()>:
c000ab20:	83 ec 0c             	sub    esp,0xc
c000ab23:	83 ec 0c             	sub    esp,0xc
c000ab26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab2a:	e8 cd ff ff ff       	call   c000aafc <Mouse::~Mouse()>
c000ab2f:	83 c4 10             	add    esp,0x10
c000ab32:	83 ec 08             	sub    esp,0x8
c000ab35:	68 58 01 00 00       	push   0x158
c000ab3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab3e:	e8 a4 26 00 00       	call   c000d1e7 <operator delete(void*, unsigned long)>
c000ab43:	83 c4 10             	add    esp,0x10
c000ab46:	83 c4 0c             	add    esp,0xc
c000ab49:	c3                   	ret    

c000ab4a <NIC::getMAC()>:
c000ab4a:	31 c0                	xor    eax,eax
c000ab4c:	31 d2                	xor    edx,edx
c000ab4e:	c3                   	ret    
c000ab4f:	90                   	nop

c000ab50 <NIC::write(int, unsigned char*, int*)>:
c000ab50:	b8 01 00 00 00       	mov    eax,0x1
c000ab55:	c3                   	ret    

c000ab56 <NIC::NIC(char const*)>:
c000ab56:	83 ec 0c             	sub    esp,0xc
c000ab59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab5d:	83 ec 08             	sub    esp,0x8
c000ab60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab64:	50                   	push   eax
c000ab65:	e8 90 ef ff ff       	call   c0009afa <Device::Device(char const*)>
c000ab6a:	83 c4 10             	add    esp,0x10
c000ab6d:	ba 70 31 02 c0       	mov    edx,0xc0023170
c000ab72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab76:	89 10                	mov    DWORD PTR [eax],edx
c000ab78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ab86:	90                   	nop
c000ab87:	83 c4 0c             	add    esp,0xc
c000ab8a:	c3                   	ret    
c000ab8b:	90                   	nop

c000ab8c <NIC::~NIC()>:
c000ab8c:	83 ec 0c             	sub    esp,0xc
c000ab8f:	ba 70 31 02 c0       	mov    edx,0xc0023170
c000ab94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab98:	89 10                	mov    DWORD PTR [eax],edx
c000ab9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab9e:	83 ec 0c             	sub    esp,0xc
c000aba1:	50                   	push   eax
c000aba2:	e8 f3 ec ff ff       	call   c000989a <Device::~Device()>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	90                   	nop
c000abab:	83 c4 0c             	add    esp,0xc
c000abae:	c3                   	ret    
c000abaf:	90                   	nop

c000abb0 <NIC::~NIC()>:
c000abb0:	83 ec 0c             	sub    esp,0xc
c000abb3:	83 ec 0c             	sub    esp,0xc
c000abb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abba:	e8 cd ff ff ff       	call   c000ab8c <NIC::~NIC()>
c000abbf:	83 c4 10             	add    esp,0x10
c000abc2:	83 ec 08             	sub    esp,0x8
c000abc5:	68 58 01 00 00       	push   0x158
c000abca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abce:	e8 14 26 00 00       	call   c000d1e7 <operator delete(void*, unsigned long)>
c000abd3:	83 c4 10             	add    esp,0x10
c000abd6:	83 c4 0c             	add    esp,0xc
c000abd9:	c3                   	ret    

c000abda <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000abda:	55                   	push   ebp
c000abdb:	57                   	push   edi
c000abdc:	56                   	push   esi
c000abdd:	53                   	push   ebx
c000abde:	81 ec 28 01 00 00    	sub    esp,0x128
c000abe4:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000abeb:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000abf2:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000abf9:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000ac00:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ac04:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ac08:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ac0f:	e8 e2 ef ff ff       	call   c0009bf6 <Device::getName()>
c000ac14:	5a                   	pop    edx
c000ac15:	59                   	pop    ecx
c000ac16:	50                   	push   eax
c000ac17:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ac1b:	55                   	push   ebp
c000ac1c:	e8 2f 5a ff ff       	call   c0000650 <strcpy>
c000ac21:	5b                   	pop    ebx
c000ac22:	58                   	pop    eax
c000ac23:	68 9c 31 02 c0       	push   0xc002319c
c000ac28:	55                   	push   ebp
c000ac29:	e8 42 5c ff ff       	call   c0000870 <strcat>
c000ac2e:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000ac35:	e8 36 4e 00 00       	call   c000fa70 <malloc>
c000ac3a:	83 c4 0c             	add    esp,0xc
c000ac3d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ac41:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ac45:	89 c3                	mov    ebx,eax
c000ac47:	57                   	push   edi
c000ac48:	56                   	push   esi
c000ac49:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000ac50:	55                   	push   ebp
c000ac51:	50                   	push   eax
c000ac52:	e8 59 fb ff ff       	call   c000a7b0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000ac57:	83 c4 14             	add    esp,0x14
c000ac5a:	53                   	push   ebx
c000ac5b:	e8 10 fc ff ff       	call   c000a870 <LogicalDisk::assignDriveLetter()>
c000ac60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ac63:	e8 c2 fc ff ff       	call   c000a92a <LogicalDisk::mount()>
c000ac68:	58                   	pop    eax
c000ac69:	5a                   	pop    edx
c000ac6a:	53                   	push   ebx
c000ac6b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ac72:	e8 21 ed ff ff       	call   c0009998 <Device::addChild(Device*)>
c000ac77:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ac7d:	5b                   	pop    ebx
c000ac7e:	5e                   	pop    esi
c000ac7f:	5f                   	pop    edi
c000ac80:	5d                   	pop    ebp
c000ac81:	c3                   	ret    

c000ac82 <createPartitionsForDisk(PhysicalDisk*)>:
c000ac82:	55                   	push   ebp
c000ac83:	57                   	push   edi
c000ac84:	56                   	push   esi
c000ac85:	53                   	push   ebx
c000ac86:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ac8c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ac93:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ac99:	3d 00 02 00 00       	cmp    eax,0x200
c000ac9e:	74 27                	je     c000acc7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000aca0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000aca6:	83 ec 10             	sub    esp,0x10
c000aca9:	99                   	cdq    
c000acaa:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000acb0:	52                   	push   edx
c000acb1:	50                   	push   eax
c000acb2:	0f a4 f7 0a          	shld   edi,esi,0xa
c000acb6:	c1 e6 0a             	shl    esi,0xa
c000acb9:	89 fd                	mov    ebp,edi
c000acbb:	55                   	push   ebp
c000acbc:	56                   	push   esi
c000acbd:	e8 82 66 01 00       	call   c0021344 <__udivdi3>
c000acc2:	e9 b9 00 00 00       	jmp    c000ad80 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000acc7:	83 ec 0c             	sub    esp,0xc
c000acca:	8b 03                	mov    eax,DWORD PTR [ebx]
c000accc:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000acd0:	56                   	push   esi
c000acd1:	6a 01                	push   0x1
c000acd3:	6a 00                	push   0x0
c000acd5:	6a 00                	push   0x0
c000acd7:	53                   	push   ebx
c000acd8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000acdb:	83 c4 20             	add    esp,0x20
c000acde:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ace6:	75 0a                	jne    c000acf2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ace8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000acf0:	74 2c                	je     c000ad1e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000acf2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000acf8:	83 ec 10             	sub    esp,0x10
c000acfb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ad01:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ad07:	89 f7                	mov    edi,esi
c000ad09:	c1 ff 1f             	sar    edi,0x1f
c000ad0c:	57                   	push   edi
c000ad0d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ad11:	56                   	push   esi
c000ad12:	c1 e0 0a             	shl    eax,0xa
c000ad15:	52                   	push   edx
c000ad16:	50                   	push   eax
c000ad17:	e8 28 66 01 00       	call   c0021344 <__udivdi3>
c000ad1c:	eb 62                	jmp    c000ad80 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad1e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ad25:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000ad2c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000ad33:	89 cf                	mov    edi,ecx
c000ad35:	83 e2 7f             	and    edx,0x7f
c000ad38:	83 e7 7f             	and    edi,0x7f
c000ad3b:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000ad3e:	83 e0 7f             	and    eax,0x7f
c000ad41:	8d 14 01             	lea    edx,[ecx+eax*1]
c000ad44:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ad4b:	83 e0 7f             	and    eax,0x7f
c000ad4e:	01 d0                	add    eax,edx
c000ad50:	84 c0                	test   al,al
c000ad52:	89 c5                	mov    ebp,eax
c000ad54:	74 41                	je     c000ad97 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000ad56:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ad5c:	83 ec 10             	sub    esp,0x10
c000ad5f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ad65:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ad6b:	89 f7                	mov    edi,esi
c000ad6d:	c1 ff 1f             	sar    edi,0x1f
c000ad70:	57                   	push   edi
c000ad71:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ad75:	56                   	push   esi
c000ad76:	c1 e0 0a             	shl    eax,0xa
c000ad79:	52                   	push   edx
c000ad7a:	50                   	push   eax
c000ad7b:	e8 c4 65 01 00       	call   c0021344 <__udivdi3>
c000ad80:	83 c4 14             	add    esp,0x14
c000ad83:	52                   	push   edx
c000ad84:	50                   	push   eax
c000ad85:	6a 00                	push   0x0
c000ad87:	6a 00                	push   0x0
c000ad89:	53                   	push   ebx
c000ad8a:	e8 4b fe ff ff       	call   c000abda <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000ad8f:	83 c4 20             	add    esp,0x20
c000ad92:	e9 73 01 00 00       	jmp    c000af0a <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000ad97:	89 f0                	mov    eax,esi
c000ad99:	31 c9                	xor    ecx,ecx
c000ad9b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000ada2:	75 02                	jne    c000ada6 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000ada4:	89 cd                	mov    ebp,ecx
c000ada6:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000adae:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000adb5:	83 c0 10             	add    eax,0x10
c000adb8:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000adc0:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000adc7:	c1 e2 08             	shl    edx,0x8
c000adca:	c1 e6 10             	shl    esi,0x10
c000adcd:	09 f2                	or     edx,esi
c000adcf:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000add6:	09 f2                	or     edx,esi
c000add8:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000addf:	c1 e6 18             	shl    esi,0x18
c000ade2:	09 f2                	or     edx,esi
c000ade4:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000adeb:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000adef:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000adf6:	c1 e6 10             	shl    esi,0x10
c000adf9:	c1 e2 08             	shl    edx,0x8
c000adfc:	09 f2                	or     edx,esi
c000adfe:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000ae05:	09 f2                	or     edx,esi
c000ae07:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000ae0e:	c1 e6 18             	shl    esi,0x18
c000ae11:	09 f2                	or     edx,esi
c000ae13:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000ae17:	41                   	inc    ecx
c000ae18:	83 f9 04             	cmp    ecx,0x4
c000ae1b:	0f 85 7a ff ff ff    	jne    c000ad9b <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000ae21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae25:	83 f0 01             	xor    eax,0x1
c000ae28:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ae2c:	75 4f                	jne    c000ae7d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ae2e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae32:	83 f0 01             	xor    eax,0x1
c000ae35:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000ae39:	75 42                	jne    c000ae7d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ae3b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ae41:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000ae49:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ae4f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000ae57:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ae5d:	89 f7                	mov    edi,esi
c000ae5f:	c1 ff 1f             	sar    edi,0x1f
c000ae62:	57                   	push   edi
c000ae63:	56                   	push   esi
c000ae64:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ae68:	52                   	push   edx
c000ae69:	c1 e0 0a             	shl    eax,0xa
c000ae6c:	50                   	push   eax
c000ae6d:	e8 d2 64 01 00       	call   c0021344 <__udivdi3>
c000ae72:	83 c4 10             	add    esp,0x10
c000ae75:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ae79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000ae7d:	89 e8                	mov    eax,ebp
c000ae7f:	0f b6 e8             	movzx  ebp,al
c000ae82:	85 ed                	test   ebp,ebp
c000ae84:	74 50                	je     c000aed6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000ae86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ae8e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ae92:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000ae96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ae9a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000ae9e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aea2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000aea6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aeaa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000aeae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aeb2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aeb6:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000aeba:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000aebe:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000aec2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000aec6:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000aeca:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000aece:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000aed2:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000aed6:	31 ed                	xor    ebp,ebp
c000aed8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000aedc:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000aee0:	89 f8                	mov    eax,edi
c000aee2:	09 f0                	or     eax,esi
c000aee4:	74 1e                	je     c000af04 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000aee6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000aeea:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000aeee:	89 d1                	mov    ecx,edx
c000aef0:	09 c1                	or     ecx,eax
c000aef2:	74 10                	je     c000af04 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000aef4:	83 ec 0c             	sub    esp,0xc
c000aef7:	57                   	push   edi
c000aef8:	56                   	push   esi
c000aef9:	52                   	push   edx
c000aefa:	50                   	push   eax
c000aefb:	53                   	push   ebx
c000aefc:	e8 d9 fc ff ff       	call   c000abda <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000af01:	83 c4 20             	add    esp,0x20
c000af04:	45                   	inc    ebp
c000af05:	83 fd 04             	cmp    ebp,0x4
c000af08:	75 ce                	jne    c000aed8 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000af0a:	81 c4 5c 02 00 00    	add    esp,0x25c
c000af10:	5b                   	pop    ebx
c000af11:	5e                   	pop    esi
c000af12:	5f                   	pop    edi
c000af13:	5d                   	pop    ebp
c000af14:	c3                   	ret    
c000af15:	66 90                	xchg   ax,ax
c000af17:	90                   	nop

c000af18 <Serial::Serial(char const*)>:
c000af18:	83 ec 0c             	sub    esp,0xc
c000af1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af1f:	83 ec 08             	sub    esp,0x8
c000af22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af26:	50                   	push   eax
c000af27:	e8 ce eb ff ff       	call   c0009afa <Device::Device(char const*)>
c000af2c:	83 c4 10             	add    esp,0x10
c000af2f:	ba b0 31 02 c0       	mov    edx,0xc00231b0
c000af34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af38:	89 10                	mov    DWORD PTR [eax],edx
c000af3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af3e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000af48:	90                   	nop
c000af49:	83 c4 0c             	add    esp,0xc
c000af4c:	c3                   	ret    
c000af4d:	90                   	nop
c000af4e:	66 90                	xchg   ax,ax

c000af50 <Serial::~Serial()>:
c000af50:	83 ec 0c             	sub    esp,0xc
c000af53:	ba b0 31 02 c0       	mov    edx,0xc00231b0
c000af58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af5c:	89 10                	mov    DWORD PTR [eax],edx
c000af5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af62:	83 ec 0c             	sub    esp,0xc
c000af65:	50                   	push   eax
c000af66:	e8 2f e9 ff ff       	call   c000989a <Device::~Device()>
c000af6b:	83 c4 10             	add    esp,0x10
c000af6e:	90                   	nop
c000af6f:	83 c4 0c             	add    esp,0xc
c000af72:	c3                   	ret    
c000af73:	90                   	nop

c000af74 <Serial::~Serial()>:
c000af74:	83 ec 0c             	sub    esp,0xc
c000af77:	83 ec 0c             	sub    esp,0xc
c000af7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af7e:	e8 cd ff ff ff       	call   c000af50 <Serial::~Serial()>
c000af83:	83 c4 10             	add    esp,0x10
c000af86:	83 ec 08             	sub    esp,0x8
c000af89:	68 58 01 00 00       	push   0x158
c000af8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af92:	e8 50 22 00 00       	call   c000d1e7 <operator delete(void*, unsigned long)>
c000af97:	83 c4 10             	add    esp,0x10
c000af9a:	83 c4 0c             	add    esp,0xc
c000af9d:	c3                   	ret    
c000af9e:	66 90                	xchg   ax,ax

c000afa0 <Timer::Timer(char const*)>:
c000afa0:	83 ec 0c             	sub    esp,0xc
c000afa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa7:	83 ec 08             	sub    esp,0x8
c000afaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afae:	50                   	push   eax
c000afaf:	e8 46 eb ff ff       	call   c0009afa <Device::Device(char const*)>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	ba 60 32 02 c0       	mov    edx,0xc0023260
c000afbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc0:	89 10                	mov    DWORD PTR [eax],edx
c000afc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc6:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000afd0:	90                   	nop
c000afd1:	83 c4 0c             	add    esp,0xc
c000afd4:	c3                   	ret    
c000afd5:	90                   	nop
c000afd6:	66 90                	xchg   ax,ax

c000afd8 <Timer::~Timer()>:
c000afd8:	83 ec 0c             	sub    esp,0xc
c000afdb:	ba 60 32 02 c0       	mov    edx,0xc0023260
c000afe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afe4:	89 10                	mov    DWORD PTR [eax],edx
c000afe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afea:	83 ec 0c             	sub    esp,0xc
c000afed:	50                   	push   eax
c000afee:	e8 a7 e8 ff ff       	call   c000989a <Device::~Device()>
c000aff3:	83 c4 10             	add    esp,0x10
c000aff6:	90                   	nop
c000aff7:	83 c4 0c             	add    esp,0xc
c000affa:	c3                   	ret    
c000affb:	90                   	nop

c000affc <Timer::~Timer()>:
c000affc:	83 ec 0c             	sub    esp,0xc
c000afff:	83 ec 0c             	sub    esp,0xc
c000b002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b006:	e8 cd ff ff ff       	call   c000afd8 <Timer::~Timer()>
c000b00b:	83 c4 10             	add    esp,0x10
c000b00e:	83 ec 08             	sub    esp,0x8
c000b011:	68 5c 01 00 00       	push   0x15c
c000b016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b01a:	e8 c8 21 00 00       	call   c000d1e7 <operator delete(void*, unsigned long)>
c000b01f:	83 c4 10             	add    esp,0x10
c000b022:	83 c4 0c             	add    esp,0xc
c000b025:	c3                   	ret    

c000b026 <Timer::read()>:
c000b026:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b02a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b030:	c3                   	ret    

c000b031 <setupTimer(int)>:
c000b031:	53                   	push   ebx
c000b032:	83 ec 14             	sub    esp,0x14
c000b035:	68 5c 01 00 00       	push   0x15c
c000b03a:	e8 31 4a 00 00       	call   c000fa70 <malloc>
c000b03f:	89 04 24             	mov    DWORD PTR [esp],eax
c000b042:	89 c3                	mov    ebx,eax
c000b044:	e8 83 5b 01 00       	call   c0020bcc <PIT::PIT()>
c000b049:	58                   	pop    eax
c000b04a:	5a                   	pop    edx
c000b04b:	53                   	push   ebx
c000b04c:	ff 35 d0 c0 02 c0    	push   DWORD PTR ds:0xc002c0d0
c000b052:	e8 41 e9 ff ff       	call   c0009998 <Device::addChild(Device*)>
c000b057:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b059:	6a 00                	push   0x0
c000b05b:	6a 00                	push   0x0
c000b05d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b061:	53                   	push   ebx
c000b062:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b065:	83 c4 28             	add    esp,0x28
c000b068:	89 d8                	mov    eax,ebx
c000b06a:	5b                   	pop    ebx
c000b06b:	c3                   	ret    

c000b06c <timerHandler(unsigned int)>:
c000b06c:	57                   	push   edi
c000b06d:	56                   	push   esi
c000b06e:	53                   	push   ebx
c000b06f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b073:	01 35 4c bb 02 c0    	add    DWORD PTR ds:0xc002bb4c,esi
c000b079:	80 3d d5 c0 02 c0 00 	cmp    BYTE PTR ds:0xc002c0d5,0x0
c000b080:	75 12                	jne    c000b094 <timerHandler(unsigned int)+0x28>
c000b082:	c7 44 24 10 3f 32 02 c0 	mov    DWORD PTR [esp+0x10],0xc002323f
c000b08a:	5b                   	pop    ebx
c000b08b:	5e                   	pop    esi
c000b08c:	5f                   	pop    edi
c000b08d:	e9 bc be ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c000b092:	66 90                	xchg   ax,ax
c000b094:	fa                   	cli    
c000b095:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c000b09b:	83 ec 0c             	sub    esp,0xc
c000b09e:	68 40 ea 02 c0       	push   0xc002ea40
c000b0a3:	e8 34 66 01 00       	call   c00216dc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b0a8:	83 c4 10             	add    esp,0x10
c000b0ab:	84 c0                	test   al,al
c000b0ad:	0f 85 a1 00 00 00    	jne    c000b154 <timerHandler(unsigned int)+0xe8>
c000b0b3:	83 ec 0c             	sub    esp,0xc
c000b0b6:	68 40 ea 02 c0       	push   0xc002ea40
c000b0bb:	e8 38 66 01 00       	call   c00216f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b0c0:	83 c4 10             	add    esp,0x10
c000b0c3:	89 c7                	mov    edi,eax
c000b0c5:	8d 76 00             	lea    esi,[esi+0x0]
c000b0c8:	83 ec 0c             	sub    esp,0xc
c000b0cb:	68 40 ea 02 c0       	push   0xc002ea40
c000b0d0:	e8 23 66 01 00       	call   c00216f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b0d5:	c7 04 24 40 ea 02 c0 	mov    DWORD PTR [esp],0xc002ea40
c000b0dc:	89 c3                	mov    ebx,eax
c000b0de:	e8 1d 66 01 00       	call   c0021700 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000b0e3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000b0e6:	83 c4 10             	add    esp,0x10
c000b0e9:	3b 05 4c bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb4c
c000b0ef:	77 23                	ja     c000b114 <timerHandler(unsigned int)+0xa8>
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	53                   	push   ebx
c000b0f5:	e8 de bb 00 00       	call   c0016cd8 <unblockTask(ThreadControlBlock*)>
c000b0fa:	83 c4 10             	add    esp,0x10
c000b0fd:	39 df                	cmp    edi,ebx
c000b0ff:	75 27                	jne    c000b128 <timerHandler(unsigned int)+0xbc>
c000b101:	83 ec 0c             	sub    esp,0xc
c000b104:	68 40 ea 02 c0       	push   0xc002ea40
c000b109:	e8 ea 65 01 00       	call   c00216f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b10e:	89 c7                	mov    edi,eax
c000b110:	eb 12                	jmp    c000b124 <timerHandler(unsigned int)+0xb8>
c000b112:	66 90                	xchg   ax,ax
c000b114:	50                   	push   eax
c000b115:	50                   	push   eax
c000b116:	53                   	push   ebx
c000b117:	68 40 ea 02 c0       	push   0xc002ea40
c000b11c:	e8 9b 66 01 00       	call   c00217bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000b121:	8d 76 00             	lea    esi,[esi+0x0]
c000b124:	83 c4 10             	add    esp,0x10
c000b127:	90                   	nop
c000b128:	83 ec 0c             	sub    esp,0xc
c000b12b:	68 40 ea 02 c0       	push   0xc002ea40
c000b130:	e8 a7 65 01 00       	call   c00216dc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b135:	83 c4 10             	add    esp,0x10
c000b138:	84 c0                	test   al,al
c000b13a:	75 18                	jne    c000b154 <timerHandler(unsigned int)+0xe8>
c000b13c:	83 ec 0c             	sub    esp,0xc
c000b13f:	68 40 ea 02 c0       	push   0xc002ea40
c000b144:	e8 af 65 01 00       	call   c00216f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b149:	83 c4 10             	add    esp,0x10
c000b14c:	39 f8                	cmp    eax,edi
c000b14e:	0f 85 74 ff ff ff    	jne    c000b0c8 <timerHandler(unsigned int)+0x5c>
c000b154:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b15a:	8b 42 34             	mov    eax,DWORD PTR [edx+0x34]
c000b15d:	85 c0                	test   eax,eax
c000b15f:	74 1b                	je     c000b17c <timerHandler(unsigned int)+0x110>
c000b161:	80 3d d4 c0 02 c0 00 	cmp    BYTE PTR ds:0xc002c0d4,0x0
c000b168:	74 12                	je     c000b17c <timerHandler(unsigned int)+0x110>
c000b16a:	89 c1                	mov    ecx,eax
c000b16c:	29 f1                	sub    ecx,esi
c000b16e:	39 f0                	cmp    eax,esi
c000b170:	89 4a 34             	mov    DWORD PTR [edx+0x34],ecx
c000b173:	77 07                	ja     c000b17c <timerHandler(unsigned int)+0x110>
c000b175:	e8 5e b8 00 00       	call   c00169d8 <schedule()>
c000b17a:	66 90                	xchg   ax,ax
c000b17c:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000b183:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000b18a:	75 04                	jne    c000b190 <timerHandler(unsigned int)+0x124>
c000b18c:	fb                   	sti    
c000b18d:	8d 76 00             	lea    esi,[esi+0x0]
c000b190:	5b                   	pop    ebx
c000b191:	5e                   	pop    esi
c000b192:	5f                   	pop    edi
c000b193:	c3                   	ret    

c000b194 <VCache::VCache(PhysicalDisk*)>:
c000b194:	53                   	push   ebx
c000b195:	83 ec 18             	sub    esp,0x18
c000b198:	ba d0 32 02 c0       	mov    edx,0xc00232d0
c000b19d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b1a1:	89 10                	mov    DWORD PTR [eax],edx
c000b1a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b1a7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000b1ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b1b2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000b1b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b1bd:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000b1c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000b1cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b1cf:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000b1d6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000b1dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b1e1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000b1e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b1ec:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b1f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b1f4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000b1fb:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000b202:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b206:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b20a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b20e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000b212:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b216:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b21a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b21e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000b225:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000b22d:	83 ec 0c             	sub    esp,0xc
c000b230:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b234:	e8 37 48 00 00       	call   c000fa70 <malloc>
c000b239:	83 c4 10             	add    esp,0x10
c000b23c:	89 c3                	mov    ebx,eax
c000b23e:	83 ec 0c             	sub    esp,0xc
c000b241:	53                   	push   ebx
c000b242:	e8 55 4b 00 00       	call   c000fd9c <Mutex::Mutex()>
c000b247:	83 c4 10             	add    esp,0x10
c000b24a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b24e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000b251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b255:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b259:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000b25c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b260:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b267:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b26b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b271:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b275:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b278:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b27c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000b282:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b288:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b28c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000b28f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000b292:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b296:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b29a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b29e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b2a4:	05 00 01 00 00       	add    eax,0x100
c000b2a9:	c1 e0 04             	shl    eax,0x4
c000b2ac:	83 ec 0c             	sub    esp,0xc
c000b2af:	50                   	push   eax
c000b2b0:	e8 bb 47 00 00       	call   c000fa70 <malloc>
c000b2b5:	83 c4 10             	add    esp,0x10
c000b2b8:	89 c2                	mov    edx,eax
c000b2ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2be:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b2c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2c5:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000b2cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2d0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b2d4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b2d8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b2de:	89 d0                	mov    eax,edx
c000b2e0:	c1 e0 02             	shl    eax,0x2
c000b2e3:	01 d0                	add    eax,edx
c000b2e5:	c1 e0 04             	shl    eax,0x4
c000b2e8:	83 ec 0c             	sub    esp,0xc
c000b2eb:	50                   	push   eax
c000b2ec:	e8 7f 47 00 00       	call   c000fa70 <malloc>
c000b2f1:	83 c4 10             	add    esp,0x10
c000b2f4:	89 c2                	mov    edx,eax
c000b2f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2fa:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000b2fd:	90                   	nop
c000b2fe:	83 c4 18             	add    esp,0x18
c000b301:	5b                   	pop    ebx
c000b302:	c3                   	ret    
c000b303:	90                   	nop

c000b304 <VCache::invalidateReadBuffer()>:
c000b304:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b308:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000b30e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b312:	c3                   	ret    
c000b313:	90                   	nop

c000b314 <VCache::writeWriteBuffer()>:
c000b314:	53                   	push   ebx
c000b315:	83 ec 08             	sub    esp,0x8
c000b318:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b31c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b320:	74 1e                	je     c000b340 <VCache::writeWriteBuffer()+0x2c>
c000b322:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b325:	83 ec 0c             	sub    esp,0xc
c000b328:	8b 10                	mov    edx,DWORD PTR [eax]
c000b32a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000b32d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000b330:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000b333:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b336:	50                   	push   eax
c000b337:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b33a:	83 c4 20             	add    esp,0x20
c000b33d:	8d 76 00             	lea    esi,[esi+0x0]
c000b340:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b347:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000b34e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000b352:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000b359:	83 c4 08             	add    esp,0x8
c000b35c:	5b                   	pop    ebx
c000b35d:	c3                   	ret    
c000b35e:	66 90                	xchg   ax,ax

c000b360 <VCache::~VCache()>:
c000b360:	83 ec 0c             	sub    esp,0xc
c000b363:	ba d0 32 02 c0       	mov    edx,0xc00232d0
c000b368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b36c:	89 10                	mov    DWORD PTR [eax],edx
c000b36e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b372:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000b375:	0f b6 c0             	movzx  eax,al
c000b378:	85 c0                	test   eax,eax
c000b37a:	74 10                	je     c000b38c <VCache::~VCache()+0x2c>
c000b37c:	83 ec 0c             	sub    esp,0xc
c000b37f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b383:	e8 8c ff ff ff       	call   c000b314 <VCache::writeWriteBuffer()>
c000b388:	83 c4 10             	add    esp,0x10
c000b38b:	90                   	nop
c000b38c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b390:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b393:	83 ec 0c             	sub    esp,0xc
c000b396:	50                   	push   eax
c000b397:	e8 e4 46 00 00       	call   c000fa80 <free>
c000b39c:	83 c4 10             	add    esp,0x10
c000b39f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3a3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b3a6:	83 ec 0c             	sub    esp,0xc
c000b3a9:	50                   	push   eax
c000b3aa:	e8 d1 46 00 00       	call   c000fa80 <free>
c000b3af:	83 c4 10             	add    esp,0x10
c000b3b2:	90                   	nop
c000b3b3:	83 c4 0c             	add    esp,0xc
c000b3b6:	c3                   	ret    
c000b3b7:	90                   	nop

c000b3b8 <VCache::~VCache()>:
c000b3b8:	83 ec 0c             	sub    esp,0xc
c000b3bb:	83 ec 0c             	sub    esp,0xc
c000b3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3c2:	e8 99 ff ff ff       	call   c000b360 <VCache::~VCache()>
c000b3c7:	83 c4 10             	add    esp,0x10
c000b3ca:	83 ec 08             	sub    esp,0x8
c000b3cd:	6a 44                	push   0x44
c000b3cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3d3:	e8 0f 1e 00 00       	call   c000d1e7 <operator delete(void*, unsigned long)>
c000b3d8:	83 c4 10             	add    esp,0x10
c000b3db:	83 c4 0c             	add    esp,0xc
c000b3de:	c3                   	ret    
c000b3df:	90                   	nop

c000b3e0 <VCache::write(unsigned long long, int, void*)>:
c000b3e0:	55                   	push   ebp
c000b3e1:	57                   	push   edi
c000b3e2:	56                   	push   esi
c000b3e3:	53                   	push   ebx
c000b3e4:	83 ec 1c             	sub    esp,0x1c
c000b3e7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b3eb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b3ef:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000b3f3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b3f7:	e8 3c b3 00 00       	call   c0016738 <KeDisablePreemption()>
c000b3fc:	b9 00 10 00 00       	mov    ecx,0x1000
c000b401:	50                   	push   eax
c000b402:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b405:	0f af c3             	imul   eax,ebx
c000b408:	05 ff 0f 00 00       	add    eax,0xfff
c000b40d:	99                   	cdq    
c000b40e:	f7 f9                	idiv   ecx
c000b410:	50                   	push   eax
c000b411:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b415:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b41b:	e8 ac 8a 00 00       	call   c0013ecc <VAS::canLockPages(unsigned long, int)>
c000b420:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000b424:	83 c4 10             	add    esp,0x10
c000b427:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b42c:	74 2a                	je     c000b458 <VCache::write(unsigned long long, int, void*)+0x78>
c000b42e:	50                   	push   eax
c000b42f:	b9 00 10 00 00       	mov    ecx,0x1000
c000b434:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b437:	0f af c3             	imul   eax,ebx
c000b43a:	05 ff 0f 00 00       	add    eax,0xfff
c000b43f:	99                   	cdq    
c000b440:	f7 f9                	idiv   ecx
c000b442:	50                   	push   eax
c000b443:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b447:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b44d:	e8 74 8e 00 00       	call   c00142c6 <VAS::lockPages(unsigned long, int)>
c000b452:	83 c4 10             	add    esp,0x10
c000b455:	8d 76 00             	lea    esi,[esi+0x0]
c000b458:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000b45c:	74 0e                	je     c000b46c <VCache::write(unsigned long long, int, void*)+0x8c>
c000b45e:	83 ec 0c             	sub    esp,0xc
c000b461:	55                   	push   ebp
c000b462:	e8 9d fe ff ff       	call   c000b304 <VCache::invalidateReadBuffer()>
c000b467:	83 c4 10             	add    esp,0x10
c000b46a:	66 90                	xchg   ax,ax
c000b46c:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000b470:	74 72                	je     c000b4e4 <VCache::write(unsigned long long, int, void*)+0x104>
c000b472:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000b475:	89 c8                	mov    eax,ecx
c000b477:	99                   	cdq    
c000b478:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000b47b:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000b47e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b482:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b486:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b48a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b48e:	31 f0                	xor    eax,esi
c000b490:	31 fa                	xor    edx,edi
c000b492:	09 d0                	or     eax,edx
c000b494:	75 42                	jne    c000b4d8 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b496:	83 fb 01             	cmp    ebx,0x1
c000b499:	75 3d                	jne    c000b4d8 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b49b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b49e:	89 cf                	mov    edi,ecx
c000b4a0:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b4a4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b4aa:	0f af f8             	imul   edi,eax
c000b4ad:	89 c1                	mov    ecx,eax
c000b4af:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000b4b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b4b4:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000b4b7:	40                   	inc    eax
c000b4b8:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000b4bb:	83 f8 50             	cmp    eax,0x50
c000b4be:	0f 85 a8 00 00 00    	jne    c000b56c <VCache::write(unsigned long long, int, void*)+0x18c>
c000b4c4:	83 ec 0c             	sub    esp,0xc
c000b4c7:	55                   	push   ebp
c000b4c8:	e8 47 fe ff ff       	call   c000b314 <VCache::writeWriteBuffer()>
c000b4cd:	83 c4 10             	add    esp,0x10
c000b4d0:	e9 97 00 00 00       	jmp    c000b56c <VCache::write(unsigned long long, int, void*)+0x18c>
c000b4d5:	8d 76 00             	lea    esi,[esi+0x0]
c000b4d8:	83 ec 0c             	sub    esp,0xc
c000b4db:	55                   	push   ebp
c000b4dc:	e8 33 fe ff ff       	call   c000b314 <VCache::writeWriteBuffer()>
c000b4e1:	83 c4 10             	add    esp,0x10
c000b4e4:	83 fb 4f             	cmp    ebx,0x4f
c000b4e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b4ea:	7f 20                	jg     c000b50c <VCache::write(unsigned long long, int, void*)+0x12c>
c000b4ec:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000b4ef:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b4f3:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000b4f6:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000b4f9:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000b4fc:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000b500:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b506:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b508:	eb 62                	jmp    c000b56c <VCache::write(unsigned long long, int, void*)+0x18c>
c000b50a:	66 90                	xchg   ax,ax
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b511:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b515:	53                   	push   ebx
c000b516:	57                   	push   edi
c000b517:	56                   	push   esi
c000b518:	50                   	push   eax
c000b519:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b51c:	83 c4 20             	add    esp,0x20
c000b51f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b524:	89 c6                	mov    esi,eax
c000b526:	74 28                	je     c000b550 <VCache::write(unsigned long long, int, void*)+0x170>
c000b528:	52                   	push   edx
c000b529:	b9 00 10 00 00       	mov    ecx,0x1000
c000b52e:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b532:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b538:	99                   	cdq    
c000b539:	f7 f9                	idiv   ecx
c000b53b:	50                   	push   eax
c000b53c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b540:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b546:	e8 bd 89 00 00       	call   c0013f08 <VAS::unlockPages(unsigned long, int)>
c000b54b:	83 c4 10             	add    esp,0x10
c000b54e:	66 90                	xchg   ax,ax
c000b550:	e8 0b b2 00 00       	call   c0016760 <KeRestorePreemption()>
c000b555:	85 f6                	test   esi,esi
c000b557:	74 4b                	je     c000b5a4 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b559:	83 ec 0c             	sub    esp,0xc
c000b55c:	68 88 32 02 c0       	push   0xc0023288
c000b561:	e8 e8 b9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b566:	83 c4 10             	add    esp,0x10
c000b569:	eb 39                	jmp    c000b5a4 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b56b:	90                   	nop
c000b56c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b571:	74 29                	je     c000b59c <VCache::write(unsigned long long, int, void*)+0x1bc>
c000b573:	50                   	push   eax
c000b574:	b9 00 10 00 00       	mov    ecx,0x1000
c000b579:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b57d:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b583:	99                   	cdq    
c000b584:	f7 f9                	idiv   ecx
c000b586:	50                   	push   eax
c000b587:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b58b:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b591:	e8 72 89 00 00       	call   c0013f08 <VAS::unlockPages(unsigned long, int)>
c000b596:	83 c4 10             	add    esp,0x10
c000b599:	8d 76 00             	lea    esi,[esi+0x0]
c000b59c:	e8 bf b1 00 00       	call   c0016760 <KeRestorePreemption()>
c000b5a1:	31 f6                	xor    esi,esi
c000b5a3:	90                   	nop
c000b5a4:	83 c4 1c             	add    esp,0x1c
c000b5a7:	89 f0                	mov    eax,esi
c000b5a9:	5b                   	pop    ebx
c000b5aa:	5e                   	pop    esi
c000b5ab:	5f                   	pop    edi
c000b5ac:	5d                   	pop    ebp
c000b5ad:	c3                   	ret    

c000b5ae <VCache::read(unsigned long long, int, void*)>:
c000b5ae:	55                   	push   ebp
c000b5af:	bd 00 10 00 00       	mov    ebp,0x1000
c000b5b4:	57                   	push   edi
c000b5b5:	56                   	push   esi
c000b5b6:	53                   	push   ebx
c000b5b7:	83 ec 2c             	sub    esp,0x2c
c000b5ba:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b5be:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000b5c2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000b5c6:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000b5ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5ce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5d2:	e8 61 b1 00 00       	call   c0016738 <KeDisablePreemption()>
c000b5d7:	50                   	push   eax
c000b5d8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b5db:	0f af c6             	imul   eax,esi
c000b5de:	05 ff 0f 00 00       	add    eax,0xfff
c000b5e3:	99                   	cdq    
c000b5e4:	f7 fd                	idiv   ebp
c000b5e6:	50                   	push   eax
c000b5e7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b5eb:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b5f1:	e8 d6 88 00 00       	call   c0013ecc <VAS::canLockPages(unsigned long, int)>
c000b5f6:	83 c4 10             	add    esp,0x10
c000b5f9:	84 c0                	test   al,al
c000b5fb:	89 c7                	mov    edi,eax
c000b5fd:	74 25                	je     c000b624 <VCache::read(unsigned long long, int, void*)+0x76>
c000b5ff:	50                   	push   eax
c000b600:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b603:	0f af c6             	imul   eax,esi
c000b606:	05 ff 0f 00 00       	add    eax,0xfff
c000b60b:	99                   	cdq    
c000b60c:	f7 fd                	idiv   ebp
c000b60e:	50                   	push   eax
c000b60f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b613:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b619:	e8 a8 8c 00 00       	call   c00142c6 <VAS::lockPages(unsigned long, int)>
c000b61e:	83 c4 10             	add    esp,0x10
c000b621:	8d 76 00             	lea    esi,[esi+0x0]
c000b624:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b628:	74 0e                	je     c000b638 <VCache::read(unsigned long long, int, void*)+0x8a>
c000b62a:	83 ec 0c             	sub    esp,0xc
c000b62d:	53                   	push   ebx
c000b62e:	e8 e1 fc ff ff       	call   c000b314 <VCache::writeWriteBuffer()>
c000b633:	83 c4 10             	add    esp,0x10
c000b636:	66 90                	xchg   ax,ax
c000b638:	83 fe 01             	cmp    esi,0x1
c000b63b:	0f 85 fb 00 00 00    	jne    c000b73c <VCache::read(unsigned long long, int, void*)+0x18e>
c000b641:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b644:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000b64b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b64f:	0f 85 e7 00 00 00    	jne    c000b73c <VCache::read(unsigned long long, int, void*)+0x18e>
c000b655:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000b658:	89 ee                	mov    esi,ebp
c000b65a:	f7 de                	neg    esi
c000b65c:	89 f0                	mov    eax,esi
c000b65e:	c1 f8 1f             	sar    eax,0x1f
c000b661:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b665:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000b669:	23 4c 24 0c          	and    ecx,DWORD PTR [esp+0xc]
c000b66d:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b671:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000b675:	89 ca                	mov    edx,ecx
c000b677:	89 f9                	mov    ecx,edi
c000b679:	0f b6 f9             	movzx  edi,cl
c000b67c:	89 f0                	mov    eax,esi
c000b67e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000b682:	74 0c                	je     c000b690 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b684:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000b687:	75 07                	jne    c000b690 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b689:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c000b68c:	74 56                	je     c000b6e4 <VCache::read(unsigned long long, int, void*)+0x136>
c000b68e:	66 90                	xchg   ax,ax
c000b690:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000b694:	83 ec 0c             	sub    esp,0xc
c000b697:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000b69a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000b69e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000b6a1:	8b 37                	mov    esi,DWORD PTR [edi]
c000b6a3:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000b6a6:	55                   	push   ebp
c000b6a7:	52                   	push   edx
c000b6a8:	50                   	push   eax
c000b6a9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b6ad:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000b6b0:	83 c4 20             	add    esp,0x20
c000b6b3:	85 c0                	test   eax,eax
c000b6b5:	89 c5                	mov    ebp,eax
c000b6b7:	74 2b                	je     c000b6e4 <VCache::read(unsigned long long, int, void*)+0x136>
c000b6b9:	83 ec 0c             	sub    esp,0xc
c000b6bc:	68 a0 32 02 c0       	push   0xc00232a0
c000b6c1:	e8 88 b8 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b6c6:	83 c4 10             	add    esp,0x10
c000b6c9:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b6ce:	0f 84 bc 00 00 00    	je     c000b790 <VCache::read(unsigned long long, int, void*)+0x1e2>
c000b6d4:	56                   	push   esi
c000b6d5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b6d8:	05 ff 0f 00 00       	add    eax,0xfff
c000b6dd:	e9 92 00 00 00       	jmp    c000b774 <VCache::read(unsigned long long, int, void*)+0x1c6>
c000b6e2:	66 90                	xchg   ax,ax
c000b6e4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b6e7:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000b6eb:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b6f1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6f4:	8d 70 ff             	lea    esi,[eax-0x1]
c000b6f7:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b6fb:	0f af f1             	imul   esi,ecx
c000b6fe:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000b701:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b703:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b708:	74 26                	je     c000b730 <VCache::read(unsigned long long, int, void*)+0x182>
c000b70a:	51                   	push   ecx
c000b70b:	b9 00 10 00 00       	mov    ecx,0x1000
c000b710:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b713:	05 ff 0f 00 00       	add    eax,0xfff
c000b718:	99                   	cdq    
c000b719:	f7 f9                	idiv   ecx
c000b71b:	50                   	push   eax
c000b71c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b720:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b726:	e8 dd 87 00 00       	call   c0013f08 <VAS::unlockPages(unsigned long, int)>
c000b72b:	83 c4 10             	add    esp,0x10
c000b72e:	66 90                	xchg   ax,ax
c000b730:	e8 2b b0 00 00       	call   c0016760 <KeRestorePreemption()>
c000b735:	31 ed                	xor    ebp,ebp
c000b737:	eb 5f                	jmp    c000b798 <VCache::read(unsigned long long, int, void*)+0x1ea>
c000b739:	8d 76 00             	lea    esi,[esi+0x0]
c000b73c:	83 ec 0c             	sub    esp,0xc
c000b73f:	53                   	push   ebx
c000b740:	e8 bf fb ff ff       	call   c000b304 <VCache::invalidateReadBuffer()>
c000b745:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b748:	5a                   	pop    edx
c000b749:	8b 10                	mov    edx,DWORD PTR [eax]
c000b74b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b74f:	56                   	push   esi
c000b750:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b754:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b758:	50                   	push   eax
c000b759:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000b75c:	83 c4 20             	add    esp,0x20
c000b75f:	89 c5                	mov    ebp,eax
c000b761:	89 f8                	mov    eax,edi
c000b763:	84 c0                	test   al,al
c000b765:	74 29                	je     c000b790 <VCache::read(unsigned long long, int, void*)+0x1e2>
c000b767:	50                   	push   eax
c000b768:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000b76c:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000b772:	66 90                	xchg   ax,ax
c000b774:	b9 00 10 00 00       	mov    ecx,0x1000
c000b779:	99                   	cdq    
c000b77a:	f7 f9                	idiv   ecx
c000b77c:	50                   	push   eax
c000b77d:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b781:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b787:	e8 7c 87 00 00       	call   c0013f08 <VAS::unlockPages(unsigned long, int)>
c000b78c:	83 c4 10             	add    esp,0x10
c000b78f:	90                   	nop
c000b790:	e8 cb af 00 00       	call   c0016760 <KeRestorePreemption()>
c000b795:	8d 76 00             	lea    esi,[esi+0x0]
c000b798:	83 c4 2c             	add    esp,0x2c
c000b79b:	89 e8                	mov    eax,ebp
c000b79d:	5b                   	pop    ebx
c000b79e:	5e                   	pop    esi
c000b79f:	5f                   	pop    edi
c000b7a0:	5d                   	pop    ebp
c000b7a1:	c3                   	ret    

c000b7a2 <Video::putrect(int, int, int, int, unsigned int)>:
c000b7a2:	55                   	push   ebp
c000b7a3:	57                   	push   edi
c000b7a4:	56                   	push   esi
c000b7a5:	53                   	push   ebx
c000b7a6:	83 ec 1c             	sub    esp,0x1c
c000b7a9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b7ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b7b1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000b7b5:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000b7b9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b7bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b7c1:	01 df                	add    edi,ebx
c000b7c3:	39 fb                	cmp    ebx,edi
c000b7c5:	7d 1f                	jge    c000b7e6 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000b7c7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b7cb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000b7cf:	7d 12                	jge    c000b7e3 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000b7d1:	8b 16                	mov    edx,DWORD PTR [esi]
c000b7d3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b7d7:	53                   	push   ebx
c000b7d8:	55                   	push   ebp
c000b7d9:	45                   	inc    ebp
c000b7da:	56                   	push   esi
c000b7db:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b7de:	83 c4 10             	add    esp,0x10
c000b7e1:	eb e8                	jmp    c000b7cb <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000b7e3:	43                   	inc    ebx
c000b7e4:	eb dd                	jmp    c000b7c3 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000b7e6:	83 c4 1c             	add    esp,0x1c
c000b7e9:	5b                   	pop    ebx
c000b7ea:	5e                   	pop    esi
c000b7eb:	5f                   	pop    edi
c000b7ec:	5d                   	pop    ebp
c000b7ed:	c3                   	ret    

c000b7ee <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000b7ee:	55                   	push   ebp
c000b7ef:	57                   	push   edi
c000b7f0:	31 ff                	xor    edi,edi
c000b7f2:	56                   	push   esi
c000b7f3:	53                   	push   ebx
c000b7f4:	83 ec 1c             	sub    esp,0x1c
c000b7f7:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000b7fb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b7ff:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000b806:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000b80b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b80f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b813:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000b817:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000b81a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b81e:	01 f9                	add    ecx,edi
c000b820:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000b824:	7d 2f                	jge    c000b855 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000b826:	31 f6                	xor    esi,esi
c000b828:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b82c:	01 f2                	add    edx,esi
c000b82e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000b832:	7d 1a                	jge    c000b84e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000b834:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b837:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000b83a:	46                   	inc    esi
c000b83b:	51                   	push   ecx
c000b83c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b840:	52                   	push   edx
c000b841:	55                   	push   ebp
c000b842:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b845:	83 c4 10             	add    esp,0x10
c000b848:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b84c:	eb da                	jmp    c000b828 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000b84e:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000b852:	47                   	inc    edi
c000b853:	eb c5                	jmp    c000b81a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000b855:	83 c4 1c             	add    esp,0x1c
c000b858:	5b                   	pop    ebx
c000b859:	5e                   	pop    esi
c000b85a:	5f                   	pop    edi
c000b85b:	5d                   	pop    ebp
c000b85c:	c3                   	ret    
c000b85d:	90                   	nop

c000b85e <Video::blit(unsigned int*, int, int, int, int)>:
c000b85e:	55                   	push   ebp
c000b85f:	ba 00 00 00 00       	mov    edx,0x0
c000b864:	57                   	push   edi
c000b865:	56                   	push   esi
c000b866:	53                   	push   ebx
c000b867:	83 ec 1c             	sub    esp,0x1c
c000b86a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b86e:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000b872:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b876:	85 c0                	test   eax,eax
c000b878:	0f 49 d0             	cmovns edx,eax
c000b87b:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000b882:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000b886:	89 eb                	mov    ebx,ebp
c000b888:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000b88c:	01 ea                	add    edx,ebp
c000b88e:	39 da                	cmp    edx,ebx
c000b890:	7e 54                	jle    c000b8e6 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000b892:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b898:	7c 4c                	jl     c000b8e6 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000b89a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b89e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b8a2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b8a6:	01 c1                	add    ecx,eax
c000b8a8:	39 f9                	cmp    ecx,edi
c000b8aa:	7e 2f                	jle    c000b8db <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000b8ac:	83 c2 04             	add    edx,0x4
c000b8af:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b8b5:	7c 21                	jl     c000b8d8 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000b8b7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b8bb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b8bd:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000b8c0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000b8c4:	55                   	push   ebp
c000b8c5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b8c9:	56                   	push   esi
c000b8ca:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b8cd:	83 c4 10             	add    esp,0x10
c000b8d0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b8d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b8d8:	47                   	inc    edi
c000b8d9:	eb c7                	jmp    c000b8a2 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000b8db:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000b8df:	43                   	inc    ebx
c000b8e0:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000b8e4:	eb a2                	jmp    c000b888 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000b8e6:	83 c4 1c             	add    esp,0x1c
c000b8e9:	5b                   	pop    ebx
c000b8ea:	5e                   	pop    esi
c000b8eb:	5f                   	pop    edi
c000b8ec:	5d                   	pop    ebp
c000b8ed:	c3                   	ret    

c000b8ee <Video::clearScreen(unsigned int)>:
c000b8ee:	57                   	push   edi
c000b8ef:	56                   	push   esi
c000b8f0:	53                   	push   ebx
c000b8f1:	31 db                	xor    ebx,ebx
c000b8f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b8f7:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b8fd:	7e 1f                	jle    c000b91e <Video::clearScreen(unsigned int)+0x30>
c000b8ff:	31 ff                	xor    edi,edi
c000b901:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b907:	7e 12                	jle    c000b91b <Video::clearScreen(unsigned int)+0x2d>
c000b909:	8b 06                	mov    eax,DWORD PTR [esi]
c000b90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b90f:	53                   	push   ebx
c000b910:	57                   	push   edi
c000b911:	47                   	inc    edi
c000b912:	56                   	push   esi
c000b913:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b916:	83 c4 10             	add    esp,0x10
c000b919:	eb e6                	jmp    c000b901 <Video::clearScreen(unsigned int)+0x13>
c000b91b:	43                   	inc    ebx
c000b91c:	eb d9                	jmp    c000b8f7 <Video::clearScreen(unsigned int)+0x9>
c000b91e:	5b                   	pop    ebx
c000b91f:	5e                   	pop    esi
c000b920:	5f                   	pop    edi
c000b921:	c3                   	ret    

c000b922 <Video::putpixel(int, int, unsigned int)>:
c000b922:	c7 44 24 04 d8 32 02 c0 	mov    DWORD PTR [esp+0x4],0xc00232d8
c000b92a:	e9 87 44 00 00       	jmp    c000fdb6 <KePanic(char const*)>
c000b92f:	90                   	nop

c000b930 <Video::readPixelApprox(int, int)>:
c000b930:	83 ec 18             	sub    esp,0x18
c000b933:	68 f9 32 02 c0       	push   0xc00232f9
c000b938:	e8 79 44 00 00       	call   c000fdb6 <KePanic(char const*)>
c000b93d:	31 c0                	xor    eax,eax
c000b93f:	83 c4 1c             	add    esp,0x1c
c000b942:	c3                   	ret    
c000b943:	90                   	nop

c000b944 <Video::Video(char const*)>:
c000b944:	83 ec 0c             	sub    esp,0xc
c000b947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b94b:	83 ec 08             	sub    esp,0x8
c000b94e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b952:	50                   	push   eax
c000b953:	e8 a2 e1 ff ff       	call   c0009afa <Device::Device(char const*)>
c000b958:	83 c4 10             	add    esp,0x10
c000b95b:	ba 9c 33 02 c0       	mov    edx,0xc002339c
c000b960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b964:	89 10                	mov    DWORD PTR [eax],edx
c000b966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b96a:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000b974:	90                   	nop
c000b975:	83 c4 0c             	add    esp,0xc
c000b978:	c3                   	ret    
c000b979:	90                   	nop

c000b97a <Video::~Video()>:
c000b97a:	83 ec 0c             	sub    esp,0xc
c000b97d:	ba 9c 33 02 c0       	mov    edx,0xc002339c
c000b982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b986:	89 10                	mov    DWORD PTR [eax],edx
c000b988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b98c:	83 ec 0c             	sub    esp,0xc
c000b98f:	50                   	push   eax
c000b990:	e8 05 df ff ff       	call   c000989a <Device::~Device()>
c000b995:	83 c4 10             	add    esp,0x10
c000b998:	90                   	nop
c000b999:	83 c4 0c             	add    esp,0xc
c000b99c:	c3                   	ret    
c000b99d:	90                   	nop

c000b99e <Video::~Video()>:
c000b99e:	83 ec 0c             	sub    esp,0xc
c000b9a1:	83 ec 0c             	sub    esp,0xc
c000b9a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9a8:	e8 cd ff ff ff       	call   c000b97a <Video::~Video()>
c000b9ad:	83 c4 10             	add    esp,0x10
c000b9b0:	83 ec 08             	sub    esp,0x8
c000b9b3:	68 64 01 00 00       	push   0x164
c000b9b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9bc:	e8 26 18 00 00       	call   c000d1e7 <operator delete(void*, unsigned long)>
c000b9c1:	83 c4 10             	add    esp,0x10
c000b9c4:	83 c4 0c             	add    esp,0xc
c000b9c7:	c3                   	ret    

c000b9c8 <Video::isMonochrome()>:
c000b9c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9cc:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000b9d2:	c3                   	ret    
c000b9d3:	90                   	nop

c000b9d4 <Video::getWidth()>:
c000b9d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9d8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b9de:	c3                   	ret    
c000b9df:	90                   	nop

c000b9e0 <Video::getHeight()>:
c000b9e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9e4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b9ea:	c3                   	ret    
c000b9eb:	90                   	nop

c000b9ec <Video::drawCursor(int, int, unsigned int*, int)>:
c000b9ec:	55                   	push   ebp
c000b9ed:	57                   	push   edi
c000b9ee:	56                   	push   esi
c000b9ef:	53                   	push   ebx
c000b9f0:	83 ec 2c             	sub    esp,0x2c
c000b9f3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b9f7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000b9fb:	83 f8 01             	cmp    eax,0x1
c000b9fe:	19 c9                	sbb    ecx,ecx
c000ba00:	31 db                	xor    ebx,ebx
c000ba02:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ba06:	89 ce                	mov    esi,ecx
c000ba08:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ba10:	f7 d6                	not    esi
c000ba12:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000ba18:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ba1c:	01 d8                	add    eax,ebx
c000ba1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ba22:	57                   	push   edi
c000ba23:	e8 b8 ff ff ff       	call   c000b9e0 <Video::getHeight()>
c000ba28:	59                   	pop    ecx
c000ba29:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ba2d:	7e 70                	jle    c000ba9f <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ba2f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ba33:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000ba37:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ba3a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ba3e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ba42:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ba49:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba4d:	89 e8                	mov    eax,ebp
c000ba4f:	83 c0 20             	add    eax,0x20
c000ba52:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ba56:	57                   	push   edi
c000ba57:	e8 78 ff ff ff       	call   c000b9d4 <Video::getWidth()>
c000ba5c:	5a                   	pop    edx
c000ba5d:	39 c5                	cmp    ebp,eax
c000ba5f:	7d 34                	jge    c000ba95 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ba61:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ba66:	74 05                	je     c000ba6d <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ba68:	8b 07                	mov    eax,DWORD PTR [edi]
c000ba6a:	56                   	push   esi
c000ba6b:	eb 0d                	jmp    c000ba7a <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ba6d:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ba72:	74 12                	je     c000ba86 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ba74:	8b 07                	mov    eax,DWORD PTR [edi]
c000ba76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba7a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ba7e:	55                   	push   ebp
c000ba7f:	57                   	push   edi
c000ba80:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ba83:	83 c4 10             	add    esp,0x10
c000ba86:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ba8a:	45                   	inc    ebp
c000ba8b:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ba8f:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000ba93:	75 c1                	jne    c000ba56 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ba95:	43                   	inc    ebx
c000ba96:	83 fb 20             	cmp    ebx,0x20
c000ba99:	0f 85 79 ff ff ff    	jne    c000ba18 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ba9f:	83 c4 2c             	add    esp,0x2c
c000baa2:	5b                   	pop    ebx
c000baa3:	5e                   	pop    esi
c000baa4:	5f                   	pop    edi
c000baa5:	5d                   	pop    ebp
c000baa6:	c3                   	ret    
c000baa7:	90                   	nop

c000baa8 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000baa8:	55                   	push   ebp
c000baa9:	57                   	push   edi
c000baaa:	56                   	push   esi
c000baab:	53                   	push   ebx
c000baac:	83 ec 48             	sub    esp,0x48
c000baaf:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000bab3:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000bab7:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000babb:	c1 e0 08             	shl    eax,0x8
c000babe:	01 d0                	add    eax,edx
c000bac0:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000bac4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bac8:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000bacc:	c1 e0 08             	shl    eax,0x8
c000bacf:	01 d0                	add    eax,edx
c000bad1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bad9:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c000bade:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bae2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bae6:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000baed:	50                   	push   eax
c000baee:	e8 7d 3f 00 00       	call   c000fa70 <malloc>
c000baf3:	83 c4 10             	add    esp,0x10
c000baf6:	85 c0                	test   eax,eax
c000baf8:	89 c5                	mov    ebp,eax
c000bafa:	75 10                	jne    c000bb0c <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c000bafc:	83 ec 0c             	sub    esp,0xc
c000baff:	68 24 33 02 c0       	push   0xc0023324
c000bb04:	e8 ad 42 00 00       	call   c000fdb6 <KePanic(char const*)>
c000bb09:	83 c4 10             	add    esp,0x10
c000bb0c:	52                   	push   edx
c000bb0d:	bf 12 00 00 00       	mov    edi,0x12
c000bb12:	52                   	push   edx
c000bb13:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bb17:	50                   	push   eax
c000bb18:	68 34 33 02 c0       	push   0xc0023334
c000bb1d:	e8 2c b4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000bb22:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000bb25:	83 e0 20             	and    eax,0x20
c000bb28:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000bb2c:	85 c0                	test   eax,eax
c000bb2e:	59                   	pop    ecx
c000bb2f:	0f 94 c0             	sete   al
c000bb32:	0f b6 c0             	movzx  eax,al
c000bb35:	5e                   	pop    esi
c000bb36:	50                   	push   eax
c000bb37:	68 3e 33 02 c0       	push   0xc002333e
c000bb3c:	e8 0d b4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000bb41:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000bb45:	83 c4 10             	add    esp,0x10
c000bb48:	85 c0                	test   eax,eax
c000bb4a:	89 c2                	mov    edx,eax
c000bb4c:	74 11                	je     c000bb5f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000bb4e:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c000bb52:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000bb56:	c1 ff 03             	sar    edi,0x3
c000bb59:	0f af f9             	imul   edi,ecx
c000bb5c:	83 c7 12             	add    edi,0x12
c000bb5f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000bb64:	74 07                	je     c000bb6d <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c000bb66:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000bb6b:	75 12                	jne    c000bb7f <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c000bb6d:	83 ec 0c             	sub    esp,0xc
c000bb70:	68 4c 33 02 c0       	push   0xc002334c
c000bb75:	e8 d4 b3 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000bb7a:	e9 aa 02 00 00       	jmp    c000be29 <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c000bb7f:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000bb83:	83 f9 02             	cmp    ecx,0x2
c000bb86:	74 0e                	je     c000bb96 <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c000bb88:	83 f9 0a             	cmp    ecx,0xa
c000bb8b:	0f 84 d1 00 00 00    	je     c000bc62 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c000bb91:	e9 7e 02 00 00       	jmp    c000be14 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c000bb96:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bb9b:	75 0e                	jne    c000bbab <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000bb9d:	84 d2                	test   dl,dl
c000bb9f:	75 0a                	jne    c000bbab <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000bba1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bba4:	83 e8 18             	sub    eax,0x18
c000bba7:	a8 f7                	test   al,0xf7
c000bba9:	74 0d                	je     c000bbb8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c000bbab:	83 ec 0c             	sub    esp,0xc
c000bbae:	68 61 33 02 c0       	push   0xc0023361
c000bbb3:	e9 64 02 00 00       	jmp    c000be1c <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000bbb8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bbc0:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000bbc5:	31 c0                	xor    eax,eax
c000bbc7:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000bbcb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000bbd3:	89 c6                	mov    esi,eax
c000bbd5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000bbda:	75 15                	jne    c000bbf1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000bbdc:	99                   	cdq    
c000bbdd:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000bbe1:	85 d2                	test   edx,edx
c000bbe3:	75 0c                	jne    c000bbf1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000bbe5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000bbe9:	29 c6                	sub    esi,eax
c000bbeb:	4e                   	dec    esi
c000bbec:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c000bbf1:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bbf5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bbfd:	75 0c                	jne    c000bc0b <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c000bbff:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c000bc04:	c1 e2 18             	shl    edx,0x18
c000bc07:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc0b:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c000bc10:	8d 46 01             	lea    eax,[esi+0x1]
c000bc13:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000bc17:	c1 e1 10             	shl    ecx,0x10
c000bc1a:	89 ca                	mov    edx,ecx
c000bc1c:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c000bc21:	c1 e1 08             	shl    ecx,0x8
c000bc24:	09 d1                	or     ecx,edx
c000bc26:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000bc2a:	09 d1                	or     ecx,edx
c000bc2c:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000bc30:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c000bc34:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000bc38:	c1 fa 03             	sar    edx,0x3
c000bc3b:	01 d7                	add    edi,edx
c000bc3d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bc41:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c000bc45:	7e 04                	jle    c000bc4b <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c000bc47:	89 c6                	mov    esi,eax
c000bc49:	eb 8a                	jmp    c000bbd5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c000bc4b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bc4f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bc53:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000bc57:	0f 8f 6e ff ff ff    	jg     c000bbcb <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c000bc5d:	e9 ce 01 00 00       	jmp    c000be30 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bc62:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bc67:	75 0e                	jne    c000bc77 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000bc69:	85 c0                	test   eax,eax
c000bc6b:	75 0a                	jne    c000bc77 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000bc6d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bc70:	83 e8 18             	sub    eax,0x18
c000bc73:	a8 f7                	test   al,0xf7
c000bc75:	74 0d                	je     c000bc84 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c000bc77:	83 ec 0c             	sub    esp,0xc
c000bc7a:	68 6f 33 02 c0       	push   0xc002336f
c000bc7f:	e9 98 01 00 00       	jmp    c000be1c <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000bc84:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000bc8c:	31 c9                	xor    ecx,ecx
c000bc8e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bc96:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c000bc9a:	0f 8d 90 01 00 00    	jge    c000be30 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bca0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bca4:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c000bca8:	0f 8e 82 01 00 00    	jle    c000be30 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bcae:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000bcb2:	8d 77 01             	lea    esi,[edi+0x1]
c000bcb5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bcb9:	83 fa 7f             	cmp    edx,0x7f
c000bcbc:	89 d0                	mov    eax,edx
c000bcbe:	0f 8e a3 00 00 00    	jle    c000bd67 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c000bcc4:	83 e0 7f             	and    eax,0x7f
c000bcc7:	31 d2                	xor    edx,edx
c000bcc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bccd:	40                   	inc    eax
c000bcce:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bcd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bcd6:	75 08                	jne    c000bce0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c000bcd8:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c000bcdd:	c1 e2 18             	shl    edx,0x18
c000bce0:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c000bce5:	c1 e0 10             	shl    eax,0x10
c000bce8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bcec:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c000bcf1:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000bcf5:	c1 e0 08             	shl    eax,0x8
c000bcf8:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000bcfc:	09 f8                	or     eax,edi
c000bcfe:	31 ff                	xor    edi,edi
c000bd00:	09 d0                	or     eax,edx
c000bd02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd06:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000bd0b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd0f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000bd14:	75 1d                	jne    c000bd33 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000bd16:	89 c8                	mov    eax,ecx
c000bd18:	99                   	cdq    
c000bd19:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000bd1d:	85 d2                	test   edx,edx
c000bd1f:	75 12                	jne    c000bd33 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000bd21:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bd25:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000bd29:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000bd2d:	49                   	dec    ecx
c000bd2e:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000bd33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bd37:	8d 51 01             	lea    edx,[ecx+0x1]
c000bd3a:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c000bd3e:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000bd42:	8d 47 01             	lea    eax,[edi+0x1]
c000bd45:	7e 06                	jle    c000bd4d <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c000bd47:	89 c7                	mov    edi,eax
c000bd49:	89 d1                	mov    ecx,edx
c000bd4b:	eb c2                	jmp    c000bd0f <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c000bd4d:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bd51:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000bd55:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000bd59:	c1 f8 03             	sar    eax,0x3
c000bd5c:	01 c6                	add    esi,eax
c000bd5e:	89 d1                	mov    ecx,edx
c000bd60:	89 f7                	mov    edi,esi
c000bd62:	e9 2f ff ff ff       	jmp    c000bc96 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c000bd67:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bd6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd73:	40                   	inc    eax
c000bd74:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd78:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000bd7d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bd81:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000bd86:	75 1d                	jne    c000bda5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000bd88:	89 c8                	mov    eax,ecx
c000bd8a:	99                   	cdq    
c000bd8b:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000bd8f:	85 d2                	test   edx,edx
c000bd91:	75 12                	jne    c000bda5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000bd93:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bd97:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000bd9b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000bd9f:	49                   	dec    ecx
c000bda0:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000bda5:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bda9:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000bdb1:	75 0c                	jne    c000bdbf <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c000bdb3:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c000bdb8:	c1 e7 18             	shl    edi,0x18
c000bdbb:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000bdbf:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000bdc4:	8d 51 01             	lea    edx,[ecx+0x1]
c000bdc7:	c1 e0 10             	shl    eax,0x10
c000bdca:	89 c7                	mov    edi,eax
c000bdcc:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c000bdd1:	c1 e0 08             	shl    eax,0x8
c000bdd4:	09 f8                	or     eax,edi
c000bdd6:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000bdda:	09 f8                	or     eax,edi
c000bddc:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000bde0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000bde4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000bde8:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bdec:	c1 f8 03             	sar    eax,0x3
c000bdef:	01 c6                	add    esi,eax
c000bdf1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bdf5:	40                   	inc    eax
c000bdf6:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c000bdfa:	7e 0b                	jle    c000be07 <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c000bdfc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000be00:	89 d1                	mov    ecx,edx
c000be02:	e9 7a ff ff ff       	jmp    c000bd81 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c000be07:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000be0b:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000be0f:	e9 4a ff ff ff       	jmp    c000bd5e <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c000be14:	50                   	push   eax
c000be15:	50                   	push   eax
c000be16:	51                   	push   ecx
c000be17:	68 7e 33 02 c0       	push   0xc002337e
c000be1c:	e8 2d b1 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000be21:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be24:	e8 57 3c 00 00       	call   c000fa80 <free>
c000be29:	83 c4 10             	add    esp,0x10
c000be2c:	31 ed                	xor    ebp,ebp
c000be2e:	eb 14                	jmp    c000be44 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c000be30:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000be34:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000be38:	89 18                	mov    DWORD PTR [eax],ebx
c000be3a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000be3e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000be42:	89 18                	mov    DWORD PTR [eax],ebx
c000be44:	83 c4 3c             	add    esp,0x3c
c000be47:	89 e8                	mov    eax,ebp
c000be49:	5b                   	pop    ebx
c000be4a:	5e                   	pop    esi
c000be4b:	5f                   	pop    edi
c000be4c:	5d                   	pop    ebp
c000be4d:	c3                   	ret    

c000be4e <Video::putTGA(int, int, unsigned char*, int)>:
c000be4e:	55                   	push   ebp
c000be4f:	57                   	push   edi
c000be50:	56                   	push   esi
c000be51:	53                   	push   ebx
c000be52:	83 ec 28             	sub    esp,0x28
c000be55:	8d 44 24 18          	lea    eax,[esp+0x18]
c000be59:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000be5d:	50                   	push   eax
c000be5e:	8d 44 24 18          	lea    eax,[esp+0x18]
c000be62:	50                   	push   eax
c000be63:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000be67:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000be6b:	55                   	push   ebp
c000be6c:	e8 37 fc ff ff       	call   c000baa8 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000be71:	83 c4 20             	add    esp,0x20
c000be74:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000be78:	85 c0                	test   eax,eax
c000be7a:	74 3b                	je     c000beb7 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000be7c:	89 c6                	mov    esi,eax
c000be7e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000be82:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000be86:	39 d8                	cmp    eax,ebx
c000be88:	7e 2d                	jle    c000beb7 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000be8a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000be8e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000be92:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000be96:	39 f8                	cmp    eax,edi
c000be98:	7e 1a                	jle    c000beb4 <Video::putTGA(int, int, unsigned char*, int)+0x66>
c000be9a:	83 c6 04             	add    esi,0x4
c000be9d:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000bea0:	85 c0                	test   eax,eax
c000bea2:	79 0d                	jns    c000beb1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000bea4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bea7:	50                   	push   eax
c000bea8:	53                   	push   ebx
c000bea9:	57                   	push   edi
c000beaa:	55                   	push   ebp
c000beab:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000beae:	83 c4 10             	add    esp,0x10
c000beb1:	47                   	inc    edi
c000beb2:	eb da                	jmp    c000be8e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000beb4:	43                   	inc    ebx
c000beb5:	eb c7                	jmp    c000be7e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000beb7:	83 c4 1c             	add    esp,0x1c
c000beba:	5b                   	pop    ebx
c000bebb:	5e                   	pop    esi
c000bebc:	5f                   	pop    edi
c000bebd:	5d                   	pop    ebp
c000bebe:	c3                   	ret    
c000bebf:	90                   	nop

c000bec0 <ACPI::close(int, int, void*)>:
c000bec0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bec5:	c3                   	ret    
c000bec6:	66 90                	xchg   ax,ax

c000bec8 <loadACPITables(unsigned char*)>:
c000bec8:	57                   	push   edi
c000bec9:	56                   	push   esi
c000beca:	53                   	push   ebx
c000becb:	83 ec 60             	sub    esp,0x60
c000bece:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000bed3:	0f 84 43 02 00 00    	je     c000c11c <loadACPITables(unsigned char*)+0x254>
c000bed9:	a0 80 bd 02 c0       	mov    al,ds:0xc002bd80
c000bede:	0f b6 c0             	movzx  eax,al
c000bee1:	85 c0                	test   eax,eax
c000bee3:	74 7b                	je     c000bf60 <loadACPITables(unsigned char*)+0x98>
c000bee5:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bee9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000beed:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bef1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bef4:	83 e8 24             	sub    eax,0x24
c000bef7:	c1 e8 03             	shr    eax,0x3
c000befa:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000befe:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000bf06:	66 90                	xchg   ax,ax
c000bf08:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bf0c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000bf10:	0f 8d ba 00 00 00    	jge    c000bfd0 <loadACPITables(unsigned char*)+0x108>
c000bf16:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bf1a:	83 c0 24             	add    eax,0x24
c000bf1d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bf21:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bf25:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000bf29:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bf2d:	c1 e0 03             	shl    eax,0x3
c000bf30:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000bf34:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000bf38:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000bf3b:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf3d:	89 c1                	mov    ecx,eax
c000bf3f:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000bf44:	8d 50 01             	lea    edx,[eax+0x1]
c000bf47:	89 15 60 bb 02 c0    	mov    DWORD PTR ds:0xc002bb60,edx
c000bf4d:	89 ca                	mov    edx,ecx
c000bf4f:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000bf56:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000bf5b:	eb ab                	jmp    c000bf08 <loadACPITables(unsigned char*)+0x40>
c000bf5d:	8d 76 00             	lea    esi,[esi+0x0]
c000bf60:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bf64:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bf68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bf6f:	83 e8 24             	sub    eax,0x24
c000bf72:	c1 e8 02             	shr    eax,0x2
c000bf75:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000bf79:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000bf81:	8d 76 00             	lea    esi,[esi+0x0]
c000bf84:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000bf88:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000bf8c:	7d 42                	jge    c000bfd0 <loadACPITables(unsigned char*)+0x108>
c000bf8e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bf92:	83 c0 24             	add    eax,0x24
c000bf95:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000bf99:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf9d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfa1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000bfa5:	c1 e0 02             	shl    eax,0x2
c000bfa8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000bfac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bfb0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bfb2:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000bfb7:	8d 50 01             	lea    edx,[eax+0x1]
c000bfba:	89 15 60 bb 02 c0    	mov    DWORD PTR ds:0xc002bb60,edx
c000bfc0:	89 ca                	mov    edx,ecx
c000bfc2:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000bfc9:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000bfce:	eb b4                	jmp    c000bf84 <loadACPITables(unsigned char*)+0xbc>
c000bfd0:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000bfd8:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000bfdd:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000bfe1:	0f 8d 39 01 00 00    	jge    c000c120 <loadACPITables(unsigned char*)+0x258>
c000bfe7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000bfeb:	8b 04 c5 84 bb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd447c]
c000bff2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bff6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bffa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bffe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c002:	25 ff 0f 00 00       	and    eax,0xfff
c000c007:	89 c6                	mov    esi,eax
c000c009:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c00f:	83 ec 0c             	sub    esp,0xc
c000c012:	6a 01                	push   0x1
c000c014:	e8 5c 71 00 00       	call   c0013175 <Virt::allocateKernelVirtualPages(int)>
c000c019:	83 c4 10             	add    esp,0x10
c000c01c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c020:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c026:	83 ec 0c             	sub    esp,0xc
c000c029:	6a 01                	push   0x1
c000c02b:	6a 01                	push   0x1
c000c02d:	50                   	push   eax
c000c02e:	52                   	push   edx
c000c02f:	53                   	push   ebx
c000c030:	e8 13 7a 00 00       	call   c0013a48 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c035:	83 c4 20             	add    esp,0x20
c000c038:	09 f0                	or     eax,esi
c000c03a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c03e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c042:	c1 e0 03             	shl    eax,0x3
c000c045:	05 80 bb 02 c0       	add    eax,0xc002bb80
c000c04a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c04e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c052:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c056:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000c05e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c062:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c066:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c06a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c06e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c072:	89 c6                	mov    esi,eax
c000c074:	89 d7                	mov    edi,edx
c000c076:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c078:	89 c8                	mov    eax,ecx
c000c07a:	89 fa                	mov    edx,edi
c000c07c:	89 f3                	mov    ebx,esi
c000c07e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c082:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c086:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c08e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c091:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c095:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c099:	05 00 10 00 00       	add    eax,0x1000
c000c09e:	c1 e8 0c             	shr    eax,0xc
c000c0a1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c0a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c0ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0b1:	25 ff 0f 00 00       	and    eax,0xfff
c000c0b6:	89 c6                	mov    esi,eax
c000c0b8:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c0be:	83 ec 0c             	sub    esp,0xc
c000c0c1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c0c5:	e8 ab 70 00 00       	call   c0013175 <Virt::allocateKernelVirtualPages(int)>
c000c0ca:	83 c4 10             	add    esp,0x10
c000c0cd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c0d1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c0d7:	83 ec 0c             	sub    esp,0xc
c000c0da:	6a 01                	push   0x1
c000c0dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0e0:	50                   	push   eax
c000c0e1:	52                   	push   edx
c000c0e2:	53                   	push   ebx
c000c0e3:	e8 60 79 00 00       	call   c0013a48 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c0e8:	83 c4 20             	add    esp,0x20
c000c0eb:	09 f0                	or     eax,esi
c000c0ed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c0f5:	83 ec 0c             	sub    esp,0xc
c000c0f8:	50                   	push   eax
c000c0f9:	e8 75 73 00 00       	call   c0013473 <Virt::freeKernelVirtualPages(unsigned long)>
c000c0fe:	83 c4 10             	add    esp,0x10
c000c101:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c105:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c109:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000c110:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000c115:	e9 be fe ff ff       	jmp    c000bfd8 <loadACPITables(unsigned char*)+0x110>
c000c11a:	66 90                	xchg   ax,ax
c000c11c:	90                   	nop
c000c11d:	8d 76 00             	lea    esi,[esi+0x0]
c000c120:	83 c4 60             	add    esp,0x60
c000c123:	5b                   	pop    ebx
c000c124:	5e                   	pop    esi
c000c125:	5f                   	pop    edi
c000c126:	c3                   	ret    
c000c127:	90                   	nop

c000c128 <findRSDT(unsigned char*)>:
c000c128:	57                   	push   edi
c000c129:	56                   	push   esi
c000c12a:	53                   	push   ebx
c000c12b:	83 ec 50             	sub    esp,0x50
c000c12e:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c133:	85 c0                	test   eax,eax
c000c135:	75 0d                	jne    c000c144 <findRSDT(unsigned char*)+0x1c>
c000c137:	b8 00 00 00 00       	mov    eax,0x0
c000c13c:	e9 2b 01 00 00       	jmp    c000c26c <findRSDT(unsigned char*)+0x144>
c000c141:	8d 76 00             	lea    esi,[esi+0x0]
c000c144:	89 e0                	mov    eax,esp
c000c146:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c14a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c14e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c152:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000c15a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c15e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c162:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c166:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000c16a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c16e:	89 c6                	mov    esi,eax
c000c170:	89 d7                	mov    edi,edx
c000c172:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c174:	89 c8                	mov    eax,ecx
c000c176:	89 fa                	mov    edx,edi
c000c178:	89 f3                	mov    ebx,esi
c000c17a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000c17e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c182:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c186:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000c18a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000c18e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000c196:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c19a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c19e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1a6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c1aa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c1ae:	25 ff 0f 00 00       	and    eax,0xfff
c000c1b3:	89 c6                	mov    esi,eax
c000c1b5:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c1bb:	83 ec 0c             	sub    esp,0xc
c000c1be:	6a 02                	push   0x2
c000c1c0:	e8 b0 6f 00 00       	call   c0013175 <Virt::allocateKernelVirtualPages(int)>
c000c1c5:	83 c4 10             	add    esp,0x10
c000c1c8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c1cc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c1d2:	83 ec 0c             	sub    esp,0xc
c000c1d5:	6a 01                	push   0x1
c000c1d7:	6a 02                	push   0x2
c000c1d9:	50                   	push   eax
c000c1da:	52                   	push   edx
c000c1db:	53                   	push   ebx
c000c1dc:	e8 67 78 00 00       	call   c0013a48 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c1e1:	83 c4 20             	add    esp,0x20
c000c1e4:	09 f0                	or     eax,esi
c000c1e6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c1ea:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1ee:	25 ff 0f 00 00       	and    eax,0xfff
c000c1f3:	89 c6                	mov    esi,eax
c000c1f5:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c1fb:	83 ec 0c             	sub    esp,0xc
c000c1fe:	6a 02                	push   0x2
c000c200:	e8 70 6f 00 00       	call   c0013175 <Virt::allocateKernelVirtualPages(int)>
c000c205:	83 c4 10             	add    esp,0x10
c000c208:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c20c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c212:	83 ec 0c             	sub    esp,0xc
c000c215:	6a 01                	push   0x1
c000c217:	6a 02                	push   0x2
c000c219:	50                   	push   eax
c000c21a:	52                   	push   edx
c000c21b:	53                   	push   ebx
c000c21c:	e8 27 78 00 00       	call   c0013a48 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c221:	83 c4 20             	add    esp,0x20
c000c224:	09 f0                	or     eax,esi
c000c226:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c22a:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c22f:	85 c0                	test   eax,eax
c000c231:	75 11                	jne    c000c244 <findRSDT(unsigned char*)+0x11c>
c000c233:	c6 05 80 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bd80,0x0
c000c23a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c23e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c242:	eb 24                	jmp    c000c268 <findRSDT(unsigned char*)+0x140>
c000c244:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c249:	83 f8 02             	cmp    eax,0x2
c000c24c:	75 12                	jne    c000c260 <findRSDT(unsigned char*)+0x138>
c000c24e:	c6 05 80 bd 02 c0 01 	mov    BYTE PTR ds:0xc002bd80,0x1
c000c255:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c259:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c25d:	eb 09                	jmp    c000c268 <findRSDT(unsigned char*)+0x140>
c000c25f:	90                   	nop
c000c260:	b8 00 00 00 00       	mov    eax,0x0
c000c265:	eb 05                	jmp    c000c26c <findRSDT(unsigned char*)+0x144>
c000c267:	90                   	nop
c000c268:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c26c:	83 c4 50             	add    esp,0x50
c000c26f:	5b                   	pop    ebx
c000c270:	5e                   	pop    esi
c000c271:	5f                   	pop    edi
c000c272:	c3                   	ret    
c000c273:	90                   	nop

c000c274 <findDataTable(unsigned char*, char*)>:
c000c274:	83 ec 1c             	sub    esp,0x1c
c000c277:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000c27c:	75 0a                	jne    c000c288 <findDataTable(unsigned char*, char*)+0x14>
c000c27e:	b8 00 00 00 00       	mov    eax,0x0
c000c283:	eb 5f                	jmp    c000c2e4 <findDataTable(unsigned char*, char*)+0x70>
c000c285:	8d 76 00             	lea    esi,[esi+0x0]
c000c288:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c290:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c295:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000c299:	7d 41                	jge    c000c2dc <findDataTable(unsigned char*, char*)+0x68>
c000c29b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c29f:	c1 e0 03             	shl    eax,0x3
c000c2a2:	05 80 bb 02 c0       	add    eax,0xc002bb80
c000c2a7:	83 ec 04             	sub    esp,0x4
c000c2aa:	6a 04                	push   0x4
c000c2ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2b0:	50                   	push   eax
c000c2b1:	e8 ca 40 ff ff       	call   c0000380 <memcmp>
c000c2b6:	83 c4 10             	add    esp,0x10
c000c2b9:	85 c0                	test   eax,eax
c000c2bb:	0f 94 c0             	sete   al
c000c2be:	0f b6 c0             	movzx  eax,al
c000c2c1:	85 c0                	test   eax,eax
c000c2c3:	74 0f                	je     c000c2d4 <findDataTable(unsigned char*, char*)+0x60>
c000c2c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c2c9:	8b 04 c5 84 bb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd447c]
c000c2d0:	eb 12                	jmp    c000c2e4 <findDataTable(unsigned char*, char*)+0x70>
c000c2d2:	66 90                	xchg   ax,ax
c000c2d4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000c2d9:	eb b5                	jmp    c000c290 <findDataTable(unsigned char*, char*)+0x1c>
c000c2db:	90                   	nop
c000c2dc:	b8 00 00 00 00       	mov    eax,0x0
c000c2e1:	8d 76 00             	lea    esi,[esi+0x0]
c000c2e4:	83 c4 1c             	add    esp,0x1c
c000c2e7:	c3                   	ret    

c000c2e8 <scanMADT()>:
c000c2e8:	53                   	push   ebx
c000c2e9:	83 ec 38             	sub    esp,0x38
c000c2ec:	c7 05 88 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd88,0x0
c000c2f6:	c7 05 84 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd84,0x0
c000c300:	e8 05 cf 00 00       	call   c001920a <HalFindRSDP()>
c000c305:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c000c30a:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c30f:	85 c0                	test   eax,eax
c000c311:	0f 84 11 04 00 00    	je     c000c728 <scanMADT()+0x440>
c000c317:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c31c:	83 ec 0c             	sub    esp,0xc
c000c31f:	50                   	push   eax
c000c320:	e8 03 fe ff ff       	call   c000c128 <findRSDT(unsigned char*)>
c000c325:	83 c4 10             	add    esp,0x10
c000c328:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c000c32d:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c332:	85 c0                	test   eax,eax
c000c334:	0f 84 f2 03 00 00    	je     c000c72c <scanMADT()+0x444>
c000c33a:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c33f:	83 ec 0c             	sub    esp,0xc
c000c342:	50                   	push   eax
c000c343:	e8 80 fb ff ff       	call   c000bec8 <loadACPITables(unsigned char*)>
c000c348:	83 c4 10             	add    esp,0x10
c000c34b:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c350:	83 ec 08             	sub    esp,0x8
c000c353:	68 e0 33 02 c0       	push   0xc00233e0
c000c358:	50                   	push   eax
c000c359:	e8 16 ff ff ff       	call   c000c274 <findDataTable(unsigned char*, char*)>
c000c35e:	83 c4 10             	add    esp,0x10
c000c361:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c365:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000c36a:	0f 84 c0 03 00 00    	je     c000c730 <scanMADT()+0x448>
c000c370:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c378:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c37c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c37f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000c383:	0f 87 af 03 00 00    	ja     c000c738 <scanMADT()+0x450>
c000c389:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000c391:	0f 87 a1 03 00 00    	ja     c000c738 <scanMADT()+0x450>
c000c397:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c39b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c39f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c3a3:	8d 50 01             	lea    edx,[eax+0x1]
c000c3a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c3ae:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c3b2:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000c3b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c3ba:	8d 50 01             	lea    edx,[eax+0x1]
c000c3bd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3c1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c3c5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c3c9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000c3cd:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000c3d2:	83 f8 02             	cmp    eax,0x2
c000c3d5:	0f 86 59 03 00 00    	jbe    c000c734 <scanMADT()+0x44c>
c000c3db:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c3e0:	85 c0                	test   eax,eax
c000c3e2:	75 58                	jne    c000c43c <scanMADT()+0x154>
c000c3e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c3e8:	8d 50 01             	lea    edx,[eax+0x1]
c000c3eb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ef:	8a 15 80 bf 02 c0    	mov    dl,BYTE PTR ds:0xc002bf80
c000c3f5:	0f b6 d2             	movzx  edx,dl
c000c3f8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c3fc:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c400:	88 82 c0 bf 02 c0    	mov    BYTE PTR [edx-0x3ffd4040],al
c000c406:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c40a:	8d 50 01             	lea    edx,[eax+0x1]
c000c40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c411:	8a 15 80 bf 02 c0    	mov    dl,BYTE PTR ds:0xc002bf80
c000c417:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c41a:	88 0d 80 bf 02 c0    	mov    BYTE PTR ds:0xc002bf80,cl
c000c420:	0f b6 d2             	movzx  edx,dl
c000c423:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c427:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c42b:	88 82 a0 bf 02 c0    	mov    BYTE PTR [edx-0x3ffd4060],al
c000c431:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c436:	e9 d9 02 00 00       	jmp    c000c714 <scanMADT()+0x42c>
c000c43b:	90                   	nop
c000c43c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c441:	83 f8 01             	cmp    eax,0x1
c000c444:	0f 85 1a 01 00 00    	jne    c000c564 <scanMADT()+0x27c>
c000c44a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c44e:	8d 50 01             	lea    edx,[eax+0x1]
c000c451:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c455:	8a 15 40 be 02 c0    	mov    dl,BYTE PTR ds:0xc002be40
c000c45b:	0f b6 d2             	movzx  edx,dl
c000c45e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c462:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c466:	88 82 60 be 02 c0    	mov    BYTE PTR [edx-0x3ffd41a0],al
c000c46c:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000c471:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c475:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c479:	01 d0                	add    eax,edx
c000c47b:	83 c0 2c             	add    eax,0x2c
c000c47e:	8a 00                	mov    al,BYTE PTR [eax]
c000c480:	0f b6 d0             	movzx  edx,al
c000c483:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c487:	8d 48 01             	lea    ecx,[eax+0x1]
c000c48a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c48e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c492:	0f b6 c0             	movzx  eax,al
c000c495:	c1 e0 08             	shl    eax,0x8
c000c498:	89 d1                	mov    ecx,edx
c000c49a:	09 c1                	or     ecx,eax
c000c49c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4a0:	8d 50 02             	lea    edx,[eax+0x2]
c000c4a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c4a7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c4ab:	0f b6 c0             	movzx  eax,al
c000c4ae:	c1 e0 10             	shl    eax,0x10
c000c4b1:	09 c1                	or     ecx,eax
c000c4b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4b7:	8d 50 03             	lea    edx,[eax+0x3]
c000c4ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c4be:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c4c2:	0f b6 c0             	movzx  eax,al
c000c4c5:	c1 e0 18             	shl    eax,0x18
c000c4c8:	09 c1                	or     ecx,eax
c000c4ca:	89 ca                	mov    edx,ecx
c000c4cc:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c4d1:	0f b6 c0             	movzx  eax,al
c000c4d4:	89 14 85 80 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4180],edx
c000c4db:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c4e0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c4e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4e8:	01 d0                	add    eax,edx
c000c4ea:	83 c0 2c             	add    eax,0x2c
c000c4ed:	8a 00                	mov    al,BYTE PTR [eax]
c000c4ef:	0f b6 d0             	movzx  edx,al
c000c4f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4f6:	8d 48 01             	lea    ecx,[eax+0x1]
c000c4f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c4fd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c501:	0f b6 c0             	movzx  eax,al
c000c504:	c1 e0 08             	shl    eax,0x8
c000c507:	89 d1                	mov    ecx,edx
c000c509:	09 c1                	or     ecx,eax
c000c50b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c50f:	8d 50 02             	lea    edx,[eax+0x2]
c000c512:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c516:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c51a:	0f b6 c0             	movzx  eax,al
c000c51d:	c1 e0 10             	shl    eax,0x10
c000c520:	09 c1                	or     ecx,eax
c000c522:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c526:	8d 50 03             	lea    edx,[eax+0x3]
c000c529:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c52d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c531:	0f b6 c0             	movzx  eax,al
c000c534:	c1 e0 18             	shl    eax,0x18
c000c537:	09 c1                	or     ecx,eax
c000c539:	89 ca                	mov    edx,ecx
c000c53b:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c540:	0f b6 c0             	movzx  eax,al
c000c543:	89 14 85 00 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4100],edx
c000c54a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c54f:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c554:	83 c0 01             	add    eax,0x1
c000c557:	a2 40 be 02 c0       	mov    ds:0xc002be40,al
c000c55c:	e9 b3 01 00 00       	jmp    c000c714 <scanMADT()+0x42c>
c000c561:	8d 76 00             	lea    esi,[esi+0x0]
c000c564:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c569:	83 f8 02             	cmp    eax,0x2
c000c56c:	0f 85 ea 00 00 00    	jne    c000c65c <scanMADT()+0x374>
c000c572:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c576:	8d 50 01             	lea    edx,[eax+0x1]
c000c579:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c57d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c581:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c585:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000c589:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c58d:	8d 50 01             	lea    edx,[eax+0x1]
c000c590:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c594:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c598:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c59c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000c5a0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c5a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5a8:	01 d0                	add    eax,edx
c000c5aa:	83 c0 2c             	add    eax,0x2c
c000c5ad:	8a 00                	mov    al,BYTE PTR [eax]
c000c5af:	0f b6 d0             	movzx  edx,al
c000c5b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5b6:	8d 48 01             	lea    ecx,[eax+0x1]
c000c5b9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5bd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c5c1:	0f b6 c0             	movzx  eax,al
c000c5c4:	c1 e0 08             	shl    eax,0x8
c000c5c7:	89 d1                	mov    ecx,edx
c000c5c9:	09 c1                	or     ecx,eax
c000c5cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5cf:	8d 50 02             	lea    edx,[eax+0x2]
c000c5d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5d6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5da:	0f b6 c0             	movzx  eax,al
c000c5dd:	c1 e0 10             	shl    eax,0x10
c000c5e0:	09 c1                	or     ecx,eax
c000c5e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5e6:	8d 50 03             	lea    edx,[eax+0x3]
c000c5e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5ed:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5f1:	0f b6 c0             	movzx  eax,al
c000c5f4:	c1 e0 18             	shl    eax,0x18
c000c5f7:	09 c8                	or     eax,ecx
c000c5f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c5fd:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c602:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c606:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c60a:	01 d0                	add    eax,edx
c000c60c:	83 c0 2c             	add    eax,0x2c
c000c60f:	8a 00                	mov    al,BYTE PTR [eax]
c000c611:	0f b6 d0             	movzx  edx,al
c000c614:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c618:	8d 48 01             	lea    ecx,[eax+0x1]
c000c61b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c61f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c623:	0f b6 c0             	movzx  eax,al
c000c626:	c1 e0 08             	shl    eax,0x8
c000c629:	09 d0                	or     eax,edx
c000c62b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000c630:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c635:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	88 90 e8 59 02 c0    	mov    BYTE PTR [eax-0x3ffda618],dl
c000c644:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c649:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000c64e:	66 89 94 00 20 be 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd41e0],dx
c000c656:	e9 b9 00 00 00       	jmp    c000c714 <scanMADT()+0x42c>
c000c65b:	90                   	nop
c000c65c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c661:	83 f8 04             	cmp    eax,0x4
c000c664:	0f 85 9a 00 00 00    	jne    c000c704 <scanMADT()+0x41c>
c000c66a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c66e:	8d 50 01             	lea    edx,[eax+0x1]
c000c671:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c675:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c679:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c67d:	0f b6 c0             	movzx  eax,al
c000c680:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c684:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c688:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c68c:	01 d0                	add    eax,edx
c000c68e:	83 c0 2c             	add    eax,0x2c
c000c691:	8a 00                	mov    al,BYTE PTR [eax]
c000c693:	0f b6 d0             	movzx  edx,al
c000c696:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c69a:	8d 48 01             	lea    ecx,[eax+0x1]
c000c69d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6a1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c6a5:	0f b6 c0             	movzx  eax,al
c000c6a8:	c1 e0 08             	shl    eax,0x8
c000c6ab:	09 d0                	or     eax,edx
c000c6ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c6b1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c6b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6ba:	8d 50 01             	lea    edx,[eax+0x1]
c000c6bd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6c1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6c5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c6c9:	0f b6 c0             	movzx  eax,al
c000c6cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c6d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6d4:	c1 e0 08             	shl    eax,0x8
c000c6d7:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c6db:	89 c1                	mov    ecx,eax
c000c6dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6e1:	c1 e0 18             	shl    eax,0x18
c000c6e4:	89 c3                	mov    ebx,eax
c000c6e6:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c000c6eb:	8d 50 01             	lea    edx,[eax+0x1]
c000c6ee:	89 15 8c bd 02 c0    	mov    DWORD PTR ds:0xc002bd8c,edx
c000c6f4:	09 d9                	or     ecx,ebx
c000c6f6:	89 ca                	mov    edx,ecx
c000c6f8:	89 14 85 a0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4260],edx
c000c6ff:	eb 13                	jmp    c000c714 <scanMADT()+0x42c>
c000c701:	8d 76 00             	lea    esi,[esi+0x0]
c000c704:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c709:	83 f8 05             	cmp    eax,0x5
c000c70c:	75 06                	jne    c000c714 <scanMADT()+0x42c>
c000c70e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000c713:	90                   	nop
c000c714:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000c719:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c71d:	01 d0                	add    eax,edx
c000c71f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c723:	e9 50 fc ff ff       	jmp    c000c378 <scanMADT()+0x90>
c000c728:	90                   	nop
c000c729:	eb 0d                	jmp    c000c738 <scanMADT()+0x450>
c000c72b:	90                   	nop
c000c72c:	90                   	nop
c000c72d:	eb 09                	jmp    c000c738 <scanMADT()+0x450>
c000c72f:	90                   	nop
c000c730:	90                   	nop
c000c731:	eb 05                	jmp    c000c738 <scanMADT()+0x450>
c000c733:	90                   	nop
c000c734:	90                   	nop
c000c735:	8d 76 00             	lea    esi,[esi+0x0]
c000c738:	83 c4 38             	add    esp,0x38
c000c73b:	5b                   	pop    ebx
c000c73c:	c3                   	ret    
c000c73d:	90                   	nop
c000c73e:	66 90                	xchg   ax,ax

c000c740 <ACPI::ACPI()>:
c000c740:	83 ec 0c             	sub    esp,0xc
c000c743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c747:	83 ec 08             	sub    esp,0x8
c000c74a:	68 e5 33 02 c0       	push   0xc00233e5
c000c74f:	50                   	push   eax
c000c750:	e8 a5 d3 ff ff       	call   c0009afa <Device::Device(char const*)>
c000c755:	83 c4 10             	add    esp,0x10
c000c758:	ba e0 35 02 c0       	mov    edx,0xc00235e0
c000c75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c761:	89 10                	mov    DWORD PTR [eax],edx
c000c763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c767:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000c76e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c772:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000c77c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c780:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000c78a:	e8 59 fb ff ff       	call   c000c2e8 <scanMADT()>
c000c78f:	90                   	nop
c000c790:	83 c4 0c             	add    esp,0xc
c000c793:	c3                   	ret    

c000c794 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000c794:	83 ec 2c             	sub    esp,0x2c
c000c797:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000c79b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c79f:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000c7a3:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000c7a7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000c7ac:	88 c8                	mov    al,cl
c000c7ae:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c7b2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c7b7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c7bf:	90                   	nop
c000c7c0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c7c4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c7ca:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c7ce:	0f 8d b0 00 00 00    	jge    c000c884 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000c7d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c7d8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c7dc:	83 c2 2a             	add    edx,0x2a
c000c7df:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000c7e3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000c7e8:	0f b7 c0             	movzx  eax,ax
c000c7eb:	39 c2                	cmp    edx,eax
c000c7ed:	0f 85 85 00 00 00    	jne    c000c878 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c7f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c7f7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c7fb:	83 c2 2a             	add    edx,0x2a
c000c7fe:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000c802:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000c807:	0f b6 c0             	movzx  eax,al
c000c80a:	39 c2                	cmp    edx,eax
c000c80c:	75 6a                	jne    c000c878 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c80e:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c813:	85 c0                	test   eax,eax
c000c815:	74 3d                	je     c000c854 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000c817:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c81b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c81f:	83 c2 2a             	add    edx,0x2a
c000c822:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000c826:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c82a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c82d:	39 c2                	cmp    edx,eax
c000c82f:	74 13                	je     c000c844 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000c831:	83 ec 0c             	sub    esp,0xc
c000c834:	68 60 35 02 c0       	push   0xc0023560
c000c839:	e8 78 35 00 00       	call   c000fdb6 <KePanic(char const*)>
c000c83e:	83 c4 10             	add    esp,0x10
c000c841:	8d 76 00             	lea    esi,[esi+0x0]
c000c844:	83 ec 0c             	sub    esp,0xc
c000c847:	68 ea 33 02 c0       	push   0xc00233ea
c000c84c:	e8 65 35 00 00       	call   c000fdb6 <KePanic(char const*)>
c000c851:	83 c4 10             	add    esp,0x10
c000c854:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c858:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c85c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c860:	83 c2 2a             	add    edx,0x2a
c000c863:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000c867:	8b 02                	mov    eax,DWORD PTR [edx]
c000c869:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000c86c:	89 01                	mov    DWORD PTR [ecx],eax
c000c86e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000c871:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c876:	66 90                	xchg   ax,ax
c000c878:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000c87d:	e9 3e ff ff ff       	jmp    c000c7c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000c882:	66 90                	xchg   ax,ax
c000c884:	90                   	nop
c000c885:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c889:	83 c4 2c             	add    esp,0x2c
c000c88c:	c2 04 00             	ret    0x4
c000c88f:	90                   	nop

c000c890 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000c890:	83 ec 1c             	sub    esp,0x1c
c000c893:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c897:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c89b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c89f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000c8a4:	88 c8                	mov    al,cl
c000c8a6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000c8aa:	88 d0                	mov    al,dl
c000c8ac:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c8b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8b4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c8ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8be:	83 c2 2a             	add    edx,0x2a
c000c8c1:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000c8c5:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000c8c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8cd:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c8d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8d7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c8da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8de:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000c8e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8e7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c8ed:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000c8f1:	83 c0 01             	add    eax,0x1
c000c8f4:	88 c1                	mov    cl,al
c000c8f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8fa:	83 c2 2a             	add    edx,0x2a
c000c8fd:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000c901:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c905:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c90b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c90f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c912:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c916:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000c91a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c91e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c924:	8d 50 01             	lea    edx,[eax+0x1]
c000c927:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c92b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000c931:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c935:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c93b:	3d 00 02 00 00       	cmp    eax,0x200
c000c940:	75 12                	jne    c000c954 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000c942:	83 ec 0c             	sub    esp,0xc
c000c945:	68 f9 33 02 c0       	push   0xc00233f9
c000c94a:	e8 67 34 00 00       	call   c000fdb6 <KePanic(char const*)>
c000c94f:	83 c4 10             	add    esp,0x10
c000c952:	66 90                	xchg   ax,ax
c000c954:	90                   	nop
c000c955:	83 c4 1c             	add    esp,0x1c
c000c958:	c3                   	ret    
c000c959:	90                   	nop
c000c95a:	66 90                	xchg   ax,ax

c000c95c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000c95c:	b8 00 00 00 00       	mov    eax,0x0
c000c961:	c3                   	ret    
c000c962:	66 90                	xchg   ax,ax

c000c964 <ACPI::detectPCI()>:
c000c964:	53                   	push   ebx
c000c965:	83 ec 28             	sub    esp,0x28
c000c968:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c96d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000c972:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c977:	83 ec 08             	sub    esp,0x8
c000c97a:	68 16 34 02 c0       	push   0xc0023416
c000c97f:	50                   	push   eax
c000c980:	e8 ef f8 ff ff       	call   c000c274 <findDataTable(unsigned char*, char*)>
c000c985:	83 c4 10             	add    esp,0x10
c000c988:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000c991:	74 0d                	je     c000c9a0 <ACPI::detectPCI()+0x3c>
c000c993:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c998:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000c99d:	8d 76 00             	lea    esi,[esi+0x0]
c000c9a0:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000c9a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c9ac:	8a 00                	mov    al,BYTE PTR [eax]
c000c9ae:	0f b6 c0             	movzx  eax,al
c000c9b1:	83 f8 01             	cmp    eax,0x1
c000c9b4:	75 0e                	jne    c000c9c4 <ACPI::detectPCI()+0x60>
c000c9b6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c9bb:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000c9c0:	eb 2e                	jmp    c000c9f0 <ACPI::detectPCI()+0x8c>
c000c9c2:	66 90                	xchg   ax,ax
c000c9c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c9c8:	8a 00                	mov    al,BYTE PTR [eax]
c000c9ca:	0f b6 c0             	movzx  eax,al
c000c9cd:	83 f8 02             	cmp    eax,0x2
c000c9d0:	75 1e                	jne    c000c9f0 <ACPI::detectPCI()+0x8c>
c000c9d2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c9d7:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000c9dc:	85 c0                	test   eax,eax
c000c9de:	74 10                	je     c000c9f0 <ACPI::detectPCI()+0x8c>
c000c9e0:	83 ec 0c             	sub    esp,0xc
c000c9e3:	68 90 35 02 c0       	push   0xc0023590
c000c9e8:	e8 c9 33 00 00       	call   c000fdb6 <KePanic(char const*)>
c000c9ed:	83 c4 10             	add    esp,0x10
c000c9f0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000c9f4:	83 f0 01             	xor    eax,0x1
c000c9f7:	0f b6 c0             	movzx  eax,al
c000c9fa:	85 c0                	test   eax,eax
c000c9fc:	74 46                	je     c000ca44 <ACPI::detectPCI()+0xe0>
c000c9fe:	e8 2d 37 ff ff       	call   c0000130 <manualPCIProbe>
c000ca03:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca07:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ca0c:	75 0e                	jne    c000ca1c <ACPI::detectPCI()+0xb8>
c000ca0e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca13:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ca18:	eb 2a                	jmp    c000ca44 <ACPI::detectPCI()+0xe0>
c000ca1a:	66 90                	xchg   ax,ax
c000ca1c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000ca21:	75 21                	jne    c000ca44 <ACPI::detectPCI()+0xe0>
c000ca23:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca28:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000ca2d:	85 c0                	test   eax,eax
c000ca2f:	74 13                	je     c000ca44 <ACPI::detectPCI()+0xe0>
c000ca31:	83 ec 0c             	sub    esp,0xc
c000ca34:	68 90 35 02 c0       	push   0xc0023590
c000ca39:	e8 78 33 00 00       	call   c000fdb6 <KePanic(char const*)>
c000ca3e:	83 c4 10             	add    esp,0x10
c000ca41:	8d 76 00             	lea    esi,[esi+0x0]
c000ca44:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ca49:	85 c0                	test   eax,eax
c000ca4b:	0f 84 87 00 00 00    	je     c000cad8 <ACPI::detectPCI()+0x174>
c000ca51:	83 ec 0c             	sub    esp,0xc
c000ca54:	68 1b 34 02 c0       	push   0xc002341b
c000ca59:	e8 c9 06 00 00       	call   c000d127 <KeSetBootMessage(char const*)>
c000ca5e:	83 c4 10             	add    esp,0x10
c000ca61:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000ca69:	83 ec 0c             	sub    esp,0xc
c000ca6c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ca70:	e8 fb 2f 00 00       	call   c000fa70 <malloc>
c000ca75:	83 c4 10             	add    esp,0x10
c000ca78:	89 c3                	mov    ebx,eax
c000ca7a:	83 ec 0c             	sub    esp,0xc
c000ca7d:	53                   	push   ebx
c000ca7e:	e8 5f 05 01 00       	call   c001cfe2 <PCI::PCI()>
c000ca83:	83 c4 10             	add    esp,0x10
c000ca86:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ca8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca8e:	83 ec 08             	sub    esp,0x8
c000ca91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca95:	50                   	push   eax
c000ca96:	e8 fd ce ff ff       	call   c0009998 <Device::addChild(Device*)>
c000ca9b:	83 c4 10             	add    esp,0x10
c000ca9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000caa2:	8b 00                	mov    eax,DWORD PTR [eax]
c000caa4:	83 c0 08             	add    eax,0x8
c000caa7:	8b 00                	mov    eax,DWORD PTR [eax]
c000caa9:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000caae:	85 d2                	test   edx,edx
c000cab0:	74 0a                	je     c000cabc <ACPI::detectPCI()+0x158>
c000cab2:	ba 01 00 00 00       	mov    edx,0x1
c000cab7:	eb 0b                	jmp    c000cac4 <ACPI::detectPCI()+0x160>
c000cab9:	8d 76 00             	lea    esi,[esi+0x0]
c000cabc:	ba 02 00 00 00       	mov    edx,0x2
c000cac1:	8d 76 00             	lea    esi,[esi+0x0]
c000cac4:	6a 00                	push   0x0
c000cac6:	6a 00                	push   0x0
c000cac8:	52                   	push   edx
c000cac9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cacd:	ff d0                	call   eax
c000cacf:	83 c4 10             	add    esp,0x10
c000cad2:	e9 91 00 00 00       	jmp    c000cb68 <ACPI::detectPCI()+0x204>
c000cad7:	90                   	nop
c000cad8:	83 ec 0c             	sub    esp,0xc
c000cadb:	68 33 34 02 c0       	push   0xc0023433
c000cae0:	e8 42 06 00 00       	call   c000d127 <KeSetBootMessage(char const*)>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000caef:	83 ec 0c             	sub    esp,0xc
c000caf2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000caf6:	e8 75 2f 00 00       	call   c000fa70 <malloc>
c000cafb:	83 c4 10             	add    esp,0x10
c000cafe:	89 c3                	mov    ebx,eax
c000cb00:	83 ec 0c             	sub    esp,0xc
c000cb03:	53                   	push   ebx
c000cb04:	e8 e1 10 01 00       	call   c001dbea <IDE::IDE()>
c000cb09:	83 c4 10             	add    esp,0x10
c000cb0c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000cb10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb14:	83 ec 08             	sub    esp,0x8
c000cb17:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cb1b:	50                   	push   eax
c000cb1c:	e8 77 ce ff ff       	call   c0009998 <Device::addChild(Device*)>
c000cb21:	83 c4 10             	add    esp,0x10
c000cb24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb28:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000cb32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb36:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000cb3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb43:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000cb4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb50:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb52:	83 c0 08             	add    eax,0x8
c000cb55:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb57:	6a 00                	push   0x0
c000cb59:	6a 00                	push   0x0
c000cb5b:	6a 00                	push   0x0
c000cb5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb61:	ff d0                	call   eax
c000cb63:	83 c4 10             	add    esp,0x10
c000cb66:	66 90                	xchg   ax,ax
c000cb68:	90                   	nop
c000cb69:	83 c4 28             	add    esp,0x28
c000cb6c:	5b                   	pop    ebx
c000cb6d:	c3                   	ret    
c000cb6e:	66 90                	xchg   ax,ax

c000cb70 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000cb70:	83 ec 0c             	sub    esp,0xc
c000cb73:	83 ec 0c             	sub    esp,0xc
c000cb76:	68 48 34 02 c0       	push   0xc0023448
c000cb7b:	e8 36 32 00 00       	call   c000fdb6 <KePanic(char const*)>
c000cb80:	83 c4 10             	add    esp,0x10
c000cb83:	90                   	nop
c000cb84:	83 c4 0c             	add    esp,0xc
c000cb87:	c3                   	ret    

c000cb88 <ACPI::open(int, int, void*)>:
c000cb88:	55                   	push   ebp
c000cb89:	89 e5                	mov    ebp,esp
c000cb8b:	53                   	push   ebx
c000cb8c:	81 ec 74 01 00 00    	sub    esp,0x174
c000cb92:	83 ec 0c             	sub    esp,0xc
c000cb95:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000cb98:	e8 c7 fd ff ff       	call   c000c964 <ACPI::detectPCI()>
c000cb9d:	83 c4 10             	add    esp,0x10
c000cba0:	83 ec 0c             	sub    esp,0xc
c000cba3:	68 b8 35 02 c0       	push   0xc00235b8
c000cba8:	e8 7a 05 00 00       	call   c000d127 <KeSetBootMessage(char const*)>
c000cbad:	83 c4 10             	add    esp,0x10
c000cbb0:	b8 4c 05 00 00       	mov    eax,0x54c
c000cbb5:	8a 00                	mov    al,BYTE PTR [eax]
c000cbb7:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000cbba:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000cbbe:	83 f8 01             	cmp    eax,0x1
c000cbc1:	75 15                	jne    c000cbd8 <ACPI::open(int, int, void*)+0x50>
c000cbc3:	83 ec 0c             	sub    esp,0xc
c000cbc6:	68 59 34 02 c0       	push   0xc0023459
c000cbcb:	e8 5a 88 00 00       	call   c001542a <Thr::loadKernelSymbolTable(char const*)>
c000cbd0:	83 c4 10             	add    esp,0x10
c000cbd3:	eb 33                	jmp    c000cc08 <ACPI::open(int, int, void*)+0x80>
c000cbd5:	8d 76 00             	lea    esi,[esi+0x0]
c000cbd8:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000cbdc:	3d bb 00 00 00       	cmp    eax,0xbb
c000cbe1:	75 15                	jne    c000cbf8 <ACPI::open(int, int, void*)+0x70>
c000cbe3:	83 ec 0c             	sub    esp,0xc
c000cbe6:	68 77 34 02 c0       	push   0xc0023477
c000cbeb:	e8 3a 88 00 00       	call   c001542a <Thr::loadKernelSymbolTable(char const*)>
c000cbf0:	83 c4 10             	add    esp,0x10
c000cbf3:	eb 13                	jmp    c000cc08 <ACPI::open(int, int, void*)+0x80>
c000cbf5:	8d 76 00             	lea    esi,[esi+0x0]
c000cbf8:	83 ec 0c             	sub    esp,0xc
c000cbfb:	68 95 34 02 c0       	push   0xc0023495
c000cc00:	e8 b1 31 00 00       	call   c000fdb6 <KePanic(char const*)>
c000cc05:	83 c4 10             	add    esp,0x10
c000cc08:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000cc0c:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000cc13:	83 ec 0c             	sub    esp,0xc
c000cc16:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000cc19:	e8 52 2e 00 00       	call   c000fa70 <malloc>
c000cc1e:	83 c4 10             	add    esp,0x10
c000cc21:	89 c3                	mov    ebx,eax
c000cc23:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000cc28:	83 ec 04             	sub    esp,0x4
c000cc2b:	50                   	push   eax
c000cc2c:	68 af 34 02 c0       	push   0xc00234af
c000cc31:	53                   	push   ebx
c000cc32:	e8 f5 b4 ff ff       	call   c000812c <File::File(char const*, Process*)>
c000cc37:	83 c4 10             	add    esp,0x10
c000cc3a:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000cc3d:	83 ec 08             	sub    esp,0x8
c000cc40:	6a 01                	push   0x1
c000cc42:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cc45:	e8 00 b5 ff ff       	call   c000814a <File::open(FileOpenMode)>
c000cc4a:	83 c4 10             	add    esp,0x10
c000cc4d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000cc50:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000cc54:	75 12                	jne    c000cc68 <ACPI::open(int, int, void*)+0xe0>
c000cc56:	83 ec 0c             	sub    esp,0xc
c000cc59:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cc5c:	e8 47 b5 ff ff       	call   c00081a8 <File::close()>
c000cc61:	83 c4 10             	add    esp,0x10
c000cc64:	eb 06                	jmp    c000cc6c <ACPI::open(int, int, void*)+0xe4>
c000cc66:	66 90                	xchg   ax,ax
c000cc68:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc6c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000cc70:	74 16                	je     c000cc88 <ACPI::open(int, int, void*)+0x100>
c000cc72:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cc75:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc77:	83 c0 08             	add    eax,0x8
c000cc7a:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc7c:	83 ec 0c             	sub    esp,0xc
c000cc7f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cc82:	ff d0                	call   eax
c000cc84:	83 c4 10             	add    esp,0x10
c000cc87:	90                   	nop
c000cc88:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000cc8b:	83 f0 01             	xor    eax,0x1
c000cc8e:	0f b6 c0             	movzx  eax,al
c000cc91:	85 c0                	test   eax,eax
c000cc93:	74 27                	je     c000ccbc <ACPI::open(int, int, void*)+0x134>
c000cc95:	83 ec 0c             	sub    esp,0xc
c000cc98:	68 cd 34 02 c0       	push   0xc00234cd
c000cc9d:	e8 85 04 00 00       	call   c000d127 <KeSetBootMessage(char const*)>
c000cca2:	83 c4 10             	add    esp,0x10
c000cca5:	c7 45 e8 0c 00 00 00 	mov    DWORD PTR [ebp-0x18],0xc
c000ccac:	83 ec 0c             	sub    esp,0xc
c000ccaf:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000ccb2:	e8 e3 66 00 00       	call   c001339a <Virt::setupPageSwapping(int)>
c000ccb7:	83 c4 10             	add    esp,0x10
c000ccba:	66 90                	xchg   ax,ax
c000ccbc:	83 ec 0c             	sub    esp,0xc
c000ccbf:	68 e8 34 02 c0       	push   0xc00234e8
c000ccc4:	e8 5e 04 00 00       	call   c000d127 <KeSetBootMessage(char const*)>
c000ccc9:	83 c4 10             	add    esp,0x10
c000cccc:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cccf:	83 ec 08             	sub    esp,0x8
c000ccd2:	6a 13                	push   0x13
c000ccd4:	50                   	push   eax
c000ccd5:	e8 ec cf ff ff       	call   c0009cc6 <getDevicesOfType(DeviceType)>
c000ccda:	83 c4 0c             	add    esp,0xc
c000ccdd:	8d 76 00             	lea    esi,[esi+0x0]
c000cce0:	83 ec 0c             	sub    esp,0xc
c000cce3:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cce6:	50                   	push   eax
c000cce7:	e8 00 4c 01 00       	call   c00218ec <LinkedList<Device>::isEmpty()>
c000ccec:	83 c4 10             	add    esp,0x10
c000ccef:	83 f0 01             	xor    eax,0x1
c000ccf2:	0f b6 c0             	movzx  eax,al
c000ccf5:	85 c0                	test   eax,eax
c000ccf7:	0f 84 1f 01 00 00    	je     c000ce1c <ACPI::open(int, int, void*)+0x294>
c000ccfd:	83 ec 0c             	sub    esp,0xc
c000cd00:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cd03:	50                   	push   eax
c000cd04:	e8 ff 4b 01 00       	call   c0021908 <LinkedList<Device>::getFirstElement()>
c000cd09:	83 c4 10             	add    esp,0x10
c000cd0c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000cd0f:	83 ec 0c             	sub    esp,0xc
c000cd12:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cd15:	50                   	push   eax
c000cd16:	e8 f5 4b 01 00       	call   c0021910 <LinkedList<Device>::removeFirst()>
c000cd1b:	83 c4 10             	add    esp,0x10
c000cd1e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000cd21:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000cd24:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000cd27:	b8 24 00 00 00       	mov    eax,0x24
c000cd2c:	83 e0 fc             	and    eax,0xfffffffc
c000cd2f:	89 c3                	mov    ebx,eax
c000cd31:	b8 00 00 00 00       	mov    eax,0x0
c000cd36:	66 90                	xchg   ax,ax
c000cd38:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000cd3f:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000cd46:	83 c0 04             	add    eax,0x4
c000cd49:	39 d8                	cmp    eax,ebx
c000cd4b:	72 eb                	jb     c000cd38 <ACPI::open(int, int, void*)+0x1b0>
c000cd4d:	83 ec 08             	sub    esp,0x8
c000cd50:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000cd56:	50                   	push   eax
c000cd57:	83 ec 24             	sub    esp,0x24
c000cd5a:	89 e1                	mov    ecx,esp
c000cd5c:	b8 24 00 00 00       	mov    eax,0x24
c000cd61:	83 e0 fc             	and    eax,0xfffffffc
c000cd64:	89 c3                	mov    ebx,eax
c000cd66:	b8 00 00 00 00       	mov    eax,0x0
c000cd6b:	90                   	nop
c000cd6c:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000cd73:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000cd76:	83 c0 04             	add    eax,0x4
c000cd79:	39 d8                	cmp    eax,ebx
c000cd7b:	72 ef                	jb     c000cd6c <ACPI::open(int, int, void*)+0x1e4>
c000cd7d:	e8 48 07 01 00       	call   c001d4ca <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000cd82:	83 c4 30             	add    esp,0x30
c000cd85:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000cd88:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000cd8c:	0f 84 4e ff ff ff    	je     c000cce0 <ACPI::open(int, int, void*)+0x158>
c000cd92:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000cd99:	83 ec 0c             	sub    esp,0xc
c000cd9c:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000cd9f:	e8 cc 2c 00 00       	call   c000fa70 <malloc>
c000cda4:	83 c4 10             	add    esp,0x10
c000cda7:	89 c3                	mov    ebx,eax
c000cda9:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000cdae:	83 ec 04             	sub    esp,0x4
c000cdb1:	50                   	push   eax
c000cdb2:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000cdb5:	53                   	push   ebx
c000cdb6:	e8 71 b3 ff ff       	call   c000812c <File::File(char const*, Process*)>
c000cdbb:	83 c4 10             	add    esp,0x10
c000cdbe:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000cdc1:	83 ec 0c             	sub    esp,0xc
c000cdc4:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000cdc7:	e8 42 b6 ff ff       	call   c000840e <File::exists()>
c000cdcc:	83 c4 10             	add    esp,0x10
c000cdcf:	0f b6 c0             	movzx  eax,al
c000cdd2:	85 c0                	test   eax,eax
c000cdd4:	74 22                	je     c000cdf8 <ACPI::open(int, int, void*)+0x270>
c000cdd6:	83 ec 08             	sub    esp,0x8
c000cdd9:	6a 01                	push   0x1
c000cddb:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000cdde:	e8 c9 90 00 00       	call   c0015eac <Thr::loadDLL(char const*, bool)>
c000cde3:	83 c4 10             	add    esp,0x10
c000cde6:	83 ec 08             	sub    esp,0x8
c000cde9:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000cdec:	50                   	push   eax
c000cded:	e8 1b 93 00 00       	call   c001610d <Thr::executeDLL(unsigned long, void*)>
c000cdf2:	83 c4 10             	add    esp,0x10
c000cdf5:	8d 76 00             	lea    esi,[esi+0x0]
c000cdf8:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000cdfc:	0f 84 de fe ff ff    	je     c000cce0 <ACPI::open(int, int, void*)+0x158>
c000ce02:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000ce05:	8b 00                	mov    eax,DWORD PTR [eax]
c000ce07:	83 c0 08             	add    eax,0x8
c000ce0a:	8b 00                	mov    eax,DWORD PTR [eax]
c000ce0c:	83 ec 0c             	sub    esp,0xc
c000ce0f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000ce12:	ff d0                	call   eax
c000ce14:	83 c4 10             	add    esp,0x10
c000ce17:	e9 c4 fe ff ff       	jmp    c000cce0 <ACPI::open(int, int, void*)+0x158>
c000ce1c:	83 ec 0c             	sub    esp,0xc
c000ce1f:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ce22:	50                   	push   eax
c000ce23:	e8 c0 4a 01 00       	call   c00218e8 <LinkedList<Device>::~LinkedList()>
c000ce28:	83 c4 10             	add    esp,0x10
c000ce2b:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c000ce31:	83 ec 08             	sub    esp,0x8
c000ce34:	6a 01                	push   0x1
c000ce36:	68 02 35 02 c0       	push   0xc0023502
c000ce3b:	e8 6c 90 00 00       	call   c0015eac <Thr::loadDLL(char const*, bool)>
c000ce40:	83 c4 10             	add    esp,0x10
c000ce43:	83 ec 08             	sub    esp,0x8
c000ce46:	53                   	push   ebx
c000ce47:	50                   	push   eax
c000ce48:	e8 c0 92 00 00       	call   c001610d <Thr::executeDLL(unsigned long, void*)>
c000ce4d:	83 c4 10             	add    esp,0x10
c000ce50:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000ce55:	85 c0                	test   eax,eax
c000ce57:	0f 84 ef 00 00 00    	je     c000cf4c <ACPI::open(int, int, void*)+0x3c4>
c000ce5d:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000ce62:	85 c0                	test   eax,eax
c000ce64:	0f 84 e2 00 00 00    	je     c000cf4c <ACPI::open(int, int, void*)+0x3c4>
c000ce6a:	83 ec 0c             	sub    esp,0xc
c000ce6d:	68 1f 35 02 c0       	push   0xc002351f
c000ce72:	e8 b0 02 00 00       	call   c000d127 <KeSetBootMessage(char const*)>
c000ce77:	83 c4 10             	add    esp,0x10
c000ce7a:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000ce81:	83 ec 0c             	sub    esp,0xc
c000ce84:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000ce87:	e8 e4 2b 00 00       	call   c000fa70 <malloc>
c000ce8c:	83 c4 10             	add    esp,0x10
c000ce8f:	89 c3                	mov    ebx,eax
c000ce91:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000ce96:	83 ec 04             	sub    esp,0x4
c000ce99:	50                   	push   eax
c000ce9a:	68 3c 35 02 c0       	push   0xc002353c
c000ce9f:	53                   	push   ebx
c000cea0:	e8 87 b2 ff ff       	call   c000812c <File::File(char const*, Process*)>
c000cea5:	83 c4 10             	add    esp,0x10
c000cea8:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000ceab:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000ceaf:	74 1b                	je     c000cecc <ACPI::open(int, int, void*)+0x344>
c000ceb1:	83 ec 0c             	sub    esp,0xc
c000ceb4:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000ceb7:	e8 52 b5 ff ff       	call   c000840e <File::exists()>
c000cebc:	83 c4 10             	add    esp,0x10
c000cebf:	0f b6 c0             	movzx  eax,al
c000cec2:	85 c0                	test   eax,eax
c000cec4:	74 06                	je     c000cecc <ACPI::open(int, int, void*)+0x344>
c000cec6:	b0 01                	mov    al,0x1
c000cec8:	eb 06                	jmp    c000ced0 <ACPI::open(int, int, void*)+0x348>
c000ceca:	66 90                	xchg   ax,ax
c000cecc:	b0 00                	mov    al,0x0
c000cece:	66 90                	xchg   ax,ax
c000ced0:	0f b6 c0             	movzx  eax,al
c000ced3:	85 c0                	test   eax,eax
c000ced5:	74 21                	je     c000cef8 <ACPI::open(int, int, void*)+0x370>
c000ced7:	83 ec 08             	sub    esp,0x8
c000ceda:	6a 01                	push   0x1
c000cedc:	68 3c 35 02 c0       	push   0xc002353c
c000cee1:	e8 c6 8f 00 00       	call   c0015eac <Thr::loadDLL(char const*, bool)>
c000cee6:	83 c4 10             	add    esp,0x10
c000cee9:	83 ec 08             	sub    esp,0x8
c000ceec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ceef:	50                   	push   eax
c000cef0:	e8 18 92 00 00       	call   c001610d <Thr::executeDLL(unsigned long, void*)>
c000cef5:	83 c4 10             	add    esp,0x10
c000cef8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000cefc:	74 1e                	je     c000cf1c <ACPI::open(int, int, void*)+0x394>
c000cefe:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000cf02:	74 18                	je     c000cf1c <ACPI::open(int, int, void*)+0x394>
c000cf04:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000cf07:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf09:	83 c0 08             	add    eax,0x8
c000cf0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf0e:	83 ec 0c             	sub    esp,0xc
c000cf11:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000cf14:	ff d0                	call   eax
c000cf16:	83 c4 10             	add    esp,0x10
c000cf19:	8d 76 00             	lea    esi,[esi+0x0]
c000cf1c:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000cf21:	83 ec 08             	sub    esp,0x8
c000cf24:	68 59 35 02 c0       	push   0xc0023559
c000cf29:	50                   	push   eax
c000cf2a:	e8 45 f3 ff ff       	call   c000c274 <findDataTable(unsigned char*, char*)>
c000cf2f:	83 c4 10             	add    esp,0x10
c000cf32:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000cf35:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000cf39:	74 11                	je     c000cf4c <ACPI::open(int, int, void*)+0x3c4>
c000cf3b:	83 ec 08             	sub    esp,0x8
c000cf3e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000cf41:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000cf44:	e8 27 fc ff ff       	call   c000cb70 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000cf49:	83 c4 10             	add    esp,0x10
c000cf4c:	b8 00 00 00 00       	mov    eax,0x0
c000cf51:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cf54:	c9                   	leave  
c000cf55:	c3                   	ret    
c000cf56:	66 90                	xchg   ax,ax

c000cf58 <KeAssertionFailed(char*, char const*, char const*, int)>:
c000cf58:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000cf5e:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000cf65:	89 c2                	mov    edx,eax
c000cf67:	c1 fa 1f             	sar    edx,0x1f
c000cf6a:	83 ec 04             	sub    esp,0x4
c000cf6d:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000cf71:	51                   	push   ecx
c000cf72:	52                   	push   edx
c000cf73:	50                   	push   eax
c000cf74:	e8 ef 28 00 00       	call   c000f868 <KeItoa(long long, char*)>
c000cf79:	83 c4 10             	add    esp,0x10
c000cf7c:	83 ec 08             	sub    esp,0x8
c000cf7f:	68 04 36 02 c0       	push   0xc0023604
c000cf84:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000cf88:	50                   	push   eax
c000cf89:	e8 c2 36 ff ff       	call   c0000650 <strcpy>
c000cf8e:	83 c4 10             	add    esp,0x10
c000cf91:	83 ec 08             	sub    esp,0x8
c000cf94:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000cf9b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000cf9f:	50                   	push   eax
c000cfa0:	e8 cb 38 ff ff       	call   c0000870 <strcat>
c000cfa5:	83 c4 10             	add    esp,0x10
c000cfa8:	83 ec 08             	sub    esp,0x8
c000cfab:	68 12 36 02 c0       	push   0xc0023612
c000cfb0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000cfb4:	50                   	push   eax
c000cfb5:	e8 b6 38 ff ff       	call   c0000870 <strcat>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	83 ec 08             	sub    esp,0x8
c000cfc0:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000cfc7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000cfcb:	50                   	push   eax
c000cfcc:	e8 9f 38 ff ff       	call   c0000870 <strcat>
c000cfd1:	83 c4 10             	add    esp,0x10
c000cfd4:	83 ec 08             	sub    esp,0x8
c000cfd7:	68 15 36 02 c0       	push   0xc0023615
c000cfdc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000cfe0:	50                   	push   eax
c000cfe1:	e8 8a 38 ff ff       	call   c0000870 <strcat>
c000cfe6:	83 c4 10             	add    esp,0x10
c000cfe9:	83 ec 08             	sub    esp,0x8
c000cfec:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000cff3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000cff7:	50                   	push   eax
c000cff8:	e8 73 38 ff ff       	call   c0000870 <strcat>
c000cffd:	83 c4 10             	add    esp,0x10
c000d000:	83 ec 08             	sub    esp,0x8
c000d003:	68 15 36 02 c0       	push   0xc0023615
c000d008:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d00c:	50                   	push   eax
c000d00d:	e8 5e 38 ff ff       	call   c0000870 <strcat>
c000d012:	83 c4 10             	add    esp,0x10
c000d015:	83 ec 08             	sub    esp,0x8
c000d018:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d01c:	50                   	push   eax
c000d01d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d021:	50                   	push   eax
c000d022:	e8 49 38 ff ff       	call   c0000870 <strcat>
c000d027:	83 c4 10             	add    esp,0x10
c000d02a:	83 ec 0c             	sub    esp,0xc
c000d02d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d031:	50                   	push   eax
c000d032:	e8 7f 2d 00 00       	call   c000fdb6 <KePanic(char const*)>
c000d037:	83 c4 10             	add    esp,0x10
c000d03a:	90                   	nop
c000d03b:	81 c4 2c 02 00 00    	add    esp,0x22c
c000d041:	c3                   	ret    

c000d042 <KeInitialiseAtexit()>:
c000d042:	83 ec 10             	sub    esp,0x10
c000d045:	6a 60                	push   0x60
c000d047:	6a 00                	push   0x0
c000d049:	68 60 c0 02 c0       	push   0xc002c060
c000d04e:	c7 05 e0 bf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bfe0,0x0
c000d058:	e8 93 34 ff ff       	call   c00004f0 <memset>
c000d05d:	83 c4 1c             	add    esp,0x1c
c000d060:	c3                   	ret    

c000d061 <KeRegisterAtexit(void (*)(void*), void*)>:
c000d061:	a1 e0 bf 02 c0       	mov    eax,ds:0xc002bfe0
c000d066:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d06a:	89 14 85 60 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3fa0],edx
c000d071:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d075:	89 14 85 00 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4000],edx
c000d07c:	40                   	inc    eax
c000d07d:	a3 e0 bf 02 c0       	mov    ds:0xc002bfe0,eax
c000d082:	83 f8 17             	cmp    eax,0x17
c000d085:	7e 0d                	jle    c000d094 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000d087:	c7 44 24 04 17 36 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023617
c000d08f:	e9 22 2d 00 00       	jmp    c000fdb6 <KePanic(char const*)>
c000d094:	c3                   	ret    

c000d095 <KeExecuteAtexit()>:
c000d095:	53                   	push   ebx
c000d096:	31 db                	xor    ebx,ebx
c000d098:	83 ec 08             	sub    esp,0x8
c000d09b:	39 1d e0 bf 02 c0    	cmp    DWORD PTR ds:0xc002bfe0,ebx
c000d0a1:	7e 50                	jle    c000d0f3 <KeExecuteAtexit()+0x5e>
c000d0a3:	8b 04 9d 60 c0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3fa0]
c000d0aa:	85 c0                	test   eax,eax
c000d0ac:	74 42                	je     c000d0f0 <KeExecuteAtexit()+0x5b>
c000d0ae:	51                   	push   ecx
c000d0af:	50                   	push   eax
c000d0b0:	53                   	push   ebx
c000d0b1:	68 30 36 02 c0       	push   0xc0023630
c000d0b6:	e8 93 9e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d0bb:	58                   	pop    eax
c000d0bc:	ff 34 9d 00 c0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4000]
c000d0c3:	ff 14 9d 60 c0 02 c0 	call   DWORD PTR [ebx*4-0x3ffd3fa0]
c000d0ca:	c7 04 24 52 36 02 c0 	mov    DWORD PTR [esp],0xc0023652
c000d0d1:	e8 78 9e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d0d6:	c7 04 24 e3 39 02 c0 	mov    DWORD PTR [esp],0xc00239e3
c000d0dd:	c7 04 9d 60 c0 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd3fa0],0x0
c000d0e8:	e8 61 9e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d0ed:	83 c4 10             	add    esp,0x10
c000d0f0:	43                   	inc    ebx
c000d0f1:	eb a8                	jmp    c000d09b <KeExecuteAtexit()+0x6>
c000d0f3:	83 c4 08             	add    esp,0x8
c000d0f6:	5b                   	pop    ebx
c000d0f7:	c3                   	ret    

c000d0f8 <KeDisplaySplashScreen()>:
c000d0f8:	53                   	push   ebx
c000d0f9:	bb 01 00 00 00       	mov    ebx,0x1
c000d0fe:	83 ec 08             	sub    esp,0x8
c000d101:	43                   	inc    ebx
c000d102:	0f be 83 55 36 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdc9ab]
c000d109:	85 c0                	test   eax,eax
c000d10b:	74 15                	je     c000d122 <KeDisplaySplashScreen()+0x2a>
c000d10d:	83 ec 0c             	sub    esp,0xc
c000d110:	6a 01                	push   0x1
c000d112:	53                   	push   ebx
c000d113:	6a 00                	push   0x0
c000d115:	6a 0f                	push   0xf
c000d117:	50                   	push   eax
c000d118:	e8 77 da 00 00       	call   c001ab94 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d11d:	83 c4 20             	add    esp,0x20
c000d120:	eb df                	jmp    c000d101 <KeDisplaySplashScreen()+0x9>
c000d122:	83 c4 08             	add    esp,0x8
c000d125:	5b                   	pop    ebx
c000d126:	c3                   	ret    

c000d127 <KeSetBootMessage(char const*)>:
c000d127:	57                   	push   edi
c000d128:	56                   	push   esi
c000d129:	53                   	push   ebx
c000d12a:	81 ec a4 00 00 00    	sub    esp,0xa4
c000d130:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000d137:	68 9e 00 00 00       	push   0x9e
c000d13c:	6a 00                	push   0x0
c000d13e:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000d142:	56                   	push   esi
c000d143:	e8 a8 33 ff ff       	call   c00004f0 <memset>
c000d148:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d14b:	e8 30 34 ff ff       	call   c0000580 <strlen>
c000d150:	ba 50 00 00 00       	mov    edx,0x50
c000d155:	83 c4 10             	add    esp,0x10
c000d158:	31 c9                	xor    ecx,ecx
c000d15a:	29 c2                	sub    edx,eax
c000d15c:	83 e2 fe             	and    edx,0xfffffffe
c000d15f:	01 f2                	add    edx,esi
c000d161:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000d166:	84 c0                	test   al,al
c000d168:	74 0a                	je     c000d174 <KeSetBootMessage(char const*)+0x4d>
c000d16a:	80 cc 07             	or     ah,0x7
c000d16d:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000d171:	41                   	inc    ecx
c000d172:	eb ed                	jmp    c000d161 <KeSetBootMessage(char const*)+0x3a>
c000d174:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000d179:	b9 9e 00 00 00       	mov    ecx,0x9e
c000d17e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d180:	50                   	push   eax
c000d181:	50                   	push   eax
c000d182:	53                   	push   ebx
c000d183:	68 6a 36 02 c0       	push   0xc002366a
c000d188:	e8 c1 9d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d18d:	81 c4 b0 00 00 00    	add    esp,0xb0
c000d193:	5b                   	pop    ebx
c000d194:	5e                   	pop    esi
c000d195:	5f                   	pop    edi
c000d196:	c3                   	ret    

c000d197 <__cxa_atexit>:
c000d197:	31 c0                	xor    eax,eax
c000d199:	c3                   	ret    

c000d19a <__cxa_finalize>:
c000d19a:	c3                   	ret    

c000d19b <__stack_chk_fail>:
c000d19b:	55                   	push   ebp
c000d19c:	89 e5                	mov    ebp,esp
c000d19e:	83 ec 10             	sub    esp,0x10
c000d1a1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d1a4:	68 78 36 02 c0       	push   0xc0023678
c000d1a9:	e8 a0 9d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d1ae:	58                   	pop    eax
c000d1af:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d1b2:	5a                   	pop    edx
c000d1b3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d1b6:	68 78 36 02 c0       	push   0xc0023678
c000d1bb:	e8 8e 9d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d1c0:	c7 04 24 80 36 02 c0 	mov    DWORD PTR [esp],0xc0023680
c000d1c7:	e8 ea 2b 00 00       	call   c000fdb6 <KePanic(char const*)>
c000d1cc:	83 c4 10             	add    esp,0x10
c000d1cf:	c9                   	leave  
c000d1d0:	c3                   	ret    

c000d1d1 <__cxa_pure_virtual>:
c000d1d1:	83 ec 18             	sub    esp,0x18
c000d1d4:	68 98 36 02 c0       	push   0xc0023698
c000d1d9:	e8 d8 2b 00 00       	call   c000fdb6 <KePanic(char const*)>
c000d1de:	83 c4 1c             	add    esp,0x1c
c000d1e1:	c3                   	ret    

c000d1e2 <operator new[](unsigned long)>:
c000d1e2:	e9 89 28 00 00       	jmp    c000fa70 <malloc>

c000d1e7 <operator delete(void*, unsigned long)>:
c000d1e7:	e9 a4 28 00 00       	jmp    c000fa90 <rfree>

c000d1ec <operator delete[](void*)>:
c000d1ec:	e9 9f 28 00 00       	jmp    c000fa90 <rfree>

c000d1f1 <operator delete[](void*, unsigned long)>:
c000d1f1:	e9 9a 28 00 00       	jmp    c000fa90 <rfree>
c000d1f6:	66 90                	xchg   ax,ax

c000d1f8 <CUnlockScheduler>:
c000d1f8:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000d200:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000d205:	85 c0                	test   eax,eax
c000d207:	75 03                	jne    c000d20c <CUnlockScheduler+0x14>
c000d209:	fb                   	sti    
c000d20a:	66 90                	xchg   ax,ax
c000d20c:	90                   	nop
c000d20d:	c3                   	ret    
c000d20e:	66 90                	xchg   ax,ax

c000d210 <CLockScheduler>:
c000d210:	fa                   	cli    
c000d211:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000d216:	83 c0 01             	add    eax,0x1
c000d219:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000d21e:	90                   	nop
c000d21f:	c3                   	ret    

c000d220 <CPrintf>:
c000d220:	83 ec 0c             	sub    esp,0xc
c000d223:	83 ec 08             	sub    esp,0x8
c000d226:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d22a:	68 ab 36 02 c0       	push   0xc00236ab
c000d22f:	e8 1a 9d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d234:	83 c4 10             	add    esp,0x10
c000d237:	90                   	nop
c000d238:	83 c4 0c             	add    esp,0xc
c000d23b:	c3                   	ret    

c000d23c <CmOpen(char const*)>:
c000d23c:	57                   	push   edi
c000d23d:	56                   	push   esi
c000d23e:	53                   	push   ebx
c000d23f:	83 ec 1c             	sub    esp,0x1c
c000d242:	6a 30                	push   0x30
c000d244:	e8 27 28 00 00       	call   c000fa70 <malloc>
c000d249:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000d250:	89 c3                	mov    ebx,eax
c000d252:	e8 19 28 00 00       	call   c000fa70 <malloc>
c000d257:	83 c4 0c             	add    esp,0xc
c000d25a:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000d260:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d264:	89 c6                	mov    esi,eax
c000d266:	50                   	push   eax
c000d267:	e8 c0 ae ff ff       	call   c000812c <File::File(char const*, Process*)>
c000d26c:	83 c4 0c             	add    esp,0xc
c000d26f:	89 33                	mov    DWORD PTR [ebx],esi
c000d271:	8d 44 24 07          	lea    eax,[esp+0x7]
c000d275:	50                   	push   eax
c000d276:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d27a:	50                   	push   eax
c000d27b:	56                   	push   esi
c000d27c:	e8 cb b1 ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c000d281:	5a                   	pop    edx
c000d282:	59                   	pop    ecx
c000d283:	6a 01                	push   0x1
c000d285:	ff 33                	push   DWORD PTR [ebx]
c000d287:	e8 be ae ff ff       	call   c000814a <File::open(FileOpenMode)>
c000d28c:	5e                   	pop    esi
c000d28d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d291:	e8 da 27 00 00       	call   c000fa70 <malloc>
c000d296:	5a                   	pop    edx
c000d297:	8d 74 24 10          	lea    esi,[esp+0x10]
c000d29b:	89 c7                	mov    edi,eax
c000d29d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d29f:	8b 10                	mov    edx,DWORD PTR [eax]
c000d2a1:	56                   	push   esi
c000d2a2:	57                   	push   edi
c000d2a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d2a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d2ab:	50                   	push   eax
c000d2ac:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d2af:	83 c4 14             	add    esp,0x14
c000d2b2:	ff 33                	push   DWORD PTR [ebx]
c000d2b4:	e8 ef ae ff ff       	call   c00081a8 <File::close()>
c000d2b9:	59                   	pop    ecx
c000d2ba:	58                   	pop    eax
c000d2bb:	6a 13                	push   0x13
c000d2bd:	ff 33                	push   DWORD PTR [ebx]
c000d2bf:	e8 86 ae ff ff       	call   c000814a <File::open(FileOpenMode)>
c000d2c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d2c6:	8b 10                	mov    edx,DWORD PTR [eax]
c000d2c8:	89 34 24             	mov    DWORD PTR [esp],esi
c000d2cb:	57                   	push   edi
c000d2cc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d2d0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d2d4:	50                   	push   eax
c000d2d5:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d2d8:	83 c4 14             	add    esp,0x14
c000d2db:	57                   	push   edi
c000d2dc:	e8 9f 27 00 00       	call   c000fa80 <free>
c000d2e1:	83 c4 10             	add    esp,0x10
c000d2e4:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000d2e7:	75 10                	jne    c000d2f9 <CmOpen(char const*)+0xbd>
c000d2e9:	83 ec 0c             	sub    esp,0xc
c000d2ec:	68 ae 36 02 c0       	push   0xc00236ae
c000d2f1:	e8 c0 2a 00 00       	call   c000fdb6 <KePanic(char const*)>
c000d2f6:	83 c4 10             	add    esp,0x10
c000d2f9:	50                   	push   eax
c000d2fa:	6a 00                	push   0x0
c000d2fc:	6a 00                	push   0x0
c000d2fe:	ff 33                	push   DWORD PTR [ebx]
c000d300:	8d 7b 05             	lea    edi,[ebx+0x5]
c000d303:	e8 00 af ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000d308:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d30a:	8b 10                	mov    edx,DWORD PTR [eax]
c000d30c:	89 34 24             	mov    DWORD PTR [esp],esi
c000d30f:	57                   	push   edi
c000d310:	6a 00                	push   0x0
c000d312:	6a 2b                	push   0x2b
c000d314:	50                   	push   eax
c000d315:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d318:	83 c4 1c             	add    esp,0x1c
c000d31b:	6a 00                	push   0x0
c000d31d:	6a 00                	push   0x0
c000d31f:	ff 33                	push   DWORD PTR [ebx]
c000d321:	e8 e2 ae ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000d326:	83 c4 0c             	add    esp,0xc
c000d329:	6a 08                	push   0x8
c000d32b:	68 bf 36 02 c0       	push   0xc00236bf
c000d330:	57                   	push   edi
c000d331:	e8 4a 30 ff ff       	call   c0000380 <memcmp>
c000d336:	83 c4 10             	add    esp,0x10
c000d339:	85 c0                	test   eax,eax
c000d33b:	74 10                	je     c000d34d <CmOpen(char const*)+0x111>
c000d33d:	83 ec 0c             	sub    esp,0xc
c000d340:	68 c8 36 02 c0       	push   0xc00236c8
c000d345:	e8 6c 2a 00 00       	call   c000fdb6 <KePanic(char const*)>
c000d34a:	83 c4 10             	add    esp,0x10
c000d34d:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000d351:	83 c4 10             	add    esp,0x10
c000d354:	89 d8                	mov    eax,ebx
c000d356:	5b                   	pop    ebx
c000d357:	5e                   	pop    esi
c000d358:	5f                   	pop    edi
c000d359:	c3                   	ret    

c000d35a <CmClose(Reghive_Tag*)>:
c000d35a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d35e:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d362:	74 0b                	je     c000d36f <CmClose(Reghive_Tag*)+0x15>
c000d364:	8b 00                	mov    eax,DWORD PTR [eax]
c000d366:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d36a:	e9 39 ae ff ff       	jmp    c00081a8 <File::close()>
c000d36f:	c3                   	ret    

c000d370 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000d370:	53                   	push   ebx
c000d371:	83 ec 18             	sub    esp,0x18
c000d374:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d378:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d37c:	74 29                	je     c000d3a7 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d37e:	50                   	push   eax
c000d37f:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d384:	99                   	cdq    
c000d385:	52                   	push   edx
c000d386:	50                   	push   eax
c000d387:	ff 33                	push   DWORD PTR [ebx]
c000d389:	e8 7a ae ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000d38e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d390:	5a                   	pop    edx
c000d391:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d395:	8b 10                	mov    edx,DWORD PTR [eax]
c000d397:	51                   	push   ecx
c000d398:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d39c:	6a 00                	push   0x0
c000d39e:	6a 2b                	push   0x2b
c000d3a0:	50                   	push   eax
c000d3a1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d3a4:	83 c4 20             	add    esp,0x20
c000d3a7:	83 c4 18             	add    esp,0x18
c000d3aa:	5b                   	pop    ebx
c000d3ab:	c3                   	ret    

c000d3ac <CmGetString(Reghive_Tag*, int, char*)>:
c000d3ac:	55                   	push   ebp
c000d3ad:	57                   	push   edi
c000d3ae:	56                   	push   esi
c000d3af:	53                   	push   ebx
c000d3b0:	31 db                	xor    ebx,ebx
c000d3b2:	83 ec 70             	sub    esp,0x70
c000d3b5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000d3b9:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000d3c0:	50                   	push   eax
c000d3c1:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000d3c8:	55                   	push   ebp
c000d3c9:	e8 a2 ff ff ff       	call   c000d370 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d3ce:	83 c4 10             	add    esp,0x10
c000d3d1:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000d3d6:	c1 e0 08             	shl    eax,0x8
c000d3d9:	89 c2                	mov    edx,eax
c000d3db:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000d3e0:	09 d0                	or     eax,edx
c000d3e2:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000d3e7:	c1 e0 08             	shl    eax,0x8
c000d3ea:	09 d0                	or     eax,edx
c000d3ec:	74 25                	je     c000d413 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000d3ee:	52                   	push   edx
c000d3ef:	8d 54 24 39          	lea    edx,[esp+0x39]
c000d3f3:	52                   	push   edx
c000d3f4:	6b fb 0d             	imul   edi,ebx,0xd
c000d3f7:	50                   	push   eax
c000d3f8:	55                   	push   ebp
c000d3f9:	e8 72 ff ff ff       	call   c000d370 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d3fe:	8d 74 24 49          	lea    esi,[esp+0x49]
c000d402:	b9 27 00 00 00       	mov    ecx,0x27
c000d407:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000d40e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d410:	83 c4 10             	add    esp,0x10
c000d413:	83 c3 03             	add    ebx,0x3
c000d416:	83 fb 15             	cmp    ebx,0x15
c000d419:	75 b6                	jne    c000d3d1 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000d41b:	83 c4 6c             	add    esp,0x6c
c000d41e:	5b                   	pop    ebx
c000d41f:	5e                   	pop    esi
c000d420:	5f                   	pop    edi
c000d421:	5d                   	pop    ebp
c000d422:	c3                   	ret    

c000d423 <CmEnterDirectory(Reghive_Tag*, int)>:
c000d423:	83 ec 40             	sub    esp,0x40
c000d426:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d42a:	50                   	push   eax
c000d42b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d42f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d433:	e8 38 ff ff ff       	call   c000d370 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d438:	83 c4 10             	add    esp,0x10
c000d43b:	83 c8 ff             	or     eax,0xffffffff
c000d43e:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000d443:	75 19                	jne    c000d45e <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000d445:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000d44a:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000d44f:	c1 e0 08             	shl    eax,0x8
c000d452:	09 c2                	or     edx,eax
c000d454:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000d459:	c1 e0 10             	shl    eax,0x10
c000d45c:	09 d0                	or     eax,edx
c000d45e:	83 c4 3c             	add    esp,0x3c
c000d461:	c3                   	ret    

c000d462 <CmGetNext(Reghive_Tag*, int)>:
c000d462:	83 ec 40             	sub    esp,0x40
c000d465:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d469:	50                   	push   eax
c000d46a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d46e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d472:	e8 f9 fe ff ff       	call   c000d370 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d477:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000d47c:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000d481:	c1 e0 08             	shl    eax,0x8
c000d484:	09 c2                	or     edx,eax
c000d486:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000d48b:	83 c4 4c             	add    esp,0x4c
c000d48e:	c1 e0 10             	shl    eax,0x10
c000d491:	09 d0                	or     eax,edx
c000d493:	c3                   	ret    

c000d494 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000d494:	53                   	push   ebx
c000d495:	83 ec 18             	sub    esp,0x18
c000d498:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d49c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d4a0:	74 29                	je     c000d4cb <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d4a2:	50                   	push   eax
c000d4a3:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d4a8:	99                   	cdq    
c000d4a9:	52                   	push   edx
c000d4aa:	50                   	push   eax
c000d4ab:	ff 33                	push   DWORD PTR [ebx]
c000d4ad:	e8 56 ad ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000d4b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d4b4:	5a                   	pop    edx
c000d4b5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d4b9:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4bb:	51                   	push   ecx
c000d4bc:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d4c0:	6a 00                	push   0x0
c000d4c2:	6a 2b                	push   0x2b
c000d4c4:	50                   	push   eax
c000d4c5:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d4c8:	83 c4 20             	add    esp,0x20
c000d4cb:	83 c4 18             	add    esp,0x18
c000d4ce:	5b                   	pop    ebx
c000d4cf:	c3                   	ret    

c000d4d0 <CmFreeExtent(Reghive_Tag*, int)>:
c000d4d0:	53                   	push   ebx
c000d4d1:	83 ec 3c             	sub    esp,0x3c
c000d4d4:	6a 2b                	push   0x2b
c000d4d6:	6a 00                	push   0x0
c000d4d8:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d4dc:	53                   	push   ebx
c000d4dd:	e8 0e 30 ff ff       	call   c00004f0 <memset>
c000d4e2:	83 c4 0c             	add    esp,0xc
c000d4e5:	53                   	push   ebx
c000d4e6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d4ea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d4ee:	e8 a1 ff ff ff       	call   c000d494 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d4f3:	83 c4 48             	add    esp,0x48
c000d4f6:	5b                   	pop    ebx
c000d4f7:	c3                   	ret    

c000d4f8 <CmUpdateHeader(Reghive_Tag*)>:
c000d4f8:	83 ec 0c             	sub    esp,0xc
c000d4fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4ff:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d503:	74 10                	je     c000d515 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000d505:	52                   	push   edx
c000d506:	8d 50 05             	lea    edx,[eax+0x5]
c000d509:	52                   	push   edx
c000d50a:	6a 00                	push   0x0
c000d50c:	50                   	push   eax
c000d50d:	e8 82 ff ff ff       	call   c000d494 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d512:	83 c4 10             	add    esp,0x10
c000d515:	83 c4 0c             	add    esp,0xc
c000d518:	c3                   	ret    

c000d519 <CmExpand(Reghive_Tag*, int)>:
c000d519:	55                   	push   ebp
c000d51a:	57                   	push   edi
c000d51b:	83 cf ff             	or     edi,0xffffffff
c000d51e:	56                   	push   esi
c000d51f:	53                   	push   ebx
c000d520:	83 ec 3c             	sub    esp,0x3c
c000d523:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000d527:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000d52b:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d52f:	74 59                	je     c000d58a <CmExpand(Reghive_Tag*, int)+0x71>
c000d531:	50                   	push   eax
c000d532:	31 d2                	xor    edx,edx
c000d534:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000d538:	31 ff                	xor    edi,edi
c000d53a:	52                   	push   edx
c000d53b:	50                   	push   eax
c000d53c:	ff 33                	push   DWORD PTR [ebx]
c000d53e:	e8 c5 ac ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000d543:	83 c4 0c             	add    esp,0xc
c000d546:	6a 2b                	push   0x2b
c000d548:	6a 00                	push   0x0
c000d54a:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c000d54e:	55                   	push   ebp
c000d54f:	e8 9c 2f ff ff       	call   c00004f0 <memset>
c000d554:	83 c4 10             	add    esp,0x10
c000d557:	39 f7                	cmp    edi,esi
c000d559:	7d 1b                	jge    c000d576 <CmExpand(Reghive_Tag*, int)+0x5d>
c000d55b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d55d:	83 ec 0c             	sub    esp,0xc
c000d560:	47                   	inc    edi
c000d561:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000d565:	8b 10                	mov    edx,DWORD PTR [eax]
c000d567:	51                   	push   ecx
c000d568:	55                   	push   ebp
c000d569:	6a 00                	push   0x0
c000d56b:	6a 2b                	push   0x2b
c000d56d:	50                   	push   eax
c000d56e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d571:	83 c4 20             	add    esp,0x20
c000d574:	eb e1                	jmp    c000d557 <CmExpand(Reghive_Tag*, int)+0x3e>
c000d576:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c000d579:	83 ec 0c             	sub    esp,0xc
c000d57c:	01 fe                	add    esi,edi
c000d57e:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c000d581:	53                   	push   ebx
c000d582:	e8 71 ff ff ff       	call   c000d4f8 <CmUpdateHeader(Reghive_Tag*)>
c000d587:	83 c4 10             	add    esp,0x10
c000d58a:	83 c4 3c             	add    esp,0x3c
c000d58d:	89 f8                	mov    eax,edi
c000d58f:	5b                   	pop    ebx
c000d590:	5e                   	pop    esi
c000d591:	5f                   	pop    edi
c000d592:	5d                   	pop    ebp
c000d593:	c3                   	ret    

c000d594 <CmFindUnusedExtent(Reghive_Tag*)>:
c000d594:	55                   	push   ebp
c000d595:	57                   	push   edi
c000d596:	56                   	push   esi
c000d597:	53                   	push   ebx
c000d598:	83 cb ff             	or     ebx,0xffffffff
c000d59b:	83 ec 1c             	sub    esp,0x1c
c000d59e:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d5a2:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000d5a6:	74 68                	je     c000d610 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d5a8:	51                   	push   ecx
c000d5a9:	be 2b 00 00 00       	mov    esi,0x2b
c000d5ae:	6a 00                	push   0x0
c000d5b0:	31 ff                	xor    edi,edi
c000d5b2:	6a 00                	push   0x0
c000d5b4:	31 db                	xor    ebx,ebx
c000d5b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d5b9:	e8 4a ac ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000d5be:	83 c4 10             	add    esp,0x10
c000d5c1:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000d5c4:	76 3b                	jbe    c000d601 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000d5c6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d5c9:	83 ec 0c             	sub    esp,0xc
c000d5cc:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d5d0:	8b 10                	mov    edx,DWORD PTR [eax]
c000d5d2:	51                   	push   ecx
c000d5d3:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000d5d7:	51                   	push   ecx
c000d5d8:	6a 00                	push   0x0
c000d5da:	6a 01                	push   0x1
c000d5dc:	50                   	push   eax
c000d5dd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d5e0:	83 c4 20             	add    esp,0x20
c000d5e3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000d5e8:	74 26                	je     c000d610 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d5ea:	52                   	push   edx
c000d5eb:	43                   	inc    ebx
c000d5ec:	57                   	push   edi
c000d5ed:	56                   	push   esi
c000d5ee:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d5f1:	e8 12 ac ff ff       	call   c0008208 <File::seek(unsigned long long)>
c000d5f6:	83 c6 2b             	add    esi,0x2b
c000d5f9:	83 d7 00             	adc    edi,0x0
c000d5fc:	83 c4 10             	add    esp,0x10
c000d5ff:	eb c0                	jmp    c000d5c1 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000d601:	50                   	push   eax
c000d602:	50                   	push   eax
c000d603:	6a 40                	push   0x40
c000d605:	55                   	push   ebp
c000d606:	e8 0e ff ff ff       	call   c000d519 <CmExpand(Reghive_Tag*, int)>
c000d60b:	83 c4 10             	add    esp,0x10
c000d60e:	89 c3                	mov    ebx,eax
c000d610:	83 c4 1c             	add    esp,0x1c
c000d613:	89 d8                	mov    eax,ebx
c000d615:	5b                   	pop    ebx
c000d616:	5e                   	pop    esi
c000d617:	5f                   	pop    edi
c000d618:	5d                   	pop    ebp
c000d619:	c3                   	ret    

c000d61a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000d61a:	55                   	push   ebp
c000d61b:	57                   	push   edi
c000d61c:	56                   	push   esi
c000d61d:	53                   	push   ebx
c000d61e:	81 ec 88 00 00 00    	sub    esp,0x88
c000d624:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000d62b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d632:	e8 5d ff ff ff       	call   c000d594 <CmFindUnusedExtent(Reghive_Tag*)>
c000d637:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d63b:	83 c4 0c             	add    esp,0xc
c000d63e:	6a 2b                	push   0x2b
c000d640:	6a 00                	push   0x0
c000d642:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000d646:	55                   	push   ebp
c000d647:	e8 a4 2e ff ff       	call   c00004f0 <memset>
c000d64c:	83 c4 10             	add    esp,0x10
c000d64f:	85 db                	test   ebx,ebx
c000d651:	74 12                	je     c000d665 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000d653:	51                   	push   ecx
c000d654:	55                   	push   ebp
c000d655:	53                   	push   ebx
c000d656:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d65d:	e8 0e fd ff ff       	call   c000d370 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d662:	83 c4 10             	add    esp,0x10
c000d665:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000d669:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d670:	b9 2b 00 00 00       	mov    ecx,0x2b
c000d675:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d677:	85 db                	test   ebx,ebx
c000d679:	74 49                	je     c000d6c4 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000d67b:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000d680:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000d685:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d689:	c1 e0 08             	shl    eax,0x8
c000d68c:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000d692:	09 c8                	or     eax,ecx
c000d694:	74 11                	je     c000d6a7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000d696:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000d69a:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000d69e:	c1 e8 10             	shr    eax,0x10
c000d6a1:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000d6a5:	eb 0f                	jmp    c000d6b6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000d6a7:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d6ac:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d6b1:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d6b6:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000d6ba:	c1 ea 08             	shr    edx,0x8
c000d6bd:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000d6c2:	eb 0f                	jmp    c000d6d3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000d6c4:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d6c9:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d6ce:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d6d3:	52                   	push   edx
c000d6d4:	8d 44 24 49          	lea    eax,[esp+0x49]
c000d6d8:	50                   	push   eax
c000d6d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6dd:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d6e4:	e8 ab fd ff ff       	call   c000d494 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 db                	test   ebx,ebx
c000d6ee:	74 12                	je     c000d702 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000d6f0:	50                   	push   eax
c000d6f1:	55                   	push   ebp
c000d6f2:	53                   	push   ebx
c000d6f3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d6fa:	e8 95 fd ff ff       	call   c000d494 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d6ff:	83 c4 10             	add    esp,0x10
c000d702:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d706:	83 c4 7c             	add    esp,0x7c
c000d709:	5b                   	pop    ebx
c000d70a:	5e                   	pop    esi
c000d70b:	5f                   	pop    edi
c000d70c:	5d                   	pop    ebp
c000d70d:	c3                   	ret    

c000d70e <CmSetString(Reghive_Tag*, int, char const*)>:
c000d70e:	55                   	push   ebp
c000d70f:	57                   	push   edi
c000d710:	56                   	push   esi
c000d711:	53                   	push   ebx
c000d712:	bb 27 00 00 00       	mov    ebx,0x27
c000d717:	81 ec 88 00 00 00    	sub    esp,0x88
c000d71d:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c000d724:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000d72b:	e8 50 2e ff ff       	call   c0000580 <strlen>
c000d730:	8d 48 26             	lea    ecx,[eax+0x26]
c000d733:	89 c8                	mov    eax,ecx
c000d735:	99                   	cdq    
c000d736:	f7 fb                	idiv   ebx
c000d738:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d73c:	83 c4 10             	add    esp,0x10
c000d73f:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000d745:	7e 10                	jle    c000d757 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000d747:	83 ec 0c             	sub    esp,0xc
c000d74a:	68 d9 36 02 c0       	push   0xc00236d9
c000d74f:	e8 62 26 00 00       	call   c000fdb6 <KePanic(char const*)>
c000d754:	83 c4 10             	add    esp,0x10
c000d757:	53                   	push   ebx
c000d758:	31 ed                	xor    ebp,ebp
c000d75a:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000d75e:	53                   	push   ebx
c000d75f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d766:	57                   	push   edi
c000d767:	e8 04 fc ff ff       	call   c000d370 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d76c:	83 c4 10             	add    esp,0x10
c000d76f:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c000d773:	89 f0                	mov    eax,esi
c000d775:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c000d779:	c1 e0 08             	shl    eax,0x8
c000d77c:	09 c6                	or     esi,eax
c000d77e:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000d782:	c1 e6 08             	shl    esi,0x8
c000d785:	09 c6                	or     esi,eax
c000d787:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000d78b:	7e 72                	jle    c000d7ff <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c000d78d:	85 f6                	test   esi,esi
c000d78f:	75 25                	jne    c000d7b6 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000d791:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000d796:	8d 44 24 45          	lea    eax,[esp+0x45]
c000d79a:	50                   	push   eax
c000d79b:	6a 00                	push   0x0
c000d79d:	6a 00                	push   0x0
c000d79f:	57                   	push   edi
c000d7a0:	e8 75 fe ff ff       	call   c000d61a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d7a5:	83 c4 10             	add    esp,0x10
c000d7a8:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000d7ab:	89 c6                	mov    esi,eax
c000d7ad:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000d7b0:	c1 f8 10             	sar    eax,0x10
c000d7b3:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000d7b6:	51                   	push   ecx
c000d7b7:	8d 54 24 49          	lea    edx,[esp+0x49]
c000d7bb:	52                   	push   edx
c000d7bc:	56                   	push   esi
c000d7bd:	57                   	push   edi
c000d7be:	e8 ad fb ff ff       	call   c000d370 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d7c3:	83 c4 0c             	add    esp,0xc
c000d7c6:	6a 27                	push   0x27
c000d7c8:	6a 00                	push   0x0
c000d7ca:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d7ce:	51                   	push   ecx
c000d7cf:	e8 1c 2d ff ff       	call   c00004f0 <memset>
c000d7d4:	6b c5 27             	imul   eax,ebp,0x27
c000d7d7:	83 c4 0c             	add    esp,0xc
c000d7da:	6a 27                	push   0x27
c000d7dc:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000d7e3:	50                   	push   eax
c000d7e4:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d7e8:	51                   	push   ecx
c000d7e9:	e8 a2 2e ff ff       	call   c0000690 <strncpy>
c000d7ee:	83 c4 0c             	add    esp,0xc
c000d7f1:	8d 54 24 49          	lea    edx,[esp+0x49]
c000d7f5:	52                   	push   edx
c000d7f6:	56                   	push   esi
c000d7f7:	57                   	push   edi
c000d7f8:	e8 97 fc ff ff       	call   c000d494 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d7fd:	eb 19                	jmp    c000d818 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c000d7ff:	85 f6                	test   esi,esi
c000d801:	74 18                	je     c000d81b <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c000d803:	52                   	push   edx
c000d804:	52                   	push   edx
c000d805:	56                   	push   esi
c000d806:	57                   	push   edi
c000d807:	e8 c4 fc ff ff       	call   c000d4d0 <CmFreeExtent(Reghive_Tag*, int)>
c000d80c:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000d810:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000d814:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000d818:	83 c4 10             	add    esp,0x10
c000d81b:	45                   	inc    ebp
c000d81c:	83 c3 03             	add    ebx,0x3
c000d81f:	83 fd 07             	cmp    ebp,0x7
c000d822:	0f 85 47 ff ff ff    	jne    c000d76f <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000d828:	50                   	push   eax
c000d829:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000d82d:	50                   	push   eax
c000d82e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d835:	57                   	push   edi
c000d836:	e8 59 fc ff ff       	call   c000d494 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d83b:	81 c4 8c 00 00 00    	add    esp,0x8c
c000d841:	5b                   	pop    ebx
c000d842:	5e                   	pop    esi
c000d843:	5f                   	pop    edi
c000d844:	5d                   	pop    ebp
c000d845:	c3                   	ret    

c000d846 <CmGetMatch(char*, char*, bool, bool*)>:
c000d846:	56                   	push   esi
c000d847:	53                   	push   ebx
c000d848:	50                   	push   eax
c000d849:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d84e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d852:	74 25                	je     c000d879 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000d854:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d857:	31 db                	xor    ebx,ebx
c000d859:	50                   	push   eax
c000d85a:	50                   	push   eax
c000d85b:	8d 04 9d 00 5a 02 c0 	lea    eax,[ebx*4-0x3ffda600]
c000d862:	50                   	push   eax
c000d863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d867:	e8 14 2f ff ff       	call   c0000780 <strcmp>
c000d86c:	83 c4 10             	add    esp,0x10
c000d86f:	85 c0                	test   eax,eax
c000d871:	74 2e                	je     c000d8a1 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d873:	43                   	inc    ebx
c000d874:	83 fb 3f             	cmp    ebx,0x3f
c000d877:	75 e0                	jne    c000d859 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000d879:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d87c:	31 db                	xor    ebx,ebx
c000d87e:	51                   	push   ecx
c000d87f:	51                   	push   ecx
c000d880:	8d 04 9d 00 5a 02 c0 	lea    eax,[ebx*4-0x3ffda600]
c000d887:	50                   	push   eax
c000d888:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d88c:	e8 ef 2e ff ff       	call   c0000780 <strcmp>
c000d891:	83 c4 10             	add    esp,0x10
c000d894:	85 c0                	test   eax,eax
c000d896:	74 09                	je     c000d8a1 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d898:	43                   	inc    ebx
c000d899:	83 fb 3f             	cmp    ebx,0x3f
c000d89c:	75 e0                	jne    c000d87e <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000d89e:	83 cb ff             	or     ebx,0xffffffff
c000d8a1:	5a                   	pop    edx
c000d8a2:	89 d8                	mov    eax,ebx
c000d8a4:	5b                   	pop    ebx
c000d8a5:	5e                   	pop    esi
c000d8a6:	c3                   	ret    

c000d8a7 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000d8a7:	55                   	push   ebp
c000d8a8:	31 c0                	xor    eax,eax
c000d8aa:	57                   	push   edi
c000d8ab:	56                   	push   esi
c000d8ac:	53                   	push   ebx
c000d8ad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d8b1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d8b5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d8b9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d8bd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000d8bf:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000d8c2:	83 fd 1f             	cmp    ebp,0x1f
c000d8c5:	7f 0b                	jg     c000d8d2 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000d8c7:	0f b6 c2             	movzx  eax,dl
c000d8ca:	d3 e0                	shl    eax,cl
c000d8cc:	09 07                	or     DWORD PTR [edi],eax
c000d8ce:	b0 01                	mov    al,0x1
c000d8d0:	01 33                	add    DWORD PTR [ebx],esi
c000d8d2:	5b                   	pop    ebx
c000d8d3:	5e                   	pop    esi
c000d8d4:	5f                   	pop    edi
c000d8d5:	5d                   	pop    ebp
c000d8d6:	c3                   	ret    

c000d8d7 <CmGetShift(unsigned int*, int*, int, bool*)>:
c000d8d7:	57                   	push   edi
c000d8d8:	56                   	push   esi
c000d8d9:	53                   	push   ebx
c000d8da:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d8de:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000d8e2:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d8e6:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d8ea:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000d8ec:	7c 17                	jl     c000d905 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000d8ee:	8b 17                	mov    edx,DWORD PTR [edi]
c000d8f0:	b8 01 00 00 00       	mov    eax,0x1
c000d8f5:	d3 e0                	shl    eax,cl
c000d8f7:	48                   	dec    eax
c000d8f8:	21 d0                	and    eax,edx
c000d8fa:	d3 ea                	shr    edx,cl
c000d8fc:	89 17                	mov    DWORD PTR [edi],edx
c000d8fe:	29 0b                	sub    DWORD PTR [ebx],ecx
c000d900:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d903:	eb 05                	jmp    c000d90a <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000d905:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d908:	31 c0                	xor    eax,eax
c000d90a:	5b                   	pop    ebx
c000d90b:	5e                   	pop    esi
c000d90c:	5f                   	pop    edi
c000d90d:	c3                   	ret    

c000d90e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000d90e:	83 ec 40             	sub    esp,0x40
c000d911:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d915:	50                   	push   eax
c000d916:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d91a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d91e:	e8 4d fa ff ff       	call   c000d370 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d923:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d927:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000d92b:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000d92f:	89 10                	mov    DWORD PTR [eax],edx
c000d931:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000d934:	83 c4 4c             	add    esp,0x4c
c000d937:	c3                   	ret    

c000d938 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000d938:	55                   	push   ebp
c000d939:	57                   	push   edi
c000d93a:	56                   	push   esi
c000d93b:	53                   	push   ebx
c000d93c:	83 ec 40             	sub    esp,0x40
c000d93f:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000d943:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000d947:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000d94b:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d94f:	53                   	push   ebx
c000d950:	56                   	push   esi
c000d951:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d955:	e8 16 fa ff ff       	call   c000d370 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d95a:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000d95e:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000d962:	83 c4 0c             	add    esp,0xc
c000d965:	53                   	push   ebx
c000d966:	56                   	push   esi
c000d967:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d96b:	e8 24 fb ff ff       	call   c000d494 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d970:	83 c4 4c             	add    esp,0x4c
c000d973:	5b                   	pop    ebx
c000d974:	5e                   	pop    esi
c000d975:	5f                   	pop    edi
c000d976:	5d                   	pop    ebp
c000d977:	c3                   	ret    

c000d978 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000d978:	55                   	push   ebp
c000d979:	57                   	push   edi
c000d97a:	56                   	push   esi
c000d97b:	31 f6                	xor    esi,esi
c000d97d:	53                   	push   ebx
c000d97e:	31 db                	xor    ebx,ebx
c000d980:	83 ec 40             	sub    esp,0x40
c000d983:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d98b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d993:	6a 12                	push   0x12
c000d995:	68 ee 00 00 00       	push   0xee
c000d99a:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000d99e:	e8 4d 2b ff ff       	call   c00004f0 <memset>
c000d9a3:	83 c4 10             	add    esp,0x10
c000d9a6:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000d9aa:	6a 08                	push   0x8
c000d9ac:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d9b0:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000d9b4:	50                   	push   eax
c000d9b5:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d9b9:	55                   	push   ebp
c000d9ba:	57                   	push   edi
c000d9bb:	e8 e7 fe ff ff       	call   c000d8a7 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000d9c0:	83 c4 10             	add    esp,0x10
c000d9c3:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d9c7:	50                   	push   eax
c000d9c8:	6a 06                	push   0x6
c000d9ca:	55                   	push   ebp
c000d9cb:	57                   	push   edi
c000d9cc:	e8 06 ff ff ff       	call   c000d8d7 <CmGetShift(unsigned int*, int*, int, bool*)>
c000d9d1:	83 c4 10             	add    esp,0x10
c000d9d4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d9d9:	74 07                	je     c000d9e2 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000d9db:	46                   	inc    esi
c000d9dc:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000d9e0:	eb e1                	jmp    c000d9c3 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000d9e2:	43                   	inc    ebx
c000d9e3:	83 fb 12             	cmp    ebx,0x12
c000d9e6:	75 c2                	jne    c000d9aa <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000d9e8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d9ec:	31 f6                	xor    esi,esi
c000d9ee:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000d9f1:	50                   	push   eax
c000d9f2:	50                   	push   eax
c000d9f3:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c000d9f8:	46                   	inc    esi
c000d9f9:	8d 04 85 00 5a 02 c0 	lea    eax,[eax*4-0x3ffda600]
c000da00:	50                   	push   eax
c000da01:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000da05:	e8 66 2e ff ff       	call   c0000870 <strcat>
c000da0a:	83 c4 10             	add    esp,0x10
c000da0d:	83 fe 18             	cmp    esi,0x18
c000da10:	75 df                	jne    c000d9f1 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000da12:	83 c4 3c             	add    esp,0x3c
c000da15:	31 c0                	xor    eax,eax
c000da17:	5b                   	pop    ebx
c000da18:	5e                   	pop    esi
c000da19:	5f                   	pop    edi
c000da1a:	5d                   	pop    ebp
c000da1b:	c3                   	ret    

c000da1c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000da1c:	83 ec 40             	sub    esp,0x40
c000da1f:	8d 44 24 09          	lea    eax,[esp+0x9]
c000da23:	50                   	push   eax
c000da24:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000da28:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000da2c:	e8 3f f9 ff ff       	call   c000d370 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000da31:	58                   	pop    eax
c000da32:	5a                   	pop    edx
c000da33:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000da37:	8d 44 24 15          	lea    eax,[esp+0x15]
c000da3b:	50                   	push   eax
c000da3c:	e8 37 ff ff ff       	call   c000d978 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000da41:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000da46:	83 c4 4c             	add    esp,0x4c
c000da49:	c3                   	ret    

c000da4a <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000da4a:	55                   	push   ebp
c000da4b:	57                   	push   edi
c000da4c:	56                   	push   esi
c000da4d:	53                   	push   ebx
c000da4e:	31 db                	xor    ebx,ebx
c000da50:	83 ec 70             	sub    esp,0x70
c000da53:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000da5a:	6a 30                	push   0x30
c000da5c:	6a 00                	push   0x0
c000da5e:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000da62:	56                   	push   esi
c000da63:	e8 88 2a ff ff       	call   c00004f0 <memset>
c000da68:	83 c4 10             	add    esp,0x10
c000da6b:	83 ec 0c             	sub    esp,0xc
c000da6e:	57                   	push   edi
c000da6f:	e8 0c 2b ff ff       	call   c0000580 <strlen>
c000da74:	83 c4 10             	add    esp,0x10
c000da77:	39 d8                	cmp    eax,ebx
c000da79:	76 16                	jbe    c000da91 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000da7b:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000da7f:	83 ec 0c             	sub    esp,0xc
c000da82:	50                   	push   eax
c000da83:	e8 d8 2e ff ff       	call   c0000960 <toupper>
c000da88:	83 c4 10             	add    esp,0x10
c000da8b:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000da8e:	43                   	inc    ebx
c000da8f:	eb da                	jmp    c000da6b <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000da91:	52                   	push   edx
c000da92:	31 db                	xor    ebx,ebx
c000da94:	6a 18                	push   0x18
c000da96:	31 ff                	xor    edi,edi
c000da98:	6a 3f                	push   0x3f
c000da9a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000da9e:	50                   	push   eax
c000da9f:	e8 4c 2a ff ff       	call   c00004f0 <memset>
c000daa4:	83 c4 10             	add    esp,0x10
c000daa7:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c000daab:	8d 74 24 10          	lea    esi,[esp+0x10]
c000daaf:	84 c0                	test   al,al
c000dab1:	0f 84 af 00 00 00    	je     c000db66 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000dab7:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000dabb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000dabe:	83 ec 0c             	sub    esp,0xc
c000dac1:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c000dac6:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000daca:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000dace:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000dad3:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000dad7:	56                   	push   esi
c000dad8:	e8 a3 2a ff ff       	call   c0000580 <strlen>
c000dadd:	83 c4 10             	add    esp,0x10
c000dae0:	85 c0                	test   eax,eax
c000dae2:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dae6:	74 0b                	je     c000daf3 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000dae8:	50                   	push   eax
c000dae9:	6a 01                	push   0x1
c000daeb:	56                   	push   esi
c000daec:	8d 44 24 20          	lea    eax,[esp+0x20]
c000daf0:	50                   	push   eax
c000daf1:	eb 0a                	jmp    c000dafd <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000daf3:	50                   	push   eax
c000daf4:	6a 00                	push   0x0
c000daf6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000dafa:	50                   	push   eax
c000dafb:	6a 00                	push   0x0
c000dafd:	e8 44 fd ff ff       	call   c000d846 <CmGetMatch(char*, char*, bool, bool*)>
c000db02:	83 c4 10             	add    esp,0x10
c000db05:	83 f8 ff             	cmp    eax,0xffffffff
c000db08:	75 1a                	jne    c000db24 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000db0a:	83 ec 0c             	sub    esp,0xc
c000db0d:	68 ee 36 02 c0       	push   0xc00236ee
c000db12:	e8 9f 22 00 00       	call   c000fdb6 <KePanic(char const*)>
c000db17:	83 c4 10             	add    esp,0x10
c000db1a:	b8 02 00 00 00       	mov    eax,0x2
c000db1f:	e9 bb 00 00 00       	jmp    c000dbdf <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000db24:	83 ff 18             	cmp    edi,0x18
c000db27:	75 1a                	jne    c000db43 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000db29:	83 ec 0c             	sub    esp,0xc
c000db2c:	68 03 37 02 c0       	push   0xc0023703
c000db31:	e8 80 22 00 00       	call   c000fdb6 <KePanic(char const*)>
c000db36:	83 c4 10             	add    esp,0x10
c000db39:	b8 01 00 00 00       	mov    eax,0x1
c000db3e:	e9 9c 00 00 00       	jmp    c000dbdf <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000db43:	47                   	inc    edi
c000db44:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000db49:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000db4d:	0f 45 dd             	cmovne ebx,ebp
c000db50:	83 ec 0c             	sub    esp,0xc
c000db53:	56                   	push   esi
c000db54:	e8 27 2a ff ff       	call   c0000580 <strlen>
c000db59:	83 c4 10             	add    esp,0x10
c000db5c:	85 c0                	test   eax,eax
c000db5e:	74 06                	je     c000db66 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000db60:	43                   	inc    ebx
c000db61:	e9 41 ff ff ff       	jmp    c000daa7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000db66:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000db6e:	31 db                	xor    ebx,ebx
c000db70:	31 ff                	xor    edi,edi
c000db72:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000db7a:	50                   	push   eax
c000db7b:	6a 12                	push   0x12
c000db7d:	68 ee 00 00 00       	push   0xee
c000db82:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000db89:	e8 62 29 ff ff       	call   c00004f0 <memset>
c000db8e:	83 c4 10             	add    esp,0x10
c000db91:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000db95:	83 fb 17             	cmp    ebx,0x17
c000db98:	7e 26                	jle    c000dbc0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c000db9a:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000db9e:	50                   	push   eax
c000db9f:	6a 08                	push   0x8
c000dba1:	55                   	push   ebp
c000dba2:	56                   	push   esi
c000dba3:	e8 2f fd ff ff       	call   c000d8d7 <CmGetShift(unsigned int*, int*, int, bool*)>
c000dba8:	83 c4 10             	add    esp,0x10
c000dbab:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dbb0:	74 26                	je     c000dbd8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c000dbb2:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000dbb9:	4b                   	dec    ebx
c000dbba:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000dbbd:	47                   	inc    edi
c000dbbe:	eb 1c                	jmp    c000dbdc <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000dbc0:	6a 06                	push   0x6
c000dbc2:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c000dbc7:	50                   	push   eax
c000dbc8:	55                   	push   ebp
c000dbc9:	56                   	push   esi
c000dbca:	e8 d8 fc ff ff       	call   c000d8a7 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000dbcf:	83 c4 10             	add    esp,0x10
c000dbd2:	84 c0                	test   al,al
c000dbd4:	75 06                	jne    c000dbdc <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000dbd6:	eb c2                	jmp    c000db9a <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c000dbd8:	31 c0                	xor    eax,eax
c000dbda:	eb 03                	jmp    c000dbdf <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000dbdc:	43                   	inc    ebx
c000dbdd:	eb b2                	jmp    c000db91 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c000dbdf:	83 c4 6c             	add    esp,0x6c
c000dbe2:	5b                   	pop    ebx
c000dbe3:	5e                   	pop    esi
c000dbe4:	5f                   	pop    edi
c000dbe5:	5d                   	pop    ebp
c000dbe6:	c3                   	ret    

c000dbe7 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000dbe7:	53                   	push   ebx
c000dbe8:	83 ec 3c             	sub    esp,0x3c
c000dbeb:	6a 2b                	push   0x2b
c000dbed:	6a 00                	push   0x0
c000dbef:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dbf3:	53                   	push   ebx
c000dbf4:	e8 f7 28 ff ff       	call   c00004f0 <memset>
c000dbf9:	58                   	pop    eax
c000dbfa:	5a                   	pop    edx
c000dbfb:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dbff:	50                   	push   eax
c000dc00:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dc04:	e8 41 fe ff ff       	call   c000da4a <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dc09:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000dc0e:	83 c4 0c             	add    esp,0xc
c000dc11:	6a 15                	push   0x15
c000dc13:	6a 00                	push   0x0
c000dc15:	8d 44 24 27          	lea    eax,[esp+0x27]
c000dc19:	50                   	push   eax
c000dc1a:	e8 d1 28 ff ff       	call   c00004f0 <memset>
c000dc1f:	53                   	push   ebx
c000dc20:	6a 00                	push   0x0
c000dc22:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dc26:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dc2a:	e8 eb f9 ff ff       	call   c000d61a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dc2f:	83 c4 58             	add    esp,0x58
c000dc32:	5b                   	pop    ebx
c000dc33:	c3                   	ret    

c000dc34 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000dc34:	56                   	push   esi
c000dc35:	53                   	push   ebx
c000dc36:	83 ec 48             	sub    esp,0x48
c000dc39:	6a 12                	push   0x12
c000dc3b:	68 ff 00 00 00       	push   0xff
c000dc40:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000dc44:	56                   	push   esi
c000dc45:	e8 a6 28 ff ff       	call   c00004f0 <memset>
c000dc4a:	5a                   	pop    edx
c000dc4b:	59                   	pop    ecx
c000dc4c:	56                   	push   esi
c000dc4d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000dc51:	e8 f4 fd ff ff       	call   c000da4a <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dc56:	83 c4 10             	add    esp,0x10
c000dc59:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000dc5d:	85 db                	test   ebx,ebx
c000dc5f:	74 42                	je     c000dca3 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000dc61:	50                   	push   eax
c000dc62:	8d 44 24 19          	lea    eax,[esp+0x19]
c000dc66:	50                   	push   eax
c000dc67:	53                   	push   ebx
c000dc68:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dc6c:	e8 ff f6 ff ff       	call   c000d370 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dc71:	83 c4 0c             	add    esp,0xc
c000dc74:	6a 12                	push   0x12
c000dc76:	8d 44 24 21          	lea    eax,[esp+0x21]
c000dc7a:	50                   	push   eax
c000dc7b:	56                   	push   esi
c000dc7c:	e8 ff 26 ff ff       	call   c0000380 <memcmp>
c000dc81:	83 c4 10             	add    esp,0x10
c000dc84:	85 c0                	test   eax,eax
c000dc86:	74 1e                	je     c000dca6 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000dc88:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000dc8d:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000dc92:	c1 e3 08             	shl    ebx,0x8
c000dc95:	09 d8                	or     eax,ebx
c000dc97:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000dc9c:	c1 e3 10             	shl    ebx,0x10
c000dc9f:	09 c3                	or     ebx,eax
c000dca1:	eb ba                	jmp    c000dc5d <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000dca3:	83 cb ff             	or     ebx,0xffffffff
c000dca6:	83 c4 44             	add    esp,0x44
c000dca9:	89 d8                	mov    eax,ebx
c000dcab:	5b                   	pop    ebx
c000dcac:	5e                   	pop    esi
c000dcad:	c3                   	ret    

c000dcae <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000dcae:	57                   	push   edi
c000dcaf:	56                   	push   esi
c000dcb0:	53                   	push   ebx
c000dcb1:	83 ec 34             	sub    esp,0x34
c000dcb4:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000dcb8:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000dcbc:	6a 2b                	push   0x2b
c000dcbe:	6a 00                	push   0x0
c000dcc0:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dcc4:	53                   	push   ebx
c000dcc5:	e8 26 28 ff ff       	call   c00004f0 <memset>
c000dcca:	58                   	pop    eax
c000dccb:	5a                   	pop    edx
c000dccc:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dcd0:	50                   	push   eax
c000dcd1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dcd5:	e8 70 fd ff ff       	call   c000da4a <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dcda:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c000dcde:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000dce2:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000dce6:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000dcea:	53                   	push   ebx
c000dceb:	6a 00                	push   0x0
c000dced:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dcf1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dcf5:	e8 20 f9 ff ff       	call   c000d61a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dcfa:	83 c4 50             	add    esp,0x50
c000dcfd:	5b                   	pop    ebx
c000dcfe:	5e                   	pop    esi
c000dcff:	5f                   	pop    edi
c000dd00:	c3                   	ret    

c000dd01 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000dd01:	55                   	push   ebp
c000dd02:	57                   	push   edi
c000dd03:	56                   	push   esi
c000dd04:	53                   	push   ebx
c000dd05:	83 ec 40             	sub    esp,0x40
c000dd08:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000dd0c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000dd10:	6a 2b                	push   0x2b
c000dd12:	6a 00                	push   0x0
c000dd14:	8d 74 24 11          	lea    esi,[esp+0x11]
c000dd18:	56                   	push   esi
c000dd19:	e8 d2 27 ff ff       	call   c00004f0 <memset>
c000dd1e:	5f                   	pop    edi
c000dd1f:	89 ef                	mov    edi,ebp
c000dd21:	58                   	pop    eax
c000dd22:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dd26:	50                   	push   eax
c000dd27:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000dd2b:	e8 1a fd ff ff       	call   c000da4a <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dd30:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000dd35:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000dd3a:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000dd3f:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000dd44:	83 c4 10             	add    esp,0x10
c000dd47:	85 ed                	test   ebp,ebp
c000dd49:	74 14                	je     c000dd5f <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000dd4b:	51                   	push   ecx
c000dd4c:	51                   	push   ecx
c000dd4d:	57                   	push   edi
c000dd4e:	53                   	push   ebx
c000dd4f:	e8 0e f7 ff ff       	call   c000d462 <CmGetNext(Reghive_Tag*, int)>
c000dd54:	83 c4 10             	add    esp,0x10
c000dd57:	85 c0                	test   eax,eax
c000dd59:	74 04                	je     c000dd5f <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000dd5b:	89 c7                	mov    edi,eax
c000dd5d:	eb e8                	jmp    c000dd47 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000dd5f:	56                   	push   esi
c000dd60:	6a 00                	push   0x0
c000dd62:	57                   	push   edi
c000dd63:	53                   	push   ebx
c000dd64:	e8 b1 f8 ff ff       	call   c000d61a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dd69:	83 c4 0c             	add    esp,0xc
c000dd6c:	56                   	push   esi
c000dd6d:	50                   	push   eax
c000dd6e:	89 c7                	mov    edi,eax
c000dd70:	53                   	push   ebx
c000dd71:	e8 fa f5 ff ff       	call   c000d370 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dd76:	58                   	pop    eax
c000dd77:	5a                   	pop    edx
c000dd78:	6a 6c                	push   0x6c
c000dd7a:	6a 00                	push   0x0
c000dd7c:	6a 00                	push   0x0
c000dd7e:	68 14 37 02 c0       	push   0xc0023714
c000dd83:	57                   	push   edi
c000dd84:	53                   	push   ebx
c000dd85:	e8 24 ff ff ff       	call   c000dcae <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000dd8a:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000dd8e:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000dd92:	c1 e8 10             	shr    eax,0x10
c000dd95:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000dd99:	83 c4 1c             	add    esp,0x1c
c000dd9c:	56                   	push   esi
c000dd9d:	57                   	push   edi
c000dd9e:	53                   	push   ebx
c000dd9f:	e8 f0 f6 ff ff       	call   c000d494 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000dda4:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000dda9:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000ddae:	c1 e0 08             	shl    eax,0x8
c000ddb1:	09 c2                	or     edx,eax
c000ddb3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000ddb8:	83 c4 4c             	add    esp,0x4c
c000ddbb:	5b                   	pop    ebx
c000ddbc:	5e                   	pop    esi
c000ddbd:	c1 e0 10             	shl    eax,0x10
c000ddc0:	09 d0                	or     eax,edx
c000ddc2:	5f                   	pop    edi
c000ddc3:	5d                   	pop    ebp
c000ddc4:	c3                   	ret    

c000ddc5 <zStrtok(char*, char const*)>:
c000ddc5:	55                   	push   ebp
c000ddc6:	57                   	push   edi
c000ddc7:	56                   	push   esi
c000ddc8:	53                   	push   ebx
c000ddc9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ddcd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ddd1:	85 db                	test   ebx,ebx
c000ddd3:	74 2f                	je     c000de04 <zStrtok(char*, char const*)+0x3f>
c000ddd5:	85 c0                	test   eax,eax
c000ddd7:	75 09                	jne    c000dde2 <zStrtok(char*, char const*)+0x1d>
c000ddd9:	a1 c0 c0 02 c0       	mov    eax,ds:0xc002c0c0
c000ddde:	85 c0                	test   eax,eax
c000dde0:	74 50                	je     c000de32 <zStrtok(char*, char const*)+0x6d>
c000dde2:	31 c9                	xor    ecx,ecx
c000dde4:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000dde8:	74 03                	je     c000dded <zStrtok(char*, char const*)+0x28>
c000ddea:	41                   	inc    ecx
c000ddeb:	eb f7                	jmp    c000dde4 <zStrtok(char*, char const*)+0x1f>
c000dded:	31 d2                	xor    edx,edx
c000ddef:	39 ca                	cmp    edx,ecx
c000ddf1:	74 15                	je     c000de08 <zStrtok(char*, char const*)+0x43>
c000ddf3:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000ddf7:	8d 3c 10             	lea    edi,[eax+edx*1]
c000ddfa:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000ddfd:	39 ee                	cmp    esi,ebp
c000ddff:	74 13                	je     c000de14 <zStrtok(char*, char const*)+0x4f>
c000de01:	42                   	inc    edx
c000de02:	eb eb                	jmp    c000ddef <zStrtok(char*, char const*)+0x2a>
c000de04:	31 c0                	xor    eax,eax
c000de06:	eb 2a                	jmp    c000de32 <zStrtok(char*, char const*)+0x6d>
c000de08:	c7 05 c0 c0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c0c0,0x0
c000de12:	eb 1e                	jmp    c000de32 <zStrtok(char*, char const*)+0x6d>
c000de14:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000de17:	39 ce                	cmp    esi,ecx
c000de19:	75 0a                	jne    c000de25 <zStrtok(char*, char const*)+0x60>
c000de1b:	40                   	inc    eax
c000de1c:	a3 c0 c0 02 c0       	mov    ds:0xc002c0c0,eax
c000de21:	89 d8                	mov    eax,ebx
c000de23:	eb 0d                	jmp    c000de32 <zStrtok(char*, char const*)+0x6d>
c000de25:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000de28:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000de2c:	89 15 c0 c0 02 c0    	mov    DWORD PTR ds:0xc002c0c0,edx
c000de32:	5b                   	pop    ebx
c000de33:	5e                   	pop    esi
c000de34:	5f                   	pop    edi
c000de35:	5d                   	pop    ebp
c000de36:	c3                   	ret    

c000de37 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000de37:	57                   	push   edi
c000de38:	56                   	push   esi
c000de39:	53                   	push   ebx
c000de3a:	81 ec 08 01 00 00    	sub    esp,0x108
c000de40:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000de47:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000de4e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000de52:	53                   	push   ebx
c000de53:	e8 f8 27 ff ff       	call   c0000650 <strcpy>
c000de58:	59                   	pop    ecx
c000de59:	5e                   	pop    esi
c000de5a:	68 67 48 02 c0       	push   0xc0024867
c000de5f:	53                   	push   ebx
c000de60:	bb 01 00 00 00       	mov    ebx,0x1
c000de65:	e8 5b ff ff ff       	call   c000ddc5 <zStrtok(char*, char const*)>
c000de6a:	83 c4 10             	add    esp,0x10
c000de6d:	85 c0                	test   eax,eax
c000de6f:	74 3b                	je     c000deac <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000de71:	52                   	push   edx
c000de72:	50                   	push   eax
c000de73:	6a 01                	push   0x1
c000de75:	57                   	push   edi
c000de76:	e8 b9 fd ff ff       	call   c000dc34 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000de7b:	59                   	pop    ecx
c000de7c:	5e                   	pop    esi
c000de7d:	89 c3                	mov    ebx,eax
c000de7f:	68 67 48 02 c0       	push   0xc0024867
c000de84:	6a 00                	push   0x0
c000de86:	e8 3a ff ff ff       	call   c000ddc5 <zStrtok(char*, char const*)>
c000de8b:	83 c4 10             	add    esp,0x10
c000de8e:	85 c0                	test   eax,eax
c000de90:	89 c6                	mov    esi,eax
c000de92:	74 18                	je     c000deac <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000de94:	52                   	push   edx
c000de95:	52                   	push   edx
c000de96:	53                   	push   ebx
c000de97:	57                   	push   edi
c000de98:	e8 86 f5 ff ff       	call   c000d423 <CmEnterDirectory(Reghive_Tag*, int)>
c000de9d:	83 c4 10             	add    esp,0x10
c000dea0:	83 f8 ff             	cmp    eax,0xffffffff
c000dea3:	89 c3                	mov    ebx,eax
c000dea5:	74 05                	je     c000deac <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000dea7:	50                   	push   eax
c000dea8:	56                   	push   esi
c000dea9:	53                   	push   ebx
c000deaa:	eb c9                	jmp    c000de75 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000deac:	81 c4 00 01 00 00    	add    esp,0x100
c000deb2:	89 d8                	mov    eax,ebx
c000deb4:	5b                   	pop    ebx
c000deb5:	5e                   	pop    esi
c000deb6:	5f                   	pop    edi
c000deb7:	c3                   	ret    

c000deb8 <CmDisplayTree(Reghive_Tag*, int, int)>:
c000deb8:	55                   	push   ebp
c000deb9:	57                   	push   edi
c000deba:	56                   	push   esi
c000debb:	53                   	push   ebx
c000debc:	83 ec 5c             	sub    esp,0x5c
c000debf:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000dec3:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000dec7:	85 db                	test   ebx,ebx
c000dec9:	0f 8e 84 00 00 00    	jle    c000df53 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000decf:	57                   	push   edi
c000ded0:	31 ed                	xor    ebp,ebp
c000ded2:	6a 32                	push   0x32
c000ded4:	6a 00                	push   0x0
c000ded6:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000deda:	57                   	push   edi
c000dedb:	e8 10 26 ff ff       	call   c00004f0 <memset>
c000dee0:	83 c4 0c             	add    esp,0xc
c000dee3:	57                   	push   edi
c000dee4:	53                   	push   ebx
c000dee5:	56                   	push   esi
c000dee6:	e8 31 fb ff ff       	call   c000da1c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000deeb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000def6:	7d 13                	jge    c000df0b <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000def8:	83 ec 0c             	sub    esp,0xc
c000defb:	45                   	inc    ebp
c000defc:	68 58 4d 02 c0       	push   0xc0024d58
c000df01:	e8 48 90 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000df06:	83 c4 10             	add    esp,0x10
c000df09:	eb e7                	jmp    c000def2 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000df0b:	51                   	push   ecx
c000df0c:	57                   	push   edi
c000df0d:	53                   	push   ebx
c000df0e:	68 1a 37 02 c0       	push   0xc002371a
c000df13:	e8 36 90 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000df18:	83 c4 10             	add    esp,0x10
c000df1b:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000df20:	75 1e                	jne    c000df40 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000df22:	52                   	push   edx
c000df23:	52                   	push   edx
c000df24:	53                   	push   ebx
c000df25:	56                   	push   esi
c000df26:	e8 f8 f4 ff ff       	call   c000d423 <CmEnterDirectory(Reghive_Tag*, int)>
c000df2b:	83 c4 0c             	add    esp,0xc
c000df2e:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000df32:	8d 51 04             	lea    edx,[ecx+0x4]
c000df35:	52                   	push   edx
c000df36:	50                   	push   eax
c000df37:	56                   	push   esi
c000df38:	e8 7b ff ff ff       	call   c000deb8 <CmDisplayTree(Reghive_Tag*, int, int)>
c000df3d:	83 c4 10             	add    esp,0x10
c000df40:	50                   	push   eax
c000df41:	50                   	push   eax
c000df42:	53                   	push   ebx
c000df43:	56                   	push   esi
c000df44:	e8 19 f5 ff ff       	call   c000d462 <CmGetNext(Reghive_Tag*, int)>
c000df49:	83 c4 10             	add    esp,0x10
c000df4c:	89 c3                	mov    ebx,eax
c000df4e:	e9 74 ff ff ff       	jmp    c000dec7 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000df53:	83 c4 5c             	add    esp,0x5c
c000df56:	5b                   	pop    ebx
c000df57:	5e                   	pop    esi
c000df58:	5f                   	pop    edi
c000df59:	5d                   	pop    ebp
c000df5a:	c3                   	ret    

c000df5b <CmSplitFinalSlashInPlace(char*)>:
c000df5b:	53                   	push   ebx
c000df5c:	83 ec 14             	sub    esp,0x14
c000df5f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df63:	53                   	push   ebx
c000df64:	e8 17 26 ff ff       	call   c0000580 <strlen>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	48                   	dec    eax
c000df6d:	85 c0                	test   eax,eax
c000df6f:	74 15                	je     c000df86 <CmSplitFinalSlashInPlace(char*)+0x2b>
c000df71:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000df75:	8d 14 03             	lea    edx,[ebx+eax*1]
c000df78:	75 09                	jne    c000df83 <CmSplitFinalSlashInPlace(char*)+0x28>
c000df7a:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000df7d:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000df81:	eb 05                	jmp    c000df88 <CmSplitFinalSlashInPlace(char*)+0x2d>
c000df83:	48                   	dec    eax
c000df84:	eb e7                	jmp    c000df6d <CmSplitFinalSlashInPlace(char*)+0x12>
c000df86:	31 c0                	xor    eax,eax
c000df88:	83 c4 08             	add    esp,0x8
c000df8b:	5b                   	pop    ebx
c000df8c:	c3                   	ret    
c000df8d:	66 90                	xchg   ax,ax
c000df8f:	90                   	nop

c000df90 <Krnl::handlePowerButton()>:
c000df90:	83 ec 0c             	sub    esp,0xc
c000df93:	e8 53 27 00 00       	call   c00106eb <KeHandlePowerButton()>
c000df98:	90                   	nop
c000df99:	83 c4 0c             	add    esp,0xc
c000df9c:	c3                   	ret    
c000df9d:	8d 76 00             	lea    esi,[esi+0x0]

c000dfa0 <Krnl::handleSleepButton()>:
c000dfa0:	83 ec 0c             	sub    esp,0xc
c000dfa3:	e8 5b 27 00 00       	call   c0010703 <KeHandleSleepButton()>
c000dfa8:	90                   	nop
c000dfa9:	83 c4 0c             	add    esp,0xc
c000dfac:	c3                   	ret    
c000dfad:	90                   	nop

c000dfae <Computer::close(int, int, void*)>:
c000dfae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dfb3:	c3                   	ret    

c000dfb4 <Computer::open(int, int, void*)>:
c000dfb4:	56                   	push   esi
c000dfb5:	53                   	push   ebx
c000dfb6:	83 ec 04             	sub    esp,0x4
c000dfb9:	f6 05 24 e1 02 c0 04 	test   BYTE PTR ds:0xc002e124,0x4
c000dfc0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dfc4:	0f 94 05 e0 60 02 c0 	sete   BYTE PTR ds:0xc00260e0
c000dfcb:	39 1d d0 c0 02 c0    	cmp    DWORD PTR ds:0xc002c0d0,ebx
c000dfd1:	74 10                	je     c000dfe3 <Computer::open(int, int, void*)+0x2f>
c000dfd3:	83 ec 0c             	sub    esp,0xc
c000dfd6:	68 24 37 02 c0       	push   0xc0023724
c000dfdb:	e8 d6 1d 00 00       	call   c000fdb6 <KePanic(char const*)>
c000dfe0:	83 c4 10             	add    esp,0x10
c000dfe3:	83 ec 0c             	sub    esp,0xc
c000dfe6:	68 dc 37 02 c0       	push   0xc00237dc
c000dfeb:	e8 37 f1 ff ff       	call   c000d127 <KeSetBootMessage(char const*)>
c000dff0:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000dff7:	e8 74 1a 00 00       	call   c000fa70 <malloc>
c000dffc:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfff:	89 c6                	mov    esi,eax
c000e001:	e8 3a e7 ff ff       	call   c000c740 <ACPI::ACPI()>
c000e006:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000e00c:	58                   	pop    eax
c000e00d:	5a                   	pop    edx
c000e00e:	56                   	push   esi
c000e00f:	53                   	push   ebx
c000e010:	e8 83 b9 ff ff       	call   c0009998 <Device::addChild(Device*)>
c000e015:	c7 04 24 f4 37 02 c0 	mov    DWORD PTR [esp],0xc00237f4
c000e01c:	e8 06 f1 ff ff       	call   c000d127 <KeSetBootMessage(char const*)>
c000e021:	e8 1f b1 00 00       	call   c0019145 <HalEnableNMI()>
c000e026:	e8 4f a3 00 00       	call   c001837a <HalDetectFeatures()>
c000e02b:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000e032:	e8 39 1a 00 00       	call   c000fa70 <malloc>
c000e037:	89 04 24             	mov    DWORD PTR [esp],eax
c000e03a:	89 c6                	mov    esi,eax
c000e03c:	e8 3f bc 00 00       	call   c0019c80 <CPU::CPU()>
c000e041:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000e047:	59                   	pop    ecx
c000e048:	58                   	pop    eax
c000e049:	56                   	push   esi
c000e04a:	53                   	push   ebx
c000e04b:	e8 48 b9 ff ff       	call   c0009998 <Device::addChild(Device*)>
c000e050:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e054:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e05a:	8b 10                	mov    edx,DWORD PTR [eax]
c000e05c:	51                   	push   ecx
c000e05d:	6a 00                	push   0x0
c000e05f:	6a 00                	push   0x0
c000e061:	50                   	push   eax
c000e062:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e065:	83 c4 14             	add    esp,0x14
c000e068:	68 50 37 02 c0       	push   0xc0023750
c000e06d:	e8 b5 f0 ff ff       	call   c000d127 <KeSetBootMessage(char const*)>
c000e072:	e8 64 b8 00 00       	call   c00198db <HalInitialiseCoprocessor()>
c000e077:	c7 04 24 0e 38 02 c0 	mov    DWORD PTR [esp],0xc002380e
c000e07e:	e8 a4 f0 ff ff       	call   c000d127 <KeSetBootMessage(char const*)>
c000e083:	c7 04 24 9a e0 00 c0 	mov    DWORD PTR [esp],0xc000e09a
c000e08a:	e8 25 88 00 00       	call   c00168b4 <setupMultitasking(void (*)())>
c000e08f:	83 c4 14             	add    esp,0x14
c000e092:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e097:	5b                   	pop    ebx
c000e098:	5e                   	pop    esi
c000e099:	c3                   	ret    

c000e09a <KeFirstTask()>:
c000e09a:	53                   	push   ebx
c000e09b:	83 ec 14             	sub    esp,0x14
c000e09e:	fb                   	sti    
c000e09f:	68 29 38 02 c0       	push   0xc0023829
c000e0a4:	e8 7e f0 ff ff       	call   c000d127 <KeSetBootMessage(char const*)>
c000e0a9:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c000e0b0:	e8 bb 19 00 00       	call   c000fa70 <malloc>
c000e0b5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e0bc:	89 c3                	mov    ebx,eax
c000e0be:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000e0c3:	50                   	push   eax
c000e0c4:	68 42 38 02 c0       	push   0xc0023842
c000e0c9:	6a 01                	push   0x1
c000e0cb:	53                   	push   ebx
c000e0cc:	e8 6f 84 00 00       	call   c0016540 <Process::Process(bool, char const*, Process*, char**)>
c000e0d1:	83 c4 20             	add    esp,0x20
c000e0d4:	68 ff 00 00 00       	push   0xff
c000e0d9:	6a 00                	push   0x0
c000e0db:	68 99 ed 00 c0       	push   0xc000ed99
c000e0e0:	53                   	push   ebx
c000e0e1:	e8 9a 86 00 00       	call   c0016780 <Process::createThread(void (*)(void*), void*, int)>
c000e0e6:	8b 15 58 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea58
c000e0ec:	6a 7a                	push   0x7a
c000e0ee:	6a 00                	push   0x0
c000e0f0:	68 60 70 01 c0       	push   0xc0017060
c000e0f5:	52                   	push   edx
c000e0f6:	e8 85 86 00 00       	call   c0016780 <Process::createThread(void (*)(void*), void*, int)>
c000e0fb:	83 c4 14             	add    esp,0x14
c000e0fe:	68 74 37 02 c0       	push   0xc0023774
c000e103:	a3 10 ea 02 c0       	mov    ds:0xc002ea10,eax
c000e108:	e8 1a f0 ff ff       	call   c000d127 <KeSetBootMessage(char const*)>
c000e10d:	c6 05 d5 c0 02 c0 01 	mov    BYTE PTR ds:0xc002c0d5,0x1
c000e114:	e8 f4 26 00 00       	call   c001080d <KeInitRand()>
c000e119:	e8 10 93 00 00       	call   c001742e <Vm::initialise8086()>
c000e11e:	e8 b3 9c ff ff       	call   c0007dd6 <Fs::initVFS()>
c000e123:	c7 04 24 e8 34 02 c0 	mov    DWORD PTR [esp],0xc00234e8
c000e12a:	e8 f8 ef ff ff       	call   c000d127 <KeSetBootMessage(char const*)>
c000e12f:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000e134:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000e13a:	8b 10                	mov    edx,DWORD PTR [eax]
c000e13c:	6a 00                	push   0x0
c000e13e:	6a 00                	push   0x0
c000e140:	6a 00                	push   0x0
c000e142:	50                   	push   eax
c000e143:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e146:	83 c4 14             	add    esp,0x14
c000e149:	68 74 37 02 c0       	push   0xc0023774
c000e14e:	e8 d4 ef ff ff       	call   c000d127 <KeSetBootMessage(char const*)>
c000e153:	e8 63 94 ff ff       	call   c00075bb <KeInitialiseSymlinks()>
c000e158:	e8 f5 05 00 00       	call   c000e752 <KeLoadSystemEnv()>
c000e15d:	e8 b9 25 00 00       	call   c001071b <KeSetupPowerManager()>
c000e162:	c7 04 24 98 37 02 c0 	mov    DWORD PTR [esp],0xc0023798
c000e169:	e8 b9 ef ff ff       	call   c000d127 <KeSetBootMessage(char const*)>
c000e16e:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000e173:	59                   	pop    ecx
c000e174:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000e17a:	53                   	push   ebx
c000e17b:	e8 34 b9 ff ff       	call   c0009ab4 <Device::loadDriversForAll()>
c000e180:	c7 04 24 4f 38 02 c0 	mov    DWORD PTR [esp],0xc002384f
c000e187:	e8 9b ef ff ff       	call   c000d127 <KeSetBootMessage(char const*)>
c000e18c:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c000e192:	58                   	pop    eax
c000e193:	5a                   	pop    edx
c000e194:	6a 01                	push   0x1
c000e196:	68 60 38 02 c0       	push   0xc0023860
c000e19b:	e8 0c 7d 00 00       	call   c0015eac <Thr::loadDLL(char const*, bool)>
c000e1a0:	59                   	pop    ecx
c000e1a1:	5a                   	pop    edx
c000e1a2:	53                   	push   ebx
c000e1a3:	50                   	push   eax
c000e1a4:	e8 64 7f 00 00       	call   c001610d <Thr::executeDLL(unsigned long, void*)>
c000e1a9:	83 c4 10             	add    esp,0x10
c000e1ac:	83 ec 0c             	sub    esp,0xc
c000e1af:	6a 02                	push   0x2
c000e1b1:	e8 e2 88 00 00       	call   c0016a98 <blockTask(TaskState)>
c000e1b6:	83 c4 10             	add    esp,0x10
c000e1b9:	eb f1                	jmp    c000e1ac <KeFirstTask()+0x112>
c000e1bb:	90                   	nop

c000e1bc <Computer::Computer()>:
c000e1bc:	83 ec 0c             	sub    esp,0xc
c000e1bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1c3:	83 ec 08             	sub    esp,0x8
c000e1c6:	68 7c 38 02 c0       	push   0xc002387c
c000e1cb:	50                   	push   eax
c000e1cc:	e8 29 b9 ff ff       	call   c0009afa <Device::Device(char const*)>
c000e1d1:	83 c4 10             	add    esp,0x10
c000e1d4:	ba 90 38 02 c0       	mov    edx,0xc0023890
c000e1d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1dd:	89 10                	mov    DWORD PTR [eax],edx
c000e1df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1e3:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e1ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1f1:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e1fb:	90                   	nop
c000e1fc:	83 c4 0c             	add    esp,0xc
c000e1ff:	c3                   	ret    

c000e200 <KePrepareShutdown()>:
c000e200:	83 ec 0c             	sub    esp,0xc
c000e203:	e8 8d ee ff ff       	call   c000d095 <KeExecuteAtexit()>
c000e208:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000e20d:	83 ec 0c             	sub    esp,0xc
c000e210:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000e216:	50                   	push   eax
c000e217:	e8 e4 b9 ff ff       	call   c0009c00 <Device::closeAll()>
c000e21c:	83 c4 1c             	add    esp,0x1c
c000e21f:	c3                   	ret    

c000e220 <KeShutdown()>:
c000e220:	83 ec 0c             	sub    esp,0xc
c000e223:	e8 d8 ff ff ff       	call   c000e200 <KePrepareShutdown()>
c000e228:	a1 cc c0 02 c0       	mov    eax,ds:0xc002c0cc
c000e22d:	85 c0                	test   eax,eax
c000e22f:	74 02                	je     c000e233 <KeShutdown()+0x13>
c000e231:	ff d0                	call   eax
c000e233:	83 ec 0c             	sub    esp,0xc
c000e236:	68 b8 37 02 c0       	push   0xc00237b8
c000e23b:	e8 76 1b 00 00       	call   c000fdb6 <KePanic(char const*)>
c000e240:	83 c4 1c             	add    esp,0x1c
c000e243:	c3                   	ret    

c000e244 <KeSleep()>:
c000e244:	a1 c4 c0 02 c0       	mov    eax,ds:0xc002c0c4
c000e249:	85 c0                	test   eax,eax
c000e24b:	74 02                	je     c000e24f <KeSleep()+0xb>
c000e24d:	ff e0                	jmp    eax
c000e24f:	c3                   	ret    

c000e250 <KeRestart()>:
c000e250:	83 ec 0c             	sub    esp,0xc
c000e253:	e8 a8 ff ff ff       	call   c000e200 <KePrepareShutdown()>
c000e258:	a1 c8 c0 02 c0       	mov    eax,ds:0xc002c0c8
c000e25d:	85 c0                	test   eax,eax
c000e25f:	74 02                	je     c000e263 <KeRestart()+0x13>
c000e261:	ff d0                	call   eax
c000e263:	e4 64                	in     al,0x64
c000e265:	a8 02                	test   al,0x2
c000e267:	75 fa                	jne    c000e263 <KeRestart()+0x13>
c000e269:	b0 fe                	mov    al,0xfe
c000e26b:	e6 64                	out    0x64,al
c000e26d:	83 c4 0c             	add    esp,0xc
c000e270:	c3                   	ret    

c000e271 <KeCalculateCRC32(unsigned char*, int)>:
c000e271:	53                   	push   ebx
c000e272:	83 c8 ff             	or     eax,0xffffffff
c000e275:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e279:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e27d:	01 cb                	add    ebx,ecx
c000e27f:	39 d9                	cmp    ecx,ebx
c000e281:	74 15                	je     c000e298 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000e283:	41                   	inc    ecx
c000e284:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000e287:	31 c2                	xor    edx,eax
c000e289:	c1 e8 08             	shr    eax,0x8
c000e28c:	0f b6 d2             	movzx  edx,dl
c000e28f:	33 04 95 00 5b 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffda500]
c000e296:	eb e7                	jmp    c000e27f <KeCalculateCRC32(unsigned char*, int)+0xe>
c000e298:	5b                   	pop    ebx
c000e299:	f7 d0                	not    eax
c000e29b:	c3                   	ret    

c000e29c <EnvVarContainer::getEnv(char const*)>:
c000e29c:	57                   	push   edi
c000e29d:	56                   	push   esi
c000e29e:	53                   	push   ebx
c000e29f:	31 db                	xor    ebx,ebx
c000e2a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e2a5:	39 1e                	cmp    DWORD PTR [esi],ebx
c000e2a7:	7e 2b                	jle    c000e2d4 <EnvVarContainer::getEnv(char const*)+0x38>
c000e2a9:	50                   	push   eax
c000e2aa:	50                   	push   eax
c000e2ab:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e2ae:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000e2b5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000e2b8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e2bc:	e8 bf 24 ff ff       	call   c0000780 <strcmp>
c000e2c1:	83 c4 10             	add    esp,0x10
c000e2c4:	85 c0                	test   eax,eax
c000e2c6:	75 09                	jne    c000e2d1 <EnvVarContainer::getEnv(char const*)+0x35>
c000e2c8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e2cb:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000e2cf:	eb 05                	jmp    c000e2d6 <EnvVarContainer::getEnv(char const*)+0x3a>
c000e2d1:	43                   	inc    ebx
c000e2d2:	eb d1                	jmp    c000e2a5 <EnvVarContainer::getEnv(char const*)+0x9>
c000e2d4:	31 c0                	xor    eax,eax
c000e2d6:	5b                   	pop    ebx
c000e2d7:	5e                   	pop    esi
c000e2d8:	5f                   	pop    edi
c000e2d9:	c3                   	ret    

c000e2da <EnvVarContainer::setEnv(char const*, char const*)>:
c000e2da:	55                   	push   ebp
c000e2db:	57                   	push   edi
c000e2dc:	56                   	push   esi
c000e2dd:	53                   	push   ebx
c000e2de:	83 ec 28             	sub    esp,0x28
c000e2e1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e2e5:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e2e9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e2ed:	56                   	push   esi
c000e2ee:	e8 8d 22 ff ff       	call   c0000580 <strlen>
c000e2f3:	40                   	inc    eax
c000e2f4:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2f7:	e8 74 17 00 00       	call   c000fa70 <malloc>
c000e2fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e2ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e303:	e8 78 22 ff ff       	call   c0000580 <strlen>
c000e308:	40                   	inc    eax
c000e309:	89 04 24             	mov    DWORD PTR [esp],eax
c000e30c:	e8 5f 17 00 00       	call   c000fa70 <malloc>
c000e311:	89 34 24             	mov    DWORD PTR [esp],esi
c000e314:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e318:	e8 63 22 ff ff       	call   c0000580 <strlen>
c000e31d:	83 c4 0c             	add    esp,0xc
c000e320:	40                   	inc    eax
c000e321:	50                   	push   eax
c000e322:	6a 00                	push   0x0
c000e324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e328:	e8 c3 21 ff ff       	call   c00004f0 <memset>
c000e32d:	89 34 24             	mov    DWORD PTR [esp],esi
c000e330:	e8 4b 22 ff ff       	call   c0000580 <strlen>
c000e335:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e339:	8d 48 01             	lea    ecx,[eax+0x1]
c000e33c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e33e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e341:	89 de                	mov    esi,ebx
c000e343:	e8 38 22 ff ff       	call   c0000580 <strlen>
c000e348:	83 c4 0c             	add    esp,0xc
c000e34b:	40                   	inc    eax
c000e34c:	50                   	push   eax
c000e34d:	6a 00                	push   0x0
c000e34f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e353:	e8 98 21 ff ff       	call   c00004f0 <memset>
c000e358:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e35b:	e8 20 22 ff ff       	call   c0000580 <strlen>
c000e360:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e364:	8d 48 01             	lea    ecx,[eax+0x1]
c000e367:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e369:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e36c:	40                   	inc    eax
c000e36d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e370:	c1 e0 03             	shl    eax,0x3
c000e373:	5a                   	pop    edx
c000e374:	59                   	pop    ecx
c000e375:	50                   	push   eax
c000e376:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000e379:	e8 de 16 00 00       	call   c000fa5c <realloc>
c000e37e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e381:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e385:	b9 08 00 00 00       	mov    ecx,0x8
c000e38a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e38d:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e391:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e393:	83 c4 2c             	add    esp,0x2c
c000e396:	5b                   	pop    ebx
c000e397:	5e                   	pop    esi
c000e398:	5f                   	pop    edi
c000e399:	5d                   	pop    ebp
c000e39a:	c3                   	ret    
c000e39b:	90                   	nop

c000e39c <EnvVarContainer::deleteEnv(char const*)>:
c000e39c:	c3                   	ret    
c000e39d:	90                   	nop

c000e39e <EnvVarContainer::loadFrom(char const*, char const*)>:
c000e39e:	55                   	push   ebp
c000e39f:	57                   	push   edi
c000e3a0:	56                   	push   esi
c000e3a1:	53                   	push   ebx
c000e3a2:	81 ec 38 01 00 00    	sub    esp,0x138
c000e3a8:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000e3af:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000e3b6:	68 14 01 00 00       	push   0x114
c000e3bb:	e8 b0 16 00 00       	call   c000fa70 <malloc>
c000e3c0:	83 c4 0c             	add    esp,0xc
c000e3c3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e3c6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e3cd:	89 c3                	mov    ebx,eax
c000e3cf:	50                   	push   eax
c000e3d0:	e8 57 9d ff ff       	call   c000812c <File::File(char const*, Process*)>
c000e3d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e3d8:	e8 31 a0 ff ff       	call   c000840e <File::exists()>
c000e3dd:	83 c4 10             	add    esp,0x10
c000e3e0:	84 c0                	test   al,al
c000e3e2:	75 31                	jne    c000e415 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000e3e4:	50                   	push   eax
c000e3e5:	50                   	push   eax
c000e3e6:	6a 12                	push   0x12
c000e3e8:	53                   	push   ebx
c000e3e9:	e8 5c 9d ff ff       	call   c000814a <File::open(FileOpenMode)>
c000e3ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e3f0:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000e3f3:	89 34 24             	mov    DWORD PTR [esp],esi
c000e3f6:	e8 85 21 ff ff       	call   c0000580 <strlen>
c000e3fb:	5a                   	pop    edx
c000e3fc:	8d 54 24 20          	lea    edx,[esp+0x20]
c000e400:	52                   	push   edx
c000e401:	31 d2                	xor    edx,edx
c000e403:	56                   	push   esi
c000e404:	52                   	push   edx
c000e405:	50                   	push   eax
c000e406:	53                   	push   ebx
c000e407:	ff d7                	call   edi
c000e409:	83 c4 14             	add    esp,0x14
c000e40c:	53                   	push   ebx
c000e40d:	e8 96 9d ff ff       	call   c00081a8 <File::close()>
c000e412:	83 c4 10             	add    esp,0x10
c000e415:	56                   	push   esi
c000e416:	31 f6                	xor    esi,esi
c000e418:	68 00 01 00 00       	push   0x100
c000e41d:	6a 00                	push   0x0
c000e41f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e423:	50                   	push   eax
c000e424:	e8 c7 20 ff ff       	call   c00004f0 <memset>
c000e429:	5f                   	pop    edi
c000e42a:	58                   	pop    eax
c000e42b:	6a 01                	push   0x1
c000e42d:	53                   	push   ebx
c000e42e:	e8 17 9d ff ff       	call   c000814a <File::open(FileOpenMode)>
c000e433:	83 c4 10             	add    esp,0x10
c000e436:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e43e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e446:	83 ec 0c             	sub    esp,0xc
c000e449:	8d 54 24 20          	lea    edx,[esp+0x20]
c000e44d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e44f:	52                   	push   edx
c000e450:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c000e454:	51                   	push   ecx
c000e455:	6a 00                	push   0x0
c000e457:	6a 01                	push   0x1
c000e459:	53                   	push   ebx
c000e45a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e45d:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000e462:	83 c4 20             	add    esp,0x20
c000e465:	85 c0                	test   eax,eax
c000e467:	89 c1                	mov    ecx,eax
c000e469:	0f 84 36 01 00 00    	je     c000e5a5 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000e46f:	83 f8 0d             	cmp    eax,0xd
c000e472:	0f 84 22 01 00 00    	je     c000e59a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e478:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e47d:	0f 84 f0 00 00 00    	je     c000e573 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000e483:	83 f8 0a             	cmp    eax,0xa
c000e486:	74 13                	je     c000e49b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e488:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e48d:	74 0c                	je     c000e49b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e48f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e495:	0f 8e f6 00 00 00    	jle    c000e591 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000e49b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e49f:	83 ec 0c             	sub    esp,0xc
c000e4a2:	8d 78 01             	lea    edi,[eax+0x1]
c000e4a5:	57                   	push   edi
c000e4a6:	e8 c5 15 00 00       	call   c000fa70 <malloc>
c000e4ab:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000e4af:	8d 56 04             	lea    edx,[esi+0x4]
c000e4b2:	89 14 24             	mov    DWORD PTR [esp],edx
c000e4b5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e4b9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e4bd:	e8 ae 15 00 00       	call   c000fa70 <malloc>
c000e4c2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e4c6:	83 c4 0c             	add    esp,0xc
c000e4c9:	57                   	push   edi
c000e4ca:	6a 00                	push   0x0
c000e4cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e4d0:	e8 1b 20 ff ff       	call   c00004f0 <memset>
c000e4d5:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e4d9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000e4dd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e4e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4e3:	83 c4 0c             	add    esp,0xc
c000e4e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e4ea:	52                   	push   edx
c000e4eb:	6a 00                	push   0x0
c000e4ed:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e4f1:	e8 fa 1f ff ff       	call   c00004f0 <memset>
c000e4f6:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e4fa:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000e4fe:	89 34 24             	mov    DWORD PTR [esp],esi
c000e501:	e8 7a 20 ff ff       	call   c0000580 <strlen>
c000e506:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000e50a:	89 c1                	mov    ecx,eax
c000e50c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e50e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e511:	83 c4 10             	add    esp,0x10
c000e514:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000e517:	40                   	inc    eax
c000e518:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e51b:	85 d2                	test   edx,edx
c000e51d:	75 0c                	jne    c000e52b <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000e51f:	83 ec 0c             	sub    esp,0xc
c000e522:	6a 08                	push   0x8
c000e524:	e8 47 15 00 00       	call   c000fa70 <malloc>
c000e529:	eb 0c                	jmp    c000e537 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000e52b:	51                   	push   ecx
c000e52c:	51                   	push   ecx
c000e52d:	c1 e0 03             	shl    eax,0x3
c000e530:	50                   	push   eax
c000e531:	52                   	push   edx
c000e532:	e8 25 15 00 00       	call   c000fa5c <realloc>
c000e537:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e53a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e53d:	83 c4 10             	add    esp,0x10
c000e540:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000e543:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e547:	b9 08 00 00 00       	mov    ecx,0x8
c000e54c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e550:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e552:	50                   	push   eax
c000e553:	31 f6                	xor    esi,esi
c000e555:	68 00 01 00 00       	push   0x100
c000e55a:	6a 00                	push   0x0
c000e55c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e560:	50                   	push   eax
c000e561:	e8 8a 1f ff ff       	call   c00004f0 <memset>
c000e566:	83 c4 10             	add    esp,0x10
c000e569:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e571:	eb 27                	jmp    c000e59a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e573:	83 f8 3d             	cmp    eax,0x3d
c000e576:	74 1e                	je     c000e596 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000e578:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e57e:	7f 07                	jg     c000e587 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000e580:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c000e584:	46                   	inc    esi
c000e585:	eb 13                	jmp    c000e59a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e587:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000e58f:	eb 09                	jmp    c000e59a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e591:	83 f8 3d             	cmp    eax,0x3d
c000e594:	75 ea                	jne    c000e580 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000e596:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000e59a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e59f:	0f 85 99 fe ff ff    	jne    c000e43e <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000e5a5:	83 ec 0c             	sub    esp,0xc
c000e5a8:	53                   	push   ebx
c000e5a9:	e8 fa 9b ff ff       	call   c00081a8 <File::close()>
c000e5ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e5b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e5b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e5b6:	81 c4 3c 01 00 00    	add    esp,0x13c
c000e5bc:	5b                   	pop    ebx
c000e5bd:	5e                   	pop    esi
c000e5be:	5f                   	pop    edi
c000e5bf:	5d                   	pop    ebp
c000e5c0:	c3                   	ret    
c000e5c1:	90                   	nop

c000e5c2 <EnvVarContainer::__loadSystem()>:
c000e5c2:	83 ec 10             	sub    esp,0x10
c000e5c5:	68 00 5f 02 c0       	push   0xc0025f00
c000e5ca:	68 b4 38 02 c0       	push   0xc00238b4
c000e5cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5d3:	e8 c6 fd ff ff       	call   c000e39e <EnvVarContainer::loadFrom(char const*, char const*)>
c000e5d8:	83 c4 1c             	add    esp,0x1c
c000e5db:	c3                   	ret    

c000e5dc <EnvVarContainer::__loadUser()>:
c000e5dc:	c3                   	ret    
c000e5dd:	90                   	nop

c000e5de <EnvVarContainer::EnvVarContainer(Process*)>:
c000e5de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e5e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e5e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e5ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e5f0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e5f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e5f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e5fe:	90                   	nop
c000e5ff:	c3                   	ret    

c000e600 <EnvVarContainer::~EnvVarContainer()>:
c000e600:	83 ec 0c             	sub    esp,0xc
c000e603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e607:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e60a:	85 c0                	test   eax,eax
c000e60c:	74 1d                	je     c000e62b <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e60e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e612:	8b 00                	mov    eax,DWORD PTR [eax]
c000e614:	85 c0                	test   eax,eax
c000e616:	74 13                	je     c000e62b <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e61c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e61f:	83 ec 0c             	sub    esp,0xc
c000e622:	50                   	push   eax
c000e623:	e8 58 14 00 00       	call   c000fa80 <free>
c000e628:	83 c4 10             	add    esp,0x10
c000e62b:	90                   	nop
c000e62c:	83 c4 0c             	add    esp,0xc
c000e62f:	c3                   	ret    

c000e630 <KeGetEnv(Process*, char const*)>:
c000e630:	53                   	push   ebx
c000e631:	83 ec 08             	sub    esp,0x8
c000e634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e638:	39 05 58 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea58,eax
c000e63e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e642:	74 04                	je     c000e648 <KeGetEnv(Process*, char const*)+0x18>
c000e644:	85 c0                	test   eax,eax
c000e646:	75 0b                	jne    c000e653 <KeGetEnv(Process*, char const*)+0x23>
c000e648:	a1 d8 c0 02 c0       	mov    eax,ds:0xc002c0d8
c000e64d:	85 c0                	test   eax,eax
c000e64f:	75 19                	jne    c000e66a <KeGetEnv(Process*, char const*)+0x3a>
c000e651:	eb 27                	jmp    c000e67a <KeGetEnv(Process*, char const*)+0x4a>
c000e653:	52                   	push   edx
c000e654:	52                   	push   edx
c000e655:	53                   	push   ebx
c000e656:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000e65c:	e8 3b fc ff ff       	call   c000e29c <EnvVarContainer::getEnv(char const*)>
c000e661:	83 c4 10             	add    esp,0x10
c000e664:	85 c0                	test   eax,eax
c000e666:	75 28                	jne    c000e690 <KeGetEnv(Process*, char const*)+0x60>
c000e668:	eb de                	jmp    c000e648 <KeGetEnv(Process*, char const*)+0x18>
c000e66a:	52                   	push   edx
c000e66b:	52                   	push   edx
c000e66c:	53                   	push   ebx
c000e66d:	50                   	push   eax
c000e66e:	e8 29 fc ff ff       	call   c000e29c <EnvVarContainer::getEnv(char const*)>
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	85 c0                	test   eax,eax
c000e678:	75 16                	jne    c000e690 <KeGetEnv(Process*, char const*)+0x60>
c000e67a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000e67e:	a1 dc c0 02 c0       	mov    eax,ds:0xc002c0dc
c000e683:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e687:	83 c4 08             	add    esp,0x8
c000e68a:	5b                   	pop    ebx
c000e68b:	e9 0c fc ff ff       	jmp    c000e29c <EnvVarContainer::getEnv(char const*)>
c000e690:	83 c4 08             	add    esp,0x8
c000e693:	5b                   	pop    ebx
c000e694:	c3                   	ret    

c000e695 <KeSetEnvSystem(char const*, char const*)>:
c000e695:	83 ec 10             	sub    esp,0x10
c000e698:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e69c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6a0:	ff 35 dc c0 02 c0    	push   DWORD PTR ds:0xc002c0dc
c000e6a6:	e8 2f fc ff ff       	call   c000e2da <EnvVarContainer::setEnv(char const*, char const*)>
c000e6ab:	83 c4 1c             	add    esp,0x1c
c000e6ae:	c3                   	ret    

c000e6af <KeSetEnvUser(char const*, char const*)>:
c000e6af:	a1 d8 c0 02 c0       	mov    eax,ds:0xc002c0d8
c000e6b4:	85 c0                	test   eax,eax
c000e6b6:	74 15                	je     c000e6cd <KeSetEnvUser(char const*, char const*)+0x1e>
c000e6b8:	83 ec 10             	sub    esp,0x10
c000e6bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6c3:	50                   	push   eax
c000e6c4:	e8 11 fc ff ff       	call   c000e2da <EnvVarContainer::setEnv(char const*, char const*)>
c000e6c9:	83 c4 1c             	add    esp,0x1c
c000e6cc:	c3                   	ret    
c000e6cd:	c3                   	ret    

c000e6ce <KeSetEnvProcess(Process*, char const*, char const*)>:
c000e6ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6d2:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000e6d8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e6dc:	e9 f9 fb ff ff       	jmp    c000e2da <EnvVarContainer::setEnv(char const*, char const*)>

c000e6e1 <KeDeleteEnvSystem(char const*)>:
c000e6e1:	c3                   	ret    

c000e6e2 <KeDeleteEnvUser(char const*)>:
c000e6e2:	c3                   	ret    

c000e6e3 <KeDeleteEnvProcess(Process*, char const*)>:
c000e6e3:	c3                   	ret    

c000e6e4 <KeNewProcessEnv(Process*)>:
c000e6e4:	83 ec 28             	sub    esp,0x28
c000e6e7:	6a 0c                	push   0xc
c000e6e9:	e8 82 13 00 00       	call   c000fa70 <malloc>
c000e6ee:	5a                   	pop    edx
c000e6ef:	59                   	pop    ecx
c000e6f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e6f4:	50                   	push   eax
c000e6f5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e6f9:	e8 e0 fe ff ff       	call   c000e5de <EnvVarContainer::EnvVarContainer(Process*)>
c000e6fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e702:	83 c4 2c             	add    esp,0x2c
c000e705:	c3                   	ret    

c000e706 <KeCopyProcessEnv(Process*, Process*)>:
c000e706:	57                   	push   edi
c000e707:	56                   	push   esi
c000e708:	53                   	push   ebx
c000e709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e70d:	83 ec 0c             	sub    esp,0xc
c000e710:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000e716:	6a 0c                	push   0xc
c000e718:	e8 53 13 00 00       	call   c000fa70 <malloc>
c000e71d:	89 c3                	mov    ebx,eax
c000e71f:	58                   	pop    eax
c000e720:	5a                   	pop    edx
c000e721:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e725:	53                   	push   ebx
c000e726:	e8 b3 fe ff ff       	call   c000e5de <EnvVarContainer::EnvVarContainer(Process*)>
c000e72b:	8b 07                	mov    eax,DWORD PTR [edi]
c000e72d:	89 03                	mov    DWORD PTR [ebx],eax
c000e72f:	c1 e0 03             	shl    eax,0x3
c000e732:	89 04 24             	mov    DWORD PTR [esp],eax
c000e735:	e8 36 13 00 00       	call   c000fa70 <malloc>
c000e73a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e73d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e73f:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000e742:	89 c7                	mov    edi,eax
c000e744:	c1 e1 03             	shl    ecx,0x3
c000e747:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e749:	83 c4 10             	add    esp,0x10
c000e74c:	89 d8                	mov    eax,ebx
c000e74e:	5b                   	pop    ebx
c000e74f:	5e                   	pop    esi
c000e750:	5f                   	pop    edi
c000e751:	c3                   	ret    

c000e752 <KeLoadSystemEnv()>:
c000e752:	53                   	push   ebx
c000e753:	83 ec 14             	sub    esp,0x14
c000e756:	6a 0c                	push   0xc
c000e758:	e8 13 13 00 00       	call   c000fa70 <malloc>
c000e75d:	89 c3                	mov    ebx,eax
c000e75f:	58                   	pop    eax
c000e760:	5a                   	pop    edx
c000e761:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000e767:	53                   	push   ebx
c000e768:	e8 71 fe ff ff       	call   c000e5de <EnvVarContainer::EnvVarContainer(Process*)>
c000e76d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e770:	89 1d dc c0 02 c0    	mov    DWORD PTR ds:0xc002c0dc,ebx
c000e776:	e8 47 fe ff ff       	call   c000e5c2 <EnvVarContainer::__loadSystem()>
c000e77b:	83 c4 18             	add    esp,0x18
c000e77e:	5b                   	pop    ebx
c000e77f:	c3                   	ret    

c000e780 <KeLoadUserEnv()>:
c000e780:	53                   	push   ebx
c000e781:	83 ec 14             	sub    esp,0x14
c000e784:	6a 0c                	push   0xc
c000e786:	e8 e5 12 00 00       	call   c000fa70 <malloc>
c000e78b:	89 c3                	mov    ebx,eax
c000e78d:	58                   	pop    eax
c000e78e:	5a                   	pop    edx
c000e78f:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000e795:	53                   	push   ebx
c000e796:	e8 43 fe ff ff       	call   c000e5de <EnvVarContainer::EnvVarContainer(Process*)>
c000e79b:	89 1d d8 c0 02 c0    	mov    DWORD PTR ds:0xc002c0d8,ebx
c000e7a1:	83 c4 18             	add    esp,0x18
c000e7a4:	5b                   	pop    ebx
c000e7a5:	c3                   	ret    

c000e7a6 <KeFlushEnv()>:
c000e7a6:	c3                   	ret    

c000e7a7 <KeGetProcessTotalEnvCount(Process*)>:
c000e7a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e7ab:	8b 15 d8 c0 02 c0    	mov    edx,DWORD PTR ds:0xc002c0d8
c000e7b1:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000e7b7:	a1 dc c0 02 c0       	mov    eax,ds:0xc002c0dc
c000e7bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000e7be:	03 01                	add    eax,DWORD PTR [ecx]
c000e7c0:	85 d2                	test   edx,edx
c000e7c2:	74 02                	je     c000e7c6 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000e7c4:	03 02                	add    eax,DWORD PTR [edx]
c000e7c6:	c3                   	ret    

c000e7c7 <KeGetProcessEnvPair(Process*, int)>:
c000e7c7:	57                   	push   edi
c000e7c8:	56                   	push   esi
c000e7c9:	8b 35 d8 c0 02 c0    	mov    esi,DWORD PTR ds:0xc002c0d8
c000e7cf:	53                   	push   ebx
c000e7d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e7d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e7d8:	85 f6                	test   esi,esi
c000e7da:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e7de:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000e7e4:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e7e6:	75 16                	jne    c000e7fe <KeGetProcessEnvPair(Process*, int)+0x37>
c000e7e8:	39 c2                	cmp    edx,eax
c000e7ea:	7c 16                	jl     c000e802 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e7ec:	8b 0d dc c0 02 c0    	mov    ecx,DWORD PTR ds:0xc002c0dc
c000e7f2:	8b 31                	mov    esi,DWORD PTR [ecx]
c000e7f4:	01 c6                	add    esi,eax
c000e7f6:	39 d6                	cmp    esi,edx
c000e7f8:	7e 3c                	jle    c000e836 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e7fa:	29 c2                	sub    edx,eax
c000e7fc:	eb 04                	jmp    c000e802 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e7fe:	39 c2                	cmp    edx,eax
c000e800:	7d 05                	jge    c000e807 <KeGetProcessEnvPair(Process*, int)+0x40>
c000e802:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000e805:	eb 20                	jmp    c000e827 <KeGetProcessEnvPair(Process*, int)+0x60>
c000e807:	8b 3e                	mov    edi,DWORD PTR [esi]
c000e809:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000e80c:	39 d1                	cmp    ecx,edx
c000e80e:	7e 04                	jle    c000e814 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000e810:	29 c2                	sub    edx,eax
c000e812:	eb 10                	jmp    c000e824 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000e814:	8b 35 dc c0 02 c0    	mov    esi,DWORD PTR ds:0xc002c0dc
c000e81a:	03 0e                	add    ecx,DWORD PTR [esi]
c000e81c:	39 d1                	cmp    ecx,edx
c000e81e:	7e 16                	jle    c000e836 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e820:	29 c2                	sub    edx,eax
c000e822:	29 fa                	sub    edx,edi
c000e824:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e827:	8d 14 d0             	lea    edx,[eax+edx*8]
c000e82a:	8b 02                	mov    eax,DWORD PTR [edx]
c000e82c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e82f:	89 03                	mov    DWORD PTR [ebx],eax
c000e831:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000e834:	eb 1d                	jmp    c000e853 <KeGetProcessEnvPair(Process*, int)+0x8c>
c000e836:	83 ec 0c             	sub    esp,0xc
c000e839:	68 d6 38 02 c0       	push   0xc00238d6
c000e83e:	e8 73 15 00 00       	call   c000fdb6 <KePanic(char const*)>
c000e843:	83 c4 10             	add    esp,0x10
c000e846:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000e84c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000e853:	89 d8                	mov    eax,ebx
c000e855:	5b                   	pop    ebx
c000e856:	5e                   	pop    esi
c000e857:	5f                   	pop    edi
c000e858:	c2 04 00             	ret    0x4
c000e85b:	90                   	nop

c000e85c <KeSetupInterrupts()>:
c000e85c:	83 ec 10             	sub    esp,0x10
c000e85f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e867:	90                   	nop
c000e868:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e870:	7f 5a                	jg     c000e8cc <KeSetupInterrupts()+0x70>
c000e872:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e87a:	66 90                	xchg   ax,ax
c000e87c:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e881:	7f 41                	jg     c000e8c4 <KeSetupInterrupts()+0x68>
c000e883:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e887:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e88e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e892:	01 d0                	add    eax,edx
c000e894:	c7 04 85 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd2f20],0x0
c000e89f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8a3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e8aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e8ae:	01 d0                	add    eax,edx
c000e8b0:	c7 04 85 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd3f20],0x0
c000e8bb:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000e8c0:	eb ba                	jmp    c000e87c <KeSetupInterrupts()+0x20>
c000e8c2:	66 90                	xchg   ax,ax
c000e8c4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000e8c9:	eb 9d                	jmp    c000e868 <KeSetupInterrupts()+0xc>
c000e8cb:	90                   	nop
c000e8cc:	90                   	nop
c000e8cd:	83 c4 10             	add    esp,0x10
c000e8d0:	c3                   	ret    
c000e8d1:	8d 76 00             	lea    esi,[esi+0x0]

c000e8d4 <int_handler>:
c000e8d4:	83 ec 2c             	sub    esp,0x2c
c000e8d7:	90                   	nop
c000e8d8:	a0 28 e1 02 c0       	mov    al,ds:0xc002e128
c000e8dd:	0f b6 c0             	movzx  eax,al
c000e8e0:	85 c0                	test   eax,eax
c000e8e2:	74 04                	je     c000e8e8 <int_handler+0x14>
c000e8e4:	fa                   	cli    
c000e8e5:	f4                   	hlt    
c000e8e6:	eb f0                	jmp    c000e8d8 <int_handler+0x4>
c000e8e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8ec:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e8ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e8f3:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000e8f8:	7e 1a                	jle    c000e914 <int_handler+0x40>
c000e8fa:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000e8ff:	7f 13                	jg     c000e914 <int_handler+0x40>
c000e901:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e905:	83 e8 20             	sub    eax,0x20
c000e908:	83 ec 0c             	sub    esp,0xc
c000e90b:	50                   	push   eax
c000e90c:	e8 41 b3 00 00       	call   c0019c52 <HalEndOfInterrupt(int)>
c000e911:	83 c4 10             	add    esp,0x10
c000e914:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e918:	c1 e0 04             	shl    eax,0x4
c000e91b:	05 e0 d0 02 c0       	add    eax,0xc002d0e0
c000e920:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e924:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e928:	c1 e0 04             	shl    eax,0x4
c000e92b:	05 e0 c0 02 c0       	add    eax,0xc002c0e0
c000e930:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e934:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e93c:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000e941:	0f 8f ad 00 00 00    	jg     c000e9f4 <int_handler+0x120>
c000e947:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e94b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e952:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e956:	01 d0                	add    eax,edx
c000e958:	8b 00                	mov    eax,DWORD PTR [eax]
c000e95a:	85 c0                	test   eax,eax
c000e95c:	0f 84 86 00 00 00    	je     c000e9e8 <int_handler+0x114>
c000e962:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e966:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e969:	83 f8 60             	cmp    eax,0x60
c000e96c:	75 46                	jne    c000e9b4 <int_handler+0xe0>
c000e96e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e972:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e979:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e97d:	01 d0                	add    eax,edx
c000e97f:	8b 00                	mov    eax,DWORD PTR [eax]
c000e981:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e985:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e98c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e990:	01 ca                	add    edx,ecx
c000e992:	8b 12                	mov    edx,DWORD PTR [edx]
c000e994:	83 ec 08             	sub    esp,0x8
c000e997:	52                   	push   edx
c000e998:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e99c:	ff d0                	call   eax
c000e99e:	83 c4 10             	add    esp,0x10
c000e9a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e9a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e9a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e9b1:	eb 4d                	jmp    c000ea00 <int_handler+0x12c>
c000e9b3:	90                   	nop
c000e9b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e9b8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e9bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9c3:	01 d0                	add    eax,edx
c000e9c5:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9c7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e9cb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e9d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e9d6:	01 ca                	add    edx,ecx
c000e9d8:	8b 12                	mov    edx,DWORD PTR [edx]
c000e9da:	83 ec 08             	sub    esp,0x8
c000e9dd:	52                   	push   edx
c000e9de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e9e2:	ff d0                	call   eax
c000e9e4:	83 c4 10             	add    esp,0x10
c000e9e7:	90                   	nop
c000e9e8:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000e9ed:	e9 4a ff ff ff       	jmp    c000e93c <int_handler+0x68>
c000e9f2:	66 90                	xchg   ax,ax
c000e9f4:	b8 00 00 00 00       	mov    eax,0x0
c000e9f9:	ba 00 00 00 00       	mov    edx,0x0
c000e9fe:	66 90                	xchg   ax,ax
c000ea00:	83 c4 2c             	add    esp,0x2c
c000ea03:	c3                   	ret    

c000ea04 <KeDisplayProgramFault(char const*)>:
c000ea04:	83 ec 0c             	sub    esp,0xc
c000ea07:	83 ec 0c             	sub    esp,0xc
c000ea0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea0e:	e8 3b 85 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ea13:	83 c4 10             	add    esp,0x10
c000ea16:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000ea1b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea1d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ea20:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000ea26:	85 c0                	test   eax,eax
c000ea28:	74 22                	je     c000ea4c <KeDisplayProgramFault(char const*)+0x48>
c000ea2a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000ea2f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea31:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ea34:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000ea3a:	6a 04                	push   0x4
c000ea3c:	6a 0f                	push   0xf
c000ea3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea42:	50                   	push   eax
c000ea43:	e8 86 3b 00 00       	call   c00125ce <VgaText::puts(char const*, VgaColour, VgaColour)>
c000ea48:	83 c4 10             	add    esp,0x10
c000ea4b:	90                   	nop
c000ea4c:	90                   	nop
c000ea4d:	83 c4 0c             	add    esp,0xc
c000ea50:	c3                   	ret    
c000ea51:	8d 76 00             	lea    esi,[esi+0x0]

c000ea54 <KeGeneralProtectionFault(void*, void*)>:
c000ea54:	83 ec 0c             	sub    esp,0xc
c000ea57:	83 ec 08             	sub    esp,0x8
c000ea5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea62:	e8 8d a7 00 00       	call   c00191f4 <HalHandleGeneralProtectionFault(void*, void*)>
c000ea67:	83 c4 10             	add    esp,0x10
c000ea6a:	0f b6 c0             	movzx  eax,al
c000ea6d:	85 c0                	test   eax,eax
c000ea6f:	75 2f                	jne    c000eaa0 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000ea71:	83 ec 0c             	sub    esp,0xc
c000ea74:	68 f0 38 02 c0       	push   0xc00238f0
c000ea79:	e8 86 ff ff ff       	call   c000ea04 <KeDisplayProgramFault(char const*)>
c000ea7e:	83 c4 10             	add    esp,0x10
c000ea81:	83 ec 0c             	sub    esp,0xc
c000ea84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea88:	e8 01 a9 00 00       	call   c001938e <HalDisplayDebugInfo(void*)>
c000ea8d:	83 c4 10             	add    esp,0x10
c000ea90:	83 ec 0c             	sub    esp,0xc
c000ea93:	6a 00                	push   0x0
c000ea95:	e8 ee 87 00 00       	call   c0017288 <Thr::terminateFromIRQ(int)>
c000ea9a:	83 c4 10             	add    esp,0x10
c000ea9d:	eb 05                	jmp    c000eaa4 <KeGeneralProtectionFault(void*, void*)+0x50>
c000ea9f:	90                   	nop
c000eaa0:	90                   	nop
c000eaa1:	8d 76 00             	lea    esi,[esi+0x0]
c000eaa4:	83 c4 0c             	add    esp,0xc
c000eaa7:	c3                   	ret    

c000eaa8 <KePageFault(void*, void*)>:
c000eaa8:	83 ec 0c             	sub    esp,0xc
c000eaab:	83 ec 0c             	sub    esp,0xc
c000eaae:	68 09 39 02 c0       	push   0xc0023909
c000eab3:	e8 96 84 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000eab8:	83 c4 10             	add    esp,0x10
c000eabb:	83 ec 08             	sub    esp,0x8
c000eabe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eac6:	e8 d4 a7 00 00       	call   c001929f <HalHandlePageFault(void*, void*)>
c000eacb:	83 c4 10             	add    esp,0x10
c000eace:	0f b6 c0             	movzx  eax,al
c000ead1:	85 c0                	test   eax,eax
c000ead3:	75 2f                	jne    c000eb04 <KePageFault(void*, void*)+0x5c>
c000ead5:	83 ec 0c             	sub    esp,0xc
c000ead8:	68 16 39 02 c0       	push   0xc0023916
c000eadd:	e8 22 ff ff ff       	call   c000ea04 <KeDisplayProgramFault(char const*)>
c000eae2:	83 c4 10             	add    esp,0x10
c000eae5:	83 ec 0c             	sub    esp,0xc
c000eae8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eaec:	e8 9d a8 00 00       	call   c001938e <HalDisplayDebugInfo(void*)>
c000eaf1:	83 c4 10             	add    esp,0x10
c000eaf4:	83 ec 0c             	sub    esp,0xc
c000eaf7:	6a 00                	push   0x0
c000eaf9:	e8 8a 87 00 00       	call   c0017288 <Thr::terminateFromIRQ(int)>
c000eafe:	83 c4 10             	add    esp,0x10
c000eb01:	eb 05                	jmp    c000eb08 <KePageFault(void*, void*)+0x60>
c000eb03:	90                   	nop
c000eb04:	90                   	nop
c000eb05:	8d 76 00             	lea    esi,[esi+0x0]
c000eb08:	83 c4 0c             	add    esp,0xc
c000eb0b:	c3                   	ret    

c000eb0c <KeNonMaskableInterrupt(void*, void*)>:
c000eb0c:	83 ec 0c             	sub    esp,0xc
c000eb0f:	e8 08 ac 00 00       	call   c001971c <HalReceivedNMI()>
c000eb14:	90                   	nop
c000eb15:	83 c4 0c             	add    esp,0xc
c000eb18:	c3                   	ret    
c000eb19:	8d 76 00             	lea    esi,[esi+0x0]

c000eb1c <KeOtherFault(void*, void*)>:
c000eb1c:	83 ec 0c             	sub    esp,0xc
c000eb1f:	83 ec 0c             	sub    esp,0xc
c000eb22:	68 24 39 02 c0       	push   0xc0023924
c000eb27:	e8 d8 fe ff ff       	call   c000ea04 <KeDisplayProgramFault(char const*)>
c000eb2c:	83 c4 10             	add    esp,0x10
c000eb2f:	83 ec 0c             	sub    esp,0xc
c000eb32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb36:	e8 53 a8 00 00       	call   c001938e <HalDisplayDebugInfo(void*)>
c000eb3b:	83 c4 10             	add    esp,0x10
c000eb3e:	83 ec 0c             	sub    esp,0xc
c000eb41:	6a 00                	push   0x0
c000eb43:	e8 40 87 00 00       	call   c0017288 <Thr::terminateFromIRQ(int)>
c000eb48:	83 c4 10             	add    esp,0x10
c000eb4b:	90                   	nop
c000eb4c:	83 c4 0c             	add    esp,0xc
c000eb4f:	c3                   	ret    

c000eb50 <KeOpcodeFault(void*, void*)>:
c000eb50:	55                   	push   ebp
c000eb51:	89 e5                	mov    ebp,esp
c000eb53:	83 ec 08             	sub    esp,0x8
c000eb56:	83 ec 08             	sub    esp,0x8
c000eb59:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000eb5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000eb5f:	e8 e8 a7 00 00       	call   c001934c <HalHandleOpcodeFault(void*, void*)>
c000eb64:	83 c4 10             	add    esp,0x10
c000eb67:	0f b6 c0             	movzx  eax,al
c000eb6a:	85 c0                	test   eax,eax
c000eb6c:	75 2e                	jne    c000eb9c <KeOpcodeFault(void*, void*)+0x4c>
c000eb6e:	83 ec 0c             	sub    esp,0xc
c000eb71:	68 4c 39 02 c0       	push   0xc002394c
c000eb76:	e8 89 fe ff ff       	call   c000ea04 <KeDisplayProgramFault(char const*)>
c000eb7b:	83 c4 10             	add    esp,0x10
c000eb7e:	83 ec 0c             	sub    esp,0xc
c000eb81:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000eb84:	e8 05 a8 00 00       	call   c001938e <HalDisplayDebugInfo(void*)>
c000eb89:	83 c4 10             	add    esp,0x10
c000eb8c:	83 ec 0c             	sub    esp,0xc
c000eb8f:	6a 00                	push   0x0
c000eb91:	e8 f2 86 00 00       	call   c0017288 <Thr::terminateFromIRQ(int)>
c000eb96:	83 c4 10             	add    esp,0x10
c000eb99:	eb 05                	jmp    c000eba0 <KeOpcodeFault(void*, void*)+0x50>
c000eb9b:	90                   	nop
c000eb9c:	90                   	nop
c000eb9d:	8d 76 00             	lea    esi,[esi+0x0]
c000eba0:	c9                   	leave  
c000eba1:	c3                   	ret    
c000eba2:	66 90                	xchg   ax,ax

c000eba4 <KeDoubleFault(void*, void*)>:
c000eba4:	55                   	push   ebp
c000eba5:	89 e5                	mov    ebp,esp
c000eba7:	83 ec 08             	sub    esp,0x8
c000ebaa:	83 ec 0c             	sub    esp,0xc
c000ebad:	68 59 39 02 c0       	push   0xc0023959
c000ebb2:	e8 ff 11 00 00       	call   c000fdb6 <KePanic(char const*)>
c000ebb7:	83 c4 10             	add    esp,0x10
c000ebba:	90                   	nop
c000ebbb:	c9                   	leave  
c000ebbc:	c3                   	ret    
c000ebbd:	90                   	nop

c000ebbe <GDTEntry::setBase(unsigned int)>:
c000ebbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebc2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ebc6:	89 c1                	mov    ecx,eax
c000ebc8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ebcc:	c1 e9 10             	shr    ecx,0x10
c000ebcf:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ebd2:	c1 e8 18             	shr    eax,0x18
c000ebd5:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ebd8:	c3                   	ret    
c000ebd9:	90                   	nop

c000ebda <GDTEntry::setLimit(unsigned int)>:
c000ebda:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ebde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebe2:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ebe5:	66 89 01             	mov    WORD PTR [ecx],ax
c000ebe8:	c1 e8 10             	shr    eax,0x10
c000ebeb:	83 e0 0f             	and    eax,0xf
c000ebee:	83 e2 f0             	and    edx,0xfffffff0
c000ebf1:	09 d0                	or     eax,edx
c000ebf3:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ebf6:	c3                   	ret    
c000ebf7:	90                   	nop

c000ebf8 <GDT::GDT()>:
c000ebf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebfc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ec02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec06:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ec0c:	90                   	nop
c000ec0d:	c3                   	ret    

c000ec0e <GDT::addEntry(GDTEntry)>:
c000ec0e:	53                   	push   ebx
c000ec0f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec13:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ec17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ec1b:	8b 02                	mov    eax,DWORD PTR [edx]
c000ec1d:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000ec21:	8d 48 01             	lea    ecx,[eax+0x1]
c000ec24:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000ec28:	c1 e0 03             	shl    eax,0x3
c000ec2b:	89 0a                	mov    DWORD PTR [edx],ecx
c000ec2d:	5b                   	pop    ebx
c000ec2e:	c3                   	ret    
c000ec2f:	90                   	nop

c000ec30 <GDT::getNumberOfEntries()>:
c000ec30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec34:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec36:	c3                   	ret    
c000ec37:	90                   	nop

c000ec38 <GDT::flush()>:
c000ec38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec3c:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec3e:	83 c0 04             	add    eax,0x4
c000ec41:	a3 e2 e0 02 c0       	mov    ds:0xc002e0e2,eax
c000ec46:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ec4d:	66 89 15 e0 e0 02 c0 	mov    WORD PTR ds:0xc002e0e0,dx
c000ec54:	e9 01 17 ff ff       	jmp    c000035a <loadGDT>
c000ec59:	90                   	nop

c000ec5a <GDT::setup()>:
c000ec5a:	57                   	push   edi
c000ec5b:	56                   	push   esi
c000ec5c:	53                   	push   ebx
c000ec5d:	83 ec 30             	sub    esp,0x30
c000ec60:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ec64:	6a 00                	push   0x0
c000ec66:	8d 74 24 14          	lea    esi,[esp+0x14]
c000ec6a:	56                   	push   esi
c000ec6b:	e8 4e ff ff ff       	call   c000ebbe <GDTEntry::setBase(unsigned int)>
c000ec70:	6a 00                	push   0x0
c000ec72:	56                   	push   esi
c000ec73:	e8 62 ff ff ff       	call   c000ebda <GDTEntry::setLimit(unsigned int)>
c000ec78:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000ec80:	6a 00                	push   0x0
c000ec82:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000ec86:	56                   	push   esi
c000ec87:	e8 32 ff ff ff       	call   c000ebbe <GDTEntry::setBase(unsigned int)>
c000ec8c:	68 ff ff ff 00       	push   0xffffff
c000ec91:	56                   	push   esi
c000ec92:	e8 43 ff ff ff       	call   c000ebda <GDTEntry::setLimit(unsigned int)>
c000ec97:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec9b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ec9f:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eca4:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000eca8:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ecad:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ecb1:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000ecb5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ecb9:	89 f8                	mov    eax,edi
c000ecbb:	89 fa                	mov    edx,edi
c000ecbd:	80 e4 f7             	and    ah,0xf7
c000ecc0:	80 ce 60             	or     dh,0x60
c000ecc3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ecc7:	89 c7                	mov    edi,eax
c000ecc9:	80 cc 60             	or     ah,0x60
c000eccc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ecd0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ecd4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ecd8:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000ecdc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ece0:	83 c4 20             	add    esp,0x20
c000ece3:	6a 00                	push   0x0
c000ece5:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ece9:	50                   	push   eax
c000ecea:	e8 cf fe ff ff       	call   c000ebbe <GDTEntry::setBase(unsigned int)>
c000ecef:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000ecf3:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000ecf7:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000ecfb:	83 e0 3f             	and    eax,0x3f
c000ecfe:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000ed02:	6a 00                	push   0x0
c000ed04:	8d 44 24 34          	lea    eax,[esp+0x34]
c000ed08:	50                   	push   eax
c000ed09:	e8 b0 fe ff ff       	call   c000ebbe <GDTEntry::setBase(unsigned int)>
c000ed0e:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000ed12:	83 e0 3f             	and    eax,0x3f
c000ed15:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000ed19:	83 c4 0c             	add    esp,0xc
c000ed1c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed24:	53                   	push   ebx
c000ed25:	e8 e4 fe ff ff       	call   c000ec0e <GDT::addEntry(GDTEntry)>
c000ed2a:	83 c4 0c             	add    esp,0xc
c000ed2d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ed31:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ed35:	53                   	push   ebx
c000ed36:	e8 d3 fe ff ff       	call   c000ec0e <GDT::addEntry(GDTEntry)>
c000ed3b:	83 c4 0c             	add    esp,0xc
c000ed3e:	57                   	push   edi
c000ed3f:	56                   	push   esi
c000ed40:	53                   	push   ebx
c000ed41:	e8 c8 fe ff ff       	call   c000ec0e <GDT::addEntry(GDTEntry)>
c000ed46:	83 c4 0c             	add    esp,0xc
c000ed49:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ed4d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ed51:	53                   	push   ebx
c000ed52:	e8 b7 fe ff ff       	call   c000ec0e <GDT::addEntry(GDTEntry)>
c000ed57:	83 c4 0c             	add    esp,0xc
c000ed5a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ed5e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ed62:	53                   	push   ebx
c000ed63:	e8 a6 fe ff ff       	call   c000ec0e <GDT::addEntry(GDTEntry)>
c000ed68:	83 c4 0c             	add    esp,0xc
c000ed6b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ed6f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ed73:	53                   	push   ebx
c000ed74:	e8 95 fe ff ff       	call   c000ec0e <GDT::addEntry(GDTEntry)>
c000ed79:	83 c4 0c             	add    esp,0xc
c000ed7c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ed80:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ed84:	53                   	push   ebx
c000ed85:	e8 84 fe ff ff       	call   c000ec0e <GDT::addEntry(GDTEntry)>
c000ed8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ed8d:	e8 a6 fe ff ff       	call   c000ec38 <GDT::flush()>
c000ed92:	83 c4 40             	add    esp,0x40
c000ed95:	5b                   	pop    ebx
c000ed96:	5e                   	pop    esi
c000ed97:	5f                   	pop    edi
c000ed98:	c3                   	ret    

c000ed99 <idleFunction(void*)>:
c000ed99:	83 ec 0c             	sub    esp,0xc
c000ed9c:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000eda3:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000edaa:	75 01                	jne    c000edad <idleFunction(void*)+0x14>
c000edac:	fb                   	sti    
c000edad:	e8 05 aa 00 00       	call   c00197b7 <HalSystemIdle()>
c000edb2:	e8 5f 2c 01 00       	call   c0021a16 <idleCommon()>
c000edb7:	eb f4                	jmp    c000edad <idleFunction(void*)+0x14>
c000edb9:	66 90                	xchg   ax,ax
c000edbb:	90                   	nop

c000edbc <IDTEntry::IDTEntry(bool)>:
c000edbc:	53                   	push   ebx
c000edbd:	83 ec 04             	sub    esp,0x4
c000edc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edc4:	88 04 24             	mov    BYTE PTR [esp],al
c000edc7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000edcb:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000edd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000edd5:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000edd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eddd:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ede0:	83 e2 f0             	and    edx,0xfffffff0
c000ede3:	83 ca 0e             	or     edx,0xe
c000ede6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ede9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eded:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000edf0:	83 e2 ef             	and    edx,0xffffffef
c000edf3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000edf6:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000edfa:	85 c0                	test   eax,eax
c000edfc:	74 06                	je     c000ee04 <IDTEntry::IDTEntry(bool)+0x48>
c000edfe:	b2 03                	mov    dl,0x3
c000ee00:	eb 06                	jmp    c000ee08 <IDTEntry::IDTEntry(bool)+0x4c>
c000ee02:	66 90                	xchg   ax,ax
c000ee04:	b2 00                	mov    dl,0x0
c000ee06:	66 90                	xchg   ax,ax
c000ee08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee0c:	83 e2 03             	and    edx,0x3
c000ee0f:	89 d3                	mov    ebx,edx
c000ee11:	c1 e3 05             	shl    ebx,0x5
c000ee14:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ee17:	83 e2 9f             	and    edx,0xffffff9f
c000ee1a:	88 d1                	mov    cl,dl
c000ee1c:	88 da                	mov    dl,bl
c000ee1e:	09 ca                	or     edx,ecx
c000ee20:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ee23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee27:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ee2a:	83 ca 80             	or     edx,0xffffff80
c000ee2d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ee30:	90                   	nop
c000ee31:	83 c4 04             	add    esp,0x4
c000ee34:	5b                   	pop    ebx
c000ee35:	c3                   	ret    

c000ee36 <IDTEntry::setOffset(unsigned int)>:
c000ee36:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ee3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee3e:	66 89 02             	mov    WORD PTR [edx],ax
c000ee41:	c1 e8 10             	shr    eax,0x10
c000ee44:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ee48:	c3                   	ret    
c000ee49:	90                   	nop
c000ee4a:	66 90                	xchg   ax,ax

c000ee4c <IDT::IDT()>:
c000ee4c:	90                   	nop
c000ee4d:	c3                   	ret    

c000ee4e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ee4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee52:	83 c0 30             	add    eax,0x30
c000ee55:	c3                   	ret    

c000ee56 <IDT::addEntry(IDTEntry, int)>:
c000ee56:	53                   	push   ebx
c000ee57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee5b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ee5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee63:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee67:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ee6a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ee6e:	5b                   	pop    ebx
c000ee6f:	c3                   	ret    

c000ee70 <IDT::addEntry(int, void (*)(), bool)>:
c000ee70:	53                   	push   ebx
c000ee71:	83 ec 10             	sub    esp,0x10
c000ee74:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ee79:	50                   	push   eax
c000ee7a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ee7e:	53                   	push   ebx
c000ee7f:	e8 38 ff ff ff       	call   c000edbc <IDTEntry::IDTEntry(bool)>
c000ee84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee88:	53                   	push   ebx
c000ee89:	e8 a8 ff ff ff       	call   c000ee36 <IDTEntry::setOffset(unsigned int)>
c000ee8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ee92:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee96:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee9a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ee9e:	e8 b3 ff ff ff       	call   c000ee56 <IDT::addEntry(IDTEntry, int)>
c000eea3:	83 c4 30             	add    esp,0x30
c000eea6:	5b                   	pop    ebx
c000eea7:	c3                   	ret    

c000eea8 <IDT::flush()>:
c000eea8:	66 c7 05 e8 e0 02 c0 ff 07 	mov    WORD PTR ds:0xc002e0e8,0x7ff
c000eeb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eeb5:	a3 ea e0 02 c0       	mov    ds:0xc002e0ea,eax
c000eeba:	0f 01 1d e8 e0 02 c0 	lidtd  ds:0xc002e0e8
c000eec1:	c3                   	ret    

c000eec2 <IDT::setup()>:
c000eec2:	57                   	push   edi
c000eec3:	56                   	push   esi
c000eec4:	53                   	push   ebx
c000eec5:	83 ec 10             	sub    esp,0x10
c000eec8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000eecc:	6a 00                	push   0x0
c000eece:	68 c0 0c 02 c0       	push   0xc0020cc0
c000eed3:	6a 00                	push   0x0
c000eed5:	53                   	push   ebx
c000eed6:	e8 95 ff ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000eedb:	6a 00                	push   0x0
c000eedd:	68 d0 0c 02 c0       	push   0xc0020cd0
c000eee2:	6a 01                	push   0x1
c000eee4:	53                   	push   ebx
c000eee5:	e8 86 ff ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000eeea:	83 c4 20             	add    esp,0x20
c000eeed:	6a 00                	push   0x0
c000eeef:	68 da 0c 02 c0       	push   0xc0020cda
c000eef4:	6a 02                	push   0x2
c000eef6:	53                   	push   ebx
c000eef7:	e8 74 ff ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000eefc:	6a 00                	push   0x0
c000eefe:	68 e4 0c 02 c0       	push   0xc0020ce4
c000ef03:	6a 03                	push   0x3
c000ef05:	53                   	push   ebx
c000ef06:	e8 65 ff ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000ef0b:	83 c4 20             	add    esp,0x20
c000ef0e:	6a 00                	push   0x0
c000ef10:	68 ee 0c 02 c0       	push   0xc0020cee
c000ef15:	6a 04                	push   0x4
c000ef17:	53                   	push   ebx
c000ef18:	e8 53 ff ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000ef1d:	6a 00                	push   0x0
c000ef1f:	68 f8 0c 02 c0       	push   0xc0020cf8
c000ef24:	6a 05                	push   0x5
c000ef26:	53                   	push   ebx
c000ef27:	e8 44 ff ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000ef2c:	83 c4 20             	add    esp,0x20
c000ef2f:	6a 00                	push   0x0
c000ef31:	68 02 0d 02 c0       	push   0xc0020d02
c000ef36:	6a 06                	push   0x6
c000ef38:	53                   	push   ebx
c000ef39:	e8 32 ff ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000ef3e:	6a 00                	push   0x0
c000ef40:	68 0c 0d 02 c0       	push   0xc0020d0c
c000ef45:	6a 07                	push   0x7
c000ef47:	53                   	push   ebx
c000ef48:	e8 23 ff ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000ef4d:	83 c4 20             	add    esp,0x20
c000ef50:	6a 00                	push   0x0
c000ef52:	68 16 0d 02 c0       	push   0xc0020d16
c000ef57:	6a 08                	push   0x8
c000ef59:	53                   	push   ebx
c000ef5a:	e8 11 ff ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000ef5f:	6a 00                	push   0x0
c000ef61:	68 1e 0d 02 c0       	push   0xc0020d1e
c000ef66:	6a 09                	push   0x9
c000ef68:	53                   	push   ebx
c000ef69:	e8 02 ff ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000ef6e:	83 c4 20             	add    esp,0x20
c000ef71:	6a 00                	push   0x0
c000ef73:	68 28 0d 02 c0       	push   0xc0020d28
c000ef78:	6a 0a                	push   0xa
c000ef7a:	53                   	push   ebx
c000ef7b:	e8 f0 fe ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000ef80:	6a 00                	push   0x0
c000ef82:	68 30 0d 02 c0       	push   0xc0020d30
c000ef87:	6a 0b                	push   0xb
c000ef89:	53                   	push   ebx
c000ef8a:	e8 e1 fe ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000ef8f:	83 c4 20             	add    esp,0x20
c000ef92:	6a 00                	push   0x0
c000ef94:	68 38 0d 02 c0       	push   0xc0020d38
c000ef99:	6a 0c                	push   0xc
c000ef9b:	53                   	push   ebx
c000ef9c:	e8 cf fe ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000efa1:	6a 00                	push   0x0
c000efa3:	68 40 0d 02 c0       	push   0xc0020d40
c000efa8:	6a 0d                	push   0xd
c000efaa:	53                   	push   ebx
c000efab:	e8 c0 fe ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000efb0:	83 c4 20             	add    esp,0x20
c000efb3:	6a 00                	push   0x0
c000efb5:	68 5a 0d 02 c0       	push   0xc0020d5a
c000efba:	6a 0e                	push   0xe
c000efbc:	53                   	push   ebx
c000efbd:	e8 ae fe ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000efc2:	6a 00                	push   0x0
c000efc4:	68 62 0d 02 c0       	push   0xc0020d62
c000efc9:	6a 0f                	push   0xf
c000efcb:	53                   	push   ebx
c000efcc:	e8 9f fe ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000efd1:	83 c4 20             	add    esp,0x20
c000efd4:	6a 00                	push   0x0
c000efd6:	68 6c 0d 02 c0       	push   0xc0020d6c
c000efdb:	6a 10                	push   0x10
c000efdd:	53                   	push   ebx
c000efde:	e8 8d fe ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000efe3:	6a 00                	push   0x0
c000efe5:	68 76 0d 02 c0       	push   0xc0020d76
c000efea:	6a 11                	push   0x11
c000efec:	53                   	push   ebx
c000efed:	e8 7e fe ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000eff2:	83 c4 20             	add    esp,0x20
c000eff5:	6a 00                	push   0x0
c000eff7:	68 80 0d 02 c0       	push   0xc0020d80
c000effc:	6a 12                	push   0x12
c000effe:	53                   	push   ebx
c000efff:	e8 6c fe ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000f004:	6a 01                	push   0x1
c000f006:	68 1a 0e 02 c0       	push   0xc0020e1a
c000f00b:	6a 60                	push   0x60
c000f00d:	53                   	push   ebx
c000f00e:	e8 5d fe ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000f013:	83 c4 20             	add    esp,0x20
c000f016:	6a 00                	push   0x0
c000f018:	68 21 0e 02 c0       	push   0xc0020e21
c000f01d:	6a 20                	push   0x20
c000f01f:	53                   	push   ebx
c000f020:	e8 4b fe ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000f025:	6a 00                	push   0x0
c000f027:	68 0c 0e 02 c0       	push   0xc0020e0c
c000f02c:	6a 21                	push   0x21
c000f02e:	53                   	push   ebx
c000f02f:	e8 3c fe ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000f034:	83 c4 20             	add    esp,0x20
c000f037:	6a 00                	push   0x0
c000f039:	68 13 0e 02 c0       	push   0xc0020e13
c000f03e:	6a 22                	push   0x22
c000f040:	53                   	push   ebx
c000f041:	e8 2a fe ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000f046:	6a 00                	push   0x0
c000f048:	68 8a 0d 02 c0       	push   0xc0020d8a
c000f04d:	6a 23                	push   0x23
c000f04f:	53                   	push   ebx
c000f050:	e8 1b fe ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000f055:	83 c4 20             	add    esp,0x20
c000f058:	6a 00                	push   0x0
c000f05a:	68 94 0d 02 c0       	push   0xc0020d94
c000f05f:	6a 24                	push   0x24
c000f061:	53                   	push   ebx
c000f062:	e8 09 fe ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000f067:	6a 00                	push   0x0
c000f069:	68 9e 0d 02 c0       	push   0xc0020d9e
c000f06e:	6a 25                	push   0x25
c000f070:	53                   	push   ebx
c000f071:	e8 fa fd ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000f076:	83 c4 20             	add    esp,0x20
c000f079:	6a 00                	push   0x0
c000f07b:	68 a8 0d 02 c0       	push   0xc0020da8
c000f080:	6a 26                	push   0x26
c000f082:	53                   	push   ebx
c000f083:	e8 e8 fd ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000f088:	6a 00                	push   0x0
c000f08a:	68 b2 0d 02 c0       	push   0xc0020db2
c000f08f:	6a 27                	push   0x27
c000f091:	53                   	push   ebx
c000f092:	e8 d9 fd ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000f097:	83 c4 20             	add    esp,0x20
c000f09a:	6a 00                	push   0x0
c000f09c:	68 bc 0d 02 c0       	push   0xc0020dbc
c000f0a1:	6a 28                	push   0x28
c000f0a3:	53                   	push   ebx
c000f0a4:	e8 c7 fd ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000f0a9:	6a 00                	push   0x0
c000f0ab:	68 c6 0d 02 c0       	push   0xc0020dc6
c000f0b0:	6a 29                	push   0x29
c000f0b2:	53                   	push   ebx
c000f0b3:	e8 b8 fd ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000f0b8:	83 c4 20             	add    esp,0x20
c000f0bb:	6a 00                	push   0x0
c000f0bd:	68 d0 0d 02 c0       	push   0xc0020dd0
c000f0c2:	6a 2a                	push   0x2a
c000f0c4:	53                   	push   ebx
c000f0c5:	e8 a6 fd ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000f0ca:	6a 00                	push   0x0
c000f0cc:	68 da 0d 02 c0       	push   0xc0020dda
c000f0d1:	6a 2b                	push   0x2b
c000f0d3:	53                   	push   ebx
c000f0d4:	e8 97 fd ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000f0d9:	83 c4 20             	add    esp,0x20
c000f0dc:	6a 00                	push   0x0
c000f0de:	68 e4 0d 02 c0       	push   0xc0020de4
c000f0e3:	6a 2c                	push   0x2c
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 85 fd ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	68 ee 0d 02 c0       	push   0xc0020dee
c000f0f2:	6a 2d                	push   0x2d
c000f0f4:	53                   	push   ebx
c000f0f5:	e8 76 fd ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000f0fa:	83 c4 20             	add    esp,0x20
c000f0fd:	6a 00                	push   0x0
c000f0ff:	68 f8 0d 02 c0       	push   0xc0020df8
c000f104:	6a 2e                	push   0x2e
c000f106:	53                   	push   ebx
c000f107:	e8 64 fd ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000f10c:	6a 00                	push   0x0
c000f10e:	68 02 0e 02 c0       	push   0xc0020e02
c000f113:	6a 2f                	push   0x2f
c000f115:	53                   	push   ebx
c000f116:	e8 55 fd ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000f11b:	83 c4 20             	add    esp,0x20
c000f11e:	6a 00                	push   0x0
c000f120:	68 5c 0f 02 c0       	push   0xc0020f5c
c000f125:	6a 30                	push   0x30
c000f127:	53                   	push   ebx
c000f128:	e8 43 fd ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000f12d:	6a 00                	push   0x0
c000f12f:	68 66 0f 02 c0       	push   0xc0020f66
c000f134:	6a 31                	push   0x31
c000f136:	53                   	push   ebx
c000f137:	e8 34 fd ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000f13c:	83 c4 20             	add    esp,0x20
c000f13f:	6a 00                	push   0x0
c000f141:	68 70 0f 02 c0       	push   0xc0020f70
c000f146:	6a 32                	push   0x32
c000f148:	53                   	push   ebx
c000f149:	e8 22 fd ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000f14e:	6a 00                	push   0x0
c000f150:	68 7a 0f 02 c0       	push   0xc0020f7a
c000f155:	6a 33                	push   0x33
c000f157:	53                   	push   ebx
c000f158:	e8 13 fd ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000f15d:	83 c4 20             	add    esp,0x20
c000f160:	6a 00                	push   0x0
c000f162:	68 84 0f 02 c0       	push   0xc0020f84
c000f167:	6a 34                	push   0x34
c000f169:	53                   	push   ebx
c000f16a:	e8 01 fd ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000f16f:	6a 00                	push   0x0
c000f171:	68 8e 0f 02 c0       	push   0xc0020f8e
c000f176:	6a 35                	push   0x35
c000f178:	53                   	push   ebx
c000f179:	e8 f2 fc ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000f17e:	83 c4 20             	add    esp,0x20
c000f181:	6a 00                	push   0x0
c000f183:	68 98 0f 02 c0       	push   0xc0020f98
c000f188:	6a 36                	push   0x36
c000f18a:	53                   	push   ebx
c000f18b:	e8 e0 fc ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000f190:	6a 00                	push   0x0
c000f192:	68 a2 0f 02 c0       	push   0xc0020fa2
c000f197:	6a 37                	push   0x37
c000f199:	53                   	push   ebx
c000f19a:	e8 d1 fc ff ff       	call   c000ee70 <IDT::addEntry(int, void (*)(), bool)>
c000f19f:	83 c4 1c             	add    esp,0x1c
c000f1a2:	6a 03                	push   0x3
c000f1a4:	6a 02                	push   0x2
c000f1a6:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000f1ac:	e8 a5 47 00 00       	call   c0013956 <VAS::allocatePages(int, int)>
c000f1b1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f1b8:	89 c6                	mov    esi,eax
c000f1ba:	e8 b1 08 00 00       	call   c000fa70 <malloc>
c000f1bf:	81 c6 00 20 00 00    	add    esi,0x2000
c000f1c5:	89 04 24             	mov    DWORD PTR [esp],eax
c000f1c8:	89 c7                	mov    edi,eax
c000f1ca:	e8 49 38 00 00       	call   c0012a18 <TSS::TSS()>
c000f1cf:	83 c4 0c             	add    esp,0xc
c000f1d2:	68 16 0d 02 c0       	push   0xc0020d16
c000f1d7:	56                   	push   esi
c000f1d8:	57                   	push   edi
c000f1d9:	e8 7e 38 00 00       	call   c0012a5c <TSS::setup(unsigned long, unsigned long)>
c000f1de:	89 c6                	mov    esi,eax
c000f1e0:	58                   	pop    eax
c000f1e1:	5a                   	pop    edx
c000f1e2:	6a 00                	push   0x0
c000f1e4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f1e8:	50                   	push   eax
c000f1e9:	e8 ce fb ff ff       	call   c000edbc <IDTEntry::IDTEntry(bool)>
c000f1ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f1f2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f1f7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f1fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f202:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f208:	80 ce 05             	or     dh,0x5
c000f20b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f20f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f212:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f216:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f219:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f21c:	e8 87 fc ff ff       	call   c000eea8 <IDT::flush()>
c000f221:	83 c4 20             	add    esp,0x20
c000f224:	5b                   	pop    ebx
c000f225:	5e                   	pop    esi
c000f226:	5f                   	pop    edi
c000f227:	c3                   	ret    

c000f228 <CPU::current()>:
c000f228:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000f22d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f233:	c3                   	ret    

c000f234 <operator new(unsigned long)>:
c000f234:	e9 37 08 00 00       	jmp    c000fa70 <malloc>

c000f239 <operator delete(void*)>:
c000f239:	e9 52 08 00 00       	jmp    c000fa90 <rfree>

c000f23e <disableIRQs()>:
c000f23e:	fa                   	cli    
c000f23f:	c3                   	ret    

c000f240 <enableIRQs()>:
c000f240:	fb                   	sti    
c000f241:	c3                   	ret    

c000f242 <lockScheduler()>:
c000f242:	fa                   	cli    
c000f243:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c000f249:	c3                   	ret    

c000f24a <unlockScheduler()>:
c000f24a:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000f251:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000f258:	75 01                	jne    c000f25b <unlockScheduler()+0x11>
c000f25a:	fb                   	sti    
c000f25b:	c3                   	ret    

c000f25c <lockStuff()>:
c000f25c:	fa                   	cli    
c000f25d:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c000f263:	ff 05 2c ea 02 c0    	inc    DWORD PTR ds:0xc002ea2c
c000f269:	c3                   	ret    

c000f26a <unlockStuff()>:
c000f26a:	83 ec 0c             	sub    esp,0xc
c000f26d:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c000f272:	48                   	dec    eax
c000f273:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c000f278:	75 18                	jne    c000f292 <unlockStuff()+0x28>
c000f27a:	83 3d 28 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea28,0x0
c000f281:	74 0f                	je     c000f292 <unlockStuff()+0x28>
c000f283:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c000f28d:	e8 46 77 00 00       	call   c00169d8 <schedule()>
c000f292:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000f299:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000f2a0:	75 01                	jne    c000f2a3 <unlockStuff()+0x39>
c000f2a2:	fb                   	sti    
c000f2a3:	83 c4 0c             	add    esp,0xc
c000f2a6:	c3                   	ret    

c000f2a7 <Virt::getAKernelVAS()>:
c000f2a7:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c000f2ac:	c3                   	ret    

c000f2ad <__not_memcpy>:
c000f2ad:	57                   	push   edi
c000f2ae:	56                   	push   esi
c000f2af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f2b7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f2bb:	89 c7                	mov    edi,eax
c000f2bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2bf:	5e                   	pop    esi
c000f2c0:	5f                   	pop    edi
c000f2c1:	c3                   	ret    

c000f2c2 <KeFormatDate(char*, int, int, int, int, bool)>:
c000f2c2:	55                   	push   ebp
c000f2c3:	57                   	push   edi
c000f2c4:	56                   	push   esi
c000f2c5:	be e8 03 00 00       	mov    esi,0x3e8
c000f2ca:	53                   	push   ebx
c000f2cb:	bb 0a 00 00 00       	mov    ebx,0xa
c000f2d0:	81 ec ac 00 00 00    	sub    esp,0xac
c000f2d6:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000f2db:	8b 8c 24 d0 00 00 00 	mov    ecx,DWORD PTR [esp+0xd0]
c000f2e2:	89 c8                	mov    eax,ecx
c000f2e4:	99                   	cdq    
c000f2e5:	f7 fb                	idiv   ebx
c000f2e7:	89 d5                	mov    ebp,edx
c000f2e9:	99                   	cdq    
c000f2ea:	f7 fb                	idiv   ebx
c000f2ec:	8d 42 30             	lea    eax,[edx+0x30]
c000f2ef:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f2f3:	8d 45 30             	lea    eax,[ebp+0x30]
c000f2f6:	0f b6 ac 24 d4 00 00 00 	movzx  ebp,BYTE PTR [esp+0xd4]
c000f2fe:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000f302:	89 c8                	mov    eax,ecx
c000f304:	99                   	cdq    
c000f305:	f7 fe                	idiv   esi
c000f307:	be 64 00 00 00       	mov    esi,0x64
c000f30c:	99                   	cdq    
c000f30d:	f7 fb                	idiv   ebx
c000f30f:	8d 42 30             	lea    eax,[edx+0x30]
c000f312:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000f316:	89 c8                	mov    eax,ecx
c000f318:	99                   	cdq    
c000f319:	f7 fe                	idiv   esi
c000f31b:	99                   	cdq    
c000f31c:	f7 fb                	idiv   ebx
c000f31e:	31 db                	xor    ebx,ebx
c000f320:	8d 42 30             	lea    eax,[edx+0x30]
c000f323:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000f327:	0f be 8b 04 e1 02 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffd1efc]
c000f32e:	83 f9 59             	cmp    ecx,0x59
c000f331:	0f 84 1f 01 00 00    	je     c000f456 <KeFormatDate(char*, int, int, int, int, bool)+0x194>
c000f337:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000f33b:	8b 94 24 c8 00 00 00 	mov    edx,DWORD PTR [esp+0xc8]
c000f342:	83 f9 4d             	cmp    ecx,0x4d
c000f345:	0f 44 94 24 cc 00 00 00 	cmove  edx,DWORD PTR [esp+0xcc]
c000f34d:	57                   	push   edi
c000f34e:	57                   	push   edi
c000f34f:	89 d7                	mov    edi,edx
c000f351:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f355:	c1 ff 1f             	sar    edi,0x1f
c000f358:	57                   	push   edi
c000f359:	52                   	push   edx
c000f35a:	e8 6d 04 00 00       	call   c000f7cc <KeGetDigitsInNumber(long long)>
c000f35f:	83 c4 10             	add    esp,0x10
c000f362:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f366:	48                   	dec    eax
c000f367:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f36b:	75 1c                	jne    c000f389 <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000f36d:	83 f9 44             	cmp    ecx,0x44
c000f370:	75 09                	jne    c000f37b <KeFormatDate(char*, int, int, int, int, bool)+0xb9>
c000f372:	80 3d 20 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e120,0x0
c000f379:	eb 0c                	jmp    c000f387 <KeFormatDate(char*, int, int, int, int, bool)+0xc5>
c000f37b:	83 f9 4d             	cmp    ecx,0x4d
c000f37e:	75 60                	jne    c000f3e0 <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000f380:	80 3d 21 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e121,0x0
c000f387:	74 57                	je     c000f3e0 <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000f389:	89 d0                	mov    eax,edx
c000f38b:	b9 0a 00 00 00       	mov    ecx,0xa
c000f390:	99                   	cdq    
c000f391:	f7 f9                	idiv   ecx
c000f393:	89 d6                	mov    esi,edx
c000f395:	99                   	cdq    
c000f396:	f7 f9                	idiv   ecx
c000f398:	83 c2 30             	add    edx,0x30
c000f39b:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f39f:	8d 56 30             	lea    edx,[esi+0x30]
c000f3a2:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000f3a6:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000f3ab:	56                   	push   esi
c000f3ac:	56                   	push   esi
c000f3ad:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000f3b1:	57                   	push   edi
c000f3b2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f3b6:	56                   	push   esi
c000f3b7:	e8 b4 14 ff ff       	call   c0000870 <strcat>
c000f3bc:	83 c4 10             	add    esp,0x10
c000f3bf:	83 fb 02             	cmp    ebx,0x2
c000f3c2:	74 34                	je     c000f3f8 <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000f3c4:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f3c9:	a0 08 e1 02 c0       	mov    al,ds:0xc002e108
c000f3ce:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f3d2:	51                   	push   ecx
c000f3d3:	51                   	push   ecx
c000f3d4:	57                   	push   edi
c000f3d5:	56                   	push   esi
c000f3d6:	e8 95 14 ff ff       	call   c0000870 <strcat>
c000f3db:	83 c4 10             	add    esp,0x10
c000f3de:	eb 18                	jmp    c000f3f8 <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000f3e0:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f3e5:	89 d0                	mov    eax,edx
c000f3e7:	b9 0a 00 00 00       	mov    ecx,0xa
c000f3ec:	99                   	cdq    
c000f3ed:	f7 f9                	idiv   ecx
c000f3ef:	83 c2 30             	add    edx,0x30
c000f3f2:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f3f6:	eb b3                	jmp    c000f3ab <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000f3f8:	43                   	inc    ebx
c000f3f9:	83 fb 03             	cmp    ebx,0x3
c000f3fc:	0f 85 25 ff ff ff    	jne    c000f327 <KeFormatDate(char*, int, int, int, int, bool)+0x65>
c000f402:	52                   	push   edx
c000f403:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000f40a:	6a 00                	push   0x0
c000f40c:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f413:	e8 d8 10 ff ff       	call   c00004f0 <memset>
c000f418:	89 34 24             	mov    DWORD PTR [esp],esi
c000f41b:	e8 60 11 ff ff       	call   c0000580 <strlen>
c000f420:	83 c4 10             	add    esp,0x10
c000f423:	40                   	inc    eax
c000f424:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000f42b:	72 14                	jb     c000f441 <KeFormatDate(char*, int, int, int, int, bool)+0x17f>
c000f42d:	50                   	push   eax
c000f42e:	50                   	push   eax
c000f42f:	56                   	push   esi
c000f430:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f437:	e8 14 12 ff ff       	call   c0000650 <strcpy>
c000f43c:	83 c4 10             	add    esp,0x10
c000f43f:	eb 58                	jmp    c000f499 <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000f441:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000f448:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000f44f:	8d 48 ff             	lea    ecx,[eax-0x1]
c000f452:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f454:	eb 43                	jmp    c000f499 <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000f456:	85 ed                	test   ebp,ebp
c000f458:	74 2a                	je     c000f484 <KeFormatDate(char*, int, int, int, int, bool)+0x1c2>
c000f45a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f45f:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000f463:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f467:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f46b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f46f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f473:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000f477:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f47b:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f47f:	e9 27 ff ff ff       	jmp    c000f3ab <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000f484:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f488:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f48c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f490:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f494:	e9 0d ff ff ff       	jmp    c000f3a6 <KeFormatDate(char*, int, int, int, int, bool)+0xe4>
c000f499:	81 c4 ac 00 00 00    	add    esp,0xac
c000f49f:	5b                   	pop    ebx
c000f4a0:	5e                   	pop    esi
c000f4a1:	5f                   	pop    edi
c000f4a2:	5d                   	pop    ebp
c000f4a3:	c3                   	ret    

c000f4a4 <KeFormatShortDate(char*, int, int, int, int)>:
c000f4a4:	83 ec 14             	sub    esp,0x14
c000f4a7:	6a 00                	push   0x0
c000f4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4bd:	e8 00 fe ff ff       	call   c000f2c2 <KeFormatDate(char*, int, int, int, int, bool)>
c000f4c2:	83 c4 2c             	add    esp,0x2c
c000f4c5:	c3                   	ret    

c000f4c6 <KeFormatLongDate(char*, int, int, int, int)>:
c000f4c6:	83 ec 14             	sub    esp,0x14
c000f4c9:	6a 01                	push   0x1
c000f4cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4df:	e8 de fd ff ff       	call   c000f2c2 <KeFormatDate(char*, int, int, int, int, bool)>
c000f4e4:	83 c4 2c             	add    esp,0x2c
c000f4e7:	c3                   	ret    

c000f4e8 <KeSetLocale(klocale_t)>:
c000f4e8:	57                   	push   edi
c000f4e9:	b9 09 00 00 00       	mov    ecx,0x9
c000f4ee:	56                   	push   esi
c000f4ef:	bf 00 e1 02 c0       	mov    edi,0xc002e100
c000f4f4:	fc                   	cld    
c000f4f5:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f4f9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f4fb:	5e                   	pop    esi
c000f4fc:	5f                   	pop    edi
c000f4fd:	c3                   	ret    

c000f4fe <KeInitialiseLocale()>:
c000f4fe:	57                   	push   edi
c000f4ff:	56                   	push   esi
c000f500:	83 ec 3c             	sub    esp,0x3c
c000f503:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000f50b:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000f513:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000f51b:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000f523:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000f52a:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000f532:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000f53a:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000f541:	68 66 39 02 c0       	push   0xc0023966
c000f546:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000f54a:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f54e:	50                   	push   eax
c000f54f:	e8 fc 10 ff ff       	call   c0000650 <strcpy>
c000f554:	83 ec 20             	sub    esp,0x20
c000f557:	b9 09 00 00 00       	mov    ecx,0x9
c000f55c:	fc                   	cld    
c000f55d:	89 e7                	mov    edi,esp
c000f55f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f561:	e8 82 ff ff ff       	call   c000f4e8 <KeSetLocale(klocale_t)>
c000f566:	83 c4 64             	add    esp,0x64
c000f569:	5e                   	pop    esi
c000f56a:	5f                   	pop    edi
c000f56b:	c3                   	ret    

c000f56c <KeFormatCurrency(char*, int, long long, long long)>:
c000f56c:	c3                   	ret    

c000f56d <KeFormatCurrency(char*, int, double)>:
c000f56d:	c3                   	ret    

c000f56e <KeFormatNumber(char*, long long, long long)>:
c000f56e:	c3                   	ret    

c000f56f <KeFormatNumber(char*, double)>:
c000f56f:	c3                   	ret    

c000f570 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000f570:	55                   	push   ebp
c000f571:	57                   	push   edi
c000f572:	56                   	push   esi
c000f573:	53                   	push   ebx
c000f574:	83 ec 4c             	sub    esp,0x4c
c000f577:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f57b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f57f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f583:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f587:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000f58f:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000f597:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000f59f:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000f5a7:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f5ac:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f5b0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f5b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f5b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f5bc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f5c0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f5c4:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000f5c9:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f5cd:	89 c2                	mov    edx,eax
c000f5cf:	c1 fa 1f             	sar    edx,0x1f
c000f5d2:	52                   	push   edx
c000f5d3:	50                   	push   eax
c000f5d4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f5d8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f5dc:	e8 63 1d 01 00       	call   c0021344 <__udivdi3>
c000f5e1:	83 c4 10             	add    esp,0x10
c000f5e4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f5e8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f5ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f5f0:	80 f4 00             	xor    ah,0x0
c000f5f3:	89 c7                	mov    edi,eax
c000f5f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5f9:	80 f4 00             	xor    ah,0x0
c000f5fc:	89 c5                	mov    ebp,eax
c000f5fe:	89 e8                	mov    eax,ebp
c000f600:	09 f8                	or     eax,edi
c000f602:	74 04                	je     c000f608 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x98>
c000f604:	eb be                	jmp    c000f5c4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000f606:	66 90                	xchg   ax,ax
c000f608:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f60c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f60f:	90                   	nop
c000f610:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f614:	89 c7                	mov    edi,eax
c000f616:	89 c5                	mov    ebp,eax
c000f618:	c1 fd 1f             	sar    ebp,0x1f
c000f61b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f61f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f623:	55                   	push   ebp
c000f624:	57                   	push   edi
c000f625:	52                   	push   edx
c000f626:	50                   	push   eax
c000f627:	e8 18 1e 01 00       	call   c0021444 <__umoddi3>
c000f62c:	83 c4 10             	add    esp,0x10
c000f62f:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000f634:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000f638:	01 c8                	add    eax,ecx
c000f63a:	8a 10                	mov    dl,BYTE PTR [eax]
c000f63c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f640:	88 10                	mov    BYTE PTR [eax],dl
c000f642:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f646:	89 c2                	mov    edx,eax
c000f648:	c1 fa 1f             	sar    edx,0x1f
c000f64b:	52                   	push   edx
c000f64c:	50                   	push   eax
c000f64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f651:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f655:	e8 ea 1c 01 00       	call   c0021344 <__udivdi3>
c000f65a:	83 c4 10             	add    esp,0x10
c000f65d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f661:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f665:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f669:	80 f4 00             	xor    ah,0x0
c000f66c:	89 c3                	mov    ebx,eax
c000f66e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f672:	80 f4 00             	xor    ah,0x0
c000f675:	89 c6                	mov    esi,eax
c000f677:	89 f0                	mov    eax,esi
c000f679:	09 d8                	or     eax,ebx
c000f67b:	74 03                	je     c000f680 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x110>
c000f67d:	eb 91                	jmp    c000f610 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa0>
c000f67f:	90                   	nop
c000f680:	90                   	nop
c000f681:	83 c4 4c             	add    esp,0x4c
c000f684:	5b                   	pop    ebx
c000f685:	5e                   	pop    esi
c000f686:	5f                   	pop    edi
c000f687:	5d                   	pop    ebp
c000f688:	c3                   	ret    
c000f689:	8d 76 00             	lea    esi,[esi+0x0]

c000f68c <KeBasedSignedIntegerToString(long long, char*, int)>:
c000f68c:	55                   	push   ebp
c000f68d:	57                   	push   edi
c000f68e:	56                   	push   esi
c000f68f:	53                   	push   ebx
c000f690:	83 ec 4c             	sub    esp,0x4c
c000f693:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f697:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f69b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f69f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f6a3:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000f6ab:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000f6b3:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000f6bb:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000f6c3:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f6c8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f6cc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f6d0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000f6d5:	79 1d                	jns    c000f6f4 <KeBasedSignedIntegerToString(long long, char*, int)+0x68>
c000f6d7:	f7 5c 24 08          	neg    DWORD PTR [esp+0x8]
c000f6db:	83 54 24 0c 00       	adc    DWORD PTR [esp+0xc],0x0
c000f6e0:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c000f6e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f6e8:	8d 50 01             	lea    edx,[eax+0x1]
c000f6eb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000f6ef:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000f6f2:	66 90                	xchg   ax,ax
c000f6f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f6f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f6fc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f700:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f704:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000f709:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f70d:	89 c2                	mov    edx,eax
c000f70f:	c1 fa 1f             	sar    edx,0x1f
c000f712:	52                   	push   edx
c000f713:	50                   	push   eax
c000f714:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f71c:	e8 23 1c 01 00       	call   c0021344 <__udivdi3>
c000f721:	83 c4 10             	add    esp,0x10
c000f724:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f728:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f72c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f730:	80 f4 00             	xor    ah,0x0
c000f733:	89 c7                	mov    edi,eax
c000f735:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f739:	80 f4 00             	xor    ah,0x0
c000f73c:	89 c5                	mov    ebp,eax
c000f73e:	89 e8                	mov    eax,ebp
c000f740:	09 f8                	or     eax,edi
c000f742:	74 04                	je     c000f748 <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000f744:	eb be                	jmp    c000f704 <KeBasedSignedIntegerToString(long long, char*, int)+0x78>
c000f746:	66 90                	xchg   ax,ax
c000f748:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f74c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f74f:	90                   	nop
c000f750:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f754:	89 c7                	mov    edi,eax
c000f756:	89 c5                	mov    ebp,eax
c000f758:	c1 fd 1f             	sar    ebp,0x1f
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f763:	55                   	push   ebp
c000f764:	57                   	push   edi
c000f765:	52                   	push   edx
c000f766:	50                   	push   eax
c000f767:	e8 58 1a 01 00       	call   c00211c4 <__moddi3>
c000f76c:	83 c4 10             	add    esp,0x10
c000f76f:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000f774:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000f778:	01 c8                	add    eax,ecx
c000f77a:	8a 10                	mov    dl,BYTE PTR [eax]
c000f77c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f780:	88 10                	mov    BYTE PTR [eax],dl
c000f782:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f786:	89 c2                	mov    edx,eax
c000f788:	c1 fa 1f             	sar    edx,0x1f
c000f78b:	52                   	push   edx
c000f78c:	50                   	push   eax
c000f78d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f795:	e8 de 18 01 00       	call   c0021078 <__divdi3>
c000f79a:	83 c4 10             	add    esp,0x10
c000f79d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f7a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f7a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7a9:	80 f4 00             	xor    ah,0x0
c000f7ac:	89 c3                	mov    ebx,eax
c000f7ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7b2:	80 f4 00             	xor    ah,0x0
c000f7b5:	89 c6                	mov    esi,eax
c000f7b7:	89 f0                	mov    eax,esi
c000f7b9:	09 d8                	or     eax,ebx
c000f7bb:	74 03                	je     c000f7c0 <KeBasedSignedIntegerToString(long long, char*, int)+0x134>
c000f7bd:	eb 91                	jmp    c000f750 <KeBasedSignedIntegerToString(long long, char*, int)+0xc4>
c000f7bf:	90                   	nop
c000f7c0:	90                   	nop
c000f7c1:	83 c4 4c             	add    esp,0x4c
c000f7c4:	5b                   	pop    ebx
c000f7c5:	5e                   	pop    esi
c000f7c6:	5f                   	pop    edi
c000f7c7:	5d                   	pop    ebp
c000f7c8:	c3                   	ret    
c000f7c9:	8d 76 00             	lea    esi,[esi+0x0]

c000f7cc <KeGetDigitsInNumber(long long)>:
c000f7cc:	56                   	push   esi
c000f7cd:	53                   	push   ebx
c000f7ce:	83 ec 24             	sub    esp,0x24
c000f7d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f7d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f7d9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f7dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f7e1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000f7e9:	8d 76 00             	lea    esi,[esi+0x0]
c000f7ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7f0:	80 f4 00             	xor    ah,0x0
c000f7f3:	89 c3                	mov    ebx,eax
c000f7f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7f9:	80 f4 00             	xor    ah,0x0
c000f7fc:	89 c6                	mov    esi,eax
c000f7fe:	89 f0                	mov    eax,esi
c000f800:	09 d8                	or     eax,ebx
c000f802:	74 28                	je     c000f82c <KeGetDigitsInNumber(long long)+0x60>
c000f804:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f808:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f80c:	6a 00                	push   0x0
c000f80e:	6a 0a                	push   0xa
c000f810:	52                   	push   edx
c000f811:	50                   	push   eax
c000f812:	e8 61 18 01 00       	call   c0021078 <__divdi3>
c000f817:	83 c4 10             	add    esp,0x10
c000f81a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f81e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f822:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000f827:	eb c3                	jmp    c000f7ec <KeGetDigitsInNumber(long long)+0x20>
c000f829:	8d 76 00             	lea    esi,[esi+0x0]
c000f82c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f830:	83 c4 24             	add    esp,0x24
c000f833:	5b                   	pop    ebx
c000f834:	5e                   	pop    esi
c000f835:	c3                   	ret    
c000f836:	66 90                	xchg   ax,ax

c000f838 <KeItoa(unsigned long long, char*)>:
c000f838:	83 ec 1c             	sub    esp,0x1c
c000f83b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f83f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f843:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f847:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f84b:	6a 0a                	push   0xa
c000f84d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f851:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f855:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f859:	e8 12 fd ff ff       	call   c000f570 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f85e:	83 c4 10             	add    esp,0x10
c000f861:	90                   	nop
c000f862:	83 c4 1c             	add    esp,0x1c
c000f865:	c3                   	ret    
c000f866:	66 90                	xchg   ax,ax

c000f868 <KeItoa(long long, char*)>:
c000f868:	83 ec 1c             	sub    esp,0x1c
c000f86b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f86f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f873:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f877:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f87b:	6a 0a                	push   0xa
c000f87d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f881:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f885:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f889:	e8 fe fd ff ff       	call   c000f68c <KeBasedSignedIntegerToString(long long, char*, int)>
c000f88e:	83 c4 10             	add    esp,0x10
c000f891:	90                   	nop
c000f892:	83 c4 1c             	add    esp,0x1c
c000f895:	c3                   	ret    
c000f896:	66 90                	xchg   ax,ax

c000f898 <KeXtoa(unsigned long long, char*)>:
c000f898:	83 ec 1c             	sub    esp,0x1c
c000f89b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f8a3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f8a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f8ab:	6a 10                	push   0x10
c000f8ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f8b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f8b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f8b9:	e8 b2 fc ff ff       	call   c000f570 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f8be:	83 c4 10             	add    esp,0x10
c000f8c1:	90                   	nop
c000f8c2:	83 c4 1c             	add    esp,0x1c
c000f8c5:	c3                   	ret    

c000f8c6 <sbrk>:
c000f8c6:	55                   	push   ebp
c000f8c7:	57                   	push   edi
c000f8c8:	56                   	push   esi
c000f8c9:	53                   	push   ebx
c000f8ca:	83 ec 1c             	sub    esp,0x1c
c000f8cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f8d1:	85 c0                	test   eax,eax
c000f8d3:	74 66                	je     c000f93b <sbrk+0x75>
c000f8d5:	78 6b                	js     c000f942 <sbrk+0x7c>
c000f8d7:	8b 15 50 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025f50
c000f8dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f8e1:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c000f8e7:	05 ff 0f 00 00       	add    eax,0xfff
c000f8ec:	0f 49 e8             	cmovns ebp,eax
c000f8ef:	c1 fd 0c             	sar    ebp,0xc
c000f8f2:	bb 00 00 00 00       	mov    ebx,0x0
c000f8f7:	8b 35 50 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e250
c000f8fd:	8b 3d 50 5f 02 c0    	mov    edi,DWORD PTR ds:0xc0025f50
c000f903:	e8 a8 06 00 00       	call   c000ffb0 <Phys::allocatePage()>
c000f908:	68 01 04 00 00       	push   0x401
c000f90d:	57                   	push   edi
c000f90e:	50                   	push   eax
c000f90f:	56                   	push   esi
c000f910:	e8 39 3f 00 00       	call   c001384e <VAS::mapPage(unsigned long, unsigned long, int)>
c000f915:	81 05 50 5f 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0025f50,0x1000
c000f91f:	83 c3 01             	add    ebx,0x1
c000f922:	83 c4 10             	add    esp,0x10
c000f925:	39 dd                	cmp    ebp,ebx
c000f927:	75 ce                	jne    c000f8f7 <sbrk+0x31>
c000f929:	0f 20 d8             	mov    eax,cr3
c000f92c:	0f 22 d8             	mov    cr3,eax
c000f92f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f933:	83 c4 1c             	add    esp,0x1c
c000f936:	5b                   	pop    ebx
c000f937:	5e                   	pop    esi
c000f938:	5f                   	pop    edi
c000f939:	5d                   	pop    ebp
c000f93a:	c3                   	ret    
c000f93b:	a1 50 5f 02 c0       	mov    eax,ds:0xc0025f50
c000f940:	eb f1                	jmp    c000f933 <sbrk+0x6d>
c000f942:	83 ec 08             	sub    esp,0x8
c000f945:	50                   	push   eax
c000f946:	68 6c 39 02 c0       	push   0xc002396c
c000f94b:	e8 fe 75 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f950:	83 c4 10             	add    esp,0x10
c000f953:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f958:	eb d9                	jmp    c000f933 <sbrk+0x6d>

c000f95a <sbrk_thunk>:
c000f95a:	83 ec 0c             	sub    esp,0xc
c000f95d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f961:	3d ff bf 00 00       	cmp    eax,0xbfff
c000f966:	7f 10                	jg     c000f978 <sbrk_thunk+0x1e>
c000f968:	83 ec 0c             	sub    esp,0xc
c000f96b:	50                   	push   eax
c000f96c:	e8 55 ff ff ff       	call   c000f8c6 <sbrk>
c000f971:	83 c4 10             	add    esp,0x10
c000f974:	83 c4 0c             	add    esp,0xc
c000f977:	c3                   	ret    
c000f978:	83 ec 08             	sub    esp,0x8
c000f97b:	50                   	push   eax
c000f97c:	68 9c 39 02 c0       	push   0xc002399c
c000f981:	e8 c8 75 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f986:	83 c4 10             	add    esp,0x10
c000f989:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f98e:	eb e4                	jmp    c000f974 <sbrk_thunk+0x1a>

c000f990 <mmap>:
c000f990:	55                   	push   ebp
c000f991:	57                   	push   edi
c000f992:	56                   	push   esi
c000f993:	53                   	push   ebx
c000f994:	83 ec 18             	sub    esp,0x18
c000f997:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f99b:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000f9a1:	89 fb                	mov    ebx,edi
c000f9a3:	c1 eb 0c             	shr    ebx,0xc
c000f9a6:	53                   	push   ebx
c000f9a7:	e8 c9 37 00 00       	call   c0013175 <Virt::allocateKernelVirtualPages(int)>
c000f9ac:	89 c5                	mov    ebp,eax
c000f9ae:	83 c4 10             	add    esp,0x10
c000f9b1:	85 db                	test   ebx,ebx
c000f9b3:	7e 2f                	jle    c000f9e4 <mmap+0x54>
c000f9b5:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000f9bb:	01 c7                	add    edi,eax
c000f9bd:	89 c3                	mov    ebx,eax
c000f9bf:	8b 35 50 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e250
c000f9c5:	e8 e6 05 00 00       	call   c000ffb0 <Phys::allocatePage()>
c000f9ca:	68 01 04 00 00       	push   0x401
c000f9cf:	53                   	push   ebx
c000f9d0:	50                   	push   eax
c000f9d1:	56                   	push   esi
c000f9d2:	e8 77 3e 00 00       	call   c001384e <VAS::mapPage(unsigned long, unsigned long, int)>
c000f9d7:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f9dd:	83 c4 10             	add    esp,0x10
c000f9e0:	39 fb                	cmp    ebx,edi
c000f9e2:	75 db                	jne    c000f9bf <mmap+0x2f>
c000f9e4:	89 e8                	mov    eax,ebp
c000f9e6:	83 c4 0c             	add    esp,0xc
c000f9e9:	5b                   	pop    ebx
c000f9ea:	5e                   	pop    esi
c000f9eb:	5f                   	pop    edi
c000f9ec:	5d                   	pop    ebp
c000f9ed:	c3                   	ret    

c000f9ee <munmap>:
c000f9ee:	83 ec 18             	sub    esp,0x18
c000f9f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9f5:	e8 79 3a 00 00       	call   c0013473 <Virt::freeKernelVirtualPages(unsigned long)>
c000f9fa:	b8 00 00 00 00       	mov    eax,0x0
c000f9ff:	83 c4 1c             	add    esp,0x1c
c000fa02:	c3                   	ret    

c000fa03 <liballoc_lock()>:
c000fa03:	fa                   	cli    
c000fa04:	83 05 30 ea 02 c0 01 	add    DWORD PTR ds:0xc002ea30,0x1
c000fa0b:	b8 00 00 00 00       	mov    eax,0x0
c000fa10:	c3                   	ret    

c000fa11 <liballoc_unlock()>:
c000fa11:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fa19:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000fa20:	75 01                	jne    c000fa23 <liballoc_unlock()+0x12>
c000fa22:	fb                   	sti    
c000fa23:	b8 00 00 00 00       	mov    eax,0x0
c000fa28:	c3                   	ret    

c000fa29 <liballoc_alloc(int)>:
c000fa29:	83 ec 10             	sub    esp,0x10
c000fa2c:	6a 01                	push   0x1
c000fa2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fa32:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000fa38:	e8 19 3f 00 00       	call   c0013956 <VAS::allocatePages(int, int)>
c000fa3d:	83 c4 1c             	add    esp,0x1c
c000fa40:	c3                   	ret    

c000fa41 <liballoc_free(void*, int)>:
c000fa41:	83 ec 14             	sub    esp,0x14
c000fa44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fa48:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000fa4e:	e8 5d 3b 00 00       	call   c00135b0 <VAS::freeAllocatedPages(unsigned long)>
c000fa53:	b8 00 00 00 00       	mov    eax,0x0
c000fa58:	83 c4 1c             	add    esp,0x1c
c000fa5b:	c3                   	ret    

c000fa5c <realloc>:
c000fa5c:	83 ec 14             	sub    esp,0x14
c000fa5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa67:	e8 19 1d ff ff       	call   c0001785 <dlrealloc>
c000fa6c:	83 c4 1c             	add    esp,0x1c
c000fa6f:	c3                   	ret    

c000fa70 <malloc>:
c000fa70:	83 ec 18             	sub    esp,0x18
c000fa73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa77:	e8 cc 17 ff ff       	call   c0001248 <dlmalloc>
c000fa7c:	83 c4 1c             	add    esp,0x1c
c000fa7f:	c3                   	ret    

c000fa80 <free>:
c000fa80:	83 ec 18             	sub    esp,0x18
c000fa83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa87:	e8 fa 12 ff ff       	call   c0000d86 <dlfree>
c000fa8c:	83 c4 1c             	add    esp,0x1c
c000fa8f:	c3                   	ret    

c000fa90 <rfree>:
c000fa90:	83 ec 18             	sub    esp,0x18
c000fa93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa97:	e8 ea 12 ff ff       	call   c0000d86 <dlfree>
c000fa9c:	83 c4 1c             	add    esp,0x1c
c000fa9f:	c3                   	ret    

c000faa0 <calloc>:
c000faa0:	56                   	push   esi
c000faa1:	53                   	push   ebx
c000faa2:	83 ec 10             	sub    esp,0x10
c000faa5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000faa9:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000faae:	53                   	push   ebx
c000faaf:	e8 bc ff ff ff       	call   c000fa70 <malloc>
c000fab4:	89 c6                	mov    esi,eax
c000fab6:	83 c4 0c             	add    esp,0xc
c000fab9:	53                   	push   ebx
c000faba:	6a 00                	push   0x0
c000fabc:	50                   	push   eax
c000fabd:	e8 2e 0a ff ff       	call   c00004f0 <memset>
c000fac2:	89 f0                	mov    eax,esi
c000fac4:	83 c4 14             	add    esp,0x14
c000fac7:	5b                   	pop    ebx
c000fac8:	5e                   	pop    esi
c000fac9:	c3                   	ret    
c000faca:	66 90                	xchg   ax,ax

c000facc <KeMailboxTryPost(Mailbox*, void*)>:
c000facc:	83 ec 10             	sub    esp,0x10
c000facf:	fa                   	cli    
c000fad0:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fad5:	83 c0 01             	add    eax,0x1
c000fad8:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fadd:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fae2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fae6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fae9:	85 c0                	test   eax,eax
c000faeb:	75 23                	jne    c000fb10 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000faed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000faf1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000faf5:	89 10                	mov    DWORD PTR [eax],edx
c000faf7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fafb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fafe:	8d 50 01             	lea    edx,[eax+0x1]
c000fb01:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb05:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fb08:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fb0d:	8d 76 00             	lea    esi,[esi+0x0]
c000fb10:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fb18:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fb1d:	85 c0                	test   eax,eax
c000fb1f:	75 03                	jne    c000fb24 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000fb21:	fb                   	sti    
c000fb22:	66 90                	xchg   ax,ax
c000fb24:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fb28:	83 c4 10             	add    esp,0x10
c000fb2b:	c3                   	ret    

c000fb2c <KeMailboxTryGet(Mailbox*, void**)>:
c000fb2c:	83 ec 10             	sub    esp,0x10
c000fb2f:	fa                   	cli    
c000fb30:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fb35:	83 c0 01             	add    eax,0x1
c000fb38:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fb3d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fb42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fb49:	83 f8 01             	cmp    eax,0x1
c000fb4c:	75 22                	jne    c000fb70 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000fb4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb52:	8b 10                	mov    edx,DWORD PTR [eax]
c000fb54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fb58:	89 10                	mov    DWORD PTR [eax],edx
c000fb5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fb61:	8d 50 ff             	lea    edx,[eax-0x1]
c000fb64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb68:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fb6b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fb70:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fb78:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fb7d:	85 c0                	test   eax,eax
c000fb7f:	75 03                	jne    c000fb84 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000fb81:	fb                   	sti    
c000fb82:	66 90                	xchg   ax,ax
c000fb84:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fb88:	83 c4 10             	add    esp,0x10
c000fb8b:	c3                   	ret    

c000fb8c <KeMailboxCreate()>:
c000fb8c:	83 ec 1c             	sub    esp,0x1c
c000fb8f:	83 ec 0c             	sub    esp,0xc
c000fb92:	6a 08                	push   0x8
c000fb94:	e8 d7 fe ff ff       	call   c000fa70 <malloc>
c000fb99:	83 c4 10             	add    esp,0x10
c000fb9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fba0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fba4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fbaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbae:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fbb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbb9:	83 c4 1c             	add    esp,0x1c
c000fbbc:	c3                   	ret    
c000fbbd:	8d 76 00             	lea    esi,[esi+0x0]

c000fbc0 <KeMailboxPost(Mailbox*, void*)>:
c000fbc0:	83 ec 1c             	sub    esp,0x1c
c000fbc3:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fbc8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fbcc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fbd0:	e8 f7 fe ff ff       	call   c000facc <KeMailboxTryPost(Mailbox*, void*)>
c000fbd5:	83 c4 08             	add    esp,0x8
c000fbd8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fbdc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fbe0:	83 f0 01             	xor    eax,0x1
c000fbe3:	0f b6 c0             	movzx  eax,al
c000fbe6:	85 c0                	test   eax,eax
c000fbe8:	74 26                	je     c000fc10 <KeMailboxPost(Mailbox*, void*)+0x50>
c000fbea:	fa                   	cli    
c000fbeb:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fbf0:	83 c0 01             	add    eax,0x1
c000fbf3:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fbf8:	e8 db 6d 00 00       	call   c00169d8 <schedule()>
c000fbfd:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fc05:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fc0a:	85 c0                	test   eax,eax
c000fc0c:	75 02                	jne    c000fc10 <KeMailboxPost(Mailbox*, void*)+0x50>
c000fc0e:	fb                   	sti    
c000fc0f:	90                   	nop
c000fc10:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fc15:	85 c0                	test   eax,eax
c000fc17:	75 03                	jne    c000fc1c <KeMailboxPost(Mailbox*, void*)+0x5c>
c000fc19:	eb ad                	jmp    c000fbc8 <KeMailboxPost(Mailbox*, void*)+0x8>
c000fc1b:	90                   	nop
c000fc1c:	90                   	nop
c000fc1d:	83 c4 1c             	add    esp,0x1c
c000fc20:	c3                   	ret    
c000fc21:	8d 76 00             	lea    esi,[esi+0x0]

c000fc24 <KeMailboxGet(Mailbox*, void**)>:
c000fc24:	83 ec 1c             	sub    esp,0x1c
c000fc27:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fc2c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fc30:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fc34:	e8 f3 fe ff ff       	call   c000fb2c <KeMailboxTryGet(Mailbox*, void**)>
c000fc39:	83 c4 08             	add    esp,0x8
c000fc3c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fc40:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fc44:	83 f0 01             	xor    eax,0x1
c000fc47:	0f b6 c0             	movzx  eax,al
c000fc4a:	85 c0                	test   eax,eax
c000fc4c:	74 26                	je     c000fc74 <KeMailboxGet(Mailbox*, void**)+0x50>
c000fc4e:	fa                   	cli    
c000fc4f:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fc54:	83 c0 01             	add    eax,0x1
c000fc57:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fc5c:	e8 77 6d 00 00       	call   c00169d8 <schedule()>
c000fc61:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fc69:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fc6e:	85 c0                	test   eax,eax
c000fc70:	75 02                	jne    c000fc74 <KeMailboxGet(Mailbox*, void**)+0x50>
c000fc72:	fb                   	sti    
c000fc73:	90                   	nop
c000fc74:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fc79:	85 c0                	test   eax,eax
c000fc7b:	75 03                	jne    c000fc80 <KeMailboxGet(Mailbox*, void**)+0x5c>
c000fc7d:	eb ad                	jmp    c000fc2c <KeMailboxGet(Mailbox*, void**)+0x8>
c000fc7f:	90                   	nop
c000fc80:	90                   	nop
c000fc81:	83 c4 1c             	add    esp,0x1c
c000fc84:	c3                   	ret    
c000fc85:	8d 76 00             	lea    esi,[esi+0x0]

c000fc88 <KeMailboxDestroy(Mailbox*)>:
c000fc88:	83 ec 0c             	sub    esp,0xc
c000fc8b:	83 ec 0c             	sub    esp,0xc
c000fc8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc92:	e8 e9 fd ff ff       	call   c000fa80 <free>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	90                   	nop
c000fc9b:	83 c4 0c             	add    esp,0xc
c000fc9e:	c3                   	ret    

c000fc9f <KeEntryPoint>:
c000fc9f:	57                   	push   edi
c000fca0:	bf f9 03 00 00       	mov    edi,0x3f9
c000fca5:	56                   	push   esi
c000fca6:	31 f6                	xor    esi,esi
c000fca8:	53                   	push   ebx
c000fca9:	89 fa                	mov    edx,edi
c000fcab:	83 ec 2c             	sub    esp,0x2c
c000fcae:	a1 00 05 00 00       	mov    eax,ds:0x500
c000fcb3:	a3 24 e1 02 c0       	mov    ds:0xc002e124,eax
c000fcb8:	89 f0                	mov    eax,esi
c000fcba:	ee                   	out    dx,al
c000fcbb:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fcc0:	b0 80                	mov    al,0x80
c000fcc2:	89 da                	mov    edx,ebx
c000fcc4:	ee                   	out    dx,al
c000fcc5:	b1 03                	mov    cl,0x3
c000fcc7:	ba f8 03 00 00       	mov    edx,0x3f8
c000fccc:	88 c8                	mov    al,cl
c000fcce:	ee                   	out    dx,al
c000fccf:	89 f0                	mov    eax,esi
c000fcd1:	89 fa                	mov    edx,edi
c000fcd3:	ee                   	out    dx,al
c000fcd4:	88 c8                	mov    al,cl
c000fcd6:	89 da                	mov    edx,ebx
c000fcd8:	ee                   	out    dx,al
c000fcd9:	b0 c7                	mov    al,0xc7
c000fcdb:	ba fa 03 00 00       	mov    edx,0x3fa
c000fce0:	ee                   	out    dx,al
c000fce1:	b0 0b                	mov    al,0xb
c000fce3:	ba fc 03 00 00       	mov    edx,0x3fc
c000fce8:	ee                   	out    dx,al
c000fce9:	68 ab 39 02 c0       	push   0xc00239ab
c000fcee:	e8 5b 72 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fcf3:	e8 00 d4 ff ff       	call   c000d0f8 <KeDisplaySplashScreen()>
c000fcf8:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fcfd:	05 ff 0f 00 00       	add    eax,0xfff
c000fd02:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fd07:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd0a:	e8 32 04 00 00       	call   c0010141 <Phys::physicalMemorySetup(unsigned int)>
c000fd0f:	e8 35 36 00 00       	call   c0013349 <Virt::virtualMemorySetup()>
c000fd14:	e8 29 d3 ff ff       	call   c000d042 <KeInitialiseAtexit()>
c000fd19:	c7 04 24 c2 39 02 c0 	mov    DWORD PTR [esp],0xc00239c2
c000fd20:	e8 29 72 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fd25:	58                   	pop    eax
c000fd26:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fd2a:	53                   	push   ebx
c000fd2b:	e8 00 39 00 00       	call   c0013630 <VAS::VAS()>
c000fd30:	c7 04 24 d2 39 02 c0 	mov    DWORD PTR [esp],0xc00239d2
c000fd37:	89 1d 50 e2 02 c0    	mov    DWORD PTR ds:0xc002e250,ebx
c000fd3d:	e8 0c 72 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fd42:	e8 17 18 01 00       	call   c002155e <_init>
c000fd47:	c7 04 24 e6 39 02 c0 	mov    DWORD PTR [esp],0xc00239e6
c000fd4e:	e8 fb 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fd53:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c000fd5a:	e8 11 fd ff ff       	call   c000fa70 <malloc>
c000fd5f:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd62:	89 c6                	mov    esi,eax
c000fd64:	e8 53 e4 ff ff       	call   c000e1bc <Computer::Computer()>
c000fd69:	5a                   	pop    edx
c000fd6a:	89 35 d0 c0 02 c0    	mov    DWORD PTR ds:0xc002c0d0,esi
c000fd70:	59                   	pop    ecx
c000fd71:	56                   	push   esi
c000fd72:	68 f5 39 02 c0       	push   0xc00239f5
c000fd77:	e8 d2 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fd7c:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000fd81:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd83:	53                   	push   ebx
c000fd84:	6a 00                	push   0x0
c000fd86:	6a 00                	push   0x0
c000fd88:	50                   	push   eax
c000fd89:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd8c:	83 c4 14             	add    esp,0x14
c000fd8f:	53                   	push   ebx
c000fd90:	e8 51 39 00 00       	call   c00136e6 <VAS::~VAS()>
c000fd95:	83 c4 30             	add    esp,0x30
c000fd98:	5b                   	pop    ebx
c000fd99:	5e                   	pop    esi
c000fd9a:	5f                   	pop    edi
c000fd9b:	c3                   	ret    

c000fd9c <Mutex::Mutex()>:
c000fd9c:	83 ec 0c             	sub    esp,0xc
c000fd9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fda3:	83 ec 08             	sub    esp,0x8
c000fda6:	6a 01                	push   0x1
c000fda8:	50                   	push   eax
c000fda9:	e8 4e 0c 00 00       	call   c00109fc <Semaphore::Semaphore(int)>
c000fdae:	83 c4 10             	add    esp,0x10
c000fdb1:	90                   	nop
c000fdb2:	83 c4 0c             	add    esp,0xc
c000fdb5:	c3                   	ret    

c000fdb6 <KePanic(char const*)>:
c000fdb6:	c6 05 28 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e128,0x1
c000fdbd:	e9 9d 9b 00 00       	jmp    c001995f <HalPanic(char const*)>

c000fdc2 <Phys::allocateDMA(unsigned long)>:
c000fdc2:	55                   	push   ebp
c000fdc3:	31 ed                	xor    ebp,ebp
c000fdc5:	57                   	push   edi
c000fdc6:	56                   	push   esi
c000fdc7:	31 f6                	xor    esi,esi
c000fdc9:	53                   	push   ebx
c000fdca:	31 db                	xor    ebx,ebx
c000fdcc:	83 ec 1c             	sub    esp,0x1c
c000fdcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fdd3:	05 ff 0f 00 00       	add    eax,0xfff
c000fdd8:	c1 e8 0c             	shr    eax,0xc
c000fddb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fddf:	31 c0                	xor    eax,eax
c000fde1:	eb 1b                	jmp    c000fdfe <Phys::allocateDMA(unsigned long)+0x3c>
c000fde3:	8d 78 01             	lea    edi,[eax+0x1]
c000fde6:	85 c0                	test   eax,eax
c000fde8:	0f 44 eb             	cmove  ebp,ebx
c000fdeb:	0f 44 f3             	cmove  esi,ebx
c000fdee:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000fdf2:	74 37                	je     c000fe2b <Phys::allocateDMA(unsigned long)+0x69>
c000fdf4:	89 f8                	mov    eax,edi
c000fdf6:	83 c3 01             	add    ebx,0x1
c000fdf9:	83 fb 0f             	cmp    ebx,0xf
c000fdfc:	7f 13                	jg     c000fe11 <Phys::allocateDMA(unsigned long)+0x4f>
c000fdfe:	80 bb 44 e1 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd1ebc],0x0
c000fe05:	74 dc                	je     c000fde3 <Phys::allocateDMA(unsigned long)+0x21>
c000fe07:	31 c0                	xor    eax,eax
c000fe09:	83 c3 01             	add    ebx,0x1
c000fe0c:	83 fb 0f             	cmp    ebx,0xf
c000fe0f:	7e ed                	jle    c000fdfe <Phys::allocateDMA(unsigned long)+0x3c>
c000fe11:	83 ec 0c             	sub    esp,0xc
c000fe14:	68 0c 3a 02 c0       	push   0xc0023a0c
c000fe19:	e8 98 ff ff ff       	call   c000fdb6 <KePanic(char const*)>
c000fe1e:	83 c4 10             	add    esp,0x10
c000fe21:	31 c0                	xor    eax,eax
c000fe23:	83 c4 1c             	add    esp,0x1c
c000fe26:	5b                   	pop    ebx
c000fe27:	5e                   	pop    esi
c000fe28:	5f                   	pop    edi
c000fe29:	5d                   	pop    ebp
c000fe2a:	c3                   	ret    
c000fe2b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fe2f:	89 f2                	mov    edx,esi
c000fe31:	c1 fa 04             	sar    edx,0x4
c000fe34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fe38:	01 f1                	add    ecx,esi
c000fe3a:	8d 51 0e             	lea    edx,[ecx+0xe]
c000fe3d:	83 e9 01             	sub    ecx,0x1
c000fe40:	0f 48 ca             	cmovs  ecx,edx
c000fe43:	c1 f9 04             	sar    ecx,0x4
c000fe46:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000fe4a:	74 06                	je     c000fe52 <Phys::allocateDMA(unsigned long)+0x90>
c000fe4c:	89 eb                	mov    ebx,ebp
c000fe4e:	31 c0                	xor    eax,eax
c000fe50:	eb b7                	jmp    c000fe09 <Phys::allocateDMA(unsigned long)+0x47>
c000fe52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe56:	85 d2                	test   edx,edx
c000fe58:	74 17                	je     c000fe71 <Phys::allocateDMA(unsigned long)+0xaf>
c000fe5a:	8d 96 44 e1 02 c0    	lea    edx,[esi-0x3ffd1ebc]
c000fe60:	8d 84 06 45 e1 02 c0 	lea    eax,[esi+eax*1-0x3ffd1ebb]
c000fe67:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fe6a:	83 c2 01             	add    edx,0x1
c000fe6d:	39 d0                	cmp    eax,edx
c000fe6f:	75 f6                	jne    c000fe67 <Phys::allocateDMA(unsigned long)+0xa5>
c000fe71:	8b 15 3c e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e13c
c000fe77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe7b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe7f:	01 c2                	add    edx,eax
c000fe81:	89 15 3c e1 02 c0    	mov    DWORD PTR ds:0xc002e13c,edx
c000fe87:	85 c9                	test   ecx,ecx
c000fe89:	74 17                	je     c000fea2 <Phys::allocateDMA(unsigned long)+0xe0>
c000fe8b:	83 ec 0c             	sub    esp,0xc
c000fe8e:	68 0c 3a 02 c0       	push   0xc0023a0c
c000fe93:	e8 1e ff ff ff       	call   c000fdb6 <KePanic(char const*)>
c000fe98:	83 c4 10             	add    esp,0x10
c000fe9b:	89 f8                	mov    eax,edi
c000fe9d:	e9 54 ff ff ff       	jmp    c000fdf6 <Phys::allocateDMA(unsigned long)+0x34>
c000fea2:	c1 e6 0c             	shl    esi,0xc
c000fea5:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000feab:	e9 73 ff ff ff       	jmp    c000fe23 <Phys::allocateDMA(unsigned long)+0x61>

c000feb0 <Phys::freeDMA(unsigned long, unsigned long)>:
c000feb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000feb4:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000feba:	a1 3c e1 02 c0       	mov    eax,ds:0xc002e13c
c000febf:	c1 ea 0c             	shr    edx,0xc
c000fec2:	29 d0                	sub    eax,edx
c000fec4:	a3 3c e1 02 c0       	mov    ds:0xc002e13c,eax
c000fec9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fecd:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000fed2:	c1 e8 0c             	shr    eax,0xc
c000fed5:	85 d2                	test   edx,edx
c000fed7:	74 11                	je     c000feea <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000fed9:	05 44 e1 02 c0       	add    eax,0xc002e144
c000fede:	01 c2                	add    edx,eax
c000fee0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fee3:	83 c0 01             	add    eax,0x1
c000fee6:	39 d0                	cmp    eax,edx
c000fee8:	75 f6                	jne    c000fee0 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000feea:	c3                   	ret    

c000feeb <Phys::setPageState(unsigned long, bool)>:
c000feeb:	57                   	push   edi
c000feec:	56                   	push   esi
c000feed:	8b 35 54 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025f54
c000fef3:	53                   	push   ebx
c000fef4:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000fef9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fefd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff01:	89 ca                	mov    edx,ecx
c000ff03:	83 e1 07             	and    ecx,0x7
c000ff06:	c1 ea 03             	shr    edx,0x3
c000ff09:	0f b6 c0             	movzx  eax,al
c000ff0c:	d3 c3                	rol    ebx,cl
c000ff0e:	01 d6                	add    esi,edx
c000ff10:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000ff13:	d3 e0                	shl    eax,cl
c000ff15:	21 fb                	and    ebx,edi
c000ff17:	88 1e                	mov    BYTE PTR [esi],bl
c000ff19:	8b 1d 54 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025f54
c000ff1f:	01 da                	add    edx,ebx
c000ff21:	8a 0a                	mov    cl,BYTE PTR [edx]
c000ff23:	09 c8                	or     eax,ecx
c000ff25:	88 02                	mov    BYTE PTR [edx],al
c000ff27:	5b                   	pop    ebx
c000ff28:	5e                   	pop    esi
c000ff29:	5f                   	pop    edi
c000ff2a:	c3                   	ret    

c000ff2b <Phys::getPageState(unsigned long)>:
c000ff2b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ff2f:	8b 15 54 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025f54
c000ff35:	89 c8                	mov    eax,ecx
c000ff37:	83 e1 07             	and    ecx,0x7
c000ff3a:	c1 e8 03             	shr    eax,0x3
c000ff3d:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000ff41:	d3 f8                	sar    eax,cl
c000ff43:	83 e0 01             	and    eax,0x1
c000ff46:	c3                   	ret    

c000ff47 <Phys::freePage(unsigned long)>:
c000ff47:	53                   	push   ebx
c000ff48:	83 ec 08             	sub    esp,0x8
c000ff4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff4f:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000ff55:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000ff5b:	76 41                	jbe    c000ff9e <Phys::freePage(unsigned long)+0x57>
c000ff5d:	c1 e8 0c             	shr    eax,0xc
c000ff60:	50                   	push   eax
c000ff61:	89 c3                	mov    ebx,eax
c000ff63:	e8 c3 ff ff ff       	call   c000ff2b <Phys::getPageState(unsigned long)>
c000ff68:	5a                   	pop    edx
c000ff69:	84 c0                	test   al,al
c000ff6b:	74 20                	je     c000ff8d <Phys::freePage(unsigned long)+0x46>
c000ff6d:	a1 3c e1 02 c0       	mov    eax,ds:0xc002e13c
c000ff72:	83 ec 08             	sub    esp,0x8
c000ff75:	6a 00                	push   0x0
c000ff77:	53                   	push   ebx
c000ff78:	83 e8 01             	sub    eax,0x1
c000ff7b:	a3 3c e1 02 c0       	mov    ds:0xc002e13c,eax
c000ff80:	e8 66 ff ff ff       	call   c000feeb <Phys::setPageState(unsigned long, bool)>
c000ff85:	83 c4 10             	add    esp,0x10
c000ff88:	83 c4 08             	add    esp,0x8
c000ff8b:	5b                   	pop    ebx
c000ff8c:	c3                   	ret    
c000ff8d:	c7 44 24 10 11 3b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023b11
c000ff95:	83 c4 08             	add    esp,0x8
c000ff98:	5b                   	pop    ebx
c000ff99:	e9 18 fe ff ff       	jmp    c000fdb6 <KePanic(char const*)>
c000ff9e:	68 00 10 00 00       	push   0x1000
c000ffa3:	50                   	push   eax
c000ffa4:	e8 07 ff ff ff       	call   c000feb0 <Phys::freeDMA(unsigned long, unsigned long)>
c000ffa9:	59                   	pop    ecx
c000ffaa:	5b                   	pop    ebx
c000ffab:	83 c4 08             	add    esp,0x8
c000ffae:	5b                   	pop    ebx
c000ffaf:	c3                   	ret    

c000ffb0 <Phys::allocatePage()>:
c000ffb0:	56                   	push   esi
c000ffb1:	53                   	push   ebx
c000ffb2:	83 ec 14             	sub    esp,0x14
c000ffb5:	8b 35 30 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e130
c000ffbb:	89 f3                	mov    ebx,esi
c000ffbd:	eb 0a                	jmp    c000ffc9 <Phys::allocatePage()+0x19>
c000ffbf:	89 1d 30 e1 02 c0    	mov    DWORD PTR ds:0xc002e130,ebx
c000ffc5:	39 de                	cmp    esi,ebx
c000ffc7:	74 26                	je     c000ffef <Phys::allocatePage()+0x3f>
c000ffc9:	53                   	push   ebx
c000ffca:	e8 5c ff ff ff       	call   c000ff2b <Phys::getPageState(unsigned long)>
c000ffcf:	59                   	pop    ecx
c000ffd0:	84 c0                	test   al,al
c000ffd2:	74 67                	je     c001003b <Phys::allocatePage()+0x8b>
c000ffd4:	83 c3 01             	add    ebx,0x1
c000ffd7:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ffdd:	75 e0                	jne    c000ffbf <Phys::allocatePage()+0xf>
c000ffdf:	c7 05 30 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e130,0x0
c000ffe9:	31 db                	xor    ebx,ebx
c000ffeb:	39 de                	cmp    esi,ebx
c000ffed:	75 da                	jne    c000ffc9 <Phys::allocatePage()+0x19>
c000ffef:	a0 54 e1 02 c0       	mov    al,ds:0xc002e154
c000fff4:	83 ec 0c             	sub    esp,0xc
c000fff7:	83 f0 01             	xor    eax,0x1
c000fffa:	a2 54 e1 02 c0       	mov    ds:0xc002e154,al
c000ffff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010004:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010007:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001000d:	51                   	push   ecx
c001000e:	e8 8f 43 00 00       	call   c00143a2 <VAS::scanForEviction()>
c0010013:	83 c4 10             	add    esp,0x10
c0010016:	85 c0                	test   eax,eax
c0010018:	75 48                	jne    c0010062 <Phys::allocatePage()+0xb2>
c001001a:	83 ec 0c             	sub    esp,0xc
c001001d:	68 34 3a 02 c0       	push   0xc0023a34
c0010022:	e8 8f fd ff ff       	call   c000fdb6 <KePanic(char const*)>
c0010027:	8b 1d 30 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e130
c001002d:	83 c4 10             	add    esp,0x10
c0010030:	53                   	push   ebx
c0010031:	e8 f5 fe ff ff       	call   c000ff2b <Phys::getPageState(unsigned long)>
c0010036:	59                   	pop    ecx
c0010037:	84 c0                	test   al,al
c0010039:	75 99                	jne    c000ffd4 <Phys::allocatePage()+0x24>
c001003b:	6a 01                	push   0x1
c001003d:	53                   	push   ebx
c001003e:	e8 a8 fe ff ff       	call   c000feeb <Phys::setPageState(unsigned long, bool)>
c0010043:	8b 1d 3c e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e13c
c0010049:	5e                   	pop    esi
c001004a:	a1 30 e1 02 c0       	mov    eax,ds:0xc002e130
c001004f:	5a                   	pop    edx
c0010050:	83 c3 01             	add    ebx,0x1
c0010053:	89 1d 3c e1 02 c0    	mov    DWORD PTR ds:0xc002e13c,ebx
c0010059:	c1 e0 0c             	shl    eax,0xc
c001005c:	83 c4 14             	add    esp,0x14
c001005f:	5b                   	pop    ebx
c0010060:	5e                   	pop    esi
c0010061:	c3                   	ret    
c0010062:	8b 15 3c e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e13c
c0010068:	83 ec 08             	sub    esp,0x8
c001006b:	6a 01                	push   0x1
c001006d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010071:	83 c2 01             	add    edx,0x1
c0010074:	89 15 3c e1 02 c0    	mov    DWORD PTR ds:0xc002e13c,edx
c001007a:	89 c2                	mov    edx,eax
c001007c:	c1 ea 0c             	shr    edx,0xc
c001007f:	52                   	push   edx
c0010080:	e8 66 fe ff ff       	call   c000feeb <Phys::setPageState(unsigned long, bool)>
c0010085:	83 c4 10             	add    esp,0x10
c0010088:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001008c:	eb ce                	jmp    c001005c <Phys::allocatePage()+0xac>

c001008e <Phys::allocateContiguousPages(int)>:
c001008e:	57                   	push   edi
c001008f:	56                   	push   esi
c0010090:	53                   	push   ebx
c0010091:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0010095:	fa                   	cli    
c0010096:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c001009c:	83 ec 0c             	sub    esp,0xc
c001009f:	31 db                	xor    ebx,ebx
c00100a1:	68 64 3a 02 c0       	push   0xc0023a64
c00100a6:	83 c2 01             	add    edx,0x1
c00100a9:	89 15 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,edx
c00100af:	e8 9a 6e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00100b4:	83 c4 10             	add    esp,0x10
c00100b7:	85 db                	test   ebx,ebx
c00100b9:	75 11                	jne    c00100cc <Phys::allocateContiguousPages(int)+0x3e>
c00100bb:	e8 f0 fe ff ff       	call   c000ffb0 <Phys::allocatePage()>
c00100c0:	83 ff 01             	cmp    edi,0x1
c00100c3:	89 c6                	mov    esi,eax
c00100c5:	74 21                	je     c00100e8 <Phys::allocateContiguousPages(int)+0x5a>
c00100c7:	bb 01 00 00 00       	mov    ebx,0x1
c00100cc:	e8 df fe ff ff       	call   c000ffb0 <Phys::allocatePage()>
c00100d1:	89 da                	mov    edx,ebx
c00100d3:	c1 e2 0c             	shl    edx,0xc
c00100d6:	01 f2                	add    edx,esi
c00100d8:	39 c2                	cmp    edx,eax
c00100da:	74 24                	je     c0010100 <Phys::allocateContiguousPages(int)+0x72>
c00100dc:	83 ff 01             	cmp    edi,0x1
c00100df:	bb 01 00 00 00       	mov    ebx,0x1
c00100e4:	89 c6                	mov    esi,eax
c00100e6:	75 e4                	jne    c00100cc <Phys::allocateContiguousPages(int)+0x3e>
c00100e8:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00100f0:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00100f5:	85 c0                	test   eax,eax
c00100f7:	75 01                	jne    c00100fa <Phys::allocateContiguousPages(int)+0x6c>
c00100f9:	fb                   	sti    
c00100fa:	5b                   	pop    ebx
c00100fb:	89 f0                	mov    eax,esi
c00100fd:	5e                   	pop    esi
c00100fe:	5f                   	pop    edi
c00100ff:	c3                   	ret    
c0010100:	83 c3 01             	add    ebx,0x1
c0010103:	39 fb                	cmp    ebx,edi
c0010105:	75 b0                	jne    c00100b7 <Phys::allocateContiguousPages(int)+0x29>
c0010107:	eb df                	jmp    c00100e8 <Phys::allocateContiguousPages(int)+0x5a>

c0010109 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010109:	56                   	push   esi
c001010a:	53                   	push   ebx
c001010b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001010f:	39 1d 34 e1 02 c0    	cmp    DWORD PTR ds:0xc002e134,ebx
c0010115:	73 06                	jae    c001011d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010117:	89 1d 34 e1 02 c0    	mov    DWORD PTR ds:0xc002e134,ebx
c001011d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010121:	c1 eb 0c             	shr    ebx,0xc
c0010124:	c1 e8 0c             	shr    eax,0xc
c0010127:	39 d8                	cmp    eax,ebx
c0010129:	73 13                	jae    c001013e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001012b:	6a 00                	push   0x0
c001012d:	50                   	push   eax
c001012e:	8d 70 01             	lea    esi,[eax+0x1]
c0010131:	e8 b5 fd ff ff       	call   c000feeb <Phys::setPageState(unsigned long, bool)>
c0010136:	39 f3                	cmp    ebx,esi
c0010138:	89 f0                	mov    eax,esi
c001013a:	5a                   	pop    edx
c001013b:	59                   	pop    ecx
c001013c:	75 ed                	jne    c001012b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c001013e:	5b                   	pop    ebx
c001013f:	5e                   	pop    esi
c0010140:	c3                   	ret    

c0010141 <Phys::physicalMemorySetup(unsigned int)>:
c0010141:	55                   	push   ebp
c0010142:	57                   	push   edi
c0010143:	56                   	push   esi
c0010144:	53                   	push   ebx
c0010145:	31 db                	xor    ebx,ebx
c0010147:	83 ec 40             	sub    esp,0x40
c001014a:	6a 10                	push   0x10
c001014c:	6a 00                	push   0x0
c001014e:	68 44 e1 02 c0       	push   0xc002e144
c0010153:	e8 98 03 ff ff       	call   c00004f0 <memset>
c0010158:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001015c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010161:	05 00 10 00 00       	add    eax,0x1000
c0010166:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001016a:	5a                   	pop    edx
c001016b:	59                   	pop    ecx
c001016c:	50                   	push   eax
c001016d:	68 27 3b 02 c0       	push   0xc0023b27
c0010172:	e8 d7 6d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010177:	83 c4 10             	add    esp,0x10
c001017a:	83 ec 08             	sub    esp,0x8
c001017d:	6a 01                	push   0x1
c001017f:	53                   	push   ebx
c0010180:	83 c3 01             	add    ebx,0x1
c0010183:	e8 63 fd ff ff       	call   c000feeb <Phys::setPageState(unsigned long, bool)>
c0010188:	83 c4 10             	add    esp,0x10
c001018b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010191:	75 e7                	jne    c001017a <Phys::physicalMemorySetup(unsigned int)+0x39>
c0010193:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c001019a:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c00101a1:	c1 e0 08             	shl    eax,0x8
c00101a4:	09 c2                	or     edx,eax
c00101a6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00101aa:	0f 84 43 01 00 00    	je     c00102f3 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c00101b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00101b8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00101bd:	e9 82 00 00 00       	jmp    c0010244 <Phys::physicalMemorySetup(unsigned int)+0x103>
c00101c2:	ba 00 00 08 00       	mov    edx,0x80000
c00101c7:	89 c1                	mov    ecx,eax
c00101c9:	39 f2                	cmp    edx,esi
c00101cb:	19 f9                	sbb    ecx,edi
c00101cd:	0f 82 c0 00 00 00    	jb     c0010293 <Phys::physicalMemorySetup(unsigned int)+0x152>
c00101d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101d7:	89 c5                	mov    ebp,eax
c00101d9:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00101dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101e1:	19 cd                	sbb    ebp,ecx
c00101e3:	0f 83 af 00 00 00    	jae    c0010298 <Phys::physicalMemorySetup(unsigned int)+0x157>
c00101e9:	89 d6                	mov    esi,edx
c00101eb:	ba 00 00 0a 00       	mov    edx,0xa0000
c00101f0:	39 f2                	cmp    edx,esi
c00101f2:	89 cf                	mov    edi,ecx
c00101f4:	19 c8                	sbb    eax,ecx
c00101f6:	73 07                	jae    c00101ff <Phys::physicalMemorySetup(unsigned int)+0xbe>
c00101f8:	be 00 00 0a 00       	mov    esi,0xa0000
c00101fd:	31 ff                	xor    edi,edi
c00101ff:	89 f2                	mov    edx,esi
c0010201:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0010206:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c001020c:	89 f9                	mov    ecx,edi
c001020e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010212:	83 d1 ff             	adc    ecx,0xffffffff
c0010215:	39 d0                	cmp    eax,edx
c0010217:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001021b:	b8 00 00 00 00       	mov    eax,0x0
c0010220:	19 c8                	sbb    eax,ecx
c0010222:	0f 82 9d 01 00 00    	jb     c00103c5 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0010228:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001022c:	83 c3 18             	add    ebx,0x18
c001022f:	83 c6 01             	add    esi,0x1
c0010232:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0010236:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001023a:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c001023e:	0f 84 bf 00 00 00    	je     c0010303 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0010244:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010246:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010249:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001024c:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c001024f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0010253:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010256:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001025a:	01 f0                	add    eax,esi
c001025c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010260:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0010264:	55                   	push   ebp
c0010265:	11 fa                	adc    edx,edi
c0010267:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001026b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001026f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010273:	50                   	push   eax
c0010274:	56                   	push   esi
c0010275:	68 c4 3a 02 c0       	push   0xc0023ac4
c001027a:	e8 cf 6c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001027f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010283:	83 c4 10             	add    esp,0x10
c0010286:	09 f8                	or     eax,edi
c0010288:	75 79                	jne    c0010303 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c001028a:	83 fd 01             	cmp    ebp,0x1
c001028d:	0f 84 2f ff ff ff    	je     c00101c2 <Phys::physicalMemorySetup(unsigned int)+0x81>
c0010293:	83 fd 01             	cmp    ebp,0x1
c0010296:	75 90                	jne    c0010228 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0010298:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001029c:	31 d2                	xor    edx,edx
c001029e:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00102a2:	89 c8                	mov    eax,ecx
c00102a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00102a8:	19 d1                	sbb    ecx,edx
c00102aa:	0f 82 78 ff ff ff    	jb     c0010228 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00102b0:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00102b5:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00102b9:	b9 00 00 00 00       	mov    ecx,0x0
c00102be:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00102c2:	0f 83 60 ff ff ff    	jae    c0010228 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00102c8:	39 c6                	cmp    esi,eax
c00102ca:	19 d7                	sbb    edi,edx
c00102cc:	0f 83 ff 00 00 00    	jae    c00103d1 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00102d2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00102d6:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00102da:	29 c7                	sub    edi,eax
c00102dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00102e0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00102e4:	19 d5                	sbb    ebp,edx
c00102e6:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00102ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00102ee:	e9 de 00 00 00       	jmp    c00103d1 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00102f3:	83 ec 0c             	sub    esp,0xc
c00102f6:	68 3f 3b 02 c0       	push   0xc0023b3f
c00102fb:	e8 b6 fa ff ff       	call   c000fdb6 <KePanic(char const*)>
c0010300:	83 c4 10             	add    esp,0x10
c0010303:	83 ec 08             	sub    esp,0x8
c0010306:	bb 60 00 00 00       	mov    ebx,0x60
c001030b:	6a 00                	push   0x0
c001030d:	6a 06                	push   0x6
c001030f:	e8 d7 fb ff ff       	call   c000feeb <Phys::setPageState(unsigned long, bool)>
c0010314:	58                   	pop    eax
c0010315:	5a                   	pop    edx
c0010316:	6a 00                	push   0x0
c0010318:	6a 07                	push   0x7
c001031a:	e8 cc fb ff ff       	call   c000feeb <Phys::setPageState(unsigned long, bool)>
c001031f:	8b 0d 40 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e140
c0010325:	83 c4 10             	add    esp,0x10
c0010328:	83 c1 02             	add    ecx,0x2
c001032b:	89 0d 40 e1 02 c0    	mov    DWORD PTR ds:0xc002e140,ecx
c0010331:	83 ec 08             	sub    esp,0x8
c0010334:	6a 00                	push   0x0
c0010336:	53                   	push   ebx
c0010337:	83 c3 01             	add    ebx,0x1
c001033a:	e8 ac fb ff ff       	call   c000feeb <Phys::setPageState(unsigned long, bool)>
c001033f:	83 c4 10             	add    esp,0x10
c0010342:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0010348:	75 e7                	jne    c0010331 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c001034a:	a1 40 e1 02 c0       	mov    eax,ds:0xc002e140
c001034f:	bb 40 01 00 00       	mov    ebx,0x140
c0010354:	83 c0 20             	add    eax,0x20
c0010357:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c001035c:	eb 26                	jmp    c0010384 <Phys::physicalMemorySetup(unsigned int)+0x243>
c001035e:	83 ec 08             	sub    esp,0x8
c0010361:	6a 00                	push   0x0
c0010363:	53                   	push   ebx
c0010364:	83 c3 01             	add    ebx,0x1
c0010367:	e8 7f fb ff ff       	call   c000feeb <Phys::setPageState(unsigned long, bool)>
c001036c:	a1 40 e1 02 c0       	mov    eax,ds:0xc002e140
c0010371:	83 c4 10             	add    esp,0x10
c0010374:	83 c0 01             	add    eax,0x1
c0010377:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c001037d:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c0010382:	74 07                	je     c001038b <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0010384:	3d ff 03 00 00       	cmp    eax,0x3ff
c0010389:	7e d3                	jle    c001035e <Phys::physicalMemorySetup(unsigned int)+0x21d>
c001038b:	bb d0 01 00 00       	mov    ebx,0x1d0
c0010390:	3d ff 07 00 00       	cmp    eax,0x7ff
c0010395:	7f 26                	jg     c00103bd <Phys::physicalMemorySetup(unsigned int)+0x27c>
c0010397:	83 ec 08             	sub    esp,0x8
c001039a:	6a 00                	push   0x0
c001039c:	53                   	push   ebx
c001039d:	83 c3 01             	add    ebx,0x1
c00103a0:	e8 46 fb ff ff       	call   c000feeb <Phys::setPageState(unsigned long, bool)>
c00103a5:	a1 40 e1 02 c0       	mov    eax,ds:0xc002e140
c00103aa:	83 c4 10             	add    esp,0x10
c00103ad:	83 c0 01             	add    eax,0x1
c00103b0:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00103b6:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c00103bb:	75 d3                	jne    c0010390 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00103bd:	83 c4 3c             	add    esp,0x3c
c00103c0:	5b                   	pop    ebx
c00103c1:	5e                   	pop    esi
c00103c2:	5f                   	pop    edi
c00103c3:	5d                   	pop    ebp
c00103c4:	c3                   	ret    
c00103c5:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00103c9:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00103d1:	83 ec 04             	sub    esp,0x4
c00103d4:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00103d8:	56                   	push   esi
c00103d9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00103dd:	57                   	push   edi
c00103de:	68 e8 3a 02 c0       	push   0xc0023ae8
c00103e3:	e8 66 6b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00103e8:	5d                   	pop    ebp
c00103e9:	58                   	pop    eax
c00103ea:	56                   	push   esi
c00103eb:	57                   	push   edi
c00103ec:	e8 18 fd ff ff       	call   c0010109 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00103f1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00103f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103f9:	83 c4 0c             	add    esp,0xc
c00103fc:	8b 35 40 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e140
c0010402:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010406:	01 f0                	add    eax,esi
c0010408:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c001040d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010414:	52                   	push   edx
c0010415:	50                   	push   eax
c0010416:	68 4d 3b 02 c0       	push   0xc0023b4d
c001041b:	e8 2e 6b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010420:	83 c4 10             	add    esp,0x10
c0010423:	e9 00 fe ff ff       	jmp    c0010228 <Phys::physicalMemorySetup(unsigned int)+0xe7>

c0010428 <Pipe::isAtty()>:
c0010428:	31 c0                	xor    eax,eax
c001042a:	c3                   	ret    
c001042b:	90                   	nop

c001042c <Pipe::~Pipe()>:
c001042c:	83 ec 0c             	sub    esp,0xc
c001042f:	ba ac 3b 02 c0       	mov    edx,0xc0023bac
c0010434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010438:	89 10                	mov    DWORD PTR [eax],edx
c001043a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001043e:	83 ec 0c             	sub    esp,0xc
c0010441:	50                   	push   eax
c0010442:	e8 b3 2a 00 00       	call   c0012efa <UnixFile::~UnixFile()>
c0010447:	83 c4 10             	add    esp,0x10
c001044a:	90                   	nop
c001044b:	83 c4 0c             	add    esp,0xc
c001044e:	c3                   	ret    
c001044f:	90                   	nop

c0010450 <Pipe::~Pipe()>:
c0010450:	83 ec 0c             	sub    esp,0xc
c0010453:	83 ec 0c             	sub    esp,0xc
c0010456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001045a:	e8 cd ff ff ff       	call   c001042c <Pipe::~Pipe()>
c001045f:	83 c4 10             	add    esp,0x10
c0010462:	83 ec 08             	sub    esp,0x8
c0010465:	6a 20                	push   0x20
c0010467:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001046b:	e8 77 cd ff ff       	call   c000d1e7 <operator delete(void*, unsigned long)>
c0010470:	83 c4 10             	add    esp,0x10
c0010473:	83 c4 0c             	add    esp,0xc
c0010476:	c3                   	ret    
c0010477:	90                   	nop

c0010478 <Pipe::write(unsigned long long, void*, int*)>:
c0010478:	55                   	push   ebp
c0010479:	57                   	push   edi
c001047a:	56                   	push   esi
c001047b:	53                   	push   ebx
c001047c:	83 ec 1c             	sub    esp,0x1c
c001047f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010483:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010487:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001048b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001048e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010492:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010495:	89 04 24             	mov    DWORD PTR [esp],eax
c0010498:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001049c:	89 d8                	mov    eax,ebx
c001049e:	89 d6                	mov    esi,edx
c00104a0:	89 d7                	mov    edi,edx
c00104a2:	c1 ff 1f             	sar    edi,0x1f
c00104a5:	03 34 24             	add    esi,DWORD PTR [esp]
c00104a8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00104ac:	c1 f8 1f             	sar    eax,0x1f
c00104af:	39 f3                	cmp    ebx,esi
c00104b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00104b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104b9:	19 f8                	sbb    eax,edi
c00104bb:	b8 01 00 00 00       	mov    eax,0x1
c00104c0:	72 72                	jb     c0010534 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00104c2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00104c5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00104c9:	01 d0                	add    eax,edx
c00104cb:	99                   	cdq    
c00104cc:	f7 fb                	idiv   ebx
c00104ce:	89 d8                	mov    eax,ebx
c00104d0:	29 d0                	sub    eax,edx
c00104d2:	89 d6                	mov    esi,edx
c00104d4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00104d7:	89 c3                	mov    ebx,eax
c00104d9:	c1 fb 1f             	sar    ebx,0x1f
c00104dc:	39 c2                	cmp    edx,eax
c00104de:	19 df                	sbb    edi,ebx
c00104e0:	bb 00 00 00 00       	mov    ebx,0x0
c00104e5:	72 04                	jb     c00104eb <Pipe::write(unsigned long long, void*, int*)+0x73>
c00104e7:	89 d3                	mov    ebx,edx
c00104e9:	29 c3                	sub    ebx,eax
c00104eb:	89 d0                	mov    eax,edx
c00104ed:	29 d8                	sub    eax,ebx
c00104ef:	74 0d                	je     c00104fe <Pipe::write(unsigned long long, void*, int*)+0x86>
c00104f1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00104f4:	89 c1                	mov    ecx,eax
c00104f6:	01 f7                	add    edi,esi
c00104f8:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00104fc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104fe:	85 db                	test   ebx,ebx
c0010500:	74 0d                	je     c001050f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0010502:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010506:	89 d9                	mov    ecx,ebx
c0010508:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001050b:	89 c6                	mov    esi,eax
c001050d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001050f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010512:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010517:	75 10                	jne    c0010529 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0010519:	83 ec 0c             	sub    esp,0xc
c001051c:	68 69 3b 02 c0       	push   0xc0023b69
c0010521:	e8 90 f8 ff ff       	call   c000fdb6 <KePanic(char const*)>
c0010526:	83 c4 10             	add    esp,0x10
c0010529:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001052d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0010530:	89 08                	mov    DWORD PTR [eax],ecx
c0010532:	31 c0                	xor    eax,eax
c0010534:	83 c4 1c             	add    esp,0x1c
c0010537:	5b                   	pop    ebx
c0010538:	5e                   	pop    esi
c0010539:	5f                   	pop    edi
c001053a:	5d                   	pop    ebp
c001053b:	c3                   	ret    

c001053c <Pipe::read(unsigned long long, void*, int*)>:
c001053c:	55                   	push   ebp
c001053d:	57                   	push   edi
c001053e:	56                   	push   esi
c001053f:	53                   	push   ebx
c0010540:	83 ec 1c             	sub    esp,0x1c
c0010543:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010547:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001054b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001054f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010552:	89 c8                	mov    eax,ecx
c0010554:	99                   	cdq    
c0010555:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010559:	74 27                	je     c0010582 <Pipe::read(unsigned long long, void*, int*)+0x46>
c001055b:	39 f9                	cmp    ecx,edi
c001055d:	89 d1                	mov    ecx,edx
c001055f:	19 f1                	sbb    ecx,esi
c0010561:	73 1f                	jae    c0010582 <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010563:	fa                   	cli    
c0010564:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001056a:	e8 69 64 00 00       	call   c00169d8 <schedule()>
c001056f:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0010576:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001057d:	75 d0                	jne    c001054f <Pipe::read(unsigned long long, void*, int*)+0x13>
c001057f:	fb                   	sti    
c0010580:	eb cd                	jmp    c001054f <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010582:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010586:	39 f8                	cmp    eax,edi
c0010588:	89 d1                	mov    ecx,edx
c001058a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001058e:	19 f1                	sbb    ecx,esi
c0010590:	73 08                	jae    c001059a <Pipe::read(unsigned long long, void*, int*)+0x5e>
c0010592:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010596:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001059a:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c001059d:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00105a0:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00105a4:	29 f7                	sub    edi,esi
c00105a6:	89 f8                	mov    eax,edi
c00105a8:	99                   	cdq    
c00105a9:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00105ad:	89 d0                	mov    eax,edx
c00105af:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00105b3:	19 c2                	sbb    edx,eax
c00105b5:	89 f8                	mov    eax,edi
c00105b7:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00105bc:	89 ea                	mov    edx,ebp
c00105be:	29 c2                	sub    edx,eax
c00105c0:	85 c0                	test   eax,eax
c00105c2:	74 0b                	je     c00105cf <Pipe::read(unsigned long long, void*, int*)+0x93>
c00105c4:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105c7:	89 c1                	mov    ecx,eax
c00105c9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00105cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105cf:	85 d2                	test   edx,edx
c00105d1:	74 0d                	je     c00105e0 <Pipe::read(unsigned long long, void*, int*)+0xa4>
c00105d3:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00105d7:	89 d1                	mov    ecx,edx
c00105d9:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00105dc:	89 c7                	mov    edi,eax
c00105de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105e0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00105e3:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00105e6:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00105e9:	99                   	cdq    
c00105ea:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00105ee:	89 f7                	mov    edi,esi
c00105f0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00105f4:	c1 ff 1f             	sar    edi,0x1f
c00105f7:	57                   	push   edi
c00105f8:	56                   	push   esi
c00105f9:	52                   	push   edx
c00105fa:	50                   	push   eax
c00105fb:	e8 44 0e 01 00       	call   c0021444 <__umoddi3>
c0010600:	83 c4 10             	add    esp,0x10
c0010603:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010608:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001060b:	75 10                	jne    c001061d <Pipe::read(unsigned long long, void*, int*)+0xe1>
c001060d:	83 ec 0c             	sub    esp,0xc
c0010610:	68 86 3b 02 c0       	push   0xc0023b86
c0010615:	e8 9c f7 ff ff       	call   c000fdb6 <KePanic(char const*)>
c001061a:	83 c4 10             	add    esp,0x10
c001061d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010621:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010625:	89 10                	mov    DWORD PTR [eax],edx
c0010627:	83 c4 1c             	add    esp,0x1c
c001062a:	31 c0                	xor    eax,eax
c001062c:	5b                   	pop    ebx
c001062d:	5e                   	pop    esi
c001062e:	5f                   	pop    edi
c001062f:	5d                   	pop    ebp
c0010630:	c3                   	ret    
c0010631:	90                   	nop

c0010632 <Pipe::Pipe(int)>:
c0010632:	83 ec 0c             	sub    esp,0xc
c0010635:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010639:	83 ec 08             	sub    esp,0x8
c001063c:	6a 00                	push   0x0
c001063e:	50                   	push   eax
c001063f:	e8 d0 26 00 00       	call   c0012d14 <UnixFile::UnixFile(int)>
c0010644:	83 c4 10             	add    esp,0x10
c0010647:	ba ac 3b 02 c0       	mov    edx,0xc0023bac
c001064c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010650:	89 10                	mov    DWORD PTR [eax],edx
c0010652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010656:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001065a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001065d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010661:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001066c:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010673:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010677:	83 ec 0c             	sub    esp,0xc
c001067a:	50                   	push   eax
c001067b:	e8 f0 f3 ff ff       	call   c000fa70 <malloc>
c0010680:	83 c4 10             	add    esp,0x10
c0010683:	89 c2                	mov    edx,eax
c0010685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010689:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001068c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010690:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010694:	90                   	nop
c0010695:	83 c4 0c             	add    esp,0xc
c0010698:	c3                   	ret    

c0010699 <KePowerThread(void*)>:
c0010699:	83 ec 0c             	sub    esp,0xc
c001069c:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00106a3:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00106aa:	75 01                	jne    c00106ad <KePowerThread(void*)+0x14>
c00106ac:	fb                   	sti    
c00106ad:	c6 05 60 e1 02 c0 00 	mov    BYTE PTR ds:0xc002e160,0x0
c00106b4:	83 ec 0c             	sub    esp,0xc
c00106b7:	6a 0a                	push   0xa
c00106b9:	e8 16 65 00 00       	call   c0016bd4 <sleep(unsigned int)>
c00106be:	83 c4 10             	add    esp,0x10
c00106c1:	83 05 a4 e1 02 c0 0a 	add    DWORD PTR ds:0xc002e1a4,0xa
c00106c8:	eb e3                	jmp    c00106ad <KePowerThread(void*)+0x14>

c00106ca <KeChangePowerSettings(PowerSettings)>:
c00106ca:	57                   	push   edi
c00106cb:	b9 09 00 00 00       	mov    ecx,0x9
c00106d0:	56                   	push   esi
c00106d1:	bf 80 e1 02 c0       	mov    edi,0xc002e180
c00106d6:	fc                   	cld    
c00106d7:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00106db:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00106dd:	5e                   	pop    esi
c00106de:	5f                   	pop    edi
c00106df:	c3                   	ret    

c00106e0 <KeUserIOReceived()>:
c00106e0:	c7 05 a4 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1a4,0x0
c00106ea:	c3                   	ret    

c00106eb <KeHandlePowerButton()>:
c00106eb:	a1 80 e1 02 c0       	mov    eax,ds:0xc002e180
c00106f0:	83 f8 02             	cmp    eax,0x2
c00106f3:	75 05                	jne    c00106fa <KeHandlePowerButton()+0xf>
c00106f5:	e9 26 db ff ff       	jmp    c000e220 <KeShutdown()>
c00106fa:	48                   	dec    eax
c00106fb:	75 05                	jne    c0010702 <KeHandlePowerButton()+0x17>
c00106fd:	e9 42 db ff ff       	jmp    c000e244 <KeSleep()>
c0010702:	c3                   	ret    

c0010703 <KeHandleSleepButton()>:
c0010703:	a1 84 e1 02 c0       	mov    eax,ds:0xc002e184
c0010708:	83 f8 02             	cmp    eax,0x2
c001070b:	75 05                	jne    c0010712 <KeHandleSleepButton()+0xf>
c001070d:	e9 0e db ff ff       	jmp    c000e220 <KeShutdown()>
c0010712:	48                   	dec    eax
c0010713:	75 05                	jne    c001071a <KeHandleSleepButton()+0x17>
c0010715:	e9 2a db ff ff       	jmp    c000e244 <KeSleep()>
c001071a:	c3                   	ret    

c001071b <KeSetupPowerManager()>:
c001071b:	83 ec 0c             	sub    esp,0xc
c001071e:	68 f0 00 00 00       	push   0xf0
c0010723:	6a 00                	push   0x0
c0010725:	68 99 06 01 c0       	push   0xc0010699
c001072a:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0010730:	c7 05 a4 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1a4,0x0
c001073a:	c6 05 60 e1 02 c0 00 	mov    BYTE PTR ds:0xc002e160,0x0
c0010741:	e8 3a 60 00 00       	call   c0016780 <Process::createThread(void (*)(void*), void*, int)>
c0010746:	c7 05 80 e1 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002e180,0x2
c0010750:	c7 05 84 e1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002e184,0x1
c001075a:	c7 05 88 e1 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002e188,0x3
c0010764:	c7 05 8c e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e18c,0x0
c001076e:	c7 05 98 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e198,0x0
c0010778:	c7 05 90 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e190,0x0
c0010782:	c7 05 9c e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e19c,0x0
c001078c:	c7 05 94 e1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002e194,0x3c
c0010796:	c7 05 a0 e1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002e1a0,0x3c
c00107a0:	83 c4 1c             	add    esp,0x1c
c00107a3:	c3                   	ret    

c00107a4 <KeRand()>:
c00107a4:	69 05 a8 e1 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002e1a8,0x2875
c00107ae:	69 0d ac e1 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002e1ac,0xa2e7b175
c00107b8:	53                   	push   ebx
c00107b9:	01 c1                	add    ecx,eax
c00107bb:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00107c0:	f7 25 a8 e1 02 c0    	mul    DWORD PTR ds:0xc002e1a8
c00107c6:	01 ca                	add    edx,ecx
c00107c8:	05 ef 04 b5 00       	add    eax,0xb504ef
c00107cd:	a3 a8 e1 02 c0       	mov    ds:0xc002e1a8,eax
c00107d2:	83 d2 00             	adc    edx,0x0
c00107d5:	0f b7 da             	movzx  ebx,dx
c00107d8:	89 1d ac e1 02 c0    	mov    DWORD PTR ds:0xc002e1ac,ebx
c00107de:	0f ac d8 0e          	shrd   eax,ebx,0xe
c00107e2:	5b                   	pop    ebx
c00107e3:	c3                   	ret    

c00107e4 <KeSeedRand(unsigned int)>:
c00107e4:	53                   	push   ebx
c00107e5:	83 ec 08             	sub    esp,0x8
c00107e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107ec:	e8 5e 94 00 00       	call   c0019c4f <HalGetRand()>
c00107f1:	c7 05 ac e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1ac,0x0
c00107fb:	31 d8                	xor    eax,ebx
c00107fd:	a3 a8 e1 02 c0       	mov    ds:0xc002e1a8,eax
c0010802:	e8 9d ff ff ff       	call   c00107a4 <KeRand()>
c0010807:	83 c4 08             	add    esp,0x8
c001080a:	5b                   	pop    ebx
c001080b:	eb 97                	jmp    c00107a4 <KeRand()>

c001080d <KeInitRand()>:
c001080d:	83 ec 0c             	sub    esp,0xc
c0010810:	e8 5e 92 00 00       	call   c0019a73 <HalQueryPerformanceCounter()>
c0010815:	0f 20 da             	mov    edx,cr3
c0010818:	0f 22 da             	mov    cr3,edx
c001081b:	0f 20 da             	mov    edx,cr3
c001081e:	0f 22 da             	mov    cr3,edx
c0010821:	0f 20 da             	mov    edx,cr3
c0010824:	0f 22 da             	mov    cr3,edx
c0010827:	0f 20 da             	mov    edx,cr3
c001082a:	0f 22 da             	mov    cr3,edx
c001082d:	83 ec 0c             	sub    esp,0xc
c0010830:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010835:	50                   	push   eax
c0010836:	e8 a9 ff ff ff       	call   c00107e4 <KeSeedRand(unsigned int)>
c001083b:	83 c4 1c             	add    esp,0x1c
c001083e:	c3                   	ret    
c001083f:	90                   	nop

c0010840 <KeResolveCompatibilitySymbol(char*)>:
c0010840:	83 ec 0c             	sub    esp,0xc
c0010843:	83 ec 08             	sub    esp,0x8
c0010846:	68 c0 3b 02 c0       	push   0xc0023bc0
c001084b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001084f:	e8 2c ff fe ff       	call   c0000780 <strcmp>
c0010854:	83 c4 10             	add    esp,0x10
c0010857:	85 c0                	test   eax,eax
c0010859:	0f 94 c0             	sete   al
c001085c:	0f b6 c0             	movzx  eax,al
c001085f:	85 c0                	test   eax,eax
c0010861:	74 0d                	je     c0010870 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010863:	b8 d0 c0 02 c0       	mov    eax,0xc002c0d0
c0010868:	e9 8b 01 00 00       	jmp    c00109f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001086d:	8d 76 00             	lea    esi,[esi+0x0]
c0010870:	83 ec 08             	sub    esp,0x8
c0010873:	68 c9 3b 02 c0       	push   0xc0023bc9
c0010878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001087c:	e8 ff fe fe ff       	call   c0000780 <strcmp>
c0010881:	83 c4 10             	add    esp,0x10
c0010884:	85 c0                	test   eax,eax
c0010886:	0f 94 c0             	sete   al
c0010889:	0f b6 c0             	movzx  eax,al
c001088c:	85 c0                	test   eax,eax
c001088e:	74 0c                	je     c001089c <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010890:	b8 44 13 02 c0       	mov    eax,0xc0021344
c0010895:	e9 5e 01 00 00       	jmp    c00109f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001089a:	66 90                	xchg   ax,ax
c001089c:	83 ec 08             	sub    esp,0x8
c001089f:	68 d3 3b 02 c0       	push   0xc0023bd3
c00108a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108a8:	e8 d3 fe fe ff       	call   c0000780 <strcmp>
c00108ad:	83 c4 10             	add    esp,0x10
c00108b0:	85 c0                	test   eax,eax
c00108b2:	0f 94 c0             	sete   al
c00108b5:	0f b6 c0             	movzx  eax,al
c00108b8:	85 c0                	test   eax,eax
c00108ba:	74 0c                	je     c00108c8 <KeResolveCompatibilitySymbol(char*)+0x88>
c00108bc:	b8 78 10 02 c0       	mov    eax,0xc0021078
c00108c1:	e9 32 01 00 00       	jmp    c00109f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00108c6:	66 90                	xchg   ax,ax
c00108c8:	83 ec 08             	sub    esp,0x8
c00108cb:	68 dc 3b 02 c0       	push   0xc0023bdc
c00108d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108d4:	e8 a7 fe fe ff       	call   c0000780 <strcmp>
c00108d9:	83 c4 10             	add    esp,0x10
c00108dc:	85 c0                	test   eax,eax
c00108de:	0f 94 c0             	sete   al
c00108e1:	0f b6 c0             	movzx  eax,al
c00108e4:	85 c0                	test   eax,eax
c00108e6:	74 0c                	je     c00108f4 <KeResolveCompatibilitySymbol(char*)+0xb4>
c00108e8:	b8 b6 fd 00 c0       	mov    eax,0xc000fdb6
c00108ed:	e9 06 01 00 00       	jmp    c00109f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00108f2:	66 90                	xchg   ax,ax
c00108f4:	83 ec 08             	sub    esp,0x8
c00108f7:	68 ef 3b 02 c0       	push   0xc0023bef
c00108fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010900:	e8 7b fe fe ff       	call   c0000780 <strcmp>
c0010905:	83 c4 10             	add    esp,0x10
c0010908:	85 c0                	test   eax,eax
c001090a:	0f 94 c0             	sete   al
c001090d:	0f b6 c0             	movzx  eax,al
c0010910:	85 c0                	test   eax,eax
c0010912:	74 0c                	je     c0010920 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010914:	b8 27 d1 00 c0       	mov    eax,0xc000d127
c0010919:	e9 da 00 00 00       	jmp    c00109f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001091e:	66 90                	xchg   ax,ax
c0010920:	83 ec 08             	sub    esp,0x8
c0010923:	68 0c 3c 02 c0       	push   0xc0023c0c
c0010928:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001092c:	e8 4f fe fe ff       	call   c0000780 <strcmp>
c0010931:	83 c4 10             	add    esp,0x10
c0010934:	85 c0                	test   eax,eax
c0010936:	0f 94 c0             	sete   al
c0010939:	0f b6 c0             	movzx  eax,al
c001093c:	85 c0                	test   eax,eax
c001093e:	74 0c                	je     c001094c <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010940:	b8 44 14 02 c0       	mov    eax,0xc0021444
c0010945:	e9 ae 00 00 00       	jmp    c00109f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001094a:	66 90                	xchg   ax,ax
c001094c:	83 ec 08             	sub    esp,0x8
c001094f:	68 16 3c 02 c0       	push   0xc0023c16
c0010954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010958:	e8 23 fe fe ff       	call   c0000780 <strcmp>
c001095d:	83 c4 10             	add    esp,0x10
c0010960:	85 c0                	test   eax,eax
c0010962:	0f 94 c0             	sete   al
c0010965:	0f b6 c0             	movzx  eax,al
c0010968:	85 c0                	test   eax,eax
c001096a:	74 0c                	je     c0010978 <KeResolveCompatibilitySymbol(char*)+0x138>
c001096c:	b8 c4 11 02 c0       	mov    eax,0xc00211c4
c0010971:	e9 82 00 00 00       	jmp    c00109f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010976:	66 90                	xchg   ax,ax
c0010978:	83 ec 08             	sub    esp,0x8
c001097b:	68 1f 3c 02 c0       	push   0xc0023c1f
c0010980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010984:	e8 f7 fd fe ff       	call   c0000780 <strcmp>
c0010989:	83 c4 10             	add    esp,0x10
c001098c:	85 c0                	test   eax,eax
c001098e:	0f 94 c0             	sete   al
c0010991:	0f b6 c0             	movzx  eax,al
c0010994:	85 c0                	test   eax,eax
c0010996:	74 08                	je     c00109a0 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010998:	b8 d4 c0 02 c0       	mov    eax,0xc002c0d4
c001099d:	eb 59                	jmp    c00109f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001099f:	90                   	nop
c00109a0:	83 ec 08             	sub    esp,0x8
c00109a3:	68 37 3c 02 c0       	push   0xc0023c37
c00109a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109ac:	e8 cf fd fe ff       	call   c0000780 <strcmp>
c00109b1:	83 c4 10             	add    esp,0x10
c00109b4:	85 c0                	test   eax,eax
c00109b6:	0f 94 c0             	sete   al
c00109b9:	0f b6 c0             	movzx  eax,al
c00109bc:	85 c0                	test   eax,eax
c00109be:	74 08                	je     c00109c8 <KeResolveCompatibilitySymbol(char*)+0x188>
c00109c0:	b8 d4 c0 02 c0       	mov    eax,0xc002c0d4
c00109c5:	eb 31                	jmp    c00109f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00109c7:	90                   	nop
c00109c8:	83 ec 08             	sub    esp,0x8
c00109cb:	68 44 3c 02 c0       	push   0xc0023c44
c00109d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109d4:	e8 a7 fd fe ff       	call   c0000780 <strcmp>
c00109d9:	83 c4 10             	add    esp,0x10
c00109dc:	85 c0                	test   eax,eax
c00109de:	0f 94 c0             	sete   al
c00109e1:	0f b6 c0             	movzx  eax,al
c00109e4:	85 c0                	test   eax,eax
c00109e6:	74 08                	je     c00109f0 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c00109e8:	b8 d5 c0 02 c0       	mov    eax,0xc002c0d5
c00109ed:	eb 09                	jmp    c00109f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00109ef:	90                   	nop
c00109f0:	b8 00 00 00 00       	mov    eax,0x0
c00109f5:	8d 76 00             	lea    esi,[esi+0x0]
c00109f8:	83 c4 0c             	add    esp,0xc
c00109fb:	c3                   	ret    

c00109fc <Semaphore::Semaphore(int)>:
c00109fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010a04:	89 10                	mov    DWORD PTR [eax],edx
c0010a06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a0a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0010a11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a15:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010a1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a20:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0010a27:	90                   	nop
c0010a28:	c3                   	ret    
c0010a29:	90                   	nop
c0010a2a:	66 90                	xchg   ax,ax

c0010a2c <Semaphore::tryAcquire()>:
c0010a2c:	83 ec 0c             	sub    esp,0xc
c0010a2f:	fa                   	cli    
c0010a30:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010a35:	83 c0 01             	add    eax,0x1
c0010a38:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010a3d:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010a42:	83 c0 01             	add    eax,0x1
c0010a45:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010a4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a4e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010a51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a55:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a57:	39 c2                	cmp    edx,eax
c0010a59:	7d 59                	jge    c0010ab4 <Semaphore::tryAcquire()+0x88>
c0010a5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a5f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010a62:	8d 50 01             	lea    edx,[eax+0x1]
c0010a65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a69:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010a6c:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010a71:	83 e8 01             	sub    eax,0x1
c0010a74:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010a79:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010a7e:	85 c0                	test   eax,eax
c0010a80:	75 1a                	jne    c0010a9c <Semaphore::tryAcquire()+0x70>
c0010a82:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010a87:	85 c0                	test   eax,eax
c0010a89:	74 11                	je     c0010a9c <Semaphore::tryAcquire()+0x70>
c0010a8b:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010a95:	e8 3e 5f 00 00       	call   c00169d8 <schedule()>
c0010a9a:	66 90                	xchg   ax,ax
c0010a9c:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010aa4:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010aa9:	85 c0                	test   eax,eax
c0010aab:	75 03                	jne    c0010ab0 <Semaphore::tryAcquire()+0x84>
c0010aad:	fb                   	sti    
c0010aae:	66 90                	xchg   ax,ax
c0010ab0:	b0 01                	mov    al,0x1
c0010ab2:	eb 48                	jmp    c0010afc <Semaphore::tryAcquire()+0xd0>
c0010ab4:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010ab9:	83 e8 01             	sub    eax,0x1
c0010abc:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010ac1:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010ac6:	85 c0                	test   eax,eax
c0010ac8:	75 1a                	jne    c0010ae4 <Semaphore::tryAcquire()+0xb8>
c0010aca:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010acf:	85 c0                	test   eax,eax
c0010ad1:	74 11                	je     c0010ae4 <Semaphore::tryAcquire()+0xb8>
c0010ad3:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010add:	e8 f6 5e 00 00       	call   c00169d8 <schedule()>
c0010ae2:	66 90                	xchg   ax,ax
c0010ae4:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010aec:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010af1:	85 c0                	test   eax,eax
c0010af3:	75 03                	jne    c0010af8 <Semaphore::tryAcquire()+0xcc>
c0010af5:	fb                   	sti    
c0010af6:	66 90                	xchg   ax,ax
c0010af8:	b0 00                	mov    al,0x0
c0010afa:	66 90                	xchg   ax,ax
c0010afc:	83 c4 0c             	add    esp,0xc
c0010aff:	c3                   	ret    

c0010b00 <Semaphore::assertLocked(char const*)>:
c0010b00:	83 ec 0c             	sub    esp,0xc
c0010b03:	fa                   	cli    
c0010b04:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010b09:	83 c0 01             	add    eax,0x1
c0010b0c:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010b11:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010b16:	83 c0 01             	add    eax,0x1
c0010b19:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010b1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b22:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010b25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b29:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b2b:	39 c2                	cmp    edx,eax
c0010b2d:	7d 11                	jge    c0010b40 <Semaphore::assertLocked(char const*)+0x40>
c0010b2f:	83 ec 0c             	sub    esp,0xc
c0010b32:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010b36:	e8 7b f2 ff ff       	call   c000fdb6 <KePanic(char const*)>
c0010b3b:	83 c4 10             	add    esp,0x10
c0010b3e:	66 90                	xchg   ax,ax
c0010b40:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010b45:	83 e8 01             	sub    eax,0x1
c0010b48:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010b4d:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010b52:	85 c0                	test   eax,eax
c0010b54:	75 1a                	jne    c0010b70 <Semaphore::assertLocked(char const*)+0x70>
c0010b56:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010b5b:	85 c0                	test   eax,eax
c0010b5d:	74 11                	je     c0010b70 <Semaphore::assertLocked(char const*)+0x70>
c0010b5f:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010b69:	e8 6a 5e 00 00       	call   c00169d8 <schedule()>
c0010b6e:	66 90                	xchg   ax,ax
c0010b70:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010b78:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010b7d:	85 c0                	test   eax,eax
c0010b7f:	75 03                	jne    c0010b84 <Semaphore::assertLocked(char const*)+0x84>
c0010b81:	fb                   	sti    
c0010b82:	66 90                	xchg   ax,ax
c0010b84:	90                   	nop
c0010b85:	83 c4 0c             	add    esp,0xc
c0010b88:	c3                   	ret    
c0010b89:	90                   	nop
c0010b8a:	66 90                	xchg   ax,ax

c0010b8c <Semaphore::acquire(int)>:
c0010b8c:	83 ec 1c             	sub    esp,0x1c
c0010b8f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0010b94:	0f 84 9a 00 00 00    	je     c0010c34 <Semaphore::acquire(int)+0xa8>
c0010b9a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010ba2:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0010ba7:	90                   	nop
c0010ba8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0010bad:	85 c0                	test   eax,eax
c0010baf:	74 77                	je     c0010c28 <Semaphore::acquire(int)+0x9c>
c0010bb1:	83 ec 0c             	sub    esp,0xc
c0010bb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010bb8:	e8 6f fe ff ff       	call   c0010a2c <Semaphore::tryAcquire()>
c0010bbd:	83 c4 10             	add    esp,0x10
c0010bc0:	83 f0 01             	xor    eax,0x1
c0010bc3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0010bc7:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0010bcb:	83 f0 01             	xor    eax,0x1
c0010bce:	0f b6 c0             	movzx  eax,al
c0010bd1:	85 c0                	test   eax,eax
c0010bd3:	75 4f                	jne    c0010c24 <Semaphore::acquire(int)+0x98>
c0010bd5:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0010bda:	7f 2c                	jg     c0010c08 <Semaphore::acquire(int)+0x7c>
c0010bdc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010be0:	89 d0                	mov    eax,edx
c0010be2:	c1 e0 02             	shl    eax,0x2
c0010be5:	01 d0                	add    eax,edx
c0010be7:	d1 e0                	shl    eax,1
c0010be9:	83 ec 0c             	sub    esp,0xc
c0010bec:	50                   	push   eax
c0010bed:	e8 ce 5f 00 00       	call   c0016bc0 <milliTenthSleep(unsigned int)>
c0010bf2:	83 c4 10             	add    esp,0x10
c0010bf5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010bf9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0010bfd:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0010c05:	eb a1                	jmp    c0010ba8 <Semaphore::acquire(int)+0x1c>
c0010c07:	90                   	nop
c0010c08:	83 ec 0c             	sub    esp,0xc
c0010c0b:	68 90 01 00 00       	push   0x190
c0010c10:	e8 ab 5f 00 00       	call   c0016bc0 <milliTenthSleep(unsigned int)>
c0010c15:	83 c4 10             	add    esp,0x10
c0010c18:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0010c1d:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0010c22:	eb 84                	jmp    c0010ba8 <Semaphore::acquire(int)+0x1c>
c0010c24:	90                   	nop
c0010c25:	8d 76 00             	lea    esi,[esi+0x0]
c0010c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c2c:	e9 fb 00 00 00       	jmp    c0010d2c <Semaphore::acquire(int)+0x1a0>
c0010c31:	8d 76 00             	lea    esi,[esi+0x0]
c0010c34:	fa                   	cli    
c0010c35:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010c3a:	83 c0 01             	add    eax,0x1
c0010c3d:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010c42:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010c47:	83 c0 01             	add    eax,0x1
c0010c4a:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010c4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c53:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010c56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c5c:	39 c2                	cmp    edx,eax
c0010c5e:	7d 14                	jge    c0010c74 <Semaphore::acquire(int)+0xe8>
c0010c60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c64:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010c67:	8d 50 01             	lea    edx,[eax+0x1]
c0010c6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c6e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010c71:	eb 6d                	jmp    c0010ce0 <Semaphore::acquire(int)+0x154>
c0010c73:	90                   	nop
c0010c74:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010c79:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c7b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010c82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c89:	85 c0                	test   eax,eax
c0010c8b:	75 13                	jne    c0010ca0 <Semaphore::acquire(int)+0x114>
c0010c8d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010c92:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c98:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c9b:	eb 17                	jmp    c0010cb4 <Semaphore::acquire(int)+0x128>
c0010c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0010ca0:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0010ca5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ca9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010cac:	8b 12                	mov    edx,DWORD PTR [edx]
c0010cae:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010cb1:	8d 76 00             	lea    esi,[esi+0x0]
c0010cb4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010cb9:	8b 10                	mov    edx,DWORD PTR [eax]
c0010cbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cbf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010cc2:	83 ec 0c             	sub    esp,0xc
c0010cc5:	68 54 3c 02 c0       	push   0xc0023c54
c0010cca:	e8 7f 62 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010ccf:	83 c4 10             	add    esp,0x10
c0010cd2:	83 ec 0c             	sub    esp,0xc
c0010cd5:	6a 05                	push   0x5
c0010cd7:	e8 bc 5d 00 00       	call   c0016a98 <blockTask(TaskState)>
c0010cdc:	83 c4 10             	add    esp,0x10
c0010cdf:	90                   	nop
c0010ce0:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010ce5:	83 e8 01             	sub    eax,0x1
c0010ce8:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010ced:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010cf2:	85 c0                	test   eax,eax
c0010cf4:	75 1a                	jne    c0010d10 <Semaphore::acquire(int)+0x184>
c0010cf6:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010cfb:	85 c0                	test   eax,eax
c0010cfd:	74 11                	je     c0010d10 <Semaphore::acquire(int)+0x184>
c0010cff:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010d09:	e8 ca 5c 00 00       	call   c00169d8 <schedule()>
c0010d0e:	66 90                	xchg   ax,ax
c0010d10:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010d18:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010d1d:	85 c0                	test   eax,eax
c0010d1f:	75 03                	jne    c0010d24 <Semaphore::acquire(int)+0x198>
c0010d21:	fb                   	sti    
c0010d22:	66 90                	xchg   ax,ax
c0010d24:	b8 00 00 00 00       	mov    eax,0x0
c0010d29:	8d 76 00             	lea    esi,[esi+0x0]
c0010d2c:	83 c4 1c             	add    esp,0x1c
c0010d2f:	c3                   	ret    

c0010d30 <Semaphore::acquire()>:
c0010d30:	83 ec 0c             	sub    esp,0xc
c0010d33:	83 ec 08             	sub    esp,0x8
c0010d36:	6a 00                	push   0x0
c0010d38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d3c:	e8 4b fe ff ff       	call   c0010b8c <Semaphore::acquire(int)>
c0010d41:	83 c4 10             	add    esp,0x10
c0010d44:	90                   	nop
c0010d45:	83 c4 0c             	add    esp,0xc
c0010d48:	c3                   	ret    
c0010d49:	90                   	nop
c0010d4a:	66 90                	xchg   ax,ax

c0010d4c <Semaphore::release()>:
c0010d4c:	83 ec 1c             	sub    esp,0x1c
c0010d4f:	fa                   	cli    
c0010d50:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010d55:	83 c0 01             	add    eax,0x1
c0010d58:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010d5d:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010d62:	83 c0 01             	add    eax,0x1
c0010d65:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010d6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d71:	85 c0                	test   eax,eax
c0010d73:	74 2b                	je     c0010da0 <Semaphore::release()+0x54>
c0010d75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d79:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010d84:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010d87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d8b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010d8e:	83 ec 0c             	sub    esp,0xc
c0010d91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010d95:	e8 3e 5f 00 00       	call   c0016cd8 <unblockTask(ThreadControlBlock*)>
c0010d9a:	83 c4 10             	add    esp,0x10
c0010d9d:	eb 15                	jmp    c0010db4 <Semaphore::release()+0x68>
c0010d9f:	90                   	nop
c0010da0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010da4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010da7:	8d 50 ff             	lea    edx,[eax-0x1]
c0010daa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dae:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010db1:	8d 76 00             	lea    esi,[esi+0x0]
c0010db4:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010db9:	83 e8 01             	sub    eax,0x1
c0010dbc:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010dc1:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010dc6:	85 c0                	test   eax,eax
c0010dc8:	75 1a                	jne    c0010de4 <Semaphore::release()+0x98>
c0010dca:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010dcf:	85 c0                	test   eax,eax
c0010dd1:	74 11                	je     c0010de4 <Semaphore::release()+0x98>
c0010dd3:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010ddd:	e8 f6 5b 00 00       	call   c00169d8 <schedule()>
c0010de2:	66 90                	xchg   ax,ax
c0010de4:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010dec:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010df1:	85 c0                	test   eax,eax
c0010df3:	75 03                	jne    c0010df8 <Semaphore::release()+0xac>
c0010df5:	fb                   	sti    
c0010df6:	66 90                	xchg   ax,ax
c0010df8:	90                   	nop
c0010df9:	83 c4 1c             	add    esp,0x1c
c0010dfc:	c3                   	ret    

c0010dfd <KiSigKill(int)>:
c0010dfd:	83 ec 0c             	sub    esp,0xc
c0010e00:	6a 00                	push   0x0
c0010e02:	6a 00                	push   0x0
c0010e04:	6a ff                	push   0xffffffff
c0010e06:	6a 01                	push   0x1
c0010e08:	e8 45 62 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010e0d:	83 c4 1c             	add    esp,0x1c
c0010e10:	c3                   	ret    

c0010e11 <KiDefaultSignalHandlerIgnore(int)>:
c0010e11:	c3                   	ret    

c0010e12 <KiDefaultSignalHandlerPause(int)>:
c0010e12:	57                   	push   edi
c0010e13:	b9 07 00 00 00       	mov    ecx,0x7
c0010e18:	56                   	push   esi
c0010e19:	be af 3c 02 c0       	mov    esi,0xc0023caf
c0010e1e:	83 ec 24             	sub    esp,0x24
c0010e21:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010e25:	fc                   	cld    
c0010e26:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010e28:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010e2c:	50                   	push   eax
c0010e2d:	6a 00                	push   0x0
c0010e2f:	6a 00                	push   0x0
c0010e31:	6a 27                	push   0x27
c0010e33:	e8 1a 62 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010e38:	83 c4 34             	add    esp,0x34
c0010e3b:	5e                   	pop    esi
c0010e3c:	5f                   	pop    edi
c0010e3d:	c3                   	ret    

c0010e3e <KiDefaultSignalHandlerResume(int)>:
c0010e3e:	57                   	push   edi
c0010e3f:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010e44:	56                   	push   esi
c0010e45:	be cb 3c 02 c0       	mov    esi,0xc0023ccb
c0010e4a:	83 ec 24             	sub    esp,0x24
c0010e4d:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010e51:	fc                   	cld    
c0010e52:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e54:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010e58:	50                   	push   eax
c0010e59:	6a 00                	push   0x0
c0010e5b:	6a 00                	push   0x0
c0010e5d:	6a 27                	push   0x27
c0010e5f:	e8 ee 61 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010e64:	83 c4 34             	add    esp,0x34
c0010e67:	5e                   	pop    esi
c0010e68:	5f                   	pop    edi
c0010e69:	c3                   	ret    

c0010e6a <KeDeinitSignals(SigHandlerBlock*)>:
c0010e6a:	e9 11 ec ff ff       	jmp    c000fa80 <free>

c0010e6f <KeInitSignals()>:
c0010e6f:	53                   	push   ebx
c0010e70:	83 ec 14             	sub    esp,0x14
c0010e73:	68 c8 00 00 00       	push   0xc8
c0010e78:	e8 f3 eb ff ff       	call   c000fa70 <malloc>
c0010e7d:	83 c4 0c             	add    esp,0xc
c0010e80:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010e8a:	89 c3                	mov    ebx,eax
c0010e8c:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010e96:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010e9c:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c0010ea0:	6a 20                	push   0x20
c0010ea2:	6a 00                	push   0x0
c0010ea4:	50                   	push   eax
c0010ea5:	e8 46 f6 fe ff       	call   c00004f0 <memset>
c0010eaa:	83 c4 0c             	add    esp,0xc
c0010ead:	6a 44                	push   0x44
c0010eaf:	6a 00                	push   0x0
c0010eb1:	53                   	push   ebx
c0010eb2:	e8 39 f6 fe ff       	call   c00004f0 <memset>
c0010eb7:	83 c4 18             	add    esp,0x18
c0010eba:	89 d8                	mov    eax,ebx
c0010ebc:	5b                   	pop    ebx
c0010ebd:	c3                   	ret    

c0010ebe <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010ebe:	53                   	push   ebx
c0010ebf:	b8 01 00 00 00       	mov    eax,0x1
c0010ec4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010ec8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ecc:	83 f9 10             	cmp    ecx,0x10
c0010ecf:	7f 21                	jg     c0010ef2 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010ed1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ed5:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010ed8:	89 03                	mov    DWORD PTR [ebx],eax
c0010eda:	b8 01 00 00 00       	mov    eax,0x1
c0010edf:	d3 e0                	shl    eax,cl
c0010ee1:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010ee5:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010ee8:	31 c0                	xor    eax,eax
c0010eea:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010ef2:	5b                   	pop    ebx
c0010ef3:	c3                   	ret    

c0010ef4 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010ef4:	55                   	push   ebp
c0010ef5:	57                   	push   edi
c0010ef6:	bf 08 00 00 00       	mov    edi,0x8
c0010efb:	56                   	push   esi
c0010efc:	53                   	push   ebx
c0010efd:	83 ec 18             	sub    esp,0x18
c0010f00:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010f04:	68 e8 3c 02 c0       	push   0xc0023ce8
c0010f09:	e8 40 60 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010f0e:	83 c4 10             	add    esp,0x10
c0010f11:	31 c9                	xor    ecx,ecx
c0010f13:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010f1a:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010f20:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010f24:	99                   	cdq    
c0010f25:	f7 ff                	idiv   edi
c0010f27:	8d 42 24             	lea    eax,[edx+0x24]
c0010f2a:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010f2e:	85 f6                	test   esi,esi
c0010f30:	75 1a                	jne    c0010f4c <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010f32:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010f36:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010f3a:	50                   	push   eax
c0010f3b:	50                   	push   eax
c0010f3c:	52                   	push   edx
c0010f3d:	68 f9 3c 02 c0       	push   0xc0023cf9
c0010f42:	e8 07 60 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010f47:	83 c4 10             	add    esp,0x10
c0010f4a:	eb 1b                	jmp    c0010f67 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010f4c:	41                   	inc    ecx
c0010f4d:	83 f9 08             	cmp    ecx,0x8
c0010f50:	75 ce                	jne    c0010f20 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010f52:	83 ec 0c             	sub    esp,0xc
c0010f55:	be 01 00 00 00       	mov    esi,0x1
c0010f5a:	68 1a 3d 02 c0       	push   0xc0023d1a
c0010f5f:	e8 ea 5f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010f64:	83 c4 10             	add    esp,0x10
c0010f67:	83 c4 0c             	add    esp,0xc
c0010f6a:	89 f0                	mov    eax,esi
c0010f6c:	5b                   	pop    ebx
c0010f6d:	5e                   	pop    esi
c0010f6e:	5f                   	pop    edi
c0010f6f:	5d                   	pop    ebp
c0010f70:	c3                   	ret    

c0010f71 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010f71:	55                   	push   ebp
c0010f72:	57                   	push   edi
c0010f73:	56                   	push   esi
c0010f74:	53                   	push   ebx
c0010f75:	51                   	push   ecx
c0010f76:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010f7a:	85 db                	test   ebx,ebx
c0010f7c:	0f 84 bc 00 00 00    	je     c001103e <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0010f82:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010f89:	0f 84 af 00 00 00    	je     c001103e <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0010f8f:	31 c9                	xor    ecx,ecx
c0010f91:	bf 08 00 00 00       	mov    edi,0x8
c0010f96:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010f9c:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010f9f:	99                   	cdq    
c0010fa0:	f7 ff                	idiv   edi
c0010fa2:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010fa9:	85 ed                	test   ebp,ebp
c0010fab:	0f 84 9e 00 00 00    	je     c001104f <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0010fb1:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010fb7:	89 e9                	mov    ecx,ebp
c0010fb9:	bf 01 00 00 00       	mov    edi,0x1
c0010fbe:	d3 e7                	shl    edi,cl
c0010fc0:	31 c9                	xor    ecx,ecx
c0010fc2:	89 04 24             	mov    DWORD PTR [esp],eax
c0010fc5:	b8 01 00 00 00       	mov    eax,0x1
c0010fca:	d3 e0                	shl    eax,cl
c0010fcc:	85 04 24             	test   DWORD PTR [esp],eax
c0010fcf:	74 06                	je     c0010fd7 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0010fd1:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010fd5:	75 67                	jne    c001103e <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0010fd7:	41                   	inc    ecx
c0010fd8:	83 f9 11             	cmp    ecx,0x11
c0010fdb:	75 e8                	jne    c0010fc5 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0010fdd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010fe0:	46                   	inc    esi
c0010fe1:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010fe7:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010ff2:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010ff9:	09 f8                	or     eax,edi
c0010ffb:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011001:	31 c0                	xor    eax,eax
c0011003:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c001100b:	74 09                	je     c0011016 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c001100d:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011014:	eb 06                	jmp    c001101c <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011016:	40                   	inc    eax
c0011017:	83 f8 08             	cmp    eax,0x8
c001101a:	75 e7                	jne    c0011003 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c001101c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011020:	83 fd 09             	cmp    ebp,0x9
c0011023:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011026:	89 2a                	mov    DWORD PTR [edx],ebp
c0011028:	75 07                	jne    c0011031 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c001102a:	b8 fd 0d 01 c0       	mov    eax,0xc0010dfd
c001102f:	eb 31                	jmp    c0011062 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011031:	83 f8 01             	cmp    eax,0x1
c0011034:	75 0c                	jne    c0011042 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011036:	f7 d7                	not    edi
c0011038:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c001103e:	31 c0                	xor    eax,eax
c0011040:	eb 20                	jmp    c0011062 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011042:	85 c0                	test   eax,eax
c0011044:	75 1c                	jne    c0011062 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011046:	8b 04 ad 60 5f 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffda0a0]
c001104d:	eb 13                	jmp    c0011062 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001104f:	41                   	inc    ecx
c0011050:	46                   	inc    esi
c0011051:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011057:	83 f9 08             	cmp    ecx,0x8
c001105a:	0f 85 36 ff ff ff    	jne    c0010f96 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011060:	eb dc                	jmp    c001103e <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011062:	5a                   	pop    edx
c0011063:	5b                   	pop    ebx
c0011064:	5e                   	pop    esi
c0011065:	5f                   	pop    edi
c0011066:	5d                   	pop    ebp
c0011067:	c3                   	ret    

c0011068 <KiCheckSignalZ>:
c0011068:	83 ec 10             	sub    esp,0x10
c001106b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001106f:	50                   	push   eax
c0011070:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011075:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011078:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001107e:	e8 ee fe ff ff       	call   c0010f71 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011083:	5a                   	pop    edx
c0011084:	31 d2                	xor    edx,edx
c0011086:	59                   	pop    ecx
c0011087:	85 c0                	test   eax,eax
c0011089:	74 19                	je     c00110a4 <KiCheckSignalZ+0x3c>
c001108b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011091:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011094:	89 02                	mov    DWORD PTR [edx],eax
c0011096:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c001109d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00110a1:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00110a4:	89 d0                	mov    eax,edx
c00110a6:	83 c4 10             	add    esp,0x10
c00110a9:	c3                   	ret    

c00110aa <KeCompleteSignal(SigHandlerBlock*, int)>:
c00110aa:	56                   	push   esi
c00110ab:	53                   	push   ebx
c00110ac:	bb 01 00 00 00       	mov    ebx,0x1
c00110b1:	52                   	push   edx
c00110b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00110b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00110ba:	d3 e3                	shl    ebx,cl
c00110bc:	83 f9 10             	cmp    ecx,0x10
c00110bf:	7f 08                	jg     c00110c9 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00110c1:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00110c7:	75 10                	jne    c00110d9 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00110c9:	83 ec 0c             	sub    esp,0xc
c00110cc:	68 2b 3d 02 c0       	push   0xc0023d2b
c00110d1:	e8 e0 ec ff ff       	call   c000fdb6 <KePanic(char const*)>
c00110d6:	83 c4 10             	add    esp,0x10
c00110d9:	f7 d3                	not    ebx
c00110db:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00110e1:	58                   	pop    eax
c00110e2:	5b                   	pop    ebx
c00110e3:	5e                   	pop    esi
c00110e4:	c3                   	ret    

c00110e5 <KiFinishSignalZ>:
c00110e5:	53                   	push   ebx
c00110e6:	83 ec 10             	sub    esp,0x10
c00110e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00110ed:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c00110f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110f5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110f8:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00110fe:	e8 a7 ff ff ff       	call   c00110aa <KeCompleteSignal(SigHandlerBlock*, int)>
c0011103:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011109:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011110:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011117:	83 c4 18             	add    esp,0x18
c001111a:	5b                   	pop    ebx
c001111b:	c3                   	ret    

c001111c <SysSeekDir(regs*)>:
c001111c:	31 c0                	xor    eax,eax
c001111e:	31 d2                	xor    edx,edx
c0011120:	c3                   	ret    

c0011121 <SysTellDir(regs*)>:
c0011121:	31 c0                	xor    eax,eax
c0011123:	31 d2                	xor    edx,edx
c0011125:	c3                   	ret    

c0011126 <SysVerify(regs*)>:
c0011126:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001112a:	31 d2                	xor    edx,edx
c001112c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001112f:	c3                   	ret    

c0011130 <SysGetArgc(regs*)>:
c0011130:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011135:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011138:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c001113e:	89 c2                	mov    edx,eax
c0011140:	c1 fa 1f             	sar    edx,0x1f
c0011143:	c3                   	ret    

c0011144 <SysTTYName(regs*)>:
c0011144:	b8 01 00 00 00       	mov    eax,0x1
c0011149:	31 d2                	xor    edx,edx
c001114b:	c3                   	ret    

c001114c <SysFormatDisk(regs*)>:
c001114c:	56                   	push   esi
c001114d:	53                   	push   ebx
c001114e:	83 ec 04             	sub    esp,0x4
c0011151:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011155:	8b 1d 04 b3 02 c0    	mov    ebx,DWORD PTR ds:0xc002b304
c001115b:	eb 2a                	jmp    c0011187 <SysFormatDisk(regs*)+0x3b>
c001115d:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011160:	83 ec 0c             	sub    esp,0xc
c0011163:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011166:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011168:	51                   	push   ecx
c0011169:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c001116c:	51                   	push   ecx
c001116d:	50                   	push   eax
c001116e:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0011175:	50                   	push   eax
c0011176:	53                   	push   ebx
c0011177:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c001117a:	83 c4 20             	add    esp,0x20
c001117d:	83 f8 08             	cmp    eax,0x8
c0011180:	89 c1                	mov    ecx,eax
c0011182:	75 14                	jne    c0011198 <SysFormatDisk(regs*)+0x4c>
c0011184:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011187:	85 db                	test   ebx,ebx
c0011189:	75 d2                	jne    c001115d <SysFormatDisk(regs*)+0x11>
c001118b:	b8 03 00 00 00       	mov    eax,0x3
c0011190:	31 d2                	xor    edx,edx
c0011192:	83 c4 04             	add    esp,0x4
c0011195:	5b                   	pop    ebx
c0011196:	5e                   	pop    esi
c0011197:	c3                   	ret    
c0011198:	85 c0                	test   eax,eax
c001119a:	74 13                	je     c00111af <SysFormatDisk(regs*)+0x63>
c001119c:	31 d2                	xor    edx,edx
c001119e:	83 f9 09             	cmp    ecx,0x9
c00111a1:	b8 01 00 00 00       	mov    eax,0x1
c00111a6:	74 ea                	je     c0011192 <SysFormatDisk(regs*)+0x46>
c00111a8:	b8 02 00 00 00       	mov    eax,0x2
c00111ad:	eb e1                	jmp    c0011190 <SysFormatDisk(regs*)+0x44>
c00111af:	31 c0                	xor    eax,eax
c00111b1:	eb dd                	jmp    c0011190 <SysFormatDisk(regs*)+0x44>

c00111b3 <SysSetDiskVolumeLabel(regs*)>:
c00111b3:	56                   	push   esi
c00111b4:	53                   	push   ebx
c00111b5:	83 ec 04             	sub    esp,0x4
c00111b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00111bc:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00111bf:	83 f8 19             	cmp    eax,0x19
c00111c2:	77 33                	ja     c00111f7 <SysSetDiskVolumeLabel(regs*)+0x44>
c00111c4:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c00111cb:	85 c9                	test   ecx,ecx
c00111cd:	74 28                	je     c00111f7 <SysSetDiskVolumeLabel(regs*)+0x44>
c00111cf:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00111d2:	85 db                	test   ebx,ebx
c00111d4:	74 21                	je     c00111f7 <SysSetDiskVolumeLabel(regs*)+0x44>
c00111d6:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00111dc:	85 d2                	test   edx,edx
c00111de:	74 17                	je     c00111f7 <SysSetDiskVolumeLabel(regs*)+0x44>
c00111e0:	8b 32                	mov    esi,DWORD PTR [edx]
c00111e2:	53                   	push   ebx
c00111e3:	50                   	push   eax
c00111e4:	51                   	push   ecx
c00111e5:	52                   	push   edx
c00111e6:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c00111e9:	83 c4 10             	add    esp,0x10
c00111ec:	83 c4 04             	add    esp,0x4
c00111ef:	5b                   	pop    ebx
c00111f0:	5e                   	pop    esi
c00111f1:	89 c2                	mov    edx,eax
c00111f3:	c1 fa 1f             	sar    edx,0x1f
c00111f6:	c3                   	ret    
c00111f7:	83 c4 04             	add    esp,0x4
c00111fa:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00111ff:	5b                   	pop    ebx
c0011200:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011205:	5e                   	pop    esi
c0011206:	c3                   	ret    

c0011207 <SysGetDiskVolumeLabel(regs*)>:
c0011207:	57                   	push   edi
c0011208:	56                   	push   esi
c0011209:	53                   	push   ebx
c001120a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001120e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011211:	83 fa 19             	cmp    edx,0x19
c0011214:	77 3c                	ja     c0011252 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011216:	8b 0c 95 e0 ba 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4520]
c001121d:	85 c9                	test   ecx,ecx
c001121f:	74 31                	je     c0011252 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011221:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011224:	85 db                	test   ebx,ebx
c0011226:	74 2a                	je     c0011252 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011228:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001122b:	85 f6                	test   esi,esi
c001122d:	74 23                	je     c0011252 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001122f:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011235:	85 c0                	test   eax,eax
c0011237:	74 19                	je     c0011252 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011239:	83 ec 0c             	sub    esp,0xc
c001123c:	8b 38                	mov    edi,DWORD PTR [eax]
c001123e:	56                   	push   esi
c001123f:	53                   	push   ebx
c0011240:	52                   	push   edx
c0011241:	51                   	push   ecx
c0011242:	50                   	push   eax
c0011243:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011246:	83 c4 20             	add    esp,0x20
c0011249:	5b                   	pop    ebx
c001124a:	5e                   	pop    esi
c001124b:	89 c2                	mov    edx,eax
c001124d:	c1 fa 1f             	sar    edx,0x1f
c0011250:	5f                   	pop    edi
c0011251:	c3                   	ret    
c0011252:	5b                   	pop    ebx
c0011253:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011258:	ba ff ff ff ff       	mov    edx,0xffffffff
c001125d:	5e                   	pop    esi
c001125e:	5f                   	pop    edi
c001125f:	c3                   	ret    

c0011260 <SysRealpath(regs*)>:
c0011260:	53                   	push   ebx
c0011261:	83 ec 08             	sub    esp,0x8
c0011264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011268:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c001126b:	85 c9                	test   ecx,ecx
c001126d:	74 36                	je     c00112a5 <SysRealpath(regs*)+0x45>
c001126f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011272:	31 d2                	xor    edx,edx
c0011274:	b8 01 00 00 00       	mov    eax,0x1
c0011279:	85 db                	test   ebx,ebx
c001127b:	75 05                	jne    c0011282 <SysRealpath(regs*)+0x22>
c001127d:	83 c4 08             	add    esp,0x8
c0011280:	5b                   	pop    ebx
c0011281:	c3                   	ret    
c0011282:	6a 00                	push   0x0
c0011284:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011289:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001128c:	05 0c 01 00 00       	add    eax,0x10c
c0011291:	50                   	push   eax
c0011292:	51                   	push   ecx
c0011293:	53                   	push   ebx
c0011294:	e8 67 6b ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011299:	83 c4 10             	add    esp,0x10
c001129c:	31 c0                	xor    eax,eax
c001129e:	31 d2                	xor    edx,edx
c00112a0:	83 c4 08             	add    esp,0x8
c00112a3:	5b                   	pop    ebx
c00112a4:	c3                   	ret    
c00112a5:	b8 01 00 00 00       	mov    eax,0x1
c00112aa:	31 d2                	xor    edx,edx
c00112ac:	eb f2                	jmp    c00112a0 <SysRealpath(regs*)+0x40>

c00112ae <SysReadDir(regs*)>:
c00112ae:	53                   	push   ebx
c00112af:	83 ec 18             	sub    esp,0x18
c00112b2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00112b6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00112b9:	83 f8 02             	cmp    eax,0x2
c00112bc:	76 4f                	jbe    c001130d <SysReadDir(regs*)+0x5f>
c00112be:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00112c5:	77 52                	ja     c0011319 <SysReadDir(regs*)+0x6b>
c00112c7:	83 ec 0c             	sub    esp,0xc
c00112ca:	50                   	push   eax
c00112cb:	e8 39 1d 00 00       	call   c0013009 <KeGetFileFromDescriptor(int)>
c00112d0:	83 c4 10             	add    esp,0x10
c00112d3:	85 c0                	test   eax,eax
c00112d5:	74 42                	je     c0011319 <SysReadDir(regs*)+0x6b>
c00112d7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00112df:	83 ec 0c             	sub    esp,0xc
c00112e2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00112e6:	8b 10                	mov    edx,DWORD PTR [eax]
c00112e8:	51                   	push   ecx
c00112e9:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00112ec:	51                   	push   ecx
c00112ed:	6a 00                	push   0x0
c00112ef:	68 10 01 00 00       	push   0x110
c00112f4:	50                   	push   eax
c00112f5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00112f8:	83 c4 20             	add    esp,0x20
c00112fb:	85 c0                	test   eax,eax
c00112fd:	89 c1                	mov    ecx,eax
c00112ff:	74 27                	je     c0011328 <SysReadDir(regs*)+0x7a>
c0011301:	31 d2                	xor    edx,edx
c0011303:	83 f9 07             	cmp    ecx,0x7
c0011306:	b8 02 00 00 00       	mov    eax,0x2
c001130b:	75 16                	jne    c0011323 <SysReadDir(regs*)+0x75>
c001130d:	b8 01 00 00 00       	mov    eax,0x1
c0011312:	31 d2                	xor    edx,edx
c0011314:	83 c4 18             	add    esp,0x18
c0011317:	5b                   	pop    ebx
c0011318:	c3                   	ret    
c0011319:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001131e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011323:	83 c4 18             	add    esp,0x18
c0011326:	5b                   	pop    ebx
c0011327:	c3                   	ret    
c0011328:	31 c0                	xor    eax,eax
c001132a:	31 d2                	xor    edx,edx
c001132c:	eb e6                	jmp    c0011314 <SysReadDir(regs*)+0x66>

c001132e <SysIsATTY(regs*)>:
c001132e:	83 ec 0c             	sub    esp,0xc
c0011331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011335:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011338:	83 f8 02             	cmp    eax,0x2
c001133b:	76 07                	jbe    c0011344 <SysIsATTY(regs*)+0x16>
c001133d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011342:	75 26                	jne    c001136a <SysIsATTY(regs*)+0x3c>
c0011344:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011349:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001134c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011352:	85 c0                	test   eax,eax
c0011354:	74 24                	je     c001137a <SysIsATTY(regs*)+0x4c>
c0011356:	8b 10                	mov    edx,DWORD PTR [eax]
c0011358:	83 ec 0c             	sub    esp,0xc
c001135b:	50                   	push   eax
c001135c:	ff 12                	call   DWORD PTR [edx]
c001135e:	83 c4 10             	add    esp,0x10
c0011361:	31 d2                	xor    edx,edx
c0011363:	83 c4 0c             	add    esp,0xc
c0011366:	0f b6 c0             	movzx  eax,al
c0011369:	c3                   	ret    
c001136a:	83 ec 0c             	sub    esp,0xc
c001136d:	50                   	push   eax
c001136e:	e8 96 1c 00 00       	call   c0013009 <KeGetFileFromDescriptor(int)>
c0011373:	83 c4 10             	add    esp,0x10
c0011376:	85 c0                	test   eax,eax
c0011378:	75 dc                	jne    c0011356 <SysIsATTY(regs*)+0x28>
c001137a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001137f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011384:	83 c4 0c             	add    esp,0xc
c0011387:	c3                   	ret    

c0011388 <SysSeek(regs*)>:
c0011388:	53                   	push   ebx
c0011389:	83 ec 08             	sub    esp,0x8
c001138c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011390:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011393:	8d 50 fd             	lea    edx,[eax-0x3]
c0011396:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001139c:	77 39                	ja     c00113d7 <SysSeek(regs*)+0x4f>
c001139e:	83 ec 0c             	sub    esp,0xc
c00113a1:	50                   	push   eax
c00113a2:	e8 62 1c 00 00       	call   c0013009 <KeGetFileFromDescriptor(int)>
c00113a7:	83 c4 10             	add    esp,0x10
c00113aa:	85 c0                	test   eax,eax
c00113ac:	74 29                	je     c00113d7 <SysSeek(regs*)+0x4f>
c00113ae:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00113b1:	83 ec 04             	sub    esp,0x4
c00113b4:	31 db                	xor    ebx,ebx
c00113b6:	53                   	push   ebx
c00113b7:	51                   	push   ecx
c00113b8:	50                   	push   eax
c00113b9:	e8 4a 6e ff ff       	call   c0008208 <File::seek(unsigned long long)>
c00113be:	83 c4 10             	add    esp,0x10
c00113c1:	85 c0                	test   eax,eax
c00113c3:	0f 95 c0             	setne  al
c00113c6:	31 d2                	xor    edx,edx
c00113c8:	0f b6 c0             	movzx  eax,al
c00113cb:	f7 d8                	neg    eax
c00113cd:	83 d2 00             	adc    edx,0x0
c00113d0:	83 c4 08             	add    esp,0x8
c00113d3:	5b                   	pop    ebx
c00113d4:	f7 da                	neg    edx
c00113d6:	c3                   	ret    
c00113d7:	83 c4 08             	add    esp,0x8
c00113da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113df:	5b                   	pop    ebx
c00113e0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113e5:	c3                   	ret    

c00113e6 <SysTell(regs*)>:
c00113e6:	53                   	push   ebx
c00113e7:	83 ec 08             	sub    esp,0x8
c00113ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00113ee:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00113f1:	83 f8 02             	cmp    eax,0x2
c00113f4:	76 56                	jbe    c001144c <SysTell(regs*)+0x66>
c00113f6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00113fb:	76 19                	jbe    c0011416 <SysTell(regs*)+0x30>
c00113fd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011400:	31 d2                	xor    edx,edx
c0011402:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011408:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001140f:	83 c4 08             	add    esp,0x8
c0011412:	31 c0                	xor    eax,eax
c0011414:	5b                   	pop    ebx
c0011415:	c3                   	ret    
c0011416:	83 ec 0c             	sub    esp,0xc
c0011419:	50                   	push   eax
c001141a:	e8 ea 1b 00 00       	call   c0013009 <KeGetFileFromDescriptor(int)>
c001141f:	83 c4 10             	add    esp,0x10
c0011422:	85 c0                	test   eax,eax
c0011424:	74 26                	je     c001144c <SysTell(regs*)+0x66>
c0011426:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011429:	83 ec 08             	sub    esp,0x8
c001142c:	52                   	push   edx
c001142d:	50                   	push   eax
c001142e:	e8 81 6e ff ff       	call   c00082b4 <File::tell(unsigned long long*)>
c0011433:	83 c4 10             	add    esp,0x10
c0011436:	85 c0                	test   eax,eax
c0011438:	0f 95 c0             	setne  al
c001143b:	31 d2                	xor    edx,edx
c001143d:	0f b6 c0             	movzx  eax,al
c0011440:	f7 d8                	neg    eax
c0011442:	83 d2 00             	adc    edx,0x0
c0011445:	83 c4 08             	add    esp,0x8
c0011448:	5b                   	pop    ebx
c0011449:	f7 da                	neg    edx
c001144b:	c3                   	ret    
c001144c:	83 c4 08             	add    esp,0x8
c001144f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011454:	5b                   	pop    ebx
c0011455:	ba ff ff ff ff       	mov    edx,0xffffffff
c001145a:	c3                   	ret    

c001145b <SysSize(regs*)>:
c001145b:	53                   	push   ebx
c001145c:	83 ec 18             	sub    esp,0x18
c001145f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011463:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011466:	83 f8 02             	cmp    eax,0x2
c0011469:	76 5b                	jbe    c00114c6 <SysSize(regs*)+0x6b>
c001146b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011470:	76 19                	jbe    c001148b <SysSize(regs*)+0x30>
c0011472:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011475:	31 d2                	xor    edx,edx
c0011477:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001147d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011484:	83 c4 18             	add    esp,0x18
c0011487:	31 c0                	xor    eax,eax
c0011489:	5b                   	pop    ebx
c001148a:	c3                   	ret    
c001148b:	83 ec 0c             	sub    esp,0xc
c001148e:	50                   	push   eax
c001148f:	e8 75 1b 00 00       	call   c0013009 <KeGetFileFromDescriptor(int)>
c0011494:	83 c4 10             	add    esp,0x10
c0011497:	85 c0                	test   eax,eax
c0011499:	74 2b                	je     c00114c6 <SysSize(regs*)+0x6b>
c001149b:	83 ec 04             	sub    esp,0x4
c001149e:	8d 54 24 13          	lea    edx,[esp+0x13]
c00114a2:	52                   	push   edx
c00114a3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00114a6:	52                   	push   edx
c00114a7:	50                   	push   eax
c00114a8:	e8 9f 6f ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c00114ad:	83 c4 10             	add    esp,0x10
c00114b0:	85 c0                	test   eax,eax
c00114b2:	0f 95 c0             	setne  al
c00114b5:	31 d2                	xor    edx,edx
c00114b7:	0f b6 c0             	movzx  eax,al
c00114ba:	f7 d8                	neg    eax
c00114bc:	83 d2 00             	adc    edx,0x0
c00114bf:	83 c4 18             	add    esp,0x18
c00114c2:	5b                   	pop    ebx
c00114c3:	f7 da                	neg    edx
c00114c5:	c3                   	ret    
c00114c6:	83 c4 18             	add    esp,0x18
c00114c9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114ce:	5b                   	pop    ebx
c00114cf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114d4:	c3                   	ret    

c00114d5 <SysSizeFromFilename(regs*)>:
c00114d5:	55                   	push   ebp
c00114d6:	57                   	push   edi
c00114d7:	56                   	push   esi
c00114d8:	53                   	push   ebx
c00114d9:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00114df:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00114e6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00114e9:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00114ec:	85 f6                	test   esi,esi
c00114ee:	89 f8                	mov    eax,edi
c00114f0:	74 09                	je     c00114fb <SysSizeFromFilename(regs*)+0x26>
c00114f2:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00114f8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00114fb:	83 f8 02             	cmp    eax,0x2
c00114fe:	0f 86 c9 00 00 00    	jbe    c00115cd <SysSizeFromFilename(regs*)+0xf8>
c0011504:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011509:	76 1f                	jbe    c001152a <SysSizeFromFilename(regs*)+0x55>
c001150b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001150e:	31 d2                	xor    edx,edx
c0011510:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011516:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001151d:	31 c0                	xor    eax,eax
c001151f:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011525:	5b                   	pop    ebx
c0011526:	5e                   	pop    esi
c0011527:	5f                   	pop    edi
c0011528:	5d                   	pop    ebp
c0011529:	c3                   	ret    
c001152a:	83 ec 0c             	sub    esp,0xc
c001152d:	68 14 01 00 00       	push   0x114
c0011532:	e8 39 e5 ff ff       	call   c000fa70 <malloc>
c0011537:	6a 01                	push   0x1
c0011539:	89 c5                	mov    ebp,eax
c001153b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011540:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011543:	50                   	push   eax
c0011544:	57                   	push   edi
c0011545:	55                   	push   ebp
c0011546:	e8 e3 6a ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c001154b:	83 c4 20             	add    esp,0x20
c001154e:	85 ed                	test   ebp,ebp
c0011550:	74 7b                	je     c00115cd <SysSizeFromFilename(regs*)+0xf8>
c0011552:	83 ec 04             	sub    esp,0x4
c0011555:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011559:	50                   	push   eax
c001155a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001155d:	51                   	push   ecx
c001155e:	55                   	push   ebp
c001155f:	e8 e8 6e ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0011564:	89 c3                	mov    ebx,eax
c0011566:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011569:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001156c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001156f:	83 c4 10             	add    esp,0x10
c0011572:	85 db                	test   ebx,ebx
c0011574:	75 57                	jne    c00115cd <SysSizeFromFilename(regs*)+0xf8>
c0011576:	6a 00                	push   0x0
c0011578:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001157d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011580:	05 0c 01 00 00       	add    eax,0x10c
c0011585:	50                   	push   eax
c0011586:	57                   	push   edi
c0011587:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c001158e:	53                   	push   ebx
c001158f:	e8 6c 68 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011594:	58                   	pop    eax
c0011595:	5a                   	pop    edx
c0011596:	8d 44 24 18          	lea    eax,[esp+0x18]
c001159a:	50                   	push   eax
c001159b:	53                   	push   ebx
c001159c:	e8 e6 62 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c00115a1:	83 c4 10             	add    esp,0x10
c00115a4:	ba 00 00 00 00       	mov    edx,0x0
c00115a9:	83 f8 01             	cmp    eax,0x1
c00115ac:	b8 00 00 00 00       	mov    eax,0x0
c00115b1:	74 2f                	je     c00115e2 <SysSizeFromFilename(regs*)+0x10d>
c00115b3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00115b8:	74 3b                	je     c00115f5 <SysSizeFromFilename(regs*)+0x120>
c00115ba:	85 f6                	test   esi,esi
c00115bc:	0f 84 5d ff ff ff    	je     c001151f <SysSizeFromFilename(regs*)+0x4a>
c00115c2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00115c8:	e9 52 ff ff ff       	jmp    c001151f <SysSizeFromFilename(regs*)+0x4a>
c00115cd:	81 c4 4c 02 00 00    	add    esp,0x24c
c00115d3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115d8:	5b                   	pop    ebx
c00115d9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115de:	5e                   	pop    esi
c00115df:	5f                   	pop    edi
c00115e0:	5d                   	pop    ebp
c00115e1:	c3                   	ret    
c00115e2:	85 f6                	test   esi,esi
c00115e4:	0f 84 35 ff ff ff    	je     c001151f <SysSizeFromFilename(regs*)+0x4a>
c00115ea:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00115f0:	e9 2a ff ff ff       	jmp    c001151f <SysSizeFromFilename(regs*)+0x4a>
c00115f5:	85 f6                	test   esi,esi
c00115f7:	0f 84 22 ff ff ff    	je     c001151f <SysSizeFromFilename(regs*)+0x4a>
c00115fd:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011603:	e9 17 ff ff ff       	jmp    c001151f <SysSizeFromFilename(regs*)+0x4a>

c0011608 <SysSizeFromFilenameNoSymlink(regs*)>:
c0011608:	55                   	push   ebp
c0011609:	57                   	push   edi
c001160a:	56                   	push   esi
c001160b:	53                   	push   ebx
c001160c:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011612:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011619:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001161c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001161f:	85 f6                	test   esi,esi
c0011621:	89 f8                	mov    eax,edi
c0011623:	74 09                	je     c001162e <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c0011625:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001162b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001162e:	83 f8 02             	cmp    eax,0x2
c0011631:	0f 86 c9 00 00 00    	jbe    c0011700 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c0011637:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001163c:	76 1f                	jbe    c001165d <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c001163e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011641:	31 d2                	xor    edx,edx
c0011643:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011649:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011650:	31 c0                	xor    eax,eax
c0011652:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011658:	5b                   	pop    ebx
c0011659:	5e                   	pop    esi
c001165a:	5f                   	pop    edi
c001165b:	5d                   	pop    ebp
c001165c:	c3                   	ret    
c001165d:	83 ec 0c             	sub    esp,0xc
c0011660:	68 14 01 00 00       	push   0x114
c0011665:	e8 06 e4 ff ff       	call   c000fa70 <malloc>
c001166a:	6a 00                	push   0x0
c001166c:	89 c5                	mov    ebp,eax
c001166e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011673:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011676:	50                   	push   eax
c0011677:	57                   	push   edi
c0011678:	55                   	push   ebp
c0011679:	e8 b0 69 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c001167e:	83 c4 20             	add    esp,0x20
c0011681:	85 ed                	test   ebp,ebp
c0011683:	74 7b                	je     c0011700 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c0011685:	83 ec 04             	sub    esp,0x4
c0011688:	8d 44 24 13          	lea    eax,[esp+0x13]
c001168c:	50                   	push   eax
c001168d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011690:	51                   	push   ecx
c0011691:	55                   	push   ebp
c0011692:	e8 b5 6d ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0011697:	89 c3                	mov    ebx,eax
c0011699:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001169c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001169f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116a2:	83 c4 10             	add    esp,0x10
c00116a5:	85 db                	test   ebx,ebx
c00116a7:	75 57                	jne    c0011700 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c00116a9:	6a 00                	push   0x0
c00116ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116b0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00116b3:	05 0c 01 00 00       	add    eax,0x10c
c00116b8:	50                   	push   eax
c00116b9:	57                   	push   edi
c00116ba:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00116c1:	53                   	push   ebx
c00116c2:	e8 39 67 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00116c7:	58                   	pop    eax
c00116c8:	5a                   	pop    edx
c00116c9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00116cd:	50                   	push   eax
c00116ce:	53                   	push   ebx
c00116cf:	e8 b3 61 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c00116d4:	83 c4 10             	add    esp,0x10
c00116d7:	ba 00 00 00 00       	mov    edx,0x0
c00116dc:	83 f8 01             	cmp    eax,0x1
c00116df:	b8 00 00 00 00       	mov    eax,0x0
c00116e4:	74 2f                	je     c0011715 <SysSizeFromFilenameNoSymlink(regs*)+0x10d>
c00116e6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00116eb:	74 3b                	je     c0011728 <SysSizeFromFilenameNoSymlink(regs*)+0x120>
c00116ed:	85 f6                	test   esi,esi
c00116ef:	0f 84 5d ff ff ff    	je     c0011652 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00116f5:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00116fb:	e9 52 ff ff ff       	jmp    c0011652 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011700:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011706:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001170b:	5b                   	pop    ebx
c001170c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011711:	5e                   	pop    esi
c0011712:	5f                   	pop    edi
c0011713:	5d                   	pop    ebp
c0011714:	c3                   	ret    
c0011715:	85 f6                	test   esi,esi
c0011717:	0f 84 35 ff ff ff    	je     c0011652 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001171d:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011723:	e9 2a ff ff ff       	jmp    c0011652 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011728:	85 f6                	test   esi,esi
c001172a:	0f 84 22 ff ff ff    	je     c0011652 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011730:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011736:	e9 17 ff ff ff       	jmp    c0011652 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c001173b <SysClose(regs*)>:
c001173b:	57                   	push   edi
c001173c:	56                   	push   esi
c001173d:	53                   	push   ebx
c001173e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011742:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011745:	83 f8 02             	cmp    eax,0x2
c0011748:	76 44                	jbe    c001178e <SysClose(regs*)+0x53>
c001174a:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011750:	31 f6                	xor    esi,esi
c0011752:	31 ff                	xor    edi,edi
c0011754:	83 fa 01             	cmp    edx,0x1
c0011757:	76 2d                	jbe    c0011786 <SysClose(regs*)+0x4b>
c0011759:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001175e:	77 2e                	ja     c001178e <SysClose(regs*)+0x53>
c0011760:	83 ec 0c             	sub    esp,0xc
c0011763:	50                   	push   eax
c0011764:	e8 a0 18 00 00       	call   c0013009 <KeGetFileFromDescriptor(int)>
c0011769:	83 c4 10             	add    esp,0x10
c001176c:	85 c0                	test   eax,eax
c001176e:	89 c3                	mov    ebx,eax
c0011770:	74 1c                	je     c001178e <SysClose(regs*)+0x53>
c0011772:	83 ec 0c             	sub    esp,0xc
c0011775:	50                   	push   eax
c0011776:	e8 2d 6a ff ff       	call   c00081a8 <File::close()>
c001177b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001177d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011780:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011783:	83 c4 10             	add    esp,0x10
c0011786:	5b                   	pop    ebx
c0011787:	89 f0                	mov    eax,esi
c0011789:	89 fa                	mov    edx,edi
c001178b:	5e                   	pop    esi
c001178c:	5f                   	pop    edi
c001178d:	c3                   	ret    
c001178e:	5b                   	pop    ebx
c001178f:	be ff ff ff ff       	mov    esi,0xffffffff
c0011794:	89 f0                	mov    eax,esi
c0011796:	bf ff ff ff ff       	mov    edi,0xffffffff
c001179b:	89 fa                	mov    edx,edi
c001179d:	5e                   	pop    esi
c001179e:	5f                   	pop    edi
c001179f:	c3                   	ret    

c00117a0 <SysOpenDir(regs*)>:
c00117a0:	56                   	push   esi
c00117a1:	53                   	push   ebx
c00117a2:	83 ec 04             	sub    esp,0x4
c00117a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117a9:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00117ac:	85 c9                	test   ecx,ecx
c00117ae:	74 5d                	je     c001180d <SysOpenDir(regs*)+0x6d>
c00117b0:	83 ec 0c             	sub    esp,0xc
c00117b3:	68 14 01 00 00       	push   0x114
c00117b8:	e8 b3 e2 ff ff       	call   c000fa70 <malloc>
c00117bd:	83 c4 0c             	add    esp,0xc
c00117c0:	89 c6                	mov    esi,eax
c00117c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117c7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00117ca:	50                   	push   eax
c00117cb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00117ce:	52                   	push   edx
c00117cf:	56                   	push   esi
c00117d0:	e8 37 6e ff ff       	call   c000860c <Directory::Directory(char const*, Process*)>
c00117d5:	83 c4 10             	add    esp,0x10
c00117d8:	85 f6                	test   esi,esi
c00117da:	74 31                	je     c001180d <SysOpenDir(regs*)+0x6d>
c00117dc:	83 ec 0c             	sub    esp,0xc
c00117df:	56                   	push   esi
c00117e0:	e8 ef 6e ff ff       	call   c00086d4 <Directory::open()>
c00117e5:	83 c4 10             	add    esp,0x10
c00117e8:	85 c0                	test   eax,eax
c00117ea:	75 21                	jne    c001180d <SysOpenDir(regs*)+0x6d>
c00117ec:	83 ec 0c             	sub    esp,0xc
c00117ef:	56                   	push   esi
c00117f0:	e8 17 15 00 00       	call   c0012d0c <UnixFile::getFileDescriptor()>
c00117f5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00117f8:	83 c4 10             	add    esp,0x10
c00117fb:	89 02                	mov    DWORD PTR [edx],eax
c00117fd:	c1 f8 1f             	sar    eax,0x1f
c0011800:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011803:	83 c4 04             	add    esp,0x4
c0011806:	31 c0                	xor    eax,eax
c0011808:	5b                   	pop    ebx
c0011809:	31 d2                	xor    edx,edx
c001180b:	5e                   	pop    esi
c001180c:	c3                   	ret    
c001180d:	83 c4 04             	add    esp,0x4
c0011810:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011815:	5b                   	pop    ebx
c0011816:	ba ff ff ff ff       	mov    edx,0xffffffff
c001181b:	5e                   	pop    esi
c001181c:	c3                   	ret    

c001181d <SysMakeDir(regs*)>:
c001181d:	56                   	push   esi
c001181e:	53                   	push   ebx
c001181f:	83 ec 10             	sub    esp,0x10
c0011822:	68 14 01 00 00       	push   0x114
c0011827:	e8 44 e2 ff ff       	call   c000fa70 <malloc>
c001182c:	83 c4 0c             	add    esp,0xc
c001182f:	89 c3                	mov    ebx,eax
c0011831:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011836:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011839:	50                   	push   eax
c001183a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001183e:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011841:	52                   	push   edx
c0011842:	53                   	push   ebx
c0011843:	e8 c4 6d ff ff       	call   c000860c <Directory::Directory(char const*, Process*)>
c0011848:	83 c4 10             	add    esp,0x10
c001184b:	85 db                	test   ebx,ebx
c001184d:	74 2c                	je     c001187b <SysMakeDir(regs*)+0x5e>
c001184f:	83 ec 0c             	sub    esp,0xc
c0011852:	53                   	push   ebx
c0011853:	e8 5c 70 ff ff       	call   c00088b4 <Directory::create()>
c0011858:	89 c6                	mov    esi,eax
c001185a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001185c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001185f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011862:	83 c4 10             	add    esp,0x10
c0011865:	31 c0                	xor    eax,eax
c0011867:	85 f6                	test   esi,esi
c0011869:	0f 95 c0             	setne  al
c001186c:	31 d2                	xor    edx,edx
c001186e:	f7 d8                	neg    eax
c0011870:	83 d2 00             	adc    edx,0x0
c0011873:	83 c4 04             	add    esp,0x4
c0011876:	5b                   	pop    ebx
c0011877:	f7 da                	neg    edx
c0011879:	5e                   	pop    esi
c001187a:	c3                   	ret    
c001187b:	83 c4 04             	add    esp,0x4
c001187e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011883:	5b                   	pop    ebx
c0011884:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011889:	5e                   	pop    esi
c001188a:	c3                   	ret    

c001188b <SysCloseDir(regs*)>:
c001188b:	53                   	push   ebx
c001188c:	83 ec 08             	sub    esp,0x8
c001188f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011893:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011896:	8d 50 fd             	lea    edx,[eax-0x3]
c0011899:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001189f:	77 2f                	ja     c00118d0 <SysCloseDir(regs*)+0x45>
c00118a1:	83 ec 0c             	sub    esp,0xc
c00118a4:	50                   	push   eax
c00118a5:	e8 5f 17 00 00       	call   c0013009 <KeGetFileFromDescriptor(int)>
c00118aa:	83 c4 10             	add    esp,0x10
c00118ad:	85 c0                	test   eax,eax
c00118af:	89 c3                	mov    ebx,eax
c00118b1:	74 1d                	je     c00118d0 <SysCloseDir(regs*)+0x45>
c00118b3:	83 ec 0c             	sub    esp,0xc
c00118b6:	50                   	push   eax
c00118b7:	e8 74 6e ff ff       	call   c0008730 <Directory::close()>
c00118bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118c1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118c4:	83 c4 10             	add    esp,0x10
c00118c7:	31 c0                	xor    eax,eax
c00118c9:	83 c4 08             	add    esp,0x8
c00118cc:	31 d2                	xor    edx,edx
c00118ce:	5b                   	pop    ebx
c00118cf:	c3                   	ret    
c00118d0:	83 c4 08             	add    esp,0x8
c00118d3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118d8:	5b                   	pop    ebx
c00118d9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118de:	c3                   	ret    

c00118df <SysWait(regs*)>:
c00118df:	83 ec 10             	sub    esp,0x10
c00118e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00118e6:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00118e9:	52                   	push   edx
c00118ea:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00118ed:	51                   	push   ecx
c00118ee:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00118f1:	50                   	push   eax
c00118f2:	e8 dd 51 00 00       	call   c0016ad4 <waitTask(int, int*, int)>
c00118f7:	83 c4 1c             	add    esp,0x1c
c00118fa:	89 c2                	mov    edx,eax
c00118fc:	c1 fa 1f             	sar    edx,0x1f
c00118ff:	c3                   	ret    

c0011900 <SysNotImpl(regs*)>:
c0011900:	83 ec 18             	sub    esp,0x18
c0011903:	68 3c 3d 02 c0       	push   0xc0023d3c
c0011908:	e8 a9 e4 ff ff       	call   c000fdb6 <KePanic(char const*)>
c001190d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011912:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011917:	83 c4 1c             	add    esp,0x1c
c001191a:	c3                   	ret    

c001191b <SysPanic(regs*)>:
c001191b:	83 ec 18             	sub    esp,0x18
c001191e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011922:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011925:	50                   	push   eax
c0011926:	e8 8b e4 ff ff       	call   c000fdb6 <KePanic(char const*)>
c001192b:	b8 01 00 00 00       	mov    eax,0x1
c0011930:	31 d2                	xor    edx,edx
c0011932:	83 c4 1c             	add    esp,0x1c
c0011935:	c3                   	ret    

c0011936 <SysRmdir(regs*)>:
c0011936:	56                   	push   esi
c0011937:	53                   	push   ebx
c0011938:	83 ec 10             	sub    esp,0x10
c001193b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001193f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011942:	68 14 01 00 00       	push   0x114
c0011947:	e8 24 e1 ff ff       	call   c000fa70 <malloc>
c001194c:	6a 00                	push   0x0
c001194e:	89 c3                	mov    ebx,eax
c0011950:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011955:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011958:	50                   	push   eax
c0011959:	56                   	push   esi
c001195a:	53                   	push   ebx
c001195b:	e8 ce 66 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0011960:	83 c4 14             	add    esp,0x14
c0011963:	53                   	push   ebx
c0011964:	e8 af 69 ff ff       	call   c0008318 <File::unlink()>
c0011969:	83 c4 10             	add    esp,0x10
c001196c:	85 db                	test   ebx,ebx
c001196e:	89 c6                	mov    esi,eax
c0011970:	74 0c                	je     c001197e <SysRmdir(regs*)+0x48>
c0011972:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011974:	83 ec 0c             	sub    esp,0xc
c0011977:	53                   	push   ebx
c0011978:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001197b:	83 c4 10             	add    esp,0x10
c001197e:	31 c0                	xor    eax,eax
c0011980:	85 f6                	test   esi,esi
c0011982:	0f 95 c0             	setne  al
c0011985:	31 d2                	xor    edx,edx
c0011987:	f7 d8                	neg    eax
c0011989:	83 d2 00             	adc    edx,0x0
c001198c:	83 c4 04             	add    esp,0x4
c001198f:	5b                   	pop    ebx
c0011990:	f7 da                	neg    edx
c0011992:	5e                   	pop    esi
c0011993:	c3                   	ret    

c0011994 <SysUnlink(regs*)>:
c0011994:	56                   	push   esi
c0011995:	53                   	push   ebx
c0011996:	83 ec 10             	sub    esp,0x10
c0011999:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001199d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00119a0:	68 14 01 00 00       	push   0x114
c00119a5:	e8 c6 e0 ff ff       	call   c000fa70 <malloc>
c00119aa:	6a 00                	push   0x0
c00119ac:	89 c3                	mov    ebx,eax
c00119ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119b3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119b6:	50                   	push   eax
c00119b7:	56                   	push   esi
c00119b8:	53                   	push   ebx
c00119b9:	e8 70 66 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c00119be:	83 c4 14             	add    esp,0x14
c00119c1:	53                   	push   ebx
c00119c2:	e8 51 69 ff ff       	call   c0008318 <File::unlink()>
c00119c7:	83 c4 10             	add    esp,0x10
c00119ca:	85 db                	test   ebx,ebx
c00119cc:	89 c6                	mov    esi,eax
c00119ce:	74 0c                	je     c00119dc <SysUnlink(regs*)+0x48>
c00119d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00119d2:	83 ec 0c             	sub    esp,0xc
c00119d5:	53                   	push   ebx
c00119d6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00119d9:	83 c4 10             	add    esp,0x10
c00119dc:	31 c0                	xor    eax,eax
c00119de:	85 f6                	test   esi,esi
c00119e0:	0f 95 c0             	setne  al
c00119e3:	31 d2                	xor    edx,edx
c00119e5:	f7 d8                	neg    eax
c00119e7:	83 d2 00             	adc    edx,0x0
c00119ea:	83 c4 04             	add    esp,0x4
c00119ed:	5b                   	pop    ebx
c00119ee:	f7 da                	neg    edx
c00119f0:	5e                   	pop    esi
c00119f1:	c3                   	ret    

c00119f2 <SysGetArgv(regs*)>:
c00119f2:	83 ec 0c             	sub    esp,0xc
c00119f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00119f9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00119fc:	85 c0                	test   eax,eax
c00119fe:	78 2c                	js     c0011a2c <SysGetArgv(regs*)+0x3a>
c0011a00:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011a06:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011a09:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011a0f:	7d 1b                	jge    c0011a2c <SysGetArgv(regs*)+0x3a>
c0011a11:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011a18:	85 c0                	test   eax,eax
c0011a1a:	74 18                	je     c0011a34 <SysGetArgv(regs*)+0x42>
c0011a1c:	83 ec 08             	sub    esp,0x8
c0011a1f:	50                   	push   eax
c0011a20:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011a23:	50                   	push   eax
c0011a24:	e8 27 ec fe ff       	call   c0000650 <strcpy>
c0011a29:	83 c4 10             	add    esp,0x10
c0011a2c:	31 c0                	xor    eax,eax
c0011a2e:	31 d2                	xor    edx,edx
c0011a30:	83 c4 0c             	add    esp,0xc
c0011a33:	c3                   	ret    
c0011a34:	b8 01 00 00 00       	mov    eax,0x1
c0011a39:	31 d2                	xor    edx,edx
c0011a3b:	83 c4 0c             	add    esp,0xc
c0011a3e:	c3                   	ret    

c0011a3f <SysUSleep(regs*)>:
c0011a3f:	83 ec 1c             	sub    esp,0x1c
c0011a42:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011a46:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011a49:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011a4c:	6a 00                	push   0x0
c0011a4e:	6a 64                	push   0x64
c0011a50:	52                   	push   edx
c0011a51:	50                   	push   eax
c0011a52:	e8 ed f8 00 00       	call   c0021344 <__udivdi3>
c0011a57:	83 c4 14             	add    esp,0x14
c0011a5a:	50                   	push   eax
c0011a5b:	e8 60 51 00 00       	call   c0016bc0 <milliTenthSleep(unsigned int)>
c0011a60:	31 c0                	xor    eax,eax
c0011a62:	31 d2                	xor    edx,edx
c0011a64:	83 c4 1c             	add    esp,0x1c
c0011a67:	c3                   	ret    

c0011a68 <SysSpawn(regs*)>:
c0011a68:	56                   	push   esi
c0011a69:	53                   	push   ebx
c0011a6a:	83 ec 04             	sub    esp,0x4
c0011a6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a71:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011a74:	85 f6                	test   esi,esi
c0011a76:	75 0a                	jne    c0011a82 <SysSpawn(regs*)+0x1a>
c0011a78:	83 c4 04             	add    esp,0x4
c0011a7b:	31 c0                	xor    eax,eax
c0011a7d:	5b                   	pop    ebx
c0011a7e:	31 d2                	xor    edx,edx
c0011a80:	5e                   	pop    esi
c0011a81:	c3                   	ret    
c0011a82:	83 ec 0c             	sub    esp,0xc
c0011a85:	68 24 07 00 00       	push   0x724
c0011a8a:	e8 e1 df ff ff       	call   c000fa70 <malloc>
c0011a8f:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011a92:	83 c4 10             	add    esp,0x10
c0011a95:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011a98:	89 c6                	mov    esi,eax
c0011a9a:	31 c0                	xor    eax,eax
c0011a9c:	85 c9                	test   ecx,ecx
c0011a9e:	74 08                	je     c0011aa8 <SysSpawn(regs*)+0x40>
c0011aa0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011aa5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011aa8:	52                   	push   edx
c0011aa9:	50                   	push   eax
c0011aaa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011aad:	50                   	push   eax
c0011aae:	56                   	push   esi
c0011aaf:	e8 64 48 00 00       	call   c0016318 <Process::Process(char const*, Process*, char**)>
c0011ab4:	83 c4 10             	add    esp,0x10
c0011ab7:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011abe:	75 b8                	jne    c0011a78 <SysSpawn(regs*)+0x10>
c0011ac0:	83 ec 0c             	sub    esp,0xc
c0011ac3:	56                   	push   esi
c0011ac4:	e8 cb 4d 00 00       	call   c0016894 <Process::createUserThread()>
c0011ac9:	8b 06                	mov    eax,DWORD PTR [esi]
c0011acb:	83 c4 10             	add    esp,0x10
c0011ace:	83 c4 04             	add    esp,0x4
c0011ad1:	5b                   	pop    ebx
c0011ad2:	89 c2                	mov    edx,eax
c0011ad4:	c1 fa 1f             	sar    edx,0x1f
c0011ad7:	5e                   	pop    esi
c0011ad8:	c3                   	ret    

c0011ad9 <SysGetEnv(regs*)>:
c0011ad9:	57                   	push   edi
c0011ada:	56                   	push   esi
c0011adb:	53                   	push   ebx
c0011adc:	83 ec 1c             	sub    esp,0x1c
c0011adf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ae4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011ae8:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0011aeb:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011aee:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011af1:	51                   	push   ecx
c0011af2:	e8 b0 cc ff ff       	call   c000e7a7 <KeGetProcessTotalEnvCount(Process*)>
c0011af7:	83 c4 10             	add    esp,0x10
c0011afa:	39 c7                	cmp    edi,eax
c0011afc:	7c 12                	jl     c0011b10 <SysGetEnv(regs*)+0x37>
c0011afe:	31 c0                	xor    eax,eax
c0011b00:	31 d2                	xor    edx,edx
c0011b02:	85 f6                	test   esi,esi
c0011b04:	74 03                	je     c0011b09 <SysGetEnv(regs*)+0x30>
c0011b06:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011b09:	83 c4 10             	add    esp,0x10
c0011b0c:	5b                   	pop    ebx
c0011b0d:	5e                   	pop    esi
c0011b0e:	5f                   	pop    edi
c0011b0f:	c3                   	ret    
c0011b10:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011b14:	83 ec 04             	sub    esp,0x4
c0011b17:	57                   	push   edi
c0011b18:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011b1e:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0011b21:	57                   	push   edi
c0011b22:	50                   	push   eax
c0011b23:	e8 9f cc ff ff       	call   c000e7c7 <KeGetProcessEnvPair(Process*, int)>
c0011b28:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011b2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011b2f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011b33:	83 c4 0c             	add    esp,0xc
c0011b36:	85 d2                	test   edx,edx
c0011b38:	75 23                	jne    c0011b5d <SysGetEnv(regs*)+0x84>
c0011b3a:	83 ec 0c             	sub    esp,0xc
c0011b3d:	50                   	push   eax
c0011b3e:	e8 3d ea fe ff       	call   c0000580 <strlen>
c0011b43:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011b46:	89 c3                	mov    ebx,eax
c0011b48:	e8 33 ea fe ff       	call   c0000580 <strlen>
c0011b4d:	83 c4 10             	add    esp,0x10
c0011b50:	31 d2                	xor    edx,edx
c0011b52:	83 c4 10             	add    esp,0x10
c0011b55:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011b59:	5b                   	pop    ebx
c0011b5a:	5e                   	pop    esi
c0011b5b:	5f                   	pop    edi
c0011b5c:	c3                   	ret    
c0011b5d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011b60:	83 ec 08             	sub    esp,0x8
c0011b63:	50                   	push   eax
c0011b64:	56                   	push   esi
c0011b65:	e8 e6 ea fe ff       	call   c0000650 <strcpy>
c0011b6a:	58                   	pop    eax
c0011b6b:	5a                   	pop    edx
c0011b6c:	68 56 3d 02 c0       	push   0xc0023d56
c0011b71:	56                   	push   esi
c0011b72:	e8 f9 ec fe ff       	call   c0000870 <strcat>
c0011b77:	59                   	pop    ecx
c0011b78:	5b                   	pop    ebx
c0011b79:	57                   	push   edi
c0011b7a:	56                   	push   esi
c0011b7b:	e8 f0 ec fe ff       	call   c0000870 <strcat>
c0011b80:	83 c4 10             	add    esp,0x10
c0011b83:	31 c0                	xor    eax,eax
c0011b85:	83 c4 10             	add    esp,0x10
c0011b88:	31 d2                	xor    edx,edx
c0011b8a:	5b                   	pop    ebx
c0011b8b:	5e                   	pop    esi
c0011b8c:	5f                   	pop    edi
c0011b8d:	c3                   	ret    

c0011b8e <SysSetFatAttrib(regs*)>:
c0011b8e:	57                   	push   edi
c0011b8f:	56                   	push   esi
c0011b90:	53                   	push   ebx
c0011b91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011b95:	83 ec 0c             	sub    esp,0xc
c0011b98:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011b9b:	68 14 01 00 00       	push   0x114
c0011ba0:	e8 cb de ff ff       	call   c000fa70 <malloc>
c0011ba5:	83 c4 0c             	add    esp,0xc
c0011ba8:	89 c3                	mov    ebx,eax
c0011baa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011baf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bb2:	50                   	push   eax
c0011bb3:	57                   	push   edi
c0011bb4:	53                   	push   ebx
c0011bb5:	e8 72 65 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0011bba:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011bbd:	83 c4 0c             	add    esp,0xc
c0011bc0:	0f b6 d4             	movzx  edx,ah
c0011bc3:	0f b6 c0             	movzx  eax,al
c0011bc6:	52                   	push   edx
c0011bc7:	50                   	push   eax
c0011bc8:	53                   	push   ebx
c0011bc9:	e8 e4 67 ff ff       	call   c00083b2 <File::chfatattr(unsigned char, unsigned char)>
c0011bce:	83 c4 10             	add    esp,0x10
c0011bd1:	85 db                	test   ebx,ebx
c0011bd3:	89 c6                	mov    esi,eax
c0011bd5:	74 0c                	je     c0011be3 <SysSetFatAttrib(regs*)+0x55>
c0011bd7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011bd9:	83 ec 0c             	sub    esp,0xc
c0011bdc:	53                   	push   ebx
c0011bdd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011be0:	83 c4 10             	add    esp,0x10
c0011be3:	5b                   	pop    ebx
c0011be4:	31 c0                	xor    eax,eax
c0011be6:	85 f6                	test   esi,esi
c0011be8:	0f 95 c0             	setne  al
c0011beb:	31 d2                	xor    edx,edx
c0011bed:	5e                   	pop    esi
c0011bee:	f7 d8                	neg    eax
c0011bf0:	83 d2 00             	adc    edx,0x0
c0011bf3:	f7 da                	neg    edx
c0011bf5:	5f                   	pop    edi
c0011bf6:	c3                   	ret    

c0011bf7 <SysShutdown(regs*)>:
c0011bf7:	83 ec 1c             	sub    esp,0x1c
c0011bfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011bfe:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011c01:	85 c9                	test   ecx,ecx
c0011c03:	74 18                	je     c0011c1d <SysShutdown(regs*)+0x26>
c0011c05:	83 f9 01             	cmp    ecx,0x1
c0011c08:	74 26                	je     c0011c30 <SysShutdown(regs*)+0x39>
c0011c0a:	83 f9 02             	cmp    ecx,0x2
c0011c0d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c12:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c17:	74 24                	je     c0011c3d <SysShutdown(regs*)+0x46>
c0011c19:	83 c4 1c             	add    esp,0x1c
c0011c1c:	c3                   	ret    
c0011c1d:	e8 fe c5 ff ff       	call   c000e220 <KeShutdown()>
c0011c22:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c27:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c2c:	83 c4 1c             	add    esp,0x1c
c0011c2f:	c3                   	ret    
c0011c30:	e8 0f c6 ff ff       	call   c000e244 <KeSleep()>
c0011c35:	31 c0                	xor    eax,eax
c0011c37:	31 d2                	xor    edx,edx
c0011c39:	83 c4 1c             	add    esp,0x1c
c0011c3c:	c3                   	ret    
c0011c3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011c41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011c45:	e8 06 c6 ff ff       	call   c000e250 <KeRestart()>
c0011c4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c4e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c52:	eb c5                	jmp    c0011c19 <SysShutdown(regs*)+0x22>

c0011c54 <SysPipe(regs*)>:
c0011c54:	57                   	push   edi
c0011c55:	56                   	push   esi
c0011c56:	53                   	push   ebx
c0011c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c5b:	83 ec 0c             	sub    esp,0xc
c0011c5e:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011c61:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011c64:	6a 20                	push   0x20
c0011c66:	e8 05 de ff ff       	call   c000fa70 <malloc>
c0011c6b:	89 c3                	mov    ebx,eax
c0011c6d:	58                   	pop    eax
c0011c6e:	5a                   	pop    edx
c0011c6f:	68 00 50 00 00       	push   0x5000
c0011c74:	53                   	push   ebx
c0011c75:	e8 b8 e9 ff ff       	call   c0010632 <Pipe::Pipe(int)>
c0011c7a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c7d:	e8 8a 10 00 00       	call   c0012d0c <UnixFile::getFileDescriptor()>
c0011c82:	89 07                	mov    DWORD PTR [edi],eax
c0011c84:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c87:	e8 80 10 00 00       	call   c0012d0c <UnixFile::getFileDescriptor()>
c0011c8c:	83 c4 10             	add    esp,0x10
c0011c8f:	31 d2                	xor    edx,edx
c0011c91:	89 06                	mov    DWORD PTR [esi],eax
c0011c93:	31 c0                	xor    eax,eax
c0011c95:	5b                   	pop    ebx
c0011c96:	5e                   	pop    esi
c0011c97:	5f                   	pop    edi
c0011c98:	c3                   	ret    

c0011c99 <SysGetUnixTime(regs*)>:
c0011c99:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0011c9e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011ca4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ca8:	e9 2f 74 ff ff       	jmp    c00090dc <Clock::timeInSecondsLocal()>

c0011cad <string_ends_with(char const*, char const*)>:
c0011cad:	57                   	push   edi
c0011cae:	56                   	push   esi
c0011caf:	53                   	push   ebx
c0011cb0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011cb4:	83 ec 0c             	sub    esp,0xc
c0011cb7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011cbb:	53                   	push   ebx
c0011cbc:	e8 bf e8 fe ff       	call   c0000580 <strlen>
c0011cc1:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011cc4:	89 c6                	mov    esi,eax
c0011cc6:	e8 b5 e8 fe ff       	call   c0000580 <strlen>
c0011ccb:	83 c4 10             	add    esp,0x10
c0011cce:	31 d2                	xor    edx,edx
c0011cd0:	39 c6                	cmp    esi,eax
c0011cd2:	7d 06                	jge    c0011cda <string_ends_with(char const*, char const*)+0x2d>
c0011cd4:	5b                   	pop    ebx
c0011cd5:	89 d0                	mov    eax,edx
c0011cd7:	5e                   	pop    esi
c0011cd8:	5f                   	pop    edi
c0011cd9:	c3                   	ret    
c0011cda:	83 ec 08             	sub    esp,0x8
c0011cdd:	29 c6                	sub    esi,eax
c0011cdf:	57                   	push   edi
c0011ce0:	01 f3                	add    ebx,esi
c0011ce2:	53                   	push   ebx
c0011ce3:	e8 98 ea fe ff       	call   c0000780 <strcmp>
c0011ce8:	83 c4 10             	add    esp,0x10
c0011ceb:	31 d2                	xor    edx,edx
c0011ced:	5b                   	pop    ebx
c0011cee:	5e                   	pop    esi
c0011cef:	85 c0                	test   eax,eax
c0011cf1:	5f                   	pop    edi
c0011cf2:	0f 94 c2             	sete   dl
c0011cf5:	89 d0                	mov    eax,edx
c0011cf7:	c3                   	ret    

c0011cf8 <SysOpen(regs*)>:
c0011cf8:	56                   	push   esi
c0011cf9:	53                   	push   ebx
c0011cfa:	81 ec 04 01 00 00    	sub    esp,0x104
c0011d00:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011d07:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d0a:	85 c0                	test   eax,eax
c0011d0c:	0f 84 c4 01 00 00    	je     c0011ed6 <SysOpen(regs*)+0x1de>
c0011d12:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d15:	85 c0                	test   eax,eax
c0011d17:	0f 84 b9 01 00 00    	je     c0011ed6 <SysOpen(regs*)+0x1de>
c0011d1d:	6a 00                	push   0x0
c0011d1f:	68 58 3d 02 c0       	push   0xc0023d58
c0011d24:	50                   	push   eax
c0011d25:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011d29:	56                   	push   esi
c0011d2a:	e8 d1 60 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011d2f:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d32:	e8 49 e8 fe ff       	call   c0000580 <strlen>
c0011d37:	83 c4 10             	add    esp,0x10
c0011d3a:	83 e8 01             	sub    eax,0x1
c0011d3d:	74 29                	je     c0011d68 <SysOpen(regs*)+0x70>
c0011d3f:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011d43:	83 fa 2e             	cmp    edx,0x2e
c0011d46:	74 1c                	je     c0011d64 <SysOpen(regs*)+0x6c>
c0011d48:	83 fa 3a             	cmp    edx,0x3a
c0011d4b:	74 17                	je     c0011d64 <SysOpen(regs*)+0x6c>
c0011d4d:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011d51:	83 e8 01             	sub    eax,0x1
c0011d54:	74 12                	je     c0011d68 <SysOpen(regs*)+0x70>
c0011d56:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011d5a:	83 fa 3a             	cmp    edx,0x3a
c0011d5d:	74 05                	je     c0011d64 <SysOpen(regs*)+0x6c>
c0011d5f:	83 fa 2e             	cmp    edx,0x2e
c0011d62:	75 e9                	jne    c0011d4d <SysOpen(regs*)+0x55>
c0011d64:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011d68:	83 ec 08             	sub    esp,0x8
c0011d6b:	68 5c 3d 02 c0       	push   0xc0023d5c
c0011d70:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d73:	50                   	push   eax
c0011d74:	e8 34 ff ff ff       	call   c0011cad <string_ends_with(char const*, char const*)>
c0011d79:	83 c4 10             	add    esp,0x10
c0011d7c:	85 c0                	test   eax,eax
c0011d7e:	74 1d                	je     c0011d9d <SysOpen(regs*)+0xa5>
c0011d80:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d83:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011d89:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d90:	81 c4 04 01 00 00    	add    esp,0x104
c0011d96:	31 c0                	xor    eax,eax
c0011d98:	5b                   	pop    ebx
c0011d99:	31 d2                	xor    edx,edx
c0011d9b:	5e                   	pop    esi
c0011d9c:	c3                   	ret    
c0011d9d:	83 ec 08             	sub    esp,0x8
c0011da0:	68 61 3d 02 c0       	push   0xc0023d61
c0011da5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011da8:	50                   	push   eax
c0011da9:	e8 ff fe ff ff       	call   c0011cad <string_ends_with(char const*, char const*)>
c0011dae:	83 c4 10             	add    esp,0x10
c0011db1:	85 c0                	test   eax,eax
c0011db3:	75 cb                	jne    c0011d80 <SysOpen(regs*)+0x88>
c0011db5:	83 ec 08             	sub    esp,0x8
c0011db8:	68 5d 3d 02 c0       	push   0xc0023d5d
c0011dbd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011dc0:	50                   	push   eax
c0011dc1:	e8 ba e9 fe ff       	call   c0000780 <strcmp>
c0011dc6:	83 c4 10             	add    esp,0x10
c0011dc9:	85 c0                	test   eax,eax
c0011dcb:	74 b3                	je     c0011d80 <SysOpen(regs*)+0x88>
c0011dcd:	83 ec 08             	sub    esp,0x8
c0011dd0:	68 5c 3d 02 c0       	push   0xc0023d5c
c0011dd5:	56                   	push   esi
c0011dd6:	e8 d2 fe ff ff       	call   c0011cad <string_ends_with(char const*, char const*)>
c0011ddb:	83 c4 10             	add    esp,0x10
c0011dde:	85 c0                	test   eax,eax
c0011de0:	75 9e                	jne    c0011d80 <SysOpen(regs*)+0x88>
c0011de2:	83 ec 08             	sub    esp,0x8
c0011de5:	68 66 3d 02 c0       	push   0xc0023d66
c0011dea:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ded:	50                   	push   eax
c0011dee:	e8 ba fe ff ff       	call   c0011cad <string_ends_with(char const*, char const*)>
c0011df3:	83 c4 10             	add    esp,0x10
c0011df6:	85 c0                	test   eax,eax
c0011df8:	0f 85 eb 00 00 00    	jne    c0011ee9 <SysOpen(regs*)+0x1f1>
c0011dfe:	83 ec 08             	sub    esp,0x8
c0011e01:	68 6b 3d 02 c0       	push   0xc0023d6b
c0011e06:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e09:	50                   	push   eax
c0011e0a:	e8 9e fe ff ff       	call   c0011cad <string_ends_with(char const*, char const*)>
c0011e0f:	83 c4 10             	add    esp,0x10
c0011e12:	85 c0                	test   eax,eax
c0011e14:	0f 85 cf 00 00 00    	jne    c0011ee9 <SysOpen(regs*)+0x1f1>
c0011e1a:	83 ec 08             	sub    esp,0x8
c0011e1d:	68 67 3d 02 c0       	push   0xc0023d67
c0011e22:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011e25:	51                   	push   ecx
c0011e26:	e8 55 e9 fe ff       	call   c0000780 <strcmp>
c0011e2b:	83 c4 10             	add    esp,0x10
c0011e2e:	85 c0                	test   eax,eax
c0011e30:	0f 84 b3 00 00 00    	je     c0011ee9 <SysOpen(regs*)+0x1f1>
c0011e36:	83 ec 08             	sub    esp,0x8
c0011e39:	68 66 3d 02 c0       	push   0xc0023d66
c0011e3e:	56                   	push   esi
c0011e3f:	e8 69 fe ff ff       	call   c0011cad <string_ends_with(char const*, char const*)>
c0011e44:	83 c4 10             	add    esp,0x10
c0011e47:	85 c0                	test   eax,eax
c0011e49:	0f 85 9a 00 00 00    	jne    c0011ee9 <SysOpen(regs*)+0x1f1>
c0011e4f:	83 ec 0c             	sub    esp,0xc
c0011e52:	68 14 01 00 00       	push   0x114
c0011e57:	e8 14 dc ff ff       	call   c000fa70 <malloc>
c0011e5c:	83 c4 0c             	add    esp,0xc
c0011e5f:	89 c6                	mov    esi,eax
c0011e61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e66:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e69:	50                   	push   eax
c0011e6a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011e6d:	52                   	push   edx
c0011e6e:	56                   	push   esi
c0011e6f:	e8 b8 62 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0011e74:	83 c4 10             	add    esp,0x10
c0011e77:	85 f6                	test   esi,esi
c0011e79:	74 5b                	je     c0011ed6 <SysOpen(regs*)+0x1de>
c0011e7b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011e7e:	0f b6 c2             	movzx  eax,dl
c0011e81:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011e84:	89 d0                	mov    eax,edx
c0011e86:	83 e0 01             	and    eax,0x1
c0011e89:	f6 c2 02             	test   dl,0x2
c0011e8c:	74 03                	je     c0011e91 <SysOpen(regs*)+0x199>
c0011e8e:	83 c8 02             	or     eax,0x2
c0011e91:	f6 c2 04             	test   dl,0x4
c0011e94:	74 03                	je     c0011e99 <SysOpen(regs*)+0x1a1>
c0011e96:	83 c8 04             	or     eax,0x4
c0011e99:	f6 c2 08             	test   dl,0x8
c0011e9c:	74 03                	je     c0011ea1 <SysOpen(regs*)+0x1a9>
c0011e9e:	83 c8 0a             	or     eax,0xa
c0011ea1:	80 e2 10             	and    dl,0x10
c0011ea4:	74 03                	je     c0011ea9 <SysOpen(regs*)+0x1b1>
c0011ea6:	83 c8 12             	or     eax,0x12
c0011ea9:	83 ec 08             	sub    esp,0x8
c0011eac:	50                   	push   eax
c0011ead:	56                   	push   esi
c0011eae:	e8 97 62 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0011eb3:	83 c4 10             	add    esp,0x10
c0011eb6:	85 c0                	test   eax,eax
c0011eb8:	75 1c                	jne    c0011ed6 <SysOpen(regs*)+0x1de>
c0011eba:	83 ec 0c             	sub    esp,0xc
c0011ebd:	56                   	push   esi
c0011ebe:	e8 49 0e 00 00       	call   c0012d0c <UnixFile::getFileDescriptor()>
c0011ec3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011ec6:	83 c4 10             	add    esp,0x10
c0011ec9:	89 02                	mov    DWORD PTR [edx],eax
c0011ecb:	c1 f8 1f             	sar    eax,0x1f
c0011ece:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011ed1:	e9 ba fe ff ff       	jmp    c0011d90 <SysOpen(regs*)+0x98>
c0011ed6:	81 c4 04 01 00 00    	add    esp,0x104
c0011edc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ee1:	5b                   	pop    ebx
c0011ee2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ee7:	5e                   	pop    esi
c0011ee8:	c3                   	ret    
c0011ee9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011eec:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011ef2:	e9 92 fe ff ff       	jmp    c0011d89 <SysOpen(regs*)+0x91>

c0011ef7 <KeSystemCall(regs*, void*)>:
c0011ef7:	53                   	push   ebx
c0011ef8:	83 ec 08             	sub    esp,0x8
c0011efb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011eff:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011f02:	83 f8 40             	cmp    eax,0x40
c0011f05:	77 16                	ja     c0011f1d <KeSystemCall(regs*, void*)+0x26>
c0011f07:	8b 14 85 c0 5f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda040]
c0011f0e:	85 d2                	test   edx,edx
c0011f10:	74 0b                	je     c0011f1d <KeSystemCall(regs*, void*)+0x26>
c0011f12:	83 ec 0c             	sub    esp,0xc
c0011f15:	53                   	push   ebx
c0011f16:	ff d2                	call   edx
c0011f18:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011f1b:	eb 0d                	jmp    c0011f2a <KeSystemCall(regs*, void*)+0x33>
c0011f1d:	52                   	push   edx
c0011f1e:	52                   	push   edx
c0011f1f:	50                   	push   eax
c0011f20:	68 70 3d 02 c0       	push   0xc0023d70
c0011f25:	e8 24 50 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011f2a:	83 c4 10             	add    esp,0x10
c0011f2d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011f32:	83 c4 08             	add    esp,0x8
c0011f35:	31 d2                	xor    edx,edx
c0011f37:	5b                   	pop    ebx
c0011f38:	c3                   	ret    
c0011f39:	90                   	nop

c0011f3a <VgaText::isAtty()>:
c0011f3a:	b0 01                	mov    al,0x1
c0011f3c:	c3                   	ret    
c0011f3d:	90                   	nop

c0011f3e <VgaText::~VgaText()>:
c0011f3e:	83 ec 0c             	sub    esp,0xc
c0011f41:	ba ec 3d 02 c0       	mov    edx,0xc0023dec
c0011f46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f4a:	89 10                	mov    DWORD PTR [eax],edx
c0011f4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f50:	83 ec 0c             	sub    esp,0xc
c0011f53:	50                   	push   eax
c0011f54:	e8 a1 0f 00 00       	call   c0012efa <UnixFile::~UnixFile()>
c0011f59:	83 c4 10             	add    esp,0x10
c0011f5c:	90                   	nop
c0011f5d:	83 c4 0c             	add    esp,0xc
c0011f60:	c3                   	ret    
c0011f61:	90                   	nop

c0011f62 <VgaText::~VgaText()>:
c0011f62:	83 ec 0c             	sub    esp,0xc
c0011f65:	83 ec 0c             	sub    esp,0xc
c0011f68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f6c:	e8 cd ff ff ff       	call   c0011f3e <VgaText::~VgaText()>
c0011f71:	83 c4 10             	add    esp,0x10
c0011f74:	83 ec 08             	sub    esp,0x8
c0011f77:	68 84 01 00 00       	push   0x184
c0011f7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f80:	e8 62 b2 ff ff       	call   c000d1e7 <operator delete(void*, unsigned long)>
c0011f85:	83 c4 10             	add    esp,0x10
c0011f88:	83 c4 0c             	add    esp,0xc
c0011f8b:	c3                   	ret    

c0011f8c <VgaText::read(unsigned long long, void*, int*)>:
c0011f8c:	83 ec 10             	sub    esp,0x10
c0011f8f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011f93:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011f97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f9b:	e8 49 85 ff ff       	call   c000a4e9 <readKeyboard(VgaText*, char*, unsigned long)>
c0011fa0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011fa4:	89 02                	mov    DWORD PTR [edx],eax
c0011fa6:	31 c0                	xor    eax,eax
c0011fa8:	83 c4 1c             	add    esp,0x1c
c0011fab:	c3                   	ret    

c0011fac <setTerminalScrollLock(bool)>:
c0011fac:	c3                   	ret    

c0011fad <doTerminalCycle()>:
c0011fad:	c3                   	ret    

c0011fae <addToTerminalCycle(VgaText*)>:
c0011fae:	c3                   	ret    

c0011faf <scrollTerminalScrollLock(int)>:
c0011faf:	c3                   	ret    

c0011fb0 <VgaText::updateTitle()>:
c0011fb0:	c3                   	ret    
c0011fb1:	90                   	nop

c0011fb2 <VgaText::load()>:
c0011fb2:	c3                   	ret    
c0011fb3:	90                   	nop

c0011fb4 <VgaText::updateCursor()>:
c0011fb4:	83 ec 14             	sub    esp,0x14
c0011fb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011fbb:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0011fbe:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0011fc1:	e8 32 8c 00 00       	call   c001abf8 <HalConsoleCursorUpdate(int, int)>
c0011fc6:	83 c4 1c             	add    esp,0x1c
c0011fc9:	c3                   	ret    

c0011fca <VgaText::doANSI_SGR(int)>:
c0011fca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011fce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fd2:	85 d2                	test   edx,edx
c0011fd4:	75 0b                	jne    c0011fe1 <VgaText::doANSI_SGR(int)+0x17>
c0011fd6:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0011fd9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0011fdc:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011fdf:	eb 59                	jmp    c001203a <VgaText::doANSI_SGR(int)+0x70>
c0011fe1:	83 fa 07             	cmp    edx,0x7
c0011fe4:	75 0b                	jne    c0011ff1 <VgaText::doANSI_SGR(int)+0x27>
c0011fe6:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0011fe9:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0011fec:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0011fef:	eb 49                	jmp    c001203a <VgaText::doANSI_SGR(int)+0x70>
c0011ff1:	83 fa 1b             	cmp    edx,0x1b
c0011ff4:	74 e0                	je     c0011fd6 <VgaText::doANSI_SGR(int)+0xc>
c0011ff6:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0011ff9:	83 f9 07             	cmp    ecx,0x7
c0011ffc:	77 09                	ja     c0012007 <VgaText::doANSI_SGR(int)+0x3d>
c0011ffe:	8b 14 8d 00 61 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9f00]
c0012005:	eb 20                	jmp    c0012027 <VgaText::doANSI_SGR(int)+0x5d>
c0012007:	8d 4a d8             	lea    ecx,[edx-0x28]
c001200a:	83 f9 07             	cmp    ecx,0x7
c001200d:	77 09                	ja     c0012018 <VgaText::doANSI_SGR(int)+0x4e>
c001200f:	8b 14 8d 00 61 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9f00]
c0012016:	eb 22                	jmp    c001203a <VgaText::doANSI_SGR(int)+0x70>
c0012018:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001201b:	83 f9 07             	cmp    ecx,0x7
c001201e:	77 0b                	ja     c001202b <VgaText::doANSI_SGR(int)+0x61>
c0012020:	8b 14 95 b8 5f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda048]
c0012027:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001202a:	c3                   	ret    
c001202b:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001202e:	83 f9 07             	cmp    ecx,0x7
c0012031:	77 0a                	ja     c001203d <VgaText::doANSI_SGR(int)+0x73>
c0012033:	8b 14 95 90 5f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda070]
c001203a:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001203d:	c3                   	ret    

c001203e <VgaText::setDefaultBgColour(VgaColour)>:
c001203e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012042:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012046:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0012049:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001204c:	c3                   	ret    
c001204d:	90                   	nop

c001204e <VgaText::setDefaultFgColour(VgaColour)>:
c001204e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012052:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012056:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0012059:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001205c:	c3                   	ret    
c001205d:	90                   	nop

c001205e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001205e:	53                   	push   ebx
c001205f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012063:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012067:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001206b:	51                   	push   ecx
c001206c:	e8 cd ff ff ff       	call   c001203e <VgaText::setDefaultBgColour(VgaColour)>
c0012071:	58                   	pop    eax
c0012072:	5a                   	pop    edx
c0012073:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0012077:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001207b:	5b                   	pop    ebx
c001207c:	eb d0                	jmp    c001204e <VgaText::setDefaultFgColour(VgaColour)>

c001207e <VgaText::setTitleTextColour(VgaColour)>:
c001207e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012082:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012086:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0012089:	c3                   	ret    

c001208a <VgaText::setTitleColour(VgaColour)>:
c001208a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001208e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012092:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012095:	c3                   	ret    

c0012096 <VgaText::setTitle(char*)>:
c0012096:	c3                   	ret    
c0012097:	90                   	nop

c0012098 <VgaText::combineColours(unsigned char, unsigned char)>:
c0012098:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001209c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00120a1:	83 e0 0f             	and    eax,0xf
c00120a4:	c1 e2 04             	shl    edx,0x4
c00120a7:	09 d0                	or     eax,edx
c00120a9:	c3                   	ret    

c00120aa <VgaText::scrollScreen()>:
c00120aa:	55                   	push   ebp
c00120ab:	57                   	push   edi
c00120ac:	56                   	push   esi
c00120ad:	be 01 00 00 00       	mov    esi,0x1
c00120b2:	53                   	push   ebx
c00120b3:	83 ec 0c             	sub    esp,0xc
c00120b6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00120ba:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00120bd:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00120c3:	31 ff                	xor    edi,edi
c00120c5:	01 e9                	add    ecx,ebp
c00120c7:	8a 01                	mov    al,BYTE PTR [ecx]
c00120c9:	83 fe 18             	cmp    esi,0x18
c00120cc:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c00120d2:	75 20                	jne    c00120f4 <VgaText::scrollScreen()+0x4a>
c00120d4:	f7 c7 01 00 00 00    	test   edi,0x1
c00120da:	74 15                	je     c00120f1 <VgaText::scrollScreen()+0x47>
c00120dc:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00120e0:	50                   	push   eax
c00120e1:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00120e5:	50                   	push   eax
c00120e6:	e8 ad ff ff ff       	call   c0012098 <VgaText::combineColours(unsigned char, unsigned char)>
c00120eb:	5a                   	pop    edx
c00120ec:	5a                   	pop    edx
c00120ed:	88 01                	mov    BYTE PTR [ecx],al
c00120ef:	eb 03                	jmp    c00120f4 <VgaText::scrollScreen()+0x4a>
c00120f1:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c00120f4:	47                   	inc    edi
c00120f5:	41                   	inc    ecx
c00120f6:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00120fc:	75 c9                	jne    c00120c7 <VgaText::scrollScreen()+0x1d>
c00120fe:	46                   	inc    esi
c00120ff:	83 fe 19             	cmp    esi,0x19
c0012102:	75 b9                	jne    c00120bd <VgaText::scrollScreen()+0x13>
c0012104:	39 1d b4 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1b4,ebx
c001210a:	75 1f                	jne    c001212b <VgaText::scrollScreen()+0x81>
c001210c:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0012110:	74 05                	je     c0012117 <VgaText::scrollScreen()+0x6d>
c0012112:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0012115:	eb 14                	jmp    c001212b <VgaText::scrollScreen()+0x81>
c0012117:	50                   	push   eax
c0012118:	50                   	push   eax
c0012119:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001211d:	50                   	push   eax
c001211e:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0012122:	50                   	push   eax
c0012123:	e8 64 89 00 00       	call   c001aa8c <HalConsoleScroll(int, int)>
c0012128:	83 c4 10             	add    esp,0x10
c001212b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001212f:	83 c4 0c             	add    esp,0xc
c0012132:	5b                   	pop    ebx
c0012133:	5e                   	pop    esi
c0012134:	5f                   	pop    edi
c0012135:	5d                   	pop    ebp
c0012136:	e9 79 fe ff ff       	jmp    c0011fb4 <VgaText::updateCursor()>
c001213b:	90                   	nop

c001213c <VgaText::combineCharAndColour(char, unsigned char)>:
c001213c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0012141:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0012146:	c1 e0 08             	shl    eax,0x8
c0012149:	09 d0                	or     eax,edx
c001214b:	c3                   	ret    

c001214c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001214c:	55                   	push   ebp
c001214d:	57                   	push   edi
c001214e:	56                   	push   esi
c001214f:	53                   	push   ebx
c0012150:	83 ec 1c             	sub    esp,0x1c
c0012153:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012157:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001215b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001215f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012163:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c0012166:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001216a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001216e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0012172:	85 ed                	test   ebp,ebp
c0012174:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012178:	75 14                	jne    c001218e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c001217a:	c7 44 24 30 84 3d 02 c0 	mov    DWORD PTR [esp+0x30],0xc0023d84
c0012182:	83 c4 1c             	add    esp,0x1c
c0012185:	5b                   	pop    ebx
c0012186:	5e                   	pop    esi
c0012187:	5f                   	pop    edi
c0012188:	5d                   	pop    ebp
c0012189:	e9 28 dc ff ff       	jmp    c000fdb6 <KePanic(char const*)>
c001218e:	50                   	push   eax
c001218f:	50                   	push   eax
c0012190:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012195:	50                   	push   eax
c0012196:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001219b:	50                   	push   eax
c001219c:	e8 f7 fe ff ff       	call   c0012098 <VgaText::combineColours(unsigned char, unsigned char)>
c00121a1:	5a                   	pop    edx
c00121a2:	5a                   	pop    edx
c00121a3:	0f b6 c0             	movzx  eax,al
c00121a6:	0f be c9             	movsx  ecx,cl
c00121a9:	50                   	push   eax
c00121aa:	51                   	push   ecx
c00121ab:	e8 8c ff ff ff       	call   c001213c <VgaText::combineCharAndColour(char, unsigned char)>
c00121b0:	6b d6 50             	imul   edx,esi,0x50
c00121b3:	83 c4 10             	add    esp,0x10
c00121b6:	01 da                	add    edx,ebx
c00121b8:	0f b7 d2             	movzx  edx,dx
c00121bb:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c00121c0:	39 3d b4 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1b4,edi
c00121c6:	75 28                	jne    c00121f0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c00121c8:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00121cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121d0:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c00121d4:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c00121d8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00121dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121e0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00121e4:	83 c4 1c             	add    esp,0x1c
c00121e7:	5b                   	pop    ebx
c00121e8:	5e                   	pop    esi
c00121e9:	5f                   	pop    edi
c00121ea:	5d                   	pop    ebp
c00121eb:	e9 a4 89 00 00       	jmp    c001ab94 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00121f0:	83 c4 1c             	add    esp,0x1c
c00121f3:	5b                   	pop    ebx
c00121f4:	5e                   	pop    esi
c00121f5:	5f                   	pop    edi
c00121f6:	5d                   	pop    ebp
c00121f7:	c3                   	ret    

c00121f8 <VgaText::getCursorX()>:
c00121f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121fc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00121ff:	c3                   	ret    

c0012200 <VgaText::getCursorY()>:
c0012200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012204:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0012207:	c3                   	ret    

c0012208 <VgaText::setCursor(int, int)>:
c0012208:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001220c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012210:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0012213:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012217:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001221a:	e9 95 fd ff ff       	jmp    c0011fb4 <VgaText::updateCursor()>

c001221f <setActiveTerminal(VgaText*)>:
c001221f:	53                   	push   ebx
c0012220:	83 ec 08             	sub    esp,0x8
c0012223:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012227:	85 db                	test   ebx,ebx
c0012229:	75 11                	jne    c001223c <setActiveTerminal(VgaText*)+0x1d>
c001222b:	c7 44 24 10 94 3d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023d94
c0012233:	83 c4 08             	add    esp,0x8
c0012236:	5b                   	pop    ebx
c0012237:	e9 7a db ff ff       	jmp    c000fdb6 <KePanic(char const*)>
c001223c:	a1 b4 e1 02 c0       	mov    eax,ds:0xc002e1b4
c0012241:	85 c0                	test   eax,eax
c0012243:	74 0c                	je     c0012251 <setActiveTerminal(VgaText*)+0x32>
c0012245:	83 ec 0c             	sub    esp,0xc
c0012248:	50                   	push   eax
c0012249:	e8 66 fd ff ff       	call   c0011fb4 <VgaText::updateCursor()>
c001224e:	83 c4 10             	add    esp,0x10
c0012251:	50                   	push   eax
c0012252:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012255:	89 1d b4 e1 02 c0    	mov    DWORD PTR ds:0xc002e1b4,ebx
c001225b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001225e:	53                   	push   ebx
c001225f:	e8 a4 ff ff ff       	call   c0012208 <VgaText::setCursor(int, int)>
c0012264:	83 c4 18             	add    esp,0x18
c0012267:	5b                   	pop    ebx
c0012268:	c3                   	ret    
c0012269:	90                   	nop

c001226a <VgaText::clearScreen()>:
c001226a:	57                   	push   edi
c001226b:	56                   	push   esi
c001226c:	31 f6                	xor    esi,esi
c001226e:	53                   	push   ebx
c001226f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012273:	52                   	push   edx
c0012274:	6a 00                	push   0x0
c0012276:	6a 00                	push   0x0
c0012278:	53                   	push   ebx
c0012279:	e8 8a ff ff ff       	call   c0012208 <VgaText::setCursor(int, int)>
c001227e:	83 c4 10             	add    esp,0x10
c0012281:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0012288:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c001228b:	7e 20                	jle    c00122ad <VgaText::clearScreen()+0x43>
c001228d:	31 ff                	xor    edi,edi
c001228f:	50                   	push   eax
c0012290:	50                   	push   eax
c0012291:	56                   	push   esi
c0012292:	57                   	push   edi
c0012293:	47                   	inc    edi
c0012294:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012297:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001229a:	6a 20                	push   0x20
c001229c:	53                   	push   ebx
c001229d:	e8 aa fe ff ff       	call   c001214c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00122a2:	83 c4 20             	add    esp,0x20
c00122a5:	83 ff 50             	cmp    edi,0x50
c00122a8:	75 e5                	jne    c001228f <VgaText::clearScreen()+0x25>
c00122aa:	46                   	inc    esi
c00122ab:	eb db                	jmp    c0012288 <VgaText::clearScreen()+0x1e>
c00122ad:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00122b4:	5b                   	pop    ebx
c00122b5:	5e                   	pop    esi
c00122b6:	5f                   	pop    edi
c00122b7:	c3                   	ret    

c00122b8 <VgaText::setCursorX(int)>:
c00122b8:	83 ec 10             	sub    esp,0x10
c00122bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122bf:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00122c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122c6:	50                   	push   eax
c00122c7:	e8 3c ff ff ff       	call   c0012208 <VgaText::setCursor(int, int)>
c00122cc:	83 c4 1c             	add    esp,0x1c
c00122cf:	c3                   	ret    

c00122d0 <VgaText::setCursorY(int)>:
c00122d0:	83 ec 10             	sub    esp,0x10
c00122d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122db:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00122de:	50                   	push   eax
c00122df:	e8 24 ff ff ff       	call   c0012208 <VgaText::setCursor(int, int)>
c00122e4:	83 c4 1c             	add    esp,0x1c
c00122e7:	c3                   	ret    

c00122e8 <VgaText::incrementCursor(bool)>:
c00122e8:	56                   	push   esi
c00122e9:	53                   	push   ebx
c00122ea:	51                   	push   ecx
c00122eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00122ef:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00122f3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00122f6:	40                   	inc    eax
c00122f7:	83 f8 50             	cmp    eax,0x50
c00122fa:	74 05                	je     c0012301 <VgaText::incrementCursor(bool)+0x19>
c00122fc:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00122ff:	eb 24                	jmp    c0012325 <VgaText::incrementCursor(bool)+0x3d>
c0012301:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012308:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001230b:	8d 50 01             	lea    edx,[eax+0x1]
c001230e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0012311:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0012314:	75 0f                	jne    c0012325 <VgaText::incrementCursor(bool)+0x3d>
c0012316:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012319:	83 ec 0c             	sub    esp,0xc
c001231c:	53                   	push   ebx
c001231d:	e8 88 fd ff ff       	call   c00120aa <VgaText::scrollScreen()>
c0012322:	83 c4 10             	add    esp,0x10
c0012325:	89 f0                	mov    eax,esi
c0012327:	84 c0                	test   al,al
c0012329:	74 0c                	je     c0012337 <VgaText::incrementCursor(bool)+0x4f>
c001232b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001232f:	5a                   	pop    edx
c0012330:	5b                   	pop    ebx
c0012331:	5e                   	pop    esi
c0012332:	e9 7d fc ff ff       	jmp    c0011fb4 <VgaText::updateCursor()>
c0012337:	58                   	pop    eax
c0012338:	5b                   	pop    ebx
c0012339:	5e                   	pop    esi
c001233a:	c3                   	ret    
c001233b:	90                   	nop

c001233c <VgaText::decrementCursor(bool)>:
c001233c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012340:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012344:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0012347:	85 c0                	test   eax,eax
c0012349:	74 04                	je     c001234f <VgaText::decrementCursor(bool)+0x13>
c001234b:	48                   	dec    eax
c001234c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c001234f:	84 c9                	test   cl,cl
c0012351:	74 09                	je     c001235c <VgaText::decrementCursor(bool)+0x20>
c0012353:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012357:	e9 58 fc ff ff       	jmp    c0011fb4 <VgaText::updateCursor()>
c001235c:	c3                   	ret    
c001235d:	90                   	nop

c001235e <VgaText::putchar(char, VgaColour, VgaColour)>:
c001235e:	53                   	push   ebx
c001235f:	83 ec 08             	sub    esp,0x8
c0012362:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0012367:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001236b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001236f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012373:	83 f8 07             	cmp    eax,0x7
c0012376:	75 21                	jne    c0012399 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0012378:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012380:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0012388:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0012390:	83 c4 08             	add    esp,0x8
c0012393:	5b                   	pop    ebx
c0012394:	e9 35 66 ff ff       	jmp    c00089ce <KeBeep(int, int, bool)>
c0012399:	83 f8 0d             	cmp    eax,0xd
c001239c:	75 09                	jne    c00123a7 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c001239e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00123a5:	eb 2d                	jmp    c00123d4 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00123a7:	83 f8 0a             	cmp    eax,0xa
c00123aa:	75 31                	jne    c00123dd <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00123ac:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00123b3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00123b6:	8d 50 01             	lea    edx,[eax+0x1]
c00123b9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00123bc:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00123bf:	75 0f                	jne    c00123d0 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00123c1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00123c4:	83 ec 0c             	sub    esp,0xc
c00123c7:	53                   	push   ebx
c00123c8:	e8 dd fc ff ff       	call   c00120aa <VgaText::scrollScreen()>
c00123cd:	83 c4 10             	add    esp,0x10
c00123d0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00123d4:	83 c4 08             	add    esp,0x8
c00123d7:	5b                   	pop    ebx
c00123d8:	e9 d7 fb ff ff       	jmp    c0011fb4 <VgaText::updateCursor()>
c00123dd:	83 f8 08             	cmp    eax,0x8
c00123e0:	75 25                	jne    c0012407 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c00123e2:	50                   	push   eax
c00123e3:	50                   	push   eax
c00123e4:	6a 01                	push   0x1
c00123e6:	53                   	push   ebx
c00123e7:	e8 50 ff ff ff       	call   c001233c <VgaText::decrementCursor(bool)>
c00123ec:	5a                   	pop    edx
c00123ed:	59                   	pop    ecx
c00123ee:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00123f1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00123f4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00123f7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00123fa:	6a 20                	push   0x20
c00123fc:	53                   	push   ebx
c00123fd:	e8 4a fd ff ff       	call   c001214c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012402:	83 c4 28             	add    esp,0x28
c0012405:	5b                   	pop    ebx
c0012406:	c3                   	ret    
c0012407:	83 ec 08             	sub    esp,0x8
c001240a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001240d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012410:	51                   	push   ecx
c0012411:	52                   	push   edx
c0012412:	50                   	push   eax
c0012413:	53                   	push   ebx
c0012414:	e8 33 fd ff ff       	call   c001214c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012419:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001241d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0012425:	83 c4 28             	add    esp,0x28
c0012428:	5b                   	pop    ebx
c0012429:	e9 ba fe ff ff       	jmp    c00122e8 <VgaText::incrementCursor(bool)>

c001242e <VgaText::putchar(char)>:
c001242e:	57                   	push   edi
c001242f:	56                   	push   esi
c0012430:	53                   	push   ebx
c0012431:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012435:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012439:	0f be c2             	movsx  eax,dl
c001243c:	83 f8 5b             	cmp    eax,0x5b
c001243f:	75 18                	jne    c0012459 <VgaText::putchar(char)+0x2b>
c0012441:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0012445:	74 20                	je     c0012467 <VgaText::putchar(char)+0x39>
c0012447:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c001244d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0012454:	e9 b8 00 00 00       	jmp    c0012511 <VgaText::putchar(char)+0xe3>
c0012459:	83 f8 1b             	cmp    eax,0x1b
c001245c:	75 09                	jne    c0012467 <VgaText::putchar(char)+0x39>
c001245e:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0012462:	e9 aa 00 00 00       	jmp    c0012511 <VgaText::putchar(char)+0xe3>
c0012467:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c001246b:	89 f9                	mov    ecx,edi
c001246d:	84 c9                	test   cl,cl
c001246f:	0f 84 8c 00 00 00    	je     c0012501 <VgaText::putchar(char)+0xd3>
c0012475:	8d 4a c0             	lea    ecx,[edx-0x40]
c0012478:	80 f9 3e             	cmp    cl,0x3e
c001247b:	77 70                	ja     c00124ed <VgaText::putchar(char)+0xbf>
c001247d:	83 f8 6d             	cmp    eax,0x6d
c0012480:	75 3f                	jne    c00124c1 <VgaText::putchar(char)+0x93>
c0012482:	31 f6                	xor    esi,esi
c0012484:	31 d2                	xor    edx,edx
c0012486:	31 c0                	xor    eax,eax
c0012488:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c001248b:	7e 25                	jle    c00124b2 <VgaText::putchar(char)+0x84>
c001248d:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0012492:	83 fa 3b             	cmp    edx,0x3b
c0012495:	75 0f                	jne    c00124a6 <VgaText::putchar(char)+0x78>
c0012497:	50                   	push   eax
c0012498:	53                   	push   ebx
c0012499:	e8 2c fb ff ff       	call   c0011fca <VgaText::doANSI_SGR(int)>
c001249e:	31 d2                	xor    edx,edx
c00124a0:	59                   	pop    ecx
c00124a1:	58                   	pop    eax
c00124a2:	31 c0                	xor    eax,eax
c00124a4:	eb 09                	jmp    c00124af <VgaText::putchar(char)+0x81>
c00124a6:	6b c0 0a             	imul   eax,eax,0xa
c00124a9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00124ad:	89 fa                	mov    edx,edi
c00124af:	46                   	inc    esi
c00124b0:	eb d6                	jmp    c0012488 <VgaText::putchar(char)+0x5a>
c00124b2:	84 d2                	test   dl,dl
c00124b4:	74 2f                	je     c00124e5 <VgaText::putchar(char)+0xb7>
c00124b6:	50                   	push   eax
c00124b7:	53                   	push   ebx
c00124b8:	e8 0d fb ff ff       	call   c0011fca <VgaText::doANSI_SGR(int)>
c00124bd:	58                   	pop    eax
c00124be:	5a                   	pop    edx
c00124bf:	eb 24                	jmp    c00124e5 <VgaText::putchar(char)+0xb7>
c00124c1:	83 f8 4a             	cmp    eax,0x4a
c00124c4:	75 1f                	jne    c00124e5 <VgaText::putchar(char)+0xb7>
c00124c6:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00124ca:	75 19                	jne    c00124e5 <VgaText::putchar(char)+0xb7>
c00124cc:	83 ec 0c             	sub    esp,0xc
c00124cf:	53                   	push   ebx
c00124d0:	e8 95 fd ff ff       	call   c001226a <VgaText::clearScreen()>
c00124d5:	83 c4 0c             	add    esp,0xc
c00124d8:	6a 00                	push   0x0
c00124da:	6a 00                	push   0x0
c00124dc:	53                   	push   ebx
c00124dd:	e8 26 fd ff ff       	call   c0012208 <VgaText::setCursor(int, int)>
c00124e2:	83 c4 10             	add    esp,0x10
c00124e5:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00124eb:	eb 24                	jmp    c0012511 <VgaText::putchar(char)+0xe3>
c00124ed:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c00124f0:	83 f8 0e             	cmp    eax,0xe
c00124f3:	7f 1c                	jg     c0012511 <VgaText::putchar(char)+0xe3>
c00124f5:	8d 48 01             	lea    ecx,[eax+0x1]
c00124f8:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00124fb:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c00124ff:	eb 10                	jmp    c0012511 <VgaText::putchar(char)+0xe3>
c0012501:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012504:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012507:	50                   	push   eax
c0012508:	53                   	push   ebx
c0012509:	e8 50 fe ff ff       	call   c001235e <VgaText::putchar(char, VgaColour, VgaColour)>
c001250e:	83 c4 10             	add    esp,0x10
c0012511:	5b                   	pop    ebx
c0012512:	5e                   	pop    esi
c0012513:	5f                   	pop    edi
c0012514:	c3                   	ret    
c0012515:	90                   	nop

c0012516 <VgaText::putx(unsigned int)>:
c0012516:	57                   	push   edi
c0012517:	b9 11 00 00 00       	mov    ecx,0x11
c001251c:	56                   	push   esi
c001251d:	be a2 3d 02 c0       	mov    esi,0xc0023da2
c0012522:	53                   	push   ebx
c0012523:	83 ec 20             	sub    esp,0x20
c0012526:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001252a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001252e:	fc                   	cld    
c001252f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012531:	be 08 00 00 00       	mov    esi,0x8
c0012536:	50                   	push   eax
c0012537:	50                   	push   eax
c0012538:	89 d8                	mov    eax,ebx
c001253a:	c1 e8 1c             	shr    eax,0x1c
c001253d:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0012542:	c1 e3 04             	shl    ebx,0x4
c0012545:	50                   	push   eax
c0012546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001254a:	e8 df fe ff ff       	call   c001242e <VgaText::putchar(char)>
c001254f:	83 c4 10             	add    esp,0x10
c0012552:	4e                   	dec    esi
c0012553:	75 e1                	jne    c0012536 <VgaText::putx(unsigned int)+0x20>
c0012555:	83 c4 20             	add    esp,0x20
c0012558:	5b                   	pop    ebx
c0012559:	5e                   	pop    esi
c001255a:	5f                   	pop    edi
c001255b:	c3                   	ret    

c001255c <VgaText::puts(char const*)>:
c001255c:	53                   	push   ebx
c001255d:	83 ec 08             	sub    esp,0x8
c0012560:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012564:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012567:	85 c0                	test   eax,eax
c0012569:	74 12                	je     c001257d <VgaText::puts(char const*)+0x21>
c001256b:	51                   	push   ecx
c001256c:	43                   	inc    ebx
c001256d:	51                   	push   ecx
c001256e:	50                   	push   eax
c001256f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012573:	e8 b6 fe ff ff       	call   c001242e <VgaText::putchar(char)>
c0012578:	83 c4 10             	add    esp,0x10
c001257b:	eb e7                	jmp    c0012564 <VgaText::puts(char const*)+0x8>
c001257d:	83 c4 08             	add    esp,0x8
c0012580:	5b                   	pop    ebx
c0012581:	c3                   	ret    

c0012582 <VgaText::write(unsigned long long, void*, int*)>:
c0012582:	55                   	push   ebp
c0012583:	57                   	push   edi
c0012584:	56                   	push   esi
c0012585:	53                   	push   ebx
c0012586:	83 ec 0c             	sub    esp,0xc
c0012589:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001258d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012591:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012595:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c001259c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001259f:	39 eb                	cmp    ebx,ebp
c00125a1:	74 13                	je     c00125b6 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00125a3:	50                   	push   eax
c00125a4:	43                   	inc    ebx
c00125a5:	50                   	push   eax
c00125a6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00125aa:	50                   	push   eax
c00125ab:	56                   	push   esi
c00125ac:	e8 7d fe ff ff       	call   c001242e <VgaText::putchar(char)>
c00125b1:	83 c4 10             	add    esp,0x10
c00125b4:	eb e9                	jmp    c001259f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00125b6:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00125bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125c1:	89 38                	mov    DWORD PTR [eax],edi
c00125c3:	83 c4 0c             	add    esp,0xc
c00125c6:	31 c0                	xor    eax,eax
c00125c8:	5b                   	pop    ebx
c00125c9:	5e                   	pop    esi
c00125ca:	5f                   	pop    edi
c00125cb:	5d                   	pop    ebp
c00125cc:	c3                   	ret    
c00125cd:	90                   	nop

c00125ce <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00125ce:	55                   	push   ebp
c00125cf:	57                   	push   edi
c00125d0:	56                   	push   esi
c00125d1:	53                   	push   ebx
c00125d2:	83 ec 1c             	sub    esp,0x1c
c00125d5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00125d9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00125dd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00125e1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00125e5:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c00125e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00125ec:	85 db                	test   ebx,ebx
c00125ee:	75 14                	jne    c0012604 <VgaText::puts(char const*, VgaColour, VgaColour)+0x36>
c00125f0:	c7 44 24 30 b3 3d 02 c0 	mov    DWORD PTR [esp+0x30],0xc0023db3
c00125f8:	83 c4 1c             	add    esp,0x1c
c00125fb:	5b                   	pop    ebx
c00125fc:	5e                   	pop    esi
c00125fd:	5f                   	pop    edi
c00125fe:	5d                   	pop    ebp
c00125ff:	e9 b2 d7 ff ff       	jmp    c000fdb6 <KePanic(char const*)>
c0012604:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c001260b:	50                   	push   eax
c001260c:	50                   	push   eax
c001260d:	89 e8                	mov    eax,ebp
c001260f:	0f b6 c0             	movzx  eax,al
c0012612:	50                   	push   eax
c0012613:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012618:	50                   	push   eax
c0012619:	e8 7a fa ff ff       	call   c0012098 <VgaText::combineColours(unsigned char, unsigned char)>
c001261e:	83 c4 10             	add    esp,0x10
c0012621:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c0012625:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c0012628:	0f b6 c0             	movzx  eax,al
c001262b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001262f:	0f b7 c9             	movzx  ecx,cx
c0012632:	01 c9                	add    ecx,ecx
c0012634:	01 cb                	add    ebx,ecx
c0012636:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012639:	85 c0                	test   eax,eax
c001263b:	0f 84 ef 00 00 00    	je     c0012730 <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c0012641:	83 f8 0d             	cmp    eax,0xd
c0012644:	75 0c                	jne    c0012652 <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c0012646:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c001264d:	e9 d8 00 00 00       	jmp    c001272a <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012652:	83 f8 0a             	cmp    eax,0xa
c0012655:	75 44                	jne    c001269b <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c0012657:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c001265e:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012661:	8d 48 01             	lea    ecx,[eax+0x1]
c0012664:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c0012667:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c001266a:	75 0f                	jne    c001267b <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c001266c:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c001266f:	83 ec 0c             	sub    esp,0xc
c0012672:	57                   	push   edi
c0012673:	e8 32 fa ff ff       	call   c00120aa <VgaText::scrollScreen()>
c0012678:	83 c4 10             	add    esp,0x10
c001267b:	83 ec 0c             	sub    esp,0xc
c001267e:	57                   	push   edi
c001267f:	e8 30 f9 ff ff       	call   c0011fb4 <VgaText::updateCursor()>
c0012684:	83 c4 10             	add    esp,0x10
c0012687:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c001268b:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c001268e:	0f b7 db             	movzx  ebx,bx
c0012691:	01 db                	add    ebx,ebx
c0012693:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012696:	e9 8f 00 00 00       	jmp    c001272a <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001269b:	83 f8 08             	cmp    eax,0x8
c001269e:	75 34                	jne    c00126d4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c00126a0:	51                   	push   ecx
c00126a1:	51                   	push   ecx
c00126a2:	6a 01                	push   0x1
c00126a4:	57                   	push   edi
c00126a5:	e8 92 fc ff ff       	call   c001233c <VgaText::decrementCursor(bool)>
c00126aa:	5b                   	pop    ebx
c00126ab:	58                   	pop    eax
c00126ac:	ff 77 18             	push   DWORD PTR [edi+0x18]
c00126af:	ff 77 14             	push   DWORD PTR [edi+0x14]
c00126b2:	ff 77 30             	push   DWORD PTR [edi+0x30]
c00126b5:	ff 77 34             	push   DWORD PTR [edi+0x34]
c00126b8:	6a 20                	push   0x20
c00126ba:	57                   	push   edi
c00126bb:	e8 8c fa ff ff       	call   c001214c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00126c0:	83 c4 20             	add    esp,0x20
c00126c3:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c00126c7:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c00126ca:	0f b7 db             	movzx  ebx,bx
c00126cd:	01 db                	add    ebx,ebx
c00126cf:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c00126d2:	eb 56                	jmp    c001272a <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00126d4:	52                   	push   edx
c00126d5:	52                   	push   edx
c00126d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00126da:	50                   	push   eax
c00126db:	e8 5c fa ff ff       	call   c001213c <VgaText::combineCharAndColour(char, unsigned char)>
c00126e0:	83 c4 10             	add    esp,0x10
c00126e3:	66 89 03             	mov    WORD PTR [ebx],ax
c00126e6:	39 3d b4 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1b4,edi
c00126ec:	75 1a                	jne    c0012708 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00126ee:	83 ec 0c             	sub    esp,0xc
c00126f1:	ff 77 18             	push   DWORD PTR [edi+0x18]
c00126f4:	ff 77 14             	push   DWORD PTR [edi+0x14]
c00126f7:	55                   	push   ebp
c00126f8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126fc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00126ff:	50                   	push   eax
c0012700:	e8 8f 84 00 00       	call   c001ab94 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012705:	83 c4 20             	add    esp,0x20
c0012708:	50                   	push   eax
c0012709:	83 c3 02             	add    ebx,0x2
c001270c:	50                   	push   eax
c001270d:	6a 00                	push   0x0
c001270f:	57                   	push   edi
c0012710:	e8 d3 fb ff ff       	call   c00122e8 <VgaText::incrementCursor(bool)>
c0012715:	83 c4 10             	add    esp,0x10
c0012718:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c001271c:	75 0c                	jne    c001272a <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001271e:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012722:	0f b7 db             	movzx  ebx,bx
c0012725:	01 db                	add    ebx,ebx
c0012727:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c001272a:	46                   	inc    esi
c001272b:	e9 06 ff ff ff       	jmp    c0012636 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0012730:	83 ec 0c             	sub    esp,0xc
c0012733:	57                   	push   edi
c0012734:	e8 7b f8 ff ff       	call   c0011fb4 <VgaText::updateCursor()>
c0012739:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c0012740:	83 c4 2c             	add    esp,0x2c
c0012743:	5b                   	pop    ebx
c0012744:	5e                   	pop    esi
c0012745:	5f                   	pop    edi
c0012746:	5d                   	pop    ebp
c0012747:	c3                   	ret    

c0012748 <VgaText::VgaText(char const*)>:
c0012748:	56                   	push   esi
c0012749:	53                   	push   ebx
c001274a:	83 ec 04             	sub    esp,0x4
c001274d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012751:	83 ec 08             	sub    esp,0x8
c0012754:	6a 00                	push   0x0
c0012756:	50                   	push   eax
c0012757:	e8 b8 05 00 00       	call   c0012d14 <UnixFile::UnixFile(int)>
c001275c:	83 c4 10             	add    esp,0x10
c001275f:	ba ec 3d 02 c0       	mov    edx,0xc0023dec
c0012764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012768:	89 10                	mov    DWORD PTR [eax],edx
c001276a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001276e:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0012775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012779:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0012780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012784:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0012788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001278c:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0012790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012794:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c001279b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001279f:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00127a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127aa:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00127b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127b5:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00127bc:	83 ec 0c             	sub    esp,0xc
c00127bf:	68 c3 3d 02 c0       	push   0xc0023dc3
c00127c4:	e8 85 47 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00127c9:	83 c4 10             	add    esp,0x10
c00127cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127d0:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00127d7:	83 ec 0c             	sub    esp,0xc
c00127da:	6a 01                	push   0x1
c00127dc:	e8 94 09 00 00       	call   c0013175 <Virt::allocateKernelVirtualPages(int)>
c00127e1:	83 c4 10             	add    esp,0x10
c00127e4:	89 c2                	mov    edx,eax
c00127e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127ea:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00127ed:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c00127f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127fa:	89 c6                	mov    esi,eax
c00127fc:	e8 af d7 ff ff       	call   c000ffb0 <Phys::allocatePage()>
c0012801:	68 05 0c 00 00       	push   0xc05
c0012806:	56                   	push   esi
c0012807:	50                   	push   eax
c0012808:	53                   	push   ebx
c0012809:	e8 40 10 00 00       	call   c001384e <VAS::mapPage(unsigned long, unsigned long, int)>
c001280e:	83 c4 10             	add    esp,0x10
c0012811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012815:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012818:	83 ec 04             	sub    esp,0x4
c001281b:	68 a0 0f 00 00       	push   0xfa0
c0012820:	6a 00                	push   0x0
c0012822:	50                   	push   eax
c0012823:	e8 c8 dc fe ff       	call   c00004f0 <memset>
c0012828:	83 c4 10             	add    esp,0x10
c001282b:	83 ec 04             	sub    esp,0x4
c001282e:	6a 00                	push   0x0
c0012830:	6a 07                	push   0x7
c0012832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012836:	e8 23 f8 ff ff       	call   c001205e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001283b:	83 c4 10             	add    esp,0x10
c001283e:	83 ec 04             	sub    esp,0x4
c0012841:	6a 00                	push   0x0
c0012843:	6a 00                	push   0x0
c0012845:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012849:	e8 ba f9 ff ff       	call   c0012208 <VgaText::setCursor(int, int)>
c001284e:	83 c4 10             	add    esp,0x10
c0012851:	83 ec 0c             	sub    esp,0xc
c0012854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012858:	e8 0d fa ff ff       	call   c001226a <VgaText::clearScreen()>
c001285d:	83 c4 10             	add    esp,0x10
c0012860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012864:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0012868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001286c:	05 82 00 00 00       	add    eax,0x82
c0012871:	83 ec 04             	sub    esp,0x4
c0012874:	68 80 00 00 00       	push   0x80
c0012879:	6a 00                	push   0x0
c001287b:	50                   	push   eax
c001287c:	e8 6f dc fe ff       	call   c00004f0 <memset>
c0012881:	83 c4 10             	add    esp,0x10
c0012884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012888:	05 02 01 00 00       	add    eax,0x102
c001288d:	83 ec 04             	sub    esp,0x4
c0012890:	68 80 00 00 00       	push   0x80
c0012895:	6a 00                	push   0x0
c0012897:	50                   	push   eax
c0012898:	e8 53 dc fe ff       	call   c00004f0 <memset>
c001289d:	83 c4 10             	add    esp,0x10
c00128a0:	90                   	nop
c00128a1:	83 c4 04             	add    esp,0x4
c00128a4:	5b                   	pop    ebx
c00128a5:	5e                   	pop    esi
c00128a6:	c3                   	ret    
c00128a7:	90                   	nop

c00128a8 <VgaText::receiveKey(unsigned char)>:
c00128a8:	55                   	push   ebp
c00128a9:	57                   	push   edi
c00128aa:	56                   	push   esi
c00128ab:	53                   	push   ebx
c00128ac:	83 ec 2c             	sub    esp,0x2c
c00128af:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00128b3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00128b7:	89 fd                	mov    ebp,edi
c00128b9:	81 e5 ff 00 00 00    	and    ebp,0xff
c00128bf:	0f 84 48 01 00 00    	je     c0012a0d <VgaText::receiveKey(unsigned char)+0x165>
c00128c5:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c00128cb:	83 fd 08             	cmp    ebp,0x8
c00128ce:	75 6a                	jne    c001293a <VgaText::receiveKey(unsigned char)+0x92>
c00128d0:	83 ec 0c             	sub    esp,0xc
c00128d3:	56                   	push   esi
c00128d4:	e8 a7 dc fe ff       	call   c0000580 <strlen>
c00128d9:	83 c4 10             	add    esp,0x10
c00128dc:	85 c0                	test   eax,eax
c00128de:	0f 84 ef 00 00 00    	je     c00129d3 <VgaText::receiveKey(unsigned char)+0x12b>
c00128e4:	50                   	push   eax
c00128e5:	50                   	push   eax
c00128e6:	6a 08                	push   0x8
c00128e8:	53                   	push   ebx
c00128e9:	e8 40 fb ff ff       	call   c001242e <VgaText::putchar(char)>
c00128ee:	89 34 24             	mov    DWORD PTR [esp],esi
c00128f1:	e8 8a dc fe ff       	call   c0000580 <strlen>
c00128f6:	83 c4 10             	add    esp,0x10
c00128f9:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0012901:	83 fa 1f             	cmp    edx,0x1f
c0012904:	89 d0                	mov    eax,edx
c0012906:	7f 1c                	jg     c0012924 <VgaText::receiveKey(unsigned char)+0x7c>
c0012908:	83 e8 08             	sub    eax,0x8
c001290b:	3c 02                	cmp    al,0x2
c001290d:	76 15                	jbe    c0012924 <VgaText::receiveKey(unsigned char)+0x7c>
c001290f:	83 fa 0d             	cmp    edx,0xd
c0012912:	74 10                	je     c0012924 <VgaText::receiveKey(unsigned char)+0x7c>
c0012914:	57                   	push   edi
c0012915:	57                   	push   edi
c0012916:	68 d6 3d 02 c0       	push   0xc0023dd6
c001291b:	53                   	push   ebx
c001291c:	e8 3b fc ff ff       	call   c001255c <VgaText::puts(char const*)>
c0012921:	83 c4 10             	add    esp,0x10
c0012924:	83 ec 0c             	sub    esp,0xc
c0012927:	56                   	push   esi
c0012928:	e8 53 dc fe ff       	call   c0000580 <strlen>
c001292d:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0012935:	e9 96 00 00 00       	jmp    c00129d0 <VgaText::receiveKey(unsigned char)+0x128>
c001293a:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0012940:	83 ec 0c             	sub    esp,0xc
c0012943:	50                   	push   eax
c0012944:	e8 37 dc fe ff       	call   c0000580 <strlen>
c0012949:	89 34 24             	mov    DWORD PTR [esp],esi
c001294c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012950:	e8 2b dc fe ff       	call   c0000580 <strlen>
c0012955:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012959:	83 c4 10             	add    esp,0x10
c001295c:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0012960:	3d 80 00 00 00       	cmp    eax,0x80
c0012965:	0f 87 a2 00 00 00    	ja     c0012a0d <VgaText::receiveKey(unsigned char)+0x165>
c001296b:	8d 47 ff             	lea    eax,[edi-0x1]
c001296e:	3c 1e                	cmp    al,0x1e
c0012970:	77 35                	ja     c00129a7 <VgaText::receiveKey(unsigned char)+0xff>
c0012972:	8d 47 f7             	lea    eax,[edi-0x9]
c0012975:	3c 01                	cmp    al,0x1
c0012977:	76 2e                	jbe    c00129a7 <VgaText::receiveKey(unsigned char)+0xff>
c0012979:	83 fd 0d             	cmp    ebp,0xd
c001297c:	74 29                	je     c00129a7 <VgaText::receiveKey(unsigned char)+0xff>
c001297e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012981:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012984:	68 dc 3d 02 c0       	push   0xc0023ddc
c0012989:	53                   	push   ebx
c001298a:	e8 3f fc ff ff       	call   c00125ce <VgaText::puts(char const*, VgaColour, VgaColour)>
c001298f:	8d 47 40             	lea    eax,[edi+0x40]
c0012992:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012995:	0f b6 c0             	movzx  eax,al
c0012998:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001299b:	50                   	push   eax
c001299c:	53                   	push   ebx
c001299d:	e8 bc f9 ff ff       	call   c001235e <VgaText::putchar(char, VgaColour, VgaColour)>
c00129a2:	83 c4 20             	add    esp,0x20
c00129a5:	eb 11                	jmp    c00129b8 <VgaText::receiveKey(unsigned char)+0x110>
c00129a7:	51                   	push   ecx
c00129a8:	89 f8                	mov    eax,edi
c00129aa:	51                   	push   ecx
c00129ab:	0f be c0             	movsx  eax,al
c00129ae:	50                   	push   eax
c00129af:	53                   	push   ebx
c00129b0:	e8 79 fa ff ff       	call   c001242e <VgaText::putchar(char)>
c00129b5:	83 c4 10             	add    esp,0x10
c00129b8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00129bd:	89 f8                	mov    eax,edi
c00129bf:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00129c3:	52                   	push   edx
c00129c4:	52                   	push   edx
c00129c5:	8d 44 24 26          	lea    eax,[esp+0x26]
c00129c9:	50                   	push   eax
c00129ca:	56                   	push   esi
c00129cb:	e8 a0 de fe ff       	call   c0000870 <strcat>
c00129d0:	83 c4 10             	add    esp,0x10
c00129d3:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c00129da:	75 0f                	jne    c00129eb <VgaText::receiveKey(unsigned char)+0x143>
c00129dc:	83 fd 1c             	cmp    ebp,0x1c
c00129df:	77 2c                	ja     c0012a0d <VgaText::receiveKey(unsigned char)+0x165>
c00129e1:	b8 08 04 00 10       	mov    eax,0x10000408
c00129e6:	0f a3 e8             	bt     eax,ebp
c00129e9:	73 22                	jae    c0012a0d <VgaText::receiveKey(unsigned char)+0x165>
c00129eb:	50                   	push   eax
c00129ec:	81 c3 02 01 00 00    	add    ebx,0x102
c00129f2:	50                   	push   eax
c00129f3:	56                   	push   esi
c00129f4:	53                   	push   ebx
c00129f5:	e8 76 de fe ff       	call   c0000870 <strcat>
c00129fa:	83 c4 0c             	add    esp,0xc
c00129fd:	68 80 00 00 00       	push   0x80
c0012a02:	6a 00                	push   0x0
c0012a04:	56                   	push   esi
c0012a05:	e8 e6 da fe ff       	call   c00004f0 <memset>
c0012a0a:	83 c4 10             	add    esp,0x10
c0012a0d:	83 c4 2c             	add    esp,0x2c
c0012a10:	5b                   	pop    ebx
c0012a11:	5e                   	pop    esi
c0012a12:	5f                   	pop    edi
c0012a13:	5d                   	pop    ebp
c0012a14:	c3                   	ret    
c0012a15:	90                   	nop

c0012a16 <VgaText::doUpdate()>:
c0012a16:	c3                   	ret    
c0012a17:	90                   	nop

c0012a18 <TSS::TSS()>:
c0012a18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012a23:	90                   	nop
c0012a24:	c3                   	ret    
c0012a25:	90                   	nop
c0012a26:	66 90                	xchg   ax,ax

c0012a28 <TSS::setESP(unsigned long)>:
c0012a28:	55                   	push   ebp
c0012a29:	89 e5                	mov    ebp,esp
c0012a2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012a2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012a31:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012a34:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012a37:	90                   	nop
c0012a38:	5d                   	pop    ebp
c0012a39:	c3                   	ret    
c0012a3a:	66 90                	xchg   ax,ax

c0012a3c <TSS::flush()>:
c0012a3c:	55                   	push   ebp
c0012a3d:	89 e5                	mov    ebp,esp
c0012a3f:	83 ec 10             	sub    esp,0x10
c0012a42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012a45:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a47:	83 c8 03             	or     eax,0x3
c0012a4a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0012a4e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0012a52:	66 89 d0             	mov    ax,dx
c0012a55:	0f 00 d8             	ltr    ax
c0012a58:	90                   	nop
c0012a59:	c9                   	leave  
c0012a5a:	c3                   	ret    
c0012a5b:	90                   	nop

c0012a5c <TSS::setup(unsigned long, unsigned long)>:
c0012a5c:	55                   	push   ebp
c0012a5d:	89 e5                	mov    ebp,esp
c0012a5f:	83 ec 18             	sub    esp,0x18
c0012a62:	83 ec 0c             	sub    esp,0xc
c0012a65:	6a 68                	push   0x68
c0012a67:	e8 04 d0 ff ff       	call   c000fa70 <malloc>
c0012a6c:	83 c4 10             	add    esp,0x10
c0012a6f:	89 c2                	mov    edx,eax
c0012a71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012a74:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012a77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012a7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012a7d:	83 ec 08             	sub    esp,0x8
c0012a80:	50                   	push   eax
c0012a81:	68 00 3e 02 c0       	push   0xc0023e00
c0012a86:	e8 c3 44 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012a8b:	83 c4 10             	add    esp,0x10
c0012a8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012a94:	83 ec 04             	sub    esp,0x4
c0012a97:	6a 68                	push   0x68
c0012a99:	6a 00                	push   0x0
c0012a9b:	50                   	push   eax
c0012a9c:	e8 4f da fe ff       	call   c00004f0 <memset>
c0012aa1:	83 c4 10             	add    esp,0x10
c0012aa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012aa7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012aaa:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0012ab0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ab3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ab6:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0012abc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012abf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ac2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012ac5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012ac8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ace:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0012ad4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ad7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ada:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0012ae0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ae3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ae6:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0012aec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012aef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012af2:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0012af8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012afb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012afe:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0012b04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b07:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b0a:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0012b10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b13:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b16:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0012b19:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0012b1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b1f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b22:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012b25:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012b28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b2b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b2e:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0012b35:	83 ec 0c             	sub    esp,0xc
c0012b38:	68 17 3e 02 c0       	push   0xc0023e17
c0012b3d:	e8 0c 44 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012b42:	83 c4 10             	add    esp,0x10
c0012b45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b4b:	0f 20 da             	mov    edx,cr3
c0012b4e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0012b51:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0012b54:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0012b57:	83 ec 0c             	sub    esp,0xc
c0012b5a:	68 1a 3e 02 c0       	push   0xc0023e1a
c0012b5f:	e8 ea 43 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012b64:	83 c4 10             	add    esp,0x10
c0012b67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b6d:	83 ec 08             	sub    esp,0x8
c0012b70:	50                   	push   eax
c0012b71:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012b74:	50                   	push   eax
c0012b75:	e8 44 c0 ff ff       	call   c000ebbe <GDTEntry::setBase(unsigned int)>
c0012b7a:	83 c4 10             	add    esp,0x10
c0012b7d:	83 ec 08             	sub    esp,0x8
c0012b80:	6a 68                	push   0x68
c0012b82:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012b85:	50                   	push   eax
c0012b86:	e8 4f c0 ff ff       	call   c000ebda <GDTEntry::setLimit(unsigned int)>
c0012b8b:	83 c4 10             	add    esp,0x10
c0012b8e:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0012b92:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012b95:	83 e0 0f             	and    eax,0xf
c0012b98:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012b9b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012b9e:	83 c8 40             	or     eax,0x40
c0012ba1:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012ba4:	83 ec 0c             	sub    esp,0xc
c0012ba7:	68 1d 3e 02 c0       	push   0xc0023e1d
c0012bac:	e8 9d 43 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012bb1:	83 c4 10             	add    esp,0x10
c0012bb4:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0012bb9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012bbf:	83 ec 08             	sub    esp,0x8
c0012bc2:	50                   	push   eax
c0012bc3:	68 20 3e 02 c0       	push   0xc0023e20
c0012bc8:	e8 81 43 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012bcd:	83 c4 10             	add    esp,0x10
c0012bd0:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0012bd5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012bdb:	05 64 01 00 00       	add    eax,0x164
c0012be0:	83 ec 04             	sub    esp,0x4
c0012be3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0012be6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0012be9:	50                   	push   eax
c0012bea:	e8 1f c0 ff ff       	call   c000ec0e <GDT::addEntry(GDTEntry)>
c0012bef:	83 c4 10             	add    esp,0x10
c0012bf2:	89 c2                	mov    edx,eax
c0012bf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bf7:	89 10                	mov    DWORD PTR [eax],edx
c0012bf9:	83 ec 0c             	sub    esp,0xc
c0012bfc:	68 35 3e 02 c0       	push   0xc0023e35
c0012c01:	e8 48 43 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012c06:	83 c4 10             	add    esp,0x10
c0012c09:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0012c0e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012c14:	05 64 01 00 00       	add    eax,0x164
c0012c19:	83 ec 0c             	sub    esp,0xc
c0012c1c:	50                   	push   eax
c0012c1d:	e8 16 c0 ff ff       	call   c000ec38 <GDT::flush()>
c0012c22:	83 c4 10             	add    esp,0x10
c0012c25:	83 ec 0c             	sub    esp,0xc
c0012c28:	68 38 3e 02 c0       	push   0xc0023e38
c0012c2d:	e8 1c 43 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012c32:	83 c4 10             	add    esp,0x10
c0012c35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c38:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c3a:	c9                   	leave  
c0012c3b:	c3                   	ret    

c0012c3c <ReservedFilename::read(unsigned long long, void*, int*)>:
c0012c3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c40:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012c44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c47:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012c4c:	75 08                	jne    c0012c56 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0012c4e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012c54:	eb 38                	jmp    c0012c8e <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0012c56:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012c5b:	75 17                	jne    c0012c74 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0012c5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c62:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012c65:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012c6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c6d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012c71:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0012c74:	89 c1                	mov    ecx,eax
c0012c76:	83 e1 fd             	and    ecx,0xfffffffd
c0012c79:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0012c7f:	74 cd                	je     c0012c4e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012c81:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012c86:	83 e0 ef             	and    eax,0xffffffef
c0012c89:	83 f8 08             	cmp    eax,0x8
c0012c8c:	76 c0                	jbe    c0012c4e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012c8e:	31 c0                	xor    eax,eax
c0012c90:	c3                   	ret    
c0012c91:	90                   	nop

c0012c92 <ReservedFilename::isAtty()>:
c0012c92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c96:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012c99:	31 c0                	xor    eax,eax
c0012c9b:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0012ca1:	74 09                	je     c0012cac <ReservedFilename::isAtty()+0x1a>
c0012ca3:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0012ca9:	0f 94 c0             	sete   al
c0012cac:	c3                   	ret    
c0012cad:	90                   	nop

c0012cae <ReservedFilename::write(unsigned long long, void*, int*)>:
c0012cae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012cb2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012cb6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012cba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cbd:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012cc2:	75 08                	jne    c0012ccc <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0012cc4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012cca:	eb 3d                	jmp    c0012d09 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012ccc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012cd1:	75 17                	jne    c0012cea <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0012cd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012cd8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012cdb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012ce1:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ce3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ce7:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0012cea:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012cef:	75 04                	jne    c0012cf5 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0012cf1:	89 0a                	mov    DWORD PTR [edx],ecx
c0012cf3:	eb 14                	jmp    c0012d09 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012cf5:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0012cfa:	74 c8                	je     c0012cc4 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012cfc:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012d01:	83 e0 ef             	and    eax,0xffffffef
c0012d04:	83 f8 08             	cmp    eax,0x8
c0012d07:	76 bb                	jbe    c0012cc4 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012d09:	31 c0                	xor    eax,eax
c0012d0b:	c3                   	ret    

c0012d0c <UnixFile::getFileDescriptor()>:
c0012d0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d13:	c3                   	ret    

c0012d14 <UnixFile::UnixFile(int)>:
c0012d14:	53                   	push   ebx
c0012d15:	83 ec 28             	sub    esp,0x28
c0012d18:	ba 88 3e 02 c0       	mov    edx,0xc0023e88
c0012d1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d21:	89 10                	mov    DWORD PTR [eax],edx
c0012d23:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0012d2b:	0f 8f 90 01 00 00    	jg     c0012ec1 <UnixFile::UnixFile(int)+0x1ad>
c0012d31:	a1 40 61 02 c0       	mov    eax,ds:0xc0026140
c0012d36:	8d 50 01             	lea    edx,[eax+0x1]
c0012d39:	89 15 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edx
c0012d3f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012d43:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012d46:	83 ec 08             	sub    esp,0x8
c0012d49:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012d4d:	68 38 e2 02 c0       	push   0xc002e238
c0012d52:	e8 27 ed 00 00       	call   c0021a7e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0012d57:	83 c4 10             	add    esp,0x10
c0012d5a:	a0 34 e2 02 c0       	mov    al,ds:0xc002e234
c0012d5f:	83 f0 01             	xor    eax,0x1
c0012d62:	0f b6 c0             	movzx  eax,al
c0012d65:	85 c0                	test   eax,eax
c0012d67:	0f 84 55 01 00 00    	je     c0012ec2 <UnixFile::UnixFile(int)+0x1ae>
c0012d6d:	c6 05 34 e2 02 c0 01 	mov    BYTE PTR ds:0xc002e234,0x1
c0012d74:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0012d7c:	83 ec 0c             	sub    esp,0xc
c0012d7f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d83:	e8 e8 cc ff ff       	call   c000fa70 <malloc>
c0012d88:	83 c4 10             	add    esp,0x10
c0012d8b:	89 c3                	mov    ebx,eax
c0012d8d:	83 ec 08             	sub    esp,0x8
c0012d90:	68 03 ff ff 0f       	push   0xfffff03
c0012d95:	53                   	push   ebx
c0012d96:	e8 2d 01 00 00       	call   c0012ec8 <ReservedFilename::ReservedFilename(int)>
c0012d9b:	83 c4 10             	add    esp,0x10
c0012d9e:	89 1d 2c e2 02 c0    	mov    DWORD PTR ds:0xc002e22c,ebx
c0012da4:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0012dac:	83 ec 0c             	sub    esp,0xc
c0012daf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012db3:	e8 b8 cc ff ff       	call   c000fa70 <malloc>
c0012db8:	83 c4 10             	add    esp,0x10
c0012dbb:	89 c3                	mov    ebx,eax
c0012dbd:	83 ec 08             	sub    esp,0x8
c0012dc0:	68 01 ff ff 0f       	push   0xfffff01
c0012dc5:	53                   	push   ebx
c0012dc6:	e8 fd 00 00 00       	call   c0012ec8 <ReservedFilename::ReservedFilename(int)>
c0012dcb:	83 c4 10             	add    esp,0x10
c0012dce:	89 1d 30 e2 02 c0    	mov    DWORD PTR ds:0xc002e230,ebx
c0012dd4:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0012ddc:	83 ec 0c             	sub    esp,0xc
c0012ddf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012de3:	e8 88 cc ff ff       	call   c000fa70 <malloc>
c0012de8:	83 c4 10             	add    esp,0x10
c0012deb:	89 c3                	mov    ebx,eax
c0012ded:	83 ec 08             	sub    esp,0x8
c0012df0:	68 00 ff ff 0f       	push   0xfffff00
c0012df5:	53                   	push   ebx
c0012df6:	e8 cd 00 00 00       	call   c0012ec8 <ReservedFilename::ReservedFilename(int)>
c0012dfb:	83 c4 10             	add    esp,0x10
c0012dfe:	89 1d 24 e2 02 c0    	mov    DWORD PTR ds:0xc002e224,ebx
c0012e04:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0012e0c:	83 ec 0c             	sub    esp,0xc
c0012e0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012e13:	e8 58 cc ff ff       	call   c000fa70 <malloc>
c0012e18:	83 c4 10             	add    esp,0x10
c0012e1b:	89 c3                	mov    ebx,eax
c0012e1d:	83 ec 08             	sub    esp,0x8
c0012e20:	68 02 ff ff 0f       	push   0xfffff02
c0012e25:	53                   	push   ebx
c0012e26:	e8 9d 00 00 00       	call   c0012ec8 <ReservedFilename::ReservedFilename(int)>
c0012e2b:	83 c4 10             	add    esp,0x10
c0012e2e:	89 1d 28 e2 02 c0    	mov    DWORD PTR ds:0xc002e228,ebx
c0012e34:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012e3c:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0012e41:	7f 7f                	jg     c0012ec2 <UnixFile::UnixFile(int)+0x1ae>
c0012e43:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0012e4b:	83 ec 0c             	sub    esp,0xc
c0012e4e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012e52:	e8 19 cc ff ff       	call   c000fa70 <malloc>
c0012e57:	83 c4 10             	add    esp,0x10
c0012e5a:	89 c3                	mov    ebx,eax
c0012e5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e60:	05 10 ff ff 0f       	add    eax,0xfffff10
c0012e65:	83 ec 08             	sub    esp,0x8
c0012e68:	50                   	push   eax
c0012e69:	53                   	push   ebx
c0012e6a:	e8 59 00 00 00       	call   c0012ec8 <ReservedFilename::ReservedFilename(int)>
c0012e6f:	83 c4 10             	add    esp,0x10
c0012e72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e76:	89 1c 85 00 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e00],ebx
c0012e7d:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0012e85:	83 ec 0c             	sub    esp,0xc
c0012e88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012e8c:	e8 df cb ff ff       	call   c000fa70 <malloc>
c0012e91:	83 c4 10             	add    esp,0x10
c0012e94:	89 c3                	mov    ebx,eax
c0012e96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e9a:	05 20 ff ff 0f       	add    eax,0xfffff20
c0012e9f:	83 ec 08             	sub    esp,0x8
c0012ea2:	50                   	push   eax
c0012ea3:	53                   	push   ebx
c0012ea4:	e8 1f 00 00 00       	call   c0012ec8 <ReservedFilename::ReservedFilename(int)>
c0012ea9:	83 c4 10             	add    esp,0x10
c0012eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012eb0:	89 1c 85 c0 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e40],ebx
c0012eb7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012ebc:	e9 7b ff ff ff       	jmp    c0012e3c <UnixFile::UnixFile(int)+0x128>
c0012ec1:	90                   	nop
c0012ec2:	83 c4 28             	add    esp,0x28
c0012ec5:	5b                   	pop    ebx
c0012ec6:	c3                   	ret    
c0012ec7:	90                   	nop

c0012ec8 <ReservedFilename::ReservedFilename(int)>:
c0012ec8:	83 ec 0c             	sub    esp,0xc
c0012ecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ecf:	83 ec 08             	sub    esp,0x8
c0012ed2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ed6:	50                   	push   eax
c0012ed7:	e8 38 fe ff ff       	call   c0012d14 <UnixFile::UnixFile(int)>
c0012edc:	83 c4 10             	add    esp,0x10
c0012edf:	ba a4 3e 02 c0       	mov    edx,0xc0023ea4
c0012ee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ee8:	89 10                	mov    DWORD PTR [eax],edx
c0012eea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012eee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012ef2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012ef5:	90                   	nop
c0012ef6:	83 c4 0c             	add    esp,0xc
c0012ef9:	c3                   	ret    

c0012efa <UnixFile::~UnixFile()>:
c0012efa:	83 ec 1c             	sub    esp,0x1c
c0012efd:	ba 88 3e 02 c0       	mov    edx,0xc0023e88
c0012f02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012f06:	89 10                	mov    DWORD PTR [eax],edx
c0012f08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012f0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f0f:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0012f14:	7f 76                	jg     c0012f8c <UnixFile::~UnixFile()+0x92>
c0012f16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012f1e:	83 ec 0c             	sub    esp,0xc
c0012f21:	68 38 e2 02 c0       	push   0xc002e238
c0012f26:	e8 27 ec 00 00       	call   c0021b52 <LinkedList<UnixFile>::getFirstElement()>
c0012f2b:	83 c4 10             	add    esp,0x10
c0012f2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f32:	83 ec 0c             	sub    esp,0xc
c0012f35:	68 38 e2 02 c0       	push   0xc002e238
c0012f3a:	e8 1b ec 00 00       	call   c0021b5a <LinkedList<UnixFile>::removeFirst()>
c0012f3f:	83 c4 10             	add    esp,0x10
c0012f42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012f46:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0012f4a:	74 43                	je     c0012f8f <UnixFile::~UnixFile()+0x95>
c0012f4c:	83 ec 08             	sub    esp,0x8
c0012f4f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012f53:	68 38 e2 02 c0       	push   0xc002e238
c0012f58:	e8 21 eb 00 00       	call   c0021a7e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0012f5d:	83 c4 10             	add    esp,0x10
c0012f60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012f64:	8d 50 01             	lea    edx,[eax+0x1]
c0012f67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012f6b:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0012f70:	0f 94 c0             	sete   al
c0012f73:	0f b6 c0             	movzx  eax,al
c0012f76:	85 c0                	test   eax,eax
c0012f78:	74 a4                	je     c0012f1e <UnixFile::~UnixFile()+0x24>
c0012f7a:	83 ec 0c             	sub    esp,0xc
c0012f7d:	68 3c 3e 02 c0       	push   0xc0023e3c
c0012f82:	e8 2f ce ff ff       	call   c000fdb6 <KePanic(char const*)>
c0012f87:	83 c4 10             	add    esp,0x10
c0012f8a:	eb 92                	jmp    c0012f1e <UnixFile::~UnixFile()+0x24>
c0012f8c:	90                   	nop
c0012f8d:	eb 01                	jmp    c0012f90 <UnixFile::~UnixFile()+0x96>
c0012f8f:	90                   	nop
c0012f90:	90                   	nop
c0012f91:	83 c4 1c             	add    esp,0x1c
c0012f94:	c3                   	ret    
c0012f95:	90                   	nop

c0012f96 <UnixFile::~UnixFile()>:
c0012f96:	83 ec 0c             	sub    esp,0xc
c0012f99:	83 ec 0c             	sub    esp,0xc
c0012f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fa0:	e8 55 ff ff ff       	call   c0012efa <UnixFile::~UnixFile()>
c0012fa5:	83 c4 10             	add    esp,0x10
c0012fa8:	83 ec 08             	sub    esp,0x8
c0012fab:	6a 0c                	push   0xc
c0012fad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fb1:	e8 31 a2 ff ff       	call   c000d1e7 <operator delete(void*, unsigned long)>
c0012fb6:	83 c4 10             	add    esp,0x10
c0012fb9:	83 c4 0c             	add    esp,0xc
c0012fbc:	c3                   	ret    
c0012fbd:	90                   	nop

c0012fbe <ReservedFilename::~ReservedFilename()>:
c0012fbe:	83 ec 0c             	sub    esp,0xc
c0012fc1:	ba a4 3e 02 c0       	mov    edx,0xc0023ea4
c0012fc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fca:	89 10                	mov    DWORD PTR [eax],edx
c0012fcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fd0:	83 ec 0c             	sub    esp,0xc
c0012fd3:	50                   	push   eax
c0012fd4:	e8 21 ff ff ff       	call   c0012efa <UnixFile::~UnixFile()>
c0012fd9:	83 c4 10             	add    esp,0x10
c0012fdc:	90                   	nop
c0012fdd:	83 c4 0c             	add    esp,0xc
c0012fe0:	c3                   	ret    
c0012fe1:	90                   	nop

c0012fe2 <ReservedFilename::~ReservedFilename()>:
c0012fe2:	83 ec 0c             	sub    esp,0xc
c0012fe5:	83 ec 0c             	sub    esp,0xc
c0012fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fec:	e8 cd ff ff ff       	call   c0012fbe <ReservedFilename::~ReservedFilename()>
c0012ff1:	83 c4 10             	add    esp,0x10
c0012ff4:	83 ec 08             	sub    esp,0x8
c0012ff7:	6a 0c                	push   0xc
c0012ff9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ffd:	e8 e5 a1 ff ff       	call   c000d1e7 <operator delete(void*, unsigned long)>
c0013002:	83 c4 10             	add    esp,0x10
c0013005:	83 c4 0c             	add    esp,0xc
c0013008:	c3                   	ret    

c0013009 <KeGetFileFromDescriptor(int)>:
c0013009:	53                   	push   ebx
c001300a:	83 ec 10             	sub    esp,0x10
c001300d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013011:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0013017:	53                   	push   ebx
c0013018:	68 5c 3e 02 c0       	push   0xc0023e5c
c001301d:	e8 2c 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013022:	83 c4 10             	add    esp,0x10
c0013025:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001302b:	7f 30                	jg     c001305d <KeGetFileFromDescriptor(int)+0x54>
c001302d:	83 ec 0c             	sub    esp,0xc
c0013030:	68 38 e2 02 c0       	push   0xc002e238
c0013035:	e8 18 eb 00 00       	call   c0021b52 <LinkedList<UnixFile>::getFirstElement()>
c001303a:	8d 50 ff             	lea    edx,[eax-0x1]
c001303d:	83 c4 10             	add    esp,0x10
c0013040:	83 fa fd             	cmp    edx,0xfffffffd
c0013043:	76 04                	jbe    c0013049 <KeGetFileFromDescriptor(int)+0x40>
c0013045:	31 c0                	xor    eax,eax
c0013047:	eb 6e                	jmp    c00130b7 <KeGetFileFromDescriptor(int)+0xae>
c0013049:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001304c:	74 69                	je     c00130b7 <KeGetFileFromDescriptor(int)+0xae>
c001304e:	52                   	push   edx
c001304f:	52                   	push   edx
c0013050:	50                   	push   eax
c0013051:	68 38 e2 02 c0       	push   0xc002e238
c0013056:	e8 a1 eb 00 00       	call   c0021bfc <LinkedList<UnixFile>::getNext(UnixFile*)>
c001305b:	eb dd                	jmp    c001303a <KeGetFileFromDescriptor(int)+0x31>
c001305d:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0013063:	a1 2c e2 02 c0       	mov    eax,ds:0xc002e22c
c0013068:	74 4d                	je     c00130b7 <KeGetFileFromDescriptor(int)+0xae>
c001306a:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0013070:	a1 30 e2 02 c0       	mov    eax,ds:0xc002e230
c0013075:	74 40                	je     c00130b7 <KeGetFileFromDescriptor(int)+0xae>
c0013077:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001307d:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0013082:	74 33                	je     c00130b7 <KeGetFileFromDescriptor(int)+0xae>
c0013084:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001308a:	a1 24 e2 02 c0       	mov    eax,ds:0xc002e224
c001308f:	74 26                	je     c00130b7 <KeGetFileFromDescriptor(int)+0xae>
c0013091:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0013097:	83 f8 08             	cmp    eax,0x8
c001309a:	77 09                	ja     c00130a5 <KeGetFileFromDescriptor(int)+0x9c>
c001309c:	8b 04 85 00 e2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1e00]
c00130a3:	eb 12                	jmp    c00130b7 <KeGetFileFromDescriptor(int)+0xae>
c00130a5:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00130ab:	83 fb 08             	cmp    ebx,0x8
c00130ae:	77 95                	ja     c0013045 <KeGetFileFromDescriptor(int)+0x3c>
c00130b0:	8b 04 9d c0 e1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1e40]
c00130b7:	83 c4 08             	add    esp,0x8
c00130ba:	5b                   	pop    ebx
c00130bb:	c3                   	ret    

c00130bc <__static_initialization_and_destruction_0(int, int)>:
c00130bc:	83 ec 0c             	sub    esp,0xc
c00130bf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00130c4:	75 34                	jne    c00130fa <__static_initialization_and_destruction_0(int, int)+0x3e>
c00130c6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00130ce:	75 2a                	jne    c00130fa <__static_initialization_and_destruction_0(int, int)+0x3e>
c00130d0:	83 ec 0c             	sub    esp,0xc
c00130d3:	68 38 e2 02 c0       	push   0xc002e238
c00130d8:	e8 5f e9 00 00       	call   c0021a3c <LinkedList<UnixFile>::LinkedList()>
c00130dd:	83 c4 10             	add    esp,0x10
c00130e0:	83 ec 04             	sub    esp,0x4
c00130e3:	68 a8 59 02 c0       	push   0xc00259a8
c00130e8:	68 38 e2 02 c0       	push   0xc002e238
c00130ed:	68 3a 1a 02 c0       	push   0xc0021a3a
c00130f2:	e8 a0 a0 ff ff       	call   c000d197 <__cxa_atexit>
c00130f7:	83 c4 10             	add    esp,0x10
c00130fa:	90                   	nop
c00130fb:	83 c4 0c             	add    esp,0xc
c00130fe:	c3                   	ret    

c00130ff <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00130ff:	83 ec 0c             	sub    esp,0xc
c0013102:	83 ec 08             	sub    esp,0x8
c0013105:	68 ff ff 00 00       	push   0xffff
c001310a:	6a 01                	push   0x1
c001310c:	e8 ab ff ff ff       	call   c00130bc <__static_initialization_and_destruction_0(int, int)>
c0013111:	83 c4 10             	add    esp,0x10
c0013114:	83 c4 0c             	add    esp,0xc
c0013117:	c3                   	ret    

c0013118 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0013118:	53                   	push   ebx
c0013119:	8b 15 48 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026148
c001311f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013123:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013127:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c001312d:	89 d8                	mov    eax,ebx
c001312f:	d1 e8                	shr    eax,1
c0013131:	01 d0                	add    eax,edx
c0013133:	80 e3 01             	and    bl,0x1
c0013136:	8a 10                	mov    dl,BYTE PTR [eax]
c0013138:	75 09                	jne    c0013143 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c001313a:	83 e2 f0             	and    edx,0xfffffff0
c001313d:	09 ca                	or     edx,ecx
c001313f:	88 10                	mov    BYTE PTR [eax],dl
c0013141:	5b                   	pop    ebx
c0013142:	c3                   	ret    
c0013143:	0f b6 c9             	movzx  ecx,cl
c0013146:	83 e2 0f             	and    edx,0xf
c0013149:	c1 e1 04             	shl    ecx,0x4
c001314c:	09 ca                	or     edx,ecx
c001314e:	88 10                	mov    BYTE PTR [eax],dl
c0013150:	5b                   	pop    ebx
c0013151:	c3                   	ret    

c0013152 <Virt::getPageState(unsigned long)>:
c0013152:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013156:	8b 0d 48 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026148
c001315c:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0013162:	89 d0                	mov    eax,edx
c0013164:	d1 e8                	shr    eax,1
c0013166:	80 e2 01             	and    dl,0x1
c0013169:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001316c:	74 03                	je     c0013171 <Virt::getPageState(unsigned long)+0x1f>
c001316e:	c1 e8 04             	shr    eax,0x4
c0013171:	83 e0 0f             	and    eax,0xf
c0013174:	c3                   	ret    

c0013175 <Virt::allocateKernelVirtualPages(int)>:
c0013175:	55                   	push   ebp
c0013176:	57                   	push   edi
c0013177:	56                   	push   esi
c0013178:	31 f6                	xor    esi,esi
c001317a:	53                   	push   ebx
c001317b:	31 db                	xor    ebx,ebx
c001317d:	83 ec 1c             	sub    esp,0x1c
c0013180:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0013185:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013189:	8b 2d 44 61 02 c0    	mov    ebp,DWORD PTR ds:0xc0026144
c001318f:	55                   	push   ebp
c0013190:	e8 bd ff ff ff       	call   c0013152 <Virt::getPageState(unsigned long)>
c0013195:	5a                   	pop    edx
c0013196:	84 c0                	test   al,al
c0013198:	75 3d                	jne    c00131d7 <Virt::allocateKernelVirtualPages(int)+0x62>
c001319a:	85 db                	test   ebx,ebx
c001319c:	0f 44 f5             	cmove  esi,ebp
c001319f:	83 c3 01             	add    ebx,0x1
c00131a2:	39 fb                	cmp    ebx,edi
c00131a4:	74 5e                	je     c0013204 <Virt::allocateKernelVirtualPages(int)+0x8f>
c00131a6:	83 c5 01             	add    ebp,0x1
c00131a9:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c00131af:	76 33                	jbe    c00131e4 <Virt::allocateKernelVirtualPages(int)+0x6f>
c00131b1:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00131b6:	c7 05 44 61 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0026144,0xc8000
c00131c0:	75 2a                	jne    c00131ec <Virt::allocateKernelVirtualPages(int)+0x77>
c00131c2:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00131c7:	bd 00 80 0c 00       	mov    ebp,0xc8000
c00131cc:	55                   	push   ebp
c00131cd:	e8 80 ff ff ff       	call   c0013152 <Virt::getPageState(unsigned long)>
c00131d2:	5a                   	pop    edx
c00131d3:	84 c0                	test   al,al
c00131d5:	74 c3                	je     c001319a <Virt::allocateKernelVirtualPages(int)+0x25>
c00131d7:	83 c5 01             	add    ebp,0x1
c00131da:	31 db                	xor    ebx,ebx
c00131dc:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c00131e2:	77 cd                	ja     c00131b1 <Virt::allocateKernelVirtualPages(int)+0x3c>
c00131e4:	89 2d 44 61 02 c0    	mov    DWORD PTR ds:0xc0026144,ebp
c00131ea:	eb a3                	jmp    c001318f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00131ec:	83 ec 0c             	sub    esp,0xc
c00131ef:	68 b8 3e 02 c0       	push   0xc0023eb8
c00131f4:	e8 bd cb ff ff       	call   c000fdb6 <KePanic(char const*)>
c00131f9:	8b 2d 44 61 02 c0    	mov    ebp,DWORD PTR ds:0xc0026144
c00131ff:	83 c4 10             	add    esp,0x10
c0013202:	eb 8b                	jmp    c001318f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0013204:	89 35 44 61 02 c0    	mov    DWORD PTR ds:0xc0026144,esi
c001320a:	83 fb 01             	cmp    ebx,0x1
c001320d:	74 63                	je     c0013272 <Virt::allocateKernelVirtualPages(int)+0xfd>
c001320f:	85 ff                	test   edi,edi
c0013211:	74 41                	je     c0013254 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0013213:	89 f0                	mov    eax,esi
c0013215:	31 db                	xor    ebx,ebx
c0013217:	8d 6f ff             	lea    ebp,[edi-0x1]
c001321a:	eb 16                	jmp    c0013232 <Virt::allocateKernelVirtualPages(int)+0xbd>
c001321c:	6a 01                	push   0x1
c001321e:	83 c3 01             	add    ebx,0x1
c0013221:	50                   	push   eax
c0013222:	e8 f1 fe ff ff       	call   c0013118 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013227:	39 fb                	cmp    ebx,edi
c0013229:	58                   	pop    eax
c001322a:	5a                   	pop    edx
c001322b:	74 27                	je     c0013254 <Virt::allocateKernelVirtualPages(int)+0xdf>
c001322d:	a1 44 61 02 c0       	mov    eax,ds:0xc0026144
c0013232:	8d 50 01             	lea    edx,[eax+0x1]
c0013235:	85 db                	test   ebx,ebx
c0013237:	89 15 44 61 02 c0    	mov    DWORD PTR ds:0xc0026144,edx
c001323d:	74 22                	je     c0013261 <Virt::allocateKernelVirtualPages(int)+0xec>
c001323f:	39 dd                	cmp    ebp,ebx
c0013241:	75 d9                	jne    c001321c <Virt::allocateKernelVirtualPages(int)+0xa7>
c0013243:	6a 03                	push   0x3
c0013245:	83 c3 01             	add    ebx,0x1
c0013248:	50                   	push   eax
c0013249:	e8 ca fe ff ff       	call   c0013118 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001324e:	39 fb                	cmp    ebx,edi
c0013250:	59                   	pop    ecx
c0013251:	58                   	pop    eax
c0013252:	75 d9                	jne    c001322d <Virt::allocateKernelVirtualPages(int)+0xb8>
c0013254:	83 c4 1c             	add    esp,0x1c
c0013257:	89 f0                	mov    eax,esi
c0013259:	5b                   	pop    ebx
c001325a:	c1 e0 0c             	shl    eax,0xc
c001325d:	5e                   	pop    esi
c001325e:	5f                   	pop    edi
c001325f:	5d                   	pop    ebp
c0013260:	c3                   	ret    
c0013261:	6a 02                	push   0x2
c0013263:	bb 01 00 00 00       	mov    ebx,0x1
c0013268:	50                   	push   eax
c0013269:	e8 aa fe ff ff       	call   c0013118 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001326e:	58                   	pop    eax
c001326f:	5a                   	pop    edx
c0013270:	eb bb                	jmp    c001322d <Virt::allocateKernelVirtualPages(int)+0xb8>
c0013272:	6a 04                	push   0x4
c0013274:	56                   	push   esi
c0013275:	8d 46 01             	lea    eax,[esi+0x1]
c0013278:	a3 44 61 02 c0       	mov    ds:0xc0026144,eax
c001327d:	e8 96 fe ff ff       	call   c0013118 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013282:	89 f0                	mov    eax,esi
c0013284:	59                   	pop    ecx
c0013285:	c1 e0 0c             	shl    eax,0xc
c0013288:	5b                   	pop    ebx
c0013289:	83 c4 1c             	add    esp,0x1c
c001328c:	5b                   	pop    ebx
c001328d:	5e                   	pop    esi
c001328e:	5f                   	pop    edi
c001328f:	5d                   	pop    ebp
c0013290:	c3                   	ret    

c0013291 <Virt::freeSwapfilePage(unsigned long)>:
c0013291:	53                   	push   ebx
c0013292:	8b 15 4c e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e24c
c0013298:	b8 01 00 00 00       	mov    eax,0x1
c001329d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00132a1:	d3 e0                	shl    eax,cl
c00132a3:	89 cb                	mov    ebx,ecx
c00132a5:	c1 eb 05             	shr    ebx,0x5
c00132a8:	f7 d0                	not    eax
c00132aa:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c00132ad:	21 c1                	and    ecx,eax
c00132af:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c00132b2:	5b                   	pop    ebx
c00132b3:	c3                   	ret    

c00132b4 <Virt::swapIDToSector(unsigned long)>:
c00132b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132b8:	8b 15 4c 61 02 c0    	mov    edx,DWORD PTR ds:0xc002614c
c00132be:	8b 0d 54 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026154
c00132c4:	0f af c2             	imul   eax,edx
c00132c7:	01 c8                	add    eax,ecx
c00132c9:	c3                   	ret    

c00132ca <Virt::allocateSwapfilePage()>:
c00132ca:	55                   	push   ebp
c00132cb:	31 d2                	xor    edx,edx
c00132cd:	57                   	push   edi
c00132ce:	56                   	push   esi
c00132cf:	53                   	push   ebx
c00132d0:	83 ec 0c             	sub    esp,0xc
c00132d3:	8b 1d 50 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026150
c00132d9:	8b 0d 4c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002614c
c00132df:	89 d8                	mov    eax,ebx
c00132e1:	f7 f1                	div    ecx
c00132e3:	39 cb                	cmp    ebx,ecx
c00132e5:	72 2f                	jb     c0013316 <Virt::allocateSwapfilePage()+0x4c>
c00132e7:	8b 35 4c e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e24c
c00132ed:	8b 16                	mov    edx,DWORD PTR [esi]
c00132ef:	f6 c2 01             	test   dl,0x1
c00132f2:	74 3e                	je     c0013332 <Virt::allocateSwapfilePage()+0x68>
c00132f4:	31 c9                	xor    ecx,ecx
c00132f6:	bf 01 00 00 00       	mov    edi,0x1
c00132fb:	eb 12                	jmp    c001330f <Virt::allocateSwapfilePage()+0x45>
c00132fd:	89 ca                	mov    edx,ecx
c00132ff:	89 fd                	mov    ebp,edi
c0013301:	c1 ea 05             	shr    edx,0x5
c0013304:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0013307:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013309:	d3 e5                	shl    ebp,cl
c001330b:	85 ea                	test   edx,ebp
c001330d:	74 2c                	je     c001333b <Virt::allocateSwapfilePage()+0x71>
c001330f:	83 c1 01             	add    ecx,0x1
c0013312:	39 c8                	cmp    eax,ecx
c0013314:	77 e7                	ja     c00132fd <Virt::allocateSwapfilePage()+0x33>
c0013316:	83 ec 0c             	sub    esp,0xc
c0013319:	68 3b 44 02 c0       	push   0xc002443b
c001331e:	e8 93 ca ff ff       	call   c000fdb6 <KePanic(char const*)>
c0013323:	83 c4 10             	add    esp,0x10
c0013326:	31 c9                	xor    ecx,ecx
c0013328:	83 c4 0c             	add    esp,0xc
c001332b:	89 c8                	mov    eax,ecx
c001332d:	5b                   	pop    ebx
c001332e:	5e                   	pop    esi
c001332f:	5f                   	pop    edi
c0013330:	5d                   	pop    ebp
c0013331:	c3                   	ret    
c0013332:	89 f3                	mov    ebx,esi
c0013334:	bd 01 00 00 00       	mov    ebp,0x1
c0013339:	31 c9                	xor    ecx,ecx
c001333b:	09 ea                	or     edx,ebp
c001333d:	89 c8                	mov    eax,ecx
c001333f:	89 13                	mov    DWORD PTR [ebx],edx
c0013341:	83 c4 0c             	add    esp,0xc
c0013344:	5b                   	pop    ebx
c0013345:	5e                   	pop    esi
c0013346:	5f                   	pop    edi
c0013347:	5d                   	pop    ebp
c0013348:	c3                   	ret    

c0013349 <Virt::virtualMemorySetup()>:
c0013349:	53                   	push   ebx
c001334a:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001334f:	6a 0f                	push   0xf
c0013351:	53                   	push   ebx
c0013352:	83 c3 01             	add    ebx,0x1
c0013355:	e8 be fd ff ff       	call   c0013118 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001335a:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0013360:	58                   	pop    eax
c0013361:	5a                   	pop    edx
c0013362:	75 eb                	jne    c001334f <Virt::virtualMemorySetup()+0x6>
c0013364:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0013369:	6a 00                	push   0x0
c001336b:	53                   	push   ebx
c001336c:	83 c3 01             	add    ebx,0x1
c001336f:	e8 a4 fd ff ff       	call   c0013118 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013374:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001337a:	59                   	pop    ecx
c001337b:	58                   	pop    eax
c001337c:	75 eb                	jne    c0013369 <Virt::virtualMemorySetup()+0x20>
c001337e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0013383:	6a 0f                	push   0xf
c0013385:	53                   	push   ebx
c0013386:	83 c3 01             	add    ebx,0x1
c0013389:	e8 8a fd ff ff       	call   c0013118 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001338e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0013394:	58                   	pop    eax
c0013395:	5a                   	pop    edx
c0013396:	75 eb                	jne    c0013383 <Virt::virtualMemorySetup()+0x3a>
c0013398:	5b                   	pop    ebx
c0013399:	c3                   	ret    

c001339a <Virt::setupPageSwapping(int)>:
c001339a:	53                   	push   ebx
c001339b:	83 ec 0c             	sub    esp,0xc
c001339e:	a1 e8 ba 02 c0       	mov    eax,ds:0xc002bae8
c00133a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00133a7:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00133ad:	8b 10                	mov    edx,DWORD PTR [eax]
c00133af:	53                   	push   ebx
c00133b0:	68 52 44 02 c0       	push   0xc0024452
c00133b5:	50                   	push   eax
c00133b6:	ff 52 60             	call   DWORD PTR [edx+0x60]
c00133b9:	c1 e3 0b             	shl    ebx,0xb
c00133bc:	89 1d 50 61 02 c0    	mov    DWORD PTR ds:0xc0026150,ebx
c00133c2:	c1 eb 08             	shr    ebx,0x8
c00133c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00133c8:	c6 05 58 61 02 c0 43 	mov    BYTE PTR ds:0xc0026158,0x43
c00133cf:	c7 05 4c 61 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002614c,0x8
c00133d9:	a3 54 61 02 c0       	mov    ds:0xc0026154,eax
c00133de:	e8 8d c6 ff ff       	call   c000fa70 <malloc>
c00133e3:	31 d2                	xor    edx,edx
c00133e5:	83 c4 0c             	add    esp,0xc
c00133e8:	a3 4c e2 02 c0       	mov    ds:0xc002e24c,eax
c00133ed:	89 c1                	mov    ecx,eax
c00133ef:	a1 50 61 02 c0       	mov    eax,ds:0xc0026150
c00133f4:	f7 35 4c 61 02 c0    	div    DWORD PTR ds:0xc002614c
c00133fa:	c1 e8 05             	shr    eax,0x5
c00133fd:	50                   	push   eax
c00133fe:	6a 00                	push   0x0
c0013400:	51                   	push   ecx
c0013401:	e8 ea d0 fe ff       	call   c00004f0 <memset>
c0013406:	83 c4 18             	add    esp,0x18
c0013409:	5b                   	pop    ebx
c001340a:	c3                   	ret    
c001340b:	90                   	nop

c001340c <VAS::setCPUSpecific(unsigned long)>:
c001340c:	c3                   	ret    
c001340d:	90                   	nop

c001340e <VAS::VAS(VAS*)>:
c001340e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013412:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013419:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001341d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013424:	90                   	nop
c0013425:	c3                   	ret    

c0013426 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0013426:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001342a:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001342f:	89 c2                	mov    edx,eax
c0013431:	c1 ea 16             	shr    edx,0x16
c0013434:	c1 e8 0a             	shr    eax,0xa
c0013437:	83 f9 01             	cmp    ecx,0x1
c001343a:	19 c9                	sbb    ecx,ecx
c001343c:	25 fc 0f 00 00       	and    eax,0xffc
c0013441:	c1 e2 0c             	shl    edx,0xc
c0013444:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c001344a:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0013451:	01 d0                	add    eax,edx
c0013453:	c3                   	ret    

c0013454 <VAS::getPageTableEntry(unsigned long)>:
c0013454:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013458:	89 ca                	mov    edx,ecx
c001345a:	c1 ea 16             	shr    edx,0x16
c001345d:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0013463:	c1 e9 0a             	shr    ecx,0xa
c0013466:	c1 e0 0c             	shl    eax,0xc
c0013469:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c001346f:	8d 04 08             	lea    eax,[eax+ecx*1]
c0013472:	c3                   	ret    

c0013473 <Virt::freeKernelVirtualPages(unsigned long)>:
c0013473:	55                   	push   ebp
c0013474:	57                   	push   edi
c0013475:	bf 01 00 00 00       	mov    edi,0x1
c001347a:	56                   	push   esi
c001347b:	53                   	push   ebx
c001347c:	83 ec 1c             	sub    esp,0x1c
c001347f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013483:	c1 ee 0c             	shr    esi,0xc
c0013486:	eb 48                	jmp    c00134d0 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0013488:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c001348d:	83 ec 08             	sub    esp,0x8
c0013490:	55                   	push   ebp
c0013491:	50                   	push   eax
c0013492:	e8 bd ff ff ff       	call   c0013454 <VAS::getPageTableEntry(unsigned long)>
c0013497:	83 c4 10             	add    esp,0x10
c001349a:	8b 10                	mov    edx,DWORD PTR [eax]
c001349c:	f6 c6 04             	test   dh,0x4
c001349f:	75 70                	jne    c0013511 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00134a1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00134a7:	83 fb 04             	cmp    ebx,0x4
c00134aa:	0f 84 8a 00 00 00    	je     c001353a <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00134b0:	83 fb 02             	cmp    ebx,0x2
c00134b3:	0f 84 9a 00 00 00    	je     c0013553 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c00134b9:	83 fb 03             	cmp    ebx,0x3
c00134bc:	0f 84 be 00 00 00    	je     c0013580 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c00134c2:	83 fb 01             	cmp    ebx,0x1
c00134c5:	0f 84 a2 00 00 00    	je     c001356d <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00134cb:	83 c6 01             	add    esi,0x1
c00134ce:	31 ff                	xor    edi,edi
c00134d0:	56                   	push   esi
c00134d1:	89 f5                	mov    ebp,esi
c00134d3:	e8 7a fc ff ff       	call   c0013152 <Virt::getPageState(unsigned long)>
c00134d8:	c1 e5 0c             	shl    ebp,0xc
c00134db:	5a                   	pop    edx
c00134dc:	0f b6 d8             	movzx  ebx,al
c00134df:	85 db                	test   ebx,ebx
c00134e1:	75 a5                	jne    c0013488 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00134e3:	83 ec 0c             	sub    esp,0xc
c00134e6:	68 69 44 02 c0       	push   0xc0024469
c00134eb:	e8 c6 c8 ff ff       	call   c000fdb6 <KePanic(char const*)>
c00134f0:	5a                   	pop    edx
c00134f1:	59                   	pop    ecx
c00134f2:	55                   	push   ebp
c00134f3:	8b 2d 50 e2 02 c0    	mov    ebp,DWORD PTR ds:0xc002e250
c00134f9:	55                   	push   ebp
c00134fa:	e8 55 ff ff ff       	call   c0013454 <VAS::getPageTableEntry(unsigned long)>
c00134ff:	83 c4 10             	add    esp,0x10
c0013502:	8b 10                	mov    edx,DWORD PTR [eax]
c0013504:	f6 c6 04             	test   dh,0x4
c0013507:	75 08                	jne    c0013511 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0013509:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001350f:	eb ba                	jmp    c00134cb <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013511:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013515:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001351b:	83 ec 0c             	sub    esp,0xc
c001351e:	52                   	push   edx
c001351f:	e8 23 ca ff ff       	call   c000ff47 <Phys::freePage(unsigned long)>
c0013524:	83 c4 10             	add    esp,0x10
c0013527:	83 fb 04             	cmp    ebx,0x4
c001352a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001352e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013534:	0f 85 76 ff ff ff    	jne    c00134b0 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c001353a:	83 e7 01             	and    edi,0x1
c001353d:	75 46                	jne    c0013585 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c001353f:	c7 44 24 30 d8 3e 02 c0 	mov    DWORD PTR [esp+0x30],0xc0023ed8
c0013547:	83 c4 1c             	add    esp,0x1c
c001354a:	5b                   	pop    ebx
c001354b:	5e                   	pop    esi
c001354c:	5f                   	pop    edi
c001354d:	5d                   	pop    ebp
c001354e:	e9 63 c8 ff ff       	jmp    c000fdb6 <KePanic(char const*)>
c0013553:	83 e7 01             	and    edi,0x1
c0013556:	75 15                	jne    c001356d <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013558:	83 ec 0c             	sub    esp,0xc
c001355b:	68 85 44 02 c0       	push   0xc0024485
c0013560:	e8 51 c8 ff ff       	call   c000fdb6 <KePanic(char const*)>
c0013565:	83 c4 10             	add    esp,0x10
c0013568:	e9 5e ff ff ff       	jmp    c00134cb <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001356d:	83 ec 08             	sub    esp,0x8
c0013570:	6a 00                	push   0x0
c0013572:	56                   	push   esi
c0013573:	e8 a0 fb ff ff       	call   c0013118 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013578:	83 c4 10             	add    esp,0x10
c001357b:	e9 4b ff ff ff       	jmp    c00134cb <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013580:	83 e7 01             	and    edi,0x1
c0013583:	75 16                	jne    c001359b <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0013585:	83 ec 08             	sub    esp,0x8
c0013588:	6a 00                	push   0x0
c001358a:	56                   	push   esi
c001358b:	e8 88 fb ff ff       	call   c0013118 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013590:	83 c4 10             	add    esp,0x10
c0013593:	83 c4 1c             	add    esp,0x1c
c0013596:	5b                   	pop    ebx
c0013597:	5e                   	pop    esi
c0013598:	5f                   	pop    edi
c0013599:	5d                   	pop    ebp
c001359a:	c3                   	ret    
c001359b:	c7 44 24 30 a1 44 02 c0 	mov    DWORD PTR [esp+0x30],0xc00244a1
c00135a3:	83 c4 1c             	add    esp,0x1c
c00135a6:	5b                   	pop    ebx
c00135a7:	5e                   	pop    esi
c00135a8:	5f                   	pop    edi
c00135a9:	5d                   	pop    ebp
c00135aa:	e9 07 c8 ff ff       	jmp    c000fdb6 <KePanic(char const*)>
c00135af:	90                   	nop

c00135b0 <VAS::freeAllocatedPages(unsigned long)>:
c00135b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00135b8:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00135bc:	74 09                	je     c00135c7 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00135be:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00135c2:	e9 ac fe ff ff       	jmp    c0013473 <Virt::freeKernelVirtualPages(unsigned long)>
c00135c7:	c7 44 24 04 fc 3e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023efc
c00135cf:	e9 7a 39 ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>

c00135d4 <VAS::virtualToPhysical(unsigned long)>:
c00135d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00135d8:	50                   	push   eax
c00135d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00135dd:	52                   	push   edx
c00135de:	e8 71 fe ff ff       	call   c0013454 <VAS::getPageTableEntry(unsigned long)>
c00135e3:	59                   	pop    ecx
c00135e4:	5a                   	pop    edx
c00135e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00135e7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00135ec:	c3                   	ret    
c00135ed:	90                   	nop

c00135ee <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c00135ee:	55                   	push   ebp
c00135ef:	57                   	push   edi
c00135f0:	56                   	push   esi
c00135f1:	53                   	push   ebx
c00135f2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00135f6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00135fa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00135fe:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013602:	85 db                	test   ebx,ebx
c0013604:	7e 24                	jle    c001362a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0013606:	c1 e3 0c             	shl    ebx,0xc
c0013609:	01 f3                	add    ebx,esi
c001360b:	56                   	push   esi
c001360c:	81 c6 00 10 00 00    	add    esi,0x1000
c0013612:	55                   	push   ebp
c0013613:	e8 3c fe ff ff       	call   c0013454 <VAS::getPageTableEntry(unsigned long)>
c0013618:	5a                   	pop    edx
c0013619:	59                   	pop    ecx
c001361a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001361c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013620:	21 f9                	and    ecx,edi
c0013622:	09 d1                	or     ecx,edx
c0013624:	39 f3                	cmp    ebx,esi
c0013626:	89 08                	mov    DWORD PTR [eax],ecx
c0013628:	75 e1                	jne    c001360b <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c001362a:	5b                   	pop    ebx
c001362b:	5e                   	pop    esi
c001362c:	5f                   	pop    edi
c001362d:	5d                   	pop    ebp
c001362e:	c3                   	ret    
c001362f:	90                   	nop

c0013630 <VAS::VAS()>:
c0013630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013634:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001363b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001363f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013646:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001364a:	a3 50 e2 02 c0       	mov    ds:0xc002e250,eax
c001364f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013653:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0013657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001365b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001365e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013662:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0013669:	ba 7d 70 02 c0       	mov    edx,0xc002707d
c001366e:	b8 00 70 02 c0       	mov    eax,0xc0027000
c0013673:	29 c2                	sub    edx,eax
c0013675:	89 d0                	mov    eax,edx
c0013677:	05 ff 0f 00 00       	add    eax,0xfff
c001367c:	c1 e8 0c             	shr    eax,0xc
c001367f:	89 c2                	mov    edx,eax
c0013681:	b8 00 70 02 c0       	mov    eax,0xc0027000
c0013686:	6a 04                	push   0x4
c0013688:	6a ff                	push   0xffffffff
c001368a:	52                   	push   edx
c001368b:	50                   	push   eax
c001368c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013690:	e8 59 ff ff ff       	call   c00135ee <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013695:	83 c4 14             	add    esp,0x14
c0013698:	90                   	nop
c0013699:	c3                   	ret    

c001369a <VAS::setToWriteCombining(unsigned long, int)>:
c001369a:	a1 e4 ea 02 c0       	mov    eax,ds:0xc002eae4
c001369f:	50                   	push   eax
c00136a0:	6a ff                	push   0xffffffff
c00136a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00136a6:	52                   	push   edx
c00136a7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00136ab:	51                   	push   ecx
c00136ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00136b0:	50                   	push   eax
c00136b1:	e8 38 ff ff ff       	call   c00135ee <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00136b6:	83 c4 14             	add    esp,0x14
c00136b9:	c3                   	ret    

c00136ba <VAS::mapOtherVASIn(bool, VAS*)>:
c00136ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00136be:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00136c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136c5:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00136c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00136cd:	83 f8 01             	cmp    eax,0x1
c00136d0:	19 c0                	sbb    eax,eax
c00136d2:	83 ca 03             	or     edx,0x3
c00136d5:	83 e0 fc             	and    eax,0xfffffffc
c00136d8:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00136df:	0f 20 d8             	mov    eax,cr3
c00136e2:	0f 22 d8             	mov    cr3,eax
c00136e5:	c3                   	ret    

c00136e6 <VAS::~VAS()>:
c00136e6:	83 ec 2c             	sub    esp,0x2c
c00136e9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00136f1:	fa                   	cli    
c00136f2:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00136f7:	83 c0 01             	add    eax,0x1
c00136fa:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c00136ff:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013704:	8b 00                	mov    eax,DWORD PTR [eax]
c0013706:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013709:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001370f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013713:	6a 01                	push   0x1
c0013715:	50                   	push   eax
c0013716:	e8 9f ff ff ff       	call   c00136ba <VAS::mapOtherVASIn(bool, VAS*)>
c001371b:	83 c4 0c             	add    esp,0xc
c001371e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013726:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001372e:	0f 8f d8 00 00 00    	jg     c001380c <VAS::~VAS()+0x126>
c0013734:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013738:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001373b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001373f:	c1 e2 02             	shl    edx,0x2
c0013742:	01 d0                	add    eax,edx
c0013744:	8b 00                	mov    eax,DWORD PTR [eax]
c0013746:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001374a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001374e:	83 e0 01             	and    eax,0x1
c0013751:	0f 84 ab 00 00 00    	je     c0013802 <VAS::~VAS()+0x11c>
c0013757:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001375f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0013767:	7f 74                	jg     c00137dd <VAS::~VAS()+0xf7>
c0013769:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001376d:	c1 e0 0a             	shl    eax,0xa
c0013770:	89 c2                	mov    edx,eax
c0013772:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013776:	01 d0                	add    eax,edx
c0013778:	c1 e0 0c             	shl    eax,0xc
c001377b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001377f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013784:	8b 00                	mov    eax,DWORD PTR [eax]
c0013786:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013789:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001378f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013793:	6a 01                	push   0x1
c0013795:	50                   	push   eax
c0013796:	e8 8b fc ff ff       	call   c0013426 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001379b:	83 c4 0c             	add    esp,0xc
c001379e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00137a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00137a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00137a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00137ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137b0:	25 01 04 00 00       	and    eax,0x401
c00137b5:	3d 01 04 00 00       	cmp    eax,0x401
c00137ba:	75 1a                	jne    c00137d6 <VAS::~VAS()+0xf0>
c00137bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137c0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00137c5:	83 ec 0c             	sub    esp,0xc
c00137c8:	50                   	push   eax
c00137c9:	e8 79 c7 ff ff       	call   c000ff47 <Phys::freePage(unsigned long)>
c00137ce:	83 c4 10             	add    esp,0x10
c00137d1:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00137d6:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c00137db:	eb 82                	jmp    c001375f <VAS::~VAS()+0x79>
c00137dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137e1:	25 00 04 00 00       	and    eax,0x400
c00137e6:	74 1a                	je     c0013802 <VAS::~VAS()+0x11c>
c00137e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ec:	25 00 f0 ff ff       	and    eax,0xfffff000
c00137f1:	83 ec 0c             	sub    esp,0xc
c00137f4:	50                   	push   eax
c00137f5:	e8 4d c7 ff ff       	call   c000ff47 <Phys::freePage(unsigned long)>
c00137fa:	83 c4 10             	add    esp,0x10
c00137fd:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013802:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013807:	e9 1a ff ff ff       	jmp    c0013726 <VAS::~VAS()+0x40>
c001380c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013810:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013813:	83 ec 0c             	sub    esp,0xc
c0013816:	50                   	push   eax
c0013817:	e8 57 fc ff ff       	call   c0013473 <Virt::freeKernelVirtualPages(unsigned long)>
c001381c:	83 c4 10             	add    esp,0x10
c001381f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013823:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013826:	83 ec 0c             	sub    esp,0xc
c0013829:	50                   	push   eax
c001382a:	e8 18 c7 ff ff       	call   c000ff47 <Phys::freePage(unsigned long)>
c001382f:	83 c4 10             	add    esp,0x10
c0013832:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013837:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c001383f:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0013844:	85 c0                	test   eax,eax
c0013846:	75 01                	jne    c0013849 <VAS::~VAS()+0x163>
c0013848:	fb                   	sti    
c0013849:	90                   	nop
c001384a:	83 c4 2c             	add    esp,0x2c
c001384d:	c3                   	ret    

c001384e <VAS::mapPage(unsigned long, unsigned long, int)>:
c001384e:	55                   	push   ebp
c001384f:	57                   	push   edi
c0013850:	56                   	push   esi
c0013851:	53                   	push   ebx
c0013852:	83 ec 1c             	sub    esp,0x1c
c0013855:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013859:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001385d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013861:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0013867:	77 08                	ja     c0013871 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0013869:	0f 20 d8             	mov    eax,cr3
c001386c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c001386f:	75 43                	jne    c00138b4 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0013871:	89 d8                	mov    eax,ebx
c0013873:	09 f8                	or     eax,edi
c0013875:	a9 ff 0f 00 00       	test   eax,0xfff
c001387a:	75 53                	jne    c00138cf <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c001387c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001387f:	89 de                	mov    esi,ebx
c0013881:	c1 ee 16             	shr    esi,0x16
c0013884:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001388b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001388f:	74 50                	je     c00138e1 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0013891:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013895:	c1 eb 0a             	shr    ebx,0xa
c0013898:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001389e:	c1 e6 0c             	shl    esi,0xc
c00138a1:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00138a7:	09 c7                	or     edi,eax
c00138a9:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c00138ac:	83 c4 1c             	add    esp,0x1c
c00138af:	5b                   	pop    ebx
c00138b0:	5e                   	pop    esi
c00138b1:	5f                   	pop    edi
c00138b2:	5d                   	pop    ebp
c00138b3:	c3                   	ret    
c00138b4:	83 ec 0c             	sub    esp,0xc
c00138b7:	68 20 3f 02 c0       	push   0xc0023f20
c00138bc:	e8 8d 36 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00138c1:	89 d8                	mov    eax,ebx
c00138c3:	83 c4 10             	add    esp,0x10
c00138c6:	09 f8                	or     eax,edi
c00138c8:	a9 ff 0f 00 00       	test   eax,0xfff
c00138cd:	74 ad                	je     c001387c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c00138cf:	83 ec 0c             	sub    esp,0xc
c00138d2:	68 88 3f 02 c0       	push   0xc0023f88
c00138d7:	e8 da c4 ff ff       	call   c000fdb6 <KePanic(char const*)>
c00138dc:	83 c4 10             	add    esp,0x10
c00138df:	eb 9b                	jmp    c001387c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c00138e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00138e5:	e8 c6 c6 ff ff       	call   c000ffb0 <Phys::allocatePage()>
c00138ea:	8b 0d 50 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e250
c00138f0:	83 ec 0c             	sub    esp,0xc
c00138f3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00138f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00138fb:	6a 01                	push   0x1
c00138fd:	e8 73 f8 ff ff       	call   c0013175 <Virt::allocateKernelVirtualPages(int)>
c0013902:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013909:	6a 01                	push   0x1
c001390b:	50                   	push   eax
c001390c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013910:	52                   	push   edx
c0013911:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013915:	51                   	push   ecx
c0013916:	e8 2d 01 00 00       	call   c0013a48 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001391b:	83 c4 1c             	add    esp,0x1c
c001391e:	68 00 10 00 00       	push   0x1000
c0013923:	6a 00                	push   0x0
c0013925:	50                   	push   eax
c0013926:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001392a:	e8 c1 cb fe ff       	call   c00004f0 <memset>
c001392f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013933:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013936:	e8 38 fb ff ff       	call   c0013473 <Virt::freeKernelVirtualPages(unsigned long)>
c001393b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001393f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013943:	83 c4 10             	add    esp,0x10
c0013946:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0013949:	0d 07 04 00 00       	or     eax,0x407
c001394e:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0013951:	e9 3b ff ff ff       	jmp    c0013891 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0013956 <VAS::allocatePages(int, int)>:
c0013956:	55                   	push   ebp
c0013957:	57                   	push   edi
c0013958:	56                   	push   esi
c0013959:	53                   	push   ebx
c001395a:	83 ec 1c             	sub    esp,0x1c
c001395d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013961:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013965:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0013969:	75 75                	jne    c00139e0 <VAS::allocatePages(int, int)+0x8a>
c001396b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001396e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013972:	85 c0                	test   eax,eax
c0013974:	74 49                	je     c00139bf <VAS::allocatePages(int, int)+0x69>
c0013976:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001397a:	89 d5                	mov    ebp,edx
c001397c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013980:	c1 e5 0c             	shl    ebp,0xc
c0013983:	01 dd                	add    ebp,ebx
c0013985:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0013988:	81 cf 00 04 00 00    	or     edi,0x400
c001398e:	85 d2                	test   edx,edx
c0013990:	7e 1b                	jle    c00139ad <VAS::allocatePages(int, int)+0x57>
c0013992:	e8 19 c6 ff ff       	call   c000ffb0 <Phys::allocatePage()>
c0013997:	57                   	push   edi
c0013998:	53                   	push   ebx
c0013999:	81 c3 00 10 00 00    	add    ebx,0x1000
c001399f:	50                   	push   eax
c00139a0:	56                   	push   esi
c00139a1:	e8 a8 fe ff ff       	call   c001384e <VAS::mapPage(unsigned long, unsigned long, int)>
c00139a6:	83 c4 10             	add    esp,0x10
c00139a9:	39 dd                	cmp    ebp,ebx
c00139ab:	75 e5                	jne    c0013992 <VAS::allocatePages(int, int)+0x3c>
c00139ad:	0f 20 d8             	mov    eax,cr3
c00139b0:	0f 22 d8             	mov    cr3,eax
c00139b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139b7:	83 c4 1c             	add    esp,0x1c
c00139ba:	5b                   	pop    ebx
c00139bb:	5e                   	pop    esi
c00139bc:	5f                   	pop    edi
c00139bd:	5d                   	pop    ebp
c00139be:	c3                   	ret    
c00139bf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00139c3:	83 ec 0c             	sub    esp,0xc
c00139c6:	68 ac 3f 02 c0       	push   0xc0023fac
c00139cb:	e8 e6 c3 ff ff       	call   c000fdb6 <KePanic(char const*)>
c00139d0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00139d3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00139d7:	83 c4 10             	add    esp,0x10
c00139da:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00139de:	eb 96                	jmp    c0013976 <VAS::allocatePages(int, int)+0x20>
c00139e0:	83 ec 0c             	sub    esp,0xc
c00139e3:	52                   	push   edx
c00139e4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00139e8:	e8 88 f7 ff ff       	call   c0013175 <Virt::allocateKernelVirtualPages(int)>
c00139ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00139f1:	83 c4 10             	add    esp,0x10
c00139f4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00139f9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00139fd:	77 38                	ja     c0013a37 <VAS::allocatePages(int, int)+0xe1>
c00139ff:	85 d2                	test   edx,edx
c0013a01:	7e aa                	jle    c00139ad <VAS::allocatePages(int, int)+0x57>
c0013a03:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013a07:	c1 e2 0c             	shl    edx,0xc
c0013a0a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013a0e:	81 cf 00 04 00 00    	or     edi,0x400
c0013a14:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0013a17:	e8 94 c5 ff ff       	call   c000ffb0 <Phys::allocatePage()>
c0013a1c:	57                   	push   edi
c0013a1d:	53                   	push   ebx
c0013a1e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013a24:	50                   	push   eax
c0013a25:	56                   	push   esi
c0013a26:	e8 23 fe ff ff       	call   c001384e <VAS::mapPage(unsigned long, unsigned long, int)>
c0013a2b:	83 c4 10             	add    esp,0x10
c0013a2e:	39 dd                	cmp    ebp,ebx
c0013a30:	75 e5                	jne    c0013a17 <VAS::allocatePages(int, int)+0xc1>
c0013a32:	e9 76 ff ff ff       	jmp    c00139ad <VAS::allocatePages(int, int)+0x57>
c0013a37:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013a3b:	a1 e8 ea 02 c0       	mov    eax,ds:0xc002eae8
c0013a40:	09 c1                	or     ecx,eax
c0013a42:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013a46:	eb b7                	jmp    c00139ff <VAS::allocatePages(int, int)+0xa9>

c0013a48 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0013a48:	55                   	push   ebp
c0013a49:	57                   	push   edi
c0013a4a:	56                   	push   esi
c0013a4b:	53                   	push   ebx
c0013a4c:	83 ec 1c             	sub    esp,0x1c
c0013a4f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013a53:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013a57:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0013a5b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0013a5f:	85 db                	test   ebx,ebx
c0013a61:	7e 2c                	jle    c0013a8f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0013a63:	c1 e3 0c             	shl    ebx,0xc
c0013a66:	8d 04 33             	lea    eax,[ebx+esi*1]
c0013a69:	89 f3                	mov    ebx,esi
c0013a6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013a6f:	55                   	push   ebp
c0013a70:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013a74:	29 f2                	sub    edx,esi
c0013a76:	01 da                	add    edx,ebx
c0013a78:	52                   	push   edx
c0013a79:	53                   	push   ebx
c0013a7a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013a80:	57                   	push   edi
c0013a81:	e8 c8 fd ff ff       	call   c001384e <VAS::mapPage(unsigned long, unsigned long, int)>
c0013a86:	83 c4 10             	add    esp,0x10
c0013a89:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0013a8d:	75 e0                	jne    c0013a6f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0013a8f:	0f 20 d8             	mov    eax,cr3
c0013a92:	0f 22 d8             	mov    cr3,eax
c0013a95:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013a99:	83 c4 1c             	add    esp,0x1c
c0013a9c:	5b                   	pop    ebx
c0013a9d:	5e                   	pop    esi
c0013a9e:	5f                   	pop    edi
c0013a9f:	5d                   	pop    ebp
c0013aa0:	c3                   	ret    
c0013aa1:	90                   	nop

c0013aa2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0013aa2:	55                   	push   ebp
c0013aa3:	57                   	push   edi
c0013aa4:	56                   	push   esi
c0013aa5:	53                   	push   ebx
c0013aa6:	83 ec 1c             	sub    esp,0x1c
c0013aa9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013aad:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0013ab1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013ab5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ab9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013abd:	09 d8                	or     eax,ebx
c0013abf:	a9 ff 0f 00 00       	test   eax,0xfff
c0013ac4:	75 4b                	jne    c0013b11 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0013ac6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013ac9:	89 de                	mov    esi,ebx
c0013acb:	c1 ee 16             	shr    esi,0x16
c0013ace:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0013ad5:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0013ad9:	74 48                	je     c0013b23 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0013adb:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0013ae0:	c1 eb 0a             	shr    ebx,0xa
c0013ae3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013ae7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013aeb:	83 ff 01             	cmp    edi,0x1
c0013aee:	19 c0                	sbb    eax,eax
c0013af0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013af6:	c1 e6 0c             	shl    esi,0xc
c0013af9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0013afe:	01 f3                	add    ebx,esi
c0013b00:	09 ca                	or     edx,ecx
c0013b02:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0013b09:	83 c4 1c             	add    esp,0x1c
c0013b0c:	5b                   	pop    ebx
c0013b0d:	5e                   	pop    esi
c0013b0e:	5f                   	pop    edi
c0013b0f:	5d                   	pop    ebp
c0013b10:	c3                   	ret    
c0013b11:	83 ec 0c             	sub    esp,0xc
c0013b14:	68 d8 3f 02 c0       	push   0xc0023fd8
c0013b19:	e8 98 c2 ff ff       	call   c000fdb6 <KePanic(char const*)>
c0013b1e:	83 c4 10             	add    esp,0x10
c0013b21:	eb a3                	jmp    c0013ac6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0013b23:	e8 88 c4 ff ff       	call   c000ffb0 <Phys::allocatePage()>
c0013b28:	8b 0d 50 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e250
c0013b2e:	83 ec 0c             	sub    esp,0xc
c0013b31:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0013b35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b39:	6a 01                	push   0x1
c0013b3b:	e8 35 f6 ff ff       	call   c0013175 <Virt::allocateKernelVirtualPages(int)>
c0013b40:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013b47:	6a 01                	push   0x1
c0013b49:	50                   	push   eax
c0013b4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b4e:	50                   	push   eax
c0013b4f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0013b53:	51                   	push   ecx
c0013b54:	e8 ef fe ff ff       	call   c0013a48 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013b59:	83 c4 1c             	add    esp,0x1c
c0013b5c:	68 00 10 00 00       	push   0x1000
c0013b61:	6a 00                	push   0x0
c0013b63:	50                   	push   eax
c0013b64:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013b68:	e8 83 c9 fe ff       	call   c00004f0 <memset>
c0013b6d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013b71:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013b74:	e8 fa f8 ff ff       	call   c0013473 <Virt::freeKernelVirtualPages(unsigned long)>
c0013b79:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b7d:	83 c4 10             	add    esp,0x10
c0013b80:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013b83:	81 ca 07 04 00 00    	or     edx,0x407
c0013b89:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c0013b8c:	e9 4a ff ff ff       	jmp    c0013adb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c0013b91:	90                   	nop

c0013b92 <VAS::VAS(bool)>:
c0013b92:	53                   	push   ebx
c0013b93:	83 ec 28             	sub    esp,0x28
c0013b96:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013b9a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013b9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ba2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013ba9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013bad:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013bb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013bb8:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013bbc:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0013bbf:	e8 ec c3 ff ff       	call   c000ffb0 <Phys::allocatePage()>
c0013bc4:	89 c2                	mov    edx,eax
c0013bc6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013bca:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013bcd:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c0013bd3:	83 ec 0c             	sub    esp,0xc
c0013bd6:	6a 01                	push   0x1
c0013bd8:	e8 98 f5 ff ff       	call   c0013175 <Virt::allocateKernelVirtualPages(int)>
c0013bdd:	83 c4 10             	add    esp,0x10
c0013be0:	89 c2                	mov    edx,eax
c0013be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013be6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013be9:	83 ec 0c             	sub    esp,0xc
c0013bec:	6a 03                	push   0x3
c0013bee:	6a 01                	push   0x1
c0013bf0:	52                   	push   edx
c0013bf1:	50                   	push   eax
c0013bf2:	53                   	push   ebx
c0013bf3:	e8 50 fe ff ff       	call   c0013a48 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013bf8:	83 c4 20             	add    esp,0x20
c0013bfb:	89 c2                	mov    edx,eax
c0013bfd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c01:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013c04:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013c0c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0013c14:	7f 1d                	jg     c0013c33 <VAS::VAS(bool)+0xa1>
c0013c16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c1a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013c1d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013c21:	c1 e2 02             	shl    edx,0x2
c0013c24:	01 d0                	add    eax,edx
c0013c26:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013c2c:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013c31:	eb d9                	jmp    c0013c0c <VAS::VAS(bool)+0x7a>
c0013c33:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0013c3b:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0013c43:	7f 59                	jg     c0013c9e <VAS::VAS(bool)+0x10c>
c0013c45:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c49:	2d 00 02 00 00       	sub    eax,0x200
c0013c4e:	c1 e0 0c             	shl    eax,0xc
c0013c51:	89 c2                	mov    edx,eax
c0013c53:	a1 e8 ea 02 c0       	mov    eax,ds:0xc002eae8
c0013c58:	89 d1                	mov    ecx,edx
c0013c5a:	09 c1                	or     ecx,eax
c0013c5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c60:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013c63:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c67:	c1 e2 02             	shl    edx,0x2
c0013c6a:	01 d0                	add    eax,edx
c0013c6c:	83 c9 05             	or     ecx,0x5
c0013c6f:	89 ca                	mov    edx,ecx
c0013c71:	89 10                	mov    DWORD PTR [eax],edx
c0013c73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c77:	2d 40 03 00 00       	sub    eax,0x340
c0013c7c:	83 f8 7f             	cmp    eax,0x7f
c0013c7f:	77 16                	ja     c0013c97 <VAS::VAS(bool)+0x105>
c0013c81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c85:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013c88:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c8c:	c1 e2 02             	shl    edx,0x2
c0013c8f:	01 d0                	add    eax,edx
c0013c91:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013c97:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013c9c:	eb 9d                	jmp    c0013c3b <VAS::VAS(bool)+0xa9>
c0013c9e:	8b 15 e8 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eae8
c0013ca4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ca8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013cab:	05 20 0c 00 00       	add    eax,0xc20
c0013cb0:	81 ca 03 40 00 00    	or     edx,0x4003
c0013cb6:	89 10                	mov    DWORD PTR [eax],edx
c0013cb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013cbc:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013cbf:	a1 e8 ea 02 c0       	mov    eax,ds:0xc002eae8
c0013cc4:	09 c2                	or     edx,eax
c0013cc6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013cca:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013ccd:	05 fc 0f 00 00       	add    eax,0xffc
c0013cd2:	83 ca 03             	or     edx,0x3
c0013cd5:	89 10                	mov    DWORD PTR [eax],edx
c0013cd7:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0013cdc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013ce2:	83 ec 0c             	sub    esp,0xc
c0013ce5:	50                   	push   eax
c0013ce6:	e8 0b 5f ff ff       	call   c0009bf6 <Device::getName()>
c0013ceb:	83 c4 10             	add    esp,0x10
c0013cee:	83 ec 08             	sub    esp,0x8
c0013cf1:	68 bb 44 02 c0       	push   0xc00244bb
c0013cf6:	50                   	push   eax
c0013cf7:	e8 84 ca fe ff       	call   c0000780 <strcmp>
c0013cfc:	83 c4 10             	add    esp,0x10
c0013cff:	85 c0                	test   eax,eax
c0013d01:	0f 94 c0             	sete   al
c0013d04:	0f b6 c0             	movzx  eax,al
c0013d07:	85 c0                	test   eax,eax
c0013d09:	74 68                	je     c0013d73 <VAS::VAS(bool)+0x1e1>
c0013d0b:	fa                   	cli    
c0013d0c:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0013d11:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013d17:	05 68 09 00 00       	add    eax,0x968
c0013d1c:	83 ec 0c             	sub    esp,0xc
c0013d1f:	50                   	push   eax
c0013d20:	e8 29 b1 ff ff       	call   c000ee4e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013d25:	83 c4 10             	add    esp,0x10
c0013d28:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013d2d:	89 c3                	mov    ebx,eax
c0013d2f:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0013d34:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013d3a:	05 68 09 00 00       	add    eax,0x968
c0013d3f:	83 ec 0c             	sub    esp,0xc
c0013d42:	50                   	push   eax
c0013d43:	e8 06 b1 ff ff       	call   c000ee4e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013d48:	83 c4 10             	add    esp,0x10
c0013d4b:	83 ec 08             	sub    esp,0x8
c0013d4e:	50                   	push   eax
c0013d4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013d53:	e8 fc f6 ff ff       	call   c0013454 <VAS::getPageTableEntry(unsigned long)>
c0013d58:	83 c4 10             	add    esp,0x10
c0013d5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0013d5d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013d62:	6a 11                	push   0x11
c0013d64:	53                   	push   ebx
c0013d65:	50                   	push   eax
c0013d66:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013d6a:	e8 df fa ff ff       	call   c001384e <VAS::mapPage(unsigned long, unsigned long, int)>
c0013d6f:	83 c4 10             	add    esp,0x10
c0013d72:	fb                   	sti    
c0013d73:	90                   	nop
c0013d74:	83 c4 28             	add    esp,0x28
c0013d77:	5b                   	pop    ebx
c0013d78:	c3                   	ret    
c0013d79:	90                   	nop

c0013d7a <VAS::evict(unsigned long)>:
c0013d7a:	55                   	push   ebp
c0013d7b:	57                   	push   edi
c0013d7c:	56                   	push   esi
c0013d7d:	53                   	push   ebx
c0013d7e:	83 ec 24             	sub    esp,0x24
c0013d81:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013d85:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013d89:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d8d:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0013d92:	50                   	push   eax
c0013d93:	68 c9 44 02 c0       	push   0xc00244c9
c0013d98:	e8 b1 31 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013d9d:	e8 28 f5 ff ff       	call   c00132ca <Virt::allocateSwapfilePage()>
c0013da2:	83 c4 10             	add    esp,0x10
c0013da5:	89 c7                	mov    edi,eax
c0013da7:	a1 4c 61 02 c0       	mov    eax,ds:0xc002614c
c0013dac:	85 c0                	test   eax,eax
c0013dae:	7e 40                	jle    c0013df0 <VAS::evict(unsigned long)+0x76>
c0013db0:	89 ee                	mov    esi,ebp
c0013db2:	31 db                	xor    ebx,ebx
c0013db4:	83 ec 0c             	sub    esp,0xc
c0013db7:	57                   	push   edi
c0013db8:	e8 f7 f4 ff ff       	call   c00132b4 <Virt::swapIDToSector(unsigned long)>
c0013dbd:	31 d2                	xor    edx,edx
c0013dbf:	89 34 24             	mov    DWORD PTR [esp],esi
c0013dc2:	81 c6 00 02 00 00    	add    esi,0x200
c0013dc8:	6a 01                	push   0x1
c0013dca:	52                   	push   edx
c0013dcb:	01 d8                	add    eax,ebx
c0013dcd:	83 c3 01             	add    ebx,0x1
c0013dd0:	50                   	push   eax
c0013dd1:	0f be 05 58 61 02 c0 	movsx  eax,BYTE PTR ds:0xc0026158
c0013dd8:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c0013ddf:	50                   	push   eax
c0013de0:	e8 73 6c ff ff       	call   c000aa58 <LogicalDisk::write(unsigned long long, int, void*)>
c0013de5:	83 c4 20             	add    esp,0x20
c0013de8:	39 1d 4c 61 02 c0    	cmp    DWORD PTR ds:0xc002614c,ebx
c0013dee:	7f c4                	jg     c0013db4 <VAS::evict(unsigned long)+0x3a>
c0013df0:	c1 e7 0c             	shl    edi,0xc
c0013df3:	83 ec 08             	sub    esp,0x8
c0013df6:	55                   	push   ebp
c0013df7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013dfb:	50                   	push   eax
c0013dfc:	e8 53 f6 ff ff       	call   c0013454 <VAS::getPageTableEntry(unsigned long)>
c0013e01:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e03:	89 d3                	mov    ebx,edx
c0013e05:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0013e0b:	09 d7                	or     edi,edx
c0013e0d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0013e13:	89 38                	mov    DWORD PTR [eax],edi
c0013e15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e18:	8b 15 48 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e248
c0013e1e:	83 c2 01             	add    edx,0x1
c0013e21:	89 15 48 e2 02 c0    	mov    DWORD PTR ds:0xc002e248,edx
c0013e27:	e8 1b c1 ff ff       	call   c000ff47 <Phys::freePage(unsigned long)>
c0013e2c:	0f 20 d8             	mov    eax,cr3
c0013e2f:	0f 22 d8             	mov    cr3,eax
c0013e32:	8b 0d 48 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e248
c0013e38:	51                   	push   ecx
c0013e39:	55                   	push   ebp
c0013e3a:	53                   	push   ebx
c0013e3b:	68 fc 3f 02 c0       	push   0xc0023ffc
c0013e40:	e8 09 31 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013e45:	a1 44 e2 02 c0       	mov    eax,ds:0xc002e244
c0013e4a:	83 c4 18             	add    esp,0x18
c0013e4d:	50                   	push   eax
c0013e4e:	68 de 44 02 c0       	push   0xc00244de
c0013e53:	8d 50 01             	lea    edx,[eax+0x1]
c0013e56:	89 15 44 e2 02 c0    	mov    DWORD PTR ds:0xc002e244,edx
c0013e5c:	e8 ed 30 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013e61:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0013e66:	c7 44 24 40 f0 44 02 c0 	mov    DWORD PTR [esp+0x40],0xc00244f0
c0013e6e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0013e72:	83 c4 2c             	add    esp,0x2c
c0013e75:	5b                   	pop    ebx
c0013e76:	5e                   	pop    esi
c0013e77:	5f                   	pop    edi
c0013e78:	5d                   	pop    ebp
c0013e79:	e9 d0 30 ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>

c0013e7e <VAS::canLockPage(unsigned long)>:
c0013e7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013e82:	50                   	push   eax
c0013e83:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013e87:	52                   	push   edx
c0013e88:	e8 c7 f5 ff ff       	call   c0013454 <VAS::getPageTableEntry(unsigned long)>
c0013e8d:	59                   	pop    ecx
c0013e8e:	5a                   	pop    edx
c0013e8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0013e91:	c1 e8 0b             	shr    eax,0xb
c0013e94:	83 e0 01             	and    eax,0x1
c0013e97:	c3                   	ret    

c0013e98 <VAS::unlockPage(unsigned long)>:
c0013e98:	83 ec 0c             	sub    esp,0xc
c0013e9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e9f:	50                   	push   eax
c0013ea0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013ea4:	52                   	push   edx
c0013ea5:	e8 aa f5 ff ff       	call   c0013454 <VAS::getPageTableEntry(unsigned long)>
c0013eaa:	59                   	pop    ecx
c0013eab:	5a                   	pop    edx
c0013eac:	8b 10                	mov    edx,DWORD PTR [eax]
c0013eae:	f6 c6 08             	test   dh,0x8
c0013eb1:	75 09                	jne    c0013ebc <VAS::unlockPage(unsigned long)+0x24>
c0013eb3:	80 ce 08             	or     dh,0x8
c0013eb6:	89 10                	mov    DWORD PTR [eax],edx
c0013eb8:	83 c4 0c             	add    esp,0xc
c0013ebb:	c3                   	ret    
c0013ebc:	c7 44 24 10 30 40 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024030
c0013ec4:	83 c4 0c             	add    esp,0xc
c0013ec7:	e9 ea be ff ff       	jmp    c000fdb6 <KePanic(char const*)>

c0013ecc <VAS::canLockPages(unsigned long, int)>:
c0013ecc:	55                   	push   ebp
c0013ecd:	57                   	push   edi
c0013ece:	56                   	push   esi
c0013ecf:	53                   	push   ebx
c0013ed0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013ed4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0013ed8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013edc:	85 ff                	test   edi,edi
c0013ede:	7e 23                	jle    c0013f03 <VAS::canLockPages(unsigned long, int)+0x37>
c0013ee0:	31 f6                	xor    esi,esi
c0013ee2:	eb 0d                	jmp    c0013ef1 <VAS::canLockPages(unsigned long, int)+0x25>
c0013ee4:	83 c6 01             	add    esi,0x1
c0013ee7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013eed:	39 f7                	cmp    edi,esi
c0013eef:	74 0d                	je     c0013efe <VAS::canLockPages(unsigned long, int)+0x32>
c0013ef1:	53                   	push   ebx
c0013ef2:	55                   	push   ebp
c0013ef3:	e8 86 ff ff ff       	call   c0013e7e <VAS::canLockPage(unsigned long)>
c0013ef8:	5a                   	pop    edx
c0013ef9:	59                   	pop    ecx
c0013efa:	84 c0                	test   al,al
c0013efc:	75 e6                	jne    c0013ee4 <VAS::canLockPages(unsigned long, int)+0x18>
c0013efe:	5b                   	pop    ebx
c0013eff:	5e                   	pop    esi
c0013f00:	5f                   	pop    edi
c0013f01:	5d                   	pop    ebp
c0013f02:	c3                   	ret    
c0013f03:	b0 01                	mov    al,0x1
c0013f05:	eb f7                	jmp    c0013efe <VAS::canLockPages(unsigned long, int)+0x32>
c0013f07:	90                   	nop

c0013f08 <VAS::unlockPages(unsigned long, int)>:
c0013f08:	55                   	push   ebp
c0013f09:	57                   	push   edi
c0013f0a:	56                   	push   esi
c0013f0b:	53                   	push   ebx
c0013f0c:	83 ec 0c             	sub    esp,0xc
c0013f0f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013f13:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013f17:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0013f1b:	85 ff                	test   edi,edi
c0013f1d:	7e 1c                	jle    c0013f3b <VAS::unlockPages(unsigned long, int)+0x33>
c0013f1f:	31 f6                	xor    esi,esi
c0013f21:	83 ec 08             	sub    esp,0x8
c0013f24:	83 c6 01             	add    esi,0x1
c0013f27:	53                   	push   ebx
c0013f28:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013f2e:	55                   	push   ebp
c0013f2f:	e8 64 ff ff ff       	call   c0013e98 <VAS::unlockPage(unsigned long)>
c0013f34:	83 c4 10             	add    esp,0x10
c0013f37:	39 f7                	cmp    edi,esi
c0013f39:	75 e6                	jne    c0013f21 <VAS::unlockPages(unsigned long, int)+0x19>
c0013f3b:	83 c4 0c             	add    esp,0xc
c0013f3e:	5b                   	pop    ebx
c0013f3f:	5e                   	pop    esi
c0013f40:	5f                   	pop    edi
c0013f41:	5d                   	pop    ebp
c0013f42:	c3                   	ret    
c0013f43:	90                   	nop

c0013f44 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0013f44:	55                   	push   ebp
c0013f45:	57                   	push   edi
c0013f46:	56                   	push   esi
c0013f47:	53                   	push   ebx
c0013f48:	81 ec 0c 10 00 00    	sub    esp,0x100c
c0013f4e:	8b b4 24 24 10 00 00 	mov    esi,DWORD PTR [esp+0x1024]
c0013f55:	89 f3                	mov    ebx,esi
c0013f57:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0013f5d:	53                   	push   ebx
c0013f5e:	8b 84 24 24 10 00 00 	mov    eax,DWORD PTR [esp+0x1024]
c0013f65:	50                   	push   eax
c0013f66:	e8 e9 f4 ff ff       	call   c0013454 <VAS::getPageTableEntry(unsigned long)>
c0013f6b:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c0013f71:	5a                   	pop    edx
c0013f72:	59                   	pop    ecx
c0013f73:	89 c5                	mov    ebp,eax
c0013f75:	0f 87 cb 00 00 00    	ja     c0014046 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c0013f7b:	83 ec 08             	sub    esp,0x8
c0013f7e:	56                   	push   esi
c0013f7f:	68 60 40 02 c0       	push   0xc0024060
c0013f84:	e8 c5 2f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013f89:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c0013f8e:	5e                   	pop    esi
c0013f8f:	5f                   	pop    edi
c0013f90:	50                   	push   eax
c0013f91:	68 90 40 02 c0       	push   0xc0024090
c0013f96:	e8 b3 2f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013f9b:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0013fa1:	58                   	pop    eax
c0013fa2:	5a                   	pop    edx
c0013fa3:	51                   	push   ecx
c0013fa4:	68 b4 40 02 c0       	push   0xc00240b4
c0013fa9:	e8 a0 2f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013fae:	83 c4 10             	add    esp,0x10
c0013fb1:	85 db                	test   ebx,ebx
c0013fb3:	74 5b                	je     c0014010 <VAS::tryLoadBackOffDisk(unsigned long)+0xcc>
c0013fb5:	85 ed                	test   ebp,ebp
c0013fb7:	74 21                	je     c0013fda <VAS::tryLoadBackOffDisk(unsigned long)+0x96>
c0013fb9:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c0013fbc:	f7 c6 00 02 00 00    	test   esi,0x200
c0013fc2:	0f 85 c5 00 00 00    	jne    c001408d <VAS::tryLoadBackOffDisk(unsigned long)+0x149>
c0013fc8:	89 f0                	mov    eax,esi
c0013fca:	25 01 04 00 00       	and    eax,0x401
c0013fcf:	3d 00 04 00 00       	cmp    eax,0x400
c0013fd4:	0f 84 39 01 00 00    	je     c0014113 <VAS::tryLoadBackOffDisk(unsigned long)+0x1cf>
c0013fda:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c0013fdf:	83 ec 08             	sub    esp,0x8
c0013fe2:	50                   	push   eax
c0013fe3:	68 a8 42 02 c0       	push   0xc00242a8
c0013fe8:	e8 61 2f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013fed:	8b 1d 30 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea30
c0013ff3:	5a                   	pop    edx
c0013ff4:	59                   	pop    ecx
c0013ff5:	53                   	push   ebx
c0013ff6:	68 cc 42 02 c0       	push   0xc00242cc
c0013ffb:	e8 4e 2f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014000:	83 c4 10             	add    esp,0x10
c0014003:	31 c0                	xor    eax,eax
c0014005:	81 c4 0c 10 00 00    	add    esp,0x100c
c001400b:	5b                   	pop    ebx
c001400c:	5e                   	pop    esi
c001400d:	5f                   	pop    edi
c001400e:	5d                   	pop    ebp
c001400f:	c3                   	ret    
c0014010:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c0014015:	83 ec 08             	sub    esp,0x8
c0014018:	50                   	push   eax
c0014019:	68 d8 40 02 c0       	push   0xc00240d8
c001401e:	e8 2b 2f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014023:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0014029:	58                   	pop    eax
c001402a:	5a                   	pop    edx
c001402b:	51                   	push   ecx
c001402c:	68 fc 40 02 c0       	push   0xc00240fc
c0014031:	e8 18 2f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014036:	83 c4 10             	add    esp,0x10
c0014039:	31 c0                	xor    eax,eax
c001403b:	81 c4 0c 10 00 00    	add    esp,0x100c
c0014041:	5b                   	pop    ebx
c0014042:	5e                   	pop    esi
c0014043:	5f                   	pop    edi
c0014044:	5d                   	pop    ebp
c0014045:	c3                   	ret    
c0014046:	83 ec 0c             	sub    esp,0xc
c0014049:	68 05 45 02 c0       	push   0xc0024505
c001404e:	e8 63 bd ff ff       	call   c000fdb6 <KePanic(char const*)>
c0014053:	5f                   	pop    edi
c0014054:	58                   	pop    eax
c0014055:	56                   	push   esi
c0014056:	68 60 40 02 c0       	push   0xc0024060
c001405b:	e8 ee 2e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014060:	8b 0d 0c ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea0c
c0014066:	58                   	pop    eax
c0014067:	5a                   	pop    edx
c0014068:	51                   	push   ecx
c0014069:	68 90 40 02 c0       	push   0xc0024090
c001406e:	e8 db 2e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014073:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0014078:	5e                   	pop    esi
c0014079:	5f                   	pop    edi
c001407a:	50                   	push   eax
c001407b:	68 b4 40 02 c0       	push   0xc00240b4
c0014080:	e8 c9 2e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014085:	83 c4 10             	add    esp,0x10
c0014088:	e9 28 ff ff ff       	jmp    c0013fb5 <VAS::tryLoadBackOffDisk(unsigned long)+0x71>
c001408d:	83 ec 0c             	sub    esp,0xc
c0014090:	68 20 41 02 c0       	push   0xc0024120
c0014095:	e8 b4 2e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001409a:	e8 11 bf ff ff       	call   c000ffb0 <Phys::allocatePage()>
c001409f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00140a2:	83 ca 01             	or     edx,0x1
c00140a5:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c00140a8:	0f 20 da             	mov    edx,cr3
c00140ab:	0f 22 da             	mov    cr3,edx
c00140ae:	ba 00 10 00 00       	mov    edx,0x1000
c00140b3:	89 de                	mov    esi,ebx
c00140b5:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00140b9:	89 d1                	mov    ecx,edx
c00140bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00140bd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00140c0:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c00140c6:	09 c8                	or     eax,ecx
c00140c8:	83 c8 02             	or     eax,0x2
c00140cb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00140ce:	0f 20 d8             	mov    eax,cr3
c00140d1:	0f 22 d8             	mov    cr3,eax
c00140d4:	8d 74 24 10          	lea    esi,[esp+0x10]
c00140d8:	89 df                	mov    edi,ebx
c00140da:	89 d1                	mov    ecx,edx
c00140dc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00140de:	59                   	pop    ecx
c00140df:	8b 35 0c ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea0c
c00140e5:	5b                   	pop    ebx
c00140e6:	56                   	push   esi
c00140e7:	68 40 41 02 c0       	push   0xc0024140
c00140ec:	e8 5d 2e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00140f1:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00140f6:	5f                   	pop    edi
c00140f7:	5d                   	pop    ebp
c00140f8:	50                   	push   eax
c00140f9:	68 64 41 02 c0       	push   0xc0024164
c00140fe:	e8 4b 2e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014103:	83 c4 10             	add    esp,0x10
c0014106:	b0 01                	mov    al,0x1
c0014108:	81 c4 0c 10 00 00    	add    esp,0x100c
c001410e:	5b                   	pop    ebx
c001410f:	5e                   	pop    esi
c0014110:	5f                   	pop    edi
c0014111:	5d                   	pop    ebp
c0014112:	c3                   	ret    
c0014113:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0014118:	c1 ee 0c             	shr    esi,0xc
c001411b:	83 ec 08             	sub    esp,0x8
c001411e:	50                   	push   eax
c001411f:	68 88 41 02 c0       	push   0xc0024188
c0014124:	e8 25 2e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014129:	e8 82 be ff ff       	call   c000ffb0 <Phys::allocatePage()>
c001412e:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0014134:	89 c7                	mov    edi,eax
c0014136:	58                   	pop    eax
c0014137:	5a                   	pop    edx
c0014138:	51                   	push   ecx
c0014139:	68 ac 41 02 c0       	push   0xc00241ac
c001413e:	e8 0b 2e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014143:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014146:	83 c4 10             	add    esp,0x10
c0014149:	81 e2 ff 0f 00 00    	and    edx,0xfff
c001414f:	09 fa                	or     edx,edi
c0014151:	31 ff                	xor    edi,edi
c0014153:	81 ca 01 08 00 00    	or     edx,0x801
c0014159:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c001415c:	89 dd                	mov    ebp,ebx
c001415e:	a1 4c 61 02 c0       	mov    eax,ds:0xc002614c
c0014163:	85 c0                	test   eax,eax
c0014165:	7e 61                	jle    c00141c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x284>
c0014167:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001416c:	83 ec 08             	sub    esp,0x8
c001416f:	50                   	push   eax
c0014170:	68 60 42 02 c0       	push   0xc0024260
c0014175:	e8 d4 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001417a:	89 34 24             	mov    DWORD PTR [esp],esi
c001417d:	e8 32 f1 ff ff       	call   c00132b4 <Virt::swapIDToSector(unsigned long)>
c0014182:	31 d2                	xor    edx,edx
c0014184:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014187:	81 c5 00 02 00 00    	add    ebp,0x200
c001418d:	6a 01                	push   0x1
c001418f:	52                   	push   edx
c0014190:	01 f8                	add    eax,edi
c0014192:	83 c7 01             	add    edi,0x1
c0014195:	50                   	push   eax
c0014196:	0f be 05 58 61 02 c0 	movsx  eax,BYTE PTR ds:0xc0026158
c001419d:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c00141a4:	50                   	push   eax
c00141a5:	e8 42 68 ff ff       	call   c000a9ec <LogicalDisk::read(unsigned long long, int, void*)>
c00141aa:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00141af:	83 c4 18             	add    esp,0x18
c00141b2:	50                   	push   eax
c00141b3:	68 84 42 02 c0       	push   0xc0024284
c00141b8:	e8 91 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00141bd:	83 c4 10             	add    esp,0x10
c00141c0:	39 3d 4c 61 02 c0    	cmp    DWORD PTR ds:0xc002614c,edi
c00141c6:	7f 9f                	jg     c0014167 <VAS::tryLoadBackOffDisk(unsigned long)+0x223>
c00141c8:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00141cd:	83 ec 08             	sub    esp,0x8
c00141d0:	50                   	push   eax
c00141d1:	68 d0 41 02 c0       	push   0xc00241d0
c00141d6:	e8 73 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00141db:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c00141e0:	83 c4 0c             	add    esp,0xc
c00141e3:	83 e8 01             	sub    eax,0x1
c00141e6:	50                   	push   eax
c00141e7:	53                   	push   ebx
c00141e8:	68 17 45 02 c0       	push   0xc0024517
c00141ed:	a3 48 e2 02 c0       	mov    ds:0xc002e248,eax
c00141f2:	e8 57 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00141f7:	89 34 24             	mov    DWORD PTR [esp],esi
c00141fa:	e8 92 f0 ff ff       	call   c0013291 <Virt::freeSwapfilePage(unsigned long)>
c00141ff:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0014205:	58                   	pop    eax
c0014206:	5a                   	pop    edx
c0014207:	51                   	push   ecx
c0014208:	68 f4 41 02 c0       	push   0xc00241f4
c001420d:	e8 3c 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014212:	0f 20 d8             	mov    eax,cr3
c0014215:	0f 22 d8             	mov    cr3,eax
c0014218:	c7 04 24 2c 45 02 c0 	mov    DWORD PTR [esp],0xc002452c
c001421f:	e8 2a 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014224:	8b 3d 0c ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea0c
c001422a:	5b                   	pop    ebx
c001422b:	5e                   	pop    esi
c001422c:	57                   	push   edi
c001422d:	68 18 42 02 c0       	push   0xc0024218
c0014232:	e8 17 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014237:	5d                   	pop    ebp
c0014238:	58                   	pop    eax
c0014239:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001423e:	50                   	push   eax
c001423f:	68 3c 42 02 c0       	push   0xc002423c
c0014244:	e8 05 2d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014249:	83 c4 10             	add    esp,0x10
c001424c:	b0 01                	mov    al,0x1
c001424e:	e9 b2 fd ff ff       	jmp    c0014005 <VAS::tryLoadBackOffDisk(unsigned long)+0xc1>
c0014253:	90                   	nop

c0014254 <VAS::lockPage(unsigned long)>:
c0014254:	56                   	push   esi
c0014255:	53                   	push   ebx
c0014256:	83 ec 04             	sub    esp,0x4
c0014259:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001425d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014261:	50                   	push   eax
c0014262:	56                   	push   esi
c0014263:	e8 ec f1 ff ff       	call   c0013454 <VAS::getPageTableEntry(unsigned long)>
c0014268:	5a                   	pop    edx
c0014269:	59                   	pop    ecx
c001426a:	89 c3                	mov    ebx,eax
c001426c:	8b 00                	mov    eax,DWORD PTR [eax]
c001426e:	a8 01                	test   al,0x1
c0014270:	74 10                	je     c0014282 <VAS::lockPage(unsigned long)+0x2e>
c0014272:	f6 c4 08             	test   ah,0x8
c0014275:	74 28                	je     c001429f <VAS::lockPage(unsigned long)+0x4b>
c0014277:	80 e4 f7             	and    ah,0xf7
c001427a:	89 03                	mov    DWORD PTR [ebx],eax
c001427c:	83 c4 04             	add    esp,0x4
c001427f:	5b                   	pop    ebx
c0014280:	5e                   	pop    esi
c0014281:	c3                   	ret    
c0014282:	83 ec 08             	sub    esp,0x8
c0014285:	25 00 f0 ff ff       	and    eax,0xfffff000
c001428a:	50                   	push   eax
c001428b:	56                   	push   esi
c001428c:	e8 b3 fc ff ff       	call   c0013f44 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014291:	83 c4 10             	add    esp,0x10
c0014294:	84 c0                	test   al,al
c0014296:	74 19                	je     c00142b1 <VAS::lockPage(unsigned long)+0x5d>
c0014298:	8b 03                	mov    eax,DWORD PTR [ebx]
c001429a:	f6 c4 08             	test   ah,0x8
c001429d:	75 d8                	jne    c0014277 <VAS::lockPage(unsigned long)+0x23>
c001429f:	c7 44 24 10 30 40 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024030
c00142a7:	83 c4 04             	add    esp,0x4
c00142aa:	5b                   	pop    ebx
c00142ab:	5e                   	pop    esi
c00142ac:	e9 05 bb ff ff       	jmp    c000fdb6 <KePanic(char const*)>
c00142b1:	83 ec 0c             	sub    esp,0xc
c00142b4:	68 f0 42 02 c0       	push   0xc00242f0
c00142b9:	e8 f8 ba ff ff       	call   c000fdb6 <KePanic(char const*)>
c00142be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142c0:	83 c4 10             	add    esp,0x10
c00142c3:	eb ad                	jmp    c0014272 <VAS::lockPage(unsigned long)+0x1e>
c00142c5:	90                   	nop

c00142c6 <VAS::lockPages(unsigned long, int)>:
c00142c6:	55                   	push   ebp
c00142c7:	57                   	push   edi
c00142c8:	56                   	push   esi
c00142c9:	53                   	push   ebx
c00142ca:	83 ec 0c             	sub    esp,0xc
c00142cd:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00142d1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00142d5:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00142d9:	85 ff                	test   edi,edi
c00142db:	7e 1c                	jle    c00142f9 <VAS::lockPages(unsigned long, int)+0x33>
c00142dd:	31 f6                	xor    esi,esi
c00142df:	83 ec 08             	sub    esp,0x8
c00142e2:	83 c6 01             	add    esi,0x1
c00142e5:	53                   	push   ebx
c00142e6:	81 c3 00 10 00 00    	add    ebx,0x1000
c00142ec:	55                   	push   ebp
c00142ed:	e8 62 ff ff ff       	call   c0014254 <VAS::lockPage(unsigned long)>
c00142f2:	83 c4 10             	add    esp,0x10
c00142f5:	39 f7                	cmp    edi,esi
c00142f7:	75 e6                	jne    c00142df <VAS::lockPages(unsigned long, int)+0x19>
c00142f9:	83 c4 0c             	add    esp,0xc
c00142fc:	5b                   	pop    ebx
c00142fd:	5e                   	pop    esi
c00142fe:	5f                   	pop    edi
c00142ff:	5d                   	pop    ebp
c0014300:	c3                   	ret    
c0014301:	90                   	nop

c0014302 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0014302:	55                   	push   ebp
c0014303:	57                   	push   edi
c0014304:	56                   	push   esi
c0014305:	53                   	push   ebx
c0014306:	83 ec 28             	sub    esp,0x28
c0014309:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001430d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014311:	50                   	push   eax
c0014312:	e8 5e ee ff ff       	call   c0013175 <Virt::allocateKernelVirtualPages(int)>
c0014317:	83 c4 0c             	add    esp,0xc
c001431a:	6a 07                	push   0x7
c001431c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014320:	52                   	push   edx
c0014321:	89 c5                	mov    ebp,eax
c0014323:	53                   	push   ebx
c0014324:	e8 2d f6 ff ff       	call   c0013956 <VAS::allocatePages(int, int)>
c0014329:	83 c4 10             	add    esp,0x10
c001432c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014330:	89 c7                	mov    edi,eax
c0014332:	85 c9                	test   ecx,ecx
c0014334:	74 2f                	je     c0014365 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0014336:	31 f6                	xor    esi,esi
c0014338:	e8 73 bc ff ff       	call   c000ffb0 <Phys::allocatePage()>
c001433d:	83 c6 01             	add    esi,0x1
c0014340:	6a 03                	push   0x3
c0014342:	55                   	push   ebp
c0014343:	50                   	push   eax
c0014344:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014348:	53                   	push   ebx
c0014349:	e8 00 f5 ff ff       	call   c001384e <VAS::mapPage(unsigned long, unsigned long, int)>
c001434e:	6a 07                	push   0x7
c0014350:	57                   	push   edi
c0014351:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014355:	50                   	push   eax
c0014356:	53                   	push   ebx
c0014357:	e8 f2 f4 ff ff       	call   c001384e <VAS::mapPage(unsigned long, unsigned long, int)>
c001435c:	83 c4 20             	add    esp,0x20
c001435f:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c0014363:	75 d3                	jne    c0014338 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0014365:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014369:	89 28                	mov    DWORD PTR [eax],ebp
c001436b:	83 c4 1c             	add    esp,0x1c
c001436e:	89 f8                	mov    eax,edi
c0014370:	5b                   	pop    ebx
c0014371:	5e                   	pop    esi
c0014372:	5f                   	pop    edi
c0014373:	5d                   	pop    ebp
c0014374:	c3                   	ret    
c0014375:	90                   	nop

c0014376 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0014376:	53                   	push   ebx
c0014377:	83 ec 14             	sub    esp,0x14
c001437a:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001437e:	68 20 43 02 c0       	push   0xc0024320
c0014383:	e8 c6 2b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014388:	c7 04 24 80 43 02 c0 	mov    DWORD PTR [esp],0xc0024380
c001438f:	e8 ba 2b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014394:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014398:	83 c4 18             	add    esp,0x18
c001439b:	5b                   	pop    ebx
c001439c:	e9 d2 f0 ff ff       	jmp    c0013473 <Virt::freeKernelVirtualPages(unsigned long)>
c00143a1:	90                   	nop

c00143a2 <VAS::scanForEviction()>:
c00143a2:	57                   	push   edi
c00143a3:	56                   	push   esi
c00143a4:	31 f6                	xor    esi,esi
c00143a6:	53                   	push   ebx
c00143a7:	83 ec 18             	sub    esp,0x18
c00143aa:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00143af:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00143b3:	50                   	push   eax
c00143b4:	68 fc 43 02 c0       	push   0xc00243fc
c00143b9:	e8 90 2b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00143be:	c7 04 24 33 45 02 c0 	mov    DWORD PTR [esp],0xc0024533
c00143c5:	e8 84 2b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00143ca:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00143cd:	83 c4 10             	add    esp,0x10
c00143d0:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00143d6:	75 0e                	jne    c00143e6 <VAS::scanForEviction()+0x44>
c00143d8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00143db:	89 da                	mov    edx,ebx
c00143dd:	c1 ea 16             	shr    edx,0x16
c00143e0:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00143e4:	74 5b                	je     c0014441 <VAS::scanForEviction()+0x9f>
c00143e6:	83 ec 08             	sub    esp,0x8
c00143e9:	53                   	push   ebx
c00143ea:	57                   	push   edi
c00143eb:	e8 64 f0 ff ff       	call   c0013454 <VAS::getPageTableEntry(unsigned long)>
c00143f0:	83 c4 10             	add    esp,0x10
c00143f3:	8b 10                	mov    edx,DWORD PTR [eax]
c00143f5:	89 d1                	mov    ecx,edx
c00143f7:	c1 e9 0c             	shr    ecx,0xc
c00143fa:	74 10                	je     c001440c <VAS::scanForEviction()+0x6a>
c00143fc:	89 d1                	mov    ecx,edx
c00143fe:	81 e1 01 08 00 00    	and    ecx,0x801
c0014404:	81 f9 01 08 00 00    	cmp    ecx,0x801
c001440a:	74 40                	je     c001444c <VAS::scanForEviction()+0xaa>
c001440c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014412:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0014418:	76 2d                	jbe    c0014447 <VAS::scanForEviction()+0xa5>
c001441a:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0014421:	83 c6 01             	add    esi,0x1
c0014424:	83 fe 03             	cmp    esi,0x3
c0014427:	74 32                	je     c001445b <VAS::scanForEviction()+0xb9>
c0014429:	31 db                	xor    ebx,ebx
c001442b:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014431:	75 b3                	jne    c00143e6 <VAS::scanForEviction()+0x44>
c0014433:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014436:	89 da                	mov    edx,ebx
c0014438:	c1 ea 16             	shr    edx,0x16
c001443b:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001443f:	75 a5                	jne    c00143e6 <VAS::scanForEviction()+0x44>
c0014441:	81 c3 00 00 40 00    	add    ebx,0x400000
c0014447:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c001444a:	eb 84                	jmp    c00143d0 <VAS::scanForEviction()+0x2e>
c001444c:	f6 c2 20             	test   dl,0x20
c001444f:	74 13                	je     c0014464 <VAS::scanForEviction()+0xc2>
c0014451:	83 e2 df             	and    edx,0xffffffdf
c0014454:	89 10                	mov    DWORD PTR [eax],edx
c0014456:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0014459:	eb b1                	jmp    c001440c <VAS::scanForEviction()+0x6a>
c001445b:	83 c4 10             	add    esp,0x10
c001445e:	31 c0                	xor    eax,eax
c0014460:	5b                   	pop    ebx
c0014461:	5e                   	pop    esi
c0014462:	5f                   	pop    edi
c0014463:	c3                   	ret    
c0014464:	89 d0                	mov    eax,edx
c0014466:	83 ec 08             	sub    esp,0x8
c0014469:	25 00 f0 ff ff       	and    eax,0xfffff000
c001446e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014472:	53                   	push   ebx
c0014473:	68 4f 45 02 c0       	push   0xc002454f
c0014478:	e8 d1 2a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001447d:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0014480:	58                   	pop    eax
c0014481:	5a                   	pop    edx
c0014482:	51                   	push   ecx
c0014483:	57                   	push   edi
c0014484:	e8 f1 f8 ff ff       	call   c0013d7a <VAS::evict(unsigned long)>
c0014489:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001448c:	5b                   	pop    ebx
c001448d:	5e                   	pop    esi
c001448e:	50                   	push   eax
c001448f:	68 63 45 02 c0       	push   0xc0024563
c0014494:	e8 b5 2a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014499:	58                   	pop    eax
c001449a:	5a                   	pop    edx
c001449b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001449f:	50                   	push   eax
c00144a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00144a4:	68 76 45 02 c0       	push   0xc0024576
c00144a9:	e8 a0 2a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00144ae:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00144b1:	81 c1 00 10 00 00    	add    ecx,0x1000
c00144b7:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c00144ba:	8b 3d 30 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea30
c00144c0:	5b                   	pop    ebx
c00144c1:	5e                   	pop    esi
c00144c2:	57                   	push   edi
c00144c3:	68 1c 44 02 c0       	push   0xc002441c
c00144c8:	e8 81 2a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00144cd:	83 c4 10             	add    esp,0x10
c00144d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00144d4:	83 c4 10             	add    esp,0x10
c00144d7:	5b                   	pop    ebx
c00144d8:	5e                   	pop    esi
c00144d9:	5f                   	pop    edi
c00144da:	c3                   	ret    

c00144db <mapVASFirstTime>:
c00144db:	55                   	push   ebp
c00144dc:	57                   	push   edi
c00144dd:	56                   	push   esi
c00144de:	53                   	push   ebx
c00144df:	83 ec 0c             	sub    esp,0xc
c00144e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144e7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00144ea:	83 fa 01             	cmp    edx,0x1
c00144ed:	0f 84 cb 00 00 00    	je     c00145be <mapVASFirstTime+0xe3>
c00144f3:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00144f6:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00144fb:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0014500:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0014503:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c0014509:	c1 e5 15             	shl    ebp,0x15
c001450c:	29 eb                	sub    ebx,ebp
c001450e:	29 ef                	sub    edi,ebp
c0014510:	e8 9b ba ff ff       	call   c000ffb0 <Phys::allocatePage()>
c0014515:	83 ec 0c             	sub    esp,0xc
c0014518:	68 03 04 00 00       	push   0x403
c001451d:	6a 01                	push   0x1
c001451f:	53                   	push   ebx
c0014520:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014526:	50                   	push   eax
c0014527:	56                   	push   esi
c0014528:	e8 1b f5 ff ff       	call   c0013a48 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001452d:	83 c4 20             	add    esp,0x20
c0014530:	39 fb                	cmp    ebx,edi
c0014532:	75 dc                	jne    c0014510 <mapVASFirstTime+0x35>
c0014534:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0014539:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c001453e:	29 eb                	sub    ebx,ebp
c0014540:	29 ef                	sub    edi,ebp
c0014542:	e8 69 ba ff ff       	call   c000ffb0 <Phys::allocatePage()>
c0014547:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c001454b:	83 fa 01             	cmp    edx,0x1
c001454e:	19 d2                	sbb    edx,edx
c0014550:	83 ec 0c             	sub    esp,0xc
c0014553:	83 e2 04             	and    edx,0x4
c0014556:	81 c2 03 04 00 00    	add    edx,0x403
c001455c:	52                   	push   edx
c001455d:	6a 01                	push   0x1
c001455f:	53                   	push   ebx
c0014560:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014566:	50                   	push   eax
c0014567:	56                   	push   esi
c0014568:	e8 db f4 ff ff       	call   c0013a48 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001456d:	83 c4 20             	add    esp,0x20
c0014570:	39 df                	cmp    edi,ebx
c0014572:	75 ce                	jne    c0014542 <mapVASFirstTime+0x67>
c0014574:	83 ec 0c             	sub    esp,0xc
c0014577:	bb 7c 80 02 c0       	mov    ebx,0xc002807c
c001457c:	6a 04                	push   0x4
c001457e:	81 eb 00 70 02 c0    	sub    ebx,0xc0027000
c0014584:	6a ff                	push   0xffffffff
c0014586:	c1 eb 0c             	shr    ebx,0xc
c0014589:	53                   	push   ebx
c001458a:	68 00 70 02 c0       	push   0xc0027000
c001458f:	56                   	push   esi
c0014590:	e8 59 f0 ff ff       	call   c00135ee <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0014595:	83 c4 14             	add    esp,0x14
c0014598:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c001459d:	6a 04                	push   0x4
c001459f:	6a ff                	push   0xffffffff
c00145a1:	53                   	push   ebx
c00145a2:	68 00 70 02 c0       	push   0xc0027000
c00145a7:	50                   	push   eax
c00145a8:	e8 41 f0 ff ff       	call   c00135ee <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00145ad:	0f 20 d8             	mov    eax,cr3
c00145b0:	0f 22 d8             	mov    cr3,eax
c00145b3:	83 c4 20             	add    esp,0x20
c00145b6:	83 c4 0c             	add    esp,0xc
c00145b9:	5b                   	pop    ebx
c00145ba:	5e                   	pop    esi
c00145bb:	5f                   	pop    edi
c00145bc:	5d                   	pop    ebp
c00145bd:	c3                   	ret    
c00145be:	83 ec 0c             	sub    esp,0xc
c00145c1:	68 83 45 02 c0       	push   0xc0024583
c00145c6:	e8 83 29 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00145cb:	83 c4 10             	add    esp,0x10
c00145ce:	83 c4 0c             	add    esp,0xc
c00145d1:	5b                   	pop    ebx
c00145d2:	5e                   	pop    esi
c00145d3:	5f                   	pop    edi
c00145d4:	5d                   	pop    ebp
c00145d5:	c3                   	ret    

c00145d6 <SysEject(regs*)>:
c00145d6:	83 ec 0c             	sub    esp,0xc
c00145d9:	83 ca ff             	or     edx,0xffffffff
c00145dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145e0:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00145e3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00145e8:	83 e9 41             	sub    ecx,0x41
c00145eb:	83 f9 19             	cmp    ecx,0x19
c00145ee:	77 18                	ja     c0014608 <SysEject(regs*)+0x32>
c00145f0:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00145f7:	85 c9                	test   ecx,ecx
c00145f9:	74 0d                	je     c0014608 <SysEject(regs*)+0x32>
c00145fb:	83 ec 0c             	sub    esp,0xc
c00145fe:	51                   	push   ecx
c00145ff:	e8 7e 63 ff ff       	call   c000a982 <LogicalDisk::eject()>
c0014604:	83 c4 10             	add    esp,0x10
c0014607:	99                   	cdq    
c0014608:	83 c4 0c             	add    esp,0xc
c001460b:	c3                   	ret    

c001460c <SysExit(regs*)>:
c001460c:	83 ec 18             	sub    esp,0x18
c001460f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014613:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014616:	e8 5d 2b 00 00       	call   c0017178 <terminateTask(int)>
c001461b:	83 c8 ff             	or     eax,0xffffffff
c001461e:	83 c4 1c             	add    esp,0x1c
c0014621:	89 c2                	mov    edx,eax
c0014623:	c3                   	ret    

c0014624 <SysGetCwd(regs*)>:
c0014624:	83 ec 10             	sub    esp,0x10
c0014627:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001462b:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001462e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014631:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014636:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014639:	e8 6e 37 ff ff       	call   c0007dac <Fs::getcwd(Process*, char*, int)>
c001463e:	83 c4 1c             	add    esp,0x1c
c0014641:	99                   	cdq    
c0014642:	c3                   	ret    

c0014643 <SysGetPID(regs*)>:
c0014643:	83 ec 14             	sub    esp,0x14
c0014646:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001464b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001464e:	ff 30                	push   DWORD PTR [eax]
c0014650:	68 9c 45 02 c0       	push   0xc002459c
c0014655:	e8 f4 28 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001465a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001465f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014662:	8b 00                	mov    eax,DWORD PTR [eax]
c0014664:	83 c4 1c             	add    esp,0x1c
c0014667:	99                   	cdq    
c0014668:	c3                   	ret    

c0014669 <SysGetRAMData(regs*)>:
c0014669:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c001466e:	03 05 3c e1 02 c0    	add    eax,DWORD PTR ds:0xc002e13c
c0014674:	8b 0d 40 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e140
c001467a:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c0014680:	99                   	cdq    
c0014681:	f7 f9                	idiv   ecx
c0014683:	c1 e0 18             	shl    eax,0x18
c0014686:	09 c8                	or     eax,ecx
c0014688:	99                   	cdq    
c0014689:	c3                   	ret    

c001468a <SysGetVGAPtr(regs*)>:
c001468a:	55                   	push   ebp
c001468b:	57                   	push   edi
c001468c:	56                   	push   esi
c001468d:	53                   	push   ebx
c001468e:	83 ec 0c             	sub    esp,0xc
c0014691:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014695:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0014698:	83 f8 ff             	cmp    eax,0xffffffff
c001469b:	74 1b                	je     c00146b8 <SysGetVGAPtr(regs*)+0x2e>
c001469d:	83 ec 0c             	sub    esp,0xc
c00146a0:	50                   	push   eax
c00146a1:	e8 86 25 00 00       	call   c0016c2c <Thr::processFromPID(int)>
c00146a6:	83 c4 10             	add    esp,0x10
c00146a9:	31 d2                	xor    edx,edx
c00146ab:	89 c1                	mov    ecx,eax
c00146ad:	b8 01 00 00 00       	mov    eax,0x1
c00146b2:	85 c9                	test   ecx,ecx
c00146b4:	75 0a                	jne    c00146c0 <SysGetVGAPtr(regs*)+0x36>
c00146b6:	eb 61                	jmp    c0014719 <SysGetVGAPtr(regs*)+0x8f>
c00146b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146bd:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00146c0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00146c4:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00146ca:	74 0c                	je     c00146d8 <SysGetVGAPtr(regs*)+0x4e>
c00146cc:	83 ec 0c             	sub    esp,0xc
c00146cf:	55                   	push   ebp
c00146d0:	e8 4a db ff ff       	call   c001221f <setActiveTerminal(VgaText*)>
c00146d5:	83 c4 10             	add    esp,0x10
c00146d8:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00146db:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00146e0:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00146e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00146e5:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00146e8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00146eb:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00146f1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00146f4:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00146f7:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00146fd:	50                   	push   eax
c00146fe:	50                   	push   eax
c00146ff:	68 ab 45 02 c0       	push   0xc00245ab
c0014704:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014707:	05 a8 0f 00 00       	add    eax,0xfa8
c001470c:	50                   	push   eax
c001470d:	e8 3e bf fe ff       	call   c0000650 <strcpy>
c0014712:	83 c4 10             	add    esp,0x10
c0014715:	31 c0                	xor    eax,eax
c0014717:	31 d2                	xor    edx,edx
c0014719:	83 c4 0c             	add    esp,0xc
c001471c:	5b                   	pop    ebx
c001471d:	5e                   	pop    esi
c001471e:	5f                   	pop    edi
c001471f:	5d                   	pop    ebp
c0014720:	c3                   	ret    
c0014721:	66 90                	xchg   ax,ax
c0014723:	90                   	nop

c0014724 <SysKill(regs*)>:
c0014724:	53                   	push   ebx
c0014725:	83 ec 08             	sub    esp,0x8
c0014728:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001472c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0014730:	75 16                	jne    c0014748 <SysKill(regs*)+0x24>
c0014732:	83 ec 0c             	sub    esp,0xc
c0014735:	68 b5 45 02 c0       	push   0xc00245b5
c001473a:	e8 77 b6 ff ff       	call   c000fdb6 <KePanic(char const*)>
c001473f:	83 c4 10             	add    esp,0x10
c0014742:	e9 89 00 00 00       	jmp    c00147d0 <SysKill(regs*)+0xac>
c0014747:	90                   	nop
c0014748:	83 ec 0c             	sub    esp,0xc
c001474b:	68 4c ea 02 c0       	push   0xc002ea4c
c0014750:	e8 a3 cf 00 00       	call   c00216f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014755:	8d 76 00             	lea    esi,[esi+0x0]
c0014758:	83 c4 10             	add    esp,0x10
c001475b:	85 c0                	test   eax,eax
c001475d:	74 19                	je     c0014778 <SysKill(regs*)+0x54>
c001475f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0014762:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014765:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014767:	74 33                	je     c001479c <SysKill(regs*)+0x78>
c0014769:	52                   	push   edx
c001476a:	52                   	push   edx
c001476b:	50                   	push   eax
c001476c:	68 4c ea 02 c0       	push   0xc002ea4c
c0014771:	e8 8e d4 00 00       	call   c0021c04 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014776:	eb e0                	jmp    c0014758 <SysKill(regs*)+0x34>
c0014778:	83 ec 0c             	sub    esp,0xc
c001477b:	68 40 ea 02 c0       	push   0xc002ea40
c0014780:	e8 73 cf 00 00       	call   c00216f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014785:	8d 76 00             	lea    esi,[esi+0x0]
c0014788:	83 c4 10             	add    esp,0x10
c001478b:	85 c0                	test   eax,eax
c001478d:	74 41                	je     c00147d0 <SysKill(regs*)+0xac>
c001478f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0014792:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014795:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014797:	75 27                	jne    c00147c0 <SysKill(regs*)+0x9c>
c0014799:	8d 76 00             	lea    esi,[esi+0x0]
c001479c:	51                   	push   ecx
c001479d:	51                   	push   ecx
c001479e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00147a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00147a9:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00147af:	e8 40 c7 ff ff       	call   c0010ef4 <KeRaiseSignal(SigHandlerBlock*, int)>
c00147b4:	83 c4 10             	add    esp,0x10
c00147b7:	31 c0                	xor    eax,eax
c00147b9:	31 d2                	xor    edx,edx
c00147bb:	eb 1b                	jmp    c00147d8 <SysKill(regs*)+0xb4>
c00147bd:	8d 76 00             	lea    esi,[esi+0x0]
c00147c0:	52                   	push   edx
c00147c1:	52                   	push   edx
c00147c2:	50                   	push   eax
c00147c3:	68 40 ea 02 c0       	push   0xc002ea40
c00147c8:	e8 37 d4 00 00       	call   c0021c04 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00147cd:	eb b9                	jmp    c0014788 <SysKill(regs*)+0x64>
c00147cf:	90                   	nop
c00147d0:	83 c8 ff             	or     eax,0xffffffff
c00147d3:	89 c2                	mov    edx,eax
c00147d5:	8d 76 00             	lea    esi,[esi+0x0]
c00147d8:	83 c4 08             	add    esp,0x8
c00147db:	5b                   	pop    ebx
c00147dc:	c3                   	ret    

c00147dd <SysLoadDLL(regs*)>:
c00147dd:	56                   	push   esi
c00147de:	31 d2                	xor    edx,edx
c00147e0:	53                   	push   ebx
c00147e1:	b8 01 00 00 00       	mov    eax,0x1
c00147e6:	51                   	push   ecx
c00147e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00147eb:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00147ef:	0f 84 8c 00 00 00    	je     c0014881 <SysLoadDLL(regs*)+0xa4>
c00147f5:	83 ec 0c             	sub    esp,0xc
c00147f8:	68 14 01 00 00       	push   0x114
c00147fd:	e8 6e b2 ff ff       	call   c000fa70 <malloc>
c0014802:	83 c4 0c             	add    esp,0xc
c0014805:	89 c3                	mov    ebx,eax
c0014807:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001480c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001480f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014812:	53                   	push   ebx
c0014813:	e8 14 39 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0014818:	83 c4 10             	add    esp,0x10
c001481b:	31 d2                	xor    edx,edx
c001481d:	85 db                	test   ebx,ebx
c001481f:	b8 02 00 00 00       	mov    eax,0x2
c0014824:	74 5b                	je     c0014881 <SysLoadDLL(regs*)+0xa4>
c0014826:	83 ec 0c             	sub    esp,0xc
c0014829:	53                   	push   ebx
c001482a:	e8 df 3b ff ff       	call   c000840e <File::exists()>
c001482f:	83 c4 10             	add    esp,0x10
c0014832:	84 c0                	test   al,al
c0014834:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014836:	75 11                	jne    c0014849 <SysLoadDLL(regs*)+0x6c>
c0014838:	83 ec 0c             	sub    esp,0xc
c001483b:	53                   	push   ebx
c001483c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001483f:	83 c4 10             	add    esp,0x10
c0014842:	b8 03 00 00 00       	mov    eax,0x3
c0014847:	eb 36                	jmp    c001487f <SysLoadDLL(regs*)+0xa2>
c0014849:	83 ec 0c             	sub    esp,0xc
c001484c:	53                   	push   ebx
c001484d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014850:	58                   	pop    eax
c0014851:	5a                   	pop    edx
c0014852:	6a 00                	push   0x0
c0014854:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014857:	e8 50 16 00 00       	call   c0015eac <Thr::loadDLL(char const*, bool)>
c001485c:	83 c4 10             	add    esp,0x10
c001485f:	31 d2                	xor    edx,edx
c0014861:	89 c1                	mov    ecx,eax
c0014863:	b8 04 00 00 00       	mov    eax,0x4
c0014868:	85 c9                	test   ecx,ecx
c001486a:	74 15                	je     c0014881 <SysLoadDLL(regs*)+0xa4>
c001486c:	53                   	push   ebx
c001486d:	53                   	push   ebx
c001486e:	ff 35 d0 c0 02 c0    	push   DWORD PTR ds:0xc002c0d0
c0014874:	51                   	push   ecx
c0014875:	e8 93 18 00 00       	call   c001610d <Thr::executeDLL(unsigned long, void*)>
c001487a:	83 c4 10             	add    esp,0x10
c001487d:	31 c0                	xor    eax,eax
c001487f:	31 d2                	xor    edx,edx
c0014881:	59                   	pop    ecx
c0014882:	5b                   	pop    ebx
c0014883:	5e                   	pop    esi
c0014884:	c3                   	ret    

c0014885 <SysRead(regs*)>:
c0014885:	57                   	push   edi
c0014886:	56                   	push   esi
c0014887:	53                   	push   ebx
c0014888:	83 ec 10             	sub    esp,0x10
c001488b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001488f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014892:	83 f8 02             	cmp    eax,0x2
c0014895:	77 10                	ja     c00148a7 <SysRead(regs*)+0x22>
c0014897:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001489c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001489f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00148a5:	eb 0e                	jmp    c00148b5 <SysRead(regs*)+0x30>
c00148a7:	83 ec 0c             	sub    esp,0xc
c00148aa:	50                   	push   eax
c00148ab:	e8 59 e7 ff ff       	call   c0013009 <KeGetFileFromDescriptor(int)>
c00148b0:	83 c4 10             	add    esp,0x10
c00148b3:	89 c1                	mov    ecx,eax
c00148b5:	83 c8 ff             	or     eax,0xffffffff
c00148b8:	85 c9                	test   ecx,ecx
c00148ba:	89 c2                	mov    edx,eax
c00148bc:	74 28                	je     c00148e6 <SysRead(regs*)+0x61>
c00148be:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00148c6:	83 ec 0c             	sub    esp,0xc
c00148c9:	31 ff                	xor    edi,edi
c00148cb:	8d 54 24 18          	lea    edx,[esp+0x18]
c00148cf:	8b 01                	mov    eax,DWORD PTR [ecx]
c00148d1:	52                   	push   edx
c00148d2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00148d5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00148d8:	57                   	push   edi
c00148d9:	56                   	push   esi
c00148da:	51                   	push   ecx
c00148db:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00148de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00148e2:	83 c4 20             	add    esp,0x20
c00148e5:	99                   	cdq    
c00148e6:	83 c4 10             	add    esp,0x10
c00148e9:	5b                   	pop    ebx
c00148ea:	5e                   	pop    esi
c00148eb:	5f                   	pop    edi
c00148ec:	c3                   	ret    

c00148ed <SysRegisterSignal(regs*)>:
c00148ed:	83 ec 18             	sub    esp,0x18
c00148f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00148f4:	6a 00                	push   0x0
c00148f6:	6a 00                	push   0x0
c00148f8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00148fb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00148fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014903:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014906:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001490c:	e8 ad c5 ff ff       	call   c0010ebe <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014911:	83 c4 2c             	add    esp,0x2c
c0014914:	99                   	cdq    
c0014915:	c3                   	ret    

c0014916 <SysRegistryGetTypeFromPath(regs*)>:
c0014916:	53                   	push   ebx
c0014917:	81 ec 40 01 00 00    	sub    esp,0x140
c001491d:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014924:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014927:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001492a:	e8 08 95 ff ff       	call   c000de37 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001492f:	83 c4 10             	add    esp,0x10
c0014932:	85 c0                	test   eax,eax
c0014934:	89 c1                	mov    ecx,eax
c0014936:	74 15                	je     c001494d <SysRegistryGetTypeFromPath(regs*)+0x37>
c0014938:	50                   	push   eax
c0014939:	8d 44 24 08          	lea    eax,[esp+0x8]
c001493d:	50                   	push   eax
c001493e:	51                   	push   ecx
c001493f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014942:	e8 d5 90 ff ff       	call   c000da1c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014947:	83 c4 10             	add    esp,0x10
c001494a:	99                   	cdq    
c001494b:	eb 05                	jmp    c0014952 <SysRegistryGetTypeFromPath(regs*)+0x3c>
c001494d:	83 c8 ff             	or     eax,0xffffffff
c0014950:	89 c2                	mov    edx,eax
c0014952:	81 c4 38 01 00 00    	add    esp,0x138
c0014958:	5b                   	pop    ebx
c0014959:	c3                   	ret    

c001495a <SysRegistryReadExtent(regs*)>:
c001495a:	83 ec 1c             	sub    esp,0x1c
c001495d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014961:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014964:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014967:	85 c0                	test   eax,eax
c0014969:	79 1f                	jns    c001498a <SysRegistryReadExtent(regs*)+0x30>
c001496b:	52                   	push   edx
c001496c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014971:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014975:	52                   	push   edx
c0014976:	50                   	push   eax
c0014977:	51                   	push   ecx
c0014978:	e8 91 8f ff ff       	call   c000d90e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c001497d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014981:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014985:	83 c4 10             	add    esp,0x10
c0014988:	eb 14                	jmp    c001499e <SysRegistryReadExtent(regs*)+0x44>
c001498a:	83 ec 04             	sub    esp,0x4
c001498d:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014990:	50                   	push   eax
c0014991:	51                   	push   ecx
c0014992:	e8 15 8a ff ff       	call   c000d3ac <CmGetString(Reghive_Tag*, int, char*)>
c0014997:	83 c4 10             	add    esp,0x10
c001499a:	31 c0                	xor    eax,eax
c001499c:	31 d2                	xor    edx,edx
c001499e:	83 c4 1c             	add    esp,0x1c
c00149a1:	c3                   	ret    

c00149a2 <SysRegistryPathToExtentLookup(regs*)>:
c00149a2:	83 ec 14             	sub    esp,0x14
c00149a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149a9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00149ac:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00149af:	e8 83 94 ff ff       	call   c000de37 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00149b4:	83 c4 1c             	add    esp,0x1c
c00149b7:	99                   	cdq    
c00149b8:	c3                   	ret    

c00149b9 <SysRegistryEnterDirectory(regs*)>:
c00149b9:	83 ec 14             	sub    esp,0x14
c00149bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149c0:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00149c3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00149c6:	e8 58 8a ff ff       	call   c000d423 <CmEnterDirectory(Reghive_Tag*, int)>
c00149cb:	83 c4 1c             	add    esp,0x1c
c00149ce:	99                   	cdq    
c00149cf:	c3                   	ret    

c00149d0 <SysRegistryGetNext(regs*)>:
c00149d0:	83 ec 14             	sub    esp,0x14
c00149d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149d7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00149da:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00149dd:	e8 80 8a ff ff       	call   c000d462 <CmGetNext(Reghive_Tag*, int)>
c00149e2:	83 c4 1c             	add    esp,0x1c
c00149e5:	99                   	cdq    
c00149e6:	c3                   	ret    

c00149e7 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00149e7:	57                   	push   edi
c00149e8:	56                   	push   esi
c00149e9:	53                   	push   ebx
c00149ea:	81 ec 34 01 00 00    	sub    esp,0x134
c00149f0:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00149f7:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00149fb:	57                   	push   edi
c00149fc:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00149ff:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014a02:	e8 15 90 ff ff       	call   c000da1c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014a07:	89 c3                	mov    ebx,eax
c0014a09:	58                   	pop    eax
c0014a0a:	5a                   	pop    edx
c0014a0b:	57                   	push   edi
c0014a0c:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014a0f:	e8 3c bc fe ff       	call   c0000650 <strcpy>
c0014a14:	81 c4 40 01 00 00    	add    esp,0x140
c0014a1a:	89 d8                	mov    eax,ebx
c0014a1c:	5b                   	pop    ebx
c0014a1d:	99                   	cdq    
c0014a1e:	5e                   	pop    esi
c0014a1f:	5f                   	pop    edi
c0014a20:	c3                   	ret    

c0014a21 <SysRegistryOpen(regs*)>:
c0014a21:	83 ec 18             	sub    esp,0x18
c0014a24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a28:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014a2b:	e8 0c 88 ff ff       	call   c000d23c <CmOpen(char const*)>
c0014a30:	83 c4 1c             	add    esp,0x1c
c0014a33:	99                   	cdq    
c0014a34:	c3                   	ret    

c0014a35 <SysRegistryClose(regs*)>:
c0014a35:	83 ec 18             	sub    esp,0x18
c0014a38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a3c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014a3f:	e8 16 89 ff ff       	call   c000d35a <CmClose(Reghive_Tag*)>
c0014a44:	31 c0                	xor    eax,eax
c0014a46:	31 d2                	xor    edx,edx
c0014a48:	83 c4 1c             	add    esp,0x1c
c0014a4b:	c3                   	ret    

c0014a4c <SysRegistryEasyReadString(regs*)>:
c0014a4c:	57                   	push   edi
c0014a4d:	56                   	push   esi
c0014a4e:	53                   	push   ebx
c0014a4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a53:	83 ec 0c             	sub    esp,0xc
c0014a56:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014a59:	e8 de 87 ff ff       	call   c000d23c <CmOpen(char const*)>
c0014a5e:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014a61:	5a                   	pop    edx
c0014a62:	59                   	pop    ecx
c0014a63:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014a66:	89 c3                	mov    ebx,eax
c0014a68:	50                   	push   eax
c0014a69:	e8 c9 93 ff ff       	call   c000de37 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014a6e:	83 c4 10             	add    esp,0x10
c0014a71:	89 c1                	mov    ecx,eax
c0014a73:	b8 01 00 00 00       	mov    eax,0x1
c0014a78:	85 c9                	test   ecx,ecx
c0014a7a:	7e 16                	jle    c0014a92 <SysRegistryEasyReadString(regs*)+0x46>
c0014a7c:	50                   	push   eax
c0014a7d:	57                   	push   edi
c0014a7e:	51                   	push   ecx
c0014a7f:	53                   	push   ebx
c0014a80:	e8 27 89 ff ff       	call   c000d3ac <CmGetString(Reghive_Tag*, int, char*)>
c0014a85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a88:	e8 cd 88 ff ff       	call   c000d35a <CmClose(Reghive_Tag*)>
c0014a8d:	83 c4 10             	add    esp,0x10
c0014a90:	31 c0                	xor    eax,eax
c0014a92:	5b                   	pop    ebx
c0014a93:	31 d2                	xor    edx,edx
c0014a95:	5e                   	pop    esi
c0014a96:	5f                   	pop    edi
c0014a97:	c3                   	ret    

c0014a98 <SysRegistryEasyReadInteger(regs*)>:
c0014a98:	56                   	push   esi
c0014a99:	53                   	push   ebx
c0014a9a:	83 ec 10             	sub    esp,0x10
c0014a9d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014aa1:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014aa4:	e8 93 87 ff ff       	call   c000d23c <CmOpen(char const*)>
c0014aa9:	5a                   	pop    edx
c0014aaa:	59                   	pop    ecx
c0014aab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014aae:	89 c3                	mov    ebx,eax
c0014ab0:	50                   	push   eax
c0014ab1:	e8 81 93 ff ff       	call   c000de37 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014ab6:	83 c4 10             	add    esp,0x10
c0014ab9:	89 c1                	mov    ecx,eax
c0014abb:	b8 01 00 00 00       	mov    eax,0x1
c0014ac0:	85 c9                	test   ecx,ecx
c0014ac2:	7e 18                	jle    c0014adc <SysRegistryEasyReadInteger(regs*)+0x44>
c0014ac4:	50                   	push   eax
c0014ac5:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014ac8:	51                   	push   ecx
c0014ac9:	53                   	push   ebx
c0014aca:	e8 3f 8e ff ff       	call   c000d90e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014acf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ad2:	e8 83 88 ff ff       	call   c000d35a <CmClose(Reghive_Tag*)>
c0014ad7:	83 c4 10             	add    esp,0x10
c0014ada:	31 c0                	xor    eax,eax
c0014adc:	59                   	pop    ecx
c0014add:	31 d2                	xor    edx,edx
c0014adf:	5b                   	pop    ebx
c0014ae0:	5e                   	pop    esi
c0014ae1:	c3                   	ret    

c0014ae2 <SysSbrk(regs*)>:
c0014ae2:	56                   	push   esi
c0014ae3:	53                   	push   ebx
c0014ae4:	50                   	push   eax
c0014ae5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014aea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014aee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014af1:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014af4:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0014afa:	85 db                	test   ebx,ebx
c0014afc:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014aff:	74 02                	je     c0014b03 <SysSbrk(regs*)+0x21>
c0014b01:	79 06                	jns    c0014b09 <SysSbrk(regs*)+0x27>
c0014b03:	89 f0                	mov    eax,esi
c0014b05:	31 d2                	xor    edx,edx
c0014b07:	eb 2a                	jmp    c0014b33 <SysSbrk(regs*)+0x51>
c0014b09:	83 c8 ff             	or     eax,0xffffffff
c0014b0c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014b12:	89 c2                	mov    edx,eax
c0014b14:	77 1d                	ja     c0014b33 <SysSbrk(regs*)+0x51>
c0014b16:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014b1c:	50                   	push   eax
c0014b1d:	68 07 0c 00 00       	push   0xc07
c0014b22:	c1 ea 0c             	shr    edx,0xc
c0014b25:	52                   	push   edx
c0014b26:	51                   	push   ecx
c0014b27:	e8 2a ee ff ff       	call   c0013956 <VAS::allocatePages(int, int)>
c0014b2c:	89 f0                	mov    eax,esi
c0014b2e:	31 d2                	xor    edx,edx
c0014b30:	83 c4 10             	add    esp,0x10
c0014b33:	59                   	pop    ecx
c0014b34:	5b                   	pop    ebx
c0014b35:	5e                   	pop    esi
c0014b36:	c3                   	ret    

c0014b37 <SysSetCwd(regs*)>:
c0014b37:	83 ec 14             	sub    esp,0x14
c0014b3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b3e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014b41:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b46:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014b49:	e8 5f 39 ff ff       	call   c00084ad <Fs::setcwd(Process*, char*)>
c0014b4e:	83 c4 1c             	add    esp,0x1c
c0014b51:	99                   	cdq    
c0014b52:	c3                   	ret    

c0014b53 <SysSetTime(regs*)>:
c0014b53:	55                   	push   ebp
c0014b54:	31 d2                	xor    edx,edx
c0014b56:	57                   	push   edi
c0014b57:	56                   	push   esi
c0014b58:	53                   	push   ebx
c0014b59:	bb 3c 00 00 00       	mov    ebx,0x3c
c0014b5e:	83 ec 30             	sub    esp,0x30
c0014b61:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0014b65:	8b 71 20             	mov    esi,DWORD PTR [ecx+0x20]
c0014b68:	89 f0                	mov    eax,esi
c0014b6a:	f7 f3                	div    ebx
c0014b6c:	89 d7                	mov    edi,edx
c0014b6e:	31 d2                	xor    edx,edx
c0014b70:	f7 f3                	div    ebx
c0014b72:	bb 10 0e 00 00       	mov    ebx,0xe10
c0014b77:	89 f0                	mov    eax,esi
c0014b79:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014b7d:	31 d2                	xor    edx,edx
c0014b7f:	f7 f3                	div    ebx
c0014b81:	bb 18 00 00 00       	mov    ebx,0x18
c0014b86:	31 d2                	xor    edx,edx
c0014b88:	f7 f3                	div    ebx
c0014b8a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014b8d:	bb 0c 00 00 00       	mov    ebx,0xc
c0014b92:	89 c6                	mov    esi,eax
c0014b94:	c1 e8 05             	shr    eax,0x5
c0014b97:	83 e6 1f             	and    esi,0x1f
c0014b9a:	46                   	inc    esi
c0014b9b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014b9f:	31 d2                	xor    edx,edx
c0014ba1:	f7 f3                	div    ebx
c0014ba3:	31 db                	xor    ebx,ebx
c0014ba5:	57                   	push   edi
c0014ba6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014baa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014bae:	0f b7 69 24          	movzx  ebp,WORD PTR [ecx+0x24]
c0014bb2:	55                   	push   ebp
c0014bb3:	52                   	push   edx
c0014bb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0014bb8:	56                   	push   esi
c0014bb9:	68 d6 45 02 c0       	push   0xc00245d6
c0014bbe:	e8 8b 23 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014bc3:	83 c4 1c             	add    esp,0x1c
c0014bc6:	57                   	push   edi
c0014bc7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014bcb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014bcf:	55                   	push   ebp
c0014bd0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014bd4:	52                   	push   edx
c0014bd5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014bd9:	56                   	push   esi
c0014bda:	68 f8 45 02 c0       	push   0xc00245f8
c0014bdf:	e8 6a 23 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014be4:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0014be9:	31 c9                	xor    ecx,ecx
c0014beb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014bef:	8a 5c 24 30          	mov    bl,BYTE PTR [esp+0x30]
c0014bf3:	8a 7c 24 2c          	mov    bh,BYTE PTR [esp+0x2c]
c0014bf7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0014bfd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014c01:	89 f0                	mov    eax,esi
c0014c03:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0014c07:	88 c1                	mov    cl,al
c0014c09:	89 e8                	mov    eax,ebp
c0014c0b:	88 d5                	mov    ch,dl
c0014c0d:	83 c4 1c             	add    esp,0x1c
c0014c10:	c1 e0 10             	shl    eax,0x10
c0014c13:	0f b7 d1             	movzx  edx,cx
c0014c16:	09 c2                	or     edx,eax
c0014c18:	89 f8                	mov    eax,edi
c0014c1a:	c1 e0 10             	shl    eax,0x10
c0014c1d:	89 d1                	mov    ecx,edx
c0014c1f:	89 da                	mov    edx,ebx
c0014c21:	81 e2 ff ff 00 ff    	and    edx,0xff00ffff
c0014c27:	09 c2                	or     edx,eax
c0014c29:	52                   	push   edx
c0014c2a:	51                   	push   ecx
c0014c2b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014c2f:	e8 c0 48 ff ff       	call   c00094f4 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014c34:	83 c4 3c             	add    esp,0x3c
c0014c37:	31 d2                	xor    edx,edx
c0014c39:	5b                   	pop    ebx
c0014c3a:	5e                   	pop    esi
c0014c3b:	83 f0 01             	xor    eax,0x1
c0014c3e:	5f                   	pop    edi
c0014c3f:	0f b6 c0             	movzx  eax,al
c0014c42:	5d                   	pop    ebp
c0014c43:	c3                   	ret    

c0014c44 <SysSymlink(regs*)>:
c0014c44:	56                   	push   esi
c0014c45:	83 c8 ff             	or     eax,0xffffffff
c0014c48:	53                   	push   ebx
c0014c49:	89 c2                	mov    edx,eax
c0014c4b:	81 ec 34 02 00 00    	sub    esp,0x234
c0014c51:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0014c58:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014c5c:	74 50                	je     c0014cae <SysSymlink(regs*)+0x6a>
c0014c5e:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0014c61:	85 c9                	test   ecx,ecx
c0014c63:	74 49                	je     c0014cae <SysSymlink(regs*)+0x6a>
c0014c65:	6a 01                	push   0x1
c0014c67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c6c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014c6f:	05 0c 01 00 00       	add    eax,0x10c
c0014c74:	50                   	push   eax
c0014c75:	51                   	push   ecx
c0014c76:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014c7a:	56                   	push   esi
c0014c7b:	e8 80 31 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014c80:	6a 01                	push   0x1
c0014c82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c87:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014c8a:	05 0c 01 00 00       	add    eax,0x10c
c0014c8f:	50                   	push   eax
c0014c90:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014c93:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0014c9a:	53                   	push   ebx
c0014c9b:	e8 60 31 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014ca0:	83 c4 18             	add    esp,0x18
c0014ca3:	56                   	push   esi
c0014ca4:	53                   	push   ebx
c0014ca5:	e8 84 2d ff ff       	call   c0007a2e <KeCreateSymlink(char const*, char const*)>
c0014caa:	83 c4 10             	add    esp,0x10
c0014cad:	99                   	cdq    
c0014cae:	81 c4 34 02 00 00    	add    esp,0x234
c0014cb4:	5b                   	pop    ebx
c0014cb5:	5e                   	pop    esi
c0014cb6:	c3                   	ret    

c0014cb7 <SysTimezone(regs*)>:
c0014cb7:	83 ec 0c             	sub    esp,0xc
c0014cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cbe:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014cc2:	75 17                	jne    c0014cdb <SysTimezone(regs*)+0x24>
c0014cc4:	83 ec 0c             	sub    esp,0xc
c0014cc7:	68 1a 46 02 c0       	push   0xc002461a
c0014ccc:	e8 7d 22 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014cd1:	83 c8 ff             	or     eax,0xffffffff
c0014cd4:	83 c4 10             	add    esp,0x10
c0014cd7:	89 c2                	mov    edx,eax
c0014cd9:	eb 16                	jmp    c0014cf1 <SysTimezone(regs*)+0x3a>
c0014cdb:	83 ec 0c             	sub    esp,0xc
c0014cde:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014ce1:	e8 c5 42 ff ff       	call   c0008fab <KeSetTimezone(int)>
c0014ce6:	31 d2                	xor    edx,edx
c0014ce8:	83 c4 10             	add    esp,0x10
c0014ceb:	83 f0 01             	xor    eax,0x1
c0014cee:	0f b6 c0             	movzx  eax,al
c0014cf1:	83 c4 0c             	add    esp,0xc
c0014cf4:	c3                   	ret    

c0014cf5 <SysTruncate(regs*)>:
c0014cf5:	55                   	push   ebp
c0014cf6:	57                   	push   edi
c0014cf7:	31 ff                	xor    edi,edi
c0014cf9:	56                   	push   esi
c0014cfa:	53                   	push   ebx
c0014cfb:	83 ec 0c             	sub    esp,0xc
c0014cfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d02:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014d05:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014d09:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014d0c:	89 ce                	mov    esi,ecx
c0014d0e:	0f 84 9a 00 00 00    	je     c0014dae <SysTruncate(regs*)+0xb9>
c0014d14:	83 ec 0c             	sub    esp,0xc
c0014d17:	68 14 01 00 00       	push   0x114
c0014d1c:	e8 4f ad ff ff       	call   c000fa70 <malloc>
c0014d21:	83 c4 0c             	add    esp,0xc
c0014d24:	89 c3                	mov    ebx,eax
c0014d26:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d2b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014d2e:	55                   	push   ebp
c0014d2f:	53                   	push   ebx
c0014d30:	e8 f7 33 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0014d35:	83 c4 10             	add    esp,0x10
c0014d38:	31 d2                	xor    edx,edx
c0014d3a:	85 db                	test   ebx,ebx
c0014d3c:	b8 03 00 00 00       	mov    eax,0x3
c0014d41:	0f 84 a2 00 00 00    	je     c0014de9 <SysTruncate(regs*)+0xf4>
c0014d47:	51                   	push   ecx
c0014d48:	51                   	push   ecx
c0014d49:	6a 02                	push   0x2
c0014d4b:	53                   	push   ebx
c0014d4c:	e8 f9 33 ff ff       	call   c000814a <File::open(FileOpenMode)>
c0014d51:	83 c4 10             	add    esp,0x10
c0014d54:	85 c0                	test   eax,eax
c0014d56:	74 13                	je     c0014d6b <SysTruncate(regs*)+0x76>
c0014d58:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d5a:	83 ec 0c             	sub    esp,0xc
c0014d5d:	53                   	push   ebx
c0014d5e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014d61:	83 c4 10             	add    esp,0x10
c0014d64:	b8 04 00 00 00       	mov    eax,0x4
c0014d69:	eb 7c                	jmp    c0014de7 <SysTruncate(regs*)+0xf2>
c0014d6b:	52                   	push   edx
c0014d6c:	57                   	push   edi
c0014d6d:	56                   	push   esi
c0014d6e:	53                   	push   ebx
c0014d6f:	e8 ea 34 ff ff       	call   c000825e <File::truncate(unsigned long long)>
c0014d74:	83 c4 10             	add    esp,0x10
c0014d77:	85 c0                	test   eax,eax
c0014d79:	74 1b                	je     c0014d96 <SysTruncate(regs*)+0xa1>
c0014d7b:	83 ec 0c             	sub    esp,0xc
c0014d7e:	53                   	push   ebx
c0014d7f:	e8 24 34 ff ff       	call   c00081a8 <File::close()>
c0014d84:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d89:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014d8c:	83 c4 10             	add    esp,0x10
c0014d8f:	b8 05 00 00 00       	mov    eax,0x5
c0014d94:	eb 51                	jmp    c0014de7 <SysTruncate(regs*)+0xf2>
c0014d96:	83 ec 0c             	sub    esp,0xc
c0014d99:	53                   	push   ebx
c0014d9a:	e8 09 34 ff ff       	call   c00081a8 <File::close()>
c0014d9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014da1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014da4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014da7:	83 c4 10             	add    esp,0x10
c0014daa:	31 c0                	xor    eax,eax
c0014dac:	eb 39                	jmp    c0014de7 <SysTruncate(regs*)+0xf2>
c0014dae:	31 d2                	xor    edx,edx
c0014db0:	83 fd 02             	cmp    ebp,0x2
c0014db3:	b8 01 00 00 00       	mov    eax,0x1
c0014db8:	7e 2f                	jle    c0014de9 <SysTruncate(regs*)+0xf4>
c0014dba:	83 ec 0c             	sub    esp,0xc
c0014dbd:	51                   	push   ecx
c0014dbe:	e8 46 e2 ff ff       	call   c0013009 <KeGetFileFromDescriptor(int)>
c0014dc3:	83 c4 10             	add    esp,0x10
c0014dc6:	31 d2                	xor    edx,edx
c0014dc8:	89 c1                	mov    ecx,eax
c0014dca:	b8 02 00 00 00       	mov    eax,0x2
c0014dcf:	85 c9                	test   ecx,ecx
c0014dd1:	74 16                	je     c0014de9 <SysTruncate(regs*)+0xf4>
c0014dd3:	50                   	push   eax
c0014dd4:	57                   	push   edi
c0014dd5:	56                   	push   esi
c0014dd6:	51                   	push   ecx
c0014dd7:	e8 82 34 ff ff       	call   c000825e <File::truncate(unsigned long long)>
c0014ddc:	83 c4 10             	add    esp,0x10
c0014ddf:	85 c0                	test   eax,eax
c0014de1:	0f 95 c0             	setne  al
c0014de4:	0f b6 c0             	movzx  eax,al
c0014de7:	31 d2                	xor    edx,edx
c0014de9:	83 c4 0c             	add    esp,0xc
c0014dec:	5b                   	pop    ebx
c0014ded:	5e                   	pop    esi
c0014dee:	5f                   	pop    edi
c0014def:	5d                   	pop    ebp
c0014df0:	c3                   	ret    

c0014df1 <SysWrite(regs*)>:
c0014df1:	57                   	push   edi
c0014df2:	56                   	push   esi
c0014df3:	53                   	push   ebx
c0014df4:	83 ec 10             	sub    esp,0x10
c0014df7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014dfb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014dfe:	83 f8 02             	cmp    eax,0x2
c0014e01:	77 10                	ja     c0014e13 <SysWrite(regs*)+0x22>
c0014e03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e08:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e0b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014e11:	eb 0e                	jmp    c0014e21 <SysWrite(regs*)+0x30>
c0014e13:	83 ec 0c             	sub    esp,0xc
c0014e16:	50                   	push   eax
c0014e17:	e8 ed e1 ff ff       	call   c0013009 <KeGetFileFromDescriptor(int)>
c0014e1c:	83 c4 10             	add    esp,0x10
c0014e1f:	89 c1                	mov    ecx,eax
c0014e21:	83 c8 ff             	or     eax,0xffffffff
c0014e24:	85 c9                	test   ecx,ecx
c0014e26:	89 c2                	mov    edx,eax
c0014e28:	74 28                	je     c0014e52 <SysWrite(regs*)+0x61>
c0014e2a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014e32:	83 ec 0c             	sub    esp,0xc
c0014e35:	31 ff                	xor    edi,edi
c0014e37:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014e3b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014e3d:	52                   	push   edx
c0014e3e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014e41:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014e44:	57                   	push   edi
c0014e45:	56                   	push   esi
c0014e46:	51                   	push   ecx
c0014e47:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014e4a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014e4e:	83 c4 20             	add    esp,0x20
c0014e51:	99                   	cdq    
c0014e52:	83 c4 10             	add    esp,0x10
c0014e55:	5b                   	pop    ebx
c0014e56:	5e                   	pop    esi
c0014e57:	5f                   	pop    edi
c0014e58:	c3                   	ret    

c0014e59 <SysWsbe(regs*)>:
c0014e59:	55                   	push   ebp
c0014e5a:	57                   	push   edi
c0014e5b:	56                   	push   esi
c0014e5c:	53                   	push   ebx
c0014e5d:	83 ec 3c             	sub    esp,0x3c
c0014e60:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0014e64:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0014e6b:	75 2d                	jne    c0014e9a <SysWsbe(regs*)+0x41>
c0014e6d:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0014e74:	75 24                	jne    c0014e9a <SysWsbe(regs*)+0x41>
c0014e76:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c0014e7d:	75 1b                	jne    c0014e9a <SysWsbe(regs*)+0x41>
c0014e7f:	6a 01                	push   0x1
c0014e81:	6a 00                	push   0x0
c0014e83:	68 bd 9e 00 c0       	push   0xc0009ebd
c0014e88:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0014e8e:	e8 ed 18 00 00       	call   c0016780 <Process::createThread(void (*)(void*), void*, int)>
c0014e93:	83 c4 10             	add    esp,0x10
c0014e96:	31 c0                	xor    eax,eax
c0014e98:	eb 52                	jmp    c0014eec <SysWsbe(regs*)+0x93>
c0014e9a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014e9e:	be 2f 46 02 c0       	mov    esi,0xc002462f
c0014ea3:	b9 0b 00 00 00       	mov    ecx,0xb
c0014ea8:	fc                   	cld    
c0014ea9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014eab:	83 ec 0c             	sub    esp,0xc
c0014eae:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014eb2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014eb7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014eba:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014ec0:	8b 06                	mov    eax,DWORD PTR [esi]
c0014ec2:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0014ec5:	57                   	push   edi
c0014ec6:	e8 b5 b6 fe ff       	call   c0000580 <strlen>
c0014ecb:	5a                   	pop    edx
c0014ecc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014ed0:	52                   	push   edx
c0014ed1:	31 d2                	xor    edx,edx
c0014ed3:	57                   	push   edi
c0014ed4:	52                   	push   edx
c0014ed5:	50                   	push   eax
c0014ed6:	56                   	push   esi
c0014ed7:	ff d5                	call   ebp
c0014ed9:	83 c4 14             	add    esp,0x14
c0014edc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014edf:	e8 94 22 00 00       	call   c0017178 <terminateTask(int)>
c0014ee4:	83 c4 10             	add    esp,0x10
c0014ee7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014eec:	83 c4 3c             	add    esp,0x3c
c0014eef:	31 d2                	xor    edx,edx
c0014ef1:	5b                   	pop    ebx
c0014ef2:	5e                   	pop    esi
c0014ef3:	5f                   	pop    edi
c0014ef4:	5d                   	pop    ebp
c0014ef5:	c3                   	ret    

c0014ef6 <SysYield(regs*)>:
c0014ef6:	83 ec 0c             	sub    esp,0xc
c0014ef9:	fa                   	cli    
c0014efa:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0014f00:	e8 d3 1a 00 00       	call   c00169d8 <schedule()>
c0014f05:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0014f0c:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0014f13:	75 01                	jne    c0014f16 <SysYield(regs*)+0x20>
c0014f15:	fb                   	sti    
c0014f16:	31 c0                	xor    eax,eax
c0014f18:	31 d2                	xor    edx,edx
c0014f1a:	83 c4 0c             	add    esp,0xc
c0014f1d:	c3                   	ret    

c0014f1e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0014f1e:	55                   	push   ebp
c0014f1f:	57                   	push   edi
c0014f20:	56                   	push   esi
c0014f21:	53                   	push   ebx
c0014f22:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014f28:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0014f33:	74 3b                	je     c0014f70 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014f35:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014f3d:	74 31                	je     c0014f70 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014f3f:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014f47:	75 27                	jne    c0014f70 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014f49:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0014f50:	05 00 10 00 00       	add    eax,0x1000
c0014f55:	89 c2                	mov    edx,eax
c0014f57:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014f5c:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014f63:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0014f69:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0014f70:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014f77:	83 ec 0c             	sub    esp,0xc
c0014f7a:	6a 01                	push   0x1
c0014f7c:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014f82:	e8 ee e1 ff ff       	call   c0013175 <Virt::allocateKernelVirtualPages(int)>
c0014f87:	83 c4 10             	add    esp,0x10
c0014f8a:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014f90:	89 c3                	mov    ebx,eax
c0014f92:	0f 86 27 01 00 00    	jbe    c00150bf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a1>
c0014f98:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014fa0:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014fa7:	c1 ee 0c             	shr    esi,0xc
c0014faa:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0014fae:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014fb5:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0014fbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014fc0:	29 ef                	sub    edi,ebp
c0014fc2:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0014fc6:	0f 83 fa 00 00 00    	jae    c00150c6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c0014fcc:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0014fd2:	b8 00 10 00 00       	mov    eax,0x1000
c0014fd7:	0f 47 f8             	cmova  edi,eax
c0014fda:	83 ec 0c             	sub    esp,0xc
c0014fdd:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014fe4:	31 d2                	xor    edx,edx
c0014fe6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014fe8:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014fec:	50                   	push   eax
c0014fed:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014ff1:	56                   	push   esi
c0014ff2:	52                   	push   edx
c0014ff3:	57                   	push   edi
c0014ff4:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014ffb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ffe:	83 c4 20             	add    esp,0x20
c0015001:	85 c0                	test   eax,eax
c0015003:	75 06                	jne    c001500b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0015005:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015009:	74 13                	je     c001501e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c001500b:	83 ec 0c             	sub    esp,0xc
c001500e:	53                   	push   ebx
c001500f:	e8 5f e4 ff ff       	call   c0013473 <Virt::freeKernelVirtualPages(unsigned long)>
c0015014:	83 c4 10             	add    esp,0x10
c0015017:	31 c0                	xor    eax,eax
c0015019:	e9 80 01 00 00       	jmp    c001519e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x280>
c001501e:	fa                   	cli    
c001501f:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0015025:	e8 86 af ff ff       	call   c000ffb0 <Phys::allocatePage()>
c001502a:	6a 07                	push   0x7
c001502c:	53                   	push   ebx
c001502d:	50                   	push   eax
c001502e:	89 c7                	mov    edi,eax
c0015030:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015035:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015038:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001503e:	e8 0b e8 ff ff       	call   c001384e <VAS::mapPage(unsigned long, unsigned long, int)>
c0015043:	83 c4 0c             	add    esp,0xc
c0015046:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001504d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015053:	6a 00                	push   0x0
c0015055:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001505a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001505d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015063:	e8 52 e6 ff ff       	call   c00136ba <VAS::mapOtherVASIn(bool, VAS*)>
c0015068:	58                   	pop    eax
c0015069:	5a                   	pop    edx
c001506a:	68 07 0c 00 00       	push   0xc07
c001506f:	55                   	push   ebp
c0015070:	57                   	push   edi
c0015071:	89 df                	mov    edi,ebx
c0015073:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001507a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015080:	6a 00                	push   0x0
c0015082:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015087:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001508a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015090:	e8 0d ea ff ff       	call   c0013aa2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0015095:	b9 00 10 00 00       	mov    ecx,0x1000
c001509a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001509c:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00150a3:	83 c4 20             	add    esp,0x20
c00150a6:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00150ad:	75 01                	jne    c00150b0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c00150af:	fb                   	sti    
c00150b0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00150b4:	81 c5 00 10 00 00    	add    ebp,0x1000
c00150ba:	e9 ef fe ff ff       	jmp    c0014fae <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c00150bf:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00150c6:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00150cd:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00150d3:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00150d9:	0f 86 b1 00 00 00    	jbe    c0015190 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c00150df:	fa                   	cli    
c00150e0:	51                   	push   ecx
c00150e1:	31 ff                	xor    edi,edi
c00150e3:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00150ea:	c1 ee 0c             	shr    esi,0xc
c00150ed:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c00150f3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00150f9:	6a 00                	push   0x0
c00150fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015100:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015103:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015109:	e8 ac e5 ff ff       	call   c00136ba <VAS::mapOtherVASIn(bool, VAS*)>
c001510e:	83 c4 10             	add    esp,0x10
c0015111:	e8 9a ae ff ff       	call   c000ffb0 <Phys::allocatePage()>
c0015116:	47                   	inc    edi
c0015117:	6a 07                	push   0x7
c0015119:	53                   	push   ebx
c001511a:	50                   	push   eax
c001511b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001511f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015125:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015128:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c001512e:	e8 1b e7 ff ff       	call   c001384e <VAS::mapPage(unsigned long, unsigned long, int)>
c0015133:	58                   	pop    eax
c0015134:	5a                   	pop    edx
c0015135:	68 07 0c 00 00       	push   0xc07
c001513a:	55                   	push   ebp
c001513b:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015141:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015145:	50                   	push   eax
c0015146:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001514d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015153:	6a 00                	push   0x0
c0015155:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001515a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001515d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015163:	e8 3a e9 ff ff       	call   c0013aa2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0015168:	83 c4 1c             	add    esp,0x1c
c001516b:	68 00 10 00 00       	push   0x1000
c0015170:	6a 00                	push   0x0
c0015172:	53                   	push   ebx
c0015173:	e8 78 b3 fe ff       	call   c00004f0 <memset>
c0015178:	83 c4 10             	add    esp,0x10
c001517b:	39 fe                	cmp    esi,edi
c001517d:	77 92                	ja     c0015111 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f3>
c001517f:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0015186:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001518d:	75 01                	jne    c0015190 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c001518f:	fb                   	sti    
c0015190:	83 ec 0c             	sub    esp,0xc
c0015193:	53                   	push   ebx
c0015194:	e8 da e2 ff ff       	call   c0013473 <Virt::freeKernelVirtualPages(unsigned long)>
c0015199:	83 c4 10             	add    esp,0x10
c001519c:	b0 01                	mov    al,0x1
c001519e:	81 c4 2c 10 00 00    	add    esp,0x102c
c00151a4:	5b                   	pop    ebx
c00151a5:	5e                   	pop    esi
c00151a6:	5f                   	pop    edi
c00151a7:	5d                   	pop    ebp
c00151a8:	c3                   	ret    

c00151a9 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00151a9:	55                   	push   ebp
c00151aa:	57                   	push   edi
c00151ab:	56                   	push   esi
c00151ac:	53                   	push   ebx
c00151ad:	83 ec 48             	sub    esp,0x48
c00151b0:	68 14 01 00 00       	push   0x114
c00151b5:	e8 b6 a8 ff ff       	call   c000fa70 <malloc>
c00151ba:	83 c4 0c             	add    esp,0xc
c00151bd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00151c1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00151c5:	89 c7                	mov    edi,eax
c00151c7:	50                   	push   eax
c00151c8:	e8 5f 2f ff ff       	call   c000812c <File::File(char const*, Process*)>
c00151cd:	58                   	pop    eax
c00151ce:	5a                   	pop    edx
c00151cf:	6a 01                	push   0x1
c00151d1:	57                   	push   edi
c00151d2:	e8 73 2f ff ff       	call   c000814a <File::open(FileOpenMode)>
c00151d7:	83 c4 10             	add    esp,0x10
c00151da:	85 c0                	test   eax,eax
c00151dc:	0f 85 4c 01 00 00    	jne    c001532e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00151e2:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00151ea:	83 ec 0c             	sub    esp,0xc
c00151ed:	6a 34                	push   0x34
c00151ef:	e8 7c a8 ff ff       	call   c000fa70 <malloc>
c00151f4:	89 c3                	mov    ebx,eax
c00151f6:	58                   	pop    eax
c00151f7:	8b 07                	mov    eax,DWORD PTR [edi]
c00151f9:	8d 74 24 38          	lea    esi,[esp+0x38]
c00151fd:	56                   	push   esi
c00151fe:	53                   	push   ebx
c00151ff:	6a 00                	push   0x0
c0015201:	6a 34                	push   0x34
c0015203:	57                   	push   edi
c0015204:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015207:	83 c4 20             	add    esp,0x20
c001520a:	85 c0                	test   eax,eax
c001520c:	0f 85 1c 01 00 00    	jne    c001532e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0015212:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0015218:	0f 85 10 01 00 00    	jne    c001532e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001521e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015221:	85 c0                	test   eax,eax
c0015223:	0f 84 05 01 00 00    	je     c001532e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0015229:	31 d2                	xor    edx,edx
c001522b:	55                   	push   ebp
c001522c:	52                   	push   edx
c001522d:	50                   	push   eax
c001522e:	57                   	push   edi
c001522f:	e8 d4 2f ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015234:	83 c4 10             	add    esp,0x10
c0015237:	85 c0                	test   eax,eax
c0015239:	0f 85 ef 00 00 00    	jne    c001532e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001523f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015242:	83 ec 0c             	sub    esp,0xc
c0015245:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0015249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001524d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0015251:	0f af c2             	imul   eax,edx
c0015254:	50                   	push   eax
c0015255:	e8 16 a8 ff ff       	call   c000fa70 <malloc>
c001525a:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001525c:	89 34 24             	mov    DWORD PTR [esp],esi
c001525f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015263:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015267:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001526b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001526f:	0f af c2             	imul   eax,edx
c0015272:	99                   	cdq    
c0015273:	52                   	push   edx
c0015274:	50                   	push   eax
c0015275:	57                   	push   edi
c0015276:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015279:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001527c:	83 c4 20             	add    esp,0x20
c001527f:	85 c0                	test   eax,eax
c0015281:	0f 84 a7 00 00 00    	je     c001532e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0015287:	31 d2                	xor    edx,edx
c0015289:	51                   	push   ecx
c001528a:	52                   	push   edx
c001528b:	50                   	push   eax
c001528c:	57                   	push   edi
c001528d:	e8 76 2f ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015292:	83 c4 10             	add    esp,0x10
c0015295:	85 c0                	test   eax,eax
c0015297:	0f 85 91 00 00 00    	jne    c001532e <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001529d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00152a1:	83 ec 0c             	sub    esp,0xc
c00152a4:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00152a8:	0f af c2             	imul   eax,edx
c00152ab:	50                   	push   eax
c00152ac:	e8 bf a7 ff ff       	call   c000fa70 <malloc>
c00152b1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00152b3:	89 34 24             	mov    DWORD PTR [esp],esi
c00152b6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00152ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152be:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00152c2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00152c6:	0f af c2             	imul   eax,edx
c00152c9:	99                   	cdq    
c00152ca:	52                   	push   edx
c00152cb:	50                   	push   eax
c00152cc:	57                   	push   edi
c00152cd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00152d0:	83 c4 20             	add    esp,0x20
c00152d3:	31 c9                	xor    ecx,ecx
c00152d5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00152dd:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c00152e1:	0f b7 e9             	movzx  ebp,cx
c00152e4:	0f 83 86 00 00 00    	jae    c0015370 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c00152ea:	c1 e5 05             	shl    ebp,0x5
c00152ed:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c00152f1:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c00152f5:	75 73                	jne    c001536a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c00152f7:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00152fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152fe:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0015301:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015305:	52                   	push   edx
c0015306:	31 d2                	xor    edx,edx
c0015308:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001530b:	52                   	push   edx
c001530c:	50                   	push   eax
c001530d:	57                   	push   edi
c001530e:	e8 f5 2e ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015313:	83 c4 10             	add    esp,0x10
c0015316:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001531a:	85 c0                	test   eax,eax
c001531c:	74 17                	je     c0015335 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c001531e:	83 ec 0c             	sub    esp,0xc
c0015321:	68 5b 46 02 c0       	push   0xc002465b
c0015326:	e8 23 1c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001532b:	83 c4 10             	add    esp,0x10
c001532e:	31 c0                	xor    eax,eax
c0015330:	e9 8b 00 00 00       	jmp    c00153c0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0015335:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0015339:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001533c:	83 ec 0c             	sub    esp,0xc
c001533f:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0015342:	50                   	push   eax
c0015343:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015347:	56                   	push   esi
c0015348:	57                   	push   edi
c0015349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001534d:	e8 cc fb ff ff       	call   c0014f1e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0015352:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0015356:	83 c4 20             	add    esp,0x20
c0015359:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001535d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015361:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0015366:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001536a:	41                   	inc    ecx
c001536b:	e9 6d ff ff ff       	jmp    c00152dd <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0015370:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0015374:	83 ec 0c             	sub    esp,0xc
c0015377:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001537b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001537f:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0015385:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c001538b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015390:	05 00 10 00 00       	add    eax,0x1000
c0015395:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001539c:	e8 df a6 ff ff       	call   c000fa80 <free>
c00153a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00153a4:	e8 d7 a6 ff ff       	call   c000fa80 <free>
c00153a9:	58                   	pop    eax
c00153aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00153ae:	e8 cd a6 ff ff       	call   c000fa80 <free>
c00153b3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00153b6:	e8 ed 2d ff ff       	call   c00081a8 <File::close()>
c00153bb:	83 c4 10             	add    esp,0x10
c00153be:	b0 01                	mov    al,0x1
c00153c0:	83 c4 3c             	add    esp,0x3c
c00153c3:	5b                   	pop    ebx
c00153c4:	5e                   	pop    esi
c00153c5:	5f                   	pop    edi
c00153c6:	5d                   	pop    ebp
c00153c7:	c3                   	ret    

c00153c8 <Thr::runtimeReferenceHelper()>:
c00153c8:	83 ec 18             	sub    esp,0x18
c00153cb:	68 63 46 02 c0       	push   0xc0024663
c00153d0:	e8 79 1b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00153d5:	fa                   	cli    
c00153d6:	83 c4 10             	add    esp,0x10
c00153d9:	eb fe                	jmp    c00153d9 <Thr::runtimeReferenceHelper()+0x11>

c00153db <Thr::getAddressOfKernelSymbol(char const*)>:
c00153db:	57                   	push   edi
c00153dc:	56                   	push   esi
c00153dd:	53                   	push   ebx
c00153de:	31 db                	xor    ebx,ebx
c00153e0:	39 1d 00 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea00,ebx
c00153e6:	7e 3c                	jle    c0015424 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00153e8:	8b 34 9d 80 e9 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd1680]
c00153ef:	31 ff                	xor    edi,edi
c00153f1:	39 3c 9d 80 e8 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd1780],edi
c00153f8:	7e 27                	jle    c0015421 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00153fa:	50                   	push   eax
c00153fb:	50                   	push   eax
c00153fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015400:	8b 06                	mov    eax,DWORD PTR [esi]
c0015402:	03 04 9d 00 e9 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd1700]
c0015409:	50                   	push   eax
c001540a:	e8 71 b3 fe ff       	call   c0000780 <strcmp>
c001540f:	83 c4 10             	add    esp,0x10
c0015412:	85 c0                	test   eax,eax
c0015414:	75 05                	jne    c001541b <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0015416:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0015419:	eb 0b                	jmp    c0015426 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001541b:	83 c6 10             	add    esi,0x10
c001541e:	47                   	inc    edi
c001541f:	eb d0                	jmp    c00153f1 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0015421:	43                   	inc    ebx
c0015422:	eb bc                	jmp    c00153e0 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0015424:	31 c0                	xor    eax,eax
c0015426:	5b                   	pop    ebx
c0015427:	5e                   	pop    esi
c0015428:	5f                   	pop    edi
c0015429:	c3                   	ret    

c001542a <Thr::loadKernelSymbolTable(char const*)>:
c001542a:	55                   	push   ebp
c001542b:	57                   	push   edi
c001542c:	56                   	push   esi
c001542d:	53                   	push   ebx
c001542e:	83 ec 68             	sub    esp,0x68
c0015431:	68 14 01 00 00       	push   0x114
c0015436:	8b 35 58 ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea58
c001543c:	e8 2f a6 ff ff       	call   c000fa70 <malloc>
c0015441:	83 c4 0c             	add    esp,0xc
c0015444:	56                   	push   esi
c0015445:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015449:	89 c3                	mov    ebx,eax
c001544b:	50                   	push   eax
c001544c:	e8 db 2c ff ff       	call   c000812c <File::File(char const*, Process*)>
c0015451:	5e                   	pop    esi
c0015452:	5f                   	pop    edi
c0015453:	6a 01                	push   0x1
c0015455:	53                   	push   ebx
c0015456:	e8 ef 2c ff ff       	call   c000814a <File::open(FileOpenMode)>
c001545b:	83 c4 10             	add    esp,0x10
c001545e:	85 c0                	test   eax,eax
c0015460:	74 0a                	je     c001546c <Thr::loadKernelSymbolTable(char const*)+0x42>
c0015462:	83 ec 0c             	sub    esp,0xc
c0015465:	68 85 46 02 c0       	push   0xc0024685
c001546a:	eb 34                	jmp    c00154a0 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001546c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015474:	83 ec 0c             	sub    esp,0xc
c0015477:	6a 34                	push   0x34
c0015479:	e8 f2 a5 ff ff       	call   c000fa70 <malloc>
c001547e:	59                   	pop    ecx
c001547f:	8d 74 24 34          	lea    esi,[esp+0x34]
c0015483:	89 c7                	mov    edi,eax
c0015485:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015487:	56                   	push   esi
c0015488:	57                   	push   edi
c0015489:	6a 00                	push   0x0
c001548b:	6a 34                	push   0x34
c001548d:	53                   	push   ebx
c001548e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015491:	83 c4 20             	add    esp,0x20
c0015494:	85 c0                	test   eax,eax
c0015496:	74 17                	je     c00154af <Thr::loadKernelSymbolTable(char const*)+0x85>
c0015498:	83 ec 0c             	sub    esp,0xc
c001549b:	68 9c 46 02 c0       	push   0xc002469c
c00154a0:	e8 11 a9 ff ff       	call   c000fdb6 <KePanic(char const*)>
c00154a5:	83 c4 10             	add    esp,0x10
c00154a8:	31 c0                	xor    eax,eax
c00154aa:	e9 31 02 00 00       	jmp    c00156e0 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00154af:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00154b5:	75 e1                	jne    c0015498 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00154b7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00154ba:	85 c0                	test   eax,eax
c00154bc:	74 da                	je     c0015498 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00154be:	52                   	push   edx
c00154bf:	31 d2                	xor    edx,edx
c00154c1:	52                   	push   edx
c00154c2:	50                   	push   eax
c00154c3:	53                   	push   ebx
c00154c4:	e8 3f 2d ff ff       	call   c0008208 <File::seek(unsigned long long)>
c00154c9:	83 c4 10             	add    esp,0x10
c00154cc:	85 c0                	test   eax,eax
c00154ce:	75 c8                	jne    c0015498 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00154d0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00154d4:	83 ec 0c             	sub    esp,0xc
c00154d7:	31 ed                	xor    ebp,ebp
c00154d9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00154dd:	0f af c2             	imul   eax,edx
c00154e0:	50                   	push   eax
c00154e1:	e8 8a a5 ff ff       	call   c000fa70 <malloc>
c00154e6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00154e8:	89 34 24             	mov    DWORD PTR [esp],esi
c00154eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00154ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00154f3:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00154f7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00154fb:	0f af c2             	imul   eax,edx
c00154fe:	99                   	cdq    
c00154ff:	52                   	push   edx
c0015500:	50                   	push   eax
c0015501:	53                   	push   ebx
c0015502:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015505:	83 c4 20             	add    esp,0x20
c0015508:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015510:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015518:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015520:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015528:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c001552c:	0f b7 f5             	movzx  esi,bp
c001552f:	0f 83 a7 00 00 00    	jae    c00155dc <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0015535:	6b f6 28             	imul   esi,esi,0x28
c0015538:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001553c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001553f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015543:	50                   	push   eax
c0015544:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0015548:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001554c:	8b 16                	mov    edx,DWORD PTR [esi]
c001554e:	6b c0 28             	imul   eax,eax,0x28
c0015551:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0015555:	89 d0                	mov    eax,edx
c0015557:	31 d2                	xor    edx,edx
c0015559:	52                   	push   edx
c001555a:	50                   	push   eax
c001555b:	53                   	push   ebx
c001555c:	e8 a7 2c ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015561:	83 c4 0c             	add    esp,0xc
c0015564:	6a 20                	push   0x20
c0015566:	6a 00                	push   0x0
c0015568:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001556c:	52                   	push   edx
c001556d:	e8 7e af fe ff       	call   c00004f0 <memset>
c0015572:	58                   	pop    eax
c0015573:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015575:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0015579:	51                   	push   ecx
c001557a:	8d 54 24 40          	lea    edx,[esp+0x40]
c001557e:	52                   	push   edx
c001557f:	6a 00                	push   0x0
c0015581:	6a 1f                	push   0x1f
c0015583:	53                   	push   ebx
c0015584:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015587:	83 c4 18             	add    esp,0x18
c001558a:	68 b3 46 02 c0       	push   0xc00246b3
c001558f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015593:	52                   	push   edx
c0015594:	e8 e7 b1 fe ff       	call   c0000780 <strcmp>
c0015599:	83 c4 10             	add    esp,0x10
c001559c:	85 c0                	test   eax,eax
c001559e:	75 0f                	jne    c00155af <Thr::loadKernelSymbolTable(char const*)+0x185>
c00155a0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00155a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00155a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00155ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00155af:	50                   	push   eax
c00155b0:	50                   	push   eax
c00155b1:	68 bb 46 02 c0       	push   0xc00246bb
c00155b6:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00155ba:	50                   	push   eax
c00155bb:	e8 c0 b1 fe ff       	call   c0000780 <strcmp>
c00155c0:	83 c4 10             	add    esp,0x10
c00155c3:	85 c0                	test   eax,eax
c00155c5:	75 0f                	jne    c00155d6 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00155c7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00155ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00155ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00155d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00155d6:	45                   	inc    ebp
c00155d7:	e9 4c ff ff ff       	jmp    c0015528 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00155dc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00155e1:	75 10                	jne    c00155f3 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00155e3:	83 ec 0c             	sub    esp,0xc
c00155e6:	68 c3 46 02 c0       	push   0xc00246c3
c00155eb:	e8 c6 a7 ff ff       	call   c000fdb6 <KePanic(char const*)>
c00155f0:	83 c4 10             	add    esp,0x10
c00155f3:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00155f8:	75 10                	jne    c001560a <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00155fa:	83 ec 0c             	sub    esp,0xc
c00155fd:	68 c3 46 02 c0       	push   0xc00246c3
c0015602:	e8 af a7 ff ff       	call   c000fdb6 <KePanic(char const*)>
c0015607:	83 c4 10             	add    esp,0x10
c001560a:	50                   	push   eax
c001560b:	31 d2                	xor    edx,edx
c001560d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015611:	52                   	push   edx
c0015612:	50                   	push   eax
c0015613:	53                   	push   ebx
c0015614:	e8 ef 2b ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015619:	5a                   	pop    edx
c001561a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001561e:	e8 4d a4 ff ff       	call   c000fa70 <malloc>
c0015623:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015627:	31 c9                	xor    ecx,ecx
c0015629:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001562d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001562f:	5e                   	pop    esi
c0015630:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0015634:	55                   	push   ebp
c0015635:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015639:	51                   	push   ecx
c001563a:	52                   	push   edx
c001563b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001563f:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0015643:	53                   	push   ebx
c0015644:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015647:	83 c4 14             	add    esp,0x14
c001564a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001564e:	e8 1d a4 ff ff       	call   c000fa70 <malloc>
c0015653:	89 c6                	mov    esi,eax
c0015655:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015657:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001565a:	56                   	push   esi
c001565b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001565f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015663:	51                   	push   ecx
c0015664:	52                   	push   edx
c0015665:	53                   	push   ebx
c0015666:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015669:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001566d:	83 c4 1c             	add    esp,0x1c
c0015670:	8b 15 00 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea00
c0015676:	c1 e8 04             	shr    eax,0x4
c0015679:	89 04 95 80 e8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1780],eax
c0015680:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015684:	31 d2                	xor    edx,edx
c0015686:	52                   	push   edx
c0015687:	50                   	push   eax
c0015688:	53                   	push   ebx
c0015689:	e8 7a 2b ff ff       	call   c0008208 <File::seek(unsigned long long)>
c001568e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015690:	31 d2                	xor    edx,edx
c0015692:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015695:	56                   	push   esi
c0015696:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001569a:	52                   	push   edx
c001569b:	50                   	push   eax
c001569c:	53                   	push   ebx
c001569d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00156a0:	83 c4 14             	add    esp,0x14
c00156a3:	53                   	push   ebx
c00156a4:	e8 ff 2a ff ff       	call   c00081a8 <File::close()>
c00156a9:	5d                   	pop    ebp
c00156aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00156ae:	e8 cd a3 ff ff       	call   c000fa80 <free>
c00156b3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00156b6:	e8 c5 a3 ff ff       	call   c000fa80 <free>
c00156bb:	a1 00 ea 02 c0       	mov    eax,ds:0xc002ea00
c00156c0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00156c4:	83 c4 10             	add    esp,0x10
c00156c7:	89 34 85 00 e9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1700],esi
c00156ce:	8d 50 01             	lea    edx,[eax+0x1]
c00156d1:	89 0c 85 80 e9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1680],ecx
c00156d8:	b0 01                	mov    al,0x1
c00156da:	89 15 00 ea 02 c0    	mov    DWORD PTR ds:0xc002ea00,edx
c00156e0:	83 c4 5c             	add    esp,0x5c
c00156e3:	5b                   	pop    ebx
c00156e4:	5e                   	pop    esi
c00156e5:	5f                   	pop    edi
c00156e6:	5d                   	pop    ebp
c00156e7:	c3                   	ret    

c00156e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00156e8:	55                   	push   ebp
c00156e9:	57                   	push   edi
c00156ea:	56                   	push   esi
c00156eb:	53                   	push   ebx
c00156ec:	81 ec 68 03 00 00    	sub    esp,0x368
c00156f2:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00156f9:	8b 35 58 ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea58
c00156ff:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015703:	68 14 01 00 00       	push   0x114
c0015708:	e8 63 a3 ff ff       	call   c000fa70 <malloc>
c001570d:	83 c4 0c             	add    esp,0xc
c0015710:	56                   	push   esi
c0015711:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0015718:	50                   	push   eax
c0015719:	89 c3                	mov    ebx,eax
c001571b:	e8 0c 2a ff ff       	call   c000812c <File::File(char const*, Process*)>
c0015720:	5f                   	pop    edi
c0015721:	5d                   	pop    ebp
c0015722:	6a 01                	push   0x1
c0015724:	53                   	push   ebx
c0015725:	e8 20 2a ff ff       	call   c000814a <File::open(FileOpenMode)>
c001572a:	83 c4 10             	add    esp,0x10
c001572d:	85 c0                	test   eax,eax
c001572f:	0f 85 b3 06 00 00    	jne    c0015de8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015735:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001573d:	83 ec 0c             	sub    esp,0xc
c0015740:	6a 34                	push   0x34
c0015742:	e8 29 a3 ff ff       	call   c000fa70 <malloc>
c0015747:	5e                   	pop    esi
c0015748:	8d 74 24 54          	lea    esi,[esp+0x54]
c001574c:	89 c5                	mov    ebp,eax
c001574e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015750:	56                   	push   esi
c0015751:	55                   	push   ebp
c0015752:	6a 00                	push   0x0
c0015754:	6a 34                	push   0x34
c0015756:	53                   	push   ebx
c0015757:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001575a:	83 c4 20             	add    esp,0x20
c001575d:	85 c0                	test   eax,eax
c001575f:	0f 85 83 06 00 00    	jne    c0015de8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015765:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c001576c:	0f 85 76 06 00 00    	jne    c0015de8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015772:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015775:	85 c0                	test   eax,eax
c0015777:	0f 84 6b 06 00 00    	je     c0015de8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001577d:	31 d2                	xor    edx,edx
c001577f:	51                   	push   ecx
c0015780:	52                   	push   edx
c0015781:	50                   	push   eax
c0015782:	53                   	push   ebx
c0015783:	e8 80 2a ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015788:	83 c4 10             	add    esp,0x10
c001578b:	85 c0                	test   eax,eax
c001578d:	0f 85 55 06 00 00    	jne    c0015de8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015793:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0015796:	83 ec 0c             	sub    esp,0xc
c0015799:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001579d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00157a1:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00157a5:	0f af c2             	imul   eax,edx
c00157a8:	50                   	push   eax
c00157a9:	e8 c2 a2 ff ff       	call   c000fa70 <malloc>
c00157ae:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00157b0:	89 34 24             	mov    DWORD PTR [esp],esi
c00157b3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00157b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00157bb:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00157bf:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00157c3:	0f af c2             	imul   eax,edx
c00157c6:	99                   	cdq    
c00157c7:	52                   	push   edx
c00157c8:	50                   	push   eax
c00157c9:	53                   	push   ebx
c00157ca:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00157cd:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c00157d0:	83 c4 20             	add    esp,0x20
c00157d3:	85 c0                	test   eax,eax
c00157d5:	0f 84 0d 06 00 00    	je     c0015de8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00157db:	52                   	push   edx
c00157dc:	31 d2                	xor    edx,edx
c00157de:	52                   	push   edx
c00157df:	50                   	push   eax
c00157e0:	53                   	push   ebx
c00157e1:	e8 22 2a ff ff       	call   c0008208 <File::seek(unsigned long long)>
c00157e6:	83 c4 10             	add    esp,0x10
c00157e9:	85 c0                	test   eax,eax
c00157eb:	0f 85 f7 05 00 00    	jne    c0015de8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00157f1:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c00157f5:	83 ec 0c             	sub    esp,0xc
c00157f8:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c00157fc:	0f af c2             	imul   eax,edx
c00157ff:	50                   	push   eax
c0015800:	e8 6b a2 ff ff       	call   c000fa70 <malloc>
c0015805:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015807:	89 34 24             	mov    DWORD PTR [esp],esi
c001580a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001580e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015812:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0015816:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001581a:	0f af c2             	imul   eax,edx
c001581d:	99                   	cdq    
c001581e:	52                   	push   edx
c001581f:	50                   	push   eax
c0015820:	53                   	push   ebx
c0015821:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015824:	83 c4 20             	add    esp,0x20
c0015827:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001582d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015830:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0015834:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0015838:	73 78                	jae    c00158b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c001583a:	c1 e7 05             	shl    edi,0x5
c001583d:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0015841:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0015844:	75 63                	jne    c00158a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0015846:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0015849:	31 d2                	xor    edx,edx
c001584b:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c001584e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015852:	50                   	push   eax
c0015853:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0015856:	52                   	push   edx
c0015857:	50                   	push   eax
c0015858:	53                   	push   ebx
c0015859:	e8 aa 29 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c001585e:	83 c4 10             	add    esp,0x10
c0015861:	85 c0                	test   eax,eax
c0015863:	0f 85 7f 05 00 00    	jne    c0015de8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015869:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015870:	83 ec 0c             	sub    esp,0xc
c0015873:	31 d2                	xor    edx,edx
c0015875:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0015879:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001587b:	01 c6                	add    esi,eax
c001587d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015884:	50                   	push   eax
c0015885:	56                   	push   esi
c0015886:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001588a:	52                   	push   edx
c001588b:	50                   	push   eax
c001588c:	53                   	push   ebx
c001588d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015890:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015893:	83 c4 1c             	add    esp,0x1c
c0015896:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0015899:	50                   	push   eax
c001589a:	6a 00                	push   0x0
c001589c:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00158a0:	56                   	push   esi
c00158a1:	e8 4a ac fe ff       	call   c00004f0 <memset>
c00158a6:	83 c4 10             	add    esp,0x10
c00158a9:	66 ff 04 24          	inc    WORD PTR [esp]
c00158ad:	e9 7b ff ff ff       	jmp    c001582d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c00158b2:	50                   	push   eax
c00158b3:	68 00 01 00 00       	push   0x100
c00158b8:	6a 00                	push   0x0
c00158ba:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00158be:	50                   	push   eax
c00158bf:	e8 2c ac fe ff       	call   c00004f0 <memset>
c00158c4:	83 c4 0c             	add    esp,0xc
c00158c7:	68 00 01 00 00       	push   0x100
c00158cc:	6a 00                	push   0x0
c00158ce:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00158d5:	50                   	push   eax
c00158d6:	e8 15 ac fe ff       	call   c00004f0 <memset>
c00158db:	83 c4 10             	add    esp,0x10
c00158de:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c00158e5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00158ec:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00158f4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00158fc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015904:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001590c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015910:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0015914:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0015919:	0f 83 16 01 00 00    	jae    c0015a35 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c001591f:	6b ff 28             	imul   edi,edi,0x28
c0015922:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0015926:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0015929:	51                   	push   ecx
c001592a:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c001592e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015932:	8b 07                	mov    eax,DWORD PTR [edi]
c0015934:	6b d2 28             	imul   edx,edx,0x28
c0015937:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001593b:	31 d2                	xor    edx,edx
c001593d:	52                   	push   edx
c001593e:	50                   	push   eax
c001593f:	53                   	push   ebx
c0015940:	e8 c3 28 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015945:	83 c4 0c             	add    esp,0xc
c0015948:	6a 20                	push   0x20
c001594a:	6a 00                	push   0x0
c001594c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015953:	51                   	push   ecx
c0015954:	e8 97 ab fe ff       	call   c00004f0 <memset>
c0015959:	58                   	pop    eax
c001595a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001595c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0015960:	52                   	push   edx
c0015961:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015968:	51                   	push   ecx
c0015969:	6a 00                	push   0x0
c001596b:	6a 1f                	push   0x1f
c001596d:	53                   	push   ebx
c001596e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015971:	83 c4 1c             	add    esp,0x1c
c0015974:	6a 09                	push   0x9
c0015976:	68 dd 46 02 c0       	push   0xc00246dd
c001597b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015982:	51                   	push   ecx
c0015983:	e8 f8 a9 fe ff       	call   c0000380 <memcmp>
c0015988:	83 c4 10             	add    esp,0x10
c001598b:	85 c0                	test   eax,eax
c001598d:	75 1a                	jne    c00159a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c001598f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015992:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0015995:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0015999:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001599c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00159a3:	89 d0                	mov    eax,edx
c00159a5:	40                   	inc    eax
c00159a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00159a9:	52                   	push   edx
c00159aa:	6a 09                	push   0x9
c00159ac:	68 e7 46 02 c0       	push   0xc00246e7
c00159b1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00159b8:	50                   	push   eax
c00159b9:	e8 c2 a9 fe ff       	call   c0000380 <memcmp>
c00159be:	83 c4 10             	add    esp,0x10
c00159c1:	85 c0                	test   eax,eax
c00159c3:	75 1a                	jne    c00159df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c00159c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00159c8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00159cb:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00159cf:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00159d2:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c00159d9:	89 c8                	mov    eax,ecx
c00159db:	40                   	inc    eax
c00159dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00159df:	50                   	push   eax
c00159e0:	50                   	push   eax
c00159e1:	68 b3 46 02 c0       	push   0xc00246b3
c00159e6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00159ed:	50                   	push   eax
c00159ee:	e8 8d ad fe ff       	call   c0000780 <strcmp>
c00159f3:	83 c4 10             	add    esp,0x10
c00159f6:	85 c0                	test   eax,eax
c00159f8:	75 0b                	jne    c0015a05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c00159fa:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00159fe:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015a01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a05:	50                   	push   eax
c0015a06:	50                   	push   eax
c0015a07:	68 bb 46 02 c0       	push   0xc00246bb
c0015a0c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015a13:	50                   	push   eax
c0015a14:	e8 67 ad fe ff       	call   c0000780 <strcmp>
c0015a19:	83 c4 10             	add    esp,0x10
c0015a1c:	85 c0                	test   eax,eax
c0015a1e:	75 0b                	jne    c0015a2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0015a20:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0015a24:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015a27:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015a2b:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0015a30:	e9 d7 fe ff ff       	jmp    c001590c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0015a35:	50                   	push   eax
c0015a36:	31 d2                	xor    edx,edx
c0015a38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015a3c:	52                   	push   edx
c0015a3d:	50                   	push   eax
c0015a3e:	53                   	push   ebx
c0015a3f:	e8 c4 27 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015a44:	58                   	pop    eax
c0015a45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a49:	e8 22 a0 ff ff       	call   c000fa70 <malloc>
c0015a4e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015a50:	31 d2                	xor    edx,edx
c0015a52:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015a56:	58                   	pop    eax
c0015a57:	8d 74 24 54          	lea    esi,[esp+0x54]
c0015a5b:	56                   	push   esi
c0015a5c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a64:	52                   	push   edx
c0015a65:	50                   	push   eax
c0015a66:	53                   	push   ebx
c0015a67:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015a6a:	83 c4 14             	add    esp,0x14
c0015a6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a71:	e8 fa 9f ff ff       	call   c000fa70 <malloc>
c0015a76:	31 d2                	xor    edx,edx
c0015a78:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015a7c:	83 c4 0c             	add    esp,0xc
c0015a7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a83:	52                   	push   edx
c0015a84:	50                   	push   eax
c0015a85:	53                   	push   ebx
c0015a86:	e8 7d 27 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015a8b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015a8d:	31 d2                	xor    edx,edx
c0015a8f:	89 34 24             	mov    DWORD PTR [esp],esi
c0015a92:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015a96:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015a9a:	52                   	push   edx
c0015a9b:	50                   	push   eax
c0015a9c:	53                   	push   ebx
c0015a9d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015aa0:	83 c4 20             	add    esp,0x20
c0015aa3:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0015aa8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015ab4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015ab8:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0015abb:	0f 84 2b 03 00 00    	je     c0015dec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0015ac1:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0015ac8:	31 d2                	xor    edx,edx
c0015aca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015ace:	c1 e8 03             	shr    eax,0x3
c0015ad1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0015ad5:	51                   	push   ecx
c0015ad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ada:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0015ade:	52                   	push   edx
c0015adf:	50                   	push   eax
c0015ae0:	53                   	push   ebx
c0015ae1:	e8 22 27 ff ff       	call   c0008208 <File::seek(unsigned long long)>
c0015ae6:	5e                   	pop    esi
c0015ae7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015aeb:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0015af2:	e8 79 9f ff ff       	call   c000fa70 <malloc>
c0015af7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015af9:	31 d2                	xor    edx,edx
c0015afb:	89 c7                	mov    edi,eax
c0015afd:	58                   	pop    eax
c0015afe:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015b02:	50                   	push   eax
c0015b03:	57                   	push   edi
c0015b04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b08:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0015b0f:	52                   	push   edx
c0015b10:	50                   	push   eax
c0015b11:	53                   	push   ebx
c0015b12:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015b15:	83 c4 20             	add    esp,0x20
c0015b18:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015b20:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015b24:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0015b28:	0f 8d a5 02 00 00    	jge    c0015dd3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0015b2e:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0015b33:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b37:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0015b3a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015b3e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b42:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0015b46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015b4a:	c1 e8 08             	shr    eax,0x8
c0015b4d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015b51:	89 c2                	mov    edx,eax
c0015b53:	c1 e2 04             	shl    edx,0x4
c0015b56:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0015b5a:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0015b5d:	85 f6                	test   esi,esi
c0015b5f:	0f 85 cf 00 00 00    	jne    c0015c34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0015b65:	83 ec 0c             	sub    esp,0xc
c0015b68:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0015b6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b70:	03 02                	add    eax,DWORD PTR [edx]
c0015b72:	50                   	push   eax
c0015b73:	e8 63 f8 ff ff       	call   c00153db <Thr::getAddressOfKernelSymbol(char const*)>
c0015b78:	83 c4 10             	add    esp,0x10
c0015b7b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015b7f:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0015b84:	85 c0                	test   eax,eax
c0015b86:	89 c6                	mov    esi,eax
c0015b88:	0f 85 a6 00 00 00    	jne    c0015c34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0015b8e:	83 ec 0c             	sub    esp,0xc
c0015b91:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0015b95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b99:	03 02                	add    eax,DWORD PTR [edx]
c0015b9b:	50                   	push   eax
c0015b9c:	e8 9f ac ff ff       	call   c0010840 <KeResolveCompatibilitySymbol(char*)>
c0015ba1:	83 c4 10             	add    esp,0x10
c0015ba4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015ba8:	85 c0                	test   eax,eax
c0015baa:	89 c6                	mov    esi,eax
c0015bac:	0f 85 82 00 00 00    	jne    c0015c34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0015bb2:	50                   	push   eax
c0015bb3:	50                   	push   eax
c0015bb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015bb8:	03 02                	add    eax,DWORD PTR [edx]
c0015bba:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015bbe:	50                   	push   eax
c0015bbf:	68 f1 46 02 c0       	push   0xc00246f1
c0015bc4:	e8 85 13 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015bc9:	58                   	pop    eax
c0015bca:	5a                   	pop    edx
c0015bcb:	68 0b 47 02 c0       	push   0xc002470b
c0015bd0:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015bd7:	51                   	push   ecx
c0015bd8:	e8 73 aa fe ff       	call   c0000650 <strcpy>
c0015bdd:	59                   	pop    ecx
c0015bde:	58                   	pop    eax
c0015bdf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015be3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015be7:	03 02                	add    eax,DWORD PTR [edx]
c0015be9:	50                   	push   eax
c0015bea:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015bf1:	51                   	push   ecx
c0015bf2:	e8 79 ac fe ff       	call   c0000870 <strcat>
c0015bf7:	58                   	pop    eax
c0015bf8:	5a                   	pop    edx
c0015bf9:	68 a5 47 02 c0       	push   0xc00247a5
c0015bfe:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015c05:	51                   	push   ecx
c0015c06:	e8 65 ac fe ff       	call   c0000870 <strcat>
c0015c0b:	83 c4 10             	add    esp,0x10
c0015c0e:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015c13:	0f 84 77 01 00 00    	je     c0015d90 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015c19:	83 ec 0c             	sub    esp,0xc
c0015c1c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015c23:	51                   	push   ecx
c0015c24:	e8 8d a1 ff ff       	call   c000fdb6 <KePanic(char const*)>
c0015c29:	83 c4 10             	add    esp,0x10
c0015c2c:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015c30:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015c34:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015c39:	83 f8 01             	cmp    eax,0x1
c0015c3c:	0f 85 9b 00 00 00    	jne    c0015cdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0015c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015c46:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0015c4d:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0015c51:	01 d0                	add    eax,edx
c0015c53:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0015c5b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015c5f:	0f 94 c0             	sete   al
c0015c62:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0015c6a:	0f 94 c1             	sete   cl
c0015c6d:	09 c1                	or     ecx,eax
c0015c6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015c73:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0015c78:	0f b6 c9             	movzx  ecx,cl
c0015c7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c7d:	74 41                	je     c0015cc0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0015c7f:	8d 14 06             	lea    edx,[esi+eax*1]
c0015c82:	85 c9                	test   ecx,ecx
c0015c84:	75 15                	jne    c0015c9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0015c86:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015c8a:	66 83 f8 0c          	cmp    ax,0xc
c0015c8e:	76 05                	jbe    c0015c95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0015c90:	b8 0c 00 00 00       	mov    eax,0xc
c0015c95:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0015c99:	76 37                	jbe    c0015cd2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015c9b:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015ca0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0015ca4:	0f 84 e6 00 00 00    	je     c0015d90 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015caa:	83 ec 0c             	sub    esp,0xc
c0015cad:	68 22 47 02 c0       	push   0xc0024722
c0015cb2:	e8 ff a0 ff ff       	call   c000fdb6 <KePanic(char const*)>
c0015cb7:	83 c4 10             	add    esp,0x10
c0015cba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015cbe:	eb 12                	jmp    c0015cd2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015cc0:	01 c2                	add    edx,eax
c0015cc2:	85 c9                	test   ecx,ecx
c0015cc4:	75 0c                	jne    c0015cd2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015cc6:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015cca:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0015cce:	77 02                	ja     c0015cd2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015cd0:	01 f2                	add    edx,esi
c0015cd2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015cd6:	89 10                	mov    DWORD PTR [eax],edx
c0015cd8:	e9 ed 00 00 00       	jmp    c0015dca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015cdd:	83 f8 02             	cmp    eax,0x2
c0015ce0:	0f 85 81 00 00 00    	jne    c0015d67 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0015ce6:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015ced:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0015cf1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0015cf5:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0015cfd:	74 21                	je     c0015d20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0015cff:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0015d07:	74 17                	je     c0015d20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0015d09:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0015d0d:	ba 0a 00 00 00       	mov    edx,0xa
c0015d12:	83 f9 0e             	cmp    ecx,0xe
c0015d15:	77 03                	ja     c0015d1a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0015d17:	8d 51 fc             	lea    edx,[ecx-0x4]
c0015d1a:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0015d1e:	76 1f                	jbe    c0015d3f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0015d20:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015d25:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015d29:	74 65                	je     c0015d90 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015d2b:	83 ec 0c             	sub    esp,0xc
c0015d2e:	68 3e 47 02 c0       	push   0xc002473e
c0015d33:	e8 7e a0 ff ff       	call   c000fdb6 <KePanic(char const*)>
c0015d38:	83 c4 10             	add    esp,0x10
c0015d3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d3f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0015d44:	8b 10                	mov    edx,DWORD PTR [eax]
c0015d46:	74 15                	je     c0015d5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0015d48:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015d4c:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0015d53:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0015d57:	01 d1                	add    ecx,edx
c0015d59:	01 ce                	add    esi,ecx
c0015d5b:	eb 06                	jmp    c0015d63 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0015d5d:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0015d61:	01 d6                	add    esi,edx
c0015d63:	89 30                	mov    DWORD PTR [eax],esi
c0015d65:	eb 63                	jmp    c0015dca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015d67:	56                   	push   esi
c0015d68:	56                   	push   esi
c0015d69:	50                   	push   eax
c0015d6a:	68 5a 47 02 c0       	push   0xc002475a
c0015d6f:	e8 da 11 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015d74:	83 c4 10             	add    esp,0x10
c0015d77:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015d7c:	74 12                	je     c0015d90 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015d7e:	83 ec 0c             	sub    esp,0xc
c0015d81:	68 65 47 02 c0       	push   0xc0024765
c0015d86:	e8 2b a0 ff ff       	call   c000fdb6 <KePanic(char const*)>
c0015d8b:	83 c4 10             	add    esp,0x10
c0015d8e:	eb 3a                	jmp    c0015dca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015d90:	83 ec 0c             	sub    esp,0xc
c0015d93:	53                   	push   ebx
c0015d94:	e8 0f 24 ff ff       	call   c00081a8 <File::close()>
c0015d99:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d9e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015da1:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015da4:	e8 d7 9c ff ff       	call   c000fa80 <free>
c0015da9:	59                   	pop    ecx
c0015daa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015dae:	e8 cd 9c ff ff       	call   c000fa80 <free>
c0015db3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015db6:	e8 c5 9c ff ff       	call   c000fa80 <free>
c0015dbb:	5b                   	pop    ebx
c0015dbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015dc0:	e8 bb 9c ff ff       	call   c000fa80 <free>
c0015dc5:	83 c4 10             	add    esp,0x10
c0015dc8:	eb 1e                	jmp    c0015de8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015dca:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0015dce:	e9 4d fd ff ff       	jmp    c0015b20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c0015dd3:	83 ec 0c             	sub    esp,0xc
c0015dd6:	57                   	push   edi
c0015dd7:	e8 a4 9c ff ff       	call   c000fa80 <free>
c0015ddc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0015de0:	83 c4 10             	add    esp,0x10
c0015de3:	e9 cc fc ff ff       	jmp    c0015ab4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0015de8:	31 c0                	xor    eax,eax
c0015dea:	eb 32                	jmp    c0015e1e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0015dec:	83 ec 0c             	sub    esp,0xc
c0015def:	53                   	push   ebx
c0015df0:	e8 b3 23 ff ff       	call   c00081a8 <File::close()>
c0015df5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015df7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015dfa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015dfd:	58                   	pop    eax
c0015dfe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015e02:	e8 79 9c ff ff       	call   c000fa80 <free>
c0015e07:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015e0a:	e8 71 9c ff ff       	call   c000fa80 <free>
c0015e0f:	5a                   	pop    edx
c0015e10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015e14:	e8 67 9c ff ff       	call   c000fa80 <free>
c0015e19:	83 c4 10             	add    esp,0x10
c0015e1c:	b0 01                	mov    al,0x1
c0015e1e:	81 c4 5c 03 00 00    	add    esp,0x35c
c0015e24:	5b                   	pop    ebx
c0015e25:	5e                   	pop    esi
c0015e26:	5f                   	pop    edi
c0015e27:	5d                   	pop    ebp
c0015e28:	c3                   	ret    

c0015e29 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0015e29:	56                   	push   esi
c0015e2a:	31 d2                	xor    edx,edx
c0015e2c:	53                   	push   ebx
c0015e2d:	8b 1d 60 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e260
c0015e33:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015e37:	39 d3                	cmp    ebx,edx
c0015e39:	7e 1b                	jle    c0015e56 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0015e3b:	8b 04 95 80 e4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1b80]
c0015e42:	39 c8                	cmp    eax,ecx
c0015e44:	77 0d                	ja     c0015e53 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0015e46:	8b 34 95 80 e2 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd1d80]
c0015e4d:	01 c6                	add    esi,eax
c0015e4f:	39 ce                	cmp    esi,ecx
c0015e51:	77 05                	ja     c0015e58 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0015e53:	42                   	inc    edx
c0015e54:	eb e1                	jmp    c0015e37 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0015e56:	31 c0                	xor    eax,eax
c0015e58:	5b                   	pop    ebx
c0015e59:	5e                   	pop    esi
c0015e5a:	c3                   	ret    

c0015e5b <Thr::getDriverNameFromAddress(unsigned long)>:
c0015e5b:	53                   	push   ebx
c0015e5c:	8b 1d 60 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e260
c0015e62:	31 c0                	xor    eax,eax
c0015e64:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015e68:	39 c3                	cmp    ebx,eax
c0015e6a:	7e 22                	jle    c0015e8e <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0015e6c:	8b 14 85 80 e4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1b80]
c0015e73:	39 ca                	cmp    edx,ecx
c0015e75:	77 14                	ja     c0015e8b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015e77:	03 14 85 80 e2 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd1d80]
c0015e7e:	39 ca                	cmp    edx,ecx
c0015e80:	76 09                	jbe    c0015e8b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015e82:	8b 04 85 80 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1980]
c0015e89:	eb 05                	jmp    c0015e90 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0015e8b:	40                   	inc    eax
c0015e8c:	eb da                	jmp    c0015e68 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015e8e:	31 c0                	xor    eax,eax
c0015e90:	5b                   	pop    ebx
c0015e91:	c3                   	ret    

c0015e92 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0015e92:	53                   	push   ebx
c0015e93:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015e97:	53                   	push   ebx
c0015e98:	e8 8c ff ff ff       	call   c0015e29 <Thr::getDriverBaseFromAddress(unsigned long)>
c0015e9d:	5a                   	pop    edx
c0015e9e:	31 d2                	xor    edx,edx
c0015ea0:	85 c0                	test   eax,eax
c0015ea2:	74 04                	je     c0015ea8 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0015ea4:	89 da                	mov    edx,ebx
c0015ea6:	29 c2                	sub    edx,eax
c0015ea8:	5b                   	pop    ebx
c0015ea9:	89 d0                	mov    eax,edx
c0015eab:	c3                   	ret    

c0015eac <Thr::loadDLL(char const*, bool)>:
c0015eac:	55                   	push   ebp
c0015ead:	57                   	push   edi
c0015eae:	56                   	push   esi
c0015eaf:	53                   	push   ebx
c0015eb0:	81 ec 34 01 00 00    	sub    esp,0x134
c0015eb6:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015ebd:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0015ec4:	56                   	push   esi
c0015ec5:	68 7d 47 02 c0       	push   0xc002477d
c0015eca:	e8 7f 10 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015ecf:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015ed6:	e8 95 9b ff ff       	call   c000fa70 <malloc>
c0015edb:	83 c4 0c             	add    esp,0xc
c0015ede:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0015ee4:	56                   	push   esi
c0015ee5:	50                   	push   eax
c0015ee6:	89 c3                	mov    ebx,eax
c0015ee8:	e8 3f 22 ff ff       	call   c000812c <File::File(char const*, Process*)>
c0015eed:	83 c4 10             	add    esp,0x10
c0015ef0:	85 db                	test   ebx,ebx
c0015ef2:	75 3c                	jne    c0015f30 <Thr::loadDLL(char const*, bool)+0x84>
c0015ef4:	89 e8                	mov    eax,ebp
c0015ef6:	84 c0                	test   al,al
c0015ef8:	0f 84 02 02 00 00    	je     c0016100 <Thr::loadDLL(char const*, bool)+0x254>
c0015efe:	50                   	push   eax
c0015eff:	50                   	push   eax
c0015f00:	68 8e 47 02 c0       	push   0xc002478e
c0015f05:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0015f09:	57                   	push   edi
c0015f0a:	e8 41 a7 fe ff       	call   c0000650 <strcpy>
c0015f0f:	58                   	pop    eax
c0015f10:	5a                   	pop    edx
c0015f11:	56                   	push   esi
c0015f12:	57                   	push   edi
c0015f13:	e8 58 a9 fe ff       	call   c0000870 <strcat>
c0015f18:	59                   	pop    ecx
c0015f19:	58                   	pop    eax
c0015f1a:	68 a5 47 02 c0       	push   0xc00247a5
c0015f1f:	57                   	push   edi
c0015f20:	e8 4b a9 fe ff       	call   c0000870 <strcat>
c0015f25:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015f28:	e8 89 9e ff ff       	call   c000fdb6 <KePanic(char const*)>
c0015f2d:	83 c4 10             	add    esp,0x10
c0015f30:	50                   	push   eax
c0015f31:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0015f35:	50                   	push   eax
c0015f36:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015f3a:	50                   	push   eax
c0015f3b:	53                   	push   ebx
c0015f3c:	e8 0b 25 ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c0015f41:	83 c4 10             	add    esp,0x10
c0015f44:	85 db                	test   ebx,ebx
c0015f46:	89 c7                	mov    edi,eax
c0015f48:	74 0c                	je     c0015f56 <Thr::loadDLL(char const*, bool)+0xaa>
c0015f4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f4c:	83 ec 0c             	sub    esp,0xc
c0015f4f:	53                   	push   ebx
c0015f50:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f53:	83 c4 10             	add    esp,0x10
c0015f56:	83 ec 0c             	sub    esp,0xc
c0015f59:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0015f5e:	50                   	push   eax
c0015f5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015f63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015f67:	57                   	push   edi
c0015f68:	68 a7 47 02 c0       	push   0xc00247a7
c0015f6d:	e8 dc 0f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015f72:	83 c4 20             	add    esp,0x20
c0015f75:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015f7a:	75 0a                	jne    c0015f86 <Thr::loadDLL(char const*, bool)+0xda>
c0015f7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f80:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0015f84:	75 3e                	jne    c0015fc4 <Thr::loadDLL(char const*, bool)+0x118>
c0015f86:	89 e8                	mov    eax,ebp
c0015f88:	31 db                	xor    ebx,ebx
c0015f8a:	84 c0                	test   al,al
c0015f8c:	0f 84 6e 01 00 00    	je     c0016100 <Thr::loadDLL(char const*, bool)+0x254>
c0015f92:	50                   	push   eax
c0015f93:	50                   	push   eax
c0015f94:	68 c8 47 02 c0       	push   0xc00247c8
c0015f99:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015f9d:	53                   	push   ebx
c0015f9e:	e8 ad a6 fe ff       	call   c0000650 <strcpy>
c0015fa3:	58                   	pop    eax
c0015fa4:	5a                   	pop    edx
c0015fa5:	56                   	push   esi
c0015fa6:	53                   	push   ebx
c0015fa7:	e8 c4 a8 fe ff       	call   c0000870 <strcat>
c0015fac:	59                   	pop    ecx
c0015fad:	5f                   	pop    edi
c0015fae:	68 a5 47 02 c0       	push   0xc00247a5
c0015fb3:	53                   	push   ebx
c0015fb4:	e8 b7 a8 fe ff       	call   c0000870 <strcat>
c0015fb9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015fbc:	e8 f5 9d ff ff       	call   c000fdb6 <KePanic(char const*)>
c0015fc1:	83 c4 10             	add    esp,0x10
c0015fc4:	53                   	push   ebx
c0015fc5:	6a 03                	push   0x3
c0015fc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fcb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015fcf:	05 ff 0f 00 00       	add    eax,0xfff
c0015fd4:	83 d2 00             	adc    edx,0x0
c0015fd7:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015fdb:	50                   	push   eax
c0015fdc:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c0015fe2:	e8 6f d9 ff ff       	call   c0013956 <VAS::allocatePages(int, int)>
c0015fe7:	89 c3                	mov    ebx,eax
c0015fe9:	58                   	pop    eax
c0015fea:	5a                   	pop    edx
c0015feb:	53                   	push   ebx
c0015fec:	68 32 3b 02 c0       	push   0xc0023b32
c0015ff1:	e8 58 0f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015ff6:	89 34 24             	mov    DWORD PTR [esp],esi
c0015ff9:	e8 82 a5 fe ff       	call   c0000580 <strlen>
c0015ffe:	8b 3d 60 e2 02 c0    	mov    edi,DWORD PTR ds:0xc002e260
c0016004:	40                   	inc    eax
c0016005:	89 04 24             	mov    DWORD PTR [esp],eax
c0016008:	e8 63 9a ff ff       	call   c000fa70 <malloc>
c001600d:	59                   	pop    ecx
c001600e:	89 04 bd 80 e6 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1980],eax
c0016015:	a1 60 e2 02 c0       	mov    eax,ds:0xc002e260
c001601a:	5f                   	pop    edi
c001601b:	56                   	push   esi
c001601c:	ff 34 85 80 e6 02 c0 	push   DWORD PTR [eax*4-0x3ffd1980]
c0016023:	e8 28 a6 fe ff       	call   c0000650 <strcpy>
c0016028:	a1 60 e2 02 c0       	mov    eax,ds:0xc002e260
c001602d:	89 1c 85 80 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b80],ebx
c0016034:	8d 50 01             	lea    edx,[eax+0x1]
c0016037:	89 15 60 e2 02 c0    	mov    DWORD PTR ds:0xc002e260,edx
c001603d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016041:	83 c4 0c             	add    esp,0xc
c0016044:	6a 01                	push   0x1
c0016046:	53                   	push   ebx
c0016047:	56                   	push   esi
c0016048:	89 14 85 80 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1d80],edx
c001604f:	e8 94 f6 ff ff       	call   c00156e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0016054:	83 c4 10             	add    esp,0x10
c0016057:	89 c7                	mov    edi,eax
c0016059:	89 f8                	mov    eax,edi
c001605b:	83 f0 01             	xor    eax,0x1
c001605e:	84 c0                	test   al,al
c0016060:	74 18                	je     c001607a <Thr::loadDLL(char const*, bool)+0x1ce>
c0016062:	89 e8                	mov    eax,ebp
c0016064:	84 c0                	test   al,al
c0016066:	74 12                	je     c001607a <Thr::loadDLL(char const*, bool)+0x1ce>
c0016068:	83 ec 0c             	sub    esp,0xc
c001606b:	68 e1 47 02 c0       	push   0xc00247e1
c0016070:	e8 41 9d ff ff       	call   c000fdb6 <KePanic(char const*)>
c0016075:	83 c4 10             	add    esp,0x10
c0016078:	eb 06                	jmp    c0016080 <Thr::loadDLL(char const*, bool)+0x1d4>
c001607a:	89 f8                	mov    eax,edi
c001607c:	84 c0                	test   al,al
c001607e:	75 10                	jne    c0016090 <Thr::loadDLL(char const*, bool)+0x1e4>
c0016080:	83 ec 0c             	sub    esp,0xc
c0016083:	68 00 48 02 c0       	push   0xc0024800
c0016088:	e8 29 9d ff ff       	call   c000fdb6 <KePanic(char const*)>
c001608d:	83 c4 10             	add    esp,0x10
c0016090:	31 f6                	xor    esi,esi
c0016092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016096:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001609a:	05 ff 0f 00 00       	add    eax,0xfff
c001609f:	83 d2 00             	adc    edx,0x0
c00160a2:	0f ac d0 0c          	shrd   eax,edx,0xc
c00160a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00160aa:	c1 ea 0c             	shr    edx,0xc
c00160ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00160b1:	ba 00 00 00 00       	mov    edx,0x0
c00160b6:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00160ba:	89 d0                	mov    eax,edx
c00160bc:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00160c0:	73 32                	jae    c00160f4 <Thr::loadDLL(char const*, bool)+0x248>
c00160c2:	50                   	push   eax
c00160c3:	50                   	push   eax
c00160c4:	89 f0                	mov    eax,esi
c00160c6:	c1 e0 0c             	shl    eax,0xc
c00160c9:	01 d8                	add    eax,ebx
c00160cb:	50                   	push   eax
c00160cc:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c00160d2:	e8 7d d3 ff ff       	call   c0013454 <VAS::getPageTableEntry(unsigned long)>
c00160d7:	83 c4 10             	add    esp,0x10
c00160da:	8b 00                	mov    eax,DWORD PTR [eax]
c00160dc:	a8 60                	test   al,0x60
c00160de:	75 11                	jne    c00160f1 <Thr::loadDLL(char const*, bool)+0x245>
c00160e0:	83 ec 0c             	sub    esp,0xc
c00160e3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00160e8:	50                   	push   eax
c00160e9:	e8 59 9e ff ff       	call   c000ff47 <Phys::freePage(unsigned long)>
c00160ee:	83 c4 10             	add    esp,0x10
c00160f1:	46                   	inc    esi
c00160f2:	eb 9e                	jmp    c0016092 <Thr::loadDLL(char const*, bool)+0x1e6>
c00160f4:	89 f8                	mov    eax,edi
c00160f6:	84 c0                	test   al,al
c00160f8:	b8 00 00 00 00       	mov    eax,0x0
c00160fd:	0f 44 d8             	cmove  ebx,eax
c0016100:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016106:	89 d8                	mov    eax,ebx
c0016108:	5b                   	pop    ebx
c0016109:	5e                   	pop    esi
c001610a:	5f                   	pop    edi
c001610b:	5d                   	pop    ebp
c001610c:	c3                   	ret    

c001610d <Thr::executeDLL(unsigned long, void*)>:
c001610d:	56                   	push   esi
c001610e:	53                   	push   ebx
c001610f:	52                   	push   edx
c0016110:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016114:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016118:	85 db                	test   ebx,ebx
c001611a:	75 10                	jne    c001612c <Thr::executeDLL(unsigned long, void*)+0x1f>
c001611c:	83 ec 0c             	sub    esp,0xc
c001611f:	68 1c 48 02 c0       	push   0xc002481c
c0016124:	e8 8d 9c ff ff       	call   c000fdb6 <KePanic(char const*)>
c0016129:	83 c4 10             	add    esp,0x10
c001612c:	50                   	push   eax
c001612d:	50                   	push   eax
c001612e:	53                   	push   ebx
c001612f:	68 46 48 02 c0       	push   0xc0024846
c0016134:	e8 15 0e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016139:	89 d8                	mov    eax,ebx
c001613b:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001613f:	83 c4 14             	add    esp,0x14
c0016142:	5b                   	pop    ebx
c0016143:	5e                   	pop    esi
c0016144:	ff e0                	jmp    eax

c0016146 <KeProcessExec(Process*, char const*)>:
c0016146:	56                   	push   esi
c0016147:	53                   	push   ebx
c0016148:	83 ec 04             	sub    esp,0x4
c001614b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001614f:	8b b3 12 05 00 00    	mov    esi,DWORD PTR [ebx+0x512]
c0016155:	85 f6                	test   esi,esi
c0016157:	74 16                	je     c001616f <KeProcessExec(Process*, char const*)+0x29>
c0016159:	83 ec 0c             	sub    esp,0xc
c001615c:	56                   	push   esi
c001615d:	e8 84 d5 ff ff       	call   c00136e6 <VAS::~VAS()>
c0016162:	58                   	pop    eax
c0016163:	5a                   	pop    edx
c0016164:	6a 14                	push   0x14
c0016166:	56                   	push   esi
c0016167:	e8 7b 70 ff ff       	call   c000d1e7 <operator delete(void*, unsigned long)>
c001616c:	83 c4 10             	add    esp,0x10
c001616f:	83 ec 0c             	sub    esp,0xc
c0016172:	6a 14                	push   0x14
c0016174:	e8 f7 98 ff ff       	call   c000fa70 <malloc>
c0016179:	89 c6                	mov    esi,eax
c001617b:	58                   	pop    eax
c001617c:	5a                   	pop    edx
c001617d:	6a 00                	push   0x0
c001617f:	56                   	push   esi
c0016180:	e8 0d da ff ff       	call   c0013b92 <VAS::VAS(bool)>
c0016185:	89 b3 12 05 00 00    	mov    DWORD PTR [ebx+0x512],esi
c001618b:	59                   	pop    ecx
c001618c:	5e                   	pop    esi
c001618d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016191:	50                   	push   eax
c0016192:	53                   	push   ebx
c0016193:	e8 11 f0 ff ff       	call   c00151a9 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016198:	83 c4 14             	add    esp,0x14
c001619b:	31 c0                	xor    eax,eax
c001619d:	5b                   	pop    ebx
c001619e:	5e                   	pop    esi
c001619f:	c3                   	ret    

c00161a0 <userModeEntryPoint(void*)>:
c00161a0:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00161a8:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00161ad:	85 c0                	test   eax,eax
c00161af:	75 03                	jne    c00161b4 <userModeEntryPoint(void*)+0x14>
c00161b1:	fb                   	sti    
c00161b2:	66 90                	xchg   ax,ax
c00161b4:	fb                   	sti    
c00161b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161ba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00161bd:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00161c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00161c7:	e9 73 a0 fe ff       	jmp    c000023f <goToUsermode>

c00161cc <changeTSS>:
c00161cc:	83 ec 14             	sub    esp,0x14
c00161cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161d4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00161d7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00161dc:	c1 e2 15             	shl    edx,0x15
c00161df:	29 d0                	sub    eax,edx
c00161e1:	50                   	push   eax
c00161e2:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c00161e7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00161ed:	05 68 11 00 00       	add    eax,0x1168
c00161f2:	50                   	push   eax
c00161f3:	e8 30 c8 ff ff       	call   c0012a28 <TSS::setESP(unsigned long)>
c00161f8:	83 c4 1c             	add    esp,0x1c
c00161fb:	c3                   	ret    

c00161fc <switchToThread(ThreadControlBlock*)>:
c00161fc:	57                   	push   edi
c00161fd:	8b 0d 2c ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea2c
c0016203:	56                   	push   esi
c0016204:	53                   	push   ebx
c0016205:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016209:	85 c9                	test   ecx,ecx
c001620b:	0f 85 8b 00 00 00    	jne    c001629c <switchToThread(ThreadControlBlock*)+0xa0>
c0016211:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0016215:	81 fa ff 00 00 00    	cmp    edx,0xff
c001621b:	74 7b                	je     c0016298 <switchToThread(ThreadControlBlock*)+0x9c>
c001621d:	b8 00 04 00 00       	mov    eax,0x400
c0016222:	29 d0                	sub    eax,edx
c0016224:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0016227:	d1 f8                	sar    eax,1
c0016229:	01 d0                	add    eax,edx
c001622b:	90                   	nop
c001622c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001622f:	e8 3f 38 00 00       	call   c0019a73 <HalQueryPerformanceCounter()>
c0016234:	a3 70 ea 02 c0       	mov    ds:0xc002ea70,eax
c0016239:	89 c6                	mov    esi,eax
c001623b:	89 d7                	mov    edi,edx
c001623d:	2b 35 60 ea 02 c0    	sub    esi,DWORD PTR ds:0xc002ea60
c0016243:	a3 60 ea 02 c0       	mov    ds:0xc002ea60,eax
c0016248:	1b 3d 64 ea 02 c0    	sbb    edi,DWORD PTR ds:0xc002ea64
c001624e:	89 35 68 ea 02 c0    	mov    DWORD PTR ds:0xc002ea68,esi
c0016254:	89 15 74 ea 02 c0    	mov    DWORD PTR ds:0xc002ea74,edx
c001625a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016260:	89 15 64 ea 02 c0    	mov    DWORD PTR ds:0xc002ea64,edx
c0016266:	89 3d 6c ea 02 c0    	mov    DWORD PTR ds:0xc002ea6c,edi
c001626c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001626f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0016272:	01 c6                	add    esi,eax
c0016274:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0016277:	11 d7                	adc    edi,edx
c0016279:	83 ec 0c             	sub    esp,0xc
c001627c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001627f:	53                   	push   ebx
c0016280:	e8 f2 9f fe ff       	call   c0000277 <switchToThreadASM>
c0016285:	0f 20 c0             	mov    eax,cr0
c0016288:	83 c8 08             	or     eax,0x8
c001628b:	0f 22 c0             	mov    cr0,eax
c001628e:	83 c4 10             	add    esp,0x10
c0016291:	5b                   	pop    ebx
c0016292:	5e                   	pop    esi
c0016293:	5f                   	pop    edi
c0016294:	c3                   	ret    
c0016295:	8d 76 00             	lea    esi,[esi+0x0]
c0016298:	31 c0                	xor    eax,eax
c001629a:	eb 90                	jmp    c001622c <switchToThread(ThreadControlBlock*)+0x30>
c001629c:	5b                   	pop    ebx
c001629d:	c7 05 28 ea 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x1
c00162a7:	5e                   	pop    esi
c00162a8:	5f                   	pop    edi
c00162a9:	c3                   	ret    
c00162aa:	66 90                	xchg   ax,ax

c00162ac <Process::addArgs(char**)>:
c00162ac:	57                   	push   edi
c00162ad:	56                   	push   esi
c00162ae:	53                   	push   ebx
c00162af:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00162b3:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00162b7:	85 f6                	test   esi,esi
c00162b9:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c00162c3:	74 4f                	je     c0016314 <Process::addArgs(char**)+0x68>
c00162c5:	8b 06                	mov    eax,DWORD PTR [esi]
c00162c7:	85 c0                	test   eax,eax
c00162c9:	74 49                	je     c0016314 <Process::addArgs(char**)+0x68>
c00162cb:	31 db                	xor    ebx,ebx
c00162cd:	8d 76 00             	lea    esi,[esi+0x0]
c00162d0:	83 ec 0c             	sub    esp,0xc
c00162d3:	50                   	push   eax
c00162d4:	e8 a7 a2 fe ff       	call   c0000580 <strlen>
c00162d9:	83 c0 01             	add    eax,0x1
c00162dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00162df:	e8 8c 97 ff ff       	call   c000fa70 <malloc>
c00162e4:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c00162eb:	5a                   	pop    edx
c00162ec:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c00162ef:	83 c3 01             	add    ebx,0x1
c00162f2:	59                   	pop    ecx
c00162f3:	52                   	push   edx
c00162f4:	50                   	push   eax
c00162f5:	e8 56 a3 fe ff       	call   c0000650 <strcpy>
c00162fa:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0016300:	83 c4 10             	add    esp,0x10
c0016303:	83 c1 01             	add    ecx,0x1
c0016306:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c001630c:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c001630f:	85 c0                	test   eax,eax
c0016311:	75 bd                	jne    c00162d0 <Process::addArgs(char**)+0x24>
c0016313:	90                   	nop
c0016314:	5b                   	pop    ebx
c0016315:	5e                   	pop    esi
c0016316:	5f                   	pop    edi
c0016317:	c3                   	ret    

c0016318 <Process::Process(char const*, Process*, char**)>:
c0016318:	56                   	push   esi
c0016319:	53                   	push   ebx
c001631a:	83 ec 14             	sub    esp,0x14
c001631d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016321:	05 0c 02 00 00       	add    eax,0x20c
c0016326:	bb 07 00 00 00       	mov    ebx,0x7
c001632b:	89 c6                	mov    esi,eax
c001632d:	8d 76 00             	lea    esi,[esi+0x0]
c0016330:	85 db                	test   ebx,ebx
c0016332:	78 14                	js     c0016348 <Process::Process(char const*, Process*, char**)+0x30>
c0016334:	83 ec 0c             	sub    esp,0xc
c0016337:	56                   	push   esi
c0016338:	e8 d3 b8 00 00       	call   c0021c10 <ThreadControlBlock::ThreadControlBlock()>
c001633d:	83 c4 10             	add    esp,0x10
c0016340:	83 c6 5f             	add    esi,0x5f
c0016343:	83 eb 01             	sub    ebx,0x1
c0016346:	eb e8                	jmp    c0016330 <Process::Process(char const*, Process*, char**)+0x18>
c0016348:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001634c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0016353:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016357:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001635e:	83 ec 0c             	sub    esp,0xc
c0016361:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016365:	e8 7a 83 ff ff       	call   c000e6e4 <KeNewProcessEnv(Process*)>
c001636a:	83 c4 10             	add    esp,0x10
c001636d:	89 c2                	mov    edx,eax
c001636f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016373:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0016379:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001637d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0016386:	a1 5c 61 02 c0       	mov    eax,ds:0xc002615c
c001638b:	8d 50 01             	lea    edx,[eax+0x1]
c001638e:	89 15 5c 61 02 c0    	mov    DWORD PTR ds:0xc002615c,edx
c0016394:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016398:	89 02                	mov    DWORD PTR [edx],eax
c001639a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00163a2:	83 ec 0c             	sub    esp,0xc
c00163a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00163a9:	e8 c2 96 ff ff       	call   c000fa70 <malloc>
c00163ae:	83 c4 10             	add    esp,0x10
c00163b1:	89 c3                	mov    ebx,eax
c00163b3:	83 ec 08             	sub    esp,0x8
c00163b6:	6a 00                	push   0x0
c00163b8:	53                   	push   ebx
c00163b9:	e8 d4 d7 ff ff       	call   c0013b92 <VAS::VAS(bool)>
c00163be:	83 c4 10             	add    esp,0x10
c00163c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163c5:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00163cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163cf:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00163d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00163e1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00163e7:	e8 83 aa ff ff       	call   c0010e6f <KeInitSignals()>
c00163ec:	89 c2                	mov    edx,eax
c00163ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163f2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00163f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163fc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016402:	85 c0                	test   eax,eax
c0016404:	74 42                	je     c0016448 <Process::Process(char const*, Process*, char**)+0x130>
c0016406:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001640a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016410:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016416:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001641a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0016420:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016424:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001642a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016430:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016434:	05 0c 01 00 00       	add    eax,0x10c
c0016439:	83 ec 08             	sub    esp,0x8
c001643c:	52                   	push   edx
c001643d:	50                   	push   eax
c001643e:	e8 0d a2 fe ff       	call   c0000650 <strcpy>
c0016443:	83 c4 10             	add    esp,0x10
c0016446:	eb 7c                	jmp    c00164c4 <Process::Process(char const*, Process*, char**)+0x1ac>
c0016448:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0016450:	83 ec 0c             	sub    esp,0xc
c0016453:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016457:	e8 14 96 ff ff       	call   c000fa70 <malloc>
c001645c:	83 c4 10             	add    esp,0x10
c001645f:	89 c3                	mov    ebx,eax
c0016461:	83 ec 08             	sub    esp,0x8
c0016464:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016468:	53                   	push   ebx
c0016469:	e8 da c2 ff ff       	call   c0012748 <VgaText::VgaText(char const*)>
c001646e:	83 c4 10             	add    esp,0x10
c0016471:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016475:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001647b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001647f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016485:	83 ec 0c             	sub    esp,0xc
c0016488:	50                   	push   eax
c0016489:	e8 20 bb ff ff       	call   c0011fae <addToTerminalCycle(VgaText*)>
c001648e:	83 c4 10             	add    esp,0x10
c0016491:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016495:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001649b:	83 ec 0c             	sub    esp,0xc
c001649e:	50                   	push   eax
c001649f:	e8 7b bd ff ff       	call   c001221f <setActiveTerminal(VgaText*)>
c00164a4:	83 c4 10             	add    esp,0x10
c00164a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164ab:	05 0c 01 00 00       	add    eax,0x10c
c00164b0:	83 ec 08             	sub    esp,0x8
c00164b3:	68 65 48 02 c0       	push   0xc0024865
c00164b8:	50                   	push   eax
c00164b9:	e8 92 a1 fe ff       	call   c0000650 <strcpy>
c00164be:	83 c4 10             	add    esp,0x10
c00164c1:	8d 76 00             	lea    esi,[esi+0x0]
c00164c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164c8:	83 c0 0c             	add    eax,0xc
c00164cb:	83 ec 08             	sub    esp,0x8
c00164ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00164d2:	50                   	push   eax
c00164d3:	e8 78 a1 fe ff       	call   c0000650 <strcpy>
c00164d8:	83 c4 10             	add    esp,0x10
c00164db:	83 ec 08             	sub    esp,0x8
c00164de:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00164e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00164e6:	e8 c1 fd ff ff       	call   c00162ac <Process::addArgs(char**)>
c00164eb:	83 c4 10             	add    esp,0x10
c00164ee:	83 ec 08             	sub    esp,0x8
c00164f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00164f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00164f9:	e8 ab ec ff ff       	call   c00151a9 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00164fe:	83 c4 10             	add    esp,0x10
c0016501:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016505:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016509:	83 f0 01             	xor    eax,0x1
c001650c:	88 c2                	mov    dl,al
c001650e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016512:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0016518:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001651c:	8b 10                	mov    edx,DWORD PTR [eax]
c001651e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016523:	52                   	push   edx
c0016524:	50                   	push   eax
c0016525:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016529:	68 bc 48 02 c0       	push   0xc00248bc
c001652e:	e8 1b 0a ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016533:	83 c4 10             	add    esp,0x10
c0016536:	90                   	nop
c0016537:	83 c4 14             	add    esp,0x14
c001653a:	5b                   	pop    ebx
c001653b:	5e                   	pop    esi
c001653c:	c3                   	ret    
c001653d:	90                   	nop
c001653e:	66 90                	xchg   ax,ax

c0016540 <Process::Process(bool, char const*, Process*, char**)>:
c0016540:	56                   	push   esi
c0016541:	53                   	push   ebx
c0016542:	83 ec 24             	sub    esp,0x24
c0016545:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016549:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001654d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016551:	05 0c 02 00 00       	add    eax,0x20c
c0016556:	bb 07 00 00 00       	mov    ebx,0x7
c001655b:	89 c6                	mov    esi,eax
c001655d:	8d 76 00             	lea    esi,[esi+0x0]
c0016560:	85 db                	test   ebx,ebx
c0016562:	78 14                	js     c0016578 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0016564:	83 ec 0c             	sub    esp,0xc
c0016567:	56                   	push   esi
c0016568:	e8 a3 b6 00 00       	call   c0021c10 <ThreadControlBlock::ThreadControlBlock()>
c001656d:	83 c4 10             	add    esp,0x10
c0016570:	83 c6 5f             	add    esi,0x5f
c0016573:	83 eb 01             	sub    ebx,0x1
c0016576:	eb e8                	jmp    c0016560 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0016578:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001657c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0016583:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016587:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001658e:	83 ec 0c             	sub    esp,0xc
c0016591:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016595:	e8 4a 81 ff ff       	call   c000e6e4 <KeNewProcessEnv(Process*)>
c001659a:	83 c4 10             	add    esp,0x10
c001659d:	89 c2                	mov    edx,eax
c001659f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00165a3:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00165a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00165ad:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00165b6:	a1 5c 61 02 c0       	mov    eax,ds:0xc002615c
c00165bb:	8d 50 01             	lea    edx,[eax+0x1]
c00165be:	89 15 5c 61 02 c0    	mov    DWORD PTR ds:0xc002615c,edx
c00165c4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00165c8:	89 02                	mov    DWORD PTR [edx],eax
c00165ca:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00165d2:	83 ec 0c             	sub    esp,0xc
c00165d5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00165d9:	e8 92 94 ff ff       	call   c000fa70 <malloc>
c00165de:	83 c4 10             	add    esp,0x10
c00165e1:	89 c3                	mov    ebx,eax
c00165e3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00165e8:	83 ec 08             	sub    esp,0x8
c00165eb:	50                   	push   eax
c00165ec:	53                   	push   ebx
c00165ed:	e8 a0 d5 ff ff       	call   c0013b92 <VAS::VAS(bool)>
c00165f2:	83 c4 10             	add    esp,0x10
c00165f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00165f9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00165ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016603:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001660d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016611:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016615:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001661b:	e8 4f a8 ff ff       	call   c0010e6f <KeInitSignals()>
c0016620:	89 c2                	mov    edx,eax
c0016622:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016626:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c001662c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016630:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016636:	85 c0                	test   eax,eax
c0016638:	74 42                	je     c001667c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c001663a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001663e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016644:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001664a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001664e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0016654:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016658:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001665e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016664:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016668:	05 0c 01 00 00       	add    eax,0x10c
c001666d:	83 ec 08             	sub    esp,0x8
c0016670:	52                   	push   edx
c0016671:	50                   	push   eax
c0016672:	e8 d9 9f fe ff       	call   c0000650 <strcpy>
c0016677:	83 c4 10             	add    esp,0x10
c001667a:	eb 7c                	jmp    c00166f8 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c001667c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0016684:	83 ec 0c             	sub    esp,0xc
c0016687:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001668b:	e8 e0 93 ff ff       	call   c000fa70 <malloc>
c0016690:	83 c4 10             	add    esp,0x10
c0016693:	89 c3                	mov    ebx,eax
c0016695:	83 ec 08             	sub    esp,0x8
c0016698:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001669c:	53                   	push   ebx
c001669d:	e8 a6 c0 ff ff       	call   c0012748 <VgaText::VgaText(char const*)>
c00166a2:	83 c4 10             	add    esp,0x10
c00166a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166a9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00166af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166b3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00166b9:	83 ec 0c             	sub    esp,0xc
c00166bc:	50                   	push   eax
c00166bd:	e8 ec b8 ff ff       	call   c0011fae <addToTerminalCycle(VgaText*)>
c00166c2:	83 c4 10             	add    esp,0x10
c00166c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166c9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00166cf:	83 ec 0c             	sub    esp,0xc
c00166d2:	50                   	push   eax
c00166d3:	e8 47 bb ff ff       	call   c001221f <setActiveTerminal(VgaText*)>
c00166d8:	83 c4 10             	add    esp,0x10
c00166db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166df:	05 0c 01 00 00       	add    eax,0x10c
c00166e4:	83 ec 08             	sub    esp,0x8
c00166e7:	68 65 48 02 c0       	push   0xc0024865
c00166ec:	50                   	push   eax
c00166ed:	e8 5e 9f fe ff       	call   c0000650 <strcpy>
c00166f2:	83 c4 10             	add    esp,0x10
c00166f5:	8d 76 00             	lea    esi,[esi+0x0]
c00166f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166fc:	83 c0 0c             	add    eax,0xc
c00166ff:	83 ec 08             	sub    esp,0x8
c0016702:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016706:	50                   	push   eax
c0016707:	e8 44 9f fe ff       	call   c0000650 <strcpy>
c001670c:	83 c4 10             	add    esp,0x10
c001670f:	83 ec 08             	sub    esp,0x8
c0016712:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016716:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001671a:	e8 8d fb ff ff       	call   c00162ac <Process::addArgs(char**)>
c001671f:	83 c4 10             	add    esp,0x10
c0016722:	90                   	nop
c0016723:	83 c4 24             	add    esp,0x24
c0016726:	5b                   	pop    ebx
c0016727:	5e                   	pop    esi
c0016728:	c3                   	ret    
c0016729:	8d 76 00             	lea    esi,[esi+0x0]

c001672c <taskStartupFunction>:
c001672c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016731:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0016734:	c3                   	ret    
c0016735:	8d 76 00             	lea    esi,[esi+0x0]

c0016738 <KeDisablePreemption()>:
c0016738:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c001673d:	85 c0                	test   eax,eax
c001673f:	75 13                	jne    c0016754 <KeDisablePreemption()+0x1c>
c0016741:	8a 15 d4 c0 02 c0    	mov    dl,BYTE PTR ds:0xc002c0d4
c0016747:	c6 05 d4 c0 02 c0 00 	mov    BYTE PTR ds:0xc002c0d4,0x0
c001674e:	88 15 08 ea 02 c0    	mov    BYTE PTR ds:0xc002ea08,dl
c0016754:	83 c0 01             	add    eax,0x1
c0016757:	a3 0c ea 02 c0       	mov    ds:0xc002ea0c,eax
c001675c:	c3                   	ret    
c001675d:	8d 76 00             	lea    esi,[esi+0x0]

c0016760 <KeRestorePreemption()>:
c0016760:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c0016765:	83 e8 01             	sub    eax,0x1
c0016768:	a3 0c ea 02 c0       	mov    ds:0xc002ea0c,eax
c001676d:	75 0d                	jne    c001677c <KeRestorePreemption()+0x1c>
c001676f:	a0 08 ea 02 c0       	mov    al,ds:0xc002ea08
c0016774:	a2 d4 c0 02 c0       	mov    ds:0xc002c0d4,al
c0016779:	8d 76 00             	lea    esi,[esi+0x0]
c001677c:	c3                   	ret    
c001677d:	90                   	nop
c001677e:	66 90                	xchg   ax,ax

c0016780 <Process::createThread(void (*)(void*), void*, int)>:
c0016780:	57                   	push   edi
c0016781:	31 c9                	xor    ecx,ecx
c0016783:	56                   	push   esi
c0016784:	53                   	push   ebx
c0016785:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016789:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0016790:	89 f2                	mov    edx,esi
c0016792:	66 90                	xchg   ax,ax
c0016794:	0f b7 c2             	movzx  eax,dx
c0016797:	80 e2 01             	and    dl,0x1
c001679a:	74 14                	je     c00167b0 <Process::createThread(void (*)(void*), void*, int)+0x30>
c001679c:	d1 f8                	sar    eax,1
c001679e:	83 c1 01             	add    ecx,0x1
c00167a1:	83 f9 10             	cmp    ecx,0x10
c00167a4:	89 c2                	mov    edx,eax
c00167a6:	75 ec                	jne    c0016794 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00167a8:	31 db                	xor    ebx,ebx
c00167aa:	89 d8                	mov    eax,ebx
c00167ac:	5b                   	pop    ebx
c00167ad:	5e                   	pop    esi
c00167ae:	5f                   	pop    edi
c00167af:	c3                   	ret    
c00167b0:	b8 01 00 00 00       	mov    eax,0x1
c00167b5:	d3 e0                	shl    eax,cl
c00167b7:	09 c6                	or     esi,eax
c00167b9:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00167c0:	8d 04 49             	lea    eax,[ecx+ecx*2]
c00167c3:	c1 e0 05             	shl    eax,0x5
c00167c6:	29 c8                	sub    eax,ecx
c00167c8:	01 d8                	add    eax,ebx
c00167ca:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00167d1:	75 0d                	jne    c00167e0 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00167d3:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00167dd:	8d 76 00             	lea    esi,[esi+0x0]
c00167e0:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00167e6:	8d 34 49             	lea    esi,[ecx+ecx*2]
c00167e9:	83 ec 0c             	sub    esp,0xc
c00167ec:	c1 e6 05             	shl    esi,0x5
c00167ef:	29 ce                	sub    esi,ecx
c00167f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00167f4:	8d 04 33             	lea    eax,[ebx+esi*1]
c00167f7:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00167fd:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0016803:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0016809:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0016810:	c7 80 40 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x240],0x0
c001681a:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0016820:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016824:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c001682a:	89 ca                	mov    edx,ecx
c001682c:	f7 da                	neg    edx
c001682e:	c1 e2 15             	shl    edx,0x15
c0016831:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0016837:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001683d:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0016841:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001684b:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0016851:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016855:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001685b:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016865:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001686f:	68 00 01 00 00       	push   0x100
c0016874:	e8 f7 91 ff ff       	call   c000fa70 <malloc>
c0016879:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001687c:	58                   	pop    eax
c001687d:	5a                   	pop    edx
c001687e:	53                   	push   ebx
c001687f:	68 4c ea 02 c0       	push   0xc002ea4c
c0016884:	e8 33 af 00 00       	call   c00217bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016889:	83 c4 10             	add    esp,0x10
c001688c:	89 d8                	mov    eax,ebx
c001688e:	5b                   	pop    ebx
c001688f:	5e                   	pop    esi
c0016890:	5f                   	pop    edi
c0016891:	c3                   	ret    
c0016892:	66 90                	xchg   ax,ax

c0016894 <Process::createUserThread()>:
c0016894:	83 ec 0c             	sub    esp,0xc
c0016897:	68 80 00 00 00       	push   0x80
c001689c:	6a 00                	push   0x0
c001689e:	68 a0 61 01 c0       	push   0xc00161a0
c00168a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00168a7:	50                   	push   eax
c00168a8:	e8 d3 fe ff ff       	call   c0016780 <Process::createThread(void (*)(void*), void*, int)>
c00168ad:	83 c4 1c             	add    esp,0x1c
c00168b0:	c3                   	ret    
c00168b1:	8d 76 00             	lea    esi,[esi+0x0]

c00168b4 <setupMultitasking(void (*)())>:
c00168b4:	56                   	push   esi
c00168b5:	53                   	push   ebx
c00168b6:	83 ec 04             	sub    esp,0x4
c00168b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00168bd:	eb 11                	jmp    c00168d0 <setupMultitasking(void (*)())+0x1c>
c00168bf:	90                   	nop
c00168c0:	83 ec 0c             	sub    esp,0xc
c00168c3:	68 4c ea 02 c0       	push   0xc002ea4c
c00168c8:	e8 33 ae 00 00       	call   c0021700 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00168cd:	83 c4 10             	add    esp,0x10
c00168d0:	83 ec 0c             	sub    esp,0xc
c00168d3:	68 4c ea 02 c0       	push   0xc002ea4c
c00168d8:	e8 ff ad 00 00       	call   c00216dc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00168dd:	83 c4 10             	add    esp,0x10
c00168e0:	84 c0                	test   al,al
c00168e2:	74 dc                	je     c00168c0 <setupMultitasking(void (*)())+0xc>
c00168e4:	83 ec 0c             	sub    esp,0xc
c00168e7:	68 24 07 00 00       	push   0x724
c00168ec:	e8 7f 91 ff ff       	call   c000fa70 <malloc>
c00168f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00168f8:	6a 00                	push   0x0
c00168fa:	68 69 48 02 c0       	push   0xc0024869
c00168ff:	6a 01                	push   0x1
c0016901:	50                   	push   eax
c0016902:	89 c3                	mov    ebx,eax
c0016904:	e8 37 fc ff ff       	call   c0016540 <Process::Process(bool, char const*, Process*, char**)>
c0016909:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001690f:	83 c4 14             	add    esp,0x14
c0016912:	89 1d 58 ea 02 c0    	mov    DWORD PTR ds:0xc002ea58,ebx
c0016918:	50                   	push   eax
c0016919:	e8 01 b9 ff ff       	call   c001221f <setActiveTerminal(VgaText*)>
c001691e:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0016925:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c001692f:	83 c8 01             	or     eax,0x1
c0016932:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0016939:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001693f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016942:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001694c:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0016952:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001695c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0016962:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001696c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0016976:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001697c:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0016982:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001698c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0016996:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c001699d:	e8 ce 90 ff ff       	call   c000fa70 <malloc>
c00169a2:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00169a8:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00169ae:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00169b4:	5a                   	pop    edx
c00169b5:	59                   	pop    ecx
c00169b6:	68 65 48 02 c0       	push   0xc0024865
c00169bb:	50                   	push   eax
c00169bc:	e8 8f 9c fe ff       	call   c0000650 <strcpy>
c00169c1:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00169c8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00169cc:	83 c4 14             	add    esp,0x14
c00169cf:	5b                   	pop    ebx
c00169d0:	5e                   	pop    esi
c00169d1:	e9 93 98 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00169d6:	66 90                	xchg   ax,ax

c00169d8 <schedule()>:
c00169d8:	8b 15 2c ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea2c
c00169de:	85 d2                	test   edx,edx
c00169e0:	74 0e                	je     c00169f0 <schedule()+0x18>
c00169e2:	c7 05 28 ea 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x1
c00169ec:	c3                   	ret    
c00169ed:	8d 76 00             	lea    esi,[esi+0x0]
c00169f0:	53                   	push   ebx
c00169f1:	83 ec 14             	sub    esp,0x14
c00169f4:	68 4c ea 02 c0       	push   0xc002ea4c
c00169f9:	e8 de ac 00 00       	call   c00216dc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00169fe:	83 c4 10             	add    esp,0x10
c0016a01:	84 c0                	test   al,al
c0016a03:	75 3f                	jne    c0016a44 <schedule()+0x6c>
c0016a05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a0a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016a0d:	83 fa 01             	cmp    edx,0x1
c0016a10:	74 3a                	je     c0016a4c <schedule()+0x74>
c0016a12:	66 90                	xchg   ax,ax
c0016a14:	83 ec 0c             	sub    esp,0xc
c0016a17:	68 4c ea 02 c0       	push   0xc002ea4c
c0016a1c:	e8 d7 ac 00 00       	call   c00216f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016a21:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c0016a28:	89 c3                	mov    ebx,eax
c0016a2a:	e8 d1 ac 00 00       	call   c0021700 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016a2f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0016a36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a39:	e8 be f7 ff ff       	call   c00161fc <switchToThread(ThreadControlBlock*)>
c0016a3e:	83 c4 10             	add    esp,0x10
c0016a41:	8d 76 00             	lea    esi,[esi+0x0]
c0016a44:	83 c4 08             	add    esp,0x8
c0016a47:	5b                   	pop    ebx
c0016a48:	c3                   	ret    
c0016a49:	8d 76 00             	lea    esi,[esi+0x0]
c0016a4c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016a53:	83 ec 08             	sub    esp,0x8
c0016a56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a5b:	50                   	push   eax
c0016a5c:	68 4c ea 02 c0       	push   0xc002ea4c
c0016a61:	e8 56 ad 00 00       	call   c00217bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016a66:	83 c4 10             	add    esp,0x10
c0016a69:	eb a9                	jmp    c0016a14 <schedule()+0x3c>
c0016a6b:	90                   	nop

c0016a6c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0016a6c:	83 ec 0c             	sub    esp,0xc
c0016a6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a74:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016a78:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016a7b:	e8 58 ff ff ff       	call   c00169d8 <schedule()>
c0016a80:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0016a88:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0016a8d:	85 c0                	test   eax,eax
c0016a8f:	75 03                	jne    c0016a94 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c0016a91:	fb                   	sti    
c0016a92:	66 90                	xchg   ax,ax
c0016a94:	83 c4 0c             	add    esp,0xc
c0016a97:	c3                   	ret    

c0016a98 <blockTask(TaskState)>:
c0016a98:	83 ec 0c             	sub    esp,0xc
c0016a9b:	fa                   	cli    
c0016a9c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0016aa1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016aa5:	83 c0 01             	add    eax,0x1
c0016aa8:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0016aad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ab2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016ab5:	e8 1e ff ff ff       	call   c00169d8 <schedule()>
c0016aba:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0016ac2:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c0016ac8:	85 d2                	test   edx,edx
c0016aca:	75 04                	jne    c0016ad0 <blockTask(TaskState)+0x38>
c0016acc:	fb                   	sti    
c0016acd:	8d 76 00             	lea    esi,[esi+0x0]
c0016ad0:	83 c4 0c             	add    esp,0xc
c0016ad3:	c3                   	ret    

c0016ad4 <waitTask(int, int*, int)>:
c0016ad4:	83 ec 18             	sub    esp,0x18
c0016ad7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016adc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016ae0:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0016ae3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016ae7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016aec:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0016aef:	6a 07                	push   0x7
c0016af1:	e8 a2 ff ff ff       	call   c0016a98 <blockTask(TaskState)>
c0016af6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016afb:	83 c4 10             	add    esp,0x10
c0016afe:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0016b01:	85 d2                	test   edx,edx
c0016b03:	74 0b                	je     c0016b10 <waitTask(int, int*, int)+0x3c>
c0016b05:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0016b08:	89 02                	mov    DWORD PTR [edx],eax
c0016b0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b0f:	90                   	nop
c0016b10:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016b13:	83 c4 0c             	add    esp,0xc
c0016b16:	c3                   	ret    
c0016b17:	90                   	nop

c0016b18 <milliTenthSleepUntil(unsigned int)>:
c0016b18:	83 ec 0c             	sub    esp,0xc
c0016b1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b1f:	39 05 4c bb 02 c0    	cmp    DWORD PTR ds:0xc002bb4c,eax
c0016b25:	76 05                	jbe    c0016b2c <milliTenthSleepUntil(unsigned int)+0x14>
c0016b27:	90                   	nop
c0016b28:	83 c4 0c             	add    esp,0xc
c0016b2b:	c3                   	ret    
c0016b2c:	fa                   	cli    
c0016b2d:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0016b33:	83 ec 08             	sub    esp,0x8
c0016b36:	8b 15 2c ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea2c
c0016b3c:	83 c1 01             	add    ecx,0x1
c0016b3f:	89 0d 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,ecx
c0016b45:	83 c2 01             	add    edx,0x1
c0016b48:	89 15 2c ea 02 c0    	mov    DWORD PTR ds:0xc002ea2c,edx
c0016b4e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016b54:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0016b57:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016b5d:	51                   	push   ecx
c0016b5e:	68 40 ea 02 c0       	push   0xc002ea40
c0016b63:	e8 54 ac 00 00       	call   c00217bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016b68:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0016b6f:	e8 24 ff ff ff       	call   c0016a98 <blockTask(TaskState)>
c0016b74:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0016b79:	83 c4 10             	add    esp,0x10
c0016b7c:	83 e8 01             	sub    eax,0x1
c0016b7f:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0016b84:	85 c0                	test   eax,eax
c0016b86:	75 0c                	jne    c0016b94 <milliTenthSleepUntil(unsigned int)+0x7c>
c0016b88:	8b 15 28 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea28
c0016b8e:	85 d2                	test   edx,edx
c0016b90:	75 1a                	jne    c0016bac <milliTenthSleepUntil(unsigned int)+0x94>
c0016b92:	66 90                	xchg   ax,ax
c0016b94:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0016b9c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0016ba1:	85 c0                	test   eax,eax
c0016ba3:	75 83                	jne    c0016b28 <milliTenthSleepUntil(unsigned int)+0x10>
c0016ba5:	fb                   	sti    
c0016ba6:	83 c4 0c             	add    esp,0xc
c0016ba9:	c3                   	ret    
c0016baa:	66 90                	xchg   ax,ax
c0016bac:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0016bb6:	e8 1d fe ff ff       	call   c00169d8 <schedule()>
c0016bbb:	eb d7                	jmp    c0016b94 <milliTenthSleepUntil(unsigned int)+0x7c>
c0016bbd:	8d 76 00             	lea    esi,[esi+0x0]

c0016bc0 <milliTenthSleep(unsigned int)>:
c0016bc0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016bc4:	a1 4c bb 02 c0       	mov    eax,ds:0xc002bb4c
c0016bc9:	01 c2                	add    edx,eax
c0016bcb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016bcf:	e9 44 ff ff ff       	jmp    c0016b18 <milliTenthSleepUntil(unsigned int)>

c0016bd4 <sleep(unsigned int)>:
c0016bd4:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0016bdc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016be0:	eb de                	jmp    c0016bc0 <milliTenthSleep(unsigned int)>
c0016be2:	66 90                	xchg   ax,ax

c0016be4 <taskReturned>:
c0016be4:	83 ec 18             	sub    esp,0x18
c0016be7:	68 f0 48 02 c0       	push   0xc00248f0
c0016bec:	e8 c5 91 ff ff       	call   c000fdb6 <KePanic(char const*)>
c0016bf1:	83 c4 10             	add    esp,0x10
c0016bf4:	83 ec 0c             	sub    esp,0xc
c0016bf7:	6a 02                	push   0x2
c0016bf9:	e8 9a fe ff ff       	call   c0016a98 <blockTask(TaskState)>
c0016bfe:	fa                   	cli    
c0016bff:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0016c04:	83 c0 01             	add    eax,0x1
c0016c07:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0016c0c:	e8 c7 fd ff ff       	call   c00169d8 <schedule()>
c0016c11:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0016c19:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c0016c1f:	83 c4 10             	add    esp,0x10
c0016c22:	85 d2                	test   edx,edx
c0016c24:	75 ce                	jne    c0016bf4 <taskReturned+0x10>
c0016c26:	fb                   	sti    
c0016c27:	eb cb                	jmp    c0016bf4 <taskReturned+0x10>
c0016c29:	8d 76 00             	lea    esi,[esi+0x0]

c0016c2c <Thr::processFromPID(int)>:
c0016c2c:	57                   	push   edi
c0016c2d:	56                   	push   esi
c0016c2e:	53                   	push   ebx
c0016c2f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016c33:	fa                   	cli    
c0016c34:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0016c3a:	83 ec 0c             	sub    esp,0xc
c0016c3d:	68 4c ea 02 c0       	push   0xc002ea4c
c0016c42:	83 c1 01             	add    ecx,0x1
c0016c45:	89 0d 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,ecx
c0016c4b:	e8 a8 aa 00 00       	call   c00216f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c50:	83 c4 10             	add    esp,0x10
c0016c53:	89 c7                	mov    edi,eax
c0016c55:	eb 15                	jmp    c0016c6c <Thr::processFromPID(int)+0x40>
c0016c57:	90                   	nop
c0016c58:	83 ec 0c             	sub    esp,0xc
c0016c5b:	68 4c ea 02 c0       	push   0xc002ea4c
c0016c60:	e8 93 aa 00 00       	call   c00216f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c65:	83 c4 10             	add    esp,0x10
c0016c68:	39 f8                	cmp    eax,edi
c0016c6a:	74 50                	je     c0016cbc <Thr::processFromPID(int)+0x90>
c0016c6c:	83 ec 0c             	sub    esp,0xc
c0016c6f:	68 4c ea 02 c0       	push   0xc002ea4c
c0016c74:	e8 7f aa 00 00       	call   c00216f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c79:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c0016c80:	89 c3                	mov    ebx,eax
c0016c82:	e8 79 aa 00 00       	call   c0021700 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016c87:	58                   	pop    eax
c0016c88:	5a                   	pop    edx
c0016c89:	53                   	push   ebx
c0016c8a:	68 4c ea 02 c0       	push   0xc002ea4c
c0016c8f:	e8 28 ab 00 00       	call   c00217bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016c94:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016c97:	83 c4 10             	add    esp,0x10
c0016c9a:	39 30                	cmp    DWORD PTR [eax],esi
c0016c9c:	75 ba                	jne    c0016c58 <Thr::processFromPID(int)+0x2c>
c0016c9e:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0016ca6:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0016cac:	85 c9                	test   ecx,ecx
c0016cae:	74 08                	je     c0016cb8 <Thr::processFromPID(int)+0x8c>
c0016cb0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016cb3:	90                   	nop
c0016cb4:	5b                   	pop    ebx
c0016cb5:	5e                   	pop    esi
c0016cb6:	5f                   	pop    edi
c0016cb7:	c3                   	ret    
c0016cb8:	fb                   	sti    
c0016cb9:	eb f5                	jmp    c0016cb0 <Thr::processFromPID(int)+0x84>
c0016cbb:	90                   	nop
c0016cbc:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0016cc4:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c0016cca:	31 c0                	xor    eax,eax
c0016ccc:	85 d2                	test   edx,edx
c0016cce:	75 e4                	jne    c0016cb4 <Thr::processFromPID(int)+0x88>
c0016cd0:	fb                   	sti    
c0016cd1:	5b                   	pop    ebx
c0016cd2:	5e                   	pop    esi
c0016cd3:	5f                   	pop    edi
c0016cd4:	c3                   	ret    
c0016cd5:	8d 76 00             	lea    esi,[esi+0x0]

c0016cd8 <unblockTask(ThreadControlBlock*)>:
c0016cd8:	53                   	push   ebx
c0016cd9:	83 ec 08             	sub    esp,0x8
c0016cdc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016ce0:	fa                   	cli    
c0016ce1:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c0016ce7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016cea:	83 c2 01             	add    edx,0x1
c0016ced:	89 15 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,edx
c0016cf3:	85 c0                	test   eax,eax
c0016cf5:	74 6d                	je     c0016d64 <unblockTask(ThreadControlBlock*)+0x8c>
c0016cf7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016cfa:	83 f8 01             	cmp    eax,0x1
c0016cfd:	74 39                	je     c0016d38 <unblockTask(ThreadControlBlock*)+0x60>
c0016cff:	83 ec 0c             	sub    esp,0xc
c0016d02:	68 4c ea 02 c0       	push   0xc002ea4c
c0016d07:	e8 ec a9 00 00       	call   c00216f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d0c:	83 c4 10             	add    esp,0x10
c0016d0f:	85 c0                	test   eax,eax
c0016d11:	75 1d                	jne    c0016d30 <unblockTask(ThreadControlBlock*)+0x58>
c0016d13:	eb 63                	jmp    c0016d78 <unblockTask(ThreadControlBlock*)+0xa0>
c0016d15:	8d 76 00             	lea    esi,[esi+0x0]
c0016d18:	83 ec 08             	sub    esp,0x8
c0016d1b:	50                   	push   eax
c0016d1c:	68 4c ea 02 c0       	push   0xc002ea4c
c0016d21:	e8 de ae 00 00       	call   c0021c04 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0016d26:	83 c4 10             	add    esp,0x10
c0016d29:	85 c0                	test   eax,eax
c0016d2b:	74 4b                	je     c0016d78 <unblockTask(ThreadControlBlock*)+0xa0>
c0016d2d:	8d 76 00             	lea    esi,[esi+0x0]
c0016d30:	39 c3                	cmp    ebx,eax
c0016d32:	75 e4                	jne    c0016d18 <unblockTask(ThreadControlBlock*)+0x40>
c0016d34:	eb 12                	jmp    c0016d48 <unblockTask(ThreadControlBlock*)+0x70>
c0016d36:	66 90                	xchg   ax,ax
c0016d38:	83 ec 0c             	sub    esp,0xc
c0016d3b:	68 87 48 02 c0       	push   0xc0024887
c0016d40:	e8 09 02 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016d45:	83 c4 10             	add    esp,0x10
c0016d48:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0016d50:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0016d55:	85 c0                	test   eax,eax
c0016d57:	75 03                	jne    c0016d5c <unblockTask(ThreadControlBlock*)+0x84>
c0016d59:	fb                   	sti    
c0016d5a:	66 90                	xchg   ax,ax
c0016d5c:	83 c4 08             	add    esp,0x8
c0016d5f:	5b                   	pop    ebx
c0016d60:	c3                   	ret    
c0016d61:	8d 76 00             	lea    esi,[esi+0x0]
c0016d64:	83 ec 0c             	sub    esp,0xc
c0016d67:	68 70 48 02 c0       	push   0xc0024870
c0016d6c:	e8 dd 01 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016d71:	83 c4 10             	add    esp,0x10
c0016d74:	eb d2                	jmp    c0016d48 <unblockTask(ThreadControlBlock*)+0x70>
c0016d76:	66 90                	xchg   ax,ax
c0016d78:	83 ec 08             	sub    esp,0x8
c0016d7b:	53                   	push   ebx
c0016d7c:	68 4c ea 02 c0       	push   0xc002ea4c
c0016d81:	e8 36 aa 00 00       	call   c00217bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016d86:	83 c4 10             	add    esp,0x10
c0016d89:	eb bd                	jmp    c0016d48 <unblockTask(ThreadControlBlock*)+0x70>
c0016d8b:	90                   	nop

c0016d8c <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016d8c:	55                   	push   ebp
c0016d8d:	57                   	push   edi
c0016d8e:	56                   	push   esi
c0016d8f:	53                   	push   ebx
c0016d90:	83 ec 1c             	sub    esp,0x1c
c0016d93:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016d97:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016d9a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016da0:	85 ed                	test   ebp,ebp
c0016da2:	7e 28                	jle    c0016dcc <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0016da4:	31 f6                	xor    esi,esi
c0016da6:	66 90                	xchg   ax,ax
c0016da8:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0016daf:	83 ec 0c             	sub    esp,0xc
c0016db2:	83 c6 01             	add    esi,0x1
c0016db5:	57                   	push   edi
c0016db6:	e8 c5 8c ff ff       	call   c000fa80 <free>
c0016dbb:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016dbe:	83 c4 10             	add    esp,0x10
c0016dc1:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0016dc7:	7f df                	jg     c0016da8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016dc9:	8d 76 00             	lea    esi,[esi+0x0]
c0016dcc:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0016dd6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016ddb:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016dde:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016de1:	d3 c0                	rol    eax,cl
c0016de3:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0016dea:	21 c8                	and    eax,ecx
c0016dec:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0016df3:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016df6:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016dfe:	89 f7                	mov    edi,esi
c0016e00:	0f 85 72 01 00 00    	jne    c0016f78 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016e06:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016e0c:	85 ed                	test   ebp,ebp
c0016e0e:	74 1c                	je     c0016e2c <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016e10:	83 ec 0c             	sub    esp,0xc
c0016e13:	55                   	push   ebp
c0016e14:	e8 e7 77 ff ff       	call   c000e600 <EnvVarContainer::~EnvVarContainer()>
c0016e19:	59                   	pop    ecx
c0016e1a:	5e                   	pop    esi
c0016e1b:	6a 0c                	push   0xc
c0016e1d:	55                   	push   ebp
c0016e1e:	e8 c4 63 ff ff       	call   c000d1e7 <operator delete(void*, unsigned long)>
c0016e23:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016e26:	83 c4 10             	add    esp,0x10
c0016e29:	89 f7                	mov    edi,esi
c0016e2b:	90                   	nop
c0016e2c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016e32:	85 c0                	test   eax,eax
c0016e34:	0f 84 b2 00 00 00    	je     c0016eec <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016e3a:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016e3d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016e41:	31 c9                	xor    ecx,ecx
c0016e43:	eb 17                	jmp    c0016e5c <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016e45:	8d 76 00             	lea    esi,[esi+0x0]
c0016e48:	83 c1 01             	add    ecx,0x1
c0016e4b:	83 f9 10             	cmp    ecx,0x10
c0016e4e:	0f 84 98 00 00 00    	je     c0016eec <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016e54:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016e5a:	66 90                	xchg   ax,ax
c0016e5c:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0016e63:	d3 fa                	sar    edx,cl
c0016e65:	80 e2 01             	and    dl,0x1
c0016e68:	74 de                	je     c0016e48 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016e6a:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0016e6d:	c1 e2 05             	shl    edx,0x5
c0016e70:	29 ca                	sub    edx,ecx
c0016e72:	01 d0                	add    eax,edx
c0016e74:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016e7a:	83 fd 07             	cmp    ebp,0x7
c0016e7d:	75 c9                	jne    c0016e48 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016e7f:	05 40 02 00 00       	add    eax,0x240
c0016e84:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0016e87:	83 fd ff             	cmp    ebp,0xffffffff
c0016e8a:	0f 8c f0 00 00 00    	jl     c0016f80 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0016e90:	0f 84 ae 01 00 00    	je     c0017044 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0016e96:	85 ed                	test   ebp,ebp
c0016e98:	0f 84 92 01 00 00    	je     c0017030 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016e9e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016ea0:	75 a6                	jne    c0016e48 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016ea2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016ea6:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016eac:	01 d0                	add    eax,edx
c0016eae:	66 90                	xchg   ax,ax
c0016eb0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016eb4:	83 ec 0c             	sub    esp,0xc
c0016eb7:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016ebd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016ec0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016ec6:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016ecd:	50                   	push   eax
c0016ece:	e8 05 fe ff ff       	call   c0016cd8 <unblockTask(ThreadControlBlock*)>
c0016ed3:	83 c4 10             	add    esp,0x10
c0016ed6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016ed9:	89 f7                	mov    edi,esi
c0016edb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016edf:	83 c1 01             	add    ecx,0x1
c0016ee2:	83 f9 10             	cmp    ecx,0x10
c0016ee5:	0f 85 69 ff ff ff    	jne    c0016e54 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0016eeb:	90                   	nop
c0016eec:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0016ef2:	85 c0                	test   eax,eax
c0016ef4:	74 62                	je     c0016f58 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016ef6:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016efc:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0016f02:	74 54                	je     c0016f58 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016f04:	83 ec 0c             	sub    esp,0xc
c0016f07:	68 4c ea 02 c0       	push   0xc002ea4c
c0016f0c:	e8 e7 a7 00 00       	call   c00216f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016f11:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c0016f18:	89 c7                	mov    edi,eax
c0016f1a:	e8 bd a7 00 00       	call   c00216dc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016f1f:	83 c4 10             	add    esp,0x10
c0016f22:	84 c0                	test   al,al
c0016f24:	0f 84 ce 00 00 00    	je     c0016ff8 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0016f2a:	66 90                	xchg   ax,ax
c0016f2c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016f2f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016f35:	85 d2                	test   edx,edx
c0016f37:	74 0f                	je     c0016f48 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0016f39:	8b 02                	mov    eax,DWORD PTR [edx]
c0016f3b:	83 ec 0c             	sub    esp,0xc
c0016f3e:	52                   	push   edx
c0016f3f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f42:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016f45:	83 c4 10             	add    esp,0x10
c0016f48:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0016f52:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0016f55:	8d 76 00             	lea    esi,[esi+0x0]
c0016f58:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016f5e:	85 db                	test   ebx,ebx
c0016f60:	74 16                	je     c0016f78 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016f62:	83 ec 0c             	sub    esp,0xc
c0016f65:	53                   	push   ebx
c0016f66:	e8 7b c7 ff ff       	call   c00136e6 <VAS::~VAS()>
c0016f6b:	58                   	pop    eax
c0016f6c:	5a                   	pop    edx
c0016f6d:	6a 14                	push   0x14
c0016f6f:	53                   	push   ebx
c0016f70:	e8 72 62 ff ff       	call   c000d1e7 <operator delete(void*, unsigned long)>
c0016f75:	83 c4 10             	add    esp,0x10
c0016f78:	83 c4 1c             	add    esp,0x1c
c0016f7b:	5b                   	pop    ebx
c0016f7c:	5e                   	pop    esi
c0016f7d:	5f                   	pop    edi
c0016f7e:	5d                   	pop    ebp
c0016f7f:	c3                   	ret    
c0016f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016f84:	83 ec 0c             	sub    esp,0xc
c0016f87:	68 24 49 02 c0       	push   0xc0024924
c0016f8c:	e8 25 8e ff ff       	call   c000fdb6 <KePanic(char const*)>
c0016f91:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016f94:	83 c4 10             	add    esp,0x10
c0016f97:	89 f7                	mov    edi,esi
c0016f99:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f9d:	e9 a6 fe ff ff       	jmp    c0016e48 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016fa2:	66 90                	xchg   ax,ax
c0016fa4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016faa:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016fb0:	75 1e                	jne    c0016fd0 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016fb2:	83 ec 0c             	sub    esp,0xc
c0016fb5:	68 8c 49 02 c0       	push   0xc002498c
c0016fba:	e8 8f ff fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016fbf:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0016fc6:	e8 cd fa ff ff       	call   c0016a98 <blockTask(TaskState)>
c0016fcb:	83 c4 10             	add    esp,0x10
c0016fce:	66 90                	xchg   ax,ax
c0016fd0:	83 ec 08             	sub    esp,0x8
c0016fd3:	56                   	push   esi
c0016fd4:	68 4c ea 02 c0       	push   0xc002ea4c
c0016fd9:	e8 de a7 00 00       	call   c00217bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016fde:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c0016fe5:	e8 0e a7 00 00       	call   c00216f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016fea:	83 c4 10             	add    esp,0x10
c0016fed:	39 f8                	cmp    eax,edi
c0016fef:	0f 84 37 ff ff ff    	je     c0016f2c <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0016ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ff8:	83 ec 0c             	sub    esp,0xc
c0016ffb:	68 4c ea 02 c0       	push   0xc002ea4c
c0017000:	e8 f3 a6 00 00       	call   c00216f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017005:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c001700c:	89 c6                	mov    esi,eax
c001700e:	e8 ed a6 00 00       	call   c0021700 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017013:	83 c4 10             	add    esp,0x10
c0017016:	39 f3                	cmp    ebx,esi
c0017018:	74 b6                	je     c0016fd0 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001701a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c001701d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017020:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0017026:	75 a8                	jne    c0016fd0 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0017028:	e9 77 ff ff ff       	jmp    c0016fa4 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c001702d:	8d 76 00             	lea    esi,[esi+0x0]
c0017030:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017034:	83 ec 0c             	sub    esp,0xc
c0017037:	68 58 49 02 c0       	push   0xc0024958
c001703c:	e9 4b ff ff ff       	jmp    c0016f8c <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0017041:	8d 76 00             	lea    esi,[esi+0x0]
c0017044:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017048:	8b 36                	mov    esi,DWORD PTR [esi]
c001704a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c001704d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017050:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0017056:	01 d7                	add    edi,edx
c0017058:	89 f8                	mov    eax,edi
c001705a:	e9 51 fe ff ff       	jmp    c0016eb0 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c001705f:	90                   	nop

c0017060 <cleanerTaskFunction(void*)>:
c0017060:	53                   	push   ebx
c0017061:	83 ec 08             	sub    esp,0x8
c0017064:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c001706c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017071:	85 c0                	test   eax,eax
c0017073:	75 03                	jne    c0017078 <cleanerTaskFunction(void*)+0x18>
c0017075:	fb                   	sti    
c0017076:	66 90                	xchg   ax,ax
c0017078:	fa                   	cli    
c0017079:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001707e:	83 c0 01             	add    eax,0x1
c0017081:	80 3d 14 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea14,0x0
c0017088:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c001708d:	0f 85 c9 00 00 00    	jne    c001715c <cleanerTaskFunction(void*)+0xfc>
c0017093:	83 ec 0c             	sub    esp,0xc
c0017096:	6a 02                	push   0x2
c0017098:	e8 cf f9 ff ff       	call   c0016a6c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001709d:	83 c4 10             	add    esp,0x10
c00170a0:	c6 05 14 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea14,0x0
c00170a7:	fa                   	cli    
c00170a8:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c00170ae:	8b 1d 2c ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea2c
c00170b4:	83 c1 01             	add    ecx,0x1
c00170b7:	89 0d 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,ecx
c00170bd:	83 c3 01             	add    ebx,0x1
c00170c0:	89 1d 2c ea 02 c0    	mov    DWORD PTR ds:0xc002ea2c,ebx
c00170c6:	fa                   	cli    
c00170c7:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00170cc:	83 c0 01             	add    eax,0x1
c00170cf:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c00170d4:	eb 2a                	jmp    c0017100 <cleanerTaskFunction(void*)+0xa0>
c00170d6:	66 90                	xchg   ax,ax
c00170d8:	83 ec 0c             	sub    esp,0xc
c00170db:	68 34 ea 02 c0       	push   0xc002ea34
c00170e0:	e8 13 a6 00 00       	call   c00216f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00170e5:	c7 04 24 34 ea 02 c0 	mov    DWORD PTR [esp],0xc002ea34
c00170ec:	89 c3                	mov    ebx,eax
c00170ee:	e8 0d a6 00 00       	call   c0021700 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00170f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00170f6:	e8 91 fc ff ff       	call   c0016d8c <cleanupTerminatedTask(ThreadControlBlock*)>
c00170fb:	83 c4 10             	add    esp,0x10
c00170fe:	66 90                	xchg   ax,ax
c0017100:	83 ec 0c             	sub    esp,0xc
c0017103:	68 34 ea 02 c0       	push   0xc002ea34
c0017108:	e8 cf a5 00 00       	call   c00216dc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001710d:	83 c4 10             	add    esp,0x10
c0017110:	84 c0                	test   al,al
c0017112:	74 c4                	je     c00170d8 <cleanerTaskFunction(void*)+0x78>
c0017114:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c001711c:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c0017122:	85 d2                	test   edx,edx
c0017124:	75 02                	jne    c0017128 <cleanerTaskFunction(void*)+0xc8>
c0017126:	fb                   	sti    
c0017127:	90                   	nop
c0017128:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c001712d:	83 e8 01             	sub    eax,0x1
c0017130:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0017135:	0f 85 29 ff ff ff    	jne    c0017064 <cleanerTaskFunction(void*)+0x4>
c001713b:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0017140:	85 c0                	test   eax,eax
c0017142:	0f 84 1c ff ff ff    	je     c0017064 <cleanerTaskFunction(void*)+0x4>
c0017148:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0017152:	e8 81 f8 ff ff       	call   c00169d8 <schedule()>
c0017157:	e9 08 ff ff ff       	jmp    c0017064 <cleanerTaskFunction(void*)+0x4>
c001715c:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017164:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017169:	85 c0                	test   eax,eax
c001716b:	0f 85 2f ff ff ff    	jne    c00170a0 <cleanerTaskFunction(void*)+0x40>
c0017171:	fb                   	sti    
c0017172:	e9 29 ff ff ff       	jmp    c00170a0 <cleanerTaskFunction(void*)+0x40>
c0017177:	90                   	nop

c0017178 <terminateTask(int)>:
c0017178:	83 ec 14             	sub    esp,0x14
c001717b:	fa                   	cli    
c001717c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017181:	83 c0 01             	add    eax,0x1
c0017184:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0017189:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c001718e:	83 c0 01             	add    eax,0x1
c0017191:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0017196:	fa                   	cli    
c0017197:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001719c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00171a0:	83 c0 01             	add    eax,0x1
c00171a3:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c00171a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171ad:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00171b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171b5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00171b8:	50                   	push   eax
c00171b9:	68 34 ea 02 c0       	push   0xc002ea34
c00171be:	e8 f9 a5 00 00       	call   c00217bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00171c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171c8:	83 c4 10             	add    esp,0x10
c00171cb:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00171d2:	a1 10 ea 02 c0       	mov    eax,ds:0xc002ea10
c00171d7:	85 c0                	test   eax,eax
c00171d9:	0f 84 81 00 00 00    	je     c0017260 <terminateTask(int)+0xe8>
c00171df:	c6 05 14 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea14,0x1
c00171e6:	83 ec 0c             	sub    esp,0xc
c00171e9:	50                   	push   eax
c00171ea:	e8 e9 fa ff ff       	call   c0016cd8 <unblockTask(ThreadControlBlock*)>
c00171ef:	83 c4 10             	add    esp,0x10
c00171f2:	66 90                	xchg   ax,ax
c00171f4:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00171fc:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017201:	85 c0                	test   eax,eax
c0017203:	75 03                	jne    c0017208 <terminateTask(int)+0x90>
c0017205:	fb                   	sti    
c0017206:	66 90                	xchg   ax,ax
c0017208:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c001720d:	83 e8 01             	sub    eax,0x1
c0017210:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0017215:	75 09                	jne    c0017220 <terminateTask(int)+0xa8>
c0017217:	83 3d 28 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea28,0x0
c001721e:	75 54                	jne    c0017274 <terminateTask(int)+0xfc>
c0017220:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017228:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c001722e:	85 c9                	test   ecx,ecx
c0017230:	75 06                	jne    c0017238 <terminateTask(int)+0xc0>
c0017232:	66 90                	xchg   ax,ax
c0017234:	fb                   	sti    
c0017235:	8d 76 00             	lea    esi,[esi+0x0]
c0017238:	fa                   	cli    
c0017239:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001723e:	83 c0 01             	add    eax,0x1
c0017241:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0017246:	e8 8d f7 ff ff       	call   c00169d8 <schedule()>
c001724b:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017253:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c0017259:	85 d2                	test   edx,edx
c001725b:	75 db                	jne    c0017238 <terminateTask(int)+0xc0>
c001725d:	eb d5                	jmp    c0017234 <terminateTask(int)+0xbc>
c001725f:	90                   	nop
c0017260:	83 ec 0c             	sub    esp,0xc
c0017263:	68 9e 48 02 c0       	push   0xc002489e
c0017268:	e8 e1 fc fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001726d:	83 c4 10             	add    esp,0x10
c0017270:	eb 82                	jmp    c00171f4 <terminateTask(int)+0x7c>
c0017272:	66 90                	xchg   ax,ax
c0017274:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c001727e:	e8 55 f7 ff ff       	call   c00169d8 <schedule()>
c0017283:	eb 9b                	jmp    c0017220 <terminateTask(int)+0xa8>
c0017285:	8d 76 00             	lea    esi,[esi+0x0]

c0017288 <Thr::terminateFromIRQ(int)>:
c0017288:	83 ec 18             	sub    esp,0x18
c001728b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001728f:	50                   	push   eax
c0017290:	e8 e3 fe ff ff       	call   c0017178 <terminateTask(int)>
c0017295:	8d 76 00             	lea    esi,[esi+0x0]

c0017298 <__static_initialization_and_destruction_0(int, int)>:
c0017298:	83 ec 0c             	sub    esp,0xc
c001729b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00172a0:	0f 85 8e 00 00 00    	jne    c0017334 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00172a6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00172ae:	0f 85 80 00 00 00    	jne    c0017334 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00172b4:	83 ec 0c             	sub    esp,0xc
c00172b7:	68 4c ea 02 c0       	push   0xc002ea4c
c00172bc:	e8 9b a9 00 00       	call   c0021c5c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00172c1:	83 c4 10             	add    esp,0x10
c00172c4:	83 ec 04             	sub    esp,0x4
c00172c7:	68 a8 59 02 c0       	push   0xc00259a8
c00172cc:	68 4c ea 02 c0       	push   0xc002ea4c
c00172d1:	68 0c 1c 02 c0       	push   0xc0021c0c
c00172d6:	e8 bc 5e ff ff       	call   c000d197 <__cxa_atexit>
c00172db:	83 c4 10             	add    esp,0x10
c00172de:	83 ec 0c             	sub    esp,0xc
c00172e1:	68 40 ea 02 c0       	push   0xc002ea40
c00172e6:	e8 71 a9 00 00       	call   c0021c5c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00172eb:	83 c4 10             	add    esp,0x10
c00172ee:	83 ec 04             	sub    esp,0x4
c00172f1:	68 a8 59 02 c0       	push   0xc00259a8
c00172f6:	68 40 ea 02 c0       	push   0xc002ea40
c00172fb:	68 0c 1c 02 c0       	push   0xc0021c0c
c0017300:	e8 92 5e ff ff       	call   c000d197 <__cxa_atexit>
c0017305:	83 c4 10             	add    esp,0x10
c0017308:	83 ec 0c             	sub    esp,0xc
c001730b:	68 34 ea 02 c0       	push   0xc002ea34
c0017310:	e8 47 a9 00 00       	call   c0021c5c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017315:	83 c4 10             	add    esp,0x10
c0017318:	83 ec 04             	sub    esp,0x4
c001731b:	68 a8 59 02 c0       	push   0xc00259a8
c0017320:	68 34 ea 02 c0       	push   0xc002ea34
c0017325:	68 0c 1c 02 c0       	push   0xc0021c0c
c001732a:	e8 68 5e ff ff       	call   c000d197 <__cxa_atexit>
c001732f:	83 c4 10             	add    esp,0x10
c0017332:	66 90                	xchg   ax,ax
c0017334:	90                   	nop
c0017335:	83 c4 0c             	add    esp,0xc
c0017338:	c3                   	ret    
c0017339:	8d 76 00             	lea    esi,[esi+0x0]

c001733c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001733c:	83 ec 0c             	sub    esp,0xc
c001733f:	83 ec 08             	sub    esp,0x8
c0017342:	68 ff ff 00 00       	push   0xffff
c0017347:	6a 01                	push   0x1
c0017349:	e8 4a ff ff ff       	call   c0017298 <__static_initialization_and_destruction_0(int, int)>
c001734e:	83 c4 10             	add    esp,0x10
c0017351:	83 c4 0c             	add    esp,0xc
c0017354:	c3                   	ret    

c0017355 <Vm::inbv(unsigned short)>:
c0017355:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017359:	66 81 fa fe fe       	cmp    dx,0xfefe
c001735e:	75 06                	jne    c0017366 <Vm::inbv(unsigned short)+0x11>
c0017360:	a0 90 ea 02 c0       	mov    al,ds:0xc002ea90
c0017365:	c3                   	ret    
c0017366:	ec                   	in     al,dx
c0017367:	c3                   	ret    

c0017368 <Vm::outbv(unsigned short, unsigned char)>:
c0017368:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001736c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017370:	66 81 fa fe fe       	cmp    dx,0xfefe
c0017375:	75 25                	jne    c001739c <Vm::outbv(unsigned short, unsigned char)+0x34>
c0017377:	8b 0d 90 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea90
c001737d:	88 81 a0 ea 02 c0    	mov    BYTE PTR [ecx-0x3ffd1560],al
c0017383:	8d 51 01             	lea    edx,[ecx+0x1]
c0017386:	89 15 90 ea 02 c0    	mov    DWORD PTR ds:0xc002ea90,edx
c001738c:	83 fa 20             	cmp    edx,0x20
c001738f:	75 0c                	jne    c001739d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0017391:	c7 05 90 ea 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x1f
c001739b:	c3                   	ret    
c001739c:	ee                   	out    dx,al
c001739d:	c3                   	ret    

c001739e <Vm::realToLinear(unsigned short, unsigned short)>:
c001739e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00173a3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00173a8:	c1 e0 04             	shl    eax,0x4
c00173ab:	01 d0                	add    eax,edx
c00173ad:	c3                   	ret    

c00173ae <Vm::getSegment(unsigned int)>:
c00173ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00173b2:	c1 e8 10             	shr    eax,0x10
c00173b5:	c3                   	ret    

c00173b6 <Vm::getOffset(unsigned int)>:
c00173b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00173ba:	c3                   	ret    

c00173bb <Vm::mainloop2()>:
c00173bb:	83 ec 18             	sub    esp,0x18
c00173be:	fa                   	cli    
c00173bf:	6a 02                	push   0x2
c00173c1:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c00173c7:	c6 05 89 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea89,0x1
c00173ce:	e8 99 f6 ff ff       	call   c0016a6c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00173d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00173d8:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00173dc:	52                   	push   edx
c00173dd:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00173e1:	52                   	push   edx
c00173e2:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00173e6:	52                   	push   edx
c00173e7:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00173eb:	50                   	push   eax
c00173ec:	e8 1e 8e fe ff       	call   c000020f <goToVM86>
c00173f1:	83 c4 2c             	add    esp,0x2c
c00173f4:	c3                   	ret    

c00173f5 <Vm::mainVm8086Loop(void*)>:
c00173f5:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00173fc:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017403:	75 01                	jne    c0017406 <Vm::mainVm8086Loop(void*)+0x11>
c0017405:	fb                   	sti    
c0017406:	eb b3                	jmp    c00173bb <Vm::mainloop2()>

c0017408 <Vm::mainloop3(unsigned long)>:
c0017408:	83 ec 18             	sub    esp,0x18
c001740b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001740f:	fa                   	cli    
c0017410:	6a 02                	push   0x2
c0017412:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0017418:	c6 05 88 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea88,0x1
c001741f:	a3 84 ea 02 c0       	mov    ds:0xc002ea84,eax
c0017424:	e8 43 f6 ff ff       	call   c0016a6c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017429:	83 c4 1c             	add    esp,0x1c
c001742c:	eb 8d                	jmp    c00173bb <Vm::mainloop2()>

c001742e <Vm::initialise8086()>:
c001742e:	83 ec 0c             	sub    esp,0xc
c0017431:	68 80 00 00 00       	push   0x80
c0017436:	6a 00                	push   0x0
c0017438:	68 f5 73 01 c0       	push   0xc00173f5
c001743d:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0017443:	e8 38 f3 ff ff       	call   c0016780 <Process::createThread(void (*)(void*), void*, int)>
c0017448:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001744f:	68 10 01 00 00       	push   0x110
c0017454:	6a 00                	push   0x0
c0017456:	6a 00                	push   0x0
c0017458:	a3 8c ea 02 c0       	mov    ds:0xc002ea8c,eax
c001745d:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0017462:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017468:	e8 db c5 ff ff       	call   c0013a48 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001746d:	83 c4 2c             	add    esp,0x2c
c0017470:	c3                   	ret    

c0017471 <Vm::resetConventionalMemory8086()>:
c0017471:	c3                   	ret    

c0017472 <Vm::finish8086()>:
c0017472:	53                   	push   ebx
c0017473:	83 ec 08             	sub    esp,0x8
c0017476:	fa                   	cli    
c0017477:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001747d:	80 3d 88 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea88,0x0
c0017484:	75 18                	jne    c001749e <Vm::finish8086()+0x2c>
c0017486:	e8 4d f5 ff ff       	call   c00169d8 <schedule()>
c001748b:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017492:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017499:	75 db                	jne    c0017476 <Vm::finish8086()+0x4>
c001749b:	fb                   	sti    
c001749c:	eb d8                	jmp    c0017476 <Vm::finish8086()+0x4>
c001749e:	c6 05 88 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea88,0x0
c00174a5:	83 ec 0c             	sub    esp,0xc
c00174a8:	8b 1d 84 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea84
c00174ae:	ff 35 8c ea 02 c0    	push   DWORD PTR ds:0xc002ea8c
c00174b4:	e8 1f f8 ff ff       	call   c0016cd8 <unblockTask(ThreadControlBlock*)>
c00174b9:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00174c0:	83 c4 10             	add    esp,0x10
c00174c3:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00174ca:	75 01                	jne    c00174cd <Vm::finish8086()+0x5b>
c00174cc:	fb                   	sti    
c00174cd:	83 c4 08             	add    esp,0x8
c00174d0:	89 d8                	mov    eax,ebx
c00174d2:	5b                   	pop    ebx
c00174d3:	c3                   	ret    

c00174d4 <Vm::getOutput8086(unsigned char*)>:
c00174d4:	57                   	push   edi
c00174d5:	8b 0d 90 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea90
c00174db:	56                   	push   esi
c00174dc:	be a0 ea 02 c0       	mov    esi,0xc002eaa0
c00174e1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00174e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00174e7:	5e                   	pop    esi
c00174e8:	a1 90 ea 02 c0       	mov    eax,ds:0xc002ea90
c00174ed:	c7 05 90 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x0
c00174f7:	5f                   	pop    edi
c00174f8:	c3                   	ret    

c00174f9 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00174f9:	55                   	push   ebp
c00174fa:	57                   	push   edi
c00174fb:	56                   	push   esi
c00174fc:	53                   	push   ebx
c00174fd:	83 ec 2c             	sub    esp,0x2c
c0017500:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017504:	80 3d 80 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea80,0x0
c001750b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001750f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017513:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017517:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c001751b:	75 5d                	jne    c001757a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c001751d:	83 ec 0c             	sub    esp,0xc
c0017520:	68 14 01 00 00       	push   0x114
c0017525:	e8 46 85 ff ff       	call   c000fa70 <malloc>
c001752a:	83 c4 0c             	add    esp,0xc
c001752d:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0017533:	68 b4 49 02 c0       	push   0xc00249b4
c0017538:	50                   	push   eax
c0017539:	89 c7                	mov    edi,eax
c001753b:	e8 ec 0b ff ff       	call   c000812c <File::File(char const*, Process*)>
c0017540:	58                   	pop    eax
c0017541:	5a                   	pop    edx
c0017542:	6a 12                	push   0x12
c0017544:	57                   	push   edi
c0017545:	e8 00 0c ff ff       	call   c000814a <File::open(FileOpenMode)>
c001754a:	8b 07                	mov    eax,DWORD PTR [edi]
c001754c:	59                   	pop    ecx
c001754d:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0017551:	51                   	push   ecx
c0017552:	6a 00                	push   0x0
c0017554:	6a 00                	push   0x0
c0017556:	68 00 00 11 00       	push   0x110000
c001755b:	57                   	push   edi
c001755c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001755f:	83 c4 14             	add    esp,0x14
c0017562:	57                   	push   edi
c0017563:	e8 40 0c ff ff       	call   c00081a8 <File::close()>
c0017568:	8b 07                	mov    eax,DWORD PTR [edi]
c001756a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001756d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017570:	83 c4 10             	add    esp,0x10
c0017573:	c6 05 80 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea80,0x1
c001757a:	fa                   	cli    
c001757b:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0017581:	80 3d 89 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea89,0x0
c0017588:	75 18                	jne    c00175a2 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa9>
c001758a:	e8 49 f4 ff ff       	call   c00169d8 <schedule()>
c001758f:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017596:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001759d:	75 db                	jne    c001757a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c001759f:	fb                   	sti    
c00175a0:	eb d8                	jmp    c001757a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c00175a2:	c7 05 90 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x0
c00175ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00175b0:	a1 8c ea 02 c0       	mov    eax,ds:0xc002ea8c
c00175b5:	66 89 70 55          	mov    WORD PTR [eax+0x55],si
c00175b9:	0f b7 f6             	movzx  esi,si
c00175bc:	66 89 58 57          	mov    WORD PTR [eax+0x57],bx
c00175c0:	0f b7 db             	movzx  ebx,bx
c00175c3:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00175c7:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c00175cb:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00175cf:	50                   	push   eax
c00175d0:	6a 20                	push   0x20
c00175d2:	6a 00                	push   0x0
c00175d4:	68 a0 ea 02 c0       	push   0xc002eaa0
c00175d9:	e8 12 8f fe ff       	call   c00004f0 <memset>
c00175de:	5a                   	pop    edx
c00175df:	59                   	pop    ecx
c00175e0:	56                   	push   esi
c00175e1:	53                   	push   ebx
c00175e2:	e8 b7 fd ff ff       	call   c001739e <Vm::realToLinear(unsigned short, unsigned short)>
c00175e7:	83 c4 10             	add    esp,0x10
c00175ea:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00175ee:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00175f2:	89 c7                	mov    edi,eax
c00175f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00175f6:	c6 05 89 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea89,0x0
c00175fd:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017604:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001760b:	75 01                	jne    c001760e <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x115>
c001760d:	fb                   	sti    
c001760e:	83 ec 0c             	sub    esp,0xc
c0017611:	ff 35 8c ea 02 c0    	push   DWORD PTR ds:0xc002ea8c
c0017617:	e8 bc f6 ff ff       	call   c0016cd8 <unblockTask(ThreadControlBlock*)>
c001761c:	83 c4 3c             	add    esp,0x3c
c001761f:	b0 01                	mov    al,0x1
c0017621:	5b                   	pop    ebx
c0017622:	5e                   	pop    esi
c0017623:	5f                   	pop    edi
c0017624:	5d                   	pop    ebp
c0017625:	c3                   	ret    

c0017626 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017626:	55                   	push   ebp
c0017627:	57                   	push   edi
c0017628:	56                   	push   esi
c0017629:	53                   	push   ebx
c001762a:	83 ec 2c             	sub    esp,0x2c
c001762d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017631:	80 3d 80 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea80,0x0
c0017638:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001763c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017644:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017648:	75 5d                	jne    c00176a7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c001764a:	83 ec 0c             	sub    esp,0xc
c001764d:	68 14 01 00 00       	push   0x114
c0017652:	e8 19 84 ff ff       	call   c000fa70 <malloc>
c0017657:	83 c4 0c             	add    esp,0xc
c001765a:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0017660:	68 b4 49 02 c0       	push   0xc00249b4
c0017665:	50                   	push   eax
c0017666:	89 c3                	mov    ebx,eax
c0017668:	e8 bf 0a ff ff       	call   c000812c <File::File(char const*, Process*)>
c001766d:	58                   	pop    eax
c001766e:	5a                   	pop    edx
c001766f:	6a 12                	push   0x12
c0017671:	53                   	push   ebx
c0017672:	e8 d3 0a ff ff       	call   c000814a <File::open(FileOpenMode)>
c0017677:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017679:	59                   	pop    ecx
c001767a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001767e:	52                   	push   edx
c001767f:	6a 00                	push   0x0
c0017681:	6a 00                	push   0x0
c0017683:	68 00 00 11 00       	push   0x110000
c0017688:	53                   	push   ebx
c0017689:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001768c:	83 c4 14             	add    esp,0x14
c001768f:	53                   	push   ebx
c0017690:	e8 13 0b ff ff       	call   c00081a8 <File::close()>
c0017695:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017697:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001769a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001769d:	83 c4 10             	add    esp,0x10
c00176a0:	c6 05 80 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea80,0x1
c00176a7:	50                   	push   eax
c00176a8:	50                   	push   eax
c00176a9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00176ad:	68 cf 49 02 c0       	push   0xc00249cf
c00176b2:	e8 97 f8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00176b7:	83 c4 10             	add    esp,0x10
c00176ba:	fa                   	cli    
c00176bb:	8a 1d 89 ea 02 c0    	mov    bl,BYTE PTR ds:0xc002ea89
c00176c1:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c00176c7:	84 db                	test   bl,bl
c00176c9:	75 18                	jne    c00176e3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xbd>
c00176cb:	e8 08 f3 ff ff       	call   c00169d8 <schedule()>
c00176d0:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00176d7:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00176de:	75 da                	jne    c00176ba <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c00176e0:	fb                   	sti    
c00176e1:	eb d7                	jmp    c00176ba <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c00176e3:	c7 05 90 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x0
c00176ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00176f1:	a1 8c ea 02 c0       	mov    eax,ds:0xc002ea8c
c00176f6:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c00176fa:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00176fe:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0017702:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0017706:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001770a:	50                   	push   eax
c001770b:	6a 20                	push   0x20
c001770d:	6a 00                	push   0x0
c001770f:	68 a0 ea 02 c0       	push   0xc002eaa0
c0017714:	e8 d7 8d fe ff       	call   c00004f0 <memset>
c0017719:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017720:	e8 4b 83 ff ff       	call   c000fa70 <malloc>
c0017725:	83 c4 0c             	add    esp,0xc
c0017728:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c001772e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017732:	89 c5                	mov    ebp,eax
c0017734:	50                   	push   eax
c0017735:	e8 f2 09 ff ff       	call   c000812c <File::File(char const*, Process*)>
c001773a:	83 c4 10             	add    esp,0x10
c001773d:	85 ed                	test   ebp,ebp
c001773f:	75 0a                	jne    c001774b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0017741:	83 ec 0c             	sub    esp,0xc
c0017744:	68 f1 49 02 c0       	push   0xc00249f1
c0017749:	eb 2b                	jmp    c0017776 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x150>
c001774b:	50                   	push   eax
c001774c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0017750:	50                   	push   eax
c0017751:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017755:	50                   	push   eax
c0017756:	55                   	push   ebp
c0017757:	e8 f0 0c ff ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c001775c:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017760:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017764:	83 c4 10             	add    esp,0x10
c0017767:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001776c:	74 28                	je     c0017796 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x170>
c001776e:	83 ec 0c             	sub    esp,0xc
c0017771:	68 05 4a 02 c0       	push   0xc0024a05
c0017776:	e8 3b 86 ff ff       	call   c000fdb6 <KePanic(char const*)>
c001777b:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017782:	83 c4 10             	add    esp,0x10
c0017785:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001778c:	75 01                	jne    c001778f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x169>
c001778e:	fb                   	sti    
c001778f:	31 db                	xor    ebx,ebx
c0017791:	e9 92 00 00 00       	jmp    c0017828 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x202>
c0017796:	51                   	push   ecx
c0017797:	51                   	push   ecx
c0017798:	6a 01                	push   0x1
c001779a:	55                   	push   ebp
c001779b:	e8 aa 09 ff ff       	call   c000814a <File::open(FileOpenMode)>
c00177a0:	83 c4 10             	add    esp,0x10
c00177a3:	85 c0                	test   eax,eax
c00177a5:	74 27                	je     c00177ce <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1a8>
c00177a7:	83 ec 0c             	sub    esp,0xc
c00177aa:	68 1e 4a 02 c0       	push   0xc0024a1e
c00177af:	e8 02 86 ff ff       	call   c000fdb6 <KePanic(char const*)>
c00177b4:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00177bb:	83 c4 10             	add    esp,0x10
c00177be:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00177c5:	75 c8                	jne    c001778f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x169>
c00177c7:	fb                   	sti    
c00177c8:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00177cc:	eb 5a                	jmp    c0017828 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x202>
c00177ce:	50                   	push   eax
c00177cf:	0f b7 ff             	movzx  edi,di
c00177d2:	50                   	push   eax
c00177d3:	0f b7 f6             	movzx  esi,si
c00177d6:	57                   	push   edi
c00177d7:	56                   	push   esi
c00177d8:	e8 c1 fb ff ff       	call   c001739e <Vm::realToLinear(unsigned short, unsigned short)>
c00177dd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00177e0:	5a                   	pop    edx
c00177e1:	8d 74 24 20          	lea    esi,[esp+0x20]
c00177e5:	56                   	push   esi
c00177e6:	50                   	push   eax
c00177e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00177eb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00177ef:	55                   	push   ebp
c00177f0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00177f3:	83 c4 14             	add    esp,0x14
c00177f6:	55                   	push   ebp
c00177f7:	e8 ac 09 ff ff       	call   c00081a8 <File::close()>
c00177fc:	c6 05 89 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea89,0x0
c0017803:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001780a:	83 c4 10             	add    esp,0x10
c001780d:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017814:	75 01                	jne    c0017817 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1f1>
c0017816:	fb                   	sti    
c0017817:	83 ec 0c             	sub    esp,0xc
c001781a:	ff 35 8c ea 02 c0    	push   DWORD PTR ds:0xc002ea8c
c0017820:	e8 b3 f4 ff ff       	call   c0016cd8 <unblockTask(ThreadControlBlock*)>
c0017825:	83 c4 10             	add    esp,0x10
c0017828:	83 c4 2c             	add    esp,0x2c
c001782b:	88 d8                	mov    al,bl
c001782d:	5b                   	pop    ebx
c001782e:	5e                   	pop    esi
c001782f:	5f                   	pop    edi
c0017830:	5d                   	pop    ebp
c0017831:	c3                   	ret    

c0017832 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0017832:	57                   	push   edi
c0017833:	56                   	push   esi
c0017834:	53                   	push   ebx
c0017835:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017839:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001783d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017841:	83 e8 06             	sub    eax,0x6
c0017844:	0f b7 c0             	movzx  eax,ax
c0017847:	50                   	push   eax
c0017848:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001784d:	50                   	push   eax
c001784e:	e8 4b fb ff ff       	call   c001739e <Vm::realToLinear(unsigned short, unsigned short)>
c0017853:	5a                   	pop    edx
c0017854:	59                   	pop    ecx
c0017855:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0017858:	8d 51 fa             	lea    edx,[ecx-0x6]
c001785b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001785e:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017864:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0017867:	8d 51 02             	lea    edx,[ecx+0x2]
c001786a:	66 89 10             	mov    WORD PTR [eax],dx
c001786d:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0017871:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0017875:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0017879:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001787c:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017880:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017886:	89 f1                	mov    ecx,esi
c0017888:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c001788c:	89 f2                	mov    edx,esi
c001788e:	0f b6 d6             	movzx  edx,dh
c0017891:	0f b6 f1             	movzx  esi,cl
c0017894:	74 0a                	je     c00178a0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0017896:	c1 e2 08             	shl    edx,0x8
c0017899:	09 f2                	or     edx,esi
c001789b:	80 ce 02             	or     dh,0x2
c001789e:	eb 08                	jmp    c00178a8 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c00178a0:	c1 e2 08             	shl    edx,0x8
c00178a3:	09 f2                	or     edx,esi
c00178a5:	80 e6 fd             	and    dh,0xfd
c00178a8:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00178ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00178b1:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00178b5:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c00178bd:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c00178c0:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c00178c8:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00178cb:	5b                   	pop    ebx
c00178cc:	5e                   	pop    esi
c00178cd:	5f                   	pop    edi
c00178ce:	c3                   	ret    

c00178cf <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00178cf:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00178d4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00178d9:	c1 e0 04             	shl    eax,0x4
c00178dc:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00178df:	c3                   	ret    

c00178e0 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00178e0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00178e5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00178ea:	c1 e0 04             	shl    eax,0x4
c00178ed:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00178f1:	c3                   	ret    

c00178f2 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00178f2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00178f7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00178fc:	c1 e0 04             	shl    eax,0x4
c00178ff:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0017902:	c3                   	ret    

c0017903 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017903:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017908:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001790d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017911:	c1 e0 04             	shl    eax,0x4
c0017914:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0017917:	c3                   	ret    

c0017918 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017918:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001791d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017922:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017926:	c1 e0 04             	shl    eax,0x4
c0017929:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001792d:	c3                   	ret    

c001792e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001792e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017933:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017938:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001793c:	c1 e0 04             	shl    eax,0x4
c001793f:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0017942:	c3                   	ret    

c0017943 <Vm::faultHandler(regs*)>:
c0017943:	55                   	push   ebp
c0017944:	57                   	push   edi
c0017945:	56                   	push   esi
c0017946:	53                   	push   ebx
c0017947:	83 ec 2c             	sub    esp,0x2c
c001794a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001794e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017951:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0017955:	0f b7 f8             	movzx  edi,ax
c0017958:	0f b7 c0             	movzx  eax,ax
c001795b:	52                   	push   edx
c001795c:	50                   	push   eax
c001795d:	e8 3c fa ff ff       	call   c001739e <Vm::realToLinear(unsigned short, unsigned short)>
c0017962:	5a                   	pop    edx
c0017963:	59                   	pop    ecx
c0017964:	89 c1                	mov    ecx,eax
c0017966:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017969:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001796d:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0017972:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017976:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0017979:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001797d:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0017982:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017986:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001798a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001798e:	e8 0b fa ff ff       	call   c001739e <Vm::realToLinear(unsigned short, unsigned short)>
c0017993:	5e                   	pop    esi
c0017994:	be 06 00 00 00       	mov    esi,0x6
c0017999:	5d                   	pop    ebp
c001799a:	31 ed                	xor    ebp,ebp
c001799c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00179a1:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00179a4:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00179aa:	0f 84 74 02 00 00    	je     c0017c24 <Vm::faultHandler(regs*)+0x2e1>
c00179b0:	0f 87 94 00 00 00    	ja     c0017a4a <Vm::faultHandler(regs*)+0x107>
c00179b6:	83 fa 66             	cmp    edx,0x66
c00179b9:	0f 84 e2 01 00 00    	je     c0017ba1 <Vm::faultHandler(regs*)+0x25e>
c00179bf:	77 47                	ja     c0017a08 <Vm::faultHandler(regs*)+0xc5>
c00179c1:	83 fa 36             	cmp    edx,0x36
c00179c4:	0f 84 ca 01 00 00    	je     c0017b94 <Vm::faultHandler(regs*)+0x251>
c00179ca:	77 1a                	ja     c00179e6 <Vm::faultHandler(regs*)+0xa3>
c00179cc:	83 fa 26             	cmp    edx,0x26
c00179cf:	0f 84 98 01 00 00    	je     c0017b6d <Vm::faultHandler(regs*)+0x22a>
c00179d5:	83 fa 2e             	cmp    edx,0x2e
c00179d8:	0f 85 27 06 00 00    	jne    c0018005 <Vm::faultHandler(regs*)+0x6c2>
c00179de:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00179e1:	31 f6                	xor    esi,esi
c00179e3:	41                   	inc    ecx
c00179e4:	eb bb                	jmp    c00179a1 <Vm::faultHandler(regs*)+0x5e>
c00179e6:	83 fa 64             	cmp    edx,0x64
c00179e9:	0f 84 8b 01 00 00    	je     c0017b7a <Vm::faultHandler(regs*)+0x237>
c00179ef:	0f 87 92 01 00 00    	ja     c0017b87 <Vm::faultHandler(regs*)+0x244>
c00179f5:	83 fa 3e             	cmp    edx,0x3e
c00179f8:	0f 85 07 06 00 00    	jne    c0018005 <Vm::faultHandler(regs*)+0x6c2>
c00179fe:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017a01:	be 01 00 00 00       	mov    esi,0x1
c0017a06:	eb db                	jmp    c00179e3 <Vm::faultHandler(regs*)+0xa0>
c0017a08:	83 fa 6d             	cmp    edx,0x6d
c0017a0b:	0f 84 34 03 00 00    	je     c0017d45 <Vm::faultHandler(regs*)+0x402>
c0017a11:	77 17                	ja     c0017a2a <Vm::faultHandler(regs*)+0xe7>
c0017a13:	83 fa 67             	cmp    edx,0x67
c0017a16:	0f 84 92 01 00 00    	je     c0017bae <Vm::faultHandler(regs*)+0x26b>
c0017a1c:	83 fa 6c             	cmp    edx,0x6c
c0017a1f:	0f 84 b1 02 00 00    	je     c0017cd6 <Vm::faultHandler(regs*)+0x393>
c0017a25:	e9 db 05 00 00       	jmp    c0018005 <Vm::faultHandler(regs*)+0x6c2>
c0017a2a:	83 fa 6f             	cmp    edx,0x6f
c0017a2d:	0f 84 40 04 00 00    	je     c0017e73 <Vm::faultHandler(regs*)+0x530>
c0017a33:	0f 82 a2 03 00 00    	jb     c0017ddb <Vm::faultHandler(regs*)+0x498>
c0017a39:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0017a3f:	0f 84 76 01 00 00    	je     c0017bbb <Vm::faultHandler(regs*)+0x278>
c0017a45:	e9 bb 05 00 00       	jmp    c0018005 <Vm::faultHandler(regs*)+0x6c2>
c0017a4a:	81 fa ec 00 00 00    	cmp    edx,0xec
c0017a50:	0f 84 57 05 00 00    	je     c0017fad <Vm::faultHandler(regs*)+0x66a>
c0017a56:	0f 87 a9 00 00 00    	ja     c0017b05 <Vm::faultHandler(regs*)+0x1c2>
c0017a5c:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0017a62:	0f 84 d6 04 00 00    	je     c0017f3e <Vm::faultHandler(regs*)+0x5fb>
c0017a68:	77 78                	ja     c0017ae2 <Vm::faultHandler(regs*)+0x19f>
c0017a6a:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0017a70:	0f 84 0e 02 00 00    	je     c0017c84 <Vm::faultHandler(regs*)+0x341>
c0017a76:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0017a7c:	0f 85 83 05 00 00    	jne    c0018005 <Vm::faultHandler(regs*)+0x6c2>
c0017a82:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0017a86:	89 d1                	mov    ecx,edx
c0017a88:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0017a8b:	c1 e1 08             	shl    ecx,0x8
c0017a8e:	09 ca                	or     edx,ecx
c0017a90:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017a93:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0017a97:	89 d1                	mov    ecx,edx
c0017a99:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0017a9d:	c1 e1 08             	shl    ecx,0x8
c0017aa0:	09 ca                	or     edx,ecx
c0017aa2:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0017aa5:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0017aa9:	89 d1                	mov    ecx,edx
c0017aab:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0017aaf:	c1 e1 08             	shl    ecx,0x8
c0017ab2:	09 ca                	or     edx,ecx
c0017ab4:	81 ca 00 02 02 00    	or     edx,0x20200
c0017aba:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017abd:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0017ac1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017ac7:	d1 e8                	shr    eax,1
c0017ac9:	83 e0 01             	and    eax,0x1
c0017acc:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017acf:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017ad2:	83 c0 06             	add    eax,0x6
c0017ad5:	25 ff ff 00 00       	and    eax,0xffff
c0017ada:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017add:	e9 1f 05 00 00       	jmp    c0018001 <Vm::faultHandler(regs*)+0x6be>
c0017ae2:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0017ae8:	0f 84 95 04 00 00    	je     c0017f83 <Vm::faultHandler(regs*)+0x640>
c0017aee:	0f 82 66 04 00 00    	jb     c0017f5a <Vm::faultHandler(regs*)+0x617>
c0017af4:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0017afa:	0f 84 9a 04 00 00    	je     c0017f9a <Vm::faultHandler(regs*)+0x657>
c0017b00:	e9 00 05 00 00       	jmp    c0018005 <Vm::faultHandler(regs*)+0x6c2>
c0017b05:	81 fa ef 00 00 00    	cmp    edx,0xef
c0017b0b:	0f 84 dd 04 00 00    	je     c0017fee <Vm::faultHandler(regs*)+0x6ab>
c0017b11:	77 2e                	ja     c0017b41 <Vm::faultHandler(regs*)+0x1fe>
c0017b13:	81 fa ed 00 00 00    	cmp    edx,0xed
c0017b19:	0f 84 aa 04 00 00    	je     c0017fc9 <Vm::faultHandler(regs*)+0x686>
c0017b1f:	81 fa ee 00 00 00    	cmp    edx,0xee
c0017b25:	0f 85 da 04 00 00    	jne    c0018005 <Vm::faultHandler(regs*)+0x6c2>
c0017b2b:	50                   	push   eax
c0017b2c:	50                   	push   eax
c0017b2d:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017b31:	50                   	push   eax
c0017b32:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017b36:	50                   	push   eax
c0017b37:	e8 2c f8 ff ff       	call   c0017368 <Vm::outbv(unsigned short, unsigned char)>
c0017b3c:	e9 a5 04 00 00       	jmp    c0017fe6 <Vm::faultHandler(regs*)+0x6a3>
c0017b41:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0017b47:	0f 84 6d 01 00 00    	je     c0017cba <Vm::faultHandler(regs*)+0x377>
c0017b4d:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0017b53:	0f 84 6f 01 00 00    	je     c0017cc8 <Vm::faultHandler(regs*)+0x385>
c0017b59:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0017b5f:	0f 85 a0 04 00 00    	jne    c0018005 <Vm::faultHandler(regs*)+0x6c2>
c0017b65:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017b68:	e9 76 fe ff ff       	jmp    c00179e3 <Vm::faultHandler(regs*)+0xa0>
c0017b6d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017b70:	be 02 00 00 00       	mov    esi,0x2
c0017b75:	e9 69 fe ff ff       	jmp    c00179e3 <Vm::faultHandler(regs*)+0xa0>
c0017b7a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017b7d:	be 03 00 00 00       	mov    esi,0x3
c0017b82:	e9 5c fe ff ff       	jmp    c00179e3 <Vm::faultHandler(regs*)+0xa0>
c0017b87:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017b8a:	be 04 00 00 00       	mov    esi,0x4
c0017b8f:	e9 4f fe ff ff       	jmp    c00179e3 <Vm::faultHandler(regs*)+0xa0>
c0017b94:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017b97:	be 05 00 00 00       	mov    esi,0x5
c0017b9c:	e9 42 fe ff ff       	jmp    c00179e3 <Vm::faultHandler(regs*)+0xa0>
c0017ba1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017ba4:	bd 01 00 00 00       	mov    ebp,0x1
c0017ba9:	e9 35 fe ff ff       	jmp    c00179e3 <Vm::faultHandler(regs*)+0xa0>
c0017bae:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017bb1:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0017bb6:	e9 28 fe ff ff       	jmp    c00179e3 <Vm::faultHandler(regs*)+0xa0>
c0017bbb:	83 e5 01             	and    ebp,0x1
c0017bbe:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017bc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017bc5:	74 30                	je     c0017bf7 <Vm::faultHandler(regs*)+0x2b4>
c0017bc7:	83 e9 04             	sub    ecx,0x4
c0017bca:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017bd0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017bd6:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017bd9:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017bdc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017be2:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017be6:	0f 84 12 04 00 00    	je     c0017ffe <Vm::faultHandler(regs*)+0x6bb>
c0017bec:	80 ce 02             	or     dh,0x2
c0017bef:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017bf2:	e9 07 04 00 00       	jmp    c0017ffe <Vm::faultHandler(regs*)+0x6bb>
c0017bf7:	83 e9 02             	sub    ecx,0x2
c0017bfa:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017c00:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017c03:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017c07:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017c0d:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017c11:	74 05                	je     c0017c18 <Vm::faultHandler(regs*)+0x2d5>
c0017c13:	80 ce 02             	or     dh,0x2
c0017c16:	eb 03                	jmp    c0017c1b <Vm::faultHandler(regs*)+0x2d8>
c0017c18:	80 e6 fd             	and    dh,0xfd
c0017c1b:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017c1f:	e9 da 03 00 00       	jmp    c0017ffe <Vm::faultHandler(regs*)+0x6bb>
c0017c24:	83 e5 01             	and    ebp,0x1
c0017c27:	74 2a                	je     c0017c53 <Vm::faultHandler(regs*)+0x310>
c0017c29:	8b 10                	mov    edx,DWORD PTR [eax]
c0017c2b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017c31:	81 ca 00 02 02 00    	or     edx,0x20200
c0017c37:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017c3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c3c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017c42:	c1 e8 09             	shr    eax,0x9
c0017c45:	83 e0 01             	and    eax,0x1
c0017c48:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017c4b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017c4e:	83 c0 04             	add    eax,0x4
c0017c51:	eb 24                	jmp    c0017c77 <Vm::faultHandler(regs*)+0x334>
c0017c53:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0017c56:	81 ca 00 02 02 00    	or     edx,0x20200
c0017c5c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017c5f:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0017c62:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017c68:	c1 e8 09             	shr    eax,0x9
c0017c6b:	83 e0 01             	and    eax,0x1
c0017c6e:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017c71:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017c74:	83 c0 02             	add    eax,0x2
c0017c77:	25 ff ff 00 00       	and    eax,0xffff
c0017c7c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017c7f:	e9 7a 03 00 00       	jmp    c0017ffe <Vm::faultHandler(regs*)+0x6bb>
c0017c84:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017c88:	3d ee 00 00 00       	cmp    eax,0xee
c0017c8d:	75 10                	jne    c0017c9f <Vm::faultHandler(regs*)+0x35c>
c0017c8f:	83 ec 0c             	sub    esp,0xc
c0017c92:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0017c95:	e8 6e f7 ff ff       	call   c0017408 <Vm::mainloop3(unsigned long)>
c0017c9a:	e9 4a 03 00 00       	jmp    c0017fe9 <Vm::faultHandler(regs*)+0x6a6>
c0017c9f:	83 ec 0c             	sub    esp,0xc
c0017ca2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017ca6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017caa:	51                   	push   ecx
c0017cab:	50                   	push   eax
c0017cac:	53                   	push   ebx
c0017cad:	e8 80 fb ff ff       	call   c0017832 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0017cb2:	83 c4 20             	add    esp,0x20
c0017cb5:	e9 47 03 00 00       	jmp    c0018001 <Vm::faultHandler(regs*)+0x6be>
c0017cba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017cbf:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017cc3:	e9 36 03 00 00       	jmp    c0017ffe <Vm::faultHandler(regs*)+0x6bb>
c0017cc8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ccd:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0017cd1:	e9 28 03 00 00       	jmp    c0017ffe <Vm::faultHandler(regs*)+0x6bb>
c0017cd6:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017cdb:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017cde:	74 2b                	je     c0017d0b <Vm::faultHandler(regs*)+0x3c8>
c0017ce0:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017ce7:	76 22                	jbe    c0017d0b <Vm::faultHandler(regs*)+0x3c8>
c0017ce9:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017ced:	50                   	push   eax
c0017cee:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017cf2:	50                   	push   eax
c0017cf3:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017cf7:	50                   	push   eax
c0017cf8:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017cfc:	50                   	push   eax
c0017cfd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017d01:	50                   	push   eax
c0017d02:	6a 6c                	push   0x6c
c0017d04:	6a 6c                	push   0x6c
c0017d06:	e9 c0 01 00 00       	jmp    c0017ecb <Vm::faultHandler(regs*)+0x588>
c0017d0b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017d0f:	83 ec 0c             	sub    esp,0xc
c0017d12:	0f b7 f6             	movzx  esi,si
c0017d15:	50                   	push   eax
c0017d16:	e8 3a f6 ff ff       	call   c0017355 <Vm::inbv(unsigned short)>
c0017d1b:	83 c4 0c             	add    esp,0xc
c0017d1e:	0f b6 c0             	movzx  eax,al
c0017d21:	50                   	push   eax
c0017d22:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0017d26:	50                   	push   eax
c0017d27:	56                   	push   esi
c0017d28:	e8 d6 fb ff ff       	call   c0017903 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0017d2d:	83 c4 10             	add    esp,0x10
c0017d30:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017d33:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017d37:	74 03                	je     c0017d3c <Vm::faultHandler(regs*)+0x3f9>
c0017d39:	48                   	dec    eax
c0017d3a:	eb 01                	jmp    c0017d3d <Vm::faultHandler(regs*)+0x3fa>
c0017d3c:	40                   	inc    eax
c0017d3d:	0f b7 c0             	movzx  eax,ax
c0017d40:	e9 8e 00 00 00       	jmp    c0017dd3 <Vm::faultHandler(regs*)+0x490>
c0017d45:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017d4a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017d4d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017d50:	74 29                	je     c0017d7b <Vm::faultHandler(regs*)+0x438>
c0017d52:	3d ff ff 00 00       	cmp    eax,0xffff
c0017d57:	76 22                	jbe    c0017d7b <Vm::faultHandler(regs*)+0x438>
c0017d59:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017d5d:	50                   	push   eax
c0017d5e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017d62:	50                   	push   eax
c0017d63:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017d67:	50                   	push   eax
c0017d68:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017d6c:	50                   	push   eax
c0017d6d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017d71:	50                   	push   eax
c0017d72:	6a 6d                	push   0x6d
c0017d74:	6a 6d                	push   0x6d
c0017d76:	e9 50 01 00 00       	jmp    c0017ecb <Vm::faultHandler(regs*)+0x588>
c0017d7b:	83 e5 01             	and    ebp,0x1
c0017d7e:	0f b7 c8             	movzx  ecx,ax
c0017d81:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017d84:	0f b7 f6             	movzx  esi,si
c0017d87:	74 1e                	je     c0017da7 <Vm::faultHandler(regs*)+0x464>
c0017d89:	ed                   	in     eax,dx
c0017d8a:	55                   	push   ebp
c0017d8b:	50                   	push   eax
c0017d8c:	51                   	push   ecx
c0017d8d:	56                   	push   esi
c0017d8e:	e8 9b fb ff ff       	call   c001792e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017d93:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017d96:	83 c4 10             	add    esp,0x10
c0017d99:	8d 50 04             	lea    edx,[eax+0x4]
c0017d9c:	83 e8 04             	sub    eax,0x4
c0017d9f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017da5:	eb 20                	jmp    c0017dc7 <Vm::faultHandler(regs*)+0x484>
c0017da7:	66 ed                	in     ax,dx
c0017da9:	57                   	push   edi
c0017daa:	0f b7 c0             	movzx  eax,ax
c0017dad:	50                   	push   eax
c0017dae:	51                   	push   ecx
c0017daf:	56                   	push   esi
c0017db0:	e8 63 fb ff ff       	call   c0017918 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0017db5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017db8:	83 c4 10             	add    esp,0x10
c0017dbb:	8d 50 02             	lea    edx,[eax+0x2]
c0017dbe:	83 e8 02             	sub    eax,0x2
c0017dc1:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017dc7:	25 ff ff 00 00       	and    eax,0xffff
c0017dcc:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017dd0:	0f 44 c2             	cmove  eax,edx
c0017dd3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017dd6:	e9 23 02 00 00       	jmp    c0017ffe <Vm::faultHandler(regs*)+0x6bb>
c0017ddb:	8d 46 ff             	lea    eax,[esi-0x1]
c0017dde:	0f b6 f0             	movzx  esi,al
c0017de1:	83 fe 05             	cmp    esi,0x5
c0017de4:	77 23                	ja     c0017e09 <Vm::faultHandler(regs*)+0x4c6>
c0017de6:	ff 24 b5 94 4a 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdb56c]
c0017ded:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0017df2:	eb 15                	jmp    c0017e09 <Vm::faultHandler(regs*)+0x4c6>
c0017df4:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017df8:	eb 0f                	jmp    c0017e09 <Vm::faultHandler(regs*)+0x4c6>
c0017dfa:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0017dfe:	eb 09                	jmp    c0017e09 <Vm::faultHandler(regs*)+0x4c6>
c0017e00:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017e04:	eb 03                	jmp    c0017e09 <Vm::faultHandler(regs*)+0x4c6>
c0017e06:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0017e09:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017e0e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017e11:	74 29                	je     c0017e3c <Vm::faultHandler(regs*)+0x4f9>
c0017e13:	3d ff ff 00 00       	cmp    eax,0xffff
c0017e18:	76 22                	jbe    c0017e3c <Vm::faultHandler(regs*)+0x4f9>
c0017e1a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017e1e:	50                   	push   eax
c0017e1f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017e23:	50                   	push   eax
c0017e24:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017e28:	50                   	push   eax
c0017e29:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017e2d:	50                   	push   eax
c0017e2e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017e32:	50                   	push   eax
c0017e33:	6a 6e                	push   0x6e
c0017e35:	6a 6e                	push   0x6e
c0017e37:	e9 8f 00 00 00       	jmp    c0017ecb <Vm::faultHandler(regs*)+0x588>
c0017e3c:	52                   	push   edx
c0017e3d:	0f b7 c0             	movzx  eax,ax
c0017e40:	52                   	push   edx
c0017e41:	50                   	push   eax
c0017e42:	57                   	push   edi
c0017e43:	e8 87 fa ff ff       	call   c00178cf <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017e48:	59                   	pop    ecx
c0017e49:	5e                   	pop    esi
c0017e4a:	0f b6 c0             	movzx  eax,al
c0017e4d:	50                   	push   eax
c0017e4e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017e52:	50                   	push   eax
c0017e53:	e8 10 f5 ff ff       	call   c0017368 <Vm::outbv(unsigned short, unsigned char)>
c0017e58:	83 c4 10             	add    esp,0x10
c0017e5b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017e5e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017e62:	74 03                	je     c0017e67 <Vm::faultHandler(regs*)+0x524>
c0017e64:	48                   	dec    eax
c0017e65:	eb 01                	jmp    c0017e68 <Vm::faultHandler(regs*)+0x525>
c0017e67:	40                   	inc    eax
c0017e68:	0f b7 c0             	movzx  eax,ax
c0017e6b:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017e6e:	e9 8b 01 00 00       	jmp    c0017ffe <Vm::faultHandler(regs*)+0x6bb>
c0017e73:	8d 46 ff             	lea    eax,[esi-0x1]
c0017e76:	0f b6 f0             	movzx  esi,al
c0017e79:	83 fe 05             	cmp    esi,0x5
c0017e7c:	77 1e                	ja     c0017e9c <Vm::faultHandler(regs*)+0x559>
c0017e7e:	ff 24 b5 ac 4a 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdb554]
c0017e85:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017e89:	eb 11                	jmp    c0017e9c <Vm::faultHandler(regs*)+0x559>
c0017e8b:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017e8e:	eb 0c                	jmp    c0017e9c <Vm::faultHandler(regs*)+0x559>
c0017e90:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0017e93:	eb 07                	jmp    c0017e9c <Vm::faultHandler(regs*)+0x559>
c0017e95:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0017e98:	eb 02                	jmp    c0017e9c <Vm::faultHandler(regs*)+0x559>
c0017e9a:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017e9c:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017ea1:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017ea4:	74 37                	je     c0017edd <Vm::faultHandler(regs*)+0x59a>
c0017ea6:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017eac:	76 2f                	jbe    c0017edd <Vm::faultHandler(regs*)+0x59a>
c0017eae:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017eb2:	50                   	push   eax
c0017eb3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017eb7:	50                   	push   eax
c0017eb8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017ebc:	50                   	push   eax
c0017ebd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017ec1:	50                   	push   eax
c0017ec2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017ec6:	50                   	push   eax
c0017ec7:	6a 6f                	push   0x6f
c0017ec9:	6a 6f                	push   0x6f
c0017ecb:	68 37 4a 02 c0       	push   0xc0024a37
c0017ed0:	e8 79 f0 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017ed5:	83 c4 20             	add    esp,0x20
c0017ed8:	e9 86 01 00 00       	jmp    c0018063 <Vm::faultHandler(regs*)+0x720>
c0017edd:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017ee0:	0f b7 d7             	movzx  edx,di
c0017ee3:	0f b7 c6             	movzx  eax,si
c0017ee6:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017ee9:	81 e1 00 04 00 00    	and    ecx,0x400
c0017eef:	83 e5 01             	and    ebp,0x1
c0017ef2:	74 1c                	je     c0017f10 <Vm::faultHandler(regs*)+0x5cd>
c0017ef4:	55                   	push   ebp
c0017ef5:	55                   	push   ebp
c0017ef6:	50                   	push   eax
c0017ef7:	52                   	push   edx
c0017ef8:	e8 f5 f9 ff ff       	call   c00178f2 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0017efd:	83 c4 10             	add    esp,0x10
c0017f00:	89 fa                	mov    edx,edi
c0017f02:	ef                   	out    dx,eax
c0017f03:	8d 46 04             	lea    eax,[esi+0x4]
c0017f06:	83 ee 04             	sub    esi,0x4
c0017f09:	25 ff ff 00 00       	and    eax,0xffff
c0017f0e:	eb 1b                	jmp    c0017f2b <Vm::faultHandler(regs*)+0x5e8>
c0017f10:	55                   	push   ebp
c0017f11:	55                   	push   ebp
c0017f12:	50                   	push   eax
c0017f13:	52                   	push   edx
c0017f14:	e8 c7 f9 ff ff       	call   c00178e0 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0017f19:	83 c4 10             	add    esp,0x10
c0017f1c:	89 fa                	mov    edx,edi
c0017f1e:	66 ef                	out    dx,ax
c0017f20:	8d 46 02             	lea    eax,[esi+0x2]
c0017f23:	83 ee 02             	sub    esi,0x2
c0017f26:	25 ff ff 00 00       	and    eax,0xffff
c0017f2b:	81 e6 ff ff 00 00    	and    esi,0xffff
c0017f31:	85 c9                	test   ecx,ecx
c0017f33:	0f 44 f0             	cmove  esi,eax
c0017f36:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017f39:	e9 c0 00 00 00       	jmp    c0017ffe <Vm::faultHandler(regs*)+0x6bb>
c0017f3e:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017f45:	83 ec 0c             	sub    esp,0xc
c0017f48:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017f4c:	50                   	push   eax
c0017f4d:	e8 03 f4 ff ff       	call   c0017355 <Vm::inbv(unsigned short)>
c0017f52:	0f b6 c0             	movzx  eax,al
c0017f55:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017f58:	eb 3a                	jmp    c0017f94 <Vm::faultHandler(regs*)+0x651>
c0017f5a:	83 e5 01             	and    ebp,0x1
c0017f5d:	74 07                	je     c0017f66 <Vm::faultHandler(regs*)+0x623>
c0017f5f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017f63:	ed                   	in     eax,dx
c0017f64:	eb 14                	jmp    c0017f7a <Vm::faultHandler(regs*)+0x637>
c0017f66:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017f69:	66 31 f6             	xor    si,si
c0017f6c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017f6f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017f73:	66 ed                	in     ax,dx
c0017f75:	0f b7 c0             	movzx  eax,ax
c0017f78:	09 f0                	or     eax,esi
c0017f7a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017f7d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017f81:	eb 7e                	jmp    c0018001 <Vm::faultHandler(regs*)+0x6be>
c0017f83:	52                   	push   edx
c0017f84:	52                   	push   edx
c0017f85:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017f89:	50                   	push   eax
c0017f8a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017f8e:	50                   	push   eax
c0017f8f:	e8 d4 f3 ff ff       	call   c0017368 <Vm::outbv(unsigned short, unsigned char)>
c0017f94:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017f98:	eb 4f                	jmp    c0017fe9 <Vm::faultHandler(regs*)+0x6a6>
c0017f9a:	83 e5 01             	and    ebp,0x1
c0017f9d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017fa0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017fa4:	74 03                	je     c0017fa9 <Vm::faultHandler(regs*)+0x666>
c0017fa6:	ef                   	out    dx,eax
c0017fa7:	eb d4                	jmp    c0017f7d <Vm::faultHandler(regs*)+0x63a>
c0017fa9:	66 ef                	out    dx,ax
c0017fab:	eb d0                	jmp    c0017f7d <Vm::faultHandler(regs*)+0x63a>
c0017fad:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017fb1:	83 ec 0c             	sub    esp,0xc
c0017fb4:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017fbb:	50                   	push   eax
c0017fbc:	e8 94 f3 ff ff       	call   c0017355 <Vm::inbv(unsigned short)>
c0017fc1:	0f b6 c0             	movzx  eax,al
c0017fc4:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017fc7:	eb 1d                	jmp    c0017fe6 <Vm::faultHandler(regs*)+0x6a3>
c0017fc9:	83 e5 01             	and    ebp,0x1
c0017fcc:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017fcf:	74 03                	je     c0017fd4 <Vm::faultHandler(regs*)+0x691>
c0017fd1:	ed                   	in     eax,dx
c0017fd2:	eb 0d                	jmp    c0017fe1 <Vm::faultHandler(regs*)+0x69e>
c0017fd4:	66 ed                	in     ax,dx
c0017fd6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017fd9:	0f b7 c0             	movzx  eax,ax
c0017fdc:	66 31 d2             	xor    dx,dx
c0017fdf:	09 d0                	or     eax,edx
c0017fe1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017fe4:	eb 18                	jmp    c0017ffe <Vm::faultHandler(regs*)+0x6bb>
c0017fe6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017fe9:	83 c4 10             	add    esp,0x10
c0017fec:	eb 13                	jmp    c0018001 <Vm::faultHandler(regs*)+0x6be>
c0017fee:	83 e5 01             	and    ebp,0x1
c0017ff1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017ff4:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017ff7:	74 03                	je     c0017ffc <Vm::faultHandler(regs*)+0x6b9>
c0017ff9:	ef                   	out    dx,eax
c0017ffa:	eb 02                	jmp    c0017ffe <Vm::faultHandler(regs*)+0x6bb>
c0017ffc:	66 ef                	out    dx,ax
c0017ffe:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018001:	b0 01                	mov    al,0x1
c0018003:	eb 60                	jmp    c0018065 <Vm::faultHandler(regs*)+0x722>
c0018005:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018009:	50                   	push   eax
c001800a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001800e:	50                   	push   eax
c001800f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018013:	50                   	push   eax
c0018014:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018018:	50                   	push   eax
c0018019:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001801d:	50                   	push   eax
c001801e:	52                   	push   edx
c001801f:	52                   	push   edx
c0018020:	68 64 4a 02 c0       	push   0xc0024a64
c0018025:	e8 24 ef fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001802a:	83 c4 20             	add    esp,0x20
c001802d:	83 ec 0c             	sub    esp,0xc
c0018030:	6a 60                	push   0x60
c0018032:	e8 1e f3 ff ff       	call   c0017355 <Vm::inbv(unsigned short)>
c0018037:	83 c4 10             	add    esp,0x10
c001803a:	0f b6 d0             	movzx  edx,al
c001803d:	83 fa 1c             	cmp    edx,0x1c
c0018040:	74 05                	je     c0018047 <Vm::faultHandler(regs*)+0x704>
c0018042:	83 fa 5a             	cmp    edx,0x5a
c0018045:	75 e6                	jne    c001802d <Vm::faultHandler(regs*)+0x6ea>
c0018047:	0f b6 c0             	movzx  eax,al
c001804a:	83 f8 1c             	cmp    eax,0x1c
c001804d:	74 05                	je     c0018054 <Vm::faultHandler(regs*)+0x711>
c001804f:	83 f8 5a             	cmp    eax,0x5a
c0018052:	75 0f                	jne    c0018063 <Vm::faultHandler(regs*)+0x720>
c0018054:	83 ec 0c             	sub    esp,0xc
c0018057:	6a 60                	push   0x60
c0018059:	e8 f7 f2 ff ff       	call   c0017355 <Vm::inbv(unsigned short)>
c001805e:	83 c4 10             	add    esp,0x10
c0018061:	eb e4                	jmp    c0018047 <Vm::faultHandler(regs*)+0x704>
c0018063:	31 c0                	xor    eax,eax
c0018065:	83 c4 2c             	add    esp,0x2c
c0018068:	5b                   	pop    ebx
c0018069:	5e                   	pop    esi
c001806a:	5f                   	pop    edi
c001806b:	5d                   	pop    ebp
c001806c:	c3                   	ret    
c001806d:	90                   	nop

c001806e <noCopro(unsigned long)>:
c001806e:	c3                   	ret    
c001806f:	90                   	nop

c0018070 <CPU::close(int, int, void*)>:
c0018070:	31 c0                	xor    eax,eax
c0018072:	c3                   	ret    

c0018073 <x86ReadCMOS(unsigned char)>:
c0018073:	83 ec 14             	sub    esp,0x14
c0018076:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001807a:	88 04 24             	mov    BYTE PTR [esp],al
c001807d:	a0 ec ea 02 c0       	mov    al,ds:0xc002eaec
c0018082:	0f b6 c0             	movzx  eax,al
c0018085:	85 c0                	test   eax,eax
c0018087:	74 04                	je     c001808d <x86ReadCMOS(unsigned char)+0x1a>
c0018089:	b2 00                	mov    dl,0x0
c001808b:	eb 02                	jmp    c001808f <x86ReadCMOS(unsigned char)+0x1c>
c001808d:	b2 80                	mov    dl,0x80
c001808f:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018092:	09 d0                	or     eax,edx
c0018094:	0f b6 c0             	movzx  eax,al
c0018097:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c001809e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00180a2:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00180a6:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00180ab:	ee                   	out    dx,al
c00180ac:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c00180b3:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00180b8:	89 c2                	mov    edx,eax
c00180ba:	ec                   	in     al,dx
c00180bb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00180bf:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00180c3:	83 c4 14             	add    esp,0x14
c00180c6:	c3                   	ret    

c00180c7 <x86WriteCMOS(unsigned char, unsigned char)>:
c00180c7:	83 ec 18             	sub    esp,0x18
c00180ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00180ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00180d2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00180d6:	88 d0                	mov    al,dl
c00180d8:	88 04 24             	mov    BYTE PTR [esp],al
c00180db:	a0 ec ea 02 c0       	mov    al,ds:0xc002eaec
c00180e0:	0f b6 c0             	movzx  eax,al
c00180e3:	85 c0                	test   eax,eax
c00180e5:	74 04                	je     c00180eb <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c00180e7:	b2 00                	mov    dl,0x0
c00180e9:	eb 02                	jmp    c00180ed <x86WriteCMOS(unsigned char, unsigned char)+0x26>
c00180eb:	b2 80                	mov    dl,0x80
c00180ed:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00180f1:	09 d0                	or     eax,edx
c00180f3:	0f b6 c0             	movzx  eax,al
c00180f6:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c00180fd:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018101:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018105:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c001810a:	ee                   	out    dx,al
c001810b:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001810f:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0018116:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001811a:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c001811e:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0018123:	ee                   	out    dx,al
c0018124:	90                   	nop
c0018125:	83 c4 18             	add    esp,0x18
c0018128:	c3                   	ret    

c0018129 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0018129:	60                   	pusha  
c001812a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001812e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018132:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018136:	9c                   	pushf  
c0018137:	fa                   	cli    
c0018138:	0f 09                	wbinvd 
c001813a:	0f 30                	wrmsr  
c001813c:	9d                   	popf   
c001813d:	89 c2                	mov    edx,eax
c001813f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018143:	89 10                	mov    DWORD PTR [eax],edx
c0018145:	61                   	popa   
c0018146:	90                   	nop
c0018147:	c3                   	ret    

c0018148 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0018148:	60                   	pusha  
c0018149:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001814d:	89 c1                	mov    ecx,eax
c001814f:	9c                   	pushf  
c0018150:	fa                   	cli    
c0018151:	0f 09                	wbinvd 
c0018153:	31 c0                	xor    eax,eax
c0018155:	31 d2                	xor    edx,edx
c0018157:	0f 32                	rdmsr  
c0018159:	9d                   	popf   
c001815a:	89 c2                	mov    edx,eax
c001815c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018160:	89 10                	mov    DWORD PTR [eax],edx
c0018162:	61                   	popa   
c0018163:	90                   	nop
c0018164:	c3                   	ret    

c0018165 <AMD_K6_writeback(int, int, int)>:
c0018165:	83 ec 20             	sub    esp,0x20
c0018168:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c001816d:	c1 e8 14             	shr    eax,0x14
c0018170:	c1 e8 02             	shr    eax,0x2
c0018173:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018177:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c001817c:	0f 85 9e 00 00 00    	jne    c0018220 <AMD_K6_writeback(int, int, int)+0xbb>
c0018182:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018186:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001818a:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c001818f:	75 19                	jne    c00181aa <AMD_K6_writeback(int, int, int)+0x45>
c0018191:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0018196:	7f 0a                	jg     c00181a2 <AMD_K6_writeback(int, int, int)+0x3d>
c0018198:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c00181a0:	eb 08                	jmp    c00181aa <AMD_K6_writeback(int, int, int)+0x45>
c00181a2:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c00181aa:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c00181af:	7c 6e                	jl     c001821f <AMD_K6_writeback(int, int, int)+0xba>
c00181b1:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c00181b6:	7e 09                	jle    c00181c1 <AMD_K6_writeback(int, int, int)+0x5c>
c00181b8:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c00181bd:	74 36                	je     c00181f5 <AMD_K6_writeback(int, int, int)+0x90>
c00181bf:	eb 5e                	jmp    c001821f <AMD_K6_writeback(int, int, int)+0xba>
c00181c1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00181c5:	50                   	push   eax
c00181c6:	68 82 00 00 c0       	push   0xc0000082
c00181cb:	e8 78 ff ff ff       	call   c0018148 <AMD_K6_read_msr(unsigned int, REGS*)>
c00181d0:	83 c4 08             	add    esp,0x8
c00181d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00181d7:	d1 e0                	shl    eax,1
c00181d9:	83 e0 7f             	and    eax,0x7f
c00181dc:	89 c2                	mov    edx,eax
c00181de:	8d 44 24 08          	lea    eax,[esp+0x8]
c00181e2:	50                   	push   eax
c00181e3:	6a 00                	push   0x0
c00181e5:	52                   	push   edx
c00181e6:	68 82 00 00 c0       	push   0xc0000082
c00181eb:	e8 39 ff ff ff       	call   c0018129 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c00181f0:	83 c4 10             	add    esp,0x10
c00181f3:	eb 2b                	jmp    c0018220 <AMD_K6_writeback(int, int, int)+0xbb>
c00181f5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00181f9:	50                   	push   eax
c00181fa:	68 82 00 00 c0       	push   0xc0000082
c00181ff:	e8 44 ff ff ff       	call   c0018148 <AMD_K6_read_msr(unsigned int, REGS*)>
c0018204:	83 c4 08             	add    esp,0x8
c0018207:	8d 44 24 08          	lea    eax,[esp+0x8]
c001820b:	50                   	push   eax
c001820c:	6a 00                	push   0x0
c001820e:	6a 00                	push   0x0
c0018210:	68 82 00 00 c0       	push   0xc0000082
c0018215:	e8 0f ff ff ff       	call   c0018129 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c001821a:	83 c4 10             	add    esp,0x10
c001821d:	eb 01                	jmp    c0018220 <AMD_K6_writeback(int, int, int)+0xbb>
c001821f:	90                   	nop
c0018220:	90                   	nop
c0018221:	83 c4 20             	add    esp,0x20
c0018224:	c3                   	ret    

c0018225 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018225:	56                   	push   esi
c0018226:	53                   	push   ebx
c0018227:	a1 00 64 02 c0       	mov    eax,ds:0xc0026400
c001822c:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0018230:	75 32                	jne    c0018264 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018232:	8b 15 e0 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eae0
c0018238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001823c:	89 10                	mov    DWORD PTR [eax],edx
c001823e:	8b 15 dc ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eadc
c0018244:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018248:	89 10                	mov    DWORD PTR [eax],edx
c001824a:	8b 15 d8 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ead8
c0018250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018254:	89 10                	mov    DWORD PTR [eax],edx
c0018256:	8b 15 d4 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ead4
c001825c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018260:	89 10                	mov    DWORD PTR [eax],edx
c0018262:	eb 5c                	jmp    c00182c0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0018264:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018268:	ba 00 00 00 00       	mov    edx,0x0
c001826d:	89 d1                	mov    ecx,edx
c001826f:	0f a2                	cpuid  
c0018271:	89 c6                	mov    esi,eax
c0018273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018277:	89 30                	mov    DWORD PTR [eax],esi
c0018279:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001827d:	89 18                	mov    DWORD PTR [eax],ebx
c001827f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018283:	89 08                	mov    DWORD PTR [eax],ecx
c0018285:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018289:	89 10                	mov    DWORD PTR [eax],edx
c001828b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001828f:	a3 00 64 02 c0       	mov    ds:0xc0026400,eax
c0018294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018298:	8b 00                	mov    eax,DWORD PTR [eax]
c001829a:	a3 e0 ea 02 c0       	mov    ds:0xc002eae0,eax
c001829f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00182a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00182a5:	a3 dc ea 02 c0       	mov    ds:0xc002eadc,eax
c00182aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00182ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00182b0:	a3 d8 ea 02 c0       	mov    ds:0xc002ead8,eax
c00182b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00182b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00182bb:	a3 d4 ea 02 c0       	mov    ds:0xc002ead4,eax
c00182c0:	5b                   	pop    ebx
c00182c1:	5e                   	pop    esi
c00182c2:	c3                   	ret    

c00182c3 <cpuidCheckEDX(unsigned int)>:
c00182c3:	83 ec 10             	sub    esp,0x10
c00182c6:	89 e0                	mov    eax,esp
c00182c8:	50                   	push   eax
c00182c9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00182cd:	50                   	push   eax
c00182ce:	8d 44 24 10          	lea    eax,[esp+0x10]
c00182d2:	50                   	push   eax
c00182d3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00182d7:	50                   	push   eax
c00182d8:	6a 01                	push   0x1
c00182da:	e8 46 ff ff ff       	call   c0018225 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00182df:	83 c4 14             	add    esp,0x14
c00182e2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00182e5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00182e9:	0f 95 c0             	setne  al
c00182ec:	83 c4 10             	add    esp,0x10
c00182ef:	c3                   	ret    

c00182f0 <cpuidCheckECX(unsigned int)>:
c00182f0:	83 ec 10             	sub    esp,0x10
c00182f3:	89 e0                	mov    eax,esp
c00182f5:	50                   	push   eax
c00182f6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00182fa:	50                   	push   eax
c00182fb:	8d 44 24 10          	lea    eax,[esp+0x10]
c00182ff:	50                   	push   eax
c0018300:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018304:	50                   	push   eax
c0018305:	6a 01                	push   0x1
c0018307:	e8 19 ff ff ff       	call   c0018225 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001830c:	83 c4 14             	add    esp,0x14
c001830f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018313:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018317:	0f 95 c0             	setne  al
c001831a:	83 c4 10             	add    esp,0x10
c001831d:	c3                   	ret    

c001831e <cpuidCheckExtendedEBX(unsigned int)>:
c001831e:	83 ec 10             	sub    esp,0x10
c0018321:	89 e0                	mov    eax,esp
c0018323:	50                   	push   eax
c0018324:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018328:	50                   	push   eax
c0018329:	8d 44 24 10          	lea    eax,[esp+0x10]
c001832d:	50                   	push   eax
c001832e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018332:	50                   	push   eax
c0018333:	6a 07                	push   0x7
c0018335:	e8 eb fe ff ff       	call   c0018225 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001833a:	83 c4 14             	add    esp,0x14
c001833d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018341:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018345:	0f 95 c0             	setne  al
c0018348:	83 c4 10             	add    esp,0x10
c001834b:	c3                   	ret    

c001834c <cpuidCheckExtendedECX(unsigned int)>:
c001834c:	83 ec 10             	sub    esp,0x10
c001834f:	89 e0                	mov    eax,esp
c0018351:	50                   	push   eax
c0018352:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018356:	50                   	push   eax
c0018357:	8d 44 24 10          	lea    eax,[esp+0x10]
c001835b:	50                   	push   eax
c001835c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018360:	50                   	push   eax
c0018361:	6a 07                	push   0x7
c0018363:	e8 bd fe ff ff       	call   c0018225 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018368:	83 c4 14             	add    esp,0x14
c001836b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001836f:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018373:	0f 95 c0             	setne  al
c0018376:	83 c4 10             	add    esp,0x10
c0018379:	c3                   	ret    

c001837a <HalDetectFeatures()>:
c001837a:	57                   	push   edi
c001837b:	56                   	push   esi
c001837c:	53                   	push   ebx
c001837d:	81 ec 90 00 00 00    	sub    esp,0x90
c0018383:	83 ec 04             	sub    esp,0x4
c0018386:	6a 08                	push   0x8
c0018388:	6a 00                	push   0x0
c001838a:	68 0c eb 02 c0       	push   0xc002eb0c
c001838f:	e8 5c 81 fe ff       	call   c00004f0 <memset>
c0018394:	83 c4 10             	add    esp,0x10
c0018397:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001839c:	83 c8 04             	or     eax,0x4
c001839f:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00183a4:	e8 50 7e fe ff       	call   c00001f9 <detectCPUID>
c00183a9:	85 c0                	test   eax,eax
c00183ab:	0f 95 c0             	setne  al
c00183ae:	83 e0 01             	and    eax,0x1
c00183b1:	83 e0 01             	and    eax,0x1
c00183b4:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00183b7:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00183bc:	83 e0 fd             	and    eax,0xfffffffd
c00183bf:	88 c2                	mov    dl,al
c00183c1:	88 c8                	mov    al,cl
c00183c3:	09 d0                	or     eax,edx
c00183c5:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00183ca:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00183cf:	83 e0 02             	and    eax,0x2
c00183d2:	0f b6 c0             	movzx  eax,al
c00183d5:	85 c0                	test   eax,eax
c00183d7:	0f 84 7f 02 00 00    	je     c001865c <HalDetectFeatures()+0x2e2>
c00183dd:	83 ec 0c             	sub    esp,0xc
c00183e0:	6a 20                	push   0x20
c00183e2:	e8 dc fe ff ff       	call   c00182c3 <cpuidCheckEDX(unsigned int)>
c00183e7:	83 c4 10             	add    esp,0x10
c00183ea:	83 e0 01             	and    eax,0x1
c00183ed:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00183f4:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00183f9:	83 e0 f7             	and    eax,0xfffffff7
c00183fc:	88 c2                	mov    dl,al
c00183fe:	88 c8                	mov    al,cl
c0018400:	09 d0                	or     eax,edx
c0018402:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018407:	83 ec 0c             	sub    esp,0xc
c001840a:	68 00 00 00 04       	push   0x4000000
c001840f:	e8 af fe ff ff       	call   c00182c3 <cpuidCheckEDX(unsigned int)>
c0018414:	83 c4 10             	add    esp,0x10
c0018417:	89 c1                	mov    ecx,eax
c0018419:	83 e1 01             	and    ecx,0x1
c001841c:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0018421:	83 e0 fe             	and    eax,0xfffffffe
c0018424:	88 c2                	mov    dl,al
c0018426:	88 c8                	mov    al,cl
c0018428:	09 d0                	or     eax,edx
c001842a:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c001842f:	83 ec 0c             	sub    esp,0xc
c0018432:	68 80 00 00 00       	push   0x80
c0018437:	e8 87 fe ff ff       	call   c00182c3 <cpuidCheckEDX(unsigned int)>
c001843c:	83 c4 10             	add    esp,0x10
c001843f:	89 c1                	mov    ecx,eax
c0018441:	c1 e1 07             	shl    ecx,0x7
c0018444:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0018449:	83 e0 7f             	and    eax,0x7f
c001844c:	88 c2                	mov    dl,al
c001844e:	88 c8                	mov    al,cl
c0018450:	09 d0                	or     eax,edx
c0018452:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c0018457:	83 ec 0c             	sub    esp,0xc
c001845a:	68 00 00 80 00       	push   0x800000
c001845f:	e8 5f fe ff ff       	call   c00182c3 <cpuidCheckEDX(unsigned int)>
c0018464:	83 c4 10             	add    esp,0x10
c0018467:	83 e0 01             	and    eax,0x1
c001846a:	89 c1                	mov    ecx,eax
c001846c:	c1 e1 05             	shl    ecx,0x5
c001846f:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018474:	83 e0 df             	and    eax,0xffffffdf
c0018477:	88 c2                	mov    dl,al
c0018479:	88 c8                	mov    al,cl
c001847b:	09 d0                	or     eax,edx
c001847d:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018482:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c0018487:	83 e0 01             	and    eax,0x1
c001848a:	75 0c                	jne    c0018498 <HalDetectFeatures()+0x11e>
c001848c:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c0018491:	25 00 04 00 00       	and    eax,0x400
c0018496:	74 0f                	je     c00184a7 <HalDetectFeatures()+0x12d>
c0018498:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001849d:	83 e0 fe             	and    eax,0xfffffffe
c00184a0:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00184a5:	eb 28                	jmp    c00184cf <HalDetectFeatures()+0x155>
c00184a7:	83 ec 0c             	sub    esp,0xc
c00184aa:	68 00 02 00 00       	push   0x200
c00184af:	e8 0f fe ff ff       	call   c00182c3 <cpuidCheckEDX(unsigned int)>
c00184b4:	83 c4 10             	add    esp,0x10
c00184b7:	89 c1                	mov    ecx,eax
c00184b9:	83 e1 01             	and    ecx,0x1
c00184bc:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00184c1:	83 e0 fe             	and    eax,0xfffffffe
c00184c4:	88 c2                	mov    dl,al
c00184c6:	88 c8                	mov    al,cl
c00184c8:	09 d0                	or     eax,edx
c00184ca:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00184cf:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00184d4:	83 e0 01             	and    eax,0x1
c00184d7:	0f b6 c0             	movzx  eax,al
c00184da:	85 c0                	test   eax,eax
c00184dc:	74 1c                	je     c00184fa <HalDetectFeatures()+0x180>
c00184de:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00184e3:	83 e0 08             	and    eax,0x8
c00184e6:	0f b6 c0             	movzx  eax,al
c00184e9:	85 c0                	test   eax,eax
c00184eb:	75 0d                	jne    c00184fa <HalDetectFeatures()+0x180>
c00184ed:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00184f2:	83 e0 fe             	and    eax,0xfffffffe
c00184f5:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00184fa:	83 ec 0c             	sub    esp,0xc
c00184fd:	68 c4 4a 02 c0       	push   0xc0024ac4
c0018502:	e8 47 ea fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018507:	83 c4 10             	add    esp,0x10
c001850a:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001850f:	83 e0 fe             	and    eax,0xfffffffe
c0018512:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018517:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c001851f:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0018527:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c001852f:	85 c0                	test   eax,eax
c0018531:	0f 84 ab 00 00 00    	je     c00185e2 <HalDetectFeatures()+0x268>
c0018537:	83 ec 0c             	sub    esp,0xc
c001853a:	6a 01                	push   0x1
c001853c:	e8 af fd ff ff       	call   c00182f0 <cpuidCheckECX(unsigned int)>
c0018541:	83 c4 10             	add    esp,0x10
c0018544:	83 e0 01             	and    eax,0x1
c0018547:	8d 0c 00             	lea    ecx,[eax+eax*1]
c001854a:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c001854f:	83 e0 fd             	and    eax,0xfffffffd
c0018552:	88 c2                	mov    dl,al
c0018554:	88 c8                	mov    al,cl
c0018556:	09 d0                	or     eax,edx
c0018558:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c001855d:	83 ec 0c             	sub    esp,0xc
c0018560:	68 00 02 00 00       	push   0x200
c0018565:	e8 86 fd ff ff       	call   c00182f0 <cpuidCheckECX(unsigned int)>
c001856a:	83 c4 10             	add    esp,0x10
c001856d:	83 e0 01             	and    eax,0x1
c0018570:	89 c1                	mov    ecx,eax
c0018572:	c1 e1 04             	shl    ecx,0x4
c0018575:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c001857a:	83 e0 ef             	and    eax,0xffffffef
c001857d:	88 c2                	mov    dl,al
c001857f:	88 c8                	mov    al,cl
c0018581:	09 d0                	or     eax,edx
c0018583:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c0018588:	83 ec 0c             	sub    esp,0xc
c001858b:	68 00 00 08 00       	push   0x80000
c0018590:	e8 5b fd ff ff       	call   c00182f0 <cpuidCheckECX(unsigned int)>
c0018595:	83 c4 10             	add    esp,0x10
c0018598:	83 e0 01             	and    eax,0x1
c001859b:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c00185a2:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c00185a7:	83 e0 fb             	and    eax,0xfffffffb
c00185aa:	88 c2                	mov    dl,al
c00185ac:	88 c8                	mov    al,cl
c00185ae:	09 d0                	or     eax,edx
c00185b0:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c00185b5:	83 ec 0c             	sub    esp,0xc
c00185b8:	68 00 00 10 00       	push   0x100000
c00185bd:	e8 2e fd ff ff       	call   c00182f0 <cpuidCheckECX(unsigned int)>
c00185c2:	83 c4 10             	add    esp,0x10
c00185c5:	83 e0 01             	and    eax,0x1
c00185c8:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00185cf:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c00185d4:	83 e0 f7             	and    eax,0xfffffff7
c00185d7:	88 c2                	mov    dl,al
c00185d9:	88 c8                	mov    al,cl
c00185db:	09 d0                	or     eax,edx
c00185dd:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c00185e2:	83 ec 0c             	sub    esp,0xc
c00185e5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00185e9:	50                   	push   eax
c00185ea:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00185ee:	50                   	push   eax
c00185ef:	8d 44 24 34          	lea    eax,[esp+0x34]
c00185f3:	50                   	push   eax
c00185f4:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00185f8:	50                   	push   eax
c00185f9:	68 00 00 00 80       	push   0x80000000
c00185fe:	e8 22 fc ff ff       	call   c0018225 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018603:	83 c4 20             	add    esp,0x20
c0018606:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001860a:	3d 00 00 00 80       	cmp    eax,0x80000000
c001860f:	76 4b                	jbe    c001865c <HalDetectFeatures()+0x2e2>
c0018611:	83 ec 0c             	sub    esp,0xc
c0018614:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018618:	50                   	push   eax
c0018619:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001861d:	50                   	push   eax
c001861e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018622:	50                   	push   eax
c0018623:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018627:	50                   	push   eax
c0018628:	68 01 00 00 80       	push   0x80000001
c001862d:	e8 f3 fb ff ff       	call   c0018225 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018632:	83 c4 20             	add    esp,0x20
c0018635:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001863a:	83 e0 bf             	and    eax,0xffffffbf
c001863d:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018642:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018647:	83 e0 fd             	and    eax,0xfffffffd
c001864a:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c001864f:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018654:	83 e0 fe             	and    eax,0xfffffffe
c0018657:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c001865c:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c0018661:	25 00 04 00 00       	and    eax,0x400
c0018666:	74 0d                	je     c0018675 <HalDetectFeatures()+0x2fb>
c0018668:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001866d:	83 e0 fb             	and    eax,0xfffffffb
c0018670:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018675:	c6 05 08 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb08,0x1
c001867c:	83 ec 04             	sub    esp,0x4
c001867f:	6a 0d                	push   0xd
c0018681:	6a 00                	push   0x0
c0018683:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018688:	e8 63 7e fe ff       	call   c00004f0 <memset>
c001868d:	83 c4 10             	add    esp,0x10
c0018690:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018695:	83 e0 02             	and    eax,0x2
c0018698:	0f b6 c0             	movzx  eax,al
c001869b:	85 c0                	test   eax,eax
c001869d:	0f 84 16 08 00 00    	je     c0018eb9 <HalDetectFeatures()+0xb3f>
c00186a3:	83 ec 0c             	sub    esp,0xc
c00186a6:	6a 10                	push   0x10
c00186a8:	e8 16 fc ff ff       	call   c00182c3 <cpuidCheckEDX(unsigned int)>
c00186ad:	83 c4 10             	add    esp,0x10
c00186b0:	83 e0 01             	and    eax,0x1
c00186b3:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00186ba:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c00186bf:	83 e0 f7             	and    eax,0xfffffff7
c00186c2:	88 c2                	mov    dl,al
c00186c4:	88 c8                	mov    al,cl
c00186c6:	09 d0                	or     eax,edx
c00186c8:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c00186cd:	83 ec 0c             	sub    esp,0xc
c00186d0:	6a 40                	push   0x40
c00186d2:	e8 ec fb ff ff       	call   c00182c3 <cpuidCheckEDX(unsigned int)>
c00186d7:	83 c4 10             	add    esp,0x10
c00186da:	83 e0 01             	and    eax,0x1
c00186dd:	89 c1                	mov    ecx,eax
c00186df:	c1 e1 04             	shl    ecx,0x4
c00186e2:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c00186e7:	83 e0 ef             	and    eax,0xffffffef
c00186ea:	88 c2                	mov    dl,al
c00186ec:	88 c8                	mov    al,cl
c00186ee:	09 d0                	or     eax,edx
c00186f0:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c00186f5:	83 ec 0c             	sub    esp,0xc
c00186f8:	6a 08                	push   0x8
c00186fa:	e8 c4 fb ff ff       	call   c00182c3 <cpuidCheckEDX(unsigned int)>
c00186ff:	83 c4 10             	add    esp,0x10
c0018702:	83 e0 01             	and    eax,0x1
c0018705:	89 c1                	mov    ecx,eax
c0018707:	c1 e1 05             	shl    ecx,0x5
c001870a:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c001870f:	83 e0 df             	and    eax,0xffffffdf
c0018712:	88 c2                	mov    dl,al
c0018714:	88 c8                	mov    al,cl
c0018716:	09 d0                	or     eax,edx
c0018718:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c001871d:	83 ec 0c             	sub    esp,0xc
c0018720:	68 00 20 00 00       	push   0x2000
c0018725:	e8 99 fb ff ff       	call   c00182c3 <cpuidCheckEDX(unsigned int)>
c001872a:	83 c4 10             	add    esp,0x10
c001872d:	83 e0 01             	and    eax,0x1
c0018730:	89 c1                	mov    ecx,eax
c0018732:	c1 e1 06             	shl    ecx,0x6
c0018735:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c001873a:	83 e0 bf             	and    eax,0xffffffbf
c001873d:	88 c2                	mov    dl,al
c001873f:	88 c8                	mov    al,cl
c0018741:	09 d0                	or     eax,edx
c0018743:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018748:	83 ec 0c             	sub    esp,0xc
c001874b:	68 00 00 01 00       	push   0x10000
c0018750:	e8 6e fb ff ff       	call   c00182c3 <cpuidCheckEDX(unsigned int)>
c0018755:	83 c4 10             	add    esp,0x10
c0018758:	89 c1                	mov    ecx,eax
c001875a:	c1 e1 07             	shl    ecx,0x7
c001875d:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018762:	83 e0 7f             	and    eax,0x7f
c0018765:	88 c2                	mov    dl,al
c0018767:	88 c8                	mov    al,cl
c0018769:	09 d0                	or     eax,edx
c001876b:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018770:	83 ec 0c             	sub    esp,0xc
c0018773:	6a 01                	push   0x1
c0018775:	e8 49 fb ff ff       	call   c00182c3 <cpuidCheckEDX(unsigned int)>
c001877a:	83 c4 10             	add    esp,0x10
c001877d:	83 e0 01             	and    eax,0x1
c0018780:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018787:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c001878c:	83 e0 f7             	and    eax,0xfffffff7
c001878f:	88 c2                	mov    dl,al
c0018791:	88 c8                	mov    al,cl
c0018793:	09 d0                	or     eax,edx
c0018795:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c001879a:	83 ec 0c             	sub    esp,0xc
c001879d:	68 00 08 00 00       	push   0x800
c00187a2:	e8 1c fb ff ff       	call   c00182c3 <cpuidCheckEDX(unsigned int)>
c00187a7:	83 c4 10             	add    esp,0x10
c00187aa:	89 c1                	mov    ecx,eax
c00187ac:	83 e1 01             	and    ecx,0x1
c00187af:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00187b4:	83 e0 fe             	and    eax,0xfffffffe
c00187b7:	88 c2                	mov    dl,al
c00187b9:	88 c8                	mov    al,cl
c00187bb:	09 d0                	or     eax,edx
c00187bd:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c00187c2:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c00187c7:	83 e0 40             	and    eax,0x40
c00187ca:	0f b6 c0             	movzx  eax,al
c00187cd:	85 c0                	test   eax,eax
c00187cf:	74 0a                	je     c00187db <HalDetectFeatures()+0x461>
c00187d1:	c7 05 e8 ea 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002eae8,0x100
c00187db:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c00187e0:	83 e0 80             	and    eax,0xffffff80
c00187e3:	0f b6 c0             	movzx  eax,al
c00187e6:	85 c0                	test   eax,eax
c00187e8:	74 0a                	je     c00187f4 <HalDetectFeatures()+0x47a>
c00187ea:	c7 05 e4 ea 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002eae4,0x80
c00187f4:	83 ec 0c             	sub    esp,0xc
c00187f7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00187fb:	50                   	push   eax
c00187fc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018800:	50                   	push   eax
c0018801:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018805:	50                   	push   eax
c0018806:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001880a:	50                   	push   eax
c001880b:	6a 00                	push   0x0
c001880d:	e8 13 fa ff ff       	call   c0018225 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018812:	83 c4 20             	add    esp,0x20
c0018815:	c7 44 24 48 f0 ea 02 c0 	mov    DWORD PTR [esp+0x48],0xc002eaf0
c001881d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018821:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018825:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c001882d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018831:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0018835:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0018839:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001883d:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0018841:	89 c6                	mov    esi,eax
c0018843:	89 d7                	mov    edi,edx
c0018845:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018847:	89 c8                	mov    eax,ecx
c0018849:	89 fa                	mov    edx,edi
c001884b:	89 f3                	mov    ebx,esi
c001884d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0018851:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018855:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018859:	b8 f4 ea 02 c0       	mov    eax,0xc002eaf4
c001885e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0018862:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018866:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001886a:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c0018872:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0018876:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001887a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001887e:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0018882:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c0018886:	89 c6                	mov    esi,eax
c0018888:	89 d7                	mov    edi,edx
c001888a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001888c:	89 c8                	mov    eax,ecx
c001888e:	89 fa                	mov    edx,edi
c0018890:	89 f3                	mov    ebx,esi
c0018892:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c0018896:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c001889a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001889e:	b8 f8 ea 02 c0       	mov    eax,0xc002eaf8
c00188a3:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00188aa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188ae:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c00188b2:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c00188ba:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00188c1:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00188c5:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00188c9:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00188d0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c00188d4:	89 c6                	mov    esi,eax
c00188d6:	89 d7                	mov    edi,edx
c00188d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00188da:	89 c8                	mov    eax,ecx
c00188dc:	89 fa                	mov    edx,edi
c00188de:	89 f3                	mov    ebx,esi
c00188e0:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c00188e4:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c00188e8:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00188ec:	83 ec 08             	sub    esp,0x8
c00188ef:	68 d6 4a 02 c0       	push   0xc0024ad6
c00188f4:	68 f0 ea 02 c0       	push   0xc002eaf0
c00188f9:	e8 82 7e fe ff       	call   c0000780 <strcmp>
c00188fe:	83 c4 10             	add    esp,0x10
c0018901:	85 c0                	test   eax,eax
c0018903:	74 19                	je     c001891e <HalDetectFeatures()+0x5a4>
c0018905:	83 ec 08             	sub    esp,0x8
c0018908:	68 e3 4a 02 c0       	push   0xc0024ae3
c001890d:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018912:	e8 69 7e fe ff       	call   c0000780 <strcmp>
c0018917:	83 c4 10             	add    esp,0x10
c001891a:	85 c0                	test   eax,eax
c001891c:	75 04                	jne    c0018922 <HalDetectFeatures()+0x5a8>
c001891e:	b0 01                	mov    al,0x1
c0018920:	eb 02                	jmp    c0018924 <HalDetectFeatures()+0x5aa>
c0018922:	b0 00                	mov    al,0x0
c0018924:	0f b6 c0             	movzx  eax,al
c0018927:	85 c0                	test   eax,eax
c0018929:	74 0f                	je     c001893a <HalDetectFeatures()+0x5c0>
c001892b:	c7 05 04 eb 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x2
c0018935:	e9 0d 03 00 00       	jmp    c0018c47 <HalDetectFeatures()+0x8cd>
c001893a:	83 ec 08             	sub    esp,0x8
c001893d:	68 f0 4a 02 c0       	push   0xc0024af0
c0018942:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018947:	e8 34 7e fe ff       	call   c0000780 <strcmp>
c001894c:	83 c4 10             	add    esp,0x10
c001894f:	85 c0                	test   eax,eax
c0018951:	74 19                	je     c001896c <HalDetectFeatures()+0x5f2>
c0018953:	83 ec 08             	sub    esp,0x8
c0018956:	68 fd 4a 02 c0       	push   0xc0024afd
c001895b:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018960:	e8 1b 7e fe ff       	call   c0000780 <strcmp>
c0018965:	83 c4 10             	add    esp,0x10
c0018968:	85 c0                	test   eax,eax
c001896a:	75 04                	jne    c0018970 <HalDetectFeatures()+0x5f6>
c001896c:	b0 01                	mov    al,0x1
c001896e:	eb 02                	jmp    c0018972 <HalDetectFeatures()+0x5f8>
c0018970:	b0 00                	mov    al,0x0
c0018972:	0f b6 c0             	movzx  eax,al
c0018975:	85 c0                	test   eax,eax
c0018977:	74 0f                	je     c0018988 <HalDetectFeatures()+0x60e>
c0018979:	c7 05 04 eb 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x4
c0018983:	e9 bf 02 00 00       	jmp    c0018c47 <HalDetectFeatures()+0x8cd>
c0018988:	83 ec 08             	sub    esp,0x8
c001898b:	68 0a 4b 02 c0       	push   0xc0024b0a
c0018990:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018995:	e8 e6 7d fe ff       	call   c0000780 <strcmp>
c001899a:	83 c4 10             	add    esp,0x10
c001899d:	85 c0                	test   eax,eax
c001899f:	74 19                	je     c00189ba <HalDetectFeatures()+0x640>
c00189a1:	83 ec 08             	sub    esp,0x8
c00189a4:	68 17 4b 02 c0       	push   0xc0024b17
c00189a9:	68 f0 ea 02 c0       	push   0xc002eaf0
c00189ae:	e8 cd 7d fe ff       	call   c0000780 <strcmp>
c00189b3:	83 c4 10             	add    esp,0x10
c00189b6:	85 c0                	test   eax,eax
c00189b8:	75 04                	jne    c00189be <HalDetectFeatures()+0x644>
c00189ba:	b0 01                	mov    al,0x1
c00189bc:	eb 02                	jmp    c00189c0 <HalDetectFeatures()+0x646>
c00189be:	b0 00                	mov    al,0x0
c00189c0:	0f b6 c0             	movzx  eax,al
c00189c3:	85 c0                	test   eax,eax
c00189c5:	74 0f                	je     c00189d6 <HalDetectFeatures()+0x65c>
c00189c7:	c7 05 04 eb 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x5
c00189d1:	e9 71 02 00 00       	jmp    c0018c47 <HalDetectFeatures()+0x8cd>
c00189d6:	83 ec 08             	sub    esp,0x8
c00189d9:	68 24 4b 02 c0       	push   0xc0024b24
c00189de:	68 f0 ea 02 c0       	push   0xc002eaf0
c00189e3:	e8 98 7d fe ff       	call   c0000780 <strcmp>
c00189e8:	83 c4 10             	add    esp,0x10
c00189eb:	85 c0                	test   eax,eax
c00189ed:	0f 94 c0             	sete   al
c00189f0:	0f b6 c0             	movzx  eax,al
c00189f3:	85 c0                	test   eax,eax
c00189f5:	74 0f                	je     c0018a06 <HalDetectFeatures()+0x68c>
c00189f7:	c7 05 04 eb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x1
c0018a01:	e9 41 02 00 00       	jmp    c0018c47 <HalDetectFeatures()+0x8cd>
c0018a06:	83 ec 08             	sub    esp,0x8
c0018a09:	68 31 4b 02 c0       	push   0xc0024b31
c0018a0e:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018a13:	e8 68 7d fe ff       	call   c0000780 <strcmp>
c0018a18:	83 c4 10             	add    esp,0x10
c0018a1b:	85 c0                	test   eax,eax
c0018a1d:	0f 94 c0             	sete   al
c0018a20:	0f b6 c0             	movzx  eax,al
c0018a23:	85 c0                	test   eax,eax
c0018a25:	74 0f                	je     c0018a36 <HalDetectFeatures()+0x6bc>
c0018a27:	c7 05 04 eb 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x3
c0018a31:	e9 11 02 00 00       	jmp    c0018c47 <HalDetectFeatures()+0x8cd>
c0018a36:	83 ec 08             	sub    esp,0x8
c0018a39:	68 f0 4a 02 c0       	push   0xc0024af0
c0018a3e:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018a43:	e8 38 7d fe ff       	call   c0000780 <strcmp>
c0018a48:	83 c4 10             	add    esp,0x10
c0018a4b:	85 c0                	test   eax,eax
c0018a4d:	0f 94 c0             	sete   al
c0018a50:	0f b6 c0             	movzx  eax,al
c0018a53:	85 c0                	test   eax,eax
c0018a55:	74 0f                	je     c0018a66 <HalDetectFeatures()+0x6ec>
c0018a57:	c7 05 04 eb 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x6
c0018a61:	e9 e1 01 00 00       	jmp    c0018c47 <HalDetectFeatures()+0x8cd>
c0018a66:	83 ec 08             	sub    esp,0x8
c0018a69:	68 3e 4b 02 c0       	push   0xc0024b3e
c0018a6e:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018a73:	e8 08 7d fe ff       	call   c0000780 <strcmp>
c0018a78:	83 c4 10             	add    esp,0x10
c0018a7b:	85 c0                	test   eax,eax
c0018a7d:	0f 94 c0             	sete   al
c0018a80:	0f b6 c0             	movzx  eax,al
c0018a83:	85 c0                	test   eax,eax
c0018a85:	74 0f                	je     c0018a96 <HalDetectFeatures()+0x71c>
c0018a87:	c7 05 04 eb 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x7
c0018a91:	e9 b1 01 00 00       	jmp    c0018c47 <HalDetectFeatures()+0x8cd>
c0018a96:	83 ec 08             	sub    esp,0x8
c0018a99:	68 4b 4b 02 c0       	push   0xc0024b4b
c0018a9e:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018aa3:	e8 d8 7c fe ff       	call   c0000780 <strcmp>
c0018aa8:	83 c4 10             	add    esp,0x10
c0018aab:	85 c0                	test   eax,eax
c0018aad:	0f 94 c0             	sete   al
c0018ab0:	0f b6 c0             	movzx  eax,al
c0018ab3:	85 c0                	test   eax,eax
c0018ab5:	74 0f                	je     c0018ac6 <HalDetectFeatures()+0x74c>
c0018ab7:	c7 05 04 eb 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x8
c0018ac1:	e9 81 01 00 00       	jmp    c0018c47 <HalDetectFeatures()+0x8cd>
c0018ac6:	83 ec 08             	sub    esp,0x8
c0018ac9:	68 58 4b 02 c0       	push   0xc0024b58
c0018ace:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018ad3:	e8 a8 7c fe ff       	call   c0000780 <strcmp>
c0018ad8:	83 c4 10             	add    esp,0x10
c0018adb:	85 c0                	test   eax,eax
c0018add:	0f 94 c0             	sete   al
c0018ae0:	0f b6 c0             	movzx  eax,al
c0018ae3:	85 c0                	test   eax,eax
c0018ae5:	74 0f                	je     c0018af6 <HalDetectFeatures()+0x77c>
c0018ae7:	c7 05 04 eb 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x9
c0018af1:	e9 51 01 00 00       	jmp    c0018c47 <HalDetectFeatures()+0x8cd>
c0018af6:	83 ec 08             	sub    esp,0x8
c0018af9:	68 65 4b 02 c0       	push   0xc0024b65
c0018afe:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018b03:	e8 78 7c fe ff       	call   c0000780 <strcmp>
c0018b08:	83 c4 10             	add    esp,0x10
c0018b0b:	85 c0                	test   eax,eax
c0018b0d:	0f 94 c0             	sete   al
c0018b10:	0f b6 c0             	movzx  eax,al
c0018b13:	85 c0                	test   eax,eax
c0018b15:	74 0f                	je     c0018b26 <HalDetectFeatures()+0x7ac>
c0018b17:	c7 05 04 eb 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xa
c0018b21:	e9 21 01 00 00       	jmp    c0018c47 <HalDetectFeatures()+0x8cd>
c0018b26:	83 ec 08             	sub    esp,0x8
c0018b29:	68 72 4b 02 c0       	push   0xc0024b72
c0018b2e:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018b33:	e8 48 7c fe ff       	call   c0000780 <strcmp>
c0018b38:	83 c4 10             	add    esp,0x10
c0018b3b:	85 c0                	test   eax,eax
c0018b3d:	0f 94 c0             	sete   al
c0018b40:	0f b6 c0             	movzx  eax,al
c0018b43:	85 c0                	test   eax,eax
c0018b45:	74 0f                	je     c0018b56 <HalDetectFeatures()+0x7dc>
c0018b47:	c7 05 04 eb 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xb
c0018b51:	e9 f1 00 00 00       	jmp    c0018c47 <HalDetectFeatures()+0x8cd>
c0018b56:	83 ec 08             	sub    esp,0x8
c0018b59:	68 7f 4b 02 c0       	push   0xc0024b7f
c0018b5e:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018b63:	e8 18 7c fe ff       	call   c0000780 <strcmp>
c0018b68:	83 c4 10             	add    esp,0x10
c0018b6b:	85 c0                	test   eax,eax
c0018b6d:	0f 94 c0             	sete   al
c0018b70:	0f b6 c0             	movzx  eax,al
c0018b73:	85 c0                	test   eax,eax
c0018b75:	74 0f                	je     c0018b86 <HalDetectFeatures()+0x80c>
c0018b77:	c7 05 04 eb 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xc
c0018b81:	e9 c1 00 00 00       	jmp    c0018c47 <HalDetectFeatures()+0x8cd>
c0018b86:	83 ec 08             	sub    esp,0x8
c0018b89:	68 8c 4b 02 c0       	push   0xc0024b8c
c0018b8e:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018b93:	e8 e8 7b fe ff       	call   c0000780 <strcmp>
c0018b98:	83 c4 10             	add    esp,0x10
c0018b9b:	85 c0                	test   eax,eax
c0018b9d:	0f 94 c0             	sete   al
c0018ba0:	0f b6 c0             	movzx  eax,al
c0018ba3:	85 c0                	test   eax,eax
c0018ba5:	74 0f                	je     c0018bb6 <HalDetectFeatures()+0x83c>
c0018ba7:	c7 05 04 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xd
c0018bb1:	e9 91 00 00 00       	jmp    c0018c47 <HalDetectFeatures()+0x8cd>
c0018bb6:	83 ec 08             	sub    esp,0x8
c0018bb9:	68 99 4b 02 c0       	push   0xc0024b99
c0018bbe:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018bc3:	e8 b8 7b fe ff       	call   c0000780 <strcmp>
c0018bc8:	83 c4 10             	add    esp,0x10
c0018bcb:	85 c0                	test   eax,eax
c0018bcd:	0f 94 c0             	sete   al
c0018bd0:	0f b6 c0             	movzx  eax,al
c0018bd3:	85 c0                	test   eax,eax
c0018bd5:	74 0c                	je     c0018be3 <HalDetectFeatures()+0x869>
c0018bd7:	c7 05 04 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xd
c0018be1:	eb 64                	jmp    c0018c47 <HalDetectFeatures()+0x8cd>
c0018be3:	83 ec 08             	sub    esp,0x8
c0018be6:	68 a6 4b 02 c0       	push   0xc0024ba6
c0018beb:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018bf0:	e8 8b 7b fe ff       	call   c0000780 <strcmp>
c0018bf5:	83 c4 10             	add    esp,0x10
c0018bf8:	85 c0                	test   eax,eax
c0018bfa:	0f 94 c0             	sete   al
c0018bfd:	0f b6 c0             	movzx  eax,al
c0018c00:	85 c0                	test   eax,eax
c0018c02:	74 0c                	je     c0018c10 <HalDetectFeatures()+0x896>
c0018c04:	c7 05 04 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xd
c0018c0e:	eb 37                	jmp    c0018c47 <HalDetectFeatures()+0x8cd>
c0018c10:	83 ec 08             	sub    esp,0x8
c0018c13:	68 b3 4b 02 c0       	push   0xc0024bb3
c0018c18:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018c1d:	e8 5e 7b fe ff       	call   c0000780 <strcmp>
c0018c22:	83 c4 10             	add    esp,0x10
c0018c25:	85 c0                	test   eax,eax
c0018c27:	0f 94 c0             	sete   al
c0018c2a:	0f b6 c0             	movzx  eax,al
c0018c2d:	85 c0                	test   eax,eax
c0018c2f:	74 0c                	je     c0018c3d <HalDetectFeatures()+0x8c3>
c0018c31:	c7 05 04 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xd
c0018c3b:	eb 0a                	jmp    c0018c47 <HalDetectFeatures()+0x8cd>
c0018c3d:	c7 05 04 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x0
c0018c47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c4b:	83 f8 06             	cmp    eax,0x6
c0018c4e:	0f 86 cc 00 00 00    	jbe    c0018d20 <HalDetectFeatures()+0x9a6>
c0018c54:	83 ec 0c             	sub    esp,0xc
c0018c57:	68 80 00 00 00       	push   0x80
c0018c5c:	e8 bd f6 ff ff       	call   c001831e <cpuidCheckExtendedEBX(unsigned int)>
c0018c61:	83 c4 10             	add    esp,0x10
c0018c64:	89 c1                	mov    ecx,eax
c0018c66:	83 e1 01             	and    ecx,0x1
c0018c69:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0018c6e:	83 e0 fe             	and    eax,0xfffffffe
c0018c71:	88 c2                	mov    dl,al
c0018c73:	88 c8                	mov    al,cl
c0018c75:	09 d0                	or     eax,edx
c0018c77:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0018c7c:	83 ec 0c             	sub    esp,0xc
c0018c7f:	68 00 00 10 00       	push   0x100000
c0018c84:	e8 95 f6 ff ff       	call   c001831e <cpuidCheckExtendedEBX(unsigned int)>
c0018c89:	83 c4 10             	add    esp,0x10
c0018c8c:	83 e0 01             	and    eax,0x1
c0018c8f:	89 c1                	mov    ecx,eax
c0018c91:	c1 e1 06             	shl    ecx,0x6
c0018c94:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0018c99:	83 e0 bf             	and    eax,0xffffffbf
c0018c9c:	88 c2                	mov    dl,al
c0018c9e:	88 c8                	mov    al,cl
c0018ca0:	09 d0                	or     eax,edx
c0018ca2:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0018ca7:	83 ec 0c             	sub    esp,0xc
c0018caa:	68 00 00 04 00       	push   0x40000
c0018caf:	e8 6a f6 ff ff       	call   c001831e <cpuidCheckExtendedEBX(unsigned int)>
c0018cb4:	83 c4 10             	add    esp,0x10
c0018cb7:	83 e0 01             	and    eax,0x1
c0018cba:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0018cbd:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0018cc2:	83 e0 fd             	and    eax,0xfffffffd
c0018cc5:	88 c2                	mov    dl,al
c0018cc7:	88 c8                	mov    al,cl
c0018cc9:	09 d0                	or     eax,edx
c0018ccb:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0018cd0:	83 ec 0c             	sub    esp,0xc
c0018cd3:	6a 04                	push   0x4
c0018cd5:	e8 72 f6 ff ff       	call   c001834c <cpuidCheckExtendedECX(unsigned int)>
c0018cda:	83 c4 10             	add    esp,0x10
c0018cdd:	83 e0 01             	and    eax,0x1
c0018ce0:	89 c1                	mov    ecx,eax
c0018ce2:	c1 e1 05             	shl    ecx,0x5
c0018ce5:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0018cea:	83 e0 df             	and    eax,0xffffffdf
c0018ced:	88 c2                	mov    dl,al
c0018cef:	88 c8                	mov    al,cl
c0018cf1:	09 d0                	or     eax,edx
c0018cf3:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0018cf8:	83 ec 0c             	sub    esp,0xc
c0018cfb:	6a 20                	push   0x20
c0018cfd:	e8 4a f6 ff ff       	call   c001834c <cpuidCheckExtendedECX(unsigned int)>
c0018d02:	83 c4 10             	add    esp,0x10
c0018d05:	83 e0 01             	and    eax,0x1
c0018d08:	89 c1                	mov    ecx,eax
c0018d0a:	c1 e1 04             	shl    ecx,0x4
c0018d0d:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0018d12:	83 e0 ef             	and    eax,0xffffffef
c0018d15:	88 c2                	mov    dl,al
c0018d17:	88 c8                	mov    al,cl
c0018d19:	09 d0                	or     eax,edx
c0018d1b:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0018d20:	83 ec 0c             	sub    esp,0xc
c0018d23:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018d27:	50                   	push   eax
c0018d28:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018d2c:	50                   	push   eax
c0018d2d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018d31:	50                   	push   eax
c0018d32:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0018d36:	50                   	push   eax
c0018d37:	6a 01                	push   0x1
c0018d39:	e8 e7 f4 ff ff       	call   c0018225 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d3e:	83 c4 20             	add    esp,0x20
c0018d41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d45:	83 e0 0f             	and    eax,0xf
c0018d48:	a2 00 eb 02 c0       	mov    ds:0xc002eb00,al
c0018d4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d51:	c1 e8 04             	shr    eax,0x4
c0018d54:	83 e0 0f             	and    eax,0xf
c0018d57:	a2 fe ea 02 c0       	mov    ds:0xc002eafe,al
c0018d5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d60:	c1 e8 08             	shr    eax,0x8
c0018d63:	83 e0 0f             	and    eax,0xf
c0018d66:	a2 fd ea 02 c0       	mov    ds:0xc002eafd,al
c0018d6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d6f:	c1 e8 0c             	shr    eax,0xc
c0018d72:	83 e0 03             	and    eax,0x3
c0018d75:	a2 ff ea 02 c0       	mov    ds:0xc002eaff,al
c0018d7a:	a0 fd ea 02 c0       	mov    al,ds:0xc002eafd
c0018d7f:	0f b6 c0             	movzx  eax,al
c0018d82:	83 f8 06             	cmp    eax,0x6
c0018d85:	74 0d                	je     c0018d94 <HalDetectFeatures()+0xa1a>
c0018d87:	a0 fd ea 02 c0       	mov    al,ds:0xc002eafd
c0018d8c:	0f b6 c0             	movzx  eax,al
c0018d8f:	83 f8 0f             	cmp    eax,0xf
c0018d92:	75 18                	jne    c0018dac <HalDetectFeatures()+0xa32>
c0018d94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d98:	c1 e8 10             	shr    eax,0x10
c0018d9b:	c1 e0 04             	shl    eax,0x4
c0018d9e:	88 c2                	mov    dl,al
c0018da0:	a0 fe ea 02 c0       	mov    al,ds:0xc002eafe
c0018da5:	09 d0                	or     eax,edx
c0018da7:	a2 fe ea 02 c0       	mov    ds:0xc002eafe,al
c0018dac:	a0 fd ea 02 c0       	mov    al,ds:0xc002eafd
c0018db1:	0f b6 c0             	movzx  eax,al
c0018db4:	83 f8 0f             	cmp    eax,0xf
c0018db7:	75 15                	jne    c0018dce <HalDetectFeatures()+0xa54>
c0018db9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018dbd:	c1 e8 14             	shr    eax,0x14
c0018dc0:	88 c2                	mov    dl,al
c0018dc2:	a0 fd ea 02 c0       	mov    al,ds:0xc002eafd
c0018dc7:	01 d0                	add    eax,edx
c0018dc9:	a2 fd ea 02 c0       	mov    ds:0xc002eafd,al
c0018dce:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c0018dd6:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c0018dde:	85 c0                	test   eax,eax
c0018de0:	74 2d                	je     c0018e0f <HalDetectFeatures()+0xa95>
c0018de2:	83 ec 0c             	sub    esp,0xc
c0018de5:	68 00 00 00 40       	push   0x40000000
c0018dea:	e8 01 f5 ff ff       	call   c00182f0 <cpuidCheckECX(unsigned int)>
c0018def:	83 c4 10             	add    esp,0x10
c0018df2:	83 e0 01             	and    eax,0x1
c0018df5:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0018dfc:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018e01:	83 e0 fb             	and    eax,0xfffffffb
c0018e04:	88 c2                	mov    dl,al
c0018e06:	88 c8                	mov    al,cl
c0018e08:	09 d0                	or     eax,edx
c0018e0a:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018e0f:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0018e14:	83 c8 04             	or     eax,0x4
c0018e17:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0018e1c:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0018e21:	83 c8 08             	or     eax,0x8
c0018e24:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0018e29:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0018e2e:	83 c8 10             	or     eax,0x10
c0018e31:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0018e36:	83 ec 0c             	sub    esp,0xc
c0018e39:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018e3d:	50                   	push   eax
c0018e3e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018e42:	50                   	push   eax
c0018e43:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018e47:	50                   	push   eax
c0018e48:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0018e4c:	50                   	push   eax
c0018e4d:	68 00 00 00 80       	push   0x80000000
c0018e52:	e8 ce f3 ff ff       	call   c0018225 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e57:	83 c4 20             	add    esp,0x20
c0018e5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018e5e:	3d 00 00 00 80       	cmp    eax,0x80000000
c0018e63:	0f 86 96 01 00 00    	jbe    c0018fff <HalDetectFeatures()+0xc85>
c0018e69:	83 ec 0c             	sub    esp,0xc
c0018e6c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018e70:	50                   	push   eax
c0018e71:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018e75:	50                   	push   eax
c0018e76:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018e7a:	50                   	push   eax
c0018e7b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0018e7f:	50                   	push   eax
c0018e80:	68 01 00 00 80       	push   0x80000001
c0018e85:	e8 9b f3 ff ff       	call   c0018225 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e8a:	83 c4 20             	add    esp,0x20
c0018e8d:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0018e92:	83 e0 7f             	and    eax,0x7f
c0018e95:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0018e9a:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0018e9f:	83 e0 fb             	and    eax,0xfffffffb
c0018ea2:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0018ea7:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0018eac:	83 e0 fd             	and    eax,0xfffffffd
c0018eaf:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0018eb4:	e9 46 01 00 00       	jmp    c0018fff <HalDetectFeatures()+0xc85>
c0018eb9:	83 ec 08             	sub    esp,0x8
c0018ebc:	68 24 4b 02 c0       	push   0xc0024b24
c0018ec1:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018ec6:	e8 85 77 fe ff       	call   c0000650 <strcpy>
c0018ecb:	83 c4 10             	add    esp,0x10
c0018ece:	c7 05 04 eb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x1
c0018ed8:	e8 e6 72 fe ff       	call   c00001c3 <is486>
c0018edd:	85 c0                	test   eax,eax
c0018edf:	0f 95 c0             	setne  al
c0018ee2:	0f b6 c0             	movzx  eax,al
c0018ee5:	85 c0                	test   eax,eax
c0018ee7:	0f 84 8d 00 00 00    	je     c0018f7a <HalDetectFeatures()+0xc00>
c0018eed:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0018ef2:	83 c8 04             	or     eax,0x4
c0018ef5:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0018efa:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0018eff:	83 c8 08             	or     eax,0x8
c0018f02:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0018f07:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0018f0c:	83 c8 10             	or     eax,0x10
c0018f0f:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0018f14:	0f 20 c0             	mov    eax,cr0
c0018f17:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018f1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018f1f:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0018f26:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018f2d:	83 e0 04             	and    eax,0x4
c0018f30:	74 1e                	je     c0018f50 <HalDetectFeatures()+0xbd6>
c0018f32:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018f39:	83 e0 10             	and    eax,0x10
c0018f3c:	75 12                	jne    c0018f50 <HalDetectFeatures()+0xbd6>
c0018f3e:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0018f43:	83 e0 f7             	and    eax,0xfffffff7
c0018f46:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0018f4b:	e9 af 00 00 00       	jmp    c0018fff <HalDetectFeatures()+0xc85>
c0018f50:	e8 49 72 fe ff       	call   c000019e <hasLegacyFPU>
c0018f55:	83 e0 01             	and    eax,0x1
c0018f58:	83 e0 01             	and    eax,0x1
c0018f5b:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018f62:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0018f67:	83 e0 f7             	and    eax,0xfffffff7
c0018f6a:	88 c2                	mov    dl,al
c0018f6c:	88 c8                	mov    al,cl
c0018f6e:	09 d0                	or     eax,edx
c0018f70:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0018f75:	e9 85 00 00 00       	jmp    c0018fff <HalDetectFeatures()+0xc85>
c0018f7a:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0018f7f:	83 e0 fb             	and    eax,0xfffffffb
c0018f82:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0018f87:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0018f8c:	83 e0 f7             	and    eax,0xfffffff7
c0018f8f:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0018f94:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0018f99:	83 e0 ef             	and    eax,0xffffffef
c0018f9c:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0018fa1:	0f 20 c0             	mov    eax,cr0
c0018fa4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018fa8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fac:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0018fb3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018fba:	83 e0 04             	and    eax,0x4
c0018fbd:	74 1b                	je     c0018fda <HalDetectFeatures()+0xc60>
c0018fbf:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018fc6:	83 e0 10             	and    eax,0x10
c0018fc9:	75 0f                	jne    c0018fda <HalDetectFeatures()+0xc60>
c0018fcb:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0018fd0:	83 e0 f7             	and    eax,0xfffffff7
c0018fd3:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0018fd8:	eb 25                	jmp    c0018fff <HalDetectFeatures()+0xc85>
c0018fda:	e8 bf 71 fe ff       	call   c000019e <hasLegacyFPU>
c0018fdf:	83 e0 01             	and    eax,0x1
c0018fe2:	83 e0 01             	and    eax,0x1
c0018fe5:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018fec:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0018ff1:	83 e0 f7             	and    eax,0xfffffff7
c0018ff4:	88 c2                	mov    dl,al
c0018ff6:	88 c8                	mov    al,cl
c0018ff8:	09 d0                	or     eax,edx
c0018ffa:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0018fff:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0019004:	83 e0 08             	and    eax,0x8
c0019007:	0f b6 c0             	movzx  eax,al
c001900a:	85 c0                	test   eax,eax
c001900c:	75 25                	jne    c0019033 <HalDetectFeatures()+0xcb9>
c001900e:	e8 8b 71 fe ff       	call   c000019e <hasLegacyFPU>
c0019013:	83 e0 01             	and    eax,0x1
c0019016:	83 e0 01             	and    eax,0x1
c0019019:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019020:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0019025:	83 e0 f7             	and    eax,0xfffffff7
c0019028:	88 c2                	mov    dl,al
c001902a:	88 c8                	mov    al,cl
c001902c:	09 d0                	or     eax,edx
c001902e:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0019033:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0019038:	83 e0 08             	and    eax,0x8
c001903b:	0f b6 c0             	movzx  eax,al
c001903e:	85 c0                	test   eax,eax
c0019040:	74 0d                	je     c001904f <HalDetectFeatures()+0xcd5>
c0019042:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019047:	83 c8 10             	or     eax,0x10
c001904a:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c001904f:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019054:	83 e0 10             	and    eax,0x10
c0019057:	0f b6 c0             	movzx  eax,al
c001905a:	85 c0                	test   eax,eax
c001905c:	75 23                	jne    c0019081 <HalDetectFeatures()+0xd07>
c001905e:	e8 a3 7f 00 00       	call   c0021006 <x87Detect>
c0019063:	83 e0 01             	and    eax,0x1
c0019066:	83 e0 01             	and    eax,0x1
c0019069:	89 c1                	mov    ecx,eax
c001906b:	c1 e1 04             	shl    ecx,0x4
c001906e:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019073:	83 e0 ef             	and    eax,0xffffffef
c0019076:	88 c2                	mov    dl,al
c0019078:	88 c8                	mov    al,cl
c001907a:	09 d0                	or     eax,edx
c001907c:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0019081:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0019086:	83 e0 01             	and    eax,0x1
c0019089:	0f b6 c0             	movzx  eax,al
c001908c:	85 c0                	test   eax,eax
c001908e:	75 2d                	jne    c00190bd <HalDetectFeatures()+0xd43>
c0019090:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0019095:	83 e0 02             	and    eax,0x2
c0019098:	0f b6 c0             	movzx  eax,al
c001909b:	85 c0                	test   eax,eax
c001909d:	75 1e                	jne    c00190bd <HalDetectFeatures()+0xd43>
c001909f:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c00190a4:	83 e0 04             	and    eax,0x4
c00190a7:	0f b6 c0             	movzx  eax,al
c00190aa:	85 c0                	test   eax,eax
c00190ac:	75 0f                	jne    c00190bd <HalDetectFeatures()+0xd43>
c00190ae:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c00190b3:	83 e0 08             	and    eax,0x8
c00190b6:	0f b6 c0             	movzx  eax,al
c00190b9:	85 c0                	test   eax,eax
c00190bb:	74 0d                	je     c00190ca <HalDetectFeatures()+0xd50>
c00190bd:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00190c2:	83 c8 80             	or     eax,0xffffff80
c00190c5:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00190ca:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00190cf:	83 e0 10             	and    eax,0x10
c00190d2:	0f b6 c0             	movzx  eax,al
c00190d5:	85 c0                	test   eax,eax
c00190d7:	74 2f                	je     c0019108 <HalDetectFeatures()+0xd8e>
c00190d9:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00190de:	83 e0 80             	and    eax,0xffffff80
c00190e1:	0f b6 c0             	movzx  eax,al
c00190e4:	85 c0                	test   eax,eax
c00190e6:	75 20                	jne    c0019108 <HalDetectFeatures()+0xd8e>
c00190e8:	e8 d3 7e 00 00       	call   c0020fc0 <sseDetect>
c00190ed:	83 e0 01             	and    eax,0x1
c00190f0:	89 c1                	mov    ecx,eax
c00190f2:	c1 e1 07             	shl    ecx,0x7
c00190f5:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00190fa:	83 e0 7f             	and    eax,0x7f
c00190fd:	88 c2                	mov    dl,al
c00190ff:	88 c8                	mov    al,cl
c0019101:	09 d0                	or     eax,edx
c0019103:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0019108:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001910d:	83 e0 80             	and    eax,0xffffff80
c0019110:	0f b6 c0             	movzx  eax,al
c0019113:	85 c0                	test   eax,eax
c0019115:	74 1c                	je     c0019133 <HalDetectFeatures()+0xdb9>
c0019117:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c001911c:	83 e0 20             	and    eax,0x20
c001911f:	0f b6 c0             	movzx  eax,al
c0019122:	85 c0                	test   eax,eax
c0019124:	75 0d                	jne    c0019133 <HalDetectFeatures()+0xdb9>
c0019126:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c001912b:	83 e0 df             	and    eax,0xffffffdf
c001912e:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c0019133:	c6 05 08 eb 02 c0 00 	mov    BYTE PTR ds:0xc002eb08,0x0
c001913a:	90                   	nop
c001913b:	81 c4 90 00 00 00    	add    esp,0x90
c0019141:	5b                   	pop    ebx
c0019142:	5e                   	pop    esi
c0019143:	5f                   	pop    edi
c0019144:	c3                   	ret    

c0019145 <HalEnableNMI()>:
c0019145:	c6 05 ec ea 02 c0 01 	mov    BYTE PTR ds:0xc002eaec,0x1
c001914c:	6a 10                	push   0x10
c001914e:	e8 20 ef ff ff       	call   c0018073 <x86ReadCMOS(unsigned char)>
c0019153:	83 c4 04             	add    esp,0x4
c0019156:	90                   	nop
c0019157:	c3                   	ret    

c0019158 <HalDisableNMI()>:
c0019158:	c6 05 ec ea 02 c0 00 	mov    BYTE PTR ds:0xc002eaec,0x0
c001915f:	6a 10                	push   0x10
c0019161:	e8 0d ef ff ff       	call   c0018073 <x86ReadCMOS(unsigned char)>
c0019166:	83 c4 04             	add    esp,0x4
c0019169:	90                   	nop
c001916a:	c3                   	ret    

c001916b <HalGetNMIState()>:
c001916b:	a0 ec ea 02 c0       	mov    al,ds:0xc002eaec
c0019170:	c3                   	ret    

c0019171 <x86rdmsr(unsigned int)>:
c0019171:	83 ec 1c             	sub    esp,0x1c
c0019174:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019179:	83 e0 08             	and    eax,0x8
c001917c:	0f b6 c0             	movzx  eax,al
c001917f:	85 c0                	test   eax,eax
c0019181:	75 10                	jne    c0019193 <x86rdmsr(unsigned int)+0x22>
c0019183:	83 ec 0c             	sub    esp,0xc
c0019186:	68 bf 4b 02 c0       	push   0xc0024bbf
c001918b:	e8 26 6c ff ff       	call   c000fdb6 <KePanic(char const*)>
c0019190:	83 c4 10             	add    esp,0x10
c0019193:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019197:	89 c1                	mov    ecx,eax
c0019199:	0f 32                	rdmsr  
c001919b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001919f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00191a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00191a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00191ab:	83 c4 1c             	add    esp,0x1c
c00191ae:	c3                   	ret    

c00191af <x86wrmsr(unsigned int, unsigned long long)>:
c00191af:	83 ec 1c             	sub    esp,0x1c
c00191b2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00191b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00191ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00191be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00191c2:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00191c7:	83 e0 08             	and    eax,0x8
c00191ca:	0f b6 c0             	movzx  eax,al
c00191cd:	85 c0                	test   eax,eax
c00191cf:	75 10                	jne    c00191e1 <x86wrmsr(unsigned int, unsigned long long)+0x32>
c00191d1:	83 ec 0c             	sub    esp,0xc
c00191d4:	68 c5 4b 02 c0       	push   0xc0024bc5
c00191d9:	e8 d8 6b ff ff       	call   c000fdb6 <KePanic(char const*)>
c00191de:	83 c4 10             	add    esp,0x10
c00191e1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00191e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00191e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00191ed:	0f 30                	wrmsr  
c00191ef:	90                   	nop
c00191f0:	83 c4 1c             	add    esp,0x1c
c00191f3:	c3                   	ret    

c00191f4 <HalHandleGeneralProtectionFault(void*, void*)>:
c00191f4:	83 ec 0c             	sub    esp,0xc
c00191f7:	83 ec 0c             	sub    esp,0xc
c00191fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00191fe:	e8 40 e7 ff ff       	call   c0017943 <Vm::faultHandler(regs*)>
c0019203:	83 c4 10             	add    esp,0x10
c0019206:	83 c4 0c             	add    esp,0xc
c0019209:	c3                   	ret    

c001920a <HalFindRSDP()>:
c001920a:	83 ec 1c             	sub    esp,0x1c
c001920d:	a1 40 e1 02 c0       	mov    eax,ds:0xc002e140
c0019212:	3d ff 07 00 00       	cmp    eax,0x7ff
c0019217:	7e 0c                	jle    c0019225 <HalFindRSDP()+0x1b>
c0019219:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c001921e:	25 00 04 00 00       	and    eax,0x400
c0019223:	74 0d                	je     c0019232 <HalFindRSDP()+0x28>
c0019225:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001922a:	83 e0 fb             	and    eax,0xfffffffb
c001922d:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0019232:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019237:	83 e0 04             	and    eax,0x4
c001923a:	0f b6 c0             	movzx  eax,al
c001923d:	85 c0                	test   eax,eax
c001923f:	75 07                	jne    c0019248 <HalFindRSDP()+0x3e>
c0019241:	b8 00 00 00 00       	mov    eax,0x0
c0019246:	eb 53                	jmp    c001929b <HalFindRSDP()+0x91>
c0019248:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0019250:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0019258:	77 2f                	ja     c0019289 <HalFindRSDP()+0x7f>
c001925a:	83 ec 04             	sub    esp,0x4
c001925d:	6a 08                	push   0x8
c001925f:	68 cb 4b 02 c0       	push   0xc0024bcb
c0019264:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019268:	e8 13 71 fe ff       	call   c0000380 <memcmp>
c001926d:	83 c4 10             	add    esp,0x10
c0019270:	85 c0                	test   eax,eax
c0019272:	0f 94 c0             	sete   al
c0019275:	0f b6 c0             	movzx  eax,al
c0019278:	85 c0                	test   eax,eax
c001927a:	74 06                	je     c0019282 <HalFindRSDP()+0x78>
c001927c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019280:	eb 19                	jmp    c001929b <HalFindRSDP()+0x91>
c0019282:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0019287:	eb c7                	jmp    c0019250 <HalFindRSDP()+0x46>
c0019289:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001928e:	83 e0 fb             	and    eax,0xfffffffb
c0019291:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0019296:	b8 00 00 00 00       	mov    eax,0x0
c001929b:	83 c4 1c             	add    esp,0x1c
c001929e:	c3                   	ret    

c001929f <HalHandlePageFault(void*, void*)>:
c001929f:	83 ec 1c             	sub    esp,0x1c
c00192a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00192a6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00192a9:	83 ec 08             	sub    esp,0x8
c00192ac:	50                   	push   eax
c00192ad:	68 10 4e 02 c0       	push   0xc0024e10
c00192b2:	e8 97 dc fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00192b7:	83 c4 10             	add    esp,0x10
c00192ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00192be:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00192c1:	83 ec 08             	sub    esp,0x8
c00192c4:	50                   	push   eax
c00192c5:	68 d4 4b 02 c0       	push   0xc0024bd4
c00192ca:	e8 7f dc fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00192cf:	83 c4 10             	add    esp,0x10
c00192d2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00192d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00192d9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00192dc:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00192e2:	0f 20 d2             	mov    edx,cr2
c00192e5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00192e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00192ed:	83 ec 08             	sub    esp,0x8
c00192f0:	52                   	push   edx
c00192f1:	50                   	push   eax
c00192f2:	e8 4d ac ff ff       	call   c0013f44 <VAS::tryLoadBackOffDisk(unsigned long)>
c00192f7:	83 c4 10             	add    esp,0x10
c00192fa:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00192fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019302:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019305:	83 ec 08             	sub    esp,0x8
c0019308:	50                   	push   eax
c0019309:	68 e9 4b 02 c0       	push   0xc0024be9
c001930e:	e8 3b dc fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019313:	83 c4 10             	add    esp,0x10
c0019316:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001931a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001931d:	83 ec 08             	sub    esp,0x8
c0019320:	50                   	push   eax
c0019321:	68 03 4c 02 c0       	push   0xc0024c03
c0019326:	e8 23 dc fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001932b:	83 c4 10             	add    esp,0x10
c001932e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0019333:	83 ec 08             	sub    esp,0x8
c0019336:	50                   	push   eax
c0019337:	68 18 4c 02 c0       	push   0xc0024c18
c001933c:	e8 0d dc fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019341:	83 c4 10             	add    esp,0x10
c0019344:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019348:	83 c4 1c             	add    esp,0x1c
c001934b:	c3                   	ret    

c001934c <HalHandleOpcodeFault(void*, void*)>:
c001934c:	83 ec 1c             	sub    esp,0x1c
c001934f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019357:	a0 08 eb 02 c0       	mov    al,ds:0xc002eb08
c001935c:	0f b6 c0             	movzx  eax,al
c001935f:	85 c0                	test   eax,eax
c0019361:	74 25                	je     c0019388 <HalHandleOpcodeFault(void*, void*)+0x3c>
c0019363:	83 ec 0c             	sub    esp,0xc
c0019366:	68 44 4e 02 c0       	push   0xc0024e44
c001936b:	e8 de db fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019370:	83 c4 10             	add    esp,0x10
c0019373:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019377:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001937a:	8d 50 19             	lea    edx,[eax+0x19]
c001937d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019381:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019384:	b0 01                	mov    al,0x1
c0019386:	eb 02                	jmp    c001938a <HalHandleOpcodeFault(void*, void*)+0x3e>
c0019388:	b0 00                	mov    al,0x0
c001938a:	83 c4 1c             	add    esp,0x1c
c001938d:	c3                   	ret    

c001938e <HalDisplayDebugInfo(void*)>:
c001938e:	83 ec 2c             	sub    esp,0x2c
c0019391:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019395:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019399:	0f 20 c0             	mov    eax,cr0
c001939c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00193a0:	0f 20 d0             	mov    eax,cr2
c00193a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00193a7:	0f 20 d8             	mov    eax,cr3
c00193aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00193ae:	0f 20 e0             	mov    eax,cr4
c00193b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00193b9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00193bc:	83 ec 08             	sub    esp,0x8
c00193bf:	50                   	push   eax
c00193c0:	68 33 4c 02 c0       	push   0xc0024c33
c00193c5:	e8 84 db fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00193ca:	83 c4 10             	add    esp,0x10
c00193cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00193d1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00193d4:	83 ec 08             	sub    esp,0x8
c00193d7:	50                   	push   eax
c00193d8:	68 24 4c 02 c0       	push   0xc0024c24
c00193dd:	e8 6c db fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00193e2:	83 c4 10             	add    esp,0x10
c00193e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00193e9:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00193ec:	83 ec 08             	sub    esp,0x8
c00193ef:	50                   	push   eax
c00193f0:	68 2f 4c 02 c0       	push   0xc0024c2f
c00193f5:	e8 54 db fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00193fa:	83 c4 10             	add    esp,0x10
c00193fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019401:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019404:	83 ec 08             	sub    esp,0x8
c0019407:	50                   	push   eax
c0019408:	68 3e 4c 02 c0       	push   0xc0024c3e
c001940d:	e8 3c db fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019412:	83 c4 10             	add    esp,0x10
c0019415:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019419:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001941c:	83 ec 08             	sub    esp,0x8
c001941f:	50                   	push   eax
c0019420:	68 49 4c 02 c0       	push   0xc0024c49
c0019425:	e8 24 db fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001942a:	83 c4 10             	add    esp,0x10
c001942d:	83 ec 08             	sub    esp,0x8
c0019430:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019434:	68 54 4c 02 c0       	push   0xc0024c54
c0019439:	e8 10 db fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001943e:	83 c4 10             	add    esp,0x10
c0019441:	83 ec 08             	sub    esp,0x8
c0019444:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019448:	68 5f 4c 02 c0       	push   0xc0024c5f
c001944d:	e8 fc da fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019452:	83 c4 10             	add    esp,0x10
c0019455:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019459:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001945c:	c1 e0 05             	shl    eax,0x5
c001945f:	8d 90 60 61 02 c0    	lea    edx,[eax-0x3ffd9ea0]
c0019465:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019469:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001946c:	83 ec 04             	sub    esp,0x4
c001946f:	52                   	push   edx
c0019470:	50                   	push   eax
c0019471:	68 6a 4c 02 c0       	push   0xc0024c6a
c0019476:	e8 d3 da fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001947b:	83 c4 10             	add    esp,0x10
c001947e:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019483:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019489:	83 ec 0c             	sub    esp,0xc
c001948c:	50                   	push   eax
c001948d:	e8 8d 8d ff ff       	call   c001221f <setActiveTerminal(VgaText*)>
c0019492:	83 c4 10             	add    esp,0x10
c0019495:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001949a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00194a0:	83 ec 08             	sub    esp,0x8
c00194a3:	68 79 4c 02 c0       	push   0xc0024c79
c00194a8:	50                   	push   eax
c00194a9:	e8 ae 90 ff ff       	call   c001255c <VgaText::puts(char const*)>
c00194ae:	83 c4 10             	add    esp,0x10
c00194b1:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00194b6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00194bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00194c0:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00194c3:	83 ec 08             	sub    esp,0x8
c00194c6:	52                   	push   edx
c00194c7:	50                   	push   eax
c00194c8:	e8 49 90 ff ff       	call   c0012516 <VgaText::putx(unsigned int)>
c00194cd:	83 c4 10             	add    esp,0x10
c00194d0:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00194d5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00194db:	83 ec 08             	sub    esp,0x8
c00194de:	68 87 4c 02 c0       	push   0xc0024c87
c00194e3:	50                   	push   eax
c00194e4:	e8 73 90 ff ff       	call   c001255c <VgaText::puts(char const*)>
c00194e9:	83 c4 10             	add    esp,0x10
c00194ec:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00194f1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00194f7:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00194fc:	8b 12                	mov    edx,DWORD PTR [edx]
c00194fe:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0019501:	83 c2 0c             	add    edx,0xc
c0019504:	83 ec 08             	sub    esp,0x8
c0019507:	52                   	push   edx
c0019508:	50                   	push   eax
c0019509:	e8 4e 90 ff ff       	call   c001255c <VgaText::puts(char const*)>
c001950e:	83 c4 10             	add    esp,0x10
c0019511:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019516:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001951c:	83 ec 08             	sub    esp,0x8
c001951f:	68 90 4c 02 c0       	push   0xc0024c90
c0019524:	50                   	push   eax
c0019525:	e8 32 90 ff ff       	call   c001255c <VgaText::puts(char const*)>
c001952a:	83 c4 10             	add    esp,0x10
c001952d:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019532:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001953c:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001953f:	83 ec 08             	sub    esp,0x8
c0019542:	52                   	push   edx
c0019543:	50                   	push   eax
c0019544:	e8 cd 8f ff ff       	call   c0012516 <VgaText::putx(unsigned int)>
c0019549:	83 c4 10             	add    esp,0x10
c001954c:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019551:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019557:	83 ec 08             	sub    esp,0x8
c001955a:	68 98 4c 02 c0       	push   0xc0024c98
c001955f:	50                   	push   eax
c0019560:	e8 f7 8f ff ff       	call   c001255c <VgaText::puts(char const*)>
c0019565:	83 c4 10             	add    esp,0x10
c0019568:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001956d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019573:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019577:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001957a:	83 ec 08             	sub    esp,0x8
c001957d:	52                   	push   edx
c001957e:	50                   	push   eax
c001957f:	e8 92 8f ff ff       	call   c0012516 <VgaText::putx(unsigned int)>
c0019584:	83 c4 10             	add    esp,0x10
c0019587:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001958c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019592:	83 ec 08             	sub    esp,0x8
c0019595:	68 a0 4c 02 c0       	push   0xc0024ca0
c001959a:	50                   	push   eax
c001959b:	e8 bc 8f ff ff       	call   c001255c <VgaText::puts(char const*)>
c00195a0:	83 c4 10             	add    esp,0x10
c00195a3:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00195a8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00195ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00195b2:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00195b5:	83 ec 08             	sub    esp,0x8
c00195b8:	52                   	push   edx
c00195b9:	50                   	push   eax
c00195ba:	e8 57 8f ff ff       	call   c0012516 <VgaText::putx(unsigned int)>
c00195bf:	83 c4 10             	add    esp,0x10
c00195c2:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00195c7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00195cd:	83 ec 08             	sub    esp,0x8
c00195d0:	68 a8 4c 02 c0       	push   0xc0024ca8
c00195d5:	50                   	push   eax
c00195d6:	e8 81 8f ff ff       	call   c001255c <VgaText::puts(char const*)>
c00195db:	83 c4 10             	add    esp,0x10
c00195de:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00195e3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00195e9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00195ed:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00195f0:	83 ec 08             	sub    esp,0x8
c00195f3:	52                   	push   edx
c00195f4:	50                   	push   eax
c00195f5:	e8 1c 8f ff ff       	call   c0012516 <VgaText::putx(unsigned int)>
c00195fa:	83 c4 10             	add    esp,0x10
c00195fd:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019602:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019608:	83 ec 08             	sub    esp,0x8
c001960b:	68 b0 4c 02 c0       	push   0xc0024cb0
c0019610:	50                   	push   eax
c0019611:	e8 46 8f ff ff       	call   c001255c <VgaText::puts(char const*)>
c0019616:	83 c4 10             	add    esp,0x10
c0019619:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001961e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019624:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019628:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001962b:	83 ec 08             	sub    esp,0x8
c001962e:	52                   	push   edx
c001962f:	50                   	push   eax
c0019630:	e8 e1 8e ff ff       	call   c0012516 <VgaText::putx(unsigned int)>
c0019635:	83 c4 10             	add    esp,0x10
c0019638:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001963d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019643:	83 ec 08             	sub    esp,0x8
c0019646:	68 b8 4c 02 c0       	push   0xc0024cb8
c001964b:	50                   	push   eax
c001964c:	e8 0b 8f ff ff       	call   c001255c <VgaText::puts(char const*)>
c0019651:	83 c4 10             	add    esp,0x10
c0019654:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019659:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001965f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019663:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0019666:	83 ec 08             	sub    esp,0x8
c0019669:	52                   	push   edx
c001966a:	50                   	push   eax
c001966b:	e8 a6 8e ff ff       	call   c0012516 <VgaText::putx(unsigned int)>
c0019670:	83 c4 10             	add    esp,0x10
c0019673:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019678:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001967e:	83 ec 08             	sub    esp,0x8
c0019681:	68 c0 4c 02 c0       	push   0xc0024cc0
c0019686:	50                   	push   eax
c0019687:	e8 d0 8e ff ff       	call   c001255c <VgaText::puts(char const*)>
c001968c:	83 c4 10             	add    esp,0x10
c001968f:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019694:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001969a:	83 ec 08             	sub    esp,0x8
c001969d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00196a1:	50                   	push   eax
c00196a2:	e8 6f 8e ff ff       	call   c0012516 <VgaText::putx(unsigned int)>
c00196a7:	83 c4 10             	add    esp,0x10
c00196aa:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00196af:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00196b5:	83 ec 08             	sub    esp,0x8
c00196b8:	68 c9 4c 02 c0       	push   0xc0024cc9
c00196bd:	50                   	push   eax
c00196be:	e8 99 8e ff ff       	call   c001255c <VgaText::puts(char const*)>
c00196c3:	83 c4 10             	add    esp,0x10
c00196c6:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00196cb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00196d1:	83 ec 08             	sub    esp,0x8
c00196d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00196d8:	50                   	push   eax
c00196d9:	e8 38 8e ff ff       	call   c0012516 <VgaText::putx(unsigned int)>
c00196de:	83 c4 10             	add    esp,0x10
c00196e1:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00196e6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00196ec:	83 ec 08             	sub    esp,0x8
c00196ef:	68 d1 4c 02 c0       	push   0xc0024cd1
c00196f4:	50                   	push   eax
c00196f5:	e8 62 8e ff ff       	call   c001255c <VgaText::puts(char const*)>
c00196fa:	83 c4 10             	add    esp,0x10
c00196fd:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019702:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019708:	83 ec 08             	sub    esp,0x8
c001970b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001970f:	50                   	push   eax
c0019710:	e8 01 8e ff ff       	call   c0012516 <VgaText::putx(unsigned int)>
c0019715:	83 c4 10             	add    esp,0x10
c0019718:	fa                   	cli    
c0019719:	f4                   	hlt    
c001971a:	eb fe                	jmp    c001971a <HalDisplayDebugInfo(void*)+0x38c>

c001971c <HalReceivedNMI()>:
c001971c:	83 ec 1c             	sub    esp,0x1c
c001971f:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c0019726:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001972a:	89 c2                	mov    edx,eax
c001972c:	ec                   	in     al,dx
c001972d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0019731:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0019735:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019739:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c0019740:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019744:	89 c2                	mov    edx,eax
c0019746:	ec                   	in     al,dx
c0019747:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001974b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001974f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0019753:	83 ec 0c             	sub    esp,0xc
c0019756:	68 d9 4c 02 c0       	push   0xc0024cd9
c001975b:	e8 ee d7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019760:	83 c4 10             	add    esp,0x10
c0019763:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0019768:	83 e0 10             	and    eax,0x10
c001976b:	74 10                	je     c001977d <HalReceivedNMI()+0x61>
c001976d:	83 ec 0c             	sub    esp,0xc
c0019770:	68 ea 4c 02 c0       	push   0xc0024cea
c0019775:	e8 3c 66 ff ff       	call   c000fdb6 <KePanic(char const*)>
c001977a:	83 c4 10             	add    esp,0x10
c001977d:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0019782:	83 e0 40             	and    eax,0x40
c0019785:	74 10                	je     c0019797 <HalReceivedNMI()+0x7b>
c0019787:	83 ec 0c             	sub    esp,0xc
c001978a:	68 f7 4c 02 c0       	push   0xc0024cf7
c001978f:	e8 22 66 ff ff       	call   c000fdb6 <KePanic(char const*)>
c0019794:	83 c4 10             	add    esp,0x10
c0019797:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001979b:	0f be c0             	movsx  eax,al
c001979e:	85 c0                	test   eax,eax
c00197a0:	79 10                	jns    c00197b2 <HalReceivedNMI()+0x96>
c00197a2:	83 ec 0c             	sub    esp,0xc
c00197a5:	68 01 4d 02 c0       	push   0xc0024d01
c00197aa:	e8 07 66 ff ff       	call   c000fdb6 <KePanic(char const*)>
c00197af:	83 c4 10             	add    esp,0x10
c00197b2:	90                   	nop
c00197b3:	83 c4 1c             	add    esp,0x1c
c00197b6:	c3                   	ret    

c00197b7 <HalSystemIdle()>:
c00197b7:	56                   	push   esi
c00197b8:	53                   	push   ebx
c00197b9:	83 ec 14             	sub    esp,0x14
c00197bc:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00197c1:	83 e0 10             	and    eax,0x10
c00197c4:	0f b6 c0             	movzx  eax,al
c00197c7:	85 c0                	test   eax,eax
c00197c9:	74 43                	je     c001980e <HalSystemIdle()+0x57>
c00197cb:	83 ec 0c             	sub    esp,0xc
c00197ce:	68 e1 00 00 00       	push   0xe1
c00197d3:	e8 99 f9 ff ff       	call   c0019171 <x86rdmsr(unsigned int)>
c00197d8:	83 c4 10             	add    esp,0x10
c00197db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00197df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00197e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197e7:	83 e0 02             	and    eax,0x2
c00197ea:	89 c3                	mov    ebx,eax
c00197ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00197f0:	83 e0 00             	and    eax,0x0
c00197f3:	89 c6                	mov    esi,eax
c00197f5:	83 ec 04             	sub    esp,0x4
c00197f8:	56                   	push   esi
c00197f9:	53                   	push   ebx
c00197fa:	68 e1 00 00 00       	push   0xe1
c00197ff:	e8 ab f9 ff ff       	call   c00191af <x86wrmsr(unsigned int, unsigned long long)>
c0019804:	83 c4 10             	add    esp,0x10
c0019807:	e8 88 69 fe ff       	call   c0000194 <doTPAUSE>
c001980c:	eb 01                	jmp    c001980f <HalSystemIdle()+0x58>
c001980e:	f4                   	hlt    
c001980f:	90                   	nop
c0019810:	83 c4 14             	add    esp,0x14
c0019813:	5b                   	pop    ebx
c0019814:	5e                   	pop    esi
c0019815:	c3                   	ret    

c0019816 <i386SaveCoprocessor(void*)>:
c0019816:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001981a:	83 c0 3f             	add    eax,0x3f
c001981d:	83 e0 c0             	and    eax,0xffffffc0
c0019820:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019824:	ff 25 d0 ea 02 c0    	jmp    DWORD PTR ds:0xc002ead0

c001982a <i386LoadCoprocessor(void*)>:
c001982a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001982e:	83 c0 3f             	add    eax,0x3f
c0019831:	83 e0 c0             	and    eax,0xffffffc0
c0019834:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019838:	ff 25 cc ea 02 c0    	jmp    DWORD PTR ds:0xc002eacc

c001983e <x87EmulHandler(regs*, void*)>:
c001983e:	53                   	push   ebx
c001983f:	83 ec 08             	sub    esp,0x8
c0019842:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019847:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c001984b:	74 10                	je     c001985d <x87EmulHandler(regs*, void*)+0x1f>
c001984d:	83 ec 0c             	sub    esp,0xc
c0019850:	68 0e 4d 02 c0       	push   0xc0024d0e
c0019855:	e8 5c 65 ff ff       	call   c000fdb6 <KePanic(char const*)>
c001985a:	83 c4 10             	add    esp,0x10
c001985d:	0f 20 c0             	mov    eax,cr0
c0019860:	a8 08                	test   al,0x8
c0019862:	74 59                	je     c00198bd <x87EmulHandler(regs*, void*)+0x7f>
c0019864:	0f 06                	clts   
c0019866:	a1 c8 ea 02 c0       	mov    eax,ds:0xc002eac8
c001986b:	85 c0                	test   eax,eax
c001986d:	74 0e                	je     c001987d <x87EmulHandler(regs*, void*)+0x3f>
c001986f:	83 ec 0c             	sub    esp,0xc
c0019872:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0019875:	e8 9c ff ff ff       	call   c0019816 <i386SaveCoprocessor(void*)>
c001987a:	83 c4 10             	add    esp,0x10
c001987d:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0019883:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0019887:	75 12                	jne    c001989b <x87EmulHandler(regs*, void*)+0x5d>
c0019889:	83 ec 0c             	sub    esp,0xc
c001988c:	68 40 02 00 00       	push   0x240
c0019891:	e8 da 61 ff ff       	call   c000fa70 <malloc>
c0019896:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0019899:	eb 10                	jmp    c00198ab <x87EmulHandler(regs*, void*)+0x6d>
c001989b:	a1 c8 ea 02 c0       	mov    eax,ds:0xc002eac8
c00198a0:	83 ec 0c             	sub    esp,0xc
c00198a3:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00198a6:	e8 7f ff ff ff       	call   c001982a <i386LoadCoprocessor(void*)>
c00198ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00198b0:	83 c4 10             	add    esp,0x10
c00198b3:	a3 c8 ea 02 c0       	mov    ds:0xc002eac8,eax
c00198b8:	83 c4 08             	add    esp,0x8
c00198bb:	5b                   	pop    ebx
c00198bc:	c3                   	ret    
c00198bd:	83 ec 0c             	sub    esp,0xc
c00198c0:	68 22 4d 02 c0       	push   0xc0024d22
c00198c5:	e8 84 d6 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00198ca:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00198d2:	83 c4 18             	add    esp,0x18
c00198d5:	5b                   	pop    ebx
c00198d6:	e9 ad d9 ff ff       	jmp    c0017288 <Thr::terminateFromIRQ(int)>

c00198db <HalInitialiseCoprocessor()>:
c00198db:	83 ec 10             	sub    esp,0x10
c00198de:	6a 00                	push   0x0
c00198e0:	68 3e 98 01 c0       	push   0xc001983e
c00198e5:	6a 07                	push   0x7
c00198e7:	c7 05 c8 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eac8,0x0
c00198f1:	e8 9d 06 00 00       	call   c0019f93 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00198f6:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00198fb:	83 c4 10             	add    esp,0x10
c00198fe:	a8 80                	test   al,0x80
c0019900:	74 1c                	je     c001991e <HalInitialiseCoprocessor()+0x43>
c0019902:	c7 05 d0 ea 02 c0 d8 0f 02 c0 	mov    DWORD PTR ds:0xc002ead0,0xc0020fd8
c001990c:	c7 05 cc ea 02 c0 e0 0f 02 c0 	mov    DWORD PTR ds:0xc002eacc,0xc0020fe0
c0019916:	83 c4 0c             	add    esp,0xc
c0019919:	e9 ca 76 00 00       	jmp    c0020fe8 <sseInit>
c001991e:	a8 10                	test   al,0x10
c0019920:	74 1c                	je     c001993e <HalInitialiseCoprocessor()+0x63>
c0019922:	c7 05 d0 ea 02 c0 27 10 02 c0 	mov    DWORD PTR ds:0xc002ead0,0xc0021027
c001992c:	c7 05 cc ea 02 c0 2e 10 02 c0 	mov    DWORD PTR ds:0xc002eacc,0xc002102e
c0019936:	83 c4 0c             	add    esp,0xc
c0019939:	e9 f7 76 00 00       	jmp    c0021035 <x87Init>
c001993e:	c7 05 d0 ea 02 c0 6e 80 01 c0 	mov    DWORD PTR ds:0xc002ead0,0xc001806e
c0019948:	c7 05 cc ea 02 c0 6e 80 01 c0 	mov    DWORD PTR ds:0xc002eacc,0xc001806e
c0019952:	0f 20 c0             	mov    eax,cr0
c0019955:	83 c8 04             	or     eax,0x4
c0019958:	0f 22 c0             	mov    cr0,eax
c001995b:	83 c4 0c             	add    esp,0xc
c001995e:	c3                   	ret    

c001995f <HalPanic(char const*)>:
c001995f:	53                   	push   ebx
c0019960:	83 ec 10             	sub    esp,0x10
c0019963:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019967:	fa                   	cli    
c0019968:	53                   	push   ebx
c0019969:	68 38 4d 02 c0       	push   0xc0024d38
c001996e:	e8 db d5 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019973:	a1 c4 ea 02 c0       	mov    eax,ds:0xc002eac4
c0019978:	83 c4 10             	add    esp,0x10
c001997b:	85 c0                	test   eax,eax
c001997d:	74 09                	je     c0019988 <HalPanic(char const*)+0x29>
c001997f:	83 ec 0c             	sub    esp,0xc
c0019982:	53                   	push   ebx
c0019983:	ff d0                	call   eax
c0019985:	83 c4 10             	add    esp,0x10
c0019988:	a1 b4 e1 02 c0       	mov    eax,ds:0xc002e1b4
c001998d:	85 c0                	test   eax,eax
c001998f:	0f 84 dc 00 00 00    	je     c0019a71 <HalPanic(char const*)+0x112>
c0019995:	52                   	push   edx
c0019996:	6a 01                	push   0x1
c0019998:	6a 0f                	push   0xf
c001999a:	50                   	push   eax
c001999b:	e8 be 86 ff ff       	call   c001205e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00199a0:	59                   	pop    ecx
c00199a1:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c00199a7:	e8 be 88 ff ff       	call   c001226a <VgaText::clearScreen()>
c00199ac:	58                   	pop    eax
c00199ad:	5a                   	pop    edx
c00199ae:	68 db 3d 02 c0       	push   0xc0023ddb
c00199b3:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c00199b9:	e8 d8 86 ff ff       	call   c0012096 <VgaText::setTitle(char*)>
c00199be:	83 c4 0c             	add    esp,0xc
c00199c1:	6a 01                	push   0x1
c00199c3:	6a 0f                	push   0xf
c00199c5:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c00199cb:	e8 8e 86 ff ff       	call   c001205e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00199d0:	59                   	pop    ecx
c00199d1:	58                   	pop    eax
c00199d2:	68 51 4d 02 c0       	push   0xc0024d51
c00199d7:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c00199dd:	e8 7a 8b ff ff       	call   c001255c <VgaText::puts(char const*)>
c00199e2:	83 c4 0c             	add    esp,0xc
c00199e5:	6a 0f                	push   0xf
c00199e7:	6a 01                	push   0x1
c00199e9:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c00199ef:	e8 6a 86 ff ff       	call   c001205e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00199f4:	58                   	pop    eax
c00199f5:	5a                   	pop    edx
c00199f6:	68 5a 4d 02 c0       	push   0xc0024d5a
c00199fb:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019a01:	e8 56 8b ff ff       	call   c001255c <VgaText::puts(char const*)>
c0019a06:	83 c4 0c             	add    esp,0xc
c0019a09:	6a 01                	push   0x1
c0019a0b:	6a 0f                	push   0xf
c0019a0d:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019a13:	e8 46 86 ff ff       	call   c001205e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019a18:	59                   	pop    ecx
c0019a19:	58                   	pop    eax
c0019a1a:	68 9e 4d 02 c0       	push   0xc0024d9e
c0019a1f:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019a25:	e8 32 8b ff ff       	call   c001255c <VgaText::puts(char const*)>
c0019a2a:	58                   	pop    eax
c0019a2b:	5a                   	pop    edx
c0019a2c:	68 67 4d 02 c0       	push   0xc0024d67
c0019a31:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019a37:	e8 20 8b ff ff       	call   c001255c <VgaText::puts(char const*)>
c0019a3c:	59                   	pop    ecx
c0019a3d:	58                   	pop    eax
c0019a3e:	68 a1 4d 02 c0       	push   0xc0024da1
c0019a43:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019a49:	e8 0e 8b ff ff       	call   c001255c <VgaText::puts(char const*)>
c0019a4e:	58                   	pop    eax
c0019a4f:	5a                   	pop    edx
c0019a50:	53                   	push   ebx
c0019a51:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019a57:	e8 00 8b ff ff       	call   c001255c <VgaText::puts(char const*)>
c0019a5c:	59                   	pop    ecx
c0019a5d:	5b                   	pop    ebx
c0019a5e:	68 9e 4d 02 c0       	push   0xc0024d9e
c0019a63:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019a69:	e8 ee 8a ff ff       	call   c001255c <VgaText::puts(char const*)>
c0019a6e:	83 c4 10             	add    esp,0x10
c0019a71:	eb fe                	jmp    c0019a71 <HalPanic(char const*)+0x112>

c0019a73 <HalQueryPerformanceCounter()>:
c0019a73:	31 c0                	xor    eax,eax
c0019a75:	31 d2                	xor    edx,edx
c0019a77:	f6 05 0e eb 02 c0 08 	test   BYTE PTR ds:0xc002eb0e,0x8
c0019a7e:	75 02                	jne    c0019a82 <HalQueryPerformanceCounter()+0xf>
c0019a80:	0f 31                	rdtsc  
c0019a82:	c3                   	ret    

c0019a83 <HalInitialise()>:
c0019a83:	53                   	push   ebx
c0019a84:	83 ec 08             	sub    esp,0x8
c0019a87:	c6 05 c0 ea 02 c0 00 	mov    BYTE PTR ds:0xc002eac0,0x0
c0019a8e:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019a93:	83 e0 fe             	and    eax,0xfffffffe
c0019a96:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0019a9b:	e8 d8 07 00 00       	call   c001a278 <picOpen()>
c0019aa0:	80 3d c0 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002eac0,0x0
c0019aa7:	74 0a                	je     c0019ab3 <HalInitialise()+0x30>
c0019aa9:	e8 1a 07 00 00       	call   c001a1c8 <picDisable()>
c0019aae:	e8 05 6b 00 00       	call   c00205b8 <apicOpen()>
c0019ab3:	50                   	push   eax
c0019ab4:	bb 0f 00 00 00       	mov    ebx,0xf
c0019ab9:	6a 00                	push   0x0
c0019abb:	68 1c eb 00 c0       	push   0xc000eb1c
c0019ac0:	6a 00                	push   0x0
c0019ac2:	e8 cc 04 00 00       	call   c0019f93 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019ac7:	83 c4 0c             	add    esp,0xc
c0019aca:	6a 00                	push   0x0
c0019acc:	68 1c eb 00 c0       	push   0xc000eb1c
c0019ad1:	6a 01                	push   0x1
c0019ad3:	e8 bb 04 00 00       	call   c0019f93 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019ad8:	83 c4 0c             	add    esp,0xc
c0019adb:	6a 00                	push   0x0
c0019add:	68 0c eb 00 c0       	push   0xc000eb0c
c0019ae2:	6a 02                	push   0x2
c0019ae4:	e8 aa 04 00 00       	call   c0019f93 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019ae9:	83 c4 0c             	add    esp,0xc
c0019aec:	6a 00                	push   0x0
c0019aee:	68 1c eb 00 c0       	push   0xc000eb1c
c0019af3:	6a 03                	push   0x3
c0019af5:	e8 99 04 00 00       	call   c0019f93 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019afa:	83 c4 0c             	add    esp,0xc
c0019afd:	6a 00                	push   0x0
c0019aff:	68 1c eb 00 c0       	push   0xc000eb1c
c0019b04:	6a 04                	push   0x4
c0019b06:	e8 88 04 00 00       	call   c0019f93 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019b0b:	83 c4 0c             	add    esp,0xc
c0019b0e:	6a 00                	push   0x0
c0019b10:	68 1c eb 00 c0       	push   0xc000eb1c
c0019b15:	6a 05                	push   0x5
c0019b17:	e8 77 04 00 00       	call   c0019f93 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019b1c:	83 c4 0c             	add    esp,0xc
c0019b1f:	6a 00                	push   0x0
c0019b21:	68 50 eb 00 c0       	push   0xc000eb50
c0019b26:	6a 06                	push   0x6
c0019b28:	e8 66 04 00 00       	call   c0019f93 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019b2d:	83 c4 0c             	add    esp,0xc
c0019b30:	6a 00                	push   0x0
c0019b32:	68 a4 eb 00 c0       	push   0xc000eba4
c0019b37:	6a 08                	push   0x8
c0019b39:	e8 55 04 00 00       	call   c0019f93 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019b3e:	83 c4 0c             	add    esp,0xc
c0019b41:	6a 00                	push   0x0
c0019b43:	68 1c eb 00 c0       	push   0xc000eb1c
c0019b48:	6a 09                	push   0x9
c0019b4a:	e8 44 04 00 00       	call   c0019f93 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019b4f:	83 c4 0c             	add    esp,0xc
c0019b52:	6a 00                	push   0x0
c0019b54:	68 1c eb 00 c0       	push   0xc000eb1c
c0019b59:	6a 0a                	push   0xa
c0019b5b:	e8 33 04 00 00       	call   c0019f93 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019b60:	83 c4 0c             	add    esp,0xc
c0019b63:	6a 00                	push   0x0
c0019b65:	68 1c eb 00 c0       	push   0xc000eb1c
c0019b6a:	6a 0b                	push   0xb
c0019b6c:	e8 22 04 00 00       	call   c0019f93 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019b71:	83 c4 0c             	add    esp,0xc
c0019b74:	6a 00                	push   0x0
c0019b76:	68 54 ea 00 c0       	push   0xc000ea54
c0019b7b:	6a 0d                	push   0xd
c0019b7d:	e8 11 04 00 00       	call   c0019f93 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019b82:	83 c4 0c             	add    esp,0xc
c0019b85:	6a 00                	push   0x0
c0019b87:	68 a8 ea 00 c0       	push   0xc000eaa8
c0019b8c:	6a 0e                	push   0xe
c0019b8e:	e8 00 04 00 00       	call   c0019f93 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019b93:	83 c4 10             	add    esp,0x10
c0019b96:	50                   	push   eax
c0019b97:	6a 00                	push   0x0
c0019b99:	68 1c eb 00 c0       	push   0xc000eb1c
c0019b9e:	53                   	push   ebx
c0019b9f:	43                   	inc    ebx
c0019ba0:	e8 ee 03 00 00       	call   c0019f93 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019ba5:	83 c4 10             	add    esp,0x10
c0019ba8:	83 fb 1e             	cmp    ebx,0x1e
c0019bab:	75 e9                	jne    c0019b96 <HalInitialise()+0x113>
c0019bad:	50                   	push   eax
c0019bae:	6a 00                	push   0x0
c0019bb0:	68 f7 1e 01 c0       	push   0xc0011ef7
c0019bb5:	6a 60                	push   0x60
c0019bb7:	e8 d7 03 00 00       	call   c0019f93 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019bbc:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0019bc1:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0019bcb:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0019bd2:	e8 99 5e ff ff       	call   c000fa70 <malloc>
c0019bd7:	89 04 24             	mov    DWORD PTR [esp],eax
c0019bda:	89 c3                	mov    ebx,eax
c0019bdc:	e8 ff 0d 00 00       	call   c001a9e0 <RTC::RTC()>
c0019be1:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0019beb:	5a                   	pop    edx
c0019bec:	59                   	pop    ecx
c0019bed:	53                   	push   ebx
c0019bee:	ff 35 d0 c0 02 c0    	push   DWORD PTR ds:0xc002c0d0
c0019bf4:	e8 9f fd fe ff       	call   c0009998 <Device::addChild(Device*)>
c0019bf9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019bfb:	6a 00                	push   0x0
c0019bfd:	6a 00                	push   0x0
c0019bff:	6a 00                	push   0x0
c0019c01:	53                   	push   ebx
c0019c02:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019c05:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0019c0a:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0019c10:	83 c4 28             	add    esp,0x28
c0019c13:	5b                   	pop    ebx
c0019c14:	c3                   	ret    

c0019c15 <HalMakeBeep(int)>:
c0019c15:	53                   	push   ebx
c0019c16:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0019c1a:	85 db                	test   ebx,ebx
c0019c1c:	75 07                	jne    c0019c25 <HalMakeBeep(int)+0x10>
c0019c1e:	e4 61                	in     al,0x61
c0019c20:	83 e0 fc             	and    eax,0xfffffffc
c0019c23:	eb 26                	jmp    c0019c4b <HalMakeBeep(int)+0x36>
c0019c25:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0019c2a:	99                   	cdq    
c0019c2b:	f7 fb                	idiv   ebx
c0019c2d:	89 c1                	mov    ecx,eax
c0019c2f:	b0 b6                	mov    al,0xb6
c0019c31:	e6 43                	out    0x43,al
c0019c33:	88 c8                	mov    al,cl
c0019c35:	e6 42                	out    0x42,al
c0019c37:	89 c8                	mov    eax,ecx
c0019c39:	c1 e8 08             	shr    eax,0x8
c0019c3c:	e6 42                	out    0x42,al
c0019c3e:	e4 61                	in     al,0x61
c0019c40:	89 c2                	mov    edx,eax
c0019c42:	83 ca 03             	or     edx,0x3
c0019c45:	38 d0                	cmp    al,dl
c0019c47:	74 04                	je     c0019c4d <HalMakeBeep(int)+0x38>
c0019c49:	88 d0                	mov    al,dl
c0019c4b:	e6 61                	out    0x61,al
c0019c4d:	5b                   	pop    ebx
c0019c4e:	c3                   	ret    

c0019c4f <HalGetRand()>:
c0019c4f:	31 c0                	xor    eax,eax
c0019c51:	c3                   	ret    

c0019c52 <HalEndOfInterrupt(int)>:
c0019c52:	80 3d c0 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002eac0,0x0
c0019c59:	74 1d                	je     c0019c78 <HalEndOfInterrupt(int)+0x26>
c0019c5b:	83 ec 18             	sub    esp,0x18
c0019c5e:	6a 1b                	push   0x1b
c0019c60:	e8 0c f5 ff ff       	call   c0019171 <x86rdmsr(unsigned int)>
c0019c65:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019c6a:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0019c74:	83 c4 1c             	add    esp,0x1c
c0019c77:	c3                   	ret    
c0019c78:	e9 7f 07 00 00       	jmp    c001a3fc <picEOI(int)>

c0019c7d <HalRestart()>:
c0019c7d:	c3                   	ret    

c0019c7e <HalShutdown()>:
c0019c7e:	c3                   	ret    

c0019c7f <HalSleep()>:
c0019c7f:	c3                   	ret    

c0019c80 <CPU::CPU()>:
c0019c80:	83 ec 0c             	sub    esp,0xc
c0019c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c87:	83 ec 08             	sub    esp,0x8
c0019c8a:	68 13 4b 02 c0       	push   0xc0024b13
c0019c8f:	50                   	push   eax
c0019c90:	e8 65 fe fe ff       	call   c0009afa <Device::Device(char const*)>
c0019c95:	83 c4 10             	add    esp,0x10
c0019c98:	ba 70 4e 02 c0       	mov    edx,0xc0024e70
c0019c9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ca1:	89 10                	mov    DWORD PTR [eax],edx
c0019ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ca7:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0019cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cb5:	05 64 01 00 00       	add    eax,0x164
c0019cba:	83 ec 0c             	sub    esp,0xc
c0019cbd:	50                   	push   eax
c0019cbe:	e8 35 4f ff ff       	call   c000ebf8 <GDT::GDT()>
c0019cc3:	83 c4 10             	add    esp,0x10
c0019cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cca:	05 68 09 00 00       	add    eax,0x968
c0019ccf:	83 ec 0c             	sub    esp,0xc
c0019cd2:	50                   	push   eax
c0019cd3:	e8 74 51 ff ff       	call   c000ee4c <IDT::IDT()>
c0019cd8:	83 c4 10             	add    esp,0x10
c0019cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cdf:	05 68 11 00 00       	add    eax,0x1168
c0019ce4:	83 ec 0c             	sub    esp,0xc
c0019ce7:	50                   	push   eax
c0019ce8:	e8 2b 8d ff ff       	call   c0012a18 <TSS::TSS()>
c0019ced:	83 c4 10             	add    esp,0x10
c0019cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cf4:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0019cfe:	90                   	nop
c0019cff:	83 c4 0c             	add    esp,0xc
c0019d02:	c3                   	ret    
c0019d03:	90                   	nop

c0019d04 <CPU::setupSMEP()>:
c0019d04:	0f 20 e0             	mov    eax,cr4
c0019d07:	0d 00 00 10 00       	or     eax,0x100000
c0019d0c:	0f 22 e0             	mov    cr4,eax
c0019d0f:	c3                   	ret    

c0019d10 <CPU::setupUMIP()>:
c0019d10:	0f 20 e0             	mov    eax,cr4
c0019d13:	80 cc 08             	or     ah,0x8
c0019d16:	0f 22 e0             	mov    cr4,eax
c0019d19:	c3                   	ret    

c0019d1a <CPU::setupTSC()>:
c0019d1a:	0f 20 e0             	mov    eax,cr4
c0019d1d:	83 c8 04             	or     eax,0x4
c0019d20:	0f 22 e0             	mov    cr4,eax
c0019d23:	c3                   	ret    

c0019d24 <CPU::setupLargePages()>:
c0019d24:	0f 20 e0             	mov    eax,cr4
c0019d27:	83 c8 10             	or     eax,0x10
c0019d2a:	0f 22 e0             	mov    cr4,eax
c0019d2d:	c3                   	ret    

c0019d2e <CPU::setupPAT()>:
c0019d2e:	f6 05 0c eb 02 c0 08 	test   BYTE PTR ds:0xc002eb0c,0x8
c0019d35:	74 28                	je     c0019d5f <CPU::setupPAT()+0x31>
c0019d37:	53                   	push   ebx
c0019d38:	83 ec 14             	sub    esp,0x14
c0019d3b:	68 77 02 00 00       	push   0x277
c0019d40:	e8 2c f4 ff ff       	call   c0019171 <x86rdmsr(unsigned int)>
c0019d45:	83 c4 0c             	add    esp,0xc
c0019d48:	83 e2 f8             	and    edx,0xfffffff8
c0019d4b:	83 ca 01             	or     edx,0x1
c0019d4e:	52                   	push   edx
c0019d4f:	50                   	push   eax
c0019d50:	68 77 02 00 00       	push   0x277
c0019d55:	e8 55 f4 ff ff       	call   c00191af <x86wrmsr(unsigned int, unsigned long long)>
c0019d5a:	83 c4 18             	add    esp,0x18
c0019d5d:	5b                   	pop    ebx
c0019d5e:	c3                   	ret    
c0019d5f:	c3                   	ret    

c0019d60 <CPU::setupMTRR()>:
c0019d60:	c3                   	ret    
c0019d61:	90                   	nop

c0019d62 <CPU::setupGlobalPages()>:
c0019d62:	0f 20 e0             	mov    eax,cr4
c0019d65:	0c 80                	or     al,0x80
c0019d67:	0f 22 e0             	mov    cr4,eax
c0019d6a:	c3                   	ret    
c0019d6b:	90                   	nop

c0019d6c <CPU::allowUsermodeDataAccess()>:
c0019d6c:	f6 05 0f eb 02 c0 40 	test   BYTE PTR ds:0xc002eb0f,0x40
c0019d73:	74 03                	je     c0019d78 <CPU::allowUsermodeDataAccess()+0xc>
c0019d75:	0f 01 cb             	stac   
c0019d78:	c3                   	ret    
c0019d79:	90                   	nop

c0019d7a <CPU::prohibitUsermodeDataAccess()>:
c0019d7a:	f6 05 0f eb 02 c0 40 	test   BYTE PTR ds:0xc002eb0f,0x40
c0019d81:	74 03                	je     c0019d86 <CPU::prohibitUsermodeDataAccess()+0xc>
c0019d83:	0f 01 ca             	clac   
c0019d86:	c3                   	ret    
c0019d87:	90                   	nop

c0019d88 <CPU::setupSMAP()>:
c0019d88:	0f 20 e0             	mov    eax,cr4
c0019d8b:	0d 00 00 20 00       	or     eax,0x200000
c0019d90:	0f 22 e0             	mov    cr4,eax
c0019d93:	eb e5                	jmp    c0019d7a <CPU::prohibitUsermodeDataAccess()>
c0019d95:	90                   	nop

c0019d96 <CPU::setupFeatures()>:
c0019d96:	53                   	push   ebx
c0019d97:	83 ec 08             	sub    esp,0x8
c0019d9a:	f6 05 0f eb 02 c0 20 	test   BYTE PTR ds:0xc002eb0f,0x20
c0019da1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019da5:	74 18                	je     c0019dbf <CPU::setupFeatures()+0x29>
c0019da7:	83 ec 0c             	sub    esp,0xc
c0019daa:	68 ac 4d 02 c0       	push   0xc0024dac
c0019daf:	e8 9a d1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019db4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019db7:	e8 54 ff ff ff       	call   c0019d10 <CPU::setupUMIP()>
c0019dbc:	83 c4 10             	add    esp,0x10
c0019dbf:	f6 05 0e eb 02 c0 08 	test   BYTE PTR ds:0xc002eb0e,0x8
c0019dc6:	74 18                	je     c0019de0 <CPU::setupFeatures()+0x4a>
c0019dc8:	83 ec 0c             	sub    esp,0xc
c0019dcb:	68 b6 4d 02 c0       	push   0xc0024db6
c0019dd0:	e8 79 d1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019dd5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019dd8:	e8 3d ff ff ff       	call   c0019d1a <CPU::setupTSC()>
c0019ddd:	83 c4 10             	add    esp,0x10
c0019de0:	f6 05 0e eb 02 c0 20 	test   BYTE PTR ds:0xc002eb0e,0x20
c0019de7:	74 18                	je     c0019e01 <CPU::setupFeatures()+0x6b>
c0019de9:	83 ec 0c             	sub    esp,0xc
c0019dec:	68 bf 4d 02 c0       	push   0xc0024dbf
c0019df1:	e8 58 d1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019df6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019df9:	e8 26 ff ff ff       	call   c0019d24 <CPU::setupLargePages()>
c0019dfe:	83 c4 10             	add    esp,0x10
c0019e01:	f6 05 0e eb 02 c0 40 	test   BYTE PTR ds:0xc002eb0e,0x40
c0019e08:	74 18                	je     c0019e22 <CPU::setupFeatures()+0x8c>
c0019e0a:	83 ec 0c             	sub    esp,0xc
c0019e0d:	68 c8 4d 02 c0       	push   0xc0024dc8
c0019e12:	e8 37 d1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019e17:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e1a:	e8 43 ff ff ff       	call   c0019d62 <CPU::setupGlobalPages()>
c0019e1f:	83 c4 10             	add    esp,0x10
c0019e22:	f6 05 0e eb 02 c0 80 	test   BYTE PTR ds:0xc002eb0e,0x80
c0019e29:	74 18                	je     c0019e43 <CPU::setupFeatures()+0xad>
c0019e2b:	83 ec 0c             	sub    esp,0xc
c0019e2e:	68 da 4d 02 c0       	push   0xc0024dda
c0019e33:	e8 16 d1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0019e38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e3b:	e8 ee fe ff ff       	call   c0019d2e <CPU::setupPAT()>
c0019e40:	83 c4 10             	add    esp,0x10
c0019e43:	f6 05 10 eb 02 c0 04 	test   BYTE PTR ds:0xc002eb10,0x4
c0019e4a:	74 11                	je     c0019e5d <CPU::setupFeatures()+0xc7>
c0019e4c:	c7 44 24 10 e3 4d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024de3
c0019e54:	83 c4 08             	add    esp,0x8
c0019e57:	5b                   	pop    ebx
c0019e58:	e9 f1 d0 fe ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c0019e5d:	83 c4 08             	add    esp,0x8
c0019e60:	5b                   	pop    ebx
c0019e61:	c3                   	ret    

c0019e62 <CPU::open(int, int, void*)>:
c0019e62:	55                   	push   ebp
c0019e63:	57                   	push   edi
c0019e64:	56                   	push   esi
c0019e65:	53                   	push   ebx
c0019e66:	83 ec 18             	sub    esp,0x18
c0019e69:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019e6d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019e71:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0019e75:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c0019e7b:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c0019e81:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c0019e87:	50                   	push   eax
c0019e88:	e8 cd 4d ff ff       	call   c000ec5a <GDT::setup()>
c0019e8d:	83 c4 0c             	add    esp,0xc
c0019e90:	6a 00                	push   0x0
c0019e92:	68 ef be ad de       	push   0xdeadbeef
c0019e97:	55                   	push   ebp
c0019e98:	e8 bf 8b ff ff       	call   c0012a5c <TSS::setup(unsigned long, unsigned long)>
c0019e9d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019ea0:	e8 97 8b ff ff       	call   c0012a3c <TSS::flush()>
c0019ea5:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c0019eab:	89 04 24             	mov    DWORD PTR [esp],eax
c0019eae:	e8 0f 50 ff ff       	call   c000eec2 <IDT::setup()>
c0019eb3:	b8 00 04 00 00       	mov    eax,0x400
c0019eb8:	0f 23 f8             	mov    dr7,eax
c0019ebb:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c0019ec5:	e8 e6 60 ff ff       	call   c000ffb0 <Phys::allocatePage()>
c0019eca:	83 c4 10             	add    esp,0x10
c0019ecd:	85 f6                	test   esi,esi
c0019ecf:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c0019ed5:	89 38                	mov    DWORD PTR [eax],edi
c0019ed7:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019edd:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019ee0:	74 10                	je     c0019ef2 <CPU::open(int, int, void*)+0x90>
c0019ee2:	50                   	push   eax
c0019ee3:	50                   	push   eax
c0019ee4:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0019eea:	56                   	push   esi
c0019eeb:	e8 1c 95 ff ff       	call   c001340c <VAS::setCPUSpecific(unsigned long)>
c0019ef0:	eb 0d                	jmp    c0019eff <CPU::open(int, int, void*)+0x9d>
c0019ef2:	83 ec 0c             	sub    esp,0xc
c0019ef5:	68 ed 4d 02 c0       	push   0xc0024ded
c0019efa:	e8 b7 5e ff ff       	call   c000fdb6 <KePanic(char const*)>
c0019eff:	83 c4 10             	add    esp,0x10
c0019f02:	83 ec 0c             	sub    esp,0xc
c0019f05:	68 fb 4d 02 c0       	push   0xc0024dfb
c0019f0a:	e8 18 32 ff ff       	call   c000d127 <KeSetBootMessage(char const*)>
c0019f0f:	e8 6f fb ff ff       	call   c0019a83 <HalInitialise()>
c0019f14:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c0019f19:	83 e0 10             	and    eax,0x10
c0019f1c:	83 f8 01             	cmp    eax,0x1
c0019f1f:	19 c0                	sbb    eax,eax
c0019f21:	83 e0 46             	and    eax,0x46
c0019f24:	83 c0 1e             	add    eax,0x1e
c0019f27:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f2a:	e8 02 11 ff ff       	call   c000b031 <setupTimer(int)>
c0019f2f:	83 c4 10             	add    esp,0x10
c0019f32:	f6 05 24 e1 02 c0 20 	test   BYTE PTR ds:0xc002e124,0x20
c0019f39:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c0019f3f:	74 0c                	je     c0019f4d <CPU::open(int, int, void*)+0xeb>
c0019f41:	83 ec 0c             	sub    esp,0xc
c0019f44:	53                   	push   ebx
c0019f45:	e8 4c fe ff ff       	call   c0019d96 <CPU::setupFeatures()>
c0019f4a:	83 c4 10             	add    esp,0x10
c0019f4d:	83 c4 0c             	add    esp,0xc
c0019f50:	31 c0                	xor    eax,eax
c0019f52:	5b                   	pop    ebx
c0019f53:	5e                   	pop    esi
c0019f54:	5f                   	pop    edi
c0019f55:	5d                   	pop    ebp
c0019f56:	c3                   	ret    

c0019f57 <convertLegacyIRQNumber(int)>:
c0019f57:	83 ec 0c             	sub    esp,0xc
c0019f5a:	f6 05 0c eb 02 c0 01 	test   BYTE PTR ds:0xc002eb0c,0x1
c0019f61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f65:	74 0c                	je     c0019f73 <convertLegacyIRQNumber(int)+0x1c>
c0019f67:	83 f8 0f             	cmp    eax,0xf
c0019f6a:	7f 0b                	jg     c0019f77 <convertLegacyIRQNumber(int)+0x20>
c0019f6c:	0f b6 80 e8 59 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda618]
c0019f73:	83 c4 0c             	add    esp,0xc
c0019f76:	c3                   	ret    
c0019f77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019f7b:	83 ec 0c             	sub    esp,0xc
c0019f7e:	68 94 4e 02 c0       	push   0xc0024e94
c0019f83:	e8 2e 5e ff ff       	call   c000fdb6 <KePanic(char const*)>
c0019f88:	83 c4 10             	add    esp,0x10
c0019f8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f8f:	83 c4 0c             	add    esp,0xc
c0019f92:	c3                   	ret    

c0019f93 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c0019f93:	56                   	push   esi
c0019f94:	31 c0                	xor    eax,eax
c0019f96:	53                   	push   ebx
c0019f97:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f9f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019fa3:	89 ca                	mov    edx,ecx
c0019fa5:	c1 e2 04             	shl    edx,0x4
c0019fa8:	83 bc 82 e0 d0 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd2f20],0x0
c0019fb0:	74 17                	je     c0019fc9 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c0019fb2:	83 c0 01             	add    eax,0x1
c0019fb5:	83 f8 04             	cmp    eax,0x4
c0019fb8:	75 ee                	jne    c0019fa8 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c0019fba:	c7 44 24 0c f5 4e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0024ef5
c0019fc2:	5b                   	pop    ebx
c0019fc3:	5e                   	pop    esi
c0019fc4:	e9 ed 5d ff ff       	jmp    c000fdb6 <KePanic(char const*)>
c0019fc9:	8d 04 88             	lea    eax,[eax+ecx*4]
c0019fcc:	89 1c 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],ebx
c0019fd3:	5b                   	pop    ebx
c0019fd4:	89 34 85 e0 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f20],esi
c0019fdb:	5e                   	pop    esi
c0019fdc:	c3                   	ret    

c0019fdd <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0019fdd:	55                   	push   ebp
c0019fde:	57                   	push   edi
c0019fdf:	56                   	push   esi
c0019fe0:	53                   	push   ebx
c0019fe1:	83 ec 0c             	sub    esp,0xc
c0019fe4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019fe8:	f6 05 0c eb 02 c0 01 	test   BYTE PTR ds:0xc002eb0c,0x1
c0019fef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019ff3:	8d 6e 20             	lea    ebp,[esi+0x20]
c0019ff6:	74 57                	je     c001a04f <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c0019ff8:	84 c0                	test   al,al
c0019ffa:	89 c7                	mov    edi,eax
c0019ffc:	74 1d                	je     c001a01b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c0019ffe:	83 fe 0f             	cmp    esi,0xf
c001a001:	0f 8f d9 00 00 00    	jg     c001a0e0 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x103>
c001a007:	0f b6 b6 e8 59 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffda618]
c001a00e:	0f b7 bc 36 20 be 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd41e0]
c001a016:	d1 ef                	shr    edi,1
c001a018:	83 e7 01             	and    edi,0x1
c001a01b:	a1 60 f4 02 c0       	mov    eax,ds:0xc002f460
c001a020:	83 ec 08             	sub    esp,0x8
c001a023:	31 db                	xor    ebx,ebx
c001a025:	50                   	push   eax
c001a026:	68 02 4f 02 c0       	push   0xc0024f02
c001a02b:	e8 1e cf fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001a030:	a1 60 f4 02 c0       	mov    eax,ds:0xc002f460
c001a035:	83 c4 10             	add    esp,0x10
c001a038:	85 c0                	test   eax,eax
c001a03a:	7f 59                	jg     c001a095 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb8>
c001a03c:	8d 6e 20             	lea    ebp,[esi+0x20]
c001a03f:	83 ec 0c             	sub    esp,0xc
c001a042:	68 19 4f 02 c0       	push   0xc0024f19
c001a047:	e8 6a 5d ff ff       	call   c000fdb6 <KePanic(char const*)>
c001a04c:	83 c4 10             	add    esp,0x10
c001a04f:	89 e8                	mov    eax,ebp
c001a051:	31 d2                	xor    edx,edx
c001a053:	c1 e0 04             	shl    eax,0x4
c001a056:	8b 8c 90 e0 d0 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd2f20]
c001a05d:	85 c9                	test   ecx,ecx
c001a05f:	0f 84 92 00 00 00    	je     c001a0f7 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11a>
c001a065:	83 c2 01             	add    edx,0x1
c001a068:	83 fa 04             	cmp    edx,0x4
c001a06b:	75 e9                	jne    c001a056 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c001a06d:	83 ec 0c             	sub    esp,0xc
c001a070:	68 d0 4e 02 c0       	push   0xc0024ed0
c001a075:	e8 3c 5d ff ff       	call   c000fdb6 <KePanic(char const*)>
c001a07a:	83 c4 10             	add    esp,0x10
c001a07d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a082:	83 c4 0c             	add    esp,0xc
c001a085:	5b                   	pop    ebx
c001a086:	5e                   	pop    esi
c001a087:	5f                   	pop    edi
c001a088:	5d                   	pop    ebp
c001a089:	c3                   	ret    
c001a08a:	83 c3 01             	add    ebx,0x1
c001a08d:	39 1d 60 f4 02 c0    	cmp    DWORD PTR ds:0xc002f460,ebx
c001a093:	7e a7                	jle    c001a03c <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001a095:	8b 2c 9d 80 f4 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd0b80]
c001a09c:	83 ec 08             	sub    esp,0x8
c001a09f:	56                   	push   esi
c001a0a0:	55                   	push   ebp
c001a0a1:	e8 9e 66 00 00       	call   c0020744 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001a0a6:	83 c4 10             	add    esp,0x10
c001a0a9:	84 c0                	test   al,al
c001a0ab:	74 dd                	je     c001a08a <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001a0ad:	89 f8                	mov    eax,edi
c001a0af:	83 ec 04             	sub    esp,0x4
c001a0b2:	8b 1c 9d 80 f4 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd0b80]
c001a0b9:	8d 6e 20             	lea    ebp,[esi+0x20]
c001a0bc:	0f b6 f8             	movzx  edi,al
c001a0bf:	57                   	push   edi
c001a0c0:	89 e8                	mov    eax,ebp
c001a0c2:	6a 00                	push   0x0
c001a0c4:	0f b6 c0             	movzx  eax,al
c001a0c7:	50                   	push   eax
c001a0c8:	89 f0                	mov    eax,esi
c001a0ca:	6a 00                	push   0x0
c001a0cc:	0f b6 c0             	movzx  eax,al
c001a0cf:	6a 00                	push   0x0
c001a0d1:	50                   	push   eax
c001a0d2:	53                   	push   ebx
c001a0d3:	e8 d8 67 00 00       	call   c00208b0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001a0d8:	83 c4 20             	add    esp,0x20
c001a0db:	e9 6f ff ff ff       	jmp    c001a04f <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001a0e0:	83 ec 0c             	sub    esp,0xc
c001a0e3:	31 ff                	xor    edi,edi
c001a0e5:	68 94 4e 02 c0       	push   0xc0024e94
c001a0ea:	e8 c7 5c ff ff       	call   c000fdb6 <KePanic(char const*)>
c001a0ef:	83 c4 10             	add    esp,0x10
c001a0f2:	e9 24 ff ff ff       	jmp    c001a01b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001a0f7:	8d 04 aa             	lea    eax,[edx+ebp*4]
c001a0fa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a0fe:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001a105:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a109:	89 14 85 e0 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f20],edx
c001a110:	83 c4 0c             	add    esp,0xc
c001a113:	89 f0                	mov    eax,esi
c001a115:	5b                   	pop    ebx
c001a116:	5e                   	pop    esi
c001a117:	5f                   	pop    edi
c001a118:	5d                   	pop    ebp
c001a119:	c3                   	ret    

c001a11a <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001a11a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a11e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a122:	c1 e0 04             	shl    eax,0x4
c001a125:	8d 50 10             	lea    edx,[eax+0x10]
c001a128:	39 88 e0 d0 02 c0    	cmp    DWORD PTR [eax-0x3ffd2f20],ecx
c001a12e:	74 08                	je     c001a138 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001a130:	83 c0 04             	add    eax,0x4
c001a133:	39 d0                	cmp    eax,edx
c001a135:	75 f1                	jne    c001a128 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001a137:	c3                   	ret    
c001a138:	c7 80 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2f20],0x0
c001a142:	c7 80 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3f20],0x0
c001a14c:	eb e2                	jmp    c001a130 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001a14e <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001a14e:	56                   	push   esi
c001a14f:	53                   	push   ebx
c001a150:	83 ec 04             	sub    esp,0x4
c001a153:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001a158:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a15c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a160:	74 09                	je     c001a16b <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001a162:	f6 05 0c eb 02 c0 01 	test   BYTE PTR ds:0xc002eb0c,0x1
c001a169:	75 34                	jne    c001a19f <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x51>
c001a16b:	8d 43 20             	lea    eax,[ebx+0x20]
c001a16e:	c1 e0 04             	shl    eax,0x4
c001a171:	8d 50 10             	lea    edx,[eax+0x10]
c001a174:	39 b0 e0 d0 02 c0    	cmp    DWORD PTR [eax-0x3ffd2f20],esi
c001a17a:	74 0d                	je     c001a189 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001a17c:	83 c0 04             	add    eax,0x4
c001a17f:	39 d0                	cmp    eax,edx
c001a181:	75 f1                	jne    c001a174 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x26>
c001a183:	83 c4 04             	add    esp,0x4
c001a186:	5b                   	pop    ebx
c001a187:	5e                   	pop    esi
c001a188:	c3                   	ret    
c001a189:	c7 80 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2f20],0x0
c001a193:	c7 80 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3f20],0x0
c001a19d:	eb dd                	jmp    c001a17c <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2e>
c001a19f:	83 fb 0f             	cmp    ebx,0xf
c001a1a2:	7f 09                	jg     c001a1ad <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x5f>
c001a1a4:	0f b6 9b e8 59 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffda618]
c001a1ab:	eb be                	jmp    c001a16b <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001a1ad:	83 ec 0c             	sub    esp,0xc
c001a1b0:	68 26 4f 02 c0       	push   0xc0024f26
c001a1b5:	e8 fc 5b ff ff       	call   c000fdb6 <KePanic(char const*)>
c001a1ba:	83 c4 10             	add    esp,0x10
c001a1bd:	eb ac                	jmp    c001a16b <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001a1bf:	90                   	nop

c001a1c0 <picIoWait()>:
c001a1c0:	eb 00                	jmp    c001a1c2 <picIoWait()+0x2>
c001a1c2:	eb 00                	jmp    c001a1c4 <picIoWait()+0x4>
c001a1c4:	90                   	nop
c001a1c5:	c3                   	ret    
c001a1c6:	66 90                	xchg   ax,ax

c001a1c8 <picDisable()>:
c001a1c8:	83 ec 10             	sub    esp,0x10
c001a1cb:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001a1d2:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001a1d7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a1db:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001a1e0:	ee                   	out    dx,al
c001a1e1:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001a1e8:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001a1ed:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001a1f1:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001a1f6:	ee                   	out    dx,al
c001a1f7:	90                   	nop
c001a1f8:	83 c4 10             	add    esp,0x10
c001a1fb:	c3                   	ret    

c001a1fc <picGetIRQReg(int)>:
c001a1fc:	83 ec 10             	sub    esp,0x10
c001a1ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a203:	0f b6 c0             	movzx  eax,al
c001a206:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001a20d:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001a211:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001a215:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001a21a:	ee                   	out    dx,al
c001a21b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a21f:	0f b6 c0             	movzx  eax,al
c001a222:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001a229:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001a22d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001a231:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001a236:	ee                   	out    dx,al
c001a237:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001a23e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001a243:	89 c2                	mov    edx,eax
c001a245:	ec                   	in     al,dx
c001a246:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a24a:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a24e:	0f b6 c0             	movzx  eax,al
c001a251:	c1 e0 08             	shl    eax,0x8
c001a254:	89 c1                	mov    ecx,eax
c001a256:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001a25d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001a262:	89 c2                	mov    edx,eax
c001a264:	ec                   	in     al,dx
c001a265:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a269:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001a26d:	0f b6 c0             	movzx  eax,al
c001a270:	09 c8                	or     eax,ecx
c001a272:	83 c4 10             	add    esp,0x10
c001a275:	c3                   	ret    
c001a276:	66 90                	xchg   ax,ax

c001a278 <picOpen()>:
c001a278:	83 ec 50             	sub    esp,0x50
c001a27b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001a282:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001a287:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a28b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a28f:	ee                   	out    dx,al
c001a290:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001a297:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a29c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001a2a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a2a4:	ee                   	out    dx,al
c001a2a5:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001a2ad:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001a2b5:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001a2bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a2c0:	89 c2                	mov    edx,eax
c001a2c2:	ec                   	in     al,dx
c001a2c3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001a2c7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001a2cb:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001a2cf:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001a2d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a2da:	89 c2                	mov    edx,eax
c001a2dc:	ec                   	in     al,dx
c001a2dd:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001a2e1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001a2e5:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001a2e9:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001a2f0:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001a2f5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001a2f9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a2fd:	ee                   	out    dx,al
c001a2fe:	e8 bd fe ff ff       	call   c001a1c0 <picIoWait()>
c001a303:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001a30a:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001a30f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001a313:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a317:	ee                   	out    dx,al
c001a318:	e8 a3 fe ff ff       	call   c001a1c0 <picIoWait()>
c001a31d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a321:	0f b6 c0             	movzx  eax,al
c001a324:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001a32b:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001a32f:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001a333:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a337:	ee                   	out    dx,al
c001a338:	e8 83 fe ff ff       	call   c001a1c0 <picIoWait()>
c001a33d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001a341:	0f b6 c0             	movzx  eax,al
c001a344:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001a34b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001a34f:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001a353:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a357:	ee                   	out    dx,al
c001a358:	e8 63 fe ff ff       	call   c001a1c0 <picIoWait()>
c001a35d:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001a364:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001a369:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001a36d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a371:	ee                   	out    dx,al
c001a372:	e8 49 fe ff ff       	call   c001a1c0 <picIoWait()>
c001a377:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001a37e:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001a383:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a387:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a38b:	ee                   	out    dx,al
c001a38c:	e8 2f fe ff ff       	call   c001a1c0 <picIoWait()>
c001a391:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001a398:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001a39d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001a3a1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a3a5:	ee                   	out    dx,al
c001a3a6:	e8 15 fe ff ff       	call   c001a1c0 <picIoWait()>
c001a3ab:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001a3b2:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001a3b7:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001a3bb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001a3bf:	ee                   	out    dx,al
c001a3c0:	e8 fb fd ff ff       	call   c001a1c0 <picIoWait()>
c001a3c5:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001a3ca:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001a3d1:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001a3d5:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001a3d9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001a3dd:	ee                   	out    dx,al
c001a3de:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001a3e3:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001a3ea:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001a3ee:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001a3f2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001a3f6:	ee                   	out    dx,al
c001a3f7:	90                   	nop
c001a3f8:	83 c4 50             	add    esp,0x50
c001a3fb:	c3                   	ret    

c001a3fc <picEOI(int)>:
c001a3fc:	83 ec 10             	sub    esp,0x10
c001a3ff:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001a404:	75 1e                	jne    c001a424 <picEOI(int)+0x28>
c001a406:	6a 0b                	push   0xb
c001a408:	e8 ef fd ff ff       	call   c001a1fc <picGetIRQReg(int)>
c001a40d:	83 c4 04             	add    esp,0x4
c001a410:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001a415:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001a41a:	25 80 00 00 00       	and    eax,0x80
c001a41f:	74 73                	je     c001a494 <picEOI(int)+0x98>
c001a421:	8d 76 00             	lea    esi,[esi+0x0]
c001a424:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001a429:	75 31                	jne    c001a45c <picEOI(int)+0x60>
c001a42b:	6a 0b                	push   0xb
c001a42d:	e8 ca fd ff ff       	call   c001a1fc <picGetIRQReg(int)>
c001a432:	83 c4 04             	add    esp,0x4
c001a435:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001a43a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a43e:	98                   	cwde   
c001a43f:	85 c0                	test   eax,eax
c001a441:	78 19                	js     c001a45c <picEOI(int)+0x60>
c001a443:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001a44a:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001a44f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a453:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001a458:	ee                   	out    dx,al
c001a459:	eb 3d                	jmp    c001a498 <picEOI(int)+0x9c>
c001a45b:	90                   	nop
c001a45c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001a461:	7e 19                	jle    c001a47c <picEOI(int)+0x80>
c001a463:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001a46a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001a46f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001a473:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001a478:	ee                   	out    dx,al
c001a479:	8d 76 00             	lea    esi,[esi+0x0]
c001a47c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001a483:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001a488:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001a48c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001a491:	ee                   	out    dx,al
c001a492:	eb 04                	jmp    c001a498 <picEOI(int)+0x9c>
c001a494:	90                   	nop
c001a495:	8d 76 00             	lea    esi,[esi+0x0]
c001a498:	83 c4 10             	add    esp,0x10
c001a49b:	c3                   	ret    

c001a49c <RTC::open(int, int, void*)>:
c001a49c:	31 c0                	xor    eax,eax
c001a49e:	c3                   	ret    
c001a49f:	90                   	nop

c001a4a0 <RTC::close(int, int, void*)>:
c001a4a0:	31 c0                	xor    eax,eax
c001a4a2:	c3                   	ret    
c001a4a3:	90                   	nop

c001a4a4 <RTC::timeInSecondsUTC()>:
c001a4a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4a8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001a4ae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a4b4:	c3                   	ret    
c001a4b5:	90                   	nop

c001a4b6 <RTC::timeInDatetimeUTC()>:
c001a4b6:	53                   	push   ebx
c001a4b7:	83 ec 14             	sub    esp,0x14
c001a4ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a4be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a4c2:	8b 10                	mov    edx,DWORD PTR [eax]
c001a4c4:	50                   	push   eax
c001a4c5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001a4c8:	83 c4 0c             	add    esp,0xc
c001a4cb:	52                   	push   edx
c001a4cc:	50                   	push   eax
c001a4cd:	53                   	push   ebx
c001a4ce:	e8 e3 f0 fe ff       	call   c00095b6 <KeSecondsToDatetime(unsigned long long)>
c001a4d3:	89 d8                	mov    eax,ebx
c001a4d5:	83 c4 14             	add    esp,0x14
c001a4d8:	5b                   	pop    ebx
c001a4d9:	c2 04 00             	ret    0x4

c001a4dc <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001a4dc:	56                   	push   esi
c001a4dd:	53                   	push   ebx
c001a4de:	83 ec 14             	sub    esp,0x14
c001a4e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a4e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a4e7:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001a4ea:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a4ee:	52                   	push   edx
c001a4ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a4f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a4f7:	50                   	push   eax
c001a4f8:	e8 b9 f0 fe ff       	call   c00095b6 <KeSecondsToDatetime(unsigned long long)>
c001a4fd:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001a501:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a505:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a509:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a50d:	89 f0                	mov    eax,esi
c001a50f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a513:	83 c4 20             	add    esp,0x20
c001a516:	5b                   	pop    ebx
c001a517:	5e                   	pop    esi
c001a518:	ff e0                	jmp    eax

c001a51a <RTC::~RTC()>:
c001a51a:	83 ec 0c             	sub    esp,0xc
c001a51d:	ba 50 4f 02 c0       	mov    edx,0xc0024f50
c001a522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a526:	89 10                	mov    DWORD PTR [eax],edx
c001a528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a52c:	83 ec 0c             	sub    esp,0xc
c001a52f:	50                   	push   eax
c001a530:	e8 59 eb fe ff       	call   c000908e <Clock::~Clock()>
c001a535:	83 c4 10             	add    esp,0x10
c001a538:	90                   	nop
c001a539:	83 c4 0c             	add    esp,0xc
c001a53c:	c3                   	ret    
c001a53d:	90                   	nop

c001a53e <RTC::~RTC()>:
c001a53e:	83 ec 0c             	sub    esp,0xc
c001a541:	83 ec 0c             	sub    esp,0xc
c001a544:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a548:	e8 cd ff ff ff       	call   c001a51a <RTC::~RTC()>
c001a54d:	83 c4 10             	add    esp,0x10
c001a550:	83 ec 08             	sub    esp,0x8
c001a553:	68 60 01 00 00       	push   0x160
c001a558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a55c:	e8 86 2c ff ff       	call   c000d1e7 <operator delete(void*, unsigned long)>
c001a561:	83 c4 10             	add    esp,0x10
c001a564:	83 c4 0c             	add    esp,0xc
c001a567:	c3                   	ret    

c001a568 <RTC::get_update_in_progress_flag()>:
c001a568:	83 ec 18             	sub    esp,0x18
c001a56b:	6a 0a                	push   0xa
c001a56d:	e8 01 db ff ff       	call   c0018073 <x86ReadCMOS(unsigned char)>
c001a572:	83 c4 1c             	add    esp,0x1c
c001a575:	0f b6 c0             	movzx  eax,al
c001a578:	c1 e8 07             	shr    eax,0x7
c001a57b:	c3                   	ret    

c001a57c <RTC::completeRTCRefresh()>:
c001a57c:	55                   	push   ebp
c001a57d:	57                   	push   edi
c001a57e:	56                   	push   esi
c001a57f:	53                   	push   ebx
c001a580:	83 ec 3c             	sub    esp,0x3c
c001a583:	8b 1d 4c bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb4c
c001a589:	83 ec 0c             	sub    esp,0xc
c001a58c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a590:	e8 d3 ff ff ff       	call   c001a568 <RTC::get_update_in_progress_flag()>
c001a595:	83 c4 10             	add    esp,0x10
c001a598:	84 c0                	test   al,al
c001a59a:	74 0e                	je     c001a5aa <RTC::completeRTCRefresh()+0x2e>
c001a59c:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001a5a2:	3b 05 4c bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb4c
c001a5a8:	73 df                	jae    c001a589 <RTC::completeRTCRefresh()+0xd>
c001a5aa:	83 ec 0c             	sub    esp,0xc
c001a5ad:	6a 00                	push   0x0
c001a5af:	e8 bf da ff ff       	call   c0018073 <x86ReadCMOS(unsigned char)>
c001a5b4:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001a5bb:	89 c7                	mov    edi,eax
c001a5bd:	e8 b1 da ff ff       	call   c0018073 <x86ReadCMOS(unsigned char)>
c001a5c2:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001a5c9:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001a5cd:	e8 a1 da ff ff       	call   c0018073 <x86ReadCMOS(unsigned char)>
c001a5d2:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001a5d9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001a5dd:	e8 91 da ff ff       	call   c0018073 <x86ReadCMOS(unsigned char)>
c001a5e2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001a5e9:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001a5ed:	e8 81 da ff ff       	call   c0018073 <x86ReadCMOS(unsigned char)>
c001a5f2:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001a5f9:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001a5fd:	e8 71 da ff ff       	call   c0018073 <x86ReadCMOS(unsigned char)>
c001a602:	0f b6 c0             	movzx  eax,al
c001a605:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a609:	83 c4 10             	add    esp,0x10
c001a60c:	8b 1d 4c bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb4c
c001a612:	83 ec 0c             	sub    esp,0xc
c001a615:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a619:	e8 4a ff ff ff       	call   c001a568 <RTC::get_update_in_progress_flag()>
c001a61e:	83 c4 10             	add    esp,0x10
c001a621:	84 c0                	test   al,al
c001a623:	74 0e                	je     c001a633 <RTC::completeRTCRefresh()+0xb7>
c001a625:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001a62b:	3b 05 4c bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb4c
c001a631:	73 df                	jae    c001a612 <RTC::completeRTCRefresh()+0x96>
c001a633:	83 ec 0c             	sub    esp,0xc
c001a636:	6a 00                	push   0x0
c001a638:	e8 36 da ff ff       	call   c0018073 <x86ReadCMOS(unsigned char)>
c001a63d:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001a644:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001a648:	e8 26 da ff ff       	call   c0018073 <x86ReadCMOS(unsigned char)>
c001a64d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001a654:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a658:	e8 16 da ff ff       	call   c0018073 <x86ReadCMOS(unsigned char)>
c001a65d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001a664:	88 c3                	mov    bl,al
c001a666:	e8 08 da ff ff       	call   c0018073 <x86ReadCMOS(unsigned char)>
c001a66b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001a672:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001a676:	e8 f8 d9 ff ff       	call   c0018073 <x86ReadCMOS(unsigned char)>
c001a67b:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001a682:	89 c6                	mov    esi,eax
c001a684:	e8 ea d9 ff ff       	call   c0018073 <x86ReadCMOS(unsigned char)>
c001a689:	89 f9                	mov    ecx,edi
c001a68b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001a68f:	83 c4 10             	add    esp,0x10
c001a692:	0f b6 e8             	movzx  ebp,al
c001a695:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a69a:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001a69e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a6a2:	74 27                	je     c001a6cb <RTC::completeRTCRefresh()+0x14f>
c001a6a4:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001a6a8:	89 f0                	mov    eax,esi
c001a6aa:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001a6ae:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001a6b2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a6b6:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001a6ba:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001a6be:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a6c2:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001a6c6:	e9 41 ff ff ff       	jmp    c001a60c <RTC::completeRTCRefresh()+0x90>
c001a6cb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a6d0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a6d4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a6d8:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c001a6dc:	75 c6                	jne    c001a6a4 <RTC::completeRTCRefresh()+0x128>
c001a6de:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001a6e3:	89 f1                	mov    ecx,esi
c001a6e5:	0f b6 fb             	movzx  edi,bl
c001a6e8:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001a6ec:	0f b6 c9             	movzx  ecx,cl
c001a6ef:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001a6f3:	89 f1                	mov    ecx,esi
c001a6f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a6f9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a6fd:	0f 94 c2             	sete   dl
c001a700:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001a704:	0f 94 c0             	sete   al
c001a707:	21 d0                	and    eax,edx
c001a709:	31 d2                	xor    edx,edx
c001a70b:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001a70f:	0f 94 c2             	sete   dl
c001a712:	85 c2                	test   edx,eax
c001a714:	74 8e                	je     c001a6a4 <RTC::completeRTCRefresh()+0x128>
c001a716:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001a71a:	75 88                	jne    c001a6a4 <RTC::completeRTCRefresh()+0x128>
c001a71c:	83 ec 0c             	sub    esp,0xc
c001a71f:	6a 0b                	push   0xb
c001a721:	e8 4d d9 ff ff       	call   c0018073 <x86ReadCMOS(unsigned char)>
c001a726:	83 c4 10             	add    esp,0x10
c001a729:	a8 04                	test   al,0x4
c001a72b:	75 7a                	jne    c001a7a7 <RTC::completeRTCRefresh()+0x22b>
c001a72d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a731:	c1 ef 04             	shr    edi,0x4
c001a734:	83 e6 0f             	and    esi,0xf
c001a737:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a73b:	c1 ed 04             	shr    ebp,0x4
c001a73e:	6b ed 0a             	imul   ebp,ebp,0xa
c001a741:	c1 ea 04             	shr    edx,0x4
c001a744:	6b d2 0a             	imul   edx,edx,0xa
c001a747:	83 e1 0f             	and    ecx,0xf
c001a74a:	01 d1                	add    ecx,edx
c001a74c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a750:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001a754:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a758:	c1 ea 04             	shr    edx,0x4
c001a75b:	6b d2 0a             	imul   edx,edx,0xa
c001a75e:	83 e1 0f             	and    ecx,0xf
c001a761:	01 d1                	add    ecx,edx
c001a763:	89 fa                	mov    edx,edi
c001a765:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001a769:	83 e2 07             	and    edx,0x7
c001a76c:	89 d9                	mov    ecx,ebx
c001a76e:	6b d2 0a             	imul   edx,edx,0xa
c001a771:	83 e1 0f             	and    ecx,0xf
c001a774:	83 e3 80             	and    ebx,0xffffff80
c001a777:	01 d1                	add    ecx,edx
c001a779:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a77d:	09 cb                	or     ebx,ecx
c001a77f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a783:	c1 ea 04             	shr    edx,0x4
c001a786:	6b d2 0a             	imul   edx,edx,0xa
c001a789:	83 e1 0f             	and    ecx,0xf
c001a78c:	01 d1                	add    ecx,edx
c001a78e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a792:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001a796:	c1 ea 04             	shr    edx,0x4
c001a799:	6b d2 0a             	imul   edx,edx,0xa
c001a79c:	01 d6                	add    esi,edx
c001a79e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a7a2:	83 e2 0f             	and    edx,0xf
c001a7a5:	01 d5                	add    ebp,edx
c001a7a7:	a8 02                	test   al,0x2
c001a7a9:	75 15                	jne    c001a7c0 <RTC::completeRTCRefresh()+0x244>
c001a7ab:	f6 c3 80             	test   bl,0x80
c001a7ae:	74 10                	je     c001a7c0 <RTC::completeRTCRefresh()+0x244>
c001a7b0:	83 e3 7f             	and    ebx,0x7f
c001a7b3:	b9 18 00 00 00       	mov    ecx,0x18
c001a7b8:	8d 43 0c             	lea    eax,[ebx+0xc]
c001a7bb:	99                   	cdq    
c001a7bc:	f7 f9                	idiv   ecx
c001a7be:	88 d3                	mov    bl,dl
c001a7c0:	8d bd 6c 07 00 00    	lea    edi,[ebp+0x76c]
c001a7c6:	81 ff b1 07 00 00    	cmp    edi,0x7b1
c001a7cc:	77 06                	ja     c001a7d4 <RTC::completeRTCRefresh()+0x258>
c001a7ce:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001a7d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a7d9:	31 c9                	xor    ecx,ecx
c001a7db:	31 d2                	xor    edx,edx
c001a7dd:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a7e1:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001a7e5:	89 cd                	mov    ebp,ecx
c001a7e7:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c001a7eb:	c1 e7 10             	shl    edi,0x10
c001a7ee:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001a7f4:	c1 e0 10             	shl    eax,0x10
c001a7f7:	09 c5                	or     ebp,eax
c001a7f9:	89 e9                	mov    ecx,ebp
c001a7fb:	0f b7 c2             	movzx  eax,dx
c001a7fe:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001a802:	09 f8                	or     eax,edi
c001a804:	89 c2                	mov    edx,eax
c001a806:	50                   	push   eax
c001a807:	50                   	push   eax
c001a808:	88 d9                	mov    cl,bl
c001a80a:	51                   	push   ecx
c001a80b:	52                   	push   edx
c001a80c:	e8 b5 e9 fe ff       	call   c00091c6 <KeDatetimeToSeconds(datetime_t)>
c001a811:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001a815:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001a81b:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001a821:	83 c4 4c             	add    esp,0x4c
c001a824:	5b                   	pop    ebx
c001a825:	5e                   	pop    esi
c001a826:	5f                   	pop    edi
c001a827:	5d                   	pop    ebp
c001a828:	c3                   	ret    
c001a829:	90                   	nop

c001a82a <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001a82a:	55                   	push   ebp
c001a82b:	57                   	push   edi
c001a82c:	56                   	push   esi
c001a82d:	53                   	push   ebx
c001a82e:	83 ec 34             	sub    esp,0x34
c001a831:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001a835:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001a839:	6a 00                	push   0x0
c001a83b:	6a 00                	push   0x0
c001a83d:	e8 85 d8 ff ff       	call   c00180c7 <x86WriteCMOS(unsigned char, unsigned char)>
c001a842:	5d                   	pop    ebp
c001a843:	89 fb                	mov    ebx,edi
c001a845:	58                   	pop    eax
c001a846:	6a 00                	push   0x0
c001a848:	6a 02                	push   0x2
c001a84a:	e8 78 d8 ff ff       	call   c00180c7 <x86WriteCMOS(unsigned char, unsigned char)>
c001a84f:	89 f8                	mov    eax,edi
c001a851:	89 f9                	mov    ecx,edi
c001a853:	0f b6 c4             	movzx  eax,ah
c001a856:	31 d2                	xor    edx,edx
c001a858:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a85c:	c1 e9 10             	shr    ecx,0x10
c001a85f:	89 f0                	mov    eax,esi
c001a861:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001a865:	89 f0                	mov    eax,esi
c001a867:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001a86b:	0f b6 c4             	movzx  eax,ah
c001a86e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a872:	89 f0                	mov    eax,esi
c001a874:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001a878:	c1 e8 10             	shr    eax,0x10
c001a87b:	b9 64 00 00 00       	mov    ecx,0x64
c001a880:	f7 f1                	div    ecx
c001a882:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001a889:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001a88d:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001a891:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001a895:	e8 d9 d7 ff ff       	call   c0018073 <x86ReadCMOS(unsigned char)>
c001a89a:	83 c4 10             	add    esp,0x10
c001a89d:	a8 04                	test   al,0x4
c001a89f:	89 c5                	mov    ebp,eax
c001a8a1:	75 6e                	jne    c001a911 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001a8a3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a8a7:	31 d2                	xor    edx,edx
c001a8a9:	0f b6 c1             	movzx  eax,cl
c001a8ac:	b9 0a 00 00 00       	mov    ecx,0xa
c001a8b1:	f7 f1                	div    ecx
c001a8b3:	c1 e0 04             	shl    eax,0x4
c001a8b6:	09 d0                	or     eax,edx
c001a8b8:	31 d2                	xor    edx,edx
c001a8ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a8be:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001a8c3:	f7 f1                	div    ecx
c001a8c5:	c1 e0 04             	shl    eax,0x4
c001a8c8:	09 d0                	or     eax,edx
c001a8ca:	31 d2                	xor    edx,edx
c001a8cc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a8d0:	0f b6 c3             	movzx  eax,bl
c001a8d3:	f7 f1                	div    ecx
c001a8d5:	c1 e0 04             	shl    eax,0x4
c001a8d8:	09 d0                	or     eax,edx
c001a8da:	31 d2                	xor    edx,edx
c001a8dc:	89 c3                	mov    ebx,eax
c001a8de:	89 f0                	mov    eax,esi
c001a8e0:	0f b6 c0             	movzx  eax,al
c001a8e3:	f7 f1                	div    ecx
c001a8e5:	c1 e0 04             	shl    eax,0x4
c001a8e8:	09 d0                	or     eax,edx
c001a8ea:	31 d2                	xor    edx,edx
c001a8ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a8f0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a8f5:	f7 f1                	div    ecx
c001a8f7:	c1 e0 04             	shl    eax,0x4
c001a8fa:	09 d0                	or     eax,edx
c001a8fc:	31 d2                	xor    edx,edx
c001a8fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a902:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a906:	f7 f1                	div    ecx
c001a908:	c1 e0 04             	shl    eax,0x4
c001a90b:	09 d0                	or     eax,edx
c001a90d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a911:	83 e5 02             	and    ebp,0x2
c001a914:	75 1e                	jne    c001a934 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001a916:	0f b6 c3             	movzx  eax,bl
c001a919:	83 f8 0b             	cmp    eax,0xb
c001a91c:	76 10                	jbe    c001a92e <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001a91e:	8d 53 f4             	lea    edx,[ebx-0xc]
c001a921:	84 d2                	test   dl,dl
c001a923:	88 d3                	mov    bl,dl
c001a925:	75 02                	jne    c001a929 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001a927:	b3 0c                	mov    bl,0xc
c001a929:	83 cb 80             	or     ebx,0xffffff80
c001a92c:	eb 06                	jmp    c001a934 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001a92e:	85 c0                	test   eax,eax
c001a930:	75 02                	jne    c001a934 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001a932:	b3 0c                	mov    bl,0xc
c001a934:	50                   	push   eax
c001a935:	0f b6 db             	movzx  ebx,bl
c001a938:	50                   	push   eax
c001a939:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001a93e:	52                   	push   edx
c001a93f:	6a 00                	push   0x0
c001a941:	e8 81 d7 ff ff       	call   c00180c7 <x86WriteCMOS(unsigned char, unsigned char)>
c001a946:	5a                   	pop    edx
c001a947:	59                   	pop    ecx
c001a948:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a94d:	50                   	push   eax
c001a94e:	6a 02                	push   0x2
c001a950:	e8 72 d7 ff ff       	call   c00180c7 <x86WriteCMOS(unsigned char, unsigned char)>
c001a955:	5e                   	pop    esi
c001a956:	5f                   	pop    edi
c001a957:	53                   	push   ebx
c001a958:	6a 04                	push   0x4
c001a95a:	e8 68 d7 ff ff       	call   c00180c7 <x86WriteCMOS(unsigned char, unsigned char)>
c001a95f:	5d                   	pop    ebp
c001a960:	58                   	pop    eax
c001a961:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001a966:	52                   	push   edx
c001a967:	6a 07                	push   0x7
c001a969:	e8 59 d7 ff ff       	call   c00180c7 <x86WriteCMOS(unsigned char, unsigned char)>
c001a96e:	58                   	pop    eax
c001a96f:	5a                   	pop    edx
c001a970:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001a975:	50                   	push   eax
c001a976:	6a 08                	push   0x8
c001a978:	e8 4a d7 ff ff       	call   c00180c7 <x86WriteCMOS(unsigned char, unsigned char)>
c001a97d:	59                   	pop    ecx
c001a97e:	5b                   	pop    ebx
c001a97f:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001a984:	55                   	push   ebp
c001a985:	6a 09                	push   0x9
c001a987:	e8 3b d7 ff ff       	call   c00180c7 <x86WriteCMOS(unsigned char, unsigned char)>
c001a98c:	5e                   	pop    esi
c001a98d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a991:	e8 e6 fb ff ff       	call   c001a57c <RTC::completeRTCRefresh()>
c001a996:	83 c4 3c             	add    esp,0x3c
c001a999:	b0 01                	mov    al,0x1
c001a99b:	5b                   	pop    ebx
c001a99c:	5e                   	pop    esi
c001a99d:	5f                   	pop    edi
c001a99e:	5d                   	pop    ebp
c001a99f:	c3                   	ret    

c001a9a0 <rtcIRQHandler(regs*, void*)>:
c001a9a0:	53                   	push   ebx
c001a9a1:	83 ec 14             	sub    esp,0x14
c001a9a4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a9a8:	6a 0c                	push   0xc
c001a9aa:	e8 c4 d6 ff ff       	call   c0018073 <x86ReadCMOS(unsigned char)>
c001a9af:	83 c4 10             	add    esp,0x10
c001a9b2:	a8 80                	test   al,0x80
c001a9b4:	74 24                	je     c001a9da <rtcIRQHandler(regs*, void*)+0x3a>
c001a9b6:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001a9bd:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001a9c4:	66 ff 05 14 eb 02 c0 	inc    WORD PTR ds:0xc002eb14
c001a9cb:	75 0d                	jne    c001a9da <rtcIRQHandler(regs*, void*)+0x3a>
c001a9cd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a9d1:	83 c4 08             	add    esp,0x8
c001a9d4:	5b                   	pop    ebx
c001a9d5:	e9 a2 fb ff ff       	jmp    c001a57c <RTC::completeRTCRefresh()>
c001a9da:	83 c4 08             	add    esp,0x8
c001a9dd:	5b                   	pop    ebx
c001a9de:	c3                   	ret    
c001a9df:	90                   	nop

c001a9e0 <RTC::RTC()>:
c001a9e0:	83 ec 1c             	sub    esp,0x1c
c001a9e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9e7:	83 ec 08             	sub    esp,0x8
c001a9ea:	68 33 4f 02 c0       	push   0xc0024f33
c001a9ef:	50                   	push   eax
c001a9f0:	e8 63 e6 fe ff       	call   c0009058 <Clock::Clock(char const*)>
c001a9f5:	83 c4 10             	add    esp,0x10
c001a9f8:	ba 50 4f 02 c0       	mov    edx,0xc0024f50
c001a9fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa01:	89 10                	mov    DWORD PTR [eax],edx
c001aa03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa07:	83 ec 0c             	sub    esp,0xc
c001aa0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa0e:	6a 01                	push   0x1
c001aa10:	68 a0 a9 01 c0       	push   0xc001a9a0
c001aa15:	6a 08                	push   0x8
c001aa17:	50                   	push   eax
c001aa18:	e8 27 ef fe ff       	call   c0009944 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001aa1d:	83 c4 20             	add    esp,0x20
c001aa20:	89 c2                	mov    edx,eax
c001aa22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa26:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001aa2c:	fa                   	cli    
c001aa2d:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001aa32:	83 c0 01             	add    eax,0x1
c001aa35:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c001aa3a:	83 ec 0c             	sub    esp,0xc
c001aa3d:	6a 0b                	push   0xb
c001aa3f:	e8 2f d6 ff ff       	call   c0018073 <x86ReadCMOS(unsigned char)>
c001aa44:	83 c4 10             	add    esp,0x10
c001aa47:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001aa4b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001aa4f:	83 c8 10             	or     eax,0x10
c001aa52:	0f b6 c0             	movzx  eax,al
c001aa55:	83 ec 08             	sub    esp,0x8
c001aa58:	50                   	push   eax
c001aa59:	6a 0b                	push   0xb
c001aa5b:	e8 67 d6 ff ff       	call   c00180c7 <x86WriteCMOS(unsigned char, unsigned char)>
c001aa60:	83 c4 10             	add    esp,0x10
c001aa63:	83 ec 0c             	sub    esp,0xc
c001aa66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa6a:	e8 0d fb ff ff       	call   c001a57c <RTC::completeRTCRefresh()>
c001aa6f:	83 c4 10             	add    esp,0x10
c001aa72:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c001aa7a:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001aa7f:	85 c0                	test   eax,eax
c001aa81:	75 01                	jne    c001aa84 <RTC::RTC()+0xa4>
c001aa83:	fb                   	sti    
c001aa84:	90                   	nop
c001aa85:	83 c4 1c             	add    esp,0x1c
c001aa88:	c3                   	ret    
c001aa89:	66 90                	xchg   ax,ax
c001aa8b:	90                   	nop

c001aa8c <HalConsoleScroll(int, int)>:
c001aa8c:	83 ec 10             	sub    esp,0x10
c001aa8f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001aa97:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001aa9f:	90                   	nop
c001aaa0:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001aaa5:	0f 8f e1 00 00 00    	jg     c001ab8c <HalConsoleScroll(int, int)+0x100>
c001aaab:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aab3:	90                   	nop
c001aab4:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001aabc:	0f 8f be 00 00 00    	jg     c001ab80 <HalConsoleScroll(int, int)+0xf4>
c001aac2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aac6:	89 d0                	mov    eax,edx
c001aac8:	c1 e0 02             	shl    eax,0x2
c001aacb:	01 d0                	add    eax,edx
c001aacd:	c1 e0 05             	shl    eax,0x5
c001aad0:	89 c2                	mov    edx,eax
c001aad2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aad6:	01 d0                	add    eax,edx
c001aad8:	89 c2                	mov    edx,eax
c001aada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aade:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001aae1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aae5:	89 d0                	mov    eax,edx
c001aae7:	c1 e0 02             	shl    eax,0x2
c001aaea:	01 d0                	add    eax,edx
c001aaec:	c1 e0 05             	shl    eax,0x5
c001aaef:	89 c2                	mov    edx,eax
c001aaf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aaf5:	01 d0                	add    eax,edx
c001aaf7:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001aafd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab01:	01 d0                	add    eax,edx
c001ab03:	8a 11                	mov    dl,BYTE PTR [ecx]
c001ab05:	88 10                	mov    BYTE PTR [eax],dl
c001ab07:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001ab0c:	75 66                	jne    c001ab74 <HalConsoleScroll(int, int)+0xe8>
c001ab0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ab12:	83 e0 01             	and    eax,0x1
c001ab15:	74 39                	je     c001ab50 <HalConsoleScroll(int, int)+0xc4>
c001ab17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab1b:	83 e0 0f             	and    eax,0xf
c001ab1e:	88 c2                	mov    dl,al
c001ab20:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ab24:	c1 e0 04             	shl    eax,0x4
c001ab27:	09 d0                	or     eax,edx
c001ab29:	88 c1                	mov    cl,al
c001ab2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ab2f:	89 d0                	mov    eax,edx
c001ab31:	c1 e0 02             	shl    eax,0x2
c001ab34:	01 d0                	add    eax,edx
c001ab36:	c1 e0 05             	shl    eax,0x5
c001ab39:	89 c2                	mov    edx,eax
c001ab3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ab3f:	01 d0                	add    eax,edx
c001ab41:	89 c2                	mov    edx,eax
c001ab43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab47:	01 d0                	add    eax,edx
c001ab49:	88 ca                	mov    dl,cl
c001ab4b:	88 10                	mov    BYTE PTR [eax],dl
c001ab4d:	eb 25                	jmp    c001ab74 <HalConsoleScroll(int, int)+0xe8>
c001ab4f:	90                   	nop
c001ab50:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ab54:	89 d0                	mov    eax,edx
c001ab56:	c1 e0 02             	shl    eax,0x2
c001ab59:	01 d0                	add    eax,edx
c001ab5b:	c1 e0 05             	shl    eax,0x5
c001ab5e:	89 c2                	mov    edx,eax
c001ab60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ab64:	01 d0                	add    eax,edx
c001ab66:	89 c2                	mov    edx,eax
c001ab68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab6c:	01 d0                	add    eax,edx
c001ab6e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001ab71:	8d 76 00             	lea    esi,[esi+0x0]
c001ab74:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001ab79:	e9 36 ff ff ff       	jmp    c001aab4 <HalConsoleScroll(int, int)+0x28>
c001ab7e:	66 90                	xchg   ax,ax
c001ab80:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001ab85:	e9 16 ff ff ff       	jmp    c001aaa0 <HalConsoleScroll(int, int)+0x14>
c001ab8a:	66 90                	xchg   ax,ax
c001ab8c:	90                   	nop
c001ab8d:	83 c4 10             	add    esp,0x10
c001ab90:	c3                   	ret    
c001ab91:	8d 76 00             	lea    esi,[esi+0x0]

c001ab94 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001ab94:	83 ec 14             	sub    esp,0x14
c001ab97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ab9b:	88 04 24             	mov    BYTE PTR [esp],al
c001ab9e:	8a 04 24             	mov    al,BYTE PTR [esp]
c001aba1:	0f b6 c0             	movzx  eax,al
c001aba4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aba8:	89 d1                	mov    ecx,edx
c001abaa:	83 e1 0f             	and    ecx,0xf
c001abad:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001abb1:	c1 e2 04             	shl    edx,0x4
c001abb4:	0f b6 d2             	movzx  edx,dl
c001abb7:	09 ca                	or     edx,ecx
c001abb9:	c1 e2 08             	shl    edx,0x8
c001abbc:	09 d0                	or     eax,edx
c001abbe:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001abc3:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001abcb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001abcf:	89 d0                	mov    eax,edx
c001abd1:	c1 e0 02             	shl    eax,0x2
c001abd4:	01 d0                	add    eax,edx
c001abd6:	c1 e0 04             	shl    eax,0x4
c001abd9:	89 c2                	mov    edx,eax
c001abdb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001abdf:	01 d0                	add    eax,edx
c001abe1:	d1 e0                	shl    eax,1
c001abe3:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001abe7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001abeb:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c001abf0:	66 89 10             	mov    WORD PTR [eax],dx
c001abf3:	90                   	nop
c001abf4:	83 c4 14             	add    esp,0x14
c001abf7:	c3                   	ret    

c001abf8 <HalConsoleCursorUpdate(int, int)>:
c001abf8:	83 ec 20             	sub    esp,0x20
c001abfb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001abff:	89 c2                	mov    edx,eax
c001ac01:	c1 e2 02             	shl    edx,0x2
c001ac04:	01 d0                	add    eax,edx
c001ac06:	c1 e0 04             	shl    eax,0x4
c001ac09:	89 c2                	mov    edx,eax
c001ac0b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ac0f:	01 d0                	add    eax,edx
c001ac11:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001ac16:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001ac1d:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001ac22:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ac26:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac2a:	ee                   	out    dx,al
c001ac2b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001ac30:	0f b6 c0             	movzx  eax,al
c001ac33:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001ac3a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001ac3e:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001ac42:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ac46:	ee                   	out    dx,al
c001ac47:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001ac4e:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001ac53:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001ac57:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ac5b:	ee                   	out    dx,al
c001ac5c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001ac61:	c1 e8 08             	shr    eax,0x8
c001ac64:	0f b6 c0             	movzx  eax,al
c001ac67:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001ac6e:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001ac72:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001ac76:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ac7a:	ee                   	out    dx,al
c001ac7b:	90                   	nop
c001ac7c:	83 c4 20             	add    esp,0x20
c001ac7f:	c3                   	ret    

c001ac80 <FAT::getName()>:
c001ac80:	b8 84 4f 02 c0       	mov    eax,0xc0024f84
c001ac85:	c3                   	ret    
c001ac86:	66 90                	xchg   ax,ax

c001ac88 <FAT::tell(void*, unsigned long long*)>:
c001ac88:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ac8d:	75 09                	jne    c001ac98 <FAT::tell(void*, unsigned long long*)+0x10>
c001ac8f:	b8 04 00 00 00       	mov    eax,0x4
c001ac94:	c3                   	ret    
c001ac95:	8d 76 00             	lea    esi,[esi+0x0]
c001ac98:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ac9d:	75 09                	jne    c001aca8 <FAT::tell(void*, unsigned long long*)+0x20>
c001ac9f:	b8 04 00 00 00       	mov    eax,0x4
c001aca4:	c3                   	ret    
c001aca5:	8d 76 00             	lea    esi,[esi+0x0]
c001aca8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001acac:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001acaf:	ba 00 00 00 00       	mov    edx,0x0
c001acb4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001acb8:	89 01                	mov    DWORD PTR [ecx],eax
c001acba:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001acbd:	b8 00 00 00 00       	mov    eax,0x0
c001acc2:	c3                   	ret    
c001acc3:	90                   	nop

c001acc4 <FAT::stat(void*, unsigned long long*)>:
c001acc4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001acc9:	75 09                	jne    c001acd4 <FAT::stat(void*, unsigned long long*)+0x10>
c001accb:	b8 04 00 00 00       	mov    eax,0x4
c001acd0:	c3                   	ret    
c001acd1:	8d 76 00             	lea    esi,[esi+0x0]
c001acd4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001acd9:	75 09                	jne    c001ace4 <FAT::stat(void*, unsigned long long*)+0x20>
c001acdb:	b8 04 00 00 00       	mov    eax,0x4
c001ace0:	c3                   	ret    
c001ace1:	8d 76 00             	lea    esi,[esi+0x0]
c001ace4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ace8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001aceb:	ba 00 00 00 00       	mov    edx,0x0
c001acf0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001acf4:	89 01                	mov    DWORD PTR [ecx],eax
c001acf6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001acf9:	b8 00 00 00 00       	mov    eax,0x0
c001acfe:	c3                   	ret    
c001acff:	90                   	nop

c001ad00 <FAT::~FAT()>:
c001ad00:	83 ec 0c             	sub    esp,0xc
c001ad03:	ba d0 4f 02 c0       	mov    edx,0xc0024fd0
c001ad08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad0c:	89 10                	mov    DWORD PTR [eax],edx
c001ad0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad12:	83 ec 0c             	sub    esp,0xc
c001ad15:	50                   	push   eax
c001ad16:	e8 5f d0 fe ff       	call   c0007d7a <Filesystem::~Filesystem()>
c001ad1b:	83 c4 10             	add    esp,0x10
c001ad1e:	90                   	nop
c001ad1f:	83 c4 0c             	add    esp,0xc
c001ad22:	c3                   	ret    
c001ad23:	90                   	nop

c001ad24 <FAT::~FAT()>:
c001ad24:	83 ec 0c             	sub    esp,0xc
c001ad27:	83 ec 0c             	sub    esp,0xc
c001ad2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad2e:	e8 cd ff ff ff       	call   c001ad00 <FAT::~FAT()>
c001ad33:	83 c4 10             	add    esp,0x10
c001ad36:	83 ec 08             	sub    esp,0x8
c001ad39:	6a 08                	push   0x8
c001ad3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad3f:	e8 a3 24 ff ff       	call   c000d1e7 <operator delete(void*, unsigned long)>
c001ad44:	83 c4 10             	add    esp,0x10
c001ad47:	83 c4 0c             	add    esp,0xc
c001ad4a:	c3                   	ret    
c001ad4b:	90                   	nop

c001ad4c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001ad4c:	83 ec 1c             	sub    esp,0x1c
c001ad4f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001ad56:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001ad5b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ad5f:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001ad66:	83 f8 ff             	cmp    eax,0xffffffff
c001ad69:	75 35                	jne    c001ada0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001ad6b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ad6f:	88 c2                	mov    dl,al
c001ad71:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001ad76:	01 d0                	add    eax,edx
c001ad78:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ad7c:	8b 15 20 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb20
c001ad82:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ad86:	89 14 85 40 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14c0],edx
c001ad8d:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001ad92:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ad96:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c001ad9d:	eb 19                	jmp    c001adb8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001ad9f:	90                   	nop
c001ada0:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ada4:	88 c2                	mov    dl,al
c001ada6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001adaa:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001adb1:	01 d0                	add    eax,edx
c001adb3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001adb7:	90                   	nop
c001adb8:	83 ec 04             	sub    esp,0x4
c001adbb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001adbf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001adc3:	8d 44 24 15          	lea    eax,[esp+0x15]
c001adc7:	50                   	push   eax
c001adc8:	e8 07 a4 fe ff       	call   c00051d4 <f_getlabel>
c001adcd:	83 c4 10             	add    esp,0x10
c001add0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001add4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001add9:	75 09                	jne    c001ade4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001addb:	b8 00 00 00 00       	mov    eax,0x0
c001ade0:	eb 0a                	jmp    c001adec <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001ade2:	66 90                	xchg   ax,ax
c001ade4:	b8 01 00 00 00       	mov    eax,0x1
c001ade9:	8d 76 00             	lea    esi,[esi+0x0]
c001adec:	83 c4 1c             	add    esp,0x1c
c001adef:	c3                   	ret    

c001adf0 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001adf0:	53                   	push   ebx
c001adf1:	83 ec 58             	sub    esp,0x58
c001adf4:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001adfc:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ae00:	b9 00 00 00 00       	mov    ecx,0x0
c001ae05:	b8 3c 00 00 00       	mov    eax,0x3c
c001ae0a:	83 e0 f8             	and    eax,0xfffffff8
c001ae0d:	89 c3                	mov    ebx,eax
c001ae0f:	b8 00 00 00 00       	mov    eax,0x0
c001ae14:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c001ae18:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c001ae1c:	83 c0 08             	add    eax,0x8
c001ae1f:	39 d8                	cmp    eax,ebx
c001ae21:	72 f1                	jb     c001ae14 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c001ae23:	01 c2                	add    edx,eax
c001ae25:	89 0a                	mov    DWORD PTR [edx],ecx
c001ae27:	83 c2 04             	add    edx,0x4
c001ae2a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ae2e:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001ae35:	83 f8 ff             	cmp    eax,0xffffffff
c001ae38:	75 36                	jne    c001ae70 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c001ae3a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ae3e:	88 c2                	mov    dl,al
c001ae40:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001ae45:	01 d0                	add    eax,edx
c001ae47:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ae4b:	8b 15 20 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb20
c001ae51:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ae55:	89 14 85 40 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14c0],edx
c001ae5c:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001ae61:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001ae65:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c001ae6c:	eb 1a                	jmp    c001ae88 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c001ae6e:	66 90                	xchg   ax,ax
c001ae70:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ae74:	88 c2                	mov    dl,al
c001ae76:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ae7a:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001ae81:	01 d0                	add    eax,edx
c001ae83:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ae87:	90                   	nop
c001ae88:	83 ec 08             	sub    esp,0x8
c001ae8b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001ae8f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ae93:	50                   	push   eax
c001ae94:	e8 d7 59 fe ff       	call   c0000870 <strcat>
c001ae99:	83 c4 10             	add    esp,0x10
c001ae9c:	83 ec 0c             	sub    esp,0xc
c001ae9f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aea3:	50                   	push   eax
c001aea4:	e8 7f a4 fe ff       	call   c0005328 <f_setlabel>
c001aea9:	83 c4 10             	add    esp,0x10
c001aeac:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001aeb0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001aeb5:	75 09                	jne    c001aec0 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c001aeb7:	b8 00 00 00 00       	mov    eax,0x0
c001aebc:	eb 0a                	jmp    c001aec8 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c001aebe:	66 90                	xchg   ax,ax
c001aec0:	b8 01 00 00 00       	mov    eax,0x1
c001aec5:	8d 76 00             	lea    esi,[esi+0x0]
c001aec8:	83 c4 58             	add    esp,0x58
c001aecb:	5b                   	pop    ebx
c001aecc:	c3                   	ret    
c001aecd:	90                   	nop
c001aece:	66 90                	xchg   ax,ax

c001aed0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001aed0:	83 ec 2c             	sub    esp,0x2c
c001aed3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001aedb:	83 ec 08             	sub    esp,0x8
c001aede:	68 a8 4f 02 c0       	push   0xc0024fa8
c001aee3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001aee7:	e8 94 58 fe ff       	call   c0000780 <strcmp>
c001aeec:	83 c4 10             	add    esp,0x10
c001aeef:	85 c0                	test   eax,eax
c001aef1:	0f 94 c0             	sete   al
c001aef4:	0f b6 c0             	movzx  eax,al
c001aef7:	85 c0                	test   eax,eax
c001aef9:	74 0d                	je     c001af08 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001aefb:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001af03:	e9 c0 00 00 00       	jmp    c001afc8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001af08:	83 ec 08             	sub    esp,0x8
c001af0b:	68 9a 4f 02 c0       	push   0xc0024f9a
c001af10:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001af14:	e8 67 58 fe ff       	call   c0000780 <strcmp>
c001af19:	83 c4 10             	add    esp,0x10
c001af1c:	85 c0                	test   eax,eax
c001af1e:	0f 94 c0             	sete   al
c001af21:	0f b6 c0             	movzx  eax,al
c001af24:	85 c0                	test   eax,eax
c001af26:	74 10                	je     c001af38 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001af28:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001af30:	e9 93 00 00 00       	jmp    c001afc8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001af35:	8d 76 00             	lea    esi,[esi+0x0]
c001af38:	83 ec 08             	sub    esp,0x8
c001af3b:	68 a0 4f 02 c0       	push   0xc0024fa0
c001af40:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001af44:	e8 37 58 fe ff       	call   c0000780 <strcmp>
c001af49:	83 c4 10             	add    esp,0x10
c001af4c:	85 c0                	test   eax,eax
c001af4e:	0f 94 c0             	sete   al
c001af51:	0f b6 c0             	movzx  eax,al
c001af54:	85 c0                	test   eax,eax
c001af56:	74 0c                	je     c001af64 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001af58:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001af60:	eb 66                	jmp    c001afc8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001af62:	66 90                	xchg   ax,ax
c001af64:	83 ec 08             	sub    esp,0x8
c001af67:	68 3c 21 02 c0       	push   0xc002213c
c001af6c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001af70:	e8 0b 58 fe ff       	call   c0000780 <strcmp>
c001af75:	83 c4 10             	add    esp,0x10
c001af78:	85 c0                	test   eax,eax
c001af7a:	0f 94 c0             	sete   al
c001af7d:	0f b6 c0             	movzx  eax,al
c001af80:	85 c0                	test   eax,eax
c001af82:	74 0c                	je     c001af90 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001af84:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001af8c:	eb 3a                	jmp    c001afc8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001af8e:	66 90                	xchg   ax,ax
c001af90:	83 ec 08             	sub    esp,0x8
c001af93:	68 a6 4f 02 c0       	push   0xc0024fa6
c001af98:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001af9c:	e8 df 57 fe ff       	call   c0000780 <strcmp>
c001afa1:	83 c4 10             	add    esp,0x10
c001afa4:	85 c0                	test   eax,eax
c001afa6:	0f 94 c0             	sete   al
c001afa9:	0f b6 c0             	movzx  eax,al
c001afac:	85 c0                	test   eax,eax
c001afae:	74 0c                	je     c001afbc <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001afb0:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001afb8:	eb 0e                	jmp    c001afc8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001afba:	66 90                	xchg   ax,ax
c001afbc:	b8 08 00 00 00       	mov    eax,0x8
c001afc1:	e9 ea 00 00 00       	jmp    c001b0b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001afc6:	66 90                	xchg   ax,ax
c001afc8:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001afcf:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001afd4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001afd8:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001afdf:	83 f8 ff             	cmp    eax,0xffffffff
c001afe2:	75 34                	jne    c001b018 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001afe4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001afe8:	88 c2                	mov    dl,al
c001afea:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001afef:	01 d0                	add    eax,edx
c001aff1:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001aff5:	8b 15 20 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb20
c001affb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001afff:	89 14 85 40 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14c0],edx
c001b006:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b00b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b00f:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c001b016:	eb 18                	jmp    c001b030 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001b018:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b01c:	88 c2                	mov    dl,al
c001b01e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b022:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b029:	01 d0                	add    eax,edx
c001b02b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b02f:	90                   	nop
c001b030:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b034:	88 04 24             	mov    BYTE PTR [esp],al
c001b037:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b03b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b03f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b047:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b04c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b054:	83 ec 0c             	sub    esp,0xc
c001b057:	68 00 20 00 00       	push   0x2000
c001b05c:	e8 0f 4a ff ff       	call   c000fa70 <malloc>
c001b061:	83 c4 10             	add    esp,0x10
c001b064:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b068:	68 00 20 00 00       	push   0x2000
c001b06d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b071:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b075:	50                   	push   eax
c001b076:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b07a:	50                   	push   eax
c001b07b:	e8 a5 a5 fe ff       	call   c0005625 <f_mkfs>
c001b080:	83 c4 10             	add    esp,0x10
c001b083:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b087:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b08c:	75 0a                	jne    c001b098 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001b08e:	b8 00 00 00 00       	mov    eax,0x0
c001b093:	eb 1b                	jmp    c001b0b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001b095:	8d 76 00             	lea    esi,[esi+0x0]
c001b098:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001b09d:	75 09                	jne    c001b0a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001b09f:	b8 09 00 00 00       	mov    eax,0x9
c001b0a4:	eb 0a                	jmp    c001b0b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001b0a6:	66 90                	xchg   ax,ax
c001b0a8:	b8 01 00 00 00       	mov    eax,0x1
c001b0ad:	8d 76 00             	lea    esi,[esi+0x0]
c001b0b0:	83 c4 2c             	add    esp,0x2c
c001b0b3:	c3                   	ret    

c001b0b4 <FAT::tryMount(LogicalDisk*, int)>:
c001b0b4:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001b0ba:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b0bf:	83 f8 14             	cmp    eax,0x14
c001b0c2:	75 18                	jne    c001b0dc <FAT::tryMount(LogicalDisk*, int)+0x28>
c001b0c4:	83 ec 0c             	sub    esp,0xc
c001b0c7:	68 ac 4f 02 c0       	push   0xc0024fac
c001b0cc:	e8 e5 4c ff ff       	call   c000fdb6 <KePanic(char const*)>
c001b0d1:	83 c4 10             	add    esp,0x10
c001b0d4:	b0 00                	mov    al,0x0
c001b0d6:	e9 ed 01 00 00       	jmp    c001b2c8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b0db:	90                   	nop
c001b0dc:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001b0e3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b0e9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b0ef:	3d 00 02 00 00       	cmp    eax,0x200
c001b0f4:	74 0a                	je     c001b100 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001b0f6:	b0 00                	mov    al,0x0
c001b0f8:	e9 cb 01 00 00       	jmp    c001b2c8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b0fd:	8d 76 00             	lea    esi,[esi+0x0]
c001b100:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001b108:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001b10f:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b116:	83 f8 ff             	cmp    eax,0xffffffff
c001b119:	74 09                	je     c001b124 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001b11b:	b0 01                	mov    al,0x1
c001b11d:	e9 a6 01 00 00       	jmp    c001b2c8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b122:	66 90                	xchg   ax,ax
c001b124:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001b12e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001b136:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001b13d:	88 c2                	mov    dl,al
c001b13f:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b144:	01 d0                	add    eax,edx
c001b146:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001b14d:	8b 15 20 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb20
c001b153:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001b15a:	89 14 85 40 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14c0],edx
c001b161:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b166:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001b16d:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c001b174:	83 ec 0c             	sub    esp,0xc
c001b177:	68 34 02 00 00       	push   0x234
c001b17c:	e8 ef 48 ff ff       	call   c000fa70 <malloc>
c001b181:	83 c4 10             	add    esp,0x10
c001b184:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001b18b:	83 ec 04             	sub    esp,0x4
c001b18e:	6a 00                	push   0x0
c001b190:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001b197:	50                   	push   eax
c001b198:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001b19f:	e8 7b 8c fe ff       	call   c0003e1f <f_mount>
c001b1a4:	83 c4 10             	add    esp,0x10
c001b1a7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001b1ae:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001b1b6:	74 1c                	je     c001b1d4 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001b1b8:	83 ec 0c             	sub    esp,0xc
c001b1bb:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001b1c2:	e8 c9 48 ff ff       	call   c000fa90 <rfree>
c001b1c7:	83 c4 10             	add    esp,0x10
c001b1ca:	b0 00                	mov    al,0x0
c001b1cc:	e9 f7 00 00 00       	jmp    c001b2c8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b1d1:	8d 76 00             	lea    esi,[esi+0x0]
c001b1d4:	83 ec 04             	sub    esp,0x4
c001b1d7:	68 00 01 00 00       	push   0x100
c001b1dc:	6a 00                	push   0x0
c001b1de:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001b1e5:	50                   	push   eax
c001b1e6:	e8 05 53 fe ff       	call   c00004f0 <memset>
c001b1eb:	83 c4 10             	add    esp,0x10
c001b1ee:	83 ec 08             	sub    esp,0x8
c001b1f1:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001b1f8:	50                   	push   eax
c001b1f9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001b200:	50                   	push   eax
c001b201:	e8 6a 56 fe ff       	call   c0000870 <strcat>
c001b206:	83 c4 10             	add    esp,0x10
c001b209:	83 ec 08             	sub    esp,0x8
c001b20c:	68 ba 4f 02 c0       	push   0xc0024fba
c001b211:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001b218:	50                   	push   eax
c001b219:	e8 52 56 fe ff       	call   c0000870 <strcat>
c001b21e:	83 c4 10             	add    esp,0x10
c001b221:	83 ec 04             	sub    esp,0x4
c001b224:	6a 01                	push   0x1
c001b226:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001b22d:	50                   	push   eax
c001b22e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b232:	50                   	push   eax
c001b233:	e8 49 8c fe ff       	call   c0003e81 <f_open>
c001b238:	83 c4 10             	add    esp,0x10
c001b23b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001b242:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001b249:	85 c0                	test   eax,eax
c001b24b:	74 0b                	je     c001b258 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001b24d:	78 31                	js     c001b280 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b24f:	83 e8 04             	sub    eax,0x4
c001b252:	83 f8 01             	cmp    eax,0x1
c001b255:	77 29                	ja     c001b280 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b257:	90                   	nop
c001b258:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001b260:	83 ec 0c             	sub    esp,0xc
c001b263:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b267:	50                   	push   eax
c001b268:	e8 c4 93 fe ff       	call   c0004631 <f_close>
c001b26d:	83 c4 10             	add    esp,0x10
c001b270:	90                   	nop
c001b271:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001b279:	85 c0                	test   eax,eax
c001b27b:	74 43                	je     c001b2c0 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001b27d:	eb 31                	jmp    c001b2b0 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001b27f:	90                   	nop
c001b280:	83 ec 0c             	sub    esp,0xc
c001b283:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001b28a:	e8 01 48 ff ff       	call   c000fa90 <rfree>
c001b28f:	83 c4 10             	add    esp,0x10
c001b292:	83 ec 04             	sub    esp,0x4
c001b295:	6a 00                	push   0x0
c001b297:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001b29e:	50                   	push   eax
c001b29f:	6a 00                	push   0x0
c001b2a1:	e8 79 8b fe ff       	call   c0003e1f <f_mount>
c001b2a6:	83 c4 10             	add    esp,0x10
c001b2a9:	b0 00                	mov    al,0x0
c001b2ab:	eb 1b                	jmp    c001b2c8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b2ad:	8d 76 00             	lea    esi,[esi+0x0]
c001b2b0:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b2b5:	83 c0 01             	add    eax,0x1
c001b2b8:	a3 20 eb 02 c0       	mov    ds:0xc002eb20,eax
c001b2bd:	8d 76 00             	lea    esi,[esi+0x0]
c001b2c0:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001b2c7:	90                   	nop
c001b2c8:	81 c4 4c 03 00 00    	add    esp,0x34c
c001b2ce:	c3                   	ret    
c001b2cf:	90                   	nop

c001b2d0 <FAT::allocateSwapfile(char const*, int)>:
c001b2d0:	55                   	push   ebp
c001b2d1:	57                   	push   edi
c001b2d2:	56                   	push   esi
c001b2d3:	53                   	push   ebx
c001b2d4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001b2da:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001b2e5:	83 ec 0c             	sub    esp,0xc
c001b2e8:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001b2ef:	e8 7c 47 ff ff       	call   c000fa70 <malloc>
c001b2f4:	83 c4 10             	add    esp,0x10
c001b2f7:	89 c7                	mov    edi,eax
c001b2f9:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001b2fe:	83 ec 04             	sub    esp,0x4
c001b301:	50                   	push   eax
c001b302:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001b309:	57                   	push   edi
c001b30a:	e8 1d ce fe ff       	call   c000812c <File::File(char const*, Process*)>
c001b30f:	83 c4 10             	add    esp,0x10
c001b312:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001b319:	83 ec 04             	sub    esp,0x4
c001b31c:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b320:	50                   	push   eax
c001b321:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b325:	50                   	push   eax
c001b326:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b32d:	e8 1a d1 fe ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c001b332:	83 c4 10             	add    esp,0x10
c001b335:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b33c:	c1 e0 14             	shl    eax,0x14
c001b33f:	89 c7                	mov    edi,eax
c001b341:	89 c5                	mov    ebp,eax
c001b343:	c1 fd 1f             	sar    ebp,0x1f
c001b346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b34a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b34e:	89 f9                	mov    ecx,edi
c001b350:	31 c1                	xor    ecx,eax
c001b352:	89 cb                	mov    ebx,ecx
c001b354:	89 e9                	mov    ecx,ebp
c001b356:	31 d1                	xor    ecx,edx
c001b358:	89 ce                	mov    esi,ecx
c001b35a:	89 f0                	mov    eax,esi
c001b35c:	09 d8                	or     eax,ebx
c001b35e:	0f 84 9c 00 00 00    	je     c001b400 <FAT::allocateSwapfile(char const*, int)+0x130>
c001b364:	83 ec 0c             	sub    esp,0xc
c001b367:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b36e:	e8 a5 cf fe ff       	call   c0008318 <File::unlink()>
c001b373:	83 c4 10             	add    esp,0x10
c001b376:	83 ec 08             	sub    esp,0x8
c001b379:	6a 12                	push   0x12
c001b37b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b382:	e8 c3 cd fe ff       	call   c000814a <File::open(FileOpenMode)>
c001b387:	83 c4 10             	add    esp,0x10
c001b38a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b391:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b397:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b39e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b3a5:	c1 e0 14             	shl    eax,0x14
c001b3a8:	83 ec 04             	sub    esp,0x4
c001b3ab:	6a 01                	push   0x1
c001b3ad:	50                   	push   eax
c001b3ae:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001b3b5:	e8 fe a0 fe ff       	call   c00054b8 <f_expand>
c001b3ba:	83 c4 10             	add    esp,0x10
c001b3bd:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b3c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001b3c6:	83 c0 10             	add    eax,0x10
c001b3c9:	8b 00                	mov    eax,DWORD PTR [eax]
c001b3cb:	83 ec 0c             	sub    esp,0xc
c001b3ce:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b3d2:	52                   	push   edx
c001b3d3:	8d 54 24 30          	lea    edx,[esp+0x30]
c001b3d7:	52                   	push   edx
c001b3d8:	6a 00                	push   0x0
c001b3da:	68 00 04 00 00       	push   0x400
c001b3df:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b3e6:	ff d0                	call   eax
c001b3e8:	83 c4 20             	add    esp,0x20
c001b3eb:	83 ec 0c             	sub    esp,0xc
c001b3ee:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b3f5:	e8 ae cd fe ff       	call   c00081a8 <File::close()>
c001b3fa:	83 c4 10             	add    esp,0x10
c001b3fd:	8d 76 00             	lea    esi,[esi+0x0]
c001b400:	83 ec 08             	sub    esp,0x8
c001b403:	6a 01                	push   0x1
c001b405:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b40c:	e8 39 cd fe ff       	call   c000814a <File::open(FileOpenMode)>
c001b411:	83 c4 10             	add    esp,0x10
c001b414:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b41b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b41d:	83 c0 0c             	add    eax,0xc
c001b420:	8b 00                	mov    eax,DWORD PTR [eax]
c001b422:	83 ec 0c             	sub    esp,0xc
c001b425:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b429:	52                   	push   edx
c001b42a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001b42e:	52                   	push   edx
c001b42f:	6a 00                	push   0x0
c001b431:	6a 04                	push   0x4
c001b433:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b43a:	ff d0                	call   eax
c001b43c:	83 c4 20             	add    esp,0x20
c001b43f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b446:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b44c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b453:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001b45a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001b45d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001b464:	83 ec 0c             	sub    esp,0xc
c001b467:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b46e:	e8 35 cd fe ff       	call   c00081a8 <File::close()>
c001b473:	83 c4 10             	add    esp,0x10
c001b476:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001b47d:	ba 00 00 00 00       	mov    edx,0x0
c001b482:	81 c4 3c 04 00 00    	add    esp,0x43c
c001b488:	5b                   	pop    ebx
c001b489:	5e                   	pop    esi
c001b48a:	5f                   	pop    edi
c001b48b:	5d                   	pop    ebp
c001b48c:	c3                   	ret    
c001b48d:	90                   	nop
c001b48e:	66 90                	xchg   ax,ax

c001b490 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001b490:	57                   	push   edi
c001b491:	56                   	push   esi
c001b492:	53                   	push   ebx
c001b493:	81 ec 50 02 00 00    	sub    esp,0x250
c001b499:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001b4a1:	74 0d                	je     c001b4b0 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001b4a3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001b4ab:	75 0f                	jne    c001b4bc <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001b4ad:	8d 76 00             	lea    esi,[esi+0x0]
c001b4b0:	b8 04 00 00 00       	mov    eax,0x4
c001b4b5:	e9 3a 01 00 00       	jmp    c001b5f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001b4ba:	66 90                	xchg   ax,ax
c001b4bc:	83 ec 08             	sub    esp,0x8
c001b4bf:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001b4c6:	50                   	push   eax
c001b4c7:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001b4ce:	e8 2a 94 fe ff       	call   c00048fd <f_readdir>
c001b4d3:	83 c4 10             	add    esp,0x10
c001b4d6:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001b4dd:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001b4e4:	83 ec 0c             	sub    esp,0xc
c001b4e7:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b4ee:	83 c0 16             	add    eax,0x16
c001b4f1:	50                   	push   eax
c001b4f2:	e8 89 50 fe ff       	call   c0000580 <strlen>
c001b4f7:	83 c4 10             	add    esp,0x10
c001b4fa:	ba 00 00 00 00       	mov    edx,0x0
c001b4ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b503:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b507:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001b50e:	0f b6 c0             	movzx  eax,al
c001b511:	83 e0 10             	and    eax,0x10
c001b514:	74 0a                	je     c001b520 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001b516:	b8 02 00 00 00       	mov    eax,0x2
c001b51b:	eb 0b                	jmp    c001b528 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001b51d:	8d 76 00             	lea    esi,[esi+0x0]
c001b520:	b8 01 00 00 00       	mov    eax,0x1
c001b525:	8d 76 00             	lea    esi,[esi+0x0]
c001b528:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b52c:	83 ec 08             	sub    esp,0x8
c001b52f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001b536:	83 c0 16             	add    eax,0x16
c001b539:	50                   	push   eax
c001b53a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b53e:	83 c0 10             	add    eax,0x10
c001b541:	50                   	push   eax
c001b542:	e8 09 51 fe ff       	call   c0000650 <strcpy>
c001b547:	83 c4 10             	add    esp,0x10
c001b54a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001b551:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001b558:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b55c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001b563:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001b56a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001b571:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001b578:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001b57f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001b586:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001b58d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001b594:	89 c6                	mov    esi,eax
c001b596:	89 d7                	mov    edi,edx
c001b598:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b59a:	89 c8                	mov    eax,ecx
c001b59c:	89 fa                	mov    edx,edi
c001b59e:	89 f3                	mov    ebx,esi
c001b5a0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001b5a7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001b5ae:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001b5b5:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001b5bc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b5c2:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001b5c9:	0f be c0             	movsx  eax,al
c001b5cc:	85 c0                	test   eax,eax
c001b5ce:	75 08                	jne    c001b5d8 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001b5d0:	b8 07 00 00 00       	mov    eax,0x7
c001b5d5:	eb 1d                	jmp    c001b5f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001b5d7:	90                   	nop
c001b5d8:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001b5df:	85 c0                	test   eax,eax
c001b5e1:	75 09                	jne    c001b5ec <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001b5e3:	b8 00 00 00 00       	mov    eax,0x0
c001b5e8:	eb 0a                	jmp    c001b5f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001b5ea:	66 90                	xchg   ax,ax
c001b5ec:	b8 01 00 00 00       	mov    eax,0x1
c001b5f1:	8d 76 00             	lea    esi,[esi+0x0]
c001b5f4:	81 c4 50 02 00 00    	add    esp,0x250
c001b5fa:	5b                   	pop    ebx
c001b5fb:	5e                   	pop    esi
c001b5fc:	5f                   	pop    edi
c001b5fd:	c3                   	ret    
c001b5fe:	66 90                	xchg   ax,ax

c001b600 <FAT::read(void*, unsigned long, void*, int*)>:
c001b600:	83 ec 1c             	sub    esp,0x1c
c001b603:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b608:	74 0a                	je     c001b614 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001b60a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b60f:	75 0b                	jne    c001b61c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001b611:	8d 76 00             	lea    esi,[esi+0x0]
c001b614:	b8 04 00 00 00       	mov    eax,0x4
c001b619:	eb 41                	jmp    c001b65c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b61b:	90                   	nop
c001b61c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b620:	50                   	push   eax
c001b621:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b625:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b629:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b62d:	e8 12 8b fe ff       	call   c0004144 <f_read>
c001b632:	83 c4 10             	add    esp,0x10
c001b635:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b63d:	89 c2                	mov    edx,eax
c001b63f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b643:	89 10                	mov    DWORD PTR [eax],edx
c001b645:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b649:	85 c0                	test   eax,eax
c001b64b:	75 07                	jne    c001b654 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001b64d:	b8 00 00 00 00       	mov    eax,0x0
c001b652:	eb 08                	jmp    c001b65c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b654:	b8 01 00 00 00       	mov    eax,0x1
c001b659:	8d 76 00             	lea    esi,[esi+0x0]
c001b65c:	83 c4 1c             	add    esp,0x1c
c001b65f:	c3                   	ret    

c001b660 <FAT::write(void*, unsigned long, void*, int*)>:
c001b660:	83 ec 1c             	sub    esp,0x1c
c001b663:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b668:	74 0a                	je     c001b674 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001b66a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b66f:	75 0b                	jne    c001b67c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001b671:	8d 76 00             	lea    esi,[esi+0x0]
c001b674:	b8 04 00 00 00       	mov    eax,0x4
c001b679:	eb 41                	jmp    c001b6bc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b67b:	90                   	nop
c001b67c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b680:	50                   	push   eax
c001b681:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b685:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b689:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b68d:	e8 93 8c fe ff       	call   c0004325 <f_write>
c001b692:	83 c4 10             	add    esp,0x10
c001b695:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b699:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b69d:	89 c2                	mov    edx,eax
c001b69f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b6a3:	89 10                	mov    DWORD PTR [eax],edx
c001b6a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6a9:	85 c0                	test   eax,eax
c001b6ab:	75 07                	jne    c001b6b4 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001b6ad:	b8 00 00 00 00       	mov    eax,0x0
c001b6b2:	eb 08                	jmp    c001b6bc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b6b4:	b8 01 00 00 00       	mov    eax,0x1
c001b6b9:	8d 76 00             	lea    esi,[esi+0x0]
c001b6bc:	83 c4 1c             	add    esp,0x1c
c001b6bf:	c3                   	ret    

c001b6c0 <FAT::close(void*)>:
c001b6c0:	83 ec 1c             	sub    esp,0x1c
c001b6c3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b6c8:	75 0a                	jne    c001b6d4 <FAT::close(void*)+0x14>
c001b6ca:	b8 04 00 00 00       	mov    eax,0x4
c001b6cf:	eb 3f                	jmp    c001b710 <FAT::close(void*)+0x50>
c001b6d1:	8d 76 00             	lea    esi,[esi+0x0]
c001b6d4:	83 ec 0c             	sub    esp,0xc
c001b6d7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b6db:	e8 51 8f fe ff       	call   c0004631 <f_close>
c001b6e0:	83 c4 10             	add    esp,0x10
c001b6e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6e7:	83 ec 0c             	sub    esp,0xc
c001b6ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b6ee:	e8 8d 43 ff ff       	call   c000fa80 <free>
c001b6f3:	83 c4 10             	add    esp,0x10
c001b6f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6fa:	85 c0                	test   eax,eax
c001b6fc:	75 0a                	jne    c001b708 <FAT::close(void*)+0x48>
c001b6fe:	b8 00 00 00 00       	mov    eax,0x0
c001b703:	eb 0b                	jmp    c001b710 <FAT::close(void*)+0x50>
c001b705:	8d 76 00             	lea    esi,[esi+0x0]
c001b708:	b8 01 00 00 00       	mov    eax,0x1
c001b70d:	8d 76 00             	lea    esi,[esi+0x0]
c001b710:	83 c4 1c             	add    esp,0x1c
c001b713:	c3                   	ret    

c001b714 <FAT::closeDir(void*)>:
c001b714:	83 ec 1c             	sub    esp,0x1c
c001b717:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b71c:	75 0a                	jne    c001b728 <FAT::closeDir(void*)+0x14>
c001b71e:	b8 04 00 00 00       	mov    eax,0x4
c001b723:	eb 3f                	jmp    c001b764 <FAT::closeDir(void*)+0x50>
c001b725:	8d 76 00             	lea    esi,[esi+0x0]
c001b728:	83 ec 0c             	sub    esp,0xc
c001b72b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b72f:	e8 a7 91 fe ff       	call   c00048db <f_closedir>
c001b734:	83 c4 10             	add    esp,0x10
c001b737:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b73b:	83 ec 0c             	sub    esp,0xc
c001b73e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b742:	e8 39 43 ff ff       	call   c000fa80 <free>
c001b747:	83 c4 10             	add    esp,0x10
c001b74a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b74e:	85 c0                	test   eax,eax
c001b750:	75 0a                	jne    c001b75c <FAT::closeDir(void*)+0x48>
c001b752:	b8 00 00 00 00       	mov    eax,0x0
c001b757:	eb 0b                	jmp    c001b764 <FAT::closeDir(void*)+0x50>
c001b759:	8d 76 00             	lea    esi,[esi+0x0]
c001b75c:	b8 01 00 00 00       	mov    eax,0x1
c001b761:	8d 76 00             	lea    esi,[esi+0x0]
c001b764:	83 c4 1c             	add    esp,0x1c
c001b767:	c3                   	ret    

c001b768 <FAT::truncate(void*, unsigned long long)>:
c001b768:	83 ec 2c             	sub    esp,0x2c
c001b76b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b76f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b773:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b777:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b77b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001b780:	75 0a                	jne    c001b78c <FAT::truncate(void*, unsigned long long)+0x24>
c001b782:	b8 04 00 00 00       	mov    eax,0x4
c001b787:	eb 47                	jmp    c001b7d0 <FAT::truncate(void*, unsigned long long)+0x68>
c001b789:	8d 76 00             	lea    esi,[esi+0x0]
c001b78c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b790:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b793:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b797:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b79f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b7a3:	83 ec 08             	sub    esp,0x8
c001b7a6:	50                   	push   eax
c001b7a7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001b7ab:	e8 b0 8e fe ff       	call   c0004660 <f_lseek>
c001b7b0:	83 c4 10             	add    esp,0x10
c001b7b3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b7b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b7bb:	85 c0                	test   eax,eax
c001b7bd:	75 09                	jne    c001b7c8 <FAT::truncate(void*, unsigned long long)+0x60>
c001b7bf:	b8 00 00 00 00       	mov    eax,0x0
c001b7c4:	eb 0a                	jmp    c001b7d0 <FAT::truncate(void*, unsigned long long)+0x68>
c001b7c6:	66 90                	xchg   ax,ax
c001b7c8:	b8 01 00 00 00       	mov    eax,0x1
c001b7cd:	8d 76 00             	lea    esi,[esi+0x0]
c001b7d0:	83 c4 2c             	add    esp,0x2c
c001b7d3:	c3                   	ret    

c001b7d4 <FAT::seek(void*, unsigned long long)>:
c001b7d4:	83 ec 2c             	sub    esp,0x2c
c001b7d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b7db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b7df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b7e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7e7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001b7ec:	75 0a                	jne    c001b7f8 <FAT::seek(void*, unsigned long long)+0x24>
c001b7ee:	b8 04 00 00 00       	mov    eax,0x4
c001b7f3:	eb 33                	jmp    c001b828 <FAT::seek(void*, unsigned long long)+0x54>
c001b7f5:	8d 76 00             	lea    esi,[esi+0x0]
c001b7f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b7fc:	83 ec 08             	sub    esp,0x8
c001b7ff:	50                   	push   eax
c001b800:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001b804:	e8 57 8e fe ff       	call   c0004660 <f_lseek>
c001b809:	83 c4 10             	add    esp,0x10
c001b80c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b810:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b814:	85 c0                	test   eax,eax
c001b816:	75 08                	jne    c001b820 <FAT::seek(void*, unsigned long long)+0x4c>
c001b818:	b8 00 00 00 00       	mov    eax,0x0
c001b81d:	eb 09                	jmp    c001b828 <FAT::seek(void*, unsigned long long)+0x54>
c001b81f:	90                   	nop
c001b820:	b8 01 00 00 00       	mov    eax,0x1
c001b825:	8d 76 00             	lea    esi,[esi+0x0]
c001b828:	83 c4 2c             	add    esp,0x2c
c001b82b:	c3                   	ret    

c001b82c <fatWrapperReadDisk>:
c001b82c:	53                   	push   ebx
c001b82d:	83 ec 18             	sub    esp,0x18
c001b830:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b834:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b838:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b83d:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001b844:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b848:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b84c:	ba 00 00 00 00       	mov    edx,0x0
c001b851:	83 ec 0c             	sub    esp,0xc
c001b854:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b858:	53                   	push   ebx
c001b859:	52                   	push   edx
c001b85a:	50                   	push   eax
c001b85b:	51                   	push   ecx
c001b85c:	e8 8b f1 fe ff       	call   c000a9ec <LogicalDisk::read(unsigned long long, int, void*)>
c001b861:	83 c4 20             	add    esp,0x20
c001b864:	83 c4 18             	add    esp,0x18
c001b867:	5b                   	pop    ebx
c001b868:	c3                   	ret    
c001b869:	8d 76 00             	lea    esi,[esi+0x0]

c001b86c <fatWrapperWriteDisk>:
c001b86c:	53                   	push   ebx
c001b86d:	83 ec 18             	sub    esp,0x18
c001b870:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b874:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b878:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b87d:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001b884:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b888:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b88c:	ba 00 00 00 00       	mov    edx,0x0
c001b891:	83 ec 0c             	sub    esp,0xc
c001b894:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b898:	53                   	push   ebx
c001b899:	52                   	push   edx
c001b89a:	50                   	push   eax
c001b89b:	51                   	push   ecx
c001b89c:	e8 b7 f1 fe ff       	call   c000aa58 <LogicalDisk::write(unsigned long long, int, void*)>
c001b8a1:	83 c4 20             	add    esp,0x20
c001b8a4:	83 c4 18             	add    esp,0x18
c001b8a7:	5b                   	pop    ebx
c001b8a8:	c3                   	ret    
c001b8a9:	8d 76 00             	lea    esi,[esi+0x0]

c001b8ac <fatWrapperIoctl>:
c001b8ac:	53                   	push   ebx
c001b8ad:	83 ec 28             	sub    esp,0x28
c001b8b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b8b4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b8b8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b8bc:	88 d0                	mov    al,dl
c001b8be:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b8c2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b8c7:	83 f8 02             	cmp    eax,0x2
c001b8ca:	75 34                	jne    c001b900 <fatWrapperIoctl+0x54>
c001b8cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b8d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b8d4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b8d9:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c001b8e0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b8e6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b8ec:	89 c2                	mov    edx,eax
c001b8ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b8f2:	66 89 10             	mov    WORD PTR [eax],dx
c001b8f5:	b8 00 00 00 00       	mov    eax,0x0
c001b8fa:	e9 c5 00 00 00       	jmp    c001b9c4 <fatWrapperIoctl+0x118>
c001b8ff:	90                   	nop
c001b900:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b905:	83 f8 01             	cmp    eax,0x1
c001b908:	75 6a                	jne    c001b974 <fatWrapperIoctl+0xc8>
c001b90a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b90e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b912:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b917:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c001b91e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b924:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b92a:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b930:	89 c8                	mov    eax,ecx
c001b932:	89 da                	mov    edx,ebx
c001b934:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b938:	c1 e0 0a             	shl    eax,0xa
c001b93b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b940:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c001b947:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b94d:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b953:	89 cb                	mov    ebx,ecx
c001b955:	c1 fb 1f             	sar    ebx,0x1f
c001b958:	53                   	push   ebx
c001b959:	51                   	push   ecx
c001b95a:	52                   	push   edx
c001b95b:	50                   	push   eax
c001b95c:	e8 e3 59 00 00       	call   c0021344 <__udivdi3>
c001b961:	83 c4 10             	add    esp,0x10
c001b964:	89 c2                	mov    edx,eax
c001b966:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b96a:	89 10                	mov    DWORD PTR [eax],edx
c001b96c:	b8 00 00 00 00       	mov    eax,0x0
c001b971:	eb 51                	jmp    c001b9c4 <fatWrapperIoctl+0x118>
c001b973:	90                   	nop
c001b974:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b979:	85 c0                	test   eax,eax
c001b97b:	75 07                	jne    c001b984 <fatWrapperIoctl+0xd8>
c001b97d:	b8 00 00 00 00       	mov    eax,0x0
c001b982:	eb 40                	jmp    c001b9c4 <fatWrapperIoctl+0x118>
c001b984:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b989:	83 f8 03             	cmp    eax,0x3
c001b98c:	75 1a                	jne    c001b9a8 <fatWrapperIoctl+0xfc>
c001b98e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b992:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b996:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b99a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b9a0:	b8 00 00 00 00       	mov    eax,0x0
c001b9a5:	eb 1d                	jmp    c001b9c4 <fatWrapperIoctl+0x118>
c001b9a7:	90                   	nop
c001b9a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b9ad:	83 f8 04             	cmp    eax,0x4
c001b9b0:	75 0a                	jne    c001b9bc <fatWrapperIoctl+0x110>
c001b9b2:	b8 00 00 00 00       	mov    eax,0x0
c001b9b7:	eb 0b                	jmp    c001b9c4 <fatWrapperIoctl+0x118>
c001b9b9:	8d 76 00             	lea    esi,[esi+0x0]
c001b9bc:	b8 04 00 00 00       	mov    eax,0x4
c001b9c1:	8d 76 00             	lea    esi,[esi+0x0]
c001b9c4:	83 c4 28             	add    esp,0x28
c001b9c7:	5b                   	pop    ebx
c001b9c8:	c3                   	ret    
c001b9c9:	90                   	nop
c001b9ca:	66 90                	xchg   ax,ax

c001b9cc <FAT::FAT()>:
c001b9cc:	83 ec 1c             	sub    esp,0x1c
c001b9cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9d3:	83 ec 0c             	sub    esp,0xc
c001b9d6:	50                   	push   eax
c001b9d7:	e8 7a c3 fe ff       	call   c0007d56 <Filesystem::Filesystem()>
c001b9dc:	83 c4 10             	add    esp,0x10
c001b9df:	ba d0 4f 02 c0       	mov    edx,0xc0024fd0
c001b9e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9e8:	89 10                	mov    DWORD PTR [eax],edx
c001b9ea:	c7 05 20 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb20,0x0
c001b9f4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b9fc:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001ba01:	7f 19                	jg     c001ba1c <FAT::FAT()+0x50>
c001ba03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba07:	c7 04 85 40 eb 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd14c0],0xffffffff
c001ba12:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001ba17:	eb e3                	jmp    c001b9fc <FAT::FAT()+0x30>
c001ba19:	8d 76 00             	lea    esi,[esi+0x0]
c001ba1c:	90                   	nop
c001ba1d:	83 c4 1c             	add    esp,0x1c
c001ba20:	c3                   	ret    
c001ba21:	90                   	nop
c001ba22:	66 90                	xchg   ax,ax

c001ba24 <FAT::fixFilepath(char*)>:
c001ba24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba28:	8a 00                	mov    al,BYTE PTR [eax]
c001ba2a:	0f be c0             	movsx  eax,al
c001ba2d:	83 f8 40             	cmp    eax,0x40
c001ba30:	7e 2e                	jle    c001ba60 <FAT::fixFilepath(char*)+0x3c>
c001ba32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba36:	8a 00                	mov    al,BYTE PTR [eax]
c001ba38:	83 e8 41             	sub    eax,0x41
c001ba3b:	88 c2                	mov    dl,al
c001ba3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba41:	88 10                	mov    BYTE PTR [eax],dl
c001ba43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba47:	8a 00                	mov    al,BYTE PTR [eax]
c001ba49:	0f be c0             	movsx  eax,al
c001ba4c:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001ba53:	83 c0 30             	add    eax,0x30
c001ba56:	88 c2                	mov    dl,al
c001ba58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba5c:	88 10                	mov    BYTE PTR [eax],dl
c001ba5e:	66 90                	xchg   ax,ax
c001ba60:	90                   	nop
c001ba61:	c3                   	ret    
c001ba62:	66 90                	xchg   ax,ax

c001ba64 <FAT::open(char const*, void**, FileOpenMode)>:
c001ba64:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ba6a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ba72:	74 0c                	je     c001ba80 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001ba74:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ba7c:	75 0e                	jne    c001ba8c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001ba7e:	66 90                	xchg   ax,ax
c001ba80:	b8 04 00 00 00       	mov    eax,0x4
c001ba85:	e9 46 01 00 00       	jmp    c001bbd0 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001ba8a:	66 90                	xchg   ax,ax
c001ba8c:	83 ec 08             	sub    esp,0x8
c001ba8f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ba96:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ba9a:	50                   	push   eax
c001ba9b:	e8 b0 4b fe ff       	call   c0000650 <strcpy>
c001baa0:	83 c4 10             	add    esp,0x10
c001baa3:	83 ec 08             	sub    esp,0x8
c001baa6:	8d 44 24 10          	lea    eax,[esp+0x10]
c001baaa:	50                   	push   eax
c001baab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bab2:	e8 6d ff ff ff       	call   c001ba24 <FAT::fixFilepath(char*)>
c001bab7:	83 c4 10             	add    esp,0x10
c001baba:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001bac2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bac9:	83 e0 01             	and    eax,0x1
c001bacc:	74 12                	je     c001bae0 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001bace:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001bad5:	83 c8 01             	or     eax,0x1
c001bad8:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001badf:	90                   	nop
c001bae0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bae7:	83 e0 04             	and    eax,0x4
c001baea:	74 24                	je     c001bb10 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001baec:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001baf3:	83 c8 30             	or     eax,0x30
c001baf6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001bafd:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001bb04:	83 c8 02             	or     eax,0x2
c001bb07:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001bb0e:	66 90                	xchg   ax,ax
c001bb10:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bb17:	83 e0 02             	and    eax,0x2
c001bb1a:	74 14                	je     c001bb30 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001bb1c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001bb23:	83 c8 02             	or     eax,0x2
c001bb26:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001bb2d:	8d 76 00             	lea    esi,[esi+0x0]
c001bb30:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bb37:	83 e0 08             	and    eax,0x8
c001bb3a:	74 14                	je     c001bb50 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001bb3c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001bb43:	83 c8 04             	or     eax,0x4
c001bb46:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001bb4d:	8d 76 00             	lea    esi,[esi+0x0]
c001bb50:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bb57:	83 e0 10             	and    eax,0x10
c001bb5a:	74 14                	je     c001bb70 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001bb5c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001bb63:	83 c8 08             	or     eax,0x8
c001bb66:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001bb6d:	8d 76 00             	lea    esi,[esi+0x0]
c001bb70:	83 ec 0c             	sub    esp,0xc
c001bb73:	68 28 02 00 00       	push   0x228
c001bb78:	e8 f3 3e ff ff       	call   c000fa70 <malloc>
c001bb7d:	83 c4 10             	add    esp,0x10
c001bb80:	89 c2                	mov    edx,eax
c001bb82:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bb89:	89 10                	mov    DWORD PTR [eax],edx
c001bb8b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001bb93:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bb9a:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb9c:	83 ec 04             	sub    esp,0x4
c001bb9f:	52                   	push   edx
c001bba0:	8d 54 24 10          	lea    edx,[esp+0x10]
c001bba4:	52                   	push   edx
c001bba5:	50                   	push   eax
c001bba6:	e8 d6 82 fe ff       	call   c0003e81 <f_open>
c001bbab:	83 c4 10             	add    esp,0x10
c001bbae:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001bbb5:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001bbbd:	74 09                	je     c001bbc8 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001bbbf:	b8 01 00 00 00       	mov    eax,0x1
c001bbc4:	eb 0a                	jmp    c001bbd0 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001bbc6:	66 90                	xchg   ax,ax
c001bbc8:	b8 00 00 00 00       	mov    eax,0x0
c001bbcd:	8d 76 00             	lea    esi,[esi+0x0]
c001bbd0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bbd6:	c3                   	ret    
c001bbd7:	90                   	nop

c001bbd8 <FAT::openDir(char const*, void**)>:
c001bbd8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bbde:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bbe6:	74 0c                	je     c001bbf4 <FAT::openDir(char const*, void**)+0x1c>
c001bbe8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001bbf0:	75 0e                	jne    c001bc00 <FAT::openDir(char const*, void**)+0x28>
c001bbf2:	66 90                	xchg   ax,ax
c001bbf4:	b8 04 00 00 00       	mov    eax,0x4
c001bbf9:	e9 82 00 00 00       	jmp    c001bc80 <FAT::openDir(char const*, void**)+0xa8>
c001bbfe:	66 90                	xchg   ax,ax
c001bc00:	83 ec 08             	sub    esp,0x8
c001bc03:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bc0a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bc0e:	50                   	push   eax
c001bc0f:	e8 3c 4a fe ff       	call   c0000650 <strcpy>
c001bc14:	83 c4 10             	add    esp,0x10
c001bc17:	83 ec 08             	sub    esp,0x8
c001bc1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bc1e:	50                   	push   eax
c001bc1f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bc26:	e8 f9 fd ff ff       	call   c001ba24 <FAT::fixFilepath(char*)>
c001bc2b:	83 c4 10             	add    esp,0x10
c001bc2e:	83 ec 0c             	sub    esp,0xc
c001bc31:	6a 30                	push   0x30
c001bc33:	e8 38 3e ff ff       	call   c000fa70 <malloc>
c001bc38:	83 c4 10             	add    esp,0x10
c001bc3b:	89 c2                	mov    edx,eax
c001bc3d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bc44:	89 10                	mov    DWORD PTR [eax],edx
c001bc46:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bc4d:	8b 00                	mov    eax,DWORD PTR [eax]
c001bc4f:	83 ec 08             	sub    esp,0x8
c001bc52:	8d 54 24 14          	lea    edx,[esp+0x14]
c001bc56:	52                   	push   edx
c001bc57:	50                   	push   eax
c001bc58:	e8 b3 8b fe ff       	call   c0004810 <f_opendir>
c001bc5d:	83 c4 10             	add    esp,0x10
c001bc60:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bc67:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001bc6f:	74 07                	je     c001bc78 <FAT::openDir(char const*, void**)+0xa0>
c001bc71:	b8 01 00 00 00       	mov    eax,0x1
c001bc76:	eb 08                	jmp    c001bc80 <FAT::openDir(char const*, void**)+0xa8>
c001bc78:	b8 00 00 00 00       	mov    eax,0x0
c001bc7d:	8d 76 00             	lea    esi,[esi+0x0]
c001bc80:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bc86:	c3                   	ret    
c001bc87:	90                   	nop

c001bc88 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001bc88:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001bc8e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001bc96:	75 0c                	jne    c001bca4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001bc98:	b8 04 00 00 00       	mov    eax,0x4
c001bc9d:	e9 d6 00 00 00       	jmp    c001bd78 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001bca2:	66 90                	xchg   ax,ax
c001bca4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001bcac:	75 0a                	jne    c001bcb8 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001bcae:	b8 04 00 00 00       	mov    eax,0x4
c001bcb3:	e9 c0 00 00 00       	jmp    c001bd78 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001bcb8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001bcc0:	75 0a                	jne    c001bccc <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001bcc2:	b8 04 00 00 00       	mov    eax,0x4
c001bcc7:	e9 ac 00 00 00       	jmp    c001bd78 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001bccc:	83 ec 08             	sub    esp,0x8
c001bccf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bcd6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001bcdd:	50                   	push   eax
c001bcde:	e8 6d 49 fe ff       	call   c0000650 <strcpy>
c001bce3:	83 c4 10             	add    esp,0x10
c001bce6:	83 ec 08             	sub    esp,0x8
c001bce9:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001bcf0:	50                   	push   eax
c001bcf1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bcf8:	e8 27 fd ff ff       	call   c001ba24 <FAT::fixFilepath(char*)>
c001bcfd:	83 c4 10             	add    esp,0x10
c001bd00:	83 ec 08             	sub    esp,0x8
c001bd03:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bd07:	50                   	push   eax
c001bd08:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001bd0f:	50                   	push   eax
c001bd10:	e8 7a 8c fe ff       	call   c000498f <f_stat>
c001bd15:	83 c4 10             	add    esp,0x10
c001bd18:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001bd1f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001bd26:	85 c0                	test   eax,eax
c001bd28:	74 0a                	je     c001bd34 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001bd2a:	83 f8 04             	cmp    eax,0x4
c001bd2d:	74 39                	je     c001bd68 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001bd2f:	eb 3f                	jmp    c001bd70 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001bd31:	8d 76 00             	lea    esi,[esi+0x0]
c001bd34:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bd38:	0f b6 c0             	movzx  eax,al
c001bd3b:	83 e0 10             	and    eax,0x10
c001bd3e:	0f 95 c2             	setne  dl
c001bd41:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001bd48:	88 10                	mov    BYTE PTR [eax],dl
c001bd4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd4e:	ba 00 00 00 00       	mov    edx,0x0
c001bd53:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001bd5a:	89 01                	mov    DWORD PTR [ecx],eax
c001bd5c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bd5f:	b8 00 00 00 00       	mov    eax,0x0
c001bd64:	eb 12                	jmp    c001bd78 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001bd66:	66 90                	xchg   ax,ax
c001bd68:	b8 02 00 00 00       	mov    eax,0x2
c001bd6d:	eb 09                	jmp    c001bd78 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001bd6f:	90                   	nop
c001bd70:	b8 01 00 00 00       	mov    eax,0x1
c001bd75:	8d 76 00             	lea    esi,[esi+0x0]
c001bd78:	81 c4 2c 02 00 00    	add    esp,0x22c
c001bd7e:	c3                   	ret    
c001bd7f:	90                   	nop

c001bd80 <FAT::unlink(char const*)>:
c001bd80:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bd86:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bd8e:	75 08                	jne    c001bd98 <FAT::unlink(char const*)+0x18>
c001bd90:	b8 04 00 00 00       	mov    eax,0x4
c001bd95:	eb 61                	jmp    c001bdf8 <FAT::unlink(char const*)+0x78>
c001bd97:	90                   	nop
c001bd98:	83 ec 08             	sub    esp,0x8
c001bd9b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bda2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bda6:	50                   	push   eax
c001bda7:	e8 a4 48 fe ff       	call   c0000650 <strcpy>
c001bdac:	83 c4 10             	add    esp,0x10
c001bdaf:	83 ec 08             	sub    esp,0x8
c001bdb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bdb6:	50                   	push   eax
c001bdb7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bdbe:	e8 61 fc ff ff       	call   c001ba24 <FAT::fixFilepath(char*)>
c001bdc3:	83 c4 10             	add    esp,0x10
c001bdc6:	83 ec 0c             	sub    esp,0xc
c001bdc9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bdcd:	50                   	push   eax
c001bdce:	e8 2e 8e fe ff       	call   c0004c01 <f_unlink>
c001bdd3:	83 c4 10             	add    esp,0x10
c001bdd6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bddd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001bde4:	85 c0                	test   eax,eax
c001bde6:	75 08                	jne    c001bdf0 <FAT::unlink(char const*)+0x70>
c001bde8:	b8 00 00 00 00       	mov    eax,0x0
c001bded:	eb 09                	jmp    c001bdf8 <FAT::unlink(char const*)+0x78>
c001bdef:	90                   	nop
c001bdf0:	b8 01 00 00 00       	mov    eax,0x1
c001bdf5:	8d 76 00             	lea    esi,[esi+0x0]
c001bdf8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bdfe:	c3                   	ret    
c001bdff:	90                   	nop

c001be00 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001be00:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001be06:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001be0d:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001be14:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001be18:	88 d0                	mov    al,dl
c001be1a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001be1e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001be26:	75 0c                	jne    c001be34 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001be28:	b8 04 00 00 00       	mov    eax,0x4
c001be2d:	e9 7e 01 00 00       	jmp    c001bfb0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001be32:	66 90                	xchg   ax,ax
c001be34:	83 ec 08             	sub    esp,0x8
c001be37:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001be3e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001be42:	50                   	push   eax
c001be43:	e8 08 48 fe ff       	call   c0000650 <strcpy>
c001be48:	83 c4 10             	add    esp,0x10
c001be4b:	83 ec 08             	sub    esp,0x8
c001be4e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001be52:	50                   	push   eax
c001be53:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001be5a:	e8 c5 fb ff ff       	call   c001ba24 <FAT::fixFilepath(char*)>
c001be5f:	83 c4 10             	add    esp,0x10
c001be62:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001be6a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001be72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be77:	83 e0 01             	and    eax,0x1
c001be7a:	74 14                	je     c001be90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001be7c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001be83:	83 c8 01             	or     eax,0x1
c001be86:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001be8d:	8d 76 00             	lea    esi,[esi+0x0]
c001be90:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be95:	83 e0 02             	and    eax,0x2
c001be98:	74 12                	je     c001beac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001be9a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001bea1:	83 c8 20             	or     eax,0x20
c001bea4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001beab:	90                   	nop
c001beac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001beb1:	83 e0 04             	and    eax,0x4
c001beb4:	74 12                	je     c001bec8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001beb6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001bebd:	83 c8 04             	or     eax,0x4
c001bec0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001bec7:	90                   	nop
c001bec8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001becd:	83 e0 08             	and    eax,0x8
c001bed0:	74 12                	je     c001bee4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001bed2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001bed9:	83 c8 02             	or     eax,0x2
c001bedc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001bee3:	90                   	nop
c001bee4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bee9:	83 e0 01             	and    eax,0x1
c001beec:	74 12                	je     c001bf00 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001beee:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001bef5:	83 c8 01             	or     eax,0x1
c001bef8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001beff:	90                   	nop
c001bf00:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bf05:	83 e0 02             	and    eax,0x2
c001bf08:	74 12                	je     c001bf1c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001bf0a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001bf11:	83 c8 20             	or     eax,0x20
c001bf14:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001bf1b:	90                   	nop
c001bf1c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bf21:	83 e0 04             	and    eax,0x4
c001bf24:	74 12                	je     c001bf38 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001bf26:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001bf2d:	83 c8 04             	or     eax,0x4
c001bf30:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001bf37:	90                   	nop
c001bf38:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bf3d:	83 e0 08             	and    eax,0x8
c001bf40:	74 12                	je     c001bf54 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001bf42:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001bf49:	83 c8 02             	or     eax,0x2
c001bf4c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001bf53:	90                   	nop
c001bf54:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001bf5b:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001bf62:	09 d0                	or     eax,edx
c001bf64:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001bf6b:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001bf73:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001bf7b:	83 ec 04             	sub    esp,0x4
c001bf7e:	52                   	push   edx
c001bf7f:	50                   	push   eax
c001bf80:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bf84:	50                   	push   eax
c001bf85:	e8 ea 90 fe ff       	call   c0005074 <f_chmod>
c001bf8a:	83 c4 10             	add    esp,0x10
c001bf8d:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001bf94:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001bf9b:	85 c0                	test   eax,eax
c001bf9d:	75 09                	jne    c001bfa8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001bf9f:	b8 00 00 00 00       	mov    eax,0x0
c001bfa4:	eb 0a                	jmp    c001bfb0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001bfa6:	66 90                	xchg   ax,ax
c001bfa8:	b8 01 00 00 00       	mov    eax,0x1
c001bfad:	8d 76 00             	lea    esi,[esi+0x0]
c001bfb0:	81 c4 2c 01 00 00    	add    esp,0x12c
c001bfb6:	c3                   	ret    
c001bfb7:	90                   	nop

c001bfb8 <FAT::rename(char const*, char const*)>:
c001bfb8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bfbe:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001bfc6:	74 0c                	je     c001bfd4 <FAT::rename(char const*, char const*)+0x1c>
c001bfc8:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001bfd0:	75 0e                	jne    c001bfe0 <FAT::rename(char const*, char const*)+0x28>
c001bfd2:	66 90                	xchg   ax,ax
c001bfd4:	b8 04 00 00 00       	mov    eax,0x4
c001bfd9:	e9 9e 00 00 00       	jmp    c001c07c <FAT::rename(char const*, char const*)+0xc4>
c001bfde:	66 90                	xchg   ax,ax
c001bfe0:	83 ec 08             	sub    esp,0x8
c001bfe3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bfea:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001bff1:	50                   	push   eax
c001bff2:	e8 59 46 fe ff       	call   c0000650 <strcpy>
c001bff7:	83 c4 10             	add    esp,0x10
c001bffa:	83 ec 08             	sub    esp,0x8
c001bffd:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001c004:	50                   	push   eax
c001c005:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c00c:	e8 13 fa ff ff       	call   c001ba24 <FAT::fixFilepath(char*)>
c001c011:	83 c4 10             	add    esp,0x10
c001c014:	83 ec 08             	sub    esp,0x8
c001c017:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001c01e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c022:	50                   	push   eax
c001c023:	e8 28 46 fe ff       	call   c0000650 <strcpy>
c001c028:	83 c4 10             	add    esp,0x10
c001c02b:	83 ec 08             	sub    esp,0x8
c001c02e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c032:	50                   	push   eax
c001c033:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c03a:	e8 e5 f9 ff ff       	call   c001ba24 <FAT::fixFilepath(char*)>
c001c03f:	83 c4 10             	add    esp,0x10
c001c042:	83 ec 08             	sub    esp,0x8
c001c045:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c049:	50                   	push   eax
c001c04a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c051:	50                   	push   eax
c001c052:	e8 65 8e fe ff       	call   c0004ebc <f_rename>
c001c057:	83 c4 10             	add    esp,0x10
c001c05a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001c061:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001c068:	85 c0                	test   eax,eax
c001c06a:	75 08                	jne    c001c074 <FAT::rename(char const*, char const*)+0xbc>
c001c06c:	b8 00 00 00 00       	mov    eax,0x0
c001c071:	eb 09                	jmp    c001c07c <FAT::rename(char const*, char const*)+0xc4>
c001c073:	90                   	nop
c001c074:	b8 01 00 00 00       	mov    eax,0x1
c001c079:	8d 76 00             	lea    esi,[esi+0x0]
c001c07c:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c082:	c3                   	ret    
c001c083:	90                   	nop

c001c084 <FAT::mkdir(char const*)>:
c001c084:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c08a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c092:	75 08                	jne    c001c09c <FAT::mkdir(char const*)+0x18>
c001c094:	b8 04 00 00 00       	mov    eax,0x4
c001c099:	eb 61                	jmp    c001c0fc <FAT::mkdir(char const*)+0x78>
c001c09b:	90                   	nop
c001c09c:	83 ec 08             	sub    esp,0x8
c001c09f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c0a6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c0aa:	50                   	push   eax
c001c0ab:	e8 a0 45 fe ff       	call   c0000650 <strcpy>
c001c0b0:	83 c4 10             	add    esp,0x10
c001c0b3:	83 ec 08             	sub    esp,0x8
c001c0b6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c0ba:	50                   	push   eax
c001c0bb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c0c2:	e8 5d f9 ff ff       	call   c001ba24 <FAT::fixFilepath(char*)>
c001c0c7:	83 c4 10             	add    esp,0x10
c001c0ca:	83 ec 0c             	sub    esp,0xc
c001c0cd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c0d1:	50                   	push   eax
c001c0d2:	e8 4a 8c fe ff       	call   c0004d21 <f_mkdir>
c001c0d7:	83 c4 10             	add    esp,0x10
c001c0da:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c0e1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c0e8:	85 c0                	test   eax,eax
c001c0ea:	75 08                	jne    c001c0f4 <FAT::mkdir(char const*)+0x70>
c001c0ec:	b8 00 00 00 00       	mov    eax,0x0
c001c0f1:	eb 09                	jmp    c001c0fc <FAT::mkdir(char const*)+0x78>
c001c0f3:	90                   	nop
c001c0f4:	b8 01 00 00 00       	mov    eax,0x1
c001c0f9:	8d 76 00             	lea    esi,[esi+0x0]
c001c0fc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c102:	c3                   	ret    
c001c103:	90                   	nop

c001c104 <FAT::exists(char const*)>:
c001c104:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c10a:	83 ec 08             	sub    esp,0x8
c001c10d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c114:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c118:	50                   	push   eax
c001c119:	e8 32 45 fe ff       	call   c0000650 <strcpy>
c001c11e:	83 c4 10             	add    esp,0x10
c001c121:	83 ec 08             	sub    esp,0x8
c001c124:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c128:	50                   	push   eax
c001c129:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c130:	e8 ef f8 ff ff       	call   c001ba24 <FAT::fixFilepath(char*)>
c001c135:	83 c4 10             	add    esp,0x10
c001c138:	83 ec 08             	sub    esp,0x8
c001c13b:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001c142:	50                   	push   eax
c001c143:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c147:	50                   	push   eax
c001c148:	e8 42 88 fe ff       	call   c000498f <f_stat>
c001c14d:	83 c4 10             	add    esp,0x10
c001c150:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c157:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c15e:	85 c0                	test   eax,eax
c001c160:	75 06                	jne    c001c168 <FAT::exists(char const*)+0x64>
c001c162:	b0 01                	mov    al,0x1
c001c164:	eb 06                	jmp    c001c16c <FAT::exists(char const*)+0x68>
c001c166:	66 90                	xchg   ax,ax
c001c168:	b0 00                	mov    al,0x0
c001c16a:	66 90                	xchg   ax,ax
c001c16c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c172:	c3                   	ret    
c001c173:	90                   	nop

c001c174 <isoReadDiscSectorHelper>:
c001c174:	83 ec 2c             	sub    esp,0x2c
c001c177:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c17b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c17f:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c184:	83 e8 41             	sub    eax,0x41
c001c187:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001c18e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c192:	ba 00 00 00 00       	mov    edx,0x0
c001c197:	83 ec 0c             	sub    esp,0xc
c001c19a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c19e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c1a2:	52                   	push   edx
c001c1a3:	50                   	push   eax
c001c1a4:	51                   	push   ecx
c001c1a5:	e8 42 e8 fe ff       	call   c000a9ec <LogicalDisk::read(unsigned long long, int, void*)>
c001c1aa:	83 c4 20             	add    esp,0x20
c001c1ad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c1b1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001c1b6:	74 0c                	je     c001c1c4 <isoReadDiscSectorHelper+0x50>
c001c1b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c1bc:	c1 e0 0b             	shl    eax,0xb
c001c1bf:	eb 0b                	jmp    c001c1cc <isoReadDiscSectorHelper+0x58>
c001c1c1:	8d 76 00             	lea    esi,[esi+0x0]
c001c1c4:	b8 00 00 00 00       	mov    eax,0x0
c001c1c9:	8d 76 00             	lea    esi,[esi+0x0]
c001c1cc:	83 c4 2c             	add    esp,0x2c
c001c1cf:	c3                   	ret    

c001c1d0 <iso_kprintf>:
c001c1d0:	83 ec 0c             	sub    esp,0xc
c001c1d3:	83 ec 08             	sub    esp,0x8
c001c1d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c1da:	68 75 4c 02 c0       	push   0xc0024c75
c001c1df:	e8 6a ad fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c1e4:	83 c4 10             	add    esp,0x10
c001c1e7:	90                   	nop
c001c1e8:	83 c4 0c             	add    esp,0xc
c001c1eb:	c3                   	ret    

c001c1ec <iso_kprintfd>:
c001c1ec:	83 ec 0c             	sub    esp,0xc
c001c1ef:	83 ec 08             	sub    esp,0x8
c001c1f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c1f6:	68 06 3a 02 c0       	push   0xc0023a06
c001c1fb:	e8 4e ad fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c200:	83 c4 10             	add    esp,0x10
c001c203:	90                   	nop
c001c204:	83 c4 0c             	add    esp,0xc
c001c207:	c3                   	ret    

c001c208 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001c208:	b8 08 00 00 00       	mov    eax,0x8
c001c20d:	c3                   	ret    

c001c20e <ISO9660::truncate(void*, unsigned long long)>:
c001c20e:	b8 01 00 00 00       	mov    eax,0x1
c001c213:	c3                   	ret    

c001c214 <ISO9660::getName()>:
c001c214:	b8 34 50 02 c0       	mov    eax,0xc0025034
c001c219:	c3                   	ret    

c001c21a <ISO9660::closeDir(void*)>:
c001c21a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c21e:	8b 00                	mov    eax,DWORD PTR [eax]
c001c220:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001c223:	90                   	nop

c001c224 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001c224:	b8 01 00 00 00       	mov    eax,0x1
c001c229:	c3                   	ret    

c001c22a <ISO9660::unlink(char const*)>:
c001c22a:	b8 01 00 00 00       	mov    eax,0x1
c001c22f:	c3                   	ret    

c001c230 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001c230:	b8 03 00 00 00       	mov    eax,0x3
c001c235:	c3                   	ret    

c001c236 <ISO9660::rename(char const*, char const*)>:
c001c236:	b8 01 00 00 00       	mov    eax,0x1
c001c23b:	c3                   	ret    

c001c23c <ISO9660::mkdir(char const*)>:
c001c23c:	b8 01 00 00 00       	mov    eax,0x1
c001c241:	c3                   	ret    

c001c242 <ISO9660::~ISO9660()>:
c001c242:	83 ec 0c             	sub    esp,0xc
c001c245:	ba 74 51 02 c0       	mov    edx,0xc0025174
c001c24a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c24e:	89 10                	mov    DWORD PTR [eax],edx
c001c250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c254:	83 ec 0c             	sub    esp,0xc
c001c257:	50                   	push   eax
c001c258:	e8 1d bb fe ff       	call   c0007d7a <Filesystem::~Filesystem()>
c001c25d:	83 c4 10             	add    esp,0x10
c001c260:	90                   	nop
c001c261:	83 c4 0c             	add    esp,0xc
c001c264:	c3                   	ret    
c001c265:	90                   	nop

c001c266 <ISO9660::~ISO9660()>:
c001c266:	83 ec 0c             	sub    esp,0xc
c001c269:	83 ec 0c             	sub    esp,0xc
c001c26c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c270:	e8 cd ff ff ff       	call   c001c242 <ISO9660::~ISO9660()>
c001c275:	83 c4 10             	add    esp,0x10
c001c278:	83 ec 08             	sub    esp,0x8
c001c27b:	6a 08                	push   0x8
c001c27d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c281:	e8 61 0f ff ff       	call   c000d1e7 <operator delete(void*, unsigned long)>
c001c286:	83 c4 10             	add    esp,0x10
c001c289:	83 c4 0c             	add    esp,0xc
c001c28c:	c3                   	ret    
c001c28d:	90                   	nop

c001c28e <ISO9660::exists(char const*)>:
c001c28e:	83 ec 18             	sub    esp,0x18
c001c291:	68 4f 50 02 c0       	push   0xc002504f
c001c296:	e8 1b 3b ff ff       	call   c000fdb6 <KePanic(char const*)>
c001c29b:	31 c0                	xor    eax,eax
c001c29d:	83 c4 1c             	add    esp,0x1c
c001c2a0:	c3                   	ret    
c001c2a1:	90                   	nop

c001c2a2 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c2a2:	56                   	push   esi
c001c2a3:	53                   	push   ebx
c001c2a4:	53                   	push   ebx
c001c2a5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c2a9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c2ad:	85 db                	test   ebx,ebx
c001c2af:	0f 84 ca 00 00 00    	je     c001c37f <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001c2b5:	85 f6                	test   esi,esi
c001c2b7:	0f 84 c2 00 00 00    	je     c001c37f <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001c2bd:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001c2c2:	b8 03 00 00 00       	mov    eax,0x3
c001c2c7:	0f 85 b7 00 00 00    	jne    c001c384 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001c2cd:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001c2cf:	38 0d 20 ec 02 c0    	cmp    BYTE PTR ds:0xc002ec20,cl
c001c2d5:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001c2dc:	74 1b                	je     c001c2f9 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001c2de:	85 c0                	test   eax,eax
c001c2e0:	74 10                	je     c001c2f2 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001c2e2:	83 ec 0c             	sub    esp,0xc
c001c2e5:	68 6d 50 02 c0       	push   0xc002506d
c001c2ea:	e8 c7 3a ff ff       	call   c000fdb6 <KePanic(char const*)>
c001c2ef:	83 c4 10             	add    esp,0x10
c001c2f2:	8a 03                	mov    al,BYTE PTR [ebx]
c001c2f4:	a2 20 ec 02 c0       	mov    ds:0xc002ec20,al
c001c2f9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c2fc:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001c303:	85 c0                	test   eax,eax
c001c305:	74 09                	je     c001c310 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001c307:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001c30e:	74 48                	je     c001c358 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001c310:	83 ec 0c             	sub    esp,0xc
c001c313:	68 7d 50 02 c0       	push   0xc002507d
c001c318:	e8 31 ac fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c31d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c320:	83 c4 10             	add    esp,0x10
c001c323:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001c32a:	85 c0                	test   eax,eax
c001c32c:	74 17                	je     c001c345 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001c32e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c335:	83 ec 0c             	sub    esp,0xc
c001c338:	68 9d 50 02 c0       	push   0xc002509d
c001c33d:	e8 0c ac fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c342:	83 c4 10             	add    esp,0x10
c001c345:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001c34c:	83 ec 0c             	sub    esp,0xc
c001c34f:	50                   	push   eax
c001c350:	e8 f2 a8 fe ff       	call   c0006c47 <init_percd>
c001c355:	83 c4 10             	add    esp,0x10
c001c358:	51                   	push   ecx
c001c359:	83 c3 03             	add    ebx,0x3
c001c35c:	51                   	push   ecx
c001c35d:	6a 00                	push   0x0
c001c35f:	53                   	push   ebx
c001c360:	e8 a5 a3 fe ff       	call   c000670a <iso_open>
c001c365:	83 c4 10             	add    esp,0x10
c001c368:	89 c2                	mov    edx,eax
c001c36a:	b8 01 00 00 00       	mov    eax,0x1
c001c36f:	83 fa ff             	cmp    edx,0xffffffff
c001c372:	74 10                	je     c001c384 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001c374:	83 c2 32             	add    edx,0x32
c001c377:	31 c0                	xor    eax,eax
c001c379:	01 d2                	add    edx,edx
c001c37b:	89 16                	mov    DWORD PTR [esi],edx
c001c37d:	eb 05                	jmp    c001c384 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001c37f:	b8 04 00 00 00       	mov    eax,0x4
c001c384:	5a                   	pop    edx
c001c385:	5b                   	pop    ebx
c001c386:	5e                   	pop    esi
c001c387:	c3                   	ret    

c001c388 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001c388:	53                   	push   ebx
c001c389:	83 ec 08             	sub    esp,0x8
c001c38c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c394:	85 c0                	test   eax,eax
c001c396:	74 2d                	je     c001c3c5 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001c398:	85 db                	test   ebx,ebx
c001c39a:	74 29                	je     c001c3c5 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001c39c:	52                   	push   edx
c001c39d:	b9 02 00 00 00       	mov    ecx,0x2
c001c3a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3a6:	99                   	cdq    
c001c3a7:	f7 f9                	idiv   ecx
c001c3a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c3ad:	83 e8 32             	sub    eax,0x32
c001c3b0:	50                   	push   eax
c001c3b1:	e8 fc a3 fe ff       	call   c00067b2 <iso_read>
c001c3b6:	83 c4 10             	add    esp,0x10
c001c3b9:	89 03                	mov    DWORD PTR [ebx],eax
c001c3bb:	09 d0                	or     eax,edx
c001c3bd:	0f 94 c0             	sete   al
c001c3c0:	0f b6 c0             	movzx  eax,al
c001c3c3:	eb 05                	jmp    c001c3ca <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001c3c5:	b8 04 00 00 00       	mov    eax,0x4
c001c3ca:	83 c4 08             	add    esp,0x8
c001c3cd:	5b                   	pop    ebx
c001c3ce:	c3                   	ret    
c001c3cf:	90                   	nop

c001c3d0 <ISO9660::seek(void*, unsigned long long)>:
c001c3d0:	57                   	push   edi
c001c3d1:	b8 04 00 00 00       	mov    eax,0x4
c001c3d6:	56                   	push   esi
c001c3d7:	51                   	push   ecx
c001c3d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c3dc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c3e0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c3e4:	85 d2                	test   edx,edx
c001c3e6:	74 26                	je     c001c40e <ISO9660::seek(void*, unsigned long long)+0x3e>
c001c3e8:	89 d0                	mov    eax,edx
c001c3ea:	b9 02 00 00 00       	mov    ecx,0x2
c001c3ef:	6a 00                	push   0x0
c001c3f1:	99                   	cdq    
c001c3f2:	f7 f9                	idiv   ecx
c001c3f4:	57                   	push   edi
c001c3f5:	56                   	push   esi
c001c3f6:	83 e8 32             	sub    eax,0x32
c001c3f9:	50                   	push   eax
c001c3fa:	e8 c9 a4 fe ff       	call   c00068c8 <iso_seek>
c001c3ff:	83 c4 10             	add    esp,0x10
c001c402:	31 f0                	xor    eax,esi
c001c404:	31 fa                	xor    edx,edi
c001c406:	09 d0                	or     eax,edx
c001c408:	0f 95 c0             	setne  al
c001c40b:	0f b6 c0             	movzx  eax,al
c001c40e:	5a                   	pop    edx
c001c40f:	5e                   	pop    esi
c001c410:	5f                   	pop    edi
c001c411:	c3                   	ret    

c001c412 <ISO9660::tell(void*, unsigned long long*)>:
c001c412:	53                   	push   ebx
c001c413:	83 ec 08             	sub    esp,0x8
c001c416:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c41a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c41e:	85 c0                	test   eax,eax
c001c420:	74 24                	je     c001c446 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001c422:	85 db                	test   ebx,ebx
c001c424:	74 20                	je     c001c446 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001c426:	b9 02 00 00 00       	mov    ecx,0x2
c001c42b:	99                   	cdq    
c001c42c:	f7 f9                	idiv   ecx
c001c42e:	83 ec 0c             	sub    esp,0xc
c001c431:	83 e8 32             	sub    eax,0x32
c001c434:	50                   	push   eax
c001c435:	e8 12 a5 fe ff       	call   c000694c <iso_tell>
c001c43a:	83 c4 10             	add    esp,0x10
c001c43d:	89 03                	mov    DWORD PTR [ebx],eax
c001c43f:	31 c0                	xor    eax,eax
c001c441:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001c444:	eb 05                	jmp    c001c44b <ISO9660::tell(void*, unsigned long long*)+0x39>
c001c446:	b8 04 00 00 00       	mov    eax,0x4
c001c44b:	83 c4 08             	add    esp,0x8
c001c44e:	5b                   	pop    ebx
c001c44f:	c3                   	ret    

c001c450 <ISO9660::stat(void*, unsigned long long*)>:
c001c450:	56                   	push   esi
c001c451:	53                   	push   ebx
c001c452:	83 ec 10             	sub    esp,0x10
c001c455:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c459:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c45d:	68 c1 50 02 c0       	push   0xc00250c1
c001c462:	e8 e7 aa fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c467:	83 c4 10             	add    esp,0x10
c001c46a:	85 db                	test   ebx,ebx
c001c46c:	74 2a                	je     c001c498 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001c46e:	85 f6                	test   esi,esi
c001c470:	74 26                	je     c001c498 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001c472:	89 d8                	mov    eax,ebx
c001c474:	b9 02 00 00 00       	mov    ecx,0x2
c001c479:	99                   	cdq    
c001c47a:	83 ec 0c             	sub    esp,0xc
c001c47d:	f7 f9                	idiv   ecx
c001c47f:	83 e8 32             	sub    eax,0x32
c001c482:	50                   	push   eax
c001c483:	e8 f5 a4 fe ff       	call   c000697d <iso_total>
c001c488:	83 c4 10             	add    esp,0x10
c001c48b:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001c492:	89 06                	mov    DWORD PTR [esi],eax
c001c494:	31 c0                	xor    eax,eax
c001c496:	eb 05                	jmp    c001c49d <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001c498:	b8 04 00 00 00       	mov    eax,0x4
c001c49d:	5a                   	pop    edx
c001c49e:	5b                   	pop    ebx
c001c49f:	5e                   	pop    esi
c001c4a0:	c3                   	ret    
c001c4a1:	90                   	nop

c001c4a2 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001c4a2:	55                   	push   ebp
c001c4a3:	57                   	push   edi
c001c4a4:	56                   	push   esi
c001c4a5:	53                   	push   ebx
c001c4a6:	83 ec 18             	sub    esp,0x18
c001c4a9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c4ad:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c4b1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c4b5:	68 c9 50 02 c0       	push   0xc00250c9
c001c4ba:	e8 8f aa fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c4bf:	83 c4 10             	add    esp,0x10
c001c4c2:	85 ff                	test   edi,edi
c001c4c4:	0f 94 c0             	sete   al
c001c4c7:	85 f6                	test   esi,esi
c001c4c9:	0f 94 c2             	sete   dl
c001c4cc:	09 d0                	or     eax,edx
c001c4ce:	a8 01                	test   al,0x1
c001c4d0:	0f 85 dd 00 00 00    	jne    c001c5b3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001c4d6:	85 db                	test   ebx,ebx
c001c4d8:	0f 84 d5 00 00 00    	je     c001c5b3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001c4de:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c4e1:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001c4e7:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001c4ee:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001c4f5:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001c4f7:	38 0d 20 ec 02 c0    	cmp    BYTE PTR ds:0xc002ec20,cl
c001c4fd:	74 1b                	je     c001c51a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001c4ff:	85 c0                	test   eax,eax
c001c501:	74 10                	je     c001c513 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001c503:	83 ec 0c             	sub    esp,0xc
c001c506:	68 6d 50 02 c0       	push   0xc002506d
c001c50b:	e8 a6 38 ff ff       	call   c000fdb6 <KePanic(char const*)>
c001c510:	83 c4 10             	add    esp,0x10
c001c513:	8a 03                	mov    al,BYTE PTR [ebx]
c001c515:	a2 20 ec 02 c0       	mov    ds:0xc002ec20,al
c001c51a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c51d:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001c524:	85 c0                	test   eax,eax
c001c526:	74 09                	je     c001c531 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001c528:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001c52f:	74 51                	je     c001c582 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001c531:	83 ec 0c             	sub    esp,0xc
c001c534:	68 d1 50 02 c0       	push   0xc00250d1
c001c539:	e8 10 aa fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c53e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c541:	83 c4 10             	add    esp,0x10
c001c544:	83 3c 85 dc b9 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4624],0x0
c001c54c:	74 21                	je     c001c56f <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001c54e:	83 ec 0c             	sub    esp,0xc
c001c551:	68 f1 50 02 c0       	push   0xc00250f1
c001c556:	e8 f3 a9 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c55b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c55e:	83 c4 10             	add    esp,0x10
c001c561:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001c568:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c56f:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001c576:	83 ec 0c             	sub    esp,0xc
c001c579:	50                   	push   eax
c001c57a:	e8 c8 a6 fe ff       	call   c0006c47 <init_percd>
c001c57f:	83 c4 10             	add    esp,0x10
c001c582:	52                   	push   edx
c001c583:	83 c3 03             	add    ebx,0x3
c001c586:	52                   	push   edx
c001c587:	6a 00                	push   0x0
c001c589:	53                   	push   ebx
c001c58a:	e8 7b a1 fe ff       	call   c000670a <iso_open>
c001c58f:	83 c4 10             	add    esp,0x10
c001c592:	83 f8 ff             	cmp    eax,0xffffffff
c001c595:	89 c5                	mov    ebp,eax
c001c597:	75 21                	jne    c001c5ba <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001c599:	50                   	push   eax
c001c59a:	50                   	push   eax
c001c59b:	6a 01                	push   0x1
c001c59d:	53                   	push   ebx
c001c59e:	e8 67 a1 fe ff       	call   c000670a <iso_open>
c001c5a3:	83 c4 10             	add    esp,0x10
c001c5a6:	ba 02 00 00 00       	mov    edx,0x2
c001c5ab:	40                   	inc    eax
c001c5ac:	74 2b                	je     c001c5d9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001c5ae:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001c5b1:	eb 24                	jmp    c001c5d7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001c5b3:	ba 04 00 00 00       	mov    edx,0x4
c001c5b8:	eb 1f                	jmp    c001c5d9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001c5ba:	83 ec 0c             	sub    esp,0xc
c001c5bd:	50                   	push   eax
c001c5be:	e8 ba a3 fe ff       	call   c000697d <iso_total>
c001c5c3:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001c5ca:	89 07                	mov    DWORD PTR [edi],eax
c001c5cc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c5cf:	e8 c0 a1 fe ff       	call   c0006794 <iso_close>
c001c5d4:	83 c4 10             	add    esp,0x10
c001c5d7:	31 d2                	xor    edx,edx
c001c5d9:	83 c4 0c             	add    esp,0xc
c001c5dc:	89 d0                	mov    eax,edx
c001c5de:	5b                   	pop    ebx
c001c5df:	5e                   	pop    esi
c001c5e0:	5f                   	pop    edi
c001c5e1:	5d                   	pop    ebp
c001c5e2:	c3                   	ret    
c001c5e3:	90                   	nop

c001c5e4 <ISO9660::close(void*)>:
c001c5e4:	83 ec 0c             	sub    esp,0xc
c001c5e7:	b8 04 00 00 00       	mov    eax,0x4
c001c5ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5f0:	85 d2                	test   edx,edx
c001c5f2:	74 1b                	je     c001c60f <ISO9660::close(void*)+0x2b>
c001c5f4:	89 d0                	mov    eax,edx
c001c5f6:	b9 02 00 00 00       	mov    ecx,0x2
c001c5fb:	99                   	cdq    
c001c5fc:	83 ec 0c             	sub    esp,0xc
c001c5ff:	f7 f9                	idiv   ecx
c001c601:	83 e8 32             	sub    eax,0x32
c001c604:	50                   	push   eax
c001c605:	e8 8a a1 fe ff       	call   c0006794 <iso_close>
c001c60a:	83 c4 10             	add    esp,0x10
c001c60d:	31 c0                	xor    eax,eax
c001c60f:	83 c4 0c             	add    esp,0xc
c001c612:	c3                   	ret    
c001c613:	90                   	nop

c001c614 <ISO9660::openDir(char const*, void**)>:
c001c614:	56                   	push   esi
c001c615:	53                   	push   ebx
c001c616:	50                   	push   eax
c001c617:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c61b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c61f:	85 db                	test   ebx,ebx
c001c621:	0f 84 bd 00 00 00    	je     c001c6e4 <ISO9660::openDir(char const*, void**)+0xd0>
c001c627:	85 f6                	test   esi,esi
c001c629:	0f 84 b5 00 00 00    	je     c001c6e4 <ISO9660::openDir(char const*, void**)+0xd0>
c001c62f:	8a 13                	mov    dl,BYTE PTR [ebx]
c001c631:	38 15 20 ec 02 c0    	cmp    BYTE PTR ds:0xc002ec20,dl
c001c637:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001c63e:	74 1b                	je     c001c65b <ISO9660::openDir(char const*, void**)+0x47>
c001c640:	85 c0                	test   eax,eax
c001c642:	74 10                	je     c001c654 <ISO9660::openDir(char const*, void**)+0x40>
c001c644:	83 ec 0c             	sub    esp,0xc
c001c647:	68 6d 50 02 c0       	push   0xc002506d
c001c64c:	e8 65 37 ff ff       	call   c000fdb6 <KePanic(char const*)>
c001c651:	83 c4 10             	add    esp,0x10
c001c654:	8a 03                	mov    al,BYTE PTR [ebx]
c001c656:	a2 20 ec 02 c0       	mov    ds:0xc002ec20,al
c001c65b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c65e:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001c665:	85 c0                	test   eax,eax
c001c667:	74 10                	je     c001c679 <ISO9660::openDir(char const*, void**)+0x65>
c001c669:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001c670:	74 1a                	je     c001c68c <ISO9660::openDir(char const*, void**)+0x78>
c001c672:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c679:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001c680:	83 ec 0c             	sub    esp,0xc
c001c683:	50                   	push   eax
c001c684:	e8 be a5 fe ff       	call   c0006c47 <init_percd>
c001c689:	83 c4 10             	add    esp,0x10
c001c68c:	50                   	push   eax
c001c68d:	83 c3 03             	add    ebx,0x3
c001c690:	50                   	push   eax
c001c691:	6a 01                	push   0x1
c001c693:	53                   	push   ebx
c001c694:	e8 71 a0 fe ff       	call   c000670a <iso_open>
c001c699:	83 c4 10             	add    esp,0x10
c001c69c:	83 f8 ff             	cmp    eax,0xffffffff
c001c69f:	89 c3                	mov    ebx,eax
c001c6a1:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001c6a6:	75 1c                	jne    c001c6c4 <ISO9660::openDir(char const*, void**)+0xb0>
c001c6a8:	53                   	push   ebx
c001c6a9:	53                   	push   ebx
c001c6aa:	68 15 51 02 c0       	push   0xc0025115
c001c6af:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001c6b5:	e8 a2 5e ff ff       	call   c001255c <VgaText::puts(char const*)>
c001c6ba:	83 c4 10             	add    esp,0x10
c001c6bd:	b8 01 00 00 00       	mov    eax,0x1
c001c6c2:	eb 25                	jmp    c001c6e9 <ISO9660::openDir(char const*, void**)+0xd5>
c001c6c4:	51                   	push   ecx
c001c6c5:	01 db                	add    ebx,ebx
c001c6c7:	51                   	push   ecx
c001c6c8:	83 c3 65             	add    ebx,0x65
c001c6cb:	68 28 51 02 c0       	push   0xc0025128
c001c6d0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001c6d6:	e8 81 5e ff ff       	call   c001255c <VgaText::puts(char const*)>
c001c6db:	83 c4 10             	add    esp,0x10
c001c6de:	31 c0                	xor    eax,eax
c001c6e0:	89 1e                	mov    DWORD PTR [esi],ebx
c001c6e2:	eb 05                	jmp    c001c6e9 <ISO9660::openDir(char const*, void**)+0xd5>
c001c6e4:	b8 04 00 00 00       	mov    eax,0x4
c001c6e9:	5a                   	pop    edx
c001c6ea:	5b                   	pop    ebx
c001c6eb:	5e                   	pop    esi
c001c6ec:	c3                   	ret    
c001c6ed:	90                   	nop

c001c6ee <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001c6ee:	55                   	push   ebp
c001c6ef:	57                   	push   edi
c001c6f0:	56                   	push   esi
c001c6f1:	53                   	push   ebx
c001c6f2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c6f8:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001c6ff:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001c706:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001c70d:	85 db                	test   ebx,ebx
c001c70f:	0f 84 e4 00 00 00    	je     c001c7f9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001c715:	85 ed                	test   ebp,ebp
c001c717:	0f 84 dc 00 00 00    	je     c001c7f9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001c71d:	83 ec 0c             	sub    esp,0xc
c001c720:	68 3b 51 02 c0       	push   0xc002513b
c001c725:	e8 24 a8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c72a:	89 d8                	mov    eax,ebx
c001c72c:	b9 02 00 00 00       	mov    ecx,0x2
c001c731:	99                   	cdq    
c001c732:	f7 f9                	idiv   ecx
c001c734:	83 e8 32             	sub    eax,0x32
c001c737:	89 04 24             	mov    DWORD PTR [esp],eax
c001c73a:	e8 90 a2 fe ff       	call   c00069cf <iso_readdir>
c001c73f:	83 c4 10             	add    esp,0x10
c001c742:	85 c0                	test   eax,eax
c001c744:	89 c3                	mov    ebx,eax
c001c746:	75 38                	jne    c001c780 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001c748:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001c74d:	53                   	push   ebx
c001c74e:	53                   	push   ebx
c001c74f:	68 46 51 02 c0       	push   0xc0025146
c001c754:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001c75a:	e8 fd 5d ff ff       	call   c001255c <VgaText::puts(char const*)>
c001c75f:	83 c4 0c             	add    esp,0xc
c001c762:	68 10 01 00 00       	push   0x110
c001c767:	6a 00                	push   0x0
c001c769:	57                   	push   edi
c001c76a:	e8 81 3d fe ff       	call   c00004f0 <memset>
c001c76f:	83 c4 10             	add    esp,0x10
c001c772:	b8 01 00 00 00       	mov    eax,0x1
c001c777:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001c77e:	eb 7e                	jmp    c001c7fe <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001c780:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001c786:	8d 70 08             	lea    esi,[eax+0x8]
c001c789:	83 ec 0c             	sub    esp,0xc
c001c78c:	56                   	push   esi
c001c78d:	e8 ee 3d fe ff       	call   c0000580 <strlen>
c001c792:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c79a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c79e:	83 c4 10             	add    esp,0x10
c001c7a1:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001c7a5:	75 0a                	jne    c001c7b1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001c7a7:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001c7aa:	b8 02 00 00 00       	mov    eax,0x2
c001c7af:	74 05                	je     c001c7b6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001c7b1:	b8 01 00 00 00       	mov    eax,0x1
c001c7b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7ba:	50                   	push   eax
c001c7bb:	50                   	push   eax
c001c7bc:	56                   	push   esi
c001c7bd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c7c1:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c7c5:	50                   	push   eax
c001c7c6:	e8 85 3e fe ff       	call   c0000650 <strcpy>
c001c7cb:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001c7d2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c7d4:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001c7db:	5a                   	pop    edx
c001c7dc:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001c7e1:	59                   	pop    ecx
c001c7e2:	68 59 51 02 c0       	push   0xc0025159
c001c7e7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001c7ed:	e8 6a 5d ff ff       	call   c001255c <VgaText::puts(char const*)>
c001c7f2:	83 c4 10             	add    esp,0x10
c001c7f5:	31 c0                	xor    eax,eax
c001c7f7:	eb 05                	jmp    c001c7fe <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001c7f9:	b8 04 00 00 00       	mov    eax,0x4
c001c7fe:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c804:	5b                   	pop    ebx
c001c805:	5e                   	pop    esi
c001c806:	5f                   	pop    edi
c001c807:	5d                   	pop    ebp
c001c808:	c3                   	ret    

c001c809 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001c809:	57                   	push   edi
c001c80a:	56                   	push   esi
c001c80b:	53                   	push   ebx
c001c80c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c810:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c814:	39 35 24 ec 02 c0    	cmp    DWORD PTR ds:0xc002ec24,esi
c001c81a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c81e:	0f be cb             	movsx  ecx,bl
c001c821:	75 0b                	jne    c001c82e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001c823:	0f be 05 04 64 02 c0 	movsx  eax,BYTE PTR ds:0xc0026404
c001c82a:	39 c8                	cmp    eax,ecx
c001c82c:	74 47                	je     c001c875 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001c82e:	83 ec 0c             	sub    esp,0xc
c001c831:	31 d2                	xor    edx,edx
c001c833:	68 40 ec 02 c0       	push   0xc002ec40
c001c838:	6a 01                	push   0x1
c001c83a:	52                   	push   edx
c001c83b:	56                   	push   esi
c001c83c:	ff 34 8d dc b9 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4624]
c001c843:	e8 a4 e1 fe ff       	call   c000a9ec <LogicalDisk::read(unsigned long long, int, void*)>
c001c848:	83 c4 20             	add    esp,0x20
c001c84b:	85 c0                	test   eax,eax
c001c84d:	75 0e                	jne    c001c85d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001c84f:	89 35 24 ec 02 c0    	mov    DWORD PTR ds:0xc002ec24,esi
c001c855:	88 1d 04 64 02 c0    	mov    BYTE PTR ds:0xc0026404,bl
c001c85b:	eb 18                	jmp    c001c875 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001c85d:	50                   	push   eax
c001c85e:	68 00 08 00 00       	push   0x800
c001c863:	6a 00                	push   0x0
c001c865:	57                   	push   edi
c001c866:	e8 85 3c fe ff       	call   c00004f0 <memset>
c001c86b:	83 c4 10             	add    esp,0x10
c001c86e:	b8 01 00 00 00       	mov    eax,0x1
c001c873:	eb 0e                	jmp    c001c883 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001c875:	be 40 ec 02 c0       	mov    esi,0xc002ec40
c001c87a:	b9 00 08 00 00       	mov    ecx,0x800
c001c87f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c881:	31 c0                	xor    eax,eax
c001c883:	5b                   	pop    ebx
c001c884:	5e                   	pop    esi
c001c885:	5f                   	pop    edi
c001c886:	c3                   	ret    
c001c887:	90                   	nop

c001c888 <ISO9660::tryMount(LogicalDisk*, int)>:
c001c888:	53                   	push   ebx
c001c889:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001c88f:	c7 05 24 ec 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002ec24,0xdeadbeef
c001c899:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001c8a0:	8d 58 41             	lea    ebx,[eax+0x41]
c001c8a3:	0f be db             	movsx  ebx,bl
c001c8a6:	53                   	push   ebx
c001c8a7:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c8ab:	50                   	push   eax
c001c8ac:	6a 10                	push   0x10
c001c8ae:	e8 56 ff ff ff       	call   c001c809 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c8b3:	83 c4 10             	add    esp,0x10
c001c8b6:	31 d2                	xor    edx,edx
c001c8b8:	85 c0                	test   eax,eax
c001c8ba:	75 33                	jne    c001c8ef <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001c8bc:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001c8c1:	75 2c                	jne    c001c8ef <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001c8c3:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001c8c8:	75 25                	jne    c001c8ef <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001c8ca:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001c8cf:	75 1e                	jne    c001c8ef <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001c8d1:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001c8d6:	75 17                	jne    c001c8ef <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001c8d8:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001c8dd:	75 10                	jne    c001c8ef <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001c8df:	83 ec 0c             	sub    esp,0xc
c001c8e2:	53                   	push   ebx
c001c8e3:	e8 5f a3 fe ff       	call   c0006c47 <init_percd>
c001c8e8:	83 c4 10             	add    esp,0x10
c001c8eb:	40                   	inc    eax
c001c8ec:	0f 95 c2             	setne  dl
c001c8ef:	81 c4 08 08 00 00    	add    esp,0x808
c001c8f5:	88 d0                	mov    al,dl
c001c8f7:	5b                   	pop    ebx
c001c8f8:	c3                   	ret    
c001c8f9:	90                   	nop

c001c8fa <ISO9660::ISO9660()>:
c001c8fa:	83 ec 0c             	sub    esp,0xc
c001c8fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c901:	83 ec 0c             	sub    esp,0xc
c001c904:	50                   	push   eax
c001c905:	e8 4c b4 fe ff       	call   c0007d56 <Filesystem::Filesystem()>
c001c90a:	83 c4 10             	add    esp,0x10
c001c90d:	ba 74 51 02 c0       	mov    edx,0xc0025174
c001c912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c916:	89 10                	mov    DWORD PTR [eax],edx
c001c918:	e8 3c a4 fe ff       	call   c0006d59 <fs_iso9660_init>
c001c91d:	90                   	nop
c001c91e:	83 c4 0c             	add    esp,0xc
c001c921:	c3                   	ret    

c001c922 <SoundCard::beginPlayback()>:
c001c922:	c7 44 24 04 d8 51 02 c0 	mov    DWORD PTR [esp+0x4],0xc00251d8
c001c92a:	e9 87 34 ff ff       	jmp    c000fdb6 <KePanic(char const*)>
c001c92f:	90                   	nop

c001c930 <SoundCard::stopPlayback()>:
c001c930:	c7 44 24 04 d8 51 02 c0 	mov    DWORD PTR [esp+0x4],0xc00251d8
c001c938:	e9 79 34 ff ff       	jmp    c000fdb6 <KePanic(char const*)>
c001c93d:	90                   	nop

c001c93e <SoundCard::SoundCard(char const*)>:
c001c93e:	83 ec 1c             	sub    esp,0x1c
c001c941:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c945:	83 ec 08             	sub    esp,0x8
c001c948:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c94c:	50                   	push   eax
c001c94d:	e8 a8 d1 fe ff       	call   c0009afa <Device::Device(char const*)>
c001c952:	83 c4 10             	add    esp,0x10
c001c955:	ba 24 52 02 c0       	mov    edx,0xc0025224
c001c95a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c95e:	89 10                	mov    DWORD PTR [eax],edx
c001c960:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c964:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c96b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c96f:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001c979:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c97d:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001c987:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c98b:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001c995:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c999:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001c9a3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c9ab:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001c9b0:	7f 1a                	jg     c001c9cc <SoundCard::SoundCard(char const*)+0x8e>
c001c9b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c9ba:	83 c2 54             	add    edx,0x54
c001c9bd:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001c9c5:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001c9ca:	eb df                	jmp    c001c9ab <SoundCard::SoundCard(char const*)+0x6d>
c001c9cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9d0:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c9d7:	90                   	nop
c001c9d8:	83 c4 1c             	add    esp,0x1c
c001c9db:	c3                   	ret    

c001c9dc <SoundCard::~SoundCard()>:
c001c9dc:	83 ec 0c             	sub    esp,0xc
c001c9df:	ba 24 52 02 c0       	mov    edx,0xc0025224
c001c9e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9e8:	89 10                	mov    DWORD PTR [eax],edx
c001c9ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ee:	83 ec 0c             	sub    esp,0xc
c001c9f1:	50                   	push   eax
c001c9f2:	e8 a3 ce fe ff       	call   c000989a <Device::~Device()>
c001c9f7:	83 c4 10             	add    esp,0x10
c001c9fa:	90                   	nop
c001c9fb:	83 c4 0c             	add    esp,0xc
c001c9fe:	c3                   	ret    
c001c9ff:	90                   	nop

c001ca00 <SoundCard::~SoundCard()>:
c001ca00:	83 ec 0c             	sub    esp,0xc
c001ca03:	83 ec 0c             	sub    esp,0xc
c001ca06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca0a:	e8 cd ff ff ff       	call   c001c9dc <SoundCard::~SoundCard()>
c001ca0f:	83 c4 10             	add    esp,0x10
c001ca12:	83 ec 08             	sub    esp,0x8
c001ca15:	68 e8 01 00 00       	push   0x1e8
c001ca1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca1e:	e8 c4 07 ff ff       	call   c000d1e7 <operator delete(void*, unsigned long)>
c001ca23:	83 c4 10             	add    esp,0x10
c001ca26:	83 c4 0c             	add    esp,0xc
c001ca29:	c3                   	ret    

c001ca2a <SoundCard::configureRates(int, int, int)>:
c001ca2a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ca2e:	31 c0                	xor    eax,eax
c001ca30:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001ca37:	75 20                	jne    c001ca59 <SoundCard::configureRates(int, int, int)+0x2f>
c001ca39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca3d:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001ca43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca47:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001ca4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca51:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001ca57:	b0 01                	mov    al,0x1
c001ca59:	c3                   	ret    

c001ca5a <SoundCard::getSamples16(int, short*)>:
c001ca5a:	55                   	push   ebp
c001ca5b:	57                   	push   edi
c001ca5c:	31 ff                	xor    edi,edi
c001ca5e:	56                   	push   esi
c001ca5f:	53                   	push   ebx
c001ca60:	31 db                	xor    ebx,ebx
c001ca62:	83 ec 10             	sub    esp,0x10
c001ca65:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ca69:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ca6d:	8d 04 36             	lea    eax,[esi+esi*1]
c001ca70:	50                   	push   eax
c001ca71:	6a 00                	push   0x0
c001ca73:	55                   	push   ebp
c001ca74:	e8 77 3a fe ff       	call   c00004f0 <memset>
c001ca79:	83 c4 10             	add    esp,0x10
c001ca7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca80:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001ca87:	85 c0                	test   eax,eax
c001ca89:	74 1a                	je     c001caa5 <SoundCard::getSamples16(int, short*)+0x4b>
c001ca8b:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ca8f:	75 14                	jne    c001caa5 <SoundCard::getSamples16(int, short*)+0x4b>
c001ca91:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ca95:	55                   	push   ebp
c001ca96:	56                   	push   esi
c001ca97:	50                   	push   eax
c001ca98:	e8 8f 03 00 00       	call   c001ce2c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001ca9d:	83 c4 10             	add    esp,0x10
c001caa0:	39 c3                	cmp    ebx,eax
c001caa2:	0f 4c d8             	cmovl  ebx,eax
c001caa5:	47                   	inc    edi
c001caa6:	83 ff 20             	cmp    edi,0x20
c001caa9:	75 d1                	jne    c001ca7c <SoundCard::getSamples16(int, short*)+0x22>
c001caab:	83 c4 0c             	add    esp,0xc
c001caae:	89 d8                	mov    eax,ebx
c001cab0:	5b                   	pop    ebx
c001cab1:	5e                   	pop    esi
c001cab2:	5f                   	pop    edi
c001cab3:	5d                   	pop    ebp
c001cab4:	c3                   	ret    
c001cab5:	90                   	nop

c001cab6 <SoundCard::getSamples32(int, int*)>:
c001cab6:	55                   	push   ebp
c001cab7:	57                   	push   edi
c001cab8:	31 ff                	xor    edi,edi
c001caba:	56                   	push   esi
c001cabb:	31 f6                	xor    esi,esi
c001cabd:	53                   	push   ebx
c001cabe:	83 ec 10             	sub    esp,0x10
c001cac1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cac5:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001cac9:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001cacd:	c1 e0 02             	shl    eax,0x2
c001cad0:	50                   	push   eax
c001cad1:	6a 00                	push   0x0
c001cad3:	55                   	push   ebp
c001cad4:	e8 17 3a fe ff       	call   c00004f0 <memset>
c001cad9:	83 c4 10             	add    esp,0x10
c001cadc:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001cae3:	85 c0                	test   eax,eax
c001cae5:	74 1a                	je     c001cb01 <SoundCard::getSamples32(int, int*)+0x4b>
c001cae7:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001caeb:	75 14                	jne    c001cb01 <SoundCard::getSamples32(int, int*)+0x4b>
c001caed:	53                   	push   ebx
c001caee:	55                   	push   ebp
c001caef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001caf3:	50                   	push   eax
c001caf4:	e8 03 04 00 00       	call   c001cefc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001caf9:	83 c4 10             	add    esp,0x10
c001cafc:	39 c6                	cmp    esi,eax
c001cafe:	0f 4c f0             	cmovl  esi,eax
c001cb01:	47                   	inc    edi
c001cb02:	83 ff 20             	cmp    edi,0x20
c001cb05:	75 d5                	jne    c001cadc <SoundCard::getSamples32(int, int*)+0x26>
c001cb07:	85 f6                	test   esi,esi
c001cb09:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001cb10:	75 0f                	jne    c001cb21 <SoundCard::getSamples32(int, int*)+0x6b>
c001cb12:	85 c0                	test   eax,eax
c001cb14:	74 1b                	je     c001cb31 <SoundCard::getSamples32(int, int*)+0x7b>
c001cb16:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb18:	83 ec 0c             	sub    esp,0xc
c001cb1b:	53                   	push   ebx
c001cb1c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001cb1f:	eb 0d                	jmp    c001cb2e <SoundCard::getSamples32(int, int*)+0x78>
c001cb21:	85 c0                	test   eax,eax
c001cb23:	75 0c                	jne    c001cb31 <SoundCard::getSamples32(int, int*)+0x7b>
c001cb25:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb27:	83 ec 0c             	sub    esp,0xc
c001cb2a:	53                   	push   ebx
c001cb2b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001cb2e:	83 c4 10             	add    esp,0x10
c001cb31:	83 c4 0c             	add    esp,0xc
c001cb34:	89 f0                	mov    eax,esi
c001cb36:	5b                   	pop    ebx
c001cb37:	5e                   	pop    esi
c001cb38:	5f                   	pop    edi
c001cb39:	5d                   	pop    ebp
c001cb3a:	c3                   	ret    
c001cb3b:	90                   	nop

c001cb3c <SoundCard::addChannel(SoundPort*)>:
c001cb3c:	83 ec 0c             	sub    esp,0xc
c001cb3f:	31 c0                	xor    eax,eax
c001cb41:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cb45:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001cb4d:	74 1b                	je     c001cb6a <SoundCard::addChannel(SoundPort*)+0x2e>
c001cb4f:	40                   	inc    eax
c001cb50:	83 f8 20             	cmp    eax,0x20
c001cb53:	75 f0                	jne    c001cb45 <SoundCard::addChannel(SoundPort*)+0x9>
c001cb55:	83 ec 0c             	sub    esp,0xc
c001cb58:	68 fd 51 02 c0       	push   0xc00251fd
c001cb5d:	e8 54 32 ff ff       	call   c000fdb6 <KePanic(char const*)>
c001cb62:	83 c4 10             	add    esp,0x10
c001cb65:	83 c8 ff             	or     eax,0xffffffff
c001cb68:	eb 0b                	jmp    c001cb75 <SoundCard::addChannel(SoundPort*)+0x39>
c001cb6a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001cb6e:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001cb75:	83 c4 0c             	add    esp,0xc
c001cb78:	c3                   	ret    
c001cb79:	90                   	nop

c001cb7a <SoundCard::removeChannel(int)>:
c001cb7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb7e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cb82:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001cb8d:	c3                   	ret    
c001cb8e:	66 90                	xchg   ax,ax

c001cb90 <SoundPort::SoundPort(int, int, int, int)>:
c001cb90:	83 ec 0c             	sub    esp,0xc
c001cb93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb97:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cb9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cba2:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001cba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbaa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cbae:	89 10                	mov    DWORD PTR [eax],edx
c001cbb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbb4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cbb8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cbbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbbf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cbc3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cbc6:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001cbcb:	75 13                	jne    c001cbe0 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001cbcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbd1:	8b 00                	mov    eax,DWORD PTR [eax]
c001cbd3:	05 a0 0f 00 00       	add    eax,0xfa0
c001cbd8:	d1 e0                	shl    eax,1
c001cbda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cbde:	66 90                	xchg   ax,ax
c001cbe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbe4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cbe8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001cbeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbef:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001cbf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbfa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001cbfd:	c1 e0 02             	shl    eax,0x2
c001cc00:	83 ec 0c             	sub    esp,0xc
c001cc03:	50                   	push   eax
c001cc04:	e8 67 2e ff ff       	call   c000fa70 <malloc>
c001cc09:	83 c4 10             	add    esp,0x10
c001cc0c:	89 c2                	mov    edx,eax
c001cc0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc12:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001cc15:	90                   	nop
c001cc16:	83 c4 0c             	add    esp,0xc
c001cc19:	c3                   	ret    
c001cc1a:	66 90                	xchg   ax,ax

c001cc1c <SoundPort::~SoundPort()>:
c001cc1c:	83 ec 0c             	sub    esp,0xc
c001cc1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cc26:	85 c0                	test   eax,eax
c001cc28:	74 1e                	je     c001cc48 <SoundPort::~SoundPort()+0x2c>
c001cc2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc2e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cc31:	83 ec 0c             	sub    esp,0xc
c001cc34:	50                   	push   eax
c001cc35:	e8 46 2e ff ff       	call   c000fa80 <free>
c001cc3a:	83 c4 10             	add    esp,0x10
c001cc3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc41:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cc48:	90                   	nop
c001cc49:	83 c4 0c             	add    esp,0xc
c001cc4c:	c3                   	ret    
c001cc4d:	90                   	nop
c001cc4e:	66 90                	xchg   ax,ax

c001cc50 <SoundPort::unpause()>:
c001cc50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc54:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001cc58:	c3                   	ret    
c001cc59:	90                   	nop
c001cc5a:	66 90                	xchg   ax,ax

c001cc5c <SoundPort::pause()>:
c001cc5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc60:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001cc64:	c3                   	ret    
c001cc65:	90                   	nop
c001cc66:	66 90                	xchg   ax,ax

c001cc68 <SoundPort::getBufferUsed()>:
c001cc68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc6c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001cc6f:	c3                   	ret    

c001cc70 <SoundPort::getBufferSize()>:
c001cc70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc74:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001cc77:	c3                   	ret    

c001cc78 <SoundPort::buffer8(signed char*, int)>:
c001cc78:	55                   	push   ebp
c001cc79:	57                   	push   edi
c001cc7a:	56                   	push   esi
c001cc7b:	53                   	push   ebx
c001cc7c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cc80:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001cc84:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001cc87:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001cc8a:	74 70                	je     c001ccfc <SoundPort::buffer8(signed char*, int)+0x84>
c001cc8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cc90:	85 c9                	test   ecx,ecx
c001cc92:	7e 68                	jle    c001ccfc <SoundPort::buffer8(signed char*, int)+0x84>
c001cc94:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001cc98:	8d 48 01             	lea    ecx,[eax+0x1]
c001cc9b:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001cc9e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001cca1:	89 f1                	mov    ecx,esi
c001cca3:	c1 e1 18             	shl    ecx,0x18
c001cca6:	29 f1                	sub    ecx,esi
c001cca8:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001ccab:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ccae:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ccb1:	74 51                	je     c001cd04 <SoundPort::buffer8(signed char*, int)+0x8c>
c001ccb3:	31 ff                	xor    edi,edi
c001ccb5:	eb 25                	jmp    c001ccdc <SoundPort::buffer8(signed char*, int)+0x64>
c001ccb7:	90                   	nop
c001ccb8:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001ccbd:	8d 59 01             	lea    ebx,[ecx+0x1]
c001ccc0:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001ccc3:	89 f3                	mov    ebx,esi
c001ccc5:	c1 e3 18             	shl    ebx,0x18
c001ccc8:	29 f3                	sub    ebx,esi
c001ccca:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001cccd:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001ccd0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ccd3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ccd6:	74 1c                	je     c001ccf4 <SoundPort::buffer8(signed char*, int)+0x7c>
c001ccd8:	89 c7                	mov    edi,eax
c001ccda:	66 90                	xchg   ax,ax
c001ccdc:	8d 47 01             	lea    eax,[edi+0x1]
c001ccdf:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001cce3:	75 d3                	jne    c001ccb8 <SoundPort::buffer8(signed char*, int)+0x40>
c001cce5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cce9:	8d 76 00             	lea    esi,[esi+0x0]
c001ccec:	5b                   	pop    ebx
c001cced:	5e                   	pop    esi
c001ccee:	5f                   	pop    edi
c001ccef:	5d                   	pop    ebp
c001ccf0:	c3                   	ret    
c001ccf1:	8d 76 00             	lea    esi,[esi+0x0]
c001ccf4:	5b                   	pop    ebx
c001ccf5:	8d 47 02             	lea    eax,[edi+0x2]
c001ccf8:	5e                   	pop    esi
c001ccf9:	5f                   	pop    edi
c001ccfa:	5d                   	pop    ebp
c001ccfb:	c3                   	ret    
c001ccfc:	5b                   	pop    ebx
c001ccfd:	31 c0                	xor    eax,eax
c001ccff:	5e                   	pop    esi
c001cd00:	5f                   	pop    edi
c001cd01:	5d                   	pop    ebp
c001cd02:	c3                   	ret    
c001cd03:	90                   	nop
c001cd04:	b8 01 00 00 00       	mov    eax,0x1
c001cd09:	eb e1                	jmp    c001ccec <SoundPort::buffer8(signed char*, int)+0x74>
c001cd0b:	90                   	nop

c001cd0c <SoundPort::buffer16(short*, int)>:
c001cd0c:	55                   	push   ebp
c001cd0d:	57                   	push   edi
c001cd0e:	56                   	push   esi
c001cd0f:	53                   	push   ebx
c001cd10:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cd14:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001cd18:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001cd1b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001cd1e:	74 70                	je     c001cd90 <SoundPort::buffer16(short*, int)+0x84>
c001cd20:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cd24:	85 c9                	test   ecx,ecx
c001cd26:	7e 68                	jle    c001cd90 <SoundPort::buffer16(short*, int)+0x84>
c001cd28:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001cd2c:	8d 48 01             	lea    ecx,[eax+0x1]
c001cd2f:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001cd32:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001cd35:	89 f1                	mov    ecx,esi
c001cd37:	c1 e1 10             	shl    ecx,0x10
c001cd3a:	29 f1                	sub    ecx,esi
c001cd3c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001cd3f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cd42:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cd45:	74 51                	je     c001cd98 <SoundPort::buffer16(short*, int)+0x8c>
c001cd47:	31 ff                	xor    edi,edi
c001cd49:	eb 25                	jmp    c001cd70 <SoundPort::buffer16(short*, int)+0x64>
c001cd4b:	90                   	nop
c001cd4c:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001cd51:	8d 59 01             	lea    ebx,[ecx+0x1]
c001cd54:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001cd57:	89 f3                	mov    ebx,esi
c001cd59:	c1 e3 10             	shl    ebx,0x10
c001cd5c:	29 f3                	sub    ebx,esi
c001cd5e:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001cd61:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001cd64:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cd67:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cd6a:	74 1c                	je     c001cd88 <SoundPort::buffer16(short*, int)+0x7c>
c001cd6c:	89 c7                	mov    edi,eax
c001cd6e:	66 90                	xchg   ax,ax
c001cd70:	8d 47 01             	lea    eax,[edi+0x1]
c001cd73:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001cd77:	75 d3                	jne    c001cd4c <SoundPort::buffer16(short*, int)+0x40>
c001cd79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cd7d:	8d 76 00             	lea    esi,[esi+0x0]
c001cd80:	5b                   	pop    ebx
c001cd81:	5e                   	pop    esi
c001cd82:	5f                   	pop    edi
c001cd83:	5d                   	pop    ebp
c001cd84:	c3                   	ret    
c001cd85:	8d 76 00             	lea    esi,[esi+0x0]
c001cd88:	5b                   	pop    ebx
c001cd89:	8d 47 02             	lea    eax,[edi+0x2]
c001cd8c:	5e                   	pop    esi
c001cd8d:	5f                   	pop    edi
c001cd8e:	5d                   	pop    ebp
c001cd8f:	c3                   	ret    
c001cd90:	5b                   	pop    ebx
c001cd91:	31 c0                	xor    eax,eax
c001cd93:	5e                   	pop    esi
c001cd94:	5f                   	pop    edi
c001cd95:	5d                   	pop    ebp
c001cd96:	c3                   	ret    
c001cd97:	90                   	nop
c001cd98:	b8 01 00 00 00       	mov    eax,0x1
c001cd9d:	eb e1                	jmp    c001cd80 <SoundPort::buffer16(short*, int)+0x74>
c001cd9f:	90                   	nop

c001cda0 <SoundPort::buffer32(int*, int)>:
c001cda0:	55                   	push   ebp
c001cda1:	57                   	push   edi
c001cda2:	56                   	push   esi
c001cda3:	53                   	push   ebx
c001cda4:	83 ec 04             	sub    esp,0x4
c001cda7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cdab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdaf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001cdb3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cdb6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cdb9:	89 04 24             	mov    DWORD PTR [esp],eax
c001cdbc:	74 5a                	je     c001ce18 <SoundPort::buffer32(int*, int)+0x78>
c001cdbe:	85 c0                	test   eax,eax
c001cdc0:	7e 56                	jle    c001ce18 <SoundPort::buffer32(int*, int)+0x78>
c001cdc2:	8d 71 01             	lea    esi,[ecx+0x1]
c001cdc5:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001cdc8:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001cdcb:	8b 37                	mov    esi,DWORD PTR [edi]
c001cdcd:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001cdd0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cdd3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cdd6:	74 4c                	je     c001ce24 <SoundPort::buffer32(int*, int)+0x84>
c001cdd8:	31 f6                	xor    esi,esi
c001cdda:	eb 1c                	jmp    c001cdf8 <SoundPort::buffer32(int*, int)+0x58>
c001cddc:	8d 69 01             	lea    ebp,[ecx+0x1]
c001cddf:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001cde2:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001cde5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001cde8:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001cdec:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cdef:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cdf2:	74 18                	je     c001ce0c <SoundPort::buffer32(int*, int)+0x6c>
c001cdf4:	89 de                	mov    esi,ebx
c001cdf6:	66 90                	xchg   ax,ax
c001cdf8:	8d 5e 01             	lea    ebx,[esi+0x1]
c001cdfb:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001cdfe:	75 dc                	jne    c001cddc <SoundPort::buffer32(int*, int)+0x3c>
c001ce00:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ce03:	90                   	nop
c001ce04:	83 c4 04             	add    esp,0x4
c001ce07:	5b                   	pop    ebx
c001ce08:	5e                   	pop    esi
c001ce09:	5f                   	pop    edi
c001ce0a:	5d                   	pop    ebp
c001ce0b:	c3                   	ret    
c001ce0c:	8d 46 02             	lea    eax,[esi+0x2]
c001ce0f:	83 c4 04             	add    esp,0x4
c001ce12:	5b                   	pop    ebx
c001ce13:	5e                   	pop    esi
c001ce14:	5f                   	pop    edi
c001ce15:	5d                   	pop    ebp
c001ce16:	c3                   	ret    
c001ce17:	90                   	nop
c001ce18:	83 c4 04             	add    esp,0x4
c001ce1b:	31 c0                	xor    eax,eax
c001ce1d:	5b                   	pop    ebx
c001ce1e:	5e                   	pop    esi
c001ce1f:	5f                   	pop    edi
c001ce20:	5d                   	pop    ebp
c001ce21:	c3                   	ret    
c001ce22:	66 90                	xchg   ax,ax
c001ce24:	b8 01 00 00 00       	mov    eax,0x1
c001ce29:	eb d9                	jmp    c001ce04 <SoundPort::buffer32(int*, int)+0x64>
c001ce2b:	90                   	nop

c001ce2c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001ce2c:	55                   	push   ebp
c001ce2d:	57                   	push   edi
c001ce2e:	56                   	push   esi
c001ce2f:	53                   	push   ebx
c001ce30:	83 ec 0c             	sub    esp,0xc
c001ce33:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ce37:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ce3b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ce3f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ce43:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001ce49:	39 03                	cmp    DWORD PTR [ebx],eax
c001ce4b:	74 13                	je     c001ce60 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001ce4d:	83 ec 0c             	sub    esp,0xc
c001ce50:	68 50 52 02 c0       	push   0xc0025250
c001ce55:	e8 5c 2f ff ff       	call   c000fdb6 <KePanic(char const*)>
c001ce5a:	83 c4 10             	add    esp,0x10
c001ce5d:	8d 76 00             	lea    esi,[esi+0x0]
c001ce60:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001ce66:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001ce69:	74 11                	je     c001ce7c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001ce6b:	83 ec 0c             	sub    esp,0xc
c001ce6e:	68 8f 52 02 c0       	push   0xc002528f
c001ce73:	e8 3e 2f ff ff       	call   c000fdb6 <KePanic(char const*)>
c001ce78:	83 c4 10             	add    esp,0x10
c001ce7b:	90                   	nop
c001ce7c:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001ce82:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001ce85:	74 11                	je     c001ce98 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001ce87:	83 ec 0c             	sub    esp,0xc
c001ce8a:	68 8f 52 02 c0       	push   0xc002528f
c001ce8f:	e8 22 2f ff ff       	call   c000fdb6 <KePanic(char const*)>
c001ce94:	83 c4 10             	add    esp,0x10
c001ce97:	90                   	nop
c001ce98:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001ce9b:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001ce9f:	85 f6                	test   esi,esi
c001cea1:	7e 2d                	jle    c001ced0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001cea3:	31 c0                	xor    eax,eax
c001cea5:	8d 76 00             	lea    esi,[esi+0x0]
c001cea8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ceab:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001ceae:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001ceb4:	85 c9                	test   ecx,ecx
c001ceb6:	0f 49 d1             	cmovns edx,ecx
c001ceb9:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001cebd:	c1 fa 0f             	sar    edx,0xf
c001cec0:	01 d1                	add    ecx,edx
c001cec2:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001cec6:	83 c0 01             	add    eax,0x1
c001cec9:	39 f0                	cmp    eax,esi
c001cecb:	75 db                	jne    c001cea8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001cecd:	8d 76 00             	lea    esi,[esi+0x0]
c001ced0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ced3:	83 ec 04             	sub    esp,0x4
c001ced6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ced9:	29 f0                	sub    eax,esi
c001cedb:	c1 e0 02             	shl    eax,0x2
c001cede:	50                   	push   eax
c001cedf:	8d 04 b2             	lea    eax,[edx+esi*4]
c001cee2:	50                   	push   eax
c001cee3:	52                   	push   edx
c001cee4:	e8 e7 34 fe ff       	call   c00003d0 <memmove>
c001cee9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ceec:	29 f0                	sub    eax,esi
c001ceee:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001cef1:	83 c4 1c             	add    esp,0x1c
c001cef4:	89 f0                	mov    eax,esi
c001cef6:	5b                   	pop    ebx
c001cef7:	5e                   	pop    esi
c001cef8:	5f                   	pop    edi
c001cef9:	5d                   	pop    ebp
c001cefa:	c3                   	ret    
c001cefb:	90                   	nop

c001cefc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001cefc:	55                   	push   ebp
c001cefd:	57                   	push   edi
c001cefe:	56                   	push   esi
c001ceff:	53                   	push   ebx
c001cf00:	83 ec 0c             	sub    esp,0xc
c001cf03:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001cf07:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cf0b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001cf0f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001cf13:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001cf19:	39 03                	cmp    DWORD PTR [ebx],eax
c001cf1b:	74 13                	je     c001cf30 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001cf1d:	83 ec 0c             	sub    esp,0xc
c001cf20:	68 70 52 02 c0       	push   0xc0025270
c001cf25:	e8 8c 2e ff ff       	call   c000fdb6 <KePanic(char const*)>
c001cf2a:	83 c4 10             	add    esp,0x10
c001cf2d:	8d 76 00             	lea    esi,[esi+0x0]
c001cf30:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001cf36:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001cf39:	74 11                	je     c001cf4c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001cf3b:	83 ec 0c             	sub    esp,0xc
c001cf3e:	68 ab 52 02 c0       	push   0xc00252ab
c001cf43:	e8 6e 2e ff ff       	call   c000fdb6 <KePanic(char const*)>
c001cf48:	83 c4 10             	add    esp,0x10
c001cf4b:	90                   	nop
c001cf4c:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001cf52:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001cf55:	74 11                	je     c001cf68 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001cf57:	83 ec 0c             	sub    esp,0xc
c001cf5a:	68 ab 52 02 c0       	push   0xc00252ab
c001cf5f:	e8 52 2e ff ff       	call   c000fdb6 <KePanic(char const*)>
c001cf64:	83 c4 10             	add    esp,0x10
c001cf67:	90                   	nop
c001cf68:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001cf6b:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001cf6f:	85 ff                	test   edi,edi
c001cf71:	7e 21                	jle    c001cf94 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001cf73:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001cf7a:	31 c0                	xor    eax,eax
c001cf7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001cf7f:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001cf82:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001cf85:	01 d5                	add    ebp,edx
c001cf87:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001cf8a:	83 c0 04             	add    eax,0x4
c001cf8d:	39 c1                	cmp    ecx,eax
c001cf8f:	75 eb                	jne    c001cf7c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001cf91:	8d 76 00             	lea    esi,[esi+0x0]
c001cf94:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cf97:	83 ec 04             	sub    esp,0x4
c001cf9a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001cf9d:	29 f8                	sub    eax,edi
c001cf9f:	c1 e0 02             	shl    eax,0x2
c001cfa2:	50                   	push   eax
c001cfa3:	8d 04 ba             	lea    eax,[edx+edi*4]
c001cfa6:	50                   	push   eax
c001cfa7:	52                   	push   edx
c001cfa8:	e8 23 34 fe ff       	call   c00003d0 <memmove>
c001cfad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cfb0:	29 f8                	sub    eax,edi
c001cfb2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001cfb5:	83 c4 1c             	add    esp,0x1c
c001cfb8:	89 f8                	mov    eax,edi
c001cfba:	5b                   	pop    ebx
c001cfbb:	5e                   	pop    esi
c001cfbc:	5f                   	pop    edi
c001cfbd:	5d                   	pop    ebp
c001cfbe:	c3                   	ret    
c001cfbf:	90                   	nop

c001cfc0 <PCI::open(int, int, void*)>:
c001cfc0:	83 ec 18             	sub    esp,0x18
c001cfc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cfc7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cfcb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001cfd1:	8b 10                	mov    edx,DWORD PTR [eax]
c001cfd3:	50                   	push   eax
c001cfd4:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001cfd7:	31 c0                	xor    eax,eax
c001cfd9:	83 c4 1c             	add    esp,0x1c
c001cfdc:	c3                   	ret    
c001cfdd:	90                   	nop

c001cfde <PCI::close(int, int, void*)>:
c001cfde:	31 c0                	xor    eax,eax
c001cfe0:	c3                   	ret    
c001cfe1:	90                   	nop

c001cfe2 <PCI::PCI()>:
c001cfe2:	83 ec 0c             	sub    esp,0xc
c001cfe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfe9:	83 ec 08             	sub    esp,0x8
c001cfec:	68 c7 52 02 c0       	push   0xc00252c7
c001cff1:	50                   	push   eax
c001cff2:	e8 11 b9 fe ff       	call   c0008908 <Bus::Bus(char const*)>
c001cff7:	83 c4 10             	add    esp,0x10
c001cffa:	ba d4 53 02 c0       	mov    edx,0xc00253d4
c001cfff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d003:	89 10                	mov    DWORD PTR [eax],edx
c001d005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d009:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001d013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d017:	a3 40 f4 02 c0       	mov    ds:0xc002f440,eax
c001d01c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d020:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d026:	0f b6 d0             	movzx  edx,al
c001d029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d02d:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001d034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d038:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d03e:	0f b6 d0             	movzx  edx,al
c001d041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d045:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001d04a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d04e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d054:	8d 50 01             	lea    edx,[eax+0x1]
c001d057:	88 d1                	mov    cl,dl
c001d059:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d05d:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001d063:	0f b6 d0             	movzx  edx,al
c001d066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d06a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d06e:	83 c9 c0             	or     ecx,0xffffffc0
c001d071:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d075:	90                   	nop
c001d076:	83 c4 0c             	add    esp,0xc
c001d079:	c3                   	ret    

c001d07a <PCI::readBAR8(unsigned int, int)>:
c001d07a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d07e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d082:	f6 c2 01             	test   dl,0x1
c001d085:	74 07                	je     c001d08e <PCI::readBAR8(unsigned int, int)+0x14>
c001d087:	83 e2 fc             	and    edx,0xfffffffc
c001d08a:	01 c2                	add    edx,eax
c001d08c:	ec                   	in     al,dx
c001d08d:	c3                   	ret    
c001d08e:	83 e2 f0             	and    edx,0xfffffff0
c001d091:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001d094:	c3                   	ret    
c001d095:	90                   	nop

c001d096 <PCI::readBAR16(unsigned int, int)>:
c001d096:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d09a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d09e:	f6 c2 01             	test   dl,0x1
c001d0a1:	74 08                	je     c001d0ab <PCI::readBAR16(unsigned int, int)+0x15>
c001d0a3:	83 e2 fc             	and    edx,0xfffffffc
c001d0a6:	01 c2                	add    edx,eax
c001d0a8:	66 ed                	in     ax,dx
c001d0aa:	c3                   	ret    
c001d0ab:	83 e2 f0             	and    edx,0xfffffff0
c001d0ae:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001d0b2:	c3                   	ret    
c001d0b3:	90                   	nop

c001d0b4 <PCI::readBAR32(unsigned int, int)>:
c001d0b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d0b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0bc:	f6 c2 01             	test   dl,0x1
c001d0bf:	74 07                	je     c001d0c8 <PCI::readBAR32(unsigned int, int)+0x14>
c001d0c1:	83 e2 fc             	and    edx,0xfffffffc
c001d0c4:	01 c2                	add    edx,eax
c001d0c6:	ed                   	in     eax,dx
c001d0c7:	c3                   	ret    
c001d0c8:	83 e2 f0             	and    edx,0xfffffff0
c001d0cb:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001d0ce:	c3                   	ret    
c001d0cf:	90                   	nop

c001d0d0 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001d0d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d0d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d0dc:	f6 c2 01             	test   dl,0x1
c001d0df:	74 07                	je     c001d0e8 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001d0e1:	83 e2 fc             	and    edx,0xfffffffc
c001d0e4:	01 ca                	add    edx,ecx
c001d0e6:	ee                   	out    dx,al
c001d0e7:	c3                   	ret    
c001d0e8:	83 e2 f0             	and    edx,0xfffffff0
c001d0eb:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001d0ee:	c3                   	ret    
c001d0ef:	90                   	nop

c001d0f0 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001d0f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d0f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0f8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d0fc:	f6 c2 01             	test   dl,0x1
c001d0ff:	74 08                	je     c001d109 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001d101:	83 e2 fc             	and    edx,0xfffffffc
c001d104:	01 ca                	add    edx,ecx
c001d106:	66 ef                	out    dx,ax
c001d108:	c3                   	ret    
c001d109:	83 e2 f0             	and    edx,0xfffffff0
c001d10c:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001d110:	c3                   	ret    
c001d111:	90                   	nop

c001d112 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001d112:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d116:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d11a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d11e:	f6 c2 01             	test   dl,0x1
c001d121:	74 07                	je     c001d12a <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001d123:	83 e2 fc             	and    edx,0xfffffffc
c001d126:	01 ca                	add    edx,ecx
c001d128:	ef                   	out    dx,eax
c001d129:	c3                   	ret    
c001d12a:	83 e2 f0             	and    edx,0xfffffff0
c001d12d:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001d130:	c3                   	ret    
c001d131:	90                   	nop

c001d132 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d132:	55                   	push   ebp
c001d133:	57                   	push   edi
c001d134:	56                   	push   esi
c001d135:	53                   	push   ebx
c001d136:	83 ec 0c             	sub    esp,0xc
c001d139:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001d13e:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001d142:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d146:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d14a:	83 fe 07             	cmp    esi,0x7
c001d14d:	76 10                	jbe    c001d15f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001d14f:	83 ec 0c             	sub    esp,0xc
c001d152:	68 cf 52 02 c0       	push   0xc00252cf
c001d157:	e8 5a 2c ff ff       	call   c000fdb6 <KePanic(char const*)>
c001d15c:	83 c4 10             	add    esp,0x10
c001d15f:	0f b6 db             	movzx  ebx,bl
c001d162:	83 fb 0f             	cmp    ebx,0xf
c001d165:	76 10                	jbe    c001d177 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001d167:	83 ec 0c             	sub    esp,0xc
c001d16a:	68 ff 52 02 c0       	push   0xc00252ff
c001d16f:	e8 42 2c ff ff       	call   c000fdb6 <KePanic(char const*)>
c001d174:	83 c4 10             	add    esp,0x10
c001d177:	8d 04 36             	lea    eax,[esi+esi*1]
c001d17a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d17f:	83 c8 f0             	or     eax,0xfffffff0
c001d182:	ee                   	out    dx,al
c001d183:	ba fa 0c 00 00       	mov    edx,0xcfa
c001d188:	89 e8                	mov    eax,ebp
c001d18a:	ee                   	out    dx,al
c001d18b:	89 f9                	mov    ecx,edi
c001d18d:	89 d8                	mov    eax,ebx
c001d18f:	0f b6 d9             	movzx  ebx,cl
c001d192:	83 c4 0c             	add    esp,0xc
c001d195:	c1 e0 08             	shl    eax,0x8
c001d198:	83 e3 fc             	and    ebx,0xfffffffc
c001d19b:	09 d8                	or     eax,ebx
c001d19d:	5b                   	pop    ebx
c001d19e:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001d1a3:	5e                   	pop    esi
c001d1a4:	5f                   	pop    edi
c001d1a5:	5d                   	pop    ebp
c001d1a6:	c3                   	ret    
c001d1a7:	90                   	nop

c001d1a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d1a8:	57                   	push   edi
c001d1a9:	56                   	push   esi
c001d1aa:	53                   	push   ebx
c001d1ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d1af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d1b3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d1b7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d1bb:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001d1c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d1c5:	83 ff 01             	cmp    edi,0x1
c001d1c8:	75 3f                	jne    c001d209 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001d1ca:	89 de                	mov    esi,ebx
c001d1cc:	0f b6 c0             	movzx  eax,al
c001d1cf:	c1 e0 10             	shl    eax,0x10
c001d1d2:	81 e6 fc 00 00 00    	and    esi,0xfc
c001d1d8:	0f b6 c9             	movzx  ecx,cl
c001d1db:	09 f0                	or     eax,esi
c001d1dd:	c1 e1 08             	shl    ecx,0x8
c001d1e0:	0f b6 d2             	movzx  edx,dl
c001d1e3:	c1 e2 0b             	shl    edx,0xb
c001d1e6:	09 c8                	or     eax,ecx
c001d1e8:	09 d0                	or     eax,edx
c001d1ea:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d1ef:	0d 00 00 00 80       	or     eax,0x80000000
c001d1f4:	ef                   	out    dx,eax
c001d1f5:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d1fa:	ed                   	in     eax,dx
c001d1fb:	83 e3 02             	and    ebx,0x2
c001d1fe:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001d205:	d3 e8                	shr    eax,cl
c001d207:	eb 44                	jmp    c001d24d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001d209:	83 ff 02             	cmp    edi,0x2
c001d20c:	75 2d                	jne    c001d23b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001d20e:	83 ec 0c             	sub    esp,0xc
c001d211:	0f b6 fb             	movzx  edi,bl
c001d214:	57                   	push   edi
c001d215:	0f b6 c9             	movzx  ecx,cl
c001d218:	51                   	push   ecx
c001d219:	0f b6 d2             	movzx  edx,dl
c001d21c:	52                   	push   edx
c001d21d:	0f b6 c0             	movzx  eax,al
c001d220:	50                   	push   eax
c001d221:	56                   	push   esi
c001d222:	e8 0b ff ff ff       	call   c001d132 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d227:	89 c2                	mov    edx,eax
c001d229:	ed                   	in     eax,dx
c001d22a:	83 e3 02             	and    ebx,0x2
c001d22d:	83 c4 20             	add    esp,0x20
c001d230:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001d237:	d3 e8                	shr    eax,cl
c001d239:	eb 12                	jmp    c001d24d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001d23b:	83 ec 0c             	sub    esp,0xc
c001d23e:	68 2f 53 02 c0       	push   0xc002532f
c001d243:	e8 6e 2b ff ff       	call   c000fdb6 <KePanic(char const*)>
c001d248:	83 c4 10             	add    esp,0x10
c001d24b:	31 c0                	xor    eax,eax
c001d24d:	5b                   	pop    ebx
c001d24e:	5e                   	pop    esi
c001d24f:	5f                   	pop    edi
c001d250:	c3                   	ret    
c001d251:	90                   	nop

c001d252 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001d252:	83 ec 18             	sub    esp,0x18
c001d255:	6a 00                	push   0x0
c001d257:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d25c:	50                   	push   eax
c001d25d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d262:	50                   	push   eax
c001d263:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d268:	50                   	push   eax
c001d269:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d26d:	e8 36 ff ff ff       	call   c001d1a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d272:	83 c4 2c             	add    esp,0x2c
c001d275:	c3                   	ret    

c001d276 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001d276:	83 ec 18             	sub    esp,0x18
c001d279:	6a 0e                	push   0xe
c001d27b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d280:	50                   	push   eax
c001d281:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d286:	50                   	push   eax
c001d287:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d28c:	50                   	push   eax
c001d28d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d291:	e8 12 ff ff ff       	call   c001d1a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d296:	83 c4 2c             	add    esp,0x2c
c001d299:	0f b6 c0             	movzx  eax,al
c001d29c:	c3                   	ret    
c001d29d:	90                   	nop

c001d29e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001d29e:	55                   	push   ebp
c001d29f:	57                   	push   edi
c001d2a0:	56                   	push   esi
c001d2a1:	53                   	push   ebx
c001d2a2:	83 ec 18             	sub    esp,0x18
c001d2a5:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001d2aa:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001d2af:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001d2b4:	6a 0a                	push   0xa
c001d2b6:	56                   	push   esi
c001d2b7:	55                   	push   ebp
c001d2b8:	57                   	push   edi
c001d2b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d2bd:	e8 e6 fe ff ff       	call   c001d1a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d2c2:	83 c4 14             	add    esp,0x14
c001d2c5:	6a 0a                	push   0xa
c001d2c7:	56                   	push   esi
c001d2c8:	55                   	push   ebp
c001d2c9:	57                   	push   edi
c001d2ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d2ce:	89 c3                	mov    ebx,eax
c001d2d0:	0f b6 db             	movzx  ebx,bl
c001d2d3:	e8 d0 fe ff ff       	call   c001d1a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d2d8:	83 c4 2c             	add    esp,0x2c
c001d2db:	25 00 ff 00 00       	and    eax,0xff00
c001d2e0:	09 d8                	or     eax,ebx
c001d2e2:	5b                   	pop    ebx
c001d2e3:	5e                   	pop    esi
c001d2e4:	5f                   	pop    edi
c001d2e5:	5d                   	pop    ebp
c001d2e6:	c3                   	ret    
c001d2e7:	90                   	nop

c001d2e8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001d2e8:	83 ec 18             	sub    esp,0x18
c001d2eb:	6a 08                	push   0x8
c001d2ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d2f2:	50                   	push   eax
c001d2f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d2f8:	50                   	push   eax
c001d2f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d2fe:	50                   	push   eax
c001d2ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d303:	e8 a0 fe ff ff       	call   c001d1a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d308:	83 c4 2c             	add    esp,0x2c
c001d30b:	0f b6 c4             	movzx  eax,ah
c001d30e:	c3                   	ret    
c001d30f:	90                   	nop

c001d310 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001d310:	83 ec 18             	sub    esp,0x18
c001d313:	6a 08                	push   0x8
c001d315:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d31a:	50                   	push   eax
c001d31b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d320:	50                   	push   eax
c001d321:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d326:	50                   	push   eax
c001d327:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d32b:	e8 78 fe ff ff       	call   c001d1a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d330:	83 c4 2c             	add    esp,0x2c
c001d333:	c3                   	ret    

c001d334 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001d334:	83 ec 18             	sub    esp,0x18
c001d337:	6a 3c                	push   0x3c
c001d339:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d33e:	50                   	push   eax
c001d33f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d344:	50                   	push   eax
c001d345:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d34a:	50                   	push   eax
c001d34b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d34f:	e8 54 fe ff ff       	call   c001d1a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d354:	83 c4 2c             	add    esp,0x2c
c001d357:	c3                   	ret    

c001d358 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001d358:	83 ec 18             	sub    esp,0x18
c001d35b:	6a 18                	push   0x18
c001d35d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d362:	50                   	push   eax
c001d363:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d368:	50                   	push   eax
c001d369:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d36e:	50                   	push   eax
c001d36f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d373:	e8 30 fe ff ff       	call   c001d1a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d378:	83 c4 2c             	add    esp,0x2c
c001d37b:	0f b6 c4             	movzx  eax,ah
c001d37e:	c3                   	ret    
c001d37f:	90                   	nop

c001d380 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d380:	55                   	push   ebp
c001d381:	57                   	push   edi
c001d382:	56                   	push   esi
c001d383:	53                   	push   ebx
c001d384:	83 ec 28             	sub    esp,0x28
c001d387:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d38b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001d390:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001d395:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001d39a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001d3a1:	8d 43 12             	lea    eax,[ebx+0x12]
c001d3a4:	83 c3 10             	add    ebx,0x10
c001d3a7:	0f b6 c0             	movzx  eax,al
c001d3aa:	0f b6 db             	movzx  ebx,bl
c001d3ad:	50                   	push   eax
c001d3ae:	51                   	push   ecx
c001d3af:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001d3b3:	57                   	push   edi
c001d3b4:	55                   	push   ebp
c001d3b5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d3b9:	e8 ea fd ff ff       	call   c001d1a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d3be:	83 c4 14             	add    esp,0x14
c001d3c1:	53                   	push   ebx
c001d3c2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d3c6:	51                   	push   ecx
c001d3c7:	89 c6                	mov    esi,eax
c001d3c9:	57                   	push   edi
c001d3ca:	55                   	push   ebp
c001d3cb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d3cf:	c1 e6 10             	shl    esi,0x10
c001d3d2:	e8 d1 fd ff ff       	call   c001d1a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d3d7:	83 c4 3c             	add    esp,0x3c
c001d3da:	5b                   	pop    ebx
c001d3db:	0f b7 c0             	movzx  eax,ax
c001d3de:	09 f0                	or     eax,esi
c001d3e0:	5e                   	pop    esi
c001d3e1:	5f                   	pop    edi
c001d3e2:	5d                   	pop    ebp
c001d3e3:	c3                   	ret    

c001d3e4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001d3e4:	55                   	push   ebp
c001d3e5:	57                   	push   edi
c001d3e6:	56                   	push   esi
c001d3e7:	53                   	push   ebx
c001d3e8:	83 ec 0c             	sub    esp,0xc
c001d3eb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001d3ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d3f3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d3f7:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001d3fb:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001d401:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d405:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d409:	83 f9 01             	cmp    ecx,0x1
c001d40c:	75 5d                	jne    c001d46b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001d40e:	0f b6 c8             	movzx  ecx,al
c001d411:	89 f0                	mov    eax,esi
c001d413:	25 fc 00 00 00       	and    eax,0xfc
c001d418:	0f b6 d2             	movzx  edx,dl
c001d41b:	c1 e1 10             	shl    ecx,0x10
c001d41e:	c1 e2 0b             	shl    edx,0xb
c001d421:	09 c1                	or     ecx,eax
c001d423:	89 f8                	mov    eax,edi
c001d425:	0f b6 f8             	movzx  edi,al
c001d428:	c1 e7 08             	shl    edi,0x8
c001d42b:	09 f9                	or     ecx,edi
c001d42d:	09 d1                	or     ecx,edx
c001d42f:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d434:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001d43a:	89 c8                	mov    eax,ecx
c001d43c:	ef                   	out    dx,eax
c001d43d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d442:	ed                   	in     eax,dx
c001d443:	83 e6 02             	and    esi,0x2
c001d446:	0f b7 db             	movzx  ebx,bx
c001d449:	74 0a                	je     c001d455 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001d44b:	c1 e3 10             	shl    ebx,0x10
c001d44e:	0f b7 d0             	movzx  edx,ax
c001d451:	09 d3                	or     ebx,edx
c001d453:	eb 05                	jmp    c001d45a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001d455:	66 31 c0             	xor    ax,ax
c001d458:	09 c3                	or     ebx,eax
c001d45a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d45f:	89 c8                	mov    eax,ecx
c001d461:	ef                   	out    dx,eax
c001d462:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d467:	89 d8                	mov    eax,ebx
c001d469:	eb 41                	jmp    c001d4ac <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001d46b:	83 f9 02             	cmp    ecx,0x2
c001d46e:	75 45                	jne    c001d4b5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001d470:	89 f1                	mov    ecx,esi
c001d472:	83 ec 0c             	sub    esp,0xc
c001d475:	0f b6 f1             	movzx  esi,cl
c001d478:	89 f9                	mov    ecx,edi
c001d47a:	56                   	push   esi
c001d47b:	0f b6 f9             	movzx  edi,cl
c001d47e:	57                   	push   edi
c001d47f:	0f b6 d2             	movzx  edx,dl
c001d482:	52                   	push   edx
c001d483:	0f b6 c0             	movzx  eax,al
c001d486:	50                   	push   eax
c001d487:	55                   	push   ebp
c001d488:	e8 a5 fc ff ff       	call   c001d132 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d48d:	89 c2                	mov    edx,eax
c001d48f:	ed                   	in     eax,dx
c001d490:	83 c4 20             	add    esp,0x20
c001d493:	f6 c2 02             	test   dl,0x2
c001d496:	0f b7 db             	movzx  ebx,bx
c001d499:	74 0c                	je     c001d4a7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001d49b:	0f b7 c8             	movzx  ecx,ax
c001d49e:	89 d8                	mov    eax,ebx
c001d4a0:	c1 e0 10             	shl    eax,0x10
c001d4a3:	09 c8                	or     eax,ecx
c001d4a5:	eb 05                	jmp    c001d4ac <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001d4a7:	66 31 c0             	xor    ax,ax
c001d4aa:	09 d8                	or     eax,ebx
c001d4ac:	ef                   	out    dx,eax
c001d4ad:	83 c4 0c             	add    esp,0xc
c001d4b0:	5b                   	pop    ebx
c001d4b1:	5e                   	pop    esi
c001d4b2:	5f                   	pop    edi
c001d4b3:	5d                   	pop    ebp
c001d4b4:	c3                   	ret    
c001d4b5:	c7 44 24 20 2f 53 02 c0 	mov    DWORD PTR [esp+0x20],0xc002532f
c001d4bd:	83 c4 0c             	add    esp,0xc
c001d4c0:	5b                   	pop    ebx
c001d4c1:	5e                   	pop    esi
c001d4c2:	5f                   	pop    edi
c001d4c3:	5d                   	pop    ebp
c001d4c4:	e9 ed 28 ff ff       	jmp    c000fdb6 <KePanic(char const*)>
c001d4c9:	90                   	nop

c001d4ca <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001d4ca:	55                   	push   ebp
c001d4cb:	57                   	push   edi
c001d4cc:	56                   	push   esi
c001d4cd:	53                   	push   ebx
c001d4ce:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001d4d4:	80 3d 4c f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f44c,0x0
c001d4db:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001d4e2:	0f 85 bd 00 00 00    	jne    c001d5a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001d4e8:	83 ec 0c             	sub    esp,0xc
c001d4eb:	68 14 01 00 00       	push   0x114
c001d4f0:	e8 7b 25 ff ff       	call   c000fa70 <malloc>
c001d4f5:	83 c4 0c             	add    esp,0xc
c001d4f8:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c001d4fe:	68 35 53 02 c0       	push   0xc0025335
c001d503:	50                   	push   eax
c001d504:	89 c3                	mov    ebx,eax
c001d506:	e8 21 ac fe ff       	call   c000812c <File::File(char const*, Process*)>
c001d50b:	83 c4 10             	add    esp,0x10
c001d50e:	85 db                	test   ebx,ebx
c001d510:	0f 84 6b 02 00 00    	je     c001d781 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001d516:	57                   	push   edi
c001d517:	57                   	push   edi
c001d518:	6a 01                	push   0x1
c001d51a:	53                   	push   ebx
c001d51b:	e8 2a ac fe ff       	call   c000814a <File::open(FileOpenMode)>
c001d520:	83 c4 10             	add    esp,0x10
c001d523:	85 c0                	test   eax,eax
c001d525:	0f 85 56 02 00 00    	jne    c001d781 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001d52b:	52                   	push   edx
c001d52c:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001d530:	50                   	push   eax
c001d531:	8d 44 24 48          	lea    eax,[esp+0x48]
c001d535:	50                   	push   eax
c001d536:	53                   	push   ebx
c001d537:	e8 10 af fe ff       	call   c000844c <File::stat(unsigned long long*, bool*)>
c001d53c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d540:	40                   	inc    eax
c001d541:	89 04 24             	mov    DWORD PTR [esp],eax
c001d544:	e8 27 25 ff ff       	call   c000fa70 <malloc>
c001d549:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001d54d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001d551:	59                   	pop    ecx
c001d552:	a3 48 f4 02 c0       	mov    ds:0xc002f448,eax
c001d557:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d559:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001d55d:	51                   	push   ecx
c001d55e:	50                   	push   eax
c001d55f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001d563:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001d567:	53                   	push   ebx
c001d568:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d56b:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001d56f:	83 c4 20             	add    esp,0x20
c001d572:	89 c8                	mov    eax,ecx
c001d574:	99                   	cdq    
c001d575:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001d579:	0f 85 02 02 00 00    	jne    c001d781 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001d57f:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001d583:	0f 85 f8 01 00 00    	jne    c001d781 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001d589:	83 ec 0c             	sub    esp,0xc
c001d58c:	53                   	push   ebx
c001d58d:	e8 16 ac fe ff       	call   c00081a8 <File::close()>
c001d592:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d596:	83 c4 10             	add    esp,0x10
c001d599:	c6 05 4c f4 02 c0 01 	mov    BYTE PTR ds:0xc002f44c,0x1
c001d5a0:	a3 44 f4 02 c0       	mov    ds:0xc002f444,eax
c001d5a5:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001d5ad:	31 c9                	xor    ecx,ecx
c001d5af:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001d5b6:	8b 2d 44 f4 02 c0    	mov    ebp,DWORD PTR ds:0xc002f444
c001d5bc:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001d5c3:	8b 15 48 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f448
c001d5c9:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001d5ce:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001d5d6:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001d5db:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001d5e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d5e7:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001d5ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d5f3:	39 cd                	cmp    ebp,ecx
c001d5f5:	0f 8e 86 01 00 00    	jle    c001d781 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001d5fb:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001d5fe:	d4 40                	aam    0x40
c001d600:	d5 39                	aad    0x39
c001d602:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001d606:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001d60a:	d4 40                	aam    0x40
c001d60c:	d5 39                	aad    0x39
c001d60e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d612:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001d616:	d4 40                	aam    0x40
c001d618:	d5 39                	aad    0x39
c001d61a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001d61e:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001d622:	d4 40                	aam    0x40
c001d624:	d5 39                	aad    0x39
c001d626:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d62a:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001d62e:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001d632:	3c 56                	cmp    al,0x56
c001d634:	74 47                	je     c001d67d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001d636:	d4 40                	aam    0x40
c001d638:	d5 39                	aad    0x39
c001d63a:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d63d:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001d641:	0f b6 db             	movzx  ebx,bl
c001d644:	c1 e3 04             	shl    ebx,0x4
c001d647:	d4 40                	aam    0x40
c001d649:	d5 39                	aad    0x39
c001d64b:	83 e8 30             	sub    eax,0x30
c001d64e:	0f b6 c0             	movzx  eax,al
c001d651:	09 c3                	or     ebx,eax
c001d653:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001d657:	c1 e3 04             	shl    ebx,0x4
c001d65a:	d4 40                	aam    0x40
c001d65c:	d5 39                	aad    0x39
c001d65e:	83 e8 30             	sub    eax,0x30
c001d661:	0f b6 c0             	movzx  eax,al
c001d664:	09 c3                	or     ebx,eax
c001d666:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001d66a:	c1 e3 04             	shl    ebx,0x4
c001d66d:	d4 40                	aam    0x40
c001d66f:	d5 39                	aad    0x39
c001d671:	83 e8 30             	sub    eax,0x30
c001d674:	0f b6 c0             	movzx  eax,al
c001d677:	09 c3                	or     ebx,eax
c001d679:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001d67d:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001d681:	80 fb 58             	cmp    bl,0x58
c001d684:	74 49                	je     c001d6cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001d686:	88 d8                	mov    al,bl
c001d688:	d4 40                	aam    0x40
c001d68a:	d5 39                	aad    0x39
c001d68c:	83 e8 30             	sub    eax,0x30
c001d68f:	0f b6 f8             	movzx  edi,al
c001d692:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001d696:	c1 e7 04             	shl    edi,0x4
c001d699:	d4 40                	aam    0x40
c001d69b:	d5 39                	aad    0x39
c001d69d:	83 e8 30             	sub    eax,0x30
c001d6a0:	0f b6 c0             	movzx  eax,al
c001d6a3:	09 c7                	or     edi,eax
c001d6a5:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001d6a9:	c1 e7 04             	shl    edi,0x4
c001d6ac:	d4 40                	aam    0x40
c001d6ae:	d5 39                	aad    0x39
c001d6b0:	83 e8 30             	sub    eax,0x30
c001d6b3:	0f b6 c0             	movzx  eax,al
c001d6b6:	09 c7                	or     edi,eax
c001d6b8:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001d6bc:	c1 e7 04             	shl    edi,0x4
c001d6bf:	d4 40                	aam    0x40
c001d6c1:	d5 39                	aad    0x39
c001d6c3:	83 e8 30             	sub    eax,0x30
c001d6c6:	0f b6 c0             	movzx  eax,al
c001d6c9:	09 c7                	or     edi,eax
c001d6cb:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001d6cf:	8d 41 10             	lea    eax,[ecx+0x10]
c001d6d2:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001d6d6:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001d6da:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001d6de:	83 f9 0a             	cmp    ecx,0xa
c001d6e1:	74 07                	je     c001d6ea <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001d6e3:	47                   	inc    edi
c001d6e4:	39 c5                	cmp    ebp,eax
c001d6e6:	75 16                	jne    c001d6fe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001d6e8:	89 e8                	mov    eax,ebp
c001d6ea:	83 f9 0a             	cmp    ecx,0xa
c001d6ed:	0f 94 c1             	sete   cl
c001d6f0:	0f b6 c9             	movzx  ecx,cl
c001d6f3:	01 c1                	add    ecx,eax
c001d6f5:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001d6fa:	75 0f                	jne    c001d70b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001d6fc:	eb 1c                	jmp    c001d71a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001d6fe:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001d701:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001d705:	40                   	inc    eax
c001d706:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001d709:	eb cb                	jmp    c001d6d6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001d70b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d70f:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001d714:	0f 85 d9 fe ff ff    	jne    c001d5f3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001d71a:	80 fb 58             	cmp    bl,0x58
c001d71d:	74 10                	je     c001d72f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001d71f:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001d724:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001d729:	0f 85 c4 fe ff ff    	jne    c001d5f3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001d72f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d733:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d737:	83 e8 30             	sub    eax,0x30
c001d73a:	c1 e0 04             	shl    eax,0x4
c001d73d:	83 eb 30             	sub    ebx,0x30
c001d740:	09 d8                	or     eax,ebx
c001d742:	0f b6 c0             	movzx  eax,al
c001d745:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001d749:	0f 85 a4 fe ff ff    	jne    c001d5f3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001d74f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d753:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d757:	83 e8 30             	sub    eax,0x30
c001d75a:	c1 e0 04             	shl    eax,0x4
c001d75d:	83 eb 30             	sub    ebx,0x30
c001d760:	09 d8                	or     eax,ebx
c001d762:	0f b6 c0             	movzx  eax,al
c001d765:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001d769:	0f 85 84 fe ff ff    	jne    c001d5f3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001d76f:	50                   	push   eax
c001d770:	50                   	push   eax
c001d771:	8d 44 24 48          	lea    eax,[esp+0x48]
c001d775:	50                   	push   eax
c001d776:	56                   	push   esi
c001d777:	e8 d4 2e fe ff       	call   c0000650 <strcpy>
c001d77c:	83 c4 10             	add    esp,0x10
c001d77f:	eb 05                	jmp    c001d786 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001d781:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001d784:	31 f6                	xor    esi,esi
c001d786:	81 c4 4c 01 00 00    	add    esp,0x14c
c001d78c:	89 f0                	mov    eax,esi
c001d78e:	5b                   	pop    ebx
c001d78f:	5e                   	pop    esi
c001d790:	5f                   	pop    edi
c001d791:	5d                   	pop    ebp
c001d792:	c3                   	ret    
c001d793:	90                   	nop

c001d794 <PCI::checkBus(unsigned char)>:
c001d794:	56                   	push   esi
c001d795:	53                   	push   ebx
c001d796:	31 db                	xor    ebx,ebx
c001d798:	51                   	push   ecx
c001d799:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d79e:	52                   	push   edx
c001d79f:	53                   	push   ebx
c001d7a0:	43                   	inc    ebx
c001d7a1:	56                   	push   esi
c001d7a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d7a6:	e8 6f 03 00 00       	call   c001db1a <PCI::checkDevice(unsigned char, unsigned char)>
c001d7ab:	83 c4 10             	add    esp,0x10
c001d7ae:	83 fb 20             	cmp    ebx,0x20
c001d7b1:	75 eb                	jne    c001d79e <PCI::checkBus(unsigned char)+0xa>
c001d7b3:	58                   	pop    eax
c001d7b4:	5b                   	pop    ebx
c001d7b5:	5e                   	pop    esi
c001d7b6:	c3                   	ret    
c001d7b7:	90                   	nop

c001d7b8 <PCI::foundDevice(PCIDeviceInfo)>:
c001d7b8:	55                   	push   ebp
c001d7b9:	57                   	push   edi
c001d7ba:	56                   	push   esi
c001d7bb:	53                   	push   ebx
c001d7bc:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001d7c2:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001d7ca:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001d7d1:	3d ff ff 00 00       	cmp    eax,0xffff
c001d7d6:	0f 84 b6 01 00 00    	je     c001d992 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001d7dc:	0f b7 ac 24 a4 00 00 00 	movzx  ebp,WORD PTR [esp+0xa4]
c001d7e4:	66 81 fd 06 04       	cmp    bp,0x406
c001d7e9:	75 32                	jne    c001d81d <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001d7eb:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001d7f3:	50                   	push   eax
c001d7f4:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001d7fc:	50                   	push   eax
c001d7fd:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001d805:	50                   	push   eax
c001d806:	53                   	push   ebx
c001d807:	e8 4c fb ff ff       	call   c001d358 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001d80c:	59                   	pop    ecx
c001d80d:	5e                   	pop    esi
c001d80e:	0f b6 c0             	movzx  eax,al
c001d811:	50                   	push   eax
c001d812:	53                   	push   ebx
c001d813:	e8 7c ff ff ff       	call   c001d794 <PCI::checkBus(unsigned char)>
c001d818:	e9 15 01 00 00       	jmp    c001d932 <PCI::foundDevice(PCIDeviceInfo)+0x17a>
c001d81d:	0f b6 94 24 c4 00 00 00 	movzx  edx,BYTE PTR [esp+0xc4]
c001d825:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001d82b:	8b 8c 24 a4 00 00 00 	mov    ecx,DWORD PTR [esp+0xa4]
c001d832:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001d839:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d83d:	85 c0                	test   eax,eax
c001d83f:	74 34                	je     c001d875 <PCI::foundDevice(PCIDeviceInfo)+0xbd>
c001d841:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d844:	85 d2                	test   edx,edx
c001d846:	74 29                	je     c001d871 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001d848:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001d84e:	31 cf                	xor    edi,ecx
c001d850:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001d856:	75 19                	jne    c001d871 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001d858:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001d85e:	75 11                	jne    c001d871 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001d860:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001d867:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001d86b:	0f 84 21 01 00 00    	je     c001d992 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001d871:	8b 00                	mov    eax,DWORD PTR [eax]
c001d873:	eb c8                	jmp    c001d83d <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001d875:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001d879:	be 68 53 02 c0       	mov    esi,0xc0025368
c001d87e:	b9 07 00 00 00       	mov    ecx,0x7
c001d883:	fc                   	cld    
c001d884:	31 d2                	xor    edx,edx
c001d886:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d888:	b9 12 00 00 00       	mov    ecx,0x12
c001d88d:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001d894:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001d898:	83 ec 0c             	sub    esp,0xc
c001d89b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d89d:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001d8a5:	b9 0a 00 00 00       	mov    ecx,0xa
c001d8aa:	f7 f1                	div    ecx
c001d8ac:	83 c0 30             	add    eax,0x30
c001d8af:	83 c2 30             	add    edx,0x30
c001d8b2:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001d8b6:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001d8be:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001d8c2:	31 d2                	xor    edx,edx
c001d8c4:	f7 f1                	div    ecx
c001d8c6:	83 c0 30             	add    eax,0x30
c001d8c9:	83 c2 30             	add    edx,0x30
c001d8cc:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001d8d0:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001d8d4:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d8d8:	50                   	push   eax
c001d8d9:	e8 49 f8 fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001d8de:	83 c4 10             	add    esp,0x10
c001d8e1:	81 fd 01 06 00 00    	cmp    ebp,0x601
c001d8e7:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001d8ee:	75 47                	jne    c001d937 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c001d8f0:	83 ec 0c             	sub    esp,0xc
c001d8f3:	68 64 01 00 00       	push   0x164
c001d8f8:	e8 73 21 ff ff       	call   c000fa70 <malloc>
c001d8fd:	89 04 24             	mov    DWORD PTR [esp],eax
c001d900:	89 c5                	mov    ebp,eax
c001d902:	e8 35 11 00 00       	call   c001ea3c <SATABus::SATABus()>
c001d907:	58                   	pop    eax
c001d908:	5a                   	pop    edx
c001d909:	55                   	push   ebp
c001d90a:	53                   	push   ebx
c001d90b:	e8 88 c0 fe ff       	call   c0009998 <Device::addChild(Device*)>
c001d910:	83 ec 1c             	sub    esp,0x1c
c001d913:	b9 09 00 00 00       	mov    ecx,0x9
c001d918:	89 e7                	mov    edi,esp
c001d91a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d91c:	55                   	push   ebp
c001d91d:	e8 bc bf fe ff       	call   c00098de <Device::preOpenPCI(PCIDeviceInfo)>
c001d922:	83 c4 30             	add    esp,0x30
c001d925:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d928:	6a 00                	push   0x0
c001d92a:	6a 00                	push   0x0
c001d92c:	6a 00                	push   0x0
c001d92e:	55                   	push   ebp
c001d92f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d932:	83 c4 10             	add    esp,0x10
c001d935:	eb 5b                	jmp    c001d992 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001d937:	81 fd 01 01 00 00    	cmp    ebp,0x101
c001d93d:	75 19                	jne    c001d958 <PCI::foundDevice(PCIDeviceInfo)+0x1a0>
c001d93f:	83 ec 0c             	sub    esp,0xc
c001d942:	68 70 02 00 00       	push   0x270
c001d947:	e8 24 21 ff ff       	call   c000fa70 <malloc>
c001d94c:	89 04 24             	mov    DWORD PTR [esp],eax
c001d94f:	89 c5                	mov    ebp,eax
c001d951:	e8 94 02 00 00       	call   c001dbea <IDE::IDE()>
c001d956:	eb af                	jmp    c001d907 <PCI::foundDevice(PCIDeviceInfo)+0x14f>
c001d958:	83 ec 0c             	sub    esp,0xc
c001d95b:	68 58 01 00 00       	push   0x158
c001d960:	e8 0b 21 ff ff       	call   c000fa70 <malloc>
c001d965:	89 c5                	mov    ebp,eax
c001d967:	58                   	pop    eax
c001d968:	5a                   	pop    edx
c001d969:	68 4e 53 02 c0       	push   0xc002534e
c001d96e:	55                   	push   ebp
c001d96f:	e8 d8 c2 fe ff       	call   c0009c4c <DriverlessDevice::DriverlessDevice(char const*)>
c001d974:	59                   	pop    ecx
c001d975:	5f                   	pop    edi
c001d976:	55                   	push   ebp
c001d977:	53                   	push   ebx
c001d978:	e8 1b c0 fe ff       	call   c0009998 <Device::addChild(Device*)>
c001d97d:	83 ec 1c             	sub    esp,0x1c
c001d980:	b9 09 00 00 00       	mov    ecx,0x9
c001d985:	89 e7                	mov    edi,esp
c001d987:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d989:	55                   	push   ebp
c001d98a:	e8 4f bf fe ff       	call   c00098de <Device::preOpenPCI(PCIDeviceInfo)>
c001d98f:	83 c4 30             	add    esp,0x30
c001d992:	81 c4 8c 00 00 00    	add    esp,0x8c
c001d998:	5b                   	pop    ebx
c001d999:	5e                   	pop    esi
c001d99a:	5f                   	pop    edi
c001d99b:	5d                   	pop    ebp
c001d99c:	c3                   	ret    
c001d99d:	90                   	nop

c001d99e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001d99e:	55                   	push   ebp
c001d99f:	57                   	push   edi
c001d9a0:	56                   	push   esi
c001d9a1:	53                   	push   ebx
c001d9a2:	83 ec 68             	sub    esp,0x68
c001d9a5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001d9ac:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001d9b0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d9b4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001d9bb:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001d9c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d9c4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001d9cb:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001d9d0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d9d4:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001d9d9:	6a 0c                	push   0xc
c001d9db:	57                   	push   edi
c001d9dc:	53                   	push   ebx
c001d9dd:	56                   	push   esi
c001d9de:	55                   	push   ebp
c001d9df:	e8 c4 f7 ff ff       	call   c001d1a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d9e4:	83 c4 20             	add    esp,0x20
c001d9e7:	57                   	push   edi
c001d9e8:	53                   	push   ebx
c001d9e9:	56                   	push   esi
c001d9ea:	55                   	push   ebp
c001d9eb:	e8 ae f8 ff ff       	call   c001d29e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001d9f0:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001d9f5:	57                   	push   edi
c001d9f6:	53                   	push   ebx
c001d9f7:	56                   	push   esi
c001d9f8:	55                   	push   ebp
c001d9f9:	e8 36 f9 ff ff       	call   c001d334 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001d9fe:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001da02:	83 c4 14             	add    esp,0x14
c001da05:	6a 3c                	push   0x3c
c001da07:	57                   	push   edi
c001da08:	53                   	push   ebx
c001da09:	56                   	push   esi
c001da0a:	55                   	push   ebp
c001da0b:	e8 98 f7 ff ff       	call   c001d1a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001da10:	0f b6 c4             	movzx  eax,ah
c001da13:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001da17:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001da1b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001da1f:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c001da24:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001da2a:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001da30:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001da34:	83 c4 20             	add    esp,0x20
c001da37:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001da3c:	74 30                	je     c001da6e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001da3e:	31 c0                	xor    eax,eax
c001da40:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001da44:	7e 28                	jle    c001da6e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001da46:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001da4e:	39 cb                	cmp    ebx,ecx
c001da50:	75 19                	jne    c001da6b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001da52:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001da5a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001da5e:	75 0b                	jne    c001da6b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001da60:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001da67:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001da6b:	40                   	inc    eax
c001da6c:	eb d2                	jmp    c001da40 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001da6e:	31 d2                	xor    edx,edx
c001da70:	83 ec 0c             	sub    esp,0xc
c001da73:	57                   	push   edi
c001da74:	53                   	push   ebx
c001da75:	56                   	push   esi
c001da76:	52                   	push   edx
c001da77:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001da7b:	55                   	push   ebp
c001da7c:	e8 ff f8 ff ff       	call   c001d380 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001da81:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001da85:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001da89:	42                   	inc    edx
c001da8a:	83 c4 20             	add    esp,0x20
c001da8d:	83 fa 06             	cmp    edx,0x6
c001da90:	75 de                	jne    c001da70 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001da92:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001da96:	83 ec 0c             	sub    esp,0xc
c001da99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da9d:	c1 e2 08             	shl    edx,0x8
c001daa0:	0f b6 c4             	movzx  eax,ah
c001daa3:	09 d0                	or     eax,edx
c001daa5:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001daaa:	6a 02                	push   0x2
c001daac:	57                   	push   edi
c001daad:	53                   	push   ebx
c001daae:	56                   	push   esi
c001daaf:	55                   	push   ebp
c001dab0:	e8 f3 f6 ff ff       	call   c001d1a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dab5:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001daba:	83 c4 20             	add    esp,0x20
c001dabd:	57                   	push   edi
c001dabe:	53                   	push   ebx
c001dabf:	56                   	push   esi
c001dac0:	55                   	push   ebp
c001dac1:	e8 22 f8 ff ff       	call   c001d2e8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001dac6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001daca:	57                   	push   edi
c001dacb:	53                   	push   ebx
c001dacc:	56                   	push   esi
c001dacd:	55                   	push   ebp
c001dace:	e8 7f f7 ff ff       	call   c001d252 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001dad3:	b9 09 00 00 00       	mov    ecx,0x9
c001dad8:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001dadd:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001dae1:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001dae5:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001dae9:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001daed:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001daf1:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001daf5:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001daf9:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001dafd:	83 ec 0c             	sub    esp,0xc
c001db00:	fc                   	cld    
c001db01:	8d 74 24 58          	lea    esi,[esp+0x58]
c001db05:	89 e7                	mov    edi,esp
c001db07:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001db09:	55                   	push   ebp
c001db0a:	e8 a9 fc ff ff       	call   c001d7b8 <PCI::foundDevice(PCIDeviceInfo)>
c001db0f:	81 c4 8c 00 00 00    	add    esp,0x8c
c001db15:	5b                   	pop    ebx
c001db16:	5e                   	pop    esi
c001db17:	5f                   	pop    edi
c001db18:	5d                   	pop    ebp
c001db19:	c3                   	ret    

c001db1a <PCI::checkDevice(unsigned char, unsigned char)>:
c001db1a:	55                   	push   ebp
c001db1b:	57                   	push   edi
c001db1c:	56                   	push   esi
c001db1d:	53                   	push   ebx
c001db1e:	83 ec 0c             	sub    esp,0xc
c001db21:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001db26:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001db2b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001db2f:	6a 00                	push   0x0
c001db31:	56                   	push   esi
c001db32:	57                   	push   edi
c001db33:	55                   	push   ebp
c001db34:	e8 19 f7 ff ff       	call   c001d252 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001db39:	6a 00                	push   0x0
c001db3b:	56                   	push   esi
c001db3c:	57                   	push   edi
c001db3d:	55                   	push   ebp
c001db3e:	e8 5b fe ff ff       	call   c001d99e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001db43:	83 c4 20             	add    esp,0x20
c001db46:	6a 00                	push   0x0
c001db48:	56                   	push   esi
c001db49:	57                   	push   edi
c001db4a:	55                   	push   ebp
c001db4b:	e8 26 f7 ff ff       	call   c001d276 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001db50:	83 c4 10             	add    esp,0x10
c001db53:	a8 80                	test   al,0x80
c001db55:	74 2d                	je     c001db84 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001db57:	bb 01 00 00 00       	mov    ebx,0x1
c001db5c:	53                   	push   ebx
c001db5d:	56                   	push   esi
c001db5e:	57                   	push   edi
c001db5f:	55                   	push   ebp
c001db60:	e8 ed f6 ff ff       	call   c001d252 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001db65:	83 c4 10             	add    esp,0x10
c001db68:	0f b7 c0             	movzx  eax,ax
c001db6b:	3d ff ff 00 00       	cmp    eax,0xffff
c001db70:	74 0c                	je     c001db7e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001db72:	53                   	push   ebx
c001db73:	56                   	push   esi
c001db74:	57                   	push   edi
c001db75:	55                   	push   ebp
c001db76:	e8 23 fe ff ff       	call   c001d99e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001db7b:	83 c4 10             	add    esp,0x10
c001db7e:	43                   	inc    ebx
c001db7f:	83 fb 08             	cmp    ebx,0x8
c001db82:	75 d8                	jne    c001db5c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001db84:	83 c4 0c             	add    esp,0xc
c001db87:	5b                   	pop    ebx
c001db88:	5e                   	pop    esi
c001db89:	5f                   	pop    edi
c001db8a:	5d                   	pop    ebp
c001db8b:	c3                   	ret    

c001db8c <PCI::detect()>:
c001db8c:	56                   	push   esi
c001db8d:	53                   	push   ebx
c001db8e:	53                   	push   ebx
c001db8f:	31 db                	xor    ebx,ebx
c001db91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001db95:	6a 00                	push   0x0
c001db97:	6a 00                	push   0x0
c001db99:	6a 00                	push   0x0
c001db9b:	56                   	push   esi
c001db9c:	e8 d5 f6 ff ff       	call   c001d276 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001dba1:	83 c4 10             	add    esp,0x10
c001dba4:	a8 80                	test   al,0x80
c001dba6:	75 21                	jne    c001dbc9 <PCI::detect()+0x3d>
c001dba8:	51                   	push   ecx
c001dba9:	51                   	push   ecx
c001dbaa:	6a 00                	push   0x0
c001dbac:	56                   	push   esi
c001dbad:	e8 e2 fb ff ff       	call   c001d794 <PCI::checkBus(unsigned char)>
c001dbb2:	83 c4 10             	add    esp,0x10
c001dbb5:	eb 2a                	jmp    c001dbe1 <PCI::detect()+0x55>
c001dbb7:	52                   	push   edx
c001dbb8:	52                   	push   edx
c001dbb9:	53                   	push   ebx
c001dbba:	43                   	inc    ebx
c001dbbb:	56                   	push   esi
c001dbbc:	e8 d3 fb ff ff       	call   c001d794 <PCI::checkBus(unsigned char)>
c001dbc1:	83 c4 10             	add    esp,0x10
c001dbc4:	83 fb 08             	cmp    ebx,0x8
c001dbc7:	74 18                	je     c001dbe1 <PCI::detect()+0x55>
c001dbc9:	53                   	push   ebx
c001dbca:	6a 00                	push   0x0
c001dbcc:	6a 00                	push   0x0
c001dbce:	56                   	push   esi
c001dbcf:	e8 7e f6 ff ff       	call   c001d252 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001dbd4:	83 c4 10             	add    esp,0x10
c001dbd7:	0f b7 c0             	movzx  eax,ax
c001dbda:	3d ff ff 00 00       	cmp    eax,0xffff
c001dbdf:	74 d6                	je     c001dbb7 <PCI::detect()+0x2b>
c001dbe1:	58                   	pop    eax
c001dbe2:	5b                   	pop    ebx
c001dbe3:	5e                   	pop    esi
c001dbe4:	c3                   	ret    
c001dbe5:	90                   	nop

c001dbe6 <IDE::close(int, int, void*)>:
c001dbe6:	83 c8 ff             	or     eax,0xffffffff
c001dbe9:	c3                   	ret    

c001dbea <IDE::IDE()>:
c001dbea:	83 ec 0c             	sub    esp,0xc
c001dbed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbf1:	83 ec 08             	sub    esp,0x8
c001dbf4:	68 f8 53 02 c0       	push   0xc00253f8
c001dbf9:	50                   	push   eax
c001dbfa:	e8 f1 c0 fe ff       	call   c0009cf0 <HardDiskController::HardDiskController(char const*)>
c001dbff:	83 c4 10             	add    esp,0x10
c001dc02:	ba 24 55 02 c0       	mov    edx,0xc0025524
c001dc07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc0b:	89 10                	mov    DWORD PTR [eax],edx
c001dc0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc11:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001dc18:	90                   	nop
c001dc19:	83 c4 0c             	add    esp,0xc
c001dc1c:	c3                   	ret    
c001dc1d:	90                   	nop

c001dc1e <IDE::prepareInterrupt(unsigned char)>:
c001dc1e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001dc23:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001dc27:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001dc2f:	c3                   	ret    

c001dc30 <selectDrive(unsigned char, unsigned char)>:
c001dc30:	c3                   	ret    
c001dc31:	90                   	nop

c001dc32 <IDE::getBase(unsigned char)>:
c001dc32:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001dc37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dc3b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001dc43:	c3                   	ret    

c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001dc44:	55                   	push   ebp
c001dc45:	57                   	push   edi
c001dc46:	56                   	push   esi
c001dc47:	53                   	push   ebx
c001dc48:	83 ec 1c             	sub    esp,0x1c
c001dc4b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001dc4f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dc53:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001dc57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001dc5b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001dc5e:	80 f9 03             	cmp    cl,0x3
c001dc61:	77 4f                	ja     c001dcb2 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001dc63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dc67:	0f b6 f2             	movzx  esi,dl
c001dc6a:	0f b6 db             	movzx  ebx,bl
c001dc6d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001dc70:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001dc75:	80 ca 80             	or     dl,0x80
c001dc78:	52                   	push   edx
c001dc79:	6a 0c                	push   0xc
c001dc7b:	56                   	push   esi
c001dc7c:	57                   	push   edi
c001dc7d:	e8 c2 ff ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc82:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001dc87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc8b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001dc8f:	ee                   	out    dx,al
c001dc90:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001dc95:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001dc99:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001dc9d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001dca5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dca9:	83 c4 2c             	add    esp,0x2c
c001dcac:	5b                   	pop    ebx
c001dcad:	5e                   	pop    esi
c001dcae:	5f                   	pop    edi
c001dcaf:	5d                   	pop    ebp
c001dcb0:	eb 92                	jmp    c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcb2:	0f b6 cb             	movzx  ecx,bl
c001dcb5:	83 f9 07             	cmp    ecx,0x7
c001dcb8:	77 12                	ja     c001dccc <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001dcba:	0f b6 d2             	movzx  edx,dl
c001dcbd:	0f b6 db             	movzx  ebx,bl
c001dcc0:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001dcc8:	01 da                	add    edx,ebx
c001dcca:	eb 2f                	jmp    c001dcfb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001dccc:	83 f9 0d             	cmp    ecx,0xd
c001dccf:	77 13                	ja     c001dce4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001dcd1:	0f b6 d2             	movzx  edx,dl
c001dcd4:	0f b6 db             	movzx  ebx,bl
c001dcd7:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001dcde:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001dce2:	eb 17                	jmp    c001dcfb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001dce4:	83 f9 15             	cmp    ecx,0x15
c001dce7:	77 13                	ja     c001dcfc <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001dce9:	0f b6 d2             	movzx  edx,dl
c001dcec:	0f b6 db             	movzx  ebx,bl
c001dcef:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001dcf7:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001dcfb:	ee                   	out    dx,al
c001dcfc:	83 c4 1c             	add    esp,0x1c
c001dcff:	5b                   	pop    ebx
c001dd00:	5e                   	pop    esi
c001dd01:	5f                   	pop    edi
c001dd02:	5d                   	pop    ebp
c001dd03:	c3                   	ret    

c001dd04 <IDE::read(unsigned char, unsigned char)>:
c001dd04:	57                   	push   edi
c001dd05:	56                   	push   esi
c001dd06:	53                   	push   ebx
c001dd07:	83 ec 10             	sub    esp,0x10
c001dd0a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dd0e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001dd12:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001dd16:	8d 42 f8             	lea    eax,[edx-0x8]
c001dd19:	3c 03                	cmp    al,0x3
c001dd1b:	77 48                	ja     c001dd65 <IDE::read(unsigned char, unsigned char)+0x61>
c001dd1d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dd21:	0f b6 f1             	movzx  esi,cl
c001dd24:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001dd27:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001dd2c:	0c 80                	or     al,0x80
c001dd2e:	50                   	push   eax
c001dd2f:	6a 0c                	push   0xc
c001dd31:	56                   	push   esi
c001dd32:	53                   	push   ebx
c001dd33:	e8 0c ff ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dd3c:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001dd41:	0f b6 d2             	movzx  edx,dl
c001dd44:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001dd48:	ec                   	in     al,dx
c001dd49:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001dd4d:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001dd52:	52                   	push   edx
c001dd53:	6a 0c                	push   0xc
c001dd55:	56                   	push   esi
c001dd56:	53                   	push   ebx
c001dd57:	e8 e8 fe ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd5c:	83 c4 20             	add    esp,0x20
c001dd5f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001dd63:	eb 4c                	jmp    c001ddb1 <IDE::read(unsigned char, unsigned char)+0xad>
c001dd65:	0f b6 f2             	movzx  esi,dl
c001dd68:	83 fe 07             	cmp    esi,0x7
c001dd6b:	77 12                	ja     c001dd7f <IDE::read(unsigned char, unsigned char)+0x7b>
c001dd6d:	0f b6 c9             	movzx  ecx,cl
c001dd70:	0f b6 d2             	movzx  edx,dl
c001dd73:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001dd7b:	01 c2                	add    edx,eax
c001dd7d:	eb 31                	jmp    c001ddb0 <IDE::read(unsigned char, unsigned char)+0xac>
c001dd7f:	83 fe 0d             	cmp    esi,0xd
c001dd82:	77 13                	ja     c001dd97 <IDE::read(unsigned char, unsigned char)+0x93>
c001dd84:	0f b6 c9             	movzx  ecx,cl
c001dd87:	0f b6 d2             	movzx  edx,dl
c001dd8a:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001dd91:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001dd95:	eb 19                	jmp    c001ddb0 <IDE::read(unsigned char, unsigned char)+0xac>
c001dd97:	31 c0                	xor    eax,eax
c001dd99:	83 fe 15             	cmp    esi,0x15
c001dd9c:	77 13                	ja     c001ddb1 <IDE::read(unsigned char, unsigned char)+0xad>
c001dd9e:	0f b6 c9             	movzx  ecx,cl
c001dda1:	0f b6 d2             	movzx  edx,dl
c001dda4:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001ddac:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ddb0:	ec                   	in     al,dx
c001ddb1:	83 c4 10             	add    esp,0x10
c001ddb4:	5b                   	pop    ebx
c001ddb5:	5e                   	pop    esi
c001ddb6:	5f                   	pop    edi
c001ddb7:	c3                   	ret    

c001ddb8 <IDE::waitInterrupt(unsigned char)>:
c001ddb8:	55                   	push   ebp
c001ddb9:	57                   	push   edi
c001ddba:	56                   	push   esi
c001ddbb:	53                   	push   ebx
c001ddbc:	31 db                	xor    ebx,ebx
c001ddbe:	83 ec 0c             	sub    esp,0xc
c001ddc1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ddc5:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ddca:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ddd2:	89 e8                	mov    eax,ebp
c001ddd4:	84 c0                	test   al,al
c001ddd6:	75 30                	jne    c001de08 <IDE::waitInterrupt(unsigned char)+0x50>
c001ddd8:	50                   	push   eax
c001ddd9:	6a 0c                	push   0xc
c001dddb:	56                   	push   esi
c001dddc:	57                   	push   edi
c001dddd:	e8 22 ff ff ff       	call   c001dd04 <IDE::read(unsigned char, unsigned char)>
c001dde2:	83 c4 10             	add    esp,0x10
c001dde5:	a8 01                	test   al,0x1
c001dde7:	75 27                	jne    c001de10 <IDE::waitInterrupt(unsigned char)+0x58>
c001dde9:	f6 c3 04             	test   bl,0x4
c001ddec:	75 12                	jne    c001de00 <IDE::waitInterrupt(unsigned char)+0x48>
c001ddee:	83 fb 32             	cmp    ebx,0x32
c001ddf1:	7e 0d                	jle    c001de00 <IDE::waitInterrupt(unsigned char)+0x48>
c001ddf3:	83 ec 0c             	sub    esp,0xc
c001ddf6:	6a 64                	push   0x64
c001ddf8:	e8 c3 8d ff ff       	call   c0016bc0 <milliTenthSleep(unsigned int)>
c001ddfd:	83 c4 10             	add    esp,0x10
c001de00:	83 fb 3c             	cmp    ebx,0x3c
c001de03:	74 0b                	je     c001de10 <IDE::waitInterrupt(unsigned char)+0x58>
c001de05:	43                   	inc    ebx
c001de06:	eb c2                	jmp    c001ddca <IDE::waitInterrupt(unsigned char)+0x12>
c001de08:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001de10:	83 c4 0c             	add    esp,0xc
c001de13:	89 e8                	mov    eax,ebp
c001de15:	5b                   	pop    ebx
c001de16:	5e                   	pop    esi
c001de17:	5f                   	pop    edi
c001de18:	5d                   	pop    ebp
c001de19:	c3                   	ret    

c001de1a <ideChannel0IRQHandler(regs*, void*)>:
c001de1a:	83 ec 10             	sub    esp,0x10
c001de1d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001de21:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001de28:	6a 07                	push   0x7
c001de2a:	6a 00                	push   0x0
c001de2c:	50                   	push   eax
c001de2d:	e8 d2 fe ff ff       	call   c001dd04 <IDE::read(unsigned char, unsigned char)>
c001de32:	83 c4 1c             	add    esp,0x1c
c001de35:	c3                   	ret    

c001de36 <ideChannel1IRQHandler(regs*, void*)>:
c001de36:	83 ec 10             	sub    esp,0x10
c001de39:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001de3d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001de44:	6a 07                	push   0x7
c001de46:	6a 01                	push   0x1
c001de48:	50                   	push   eax
c001de49:	e8 b6 fe ff ff       	call   c001dd04 <IDE::read(unsigned char, unsigned char)>
c001de4e:	83 c4 1c             	add    esp,0x1c
c001de51:	c3                   	ret    

c001de52 <IDE::enableIRQs(unsigned char, bool)>:
c001de52:	57                   	push   edi
c001de53:	b8 02 00 00 00       	mov    eax,0x2
c001de58:	56                   	push   esi
c001de59:	53                   	push   ebx
c001de5a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001de5f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001de63:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001de67:	74 02                	je     c001de6b <IDE::enableIRQs(unsigned char, bool)+0x19>
c001de69:	31 c0                	xor    eax,eax
c001de6b:	0f b6 db             	movzx  ebx,bl
c001de6e:	bf 04 00 00 00       	mov    edi,0x4
c001de73:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001de7a:	50                   	push   eax
c001de7b:	6a 0c                	push   0xc
c001de7d:	53                   	push   ebx
c001de7e:	56                   	push   esi
c001de7f:	e8 c0 fd ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de84:	83 c4 10             	add    esp,0x10
c001de87:	50                   	push   eax
c001de88:	6a 0c                	push   0xc
c001de8a:	53                   	push   ebx
c001de8b:	56                   	push   esi
c001de8c:	e8 73 fe ff ff       	call   c001dd04 <IDE::read(unsigned char, unsigned char)>
c001de91:	83 c4 10             	add    esp,0x10
c001de94:	4f                   	dec    edi
c001de95:	75 f0                	jne    c001de87 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001de97:	5b                   	pop    ebx
c001de98:	5e                   	pop    esi
c001de99:	5f                   	pop    edi
c001de9a:	c3                   	ret    
c001de9b:	90                   	nop

c001de9c <IDE::open(int, int, void*)>:
c001de9c:	55                   	push   ebp
c001de9d:	57                   	push   edi
c001de9e:	56                   	push   esi
c001de9f:	53                   	push   ebx
c001dea0:	83 ec 1c             	sub    esp,0x1c
c001dea3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dea7:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001deae:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001deb7:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001dec0:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001dec7:	0f 85 80 02 00 00    	jne    c001e14d <IDE::open(int, int, void*)+0x2b1>
c001decd:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ded3:	a8 70                	test   al,0x70
c001ded5:	75 44                	jne    c001df1b <IDE::open(int, int, void*)+0x7f>
c001ded7:	ba 20 84 00 00       	mov    edx,0x8420
c001dedc:	0f a3 c2             	bt     edx,eax
c001dedf:	73 3a                	jae    c001df1b <IDE::open(int, int, void*)+0x7f>
c001dee1:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001dee7:	83 ec 0c             	sub    esp,0xc
c001deea:	83 e0 fc             	and    eax,0xfffffffc
c001deed:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001def4:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001defa:	83 e0 fc             	and    eax,0xfffffffc
c001defd:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001df04:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001df0a:	83 e0 fc             	and    eax,0xfffffffc
c001df0d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001df14:	68 e5 2b 02 c0       	push   0xc0022be5
c001df19:	eb 60                	jmp    c001df7b <IDE::open(int, int, void*)+0xdf>
c001df1b:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001df25:	be 64 00 00 00       	mov    esi,0x64
c001df2a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001df34:	57                   	push   edi
c001df35:	57                   	push   edi
c001df36:	68 10 54 02 c0       	push   0xc0025410
c001df3b:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001df3f:	57                   	push   edi
c001df40:	e8 0b 27 fe ff       	call   c0000650 <strcpy>
c001df45:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001df4c:	31 d2                	xor    edx,edx
c001df4e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001df51:	89 c8                	mov    eax,ecx
c001df53:	f7 f6                	div    esi
c001df55:	be 0a 00 00 00       	mov    esi,0xa
c001df5a:	31 d2                	xor    edx,edx
c001df5c:	83 c0 30             	add    eax,0x30
c001df5f:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001df63:	89 c8                	mov    eax,ecx
c001df65:	f7 f6                	div    esi
c001df67:	89 d1                	mov    ecx,edx
c001df69:	31 d2                	xor    edx,edx
c001df6b:	f7 f6                	div    esi
c001df6d:	83 c1 30             	add    ecx,0x30
c001df70:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001df74:	83 c2 30             	add    edx,0x30
c001df77:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001df7b:	e8 a7 f1 fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001df80:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001df87:	bf f8 0c 00 00       	mov    edi,0xcf8
c001df8c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001df93:	83 c4 10             	add    esp,0x10
c001df96:	89 fa                	mov    edx,edi
c001df98:	c1 e1 10             	shl    ecx,0x10
c001df9b:	c1 e0 0b             	shl    eax,0xb
c001df9e:	09 c1                	or     ecx,eax
c001dfa0:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001dfa7:	c1 e0 08             	shl    eax,0x8
c001dfaa:	09 c1                	or     ecx,eax
c001dfac:	89 c8                	mov    eax,ecx
c001dfae:	0d 08 00 00 80       	or     eax,0x80000008
c001dfb3:	ef                   	out    dx,eax
c001dfb4:	be fc 0c 00 00       	mov    esi,0xcfc
c001dfb9:	89 f2                	mov    edx,esi
c001dfbb:	ed                   	in     eax,dx
c001dfbc:	c1 e8 10             	shr    eax,0x10
c001dfbf:	3d ff ff 00 00       	cmp    eax,0xffff
c001dfc4:	0f 84 e1 00 00 00    	je     c001e0ab <IDE::open(int, int, void*)+0x20f>
c001dfca:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001dfd0:	89 fa                	mov    edx,edi
c001dfd2:	89 c8                	mov    eax,ecx
c001dfd4:	ef                   	out    dx,eax
c001dfd5:	b0 fe                	mov    al,0xfe
c001dfd7:	89 f2                	mov    edx,esi
c001dfd9:	ee                   	out    dx,al
c001dfda:	89 c8                	mov    eax,ecx
c001dfdc:	89 fa                	mov    edx,edi
c001dfde:	ef                   	out    dx,eax
c001dfdf:	89 f2                	mov    edx,esi
c001dfe1:	ed                   	in     eax,dx
c001dfe2:	3c fe                	cmp    al,0xfe
c001dfe4:	0f 85 83 00 00 00    	jne    c001e06d <IDE::open(int, int, void*)+0x1d1>
c001dfea:	83 ec 0c             	sub    esp,0xc
c001dfed:	68 1b 2c 02 c0       	push   0xc0022c1b
c001dff2:	e8 30 f1 fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001dff7:	c7 04 24 16 54 02 c0 	mov    DWORD PTR [esp],0xc0025416
c001dffe:	e8 4b 8f fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e003:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001e00d:	c7 04 24 08 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f08
c001e014:	e8 0e f1 fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e019:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e020:	89 fa                	mov    edx,edi
c001e022:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e029:	c1 e1 10             	shl    ecx,0x10
c001e02c:	c1 e0 08             	shl    eax,0x8
c001e02f:	09 c1                	or     ecx,eax
c001e031:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e038:	c1 e0 0b             	shl    eax,0xb
c001e03b:	09 c1                	or     ecx,eax
c001e03d:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e043:	89 c8                	mov    eax,ecx
c001e045:	ef                   	out    dx,eax
c001e046:	8b ab 50 01 00 00    	mov    ebp,DWORD PTR [ebx+0x150]
c001e04c:	89 f2                	mov    edx,esi
c001e04e:	89 e8                	mov    eax,ebp
c001e050:	ee                   	out    dx,al
c001e051:	89 c8                	mov    eax,ecx
c001e053:	89 fa                	mov    edx,edi
c001e055:	ef                   	out    dx,eax
c001e056:	89 f2                	mov    edx,esi
c001e058:	ed                   	in     eax,dx
c001e059:	0f b6 c0             	movzx  eax,al
c001e05c:	83 c4 10             	add    esp,0x10
c001e05f:	39 e8                	cmp    eax,ebp
c001e061:	74 58                	je     c001e0bb <IDE::open(int, int, void*)+0x21f>
c001e063:	83 ec 0c             	sub    esp,0xc
c001e066:	68 2b 54 02 c0       	push   0xc002542b
c001e06b:	eb 46                	jmp    c001e0b3 <IDE::open(int, int, void*)+0x217>
c001e06d:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001e076:	75 29                	jne    c001e0a1 <IDE::open(int, int, void*)+0x205>
c001e078:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001e07f:	3d 8a 00 00 00       	cmp    eax,0x8a
c001e084:	74 05                	je     c001e08b <IDE::open(int, int, void*)+0x1ef>
c001e086:	83 c0 80             	add    eax,0xffffff80
c001e089:	75 16                	jne    c001e0a1 <IDE::open(int, int, void*)+0x205>
c001e08b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e092:	83 ec 0c             	sub    esp,0xc
c001e095:	68 b1 3d 02 c0       	push   0xc0023db1
c001e09a:	e8 88 f0 fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e09f:	eb 17                	jmp    c001e0b8 <IDE::open(int, int, void*)+0x21c>
c001e0a1:	83 ec 0c             	sub    esp,0xc
c001e0a4:	68 33 54 02 c0       	push   0xc0025433
c001e0a9:	eb 08                	jmp    c001e0b3 <IDE::open(int, int, void*)+0x217>
c001e0ab:	83 ec 0c             	sub    esp,0xc
c001e0ae:	68 64 54 02 c0       	push   0xc0025464
c001e0b3:	e8 fe 1c ff ff       	call   c000fdb6 <KePanic(char const*)>
c001e0b8:	83 c4 10             	add    esp,0x10
c001e0bb:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001e0c2:	0f 84 bf 00 00 00    	je     c001e187 <IDE::open(int, int, void*)+0x2eb>
c001e0c8:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001e0ce:	83 ec 0c             	sub    esp,0xc
c001e0d1:	83 e0 fc             	and    eax,0xfffffffc
c001e0d4:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001e0db:	83 c0 08             	add    eax,0x8
c001e0de:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001e0e5:	68 8e 54 02 c0       	push   0xc002548e
c001e0ea:	e8 5f 8e fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e0ef:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e0f6:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e0fd:	50                   	push   eax
c001e0fe:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e105:	50                   	push   eax
c001e106:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e10d:	50                   	push   eax
c001e10e:	ff 35 40 f4 02 c0    	push   DWORD PTR ds:0xc002f440
c001e114:	e8 8f f0 ff ff       	call   c001d1a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e119:	83 c4 18             	add    esp,0x18
c001e11c:	83 c8 07             	or     eax,0x7
c001e11f:	0f b7 c0             	movzx  eax,ax
c001e122:	50                   	push   eax
c001e123:	6a 04                	push   0x4
c001e125:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e12c:	50                   	push   eax
c001e12d:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e134:	50                   	push   eax
c001e135:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e13c:	50                   	push   eax
c001e13d:	ff 35 40 f4 02 c0    	push   DWORD PTR ds:0xc002f440
c001e143:	e8 9c f2 ff ff       	call   c001d3e4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001e148:	83 c4 20             	add    esp,0x20
c001e14b:	eb 3a                	jmp    c001e187 <IDE::open(int, int, void*)+0x2eb>
c001e14d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e154:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001e15a:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e161:	05 06 02 00 00       	add    eax,0x206
c001e166:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e16d:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001e174:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e17b:	05 06 02 00 00       	add    eax,0x206
c001e180:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e187:	83 ec 0c             	sub    esp,0xc
c001e18a:	68 57 34 02 c0       	push   0xc0023457
c001e18f:	e8 93 ef fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e194:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001e19a:	83 c4 10             	add    esp,0x10
c001e19d:	89 c2                	mov    edx,eax
c001e19f:	83 e2 0f             	and    edx,0xf
c001e1a2:	83 fa 08             	cmp    edx,0x8
c001e1a5:	75 0a                	jne    c001e1b1 <IDE::open(int, int, void*)+0x315>
c001e1a7:	83 e8 02             	sub    eax,0x2
c001e1aa:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e1b1:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001e1b7:	89 c2                	mov    edx,eax
c001e1b9:	83 e2 0f             	and    edx,0xf
c001e1bc:	83 fa 08             	cmp    edx,0x8
c001e1bf:	75 0a                	jne    c001e1cb <IDE::open(int, int, void*)+0x32f>
c001e1c1:	83 e8 02             	sub    eax,0x2
c001e1c4:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e1cb:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001e1d2:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001e1d9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e1dc:	89 d0                	mov    eax,edx
c001e1de:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e1e2:	8d 7a 01             	lea    edi,[edx+0x1]
c001e1e5:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001e1e9:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001e1ed:	83 e1 3f             	and    ecx,0x3f
c001e1f0:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001e1f4:	89 f9                	mov    ecx,edi
c001e1f6:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001e1fd:	8d 78 02             	lea    edi,[eax+0x2]
c001e200:	0f b6 c9             	movzx  ecx,cl
c001e203:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e206:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001e20a:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e20e:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001e212:	83 e2 3f             	and    edx,0x3f
c001e215:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001e219:	89 f9                	mov    ecx,edi
c001e21b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001e221:	8d 78 03             	lea    edi,[eax+0x3]
c001e224:	0f b6 d1             	movzx  edx,cl
c001e227:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e22a:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001e22e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e232:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001e236:	83 e1 3f             	and    ecx,0x3f
c001e239:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001e23d:	89 fa                	mov    edx,edi
c001e23f:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001e245:	8d 78 04             	lea    edi,[eax+0x4]
c001e248:	0f b6 ca             	movzx  ecx,dl
c001e24b:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e24e:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001e252:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e256:	89 fa                	mov    edx,edi
c001e258:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001e25e:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001e262:	83 e2 3f             	and    edx,0x3f
c001e265:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001e269:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001e270:	66 85 f6             	test   si,si
c001e273:	74 24                	je     c001e299 <IDE::open(int, int, void*)+0x3fd>
c001e275:	89 f9                	mov    ecx,edi
c001e277:	83 c0 05             	add    eax,0x5
c001e27a:	0f b6 d1             	movzx  edx,cl
c001e27d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e280:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e284:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001e288:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001e28e:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001e292:	83 e0 3f             	and    eax,0x3f
c001e295:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001e299:	83 ec 0c             	sub    esp,0xc
c001e29c:	68 a6 54 02 c0       	push   0xc00254a6
c001e2a1:	e8 81 ee fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e2a6:	58                   	pop    eax
c001e2a7:	5a                   	pop    edx
c001e2a8:	6a 00                	push   0x0
c001e2aa:	53                   	push   ebx
c001e2ab:	e8 6e f9 ff ff       	call   c001dc1e <IDE::prepareInterrupt(unsigned char)>
c001e2b0:	59                   	pop    ecx
c001e2b1:	5e                   	pop    esi
c001e2b2:	6a 01                	push   0x1
c001e2b4:	53                   	push   ebx
c001e2b5:	e8 64 f9 ff ff       	call   c001dc1e <IDE::prepareInterrupt(unsigned char)>
c001e2ba:	c7 04 24 f5 4c 02 c0 	mov    DWORD PTR [esp],0xc0024cf5
c001e2c1:	e8 61 ee fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e2c6:	83 c4 0c             	add    esp,0xc
c001e2c9:	6a 00                	push   0x0
c001e2cb:	6a 00                	push   0x0
c001e2cd:	53                   	push   ebx
c001e2ce:	e8 7f fb ff ff       	call   c001de52 <IDE::enableIRQs(unsigned char, bool)>
c001e2d3:	83 c4 0c             	add    esp,0xc
c001e2d6:	6a 00                	push   0x0
c001e2d8:	6a 01                	push   0x1
c001e2da:	53                   	push   ebx
c001e2db:	e8 72 fb ff ff       	call   c001de52 <IDE::enableIRQs(unsigned char, bool)>
c001e2e0:	c7 04 24 a8 54 02 c0 	mov    DWORD PTR [esp],0xc00254a8
c001e2e7:	e8 3b ee fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e2ec:	83 c4 10             	add    esp,0x10
c001e2ef:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001e2f6:	74 3c                	je     c001e334 <IDE::open(int, int, void*)+0x498>
c001e2f8:	83 ec 0c             	sub    esp,0xc
c001e2fb:	53                   	push   ebx
c001e2fc:	6a 01                	push   0x1
c001e2fe:	68 1a de 01 c0       	push   0xc001de1a
c001e303:	6a 0e                	push   0xe
c001e305:	53                   	push   ebx
c001e306:	e8 39 b6 fe ff       	call   c0009944 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e30b:	83 c4 14             	add    esp,0x14
c001e30e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e314:	53                   	push   ebx
c001e315:	6a 01                	push   0x1
c001e317:	68 36 de 01 c0       	push   0xc001de36
c001e31c:	6a 0f                	push   0xf
c001e31e:	53                   	push   ebx
c001e31f:	e8 20 b6 fe ff       	call   c0009944 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e324:	83 c4 14             	add    esp,0x14
c001e327:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001e32d:	68 0e 31 02 c0       	push   0xc002310e
c001e332:	eb 40                	jmp    c001e374 <IDE::open(int, int, void*)+0x4d8>
c001e334:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001e33e:	83 ec 0c             	sub    esp,0xc
c001e341:	53                   	push   ebx
c001e342:	6a 00                	push   0x0
c001e344:	68 1a de 01 c0       	push   0xc001de1a
c001e349:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001e34f:	53                   	push   ebx
c001e350:	e8 ef b5 fe ff       	call   c0009944 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e355:	83 c4 14             	add    esp,0x14
c001e358:	53                   	push   ebx
c001e359:	6a 00                	push   0x0
c001e35b:	68 36 de 01 c0       	push   0xc001de36
c001e360:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001e366:	53                   	push   ebx
c001e367:	e8 d8 b5 fe ff       	call   c0009944 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e36c:	83 c4 14             	add    esp,0x14
c001e36f:	68 a0 3d 02 c0       	push   0xc0023da0
c001e374:	e8 ae ed fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e379:	83 c4 10             	add    esp,0x10
c001e37c:	83 ec 0c             	sub    esp,0xc
c001e37f:	68 aa 54 02 c0       	push   0xc00254aa
c001e384:	e8 9e ed fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e389:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e38b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e38e:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001e391:	c7 04 24 b9 44 02 c0 	mov    DWORD PTR [esp],0xc00244b9
c001e398:	e8 8a ed fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e39d:	83 c4 0c             	add    esp,0xc
c001e3a0:	6a 07                	push   0x7
c001e3a2:	6a 00                	push   0x0
c001e3a4:	53                   	push   ebx
c001e3a5:	e8 5a f9 ff ff       	call   c001dd04 <IDE::read(unsigned char, unsigned char)>
c001e3aa:	83 c4 0c             	add    esp,0xc
c001e3ad:	6a 07                	push   0x7
c001e3af:	6a 01                	push   0x1
c001e3b1:	53                   	push   ebx
c001e3b2:	e8 4d f9 ff ff       	call   c001dd04 <IDE::read(unsigned char, unsigned char)>
c001e3b7:	c7 04 24 a0 3b 02 c0 	mov    DWORD PTR [esp],0xc0023ba0
c001e3be:	e8 64 ed fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e3c3:	83 c4 0c             	add    esp,0xc
c001e3c6:	6a 01                	push   0x1
c001e3c8:	6a 00                	push   0x0
c001e3ca:	53                   	push   ebx
c001e3cb:	e8 82 fa ff ff       	call   c001de52 <IDE::enableIRQs(unsigned char, bool)>
c001e3d0:	83 c4 0c             	add    esp,0xc
c001e3d3:	6a 01                	push   0x1
c001e3d5:	6a 01                	push   0x1
c001e3d7:	53                   	push   ebx
c001e3d8:	e8 75 fa ff ff       	call   c001de52 <IDE::enableIRQs(unsigned char, bool)>
c001e3dd:	c7 04 24 ad 54 02 c0 	mov    DWORD PTR [esp],0xc00254ad
c001e3e4:	e8 3e ed fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e3e9:	83 c4 2c             	add    esp,0x2c
c001e3ec:	31 c0                	xor    eax,eax
c001e3ee:	5b                   	pop    ebx
c001e3ef:	5e                   	pop    esi
c001e3f0:	5f                   	pop    edi
c001e3f1:	5d                   	pop    ebp
c001e3f2:	c3                   	ret    
c001e3f3:	90                   	nop

c001e3f4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001e3f4:	55                   	push   ebp
c001e3f5:	57                   	push   edi
c001e3f6:	56                   	push   esi
c001e3f7:	53                   	push   ebx
c001e3f8:	83 ec 1c             	sub    esp,0x1c
c001e3fb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e3ff:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e403:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e407:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001e40b:	8d 42 f8             	lea    eax,[edx-0x8]
c001e40e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e412:	3c 03                	cmp    al,0x3
c001e414:	77 5a                	ja     c001e470 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001e416:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e41a:	0f b6 db             	movzx  ebx,bl
c001e41d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e421:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001e424:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e429:	0c 80                	or     al,0x80
c001e42b:	50                   	push   eax
c001e42c:	6a 0c                	push   0xc
c001e42e:	53                   	push   ebx
c001e42f:	56                   	push   esi
c001e430:	e8 0f f8 ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e435:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e439:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001e43e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e442:	0f b6 d2             	movzx  edx,dl
c001e445:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001e449:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001e44b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e450:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001e454:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001e458:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e460:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e464:	83 c4 2c             	add    esp,0x2c
c001e467:	5b                   	pop    ebx
c001e468:	5e                   	pop    esi
c001e469:	5f                   	pop    edi
c001e46a:	5d                   	pop    ebp
c001e46b:	e9 d4 f7 ff ff       	jmp    c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e470:	0f b6 c2             	movzx  eax,dl
c001e473:	83 f8 07             	cmp    eax,0x7
c001e476:	77 12                	ja     c001e48a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001e478:	0f b6 db             	movzx  ebx,bl
c001e47b:	0f b6 c2             	movzx  eax,dl
c001e47e:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001e486:	01 c2                	add    edx,eax
c001e488:	eb 2f                	jmp    c001e4b9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001e48a:	83 f8 0d             	cmp    eax,0xd
c001e48d:	77 13                	ja     c001e4a2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001e48f:	0f b6 db             	movzx  ebx,bl
c001e492:	0f b6 d2             	movzx  edx,dl
c001e495:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001e49c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e4a0:	eb 17                	jmp    c001e4b9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001e4a2:	83 f8 15             	cmp    eax,0x15
c001e4a5:	77 14                	ja     c001e4bb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001e4a7:	0f b6 db             	movzx  ebx,bl
c001e4aa:	0f b6 d2             	movzx  edx,dl
c001e4ad:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001e4b5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e4b9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001e4bb:	83 c4 1c             	add    esp,0x1c
c001e4be:	5b                   	pop    ebx
c001e4bf:	5e                   	pop    esi
c001e4c0:	5f                   	pop    edi
c001e4c1:	5d                   	pop    ebp
c001e4c2:	c3                   	ret    
c001e4c3:	90                   	nop

c001e4c4 <IDE::detect()>:
c001e4c4:	55                   	push   ebp
c001e4c5:	57                   	push   edi
c001e4c6:	56                   	push   esi
c001e4c7:	53                   	push   ebx
c001e4c8:	81 ec 28 02 00 00    	sub    esp,0x228
c001e4ce:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001e4d5:	68 af 54 02 c0       	push   0xc00254af
c001e4da:	e8 48 ec fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e4df:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001e4e5:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001e4e9:	83 c4 10             	add    esp,0x10
c001e4ec:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001e4f1:	0f 85 26 04 00 00    	jne    c001e91d <IDE::detect()+0x459>
c001e4f7:	83 ec 0c             	sub    esp,0xc
c001e4fa:	31 f6                	xor    esi,esi
c001e4fc:	68 b2 54 02 c0       	push   0xc00254b2
c001e501:	31 ff                	xor    edi,edi
c001e503:	e8 1f ec fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e508:	83 c4 10             	add    esp,0x10
c001e50b:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001e512:	83 ec 0c             	sub    esp,0xc
c001e515:	68 b5 54 02 c0       	push   0xc00254b5
c001e51a:	e8 08 ec fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e51f:	83 c4 10             	add    esp,0x10
c001e522:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e529:	83 ec 0c             	sub    esp,0xc
c001e52c:	31 ed                	xor    ebp,ebp
c001e52e:	68 b8 54 02 c0       	push   0xc00254b8
c001e533:	e8 ef eb fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e538:	89 f8                	mov    eax,edi
c001e53a:	c1 e0 06             	shl    eax,0x6
c001e53d:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001e545:	c7 04 24 bb 54 02 c0 	mov    DWORD PTR [esp],0xc00254bb
c001e54c:	e8 d6 eb fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e551:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e555:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e559:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e55d:	c1 e0 04             	shl    eax,0x4
c001e560:	83 c8 a0             	or     eax,0xffffffa0
c001e563:	0f b6 c0             	movzx  eax,al
c001e566:	50                   	push   eax
c001e567:	6a 06                	push   0x6
c001e569:	56                   	push   esi
c001e56a:	53                   	push   ebx
c001e56b:	e8 d4 f6 ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e570:	83 c4 1c             	add    esp,0x1c
c001e573:	6a 0c                	push   0xc
c001e575:	56                   	push   esi
c001e576:	53                   	push   ebx
c001e577:	e8 88 f7 ff ff       	call   c001dd04 <IDE::read(unsigned char, unsigned char)>
c001e57c:	83 c4 0c             	add    esp,0xc
c001e57f:	6a 0c                	push   0xc
c001e581:	56                   	push   esi
c001e582:	53                   	push   ebx
c001e583:	e8 7c f7 ff ff       	call   c001dd04 <IDE::read(unsigned char, unsigned char)>
c001e588:	83 c4 0c             	add    esp,0xc
c001e58b:	6a 0c                	push   0xc
c001e58d:	56                   	push   esi
c001e58e:	53                   	push   ebx
c001e58f:	e8 70 f7 ff ff       	call   c001dd04 <IDE::read(unsigned char, unsigned char)>
c001e594:	83 c4 0c             	add    esp,0xc
c001e597:	6a 0c                	push   0xc
c001e599:	56                   	push   esi
c001e59a:	53                   	push   ebx
c001e59b:	e8 64 f7 ff ff       	call   c001dd04 <IDE::read(unsigned char, unsigned char)>
c001e5a0:	c7 04 24 be 54 02 c0 	mov    DWORD PTR [esp],0xc00254be
c001e5a7:	e8 7b eb fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e5ac:	68 ec 00 00 00       	push   0xec
c001e5b1:	6a 07                	push   0x7
c001e5b3:	56                   	push   esi
c001e5b4:	53                   	push   ebx
c001e5b5:	e8 8a f6 ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e5ba:	83 c4 1c             	add    esp,0x1c
c001e5bd:	6a 0c                	push   0xc
c001e5bf:	56                   	push   esi
c001e5c0:	53                   	push   ebx
c001e5c1:	e8 3e f7 ff ff       	call   c001dd04 <IDE::read(unsigned char, unsigned char)>
c001e5c6:	83 c4 0c             	add    esp,0xc
c001e5c9:	6a 0c                	push   0xc
c001e5cb:	56                   	push   esi
c001e5cc:	53                   	push   ebx
c001e5cd:	e8 32 f7 ff ff       	call   c001dd04 <IDE::read(unsigned char, unsigned char)>
c001e5d2:	83 c4 0c             	add    esp,0xc
c001e5d5:	6a 0c                	push   0xc
c001e5d7:	56                   	push   esi
c001e5d8:	53                   	push   ebx
c001e5d9:	e8 26 f7 ff ff       	call   c001dd04 <IDE::read(unsigned char, unsigned char)>
c001e5de:	83 c4 0c             	add    esp,0xc
c001e5e1:	6a 0c                	push   0xc
c001e5e3:	56                   	push   esi
c001e5e4:	53                   	push   ebx
c001e5e5:	e8 1a f7 ff ff       	call   c001dd04 <IDE::read(unsigned char, unsigned char)>
c001e5ea:	c7 04 24 c1 54 02 c0 	mov    DWORD PTR [esp],0xc00254c1
c001e5f1:	e8 31 eb fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e5f6:	83 c4 0c             	add    esp,0xc
c001e5f9:	6a 0c                	push   0xc
c001e5fb:	56                   	push   esi
c001e5fc:	53                   	push   ebx
c001e5fd:	e8 02 f7 ff ff       	call   c001dd04 <IDE::read(unsigned char, unsigned char)>
c001e602:	83 c4 10             	add    esp,0x10
c001e605:	84 c0                	test   al,al
c001e607:	75 1f                	jne    c001e628 <IDE::detect()+0x164>
c001e609:	83 ec 0c             	sub    esp,0xc
c001e60c:	68 c4 54 02 c0       	push   0xc00254c4
c001e611:	e8 11 eb fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e616:	e9 e0 02 00 00       	jmp    c001e8fb <IDE::detect()+0x437>
c001e61b:	a8 80                	test   al,0x80
c001e61d:	74 21                	je     c001e640 <IDE::detect()+0x17c>
c001e61f:	45                   	inc    ebp
c001e620:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001e626:	7f 1e                	jg     c001e646 <IDE::detect()+0x182>
c001e628:	50                   	push   eax
c001e629:	6a 0c                	push   0xc
c001e62b:	56                   	push   esi
c001e62c:	53                   	push   ebx
c001e62d:	e8 d2 f6 ff ff       	call   c001dd04 <IDE::read(unsigned char, unsigned char)>
c001e632:	83 c4 10             	add    esp,0x10
c001e635:	a8 01                	test   al,0x1
c001e637:	74 e2                	je     c001e61b <IDE::detect()+0x157>
c001e639:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001e63e:	eb 22                	jmp    c001e662 <IDE::detect()+0x19e>
c001e640:	a8 08                	test   al,0x8
c001e642:	74 db                	je     c001e61f <IDE::detect()+0x15b>
c001e644:	eb 17                	jmp    c001e65d <IDE::detect()+0x199>
c001e646:	83 ec 0c             	sub    esp,0xc
c001e649:	6a 32                	push   0x32
c001e64b:	e8 70 85 ff ff       	call   c0016bc0 <milliTenthSleep(unsigned int)>
c001e650:	83 c4 10             	add    esp,0x10
c001e653:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001e659:	75 cd                	jne    c001e628 <IDE::detect()+0x164>
c001e65b:	eb dc                	jmp    c001e639 <IDE::detect()+0x175>
c001e65d:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001e662:	83 ec 0c             	sub    esp,0xc
c001e665:	68 c7 54 02 c0       	push   0xc00254c7
c001e66a:	e8 b8 ea fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e66f:	83 c4 10             	add    esp,0x10
c001e672:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001e677:	74 57                	je     c001e6d0 <IDE::detect()+0x20c>
c001e679:	50                   	push   eax
c001e67a:	6a 04                	push   0x4
c001e67c:	56                   	push   esi
c001e67d:	53                   	push   ebx
c001e67e:	e8 81 f6 ff ff       	call   c001dd04 <IDE::read(unsigned char, unsigned char)>
c001e683:	83 c4 0c             	add    esp,0xc
c001e686:	6a 05                	push   0x5
c001e688:	56                   	push   esi
c001e689:	53                   	push   ebx
c001e68a:	89 c5                	mov    ebp,eax
c001e68c:	e8 73 f6 ff ff       	call   c001dd04 <IDE::read(unsigned char, unsigned char)>
c001e691:	89 e9                	mov    ecx,ebp
c001e693:	83 c4 10             	add    esp,0x10
c001e696:	0f b6 e9             	movzx  ebp,cl
c001e699:	83 fd 14             	cmp    ebp,0x14
c001e69c:	75 04                	jne    c001e6a2 <IDE::detect()+0x1de>
c001e69e:	3c eb                	cmp    al,0xeb
c001e6a0:	74 11                	je     c001e6b3 <IDE::detect()+0x1ef>
c001e6a2:	83 fd 69             	cmp    ebp,0x69
c001e6a5:	0f 85 53 02 00 00    	jne    c001e8fe <IDE::detect()+0x43a>
c001e6ab:	3c 96                	cmp    al,0x96
c001e6ad:	0f 85 4b 02 00 00    	jne    c001e8fe <IDE::detect()+0x43a>
c001e6b3:	68 a1 00 00 00       	push   0xa1
c001e6b8:	6a 07                	push   0x7
c001e6ba:	56                   	push   esi
c001e6bb:	53                   	push   ebx
c001e6bc:	e8 83 f5 ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e6c1:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001e6c8:	e8 f3 84 ff ff       	call   c0016bc0 <milliTenthSleep(unsigned int)>
c001e6cd:	83 c4 10             	add    esp,0x10
c001e6d0:	83 ec 0c             	sub    esp,0xc
c001e6d3:	89 fd                	mov    ebp,edi
c001e6d5:	68 ca 54 02 c0       	push   0xc00254ca
c001e6da:	e8 48 ea fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e6df:	8d 54 24 20          	lea    edx,[esp+0x20]
c001e6e3:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001e6ea:	c1 e5 06             	shl    ebp,0x6
c001e6ed:	52                   	push   edx
c001e6ee:	01 dd                	add    ebp,ebx
c001e6f0:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001e6f4:	6a 00                	push   0x0
c001e6f6:	56                   	push   esi
c001e6f7:	53                   	push   ebx
c001e6f8:	e8 f7 fc ff ff       	call   c001e3f4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001e6fd:	83 c4 14             	add    esp,0x14
c001e700:	68 ce 54 02 c0       	push   0xc00254ce
c001e705:	e8 1d ea fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e70a:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001e70f:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001e716:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001e71d:	89 f0                	mov    eax,esi
c001e71f:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001e725:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001e729:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001e72f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e733:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001e73a:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001e742:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001e749:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001e751:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001e757:	c7 04 24 d2 54 02 c0 	mov    DWORD PTR [esp],0xc00254d2
c001e75e:	e8 c4 e9 fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e763:	83 c4 10             	add    esp,0x10
c001e766:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001e76d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e771:	74 09                	je     c001e77c <IDE::detect()+0x2b8>
c001e773:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001e77a:	eb 07                	jmp    c001e783 <IDE::detect()+0x2bf>
c001e77c:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001e783:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e787:	89 f8                	mov    eax,edi
c001e789:	83 ec 0c             	sub    esp,0xc
c001e78c:	c1 e0 06             	shl    eax,0x6
c001e78f:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001e792:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001e798:	68 d6 54 02 c0       	push   0xc00254d6
c001e79d:	e8 85 e9 fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e7a2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e7a6:	89 e8                	mov    eax,ebp
c001e7a8:	83 c4 10             	add    esp,0x10
c001e7ab:	8d 6a 28             	lea    ebp,[edx+0x28]
c001e7ae:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001e7b1:	83 c2 02             	add    edx,0x2
c001e7b4:	83 c0 02             	add    eax,0x2
c001e7b7:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001e7bd:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001e7c0:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001e7c6:	39 d5                	cmp    ebp,edx
c001e7c8:	75 e4                	jne    c001e7ae <IDE::detect()+0x2ea>
c001e7ca:	89 f8                	mov    eax,edi
c001e7cc:	c1 e0 06             	shl    eax,0x6
c001e7cf:	01 d8                	add    eax,ebx
c001e7d1:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001e7d8:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001e7df:	c1 ea 09             	shr    edx,0x9
c001e7e2:	83 e2 01             	and    edx,0x1
c001e7e5:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001e7ec:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001e7f2:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001e7f6:	74 0c                	je     c001e804 <IDE::detect()+0x340>
c001e7f8:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001e801:	0f 95 c2             	setne  dl
c001e804:	89 fd                	mov    ebp,edi
c001e806:	83 ec 0c             	sub    esp,0xc
c001e809:	c1 e5 06             	shl    ebp,0x6
c001e80c:	01 dd                	add    ebp,ebx
c001e80e:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001e814:	68 da 54 02 c0       	push   0xc00254da
c001e819:	e8 09 e9 fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e81e:	83 c4 10             	add    esp,0x10
c001e821:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001e826:	75 66                	jne    c001e88e <IDE::detect()+0x3ca>
c001e828:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001e82f:	0f 84 b8 00 00 00    	je     c001e8ed <IDE::detect()+0x429>
c001e835:	83 ec 0c             	sub    esp,0xc
c001e838:	68 de 54 02 c0       	push   0xc00254de
c001e83d:	e8 e5 e8 fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e842:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001e849:	e8 22 12 ff ff       	call   c000fa70 <malloc>
c001e84e:	89 04 24             	mov    DWORD PTR [esp],eax
c001e851:	89 c5                	mov    ebp,eax
c001e853:	e8 44 05 00 00       	call   c001ed9c <ATA::ATA()>
c001e858:	c7 04 24 e2 54 02 c0 	mov    DWORD PTR [esp],0xc00254e2
c001e85f:	e8 c3 e8 fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e864:	59                   	pop    ecx
c001e865:	58                   	pop    eax
c001e866:	55                   	push   ebp
c001e867:	53                   	push   ebx
c001e868:	e8 2b b1 fe ff       	call   c0009998 <Device::addChild(Device*)>
c001e86d:	c7 04 24 e7 54 02 c0 	mov    DWORD PTR [esp],0xc00254e7
c001e874:	e8 ae e8 fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e879:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e87c:	53                   	push   ebx
c001e87d:	57                   	push   edi
c001e87e:	6a 00                	push   0x0
c001e880:	55                   	push   ebp
c001e881:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e884:	83 c4 14             	add    esp,0x14
c001e887:	68 ec 54 02 c0       	push   0xc00254ec
c001e88c:	eb 57                	jmp    c001e8e5 <IDE::detect()+0x421>
c001e88e:	83 ec 0c             	sub    esp,0xc
c001e891:	68 f1 54 02 c0       	push   0xc00254f1
c001e896:	e8 8c e8 fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e89b:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001e8a2:	e8 c9 11 ff ff       	call   c000fa70 <malloc>
c001e8a7:	89 04 24             	mov    DWORD PTR [esp],eax
c001e8aa:	89 c5                	mov    ebp,eax
c001e8ac:	e8 b1 0c 00 00       	call   c001f562 <ATAPI::ATAPI()>
c001e8b1:	c7 04 24 f7 54 02 c0 	mov    DWORD PTR [esp],0xc00254f7
c001e8b8:	e8 6a e8 fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e8bd:	58                   	pop    eax
c001e8be:	5a                   	pop    edx
c001e8bf:	55                   	push   ebp
c001e8c0:	53                   	push   ebx
c001e8c1:	e8 d2 b0 fe ff       	call   c0009998 <Device::addChild(Device*)>
c001e8c6:	c7 04 24 fe 54 02 c0 	mov    DWORD PTR [esp],0xc00254fe
c001e8cd:	e8 55 e8 fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e8d2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e8d5:	53                   	push   ebx
c001e8d6:	57                   	push   edi
c001e8d7:	6a 00                	push   0x0
c001e8d9:	55                   	push   ebp
c001e8da:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e8dd:	83 c4 14             	add    esp,0x14
c001e8e0:	68 05 55 02 c0       	push   0xc0025505
c001e8e5:	e8 3d e8 fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e8ea:	83 c4 10             	add    esp,0x10
c001e8ed:	83 ec 0c             	sub    esp,0xc
c001e8f0:	47                   	inc    edi
c001e8f1:	68 0c 55 02 c0       	push   0xc002550c
c001e8f6:	e8 2c e8 fe ff       	call   c000d127 <KeSetBootMessage(char const*)>
c001e8fb:	83 c4 10             	add    esp,0x10
c001e8fe:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001e902:	74 0c                	je     c001e910 <IDE::detect()+0x44c>
c001e904:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001e90b:	e9 19 fc ff ff       	jmp    c001e529 <IDE::detect()+0x65>
c001e910:	4e                   	dec    esi
c001e911:	74 0a                	je     c001e91d <IDE::detect()+0x459>
c001e913:	be 01 00 00 00       	mov    esi,0x1
c001e918:	e9 f5 fb ff ff       	jmp    c001e512 <IDE::detect()+0x4e>
c001e91d:	81 c4 1c 02 00 00    	add    esp,0x21c
c001e923:	5b                   	pop    ebx
c001e924:	5e                   	pop    esi
c001e925:	5f                   	pop    edi
c001e926:	5d                   	pop    ebp
c001e927:	c3                   	ret    

c001e928 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001e928:	55                   	push   ebp
c001e929:	57                   	push   edi
c001e92a:	56                   	push   esi
c001e92b:	53                   	push   ebx
c001e92c:	83 ec 1c             	sub    esp,0x1c
c001e92f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e933:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e937:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001e93b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e93f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e943:	88 c3                	mov    bl,al
c001e945:	25 ff 00 00 00       	and    eax,0xff
c001e94a:	0f 84 88 00 00 00    	je     c001e9d8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e950:	83 ec 0c             	sub    esp,0xc
c001e953:	89 c7                	mov    edi,eax
c001e955:	68 10 55 02 c0       	push   0xc0025510
c001e95a:	e8 ef 85 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e95f:	83 c4 10             	add    esp,0x10
c001e962:	83 ff 01             	cmp    edi,0x1
c001e965:	74 6b                	je     c001e9d2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001e967:	83 ff 02             	cmp    edi,0x2
c001e96a:	75 58                	jne    c001e9c4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001e96c:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001e971:	50                   	push   eax
c001e972:	6a 01                	push   0x1
c001e974:	01 ff                	add    edi,edi
c001e976:	09 fe                	or     esi,edi
c001e978:	89 f0                	mov    eax,esi
c001e97a:	0f b6 f0             	movzx  esi,al
c001e97d:	c1 e6 06             	shl    esi,0x6
c001e980:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001e988:	50                   	push   eax
c001e989:	55                   	push   ebp
c001e98a:	e8 75 f3 ff ff       	call   c001dd04 <IDE::read(unsigned char, unsigned char)>
c001e98f:	83 c4 10             	add    esp,0x10
c001e992:	a8 01                	test   al,0x1
c001e994:	74 02                	je     c001e998 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001e996:	b3 07                	mov    bl,0x7
c001e998:	a8 02                	test   al,0x2
c001e99a:	74 02                	je     c001e99e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001e99c:	b3 03                	mov    bl,0x3
c001e99e:	a8 04                	test   al,0x4
c001e9a0:	74 02                	je     c001e9a4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001e9a2:	b3 14                	mov    bl,0x14
c001e9a4:	a8 08                	test   al,0x8
c001e9a6:	74 02                	je     c001e9aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001e9a8:	b3 03                	mov    bl,0x3
c001e9aa:	a8 10                	test   al,0x10
c001e9ac:	74 02                	je     c001e9b0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001e9ae:	b3 15                	mov    bl,0x15
c001e9b0:	a8 20                	test   al,0x20
c001e9b2:	74 02                	je     c001e9b6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001e9b4:	b3 03                	mov    bl,0x3
c001e9b6:	a8 40                	test   al,0x40
c001e9b8:	74 02                	je     c001e9bc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001e9ba:	b3 16                	mov    bl,0x16
c001e9bc:	a8 80                	test   al,0x80
c001e9be:	74 18                	je     c001e9d8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e9c0:	b3 0d                	mov    bl,0xd
c001e9c2:	eb 14                	jmp    c001e9d8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e9c4:	83 ff 03             	cmp    edi,0x3
c001e9c7:	74 0d                	je     c001e9d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001e9c9:	83 ff 04             	cmp    edi,0x4
c001e9cc:	75 0a                	jne    c001e9d8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e9ce:	b3 08                	mov    bl,0x8
c001e9d0:	eb 06                	jmp    c001e9d8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e9d2:	b3 13                	mov    bl,0x13
c001e9d4:	eb 02                	jmp    c001e9d8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e9d6:	b3 17                	mov    bl,0x17
c001e9d8:	83 c4 1c             	add    esp,0x1c
c001e9db:	88 d8                	mov    al,bl
c001e9dd:	5b                   	pop    ebx
c001e9de:	5e                   	pop    esi
c001e9df:	5f                   	pop    edi
c001e9e0:	5d                   	pop    ebp
c001e9e1:	c3                   	ret    

c001e9e2 <IDE::polling(unsigned char, unsigned int)>:
c001e9e2:	57                   	push   edi
c001e9e3:	56                   	push   esi
c001e9e4:	53                   	push   ebx
c001e9e5:	bb 04 00 00 00       	mov    ebx,0x4
c001e9ea:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001e9ee:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e9f3:	52                   	push   edx
c001e9f4:	6a 0c                	push   0xc
c001e9f6:	56                   	push   esi
c001e9f7:	57                   	push   edi
c001e9f8:	e8 07 f3 ff ff       	call   c001dd04 <IDE::read(unsigned char, unsigned char)>
c001e9fd:	83 c4 10             	add    esp,0x10
c001ea00:	4b                   	dec    ebx
c001ea01:	75 f0                	jne    c001e9f3 <IDE::polling(unsigned char, unsigned int)+0x11>
c001ea03:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ea08:	50                   	push   eax
c001ea09:	6a 0c                	push   0xc
c001ea0b:	56                   	push   esi
c001ea0c:	57                   	push   edi
c001ea0d:	e8 f2 f2 ff ff       	call   c001dd04 <IDE::read(unsigned char, unsigned char)>
c001ea12:	83 c4 10             	add    esp,0x10
c001ea15:	a8 01                	test   al,0x1
c001ea17:	75 17                	jne    c001ea30 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001ea19:	a8 20                	test   al,0x20
c001ea1b:	75 0f                	jne    c001ea2c <IDE::polling(unsigned char, unsigned int)+0x4a>
c001ea1d:	4b                   	dec    ebx
c001ea1e:	74 10                	je     c001ea30 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001ea20:	a8 80                	test   al,0x80
c001ea22:	75 e4                	jne    c001ea08 <IDE::polling(unsigned char, unsigned int)+0x26>
c001ea24:	a8 08                	test   al,0x8
c001ea26:	74 e0                	je     c001ea08 <IDE::polling(unsigned char, unsigned int)+0x26>
c001ea28:	31 c0                	xor    eax,eax
c001ea2a:	eb 06                	jmp    c001ea32 <IDE::polling(unsigned char, unsigned int)+0x50>
c001ea2c:	b0 01                	mov    al,0x1
c001ea2e:	eb 02                	jmp    c001ea32 <IDE::polling(unsigned char, unsigned int)+0x50>
c001ea30:	b0 02                	mov    al,0x2
c001ea32:	5b                   	pop    ebx
c001ea33:	5e                   	pop    esi
c001ea34:	5f                   	pop    edi
c001ea35:	c3                   	ret    

c001ea36 <SATABus::close(int, int, void*)>:
c001ea36:	31 c0                	xor    eax,eax
c001ea38:	c3                   	ret    
c001ea39:	90                   	nop

c001ea3a <SATABus::detect()>:
c001ea3a:	c3                   	ret    
c001ea3b:	90                   	nop

c001ea3c <SATABus::SATABus()>:
c001ea3c:	83 ec 0c             	sub    esp,0xc
c001ea3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea43:	83 ec 08             	sub    esp,0x8
c001ea46:	68 48 55 02 c0       	push   0xc0025548
c001ea4b:	50                   	push   eax
c001ea4c:	e8 9f b2 fe ff       	call   c0009cf0 <HardDiskController::HardDiskController(char const*)>
c001ea51:	83 c4 10             	add    esp,0x10
c001ea54:	ba 74 55 02 c0       	mov    edx,0xc0025574
c001ea59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea5d:	89 10                	mov    DWORD PTR [eax],edx
c001ea5f:	83 ec 0c             	sub    esp,0xc
c001ea62:	6a 50                	push   0x50
c001ea64:	e8 25 16 ff ff       	call   c001008e <Phys::allocateContiguousPages(int)>
c001ea69:	83 c4 10             	add    esp,0x10
c001ea6c:	89 c2                	mov    edx,eax
c001ea6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea72:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ea78:	83 ec 0c             	sub    esp,0xc
c001ea7b:	6a 50                	push   0x50
c001ea7d:	e8 f3 46 ff ff       	call   c0013175 <Virt::allocateKernelVirtualPages(int)>
c001ea82:	83 c4 10             	add    esp,0x10
c001ea85:	89 c2                	mov    edx,eax
c001ea87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea8b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ea91:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c001ea96:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea9a:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001eaa0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eaa4:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001eaaa:	83 ec 0c             	sub    esp,0xc
c001eaad:	6a 03                	push   0x3
c001eaaf:	6a 50                	push   0x50
c001eab1:	51                   	push   ecx
c001eab2:	52                   	push   edx
c001eab3:	50                   	push   eax
c001eab4:	e8 8f 4f ff ff       	call   c0013a48 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eab9:	83 c4 20             	add    esp,0x20
c001eabc:	90                   	nop
c001eabd:	83 c4 0c             	add    esp,0xc
c001eac0:	c3                   	ret    
c001eac1:	90                   	nop

c001eac2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001eac2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eac6:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001eac9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001eacc:	09 c2                	or     edx,eax
c001eace:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ead2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ead8:	8b 08                	mov    ecx,DWORD PTR [eax]
c001eada:	31 c0                	xor    eax,eax
c001eadc:	c1 e9 08             	shr    ecx,0x8
c001eadf:	83 e1 0f             	and    ecx,0xf
c001eae2:	39 c8                	cmp    eax,ecx
c001eae4:	74 0a                	je     c001eaf0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001eae6:	f6 c2 01             	test   dl,0x1
c001eae9:	74 08                	je     c001eaf3 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001eaeb:	d1 ea                	shr    edx,1
c001eaed:	40                   	inc    eax
c001eaee:	eb f2                	jmp    c001eae2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001eaf0:	83 c8 ff             	or     eax,0xffffffff
c001eaf3:	c3                   	ret    

c001eaf4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001eaf4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001eaf8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001eafb:	89 c2                	mov    edx,eax
c001eafd:	c1 ea 08             	shr    edx,0x8
c001eb00:	83 e2 0f             	and    edx,0xf
c001eb03:	4a                   	dec    edx
c001eb04:	75 32                	jne    c001eb38 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001eb06:	83 e0 0f             	and    eax,0xf
c001eb09:	83 f8 03             	cmp    eax,0x3
c001eb0c:	75 2a                	jne    c001eb38 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001eb0e:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001eb11:	b8 02 00 00 00       	mov    eax,0x2
c001eb16:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001eb1c:	74 1c                	je     c001eb3a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001eb1e:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001eb24:	b8 04 00 00 00       	mov    eax,0x4
c001eb29:	74 0f                	je     c001eb3a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001eb2b:	31 c0                	xor    eax,eax
c001eb2d:	83 fa 03             	cmp    edx,0x3
c001eb30:	0f 94 c0             	sete   al
c001eb33:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001eb37:	c3                   	ret    
c001eb38:	31 c0                	xor    eax,eax
c001eb3a:	c3                   	ret    
c001eb3b:	90                   	nop

c001eb3c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001eb3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eb40:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001eb43:	0f ba e2 0f          	bt     edx,0xf
c001eb47:	72 f7                	jb     c001eb40 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001eb49:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001eb4c:	83 ca 10             	or     edx,0x10
c001eb4f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001eb52:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001eb55:	83 ca 01             	or     edx,0x1
c001eb58:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001eb5b:	c3                   	ret    

c001eb5c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001eb5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eb60:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001eb63:	83 e2 fe             	and    edx,0xfffffffe
c001eb66:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001eb69:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001eb6c:	83 e2 ef             	and    edx,0xffffffef
c001eb6f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001eb72:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001eb75:	0f ba e2 0e          	bt     edx,0xe
c001eb79:	72 f7                	jb     c001eb72 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001eb7b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001eb7e:	0f ba e2 0f          	bt     edx,0xf
c001eb82:	72 ee                	jb     c001eb72 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001eb84:	c3                   	ret    
c001eb85:	90                   	nop

c001eb86 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001eb86:	55                   	push   ebp
c001eb87:	57                   	push   edi
c001eb88:	56                   	push   esi
c001eb89:	53                   	push   ebx
c001eb8a:	83 ec 1c             	sub    esp,0x1c
c001eb8d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001eb91:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001eb95:	53                   	push   ebx
c001eb96:	57                   	push   edi
c001eb97:	e8 c0 ff ff ff       	call   c001eb5c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001eb9c:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001eba0:	83 ec 0c             	sub    esp,0xc
c001eba3:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001eba9:	c1 e5 0a             	shl    ebp,0xa
c001ebac:	01 e8                	add    eax,ebp
c001ebae:	89 03                	mov    DWORD PTR [ebx],eax
c001ebb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ebb2:	68 00 04 00 00       	push   0x400
c001ebb7:	6a 00                	push   0x0
c001ebb9:	50                   	push   eax
c001ebba:	e8 31 19 fe ff       	call   c00004f0 <memset>
c001ebbf:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001ebc5:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001ebc9:	83 c4 1c             	add    esp,0x1c
c001ebcc:	01 e8                	add    eax,ebp
c001ebce:	89 03                	mov    DWORD PTR [ebx],eax
c001ebd0:	c1 e6 08             	shl    esi,0x8
c001ebd3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ebda:	81 c6 00 80 00 00    	add    esi,0x8000
c001ebe0:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001ebe6:	01 f0                	add    eax,esi
c001ebe8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ebeb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001ebee:	68 00 01 00 00       	push   0x100
c001ebf3:	6a 00                	push   0x0
c001ebf5:	50                   	push   eax
c001ebf6:	e8 f5 18 fe ff       	call   c00004f0 <memset>
c001ebfb:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001ec01:	31 d2                	xor    edx,edx
c001ec03:	01 f0                	add    eax,esi
c001ec05:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ec08:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ec0f:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001ec15:	01 ee                	add    esi,ebp
c001ec17:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001ec1b:	83 c4 10             	add    esp,0x10
c001ec1e:	c1 e5 0d             	shl    ebp,0xd
c001ec21:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001ec27:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001ec2d:	83 c6 20             	add    esi,0x20
c001ec30:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ec34:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001ec3a:	01 e8                	add    eax,ebp
c001ec3c:	01 d0                	add    eax,edx
c001ec3e:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001ec41:	52                   	push   edx
c001ec42:	68 00 01 00 00       	push   0x100
c001ec47:	6a 00                	push   0x0
c001ec49:	50                   	push   eax
c001ec4a:	e8 a1 18 fe ff       	call   c00004f0 <memset>
c001ec4f:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001ec55:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001ec5c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ec60:	83 c4 10             	add    esp,0x10
c001ec63:	01 e8                	add    eax,ebp
c001ec65:	01 d0                	add    eax,edx
c001ec67:	81 c2 00 01 00 00    	add    edx,0x100
c001ec6d:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001ec70:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001ec76:	75 af                	jne    c001ec27 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001ec78:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001ec7f:	50                   	push   eax
c001ec80:	50                   	push   eax
c001ec81:	53                   	push   ebx
c001ec82:	57                   	push   edi
c001ec83:	e8 b4 fe ff ff       	call   c001eb3c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001ec88:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001ec8f:	83 c4 2c             	add    esp,0x2c
c001ec92:	5b                   	pop    ebx
c001ec93:	5e                   	pop    esi
c001ec94:	5f                   	pop    edi
c001ec95:	5d                   	pop    ebp
c001ec96:	c3                   	ret    
c001ec97:	90                   	nop

c001ec98 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001ec98:	55                   	push   ebp
c001ec99:	57                   	push   edi
c001ec9a:	56                   	push   esi
c001ec9b:	53                   	push   ebx
c001ec9c:	31 db                	xor    ebx,ebx
c001ec9e:	83 ec 0c             	sub    esp,0xc
c001eca1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001eca5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001eca9:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001ecac:	f7 c7 01 00 00 00    	test   edi,0x1
c001ecb2:	74 7a                	je     c001ed2e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001ecb4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ecb8:	89 d8                	mov    eax,ebx
c001ecba:	c1 e0 07             	shl    eax,0x7
c001ecbd:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001ecc4:	55                   	push   ebp
c001ecc5:	56                   	push   esi
c001ecc6:	e8 29 fe ff ff       	call   c001eaf4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001eccb:	5a                   	pop    edx
c001eccc:	59                   	pop    ecx
c001eccd:	83 f8 01             	cmp    eax,0x1
c001ecd0:	75 21                	jne    c001ecf3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001ecd2:	50                   	push   eax
c001ecd3:	53                   	push   ebx
c001ecd4:	55                   	push   ebp
c001ecd5:	56                   	push   esi
c001ecd6:	e8 ab fe ff ff       	call   c001eb86 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ecdb:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001ece2:	e8 89 0d ff ff       	call   c000fa70 <malloc>
c001ece7:	89 04 24             	mov    DWORD PTR [esp],eax
c001ecea:	89 c5                	mov    ebp,eax
c001ecec:	e8 37 0f 00 00       	call   c001fc28 <SATA::SATA()>
c001ecf1:	eb 24                	jmp    c001ed17 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001ecf3:	83 f8 04             	cmp    eax,0x4
c001ecf6:	75 36                	jne    c001ed2e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001ecf8:	51                   	push   ecx
c001ecf9:	53                   	push   ebx
c001ecfa:	55                   	push   ebp
c001ecfb:	56                   	push   esi
c001ecfc:	e8 85 fe ff ff       	call   c001eb86 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ed01:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001ed08:	e8 63 0d ff ff       	call   c000fa70 <malloc>
c001ed0d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed10:	89 c5                	mov    ebp,eax
c001ed12:	e8 a7 12 00 00       	call   c001ffbe <SATAPI::SATAPI()>
c001ed17:	58                   	pop    eax
c001ed18:	5a                   	pop    edx
c001ed19:	55                   	push   ebp
c001ed1a:	56                   	push   esi
c001ed1b:	e8 78 ac fe ff       	call   c0009998 <Device::addChild(Device*)>
c001ed20:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ed23:	56                   	push   esi
c001ed24:	6a 00                	push   0x0
c001ed26:	53                   	push   ebx
c001ed27:	55                   	push   ebp
c001ed28:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ed2b:	83 c4 20             	add    esp,0x20
c001ed2e:	d1 ef                	shr    edi,1
c001ed30:	43                   	inc    ebx
c001ed31:	83 fb 20             	cmp    ebx,0x20
c001ed34:	0f 85 72 ff ff ff    	jne    c001ecac <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001ed3a:	83 c4 0c             	add    esp,0xc
c001ed3d:	5b                   	pop    ebx
c001ed3e:	5e                   	pop    esi
c001ed3f:	5f                   	pop    edi
c001ed40:	5d                   	pop    ebp
c001ed41:	c3                   	ret    

c001ed42 <SATABus::open(int, int, void*)>:
c001ed42:	53                   	push   ebx
c001ed43:	83 ec 08             	sub    esp,0x8
c001ed46:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ed4a:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001ed50:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001ed56:	e8 dd 79 ff ff       	call   c0016738 <KeDisablePreemption()>
c001ed5b:	52                   	push   edx
c001ed5c:	52                   	push   edx
c001ed5d:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001ed63:	53                   	push   ebx
c001ed64:	e8 2f ff ff ff       	call   c001ec98 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001ed69:	e8 f2 79 ff ff       	call   c0016760 <KeRestorePreemption()>
c001ed6e:	83 c4 18             	add    esp,0x18
c001ed71:	31 c0                	xor    eax,eax
c001ed73:	5b                   	pop    ebx
c001ed74:	c3                   	ret    
c001ed75:	90                   	nop

c001ed76 <ATA::close(int, int, void*)>:
c001ed76:	83 ec 0c             	sub    esp,0xc
c001ed79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed7d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ed83:	85 c0                	test   eax,eax
c001ed85:	74 0c                	je     c001ed93 <ATA::close(int, int, void*)+0x1d>
c001ed87:	8b 10                	mov    edx,DWORD PTR [eax]
c001ed89:	83 ec 0c             	sub    esp,0xc
c001ed8c:	50                   	push   eax
c001ed8d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ed90:	83 c4 10             	add    esp,0x10
c001ed93:	31 c0                	xor    eax,eax
c001ed95:	83 c4 0c             	add    esp,0xc
c001ed98:	c3                   	ret    
c001ed99:	90                   	nop

c001ed9a <ATA::powerSaving(PowerSavingLevel)>:
c001ed9a:	c3                   	ret    
c001ed9b:	90                   	nop

c001ed9c <ATA::ATA()>:
c001ed9c:	83 ec 0c             	sub    esp,0xc
c001ed9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eda3:	83 ec 04             	sub    esp,0x4
c001eda6:	68 00 02 00 00       	push   0x200
c001edab:	68 f5 56 02 c0       	push   0xc00256f5
c001edb0:	50                   	push   eax
c001edb1:	e8 c4 af fe ff       	call   c0009d7a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001edb6:	83 c4 10             	add    esp,0x10
c001edb9:	ba 5c 56 02 c0       	mov    edx,0xc002565c
c001edbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edc2:	89 10                	mov    DWORD PTR [eax],edx
c001edc4:	90                   	nop
c001edc5:	83 c4 0c             	add    esp,0xc
c001edc8:	c3                   	ret    
c001edc9:	90                   	nop

c001edca <ATA::flush(bool)>:
c001edca:	53                   	push   ebx
c001edcb:	83 ec 08             	sub    esp,0x8
c001edce:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001edd3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001edd7:	83 f8 01             	cmp    eax,0x1
c001edda:	19 c0                	sbb    eax,eax
c001eddc:	83 e0 fd             	and    eax,0xfffffffd
c001eddf:	05 ea 00 00 00       	add    eax,0xea
c001ede4:	50                   	push   eax
c001ede5:	6a 07                	push   0x7
c001ede7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001edee:	50                   	push   eax
c001edef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001edf5:	e8 4a ee ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001edfa:	83 c4 0c             	add    esp,0xc
c001edfd:	6a 00                	push   0x0
c001edff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ee06:	50                   	push   eax
c001ee07:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ee0d:	e8 d0 fb ff ff       	call   c001e9e2 <IDE::polling(unsigned char, unsigned int)>
c001ee12:	83 c4 18             	add    esp,0x18
c001ee15:	5b                   	pop    ebx
c001ee16:	c3                   	ret    
c001ee17:	90                   	nop

c001ee18 <ATA::readyForCommand()>:
c001ee18:	56                   	push   esi
c001ee19:	53                   	push   ebx
c001ee1a:	53                   	push   ebx
c001ee1b:	31 db                	xor    ebx,ebx
c001ee1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ee21:	51                   	push   ecx
c001ee22:	6a 0c                	push   0xc
c001ee24:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ee2b:	50                   	push   eax
c001ee2c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ee32:	e8 cd ee ff ff       	call   c001dd04 <IDE::read(unsigned char, unsigned char)>
c001ee37:	83 c4 10             	add    esp,0x10
c001ee3a:	a8 88                	test   al,0x88
c001ee3c:	74 1f                	je     c001ee5d <ATA::readyForCommand()+0x45>
c001ee3e:	43                   	inc    ebx
c001ee3f:	83 fb 63             	cmp    ebx,0x63
c001ee42:	7e dd                	jle    c001ee21 <ATA::readyForCommand()+0x9>
c001ee44:	83 ec 0c             	sub    esp,0xc
c001ee47:	6a 0a                	push   0xa
c001ee49:	e8 72 7d ff ff       	call   c0016bc0 <milliTenthSleep(unsigned int)>
c001ee4e:	83 c4 10             	add    esp,0x10
c001ee51:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001ee57:	75 c8                	jne    c001ee21 <ATA::readyForCommand()+0x9>
c001ee59:	31 c0                	xor    eax,eax
c001ee5b:	eb 02                	jmp    c001ee5f <ATA::readyForCommand()+0x47>
c001ee5d:	b0 01                	mov    al,0x1
c001ee5f:	5a                   	pop    edx
c001ee60:	5b                   	pop    ebx
c001ee61:	5e                   	pop    esi
c001ee62:	c3                   	ret    
c001ee63:	90                   	nop

c001ee64 <ATA::access(unsigned long long, int, void*, bool)>:
c001ee64:	55                   	push   ebp
c001ee65:	57                   	push   edi
c001ee66:	56                   	push   esi
c001ee67:	53                   	push   ebx
c001ee68:	83 ec 2c             	sub    esp,0x2c
c001ee6b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ee6f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ee73:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ee77:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ee7b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ee7f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ee83:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001ee87:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ee8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ee91:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ee97:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ee9b:	c1 e0 06             	shl    eax,0x6
c001ee9e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001eea6:	74 5b                	je     c001ef03 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001eea8:	89 fa                	mov    edx,edi
c001eeaa:	89 f0                	mov    eax,esi
c001eeac:	c1 ea 1c             	shr    edx,0x1c
c001eeaf:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001eeb3:	89 d1                	mov    ecx,edx
c001eeb5:	09 c1                	or     ecx,eax
c001eeb7:	74 25                	je     c001eede <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001eeb9:	31 ed                	xor    ebp,ebp
c001eebb:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001eec2:	89 fa                	mov    edx,edi
c001eec4:	89 f0                	mov    eax,esi
c001eec6:	0f ad d0             	shrd   eax,edx,cl
c001eec9:	d3 ea                	shr    edx,cl
c001eecb:	f6 c1 20             	test   cl,0x20
c001eece:	74 02                	je     c001eed2 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001eed0:	89 d0                	mov    eax,edx
c001eed2:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001eed6:	45                   	inc    ebp
c001eed7:	83 fd 06             	cmp    ebp,0x6
c001eeda:	75 df                	jne    c001eebb <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001eedc:	eb 71                	jmp    c001ef4f <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001eede:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001eee3:	89 f0                	mov    eax,esi
c001eee5:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001eeec:	0f ac f8 10          	shrd   eax,edi,0x10
c001eef0:	bf 01 00 00 00       	mov    edi,0x1
c001eef5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001eef9:	c1 ee 18             	shr    esi,0x18
c001eefc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ef01:	eb 53                	jmp    c001ef56 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001ef03:	6a 00                	push   0x0
c001ef05:	6a 3f                	push   0x3f
c001ef07:	57                   	push   edi
c001ef08:	56                   	push   esi
c001ef09:	e8 36 25 00 00       	call   c0021444 <__umoddi3>
c001ef0e:	83 c4 10             	add    esp,0x10
c001ef11:	40                   	inc    eax
c001ef12:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001ef16:	6a 00                	push   0x0
c001ef18:	68 f0 03 00 00       	push   0x3f0
c001ef1d:	57                   	push   edi
c001ef1e:	56                   	push   esi
c001ef1f:	e8 20 24 00 00       	call   c0021344 <__udivdi3>
c001ef24:	83 c4 10             	add    esp,0x10
c001ef27:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001ef2c:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ef33:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ef38:	6a 00                	push   0x0
c001ef3a:	6a 3f                	push   0x3f
c001ef3c:	57                   	push   edi
c001ef3d:	31 ff                	xor    edi,edi
c001ef3f:	56                   	push   esi
c001ef40:	e8 ff 23 00 00       	call   c0021344 <__udivdi3>
c001ef45:	83 c4 10             	add    esp,0x10
c001ef48:	83 e0 0f             	and    eax,0xf
c001ef4b:	89 c6                	mov    esi,eax
c001ef4d:	eb 07                	jmp    c001ef56 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001ef4f:	31 f6                	xor    esi,esi
c001ef51:	bf 02 00 00 00       	mov    edi,0x2
c001ef56:	55                   	push   ebp
c001ef57:	6a 00                	push   0x0
c001ef59:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ef60:	50                   	push   eax
c001ef61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ef65:	e8 e8 ee ff ff       	call   c001de52 <IDE::enableIRQs(unsigned char, bool)>
c001ef6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ef6d:	e8 a6 fe ff ff       	call   c001ee18 <ATA::readyForCommand()>
c001ef72:	83 c4 10             	add    esp,0x10
c001ef75:	84 c0                	test   al,al
c001ef77:	75 0a                	jne    c001ef83 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001ef79:	be 01 00 00 00       	mov    esi,0x1
c001ef7e:	e9 df 02 00 00       	jmp    c001f262 <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001ef83:	fa                   	cli    
c001ef84:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001ef8a:	f7 c7 03 00 00 00    	test   edi,0x3
c001ef90:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ef96:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ef9c:	75 0a                	jne    c001efa8 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001ef9e:	c1 e0 04             	shl    eax,0x4
c001efa1:	09 c6                	or     esi,eax
c001efa3:	83 ce a0             	or     esi,0xffffffa0
c001efa6:	eb 08                	jmp    c001efb0 <ATA::access(unsigned long long, int, void*, bool)+0x14c>
c001efa8:	c1 e0 04             	shl    eax,0x4
c001efab:	09 c6                	or     esi,eax
c001efad:	83 ce e0             	or     esi,0xffffffe0
c001efb0:	89 f0                	mov    eax,esi
c001efb2:	0f b6 d2             	movzx  edx,dl
c001efb5:	0f b6 f0             	movzx  esi,al
c001efb8:	56                   	push   esi
c001efb9:	6a 06                	push   0x6
c001efbb:	52                   	push   edx
c001efbc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001efc2:	e8 7d ec ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001efc7:	83 c4 10             	add    esp,0x10
c001efca:	6a 00                	push   0x0
c001efcc:	6a 01                	push   0x1
c001efce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001efd5:	50                   	push   eax
c001efd6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001efdc:	e8 63 ec ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001efe1:	89 f8                	mov    eax,edi
c001efe3:	83 c4 10             	add    esp,0x10
c001efe6:	0f b6 f0             	movzx  esi,al
c001efe9:	83 fe 02             	cmp    esi,0x2
c001efec:	75 6e                	jne    c001f05c <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001efee:	6a 00                	push   0x0
c001eff0:	6a 08                	push   0x8
c001eff2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eff9:	50                   	push   eax
c001effa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f000:	e8 3f ec ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f005:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001f00a:	50                   	push   eax
c001f00b:	6a 09                	push   0x9
c001f00d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f014:	50                   	push   eax
c001f015:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f01b:	e8 24 ec ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f020:	83 c4 20             	add    esp,0x20
c001f023:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001f028:	50                   	push   eax
c001f029:	6a 0a                	push   0xa
c001f02b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f032:	50                   	push   eax
c001f033:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f039:	e8 06 ec ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f03e:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001f043:	50                   	push   eax
c001f044:	6a 0b                	push   0xb
c001f046:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f04d:	50                   	push   eax
c001f04e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f054:	e8 eb eb ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f059:	83 c4 20             	add    esp,0x20
c001f05c:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001f061:	50                   	push   eax
c001f062:	6a 02                	push   0x2
c001f064:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f06b:	50                   	push   eax
c001f06c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f072:	e8 cd eb ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f077:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001f07c:	50                   	push   eax
c001f07d:	6a 03                	push   0x3
c001f07f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f086:	50                   	push   eax
c001f087:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f08d:	e8 b2 eb ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f092:	83 c4 20             	add    esp,0x20
c001f095:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001f09a:	50                   	push   eax
c001f09b:	6a 04                	push   0x4
c001f09d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f0a4:	50                   	push   eax
c001f0a5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f0ab:	e8 94 eb ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f0b0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f0b5:	50                   	push   eax
c001f0b6:	6a 05                	push   0x5
c001f0b8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f0bf:	50                   	push   eax
c001f0c0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f0c6:	e8 79 eb ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f0cb:	83 c4 20             	add    esp,0x20
c001f0ce:	83 fe 02             	cmp    esi,0x2
c001f0d1:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001f0d6:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001f0db:	85 c9                	test   ecx,ecx
c001f0dd:	74 07                	je     c001f0e6 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001f0df:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f0e4:	75 45                	jne    c001f12b <ATA::access(unsigned long long, int, void*, bool)+0x2c7>
c001f0e6:	89 f8                	mov    eax,edi
c001f0e8:	0f b6 f8             	movzx  edi,al
c001f0eb:	31 c0                	xor    eax,eax
c001f0ed:	4f                   	dec    edi
c001f0ee:	0f 94 c0             	sete   al
c001f0f1:	89 c6                	mov    esi,eax
c001f0f3:	75 0c                	jne    c001f101 <ATA::access(unsigned long long, int, void*, bool)+0x29d>
c001f0f5:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f0fa:	b8 30 00 00 00       	mov    eax,0x30
c001f0ff:	75 2f                	jne    c001f130 <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001f101:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f105:	83 f2 01             	xor    edx,0x1
c001f108:	85 c9                	test   ecx,ecx
c001f10a:	74 09                	je     c001f115 <ATA::access(unsigned long long, int, void*, bool)+0x2b1>
c001f10c:	84 d2                	test   dl,dl
c001f10e:	b8 24 00 00 00       	mov    eax,0x24
c001f113:	75 1b                	jne    c001f130 <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001f115:	85 f6                	test   esi,esi
c001f117:	0f 84 5c fe ff ff    	je     c001ef79 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001f11d:	84 d2                	test   dl,dl
c001f11f:	b8 20 00 00 00       	mov    eax,0x20
c001f124:	75 0a                	jne    c001f130 <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001f126:	e9 4e fe ff ff       	jmp    c001ef79 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001f12b:	b8 34 00 00 00       	mov    eax,0x34
c001f130:	50                   	push   eax
c001f131:	6a 07                	push   0x7
c001f133:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f13a:	50                   	push   eax
c001f13b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f141:	e8 fe ea ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f146:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001f14d:	83 c4 10             	add    esp,0x10
c001f150:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001f157:	75 01                	jne    c001f15a <ATA::access(unsigned long long, int, void*, bool)+0x2f6>
c001f159:	fb                   	sti    
c001f15a:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001f15e:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001f163:	85 f6                	test   esi,esi
c001f165:	0f 84 dd 00 00 00    	je     c001f248 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001f16b:	57                   	push   edi
c001f16c:	6a 01                	push   0x1
c001f16e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f175:	50                   	push   eax
c001f176:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f17c:	e8 61 f8 ff ff       	call   c001e9e2 <IDE::polling(unsigned char, unsigned int)>
c001f181:	83 c4 10             	add    esp,0x10
c001f184:	0f b6 c0             	movzx  eax,al
c001f187:	85 c0                	test   eax,eax
c001f189:	74 23                	je     c001f1ae <ATA::access(unsigned long long, int, void*, bool)+0x34a>
c001f18b:	50                   	push   eax
c001f18c:	89 c6                	mov    esi,eax
c001f18e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001f195:	50                   	push   eax
c001f196:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f19d:	50                   	push   eax
c001f19e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f1a4:	e8 7f f7 ff ff       	call   c001e928 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f1a9:	e9 b1 00 00 00       	jmp    c001f25f <ATA::access(unsigned long long, int, void*, bool)+0x3fb>
c001f1ae:	85 ed                	test   ebp,ebp
c001f1b0:	74 49                	je     c001f1fb <ATA::access(unsigned long long, int, void*, bool)+0x397>
c001f1b2:	fa                   	cli    
c001f1b3:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001f1b9:	31 ff                	xor    edi,edi
c001f1bb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f1bf:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001f1c3:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001f1c8:	51                   	push   ecx
c001f1c9:	51                   	push   ecx
c001f1ca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f1d1:	50                   	push   eax
c001f1d2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f1d8:	e8 55 ea ff ff       	call   c001dc32 <IDE::getBase(unsigned char)>
c001f1dd:	89 c2                	mov    edx,eax
c001f1df:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001f1e4:	66 ef                	out    dx,ax
c001f1e6:	47                   	inc    edi
c001f1e7:	83 c4 10             	add    esp,0x10
c001f1ea:	81 ff 00 01 00 00    	cmp    edi,0x100
c001f1f0:	75 c9                	jne    c001f1bb <ATA::access(unsigned long long, int, void*, bool)+0x357>
c001f1f2:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001f1f9:	eb 35                	jmp    c001f230 <ATA::access(unsigned long long, int, void*, bool)+0x3cc>
c001f1fb:	fa                   	cli    
c001f1fc:	52                   	push   edx
c001f1fd:	52                   	push   edx
c001f1fe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f205:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001f20b:	50                   	push   eax
c001f20c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f212:	e8 1b ea ff ff       	call   c001dc32 <IDE::getBase(unsigned char)>
c001f217:	b9 00 01 00 00       	mov    ecx,0x100
c001f21c:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001f220:	89 c2                	mov    edx,eax
c001f222:	fc                   	cld    
c001f223:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001f226:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001f22d:	83 c4 10             	add    esp,0x10
c001f230:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001f237:	75 01                	jne    c001f23a <ATA::access(unsigned long long, int, void*, bool)+0x3d6>
c001f239:	fb                   	sti    
c001f23a:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001f242:	4e                   	dec    esi
c001f243:	e9 1b ff ff ff       	jmp    c001f163 <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001f248:	31 f6                	xor    esi,esi
c001f24a:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f24f:	74 11                	je     c001f262 <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001f251:	50                   	push   eax
c001f252:	50                   	push   eax
c001f253:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001f258:	50                   	push   eax
c001f259:	53                   	push   ebx
c001f25a:	e8 6b fb ff ff       	call   c001edca <ATA::flush(bool)>
c001f25f:	83 c4 10             	add    esp,0x10
c001f262:	83 c4 2c             	add    esp,0x2c
c001f265:	89 f0                	mov    eax,esi
c001f267:	5b                   	pop    ebx
c001f268:	5e                   	pop    esi
c001f269:	5f                   	pop    edi
c001f26a:	5d                   	pop    ebp
c001f26b:	c3                   	ret    

c001f26c <ATA::read(unsigned long long, int, void*)>:
c001f26c:	57                   	push   edi
c001f26d:	b8 04 00 00 00       	mov    eax,0x4
c001f272:	56                   	push   esi
c001f273:	53                   	push   ebx
c001f274:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f278:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f27c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f280:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f284:	8d 7a ff             	lea    edi,[edx-0x1]
c001f287:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f28d:	77 25                	ja     c001f2b4 <ATA::read(unsigned long long, int, void*)+0x48>
c001f28f:	85 f6                	test   esi,esi
c001f291:	b8 06 00 00 00       	mov    eax,0x6
c001f296:	74 1c                	je     c001f2b4 <ATA::read(unsigned long long, int, void*)+0x48>
c001f298:	50                   	push   eax
c001f299:	50                   	push   eax
c001f29a:	6a 00                	push   0x0
c001f29c:	56                   	push   esi
c001f29d:	52                   	push   edx
c001f29e:	53                   	push   ebx
c001f29f:	51                   	push   ecx
c001f2a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f2a4:	e8 bb fb ff ff       	call   c001ee64 <ATA::access(unsigned long long, int, void*, bool)>
c001f2a9:	83 c4 20             	add    esp,0x20
c001f2ac:	85 c0                	test   eax,eax
c001f2ae:	0f 95 c0             	setne  al
c001f2b1:	0f b6 c0             	movzx  eax,al
c001f2b4:	5b                   	pop    ebx
c001f2b5:	5e                   	pop    esi
c001f2b6:	5f                   	pop    edi
c001f2b7:	c3                   	ret    

c001f2b8 <ATA::write(unsigned long long, int, void*)>:
c001f2b8:	57                   	push   edi
c001f2b9:	b8 04 00 00 00       	mov    eax,0x4
c001f2be:	56                   	push   esi
c001f2bf:	53                   	push   ebx
c001f2c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f2c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f2c8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f2cc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f2d0:	8d 7a ff             	lea    edi,[edx-0x1]
c001f2d3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f2d9:	77 25                	ja     c001f300 <ATA::write(unsigned long long, int, void*)+0x48>
c001f2db:	85 f6                	test   esi,esi
c001f2dd:	b8 06 00 00 00       	mov    eax,0x6
c001f2e2:	74 1c                	je     c001f300 <ATA::write(unsigned long long, int, void*)+0x48>
c001f2e4:	50                   	push   eax
c001f2e5:	50                   	push   eax
c001f2e6:	6a 01                	push   0x1
c001f2e8:	56                   	push   esi
c001f2e9:	52                   	push   edx
c001f2ea:	53                   	push   ebx
c001f2eb:	51                   	push   ecx
c001f2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f2f0:	e8 6f fb ff ff       	call   c001ee64 <ATA::access(unsigned long long, int, void*, bool)>
c001f2f5:	83 c4 20             	add    esp,0x20
c001f2f8:	85 c0                	test   eax,eax
c001f2fa:	0f 95 c0             	setne  al
c001f2fd:	0f b6 c0             	movzx  eax,al
c001f300:	5b                   	pop    ebx
c001f301:	5e                   	pop    esi
c001f302:	5f                   	pop    edi
c001f303:	c3                   	ret    

c001f304 <ATA::detectCHS()>:
c001f304:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f308:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001f30e:	c1 e0 06             	shl    eax,0x6
c001f311:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001f317:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001f321:	c7 44 24 04 98 55 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025598
c001f329:	e9 88 0a ff ff       	jmp    c000fdb6 <KePanic(char const*)>

c001f32e <ATA::open(int, int, void*)>:
c001f32e:	53                   	push   ebx
c001f32f:	83 ec 08             	sub    esp,0x8
c001f332:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f336:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f33a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f33e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f344:	c1 e0 06             	shl    eax,0x6
c001f347:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f34d:	01 d0                	add    eax,edx
c001f34f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001f356:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001f35c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001f363:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f36d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f374:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001f37a:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001f381:	75 0c                	jne    c001f38f <ATA::open(int, int, void*)+0x61>
c001f383:	83 ec 0c             	sub    esp,0xc
c001f386:	53                   	push   ebx
c001f387:	e8 78 ff ff ff       	call   c001f304 <ATA::detectCHS()>
c001f38c:	83 c4 10             	add    esp,0x10
c001f38f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f395:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f39b:	c1 e0 06             	shl    eax,0x6
c001f39e:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001f3a5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f3af:	d1 e8                	shr    eax,1
c001f3b1:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f3b7:	6a 04                	push   0x4
c001f3b9:	6a 0c                	push   0xc
c001f3bb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f3c2:	50                   	push   eax
c001f3c3:	52                   	push   edx
c001f3c4:	e8 7b e8 ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f3c9:	90                   	nop
c001f3ca:	90                   	nop
c001f3cb:	6a 00                	push   0x0
c001f3cd:	6a 0c                	push   0xc
c001f3cf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f3d6:	50                   	push   eax
c001f3d7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f3dd:	e8 62 e8 ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f3e2:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f3e8:	83 c4 20             	add    esp,0x20
c001f3eb:	c1 e0 06             	shl    eax,0x6
c001f3ee:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c001f3f4:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c001f3fb:	0f 84 00 01 00 00    	je     c001f501 <ATA::open(int, int, void*)+0x1d3>
c001f401:	83 ec 0c             	sub    esp,0xc
c001f404:	6a 08                	push   0x8
c001f406:	e8 83 0c ff ff       	call   c001008e <Phys::allocateContiguousPages(int)>
c001f40b:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001f411:	c7 04 24 aa 55 02 c0 	mov    DWORD PTR [esp],0xc00255aa
c001f418:	e8 31 7b fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001f41d:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001f424:	e8 4c 3d ff ff       	call   c0013175 <Virt::allocateKernelVirtualPages(int)>
c001f429:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001f42f:	6a 03                	push   0x3
c001f431:	50                   	push   eax
c001f432:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001f438:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c001f43e:	e8 0b 44 ff ff       	call   c001384e <VAS::mapPage(unsigned long, unsigned long, int)>
c001f443:	83 c4 20             	add    esp,0x20
c001f446:	e8 65 0b ff ff       	call   c000ffb0 <Phys::allocatePage()>
c001f44b:	83 ec 0c             	sub    esp,0xc
c001f44e:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c001f454:	6a 01                	push   0x1
c001f456:	e8 1a 3d ff ff       	call   c0013175 <Virt::allocateKernelVirtualPages(int)>
c001f45b:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c001f461:	6a 03                	push   0x3
c001f463:	50                   	push   eax
c001f464:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c001f46a:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c001f470:	e8 d9 43 ff ff       	call   c001384e <VAS::mapPage(unsigned long, unsigned long, int)>
c001f475:	83 c4 14             	add    esp,0x14
c001f478:	68 e3 55 02 c0       	push   0xc00255e3
c001f47d:	e8 cc 7a fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001f482:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c001f489:	50                   	push   eax
c001f48a:	6a 12                	push   0x12
c001f48c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f493:	50                   	push   eax
c001f494:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f49a:	e8 a5 e7 ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f49f:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c001f4a5:	83 c4 20             	add    esp,0x20
c001f4a8:	0f b6 c4             	movzx  eax,ah
c001f4ab:	50                   	push   eax
c001f4ac:	6a 13                	push   0x13
c001f4ae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f4b5:	50                   	push   eax
c001f4b6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f4bc:	e8 83 e7 ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f4c1:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c001f4c8:	50                   	push   eax
c001f4c9:	6a 14                	push   0x14
c001f4cb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f4d2:	50                   	push   eax
c001f4d3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f4d9:	e8 66 e7 ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f4de:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c001f4e5:	83 c4 20             	add    esp,0x20
c001f4e8:	50                   	push   eax
c001f4e9:	6a 15                	push   0x15
c001f4eb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f4f2:	50                   	push   eax
c001f4f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f4f9:	e8 46 e7 ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f4fe:	83 c4 10             	add    esp,0x10
c001f501:	83 ec 0c             	sub    esp,0xc
c001f504:	53                   	push   ebx
c001f505:	e8 d8 a8 fe ff       	call   c0009de2 <PhysicalDisk::startCache()>
c001f50a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f50d:	e8 70 b7 fe ff       	call   c000ac82 <createPartitionsForDisk(PhysicalDisk*)>
c001f512:	83 c4 18             	add    esp,0x18
c001f515:	31 c0                	xor    eax,eax
c001f517:	5b                   	pop    ebx
c001f518:	c3                   	ret    

c001f519 <combineCharAndColour(char, unsigned char)>:
c001f519:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f51e:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001f524:	c1 e0 08             	shl    eax,0x8
c001f527:	09 d0                	or     eax,edx
c001f529:	c3                   	ret    

c001f52a <combineColours(unsigned char, unsigned char)>:
c001f52a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f52f:	c1 e0 04             	shl    eax,0x4
c001f532:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001f536:	c3                   	ret    
c001f537:	90                   	nop

c001f538 <ATAPI::write(unsigned long long, int, void*)>:
c001f538:	b8 03 00 00 00       	mov    eax,0x3
c001f53d:	c3                   	ret    

c001f53e <ATAPI::close(int, int, void*)>:
c001f53e:	83 ec 0c             	sub    esp,0xc
c001f541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f545:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f54b:	85 c0                	test   eax,eax
c001f54d:	74 0c                	je     c001f55b <ATAPI::close(int, int, void*)+0x1d>
c001f54f:	8b 10                	mov    edx,DWORD PTR [eax]
c001f551:	83 ec 0c             	sub    esp,0xc
c001f554:	50                   	push   eax
c001f555:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f558:	83 c4 10             	add    esp,0x10
c001f55b:	31 c0                	xor    eax,eax
c001f55d:	83 c4 0c             	add    esp,0xc
c001f560:	c3                   	ret    
c001f561:	90                   	nop

c001f562 <ATAPI::ATAPI()>:
c001f562:	83 ec 0c             	sub    esp,0xc
c001f565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f569:	83 ec 04             	sub    esp,0x4
c001f56c:	68 00 08 00 00       	push   0x800
c001f571:	68 95 57 02 c0       	push   0xc0025795
c001f576:	50                   	push   eax
c001f577:	e8 fe a7 fe ff       	call   c0009d7a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f57c:	83 c4 10             	add    esp,0x10
c001f57f:	ba a4 56 02 c0       	mov    edx,0xc00256a4
c001f584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f588:	89 10                	mov    DWORD PTR [eax],edx
c001f58a:	90                   	nop
c001f58b:	83 c4 0c             	add    esp,0xc
c001f58e:	c3                   	ret    
c001f58f:	90                   	nop

c001f590 <ATAPI::readyForCommand()>:
c001f590:	56                   	push   esi
c001f591:	53                   	push   ebx
c001f592:	53                   	push   ebx
c001f593:	31 db                	xor    ebx,ebx
c001f595:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f599:	51                   	push   ecx
c001f59a:	6a 0c                	push   0xc
c001f59c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f5a3:	50                   	push   eax
c001f5a4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f5aa:	e8 55 e7 ff ff       	call   c001dd04 <IDE::read(unsigned char, unsigned char)>
c001f5af:	83 c4 10             	add    esp,0x10
c001f5b2:	a8 88                	test   al,0x88
c001f5b4:	74 25                	je     c001f5db <ATAPI::readyForCommand()+0x4b>
c001f5b6:	43                   	inc    ebx
c001f5b7:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001f5bd:	7e da                	jle    c001f599 <ATAPI::readyForCommand()+0x9>
c001f5bf:	83 ec 0c             	sub    esp,0xc
c001f5c2:	68 5e 01 00 00       	push   0x15e
c001f5c7:	e8 f4 75 ff ff       	call   c0016bc0 <milliTenthSleep(unsigned int)>
c001f5cc:	83 c4 10             	add    esp,0x10
c001f5cf:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001f5d5:	75 c2                	jne    c001f599 <ATAPI::readyForCommand()+0x9>
c001f5d7:	31 c0                	xor    eax,eax
c001f5d9:	eb 02                	jmp    c001f5dd <ATAPI::readyForCommand()+0x4d>
c001f5db:	b0 01                	mov    al,0x1
c001f5dd:	5a                   	pop    edx
c001f5de:	5b                   	pop    ebx
c001f5df:	5e                   	pop    esi
c001f5e0:	c3                   	ret    
c001f5e1:	90                   	nop

c001f5e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001f5e2:	55                   	push   ebp
c001f5e3:	57                   	push   edi
c001f5e4:	56                   	push   esi
c001f5e5:	53                   	push   ebx
c001f5e6:	83 ec 20             	sub    esp,0x20
c001f5e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001f5ed:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001f5f1:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001f5f5:	6a 01                	push   0x1
c001f5f7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f5fe:	50                   	push   eax
c001f5ff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f605:	e8 48 e8 ff ff       	call   c001de52 <IDE::enableIRQs(unsigned char, bool)>
c001f60a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f611:	59                   	pop    ecx
c001f612:	5e                   	pop    esi
c001f613:	50                   	push   eax
c001f614:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f61a:	e8 ff e5 ff ff       	call   c001dc1e <IDE::prepareInterrupt(unsigned char)>
c001f61f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001f622:	e8 69 ff ff ff       	call   c001f590 <ATAPI::readyForCommand()>
c001f627:	83 c4 10             	add    esp,0x10
c001f62a:	84 c0                	test   al,al
c001f62c:	75 0a                	jne    c001f638 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001f62e:	bb 01 00 00 00       	mov    ebx,0x1
c001f633:	e9 5f 02 00 00       	jmp    c001f897 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001f638:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001f63e:	c1 e0 04             	shl    eax,0x4
c001f641:	0f b6 c0             	movzx  eax,al
c001f644:	50                   	push   eax
c001f645:	6a 06                	push   0x6
c001f647:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f64e:	50                   	push   eax
c001f64f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f655:	e8 ea e5 ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f65a:	6a 00                	push   0x0
c001f65c:	6a 01                	push   0x1
c001f65e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f665:	50                   	push   eax
c001f666:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f66c:	e8 d3 e5 ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f671:	83 c4 20             	add    esp,0x20
c001f674:	0f b6 c3             	movzx  eax,bl
c001f677:	50                   	push   eax
c001f678:	0f b6 df             	movzx  ebx,bh
c001f67b:	6a 04                	push   0x4
c001f67d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f684:	50                   	push   eax
c001f685:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f68b:	e8 b4 e5 ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f690:	53                   	push   ebx
c001f691:	6a 05                	push   0x5
c001f693:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f69a:	50                   	push   eax
c001f69b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f6a1:	e8 9e e5 ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f6a6:	83 c4 20             	add    esp,0x20
c001f6a9:	68 a0 00 00 00       	push   0xa0
c001f6ae:	6a 07                	push   0x7
c001f6b0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f6b7:	50                   	push   eax
c001f6b8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f6be:	e8 81 e5 ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f6c3:	83 c4 0c             	add    esp,0xc
c001f6c6:	6a 01                	push   0x1
c001f6c8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f6cf:	50                   	push   eax
c001f6d0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f6d6:	e8 07 f3 ff ff       	call   c001e9e2 <IDE::polling(unsigned char, unsigned int)>
c001f6db:	83 c4 10             	add    esp,0x10
c001f6de:	0f b6 d8             	movzx  ebx,al
c001f6e1:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001f6e7:	85 db                	test   ebx,ebx
c001f6e9:	74 20                	je     c001f70b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001f6eb:	53                   	push   ebx
c001f6ec:	0f b6 c0             	movzx  eax,al
c001f6ef:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001f6f6:	52                   	push   edx
c001f6f7:	50                   	push   eax
c001f6f8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f6fe:	e8 25 f2 ff ff       	call   c001e928 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f703:	83 c4 10             	add    esp,0x10
c001f706:	e9 8c 01 00 00       	jmp    c001f897 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001f70b:	52                   	push   edx
c001f70c:	0f b6 c0             	movzx  eax,al
c001f70f:	52                   	push   edx
c001f710:	50                   	push   eax
c001f711:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f717:	e8 16 e5 ff ff       	call   c001dc32 <IDE::getBase(unsigned char)>
c001f71c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001f720:	b9 06 00 00 00       	mov    ecx,0x6
c001f725:	89 c2                	mov    edx,eax
c001f727:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001f72a:	89 e8                	mov    eax,ebp
c001f72c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001f730:	83 c4 10             	add    esp,0x10
c001f733:	0f b6 c0             	movzx  eax,al
c001f736:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f73a:	85 db                	test   ebx,ebx
c001f73c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001f742:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001f749:	0f 84 eb 00 00 00    	je     c001f83a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001f74f:	55                   	push   ebp
c001f750:	55                   	push   ebp
c001f751:	52                   	push   edx
c001f752:	50                   	push   eax
c001f753:	e8 60 e6 ff ff       	call   c001ddb8 <IDE::waitInterrupt(unsigned char)>
c001f758:	83 c4 10             	add    esp,0x10
c001f75b:	84 c0                	test   al,al
c001f75d:	0f 84 cb fe ff ff    	je     c001f62e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001f763:	56                   	push   esi
c001f764:	56                   	push   esi
c001f765:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f76c:	50                   	push   eax
c001f76d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f773:	e8 a6 e4 ff ff       	call   c001dc1e <IDE::prepareInterrupt(unsigned char)>
c001f778:	83 c4 0c             	add    esp,0xc
c001f77b:	6a 04                	push   0x4
c001f77d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f784:	50                   	push   eax
c001f785:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f78b:	e8 74 e5 ff ff       	call   c001dd04 <IDE::read(unsigned char, unsigned char)>
c001f790:	83 c4 0c             	add    esp,0xc
c001f793:	6a 05                	push   0x5
c001f795:	89 c6                	mov    esi,eax
c001f797:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f79e:	50                   	push   eax
c001f79f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f7a5:	e8 5a e5 ff ff       	call   c001dd04 <IDE::read(unsigned char, unsigned char)>
c001f7aa:	83 c4 10             	add    esp,0x10
c001f7ad:	0f b6 e8             	movzx  ebp,al
c001f7b0:	89 f0                	mov    eax,esi
c001f7b2:	c1 e5 08             	shl    ebp,0x8
c001f7b5:	0f b6 f0             	movzx  esi,al
c001f7b8:	09 f5                	or     ebp,esi
c001f7ba:	31 f6                	xor    esi,esi
c001f7bc:	d1 fd                	sar    ebp,1
c001f7be:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f7c3:	74 5c                	je     c001f821 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001f7c5:	39 ee                	cmp    esi,ebp
c001f7c7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001f7cd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001f7d4:	75 0d                	jne    c001f7e3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001f7d6:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001f7d9:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001f7dd:	4b                   	dec    ebx
c001f7de:	e9 57 ff ff ff       	jmp    c001f73a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001f7e3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f7e7:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001f7eb:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001f7f0:	51                   	push   ecx
c001f7f1:	51                   	push   ecx
c001f7f2:	52                   	push   edx
c001f7f3:	50                   	push   eax
c001f7f4:	e8 39 e4 ff ff       	call   c001dc32 <IDE::getBase(unsigned char)>
c001f7f9:	89 c2                	mov    edx,eax
c001f7fb:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001f800:	66 ef                	out    dx,ax
c001f802:	46                   	inc    esi
c001f803:	83 c4 10             	add    esp,0x10
c001f806:	eb bd                	jmp    c001f7c5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001f808:	51                   	push   ecx
c001f809:	51                   	push   ecx
c001f80a:	52                   	push   edx
c001f80b:	50                   	push   eax
c001f80c:	e8 21 e4 ff ff       	call   c001dc32 <IDE::getBase(unsigned char)>
c001f811:	89 c2                	mov    edx,eax
c001f813:	66 ed                	in     ax,dx
c001f815:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001f819:	83 c4 10             	add    esp,0x10
c001f81c:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001f820:	46                   	inc    esi
c001f821:	39 ee                	cmp    esi,ebp
c001f823:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001f829:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001f830:	75 d6                	jne    c001f808 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001f832:	01 f6                	add    esi,esi
c001f834:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001f838:	eb a3                	jmp    c001f7dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001f83a:	51                   	push   ecx
c001f83b:	51                   	push   ecx
c001f83c:	52                   	push   edx
c001f83d:	50                   	push   eax
c001f83e:	e8 75 e5 ff ff       	call   c001ddb8 <IDE::waitInterrupt(unsigned char)>
c001f843:	83 c4 10             	add    esp,0x10
c001f846:	84 c0                	test   al,al
c001f848:	0f 84 e0 fd ff ff    	je     c001f62e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001f84e:	52                   	push   edx
c001f84f:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f854:	52                   	push   edx
c001f855:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f85c:	50                   	push   eax
c001f85d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f863:	e8 b6 e3 ff ff       	call   c001dc1e <IDE::prepareInterrupt(unsigned char)>
c001f868:	83 c4 10             	add    esp,0x10
c001f86b:	50                   	push   eax
c001f86c:	50                   	push   eax
c001f86d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f874:	50                   	push   eax
c001f875:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f87b:	e8 b2 e3 ff ff       	call   c001dc32 <IDE::getBase(unsigned char)>
c001f880:	8d 50 07             	lea    edx,[eax+0x7]
c001f883:	ec                   	in     al,dx
c001f884:	83 c4 10             	add    esp,0x10
c001f887:	a8 88                	test   al,0x88
c001f889:	74 0a                	je     c001f895 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001f88b:	4b                   	dec    ebx
c001f88c:	75 dd                	jne    c001f86b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001f88e:	bb 02 00 00 00       	mov    ebx,0x2
c001f893:	eb 02                	jmp    c001f897 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001f895:	31 db                	xor    ebx,ebx
c001f897:	83 c4 1c             	add    esp,0x1c
c001f89a:	89 d8                	mov    eax,ebx
c001f89c:	5b                   	pop    ebx
c001f89d:	5e                   	pop    esi
c001f89e:	5f                   	pop    edi
c001f89f:	5d                   	pop    ebp
c001f8a0:	c3                   	ret    
c001f8a1:	90                   	nop

c001f8a2 <ATAPI::diskRemoved()>:
c001f8a2:	53                   	push   ebx
c001f8a3:	83 ec 14             	sub    esp,0x14
c001f8a6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f8aa:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001f8b1:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001f8b7:	e8 b6 b0 fe ff       	call   c000a972 <LogicalDisk::unmount()>
c001f8bc:	58                   	pop    eax
c001f8bd:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001f8c3:	e8 4c ba fe ff       	call   c000b314 <VCache::writeWriteBuffer()>
c001f8c8:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001f8ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f8d2:	83 c4 18             	add    esp,0x18
c001f8d5:	5b                   	pop    ebx
c001f8d6:	e9 29 ba fe ff       	jmp    c000b304 <VCache::invalidateReadBuffer()>
c001f8db:	90                   	nop

c001f8dc <ATAPI::eject()>:
c001f8dc:	57                   	push   edi
c001f8dd:	b9 03 00 00 00       	mov    ecx,0x3
c001f8e2:	53                   	push   ebx
c001f8e3:	83 ec 14             	sub    esp,0x14
c001f8e6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f8ea:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f8ee:	fc                   	cld    
c001f8ef:	31 c0                	xor    eax,eax
c001f8f1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f8f3:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001f8f8:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001f8fd:	50                   	push   eax
c001f8fe:	50                   	push   eax
c001f8ff:	6a 00                	push   0x0
c001f901:	6a 00                	push   0x0
c001f903:	6a 00                	push   0x0
c001f905:	6a 02                	push   0x2
c001f907:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f90b:	50                   	push   eax
c001f90c:	53                   	push   ebx
c001f90d:	e8 d0 fc ff ff       	call   c001f5e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f912:	83 c4 14             	add    esp,0x14
c001f915:	53                   	push   ebx
c001f916:	e8 87 ff ff ff       	call   c001f8a2 <ATAPI::diskRemoved()>
c001f91b:	83 c4 24             	add    esp,0x24
c001f91e:	31 c0                	xor    eax,eax
c001f920:	5b                   	pop    ebx
c001f921:	5f                   	pop    edi
c001f922:	c3                   	ret    
c001f923:	90                   	nop

c001f924 <ATAPI::diskInserted()>:
c001f924:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f928:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001f92f:	c3                   	ret    

c001f930 <ATAPI::detectMedia()>:
c001f930:	56                   	push   esi
c001f931:	53                   	push   ebx
c001f932:	83 ec 28             	sub    esp,0x28
c001f935:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f939:	6a 0c                	push   0xc
c001f93b:	6a 00                	push   0x0
c001f93d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001f941:	56                   	push   esi
c001f942:	e8 a9 0b fe ff       	call   c00004f0 <memset>
c001f947:	58                   	pop    eax
c001f948:	5a                   	pop    edx
c001f949:	6a 00                	push   0x0
c001f94b:	6a 00                	push   0x0
c001f94d:	6a 00                	push   0x0
c001f94f:	6a 00                	push   0x0
c001f951:	56                   	push   esi
c001f952:	53                   	push   ebx
c001f953:	e8 8a fc ff ff       	call   c001f5e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f958:	83 c4 1c             	add    esp,0x1c
c001f95b:	6a 0c                	push   0xc
c001f95d:	6a 00                	push   0x0
c001f95f:	56                   	push   esi
c001f960:	e8 8b 0b fe ff       	call   c00004f0 <memset>
c001f965:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001f96a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001f96f:	59                   	pop    ecx
c001f970:	58                   	pop    eax
c001f971:	6a 01                	push   0x1
c001f973:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001f977:	50                   	push   eax
c001f978:	6a 00                	push   0x0
c001f97a:	6a 12                	push   0x12
c001f97c:	56                   	push   esi
c001f97d:	53                   	push   ebx
c001f97e:	e8 5f fc ff ff       	call   c001f5e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f983:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001f987:	83 c4 20             	add    esp,0x20
c001f98a:	83 e0 7f             	and    eax,0x7f
c001f98d:	83 f8 70             	cmp    eax,0x70
c001f990:	74 15                	je     c001f9a7 <ATAPI::detectMedia()+0x77>
c001f992:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f999:	75 0c                	jne    c001f9a7 <ATAPI::detectMedia()+0x77>
c001f99b:	83 ec 0c             	sub    esp,0xc
c001f99e:	53                   	push   ebx
c001f99f:	e8 80 ff ff ff       	call   c001f924 <ATAPI::diskInserted()>
c001f9a4:	83 c4 10             	add    esp,0x10
c001f9a7:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f9ab:	83 e0 0f             	and    eax,0xf
c001f9ae:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001f9b3:	0f b6 c0             	movzx  eax,al
c001f9b6:	75 19                	jne    c001f9d1 <ATAPI::detectMedia()+0xa1>
c001f9b8:	83 f8 02             	cmp    eax,0x2
c001f9bb:	75 14                	jne    c001f9d1 <ATAPI::detectMedia()+0xa1>
c001f9bd:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f9c4:	74 24                	je     c001f9ea <ATAPI::detectMedia()+0xba>
c001f9c6:	83 ec 0c             	sub    esp,0xc
c001f9c9:	53                   	push   ebx
c001f9ca:	e8 d3 fe ff ff       	call   c001f8a2 <ATAPI::diskRemoved()>
c001f9cf:	eb 16                	jmp    c001f9e7 <ATAPI::detectMedia()+0xb7>
c001f9d1:	85 c0                	test   eax,eax
c001f9d3:	75 15                	jne    c001f9ea <ATAPI::detectMedia()+0xba>
c001f9d5:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f9dc:	75 0c                	jne    c001f9ea <ATAPI::detectMedia()+0xba>
c001f9de:	83 ec 0c             	sub    esp,0xc
c001f9e1:	53                   	push   ebx
c001f9e2:	e8 3d ff ff ff       	call   c001f924 <ATAPI::diskInserted()>
c001f9e7:	83 c4 10             	add    esp,0x10
c001f9ea:	83 c4 24             	add    esp,0x24
c001f9ed:	5b                   	pop    ebx
c001f9ee:	5e                   	pop    esi
c001f9ef:	c3                   	ret    

c001f9f0 <ATAPI::open(int, int, void*)>:
c001f9f0:	56                   	push   esi
c001f9f1:	53                   	push   ebx
c001f9f2:	50                   	push   eax
c001f9f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f9f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f9fb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f9ff:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001fa05:	c1 e0 06             	shl    eax,0x6
c001fa08:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001fa0e:	01 d0                	add    eax,edx
c001fa10:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001fa17:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001fa1d:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001fa24:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001fa2e:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001fa35:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001fa3b:	6a 04                	push   0x4
c001fa3d:	6a 0c                	push   0xc
c001fa3f:	51                   	push   ecx
c001fa40:	52                   	push   edx
c001fa41:	e8 fe e1 ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa46:	90                   	nop
c001fa47:	90                   	nop
c001fa48:	6a 00                	push   0x0
c001fa4a:	6a 0c                	push   0xc
c001fa4c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa53:	50                   	push   eax
c001fa54:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa5a:	e8 e5 e1 ff ff       	call   c001dc44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa5f:	83 c4 14             	add    esp,0x14
c001fa62:	68 78 01 00 00       	push   0x178
c001fa67:	e8 04 00 ff ff       	call   c000fa70 <malloc>
c001fa6c:	83 c4 0c             	add    esp,0xc
c001fa6f:	6a 00                	push   0x0
c001fa71:	68 ff ff ff 7f       	push   0x7fffffff
c001fa76:	6a 00                	push   0x0
c001fa78:	6a 00                	push   0x0
c001fa7a:	53                   	push   ebx
c001fa7b:	68 47 58 02 c0       	push   0xc0025847
c001fa80:	89 c6                	mov    esi,eax
c001fa82:	50                   	push   eax
c001fa83:	e8 28 ad fe ff       	call   c000a7b0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001fa88:	83 c4 14             	add    esp,0x14
c001fa8b:	56                   	push   esi
c001fa8c:	e8 df ad fe ff       	call   c000a870 <LogicalDisk::assignDriveLetter()>
c001fa91:	5a                   	pop    edx
c001fa92:	59                   	pop    ecx
c001fa93:	0f be c0             	movsx  eax,al
c001fa96:	50                   	push   eax
c001fa97:	68 8c 56 02 c0       	push   0xc002568c
c001fa9c:	e8 ad 74 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001faa1:	58                   	pop    eax
c001faa2:	5a                   	pop    edx
c001faa3:	56                   	push   esi
c001faa4:	53                   	push   ebx
c001faa5:	e8 ee 9e fe ff       	call   c0009998 <Device::addChild(Device*)>
c001faaa:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001fab0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fab3:	e8 2a a3 fe ff       	call   c0009de2 <PhysicalDisk::startCache()>
c001fab8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001fabf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fac2:	e8 69 fe ff ff       	call   c001f930 <ATAPI::detectMedia()>
c001fac7:	83 c4 14             	add    esp,0x14
c001faca:	31 c0                	xor    eax,eax
c001facc:	5b                   	pop    ebx
c001facd:	5e                   	pop    esi
c001face:	c3                   	ret    
c001facf:	90                   	nop

c001fad0 <ATAPI::read(unsigned long long, int, void*)>:
c001fad0:	55                   	push   ebp
c001fad1:	57                   	push   edi
c001fad2:	56                   	push   esi
c001fad3:	53                   	push   ebx
c001fad4:	83 ec 1c             	sub    esp,0x1c
c001fad7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fadb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001fadf:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001fae3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001faea:	74 3c                	je     c001fb28 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001faec:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001faf0:	b9 03 00 00 00       	mov    ecx,0x3
c001faf5:	fc                   	cld    
c001faf6:	31 c0                	xor    eax,eax
c001faf8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fafa:	89 e8                	mov    eax,ebp
c001fafc:	0f ce                	bswap  esi
c001fafe:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001fb02:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001fb07:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001fb0b:	50                   	push   eax
c001fb0c:	50                   	push   eax
c001fb0d:	55                   	push   ebp
c001fb0e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001fb12:	c1 e5 0b             	shl    ebp,0xb
c001fb15:	6a 00                	push   0x0
c001fb17:	55                   	push   ebp
c001fb18:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fb1c:	50                   	push   eax
c001fb1d:	53                   	push   ebx
c001fb1e:	e8 bf fa ff ff       	call   c001f5e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fb23:	83 c4 20             	add    esp,0x20
c001fb26:	eb 1a                	jmp    c001fb42 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001fb28:	83 ec 0c             	sub    esp,0xc
c001fb2b:	53                   	push   ebx
c001fb2c:	e8 ff fd ff ff       	call   c001f930 <ATAPI::detectMedia()>
c001fb31:	83 c4 10             	add    esp,0x10
c001fb34:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001fb3b:	75 af                	jne    c001faec <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001fb3d:	b8 02 00 00 00       	mov    eax,0x2
c001fb42:	83 c4 1c             	add    esp,0x1c
c001fb45:	5b                   	pop    ebx
c001fb46:	5e                   	pop    esi
c001fb47:	5f                   	pop    edi
c001fb48:	5d                   	pop    ebp
c001fb49:	c3                   	ret    

c001fb4a <SATA::close(int, int, void*)>:
c001fb4a:	83 ec 0c             	sub    esp,0xc
c001fb4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb51:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fb57:	85 c0                	test   eax,eax
c001fb59:	74 0c                	je     c001fb67 <SATA::close(int, int, void*)+0x1d>
c001fb5b:	8b 10                	mov    edx,DWORD PTR [eax]
c001fb5d:	83 ec 0c             	sub    esp,0xc
c001fb60:	50                   	push   eax
c001fb61:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fb64:	83 c4 10             	add    esp,0x10
c001fb67:	31 c0                	xor    eax,eax
c001fb69:	83 c4 0c             	add    esp,0xc
c001fb6c:	c3                   	ret    
c001fb6d:	90                   	nop

c001fb6e <SATA::powerSaving(PowerSavingLevel)>:
c001fb6e:	c3                   	ret    
c001fb6f:	90                   	nop

c001fb70 <SATA::open(int, int, void*)>:
c001fb70:	56                   	push   esi
c001fb71:	53                   	push   ebx
c001fb72:	83 ec 10             	sub    esp,0x10
c001fb75:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001fb79:	68 d4 56 02 c0       	push   0xc00256d4
c001fb7e:	e8 cb 73 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001fb83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fb87:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001fb91:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001fb9b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001fba1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001fba5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001fbaf:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001fbb6:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001fbbc:	e8 ef 03 ff ff       	call   c000ffb0 <Phys::allocatePage()>
c001fbc1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001fbc7:	89 c6                	mov    esi,eax
c001fbc9:	e8 e2 03 ff ff       	call   c000ffb0 <Phys::allocatePage()>
c001fbce:	81 c6 00 10 00 00    	add    esi,0x1000
c001fbd4:	83 c4 10             	add    esp,0x10
c001fbd7:	39 c6                	cmp    esi,eax
c001fbd9:	74 10                	je     c001fbeb <SATA::open(int, int, void*)+0x7b>
c001fbdb:	83 ec 0c             	sub    esp,0xc
c001fbde:	68 e0 56 02 c0       	push   0xc00256e0
c001fbe3:	e8 ce 01 ff ff       	call   c000fdb6 <KePanic(char const*)>
c001fbe8:	83 c4 10             	add    esp,0x10
c001fbeb:	83 ec 0c             	sub    esp,0xc
c001fbee:	6a 02                	push   0x2
c001fbf0:	e8 80 35 ff ff       	call   c0013175 <Virt::allocateKernelVirtualPages(int)>
c001fbf5:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001fbfb:	6a 03                	push   0x3
c001fbfd:	50                   	push   eax
c001fbfe:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001fc04:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c001fc0a:	e8 3f 3c ff ff       	call   c001384e <VAS::mapPage(unsigned long, unsigned long, int)>
c001fc0f:	83 c4 14             	add    esp,0x14
c001fc12:	53                   	push   ebx
c001fc13:	e8 ca a1 fe ff       	call   c0009de2 <PhysicalDisk::startCache()>
c001fc18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fc1b:	e8 62 b0 fe ff       	call   c000ac82 <createPartitionsForDisk(PhysicalDisk*)>
c001fc20:	83 c4 14             	add    esp,0x14
c001fc23:	31 c0                	xor    eax,eax
c001fc25:	5b                   	pop    ebx
c001fc26:	5e                   	pop    esi
c001fc27:	c3                   	ret    

c001fc28 <SATA::SATA()>:
c001fc28:	83 ec 0c             	sub    esp,0xc
c001fc2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc2f:	83 ec 04             	sub    esp,0x4
c001fc32:	68 00 02 00 00       	push   0x200
c001fc37:	68 f4 56 02 c0       	push   0xc00256f4
c001fc3c:	50                   	push   eax
c001fc3d:	e8 38 a1 fe ff       	call   c0009d7a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fc42:	83 c4 10             	add    esp,0x10
c001fc45:	ba 64 57 02 c0       	mov    edx,0xc0025764
c001fc4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc4e:	89 10                	mov    DWORD PTR [eax],edx
c001fc50:	90                   	nop
c001fc51:	83 c4 0c             	add    esp,0xc
c001fc54:	c3                   	ret    
c001fc55:	90                   	nop

c001fc56 <SATA::access(unsigned long long, int, void*, bool)>:
c001fc56:	55                   	push   ebp
c001fc57:	57                   	push   edi
c001fc58:	56                   	push   esi
c001fc59:	53                   	push   ebx
c001fc5a:	83 ec 2c             	sub    esp,0x2c
c001fc5d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001fc61:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001fc65:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001fc69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001fc6d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fc71:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001fc75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fc79:	fa                   	cli    
c001fc7a:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001fc80:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001fc85:	7e 10                	jle    c001fc97 <SATA::access(unsigned long long, int, void*, bool)+0x41>
c001fc87:	83 ec 0c             	sub    esp,0xc
c001fc8a:	68 04 57 02 c0       	push   0xc0025704
c001fc8f:	e8 22 01 ff ff       	call   c000fdb6 <KePanic(char const*)>
c001fc94:	83 c4 10             	add    esp,0x10
c001fc97:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001fc9d:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001fca3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001fca9:	89 e8                	mov    eax,ebp
c001fcab:	c1 e0 07             	shl    eax,0x7
c001fcae:	01 d0                	add    eax,edx
c001fcb0:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001fcba:	8d 45 02             	lea    eax,[ebp+0x2]
c001fcbd:	51                   	push   ecx
c001fcbe:	c1 e0 07             	shl    eax,0x7
c001fcc1:	51                   	push   ecx
c001fcc2:	01 d0                	add    eax,edx
c001fcc4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001fcc8:	50                   	push   eax
c001fcc9:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001fccf:	e8 ee ed ff ff       	call   c001eac2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001fcd4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fcd8:	83 c4 10             	add    esp,0x10
c001fcdb:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001fce0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fce4:	0f 84 a6 01 00 00    	je     c001fe90 <SATA::access(unsigned long long, int, void*, bool)+0x23a>
c001fcea:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001fcee:	c1 e0 09             	shl    eax,0x9
c001fcf1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001fcf6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001fcfa:	74 0e                	je     c001fd0a <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c001fcfc:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001fd02:	89 c1                	mov    ecx,eax
c001fd04:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001fd08:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fd0a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001fd0e:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001fd14:	8d 45 02             	lea    eax,[ebp+0x2]
c001fd17:	c1 e0 07             	shl    eax,0x7
c001fd1a:	01 d0                	add    eax,edx
c001fd1c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd1e:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001fd24:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001fd2a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fd2e:	c1 e1 05             	shl    ecx,0x5
c001fd31:	01 c8                	add    eax,ecx
c001fd33:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fd37:	83 e1 01             	and    ecx,0x1
c001fd3a:	89 ce                	mov    esi,ecx
c001fd3c:	8a 08                	mov    cl,BYTE PTR [eax]
c001fd3e:	c1 e6 06             	shl    esi,0x6
c001fd41:	83 e1 bf             	and    ecx,0xffffffbf
c001fd44:	09 f1                	or     ecx,esi
c001fd46:	88 08                	mov    BYTE PTR [eax],cl
c001fd48:	8b 08                	mov    ecx,DWORD PTR [eax]
c001fd4a:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001fd50:	81 c9 05 00 01 00    	or     ecx,0x10005
c001fd56:	89 08                	mov    DWORD PTR [eax],ecx
c001fd58:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001fd5e:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001fd64:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001fd6a:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001fd6d:	50                   	push   eax
c001fd6e:	68 90 00 00 00       	push   0x90
c001fd73:	6a 00                	push   0x0
c001fd75:	56                   	push   esi
c001fd76:	e8 75 07 fe ff       	call   c00004f0 <memset>
c001fd7b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001fd81:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001fd87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd8b:	83 c4 10             	add    esp,0x10
c001fd8e:	48                   	dec    eax
c001fd8f:	25 ff ff 3f 00       	and    eax,0x3fffff
c001fd94:	89 c1                	mov    ecx,eax
c001fd96:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001fd9c:	25 00 00 c0 ff       	and    eax,0xffc00000
c001fda1:	09 c8                	or     eax,ecx
c001fda3:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001fda9:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001fdaf:	83 c8 80             	or     eax,0xffffff80
c001fdb2:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001fdb8:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fdbb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fdbf:	25 00 7f 00 00       	and    eax,0x7f00
c001fdc4:	0d 27 80 ff ff       	or     eax,0xffff8027
c001fdc9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001fdce:	66 89 06             	mov    WORD PTR [esi],ax
c001fdd1:	b0 35                	mov    al,0x35
c001fdd3:	75 02                	jne    c001fdd7 <SATA::access(unsigned long long, int, void*, bool)+0x181>
c001fdd5:	b0 25                	mov    al,0x25
c001fdd7:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001fdda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fdde:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001fde2:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001fde6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fdea:	c1 e8 10             	shr    eax,0x10
c001fded:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001fdf0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fdf4:	c1 e8 18             	shr    eax,0x18
c001fdf7:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001fdfa:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001fdfe:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001fe01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fe05:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001fe08:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001fe0c:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001fe10:	89 ee                	mov    esi,ebp
c001fe12:	31 c0                	xor    eax,eax
c001fe14:	c1 e6 07             	shl    esi,0x7
c001fe17:	01 d6                	add    esi,edx
c001fe19:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001fe1f:	80 e1 88             	and    cl,0x88
c001fe22:	74 0a                	je     c001fe2e <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001fe24:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001fe29:	74 0a                	je     c001fe35 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001fe2b:	40                   	inc    eax
c001fe2c:	eb eb                	jmp    c001fe19 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c001fe2e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001fe33:	75 0a                	jne    c001fe3f <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c001fe35:	83 ec 0c             	sub    esp,0xc
c001fe38:	68 3d 57 02 c0       	push   0xc002573d
c001fe3d:	eb 34                	jmp    c001fe73 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c001fe3f:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001fe43:	c1 e5 07             	shl    ebp,0x7
c001fe46:	b8 01 00 00 00       	mov    eax,0x1
c001fe4b:	01 ea                	add    edx,ebp
c001fe4d:	d3 e0                	shl    eax,cl
c001fe4f:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001fe55:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001fe5b:	85 c8                	test   eax,ecx
c001fe5d:	74 25                	je     c001fe84 <SATA::access(unsigned long long, int, void*, bool)+0x22e>
c001fe5f:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001fe65:	0f ba e1 1e          	bt     ecx,0x1e
c001fe69:	73 ea                	jae    c001fe55 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001fe6b:	83 ec 0c             	sub    esp,0xc
c001fe6e:	68 4b 57 02 c0       	push   0xc002574b
c001fe73:	e8 d6 70 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001fe78:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001fe7f:	83 c4 10             	add    esp,0x10
c001fe82:	eb 13                	jmp    c001fe97 <SATA::access(unsigned long long, int, void*, bool)+0x241>
c001fe84:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001fe8a:	0f ba e0 1e          	bt     eax,0x1e
c001fe8e:	73 18                	jae    c001fea8 <SATA::access(unsigned long long, int, void*, bool)+0x252>
c001fe90:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001fe97:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001fe9e:	75 01                	jne    c001fea1 <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c001fea0:	fb                   	sti    
c001fea1:	b8 01 00 00 00       	mov    eax,0x1
c001fea6:	eb 2c                	jmp    c001fed4 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001fea8:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001fead:	75 10                	jne    c001febf <SATA::access(unsigned long long, int, void*, bool)+0x269>
c001feaf:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001feb5:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001feb9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001febd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001febf:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001fec6:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001fecb:	85 c0                	test   eax,eax
c001fecd:	75 03                	jne    c001fed2 <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c001fecf:	fb                   	sti    
c001fed0:	eb 02                	jmp    c001fed4 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001fed2:	31 c0                	xor    eax,eax
c001fed4:	83 c4 2c             	add    esp,0x2c
c001fed7:	5b                   	pop    ebx
c001fed8:	5e                   	pop    esi
c001fed9:	5f                   	pop    edi
c001feda:	5d                   	pop    ebp
c001fedb:	c3                   	ret    

c001fedc <SATA::read(unsigned long long, int, void*)>:
c001fedc:	57                   	push   edi
c001fedd:	b8 04 00 00 00       	mov    eax,0x4
c001fee2:	56                   	push   esi
c001fee3:	53                   	push   ebx
c001fee4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fee8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001feec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fef0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fef4:	8d 7a ff             	lea    edi,[edx-0x1]
c001fef7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001fefd:	77 25                	ja     c001ff24 <SATA::read(unsigned long long, int, void*)+0x48>
c001feff:	85 f6                	test   esi,esi
c001ff01:	b8 06 00 00 00       	mov    eax,0x6
c001ff06:	74 1c                	je     c001ff24 <SATA::read(unsigned long long, int, void*)+0x48>
c001ff08:	50                   	push   eax
c001ff09:	50                   	push   eax
c001ff0a:	6a 00                	push   0x0
c001ff0c:	56                   	push   esi
c001ff0d:	52                   	push   edx
c001ff0e:	53                   	push   ebx
c001ff0f:	51                   	push   ecx
c001ff10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ff14:	e8 3d fd ff ff       	call   c001fc56 <SATA::access(unsigned long long, int, void*, bool)>
c001ff19:	83 c4 20             	add    esp,0x20
c001ff1c:	85 c0                	test   eax,eax
c001ff1e:	0f 95 c0             	setne  al
c001ff21:	0f b6 c0             	movzx  eax,al
c001ff24:	5b                   	pop    ebx
c001ff25:	5e                   	pop    esi
c001ff26:	5f                   	pop    edi
c001ff27:	c3                   	ret    

c001ff28 <SATA::write(unsigned long long, int, void*)>:
c001ff28:	55                   	push   ebp
c001ff29:	b8 04 00 00 00       	mov    eax,0x4
c001ff2e:	57                   	push   edi
c001ff2f:	56                   	push   esi
c001ff30:	53                   	push   ebx
c001ff31:	83 ec 0c             	sub    esp,0xc
c001ff34:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ff38:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ff3c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ff40:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ff44:	8d 73 ff             	lea    esi,[ebx-0x1]
c001ff47:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001ff4d:	77 3d                	ja     c001ff8c <SATA::write(unsigned long long, int, void*)+0x64>
c001ff4f:	85 ed                	test   ebp,ebp
c001ff51:	b8 06 00 00 00       	mov    eax,0x6
c001ff56:	74 34                	je     c001ff8c <SATA::write(unsigned long long, int, void*)+0x64>
c001ff58:	c1 e3 09             	shl    ebx,0x9
c001ff5b:	01 eb                	add    ebx,ebp
c001ff5d:	50                   	push   eax
c001ff5e:	89 d6                	mov    esi,edx
c001ff60:	50                   	push   eax
c001ff61:	83 c6 01             	add    esi,0x1
c001ff64:	6a 01                	push   0x1
c001ff66:	89 cf                	mov    edi,ecx
c001ff68:	55                   	push   ebp
c001ff69:	83 d7 00             	adc    edi,0x0
c001ff6c:	6a 01                	push   0x1
c001ff6e:	81 c5 00 02 00 00    	add    ebp,0x200
c001ff74:	51                   	push   ecx
c001ff75:	52                   	push   edx
c001ff76:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ff7a:	e8 d7 fc ff ff       	call   c001fc56 <SATA::access(unsigned long long, int, void*, bool)>
c001ff7f:	83 c4 20             	add    esp,0x20
c001ff82:	39 dd                	cmp    ebp,ebx
c001ff84:	89 f2                	mov    edx,esi
c001ff86:	89 f9                	mov    ecx,edi
c001ff88:	75 d3                	jne    c001ff5d <SATA::write(unsigned long long, int, void*)+0x35>
c001ff8a:	31 c0                	xor    eax,eax
c001ff8c:	83 c4 0c             	add    esp,0xc
c001ff8f:	5b                   	pop    ebx
c001ff90:	5e                   	pop    esi
c001ff91:	5f                   	pop    edi
c001ff92:	5d                   	pop    ebp
c001ff93:	c3                   	ret    

c001ff94 <SATAPI::write(unsigned long long, int, void*)>:
c001ff94:	b8 03 00 00 00       	mov    eax,0x3
c001ff99:	c3                   	ret    

c001ff9a <SATAPI::close(int, int, void*)>:
c001ff9a:	83 ec 0c             	sub    esp,0xc
c001ff9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ffa7:	85 c0                	test   eax,eax
c001ffa9:	74 0c                	je     c001ffb7 <SATAPI::close(int, int, void*)+0x1d>
c001ffab:	8b 10                	mov    edx,DWORD PTR [eax]
c001ffad:	83 ec 0c             	sub    esp,0xc
c001ffb0:	50                   	push   eax
c001ffb1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ffb4:	83 c4 10             	add    esp,0x10
c001ffb7:	31 c0                	xor    eax,eax
c001ffb9:	83 c4 0c             	add    esp,0xc
c001ffbc:	c3                   	ret    
c001ffbd:	90                   	nop

c001ffbe <SATAPI::SATAPI()>:
c001ffbe:	83 ec 0c             	sub    esp,0xc
c001ffc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffc5:	83 ec 04             	sub    esp,0x4
c001ffc8:	68 00 08 00 00       	push   0x800
c001ffcd:	68 94 57 02 c0       	push   0xc0025794
c001ffd2:	50                   	push   eax
c001ffd3:	e8 a2 9d fe ff       	call   c0009d7a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ffd8:	83 c4 10             	add    esp,0x10
c001ffdb:	ba 88 58 02 c0       	mov    edx,0xc0025888
c001ffe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffe4:	89 10                	mov    DWORD PTR [eax],edx
c001ffe6:	90                   	nop
c001ffe7:	83 c4 0c             	add    esp,0xc
c001ffea:	c3                   	ret    
c001ffeb:	90                   	nop

c001ffec <SATAPI::diskRemoved()>:
c001ffec:	c3                   	ret    
c001ffed:	90                   	nop

c001ffee <SATAPI::diskInserted()>:
c001ffee:	83 ec 18             	sub    esp,0x18
c001fff1:	68 a0 57 02 c0       	push   0xc00257a0
c001fff6:	e8 53 6f fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001fffb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ffff:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020006:	83 c4 1c             	add    esp,0x1c
c0020009:	c3                   	ret    

c002000a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002000a:	55                   	push   ebp
c002000b:	57                   	push   edi
c002000c:	56                   	push   esi
c002000d:	53                   	push   ebx
c002000e:	83 ec 34             	sub    esp,0x34
c0020011:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020015:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0020019:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002001d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020021:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020025:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002002b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020031:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020035:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c002003b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002003f:	83 c0 02             	add    eax,0x2
c0020042:	c1 e0 07             	shl    eax,0x7
c0020045:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020049:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002004d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020051:	c1 e0 07             	shl    eax,0x7
c0020054:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020058:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002005c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020066:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002006a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020070:	e8 4d ea ff ff       	call   c001eac2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020075:	83 c4 10             	add    esp,0x10
c0020078:	89 c2                	mov    edx,eax
c002007a:	b8 01 00 00 00       	mov    eax,0x1
c002007f:	83 fa ff             	cmp    edx,0xffffffff
c0020082:	0f 84 5f 02 00 00    	je     c00202e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c0020088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002008c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020090:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020096:	8b 00                	mov    eax,DWORD PTR [eax]
c0020098:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002009e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00200a4:	89 d1                	mov    ecx,edx
c00200a6:	c1 e1 05             	shl    ecx,0x5
c00200a9:	01 c8                	add    eax,ecx
c00200ab:	8b 08                	mov    ecx,DWORD PTR [eax]
c00200ad:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00200b3:	81 c9 25 00 01 00    	or     ecx,0x10025
c00200b9:	89 08                	mov    DWORD PTR [eax],ecx
c00200bb:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00200c1:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00200c7:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00200cd:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00200d0:	50                   	push   eax
c00200d1:	68 90 00 00 00       	push   0x90
c00200d6:	6a 00                	push   0x0
c00200d8:	53                   	push   ebx
c00200d9:	e8 12 04 fe ff       	call   c00004f0 <memset>
c00200de:	8d 7b 40             	lea    edi,[ebx+0x40]
c00200e1:	b9 0c 00 00 00       	mov    ecx,0xc
c00200e6:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00200ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00200ec:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c00200f2:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00200f6:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00200fa:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0020100:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020104:	48                   	dec    eax
c0020105:	25 ff ff 3f 00       	and    eax,0x3fffff
c002010a:	89 c1                	mov    ecx,eax
c002010c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020112:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020117:	09 c8                	or     eax,ecx
c0020119:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002011f:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c0020125:	83 c8 80             	or     eax,0xffffff80
c0020128:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c002012e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020131:	25 00 7f 00 00       	and    eax,0x7f00
c0020136:	0d 27 80 ff ff       	or     eax,0xffff8027
c002013b:	66 89 03             	mov    WORD PTR [ebx],ax
c002013e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020142:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0020146:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002014a:	c1 e8 10             	shr    eax,0x10
c002014d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020150:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020154:	c1 e8 18             	shr    eax,0x18
c0020157:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c002015a:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002015e:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0020161:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020165:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020168:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002016c:	83 c4 10             	add    esp,0x10
c002016f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020173:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0020177:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002017b:	31 c0                	xor    eax,eax
c002017d:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0020183:	80 e1 88             	and    cl,0x88
c0020186:	74 0a                	je     c0020192 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c0020188:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002018d:	74 0a                	je     c0020199 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c002018f:	40                   	inc    eax
c0020190:	eb eb                	jmp    c002017d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c0020192:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020197:	75 43                	jne    c00201dc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c0020199:	83 ec 0c             	sub    esp,0xc
c002019c:	68 b8 57 02 c0       	push   0xc00257b8
c00201a1:	e8 a8 6d fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00201a6:	58                   	pop    eax
c00201a7:	5a                   	pop    edx
c00201a8:	68 cd 57 02 c0       	push   0xc00257cd
c00201ad:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c00201b3:	e8 a4 23 ff ff       	call   c001255c <VgaText::puts(char const*)>
c00201b8:	59                   	pop    ecx
c00201b9:	5b                   	pop    ebx
c00201ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00201be:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00201c4:	e8 93 e9 ff ff       	call   c001eb5c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00201c9:	5e                   	pop    esi
c00201ca:	5f                   	pop    edi
c00201cb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00201cf:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00201d5:	e8 62 e9 ff ff       	call   c001eb3c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c00201da:	eb 48                	jmp    c0020224 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c00201dc:	b8 01 00 00 00       	mov    eax,0x1
c00201e1:	88 d1                	mov    cl,dl
c00201e3:	d3 e0                	shl    eax,cl
c00201e5:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c00201ea:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c00201f0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00201f4:	89 c7                	mov    edi,eax
c00201f6:	c1 e3 07             	shl    ebx,0x7
c00201f9:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00201fd:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c0020203:	85 c7                	test   edi,eax
c0020205:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c002020b:	0f 84 a3 00 00 00    	je     c00202b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c0020211:	0f ba e0 1e          	bt     eax,0x1e
c0020215:	73 1a                	jae    c0020231 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c0020217:	83 ec 0c             	sub    esp,0xc
c002021a:	68 df 57 02 c0       	push   0xc00257df
c002021f:	e8 2a 6d fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0020224:	83 c4 10             	add    esp,0x10
c0020227:	b8 01 00 00 00       	mov    eax,0x1
c002022c:	e9 b6 00 00 00       	jmp    c00202e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c0020231:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c0020237:	83 f8 0d             	cmp    eax,0xd
c002023a:	77 0a                	ja     c0020246 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c002023c:	83 ec 0c             	sub    esp,0xc
c002023f:	68 c8 00 00 00       	push   0xc8
c0020244:	eb 28                	jmp    c002026e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c0020246:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c002024c:	83 f8 0d             	cmp    eax,0xd
c002024f:	77 0a                	ja     c002025b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c0020251:	83 ec 0c             	sub    esp,0xc
c0020254:	68 58 02 00 00       	push   0x258
c0020259:	eb 13                	jmp    c002026e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c002025b:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c0020261:	83 f8 06             	cmp    eax,0x6
c0020264:	77 10                	ja     c0020276 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c0020266:	83 ec 0c             	sub    esp,0xc
c0020269:	68 dc 05 00 00       	push   0x5dc
c002026e:	e8 4d 69 ff ff       	call   c0016bc0 <milliTenthSleep(unsigned int)>
c0020273:	83 c4 10             	add    esp,0x10
c0020276:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002027a:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c002027d:	75 06                	jne    c0020285 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c002027f:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c0020283:	74 15                	je     c002029a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c0020285:	83 fe 06             	cmp    esi,0x6
c0020288:	77 10                	ja     c002029a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c002028a:	83 ec 0c             	sub    esp,0xc
c002028d:	68 c4 09 00 00       	push   0x9c4
c0020292:	e8 29 69 ff ff       	call   c0016bc0 <milliTenthSleep(unsigned int)>
c0020297:	83 c4 10             	add    esp,0x10
c002029a:	46                   	inc    esi
c002029b:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c00202a1:	0f 85 56 ff ff ff    	jne    c00201fd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c00202a7:	83 ec 0c             	sub    esp,0xc
c00202aa:	68 f2 57 02 c0       	push   0xc00257f2
c00202af:	e9 6b ff ff ff       	jmp    c002021f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c00202b4:	0f ba e0 1e          	bt     eax,0x1e
c00202b8:	73 0d                	jae    c00202c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c00202ba:	83 ec 0c             	sub    esp,0xc
c00202bd:	68 06 58 02 c0       	push   0xc0025806
c00202c2:	e9 58 ff ff ff       	jmp    c002021f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c00202c7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00202cc:	74 17                	je     c00202e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c00202ce:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c00202d3:	74 10                	je     c00202e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c00202d5:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c00202db:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00202df:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00202e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00202e5:	31 c0                	xor    eax,eax
c00202e7:	83 c4 2c             	add    esp,0x2c
c00202ea:	5b                   	pop    ebx
c00202eb:	5e                   	pop    esi
c00202ec:	5f                   	pop    edi
c00202ed:	5d                   	pop    ebp
c00202ee:	c3                   	ret    
c00202ef:	90                   	nop

c00202f0 <SATAPI::eject()>:
c00202f0:	57                   	push   edi
c00202f1:	b9 03 00 00 00       	mov    ecx,0x3
c00202f6:	83 ec 18             	sub    esp,0x18
c00202f9:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00202fd:	fc                   	cld    
c00202fe:	31 c0                	xor    eax,eax
c0020300:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020302:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020307:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002030c:	50                   	push   eax
c002030d:	6a 00                	push   0x0
c002030f:	6a 00                	push   0x0
c0020311:	6a 00                	push   0x0
c0020313:	6a 00                	push   0x0
c0020315:	6a 02                	push   0x2
c0020317:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002031b:	50                   	push   eax
c002031c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020320:	e8 e5 fc ff ff       	call   c002000a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020325:	83 c4 38             	add    esp,0x38
c0020328:	31 c0                	xor    eax,eax
c002032a:	5f                   	pop    edi
c002032b:	c3                   	ret    

c002032c <SATAPI::detectMedia()>:
c002032c:	53                   	push   ebx
c002032d:	83 ec 14             	sub    esp,0x14
c0020330:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020334:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002033a:	e8 d5 af fe ff       	call   c000b314 <VCache::writeWriteBuffer()>
c002033f:	59                   	pop    ecx
c0020340:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020346:	e8 b9 af fe ff       	call   c000b304 <VCache::invalidateReadBuffer()>
c002034b:	c7 04 24 1b 58 02 c0 	mov    DWORD PTR [esp],0xc002581b
c0020352:	e8 f7 6b fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0020357:	83 c4 10             	add    esp,0x10
c002035a:	31 c0                	xor    eax,eax
c002035c:	8b 14 85 e0 ba 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4520]
c0020363:	85 d2                	test   edx,edx
c0020365:	74 0f                	je     c0020376 <SATAPI::detectMedia()+0x4a>
c0020367:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c002036d:	75 07                	jne    c0020376 <SATAPI::detectMedia()+0x4a>
c002036f:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c0020376:	40                   	inc    eax
c0020377:	83 f8 1a             	cmp    eax,0x1a
c002037a:	75 e0                	jne    c002035c <SATAPI::detectMedia()+0x30>
c002037c:	83 c4 08             	add    esp,0x8
c002037f:	5b                   	pop    ebx
c0020380:	c3                   	ret    
c0020381:	90                   	nop

c0020382 <SATAPI::open(int, int, void*)>:
c0020382:	56                   	push   esi
c0020383:	53                   	push   ebx
c0020384:	51                   	push   ecx
c0020385:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020389:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002038d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020397:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002039d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00203a1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00203ab:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00203b5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00203bc:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00203c2:	e8 e9 fb fe ff       	call   c000ffb0 <Phys::allocatePage()>
c00203c7:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00203cd:	89 c6                	mov    esi,eax
c00203cf:	e8 dc fb fe ff       	call   c000ffb0 <Phys::allocatePage()>
c00203d4:	81 c6 00 10 00 00    	add    esi,0x1000
c00203da:	39 c6                	cmp    esi,eax
c00203dc:	74 10                	je     c00203ee <SATAPI::open(int, int, void*)+0x6c>
c00203de:	83 ec 0c             	sub    esp,0xc
c00203e1:	68 30 58 02 c0       	push   0xc0025830
c00203e6:	e8 cb f9 fe ff       	call   c000fdb6 <KePanic(char const*)>
c00203eb:	83 c4 10             	add    esp,0x10
c00203ee:	83 ec 0c             	sub    esp,0xc
c00203f1:	6a 02                	push   0x2
c00203f3:	e8 7d 2d ff ff       	call   c0013175 <Virt::allocateKernelVirtualPages(int)>
c00203f8:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c00203fe:	6a 03                	push   0x3
c0020400:	50                   	push   eax
c0020401:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0020407:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c002040d:	e8 3c 34 ff ff       	call   c001384e <VAS::mapPage(unsigned long, unsigned long, int)>
c0020412:	83 c4 14             	add    esp,0x14
c0020415:	68 78 01 00 00       	push   0x178
c002041a:	e8 51 f6 fe ff       	call   c000fa70 <malloc>
c002041f:	83 c4 0c             	add    esp,0xc
c0020422:	6a 00                	push   0x0
c0020424:	68 ff ff ff 7f       	push   0x7fffffff
c0020429:	6a 00                	push   0x0
c002042b:	6a 00                	push   0x0
c002042d:	53                   	push   ebx
c002042e:	68 46 58 02 c0       	push   0xc0025846
c0020433:	89 c6                	mov    esi,eax
c0020435:	50                   	push   eax
c0020436:	e8 75 a3 fe ff       	call   c000a7b0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002043b:	83 c4 14             	add    esp,0x14
c002043e:	56                   	push   esi
c002043f:	e8 2c a4 fe ff       	call   c000a870 <LogicalDisk::assignDriveLetter()>
c0020444:	5a                   	pop    edx
c0020445:	59                   	pop    ecx
c0020446:	0f be c0             	movsx  eax,al
c0020449:	50                   	push   eax
c002044a:	68 8c 56 02 c0       	push   0xc002568c
c002044f:	e8 fa 6a fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0020454:	58                   	pop    eax
c0020455:	5a                   	pop    edx
c0020456:	56                   	push   esi
c0020457:	53                   	push   ebx
c0020458:	e8 3b 95 fe ff       	call   c0009998 <Device::addChild(Device*)>
c002045d:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0020463:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020466:	e8 77 99 fe ff       	call   c0009de2 <PhysicalDisk::startCache()>
c002046b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0020472:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020475:	e8 b2 fe ff ff       	call   c002032c <SATAPI::detectMedia()>
c002047a:	83 c4 14             	add    esp,0x14
c002047d:	31 c0                	xor    eax,eax
c002047f:	5b                   	pop    ebx
c0020480:	5e                   	pop    esi
c0020481:	c3                   	ret    

c0020482 <SATAPI::read(unsigned long long, int, void*)>:
c0020482:	55                   	push   ebp
c0020483:	57                   	push   edi
c0020484:	56                   	push   esi
c0020485:	53                   	push   ebx
c0020486:	83 ec 3c             	sub    esp,0x3c
c0020489:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c002048d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020491:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0020495:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0020499:	83 fd 04             	cmp    ebp,0x4
c002049c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00204a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00204a4:	7e 10                	jle    c00204b6 <SATAPI::read(unsigned long long, int, void*)+0x34>
c00204a6:	83 ec 0c             	sub    esp,0xc
c00204a9:	68 54 58 02 c0       	push   0xc0025854
c00204ae:	e8 03 f9 fe ff       	call   c000fdb6 <KePanic(char const*)>
c00204b3:	83 c4 10             	add    esp,0x10
c00204b6:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00204bc:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00204c2:	51                   	push   ecx
c00204c3:	50                   	push   eax
c00204c4:	83 c0 02             	add    eax,0x2
c00204c7:	c1 e0 07             	shl    eax,0x7
c00204ca:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c00204d0:	50                   	push   eax
c00204d1:	52                   	push   edx
c00204d2:	e8 af e6 ff ff       	call   c001eb86 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00204d7:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00204db:	b9 03 00 00 00       	mov    ecx,0x3
c00204e0:	fc                   	cld    
c00204e1:	31 c0                	xor    eax,eax
c00204e3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00204e5:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c00204ea:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00204ef:	83 c4 0c             	add    esp,0xc
c00204f2:	6a 00                	push   0x0
c00204f4:	6a 00                	push   0x0
c00204f6:	6a 00                	push   0x0
c00204f8:	6a 00                	push   0x0
c00204fa:	6a 02                	push   0x2
c00204fc:	8d 44 24 30          	lea    eax,[esp+0x30]
c0020500:	50                   	push   eax
c0020501:	53                   	push   ebx
c0020502:	e8 03 fb ff ff       	call   c002000a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020507:	83 c4 20             	add    esp,0x20
c002050a:	85 c0                	test   eax,eax
c002050c:	89 c6                	mov    esi,eax
c002050e:	75 46                	jne    c0020556 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c0020510:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0020514:	b9 03 00 00 00       	mov    ecx,0x3
c0020519:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002051b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002051f:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c0020524:	0f c8                	bswap  eax
c0020526:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c002052a:	89 e8                	mov    eax,ebp
c002052c:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0020530:	50                   	push   eax
c0020531:	55                   	push   ebp
c0020532:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c0020536:	c1 e5 0b             	shl    ebp,0xb
c0020539:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002053d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020541:	55                   	push   ebp
c0020542:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0020546:	50                   	push   eax
c0020547:	53                   	push   ebx
c0020548:	e8 bd fa ff ff       	call   c002000a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002054d:	83 c4 20             	add    esp,0x20
c0020550:	85 c0                	test   eax,eax
c0020552:	89 c6                	mov    esi,eax
c0020554:	74 0c                	je     c0020562 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c0020556:	83 ec 0c             	sub    esp,0xc
c0020559:	53                   	push   ebx
c002055a:	e8 cd fd ff ff       	call   c002032c <SATAPI::detectMedia()>
c002055f:	83 c4 10             	add    esp,0x10
c0020562:	83 c4 3c             	add    esp,0x3c
c0020565:	89 f0                	mov    eax,esi
c0020567:	5b                   	pop    ebx
c0020568:	5e                   	pop    esi
c0020569:	5f                   	pop    edi
c002056a:	5d                   	pop    ebp
c002056b:	c3                   	ret    

c002056c <IOAPIC::close(int, int, void*)>:
c002056c:	b8 00 00 00 00       	mov    eax,0x0
c0020571:	c3                   	ret    

c0020572 <apicGetBase()>:
c0020572:	55                   	push   ebp
c0020573:	89 e5                	mov    ebp,esp
c0020575:	83 ec 08             	sub    esp,0x8
c0020578:	83 ec 0c             	sub    esp,0xc
c002057b:	68 b8 58 02 c0       	push   0xc00258b8
c0020580:	e8 31 f8 fe ff       	call   c000fdb6 <KePanic(char const*)>
c0020585:	83 c4 10             	add    esp,0x10
c0020588:	b8 00 00 00 00       	mov    eax,0x0
c002058d:	c9                   	leave  
c002058e:	c3                   	ret    
c002058f:	90                   	nop

c0020590 <IOAPIC::IOAPIC()>:
c0020590:	83 ec 0c             	sub    esp,0xc
c0020593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020597:	83 ec 08             	sub    esp,0x8
c002059a:	68 c7 58 02 c0       	push   0xc00258c7
c002059f:	50                   	push   eax
c00205a0:	e8 55 95 fe ff       	call   c0009afa <Device::Device(char const*)>
c00205a5:	83 c4 10             	add    esp,0x10
c00205a8:	ba e8 58 02 c0       	mov    edx,0xc00258e8
c00205ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205b1:	89 10                	mov    DWORD PTR [eax],edx
c00205b3:	90                   	nop
c00205b4:	83 c4 0c             	add    esp,0xc
c00205b7:	c3                   	ret    

c00205b8 <apicOpen()>:
c00205b8:	55                   	push   ebp
c00205b9:	89 e5                	mov    ebp,esp
c00205bb:	53                   	push   ebx
c00205bc:	83 ec 34             	sub    esp,0x34
c00205bf:	83 ec 0c             	sub    esp,0xc
c00205c2:	68 cf 58 02 c0       	push   0xc00258cf
c00205c7:	e8 82 69 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00205cc:	83 c4 10             	add    esp,0x10
c00205cf:	a0 a0 f4 02 c0       	mov    al,ds:0xc002f4a0
c00205d4:	83 f0 01             	xor    eax,0x1
c00205d7:	0f b6 c0             	movzx  eax,al
c00205da:	85 c0                	test   eax,eax
c00205dc:	0f 84 a3 00 00 00    	je     c0020685 <apicOpen()+0xcd>
c00205e2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00205e6:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c00205eb:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c00205ef:	0f b6 c0             	movzx  eax,al
c00205f2:	39 c2                	cmp    edx,eax
c00205f4:	0f 83 84 00 00 00    	jae    c002067e <apicOpen()+0xc6>
c00205fa:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c0020601:	83 ec 0c             	sub    esp,0xc
c0020604:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0020607:	e8 64 f4 fe ff       	call   c000fa70 <malloc>
c002060c:	83 c4 10             	add    esp,0x10
c002060f:	89 c3                	mov    ebx,eax
c0020611:	83 ec 0c             	sub    esp,0xc
c0020614:	53                   	push   ebx
c0020615:	e8 76 ff ff ff       	call   c0020590 <IOAPIC::IOAPIC()>
c002061a:	83 c4 10             	add    esp,0x10
c002061d:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0020620:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0020624:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0020627:	89 14 85 80 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0b80],edx
c002062e:	a1 60 f4 02 c0       	mov    eax,ds:0xc002f460
c0020633:	83 c0 01             	add    eax,0x1
c0020636:	a3 60 f4 02 c0       	mov    ds:0xc002f460,eax
c002063b:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0020640:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0020646:	83 ec 08             	sub    esp,0x8
c0020649:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002064c:	50                   	push   eax
c002064d:	e8 46 93 fe ff       	call   c0009998 <Device::addChild(Device*)>
c0020652:	83 c4 10             	add    esp,0x10
c0020655:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020658:	8b 00                	mov    eax,DWORD PTR [eax]
c002065a:	83 c0 08             	add    eax,0x8
c002065d:	8b 00                	mov    eax,DWORD PTR [eax]
c002065f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0020663:	6a 00                	push   0x0
c0020665:	6a 00                	push   0x0
c0020667:	52                   	push   edx
c0020668:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002066b:	ff d0                	call   eax
c002066d:	83 c4 10             	add    esp,0x10
c0020670:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c0020673:	83 c0 01             	add    eax,0x1
c0020676:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c0020679:	e9 68 ff ff ff       	jmp    c00205e6 <apicOpen()+0x2e>
c002067e:	c6 05 a0 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f4a0,0x1
c0020685:	e8 e8 fe ff ff       	call   c0020572 <apicGetBase()>
c002068a:	05 f0 00 00 00       	add    eax,0xf0
c002068f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0020692:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0020695:	8b 00                	mov    eax,DWORD PTR [eax]
c0020697:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002069a:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c00206a1:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c00206a8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00206ab:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00206ae:	89 10                	mov    DWORD PTR [eax],edx
c00206b0:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c00206b7:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c00206bc:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c00206bf:	7d 7c                	jge    c002073d <apicOpen()+0x185>
c00206c1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00206c4:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c00206cb:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c00206ce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00206d1:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c00206d8:	c1 e8 08             	shr    eax,0x8
c00206db:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c00206df:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00206e2:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c00206e9:	c1 e8 18             	shr    eax,0x18
c00206ec:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00206ef:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c00206f3:	3d ff 00 00 00       	cmp    eax,0xff
c00206f8:	75 3a                	jne    c0020734 <apicOpen()+0x17c>
c00206fa:	e8 73 fe ff ff       	call   c0020572 <apicGetBase()>
c00206ff:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c0020703:	83 fa 01             	cmp    edx,0x1
c0020706:	75 07                	jne    c002070f <apicOpen()+0x157>
c0020708:	ba 60 03 00 00       	mov    edx,0x360
c002070d:	eb 05                	jmp    c0020714 <apicOpen()+0x15c>
c002070f:	ba 50 03 00 00       	mov    edx,0x350
c0020714:	01 d0                	add    eax,edx
c0020716:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0020719:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002071c:	8b 00                	mov    eax,DWORD PTR [eax]
c002071e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0020721:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0020728:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c002072c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002072f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0020732:	89 10                	mov    DWORD PTR [eax],edx
c0020734:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0020738:	e9 7a ff ff ff       	jmp    c00206b7 <apicOpen()+0xff>
c002073d:	90                   	nop
c002073e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020741:	c9                   	leave  
c0020742:	c3                   	ret    
c0020743:	90                   	nop

c0020744 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0020744:	55                   	push   ebp
c0020745:	89 e5                	mov    ebp,esp
c0020747:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002074a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020750:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0020753:	72 1d                	jb     c0020772 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020755:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020758:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002075e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020761:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0020767:	01 d0                	add    eax,edx
c0020769:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002076c:	73 04                	jae    c0020772 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002076e:	b0 01                	mov    al,0x1
c0020770:	eb 02                	jmp    c0020774 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0020772:	b0 00                	mov    al,0x0
c0020774:	5d                   	pop    ebp
c0020775:	c3                   	ret    

c0020776 <IOAPIC::read(int)>:
c0020776:	55                   	push   ebp
c0020777:	89 e5                	mov    ebp,esp
c0020779:	83 ec 10             	sub    esp,0x10
c002077c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002077f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020785:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020788:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002078b:	0f b6 d0             	movzx  edx,al
c002078e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020791:	89 10                	mov    DWORD PTR [eax],edx
c0020793:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020796:	83 c0 10             	add    eax,0x10
c0020799:	8b 00                	mov    eax,DWORD PTR [eax]
c002079b:	c9                   	leave  
c002079c:	c3                   	ret    
c002079d:	90                   	nop

c002079e <IOAPIC::open(int, int, void*)>:
c002079e:	55                   	push   ebp
c002079f:	89 e5                	mov    ebp,esp
c00207a1:	57                   	push   edi
c00207a2:	56                   	push   esi
c00207a3:	53                   	push   ebx
c00207a4:	83 ec 04             	sub    esp,0x4
c00207a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00207aa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00207ad:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00207b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00207b6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00207bc:	8b 14 85 80 be 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4180]
c00207c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00207c6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00207cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00207cf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00207d5:	8b 14 85 00 bf 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4100]
c00207dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00207df:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00207e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00207e8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00207ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00207f1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00207f7:	0f b6 f0             	movzx  esi,al
c00207fa:	89 d0                	mov    eax,edx
c00207fc:	ba 00 00 00 00       	mov    edx,0x0
c0020801:	89 c7                	mov    edi,eax
c0020803:	83 e7 ff             	and    edi,0xffffffff
c0020806:	89 f9                	mov    ecx,edi
c0020808:	0f b6 da             	movzx  ebx,dl
c002080b:	89 c8                	mov    eax,ecx
c002080d:	89 da                	mov    edx,ebx
c002080f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020812:	8d 5e 08             	lea    ebx,[esi+0x8]
c0020815:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0020819:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002081d:	83 e0 00             	and    eax,0x0
c0020820:	09 d0                	or     eax,edx
c0020822:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0020826:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020829:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002082f:	8d 50 01             	lea    edx,[eax+0x1]
c0020832:	88 d1                	mov    cl,dl
c0020834:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0020837:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c002083d:	0f b6 d0             	movzx  edx,al
c0020840:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020843:	83 c2 08             	add    edx,0x8
c0020846:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002084a:	0f b6 c9             	movzx  ecx,cl
c002084d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0020853:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0020857:	6a 01                	push   0x1
c0020859:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002085c:	e8 15 ff ff ff       	call   c0020776 <IOAPIC::read(int)>
c0020861:	83 c4 08             	add    esp,0x8
c0020864:	c1 f8 10             	sar    eax,0x10
c0020867:	0f b6 c0             	movzx  eax,al
c002086a:	8d 50 01             	lea    edx,[eax+0x1]
c002086d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020870:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0020876:	b8 00 00 00 00       	mov    eax,0x0
c002087b:	8d 65 f4             	lea    esp,[ebp-0xc]
c002087e:	5b                   	pop    ebx
c002087f:	5e                   	pop    esi
c0020880:	5f                   	pop    edi
c0020881:	5d                   	pop    ebp
c0020882:	c3                   	ret    
c0020883:	90                   	nop

c0020884 <IOAPIC::write(int, int)>:
c0020884:	55                   	push   ebp
c0020885:	89 e5                	mov    ebp,esp
c0020887:	83 ec 10             	sub    esp,0x10
c002088a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002088d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020893:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020896:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020899:	0f b6 d0             	movzx  edx,al
c002089c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002089f:	89 10                	mov    DWORD PTR [eax],edx
c00208a1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00208a4:	8d 50 10             	lea    edx,[eax+0x10]
c00208a7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00208aa:	89 02                	mov    DWORD PTR [edx],eax
c00208ac:	90                   	nop
c00208ad:	c9                   	leave  
c00208ae:	c3                   	ret    
c00208af:	90                   	nop

c00208b0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00208b0:	55                   	push   ebp
c00208b1:	89 e5                	mov    ebp,esp
c00208b3:	53                   	push   ebx
c00208b4:	83 ec 2c             	sub    esp,0x2c
c00208b7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00208ba:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00208bd:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00208c0:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00208c3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00208c6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00208c9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00208cc:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00208cf:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00208d2:	88 d8                	mov    al,bl
c00208d4:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00208d7:	88 c8                	mov    al,cl
c00208d9:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00208dc:	88 d0                	mov    al,dl
c00208de:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00208e1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00208e5:	83 c0 08             	add    eax,0x8
c00208e8:	d1 e0                	shl    eax,1
c00208ea:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00208ed:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00208f1:	83 c0 08             	add    eax,0x8
c00208f4:	d1 e0                	shl    eax,1
c00208f6:	83 c0 01             	add    eax,0x1
c00208f9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00208fc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00208ff:	50                   	push   eax
c0020900:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020903:	e8 6e fe ff ff       	call   c0020776 <IOAPIC::read(int)>
c0020908:	83 c4 08             	add    esp,0x8
c002090b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002090e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0020915:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020918:	c1 e0 18             	shl    eax,0x18
c002091b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002091e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0020921:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020924:	52                   	push   edx
c0020925:	50                   	push   eax
c0020926:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020929:	e8 56 ff ff ff       	call   c0020884 <IOAPIC::write(int, int)>
c002092e:	83 c4 0c             	add    esp,0xc
c0020931:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020934:	50                   	push   eax
c0020935:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020938:	e8 39 fe ff ff       	call   c0020776 <IOAPIC::read(int)>
c002093d:	83 c4 08             	add    esp,0x8
c0020940:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0020943:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002094a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0020951:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0020958:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c002095c:	85 c0                	test   eax,eax
c002095e:	74 09                	je     c0020969 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c0020960:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0020967:	eb 07                	jmp    c0020970 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c0020969:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0020970:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c0020974:	85 c0                	test   eax,eax
c0020976:	74 09                	je     c0020981 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c0020978:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002097f:	eb 07                	jmp    c0020988 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c0020981:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0020988:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002098f:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0020993:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0020996:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0020999:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002099c:	52                   	push   edx
c002099d:	50                   	push   eax
c002099e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00209a1:	e8 de fe ff ff       	call   c0020884 <IOAPIC::write(int, int)>
c00209a6:	83 c4 0c             	add    esp,0xc
c00209a9:	90                   	nop
c00209aa:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00209ad:	c9                   	leave  
c00209ae:	c3                   	ret    
c00209af:	90                   	nop

c00209b0 <APICTimer::close(int, int, void*)>:
c00209b0:	b8 00 00 00 00       	mov    eax,0x0
c00209b5:	c3                   	ret    
c00209b6:	66 90                	xchg   ax,ax

c00209b8 <apicTimerHandler(regs*, void*)>:
c00209b8:	83 ec 0c             	sub    esp,0xc
c00209bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00209bf:	8b 08                	mov    ecx,DWORD PTR [eax]
c00209c1:	b8 10 27 00 00       	mov    eax,0x2710
c00209c6:	ba 00 00 00 00       	mov    edx,0x0
c00209cb:	f7 f1                	div    ecx
c00209cd:	83 ec 0c             	sub    esp,0xc
c00209d0:	50                   	push   eax
c00209d1:	e8 96 a6 fe ff       	call   c000b06c <timerHandler(unsigned int)>
c00209d6:	83 c4 10             	add    esp,0x10
c00209d9:	90                   	nop
c00209da:	83 c4 0c             	add    esp,0xc
c00209dd:	c3                   	ret    
c00209de:	66 90                	xchg   ax,ax

c00209e0 <APICTimer::open(int, int, void*)>:
c00209e0:	83 ec 0c             	sub    esp,0xc
c00209e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00209e9:	83 c0 24             	add    eax,0x24
c00209ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00209ee:	83 ec 08             	sub    esp,0x8
c00209f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00209f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00209f9:	ff d0                	call   eax
c00209fb:	83 c4 10             	add    esp,0x10
c00209fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a02:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020a06:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020a14:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0020a1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020a1e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0020a24:	83 ec 0c             	sub    esp,0xc
c0020a27:	51                   	push   ecx
c0020a28:	6a 01                	push   0x1
c0020a2a:	68 b8 09 02 c0       	push   0xc00209b8
c0020a2f:	52                   	push   edx
c0020a30:	50                   	push   eax
c0020a31:	e8 0e 8f fe ff       	call   c0009944 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020a36:	83 c4 20             	add    esp,0x20
c0020a39:	89 c2                	mov    edx,eax
c0020a3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a3f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020a45:	b8 00 00 00 00       	mov    eax,0x0
c0020a4a:	83 c4 0c             	add    esp,0xc
c0020a4d:	c3                   	ret    
c0020a4e:	66 90                	xchg   ax,ax

c0020a50 <APICTimer::write(int)>:
c0020a50:	83 ec 0c             	sub    esp,0xc
c0020a53:	83 ec 0c             	sub    esp,0xc
c0020a56:	68 0c 59 02 c0       	push   0xc002590c
c0020a5b:	e8 56 f3 fe ff       	call   c000fdb6 <KePanic(char const*)>
c0020a60:	83 c4 10             	add    esp,0x10
c0020a63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a67:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020a6b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020a71:	90                   	nop
c0020a72:	83 c4 0c             	add    esp,0xc
c0020a75:	c3                   	ret    
c0020a76:	66 90                	xchg   ax,ax

c0020a78 <APICTimer::APICTimer()>:
c0020a78:	83 ec 0c             	sub    esp,0xc
c0020a7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a7f:	83 ec 08             	sub    esp,0x8
c0020a82:	68 1c 59 02 c0       	push   0xc002591c
c0020a87:	50                   	push   eax
c0020a88:	e8 13 a5 fe ff       	call   c000afa0 <Timer::Timer(char const*)>
c0020a8d:	83 c4 10             	add    esp,0x10
c0020a90:	ba 30 59 02 c0       	mov    edx,0xc0025930
c0020a95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a99:	89 10                	mov    DWORD PTR [eax],edx
c0020a9b:	90                   	nop
c0020a9c:	83 c4 0c             	add    esp,0xc
c0020a9f:	c3                   	ret    

c0020aa0 <PIT::write(int)>:
c0020aa0:	83 ec 10             	sub    esp,0x10
c0020aa3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020aa7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020aab:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020ab1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020ab5:	a3 a4 f4 02 c0       	mov    ds:0xc002f4a4,eax
c0020aba:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0020abf:	89 c2                	mov    edx,eax
c0020ac1:	c1 fa 1f             	sar    edx,0x1f
c0020ac4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0020ac8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020acc:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0020ad3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0020ad8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0020adc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0020ae1:	ee                   	out    dx,al
c0020ae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ae6:	0f b6 c0             	movzx  eax,al
c0020ae9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0020af0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0020af4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0020af8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0020afd:	ee                   	out    dx,al
c0020afe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020b02:	c1 f8 08             	sar    eax,0x8
c0020b05:	0f b6 c0             	movzx  eax,al
c0020b08:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0020b0f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020b13:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020b17:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0020b1c:	ee                   	out    dx,al
c0020b1d:	90                   	nop
c0020b1e:	83 c4 10             	add    esp,0x10
c0020b21:	c3                   	ret    
c0020b22:	66 90                	xchg   ax,ax

c0020b24 <pitHandler(regs*, void*)>:
c0020b24:	83 ec 0c             	sub    esp,0xc
c0020b27:	8b 0d a4 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f4a4
c0020b2d:	b8 10 27 00 00       	mov    eax,0x2710
c0020b32:	89 c2                	mov    edx,eax
c0020b34:	c1 fa 1f             	sar    edx,0x1f
c0020b37:	f7 f9                	idiv   ecx
c0020b39:	83 ec 0c             	sub    esp,0xc
c0020b3c:	50                   	push   eax
c0020b3d:	e8 2a a5 fe ff       	call   c000b06c <timerHandler(unsigned int)>
c0020b42:	83 c4 10             	add    esp,0x10
c0020b45:	90                   	nop
c0020b46:	83 c4 0c             	add    esp,0xc
c0020b49:	c3                   	ret    
c0020b4a:	66 90                	xchg   ax,ax

c0020b4c <PIT::open(int, int, void*)>:
c0020b4c:	83 ec 0c             	sub    esp,0xc
c0020b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b53:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b55:	83 c0 24             	add    eax,0x24
c0020b58:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b5a:	83 ec 08             	sub    esp,0x8
c0020b5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b65:	ff d0                	call   eax
c0020b67:	83 c4 10             	add    esp,0x10
c0020b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b6e:	83 ec 0c             	sub    esp,0xc
c0020b71:	6a 00                	push   0x0
c0020b73:	6a 01                	push   0x1
c0020b75:	68 24 0b 02 c0       	push   0xc0020b24
c0020b7a:	6a 00                	push   0x0
c0020b7c:	50                   	push   eax
c0020b7d:	e8 c2 8d fe ff       	call   c0009944 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020b82:	83 c4 20             	add    esp,0x20
c0020b85:	89 c2                	mov    edx,eax
c0020b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b8b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020b91:	b8 00 00 00 00       	mov    eax,0x0
c0020b96:	83 c4 0c             	add    esp,0xc
c0020b99:	c3                   	ret    
c0020b9a:	66 90                	xchg   ax,ax

c0020b9c <PIT::close(int, int, void*)>:
c0020b9c:	83 ec 0c             	sub    esp,0xc
c0020b9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ba3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0020bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bb1:	6a 01                	push   0x1
c0020bb3:	68 24 0b 02 c0       	push   0xc0020b24
c0020bb8:	6a 00                	push   0x0
c0020bba:	50                   	push   eax
c0020bbb:	e8 ba 8d fe ff       	call   c000997a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0020bc0:	83 c4 10             	add    esp,0x10
c0020bc3:	b8 00 00 00 00       	mov    eax,0x0
c0020bc8:	83 c4 0c             	add    esp,0xc
c0020bcb:	c3                   	ret    

c0020bcc <PIT::PIT()>:
c0020bcc:	83 ec 0c             	sub    esp,0xc
c0020bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bd3:	83 ec 08             	sub    esp,0x8
c0020bd6:	68 58 59 02 c0       	push   0xc0025958
c0020bdb:	50                   	push   eax
c0020bdc:	e8 bf a3 fe ff       	call   c000afa0 <Timer::Timer(char const*)>
c0020be1:	83 c4 10             	add    esp,0x10
c0020be4:	ba 80 59 02 c0       	mov    edx,0xc0025980
c0020be9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bed:	89 10                	mov    DWORD PTR [eax],edx
c0020bef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bf3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020bf9:	0f b6 d0             	movzx  edx,al
c0020bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c00:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0020c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c0b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020c11:	0f b6 d0             	movzx  edx,al
c0020c14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c18:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0020c1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c21:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020c27:	8d 50 01             	lea    edx,[eax+0x1]
c0020c2a:	88 d1                	mov    cl,dl
c0020c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020c30:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0020c36:	0f b6 d0             	movzx  edx,al
c0020c39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c3d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020c41:	83 e1 3f             	and    ecx,0x3f
c0020c44:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020c48:	90                   	nop
c0020c49:	83 c4 0c             	add    esp,0xc
c0020c4c:	c3                   	ret    
c0020c4d:	66 90                	xchg   ax,ax
c0020c4f:	90                   	nop

c0020c50 <avxDetect>:
c0020c50:	b8 01 00 00 00       	mov    eax,0x1
c0020c55:	0f a2                	cpuid  
c0020c57:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c0020c5d:	74 15                	je     c0020c74 <avxDetect.noAVX>
c0020c5f:	b8 01 00 00 00       	mov    eax,0x1
c0020c64:	0f a2                	cpuid  
c0020c66:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c0020c6c:	74 06                	je     c0020c74 <avxDetect.noAVX>
c0020c6e:	b8 01 00 00 00       	mov    eax,0x1
c0020c73:	c3                   	ret    

c0020c74 <avxDetect.noAVX>:
c0020c74:	b8 00 00 00 00       	mov    eax,0x0
c0020c79:	c3                   	ret    

c0020c7a <avxSave>:
c0020c7a:	53                   	push   ebx
c0020c7b:	52                   	push   edx
c0020c7c:	31 c0                	xor    eax,eax
c0020c7e:	48                   	dec    eax
c0020c7f:	89 c2                	mov    edx,eax
c0020c81:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020c85:	0f ae 23             	xsave  [ebx]
c0020c88:	5a                   	pop    edx
c0020c89:	5b                   	pop    ebx
c0020c8a:	c3                   	ret    

c0020c8b <avxLoad>:
c0020c8b:	53                   	push   ebx
c0020c8c:	52                   	push   edx
c0020c8d:	31 c0                	xor    eax,eax
c0020c8f:	48                   	dec    eax
c0020c90:	89 c2                	mov    edx,eax
c0020c92:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020c96:	0f ae 2b             	xrstor [ebx]
c0020c99:	5a                   	pop    edx
c0020c9a:	5b                   	pop    ebx
c0020c9b:	c3                   	ret    

c0020c9c <avxInit>:
c0020c9c:	e8 47 03 00 00       	call   c0020fe8 <sseInit>
c0020ca1:	50                   	push   eax
c0020ca2:	51                   	push   ecx
c0020ca3:	0f 20 e0             	mov    eax,cr4
c0020ca6:	0d 00 00 04 00       	or     eax,0x40000
c0020cab:	0f 22 e0             	mov    cr4,eax
c0020cae:	31 c9                	xor    ecx,ecx
c0020cb0:	0f 01 d0             	xgetbv 
c0020cb3:	0d 07 00 00 00       	or     eax,0x7
c0020cb8:	0f 01 d1             	xsetbv 
c0020cbb:	59                   	pop    ecx
c0020cbc:	58                   	pop    eax
c0020cbd:	c3                   	ret    

c0020cbe <avxClose>:
c0020cbe:	c3                   	ret    
c0020cbf:	90                   	nop

c0020cc0 <isr0>:
c0020cc0:	fa                   	cli    
c0020cc1:	68 00 00 00 00       	push   0x0
c0020cc6:	68 00 00 00 00       	push   0x0
c0020ccb:	e9 56 01 00 00       	jmp    c0020e26 <int_common_stub>

c0020cd0 <isr1>:
c0020cd0:	fa                   	cli    
c0020cd1:	6a 00                	push   0x0
c0020cd3:	6a 01                	push   0x1
c0020cd5:	e9 4c 01 00 00       	jmp    c0020e26 <int_common_stub>

c0020cda <isr2>:
c0020cda:	fa                   	cli    
c0020cdb:	6a 00                	push   0x0
c0020cdd:	6a 02                	push   0x2
c0020cdf:	e9 42 01 00 00       	jmp    c0020e26 <int_common_stub>

c0020ce4 <isr3>:
c0020ce4:	fa                   	cli    
c0020ce5:	6a 00                	push   0x0
c0020ce7:	6a 03                	push   0x3
c0020ce9:	e9 38 01 00 00       	jmp    c0020e26 <int_common_stub>

c0020cee <isr4>:
c0020cee:	fa                   	cli    
c0020cef:	6a 00                	push   0x0
c0020cf1:	6a 04                	push   0x4
c0020cf3:	e9 2e 01 00 00       	jmp    c0020e26 <int_common_stub>

c0020cf8 <isr5>:
c0020cf8:	fa                   	cli    
c0020cf9:	6a 00                	push   0x0
c0020cfb:	6a 05                	push   0x5
c0020cfd:	e9 24 01 00 00       	jmp    c0020e26 <int_common_stub>

c0020d02 <isr6>:
c0020d02:	fa                   	cli    
c0020d03:	6a 00                	push   0x0
c0020d05:	6a 06                	push   0x6
c0020d07:	e9 1a 01 00 00       	jmp    c0020e26 <int_common_stub>

c0020d0c <isr7>:
c0020d0c:	fa                   	cli    
c0020d0d:	6a 00                	push   0x0
c0020d0f:	6a 07                	push   0x7
c0020d11:	e9 10 01 00 00       	jmp    c0020e26 <int_common_stub>

c0020d16 <isr8>:
c0020d16:	fa                   	cli    
c0020d17:	6a 08                	push   0x8
c0020d19:	e9 08 01 00 00       	jmp    c0020e26 <int_common_stub>

c0020d1e <isr9>:
c0020d1e:	fa                   	cli    
c0020d1f:	6a 00                	push   0x0
c0020d21:	6a 09                	push   0x9
c0020d23:	e9 fe 00 00 00       	jmp    c0020e26 <int_common_stub>

c0020d28 <isr10>:
c0020d28:	fa                   	cli    
c0020d29:	6a 0a                	push   0xa
c0020d2b:	e9 f6 00 00 00       	jmp    c0020e26 <int_common_stub>

c0020d30 <isr11>:
c0020d30:	fa                   	cli    
c0020d31:	6a 0b                	push   0xb
c0020d33:	e9 ee 00 00 00       	jmp    c0020e26 <int_common_stub>

c0020d38 <isr12>:
c0020d38:	fa                   	cli    
c0020d39:	6a 0c                	push   0xc
c0020d3b:	e9 e6 00 00 00       	jmp    c0020e26 <int_common_stub>

c0020d40 <isr13>:
c0020d40:	fa                   	cli    
c0020d41:	6a 0d                	push   0xd
c0020d43:	53                   	push   ebx
c0020d44:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020d48:	81 fb 16 0f 02 c0    	cmp    ebx,0xc0020f16
c0020d4e:	5b                   	pop    ebx
c0020d4f:	0f 84 c3 01 00 00    	je     c0020f18 <finishSignal2>
c0020d55:	e9 cc 00 00 00       	jmp    c0020e26 <int_common_stub>

c0020d5a <isr14>:
c0020d5a:	fa                   	cli    
c0020d5b:	6a 0e                	push   0xe
c0020d5d:	e9 c4 00 00 00       	jmp    c0020e26 <int_common_stub>

c0020d62 <isr15>:
c0020d62:	fa                   	cli    
c0020d63:	6a 00                	push   0x0
c0020d65:	6a 0f                	push   0xf
c0020d67:	e9 ba 00 00 00       	jmp    c0020e26 <int_common_stub>

c0020d6c <isr16>:
c0020d6c:	fa                   	cli    
c0020d6d:	6a 00                	push   0x0
c0020d6f:	6a 10                	push   0x10
c0020d71:	e9 b0 00 00 00       	jmp    c0020e26 <int_common_stub>

c0020d76 <isr17>:
c0020d76:	fa                   	cli    
c0020d77:	6a 00                	push   0x0
c0020d79:	6a 11                	push   0x11
c0020d7b:	e9 a6 00 00 00       	jmp    c0020e26 <int_common_stub>

c0020d80 <isr18>:
c0020d80:	fa                   	cli    
c0020d81:	6a 00                	push   0x0
c0020d83:	6a 12                	push   0x12
c0020d85:	e9 9c 00 00 00       	jmp    c0020e26 <int_common_stub>

c0020d8a <irq3>:
c0020d8a:	fa                   	cli    
c0020d8b:	6a 00                	push   0x0
c0020d8d:	6a 23                	push   0x23
c0020d8f:	e9 92 00 00 00       	jmp    c0020e26 <int_common_stub>

c0020d94 <irq4>:
c0020d94:	fa                   	cli    
c0020d95:	6a 00                	push   0x0
c0020d97:	6a 24                	push   0x24
c0020d99:	e9 88 00 00 00       	jmp    c0020e26 <int_common_stub>

c0020d9e <irq5>:
c0020d9e:	fa                   	cli    
c0020d9f:	6a 00                	push   0x0
c0020da1:	6a 25                	push   0x25
c0020da3:	e9 7e 00 00 00       	jmp    c0020e26 <int_common_stub>

c0020da8 <irq6>:
c0020da8:	fa                   	cli    
c0020da9:	6a 00                	push   0x0
c0020dab:	6a 26                	push   0x26
c0020dad:	e9 74 00 00 00       	jmp    c0020e26 <int_common_stub>

c0020db2 <irq7>:
c0020db2:	fa                   	cli    
c0020db3:	6a 00                	push   0x0
c0020db5:	6a 27                	push   0x27
c0020db7:	e9 6a 00 00 00       	jmp    c0020e26 <int_common_stub>

c0020dbc <irq8>:
c0020dbc:	fa                   	cli    
c0020dbd:	6a 00                	push   0x0
c0020dbf:	6a 28                	push   0x28
c0020dc1:	e9 60 00 00 00       	jmp    c0020e26 <int_common_stub>

c0020dc6 <irq9>:
c0020dc6:	fa                   	cli    
c0020dc7:	6a 00                	push   0x0
c0020dc9:	6a 29                	push   0x29
c0020dcb:	e9 56 00 00 00       	jmp    c0020e26 <int_common_stub>

c0020dd0 <irq10>:
c0020dd0:	fa                   	cli    
c0020dd1:	6a 00                	push   0x0
c0020dd3:	6a 2a                	push   0x2a
c0020dd5:	e9 4c 00 00 00       	jmp    c0020e26 <int_common_stub>

c0020dda <irq11>:
c0020dda:	fa                   	cli    
c0020ddb:	6a 00                	push   0x0
c0020ddd:	6a 2b                	push   0x2b
c0020ddf:	e9 42 00 00 00       	jmp    c0020e26 <int_common_stub>

c0020de4 <irq12>:
c0020de4:	fa                   	cli    
c0020de5:	6a 00                	push   0x0
c0020de7:	6a 2c                	push   0x2c
c0020de9:	e9 38 00 00 00       	jmp    c0020e26 <int_common_stub>

c0020dee <irq13>:
c0020dee:	fa                   	cli    
c0020def:	6a 00                	push   0x0
c0020df1:	6a 2d                	push   0x2d
c0020df3:	e9 2e 00 00 00       	jmp    c0020e26 <int_common_stub>

c0020df8 <irq14>:
c0020df8:	fa                   	cli    
c0020df9:	6a 00                	push   0x0
c0020dfb:	6a 2e                	push   0x2e
c0020dfd:	e9 24 00 00 00       	jmp    c0020e26 <int_common_stub>

c0020e02 <irq15>:
c0020e02:	fa                   	cli    
c0020e03:	6a 00                	push   0x0
c0020e05:	6a 2f                	push   0x2f
c0020e07:	e9 1a 00 00 00       	jmp    c0020e26 <int_common_stub>

c0020e0c <irq1>:
c0020e0c:	fa                   	cli    
c0020e0d:	6a 00                	push   0x0
c0020e0f:	6a 21                	push   0x21
c0020e11:	eb 13                	jmp    c0020e26 <int_common_stub>

c0020e13 <irq2>:
c0020e13:	fa                   	cli    
c0020e14:	6a 00                	push   0x0
c0020e16:	6a 22                	push   0x22
c0020e18:	eb 0c                	jmp    c0020e26 <int_common_stub>

c0020e1a <isr96>:
c0020e1a:	6a 00                	push   0x0
c0020e1c:	6a 60                	push   0x60
c0020e1e:	fb                   	sti    
c0020e1f:	eb 37                	jmp    c0020e58 <syscall_common_stub>

c0020e21 <irq0>:
c0020e21:	fa                   	cli    
c0020e22:	6a 00                	push   0x0
c0020e24:	6a 20                	push   0x20

c0020e26 <int_common_stub>:
c0020e26:	60                   	pusha  
c0020e27:	1e                   	push   ds
c0020e28:	06                   	push   es
c0020e29:	0f a0                	push   fs
c0020e2b:	0f a8                	push   gs
c0020e2d:	66 b8 10 00          	mov    ax,0x10
c0020e31:	66 8e d8             	mov    ds,ax
c0020e34:	66 8e c0             	mov    es,ax
c0020e37:	66 8e e0             	mov    fs,ax
c0020e3a:	66 8e e8             	mov    gs,ax
c0020e3d:	54                   	push   esp
c0020e3e:	fc                   	cld    
c0020e3f:	e8 90 da fe ff       	call   c000e8d4 <int_handler>
c0020e44:	81 c4 04 00 00 00    	add    esp,0x4
c0020e4a:	0f a9                	pop    gs
c0020e4c:	0f a1                	pop    fs
c0020e4e:	07                   	pop    es
c0020e4f:	1f                   	pop    ds
c0020e50:	61                   	popa   
c0020e51:	81 c4 08 00 00 00    	add    esp,0x8
c0020e57:	cf                   	iret   

c0020e58 <syscall_common_stub>:
c0020e58:	60                   	pusha  
c0020e59:	1e                   	push   ds
c0020e5a:	06                   	push   es
c0020e5b:	0f a0                	push   fs
c0020e5d:	0f a8                	push   gs
c0020e5f:	66 b8 10 00          	mov    ax,0x10
c0020e63:	66 8e d8             	mov    ds,ax
c0020e66:	66 8e c0             	mov    es,ax
c0020e69:	66 8e e0             	mov    fs,ax
c0020e6c:	66 8e e8             	mov    gs,ax
c0020e6f:	54                   	push   esp
c0020e70:	fc                   	cld    
c0020e71:	e8 5e da fe ff       	call   c000e8d4 <int_handler>
c0020e76:	81 c4 04 00 00 00    	add    esp,0x4
c0020e7c:	0f a9                	pop    gs
c0020e7e:	0f a1                	pop    fs
c0020e80:	07                   	pop    es
c0020e81:	1f                   	pop    ds
c0020e82:	e8 e1 01 ff ff       	call   c0011068 <KiCheckSignalZ>
c0020e87:	3d 00 00 00 00       	cmp    eax,0x0
c0020e8c:	0f 84 c0 00 00 00    	je     c0020f52 <skipSignals>
c0020e92:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c0020e97:	61                   	popa   
c0020e98:	53                   	push   ebx
c0020e99:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c0020e9f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0020ea2:	5b                   	pop    ebx
c0020ea3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c0020ea8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c0020eab:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c0020eae:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0020eb1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c0020eb4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c0020eb7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c0020eba:	81 c4 08 00 00 00    	add    esp,0x8
c0020ec0:	5e                   	pop    esi
c0020ec1:	5b                   	pop    ebx
c0020ec2:	59                   	pop    ecx
c0020ec3:	5a                   	pop    edx
c0020ec4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c0020ec7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c0020eca:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0020ecd:	52                   	push   edx
c0020ece:	51                   	push   ecx
c0020ecf:	53                   	push   ebx
c0020ed0:	56                   	push   esi
c0020ed1:	81 ec 08 00 00 00    	sub    esp,0x8
c0020ed7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c0020eda:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0020edd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c0020ee0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0020ee3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020ee6:	60                   	pusha  
c0020ee7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c0020eed:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0020ef0:	89 e3                	mov    ebx,esp
c0020ef2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c0020ef5:	52                   	push   edx
c0020ef6:	68 16 0f 02 c0       	push   0xc0020f16
c0020efb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c0020efe:	89 dc                	mov    esp,ebx
c0020f00:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0020f03:	68 23 00 00 00       	push   0x23
c0020f08:	51                   	push   ecx
c0020f09:	68 02 02 00 00       	push   0x202
c0020f0e:	68 1b 00 00 00       	push   0x1b
c0020f13:	ff 36                	push   DWORD PTR [esi]
c0020f15:	cf                   	iret   

c0020f16 <finishSignal>:
c0020f16:	cd 0f                	int    0xf

c0020f18 <finishSignal2>:
c0020f18:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c0020f1e:	e8 c2 01 ff ff       	call   c00110e5 <KiFinishSignalZ>
c0020f23:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c0020f29:	68 23 00 00 00       	push   0x23
c0020f2e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0020f31:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0020f34:	68 1b 00 00 00       	push   0x1b
c0020f39:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c0020f3c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020f3f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0020f42:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0020f45:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0020f48:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c0020f4b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0020f4e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c0020f51:	cf                   	iret   

c0020f52 <skipSignals>:
c0020f52:	61                   	popa   
c0020f53:	81 c4 08 00 00 00    	add    esp,0x8
c0020f59:	cf                   	iret   
c0020f5a:	90                   	nop
c0020f5b:	90                   	nop

c0020f5c <irq16>:
c0020f5c:	fa                   	cli    
c0020f5d:	6a 00                	push   0x0
c0020f5f:	6a 30                	push   0x30
c0020f61:	e9 c0 fe ff ff       	jmp    c0020e26 <int_common_stub>

c0020f66 <irq17>:
c0020f66:	fa                   	cli    
c0020f67:	6a 00                	push   0x0
c0020f69:	6a 31                	push   0x31
c0020f6b:	e9 b6 fe ff ff       	jmp    c0020e26 <int_common_stub>

c0020f70 <irq18>:
c0020f70:	fa                   	cli    
c0020f71:	6a 00                	push   0x0
c0020f73:	6a 32                	push   0x32
c0020f75:	e9 ac fe ff ff       	jmp    c0020e26 <int_common_stub>

c0020f7a <irq19>:
c0020f7a:	fa                   	cli    
c0020f7b:	6a 00                	push   0x0
c0020f7d:	6a 33                	push   0x33
c0020f7f:	e9 a2 fe ff ff       	jmp    c0020e26 <int_common_stub>

c0020f84 <irq20>:
c0020f84:	fa                   	cli    
c0020f85:	6a 00                	push   0x0
c0020f87:	6a 34                	push   0x34
c0020f89:	e9 98 fe ff ff       	jmp    c0020e26 <int_common_stub>

c0020f8e <irq21>:
c0020f8e:	fa                   	cli    
c0020f8f:	6a 00                	push   0x0
c0020f91:	6a 35                	push   0x35
c0020f93:	e9 8e fe ff ff       	jmp    c0020e26 <int_common_stub>

c0020f98 <irq22>:
c0020f98:	fa                   	cli    
c0020f99:	6a 00                	push   0x0
c0020f9b:	6a 36                	push   0x36
c0020f9d:	e9 84 fe ff ff       	jmp    c0020e26 <int_common_stub>

c0020fa2 <irq23>:
c0020fa2:	fa                   	cli    
c0020fa3:	6a 00                	push   0x0
c0020fa5:	6a 37                	push   0x37
c0020fa7:	e9 7a fe ff ff       	jmp    c0020e26 <int_common_stub>
c0020fac:	66 90                	xchg   ax,ax
c0020fae:	66 90                	xchg   ax,ax

c0020fb0 <i386GetRDRAND>:
c0020fb0:	b9 64 00 00 00       	mov    ecx,0x64

c0020fb5 <retry>:
c0020fb5:	0f c7 f0             	rdrand eax
c0020fb8:	72 05                	jb     c0020fbf <retry.done>
c0020fba:	e2 f9                	loop   c0020fb5 <retry>

c0020fbc <retry.fail>:
c0020fbc:	31 c0                	xor    eax,eax
c0020fbe:	c3                   	ret    

c0020fbf <retry.done>:
c0020fbf:	c3                   	ret    

c0020fc0 <sseDetect>:
c0020fc0:	b8 01 00 00 00       	mov    eax,0x1
c0020fc5:	0f a2                	cpuid  
c0020fc7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0020fcd:	74 06                	je     c0020fd5 <sseDetect.noSSE>
c0020fcf:	b8 01 00 00 00       	mov    eax,0x1
c0020fd4:	c3                   	ret    

c0020fd5 <sseDetect.noSSE>:
c0020fd5:	31 c0                	xor    eax,eax
c0020fd7:	c3                   	ret    

c0020fd8 <sseSave>:
c0020fd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020fdc:	0f ae 00             	fxsave [eax]
c0020fdf:	c3                   	ret    

c0020fe0 <sseLoad>:
c0020fe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020fe4:	0f ae 08             	fxrstor [eax]
c0020fe7:	c3                   	ret    

c0020fe8 <sseInit>:
c0020fe8:	e8 48 00 00 00       	call   c0021035 <x87Init>
c0020fed:	0f 20 e0             	mov    eax,cr4
c0020ff0:	66 0d 00 06          	or     ax,0x600
c0020ff4:	0f 22 e0             	mov    cr4,eax
c0020ff7:	c3                   	ret    

c0020ff8 <sseClose>:
c0020ff8:	c3                   	ret    
c0020ff9:	66 90                	xchg   ax,ax
c0020ffb:	66 90                	xchg   ax,ax
c0020ffd:	66 90                	xchg   ax,ax
c0020fff:	90                   	nop

c0021000 <value_37F>:
c0021000:	7f 03                	jg     c0021005 <value_37A+0x1>

c0021002 <value_37E>:
c0021002:	7e 03                	jle    c0021007 <x87Detect+0x1>

c0021004 <value_37A>:
c0021004:	7a 03                	jp     c0021009 <x87Detect+0x3>

c0021006 <x87Detect>:
c0021006:	53                   	push   ebx
c0021007:	51                   	push   ecx
c0021008:	52                   	push   edx
c0021009:	b8 01 00 00 00       	mov    eax,0x1
c002100e:	0f a2                	cpuid  
c0021010:	f7 c2 01 00 00 00    	test   edx,0x1
c0021016:	74 06                	je     c002101e <x87Detect.nox87>
c0021018:	b8 01 00 00 00       	mov    eax,0x1
c002101d:	c3                   	ret    

c002101e <x87Detect.nox87>:
c002101e:	b8 00 00 00 00       	mov    eax,0x0
c0021023:	5a                   	pop    edx
c0021024:	59                   	pop    ecx
c0021025:	5b                   	pop    ebx
c0021026:	c3                   	ret    

c0021027 <x87Save>:
c0021027:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002102b:	dd 30                	fnsave [eax]
c002102d:	c3                   	ret    

c002102e <x87Load>:
c002102e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021032:	dd 20                	frstor [eax]
c0021034:	c3                   	ret    

c0021035 <x87Init>:
c0021035:	0f 20 c0             	mov    eax,cr0
c0021038:	66 25 fb ff          	and    ax,0xfffb
c002103c:	66 0d 22 00          	or     ax,0x22
c0021040:	0f 22 c0             	mov    cr0,eax
c0021043:	db e3                	fninit 
c0021045:	0f 06                	clts   
c0021047:	d9 2d 04 10 02 c0    	fldcw  WORD PTR ds:0xc0021004
c002104d:	c3                   	ret    

c002104e <x87Close>:
c002104e:	c3                   	ret    
c002104f:	90                   	nop

c0021050 <__do_global_ctors_aux>:
c0021050:	a1 04 20 02 c0       	mov    eax,ds:0xc0022004
c0021055:	83 f8 ff             	cmp    eax,0xffffffff
c0021058:	74 1a                	je     c0021074 <__do_global_ctors_aux+0x24>
c002105a:	55                   	push   ebp
c002105b:	89 e5                	mov    ebp,esp
c002105d:	53                   	push   ebx
c002105e:	52                   	push   edx
c002105f:	bb 04 20 02 c0       	mov    ebx,0xc0022004
c0021064:	ff d0                	call   eax
c0021066:	83 eb 04             	sub    ebx,0x4
c0021069:	8b 03                	mov    eax,DWORD PTR [ebx]
c002106b:	83 f8 ff             	cmp    eax,0xffffffff
c002106e:	75 f4                	jne    c0021064 <__do_global_ctors_aux+0x14>
c0021070:	58                   	pop    eax
c0021071:	5b                   	pop    ebx
c0021072:	5d                   	pop    ebp
c0021073:	c3                   	ret    
c0021074:	c3                   	ret    
c0021075:	66 90                	xchg   ax,ax
c0021077:	90                   	nop

c0021078 <__divdi3>:
c0021078:	55                   	push   ebp
c0021079:	57                   	push   edi
c002107a:	56                   	push   esi
c002107b:	53                   	push   ebx
c002107c:	83 ec 1c             	sub    esp,0x1c
c002107f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0021083:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021087:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002108a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002108e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021092:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021096:	85 db                	test   ebx,ebx
c0021098:	0f 88 8e 00 00 00    	js     c002112c <__divdi3+0xb4>
c002109e:	89 dd                	mov    ebp,ebx
c00210a0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00210a8:	89 d3                	mov    ebx,edx
c00210aa:	85 d2                	test   edx,edx
c00210ac:	79 0d                	jns    c00210bb <__divdi3+0x43>
c00210ae:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00210b2:	f7 d8                	neg    eax
c00210b4:	83 d2 00             	adc    edx,0x0
c00210b7:	f7 da                	neg    edx
c00210b9:	89 d3                	mov    ebx,edx
c00210bb:	89 c7                	mov    edi,eax
c00210bd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00210c0:	85 db                	test   ebx,ebx
c00210c2:	75 48                	jne    c002110c <__divdi3+0x94>
c00210c4:	39 ef                	cmp    edi,ebp
c00210c6:	76 24                	jbe    c00210ec <__divdi3+0x74>
c00210c8:	89 ea                	mov    edx,ebp
c00210ca:	f7 f7                	div    edi
c00210cc:	89 c1                	mov    ecx,eax
c00210ce:	31 f6                	xor    esi,esi
c00210d0:	89 c8                	mov    eax,ecx
c00210d2:	89 f2                	mov    edx,esi
c00210d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00210d8:	85 c9                	test   ecx,ecx
c00210da:	74 07                	je     c00210e3 <__divdi3+0x6b>
c00210dc:	f7 d8                	neg    eax
c00210de:	83 d2 00             	adc    edx,0x0
c00210e1:	f7 da                	neg    edx
c00210e3:	83 c4 1c             	add    esp,0x1c
c00210e6:	5b                   	pop    ebx
c00210e7:	5e                   	pop    esi
c00210e8:	5f                   	pop    edi
c00210e9:	5d                   	pop    ebp
c00210ea:	c3                   	ret    
c00210eb:	90                   	nop
c00210ec:	85 ff                	test   edi,edi
c00210ee:	75 0b                	jne    c00210fb <__divdi3+0x83>
c00210f0:	b8 01 00 00 00       	mov    eax,0x1
c00210f5:	31 d2                	xor    edx,edx
c00210f7:	f7 f3                	div    ebx
c00210f9:	89 c7                	mov    edi,eax
c00210fb:	31 d2                	xor    edx,edx
c00210fd:	89 e8                	mov    eax,ebp
c00210ff:	f7 f7                	div    edi
c0021101:	89 c6                	mov    esi,eax
c0021103:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021106:	f7 f7                	div    edi
c0021108:	89 c1                	mov    ecx,eax
c002110a:	eb c4                	jmp    c00210d0 <__divdi3+0x58>
c002110c:	39 eb                	cmp    ebx,ebp
c002110e:	77 3c                	ja     c002114c <__divdi3+0xd4>
c0021110:	0f bd f3             	bsr    esi,ebx
c0021113:	83 f6 1f             	xor    esi,0x1f
c0021116:	75 40                	jne    c0021158 <__divdi3+0xe0>
c0021118:	39 eb                	cmp    ebx,ebp
c002111a:	72 09                	jb     c0021125 <__divdi3+0xad>
c002111c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002111f:	0f 87 97 00 00 00    	ja     c00211bc <__divdi3+0x144>
c0021125:	b9 01 00 00 00       	mov    ecx,0x1
c002112a:	eb a4                	jmp    c00210d0 <__divdi3+0x58>
c002112c:	f7 d9                	neg    ecx
c002112e:	83 d3 00             	adc    ebx,0x0
c0021131:	f7 db                	neg    ebx
c0021133:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021136:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002113a:	89 dd                	mov    ebp,ebx
c002113c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0021144:	e9 5f ff ff ff       	jmp    c00210a8 <__divdi3+0x30>
c0021149:	8d 76 00             	lea    esi,[esi+0x0]
c002114c:	31 f6                	xor    esi,esi
c002114e:	31 c9                	xor    ecx,ecx
c0021150:	e9 7b ff ff ff       	jmp    c00210d0 <__divdi3+0x58>
c0021155:	8d 76 00             	lea    esi,[esi+0x0]
c0021158:	b8 20 00 00 00       	mov    eax,0x20
c002115d:	29 f0                	sub    eax,esi
c002115f:	89 f1                	mov    ecx,esi
c0021161:	d3 e3                	shl    ebx,cl
c0021163:	89 fa                	mov    edx,edi
c0021165:	88 c1                	mov    cl,al
c0021167:	d3 ea                	shr    edx,cl
c0021169:	09 da                	or     edx,ebx
c002116b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002116f:	89 f1                	mov    ecx,esi
c0021171:	d3 e7                	shl    edi,cl
c0021173:	89 eb                	mov    ebx,ebp
c0021175:	88 c1                	mov    cl,al
c0021177:	d3 eb                	shr    ebx,cl
c0021179:	89 f1                	mov    ecx,esi
c002117b:	d3 e5                	shl    ebp,cl
c002117d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0021180:	88 c1                	mov    cl,al
c0021182:	d3 ea                	shr    edx,cl
c0021184:	09 d5                	or     ebp,edx
c0021186:	89 e8                	mov    eax,ebp
c0021188:	89 da                	mov    edx,ebx
c002118a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002118e:	89 d3                	mov    ebx,edx
c0021190:	89 c5                	mov    ebp,eax
c0021192:	f7 e7                	mul    edi
c0021194:	39 d3                	cmp    ebx,edx
c0021196:	72 18                	jb     c00211b0 <__divdi3+0x138>
c0021198:	74 0a                	je     c00211a4 <__divdi3+0x12c>
c002119a:	89 e9                	mov    ecx,ebp
c002119c:	31 f6                	xor    esi,esi
c002119e:	e9 2d ff ff ff       	jmp    c00210d0 <__divdi3+0x58>
c00211a3:	90                   	nop
c00211a4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00211a7:	89 f1                	mov    ecx,esi
c00211a9:	d3 e7                	shl    edi,cl
c00211ab:	39 c7                	cmp    edi,eax
c00211ad:	73 eb                	jae    c002119a <__divdi3+0x122>
c00211af:	90                   	nop
c00211b0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00211b3:	31 f6                	xor    esi,esi
c00211b5:	e9 16 ff ff ff       	jmp    c00210d0 <__divdi3+0x58>
c00211ba:	66 90                	xchg   ax,ax
c00211bc:	31 c9                	xor    ecx,ecx
c00211be:	e9 0d ff ff ff       	jmp    c00210d0 <__divdi3+0x58>
c00211c3:	90                   	nop

c00211c4 <__moddi3>:
c00211c4:	55                   	push   ebp
c00211c5:	57                   	push   edi
c00211c6:	56                   	push   esi
c00211c7:	53                   	push   ebx
c00211c8:	83 ec 2c             	sub    esp,0x2c
c00211cb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00211cf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00211d3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00211d7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00211db:	85 db                	test   ebx,ebx
c00211dd:	0f 88 85 00 00 00    	js     c0021268 <__moddi3+0xa4>
c00211e3:	89 de                	mov    esi,ebx
c00211e5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00211ed:	89 d7                	mov    edi,edx
c00211ef:	85 d2                	test   edx,edx
c00211f1:	79 09                	jns    c00211fc <__moddi3+0x38>
c00211f3:	f7 d8                	neg    eax
c00211f5:	83 d2 00             	adc    edx,0x0
c00211f8:	f7 da                	neg    edx
c00211fa:	89 d7                	mov    edi,edx
c00211fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021200:	89 cd                	mov    ebp,ecx
c0021202:	85 ff                	test   edi,edi
c0021204:	75 52                	jne    c0021258 <__moddi3+0x94>
c0021206:	89 c3                	mov    ebx,eax
c0021208:	39 f0                	cmp    eax,esi
c002120a:	76 24                	jbe    c0021230 <__moddi3+0x6c>
c002120c:	89 c8                	mov    eax,ecx
c002120e:	89 f2                	mov    edx,esi
c0021210:	f7 f3                	div    ebx
c0021212:	89 d6                	mov    esi,edx
c0021214:	89 f0                	mov    eax,esi
c0021216:	31 d2                	xor    edx,edx
c0021218:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002121c:	85 c9                	test   ecx,ecx
c002121e:	74 07                	je     c0021227 <__moddi3+0x63>
c0021220:	f7 d8                	neg    eax
c0021222:	83 d2 00             	adc    edx,0x0
c0021225:	f7 da                	neg    edx
c0021227:	83 c4 2c             	add    esp,0x2c
c002122a:	5b                   	pop    ebx
c002122b:	5e                   	pop    esi
c002122c:	5f                   	pop    edi
c002122d:	5d                   	pop    ebp
c002122e:	c3                   	ret    
c002122f:	90                   	nop
c0021230:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021234:	85 db                	test   ebx,ebx
c0021236:	75 0d                	jne    c0021245 <__moddi3+0x81>
c0021238:	b8 01 00 00 00       	mov    eax,0x1
c002123d:	31 d2                	xor    edx,edx
c002123f:	f7 f7                	div    edi
c0021241:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021245:	89 f0                	mov    eax,esi
c0021247:	31 d2                	xor    edx,edx
c0021249:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002124d:	f7 f7                	div    edi
c002124f:	89 e8                	mov    eax,ebp
c0021251:	f7 f7                	div    edi
c0021253:	89 d6                	mov    esi,edx
c0021255:	eb bd                	jmp    c0021214 <__moddi3+0x50>
c0021257:	90                   	nop
c0021258:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002125c:	39 f7                	cmp    edi,esi
c002125e:	76 20                	jbe    c0021280 <__moddi3+0xbc>
c0021260:	89 c8                	mov    eax,ecx
c0021262:	89 f2                	mov    edx,esi
c0021264:	eb b2                	jmp    c0021218 <__moddi3+0x54>
c0021266:	66 90                	xchg   ax,ax
c0021268:	f7 d9                	neg    ecx
c002126a:	83 d3 00             	adc    ebx,0x0
c002126d:	f7 db                	neg    ebx
c002126f:	89 de                	mov    esi,ebx
c0021271:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0021279:	e9 6f ff ff ff       	jmp    c00211ed <__moddi3+0x29>
c002127e:	66 90                	xchg   ax,ax
c0021280:	0f bd c7             	bsr    eax,edi
c0021283:	83 f0 1f             	xor    eax,0x1f
c0021286:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002128a:	75 24                	jne    c00212b0 <__moddi3+0xec>
c002128c:	39 f7                	cmp    edi,esi
c002128e:	72 06                	jb     c0021296 <__moddi3+0xd2>
c0021290:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0021294:	77 0c                	ja     c00212a2 <__moddi3+0xde>
c0021296:	89 e9                	mov    ecx,ebp
c0021298:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002129c:	19 fe                	sbb    esi,edi
c002129e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00212a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00212a6:	89 f2                	mov    edx,esi
c00212a8:	e9 6b ff ff ff       	jmp    c0021218 <__moddi3+0x54>
c00212ad:	8d 76 00             	lea    esi,[esi+0x0]
c00212b0:	b8 20 00 00 00       	mov    eax,0x20
c00212b5:	89 c2                	mov    edx,eax
c00212b7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00212bb:	29 da                	sub    edx,ebx
c00212bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00212c1:	88 d9                	mov    cl,bl
c00212c3:	d3 e7                	shl    edi,cl
c00212c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00212c9:	88 d1                	mov    cl,dl
c00212cb:	d3 e8                	shr    eax,cl
c00212cd:	09 c7                	or     edi,eax
c00212cf:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00212d3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00212d7:	89 d8                	mov    eax,ebx
c00212d9:	88 d9                	mov    cl,bl
c00212db:	d3 e7                	shl    edi,cl
c00212dd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00212e1:	89 f3                	mov    ebx,esi
c00212e3:	88 d1                	mov    cl,dl
c00212e5:	d3 eb                	shr    ebx,cl
c00212e7:	89 c7                	mov    edi,eax
c00212e9:	88 c1                	mov    cl,al
c00212eb:	d3 e6                	shl    esi,cl
c00212ed:	89 e8                	mov    eax,ebp
c00212ef:	88 d1                	mov    cl,dl
c00212f1:	d3 e8                	shr    eax,cl
c00212f3:	09 f0                	or     eax,esi
c00212f5:	89 f9                	mov    ecx,edi
c00212f7:	d3 e5                	shl    ebp,cl
c00212f9:	89 da                	mov    edx,ebx
c00212fb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00212ff:	89 d3                	mov    ebx,edx
c0021301:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021305:	89 c6                	mov    esi,eax
c0021307:	89 d1                	mov    ecx,edx
c0021309:	39 d3                	cmp    ebx,edx
c002130b:	72 27                	jb     c0021334 <__moddi3+0x170>
c002130d:	74 21                	je     c0021330 <__moddi3+0x16c>
c002130f:	29 f5                	sub    ebp,esi
c0021311:	19 cb                	sbb    ebx,ecx
c0021313:	89 de                	mov    esi,ebx
c0021315:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0021319:	d3 e6                	shl    esi,cl
c002131b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002131f:	89 f9                	mov    ecx,edi
c0021321:	d3 ed                	shr    ebp,cl
c0021323:	09 ee                	or     esi,ebp
c0021325:	89 f0                	mov    eax,esi
c0021327:	d3 eb                	shr    ebx,cl
c0021329:	89 da                	mov    edx,ebx
c002132b:	e9 e8 fe ff ff       	jmp    c0021218 <__moddi3+0x54>
c0021330:	39 c5                	cmp    ebp,eax
c0021332:	73 db                	jae    c002130f <__moddi3+0x14b>
c0021334:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021338:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002133c:	89 d1                	mov    ecx,edx
c002133e:	89 c6                	mov    esi,eax
c0021340:	eb cd                	jmp    c002130f <__moddi3+0x14b>
c0021342:	66 90                	xchg   ax,ax

c0021344 <__udivdi3>:
c0021344:	55                   	push   ebp
c0021345:	57                   	push   edi
c0021346:	56                   	push   esi
c0021347:	53                   	push   ebx
c0021348:	83 ec 1c             	sub    esp,0x1c
c002134b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002134f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021353:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021357:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002135b:	85 d2                	test   edx,edx
c002135d:	75 41                	jne    c00213a0 <__udivdi3+0x5c>
c002135f:	39 f7                	cmp    edi,esi
c0021361:	76 15                	jbe    c0021378 <__udivdi3+0x34>
c0021363:	89 e8                	mov    eax,ebp
c0021365:	89 f2                	mov    edx,esi
c0021367:	f7 f7                	div    edi
c0021369:	31 db                	xor    ebx,ebx
c002136b:	89 da                	mov    edx,ebx
c002136d:	83 c4 1c             	add    esp,0x1c
c0021370:	5b                   	pop    ebx
c0021371:	5e                   	pop    esi
c0021372:	5f                   	pop    edi
c0021373:	5d                   	pop    ebp
c0021374:	c3                   	ret    
c0021375:	8d 76 00             	lea    esi,[esi+0x0]
c0021378:	89 f9                	mov    ecx,edi
c002137a:	85 ff                	test   edi,edi
c002137c:	75 0b                	jne    c0021389 <__udivdi3+0x45>
c002137e:	b8 01 00 00 00       	mov    eax,0x1
c0021383:	31 d2                	xor    edx,edx
c0021385:	f7 f7                	div    edi
c0021387:	89 c1                	mov    ecx,eax
c0021389:	31 d2                	xor    edx,edx
c002138b:	89 f0                	mov    eax,esi
c002138d:	f7 f1                	div    ecx
c002138f:	89 c3                	mov    ebx,eax
c0021391:	89 e8                	mov    eax,ebp
c0021393:	f7 f1                	div    ecx
c0021395:	89 da                	mov    edx,ebx
c0021397:	83 c4 1c             	add    esp,0x1c
c002139a:	5b                   	pop    ebx
c002139b:	5e                   	pop    esi
c002139c:	5f                   	pop    edi
c002139d:	5d                   	pop    ebp
c002139e:	c3                   	ret    
c002139f:	90                   	nop
c00213a0:	39 f2                	cmp    edx,esi
c00213a2:	77 1c                	ja     c00213c0 <__udivdi3+0x7c>
c00213a4:	0f bd da             	bsr    ebx,edx
c00213a7:	83 f3 1f             	xor    ebx,0x1f
c00213aa:	75 24                	jne    c00213d0 <__udivdi3+0x8c>
c00213ac:	39 f2                	cmp    edx,esi
c00213ae:	72 08                	jb     c00213b8 <__udivdi3+0x74>
c00213b0:	39 ef                	cmp    edi,ebp
c00213b2:	0f 87 84 00 00 00    	ja     c002143c <__udivdi3+0xf8>
c00213b8:	b8 01 00 00 00       	mov    eax,0x1
c00213bd:	eb ac                	jmp    c002136b <__udivdi3+0x27>
c00213bf:	90                   	nop
c00213c0:	31 db                	xor    ebx,ebx
c00213c2:	31 c0                	xor    eax,eax
c00213c4:	89 da                	mov    edx,ebx
c00213c6:	83 c4 1c             	add    esp,0x1c
c00213c9:	5b                   	pop    ebx
c00213ca:	5e                   	pop    esi
c00213cb:	5f                   	pop    edi
c00213cc:	5d                   	pop    ebp
c00213cd:	c3                   	ret    
c00213ce:	66 90                	xchg   ax,ax
c00213d0:	b8 20 00 00 00       	mov    eax,0x20
c00213d5:	29 d8                	sub    eax,ebx
c00213d7:	88 d9                	mov    cl,bl
c00213d9:	d3 e2                	shl    edx,cl
c00213db:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00213df:	89 fa                	mov    edx,edi
c00213e1:	88 c1                	mov    cl,al
c00213e3:	d3 ea                	shr    edx,cl
c00213e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00213e9:	09 d1                	or     ecx,edx
c00213eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00213ef:	88 d9                	mov    cl,bl
c00213f1:	d3 e7                	shl    edi,cl
c00213f3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00213f7:	89 f7                	mov    edi,esi
c00213f9:	88 c1                	mov    cl,al
c00213fb:	d3 ef                	shr    edi,cl
c00213fd:	88 d9                	mov    cl,bl
c00213ff:	d3 e6                	shl    esi,cl
c0021401:	89 ea                	mov    edx,ebp
c0021403:	88 c1                	mov    cl,al
c0021405:	d3 ea                	shr    edx,cl
c0021407:	09 d6                	or     esi,edx
c0021409:	89 f0                	mov    eax,esi
c002140b:	89 fa                	mov    edx,edi
c002140d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021411:	89 d7                	mov    edi,edx
c0021413:	89 c6                	mov    esi,eax
c0021415:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021419:	39 d7                	cmp    edi,edx
c002141b:	72 13                	jb     c0021430 <__udivdi3+0xec>
c002141d:	74 09                	je     c0021428 <__udivdi3+0xe4>
c002141f:	89 f0                	mov    eax,esi
c0021421:	31 db                	xor    ebx,ebx
c0021423:	e9 43 ff ff ff       	jmp    c002136b <__udivdi3+0x27>
c0021428:	88 d9                	mov    cl,bl
c002142a:	d3 e5                	shl    ebp,cl
c002142c:	39 c5                	cmp    ebp,eax
c002142e:	73 ef                	jae    c002141f <__udivdi3+0xdb>
c0021430:	8d 46 ff             	lea    eax,[esi-0x1]
c0021433:	31 db                	xor    ebx,ebx
c0021435:	e9 31 ff ff ff       	jmp    c002136b <__udivdi3+0x27>
c002143a:	66 90                	xchg   ax,ax
c002143c:	31 c0                	xor    eax,eax
c002143e:	e9 28 ff ff ff       	jmp    c002136b <__udivdi3+0x27>
c0021443:	90                   	nop

c0021444 <__umoddi3>:
c0021444:	55                   	push   ebp
c0021445:	57                   	push   edi
c0021446:	56                   	push   esi
c0021447:	53                   	push   ebx
c0021448:	83 ec 1c             	sub    esp,0x1c
c002144b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002144f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021453:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021457:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002145b:	89 da                	mov    edx,ebx
c002145d:	85 c0                	test   eax,eax
c002145f:	75 37                	jne    c0021498 <__umoddi3+0x54>
c0021461:	39 df                	cmp    edi,ebx
c0021463:	76 13                	jbe    c0021478 <__umoddi3+0x34>
c0021465:	89 f0                	mov    eax,esi
c0021467:	f7 f7                	div    edi
c0021469:	89 d0                	mov    eax,edx
c002146b:	31 d2                	xor    edx,edx
c002146d:	83 c4 1c             	add    esp,0x1c
c0021470:	5b                   	pop    ebx
c0021471:	5e                   	pop    esi
c0021472:	5f                   	pop    edi
c0021473:	5d                   	pop    ebp
c0021474:	c3                   	ret    
c0021475:	8d 76 00             	lea    esi,[esi+0x0]
c0021478:	89 fd                	mov    ebp,edi
c002147a:	85 ff                	test   edi,edi
c002147c:	75 0b                	jne    c0021489 <__umoddi3+0x45>
c002147e:	b8 01 00 00 00       	mov    eax,0x1
c0021483:	31 d2                	xor    edx,edx
c0021485:	f7 f7                	div    edi
c0021487:	89 c5                	mov    ebp,eax
c0021489:	89 d8                	mov    eax,ebx
c002148b:	31 d2                	xor    edx,edx
c002148d:	f7 f5                	div    ebp
c002148f:	89 f0                	mov    eax,esi
c0021491:	f7 f5                	div    ebp
c0021493:	89 d0                	mov    eax,edx
c0021495:	eb d4                	jmp    c002146b <__umoddi3+0x27>
c0021497:	90                   	nop
c0021498:	89 f1                	mov    ecx,esi
c002149a:	39 d8                	cmp    eax,ebx
c002149c:	76 0a                	jbe    c00214a8 <__umoddi3+0x64>
c002149e:	89 f0                	mov    eax,esi
c00214a0:	83 c4 1c             	add    esp,0x1c
c00214a3:	5b                   	pop    ebx
c00214a4:	5e                   	pop    esi
c00214a5:	5f                   	pop    edi
c00214a6:	5d                   	pop    ebp
c00214a7:	c3                   	ret    
c00214a8:	0f bd e8             	bsr    ebp,eax
c00214ab:	83 f5 1f             	xor    ebp,0x1f
c00214ae:	75 1c                	jne    c00214cc <__umoddi3+0x88>
c00214b0:	39 d8                	cmp    eax,ebx
c00214b2:	72 04                	jb     c00214b8 <__umoddi3+0x74>
c00214b4:	39 f7                	cmp    edi,esi
c00214b6:	77 08                	ja     c00214c0 <__umoddi3+0x7c>
c00214b8:	89 da                	mov    edx,ebx
c00214ba:	29 fe                	sub    esi,edi
c00214bc:	19 c2                	sbb    edx,eax
c00214be:	89 f1                	mov    ecx,esi
c00214c0:	89 c8                	mov    eax,ecx
c00214c2:	83 c4 1c             	add    esp,0x1c
c00214c5:	5b                   	pop    ebx
c00214c6:	5e                   	pop    esi
c00214c7:	5f                   	pop    edi
c00214c8:	5d                   	pop    ebp
c00214c9:	c3                   	ret    
c00214ca:	66 90                	xchg   ax,ax
c00214cc:	ba 20 00 00 00       	mov    edx,0x20
c00214d1:	29 ea                	sub    edx,ebp
c00214d3:	89 e9                	mov    ecx,ebp
c00214d5:	d3 e0                	shl    eax,cl
c00214d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00214db:	89 f8                	mov    eax,edi
c00214dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00214e1:	88 d1                	mov    cl,dl
c00214e3:	d3 e8                	shr    eax,cl
c00214e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00214e9:	09 c1                	or     ecx,eax
c00214eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00214ef:	89 e9                	mov    ecx,ebp
c00214f1:	d3 e7                	shl    edi,cl
c00214f3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00214f7:	89 d8                	mov    eax,ebx
c00214f9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00214fd:	88 d1                	mov    cl,dl
c00214ff:	d3 e8                	shr    eax,cl
c0021501:	89 c7                	mov    edi,eax
c0021503:	89 e9                	mov    ecx,ebp
c0021505:	d3 e3                	shl    ebx,cl
c0021507:	89 f0                	mov    eax,esi
c0021509:	88 d1                	mov    cl,dl
c002150b:	d3 e8                	shr    eax,cl
c002150d:	09 d8                	or     eax,ebx
c002150f:	89 e9                	mov    ecx,ebp
c0021511:	d3 e6                	shl    esi,cl
c0021513:	89 f3                	mov    ebx,esi
c0021515:	89 fa                	mov    edx,edi
c0021517:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002151b:	89 d1                	mov    ecx,edx
c002151d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021521:	89 c6                	mov    esi,eax
c0021523:	89 d7                	mov    edi,edx
c0021525:	39 d1                	cmp    ecx,edx
c0021527:	72 27                	jb     c0021550 <__umoddi3+0x10c>
c0021529:	74 21                	je     c002154c <__umoddi3+0x108>
c002152b:	89 ca                	mov    edx,ecx
c002152d:	29 f3                	sub    ebx,esi
c002152f:	19 fa                	sbb    edx,edi
c0021531:	89 d0                	mov    eax,edx
c0021533:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021537:	d3 e0                	shl    eax,cl
c0021539:	89 e9                	mov    ecx,ebp
c002153b:	d3 eb                	shr    ebx,cl
c002153d:	09 d8                	or     eax,ebx
c002153f:	d3 ea                	shr    edx,cl
c0021541:	83 c4 1c             	add    esp,0x1c
c0021544:	5b                   	pop    ebx
c0021545:	5e                   	pop    esi
c0021546:	5f                   	pop    edi
c0021547:	5d                   	pop    ebp
c0021548:	c3                   	ret    
c0021549:	8d 76 00             	lea    esi,[esi+0x0]
c002154c:	39 c3                	cmp    ebx,eax
c002154e:	73 db                	jae    c002152b <__umoddi3+0xe7>
c0021550:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021554:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0021558:	89 d7                	mov    edi,edx
c002155a:	89 c6                	mov    esi,eax
c002155c:	eb cd                	jmp    c002152b <__umoddi3+0xe7>

Disassembly of section .init:

c002155e <_init>:
c002155e:	55                   	push   ebp
c002155f:	89 e5                	mov    ebp,esp
c0021561:	e8 8e eb fd ff       	call   c00000f4 <frame_dummy>
c0021566:	e8 e5 fa ff ff       	call   c0021050 <__do_global_ctors_aux>
c002156b:	5d                   	pop    ebp
c002156c:	c3                   	ret    

Disassembly of section .fini:

c002156d <_fini>:
c002156d:	55                   	push   ebp
c002156e:	89 e5                	mov    ebp,esp
c0021570:	e8 0f eb fd ff       	call   c0000084 <__do_global_dtors_aux>
c0021575:	5d                   	pop    ebp
c0021576:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0021578 <DriverlessDevice::~DriverlessDevice()>:
c0021578:	ba bc 2f 02 c0       	mov    edx,0xc0022fbc
c002157d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021581:	89 10                	mov    DWORD PTR [eax],edx
c0021583:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021587:	50                   	push   eax
c0021588:	e8 0d 83 fe ff       	call   c000989a <Device::~Device()>
c002158d:	83 c4 04             	add    esp,0x4
c0021590:	90                   	nop
c0021591:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0021592 <DriverlessDevice::~DriverlessDevice()>:
c0021592:	83 ec 0c             	sub    esp,0xc
c0021595:	83 ec 0c             	sub    esp,0xc
c0021598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002159c:	e8 d7 ff ff ff       	call   c0021578 <DriverlessDevice::~DriverlessDevice()>
c00215a1:	83 c4 10             	add    esp,0x10
c00215a4:	83 ec 08             	sub    esp,0x8
c00215a7:	68 58 01 00 00       	push   0x158
c00215ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215b0:	e8 32 bc fe ff       	call   c000d1e7 <operator delete(void*, unsigned long)>
c00215b5:	83 c4 10             	add    esp,0x10
c00215b8:	83 c4 0c             	add    esp,0xc
c00215bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00215bc <LinkedList<Device>::addElement(Device*)>:
c00215bc:	83 ec 0c             	sub    esp,0xc
c00215bf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00215c4:	75 10                	jne    c00215d6 <LinkedList<Device>::addElement(Device*)+0x1a>
c00215c6:	83 ec 0c             	sub    esp,0xc
c00215c9:	68 50 2f 02 c0       	push   0xc0022f50
c00215ce:	e8 e3 e7 fe ff       	call   c000fdb6 <KePanic(char const*)>
c00215d3:	83 c4 10             	add    esp,0x10
c00215d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215da:	8b 00                	mov    eax,DWORD PTR [eax]
c00215dc:	85 c0                	test   eax,eax
c00215de:	74 3a                	je     c002161a <LinkedList<Device>::addElement(Device*)+0x5e>
c00215e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00215e7:	85 c0                	test   eax,eax
c00215e9:	74 2f                	je     c002161a <LinkedList<Device>::addElement(Device*)+0x5e>
c00215eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00215f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00215f6:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00215fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021600:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021604:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002160b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002160e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021618:	eb 68                	jmp    c0021682 <LinkedList<Device>::addElement(Device*)+0xc6>
c002161a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002161e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021620:	85 c0                	test   eax,eax
c0021622:	75 4e                	jne    c0021672 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021628:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002162b:	85 c0                	test   eax,eax
c002162d:	75 43                	jne    c0021672 <LinkedList<Device>::addElement(Device*)+0xb6>
c002162f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021633:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021637:	89 10                	mov    DWORD PTR [eax],edx
c0021639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002163d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021641:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021648:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002164b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021655:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021659:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002165c:	85 c0                	test   eax,eax
c002165e:	74 22                	je     c0021682 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021660:	83 ec 0c             	sub    esp,0xc
c0021663:	68 72 2f 02 c0       	push   0xc0022f72
c0021668:	e8 49 e7 fe ff       	call   c000fdb6 <KePanic(char const*)>
c002166d:	83 c4 10             	add    esp,0x10
c0021670:	eb 10                	jmp    c0021682 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021672:	83 ec 0c             	sub    esp,0xc
c0021675:	68 7c 2f 02 c0       	push   0xc0022f7c
c002167a:	e8 37 e7 fe ff       	call   c000fdb6 <KePanic(char const*)>
c002167f:	83 c4 10             	add    esp,0x10
c0021682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021686:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021689:	8d 50 01             	lea    edx,[eax+0x1]
c002168c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021690:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021693:	90                   	nop
c0021694:	83 c4 0c             	add    esp,0xc
c0021697:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021698 <LinkedList<Device>::LinkedList()>:
c0021698:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002169c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00216a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00216ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216b1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00216b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216bc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00216c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00216cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00216d8:	90                   	nop
c00216d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00216dc <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00216dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00216e2:	85 c0                	test   eax,eax
c00216e4:	75 0e                	jne    c00216f4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00216e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00216ed:	85 c0                	test   eax,eax
c00216ef:	75 03                	jne    c00216f4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00216f1:	b0 01                	mov    al,0x1
c00216f3:	c3                   	ret    
c00216f4:	b0 00                	mov    al,0x0
c00216f6:	90                   	nop
c00216f7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00216f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00216f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00216fe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021700 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021700:	83 ec 0c             	sub    esp,0xc
c0021703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021707:	8b 00                	mov    eax,DWORD PTR [eax]
c0021709:	85 c0                	test   eax,eax
c002170b:	75 17                	jne    c0021724 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002170d:	83 ec 0c             	sub    esp,0xc
c0021710:	68 ec 31 02 c0       	push   0xc00231ec
c0021715:	e8 9c e6 fe ff       	call   c000fdb6 <KePanic(char const*)>
c002171a:	83 c4 10             	add    esp,0x10
c002171d:	e9 96 00 00 00       	jmp    c00217b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0021722:	66 90                	xchg   ax,ax
c0021724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021728:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002172b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002172e:	85 c0                	test   eax,eax
c0021730:	0f 95 c0             	setne  al
c0021733:	0f b6 c0             	movzx  eax,al
c0021736:	85 c0                	test   eax,eax
c0021738:	74 12                	je     c002174c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002173a:	83 ec 0c             	sub    esp,0xc
c002173d:	68 37 32 02 c0       	push   0xc0023237
c0021742:	e8 6f e6 fe ff       	call   c000fdb6 <KePanic(char const*)>
c0021747:	83 c4 10             	add    esp,0x10
c002174a:	66 90                	xchg   ax,ax
c002174c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021750:	8b 00                	mov    eax,DWORD PTR [eax]
c0021752:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021755:	85 c0                	test   eax,eax
c0021757:	0f 94 c0             	sete   al
c002175a:	0f b6 c0             	movzx  eax,al
c002175d:	85 c0                	test   eax,eax
c002175f:	74 33                	je     c0021794 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0021761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021765:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002176b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002176f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002177a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002177d:	83 f8 01             	cmp    eax,0x1
c0021780:	74 22                	je     c00217a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0021782:	83 ec 0c             	sub    esp,0xc
c0021785:	68 10 32 02 c0       	push   0xc0023210
c002178a:	e8 27 e6 fe ff       	call   c000fdb6 <KePanic(char const*)>
c002178f:	83 c4 10             	add    esp,0x10
c0021792:	eb 10                	jmp    c00217a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0021794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021798:	8b 00                	mov    eax,DWORD PTR [eax]
c002179a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002179d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217a1:	89 10                	mov    DWORD PTR [eax],edx
c00217a3:	90                   	nop
c00217a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00217ab:	8d 50 ff             	lea    edx,[eax-0x1]
c00217ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217b2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00217b5:	8d 76 00             	lea    esi,[esi+0x0]
c00217b8:	83 c4 0c             	add    esp,0xc
c00217bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00217bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00217bc:	83 ec 0c             	sub    esp,0xc
c00217bf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00217c4:	75 12                	jne    c00217d8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c00217c6:	83 ec 0c             	sub    esp,0xc
c00217c9:	68 50 2f 02 c0       	push   0xc0022f50
c00217ce:	e8 e3 e5 fe ff       	call   c000fdb6 <KePanic(char const*)>
c00217d3:	83 c4 10             	add    esp,0x10
c00217d6:	66 90                	xchg   ax,ax
c00217d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00217de:	85 c0                	test   eax,eax
c00217e0:	74 36                	je     c0021818 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00217e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00217e9:	85 c0                	test   eax,eax
c00217eb:	74 2b                	je     c0021818 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00217ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00217f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00217f8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00217fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021803:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002180a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002180d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021814:	eb 6a                	jmp    c0021880 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021816:	66 90                	xchg   ax,ax
c0021818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002181c:	8b 00                	mov    eax,DWORD PTR [eax]
c002181e:	85 c0                	test   eax,eax
c0021820:	75 4e                	jne    c0021870 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021826:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021829:	85 c0                	test   eax,eax
c002182b:	75 43                	jne    c0021870 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002182d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021831:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021835:	89 10                	mov    DWORD PTR [eax],edx
c0021837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002183b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002183f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021846:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021849:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021854:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021857:	85 c0                	test   eax,eax
c0021859:	74 25                	je     c0021880 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002185b:	83 ec 0c             	sub    esp,0xc
c002185e:	68 72 2f 02 c0       	push   0xc0022f72
c0021863:	e8 4e e5 fe ff       	call   c000fdb6 <KePanic(char const*)>
c0021868:	83 c4 10             	add    esp,0x10
c002186b:	eb 13                	jmp    c0021880 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002186d:	8d 76 00             	lea    esi,[esi+0x0]
c0021870:	83 ec 0c             	sub    esp,0xc
c0021873:	68 7c 2f 02 c0       	push   0xc0022f7c
c0021878:	e8 39 e5 fe ff       	call   c000fdb6 <KePanic(char const*)>
c002187d:	83 c4 10             	add    esp,0x10
c0021880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021884:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021887:	8d 50 01             	lea    edx,[eax+0x1]
c002188a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002188e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021891:	90                   	nop
c0021892:	83 c4 0c             	add    esp,0xc
c0021895:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0021898 <ACPI::~ACPI()>:
c0021898:	83 ec 0c             	sub    esp,0xc
c002189b:	ba e0 35 02 c0       	mov    edx,0xc00235e0
c00218a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218a4:	89 10                	mov    DWORD PTR [eax],edx
c00218a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218aa:	83 ec 0c             	sub    esp,0xc
c00218ad:	50                   	push   eax
c00218ae:	e8 e7 7f fe ff       	call   c000989a <Device::~Device()>
c00218b3:	83 c4 10             	add    esp,0x10
c00218b6:	90                   	nop
c00218b7:	83 c4 0c             	add    esp,0xc
c00218ba:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00218bc <ACPI::~ACPI()>:
c00218bc:	83 ec 0c             	sub    esp,0xc
c00218bf:	83 ec 0c             	sub    esp,0xc
c00218c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218c6:	e8 cd ff ff ff       	call   c0021898 <ACPI::~ACPI()>
c00218cb:	83 c4 10             	add    esp,0x10
c00218ce:	83 ec 08             	sub    esp,0x8
c00218d1:	68 64 12 00 00       	push   0x1264
c00218d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218da:	e8 08 b9 fe ff       	call   c000d1e7 <operator delete(void*, unsigned long)>
c00218df:	83 c4 10             	add    esp,0x10
c00218e2:	83 c4 0c             	add    esp,0xc
c00218e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00218e8 <LinkedList<Device>::~LinkedList()>:
c00218e8:	90                   	nop
c00218e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00218ec <LinkedList<Device>::isEmpty()>:
c00218ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00218f2:	85 c0                	test   eax,eax
c00218f4:	75 0e                	jne    c0021904 <LinkedList<Device>::isEmpty()+0x18>
c00218f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00218fd:	85 c0                	test   eax,eax
c00218ff:	75 03                	jne    c0021904 <LinkedList<Device>::isEmpty()+0x18>
c0021901:	b0 01                	mov    al,0x1
c0021903:	c3                   	ret    
c0021904:	b0 00                	mov    al,0x0
c0021906:	90                   	nop
c0021907:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0021908 <LinkedList<Device>::getFirstElement()>:
c0021908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002190c:	8b 00                	mov    eax,DWORD PTR [eax]
c002190e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0021910 <LinkedList<Device>::removeFirst()>:
c0021910:	83 ec 0c             	sub    esp,0xc
c0021913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021917:	8b 00                	mov    eax,DWORD PTR [eax]
c0021919:	85 c0                	test   eax,eax
c002191b:	75 17                	jne    c0021934 <LinkedList<Device>::removeFirst()+0x24>
c002191d:	83 ec 0c             	sub    esp,0xc
c0021920:	68 ec 31 02 c0       	push   0xc00231ec
c0021925:	e8 8c e4 fe ff       	call   c000fdb6 <KePanic(char const*)>
c002192a:	83 c4 10             	add    esp,0x10
c002192d:	e9 92 00 00 00       	jmp    c00219c4 <LinkedList<Device>::removeFirst()+0xb4>
c0021932:	66 90                	xchg   ax,ax
c0021934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021938:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002193b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021941:	85 c0                	test   eax,eax
c0021943:	74 13                	je     c0021958 <LinkedList<Device>::removeFirst()+0x48>
c0021945:	83 ec 0c             	sub    esp,0xc
c0021948:	68 37 32 02 c0       	push   0xc0023237
c002194d:	e8 64 e4 fe ff       	call   c000fdb6 <KePanic(char const*)>
c0021952:	83 c4 10             	add    esp,0x10
c0021955:	8d 76 00             	lea    esi,[esi+0x0]
c0021958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002195c:	8b 00                	mov    eax,DWORD PTR [eax]
c002195e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021964:	85 c0                	test   eax,eax
c0021966:	75 34                	jne    c002199c <LinkedList<Device>::removeFirst()+0x8c>
c0021968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002196c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021976:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002197d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021981:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021984:	83 f8 01             	cmp    eax,0x1
c0021987:	74 27                	je     c00219b0 <LinkedList<Device>::removeFirst()+0xa0>
c0021989:	83 ec 0c             	sub    esp,0xc
c002198c:	68 10 32 02 c0       	push   0xc0023210
c0021991:	e8 20 e4 fe ff       	call   c000fdb6 <KePanic(char const*)>
c0021996:	83 c4 10             	add    esp,0x10
c0021999:	eb 15                	jmp    c00219b0 <LinkedList<Device>::removeFirst()+0xa0>
c002199b:	90                   	nop
c002199c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00219a2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00219a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219ac:	89 10                	mov    DWORD PTR [eax],edx
c00219ae:	66 90                	xchg   ax,ax
c00219b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00219b7:	8d 50 ff             	lea    edx,[eax-0x1]
c00219ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00219c1:	8d 76 00             	lea    esi,[esi+0x0]
c00219c4:	83 c4 0c             	add    esp,0xc
c00219c7:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00219c8 <Computer::~Computer()>:
c00219c8:	83 ec 0c             	sub    esp,0xc
c00219cb:	ba 90 38 02 c0       	mov    edx,0xc0023890
c00219d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219d4:	89 10                	mov    DWORD PTR [eax],edx
c00219d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219da:	83 ec 0c             	sub    esp,0xc
c00219dd:	50                   	push   eax
c00219de:	e8 b7 7e fe ff       	call   c000989a <Device::~Device()>
c00219e3:	83 c4 10             	add    esp,0x10
c00219e6:	90                   	nop
c00219e7:	83 c4 0c             	add    esp,0xc
c00219ea:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00219ec <Computer::~Computer()>:
c00219ec:	83 ec 0c             	sub    esp,0xc
c00219ef:	83 ec 0c             	sub    esp,0xc
c00219f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219f6:	e8 cd ff ff ff       	call   c00219c8 <Computer::~Computer()>
c00219fb:	83 c4 10             	add    esp,0x10
c00219fe:	83 ec 08             	sub    esp,0x8
c0021a01:	68 6c 01 00 00       	push   0x16c
c0021a06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a0a:	e8 d8 b7 fe ff       	call   c000d1e7 <operator delete(void*, unsigned long)>
c0021a0f:	83 c4 10             	add    esp,0x10
c0021a12:	83 c4 0c             	add    esp,0xc
c0021a15:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0021a16 <idleCommon()>:
c0021a16:	83 ec 0c             	sub    esp,0xc
c0021a19:	fa                   	cli    
c0021a1a:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0021a20:	e8 b3 4f ff ff       	call   c00169d8 <schedule()>
c0021a25:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0021a2c:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0021a33:	75 01                	jne    c0021a36 <idleCommon()+0x20>
c0021a35:	fb                   	sti    
c0021a36:	83 c4 0c             	add    esp,0xc
c0021a39:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0021a3a <LinkedList<UnixFile>::~LinkedList()>:
c0021a3a:	90                   	nop
c0021a3b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0021a3c <LinkedList<UnixFile>::LinkedList()>:
c0021a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a40:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a4a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021a51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a55:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021a5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a60:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021a66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a6a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021a71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a75:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021a7c:	90                   	nop
c0021a7d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0021a7e <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0021a7e:	83 ec 0c             	sub    esp,0xc
c0021a81:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021a86:	75 10                	jne    c0021a98 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0021a88:	83 ec 0c             	sub    esp,0xc
c0021a8b:	68 50 2f 02 c0       	push   0xc0022f50
c0021a90:	e8 21 e3 fe ff       	call   c000fdb6 <KePanic(char const*)>
c0021a95:	83 c4 10             	add    esp,0x10
c0021a98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a9e:	85 c0                	test   eax,eax
c0021aa0:	74 34                	je     c0021ad6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0021aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021aa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021aa9:	85 c0                	test   eax,eax
c0021aab:	74 29                	je     c0021ad6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0021aad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ab1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ab4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021ab8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021abb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021abf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021ac3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021ac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021aca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021acd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021ad4:	eb 65                	jmp    c0021b3b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021ad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ada:	8b 00                	mov    eax,DWORD PTR [eax]
c0021adc:	85 c0                	test   eax,eax
c0021ade:	75 4b                	jne    c0021b2b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0021ae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ae4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ae7:	85 c0                	test   eax,eax
c0021ae9:	75 40                	jne    c0021b2b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0021aeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021aef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021af3:	89 10                	mov    DWORD PTR [eax],edx
c0021af5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021af9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021afd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021b00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b07:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021b0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b12:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021b15:	85 c0                	test   eax,eax
c0021b17:	74 22                	je     c0021b3b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021b19:	83 ec 0c             	sub    esp,0xc
c0021b1c:	68 72 2f 02 c0       	push   0xc0022f72
c0021b21:	e8 90 e2 fe ff       	call   c000fdb6 <KePanic(char const*)>
c0021b26:	83 c4 10             	add    esp,0x10
c0021b29:	eb 10                	jmp    c0021b3b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021b2b:	83 ec 0c             	sub    esp,0xc
c0021b2e:	68 7c 2f 02 c0       	push   0xc0022f7c
c0021b33:	e8 7e e2 fe ff       	call   c000fdb6 <KePanic(char const*)>
c0021b38:	83 c4 10             	add    esp,0x10
c0021b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b3f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021b42:	8d 50 01             	lea    edx,[eax+0x1]
c0021b45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b49:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021b4c:	90                   	nop
c0021b4d:	83 c4 0c             	add    esp,0xc
c0021b50:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0021b52 <LinkedList<UnixFile>::getFirstElement()>:
c0021b52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b56:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b58:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0021b5a <LinkedList<UnixFile>::removeFirst()>:
c0021b5a:	83 ec 0c             	sub    esp,0xc
c0021b5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b61:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b63:	85 c0                	test   eax,eax
c0021b65:	75 12                	jne    c0021b79 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0021b67:	83 ec 0c             	sub    esp,0xc
c0021b6a:	68 ec 31 02 c0       	push   0xc00231ec
c0021b6f:	e8 42 e2 fe ff       	call   c000fdb6 <KePanic(char const*)>
c0021b74:	83 c4 10             	add    esp,0x10
c0021b77:	eb 7e                	jmp    c0021bf7 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0021b79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b80:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021b83:	85 c0                	test   eax,eax
c0021b85:	74 10                	je     c0021b97 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0021b87:	83 ec 0c             	sub    esp,0xc
c0021b8a:	68 37 32 02 c0       	push   0xc0023237
c0021b8f:	e8 22 e2 fe ff       	call   c000fdb6 <KePanic(char const*)>
c0021b94:	83 c4 10             	add    esp,0x10
c0021b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b9d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021ba0:	85 c0                	test   eax,eax
c0021ba2:	75 33                	jne    c0021bd7 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0021ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ba8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bb2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021bb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bbd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021bc0:	83 f8 01             	cmp    eax,0x1
c0021bc3:	74 21                	je     c0021be6 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021bc5:	83 ec 0c             	sub    esp,0xc
c0021bc8:	68 10 32 02 c0       	push   0xc0023210
c0021bcd:	e8 e4 e1 fe ff       	call   c000fdb6 <KePanic(char const*)>
c0021bd2:	83 c4 10             	add    esp,0x10
c0021bd5:	eb 0f                	jmp    c0021be6 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0021bdd:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0021be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021be4:	89 10                	mov    DWORD PTR [eax],edx
c0021be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021bed:	8d 50 ff             	lea    edx,[eax-0x1]
c0021bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bf4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021bf7:	83 c4 0c             	add    esp,0xc
c0021bfa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0021bfc <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0021bfc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021c00:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021c03:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0021c04 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0021c04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021c08:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021c0b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0021c0c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0021c0c:	90                   	nop
c0021c0d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0021c10 <ThreadControlBlock::ThreadControlBlock()>:
c0021c10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c14:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021c1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c1f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0021c26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c2a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0021c31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c35:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0021c3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c40:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0021c47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c4b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0021c4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c53:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0021c57:	90                   	nop
c0021c58:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0021c5c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0021c5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c60:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c6a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021c71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c75:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021c7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c80:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021c86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c8a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021c91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c95:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021c9c:	90                   	nop
c0021c9d:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0021c9e <CPU::~CPU()>:
c0021c9e:	83 ec 0c             	sub    esp,0xc
c0021ca1:	ba 70 4e 02 c0       	mov    edx,0xc0024e70
c0021ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021caa:	89 10                	mov    DWORD PTR [eax],edx
c0021cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cb0:	83 ec 0c             	sub    esp,0xc
c0021cb3:	50                   	push   eax
c0021cb4:	e8 e1 7b fe ff       	call   c000989a <Device::~Device()>
c0021cb9:	83 c4 10             	add    esp,0x10
c0021cbc:	90                   	nop
c0021cbd:	83 c4 0c             	add    esp,0xc
c0021cc0:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0021cc2 <CPU::~CPU()>:
c0021cc2:	83 ec 0c             	sub    esp,0xc
c0021cc5:	83 ec 0c             	sub    esp,0xc
c0021cc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ccc:	e8 cd ff ff ff       	call   c0021c9e <CPU::~CPU()>
c0021cd1:	83 c4 10             	add    esp,0x10
c0021cd4:	83 ec 08             	sub    esp,0x8
c0021cd7:	68 78 11 00 00       	push   0x1178
c0021cdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ce0:	e8 02 b5 fe ff       	call   c000d1e7 <operator delete(void*, unsigned long)>
c0021ce5:	83 c4 10             	add    esp,0x10
c0021ce8:	83 c4 0c             	add    esp,0xc
c0021ceb:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0021cec <PCI::~PCI()>:
c0021cec:	83 ec 0c             	sub    esp,0xc
c0021cef:	ba d4 53 02 c0       	mov    edx,0xc00253d4
c0021cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cf8:	89 10                	mov    DWORD PTR [eax],edx
c0021cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cfe:	83 ec 0c             	sub    esp,0xc
c0021d01:	50                   	push   eax
c0021d02:	e8 39 6c fe ff       	call   c0008940 <Bus::~Bus()>
c0021d07:	83 c4 10             	add    esp,0x10
c0021d0a:	90                   	nop
c0021d0b:	83 c4 0c             	add    esp,0xc
c0021d0e:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0021d10 <PCI::~PCI()>:
c0021d10:	83 ec 0c             	sub    esp,0xc
c0021d13:	83 ec 0c             	sub    esp,0xc
c0021d16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d1a:	e8 cd ff ff ff       	call   c0021cec <PCI::~PCI()>
c0021d1f:	83 c4 10             	add    esp,0x10
c0021d22:	83 ec 08             	sub    esp,0x8
c0021d25:	68 5c 01 00 00       	push   0x15c
c0021d2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d2e:	e8 b4 b4 fe ff       	call   c000d1e7 <operator delete(void*, unsigned long)>
c0021d33:	83 c4 10             	add    esp,0x10
c0021d36:	83 c4 0c             	add    esp,0xc
c0021d39:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0021d3a <IDE::~IDE()>:
c0021d3a:	83 ec 0c             	sub    esp,0xc
c0021d3d:	ba 24 55 02 c0       	mov    edx,0xc0025524
c0021d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d46:	89 10                	mov    DWORD PTR [eax],edx
c0021d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d4c:	83 ec 0c             	sub    esp,0xc
c0021d4f:	50                   	push   eax
c0021d50:	e8 d3 7f fe ff       	call   c0009d28 <HardDiskController::~HardDiskController()>
c0021d55:	83 c4 10             	add    esp,0x10
c0021d58:	90                   	nop
c0021d59:	83 c4 0c             	add    esp,0xc
c0021d5c:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0021d5e <IDE::~IDE()>:
c0021d5e:	83 ec 0c             	sub    esp,0xc
c0021d61:	83 ec 0c             	sub    esp,0xc
c0021d64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d68:	e8 cd ff ff ff       	call   c0021d3a <IDE::~IDE()>
c0021d6d:	83 c4 10             	add    esp,0x10
c0021d70:	83 ec 08             	sub    esp,0x8
c0021d73:	68 70 02 00 00       	push   0x270
c0021d78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d7c:	e8 66 b4 fe ff       	call   c000d1e7 <operator delete(void*, unsigned long)>
c0021d81:	83 c4 10             	add    esp,0x10
c0021d84:	83 c4 0c             	add    esp,0xc
c0021d87:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0021d88 <SATABus::~SATABus()>:
c0021d88:	83 ec 0c             	sub    esp,0xc
c0021d8b:	ba 74 55 02 c0       	mov    edx,0xc0025574
c0021d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d94:	89 10                	mov    DWORD PTR [eax],edx
c0021d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d9a:	83 ec 0c             	sub    esp,0xc
c0021d9d:	50                   	push   eax
c0021d9e:	e8 85 7f fe ff       	call   c0009d28 <HardDiskController::~HardDiskController()>
c0021da3:	83 c4 10             	add    esp,0x10
c0021da6:	90                   	nop
c0021da7:	83 c4 0c             	add    esp,0xc
c0021daa:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0021dac <SATABus::~SATABus()>:
c0021dac:	83 ec 0c             	sub    esp,0xc
c0021daf:	83 ec 0c             	sub    esp,0xc
c0021db2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021db6:	e8 cd ff ff ff       	call   c0021d88 <SATABus::~SATABus()>
c0021dbb:	83 c4 10             	add    esp,0x10
c0021dbe:	83 ec 08             	sub    esp,0x8
c0021dc1:	68 64 01 00 00       	push   0x164
c0021dc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021dca:	e8 18 b4 fe ff       	call   c000d1e7 <operator delete(void*, unsigned long)>
c0021dcf:	83 c4 10             	add    esp,0x10
c0021dd2:	83 c4 0c             	add    esp,0xc
c0021dd5:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0021dd6 <ATA::~ATA()>:
c0021dd6:	83 ec 0c             	sub    esp,0xc
c0021dd9:	ba 5c 56 02 c0       	mov    edx,0xc002565c
c0021dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021de2:	89 10                	mov    DWORD PTR [eax],edx
c0021de4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021de8:	83 ec 0c             	sub    esp,0xc
c0021deb:	50                   	push   eax
c0021dec:	e8 19 80 fe ff       	call   c0009e0a <PhysicalDisk::~PhysicalDisk()>
c0021df1:	83 c4 10             	add    esp,0x10
c0021df4:	90                   	nop
c0021df5:	83 c4 0c             	add    esp,0xc
c0021df8:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0021dfa <ATA::~ATA()>:
c0021dfa:	83 ec 0c             	sub    esp,0xc
c0021dfd:	83 ec 0c             	sub    esp,0xc
c0021e00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e04:	e8 cd ff ff ff       	call   c0021dd6 <ATA::~ATA()>
c0021e09:	83 c4 10             	add    esp,0x10
c0021e0c:	83 ec 08             	sub    esp,0x8
c0021e0f:	68 8c 01 00 00       	push   0x18c
c0021e14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e18:	e8 ca b3 fe ff       	call   c000d1e7 <operator delete(void*, unsigned long)>
c0021e1d:	83 c4 10             	add    esp,0x10
c0021e20:	83 c4 0c             	add    esp,0xc
c0021e23:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0021e24 <ATAPI::~ATAPI()>:
c0021e24:	83 ec 0c             	sub    esp,0xc
c0021e27:	ba a4 56 02 c0       	mov    edx,0xc00256a4
c0021e2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e30:	89 10                	mov    DWORD PTR [eax],edx
c0021e32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e36:	83 ec 0c             	sub    esp,0xc
c0021e39:	50                   	push   eax
c0021e3a:	e8 cb 7f fe ff       	call   c0009e0a <PhysicalDisk::~PhysicalDisk()>
c0021e3f:	83 c4 10             	add    esp,0x10
c0021e42:	90                   	nop
c0021e43:	83 c4 0c             	add    esp,0xc
c0021e46:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0021e48 <ATAPI::~ATAPI()>:
c0021e48:	83 ec 0c             	sub    esp,0xc
c0021e4b:	83 ec 0c             	sub    esp,0xc
c0021e4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e52:	e8 cd ff ff ff       	call   c0021e24 <ATAPI::~ATAPI()>
c0021e57:	83 c4 10             	add    esp,0x10
c0021e5a:	83 ec 08             	sub    esp,0x8
c0021e5d:	68 84 01 00 00       	push   0x184
c0021e62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e66:	e8 7c b3 fe ff       	call   c000d1e7 <operator delete(void*, unsigned long)>
c0021e6b:	83 c4 10             	add    esp,0x10
c0021e6e:	83 c4 0c             	add    esp,0xc
c0021e71:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0021e72 <SATA::~SATA()>:
c0021e72:	83 ec 0c             	sub    esp,0xc
c0021e75:	ba 64 57 02 c0       	mov    edx,0xc0025764
c0021e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e7e:	89 10                	mov    DWORD PTR [eax],edx
c0021e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e84:	83 ec 0c             	sub    esp,0xc
c0021e87:	50                   	push   eax
c0021e88:	e8 7d 7f fe ff       	call   c0009e0a <PhysicalDisk::~PhysicalDisk()>
c0021e8d:	83 c4 10             	add    esp,0x10
c0021e90:	90                   	nop
c0021e91:	83 c4 0c             	add    esp,0xc
c0021e94:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0021e96 <SATA::~SATA()>:
c0021e96:	83 ec 0c             	sub    esp,0xc
c0021e99:	83 ec 0c             	sub    esp,0xc
c0021e9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ea0:	e8 cd ff ff ff       	call   c0021e72 <SATA::~SATA()>
c0021ea5:	83 c4 10             	add    esp,0x10
c0021ea8:	83 ec 08             	sub    esp,0x8
c0021eab:	68 7c 01 00 00       	push   0x17c
c0021eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021eb4:	e8 2e b3 fe ff       	call   c000d1e7 <operator delete(void*, unsigned long)>
c0021eb9:	83 c4 10             	add    esp,0x10
c0021ebc:	83 c4 0c             	add    esp,0xc
c0021ebf:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0021ec0 <SATAPI::~SATAPI()>:
c0021ec0:	83 ec 0c             	sub    esp,0xc
c0021ec3:	ba 88 58 02 c0       	mov    edx,0xc0025888
c0021ec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ecc:	89 10                	mov    DWORD PTR [eax],edx
c0021ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ed2:	83 ec 0c             	sub    esp,0xc
c0021ed5:	50                   	push   eax
c0021ed6:	e8 2f 7f fe ff       	call   c0009e0a <PhysicalDisk::~PhysicalDisk()>
c0021edb:	83 c4 10             	add    esp,0x10
c0021ede:	90                   	nop
c0021edf:	83 c4 0c             	add    esp,0xc
c0021ee2:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0021ee4 <SATAPI::~SATAPI()>:
c0021ee4:	83 ec 0c             	sub    esp,0xc
c0021ee7:	83 ec 0c             	sub    esp,0xc
c0021eea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021eee:	e8 cd ff ff ff       	call   c0021ec0 <SATAPI::~SATAPI()>
c0021ef3:	83 c4 10             	add    esp,0x10
c0021ef6:	83 ec 08             	sub    esp,0x8
c0021ef9:	68 84 01 00 00       	push   0x184
c0021efe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f02:	e8 e0 b2 fe ff       	call   c000d1e7 <operator delete(void*, unsigned long)>
c0021f07:	83 c4 10             	add    esp,0x10
c0021f0a:	83 c4 0c             	add    esp,0xc
c0021f0d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0021f0e <IOAPIC::~IOAPIC()>:
c0021f0e:	83 ec 0c             	sub    esp,0xc
c0021f11:	ba e8 58 02 c0       	mov    edx,0xc00258e8
c0021f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f1a:	89 10                	mov    DWORD PTR [eax],edx
c0021f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f20:	83 ec 0c             	sub    esp,0xc
c0021f23:	50                   	push   eax
c0021f24:	e8 71 79 fe ff       	call   c000989a <Device::~Device()>
c0021f29:	83 c4 10             	add    esp,0x10
c0021f2c:	90                   	nop
c0021f2d:	83 c4 0c             	add    esp,0xc
c0021f30:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0021f32 <IOAPIC::~IOAPIC()>:
c0021f32:	83 ec 0c             	sub    esp,0xc
c0021f35:	83 ec 0c             	sub    esp,0xc
c0021f38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f3c:	e8 cd ff ff ff       	call   c0021f0e <IOAPIC::~IOAPIC()>
c0021f41:	83 c4 10             	add    esp,0x10
c0021f44:	83 ec 08             	sub    esp,0x8
c0021f47:	68 68 01 00 00       	push   0x168
c0021f4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f50:	e8 92 b2 fe ff       	call   c000d1e7 <operator delete(void*, unsigned long)>
c0021f55:	83 c4 10             	add    esp,0x10
c0021f58:	83 c4 0c             	add    esp,0xc
c0021f5b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0021f5c <APICTimer::~APICTimer()>:
c0021f5c:	83 ec 0c             	sub    esp,0xc
c0021f5f:	ba 30 59 02 c0       	mov    edx,0xc0025930
c0021f64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f68:	89 10                	mov    DWORD PTR [eax],edx
c0021f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f6e:	83 ec 0c             	sub    esp,0xc
c0021f71:	50                   	push   eax
c0021f72:	e8 61 90 fe ff       	call   c000afd8 <Timer::~Timer()>
c0021f77:	83 c4 10             	add    esp,0x10
c0021f7a:	90                   	nop
c0021f7b:	83 c4 0c             	add    esp,0xc
c0021f7e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0021f80 <APICTimer::~APICTimer()>:
c0021f80:	83 ec 0c             	sub    esp,0xc
c0021f83:	83 ec 0c             	sub    esp,0xc
c0021f86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f8a:	e8 cd ff ff ff       	call   c0021f5c <APICTimer::~APICTimer()>
c0021f8f:	83 c4 10             	add    esp,0x10
c0021f92:	83 ec 08             	sub    esp,0x8
c0021f95:	68 60 01 00 00       	push   0x160
c0021f9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f9e:	e8 44 b2 fe ff       	call   c000d1e7 <operator delete(void*, unsigned long)>
c0021fa3:	83 c4 10             	add    esp,0x10
c0021fa6:	83 c4 0c             	add    esp,0xc
c0021fa9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0021fac <PIT::~PIT()>:
c0021fac:	83 ec 0c             	sub    esp,0xc
c0021faf:	ba 80 59 02 c0       	mov    edx,0xc0025980
c0021fb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fb8:	89 10                	mov    DWORD PTR [eax],edx
c0021fba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fbe:	83 ec 0c             	sub    esp,0xc
c0021fc1:	50                   	push   eax
c0021fc2:	e8 11 90 fe ff       	call   c000afd8 <Timer::~Timer()>
c0021fc7:	83 c4 10             	add    esp,0x10
c0021fca:	90                   	nop
c0021fcb:	83 c4 0c             	add    esp,0xc
c0021fce:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0021fd0 <PIT::~PIT()>:
c0021fd0:	83 ec 0c             	sub    esp,0xc
c0021fd3:	83 ec 0c             	sub    esp,0xc
c0021fd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021fda:	e8 cd ff ff ff       	call   c0021fac <PIT::~PIT()>
c0021fdf:	83 c4 10             	add    esp,0x10
c0021fe2:	83 ec 08             	sub    esp,0x8
c0021fe5:	68 5c 01 00 00       	push   0x15c
c0021fea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021fee:	e8 f4 b1 fe ff       	call   c000d1e7 <operator delete(void*, unsigned long)>
c0021ff3:	83 c4 10             	add    esp,0x10
c0021ff6:	83 c4 0c             	add    esp,0xc
c0021ff9:	c3                   	ret    

Disassembly of section userkernel:

c0027000 <KiDefaultSignalHandlerAbort(int)>:
c0027000:	57                   	push   edi
c0027001:	b9 07 00 00 00       	mov    ecx,0x7
c0027006:	56                   	push   esi
c0027007:	be 73 3c 02 c0       	mov    esi,0xc0023c73
c002700c:	83 ec 24             	sub    esp,0x24
c002700f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0027013:	fc                   	cld    
c0027014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0027016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002701a:	50                   	push   eax
c002701b:	6a 00                	push   0x0
c002701d:	6a 38                	push   0x38
c002701f:	6a 01                	push   0x1
c0027021:	e8 2c 00 00 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0027026:	83 c4 34             	add    esp,0x34
c0027029:	5e                   	pop    esi
c002702a:	5f                   	pop    edi
c002702b:	c3                   	ret    

c002702c <KiDefaultSignalHandlerTerminate(int)>:
c002702c:	57                   	push   edi
c002702d:	b9 08 00 00 00       	mov    ecx,0x8
c0027032:	56                   	push   esi
c0027033:	be 8f 3c 02 c0       	mov    esi,0xc0023c8f
c0027038:	83 ec 24             	sub    esp,0x24
c002703b:	89 e7                	mov    edi,esp
c002703d:	fc                   	cld    
c002703e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0027040:	54                   	push   esp
c0027041:	6a 00                	push   0x0
c0027043:	6a 37                	push   0x37
c0027045:	6a 01                	push   0x1
c0027047:	e8 06 00 00 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002704c:	83 c4 34             	add    esp,0x34
c002704f:	5e                   	pop    esi
c0027050:	5f                   	pop    edi
c0027051:	c3                   	ret    

c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0027052:	53                   	push   ebx
c0027053:	83 ec 10             	sub    esp,0x10
c0027056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002705a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002705e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0027062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027066:	cd 60                	int    0x60
c0027068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002706c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027078:	83 c4 10             	add    esp,0x10
c002707b:	5b                   	pop    ebx
c002707c:	c3                   	ret    

Disassembly of section align_previous:

c0028000 <DO_NOT_DELETE()>:
c0028000:	c3                   	ret    
