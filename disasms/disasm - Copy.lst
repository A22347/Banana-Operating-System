
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 7e fa 00 00       	call   c000fa9e <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 88 73 02 c0       	mov    eax,0xc0027388
c0000025:	3d 88 73 02 c0       	cmp    eax,0xc0027388
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 88 73 02 c0       	push   0xc0027388
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 88 73 02 c0       	mov    eax,0xc0027388
c0000051:	2d 88 73 02 c0       	sub    eax,0xc0027388
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 88 73 02 c0       	push   0xc0027388
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 90 02 c0 00 	cmp    BYTE PTR ds:0xc00290c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 2c 2e 02 c0       	mov    ebx,0xc0022e2c
c0000097:	81 eb 28 2e 02 c0    	sub    ebx,0xc0022e28
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 28 2e 02 c0       	mov    esi,0xc0022e28
c00000a6:	a1 c4 90 02 c0       	mov    eax,ds:0xc00290c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 90 02 c0       	mov    ds:0xc00290c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 90 02 c0       	mov    eax,ds:0xc00290c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 88 73 02 c0       	push   0xc0027388
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 90 02 c0 01 	mov    BYTE PTR ds:0xc00290c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 90 02 c0       	push   0xc00290c8
c0000108:	68 88 73 02 c0       	push   0xc0027388
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 e3 69 01 00       	call   c0016c90 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 02 41 01 00       	call   c00143c7 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 c1 69 01 00       	call   c0016c90 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 22 6f 01 00       	call   c0017210 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 91 74 01 00       	call   c0017788 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 18 d1 02 c0 	lgdtd  ds:0xc002d118
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 36 eb 00 00       	jmp    c000eeb5 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 90 02 c0       	mov    ds:0xc00290e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 90 02 c0    	mov    DWORD PTR ds:0xc00290e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 90 02 c0    	mov    ebx,DWORD PTR ds:0xc00290e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 40 2e 02 c0 02 	test   BYTE PTR [edx-0x3ffdd1c0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 40 2e 02 c0 01 	test   BYTE PTR [edx-0x3ffdd1c0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 40 2e 02 c0 08 	test   BYTE PTR [edx-0x3ffdd1c0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 40 2e 02 c0 04 	test   BYTE PTR [ecx-0x3ffdd1c0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 40 2e 02 c0 01 	test   BYTE PTR [edx-0x3ffdd1c0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d5a:	85 c9                	test   ecx,ecx
c0000d5c:	0f 84 01 01 00 00    	je     c0000e63 <dlfree+0x110>
c0000d62:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d65:	8b 1d 00 91 02 c0    	mov    ebx,DWORD PTR ds:0xc0029100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c3                	cmp    ebx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 cb 03             	or     ebx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 1d 00 91 02 c0    	mov    DWORD PTR ds:0xc0029100,ebx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 1c 85 04 91 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd6efc]
c0000d8d:	89 19                	mov    DWORD PTR [ecx],ebx
c0000d8f:	89 14 85 04 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6efc],edx
c0000d96:	e9 c8 00 00 00       	jmp    c0000e63 <dlfree+0x110>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 cb 01             	or     ebx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 1d 00 91 02 c0    	mov    DWORD PTR ds:0xc0029100,ebx
c0000db0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000db3:	83 e3 fc             	and    ebx,0xfffffffc
c0000db6:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000dbf:	29 ca                	sub    edx,ecx
c0000dc1:	01 c8                	add    eax,ecx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dc9:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dcc:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000dcf:	39 35 2c 91 02 c0    	cmp    DWORD PTR ds:0xc002912c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000ddb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000dde:	80 e1 01             	and    cl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000de9:	01 d8                	add    eax,ebx
c0000deb:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dee:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000df1:	8b 0d 3c 91 02 c0    	mov    ecx,DWORD PTR ds:0xc002913c
c0000df7:	c7 42 0c 34 91 02 c0 	mov    DWORD PTR [edx+0xc],0xc0029134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 91 02 c0    	mov    DWORD PTR ds:0xc002913c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 d8                	add    eax,ebx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 91 02 c0    	mov    DWORD PTR ds:0xc002912c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 35                	jbe    c0000e63 <dlfree+0x110>
c0000e2e:	f6 05 00 91 02 c0 02 	test   BYTE PTR ds:0xc0029100,0x2
c0000e35:	74 2c                	je     c0000e63 <dlfree+0x110>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e47:	01 c8                	add    eax,ecx
c0000e49:	53                   	push   ebx
c0000e4a:	29 ca                	sub    edx,ecx
c0000e4c:	53                   	push   ebx
c0000e4d:	ff 0d 50 94 02 c0    	dec    DWORD PTR ds:0xc0029450
c0000e53:	50                   	push   eax
c0000e54:	29 05 64 94 02 c0    	sub    DWORD PTR ds:0xc0029464,eax
c0000e5a:	52                   	push   edx
c0000e5b:	e8 81 e8 00 00       	call   c000f6e1 <munmap>
c0000e60:	83 c4 10             	add    esp,0x10
c0000e63:	5b                   	pop    ebx
c0000e64:	5e                   	pop    esi
c0000e65:	5f                   	pop    edi
c0000e66:	c3                   	ret    

c0000e67 <sYSMALLOc>:
c0000e67:	55                   	push   ebp
c0000e68:	57                   	push   edi
c0000e69:	56                   	push   esi
c0000e6a:	53                   	push   ebx
c0000e6b:	89 d3                	mov    ebx,edx
c0000e6d:	83 ec 2c             	sub    esp,0x2c
c0000e70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e74:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0000e7a:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e7d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0000e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e84:	74 1f                	je     c0000ea5 <sYSMALLOc+0x3e>
c0000e86:	89 d0                	mov    eax,edx
c0000e88:	e8 df fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e8d:	83 ec 0c             	sub    esp,0xc
c0000e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000e94:	83 e8 07             	sub    eax,0x7
c0000e97:	50                   	push   eax
c0000e98:	e8 7d 03 00 00       	call   c000121a <dlmalloc>
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	e9 6d 03 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0000ea5:	f7 dd                	neg    ebp
c0000ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000eab:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0000eaf:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000eb5:	0f 87 be 00 00 00    	ja     c0000f79 <sYSMALLOc+0x112>
c0000ebb:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ec1:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000ec7:	0f 8d ac 00 00 00    	jge    c0000f79 <sYSMALLOc+0x112>
c0000ecd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0000ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ed5:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000ed9:	21 ee                	and    esi,ebp
c0000edb:	39 fe                	cmp    esi,edi
c0000edd:	0f 86 96 00 00 00    	jbe    c0000f79 <sYSMALLOc+0x112>
c0000ee3:	52                   	push   edx
c0000ee4:	52                   	push   edx
c0000ee5:	6a 00                	push   0x0
c0000ee7:	6a ff                	push   0xffffffff
c0000ee9:	6a 0c                	push   0xc
c0000eeb:	6a 03                	push   0x3
c0000eed:	56                   	push   esi
c0000eee:	6a 00                	push   0x0
c0000ef0:	e8 8e e7 00 00       	call   c000f683 <mmap>
c0000ef5:	83 c4 20             	add    esp,0x20
c0000ef8:	83 f8 ff             	cmp    eax,0xffffffff
c0000efb:	74 7c                	je     c0000f79 <sYSMALLOc+0x112>
c0000efd:	89 c1                	mov    ecx,eax
c0000eff:	83 e1 07             	and    ecx,0x7
c0000f02:	74 13                	je     c0000f17 <sYSMALLOc+0xb0>
c0000f04:	ba 08 00 00 00       	mov    edx,0x8
c0000f09:	29 ca                	sub    edx,ecx
c0000f0b:	89 f1                	mov    ecx,esi
c0000f0d:	01 d0                	add    eax,edx
c0000f0f:	29 d1                	sub    ecx,edx
c0000f11:	89 10                	mov    DWORD PTR [eax],edx
c0000f13:	89 ca                	mov    edx,ecx
c0000f15:	eb 08                	jmp    c0000f1f <sYSMALLOc+0xb8>
c0000f17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f1d:	89 f2                	mov    edx,esi
c0000f1f:	83 ca 02             	or     edx,0x2
c0000f22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f25:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f2b:	8d 57 01             	lea    edx,[edi+0x1]
c0000f2e:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f34:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f3a:	7e 06                	jle    c0000f42 <sYSMALLOc+0xdb>
c0000f3c:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f42:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f48:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f4e:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f54:	76 06                	jbe    c0000f5c <sYSMALLOc+0xf5>
c0000f56:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f5c:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f62:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f68:	0f 83 3f 01 00 00    	jae    c00010ad <sYSMALLOc+0x246>
c0000f6e:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000f74:	e9 34 01 00 00       	jmp    c00010ad <sYSMALLOc+0x246>
c0000f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f7c:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000f86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000f89:	83 e0 fc             	and    eax,0xfffffffc
c0000f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0000f8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f93:	03 04 24             	add    eax,DWORD PTR [esp]
c0000f96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f9e:	83 c0 10             	add    eax,0x10
c0000fa1:	01 c5                	add    ebp,eax
c0000fa3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fa7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fae:	74 03                	je     c0000fb3 <sYSMALLOc+0x14c>
c0000fb0:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0000fb3:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0000fb7:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0000fbb:	89 ee                	mov    esi,ebp
c0000fbd:	7f 18                	jg     c0000fd7 <sYSMALLOc+0x170>
c0000fbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fc6:	74 27                	je     c0000fef <sYSMALLOc+0x188>
c0000fc8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000fcc:	03 34 24             	add    esi,DWORD PTR [esp]
c0000fcf:	01 ee                	add    esi,ebp
c0000fd1:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c0000fd5:	eb 18                	jmp    c0000fef <sYSMALLOc+0x188>
c0000fd7:	83 ec 0c             	sub    esp,0xc
c0000fda:	55                   	push   ebp
c0000fdb:	e8 6d e6 00 00       	call   c000f64d <sbrk_thunk>
c0000fe0:	83 c4 10             	add    esp,0x10
c0000fe3:	89 c7                	mov    edi,eax
c0000fe5:	83 c8 ff             	or     eax,0xffffffff
c0000fe8:	83 ff ff             	cmp    edi,0xffffffff
c0000feb:	75 42                	jne    c000102f <sYSMALLOc+0x1c8>
c0000fed:	eb d0                	jmp    c0000fbf <sYSMALLOc+0x158>
c0000fef:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c0000ff5:	77 05                	ja     c0000ffc <sYSMALLOc+0x195>
c0000ff7:	be 00 c0 00 00       	mov    esi,0xc000
c0000ffc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0001000:	77 07                	ja     c0001009 <sYSMALLOc+0x1a2>
c0001002:	31 c0                	xor    eax,eax
c0001004:	e9 09 02 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0001009:	50                   	push   eax
c000100a:	50                   	push   eax
c000100b:	6a 00                	push   0x0
c000100d:	6a ff                	push   0xffffffff
c000100f:	6a 0c                	push   0xc
c0001011:	6a 03                	push   0x3
c0001013:	56                   	push   esi
c0001014:	6a 00                	push   0x0
c0001016:	e8 68 e6 00 00       	call   c000f683 <mmap>
c000101b:	83 c4 20             	add    esp,0x20
c000101e:	89 c7                	mov    edi,eax
c0001020:	83 f8 ff             	cmp    eax,0xffffffff
c0001023:	74 dd                	je     c0001002 <sYSMALLOc+0x19b>
c0001025:	8d 04 30             	lea    eax,[eax+esi*1]
c0001028:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000102f:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c0001035:	01 f5                	add    ebp,esi
c0001037:	83 f8 ff             	cmp    eax,0xffffffff
c000103a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0001040:	75 73                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001042:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001046:	75 6d                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001048:	03 34 24             	add    esi,DWORD PTR [esp]
c000104b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000104f:	83 ce 01             	or     esi,0x1
c0001052:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001055:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000105b:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001061:	73 06                	jae    c0001069 <sYSMALLOc+0x202>
c0001063:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001069:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106f:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001075:	73 06                	jae    c000107d <sYSMALLOc+0x216>
c0001077:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001080:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001083:	83 e2 fc             	and    edx,0xfffffffc
c0001086:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000108a:	0f 82 72 ff ff ff    	jb     c0001002 <sYSMALLOc+0x19b>
c0001090:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001094:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0001098:	01 c1                	add    ecx,eax
c000109a:	83 ca 01             	or     edx,0x1
c000109d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010a0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00010a4:	83 cb 01             	or     ebx,0x1
c00010a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010ad:	83 c0 08             	add    eax,0x8
c00010b0:	e9 5d 01 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c00010b5:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010bb:	89 d1                	mov    ecx,edx
c00010bd:	83 e1 01             	and    ecx,0x1
c00010c0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010c4:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c00010c9:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c00010cd:	74 14                	je     c00010e3 <sYSMALLOc+0x27c>
c00010cf:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00010d3:	76 0e                	jbe    c00010e3 <sYSMALLOc+0x27c>
c00010d5:	83 e2 fe             	and    edx,0xfffffffe
c00010d8:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00010de:	e9 89 00 00 00       	jmp    c000116c <sYSMALLOc+0x305>
c00010e3:	85 c9                	test   ecx,ecx
c00010e5:	0f 84 81 00 00 00    	je     c000116c <sYSMALLOc+0x305>
c00010eb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010ef:	74 0e                	je     c00010ff <sYSMALLOc+0x298>
c00010f1:	89 f8                	mov    eax,edi
c00010f3:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00010f7:	01 c5                	add    ebp,eax
c00010f9:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00010ff:	89 fa                	mov    edx,edi
c0001101:	83 e2 07             	and    edx,0x7
c0001104:	74 0c                	je     c0001112 <sYSMALLOc+0x2ab>
c0001106:	b8 08 00 00 00       	mov    eax,0x8
c000110b:	29 d0                	sub    eax,edx
c000110d:	8d 14 07             	lea    edx,[edi+eax*1]
c0001110:	eb 04                	jmp    c0001116 <sYSMALLOc+0x2af>
c0001112:	89 fa                	mov    edx,edi
c0001114:	31 c0                	xor    eax,eax
c0001116:	03 04 24             	add    eax,DWORD PTR [esp]
c0001119:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000111d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0001121:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001124:	83 ec 0c             	sub    esp,0xc
c0001127:	01 f9                	add    ecx,edi
c0001129:	01 cd                	add    ebp,ecx
c000112b:	29 c8                	sub    eax,ecx
c000112d:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c0001131:	01 c5                	add    ebp,eax
c0001133:	55                   	push   ebp
c0001134:	e8 14 e5 00 00       	call   c000f64d <sbrk_thunk>
c0001139:	83 c4 10             	add    esp,0x10
c000113c:	83 f8 ff             	cmp    eax,0xffffffff
c000113f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0001143:	75 17                	jne    c000115c <sYSMALLOc+0x2f5>
c0001145:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001149:	83 ec 0c             	sub    esp,0xc
c000114c:	6a 00                	push   0x0
c000114e:	e8 fa e4 00 00       	call   c000f64d <sbrk_thunk>
c0001153:	83 c4 10             	add    esp,0x10
c0001156:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000115a:	eb 32                	jmp    c000118e <sYSMALLOc+0x327>
c000115c:	39 f8                	cmp    eax,edi
c000115e:	73 39                	jae    c0001199 <sYSMALLOc+0x332>
c0001160:	8d 04 37             	lea    eax,[edi+esi*1]
c0001163:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000116a:	eb 22                	jmp    c000118e <sYSMALLOc+0x327>
c000116c:	89 fa                	mov    edx,edi
c000116e:	83 f8 ff             	cmp    eax,0xffffffff
c0001171:	75 24                	jne    c0001197 <sYSMALLOc+0x330>
c0001173:	83 ec 0c             	sub    esp,0xc
c0001176:	6a 00                	push   0x0
c0001178:	e8 d0 e4 00 00       	call   c000f64d <sbrk_thunk>
c000117d:	83 c4 10             	add    esp,0x10
c0001180:	89 c2                	mov    edx,eax
c0001182:	29 fa                	sub    edx,edi
c0001184:	29 f2                	sub    edx,esi
c0001186:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000118c:	89 fa                	mov    edx,edi
c000118e:	83 f8 ff             	cmp    eax,0xffffffff
c0001191:	0f 84 be fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c0001197:	31 ed                	xor    ebp,ebp
c0001199:	29 d0                	sub    eax,edx
c000119b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000119e:	01 e8                	add    eax,ebp
c00011a0:	83 c8 01             	or     eax,0x1
c00011a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00011a6:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c00011ac:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00011b0:	0f 84 9f fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c00011b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00011bd:	83 ee 0c             	sub    esi,0xc
c00011c0:	83 e6 f8             	and    esi,0xfffffff8
c00011c3:	89 f0                	mov    eax,esi
c00011c5:	83 c8 01             	or     eax,0x1
c00011c8:	83 fe 0f             	cmp    esi,0xf
c00011cb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00011ce:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c00011d6:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c00011de:	0f 86 71 fe ff ff    	jbe    c0001055 <sYSMALLOc+0x1ee>
c00011e4:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00011ea:	83 ec 0c             	sub    esp,0xc
c00011ed:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00011fb:	83 c0 08             	add    eax,0x8
c00011fe:	50                   	push   eax
c00011ff:	e8 4f fb ff ff       	call   c0000d53 <dlfree>
c0001204:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000120a:	83 c4 10             	add    esp,0x10
c000120d:	e9 43 fe ff ff       	jmp    c0001055 <sYSMALLOc+0x1ee>
c0001212:	83 c4 2c             	add    esp,0x2c
c0001215:	5b                   	pop    ebx
c0001216:	5e                   	pop    esi
c0001217:	5f                   	pop    edi
c0001218:	5d                   	pop    ebp
c0001219:	c3                   	ret    

c000121a <dlmalloc>:
c000121a:	55                   	push   ebp
c000121b:	57                   	push   edi
c000121c:	56                   	push   esi
c000121d:	53                   	push   ebx
c000121e:	83 ec 1c             	sub    esp,0x1c
c0001221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001225:	83 f8 df             	cmp    eax,0xffffffdf
c0001228:	0f 87 70 03 00 00    	ja     c000159e <dlmalloc+0x384>
c000122e:	83 c0 0b             	add    eax,0xb
c0001231:	be 10 00 00 00       	mov    esi,0x10
c0001236:	83 f8 0f             	cmp    eax,0xf
c0001239:	76 05                	jbe    c0001240 <dlmalloc+0x26>
c000123b:	83 e0 f8             	and    eax,0xfffffff8
c000123e:	89 c6                	mov    esi,eax
c0001240:	8b 3d 00 91 02 c0    	mov    edi,DWORD PTR ds:0xc0029100
c0001246:	f7 c7 01 00 00 00    	test   edi,0x1
c000124c:	75 17                	jne    c0001265 <dlmalloc+0x4b>
c000124e:	85 ff                	test   edi,edi
c0001250:	0f 85 05 03 00 00    	jne    c000155b <dlmalloc+0x341>
c0001256:	b8 00 91 02 c0       	mov    eax,0xc0029100
c000125b:	e8 0c fa ff ff       	call   c0000c6c <malloc_consolidate>
c0001260:	e9 f6 02 00 00       	jmp    c000155b <dlmalloc+0x341>
c0001265:	39 f7                	cmp    edi,esi
c0001267:	72 1f                	jb     c0001288 <dlmalloc+0x6e>
c0001269:	89 f2                	mov    edx,esi
c000126b:	c1 ea 03             	shr    edx,0x3
c000126e:	83 ea 02             	sub    edx,0x2
c0001271:	8b 04 95 04 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6efc]
c0001278:	85 c0                	test   eax,eax
c000127a:	74 0c                	je     c0001288 <dlmalloc+0x6e>
c000127c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000127f:	89 0c 95 04 91 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6efc],ecx
c0001286:	eb 30                	jmp    c00012b8 <dlmalloc+0x9e>
c0001288:	89 f0                	mov    eax,esi
c000128a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001290:	77 2e                	ja     c00012c0 <dlmalloc+0xa6>
c0001292:	c1 e8 03             	shr    eax,0x3
c0001295:	8d 14 c5 34 91 02 c0 	lea    edx,[eax*8-0x3ffd6ecc]
c000129c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012a0:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012a6:	39 c3                	cmp    ebx,eax
c00012a8:	74 2e                	je     c00012d8 <dlmalloc+0xbe>
c00012aa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012ad:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012b2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012b5:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012b8:	83 c0 08             	add    eax,0x8
c00012bb:	e9 e0 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c00012c0:	e8 23 f9 ff ff       	call   c0000be8 <largebin_index>
c00012c5:	83 e7 02             	and    edi,0x2
c00012c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012cc:	74 0a                	je     c00012d8 <dlmalloc+0xbe>
c00012ce:	b8 00 91 02 c0       	mov    eax,0xc0029100
c00012d3:	e8 94 f9 ff ff       	call   c0000c6c <malloc_consolidate>
c00012d8:	8d 46 10             	lea    eax,[esi+0x10]
c00012db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012df:	8b 1d 40 91 02 c0    	mov    ebx,DWORD PTR ds:0xc0029140
c00012e5:	81 fb 34 91 02 c0    	cmp    ebx,0xc0029134
c00012eb:	0f 84 13 01 00 00    	je     c0001404 <dlmalloc+0x1ea>
c00012f1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00012f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00012f7:	83 e7 fc             	and    edi,0xfffffffc
c00012fa:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001300:	77 4c                	ja     c000134e <dlmalloc+0x134>
c0001302:	3d 34 91 02 c0       	cmp    eax,0xc0029134
c0001307:	75 45                	jne    c000134e <dlmalloc+0x134>
c0001309:	39 1d 30 91 02 c0    	cmp    DWORD PTR ds:0xc0029130,ebx
c000130f:	75 3d                	jne    c000134e <dlmalloc+0x134>
c0001311:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001315:	73 37                	jae    c000134e <dlmalloc+0x134>
c0001317:	8d 04 33             	lea    eax,[ebx+esi*1]
c000131a:	89 fa                	mov    edx,edi
c000131c:	a3 3c 91 02 c0       	mov    ds:0xc002913c,eax
c0001321:	a3 40 91 02 c0       	mov    ds:0xc0029140,eax
c0001326:	a3 30 91 02 c0       	mov    ds:0xc0029130,eax
c000132b:	29 f2                	sub    edx,esi
c000132d:	c7 40 08 34 91 02 c0 	mov    DWORD PTR [eax+0x8],0xc0029134
c0001334:	c7 40 0c 34 91 02 c0 	mov    DWORD PTR [eax+0xc],0xc0029134
c000133b:	83 ce 01             	or     esi,0x1
c000133e:	89 d1                	mov    ecx,edx
c0001340:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001343:	83 c9 01             	or     ecx,0x1
c0001346:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001349:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000134c:	eb 15                	jmp    c0001363 <dlmalloc+0x149>
c000134e:	a3 40 91 02 c0       	mov    ds:0xc0029140,eax
c0001353:	39 fe                	cmp    esi,edi
c0001355:	c7 40 08 34 91 02 c0 	mov    DWORD PTR [eax+0x8],0xc0029134
c000135c:	75 0d                	jne    c000136b <dlmalloc+0x151>
c000135e:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001363:	8d 43 08             	lea    eax,[ebx+0x8]
c0001366:	e9 35 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000136b:	89 f8                	mov    eax,edi
c000136d:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001373:	77 19                	ja     c000138e <dlmalloc+0x174>
c0001375:	c1 e8 03             	shr    eax,0x3
c0001378:	8d 14 00             	lea    edx,[eax+eax*1]
c000137b:	83 c2 0d             	add    edx,0xd
c000137e:	8d 2c 95 f8 90 02 c0 	lea    ebp,[edx*4-0x3ffd6f08]
c0001385:	8b 14 95 00 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6f00]
c000138c:	eb 46                	jmp    c00013d4 <dlmalloc+0x1ba>
c000138e:	e8 55 f8 ff ff       	call   c0000be8 <largebin_index>
c0001393:	8d 14 00             	lea    edx,[eax+eax*1]
c0001396:	83 c2 0d             	add    edx,0xd
c0001399:	8d 0c 95 00 91 02 c0 	lea    ecx,[edx*4-0x3ffd6f00]
c00013a0:	8b 14 95 00 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6f00]
c00013a7:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013aa:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013ae:	89 d5                	mov    ebp,edx
c00013b0:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013b4:	74 1e                	je     c00013d4 <dlmalloc+0x1ba>
c00013b6:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013b9:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013bc:	77 12                	ja     c00013d0 <dlmalloc+0x1b6>
c00013be:	83 cf 01             	or     edi,0x1
c00013c1:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013c4:	76 05                	jbe    c00013cb <dlmalloc+0x1b1>
c00013c6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013c9:	eb f6                	jmp    c00013c1 <dlmalloc+0x1a7>
c00013cb:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013ce:	eb 04                	jmp    c00013d4 <dlmalloc+0x1ba>
c00013d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00013d4:	89 c7                	mov    edi,eax
c00013d6:	88 c1                	mov    cl,al
c00013d8:	c1 ff 05             	sar    edi,0x5
c00013db:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00013df:	bf 01 00 00 00       	mov    edi,0x1
c00013e4:	d3 e7                	shl    edi,cl
c00013e6:	89 f8                	mov    eax,edi
c00013e8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00013ec:	09 04 bd 34 94 02 c0 	or     DWORD PTR [edi*4-0x3ffd6bcc],eax
c00013f3:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00013f6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00013f9:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00013fc:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00013ff:	e9 db fe ff ff       	jmp    c00012df <dlmalloc+0xc5>
c0001404:	81 fe ff 00 00 00    	cmp    esi,0xff
c000140a:	76 78                	jbe    c0001484 <dlmalloc+0x26a>
c000140c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001410:	8d 04 c5 34 91 02 c0 	lea    eax,[eax*8-0x3ffd6ecc]
c0001417:	8d 48 f8             	lea    ecx,[eax-0x8]
c000141a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000141d:	39 ca                	cmp    edx,ecx
c000141f:	74 63                	je     c0001484 <dlmalloc+0x26a>
c0001421:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001424:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001427:	83 e3 fc             	and    ebx,0xfffffffc
c000142a:	39 de                	cmp    esi,ebx
c000142c:	77 52                	ja     c0001480 <dlmalloc+0x266>
c000142e:	89 df                	mov    edi,ebx
c0001430:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001433:	29 f7                	sub    edi,esi
c0001435:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001438:	01 d3                	add    ebx,edx
c000143a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000143d:	83 ff 0f             	cmp    edi,0xf
c0001440:	8d 42 08             	lea    eax,[edx+0x8]
c0001443:	77 09                	ja     c000144e <dlmalloc+0x234>
c0001445:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001449:	e9 52 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000144e:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001451:	83 ce 01             	or     esi,0x1
c0001454:	89 0d 3c 91 02 c0    	mov    DWORD PTR ds:0xc002913c,ecx
c000145a:	89 0d 40 91 02 c0    	mov    DWORD PTR ds:0xc0029140,ecx
c0001460:	c7 41 08 34 91 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0029134
c0001467:	c7 41 0c 34 91 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0029134
c000146e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001471:	89 fa                	mov    edx,edi
c0001473:	83 ca 01             	or     edx,0x1
c0001476:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001479:	89 3b                	mov    DWORD PTR [ebx],edi
c000147b:	e9 20 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c0001480:	89 c2                	mov    edx,eax
c0001482:	eb 99                	jmp    c000141d <dlmalloc+0x203>
c0001484:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001488:	b8 01 00 00 00       	mov    eax,0x1
c000148d:	41                   	inc    ecx
c000148e:	89 cb                	mov    ebx,ecx
c0001490:	8d 14 cd 2c 91 02 c0 	lea    edx,[ecx*8-0x3ffd6ed4]
c0001497:	c1 eb 05             	shr    ebx,0x5
c000149a:	d3 e0                	shl    eax,cl
c000149c:	8b 3c 9d 34 94 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd6bcc]
c00014a3:	39 f8                	cmp    eax,edi
c00014a5:	77 04                	ja     c00014ab <dlmalloc+0x291>
c00014a7:	85 c0                	test   eax,eax
c00014a9:	75 26                	jne    c00014d1 <dlmalloc+0x2b7>
c00014ab:	43                   	inc    ebx
c00014ac:	83 fb 02             	cmp    ebx,0x2
c00014af:	0f 87 a6 00 00 00    	ja     c000155b <dlmalloc+0x341>
c00014b5:	8b 3c 9d 34 94 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd6bcc]
c00014bc:	85 ff                	test   edi,edi
c00014be:	74 eb                	je     c00014ab <dlmalloc+0x291>
c00014c0:	89 d8                	mov    eax,ebx
c00014c2:	c1 e0 06             	shl    eax,0x6
c00014c5:	8d 14 85 2c 91 02 c0 	lea    edx,[eax*4-0x3ffd6ed4]
c00014cc:	b8 01 00 00 00       	mov    eax,0x1
c00014d1:	85 f8                	test   eax,edi
c00014d3:	75 07                	jne    c00014dc <dlmalloc+0x2c2>
c00014d5:	83 c2 08             	add    edx,0x8
c00014d8:	01 c0                	add    eax,eax
c00014da:	eb f5                	jmp    c00014d1 <dlmalloc+0x2b7>
c00014dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00014df:	39 ca                	cmp    edx,ecx
c00014e1:	75 14                	jne    c00014f7 <dlmalloc+0x2dd>
c00014e3:	89 c1                	mov    ecx,eax
c00014e5:	83 c2 08             	add    edx,0x8
c00014e8:	f7 d1                	not    ecx
c00014ea:	01 c0                	add    eax,eax
c00014ec:	21 cf                	and    edi,ecx
c00014ee:	89 3c 9d 34 94 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd6bcc],edi
c00014f5:	eb ac                	jmp    c00014a3 <dlmalloc+0x289>
c00014f7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00014fa:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00014fd:	83 e0 fc             	and    eax,0xfffffffc
c0001500:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001503:	89 c3                	mov    ebx,eax
c0001505:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001508:	29 f3                	sub    ebx,esi
c000150a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000150d:	83 fb 0f             	cmp    ebx,0xf
c0001510:	8d 41 08             	lea    eax,[ecx+0x8]
c0001513:	77 09                	ja     c000151e <dlmalloc+0x304>
c0001515:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001519:	e9 82 00 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000151e:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001521:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001527:	89 3d 3c 91 02 c0    	mov    DWORD PTR ds:0xc002913c,edi
c000152d:	89 3d 40 91 02 c0    	mov    DWORD PTR ds:0xc0029140,edi
c0001533:	c7 47 08 34 91 02 c0 	mov    DWORD PTR [edi+0x8],0xc0029134
c000153a:	c7 47 0c 34 91 02 c0 	mov    DWORD PTR [edi+0xc],0xc0029134
c0001541:	77 06                	ja     c0001549 <dlmalloc+0x32f>
c0001543:	89 3d 30 91 02 c0    	mov    DWORD PTR ds:0xc0029130,edi
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000154f:	89 d9                	mov    ecx,ebx
c0001551:	83 c9 01             	or     ecx,0x1
c0001554:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001557:	89 1a                	mov    DWORD PTR [edx],ebx
c0001559:	eb 45                	jmp    c00015a0 <dlmalloc+0x386>
c000155b:	a1 2c 91 02 c0       	mov    eax,ds:0xc002912c
c0001560:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001563:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001566:	83 e2 fc             	and    edx,0xfffffffc
c0001569:	39 d1                	cmp    ecx,edx
c000156b:	77 1e                	ja     c000158b <dlmalloc+0x371>
c000156d:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001570:	89 f3                	mov    ebx,esi
c0001572:	89 0d 2c 91 02 c0    	mov    DWORD PTR ds:0xc002912c,ecx
c0001578:	83 cb 01             	or     ebx,0x1
c000157b:	29 f2                	sub    edx,esi
c000157d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001580:	83 ca 01             	or     edx,0x1
c0001583:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001586:	e9 2d fd ff ff       	jmp    c00012b8 <dlmalloc+0x9e>
c000158b:	83 c4 1c             	add    esp,0x1c
c000158e:	89 f0                	mov    eax,esi
c0001590:	5b                   	pop    ebx
c0001591:	ba 00 91 02 c0       	mov    edx,0xc0029100
c0001596:	5e                   	pop    esi
c0001597:	5f                   	pop    edi
c0001598:	5d                   	pop    ebp
c0001599:	e9 c9 f8 ff ff       	jmp    c0000e67 <sYSMALLOc>
c000159e:	31 c0                	xor    eax,eax
c00015a0:	83 c4 1c             	add    esp,0x1c
c00015a3:	5b                   	pop    ebx
c00015a4:	5e                   	pop    esi
c00015a5:	5f                   	pop    edi
c00015a6:	5d                   	pop    ebp
c00015a7:	c3                   	ret    

c00015a8 <iALLOc>:
c00015a8:	55                   	push   ebp
c00015a9:	89 c5                	mov    ebp,eax
c00015ab:	57                   	push   edi
c00015ac:	56                   	push   esi
c00015ad:	53                   	push   ebx
c00015ae:	83 ec 2c             	sub    esp,0x2c
c00015b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015bd:	83 3d 00 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029100,0x0
c00015c4:	75 12                	jne    c00015d8 <iALLOc+0x30>
c00015c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015ca:	b8 00 91 02 c0       	mov    eax,0xc0029100
c00015cf:	e8 98 f6 ff ff       	call   c0000c6c <malloc_consolidate>
c00015d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00015d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015dd:	74 12                	je     c00015f1 <iALLOc+0x49>
c00015df:	85 ed                	test   ebp,ebp
c00015e1:	0f 84 64 01 00 00    	je     c000174b <iALLOc+0x1a3>
c00015e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00015ef:	eb 33                	jmp    c0001624 <iALLOc+0x7c>
c00015f1:	85 ed                	test   ebp,ebp
c00015f3:	75 14                	jne    c0001609 <iALLOc+0x61>
c00015f5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00015fd:	83 c4 2c             	add    esp,0x2c
c0001600:	5b                   	pop    ebx
c0001601:	5e                   	pop    esi
c0001602:	5f                   	pop    edi
c0001603:	5d                   	pop    ebp
c0001604:	e9 11 fc ff ff       	jmp    c000121a <dlmalloc>
c0001609:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001610:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001618:	83 f8 0f             	cmp    eax,0xf
c000161b:	76 07                	jbe    c0001624 <iALLOc+0x7c>
c000161d:	83 e0 f8             	and    eax,0xfffffff8
c0001620:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001624:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001629:	75 09                	jne    c0001634 <iALLOc+0x8c>
c000162b:	89 d0                	mov    eax,edx
c000162d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001630:	31 f6                	xor    esi,esi
c0001632:	eb 3b                	jmp    c000166f <iALLOc+0xc7>
c0001634:	8b 02                	mov    eax,DWORD PTR [edx]
c0001636:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000163e:	83 c0 0b             	add    eax,0xb
c0001641:	83 f8 0f             	cmp    eax,0xf
c0001644:	76 07                	jbe    c000164d <iALLOc+0xa5>
c0001646:	83 e0 f8             	and    eax,0xfffffff8
c0001649:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000164d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001651:	0f af f5             	imul   esi,ebp
c0001654:	eb 25                	jmp    c000167b <iALLOc+0xd3>
c0001656:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001658:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000165b:	bb 10 00 00 00       	mov    ebx,0x10
c0001660:	83 f9 0f             	cmp    ecx,0xf
c0001663:	76 05                	jbe    c000166a <iALLOc+0xc2>
c0001665:	83 e1 f8             	and    ecx,0xfffffff8
c0001668:	89 cb                	mov    ebx,ecx
c000166a:	01 de                	add    esi,ebx
c000166c:	83 c0 04             	add    eax,0x4
c000166f:	39 c7                	cmp    edi,eax
c0001671:	75 e3                	jne    c0001656 <iALLOc+0xae>
c0001673:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000167b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000167f:	8b 1d 54 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029454
c0001685:	83 ec 0c             	sub    esp,0xc
c0001688:	c7 05 54 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029454,0x0
c0001692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001696:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000169a:	50                   	push   eax
c000169b:	e8 7a fb ff ff       	call   c000121a <dlmalloc>
c00016a0:	83 c4 10             	add    esp,0x10
c00016a3:	89 1d 54 94 02 c0    	mov    DWORD PTR ds:0xc0029454,ebx
c00016a9:	85 c0                	test   eax,eax
c00016ab:	0f 84 92 00 00 00    	je     c0001743 <iALLOc+0x19b>
c00016b1:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016b4:	8d 78 f8             	lea    edi,[eax-0x8]
c00016b7:	83 e3 fc             	and    ebx,0xfffffffc
c00016ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016be:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016c3:	74 1e                	je     c00016e3 <iALLOc+0x13b>
c00016c5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016c9:	89 d9                	mov    ecx,ebx
c00016cb:	52                   	push   edx
c00016cc:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016d0:	83 e9 04             	sub    ecx,0x4
c00016d3:	51                   	push   ecx
c00016d4:	6a 00                	push   0x0
c00016d6:	50                   	push   eax
c00016d7:	e8 14 ee ff ff       	call   c00004f0 <memset>
c00016dc:	83 c4 10             	add    esp,0x10
c00016df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00016e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00016e8:	75 14                	jne    c00016fe <iALLOc+0x156>
c00016ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ed:	29 f3                	sub    ebx,esi
c00016ef:	8d 48 08             	lea    ecx,[eax+0x8]
c00016f2:	83 cb 01             	or     ebx,0x1
c00016f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016f9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00016fc:	89 f3                	mov    ebx,esi
c00016fe:	31 c0                	xor    eax,eax
c0001700:	4d                   	dec    ebp
c0001701:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001704:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001708:	39 c5                	cmp    ebp,eax
c000170a:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000170d:	74 2c                	je     c000173b <iALLOc+0x193>
c000170f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001713:	85 c9                	test   ecx,ecx
c0001715:	75 15                	jne    c000172c <iALLOc+0x184>
c0001717:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000171a:	8d 71 0b             	lea    esi,[ecx+0xb]
c000171d:	b9 10 00 00 00       	mov    ecx,0x10
c0001722:	83 fe 0f             	cmp    esi,0xf
c0001725:	76 05                	jbe    c000172c <iALLOc+0x184>
c0001727:	83 e6 f8             	and    esi,0xfffffff8
c000172a:	89 f1                	mov    ecx,esi
c000172c:	89 ce                	mov    esi,ecx
c000172e:	29 cb                	sub    ebx,ecx
c0001730:	83 ce 01             	or     esi,0x1
c0001733:	40                   	inc    eax
c0001734:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001737:	01 cf                	add    edi,ecx
c0001739:	eb c6                	jmp    c0001701 <iALLOc+0x159>
c000173b:	83 cb 01             	or     ebx,0x1
c000173e:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001741:	eb 08                	jmp    c000174b <iALLOc+0x1a3>
c0001743:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000174b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000174f:	83 c4 2c             	add    esp,0x2c
c0001752:	5b                   	pop    ebx
c0001753:	5e                   	pop    esi
c0001754:	5f                   	pop    edi
c0001755:	5d                   	pop    ebp
c0001756:	c3                   	ret    

c0001757 <dlrealloc>:
c0001757:	55                   	push   ebp
c0001758:	57                   	push   edi
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	83 ec 1c             	sub    esp,0x1c
c000175e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001762:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001766:	85 db                	test   ebx,ebx
c0001768:	75 10                	jne    c000177a <dlrealloc+0x23>
c000176a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000176e:	83 c4 1c             	add    esp,0x1c
c0001771:	5b                   	pop    ebx
c0001772:	5e                   	pop    esi
c0001773:	5f                   	pop    edi
c0001774:	5d                   	pop    ebp
c0001775:	e9 a0 fa ff ff       	jmp    c000121a <dlmalloc>
c000177a:	83 f8 df             	cmp    eax,0xffffffdf
c000177d:	0f 87 a5 01 00 00    	ja     c0001928 <dlrealloc+0x1d1>
c0001783:	83 c0 0b             	add    eax,0xb
c0001786:	bd 10 00 00 00       	mov    ebp,0x10
c000178b:	83 f8 0f             	cmp    eax,0xf
c000178e:	76 05                	jbe    c0001795 <dlrealloc+0x3e>
c0001790:	83 e0 f8             	and    eax,0xfffffff8
c0001793:	89 c5                	mov    ebp,eax
c0001795:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001798:	89 c6                	mov    esi,eax
c000179a:	83 e6 fc             	and    esi,0xfffffffc
c000179d:	a8 02                	test   al,0x2
c000179f:	0f 85 4e 01 00 00    	jne    c00018f3 <dlrealloc+0x19c>
c00017a5:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017a8:	39 f5                	cmp    ebp,esi
c00017aa:	0f 86 04 01 00 00    	jbe    c00018b4 <dlrealloc+0x15d>
c00017b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00017b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00017b6:	39 15 2c 91 02 c0    	cmp    DWORD PTR ds:0xc002912c,edx
c00017bc:	75 33                	jne    c00017f1 <dlrealloc+0x9a>
c00017be:	83 e1 fc             	and    ecx,0xfffffffc
c00017c1:	01 f1                	add    ecx,esi
c00017c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00017ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00017ce:	77 49                	ja     c0001819 <dlrealloc+0xc2>
c00017d0:	01 ef                	add    edi,ebp
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 e8                	or     eax,ebp
c00017d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00017da:	89 3d 2c 91 02 c0    	mov    DWORD PTR ds:0xc002912c,edi
c00017e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017e4:	29 e8                	sub    eax,ebp
c00017e6:	83 c8 01             	or     eax,0x1
c00017e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00017ec:	e9 39 01 00 00       	jmp    c000192a <dlrealloc+0x1d3>
c00017f1:	89 c8                	mov    eax,ecx
c00017f3:	83 e0 fe             	and    eax,0xfffffffe
c00017f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00017fb:	75 1c                	jne    c0001819 <dlrealloc+0xc2>
c00017fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001800:	01 f1                	add    ecx,esi
c0001802:	39 cd                	cmp    ebp,ecx
c0001804:	77 13                	ja     c0001819 <dlrealloc+0xc2>
c0001806:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001809:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000180c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000180f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001812:	89 ce                	mov    esi,ecx
c0001814:	e9 9b 00 00 00       	jmp    c00018b4 <dlrealloc+0x15d>
c0001819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000181d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	50                   	push   eax
c0001824:	e8 f1 f9 ff ff       	call   c000121a <dlmalloc>
c0001829:	83 c4 10             	add    esp,0x10
c000182c:	85 c0                	test   eax,eax
c000182e:	0f 84 f4 00 00 00    	je     c0001928 <dlrealloc+0x1d1>
c0001834:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000183b:	39 ca                	cmp    edx,ecx
c000183d:	75 0a                	jne    c0001849 <dlrealloc+0xf2>
c000183f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001842:	83 e0 fc             	and    eax,0xfffffffc
c0001845:	01 c6                	add    esi,eax
c0001847:	eb 6b                	jmp    c00018b4 <dlrealloc+0x15d>
c0001849:	8d 4e fc             	lea    ecx,[esi-0x4]
c000184c:	83 f9 27             	cmp    ecx,0x27
c000184f:	76 08                	jbe    c0001859 <dlrealloc+0x102>
c0001851:	89 de                	mov    esi,ebx
c0001853:	89 c7                	mov    edi,eax
c0001855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001857:	eb 43                	jmp    c000189c <dlrealloc+0x145>
c0001859:	8b 13                	mov    edx,DWORD PTR [ebx]
c000185b:	83 f9 13             	cmp    ecx,0x13
c000185e:	89 10                	mov    DWORD PTR [eax],edx
c0001860:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001866:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001869:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000186c:	76 2e                	jbe    c000189c <dlrealloc+0x145>
c000186e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001871:	83 f9 1b             	cmp    ecx,0x1b
c0001874:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001877:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000187a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000187d:	76 1d                	jbe    c000189c <dlrealloc+0x145>
c000187f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001882:	83 f9 23             	cmp    ecx,0x23
c0001885:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001888:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000188b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000188e:	76 0c                	jbe    c000189c <dlrealloc+0x145>
c0001890:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001893:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001896:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001899:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000189c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018a0:	83 ec 0c             	sub    esp,0xc
c00018a3:	53                   	push   ebx
c00018a4:	e8 aa f4 ff ff       	call   c0000d53 <dlfree>
c00018a9:	83 c4 10             	add    esp,0x10
c00018ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018b0:	89 c3                	mov    ebx,eax
c00018b2:	eb 76                	jmp    c000192a <dlrealloc+0x1d3>
c00018b4:	89 f2                	mov    edx,esi
c00018b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018b9:	29 ea                	sub    edx,ebp
c00018bb:	83 e1 01             	and    ecx,0x1
c00018be:	8d 04 37             	lea    eax,[edi+esi*1]
c00018c1:	83 fa 0f             	cmp    edx,0xf
c00018c4:	77 0b                	ja     c00018d1 <dlrealloc+0x17a>
c00018c6:	09 f1                	or     ecx,esi
c00018c8:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018cf:	eb 59                	jmp    c000192a <dlrealloc+0x1d3>
c00018d1:	01 ef                	add    edi,ebp
c00018d3:	83 ec 0c             	sub    esp,0xc
c00018d6:	09 cd                	or     ebp,ecx
c00018d8:	83 ca 01             	or     edx,0x1
c00018db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00018de:	83 c7 08             	add    edi,0x8
c00018e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00018e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018e8:	57                   	push   edi
c00018e9:	e8 65 f4 ff ff       	call   c0000d53 <dlfree>
c00018ee:	83 c4 10             	add    esp,0x10
c00018f1:	eb 37                	jmp    c000192a <dlrealloc+0x1d3>
c00018f3:	8d 45 04             	lea    eax,[ebp+0x4]
c00018f6:	39 f0                	cmp    eax,esi
c00018f8:	76 30                	jbe    c000192a <dlrealloc+0x1d3>
c00018fa:	83 ec 0c             	sub    esp,0xc
c00018fd:	83 ed 07             	sub    ebp,0x7
c0001900:	55                   	push   ebp
c0001901:	e8 14 f9 ff ff       	call   c000121a <dlmalloc>
c0001906:	83 c4 10             	add    esp,0x10
c0001909:	89 c5                	mov    ebp,eax
c000190b:	85 c0                	test   eax,eax
c000190d:	74 19                	je     c0001928 <dlrealloc+0x1d1>
c000190f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001912:	89 c7                	mov    edi,eax
c0001914:	89 de                	mov    esi,ebx
c0001916:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001918:	83 ec 0c             	sub    esp,0xc
c000191b:	53                   	push   ebx
c000191c:	89 eb                	mov    ebx,ebp
c000191e:	e8 30 f4 ff ff       	call   c0000d53 <dlfree>
c0001923:	83 c4 10             	add    esp,0x10
c0001926:	eb 02                	jmp    c000192a <dlrealloc+0x1d3>
c0001928:	31 db                	xor    ebx,ebx
c000192a:	83 c4 1c             	add    esp,0x1c
c000192d:	89 d8                	mov    eax,ebx
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlmemalign>:
c0001934:	55                   	push   ebp
c0001935:	57                   	push   edi
c0001936:	56                   	push   esi
c0001937:	53                   	push   ebx
c0001938:	83 ec 0c             	sub    esp,0xc
c000193b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000193f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001943:	83 fa 08             	cmp    edx,0x8
c0001946:	77 10                	ja     c0001958 <dlmemalign+0x24>
c0001948:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000194c:	83 c4 0c             	add    esp,0xc
c000194f:	5b                   	pop    ebx
c0001950:	5e                   	pop    esi
c0001951:	5f                   	pop    edi
c0001952:	5d                   	pop    ebp
c0001953:	e9 c2 f8 ff ff       	jmp    c000121a <dlmalloc>
c0001958:	bf 10 00 00 00       	mov    edi,0x10
c000195d:	83 fa 0f             	cmp    edx,0xf
c0001960:	76 13                	jbe    c0001975 <dlmemalign+0x41>
c0001962:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001965:	85 d1                	test   ecx,edx
c0001967:	75 04                	jne    c000196d <dlmemalign+0x39>
c0001969:	89 d7                	mov    edi,edx
c000196b:	eb 08                	jmp    c0001975 <dlmemalign+0x41>
c000196d:	39 d7                	cmp    edi,edx
c000196f:	73 04                	jae    c0001975 <dlmemalign+0x41>
c0001971:	01 ff                	add    edi,edi
c0001973:	eb f8                	jmp    c000196d <dlmemalign+0x39>
c0001975:	83 f8 df             	cmp    eax,0xffffffdf
c0001978:	76 07                	jbe    c0001981 <dlmemalign+0x4d>
c000197a:	31 c0                	xor    eax,eax
c000197c:	e9 ce 00 00 00       	jmp    c0001a4f <dlmemalign+0x11b>
c0001981:	83 c0 0b             	add    eax,0xb
c0001984:	bd 10 00 00 00       	mov    ebp,0x10
c0001989:	83 f8 0f             	cmp    eax,0xf
c000198c:	76 05                	jbe    c0001993 <dlmemalign+0x5f>
c000198e:	83 e0 f8             	and    eax,0xfffffff8
c0001991:	89 c5                	mov    ebp,eax
c0001993:	83 ec 0c             	sub    esp,0xc
c0001996:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000199a:	50                   	push   eax
c000199b:	e8 7a f8 ff ff       	call   c000121a <dlmalloc>
c00019a0:	83 c4 10             	add    esp,0x10
c00019a3:	89 c1                	mov    ecx,eax
c00019a5:	85 c0                	test   eax,eax
c00019a7:	74 d1                	je     c000197a <dlmemalign+0x46>
c00019a9:	31 d2                	xor    edx,edx
c00019ab:	8d 70 f8             	lea    esi,[eax-0x8]
c00019ae:	f7 f7                	div    edi
c00019b0:	85 d2                	test   edx,edx
c00019b2:	74 62                	je     c0001a16 <dlmemalign+0xe2>
c00019b4:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019b8:	89 f8                	mov    eax,edi
c00019ba:	f7 d8                	neg    eax
c00019bc:	21 c3                	and    ebx,eax
c00019be:	83 eb 08             	sub    ebx,0x8
c00019c1:	89 d8                	mov    eax,ebx
c00019c3:	29 f0                	sub    eax,esi
c00019c5:	83 f8 0f             	cmp    eax,0xf
c00019c8:	77 02                	ja     c00019cc <dlmemalign+0x98>
c00019ca:	01 fb                	add    ebx,edi
c00019cc:	89 d8                	mov    eax,ebx
c00019ce:	29 f0                	sub    eax,esi
c00019d0:	89 c6                	mov    esi,eax
c00019d2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00019d5:	89 c2                	mov    edx,eax
c00019d7:	83 e2 fc             	and    edx,0xfffffffc
c00019da:	29 f2                	sub    edx,esi
c00019dc:	a8 02                	test   al,0x2
c00019de:	74 10                	je     c00019f0 <dlmemalign+0xbc>
c00019e0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00019e3:	83 ca 02             	or     edx,0x2
c00019e6:	8d 43 08             	lea    eax,[ebx+0x8]
c00019e9:	89 33                	mov    DWORD PTR [ebx],esi
c00019eb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00019ee:	eb 5f                	jmp    c0001a4f <dlmemalign+0x11b>
c00019f0:	83 ec 0c             	sub    esp,0xc
c00019f3:	89 d0                	mov    eax,edx
c00019f5:	83 c8 01             	or     eax,0x1
c00019f8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00019fb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a00:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a03:	83 e0 01             	and    eax,0x1
c0001a06:	09 f0                	or     eax,esi
c0001a08:	89 de                	mov    esi,ebx
c0001a0a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a0d:	51                   	push   ecx
c0001a0e:	e8 40 f3 ff ff       	call   c0000d53 <dlfree>
c0001a13:	83 c4 10             	add    esp,0x10
c0001a16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a19:	a8 02                	test   al,0x2
c0001a1b:	75 2f                	jne    c0001a4c <dlmemalign+0x118>
c0001a1d:	83 e0 fc             	and    eax,0xfffffffc
c0001a20:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a23:	39 c2                	cmp    edx,eax
c0001a25:	73 25                	jae    c0001a4c <dlmemalign+0x118>
c0001a27:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a2a:	83 ec 0c             	sub    esp,0xc
c0001a2d:	29 e8                	sub    eax,ebp
c0001a2f:	83 c2 08             	add    edx,0x8
c0001a32:	83 c8 01             	or     eax,0x1
c0001a35:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001a38:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a3b:	83 e0 01             	and    eax,0x1
c0001a3e:	09 c5                	or     ebp,eax
c0001a40:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a43:	52                   	push   edx
c0001a44:	e8 0a f3 ff ff       	call   c0000d53 <dlfree>
c0001a49:	83 c4 10             	add    esp,0x10
c0001a4c:	8d 46 08             	lea    eax,[esi+0x8]
c0001a4f:	83 c4 0c             	add    esp,0xc
c0001a52:	5b                   	pop    ebx
c0001a53:	5e                   	pop    esi
c0001a54:	5f                   	pop    edi
c0001a55:	5d                   	pop    ebp
c0001a56:	c3                   	ret    

c0001a57 <dlcalloc>:
c0001a57:	53                   	push   ebx
c0001a58:	83 ec 14             	sub    esp,0x14
c0001a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a5f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a64:	50                   	push   eax
c0001a65:	e8 b0 f7 ff ff       	call   c000121a <dlmalloc>
c0001a6a:	83 c4 10             	add    esp,0x10
c0001a6d:	89 c3                	mov    ebx,eax
c0001a6f:	85 c0                	test   eax,eax
c0001a71:	74 6e                	je     c0001ae1 <dlcalloc+0x8a>
c0001a73:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001a76:	a8 02                	test   al,0x2
c0001a78:	75 67                	jne    c0001ae1 <dlcalloc+0x8a>
c0001a7a:	83 e0 fc             	and    eax,0xfffffffc
c0001a7d:	83 e8 04             	sub    eax,0x4
c0001a80:	83 f8 27             	cmp    eax,0x27
c0001a83:	76 0f                	jbe    c0001a94 <dlcalloc+0x3d>
c0001a85:	52                   	push   edx
c0001a86:	50                   	push   eax
c0001a87:	6a 00                	push   0x0
c0001a89:	53                   	push   ebx
c0001a8a:	e8 61 ea ff ff       	call   c00004f0 <memset>
c0001a8f:	83 c4 10             	add    esp,0x10
c0001a92:	eb 4d                	jmp    c0001ae1 <dlcalloc+0x8a>
c0001a94:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a9a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001aa1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aa8:	83 f8 13             	cmp    eax,0x13
c0001aab:	76 34                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001aad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ab4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001abb:	83 f8 1b             	cmp    eax,0x1b
c0001abe:	76 21                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ac0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001ac7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001ace:	83 f8 23             	cmp    eax,0x23
c0001ad1:	76 0e                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ad3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001ada:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001ae1:	89 d8                	mov    eax,ebx
c0001ae3:	83 c4 08             	add    esp,0x8
c0001ae6:	5b                   	pop    ebx
c0001ae7:	c3                   	ret    

c0001ae8 <dlcfree>:
c0001ae8:	e9 66 f2 ff ff       	jmp    c0000d53 <dlfree>

c0001aed <dlindependent_calloc>:
c0001aed:	83 ec 28             	sub    esp,0x28
c0001af0:	b9 03 00 00 00       	mov    ecx,0x3
c0001af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001af9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001afd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b09:	e8 9a fa ff ff       	call   c00015a8 <iALLOc>
c0001b0e:	83 c4 2c             	add    esp,0x2c
c0001b11:	c3                   	ret    

c0001b12 <dlindependent_comalloc>:
c0001b12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b1a:	31 c9                	xor    ecx,ecx
c0001b1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b24:	e9 7f fa ff ff       	jmp    c00015a8 <iALLOc>

c0001b29 <dlvalloc>:
c0001b29:	83 ec 0c             	sub    esp,0xc
c0001b2c:	83 3d 00 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029100,0x0
c0001b33:	75 0a                	jne    c0001b3f <dlvalloc+0x16>
c0001b35:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001b3a:	e8 2d f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b3f:	50                   	push   eax
c0001b40:	50                   	push   eax
c0001b41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b45:	ff 35 5c 94 02 c0    	push   DWORD PTR ds:0xc002945c
c0001b4b:	e8 e4 fd ff ff       	call   c0001934 <dlmemalign>
c0001b50:	83 c4 1c             	add    esp,0x1c
c0001b53:	c3                   	ret    

c0001b54 <dlpvalloc>:
c0001b54:	83 ec 0c             	sub    esp,0xc
c0001b57:	83 3d 00 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029100,0x0
c0001b5e:	75 0a                	jne    c0001b6a <dlpvalloc+0x16>
c0001b60:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001b65:	e8 02 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b6a:	a1 5c 94 02 c0       	mov    eax,ds:0xc002945c
c0001b6f:	89 c1                	mov    ecx,eax
c0001b71:	52                   	push   edx
c0001b72:	f7 d9                	neg    ecx
c0001b74:	52                   	push   edx
c0001b75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b79:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b7d:	21 ca                	and    edx,ecx
c0001b7f:	52                   	push   edx
c0001b80:	50                   	push   eax
c0001b81:	e8 ae fd ff ff       	call   c0001934 <dlmemalign>
c0001b86:	83 c4 1c             	add    esp,0x1c
c0001b89:	c3                   	ret    

c0001b8a <dlmalloc_trim>:
c0001b8a:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001b8f:	e8 d8 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b94:	31 c0                	xor    eax,eax
c0001b96:	c3                   	ret    

c0001b97 <dlmalloc_usable_size>:
c0001b97:	53                   	push   ebx
c0001b98:	31 c0                	xor    eax,eax
c0001b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001b9e:	85 c9                	test   ecx,ecx
c0001ba0:	74 24                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001ba2:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ba5:	f6 c2 02             	test   dl,0x2
c0001ba8:	74 08                	je     c0001bb2 <dlmalloc_usable_size+0x1b>
c0001baa:	83 e2 fc             	and    edx,0xfffffffc
c0001bad:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bb0:	eb 14                	jmp    c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bb2:	89 d3                	mov    ebx,edx
c0001bb4:	31 c0                	xor    eax,eax
c0001bb6:	83 e3 fe             	and    ebx,0xfffffffe
c0001bb9:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bbe:	74 06                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bc0:	83 e2 fc             	and    edx,0xfffffffc
c0001bc3:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bc6:	5b                   	pop    ebx
c0001bc7:	c3                   	ret    

c0001bc8 <dlmallinfo>:
c0001bc8:	55                   	push   ebp
c0001bc9:	57                   	push   edi
c0001bca:	56                   	push   esi
c0001bcb:	53                   	push   ebx
c0001bcc:	83 ec 08             	sub    esp,0x8
c0001bcf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001bd3:	83 3d 2c 91 02 c0 00 	cmp    DWORD PTR ds:0xc002912c,0x0
c0001bda:	75 0a                	jne    c0001be6 <dlmallinfo+0x1e>
c0001bdc:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001be1:	e8 86 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001be6:	a1 2c 91 02 c0       	mov    eax,ds:0xc002912c
c0001beb:	31 ed                	xor    ebp,ebp
c0001bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001bf0:	31 c9                	xor    ecx,ecx
c0001bf2:	83 e0 fc             	and    eax,0xfffffffc
c0001bf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bf9:	31 c0                	xor    eax,eax
c0001bfb:	8b 14 85 04 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6efc]
c0001c02:	85 d2                	test   edx,edx
c0001c04:	74 0e                	je     c0001c14 <dlmallinfo+0x4c>
c0001c06:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c09:	45                   	inc    ebp
c0001c0a:	83 e6 fc             	and    esi,0xfffffffc
c0001c0d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c10:	01 f1                	add    ecx,esi
c0001c12:	eb ee                	jmp    c0001c02 <dlmallinfo+0x3a>
c0001c14:	40                   	inc    eax
c0001c15:	83 f8 0a             	cmp    eax,0xa
c0001c18:	75 e1                	jne    c0001bfb <dlmallinfo+0x33>
c0001c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c1e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c25:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c28:	b8 34 91 02 c0       	mov    eax,0xc0029134
c0001c2d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c30:	39 f0                	cmp    eax,esi
c0001c32:	74 10                	je     c0001c44 <dlmallinfo+0x7c>
c0001c34:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c37:	ff 04 24             	inc    DWORD PTR [esp]
c0001c3a:	83 e7 fc             	and    edi,0xfffffffc
c0001c3d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c40:	01 fa                	add    edx,edi
c0001c42:	eb ec                	jmp    c0001c30 <dlmallinfo+0x68>
c0001c44:	83 c0 08             	add    eax,0x8
c0001c47:	3d 2c 94 02 c0       	cmp    eax,0xc002942c
c0001c4c:	75 df                	jne    c0001c2d <dlmallinfo+0x65>
c0001c4e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c51:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c54:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c57:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0001c5c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c5f:	89 03                	mov    DWORD PTR [ebx],eax
c0001c61:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c64:	8b 35 50 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029450
c0001c6a:	29 d0                	sub    eax,edx
c0001c6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c6f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c72:	8b 35 64 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029464
c0001c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c7c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c7f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c82:	8b 35 74 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029474
c0001c88:	89 d8                	mov    eax,ebx
c0001c8a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001c8d:	83 c4 08             	add    esp,0x8
c0001c90:	5b                   	pop    ebx
c0001c91:	5e                   	pop    esi
c0001c92:	5f                   	pop    edi
c0001c93:	5d                   	pop    ebp
c0001c94:	c2 04 00             	ret    0x4

c0001c97 <dlmalloc_stats>:
c0001c97:	83 ec 30             	sub    esp,0x30
c0001c9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001c9e:	50                   	push   eax
c0001c9f:	e8 24 ff ff ff       	call   c0001bc8 <dlmallinfo>
c0001ca4:	83 c4 30             	add    esp,0x30
c0001ca7:	c3                   	ret    

c0001ca8 <dlmallopt>:
c0001ca8:	56                   	push   esi
c0001ca9:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001cae:	53                   	push   ebx
c0001caf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001cb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001cb7:	e8 b0 ef ff ff       	call   c0000c6c <malloc_consolidate>
c0001cbc:	8d 46 04             	lea    eax,[esi+0x4]
c0001cbf:	83 f8 05             	cmp    eax,0x5
c0001cc2:	77 5d                	ja     c0001d21 <dlmallopt+0x79>
c0001cc4:	ff 24 85 44 2f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd0bc]
c0001ccb:	83 fb 50             	cmp    ebx,0x50
c0001cce:	77 51                	ja     c0001d21 <dlmallopt+0x79>
c0001cd0:	ba 08 00 00 00       	mov    edx,0x8
c0001cd5:	85 db                	test   ebx,ebx
c0001cd7:	74 12                	je     c0001ceb <dlmallopt+0x43>
c0001cd9:	83 c3 0b             	add    ebx,0xb
c0001cdc:	ba 10 00 00 00       	mov    edx,0x10
c0001ce1:	83 fb 0f             	cmp    ebx,0xf
c0001ce4:	76 05                	jbe    c0001ceb <dlmallopt+0x43>
c0001ce6:	89 da                	mov    edx,ebx
c0001ce8:	83 e2 f8             	and    edx,0xfffffff8
c0001ceb:	a1 00 91 02 c0       	mov    eax,ds:0xc0029100
c0001cf0:	83 e0 03             	and    eax,0x3
c0001cf3:	09 d0                	or     eax,edx
c0001cf5:	a3 00 91 02 c0       	mov    ds:0xc0029100,eax
c0001cfa:	eb 27                	jmp    c0001d23 <dlmallopt+0x7b>
c0001cfc:	89 1d 44 94 02 c0    	mov    DWORD PTR ds:0xc0029444,ebx
c0001d02:	eb 16                	jmp    c0001d1a <dlmallopt+0x72>
c0001d04:	89 1d 48 94 02 c0    	mov    DWORD PTR ds:0xc0029448,ebx
c0001d0a:	eb 0e                	jmp    c0001d1a <dlmallopt+0x72>
c0001d0c:	89 1d 4c 94 02 c0    	mov    DWORD PTR ds:0xc002944c,ebx
c0001d12:	eb 06                	jmp    c0001d1a <dlmallopt+0x72>
c0001d14:	89 1d 54 94 02 c0    	mov    DWORD PTR ds:0xc0029454,ebx
c0001d1a:	be 01 00 00 00       	mov    esi,0x1
c0001d1f:	eb 02                	jmp    c0001d23 <dlmallopt+0x7b>
c0001d21:	31 f6                	xor    esi,esi
c0001d23:	89 f0                	mov    eax,esi
c0001d25:	5b                   	pop    ebx
c0001d26:	5e                   	pop    esi
c0001d27:	c3                   	ret    

c0001d28 <isblank>:
c0001d28:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d2d:	74 09                	je     c0001d38 <isblank+0x10>
c0001d2f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d34:	75 0a                	jne    c0001d40 <isblank+0x18>
c0001d36:	66 90                	xchg   ax,ax
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <iscntrl>:
c0001d48:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d4d:	7e 09                	jle    c0001d58 <iscntrl+0x10>
c0001d4f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d54:	75 0a                	jne    c0001d60 <iscntrl+0x18>
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <isdigit>:
c0001d68:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d6d:	7e 0d                	jle    c0001d7c <isdigit+0x14>
c0001d6f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d74:	7f 06                	jg     c0001d7c <isdigit+0x14>
c0001d76:	b8 01 00 00 00       	mov    eax,0x1
c0001d7b:	c3                   	ret    
c0001d7c:	b8 00 00 00 00       	mov    eax,0x0
c0001d81:	c3                   	ret    
c0001d82:	66 90                	xchg   ax,ax

c0001d84 <islower>:
c0001d84:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d89:	7e 0d                	jle    c0001d98 <islower+0x14>
c0001d8b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001d90:	7f 06                	jg     c0001d98 <islower+0x14>
c0001d92:	b8 01 00 00 00       	mov    eax,0x1
c0001d97:	c3                   	ret    
c0001d98:	b8 00 00 00 00       	mov    eax,0x0
c0001d9d:	c3                   	ret    
c0001d9e:	66 90                	xchg   ax,ax

c0001da0 <isspace>:
c0001da0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001da5:	7c 19                	jl     c0001dc0 <isspace+0x20>
c0001da7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001dac:	7e 0a                	jle    c0001db8 <isspace+0x18>
c0001dae:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001db3:	75 0b                	jne    c0001dc0 <isspace+0x20>
c0001db5:	8d 76 00             	lea    esi,[esi+0x0]
c0001db8:	b8 01 00 00 00       	mov    eax,0x1
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax
c0001dc0:	b8 00 00 00 00       	mov    eax,0x0
c0001dc5:	c3                   	ret    
c0001dc6:	66 90                	xchg   ax,ax

c0001dc8 <isupper>:
c0001dc8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dcd:	7e 0d                	jle    c0001ddc <isupper+0x14>
c0001dcf:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001dd4:	7f 06                	jg     c0001ddc <isupper+0x14>
c0001dd6:	b8 01 00 00 00       	mov    eax,0x1
c0001ddb:	c3                   	ret    
c0001ddc:	b8 00 00 00 00       	mov    eax,0x0
c0001de1:	c3                   	ret    
c0001de2:	66 90                	xchg   ax,ax

c0001de4 <isalpha>:
c0001de4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001de8:	e8 db ff ff ff       	call   c0001dc8 <isupper>
c0001ded:	83 c4 04             	add    esp,0x4
c0001df0:	85 c0                	test   eax,eax
c0001df2:	75 10                	jne    c0001e04 <isalpha+0x20>
c0001df4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df8:	e8 87 ff ff ff       	call   c0001d84 <islower>
c0001dfd:	83 c4 04             	add    esp,0x4
c0001e00:	85 c0                	test   eax,eax
c0001e02:	74 08                	je     c0001e0c <isalpha+0x28>
c0001e04:	b8 01 00 00 00       	mov    eax,0x1
c0001e09:	c3                   	ret    
c0001e0a:	66 90                	xchg   ax,ax
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalnum>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 c7 ff ff ff       	call   c0001de4 <isalpha>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalnum+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 3b ff ff ff       	call   c0001d68 <isdigit>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalnum+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <ispunct>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalnum>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 28                	jne    c0001e7c <ispunct+0x38>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 43 ff ff ff       	call   c0001da0 <isspace>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	75 18                	jne    c0001e7c <ispunct+0x38>
c0001e64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e68:	e8 db fe ff ff       	call   c0001d48 <iscntrl>
c0001e6d:	83 c4 04             	add    esp,0x4
c0001e70:	85 c0                	test   eax,eax
c0001e72:	75 08                	jne    c0001e7c <ispunct+0x38>
c0001e74:	b8 01 00 00 00       	mov    eax,0x1
c0001e79:	c3                   	ret    
c0001e7a:	66 90                	xchg   ax,ax
c0001e7c:	b8 00 00 00 00       	mov    eax,0x0
c0001e81:	c3                   	ret    
c0001e82:	66 90                	xchg   ax,ax

c0001e84 <isgraph>:
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 87 ff ff ff       	call   c0001e14 <isalnum>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 10                	jne    c0001ea4 <isgraph+0x20>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 a7 ff ff ff       	call   c0001e44 <ispunct>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	74 08                	je     c0001eac <isgraph+0x28>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isprint>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 c7 ff ff ff       	call   c0001e84 <isgraph>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 08                	jne    c0001ecc <isprint+0x18>
c0001ec4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ec9:	75 09                	jne    c0001ed4 <isprint+0x20>
c0001ecb:	90                   	nop
c0001ecc:	b8 01 00 00 00       	mov    eax,0x1
c0001ed1:	c3                   	ret    
c0001ed2:	66 90                	xchg   ax,ax
c0001ed4:	b8 00 00 00 00       	mov    eax,0x0
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax

c0001edc <isxdigit>:
c0001edc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee0:	e8 83 fe ff ff       	call   c0001d68 <isdigit>
c0001ee5:	83 c4 04             	add    esp,0x4
c0001ee8:	85 c0                	test   eax,eax
c0001eea:	75 20                	jne    c0001f0c <isxdigit+0x30>
c0001eec:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ef1:	7e 09                	jle    c0001efc <isxdigit+0x20>
c0001ef3:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ef8:	7e 12                	jle    c0001f0c <isxdigit+0x30>
c0001efa:	66 90                	xchg   ax,ax
c0001efc:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f01:	7e 11                	jle    c0001f14 <isxdigit+0x38>
c0001f03:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f08:	7f 0a                	jg     c0001f14 <isxdigit+0x38>
c0001f0a:	66 90                	xchg   ax,ax
c0001f0c:	b8 01 00 00 00       	mov    eax,0x1
c0001f11:	c3                   	ret    
c0001f12:	66 90                	xchg   ax,ax
c0001f14:	b8 00 00 00 00       	mov    eax,0x0
c0001f19:	c3                   	ret    
c0001f1a:	66 90                	xchg   ax,ax

c0001f1c <LWIP_PLATFORM_HTONS>:
c0001f1c:	83 ec 04             	sub    esp,0x4
c0001f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f2b:	c1 e8 08             	shr    eax,0x8
c0001f2e:	89 c2                	mov    edx,eax
c0001f30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f34:	c1 e0 08             	shl    eax,0x8
c0001f37:	09 d0                	or     eax,edx
c0001f39:	83 c4 04             	add    esp,0x4
c0001f3c:	c3                   	ret    
c0001f3d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f40 <LWIP_PLATFORM_HTONL>:
c0001f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f44:	c1 e8 18             	shr    eax,0x18
c0001f47:	89 c2                	mov    edx,eax
c0001f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f4d:	c1 e8 08             	shr    eax,0x8
c0001f50:	25 00 ff 00 00       	and    eax,0xff00
c0001f55:	09 c2                	or     edx,eax
c0001f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f5b:	c1 e0 08             	shl    eax,0x8
c0001f5e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f63:	09 c2                	or     edx,eax
c0001f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f69:	c1 e0 18             	shl    eax,0x18
c0001f6c:	09 d0                	or     eax,edx
c0001f6e:	c3                   	ret    

c0001f6f <disk_status>:
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <disk_initialize>:
c0001f72:	31 c0                	xor    eax,eax
c0001f74:	c3                   	ret    

c0001f75 <disk_read>:
c0001f75:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f7a:	0f b6 04 85 60 fc 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd03a0]
c0001f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f86:	e9 f9 aa 01 00       	jmp    c001ca84 <fatWrapperReadDisk>

c0001f8b <disk_write>:
c0001f8b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f90:	0f b6 04 85 60 fc 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd03a0]
c0001f98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f9c:	e9 23 ab 01 00       	jmp    c001cac4 <fatWrapperWriteDisk>

c0001fa1 <disk_ioctl>:
c0001fa1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001faa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faf:	0f b6 04 85 60 fc 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd03a0]
c0001fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fbb:	e9 44 ab 01 00       	jmp    c001cb04 <fatWrapperIoctl>

c0001fc0 <ld_word>:
c0001fc0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fc4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fc7:	c1 e2 08             	shl    edx,0x8
c0001fca:	09 d0                	or     eax,edx
c0001fcc:	c3                   	ret    

c0001fcd <ld_dword>:
c0001fcd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001fd1:	89 d1                	mov    ecx,edx
c0001fd3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fd7:	c1 e1 08             	shl    ecx,0x8
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	09 ca                	or     edx,ecx
c0001fdf:	c1 e2 08             	shl    edx,0x8
c0001fe2:	09 d0                	or     eax,edx
c0001fe4:	c3                   	ret    

c0001fe5 <st_word>:
c0001fe5:	66 89 10             	mov    WORD PTR [eax],dx
c0001fe8:	c3                   	ret    

c0001fe9 <st_dword>:
c0001fe9:	89 10                	mov    DWORD PTR [eax],edx
c0001feb:	c3                   	ret    

c0001fec <mem_cpy>:
c0001fec:	85 c9                	test   ecx,ecx
c0001fee:	74 10                	je     c0002000 <mem_cpy+0x14>
c0001ff0:	57                   	push   edi
c0001ff1:	01 c1                	add    ecx,eax
c0001ff3:	56                   	push   esi
c0001ff4:	89 c7                	mov    edi,eax
c0001ff6:	89 d6                	mov    esi,edx
c0001ff8:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ff9:	39 f9                	cmp    ecx,edi
c0001ffb:	75 fb                	jne    c0001ff8 <mem_cpy+0xc>
c0001ffd:	5e                   	pop    esi
c0001ffe:	5f                   	pop    edi
c0001fff:	c3                   	ret    
c0002000:	c3                   	ret    

c0002001 <mem_set>:
c0002001:	01 c1                	add    ecx,eax
c0002003:	40                   	inc    eax
c0002004:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0002007:	39 c8                	cmp    eax,ecx
c0002009:	75 f8                	jne    c0002003 <mem_set+0x2>
c000200b:	c3                   	ret    

c000200c <mem_cmp>:
c000200c:	57                   	push   edi
c000200d:	56                   	push   esi
c000200e:	89 c6                	mov    esi,eax
c0002010:	53                   	push   ebx
c0002011:	46                   	inc    esi
c0002012:	42                   	inc    edx
c0002013:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0002017:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000201b:	29 fb                	sub    ebx,edi
c000201d:	89 cf                	mov    edi,ecx
c000201f:	29 f7                	sub    edi,esi
c0002021:	01 c7                	add    edi,eax
c0002023:	74 04                	je     c0002029 <mem_cmp+0x1d>
c0002025:	85 db                	test   ebx,ebx
c0002027:	74 e8                	je     c0002011 <mem_cmp+0x5>
c0002029:	89 d8                	mov    eax,ebx
c000202b:	5b                   	pop    ebx
c000202c:	5e                   	pop    esi
c000202d:	5f                   	pop    edi
c000202e:	c3                   	ret    

c000202f <chk_chr>:
c000202f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002032:	85 c9                	test   ecx,ecx
c0002034:	74 07                	je     c000203d <chk_chr+0xe>
c0002036:	39 d1                	cmp    ecx,edx
c0002038:	74 03                	je     c000203d <chk_chr+0xe>
c000203a:	40                   	inc    eax
c000203b:	eb f2                	jmp    c000202f <chk_chr>
c000203d:	89 c8                	mov    eax,ecx
c000203f:	c3                   	ret    

c0002040 <dbc_1st>:
c0002040:	31 c0                	xor    eax,eax
c0002042:	c3                   	ret    

c0002043 <dbc_2nd>:
c0002043:	31 c0                	xor    eax,eax
c0002045:	c3                   	ret    

c0002046 <tchar2uni>:
c0002046:	57                   	push   edi
c0002047:	56                   	push   esi
c0002048:	53                   	push   ebx
c0002049:	8b 18                	mov    ebx,DWORD PTR [eax]
c000204b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000204d:	8d 73 01             	lea    esi,[ebx+0x1]
c0002050:	f6 c1 80             	test   cl,0x80
c0002053:	75 0a                	jne    c000205f <tchar2uni+0x19>
c0002055:	0f b6 d1             	movzx  edx,cl
c0002058:	89 f3                	mov    ebx,esi
c000205a:	e9 b2 00 00 00       	jmp    c0002111 <tchar2uni+0xcb>
c000205f:	89 ca                	mov    edx,ecx
c0002061:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002067:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000206d:	89 ca                	mov    edx,ecx
c000206f:	75 0a                	jne    c000207b <tchar2uni+0x35>
c0002071:	83 e2 1f             	and    edx,0x1f
c0002074:	b9 01 00 00 00       	mov    ecx,0x1
c0002079:	eb 37                	jmp    c00020b2 <tchar2uni+0x6c>
c000207b:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002081:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002087:	75 0c                	jne    c0002095 <tchar2uni+0x4f>
c0002089:	89 ca                	mov    edx,ecx
c000208b:	b9 02 00 00 00       	mov    ecx,0x2
c0002090:	83 e2 0f             	and    edx,0xf
c0002093:	eb 1d                	jmp    c00020b2 <tchar2uni+0x6c>
c0002095:	89 cf                	mov    edi,ecx
c0002097:	83 ca ff             	or     edx,0xffffffff
c000209a:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020a0:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020a6:	75 70                	jne    c0002118 <tchar2uni+0xd2>
c00020a8:	89 ca                	mov    edx,ecx
c00020aa:	b9 03 00 00 00       	mov    ecx,0x3
c00020af:	83 e2 07             	and    edx,0x7
c00020b2:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020b6:	46                   	inc    esi
c00020b7:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020ba:	89 cf                	mov    edi,ecx
c00020bc:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020c2:	83 c7 80             	add    edi,0xffffff80
c00020c5:	75 4e                	jne    c0002115 <tchar2uni+0xcf>
c00020c7:	c1 e2 06             	shl    edx,0x6
c00020ca:	83 e1 3f             	and    ecx,0x3f
c00020cd:	09 ca                	or     edx,ecx
c00020cf:	39 de                	cmp    esi,ebx
c00020d1:	75 e3                	jne    c00020b6 <tchar2uni+0x70>
c00020d3:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020d6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020dc:	77 37                	ja     c0002115 <tchar2uni+0xcf>
c00020de:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020e4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020ea:	76 29                	jbe    c0002115 <tchar2uni+0xcf>
c00020ec:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020f2:	76 1d                	jbe    c0002111 <tchar2uni+0xcb>
c00020f4:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c00020fa:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002100:	c1 e1 06             	shl    ecx,0x6
c0002103:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002109:	09 ca                	or     edx,ecx
c000210b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002111:	89 18                	mov    DWORD PTR [eax],ebx
c0002113:	eb 03                	jmp    c0002118 <tchar2uni+0xd2>
c0002115:	83 ca ff             	or     edx,0xffffffff
c0002118:	5b                   	pop    ebx
c0002119:	89 d0                	mov    eax,edx
c000211b:	5e                   	pop    esi
c000211c:	5f                   	pop    edi
c000211d:	c3                   	ret    

c000211e <put_utf>:
c000211e:	53                   	push   ebx
c000211f:	83 f8 7f             	cmp    eax,0x7f
c0002122:	89 c3                	mov    ebx,eax
c0002124:	b0 00                	mov    al,0x0
c0002126:	77 11                	ja     c0002139 <put_utf+0x1b>
c0002128:	85 c9                	test   ecx,ecx
c000212a:	0f 84 e5 00 00 00    	je     c0002215 <put_utf+0xf7>
c0002130:	88 1a                	mov    BYTE PTR [edx],bl
c0002132:	b0 01                	mov    al,0x1
c0002134:	e9 dc 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002139:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000213f:	77 23                	ja     c0002164 <put_utf+0x46>
c0002141:	83 f9 01             	cmp    ecx,0x1
c0002144:	0f 86 cb 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c000214a:	89 d8                	mov    eax,ebx
c000214c:	83 e3 3f             	and    ebx,0x3f
c000214f:	c1 e8 06             	shr    eax,0x6
c0002152:	83 cb 80             	or     ebx,0xffffff80
c0002155:	83 c8 c0             	or     eax,0xffffffc0
c0002158:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000215b:	88 02                	mov    BYTE PTR [edx],al
c000215d:	b0 02                	mov    al,0x2
c000215f:	e9 b1 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002164:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c000216a:	77 40                	ja     c00021ac <put_utf+0x8e>
c000216c:	83 f9 02             	cmp    ecx,0x2
c000216f:	0f 86 a0 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002175:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000217b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002181:	0f 86 8e 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002187:	89 d8                	mov    eax,ebx
c0002189:	c1 e8 0c             	shr    eax,0xc
c000218c:	83 c8 e0             	or     eax,0xffffffe0
c000218f:	88 02                	mov    BYTE PTR [edx],al
c0002191:	89 d8                	mov    eax,ebx
c0002193:	83 e3 3f             	and    ebx,0x3f
c0002196:	c1 e8 06             	shr    eax,0x6
c0002199:	83 cb 80             	or     ebx,0xffffff80
c000219c:	83 e0 3f             	and    eax,0x3f
c000219f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021a2:	83 c8 80             	or     eax,0xffffff80
c00021a5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021a8:	b0 03                	mov    al,0x3
c00021aa:	eb 69                	jmp    c0002215 <put_utf+0xf7>
c00021ac:	83 f9 03             	cmp    ecx,0x3
c00021af:	76 64                	jbe    c0002215 <put_utf+0xf7>
c00021b1:	89 d9                	mov    ecx,ebx
c00021b3:	0f b7 c3             	movzx  eax,bx
c00021b6:	66 31 c9             	xor    cx,cx
c00021b9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021bf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021c5:	c1 e9 06             	shr    ecx,0x6
c00021c8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00021ce:	77 43                	ja     c0002213 <put_utf+0xf5>
c00021d0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021d6:	77 3b                	ja     c0002213 <put_utf+0xf5>
c00021d8:	09 cb                	or     ebx,ecx
c00021da:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021e0:	89 d8                	mov    eax,ebx
c00021e2:	c1 e8 12             	shr    eax,0x12
c00021e5:	83 c8 f0             	or     eax,0xfffffff0
c00021e8:	88 02                	mov    BYTE PTR [edx],al
c00021ea:	89 d8                	mov    eax,ebx
c00021ec:	c1 e8 0c             	shr    eax,0xc
c00021ef:	83 e0 3f             	and    eax,0x3f
c00021f2:	83 c8 80             	or     eax,0xffffff80
c00021f5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021f8:	89 d8                	mov    eax,ebx
c00021fa:	83 e3 3f             	and    ebx,0x3f
c00021fd:	c1 e8 06             	shr    eax,0x6
c0002200:	83 cb 80             	or     ebx,0xffffff80
c0002203:	83 e0 3f             	and    eax,0x3f
c0002206:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002209:	83 c8 80             	or     eax,0xffffff80
c000220c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000220f:	b0 04                	mov    al,0x4
c0002211:	eb 02                	jmp    c0002215 <put_utf+0xf7>
c0002213:	31 c0                	xor    eax,eax
c0002215:	5b                   	pop    ebx
c0002216:	c3                   	ret    

c0002217 <clst2sect>:
c0002217:	8d 4a fe             	lea    ecx,[edx-0x2]
c000221a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000221d:	83 ea 02             	sub    edx,0x2
c0002220:	39 ca                	cmp    edx,ecx
c0002222:	76 0d                	jbe    c0002231 <clst2sect+0x1a>
c0002224:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002228:	0f af d1             	imul   edx,ecx
c000222b:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000222e:	89 d0                	mov    eax,edx
c0002230:	c3                   	ret    
c0002231:	31 c0                	xor    eax,eax
c0002233:	c3                   	ret    

c0002234 <pick_lfn>:
c0002234:	55                   	push   ebp
c0002235:	57                   	push   edi
c0002236:	89 c7                	mov    edi,eax
c0002238:	56                   	push   esi
c0002239:	8d 42 1a             	lea    eax,[edx+0x1a]
c000223c:	53                   	push   ebx
c000223d:	89 d3                	mov    ebx,edx
c000223f:	e8 7c fd ff ff       	call   c0001fc0 <ld_word>
c0002244:	66 85 c0             	test   ax,ax
c0002247:	74 04                	je     c000224d <pick_lfn+0x19>
c0002249:	31 c0                	xor    eax,eax
c000224b:	eb 62                	jmp    c00022af <pick_lfn+0x7b>
c000224d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002250:	bd 01 00 00 00       	mov    ebp,0x1
c0002255:	83 e1 bf             	and    ecx,0xffffffbf
c0002258:	31 f6                	xor    esi,esi
c000225a:	49                   	dec    ecx
c000225b:	6b c9 0d             	imul   ecx,ecx,0xd
c000225e:	0f b6 86 a0 30 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdcf60]
c0002265:	01 d8                	add    eax,ebx
c0002267:	e8 54 fd ff ff       	call   c0001fc0 <ld_word>
c000226c:	66 85 ed             	test   bp,bp
c000226f:	74 11                	je     c0002282 <pick_lfn+0x4e>
c0002271:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002277:	77 d0                	ja     c0002249 <pick_lfn+0x15>
c0002279:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000227d:	89 c5                	mov    ebp,eax
c000227f:	41                   	inc    ecx
c0002280:	eb 0a                	jmp    c000228c <pick_lfn+0x58>
c0002282:	0f b7 c0             	movzx  eax,ax
c0002285:	3d ff ff 00 00       	cmp    eax,0xffff
c000228a:	75 bd                	jne    c0002249 <pick_lfn+0x15>
c000228c:	46                   	inc    esi
c000228d:	83 fe 0d             	cmp    esi,0xd
c0002290:	75 cc                	jne    c000225e <pick_lfn+0x2a>
c0002292:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002295:	74 13                	je     c00022aa <pick_lfn+0x76>
c0002297:	66 85 ed             	test   bp,bp
c000229a:	74 0e                	je     c00022aa <pick_lfn+0x76>
c000229c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a2:	77 a5                	ja     c0002249 <pick_lfn+0x15>
c00022a4:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022aa:	b8 01 00 00 00       	mov    eax,0x1
c00022af:	5b                   	pop    ebx
c00022b0:	5e                   	pop    esi
c00022b1:	5f                   	pop    edi
c00022b2:	5d                   	pop    ebp
c00022b3:	c3                   	ret    

c00022b4 <put_lfn>:
c00022b4:	55                   	push   ebp
c00022b5:	57                   	push   edi
c00022b6:	89 d7                	mov    edi,edx
c00022b8:	56                   	push   esi
c00022b9:	31 f6                	xor    esi,esi
c00022bb:	53                   	push   ebx
c00022bc:	83 ec 0c             	sub    esp,0xc
c00022bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022c3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00022c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00022cb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022d1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00022d4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022d7:	31 d2                	xor    edx,edx
c00022d9:	e8 07 fd ff ff       	call   c0001fe5 <st_word>
c00022de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022e5:	0f b6 d9             	movzx  ebx,cl
c00022e8:	4b                   	dec    ebx
c00022e9:	6b db 0d             	imul   ebx,ebx,0xd
c00022ec:	0f b7 c6             	movzx  eax,si
c00022ef:	3d ff ff 00 00       	cmp    eax,0xffff
c00022f4:	74 09                	je     c00022ff <put_lfn+0x4b>
c00022f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022fa:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00022fe:	43                   	inc    ebx
c00022ff:	0f b7 ee             	movzx  ebp,si
c0002302:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002305:	89 ea                	mov    edx,ebp
c0002307:	0f b6 80 a0 30 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdcf60]
c000230e:	01 f8                	add    eax,edi
c0002310:	e8 d0 fc ff ff       	call   c0001fe5 <st_word>
c0002315:	85 ed                	test   ebp,ebp
c0002317:	75 05                	jne    c000231e <put_lfn+0x6a>
c0002319:	be ff ff 00 00       	mov    esi,0xffff
c000231e:	ff 04 24             	inc    DWORD PTR [esp]
c0002321:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002325:	75 c5                	jne    c00022ec <put_lfn+0x38>
c0002327:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000232d:	74 0b                	je     c000233a <put_lfn+0x86>
c000232f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002333:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002338:	75 07                	jne    c0002341 <put_lfn+0x8d>
c000233a:	83 c9 40             	or     ecx,0x40
c000233d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002341:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002345:	88 07                	mov    BYTE PTR [edi],al
c0002347:	83 c4 0c             	add    esp,0xc
c000234a:	5b                   	pop    ebx
c000234b:	5e                   	pop    esi
c000234c:	5f                   	pop    edi
c000234d:	5d                   	pop    ebp
c000234e:	c3                   	ret    

c000234f <gen_numname>:
c000234f:	57                   	push   edi
c0002350:	89 cf                	mov    edi,ecx
c0002352:	56                   	push   esi
c0002353:	b9 0b 00 00 00       	mov    ecx,0xb
c0002358:	53                   	push   ebx
c0002359:	89 c6                	mov    esi,eax
c000235b:	83 ec 10             	sub    esp,0x10
c000235e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002362:	e8 85 fc ff ff       	call   c0001fec <mem_cpy>
c0002367:	83 fb 05             	cmp    ebx,0x5
c000236a:	76 30                	jbe    c000239c <gen_numname+0x4d>
c000236c:	66 8b 07             	mov    ax,WORD PTR [edi]
c000236f:	66 85 c0             	test   ax,ax
c0002372:	74 28                	je     c000239c <gen_numname+0x4d>
c0002374:	83 c7 02             	add    edi,0x2
c0002377:	ba 10 00 00 00       	mov    edx,0x10
c000237c:	01 db                	add    ebx,ebx
c000237e:	89 c1                	mov    ecx,eax
c0002380:	c1 e0 10             	shl    eax,0x10
c0002383:	83 e1 01             	and    ecx,0x1
c0002386:	c1 e8 11             	shr    eax,0x11
c0002389:	01 cb                	add    ebx,ecx
c000238b:	0f ba e3 10          	bt     ebx,0x10
c000238f:	73 06                	jae    c0002397 <gen_numname+0x48>
c0002391:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002397:	4a                   	dec    edx
c0002398:	75 e2                	jne    c000237c <gen_numname+0x2d>
c000239a:	eb d0                	jmp    c000236c <gen_numname+0x1d>
c000239c:	b8 07 00 00 00       	mov    eax,0x7
c00023a1:	89 d9                	mov    ecx,ebx
c00023a3:	83 e1 0f             	and    ecx,0xf
c00023a6:	8d 79 30             	lea    edi,[ecx+0x30]
c00023a9:	89 fa                	mov    edx,edi
c00023ab:	83 ff 39             	cmp    edi,0x39
c00023ae:	76 03                	jbe    c00023b3 <gen_numname+0x64>
c00023b0:	8d 51 37             	lea    edx,[ecx+0x37]
c00023b3:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023b6:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023ba:	89 da                	mov    edx,ebx
c00023bc:	c1 ea 04             	shr    edx,0x4
c00023bf:	83 fb 0f             	cmp    ebx,0xf
c00023c2:	76 06                	jbe    c00023ca <gen_numname+0x7b>
c00023c4:	89 c8                	mov    eax,ecx
c00023c6:	89 d3                	mov    ebx,edx
c00023c8:	eb d7                	jmp    c00023a1 <gen_numname+0x52>
c00023ca:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023cf:	31 d2                	xor    edx,edx
c00023d1:	8d 58 fe             	lea    ebx,[eax-0x2]
c00023d4:	8d 04 16             	lea    eax,[esi+edx*1]
c00023d7:	39 ca                	cmp    edx,ecx
c00023d9:	73 19                	jae    c00023f4 <gen_numname+0xa5>
c00023db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023de:	83 f8 20             	cmp    eax,0x20
c00023e1:	74 11                	je     c00023f4 <gen_numname+0xa5>
c00023e3:	e8 58 fc ff ff       	call   c0002040 <dbc_1st>
c00023e8:	85 c0                	test   eax,eax
c00023ea:	74 05                	je     c00023f1 <gen_numname+0xa2>
c00023ec:	39 d3                	cmp    ebx,edx
c00023ee:	74 04                	je     c00023f4 <gen_numname+0xa5>
c00023f0:	42                   	inc    edx
c00023f1:	42                   	inc    edx
c00023f2:	eb e0                	jmp    c00023d4 <gen_numname+0x85>
c00023f4:	b0 20                	mov    al,0x20
c00023f6:	83 f9 07             	cmp    ecx,0x7
c00023f9:	77 05                	ja     c0002400 <gen_numname+0xb1>
c00023fb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00023ff:	41                   	inc    ecx
c0002400:	42                   	inc    edx
c0002401:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002405:	83 fa 07             	cmp    edx,0x7
c0002408:	76 ea                	jbe    c00023f4 <gen_numname+0xa5>
c000240a:	83 c4 10             	add    esp,0x10
c000240d:	5b                   	pop    ebx
c000240e:	5e                   	pop    esi
c000240f:	5f                   	pop    edi
c0002410:	c3                   	ret    

c0002411 <sum_sfn>:
c0002411:	53                   	push   ebx
c0002412:	31 c9                	xor    ecx,ecx
c0002414:	31 db                	xor    ebx,ebx
c0002416:	0f b6 d1             	movzx  edx,cl
c0002419:	c1 e1 07             	shl    ecx,0x7
c000241c:	d1 ea                	shr    edx,1
c000241e:	09 ca                	or     edx,ecx
c0002420:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002423:	43                   	inc    ebx
c0002424:	01 ca                	add    edx,ecx
c0002426:	83 fb 0b             	cmp    ebx,0xb
c0002429:	88 d1                	mov    cl,dl
c000242b:	75 e9                	jne    c0002416 <sum_sfn+0x5>
c000242d:	88 d0                	mov    al,dl
c000242f:	5b                   	pop    ebx
c0002430:	c3                   	ret    

c0002431 <get_ldnumber>:
c0002431:	8b 10                	mov    edx,DWORD PTR [eax]
c0002433:	85 d2                	test   edx,edx
c0002435:	74 14                	je     c000244b <get_ldnumber+0x1a>
c0002437:	56                   	push   esi
c0002438:	53                   	push   ebx
c0002439:	89 d3                	mov    ebx,edx
c000243b:	43                   	inc    ebx
c000243c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000243f:	80 f9 1f             	cmp    cl,0x1f
c0002442:	76 0d                	jbe    c0002451 <get_ldnumber+0x20>
c0002444:	80 f9 3a             	cmp    cl,0x3a
c0002447:	75 f2                	jne    c000243b <get_ldnumber+0xa>
c0002449:	eb 0a                	jmp    c0002455 <get_ldnumber+0x24>
c000244b:	83 c9 ff             	or     ecx,0xffffffff
c000244e:	89 c8                	mov    eax,ecx
c0002450:	c3                   	ret    
c0002451:	31 c9                	xor    ecx,ecx
c0002453:	eb 24                	jmp    c0002479 <get_ldnumber+0x48>
c0002455:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002458:	8d 4e d0             	lea    ecx,[esi-0x30]
c000245b:	80 f9 09             	cmp    cl,0x9
c000245e:	77 16                	ja     c0002476 <get_ldnumber+0x45>
c0002460:	83 c2 02             	add    edx,0x2
c0002463:	83 c9 ff             	or     ecx,0xffffffff
c0002466:	39 d3                	cmp    ebx,edx
c0002468:	75 0f                	jne    c0002479 <get_ldnumber+0x48>
c000246a:	89 f2                	mov    edx,esi
c000246c:	89 18                	mov    DWORD PTR [eax],ebx
c000246e:	0f be ca             	movsx  ecx,dl
c0002471:	83 e9 30             	sub    ecx,0x30
c0002474:	eb 03                	jmp    c0002479 <get_ldnumber+0x48>
c0002476:	83 c9 ff             	or     ecx,0xffffffff
c0002479:	89 c8                	mov    eax,ecx
c000247b:	5b                   	pop    ebx
c000247c:	5e                   	pop    esi
c000247d:	c3                   	ret    

c000247e <validate>:
c000247e:	56                   	push   esi
c000247f:	53                   	push   ebx
c0002480:	89 d6                	mov    esi,edx
c0002482:	51                   	push   ecx
c0002483:	85 c0                	test   eax,eax
c0002485:	75 09                	jne    c0002490 <validate+0x12>
c0002487:	b8 09 00 00 00       	mov    eax,0x9
c000248c:	31 c9                	xor    ecx,ecx
c000248e:	eb 2e                	jmp    c00024be <validate+0x40>
c0002490:	89 c3                	mov    ebx,eax
c0002492:	8b 00                	mov    eax,DWORD PTR [eax]
c0002494:	85 c0                	test   eax,eax
c0002496:	74 ef                	je     c0002487 <validate+0x9>
c0002498:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000249b:	74 ea                	je     c0002487 <validate+0x9>
c000249d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024a0:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024a4:	75 e1                	jne    c0002487 <validate+0x9>
c00024a6:	83 ec 0c             	sub    esp,0xc
c00024a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024ad:	50                   	push   eax
c00024ae:	e8 bc fa ff ff       	call   c0001f6f <disk_status>
c00024b3:	83 c4 10             	add    esp,0x10
c00024b6:	a8 01                	test   al,0x1
c00024b8:	75 cd                	jne    c0002487 <validate+0x9>
c00024ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024bc:	31 c0                	xor    eax,eax
c00024be:	89 0e                	mov    DWORD PTR [esi],ecx
c00024c0:	5a                   	pop    edx
c00024c1:	5b                   	pop    ebx
c00024c2:	5e                   	pop    esi
c00024c3:	c3                   	ret    

c00024c4 <sync_window>:
c00024c4:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024c8:	74 58                	je     c0002522 <sync_window+0x5e>
c00024ca:	56                   	push   esi
c00024cb:	53                   	push   ebx
c00024cc:	8d 70 34             	lea    esi,[eax+0x34]
c00024cf:	51                   	push   ecx
c00024d0:	89 c3                	mov    ebx,eax
c00024d2:	6a 01                	push   0x1
c00024d4:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024d7:	56                   	push   esi
c00024d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024dc:	50                   	push   eax
c00024dd:	e8 a9 fa ff ff       	call   c0001f8b <disk_write>
c00024e2:	83 c4 10             	add    esp,0x10
c00024e5:	ba 01 00 00 00       	mov    edx,0x1
c00024ea:	85 c0                	test   eax,eax
c00024ec:	75 2e                	jne    c000251c <sync_window+0x58>
c00024ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024f1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024f4:	89 c1                	mov    ecx,eax
c00024f6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024fa:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00024fd:	39 d1                	cmp    ecx,edx
c00024ff:	73 19                	jae    c000251a <sync_window+0x56>
c0002501:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002505:	75 13                	jne    c000251a <sync_window+0x56>
c0002507:	6a 01                	push   0x1
c0002509:	01 d0                	add    eax,edx
c000250b:	50                   	push   eax
c000250c:	56                   	push   esi
c000250d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002511:	50                   	push   eax
c0002512:	e8 74 fa ff ff       	call   c0001f8b <disk_write>
c0002517:	83 c4 10             	add    esp,0x10
c000251a:	31 d2                	xor    edx,edx
c000251c:	89 d0                	mov    eax,edx
c000251e:	5a                   	pop    edx
c000251f:	5b                   	pop    ebx
c0002520:	5e                   	pop    esi
c0002521:	c3                   	ret    
c0002522:	31 d2                	xor    edx,edx
c0002524:	89 d0                	mov    eax,edx
c0002526:	c3                   	ret    

c0002527 <move_window>:
c0002527:	57                   	push   edi
c0002528:	56                   	push   esi
c0002529:	31 f6                	xor    esi,esi
c000252b:	53                   	push   ebx
c000252c:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000252f:	74 32                	je     c0002563 <move_window+0x3c>
c0002531:	89 c3                	mov    ebx,eax
c0002533:	89 d7                	mov    edi,edx
c0002535:	e8 8a ff ff ff       	call   c00024c4 <sync_window>
c000253a:	89 c6                	mov    esi,eax
c000253c:	85 c0                	test   eax,eax
c000253e:	75 23                	jne    c0002563 <move_window+0x3c>
c0002540:	6a 01                	push   0x1
c0002542:	8d 43 34             	lea    eax,[ebx+0x34]
c0002545:	57                   	push   edi
c0002546:	50                   	push   eax
c0002547:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000254b:	50                   	push   eax
c000254c:	e8 24 fa ff ff       	call   c0001f75 <disk_read>
c0002551:	83 c4 10             	add    esp,0x10
c0002554:	85 c0                	test   eax,eax
c0002556:	74 08                	je     c0002560 <move_window+0x39>
c0002558:	be 01 00 00 00       	mov    esi,0x1
c000255d:	83 cf ff             	or     edi,0xffffffff
c0002560:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002563:	89 f0                	mov    eax,esi
c0002565:	5b                   	pop    ebx
c0002566:	5e                   	pop    esi
c0002567:	5f                   	pop    edi
c0002568:	c3                   	ret    

c0002569 <check_fs>:
c0002569:	53                   	push   ebx
c000256a:	89 c3                	mov    ebx,eax
c000256c:	83 ec 08             	sub    esp,0x8
c000256f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002573:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000257a:	e8 a8 ff ff ff       	call   c0002527 <move_window>
c000257f:	ba 04 00 00 00       	mov    edx,0x4
c0002584:	85 c0                	test   eax,eax
c0002586:	75 68                	jne    c00025f0 <check_fs+0x87>
c0002588:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000258e:	e8 2d fa ff ff       	call   c0001fc0 <ld_word>
c0002593:	ba 03 00 00 00       	mov    edx,0x3
c0002598:	66 3d 55 aa          	cmp    ax,0xaa55
c000259c:	75 52                	jne    c00025f0 <check_fs+0x87>
c000259e:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025a1:	8d 50 18             	lea    edx,[eax+0x18]
c00025a4:	80 fa 01             	cmp    dl,0x1
c00025a7:	76 09                	jbe    c00025b2 <check_fs+0x49>
c00025a9:	ba 02 00 00 00       	mov    edx,0x2
c00025ae:	3c eb                	cmp    al,0xeb
c00025b0:	75 3e                	jne    c00025f0 <check_fs+0x87>
c00025b2:	ba 58 5f 02 c0       	mov    edx,0xc0025f58
c00025b7:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025ba:	b9 03 00 00 00       	mov    ecx,0x3
c00025bf:	e8 48 fa ff ff       	call   c000200c <mem_cmp>
c00025c4:	31 d2                	xor    edx,edx
c00025c6:	85 c0                	test   eax,eax
c00025c8:	74 26                	je     c00025f0 <check_fs+0x87>
c00025ca:	ba 5c 2f 02 c0       	mov    edx,0xc0022f5c
c00025cf:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025d5:	b9 05 00 00 00       	mov    ecx,0x5
c00025da:	e8 2d fa ff ff       	call   c000200c <mem_cmp>
c00025df:	31 d2                	xor    edx,edx
c00025e1:	85 c0                	test   eax,eax
c00025e3:	74 0b                	je     c00025f0 <check_fs+0x87>
c00025e5:	31 d2                	xor    edx,edx
c00025e7:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025eb:	0f 95 c2             	setne  dl
c00025ee:	01 d2                	add    edx,edx
c00025f0:	89 d0                	mov    eax,edx
c00025f2:	83 c4 08             	add    esp,0x8
c00025f5:	5b                   	pop    ebx
c00025f6:	c3                   	ret    

c00025f7 <find_volume>:
c00025f7:	55                   	push   ebp
c00025f8:	57                   	push   edi
c00025f9:	56                   	push   esi
c00025fa:	89 c6                	mov    esi,eax
c00025fc:	53                   	push   ebx
c00025fd:	89 d3                	mov    ebx,edx
c00025ff:	83 ec 2c             	sub    esp,0x2c
c0002602:	31 d2                	xor    edx,edx
c0002604:	e8 60 ff ff ff       	call   c0002569 <check_fs>
c0002609:	83 f8 02             	cmp    eax,0x2
c000260c:	74 06                	je     c0002614 <find_volume+0x1d>
c000260e:	77 62                	ja     c0002672 <find_volume+0x7b>
c0002610:	85 db                	test   ebx,ebx
c0002612:	74 5e                	je     c0002672 <find_volume+0x7b>
c0002614:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002618:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000261e:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002624:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002628:	89 cf                	mov    edi,ecx
c000262a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000262e:	89 e8                	mov    eax,ebp
c0002630:	83 c5 10             	add    ebp,0x10
c0002633:	e8 95 f9 ff ff       	call   c0001fcd <ld_dword>
c0002638:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000263c:	89 01                	mov    DWORD PTR [ecx],eax
c000263e:	83 c1 04             	add    ecx,0x4
c0002641:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002645:	75 e3                	jne    c000262a <find_volume+0x33>
c0002647:	31 ed                	xor    ebp,ebp
c0002649:	85 db                	test   ebx,ebx
c000264b:	74 03                	je     c0002650 <find_volume+0x59>
c000264d:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002650:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002653:	b8 03 00 00 00       	mov    eax,0x3
c0002658:	85 d2                	test   edx,edx
c000265a:	74 0c                	je     c0002668 <find_volume+0x71>
c000265c:	89 f0                	mov    eax,esi
c000265e:	e8 06 ff ff ff       	call   c0002569 <check_fs>
c0002663:	83 f8 01             	cmp    eax,0x1
c0002666:	76 0a                	jbe    c0002672 <find_volume+0x7b>
c0002668:	85 db                	test   ebx,ebx
c000266a:	75 06                	jne    c0002672 <find_volume+0x7b>
c000266c:	45                   	inc    ebp
c000266d:	83 fd 03             	cmp    ebp,0x3
c0002670:	76 de                	jbe    c0002650 <find_volume+0x59>
c0002672:	83 c4 2c             	add    esp,0x2c
c0002675:	5b                   	pop    ebx
c0002676:	5e                   	pop    esi
c0002677:	5f                   	pop    edi
c0002678:	5d                   	pop    ebp
c0002679:	c3                   	ret    

c000267a <mount_volume>:
c000267a:	55                   	push   ebp
c000267b:	89 d5                	mov    ebp,edx
c000267d:	57                   	push   edi
c000267e:	89 cf                	mov    edi,ecx
c0002680:	56                   	push   esi
c0002681:	53                   	push   ebx
c0002682:	bb 0b 00 00 00       	mov    ebx,0xb
c0002687:	83 ec 1c             	sub    esp,0x1c
c000268a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002690:	e8 9c fd ff ff       	call   c0002431 <get_ldnumber>
c0002695:	85 c0                	test   eax,eax
c0002697:	0f 88 c4 02 00 00    	js     c0002961 <mount_volume+0x2e7>
c000269d:	8b 34 85 a0 94 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd6b60]
c00026a4:	89 c2                	mov    edx,eax
c00026a6:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ab:	85 f6                	test   esi,esi
c00026ad:	0f 84 ae 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026b3:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026b6:	83 e7 fe             	and    edi,0xfffffffe
c00026b9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026bc:	74 3a                	je     c00026f8 <mount_volume+0x7e>
c00026be:	89 04 24             	mov    DWORD PTR [esp],eax
c00026c1:	83 ec 0c             	sub    esp,0xc
c00026c4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026c8:	50                   	push   eax
c00026c9:	e8 a1 f8 ff ff       	call   c0001f6f <disk_status>
c00026ce:	83 c4 10             	add    esp,0x10
c00026d1:	a8 01                	test   al,0x1
c00026d3:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00026d6:	75 20                	jne    c00026f8 <mount_volume+0x7e>
c00026d8:	31 db                	xor    ebx,ebx
c00026da:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026e0:	0f 84 7b 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026e6:	a8 04                	test   al,0x4
c00026e8:	0f 84 73 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026ee:	bb 0a 00 00 00       	mov    ebx,0xa
c00026f3:	e9 69 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c00026f8:	83 ec 0c             	sub    esp,0xc
c00026fb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00026fe:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002701:	0f b6 c2             	movzx  eax,dl
c0002704:	bb 03 00 00 00       	mov    ebx,0x3
c0002709:	50                   	push   eax
c000270a:	e8 63 f8 ff ff       	call   c0001f72 <disk_initialize>
c000270f:	83 c4 10             	add    esp,0x10
c0002712:	a8 01                	test   al,0x1
c0002714:	0f 85 47 02 00 00    	jne    c0002961 <mount_volume+0x2e7>
c000271a:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002720:	74 04                	je     c0002726 <mount_volume+0xac>
c0002722:	a8 04                	test   al,0x4
c0002724:	75 c8                	jne    c00026ee <mount_volume+0x74>
c0002726:	31 d2                	xor    edx,edx
c0002728:	89 f0                	mov    eax,esi
c000272a:	bb 01 00 00 00       	mov    ebx,0x1
c000272f:	e8 c3 fe ff ff       	call   c00025f7 <find_volume>
c0002734:	83 f8 04             	cmp    eax,0x4
c0002737:	0f 84 24 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c000273d:	83 f8 01             	cmp    eax,0x1
c0002740:	76 0a                	jbe    c000274c <mount_volume+0xd2>
c0002742:	bb 0d 00 00 00       	mov    ebx,0xd
c0002747:	e9 15 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c000274c:	8d 46 3f             	lea    eax,[esi+0x3f]
c000274f:	e8 6c f8 ff ff       	call   c0001fc0 <ld_word>
c0002754:	66 3d 00 02          	cmp    ax,0x200
c0002758:	75 e8                	jne    c0002742 <mount_volume+0xc8>
c000275a:	8d 46 4a             	lea    eax,[esi+0x4a]
c000275d:	e8 5e f8 ff ff       	call   c0001fc0 <ld_word>
c0002762:	0f b7 c0             	movzx  eax,ax
c0002765:	89 04 24             	mov    DWORD PTR [esp],eax
c0002768:	85 c0                	test   eax,eax
c000276a:	75 0b                	jne    c0002777 <mount_volume+0xfd>
c000276c:	8d 46 58             	lea    eax,[esi+0x58]
c000276f:	e8 59 f8 ff ff       	call   c0001fcd <ld_dword>
c0002774:	89 04 24             	mov    DWORD PTR [esp],eax
c0002777:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000277a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000277e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002781:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002784:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002787:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000278b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000278e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002792:	48                   	dec    eax
c0002793:	3c 01                	cmp    al,0x1
c0002795:	77 ab                	ja     c0002742 <mount_volume+0xc8>
c0002797:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c000279b:	89 c3                	mov    ebx,eax
c000279d:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027a1:	66 85 c0             	test   ax,ax
c00027a4:	74 9c                	je     c0002742 <mount_volume+0xc8>
c00027a6:	8d 40 ff             	lea    eax,[eax-0x1]
c00027a9:	85 d8                	test   eax,ebx
c00027ab:	75 95                	jne    c0002742 <mount_volume+0xc8>
c00027ad:	8d 46 45             	lea    eax,[esi+0x45]
c00027b0:	e8 0b f8 ff ff       	call   c0001fc0 <ld_word>
c00027b5:	89 c7                	mov    edi,eax
c00027b7:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027bb:	a8 0f                	test   al,0xf
c00027bd:	75 83                	jne    c0002742 <mount_volume+0xc8>
c00027bf:	8d 46 47             	lea    eax,[esi+0x47]
c00027c2:	e8 f9 f7 ff ff       	call   c0001fc0 <ld_word>
c00027c7:	0f b7 e8             	movzx  ebp,ax
c00027ca:	85 ed                	test   ebp,ebp
c00027cc:	75 0a                	jne    c00027d8 <mount_volume+0x15e>
c00027ce:	8d 46 54             	lea    eax,[esi+0x54]
c00027d1:	e8 f7 f7 ff ff       	call   c0001fcd <ld_dword>
c00027d6:	89 c5                	mov    ebp,eax
c00027d8:	8d 46 42             	lea    eax,[esi+0x42]
c00027db:	e8 e0 f7 ff ff       	call   c0001fc0 <ld_word>
c00027e0:	0f b7 c8             	movzx  ecx,ax
c00027e3:	85 c9                	test   ecx,ecx
c00027e5:	0f 84 57 ff ff ff    	je     c0002742 <mount_volume+0xc8>
c00027eb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00027f0:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00027f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027f8:	0f b7 c7             	movzx  eax,di
c00027fb:	c1 e8 04             	shr    eax,0x4
c00027fe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002802:	01 c8                	add    eax,ecx
c0002804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002808:	39 c5                	cmp    ebp,eax
c000280a:	0f 82 32 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002810:	29 c5                	sub    ebp,eax
c0002812:	31 d2                	xor    edx,edx
c0002814:	89 e8                	mov    eax,ebp
c0002816:	f7 f3                	div    ebx
c0002818:	39 dd                	cmp    ebp,ebx
c000281a:	0f 82 22 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002820:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002825:	0f 87 17 ff ff ff    	ja     c0002742 <mount_volume+0xc8>
c000282b:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002830:	0f 86 1c 01 00 00    	jbe    c0002952 <mount_volume+0x2d8>
c0002836:	bb 03 00 00 00       	mov    ebx,0x3
c000283b:	8d 68 02             	lea    ebp,[eax+0x2]
c000283e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002846:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c000284a:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000284d:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002850:	01 c8                	add    eax,ecx
c0002852:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002855:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002858:	83 fb 03             	cmp    ebx,0x3
c000285b:	75 23                	jne    c0002880 <mount_volume+0x206>
c000285d:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002860:	e8 5b f7 ff ff       	call   c0001fc0 <ld_word>
c0002865:	09 c7                	or     edi,eax
c0002867:	66 85 ff             	test   di,di
c000286a:	0f 85 d2 fe ff ff    	jne    c0002742 <mount_volume+0xc8>
c0002870:	8d 46 60             	lea    eax,[esi+0x60]
c0002873:	c1 e5 02             	shl    ebp,0x2
c0002876:	e8 52 f7 ff ff       	call   c0001fcd <ld_dword>
c000287b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000287e:	eb 24                	jmp    c00028a4 <mount_volume+0x22a>
c0002880:	66 85 ff             	test   di,di
c0002883:	0f 84 b9 fe ff ff    	je     c0002742 <mount_volume+0xc8>
c0002889:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000288d:	83 fb 02             	cmp    ebx,0x2
c0002890:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002893:	75 04                	jne    c0002899 <mount_volume+0x21f>
c0002895:	01 ed                	add    ebp,ebp
c0002897:	eb 0b                	jmp    c00028a4 <mount_volume+0x22a>
c0002899:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c000289d:	83 e5 01             	and    ebp,0x1
c00028a0:	d1 e8                	shr    eax,1
c00028a2:	01 c5                	add    ebp,eax
c00028a4:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028aa:	c1 ed 09             	shr    ebp,0x9
c00028ad:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00028b0:	0f 87 8c fe ff ff    	ja     c0002742 <mount_volume+0xc8>
c00028b6:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00028bd:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00028c4:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00028c8:	83 fb 03             	cmp    ebx,0x3
c00028cb:	75 6e                	jne    c000293b <mount_volume+0x2c1>
c00028cd:	8d 46 64             	lea    eax,[esi+0x64]
c00028d0:	e8 eb f6 ff ff       	call   c0001fc0 <ld_word>
c00028d5:	66 48                	dec    ax
c00028d7:	75 62                	jne    c000293b <mount_volume+0x2c1>
c00028d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	42                   	inc    edx
c00028e0:	e8 42 fc ff ff       	call   c0002527 <move_window>
c00028e5:	85 c0                	test   eax,eax
c00028e7:	75 52                	jne    c000293b <mount_volume+0x2c1>
c00028e9:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00028ed:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00028f3:	e8 c8 f6 ff ff       	call   c0001fc0 <ld_word>
c00028f8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028fc:	75 3d                	jne    c000293b <mount_volume+0x2c1>
c00028fe:	8d 46 34             	lea    eax,[esi+0x34]
c0002901:	e8 c7 f6 ff ff       	call   c0001fcd <ld_dword>
c0002906:	3d 52 52 61 41       	cmp    eax,0x41615252
c000290b:	75 2e                	jne    c000293b <mount_volume+0x2c1>
c000290d:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002913:	e8 b5 f6 ff ff       	call   c0001fcd <ld_dword>
c0002918:	3d 72 72 41 61       	cmp    eax,0x61417272
c000291d:	75 1c                	jne    c000293b <mount_volume+0x2c1>
c000291f:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002925:	e8 a3 f6 ff ff       	call   c0001fcd <ld_dword>
c000292a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000292d:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002933:	e8 95 f6 ff ff       	call   c0001fcd <ld_dword>
c0002938:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000293b:	66 a1 80 94 02 c0    	mov    ax,ds:0xc0029480
c0002941:	88 1e                	mov    BYTE PTR [esi],bl
c0002943:	40                   	inc    eax
c0002944:	31 db                	xor    ebx,ebx
c0002946:	66 a3 80 94 02 c0    	mov    ds:0xc0029480,ax
c000294c:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002950:	eb 0f                	jmp    c0002961 <mount_volume+0x2e7>
c0002952:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002957:	19 db                	sbb    ebx,ebx
c0002959:	83 c3 02             	add    ebx,0x2
c000295c:	e9 da fe ff ff       	jmp    c000283b <mount_volume+0x1c1>
c0002961:	83 c4 1c             	add    esp,0x1c
c0002964:	89 d8                	mov    eax,ebx
c0002966:	5b                   	pop    ebx
c0002967:	5e                   	pop    esi
c0002968:	5f                   	pop    edi
c0002969:	5d                   	pop    ebp
c000296a:	c3                   	ret    

c000296b <put_fat>:
c000296b:	55                   	push   ebp
c000296c:	bd 02 00 00 00       	mov    ebp,0x2
c0002971:	57                   	push   edi
c0002972:	56                   	push   esi
c0002973:	53                   	push   ebx
c0002974:	83 ec 1c             	sub    esp,0x1c
c0002977:	83 fa 01             	cmp    edx,0x1
c000297a:	0f 86 38 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002980:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002983:	0f 86 2f 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002989:	89 c6                	mov    esi,eax
c000298b:	89 cf                	mov    edi,ecx
c000298d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002990:	89 d3                	mov    ebx,edx
c0002992:	83 f8 02             	cmp    eax,0x2
c0002995:	0f 84 b1 00 00 00    	je     c0002a4c <put_fat+0xe1>
c000299b:	83 f8 03             	cmp    eax,0x3
c000299e:	0f 84 d5 00 00 00    	je     c0002a79 <put_fat+0x10e>
c00029a4:	48                   	dec    eax
c00029a5:	0f 85 0d 01 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ab:	89 d1                	mov    ecx,edx
c00029ad:	89 f0                	mov    eax,esi
c00029af:	d1 e9                	shr    ecx,1
c00029b1:	01 d1                	add    ecx,edx
c00029b3:	89 ca                	mov    edx,ecx
c00029b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029b9:	c1 ea 09             	shr    edx,0x9
c00029bc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029bf:	e8 63 fb ff ff       	call   c0002527 <move_window>
c00029c4:	89 c5                	mov    ebp,eax
c00029c6:	85 c0                	test   eax,eax
c00029c8:	0f 85 ea 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029d2:	8d 46 34             	lea    eax,[esi+0x34]
c00029d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029d9:	8d 41 01             	lea    eax,[ecx+0x1]
c00029dc:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029e6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00029ea:	89 f8                	mov    eax,edi
c00029ec:	83 e3 01             	and    ebx,0x1
c00029ef:	74 11                	je     c0002a02 <put_fat+0x97>
c00029f1:	8a 11                	mov    dl,BYTE PTR [ecx]
c00029f3:	89 f8                	mov    eax,edi
c00029f5:	83 e2 0f             	and    edx,0xf
c00029f8:	c1 e0 04             	shl    eax,0x4
c00029fb:	25 f0 0f 00 00       	and    eax,0xff0
c0002a00:	09 d0                	or     eax,edx
c0002a02:	88 01                	mov    BYTE PTR [ecx],al
c0002a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a0c:	c1 ea 09             	shr    edx,0x9
c0002a0f:	89 f0                	mov    eax,esi
c0002a11:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a14:	e8 0e fb ff ff       	call   c0002527 <move_window>
c0002a19:	89 c5                	mov    ebp,eax
c0002a1b:	85 c0                	test   eax,eax
c0002a1d:	0f 85 95 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c0002a23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a27:	25 ff 01 00 00       	and    eax,0x1ff
c0002a2c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a30:	85 db                	test   ebx,ebx
c0002a32:	74 07                	je     c0002a3b <put_fat+0xd0>
c0002a34:	c1 ef 04             	shr    edi,0x4
c0002a37:	89 f9                	mov    ecx,edi
c0002a39:	eb 0d                	jmp    c0002a48 <put_fat+0xdd>
c0002a3b:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a3d:	c1 ef 08             	shr    edi,0x8
c0002a40:	83 e1 f0             	and    ecx,0xfffffff0
c0002a43:	83 e7 0f             	and    edi,0xf
c0002a46:	09 f9                	or     ecx,edi
c0002a48:	88 08                	mov    BYTE PTR [eax],cl
c0002a4a:	eb 27                	jmp    c0002a73 <put_fat+0x108>
c0002a4c:	c1 ea 08             	shr    edx,0x8
c0002a4f:	89 f0                	mov    eax,esi
c0002a51:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a54:	e8 ce fa ff ff       	call   c0002527 <move_window>
c0002a59:	89 c5                	mov    ebp,eax
c0002a5b:	85 c0                	test   eax,eax
c0002a5d:	75 59                	jne    c0002ab8 <put_fat+0x14d>
c0002a5f:	01 db                	add    ebx,ebx
c0002a61:	0f b7 d7             	movzx  edx,di
c0002a64:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a6a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a6e:	e8 72 f5 ff ff       	call   c0001fe5 <st_word>
c0002a73:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a77:	eb 3f                	jmp    c0002ab8 <put_fat+0x14d>
c0002a79:	c1 ea 07             	shr    edx,0x7
c0002a7c:	89 f0                	mov    eax,esi
c0002a7e:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a81:	e8 a1 fa ff ff       	call   c0002527 <move_window>
c0002a86:	89 c5                	mov    ebp,eax
c0002a88:	85 c0                	test   eax,eax
c0002a8a:	75 2c                	jne    c0002ab8 <put_fat+0x14d>
c0002a8c:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a92:	c1 e3 02             	shl    ebx,0x2
c0002a95:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a9b:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a9f:	89 d8                	mov    eax,ebx
c0002aa1:	e8 27 f5 ff ff       	call   c0001fcd <ld_dword>
c0002aa6:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aab:	09 f8                	or     eax,edi
c0002aad:	89 c2                	mov    edx,eax
c0002aaf:	89 d8                	mov    eax,ebx
c0002ab1:	e8 33 f5 ff ff       	call   c0001fe9 <st_dword>
c0002ab6:	eb bb                	jmp    c0002a73 <put_fat+0x108>
c0002ab8:	83 c4 1c             	add    esp,0x1c
c0002abb:	89 e8                	mov    eax,ebp
c0002abd:	5b                   	pop    ebx
c0002abe:	5e                   	pop    esi
c0002abf:	5f                   	pop    edi
c0002ac0:	5d                   	pop    ebp
c0002ac1:	c3                   	ret    

c0002ac2 <dir_clear>:
c0002ac2:	55                   	push   ebp
c0002ac3:	57                   	push   edi
c0002ac4:	56                   	push   esi
c0002ac5:	89 c6                	mov    esi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	83 ec 1c             	sub    esp,0x1c
c0002acb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002acf:	e8 f0 f9 ff ff       	call   c00024c4 <sync_window>
c0002ad4:	85 c0                	test   eax,eax
c0002ad6:	0f 85 c0 00 00 00    	jne    c0002b9c <dir_clear+0xda>
c0002adc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ae0:	89 f0                	mov    eax,esi
c0002ae2:	e8 30 f7 ff ff       	call   c0002217 <clst2sect>
c0002ae7:	31 d2                	xor    edx,edx
c0002ae9:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002aec:	89 c5                	mov    ebp,eax
c0002aee:	b9 00 02 00 00       	mov    ecx,0x200
c0002af3:	8d 46 34             	lea    eax,[esi+0x34]
c0002af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002afa:	e8 02 f5 ff ff       	call   c0002001 <mem_set>
c0002aff:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b03:	c1 e3 09             	shl    ebx,0x9
c0002b06:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b0c:	76 1b                	jbe    c0002b29 <dir_clear+0x67>
c0002b0e:	bb 00 80 00 00       	mov    ebx,0x8000
c0002b13:	eb 14                	jmp    c0002b29 <dir_clear+0x67>
c0002b15:	83 ec 0c             	sub    esp,0xc
c0002b18:	53                   	push   ebx
c0002b19:	e8 ea 32 00 00       	call   c0005e08 <ff_memalloc>
c0002b1e:	83 c4 10             	add    esp,0x10
c0002b21:	89 c7                	mov    edi,eax
c0002b23:	85 c0                	test   eax,eax
c0002b25:	75 7c                	jne    c0002ba3 <dir_clear+0xe1>
c0002b27:	d1 eb                	shr    ebx,1
c0002b29:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b2f:	77 e4                	ja     c0002b15 <dir_clear+0x53>
c0002b31:	31 db                	xor    ebx,ebx
c0002b33:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b37:	39 d8                	cmp    eax,ebx
c0002b39:	76 53                	jbe    c0002b8e <dir_clear+0xcc>
c0002b3b:	6a 01                	push   0x1
c0002b3d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b40:	50                   	push   eax
c0002b41:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b49:	50                   	push   eax
c0002b4a:	e8 3c f4 ff ff       	call   c0001f8b <disk_write>
c0002b4f:	83 c4 10             	add    esp,0x10
c0002b52:	85 c0                	test   eax,eax
c0002b54:	75 38                	jne    c0002b8e <dir_clear+0xcc>
c0002b56:	43                   	inc    ebx
c0002b57:	eb da                	jmp    c0002b33 <dir_clear+0x71>
c0002b59:	52                   	push   edx
c0002b5a:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b61:	50                   	push   eax
c0002b62:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b66:	57                   	push   edi
c0002b67:	50                   	push   eax
c0002b68:	e8 1e f4 ff ff       	call   c0001f8b <disk_write>
c0002b6d:	83 c4 10             	add    esp,0x10
c0002b70:	85 c0                	test   eax,eax
c0002b72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b76:	75 0a                	jne    c0002b82 <dir_clear+0xc0>
c0002b78:	01 d3                	add    ebx,edx
c0002b7a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7e:	39 d8                	cmp    eax,ebx
c0002b80:	77 d7                	ja     c0002b59 <dir_clear+0x97>
c0002b82:	83 ec 0c             	sub    esp,0xc
c0002b85:	57                   	push   edi
c0002b86:	e8 95 32 00 00       	call   c0005e20 <ff_memfree>
c0002b8b:	83 c4 10             	add    esp,0x10
c0002b8e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b92:	39 d8                	cmp    eax,ebx
c0002b94:	0f 95 c0             	setne  al
c0002b97:	0f b6 c0             	movzx  eax,al
c0002b9a:	eb 19                	jmp    c0002bb5 <dir_clear+0xf3>
c0002b9c:	b8 01 00 00 00       	mov    eax,0x1
c0002ba1:	eb 12                	jmp    c0002bb5 <dir_clear+0xf3>
c0002ba3:	89 d9                	mov    ecx,ebx
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	e8 55 f4 ff ff       	call   c0002001 <mem_set>
c0002bac:	89 da                	mov    edx,ebx
c0002bae:	31 db                	xor    ebx,ebx
c0002bb0:	c1 ea 09             	shr    edx,0x9
c0002bb3:	eb c5                	jmp    c0002b7a <dir_clear+0xb8>
c0002bb5:	83 c4 1c             	add    esp,0x1c
c0002bb8:	5b                   	pop    ebx
c0002bb9:	5e                   	pop    esi
c0002bba:	5f                   	pop    edi
c0002bbb:	5d                   	pop    ebp
c0002bbc:	c3                   	ret    

c0002bbd <create_name>:
c0002bbd:	55                   	push   ebp
c0002bbe:	57                   	push   edi
c0002bbf:	89 d7                	mov    edi,edx
c0002bc1:	56                   	push   esi
c0002bc2:	31 f6                	xor    esi,esi
c0002bc4:	53                   	push   ebx
c0002bc5:	83 ec 3c             	sub    esp,0x3c
c0002bc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002bcc:	8b 02                	mov    eax,DWORD PTR [edx]
c0002bce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0002bd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002bdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bdf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002be3:	e8 5e f4 ff ff       	call   c0002046 <tchar2uni>
c0002be8:	89 c3                	mov    ebx,eax
c0002bea:	83 f8 ff             	cmp    eax,0xffffffff
c0002bed:	75 0a                	jne    c0002bf9 <create_name+0x3c>
c0002bef:	b8 06 00 00 00       	mov    eax,0x6
c0002bf4:	e9 93 02 00 00       	jmp    c0002e8c <create_name+0x2cf>
c0002bf9:	3d ff ff 00 00       	cmp    eax,0xffff
c0002bfe:	76 0c                	jbe    c0002c0c <create_name+0x4f>
c0002c00:	c1 e8 10             	shr    eax,0x10
c0002c03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c07:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002c0b:	46                   	inc    esi
c0002c0c:	0f b7 d3             	movzx  edx,bx
c0002c0f:	83 fa 1f             	cmp    edx,0x1f
c0002c12:	76 4a                	jbe    c0002c5e <create_name+0xa1>
c0002c14:	83 fa 5c             	cmp    edx,0x5c
c0002c17:	74 30                	je     c0002c49 <create_name+0x8c>
c0002c19:	83 fa 2f             	cmp    edx,0x2f
c0002c1c:	74 2b                	je     c0002c49 <create_name+0x8c>
c0002c1e:	83 fa 7f             	cmp    edx,0x7f
c0002c21:	77 0e                	ja     c0002c31 <create_name+0x74>
c0002c23:	b8 62 2f 02 c0       	mov    eax,0xc0022f62
c0002c28:	e8 02 f4 ff ff       	call   c000202f <chk_chr>
c0002c2d:	85 c0                	test   eax,eax
c0002c2f:	75 be                	jne    c0002bef <create_name+0x32>
c0002c31:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c37:	77 b6                	ja     c0002bef <create_name+0x32>
c0002c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c3d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c41:	46                   	inc    esi
c0002c42:	eb 9b                	jmp    c0002bdf <create_name+0x22>
c0002c44:	40                   	inc    eax
c0002c45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c4d:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c50:	83 fa 2f             	cmp    edx,0x2f
c0002c53:	74 ef                	je     c0002c44 <create_name+0x87>
c0002c55:	83 fa 5c             	cmp    edx,0x5c
c0002c58:	74 ea                	je     c0002c44 <create_name+0x87>
c0002c5a:	31 db                	xor    ebx,ebx
c0002c5c:	eb 02                	jmp    c0002c60 <create_name+0xa3>
c0002c5e:	b3 04                	mov    bl,0x4
c0002c60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c64:	89 07                	mov    DWORD PTR [edi],eax
c0002c66:	85 f6                	test   esi,esi
c0002c68:	74 16                	je     c0002c80 <create_name+0xc3>
c0002c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c6e:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c73:	83 f8 20             	cmp    eax,0x20
c0002c76:	74 05                	je     c0002c7d <create_name+0xc0>
c0002c78:	83 f8 2e             	cmp    eax,0x2e
c0002c7b:	75 03                	jne    c0002c80 <create_name+0xc3>
c0002c7d:	4e                   	dec    esi
c0002c7e:	eb e6                	jmp    c0002c66 <create_name+0xa9>
c0002c80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c84:	31 ff                	xor    edi,edi
c0002c86:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002c8c:	85 f6                	test   esi,esi
c0002c8e:	0f 84 5b ff ff ff    	je     c0002bef <create_name+0x32>
c0002c94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c98:	8d 57 01             	lea    edx,[edi+0x1]
c0002c9b:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c9f:	83 f8 20             	cmp    eax,0x20
c0002ca2:	75 04                	jne    c0002ca8 <create_name+0xeb>
c0002ca4:	89 d7                	mov    edi,edx
c0002ca6:	eb ec                	jmp    c0002c94 <create_name+0xd7>
c0002ca8:	85 ff                	test   edi,edi
c0002caa:	75 05                	jne    c0002cb1 <create_name+0xf4>
c0002cac:	83 f8 2e             	cmp    eax,0x2e
c0002caf:	75 08                	jne    c0002cb9 <create_name+0xfc>
c0002cb1:	83 cb 03             	or     ebx,0x3
c0002cb4:	eb 03                	jmp    c0002cb9 <create_name+0xfc>
c0002cb6:	4e                   	dec    esi
c0002cb7:	74 0c                	je     c0002cc5 <create_name+0x108>
c0002cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cbd:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002cc3:	75 f1                	jne    c0002cb6 <create_name+0xf9>
c0002cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002cc9:	b9 0b 00 00 00       	mov    ecx,0xb
c0002cce:	83 c0 20             	add    eax,0x20
c0002cd1:	ba 20 00 00 00       	mov    edx,0x20
c0002cd6:	31 ed                	xor    ebp,ebp
c0002cd8:	e8 24 f3 ff ff       	call   c0002001 <mem_set>
c0002cdd:	b9 08 00 00 00       	mov    ecx,0x8
c0002ce2:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002ce7:	8d 47 01             	lea    eax,[edi+0x1]
c0002cea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002cee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cf2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cf6:	89 c7                	mov    edi,eax
c0002cf8:	85 c0                	test   eax,eax
c0002cfa:	0f 84 25 01 00 00    	je     c0002e25 <create_name+0x268>
c0002d00:	83 f8 20             	cmp    eax,0x20
c0002d03:	74 0f                	je     c0002d14 <create_name+0x157>
c0002d05:	83 f8 2e             	cmp    eax,0x2e
c0002d08:	75 13                	jne    c0002d1d <create_name+0x160>
c0002d0a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d0e:	0f 84 6a 01 00 00    	je     c0002e7e <create_name+0x2c1>
c0002d14:	83 cb 03             	or     ebx,0x3
c0002d17:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002d1b:	eb ca                	jmp    c0002ce7 <create_name+0x12a>
c0002d1d:	39 cd                	cmp    ebp,ecx
c0002d1f:	73 0b                	jae    c0002d2c <create_name+0x16f>
c0002d21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d25:	75 3f                	jne    c0002d66 <create_name+0x1a9>
c0002d27:	e9 52 01 00 00       	jmp    c0002e7e <create_name+0x2c1>
c0002d2c:	83 f9 0b             	cmp    ecx,0xb
c0002d2f:	75 0d                	jne    c0002d3e <create_name+0x181>
c0002d31:	83 cb 03             	or     ebx,0x3
c0002d34:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d39:	e9 e7 00 00 00       	jmp    c0002e25 <create_name+0x268>
c0002d3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d42:	74 0d                	je     c0002d51 <create_name+0x194>
c0002d44:	83 cb 03             	or     ebx,0x3
c0002d47:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d4b:	0f 87 d4 00 00 00    	ja     c0002e25 <create_name+0x268>
c0002d51:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d56:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002d5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d5f:	bd 08 00 00 00       	mov    ebp,0x8
c0002d64:	eb b1                	jmp    c0002d17 <create_name+0x15a>
c0002d66:	83 f8 7f             	cmp    eax,0x7f
c0002d69:	76 66                	jbe    c0002dd1 <create_name+0x214>
c0002d6b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6f:	89 d9                	mov    ecx,ebx
c0002d71:	83 c9 02             	or     ecx,0x2
c0002d74:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d78:	52                   	push   edx
c0002d79:	52                   	push   edx
c0002d7a:	68 b5 01 00 00       	push   0x1b5
c0002d7f:	50                   	push   eax
c0002d80:	e8 b3 30 00 00       	call   c0005e38 <ff_uni2oem>
c0002d85:	83 c4 10             	add    esp,0x10
c0002d88:	89 c7                	mov    edi,eax
c0002d8a:	a8 80                	test   al,0x80
c0002d8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002d90:	74 0c                	je     c0002d9e <create_name+0x1e1>
c0002d92:	83 e7 7f             	and    edi,0x7f
c0002d95:	0f b6 bf 20 30 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdcfe0]
c0002d9c:	eb 2a                	jmp    c0002dc8 <create_name+0x20b>
c0002d9e:	0f b7 c0             	movzx  eax,ax
c0002da1:	3d ff 00 00 00       	cmp    eax,0xff
c0002da6:	76 20                	jbe    c0002dc8 <create_name+0x20b>
c0002da8:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002dab:	39 ea                	cmp    edx,ebp
c0002dad:	77 0a                	ja     c0002db9 <create_name+0x1fc>
c0002daf:	83 cb 03             	or     ebx,0x3
c0002db2:	89 cd                	mov    ebp,ecx
c0002db4:	e9 5e ff ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002db9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002dbd:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002dc1:	45                   	inc    ebp
c0002dc2:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dc6:	eb 4d                	jmp    c0002e15 <create_name+0x258>
c0002dc8:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dcc:	66 85 ff             	test   di,di
c0002dcf:	74 19                	je     c0002dea <create_name+0x22d>
c0002dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dd5:	0f b7 d7             	movzx  edx,di
c0002dd8:	b8 6b 2f 02 c0       	mov    eax,0xc0022f6b
c0002ddd:	e8 4d f2 ff ff       	call   c000202f <chk_chr>
c0002de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002de6:	85 c0                	test   eax,eax
c0002de8:	74 0a                	je     c0002df4 <create_name+0x237>
c0002dea:	83 cb 03             	or     ebx,0x3
c0002ded:	bf 5f 00 00 00       	mov    edi,0x5f
c0002df2:	eb 21                	jmp    c0002e15 <create_name+0x258>
c0002df4:	8d 47 bf             	lea    eax,[edi-0x41]
c0002df7:	66 83 f8 19          	cmp    ax,0x19
c0002dfb:	77 07                	ja     c0002e04 <create_name+0x247>
c0002dfd:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e02:	eb 11                	jmp    c0002e15 <create_name+0x258>
c0002e04:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e07:	66 83 f8 19          	cmp    ax,0x19
c0002e0b:	77 08                	ja     c0002e15 <create_name+0x258>
c0002e0d:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e12:	83 ef 20             	sub    edi,0x20
c0002e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002e19:	89 f8                	mov    eax,edi
c0002e1b:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002e1f:	45                   	inc    ebp
c0002e20:	e9 f2 fe ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e29:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002e2d:	75 04                	jne    c0002e33 <create_name+0x276>
c0002e2f:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002e33:	83 f9 08             	cmp    ecx,0x8
c0002e36:	75 05                	jne    c0002e3d <create_name+0x280>
c0002e38:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e41:	83 e0 0c             	and    eax,0xc
c0002e44:	83 f8 0c             	cmp    eax,0xc
c0002e47:	74 0c                	je     c0002e55 <create_name+0x298>
c0002e49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e4d:	83 e0 03             	and    eax,0x3
c0002e50:	83 f8 03             	cmp    eax,0x3
c0002e53:	75 05                	jne    c0002e5a <create_name+0x29d>
c0002e55:	83 cb 02             	or     ebx,0x2
c0002e58:	eb 19                	jmp    c0002e73 <create_name+0x2b6>
c0002e5a:	f6 c3 02             	test   bl,0x2
c0002e5d:	75 14                	jne    c0002e73 <create_name+0x2b6>
c0002e5f:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e64:	74 03                	je     c0002e69 <create_name+0x2ac>
c0002e66:	83 cb 10             	or     ebx,0x10
c0002e69:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e6e:	74 03                	je     c0002e73 <create_name+0x2b6>
c0002e70:	83 cb 08             	or     ebx,0x8
c0002e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e77:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002e7a:	31 c0                	xor    eax,eax
c0002e7c:	eb 0e                	jmp    c0002e8c <create_name+0x2cf>
c0002e7e:	83 f9 0b             	cmp    ecx,0xb
c0002e81:	0f 85 ca fe ff ff    	jne    c0002d51 <create_name+0x194>
c0002e87:	e9 a5 fe ff ff       	jmp    c0002d31 <create_name+0x174>
c0002e8c:	83 c4 3c             	add    esp,0x3c
c0002e8f:	5b                   	pop    ebx
c0002e90:	5e                   	pop    esi
c0002e91:	5f                   	pop    edi
c0002e92:	5d                   	pop    ebp
c0002e93:	c3                   	ret    

c0002e94 <cmp_lfn>:
c0002e94:	55                   	push   ebp
c0002e95:	57                   	push   edi
c0002e96:	89 d7                	mov    edi,edx
c0002e98:	56                   	push   esi
c0002e99:	53                   	push   ebx
c0002e9a:	83 ec 1c             	sub    esp,0x1c
c0002e9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ea1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ea4:	e8 17 f1 ff ff       	call   c0001fc0 <ld_word>
c0002ea9:	66 85 c0             	test   ax,ax
c0002eac:	74 07                	je     c0002eb5 <cmp_lfn+0x21>
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	e9 a1 00 00 00       	jmp    c0002f56 <cmp_lfn+0xc2>
c0002eb5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002eb7:	bd 01 00 00 00       	mov    ebp,0x1
c0002ebc:	83 e3 3f             	and    ebx,0x3f
c0002ebf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ec7:	4b                   	dec    ebx
c0002ec8:	6b db 0d             	imul   ebx,ebx,0xd
c0002ecb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ecf:	0f b6 80 a0 30 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdcf60]
c0002ed6:	01 f8                	add    eax,edi
c0002ed8:	e8 e3 f0 ff ff       	call   c0001fc0 <ld_word>
c0002edd:	66 85 ed             	test   bp,bp
c0002ee0:	89 c6                	mov    esi,eax
c0002ee2:	74 3c                	je     c0002f20 <cmp_lfn+0x8c>
c0002ee4:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eea:	77 c2                	ja     c0002eae <cmp_lfn+0x1a>
c0002eec:	83 ec 0c             	sub    esp,0xc
c0002eef:	0f b7 c0             	movzx  eax,ax
c0002ef2:	50                   	push   eax
c0002ef3:	e8 58 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002ef8:	89 c5                	mov    ebp,eax
c0002efa:	8d 43 01             	lea    eax,[ebx+0x1]
c0002efd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002f01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002f05:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f09:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f0c:	e8 3f 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002f11:	83 c4 10             	add    esp,0x10
c0002f14:	39 c5                	cmp    ebp,eax
c0002f16:	75 96                	jne    c0002eae <cmp_lfn+0x1a>
c0002f18:	89 f5                	mov    ebp,esi
c0002f1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002f1e:	eb 0b                	jmp    c0002f2b <cmp_lfn+0x97>
c0002f20:	0f b7 c8             	movzx  ecx,ax
c0002f23:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002f29:	75 83                	jne    c0002eae <cmp_lfn+0x1a>
c0002f2b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002f2f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002f34:	75 95                	jne    c0002ecb <cmp_lfn+0x37>
c0002f36:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f39:	74 16                	je     c0002f51 <cmp_lfn+0xbd>
c0002f3b:	66 85 ed             	test   bp,bp
c0002f3e:	74 11                	je     c0002f51 <cmp_lfn+0xbd>
c0002f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002f44:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f49:	0f 94 c0             	sete   al
c0002f4c:	0f b6 c0             	movzx  eax,al
c0002f4f:	eb 05                	jmp    c0002f56 <cmp_lfn+0xc2>
c0002f51:	b8 01 00 00 00       	mov    eax,0x1
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	5b                   	pop    ebx
c0002f5a:	5e                   	pop    esi
c0002f5b:	5f                   	pop    edi
c0002f5c:	5d                   	pop    ebp
c0002f5d:	c3                   	ret    

c0002f5e <sync_fs>:
c0002f5e:	56                   	push   esi
c0002f5f:	53                   	push   ebx
c0002f60:	53                   	push   ebx
c0002f61:	89 c3                	mov    ebx,eax
c0002f63:	e8 5c f5 ff ff       	call   c00024c4 <sync_window>
c0002f68:	85 c0                	test   eax,eax
c0002f6a:	0f 85 9a 00 00 00    	jne    c000300a <sync_fs+0xac>
c0002f70:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f73:	75 7b                	jne    c0002ff0 <sync_fs+0x92>
c0002f75:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f79:	75 75                	jne    c0002ff0 <sync_fs+0x92>
c0002f7b:	b9 00 02 00 00       	mov    ecx,0x200
c0002f80:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f83:	31 d2                	xor    edx,edx
c0002f85:	89 f0                	mov    eax,esi
c0002f87:	e8 75 f0 ff ff       	call   c0002001 <mem_set>
c0002f8c:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f97:	e8 49 f0 ff ff       	call   c0001fe5 <st_word>
c0002f9c:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fa1:	89 f0                	mov    eax,esi
c0002fa3:	e8 41 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fa8:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fae:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fb3:	e8 31 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fb8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fbb:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fc1:	e8 23 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fc6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002fc9:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002fcf:	e8 15 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fd9:	40                   	inc    eax
c0002fda:	50                   	push   eax
c0002fdb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fde:	56                   	push   esi
c0002fdf:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fe3:	50                   	push   eax
c0002fe4:	e8 a2 ef ff ff       	call   c0001f8b <disk_write>
c0002fe9:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002fed:	83 c4 10             	add    esp,0x10
c0002ff0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ff4:	51                   	push   ecx
c0002ff5:	6a 00                	push   0x0
c0002ff7:	6a 00                	push   0x0
c0002ff9:	50                   	push   eax
c0002ffa:	e8 a2 ef ff ff       	call   c0001fa1 <disk_ioctl>
c0002fff:	83 c4 10             	add    esp,0x10
c0003002:	85 c0                	test   eax,eax
c0003004:	0f 95 c0             	setne  al
c0003007:	0f b6 c0             	movzx  eax,al
c000300a:	5a                   	pop    edx
c000300b:	5b                   	pop    ebx
c000300c:	5e                   	pop    esi
c000300d:	c3                   	ret    

c000300e <create_partition>:
c000300e:	55                   	push   ebp
c000300f:	0f b6 c0             	movzx  eax,al
c0003012:	57                   	push   edi
c0003013:	56                   	push   esi
c0003014:	53                   	push   ebx
c0003015:	83 ec 40             	sub    esp,0x40
c0003018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000301c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003020:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003024:	8d 44 24 30          	lea    eax,[esp+0x30]
c0003028:	50                   	push   eax
c0003029:	6a 01                	push   0x1
c000302b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000302f:	e8 6d ef ff ff       	call   c0001fa1 <disk_ioctl>
c0003034:	83 c4 10             	add    esp,0x10
c0003037:	85 c0                	test   eax,eax
c0003039:	0f 85 6a 01 00 00    	jne    c00031a9 <create_partition+0x19b>
c000303f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003043:	b9 05 00 00 00       	mov    ecx,0x5
c0003048:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000304c:	be 08 00 00 00       	mov    esi,0x8
c0003051:	89 f0                	mov    eax,esi
c0003053:	31 d2                	xor    edx,edx
c0003055:	0f b6 d8             	movzx  ebx,al
c0003058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000305c:	f7 f3                	div    ebx
c000305e:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003063:	76 0a                	jbe    c000306f <create_partition+0x61>
c0003065:	d1 e6                	shl    esi,1
c0003067:	49                   	dec    ecx
c0003068:	75 e7                	jne    c0003051 <create_partition+0x43>
c000306a:	be ff ff ff ff       	mov    esi,0xffffffff
c000306f:	b9 00 02 00 00       	mov    ecx,0x200
c0003074:	31 d2                	xor    edx,edx
c0003076:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000307a:	e8 82 ef ff ff       	call   c0002001 <mem_set>
c000307f:	b9 64 00 00 00       	mov    ecx,0x64
c0003084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003088:	31 d2                	xor    edx,edx
c000308a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003092:	f7 f1                	div    ecx
c0003094:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003099:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000309d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030a1:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030a7:	89 f0                	mov    eax,esi
c00030a9:	0f b6 c0             	movzx  eax,al
c00030ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030b0:	85 c9                	test   ecx,ecx
c00030b2:	75 34                	jne    c00030e8 <create_partition+0xda>
c00030b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030b8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030bd:	05 fe 01 00 00       	add    eax,0x1fe
c00030c2:	e8 1e ef ff ff       	call   c0001fe5 <st_word>
c00030c7:	6a 01                	push   0x1
c00030c9:	6a 00                	push   0x0
c00030cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00030cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00030d3:	e8 b3 ee ff ff       	call   c0001f8b <disk_write>
c00030d8:	83 c4 10             	add    esp,0x10
c00030db:	85 c0                	test   eax,eax
c00030dd:	0f 95 c0             	setne  al
c00030e0:	0f b6 c0             	movzx  eax,al
c00030e3:	e9 c6 00 00 00       	jmp    c00031ae <create_partition+0x1a0>
c00030e8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00030ec:	76 c6                	jbe    c00030b4 <create_partition+0xa6>
c00030ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030f6:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030f9:	83 fe 64             	cmp    esi,0x64
c00030fc:	77 0d                	ja     c000310b <create_partition+0xfd>
c00030fe:	74 07                	je     c0003107 <create_partition+0xf9>
c0003100:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003105:	eb 04                	jmp    c000310b <create_partition+0xfd>
c0003107:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000310b:	31 c0                	xor    eax,eax
c000310d:	89 f2                	mov    edx,esi
c000310f:	01 ca                	add    edx,ecx
c0003111:	0f 92 c0             	setb   al
c0003114:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0003118:	77 04                	ja     c000311e <create_partition+0x110>
c000311a:	85 c0                	test   eax,eax
c000311c:	74 08                	je     c0003126 <create_partition+0x118>
c000311e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003122:	29 ce                	sub    esi,ecx
c0003124:	eb 04                	jmp    c000312a <create_partition+0x11c>
c0003126:	85 f6                	test   esi,esi
c0003128:	74 8a                	je     c00030b4 <create_partition+0xa6>
c000312a:	89 ca                	mov    edx,ecx
c000312c:	89 d8                	mov    eax,ebx
c000312e:	bf 3f 00 00 00       	mov    edi,0x3f
c0003133:	e8 b1 ee ff ff       	call   c0001fe9 <st_dword>
c0003138:	8d 43 04             	lea    eax,[ebx+0x4]
c000313b:	89 f2                	mov    edx,esi
c000313d:	83 c3 10             	add    ebx,0x10
c0003140:	e8 a4 ee ff ff       	call   c0001fe9 <st_dword>
c0003145:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003149:	31 d2                	xor    edx,edx
c000314b:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c000314e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003152:	89 c8                	mov    eax,ecx
c0003154:	01 f1                	add    ecx,esi
c0003156:	f7 f7                	div    edi
c0003158:	89 d5                	mov    ebp,edx
c000315a:	31 d2                	xor    edx,edx
c000315c:	45                   	inc    ebp
c000315d:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003161:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003164:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003167:	89 c2                	mov    edx,eax
c0003169:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316c:	c1 ea 02             	shr    edx,0x2
c000316f:	83 e2 c0             	and    edx,0xffffffc0
c0003172:	09 ea                	or     edx,ebp
c0003174:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003177:	31 d2                	xor    edx,edx
c0003179:	f7 f7                	div    edi
c000317b:	89 d6                	mov    esi,edx
c000317d:	31 d2                	xor    edx,edx
c000317f:	46                   	inc    esi
c0003180:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003184:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003187:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c000318a:	89 c7                	mov    edi,eax
c000318c:	c1 ef 02             	shr    edi,0x2
c000318f:	83 e7 c0             	and    edi,0xffffffc0
c0003192:	09 fe                	or     esi,edi
c0003194:	89 f2                	mov    edx,esi
c0003196:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003199:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c000319e:	0f 85 0c ff ff ff    	jne    c00030b0 <create_partition+0xa2>
c00031a4:	e9 0b ff ff ff       	jmp    c00030b4 <create_partition+0xa6>
c00031a9:	b8 01 00 00 00       	mov    eax,0x1
c00031ae:	83 c4 3c             	add    esp,0x3c
c00031b1:	5b                   	pop    ebx
c00031b2:	5e                   	pop    esi
c00031b3:	5f                   	pop    edi
c00031b4:	5d                   	pop    ebp
c00031b5:	c3                   	ret    

c00031b6 <get_fileinfo>:
c00031b6:	55                   	push   ebp
c00031b7:	57                   	push   edi
c00031b8:	56                   	push   esi
c00031b9:	53                   	push   ebx
c00031ba:	83 ec 1c             	sub    esp,0x1c
c00031bd:	8b 30                	mov    esi,DWORD PTR [eax]
c00031bf:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031c3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031c7:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031cb:	0f 84 d3 01 00 00    	je     c00033a4 <get_fileinfo+0x1ee>
c00031d1:	89 d3                	mov    ebx,edx
c00031d3:	89 c6                	mov    esi,eax
c00031d5:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031d9:	74 72                	je     c000324d <get_fileinfo+0x97>
c00031db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00031e3:	31 ed                	xor    ebp,ebp
c00031e5:	31 ff                	xor    edi,edi
c00031e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00031ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031f2:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031f6:	89 c2                	mov    edx,eax
c00031f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031fc:	85 c0                	test   eax,eax
c00031fe:	74 41                	je     c0003241 <get_fileinfo+0x8b>
c0003200:	0f b7 c5             	movzx  eax,bp
c0003203:	85 c0                	test   eax,eax
c0003205:	75 0d                	jne    c0003214 <get_fileinfo+0x5e>
c0003207:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000320d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003212:	76 22                	jbe    c0003236 <get_fileinfo+0x80>
c0003214:	c1 e0 10             	shl    eax,0x10
c0003217:	b9 ff 00 00 00       	mov    ecx,0xff
c000321c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003220:	29 f9                	sub    ecx,edi
c0003222:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003226:	e8 f3 ee ff ff       	call   c000211e <put_utf>
c000322b:	0f b6 c0             	movzx  eax,al
c000322e:	85 c0                	test   eax,eax
c0003230:	74 0d                	je     c000323f <get_fileinfo+0x89>
c0003232:	01 c7                	add    edi,eax
c0003234:	31 d2                	xor    edx,edx
c0003236:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000323b:	89 d5                	mov    ebp,edx
c000323d:	eb a8                	jmp    c00031e7 <get_fileinfo+0x31>
c000323f:	31 ff                	xor    edi,edi
c0003241:	66 85 ed             	test   bp,bp
c0003244:	74 02                	je     c0003248 <get_fileinfo+0x92>
c0003246:	31 ff                	xor    edi,edi
c0003248:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c000324d:	31 ff                	xor    edi,edi
c000324f:	31 c9                	xor    ecx,ecx
c0003251:	83 f9 0a             	cmp    ecx,0xa
c0003254:	0f 87 ac 00 00 00    	ja     c0003306 <get_fileinfo+0x150>
c000325a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000325d:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003260:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003264:	89 c2                	mov    edx,eax
c0003266:	83 f8 20             	cmp    eax,0x20
c0003269:	0f 84 90 00 00 00    	je     c00032ff <get_fileinfo+0x149>
c000326f:	83 f8 05             	cmp    eax,0x5
c0003272:	75 05                	jne    c0003279 <get_fileinfo+0xc3>
c0003274:	ba e5 00 00 00       	mov    edx,0xe5
c0003279:	83 ff 0b             	cmp    edi,0xb
c000327c:	77 0b                	ja     c0003289 <get_fileinfo+0xd3>
c000327e:	83 fd 09             	cmp    ebp,0x9
c0003281:	75 06                	jne    c0003289 <get_fileinfo+0xd3>
c0003283:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003288:	47                   	inc    edi
c0003289:	0f b7 c2             	movzx  eax,dx
c000328c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003290:	e8 ab ed ff ff       	call   c0002040 <dbc_1st>
c0003295:	85 c0                	test   eax,eax
c0003297:	74 2f                	je     c00032c8 <get_fileinfo+0x112>
c0003299:	83 fd 08             	cmp    ebp,0x8
c000329c:	74 2a                	je     c00032c8 <get_fileinfo+0x112>
c000329e:	83 fd 0b             	cmp    ebp,0xb
c00032a1:	74 25                	je     c00032c8 <get_fileinfo+0x112>
c00032a3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032a6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00032ae:	e8 90 ed ff ff       	call   c0002043 <dbc_2nd>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <get_fileinfo+0x112>
c00032b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032bb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00032c0:	c1 e0 08             	shl    eax,0x8
c00032c3:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032c6:	09 c2                	or     edx,eax
c00032c8:	0f b7 d2             	movzx  edx,dx
c00032cb:	50                   	push   eax
c00032cc:	50                   	push   eax
c00032cd:	68 b5 01 00 00       	push   0x1b5
c00032d2:	52                   	push   edx
c00032d3:	e8 00 2c 00 00       	call   c0005ed8 <ff_oem2uni>
c00032d8:	83 c4 10             	add    esp,0x10
c00032db:	0f b7 c0             	movzx  eax,ax
c00032de:	85 c0                	test   eax,eax
c00032e0:	75 04                	jne    c00032e6 <get_fileinfo+0x130>
c00032e2:	31 ff                	xor    edi,edi
c00032e4:	eb 20                	jmp    c0003306 <get_fileinfo+0x150>
c00032e6:	b9 0c 00 00 00       	mov    ecx,0xc
c00032eb:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032ef:	29 f9                	sub    ecx,edi
c00032f1:	e8 28 ee ff ff       	call   c000211e <put_utf>
c00032f6:	0f b6 c0             	movzx  eax,al
c00032f9:	85 c0                	test   eax,eax
c00032fb:	74 e5                	je     c00032e2 <get_fileinfo+0x12c>
c00032fd:	01 c7                	add    edi,eax
c00032ff:	89 e9                	mov    ecx,ebp
c0003301:	e9 4b ff ff ff       	jmp    c0003251 <get_fileinfo+0x9b>
c0003306:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000330b:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000330f:	75 5f                	jne    c0003370 <get_fileinfo+0x1ba>
c0003311:	85 ff                	test   edi,edi
c0003313:	75 0b                	jne    c0003320 <get_fileinfo+0x16a>
c0003315:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003319:	ba 01 00 00 00       	mov    edx,0x1
c000331e:	eb 3e                	jmp    c000335e <get_fileinfo+0x1a8>
c0003320:	bf 08 00 00 00       	mov    edi,0x8
c0003325:	31 d2                	xor    edx,edx
c0003327:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000332d:	84 c0                	test   al,al
c000332f:	74 2d                	je     c000335e <get_fileinfo+0x1a8>
c0003331:	66 83 f8 2e          	cmp    ax,0x2e
c0003335:	74 1b                	je     c0003352 <get_fileinfo+0x19c>
c0003337:	8d 48 bf             	lea    ecx,[eax-0x41]
c000333a:	66 83 f9 19          	cmp    cx,0x19
c000333e:	77 17                	ja     c0003357 <get_fileinfo+0x1a1>
c0003340:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003343:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003346:	21 f9                	and    ecx,edi
c0003348:	80 e1 18             	and    cl,0x18
c000334b:	74 0a                	je     c0003357 <get_fileinfo+0x1a1>
c000334d:	83 c0 20             	add    eax,0x20
c0003350:	eb 05                	jmp    c0003357 <get_fileinfo+0x1a1>
c0003352:	bf 10 00 00 00       	mov    edi,0x10
c0003357:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000335b:	42                   	inc    edx
c000335c:	eb c9                	jmp    c0003327 <get_fileinfo+0x171>
c000335e:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003363:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003366:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000336a:	75 04                	jne    c0003370 <get_fileinfo+0x1ba>
c000336c:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003370:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003373:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003376:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003379:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000337c:	83 c0 1c             	add    eax,0x1c
c000337f:	e8 49 ec ff ff       	call   c0001fcd <ld_dword>
c0003384:	89 03                	mov    DWORD PTR [ebx],eax
c0003386:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003389:	83 c0 16             	add    eax,0x16
c000338c:	e8 2f ec ff ff       	call   c0001fc0 <ld_word>
c0003391:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003395:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003398:	83 c0 18             	add    eax,0x18
c000339b:	e8 20 ec ff ff       	call   c0001fc0 <ld_word>
c00033a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <ld_clust.isra.0>:
c00033ac:	56                   	push   esi
c00033ad:	89 c6                	mov    esi,eax
c00033af:	53                   	push   ebx
c00033b0:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033b3:	89 d3                	mov    ebx,edx
c00033b5:	e8 06 ec ff ff       	call   c0001fc0 <ld_word>
c00033ba:	0f b7 c8             	movzx  ecx,ax
c00033bd:	89 f0                	mov    eax,esi
c00033bf:	3c 03                	cmp    al,0x3
c00033c1:	75 0d                	jne    c00033d0 <ld_clust.isra.0+0x24>
c00033c3:	8d 43 14             	lea    eax,[ebx+0x14]
c00033c6:	e8 f5 eb ff ff       	call   c0001fc0 <ld_word>
c00033cb:	c1 e0 10             	shl    eax,0x10
c00033ce:	09 c1                	or     ecx,eax
c00033d0:	89 c8                	mov    eax,ecx
c00033d2:	5b                   	pop    ebx
c00033d3:	5e                   	pop    esi
c00033d4:	c3                   	ret    

c00033d5 <st_clust.isra.1>:
c00033d5:	56                   	push   esi
c00033d6:	89 c6                	mov    esi,eax
c00033d8:	53                   	push   ebx
c00033d9:	89 d3                	mov    ebx,edx
c00033db:	0f b7 d1             	movzx  edx,cx
c00033de:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033e1:	e8 ff eb ff ff       	call   c0001fe5 <st_word>
c00033e6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033e9:	75 0f                	jne    c00033fa <st_clust.isra.1+0x25>
c00033eb:	c1 e9 10             	shr    ecx,0x10
c00033ee:	8d 43 14             	lea    eax,[ebx+0x14]
c00033f1:	89 ca                	mov    edx,ecx
c00033f3:	5b                   	pop    ebx
c00033f4:	5e                   	pop    esi
c00033f5:	e9 eb eb ff ff       	jmp    c0001fe5 <st_word>
c00033fa:	5b                   	pop    ebx
c00033fb:	5e                   	pop    esi
c00033fc:	c3                   	ret    

c00033fd <get_fat.isra.2>:
c00033fd:	b9 01 00 00 00       	mov    ecx,0x1
c0003402:	83 fa 01             	cmp    edx,0x1
c0003405:	0f 86 f3 00 00 00    	jbe    c00034fe <get_fat.isra.2+0x101>
c000340b:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000340e:	0f 83 ea 00 00 00    	jae    c00034fe <get_fat.isra.2+0x101>
c0003414:	55                   	push   ebp
c0003415:	57                   	push   edi
c0003416:	89 c7                	mov    edi,eax
c0003418:	56                   	push   esi
c0003419:	89 d6                	mov    esi,edx
c000341b:	53                   	push   ebx
c000341c:	83 ec 0c             	sub    esp,0xc
c000341f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003422:	83 f8 02             	cmp    eax,0x2
c0003425:	74 78                	je     c000349f <get_fat.isra.2+0xa2>
c0003427:	83 f8 03             	cmp    eax,0x3
c000342a:	0f 84 96 00 00 00    	je     c00034c6 <get_fat.isra.2+0xc9>
c0003430:	48                   	dec    eax
c0003431:	0f 85 bd 00 00 00    	jne    c00034f4 <get_fat.isra.2+0xf7>
c0003437:	89 d3                	mov    ebx,edx
c0003439:	89 f8                	mov    eax,edi
c000343b:	d1 eb                	shr    ebx,1
c000343d:	01 d3                	add    ebx,edx
c000343f:	89 da                	mov    edx,ebx
c0003441:	c1 ea 09             	shr    edx,0x9
c0003444:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003447:	e8 db f0 ff ff       	call   c0002527 <move_window>
c000344c:	85 c0                	test   eax,eax
c000344e:	74 08                	je     c0003458 <get_fat.isra.2+0x5b>
c0003450:	83 c9 ff             	or     ecx,0xffffffff
c0003453:	e9 9c 00 00 00       	jmp    c00034f4 <get_fat.isra.2+0xf7>
c0003458:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000345b:	89 f8                	mov    eax,edi
c000345d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003463:	89 ea                	mov    edx,ebp
c0003465:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003469:	c1 ea 09             	shr    edx,0x9
c000346c:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000346f:	e8 b3 f0 ff ff       	call   c0002527 <move_window>
c0003474:	85 c0                	test   eax,eax
c0003476:	75 d8                	jne    c0003450 <get_fat.isra.2+0x53>
c0003478:	0f b6 c3             	movzx  eax,bl
c000347b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003481:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003486:	c1 e3 08             	shl    ebx,0x8
c0003489:	09 c3                	or     ebx,eax
c000348b:	89 d9                	mov    ecx,ebx
c000348d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003493:	83 e6 01             	and    esi,0x1
c0003496:	74 5c                	je     c00034f4 <get_fat.isra.2+0xf7>
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	c1 e9 04             	shr    ecx,0x4
c000349d:	eb 55                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c000349f:	c1 ea 08             	shr    edx,0x8
c00034a2:	89 f8                	mov    eax,edi
c00034a4:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034a7:	e8 7b f0 ff ff       	call   c0002527 <move_window>
c00034ac:	85 c0                	test   eax,eax
c00034ae:	75 a0                	jne    c0003450 <get_fat.isra.2+0x53>
c00034b0:	01 f6                	add    esi,esi
c00034b2:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00034b8:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034bc:	e8 ff ea ff ff       	call   c0001fc0 <ld_word>
c00034c1:	0f b7 c8             	movzx  ecx,ax
c00034c4:	eb 2e                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c00034c6:	c1 ea 07             	shr    edx,0x7
c00034c9:	89 f8                	mov    eax,edi
c00034cb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034ce:	e8 54 f0 ff ff       	call   c0002527 <move_window>
c00034d3:	85 c0                	test   eax,eax
c00034d5:	0f 85 75 ff ff ff    	jne    c0003450 <get_fat.isra.2+0x53>
c00034db:	c1 e6 02             	shl    esi,0x2
c00034de:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00034e4:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034e8:	e8 e0 ea ff ff       	call   c0001fcd <ld_dword>
c00034ed:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034f2:	89 c1                	mov    ecx,eax
c00034f4:	83 c4 0c             	add    esp,0xc
c00034f7:	89 c8                	mov    eax,ecx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    
c00034fe:	89 c8                	mov    eax,ecx
c0003500:	c3                   	ret    

c0003501 <dir_sdi>:
c0003501:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003507:	0f 87 b6 00 00 00    	ja     c00035c3 <dir_sdi+0xc2>
c000350d:	55                   	push   ebp
c000350e:	57                   	push   edi
c000350f:	56                   	push   esi
c0003510:	53                   	push   ebx
c0003511:	89 d3                	mov    ebx,edx
c0003513:	83 ec 1c             	sub    esp,0x1c
c0003516:	f6 c2 1f             	test   dl,0x1f
c0003519:	74 0a                	je     c0003525 <dir_sdi+0x24>
c000351b:	b8 02 00 00 00       	mov    eax,0x2
c0003520:	e9 96 00 00 00       	jmp    c00035bb <dir_sdi+0xba>
c0003525:	89 c6                	mov    esi,eax
c0003527:	8b 38                	mov    edi,DWORD PTR [eax]
c0003529:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000352c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000352f:	85 c9                	test   ecx,ecx
c0003531:	75 23                	jne    c0003556 <dir_sdi+0x55>
c0003533:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003536:	76 07                	jbe    c000353f <dir_sdi+0x3e>
c0003538:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000353b:	85 c0                	test   eax,eax
c000353d:	75 15                	jne    c0003554 <dir_sdi+0x53>
c000353f:	89 da                	mov    edx,ebx
c0003541:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003545:	c1 ea 05             	shr    edx,0x5
c0003548:	39 c2                	cmp    edx,eax
c000354a:	73 cf                	jae    c000351b <dir_sdi+0x1a>
c000354c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000354f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003552:	eb 3d                	jmp    c0003591 <dir_sdi+0x90>
c0003554:	89 c1                	mov    ecx,eax
c0003556:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000355a:	c1 e5 09             	shl    ebp,0x9
c000355d:	89 ca                	mov    edx,ecx
c000355f:	39 eb                	cmp    ebx,ebp
c0003561:	72 1c                	jb     c000357f <dir_sdi+0x7e>
c0003563:	8b 06                	mov    eax,DWORD PTR [esi]
c0003565:	e8 93 fe ff ff       	call   c00033fd <get_fat.isra.2>
c000356a:	89 c1                	mov    ecx,eax
c000356c:	83 f8 ff             	cmp    eax,0xffffffff
c000356f:	74 45                	je     c00035b6 <dir_sdi+0xb5>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	76 a5                	jbe    c000351b <dir_sdi+0x1a>
c0003576:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003579:	76 a0                	jbe    c000351b <dir_sdi+0x1a>
c000357b:	29 eb                	sub    ebx,ebp
c000357d:	eb de                	jmp    c000355d <dir_sdi+0x5c>
c000357f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003583:	89 f8                	mov    eax,edi
c0003585:	e8 8d ec ff ff       	call   c0002217 <clst2sect>
c000358a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000358e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003591:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003594:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003597:	85 d2                	test   edx,edx
c0003599:	74 80                	je     c000351b <dir_sdi+0x1a>
c000359b:	89 d8                	mov    eax,ebx
c000359d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035a3:	c1 e8 09             	shr    eax,0x9
c00035a6:	01 d0                	add    eax,edx
c00035a8:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035ab:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00035af:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035b2:	31 c0                	xor    eax,eax
c00035b4:	eb 05                	jmp    c00035bb <dir_sdi+0xba>
c00035b6:	b8 01 00 00 00       	mov    eax,0x1
c00035bb:	83 c4 1c             	add    esp,0x1c
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    
c00035c3:	b8 02 00 00 00       	mov    eax,0x2
c00035c8:	c3                   	ret    

c00035c9 <create_chain>:
c00035c9:	55                   	push   ebp
c00035ca:	89 c5                	mov    ebp,eax
c00035cc:	57                   	push   edi
c00035cd:	89 d7                	mov    edi,edx
c00035cf:	56                   	push   esi
c00035d0:	53                   	push   ebx
c00035d1:	83 ec 1c             	sub    esp,0x1c
c00035d4:	85 d2                	test   edx,edx
c00035d6:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d8:	75 0e                	jne    c00035e8 <create_chain+0x1f>
c00035da:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00035dd:	85 c9                	test   ecx,ecx
c00035df:	74 34                	je     c0003615 <create_chain+0x4c>
c00035e1:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00035e4:	77 34                	ja     c000361a <create_chain+0x51>
c00035e6:	eb 2d                	jmp    c0003615 <create_chain+0x4c>
c00035e8:	89 f0                	mov    eax,esi
c00035ea:	e8 0e fe ff ff       	call   c00033fd <get_fat.isra.2>
c00035ef:	89 c3                	mov    ebx,eax
c00035f1:	83 f8 01             	cmp    eax,0x1
c00035f4:	77 0a                	ja     c0003600 <create_chain+0x37>
c00035f6:	bb 01 00 00 00       	mov    ebx,0x1
c00035fb:	e9 fe 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003600:	83 f8 ff             	cmp    eax,0xffffffff
c0003603:	0f 84 f2 00 00 00    	je     c00036fb <create_chain+0x132>
c0003609:	89 f9                	mov    ecx,edi
c000360b:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000360e:	76 0a                	jbe    c000361a <create_chain+0x51>
c0003610:	e9 e9 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003615:	b9 01 00 00 00       	mov    ecx,0x1
c000361a:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000361e:	75 07                	jne    c0003627 <create_chain+0x5e>
c0003620:	31 db                	xor    ebx,ebx
c0003622:	e9 d7 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003627:	39 f9                	cmp    ecx,edi
c0003629:	75 46                	jne    c0003671 <create_chain+0xa8>
c000362b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000362e:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003631:	77 05                	ja     c0003638 <create_chain+0x6f>
c0003633:	bb 02 00 00 00       	mov    ebx,0x2
c0003638:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000363c:	89 da                	mov    edx,ebx
c000363e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003641:	e8 b7 fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003646:	83 f8 01             	cmp    eax,0x1
c0003649:	74 ab                	je     c00035f6 <create_chain+0x2d>
c000364b:	83 f8 ff             	cmp    eax,0xffffffff
c000364e:	0f 84 a7 00 00 00    	je     c00036fb <create_chain+0x132>
c0003654:	85 c0                	test   eax,eax
c0003656:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000365a:	74 11                	je     c000366d <create_chain+0xa4>
c000365c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000365f:	83 f8 01             	cmp    eax,0x1
c0003662:	76 0d                	jbe    c0003671 <create_chain+0xa8>
c0003664:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003667:	73 08                	jae    c0003671 <create_chain+0xa8>
c0003669:	89 c1                	mov    ecx,eax
c000366b:	eb 04                	jmp    c0003671 <create_chain+0xa8>
c000366d:	85 db                	test   ebx,ebx
c000366f:	75 3d                	jne    c00036ae <create_chain+0xe5>
c0003671:	89 cb                	mov    ebx,ecx
c0003673:	43                   	inc    ebx
c0003674:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003677:	77 0a                	ja     c0003683 <create_chain+0xba>
c0003679:	83 f9 01             	cmp    ecx,0x1
c000367c:	76 a2                	jbe    c0003620 <create_chain+0x57>
c000367e:	bb 02 00 00 00       	mov    ebx,0x2
c0003683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003687:	89 da                	mov    edx,ebx
c0003689:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000368c:	e8 6c fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003691:	85 c0                	test   eax,eax
c0003693:	74 19                	je     c00036ae <create_chain+0xe5>
c0003695:	83 f8 01             	cmp    eax,0x1
c0003698:	0f 84 58 ff ff ff    	je     c00035f6 <create_chain+0x2d>
c000369e:	40                   	inc    eax
c000369f:	74 5a                	je     c00036fb <create_chain+0x132>
c00036a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036a5:	39 cb                	cmp    ebx,ecx
c00036a7:	75 ca                	jne    c0003673 <create_chain+0xaa>
c00036a9:	e9 72 ff ff ff       	jmp    c0003620 <create_chain+0x57>
c00036ae:	83 c9 ff             	or     ecx,0xffffffff
c00036b1:	89 da                	mov    edx,ebx
c00036b3:	89 f0                	mov    eax,esi
c00036b5:	e8 b1 f2 ff ff       	call   c000296b <put_fat>
c00036ba:	85 c0                	test   eax,eax
c00036bc:	75 36                	jne    c00036f4 <create_chain+0x12b>
c00036be:	85 ff                	test   edi,edi
c00036c0:	75 16                	jne    c00036d8 <create_chain+0x10f>
c00036c2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00036c5:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00036c8:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00036cb:	8d 57 fe             	lea    edx,[edi-0x2]
c00036ce:	39 d0                	cmp    eax,edx
c00036d0:	77 17                	ja     c00036e9 <create_chain+0x120>
c00036d2:	48                   	dec    eax
c00036d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00036d6:	eb 11                	jmp    c00036e9 <create_chain+0x120>
c00036d8:	89 d9                	mov    ecx,ebx
c00036da:	89 fa                	mov    edx,edi
c00036dc:	89 f0                	mov    eax,esi
c00036de:	e8 88 f2 ff ff       	call   c000296b <put_fat>
c00036e3:	85 c0                	test   eax,eax
c00036e5:	74 db                	je     c00036c2 <create_chain+0xf9>
c00036e7:	eb 0b                	jmp    c00036f4 <create_chain+0x12b>
c00036e9:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00036ec:	83 c8 01             	or     eax,0x1
c00036ef:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00036f2:	eb 0a                	jmp    c00036fe <create_chain+0x135>
c00036f4:	48                   	dec    eax
c00036f5:	0f 85 fb fe ff ff    	jne    c00035f6 <create_chain+0x2d>
c00036fb:	83 cb ff             	or     ebx,0xffffffff
c00036fe:	83 c4 1c             	add    esp,0x1c
c0003701:	89 d8                	mov    eax,ebx
c0003703:	5b                   	pop    ebx
c0003704:	5e                   	pop    esi
c0003705:	5f                   	pop    edi
c0003706:	5d                   	pop    ebp
c0003707:	c3                   	ret    

c0003708 <remove_chain>:
c0003708:	55                   	push   ebp
c0003709:	57                   	push   edi
c000370a:	56                   	push   esi
c000370b:	89 d6                	mov    esi,edx
c000370d:	53                   	push   ebx
c000370e:	83 ec 0c             	sub    esp,0xc
c0003711:	83 fa 01             	cmp    edx,0x1
c0003714:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003716:	76 6a                	jbe    c0003782 <remove_chain+0x7a>
c0003718:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000371b:	76 65                	jbe    c0003782 <remove_chain+0x7a>
c000371d:	89 c5                	mov    ebp,eax
c000371f:	89 ca                	mov    edx,ecx
c0003721:	85 c9                	test   ecx,ecx
c0003723:	74 0e                	je     c0003733 <remove_chain+0x2b>
c0003725:	83 c9 ff             	or     ecx,0xffffffff
c0003728:	89 d8                	mov    eax,ebx
c000372a:	e8 3c f2 ff ff       	call   c000296b <put_fat>
c000372f:	85 c0                	test   eax,eax
c0003731:	75 5b                	jne    c000378e <remove_chain+0x86>
c0003733:	89 f2                	mov    edx,esi
c0003735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003738:	e8 c0 fc ff ff       	call   c00033fd <get_fat.isra.2>
c000373d:	89 c7                	mov    edi,eax
c000373f:	85 c0                	test   eax,eax
c0003741:	75 04                	jne    c0003747 <remove_chain+0x3f>
c0003743:	31 c0                	xor    eax,eax
c0003745:	eb 47                	jmp    c000378e <remove_chain+0x86>
c0003747:	83 f8 01             	cmp    eax,0x1
c000374a:	74 36                	je     c0003782 <remove_chain+0x7a>
c000374c:	83 f8 ff             	cmp    eax,0xffffffff
c000374f:	74 38                	je     c0003789 <remove_chain+0x81>
c0003751:	31 c9                	xor    ecx,ecx
c0003753:	89 f2                	mov    edx,esi
c0003755:	89 d8                	mov    eax,ebx
c0003757:	e8 0f f2 ff ff       	call   c000296b <put_fat>
c000375c:	85 c0                	test   eax,eax
c000375e:	75 2e                	jne    c000378e <remove_chain+0x86>
c0003760:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003763:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003766:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003769:	39 c8                	cmp    eax,ecx
c000376b:	73 0d                	jae    c000377a <remove_chain+0x72>
c000376d:	40                   	inc    eax
c000376e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003771:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003774:	83 c8 01             	or     eax,0x1
c0003777:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000377a:	89 fe                	mov    esi,edi
c000377c:	39 fa                	cmp    edx,edi
c000377e:	77 b3                	ja     c0003733 <remove_chain+0x2b>
c0003780:	eb c1                	jmp    c0003743 <remove_chain+0x3b>
c0003782:	b8 02 00 00 00       	mov    eax,0x2
c0003787:	eb 05                	jmp    c000378e <remove_chain+0x86>
c0003789:	b8 01 00 00 00       	mov    eax,0x1
c000378e:	83 c4 0c             	add    esp,0xc
c0003791:	5b                   	pop    ebx
c0003792:	5e                   	pop    esi
c0003793:	5f                   	pop    edi
c0003794:	5d                   	pop    ebp
c0003795:	c3                   	ret    

c0003796 <dir_next>:
c0003796:	55                   	push   ebp
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	83 ec 1c             	sub    esp,0x1c
c000379d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a2:	83 c7 20             	add    edi,0x20
c00037a5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037ab:	76 07                	jbe    c00037b4 <dir_next+0x1e>
c00037ad:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037b4:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037b7:	b9 04 00 00 00       	mov    ecx,0x4
c00037bc:	85 f6                	test   esi,esi
c00037be:	0f 84 cd 00 00 00    	je     c0003891 <dir_next+0xfb>
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	89 d1                	mov    ecx,edx
c00037c8:	89 f8                	mov    eax,edi
c00037ca:	25 ff 01 00 00       	and    eax,0x1ff
c00037cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037d3:	0f 85 a8 00 00 00    	jne    c0003881 <dir_next+0xeb>
c00037d9:	46                   	inc    esi
c00037da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037dd:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037e0:	85 d2                	test   edx,edx
c00037e2:	75 22                	jne    c0003806 <dir_next+0x70>
c00037e4:	89 fa                	mov    edx,edi
c00037e6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037ea:	c1 ea 05             	shr    edx,0x5
c00037ed:	39 c2                	cmp    edx,eax
c00037ef:	0f 82 8c 00 00 00    	jb     c0003881 <dir_next+0xeb>
c00037f5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037fc:	b9 04 00 00 00       	mov    ecx,0x4
c0003801:	e9 8b 00 00 00       	jmp    c0003891 <dir_next+0xfb>
c0003806:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000380a:	89 fe                	mov    esi,edi
c000380c:	48                   	dec    eax
c000380d:	c1 ee 09             	shr    esi,0x9
c0003810:	85 f0                	test   eax,esi
c0003812:	75 6d                	jne    c0003881 <dir_next+0xeb>
c0003814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003818:	89 e8                	mov    eax,ebp
c000381a:	e8 de fb ff ff       	call   c00033fd <get_fat.isra.2>
c000381f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003823:	89 c6                	mov    esi,eax
c0003825:	83 f8 01             	cmp    eax,0x1
c0003828:	77 07                	ja     c0003831 <dir_next+0x9b>
c000382a:	b9 02 00 00 00       	mov    ecx,0x2
c000382f:	eb 60                	jmp    c0003891 <dir_next+0xfb>
c0003831:	83 f8 ff             	cmp    eax,0xffffffff
c0003834:	75 07                	jne    c000383d <dir_next+0xa7>
c0003836:	b9 01 00 00 00       	mov    ecx,0x1
c000383b:	eb 54                	jmp    c0003891 <dir_next+0xfb>
c000383d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003840:	77 30                	ja     c0003872 <dir_next+0xdc>
c0003842:	85 c9                	test   ecx,ecx
c0003844:	74 af                	je     c00037f5 <dir_next+0x5f>
c0003846:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 79 fd ff ff       	call   c00035c9 <create_chain>
c0003850:	b9 07 00 00 00       	mov    ecx,0x7
c0003855:	89 c6                	mov    esi,eax
c0003857:	85 c0                	test   eax,eax
c0003859:	74 36                	je     c0003891 <dir_next+0xfb>
c000385b:	83 f8 01             	cmp    eax,0x1
c000385e:	74 ca                	je     c000382a <dir_next+0x94>
c0003860:	83 f8 ff             	cmp    eax,0xffffffff
c0003863:	74 d1                	je     c0003836 <dir_next+0xa0>
c0003865:	89 c2                	mov    edx,eax
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 54 f2 ff ff       	call   c0002ac2 <dir_clear>
c000386e:	85 c0                	test   eax,eax
c0003870:	75 c4                	jne    c0003836 <dir_next+0xa0>
c0003872:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003875:	89 f2                	mov    edx,esi
c0003877:	89 e8                	mov    eax,ebp
c0003879:	e8 99 e9 ff ff       	call   c0002217 <clst2sect>
c000387e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003881:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003885:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003888:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c000388c:	31 c9                	xor    ecx,ecx
c000388e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003891:	83 c4 1c             	add    esp,0x1c
c0003894:	89 c8                	mov    eax,ecx
c0003896:	5b                   	pop    ebx
c0003897:	5e                   	pop    esi
c0003898:	5f                   	pop    edi
c0003899:	5d                   	pop    ebp
c000389a:	c3                   	ret    

c000389b <dir_alloc>:
c000389b:	55                   	push   ebp
c000389c:	89 c5                	mov    ebp,eax
c000389e:	57                   	push   edi
c000389f:	89 d7                	mov    edi,edx
c00038a1:	56                   	push   esi
c00038a2:	31 d2                	xor    edx,edx
c00038a4:	53                   	push   ebx
c00038a5:	83 ec 0c             	sub    esp,0xc
c00038a8:	8b 30                	mov    esi,DWORD PTR [eax]
c00038aa:	e8 52 fc ff ff       	call   c0003501 <dir_sdi>
c00038af:	85 c0                	test   eax,eax
c00038b1:	75 3b                	jne    c00038ee <dir_alloc+0x53>
c00038b3:	31 db                	xor    ebx,ebx
c00038b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038b8:	89 f0                	mov    eax,esi
c00038ba:	e8 68 ec ff ff       	call   c0002527 <move_window>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2b                	jne    c00038ee <dir_alloc+0x53>
c00038c3:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038c6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038c9:	85 d2                	test   edx,edx
c00038cb:	74 08                	je     c00038d5 <dir_alloc+0x3a>
c00038cd:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00038d3:	75 07                	jne    c00038dc <dir_alloc+0x41>
c00038d5:	43                   	inc    ebx
c00038d6:	39 fb                	cmp    ebx,edi
c00038d8:	75 04                	jne    c00038de <dir_alloc+0x43>
c00038da:	eb 1c                	jmp    c00038f8 <dir_alloc+0x5d>
c00038dc:	31 db                	xor    ebx,ebx
c00038de:	ba 01 00 00 00       	mov    edx,0x1
c00038e3:	89 e8                	mov    eax,ebp
c00038e5:	e8 ac fe ff ff       	call   c0003796 <dir_next>
c00038ea:	85 c0                	test   eax,eax
c00038ec:	74 c7                	je     c00038b5 <dir_alloc+0x1a>
c00038ee:	83 f8 04             	cmp    eax,0x4
c00038f1:	75 05                	jne    c00038f8 <dir_alloc+0x5d>
c00038f3:	b8 07 00 00 00       	mov    eax,0x7
c00038f8:	83 c4 0c             	add    esp,0xc
c00038fb:	5b                   	pop    ebx
c00038fc:	5e                   	pop    esi
c00038fd:	5f                   	pop    edi
c00038fe:	5d                   	pop    ebp
c00038ff:	c3                   	ret    

c0003900 <dir_read>:
c0003900:	55                   	push   ebp
c0003901:	57                   	push   edi
c0003902:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003907:	56                   	push   esi
c0003908:	be 04 00 00 00       	mov    esi,0x4
c000390d:	53                   	push   ebx
c000390e:	89 c3                	mov    ebx,eax
c0003910:	83 ec 1c             	sub    esp,0x1c
c0003913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003917:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003919:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000391e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003921:	85 d2                	test   edx,edx
c0003923:	0f 84 e3 00 00 00    	je     c0003a0c <dir_read+0x10c>
c0003929:	89 e8                	mov    eax,ebp
c000392b:	e8 f7 eb ff ff       	call   c0002527 <move_window>
c0003930:	89 c6                	mov    esi,eax
c0003932:	85 c0                	test   eax,eax
c0003934:	0f 85 dd 00 00 00    	jne    c0003a17 <dir_read+0x117>
c000393a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000393d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003940:	88 04 24             	mov    BYTE PTR [esp],al
c0003943:	85 c0                	test   eax,eax
c0003945:	0f 84 c7 00 00 00    	je     c0003a12 <dir_read+0x112>
c000394b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000394e:	83 e1 3f             	and    ecx,0x3f
c0003951:	83 f8 2e             	cmp    eax,0x2e
c0003954:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003957:	0f 84 95 00 00 00    	je     c00039f2 <dir_read+0xf2>
c000395d:	3d e5 00 00 00       	cmp    eax,0xe5
c0003962:	0f 84 8a 00 00 00    	je     c00039f2 <dir_read+0xf2>
c0003968:	0f b6 c9             	movzx  ecx,cl
c000396b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000396f:	83 e1 df             	and    ecx,0xffffffdf
c0003972:	83 f9 08             	cmp    ecx,0x8
c0003975:	0f 94 c1             	sete   cl
c0003978:	0f b6 c9             	movzx  ecx,cl
c000397b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000397f:	75 71                	jne    c00039f2 <dir_read+0xf2>
c0003981:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003986:	75 4a                	jne    c00039d2 <dir_read+0xd2>
c0003988:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c000398c:	74 16                	je     c00039a4 <dir_read+0xa4>
c000398e:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003991:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003998:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000399c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000399f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039a2:	eb 0e                	jmp    c00039b2 <dir_read+0xb2>
c00039a4:	89 f9                	mov    ecx,edi
c00039a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ab:	0f b6 c9             	movzx  ecx,cl
c00039ae:	39 c1                	cmp    ecx,eax
c00039b0:	75 45                	jne    c00039f7 <dir_read+0xf7>
c00039b2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039bb:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039be:	75 37                	jne    c00039f7 <dir_read+0xf7>
c00039c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039c3:	e8 6c e8 ff ff       	call   c0002234 <pick_lfn>
c00039c8:	85 c0                	test   eax,eax
c00039ca:	74 2b                	je     c00039f7 <dir_read+0xf7>
c00039cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00039cf:	4f                   	dec    edi
c00039d0:	eb 25                	jmp    c00039f7 <dir_read+0xf7>
c00039d2:	89 f8                	mov    eax,edi
c00039d4:	84 c0                	test   al,al
c00039d6:	75 11                	jne    c00039e9 <dir_read+0xe9>
c00039d8:	89 d0                	mov    eax,edx
c00039da:	e8 32 ea ff ff       	call   c0002411 <sum_sfn>
c00039df:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039e3:	75 04                	jne    c00039e9 <dir_read+0xe9>
c00039e5:	31 f6                	xor    esi,esi
c00039e7:	eb 35                	jmp    c0003a1e <dir_read+0x11e>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	eb 2c                	jmp    c0003a1e <dir_read+0x11e>
c00039f2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039f7:	31 d2                	xor    edx,edx
c00039f9:	89 d8                	mov    eax,ebx
c00039fb:	e8 96 fd ff ff       	call   c0003796 <dir_next>
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	85 c0                	test   eax,eax
c0003a04:	0f 84 14 ff ff ff    	je     c000391e <dir_read+0x1e>
c0003a0a:	eb 0b                	jmp    c0003a17 <dir_read+0x117>
c0003a0c:	85 f6                	test   esi,esi
c0003a0e:	74 d5                	je     c00039e5 <dir_read+0xe5>
c0003a10:	eb 05                	jmp    c0003a17 <dir_read+0x117>
c0003a12:	be 04 00 00 00       	mov    esi,0x4
c0003a17:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a1e:	83 c4 1c             	add    esp,0x1c
c0003a21:	89 f0                	mov    eax,esi
c0003a23:	5b                   	pop    ebx
c0003a24:	5e                   	pop    esi
c0003a25:	5f                   	pop    edi
c0003a26:	5d                   	pop    ebp
c0003a27:	c3                   	ret    

c0003a28 <dir_remove>:
c0003a28:	57                   	push   edi
c0003a29:	56                   	push   esi
c0003a2a:	53                   	push   ebx
c0003a2b:	89 c3                	mov    ebx,eax
c0003a2d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a30:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a32:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a35:	83 fa ff             	cmp    edx,0xffffffff
c0003a38:	74 09                	je     c0003a43 <dir_remove+0x1b>
c0003a3a:	e8 c2 fa ff ff       	call   c0003501 <dir_sdi>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 34                	jne    c0003a77 <dir_remove+0x4f>
c0003a43:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a46:	89 f0                	mov    eax,esi
c0003a48:	e8 da ea ff ff       	call   c0002527 <move_window>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 1c                	jne    c0003a6d <dir_remove+0x45>
c0003a51:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a54:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a57:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5b:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a5e:	73 17                	jae    c0003a77 <dir_remove+0x4f>
c0003a60:	31 d2                	xor    edx,edx
c0003a62:	89 d8                	mov    eax,ebx
c0003a64:	e8 2d fd ff ff       	call   c0003796 <dir_next>
c0003a69:	85 c0                	test   eax,eax
c0003a6b:	74 d6                	je     c0003a43 <dir_remove+0x1b>
c0003a6d:	83 f8 04             	cmp    eax,0x4
c0003a70:	75 05                	jne    c0003a77 <dir_remove+0x4f>
c0003a72:	b8 02 00 00 00       	mov    eax,0x2
c0003a77:	5b                   	pop    ebx
c0003a78:	5e                   	pop    esi
c0003a79:	5f                   	pop    edi
c0003a7a:	c3                   	ret    

c0003a7b <dir_find>:
c0003a7b:	55                   	push   ebp
c0003a7c:	31 d2                	xor    edx,edx
c0003a7e:	57                   	push   edi
c0003a7f:	56                   	push   esi
c0003a80:	53                   	push   ebx
c0003a81:	89 c3                	mov    ebx,eax
c0003a83:	83 ec 1c             	sub    esp,0x1c
c0003a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 6e fa ff ff       	call   c0003501 <dir_sdi>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 1d 01 00 00    	jne    c0003bba <dir_find+0x13f>
c0003a9d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aa4:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003aa9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003aae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ab5:	e8 6d ea ff ff       	call   c0002527 <move_window>
c0003aba:	89 c6                	mov    esi,eax
c0003abc:	85 c0                	test   eax,eax
c0003abe:	0f 85 f6 00 00 00    	jne    c0003bba <dir_find+0x13f>
c0003ac4:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003ac7:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003acb:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003acf:	85 c9                	test   ecx,ecx
c0003ad1:	0f 84 de 00 00 00    	je     c0003bb5 <dir_find+0x13a>
c0003ad7:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ada:	89 d0                	mov    eax,edx
c0003adc:	83 e0 3f             	and    eax,0x3f
c0003adf:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003ae5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ae8:	0f 84 a6 00 00 00    	je     c0003b94 <dir_find+0x119>
c0003aee:	80 e2 08             	and    dl,0x8
c0003af1:	0f b6 c0             	movzx  eax,al
c0003af4:	74 0b                	je     c0003b01 <dir_find+0x86>
c0003af6:	83 f8 0f             	cmp    eax,0xf
c0003af9:	0f 85 95 00 00 00    	jne    c0003b94 <dir_find+0x119>
c0003aff:	eb 05                	jmp    c0003b06 <dir_find+0x8b>
c0003b01:	83 f8 0f             	cmp    eax,0xf
c0003b04:	75 62                	jne    c0003b68 <dir_find+0xed>
c0003b06:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b0a:	0f 85 90 00 00 00    	jne    c0003ba0 <dir_find+0x125>
c0003b10:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003b15:	74 17                	je     c0003b2e <dir_find+0xb3>
c0003b17:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003b1a:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003b22:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003b26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b29:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b2c:	eb 13                	jmp    c0003b41 <dir_find+0xc6>
c0003b2e:	89 f8                	mov    eax,edi
c0003b30:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b35:	0f b6 d0             	movzx  edx,al
c0003b38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003b3d:	39 c2                	cmp    edx,eax
c0003b3f:	75 5f                	jne    c0003ba0 <dir_find+0x125>
c0003b41:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003b45:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b4a:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003b4d:	75 51                	jne    c0003ba0 <dir_find+0x125>
c0003b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b53:	89 ea                	mov    edx,ebp
c0003b55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b58:	e8 37 f3 ff ff       	call   c0002e94 <cmp_lfn>
c0003b5d:	85 c0                	test   eax,eax
c0003b5f:	74 3f                	je     c0003ba0 <dir_find+0x125>
c0003b61:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003b65:	4f                   	dec    edi
c0003b66:	eb 38                	jmp    c0003ba0 <dir_find+0x125>
c0003b68:	89 f8                	mov    eax,edi
c0003b6a:	84 c0                	test   al,al
c0003b6c:	75 0d                	jne    c0003b7b <dir_find+0x100>
c0003b6e:	89 e8                	mov    eax,ebp
c0003b70:	e8 9c e8 ff ff       	call   c0002411 <sum_sfn>
c0003b75:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003b79:	74 3f                	je     c0003bba <dir_find+0x13f>
c0003b7b:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b7f:	75 13                	jne    c0003b94 <dir_find+0x119>
c0003b81:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b84:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b89:	89 e8                	mov    eax,ebp
c0003b8b:	e8 7c e4 ff ff       	call   c000200c <mem_cmp>
c0003b90:	85 c0                	test   eax,eax
c0003b92:	74 26                	je     c0003bba <dir_find+0x13f>
c0003b94:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b9b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ba0:	31 d2                	xor    edx,edx
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 ed fb ff ff       	call   c0003796 <dir_next>
c0003ba9:	89 c6                	mov    esi,eax
c0003bab:	85 c0                	test   eax,eax
c0003bad:	0f 84 fb fe ff ff    	je     c0003aae <dir_find+0x33>
c0003bb3:	eb 05                	jmp    c0003bba <dir_find+0x13f>
c0003bb5:	be 04 00 00 00       	mov    esi,0x4
c0003bba:	83 c4 1c             	add    esp,0x1c
c0003bbd:	89 f0                	mov    eax,esi
c0003bbf:	5b                   	pop    ebx
c0003bc0:	5e                   	pop    esi
c0003bc1:	5f                   	pop    edi
c0003bc2:	5d                   	pop    ebp
c0003bc3:	c3                   	ret    

c0003bc4 <follow_path>:
c0003bc4:	56                   	push   esi
c0003bc5:	53                   	push   ebx
c0003bc6:	89 c3                	mov    ebx,eax
c0003bc8:	83 ec 14             	sub    esp,0x14
c0003bcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003bcf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd5:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003bd8:	83 fa 5c             	cmp    edx,0x5c
c0003bdb:	75 07                	jne    c0003be4 <follow_path+0x20>
c0003bdd:	40                   	inc    eax
c0003bde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003be2:	eb ed                	jmp    c0003bd1 <follow_path+0xd>
c0003be4:	83 fa 2f             	cmp    edx,0x2f
c0003be7:	74 f4                	je     c0003bdd <follow_path+0x19>
c0003be9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bf0:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003bf3:	77 3e                	ja     c0003c33 <follow_path+0x6f>
c0003bf5:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003bf9:	31 d2                	xor    edx,edx
c0003bfb:	89 d8                	mov    eax,ebx
c0003bfd:	e8 ff f8 ff ff       	call   c0003501 <dir_sdi>
c0003c02:	eb 4f                	jmp    c0003c53 <follow_path+0x8f>
c0003c04:	89 d8                	mov    eax,ebx
c0003c06:	e8 70 fe ff ff       	call   c0003a7b <dir_find>
c0003c0b:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c0e:	85 c0                	test   eax,eax
c0003c10:	75 32                	jne    c0003c44 <follow_path+0x80>
c0003c12:	80 e2 04             	and    dl,0x4
c0003c15:	75 3c                	jne    c0003c53 <follow_path+0x8f>
c0003c17:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c1b:	74 31                	je     c0003c4e <follow_path+0x8a>
c0003c1d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c20:	25 ff 01 00 00       	and    eax,0x1ff
c0003c25:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c29:	8a 06                	mov    al,BYTE PTR [esi]
c0003c2b:	e8 7c f7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003c30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c33:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c37:	89 d8                	mov    eax,ebx
c0003c39:	e8 7f ef ff ff       	call   c0002bbd <create_name>
c0003c3e:	85 c0                	test   eax,eax
c0003c40:	74 c2                	je     c0003c04 <follow_path+0x40>
c0003c42:	eb 0f                	jmp    c0003c53 <follow_path+0x8f>
c0003c44:	83 f8 04             	cmp    eax,0x4
c0003c47:	75 0a                	jne    c0003c53 <follow_path+0x8f>
c0003c49:	80 e2 04             	and    dl,0x4
c0003c4c:	75 05                	jne    c0003c53 <follow_path+0x8f>
c0003c4e:	b8 05 00 00 00       	mov    eax,0x5
c0003c53:	83 c4 14             	add    esp,0x14
c0003c56:	5b                   	pop    ebx
c0003c57:	5e                   	pop    esi
c0003c58:	c3                   	ret    

c0003c59 <dir_register>:
c0003c59:	55                   	push   ebp
c0003c5a:	57                   	push   edi
c0003c5b:	56                   	push   esi
c0003c5c:	be 06 00 00 00       	mov    esi,0x6
c0003c61:	53                   	push   ebx
c0003c62:	83 ec 2c             	sub    esp,0x2c
c0003c65:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c68:	80 e2 a0             	and    dl,0xa0
c0003c6b:	0f 85 66 01 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003c71:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c7b:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c82:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c87:	74 06                	je     c0003c8f <dir_register+0x36>
c0003c89:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003c8d:	eb ef                	jmp    c0003c7e <dir_register+0x25>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	b9 0c 00 00 00       	mov    ecx,0xc
c0003c96:	8d 40 20             	lea    eax,[eax+0x20]
c0003c99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c9d:	89 c2                	mov    edx,eax
c0003c9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ca3:	e8 44 e3 ff ff       	call   c0001fec <mem_cpy>
c0003ca8:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003cad:	74 48                	je     c0003cf7 <dir_register+0x9e>
c0003caf:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cb3:	bd 01 00 00 00       	mov    ebp,0x1
c0003cb8:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cbb:	55                   	push   ebp
c0003cbc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003cc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cc4:	e8 86 e6 ff ff       	call   c000234f <gen_numname>
c0003cc9:	58                   	pop    eax
c0003cca:	89 d8                	mov    eax,ebx
c0003ccc:	e8 aa fd ff ff       	call   c0003a7b <dir_find>
c0003cd1:	89 c6                	mov    esi,eax
c0003cd3:	85 c0                	test   eax,eax
c0003cd5:	75 10                	jne    c0003ce7 <dir_register+0x8e>
c0003cd7:	45                   	inc    ebp
c0003cd8:	83 fd 64             	cmp    ebp,0x64
c0003cdb:	75 db                	jne    c0003cb8 <dir_register+0x5f>
c0003cdd:	be 07 00 00 00       	mov    esi,0x7
c0003ce2:	e9 f0 00 00 00       	jmp    c0003dd7 <dir_register+0x17e>
c0003ce7:	83 f8 04             	cmp    eax,0x4
c0003cea:	0f 85 e7 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003cf0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003cf4:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003cf7:	bd 01 00 00 00       	mov    ebp,0x1
c0003cfc:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d01:	74 13                	je     c0003d16 <dir_register+0xbd>
c0003d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d07:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d0c:	83 c0 0c             	add    eax,0xc
c0003d0f:	31 d2                	xor    edx,edx
c0003d11:	f7 f1                	div    ecx
c0003d13:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d16:	89 ea                	mov    edx,ebp
c0003d18:	89 d8                	mov    eax,ebx
c0003d1a:	e8 7c fb ff ff       	call   c000389b <dir_alloc>
c0003d1f:	89 c6                	mov    esi,eax
c0003d21:	85 c0                	test   eax,eax
c0003d23:	0f 85 ae 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d29:	4d                   	dec    ebp
c0003d2a:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003d2e:	74 67                	je     c0003d97 <dir_register+0x13e>
c0003d30:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d33:	89 e8                	mov    eax,ebp
c0003d35:	c1 e0 05             	shl    eax,0x5
c0003d38:	29 c2                	sub    edx,eax
c0003d3a:	89 d8                	mov    eax,ebx
c0003d3c:	e8 c0 f7 ff ff       	call   c0003501 <dir_sdi>
c0003d41:	89 c6                	mov    esi,eax
c0003d43:	85 c0                	test   eax,eax
c0003d45:	0f 85 8c 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d4f:	e8 bd e6 ff ff       	call   c0002411 <sum_sfn>
c0003d54:	0f b6 e8             	movzx  ebp,al
c0003d57:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d5a:	89 f8                	mov    eax,edi
c0003d5c:	e8 c6 e7 ff ff       	call   c0002527 <move_window>
c0003d61:	89 c6                	mov    esi,eax
c0003d63:	85 c0                	test   eax,eax
c0003d65:	75 70                	jne    c0003dd7 <dir_register+0x17e>
c0003d67:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003d6c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d6f:	83 ec 0c             	sub    esp,0xc
c0003d72:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d75:	55                   	push   ebp
c0003d76:	e8 39 e5 ff ff       	call   c00022b4 <put_lfn>
c0003d7b:	31 d2                	xor    edx,edx
c0003d7d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d81:	89 d8                	mov    eax,ebx
c0003d83:	e8 0e fa ff ff       	call   c0003796 <dir_next>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	89 c6                	mov    esi,eax
c0003d8d:	85 c0                	test   eax,eax
c0003d8f:	75 46                	jne    c0003dd7 <dir_register+0x17e>
c0003d91:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003d95:	75 c0                	jne    c0003d57 <dir_register+0xfe>
c0003d97:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d9a:	89 f8                	mov    eax,edi
c0003d9c:	e8 86 e7 ff ff       	call   c0002527 <move_window>
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	85 c0                	test   eax,eax
c0003da5:	75 30                	jne    c0003dd7 <dir_register+0x17e>
c0003da7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003daa:	b9 20 00 00 00       	mov    ecx,0x20
c0003daf:	31 d2                	xor    edx,edx
c0003db1:	e8 4b e2 ff ff       	call   c0002001 <mem_set>
c0003db6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003db9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dc2:	e8 25 e2 ff ff       	call   c0001fec <mem_cpy>
c0003dc7:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003dca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dcd:	83 e0 18             	and    eax,0x18
c0003dd0:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003dd3:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dd7:	83 c4 2c             	add    esp,0x2c
c0003dda:	89 f0                	mov    eax,esi
c0003ddc:	5b                   	pop    ebx
c0003ddd:	5e                   	pop    esi
c0003dde:	5f                   	pop    edi
c0003ddf:	5d                   	pop    ebp
c0003de0:	c3                   	ret    

c0003de1 <f_mount>:
c0003de1:	53                   	push   ebx
c0003de2:	83 ec 18             	sub    esp,0x18
c0003de5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003de9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003df1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003df5:	e8 37 e6 ff ff       	call   c0002431 <get_ldnumber>
c0003dfa:	89 c2                	mov    edx,eax
c0003dfc:	b8 0b 00 00 00       	mov    eax,0xb
c0003e01:	85 d2                	test   edx,edx
c0003e03:	78 39                	js     c0003e3e <f_mount+0x5d>
c0003e05:	8b 04 95 a0 94 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6b60]
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	74 03                	je     c0003e13 <f_mount+0x32>
c0003e10:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e17:	85 c0                	test   eax,eax
c0003e19:	74 03                	je     c0003e1e <f_mount+0x3d>
c0003e1b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e22:	89 04 95 a0 94 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6b60],eax
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	84 db                	test   bl,bl
c0003e2d:	74 0f                	je     c0003e3e <f_mount+0x5d>
c0003e2f:	31 c9                	xor    ecx,ecx
c0003e31:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e39:	e8 3c e8 ff ff       	call   c000267a <mount_volume>
c0003e3e:	83 c4 18             	add    esp,0x18
c0003e41:	5b                   	pop    ebx
c0003e42:	c3                   	ret    

c0003e43 <f_open>:
c0003e43:	55                   	push   ebp
c0003e44:	b8 09 00 00 00       	mov    eax,0x9
c0003e49:	57                   	push   edi
c0003e4a:	56                   	push   esi
c0003e4b:	53                   	push   ebx
c0003e4c:	83 ec 5c             	sub    esp,0x5c
c0003e4f:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e53:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e57:	85 db                	test   ebx,ebx
c0003e59:	0f 84 9f 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003e5f:	89 fd                	mov    ebp,edi
c0003e61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e65:	83 e5 3f             	and    ebp,0x3f
c0003e68:	89 e8                	mov    eax,ebp
c0003e6a:	89 ee                	mov    esi,ebp
c0003e6c:	0f b6 c8             	movzx  ecx,al
c0003e6f:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e73:	e8 02 e8 ff ff       	call   c000267a <mount_volume>
c0003e78:	85 c0                	test   eax,eax
c0003e7a:	0f 85 78 02 00 00    	jne    c00040f8 <f_open+0x2b5>
c0003e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e84:	83 ec 0c             	sub    esp,0xc
c0003e87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003e8b:	68 00 02 00 00       	push   0x200
c0003e90:	e8 73 1f 00 00       	call   c0005e08 <ff_memalloc>
c0003e95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	b8 11 00 00 00       	mov    eax,0x11
c0003ea1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ea6:	0f 84 52 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003eb8:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ebb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ebf:	e8 00 fd ff ff       	call   c0003bc4 <follow_path>
c0003ec4:	85 c0                	test   eax,eax
c0003ec6:	75 0c                	jne    c0003ed4 <f_open+0x91>
c0003ec8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ecd:	74 05                	je     c0003ed4 <f_open+0x91>
c0003ecf:	b8 06 00 00 00       	mov    eax,0x6
c0003ed4:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003eda:	0f 84 d5 00 00 00    	je     c0003fb5 <f_open+0x172>
c0003ee0:	85 c0                	test   eax,eax
c0003ee2:	74 21                	je     c0003f05 <f_open+0xc2>
c0003ee4:	83 f8 04             	cmp    eax,0x4
c0003ee7:	0f 85 f0 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003eed:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ef1:	e8 63 fd ff ff       	call   c0003c59 <dir_register>
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	0f 85 df 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003efe:	83 cd 08             	or     ebp,0x8
c0003f01:	89 ee                	mov    esi,ebp
c0003f03:	eb 2c                	jmp    c0003f31 <f_open+0xee>
c0003f05:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f09:	b8 07 00 00 00       	mov    eax,0x7
c0003f0e:	80 e2 11             	and    dl,0x11
c0003f11:	0f 85 c6 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f17:	b8 08 00 00 00       	mov    eax,0x8
c0003f1c:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f22:	0f 85 b5 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f28:	83 e7 08             	and    edi,0x8
c0003f2b:	0f 84 b1 00 00 00    	je     c0003fe2 <f_open+0x19f>
c0003f31:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f39:	89 ea                	mov    edx,ebp
c0003f3b:	8a 00                	mov    al,BYTE PTR [eax]
c0003f3d:	e8 6a f4 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003f42:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f47:	89 c7                	mov    edi,eax
c0003f49:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f4c:	e8 98 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f55:	31 c9                	xor    ecx,ecx
c0003f57:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f63:	e8 6d f4 ff ff       	call   c00033d5 <st_clust.isra.1>
c0003f68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f6c:	31 d2                	xor    edx,edx
c0003f6e:	83 c0 1c             	add    eax,0x1c
c0003f71:	e8 73 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f7a:	85 ff                	test   edi,edi
c0003f7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f80:	74 60                	je     c0003fe2 <f_open+0x19f>
c0003f82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f86:	31 c9                	xor    ecx,ecx
c0003f88:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003f8b:	89 fa                	mov    edx,edi
c0003f8d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f91:	e8 72 f7 ff ff       	call   c0003708 <remove_chain>
c0003f96:	85 c0                	test   eax,eax
c0003f98:	0f 85 3f 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f9e:	89 ea                	mov    edx,ebp
c0003fa0:	4f                   	dec    edi
c0003fa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fa5:	e8 7d e5 ff ff       	call   c0002527 <move_window>
c0003faa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fae:	85 c0                	test   eax,eax
c0003fb0:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003fb3:	eb 27                	jmp    c0003fdc <f_open+0x199>
c0003fb5:	85 c0                	test   eax,eax
c0003fb7:	0f 85 20 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fbd:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003fc1:	b8 04 00 00 00       	mov    eax,0x4
c0003fc6:	f6 c2 10             	test   dl,0x10
c0003fc9:	0f 85 0e 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fcf:	83 e7 02             	and    edi,0x2
c0003fd2:	74 0e                	je     c0003fe2 <f_open+0x19f>
c0003fd4:	b8 07 00 00 00       	mov    eax,0x7
c0003fd9:	80 e2 01             	and    dl,0x1
c0003fdc:	0f 85 fb 00 00 00    	jne    c00040dd <f_open+0x29a>
c0003fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0003fe8:	74 03                	je     c0003fed <f_open+0x1aa>
c0003fea:	83 ce 40             	or     esi,0x40
c0003fed:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003ff1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ff5:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003ff8:	89 fa                	mov    edx,edi
c0003ffa:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ffd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004000:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004003:	e8 a4 f3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004008:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000400b:	8d 47 1c             	lea    eax,[edi+0x1c]
c000400e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004011:	e8 b7 df ff ff       	call   c0001fcd <ld_dword>
c0004016:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004018:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000401b:	31 d2                	xor    edx,edx
c000401d:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004021:	b9 00 02 00 00       	mov    ecx,0x200
c0004026:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000402a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c000402e:	89 f0                	mov    eax,esi
c0004030:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004037:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000403a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004041:	89 f8                	mov    eax,edi
c0004043:	e8 b9 df ff ff       	call   c0002001 <mem_set>
c0004048:	83 e6 20             	and    esi,0x20
c000404b:	75 07                	jne    c0004054 <f_open+0x211>
c000404d:	31 c0                	xor    eax,eax
c000404f:	e9 89 00 00 00       	jmp    c00040dd <f_open+0x29a>
c0004054:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0004057:	85 ed                	test   ebp,ebp
c0004059:	74 f2                	je     c000404d <f_open+0x20a>
c000405b:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c000405e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004062:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004065:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004069:	c1 e6 09             	shl    esi,0x9
c000406c:	39 ee                	cmp    esi,ebp
c000406e:	73 1c                	jae    c000408c <f_open+0x249>
c0004070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004072:	29 f5                	sub    ebp,esi
c0004074:	e8 84 f3 ff ff       	call   c00033fd <get_fat.isra.2>
c0004079:	89 c2                	mov    edx,eax
c000407b:	83 f8 01             	cmp    eax,0x1
c000407e:	76 10                	jbe    c0004090 <f_open+0x24d>
c0004080:	83 f8 ff             	cmp    eax,0xffffffff
c0004083:	75 e7                	jne    c000406c <f_open+0x229>
c0004085:	b8 01 00 00 00       	mov    eax,0x1
c000408a:	eb 09                	jmp    c0004095 <f_open+0x252>
c000408c:	31 c0                	xor    eax,eax
c000408e:	eb 05                	jmp    c0004095 <f_open+0x252>
c0004090:	b8 02 00 00 00       	mov    eax,0x2
c0004095:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0004098:	85 c0                	test   eax,eax
c000409a:	75 41                	jne    c00040dd <f_open+0x29a>
c000409c:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c00040a2:	74 a9                	je     c000404d <f_open+0x20a>
c00040a4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00040a8:	89 f0                	mov    eax,esi
c00040aa:	e8 68 e1 ff ff       	call   c0002217 <clst2sect>
c00040af:	89 c2                	mov    edx,eax
c00040b1:	b8 02 00 00 00       	mov    eax,0x2
c00040b6:	85 d2                	test   edx,edx
c00040b8:	74 23                	je     c00040dd <f_open+0x29a>
c00040ba:	c1 ed 09             	shr    ebp,0x9
c00040bd:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c00040c1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00040c4:	6a 01                	push   0x1
c00040c6:	50                   	push   eax
c00040c7:	57                   	push   edi
c00040c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00040cc:	50                   	push   eax
c00040cd:	e8 a3 de ff ff       	call   c0001f75 <disk_read>
c00040d2:	83 c4 10             	add    esp,0x10
c00040d5:	85 c0                	test   eax,eax
c00040d7:	0f 95 c0             	setne  al
c00040da:	0f b6 c0             	movzx  eax,al
c00040dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040e1:	83 ec 0c             	sub    esp,0xc
c00040e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040e8:	e8 33 1d 00 00       	call   c0005e20 <ff_memfree>
c00040ed:	83 c4 10             	add    esp,0x10
c00040f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040f4:	85 c0                	test   eax,eax
c00040f6:	74 06                	je     c00040fe <f_open+0x2bb>
c00040f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040fe:	83 c4 5c             	add    esp,0x5c
c0004101:	5b                   	pop    ebx
c0004102:	5e                   	pop    esi
c0004103:	5f                   	pop    edi
c0004104:	5d                   	pop    ebp
c0004105:	c3                   	ret    

c0004106 <f_read>:
c0004106:	55                   	push   ebp
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	83 ec 2c             	sub    esp,0x2c
c000410d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004111:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004115:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000411b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000411f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004123:	89 d8                	mov    eax,ebx
c0004125:	e8 54 e3 ff ff       	call   c000247e <validate>
c000412a:	89 c5                	mov    ebp,eax
c000412c:	85 c0                	test   eax,eax
c000412e:	0f 85 c7 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004134:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004138:	85 ed                	test   ebp,ebp
c000413a:	0f 85 bb 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004140:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004144:	0f 84 ac 01 00 00    	je     c00042f6 <f_read+0x1f0>
c000414a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000414d:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004150:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004154:	39 f0                	cmp    eax,esi
c0004156:	0f 86 b0 00 00 00    	jbe    c000420c <f_read+0x106>
c000415c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0004160:	e9 a7 00 00 00       	jmp    c000420c <f_read+0x106>
c0004165:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004168:	a9 ff 01 00 00       	test   eax,0x1ff
c000416d:	0f 85 56 01 00 00    	jne    c00042c9 <f_read+0x1c3>
c0004173:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004177:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c000417b:	89 c2                	mov    edx,eax
c000417d:	4f                   	dec    edi
c000417e:	c1 ea 09             	shr    edx,0x9
c0004181:	21 d7                	and    edi,edx
c0004183:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004187:	0f 84 8f 00 00 00    	je     c000421c <f_read+0x116>
c000418d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004191:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004194:	89 c8                	mov    eax,ecx
c0004196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000419a:	e8 78 e0 ff ff       	call   c0002217 <clst2sect>
c000419f:	85 c0                	test   eax,eax
c00041a1:	0f 84 8d 00 00 00    	je     c0004234 <f_read+0x12e>
c00041a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ab:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c00041b3:	8d 3c 01             	lea    edi,[ecx+eax*1]
c00041b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041ba:	0f 86 bf 00 00 00    	jbe    c000427f <f_read+0x179>
c00041c0:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00041c4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041c8:	c1 ee 09             	shr    esi,0x9
c00041cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041cf:	01 f2                	add    edx,esi
c00041d1:	39 c2                	cmp    edx,eax
c00041d3:	76 06                	jbe    c00041db <f_read+0xd5>
c00041d5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041d9:	89 c6                	mov    esi,eax
c00041db:	56                   	push   esi
c00041dc:	57                   	push   edi
c00041dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041e5:	50                   	push   eax
c00041e6:	e8 8a dd ff ff       	call   c0001f75 <disk_read>
c00041eb:	83 c4 10             	add    esp,0x10
c00041ee:	85 c0                	test   eax,eax
c00041f0:	75 55                	jne    c0004247 <f_read+0x141>
c00041f2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041f6:	75 65                	jne    c000425d <f_read+0x157>
c00041f8:	c1 e6 09             	shl    esi,0x9
c00041fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041ff:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004203:	01 30                	add    DWORD PTR [eax],esi
c0004205:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004209:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000420c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004211:	0f 85 4e ff ff ff    	jne    c0004165 <f_read+0x5f>
c0004217:	e9 df 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c000421c:	85 c0                	test   eax,eax
c000421e:	75 05                	jne    c0004225 <f_read+0x11f>
c0004220:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004223:	eb 0a                	jmp    c000422f <f_read+0x129>
c0004225:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004228:	8b 03                	mov    eax,DWORD PTR [ebx]
c000422a:	e8 ce f1 ff ff       	call   c00033fd <get_fat.isra.2>
c000422f:	83 f8 01             	cmp    eax,0x1
c0004232:	77 0e                	ja     c0004242 <f_read+0x13c>
c0004234:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004238:	bd 02 00 00 00       	mov    ebp,0x2
c000423d:	e9 b9 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004242:	83 f8 ff             	cmp    eax,0xffffffff
c0004245:	75 0e                	jne    c0004255 <f_read+0x14f>
c0004247:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000424b:	bd 01 00 00 00       	mov    ebp,0x1
c0004250:	e9 a6 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004255:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004258:	e9 30 ff ff ff       	jmp    c000418d <f_read+0x87>
c000425d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004260:	29 f8                	sub    eax,edi
c0004262:	39 f0                	cmp    eax,esi
c0004264:	73 92                	jae    c00041f8 <f_read+0xf2>
c0004266:	c1 e0 09             	shl    eax,0x9
c0004269:	8d 53 28             	lea    edx,[ebx+0x28]
c000426c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004270:	b9 00 02 00 00       	mov    ecx,0x200
c0004275:	e8 72 dd ff ff       	call   c0001fec <mem_cpy>
c000427a:	e9 79 ff ff ff       	jmp    c00041f8 <f_read+0xf2>
c000427f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004282:	39 f8                	cmp    eax,edi
c0004284:	74 40                	je     c00042c6 <f_read+0x1c0>
c0004286:	8d 73 28             	lea    esi,[ebx+0x28]
c0004289:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000428d:	74 1e                	je     c00042ad <f_read+0x1a7>
c000428f:	6a 01                	push   0x1
c0004291:	50                   	push   eax
c0004292:	56                   	push   esi
c0004293:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004297:	50                   	push   eax
c0004298:	e8 ee dc ff ff       	call   c0001f8b <disk_write>
c000429d:	83 c4 10             	add    esp,0x10
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 a3                	jne    c0004247 <f_read+0x141>
c00042a4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042a7:	83 e0 7f             	and    eax,0x7f
c00042aa:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ad:	6a 01                	push   0x1
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b9:	50                   	push   eax
c00042ba:	e8 b6 dc ff ff       	call   c0001f75 <disk_read>
c00042bf:	83 c4 10             	add    esp,0x10
c00042c2:	85 c0                	test   eax,eax
c00042c4:	75 81                	jne    c0004247 <f_read+0x141>
c00042c6:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00042c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cc:	ba 00 02 00 00       	mov    edx,0x200
c00042d1:	25 ff 01 00 00       	and    eax,0x1ff
c00042d6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00042da:	29 c2                	sub    edx,eax
c00042dc:	39 d6                	cmp    esi,edx
c00042de:	76 02                	jbe    c00042e2 <f_read+0x1dc>
c00042e0:	89 d6                	mov    esi,edx
c00042e2:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042e6:	89 f1                	mov    ecx,esi
c00042e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042ec:	e8 fb dc ff ff       	call   c0001fec <mem_cpy>
c00042f1:	e9 05 ff ff ff       	jmp    c00041fb <f_read+0xf5>
c00042f6:	bd 07 00 00 00       	mov    ebp,0x7
c00042fb:	83 c4 2c             	add    esp,0x2c
c00042fe:	89 e8                	mov    eax,ebp
c0004300:	5b                   	pop    ebx
c0004301:	5e                   	pop    esi
c0004302:	5f                   	pop    edi
c0004303:	5d                   	pop    ebp
c0004304:	c3                   	ret    

c0004305 <f_write>:
c0004305:	55                   	push   ebp
c0004306:	57                   	push   edi
c0004307:	56                   	push   esi
c0004308:	53                   	push   ebx
c0004309:	83 ec 2c             	sub    esp,0x2c
c000430c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004310:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004314:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000431a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000431e:	89 d8                	mov    eax,ebx
c0004320:	e8 59 e1 ff ff       	call   c000247e <validate>
c0004325:	89 c5                	mov    ebp,eax
c0004327:	85 c0                	test   eax,eax
c0004329:	0f 85 14 02 00 00    	jne    c0004543 <f_write+0x23e>
c000432f:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004333:	85 ed                	test   ebp,ebp
c0004335:	0f 85 08 02 00 00    	jne    c0004543 <f_write+0x23e>
c000433b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433f:	0f 84 f9 01 00 00    	je     c000453e <f_write+0x239>
c0004345:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004348:	89 c7                	mov    edi,eax
c000434a:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000434e:	0f 83 ef 00 00 00    	jae    c0004443 <f_write+0x13e>
c0004354:	f7 d0                	not    eax
c0004356:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000435a:	e9 e4 00 00 00       	jmp    c0004443 <f_write+0x13e>
c000435f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004362:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004368:	0f 85 9a 01 00 00    	jne    c0004508 <f_write+0x203>
c000436e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004372:	89 d1                	mov    ecx,edx
c0004374:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004378:	c1 e9 09             	shr    ecx,0x9
c000437b:	48                   	dec    eax
c000437c:	21 c8                	and    eax,ecx
c000437e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004382:	0f 84 c8 00 00 00    	je     c0004450 <f_write+0x14b>
c0004388:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000438c:	0f 85 22 01 00 00    	jne    c00044b4 <f_write+0x1af>
c0004392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004396:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004399:	89 c8                	mov    eax,ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	e8 73 de ff ff       	call   c0002217 <clst2sect>
c00043a4:	85 c0                	test   eax,eax
c00043a6:	0f 84 d2 00 00 00    	je     c000447e <f_write+0x179>
c00043ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00043b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b4:	01 c7                	add    edi,eax
c00043b6:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043be:	0f 86 1c 01 00 00    	jbe    c00044e0 <f_write+0x1db>
c00043c4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043c8:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043cc:	c1 ee 09             	shr    esi,0x9
c00043cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043d3:	01 f2                	add    edx,esi
c00043d5:	39 c2                	cmp    edx,eax
c00043d7:	76 06                	jbe    c00043df <f_write+0xda>
c00043d9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043dd:	89 c6                	mov    esi,eax
c00043df:	56                   	push   esi
c00043e0:	57                   	push   edi
c00043e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043e9:	50                   	push   eax
c00043ea:	e8 9c db ff ff       	call   c0001f8b <disk_write>
c00043ef:	83 c4 10             	add    esp,0x10
c00043f2:	85 c0                	test   eax,eax
c00043f4:	0f 85 97 00 00 00    	jne    c0004491 <f_write+0x18c>
c00043fa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043fd:	29 fa                	sub    edx,edi
c00043ff:	39 f2                	cmp    edx,esi
c0004401:	73 1d                	jae    c0004420 <f_write+0x11b>
c0004403:	8d 43 28             	lea    eax,[ebx+0x28]
c0004406:	c1 e2 09             	shl    edx,0x9
c0004409:	b9 00 02 00 00       	mov    ecx,0x200
c000440e:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004412:	e8 d5 db ff ff       	call   c0001fec <mem_cpy>
c0004417:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000441a:	83 e0 7f             	and    eax,0x7f
c000441d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004420:	c1 e6 09             	shl    esi,0x9
c0004423:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004427:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000442b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000442f:	01 30                	add    DWORD PTR [eax],esi
c0004431:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004434:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004437:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000443a:	39 f0                	cmp    eax,esi
c000443c:	73 02                	jae    c0004440 <f_write+0x13b>
c000443e:	89 f0                	mov    eax,esi
c0004440:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004443:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004448:	0f 85 11 ff ff ff    	jne    c000435f <f_write+0x5a>
c000444e:	eb 1b                	jmp    c000446b <f_write+0x166>
c0004450:	85 d2                	test   edx,edx
c0004452:	75 09                	jne    c000445d <f_write+0x158>
c0004454:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004457:	85 c0                	test   eax,eax
c0004459:	75 1e                	jne    c0004479 <f_write+0x174>
c000445b:	eb 03                	jmp    c0004460 <f_write+0x15b>
c000445d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004460:	89 d8                	mov    eax,ebx
c0004462:	e8 62 f1 ff ff       	call   c00035c9 <create_chain>
c0004467:	85 c0                	test   eax,eax
c0004469:	75 0e                	jne    c0004479 <f_write+0x174>
c000446b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000446e:	83 c8 40             	or     eax,0x40
c0004471:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004474:	e9 ca 00 00 00       	jmp    c0004543 <f_write+0x23e>
c0004479:	83 f8 01             	cmp    eax,0x1
c000447c:	75 0e                	jne    c000448c <f_write+0x187>
c000447e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004482:	bd 02 00 00 00       	mov    ebp,0x2
c0004487:	e9 b7 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000448c:	83 f8 ff             	cmp    eax,0xffffffff
c000448f:	75 0e                	jne    c000449f <f_write+0x19a>
c0004491:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004495:	bd 01 00 00 00       	mov    ebp,0x1
c000449a:	e9 a4 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000449f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044a2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044a6:	0f 85 dc fe ff ff    	jne    c0004388 <f_write+0x83>
c00044ac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044af:	e9 d4 fe ff ff       	jmp    c0004388 <f_write+0x83>
c00044b4:	6a 01                	push   0x1
c00044b6:	8d 43 28             	lea    eax,[ebx+0x28]
c00044b9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044bc:	50                   	push   eax
c00044bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044c5:	50                   	push   eax
c00044c6:	e8 c0 da ff ff       	call   c0001f8b <disk_write>
c00044cb:	83 c4 10             	add    esp,0x10
c00044ce:	85 c0                	test   eax,eax
c00044d0:	75 bf                	jne    c0004491 <f_write+0x18c>
c00044d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044d5:	83 e0 7f             	and    eax,0x7f
c00044d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044db:	e9 b2 fe ff ff       	jmp    c0004392 <f_write+0x8d>
c00044e0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00044e3:	74 20                	je     c0004505 <f_write+0x200>
c00044e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044e8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044eb:	76 18                	jbe    c0004505 <f_write+0x200>
c00044ed:	6a 01                	push   0x1
c00044ef:	8d 43 28             	lea    eax,[ebx+0x28]
c00044f2:	57                   	push   edi
c00044f3:	50                   	push   eax
c00044f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044f8:	50                   	push   eax
c00044f9:	e8 77 da ff ff       	call   c0001f75 <disk_read>
c00044fe:	83 c4 10             	add    esp,0x10
c0004501:	85 c0                	test   eax,eax
c0004503:	75 8c                	jne    c0004491 <f_write+0x18c>
c0004505:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004508:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000450b:	ba 00 02 00 00       	mov    edx,0x200
c0004510:	25 ff 01 00 00       	and    eax,0x1ff
c0004515:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004519:	29 c2                	sub    edx,eax
c000451b:	39 d6                	cmp    esi,edx
c000451d:	76 02                	jbe    c0004521 <f_write+0x21c>
c000451f:	89 d6                	mov    esi,edx
c0004521:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004525:	89 f1                	mov    ecx,esi
c0004527:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000452b:	e8 bc da ff ff       	call   c0001fec <mem_cpy>
c0004530:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004533:	83 c8 80             	or     eax,0xffffff80
c0004536:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004539:	e9 e5 fe ff ff       	jmp    c0004423 <f_write+0x11e>
c000453e:	bd 07 00 00 00       	mov    ebp,0x7
c0004543:	83 c4 2c             	add    esp,0x2c
c0004546:	89 e8                	mov    eax,ebp
c0004548:	5b                   	pop    ebx
c0004549:	5e                   	pop    esi
c000454a:	5f                   	pop    edi
c000454b:	5d                   	pop    ebp
c000454c:	c3                   	ret    

c000454d <f_sync>:
c000454d:	56                   	push   esi
c000454e:	53                   	push   ebx
c000454f:	83 ec 14             	sub    esp,0x14
c0004552:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004556:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 1d df ff ff       	call   c000247e <validate>
c0004561:	85 c0                	test   eax,eax
c0004563:	0f 85 a3 00 00 00    	jne    c000460c <f_sync+0xbf>
c0004569:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000456c:	f6 c2 40             	test   dl,0x40
c000456f:	0f 84 97 00 00 00    	je     c000460c <f_sync+0xbf>
c0004575:	80 e2 80             	and    dl,0x80
c0004578:	74 2e                	je     c00045a8 <f_sync+0x5b>
c000457a:	6a 01                	push   0x1
c000457c:	8d 43 28             	lea    eax,[ebx+0x28]
c000457f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004582:	50                   	push   eax
c0004583:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004587:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000458b:	50                   	push   eax
c000458c:	e8 fa d9 ff ff       	call   c0001f8b <disk_write>
c0004591:	83 c4 10             	add    esp,0x10
c0004594:	89 c2                	mov    edx,eax
c0004596:	b8 01 00 00 00       	mov    eax,0x1
c000459b:	85 d2                	test   edx,edx
c000459d:	75 6d                	jne    c000460c <f_sync+0xbf>
c000459f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045a2:	83 e0 7f             	and    eax,0x7f
c00045a5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045af:	e8 73 df ff ff       	call   c0002527 <move_window>
c00045b4:	85 c0                	test   eax,eax
c00045b6:	75 54                	jne    c000460c <f_sync+0xbf>
c00045b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045bb:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045be:	89 f2                	mov    edx,esi
c00045c0:	83 c8 20             	or     eax,0x20
c00045c3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045c6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045cb:	e8 05 ee ff ff       	call   c00033d5 <st_clust.isra.1>
c00045d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045d3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045d6:	e8 0e da ff ff       	call   c0001fe9 <st_dword>
c00045db:	8d 46 16             	lea    eax,[esi+0x16]
c00045de:	ba 00 00 21 50       	mov    edx,0x50210000
c00045e3:	e8 01 da ff ff       	call   c0001fe9 <st_dword>
c00045e8:	31 d2                	xor    edx,edx
c00045ea:	8d 46 12             	lea    eax,[esi+0x12]
c00045ed:	e8 f3 d9 ff ff       	call   c0001fe5 <st_word>
c00045f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045fe:	e8 5b e9 ff ff       	call   c0002f5e <sync_fs>
c0004603:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004606:	83 e2 bf             	and    edx,0xffffffbf
c0004609:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000460c:	83 c4 14             	add    esp,0x14
c000460f:	5b                   	pop    ebx
c0004610:	5e                   	pop    esi
c0004611:	c3                   	ret    

c0004612 <f_close>:
c0004612:	53                   	push   ebx
c0004613:	83 ec 24             	sub    esp,0x24
c0004616:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000461a:	53                   	push   ebx
c000461b:	e8 2d ff ff ff       	call   c000454d <f_sync>
c0004620:	83 c4 10             	add    esp,0x10
c0004623:	85 c0                	test   eax,eax
c0004625:	75 15                	jne    c000463c <f_close+0x2a>
c0004627:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000462b:	89 d8                	mov    eax,ebx
c000462d:	e8 4c de ff ff       	call   c000247e <validate>
c0004632:	85 c0                	test   eax,eax
c0004634:	75 06                	jne    c000463c <f_close+0x2a>
c0004636:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000463c:	83 c4 18             	add    esp,0x18
c000463f:	5b                   	pop    ebx
c0004640:	c3                   	ret    

c0004641 <f_lseek>:
c0004641:	55                   	push   ebp
c0004642:	57                   	push   edi
c0004643:	56                   	push   esi
c0004644:	53                   	push   ebx
c0004645:	83 ec 2c             	sub    esp,0x2c
c0004648:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000464c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004650:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004654:	89 d8                	mov    eax,ebx
c0004656:	e8 23 de ff ff       	call   c000247e <validate>
c000465b:	89 c5                	mov    ebp,eax
c000465d:	85 c0                	test   eax,eax
c000465f:	0f 85 83 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004665:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004669:	85 ed                	test   ebp,ebp
c000466b:	0f 85 77 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004671:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004674:	39 f0                	cmp    eax,esi
c0004676:	73 08                	jae    c0004680 <f_lseek+0x3f>
c0004678:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000467c:	75 02                	jne    c0004680 <f_lseek+0x3f>
c000467e:	89 c6                	mov    esi,eax
c0004680:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004683:	85 f6                	test   esi,esi
c0004685:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000468c:	75 07                	jne    c0004695 <f_lseek+0x54>
c000468e:	31 f6                	xor    esi,esi
c0004690:	e9 e2 00 00 00       	jmp    c0004777 <f_lseek+0x136>
c0004695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004699:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000469d:	c1 e7 09             	shl    edi,0x9
c00046a0:	85 c9                	test   ecx,ecx
c00046a2:	74 28                	je     c00046cc <f_lseek+0x8b>
c00046a4:	49                   	dec    ecx
c00046a5:	31 d2                	xor    edx,edx
c00046a7:	8d 46 ff             	lea    eax,[esi-0x1]
c00046aa:	f7 f7                	div    edi
c00046ac:	31 d2                	xor    edx,edx
c00046ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b2:	89 c8                	mov    eax,ecx
c00046b4:	f7 f7                	div    edi
c00046b6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046ba:	72 10                	jb     c00046cc <f_lseek+0x8b>
c00046bc:	89 f8                	mov    eax,edi
c00046be:	f7 d8                	neg    eax
c00046c0:	21 c1                	and    ecx,eax
c00046c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046c5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046c8:	29 ce                	sub    esi,ecx
c00046ca:	eb 3c                	jmp    c0004708 <f_lseek+0xc7>
c00046cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046cf:	85 c0                	test   eax,eax
c00046d1:	75 32                	jne    c0004705 <f_lseek+0xc4>
c00046d3:	31 d2                	xor    edx,edx
c00046d5:	89 d8                	mov    eax,ebx
c00046d7:	e8 ed ee ff ff       	call   c00035c9 <create_chain>
c00046dc:	83 f8 01             	cmp    eax,0x1
c00046df:	75 0e                	jne    c00046ef <f_lseek+0xae>
c00046e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046e5:	bd 02 00 00 00       	mov    ebp,0x2
c00046ea:	e9 f9 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c00046ef:	83 f8 ff             	cmp    eax,0xffffffff
c00046f2:	75 0e                	jne    c0004702 <f_lseek+0xc1>
c00046f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046f8:	bd 01 00 00 00       	mov    ebp,0x1
c00046fd:	e9 e6 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c0004702:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004705:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004708:	85 c0                	test   eax,eax
c000470a:	74 82                	je     c000468e <f_lseek+0x4d>
c000470c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000470f:	39 fe                	cmp    esi,edi
c0004711:	76 3d                	jbe    c0004750 <f_lseek+0x10f>
c0004713:	01 fa                	add    edx,edi
c0004715:	29 fe                	sub    esi,edi
c0004717:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000471a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000471e:	89 c2                	mov    edx,eax
c0004720:	74 0d                	je     c000472f <f_lseek+0xee>
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 a0 ee ff ff       	call   c00035c9 <create_chain>
c0004729:	85 c0                	test   eax,eax
c000472b:	75 09                	jne    c0004736 <f_lseek+0xf5>
c000472d:	eb 1f                	jmp    c000474e <f_lseek+0x10d>
c000472f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004731:	e8 c7 ec ff ff       	call   c00033fd <get_fat.isra.2>
c0004736:	83 f8 ff             	cmp    eax,0xffffffff
c0004739:	74 b9                	je     c00046f4 <f_lseek+0xb3>
c000473b:	83 f8 01             	cmp    eax,0x1
c000473e:	76 a1                	jbe    c00046e1 <f_lseek+0xa0>
c0004740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004744:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004747:	76 98                	jbe    c00046e1 <f_lseek+0xa0>
c0004749:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000474c:	eb be                	jmp    c000470c <f_lseek+0xcb>
c000474e:	31 f6                	xor    esi,esi
c0004750:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004753:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004759:	0f 84 2f ff ff ff    	je     c000468e <f_lseek+0x4d>
c000475f:	89 c2                	mov    edx,eax
c0004761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004765:	e8 ad da ff ff       	call   c0002217 <clst2sect>
c000476a:	85 c0                	test   eax,eax
c000476c:	0f 84 6f ff ff ff    	je     c00046e1 <f_lseek+0xa0>
c0004772:	c1 ee 09             	shr    esi,0x9
c0004775:	01 c6                	add    esi,eax
c0004777:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000477a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000477d:	76 0c                	jbe    c000478b <f_lseek+0x14a>
c000477f:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004785:	83 ca 40             	or     edx,0x40
c0004788:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000478b:	a9 ff 01 00 00       	test   eax,0x1ff
c0004790:	74 56                	je     c00047e8 <f_lseek+0x1a7>
c0004792:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004795:	39 f0                	cmp    eax,esi
c0004797:	74 4f                	je     c00047e8 <f_lseek+0x1a7>
c0004799:	8d 7b 28             	lea    edi,[ebx+0x28]
c000479c:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047a0:	74 26                	je     c00047c8 <f_lseek+0x187>
c00047a2:	6a 01                	push   0x1
c00047a4:	50                   	push   eax
c00047a5:	57                   	push   edi
c00047a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047aa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047ae:	50                   	push   eax
c00047af:	e8 d7 d7 ff ff       	call   c0001f8b <disk_write>
c00047b4:	83 c4 10             	add    esp,0x10
c00047b7:	85 c0                	test   eax,eax
c00047b9:	0f 85 35 ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047bf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047c2:	83 e0 7f             	and    eax,0x7f
c00047c5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047c8:	6a 01                	push   0x1
c00047ca:	56                   	push   esi
c00047cb:	57                   	push   edi
c00047cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047d4:	50                   	push   eax
c00047d5:	e8 9b d7 ff ff       	call   c0001f75 <disk_read>
c00047da:	83 c4 10             	add    esp,0x10
c00047dd:	85 c0                	test   eax,eax
c00047df:	0f 85 0f ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047e5:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047e8:	83 c4 2c             	add    esp,0x2c
c00047eb:	89 e8                	mov    eax,ebp
c00047ed:	5b                   	pop    ebx
c00047ee:	5e                   	pop    esi
c00047ef:	5f                   	pop    edi
c00047f0:	5d                   	pop    ebp
c00047f1:	c3                   	ret    

c00047f2 <f_opendir>:
c00047f2:	56                   	push   esi
c00047f3:	b8 09 00 00 00       	mov    eax,0x9
c00047f8:	53                   	push   ebx
c00047f9:	83 ec 24             	sub    esp,0x24
c00047fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004800:	85 db                	test   ebx,ebx
c0004802:	0f 84 af 00 00 00    	je     c00048b7 <f_opendir+0xc5>
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000480e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004812:	e8 63 de ff ff       	call   c000267a <mount_volume>
c0004817:	85 c0                	test   eax,eax
c0004819:	0f 85 92 00 00 00    	jne    c00048b1 <f_opendir+0xbf>
c000481f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004823:	83 ec 0c             	sub    esp,0xc
c0004826:	89 03                	mov    DWORD PTR [ebx],eax
c0004828:	68 00 02 00 00       	push   0x200
c000482d:	e8 d6 15 00 00       	call   c0005e08 <ff_memalloc>
c0004832:	83 c4 10             	add    esp,0x10
c0004835:	89 c6                	mov    esi,eax
c0004837:	b8 11 00 00 00       	mov    eax,0x11
c000483c:	85 f6                	test   esi,esi
c000483e:	74 77                	je     c00048b7 <f_opendir+0xc5>
c0004840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004844:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004848:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000484b:	89 d8                	mov    eax,ebx
c000484d:	e8 72 f3 ff ff       	call   c0003bc4 <follow_path>
c0004852:	85 c0                	test   eax,eax
c0004854:	75 37                	jne    c000488d <f_opendir+0x9b>
c0004856:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000485a:	75 1c                	jne    c0004878 <f_opendir+0x86>
c000485c:	b8 05 00 00 00       	mov    eax,0x5
c0004861:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004865:	74 26                	je     c000488d <f_opendir+0x9b>
c0004867:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000486a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486e:	8a 00                	mov    al,BYTE PTR [eax]
c0004870:	e8 37 eb ff ff       	call   c00033ac <ld_clust.isra.0>
c0004875:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004878:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000487c:	31 d2                	xor    edx,edx
c000487e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004882:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004886:	89 d8                	mov    eax,ebx
c0004888:	e8 74 ec ff ff       	call   c0003501 <dir_sdi>
c000488d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004891:	83 ec 0c             	sub    esp,0xc
c0004894:	56                   	push   esi
c0004895:	e8 86 15 00 00       	call   c0005e20 <ff_memfree>
c000489a:	83 c4 10             	add    esp,0x10
c000489d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a1:	83 f8 04             	cmp    eax,0x4
c00048a4:	74 06                	je     c00048ac <f_opendir+0xba>
c00048a6:	85 c0                	test   eax,eax
c00048a8:	74 0d                	je     c00048b7 <f_opendir+0xc5>
c00048aa:	eb 05                	jmp    c00048b1 <f_opendir+0xbf>
c00048ac:	b8 05 00 00 00       	mov    eax,0x5
c00048b1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048b7:	83 c4 24             	add    esp,0x24
c00048ba:	5b                   	pop    ebx
c00048bb:	5e                   	pop    esi
c00048bc:	c3                   	ret    

c00048bd <f_closedir>:
c00048bd:	53                   	push   ebx
c00048be:	83 ec 18             	sub    esp,0x18
c00048c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048c5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048c9:	89 d8                	mov    eax,ebx
c00048cb:	e8 ae db ff ff       	call   c000247e <validate>
c00048d0:	85 c0                	test   eax,eax
c00048d2:	75 06                	jne    c00048da <f_closedir+0x1d>
c00048d4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048da:	83 c4 18             	add    esp,0x18
c00048dd:	5b                   	pop    ebx
c00048de:	c3                   	ret    

c00048df <f_readdir>:
c00048df:	57                   	push   edi
c00048e0:	56                   	push   esi
c00048e1:	53                   	push   ebx
c00048e2:	83 ec 20             	sub    esp,0x20
c00048e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048ed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048f1:	89 d8                	mov    eax,ebx
c00048f3:	e8 86 db ff ff       	call   c000247e <validate>
c00048f8:	85 c0                	test   eax,eax
c00048fa:	75 6e                	jne    c000496a <f_readdir+0x8b>
c00048fc:	85 ff                	test   edi,edi
c00048fe:	75 0b                	jne    c000490b <f_readdir+0x2c>
c0004900:	31 d2                	xor    edx,edx
c0004902:	89 d8                	mov    eax,ebx
c0004904:	e8 f8 eb ff ff       	call   c0003501 <dir_sdi>
c0004909:	eb 5f                	jmp    c000496a <f_readdir+0x8b>
c000490b:	83 ec 0c             	sub    esp,0xc
c000490e:	68 00 02 00 00       	push   0x200
c0004913:	e8 f0 14 00 00       	call   c0005e08 <ff_memalloc>
c0004918:	83 c4 10             	add    esp,0x10
c000491b:	89 c6                	mov    esi,eax
c000491d:	b8 11 00 00 00       	mov    eax,0x11
c0004922:	85 f6                	test   esi,esi
c0004924:	74 44                	je     c000496a <f_readdir+0x8b>
c0004926:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000492a:	31 d2                	xor    edx,edx
c000492c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000492f:	89 d8                	mov    eax,ebx
c0004931:	e8 ca ef ff ff       	call   c0003900 <dir_read>
c0004936:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000493b:	75 19                	jne    c0004956 <f_readdir+0x77>
c000493d:	89 fa                	mov    edx,edi
c000493f:	89 d8                	mov    eax,ebx
c0004941:	e8 70 e8 ff ff       	call   c00031b6 <get_fileinfo>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	e8 47 ee ff ff       	call   c0003796 <dir_next>
c000494f:	83 f8 04             	cmp    eax,0x4
c0004952:	75 02                	jne    c0004956 <f_readdir+0x77>
c0004954:	31 c0                	xor    eax,eax
c0004956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000495a:	83 ec 0c             	sub    esp,0xc
c000495d:	56                   	push   esi
c000495e:	e8 bd 14 00 00       	call   c0005e20 <ff_memfree>
c0004963:	83 c4 10             	add    esp,0x10
c0004966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000496a:	83 c4 20             	add    esp,0x20
c000496d:	5b                   	pop    ebx
c000496e:	5e                   	pop    esi
c000496f:	5f                   	pop    edi
c0004970:	c3                   	ret    

c0004971 <f_stat>:
c0004971:	57                   	push   edi
c0004972:	31 c9                	xor    ecx,ecx
c0004974:	56                   	push   esi
c0004975:	53                   	push   ebx
c0004976:	83 ec 30             	sub    esp,0x30
c0004979:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000497d:	89 e2                	mov    edx,esp
c000497f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004983:	e8 f2 dc ff ff       	call   c000267a <mount_volume>
c0004988:	89 c3                	mov    ebx,eax
c000498a:	85 c0                	test   eax,eax
c000498c:	75 59                	jne    c00049e7 <f_stat+0x76>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	bb 11 00 00 00       	mov    ebx,0x11
c0004996:	68 00 02 00 00       	push   0x200
c000499b:	e8 68 14 00 00       	call   c0005e08 <ff_memalloc>
c00049a0:	83 c4 10             	add    esp,0x10
c00049a3:	89 c6                	mov    esi,eax
c00049a5:	85 c0                	test   eax,eax
c00049a7:	74 3e                	je     c00049e7 <f_stat+0x76>
c00049a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049b0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049b3:	89 e0                	mov    eax,esp
c00049b5:	e8 0a f2 ff ff       	call   c0003bc4 <follow_path>
c00049ba:	89 c3                	mov    ebx,eax
c00049bc:	85 c0                	test   eax,eax
c00049be:	75 1b                	jne    c00049db <f_stat+0x6a>
c00049c0:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049c5:	75 0f                	jne    c00049d6 <f_stat+0x65>
c00049c7:	85 ff                	test   edi,edi
c00049c9:	74 10                	je     c00049db <f_stat+0x6a>
c00049cb:	89 fa                	mov    edx,edi
c00049cd:	89 e0                	mov    eax,esp
c00049cf:	e8 e2 e7 ff ff       	call   c00031b6 <get_fileinfo>
c00049d4:	eb 05                	jmp    c00049db <f_stat+0x6a>
c00049d6:	bb 06 00 00 00       	mov    ebx,0x6
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	56                   	push   esi
c00049df:	e8 3c 14 00 00       	call   c0005e20 <ff_memfree>
c00049e4:	83 c4 10             	add    esp,0x10
c00049e7:	83 c4 30             	add    esp,0x30
c00049ea:	89 d8                	mov    eax,ebx
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	c3                   	ret    

c00049f0 <f_getfree>:
c00049f0:	55                   	push   ebp
c00049f1:	31 c9                	xor    ecx,ecx
c00049f3:	57                   	push   edi
c00049f4:	56                   	push   esi
c00049f5:	53                   	push   ebx
c00049f6:	83 ec 2c             	sub    esp,0x2c
c00049f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049fd:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a01:	e8 74 dc ff ff       	call   c000267a <mount_volume>
c0004a06:	89 c7                	mov    edi,eax
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 df 00 00 00    	jne    c0004aef <f_getfree+0xff>
c0004a10:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004a14:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a18:	89 30                	mov    DWORD PTR [eax],esi
c0004a1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004a1d:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004a20:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004a23:	39 d0                	cmp    eax,edx
c0004a25:	77 0b                	ja     c0004a32 <f_getfree+0x42>
c0004a27:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a2b:	89 01                	mov    DWORD PTR [ecx],eax
c0004a2d:	e9 bd 00 00 00       	jmp    c0004aef <f_getfree+0xff>
c0004a32:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004a35:	75 29                	jne    c0004a60 <f_getfree+0x70>
c0004a37:	bd 02 00 00 00       	mov    ebp,0x2
c0004a3c:	31 db                	xor    ebx,ebx
c0004a3e:	89 ea                	mov    edx,ebp
c0004a40:	89 f0                	mov    eax,esi
c0004a42:	e8 b6 e9 ff ff       	call   c00033fd <get_fat.isra.2>
c0004a47:	83 f8 ff             	cmp    eax,0xffffffff
c0004a4a:	74 7d                	je     c0004ac9 <f_getfree+0xd9>
c0004a4c:	83 f8 01             	cmp    eax,0x1
c0004a4f:	74 7f                	je     c0004ad0 <f_getfree+0xe0>
c0004a51:	83 d3 00             	adc    ebx,0x0
c0004a54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a58:	45                   	inc    ebp
c0004a59:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004a5c:	77 e0                	ja     c0004a3e <f_getfree+0x4e>
c0004a5e:	eb 79                	jmp    c0004ad9 <f_getfree+0xe9>
c0004a60:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004a63:	31 db                	xor    ebx,ebx
c0004a65:	31 f6                	xor    esi,esi
c0004a67:	85 f6                	test   esi,esi
c0004a69:	75 18                	jne    c0004a83 <f_getfree+0x93>
c0004a6b:	8d 42 01             	lea    eax,[edx+0x1]
c0004a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a76:	e8 ac da ff ff       	call   c0002527 <move_window>
c0004a7b:	85 c0                	test   eax,eax
c0004a7d:	75 58                	jne    c0004ad7 <f_getfree+0xe7>
c0004a7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a8b:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004a8f:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a92:	75 13                	jne    c0004aa7 <f_getfree+0xb7>
c0004a94:	e8 27 d5 ff ff       	call   c0001fc0 <ld_word>
c0004a99:	0f b7 c0             	movzx  eax,ax
c0004a9c:	83 f8 01             	cmp    eax,0x1
c0004a9f:	83 d3 00             	adc    ebx,0x0
c0004aa2:	83 c6 02             	add    esi,0x2
c0004aa5:	eb 13                	jmp    c0004aba <f_getfree+0xca>
c0004aa7:	e8 21 d5 ff ff       	call   c0001fcd <ld_dword>
c0004aac:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004ab1:	83 f8 01             	cmp    eax,0x1
c0004ab4:	83 d3 00             	adc    ebx,0x0
c0004ab7:	83 c6 04             	add    esi,0x4
c0004aba:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004ac0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ac4:	4d                   	dec    ebp
c0004ac5:	75 a0                	jne    c0004a67 <f_getfree+0x77>
c0004ac7:	eb 10                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ac9:	bf 01 00 00 00       	mov    edi,0x1
c0004ace:	eb 09                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad0:	bf 02 00 00 00       	mov    edi,0x2
c0004ad5:	eb 02                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad7:	89 c7                	mov    edi,eax
c0004ad9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004add:	89 18                	mov    DWORD PTR [eax],ebx
c0004adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae3:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ae6:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004ae9:	83 ca 01             	or     edx,0x1
c0004aec:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004aef:	83 c4 2c             	add    esp,0x2c
c0004af2:	89 f8                	mov    eax,edi
c0004af4:	5b                   	pop    ebx
c0004af5:	5e                   	pop    esi
c0004af6:	5f                   	pop    edi
c0004af7:	5d                   	pop    ebp
c0004af8:	c3                   	ret    

c0004af9 <f_truncate>:
c0004af9:	56                   	push   esi
c0004afa:	53                   	push   ebx
c0004afb:	83 ec 14             	sub    esp,0x14
c0004afe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b06:	89 d8                	mov    eax,ebx
c0004b08:	e8 71 d9 ff ff       	call   c000247e <validate>
c0004b0d:	89 c6                	mov    esi,eax
c0004b0f:	85 c0                	test   eax,eax
c0004b11:	0f 85 c4 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b17:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b1b:	85 f6                	test   esi,esi
c0004b1d:	0f 85 b8 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b23:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b27:	0f 84 a9 00 00 00    	je     c0004bd6 <f_truncate+0xdd>
c0004b2d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b30:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b33:	0f 83 a2 00 00 00    	jae    c0004bdb <f_truncate+0xe2>
c0004b39:	85 c0                	test   eax,eax
c0004b3b:	75 15                	jne    c0004b52 <f_truncate+0x59>
c0004b3d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b40:	31 c9                	xor    ecx,ecx
c0004b42:	89 d8                	mov    eax,ebx
c0004b44:	e8 bf eb ff ff       	call   c0003708 <remove_chain>
c0004b49:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b50:	eb 35                	jmp    c0004b87 <f_truncate+0x8e>
c0004b52:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b57:	e8 a1 e8 ff ff       	call   c00033fd <get_fat.isra.2>
c0004b5c:	89 c2                	mov    edx,eax
c0004b5e:	b8 01 00 00 00       	mov    eax,0x1
c0004b63:	83 fa ff             	cmp    edx,0xffffffff
c0004b66:	74 1f                	je     c0004b87 <f_truncate+0x8e>
c0004b68:	b8 02 00 00 00       	mov    eax,0x2
c0004b6d:	83 fa 01             	cmp    edx,0x1
c0004b70:	74 15                	je     c0004b87 <f_truncate+0x8e>
c0004b72:	31 c0                	xor    eax,eax
c0004b74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b78:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b7b:	76 0a                	jbe    c0004b87 <f_truncate+0x8e>
c0004b7d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b80:	89 d8                	mov    eax,ebx
c0004b82:	e8 81 eb ff ff       	call   c0003708 <remove_chain>
c0004b87:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b8a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b8d:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b90:	83 ca 40             	or     edx,0x40
c0004b93:	85 c0                	test   eax,eax
c0004b95:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b98:	75 35                	jne    c0004bcf <f_truncate+0xd6>
c0004b9a:	80 e2 80             	and    dl,0x80
c0004b9d:	74 3c                	je     c0004bdb <f_truncate+0xe2>
c0004b9f:	6a 01                	push   0x1
c0004ba1:	8d 43 28             	lea    eax,[ebx+0x28]
c0004ba4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004ba7:	50                   	push   eax
c0004ba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bb0:	50                   	push   eax
c0004bb1:	e8 d5 d3 ff ff       	call   c0001f8b <disk_write>
c0004bb6:	83 c4 10             	add    esp,0x10
c0004bb9:	85 c0                	test   eax,eax
c0004bbb:	75 0d                	jne    c0004bca <f_truncate+0xd1>
c0004bbd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bc0:	31 f6                	xor    esi,esi
c0004bc2:	83 e0 7f             	and    eax,0x7f
c0004bc5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004bc8:	eb 11                	jmp    c0004bdb <f_truncate+0xe2>
c0004bca:	b8 01 00 00 00       	mov    eax,0x1
c0004bcf:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	eb 05                	jmp    c0004bdb <f_truncate+0xe2>
c0004bd6:	be 07 00 00 00       	mov    esi,0x7
c0004bdb:	89 f0                	mov    eax,esi
c0004bdd:	83 c4 14             	add    esp,0x14
c0004be0:	5b                   	pop    ebx
c0004be1:	5e                   	pop    esi
c0004be2:	c3                   	ret    

c0004be3 <f_unlink>:
c0004be3:	55                   	push   ebp
c0004be4:	b9 02 00 00 00       	mov    ecx,0x2
c0004be9:	57                   	push   edi
c0004bea:	56                   	push   esi
c0004beb:	53                   	push   ebx
c0004bec:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004bf2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bf6:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bfd:	e8 78 da ff ff       	call   c000267a <mount_volume>
c0004c02:	85 c0                	test   eax,eax
c0004c04:	0f 85 f0 00 00 00    	jne    c0004cfa <f_unlink+0x117>
c0004c0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c0e:	83 ec 0c             	sub    esp,0xc
c0004c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c15:	68 00 02 00 00       	push   0x200
c0004c1a:	e8 e9 11 00 00       	call   c0005e08 <ff_memalloc>
c0004c1f:	83 c4 10             	add    esp,0x10
c0004c22:	89 c3                	mov    ebx,eax
c0004c24:	b8 11 00 00 00       	mov    eax,0x11
c0004c29:	85 db                	test   ebx,ebx
c0004c2b:	0f 84 c9 00 00 00    	je     c0004cfa <f_unlink+0x117>
c0004c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c35:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c3c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c43:	e8 7c ef ff ff       	call   c0003bc4 <follow_path>
c0004c48:	85 c0                	test   eax,eax
c0004c4a:	0f 85 96 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c50:	b8 06 00 00 00       	mov    eax,0x6
c0004c55:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c5a:	0f 85 86 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c60:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c65:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c6b:	74 07                	je     c0004c74 <f_unlink+0x91>
c0004c6d:	b8 07 00 00 00       	mov    eax,0x7
c0004c72:	eb 72                	jmp    c0004ce6 <f_unlink+0x103>
c0004c74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c78:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7c:	8a 07                	mov    al,BYTE PTR [edi]
c0004c7e:	e8 29 e7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004c83:	83 e5 10             	and    ebp,0x10
c0004c86:	89 c6                	mov    esi,eax
c0004c88:	75 0f                	jne    c0004c99 <f_unlink+0xb6>
c0004c8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c8e:	e8 95 ed ff ff       	call   c0003a28 <dir_remove>
c0004c93:	85 c0                	test   eax,eax
c0004c95:	74 2f                	je     c0004cc6 <f_unlink+0xe3>
c0004c97:	eb 4d                	jmp    c0004ce6 <f_unlink+0x103>
c0004c99:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004c9d:	31 d2                	xor    edx,edx
c0004c9f:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004ca3:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ca7:	e8 55 e8 ff ff       	call   c0003501 <dir_sdi>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	75 36                	jne    c0004ce6 <f_unlink+0x103>
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cb6:	e8 45 ec ff ff       	call   c0003900 <dir_read>
c0004cbb:	85 c0                	test   eax,eax
c0004cbd:	74 ae                	je     c0004c6d <f_unlink+0x8a>
c0004cbf:	83 f8 04             	cmp    eax,0x4
c0004cc2:	75 22                	jne    c0004ce6 <f_unlink+0x103>
c0004cc4:	eb c4                	jmp    c0004c8a <f_unlink+0xa7>
c0004cc6:	85 f6                	test   esi,esi
c0004cc8:	75 0b                	jne    c0004cd5 <f_unlink+0xf2>
c0004cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cce:	e8 8b e2 ff ff       	call   c0002f5e <sync_fs>
c0004cd3:	eb 11                	jmp    c0004ce6 <f_unlink+0x103>
c0004cd5:	31 c9                	xor    ecx,ecx
c0004cd7:	89 f2                	mov    edx,esi
c0004cd9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cdd:	e8 26 ea ff ff       	call   c0003708 <remove_chain>
c0004ce2:	85 c0                	test   eax,eax
c0004ce4:	74 e4                	je     c0004cca <f_unlink+0xe7>
c0004ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cea:	83 ec 0c             	sub    esp,0xc
c0004ced:	53                   	push   ebx
c0004cee:	e8 2d 11 00 00       	call   c0005e20 <ff_memfree>
c0004cf3:	83 c4 10             	add    esp,0x10
c0004cf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cfa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d00:	5b                   	pop    ebx
c0004d01:	5e                   	pop    esi
c0004d02:	5f                   	pop    edi
c0004d03:	5d                   	pop    ebp
c0004d04:	c3                   	ret    

c0004d05 <f_mkdir>:
c0004d05:	57                   	push   edi
c0004d06:	b9 02 00 00 00       	mov    ecx,0x2
c0004d0b:	56                   	push   esi
c0004d0c:	53                   	push   ebx
c0004d0d:	83 ec 50             	sub    esp,0x50
c0004d10:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 5d d9 ff ff       	call   c000267a <mount_volume>
c0004d1d:	89 c3                	mov    ebx,eax
c0004d1f:	85 c0                	test   eax,eax
c0004d21:	0f 85 70 01 00 00    	jne    c0004e97 <f_mkdir+0x192>
c0004d27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d2b:	bb 11 00 00 00       	mov    ebx,0x11
c0004d30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004d34:	83 ec 0c             	sub    esp,0xc
c0004d37:	68 00 02 00 00       	push   0x200
c0004d3c:	e8 c7 10 00 00       	call   c0005e08 <ff_memalloc>
c0004d41:	83 c4 10             	add    esp,0x10
c0004d44:	89 c7                	mov    edi,eax
c0004d46:	85 c0                	test   eax,eax
c0004d48:	0f 84 49 01 00 00    	je     c0004e97 <f_mkdir+0x192>
c0004d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d52:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d56:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d59:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d5d:	e8 62 ee ff ff       	call   c0003bc4 <follow_path>
c0004d62:	89 c3                	mov    ebx,eax
c0004d64:	85 c0                	test   eax,eax
c0004d66:	74 3e                	je     c0004da6 <f_mkdir+0xa1>
c0004d68:	83 f8 04             	cmp    eax,0x4
c0004d6b:	75 3e                	jne    c0004dab <f_mkdir+0xa6>
c0004d6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d71:	31 d2                	xor    edx,edx
c0004d73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d77:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d7b:	e8 49 e8 ff ff       	call   c00035c9 <create_chain>
c0004d80:	89 c6                	mov    esi,eax
c0004d82:	85 c0                	test   eax,eax
c0004d84:	74 0c                	je     c0004d92 <f_mkdir+0x8d>
c0004d86:	bb 02 00 00 00       	mov    ebx,0x2
c0004d8b:	83 f8 01             	cmp    eax,0x1
c0004d8e:	74 07                	je     c0004d97 <f_mkdir+0x92>
c0004d90:	eb 2a                	jmp    c0004dbc <f_mkdir+0xb7>
c0004d92:	bb 07 00 00 00       	mov    ebx,0x7
c0004d97:	31 c9                	xor    ecx,ecx
c0004d99:	89 f2                	mov    edx,esi
c0004d9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d9f:	e8 64 e9 ff ff       	call   c0003708 <remove_chain>
c0004da4:	eb 05                	jmp    c0004dab <f_mkdir+0xa6>
c0004da6:	bb 08 00 00 00       	mov    ebx,0x8
c0004dab:	83 ec 0c             	sub    esp,0xc
c0004dae:	57                   	push   edi
c0004daf:	e8 6c 10 00 00       	call   c0005e20 <ff_memfree>
c0004db4:	83 c4 10             	add    esp,0x10
c0004db7:	e9 db 00 00 00       	jmp    c0004e97 <f_mkdir+0x192>
c0004dbc:	bb 01 00 00 00       	mov    ebx,0x1
c0004dc1:	83 f8 ff             	cmp    eax,0xffffffff
c0004dc4:	74 d1                	je     c0004d97 <f_mkdir+0x92>
c0004dc6:	89 f2                	mov    edx,esi
c0004dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dcc:	e8 f1 dc ff ff       	call   c0002ac2 <dir_clear>
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	85 c0                	test   eax,eax
c0004dd5:	75 c0                	jne    c0004d97 <f_mkdir+0x92>
c0004dd7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de0:	ba 20 00 00 00       	mov    edx,0x20
c0004de5:	83 c0 34             	add    eax,0x34
c0004de8:	e8 14 d2 ff ff       	call   c0002001 <mem_set>
c0004ded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df1:	ba 00 00 21 50       	mov    edx,0x50210000
c0004df6:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004dfa:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004dfe:	83 c0 4a             	add    eax,0x4a
c0004e01:	e8 e3 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0a:	89 f1                	mov    ecx,esi
c0004e0c:	8d 50 34             	lea    edx,[eax+0x34]
c0004e0f:	e8 c1 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e18:	b9 20 00 00 00       	mov    ecx,0x20
c0004e1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004e20:	83 c0 54             	add    eax,0x54
c0004e23:	e8 c4 d1 ff ff       	call   c0001fec <mem_cpy>
c0004e28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e2c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e30:	8d 50 54             	lea    edx,[eax+0x54]
c0004e33:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e37:	e8 99 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e40:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e44:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e48:	e8 0c ee ff ff       	call   c0003c59 <dir_register>
c0004e4d:	89 c3                	mov    ebx,eax
c0004e4f:	85 c0                	test   eax,eax
c0004e51:	0f 85 40 ff ff ff    	jne    c0004d97 <f_mkdir+0x92>
c0004e57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e5b:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e60:	83 c0 16             	add    eax,0x16
c0004e63:	e8 81 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e68:	89 f1                	mov    ecx,esi
c0004e6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e72:	e8 5e e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e7b:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e83:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8b:	e8 ce e0 ff ff       	call   c0002f5e <sync_fs>
c0004e90:	89 c3                	mov    ebx,eax
c0004e92:	e9 14 ff ff ff       	jmp    c0004dab <f_mkdir+0xa6>
c0004e97:	83 c4 50             	add    esp,0x50
c0004e9a:	89 d8                	mov    eax,ebx
c0004e9c:	5b                   	pop    ebx
c0004e9d:	5e                   	pop    esi
c0004e9e:	5f                   	pop    edi
c0004e9f:	c3                   	ret    

c0004ea0 <f_rename>:
c0004ea0:	57                   	push   edi
c0004ea1:	56                   	push   esi
c0004ea2:	53                   	push   ebx
c0004ea3:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ea9:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004eb0:	e8 7c d5 ff ff       	call   c0002431 <get_ldnumber>
c0004eb5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ebe:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ec5:	e8 b0 d7 ff ff       	call   c000267a <mount_volume>
c0004eca:	85 c0                	test   eax,eax
c0004ecc:	0f 85 7c 01 00 00    	jne    c000504e <f_rename+0x1ae>
c0004ed2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004edd:	68 00 02 00 00       	push   0x200
c0004ee2:	e8 21 0f 00 00       	call   c0005e08 <ff_memalloc>
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	89 c6                	mov    esi,eax
c0004eec:	b8 11 00 00 00       	mov    eax,0x11
c0004ef1:	85 f6                	test   esi,esi
c0004ef3:	0f 84 55 01 00 00    	je     c000504e <f_rename+0x1ae>
c0004ef9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efd:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f04:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f07:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f0b:	e8 b4 ec ff ff       	call   c0003bc4 <follow_path>
c0004f10:	85 c0                	test   eax,eax
c0004f12:	0f 85 22 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f18:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f1c:	b8 06 00 00 00       	mov    eax,0x6
c0004f21:	80 e2 a0             	and    dl,0xa0
c0004f24:	0f 85 10 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f2a:	b9 20 00 00 00       	mov    ecx,0x20
c0004f2f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f37:	e8 b0 d0 ff ff       	call   c0001fec <mem_cpy>
c0004f3c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f41:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f45:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f49:	e8 9e d0 ff ff       	call   c0001fec <mem_cpy>
c0004f4e:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f59:	e8 66 ec ff ff       	call   c0003bc4 <follow_path>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	75 20                	jne    c0004f82 <f_rename+0xe2>
c0004f62:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f66:	b8 08 00 00 00       	mov    eax,0x8
c0004f6b:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f6f:	0f 85 c5 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f79:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f80:	eb 03                	jmp    c0004f85 <f_rename+0xe5>
c0004f82:	83 f8 04             	cmp    eax,0x4
c0004f85:	0f 85 af 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f8b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f8f:	e8 c5 ec ff ff       	call   c0003c59 <dir_register>
c0004f94:	85 c0                	test   eax,eax
c0004f96:	0f 85 9e 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f9c:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fa3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fa8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fab:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004faf:	e8 38 d0 ff ff       	call   c0001fec <mem_cpy>
c0004fb4:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fb8:	a8 10                	test   al,0x10
c0004fba:	75 03                	jne    c0004fbf <f_rename+0x11f>
c0004fbc:	83 c8 20             	or     eax,0x20
c0004fbf:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fc6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fca:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fce:	74 54                	je     c0005024 <f_rename+0x184>
c0004fd0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004fd4:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fd8:	74 4a                	je     c0005024 <f_rename+0x184>
c0004fda:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fde:	89 da                	mov    edx,ebx
c0004fe0:	8a 07                	mov    al,BYTE PTR [edi]
c0004fe2:	e8 c5 e3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004fe7:	89 c2                	mov    edx,eax
c0004fe9:	89 f8                	mov    eax,edi
c0004feb:	e8 27 d2 ff ff       	call   c0002217 <clst2sect>
c0004ff0:	89 c2                	mov    edx,eax
c0004ff2:	b8 02 00 00 00       	mov    eax,0x2
c0004ff7:	85 d2                	test   edx,edx
c0004ff9:	74 3f                	je     c000503a <f_rename+0x19a>
c0004ffb:	89 f8                	mov    eax,edi
c0004ffd:	e8 25 d5 ff ff       	call   c0002527 <move_window>
c0005002:	85 c0                	test   eax,eax
c0005004:	75 34                	jne    c000503a <f_rename+0x19a>
c0005006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000500a:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000500e:	75 14                	jne    c0005024 <f_rename+0x184>
c0005010:	8d 50 54             	lea    edx,[eax+0x54]
c0005013:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005017:	e8 b9 e3 ff ff       	call   c00033d5 <st_clust.isra.1>
c000501c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005020:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005024:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005028:	e8 fb e9 ff ff       	call   c0003a28 <dir_remove>
c000502d:	85 c0                	test   eax,eax
c000502f:	75 09                	jne    c000503a <f_rename+0x19a>
c0005031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005035:	e8 24 df ff ff       	call   c0002f5e <sync_fs>
c000503a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000503e:	83 ec 0c             	sub    esp,0xc
c0005041:	56                   	push   esi
c0005042:	e8 d9 0d 00 00       	call   c0005e20 <ff_memfree>
c0005047:	83 c4 10             	add    esp,0x10
c000504a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000504e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005054:	5b                   	pop    ebx
c0005055:	5e                   	pop    esi
c0005056:	5f                   	pop    edi
c0005057:	c3                   	ret    

c0005058 <f_chmod>:
c0005058:	57                   	push   edi
c0005059:	b9 02 00 00 00       	mov    ecx,0x2
c000505e:	56                   	push   esi
c000505f:	53                   	push   ebx
c0005060:	83 ec 50             	sub    esp,0x50
c0005063:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005067:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000506b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000506f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005073:	e8 02 d6 ff ff       	call   c000267a <mount_volume>
c0005078:	85 c0                	test   eax,eax
c000507a:	0f 85 81 00 00 00    	jne    c0005101 <f_chmod+0xa9>
c0005080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005084:	83 ec 0c             	sub    esp,0xc
c0005087:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000508b:	68 00 02 00 00       	push   0x200
c0005090:	e8 73 0d 00 00       	call   c0005e08 <ff_memalloc>
c0005095:	83 c4 10             	add    esp,0x10
c0005098:	89 c6                	mov    esi,eax
c000509a:	b8 11 00 00 00       	mov    eax,0x11
c000509f:	85 f6                	test   esi,esi
c00050a1:	74 5e                	je     c0005101 <f_chmod+0xa9>
c00050a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b2:	e8 0d eb ff ff       	call   c0003bc4 <follow_path>
c00050b7:	85 c0                	test   eax,eax
c00050b9:	75 32                	jne    c00050ed <f_chmod+0x95>
c00050bb:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050bf:	b8 06 00 00 00       	mov    eax,0x6
c00050c4:	80 e2 a0             	and    dl,0xa0
c00050c7:	75 24                	jne    c00050ed <f_chmod+0x95>
c00050c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cd:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050d0:	31 d7                	xor    edi,edx
c00050d2:	21 fb                	and    ebx,edi
c00050d4:	83 e3 27             	and    ebx,0x27
c00050d7:	31 d3                	xor    ebx,edx
c00050d9:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e8:	e8 71 de ff ff       	call   c0002f5e <sync_fs>
c00050ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050f1:	83 ec 0c             	sub    esp,0xc
c00050f4:	56                   	push   esi
c00050f5:	e8 26 0d 00 00       	call   c0005e20 <ff_memfree>
c00050fa:	83 c4 10             	add    esp,0x10
c00050fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005101:	83 c4 50             	add    esp,0x50
c0005104:	5b                   	pop    ebx
c0005105:	5e                   	pop    esi
c0005106:	5f                   	pop    edi
c0005107:	c3                   	ret    

c0005108 <f_utime>:
c0005108:	56                   	push   esi
c0005109:	b9 02 00 00 00       	mov    ecx,0x2
c000510e:	53                   	push   ebx
c000510f:	83 ec 54             	sub    esp,0x54
c0005112:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005116:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000511a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000511e:	e8 57 d5 ff ff       	call   c000267a <mount_volume>
c0005123:	85 c0                	test   eax,eax
c0005125:	0f 85 87 00 00 00    	jne    c00051b2 <f_utime+0xaa>
c000512b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000512f:	83 ec 0c             	sub    esp,0xc
c0005132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005136:	68 00 02 00 00       	push   0x200
c000513b:	e8 c8 0c 00 00       	call   c0005e08 <ff_memalloc>
c0005140:	83 c4 10             	add    esp,0x10
c0005143:	89 c3                	mov    ebx,eax
c0005145:	b8 11 00 00 00       	mov    eax,0x11
c000514a:	85 db                	test   ebx,ebx
c000514c:	74 64                	je     c00051b2 <f_utime+0xaa>
c000514e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005152:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005156:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005159:	8d 44 24 20          	lea    eax,[esp+0x20]
c000515d:	e8 62 ea ff ff       	call   c0003bc4 <follow_path>
c0005162:	85 c0                	test   eax,eax
c0005164:	75 38                	jne    c000519e <f_utime+0x96>
c0005166:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000516a:	b8 06 00 00 00       	mov    eax,0x6
c000516f:	80 e2 a0             	and    dl,0xa0
c0005172:	75 2a                	jne    c000519e <f_utime+0x96>
c0005174:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005178:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c000517c:	c1 e2 10             	shl    edx,0x10
c000517f:	09 c2                	or     edx,eax
c0005181:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005185:	83 c0 16             	add    eax,0x16
c0005188:	e8 5c ce ff ff       	call   c0001fe9 <st_dword>
c000518d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005191:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005195:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005199:	e8 c0 dd ff ff       	call   c0002f5e <sync_fs>
c000519e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a2:	83 ec 0c             	sub    esp,0xc
c00051a5:	53                   	push   ebx
c00051a6:	e8 75 0c 00 00       	call   c0005e20 <ff_memfree>
c00051ab:	83 c4 10             	add    esp,0x10
c00051ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b2:	83 c4 54             	add    esp,0x54
c00051b5:	5b                   	pop    ebx
c00051b6:	5e                   	pop    esi
c00051b7:	c3                   	ret    

c00051b8 <f_getlabel>:
c00051b8:	55                   	push   ebp
c00051b9:	31 c9                	xor    ecx,ecx
c00051bb:	57                   	push   edi
c00051bc:	56                   	push   esi
c00051bd:	53                   	push   ebx
c00051be:	83 ec 5c             	sub    esp,0x5c
c00051c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051c9:	e8 ac d4 ff ff       	call   c000267a <mount_volume>
c00051ce:	89 c6                	mov    esi,eax
c00051d0:	85 c0                	test   eax,eax
c00051d2:	0f 85 27 01 00 00    	jne    c00052ff <f_getlabel+0x147>
c00051d8:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00051dd:	0f 84 d0 00 00 00    	je     c00052b3 <f_getlabel+0xfb>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	31 d2                	xor    edx,edx
c00051e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051ed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051f9:	e8 03 e3 ff ff       	call   c0003501 <dir_sdi>
c00051fe:	85 c0                	test   eax,eax
c0005200:	0f 85 a1 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c0005206:	ba 01 00 00 00       	mov    edx,0x1
c000520b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000520f:	e8 ec e6 ff ff       	call   c0003900 <dir_read>
c0005214:	85 c0                	test   eax,eax
c0005216:	0f 85 8b 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c000521c:	31 db                	xor    ebx,ebx
c000521e:	31 c9                	xor    ecx,ecx
c0005220:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005224:	8d 79 01             	lea    edi,[ecx+0x1]
c0005227:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000522c:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005235:	e8 06 ce ff ff       	call   c0002040 <dbc_1st>
c000523a:	85 c0                	test   eax,eax
c000523c:	74 16                	je     c0005254 <f_getlabel+0x9c>
c000523e:	83 ff 0b             	cmp    edi,0xb
c0005241:	74 11                	je     c0005254 <f_getlabel+0x9c>
c0005243:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000524c:	8d 79 02             	lea    edi,[ecx+0x2]
c000524f:	c1 e0 08             	shl    eax,0x8
c0005252:	09 c2                	or     edx,eax
c0005254:	0f b7 d2             	movzx  edx,dx
c0005257:	50                   	push   eax
c0005258:	50                   	push   eax
c0005259:	68 b5 01 00 00       	push   0x1b5
c000525e:	52                   	push   edx
c000525f:	e8 74 0c 00 00       	call   c0005ed8 <ff_oem2uni>
c0005264:	83 c4 10             	add    esp,0x10
c0005267:	0f b7 c0             	movzx  eax,ax
c000526a:	85 c0                	test   eax,eax
c000526c:	74 22                	je     c0005290 <f_getlabel+0xd8>
c000526e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005272:	b9 04 00 00 00       	mov    ecx,0x4
c0005277:	01 da                	add    edx,ebx
c0005279:	e8 a0 ce ff ff       	call   c000211e <put_utf>
c000527e:	0f b6 c0             	movzx  eax,al
c0005281:	85 c0                	test   eax,eax
c0005283:	74 0b                	je     c0005290 <f_getlabel+0xd8>
c0005285:	01 c3                	add    ebx,eax
c0005287:	83 ff 0b             	cmp    edi,0xb
c000528a:	74 06                	je     c0005292 <f_getlabel+0xda>
c000528c:	89 f9                	mov    ecx,edi
c000528e:	eb 90                	jmp    c0005220 <f_getlabel+0x68>
c0005290:	31 db                	xor    ebx,ebx
c0005292:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0005296:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005299:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c000529d:	74 14                	je     c00052b3 <f_getlabel+0xfb>
c000529f:	4b                   	dec    ebx
c00052a0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00052a3:	74 f1                	je     c0005296 <f_getlabel+0xde>
c00052a5:	eb 0c                	jmp    c00052b3 <f_getlabel+0xfb>
c00052a7:	83 f8 04             	cmp    eax,0x4
c00052aa:	75 51                	jne    c00052fd <f_getlabel+0x145>
c00052ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00052b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00052b3:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052b8:	74 45                	je     c00052ff <f_getlabel+0x147>
c00052ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052c1:	e8 61 d2 ff ff       	call   c0002527 <move_window>
c00052c6:	89 c6                	mov    esi,eax
c00052c8:	85 c0                	test   eax,eax
c00052ca:	75 33                	jne    c00052ff <f_getlabel+0x147>
c00052cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052d0:	b8 43 00 00 00       	mov    eax,0x43
c00052d5:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052d8:	83 f9 03             	cmp    ecx,0x3
c00052db:	74 0f                	je     c00052ec <f_getlabel+0x134>
c00052dd:	31 c0                	xor    eax,eax
c00052df:	83 f9 04             	cmp    ecx,0x4
c00052e2:	0f 94 c0             	sete   al
c00052e5:	48                   	dec    eax
c00052e6:	83 e0 c3             	and    eax,0xffffffc3
c00052e9:	83 c0 64             	add    eax,0x64
c00052ec:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052f0:	e8 d8 cc ff ff       	call   c0001fcd <ld_dword>
c00052f5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052f9:	89 07                	mov    DWORD PTR [edi],eax
c00052fb:	eb 02                	jmp    c00052ff <f_getlabel+0x147>
c00052fd:	89 c6                	mov    esi,eax
c00052ff:	83 c4 5c             	add    esp,0x5c
c0005302:	89 f0                	mov    eax,esi
c0005304:	5b                   	pop    ebx
c0005305:	5e                   	pop    esi
c0005306:	5f                   	pop    edi
c0005307:	5d                   	pop    ebp
c0005308:	c3                   	ret    

c0005309 <f_setlabel>:
c0005309:	57                   	push   edi
c000530a:	b9 02 00 00 00       	mov    ecx,0x2
c000530f:	56                   	push   esi
c0005310:	53                   	push   ebx
c0005311:	83 ec 50             	sub    esp,0x50
c0005314:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005318:	8d 44 24 60          	lea    eax,[esp+0x60]
c000531c:	e8 59 d3 ff ff       	call   c000267a <mount_volume>
c0005321:	89 c6                	mov    esi,eax
c0005323:	85 c0                	test   eax,eax
c0005325:	0f 85 65 01 00 00    	jne    c0005490 <f_setlabel+0x187>
c000532b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005330:	ba 20 00 00 00       	mov    edx,0x20
c0005335:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005339:	31 db                	xor    ebx,ebx
c000533b:	e8 c1 cc ff ff       	call   c0002001 <mem_set>
c0005340:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005344:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005347:	76 5d                	jbe    c00053a6 <f_setlabel+0x9d>
c0005349:	8d 44 24 60          	lea    eax,[esp+0x60]
c000534d:	e8 f4 cc ff ff       	call   c0002046 <tchar2uni>
c0005352:	3d ff ff 00 00       	cmp    eax,0xffff
c0005357:	76 0a                	jbe    c0005363 <f_setlabel+0x5a>
c0005359:	be 06 00 00 00       	mov    esi,0x6
c000535e:	e9 2d 01 00 00       	jmp    c0005490 <f_setlabel+0x187>
c0005363:	83 ec 0c             	sub    esp,0xc
c0005366:	50                   	push   eax
c0005367:	e8 e4 0b 00 00       	call   c0005f50 <ff_wtoupper>
c000536c:	5a                   	pop    edx
c000536d:	59                   	pop    ecx
c000536e:	68 b5 01 00 00       	push   0x1b5
c0005373:	50                   	push   eax
c0005374:	e8 bf 0a 00 00       	call   c0005e38 <ff_uni2oem>
c0005379:	83 c4 10             	add    esp,0x10
c000537c:	0f b7 f0             	movzx  esi,ax
c000537f:	89 f7                	mov    edi,esi
c0005381:	85 f6                	test   esi,esi
c0005383:	74 d4                	je     c0005359 <f_setlabel+0x50>
c0005385:	89 f2                	mov    edx,esi
c0005387:	b8 f0 2f 02 c0       	mov    eax,0xc0022ff0
c000538c:	e8 9e cc ff ff       	call   c000202f <chk_chr>
c0005391:	85 c0                	test   eax,eax
c0005393:	75 c4                	jne    c0005359 <f_setlabel+0x50>
c0005395:	81 fe ff 00 00 00    	cmp    esi,0xff
c000539b:	0f 87 c9 00 00 00    	ja     c000546a <f_setlabel+0x161>
c00053a1:	e9 e0 00 00 00       	jmp    c0005486 <f_setlabel+0x17d>
c00053a6:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ab:	74 ac                	je     c0005359 <f_setlabel+0x50>
c00053ad:	85 db                	test   ebx,ebx
c00053af:	74 0e                	je     c00053bf <f_setlabel+0xb6>
c00053b1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053b4:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053b9:	75 04                	jne    c00053bf <f_setlabel+0xb6>
c00053bb:	89 c3                	mov    ebx,eax
c00053bd:	eb ee                	jmp    c00053ad <f_setlabel+0xa4>
c00053bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053c3:	31 d2                	xor    edx,edx
c00053c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053c9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053d5:	e8 27 e1 ff ff       	call   c0003501 <dir_sdi>
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 ac 00 00 00    	jne    c0005490 <f_setlabel+0x187>
c00053e4:	ba 01 00 00 00       	mov    edx,0x1
c00053e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053ed:	e8 0e e5 ff ff       	call   c0003900 <dir_read>
c00053f2:	85 c0                	test   eax,eax
c00053f4:	75 18                	jne    c000540e <f_setlabel+0x105>
c00053f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053fa:	85 db                	test   ebx,ebx
c00053fc:	74 0b                	je     c0005409 <f_setlabel+0x100>
c00053fe:	b9 0b 00 00 00       	mov    ecx,0xb
c0005403:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005407:	eb 47                	jmp    c0005450 <f_setlabel+0x147>
c0005409:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000540c:	eb 47                	jmp    c0005455 <f_setlabel+0x14c>
c000540e:	83 f8 04             	cmp    eax,0x4
c0005411:	75 53                	jne    c0005466 <f_setlabel+0x15d>
c0005413:	85 db                	test   ebx,ebx
c0005415:	74 79                	je     c0005490 <f_setlabel+0x187>
c0005417:	ba 01 00 00 00       	mov    edx,0x1
c000541c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005420:	e8 76 e4 ff ff       	call   c000389b <dir_alloc>
c0005425:	89 c6                	mov    esi,eax
c0005427:	85 c0                	test   eax,eax
c0005429:	75 65                	jne    c0005490 <f_setlabel+0x187>
c000542b:	b9 20 00 00 00       	mov    ecx,0x20
c0005430:	31 d2                	xor    edx,edx
c0005432:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005436:	e8 c6 cb ff ff       	call   c0002001 <mem_set>
c000543b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000543f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005444:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005448:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000544c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005450:	e8 97 cb ff ff       	call   c0001fec <mem_cpy>
c0005455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005459:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000545d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005461:	e8 f8 da ff ff       	call   c0002f5e <sync_fs>
c0005466:	89 c6                	mov    esi,eax
c0005468:	eb 26                	jmp    c0005490 <f_setlabel+0x187>
c000546a:	83 fb 09             	cmp    ebx,0x9
c000546d:	0f 87 e6 fe ff ff    	ja     c0005359 <f_setlabel+0x50>
c0005473:	89 f0                	mov    eax,esi
c0005475:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005479:	43                   	inc    ebx
c000547a:	89 f8                	mov    eax,edi
c000547c:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005480:	43                   	inc    ebx
c0005481:	e9 ba fe ff ff       	jmp    c0005340 <f_setlabel+0x37>
c0005486:	83 fb 0a             	cmp    ebx,0xa
c0005489:	76 ef                	jbe    c000547a <f_setlabel+0x171>
c000548b:	e9 c9 fe ff ff       	jmp    c0005359 <f_setlabel+0x50>
c0005490:	83 c4 50             	add    esp,0x50
c0005493:	89 f0                	mov    eax,esi
c0005495:	5b                   	pop    ebx
c0005496:	5e                   	pop    esi
c0005497:	5f                   	pop    edi
c0005498:	c3                   	ret    

c0005499 <f_expand>:
c0005499:	55                   	push   ebp
c000549a:	57                   	push   edi
c000549b:	56                   	push   esi
c000549c:	53                   	push   ebx
c000549d:	83 ec 2c             	sub    esp,0x2c
c00054a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054b0:	89 d8                	mov    eax,ebx
c00054b2:	e8 c7 cf ff ff       	call   c000247e <validate>
c00054b7:	89 c6                	mov    esi,eax
c00054b9:	85 c0                	test   eax,eax
c00054bb:	0f 85 3b 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054c1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054c5:	85 f6                	test   esi,esi
c00054c7:	0f 85 2f 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054cd:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054d2:	75 0a                	jne    c00054de <f_expand+0x45>
c00054d4:	be 07 00 00 00       	mov    esi,0x7
c00054d9:	e9 1e 01 00 00       	jmp    c00055fc <f_expand+0x163>
c00054de:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054e2:	75 f0                	jne    c00054d4 <f_expand+0x3b>
c00054e4:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054e8:	74 ea                	je     c00054d4 <f_expand+0x3b>
c00054ea:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00054ee:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00054f2:	c1 e1 09             	shl    ecx,0x9
c00054f5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00054f8:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054fc:	0f 95 c0             	setne  al
c00054ff:	31 d2                	xor    edx,edx
c0005501:	0f b6 c0             	movzx  eax,al
c0005504:	89 c7                	mov    edi,eax
c0005506:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000550a:	f7 f1                	div    ecx
c000550c:	01 f8                	add    eax,edi
c000550e:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005511:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005515:	83 ff 01             	cmp    edi,0x1
c0005518:	76 05                	jbe    c000551f <f_expand+0x86>
c000551a:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c000551d:	77 05                	ja     c0005524 <f_expand+0x8b>
c000551f:	bf 02 00 00 00       	mov    edi,0x2
c0005524:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005527:	89 fd                	mov    ebp,edi
c0005529:	31 c9                	xor    ecx,ecx
c000552b:	89 ea                	mov    edx,ebp
c000552d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005531:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005533:	45                   	inc    ebp
c0005534:	e8 c4 de ff ff       	call   c00033fd <get_fat.isra.2>
c0005539:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000553d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005541:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005544:	77 05                	ja     c000554b <f_expand+0xb2>
c0005546:	bd 02 00 00 00       	mov    ebp,0x2
c000554b:	83 f8 01             	cmp    eax,0x1
c000554e:	74 20                	je     c0005570 <f_expand+0xd7>
c0005550:	83 f8 ff             	cmp    eax,0xffffffff
c0005553:	74 25                	je     c000557a <f_expand+0xe1>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 09                	jne    c0005562 <f_expand+0xc9>
c0005559:	41                   	inc    ecx
c000555a:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000555e:	75 07                	jne    c0005567 <f_expand+0xce>
c0005560:	eb 1f                	jmp    c0005581 <f_expand+0xe8>
c0005562:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005565:	31 c9                	xor    ecx,ecx
c0005567:	39 fd                	cmp    ebp,edi
c0005569:	75 c0                	jne    c000552b <f_expand+0x92>
c000556b:	e9 64 ff ff ff       	jmp    c00054d4 <f_expand+0x3b>
c0005570:	be 02 00 00 00       	mov    esi,0x2
c0005575:	e9 82 00 00 00       	jmp    c00055fc <f_expand+0x163>
c000557a:	be 01 00 00 00       	mov    esi,0x1
c000557f:	eb 7b                	jmp    c00055fc <f_expand+0x163>
c0005581:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005586:	74 2b                	je     c00055b3 <f_expand+0x11a>
c0005588:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000558b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000558f:	85 ed                	test   ebp,ebp
c0005591:	74 24                	je     c00055b7 <f_expand+0x11e>
c0005593:	83 c9 ff             	or     ecx,0xffffffff
c0005596:	83 fd 01             	cmp    ebp,0x1
c0005599:	74 03                	je     c000559e <f_expand+0x105>
c000559b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000559e:	89 fa                	mov    edx,edi
c00055a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055a4:	e8 c2 d3 ff ff       	call   c000296b <put_fat>
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 4d                	jne    c00055fa <f_expand+0x161>
c00055ad:	89 f8                	mov    eax,edi
c00055af:	4d                   	dec    ebp
c00055b0:	47                   	inc    edi
c00055b1:	eb dc                	jmp    c000558f <f_expand+0xf6>
c00055b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055b6:	48                   	dec    eax
c00055b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055bb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055c0:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055c3:	74 37                	je     c00055fc <f_expand+0x163>
c00055c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055c8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055d5:	83 c8 40             	or     eax,0x40
c00055d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055db:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055de:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055e1:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055e4:	39 c8                	cmp    eax,ecx
c00055e6:	77 14                	ja     c00055fc <f_expand+0x163>
c00055e8:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055ec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055ef:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055f2:	83 c8 01             	or     eax,0x1
c00055f5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055f8:	eb 02                	jmp    c00055fc <f_expand+0x163>
c00055fa:	89 c6                	mov    esi,eax
c00055fc:	83 c4 2c             	add    esp,0x2c
c00055ff:	89 f0                	mov    eax,esi
c0005601:	5b                   	pop    ebx
c0005602:	5e                   	pop    esi
c0005603:	5f                   	pop    edi
c0005604:	5d                   	pop    ebp
c0005605:	c3                   	ret    

c0005606 <f_mkfs>:
c0005606:	55                   	push   ebp
c0005607:	57                   	push   edi
c0005608:	56                   	push   esi
c0005609:	be 0b 00 00 00       	mov    esi,0xb
c000560e:	53                   	push   ebx
c000560f:	83 ec 5c             	sub    esp,0x5c
c0005612:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005616:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000561a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000561e:	e8 0e ce ff ff       	call   c0002431 <get_ldnumber>
c0005623:	85 c0                	test   eax,eax
c0005625:	0f 88 d1 07 00 00    	js     c0005dfc <f_mkfs+0x7f6>
c000562b:	8b 14 85 a0 94 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6b60]
c0005632:	85 d2                	test   edx,edx
c0005634:	74 03                	je     c0005639 <f_mkfs+0x33>
c0005636:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005639:	85 db                	test   ebx,ebx
c000563b:	75 05                	jne    c0005642 <f_mkfs+0x3c>
c000563d:	bb e0 2f 02 c0       	mov    ebx,0xc0022fe0
c0005642:	83 ec 0c             	sub    esp,0xc
c0005645:	0f b6 c0             	movzx  eax,al
c0005648:	be 03 00 00 00       	mov    esi,0x3
c000564d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005655:	e8 18 c9 ff ff       	call   c0001f72 <disk_initialize>
c000565a:	83 c4 10             	add    esp,0x10
c000565d:	a8 01                	test   al,0x1
c000565f:	0f 85 97 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005665:	be 0a 00 00 00       	mov    esi,0xa
c000566a:	a8 04                	test   al,0x4
c000566c:	0f 85 8a 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005672:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005675:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005679:	85 c0                	test   eax,eax
c000567b:	75 20                	jne    c000569d <f_mkfs+0x97>
c000567d:	51                   	push   ecx
c000567e:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005682:	50                   	push   eax
c0005683:	6a 03                	push   0x3
c0005685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005689:	e8 13 c9 ff ff       	call   c0001fa1 <disk_ioctl>
c000568e:	83 c4 10             	add    esp,0x10
c0005691:	85 c0                	test   eax,eax
c0005693:	74 08                	je     c000569d <f_mkfs+0x97>
c0005695:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000569d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056a1:	8d 42 ff             	lea    eax,[edx-0x1]
c00056a4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056a9:	77 04                	ja     c00056af <f_mkfs+0xa9>
c00056ab:	85 c2                	test   edx,eax
c00056ad:	74 08                	je     c00056b7 <f_mkfs+0xb1>
c00056af:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056b7:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056ba:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056c2:	48                   	dec    eax
c00056c3:	3c 01                	cmp    al,0x1
c00056c5:	76 05                	jbe    c00056cc <f_mkfs+0xc6>
c00056c7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00056d3:	48                   	dec    eax
c00056d4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056d9:	77 07                	ja     c00056e2 <f_mkfs+0xdc>
c00056db:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00056e0:	74 08                	je     c00056ea <f_mkfs+0xe4>
c00056e2:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00056ea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056ed:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056f3:	77 07                	ja     c00056fc <f_mkfs+0xf6>
c00056f5:	8d 47 ff             	lea    eax,[edi-0x1]
c00056f8:	85 f8                	test   eax,edi
c00056fa:	74 02                	je     c00056fe <f_mkfs+0xf8>
c00056fc:	31 ff                	xor    edi,edi
c00056fe:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005706:	77 0a                	ja     c0005712 <f_mkfs+0x10c>
c0005708:	be 11 00 00 00       	mov    esi,0x11
c000570d:	e9 ea 06 00 00       	jmp    c0005dfc <f_mkfs+0x7f6>
c0005712:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005714:	85 ed                	test   ebp,ebp
c0005716:	89 eb                	mov    ebx,ebp
c0005718:	75 1e                	jne    c0005738 <f_mkfs+0x132>
c000571a:	83 ec 0c             	sub    esp,0xc
c000571d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005724:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005729:	50                   	push   eax
c000572a:	e8 d9 06 00 00       	call   c0005e08 <ff_memalloc>
c000572f:	83 c4 10             	add    esp,0x10
c0005732:	89 c3                	mov    ebx,eax
c0005734:	85 c0                	test   eax,eax
c0005736:	74 d0                	je     c0005708 <f_mkfs+0x102>
c0005738:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005740:	52                   	push   edx
c0005741:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005745:	50                   	push   eax
c0005746:	6a 01                	push   0x1
c0005748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000574c:	e8 50 c8 ff ff       	call   c0001fa1 <disk_ioctl>
c0005751:	83 c4 10             	add    esp,0x10
c0005754:	85 c0                	test   eax,eax
c0005756:	0f 85 49 06 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c000575c:	89 f0                	mov    eax,esi
c000575e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005766:	83 e0 08             	and    eax,0x8
c0005769:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000576d:	75 18                	jne    c0005787 <f_mkfs+0x181>
c000576f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005773:	83 f8 3f             	cmp    eax,0x3f
c0005776:	76 0f                	jbe    c0005787 <f_mkfs+0x181>
c0005778:	83 e8 3f             	sub    eax,0x3f
c000577b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005783:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005787:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000578b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000578f:	83 f8 7f             	cmp    eax,0x7f
c0005792:	0f 86 5b 02 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005798:	b9 80 00 00 00       	mov    ecx,0x80
c000579d:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057a3:	77 05                	ja     c00057aa <f_mkfs+0x1a4>
c00057a5:	c1 ef 09             	shr    edi,0x9
c00057a8:	89 f9                	mov    ecx,edi
c00057aa:	89 f0                	mov    eax,esi
c00057ac:	89 f7                	mov    edi,esi
c00057ae:	83 e0 01             	and    eax,0x1
c00057b1:	83 e7 02             	and    edi,0x2
c00057b4:	0f b6 c0             	movzx  eax,al
c00057b7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057bb:	74 0a                	je     c00057c7 <f_mkfs+0x1c1>
c00057bd:	85 c0                	test   eax,eax
c00057bf:	0f 84 4f 01 00 00    	je     c0005914 <f_mkfs+0x30e>
c00057c5:	eb 37                	jmp    c00057fe <f_mkfs+0x1f8>
c00057c7:	be 13 00 00 00       	mov    esi,0x13
c00057cc:	85 c0                	test   eax,eax
c00057ce:	75 2e                	jne    c00057fe <f_mkfs+0x1f8>
c00057d0:	e9 e7 05 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00057d5:	83 f8 02             	cmp    eax,0x2
c00057d8:	0f 85 0d 02 00 00    	jne    c00059eb <f_mkfs+0x3e5>
c00057de:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057e4:	0f 86 e4 01 00 00    	jbe    c00059ce <f_mkfs+0x3c8>
c00057ea:	85 c9                	test   ecx,ecx
c00057ec:	0f 85 dc 05 00 00    	jne    c0005dce <f_mkfs+0x7c8>
c00057f2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f5:	83 f9 40             	cmp    ecx,0x40
c00057f8:	0f 87 e0 05 00 00    	ja     c0005dde <f_mkfs+0x7d8>
c00057fe:	89 cf                	mov    edi,ecx
c0005800:	85 c9                	test   ecx,ecx
c0005802:	75 1c                	jne    c0005820 <f_mkfs+0x21a>
c0005804:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005808:	b8 c0 2f 02 c0       	mov    eax,0xc0022fc0
c000580d:	c1 ee 0c             	shr    esi,0xc
c0005810:	bf 01 00 00 00       	mov    edi,0x1
c0005815:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005818:	85 d2                	test   edx,edx
c000581a:	0f 85 63 01 00 00    	jne    c0005983 <f_mkfs+0x37d>
c0005820:	31 d2                	xor    edx,edx
c0005822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005826:	f7 f7                	div    edi
c0005828:	3d f5 0f 00 00       	cmp    eax,0xff5
c000582d:	0f 86 62 01 00 00    	jbe    c0005995 <f_mkfs+0x38f>
c0005833:	83 c0 02             	add    eax,0x2
c0005836:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000583b:	01 c0                	add    eax,eax
c000583d:	05 ff 01 00 00       	add    eax,0x1ff
c0005842:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000584a:	c1 e8 09             	shr    eax,0x9
c000584d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005855:	c1 e0 05             	shl    eax,0x5
c0005858:	c1 e8 09             	shr    eax,0x9
c000585b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000585f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005864:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586c:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005870:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005878:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c000587d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005881:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005885:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005889:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000588d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005891:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005895:	f7 d8                	neg    eax
c0005897:	21 c6                	and    esi,eax
c0005899:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000589e:	29 d6                	sub    esi,edx
c00058a0:	83 f8 03             	cmp    eax,0x3
c00058a3:	0f 85 ff 00 00 00    	jne    c00059a8 <f_mkfs+0x3a2>
c00058a9:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058ad:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058b1:	89 f8                	mov    eax,edi
c00058b3:	c1 e0 04             	shl    eax,0x4
c00058b6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00058ba:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058be:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058c2:	0f 82 2b 01 00 00    	jb     c00059f3 <f_mkfs+0x3ed>
c00058c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058d0:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00058d4:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00058d9:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058dd:	29 d0                	sub    eax,edx
c00058df:	31 d2                	xor    edx,edx
c00058e1:	f7 f7                	div    edi
c00058e3:	89 c6                	mov    esi,eax
c00058e5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058ea:	83 f8 03             	cmp    eax,0x3
c00058ed:	0f 85 e2 fe ff ff    	jne    c00057d5 <f_mkfs+0x1cf>
c00058f3:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00058f9:	0f 87 03 01 00 00    	ja     c0005a02 <f_mkfs+0x3fc>
c00058ff:	85 c9                	test   ecx,ecx
c0005901:	0f 85 ec 00 00 00    	jne    c00059f3 <f_mkfs+0x3ed>
c0005907:	83 ff 01             	cmp    edi,0x1
c000590a:	0f 86 e3 00 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005910:	d1 ef                	shr    edi,1
c0005912:	89 f9                	mov    ecx,edi
c0005914:	89 ce                	mov    esi,ecx
c0005916:	85 c9                	test   ecx,ecx
c0005918:	75 25                	jne    c000593f <f_mkfs+0x339>
c000591a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000591e:	b8 d0 2f 02 c0       	mov    eax,0xc0022fd0
c0005923:	c1 ee 11             	shr    esi,0x11
c0005926:	b9 01 00 00 00       	mov    ecx,0x1
c000592b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000592e:	85 d2                	test   edx,edx
c0005930:	74 0b                	je     c000593d <f_mkfs+0x337>
c0005932:	83 c0 02             	add    eax,0x2
c0005935:	39 f2                	cmp    edx,esi
c0005937:	77 04                	ja     c000593d <f_mkfs+0x337>
c0005939:	01 c9                	add    ecx,ecx
c000593b:	eb ee                	jmp    c000592b <f_mkfs+0x325>
c000593d:	31 f6                	xor    esi,esi
c000593f:	31 d2                	xor    edx,edx
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	f7 f1                	div    ecx
c0005947:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000594e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005953:	c1 ea 09             	shr    edx,0x9
c0005956:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000595b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000595f:	0f 87 8e 00 00 00    	ja     c00059f3 <f_mkfs+0x3ed>
c0005965:	89 cf                	mov    edi,ecx
c0005967:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000596f:	89 f1                	mov    ecx,esi
c0005971:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005979:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000597e:	e9 dc fe ff ff       	jmp    c000585f <f_mkfs+0x259>
c0005983:	83 c0 02             	add    eax,0x2
c0005986:	39 f2                	cmp    edx,esi
c0005988:	0f 87 92 fe ff ff    	ja     c0005820 <f_mkfs+0x21a>
c000598e:	01 ff                	add    edi,edi
c0005990:	e9 80 fe ff ff       	jmp    c0005815 <f_mkfs+0x20f>
c0005995:	8d 04 40             	lea    eax,[eax+eax*2]
c0005998:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000599d:	40                   	inc    eax
c000599e:	d1 e8                	shr    eax,1
c00059a0:	83 c0 03             	add    eax,0x3
c00059a3:	e9 95 fe ff ff       	jmp    c000583d <f_mkfs+0x237>
c00059a8:	31 d2                	xor    edx,edx
c00059aa:	89 f0                	mov    eax,esi
c00059ac:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059b0:	85 d2                	test   edx,edx
c00059b2:	74 09                	je     c00059bd <f_mkfs+0x3b7>
c00059b4:	4e                   	dec    esi
c00059b5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059b9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059bd:	89 f0                	mov    eax,esi
c00059bf:	31 d2                	xor    edx,edx
c00059c1:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059c5:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00059c9:	e9 e3 fe ff ff       	jmp    c00058b1 <f_mkfs+0x2ab>
c00059ce:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059d4:	77 2c                	ja     c0005a02 <f_mkfs+0x3fc>
c00059d6:	85 c9                	test   ecx,ecx
c00059d8:	75 19                	jne    c00059f3 <f_mkfs+0x3ed>
c00059da:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059dd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059e3:	0f 86 15 fe ff ff    	jbe    c00057fe <f_mkfs+0x1f8>
c00059e9:	eb 08                	jmp    c00059f3 <f_mkfs+0x3ed>
c00059eb:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059f1:	76 0a                	jbe    c00059fd <f_mkfs+0x3f7>
c00059f3:	be 0e 00 00 00       	mov    esi,0xe
c00059f8:	e9 bf 03 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00059fd:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a02:	31 d2                	xor    edx,edx
c0005a04:	b9 00 02 00 00       	mov    ecx,0x200
c0005a09:	89 d8                	mov    eax,ebx
c0005a0b:	e8 f1 c5 ff ff       	call   c0002001 <mem_set>
c0005a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a15:	ba 72 2f 02 c0       	mov    edx,0xc0022f72
c0005a1a:	89 d8                	mov    eax,ebx
c0005a1c:	e8 cb c5 ff ff       	call   c0001fec <mem_cpy>
c0005a21:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a24:	ba 00 02 00 00       	mov    edx,0x200
c0005a29:	e8 b7 c5 ff ff       	call   c0001fe5 <st_word>
c0005a2e:	89 f8                	mov    eax,edi
c0005a30:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a35:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a38:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a3b:	e8 a5 c5 ff ff       	call   c0001fe5 <st_word>
c0005a40:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a44:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4c:	83 f8 03             	cmp    eax,0x3
c0005a4f:	75 08                	jne    c0005a59 <f_mkfs+0x453>
c0005a51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005a59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a5d:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a60:	e8 80 c5 ff ff       	call   c0001fe5 <st_word>
c0005a65:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a69:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a6f:	77 0a                	ja     c0005a7b <f_mkfs+0x475>
c0005a71:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a74:	e8 6c c5 ff ff       	call   c0001fe5 <st_word>
c0005a79:	eb 08                	jmp    c0005a83 <f_mkfs+0x47d>
c0005a7b:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a7e:	e8 66 c5 ff ff       	call   c0001fe9 <st_dword>
c0005a83:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a86:	ba 3f 00 00 00       	mov    edx,0x3f
c0005a8b:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a8f:	e8 51 c5 ff ff       	call   c0001fe5 <st_word>
c0005a94:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005a97:	ba ff 00 00 00       	mov    edx,0xff
c0005a9c:	e8 44 c5 ff ff       	call   c0001fe5 <st_word>
c0005aa1:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005aa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005aa8:	e8 3c c5 ff ff       	call   c0001fe9 <st_dword>
c0005aad:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ab2:	83 f8 03             	cmp    eax,0x3
c0005ab5:	75 57                	jne    c0005b0e <f_mkfs+0x508>
c0005ab7:	8d 43 43             	lea    eax,[ebx+0x43]
c0005aba:	ba 00 00 21 50       	mov    edx,0x50210000
c0005abf:	e8 25 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ac4:	8d 43 24             	lea    eax,[ebx+0x24]
c0005ac7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005acb:	e8 19 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ad0:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005ad3:	ba 02 00 00 00       	mov    edx,0x2
c0005ad8:	e8 0c c5 ff ff       	call   c0001fe9 <st_dword>
c0005add:	8d 43 30             	lea    eax,[ebx+0x30]
c0005ae0:	ba 01 00 00 00       	mov    edx,0x1
c0005ae5:	e8 fb c4 ff ff       	call   c0001fe5 <st_word>
c0005aea:	8d 43 32             	lea    eax,[ebx+0x32]
c0005aed:	ba 06 00 00 00       	mov    edx,0x6
c0005af2:	e8 ee c4 ff ff       	call   c0001fe5 <st_word>
c0005af7:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005afb:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005aff:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b02:	b9 13 00 00 00       	mov    ecx,0x13
c0005b07:	ba 7e 2f 02 c0       	mov    edx,0xc0022f7e
c0005b0c:	eb 2f                	jmp    c0005b3d <f_mkfs+0x537>
c0005b0e:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b11:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b16:	e8 ce c4 ff ff       	call   c0001fe9 <st_dword>
c0005b1b:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b20:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b23:	e8 bd c4 ff ff       	call   c0001fe5 <st_word>
c0005b28:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b2c:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b30:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b33:	b9 13 00 00 00       	mov    ecx,0x13
c0005b38:	ba 92 2f 02 c0       	mov    edx,0xc0022f92
c0005b3d:	e8 aa c4 ff ff       	call   c0001fec <mem_cpy>
c0005b42:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b48:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b51:	e8 8f c4 ff ff       	call   c0001fe5 <st_word>
c0005b56:	6a 01                	push   0x1
c0005b58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b5c:	53                   	push   ebx
c0005b5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b61:	e8 25 c4 ff ff       	call   c0001f8b <disk_write>
c0005b66:	83 c4 10             	add    esp,0x10
c0005b69:	85 c0                	test   eax,eax
c0005b6b:	0f 85 34 02 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005b71:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b76:	83 f8 03             	cmp    eax,0x3
c0005b79:	0f 85 98 00 00 00    	jne    c0005c17 <f_mkfs+0x611>
c0005b7f:	6a 01                	push   0x1
c0005b81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b85:	83 c0 06             	add    eax,0x6
c0005b88:	50                   	push   eax
c0005b89:	53                   	push   ebx
c0005b8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b8e:	e8 f8 c3 ff ff       	call   c0001f8b <disk_write>
c0005b93:	b9 00 02 00 00       	mov    ecx,0x200
c0005b98:	31 d2                	xor    edx,edx
c0005b9a:	89 d8                	mov    eax,ebx
c0005b9c:	e8 60 c4 ff ff       	call   c0002001 <mem_set>
c0005ba1:	ba 52 52 61 41       	mov    edx,0x41615252
c0005ba6:	89 d8                	mov    eax,ebx
c0005ba8:	e8 3c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bad:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bb3:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bb8:	e8 2c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bbd:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bc0:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005bc6:	e8 1e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bcb:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005bd1:	ba 02 00 00 00       	mov    edx,0x2
c0005bd6:	e8 0e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bdb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005be0:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005be6:	e8 fa c3 ff ff       	call   c0001fe5 <st_word>
c0005beb:	6a 01                	push   0x1
c0005bed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bf1:	83 c0 07             	add    eax,0x7
c0005bf4:	50                   	push   eax
c0005bf5:	53                   	push   ebx
c0005bf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005bfa:	e8 8c c3 ff ff       	call   c0001f8b <disk_write>
c0005bff:	83 c4 20             	add    esp,0x20
c0005c02:	6a 01                	push   0x1
c0005c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005c08:	40                   	inc    eax
c0005c09:	50                   	push   eax
c0005c0a:	53                   	push   ebx
c0005c0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c0f:	e8 77 c3 ff ff       	call   c0001f8b <disk_write>
c0005c14:	83 c4 10             	add    esp,0x10
c0005c17:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c1b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c1f:	c1 e8 09             	shr    eax,0x9
c0005c22:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c2c:	31 d2                	xor    edx,edx
c0005c2e:	89 d8                	mov    eax,ebx
c0005c30:	e8 cc c3 ff ff       	call   c0002001 <mem_set>
c0005c35:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c3a:	31 c9                	xor    ecx,ecx
c0005c3c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005c44:	83 f8 01             	cmp    eax,0x1
c0005c47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c4b:	0f 94 c1             	sete   cl
c0005c4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005c52:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005c56:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005c5e:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005c66:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c6b:	75 21                	jne    c0005c8e <f_mkfs+0x688>
c0005c6d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c72:	89 d8                	mov    eax,ebx
c0005c74:	e8 70 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c79:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c7c:	83 ca ff             	or     edx,0xffffffff
c0005c7f:	e8 65 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c84:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c87:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c8c:	eb 06                	jmp    c0005c94 <f_mkfs+0x68e>
c0005c8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c92:	89 d8                	mov    eax,ebx
c0005c94:	e8 50 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ca1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005ca5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ca9:	39 ce                	cmp    esi,ecx
c0005cab:	76 02                	jbe    c0005caf <f_mkfs+0x6a9>
c0005cad:	89 ce                	mov    esi,ecx
c0005caf:	56                   	push   esi
c0005cb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005cb4:	53                   	push   ebx
c0005cb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cb9:	e8 cd c2 ff ff       	call   c0001f8b <disk_write>
c0005cbe:	83 c4 10             	add    esp,0x10
c0005cc1:	85 c0                	test   eax,eax
c0005cc3:	0f 85 dc 00 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005cc9:	31 d2                	xor    edx,edx
c0005ccb:	b9 00 02 00 00       	mov    ecx,0x200
c0005cd0:	89 d8                	mov    eax,ebx
c0005cd2:	e8 2a c3 ff ff       	call   c0002001 <mem_set>
c0005cd7:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005cdb:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005cdf:	75 c0                	jne    c0005ca1 <f_mkfs+0x69b>
c0005ce1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ce5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005ced:	40                   	inc    eax
c0005cee:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cf2:	0f 87 6e ff ff ff    	ja     c0005c66 <f_mkfs+0x660>
c0005cf8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cfd:	83 f8 03             	cmp    eax,0x3
c0005d00:	74 04                	je     c0005d06 <f_mkfs+0x700>
c0005d02:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005d06:	89 fe                	mov    esi,edi
c0005d08:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d0c:	76 04                	jbe    c0005d12 <f_mkfs+0x70c>
c0005d0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d12:	56                   	push   esi
c0005d13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d17:	53                   	push   ebx
c0005d18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d1c:	e8 6a c2 ff ff       	call   c0001f8b <disk_write>
c0005d21:	83 c4 10             	add    esp,0x10
c0005d24:	85 c0                	test   eax,eax
c0005d26:	75 7d                	jne    c0005da5 <f_mkfs+0x79f>
c0005d28:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d2c:	29 f7                	sub    edi,esi
c0005d2e:	75 d6                	jne    c0005d06 <f_mkfs+0x700>
c0005d30:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d35:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d3a:	83 f8 03             	cmp    eax,0x3
c0005d3d:	74 1e                	je     c0005d5d <f_mkfs+0x757>
c0005d3f:	b9 06 00 00 00       	mov    ecx,0x6
c0005d44:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d4c:	77 0f                	ja     c0005d5d <f_mkfs+0x757>
c0005d4e:	b9 04 00 00 00       	mov    ecx,0x4
c0005d53:	83 f8 02             	cmp    eax,0x2
c0005d56:	74 05                	je     c0005d5d <f_mkfs+0x757>
c0005d58:	b9 01 00 00 00       	mov    ecx,0x1
c0005d5d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d62:	75 2a                	jne    c0005d8e <f_mkfs+0x788>
c0005d64:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d68:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d70:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	53                   	push   ebx
c0005d78:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d80:	e8 89 d2 ff ff       	call   c000300e <create_partition>
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	89 c6                	mov    esi,eax
c0005d8a:	85 c0                	test   eax,eax
c0005d8c:	75 2e                	jne    c0005dbc <f_mkfs+0x7b6>
c0005d8e:	31 f6                	xor    esi,esi
c0005d90:	50                   	push   eax
c0005d91:	6a 00                	push   0x0
c0005d93:	6a 00                	push   0x0
c0005d95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d99:	e8 03 c2 ff ff       	call   c0001fa1 <disk_ioctl>
c0005d9e:	83 c4 10             	add    esp,0x10
c0005da1:	85 c0                	test   eax,eax
c0005da3:	74 17                	je     c0005dbc <f_mkfs+0x7b6>
c0005da5:	85 ed                	test   ebp,ebp
c0005da7:	75 0c                	jne    c0005db5 <f_mkfs+0x7af>
c0005da9:	83 ec 0c             	sub    esp,0xc
c0005dac:	53                   	push   ebx
c0005dad:	e8 6e 00 00 00       	call   c0005e20 <ff_memfree>
c0005db2:	83 c4 10             	add    esp,0x10
c0005db5:	be 01 00 00 00       	mov    esi,0x1
c0005dba:	eb 40                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dbc:	85 ed                	test   ebp,ebp
c0005dbe:	75 3c                	jne    c0005dfc <f_mkfs+0x7f6>
c0005dc0:	83 ec 0c             	sub    esp,0xc
c0005dc3:	53                   	push   ebx
c0005dc4:	e8 57 00 00 00       	call   c0005e20 <ff_memfree>
c0005dc9:	83 c4 10             	add    esp,0x10
c0005dcc:	eb 2e                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dce:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dd3:	0f 85 3b fb ff ff    	jne    c0005914 <f_mkfs+0x30e>
c0005dd9:	e9 15 fc ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dde:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005de3:	0f 85 31 fb ff ff    	jne    c000591a <f_mkfs+0x314>
c0005de9:	89 cf                	mov    edi,ecx
c0005deb:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005df1:	0f 86 29 fa ff ff    	jbe    c0005820 <f_mkfs+0x21a>
c0005df7:	e9 f7 fb ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dfc:	83 c4 5c             	add    esp,0x5c
c0005dff:	89 f0                	mov    eax,esi
c0005e01:	5b                   	pop    ebx
c0005e02:	5e                   	pop    esi
c0005e03:	5f                   	pop    edi
c0005e04:	5d                   	pop    ebp
c0005e05:	c3                   	ret    
c0005e06:	66 90                	xchg   ax,ax

c0005e08 <ff_memalloc>:
c0005e08:	83 ec 0c             	sub    esp,0xc
c0005e0b:	83 ec 0c             	sub    esp,0xc
c0005e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e12:	e8 4c 99 00 00       	call   c000f763 <malloc>
c0005e17:	83 c4 10             	add    esp,0x10
c0005e1a:	83 c4 0c             	add    esp,0xc
c0005e1d:	c3                   	ret    
c0005e1e:	66 90                	xchg   ax,ax

c0005e20 <ff_memfree>:
c0005e20:	83 ec 0c             	sub    esp,0xc
c0005e23:	83 ec 0c             	sub    esp,0xc
c0005e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e2a:	e8 44 99 00 00       	call   c000f773 <free>
c0005e2f:	83 c4 10             	add    esp,0x10
c0005e32:	90                   	nop
c0005e33:	83 c4 0c             	add    esp,0xc
c0005e36:	c3                   	ret    
c0005e37:	90                   	nop

c0005e38 <ff_uni2oem>:
c0005e38:	83 ec 14             	sub    esp,0x14
c0005e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e43:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4a:	c7 44 24 0c c0 33 02 c0 	mov    DWORD PTR [esp+0xc],0xc00233c0
c0005e52:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e57:	77 0b                	ja     c0005e64 <ff_uni2oem+0x2c>
c0005e59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e5d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e62:	eb 68                	jmp    c0005ecc <ff_uni2oem+0x94>
c0005e64:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e6c:	77 5e                	ja     c0005ecc <ff_uni2oem+0x94>
c0005e6e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e72:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e77:	75 53                	jne    c0005ecc <ff_uni2oem+0x94>
c0005e79:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e80:	eb 12                	jmp    c0005e94 <ff_uni2oem+0x5c>
c0005e82:	66 90                	xchg   ax,ax
c0005e84:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e89:	83 c0 01             	add    eax,0x1
c0005e8c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e91:	8d 76 00             	lea    esi,[esi+0x0]
c0005e94:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e99:	83 f8 7f             	cmp    eax,0x7f
c0005e9c:	77 1e                	ja     c0005ebc <ff_uni2oem+0x84>
c0005e9e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ea3:	01 c0                	add    eax,eax
c0005ea5:	89 c2                	mov    edx,eax
c0005ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eab:	01 d0                	add    eax,edx
c0005ead:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eb0:	0f b7 c0             	movzx  eax,ax
c0005eb3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005eb7:	75 cb                	jne    c0005e84 <ff_uni2oem+0x4c>
c0005eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0005ebc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ec1:	83 e8 80             	sub    eax,0xffffff80
c0005ec4:	0f b6 c0             	movzx  eax,al
c0005ec7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ecc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ed1:	83 c4 14             	add    esp,0x14
c0005ed4:	c3                   	ret    
c0005ed5:	8d 76 00             	lea    esi,[esi+0x0]

c0005ed8 <ff_oem2uni>:
c0005ed8:	83 ec 18             	sub    esp,0x18
c0005edb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ee3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005ee8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eec:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ef3:	c7 44 24 10 c0 33 02 c0 	mov    DWORD PTR [esp+0x10],0xc00233c0
c0005efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f00:	83 f8 7f             	cmp    eax,0x7f
c0005f03:	77 0b                	ja     c0005f10 <ff_oem2uni+0x38>
c0005f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f09:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0e:	eb 34                	jmp    c0005f44 <ff_oem2uni+0x6c>
c0005f10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f14:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f19:	75 29                	jne    c0005f44 <ff_oem2uni+0x6c>
c0005f1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f20:	3d ff 00 00 00       	cmp    eax,0xff
c0005f25:	77 1d                	ja     c0005f44 <ff_oem2uni+0x6c>
c0005f27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f2c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f31:	01 c0                	add    eax,eax
c0005f33:	89 c2                	mov    edx,eax
c0005f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f39:	01 d0                	add    eax,edx
c0005f3b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f3e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f43:	90                   	nop
c0005f44:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f49:	83 c4 18             	add    esp,0x18
c0005f4c:	c3                   	ret    
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0005f50 <ff_wtoupper>:
c0005f50:	83 ec 10             	sub    esp,0x10
c0005f53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f5b:	0f 87 ab 01 00 00    	ja     c000610c <ff_wtoupper+0x1bc>
c0005f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f65:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f6f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f74:	77 0a                	ja     c0005f80 <ff_wtoupper+0x30>
c0005f76:	b8 c0 31 02 c0       	mov    eax,0xc00231c0
c0005f7b:	eb 0b                	jmp    c0005f88 <ff_wtoupper+0x38>
c0005f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f80:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0005f85:	8d 76 00             	lea    esi,[esi+0x0]
c0005f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f90:	8d 50 02             	lea    edx,[eax+0x2]
c0005f93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f9a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f9f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 84 54 01 00 00    	je     c0006100 <ff_wtoupper+0x1b0>
c0005fac:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fb1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fb6:	39 c2                	cmp    edx,eax
c0005fb8:	0f 82 42 01 00 00    	jb     c0006100 <ff_wtoupper+0x1b0>
c0005fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0005fc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fcc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fd1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fd6:	c1 e8 08             	shr    eax,0x8
c0005fd9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005fde:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005fe3:	0f b6 c0             	movzx  eax,al
c0005fe6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005feb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ff0:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ff5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ffa:	01 ca                	add    edx,ecx
c0005ffc:	39 d0                	cmp    eax,edx
c0005ffe:	0f 8d d8 00 00 00    	jge    c00060dc <ff_wtoupper+0x18c>
c0006004:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006009:	83 f8 08             	cmp    eax,0x8
c000600c:	0f 87 ea 00 00 00    	ja     c00060fc <ff_wtoupper+0x1ac>
c0006012:	8b 04 85 c0 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf40]
c0006019:	ff e0                	jmp    eax
c000601b:	90                   	nop
c000601c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006021:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006026:	29 c2                	sub    edx,eax
c0006028:	89 d0                	mov    eax,edx
c000602a:	01 c0                	add    eax,eax
c000602c:	89 c2                	mov    edx,eax
c000602e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006032:	01 d0                	add    eax,edx
c0006034:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006037:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000603c:	e9 97 00 00 00       	jmp    c00060d8 <ff_wtoupper+0x188>
c0006041:	8d 76 00             	lea    esi,[esi+0x0]
c0006044:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000604d:	89 d1                	mov    ecx,edx
c000604f:	29 c1                	sub    ecx,eax
c0006051:	89 c8                	mov    eax,ecx
c0006053:	83 e0 01             	and    eax,0x1
c0006056:	89 c2                	mov    edx,eax
c0006058:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000605d:	29 d0                	sub    eax,edx
c000605f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006064:	eb 72                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006066:	66 90                	xchg   ax,ax
c0006068:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000606d:	83 e8 10             	sub    eax,0x10
c0006070:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006075:	eb 61                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006077:	90                   	nop
c0006078:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000607d:	83 e8 20             	sub    eax,0x20
c0006080:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006085:	eb 51                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006087:	90                   	nop
c0006088:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000608d:	83 e8 30             	sub    eax,0x30
c0006090:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006095:	eb 41                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006097:	90                   	nop
c0006098:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000609d:	83 e8 1a             	sub    eax,0x1a
c00060a0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a5:	eb 31                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060ad:	83 c0 08             	add    eax,0x8
c00060b0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b5:	eb 21                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060b7:	90                   	nop
c00060b8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060bd:	83 e8 50             	sub    eax,0x50
c00060c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c5:	eb 11                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060c7:	90                   	nop
c00060c8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060cd:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d7:	90                   	nop
c00060d8:	eb 22                	jmp    c00060fc <ff_wtoupper+0x1ac>
c00060da:	66 90                	xchg   ax,ax
c00060dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060e1:	85 c0                	test   eax,eax
c00060e3:	0f 85 a3 fe ff ff    	jne    c0005f8c <ff_wtoupper+0x3c>
c00060e9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ee:	01 c0                	add    eax,eax
c00060f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060f4:	e9 93 fe ff ff       	jmp    c0005f8c <ff_wtoupper+0x3c>
c00060f9:	8d 76 00             	lea    esi,[esi+0x0]
c00060fc:	90                   	nop
c00060fd:	8d 76 00             	lea    esi,[esi+0x0]
c0006100:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006105:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006109:	8d 76 00             	lea    esi,[esi+0x0]
c000610c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006110:	83 c4 10             	add    esp,0x10
c0006113:	c3                   	ret    

c0006114 <utf2ucs>:
c0006114:	57                   	push   edi
c0006115:	31 c9                	xor    ecx,ecx
c0006117:	56                   	push   esi
c0006118:	89 d7                	mov    edi,edx
c000611a:	53                   	push   ebx
c000611b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000611f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006123:	89 de                	mov    esi,ebx
c0006125:	c1 fe 08             	sar    esi,0x8
c0006128:	89 f2                	mov    edx,esi
c000612a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c000612d:	41                   	inc    ecx
c000612e:	85 db                	test   ebx,ebx
c0006130:	75 e9                	jne    c000611b <utf2ucs+0x7>
c0006132:	5b                   	pop    ebx
c0006133:	5e                   	pop    esi
c0006134:	5f                   	pop    edi
c0006135:	c3                   	ret    

c0006136 <ucs2utfn>:
c0006136:	83 e1 fe             	and    ecx,0xfffffffe
c0006139:	01 d1                	add    ecx,edx
c000613b:	39 d1                	cmp    ecx,edx
c000613d:	75 04                	jne    c0006143 <ucs2utfn+0xd>
c000613f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006142:	c3                   	ret    
c0006143:	57                   	push   edi
c0006144:	56                   	push   esi
c0006145:	53                   	push   ebx
c0006146:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006149:	83 c2 02             	add    edx,0x2
c000614c:	89 de                	mov    esi,ebx
c000614e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006152:	c1 e6 08             	shl    esi,0x8
c0006155:	09 f3                	or     ebx,esi
c0006157:	83 fb 3b             	cmp    ebx,0x3b
c000615a:	74 50                	je     c00061ac <ucs2utfn+0x76>
c000615c:	83 fb 7f             	cmp    ebx,0x7f
c000615f:	7f 05                	jg     c0006166 <ucs2utfn+0x30>
c0006161:	88 18                	mov    BYTE PTR [eax],bl
c0006163:	40                   	inc    eax
c0006164:	eb 42                	jmp    c00061a8 <ucs2utfn+0x72>
c0006166:	89 de                	mov    esi,ebx
c0006168:	89 df                	mov    edi,ebx
c000616a:	c1 fe 06             	sar    esi,0x6
c000616d:	83 e7 3f             	and    edi,0x3f
c0006170:	83 cf 80             	or     edi,0xffffff80
c0006173:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006179:	7f 12                	jg     c000618d <ucs2utfn+0x57>
c000617b:	83 ce c0             	or     esi,0xffffffc0
c000617e:	83 c0 02             	add    eax,0x2
c0006181:	89 f3                	mov    ebx,esi
c0006183:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006186:	89 fb                	mov    ebx,edi
c0006188:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000618b:	eb 1b                	jmp    c00061a8 <ucs2utfn+0x72>
c000618d:	c1 fb 0c             	sar    ebx,0xc
c0006190:	83 e6 3f             	and    esi,0x3f
c0006193:	83 cb e0             	or     ebx,0xffffffe0
c0006196:	83 ce 80             	or     esi,0xffffff80
c0006199:	88 18                	mov    BYTE PTR [eax],bl
c000619b:	89 f3                	mov    ebx,esi
c000619d:	83 c0 03             	add    eax,0x3
c00061a0:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061a3:	89 fb                	mov    ebx,edi
c00061a5:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061a8:	39 d1                	cmp    ecx,edx
c00061aa:	75 9a                	jne    c0006146 <ucs2utfn+0x10>
c00061ac:	5b                   	pop    ebx
c00061ad:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061b0:	5e                   	pop    esi
c00061b1:	5f                   	pop    edi
c00061b2:	c3                   	ret    

c00061b3 <isjoliet>:
c00061b3:	31 d2                	xor    edx,edx
c00061b5:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061b8:	75 26                	jne    c00061e0 <isjoliet+0x2d>
c00061ba:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061be:	75 20                	jne    c00061e0 <isjoliet+0x2d>
c00061c0:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061c4:	ba 02 00 00 00       	mov    edx,0x2
c00061c9:	83 f8 43             	cmp    eax,0x43
c00061cc:	74 12                	je     c00061e0 <isjoliet+0x2d>
c00061ce:	ba 03 00 00 00       	mov    edx,0x3
c00061d3:	83 f8 45             	cmp    eax,0x45
c00061d6:	74 08                	je     c00061e0 <isjoliet+0x2d>
c00061d8:	31 d2                	xor    edx,edx
c00061da:	83 f8 40             	cmp    eax,0x40
c00061dd:	0f 94 c2             	sete   dl
c00061e0:	89 d0                	mov    eax,edx
c00061e2:	c3                   	ret    

c00061e3 <htohl_32>:
c00061e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00061e5:	c3                   	ret    

c00061e6 <iso_733>:
c00061e6:	eb fb                	jmp    c00061e3 <htohl_32>

c00061e8 <bgrad_cache>:
c00061e8:	83 fa 0e             	cmp    edx,0xe
c00061eb:	77 16                	ja     c0006203 <bgrad_cache+0x1b>
c00061ed:	53                   	push   ebx
c00061ee:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061f1:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061f5:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061f8:	42                   	inc    edx
c00061f9:	83 fa 0f             	cmp    edx,0xf
c00061fc:	75 f3                	jne    c00061f1 <bgrad_cache+0x9>
c00061fe:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006201:	5b                   	pop    ebx
c0006202:	c3                   	ret    
c0006203:	c3                   	ret    

c0006204 <ucscompare>:
c0006204:	55                   	push   ebp
c0006205:	57                   	push   edi
c0006206:	89 c7                	mov    edi,eax
c0006208:	56                   	push   esi
c0006209:	89 d6                	mov    esi,edx
c000620b:	53                   	push   ebx
c000620c:	31 d2                	xor    edx,edx
c000620e:	83 ec 1c             	sub    esp,0x1c
c0006211:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006215:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000621a:	c1 e3 08             	shl    ebx,0x8
c000621d:	09 c3                	or     ebx,eax
c000621f:	39 ca                	cmp    edx,ecx
c0006221:	7d 42                	jge    c0006265 <ucscompare+0x61>
c0006223:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006227:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000622c:	c1 e0 08             	shl    eax,0x8
c000622f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006233:	09 e8                	or     eax,ebp
c0006235:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006239:	83 f8 3b             	cmp    eax,0x3b
c000623c:	74 27                	je     c0006265 <ucscompare+0x61>
c000623e:	83 ec 0c             	sub    esp,0xc
c0006241:	50                   	push   eax
c0006242:	e8 09 a7 ff ff       	call   c0000950 <tolower>
c0006247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000624a:	89 c5                	mov    ebp,eax
c000624c:	e8 ff a6 ff ff       	call   c0000950 <tolower>
c0006251:	83 c4 10             	add    esp,0x10
c0006254:	39 c5                	cmp    ebp,eax
c0006256:	75 20                	jne    c0006278 <ucscompare+0x74>
c0006258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000625c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006260:	83 c2 02             	add    edx,0x2
c0006263:	eb ac                	jmp    c0006211 <ucscompare+0xd>
c0006265:	85 db                	test   ebx,ebx
c0006267:	0f 95 c2             	setne  dl
c000626a:	31 c0                	xor    eax,eax
c000626c:	83 fb 2f             	cmp    ebx,0x2f
c000626f:	0f 95 c0             	setne  al
c0006272:	21 d0                	and    eax,edx
c0006274:	f7 d8                	neg    eax
c0006276:	eb 03                	jmp    c000627b <ucscompare+0x77>
c0006278:	83 c8 ff             	or     eax,0xffffffff
c000627b:	83 c4 1c             	add    esp,0x1c
c000627e:	5b                   	pop    ebx
c000627f:	5e                   	pop    esi
c0006280:	5f                   	pop    edi
c0006281:	5d                   	pop    ebp
c0006282:	c3                   	ret    

c0006283 <fncompare>:
c0006283:	55                   	push   ebp
c0006284:	57                   	push   edi
c0006285:	89 c7                	mov    edi,eax
c0006287:	56                   	push   esi
c0006288:	89 ce                	mov    esi,ecx
c000628a:	53                   	push   ebx
c000628b:	31 db                	xor    ebx,ebx
c000628d:	83 ec 1c             	sub    esp,0x1c
c0006290:	39 d3                	cmp    ebx,edx
c0006292:	7d 45                	jge    c00062d9 <fncompare+0x56>
c0006294:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006298:	83 f8 3b             	cmp    eax,0x3b
c000629b:	74 3c                	je     c00062d9 <fncompare+0x56>
c000629d:	83 f8 2e             	cmp    eax,0x2e
c00062a0:	75 0e                	jne    c00062b0 <fncompare+0x2d>
c00062a2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062a5:	39 d9                	cmp    ecx,ebx
c00062a7:	74 30                	je     c00062d9 <fncompare+0x56>
c00062a9:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062ae:	74 29                	je     c00062d9 <fncompare+0x56>
c00062b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062b4:	83 ec 0c             	sub    esp,0xc
c00062b7:	50                   	push   eax
c00062b8:	e8 93 a6 ff ff       	call   c0000950 <tolower>
c00062bd:	89 c5                	mov    ebp,eax
c00062bf:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00062c6:	e8 85 a6 ff ff       	call   c0000950 <tolower>
c00062cb:	83 c4 10             	add    esp,0x10
c00062ce:	39 c5                	cmp    ebp,eax
c00062d0:	75 1e                	jne    c00062f0 <fncompare+0x6d>
c00062d2:	43                   	inc    ebx
c00062d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062d7:	eb b7                	jmp    c0006290 <fncompare+0xd>
c00062d9:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062dd:	85 d2                	test   edx,edx
c00062df:	0f 95 c1             	setne  cl
c00062e2:	31 c0                	xor    eax,eax
c00062e4:	83 fa 2f             	cmp    edx,0x2f
c00062e7:	0f 95 c0             	setne  al
c00062ea:	21 c8                	and    eax,ecx
c00062ec:	f7 d8                	neg    eax
c00062ee:	eb 03                	jmp    c00062f3 <fncompare+0x70>
c00062f0:	83 c8 ff             	or     eax,0xffffffff
c00062f3:	83 c4 1c             	add    esp,0x1c
c00062f6:	5b                   	pop    ebx
c00062f7:	5e                   	pop    esi
c00062f8:	5f                   	pop    edi
c00062f9:	5d                   	pop    ebp
c00062fa:	c3                   	ret    

c00062fb <bclear_cache>:
c00062fb:	83 ec 18             	sub    esp,0x18
c00062fe:	68 c0 34 02 c0       	push   0xc00234c0
c0006303:	e8 18 71 01 00       	call   c001d420 <iso_kprintf>
c0006308:	83 c4 10             	add    esp,0x10
c000630b:	31 c0                	xor    eax,eax
c000630d:	8b 14 85 20 90 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6fe0]
c0006314:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000631a:	8b 14 85 80 90 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6f80]
c0006321:	40                   	inc    eax
c0006322:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006328:	83 f8 10             	cmp    eax,0x10
c000632b:	75 e0                	jne    c000630d <bclear_cache+0x12>
c000632d:	83 c4 0c             	add    esp,0xc
c0006330:	c3                   	ret    

c0006331 <bclear>:
c0006331:	eb c8                	jmp    c00062fb <bclear_cache>

c0006333 <iso_break_all>:
c0006333:	83 ec 18             	sub    esp,0x18
c0006336:	68 ce 34 02 c0       	push   0xc00234ce
c000633b:	e8 e0 70 01 00       	call   c001d420 <iso_kprintf>
c0006340:	83 c4 10             	add    esp,0x10
c0006343:	31 c0                	xor    eax,eax
c0006345:	c7 80 d0 95 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd6a30],0x1
c000634f:	05 94 00 00 00       	add    eax,0x94
c0006354:	3d 40 09 00 00       	cmp    eax,0x940
c0006359:	75 ea                	jne    c0006345 <iso_break_all+0x12>
c000635b:	83 c4 0c             	add    esp,0xc
c000635e:	c3                   	ret    

c000635f <isoReadDiscSector>:
c000635f:	83 ec 0c             	sub    esp,0xc
c0006362:	0f be 05 60 90 02 c0 	movsx  eax,BYTE PTR ds:0xc0029060
c0006369:	50                   	push   eax
c000636a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006376:	e8 49 70 01 00       	call   c001d3c4 <isoReadDiscSectorHelper>
c000637b:	83 c4 1c             	add    esp,0x1c
c000637e:	c3                   	ret    

c000637f <bread_cache>:
c000637f:	55                   	push   ebp
c0006380:	57                   	push   edi
c0006381:	89 d7                	mov    edi,edx
c0006383:	56                   	push   esi
c0006384:	ba 0f 00 00 00       	mov    edx,0xf
c0006389:	53                   	push   ebx
c000638a:	89 c6                	mov    esi,eax
c000638c:	83 ec 0c             	sub    esp,0xc
c000638f:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0006392:	39 38                	cmp    DWORD PTR [eax],edi
c0006394:	74 3c                	je     c00063d2 <bread_cache+0x53>
c0006396:	4a                   	dec    edx
c0006397:	83 fa ff             	cmp    edx,0xffffffff
c000639a:	75 f3                	jne    c000638f <bread_cache+0x10>
c000639c:	31 db                	xor    ebx,ebx
c000639e:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063a1:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063a4:	74 08                	je     c00063ae <bread_cache+0x2f>
c00063a6:	43                   	inc    ebx
c00063a7:	83 fb 10             	cmp    ebx,0x10
c00063aa:	75 f2                	jne    c000639e <bread_cache+0x1f>
c00063ac:	31 db                	xor    ebx,ebx
c00063ae:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063b1:	50                   	push   eax
c00063b2:	6a 01                	push   0x1
c00063b4:	57                   	push   edi
c00063b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063b8:	83 c0 04             	add    eax,0x4
c00063bb:	50                   	push   eax
c00063bc:	e8 9e ff ff ff       	call   c000635f <isoReadDiscSector>
c00063c1:	83 c4 10             	add    esp,0x10
c00063c4:	83 c9 ff             	or     ecx,0xffffffff
c00063c7:	85 c0                	test   eax,eax
c00063c9:	78 13                	js     c00063de <bread_cache+0x5f>
c00063cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063ce:	89 da                	mov    edx,ebx
c00063d0:	89 38                	mov    DWORD PTR [eax],edi
c00063d2:	89 f0                	mov    eax,esi
c00063d4:	e8 0f fe ff ff       	call   c00061e8 <bgrad_cache>
c00063d9:	b9 0f 00 00 00       	mov    ecx,0xf
c00063de:	83 c4 0c             	add    esp,0xc
c00063e1:	89 c8                	mov    eax,ecx
c00063e3:	5b                   	pop    ebx
c00063e4:	5e                   	pop    esi
c00063e5:	5f                   	pop    edi
c00063e6:	5d                   	pop    ebp
c00063e7:	c3                   	ret    

c00063e8 <biread>:
c00063e8:	89 c2                	mov    edx,eax
c00063ea:	b8 80 90 02 c0       	mov    eax,0xc0029080
c00063ef:	eb 8e                	jmp    c000637f <bread_cache>

c00063f1 <bdread>:
c00063f1:	89 c2                	mov    edx,eax
c00063f3:	b8 20 90 02 c0       	mov    eax,0xc0029020
c00063f8:	eb 85                	jmp    c000637f <bread_cache>

c00063fa <strnicmp>:
c00063fa:	55                   	push   ebp
c00063fb:	57                   	push   edi
c00063fc:	31 ff                	xor    edi,edi
c00063fe:	56                   	push   esi
c00063ff:	53                   	push   ebx
c0006400:	83 ec 0c             	sub    esp,0xc
c0006403:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006407:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000640b:	74 43                	je     c0006450 <strnicmp+0x56>
c000640d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006411:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006415:	85 c0                	test   eax,eax
c0006417:	74 37                	je     c0006450 <strnicmp+0x56>
c0006419:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c000641d:	85 d2                	test   edx,edx
c000641f:	74 2f                	je     c0006450 <strnicmp+0x56>
c0006421:	39 d0                	cmp    eax,edx
c0006423:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006426:	75 04                	jne    c000642c <strnicmp+0x32>
c0006428:	89 ef                	mov    edi,ebp
c000642a:	eb db                	jmp    c0006407 <strnicmp+0xd>
c000642c:	83 ec 0c             	sub    esp,0xc
c000642f:	50                   	push   eax
c0006430:	e8 1b a5 ff ff       	call   c0000950 <tolower>
c0006435:	89 c3                	mov    ebx,eax
c0006437:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000643b:	89 ef                	mov    edi,ebp
c000643d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006440:	e8 0b a5 ff ff       	call   c0000950 <tolower>
c0006445:	83 c4 10             	add    esp,0x10
c0006448:	29 c3                	sub    ebx,eax
c000644a:	89 d8                	mov    eax,ebx
c000644c:	74 b9                	je     c0006407 <strnicmp+0xd>
c000644e:	eb 02                	jmp    c0006452 <strnicmp+0x58>
c0006450:	31 c0                	xor    eax,eax
c0006452:	83 c4 0c             	add    esp,0xc
c0006455:	5b                   	pop    ebx
c0006456:	5e                   	pop    esi
c0006457:	5f                   	pop    edi
c0006458:	5d                   	pop    ebp
c0006459:	c3                   	ret    

c000645a <find_object>:
c000645a:	55                   	push   ebp
c000645b:	57                   	push   edi
c000645c:	89 c7                	mov    edi,eax
c000645e:	56                   	push   esi
c000645f:	53                   	push   ebx
c0006460:	89 d3                	mov    ebx,edx
c0006462:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006468:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000646f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006477:	83 3d b4 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029eb4,0x0
c000647e:	74 0b                	je     c000648b <find_object+0x31>
c0006480:	89 fa                	mov    edx,edi
c0006482:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006486:	e8 89 fc ff ff       	call   c0006114 <utf2ucs>
c000648b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000648e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006492:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006497:	7e 11                	jle    c00064aa <find_object+0x50>
c0006499:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000649d:	e8 46 ff ff ff       	call   c00063e8 <biread>
c00064a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00064a6:	85 c0                	test   eax,eax
c00064a8:	79 07                	jns    c00064b1 <find_object+0x57>
c00064aa:	31 db                	xor    ebx,ebx
c00064ac:	e9 56 01 00 00       	jmp    c0006607 <find_object+0x1ad>
c00064b1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00064b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00064c1:	8b 04 85 80 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f80]
c00064c8:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00064cc:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064cf:	85 f6                	test   esi,esi
c00064d1:	75 0e                	jne    c00064e1 <find_object+0x87>
c00064d3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00064d7:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00064df:	eb b1                	jmp    c0006492 <find_object+0x38>
c00064e1:	8b 2d b4 9e 02 c0    	mov    ebp,DWORD PTR ds:0xc0029eb4
c00064e7:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00064eb:	85 ed                	test   ebp,ebp
c00064ed:	89 c8                	mov    eax,ecx
c00064ef:	74 2b                	je     c000651c <find_object+0xc2>
c00064f1:	8d 43 21             	lea    eax,[ebx+0x21]
c00064f4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064f8:	e8 07 fd ff ff       	call   c0006204 <ucscompare>
c00064fd:	85 c0                	test   eax,eax
c00064ff:	0f 84 bf 00 00 00    	je     c00065c4 <find_object+0x16a>
c0006505:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006508:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c000650c:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006514:	0f 8e da 00 00 00    	jle    c00065f4 <find_object+0x19a>
c000651a:	eb b7                	jmp    c00064d3 <find_object+0x79>
c000651c:	29 ce                	sub    esi,ecx
c000651e:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006522:	a8 01                	test   al,0x1
c0006524:	74 05                	je     c000652b <find_object+0xd1>
c0006526:	83 ee 21             	sub    esi,0x21
c0006529:	eb 5a                	jmp    c0006585 <find_object+0x12b>
c000652b:	42                   	inc    edx
c000652c:	83 ee 22             	sub    esi,0x22
c000652f:	eb 54                	jmp    c0006585 <find_object+0x12b>
c0006531:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006534:	48                   	dec    eax
c0006535:	3c 01                	cmp    al,0x1
c0006537:	77 51                	ja     c000658a <find_object+0x130>
c0006539:	50                   	push   eax
c000653a:	6a 02                	push   0x2
c000653c:	68 dd 34 02 c0       	push   0xc00234dd
c0006541:	52                   	push   edx
c0006542:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006546:	e8 95 a2 ff ff       	call   c00007e0 <strncmp>
c000654b:	83 c4 10             	add    esp,0x10
c000654e:	85 c0                	test   eax,eax
c0006550:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006554:	75 27                	jne    c000657d <find_object+0x123>
c0006556:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000655a:	8d 68 fb             	lea    ebp,[eax-0x5]
c000655d:	50                   	push   eax
c000655e:	8d 42 05             	lea    eax,[edx+0x5]
c0006561:	55                   	push   ebp
c0006562:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006566:	50                   	push   eax
c0006567:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000656b:	50                   	push   eax
c000656c:	e8 0f a1 ff ff       	call   c0000680 <strncpy>
c0006571:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006576:	83 c4 10             	add    esp,0x10
c0006579:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657d:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006581:	29 c6                	sub    esi,eax
c0006583:	01 c2                	add    edx,eax
c0006585:	83 fe 03             	cmp    esi,0x3
c0006588:	7f a7                	jg     c0006531 <find_object+0xd7>
c000658a:	85 ed                	test   ebp,ebp
c000658c:	7e 40                	jle    c00065ce <find_object+0x174>
c000658e:	51                   	push   ecx
c000658f:	51                   	push   ecx
c0006590:	6a 2f                	push   0x2f
c0006592:	57                   	push   edi
c0006593:	e8 08 a2 ff ff       	call   c00007a0 <strchr>
c0006598:	83 c4 10             	add    esp,0x10
c000659b:	85 c0                	test   eax,eax
c000659d:	74 04                	je     c00065a3 <find_object+0x149>
c000659f:	29 f8                	sub    eax,edi
c00065a1:	eb 0c                	jmp    c00065af <find_object+0x155>
c00065a3:	83 ec 0c             	sub    esp,0xc
c00065a6:	57                   	push   edi
c00065a7:	e8 c4 9f ff ff       	call   c0000570 <strlen>
c00065ac:	83 c4 10             	add    esp,0x10
c00065af:	52                   	push   edx
c00065b0:	50                   	push   eax
c00065b1:	57                   	push   edi
c00065b2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065b6:	50                   	push   eax
c00065b7:	e8 3e fe ff ff       	call   c00063fa <strnicmp>
c00065bc:	83 c4 10             	add    esp,0x10
c00065bf:	e9 39 ff ff ff       	jmp    c00064fd <find_object+0xa3>
c00065c4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065c8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00065cc:	eb 1e                	jmp    c00065ec <find_object+0x192>
c00065ce:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065d2:	8d 43 21             	lea    eax,[ebx+0x21]
c00065d5:	89 f9                	mov    ecx,edi
c00065d7:	e8 a7 fc ff ff       	call   c0006283 <fncompare>
c00065dc:	85 c0                	test   eax,eax
c00065de:	0f 85 21 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065e4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065e8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00065ec:	0f 85 13 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065f2:	eb 13                	jmp    c0006607 <find_object+0x1ad>
c00065f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00065f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00065fc:	0f 8f b7 fe ff ff    	jg     c00064b9 <find_object+0x5f>
c0006602:	e9 cc fe ff ff       	jmp    c00064d3 <find_object+0x79>
c0006607:	81 c4 2c 01 00 00    	add    esp,0x12c
c000660d:	89 d8                	mov    eax,ebx
c000660f:	5b                   	pop    ebx
c0006610:	5e                   	pop    esi
c0006611:	5f                   	pop    edi
c0006612:	5d                   	pop    ebp
c0006613:	c3                   	ret    

c0006614 <find_object_path>:
c0006614:	55                   	push   ebp
c0006615:	57                   	push   edi
c0006616:	89 d7                	mov    edi,edx
c0006618:	56                   	push   esi
c0006619:	89 c6                	mov    esi,eax
c000661b:	53                   	push   ebx
c000661c:	89 cb                	mov    ebx,ecx
c000661e:	83 ec 0c             	sub    esp,0xc
c0006621:	50                   	push   eax
c0006622:	50                   	push   eax
c0006623:	6a 2f                	push   0x2f
c0006625:	56                   	push   esi
c0006626:	e8 75 a1 ff ff       	call   c00007a0 <strchr>
c000662b:	83 c4 10             	add    esp,0x10
c000662e:	89 c5                	mov    ebp,eax
c0006630:	85 c0                	test   eax,eax
c0006632:	74 3a                	je     c000666e <find_object_path+0x5a>
c0006634:	39 ee                	cmp    esi,ebp
c0006636:	74 31                	je     c0006669 <find_object_path+0x55>
c0006638:	8d 43 0a             	lea    eax,[ebx+0xa]
c000663b:	e8 a6 fb ff ff       	call   c00061e6 <iso_733>
c0006640:	89 c2                	mov    edx,eax
c0006642:	8d 43 02             	lea    eax,[ebx+0x2]
c0006645:	e8 9c fb ff ff       	call   c00061e6 <iso_733>
c000664a:	83 ec 0c             	sub    esp,0xc
c000664d:	89 c1                	mov    ecx,eax
c000664f:	52                   	push   edx
c0006650:	89 f0                	mov    eax,esi
c0006652:	ba 01 00 00 00       	mov    edx,0x1
c0006657:	e8 fe fd ff ff       	call   c000645a <find_object>
c000665c:	83 c4 10             	add    esp,0x10
c000665f:	89 c3                	mov    ebx,eax
c0006661:	85 c0                	test   eax,eax
c0006663:	75 04                	jne    c0006669 <find_object_path+0x55>
c0006665:	31 db                	xor    ebx,ebx
c0006667:	eb 36                	jmp    c000669f <find_object_path+0x8b>
c0006669:	8d 75 01             	lea    esi,[ebp+0x1]
c000666c:	eb b3                	jmp    c0006621 <find_object_path+0xd>
c000666e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006671:	74 28                	je     c000669b <find_object_path+0x87>
c0006673:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006676:	e8 6b fb ff ff       	call   c00061e6 <iso_733>
c000667b:	89 c2                	mov    edx,eax
c000667d:	8d 43 02             	lea    eax,[ebx+0x2]
c0006680:	e8 61 fb ff ff       	call   c00061e6 <iso_733>
c0006685:	83 ec 0c             	sub    esp,0xc
c0006688:	89 c1                	mov    ecx,eax
c000668a:	52                   	push   edx
c000668b:	89 f0                	mov    eax,esi
c000668d:	89 fa                	mov    edx,edi
c000668f:	e8 c6 fd ff ff       	call   c000645a <find_object>
c0006694:	83 c4 10             	add    esp,0x10
c0006697:	89 c3                	mov    ebx,eax
c0006699:	eb 04                	jmp    c000669f <find_object_path+0x8b>
c000669b:	85 ff                	test   edi,edi
c000669d:	74 c6                	je     c0006665 <find_object_path+0x51>
c000669f:	83 c4 0c             	add    esp,0xc
c00066a2:	89 d8                	mov    eax,ebx
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	5f                   	pop    edi
c00066a7:	5d                   	pop    ebp
c00066a8:	c3                   	ret    

c00066a9 <stricmp>:
c00066a9:	57                   	push   edi
c00066aa:	56                   	push   esi
c00066ab:	31 f6                	xor    esi,esi
c00066ad:	53                   	push   ebx
c00066ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b2:	83 ec 0c             	sub    esp,0xc
c00066b5:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066bd:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066c1:	50                   	push   eax
c00066c2:	e8 69 a2 ff ff       	call   c0000930 <toupper>
c00066c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00066ca:	e8 81 a2 ff ff       	call   c0000950 <tolower>
c00066cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066d2:	89 c3                	mov    ebx,eax
c00066d4:	e8 57 a2 ff ff       	call   c0000930 <toupper>
c00066d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00066dc:	e8 6f a2 ff ff       	call   c0000950 <tolower>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	39 c3                	cmp    ebx,eax
c00066e6:	75 05                	jne    c00066ed <stricmp+0x44>
c00066e8:	46                   	inc    esi
c00066e9:	85 db                	test   ebx,ebx
c00066eb:	75 c1                	jne    c00066ae <stricmp+0x5>
c00066ed:	29 c3                	sub    ebx,eax
c00066ef:	89 d8                	mov    eax,ebx
c00066f1:	5b                   	pop    ebx
c00066f2:	5e                   	pop    esi
c00066f3:	5f                   	pop    edi
c00066f4:	c3                   	ret    

c00066f5 <iso_open>:
c00066f5:	57                   	push   edi
c00066f6:	31 c0                	xor    eax,eax
c00066f8:	56                   	push   esi
c00066f9:	b9 80 9e 02 c0       	mov    ecx,0xc0029e80
c00066fe:	53                   	push   ebx
c00066ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006704:	0f 95 c0             	setne  al
c0006707:	89 c2                	mov    edx,eax
c0006709:	89 c6                	mov    esi,eax
c000670b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000670f:	e8 00 ff ff ff       	call   c0006614 <find_object_path>
c0006714:	83 ca ff             	or     edx,0xffffffff
c0006717:	85 c0                	test   eax,eax
c0006719:	74 5e                	je     c0006779 <iso_open+0x84>
c000671b:	89 c1                	mov    ecx,eax
c000671d:	31 d2                	xor    edx,edx
c000671f:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006725:	83 bf 40 95 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd6ac0],0x0
c000672c:	75 42                	jne    c0006770 <iso_open+0x7b>
c000672e:	8d 41 02             	lea    eax,[ecx+0x2]
c0006731:	c7 87 40 95 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd6ac0],0xffffffff
c000673b:	e8 a6 fa ff ff       	call   c00061e6 <iso_733>
c0006740:	89 b7 44 95 02 c0    	mov    DWORD PTR [edi-0x3ffd6abc],esi
c0006746:	89 87 40 95 02 c0    	mov    DWORD PTR [edi-0x3ffd6ac0],eax
c000674c:	c7 87 48 95 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd6ab8],0x0
c0006756:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006759:	e8 88 fa ff ff       	call   c00061e6 <iso_733>
c000675e:	c7 87 d0 95 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd6a30],0x0
c0006768:	89 87 4c 95 02 c0    	mov    DWORD PTR [edi-0x3ffd6ab4],eax
c000676e:	eb 09                	jmp    c0006779 <iso_open+0x84>
c0006770:	42                   	inc    edx
c0006771:	83 fa 10             	cmp    edx,0x10
c0006774:	75 a9                	jne    c000671f <iso_open+0x2a>
c0006776:	83 ca ff             	or     edx,0xffffffff
c0006779:	5b                   	pop    ebx
c000677a:	89 d0                	mov    eax,edx
c000677c:	5e                   	pop    esi
c000677d:	5f                   	pop    edi
c000677e:	c3                   	ret    

c000677f <iso_close>:
c000677f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006783:	83 f8 0f             	cmp    eax,0xf
c0006786:	7f 10                	jg     c0006798 <iso_close+0x19>
c0006788:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000678e:	c7 80 40 95 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6ac0],0x0
c0006798:	e9 5e fb ff ff       	jmp    c00062fb <bclear_cache>

c000679d <iso_read>:
c000679d:	55                   	push   ebp
c000679e:	57                   	push   edi
c000679f:	56                   	push   esi
c00067a0:	53                   	push   ebx
c00067a1:	83 ec 1c             	sub    esp,0x1c
c00067a4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067a8:	83 fd 0f             	cmp    ebp,0xf
c00067ab:	7e 0a                	jle    c00067b7 <iso_read+0x1a>
c00067ad:	83 c8 ff             	or     eax,0xffffffff
c00067b0:	89 c2                	mov    edx,eax
c00067b2:	e9 f4 00 00 00       	jmp    c00068ab <iso_read+0x10e>
c00067b7:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067bd:	83 bd 40 95 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd6ac0],0x0
c00067c4:	74 e7                	je     c00067ad <iso_read+0x10>
c00067c6:	8b 95 d0 95 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd6a30]
c00067cc:	85 d2                	test   edx,edx
c00067ce:	75 dd                	jne    c00067ad <iso_read+0x10>
c00067d0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067d5:	0f 84 cd 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067db:	8b 85 48 95 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd6ab8]
c00067e1:	8b 8d 4c 95 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd6ab4]
c00067e7:	29 c1                	sub    ecx,eax
c00067e9:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067ed:	76 04                	jbe    c00067f3 <iso_read+0x56>
c00067ef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067f3:	85 c9                	test   ecx,ecx
c00067f5:	0f 84 ad 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067fb:	89 c6                	mov    esi,eax
c00067fd:	bb 00 08 00 00       	mov    ebx,0x800
c0006802:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006808:	c1 e8 0b             	shr    eax,0xb
c000680b:	29 f3                	sub    ebx,esi
c000680d:	03 85 40 95 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd6ac0]
c0006813:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006819:	7e 3f                	jle    c000685a <iso_read+0xbd>
c000681b:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006821:	75 37                	jne    c000685a <iso_read+0xbd>
c0006823:	be 20 00 00 00       	mov    esi,0x20
c0006828:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000682e:	7f 05                	jg     c0006835 <iso_read+0x98>
c0006830:	89 ce                	mov    esi,ecx
c0006832:	c1 fe 0b             	sar    esi,0xb
c0006835:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006839:	89 f3                	mov    ebx,esi
c000683b:	c1 e3 0b             	shl    ebx,0xb
c000683e:	52                   	push   edx
c000683f:	56                   	push   esi
c0006840:	50                   	push   eax
c0006841:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006845:	e8 15 fb ff ff       	call   c000635f <isoReadDiscSector>
c000684a:	83 c4 10             	add    esp,0x10
c000684d:	85 c0                	test   eax,eax
c000684f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006853:	7f 3e                	jg     c0006893 <iso_read+0xf6>
c0006855:	e9 53 ff ff ff       	jmp    c00067ad <iso_read+0x10>
c000685a:	39 cb                	cmp    ebx,ecx
c000685c:	7e 02                	jle    c0006860 <iso_read+0xc3>
c000685e:	89 cb                	mov    ebx,ecx
c0006860:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006864:	e8 88 fb ff ff       	call   c00063f1 <bdread>
c0006869:	85 c0                	test   eax,eax
c000686b:	0f 88 3c ff ff ff    	js     c00067ad <iso_read+0x10>
c0006871:	8b 0c 85 20 90 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6fe0]
c0006878:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000687c:	8b 85 48 95 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd6ab8]
c0006882:	25 ff 07 00 00       	and    eax,0x7ff
c0006887:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c000688b:	89 d9                	mov    ecx,ebx
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006893:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006897:	01 9d 48 95 02 c0    	add    DWORD PTR [ebp-0x3ffd6ab8],ebx
c000689d:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068a1:	01 da                	add    edx,ebx
c00068a3:	e9 28 ff ff ff       	jmp    c00067d0 <iso_read+0x33>
c00068a8:	89 d0                	mov    eax,edx
c00068aa:	99                   	cdq    
c00068ab:	83 c4 1c             	add    esp,0x1c
c00068ae:	5b                   	pop    ebx
c00068af:	5e                   	pop    esi
c00068b0:	5f                   	pop    edi
c00068b1:	5d                   	pop    ebp
c00068b2:	c3                   	ret    

c00068b3 <iso_seek>:
c00068b3:	55                   	push   ebp
c00068b4:	83 c8 ff             	or     eax,0xffffffff
c00068b7:	57                   	push   edi
c00068b8:	89 c2                	mov    edx,eax
c00068ba:	56                   	push   esi
c00068bb:	53                   	push   ebx
c00068bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068c8:	83 fe 0f             	cmp    esi,0xf
c00068cb:	7f 65                	jg     c0006932 <iso_seek+0x7f>
c00068cd:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068d3:	8d 8d 40 95 02 c0    	lea    ecx,[ebp-0x3ffd6ac0]
c00068d9:	83 bd 40 95 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd6ac0],0x0
c00068e0:	74 50                	je     c0006932 <iso_seek+0x7f>
c00068e2:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068e9:	75 47                	jne    c0006932 <iso_seek+0x7f>
c00068eb:	83 fb 01             	cmp    ebx,0x1
c00068ee:	74 0e                	je     c00068fe <iso_seek+0x4b>
c00068f0:	83 fb 02             	cmp    ebx,0x2
c00068f3:	74 0e                	je     c0006903 <iso_seek+0x50>
c00068f5:	85 db                	test   ebx,ebx
c00068f7:	75 39                	jne    c0006932 <iso_seek+0x7f>
c00068f9:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068fc:	eb 0d                	jmp    c000690b <iso_seek+0x58>
c00068fe:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006901:	eb 08                	jmp    c000690b <iso_seek+0x58>
c0006903:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006906:	01 f8                	add    eax,edi
c0006908:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000690b:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006911:	8b 88 4c 95 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd6ab4]
c0006917:	05 40 95 02 c0       	add    eax,0xc0029540
c000691c:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000691f:	76 03                	jbe    c0006924 <iso_seek+0x71>
c0006921:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006924:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000692a:	8b 82 48 95 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd6ab8]
c0006930:	31 d2                	xor    edx,edx
c0006932:	5b                   	pop    ebx
c0006933:	5e                   	pop    esi
c0006934:	5f                   	pop    edi
c0006935:	5d                   	pop    ebp
c0006936:	c3                   	ret    

c0006937 <iso_tell>:
c0006937:	83 c8 ff             	or     eax,0xffffffff
c000693a:	53                   	push   ebx
c000693b:	89 c2                	mov    edx,eax
c000693d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006941:	83 f9 0f             	cmp    ecx,0xf
c0006944:	7f 20                	jg     c0006966 <iso_tell+0x2f>
c0006946:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000694c:	83 bb 40 95 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd6ac0],0x0
c0006953:	74 11                	je     c0006966 <iso_tell+0x2f>
c0006955:	83 bb d0 95 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd6a30],0x0
c000695c:	75 08                	jne    c0006966 <iso_tell+0x2f>
c000695e:	8b 83 48 95 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd6ab8]
c0006964:	31 d2                	xor    edx,edx
c0006966:	5b                   	pop    ebx
c0006967:	c3                   	ret    

c0006968 <iso_total>:
c0006968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000696c:	83 c8 ff             	or     eax,0xffffffff
c000696f:	83 fa 0f             	cmp    edx,0xf
c0006972:	7f 1e                	jg     c0006992 <iso_total+0x2a>
c0006974:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000697a:	83 ba 40 95 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd6ac0],0x0
c0006981:	74 0f                	je     c0006992 <iso_total+0x2a>
c0006983:	83 ba d0 95 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd6a30],0x0
c000698a:	75 06                	jne    c0006992 <iso_total+0x2a>
c000698c:	8b 82 4c 95 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd6ab4]
c0006992:	c3                   	ret    

c0006993 <fn_postprocess>:
c0006993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006997:	89 d0                	mov    eax,edx
c0006999:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000699c:	83 f9 3b             	cmp    ecx,0x3b
c000699f:	74 07                	je     c00069a8 <fn_postprocess+0x15>
c00069a1:	85 c9                	test   ecx,ecx
c00069a3:	74 03                	je     c00069a8 <fn_postprocess+0x15>
c00069a5:	40                   	inc    eax
c00069a6:	eb f1                	jmp    c0006999 <fn_postprocess+0x6>
c00069a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069ab:	39 d0                	cmp    eax,edx
c00069ad:	76 0a                	jbe    c00069b9 <fn_postprocess+0x26>
c00069af:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069b3:	75 04                	jne    c00069b9 <fn_postprocess+0x26>
c00069b5:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b9:	c3                   	ret    

c00069ba <iso_readdir>:
c00069ba:	55                   	push   ebp
c00069bb:	57                   	push   edi
c00069bc:	56                   	push   esi
c00069bd:	53                   	push   ebx
c00069be:	83 ec 1c             	sub    esp,0x1c
c00069c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069c5:	83 fb 0f             	cmp    ebx,0xf
c00069c8:	7f 28                	jg     c00069f2 <iso_readdir+0x38>
c00069ca:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069d0:	8d b8 40 95 02 c0    	lea    edi,[eax-0x3ffd6ac0]
c00069d6:	83 b8 40 95 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd6ac0],0x0
c00069dd:	74 13                	je     c00069f2 <iso_readdir+0x38>
c00069df:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069e3:	74 0d                	je     c00069f2 <iso_readdir+0x38>
c00069e5:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069ec:	0f 84 b1 00 00 00    	je     c0006aa3 <iso_readdir+0xe9>
c00069f2:	83 ec 0c             	sub    esp,0xc
c00069f5:	68 e0 34 02 c0       	push   0xc00234e0
c00069fa:	e8 21 6a 01 00       	call   c001d420 <iso_kprintf>
c00069ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a02:	e8 35 6a 01 00       	call   c001d43c <iso_kprintfd>
c0006a07:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a0d:	c7 04 24 e5 34 02 c0 	mov    DWORD PTR [esp],0xc00234e5
c0006a14:	e8 07 6a 01 00       	call   c001d420 <iso_kprintf>
c0006a19:	5d                   	pop    ebp
c0006a1a:	ff b3 40 95 02 c0    	push   DWORD PTR [ebx-0x3ffd6ac0]
c0006a20:	e8 17 6a 01 00       	call   c001d43c <iso_kprintfd>
c0006a25:	c7 04 24 eb 34 02 c0 	mov    DWORD PTR [esp],0xc00234eb
c0006a2c:	e8 ef 69 01 00       	call   c001d420 <iso_kprintf>
c0006a31:	58                   	pop    eax
c0006a32:	ff b3 44 95 02 c0    	push   DWORD PTR [ebx-0x3ffd6abc]
c0006a38:	e8 ff 69 01 00       	call   c001d43c <iso_kprintfd>
c0006a3d:	c7 04 24 f1 34 02 c0 	mov    DWORD PTR [esp],0xc00234f1
c0006a44:	e8 d7 69 01 00       	call   c001d420 <iso_kprintf>
c0006a49:	58                   	pop    eax
c0006a4a:	ff b3 d0 95 02 c0    	push   DWORD PTR [ebx-0x3ffd6a30]
c0006a50:	e8 e7 69 01 00       	call   c001d43c <iso_kprintfd>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	eb 42                	jmp    c0006a9c <iso_readdir+0xe2>
c0006a5a:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a5d:	8b 34 85 80 90 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd6f80]
c0006a64:	89 d1                	mov    ecx,edx
c0006a66:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a6c:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a70:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a73:	75 35                	jne    c0006aaa <iso_readdir+0xf0>
c0006a75:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a7b:	81 c2 00 08 00 00    	add    edx,0x800
c0006a81:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a84:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a87:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a8a:	73 1e                	jae    c0006aaa <iso_readdir+0xf0>
c0006a8c:	c1 ea 0b             	shr    edx,0xb
c0006a8f:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a91:	01 d0                	add    eax,edx
c0006a93:	e8 50 f9 ff ff       	call   c00063e8 <biread>
c0006a98:	85 c0                	test   eax,eax
c0006a9a:	79 be                	jns    c0006a5a <iso_readdir+0xa0>
c0006a9c:	31 c0                	xor    eax,eax
c0006a9e:	e9 66 01 00 00       	jmp    c0006c09 <iso_readdir+0x24f>
c0006aa3:	31 f6                	xor    esi,esi
c0006aa5:	83 c8 ff             	or     eax,0xffffffff
c0006aa8:	eb da                	jmp    c0006a84 <iso_readdir+0xca>
c0006aaa:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ab0:	8b ba 48 95 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd6ab8]
c0006ab6:	81 c2 40 95 02 c0    	add    edx,0xc0029540
c0006abc:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006abf:	73 db                	jae    c0006a9c <iso_readdir+0xe2>
c0006ac1:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ac5:	75 34                	jne    c0006afb <iso_readdir+0x141>
c0006ac7:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006acb:	75 2e                	jne    c0006afb <iso_readdir+0x141>
c0006acd:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ad0:	8b 34 85 80 90 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd6f80]
c0006ad7:	01 f9                	add    ecx,edi
c0006ad9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006adc:	89 c8                	mov    eax,ecx
c0006ade:	25 ff 07 00 00       	and    eax,0x7ff
c0006ae3:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ae8:	01 c8                	add    eax,ecx
c0006aea:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006aed:	25 ff 07 00 00       	and    eax,0x7ff
c0006af2:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006af6:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006af9:	74 a1                	je     c0006a9c <iso_readdir+0xe2>
c0006afb:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b01:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b05:	8d 56 21             	lea    edx,[esi+0x21]
c0006b08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b0c:	8d a8 58 95 02 c0    	lea    ebp,[eax-0x3ffd6aa8]
c0006b12:	83 3d b4 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029eb4,0x0
c0006b19:	74 0c                	je     c0006b27 <iso_readdir+0x16d>
c0006b1b:	89 e8                	mov    eax,ebp
c0006b1d:	e8 14 f6 ff ff       	call   c0006136 <ucs2utfn>
c0006b22:	e9 a6 00 00 00       	jmp    c0006bcd <iso_readdir+0x213>
c0006b27:	57                   	push   edi
c0006b28:	51                   	push   ecx
c0006b29:	52                   	push   edx
c0006b2a:	55                   	push   ebp
c0006b2b:	e8 50 9b ff ff       	call   c0000680 <strncpy>
c0006b30:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b34:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006b3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b3d:	c6 84 01 58 95 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd6aa8],0x0
c0006b45:	e8 49 fe ff ff       	call   c0006993 <fn_postprocess>
c0006b4a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b4e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b51:	83 c4 10             	add    esp,0x10
c0006b54:	29 d0                	sub    eax,edx
c0006b56:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006b5a:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006b5e:	74 05                	je     c0006b65 <iso_readdir+0x1ab>
c0006b60:	83 e8 21             	sub    eax,0x21
c0006b63:	eb 04                	jmp    c0006b69 <iso_readdir+0x1af>
c0006b65:	47                   	inc    edi
c0006b66:	83 e8 22             	sub    eax,0x22
c0006b69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b6d:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b77:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b7c:	7e 4f                	jle    c0006bcd <iso_readdir+0x213>
c0006b7e:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b81:	48                   	dec    eax
c0006b82:	3c 01                	cmp    al,0x1
c0006b84:	77 47                	ja     c0006bcd <iso_readdir+0x213>
c0006b86:	52                   	push   edx
c0006b87:	6a 02                	push   0x2
c0006b89:	68 dd 34 02 c0       	push   0xc00234dd
c0006b8e:	57                   	push   edi
c0006b8f:	e8 4c 9c ff ff       	call   c00007e0 <strncmp>
c0006b94:	83 c4 10             	add    esp,0x10
c0006b97:	85 c0                	test   eax,eax
c0006b99:	75 26                	jne    c0006bc1 <iso_readdir+0x207>
c0006b9b:	50                   	push   eax
c0006b9c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ba0:	83 e8 05             	sub    eax,0x5
c0006ba3:	50                   	push   eax
c0006ba4:	8d 47 05             	lea    eax,[edi+0x5]
c0006ba7:	50                   	push   eax
c0006ba8:	55                   	push   ebp
c0006ba9:	e8 d2 9a ff ff       	call   c0000680 <strncpy>
c0006bae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006bb2:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bb6:	83 c4 10             	add    esp,0x10
c0006bb9:	c6 84 08 53 95 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd6aad],0x0
c0006bc1:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bc5:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006bc9:	01 c7                	add    edi,eax
c0006bcb:	eb aa                	jmp    c0006b77 <iso_readdir+0x1bd>
c0006bcd:	83 c8 ff             	or     eax,0xffffffff
c0006bd0:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bd4:	89 c2                	mov    edx,eax
c0006bd6:	75 0a                	jne    c0006be2 <iso_readdir+0x228>
c0006bd8:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bdb:	e8 06 f6 ff ff       	call   c00061e6 <iso_733>
c0006be0:	31 d2                	xor    edx,edx
c0006be2:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006be8:	89 83 50 95 02 c0    	mov    DWORD PTR [ebx-0x3ffd6ab0],eax
c0006bee:	89 93 54 95 02 c0    	mov    DWORD PTR [ebx-0x3ffd6aac],edx
c0006bf4:	81 c3 40 95 02 c0    	add    ebx,0xc0029540
c0006bfa:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bfd:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c04:	05 50 95 02 c0       	add    eax,0xc0029550
c0006c09:	83 c4 1c             	add    esp,0x1c
c0006c0c:	5b                   	pop    ebx
c0006c0d:	5e                   	pop    esi
c0006c0e:	5f                   	pop    edi
c0006c0f:	5d                   	pop    ebp
c0006c10:	c3                   	ret    

c0006c11 <iso_reset>:
c0006c11:	83 ec 18             	sub    esp,0x18
c0006c14:	68 fa 34 02 c0       	push   0xc00234fa
c0006c19:	e8 02 68 01 00       	call   c001d420 <iso_kprintf>
c0006c1e:	e8 10 f7 ff ff       	call   c0006333 <iso_break_all>
c0006c23:	e8 09 f7 ff ff       	call   c0006331 <bclear>
c0006c28:	31 c0                	xor    eax,eax
c0006c2a:	83 c4 1c             	add    esp,0x1c
c0006c2d:	c3                   	ret    

c0006c2e <init_percd>:
c0006c2e:	57                   	push   edi
c0006c2f:	56                   	push   esi
c0006c30:	53                   	push   ebx
c0006c31:	bb 01 00 00 00       	mov    ebx,0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	a2 60 90 02 c0       	mov    ds:0xc0029060,al
c0006c3f:	e8 cd ff ff ff       	call   c0006c11 <iso_reset>
c0006c44:	c7 05 b4 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029eb4,0x0
c0006c4e:	a1 ac 9e 02 c0       	mov    eax,ds:0xc0029eac
c0006c53:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c57:	e8 8c f7 ff ff       	call   c00063e8 <biread>
c0006c5c:	89 c6                	mov    esi,eax
c0006c5e:	85 c0                	test   eax,eax
c0006c60:	0f 88 ba 00 00 00    	js     c0006d20 <init_percd+0xf2>
c0006c66:	8b 04 85 80 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f80]
c0006c6d:	83 c0 04             	add    eax,0x4
c0006c70:	52                   	push   edx
c0006c71:	6a 06                	push   0x6
c0006c73:	68 05 35 02 c0       	push   0xc0023505
c0006c78:	50                   	push   eax
c0006c79:	e8 02 97 ff ff       	call   c0000380 <memcmp>
c0006c7e:	83 c4 10             	add    esp,0x10
c0006c81:	85 c0                	test   eax,eax
c0006c83:	74 08                	je     c0006c8d <init_percd+0x5f>
c0006c85:	43                   	inc    ebx
c0006c86:	83 fb 04             	cmp    ebx,0x4
c0006c89:	75 c3                	jne    c0006c4e <init_percd+0x20>
c0006c8b:	eb 1a                	jmp    c0006ca7 <init_percd+0x79>
c0006c8d:	8b 04 b5 80 90 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd6f80]
c0006c94:	83 c0 5c             	add    eax,0x5c
c0006c97:	e8 17 f5 ff ff       	call   c00061b3 <isjoliet>
c0006c9c:	a3 b4 9e 02 c0       	mov    ds:0xc0029eb4,eax
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 e0                	je     c0006c85 <init_percd+0x57>
c0006ca5:	eb 3e                	jmp    c0006ce5 <init_percd+0xb7>
c0006ca7:	83 3d b4 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029eb4,0x0
c0006cae:	75 35                	jne    c0006ce5 <init_percd+0xb7>
c0006cb0:	a1 ac 9e 02 c0       	mov    eax,ds:0xc0029eac
c0006cb5:	83 c0 10             	add    eax,0x10
c0006cb8:	e8 2b f7 ff ff       	call   c00063e8 <biread>
c0006cbd:	89 c6                	mov    esi,eax
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	78 5f                	js     c0006d22 <init_percd+0xf4>
c0006cc3:	83 cb ff             	or     ebx,0xffffffff
c0006cc6:	50                   	push   eax
c0006cc7:	8b 04 b5 80 90 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd6f80]
c0006cce:	6a 06                	push   0x6
c0006cd0:	83 c0 04             	add    eax,0x4
c0006cd3:	68 0c 35 02 c0       	push   0xc002350c
c0006cd8:	50                   	push   eax
c0006cd9:	e8 a2 96 ff ff       	call   c0000380 <memcmp>
c0006cde:	83 c4 10             	add    esp,0x10
c0006ce1:	85 c0                	test   eax,eax
c0006ce3:	75 3d                	jne    c0006d22 <init_percd+0xf4>
c0006ce5:	8b 34 b5 80 90 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd6f80]
c0006cec:	bf 80 9e 02 c0       	mov    edi,0xc0029e80
c0006cf1:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006cf7:	b9 22 00 00 00       	mov    ecx,0x22
c0006cfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cfe:	b8 82 9e 02 c0       	mov    eax,0xc0029e82
c0006d03:	31 db                	xor    ebx,ebx
c0006d05:	e8 dc f4 ff ff       	call   c00061e6 <iso_733>
c0006d0a:	a3 a8 9e 02 c0       	mov    ds:0xc0029ea8,eax
c0006d0f:	b8 8a 9e 02 c0       	mov    eax,0xc0029e8a
c0006d14:	e8 cd f4 ff ff       	call   c00061e6 <iso_733>
c0006d19:	a3 a4 9e 02 c0       	mov    ds:0xc0029ea4,eax
c0006d1e:	eb 02                	jmp    c0006d22 <init_percd+0xf4>
c0006d20:	89 c3                	mov    ebx,eax
c0006d22:	89 d8                	mov    eax,ebx
c0006d24:	5b                   	pop    ebx
c0006d25:	5e                   	pop    esi
c0006d26:	5f                   	pop    edi
c0006d27:	c3                   	ret    

c0006d28 <iso_ioctl>:
c0006d28:	83 ec 18             	sub    esp,0x18
c0006d2b:	68 13 35 02 c0       	push   0xc0023513
c0006d30:	e8 eb 66 01 00       	call   c001d420 <iso_kprintf>
c0006d35:	e8 d7 fe ff ff       	call   c0006c11 <iso_reset>
c0006d3a:	31 c0                	xor    eax,eax
c0006d3c:	83 c4 1c             	add    esp,0x1c
c0006d3f:	c3                   	ret    

c0006d40 <fs_iso9660_init>:
c0006d40:	53                   	push   ebx
c0006d41:	31 db                	xor    ebx,ebx
c0006d43:	83 ec 14             	sub    esp,0x14
c0006d46:	68 1e 35 02 c0       	push   0xc002351e
c0006d4b:	e8 d0 66 01 00       	call   c001d420 <iso_kprintf>
c0006d50:	83 c4 0c             	add    esp,0xc
c0006d53:	68 40 09 00 00       	push   0x940
c0006d58:	6a 00                	push   0x0
c0006d5a:	68 40 95 02 c0       	push   0xc0029540
c0006d5f:	e8 8c 97 ff ff       	call   c00004f0 <memset>
c0006d64:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d6b:	c7 05 40 95 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0029540,0xffffffff
c0006d75:	e8 e9 89 00 00       	call   c000f763 <malloc>
c0006d7a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d81:	a3 b0 9e 02 c0       	mov    ds:0xc0029eb0,eax
c0006d86:	e8 d8 89 00 00       	call   c000f763 <malloc>
c0006d8b:	83 c4 10             	add    esp,0x10
c0006d8e:	a3 20 95 02 c0       	mov    ds:0xc0029520,eax
c0006d93:	83 ec 0c             	sub    esp,0xc
c0006d96:	68 04 08 00 00       	push   0x804
c0006d9b:	e8 c3 89 00 00       	call   c000f763 <malloc>
c0006da0:	89 04 9d 80 90 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd6f80],eax
c0006da7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dad:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006db4:	e8 aa 89 00 00       	call   c000f763 <malloc>
c0006db9:	83 c4 10             	add    esp,0x10
c0006dbc:	89 04 9d 20 90 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd6fe0],eax
c0006dc3:	43                   	inc    ebx
c0006dc4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dca:	83 fb 10             	cmp    ebx,0x10
c0006dcd:	75 c4                	jne    c0006d93 <fs_iso9660_init+0x53>
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	83 c4 08             	add    esp,0x8
c0006dd4:	5b                   	pop    ebx
c0006dd5:	c3                   	ret    

c0006dd6 <fs_iso9660_shutdown>:
c0006dd6:	53                   	push   ebx
c0006dd7:	31 db                	xor    ebx,ebx
c0006dd9:	83 ec 08             	sub    esp,0x8
c0006ddc:	83 ec 0c             	sub    esp,0xc
c0006ddf:	ff 34 9d 80 90 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6f80]
c0006de6:	e8 88 89 00 00       	call   c000f773 <free>
c0006deb:	58                   	pop    eax
c0006dec:	ff 34 9d 20 90 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6fe0]
c0006df3:	43                   	inc    ebx
c0006df4:	e8 7a 89 00 00       	call   c000f773 <free>
c0006df9:	83 c4 10             	add    esp,0x10
c0006dfc:	83 fb 10             	cmp    ebx,0x10
c0006dff:	75 db                	jne    c0006ddc <fs_iso9660_shutdown+0x6>
c0006e01:	a1 b0 9e 02 c0       	mov    eax,ds:0xc0029eb0
c0006e06:	85 c0                	test   eax,eax
c0006e08:	74 0c                	je     c0006e16 <fs_iso9660_shutdown+0x40>
c0006e0a:	83 ec 0c             	sub    esp,0xc
c0006e0d:	50                   	push   eax
c0006e0e:	e8 60 89 00 00       	call   c000f773 <free>
c0006e13:	83 c4 10             	add    esp,0x10
c0006e16:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c0006e1b:	85 c0                	test   eax,eax
c0006e1d:	74 0c                	je     c0006e2b <fs_iso9660_shutdown+0x55>
c0006e1f:	83 ec 0c             	sub    esp,0xc
c0006e22:	50                   	push   eax
c0006e23:	e8 4b 89 00 00       	call   c000f773 <free>
c0006e28:	83 c4 10             	add    esp,0x10
c0006e2b:	c7 05 20 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029520,0x0
c0006e35:	c7 05 b0 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029eb0,0x0
c0006e3f:	31 c0                	xor    eax,eax
c0006e41:	83 c4 08             	add    esp,0x8
c0006e44:	5b                   	pop    ebx
c0006e45:	c3                   	ret    

c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e46:	55                   	push   ebp
c0006e47:	57                   	push   edi
c0006e48:	56                   	push   esi
c0006e49:	be 30 35 02 c0       	mov    esi,0xc0023530
c0006e4e:	53                   	push   ebx
c0006e4f:	83 ec 20             	sub    esp,0x20
c0006e52:	a0 2f 35 02 c0       	mov    al,ds:0xc002352f
c0006e57:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0006e5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0006e5f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0006e63:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0006e67:	b8 10 00 00 00       	mov    eax,0x10
c0006e6c:	f7 c7 02 00 00 00    	test   edi,0x2
c0006e72:	75 60                	jne    c0006ed4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0006e74:	89 c1                	mov    ecx,eax
c0006e76:	c1 e9 02             	shr    ecx,0x2
c0006e79:	fc                   	cld    
c0006e7a:	31 d2                	xor    edx,edx
c0006e7c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0006e7e:	a8 02                	test   al,0x2
c0006e80:	74 0b                	je     c0006e8d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c0006e82:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006e85:	66 89 17             	mov    WORD PTR [edi],dx
c0006e88:	ba 02 00 00 00       	mov    edx,0x2
c0006e8d:	a8 01                	test   al,0x1
c0006e8f:	74 06                	je     c0006e97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c0006e91:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0006e94:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0006e97:	89 ee                	mov    esi,ebp
c0006e99:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006e9d:	eb 02                	jmp    c0006ea1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0006e9f:	89 c6                	mov    esi,eax
c0006ea1:	31 d2                	xor    edx,edx
c0006ea3:	83 c1 01             	add    ecx,0x1
c0006ea6:	89 f0                	mov    eax,esi
c0006ea8:	f7 f3                	div    ebx
c0006eaa:	39 de                	cmp    esi,ebx
c0006eac:	73 f1                	jae    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c0006eae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0006eb1:	eb 02                	jmp    c0006eb5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0006eb3:	89 c5                	mov    ebp,eax
c0006eb5:	31 d2                	xor    edx,edx
c0006eb7:	83 e9 01             	sub    ecx,0x1
c0006eba:	89 e8                	mov    eax,ebp
c0006ebc:	f7 f3                	div    ebx
c0006ebe:	39 dd                	cmp    ebp,ebx
c0006ec0:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec4:	88 11                	mov    BYTE PTR [ecx],dl
c0006ec6:	73 eb                	jae    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c0006ec8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0006ecc:	83 c4 20             	add    esp,0x20
c0006ecf:	5b                   	pop    ebx
c0006ed0:	5e                   	pop    esi
c0006ed1:	5f                   	pop    edi
c0006ed2:	5d                   	pop    ebp
c0006ed3:	c3                   	ret    
c0006ed4:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006ed7:	83 c7 02             	add    edi,0x2
c0006eda:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c0006ede:	83 c6 02             	add    esi,0x2
c0006ee1:	83 e8 02             	sub    eax,0x2
c0006ee4:	eb 8e                	jmp    c0006e74 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c0006ee6 <Dbg::logc(char)>:
c0006ee6:	53                   	push   ebx
c0006ee7:	83 ec 14             	sub    esp,0x14
c0006eea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006eee:	6a 10                	push   0x10
c0006ef0:	e8 8f 62 00 00       	call   c000d184 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006ef5:	83 c4 10             	add    esp,0x10
c0006ef8:	84 c0                	test   al,al
c0006efa:	75 12                	jne    c0006f0e <Dbg::logc(char)+0x28>
c0006efc:	ba fd 03 00 00       	mov    edx,0x3fd
c0006f01:	ec                   	in     al,dx
c0006f02:	a8 20                	test   al,0x20
c0006f04:	74 fb                	je     c0006f01 <Dbg::logc(char)+0x1b>
c0006f06:	ba f8 03 00 00       	mov    edx,0x3f8
c0006f0b:	88 d8                	mov    al,bl
c0006f0d:	ee                   	out    dx,al
c0006f0e:	83 c4 08             	add    esp,0x8
c0006f11:	5b                   	pop    ebx
c0006f12:	c3                   	ret    

c0006f13 <Dbg::logs(char*)>:
c0006f13:	53                   	push   ebx
c0006f14:	83 ec 08             	sub    esp,0x8
c0006f17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006f1b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1e:	85 c0                	test   eax,eax
c0006f20:	74 16                	je     c0006f38 <Dbg::logs(char*)+0x25>
c0006f22:	83 ec 0c             	sub    esp,0xc
c0006f25:	83 c3 01             	add    ebx,0x1
c0006f28:	50                   	push   eax
c0006f29:	e8 b8 ff ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006f2e:	83 c4 10             	add    esp,0x10
c0006f31:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f34:	85 c0                	test   eax,eax
c0006f36:	75 ea                	jne    c0006f22 <Dbg::logs(char*)+0xf>
c0006f38:	83 c4 08             	add    esp,0x8
c0006f3b:	5b                   	pop    ebx
c0006f3c:	c3                   	ret    

c0006f3d <Dbg::logWriteInt(unsigned int)>:
c0006f3d:	83 ec 1c             	sub    esp,0x1c
c0006f40:	6a 0a                	push   0xa
c0006f42:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f46:	50                   	push   eax
c0006f47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006f4b:	50                   	push   eax
c0006f4c:	e8 f5 fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f51:	50                   	push   eax
c0006f52:	e8 bc ff ff ff       	call   c0006f13 <Dbg::logs(char*)>
c0006f57:	83 c4 2c             	add    esp,0x2c
c0006f5a:	c3                   	ret    

c0006f5b <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f5b:	83 ec 1c             	sub    esp,0x1c
c0006f5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006f62:	50                   	push   eax
c0006f63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f67:	50                   	push   eax
c0006f68:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0006f6c:	52                   	push   edx
c0006f6d:	e8 d4 fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f72:	50                   	push   eax
c0006f73:	e8 9b ff ff ff       	call   c0006f13 <Dbg::logs(char*)>
c0006f78:	83 c4 2c             	add    esp,0x2c
c0006f7b:	c3                   	ret    

c0006f7c <Dbg::kprintf(char const*, ...)>:
c0006f7c:	55                   	push   ebp
c0006f7d:	57                   	push   edi
c0006f7e:	56                   	push   esi
c0006f7f:	53                   	push   ebx
c0006f80:	83 ec 1c             	sub    esp,0x1c
c0006f83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006f87:	85 db                	test   ebx,ebx
c0006f89:	0f 84 4c 01 00 00    	je     c00070db <Dbg::kprintf(char const*, ...)+0x15f>
c0006f8f:	83 ec 0c             	sub    esp,0xc
c0006f92:	6a 10                	push   0x10
c0006f94:	e8 eb 61 00 00       	call   c000d184 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006f99:	83 c4 10             	add    esp,0x10
c0006f9c:	84 c0                	test   al,al
c0006f9e:	74 08                	je     c0006fa8 <Dbg::kprintf(char const*, ...)+0x2c>
c0006fa0:	83 c4 1c             	add    esp,0x1c
c0006fa3:	5b                   	pop    ebx
c0006fa4:	5e                   	pop    esi
c0006fa5:	5f                   	pop    edi
c0006fa6:	5d                   	pop    ebp
c0006fa7:	c3                   	ret    
c0006fa8:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006fac:	31 ff                	xor    edi,edi
c0006fae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006fb2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006fb5:	85 c0                	test   eax,eax
c0006fb7:	74 e7                	je     c0006fa0 <Dbg::kprintf(char const*, ...)+0x24>
c0006fb9:	8d 77 01             	lea    esi,[edi+0x1]
c0006fbc:	83 f8 25             	cmp    eax,0x25
c0006fbf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fc2:	75 4c                	jne    c0007010 <Dbg::kprintf(char const*, ...)+0x94>
c0006fc4:	83 c7 02             	add    edi,0x2
c0006fc7:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fca:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fcd:	83 e8 25             	sub    eax,0x25
c0006fd0:	0f b6 c0             	movzx  eax,al
c0006fd3:	83 f8 53             	cmp    eax,0x53
c0006fd6:	0f 87 e1 00 00 00    	ja     c00070bd <Dbg::kprintf(char const*, ...)+0x141>
c0006fdc:	ff 24 85 78 35 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdca88]
c0006fe3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006fe7:	83 ec 0c             	sub    esp,0xc
c0006fea:	89 c8                	mov    eax,ecx
c0006fec:	83 c1 04             	add    ecx,0x4
c0006fef:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006ff3:	8b 00                	mov    eax,DWORD PTR [eax]
c0006ff5:	50                   	push   eax
c0006ff6:	e8 42 ff ff ff       	call   c0006f3d <Dbg::logWriteInt(unsigned int)>
c0006ffb:	83 c4 10             	add    esp,0x10
c0006ffe:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007001:	85 c0                	test   eax,eax
c0007003:	74 9b                	je     c0006fa0 <Dbg::kprintf(char const*, ...)+0x24>
c0007005:	8d 77 01             	lea    esi,[edi+0x1]
c0007008:	83 f8 25             	cmp    eax,0x25
c000700b:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000700e:	74 b4                	je     c0006fc4 <Dbg::kprintf(char const*, ...)+0x48>
c0007010:	83 ec 0c             	sub    esp,0xc
c0007013:	89 f7                	mov    edi,esi
c0007015:	50                   	push   eax
c0007016:	89 ee                	mov    esi,ebp
c0007018:	e8 c9 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c000701d:	83 c4 10             	add    esp,0x10
c0007020:	eb dc                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c0007022:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007026:	83 ec 0c             	sub    esp,0xc
c0007029:	89 c8                	mov    eax,ecx
c000702b:	83 c1 04             	add    ecx,0x4
c000702e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0007030:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007034:	55                   	push   ebp
c0007035:	e8 d9 fe ff ff       	call   c0006f13 <Dbg::logs(char*)>
c000703a:	83 c4 10             	add    esp,0x10
c000703d:	eb bf                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000703f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	89 d0                	mov    eax,edx
c0007048:	83 c2 04             	add    edx,0x4
c000704b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000704f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007051:	51                   	push   ecx
c0007052:	e8 e6 fe ff ff       	call   c0006f3d <Dbg::logWriteInt(unsigned int)>
c0007057:	83 c4 10             	add    esp,0x10
c000705a:	eb a2                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000705c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007060:	83 ec 0c             	sub    esp,0xc
c0007063:	89 d0                	mov    eax,edx
c0007065:	83 c2 04             	add    edx,0x4
c0007068:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000706b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000706f:	50                   	push   eax
c0007070:	e8 71 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007075:	83 c4 10             	add    esp,0x10
c0007078:	eb 84                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000707a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000707e:	89 c8                	mov    eax,ecx
c0007080:	83 c1 04             	add    ecx,0x4
c0007083:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007087:	83 ec 08             	sub    esp,0x8
c000708a:	6a 10                	push   0x10
c000708c:	8b 10                	mov    edx,DWORD PTR [eax]
c000708e:	52                   	push   edx
c000708f:	e8 c7 fe ff ff       	call   c0006f5b <Dbg::logWriteIntBase(unsigned int, int)>
c0007094:	83 c4 10             	add    esp,0x10
c0007097:	e9 62 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000709c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00070a0:	89 d0                	mov    eax,edx
c00070a2:	83 c2 08             	add    edx,0x8
c00070a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a9:	eb dc                	jmp    c0007087 <Dbg::kprintf(char const*, ...)+0x10b>
c00070ab:	83 ec 0c             	sub    esp,0xc
c00070ae:	6a 25                	push   0x25
c00070b0:	e8 31 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070b5:	83 c4 10             	add    esp,0x10
c00070b8:	e9 41 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c00070bd:	83 ec 0c             	sub    esp,0xc
c00070c0:	6a 25                	push   0x25
c00070c2:	e8 1f fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070c7:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00070cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00070ce:	e8 13 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070d3:	83 c4 10             	add    esp,0x10
c00070d6:	e9 23 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c00070db:	83 ec 0c             	sub    esp,0xc
c00070de:	68 40 35 02 c0       	push   0xc0023540
c00070e3:	e8 94 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00070e8:	83 c4 10             	add    esp,0x10
c00070eb:	83 c4 1c             	add    esp,0x1c
c00070ee:	5b                   	pop    ebx
c00070ef:	5e                   	pop    esi
c00070f0:	5f                   	pop    edi
c00070f1:	5d                   	pop    ebp
c00070f2:	c3                   	ret    
c00070f3:	90                   	nop

c00070f4 <KiUbsanPrintDetails(char const*, void*)>:
c00070f4:	83 ec 1c             	sub    esp,0x1c
c00070f7:	83 ec 08             	sub    esp,0x8
c00070fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070fe:	68 c8 36 02 c0       	push   0xc00236c8
c0007103:	e8 74 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007108:	83 c4 10             	add    esp,0x10
c000710b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000710f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007113:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007117:	8b 00                	mov    eax,DWORD PTR [eax]
c0007119:	83 ec 08             	sub    esp,0x8
c000711c:	50                   	push   eax
c000711d:	68 dc 36 02 c0       	push   0xc00236dc
c0007122:	e8 55 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007127:	83 c4 10             	add    esp,0x10
c000712a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000712e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007131:	83 ec 08             	sub    esp,0x8
c0007134:	50                   	push   eax
c0007135:	68 e6 36 02 c0       	push   0xc00236e6
c000713a:	e8 3d fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000713f:	83 c4 10             	add    esp,0x10
c0007142:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007146:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0007149:	83 ec 08             	sub    esp,0x8
c000714c:	50                   	push   eax
c000714d:	68 f0 36 02 c0       	push   0xc00236f0
c0007152:	e8 25 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007157:	83 c4 10             	add    esp,0x10
c000715a:	90                   	nop
c000715b:	83 c4 1c             	add    esp,0x1c
c000715e:	c3                   	ret    
c000715f:	90                   	nop

c0007160 <__ubsan_handle_type_mismatch_v1>:
c0007160:	83 ec 0c             	sub    esp,0xc
c0007163:	83 ec 08             	sub    esp,0x8
c0007166:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000716a:	68 34 38 02 c0       	push   0xc0023834
c000716f:	e8 80 ff ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007174:	83 c4 10             	add    esp,0x10
c0007177:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000717c:	75 16                	jne    c0007194 <__ubsan_handle_type_mismatch_v1+0x34>
c000717e:	83 ec 0c             	sub    esp,0xc
c0007181:	68 fa 36 02 c0       	push   0xc00236fa
c0007186:	e8 f1 fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000718b:	83 c4 10             	add    esp,0x10
c000718e:	e9 91 00 00 00       	jmp    c0007224 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007193:	90                   	nop
c0007194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007198:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000719b:	85 c0                	test   eax,eax
c000719d:	74 29                	je     c00071c8 <__ubsan_handle_type_mismatch_v1+0x68>
c000719f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00071a6:	83 e8 01             	sub    eax,0x1
c00071a9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00071ad:	75 19                	jne    c00071c8 <__ubsan_handle_type_mismatch_v1+0x68>
c00071af:	83 ec 08             	sub    esp,0x8
c00071b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00071b6:	68 54 38 02 c0       	push   0xc0023854
c00071bb:	e8 bc fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071c0:	83 c4 10             	add    esp,0x10
c00071c3:	eb 5f                	jmp    c0007224 <__ubsan_handle_type_mismatch_v1+0xc4>
c00071c5:	8d 76 00             	lea    esi,[esi+0x0]
c00071c8:	83 ec 0c             	sub    esp,0xc
c00071cb:	68 0f 37 02 c0       	push   0xc002370f
c00071d0:	e8 a7 fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071d5:	83 c4 10             	add    esp,0x10
c00071d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071dc:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071df:	0f b6 c0             	movzx  eax,al
c00071e2:	83 ec 08             	sub    esp,0x8
c00071e5:	50                   	push   eax
c00071e6:	68 29 37 02 c0       	push   0xc0023729
c00071eb:	e8 8c fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071f0:	83 c4 10             	add    esp,0x10
c00071f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071fa:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007205:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007208:	0f b6 c0             	movzx  eax,al
c000720b:	8b 04 85 20 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd96e0]
c0007212:	51                   	push   ecx
c0007213:	52                   	push   edx
c0007214:	50                   	push   eax
c0007215:	68 7c 38 02 c0       	push   0xc002387c
c000721a:	e8 5d fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	66 90                	xchg   ax,ax
c0007224:	83 ec 0c             	sub    esp,0xc
c0007227:	68 34 38 02 c0       	push   0xc0023834
c000722c:	e8 8f 89 00 00       	call   c000fbc0 <KePanic(char const*)>
c0007231:	83 c4 10             	add    esp,0x10
c0007234:	90                   	nop
c0007235:	83 c4 0c             	add    esp,0xc
c0007238:	c3                   	ret    
c0007239:	8d 76 00             	lea    esi,[esi+0x0]

c000723c <__ubsan_handle_pointer_overflow>:
c000723c:	83 ec 0c             	sub    esp,0xc
c000723f:	83 ec 08             	sub    esp,0x8
c0007242:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007246:	68 c4 38 02 c0       	push   0xc00238c4
c000724b:	e8 a4 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007250:	83 c4 10             	add    esp,0x10
c0007253:	83 ec 0c             	sub    esp,0xc
c0007256:	68 c4 38 02 c0       	push   0xc00238c4
c000725b:	e8 60 89 00 00       	call   c000fbc0 <KePanic(char const*)>
c0007260:	83 c4 10             	add    esp,0x10
c0007263:	90                   	nop
c0007264:	83 c4 0c             	add    esp,0xc
c0007267:	c3                   	ret    

c0007268 <__ubsan_handle_out_of_bounds>:
c0007268:	83 ec 0c             	sub    esp,0xc
c000726b:	83 ec 08             	sub    esp,0x8
c000726e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007272:	68 34 37 02 c0       	push   0xc0023734
c0007277:	e8 78 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c000727c:	83 c4 10             	add    esp,0x10
c000727f:	83 ec 0c             	sub    esp,0xc
c0007282:	68 34 37 02 c0       	push   0xc0023734
c0007287:	e8 34 89 00 00       	call   c000fbc0 <KePanic(char const*)>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	90                   	nop
c0007290:	83 c4 0c             	add    esp,0xc
c0007293:	c3                   	ret    

c0007294 <__ubsan_handle_add_overflow>:
c0007294:	83 ec 0c             	sub    esp,0xc
c0007297:	83 ec 08             	sub    esp,0x8
c000729a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000729e:	68 51 37 02 c0       	push   0xc0023751
c00072a3:	e8 4c fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	83 ec 0c             	sub    esp,0xc
c00072ae:	68 51 37 02 c0       	push   0xc0023751
c00072b3:	e8 08 89 00 00       	call   c000fbc0 <KePanic(char const*)>
c00072b8:	83 c4 10             	add    esp,0x10
c00072bb:	90                   	nop
c00072bc:	83 c4 0c             	add    esp,0xc
c00072bf:	c3                   	ret    

c00072c0 <__ubsan_handle_load_invalid_value>:
c00072c0:	83 ec 0c             	sub    esp,0xc
c00072c3:	83 ec 08             	sub    esp,0x8
c00072c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072ca:	68 e4 38 02 c0       	push   0xc00238e4
c00072cf:	e8 20 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00072d4:	83 c4 10             	add    esp,0x10
c00072d7:	83 ec 0c             	sub    esp,0xc
c00072da:	68 e4 38 02 c0       	push   0xc00238e4
c00072df:	e8 dc 88 00 00       	call   c000fbc0 <KePanic(char const*)>
c00072e4:	83 c4 10             	add    esp,0x10
c00072e7:	90                   	nop
c00072e8:	83 c4 0c             	add    esp,0xc
c00072eb:	c3                   	ret    

c00072ec <__ubsan_handle_divrem_overflow>:
c00072ec:	83 ec 0c             	sub    esp,0xc
c00072ef:	83 ec 08             	sub    esp,0x8
c00072f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072f6:	68 08 39 02 c0       	push   0xc0023908
c00072fb:	e8 f4 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007300:	83 c4 10             	add    esp,0x10
c0007303:	83 ec 0c             	sub    esp,0xc
c0007306:	68 08 39 02 c0       	push   0xc0023908
c000730b:	e8 b0 88 00 00       	call   c000fbc0 <KePanic(char const*)>
c0007310:	83 c4 10             	add    esp,0x10
c0007313:	90                   	nop
c0007314:	83 c4 0c             	add    esp,0xc
c0007317:	c3                   	ret    

c0007318 <__ubsan_handle_mul_overflow>:
c0007318:	83 ec 0c             	sub    esp,0xc
c000731b:	83 ec 08             	sub    esp,0x8
c000731e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007322:	68 6d 37 02 c0       	push   0xc002376d
c0007327:	e8 c8 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c000732c:	83 c4 10             	add    esp,0x10
c000732f:	83 ec 0c             	sub    esp,0xc
c0007332:	68 6d 37 02 c0       	push   0xc002376d
c0007337:	e8 84 88 00 00       	call   c000fbc0 <KePanic(char const*)>
c000733c:	83 c4 10             	add    esp,0x10
c000733f:	90                   	nop
c0007340:	83 c4 0c             	add    esp,0xc
c0007343:	c3                   	ret    

c0007344 <__ubsan_handle_sub_overflow>:
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	83 ec 08             	sub    esp,0x8
c000734a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734e:	68 89 37 02 c0       	push   0xc0023789
c0007353:	e8 9c fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007358:	83 c4 10             	add    esp,0x10
c000735b:	83 ec 0c             	sub    esp,0xc
c000735e:	68 89 37 02 c0       	push   0xc0023789
c0007363:	e8 58 88 00 00       	call   c000fbc0 <KePanic(char const*)>
c0007368:	83 c4 10             	add    esp,0x10
c000736b:	90                   	nop
c000736c:	83 c4 0c             	add    esp,0xc
c000736f:	c3                   	ret    

c0007370 <__ubsan_handle_shift_out_of_bounds>:
c0007370:	83 ec 0c             	sub    esp,0xc
c0007373:	83 ec 08             	sub    esp,0x8
c0007376:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000737a:	68 28 39 02 c0       	push   0xc0023928
c000737f:	e8 70 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007384:	83 c4 10             	add    esp,0x10
c0007387:	83 ec 0c             	sub    esp,0xc
c000738a:	68 28 39 02 c0       	push   0xc0023928
c000738f:	e8 2c 88 00 00       	call   c000fbc0 <KePanic(char const*)>
c0007394:	83 c4 10             	add    esp,0x10
c0007397:	90                   	nop
c0007398:	83 c4 0c             	add    esp,0xc
c000739b:	c3                   	ret    

c000739c <__ubsan_handle_negate_overflow>:
c000739c:	83 ec 0c             	sub    esp,0xc
c000739f:	83 ec 08             	sub    esp,0x8
c00073a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073a6:	68 4c 39 02 c0       	push   0xc002394c
c00073ab:	e8 44 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00073b0:	83 c4 10             	add    esp,0x10
c00073b3:	83 ec 0c             	sub    esp,0xc
c00073b6:	68 4c 39 02 c0       	push   0xc002394c
c00073bb:	e8 00 88 00 00       	call   c000fbc0 <KePanic(char const*)>
c00073c0:	83 c4 10             	add    esp,0x10
c00073c3:	90                   	nop
c00073c4:	83 c4 0c             	add    esp,0xc
c00073c7:	c3                   	ret    

c00073c8 <KiIsHashInTable(unsigned short)>:
c00073c8:	0f b7 d0             	movzx  edx,ax
c00073cb:	83 e0 07             	and    eax,0x7
c00073ce:	c1 fa 03             	sar    edx,0x3
c00073d1:	88 c1                	mov    cl,al
c00073d3:	0f b6 92 00 a3 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd5d00]
c00073da:	d3 fa                	sar    edx,cl
c00073dc:	89 d0                	mov    eax,edx
c00073de:	83 e0 01             	and    eax,0x1
c00073e1:	c3                   	ret    

c00073e2 <KiSetHashInTable(unsigned short, bool)>:
c00073e2:	56                   	push   esi
c00073e3:	53                   	push   ebx
c00073e4:	0f b7 d8             	movzx  ebx,ax
c00073e7:	83 e0 07             	and    eax,0x7
c00073ea:	c1 fb 03             	sar    ebx,0x3
c00073ed:	89 c1                	mov    ecx,eax
c00073ef:	0f b6 b3 00 a3 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd5d00]
c00073f6:	b8 01 00 00 00       	mov    eax,0x1
c00073fb:	d3 e0                	shl    eax,cl
c00073fd:	84 d2                	test   dl,dl
c00073ff:	74 04                	je     c0007405 <KiSetHashInTable(unsigned short, bool)+0x23>
c0007401:	09 f0                	or     eax,esi
c0007403:	eb 04                	jmp    c0007409 <KiSetHashInTable(unsigned short, bool)+0x27>
c0007405:	f7 d0                	not    eax
c0007407:	21 f0                	and    eax,esi
c0007409:	88 83 00 a3 02 c0    	mov    BYTE PTR [ebx-0x3ffd5d00],al
c000740f:	5b                   	pop    ebx
c0007410:	5e                   	pop    esi
c0007411:	c3                   	ret    

c0007412 <KiFlushSymlinkChanges()>:
c0007412:	57                   	push   edi
c0007413:	56                   	push   esi
c0007414:	53                   	push   ebx
c0007415:	83 ec 1c             	sub    esp,0x1c
c0007418:	68 14 01 00 00       	push   0x114
c000741d:	e8 41 83 00 00       	call   c000f763 <malloc>
c0007422:	83 c4 0c             	add    esp,0xc
c0007425:	89 c3                	mov    ebx,eax
c0007427:	ff 35 98 da 02 c0    	push   DWORD PTR ds:0xc002da98
c000742d:	68 6b 39 02 c0       	push   0xc002396b
c0007432:	50                   	push   eax
c0007433:	e8 52 0d 00 00       	call   c000818a <File::File(char const*, Process*)>
c0007438:	83 c4 10             	add    esp,0x10
c000743b:	85 db                	test   ebx,ebx
c000743d:	75 10                	jne    c000744f <KiFlushSymlinkChanges()+0x3d>
c000743f:	83 ec 0c             	sub    esp,0xc
c0007442:	68 89 39 02 c0       	push   0xc0023989
c0007447:	e8 74 87 00 00       	call   c000fbc0 <KePanic(char const*)>
c000744c:	83 c4 10             	add    esp,0x10
c000744f:	50                   	push   eax
c0007450:	50                   	push   eax
c0007451:	6a 06                	push   0x6
c0007453:	53                   	push   ebx
c0007454:	e8 4f 0d 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c0007459:	83 c4 10             	add    esp,0x10
c000745c:	85 c0                	test   eax,eax
c000745e:	74 10                	je     c0007470 <KiFlushSymlinkChanges()+0x5e>
c0007460:	83 ec 0c             	sub    esp,0xc
c0007463:	68 a3 39 02 c0       	push   0xc00239a3
c0007468:	e8 53 87 00 00       	call   c000fbc0 <KePanic(char const*)>
c000746d:	83 c4 10             	add    esp,0x10
c0007470:	31 f6                	xor    esi,esi
c0007472:	39 35 c0 9e 02 c0    	cmp    DWORD PTR ds:0xc0029ec0,esi
c0007478:	7e 70                	jle    c00074ea <KiFlushSymlinkChanges()+0xd8>
c000747a:	83 ec 0c             	sub    esp,0xc
c000747d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000747f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007483:	89 f0                	mov    eax,esi
c0007485:	57                   	push   edi
c0007486:	c1 e0 08             	shl    eax,0x8
c0007489:	05 00 9f 02 c0       	add    eax,0xc0029f00
c000748e:	50                   	push   eax
c000748f:	6a 00                	push   0x0
c0007491:	68 00 01 00 00       	push   0x100
c0007496:	53                   	push   ebx
c0007497:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000749a:	83 c4 20             	add    esp,0x20
c000749d:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c00074a5:	74 10                	je     c00074b7 <KiFlushSymlinkChanges()+0xa5>
c00074a7:	83 ec 0c             	sub    esp,0xc
c00074aa:	68 bd 39 02 c0       	push   0xc00239bd
c00074af:	e8 0c 87 00 00       	call   c000fbc0 <KePanic(char const*)>
c00074b4:	83 c4 10             	add    esp,0x10
c00074b7:	83 ec 0c             	sub    esp,0xc
c00074ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074bc:	8d 14 f5 e0 9e 02 c0 	lea    edx,[esi*8-0x3ffd6120]
c00074c3:	57                   	push   edi
c00074c4:	52                   	push   edx
c00074c5:	6a 00                	push   0x0
c00074c7:	6a 08                	push   0x8
c00074c9:	53                   	push   ebx
c00074ca:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00074cd:	83 c4 20             	add    esp,0x20
c00074d0:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00074d5:	74 10                	je     c00074e7 <KiFlushSymlinkChanges()+0xd5>
c00074d7:	83 ec 0c             	sub    esp,0xc
c00074da:	68 d7 39 02 c0       	push   0xc00239d7
c00074df:	e8 dc 86 00 00       	call   c000fbc0 <KePanic(char const*)>
c00074e4:	83 c4 10             	add    esp,0x10
c00074e7:	46                   	inc    esi
c00074e8:	eb 88                	jmp    c0007472 <KiFlushSymlinkChanges()+0x60>
c00074ea:	83 ec 0c             	sub    esp,0xc
c00074ed:	53                   	push   ebx
c00074ee:	e8 13 0d 00 00       	call   c0008206 <File::close()>
c00074f3:	83 c4 10             	add    esp,0x10
c00074f6:	85 db                	test   ebx,ebx
c00074f8:	74 0c                	je     c0007506 <KiFlushSymlinkChanges()+0xf4>
c00074fa:	83 ec 0c             	sub    esp,0xc
c00074fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074ff:	53                   	push   ebx
c0007500:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007503:	83 c4 10             	add    esp,0x10
c0007506:	c7 05 c0 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ec0,0x0
c0007510:	83 c4 10             	add    esp,0x10
c0007513:	5b                   	pop    ebx
c0007514:	5e                   	pop    esi
c0007515:	5f                   	pop    edi
c0007516:	c3                   	ret    

c0007517 <KiDeinitialiseSymlinks(void*)>:
c0007517:	e9 f6 fe ff ff       	jmp    c0007412 <KiFlushSymlinkChanges()>

c000751c <KiGetSymlinkHash(char const*)>:
c000751c:	53                   	push   ebx
c000751d:	89 c3                	mov    ebx,eax
c000751f:	83 ec 14             	sub    esp,0x14
c0007522:	50                   	push   eax
c0007523:	e8 48 90 ff ff       	call   c0000570 <strlen>
c0007528:	5a                   	pop    edx
c0007529:	59                   	pop    ecx
c000752a:	50                   	push   eax
c000752b:	53                   	push   ebx
c000752c:	e8 04 6b 00 00       	call   c000e035 <KeCalculateCRC32(unsigned char*, int)>
c0007531:	83 c4 18             	add    esp,0x18
c0007534:	89 c2                	mov    edx,eax
c0007536:	5b                   	pop    ebx
c0007537:	c1 ea 10             	shr    edx,0x10
c000753a:	31 d0                	xor    eax,edx
c000753c:	c3                   	ret    

c000753d <KiCreateSymlinkID()>:
c000753d:	55                   	push   ebp
c000753e:	57                   	push   edi
c000753f:	56                   	push   esi
c0007540:	53                   	push   ebx
c0007541:	31 db                	xor    ebx,ebx
c0007543:	83 ec 1c             	sub    esp,0x1c
c0007546:	e8 f3 90 00 00       	call   c001063e <KeRand()>
c000754b:	43                   	inc    ebx
c000754c:	8b 2d 00 c3 02 c0    	mov    ebp,DWORD PTR ds:0xc002c300
c0007552:	31 d2                	xor    edx,edx
c0007554:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0007557:	0f a4 c2 1f          	shld   edx,eax,0x1f
c000755b:	89 0d 00 c3 02 c0    	mov    DWORD PTR ds:0xc002c300,ecx
c0007561:	c1 e0 1f             	shl    eax,0x1f
c0007564:	89 d7                	mov    edi,edx
c0007566:	89 c6                	mov    esi,eax
c0007568:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000756c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007574:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000757a:	75 10                	jne    c000758c <KiCreateSymlinkID()+0x4f>
c000757c:	83 ec 0c             	sub    esp,0xc
c000757f:	68 f1 39 02 c0       	push   0xc00239f1
c0007584:	e8 37 86 00 00       	call   c000fbc0 <KePanic(char const*)>
c0007589:	83 c4 10             	add    esp,0x10
c000758c:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0007590:	75 04                	jne    c0007596 <KiCreateSymlinkID()+0x59>
c0007592:	39 f5                	cmp    ebp,esi
c0007594:	74 b0                	je     c0007546 <KiCreateSymlinkID()+0x9>
c0007596:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000759e:	31 f0                	xor    eax,esi
c00075a0:	83 c4 1c             	add    esp,0x1c
c00075a3:	31 fa                	xor    edx,edi
c00075a5:	5b                   	pop    ebx
c00075a6:	5e                   	pop    esi
c00075a7:	5f                   	pop    edi
c00075a8:	5d                   	pop    ebp
c00075a9:	c3                   	ret    

c00075aa <KeRegisterSymlink(char const*, unsigned long long)>:
c00075aa:	53                   	push   ebx
c00075ab:	83 ec 0c             	sub    esp,0xc
c00075ae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00075b2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00075b6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00075ba:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c00075bf:	68 00 01 00 00       	push   0x100
c00075c4:	89 0c c5 e4 9e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd611c],ecx
c00075cb:	6a 00                	push   0x0
c00075cd:	89 14 c5 e0 9e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6120],edx
c00075d4:	c1 e0 08             	shl    eax,0x8
c00075d7:	05 00 9f 02 c0       	add    eax,0xc0029f00
c00075dc:	50                   	push   eax
c00075dd:	e8 0e 8f ff ff       	call   c00004f0 <memset>
c00075e2:	58                   	pop    eax
c00075e3:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c00075e8:	5a                   	pop    edx
c00075e9:	c1 e0 08             	shl    eax,0x8
c00075ec:	53                   	push   ebx
c00075ed:	05 00 9f 02 c0       	add    eax,0xc0029f00
c00075f2:	50                   	push   eax
c00075f3:	e8 48 90 ff ff       	call   c0000640 <strcpy>
c00075f8:	89 d8                	mov    eax,ebx
c00075fa:	e8 1d ff ff ff       	call   c000751c <KiGetSymlinkHash(char const*)>
c00075ff:	ba 01 00 00 00       	mov    edx,0x1
c0007604:	0f b7 c0             	movzx  eax,ax
c0007607:	e8 d6 fd ff ff       	call   c00073e2 <KiSetHashInTable(unsigned short, bool)>
c000760c:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c0007611:	83 c4 10             	add    esp,0x10
c0007614:	40                   	inc    eax
c0007615:	a3 c0 9e 02 c0       	mov    ds:0xc0029ec0,eax
c000761a:	83 f8 03             	cmp    eax,0x3
c000761d:	7e 09                	jle    c0007628 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c000761f:	83 c4 08             	add    esp,0x8
c0007622:	5b                   	pop    ebx
c0007623:	e9 ea fd ff ff       	jmp    c0007412 <KiFlushSymlinkChanges()>
c0007628:	83 c4 08             	add    esp,0x8
c000762b:	5b                   	pop    ebx
c000762c:	c3                   	ret    

c000762d <KeInitialiseSymlinks()>:
c000762d:	57                   	push   edi
c000762e:	56                   	push   esi
c000762f:	53                   	push   ebx
c0007630:	81 ec 14 01 00 00    	sub    esp,0x114
c0007636:	c7 05 00 c3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c300,0x0
c0007640:	68 00 20 00 00       	push   0x2000
c0007645:	c7 05 c0 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ec0,0x0
c000764f:	6a 00                	push   0x0
c0007651:	68 00 a3 02 c0       	push   0xc002a300
c0007656:	e8 95 8e ff ff       	call   c00004f0 <memset>
c000765b:	59                   	pop    ecx
c000765c:	5b                   	pop    ebx
c000765d:	6a 00                	push   0x0
c000765f:	68 17 75 00 c0       	push   0xc0007517
c0007664:	e8 ab 5a 00 00       	call   c000d114 <KeRegisterAtexit(void (*)(void*), void*)>
c0007669:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0007670:	e8 ee 80 00 00       	call   c000f763 <malloc>
c0007675:	83 c4 0c             	add    esp,0xc
c0007678:	89 c3                	mov    ebx,eax
c000767a:	ff 35 98 da 02 c0    	push   DWORD PTR ds:0xc002da98
c0007680:	68 6b 39 02 c0       	push   0xc002396b
c0007685:	50                   	push   eax
c0007686:	e8 ff 0a 00 00       	call   c000818a <File::File(char const*, Process*)>
c000768b:	83 c4 10             	add    esp,0x10
c000768e:	85 db                	test   ebx,ebx
c0007690:	75 10                	jne    c00076a2 <KeInitialiseSymlinks()+0x75>
c0007692:	83 ec 0c             	sub    esp,0xc
c0007695:	68 fa 39 02 c0       	push   0xc00239fa
c000769a:	e8 21 85 00 00       	call   c000fbc0 <KePanic(char const*)>
c000769f:	83 c4 10             	add    esp,0x10
c00076a2:	83 ec 0c             	sub    esp,0xc
c00076a5:	53                   	push   ebx
c00076a6:	e8 c1 0d 00 00       	call   c000846c <File::exists()>
c00076ab:	83 c4 10             	add    esp,0x10
c00076ae:	84 c0                	test   al,al
c00076b0:	75 3a                	jne    c00076ec <KeInitialiseSymlinks()+0xbf>
c00076b2:	52                   	push   edx
c00076b3:	52                   	push   edx
c00076b4:	6a 12                	push   0x12
c00076b6:	53                   	push   ebx
c00076b7:	e8 ec 0a 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c00076bc:	83 c4 10             	add    esp,0x10
c00076bf:	85 c0                	test   eax,eax
c00076c1:	74 10                	je     c00076d3 <KeInitialiseSymlinks()+0xa6>
c00076c3:	83 ec 0c             	sub    esp,0xc
c00076c6:	68 17 3a 02 c0       	push   0xc0023a17
c00076cb:	e8 f0 84 00 00       	call   c000fbc0 <KePanic(char const*)>
c00076d0:	83 c4 10             	add    esp,0x10
c00076d3:	83 ec 0c             	sub    esp,0xc
c00076d6:	53                   	push   ebx
c00076d7:	e8 2a 0b 00 00       	call   c0008206 <File::close()>
c00076dc:	83 c4 10             	add    esp,0x10
c00076df:	85 db                	test   ebx,ebx
c00076e1:	0f 84 9e 00 00 00    	je     c0007785 <KeInitialiseSymlinks()+0x158>
c00076e7:	e9 8d 00 00 00       	jmp    c0007779 <KeInitialiseSymlinks()+0x14c>
c00076ec:	50                   	push   eax
c00076ed:	50                   	push   eax
c00076ee:	6a 01                	push   0x1
c00076f0:	53                   	push   ebx
c00076f1:	e8 b2 0a 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c00076f6:	83 c4 10             	add    esp,0x10
c00076f9:	85 c0                	test   eax,eax
c00076fb:	74 10                	je     c000770d <KeInitialiseSymlinks()+0xe0>
c00076fd:	83 ec 0c             	sub    esp,0xc
c0007700:	68 34 3a 02 c0       	push   0xc0023a34
c0007705:	e8 b6 84 00 00       	call   c000fbc0 <KePanic(char const*)>
c000770a:	83 c4 10             	add    esp,0x10
c000770d:	83 ec 0c             	sub    esp,0xc
c0007710:	ff 05 00 c3 02 c0    	inc    DWORD PTR ds:0xc002c300
c0007716:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000771a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000771c:	57                   	push   edi
c000771d:	8d 74 24 20          	lea    esi,[esp+0x20]
c0007721:	56                   	push   esi
c0007722:	6a 00                	push   0x0
c0007724:	68 00 01 00 00       	push   0x100
c0007729:	53                   	push   ebx
c000772a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000772d:	83 c4 20             	add    esp,0x20
c0007730:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007738:	75 33                	jne    c000776d <KeInitialiseSymlinks()+0x140>
c000773a:	83 ec 0c             	sub    esp,0xc
c000773d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000773f:	57                   	push   edi
c0007740:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007744:	52                   	push   edx
c0007745:	6a 00                	push   0x0
c0007747:	6a 08                	push   0x8
c0007749:	53                   	push   ebx
c000774a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000774d:	83 c4 20             	add    esp,0x20
c0007750:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007755:	75 16                	jne    c000776d <KeInitialiseSymlinks()+0x140>
c0007757:	89 f0                	mov    eax,esi
c0007759:	e8 be fd ff ff       	call   c000751c <KiGetSymlinkHash(char const*)>
c000775e:	ba 01 00 00 00       	mov    edx,0x1
c0007763:	0f b7 c0             	movzx  eax,ax
c0007766:	e8 77 fc ff ff       	call   c00073e2 <KiSetHashInTable(unsigned short, bool)>
c000776b:	eb a0                	jmp    c000770d <KeInitialiseSymlinks()+0xe0>
c000776d:	83 ec 0c             	sub    esp,0xc
c0007770:	53                   	push   ebx
c0007771:	e8 90 0a 00 00       	call   c0008206 <File::close()>
c0007776:	83 c4 10             	add    esp,0x10
c0007779:	83 ec 0c             	sub    esp,0xc
c000777c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000777e:	53                   	push   ebx
c000777f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007782:	83 c4 10             	add    esp,0x10
c0007785:	81 c4 10 01 00 00    	add    esp,0x110
c000778b:	5b                   	pop    ebx
c000778c:	5e                   	pop    esi
c000778d:	5f                   	pop    edi
c000778e:	c3                   	ret    

c000778f <KiIsSymlinkRegistered(char const*)>:
c000778f:	55                   	push   ebp
c0007790:	57                   	push   edi
c0007791:	56                   	push   esi
c0007792:	53                   	push   ebx
c0007793:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007799:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c00077a0:	89 f0                	mov    eax,esi
c00077a2:	e8 75 fd ff ff       	call   c000751c <KiGetSymlinkHash(char const*)>
c00077a7:	0f b7 c0             	movzx  eax,ax
c00077aa:	e8 19 fc ff ff       	call   c00073c8 <KiIsHashInTable(unsigned short)>
c00077af:	31 d2                	xor    edx,edx
c00077b1:	88 c1                	mov    cl,al
c00077b3:	31 c0                	xor    eax,eax
c00077b5:	84 c9                	test   cl,cl
c00077b7:	0f 84 31 01 00 00    	je     c00078ee <KiIsSymlinkRegistered(char const*)+0x15f>
c00077bd:	31 db                	xor    ebx,ebx
c00077bf:	39 1d c0 9e 02 c0    	cmp    DWORD PTR ds:0xc0029ec0,ebx
c00077c5:	7e 30                	jle    c00077f7 <KiIsSymlinkRegistered(char const*)+0x68>
c00077c7:	89 d8                	mov    eax,ebx
c00077c9:	51                   	push   ecx
c00077ca:	c1 e0 08             	shl    eax,0x8
c00077cd:	51                   	push   ecx
c00077ce:	05 00 9f 02 c0       	add    eax,0xc0029f00
c00077d3:	50                   	push   eax
c00077d4:	56                   	push   esi
c00077d5:	e8 76 8f ff ff       	call   c0000750 <strcmp>
c00077da:	83 c4 10             	add    esp,0x10
c00077dd:	85 c0                	test   eax,eax
c00077df:	75 13                	jne    c00077f4 <KiIsSymlinkRegistered(char const*)+0x65>
c00077e1:	8b 04 dd e0 9e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd6120]
c00077e8:	8b 14 dd e4 9e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd611c]
c00077ef:	e9 fa 00 00 00       	jmp    c00078ee <KiIsSymlinkRegistered(char const*)+0x15f>
c00077f4:	43                   	inc    ebx
c00077f5:	eb c8                	jmp    c00077bf <KiIsSymlinkRegistered(char const*)+0x30>
c00077f7:	83 ec 0c             	sub    esp,0xc
c00077fa:	68 14 01 00 00       	push   0x114
c00077ff:	e8 5f 7f 00 00       	call   c000f763 <malloc>
c0007804:	83 c4 0c             	add    esp,0xc
c0007807:	89 c3                	mov    ebx,eax
c0007809:	ff 35 98 da 02 c0    	push   DWORD PTR ds:0xc002da98
c000780f:	68 6b 39 02 c0       	push   0xc002396b
c0007814:	50                   	push   eax
c0007815:	e8 70 09 00 00       	call   c000818a <File::File(char const*, Process*)>
c000781a:	83 c4 10             	add    esp,0x10
c000781d:	85 db                	test   ebx,ebx
c000781f:	75 12                	jne    c0007833 <KiIsSymlinkRegistered(char const*)+0xa4>
c0007821:	83 ec 0c             	sub    esp,0xc
c0007824:	68 4f 3a 02 c0       	push   0xc0023a4f
c0007829:	e8 92 83 00 00       	call   c000fbc0 <KePanic(char const*)>
c000782e:	83 c4 10             	add    esp,0x10
c0007831:	eb 10                	jmp    c0007843 <KiIsSymlinkRegistered(char const*)+0xb4>
c0007833:	83 ec 0c             	sub    esp,0xc
c0007836:	53                   	push   ebx
c0007837:	e8 30 0c 00 00       	call   c000846c <File::exists()>
c000783c:	83 c4 10             	add    esp,0x10
c000783f:	84 c0                	test   al,al
c0007841:	74 de                	je     c0007821 <KiIsSymlinkRegistered(char const*)+0x92>
c0007843:	52                   	push   edx
c0007844:	52                   	push   edx
c0007845:	6a 01                	push   0x1
c0007847:	53                   	push   ebx
c0007848:	e8 5b 09 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c000784d:	83 c4 10             	add    esp,0x10
c0007850:	85 c0                	test   eax,eax
c0007852:	74 10                	je     c0007864 <KiIsSymlinkRegistered(char const*)+0xd5>
c0007854:	83 ec 0c             	sub    esp,0xc
c0007857:	68 6a 3a 02 c0       	push   0xc0023a6a
c000785c:	e8 5f 83 00 00       	call   c000fbc0 <KePanic(char const*)>
c0007861:	83 c4 10             	add    esp,0x10
c0007864:	83 ec 0c             	sub    esp,0xc
c0007867:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007869:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000786d:	55                   	push   ebp
c000786e:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0007872:	57                   	push   edi
c0007873:	6a 00                	push   0x0
c0007875:	68 00 01 00 00       	push   0x100
c000787a:	53                   	push   ebx
c000787b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000787e:	83 c4 20             	add    esp,0x20
c0007881:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007889:	75 4b                	jne    c00078d6 <KiIsSymlinkRegistered(char const*)+0x147>
c000788b:	83 ec 0c             	sub    esp,0xc
c000788e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007890:	55                   	push   ebp
c0007891:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007895:	52                   	push   edx
c0007896:	6a 00                	push   0x0
c0007898:	6a 08                	push   0x8
c000789a:	53                   	push   ebx
c000789b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000789e:	83 c4 20             	add    esp,0x20
c00078a1:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00078a6:	75 2e                	jne    c00078d6 <KiIsSymlinkRegistered(char const*)+0x147>
c00078a8:	50                   	push   eax
c00078a9:	50                   	push   eax
c00078aa:	57                   	push   edi
c00078ab:	56                   	push   esi
c00078ac:	e8 9f 8e ff ff       	call   c0000750 <strcmp>
c00078b1:	83 c4 10             	add    esp,0x10
c00078b4:	85 c0                	test   eax,eax
c00078b6:	75 ac                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0xd5>
c00078b8:	83 ec 0c             	sub    esp,0xc
c00078bb:	53                   	push   ebx
c00078bc:	e8 45 09 00 00       	call   c0008206 <File::close()>
c00078c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078c6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078cd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078d1:	83 c4 10             	add    esp,0x10
c00078d4:	eb 18                	jmp    c00078ee <KiIsSymlinkRegistered(char const*)+0x15f>
c00078d6:	83 ec 0c             	sub    esp,0xc
c00078d9:	53                   	push   ebx
c00078da:	e8 27 09 00 00       	call   c0008206 <File::close()>
c00078df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078e4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078e7:	83 c4 10             	add    esp,0x10
c00078ea:	31 c0                	xor    eax,eax
c00078ec:	31 d2                	xor    edx,edx
c00078ee:	81 c4 1c 01 00 00    	add    esp,0x11c
c00078f4:	5b                   	pop    ebx
c00078f5:	5e                   	pop    esi
c00078f6:	5f                   	pop    edi
c00078f7:	5d                   	pop    ebp
c00078f8:	c3                   	ret    

c00078f9 <KeDereferenceSymlink(char const*, char*)>:
c00078f9:	55                   	push   ebp
c00078fa:	57                   	push   edi
c00078fb:	56                   	push   esi
c00078fc:	53                   	push   ebx
c00078fd:	83 ec 48             	sub    esp,0x48
c0007900:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0007904:	56                   	push   esi
c0007905:	e8 85 fe ff ff       	call   c000778f <KiIsSymlinkRegistered(char const*)>
c000790a:	83 c4 10             	add    esp,0x10
c000790d:	89 c7                	mov    edi,eax
c000790f:	89 d0                	mov    eax,edx
c0007911:	09 f8                	or     eax,edi
c0007913:	75 07                	jne    c000791c <KeDereferenceSymlink(char const*, char*)+0x23>
c0007915:	31 c0                	xor    eax,eax
c0007917:	e9 7c 01 00 00       	jmp    c0007a98 <KeDereferenceSymlink(char const*, char*)+0x19f>
c000791c:	83 ec 0c             	sub    esp,0xc
c000791f:	89 d5                	mov    ebp,edx
c0007921:	68 14 01 00 00       	push   0x114
c0007926:	e8 38 7e 00 00       	call   c000f763 <malloc>
c000792b:	83 c4 0c             	add    esp,0xc
c000792e:	89 c3                	mov    ebx,eax
c0007930:	ff 35 98 da 02 c0    	push   DWORD PTR ds:0xc002da98
c0007936:	56                   	push   esi
c0007937:	50                   	push   eax
c0007938:	e8 4d 08 00 00       	call   c000818a <File::File(char const*, Process*)>
c000793d:	83 c4 10             	add    esp,0x10
c0007940:	85 db                	test   ebx,ebx
c0007942:	0f 84 32 01 00 00    	je     c0007a7a <KeDereferenceSymlink(char const*, char*)+0x181>
c0007948:	56                   	push   esi
c0007949:	56                   	push   esi
c000794a:	6a 01                	push   0x1
c000794c:	53                   	push   ebx
c000794d:	e8 56 08 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c0007952:	83 c4 10             	add    esp,0x10
c0007955:	85 c0                	test   eax,eax
c0007957:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007959:	74 09                	je     c0007964 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000795b:	83 ec 0c             	sub    esp,0xc
c000795e:	53                   	push   ebx
c000795f:	e9 10 01 00 00       	jmp    c0007a74 <KeDereferenceSymlink(char const*, char*)+0x17b>
c0007964:	83 ec 0c             	sub    esp,0xc
c0007967:	8d 74 24 18          	lea    esi,[esp+0x18]
c000796b:	56                   	push   esi
c000796c:	8d 54 24 37          	lea    edx,[esp+0x37]
c0007970:	52                   	push   edx
c0007971:	6a 00                	push   0x0
c0007973:	6a 08                	push   0x8
c0007975:	53                   	push   ebx
c0007976:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007979:	83 c4 20             	add    esp,0x20
c000797c:	85 c0                	test   eax,eax
c000797e:	0f 85 e2 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007984:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007989:	0f 85 d7 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000798f:	83 ec 0c             	sub    esp,0xc
c0007992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007994:	56                   	push   esi
c0007995:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007999:	52                   	push   edx
c000799a:	6a 00                	push   0x0
c000799c:	6a 08                	push   0x8
c000799e:	53                   	push   ebx
c000799f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079a2:	83 c4 20             	add    esp,0x20
c00079a5:	85 c0                	test   eax,eax
c00079a7:	0f 85 b9 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079ad:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00079b2:	0f 85 ae 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079b8:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c00079bc:	0f 85 53 ff ff ff    	jne    c0007915 <KeDereferenceSymlink(char const*, char*)+0x1c>
c00079c2:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c00079c6:	0f 85 49 ff ff ff    	jne    c0007915 <KeDereferenceSymlink(char const*, char*)+0x1c>
c00079cc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00079d4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00079dc:	51                   	push   ecx
c00079dd:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00079e1:	50                   	push   eax
c00079e2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00079e6:	50                   	push   eax
c00079e7:	53                   	push   ebx
c00079e8:	e8 bd 0a 00 00       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00079ed:	83 c4 10             	add    esp,0x10
c00079f0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00079f5:	75 6f                	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079f7:	31 c9                	xor    ecx,ecx
c00079f9:	bf 0f 00 00 00       	mov    edi,0xf
c00079fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a02:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a06:	39 c7                	cmp    edi,eax
c0007a08:	89 cf                	mov    edi,ecx
c0007a0a:	19 d7                	sbb    edi,edx
c0007a0c:	73 58                	jae    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a0e:	83 c0 f0             	add    eax,0xfffffff0
c0007a11:	bf ff 00 00 00       	mov    edi,0xff
c0007a16:	83 d2 ff             	adc    edx,0xffffffff
c0007a19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007a1d:	39 c7                	cmp    edi,eax
c0007a1f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007a23:	19 d1                	sbb    ecx,edx
c0007a25:	72 53                	jb     c0007a7a <KeDereferenceSymlink(char const*, char*)+0x181>
c0007a27:	40                   	inc    eax
c0007a28:	52                   	push   edx
c0007a29:	50                   	push   eax
c0007a2a:	6a 00                	push   0x0
c0007a2c:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0007a30:	e8 bb 8a ff ff       	call   c00004f0 <memset>
c0007a35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a37:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a3a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0007a3e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a42:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a46:	53                   	push   ebx
c0007a47:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007a4a:	83 c4 20             	add    esp,0x20
c0007a4d:	85 c0                	test   eax,eax
c0007a4f:	75 15                	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a55:	89 c7                	mov    edi,eax
c0007a57:	c1 ff 1f             	sar    edi,0x1f
c0007a5a:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007a5e:	75 06                	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a60:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007a64:	74 19                	je     c0007a7f <KeDereferenceSymlink(char const*, char*)+0x186>
c0007a66:	83 ec 0c             	sub    esp,0xc
c0007a69:	53                   	push   ebx
c0007a6a:	e8 97 07 00 00       	call   c0008206 <File::close()>
c0007a6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a74:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a77:	83 c4 10             	add    esp,0x10
c0007a7a:	83 c8 ff             	or     eax,0xffffffff
c0007a7d:	eb 19                	jmp    c0007a98 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a7f:	83 ec 0c             	sub    esp,0xc
c0007a82:	53                   	push   ebx
c0007a83:	e8 7e 07 00 00       	call   c0008206 <File::close()>
c0007a88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a8d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a90:	83 c4 10             	add    esp,0x10
c0007a93:	b8 01 00 00 00       	mov    eax,0x1
c0007a98:	83 c4 3c             	add    esp,0x3c
c0007a9b:	5b                   	pop    ebx
c0007a9c:	5e                   	pop    esi
c0007a9d:	5f                   	pop    edi
c0007a9e:	5d                   	pop    ebp
c0007a9f:	c3                   	ret    

c0007aa0 <KeCreateSymlink(char const*, char const*)>:
c0007aa0:	55                   	push   ebp
c0007aa1:	57                   	push   edi
c0007aa2:	56                   	push   esi
c0007aa3:	53                   	push   ebx
c0007aa4:	83 ec 38             	sub    esp,0x38
c0007aa7:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007aab:	68 14 01 00 00       	push   0x114
c0007ab0:	e8 ae 7c 00 00       	call   c000f763 <malloc>
c0007ab5:	6a 00                	push   0x0
c0007ab7:	89 c3                	mov    ebx,eax
c0007ab9:	ff 35 98 da 02 c0    	push   DWORD PTR ds:0xc002da98
c0007abf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007ac3:	50                   	push   eax
c0007ac4:	e8 c3 05 00 00       	call   c000808c <File::File(char const*, Process*, bool)>
c0007ac9:	83 c4 20             	add    esp,0x20
c0007acc:	b8 01 00 00 00       	mov    eax,0x1
c0007ad1:	85 db                	test   ebx,ebx
c0007ad3:	0f 84 fb 00 00 00    	je     c0007bd4 <KeCreateSymlink(char const*, char const*)+0x134>
c0007ad9:	52                   	push   edx
c0007ada:	52                   	push   edx
c0007adb:	6a 12                	push   0x12
c0007add:	53                   	push   ebx
c0007ade:	e8 c5 06 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c0007ae3:	83 c4 10             	add    esp,0x10
c0007ae6:	85 c0                	test   eax,eax
c0007ae8:	74 0b                	je     c0007af5 <KeCreateSymlink(char const*, char const*)+0x55>
c0007aea:	83 ec 0c             	sub    esp,0xc
c0007aed:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007aef:	53                   	push   ebx
c0007af0:	e9 d4 00 00 00       	jmp    c0007bc9 <KeCreateSymlink(char const*, char const*)+0x129>
c0007af5:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007af9:	be 85 3a 02 c0       	mov    esi,0xc0023a85
c0007afe:	b9 09 00 00 00       	mov    ecx,0x9
c0007b03:	fc                   	cld    
c0007b04:	83 ec 0c             	sub    esp,0xc
c0007b07:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007b09:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007b0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b0f:	56                   	push   esi
c0007b10:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007b14:	52                   	push   edx
c0007b15:	6a 00                	push   0x0
c0007b17:	6a 08                	push   0x8
c0007b19:	53                   	push   ebx
c0007b1a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b1d:	83 c4 20             	add    esp,0x20
c0007b20:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b25:	0f 85 90 00 00 00    	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b2b:	85 c0                	test   eax,eax
c0007b2d:	0f 85 88 00 00 00    	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b33:	e8 05 fa ff ff       	call   c000753d <KiCreateSymlinkID()>
c0007b38:	83 ec 0c             	sub    esp,0xc
c0007b3b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007b3f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007b43:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b45:	56                   	push   esi
c0007b46:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007b4a:	52                   	push   edx
c0007b4b:	6a 00                	push   0x0
c0007b4d:	6a 08                	push   0x8
c0007b4f:	53                   	push   ebx
c0007b50:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b53:	83 c4 20             	add    esp,0x20
c0007b56:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b5b:	75 5e                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b5d:	85 c0                	test   eax,eax
c0007b5f:	75 5a                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b61:	83 ec 0c             	sub    esp,0xc
c0007b64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b66:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007b69:	55                   	push   ebp
c0007b6a:	e8 01 8a ff ff       	call   c0000570 <strlen>
c0007b6f:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b72:	31 d2                	xor    edx,edx
c0007b74:	55                   	push   ebp
c0007b75:	52                   	push   edx
c0007b76:	50                   	push   eax
c0007b77:	53                   	push   ebx
c0007b78:	ff d7                	call   edi
c0007b7a:	83 c4 14             	add    esp,0x14
c0007b7d:	89 c6                	mov    esi,eax
c0007b7f:	55                   	push   ebp
c0007b80:	e8 eb 89 ff ff       	call   c0000570 <strlen>
c0007b85:	83 c4 10             	add    esp,0x10
c0007b88:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b8c:	75 2d                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b8e:	85 f6                	test   esi,esi
c0007b90:	75 29                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b92:	50                   	push   eax
c0007b93:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b97:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b9b:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b9f:	e8 06 fa ff ff       	call   c00075aa <KeRegisterSymlink(char const*, unsigned long long)>
c0007ba4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007ba7:	e8 5a 06 00 00       	call   c0008206 <File::close()>
c0007bac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007bae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007bb1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007bb4:	83 c4 10             	add    esp,0x10
c0007bb7:	31 c0                	xor    eax,eax
c0007bb9:	eb 19                	jmp    c0007bd4 <KeCreateSymlink(char const*, char const*)+0x134>
c0007bbb:	83 ec 0c             	sub    esp,0xc
c0007bbe:	53                   	push   ebx
c0007bbf:	e8 42 06 00 00       	call   c0008206 <File::close()>
c0007bc4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007bc6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007bc9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007bcc:	83 c4 10             	add    esp,0x10
c0007bcf:	b8 01 00 00 00       	mov    eax,0x1
c0007bd4:	83 c4 2c             	add    esp,0x2c
c0007bd7:	5b                   	pop    ebx
c0007bd8:	5e                   	pop    esi
c0007bd9:	5f                   	pop    edi
c0007bda:	5d                   	pop    ebp
c0007bdb:	c3                   	ret    

c0007bdc <File::read(unsigned long long, void*, int*)>:
c0007bdc:	53                   	push   ebx
c0007bdd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007be1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007be5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bec:	83 f8 19             	cmp    eax,0x19
c0007bef:	77 35                	ja     c0007c26 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bf1:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0007bf8:	85 c0                	test   eax,eax
c0007bfa:	74 2a                	je     c0007c26 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bfc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c02:	85 c0                	test   eax,eax
c0007c04:	74 20                	je     c0007c26 <File::read(unsigned long long, void*, int*)+0x4a>
c0007c06:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c0a:	74 21                	je     c0007c2d <File::read(unsigned long long, void*, int*)+0x51>
c0007c0c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c0e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c12:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c20:	5b                   	pop    ebx
c0007c21:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007c24:	ff e0                	jmp    eax
c0007c26:	b8 0b 00 00 00       	mov    eax,0xb
c0007c2b:	eb 05                	jmp    c0007c32 <File::read(unsigned long long, void*, int*)+0x56>
c0007c2d:	b8 05 00 00 00       	mov    eax,0x5
c0007c32:	5b                   	pop    ebx
c0007c33:	c3                   	ret    

c0007c34 <File::write(unsigned long long, void*, int*)>:
c0007c34:	53                   	push   ebx
c0007c35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c3d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c44:	83 f8 19             	cmp    eax,0x19
c0007c47:	77 35                	ja     c0007c7e <File::write(unsigned long long, void*, int*)+0x4a>
c0007c49:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0007c50:	85 c0                	test   eax,eax
c0007c52:	74 2a                	je     c0007c7e <File::write(unsigned long long, void*, int*)+0x4a>
c0007c54:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c5a:	85 c0                	test   eax,eax
c0007c5c:	74 20                	je     c0007c7e <File::write(unsigned long long, void*, int*)+0x4a>
c0007c5e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c62:	74 21                	je     c0007c85 <File::write(unsigned long long, void*, int*)+0x51>
c0007c64:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c66:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c6a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c78:	5b                   	pop    ebx
c0007c79:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c7c:	ff e0                	jmp    eax
c0007c7e:	b8 0b 00 00 00       	mov    eax,0xb
c0007c83:	eb 05                	jmp    c0007c8a <File::write(unsigned long long, void*, int*)+0x56>
c0007c85:	b8 05 00 00 00       	mov    eax,0x5
c0007c8a:	5b                   	pop    ebx
c0007c8b:	c3                   	ret    

c0007c8c <Directory::read(unsigned long long, void*, int*)>:
c0007c8c:	53                   	push   ebx
c0007c8d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c91:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c95:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c9c:	83 f8 19             	cmp    eax,0x19
c0007c9f:	77 35                	ja     c0007cd6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007ca1:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0007ca8:	85 c0                	test   eax,eax
c0007caa:	74 2a                	je     c0007cd6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007cac:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007cb2:	85 c0                	test   eax,eax
c0007cb4:	74 20                	je     c0007cd6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007cb6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007cba:	74 21                	je     c0007cdd <Directory::read(unsigned long long, void*, int*)+0x51>
c0007cbc:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007cbe:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007cc2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007cc8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ccc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007cd0:	5b                   	pop    ebx
c0007cd1:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007cd4:	ff e0                	jmp    eax
c0007cd6:	b8 0b 00 00 00       	mov    eax,0xb
c0007cdb:	eb 05                	jmp    c0007ce2 <Directory::read(unsigned long long, void*, int*)+0x56>
c0007cdd:	b8 05 00 00 00       	mov    eax,0x5
c0007ce2:	5b                   	pop    ebx
c0007ce3:	c3                   	ret    

c0007ce4 <Directory::write(unsigned long long, void*, int*)>:
c0007ce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ce8:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007cef:	b8 0b 00 00 00       	mov    eax,0xb
c0007cf4:	83 fa 19             	cmp    edx,0x19
c0007cf7:	77 18                	ja     c0007d11 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cf9:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c0007d00:	85 d2                	test   edx,edx
c0007d02:	74 0d                	je     c0007d11 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007d04:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007d0b:	19 c0                	sbb    eax,eax
c0007d0d:	83 e0 0a             	and    eax,0xa
c0007d10:	40                   	inc    eax
c0007d11:	c3                   	ret    

c0007d12 <File::isAtty()>:
c0007d12:	31 c0                	xor    eax,eax
c0007d14:	c3                   	ret    
c0007d15:	90                   	nop

c0007d16 <Directory::isAtty()>:
c0007d16:	31 c0                	xor    eax,eax
c0007d18:	c3                   	ret    
c0007d19:	90                   	nop

c0007d1a <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007d1a:	b8 0a 00 00 00       	mov    eax,0xa
c0007d1f:	c3                   	ret    

c0007d20 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007d20:	b8 0a 00 00 00       	mov    eax,0xa
c0007d25:	c3                   	ret    

c0007d26 <Filesystem::allocateSwapfile(char const*, int)>:
c0007d26:	31 c0                	xor    eax,eax
c0007d28:	31 d2                	xor    edx,edx
c0007d2a:	c3                   	ret    
c0007d2b:	90                   	nop

c0007d2c <File::~File()>:
c0007d2c:	83 ec 0c             	sub    esp,0xc
c0007d2f:	ba 5c 3b 02 c0       	mov    edx,0xc0023b5c
c0007d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d38:	89 10                	mov    DWORD PTR [eax],edx
c0007d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d3e:	83 ec 0c             	sub    esp,0xc
c0007d41:	50                   	push   eax
c0007d42:	e8 3f b2 00 00       	call   c0012f86 <UnixFile::~UnixFile()>
c0007d47:	83 c4 10             	add    esp,0x10
c0007d4a:	90                   	nop
c0007d4b:	83 c4 0c             	add    esp,0xc
c0007d4e:	c3                   	ret    
c0007d4f:	90                   	nop

c0007d50 <File::~File()>:
c0007d50:	83 ec 0c             	sub    esp,0xc
c0007d53:	83 ec 0c             	sub    esp,0xc
c0007d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d5a:	e8 cd ff ff ff       	call   c0007d2c <File::~File()>
c0007d5f:	83 c4 10             	add    esp,0x10
c0007d62:	83 ec 08             	sub    esp,0x8
c0007d65:	68 14 01 00 00       	push   0x114
c0007d6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d6e:	e8 09 55 00 00       	call   c000d27c <operator delete(void*, unsigned long)>
c0007d73:	83 c4 10             	add    esp,0x10
c0007d76:	83 c4 0c             	add    esp,0xc
c0007d79:	c3                   	ret    

c0007d7a <Directory::~Directory()>:
c0007d7a:	83 ec 0c             	sub    esp,0xc
c0007d7d:	ba 78 3b 02 c0       	mov    edx,0xc0023b78
c0007d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d86:	89 10                	mov    DWORD PTR [eax],edx
c0007d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d8c:	83 ec 0c             	sub    esp,0xc
c0007d8f:	50                   	push   eax
c0007d90:	e8 f1 b1 00 00       	call   c0012f86 <UnixFile::~UnixFile()>
c0007d95:	83 c4 10             	add    esp,0x10
c0007d98:	90                   	nop
c0007d99:	83 c4 0c             	add    esp,0xc
c0007d9c:	c3                   	ret    
c0007d9d:	90                   	nop

c0007d9e <Directory::~Directory()>:
c0007d9e:	83 ec 0c             	sub    esp,0xc
c0007da1:	83 ec 0c             	sub    esp,0xc
c0007da4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007da8:	e8 cd ff ff ff       	call   c0007d7a <Directory::~Directory()>
c0007dad:	83 c4 10             	add    esp,0x10
c0007db0:	83 ec 08             	sub    esp,0x8
c0007db3:	68 14 01 00 00       	push   0x114
c0007db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dbc:	e8 bb 54 00 00       	call   c000d27c <operator delete(void*, unsigned long)>
c0007dc1:	83 c4 10             	add    esp,0x10
c0007dc4:	83 c4 0c             	add    esp,0xc
c0007dc7:	c3                   	ret    

c0007dc8 <Filesystem::Filesystem()>:
c0007dc8:	ba f0 3a 02 c0       	mov    edx,0xc0023af0
c0007dcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dd1:	89 10                	mov    DWORD PTR [eax],edx
c0007dd3:	8b 15 04 c3 02 c0    	mov    edx,DWORD PTR ds:0xc002c304
c0007dd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ddd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007de0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007de4:	a3 04 c3 02 c0       	mov    ds:0xc002c304,eax
c0007de9:	90                   	nop
c0007dea:	c3                   	ret    
c0007deb:	90                   	nop

c0007dec <Filesystem::~Filesystem()>:
c0007dec:	ba f0 3a 02 c0       	mov    edx,0xc0023af0
c0007df1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007df5:	89 10                	mov    DWORD PTR [eax],edx
c0007df7:	90                   	nop
c0007df8:	c3                   	ret    
c0007df9:	90                   	nop

c0007dfa <Filesystem::~Filesystem()>:
c0007dfa:	83 ec 0c             	sub    esp,0xc
c0007dfd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007e01:	e8 e6 ff ff ff       	call   c0007dec <Filesystem::~Filesystem()>
c0007e06:	83 c4 04             	add    esp,0x4
c0007e09:	83 ec 08             	sub    esp,0x8
c0007e0c:	6a 08                	push   0x8
c0007e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e12:	e8 65 54 00 00       	call   c000d27c <operator delete(void*, unsigned long)>
c0007e17:	83 c4 10             	add    esp,0x10
c0007e1a:	83 c4 0c             	add    esp,0xc
c0007e1d:	c3                   	ret    

c0007e1e <Fs::getcwd(Process*, char*, int)>:
c0007e1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e22:	31 c0                	xor    eax,eax
c0007e24:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007e27:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007e2b:	7d 15                	jge    c0007e42 <Fs::getcwd(Process*, char*, int)+0x24>
c0007e2d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007e31:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007e38:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007e3b:	84 c9                	test   cl,cl
c0007e3d:	74 06                	je     c0007e45 <Fs::getcwd(Process*, char*, int)+0x27>
c0007e3f:	40                   	inc    eax
c0007e40:	eb e2                	jmp    c0007e24 <Fs::getcwd(Process*, char*, int)+0x6>
c0007e42:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007e45:	31 c0                	xor    eax,eax
c0007e47:	c3                   	ret    

c0007e48 <Fs::initVFS()>:
c0007e48:	83 ec 18             	sub    esp,0x18
c0007e4b:	6a 08                	push   0x8
c0007e4d:	e8 11 79 00 00       	call   c000f763 <malloc>
c0007e52:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e55:	e8 c6 4d 01 00       	call   c001cc20 <FAT::FAT()>
c0007e5a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007e61:	e8 fd 78 00 00       	call   c000f763 <malloc>
c0007e66:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e69:	e8 de 5c 01 00       	call   c001db4c <ISO9660::ISO9660()>
c0007e6e:	83 c4 1c             	add    esp,0x1c
c0007e71:	c3                   	ret    

c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e72:	55                   	push   ebp
c0007e73:	57                   	push   edi
c0007e74:	56                   	push   esi
c0007e75:	53                   	push   ebx
c0007e76:	81 ec 10 04 00 00    	sub    esp,0x410
c0007e7c:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c0007e83:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c0007e8a:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c0007e92:	68 00 04 00 00       	push   0x400
c0007e97:	6a 00                	push   0x0
c0007e99:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0007e9d:	57                   	push   edi
c0007e9e:	e8 4d 86 ff ff       	call   c00004f0 <memset>
c0007ea3:	83 c4 10             	add    esp,0x10
c0007ea6:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c0007eaa:	75 0b                	jne    c0007eb7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c0007eac:	50                   	push   eax
c0007ead:	50                   	push   eax
c0007eae:	55                   	push   ebp
c0007eaf:	57                   	push   edi
c0007eb0:	e8 8b 87 ff ff       	call   c0000640 <strcpy>
c0007eb5:	eb 51                	jmp    c0007f08 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c0007eb7:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007ebb:	83 f8 5c             	cmp    eax,0x5c
c0007ebe:	74 05                	je     c0007ec5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c0007ec0:	83 f8 2f             	cmp    eax,0x2f
c0007ec3:	75 1e                	jne    c0007ee3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c0007ec5:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0007ecc:	8a 00                	mov    al,BYTE PTR [eax]
c0007ece:	3c 60                	cmp    al,0x60
c0007ed0:	7e 03                	jle    c0007ed5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c0007ed2:	83 e8 20             	sub    eax,0x20
c0007ed5:	88 04 24             	mov    BYTE PTR [esp],al
c0007ed8:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007edf:	50                   	push   eax
c0007ee0:	50                   	push   eax
c0007ee1:	eb 1e                	jmp    c0007f01 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c0007ee3:	50                   	push   eax
c0007ee4:	50                   	push   eax
c0007ee5:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c0007eec:	57                   	push   edi
c0007eed:	e8 4e 87 ff ff       	call   c0000640 <strcpy>
c0007ef2:	58                   	pop    eax
c0007ef3:	5a                   	pop    edx
c0007ef4:	68 c4 54 02 c0       	push   0xc00254c4
c0007ef9:	57                   	push   edi
c0007efa:	e8 41 89 ff ff       	call   c0000840 <strcat>
c0007eff:	59                   	pop    ecx
c0007f00:	58                   	pop    eax
c0007f01:	55                   	push   ebp
c0007f02:	57                   	push   edi
c0007f03:	e8 38 89 ff ff       	call   c0000840 <strcat>
c0007f08:	83 c4 10             	add    esp,0x10
c0007f0b:	8a 04 24             	mov    al,BYTE PTR [esp]
c0007f0e:	3c 60                	cmp    al,0x60
c0007f10:	7e 03                	jle    c0007f15 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c0007f12:	83 e8 20             	sub    eax,0x20
c0007f15:	88 04 24             	mov    BYTE PTR [esp],al
c0007f18:	88 06                	mov    BYTE PTR [esi],al
c0007f1a:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007f21:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c0007f27:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c0007f2b:	bf 03 00 00 00       	mov    edi,0x3
c0007f30:	b8 03 00 00 00       	mov    eax,0x3
c0007f35:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c0007f39:	89 e9                	mov    ecx,ebp
c0007f3b:	85 ed                	test   ebp,ebp
c0007f3d:	0f 84 97 00 00 00    	je     c0007fda <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c0007f43:	8d 57 01             	lea    edx,[edi+0x1]
c0007f46:	83 fd 5c             	cmp    ebp,0x5c
c0007f49:	74 05                	je     c0007f50 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c0007f4b:	83 fd 2f             	cmp    ebp,0x2f
c0007f4e:	75 12                	jne    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f50:	89 c5                	mov    ebp,eax
c0007f52:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007f57:	74 09                	je     c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f59:	40                   	inc    eax
c0007f5a:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c0007f5e:	89 d7                	mov    edi,edx
c0007f60:	eb d3                	jmp    c0007f35 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007f62:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0007f67:	0f be e9             	movsx  ebp,cl
c0007f6a:	75 5e                	jne    c0007fca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f6c:	83 fd 2e             	cmp    ebp,0x2e
c0007f6f:	75 59                	jne    c0007fca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f71:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c0007f75:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c0007f7a:	74 18                	je     c0007f94 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c0007f7c:	83 fd 2e             	cmp    ebp,0x2e
c0007f7f:	74 53                	je     c0007fd4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f81:	89 fa                	mov    edx,edi
c0007f83:	42                   	inc    edx
c0007f84:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f88:	83 f9 2f             	cmp    ecx,0x2f
c0007f8b:	74 f6                	je     c0007f83 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f8d:	83 f9 5c             	cmp    ecx,0x5c
c0007f90:	74 f1                	je     c0007f83 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f92:	eb ca                	jmp    c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f94:	83 fd 2e             	cmp    ebp,0x2e
c0007f97:	74 3b                	je     c0007fd4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f99:	83 f8 03             	cmp    eax,0x3
c0007f9c:	74 c0                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f9e:	42                   	inc    edx
c0007f9f:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007fa3:	83 f9 5c             	cmp    ecx,0x5c
c0007fa6:	74 f6                	je     c0007f9e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007fa8:	83 f9 2f             	cmp    ecx,0x2f
c0007fab:	74 f1                	je     c0007f9e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007fad:	48                   	dec    eax
c0007fae:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007fb2:	75 06                	jne    c0007fba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007fb4:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007fb8:	eb f3                	jmp    c0007fad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c0007fba:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007fbe:	74 07                	je     c0007fc7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c0007fc0:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007fc4:	48                   	dec    eax
c0007fc5:	eb f3                	jmp    c0007fba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007fc7:	40                   	inc    eax
c0007fc8:	eb 94                	jmp    c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fca:	83 fd 5c             	cmp    ebp,0x5c
c0007fcd:	74 8f                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fcf:	83 fd 2f             	cmp    ebp,0x2f
c0007fd2:	74 8a                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fd4:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c0007fd7:	40                   	inc    eax
c0007fd8:	eb 84                	jmp    c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fda:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007fde:	83 ec 0c             	sub    esp,0xc
c0007fe1:	56                   	push   esi
c0007fe2:	e8 89 85 ff ff       	call   c0000570 <strlen>
c0007fe7:	83 c4 10             	add    esp,0x10
c0007fea:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c0007fef:	74 17                	je     c0008008 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007ff1:	83 ec 0c             	sub    esp,0xc
c0007ff4:	56                   	push   esi
c0007ff5:	e8 76 85 ff ff       	call   c0000570 <strlen>
c0007ffa:	83 c4 10             	add    esp,0x10
c0007ffd:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0008002:	74 04                	je     c0008008 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0008004:	31 ff                	xor    edi,edi
c0008006:	eb 5c                	jmp    c0008064 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008008:	83 ec 0c             	sub    esp,0xc
c000800b:	56                   	push   esi
c000800c:	e8 5f 85 ff ff       	call   c0000570 <strlen>
c0008011:	83 c4 10             	add    esp,0x10
c0008014:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c0008019:	74 e9                	je     c0008004 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c000801b:	83 ec 0c             	sub    esp,0xc
c000801e:	56                   	push   esi
c000801f:	e8 4c 85 ff ff       	call   c0000570 <strlen>
c0008024:	83 c4 10             	add    esp,0x10
c0008027:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000802c:	eb b0                	jmp    c0007fde <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000802e:	52                   	push   edx
c000802f:	52                   	push   edx
c0008030:	56                   	push   esi
c0008031:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c0008035:	55                   	push   ebp
c0008036:	e8 05 86 ff ff       	call   c0000640 <strcpy>
c000803b:	59                   	pop    ecx
c000803c:	58                   	pop    eax
c000803d:	56                   	push   esi
c000803e:	55                   	push   ebp
c000803f:	e8 b5 f8 ff ff       	call   c00078f9 <KeDereferenceSymlink(char const*, char*)>
c0008044:	83 c4 10             	add    esp,0x10
c0008047:	48                   	dec    eax
c0008048:	75 37                	jne    c0008081 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000804a:	50                   	push   eax
c000804b:	56                   	push   esi
c000804c:	55                   	push   ebp
c000804d:	68 8e 3a 02 c0       	push   0xc0023a8e
c0008052:	e8 25 ef ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008057:	83 c4 10             	add    esp,0x10
c000805a:	8d 47 01             	lea    eax,[edi+0x1]
c000805d:	83 ff 14             	cmp    edi,0x14
c0008060:	74 08                	je     c000806a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c0008062:	89 c7                	mov    edi,eax
c0008064:	85 db                	test   ebx,ebx
c0008066:	75 c6                	jne    c000802e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c0008068:	eb 17                	jmp    c0008081 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000806a:	83 ec 0c             	sub    esp,0xc
c000806d:	bf 15 00 00 00       	mov    edi,0x15
c0008072:	68 a9 3a 02 c0       	push   0xc0023aa9
c0008077:	e8 44 7b 00 00       	call   c000fbc0 <KePanic(char const*)>
c000807c:	83 c4 10             	add    esp,0x10
c000807f:	eb e3                	jmp    c0008064 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008081:	81 c4 0c 04 00 00    	add    esp,0x40c
c0008087:	5b                   	pop    ebx
c0008088:	5e                   	pop    esi
c0008089:	5f                   	pop    edi
c000808a:	5d                   	pop    ebp
c000808b:	c3                   	ret    

c000808c <File::File(char const*, Process*, bool)>:
c000808c:	83 ec 1c             	sub    esp,0x1c
c000808f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008093:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008097:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000809b:	83 ec 08             	sub    esp,0x8
c000809e:	6a 00                	push   0x0
c00080a0:	50                   	push   eax
c00080a1:	e8 fa ac 00 00       	call   c0012da0 <UnixFile::UnixFile(int)>
c00080a6:	83 c4 10             	add    esp,0x10
c00080a9:	ba 5c 3b 02 c0       	mov    edx,0xc0023b5c
c00080ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b2:	89 10                	mov    DWORD PTR [eax],edx
c00080b4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00080b9:	85 c0                	test   eax,eax
c00080bb:	74 0f                	je     c00080cc <File::File(char const*, Process*, bool)+0x40>
c00080bd:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c00080c2:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c00080c6:	74 04                	je     c00080cc <File::File(char const*, Process*, bool)+0x40>
c00080c8:	b0 01                	mov    al,0x1
c00080ca:	eb 02                	jmp    c00080ce <File::File(char const*, Process*, bool)+0x42>
c00080cc:	b0 00                	mov    al,0x0
c00080ce:	0f b6 c0             	movzx  eax,al
c00080d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080d5:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00080db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080df:	83 c2 0d             	add    edx,0xd
c00080e2:	50                   	push   eax
c00080e3:	51                   	push   ecx
c00080e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00080e8:	52                   	push   edx
c00080e9:	e8 84 fd ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00080ee:	83 c4 10             	add    esp,0x10
c00080f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080f5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080fc:	83 c2 0d             	add    edx,0xd
c00080ff:	83 ec 04             	sub    esp,0x4
c0008102:	50                   	push   eax
c0008103:	52                   	push   edx
c0008104:	68 cf 3a 02 c0       	push   0xc0023acf
c0008109:	e8 6e ee ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000810e:	83 c4 10             	add    esp,0x10
c0008111:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008115:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008118:	83 e8 41             	sub    eax,0x41
c000811b:	88 c2                	mov    dl,al
c000811d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008121:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008127:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000812b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000812f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008133:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008139:	0f b6 c0             	movzx  eax,al
c000813c:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008143:	85 c0                	test   eax,eax
c0008145:	74 3e                	je     c0008185 <File::File(char const*, Process*, bool)+0xf9>
c0008147:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000814b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008151:	0f b6 c0             	movzx  eax,al
c0008154:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c000815b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008161:	85 c0                	test   eax,eax
c0008163:	75 20                	jne    c0008185 <File::File(char const*, Process*, bool)+0xf9>
c0008165:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008169:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000816f:	0f b6 c0             	movzx  eax,al
c0008172:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008179:	83 ec 0c             	sub    esp,0xc
c000817c:	50                   	push   eax
c000817d:	e8 64 28 00 00       	call   c000a9e6 <LogicalDisk::mount()>
c0008182:	83 c4 10             	add    esp,0x10
c0008185:	90                   	nop
c0008186:	83 c4 1c             	add    esp,0x1c
c0008189:	c3                   	ret    

c000818a <File::File(char const*, Process*)>:
c000818a:	83 ec 0c             	sub    esp,0xc
c000818d:	6a 01                	push   0x1
c000818f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000819b:	e8 ec fe ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c00081a0:	83 c4 10             	add    esp,0x10
c00081a3:	90                   	nop
c00081a4:	83 c4 0c             	add    esp,0xc
c00081a7:	c3                   	ret    

c00081a8 <File::open(FileOpenMode)>:
c00081a8:	53                   	push   ebx
c00081a9:	b8 0b 00 00 00       	mov    eax,0xb
c00081ae:	83 ec 08             	sub    esp,0x8
c00081b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00081b5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00081bc:	83 fa 19             	cmp    edx,0x19
c00081bf:	77 40                	ja     c0008201 <File::open(FileOpenMode)+0x59>
c00081c1:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c00081c8:	85 d2                	test   edx,edx
c00081ca:	74 35                	je     c0008201 <File::open(FileOpenMode)+0x59>
c00081cc:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00081d2:	85 d2                	test   edx,edx
c00081d4:	74 2b                	je     c0008201 <File::open(FileOpenMode)+0x59>
c00081d6:	b8 06 00 00 00       	mov    eax,0x6
c00081db:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00081df:	75 20                	jne    c0008201 <File::open(FileOpenMode)+0x59>
c00081e1:	8b 02                	mov    eax,DWORD PTR [edx]
c00081e3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00081e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00081ed:	51                   	push   ecx
c00081ee:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00081f1:	51                   	push   ecx
c00081f2:	52                   	push   edx
c00081f3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00081f6:	83 c4 10             	add    esp,0x10
c00081f9:	85 c0                	test   eax,eax
c00081fb:	75 04                	jne    c0008201 <File::open(FileOpenMode)+0x59>
c00081fd:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008201:	83 c4 08             	add    esp,0x8
c0008204:	5b                   	pop    ebx
c0008205:	c3                   	ret    

c0008206 <File::close()>:
c0008206:	53                   	push   ebx
c0008207:	b8 0b 00 00 00       	mov    eax,0xb
c000820c:	83 ec 08             	sub    esp,0x8
c000820f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008213:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000821a:	83 f9 19             	cmp    ecx,0x19
c000821d:	77 41                	ja     c0008260 <File::close()+0x5a>
c000821f:	8b 1c 8d e0 ca 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd3520]
c0008226:	85 db                	test   ebx,ebx
c0008228:	74 36                	je     c0008260 <File::close()+0x5a>
c000822a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008231:	74 2d                	je     c0008260 <File::close()+0x5a>
c0008233:	b8 05 00 00 00       	mov    eax,0x5
c0008238:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000823c:	74 22                	je     c0008260 <File::close()+0x5a>
c000823e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008242:	8b 04 8d e0 ca 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd3520]
c0008249:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000824f:	53                   	push   ebx
c0008250:	53                   	push   ebx
c0008251:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008253:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008259:	50                   	push   eax
c000825a:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000825d:	83 c4 10             	add    esp,0x10
c0008260:	83 c4 08             	add    esp,0x8
c0008263:	5b                   	pop    ebx
c0008264:	c3                   	ret    
c0008265:	90                   	nop

c0008266 <File::seek(unsigned long long)>:
c0008266:	56                   	push   esi
c0008267:	53                   	push   ebx
c0008268:	b8 0b 00 00 00       	mov    eax,0xb
c000826d:	51                   	push   ecx
c000826e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008272:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008276:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000827d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008281:	83 fa 19             	cmp    edx,0x19
c0008284:	77 31                	ja     c00082b7 <File::seek(unsigned long long)+0x51>
c0008286:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c000828d:	85 d2                	test   edx,edx
c000828f:	74 26                	je     c00082b7 <File::seek(unsigned long long)+0x51>
c0008291:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008297:	85 d2                	test   edx,edx
c0008299:	74 1c                	je     c00082b7 <File::seek(unsigned long long)+0x51>
c000829b:	b8 05 00 00 00       	mov    eax,0x5
c00082a0:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082a4:	74 11                	je     c00082b7 <File::seek(unsigned long long)+0x51>
c00082a6:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a8:	53                   	push   ebx
c00082a9:	51                   	push   ecx
c00082aa:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082b0:	52                   	push   edx
c00082b1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00082b4:	83 c4 10             	add    esp,0x10
c00082b7:	5a                   	pop    edx
c00082b8:	5b                   	pop    ebx
c00082b9:	5e                   	pop    esi
c00082ba:	c3                   	ret    
c00082bb:	90                   	nop

c00082bc <File::truncate(unsigned long long)>:
c00082bc:	56                   	push   esi
c00082bd:	53                   	push   ebx
c00082be:	b8 0b 00 00 00       	mov    eax,0xb
c00082c3:	51                   	push   ecx
c00082c4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00082c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00082cc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00082d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00082d7:	83 fa 19             	cmp    edx,0x19
c00082da:	77 31                	ja     c000830d <File::truncate(unsigned long long)+0x51>
c00082dc:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c00082e3:	85 d2                	test   edx,edx
c00082e5:	74 26                	je     c000830d <File::truncate(unsigned long long)+0x51>
c00082e7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082ed:	85 d2                	test   edx,edx
c00082ef:	74 1c                	je     c000830d <File::truncate(unsigned long long)+0x51>
c00082f1:	b8 05 00 00 00       	mov    eax,0x5
c00082f6:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082fa:	74 11                	je     c000830d <File::truncate(unsigned long long)+0x51>
c00082fc:	8b 02                	mov    eax,DWORD PTR [edx]
c00082fe:	53                   	push   ebx
c00082ff:	51                   	push   ecx
c0008300:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008306:	52                   	push   edx
c0008307:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000830a:	83 c4 10             	add    esp,0x10
c000830d:	5a                   	pop    edx
c000830e:	5b                   	pop    ebx
c000830f:	5e                   	pop    esi
c0008310:	c3                   	ret    
c0008311:	90                   	nop

c0008312 <File::tell(unsigned long long*)>:
c0008312:	83 ec 0c             	sub    esp,0xc
c0008315:	b8 0b 00 00 00       	mov    eax,0xb
c000831a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000831e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0008325:	83 fa 19             	cmp    edx,0x19
c0008328:	77 34                	ja     c000835e <File::tell(unsigned long long*)+0x4c>
c000832a:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c0008331:	85 d2                	test   edx,edx
c0008333:	74 29                	je     c000835e <File::tell(unsigned long long*)+0x4c>
c0008335:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000833b:	85 d2                	test   edx,edx
c000833d:	74 1f                	je     c000835e <File::tell(unsigned long long*)+0x4c>
c000833f:	b8 05 00 00 00       	mov    eax,0x5
c0008344:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0008348:	74 14                	je     c000835e <File::tell(unsigned long long*)+0x4c>
c000834a:	50                   	push   eax
c000834b:	8b 02                	mov    eax,DWORD PTR [edx]
c000834d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008351:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0008357:	52                   	push   edx
c0008358:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000835b:	83 c4 10             	add    esp,0x10
c000835e:	83 c4 0c             	add    esp,0xc
c0008361:	c3                   	ret    

c0008362 <File::rewind()>:
c0008362:	83 ec 10             	sub    esp,0x10
c0008365:	6a 00                	push   0x0
c0008367:	6a 00                	push   0x0
c0008369:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000836d:	e8 f4 fe ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0008372:	83 c4 1c             	add    esp,0x1c
c0008375:	c3                   	ret    

c0008376 <File::unlink()>:
c0008376:	83 ec 0c             	sub    esp,0xc
c0008379:	b8 0b 00 00 00       	mov    eax,0xb
c000837e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008382:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008389:	83 f9 19             	cmp    ecx,0x19
c000838c:	77 2f                	ja     c00083bd <File::unlink()+0x47>
c000838e:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008395:	85 c9                	test   ecx,ecx
c0008397:	74 24                	je     c00083bd <File::unlink()+0x47>
c0008399:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000839f:	85 c9                	test   ecx,ecx
c00083a1:	74 1a                	je     c00083bd <File::unlink()+0x47>
c00083a3:	b8 06 00 00 00       	mov    eax,0x6
c00083a8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083ac:	75 0f                	jne    c00083bd <File::unlink()+0x47>
c00083ae:	83 c2 0d             	add    edx,0xd
c00083b1:	50                   	push   eax
c00083b2:	50                   	push   eax
c00083b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083b5:	52                   	push   edx
c00083b6:	51                   	push   ecx
c00083b7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00083ba:	83 c4 10             	add    esp,0x10
c00083bd:	83 c4 0c             	add    esp,0xc
c00083c0:	c3                   	ret    
c00083c1:	90                   	nop

c00083c2 <File::rename(char const*)>:
c00083c2:	83 ec 0c             	sub    esp,0xc
c00083c5:	b8 0b 00 00 00       	mov    eax,0xb
c00083ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083ce:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083d5:	83 f9 19             	cmp    ecx,0x19
c00083d8:	77 32                	ja     c000840c <File::rename(char const*)+0x4a>
c00083da:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00083e1:	85 c9                	test   ecx,ecx
c00083e3:	74 27                	je     c000840c <File::rename(char const*)+0x4a>
c00083e5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083eb:	85 c9                	test   ecx,ecx
c00083ed:	74 1d                	je     c000840c <File::rename(char const*)+0x4a>
c00083ef:	b8 06 00 00 00       	mov    eax,0x6
c00083f4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083f8:	75 12                	jne    c000840c <File::rename(char const*)+0x4a>
c00083fa:	83 c2 0d             	add    edx,0xd
c00083fd:	50                   	push   eax
c00083fe:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008400:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008404:	52                   	push   edx
c0008405:	51                   	push   ecx
c0008406:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008409:	83 c4 10             	add    esp,0x10
c000840c:	83 c4 0c             	add    esp,0xc
c000840f:	c3                   	ret    

c0008410 <File::chfatattr(unsigned char, unsigned char)>:
c0008410:	57                   	push   edi
c0008411:	b8 0b 00 00 00       	mov    eax,0xb
c0008416:	56                   	push   esi
c0008417:	53                   	push   ebx
c0008418:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000841c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008420:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008427:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000842b:	83 f9 19             	cmp    ecx,0x19
c000842e:	77 37                	ja     c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008430:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008437:	85 c9                	test   ecx,ecx
c0008439:	74 2c                	je     c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000843b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008441:	85 c9                	test   ecx,ecx
c0008443:	74 22                	je     c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008445:	b8 06 00 00 00       	mov    eax,0x6
c000844a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000844e:	75 17                	jne    c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008450:	8b 39                	mov    edi,DWORD PTR [ecx]
c0008452:	89 f0                	mov    eax,esi
c0008454:	83 c2 0d             	add    edx,0xd
c0008457:	0f b6 f0             	movzx  esi,al
c000845a:	0f b6 db             	movzx  ebx,bl
c000845d:	56                   	push   esi
c000845e:	53                   	push   ebx
c000845f:	52                   	push   edx
c0008460:	51                   	push   ecx
c0008461:	ff 57 38             	call   DWORD PTR [edi+0x38]
c0008464:	83 c4 10             	add    esp,0x10
c0008467:	5b                   	pop    ebx
c0008468:	5e                   	pop    esi
c0008469:	5f                   	pop    edi
c000846a:	c3                   	ret    
c000846b:	90                   	nop

c000846c <File::exists()>:
c000846c:	83 ec 0c             	sub    esp,0xc
c000846f:	31 c0                	xor    eax,eax
c0008471:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008475:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000847c:	83 f9 19             	cmp    ecx,0x19
c000847f:	77 24                	ja     c00084a5 <File::exists()+0x39>
c0008481:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008488:	85 c9                	test   ecx,ecx
c000848a:	74 19                	je     c00084a5 <File::exists()+0x39>
c000848c:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008492:	85 c9                	test   ecx,ecx
c0008494:	74 0f                	je     c00084a5 <File::exists()+0x39>
c0008496:	83 c2 0d             	add    edx,0xd
c0008499:	50                   	push   eax
c000849a:	50                   	push   eax
c000849b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000849d:	52                   	push   edx
c000849e:	51                   	push   ecx
c000849f:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00084a2:	83 c4 10             	add    esp,0x10
c00084a5:	83 c4 0c             	add    esp,0xc
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <File::stat(unsigned long long*, bool*)>:
c00084aa:	56                   	push   esi
c00084ab:	53                   	push   ebx
c00084ac:	50                   	push   eax
c00084ad:	b8 0b 00 00 00       	mov    eax,0xb
c00084b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00084b6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084ba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00084c1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00084c5:	83 f9 19             	cmp    ecx,0x19
c00084c8:	77 3d                	ja     c0008507 <File::stat(unsigned long long*, bool*)+0x5d>
c00084ca:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00084d1:	85 c9                	test   ecx,ecx
c00084d3:	74 32                	je     c0008507 <File::stat(unsigned long long*, bool*)+0x5d>
c00084d5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00084db:	85 c9                	test   ecx,ecx
c00084dd:	74 28                	je     c0008507 <File::stat(unsigned long long*, bool*)+0x5d>
c00084df:	8b 01                	mov    eax,DWORD PTR [ecx]
c00084e1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00084e5:	74 13                	je     c00084fa <File::stat(unsigned long long*, bool*)+0x50>
c00084e7:	83 ec 04             	sub    esp,0x4
c00084ea:	56                   	push   esi
c00084eb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00084f1:	51                   	push   ecx
c00084f2:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00084f5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00084f8:	eb 0a                	jmp    c0008504 <File::stat(unsigned long long*, bool*)+0x5a>
c00084fa:	53                   	push   ebx
c00084fb:	83 c2 0d             	add    edx,0xd
c00084fe:	56                   	push   esi
c00084ff:	52                   	push   edx
c0008500:	51                   	push   ecx
c0008501:	ff 50 34             	call   DWORD PTR [eax+0x34]
c0008504:	83 c4 10             	add    esp,0x10
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	c3                   	ret    

c000850b <Fs::setcwd(Process*, char*)>:
c000850b:	55                   	push   ebp
c000850c:	57                   	push   edi
c000850d:	56                   	push   esi
c000850e:	53                   	push   ebx
c000850f:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0008515:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000851c:	6a 00                	push   0x0
c000851e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0008524:	57                   	push   edi
c0008525:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000852c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0008530:	56                   	push   esi
c0008531:	e8 3c f9 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008536:	89 34 24             	mov    DWORD PTR [esp],esi
c0008539:	e8 32 80 ff ff       	call   c0000570 <strlen>
c000853e:	83 c4 10             	add    esp,0x10
c0008541:	83 f8 02             	cmp    eax,0x2
c0008544:	77 15                	ja     c000855b <Fs::setcwd(Process*, char*)+0x50>
c0008546:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000854b:	83 eb 41             	sub    ebx,0x41
c000854e:	8b 04 9d e0 ca 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3520]
c0008555:	85 c0                	test   eax,eax
c0008557:	75 1c                	jne    c0008575 <Fs::setcwd(Process*, char*)+0x6a>
c0008559:	eb 2f                	jmp    c000858a <Fs::setcwd(Process*, char*)+0x7f>
c000855b:	83 ec 0c             	sub    esp,0xc
c000855e:	56                   	push   esi
c000855f:	e8 0c 80 ff ff       	call   c0000570 <strlen>
c0008564:	83 c4 10             	add    esp,0x10
c0008567:	83 f8 03             	cmp    eax,0x3
c000856a:	75 57                	jne    c00085c3 <Fs::setcwd(Process*, char*)+0xb8>
c000856c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008571:	75 50                	jne    c00085c3 <Fs::setcwd(Process*, char*)+0xb8>
c0008573:	eb d1                	jmp    c0008546 <Fs::setcwd(Process*, char*)+0x3b>
c0008575:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000857c:	75 0c                	jne    c000858a <Fs::setcwd(Process*, char*)+0x7f>
c000857e:	83 ec 0c             	sub    esp,0xc
c0008581:	50                   	push   eax
c0008582:	e8 5f 24 00 00       	call   c000a9e6 <LogicalDisk::mount()>
c0008587:	83 c4 10             	add    esp,0x10
c000858a:	b8 03 00 00 00       	mov    eax,0x3
c000858f:	83 fb 19             	cmp    ebx,0x19
c0008592:	0f 87 c6 00 00 00    	ja     c000865e <Fs::setcwd(Process*, char*)+0x153>
c0008598:	8b 14 9d e0 ca 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd3520]
c000859f:	b8 05 00 00 00       	mov    eax,0x5
c00085a4:	85 d2                	test   edx,edx
c00085a6:	0f 84 b2 00 00 00    	je     c000865e <Fs::setcwd(Process*, char*)+0x153>
c00085ac:	b8 06 00 00 00       	mov    eax,0x6
c00085b1:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c00085b8:	0f 85 92 00 00 00    	jne    c0008650 <Fs::setcwd(Process*, char*)+0x145>
c00085be:	e9 9b 00 00 00       	jmp    c000865e <Fs::setcwd(Process*, char*)+0x153>
c00085c3:	83 ec 0c             	sub    esp,0xc
c00085c6:	68 14 01 00 00       	push   0x114
c00085cb:	e8 93 71 00 00       	call   c000f763 <malloc>
c00085d0:	83 c4 0c             	add    esp,0xc
c00085d3:	89 c3                	mov    ebx,eax
c00085d5:	55                   	push   ebp
c00085d6:	56                   	push   esi
c00085d7:	50                   	push   eax
c00085d8:	e8 ad fb ff ff       	call   c000818a <File::File(char const*, Process*)>
c00085dd:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00085e2:	83 c4 0c             	add    esp,0xc
c00085e5:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00085e9:	50                   	push   eax
c00085ea:	8d 44 24 10          	lea    eax,[esp+0x10]
c00085ee:	50                   	push   eax
c00085ef:	53                   	push   ebx
c00085f0:	e8 b5 fe ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00085f5:	83 c4 10             	add    esp,0x10
c00085f8:	83 f8 02             	cmp    eax,0x2
c00085fb:	74 27                	je     c0008624 <Fs::setcwd(Process*, char*)+0x119>
c00085fd:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0008602:	75 1c                	jne    c0008620 <Fs::setcwd(Process*, char*)+0x115>
c0008604:	b8 02 00 00 00       	mov    eax,0x2
c0008609:	85 db                	test   ebx,ebx
c000860b:	74 51                	je     c000865e <Fs::setcwd(Process*, char*)+0x153>
c000860d:	83 ec 0c             	sub    esp,0xc
c0008610:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008612:	53                   	push   ebx
c0008613:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008616:	83 c4 10             	add    esp,0x10
c0008619:	b8 02 00 00 00       	mov    eax,0x2
c000861e:	eb 3e                	jmp    c000865e <Fs::setcwd(Process*, char*)+0x153>
c0008620:	85 c0                	test   eax,eax
c0008622:	74 1c                	je     c0008640 <Fs::setcwd(Process*, char*)+0x135>
c0008624:	b8 01 00 00 00       	mov    eax,0x1
c0008629:	85 db                	test   ebx,ebx
c000862b:	74 31                	je     c000865e <Fs::setcwd(Process*, char*)+0x153>
c000862d:	83 ec 0c             	sub    esp,0xc
c0008630:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008632:	53                   	push   ebx
c0008633:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008636:	83 c4 10             	add    esp,0x10
c0008639:	b8 01 00 00 00       	mov    eax,0x1
c000863e:	eb 1e                	jmp    c000865e <Fs::setcwd(Process*, char*)+0x153>
c0008640:	85 db                	test   ebx,ebx
c0008642:	74 0c                	je     c0008650 <Fs::setcwd(Process*, char*)+0x145>
c0008644:	83 ec 0c             	sub    esp,0xc
c0008647:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008649:	53                   	push   ebx
c000864a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000864d:	83 c4 10             	add    esp,0x10
c0008650:	50                   	push   eax
c0008651:	50                   	push   eax
c0008652:	56                   	push   esi
c0008653:	57                   	push   edi
c0008654:	e8 e7 7f ff ff       	call   c0000640 <strcpy>
c0008659:	83 c4 10             	add    esp,0x10
c000865c:	31 c0                	xor    eax,eax
c000865e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0008664:	5b                   	pop    ebx
c0008665:	5e                   	pop    esi
c0008666:	5f                   	pop    edi
c0008667:	5d                   	pop    ebp
c0008668:	c3                   	ret    
c0008669:	90                   	nop

c000866a <Directory::Directory(char const*, Process*)>:
c000866a:	83 ec 0c             	sub    esp,0xc
c000866d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008671:	83 ec 08             	sub    esp,0x8
c0008674:	6a 00                	push   0x0
c0008676:	50                   	push   eax
c0008677:	e8 24 a7 00 00       	call   c0012da0 <UnixFile::UnixFile(int)>
c000867c:	83 c4 10             	add    esp,0x10
c000867f:	ba 78 3b 02 c0       	mov    edx,0xc0023b78
c0008684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008688:	89 10                	mov    DWORD PTR [eax],edx
c000868a:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c000868f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008693:	0f 95 c0             	setne  al
c0008696:	0f b6 c0             	movzx  eax,al
c0008699:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000869d:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00086a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00086a7:	83 c2 0d             	add    edx,0xd
c00086aa:	50                   	push   eax
c00086ab:	51                   	push   ecx
c00086ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00086b0:	52                   	push   edx
c00086b1:	e8 bc f7 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00086b6:	83 c4 10             	add    esp,0x10
c00086b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086bd:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00086c0:	83 e8 41             	sub    eax,0x41
c00086c3:	88 c2                	mov    dl,al
c00086c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086c9:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00086cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086d3:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00086d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086db:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086e1:	0f b6 c0             	movzx  eax,al
c00086e4:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c00086eb:	85 c0                	test   eax,eax
c00086ed:	74 3e                	je     c000872d <Directory::Directory(char const*, Process*)+0xc3>
c00086ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086f3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086f9:	0f b6 c0             	movzx  eax,al
c00086fc:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008703:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008709:	85 c0                	test   eax,eax
c000870b:	75 20                	jne    c000872d <Directory::Directory(char const*, Process*)+0xc3>
c000870d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008711:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008717:	0f b6 c0             	movzx  eax,al
c000871a:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008721:	83 ec 0c             	sub    esp,0xc
c0008724:	50                   	push   eax
c0008725:	e8 bc 22 00 00       	call   c000a9e6 <LogicalDisk::mount()>
c000872a:	83 c4 10             	add    esp,0x10
c000872d:	90                   	nop
c000872e:	83 c4 0c             	add    esp,0xc
c0008731:	c3                   	ret    

c0008732 <Directory::open()>:
c0008732:	53                   	push   ebx
c0008733:	b8 0b 00 00 00       	mov    eax,0xb
c0008738:	83 ec 08             	sub    esp,0x8
c000873b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000873f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008746:	83 fa 19             	cmp    edx,0x19
c0008749:	77 3d                	ja     c0008788 <Directory::open()+0x56>
c000874b:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c0008752:	85 d2                	test   edx,edx
c0008754:	74 32                	je     c0008788 <Directory::open()+0x56>
c0008756:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000875c:	85 d2                	test   edx,edx
c000875e:	74 28                	je     c0008788 <Directory::open()+0x56>
c0008760:	b8 06 00 00 00       	mov    eax,0x6
c0008765:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008769:	75 1d                	jne    c0008788 <Directory::open()+0x56>
c000876b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008771:	50                   	push   eax
c0008772:	8b 02                	mov    eax,DWORD PTR [edx]
c0008774:	51                   	push   ecx
c0008775:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008778:	51                   	push   ecx
c0008779:	52                   	push   edx
c000877a:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000877d:	83 c4 10             	add    esp,0x10
c0008780:	85 c0                	test   eax,eax
c0008782:	75 04                	jne    c0008788 <Directory::open()+0x56>
c0008784:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008788:	83 c4 08             	add    esp,0x8
c000878b:	5b                   	pop    ebx
c000878c:	c3                   	ret    
c000878d:	90                   	nop

c000878e <Directory::close()>:
c000878e:	53                   	push   ebx
c000878f:	b8 0b 00 00 00       	mov    eax,0xb
c0008794:	83 ec 08             	sub    esp,0x8
c0008797:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000879b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a2:	83 f9 19             	cmp    ecx,0x19
c00087a5:	77 41                	ja     c00087e8 <Directory::close()+0x5a>
c00087a7:	8b 1c 8d e0 ca 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd3520]
c00087ae:	85 db                	test   ebx,ebx
c00087b0:	74 36                	je     c00087e8 <Directory::close()+0x5a>
c00087b2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00087b9:	74 2d                	je     c00087e8 <Directory::close()+0x5a>
c00087bb:	b8 05 00 00 00       	mov    eax,0x5
c00087c0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087c4:	74 22                	je     c00087e8 <Directory::close()+0x5a>
c00087c6:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00087ca:	8b 04 8d e0 ca 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd3520]
c00087d1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00087d7:	53                   	push   ebx
c00087d8:	53                   	push   ebx
c00087d9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00087db:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00087e1:	50                   	push   eax
c00087e2:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c00087e5:	83 c4 10             	add    esp,0x10
c00087e8:	83 c4 08             	add    esp,0x8
c00087eb:	5b                   	pop    ebx
c00087ec:	c3                   	ret    
c00087ed:	90                   	nop

c00087ee <Directory::unlink()>:
c00087ee:	83 ec 0c             	sub    esp,0xc
c00087f1:	b8 0b 00 00 00       	mov    eax,0xb
c00087f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008801:	83 f9 19             	cmp    ecx,0x19
c0008804:	77 2f                	ja     c0008835 <Directory::unlink()+0x47>
c0008806:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c000880d:	85 c9                	test   ecx,ecx
c000880f:	74 24                	je     c0008835 <Directory::unlink()+0x47>
c0008811:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008817:	85 c9                	test   ecx,ecx
c0008819:	74 1a                	je     c0008835 <Directory::unlink()+0x47>
c000881b:	b8 06 00 00 00       	mov    eax,0x6
c0008820:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008824:	75 0f                	jne    c0008835 <Directory::unlink()+0x47>
c0008826:	83 c2 0d             	add    edx,0xd
c0008829:	50                   	push   eax
c000882a:	50                   	push   eax
c000882b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000882d:	52                   	push   edx
c000882e:	51                   	push   ecx
c000882f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008832:	83 c4 10             	add    esp,0x10
c0008835:	83 c4 0c             	add    esp,0xc
c0008838:	c3                   	ret    
c0008839:	90                   	nop

c000883a <Directory::rename(char const*)>:
c000883a:	83 ec 0c             	sub    esp,0xc
c000883d:	b8 0b 00 00 00       	mov    eax,0xb
c0008842:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008846:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000884d:	83 f9 19             	cmp    ecx,0x19
c0008850:	77 32                	ja     c0008884 <Directory::rename(char const*)+0x4a>
c0008852:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008859:	85 c9                	test   ecx,ecx
c000885b:	74 27                	je     c0008884 <Directory::rename(char const*)+0x4a>
c000885d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008863:	85 c9                	test   ecx,ecx
c0008865:	74 1d                	je     c0008884 <Directory::rename(char const*)+0x4a>
c0008867:	b8 06 00 00 00       	mov    eax,0x6
c000886c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008870:	75 12                	jne    c0008884 <Directory::rename(char const*)+0x4a>
c0008872:	83 c2 0d             	add    edx,0xd
c0008875:	50                   	push   eax
c0008876:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008878:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000887c:	52                   	push   edx
c000887d:	51                   	push   ecx
c000887e:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008881:	83 c4 10             	add    esp,0x10
c0008884:	83 c4 0c             	add    esp,0xc
c0008887:	c3                   	ret    

c0008888 <Directory::exists()>:
c0008888:	83 ec 0c             	sub    esp,0xc
c000888b:	31 c0                	xor    eax,eax
c000888d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008891:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008898:	83 f9 19             	cmp    ecx,0x19
c000889b:	77 24                	ja     c00088c1 <Directory::exists()+0x39>
c000889d:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00088a4:	85 c9                	test   ecx,ecx
c00088a6:	74 19                	je     c00088c1 <Directory::exists()+0x39>
c00088a8:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088ae:	85 c9                	test   ecx,ecx
c00088b0:	74 0f                	je     c00088c1 <Directory::exists()+0x39>
c00088b2:	83 c2 0d             	add    edx,0xd
c00088b5:	50                   	push   eax
c00088b6:	50                   	push   eax
c00088b7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088b9:	52                   	push   edx
c00088ba:	51                   	push   ecx
c00088bb:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00088be:	83 c4 10             	add    esp,0x10
c00088c1:	83 c4 0c             	add    esp,0xc
c00088c4:	c3                   	ret    
c00088c5:	90                   	nop

c00088c6 <Directory::read(dirent*)>:
c00088c6:	83 ec 1c             	sub    esp,0x1c
c00088c9:	b8 0b 00 00 00       	mov    eax,0xb
c00088ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00088d2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088d9:	83 f9 19             	cmp    ecx,0x19
c00088dc:	77 30                	ja     c000890e <Directory::read(dirent*)+0x48>
c00088de:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00088e5:	85 c9                	test   ecx,ecx
c00088e7:	74 25                	je     c000890e <Directory::read(dirent*)+0x48>
c00088e9:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c00088f0:	74 1c                	je     c000890e <Directory::read(dirent*)+0x48>
c00088f2:	83 ec 0c             	sub    esp,0xc
c00088f5:	8b 02                	mov    eax,DWORD PTR [edx]
c00088f7:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00088fb:	51                   	push   ecx
c00088fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0008900:	6a 00                	push   0x0
c0008902:	68 10 01 00 00       	push   0x110
c0008907:	52                   	push   edx
c0008908:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000890b:	83 c4 20             	add    esp,0x20
c000890e:	83 c4 1c             	add    esp,0x1c
c0008911:	c3                   	ret    

c0008912 <Directory::create()>:
c0008912:	83 ec 0c             	sub    esp,0xc
c0008915:	b8 0b 00 00 00       	mov    eax,0xb
c000891a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000891e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008925:	83 f9 19             	cmp    ecx,0x19
c0008928:	77 2f                	ja     c0008959 <Directory::create()+0x47>
c000892a:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008931:	85 c9                	test   ecx,ecx
c0008933:	74 24                	je     c0008959 <Directory::create()+0x47>
c0008935:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000893b:	85 c9                	test   ecx,ecx
c000893d:	74 1a                	je     c0008959 <Directory::create()+0x47>
c000893f:	b8 06 00 00 00       	mov    eax,0x6
c0008944:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008948:	75 0f                	jne    c0008959 <Directory::create()+0x47>
c000894a:	83 c2 0d             	add    edx,0xd
c000894d:	50                   	push   eax
c000894e:	50                   	push   eax
c000894f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008951:	52                   	push   edx
c0008952:	51                   	push   ecx
c0008953:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0008956:	83 c4 10             	add    esp,0x10
c0008959:	83 c4 0c             	add    esp,0xc
c000895c:	c3                   	ret    
c000895d:	90                   	nop

c000895e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000895e:	b8 0a 00 00 00       	mov    eax,0xa
c0008963:	c3                   	ret    

c0008964 <Bus::Bus(char const*)>:
c0008964:	83 ec 0c             	sub    esp,0xc
c0008967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000896b:	83 ec 08             	sub    esp,0x8
c000896e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008972:	50                   	push   eax
c0008973:	e8 3e 12 00 00       	call   c0009bb6 <Device::Device(char const*)>
c0008978:	83 c4 10             	add    esp,0x10
c000897b:	ba 94 3b 02 c0       	mov    edx,0xc0023b94
c0008980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008984:	89 10                	mov    DWORD PTR [eax],edx
c0008986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008994:	90                   	nop
c0008995:	83 c4 0c             	add    esp,0xc
c0008998:	c3                   	ret    
c0008999:	90                   	nop
c000899a:	66 90                	xchg   ax,ax

c000899c <Bus::~Bus()>:
c000899c:	83 ec 0c             	sub    esp,0xc
c000899f:	ba 94 3b 02 c0       	mov    edx,0xc0023b94
c00089a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089a8:	89 10                	mov    DWORD PTR [eax],edx
c00089aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ae:	83 ec 0c             	sub    esp,0xc
c00089b1:	50                   	push   eax
c00089b2:	e8 9f 0f 00 00       	call   c0009956 <Device::~Device()>
c00089b7:	83 c4 10             	add    esp,0x10
c00089ba:	90                   	nop
c00089bb:	83 c4 0c             	add    esp,0xc
c00089be:	c3                   	ret    
c00089bf:	90                   	nop

c00089c0 <Bus::~Bus()>:
c00089c0:	83 ec 0c             	sub    esp,0xc
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089ca:	e8 cd ff ff ff       	call   c000899c <Bus::~Bus()>
c00089cf:	83 c4 10             	add    esp,0x10
c00089d2:	83 ec 08             	sub    esp,0x8
c00089d5:	68 58 01 00 00       	push   0x158
c00089da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089de:	e8 99 48 00 00       	call   c000d27c <operator delete(void*, unsigned long)>
c00089e3:	83 c4 10             	add    esp,0x10
c00089e6:	83 c4 0c             	add    esp,0xc
c00089e9:	c3                   	ret    

c00089ea <KeBeepThread(void*)>:
c00089ea:	83 ec 0c             	sub    esp,0xc
c00089ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089f1:	f0 ff 0d 70 da 02 c0 	lock dec DWORD PTR ds:0xc002da70
c00089f8:	83 3d 70 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da70,0x0
c00089ff:	75 01                	jne    c0008a02 <KeBeepThread(void*)+0x18>
c0008a01:	fb                   	sti    
c0008a02:	6b c0 0a             	imul   eax,eax,0xa
c0008a05:	52                   	push   edx
c0008a06:	52                   	push   edx
c0008a07:	99                   	cdq    
c0008a08:	52                   	push   edx
c0008a09:	50                   	push   eax
c0008a0a:	e8 09 ed 00 00       	call   c0017718 <milliTenthSleep(unsigned long long)>
c0008a0f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a16:	e8 86 23 01 00       	call   c001ada1 <HalMakeBeep(int)>
c0008a1b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0008a23:	83 c4 1c             	add    esp,0x1c
c0008a26:	e9 b9 eb 00 00       	jmp    c00175e4 <blockTask(TaskState)>

c0008a2b <KeBeep(int, int, bool)>:
c0008a2b:	56                   	push   esi
c0008a2c:	53                   	push   ebx
c0008a2d:	83 ec 10             	sub    esp,0x10
c0008a30:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a34:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a3c:	e8 60 23 01 00       	call   c001ada1 <HalMakeBeep(int)>
c0008a41:	83 c4 10             	add    esp,0x10
c0008a44:	89 f0                	mov    eax,esi
c0008a46:	84 c0                	test   al,al
c0008a48:	74 1f                	je     c0008a69 <KeBeep(int, int, bool)+0x3e>
c0008a4a:	50                   	push   eax
c0008a4b:	50                   	push   eax
c0008a4c:	6b c3 0a             	imul   eax,ebx,0xa
c0008a4f:	99                   	cdq    
c0008a50:	52                   	push   edx
c0008a51:	50                   	push   eax
c0008a52:	e8 c1 ec 00 00       	call   c0017718 <milliTenthSleep(unsigned long long)>
c0008a57:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a5f:	83 c4 14             	add    esp,0x14
c0008a62:	5b                   	pop    ebx
c0008a63:	5e                   	pop    esi
c0008a64:	e9 38 23 01 00       	jmp    c001ada1 <HalMakeBeep(int)>
c0008a69:	68 e6 00 00 00       	push   0xe6
c0008a6e:	53                   	push   ebx
c0008a6f:	68 ea 89 00 c0       	push   0xc00089ea
c0008a74:	ff 35 98 da 02 c0    	push   DWORD PTR ds:0xc002da98
c0008a7a:	e8 e5 e7 00 00       	call   c0017264 <Process::createThread(void (*)(void*), void*, int)>
c0008a7f:	83 c4 14             	add    esp,0x14
c0008a82:	5b                   	pop    ebx
c0008a83:	5e                   	pop    esi
c0008a84:	c3                   	ret    
c0008a85:	90                   	nop

c0008a86 <KeLoadTimezoneStrings()>:
c0008a86:	55                   	push   ebp
c0008a87:	89 e5                	mov    ebp,esp
c0008a89:	53                   	push   ebx
c0008a8a:	83 ec 44             	sub    esp,0x44
c0008a8d:	c6 05 20 c3 02 c0 01 	mov    BYTE PTR ds:0xc002c320,0x1
c0008a94:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c0008a9b:	83 ec 0c             	sub    esp,0xc
c0008a9e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0008aa1:	e8 bd 6c 00 00       	call   c000f763 <malloc>
c0008aa6:	83 c4 10             	add    esp,0x10
c0008aa9:	89 c3                	mov    ebx,eax
c0008aab:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c0008ab0:	83 ec 04             	sub    esp,0x4
c0008ab3:	50                   	push   eax
c0008ab4:	68 c0 3b 02 c0       	push   0xc0023bc0
c0008ab9:	53                   	push   ebx
c0008aba:	e8 cb f6 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0008abf:	83 c4 10             	add    esp,0x10
c0008ac2:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0008ac5:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008ac9:	75 10                	jne    c0008adb <KeLoadTimezoneStrings()+0x55>
c0008acb:	83 ec 0c             	sub    esp,0xc
c0008ace:	68 df 3b 02 c0       	push   0xc0023bdf
c0008ad3:	e8 e8 70 00 00       	call   c000fbc0 <KePanic(char const*)>
c0008ad8:	83 c4 10             	add    esp,0x10
c0008adb:	83 ec 08             	sub    esp,0x8
c0008ade:	6a 01                	push   0x1
c0008ae0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ae3:	e8 c0 f6 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0008ae8:	83 c4 10             	add    esp,0x10
c0008aeb:	83 ec 04             	sub    esp,0x4
c0008aee:	8d 45 cf             	lea    eax,[ebp-0x31]
c0008af1:	50                   	push   eax
c0008af2:	8d 45 d0             	lea    eax,[ebp-0x30]
c0008af5:	50                   	push   eax
c0008af6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008af9:	e8 ac f9 ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b04:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b07:	83 ec 08             	sub    esp,0x8
c0008b0a:	50                   	push   eax
c0008b0b:	68 f5 3b 02 c0       	push   0xc0023bf5
c0008b10:	e8 67 e4 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008b15:	83 c4 10             	add    esp,0x10
c0008b18:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b1b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b1e:	83 c0 01             	add    eax,0x1
c0008b21:	83 ec 0c             	sub    esp,0xc
c0008b24:	50                   	push   eax
c0008b25:	e8 39 6c 00 00       	call   c000f763 <malloc>
c0008b2a:	83 c4 10             	add    esp,0x10
c0008b2d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0008b30:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b33:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b36:	83 ec 04             	sub    esp,0x4
c0008b39:	50                   	push   eax
c0008b3a:	6a 00                	push   0x0
c0008b3c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b3f:	e8 ac 79 ff ff       	call   c00004f0 <memset>
c0008b44:	83 c4 10             	add    esp,0x10
c0008b47:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b4c:	83 c0 0c             	add    eax,0xc
c0008b4f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008b51:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b54:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b57:	83 ec 0c             	sub    esp,0xc
c0008b5a:	8d 5d c8             	lea    ebx,[ebp-0x38]
c0008b5d:	53                   	push   ebx
c0008b5e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b61:	52                   	push   edx
c0008b62:	50                   	push   eax
c0008b63:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b66:	ff d1                	call   ecx
c0008b68:	83 c4 20             	add    esp,0x20
c0008b6b:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0008b6e:	83 ec 08             	sub    esp,0x8
c0008b71:	50                   	push   eax
c0008b72:	68 05 3c 02 c0       	push   0xc0023c05
c0008b77:	e8 00 e4 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008b7c:	83 c4 10             	add    esp,0x10
c0008b7f:	83 ec 0c             	sub    esp,0xc
c0008b82:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b85:	e8 7c f6 ff ff       	call   c0008206 <File::close()>
c0008b8a:	83 c4 10             	add    esp,0x10
c0008b8d:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008b91:	74 15                	je     c0008ba8 <KeLoadTimezoneStrings()+0x122>
c0008b93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b96:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b98:	83 c0 08             	add    eax,0x8
c0008b9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b9d:	83 ec 0c             	sub    esp,0xc
c0008ba0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ba3:	ff d0                	call   eax
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0008baf:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0008bb6:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c0008bbd:	7f 3a                	jg     c0008bf9 <KeLoadTimezoneStrings()+0x173>
c0008bbf:	83 ec 0c             	sub    esp,0xc
c0008bc2:	6a 78                	push   0x78
c0008bc4:	e8 9a 6b 00 00       	call   c000f763 <malloc>
c0008bc9:	83 c4 10             	add    esp,0x10
c0008bcc:	89 c2                	mov    edx,eax
c0008bce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bd1:	89 14 85 40 c3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3cc0],edx
c0008bd8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bdb:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008be2:	83 ec 08             	sub    esp,0x8
c0008be5:	68 0e 3c 02 c0       	push   0xc0023c0e
c0008bea:	50                   	push   eax
c0008beb:	e8 50 7a ff ff       	call   c0000640 <strcpy>
c0008bf0:	83 c4 10             	add    esp,0x10
c0008bf3:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0008bf7:	eb bd                	jmp    c0008bb6 <KeLoadTimezoneStrings()+0x130>
c0008bf9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0008c00:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008c03:	8d 50 01             	lea    edx,[eax+0x1]
c0008c06:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0008c09:	89 c2                	mov    edx,eax
c0008c0b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0008c0e:	01 d0                	add    eax,edx
c0008c10:	8a 00                	mov    al,BYTE PTR [eax]
c0008c12:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c0008c15:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c0008c19:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c1c:	0f be c0             	movsx  eax,al
c0008c1f:	83 f8 0d             	cmp    eax,0xd
c0008c22:	0f 84 82 01 00 00    	je     c0008daa <KeLoadTimezoneStrings()+0x324>
c0008c28:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c2b:	0f be c0             	movsx  eax,al
c0008c2e:	83 f8 09             	cmp    eax,0x9
c0008c31:	75 44                	jne    c0008c77 <KeLoadTimezoneStrings()+0x1f1>
c0008c33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c36:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008c3d:	83 ec 0c             	sub    esp,0xc
c0008c40:	50                   	push   eax
c0008c41:	e8 2a 79 ff ff       	call   c0000570 <strlen>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	83 f8 08             	cmp    eax,0x8
c0008c4c:	0f 96 c0             	setbe  al
c0008c4f:	0f b6 c0             	movzx  eax,al
c0008c52:	85 c0                	test   eax,eax
c0008c54:	0f 84 56 01 00 00    	je     c0008db0 <KeLoadTimezoneStrings()+0x32a>
c0008c5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c5d:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008c64:	83 ec 08             	sub    esp,0x8
c0008c67:	68 0e 3c 02 c0       	push   0xc0023c0e
c0008c6c:	50                   	push   eax
c0008c6d:	e8 ce 7b ff ff       	call   c0000840 <strcat>
c0008c72:	83 c4 10             	add    esp,0x10
c0008c75:	eb bc                	jmp    c0008c33 <KeLoadTimezoneStrings()+0x1ad>
c0008c77:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c7a:	0f be c0             	movsx  eax,al
c0008c7d:	83 f8 0a             	cmp    eax,0xa
c0008c80:	0f 85 9b 00 00 00    	jne    c0008d21 <KeLoadTimezoneStrings()+0x29b>
c0008c86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c89:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008c90:	83 ec 0c             	sub    esp,0xc
c0008c93:	50                   	push   eax
c0008c94:	e8 d7 78 ff ff       	call   c0000570 <strlen>
c0008c99:	83 c4 10             	add    esp,0x10
c0008c9c:	83 f8 35             	cmp    eax,0x35
c0008c9f:	0f 96 c0             	setbe  al
c0008ca2:	0f b6 c0             	movzx  eax,al
c0008ca5:	85 c0                	test   eax,eax
c0008ca7:	74 1d                	je     c0008cc6 <KeLoadTimezoneStrings()+0x240>
c0008ca9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008cac:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008cb3:	83 ec 08             	sub    esp,0x8
c0008cb6:	68 0e 3c 02 c0       	push   0xc0023c0e
c0008cbb:	50                   	push   eax
c0008cbc:	e8 7f 7b ff ff       	call   c0000840 <strcat>
c0008cc1:	83 c4 10             	add    esp,0x10
c0008cc4:	eb c0                	jmp    c0008c86 <KeLoadTimezoneStrings()+0x200>
c0008cc6:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0008cca:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008ccd:	89 c2                	mov    edx,eax
c0008ccf:	c1 fa 1f             	sar    edx,0x1f
c0008cd2:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0008cd5:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0008cd8:	39 c8                	cmp    eax,ecx
c0008cda:	89 d0                	mov    eax,edx
c0008cdc:	19 d8                	sbb    eax,ebx
c0008cde:	0f 82 d2 00 00 00    	jb     c0008db6 <KeLoadTimezoneStrings()+0x330>
c0008ce4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008ce7:	a3 24 c3 02 c0       	mov    ds:0xc002c324,eax
c0008cec:	83 ec 08             	sub    esp,0x8
c0008cef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008cf2:	68 10 3c 02 c0       	push   0xc0023c10
c0008cf7:	e8 80 e2 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008cfc:	83 c4 10             	add    esp,0x10
c0008cff:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008d04:	83 ec 08             	sub    esp,0x8
c0008d07:	50                   	push   eax
c0008d08:	68 25 3c 02 c0       	push   0xc0023c25
c0008d0d:	e8 6a e2 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008d12:	83 c4 10             	add    esp,0x10
c0008d15:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0008d1c:	e9 9b 00 00 00       	jmp    c0008dbc <KeLoadTimezoneStrings()+0x336>
c0008d21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d24:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d2b:	83 ec 0c             	sub    esp,0xc
c0008d2e:	50                   	push   eax
c0008d2f:	e8 3c 78 ff ff       	call   c0000570 <strlen>
c0008d34:	83 c4 10             	add    esp,0x10
c0008d37:	83 f8 31             	cmp    eax,0x31
c0008d3a:	0f 96 c0             	setbe  al
c0008d3d:	0f b6 c0             	movzx  eax,al
c0008d40:	85 c0                	test   eax,eax
c0008d42:	74 1f                	je     c0008d63 <KeLoadTimezoneStrings()+0x2dd>
c0008d44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d47:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d4e:	83 ec 08             	sub    esp,0x8
c0008d51:	8d 55 c6             	lea    edx,[ebp-0x3a]
c0008d54:	52                   	push   edx
c0008d55:	50                   	push   eax
c0008d56:	e8 e5 7a ff ff       	call   c0000840 <strcat>
c0008d5b:	83 c4 10             	add    esp,0x10
c0008d5e:	e9 9d fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008d63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d66:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d6d:	83 ec 0c             	sub    esp,0xc
c0008d70:	50                   	push   eax
c0008d71:	e8 fa 77 ff ff       	call   c0000570 <strlen>
c0008d76:	83 c4 10             	add    esp,0x10
c0008d79:	83 f8 32             	cmp    eax,0x32
c0008d7c:	0f 94 c0             	sete   al
c0008d7f:	0f b6 c0             	movzx  eax,al
c0008d82:	85 c0                	test   eax,eax
c0008d84:	0f 84 76 fe ff ff    	je     c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008d8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d8d:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d94:	83 ec 08             	sub    esp,0x8
c0008d97:	68 29 3c 02 c0       	push   0xc0023c29
c0008d9c:	50                   	push   eax
c0008d9d:	e8 9e 7a ff ff       	call   c0000840 <strcat>
c0008da2:	83 c4 10             	add    esp,0x10
c0008da5:	e9 56 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008daa:	90                   	nop
c0008dab:	e9 50 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008db0:	90                   	nop
c0008db1:	e9 4a fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008db6:	90                   	nop
c0008db7:	e9 44 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008dbc:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008dc1:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008dc4:	7d 49                	jge    c0008e0f <KeLoadTimezoneStrings()+0x389>
c0008dc6:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008dcb:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008dce:	0f 9c c0             	setl   al
c0008dd1:	0f b6 d0             	movzx  edx,al
c0008dd4:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008dd9:	52                   	push   edx
c0008dda:	50                   	push   eax
c0008ddb:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dde:	68 2e 3c 02 c0       	push   0xc0023c2e
c0008de3:	e8 94 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008de8:	83 c4 10             	add    esp,0x10
c0008deb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0008dee:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008df5:	83 ec 04             	sub    esp,0x4
c0008df8:	50                   	push   eax
c0008df9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dfc:	68 3c 3c 02 c0       	push   0xc0023c3c
c0008e01:	e8 76 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e06:	83 c4 10             	add    esp,0x10
c0008e09:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c0008e0d:	eb ad                	jmp    c0008dbc <KeLoadTimezoneStrings()+0x336>
c0008e0f:	90                   	nop
c0008e10:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0008e13:	c9                   	leave  
c0008e14:	c3                   	ret    

c0008e15 <KeGetTimezoneStringFromID(int)>:
c0008e15:	55                   	push   ebp
c0008e16:	89 e5                	mov    ebp,esp
c0008e18:	83 ec 08             	sub    esp,0x8
c0008e1b:	83 ec 08             	sub    esp,0x8
c0008e1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e21:	68 45 3c 02 c0       	push   0xc0023c45
c0008e26:	e8 51 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e2b:	83 c4 10             	add    esp,0x10
c0008e2e:	a0 20 c3 02 c0       	mov    al,ds:0xc002c320
c0008e33:	83 f0 01             	xor    eax,0x1
c0008e36:	0f b6 c0             	movzx  eax,al
c0008e39:	85 c0                	test   eax,eax
c0008e3b:	74 15                	je     c0008e52 <KeGetTimezoneStringFromID(int)+0x3d>
c0008e3d:	e8 44 fc ff ff       	call   c0008a86 <KeLoadTimezoneStrings()>
c0008e42:	83 ec 0c             	sub    esp,0xc
c0008e45:	68 63 3c 02 c0       	push   0xc0023c63
c0008e4a:	e8 2d e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008e57:	83 ec 04             	sub    esp,0x4
c0008e5a:	50                   	push   eax
c0008e5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e5e:	68 74 3c 02 c0       	push   0xc0023c74
c0008e63:	e8 14 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e68:	83 c4 10             	add    esp,0x10
c0008e6b:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008e70:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c0008e73:	7d 06                	jge    c0008e7b <KeGetTimezoneStringFromID(int)+0x66>
c0008e75:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0008e79:	79 07                	jns    c0008e82 <KeGetTimezoneStringFromID(int)+0x6d>
c0008e7b:	b8 00 00 00 00       	mov    eax,0x0
c0008e80:	eb 2e                	jmp    c0008eb0 <KeGetTimezoneStringFromID(int)+0x9b>
c0008e82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e85:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008e8c:	83 c0 01             	add    eax,0x1
c0008e8f:	83 ec 04             	sub    esp,0x4
c0008e92:	50                   	push   eax
c0008e93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e96:	68 87 3c 02 c0       	push   0xc0023c87
c0008e9b:	e8 dc e0 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ea6:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008ead:	83 c0 01             	add    eax,0x1
c0008eb0:	c9                   	leave  
c0008eb1:	c3                   	ret    

c0008eb2 <KeUpdateTimezone(char const*)>:
c0008eb2:	55                   	push   ebp
c0008eb3:	89 e5                	mov    ebp,esp
c0008eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eb8:	8a 00                	mov    al,BYTE PTR [eax]
c0008eba:	0f be c0             	movsx  eax,al
c0008ebd:	83 f8 2b             	cmp    eax,0x2b
c0008ec0:	74 11                	je     c0008ed3 <KeUpdateTimezone(char const*)+0x21>
c0008ec2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ec5:	8a 00                	mov    al,BYTE PTR [eax]
c0008ec7:	0f be c0             	movsx  eax,al
c0008eca:	83 f8 2d             	cmp    eax,0x2d
c0008ecd:	0f 85 be 00 00 00    	jne    c0008f91 <KeUpdateTimezone(char const*)+0xdf>
c0008ed3:	c6 05 60 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c660,0x0
c0008eda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008edd:	83 c0 02             	add    eax,0x2
c0008ee0:	8a 00                	mov    al,BYTE PTR [eax]
c0008ee2:	0f be c0             	movsx  eax,al
c0008ee5:	83 f8 2e             	cmp    eax,0x2e
c0008ee8:	75 10                	jne    c0008efa <KeUpdateTimezone(char const*)+0x48>
c0008eea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eed:	83 c0 03             	add    eax,0x3
c0008ef0:	8a 00                	mov    al,BYTE PTR [eax]
c0008ef2:	0f be c0             	movsx  eax,al
c0008ef5:	83 f8 35             	cmp    eax,0x35
c0008ef8:	74 20                	je     c0008f1a <KeUpdateTimezone(char const*)+0x68>
c0008efa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008efd:	83 c0 03             	add    eax,0x3
c0008f00:	8a 00                	mov    al,BYTE PTR [eax]
c0008f02:	0f be c0             	movsx  eax,al
c0008f05:	83 f8 2e             	cmp    eax,0x2e
c0008f08:	75 14                	jne    c0008f1e <KeUpdateTimezone(char const*)+0x6c>
c0008f0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f0d:	83 c0 04             	add    eax,0x4
c0008f10:	8a 00                	mov    al,BYTE PTR [eax]
c0008f12:	0f be c0             	movsx  eax,al
c0008f15:	83 f8 35             	cmp    eax,0x35
c0008f18:	75 04                	jne    c0008f1e <KeUpdateTimezone(char const*)+0x6c>
c0008f1a:	b0 01                	mov    al,0x1
c0008f1c:	eb 02                	jmp    c0008f20 <KeUpdateTimezone(char const*)+0x6e>
c0008f1e:	b0 00                	mov    al,0x0
c0008f20:	a2 61 c6 02 c0       	mov    ds:0xc002c661,al
c0008f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f28:	83 c0 01             	add    eax,0x1
c0008f2b:	8a 00                	mov    al,BYTE PTR [eax]
c0008f2d:	0f be c0             	movsx  eax,al
c0008f30:	83 e8 30             	sub    eax,0x30
c0008f33:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f3b:	83 c0 03             	add    eax,0x3
c0008f3e:	8a 00                	mov    al,BYTE PTR [eax]
c0008f40:	0f be c0             	movsx  eax,al
c0008f43:	83 f8 2e             	cmp    eax,0x2e
c0008f46:	75 2e                	jne    c0008f76 <KeUpdateTimezone(char const*)+0xc4>
c0008f48:	8b 15 64 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c664
c0008f4e:	89 d0                	mov    eax,edx
c0008f50:	c1 e0 02             	shl    eax,0x2
c0008f53:	01 d0                	add    eax,edx
c0008f55:	01 c0                	add    eax,eax
c0008f57:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5f:	83 c0 02             	add    eax,0x2
c0008f62:	8a 00                	mov    al,BYTE PTR [eax]
c0008f64:	0f be c0             	movsx  eax,al
c0008f67:	8d 50 d0             	lea    edx,[eax-0x30]
c0008f6a:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0008f6f:	01 d0                	add    eax,edx
c0008f71:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f79:	8a 00                	mov    al,BYTE PTR [eax]
c0008f7b:	0f be c0             	movsx  eax,al
c0008f7e:	83 f8 2d             	cmp    eax,0x2d
c0008f81:	75 26                	jne    c0008fa9 <KeUpdateTimezone(char const*)+0xf7>
c0008f83:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0008f88:	f7 d8                	neg    eax
c0008f8a:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f8f:	eb 18                	jmp    c0008fa9 <KeUpdateTimezone(char const*)+0xf7>
c0008f91:	c6 05 60 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c660,0x0
c0008f98:	c6 05 61 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c661,0x0
c0008f9f:	c7 05 64 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c664,0x0
c0008fa9:	90                   	nop
c0008faa:	5d                   	pop    ebp
c0008fab:	c3                   	ret    

c0008fac <KeSetTimezone(char const*)>:
c0008fac:	55                   	push   ebp
c0008fad:	89 e5                	mov    ebp,esp
c0008faf:	83 ec 18             	sub    esp,0x18
c0008fb2:	83 ec 0c             	sub    esp,0xc
c0008fb5:	68 94 3c 02 c0       	push   0xc0023c94
c0008fba:	e8 11 43 00 00       	call   c000d2d0 <CmOpen(char const*)>
c0008fbf:	83 c4 10             	add    esp,0x10
c0008fc2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008fc5:	83 ec 08             	sub    esp,0x8
c0008fc8:	68 b9 3c 02 c0       	push   0xc0023cb9
c0008fcd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fd0:	e8 fb 4e 00 00       	call   c000ded0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008fd5:	83 c4 10             	add    esp,0x10
c0008fd8:	83 ec 04             	sub    esp,0x4
c0008fdb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fde:	50                   	push   eax
c0008fdf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fe2:	e8 bb 47 00 00       	call   c000d7a2 <CmSetString(Reghive_Tag*, int, char const*)>
c0008fe7:	83 c4 10             	add    esp,0x10
c0008fea:	83 ec 0c             	sub    esp,0xc
c0008fed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008ff0:	e8 f9 43 00 00       	call   c000d3ee <CmClose(Reghive_Tag*)>
c0008ff5:	83 c4 10             	add    esp,0x10
c0008ff8:	83 ec 0c             	sub    esp,0xc
c0008ffb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008ffe:	e8 af fe ff ff       	call   c0008eb2 <KeUpdateTimezone(char const*)>
c0009003:	83 c4 10             	add    esp,0x10
c0009006:	90                   	nop
c0009007:	c9                   	leave  
c0009008:	c3                   	ret    

c0009009 <KeSetTimezone(int)>:
c0009009:	55                   	push   ebp
c000900a:	89 e5                	mov    ebp,esp
c000900c:	83 ec 18             	sub    esp,0x18
c000900f:	83 ec 0c             	sub    esp,0xc
c0009012:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009015:	e8 fb fd ff ff       	call   c0008e15 <KeGetTimezoneStringFromID(int)>
c000901a:	83 c4 10             	add    esp,0x10
c000901d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009020:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009024:	74 12                	je     c0009038 <KeSetTimezone(int)+0x2f>
c0009026:	83 ec 0c             	sub    esp,0xc
c0009029:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000902c:	e8 7b ff ff ff       	call   c0008fac <KeSetTimezone(char const*)>
c0009031:	83 c4 10             	add    esp,0x10
c0009034:	b0 01                	mov    al,0x1
c0009036:	eb 02                	jmp    c000903a <KeSetTimezone(int)+0x31>
c0009038:	b0 00                	mov    al,0x0
c000903a:	c9                   	leave  
c000903b:	c3                   	ret    

c000903c <KeLoadTimezone()>:
c000903c:	55                   	push   ebp
c000903d:	89 e5                	mov    ebp,esp
c000903f:	81 ec 68 02 00 00    	sub    esp,0x268
c0009045:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c000904c:	83 ec 0c             	sub    esp,0xc
c000904f:	68 94 3c 02 c0       	push   0xc0023c94
c0009054:	e8 77 42 00 00       	call   c000d2d0 <CmOpen(char const*)>
c0009059:	83 c4 10             	add    esp,0x10
c000905c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000905f:	83 ec 08             	sub    esp,0x8
c0009062:	68 b9 3c 02 c0       	push   0xc0023cb9
c0009067:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000906a:	e8 61 4e 00 00       	call   c000ded0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009075:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009079:	7e 18                	jle    c0009093 <KeLoadTimezone()+0x57>
c000907b:	83 ec 04             	sub    esp,0x4
c000907e:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009084:	50                   	push   eax
c0009085:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009088:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000908b:	e8 b0 43 00 00       	call   c000d440 <CmGetString(Reghive_Tag*, int, char*)>
c0009090:	83 c4 10             	add    esp,0x10
c0009093:	83 ec 0c             	sub    esp,0xc
c0009096:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009099:	e8 50 43 00 00       	call   c000d3ee <CmClose(Reghive_Tag*)>
c000909e:	83 c4 10             	add    esp,0x10
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c00090aa:	50                   	push   eax
c00090ab:	e8 02 fe ff ff       	call   c0008eb2 <KeUpdateTimezone(char const*)>
c00090b0:	83 c4 10             	add    esp,0x10
c00090b3:	90                   	nop
c00090b4:	c9                   	leave  
c00090b5:	c3                   	ret    

c00090b6 <Clock::Clock(char const*)>:
c00090b6:	83 ec 0c             	sub    esp,0xc
c00090b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090bd:	83 ec 08             	sub    esp,0x8
c00090c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c4:	50                   	push   eax
c00090c5:	e8 ec 0a 00 00       	call   c0009bb6 <Device::Device(char const*)>
c00090ca:	83 c4 10             	add    esp,0x10
c00090cd:	ba 18 3d 02 c0       	mov    edx,0xc0023d18
c00090d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d6:	89 10                	mov    DWORD PTR [eax],edx
c00090d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090dc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00090e6:	90                   	nop
c00090e7:	83 c4 0c             	add    esp,0xc
c00090ea:	c3                   	ret    
c00090eb:	90                   	nop

c00090ec <Clock::~Clock()>:
c00090ec:	83 ec 0c             	sub    esp,0xc
c00090ef:	ba 18 3d 02 c0       	mov    edx,0xc0023d18
c00090f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f8:	89 10                	mov    DWORD PTR [eax],edx
c00090fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090fe:	83 ec 0c             	sub    esp,0xc
c0009101:	50                   	push   eax
c0009102:	e8 4f 08 00 00       	call   c0009956 <Device::~Device()>
c0009107:	83 c4 10             	add    esp,0x10
c000910a:	90                   	nop
c000910b:	83 c4 0c             	add    esp,0xc
c000910e:	c3                   	ret    
c000910f:	90                   	nop

c0009110 <Clock::~Clock()>:
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	83 ec 0c             	sub    esp,0xc
c0009116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000911a:	e8 cd ff ff ff       	call   c00090ec <Clock::~Clock()>
c000911f:	83 c4 10             	add    esp,0x10
c0009122:	83 ec 08             	sub    esp,0x8
c0009125:	68 58 01 00 00       	push   0x158
c000912a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000912e:	e8 49 41 00 00       	call   c000d27c <operator delete(void*, unsigned long)>
c0009133:	83 c4 10             	add    esp,0x10
c0009136:	83 c4 0c             	add    esp,0xc
c0009139:	c3                   	ret    

c000913a <Clock::timeInSecondsLocal()>:
c000913a:	55                   	push   ebp
c000913b:	89 e5                	mov    ebp,esp
c000913d:	53                   	push   ebx
c000913e:	83 ec 04             	sub    esp,0x4
c0009141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009144:	8b 00                	mov    eax,DWORD PTR [eax]
c0009146:	83 c0 24             	add    eax,0x24
c0009149:	8b 00                	mov    eax,DWORD PTR [eax]
c000914b:	83 ec 0c             	sub    esp,0xc
c000914e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009151:	ff d0                	call   eax
c0009153:	83 c4 10             	add    esp,0x10
c0009156:	89 c1                	mov    ecx,eax
c0009158:	89 d3                	mov    ebx,edx
c000915a:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c000915f:	0f b6 d0             	movzx  edx,al
c0009162:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0009167:	01 c2                	add    edx,eax
c0009169:	89 d0                	mov    eax,edx
c000916b:	01 c0                	add    eax,eax
c000916d:	01 d0                	add    eax,edx
c000916f:	01 c0                	add    eax,eax
c0009171:	01 d0                	add    eax,edx
c0009173:	c1 e0 05             	shl    eax,0x5
c0009176:	01 d0                	add    eax,edx
c0009178:	c1 e0 04             	shl    eax,0x4
c000917b:	89 c2                	mov    edx,eax
c000917d:	c1 fa 1f             	sar    edx,0x1f
c0009180:	01 c1                	add    ecx,eax
c0009182:	11 d3                	adc    ebx,edx
c0009184:	a0 61 c6 02 c0       	mov    al,ds:0xc002c661
c0009189:	0f b6 c0             	movzx  eax,al
c000918c:	85 c0                	test   eax,eax
c000918e:	74 0c                	je     c000919c <Clock::timeInSecondsLocal()+0x62>
c0009190:	b8 08 07 00 00       	mov    eax,0x708
c0009195:	ba 00 00 00 00       	mov    edx,0x0
c000919a:	eb 0a                	jmp    c00091a6 <Clock::timeInSecondsLocal()+0x6c>
c000919c:	b8 00 00 00 00       	mov    eax,0x0
c00091a1:	ba 00 00 00 00       	mov    edx,0x0
c00091a6:	01 c8                	add    eax,ecx
c00091a8:	11 da                	adc    edx,ebx
c00091aa:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00091ad:	c9                   	leave  
c00091ae:	c3                   	ret    
c00091af:	90                   	nop

c00091b0 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00091b0:	55                   	push   ebp
c00091b1:	89 e5                	mov    ebp,esp
c00091b3:	56                   	push   esi
c00091b4:	53                   	push   ebx
c00091b5:	83 ec 10             	sub    esp,0x10
c00091b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00091bb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00091be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00091c1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00091c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00091c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00091c9:	83 c0 2c             	add    eax,0x2c
c00091cc:	8b 30                	mov    esi,DWORD PTR [eax]
c00091ce:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c00091d3:	0f b6 d0             	movzx  edx,al
c00091d6:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c00091db:	01 c2                	add    edx,eax
c00091dd:	89 d0                	mov    eax,edx
c00091df:	01 c0                	add    eax,eax
c00091e1:	01 d0                	add    eax,edx
c00091e3:	01 c0                	add    eax,eax
c00091e5:	01 d0                	add    eax,edx
c00091e7:	c1 e0 05             	shl    eax,0x5
c00091ea:	01 d0                	add    eax,edx
c00091ec:	c1 e0 04             	shl    eax,0x4
c00091ef:	89 c2                	mov    edx,eax
c00091f1:	c1 fa 1f             	sar    edx,0x1f
c00091f4:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00091f7:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c00091fa:	29 c1                	sub    ecx,eax
c00091fc:	19 d3                	sbb    ebx,edx
c00091fe:	a0 61 c6 02 c0       	mov    al,ds:0xc002c661
c0009203:	0f b6 c0             	movzx  eax,al
c0009206:	85 c0                	test   eax,eax
c0009208:	74 0c                	je     c0009216 <Clock::setTimeInSecondsLocal(unsigned long long)+0x66>
c000920a:	b8 08 07 00 00       	mov    eax,0x708
c000920f:	ba 00 00 00 00       	mov    edx,0x0
c0009214:	eb 0a                	jmp    c0009220 <Clock::setTimeInSecondsLocal(unsigned long long)+0x70>
c0009216:	b8 00 00 00 00       	mov    eax,0x0
c000921b:	ba 00 00 00 00       	mov    edx,0x0
c0009220:	29 c1                	sub    ecx,eax
c0009222:	19 d3                	sbb    ebx,edx
c0009224:	89 c8                	mov    eax,ecx
c0009226:	89 da                	mov    edx,ebx
c0009228:	83 ec 04             	sub    esp,0x4
c000922b:	52                   	push   edx
c000922c:	50                   	push   eax
c000922d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009230:	ff d6                	call   esi
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009238:	5b                   	pop    ebx
c0009239:	5e                   	pop    esi
c000923a:	5d                   	pop    ebp
c000923b:	c3                   	ret    

c000923c <KeDatetimeToSeconds(datetime_t)>:
c000923c:	55                   	push   ebp
c000923d:	89 e5                	mov    ebp,esp
c000923f:	53                   	push   ebx
c0009240:	83 ec 24             	sub    esp,0x24
c0009243:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009247:	2d 6c 07 00 00       	sub    eax,0x76c
c000924c:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0009250:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009253:	83 e8 01             	sub    eax,0x1
c0009256:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c0009259:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009260:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0009267:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000926e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0009275:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c0009278:	0f b6 c8             	movzx  ecx,al
c000927b:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000927e:	0f b6 d0             	movzx  edx,al
c0009281:	89 d0                	mov    eax,edx
c0009283:	01 c0                	add    eax,eax
c0009285:	01 d0                	add    eax,edx
c0009287:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000928e:	01 d0                	add    eax,edx
c0009290:	c1 e0 02             	shl    eax,0x2
c0009293:	01 c1                	add    ecx,eax
c0009295:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0009298:	0f b6 d0             	movzx  edx,al
c000929b:	89 d0                	mov    eax,edx
c000929d:	01 c0                	add    eax,eax
c000929f:	01 d0                	add    eax,edx
c00092a1:	01 c0                	add    eax,eax
c00092a3:	01 d0                	add    eax,edx
c00092a5:	c1 e0 05             	shl    eax,0x5
c00092a8:	01 d0                	add    eax,edx
c00092aa:	c1 e0 04             	shl    eax,0x4
c00092ad:	01 c8                	add    eax,ecx
c00092af:	89 c2                	mov    edx,eax
c00092b1:	c1 fa 1f             	sar    edx,0x1f
c00092b4:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c00092b7:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c00092ba:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c00092bd:	0f b6 c0             	movzx  eax,al
c00092c0:	83 e8 01             	sub    eax,0x1
c00092c3:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00092c6:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00092c9:	0f b6 c0             	movzx  eax,al
c00092cc:	8b 04 85 e0 3c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc320]
c00092d3:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00092d6:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00092d9:	0f b6 c0             	movzx  eax,al
c00092dc:	83 f8 01             	cmp    eax,0x1
c00092df:	76 7c                	jbe    c000935d <KeDatetimeToSeconds(datetime_t)+0x121>
c00092e1:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092e5:	0f b7 c0             	movzx  eax,ax
c00092e8:	83 e0 03             	and    eax,0x3
c00092eb:	85 c0                	test   eax,eax
c00092ed:	75 6e                	jne    c000935d <KeDatetimeToSeconds(datetime_t)+0x121>
c00092ef:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092f3:	0f b7 c8             	movzx  ecx,ax
c00092f6:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00092fb:	89 c8                	mov    eax,ecx
c00092fd:	f7 e2                	mul    edx
c00092ff:	c1 ea 05             	shr    edx,0x5
c0009302:	89 d0                	mov    eax,edx
c0009304:	c1 e0 02             	shl    eax,0x2
c0009307:	01 d0                	add    eax,edx
c0009309:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009310:	01 d0                	add    eax,edx
c0009312:	c1 e0 02             	shl    eax,0x2
c0009315:	29 c1                	sub    ecx,eax
c0009317:	89 c8                	mov    eax,ecx
c0009319:	0f b7 c0             	movzx  eax,ax
c000931c:	85 c0                	test   eax,eax
c000931e:	75 39                	jne    c0009359 <KeDatetimeToSeconds(datetime_t)+0x11d>
c0009320:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009324:	0f b7 c0             	movzx  eax,ax
c0009327:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000932d:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009332:	f7 e9                	imul   ecx
c0009334:	c1 fa 07             	sar    edx,0x7
c0009337:	89 c8                	mov    eax,ecx
c0009339:	c1 f8 1f             	sar    eax,0x1f
c000933c:	29 c2                	sub    edx,eax
c000933e:	89 d0                	mov    eax,edx
c0009340:	c1 e0 02             	shl    eax,0x2
c0009343:	01 d0                	add    eax,edx
c0009345:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000934c:	01 d0                	add    eax,edx
c000934e:	c1 e0 04             	shl    eax,0x4
c0009351:	29 c1                	sub    ecx,eax
c0009353:	89 ca                	mov    edx,ecx
c0009355:	85 d2                	test   edx,edx
c0009357:	75 04                	jne    c000935d <KeDatetimeToSeconds(datetime_t)+0x121>
c0009359:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000935d:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009361:	0f b7 c0             	movzx  eax,ax
c0009364:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009367:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000936a:	83 f8 46             	cmp    eax,0x46
c000936d:	0f 9f c0             	setg   al
c0009370:	0f b6 c0             	movzx  eax,al
c0009373:	85 c0                	test   eax,eax
c0009375:	0f 84 a4 00 00 00    	je     c000941f <KeDatetimeToSeconds(datetime_t)+0x1e3>
c000937b:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c0009382:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009386:	0f b7 d0             	movzx  edx,ax
c0009389:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000938c:	39 c2                	cmp    edx,eax
c000938e:	0f 8e b8 01 00 00    	jle    c000954c <KeDatetimeToSeconds(datetime_t)+0x310>
c0009394:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009397:	83 e0 03             	and    eax,0x3
c000939a:	85 c0                	test   eax,eax
c000939c:	75 6b                	jne    c0009409 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c000939e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00093a1:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093a6:	f7 e9                	imul   ecx
c00093a8:	c1 fa 05             	sar    edx,0x5
c00093ab:	89 c8                	mov    eax,ecx
c00093ad:	c1 f8 1f             	sar    eax,0x1f
c00093b0:	29 c2                	sub    edx,eax
c00093b2:	89 d0                	mov    eax,edx
c00093b4:	c1 e0 02             	shl    eax,0x2
c00093b7:	01 d0                	add    eax,edx
c00093b9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00093c0:	01 d0                	add    eax,edx
c00093c2:	c1 e0 02             	shl    eax,0x2
c00093c5:	29 c1                	sub    ecx,eax
c00093c7:	89 ca                	mov    edx,ecx
c00093c9:	85 d2                	test   edx,edx
c00093cb:	75 35                	jne    c0009402 <KeDatetimeToSeconds(datetime_t)+0x1c6>
c00093cd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093d0:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00093d6:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093db:	f7 e9                	imul   ecx
c00093dd:	c1 fa 07             	sar    edx,0x7
c00093e0:	89 c8                	mov    eax,ecx
c00093e2:	c1 f8 1f             	sar    eax,0x1f
c00093e5:	29 c2                	sub    edx,eax
c00093e7:	89 d0                	mov    eax,edx
c00093e9:	c1 e0 02             	shl    eax,0x2
c00093ec:	01 d0                	add    eax,edx
c00093ee:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00093f5:	01 d0                	add    eax,edx
c00093f7:	c1 e0 04             	shl    eax,0x4
c00093fa:	29 c1                	sub    ecx,eax
c00093fc:	89 ca                	mov    edx,ecx
c00093fe:	85 d2                	test   edx,edx
c0009400:	75 07                	jne    c0009409 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c0009402:	b8 6e 01 00 00       	mov    eax,0x16e
c0009407:	eb 05                	jmp    c000940e <KeDatetimeToSeconds(datetime_t)+0x1d2>
c0009409:	b8 6d 01 00 00       	mov    eax,0x16d
c000940e:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c0009411:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009414:	83 c0 01             	add    eax,0x1
c0009417:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000941a:	e9 63 ff ff ff       	jmp    c0009382 <KeDatetimeToSeconds(datetime_t)+0x146>
c000941f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009422:	83 f8 45             	cmp    eax,0x45
c0009425:	0f 8f 21 01 00 00    	jg     c000954c <KeDatetimeToSeconds(datetime_t)+0x310>
c000942b:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c0009432:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009436:	0f b7 d0             	movzx  edx,ax
c0009439:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000943c:	39 c2                	cmp    edx,eax
c000943e:	0f 8d 8b 00 00 00    	jge    c00094cf <KeDatetimeToSeconds(datetime_t)+0x293>
c0009444:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009447:	83 e0 03             	and    eax,0x3
c000944a:	85 c0                	test   eax,eax
c000944c:	75 6b                	jne    c00094b9 <KeDatetimeToSeconds(datetime_t)+0x27d>
c000944e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009451:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009456:	f7 e9                	imul   ecx
c0009458:	c1 fa 05             	sar    edx,0x5
c000945b:	89 c8                	mov    eax,ecx
c000945d:	c1 f8 1f             	sar    eax,0x1f
c0009460:	29 c2                	sub    edx,eax
c0009462:	89 d0                	mov    eax,edx
c0009464:	c1 e0 02             	shl    eax,0x2
c0009467:	01 d0                	add    eax,edx
c0009469:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009470:	01 d0                	add    eax,edx
c0009472:	c1 e0 02             	shl    eax,0x2
c0009475:	29 c1                	sub    ecx,eax
c0009477:	89 ca                	mov    edx,ecx
c0009479:	85 d2                	test   edx,edx
c000947b:	75 35                	jne    c00094b2 <KeDatetimeToSeconds(datetime_t)+0x276>
c000947d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009480:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009486:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000948b:	f7 e9                	imul   ecx
c000948d:	c1 fa 07             	sar    edx,0x7
c0009490:	89 c8                	mov    eax,ecx
c0009492:	c1 f8 1f             	sar    eax,0x1f
c0009495:	29 c2                	sub    edx,eax
c0009497:	89 d0                	mov    eax,edx
c0009499:	c1 e0 02             	shl    eax,0x2
c000949c:	01 d0                	add    eax,edx
c000949e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094a5:	01 d0                	add    eax,edx
c00094a7:	c1 e0 04             	shl    eax,0x4
c00094aa:	29 c1                	sub    ecx,eax
c00094ac:	89 ca                	mov    edx,ecx
c00094ae:	85 d2                	test   edx,edx
c00094b0:	75 07                	jne    c00094b9 <KeDatetimeToSeconds(datetime_t)+0x27d>
c00094b2:	b8 6e 01 00 00       	mov    eax,0x16e
c00094b7:	eb 05                	jmp    c00094be <KeDatetimeToSeconds(datetime_t)+0x282>
c00094b9:	b8 6d 01 00 00       	mov    eax,0x16d
c00094be:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c00094c1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094c4:	83 e8 01             	sub    eax,0x1
c00094c7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00094ca:	e9 63 ff ff ff       	jmp    c0009432 <KeDatetimeToSeconds(datetime_t)+0x1f6>
c00094cf:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094d2:	83 e0 03             	and    eax,0x3
c00094d5:	85 c0                	test   eax,eax
c00094d7:	75 6b                	jne    c0009544 <KeDatetimeToSeconds(datetime_t)+0x308>
c00094d9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00094dc:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00094e1:	f7 e9                	imul   ecx
c00094e3:	c1 fa 05             	sar    edx,0x5
c00094e6:	89 c8                	mov    eax,ecx
c00094e8:	c1 f8 1f             	sar    eax,0x1f
c00094eb:	29 c2                	sub    edx,eax
c00094ed:	89 d0                	mov    eax,edx
c00094ef:	c1 e0 02             	shl    eax,0x2
c00094f2:	01 d0                	add    eax,edx
c00094f4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094fb:	01 d0                	add    eax,edx
c00094fd:	c1 e0 02             	shl    eax,0x2
c0009500:	29 c1                	sub    ecx,eax
c0009502:	89 ca                	mov    edx,ecx
c0009504:	85 d2                	test   edx,edx
c0009506:	75 35                	jne    c000953d <KeDatetimeToSeconds(datetime_t)+0x301>
c0009508:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000950b:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009511:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009516:	f7 e9                	imul   ecx
c0009518:	c1 fa 07             	sar    edx,0x7
c000951b:	89 c8                	mov    eax,ecx
c000951d:	c1 f8 1f             	sar    eax,0x1f
c0009520:	29 c2                	sub    edx,eax
c0009522:	89 d0                	mov    eax,edx
c0009524:	c1 e0 02             	shl    eax,0x2
c0009527:	01 d0                	add    eax,edx
c0009529:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009530:	01 d0                	add    eax,edx
c0009532:	c1 e0 04             	shl    eax,0x4
c0009535:	29 c1                	sub    ecx,eax
c0009537:	89 ca                	mov    edx,ecx
c0009539:	85 d2                	test   edx,edx
c000953b:	75 07                	jne    c0009544 <KeDatetimeToSeconds(datetime_t)+0x308>
c000953d:	b8 6e 01 00 00       	mov    eax,0x16e
c0009542:	eb 05                	jmp    c0009549 <KeDatetimeToSeconds(datetime_t)+0x30d>
c0009544:	b8 6d 01 00 00       	mov    eax,0x16d
c0009549:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c000954c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000954f:	89 c2                	mov    edx,eax
c0009551:	c1 fa 1f             	sar    edx,0x1f
c0009554:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c000955a:	6b c8 00             	imul   ecx,eax,0x0
c000955d:	01 d9                	add    ecx,ebx
c000955f:	bb 80 51 01 00       	mov    ebx,0x15180
c0009564:	f7 e3                	mul    ebx
c0009566:	01 d1                	add    ecx,edx
c0009568:	89 ca                	mov    edx,ecx
c000956a:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c000956d:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009570:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009573:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009576:	83 c4 24             	add    esp,0x24
c0009579:	5b                   	pop    ebx
c000957a:	5d                   	pop    ebp
c000957b:	c3                   	ret    

c000957c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000957c:	55                   	push   ebp
c000957d:	89 e5                	mov    ebp,esp
c000957f:	56                   	push   esi
c0009580:	53                   	push   ebx
c0009581:	83 ec 20             	sub    esp,0x20
c0009584:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0009587:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000958a:	e8 ad fc ff ff       	call   c000923c <KeDatetimeToSeconds(datetime_t)>
c000958f:	83 c4 08             	add    esp,0x8
c0009592:	89 c3                	mov    ebx,eax
c0009594:	89 d6                	mov    esi,edx
c0009596:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c000959b:	0f b6 d0             	movzx  edx,al
c000959e:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c00095a3:	01 c2                	add    edx,eax
c00095a5:	89 d0                	mov    eax,edx
c00095a7:	01 c0                	add    eax,eax
c00095a9:	01 d0                	add    eax,edx
c00095ab:	01 c0                	add    eax,eax
c00095ad:	01 d0                	add    eax,edx
c00095af:	c1 e0 05             	shl    eax,0x5
c00095b2:	01 d0                	add    eax,edx
c00095b4:	c1 e0 04             	shl    eax,0x4
c00095b7:	89 c2                	mov    edx,eax
c00095b9:	c1 fa 1f             	sar    edx,0x1f
c00095bc:	29 c3                	sub    ebx,eax
c00095be:	19 d6                	sbb    esi,edx
c00095c0:	a0 61 c6 02 c0       	mov    al,ds:0xc002c661
c00095c5:	0f b6 c0             	movzx  eax,al
c00095c8:	85 c0                	test   eax,eax
c00095ca:	74 0c                	je     c00095d8 <Clock::setTimeInDatetimeLocal(datetime_t)+0x5c>
c00095cc:	b8 08 07 00 00       	mov    eax,0x708
c00095d1:	ba 00 00 00 00       	mov    edx,0x0
c00095d6:	eb 0a                	jmp    c00095e2 <Clock::setTimeInDatetimeLocal(datetime_t)+0x66>
c00095d8:	b8 00 00 00 00       	mov    eax,0x0
c00095dd:	ba 00 00 00 00       	mov    edx,0x0
c00095e2:	29 c3                	sub    ebx,eax
c00095e4:	19 d6                	sbb    esi,edx
c00095e6:	89 d8                	mov    eax,ebx
c00095e8:	89 f2                	mov    edx,esi
c00095ea:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00095ed:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00095f0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00095f3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00095f6:	89 d0                	mov    eax,edx
c00095f8:	31 d2                	xor    edx,edx
c00095fa:	89 c3                	mov    ebx,eax
c00095fc:	89 d6                	mov    esi,edx
c00095fe:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009601:	80 e5 ff             	and    ch,0xff
c0009604:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0009607:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c000960a:	83 e1 00             	and    ecx,0x0
c000960d:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0009610:	83 ec 0c             	sub    esp,0xc
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0009618:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000961b:	68 ce 3c 02 c0       	push   0xc0023cce
c0009620:	e8 57 d9 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009625:	83 c4 20             	add    esp,0x20
c0009628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000962b:	8b 00                	mov    eax,DWORD PTR [eax]
c000962d:	83 c0 2c             	add    eax,0x2c
c0009630:	8b 00                	mov    eax,DWORD PTR [eax]
c0009632:	83 ec 04             	sub    esp,0x4
c0009635:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009638:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000963b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000963e:	ff d0                	call   eax
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009646:	5b                   	pop    ebx
c0009647:	5e                   	pop    esi
c0009648:	5d                   	pop    ebp
c0009649:	c3                   	ret    

c000964a <KeSecondsToDatetime(unsigned long long)>:
c000964a:	55                   	push   ebp
c000964b:	89 e5                	mov    ebp,esp
c000964d:	83 ec 48             	sub    esp,0x48
c0009650:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009653:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0009656:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009659:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c000965c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c000965f:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009662:	6a 00                	push   0x0
c0009664:	68 80 51 01 00       	push   0x15180
c0009669:	52                   	push   edx
c000966a:	50                   	push   eax
c000966b:	e8 a4 8a 01 00       	call   c0022114 <__udivdi3>
c0009670:	83 c4 10             	add    esp,0x10
c0009673:	05 6c fa 0a 00       	add    eax,0xafa6c
c0009678:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000967b:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c000967e:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009681:	6a 00                	push   0x0
c0009683:	68 80 51 01 00       	push   0x15180
c0009688:	52                   	push   edx
c0009689:	50                   	push   eax
c000968a:	e8 85 8b 01 00       	call   c0022214 <__umoddi3>
c000968f:	83 c4 10             	add    esp,0x10
c0009692:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009695:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009699:	79 0b                	jns    c00096a6 <KeSecondsToDatetime(unsigned long long)+0x5c>
c000969b:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c00096a2:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c00096a6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096a9:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c00096ae:	89 c8                	mov    eax,ecx
c00096b0:	f7 ea                	imul   edx
c00096b2:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096b5:	c1 f8 0b             	sar    eax,0xb
c00096b8:	89 c2                	mov    edx,eax
c00096ba:	89 c8                	mov    eax,ecx
c00096bc:	c1 f8 1f             	sar    eax,0x1f
c00096bf:	29 c2                	sub    edx,eax
c00096c1:	89 d0                	mov    eax,edx
c00096c3:	88 c2                	mov    dl,al
c00096c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096c8:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c00096cb:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096ce:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c00096d3:	89 c8                	mov    eax,ecx
c00096d5:	f7 ea                	imul   edx
c00096d7:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096da:	c1 f8 0b             	sar    eax,0xb
c00096dd:	89 c2                	mov    edx,eax
c00096df:	89 c8                	mov    eax,ecx
c00096e1:	c1 f8 1f             	sar    eax,0x1f
c00096e4:	29 c2                	sub    edx,eax
c00096e6:	89 d0                	mov    eax,edx
c00096e8:	01 c0                	add    eax,eax
c00096ea:	01 d0                	add    eax,edx
c00096ec:	01 c0                	add    eax,eax
c00096ee:	01 d0                	add    eax,edx
c00096f0:	c1 e0 05             	shl    eax,0x5
c00096f3:	01 d0                	add    eax,edx
c00096f5:	c1 e0 04             	shl    eax,0x4
c00096f8:	29 c1                	sub    ecx,eax
c00096fa:	89 c8                	mov    eax,ecx
c00096fc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00096ff:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009702:	ba 89 88 88 88       	mov    edx,0x88888889
c0009707:	89 c8                	mov    eax,ecx
c0009709:	f7 ea                	imul   edx
c000970b:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000970e:	c1 f8 05             	sar    eax,0x5
c0009711:	89 c2                	mov    edx,eax
c0009713:	89 c8                	mov    eax,ecx
c0009715:	c1 f8 1f             	sar    eax,0x1f
c0009718:	29 c2                	sub    edx,eax
c000971a:	89 d0                	mov    eax,edx
c000971c:	88 c2                	mov    dl,al
c000971e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009721:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009724:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009727:	ba 89 88 88 88       	mov    edx,0x88888889
c000972c:	89 c8                	mov    eax,ecx
c000972e:	f7 ea                	imul   edx
c0009730:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009733:	c1 f8 05             	sar    eax,0x5
c0009736:	89 c2                	mov    edx,eax
c0009738:	89 c8                	mov    eax,ecx
c000973a:	c1 f8 1f             	sar    eax,0x1f
c000973d:	29 c2                	sub    edx,eax
c000973f:	89 d0                	mov    eax,edx
c0009741:	01 c0                	add    eax,eax
c0009743:	01 d0                	add    eax,edx
c0009745:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000974c:	01 d0                	add    eax,edx
c000974e:	c1 e0 02             	shl    eax,0x2
c0009751:	29 c1                	sub    ecx,eax
c0009753:	89 ca                	mov    edx,ecx
c0009755:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009758:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c000975b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000975f:	79 20                	jns    c0009781 <KeSecondsToDatetime(unsigned long long)+0x137>
c0009761:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009764:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c000976a:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c000976f:	89 c8                	mov    eax,ecx
c0009771:	f7 ea                	imul   edx
c0009773:	c1 fa 0f             	sar    edx,0xf
c0009776:	89 c8                	mov    eax,ecx
c0009778:	c1 f8 1f             	sar    eax,0x1f
c000977b:	29 c2                	sub    edx,eax
c000977d:	89 d0                	mov    eax,edx
c000977f:	eb 18                	jmp    c0009799 <KeSecondsToDatetime(unsigned long long)+0x14f>
c0009781:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c0009784:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009789:	89 c8                	mov    eax,ecx
c000978b:	f7 ea                	imul   edx
c000978d:	c1 fa 0f             	sar    edx,0xf
c0009790:	89 c8                	mov    eax,ecx
c0009792:	c1 f8 1f             	sar    eax,0x1f
c0009795:	29 c2                	sub    edx,eax
c0009797:	89 d0                	mov    eax,edx
c0009799:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000979c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000979f:	89 d0                	mov    eax,edx
c00097a1:	c1 e0 03             	shl    eax,0x3
c00097a4:	01 d0                	add    eax,edx
c00097a6:	c1 e0 04             	shl    eax,0x4
c00097a9:	01 d0                	add    eax,edx
c00097ab:	c1 e0 04             	shl    eax,0x4
c00097ae:	29 d0                	sub    eax,edx
c00097b0:	89 c2                	mov    edx,eax
c00097b2:	c1 e2 06             	shl    edx,0x6
c00097b5:	29 c2                	sub    edx,eax
c00097b7:	89 d0                	mov    eax,edx
c00097b9:	f7 d8                	neg    eax
c00097bb:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00097be:	01 d0                	add    eax,edx
c00097c0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00097c3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097c6:	c1 e8 02             	shr    eax,0x2
c00097c9:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c00097ce:	f7 e2                	mul    edx
c00097d0:	c1 ea 07             	shr    edx,0x7
c00097d3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097d6:	29 d0                	sub    eax,edx
c00097d8:	89 c1                	mov    ecx,eax
c00097da:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097dd:	c1 e8 02             	shr    eax,0x2
c00097e0:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c00097e5:	f7 e2                	mul    edx
c00097e7:	89 d0                	mov    eax,edx
c00097e9:	c1 e8 0b             	shr    eax,0xb
c00097ec:	01 c1                	add    ecx,eax
c00097ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097f1:	c1 e8 04             	shr    eax,0x4
c00097f4:	ba 41 d6 72 00       	mov    edx,0x72d641
c00097f9:	f7 e2                	mul    edx
c00097fb:	89 d0                	mov    eax,edx
c00097fd:	c1 e8 04             	shr    eax,0x4
c0009800:	29 c1                	sub    ecx,eax
c0009802:	ba 61 f3 19 67       	mov    edx,0x6719f361
c0009807:	89 c8                	mov    eax,ecx
c0009809:	f7 e2                	mul    edx
c000980b:	89 c8                	mov    eax,ecx
c000980d:	29 d0                	sub    eax,edx
c000980f:	d1 e8                	shr    eax,1
c0009811:	01 d0                	add    eax,edx
c0009813:	c1 e8 08             	shr    eax,0x8
c0009816:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0009819:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000981c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c0009821:	f7 e2                	mul    edx
c0009823:	89 d1                	mov    ecx,edx
c0009825:	c1 e9 05             	shr    ecx,0x5
c0009828:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000982b:	89 d0                	mov    eax,edx
c000982d:	c1 e0 03             	shl    eax,0x3
c0009830:	01 d0                	add    eax,edx
c0009832:	c1 e0 03             	shl    eax,0x3
c0009835:	01 d0                	add    eax,edx
c0009837:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000983e:	01 c2                	add    edx,eax
c0009840:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009843:	c1 e8 02             	shr    eax,0x2
c0009846:	01 d0                	add    eax,edx
c0009848:	29 c1                	sub    ecx,eax
c000984a:	89 ca                	mov    edx,ecx
c000984c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000984f:	01 d0                	add    eax,edx
c0009851:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009854:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0009857:	89 d0                	mov    eax,edx
c0009859:	c1 e0 02             	shl    eax,0x2
c000985c:	01 d0                	add    eax,edx
c000985e:	83 c0 02             	add    eax,0x2
c0009861:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c0009866:	f7 e2                	mul    edx
c0009868:	89 d0                	mov    eax,edx
c000986a:	c1 e8 07             	shr    eax,0x7
c000986d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0009870:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0009873:	89 d0                	mov    eax,edx
c0009875:	c1 e0 03             	shl    eax,0x3
c0009878:	01 d0                	add    eax,edx
c000987a:	01 c0                	add    eax,eax
c000987c:	01 d0                	add    eax,edx
c000987e:	c1 e0 03             	shl    eax,0x3
c0009881:	01 d0                	add    eax,edx
c0009883:	83 c0 02             	add    eax,0x2
c0009886:	ba cd cc cc cc       	mov    edx,0xcccccccd
c000988b:	f7 e2                	mul    edx
c000988d:	c1 ea 02             	shr    edx,0x2
c0009890:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009893:	29 d0                	sub    eax,edx
c0009895:	83 c0 01             	add    eax,0x1
c0009898:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000989b:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c000989f:	77 07                	ja     c00098a8 <KeSecondsToDatetime(unsigned long long)+0x25e>
c00098a1:	b8 02 00 00 00       	mov    eax,0x2
c00098a6:	eb 05                	jmp    c00098ad <KeSecondsToDatetime(unsigned long long)+0x263>
c00098a8:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c00098ad:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c00098b0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00098b3:	89 d0                	mov    eax,edx
c00098b5:	c1 e0 02             	shl    eax,0x2
c00098b8:	01 d0                	add    eax,edx
c00098ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00098c1:	01 d0                	add    eax,edx
c00098c3:	c1 e0 04             	shl    eax,0x4
c00098c6:	89 c2                	mov    edx,eax
c00098c8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00098cb:	01 c2                	add    edx,eax
c00098cd:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c00098d1:	0f 96 c0             	setbe  al
c00098d4:	0f b6 c0             	movzx  eax,al
c00098d7:	01 d0                	add    eax,edx
c00098d9:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00098dc:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00098df:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00098e2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00098e6:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00098e9:	83 c0 01             	add    eax,0x1
c00098ec:	88 c2                	mov    dl,al
c00098ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098f1:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00098f4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00098f7:	88 c2                	mov    dl,al
c00098f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098fc:	88 10                	mov    BYTE PTR [eax],dl
c00098fe:	90                   	nop
c00098ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009902:	c9                   	leave  
c0009903:	c2 04 00             	ret    0x4

c0009906 <Clock::timeInDatetimeLocal()>:
c0009906:	55                   	push   ebp
c0009907:	89 e5                	mov    ebp,esp
c0009909:	83 ec 08             	sub    esp,0x8
c000990c:	83 ec 0c             	sub    esp,0xc
c000990f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009912:	e8 23 f8 ff ff       	call   c000913a <Clock::timeInSecondsLocal()>
c0009917:	83 c4 10             	add    esp,0x10
c000991a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000991d:	83 ec 04             	sub    esp,0x4
c0009920:	52                   	push   edx
c0009921:	50                   	push   eax
c0009922:	51                   	push   ecx
c0009923:	e8 22 fd ff ff       	call   c000964a <KeSecondsToDatetime(unsigned long long)>
c0009928:	83 c4 0c             	add    esp,0xc
c000992b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000992e:	c9                   	leave  
c000992f:	c2 04 00             	ret    0x4

c0009932 <Device::hibernate()>:
c0009932:	c3                   	ret    
c0009933:	90                   	nop

c0009934 <Device::wake()>:
c0009934:	c3                   	ret    
c0009935:	90                   	nop

c0009936 <Device::detect()>:
c0009936:	c3                   	ret    
c0009937:	90                   	nop

c0009938 <Device::disableLegacy()>:
c0009938:	c3                   	ret    
c0009939:	90                   	nop

c000993a <Device::powerSaving(PowerSavingLevel)>:
c000993a:	c3                   	ret    
c000993b:	90                   	nop

c000993c <DriverlessDevice::close(int, int, void*)>:
c000993c:	31 c0                	xor    eax,eax
c000993e:	c3                   	ret    
c000993f:	90                   	nop

c0009940 <DriverlessDevice::detect()>:
c0009940:	c3                   	ret    
c0009941:	90                   	nop

c0009942 <DriverlessDevice::open(int, int, void*)>:
c0009942:	83 ec 18             	sub    esp,0x18
c0009945:	68 4c 3d 02 c0       	push   0xc0023d4c
c000994a:	e8 71 62 00 00       	call   c000fbc0 <KePanic(char const*)>
c000994f:	83 c8 ff             	or     eax,0xffffffff
c0009952:	83 c4 1c             	add    esp,0x1c
c0009955:	c3                   	ret    

c0009956 <Device::~Device()>:
c0009956:	ba f0 3d 02 c0       	mov    edx,0xc0023df0
c000995b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000995f:	89 10                	mov    DWORD PTR [eax],edx
c0009961:	90                   	nop
c0009962:	c3                   	ret    
c0009963:	90                   	nop

c0009964 <Device::~Device()>:
c0009964:	83 ec 0c             	sub    esp,0xc
c0009967:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000996b:	e8 e6 ff ff ff       	call   c0009956 <Device::~Device()>
c0009970:	83 c4 04             	add    esp,0x4
c0009973:	83 ec 08             	sub    esp,0x8
c0009976:	68 58 01 00 00       	push   0x158
c000997b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000997f:	e8 f8 38 00 00       	call   c000d27c <operator delete(void*, unsigned long)>
c0009984:	83 c4 10             	add    esp,0x10
c0009987:	83 c4 0c             	add    esp,0xc
c000998a:	c3                   	ret    
c000998b:	90                   	nop

c000998c <Device::findAndLoadDriver()>:
c000998c:	c7 44 24 04 6a 3d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023d6a
c0009994:	e9 e3 d5 ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c0009999:	90                   	nop

c000999a <Device::preOpenPCI(PCIDeviceInfo)>:
c000999a:	57                   	push   edi
c000999b:	b9 09 00 00 00       	mov    ecx,0x9
c00099a0:	56                   	push   esi
c00099a1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00099a5:	8d 74 24 10          	lea    esi,[esp+0x10]
c00099a9:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00099b3:	81 c7 18 01 00 00    	add    edi,0x118
c00099b9:	fc                   	cld    
c00099ba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00099bc:	5e                   	pop    esi
c00099bd:	5f                   	pop    edi
c00099be:	c3                   	ret    
c00099bf:	90                   	nop

c00099c0 <Device::preOpenACPI(void*, char*, char*)>:
c00099c0:	57                   	push   edi
c00099c1:	b9 1e 00 00 00       	mov    ecx,0x1e
c00099c6:	56                   	push   esi
c00099c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00099cf:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c00099d9:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c00099df:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c00099e5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00099e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00099eb:	b9 0e 00 00 00       	mov    ecx,0xe
c00099f0:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c00099f6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00099fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00099fc:	5e                   	pop    esi
c00099fd:	5f                   	pop    edi
c00099fe:	c3                   	ret    
c00099ff:	90                   	nop

c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0009a00:	53                   	push   ebx
c0009a01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a05:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009a09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009a0d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009a11:	0f b6 c0             	movzx  eax,al
c0009a14:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0009a18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009a1c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009a20:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009a24:	5b                   	pop    ebx
c0009a25:	e9 2b 18 01 00       	jmp    c001b255 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c0009a2a <Device::getParent()>:
c0009a2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a2e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0009a34:	c3                   	ret    
c0009a35:	90                   	nop

c0009a36 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009a36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a3e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0009a43:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009a47:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009a4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a4f:	e9 63 19 01 00       	jmp    c001b3b7 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c0009a54 <Device::addChild(Device*)>:
c0009a54:	53                   	push   ebx
c0009a55:	83 ec 08             	sub    esp,0x8
c0009a58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009a60:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009a66:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0009a6c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009a6e:	85 d2                	test   edx,edx
c0009a70:	74 04                	je     c0009a76 <Device::addChild(Device*)+0x22>
c0009a72:	89 d3                	mov    ebx,edx
c0009a74:	eb f6                	jmp    c0009a6c <Device::addChild(Device*)+0x18>
c0009a76:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009a79:	83 ec 0c             	sub    esp,0xc
c0009a7c:	6a 08                	push   0x8
c0009a7e:	e8 e0 5c 00 00       	call   c000f763 <malloc>
c0009a83:	89 03                	mov    DWORD PTR [ebx],eax
c0009a85:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a8b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a92:	83 c4 18             	add    esp,0x18
c0009a95:	5b                   	pop    ebx
c0009a96:	c3                   	ret    
c0009a97:	90                   	nop

c0009a98 <Device::removeAllChildren()>:
c0009a98:	56                   	push   esi
c0009a99:	53                   	push   ebx
c0009a9a:	52                   	push   edx
c0009a9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009a9f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009aa5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009aa8:	74 17                	je     c0009ac1 <Device::removeAllChildren()+0x29>
c0009aaa:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009aad:	85 c0                	test   eax,eax
c0009aaf:	74 0c                	je     c0009abd <Device::removeAllChildren()+0x25>
c0009ab1:	83 ec 0c             	sub    esp,0xc
c0009ab4:	8b 10                	mov    edx,DWORD PTR [eax]
c0009ab6:	50                   	push   eax
c0009ab7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0009aba:	83 c4 10             	add    esp,0x10
c0009abd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009abf:	eb e4                	jmp    c0009aa5 <Device::removeAllChildren()+0xd>
c0009ac1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009ac7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009acd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009ad3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ada:	58                   	pop    eax
c0009adb:	5b                   	pop    ebx
c0009adc:	5e                   	pop    esi
c0009add:	c3                   	ret    

c0009ade <Device::hibernateAll()>:
c0009ade:	53                   	push   ebx
c0009adf:	83 ec 14             	sub    esp,0x14
c0009ae2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ae6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009ae8:	53                   	push   ebx
c0009ae9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009aec:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009af2:	83 c4 10             	add    esp,0x10
c0009af5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009af8:	74 0f                	je     c0009b09 <Device::hibernateAll()+0x2b>
c0009afa:	83 ec 0c             	sub    esp,0xc
c0009afd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b00:	e8 d9 ff ff ff       	call   c0009ade <Device::hibernateAll()>
c0009b05:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b07:	eb e9                	jmp    c0009af2 <Device::hibernateAll()+0x14>
c0009b09:	83 c4 08             	add    esp,0x8
c0009b0c:	5b                   	pop    ebx
c0009b0d:	c3                   	ret    

c0009b0e <Device::wakeAll()>:
c0009b0e:	53                   	push   ebx
c0009b0f:	83 ec 14             	sub    esp,0x14
c0009b12:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009b16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b18:	53                   	push   ebx
c0009b19:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0009b1c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b22:	83 c4 10             	add    esp,0x10
c0009b25:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b28:	74 0f                	je     c0009b39 <Device::wakeAll()+0x2b>
c0009b2a:	83 ec 0c             	sub    esp,0xc
c0009b2d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b30:	e8 d9 ff ff ff       	call   c0009b0e <Device::wakeAll()>
c0009b35:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b37:	eb e9                	jmp    c0009b22 <Device::wakeAll()+0x14>
c0009b39:	83 c4 08             	add    esp,0x8
c0009b3c:	5b                   	pop    ebx
c0009b3d:	c3                   	ret    

c0009b3e <Device::detectAll()>:
c0009b3e:	53                   	push   ebx
c0009b3f:	83 ec 14             	sub    esp,0x14
c0009b42:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009b46:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b48:	53                   	push   ebx
c0009b49:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0009b4c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b52:	83 c4 10             	add    esp,0x10
c0009b55:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b58:	74 0f                	je     c0009b69 <Device::detectAll()+0x2b>
c0009b5a:	83 ec 0c             	sub    esp,0xc
c0009b5d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b60:	e8 d9 ff ff ff       	call   c0009b3e <Device::detectAll()>
c0009b65:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b67:	eb e9                	jmp    c0009b52 <Device::detectAll()+0x14>
c0009b69:	83 c4 08             	add    esp,0x8
c0009b6c:	5b                   	pop    ebx
c0009b6d:	c3                   	ret    

c0009b6e <Device::disableLegacyAll()>:
c0009b6e:	c3                   	ret    
c0009b6f:	90                   	nop

c0009b70 <Device::loadDriversForAll()>:
c0009b70:	c3                   	ret    
c0009b71:	90                   	nop

c0009b72 <Device::powerSavingAll(PowerSavingLevel)>:
c0009b72:	56                   	push   esi
c0009b73:	53                   	push   ebx
c0009b74:	83 ec 0c             	sub    esp,0xc
c0009b77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009b7b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009b7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b81:	56                   	push   esi
c0009b82:	53                   	push   ebx
c0009b83:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009b86:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b8c:	83 c4 10             	add    esp,0x10
c0009b8f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b92:	74 0f                	je     c0009ba3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009b94:	52                   	push   edx
c0009b95:	52                   	push   edx
c0009b96:	56                   	push   esi
c0009b97:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b9a:	e8 d3 ff ff ff       	call   c0009b72 <Device::powerSavingAll(PowerSavingLevel)>
c0009b9f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009ba1:	eb e9                	jmp    c0009b8c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009ba3:	58                   	pop    eax
c0009ba4:	5b                   	pop    ebx
c0009ba5:	5e                   	pop    esi
c0009ba6:	c3                   	ret    
c0009ba7:	90                   	nop

c0009ba8 <Device::setName(char const*)>:
c0009ba8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0009bb0:	e9 8b 6a ff ff       	jmp    c0000640 <strcpy>
c0009bb5:	90                   	nop

c0009bb6 <Device::Device(char const*)>:
c0009bb6:	83 ec 1c             	sub    esp,0x1c
c0009bb9:	ba f0 3d 02 c0       	mov    edx,0xc0023df0
c0009bbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bc2:	89 10                	mov    DWORD PTR [eax],edx
c0009bc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bc8:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0009bd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bd6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009be0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009be4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009bee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bf2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009bfc:	83 ec 08             	sub    esp,0x8
c0009bff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009c03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009c07:	e8 9c ff ff ff       	call   c0009ba8 <Device::setName(char const*)>
c0009c0c:	83 c4 10             	add    esp,0x10
c0009c0f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009c17:	83 ec 0c             	sub    esp,0xc
c0009c1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009c1e:	e8 40 5b 00 00       	call   c000f763 <malloc>
c0009c23:	83 c4 10             	add    esp,0x10
c0009c26:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009c2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c33:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009c37:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0009c3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c41:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009c47:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009c4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c51:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009c57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c62:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009c69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c6d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009c74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c78:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009c82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c86:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009c90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c94:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009c9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ca2:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c0009cac:	90                   	nop
c0009cad:	83 c4 1c             	add    esp,0x1c
c0009cb0:	c3                   	ret    
c0009cb1:	90                   	nop

c0009cb2 <Device::getName()>:
c0009cb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009cb6:	05 d0 00 00 00       	add    eax,0xd0
c0009cbb:	c3                   	ret    

c0009cbc <Device::closeAll()>:
c0009cbc:	53                   	push   ebx
c0009cbd:	83 ec 08             	sub    esp,0x8
c0009cc0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009cc4:	53                   	push   ebx
c0009cc5:	e8 e8 ff ff ff       	call   c0009cb2 <Device::getName()>
c0009cca:	52                   	push   edx
c0009ccb:	50                   	push   eax
c0009ccc:	68 a4 3d 02 c0       	push   0xc0023da4
c0009cd1:	e8 a6 d2 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009cd6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009cd8:	6a 00                	push   0x0
c0009cda:	6a 00                	push   0x0
c0009cdc:	6a 00                	push   0x0
c0009cde:	53                   	push   ebx
c0009cdf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009ce2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009ce8:	83 c4 20             	add    esp,0x20
c0009ceb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009cee:	74 12                	je     c0009d02 <Device::closeAll()+0x46>
c0009cf0:	83 ec 0c             	sub    esp,0xc
c0009cf3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009cf6:	e8 c1 ff ff ff       	call   c0009cbc <Device::closeAll()>
c0009cfb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009cfd:	83 c4 10             	add    esp,0x10
c0009d00:	eb e9                	jmp    c0009ceb <Device::closeAll()+0x2f>
c0009d02:	83 c4 08             	add    esp,0x8
c0009d05:	5b                   	pop    ebx
c0009d06:	c3                   	ret    
c0009d07:	90                   	nop

c0009d08 <DriverlessDevice::DriverlessDevice(char const*)>:
c0009d08:	83 ec 0c             	sub    esp,0xc
c0009d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d0f:	83 ec 08             	sub    esp,0x8
c0009d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d16:	50                   	push   eax
c0009d17:	e8 9a fe ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0009d1c:	83 c4 10             	add    esp,0x10
c0009d1f:	ba 1c 3e 02 c0       	mov    edx,0xc0023e1c
c0009d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d28:	89 10                	mov    DWORD PTR [eax],edx
c0009d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d2e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009d38:	90                   	nop
c0009d39:	83 c4 0c             	add    esp,0xc
c0009d3c:	c3                   	ret    
c0009d3d:	90                   	nop

c0009d3e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009d3e:	57                   	push   edi
c0009d3f:	56                   	push   esi
c0009d40:	53                   	push   ebx
c0009d41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009d45:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009d49:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009d4d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009d53:	75 0c                	jne    c0009d61 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	53                   	push   ebx
c0009d58:	56                   	push   esi
c0009d59:	e8 2e 86 01 00       	call   c002238c <LinkedList<Device>::addElement(Device*)>
c0009d5e:	83 c4 10             	add    esp,0x10
c0009d61:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009d67:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009d6a:	74 12                	je     c0009d7e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0009d6c:	50                   	push   eax
c0009d6d:	57                   	push   edi
c0009d6e:	56                   	push   esi
c0009d6f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009d72:	e8 c7 ff ff ff       	call   c0009d3e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d77:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009d79:	83 c4 10             	add    esp,0x10
c0009d7c:	eb e9                	jmp    c0009d67 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009d7e:	5b                   	pop    ebx
c0009d7f:	5e                   	pop    esi
c0009d80:	5f                   	pop    edi
c0009d81:	c3                   	ret    

c0009d82 <getDevicesOfType(DeviceType)>:
c0009d82:	53                   	push   ebx
c0009d83:	83 ec 14             	sub    esp,0x14
c0009d86:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009d8a:	53                   	push   ebx
c0009d8b:	e8 d8 86 01 00       	call   c0022468 <LinkedList<Device>::LinkedList()>
c0009d90:	83 c4 0c             	add    esp,0xc
c0009d93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d97:	53                   	push   ebx
c0009d98:	ff 35 08 d1 02 c0    	push   DWORD PTR ds:0xc002d108
c0009d9e:	e8 9b ff ff ff       	call   c0009d3e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009da3:	89 d8                	mov    eax,ebx
c0009da5:	83 c4 18             	add    esp,0x18
c0009da8:	5b                   	pop    ebx
c0009da9:	c2 04 00             	ret    0x4

c0009dac <HardDiskController::HardDiskController(char const*)>:
c0009dac:	83 ec 0c             	sub    esp,0xc
c0009daf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009db3:	83 ec 08             	sub    esp,0x8
c0009db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dba:	50                   	push   eax
c0009dbb:	e8 f6 fd ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0009dc0:	83 c4 10             	add    esp,0x10
c0009dc3:	ba 48 3e 02 c0       	mov    edx,0xc0023e48
c0009dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dcc:	89 10                	mov    DWORD PTR [eax],edx
c0009dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dd2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0009ddc:	90                   	nop
c0009ddd:	83 c4 0c             	add    esp,0xc
c0009de0:	c3                   	ret    
c0009de1:	90                   	nop
c0009de2:	66 90                	xchg   ax,ax

c0009de4 <HardDiskController::~HardDiskController()>:
c0009de4:	83 ec 0c             	sub    esp,0xc
c0009de7:	ba 48 3e 02 c0       	mov    edx,0xc0023e48
c0009dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009df0:	89 10                	mov    DWORD PTR [eax],edx
c0009df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009df6:	83 ec 0c             	sub    esp,0xc
c0009df9:	50                   	push   eax
c0009dfa:	e8 57 fb ff ff       	call   c0009956 <Device::~Device()>
c0009dff:	83 c4 10             	add    esp,0x10
c0009e02:	90                   	nop
c0009e03:	83 c4 0c             	add    esp,0xc
c0009e06:	c3                   	ret    
c0009e07:	90                   	nop

c0009e08 <HardDiskController::~HardDiskController()>:
c0009e08:	83 ec 0c             	sub    esp,0xc
c0009e0b:	83 ec 0c             	sub    esp,0xc
c0009e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e12:	e8 cd ff ff ff       	call   c0009de4 <HardDiskController::~HardDiskController()>
c0009e17:	83 c4 10             	add    esp,0x10
c0009e1a:	83 ec 08             	sub    esp,0x8
c0009e1d:	68 58 01 00 00       	push   0x158
c0009e22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e26:	e8 51 34 00 00       	call   c000d27c <operator delete(void*, unsigned long)>
c0009e2b:	83 c4 10             	add    esp,0x10
c0009e2e:	83 c4 0c             	add    esp,0xc
c0009e31:	c3                   	ret    

c0009e32 <PhysicalDisk::eject()>:
c0009e32:	83 c8 ff             	or     eax,0xffffffff
c0009e35:	c3                   	ret    

c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009e36:	83 ec 0c             	sub    esp,0xc
c0009e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e3d:	83 ec 08             	sub    esp,0x8
c0009e40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e44:	50                   	push   eax
c0009e45:	e8 6c fd ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0009e4a:	83 c4 10             	add    esp,0x10
c0009e4d:	ba 74 3e 02 c0       	mov    edx,0xc0023e74
c0009e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e56:	89 10                	mov    DWORD PTR [eax],edx
c0009e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e5c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009e63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e67:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0009e6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e72:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009e7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e80:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e84:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0009e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e8e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0009e98:	90                   	nop
c0009e99:	83 c4 0c             	add    esp,0xc
c0009e9c:	c3                   	ret    
c0009e9d:	90                   	nop

c0009e9e <PhysicalDisk::startCache()>:
c0009e9e:	56                   	push   esi
c0009e9f:	53                   	push   ebx
c0009ea0:	83 ec 10             	sub    esp,0x10
c0009ea3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ea7:	6a 44                	push   0x44
c0009ea9:	e8 b5 58 00 00       	call   c000f763 <malloc>
c0009eae:	89 c6                	mov    esi,eax
c0009eb0:	58                   	pop    eax
c0009eb1:	5a                   	pop    edx
c0009eb2:	53                   	push   ebx
c0009eb3:	56                   	push   esi
c0009eb4:	e8 d3 13 00 00       	call   c000b28c <VCache::VCache(PhysicalDisk*)>
c0009eb9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0009ebf:	83 c4 14             	add    esp,0x14
c0009ec2:	5b                   	pop    ebx
c0009ec3:	5e                   	pop    esi
c0009ec4:	c3                   	ret    
c0009ec5:	90                   	nop

c0009ec6 <PhysicalDisk::~PhysicalDisk()>:
c0009ec6:	83 ec 0c             	sub    esp,0xc
c0009ec9:	ba 74 3e 02 c0       	mov    edx,0xc0023e74
c0009ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ed2:	89 10                	mov    DWORD PTR [eax],edx
c0009ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ed8:	83 ec 0c             	sub    esp,0xc
c0009edb:	50                   	push   eax
c0009edc:	e8 75 fa ff ff       	call   c0009956 <Device::~Device()>
c0009ee1:	83 c4 10             	add    esp,0x10
c0009ee4:	90                   	nop
c0009ee5:	83 c4 0c             	add    esp,0xc
c0009ee8:	c3                   	ret    
c0009ee9:	90                   	nop

c0009eea <PhysicalDisk::~PhysicalDisk()>:
c0009eea:	83 ec 0c             	sub    esp,0xc
c0009eed:	83 ec 0c             	sub    esp,0xc
c0009ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ef4:	e8 cd ff ff ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c0009ef9:	83 c4 10             	add    esp,0x10
c0009efc:	83 ec 08             	sub    esp,0x8
c0009eff:	68 6c 01 00 00       	push   0x16c
c0009f04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f08:	e8 6f 33 00 00       	call   c000d27c <operator delete(void*, unsigned long)>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	83 c4 0c             	add    esp,0xc
c0009f13:	c3                   	ret    

c0009f14 <startGUI(void*)>:
c0009f14:	55                   	push   ebp
c0009f15:	89 e5                	mov    ebp,esp
c0009f17:	53                   	push   ebx
c0009f18:	83 ec 04             	sub    esp,0x4
c0009f1b:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c0009f23:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c0009f28:	85 c0                	test   eax,eax
c0009f2a:	75 01                	jne    c0009f2d <startGUI(void*)+0x19>
c0009f2c:	fb                   	sti    
c0009f2d:	8b 1d 08 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d108
c0009f33:	83 ec 08             	sub    esp,0x8
c0009f36:	6a 01                	push   0x1
c0009f38:	68 a4 3e 02 c0       	push   0xc0023ea4
c0009f3d:	e8 3c ca 00 00       	call   c001697e <Thr::loadDLL(char const*, bool)>
c0009f42:	83 c4 10             	add    esp,0x10
c0009f45:	83 ec 08             	sub    esp,0x8
c0009f48:	53                   	push   ebx
c0009f49:	50                   	push   eax
c0009f4a:	e8 81 cc 00 00       	call   c0016bd0 <Thr::executeDLL(unsigned long, void*)>
c0009f4f:	83 c4 10             	add    esp,0x10
c0009f52:	8b 1d 08 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d108
c0009f58:	83 ec 08             	sub    esp,0x8
c0009f5b:	6a 01                	push   0x1
c0009f5d:	68 be 3e 02 c0       	push   0xc0023ebe
c0009f62:	e8 17 ca 00 00       	call   c001697e <Thr::loadDLL(char const*, bool)>
c0009f67:	83 c4 10             	add    esp,0x10
c0009f6a:	83 ec 08             	sub    esp,0x8
c0009f6d:	53                   	push   ebx
c0009f6e:	50                   	push   eax
c0009f6f:	e8 5c cc 00 00       	call   c0016bd0 <Thr::executeDLL(unsigned long, void*)>
c0009f74:	83 c4 10             	add    esp,0x10
c0009f77:	eb fe                	jmp    c0009f77 <startGUI(void*)+0x63>

c0009f79 <startGUIVESA(void*)>:
c0009f79:	55                   	push   ebp
c0009f7a:	89 e5                	mov    ebp,esp
c0009f7c:	53                   	push   ebx
c0009f7d:	83 ec 04             	sub    esp,0x4
c0009f80:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c0009f88:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c0009f8d:	85 c0                	test   eax,eax
c0009f8f:	75 01                	jne    c0009f92 <startGUIVESA(void*)+0x19>
c0009f91:	fb                   	sti    
c0009f92:	8b 1d 08 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d108
c0009f98:	83 ec 08             	sub    esp,0x8
c0009f9b:	6a 01                	push   0x1
c0009f9d:	68 dc 3e 02 c0       	push   0xc0023edc
c0009fa2:	e8 d7 c9 00 00       	call   c001697e <Thr::loadDLL(char const*, bool)>
c0009fa7:	83 c4 10             	add    esp,0x10
c0009faa:	83 ec 08             	sub    esp,0x8
c0009fad:	53                   	push   ebx
c0009fae:	50                   	push   eax
c0009faf:	e8 1c cc 00 00       	call   c0016bd0 <Thr::executeDLL(unsigned long, void*)>
c0009fb4:	83 c4 10             	add    esp,0x10
c0009fb7:	8b 1d 08 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d108
c0009fbd:	83 ec 08             	sub    esp,0x8
c0009fc0:	6a 01                	push   0x1
c0009fc2:	68 be 3e 02 c0       	push   0xc0023ebe
c0009fc7:	e8 b2 c9 00 00       	call   c001697e <Thr::loadDLL(char const*, bool)>
c0009fcc:	83 c4 10             	add    esp,0x10
c0009fcf:	83 ec 08             	sub    esp,0x8
c0009fd2:	53                   	push   ebx
c0009fd3:	50                   	push   eax
c0009fd4:	e8 f7 cb 00 00       	call   c0016bd0 <Thr::executeDLL(unsigned long, void*)>
c0009fd9:	83 c4 10             	add    esp,0x10
c0009fdc:	eb fe                	jmp    c0009fdc <startGUIVESA(void*)+0x63>

c0009fde <sendKeyToTerminal(unsigned char)>:
c0009fde:	55                   	push   ebp
c0009fdf:	89 e5                	mov    ebp,esp
c0009fe1:	83 ec 28             	sub    esp,0x28
c0009fe4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009fe7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0009fea:	a1 f4 d1 02 c0       	mov    eax,ds:0xc002d1f4
c0009fef:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009ff3:	83 ec 08             	sub    esp,0x8
c0009ff6:	52                   	push   edx
c0009ff7:	50                   	push   eax
c0009ff8:	e8 17 89 00 00       	call   c0012914 <VgaText::receiveKey(unsigned char)>
c0009ffd:	83 c4 10             	add    esp,0x10
c000a000:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a004:	83 f8 0a             	cmp    eax,0xa
c000a007:	74 16                	je     c000a01f <sendKeyToTerminal(unsigned char)+0x41>
c000a009:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a00d:	83 f8 03             	cmp    eax,0x3
c000a010:	74 0d                	je     c000a01f <sendKeyToTerminal(unsigned char)+0x41>
c000a012:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a016:	83 f8 1c             	cmp    eax,0x1c
c000a019:	0f 85 92 00 00 00    	jne    c000a0b1 <sendKeyToTerminal(unsigned char)+0xd3>
c000a01f:	fa                   	cli    
c000a020:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c000a025:	83 c0 01             	add    eax,0x1
c000a028:	a3 70 da 02 c0       	mov    ds:0xc002da70,eax
c000a02d:	a1 6c da 02 c0       	mov    eax,ds:0xc002da6c
c000a032:	83 c0 01             	add    eax,0x1
c000a035:	a3 6c da 02 c0       	mov    ds:0xc002da6c,eax
c000a03a:	a1 80 c6 02 c0       	mov    eax,ds:0xc002c680
c000a03f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a042:	c7 05 80 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c680,0x0
c000a04c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000a050:	74 1f                	je     c000a071 <sendKeyToTerminal(unsigned char)+0x93>
c000a052:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a055:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000a058:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a05b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a05e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a061:	83 ec 0c             	sub    esp,0xc
c000a064:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000a067:	e8 14 d8 00 00       	call   c0017880 <unblockTask(ThreadControlBlock*)>
c000a06c:	83 c4 10             	add    esp,0x10
c000a06f:	eb db                	jmp    c000a04c <sendKeyToTerminal(unsigned char)+0x6e>
c000a071:	a1 6c da 02 c0       	mov    eax,ds:0xc002da6c
c000a076:	83 e8 01             	sub    eax,0x1
c000a079:	a3 6c da 02 c0       	mov    ds:0xc002da6c,eax
c000a07e:	a1 6c da 02 c0       	mov    eax,ds:0xc002da6c
c000a083:	85 c0                	test   eax,eax
c000a085:	75 18                	jne    c000a09f <sendKeyToTerminal(unsigned char)+0xc1>
c000a087:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c000a08c:	85 c0                	test   eax,eax
c000a08e:	74 0f                	je     c000a09f <sendKeyToTerminal(unsigned char)+0xc1>
c000a090:	c7 05 68 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da68,0x0
c000a09a:	e8 85 d4 00 00       	call   c0017524 <schedule()>
c000a09f:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c000a0a7:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c000a0ac:	85 c0                	test   eax,eax
c000a0ae:	75 01                	jne    c000a0b1 <sendKeyToTerminal(unsigned char)+0xd3>
c000a0b0:	fb                   	sti    
c000a0b1:	90                   	nop
c000a0b2:	c9                   	leave  
c000a0b3:	c3                   	ret    

c000a0b4 <sendKeyboardToken(KeyboardToken)>:
c000a0b4:	55                   	push   ebp
c000a0b5:	89 e5                	mov    ebp,esp
c000a0b7:	83 ec 18             	sub    esp,0x18
c000a0ba:	e8 24 64 00 00       	call   c00104e3 <KeUserIOReceived()>
c000a0bf:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000a0c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0c5:	0f b7 c0             	movzx  eax,ax
c000a0c8:	83 f2 01             	xor    edx,0x1
c000a0cb:	88 90 a0 c6 02 c0    	mov    BYTE PTR [eax-0x3ffd3960],dl
c000a0d1:	a1 88 c6 02 c0       	mov    eax,ds:0xc002c688
c000a0d6:	85 c0                	test   eax,eax
c000a0d8:	74 24                	je     c000a0fe <sendKeyboardToken(KeyboardToken)+0x4a>
c000a0da:	8b 0d 88 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c688
c000a0e0:	83 ec 04             	sub    esp,0x4
c000a0e3:	68 a0 c6 02 c0       	push   0xc002c6a0
c000a0e8:	83 ec 08             	sub    esp,0x8
c000a0eb:	89 e2                	mov    edx,esp
c000a0ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0f0:	89 02                	mov    DWORD PTR [edx],eax
c000a0f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a0f5:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000a0f9:	ff d1                	call   ecx
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000a102:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000a105:	0f b6 c0             	movzx  eax,al
c000a108:	85 c0                	test   eax,eax
c000a10a:	0f 84 da 00 00 00    	je     c000a1ea <sendKeyboardToken(KeyboardToken)+0x136>
c000a110:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a113:	0f b7 c0             	movzx  eax,ax
c000a116:	3d 18 03 00 00       	cmp    eax,0x318
c000a11b:	75 06                	jne    c000a123 <sendKeyboardToken(KeyboardToken)+0x6f>
c000a11d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000a123:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a126:	0f b7 c0             	movzx  eax,ax
c000a129:	3d 19 03 00 00       	cmp    eax,0x319
c000a12e:	75 06                	jne    c000a136 <sendKeyboardToken(KeyboardToken)+0x82>
c000a130:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000a136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a139:	0f b7 c0             	movzx  eax,ax
c000a13c:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a141:	75 06                	jne    c000a149 <sendKeyboardToken(KeyboardToken)+0x95>
c000a143:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000a149:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a14c:	0f b7 c0             	movzx  eax,ax
c000a14f:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a154:	75 06                	jne    c000a15c <sendKeyboardToken(KeyboardToken)+0xa8>
c000a156:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000a15c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a15f:	0f b7 c0             	movzx  eax,ax
c000a162:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a167:	75 06                	jne    c000a16f <sendKeyboardToken(KeyboardToken)+0xbb>
c000a169:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000a16f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a172:	0f b7 c0             	movzx  eax,ax
c000a175:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a17a:	75 06                	jne    c000a182 <sendKeyboardToken(KeyboardToken)+0xce>
c000a17c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a182:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a185:	0f b7 c0             	movzx  eax,ax
c000a188:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a18d:	75 06                	jne    c000a195 <sendKeyboardToken(KeyboardToken)+0xe1>
c000a18f:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000a195:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a198:	0f b7 c0             	movzx  eax,ax
c000a19b:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a1a0:	75 06                	jne    c000a1a8 <sendKeyboardToken(KeyboardToken)+0xf4>
c000a1a2:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000a1a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1ab:	0f b7 c0             	movzx  eax,ax
c000a1ae:	3d 20 03 00 00       	cmp    eax,0x320
c000a1b3:	75 06                	jne    c000a1bb <sendKeyboardToken(KeyboardToken)+0x107>
c000a1b5:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000a1bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1be:	0f b7 c0             	movzx  eax,ax
c000a1c1:	3d 21 03 00 00       	cmp    eax,0x321
c000a1c6:	75 06                	jne    c000a1ce <sendKeyboardToken(KeyboardToken)+0x11a>
c000a1c8:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000a1ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1d1:	0f b7 c0             	movzx  eax,ax
c000a1d4:	3d 22 03 00 00       	cmp    eax,0x322
c000a1d9:	0f 85 f1 00 00 00    	jne    c000a2d0 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a1df:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000a1e5:	e9 e6 00 00 00       	jmp    c000a2d0 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a1ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1ed:	0f b7 c0             	movzx  eax,ax
c000a1f0:	3d 18 03 00 00       	cmp    eax,0x318
c000a1f5:	75 0a                	jne    c000a201 <sendKeyboardToken(KeyboardToken)+0x14d>
c000a1f7:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000a1fd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a204:	0f b7 c0             	movzx  eax,ax
c000a207:	3d 19 03 00 00       	cmp    eax,0x319
c000a20c:	75 0a                	jne    c000a218 <sendKeyboardToken(KeyboardToken)+0x164>
c000a20e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000a214:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a218:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a21b:	0f b7 c0             	movzx  eax,ax
c000a21e:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a223:	75 0a                	jne    c000a22f <sendKeyboardToken(KeyboardToken)+0x17b>
c000a225:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000a22b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a22f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a232:	0f b7 c0             	movzx  eax,ax
c000a235:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a23a:	75 0a                	jne    c000a246 <sendKeyboardToken(KeyboardToken)+0x192>
c000a23c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000a242:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a246:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a249:	0f b7 c0             	movzx  eax,ax
c000a24c:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a251:	75 0a                	jne    c000a25d <sendKeyboardToken(KeyboardToken)+0x1a9>
c000a253:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000a259:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a25d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a260:	0f b7 c0             	movzx  eax,ax
c000a263:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a268:	75 0a                	jne    c000a274 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000a26a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a270:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a274:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a277:	0f b7 c0             	movzx  eax,ax
c000a27a:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a27f:	75 0a                	jne    c000a28b <sendKeyboardToken(KeyboardToken)+0x1d7>
c000a281:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000a287:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a28b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a28e:	0f b7 c0             	movzx  eax,ax
c000a291:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a296:	75 0a                	jne    c000a2a2 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000a298:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000a29e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2a5:	0f b7 c0             	movzx  eax,ax
c000a2a8:	3d 20 03 00 00       	cmp    eax,0x320
c000a2ad:	75 0a                	jne    c000a2b9 <sendKeyboardToken(KeyboardToken)+0x205>
c000a2af:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000a2b5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a2b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2bc:	0f b7 c0             	movzx  eax,ax
c000a2bf:	3d 21 03 00 00       	cmp    eax,0x321
c000a2c4:	75 0a                	jne    c000a2d0 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a2c6:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000a2cc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a2d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2d3:	0f b7 c0             	movzx  eax,ax
c000a2d6:	3d 00 02 00 00       	cmp    eax,0x200
c000a2db:	75 2f                	jne    c000a30c <sendKeyboardToken(KeyboardToken)+0x258>
c000a2dd:	a0 a0 ca 02 c0       	mov    al,ds:0xc002caa0
c000a2e2:	83 f0 01             	xor    eax,0x1
c000a2e5:	0f b6 c0             	movzx  eax,al
c000a2e8:	85 c0                	test   eax,eax
c000a2ea:	74 20                	je     c000a30c <sendKeyboardToken(KeyboardToken)+0x258>
c000a2ec:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c000a2f1:	6a 01                	push   0x1
c000a2f3:	6a 00                	push   0x0
c000a2f5:	68 14 9f 00 c0       	push   0xc0009f14
c000a2fa:	50                   	push   eax
c000a2fb:	e8 64 cf 00 00       	call   c0017264 <Process::createThread(void (*)(void*), void*, int)>
c000a300:	83 c4 10             	add    esp,0x10
c000a303:	c6 05 a0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002caa0,0x1
c000a30a:	eb 3a                	jmp    c000a346 <sendKeyboardToken(KeyboardToken)+0x292>
c000a30c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a30f:	0f b7 c0             	movzx  eax,ax
c000a312:	3d 01 02 00 00       	cmp    eax,0x201
c000a317:	75 2d                	jne    c000a346 <sendKeyboardToken(KeyboardToken)+0x292>
c000a319:	a0 a0 ca 02 c0       	mov    al,ds:0xc002caa0
c000a31e:	83 f0 01             	xor    eax,0x1
c000a321:	0f b6 c0             	movzx  eax,al
c000a324:	85 c0                	test   eax,eax
c000a326:	74 1e                	je     c000a346 <sendKeyboardToken(KeyboardToken)+0x292>
c000a328:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c000a32d:	6a 01                	push   0x1
c000a32f:	6a 00                	push   0x0
c000a331:	68 79 9f 00 c0       	push   0xc0009f79
c000a336:	50                   	push   eax
c000a337:	e8 28 cf 00 00       	call   c0017264 <Process::createThread(void (*)(void*), void*, int)>
c000a33c:	83 c4 10             	add    esp,0x10
c000a33f:	c6 05 a0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002caa0,0x1
c000a346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a349:	0f b7 c0             	movzx  eax,ax
c000a34c:	3d 25 03 00 00       	cmp    eax,0x325
c000a351:	75 06                	jne    c000a359 <sendKeyboardToken(KeyboardToken)+0x2a5>
c000a353:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000a359:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a35c:	0f b7 c0             	movzx  eax,ax
c000a35f:	3d 24 03 00 00       	cmp    eax,0x324
c000a364:	75 06                	jne    c000a36c <sendKeyboardToken(KeyboardToken)+0x2b8>
c000a366:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000a36c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a36f:	0f b7 c0             	movzx  eax,ax
c000a372:	3d 23 03 00 00       	cmp    eax,0x323
c000a377:	75 06                	jne    c000a37f <sendKeyboardToken(KeyboardToken)+0x2cb>
c000a379:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000a37f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a382:	0f b7 c0             	movzx  eax,ax
c000a385:	3d 26 03 00 00       	cmp    eax,0x326
c000a38a:	75 06                	jne    c000a392 <sendKeyboardToken(KeyboardToken)+0x2de>
c000a38c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000a392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a395:	0f b7 c0             	movzx  eax,ax
c000a398:	3d 27 03 00 00       	cmp    eax,0x327
c000a39d:	75 06                	jne    c000a3a5 <sendKeyboardToken(KeyboardToken)+0x2f1>
c000a39f:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000a3a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3a8:	0f b7 c0             	movzx  eax,ax
c000a3ab:	3d 22 03 00 00       	cmp    eax,0x322
c000a3b0:	75 06                	jne    c000a3b8 <sendKeyboardToken(KeyboardToken)+0x304>
c000a3b2:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000a3b8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000a3bc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a3bf:	83 f0 01             	xor    eax,0x1
c000a3c2:	0f b6 c0             	movzx  eax,al
c000a3c5:	85 c0                	test   eax,eax
c000a3c7:	74 7c                	je     c000a445 <sendKeyboardToken(KeyboardToken)+0x391>
c000a3c9:	a0 a1 c7 02 c0       	mov    al,ds:0xc002c7a1
c000a3ce:	0f b6 c0             	movzx  eax,al
c000a3d1:	85 c0                	test   eax,eax
c000a3d3:	74 43                	je     c000a418 <sendKeyboardToken(KeyboardToken)+0x364>
c000a3d5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a3d9:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000a3dd:	85 c0                	test   eax,eax
c000a3df:	74 2b                	je     c000a40c <sendKeyboardToken(KeyboardToken)+0x358>
c000a3e1:	8b 15 a4 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002caa4
c000a3e7:	89 d0                	mov    eax,edx
c000a3e9:	c1 e0 02             	shl    eax,0x2
c000a3ec:	01 d0                	add    eax,edx
c000a3ee:	01 c0                	add    eax,eax
c000a3f0:	a3 a4 ca 02 c0       	mov    ds:0xc002caa4,eax
c000a3f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3f8:	0f b7 c0             	movzx  eax,ax
c000a3fb:	8d 50 d0             	lea    edx,[eax-0x30]
c000a3fe:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a403:	01 d0                	add    eax,edx
c000a405:	a3 a4 ca 02 c0       	mov    ds:0xc002caa4,eax
c000a40a:	eb 71                	jmp    c000a47d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a40c:	c7 05 a4 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002caa4,0x0
c000a416:	eb 65                	jmp    c000a47d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a418:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a41d:	85 c0                	test   eax,eax
c000a41f:	74 18                	je     c000a439 <sendKeyboardToken(KeyboardToken)+0x385>
c000a421:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a426:	0f b6 c0             	movzx  eax,al
c000a429:	83 ec 0c             	sub    esp,0xc
c000a42c:	50                   	push   eax
c000a42d:	e8 ac fb ff ff       	call   c0009fde <sendKeyToTerminal(unsigned char)>
c000a432:	83 c4 10             	add    esp,0x10
c000a435:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a439:	c7 05 a4 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002caa4,0x0
c000a443:	eb 38                	jmp    c000a47d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a445:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a448:	0f b7 c0             	movzx  eax,ax
c000a44b:	3d 01 01 00 00       	cmp    eax,0x101
c000a450:	75 2b                	jne    c000a47d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a452:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a457:	85 c0                	test   eax,eax
c000a459:	74 18                	je     c000a473 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000a45b:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a460:	0f b6 c0             	movzx  eax,al
c000a463:	83 ec 0c             	sub    esp,0xc
c000a466:	50                   	push   eax
c000a467:	e8 72 fb ff ff       	call   c0009fde <sendKeyToTerminal(unsigned char)>
c000a46c:	83 c4 10             	add    esp,0x10
c000a46f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a473:	c7 05 a4 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002caa4,0x0
c000a47d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a480:	83 f0 01             	xor    eax,0x1
c000a483:	0f b6 c0             	movzx  eax,al
c000a486:	85 c0                	test   eax,eax
c000a488:	74 5a                	je     c000a4e4 <sendKeyboardToken(KeyboardToken)+0x430>
c000a48a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a48d:	83 f0 01             	xor    eax,0x1
c000a490:	0f b6 c0             	movzx  eax,al
c000a493:	85 c0                	test   eax,eax
c000a495:	74 4d                	je     c000a4e4 <sendKeyboardToken(KeyboardToken)+0x430>
c000a497:	a0 a0 c7 02 c0       	mov    al,ds:0xc002c7a0
c000a49c:	83 f0 01             	xor    eax,0x1
c000a49f:	0f b6 c0             	movzx  eax,al
c000a4a2:	85 c0                	test   eax,eax
c000a4a4:	74 3e                	je     c000a4e4 <sendKeyboardToken(KeyboardToken)+0x430>
c000a4a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4a9:	0f b7 c0             	movzx  eax,ax
c000a4ac:	83 f8 1f             	cmp    eax,0x1f
c000a4af:	76 0b                	jbe    c000a4bc <sendKeyboardToken(KeyboardToken)+0x408>
c000a4b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4b4:	0f b7 c0             	movzx  eax,ax
c000a4b7:	83 f8 7e             	cmp    eax,0x7e
c000a4ba:	76 16                	jbe    c000a4d2 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a4bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4bf:	0f b7 c0             	movzx  eax,ax
c000a4c2:	83 f8 0a             	cmp    eax,0xa
c000a4c5:	74 0b                	je     c000a4d2 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a4c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4ca:	0f b7 c0             	movzx  eax,ax
c000a4cd:	83 f8 08             	cmp    eax,0x8
c000a4d0:	75 12                	jne    c000a4e4 <sendKeyboardToken(KeyboardToken)+0x430>
c000a4d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4d5:	0f b6 c0             	movzx  eax,al
c000a4d8:	83 ec 0c             	sub    esp,0xc
c000a4db:	50                   	push   eax
c000a4dc:	e8 fd fa ff ff       	call   c0009fde <sendKeyToTerminal(unsigned char)>
c000a4e1:	83 c4 10             	add    esp,0x10
c000a4e4:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a4e7:	83 f0 01             	xor    eax,0x1
c000a4ea:	0f b6 c0             	movzx  eax,al
c000a4ed:	85 c0                	test   eax,eax
c000a4ef:	74 5d                	je     c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4f1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a4f4:	83 f0 01             	xor    eax,0x1
c000a4f7:	0f b6 c0             	movzx  eax,al
c000a4fa:	85 c0                	test   eax,eax
c000a4fc:	74 50                	je     c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4fe:	a0 a0 c7 02 c0       	mov    al,ds:0xc002c7a0
c000a503:	0f b6 c0             	movzx  eax,al
c000a506:	85 c0                	test   eax,eax
c000a508:	74 44                	je     c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a50a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a50d:	0f b7 c0             	movzx  eax,ax
c000a510:	83 f8 3f             	cmp    eax,0x3f
c000a513:	76 39                	jbe    c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a515:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a518:	0f b7 c0             	movzx  eax,ax
c000a51b:	83 f8 7f             	cmp    eax,0x7f
c000a51e:	77 2e                	ja     c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a520:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a523:	88 c2                	mov    dl,al
c000a525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a528:	0f b7 c0             	movzx  eax,ax
c000a52b:	83 f8 5f             	cmp    eax,0x5f
c000a52e:	76 04                	jbe    c000a534 <sendKeyboardToken(KeyboardToken)+0x480>
c000a530:	b0 20                	mov    al,0x20
c000a532:	eb 02                	jmp    c000a536 <sendKeyboardToken(KeyboardToken)+0x482>
c000a534:	b0 00                	mov    al,0x0
c000a536:	89 d1                	mov    ecx,edx
c000a538:	29 c1                	sub    ecx,eax
c000a53a:	89 c8                	mov    eax,ecx
c000a53c:	83 e8 40             	sub    eax,0x40
c000a53f:	0f b6 c0             	movzx  eax,al
c000a542:	83 ec 0c             	sub    esp,0xc
c000a545:	50                   	push   eax
c000a546:	e8 93 fa ff ff       	call   c0009fde <sendKeyToTerminal(unsigned char)>
c000a54b:	83 c4 10             	add    esp,0x10
c000a54e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a551:	0f b7 c0             	movzx  eax,ax
c000a554:	3d 00 03 00 00       	cmp    eax,0x300
c000a559:	75 12                	jne    c000a56d <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a55b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a55e:	83 f0 01             	xor    eax,0x1
c000a561:	0f b6 c0             	movzx  eax,al
c000a564:	85 c0                	test   eax,eax
c000a566:	74 05                	je     c000a56d <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a568:	e8 9c 7a 00 00       	call   c0012009 <doTerminalCycle()>
c000a56d:	90                   	nop
c000a56e:	c9                   	leave  
c000a56f:	c3                   	ret    

c000a570 <clearInternalKeybuffer(VgaText*)>:
c000a570:	55                   	push   ebp
c000a571:	89 e5                	mov    ebp,esp
c000a573:	83 ec 08             	sub    esp,0x8
c000a576:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a579:	05 02 01 00 00       	add    eax,0x102
c000a57e:	83 ec 0c             	sub    esp,0xc
c000a581:	50                   	push   eax
c000a582:	e8 e9 5f ff ff       	call   c0000570 <strlen>
c000a587:	83 c4 10             	add    esp,0x10
c000a58a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a58d:	81 c2 02 01 00 00    	add    edx,0x102
c000a593:	83 ec 04             	sub    esp,0x4
c000a596:	50                   	push   eax
c000a597:	6a 00                	push   0x0
c000a599:	52                   	push   edx
c000a59a:	e8 51 5f ff ff       	call   c00004f0 <memset>
c000a59f:	83 c4 10             	add    esp,0x10
c000a5a2:	90                   	nop
c000a5a3:	c9                   	leave  
c000a5a4:	c3                   	ret    

c000a5a5 <readKeyboard(VgaText*, char*, unsigned long)>:
c000a5a5:	55                   	push   ebp
c000a5a6:	89 e5                	mov    ebp,esp
c000a5a8:	83 ec 18             	sub    esp,0x18
c000a5ab:	a1 88 c6 02 c0       	mov    eax,ds:0xc002c688
c000a5b0:	85 c0                	test   eax,eax
c000a5b2:	74 2a                	je     c000a5de <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000a5b4:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000a5ba:	8b 0d 88 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c688
c000a5c0:	83 ec 04             	sub    esp,0x4
c000a5c3:	68 a0 c6 02 c0       	push   0xc002c6a0
c000a5c8:	83 ec 08             	sub    esp,0x8
c000a5cb:	89 e2                	mov    edx,esp
c000a5cd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000a5d0:	89 02                	mov    DWORD PTR [edx],eax
c000a5d2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a5d5:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000a5d9:	ff d1                	call   ecx
c000a5db:	83 c4 10             	add    esp,0x10
c000a5de:	fb                   	sti    
c000a5df:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000a5e6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000a5ea:	0f 84 08 01 00 00    	je     c000a6f8 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000a5f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5f3:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a5f9:	0f be c0             	movsx  eax,al
c000a5fc:	85 c0                	test   eax,eax
c000a5fe:	75 27                	jne    c000a627 <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000a600:	fa                   	cli    
c000a601:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c000a606:	83 c0 01             	add    eax,0x1
c000a609:	a3 70 da 02 c0       	mov    ds:0xc002da70,eax
c000a60e:	e8 11 cf 00 00       	call   c0017524 <schedule()>
c000a613:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c000a61b:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c000a620:	85 c0                	test   eax,eax
c000a622:	75 cc                	jne    c000a5f0 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a624:	fb                   	sti    
c000a625:	eb c9                	jmp    c000a5f0 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a627:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a62a:	8d 50 01             	lea    edx,[eax+0x1]
c000a62d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000a630:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a633:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000a639:	88 10                	mov    BYTE PTR [eax],dl
c000a63b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a63e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a644:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000a647:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a64b:	83 f8 03             	cmp    eax,0x3
c000a64e:	75 1e                	jne    c000a66e <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000a650:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a655:	8b 00                	mov    eax,DWORD PTR [eax]
c000a657:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a65a:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a660:	83 ec 08             	sub    esp,0x8
c000a663:	6a 02                	push   0x2
c000a665:	50                   	push   eax
c000a666:	e8 0c 68 00 00       	call   c0010e77 <KeRaiseSignal(SigHandlerBlock*, int)>
c000a66b:	83 c4 10             	add    esp,0x10
c000a66e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a672:	83 f8 1c             	cmp    eax,0x1c
c000a675:	75 1e                	jne    c000a695 <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000a677:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a67c:	8b 00                	mov    eax,DWORD PTR [eax]
c000a67e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a681:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a687:	83 ec 08             	sub    esp,0x8
c000a68a:	6a 09                	push   0x9
c000a68c:	50                   	push   eax
c000a68d:	e8 e5 67 00 00       	call   c0010e77 <KeRaiseSignal(SigHandlerBlock*, int)>
c000a692:	83 c4 10             	add    esp,0x10
c000a695:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a698:	05 02 01 00 00       	add    eax,0x102
c000a69d:	83 ec 0c             	sub    esp,0xc
c000a6a0:	50                   	push   eax
c000a6a1:	e8 ca 5e ff ff       	call   c0000570 <strlen>
c000a6a6:	83 c4 10             	add    esp,0x10
c000a6a9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a6ac:	81 c2 02 01 00 00    	add    edx,0x102
c000a6b2:	8d 4a 01             	lea    ecx,[edx+0x1]
c000a6b5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a6b8:	81 c2 02 01 00 00    	add    edx,0x102
c000a6be:	83 ec 04             	sub    esp,0x4
c000a6c1:	50                   	push   eax
c000a6c2:	51                   	push   ecx
c000a6c3:	52                   	push   edx
c000a6c4:	e8 07 5d ff ff       	call   c00003d0 <memmove>
c000a6c9:	83 c4 10             	add    esp,0x10
c000a6cc:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000a6d0:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000a6d4:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a6d8:	83 f8 0a             	cmp    eax,0xa
c000a6db:	74 16                	je     c000a6f3 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a6dd:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a6e1:	83 f8 03             	cmp    eax,0x3
c000a6e4:	74 0d                	je     c000a6f3 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a6e6:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a6ea:	83 f8 1c             	cmp    eax,0x1c
c000a6ed:	0f 85 f3 fe ff ff    	jne    c000a5e6 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000a6f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a6f6:	eb 03                	jmp    c000a6fb <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000a6f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a6fb:	c9                   	leave  
c000a6fc:	c3                   	ret    
c000a6fd:	90                   	nop

c000a6fe <Keyboard::Keyboard(char const*)>:
c000a6fe:	83 ec 0c             	sub    esp,0xc
c000a701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a705:	83 ec 08             	sub    esp,0x8
c000a708:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a70c:	50                   	push   eax
c000a70d:	e8 a4 f4 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000a712:	83 c4 10             	add    esp,0x10
c000a715:	ba 00 3f 02 c0       	mov    edx,0xc0023f00
c000a71a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a71e:	89 10                	mov    DWORD PTR [eax],edx
c000a720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a724:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000a72e:	c6 05 84 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c684,0x1
c000a735:	90                   	nop
c000a736:	83 c4 0c             	add    esp,0xc
c000a739:	c3                   	ret    

c000a73a <Keyboard::~Keyboard()>:
c000a73a:	83 ec 0c             	sub    esp,0xc
c000a73d:	ba 00 3f 02 c0       	mov    edx,0xc0023f00
c000a742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a746:	89 10                	mov    DWORD PTR [eax],edx
c000a748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a74c:	83 ec 0c             	sub    esp,0xc
c000a74f:	50                   	push   eax
c000a750:	e8 01 f2 ff ff       	call   c0009956 <Device::~Device()>
c000a755:	83 c4 10             	add    esp,0x10
c000a758:	90                   	nop
c000a759:	83 c4 0c             	add    esp,0xc
c000a75c:	c3                   	ret    
c000a75d:	90                   	nop

c000a75e <Keyboard::~Keyboard()>:
c000a75e:	83 ec 0c             	sub    esp,0xc
c000a761:	83 ec 0c             	sub    esp,0xc
c000a764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a768:	e8 cd ff ff ff       	call   c000a73a <Keyboard::~Keyboard()>
c000a76d:	83 c4 10             	add    esp,0x10
c000a770:	83 ec 08             	sub    esp,0x8
c000a773:	68 5c 01 00 00       	push   0x15c
c000a778:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a77c:	e8 fb 2a 00 00       	call   c000d27c <operator delete(void*, unsigned long)>
c000a781:	83 c4 10             	add    esp,0x10
c000a784:	83 c4 0c             	add    esp,0xc
c000a787:	c3                   	ret    

c000a788 <LogicalDisk::close(int, int, void*)>:
c000a788:	83 c8 ff             	or     eax,0xffffffff
c000a78b:	c3                   	ret    

c000a78c <LogicalDisk::~LogicalDisk()>:
c000a78c:	83 ec 0c             	sub    esp,0xc
c000a78f:	ba 78 3f 02 c0       	mov    edx,0xc0023f78
c000a794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a798:	89 10                	mov    DWORD PTR [eax],edx
c000a79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a79e:	83 ec 0c             	sub    esp,0xc
c000a7a1:	50                   	push   eax
c000a7a2:	e8 af f1 ff ff       	call   c0009956 <Device::~Device()>
c000a7a7:	83 c4 10             	add    esp,0x10
c000a7aa:	90                   	nop
c000a7ab:	83 c4 0c             	add    esp,0xc
c000a7ae:	c3                   	ret    
c000a7af:	90                   	nop

c000a7b0 <LogicalDisk::~LogicalDisk()>:
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	83 ec 0c             	sub    esp,0xc
c000a7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ba:	e8 cd ff ff ff       	call   c000a78c <LogicalDisk::~LogicalDisk()>
c000a7bf:	83 c4 10             	add    esp,0x10
c000a7c2:	83 ec 08             	sub    esp,0x8
c000a7c5:	68 78 01 00 00       	push   0x178
c000a7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ce:	e8 a9 2a 00 00       	call   c000d27c <operator delete(void*, unsigned long)>
c000a7d3:	83 c4 10             	add    esp,0x10
c000a7d6:	83 c4 0c             	add    esp,0xc
c000a7d9:	c3                   	ret    

c000a7da <LogicalDisk::open(int, int, void*)>:
c000a7da:	83 ec 18             	sub    esp,0x18
c000a7dd:	68 2c 3f 02 c0       	push   0xc0023f2c
c000a7e2:	e8 d9 53 00 00       	call   c000fbc0 <KePanic(char const*)>
c000a7e7:	83 c8 ff             	or     eax,0xffffffff
c000a7ea:	83 c4 1c             	add    esp,0x1c
c000a7ed:	c3                   	ret    

c000a7ee <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000a7ee:	53                   	push   ebx
c000a7ef:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a7f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a7f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a7fb:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000a801:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000a807:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000a80d:	77 10                	ja     c000a81f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000a80f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000a815:	89 d3                	mov    ebx,edx
c000a817:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000a81d:	72 05                	jb     c000a824 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000a81f:	83 c8 ff             	or     eax,0xffffffff
c000a822:	89 c2                	mov    edx,eax
c000a824:	5b                   	pop    ebx
c000a825:	c3                   	ret    

c000a826 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000a826:	56                   	push   esi
c000a827:	83 c8 ff             	or     eax,0xffffffff
c000a82a:	53                   	push   ebx
c000a82b:	89 c2                	mov    edx,eax
c000a82d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a831:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000a835:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a839:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a83f:	77 27                	ja     c000a868 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a841:	89 d8                	mov    eax,ebx
c000a843:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000a849:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000a84f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000a854:	89 c2                	mov    edx,eax
c000a856:	73 10                	jae    c000a868 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a858:	89 c8                	mov    eax,ecx
c000a85a:	89 da                	mov    edx,ebx
c000a85c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000a862:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000a868:	5b                   	pop    ebx
c000a869:	5e                   	pop    esi
c000a86a:	c3                   	ret    
c000a86b:	90                   	nop

c000a86c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a86c:	83 ec 1c             	sub    esp,0x1c
c000a86f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a873:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a877:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a87b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a87f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a883:	89 04 24             	mov    DWORD PTR [esp],eax
c000a886:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a88a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a88e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a892:	83 ec 08             	sub    esp,0x8
c000a895:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a899:	50                   	push   eax
c000a89a:	e8 17 f3 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000a89f:	83 c4 10             	add    esp,0x10
c000a8a2:	ba 78 3f 02 c0       	mov    edx,0xc0023f78
c000a8a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8ab:	89 10                	mov    DWORD PTR [eax],edx
c000a8ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8b1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a8b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8bc:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000a8c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8c7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a8ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8d2:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000a8dc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a8e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a8e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a8e8:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000a8ee:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000a8f4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a8f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a8fb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8ff:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000a905:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000a90b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a90f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a913:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000a919:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a91d:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a927:	90                   	nop
c000a928:	83 c4 1c             	add    esp,0x1c
c000a92b:	c3                   	ret    

c000a92c <LogicalDisk::assignDriveLetter()>:
c000a92c:	55                   	push   ebp
c000a92d:	57                   	push   edi
c000a92e:	56                   	push   esi
c000a92f:	53                   	push   ebx
c000a930:	83 ec 14             	sub    esp,0x14
c000a933:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a937:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000a93d:	b0 41                	mov    al,0x41
c000a93f:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000a945:	84 d2                	test   dl,dl
c000a947:	75 02                	jne    c000a94b <LogicalDisk::assignDriveLetter()+0x1f>
c000a949:	b0 43                	mov    al,0x43
c000a94b:	8b 3d c0 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002cac0
c000a951:	0f b6 ca             	movzx  ecx,dl
c000a954:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000a958:	0f be e8             	movsx  ebp,al
c000a95b:	8b 3d c4 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002cac4
c000a961:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a965:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000a969:	3c 43                	cmp    al,0x43
c000a96b:	75 10                	jne    c000a97d <LogicalDisk::assignDriveLetter()+0x51>
c000a96d:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000a974:	75 5a                	jne    c000a9d0 <LogicalDisk::assignDriveLetter()+0xa4>
c000a976:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a97b:	75 53                	jne    c000a9d0 <LogicalDisk::assignDriveLetter()+0xa4>
c000a97d:	8d 75 bf             	lea    esi,[ebp-0x41]
c000a980:	ba 01 00 00 00       	mov    edx,0x1
c000a985:	89 34 24             	mov    DWORD PTR [esp],esi
c000a988:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000a98b:	d3 e2                	shl    edx,cl
c000a98d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a991:	89 d7                	mov    edi,edx
c000a993:	89 d6                	mov    esi,edx
c000a995:	c1 ff 1f             	sar    edi,0x1f
c000a998:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000a99c:	21 f9                	and    ecx,edi
c000a99e:	09 d1                	or     ecx,edx
c000a9a0:	75 2e                	jne    c000a9d0 <LogicalDisk::assignDriveLetter()+0xa4>
c000a9a2:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000a9a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9aa:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000a9b0:	09 f2                	or     edx,esi
c000a9b2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000a9b5:	89 15 c0 ca 02 c0    	mov    DWORD PTR ds:0xc002cac0,edx
c000a9bb:	89 1c b5 e0 ca 02 c0 	mov    DWORD PTR [esi*4-0x3ffd3520],ebx
c000a9c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a9c6:	09 fa                	or     edx,edi
c000a9c8:	89 15 c4 ca 02 c0    	mov    DWORD PTR ds:0xc002cac4,edx
c000a9ce:	eb 0d                	jmp    c000a9dd <LogicalDisk::assignDriveLetter()+0xb1>
c000a9d0:	8d 50 01             	lea    edx,[eax+0x1]
c000a9d3:	45                   	inc    ebp
c000a9d4:	88 d0                	mov    al,dl
c000a9d6:	80 fa 5b             	cmp    dl,0x5b
c000a9d9:	75 8e                	jne    c000a969 <LogicalDisk::assignDriveLetter()+0x3d>
c000a9db:	31 c0                	xor    eax,eax
c000a9dd:	83 c4 14             	add    esp,0x14
c000a9e0:	5b                   	pop    ebx
c000a9e1:	5e                   	pop    esi
c000a9e2:	5f                   	pop    edi
c000a9e3:	5d                   	pop    ebp
c000a9e4:	c3                   	ret    
c000a9e5:	90                   	nop

c000a9e6 <LogicalDisk::mount()>:
c000a9e6:	56                   	push   esi
c000a9e7:	53                   	push   ebx
c000a9e8:	53                   	push   ebx
c000a9e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a9ed:	8b 1d 04 c3 02 c0    	mov    ebx,DWORD PTR ds:0xc002c304
c000a9f3:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a9fd:	85 db                	test   ebx,ebx
c000a9ff:	74 27                	je     c000aa28 <LogicalDisk::mount()+0x42>
c000aa01:	51                   	push   ecx
c000aa02:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000aa09:	8b 13                	mov    edx,DWORD PTR [ebx]
c000aa0b:	83 e8 41             	sub    eax,0x41
c000aa0e:	50                   	push   eax
c000aa0f:	56                   	push   esi
c000aa10:	53                   	push   ebx
c000aa11:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000aa14:	83 c4 10             	add    esp,0x10
c000aa17:	84 c0                	test   al,al
c000aa19:	74 08                	je     c000aa23 <LogicalDisk::mount()+0x3d>
c000aa1b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000aa21:	eb 07                	jmp    c000aa2a <LogicalDisk::mount()+0x44>
c000aa23:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000aa26:	eb d5                	jmp    c000a9fd <LogicalDisk::mount()+0x17>
c000aa28:	31 c0                	xor    eax,eax
c000aa2a:	5a                   	pop    edx
c000aa2b:	5b                   	pop    ebx
c000aa2c:	5e                   	pop    esi
c000aa2d:	c3                   	ret    

c000aa2e <LogicalDisk::unmount()>:
c000aa2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa32:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000aa3c:	c3                   	ret    
c000aa3d:	90                   	nop

c000aa3e <LogicalDisk::eject()>:
c000aa3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa42:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000aa48:	8b 10                	mov    edx,DWORD PTR [eax]
c000aa4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa4e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000aa51:	90                   	nop

c000aa52 <LogicalDisk::unassignDriveLetter()>:
c000aa52:	57                   	push   edi
c000aa53:	56                   	push   esi
c000aa54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aa58:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000aa5f:	85 c9                	test   ecx,ecx
c000aa61:	75 0f                	jne    c000aa72 <LogicalDisk::unassignDriveLetter()+0x20>
c000aa63:	c7 44 24 0c 50 3f 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023f50
c000aa6b:	5e                   	pop    esi
c000aa6c:	5f                   	pop    edi
c000aa6d:	e9 4e 51 00 00       	jmp    c000fbc0 <KePanic(char const*)>
c000aa72:	83 e9 41             	sub    ecx,0x41
c000aa75:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000aa7c:	b8 01 00 00 00       	mov    eax,0x1
c000aa81:	c7 04 8d e0 ca 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd3520],0x0
c000aa8c:	d3 e0                	shl    eax,cl
c000aa8e:	89 c7                	mov    edi,eax
c000aa90:	f7 d0                	not    eax
c000aa92:	c1 ff 1f             	sar    edi,0x1f
c000aa95:	21 05 c0 ca 02 c0    	and    DWORD PTR ds:0xc002cac0,eax
c000aa9b:	89 fe                	mov    esi,edi
c000aa9d:	f7 d6                	not    esi
c000aa9f:	21 35 c4 ca 02 c0    	and    DWORD PTR ds:0xc002cac4,esi
c000aaa5:	5e                   	pop    esi
c000aaa6:	5f                   	pop    edi
c000aaa7:	c3                   	ret    

c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>:
c000aaa8:	57                   	push   edi
c000aaa9:	56                   	push   esi
c000aaaa:	53                   	push   ebx
c000aaab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aaaf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aab3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aab7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aabb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aac1:	77 41                	ja     c000ab04 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000aac3:	99                   	cdq    
c000aac4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aaca:	01 c8                	add    eax,ecx
c000aacc:	11 da                	adc    edx,ebx
c000aace:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aad4:	19 d7                	sbb    edi,edx
c000aad6:	72 33                	jb     c000ab0b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000aad8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aade:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aae4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aae8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aaec:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000aaf2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aaf8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aafc:	5b                   	pop    ebx
c000aafd:	5e                   	pop    esi
c000aafe:	5f                   	pop    edi
c000aaff:	e9 a2 0b 00 00       	jmp    c000b6a6 <VCache::read(unsigned long long, int, void*)>
c000ab04:	b8 05 00 00 00       	mov    eax,0x5
c000ab09:	eb 05                	jmp    c000ab10 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000ab0b:	b8 07 00 00 00       	mov    eax,0x7
c000ab10:	5b                   	pop    ebx
c000ab11:	5e                   	pop    esi
c000ab12:	5f                   	pop    edi
c000ab13:	c3                   	ret    

c000ab14 <LogicalDisk::write(unsigned long long, int, void*)>:
c000ab14:	57                   	push   edi
c000ab15:	56                   	push   esi
c000ab16:	53                   	push   ebx
c000ab17:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ab1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ab1f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ab23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab27:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ab2d:	77 41                	ja     c000ab70 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000ab2f:	99                   	cdq    
c000ab30:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ab36:	01 c8                	add    eax,ecx
c000ab38:	11 da                	adc    edx,ebx
c000ab3a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ab40:	19 d7                	sbb    edi,edx
c000ab42:	72 33                	jb     c000ab77 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000ab44:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ab4a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ab50:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ab54:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ab58:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ab5e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ab64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ab68:	5b                   	pop    ebx
c000ab69:	5e                   	pop    esi
c000ab6a:	5f                   	pop    edi
c000ab6b:	e9 68 09 00 00       	jmp    c000b4d8 <VCache::write(unsigned long long, int, void*)>
c000ab70:	b8 05 00 00 00       	mov    eax,0x5
c000ab75:	eb 05                	jmp    c000ab7c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ab77:	b8 07 00 00 00       	mov    eax,0x7
c000ab7c:	5b                   	pop    ebx
c000ab7d:	5e                   	pop    esi
c000ab7e:	5f                   	pop    edi
c000ab7f:	c3                   	ret    

c000ab80 <Mouse::Mouse(char const*)>:
c000ab80:	83 ec 0c             	sub    esp,0xc
c000ab83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab87:	83 ec 08             	sub    esp,0x8
c000ab8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab8e:	50                   	push   eax
c000ab8f:	e8 22 f0 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000ab94:	83 c4 10             	add    esp,0x10
c000ab97:	ba a4 3f 02 c0       	mov    edx,0xc0023fa4
c000ab9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aba0:	89 10                	mov    DWORD PTR [eax],edx
c000aba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aba6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000abb0:	90                   	nop
c000abb1:	83 c4 0c             	add    esp,0xc
c000abb4:	c3                   	ret    
c000abb5:	90                   	nop
c000abb6:	66 90                	xchg   ax,ax

c000abb8 <Mouse::~Mouse()>:
c000abb8:	83 ec 0c             	sub    esp,0xc
c000abbb:	ba a4 3f 02 c0       	mov    edx,0xc0023fa4
c000abc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abc4:	89 10                	mov    DWORD PTR [eax],edx
c000abc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abca:	83 ec 0c             	sub    esp,0xc
c000abcd:	50                   	push   eax
c000abce:	e8 83 ed ff ff       	call   c0009956 <Device::~Device()>
c000abd3:	83 c4 10             	add    esp,0x10
c000abd6:	90                   	nop
c000abd7:	83 c4 0c             	add    esp,0xc
c000abda:	c3                   	ret    
c000abdb:	90                   	nop

c000abdc <Mouse::~Mouse()>:
c000abdc:	83 ec 0c             	sub    esp,0xc
c000abdf:	83 ec 0c             	sub    esp,0xc
c000abe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abe6:	e8 cd ff ff ff       	call   c000abb8 <Mouse::~Mouse()>
c000abeb:	83 c4 10             	add    esp,0x10
c000abee:	83 ec 08             	sub    esp,0x8
c000abf1:	68 58 01 00 00       	push   0x158
c000abf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abfa:	e8 7d 26 00 00       	call   c000d27c <operator delete(void*, unsigned long)>
c000abff:	83 c4 10             	add    esp,0x10
c000ac02:	83 c4 0c             	add    esp,0xc
c000ac05:	c3                   	ret    

c000ac06 <NIC::getMAC()>:
c000ac06:	31 c0                	xor    eax,eax
c000ac08:	31 d2                	xor    edx,edx
c000ac0a:	c3                   	ret    
c000ac0b:	90                   	nop

c000ac0c <NIC::write(int, unsigned char*, int*)>:
c000ac0c:	b8 01 00 00 00       	mov    eax,0x1
c000ac11:	c3                   	ret    

c000ac12 <NIC::NIC(char const*)>:
c000ac12:	83 ec 0c             	sub    esp,0xc
c000ac15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac19:	83 ec 08             	sub    esp,0x8
c000ac1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac20:	50                   	push   eax
c000ac21:	e8 90 ef ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000ac26:	83 c4 10             	add    esp,0x10
c000ac29:	ba d0 3f 02 c0       	mov    edx,0xc0023fd0
c000ac2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac32:	89 10                	mov    DWORD PTR [eax],edx
c000ac34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac38:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ac42:	90                   	nop
c000ac43:	83 c4 0c             	add    esp,0xc
c000ac46:	c3                   	ret    
c000ac47:	90                   	nop

c000ac48 <NIC::~NIC()>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	ba d0 3f 02 c0       	mov    edx,0xc0023fd0
c000ac50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac54:	89 10                	mov    DWORD PTR [eax],edx
c000ac56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac5a:	83 ec 0c             	sub    esp,0xc
c000ac5d:	50                   	push   eax
c000ac5e:	e8 f3 ec ff ff       	call   c0009956 <Device::~Device()>
c000ac63:	83 c4 10             	add    esp,0x10
c000ac66:	90                   	nop
c000ac67:	83 c4 0c             	add    esp,0xc
c000ac6a:	c3                   	ret    
c000ac6b:	90                   	nop

c000ac6c <NIC::~NIC()>:
c000ac6c:	83 ec 0c             	sub    esp,0xc
c000ac6f:	83 ec 0c             	sub    esp,0xc
c000ac72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac76:	e8 cd ff ff ff       	call   c000ac48 <NIC::~NIC()>
c000ac7b:	83 c4 10             	add    esp,0x10
c000ac7e:	83 ec 08             	sub    esp,0x8
c000ac81:	68 58 01 00 00       	push   0x158
c000ac86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac8a:	e8 ed 25 00 00       	call   c000d27c <operator delete(void*, unsigned long)>
c000ac8f:	83 c4 10             	add    esp,0x10
c000ac92:	83 c4 0c             	add    esp,0xc
c000ac95:	c3                   	ret    

c000ac96 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ac96:	55                   	push   ebp
c000ac97:	57                   	push   edi
c000ac98:	56                   	push   esi
c000ac99:	53                   	push   ebx
c000ac9a:	81 ec 28 01 00 00    	sub    esp,0x128
c000aca0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000aca7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000acae:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000acb5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000acbc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000acc0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000acc4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000accb:	e8 e2 ef ff ff       	call   c0009cb2 <Device::getName()>
c000acd0:	5a                   	pop    edx
c000acd1:	59                   	pop    ecx
c000acd2:	50                   	push   eax
c000acd3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000acd7:	55                   	push   ebp
c000acd8:	e8 63 59 ff ff       	call   c0000640 <strcpy>
c000acdd:	5b                   	pop    ebx
c000acde:	58                   	pop    eax
c000acdf:	68 fc 3f 02 c0       	push   0xc0023ffc
c000ace4:	55                   	push   ebp
c000ace5:	e8 56 5b ff ff       	call   c0000840 <strcat>
c000acea:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000acf1:	e8 6d 4a 00 00       	call   c000f763 <malloc>
c000acf6:	83 c4 0c             	add    esp,0xc
c000acf9:	89 c3                	mov    ebx,eax
c000acfb:	57                   	push   edi
c000acfc:	56                   	push   esi
c000acfd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad05:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000ad0c:	55                   	push   ebp
c000ad0d:	50                   	push   eax
c000ad0e:	e8 59 fb ff ff       	call   c000a86c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000ad13:	83 c4 14             	add    esp,0x14
c000ad16:	53                   	push   ebx
c000ad17:	e8 10 fc ff ff       	call   c000a92c <LogicalDisk::assignDriveLetter()>
c000ad1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ad1f:	e8 c2 fc ff ff       	call   c000a9e6 <LogicalDisk::mount()>
c000ad24:	58                   	pop    eax
c000ad25:	5a                   	pop    edx
c000ad26:	53                   	push   ebx
c000ad27:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ad2e:	e8 21 ed ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000ad33:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ad39:	5b                   	pop    ebx
c000ad3a:	5e                   	pop    esi
c000ad3b:	5f                   	pop    edi
c000ad3c:	5d                   	pop    ebp
c000ad3d:	c3                   	ret    

c000ad3e <createPartitionsForDisk(PhysicalDisk*)>:
c000ad3e:	55                   	push   ebp
c000ad3f:	57                   	push   edi
c000ad40:	56                   	push   esi
c000ad41:	53                   	push   ebx
c000ad42:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ad48:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ad4f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ad55:	3d 00 02 00 00       	cmp    eax,0x200
c000ad5a:	74 27                	je     c000ad83 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ad5c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ad62:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ad68:	83 ec 10             	sub    esp,0x10
c000ad6b:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ad6f:	99                   	cdq    
c000ad70:	c1 e6 0a             	shl    esi,0xa
c000ad73:	52                   	push   edx
c000ad74:	89 fd                	mov    ebp,edi
c000ad76:	50                   	push   eax
c000ad77:	55                   	push   ebp
c000ad78:	56                   	push   esi
c000ad79:	e8 96 73 01 00       	call   c0022114 <__udivdi3>
c000ad7e:	e9 b9 00 00 00       	jmp    c000ae3c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad83:	83 ec 0c             	sub    esp,0xc
c000ad86:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ad88:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ad8c:	56                   	push   esi
c000ad8d:	6a 01                	push   0x1
c000ad8f:	6a 00                	push   0x0
c000ad91:	6a 00                	push   0x0
c000ad93:	53                   	push   ebx
c000ad94:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad97:	83 c4 20             	add    esp,0x20
c000ad9a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ada2:	75 0a                	jne    c000adae <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ada4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000adac:	74 2c                	je     c000adda <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000adae:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000adb4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000adba:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000adc0:	83 ec 10             	sub    esp,0x10
c000adc3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000adc7:	89 f7                	mov    edi,esi
c000adc9:	c1 e0 0a             	shl    eax,0xa
c000adcc:	c1 ff 1f             	sar    edi,0x1f
c000adcf:	57                   	push   edi
c000add0:	56                   	push   esi
c000add1:	52                   	push   edx
c000add2:	50                   	push   eax
c000add3:	e8 3c 73 01 00       	call   c0022114 <__udivdi3>
c000add8:	eb 62                	jmp    c000ae3c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000adda:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ade1:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000ade8:	89 cf                	mov    edi,ecx
c000adea:	83 e2 7f             	and    edx,0x7f
c000aded:	83 e7 7f             	and    edi,0x7f
c000adf0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000adf7:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000adfa:	83 e0 7f             	and    eax,0x7f
c000adfd:	8d 14 01             	lea    edx,[ecx+eax*1]
c000ae00:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ae07:	83 e0 7f             	and    eax,0x7f
c000ae0a:	01 d0                	add    eax,edx
c000ae0c:	89 c5                	mov    ebp,eax
c000ae0e:	84 c0                	test   al,al
c000ae10:	74 41                	je     c000ae53 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000ae12:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ae18:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ae1e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ae24:	83 ec 10             	sub    esp,0x10
c000ae27:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ae2b:	89 f7                	mov    edi,esi
c000ae2d:	c1 e0 0a             	shl    eax,0xa
c000ae30:	c1 ff 1f             	sar    edi,0x1f
c000ae33:	57                   	push   edi
c000ae34:	56                   	push   esi
c000ae35:	52                   	push   edx
c000ae36:	50                   	push   eax
c000ae37:	e8 d8 72 01 00       	call   c0022114 <__udivdi3>
c000ae3c:	83 c4 14             	add    esp,0x14
c000ae3f:	52                   	push   edx
c000ae40:	50                   	push   eax
c000ae41:	6a 00                	push   0x0
c000ae43:	6a 00                	push   0x0
c000ae45:	53                   	push   ebx
c000ae46:	e8 4b fe ff ff       	call   c000ac96 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000ae4b:	83 c4 20             	add    esp,0x20
c000ae4e:	e9 73 01 00 00       	jmp    c000afc6 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000ae53:	89 f0                	mov    eax,esi
c000ae55:	31 c9                	xor    ecx,ecx
c000ae57:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000ae5e:	75 02                	jne    c000ae62 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000ae60:	89 cd                	mov    ebp,ecx
c000ae62:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000ae69:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000ae70:	c1 e2 08             	shl    edx,0x8
c000ae73:	c1 e6 10             	shl    esi,0x10
c000ae76:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000ae7e:	09 f2                	or     edx,esi
c000ae80:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000ae88:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000ae8f:	83 c0 10             	add    eax,0x10
c000ae92:	09 f2                	or     edx,esi
c000ae94:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ae9b:	c1 e6 18             	shl    esi,0x18
c000ae9e:	09 f2                	or     edx,esi
c000aea0:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000aea7:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000aeab:	c1 e6 10             	shl    esi,0x10
c000aeae:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000aeb5:	c1 e2 08             	shl    edx,0x8
c000aeb8:	09 f2                	or     edx,esi
c000aeba:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000aec1:	09 f2                	or     edx,esi
c000aec3:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000aeca:	c1 e6 18             	shl    esi,0x18
c000aecd:	09 f2                	or     edx,esi
c000aecf:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000aed3:	41                   	inc    ecx
c000aed4:	83 f9 04             	cmp    ecx,0x4
c000aed7:	0f 85 7a ff ff ff    	jne    c000ae57 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000aedd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee1:	83 f0 01             	xor    eax,0x1
c000aee4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000aee8:	75 4f                	jne    c000af39 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000aeea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aeee:	83 f0 01             	xor    eax,0x1
c000aef1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000aef5:	75 42                	jne    c000af39 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000aef7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000aeff:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000af07:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000af0d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000af13:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000af19:	0f a4 c2 0a          	shld   edx,eax,0xa
c000af1d:	89 f7                	mov    edi,esi
c000af1f:	c1 e0 0a             	shl    eax,0xa
c000af22:	c1 ff 1f             	sar    edi,0x1f
c000af25:	57                   	push   edi
c000af26:	56                   	push   esi
c000af27:	52                   	push   edx
c000af28:	50                   	push   eax
c000af29:	e8 e6 71 01 00       	call   c0022114 <__udivdi3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000af35:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000af39:	89 e8                	mov    eax,ebp
c000af3b:	0f b6 e8             	movzx  ebp,al
c000af3e:	85 ed                	test   ebp,ebp
c000af40:	74 50                	je     c000af92 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000af42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af46:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000af4a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000af4e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000af52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af56:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000af5a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000af5e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000af66:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000af6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af6e:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000af72:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000af76:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af7a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af82:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000af86:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000af8a:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000af8e:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000af92:	31 ed                	xor    ebp,ebp
c000af94:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af98:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af9c:	89 f8                	mov    eax,edi
c000af9e:	09 f0                	or     eax,esi
c000afa0:	74 1e                	je     c000afc0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000afa2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000afa6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000afaa:	89 d1                	mov    ecx,edx
c000afac:	09 c1                	or     ecx,eax
c000afae:	74 10                	je     c000afc0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000afb0:	83 ec 0c             	sub    esp,0xc
c000afb3:	57                   	push   edi
c000afb4:	56                   	push   esi
c000afb5:	52                   	push   edx
c000afb6:	50                   	push   eax
c000afb7:	53                   	push   ebx
c000afb8:	e8 d9 fc ff ff       	call   c000ac96 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000afbd:	83 c4 20             	add    esp,0x20
c000afc0:	45                   	inc    ebp
c000afc1:	83 fd 04             	cmp    ebp,0x4
c000afc4:	75 ce                	jne    c000af94 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000afc6:	81 c4 5c 02 00 00    	add    esp,0x25c
c000afcc:	5b                   	pop    ebx
c000afcd:	5e                   	pop    esi
c000afce:	5f                   	pop    edi
c000afcf:	5d                   	pop    ebp
c000afd0:	c3                   	ret    
c000afd1:	66 90                	xchg   ax,ax
c000afd3:	90                   	nop

c000afd4 <Serial::Serial(char const*)>:
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afdb:	83 ec 08             	sub    esp,0x8
c000afde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afe2:	50                   	push   eax
c000afe3:	e8 ce eb ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000afe8:	83 c4 10             	add    esp,0x10
c000afeb:	ba 10 40 02 c0       	mov    edx,0xc0024010
c000aff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff4:	89 10                	mov    DWORD PTR [eax],edx
c000aff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000affa:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000b004:	90                   	nop
c000b005:	83 c4 0c             	add    esp,0xc
c000b008:	c3                   	ret    
c000b009:	90                   	nop
c000b00a:	66 90                	xchg   ax,ax

c000b00c <Serial::~Serial()>:
c000b00c:	83 ec 0c             	sub    esp,0xc
c000b00f:	ba 10 40 02 c0       	mov    edx,0xc0024010
c000b014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b018:	89 10                	mov    DWORD PTR [eax],edx
c000b01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b01e:	83 ec 0c             	sub    esp,0xc
c000b021:	50                   	push   eax
c000b022:	e8 2f e9 ff ff       	call   c0009956 <Device::~Device()>
c000b027:	83 c4 10             	add    esp,0x10
c000b02a:	90                   	nop
c000b02b:	83 c4 0c             	add    esp,0xc
c000b02e:	c3                   	ret    
c000b02f:	90                   	nop

c000b030 <Serial::~Serial()>:
c000b030:	83 ec 0c             	sub    esp,0xc
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b03a:	e8 cd ff ff ff       	call   c000b00c <Serial::~Serial()>
c000b03f:	83 c4 10             	add    esp,0x10
c000b042:	83 ec 08             	sub    esp,0x8
c000b045:	68 58 01 00 00       	push   0x158
c000b04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b04e:	e8 29 22 00 00       	call   c000d27c <operator delete(void*, unsigned long)>
c000b053:	83 c4 10             	add    esp,0x10
c000b056:	83 c4 0c             	add    esp,0xc
c000b059:	c3                   	ret    
c000b05a:	66 90                	xchg   ax,ax

c000b05c <Timer::Timer(char const*)>:
c000b05c:	83 ec 0c             	sub    esp,0xc
c000b05f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b063:	83 ec 08             	sub    esp,0x8
c000b066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b06a:	50                   	push   eax
c000b06b:	e8 46 eb ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000b070:	83 c4 10             	add    esp,0x10
c000b073:	ba f0 40 02 c0       	mov    edx,0xc00240f0
c000b078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b07c:	89 10                	mov    DWORD PTR [eax],edx
c000b07e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b082:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000b08c:	90                   	nop
c000b08d:	83 c4 0c             	add    esp,0xc
c000b090:	c3                   	ret    
c000b091:	90                   	nop
c000b092:	66 90                	xchg   ax,ax

c000b094 <Timer::~Timer()>:
c000b094:	83 ec 0c             	sub    esp,0xc
c000b097:	ba f0 40 02 c0       	mov    edx,0xc00240f0
c000b09c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a0:	89 10                	mov    DWORD PTR [eax],edx
c000b0a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a6:	83 ec 0c             	sub    esp,0xc
c000b0a9:	50                   	push   eax
c000b0aa:	e8 a7 e8 ff ff       	call   c0009956 <Device::~Device()>
c000b0af:	83 c4 10             	add    esp,0x10
c000b0b2:	90                   	nop
c000b0b3:	83 c4 0c             	add    esp,0xc
c000b0b6:	c3                   	ret    
c000b0b7:	90                   	nop

c000b0b8 <Timer::~Timer()>:
c000b0b8:	83 ec 0c             	sub    esp,0xc
c000b0bb:	83 ec 0c             	sub    esp,0xc
c000b0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0c2:	e8 cd ff ff ff       	call   c000b094 <Timer::~Timer()>
c000b0c7:	83 c4 10             	add    esp,0x10
c000b0ca:	83 ec 08             	sub    esp,0x8
c000b0cd:	68 5c 01 00 00       	push   0x15c
c000b0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0d6:	e8 a1 21 00 00       	call   c000d27c <operator delete(void*, unsigned long)>
c000b0db:	83 c4 10             	add    esp,0x10
c000b0de:	83 c4 0c             	add    esp,0xc
c000b0e1:	c3                   	ret    

c000b0e2 <Timer::read()>:
c000b0e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0e6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b0ec:	c3                   	ret    

c000b0ed <setupTimer(int)>:
c000b0ed:	53                   	push   ebx
c000b0ee:	83 ec 14             	sub    esp,0x14
c000b0f1:	68 5c 01 00 00       	push   0x15c
c000b0f6:	e8 68 46 00 00       	call   c000f763 <malloc>
c000b0fb:	89 04 24             	mov    DWORD PTR [esp],eax
c000b0fe:	89 c3                	mov    ebx,eax
c000b100:	e8 bb 68 01 00       	call   c00219c0 <PIT::PIT()>
c000b105:	58                   	pop    eax
c000b106:	5a                   	pop    edx
c000b107:	53                   	push   ebx
c000b108:	ff 35 08 d1 02 c0    	push   DWORD PTR ds:0xc002d108
c000b10e:	e8 41 e9 ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000b113:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b115:	6a 00                	push   0x0
c000b117:	6a 00                	push   0x0
c000b119:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b11d:	53                   	push   ebx
c000b11e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b121:	89 d8                	mov    eax,ebx
c000b123:	83 c4 28             	add    esp,0x28
c000b126:	5b                   	pop    ebx
c000b127:	c3                   	ret    

c000b128 <timerHandler(unsigned int)>:
c000b128:	57                   	push   edi
c000b129:	31 d2                	xor    edx,edx
c000b12b:	56                   	push   esi
c000b12c:	53                   	push   ebx
c000b12d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b131:	01 1d 50 cb 02 c0    	add    DWORD PTR ds:0xc002cb50,ebx
c000b137:	11 15 54 cb 02 c0    	adc    DWORD PTR ds:0xc002cb54,edx
c000b13d:	80 3d 0d d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d10d,0x0
c000b144:	75 12                	jne    c000b158 <timerHandler(unsigned int)+0x30>
c000b146:	c7 44 24 10 9f 40 02 c0 	mov    DWORD PTR [esp+0x10],0xc002409f
c000b14e:	5b                   	pop    ebx
c000b14f:	5e                   	pop    esi
c000b150:	5f                   	pop    edi
c000b151:	e9 26 be ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c000b156:	66 90                	xchg   ax,ax
c000b158:	fa                   	cli    
c000b159:	ff 05 70 da 02 c0    	inc    DWORD PTR ds:0xc002da70
c000b15f:	83 ec 0c             	sub    esp,0xc
c000b162:	68 80 da 02 c0       	push   0xc002da80
c000b167:	e8 40 73 01 00       	call   c00224ac <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b16c:	83 c4 10             	add    esp,0x10
c000b16f:	84 c0                	test   al,al
c000b171:	0f 85 a9 00 00 00    	jne    c000b220 <timerHandler(unsigned int)+0xf8>
c000b177:	83 ec 0c             	sub    esp,0xc
c000b17a:	68 80 da 02 c0       	push   0xc002da80
c000b17f:	e8 44 73 01 00       	call   c00224c8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b184:	83 c4 10             	add    esp,0x10
c000b187:	89 c6                	mov    esi,eax
c000b189:	8d 76 00             	lea    esi,[esi+0x0]
c000b18c:	83 ec 0c             	sub    esp,0xc
c000b18f:	68 80 da 02 c0       	push   0xc002da80
c000b194:	e8 2f 73 01 00       	call   c00224c8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b199:	c7 04 24 80 da 02 c0 	mov    DWORD PTR [esp],0xc002da80
c000b1a0:	89 c7                	mov    edi,eax
c000b1a2:	e8 29 73 01 00       	call   c00224d0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000b1a7:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c000b1aa:	83 c4 10             	add    esp,0x10
c000b1ad:	8b 4f 30             	mov    ecx,DWORD PTR [edi+0x30]
c000b1b0:	39 15 50 cb 02 c0    	cmp    DWORD PTR ds:0xc002cb50,edx
c000b1b6:	a1 54 cb 02 c0       	mov    eax,ds:0xc002cb54
c000b1bb:	19 c8                	sbb    eax,ecx
c000b1bd:	72 21                	jb     c000b1e0 <timerHandler(unsigned int)+0xb8>
c000b1bf:	83 ec 0c             	sub    esp,0xc
c000b1c2:	57                   	push   edi
c000b1c3:	e8 b8 c6 00 00       	call   c0017880 <unblockTask(ThreadControlBlock*)>
c000b1c8:	83 c4 10             	add    esp,0x10
c000b1cb:	39 fe                	cmp    esi,edi
c000b1cd:	75 25                	jne    c000b1f4 <timerHandler(unsigned int)+0xcc>
c000b1cf:	83 ec 0c             	sub    esp,0xc
c000b1d2:	68 80 da 02 c0       	push   0xc002da80
c000b1d7:	e8 ec 72 01 00       	call   c00224c8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b1dc:	89 c6                	mov    esi,eax
c000b1de:	eb 10                	jmp    c000b1f0 <timerHandler(unsigned int)+0xc8>
c000b1e0:	51                   	push   ecx
c000b1e1:	51                   	push   ecx
c000b1e2:	57                   	push   edi
c000b1e3:	68 80 da 02 c0       	push   0xc002da80
c000b1e8:	e8 9f 73 01 00       	call   c002258c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000b1ed:	8d 76 00             	lea    esi,[esi+0x0]
c000b1f0:	83 c4 10             	add    esp,0x10
c000b1f3:	90                   	nop
c000b1f4:	83 ec 0c             	sub    esp,0xc
c000b1f7:	68 80 da 02 c0       	push   0xc002da80
c000b1fc:	e8 ab 72 01 00       	call   c00224ac <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b201:	83 c4 10             	add    esp,0x10
c000b204:	84 c0                	test   al,al
c000b206:	75 18                	jne    c000b220 <timerHandler(unsigned int)+0xf8>
c000b208:	83 ec 0c             	sub    esp,0xc
c000b20b:	68 80 da 02 c0       	push   0xc002da80
c000b210:	e8 b3 72 01 00       	call   c00224c8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b215:	83 c4 10             	add    esp,0x10
c000b218:	39 f0                	cmp    eax,esi
c000b21a:	0f 85 6c ff ff ff    	jne    c000b18c <timerHandler(unsigned int)+0x64>
c000b220:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b225:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b228:	85 c0                	test   eax,eax
c000b22a:	74 48                	je     c000b274 <timerHandler(unsigned int)+0x14c>
c000b22c:	80 3d 0c d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d10c,0x0
c000b233:	74 3f                	je     c000b274 <timerHandler(unsigned int)+0x14c>
c000b235:	3d e8 03 00 00       	cmp    eax,0x3e8
c000b23a:	76 1c                	jbe    c000b258 <timerHandler(unsigned int)+0x130>
c000b23c:	52                   	push   edx
c000b23d:	52                   	push   edx
c000b23e:	50                   	push   eax
c000b23f:	68 b5 40 02 c0       	push   0xc00240b5
c000b244:	e8 33 bd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000b249:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b24e:	83 c4 10             	add    esp,0x10
c000b251:	c7 40 38 e8 03 00 00 	mov    DWORD PTR [eax+0x38],0x3e8
c000b258:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b25e:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b261:	89 c1                	mov    ecx,eax
c000b263:	29 d9                	sub    ecx,ebx
c000b265:	39 d8                	cmp    eax,ebx
c000b267:	89 4a 38             	mov    DWORD PTR [edx+0x38],ecx
c000b26a:	77 08                	ja     c000b274 <timerHandler(unsigned int)+0x14c>
c000b26c:	e8 b3 c2 00 00       	call   c0017524 <schedule()>
c000b271:	8d 76 00             	lea    esi,[esi+0x0]
c000b274:	f0 ff 0d 70 da 02 c0 	lock dec DWORD PTR ds:0xc002da70
c000b27b:	83 3d 70 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da70,0x0
c000b282:	75 04                	jne    c000b288 <timerHandler(unsigned int)+0x160>
c000b284:	fb                   	sti    
c000b285:	8d 76 00             	lea    esi,[esi+0x0]
c000b288:	5b                   	pop    ebx
c000b289:	5e                   	pop    esi
c000b28a:	5f                   	pop    edi
c000b28b:	c3                   	ret    

c000b28c <VCache::VCache(PhysicalDisk*)>:
c000b28c:	53                   	push   ebx
c000b28d:	83 ec 18             	sub    esp,0x18
c000b290:	ba 60 41 02 c0       	mov    edx,0xc0024160
c000b295:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b299:	89 10                	mov    DWORD PTR [eax],edx
c000b29b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b29f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000b2a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2aa:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000b2b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2b5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000b2bc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000b2c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2c7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000b2ce:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000b2d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2d9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000b2e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2e4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b2e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2ec:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000b2f3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000b2fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2fe:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b302:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b306:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000b30a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b30e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b316:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000b31d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000b325:	83 ec 0c             	sub    esp,0xc
c000b328:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b32c:	e8 32 44 00 00       	call   c000f763 <malloc>
c000b331:	83 c4 10             	add    esp,0x10
c000b334:	89 c3                	mov    ebx,eax
c000b336:	83 ec 0c             	sub    esp,0xc
c000b339:	53                   	push   ebx
c000b33a:	e8 61 48 00 00       	call   c000fba0 <Mutex::Mutex()>
c000b33f:	83 c4 10             	add    esp,0x10
c000b342:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b346:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000b349:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b34d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b351:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000b354:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b358:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b35f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b363:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b369:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b36d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b370:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b374:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000b37a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b380:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b384:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000b387:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000b38a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b38e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b392:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b396:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b39c:	05 00 01 00 00       	add    eax,0x100
c000b3a1:	c1 e0 04             	shl    eax,0x4
c000b3a4:	83 ec 0c             	sub    esp,0xc
c000b3a7:	50                   	push   eax
c000b3a8:	e8 b6 43 00 00       	call   c000f763 <malloc>
c000b3ad:	83 c4 10             	add    esp,0x10
c000b3b0:	89 c2                	mov    edx,eax
c000b3b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3b6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b3b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3bd:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000b3c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3c8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b3cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b3d0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b3d6:	89 d0                	mov    eax,edx
c000b3d8:	c1 e0 02             	shl    eax,0x2
c000b3db:	01 d0                	add    eax,edx
c000b3dd:	c1 e0 04             	shl    eax,0x4
c000b3e0:	83 ec 0c             	sub    esp,0xc
c000b3e3:	50                   	push   eax
c000b3e4:	e8 7a 43 00 00       	call   c000f763 <malloc>
c000b3e9:	83 c4 10             	add    esp,0x10
c000b3ec:	89 c2                	mov    edx,eax
c000b3ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3f2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000b3f5:	90                   	nop
c000b3f6:	83 c4 18             	add    esp,0x18
c000b3f9:	5b                   	pop    ebx
c000b3fa:	c3                   	ret    
c000b3fb:	90                   	nop

c000b3fc <VCache::invalidateReadBuffer()>:
c000b3fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b400:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000b406:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b40a:	c3                   	ret    
c000b40b:	90                   	nop

c000b40c <VCache::writeWriteBuffer()>:
c000b40c:	53                   	push   ebx
c000b40d:	83 ec 08             	sub    esp,0x8
c000b410:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b414:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b418:	74 1e                	je     c000b438 <VCache::writeWriteBuffer()+0x2c>
c000b41a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b41d:	83 ec 0c             	sub    esp,0xc
c000b420:	8b 10                	mov    edx,DWORD PTR [eax]
c000b422:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000b425:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000b428:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000b42b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b42e:	50                   	push   eax
c000b42f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b432:	83 c4 20             	add    esp,0x20
c000b435:	8d 76 00             	lea    esi,[esi+0x0]
c000b438:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b43f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000b446:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000b44a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000b451:	83 c4 08             	add    esp,0x8
c000b454:	5b                   	pop    ebx
c000b455:	c3                   	ret    
c000b456:	66 90                	xchg   ax,ax

c000b458 <VCache::~VCache()>:
c000b458:	83 ec 0c             	sub    esp,0xc
c000b45b:	ba 60 41 02 c0       	mov    edx,0xc0024160
c000b460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b464:	89 10                	mov    DWORD PTR [eax],edx
c000b466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b46a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000b46d:	0f b6 c0             	movzx  eax,al
c000b470:	85 c0                	test   eax,eax
c000b472:	74 10                	je     c000b484 <VCache::~VCache()+0x2c>
c000b474:	83 ec 0c             	sub    esp,0xc
c000b477:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b47b:	e8 8c ff ff ff       	call   c000b40c <VCache::writeWriteBuffer()>
c000b480:	83 c4 10             	add    esp,0x10
c000b483:	90                   	nop
c000b484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b488:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b48b:	83 ec 0c             	sub    esp,0xc
c000b48e:	50                   	push   eax
c000b48f:	e8 df 42 00 00       	call   c000f773 <free>
c000b494:	83 c4 10             	add    esp,0x10
c000b497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b49b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b49e:	83 ec 0c             	sub    esp,0xc
c000b4a1:	50                   	push   eax
c000b4a2:	e8 cc 42 00 00       	call   c000f773 <free>
c000b4a7:	83 c4 10             	add    esp,0x10
c000b4aa:	90                   	nop
c000b4ab:	83 c4 0c             	add    esp,0xc
c000b4ae:	c3                   	ret    
c000b4af:	90                   	nop

c000b4b0 <VCache::~VCache()>:
c000b4b0:	83 ec 0c             	sub    esp,0xc
c000b4b3:	83 ec 0c             	sub    esp,0xc
c000b4b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4ba:	e8 99 ff ff ff       	call   c000b458 <VCache::~VCache()>
c000b4bf:	83 c4 10             	add    esp,0x10
c000b4c2:	83 ec 08             	sub    esp,0x8
c000b4c5:	6a 44                	push   0x44
c000b4c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4cb:	e8 ac 1d 00 00       	call   c000d27c <operator delete(void*, unsigned long)>
c000b4d0:	83 c4 10             	add    esp,0x10
c000b4d3:	83 c4 0c             	add    esp,0xc
c000b4d6:	c3                   	ret    
c000b4d7:	90                   	nop

c000b4d8 <VCache::write(unsigned long long, int, void*)>:
c000b4d8:	55                   	push   ebp
c000b4d9:	57                   	push   edi
c000b4da:	56                   	push   esi
c000b4db:	53                   	push   ebx
c000b4dc:	83 ec 1c             	sub    esp,0x1c
c000b4df:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b4e3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b4e7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000b4eb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b4ef:	e8 28 bd 00 00       	call   c001721c <KeDisablePreemption()>
c000b4f4:	b9 00 10 00 00       	mov    ecx,0x1000
c000b4f9:	50                   	push   eax
c000b4fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b4fd:	0f af c3             	imul   eax,ebx
c000b500:	05 ff 0f 00 00       	add    eax,0xfff
c000b505:	99                   	cdq    
c000b506:	f7 f9                	idiv   ecx
c000b508:	50                   	push   eax
c000b509:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b50d:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000b513:	e8 30 8a 00 00       	call   c0013f48 <VAS::canLockPages(unsigned long, int)>
c000b518:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000b51c:	83 c4 10             	add    esp,0x10
c000b51f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b524:	74 2a                	je     c000b550 <VCache::write(unsigned long long, int, void*)+0x78>
c000b526:	b9 00 10 00 00       	mov    ecx,0x1000
c000b52b:	50                   	push   eax
c000b52c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b52f:	0f af c3             	imul   eax,ebx
c000b532:	05 ff 0f 00 00       	add    eax,0xfff
c000b537:	99                   	cdq    
c000b538:	f7 f9                	idiv   ecx
c000b53a:	50                   	push   eax
c000b53b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b53f:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000b545:	e8 68 8c 00 00       	call   c00141b2 <VAS::lockPages(unsigned long, int)>
c000b54a:	83 c4 10             	add    esp,0x10
c000b54d:	8d 76 00             	lea    esi,[esi+0x0]
c000b550:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000b554:	74 0e                	je     c000b564 <VCache::write(unsigned long long, int, void*)+0x8c>
c000b556:	83 ec 0c             	sub    esp,0xc
c000b559:	55                   	push   ebp
c000b55a:	e8 9d fe ff ff       	call   c000b3fc <VCache::invalidateReadBuffer()>
c000b55f:	83 c4 10             	add    esp,0x10
c000b562:	66 90                	xchg   ax,ax
c000b564:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000b568:	74 72                	je     c000b5dc <VCache::write(unsigned long long, int, void*)+0x104>
c000b56a:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000b56d:	89 c8                	mov    eax,ecx
c000b56f:	99                   	cdq    
c000b570:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000b573:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000b576:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b57a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b57e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b582:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b586:	31 f0                	xor    eax,esi
c000b588:	31 fa                	xor    edx,edi
c000b58a:	09 d0                	or     eax,edx
c000b58c:	75 42                	jne    c000b5d0 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b58e:	83 fb 01             	cmp    ebx,0x1
c000b591:	75 3d                	jne    c000b5d0 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b596:	89 cf                	mov    edi,ecx
c000b598:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b59e:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b5a2:	0f af f8             	imul   edi,eax
c000b5a5:	89 c1                	mov    ecx,eax
c000b5a7:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000b5aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b5ac:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000b5af:	40                   	inc    eax
c000b5b0:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000b5b3:	83 f8 50             	cmp    eax,0x50
c000b5b6:	0f 85 a8 00 00 00    	jne    c000b664 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b5bc:	83 ec 0c             	sub    esp,0xc
c000b5bf:	55                   	push   ebp
c000b5c0:	e8 47 fe ff ff       	call   c000b40c <VCache::writeWriteBuffer()>
c000b5c5:	83 c4 10             	add    esp,0x10
c000b5c8:	e9 97 00 00 00       	jmp    c000b664 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b5cd:	8d 76 00             	lea    esi,[esi+0x0]
c000b5d0:	83 ec 0c             	sub    esp,0xc
c000b5d3:	55                   	push   ebp
c000b5d4:	e8 33 fe ff ff       	call   c000b40c <VCache::writeWriteBuffer()>
c000b5d9:	83 c4 10             	add    esp,0x10
c000b5dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b5df:	83 fb 4f             	cmp    ebx,0x4f
c000b5e2:	7f 20                	jg     c000b604 <VCache::write(unsigned long long, int, void*)+0x12c>
c000b5e4:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000b5e7:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000b5ea:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000b5ed:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000b5f1:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000b5f4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b5fa:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b5fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b600:	eb 62                	jmp    c000b664 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b602:	66 90                	xchg   ax,ax
c000b604:	83 ec 0c             	sub    esp,0xc
c000b607:	8b 10                	mov    edx,DWORD PTR [eax]
c000b609:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b60d:	53                   	push   ebx
c000b60e:	57                   	push   edi
c000b60f:	56                   	push   esi
c000b610:	50                   	push   eax
c000b611:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b614:	83 c4 20             	add    esp,0x20
c000b617:	89 c6                	mov    esi,eax
c000b619:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b61e:	74 28                	je     c000b648 <VCache::write(unsigned long long, int, void*)+0x170>
c000b620:	b9 00 10 00 00       	mov    ecx,0x1000
c000b625:	52                   	push   edx
c000b626:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b62a:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b630:	99                   	cdq    
c000b631:	f7 f9                	idiv   ecx
c000b633:	50                   	push   eax
c000b634:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b638:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000b63e:	e8 41 89 00 00       	call   c0013f84 <VAS::unlockPages(unsigned long, int)>
c000b643:	83 c4 10             	add    esp,0x10
c000b646:	66 90                	xchg   ax,ax
c000b648:	e8 f7 bb 00 00       	call   c0017244 <KeRestorePreemption()>
c000b64d:	85 f6                	test   esi,esi
c000b64f:	74 4b                	je     c000b69c <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b651:	83 ec 0c             	sub    esp,0xc
c000b654:	68 18 41 02 c0       	push   0xc0024118
c000b659:	e8 1e b9 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000b65e:	83 c4 10             	add    esp,0x10
c000b661:	eb 39                	jmp    c000b69c <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b663:	90                   	nop
c000b664:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b669:	74 29                	je     c000b694 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000b66b:	b9 00 10 00 00       	mov    ecx,0x1000
c000b670:	50                   	push   eax
c000b671:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b675:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b67b:	99                   	cdq    
c000b67c:	f7 f9                	idiv   ecx
c000b67e:	50                   	push   eax
c000b67f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b683:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000b689:	e8 f6 88 00 00       	call   c0013f84 <VAS::unlockPages(unsigned long, int)>
c000b68e:	83 c4 10             	add    esp,0x10
c000b691:	8d 76 00             	lea    esi,[esi+0x0]
c000b694:	e8 ab bb 00 00       	call   c0017244 <KeRestorePreemption()>
c000b699:	31 f6                	xor    esi,esi
c000b69b:	90                   	nop
c000b69c:	83 c4 1c             	add    esp,0x1c
c000b69f:	89 f0                	mov    eax,esi
c000b6a1:	5b                   	pop    ebx
c000b6a2:	5e                   	pop    esi
c000b6a3:	5f                   	pop    edi
c000b6a4:	5d                   	pop    ebp
c000b6a5:	c3                   	ret    

c000b6a6 <VCache::read(unsigned long long, int, void*)>:
c000b6a6:	55                   	push   ebp
c000b6a7:	57                   	push   edi
c000b6a8:	bf 00 10 00 00       	mov    edi,0x1000
c000b6ad:	56                   	push   esi
c000b6ae:	53                   	push   ebx
c000b6af:	83 ec 2c             	sub    esp,0x2c
c000b6b2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b6b6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000b6ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6be:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000b6c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6c6:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000b6ca:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b6ce:	e8 49 bb 00 00       	call   c001721c <KeDisablePreemption()>
c000b6d3:	50                   	push   eax
c000b6d4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b6d7:	0f af c6             	imul   eax,esi
c000b6da:	05 ff 0f 00 00       	add    eax,0xfff
c000b6df:	99                   	cdq    
c000b6e0:	f7 ff                	idiv   edi
c000b6e2:	50                   	push   eax
c000b6e3:	55                   	push   ebp
c000b6e4:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000b6ea:	e8 59 88 00 00       	call   c0013f48 <VAS::canLockPages(unsigned long, int)>
c000b6ef:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000b6f3:	83 c4 10             	add    esp,0x10
c000b6f6:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000b6fb:	74 1f                	je     c000b71c <VCache::read(unsigned long long, int, void*)+0x76>
c000b6fd:	50                   	push   eax
c000b6fe:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b701:	0f af c6             	imul   eax,esi
c000b704:	05 ff 0f 00 00       	add    eax,0xfff
c000b709:	99                   	cdq    
c000b70a:	f7 ff                	idiv   edi
c000b70c:	50                   	push   eax
c000b70d:	55                   	push   ebp
c000b70e:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000b714:	e8 99 8a 00 00       	call   c00141b2 <VAS::lockPages(unsigned long, int)>
c000b719:	83 c4 10             	add    esp,0x10
c000b71c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b720:	74 0e                	je     c000b730 <VCache::read(unsigned long long, int, void*)+0x8a>
c000b722:	83 ec 0c             	sub    esp,0xc
c000b725:	53                   	push   ebx
c000b726:	e8 e1 fc ff ff       	call   c000b40c <VCache::writeWriteBuffer()>
c000b72b:	83 c4 10             	add    esp,0x10
c000b72e:	66 90                	xchg   ax,ax
c000b730:	83 fe 01             	cmp    esi,0x1
c000b733:	0f 85 ef 00 00 00    	jne    c000b828 <VCache::read(unsigned long long, int, void*)+0x182>
c000b739:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000b73c:	80 b9 68 01 00 00 00 	cmp    BYTE PTR [ecx+0x168],0x0
c000b743:	0f 85 df 00 00 00    	jne    c000b828 <VCache::read(unsigned long long, int, void*)+0x182>
c000b749:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b74c:	89 fe                	mov    esi,edi
c000b74e:	f7 de                	neg    esi
c000b750:	89 f0                	mov    eax,esi
c000b752:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000b756:	c1 f8 1f             	sar    eax,0x1f
c000b759:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b75d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b761:	89 f0                	mov    eax,esi
c000b763:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000b767:	23 74 24 0c          	and    esi,DWORD PTR [esp+0xc]
c000b76b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000b76f:	89 f2                	mov    edx,esi
c000b771:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000b776:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b77a:	74 0c                	je     c000b788 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b77c:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000b77f:	75 07                	jne    c000b788 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b781:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000b784:	74 4e                	je     c000b7d4 <VCache::read(unsigned long long, int, void*)+0x12e>
c000b786:	66 90                	xchg   ax,ax
c000b788:	83 ec 0c             	sub    esp,0xc
c000b78b:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000b78f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000b792:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000b795:	8b 31                	mov    esi,DWORD PTR [ecx]
c000b797:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000b79a:	57                   	push   edi
c000b79b:	52                   	push   edx
c000b79c:	50                   	push   eax
c000b79d:	51                   	push   ecx
c000b79e:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000b7a1:	83 c4 20             	add    esp,0x20
c000b7a4:	89 c7                	mov    edi,eax
c000b7a6:	85 c0                	test   eax,eax
c000b7a8:	74 2a                	je     c000b7d4 <VCache::read(unsigned long long, int, void*)+0x12e>
c000b7aa:	83 ec 0c             	sub    esp,0xc
c000b7ad:	68 30 41 02 c0       	push   0xc0024130
c000b7b2:	e8 c5 b7 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000b7b7:	83 c4 10             	add    esp,0x10
c000b7ba:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b7bf:	0f 84 b3 00 00 00    	je     c000b878 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000b7c5:	51                   	push   ecx
c000b7c6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b7c9:	05 ff 0f 00 00       	add    eax,0xfff
c000b7ce:	e9 8d 00 00 00       	jmp    c000b860 <VCache::read(unsigned long long, int, void*)+0x1ba>
c000b7d3:	90                   	nop
c000b7d4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b7d7:	89 ef                	mov    edi,ebp
c000b7d9:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b7df:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b7e2:	8d 70 ff             	lea    esi,[eax-0x1]
c000b7e5:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b7e9:	0f af f1             	imul   esi,ecx
c000b7ec:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000b7ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b7f1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b7f6:	74 24                	je     c000b81c <VCache::read(unsigned long long, int, void*)+0x176>
c000b7f8:	b9 00 10 00 00       	mov    ecx,0x1000
c000b7fd:	52                   	push   edx
c000b7fe:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b801:	05 ff 0f 00 00       	add    eax,0xfff
c000b806:	99                   	cdq    
c000b807:	f7 f9                	idiv   ecx
c000b809:	50                   	push   eax
c000b80a:	55                   	push   ebp
c000b80b:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000b811:	e8 6e 87 00 00       	call   c0013f84 <VAS::unlockPages(unsigned long, int)>
c000b816:	83 c4 10             	add    esp,0x10
c000b819:	8d 76 00             	lea    esi,[esi+0x0]
c000b81c:	e8 23 ba 00 00       	call   c0017244 <KeRestorePreemption()>
c000b821:	31 ff                	xor    edi,edi
c000b823:	eb 5b                	jmp    c000b880 <VCache::read(unsigned long long, int, void*)+0x1da>
c000b825:	8d 76 00             	lea    esi,[esi+0x0]
c000b828:	83 ec 0c             	sub    esp,0xc
c000b82b:	53                   	push   ebx
c000b82c:	e8 cb fb ff ff       	call   c000b3fc <VCache::invalidateReadBuffer()>
c000b831:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b834:	8b 10                	mov    edx,DWORD PTR [eax]
c000b836:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b839:	56                   	push   esi
c000b83a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b83e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b842:	50                   	push   eax
c000b843:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000b846:	83 c4 20             	add    esp,0x20
c000b849:	89 c7                	mov    edi,eax
c000b84b:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000b850:	74 26                	je     c000b878 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000b852:	50                   	push   eax
c000b853:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000b857:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000b85d:	8d 76 00             	lea    esi,[esi+0x0]
c000b860:	b9 00 10 00 00       	mov    ecx,0x1000
c000b865:	99                   	cdq    
c000b866:	f7 f9                	idiv   ecx
c000b868:	50                   	push   eax
c000b869:	55                   	push   ebp
c000b86a:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000b870:	e8 0f 87 00 00       	call   c0013f84 <VAS::unlockPages(unsigned long, int)>
c000b875:	83 c4 10             	add    esp,0x10
c000b878:	e8 c7 b9 00 00       	call   c0017244 <KeRestorePreemption()>
c000b87d:	8d 76 00             	lea    esi,[esi+0x0]
c000b880:	83 c4 2c             	add    esp,0x2c
c000b883:	89 f8                	mov    eax,edi
c000b885:	5b                   	pop    ebx
c000b886:	5e                   	pop    esi
c000b887:	5f                   	pop    edi
c000b888:	5d                   	pop    ebp
c000b889:	c3                   	ret    

c000b88a <Video::putrect(int, int, int, int, unsigned int)>:
c000b88a:	55                   	push   ebp
c000b88b:	57                   	push   edi
c000b88c:	56                   	push   esi
c000b88d:	53                   	push   ebx
c000b88e:	83 ec 1c             	sub    esp,0x1c
c000b891:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b895:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b899:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000b89d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000b8a1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b8a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b8a9:	01 df                	add    edi,ebx
c000b8ab:	39 fb                	cmp    ebx,edi
c000b8ad:	7d 1f                	jge    c000b8ce <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000b8af:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b8b3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000b8b7:	7d 12                	jge    c000b8cb <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000b8b9:	8b 16                	mov    edx,DWORD PTR [esi]
c000b8bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b8bf:	53                   	push   ebx
c000b8c0:	55                   	push   ebp
c000b8c1:	45                   	inc    ebp
c000b8c2:	56                   	push   esi
c000b8c3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b8c6:	83 c4 10             	add    esp,0x10
c000b8c9:	eb e8                	jmp    c000b8b3 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000b8cb:	43                   	inc    ebx
c000b8cc:	eb dd                	jmp    c000b8ab <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000b8ce:	83 c4 1c             	add    esp,0x1c
c000b8d1:	5b                   	pop    ebx
c000b8d2:	5e                   	pop    esi
c000b8d3:	5f                   	pop    edi
c000b8d4:	5d                   	pop    ebp
c000b8d5:	c3                   	ret    

c000b8d6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000b8d6:	55                   	push   ebp
c000b8d7:	57                   	push   edi
c000b8d8:	31 ff                	xor    edi,edi
c000b8da:	56                   	push   esi
c000b8db:	53                   	push   ebx
c000b8dc:	83 ec 1c             	sub    esp,0x1c
c000b8df:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000b8e3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b8e7:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000b8ee:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000b8f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8f7:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000b8fb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b8ff:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000b902:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b906:	01 f9                	add    ecx,edi
c000b908:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000b90c:	7d 2f                	jge    c000b93d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000b90e:	31 f6                	xor    esi,esi
c000b910:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b914:	01 f2                	add    edx,esi
c000b916:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000b91a:	7d 1a                	jge    c000b936 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000b91c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b91f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000b922:	46                   	inc    esi
c000b923:	51                   	push   ecx
c000b924:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b928:	52                   	push   edx
c000b929:	55                   	push   ebp
c000b92a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b92d:	83 c4 10             	add    esp,0x10
c000b930:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b934:	eb da                	jmp    c000b910 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000b936:	47                   	inc    edi
c000b937:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000b93b:	eb c5                	jmp    c000b902 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000b93d:	83 c4 1c             	add    esp,0x1c
c000b940:	5b                   	pop    ebx
c000b941:	5e                   	pop    esi
c000b942:	5f                   	pop    edi
c000b943:	5d                   	pop    ebp
c000b944:	c3                   	ret    
c000b945:	90                   	nop

c000b946 <Video::blit(unsigned int*, int, int, int, int)>:
c000b946:	55                   	push   ebp
c000b947:	57                   	push   edi
c000b948:	56                   	push   esi
c000b949:	53                   	push   ebx
c000b94a:	83 ec 1c             	sub    esp,0x1c
c000b94d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b951:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b955:	85 c0                	test   eax,eax
c000b957:	79 02                	jns    c000b95b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000b959:	31 c0                	xor    eax,eax
c000b95b:	c1 e0 02             	shl    eax,0x2
c000b95e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b962:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b966:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b96a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000b96e:	39 d8                	cmp    eax,ebx
c000b970:	7e 49                	jle    c000b9bb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000b972:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b978:	7c 41                	jl     c000b9bb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000b97a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b97e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b982:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b986:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000b98a:	39 f9                	cmp    ecx,edi
c000b98c:	7e 22                	jle    c000b9b0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000b98e:	83 c5 04             	add    ebp,0x4
c000b991:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b997:	7c 14                	jl     c000b9ad <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000b999:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b99b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000b99e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b9a2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b9a6:	56                   	push   esi
c000b9a7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b9aa:	83 c4 10             	add    esp,0x10
c000b9ad:	47                   	inc    edi
c000b9ae:	eb d2                	jmp    c000b982 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000b9b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9b4:	43                   	inc    ebx
c000b9b5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b9b9:	eb ab                	jmp    c000b966 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000b9bb:	83 c4 1c             	add    esp,0x1c
c000b9be:	5b                   	pop    ebx
c000b9bf:	5e                   	pop    esi
c000b9c0:	5f                   	pop    edi
c000b9c1:	5d                   	pop    ebp
c000b9c2:	c3                   	ret    
c000b9c3:	90                   	nop

c000b9c4 <Video::clearScreen(unsigned int)>:
c000b9c4:	57                   	push   edi
c000b9c5:	56                   	push   esi
c000b9c6:	53                   	push   ebx
c000b9c7:	31 db                	xor    ebx,ebx
c000b9c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b9cd:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b9d3:	7e 1f                	jle    c000b9f4 <Video::clearScreen(unsigned int)+0x30>
c000b9d5:	31 ff                	xor    edi,edi
c000b9d7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b9dd:	7e 12                	jle    c000b9f1 <Video::clearScreen(unsigned int)+0x2d>
c000b9df:	8b 06                	mov    eax,DWORD PTR [esi]
c000b9e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9e5:	53                   	push   ebx
c000b9e6:	57                   	push   edi
c000b9e7:	47                   	inc    edi
c000b9e8:	56                   	push   esi
c000b9e9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	eb e6                	jmp    c000b9d7 <Video::clearScreen(unsigned int)+0x13>
c000b9f1:	43                   	inc    ebx
c000b9f2:	eb d9                	jmp    c000b9cd <Video::clearScreen(unsigned int)+0x9>
c000b9f4:	5b                   	pop    ebx
c000b9f5:	5e                   	pop    esi
c000b9f6:	5f                   	pop    edi
c000b9f7:	c3                   	ret    

c000b9f8 <Video::putpixel(int, int, unsigned int)>:
c000b9f8:	c7 44 24 04 68 41 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024168
c000ba00:	e9 bb 41 00 00       	jmp    c000fbc0 <KePanic(char const*)>
c000ba05:	90                   	nop

c000ba06 <Video::readPixelApprox(int, int)>:
c000ba06:	83 ec 18             	sub    esp,0x18
c000ba09:	68 89 41 02 c0       	push   0xc0024189
c000ba0e:	e8 ad 41 00 00       	call   c000fbc0 <KePanic(char const*)>
c000ba13:	31 c0                	xor    eax,eax
c000ba15:	83 c4 1c             	add    esp,0x1c
c000ba18:	c3                   	ret    
c000ba19:	90                   	nop

c000ba1a <Video::Video(char const*)>:
c000ba1a:	83 ec 0c             	sub    esp,0xc
c000ba1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba21:	83 ec 08             	sub    esp,0x8
c000ba24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba28:	50                   	push   eax
c000ba29:	e8 88 e1 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000ba2e:	83 c4 10             	add    esp,0x10
c000ba31:	ba 2c 42 02 c0       	mov    edx,0xc002422c
c000ba36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba3a:	89 10                	mov    DWORD PTR [eax],edx
c000ba3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba40:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ba4a:	90                   	nop
c000ba4b:	83 c4 0c             	add    esp,0xc
c000ba4e:	c3                   	ret    
c000ba4f:	90                   	nop

c000ba50 <Video::~Video()>:
c000ba50:	83 ec 0c             	sub    esp,0xc
c000ba53:	ba 2c 42 02 c0       	mov    edx,0xc002422c
c000ba58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba5c:	89 10                	mov    DWORD PTR [eax],edx
c000ba5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba62:	83 ec 0c             	sub    esp,0xc
c000ba65:	50                   	push   eax
c000ba66:	e8 eb de ff ff       	call   c0009956 <Device::~Device()>
c000ba6b:	83 c4 10             	add    esp,0x10
c000ba6e:	90                   	nop
c000ba6f:	83 c4 0c             	add    esp,0xc
c000ba72:	c3                   	ret    
c000ba73:	90                   	nop

c000ba74 <Video::~Video()>:
c000ba74:	83 ec 0c             	sub    esp,0xc
c000ba77:	83 ec 0c             	sub    esp,0xc
c000ba7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba7e:	e8 cd ff ff ff       	call   c000ba50 <Video::~Video()>
c000ba83:	83 c4 10             	add    esp,0x10
c000ba86:	83 ec 08             	sub    esp,0x8
c000ba89:	68 64 01 00 00       	push   0x164
c000ba8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba92:	e8 e5 17 00 00       	call   c000d27c <operator delete(void*, unsigned long)>
c000ba97:	83 c4 10             	add    esp,0x10
c000ba9a:	83 c4 0c             	add    esp,0xc
c000ba9d:	c3                   	ret    

c000ba9e <Video::isMonochrome()>:
c000ba9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baa2:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000baa8:	c3                   	ret    
c000baa9:	90                   	nop

c000baaa <Video::getWidth()>:
c000baaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000bab4:	c3                   	ret    
c000bab5:	90                   	nop

c000bab6 <Video::getHeight()>:
c000bab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baba:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000bac0:	c3                   	ret    
c000bac1:	90                   	nop

c000bac2 <Video::drawCursor(int, int, unsigned int*, int)>:
c000bac2:	55                   	push   ebp
c000bac3:	57                   	push   edi
c000bac4:	56                   	push   esi
c000bac5:	53                   	push   ebx
c000bac6:	83 ec 2c             	sub    esp,0x2c
c000bac9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bacd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000bad1:	83 f8 01             	cmp    eax,0x1
c000bad4:	19 c9                	sbb    ecx,ecx
c000bad6:	31 db                	xor    ebx,ebx
c000bad8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000badc:	89 cd                	mov    ebp,ecx
c000bade:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000bae6:	f7 d5                	not    ebp
c000bae8:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000baee:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000baf2:	01 d8                	add    eax,ebx
c000baf4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000baf8:	56                   	push   esi
c000baf9:	e8 b8 ff ff ff       	call   c000bab6 <Video::getHeight()>
c000bafe:	59                   	pop    ecx
c000baff:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000bb03:	7e 70                	jle    c000bb75 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000bb05:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bb09:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000bb0d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000bb10:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb14:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bb18:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000bb1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bb23:	89 f8                	mov    eax,edi
c000bb25:	83 c0 20             	add    eax,0x20
c000bb28:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb2c:	56                   	push   esi
c000bb2d:	e8 78 ff ff ff       	call   c000baaa <Video::getWidth()>
c000bb32:	5a                   	pop    edx
c000bb33:	39 c7                	cmp    edi,eax
c000bb35:	7d 34                	jge    c000bb6b <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000bb37:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000bb3c:	74 05                	je     c000bb43 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000bb3e:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb40:	55                   	push   ebp
c000bb41:	eb 0d                	jmp    c000bb50 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000bb43:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000bb48:	74 12                	je     c000bb5c <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000bb4a:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb4c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb50:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bb54:	57                   	push   edi
c000bb55:	56                   	push   esi
c000bb56:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bb59:	83 c4 10             	add    esp,0x10
c000bb5c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000bb60:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000bb64:	47                   	inc    edi
c000bb65:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000bb69:	75 c1                	jne    c000bb2c <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000bb6b:	43                   	inc    ebx
c000bb6c:	83 fb 20             	cmp    ebx,0x20
c000bb6f:	0f 85 79 ff ff ff    	jne    c000baee <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000bb75:	83 c4 2c             	add    esp,0x2c
c000bb78:	5b                   	pop    ebx
c000bb79:	5e                   	pop    esi
c000bb7a:	5f                   	pop    edi
c000bb7b:	5d                   	pop    ebp
c000bb7c:	c3                   	ret    
c000bb7d:	90                   	nop

c000bb7e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000bb7e:	55                   	push   ebp
c000bb7f:	57                   	push   edi
c000bb80:	56                   	push   esi
c000bb81:	53                   	push   ebx
c000bb82:	83 ec 48             	sub    esp,0x48
c000bb85:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000bb89:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000bb8d:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000bb91:	c1 e0 08             	shl    eax,0x8
c000bb94:	01 d0                	add    eax,edx
c000bb96:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000bb9a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb9e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000bba2:	c1 e0 08             	shl    eax,0x8
c000bba5:	01 d0                	add    eax,edx
c000bba7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bbab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bbaf:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000bbb4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bbb8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbbc:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000bbc3:	50                   	push   eax
c000bbc4:	e8 9a 3b 00 00       	call   c000f763 <malloc>
c000bbc9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bbcd:	83 c4 10             	add    esp,0x10
c000bbd0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000bbd5:	75 10                	jne    c000bbe7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c000bbd7:	83 ec 0c             	sub    esp,0xc
c000bbda:	68 b4 41 02 c0       	push   0xc00241b4
c000bbdf:	e8 dc 3f 00 00       	call   c000fbc0 <KePanic(char const*)>
c000bbe4:	83 c4 10             	add    esp,0x10
c000bbe7:	51                   	push   ecx
c000bbe8:	51                   	push   ecx
c000bbe9:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bbed:	50                   	push   eax
c000bbee:	68 c4 41 02 c0       	push   0xc00241c4
c000bbf3:	e8 84 b3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bbf8:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000bbfb:	83 e0 20             	and    eax,0x20
c000bbfe:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000bc02:	85 c0                	test   eax,eax
c000bc04:	5e                   	pop    esi
c000bc05:	0f 94 c0             	sete   al
c000bc08:	5f                   	pop    edi
c000bc09:	0f b6 c0             	movzx  eax,al
c000bc0c:	be 12 00 00 00       	mov    esi,0x12
c000bc11:	50                   	push   eax
c000bc12:	68 ce 41 02 c0       	push   0xc00241ce
c000bc17:	e8 60 b3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bc1c:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c000bc20:	83 c4 10             	add    esp,0x10
c000bc23:	89 d0                	mov    eax,edx
c000bc25:	85 d2                	test   edx,edx
c000bc27:	74 11                	je     c000bc3a <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000bc29:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c000bc2d:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000bc31:	c1 fe 03             	sar    esi,0x3
c000bc34:	0f af f1             	imul   esi,ecx
c000bc37:	83 c6 12             	add    esi,0x12
c000bc3a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000bc3f:	74 07                	je     c000bc48 <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c000bc41:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000bc46:	75 12                	jne    c000bc5a <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c000bc48:	83 ec 0c             	sub    esp,0xc
c000bc4b:	68 dc 41 02 c0       	push   0xc00241dc
c000bc50:	e8 27 b3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bc55:	e9 a0 02 00 00       	jmp    c000befa <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c000bc5a:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000bc5e:	83 f9 02             	cmp    ecx,0x2
c000bc61:	74 0e                	je     c000bc71 <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c000bc63:	83 f9 0a             	cmp    ecx,0xa
c000bc66:	0f 84 c8 00 00 00    	je     c000bd34 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c000bc6c:	e9 72 02 00 00       	jmp    c000bee3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c000bc71:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bc76:	75 0e                	jne    c000bc86 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000bc78:	84 c0                	test   al,al
c000bc7a:	75 0a                	jne    c000bc86 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000bc7c:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bc7f:	83 e8 18             	sub    eax,0x18
c000bc82:	a8 f7                	test   al,0xf7
c000bc84:	74 0d                	je     c000bc93 <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c000bc86:	83 ec 0c             	sub    esp,0xc
c000bc89:	68 f1 41 02 c0       	push   0xc00241f1
c000bc8e:	e9 58 02 00 00       	jmp    c000beeb <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000bc93:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000bc98:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bca0:	31 c0                	xor    eax,eax
c000bca2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bca6:	89 c7                	mov    edi,eax
c000bca8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bcb0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bcb5:	75 15                	jne    c000bccc <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000bcb7:	99                   	cdq    
c000bcb8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000bcbc:	85 d2                	test   edx,edx
c000bcbe:	75 0c                	jne    c000bccc <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000bcc0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000bcc4:	29 c7                	sub    edi,eax
c000bcc6:	4f                   	dec    edi
c000bcc7:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c000bccc:	31 d2                	xor    edx,edx
c000bcce:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bcd2:	75 08                	jne    c000bcdc <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000bcd4:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c000bcd9:	c1 e2 18             	shl    edx,0x18
c000bcdc:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c000bce1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000bce5:	c1 e1 10             	shl    ecx,0x10
c000bce8:	8d 47 01             	lea    eax,[edi+0x1]
c000bceb:	89 cd                	mov    ebp,ecx
c000bced:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c000bcf2:	c1 e1 08             	shl    ecx,0x8
c000bcf5:	09 e9                	or     ecx,ebp
c000bcf7:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bcfb:	09 e9                	or     ecx,ebp
c000bcfd:	09 d1                	or     ecx,edx
c000bcff:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bd03:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c000bd06:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000bd0a:	c1 fa 03             	sar    edx,0x3
c000bd0d:	01 d6                	add    esi,edx
c000bd0f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd13:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000bd17:	7e 04                	jle    c000bd1d <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c000bd19:	89 c7                	mov    edi,eax
c000bd1b:	eb 93                	jmp    c000bcb0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000bd1d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bd21:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd25:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bd29:	0f 8f 77 ff ff ff    	jg     c000bca6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c000bd2f:	e9 d3 01 00 00       	jmp    c000bf07 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd34:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bd39:	75 0e                	jne    c000bd49 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000bd3b:	85 d2                	test   edx,edx
c000bd3d:	75 0a                	jne    c000bd49 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000bd3f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bd42:	83 e8 18             	sub    eax,0x18
c000bd45:	a8 f7                	test   al,0xf7
c000bd47:	74 0d                	je     c000bd56 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c000bd49:	83 ec 0c             	sub    esp,0xc
c000bd4c:	68 ff 41 02 c0       	push   0xc00241ff
c000bd51:	e9 95 01 00 00       	jmp    c000beeb <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000bd56:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd5e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bd66:	31 c9                	xor    ecx,ecx
c000bd68:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bd6c:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c000bd70:	0f 8e 91 01 00 00    	jle    c000bf07 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd76:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c000bd7a:	0f 8d 87 01 00 00    	jge    c000bf07 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd80:	8d 46 01             	lea    eax,[esi+0x1]
c000bd83:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bd87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bd8b:	83 fd 7f             	cmp    ebp,0x7f
c000bd8e:	89 e8                	mov    eax,ebp
c000bd90:	0f 8e 9d 00 00 00    	jle    c000be33 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c000bd96:	83 e0 7f             	and    eax,0x7f
c000bd99:	31 d2                	xor    edx,edx
c000bd9b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd9f:	40                   	inc    eax
c000bda0:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bda4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bda8:	75 0a                	jne    c000bdb4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c000bdaa:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c000bdaf:	89 ea                	mov    edx,ebp
c000bdb1:	c1 e2 18             	shl    edx,0x18
c000bdb4:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c000bdb9:	c1 e0 10             	shl    eax,0x10
c000bdbc:	89 c7                	mov    edi,eax
c000bdbe:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000bdc3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bdc7:	c1 e0 08             	shl    eax,0x8
c000bdca:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bdce:	09 f8                	or     eax,edi
c000bdd0:	31 f6                	xor    esi,esi
c000bdd2:	09 c5                	or     ebp,eax
c000bdd4:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c000bdd9:	09 d5                	or     ebp,edx
c000bddb:	85 ff                	test   edi,edi
c000bddd:	75 1d                	jne    c000bdfc <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000bddf:	89 c8                	mov    eax,ecx
c000bde1:	99                   	cdq    
c000bde2:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000bde6:	85 d2                	test   edx,edx
c000bde8:	75 12                	jne    c000bdfc <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000bdea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bdee:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000bdf2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bdf6:	49                   	dec    ecx
c000bdf7:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000bdfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be00:	8d 51 01             	lea    edx,[ecx+0x1]
c000be03:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000be06:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c000be0a:	8d 46 01             	lea    eax,[esi+0x1]
c000be0d:	7e 06                	jle    c000be15 <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c000be0f:	89 c6                	mov    esi,eax
c000be11:	89 d1                	mov    ecx,edx
c000be13:	eb c6                	jmp    c000bddb <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c000be15:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000be19:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000be1d:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000be21:	c1 f8 03             	sar    eax,0x3
c000be24:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000be28:	89 d1                	mov    ecx,edx
c000be2a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000be2e:	e9 35 ff ff ff       	jmp    c000bd68 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c000be33:	8d 45 01             	lea    eax,[ebp+0x1]
c000be36:	31 f6                	xor    esi,esi
c000be38:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be3c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000be41:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be45:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000be4a:	75 1d                	jne    c000be69 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000be4c:	89 c8                	mov    eax,ecx
c000be4e:	99                   	cdq    
c000be4f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000be53:	85 d2                	test   edx,edx
c000be55:	75 12                	jne    c000be69 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000be57:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000be5b:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000be5f:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000be63:	49                   	dec    ecx
c000be64:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000be69:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000be71:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000be75:	75 10                	jne    c000be87 <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c000be77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be7b:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c000be80:	c1 e7 18             	shl    edi,0x18
c000be83:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000be87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be8b:	8d 51 01             	lea    edx,[ecx+0x1]
c000be8e:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c000be93:	c1 e0 10             	shl    eax,0x10
c000be96:	89 c7                	mov    edi,eax
c000be98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be9c:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c000bea1:	c1 e0 08             	shl    eax,0x8
c000bea4:	09 f8                	or     eax,edi
c000bea6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000beaa:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c000beae:	09 f8                	or     eax,edi
c000beb0:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000beb4:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000beb8:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000bebb:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bebf:	c1 f8 03             	sar    eax,0x3
c000bec2:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000bec6:	8d 46 01             	lea    eax,[esi+0x1]
c000bec9:	39 f5                	cmp    ebp,esi
c000becb:	7e 09                	jle    c000bed6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c000becd:	89 c6                	mov    esi,eax
c000becf:	89 d1                	mov    ecx,edx
c000bed1:	e9 6f ff ff ff       	jmp    c000be45 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c000bed6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000beda:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000bede:	e9 45 ff ff ff       	jmp    c000be28 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c000bee3:	52                   	push   edx
c000bee4:	52                   	push   edx
c000bee5:	51                   	push   ecx
c000bee6:	68 0e 42 02 c0       	push   0xc002420e
c000beeb:	e8 8c b0 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bef0:	58                   	pop    eax
c000bef1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bef5:	e8 79 38 00 00       	call   c000f773 <free>
c000befa:	83 c4 10             	add    esp,0x10
c000befd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000bf05:	eb 14                	jmp    c000bf1b <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c000bf07:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bf0b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000bf0f:	89 18                	mov    DWORD PTR [eax],ebx
c000bf11:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000bf15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf19:	89 18                	mov    DWORD PTR [eax],ebx
c000bf1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf1f:	83 c4 3c             	add    esp,0x3c
c000bf22:	5b                   	pop    ebx
c000bf23:	5e                   	pop    esi
c000bf24:	5f                   	pop    edi
c000bf25:	5d                   	pop    ebp
c000bf26:	c3                   	ret    
c000bf27:	90                   	nop

c000bf28 <Video::putTGA(int, int, unsigned char*, int)>:
c000bf28:	55                   	push   ebp
c000bf29:	57                   	push   edi
c000bf2a:	56                   	push   esi
c000bf2b:	53                   	push   ebx
c000bf2c:	83 ec 28             	sub    esp,0x28
c000bf2f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000bf33:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bf37:	50                   	push   eax
c000bf38:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bf3c:	50                   	push   eax
c000bf3d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bf41:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bf45:	57                   	push   edi
c000bf46:	e8 33 fc ff ff       	call   c000bb7e <Video::tgaParse(unsigned char*, int, int*, int*)>
c000bf4b:	83 c4 20             	add    esp,0x20
c000bf4e:	85 c0                	test   eax,eax
c000bf50:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bf54:	74 3a                	je     c000bf90 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000bf56:	89 c6                	mov    esi,eax
c000bf58:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf5c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bf60:	39 d8                	cmp    eax,ebx
c000bf62:	7e 2c                	jle    c000bf90 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000bf64:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bf68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf6c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bf70:	39 e8                	cmp    eax,ebp
c000bf72:	7e 19                	jle    c000bf8d <Video::putTGA(int, int, unsigned char*, int)+0x65>
c000bf74:	83 c6 04             	add    esi,0x4
c000bf77:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000bf7a:	85 c0                	test   eax,eax
c000bf7c:	79 0c                	jns    c000bf8a <Video::putTGA(int, int, unsigned char*, int)+0x62>
c000bf7e:	8b 17                	mov    edx,DWORD PTR [edi]
c000bf80:	50                   	push   eax
c000bf81:	53                   	push   ebx
c000bf82:	55                   	push   ebp
c000bf83:	57                   	push   edi
c000bf84:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bf87:	83 c4 10             	add    esp,0x10
c000bf8a:	45                   	inc    ebp
c000bf8b:	eb db                	jmp    c000bf68 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000bf8d:	43                   	inc    ebx
c000bf8e:	eb c8                	jmp    c000bf58 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000bf90:	83 c4 1c             	add    esp,0x1c
c000bf93:	5b                   	pop    ebx
c000bf94:	5e                   	pop    esi
c000bf95:	5f                   	pop    edi
c000bf96:	5d                   	pop    ebp
c000bf97:	c3                   	ret    

c000bf98 <ACPI::close(int, int, void*)>:
c000bf98:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf9d:	c3                   	ret    
c000bf9e:	66 90                	xchg   ax,ax

c000bfa0 <loadACPITables(unsigned char*)>:
c000bfa0:	57                   	push   edi
c000bfa1:	56                   	push   esi
c000bfa2:	53                   	push   ebx
c000bfa3:	83 ec 60             	sub    esp,0x60
c000bfa6:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000bfab:	0f 84 43 02 00 00    	je     c000c1f4 <loadACPITables(unsigned char*)+0x254>
c000bfb1:	a0 80 cd 02 c0       	mov    al,ds:0xc002cd80
c000bfb6:	0f b6 c0             	movzx  eax,al
c000bfb9:	85 c0                	test   eax,eax
c000bfbb:	74 7b                	je     c000c038 <loadACPITables(unsigned char*)+0x98>
c000bfbd:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bfc1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bfc5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bfc9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bfcc:	83 e8 24             	sub    eax,0x24
c000bfcf:	c1 e8 03             	shr    eax,0x3
c000bfd2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfd6:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000bfde:	66 90                	xchg   ax,ax
c000bfe0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bfe4:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000bfe8:	0f 8d ba 00 00 00    	jge    c000c0a8 <loadACPITables(unsigned char*)+0x108>
c000bfee:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bff2:	83 c0 24             	add    eax,0x24
c000bff5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bff9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bffd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c001:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000c005:	c1 e0 03             	shl    eax,0x3
c000c008:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000c00c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c010:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000c013:	8b 00                	mov    eax,DWORD PTR [eax]
c000c015:	89 c1                	mov    ecx,eax
c000c017:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c01c:	8d 50 01             	lea    edx,[eax+0x1]
c000c01f:	89 15 60 cb 02 c0    	mov    DWORD PTR ds:0xc002cb60,edx
c000c025:	89 ca                	mov    edx,ecx
c000c027:	89 14 c5 84 cb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd347c],edx
c000c02e:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000c033:	eb ab                	jmp    c000bfe0 <loadACPITables(unsigned char*)+0x40>
c000c035:	8d 76 00             	lea    esi,[esi+0x0]
c000c038:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c03c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c040:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c044:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c047:	83 e8 24             	sub    eax,0x24
c000c04a:	c1 e8 02             	shr    eax,0x2
c000c04d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c051:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000c059:	8d 76 00             	lea    esi,[esi+0x0]
c000c05c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c060:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000c064:	7d 42                	jge    c000c0a8 <loadACPITables(unsigned char*)+0x108>
c000c066:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c06a:	83 c0 24             	add    eax,0x24
c000c06d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c071:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c075:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c079:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c07d:	c1 e0 02             	shl    eax,0x2
c000c080:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000c084:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c088:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c08a:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c08f:	8d 50 01             	lea    edx,[eax+0x1]
c000c092:	89 15 60 cb 02 c0    	mov    DWORD PTR ds:0xc002cb60,edx
c000c098:	89 ca                	mov    edx,ecx
c000c09a:	89 14 c5 84 cb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd347c],edx
c000c0a1:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000c0a6:	eb b4                	jmp    c000c05c <loadACPITables(unsigned char*)+0xbc>
c000c0a8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000c0b0:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c0b5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000c0b9:	0f 8d 39 01 00 00    	jge    c000c1f8 <loadACPITables(unsigned char*)+0x258>
c000c0bf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c0c3:	8b 04 c5 84 cb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd347c]
c000c0ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0da:	25 ff 0f 00 00       	and    eax,0xfff
c000c0df:	89 c6                	mov    esi,eax
c000c0e1:	8b 1d 90 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d290
c000c0e7:	83 ec 0c             	sub    esp,0xc
c000c0ea:	6a 01                	push   0x1
c000c0ec:	e8 02 71 00 00       	call   c00131f3 <Virt::allocateKernelVirtualPages(int)>
c000c0f1:	83 c4 10             	add    esp,0x10
c000c0f4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c0f8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c0fe:	83 ec 0c             	sub    esp,0xc
c000c101:	6a 01                	push   0x1
c000c103:	6a 01                	push   0x1
c000c105:	50                   	push   eax
c000c106:	52                   	push   edx
c000c107:	53                   	push   ebx
c000c108:	e8 b3 79 00 00       	call   c0013ac0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c10d:	83 c4 20             	add    esp,0x20
c000c110:	09 f0                	or     eax,esi
c000c112:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c116:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c11a:	c1 e0 03             	shl    eax,0x3
c000c11d:	05 80 cb 02 c0       	add    eax,0xc002cb80
c000c122:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c12a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c12e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000c136:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c13a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c13e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c142:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c146:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c14a:	89 c6                	mov    esi,eax
c000c14c:	89 d7                	mov    edi,edx
c000c14e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c150:	89 c8                	mov    eax,ecx
c000c152:	89 fa                	mov    edx,edi
c000c154:	89 f3                	mov    ebx,esi
c000c156:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c15a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c15e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c162:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c166:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c169:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c16d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c171:	05 00 10 00 00       	add    eax,0x1000
c000c176:	c1 e8 0c             	shr    eax,0xc
c000c179:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c17d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c181:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c185:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c189:	25 ff 0f 00 00       	and    eax,0xfff
c000c18e:	89 c6                	mov    esi,eax
c000c190:	8b 1d 90 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d290
c000c196:	83 ec 0c             	sub    esp,0xc
c000c199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c19d:	e8 51 70 00 00       	call   c00131f3 <Virt::allocateKernelVirtualPages(int)>
c000c1a2:	83 c4 10             	add    esp,0x10
c000c1a5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c1a9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c1af:	83 ec 0c             	sub    esp,0xc
c000c1b2:	6a 01                	push   0x1
c000c1b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b8:	50                   	push   eax
c000c1b9:	52                   	push   edx
c000c1ba:	53                   	push   ebx
c000c1bb:	e8 00 79 00 00       	call   c0013ac0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c1c0:	83 c4 20             	add    esp,0x20
c000c1c3:	09 f0                	or     eax,esi
c000c1c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1cd:	83 ec 0c             	sub    esp,0xc
c000c1d0:	50                   	push   eax
c000c1d1:	e8 25 73 00 00       	call   c00134fb <Virt::freeKernelVirtualPages(unsigned long)>
c000c1d6:	83 c4 10             	add    esp,0x10
c000c1d9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c1dd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c1e1:	89 14 c5 84 cb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd347c],edx
c000c1e8:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000c1ed:	e9 be fe ff ff       	jmp    c000c0b0 <loadACPITables(unsigned char*)+0x110>
c000c1f2:	66 90                	xchg   ax,ax
c000c1f4:	90                   	nop
c000c1f5:	8d 76 00             	lea    esi,[esi+0x0]
c000c1f8:	83 c4 60             	add    esp,0x60
c000c1fb:	5b                   	pop    ebx
c000c1fc:	5e                   	pop    esi
c000c1fd:	5f                   	pop    edi
c000c1fe:	c3                   	ret    
c000c1ff:	90                   	nop

c000c200 <findRSDT(unsigned char*)>:
c000c200:	57                   	push   edi
c000c201:	56                   	push   esi
c000c202:	53                   	push   ebx
c000c203:	83 ec 50             	sub    esp,0x50
c000c206:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c20b:	85 c0                	test   eax,eax
c000c20d:	75 0d                	jne    c000c21c <findRSDT(unsigned char*)+0x1c>
c000c20f:	b8 00 00 00 00       	mov    eax,0x0
c000c214:	e9 2b 01 00 00       	jmp    c000c344 <findRSDT(unsigned char*)+0x144>
c000c219:	8d 76 00             	lea    esi,[esi+0x0]
c000c21c:	89 e0                	mov    eax,esp
c000c21e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c222:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c226:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c22a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000c232:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c236:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c23a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c23e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000c242:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c246:	89 c6                	mov    esi,eax
c000c248:	89 d7                	mov    edi,edx
c000c24a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c24c:	89 c8                	mov    eax,ecx
c000c24e:	89 fa                	mov    edx,edi
c000c250:	89 f3                	mov    ebx,esi
c000c252:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000c256:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c25a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c25e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000c262:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000c266:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000c26e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c272:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c276:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c27a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c27e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c282:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c286:	25 ff 0f 00 00       	and    eax,0xfff
c000c28b:	89 c6                	mov    esi,eax
c000c28d:	8b 1d 90 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d290
c000c293:	83 ec 0c             	sub    esp,0xc
c000c296:	6a 02                	push   0x2
c000c298:	e8 56 6f 00 00       	call   c00131f3 <Virt::allocateKernelVirtualPages(int)>
c000c29d:	83 c4 10             	add    esp,0x10
c000c2a0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c2a4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c2aa:	83 ec 0c             	sub    esp,0xc
c000c2ad:	6a 01                	push   0x1
c000c2af:	6a 02                	push   0x2
c000c2b1:	50                   	push   eax
c000c2b2:	52                   	push   edx
c000c2b3:	53                   	push   ebx
c000c2b4:	e8 07 78 00 00       	call   c0013ac0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2b9:	83 c4 20             	add    esp,0x20
c000c2bc:	09 f0                	or     eax,esi
c000c2be:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c2c2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2c6:	25 ff 0f 00 00       	and    eax,0xfff
c000c2cb:	89 c6                	mov    esi,eax
c000c2cd:	8b 1d 90 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d290
c000c2d3:	83 ec 0c             	sub    esp,0xc
c000c2d6:	6a 02                	push   0x2
c000c2d8:	e8 16 6f 00 00       	call   c00131f3 <Virt::allocateKernelVirtualPages(int)>
c000c2dd:	83 c4 10             	add    esp,0x10
c000c2e0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2e4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c2ea:	83 ec 0c             	sub    esp,0xc
c000c2ed:	6a 01                	push   0x1
c000c2ef:	6a 02                	push   0x2
c000c2f1:	50                   	push   eax
c000c2f2:	52                   	push   edx
c000c2f3:	53                   	push   ebx
c000c2f4:	e8 c7 77 00 00       	call   c0013ac0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2f9:	83 c4 20             	add    esp,0x20
c000c2fc:	09 f0                	or     eax,esi
c000c2fe:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c302:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c307:	85 c0                	test   eax,eax
c000c309:	75 11                	jne    c000c31c <findRSDT(unsigned char*)+0x11c>
c000c30b:	c6 05 80 cd 02 c0 00 	mov    BYTE PTR ds:0xc002cd80,0x0
c000c312:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c316:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c31a:	eb 24                	jmp    c000c340 <findRSDT(unsigned char*)+0x140>
c000c31c:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c321:	83 f8 02             	cmp    eax,0x2
c000c324:	75 12                	jne    c000c338 <findRSDT(unsigned char*)+0x138>
c000c326:	c6 05 80 cd 02 c0 01 	mov    BYTE PTR ds:0xc002cd80,0x1
c000c32d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c331:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c335:	eb 09                	jmp    c000c340 <findRSDT(unsigned char*)+0x140>
c000c337:	90                   	nop
c000c338:	b8 00 00 00 00       	mov    eax,0x0
c000c33d:	eb 05                	jmp    c000c344 <findRSDT(unsigned char*)+0x144>
c000c33f:	90                   	nop
c000c340:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c344:	83 c4 50             	add    esp,0x50
c000c347:	5b                   	pop    ebx
c000c348:	5e                   	pop    esi
c000c349:	5f                   	pop    edi
c000c34a:	c3                   	ret    
c000c34b:	90                   	nop

c000c34c <findDataTable(unsigned char*, char*)>:
c000c34c:	83 ec 1c             	sub    esp,0x1c
c000c34f:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000c354:	75 0a                	jne    c000c360 <findDataTable(unsigned char*, char*)+0x14>
c000c356:	b8 00 00 00 00       	mov    eax,0x0
c000c35b:	eb 5f                	jmp    c000c3bc <findDataTable(unsigned char*, char*)+0x70>
c000c35d:	8d 76 00             	lea    esi,[esi+0x0]
c000c360:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c368:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c36d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000c371:	7d 41                	jge    c000c3b4 <findDataTable(unsigned char*, char*)+0x68>
c000c373:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c377:	c1 e0 03             	shl    eax,0x3
c000c37a:	05 80 cb 02 c0       	add    eax,0xc002cb80
c000c37f:	83 ec 04             	sub    esp,0x4
c000c382:	6a 04                	push   0x4
c000c384:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c388:	50                   	push   eax
c000c389:	e8 f2 3f ff ff       	call   c0000380 <memcmp>
c000c38e:	83 c4 10             	add    esp,0x10
c000c391:	85 c0                	test   eax,eax
c000c393:	0f 94 c0             	sete   al
c000c396:	0f b6 c0             	movzx  eax,al
c000c399:	85 c0                	test   eax,eax
c000c39b:	74 0f                	je     c000c3ac <findDataTable(unsigned char*, char*)+0x60>
c000c39d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c3a1:	8b 04 c5 84 cb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd347c]
c000c3a8:	eb 12                	jmp    c000c3bc <findDataTable(unsigned char*, char*)+0x70>
c000c3aa:	66 90                	xchg   ax,ax
c000c3ac:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000c3b1:	eb b5                	jmp    c000c368 <findDataTable(unsigned char*, char*)+0x1c>
c000c3b3:	90                   	nop
c000c3b4:	b8 00 00 00 00       	mov    eax,0x0
c000c3b9:	8d 76 00             	lea    esi,[esi+0x0]
c000c3bc:	83 c4 1c             	add    esp,0x1c
c000c3bf:	c3                   	ret    

c000c3c0 <scanMADT()>:
c000c3c0:	53                   	push   ebx
c000c3c1:	83 ec 38             	sub    esp,0x38
c000c3c4:	c7 05 88 cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cd88,0x0
c000c3ce:	c7 05 84 cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cd84,0x0
c000c3d8:	83 ec 0c             	sub    esp,0xc
c000c3db:	68 70 42 02 c0       	push   0xc0024270
c000c3e0:	e8 97 ab ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c3e5:	83 c4 10             	add    esp,0x10
c000c3e8:	e8 89 df 00 00       	call   c001a376 <HalFindRSDP()>
c000c3ed:	a3 88 cd 02 c0       	mov    ds:0xc002cd88,eax
c000c3f2:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c3f7:	85 c0                	test   eax,eax
c000c3f9:	0f 84 59 04 00 00    	je     c000c858 <scanMADT()+0x498>
c000c3ff:	83 ec 0c             	sub    esp,0xc
c000c402:	68 7e 42 02 c0       	push   0xc002427e
c000c407:	e8 70 ab ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c40c:	83 c4 10             	add    esp,0x10
c000c40f:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c414:	83 ec 0c             	sub    esp,0xc
c000c417:	50                   	push   eax
c000c418:	e8 e3 fd ff ff       	call   c000c200 <findRSDT(unsigned char*)>
c000c41d:	83 c4 10             	add    esp,0x10
c000c420:	a3 84 cd 02 c0       	mov    ds:0xc002cd84,eax
c000c425:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000c42a:	85 c0                	test   eax,eax
c000c42c:	0f 84 2a 04 00 00    	je     c000c85c <scanMADT()+0x49c>
c000c432:	8b 15 84 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cd84
c000c438:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c43d:	83 ec 04             	sub    esp,0x4
c000c440:	52                   	push   edx
c000c441:	50                   	push   eax
c000c442:	68 e8 43 02 c0       	push   0xc00243e8
c000c447:	e8 30 ab ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000c454:	83 ec 0c             	sub    esp,0xc
c000c457:	50                   	push   eax
c000c458:	e8 43 fb ff ff       	call   c000bfa0 <loadACPITables(unsigned char*)>
c000c45d:	83 c4 10             	add    esp,0x10
c000c460:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000c465:	83 ec 08             	sub    esp,0x8
c000c468:	68 8d 42 02 c0       	push   0xc002428d
c000c46d:	50                   	push   eax
c000c46e:	e8 d9 fe ff ff       	call   c000c34c <findDataTable(unsigned char*, char*)>
c000c473:	83 c4 10             	add    esp,0x10
c000c476:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c47a:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000c47f:	0f 84 db 03 00 00    	je     c000c860 <scanMADT()+0x4a0>
c000c485:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c48d:	8d 76 00             	lea    esi,[esi+0x0]
c000c490:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c494:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c497:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000c49b:	0f 87 c7 03 00 00    	ja     c000c868 <scanMADT()+0x4a8>
c000c4a1:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000c4a9:	0f 87 b9 03 00 00    	ja     c000c868 <scanMADT()+0x4a8>
c000c4af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c4b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4bb:	8d 50 01             	lea    edx,[eax+0x1]
c000c4be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c4c6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c4ca:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000c4ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4d2:	8d 50 01             	lea    edx,[eax+0x1]
c000c4d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4d9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c4dd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c4e1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000c4e5:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000c4ea:	83 f8 02             	cmp    eax,0x2
c000c4ed:	0f 86 71 03 00 00    	jbe    c000c864 <scanMADT()+0x4a4>
c000c4f3:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c4f8:	85 c0                	test   eax,eax
c000c4fa:	75 58                	jne    c000c554 <scanMADT()+0x194>
c000c4fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c500:	8d 50 01             	lea    edx,[eax+0x1]
c000c503:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c507:	8a 15 80 cf 02 c0    	mov    dl,BYTE PTR ds:0xc002cf80
c000c50d:	0f b6 d2             	movzx  edx,dl
c000c510:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c514:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c518:	88 82 c0 cf 02 c0    	mov    BYTE PTR [edx-0x3ffd3040],al
c000c51e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c522:	8d 50 01             	lea    edx,[eax+0x1]
c000c525:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c529:	8a 15 80 cf 02 c0    	mov    dl,BYTE PTR ds:0xc002cf80
c000c52f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c532:	88 0d 80 cf 02 c0    	mov    BYTE PTR ds:0xc002cf80,cl
c000c538:	0f b6 d2             	movzx  edx,dl
c000c53b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c53f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c543:	88 82 a0 cf 02 c0    	mov    BYTE PTR [edx-0x3ffd3060],al
c000c549:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c54e:	e9 f1 02 00 00       	jmp    c000c844 <scanMADT()+0x484>
c000c553:	90                   	nop
c000c554:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c559:	83 f8 01             	cmp    eax,0x1
c000c55c:	0f 85 32 01 00 00    	jne    c000c694 <scanMADT()+0x2d4>
c000c562:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c566:	8d 50 01             	lea    edx,[eax+0x1]
c000c569:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c56d:	8a 15 40 ce 02 c0    	mov    dl,BYTE PTR ds:0xc002ce40
c000c573:	0f b6 d2             	movzx  edx,dl
c000c576:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c57a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c57e:	88 82 60 ce 02 c0    	mov    BYTE PTR [edx-0x3ffd31a0],al
c000c584:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000c589:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c58d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c591:	01 d0                	add    eax,edx
c000c593:	83 c0 2c             	add    eax,0x2c
c000c596:	8a 00                	mov    al,BYTE PTR [eax]
c000c598:	0f b6 d0             	movzx  edx,al
c000c59b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c59f:	8d 48 01             	lea    ecx,[eax+0x1]
c000c5a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5a6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c5aa:	0f b6 c0             	movzx  eax,al
c000c5ad:	c1 e0 08             	shl    eax,0x8
c000c5b0:	89 d1                	mov    ecx,edx
c000c5b2:	09 c1                	or     ecx,eax
c000c5b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5b8:	8d 50 02             	lea    edx,[eax+0x2]
c000c5bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5bf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5c3:	0f b6 c0             	movzx  eax,al
c000c5c6:	c1 e0 10             	shl    eax,0x10
c000c5c9:	09 c1                	or     ecx,eax
c000c5cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5cf:	8d 50 03             	lea    edx,[eax+0x3]
c000c5d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5d6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5da:	0f b6 c0             	movzx  eax,al
c000c5dd:	c1 e0 18             	shl    eax,0x18
c000c5e0:	09 c1                	or     ecx,eax
c000c5e2:	89 ca                	mov    edx,ecx
c000c5e4:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c5e9:	0f b6 c0             	movzx  eax,al
c000c5ec:	89 14 85 80 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3180],edx
c000c5f3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c5f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c5fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c600:	01 d0                	add    eax,edx
c000c602:	83 c0 2c             	add    eax,0x2c
c000c605:	8a 00                	mov    al,BYTE PTR [eax]
c000c607:	0f b6 d0             	movzx  edx,al
c000c60a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c60e:	8d 48 01             	lea    ecx,[eax+0x1]
c000c611:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c615:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c619:	0f b6 c0             	movzx  eax,al
c000c61c:	c1 e0 08             	shl    eax,0x8
c000c61f:	89 d1                	mov    ecx,edx
c000c621:	09 c1                	or     ecx,eax
c000c623:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c627:	8d 50 02             	lea    edx,[eax+0x2]
c000c62a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c62e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c632:	0f b6 c0             	movzx  eax,al
c000c635:	c1 e0 10             	shl    eax,0x10
c000c638:	09 c1                	or     ecx,eax
c000c63a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c63e:	8d 50 03             	lea    edx,[eax+0x3]
c000c641:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c645:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c649:	0f b6 c0             	movzx  eax,al
c000c64c:	c1 e0 18             	shl    eax,0x18
c000c64f:	09 c1                	or     ecx,eax
c000c651:	89 ca                	mov    edx,ecx
c000c653:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c658:	0f b6 c0             	movzx  eax,al
c000c65b:	89 14 85 00 cf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3100],edx
c000c662:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c667:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c66c:	83 c0 01             	add    eax,0x1
c000c66f:	a2 40 ce 02 c0       	mov    ds:0xc002ce40,al
c000c674:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c679:	0f b6 c0             	movzx  eax,al
c000c67c:	83 ec 08             	sub    esp,0x8
c000c67f:	50                   	push   eax
c000c680:	68 92 42 02 c0       	push   0xc0024292
c000c685:	e8 f2 a8 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c68a:	83 c4 10             	add    esp,0x10
c000c68d:	e9 b2 01 00 00       	jmp    c000c844 <scanMADT()+0x484>
c000c692:	66 90                	xchg   ax,ax
c000c694:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c699:	83 f8 02             	cmp    eax,0x2
c000c69c:	0f 85 ea 00 00 00    	jne    c000c78c <scanMADT()+0x3cc>
c000c6a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6a6:	8d 50 01             	lea    edx,[eax+0x1]
c000c6a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6b1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c6b5:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000c6b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6bd:	8d 50 01             	lea    edx,[eax+0x1]
c000c6c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6c8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c6cc:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000c6d0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6d8:	01 d0                	add    eax,edx
c000c6da:	83 c0 2c             	add    eax,0x2c
c000c6dd:	8a 00                	mov    al,BYTE PTR [eax]
c000c6df:	0f b6 d0             	movzx  edx,al
c000c6e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6e6:	8d 48 01             	lea    ecx,[eax+0x1]
c000c6e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6ed:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c6f1:	0f b6 c0             	movzx  eax,al
c000c6f4:	c1 e0 08             	shl    eax,0x8
c000c6f7:	89 d1                	mov    ecx,edx
c000c6f9:	09 c1                	or     ecx,eax
c000c6fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6ff:	8d 50 02             	lea    edx,[eax+0x2]
c000c702:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c706:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c70a:	0f b6 c0             	movzx  eax,al
c000c70d:	c1 e0 10             	shl    eax,0x10
c000c710:	09 c1                	or     ecx,eax
c000c712:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c716:	8d 50 03             	lea    edx,[eax+0x3]
c000c719:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c71d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c721:	0f b6 c0             	movzx  eax,al
c000c724:	c1 e0 18             	shl    eax,0x18
c000c727:	09 c8                	or     eax,ecx
c000c729:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c72d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c732:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c736:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c73a:	01 d0                	add    eax,edx
c000c73c:	83 c0 2c             	add    eax,0x2c
c000c73f:	8a 00                	mov    al,BYTE PTR [eax]
c000c741:	0f b6 c0             	movzx  eax,al
c000c744:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c748:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c74b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c74f:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000c753:	0f b6 d2             	movzx  edx,dl
c000c756:	c1 e2 08             	shl    edx,0x8
c000c759:	09 d0                	or     eax,edx
c000c75b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000c760:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c765:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c76a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c76e:	88 90 48 69 02 c0    	mov    BYTE PTR [eax-0x3ffd96b8],dl
c000c774:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000c779:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000c77e:	66 89 84 12 20 ce 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd31e0],ax
c000c786:	e9 b9 00 00 00       	jmp    c000c844 <scanMADT()+0x484>
c000c78b:	90                   	nop
c000c78c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c791:	83 f8 04             	cmp    eax,0x4
c000c794:	0f 85 9a 00 00 00    	jne    c000c834 <scanMADT()+0x474>
c000c79a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c79e:	8d 50 01             	lea    edx,[eax+0x1]
c000c7a1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c7a9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c7ad:	0f b6 c0             	movzx  eax,al
c000c7b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c7b4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c7b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7bc:	01 d0                	add    eax,edx
c000c7be:	83 c0 2c             	add    eax,0x2c
c000c7c1:	8a 00                	mov    al,BYTE PTR [eax]
c000c7c3:	0f b6 d0             	movzx  edx,al
c000c7c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7ca:	8d 48 01             	lea    ecx,[eax+0x1]
c000c7cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c7d1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c7d5:	0f b6 c0             	movzx  eax,al
c000c7d8:	c1 e0 08             	shl    eax,0x8
c000c7db:	09 d0                	or     eax,edx
c000c7dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c7e1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c7e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7ea:	8d 50 01             	lea    edx,[eax+0x1]
c000c7ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c7f5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c7f9:	0f b6 c0             	movzx  eax,al
c000c7fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c804:	c1 e0 08             	shl    eax,0x8
c000c807:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c80b:	89 c1                	mov    ecx,eax
c000c80d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c811:	c1 e0 18             	shl    eax,0x18
c000c814:	89 c3                	mov    ebx,eax
c000c816:	a1 8c cd 02 c0       	mov    eax,ds:0xc002cd8c
c000c81b:	8d 50 01             	lea    edx,[eax+0x1]
c000c81e:	89 15 8c cd 02 c0    	mov    DWORD PTR ds:0xc002cd8c,edx
c000c824:	09 d9                	or     ecx,ebx
c000c826:	89 ca                	mov    edx,ecx
c000c828:	89 14 85 a0 cd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3260],edx
c000c82f:	eb 13                	jmp    c000c844 <scanMADT()+0x484>
c000c831:	8d 76 00             	lea    esi,[esi+0x0]
c000c834:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c839:	83 f8 05             	cmp    eax,0x5
c000c83c:	75 06                	jne    c000c844 <scanMADT()+0x484>
c000c83e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000c843:	90                   	nop
c000c844:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000c849:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c84d:	01 d0                	add    eax,edx
c000c84f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c853:	e9 38 fc ff ff       	jmp    c000c490 <scanMADT()+0xd0>
c000c858:	90                   	nop
c000c859:	eb 0d                	jmp    c000c868 <scanMADT()+0x4a8>
c000c85b:	90                   	nop
c000c85c:	90                   	nop
c000c85d:	eb 09                	jmp    c000c868 <scanMADT()+0x4a8>
c000c85f:	90                   	nop
c000c860:	90                   	nop
c000c861:	eb 05                	jmp    c000c868 <scanMADT()+0x4a8>
c000c863:	90                   	nop
c000c864:	90                   	nop
c000c865:	8d 76 00             	lea    esi,[esi+0x0]
c000c868:	83 c4 38             	add    esp,0x38
c000c86b:	5b                   	pop    ebx
c000c86c:	c3                   	ret    
c000c86d:	90                   	nop
c000c86e:	66 90                	xchg   ax,ax

c000c870 <ACPI::ACPI()>:
c000c870:	83 ec 0c             	sub    esp,0xc
c000c873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c877:	83 ec 08             	sub    esp,0x8
c000c87a:	68 ae 42 02 c0       	push   0xc00242ae
c000c87f:	50                   	push   eax
c000c880:	e8 31 d3 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000c885:	83 c4 10             	add    esp,0x10
c000c888:	ba 8c 44 02 c0       	mov    edx,0xc002448c
c000c88d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c891:	89 10                	mov    DWORD PTR [eax],edx
c000c893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c897:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000c89e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8a2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000c8ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8b0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000c8ba:	90                   	nop
c000c8bb:	83 c4 0c             	add    esp,0xc
c000c8be:	c3                   	ret    
c000c8bf:	90                   	nop

c000c8c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000c8c0:	83 ec 2c             	sub    esp,0x2c
c000c8c3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c8c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c8cb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c8cf:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000c8d3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000c8d8:	88 d0                	mov    al,dl
c000c8da:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c8de:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c8e3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c8eb:	90                   	nop
c000c8ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8f0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c8f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c8fa:	0f 8d b0 00 00 00    	jge    c000c9b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000c900:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c904:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c908:	83 c2 2a             	add    edx,0x2a
c000c90b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000c90f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000c914:	0f b7 c0             	movzx  eax,ax
c000c917:	39 c2                	cmp    edx,eax
c000c919:	0f 85 85 00 00 00    	jne    c000c9a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c91f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c923:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c927:	83 c2 2a             	add    edx,0x2a
c000c92a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000c92e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000c933:	0f b6 c0             	movzx  eax,al
c000c936:	39 c2                	cmp    edx,eax
c000c938:	75 6a                	jne    c000c9a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c93a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c93f:	85 c0                	test   eax,eax
c000c941:	74 3d                	je     c000c980 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000c943:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c947:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c94b:	83 c2 2a             	add    edx,0x2a
c000c94e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000c952:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c956:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c959:	39 c2                	cmp    edx,eax
c000c95b:	74 13                	je     c000c970 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000c95d:	83 ec 0c             	sub    esp,0xc
c000c960:	68 0c 44 02 c0       	push   0xc002440c
c000c965:	e8 56 32 00 00       	call   c000fbc0 <KePanic(char const*)>
c000c96a:	83 c4 10             	add    esp,0x10
c000c96d:	8d 76 00             	lea    esi,[esi+0x0]
c000c970:	83 ec 0c             	sub    esp,0xc
c000c973:	68 b3 42 02 c0       	push   0xc00242b3
c000c978:	e8 43 32 00 00       	call   c000fbc0 <KePanic(char const*)>
c000c97d:	83 c4 10             	add    esp,0x10
c000c980:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c984:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c988:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c98c:	83 c2 2a             	add    edx,0x2a
c000c98f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000c993:	8b 02                	mov    eax,DWORD PTR [edx]
c000c995:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000c998:	89 01                	mov    DWORD PTR [ecx],eax
c000c99a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000c99d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c9a2:	66 90                	xchg   ax,ax
c000c9a4:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000c9a9:	e9 3e ff ff ff       	jmp    c000c8ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000c9ae:	66 90                	xchg   ax,ax
c000c9b0:	90                   	nop
c000c9b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9b5:	83 c4 2c             	add    esp,0x2c
c000c9b8:	c2 04 00             	ret    0x4
c000c9bb:	90                   	nop

c000c9bc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000c9bc:	83 ec 1c             	sub    esp,0x1c
c000c9bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c9c3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c9c7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c9cb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000c9d0:	88 c8                	mov    al,cl
c000c9d2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000c9d6:	88 d0                	mov    al,dl
c000c9d8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c9dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9e0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ea:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c9ed:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000c9f1:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000c9f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9f9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c9ff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ca03:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000ca06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca0a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000ca0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca13:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ca19:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ca1d:	83 c0 01             	add    eax,0x1
c000ca20:	88 c1                	mov    cl,al
c000ca22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca26:	83 c2 2a             	add    edx,0x2a
c000ca29:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ca2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca31:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ca37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca3b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ca3e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ca42:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ca46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca4a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ca50:	8d 50 01             	lea    edx,[eax+0x1]
c000ca53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca57:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ca5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca61:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ca67:	3d 00 02 00 00       	cmp    eax,0x200
c000ca6c:	75 12                	jne    c000ca80 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000ca6e:	83 ec 0c             	sub    esp,0xc
c000ca71:	68 c2 42 02 c0       	push   0xc00242c2
c000ca76:	e8 45 31 00 00       	call   c000fbc0 <KePanic(char const*)>
c000ca7b:	83 c4 10             	add    esp,0x10
c000ca7e:	66 90                	xchg   ax,ax
c000ca80:	90                   	nop
c000ca81:	83 c4 1c             	add    esp,0x1c
c000ca84:	c3                   	ret    
c000ca85:	90                   	nop
c000ca86:	66 90                	xchg   ax,ax

c000ca88 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ca88:	b8 00 00 00 00       	mov    eax,0x0
c000ca8d:	c3                   	ret    
c000ca8e:	66 90                	xchg   ax,ax

c000ca90 <ACPI::detectPCI()>:
c000ca90:	53                   	push   ebx
c000ca91:	83 ec 28             	sub    esp,0x28
c000ca94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ca99:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ca9e:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000caa3:	83 ec 08             	sub    esp,0x8
c000caa6:	68 df 42 02 c0       	push   0xc00242df
c000caab:	50                   	push   eax
c000caac:	e8 9b f8 ff ff       	call   c000c34c <findDataTable(unsigned char*, char*)>
c000cab1:	83 c4 10             	add    esp,0x10
c000cab4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cab8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000cabd:	74 0d                	je     c000cacc <ACPI::detectPCI()+0x3c>
c000cabf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cac4:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cac9:	8d 76 00             	lea    esi,[esi+0x0]
c000cacc:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000cad4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cad8:	8a 00                	mov    al,BYTE PTR [eax]
c000cada:	0f b6 c0             	movzx  eax,al
c000cadd:	83 f8 01             	cmp    eax,0x1
c000cae0:	75 0e                	jne    c000caf0 <ACPI::detectPCI()+0x60>
c000cae2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cae7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000caec:	eb 2e                	jmp    c000cb1c <ACPI::detectPCI()+0x8c>
c000caee:	66 90                	xchg   ax,ax
c000caf0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000caf4:	8a 00                	mov    al,BYTE PTR [eax]
c000caf6:	0f b6 c0             	movzx  eax,al
c000caf9:	83 f8 02             	cmp    eax,0x2
c000cafc:	75 1e                	jne    c000cb1c <ACPI::detectPCI()+0x8c>
c000cafe:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb03:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cb08:	85 c0                	test   eax,eax
c000cb0a:	74 10                	je     c000cb1c <ACPI::detectPCI()+0x8c>
c000cb0c:	83 ec 0c             	sub    esp,0xc
c000cb0f:	68 3c 44 02 c0       	push   0xc002443c
c000cb14:	e8 a7 30 00 00       	call   c000fbc0 <KePanic(char const*)>
c000cb19:	83 c4 10             	add    esp,0x10
c000cb1c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000cb20:	83 f0 01             	xor    eax,0x1
c000cb23:	0f b6 c0             	movzx  eax,al
c000cb26:	85 c0                	test   eax,eax
c000cb28:	74 46                	je     c000cb70 <ACPI::detectPCI()+0xe0>
c000cb2a:	e8 01 36 ff ff       	call   c0000130 <manualPCIProbe>
c000cb2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb33:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000cb38:	75 0e                	jne    c000cb48 <ACPI::detectPCI()+0xb8>
c000cb3a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb3f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cb44:	eb 2a                	jmp    c000cb70 <ACPI::detectPCI()+0xe0>
c000cb46:	66 90                	xchg   ax,ax
c000cb48:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000cb4d:	75 21                	jne    c000cb70 <ACPI::detectPCI()+0xe0>
c000cb4f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb54:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cb59:	85 c0                	test   eax,eax
c000cb5b:	74 13                	je     c000cb70 <ACPI::detectPCI()+0xe0>
c000cb5d:	83 ec 0c             	sub    esp,0xc
c000cb60:	68 3c 44 02 c0       	push   0xc002443c
c000cb65:	e8 56 30 00 00       	call   c000fbc0 <KePanic(char const*)>
c000cb6a:	83 c4 10             	add    esp,0x10
c000cb6d:	8d 76 00             	lea    esi,[esi+0x0]
c000cb70:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000cb75:	85 c0                	test   eax,eax
c000cb77:	0f 84 87 00 00 00    	je     c000cc04 <ACPI::detectPCI()+0x174>
c000cb7d:	83 ec 0c             	sub    esp,0xc
c000cb80:	68 e4 42 02 c0       	push   0xc00242e4
c000cb85:	e8 47 06 00 00       	call   c000d1d1 <KeSetBootMessage(char const*)>
c000cb8a:	83 c4 10             	add    esp,0x10
c000cb8d:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000cb95:	83 ec 0c             	sub    esp,0xc
c000cb98:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cb9c:	e8 c2 2b 00 00       	call   c000f763 <malloc>
c000cba1:	83 c4 10             	add    esp,0x10
c000cba4:	89 c3                	mov    ebx,eax
c000cba6:	83 ec 0c             	sub    esp,0xc
c000cba9:	53                   	push   ebx
c000cbaa:	e8 79 16 01 00       	call   c001e228 <PCI::PCI()>
c000cbaf:	83 c4 10             	add    esp,0x10
c000cbb2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cbb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cbba:	83 ec 08             	sub    esp,0x8
c000cbbd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbc1:	50                   	push   eax
c000cbc2:	e8 8d ce ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000cbc7:	83 c4 10             	add    esp,0x10
c000cbca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cbce:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbd0:	83 c0 08             	add    eax,0x8
c000cbd3:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbd5:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000cbda:	85 d2                	test   edx,edx
c000cbdc:	74 0a                	je     c000cbe8 <ACPI::detectPCI()+0x158>
c000cbde:	ba 01 00 00 00       	mov    edx,0x1
c000cbe3:	eb 0b                	jmp    c000cbf0 <ACPI::detectPCI()+0x160>
c000cbe5:	8d 76 00             	lea    esi,[esi+0x0]
c000cbe8:	ba 02 00 00 00       	mov    edx,0x2
c000cbed:	8d 76 00             	lea    esi,[esi+0x0]
c000cbf0:	6a 00                	push   0x0
c000cbf2:	6a 00                	push   0x0
c000cbf4:	52                   	push   edx
c000cbf5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbf9:	ff d0                	call   eax
c000cbfb:	83 c4 10             	add    esp,0x10
c000cbfe:	e9 91 00 00 00       	jmp    c000cc94 <ACPI::detectPCI()+0x204>
c000cc03:	90                   	nop
c000cc04:	83 ec 0c             	sub    esp,0xc
c000cc07:	68 fc 42 02 c0       	push   0xc00242fc
c000cc0c:	e8 c0 05 00 00       	call   c000d1d1 <KeSetBootMessage(char const*)>
c000cc11:	83 c4 10             	add    esp,0x10
c000cc14:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000cc1b:	83 ec 0c             	sub    esp,0xc
c000cc1e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cc22:	e8 3c 2b 00 00       	call   c000f763 <malloc>
c000cc27:	83 c4 10             	add    esp,0x10
c000cc2a:	89 c3                	mov    ebx,eax
c000cc2c:	83 ec 0c             	sub    esp,0xc
c000cc2f:	53                   	push   ebx
c000cc30:	e8 f9 21 01 00       	call   c001ee2e <IDE::IDE()>
c000cc35:	83 c4 10             	add    esp,0x10
c000cc38:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000cc3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc40:	83 ec 08             	sub    esp,0x8
c000cc43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cc47:	50                   	push   eax
c000cc48:	e8 07 ce ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000cc4d:	83 c4 10             	add    esp,0x10
c000cc50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc54:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000cc5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc62:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000cc6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc6f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000cc78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc7c:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc7e:	83 c0 08             	add    eax,0x8
c000cc81:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc83:	6a 00                	push   0x0
c000cc85:	6a 00                	push   0x0
c000cc87:	6a 00                	push   0x0
c000cc89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc8d:	ff d0                	call   eax
c000cc8f:	83 c4 10             	add    esp,0x10
c000cc92:	66 90                	xchg   ax,ax
c000cc94:	90                   	nop
c000cc95:	83 c4 28             	add    esp,0x28
c000cc98:	5b                   	pop    ebx
c000cc99:	c3                   	ret    
c000cc9a:	66 90                	xchg   ax,ax

c000cc9c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000cc9c:	83 ec 0c             	sub    esp,0xc
c000cc9f:	83 ec 0c             	sub    esp,0xc
c000cca2:	68 11 43 02 c0       	push   0xc0024311
c000cca7:	e8 14 2f 00 00       	call   c000fbc0 <KePanic(char const*)>
c000ccac:	83 c4 10             	add    esp,0x10
c000ccaf:	90                   	nop
c000ccb0:	83 c4 0c             	add    esp,0xc
c000ccb3:	c3                   	ret    

c000ccb4 <ACPI::open(int, int, void*)>:
c000ccb4:	57                   	push   edi
c000ccb5:	56                   	push   esi
c000ccb6:	53                   	push   ebx
c000ccb7:	81 ec 60 01 00 00    	sub    esp,0x160
c000ccbd:	83 ec 0c             	sub    esp,0xc
c000ccc0:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c000ccc7:	e8 c4 fd ff ff       	call   c000ca90 <ACPI::detectPCI()>
c000cccc:	83 c4 10             	add    esp,0x10
c000cccf:	83 ec 0c             	sub    esp,0xc
c000ccd2:	68 64 44 02 c0       	push   0xc0024464
c000ccd7:	e8 f5 04 00 00       	call   c000d1d1 <KeSetBootMessage(char const*)>
c000ccdc:	83 c4 10             	add    esp,0x10
c000ccdf:	b8 4c 05 00 00       	mov    eax,0x54c
c000cce4:	8a 00                	mov    al,BYTE PTR [eax]
c000cce6:	88 84 24 5e 01 00 00 	mov    BYTE PTR [esp+0x15e],al
c000cced:	0f b6 84 24 5e 01 00 00 	movzx  eax,BYTE PTR [esp+0x15e]
c000ccf5:	83 f8 01             	cmp    eax,0x1
c000ccf8:	75 12                	jne    c000cd0c <ACPI::open(int, int, void*)+0x58>
c000ccfa:	83 ec 0c             	sub    esp,0xc
c000ccfd:	68 22 43 02 c0       	push   0xc0024322
c000cd02:	e8 ee 91 00 00       	call   c0015ef5 <Thr::loadKernelSymbolTable(char const*)>
c000cd07:	83 c4 10             	add    esp,0x10
c000cd0a:	eb 34                	jmp    c000cd40 <ACPI::open(int, int, void*)+0x8c>
c000cd0c:	0f b6 84 24 5e 01 00 00 	movzx  eax,BYTE PTR [esp+0x15e]
c000cd14:	3d bb 00 00 00       	cmp    eax,0xbb
c000cd19:	75 15                	jne    c000cd30 <ACPI::open(int, int, void*)+0x7c>
c000cd1b:	83 ec 0c             	sub    esp,0xc
c000cd1e:	68 40 43 02 c0       	push   0xc0024340
c000cd23:	e8 cd 91 00 00       	call   c0015ef5 <Thr::loadKernelSymbolTable(char const*)>
c000cd28:	83 c4 10             	add    esp,0x10
c000cd2b:	eb 13                	jmp    c000cd40 <ACPI::open(int, int, void*)+0x8c>
c000cd2d:	8d 76 00             	lea    esi,[esi+0x0]
c000cd30:	83 ec 0c             	sub    esp,0xc
c000cd33:	68 5e 43 02 c0       	push   0xc002435e
c000cd38:	e8 83 2e 00 00       	call   c000fbc0 <KePanic(char const*)>
c000cd3d:	83 c4 10             	add    esp,0x10
c000cd40:	c6 84 24 5f 01 00 00 00 	mov    BYTE PTR [esp+0x15f],0x0
c000cd48:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000cd53:	83 ec 0c             	sub    esp,0xc
c000cd56:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000cd5d:	e8 01 2a 00 00       	call   c000f763 <malloc>
c000cd62:	83 c4 10             	add    esp,0x10
c000cd65:	89 c3                	mov    ebx,eax
c000cd67:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c000cd6c:	83 ec 04             	sub    esp,0x4
c000cd6f:	50                   	push   eax
c000cd70:	68 78 43 02 c0       	push   0xc0024378
c000cd75:	53                   	push   ebx
c000cd76:	e8 0f b4 ff ff       	call   c000818a <File::File(char const*, Process*)>
c000cd7b:	83 c4 10             	add    esp,0x10
c000cd7e:	89 9c 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],ebx
c000cd85:	83 ec 08             	sub    esp,0x8
c000cd88:	6a 01                	push   0x1
c000cd8a:	ff b4 24 64 01 00 00 	push   DWORD PTR [esp+0x164]
c000cd91:	e8 12 b4 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000cd96:	83 c4 10             	add    esp,0x10
c000cd99:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000cda0:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000cda8:	75 16                	jne    c000cdc0 <ACPI::open(int, int, void*)+0x10c>
c000cdaa:	83 ec 0c             	sub    esp,0xc
c000cdad:	ff b4 24 64 01 00 00 	push   DWORD PTR [esp+0x164]
c000cdb4:	e8 4d b4 ff ff       	call   c0008206 <File::close()>
c000cdb9:	83 c4 10             	add    esp,0x10
c000cdbc:	eb 0a                	jmp    c000cdc8 <ACPI::open(int, int, void*)+0x114>
c000cdbe:	66 90                	xchg   ax,ax
c000cdc0:	c6 84 24 5f 01 00 00 01 	mov    BYTE PTR [esp+0x15f],0x1
c000cdc8:	83 bc 24 58 01 00 00 00 	cmp    DWORD PTR [esp+0x158],0x0
c000cdd0:	74 1e                	je     c000cdf0 <ACPI::open(int, int, void*)+0x13c>
c000cdd2:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c000cdd9:	8b 00                	mov    eax,DWORD PTR [eax]
c000cddb:	83 c0 08             	add    eax,0x8
c000cdde:	8b 00                	mov    eax,DWORD PTR [eax]
c000cde0:	83 ec 0c             	sub    esp,0xc
c000cde3:	ff b4 24 64 01 00 00 	push   DWORD PTR [esp+0x164]
c000cdea:	ff d0                	call   eax
c000cdec:	83 c4 10             	add    esp,0x10
c000cdef:	90                   	nop
c000cdf0:	8a 84 24 5f 01 00 00 	mov    al,BYTE PTR [esp+0x15f]
c000cdf7:	83 f0 01             	xor    eax,0x1
c000cdfa:	0f b6 c0             	movzx  eax,al
c000cdfd:	85 c0                	test   eax,eax
c000cdff:	74 2f                	je     c000ce30 <ACPI::open(int, int, void*)+0x17c>
c000ce01:	83 ec 0c             	sub    esp,0xc
c000ce04:	68 96 43 02 c0       	push   0xc0024396
c000ce09:	e8 c3 03 00 00       	call   c000d1d1 <KeSetBootMessage(char const*)>
c000ce0e:	83 c4 10             	add    esp,0x10
c000ce11:	c7 84 24 50 01 00 00 0c 00 00 00 	mov    DWORD PTR [esp+0x150],0xc
c000ce1c:	83 ec 0c             	sub    esp,0xc
c000ce1f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ce26:	e8 f7 65 00 00       	call   c0013422 <Virt::setupPageSwapping(int)>
c000ce2b:	83 c4 10             	add    esp,0x10
c000ce2e:	66 90                	xchg   ax,ax
c000ce30:	83 ec 0c             	sub    esp,0xc
c000ce33:	68 b1 43 02 c0       	push   0xc00243b1
c000ce38:	e8 94 03 00 00       	call   c000d1d1 <KeSetBootMessage(char const*)>
c000ce3d:	83 c4 10             	add    esp,0x10
c000ce40:	8d 84 24 2c 01 00 00 	lea    eax,[esp+0x12c]
c000ce47:	83 ec 08             	sub    esp,0x8
c000ce4a:	6a 13                	push   0x13
c000ce4c:	50                   	push   eax
c000ce4d:	e8 30 cf ff ff       	call   c0009d82 <getDevicesOfType(DeviceType)>
c000ce52:	83 c4 0c             	add    esp,0xc
c000ce55:	8d 76 00             	lea    esi,[esi+0x0]
c000ce58:	83 ec 0c             	sub    esp,0xc
c000ce5b:	8d 84 24 38 01 00 00 	lea    eax,[esp+0x138]
c000ce62:	50                   	push   eax
c000ce63:	e8 54 58 01 00       	call   c00226bc <LinkedList<Device>::isEmpty()>
c000ce68:	83 c4 10             	add    esp,0x10
c000ce6b:	83 f0 01             	xor    eax,0x1
c000ce6e:	0f b6 c0             	movzx  eax,al
c000ce71:	85 c0                	test   eax,eax
c000ce73:	0f 84 47 01 00 00    	je     c000cfc0 <ACPI::open(int, int, void*)+0x30c>
c000ce79:	83 ec 0c             	sub    esp,0xc
c000ce7c:	8d 84 24 38 01 00 00 	lea    eax,[esp+0x138]
c000ce83:	50                   	push   eax
c000ce84:	e8 4f 58 01 00       	call   c00226d8 <LinkedList<Device>::getFirstElement()>
c000ce89:	83 c4 10             	add    esp,0x10
c000ce8c:	89 84 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],eax
c000ce93:	83 ec 0c             	sub    esp,0xc
c000ce96:	8d 84 24 38 01 00 00 	lea    eax,[esp+0x138]
c000ce9d:	50                   	push   eax
c000ce9e:	e8 3d 58 01 00       	call   c00226e0 <LinkedList<Device>::removeFirst()>
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000cead:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000ceb4:	8b 94 24 48 01 00 00 	mov    edx,DWORD PTR [esp+0x148]
c000cebb:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cebf:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000cec5:	ba 09 00 00 00       	mov    edx,0x9
c000ceca:	fc                   	cld    
c000cecb:	89 c7                	mov    edi,eax
c000cecd:	89 de                	mov    esi,ebx
c000cecf:	89 d1                	mov    ecx,edx
c000ced1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ced3:	83 ec 08             	sub    esp,0x8
c000ced6:	8d 44 24 34          	lea    eax,[esp+0x34]
c000ceda:	50                   	push   eax
c000cedb:	83 ec 24             	sub    esp,0x24
c000cede:	89 e0                	mov    eax,esp
c000cee0:	89 c3                	mov    ebx,eax
c000cee2:	8d 44 24 38          	lea    eax,[esp+0x38]
c000cee6:	ba 09 00 00 00       	mov    edx,0x9
c000ceeb:	89 df                	mov    edi,ebx
c000ceed:	89 c6                	mov    esi,eax
c000ceef:	89 d1                	mov    ecx,edx
c000cef1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000cef3:	e8 1a 18 01 00       	call   c001e712 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000cef8:	83 c4 30             	add    esp,0x30
c000cefb:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c000cf02:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c000cf0a:	0f 84 48 ff ff ff    	je     c000ce58 <ACPI::open(int, int, void*)+0x1a4>
c000cf10:	c7 84 24 38 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x138],0x114
c000cf1b:	83 ec 0c             	sub    esp,0xc
c000cf1e:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cf25:	e8 39 28 00 00       	call   c000f763 <malloc>
c000cf2a:	83 c4 10             	add    esp,0x10
c000cf2d:	89 c3                	mov    ebx,eax
c000cf2f:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c000cf34:	83 ec 04             	sub    esp,0x4
c000cf37:	50                   	push   eax
c000cf38:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000cf3f:	53                   	push   ebx
c000cf40:	e8 45 b2 ff ff       	call   c000818a <File::File(char const*, Process*)>
c000cf45:	83 c4 10             	add    esp,0x10
c000cf48:	89 9c 24 40 01 00 00 	mov    DWORD PTR [esp+0x140],ebx
c000cf4f:	83 ec 0c             	sub    esp,0xc
c000cf52:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000cf59:	e8 0e b5 ff ff       	call   c000846c <File::exists()>
c000cf5e:	83 c4 10             	add    esp,0x10
c000cf61:	0f b6 c0             	movzx  eax,al
c000cf64:	85 c0                	test   eax,eax
c000cf66:	74 28                	je     c000cf90 <ACPI::open(int, int, void*)+0x2dc>
c000cf68:	83 ec 08             	sub    esp,0x8
c000cf6b:	6a 01                	push   0x1
c000cf6d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000cf74:	e8 05 9a 00 00       	call   c001697e <Thr::loadDLL(char const*, bool)>
c000cf79:	83 c4 10             	add    esp,0x10
c000cf7c:	83 ec 08             	sub    esp,0x8
c000cf7f:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000cf86:	50                   	push   eax
c000cf87:	e8 44 9c 00 00       	call   c0016bd0 <Thr::executeDLL(unsigned long, void*)>
c000cf8c:	83 c4 10             	add    esp,0x10
c000cf8f:	90                   	nop
c000cf90:	83 bc 24 40 01 00 00 00 	cmp    DWORD PTR [esp+0x140],0x0
c000cf98:	0f 84 ba fe ff ff    	je     c000ce58 <ACPI::open(int, int, void*)+0x1a4>
c000cf9e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cfa5:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfa7:	83 c0 08             	add    eax,0x8
c000cfaa:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfac:	83 ec 0c             	sub    esp,0xc
c000cfaf:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000cfb6:	ff d0                	call   eax
c000cfb8:	83 c4 10             	add    esp,0x10
c000cfbb:	e9 98 fe ff ff       	jmp    c000ce58 <ACPI::open(int, int, void*)+0x1a4>
c000cfc0:	83 ec 0c             	sub    esp,0xc
c000cfc3:	8d 84 24 38 01 00 00 	lea    eax,[esp+0x138]
c000cfca:	50                   	push   eax
c000cfcb:	e8 e8 56 01 00       	call   c00226b8 <LinkedList<Device>::~LinkedList()>
c000cfd0:	83 c4 10             	add    esp,0x10
c000cfd3:	8b 1d 08 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d108
c000cfd9:	83 ec 08             	sub    esp,0x8
c000cfdc:	6a 01                	push   0x1
c000cfde:	68 cb 43 02 c0       	push   0xc00243cb
c000cfe3:	e8 96 99 00 00       	call   c001697e <Thr::loadDLL(char const*, bool)>
c000cfe8:	83 c4 10             	add    esp,0x10
c000cfeb:	83 ec 08             	sub    esp,0x8
c000cfee:	53                   	push   ebx
c000cfef:	50                   	push   eax
c000cff0:	e8 db 9b 00 00       	call   c0016bd0 <Thr::executeDLL(unsigned long, void*)>
c000cff5:	83 c4 10             	add    esp,0x10
c000cff8:	b8 00 00 00 00       	mov    eax,0x0
c000cffd:	81 c4 60 01 00 00    	add    esp,0x160
c000d003:	5b                   	pop    ebx
c000d004:	5e                   	pop    esi
c000d005:	5f                   	pop    edi
c000d006:	c3                   	ret    
c000d007:	90                   	nop

c000d008 <KeAssertionFailed(char*, char const*, char const*, int)>:
c000d008:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000d00e:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000d015:	89 c2                	mov    edx,eax
c000d017:	c1 fa 1f             	sar    edx,0x1f
c000d01a:	83 ec 04             	sub    esp,0x4
c000d01d:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000d021:	51                   	push   ecx
c000d022:	52                   	push   edx
c000d023:	50                   	push   eax
c000d024:	e8 2f 25 00 00       	call   c000f558 <KeItoa(long long, char*)>
c000d029:	83 c4 10             	add    esp,0x10
c000d02c:	83 ec 08             	sub    esp,0x8
c000d02f:	68 b0 44 02 c0       	push   0xc00244b0
c000d034:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d038:	50                   	push   eax
c000d039:	e8 02 36 ff ff       	call   c0000640 <strcpy>
c000d03e:	83 c4 10             	add    esp,0x10
c000d041:	83 ec 08             	sub    esp,0x8
c000d044:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000d04b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d04f:	50                   	push   eax
c000d050:	e8 eb 37 ff ff       	call   c0000840 <strcat>
c000d055:	83 c4 10             	add    esp,0x10
c000d058:	83 ec 08             	sub    esp,0x8
c000d05b:	68 be 44 02 c0       	push   0xc00244be
c000d060:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d064:	50                   	push   eax
c000d065:	e8 d6 37 ff ff       	call   c0000840 <strcat>
c000d06a:	83 c4 10             	add    esp,0x10
c000d06d:	83 ec 08             	sub    esp,0x8
c000d070:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d077:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d07b:	50                   	push   eax
c000d07c:	e8 bf 37 ff ff       	call   c0000840 <strcat>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	83 ec 08             	sub    esp,0x8
c000d087:	68 c1 44 02 c0       	push   0xc00244c1
c000d08c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d090:	50                   	push   eax
c000d091:	e8 aa 37 ff ff       	call   c0000840 <strcat>
c000d096:	83 c4 10             	add    esp,0x10
c000d099:	83 ec 08             	sub    esp,0x8
c000d09c:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000d0a3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0a7:	50                   	push   eax
c000d0a8:	e8 93 37 ff ff       	call   c0000840 <strcat>
c000d0ad:	83 c4 10             	add    esp,0x10
c000d0b0:	83 ec 08             	sub    esp,0x8
c000d0b3:	68 c1 44 02 c0       	push   0xc00244c1
c000d0b8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0bc:	50                   	push   eax
c000d0bd:	e8 7e 37 ff ff       	call   c0000840 <strcat>
c000d0c2:	83 c4 10             	add    esp,0x10
c000d0c5:	83 ec 08             	sub    esp,0x8
c000d0c8:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d0cc:	50                   	push   eax
c000d0cd:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0d1:	50                   	push   eax
c000d0d2:	e8 69 37 ff ff       	call   c0000840 <strcat>
c000d0d7:	83 c4 10             	add    esp,0x10
c000d0da:	83 ec 0c             	sub    esp,0xc
c000d0dd:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0e1:	50                   	push   eax
c000d0e2:	e8 d9 2a 00 00       	call   c000fbc0 <KePanic(char const*)>
c000d0e7:	83 c4 10             	add    esp,0x10
c000d0ea:	90                   	nop
c000d0eb:	81 c4 2c 02 00 00    	add    esp,0x22c
c000d0f1:	c3                   	ret    

c000d0f2 <KeInitialiseAtexit()>:
c000d0f2:	83 ec 10             	sub    esp,0x10
c000d0f5:	c7 05 e0 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cfe0,0x0
c000d0ff:	68 80 00 00 00       	push   0x80
c000d104:	6a 00                	push   0x0
c000d106:	68 80 d0 02 c0       	push   0xc002d080
c000d10b:	e8 e0 33 ff ff       	call   c00004f0 <memset>
c000d110:	83 c4 1c             	add    esp,0x1c
c000d113:	c3                   	ret    

c000d114 <KeRegisterAtexit(void (*)(void*), void*)>:
c000d114:	a1 e0 cf 02 c0       	mov    eax,ds:0xc002cfe0
c000d119:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d11d:	89 14 85 80 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f80],edx
c000d124:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d128:	89 14 85 00 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3000],edx
c000d12f:	40                   	inc    eax
c000d130:	a3 e0 cf 02 c0       	mov    ds:0xc002cfe0,eax
c000d135:	83 f8 1f             	cmp    eax,0x1f
c000d138:	7e 0d                	jle    c000d147 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000d13a:	c7 44 24 04 c3 44 02 c0 	mov    DWORD PTR [esp+0x4],0xc00244c3
c000d142:	e9 79 2a 00 00       	jmp    c000fbc0 <KePanic(char const*)>
c000d147:	c3                   	ret    

c000d148 <KeExecuteAtexit()>:
c000d148:	53                   	push   ebx
c000d149:	31 db                	xor    ebx,ebx
c000d14b:	83 ec 08             	sub    esp,0x8
c000d14e:	39 1d e0 cf 02 c0    	cmp    DWORD PTR ds:0xc002cfe0,ebx
c000d154:	7e 28                	jle    c000d17e <KeExecuteAtexit()+0x36>
c000d156:	8b 04 9d 80 d0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2f80]
c000d15d:	85 c0                	test   eax,eax
c000d15f:	74 1a                	je     c000d17b <KeExecuteAtexit()+0x33>
c000d161:	83 ec 0c             	sub    esp,0xc
c000d164:	ff 34 9d 00 d0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd3000]
c000d16b:	ff d0                	call   eax
c000d16d:	c7 04 9d 80 d0 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd2f80],0x0
c000d178:	83 c4 10             	add    esp,0x10
c000d17b:	43                   	inc    ebx
c000d17c:	eb d0                	jmp    c000d14e <KeExecuteAtexit()+0x6>
c000d17e:	83 c4 08             	add    esp,0x8
c000d181:	5b                   	pop    ebx
c000d182:	c3                   	ret    
c000d183:	90                   	nop

c000d184 <KeGetBootConfigurationFlag(BootConfigurationFlag)>:
c000d184:	8b 15 00 d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d100
c000d18a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d18e:	21 d0                	and    eax,edx
c000d190:	0f 95 c0             	setne  al
c000d193:	c3                   	ret    

c000d194 <KeInitialiseBootConfigurationFlags()>:
c000d194:	b8 00 05 00 00       	mov    eax,0x500
c000d199:	8b 00                	mov    eax,DWORD PTR [eax]
c000d19b:	a3 00 d1 02 c0       	mov    ds:0xc002d100,eax
c000d1a0:	90                   	nop
c000d1a1:	c3                   	ret    

c000d1a2 <KeDisplaySplashScreen()>:
c000d1a2:	53                   	push   ebx
c000d1a3:	bb 01 00 00 00       	mov    ebx,0x1
c000d1a8:	83 ec 08             	sub    esp,0x8
c000d1ab:	43                   	inc    ebx
c000d1ac:	0f be 83 da 44 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdbb26]
c000d1b3:	85 c0                	test   eax,eax
c000d1b5:	74 15                	je     c000d1cc <KeDisplaySplashScreen()+0x2a>
c000d1b7:	83 ec 0c             	sub    esp,0xc
c000d1ba:	6a 01                	push   0x1
c000d1bc:	53                   	push   ebx
c000d1bd:	6a 00                	push   0x0
c000d1bf:	6a 0f                	push   0xf
c000d1c1:	50                   	push   eax
c000d1c2:	e8 41 ec 00 00       	call   c001be08 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d1c7:	83 c4 20             	add    esp,0x20
c000d1ca:	eb df                	jmp    c000d1ab <KeDisplaySplashScreen()+0x9>
c000d1cc:	83 c4 08             	add    esp,0x8
c000d1cf:	5b                   	pop    ebx
c000d1d0:	c3                   	ret    

c000d1d1 <KeSetBootMessage(char const*)>:
c000d1d1:	57                   	push   edi
c000d1d2:	56                   	push   esi
c000d1d3:	53                   	push   ebx
c000d1d4:	31 db                	xor    ebx,ebx
c000d1d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d1da:	83 ec 0c             	sub    esp,0xc
c000d1dd:	6a 14                	push   0x14
c000d1df:	53                   	push   ebx
c000d1e0:	43                   	inc    ebx
c000d1e1:	6a 00                	push   0x0
c000d1e3:	6a 00                	push   0x0
c000d1e5:	6a 20                	push   0x20
c000d1e7:	e8 1c ec 00 00       	call   c001be08 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d1ec:	83 c4 20             	add    esp,0x20
c000d1ef:	83 fb 50             	cmp    ebx,0x50
c000d1f2:	75 e6                	jne    c000d1da <KeSetBootMessage(char const*)+0x9>
c000d1f4:	83 ec 0c             	sub    esp,0xc
c000d1f7:	56                   	push   esi
c000d1f8:	e8 73 33 ff ff       	call   c0000570 <strlen>
c000d1fd:	83 c4 10             	add    esp,0x10
c000d200:	29 c3                	sub    ebx,eax
c000d202:	d1 eb                	shr    ebx,1
c000d204:	89 df                	mov    edi,ebx
c000d206:	89 f0                	mov    eax,esi
c000d208:	29 d8                	sub    eax,ebx
c000d20a:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000d20e:	85 c0                	test   eax,eax
c000d210:	74 16                	je     c000d228 <KeSetBootMessage(char const*)+0x57>
c000d212:	83 ec 0c             	sub    esp,0xc
c000d215:	6a 14                	push   0x14
c000d217:	57                   	push   edi
c000d218:	47                   	inc    edi
c000d219:	6a 00                	push   0x0
c000d21b:	6a 07                	push   0x7
c000d21d:	50                   	push   eax
c000d21e:	e8 e5 eb 00 00       	call   c001be08 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d223:	83 c4 20             	add    esp,0x20
c000d226:	eb de                	jmp    c000d206 <KeSetBootMessage(char const*)+0x35>
c000d228:	5b                   	pop    ebx
c000d229:	5e                   	pop    esi
c000d22a:	5f                   	pop    edi
c000d22b:	c3                   	ret    

c000d22c <__cxa_atexit>:
c000d22c:	31 c0                	xor    eax,eax
c000d22e:	c3                   	ret    

c000d22f <__cxa_finalize>:
c000d22f:	c3                   	ret    

c000d230 <__stack_chk_fail>:
c000d230:	55                   	push   ebp
c000d231:	89 e5                	mov    ebp,esp
c000d233:	83 ec 10             	sub    esp,0x10
c000d236:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d239:	68 ef 44 02 c0       	push   0xc00244ef
c000d23e:	e8 39 9d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d243:	58                   	pop    eax
c000d244:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d247:	5a                   	pop    edx
c000d248:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d24b:	68 ef 44 02 c0       	push   0xc00244ef
c000d250:	e8 27 9d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d255:	c7 04 24 f7 44 02 c0 	mov    DWORD PTR [esp],0xc00244f7
c000d25c:	e8 5f 29 00 00       	call   c000fbc0 <KePanic(char const*)>
c000d261:	83 c4 10             	add    esp,0x10
c000d264:	c9                   	leave  
c000d265:	c3                   	ret    

c000d266 <__cxa_pure_virtual>:
c000d266:	83 ec 18             	sub    esp,0x18
c000d269:	68 0f 45 02 c0       	push   0xc002450f
c000d26e:	e8 4d 29 00 00       	call   c000fbc0 <KePanic(char const*)>
c000d273:	83 c4 1c             	add    esp,0x1c
c000d276:	c3                   	ret    

c000d277 <operator new[](unsigned long)>:
c000d277:	e9 e7 24 00 00       	jmp    c000f763 <malloc>

c000d27c <operator delete(void*, unsigned long)>:
c000d27c:	e9 02 25 00 00       	jmp    c000f783 <rfree>

c000d281 <operator delete[](void*)>:
c000d281:	e9 fd 24 00 00       	jmp    c000f783 <rfree>

c000d286 <operator delete[](void*, unsigned long)>:
c000d286:	e9 f8 24 00 00       	jmp    c000f783 <rfree>
c000d28b:	90                   	nop

c000d28c <CUnlockScheduler>:
c000d28c:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c000d294:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c000d299:	85 c0                	test   eax,eax
c000d29b:	75 03                	jne    c000d2a0 <CUnlockScheduler+0x14>
c000d29d:	fb                   	sti    
c000d29e:	66 90                	xchg   ax,ax
c000d2a0:	90                   	nop
c000d2a1:	c3                   	ret    
c000d2a2:	66 90                	xchg   ax,ax

c000d2a4 <CLockScheduler>:
c000d2a4:	fa                   	cli    
c000d2a5:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c000d2aa:	83 c0 01             	add    eax,0x1
c000d2ad:	a3 70 da 02 c0       	mov    ds:0xc002da70,eax
c000d2b2:	90                   	nop
c000d2b3:	c3                   	ret    

c000d2b4 <CPrintf>:
c000d2b4:	83 ec 0c             	sub    esp,0xc
c000d2b7:	83 ec 08             	sub    esp,0x8
c000d2ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d2be:	68 22 45 02 c0       	push   0xc0024522
c000d2c3:	e8 b4 9c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d2c8:	83 c4 10             	add    esp,0x10
c000d2cb:	90                   	nop
c000d2cc:	83 c4 0c             	add    esp,0xc
c000d2cf:	c3                   	ret    

c000d2d0 <CmOpen(char const*)>:
c000d2d0:	57                   	push   edi
c000d2d1:	56                   	push   esi
c000d2d2:	53                   	push   ebx
c000d2d3:	83 ec 1c             	sub    esp,0x1c
c000d2d6:	6a 30                	push   0x30
c000d2d8:	e8 86 24 00 00       	call   c000f763 <malloc>
c000d2dd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000d2e4:	89 c3                	mov    ebx,eax
c000d2e6:	e8 78 24 00 00       	call   c000f763 <malloc>
c000d2eb:	83 c4 0c             	add    esp,0xc
c000d2ee:	89 c6                	mov    esi,eax
c000d2f0:	ff 35 98 da 02 c0    	push   DWORD PTR ds:0xc002da98
c000d2f6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d2fa:	50                   	push   eax
c000d2fb:	e8 8a ae ff ff       	call   c000818a <File::File(char const*, Process*)>
c000d300:	83 c4 0c             	add    esp,0xc
c000d303:	89 33                	mov    DWORD PTR [ebx],esi
c000d305:	8d 44 24 07          	lea    eax,[esp+0x7]
c000d309:	50                   	push   eax
c000d30a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d30e:	50                   	push   eax
c000d30f:	56                   	push   esi
c000d310:	e8 95 b1 ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c000d315:	5a                   	pop    edx
c000d316:	59                   	pop    ecx
c000d317:	6a 01                	push   0x1
c000d319:	ff 33                	push   DWORD PTR [ebx]
c000d31b:	e8 88 ae ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000d320:	5e                   	pop    esi
c000d321:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d325:	e8 39 24 00 00       	call   c000f763 <malloc>
c000d32a:	5a                   	pop    edx
c000d32b:	89 c7                	mov    edi,eax
c000d32d:	8d 74 24 10          	lea    esi,[esp+0x10]
c000d331:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d333:	8b 10                	mov    edx,DWORD PTR [eax]
c000d335:	56                   	push   esi
c000d336:	57                   	push   edi
c000d337:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d33b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d33f:	50                   	push   eax
c000d340:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d343:	83 c4 14             	add    esp,0x14
c000d346:	ff 33                	push   DWORD PTR [ebx]
c000d348:	e8 b9 ae ff ff       	call   c0008206 <File::close()>
c000d34d:	59                   	pop    ecx
c000d34e:	58                   	pop    eax
c000d34f:	6a 13                	push   0x13
c000d351:	ff 33                	push   DWORD PTR [ebx]
c000d353:	e8 50 ae ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000d358:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d35a:	8b 10                	mov    edx,DWORD PTR [eax]
c000d35c:	89 34 24             	mov    DWORD PTR [esp],esi
c000d35f:	57                   	push   edi
c000d360:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d364:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d368:	50                   	push   eax
c000d369:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d36c:	83 c4 14             	add    esp,0x14
c000d36f:	57                   	push   edi
c000d370:	e8 fe 23 00 00       	call   c000f773 <free>
c000d375:	83 c4 10             	add    esp,0x10
c000d378:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000d37b:	75 10                	jne    c000d38d <CmOpen(char const*)+0xbd>
c000d37d:	83 ec 0c             	sub    esp,0xc
c000d380:	68 25 45 02 c0       	push   0xc0024525
c000d385:	e8 36 28 00 00       	call   c000fbc0 <KePanic(char const*)>
c000d38a:	83 c4 10             	add    esp,0x10
c000d38d:	8d 7b 05             	lea    edi,[ebx+0x5]
c000d390:	50                   	push   eax
c000d391:	6a 00                	push   0x0
c000d393:	6a 00                	push   0x0
c000d395:	ff 33                	push   DWORD PTR [ebx]
c000d397:	e8 ca ae ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d39c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d39e:	8b 10                	mov    edx,DWORD PTR [eax]
c000d3a0:	89 34 24             	mov    DWORD PTR [esp],esi
c000d3a3:	57                   	push   edi
c000d3a4:	6a 00                	push   0x0
c000d3a6:	6a 2b                	push   0x2b
c000d3a8:	50                   	push   eax
c000d3a9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d3ac:	83 c4 1c             	add    esp,0x1c
c000d3af:	6a 00                	push   0x0
c000d3b1:	6a 00                	push   0x0
c000d3b3:	ff 33                	push   DWORD PTR [ebx]
c000d3b5:	e8 ac ae ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d3ba:	83 c4 0c             	add    esp,0xc
c000d3bd:	6a 08                	push   0x8
c000d3bf:	68 47 45 02 c0       	push   0xc0024547
c000d3c4:	57                   	push   edi
c000d3c5:	e8 b6 2f ff ff       	call   c0000380 <memcmp>
c000d3ca:	83 c4 10             	add    esp,0x10
c000d3cd:	85 c0                	test   eax,eax
c000d3cf:	74 10                	je     c000d3e1 <CmOpen(char const*)+0x111>
c000d3d1:	83 ec 0c             	sub    esp,0xc
c000d3d4:	68 50 45 02 c0       	push   0xc0024550
c000d3d9:	e8 e2 27 00 00       	call   c000fbc0 <KePanic(char const*)>
c000d3de:	83 c4 10             	add    esp,0x10
c000d3e1:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000d3e5:	89 d8                	mov    eax,ebx
c000d3e7:	83 c4 10             	add    esp,0x10
c000d3ea:	5b                   	pop    ebx
c000d3eb:	5e                   	pop    esi
c000d3ec:	5f                   	pop    edi
c000d3ed:	c3                   	ret    

c000d3ee <CmClose(Reghive_Tag*)>:
c000d3ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3f2:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d3f6:	74 0b                	je     c000d403 <CmClose(Reghive_Tag*)+0x15>
c000d3f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d3fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d3fe:	e9 03 ae ff ff       	jmp    c0008206 <File::close()>
c000d403:	c3                   	ret    

c000d404 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000d404:	53                   	push   ebx
c000d405:	83 ec 18             	sub    esp,0x18
c000d408:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d40c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d410:	74 29                	je     c000d43b <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d412:	50                   	push   eax
c000d413:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d418:	99                   	cdq    
c000d419:	52                   	push   edx
c000d41a:	50                   	push   eax
c000d41b:	ff 33                	push   DWORD PTR [ebx]
c000d41d:	e8 44 ae ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d422:	5a                   	pop    edx
c000d423:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d425:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d429:	8b 10                	mov    edx,DWORD PTR [eax]
c000d42b:	51                   	push   ecx
c000d42c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d430:	6a 00                	push   0x0
c000d432:	6a 2b                	push   0x2b
c000d434:	50                   	push   eax
c000d435:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d438:	83 c4 20             	add    esp,0x20
c000d43b:	83 c4 18             	add    esp,0x18
c000d43e:	5b                   	pop    ebx
c000d43f:	c3                   	ret    

c000d440 <CmGetString(Reghive_Tag*, int, char*)>:
c000d440:	55                   	push   ebp
c000d441:	57                   	push   edi
c000d442:	56                   	push   esi
c000d443:	53                   	push   ebx
c000d444:	31 db                	xor    ebx,ebx
c000d446:	83 ec 70             	sub    esp,0x70
c000d449:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000d450:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000d454:	50                   	push   eax
c000d455:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000d45c:	55                   	push   ebp
c000d45d:	e8 a2 ff ff ff       	call   c000d404 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d462:	83 c4 10             	add    esp,0x10
c000d465:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000d46a:	c1 e0 08             	shl    eax,0x8
c000d46d:	89 c2                	mov    edx,eax
c000d46f:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000d474:	09 d0                	or     eax,edx
c000d476:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000d47b:	c1 e0 08             	shl    eax,0x8
c000d47e:	09 d0                	or     eax,edx
c000d480:	74 25                	je     c000d4a7 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000d482:	6b fb 0d             	imul   edi,ebx,0xd
c000d485:	52                   	push   edx
c000d486:	8d 54 24 39          	lea    edx,[esp+0x39]
c000d48a:	52                   	push   edx
c000d48b:	50                   	push   eax
c000d48c:	55                   	push   ebp
c000d48d:	e8 72 ff ff ff       	call   c000d404 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d492:	8d 74 24 49          	lea    esi,[esp+0x49]
c000d496:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000d49d:	b9 27 00 00 00       	mov    ecx,0x27
c000d4a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d4a4:	83 c4 10             	add    esp,0x10
c000d4a7:	83 c3 03             	add    ebx,0x3
c000d4aa:	83 fb 15             	cmp    ebx,0x15
c000d4ad:	75 b6                	jne    c000d465 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000d4af:	83 c4 6c             	add    esp,0x6c
c000d4b2:	5b                   	pop    ebx
c000d4b3:	5e                   	pop    esi
c000d4b4:	5f                   	pop    edi
c000d4b5:	5d                   	pop    ebp
c000d4b6:	c3                   	ret    

c000d4b7 <CmEnterDirectory(Reghive_Tag*, int)>:
c000d4b7:	83 ec 40             	sub    esp,0x40
c000d4ba:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d4be:	50                   	push   eax
c000d4bf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d4c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d4c7:	e8 38 ff ff ff       	call   c000d404 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	83 c8 ff             	or     eax,0xffffffff
c000d4d2:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000d4d7:	75 19                	jne    c000d4f2 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000d4d9:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000d4de:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000d4e3:	c1 e0 08             	shl    eax,0x8
c000d4e6:	09 c2                	or     edx,eax
c000d4e8:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000d4ed:	c1 e0 10             	shl    eax,0x10
c000d4f0:	09 d0                	or     eax,edx
c000d4f2:	83 c4 3c             	add    esp,0x3c
c000d4f5:	c3                   	ret    

c000d4f6 <CmGetNext(Reghive_Tag*, int)>:
c000d4f6:	83 ec 40             	sub    esp,0x40
c000d4f9:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d4fd:	50                   	push   eax
c000d4fe:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d502:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d506:	e8 f9 fe ff ff       	call   c000d404 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d50b:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000d510:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000d515:	c1 e0 08             	shl    eax,0x8
c000d518:	09 c2                	or     edx,eax
c000d51a:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000d51f:	83 c4 4c             	add    esp,0x4c
c000d522:	c1 e0 10             	shl    eax,0x10
c000d525:	09 d0                	or     eax,edx
c000d527:	c3                   	ret    

c000d528 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000d528:	53                   	push   ebx
c000d529:	83 ec 18             	sub    esp,0x18
c000d52c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d530:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d534:	74 29                	je     c000d55f <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d536:	50                   	push   eax
c000d537:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d53c:	99                   	cdq    
c000d53d:	52                   	push   edx
c000d53e:	50                   	push   eax
c000d53f:	ff 33                	push   DWORD PTR [ebx]
c000d541:	e8 20 ad ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d546:	5a                   	pop    edx
c000d547:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d549:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d54d:	8b 10                	mov    edx,DWORD PTR [eax]
c000d54f:	51                   	push   ecx
c000d550:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d554:	6a 00                	push   0x0
c000d556:	6a 2b                	push   0x2b
c000d558:	50                   	push   eax
c000d559:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d55c:	83 c4 20             	add    esp,0x20
c000d55f:	83 c4 18             	add    esp,0x18
c000d562:	5b                   	pop    ebx
c000d563:	c3                   	ret    

c000d564 <CmFreeExtent(Reghive_Tag*, int)>:
c000d564:	53                   	push   ebx
c000d565:	83 ec 3c             	sub    esp,0x3c
c000d568:	6a 2b                	push   0x2b
c000d56a:	6a 00                	push   0x0
c000d56c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d570:	53                   	push   ebx
c000d571:	e8 7a 2f ff ff       	call   c00004f0 <memset>
c000d576:	83 c4 0c             	add    esp,0xc
c000d579:	53                   	push   ebx
c000d57a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d57e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d582:	e8 a1 ff ff ff       	call   c000d528 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d587:	83 c4 48             	add    esp,0x48
c000d58a:	5b                   	pop    ebx
c000d58b:	c3                   	ret    

c000d58c <CmUpdateHeader(Reghive_Tag*)>:
c000d58c:	83 ec 0c             	sub    esp,0xc
c000d58f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d593:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d597:	74 10                	je     c000d5a9 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000d599:	52                   	push   edx
c000d59a:	8d 50 05             	lea    edx,[eax+0x5]
c000d59d:	52                   	push   edx
c000d59e:	6a 00                	push   0x0
c000d5a0:	50                   	push   eax
c000d5a1:	e8 82 ff ff ff       	call   c000d528 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d5a6:	83 c4 10             	add    esp,0x10
c000d5a9:	83 c4 0c             	add    esp,0xc
c000d5ac:	c3                   	ret    

c000d5ad <CmExpand(Reghive_Tag*, int)>:
c000d5ad:	57                   	push   edi
c000d5ae:	56                   	push   esi
c000d5af:	83 ce ff             	or     esi,0xffffffff
c000d5b2:	53                   	push   ebx
c000d5b3:	83 ec 30             	sub    esp,0x30
c000d5b6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d5ba:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d5be:	74 5f                	je     c000d61f <CmExpand(Reghive_Tag*, int)+0x72>
c000d5c0:	31 d2                	xor    edx,edx
c000d5c2:	31 f6                	xor    esi,esi
c000d5c4:	50                   	push   eax
c000d5c5:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000d5c9:	52                   	push   edx
c000d5ca:	50                   	push   eax
c000d5cb:	ff 33                	push   DWORD PTR [ebx]
c000d5cd:	e8 94 ac ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d5d2:	83 c4 0c             	add    esp,0xc
c000d5d5:	6a 2b                	push   0x2b
c000d5d7:	6a 00                	push   0x0
c000d5d9:	8d 7c 24 11          	lea    edi,[esp+0x11]
c000d5dd:	57                   	push   edi
c000d5de:	e8 0d 2f ff ff       	call   c00004f0 <memset>
c000d5e3:	83 c4 10             	add    esp,0x10
c000d5e6:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d5ea:	7d 1b                	jge    c000d607 <CmExpand(Reghive_Tag*, int)+0x5a>
c000d5ec:	83 ec 0c             	sub    esp,0xc
c000d5ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d5f1:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000d5f5:	8b 10                	mov    edx,DWORD PTR [eax]
c000d5f7:	46                   	inc    esi
c000d5f8:	51                   	push   ecx
c000d5f9:	57                   	push   edi
c000d5fa:	6a 00                	push   0x0
c000d5fc:	6a 2b                	push   0x2b
c000d5fe:	50                   	push   eax
c000d5ff:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d602:	83 c4 20             	add    esp,0x20
c000d605:	eb df                	jmp    c000d5e6 <CmExpand(Reghive_Tag*, int)+0x39>
c000d607:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000d60b:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c000d60e:	83 ec 0c             	sub    esp,0xc
c000d611:	01 f2                	add    edx,esi
c000d613:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c000d616:	53                   	push   ebx
c000d617:	e8 70 ff ff ff       	call   c000d58c <CmUpdateHeader(Reghive_Tag*)>
c000d61c:	83 c4 10             	add    esp,0x10
c000d61f:	83 c4 30             	add    esp,0x30
c000d622:	89 f0                	mov    eax,esi
c000d624:	5b                   	pop    ebx
c000d625:	5e                   	pop    esi
c000d626:	5f                   	pop    edi
c000d627:	c3                   	ret    

c000d628 <CmFindUnusedExtent(Reghive_Tag*)>:
c000d628:	55                   	push   ebp
c000d629:	57                   	push   edi
c000d62a:	56                   	push   esi
c000d62b:	53                   	push   ebx
c000d62c:	83 cb ff             	or     ebx,0xffffffff
c000d62f:	83 ec 1c             	sub    esp,0x1c
c000d632:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d636:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000d63a:	74 68                	je     c000d6a4 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d63c:	be 2b 00 00 00       	mov    esi,0x2b
c000d641:	51                   	push   ecx
c000d642:	31 ff                	xor    edi,edi
c000d644:	6a 00                	push   0x0
c000d646:	31 db                	xor    ebx,ebx
c000d648:	6a 00                	push   0x0
c000d64a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d64d:	e8 14 ac ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d652:	83 c4 10             	add    esp,0x10
c000d655:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000d658:	76 3b                	jbe    c000d695 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000d65a:	83 ec 0c             	sub    esp,0xc
c000d65d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d660:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d664:	8b 10                	mov    edx,DWORD PTR [eax]
c000d666:	51                   	push   ecx
c000d667:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000d66b:	51                   	push   ecx
c000d66c:	6a 00                	push   0x0
c000d66e:	6a 01                	push   0x1
c000d670:	50                   	push   eax
c000d671:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d674:	83 c4 20             	add    esp,0x20
c000d677:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000d67c:	74 26                	je     c000d6a4 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d67e:	43                   	inc    ebx
c000d67f:	52                   	push   edx
c000d680:	57                   	push   edi
c000d681:	56                   	push   esi
c000d682:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d685:	e8 dc ab ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d68a:	83 c6 2b             	add    esi,0x2b
c000d68d:	83 d7 00             	adc    edi,0x0
c000d690:	83 c4 10             	add    esp,0x10
c000d693:	eb c0                	jmp    c000d655 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000d695:	50                   	push   eax
c000d696:	50                   	push   eax
c000d697:	6a 40                	push   0x40
c000d699:	55                   	push   ebp
c000d69a:	e8 0e ff ff ff       	call   c000d5ad <CmExpand(Reghive_Tag*, int)>
c000d69f:	83 c4 10             	add    esp,0x10
c000d6a2:	89 c3                	mov    ebx,eax
c000d6a4:	83 c4 1c             	add    esp,0x1c
c000d6a7:	89 d8                	mov    eax,ebx
c000d6a9:	5b                   	pop    ebx
c000d6aa:	5e                   	pop    esi
c000d6ab:	5f                   	pop    edi
c000d6ac:	5d                   	pop    ebp
c000d6ad:	c3                   	ret    

c000d6ae <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000d6ae:	55                   	push   ebp
c000d6af:	57                   	push   edi
c000d6b0:	56                   	push   esi
c000d6b1:	53                   	push   ebx
c000d6b2:	81 ec 88 00 00 00    	sub    esp,0x88
c000d6b8:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000d6bf:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d6c6:	e8 5d ff ff ff       	call   c000d628 <CmFindUnusedExtent(Reghive_Tag*)>
c000d6cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d6cf:	83 c4 0c             	add    esp,0xc
c000d6d2:	6a 2b                	push   0x2b
c000d6d4:	6a 00                	push   0x0
c000d6d6:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000d6da:	55                   	push   ebp
c000d6db:	e8 10 2e ff ff       	call   c00004f0 <memset>
c000d6e0:	83 c4 10             	add    esp,0x10
c000d6e3:	85 db                	test   ebx,ebx
c000d6e5:	74 12                	je     c000d6f9 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000d6e7:	51                   	push   ecx
c000d6e8:	55                   	push   ebp
c000d6e9:	53                   	push   ebx
c000d6ea:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d6f1:	e8 0e fd ff ff       	call   c000d404 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d6f6:	83 c4 10             	add    esp,0x10
c000d6f9:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000d6fd:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d704:	b9 2b 00 00 00       	mov    ecx,0x2b
c000d709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d70b:	85 db                	test   ebx,ebx
c000d70d:	74 49                	je     c000d758 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000d70f:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000d714:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000d719:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d71d:	c1 e0 08             	shl    eax,0x8
c000d720:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000d726:	09 c8                	or     eax,ecx
c000d728:	74 11                	je     c000d73b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000d72a:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000d72e:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000d732:	c1 e8 10             	shr    eax,0x10
c000d735:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000d739:	eb 0f                	jmp    c000d74a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000d73b:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d740:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d745:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d74a:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000d74e:	c1 ea 08             	shr    edx,0x8
c000d751:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000d756:	eb 0f                	jmp    c000d767 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000d758:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d75d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d762:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d767:	52                   	push   edx
c000d768:	8d 44 24 49          	lea    eax,[esp+0x49]
c000d76c:	50                   	push   eax
c000d76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d771:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d778:	e8 ab fd ff ff       	call   c000d528 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d77d:	83 c4 10             	add    esp,0x10
c000d780:	85 db                	test   ebx,ebx
c000d782:	74 12                	je     c000d796 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000d784:	50                   	push   eax
c000d785:	55                   	push   ebp
c000d786:	53                   	push   ebx
c000d787:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d78e:	e8 95 fd ff ff       	call   c000d528 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d793:	83 c4 10             	add    esp,0x10
c000d796:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d79a:	83 c4 7c             	add    esp,0x7c
c000d79d:	5b                   	pop    ebx
c000d79e:	5e                   	pop    esi
c000d79f:	5f                   	pop    edi
c000d7a0:	5d                   	pop    ebp
c000d7a1:	c3                   	ret    

c000d7a2 <CmSetString(Reghive_Tag*, int, char const*)>:
c000d7a2:	55                   	push   ebp
c000d7a3:	57                   	push   edi
c000d7a4:	56                   	push   esi
c000d7a5:	53                   	push   ebx
c000d7a6:	bb 27 00 00 00       	mov    ebx,0x27
c000d7ab:	81 ec 88 00 00 00    	sub    esp,0x88
c000d7b1:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d7b8:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000d7bf:	e8 ac 2d ff ff       	call   c0000570 <strlen>
c000d7c4:	8d 48 26             	lea    ecx,[eax+0x26]
c000d7c7:	89 c8                	mov    eax,ecx
c000d7c9:	99                   	cdq    
c000d7ca:	f7 fb                	idiv   ebx
c000d7cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d7d0:	83 c4 10             	add    esp,0x10
c000d7d3:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000d7d9:	7e 10                	jle    c000d7eb <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000d7db:	83 ec 0c             	sub    esp,0xc
c000d7de:	68 6b 45 02 c0       	push   0xc002456b
c000d7e3:	e8 d8 23 00 00       	call   c000fbc0 <KePanic(char const*)>
c000d7e8:	83 c4 10             	add    esp,0x10
c000d7eb:	31 ff                	xor    edi,edi
c000d7ed:	50                   	push   eax
c000d7ee:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000d7f2:	53                   	push   ebx
c000d7f3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d7fa:	56                   	push   esi
c000d7fb:	e8 04 fc ff ff       	call   c000d404 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c000d807:	89 d0                	mov    eax,edx
c000d809:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c000d80d:	c1 e0 08             	shl    eax,0x8
c000d810:	09 c2                	or     edx,eax
c000d812:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000d816:	c1 e2 08             	shl    edx,0x8
c000d819:	09 c2                	or     edx,eax
c000d81b:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000d81f:	7e 76                	jle    c000d897 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c000d821:	85 d2                	test   edx,edx
c000d823:	75 25                	jne    c000d84a <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000d825:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000d82a:	8d 44 24 45          	lea    eax,[esp+0x45]
c000d82e:	50                   	push   eax
c000d82f:	6a 00                	push   0x0
c000d831:	6a 00                	push   0x0
c000d833:	56                   	push   esi
c000d834:	e8 75 fe ff ff       	call   c000d6ae <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d839:	83 c4 10             	add    esp,0x10
c000d83c:	89 c2                	mov    edx,eax
c000d83e:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000d841:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000d844:	c1 f8 10             	sar    eax,0x10
c000d847:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000d84a:	55                   	push   ebp
c000d84b:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c000d84f:	55                   	push   ebp
c000d850:	52                   	push   edx
c000d851:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d855:	56                   	push   esi
c000d856:	e8 a9 fb ff ff       	call   c000d404 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d85b:	83 c4 0c             	add    esp,0xc
c000d85e:	6a 27                	push   0x27
c000d860:	6a 00                	push   0x0
c000d862:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d866:	51                   	push   ecx
c000d867:	e8 84 2c ff ff       	call   c00004f0 <memset>
c000d86c:	83 c4 0c             	add    esp,0xc
c000d86f:	6b c7 27             	imul   eax,edi,0x27
c000d872:	6a 27                	push   0x27
c000d874:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000d87b:	50                   	push   eax
c000d87c:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d880:	51                   	push   ecx
c000d881:	e8 fa 2d ff ff       	call   c0000680 <strncpy>
c000d886:	83 c4 0c             	add    esp,0xc
c000d889:	55                   	push   ebp
c000d88a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d88e:	52                   	push   edx
c000d88f:	56                   	push   esi
c000d890:	e8 93 fc ff ff       	call   c000d528 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d895:	eb 19                	jmp    c000d8b0 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c000d897:	85 d2                	test   edx,edx
c000d899:	74 18                	je     c000d8b3 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c000d89b:	51                   	push   ecx
c000d89c:	51                   	push   ecx
c000d89d:	52                   	push   edx
c000d89e:	56                   	push   esi
c000d89f:	e8 c0 fc ff ff       	call   c000d564 <CmFreeExtent(Reghive_Tag*, int)>
c000d8a4:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000d8a8:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000d8ac:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000d8b0:	83 c4 10             	add    esp,0x10
c000d8b3:	47                   	inc    edi
c000d8b4:	83 c3 03             	add    ebx,0x3
c000d8b7:	83 ff 07             	cmp    edi,0x7
c000d8ba:	0f 85 43 ff ff ff    	jne    c000d803 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000d8c0:	50                   	push   eax
c000d8c1:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000d8c5:	50                   	push   eax
c000d8c6:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d8cd:	56                   	push   esi
c000d8ce:	e8 55 fc ff ff       	call   c000d528 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d8d3:	81 c4 8c 00 00 00    	add    esp,0x8c
c000d8d9:	5b                   	pop    ebx
c000d8da:	5e                   	pop    esi
c000d8db:	5f                   	pop    edi
c000d8dc:	5d                   	pop    ebp
c000d8dd:	c3                   	ret    

c000d8de <CmGetMatch(char*, char*, bool, bool*)>:
c000d8de:	56                   	push   esi
c000d8df:	53                   	push   ebx
c000d8e0:	50                   	push   eax
c000d8e1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d8e5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d8ea:	74 25                	je     c000d911 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000d8ec:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d8ef:	31 db                	xor    ebx,ebx
c000d8f1:	50                   	push   eax
c000d8f2:	50                   	push   eax
c000d8f3:	8d 04 9d 60 69 02 c0 	lea    eax,[ebx*4-0x3ffd96a0]
c000d8fa:	50                   	push   eax
c000d8fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8ff:	e8 4c 2e ff ff       	call   c0000750 <strcmp>
c000d904:	83 c4 10             	add    esp,0x10
c000d907:	85 c0                	test   eax,eax
c000d909:	74 2e                	je     c000d939 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d90b:	43                   	inc    ebx
c000d90c:	83 fb 3f             	cmp    ebx,0x3f
c000d90f:	75 e0                	jne    c000d8f1 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000d911:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d914:	31 db                	xor    ebx,ebx
c000d916:	8d 04 9d 60 69 02 c0 	lea    eax,[ebx*4-0x3ffd96a0]
c000d91d:	51                   	push   ecx
c000d91e:	51                   	push   ecx
c000d91f:	50                   	push   eax
c000d920:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d924:	e8 27 2e ff ff       	call   c0000750 <strcmp>
c000d929:	83 c4 10             	add    esp,0x10
c000d92c:	85 c0                	test   eax,eax
c000d92e:	74 09                	je     c000d939 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d930:	43                   	inc    ebx
c000d931:	83 fb 3f             	cmp    ebx,0x3f
c000d934:	75 e0                	jne    c000d916 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000d936:	83 cb ff             	or     ebx,0xffffffff
c000d939:	89 d8                	mov    eax,ebx
c000d93b:	5a                   	pop    edx
c000d93c:	5b                   	pop    ebx
c000d93d:	5e                   	pop    esi
c000d93e:	c3                   	ret    

c000d93f <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000d93f:	55                   	push   ebp
c000d940:	31 c0                	xor    eax,eax
c000d942:	57                   	push   edi
c000d943:	56                   	push   esi
c000d944:	53                   	push   ebx
c000d945:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d949:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d94d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000d94f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d953:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000d956:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d95a:	83 fd 1f             	cmp    ebp,0x1f
c000d95d:	7f 0b                	jg     c000d96a <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000d95f:	0f b6 c2             	movzx  eax,dl
c000d962:	d3 e0                	shl    eax,cl
c000d964:	09 07                	or     DWORD PTR [edi],eax
c000d966:	b0 01                	mov    al,0x1
c000d968:	01 33                	add    DWORD PTR [ebx],esi
c000d96a:	5b                   	pop    ebx
c000d96b:	5e                   	pop    esi
c000d96c:	5f                   	pop    edi
c000d96d:	5d                   	pop    ebp
c000d96e:	c3                   	ret    

c000d96f <CmGetShift(unsigned int*, int*, int, bool*)>:
c000d96f:	57                   	push   edi
c000d970:	56                   	push   esi
c000d971:	53                   	push   ebx
c000d972:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d976:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000d97a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d97e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d982:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000d984:	7c 17                	jl     c000d99d <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000d986:	8b 17                	mov    edx,DWORD PTR [edi]
c000d988:	b8 01 00 00 00       	mov    eax,0x1
c000d98d:	d3 e0                	shl    eax,cl
c000d98f:	48                   	dec    eax
c000d990:	21 d0                	and    eax,edx
c000d992:	d3 ea                	shr    edx,cl
c000d994:	89 17                	mov    DWORD PTR [edi],edx
c000d996:	29 0b                	sub    DWORD PTR [ebx],ecx
c000d998:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d99b:	eb 05                	jmp    c000d9a2 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000d99d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d9a0:	31 c0                	xor    eax,eax
c000d9a2:	5b                   	pop    ebx
c000d9a3:	5e                   	pop    esi
c000d9a4:	5f                   	pop    edi
c000d9a5:	c3                   	ret    

c000d9a6 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000d9a6:	83 ec 40             	sub    esp,0x40
c000d9a9:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d9ad:	50                   	push   eax
c000d9ae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d9b2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d9b6:	e8 49 fa ff ff       	call   c000d404 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d9bb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d9bf:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000d9c3:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000d9c7:	89 10                	mov    DWORD PTR [eax],edx
c000d9c9:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000d9cc:	83 c4 4c             	add    esp,0x4c
c000d9cf:	c3                   	ret    

c000d9d0 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000d9d0:	55                   	push   ebp
c000d9d1:	57                   	push   edi
c000d9d2:	56                   	push   esi
c000d9d3:	53                   	push   ebx
c000d9d4:	83 ec 40             	sub    esp,0x40
c000d9d7:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000d9db:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000d9df:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d9e3:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000d9e7:	53                   	push   ebx
c000d9e8:	56                   	push   esi
c000d9e9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d9ed:	e8 12 fa ff ff       	call   c000d404 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d9f2:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000d9f6:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000d9fa:	83 c4 0c             	add    esp,0xc
c000d9fd:	53                   	push   ebx
c000d9fe:	56                   	push   esi
c000d9ff:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000da03:	e8 20 fb ff ff       	call   c000d528 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000da08:	83 c4 4c             	add    esp,0x4c
c000da0b:	5b                   	pop    ebx
c000da0c:	5e                   	pop    esi
c000da0d:	5f                   	pop    edi
c000da0e:	5d                   	pop    ebp
c000da0f:	c3                   	ret    

c000da10 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000da10:	55                   	push   ebp
c000da11:	57                   	push   edi
c000da12:	56                   	push   esi
c000da13:	31 f6                	xor    esi,esi
c000da15:	53                   	push   ebx
c000da16:	31 db                	xor    ebx,ebx
c000da18:	83 ec 40             	sub    esp,0x40
c000da1b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000da23:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000da2b:	6a 12                	push   0x12
c000da2d:	68 ee 00 00 00       	push   0xee
c000da32:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000da36:	e8 b5 2a ff ff       	call   c00004f0 <memset>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000da42:	6a 08                	push   0x8
c000da44:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000da48:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000da4c:	50                   	push   eax
c000da4d:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000da51:	55                   	push   ebp
c000da52:	57                   	push   edi
c000da53:	e8 e7 fe ff ff       	call   c000d93f <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000da58:	83 c4 10             	add    esp,0x10
c000da5b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000da5f:	50                   	push   eax
c000da60:	6a 06                	push   0x6
c000da62:	55                   	push   ebp
c000da63:	57                   	push   edi
c000da64:	e8 06 ff ff ff       	call   c000d96f <CmGetShift(unsigned int*, int*, int, bool*)>
c000da69:	83 c4 10             	add    esp,0x10
c000da6c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000da71:	74 07                	je     c000da7a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000da73:	46                   	inc    esi
c000da74:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000da78:	eb e1                	jmp    c000da5b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000da7a:	43                   	inc    ebx
c000da7b:	83 fb 12             	cmp    ebx,0x12
c000da7e:	75 c2                	jne    c000da42 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000da80:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000da84:	31 db                	xor    ebx,ebx
c000da86:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000da89:	50                   	push   eax
c000da8a:	50                   	push   eax
c000da8b:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c000da90:	43                   	inc    ebx
c000da91:	8d 04 85 60 69 02 c0 	lea    eax,[eax*4-0x3ffd96a0]
c000da98:	50                   	push   eax
c000da99:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000da9d:	e8 9e 2d ff ff       	call   c0000840 <strcat>
c000daa2:	83 c4 10             	add    esp,0x10
c000daa5:	83 fb 18             	cmp    ebx,0x18
c000daa8:	75 df                	jne    c000da89 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000daaa:	83 c4 3c             	add    esp,0x3c
c000daad:	31 c0                	xor    eax,eax
c000daaf:	5b                   	pop    ebx
c000dab0:	5e                   	pop    esi
c000dab1:	5f                   	pop    edi
c000dab2:	5d                   	pop    ebp
c000dab3:	c3                   	ret    

c000dab4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000dab4:	83 ec 40             	sub    esp,0x40
c000dab7:	8d 44 24 09          	lea    eax,[esp+0x9]
c000dabb:	50                   	push   eax
c000dabc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dac0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dac4:	e8 3b f9 ff ff       	call   c000d404 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dac9:	58                   	pop    eax
c000daca:	5a                   	pop    edx
c000dacb:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000dacf:	8d 44 24 15          	lea    eax,[esp+0x15]
c000dad3:	50                   	push   eax
c000dad4:	e8 37 ff ff ff       	call   c000da10 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000dad9:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000dade:	83 c4 4c             	add    esp,0x4c
c000dae1:	c3                   	ret    

c000dae2 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000dae2:	55                   	push   ebp
c000dae3:	57                   	push   edi
c000dae4:	56                   	push   esi
c000dae5:	53                   	push   ebx
c000dae6:	31 db                	xor    ebx,ebx
c000dae8:	83 ec 70             	sub    esp,0x70
c000daeb:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000daf2:	6a 30                	push   0x30
c000daf4:	6a 00                	push   0x0
c000daf6:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000dafa:	56                   	push   esi
c000dafb:	e8 f0 29 ff ff       	call   c00004f0 <memset>
c000db00:	83 c4 10             	add    esp,0x10
c000db03:	83 ec 0c             	sub    esp,0xc
c000db06:	57                   	push   edi
c000db07:	e8 64 2a ff ff       	call   c0000570 <strlen>
c000db0c:	83 c4 10             	add    esp,0x10
c000db0f:	39 d8                	cmp    eax,ebx
c000db11:	76 16                	jbe    c000db29 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000db13:	83 ec 0c             	sub    esp,0xc
c000db16:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000db1a:	50                   	push   eax
c000db1b:	e8 10 2e ff ff       	call   c0000930 <toupper>
c000db20:	83 c4 10             	add    esp,0x10
c000db23:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000db26:	43                   	inc    ebx
c000db27:	eb da                	jmp    c000db03 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000db29:	31 f6                	xor    esi,esi
c000db2b:	52                   	push   edx
c000db2c:	31 ff                	xor    edi,edi
c000db2e:	6a 18                	push   0x18
c000db30:	6a 3f                	push   0x3f
c000db32:	8d 44 24 24          	lea    eax,[esp+0x24]
c000db36:	50                   	push   eax
c000db37:	e8 b4 29 ff ff       	call   c00004f0 <memset>
c000db3c:	83 c4 10             	add    esp,0x10
c000db3f:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c000db43:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c000db47:	84 c0                	test   al,al
c000db49:	0f 84 b0 00 00 00    	je     c000dbff <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000db4f:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000db53:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000db58:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000db5c:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c000db61:	8d 6e 01             	lea    ebp,[esi+0x1]
c000db64:	83 ec 0c             	sub    esp,0xc
c000db67:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000db6b:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000db6f:	53                   	push   ebx
c000db70:	e8 fb 29 ff ff       	call   c0000570 <strlen>
c000db75:	83 c4 10             	add    esp,0x10
c000db78:	85 c0                	test   eax,eax
c000db7a:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000db7e:	74 0b                	je     c000db8b <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000db80:	50                   	push   eax
c000db81:	6a 01                	push   0x1
c000db83:	53                   	push   ebx
c000db84:	8d 44 24 20          	lea    eax,[esp+0x20]
c000db88:	50                   	push   eax
c000db89:	eb 0a                	jmp    c000db95 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000db8b:	50                   	push   eax
c000db8c:	6a 00                	push   0x0
c000db8e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000db92:	50                   	push   eax
c000db93:	6a 00                	push   0x0
c000db95:	e8 44 fd ff ff       	call   c000d8de <CmGetMatch(char*, char*, bool, bool*)>
c000db9a:	83 c4 10             	add    esp,0x10
c000db9d:	83 f8 ff             	cmp    eax,0xffffffff
c000dba0:	75 1a                	jne    c000dbbc <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000dba2:	83 ec 0c             	sub    esp,0xc
c000dba5:	68 80 45 02 c0       	push   0xc0024580
c000dbaa:	e8 11 20 00 00       	call   c000fbc0 <KePanic(char const*)>
c000dbaf:	83 c4 10             	add    esp,0x10
c000dbb2:	b8 02 00 00 00       	mov    eax,0x2
c000dbb7:	e9 bc 00 00 00       	jmp    c000dc78 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dbbc:	83 ff 18             	cmp    edi,0x18
c000dbbf:	75 1a                	jne    c000dbdb <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000dbc1:	83 ec 0c             	sub    esp,0xc
c000dbc4:	68 95 45 02 c0       	push   0xc0024595
c000dbc9:	e8 f2 1f 00 00       	call   c000fbc0 <KePanic(char const*)>
c000dbce:	83 c4 10             	add    esp,0x10
c000dbd1:	b8 01 00 00 00       	mov    eax,0x1
c000dbd6:	e9 9d 00 00 00       	jmp    c000dc78 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dbdb:	47                   	inc    edi
c000dbdc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dbe1:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000dbe5:	74 02                	je     c000dbe9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c000dbe7:	89 ee                	mov    esi,ebp
c000dbe9:	83 ec 0c             	sub    esp,0xc
c000dbec:	53                   	push   ebx
c000dbed:	e8 7e 29 ff ff       	call   c0000570 <strlen>
c000dbf2:	83 c4 10             	add    esp,0x10
c000dbf5:	85 c0                	test   eax,eax
c000dbf7:	74 06                	je     c000dbff <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000dbf9:	46                   	inc    esi
c000dbfa:	e9 40 ff ff ff       	jmp    c000db3f <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000dbff:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000dc07:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dc0f:	31 f6                	xor    esi,esi
c000dc11:	50                   	push   eax
c000dc12:	31 ff                	xor    edi,edi
c000dc14:	6a 12                	push   0x12
c000dc16:	68 ee 00 00 00       	push   0xee
c000dc1b:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000dc22:	e8 c9 28 ff ff       	call   c00004f0 <memset>
c000dc27:	83 c4 10             	add    esp,0x10
c000dc2a:	83 fe 17             	cmp    esi,0x17
c000dc2d:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000dc31:	7e 26                	jle    c000dc59 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c000dc33:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dc37:	50                   	push   eax
c000dc38:	6a 08                	push   0x8
c000dc3a:	55                   	push   ebp
c000dc3b:	53                   	push   ebx
c000dc3c:	e8 2e fd ff ff       	call   c000d96f <CmGetShift(unsigned int*, int*, int, bool*)>
c000dc41:	83 c4 10             	add    esp,0x10
c000dc44:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dc49:	74 26                	je     c000dc71 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c000dc4b:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000dc52:	4e                   	dec    esi
c000dc53:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000dc56:	47                   	inc    edi
c000dc57:	eb 1c                	jmp    c000dc75 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000dc59:	6a 06                	push   0x6
c000dc5b:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c000dc60:	50                   	push   eax
c000dc61:	55                   	push   ebp
c000dc62:	53                   	push   ebx
c000dc63:	e8 d7 fc ff ff       	call   c000d93f <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000dc68:	83 c4 10             	add    esp,0x10
c000dc6b:	84 c0                	test   al,al
c000dc6d:	75 06                	jne    c000dc75 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000dc6f:	eb c2                	jmp    c000dc33 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	eb 03                	jmp    c000dc78 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dc75:	46                   	inc    esi
c000dc76:	eb b2                	jmp    c000dc2a <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c000dc78:	83 c4 6c             	add    esp,0x6c
c000dc7b:	5b                   	pop    ebx
c000dc7c:	5e                   	pop    esi
c000dc7d:	5f                   	pop    edi
c000dc7e:	5d                   	pop    ebp
c000dc7f:	c3                   	ret    

c000dc80 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000dc80:	53                   	push   ebx
c000dc81:	83 ec 3c             	sub    esp,0x3c
c000dc84:	6a 2b                	push   0x2b
c000dc86:	6a 00                	push   0x0
c000dc88:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dc8c:	53                   	push   ebx
c000dc8d:	e8 5e 28 ff ff       	call   c00004f0 <memset>
c000dc92:	58                   	pop    eax
c000dc93:	5a                   	pop    edx
c000dc94:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dc98:	50                   	push   eax
c000dc99:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dc9d:	e8 40 fe ff ff       	call   c000dae2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dca2:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000dca7:	83 c4 0c             	add    esp,0xc
c000dcaa:	6a 15                	push   0x15
c000dcac:	6a 00                	push   0x0
c000dcae:	8d 44 24 27          	lea    eax,[esp+0x27]
c000dcb2:	50                   	push   eax
c000dcb3:	e8 38 28 ff ff       	call   c00004f0 <memset>
c000dcb8:	53                   	push   ebx
c000dcb9:	6a 00                	push   0x0
c000dcbb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dcbf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dcc3:	e8 e6 f9 ff ff       	call   c000d6ae <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dcc8:	83 c4 58             	add    esp,0x58
c000dccb:	5b                   	pop    ebx
c000dccc:	c3                   	ret    

c000dccd <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000dccd:	56                   	push   esi
c000dcce:	53                   	push   ebx
c000dccf:	83 ec 48             	sub    esp,0x48
c000dcd2:	6a 12                	push   0x12
c000dcd4:	68 ff 00 00 00       	push   0xff
c000dcd9:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000dcdd:	56                   	push   esi
c000dcde:	e8 0d 28 ff ff       	call   c00004f0 <memset>
c000dce3:	5a                   	pop    edx
c000dce4:	59                   	pop    ecx
c000dce5:	56                   	push   esi
c000dce6:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000dcea:	e8 f3 fd ff ff       	call   c000dae2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dcef:	83 c4 10             	add    esp,0x10
c000dcf2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000dcf6:	85 db                	test   ebx,ebx
c000dcf8:	74 42                	je     c000dd3c <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000dcfa:	50                   	push   eax
c000dcfb:	8d 44 24 19          	lea    eax,[esp+0x19]
c000dcff:	50                   	push   eax
c000dd00:	53                   	push   ebx
c000dd01:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd05:	e8 fa f6 ff ff       	call   c000d404 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dd0a:	83 c4 0c             	add    esp,0xc
c000dd0d:	6a 12                	push   0x12
c000dd0f:	8d 44 24 21          	lea    eax,[esp+0x21]
c000dd13:	50                   	push   eax
c000dd14:	56                   	push   esi
c000dd15:	e8 66 26 ff ff       	call   c0000380 <memcmp>
c000dd1a:	83 c4 10             	add    esp,0x10
c000dd1d:	85 c0                	test   eax,eax
c000dd1f:	74 1e                	je     c000dd3f <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000dd21:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000dd26:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000dd2b:	c1 e3 08             	shl    ebx,0x8
c000dd2e:	09 d8                	or     eax,ebx
c000dd30:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000dd35:	c1 e3 10             	shl    ebx,0x10
c000dd38:	09 c3                	or     ebx,eax
c000dd3a:	eb ba                	jmp    c000dcf6 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000dd3c:	83 cb ff             	or     ebx,0xffffffff
c000dd3f:	89 d8                	mov    eax,ebx
c000dd41:	83 c4 44             	add    esp,0x44
c000dd44:	5b                   	pop    ebx
c000dd45:	5e                   	pop    esi
c000dd46:	c3                   	ret    

c000dd47 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000dd47:	57                   	push   edi
c000dd48:	56                   	push   esi
c000dd49:	53                   	push   ebx
c000dd4a:	83 ec 34             	sub    esp,0x34
c000dd4d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000dd51:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000dd55:	6a 2b                	push   0x2b
c000dd57:	6a 00                	push   0x0
c000dd59:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dd5d:	53                   	push   ebx
c000dd5e:	e8 8d 27 ff ff       	call   c00004f0 <memset>
c000dd63:	58                   	pop    eax
c000dd64:	5a                   	pop    edx
c000dd65:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dd69:	50                   	push   eax
c000dd6a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dd6e:	e8 6f fd ff ff       	call   c000dae2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dd73:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000dd77:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000dd7b:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000dd7f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000dd83:	53                   	push   ebx
c000dd84:	6a 00                	push   0x0
c000dd86:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd8a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd8e:	e8 1b f9 ff ff       	call   c000d6ae <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dd93:	83 c4 50             	add    esp,0x50
c000dd96:	5b                   	pop    ebx
c000dd97:	5e                   	pop    esi
c000dd98:	5f                   	pop    edi
c000dd99:	c3                   	ret    

c000dd9a <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000dd9a:	55                   	push   ebp
c000dd9b:	57                   	push   edi
c000dd9c:	56                   	push   esi
c000dd9d:	53                   	push   ebx
c000dd9e:	83 ec 40             	sub    esp,0x40
c000dda1:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000dda5:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000dda9:	6a 2b                	push   0x2b
c000ddab:	6a 00                	push   0x0
c000ddad:	8d 74 24 11          	lea    esi,[esp+0x11]
c000ddb1:	56                   	push   esi
c000ddb2:	e8 39 27 ff ff       	call   c00004f0 <memset>
c000ddb7:	5f                   	pop    edi
c000ddb8:	89 ef                	mov    edi,ebp
c000ddba:	58                   	pop    eax
c000ddbb:	8d 44 24 11          	lea    eax,[esp+0x11]
c000ddbf:	50                   	push   eax
c000ddc0:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ddc4:	e8 19 fd ff ff       	call   c000dae2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000ddc9:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000ddce:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000ddd3:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000ddd8:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000dddd:	83 c4 10             	add    esp,0x10
c000dde0:	85 ed                	test   ebp,ebp
c000dde2:	74 14                	je     c000ddf8 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000dde4:	51                   	push   ecx
c000dde5:	51                   	push   ecx
c000dde6:	57                   	push   edi
c000dde7:	53                   	push   ebx
c000dde8:	e8 09 f7 ff ff       	call   c000d4f6 <CmGetNext(Reghive_Tag*, int)>
c000dded:	83 c4 10             	add    esp,0x10
c000ddf0:	85 c0                	test   eax,eax
c000ddf2:	74 04                	je     c000ddf8 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000ddf4:	89 c7                	mov    edi,eax
c000ddf6:	eb e8                	jmp    c000dde0 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000ddf8:	56                   	push   esi
c000ddf9:	6a 00                	push   0x0
c000ddfb:	57                   	push   edi
c000ddfc:	53                   	push   ebx
c000ddfd:	e8 ac f8 ff ff       	call   c000d6ae <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000de02:	83 c4 0c             	add    esp,0xc
c000de05:	89 c7                	mov    edi,eax
c000de07:	56                   	push   esi
c000de08:	50                   	push   eax
c000de09:	53                   	push   ebx
c000de0a:	e8 f5 f5 ff ff       	call   c000d404 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000de0f:	58                   	pop    eax
c000de10:	5a                   	pop    edx
c000de11:	6a 6c                	push   0x6c
c000de13:	6a 00                	push   0x0
c000de15:	6a 00                	push   0x0
c000de17:	68 a6 45 02 c0       	push   0xc00245a6
c000de1c:	57                   	push   edi
c000de1d:	53                   	push   ebx
c000de1e:	e8 24 ff ff ff       	call   c000dd47 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000de23:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000de27:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000de2b:	c1 e8 10             	shr    eax,0x10
c000de2e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000de32:	83 c4 1c             	add    esp,0x1c
c000de35:	56                   	push   esi
c000de36:	57                   	push   edi
c000de37:	53                   	push   ebx
c000de38:	e8 eb f6 ff ff       	call   c000d528 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000de3d:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000de42:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000de47:	c1 e0 08             	shl    eax,0x8
c000de4a:	09 c2                	or     edx,eax
c000de4c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000de51:	83 c4 4c             	add    esp,0x4c
c000de54:	c1 e0 10             	shl    eax,0x10
c000de57:	5b                   	pop    ebx
c000de58:	09 d0                	or     eax,edx
c000de5a:	5e                   	pop    esi
c000de5b:	5f                   	pop    edi
c000de5c:	5d                   	pop    ebp
c000de5d:	c3                   	ret    

c000de5e <zStrtok(char*, char const*)>:
c000de5e:	55                   	push   ebp
c000de5f:	57                   	push   edi
c000de60:	56                   	push   esi
c000de61:	53                   	push   ebx
c000de62:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de66:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de6a:	85 db                	test   ebx,ebx
c000de6c:	74 2f                	je     c000de9d <zStrtok(char*, char const*)+0x3f>
c000de6e:	85 c0                	test   eax,eax
c000de70:	75 09                	jne    c000de7b <zStrtok(char*, char const*)+0x1d>
c000de72:	a1 04 d1 02 c0       	mov    eax,ds:0xc002d104
c000de77:	85 c0                	test   eax,eax
c000de79:	74 50                	je     c000decb <zStrtok(char*, char const*)+0x6d>
c000de7b:	31 c9                	xor    ecx,ecx
c000de7d:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000de81:	74 03                	je     c000de86 <zStrtok(char*, char const*)+0x28>
c000de83:	41                   	inc    ecx
c000de84:	eb f7                	jmp    c000de7d <zStrtok(char*, char const*)+0x1f>
c000de86:	31 d2                	xor    edx,edx
c000de88:	39 ca                	cmp    edx,ecx
c000de8a:	74 15                	je     c000dea1 <zStrtok(char*, char const*)+0x43>
c000de8c:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000de90:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000de93:	8d 3c 10             	lea    edi,[eax+edx*1]
c000de96:	39 ee                	cmp    esi,ebp
c000de98:	74 13                	je     c000dead <zStrtok(char*, char const*)+0x4f>
c000de9a:	42                   	inc    edx
c000de9b:	eb eb                	jmp    c000de88 <zStrtok(char*, char const*)+0x2a>
c000de9d:	31 c0                	xor    eax,eax
c000de9f:	eb 2a                	jmp    c000decb <zStrtok(char*, char const*)+0x6d>
c000dea1:	c7 05 04 d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d104,0x0
c000deab:	eb 1e                	jmp    c000decb <zStrtok(char*, char const*)+0x6d>
c000dead:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000deb0:	39 ce                	cmp    esi,ecx
c000deb2:	75 0a                	jne    c000debe <zStrtok(char*, char const*)+0x60>
c000deb4:	40                   	inc    eax
c000deb5:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c000deba:	89 d8                	mov    eax,ebx
c000debc:	eb 0d                	jmp    c000decb <zStrtok(char*, char const*)+0x6d>
c000debe:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000dec2:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000dec5:	89 15 04 d1 02 c0    	mov    DWORD PTR ds:0xc002d104,edx
c000decb:	5b                   	pop    ebx
c000decc:	5e                   	pop    esi
c000decd:	5f                   	pop    edi
c000dece:	5d                   	pop    ebp
c000decf:	c3                   	ret    

c000ded0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000ded0:	57                   	push   edi
c000ded1:	56                   	push   esi
c000ded2:	53                   	push   ebx
c000ded3:	81 ec 08 01 00 00    	sub    esp,0x108
c000ded9:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000dee0:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000dee7:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000deeb:	53                   	push   ebx
c000deec:	e8 4f 27 ff ff       	call   c0000640 <strcpy>
c000def1:	59                   	pop    ecx
c000def2:	5e                   	pop    esi
c000def3:	68 c4 54 02 c0       	push   0xc00254c4
c000def8:	53                   	push   ebx
c000def9:	bb 01 00 00 00       	mov    ebx,0x1
c000defe:	e8 5b ff ff ff       	call   c000de5e <zStrtok(char*, char const*)>
c000df03:	83 c4 10             	add    esp,0x10
c000df06:	85 c0                	test   eax,eax
c000df08:	74 3b                	je     c000df45 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000df0a:	52                   	push   edx
c000df0b:	50                   	push   eax
c000df0c:	6a 01                	push   0x1
c000df0e:	57                   	push   edi
c000df0f:	e8 b9 fd ff ff       	call   c000dccd <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000df14:	59                   	pop    ecx
c000df15:	89 c3                	mov    ebx,eax
c000df17:	5e                   	pop    esi
c000df18:	68 c4 54 02 c0       	push   0xc00254c4
c000df1d:	6a 00                	push   0x0
c000df1f:	e8 3a ff ff ff       	call   c000de5e <zStrtok(char*, char const*)>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 c6                	mov    esi,eax
c000df29:	85 c0                	test   eax,eax
c000df2b:	74 18                	je     c000df45 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000df2d:	52                   	push   edx
c000df2e:	52                   	push   edx
c000df2f:	53                   	push   ebx
c000df30:	57                   	push   edi
c000df31:	e8 81 f5 ff ff       	call   c000d4b7 <CmEnterDirectory(Reghive_Tag*, int)>
c000df36:	83 c4 10             	add    esp,0x10
c000df39:	89 c3                	mov    ebx,eax
c000df3b:	83 f8 ff             	cmp    eax,0xffffffff
c000df3e:	74 05                	je     c000df45 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000df40:	50                   	push   eax
c000df41:	56                   	push   esi
c000df42:	53                   	push   ebx
c000df43:	eb c9                	jmp    c000df0e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000df45:	81 c4 00 01 00 00    	add    esp,0x100
c000df4b:	89 d8                	mov    eax,ebx
c000df4d:	5b                   	pop    ebx
c000df4e:	5e                   	pop    esi
c000df4f:	5f                   	pop    edi
c000df50:	c3                   	ret    
c000df51:	90                   	nop

c000df52 <Computer::close(int, int, void*)>:
c000df52:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000df57:	c3                   	ret    

c000df58 <Computer::Computer()>:
c000df58:	83 ec 0c             	sub    esp,0xc
c000df5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df5f:	83 ec 08             	sub    esp,0x8
c000df62:	68 ac 45 02 c0       	push   0xc00245ac
c000df67:	50                   	push   eax
c000df68:	e8 49 bc ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000df6d:	83 c4 10             	add    esp,0x10
c000df70:	ba 04 46 02 c0       	mov    edx,0xc0024604
c000df75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df79:	89 10                	mov    DWORD PTR [eax],edx
c000df7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df7f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000df89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df8d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000df97:	90                   	nop
c000df98:	83 c4 0c             	add    esp,0xc
c000df9b:	c3                   	ret    

c000df9c <Computer::open(int, int, void*)>:
c000df9c:	56                   	push   esi
c000df9d:	53                   	push   ebx
c000df9e:	83 ec 04             	sub    esp,0x4
c000dfa1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dfa5:	39 1d 08 d1 02 c0    	cmp    DWORD PTR ds:0xc002d108,ebx
c000dfab:	74 10                	je     c000dfbd <Computer::open(int, int, void*)+0x21>
c000dfad:	83 ec 0c             	sub    esp,0xc
c000dfb0:	68 d0 45 02 c0       	push   0xc00245d0
c000dfb5:	e8 06 1c 00 00       	call   c000fbc0 <KePanic(char const*)>
c000dfba:	83 c4 10             	add    esp,0x10
c000dfbd:	83 ec 0c             	sub    esp,0xc
c000dfc0:	68 78 11 00 00       	push   0x1178
c000dfc5:	e8 99 17 00 00       	call   c000f763 <malloc>
c000dfca:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfcd:	89 c6                	mov    esi,eax
c000dfcf:	e8 36 ce 00 00       	call   c001ae0a <CPU::CPU()>
c000dfd4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000dfd8:	89 b3 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],esi
c000dfde:	50                   	push   eax
c000dfdf:	6a 00                	push   0x0
c000dfe1:	6a 00                	push   0x0
c000dfe3:	56                   	push   esi
c000dfe4:	e8 03 d0 00 00       	call   c001afec <CPU::open(int, int, void*)>
c000dfe9:	83 c4 14             	add    esp,0x14
c000dfec:	68 b5 45 02 c0       	push   0xc00245b5
c000dff1:	e8 db f1 ff ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c000dff6:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000dffd:	e8 61 17 00 00       	call   c000f763 <malloc>
c000e002:	89 04 24             	mov    DWORD PTR [esp],eax
c000e005:	89 c6                	mov    esi,eax
c000e007:	e8 64 e8 ff ff       	call   c000c870 <ACPI::ACPI()>
c000e00c:	89 b3 64 01 00 00    	mov    DWORD PTR [ebx+0x164],esi
c000e012:	5a                   	pop    edx
c000e013:	59                   	pop    ecx
c000e014:	56                   	push   esi
c000e015:	53                   	push   ebx
c000e016:	e8 39 ba ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000e01b:	5e                   	pop    esi
c000e01c:	58                   	pop    eax
c000e01d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e023:	50                   	push   eax
c000e024:	53                   	push   ebx
c000e025:	e8 2a ba ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000e02a:	83 c4 14             	add    esp,0x14
c000e02d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e032:	5b                   	pop    ebx
c000e033:	5e                   	pop    esi
c000e034:	c3                   	ret    

c000e035 <KeCalculateCRC32(unsigned char*, int)>:
c000e035:	53                   	push   ebx
c000e036:	83 c8 ff             	or     eax,0xffffffff
c000e039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e03d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e041:	01 cb                	add    ebx,ecx
c000e043:	39 d9                	cmp    ecx,ebx
c000e045:	74 15                	je     c000e05c <KeCalculateCRC32(unsigned char*, int)+0x27>
c000e047:	41                   	inc    ecx
c000e048:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000e04b:	31 c2                	xor    edx,eax
c000e04d:	c1 e8 08             	shr    eax,0x8
c000e050:	0f b6 d2             	movzx  edx,dl
c000e053:	33 04 95 60 6a 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffd95a0]
c000e05a:	eb e7                	jmp    c000e043 <KeCalculateCRC32(unsigned char*, int)+0xe>
c000e05c:	f7 d0                	not    eax
c000e05e:	5b                   	pop    ebx
c000e05f:	c3                   	ret    

c000e060 <EnvVarContainer::getEnv(char const*)>:
c000e060:	57                   	push   edi
c000e061:	56                   	push   esi
c000e062:	53                   	push   ebx
c000e063:	31 db                	xor    ebx,ebx
c000e065:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e069:	39 1e                	cmp    DWORD PTR [esi],ebx
c000e06b:	7e 2b                	jle    c000e098 <EnvVarContainer::getEnv(char const*)+0x38>
c000e06d:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000e074:	50                   	push   eax
c000e075:	50                   	push   eax
c000e076:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e079:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000e07c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e080:	e8 cb 26 ff ff       	call   c0000750 <strcmp>
c000e085:	83 c4 10             	add    esp,0x10
c000e088:	85 c0                	test   eax,eax
c000e08a:	75 09                	jne    c000e095 <EnvVarContainer::getEnv(char const*)+0x35>
c000e08c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e08f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000e093:	eb 05                	jmp    c000e09a <EnvVarContainer::getEnv(char const*)+0x3a>
c000e095:	43                   	inc    ebx
c000e096:	eb d1                	jmp    c000e069 <EnvVarContainer::getEnv(char const*)+0x9>
c000e098:	31 c0                	xor    eax,eax
c000e09a:	5b                   	pop    ebx
c000e09b:	5e                   	pop    esi
c000e09c:	5f                   	pop    edi
c000e09d:	c3                   	ret    

c000e09e <EnvVarContainer::setEnv(char const*, char const*)>:
c000e09e:	55                   	push   ebp
c000e09f:	57                   	push   edi
c000e0a0:	56                   	push   esi
c000e0a1:	53                   	push   ebx
c000e0a2:	83 ec 28             	sub    esp,0x28
c000e0a5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e0a9:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e0ad:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e0b1:	56                   	push   esi
c000e0b2:	e8 b9 24 ff ff       	call   c0000570 <strlen>
c000e0b7:	40                   	inc    eax
c000e0b8:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0bb:	e8 a3 16 00 00       	call   c000f763 <malloc>
c000e0c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e0c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0c7:	e8 a4 24 ff ff       	call   c0000570 <strlen>
c000e0cc:	40                   	inc    eax
c000e0cd:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0d0:	e8 8e 16 00 00       	call   c000f763 <malloc>
c000e0d5:	89 34 24             	mov    DWORD PTR [esp],esi
c000e0d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e0dc:	e8 8f 24 ff ff       	call   c0000570 <strlen>
c000e0e1:	83 c4 0c             	add    esp,0xc
c000e0e4:	40                   	inc    eax
c000e0e5:	50                   	push   eax
c000e0e6:	6a 00                	push   0x0
c000e0e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0ec:	e8 ff 23 ff ff       	call   c00004f0 <memset>
c000e0f1:	89 34 24             	mov    DWORD PTR [esp],esi
c000e0f4:	e8 77 24 ff ff       	call   c0000570 <strlen>
c000e0f9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e0fd:	8d 48 01             	lea    ecx,[eax+0x1]
c000e100:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e102:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e105:	89 de                	mov    esi,ebx
c000e107:	e8 64 24 ff ff       	call   c0000570 <strlen>
c000e10c:	83 c4 0c             	add    esp,0xc
c000e10f:	40                   	inc    eax
c000e110:	50                   	push   eax
c000e111:	6a 00                	push   0x0
c000e113:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e117:	e8 d4 23 ff ff       	call   c00004f0 <memset>
c000e11c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e11f:	e8 4c 24 ff ff       	call   c0000570 <strlen>
c000e124:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e128:	8d 48 01             	lea    ecx,[eax+0x1]
c000e12b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e12d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e130:	40                   	inc    eax
c000e131:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e134:	c1 e0 03             	shl    eax,0x3
c000e137:	5a                   	pop    edx
c000e138:	59                   	pop    ecx
c000e139:	50                   	push   eax
c000e13a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000e13d:	e8 0d 16 00 00       	call   c000f74f <realloc>
c000e142:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e146:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e149:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e14c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e150:	b9 08 00 00 00       	mov    ecx,0x8
c000e155:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e157:	83 c4 2c             	add    esp,0x2c
c000e15a:	5b                   	pop    ebx
c000e15b:	5e                   	pop    esi
c000e15c:	5f                   	pop    edi
c000e15d:	5d                   	pop    ebp
c000e15e:	c3                   	ret    
c000e15f:	90                   	nop

c000e160 <EnvVarContainer::deleteEnv(char const*)>:
c000e160:	c3                   	ret    
c000e161:	90                   	nop

c000e162 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000e162:	55                   	push   ebp
c000e163:	57                   	push   edi
c000e164:	56                   	push   esi
c000e165:	53                   	push   ebx
c000e166:	81 ec 38 01 00 00    	sub    esp,0x138
c000e16c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000e173:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000e17a:	68 14 01 00 00       	push   0x114
c000e17f:	e8 df 15 00 00       	call   c000f763 <malloc>
c000e184:	83 c4 0c             	add    esp,0xc
c000e187:	89 c3                	mov    ebx,eax
c000e189:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e18c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e193:	50                   	push   eax
c000e194:	e8 f1 9f ff ff       	call   c000818a <File::File(char const*, Process*)>
c000e199:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e19c:	e8 cb a2 ff ff       	call   c000846c <File::exists()>
c000e1a1:	83 c4 10             	add    esp,0x10
c000e1a4:	84 c0                	test   al,al
c000e1a6:	75 31                	jne    c000e1d9 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000e1a8:	50                   	push   eax
c000e1a9:	50                   	push   eax
c000e1aa:	6a 12                	push   0x12
c000e1ac:	53                   	push   ebx
c000e1ad:	e8 f6 9f ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000e1b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e1b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000e1b7:	89 34 24             	mov    DWORD PTR [esp],esi
c000e1ba:	e8 b1 23 ff ff       	call   c0000570 <strlen>
c000e1bf:	5a                   	pop    edx
c000e1c0:	31 d2                	xor    edx,edx
c000e1c2:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000e1c6:	51                   	push   ecx
c000e1c7:	56                   	push   esi
c000e1c8:	52                   	push   edx
c000e1c9:	50                   	push   eax
c000e1ca:	53                   	push   ebx
c000e1cb:	ff d7                	call   edi
c000e1cd:	83 c4 14             	add    esp,0x14
c000e1d0:	53                   	push   ebx
c000e1d1:	e8 30 a0 ff ff       	call   c0008206 <File::close()>
c000e1d6:	83 c4 10             	add    esp,0x10
c000e1d9:	56                   	push   esi
c000e1da:	31 f6                	xor    esi,esi
c000e1dc:	68 00 01 00 00       	push   0x100
c000e1e1:	6a 00                	push   0x0
c000e1e3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e1e7:	50                   	push   eax
c000e1e8:	e8 03 23 ff ff       	call   c00004f0 <memset>
c000e1ed:	5f                   	pop    edi
c000e1ee:	58                   	pop    eax
c000e1ef:	6a 01                	push   0x1
c000e1f1:	53                   	push   ebx
c000e1f2:	e8 b1 9f ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000e1f7:	83 c4 10             	add    esp,0x10
c000e1fa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e202:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e20a:	83 ec 0c             	sub    esp,0xc
c000e20d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e20f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000e213:	51                   	push   ecx
c000e214:	8d 54 24 23          	lea    edx,[esp+0x23]
c000e218:	52                   	push   edx
c000e219:	6a 00                	push   0x0
c000e21b:	6a 01                	push   0x1
c000e21d:	53                   	push   ebx
c000e21e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e221:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000e226:	83 c4 20             	add    esp,0x20
c000e229:	89 c2                	mov    edx,eax
c000e22b:	85 c0                	test   eax,eax
c000e22d:	0f 84 36 01 00 00    	je     c000e369 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000e233:	83 f8 0d             	cmp    eax,0xd
c000e236:	0f 84 22 01 00 00    	je     c000e35e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e23c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e241:	0f 84 f0 00 00 00    	je     c000e337 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000e247:	83 f8 0a             	cmp    eax,0xa
c000e24a:	74 13                	je     c000e25f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e24c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e251:	74 0c                	je     c000e25f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e253:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e259:	0f 8e f6 00 00 00    	jle    c000e355 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000e25f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e263:	83 ec 0c             	sub    esp,0xc
c000e266:	8d 78 01             	lea    edi,[eax+0x1]
c000e269:	57                   	push   edi
c000e26a:	e8 f4 14 00 00       	call   c000f763 <malloc>
c000e26f:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000e273:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e277:	8d 56 04             	lea    edx,[esi+0x4]
c000e27a:	89 14 24             	mov    DWORD PTR [esp],edx
c000e27d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e281:	e8 dd 14 00 00       	call   c000f763 <malloc>
c000e286:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e28a:	83 c4 0c             	add    esp,0xc
c000e28d:	57                   	push   edi
c000e28e:	6a 00                	push   0x0
c000e290:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e294:	e8 57 22 ff ff       	call   c00004f0 <memset>
c000e299:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e29d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000e2a1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e2a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e2a7:	83 c4 0c             	add    esp,0xc
c000e2aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e2ae:	52                   	push   edx
c000e2af:	6a 00                	push   0x0
c000e2b1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e2b5:	e8 36 22 ff ff       	call   c00004f0 <memset>
c000e2ba:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e2be:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000e2c2:	89 34 24             	mov    DWORD PTR [esp],esi
c000e2c5:	e8 a6 22 ff ff       	call   c0000570 <strlen>
c000e2ca:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000e2ce:	89 c1                	mov    ecx,eax
c000e2d0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e2d2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e2d5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000e2d8:	40                   	inc    eax
c000e2d9:	83 c4 10             	add    esp,0x10
c000e2dc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e2df:	85 d2                	test   edx,edx
c000e2e1:	75 0c                	jne    c000e2ef <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000e2e3:	83 ec 0c             	sub    esp,0xc
c000e2e6:	6a 08                	push   0x8
c000e2e8:	e8 76 14 00 00       	call   c000f763 <malloc>
c000e2ed:	eb 0c                	jmp    c000e2fb <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000e2ef:	c1 e0 03             	shl    eax,0x3
c000e2f2:	51                   	push   ecx
c000e2f3:	51                   	push   ecx
c000e2f4:	50                   	push   eax
c000e2f5:	52                   	push   edx
c000e2f6:	e8 54 14 00 00       	call   c000f74f <realloc>
c000e2fb:	83 c4 10             	add    esp,0x10
c000e2fe:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e301:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e304:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000e307:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e30b:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e30f:	b9 08 00 00 00       	mov    ecx,0x8
c000e314:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e316:	31 f6                	xor    esi,esi
c000e318:	50                   	push   eax
c000e319:	68 00 01 00 00       	push   0x100
c000e31e:	6a 00                	push   0x0
c000e320:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e324:	50                   	push   eax
c000e325:	e8 c6 21 ff ff       	call   c00004f0 <memset>
c000e32a:	83 c4 10             	add    esp,0x10
c000e32d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e335:	eb 27                	jmp    c000e35e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e337:	83 f8 3d             	cmp    eax,0x3d
c000e33a:	74 1e                	je     c000e35a <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000e33c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e342:	7f 07                	jg     c000e34b <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000e344:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c000e348:	46                   	inc    esi
c000e349:	eb 13                	jmp    c000e35e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e34b:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000e353:	eb 09                	jmp    c000e35e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e355:	83 f8 3d             	cmp    eax,0x3d
c000e358:	75 ea                	jne    c000e344 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000e35a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000e35e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e363:	0f 85 99 fe ff ff    	jne    c000e202 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000e369:	83 ec 0c             	sub    esp,0xc
c000e36c:	53                   	push   ebx
c000e36d:	e8 94 9e ff ff       	call   c0008206 <File::close()>
c000e372:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e374:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e377:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e37a:	81 c4 3c 01 00 00    	add    esp,0x13c
c000e380:	5b                   	pop    ebx
c000e381:	5e                   	pop    esi
c000e382:	5f                   	pop    edi
c000e383:	5d                   	pop    ebp
c000e384:	c3                   	ret    
c000e385:	90                   	nop

c000e386 <EnvVarContainer::__loadSystem()>:
c000e386:	83 ec 10             	sub    esp,0x10
c000e389:	68 60 6e 02 c0       	push   0xc0026e60
c000e38e:	68 28 46 02 c0       	push   0xc0024628
c000e393:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e397:	e8 c6 fd ff ff       	call   c000e162 <EnvVarContainer::loadFrom(char const*, char const*)>
c000e39c:	83 c4 1c             	add    esp,0x1c
c000e39f:	c3                   	ret    

c000e3a0 <EnvVarContainer::__loadUser()>:
c000e3a0:	c3                   	ret    
c000e3a1:	90                   	nop

c000e3a2 <EnvVarContainer::EnvVarContainer(Process*)>:
c000e3a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e3ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e3b4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e3b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3bb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e3c2:	90                   	nop
c000e3c3:	c3                   	ret    

c000e3c4 <EnvVarContainer::~EnvVarContainer()>:
c000e3c4:	83 ec 0c             	sub    esp,0xc
c000e3c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3cb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e3ce:	85 c0                	test   eax,eax
c000e3d0:	74 1d                	je     c000e3ef <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e3d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3d6:	8b 00                	mov    eax,DWORD PTR [eax]
c000e3d8:	85 c0                	test   eax,eax
c000e3da:	74 13                	je     c000e3ef <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e3e3:	83 ec 0c             	sub    esp,0xc
c000e3e6:	50                   	push   eax
c000e3e7:	e8 87 13 00 00       	call   c000f773 <free>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	90                   	nop
c000e3f0:	83 c4 0c             	add    esp,0xc
c000e3f3:	c3                   	ret    

c000e3f4 <KeGetEnv(Process*, char const*)>:
c000e3f4:	53                   	push   ebx
c000e3f5:	83 ec 08             	sub    esp,0x8
c000e3f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3fc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e400:	39 05 98 da 02 c0    	cmp    DWORD PTR ds:0xc002da98,eax
c000e406:	74 04                	je     c000e40c <KeGetEnv(Process*, char const*)+0x18>
c000e408:	85 c0                	test   eax,eax
c000e40a:	75 0b                	jne    c000e417 <KeGetEnv(Process*, char const*)+0x23>
c000e40c:	a1 10 d1 02 c0       	mov    eax,ds:0xc002d110
c000e411:	85 c0                	test   eax,eax
c000e413:	75 19                	jne    c000e42e <KeGetEnv(Process*, char const*)+0x3a>
c000e415:	eb 27                	jmp    c000e43e <KeGetEnv(Process*, char const*)+0x4a>
c000e417:	52                   	push   edx
c000e418:	52                   	push   edx
c000e419:	53                   	push   ebx
c000e41a:	ff b0 ba 07 00 00    	push   DWORD PTR [eax+0x7ba]
c000e420:	e8 3b fc ff ff       	call   c000e060 <EnvVarContainer::getEnv(char const*)>
c000e425:	83 c4 10             	add    esp,0x10
c000e428:	85 c0                	test   eax,eax
c000e42a:	75 28                	jne    c000e454 <KeGetEnv(Process*, char const*)+0x60>
c000e42c:	eb de                	jmp    c000e40c <KeGetEnv(Process*, char const*)+0x18>
c000e42e:	52                   	push   edx
c000e42f:	52                   	push   edx
c000e430:	53                   	push   ebx
c000e431:	50                   	push   eax
c000e432:	e8 29 fc ff ff       	call   c000e060 <EnvVarContainer::getEnv(char const*)>
c000e437:	83 c4 10             	add    esp,0x10
c000e43a:	85 c0                	test   eax,eax
c000e43c:	75 16                	jne    c000e454 <KeGetEnv(Process*, char const*)+0x60>
c000e43e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000e442:	a1 14 d1 02 c0       	mov    eax,ds:0xc002d114
c000e447:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e44b:	83 c4 08             	add    esp,0x8
c000e44e:	5b                   	pop    ebx
c000e44f:	e9 0c fc ff ff       	jmp    c000e060 <EnvVarContainer::getEnv(char const*)>
c000e454:	83 c4 08             	add    esp,0x8
c000e457:	5b                   	pop    ebx
c000e458:	c3                   	ret    

c000e459 <KeSetEnvSystem(char const*, char const*)>:
c000e459:	83 ec 10             	sub    esp,0x10
c000e45c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e460:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e464:	ff 35 14 d1 02 c0    	push   DWORD PTR ds:0xc002d114
c000e46a:	e8 2f fc ff ff       	call   c000e09e <EnvVarContainer::setEnv(char const*, char const*)>
c000e46f:	83 c4 1c             	add    esp,0x1c
c000e472:	c3                   	ret    

c000e473 <KeSetEnvUser(char const*, char const*)>:
c000e473:	a1 10 d1 02 c0       	mov    eax,ds:0xc002d110
c000e478:	85 c0                	test   eax,eax
c000e47a:	74 15                	je     c000e491 <KeSetEnvUser(char const*, char const*)+0x1e>
c000e47c:	83 ec 10             	sub    esp,0x10
c000e47f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e483:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e487:	50                   	push   eax
c000e488:	e8 11 fc ff ff       	call   c000e09e <EnvVarContainer::setEnv(char const*, char const*)>
c000e48d:	83 c4 1c             	add    esp,0x1c
c000e490:	c3                   	ret    
c000e491:	c3                   	ret    

c000e492 <KeSetEnvProcess(Process*, char const*, char const*)>:
c000e492:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e496:	8b 80 ba 07 00 00    	mov    eax,DWORD PTR [eax+0x7ba]
c000e49c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e4a0:	e9 f9 fb ff ff       	jmp    c000e09e <EnvVarContainer::setEnv(char const*, char const*)>

c000e4a5 <KeDeleteEnvSystem(char const*)>:
c000e4a5:	c3                   	ret    

c000e4a6 <KeDeleteEnvUser(char const*)>:
c000e4a6:	c3                   	ret    

c000e4a7 <KeDeleteEnvProcess(Process*, char const*)>:
c000e4a7:	c3                   	ret    

c000e4a8 <KeNewProcessEnv(Process*)>:
c000e4a8:	83 ec 28             	sub    esp,0x28
c000e4ab:	6a 0c                	push   0xc
c000e4ad:	e8 b1 12 00 00       	call   c000f763 <malloc>
c000e4b2:	5a                   	pop    edx
c000e4b3:	59                   	pop    ecx
c000e4b4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e4b8:	50                   	push   eax
c000e4b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e4bd:	e8 e0 fe ff ff       	call   c000e3a2 <EnvVarContainer::EnvVarContainer(Process*)>
c000e4c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e4c6:	83 c4 2c             	add    esp,0x2c
c000e4c9:	c3                   	ret    

c000e4ca <KeCopyProcessEnv(Process*, Process*)>:
c000e4ca:	57                   	push   edi
c000e4cb:	56                   	push   esi
c000e4cc:	53                   	push   ebx
c000e4cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4d1:	83 ec 0c             	sub    esp,0xc
c000e4d4:	8b b8 ba 07 00 00    	mov    edi,DWORD PTR [eax+0x7ba]
c000e4da:	6a 0c                	push   0xc
c000e4dc:	e8 82 12 00 00       	call   c000f763 <malloc>
c000e4e1:	89 c3                	mov    ebx,eax
c000e4e3:	58                   	pop    eax
c000e4e4:	5a                   	pop    edx
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	53                   	push   ebx
c000e4ea:	e8 b3 fe ff ff       	call   c000e3a2 <EnvVarContainer::EnvVarContainer(Process*)>
c000e4ef:	8b 07                	mov    eax,DWORD PTR [edi]
c000e4f1:	89 03                	mov    DWORD PTR [ebx],eax
c000e4f3:	c1 e0 03             	shl    eax,0x3
c000e4f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4f9:	e8 65 12 00 00       	call   c000f763 <malloc>
c000e4fe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e501:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e503:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000e506:	c1 e1 03             	shl    ecx,0x3
c000e509:	89 c7                	mov    edi,eax
c000e50b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e50d:	83 c4 10             	add    esp,0x10
c000e510:	89 d8                	mov    eax,ebx
c000e512:	5b                   	pop    ebx
c000e513:	5e                   	pop    esi
c000e514:	5f                   	pop    edi
c000e515:	c3                   	ret    

c000e516 <KeLoadSystemEnv()>:
c000e516:	53                   	push   ebx
c000e517:	83 ec 14             	sub    esp,0x14
c000e51a:	6a 0c                	push   0xc
c000e51c:	e8 42 12 00 00       	call   c000f763 <malloc>
c000e521:	89 c3                	mov    ebx,eax
c000e523:	58                   	pop    eax
c000e524:	5a                   	pop    edx
c000e525:	ff 35 98 da 02 c0    	push   DWORD PTR ds:0xc002da98
c000e52b:	53                   	push   ebx
c000e52c:	e8 71 fe ff ff       	call   c000e3a2 <EnvVarContainer::EnvVarContainer(Process*)>
c000e531:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e534:	89 1d 14 d1 02 c0    	mov    DWORD PTR ds:0xc002d114,ebx
c000e53a:	e8 47 fe ff ff       	call   c000e386 <EnvVarContainer::__loadSystem()>
c000e53f:	83 c4 18             	add    esp,0x18
c000e542:	5b                   	pop    ebx
c000e543:	c3                   	ret    

c000e544 <KeLoadUserEnv()>:
c000e544:	53                   	push   ebx
c000e545:	83 ec 14             	sub    esp,0x14
c000e548:	6a 0c                	push   0xc
c000e54a:	e8 14 12 00 00       	call   c000f763 <malloc>
c000e54f:	89 c3                	mov    ebx,eax
c000e551:	58                   	pop    eax
c000e552:	5a                   	pop    edx
c000e553:	ff 35 98 da 02 c0    	push   DWORD PTR ds:0xc002da98
c000e559:	53                   	push   ebx
c000e55a:	e8 43 fe ff ff       	call   c000e3a2 <EnvVarContainer::EnvVarContainer(Process*)>
c000e55f:	89 1d 10 d1 02 c0    	mov    DWORD PTR ds:0xc002d110,ebx
c000e565:	83 c4 18             	add    esp,0x18
c000e568:	5b                   	pop    ebx
c000e569:	c3                   	ret    

c000e56a <KeFlushEnv()>:
c000e56a:	c3                   	ret    

c000e56b <KeGetProcessTotalEnvCount(Process*)>:
c000e56b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e56f:	8b 15 10 d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d110
c000e575:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e57b:	a1 14 d1 02 c0       	mov    eax,ds:0xc002d114
c000e580:	8b 00                	mov    eax,DWORD PTR [eax]
c000e582:	03 01                	add    eax,DWORD PTR [ecx]
c000e584:	85 d2                	test   edx,edx
c000e586:	74 02                	je     c000e58a <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000e588:	03 02                	add    eax,DWORD PTR [edx]
c000e58a:	c3                   	ret    

c000e58b <KeGetProcessEnvPair(Process*, int)>:
c000e58b:	57                   	push   edi
c000e58c:	56                   	push   esi
c000e58d:	8b 35 10 d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d110
c000e593:	53                   	push   ebx
c000e594:	85 f6                	test   esi,esi
c000e596:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e59a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e59e:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e5a4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e5a8:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e5aa:	75 16                	jne    c000e5c2 <KeGetProcessEnvPair(Process*, int)+0x37>
c000e5ac:	39 c2                	cmp    edx,eax
c000e5ae:	7c 16                	jl     c000e5c6 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e5b0:	8b 0d 14 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d114
c000e5b6:	8b 31                	mov    esi,DWORD PTR [ecx]
c000e5b8:	01 c6                	add    esi,eax
c000e5ba:	39 d6                	cmp    esi,edx
c000e5bc:	7e 3c                	jle    c000e5fa <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e5be:	29 c2                	sub    edx,eax
c000e5c0:	eb 04                	jmp    c000e5c6 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e5c2:	39 c2                	cmp    edx,eax
c000e5c4:	7d 05                	jge    c000e5cb <KeGetProcessEnvPair(Process*, int)+0x40>
c000e5c6:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000e5c9:	eb 20                	jmp    c000e5eb <KeGetProcessEnvPair(Process*, int)+0x60>
c000e5cb:	8b 3e                	mov    edi,DWORD PTR [esi]
c000e5cd:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000e5d0:	39 d1                	cmp    ecx,edx
c000e5d2:	7e 04                	jle    c000e5d8 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000e5d4:	29 c2                	sub    edx,eax
c000e5d6:	eb 10                	jmp    c000e5e8 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000e5d8:	8b 35 14 d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d114
c000e5de:	03 0e                	add    ecx,DWORD PTR [esi]
c000e5e0:	39 d1                	cmp    ecx,edx
c000e5e2:	7e 16                	jle    c000e5fa <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e5e4:	29 c2                	sub    edx,eax
c000e5e6:	29 fa                	sub    edx,edi
c000e5e8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e5eb:	8d 14 d0             	lea    edx,[eax+edx*8]
c000e5ee:	8b 02                	mov    eax,DWORD PTR [edx]
c000e5f0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e5f3:	89 03                	mov    DWORD PTR [ebx],eax
c000e5f5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000e5f8:	eb 1d                	jmp    c000e617 <KeGetProcessEnvPair(Process*, int)+0x8c>
c000e5fa:	83 ec 0c             	sub    esp,0xc
c000e5fd:	68 4a 46 02 c0       	push   0xc002464a
c000e602:	e8 b9 15 00 00       	call   c000fbc0 <KePanic(char const*)>
c000e607:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000e60d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000e614:	83 c4 10             	add    esp,0x10
c000e617:	89 d8                	mov    eax,ebx
c000e619:	5b                   	pop    ebx
c000e61a:	5e                   	pop    esi
c000e61b:	5f                   	pop    edi
c000e61c:	c2 04 00             	ret    0x4
c000e61f:	90                   	nop

c000e620 <KeDisplayProgramFault(char const*)>:
c000e620:	83 ec 0c             	sub    esp,0xc
c000e623:	83 ec 0c             	sub    esp,0xc
c000e626:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62a:	e8 4d 89 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000e62f:	83 c4 10             	add    esp,0x10
c000e632:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e637:	8b 00                	mov    eax,DWORD PTR [eax]
c000e639:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e63c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000e642:	85 c0                	test   eax,eax
c000e644:	74 22                	je     c000e668 <KeDisplayProgramFault(char const*)+0x48>
c000e646:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e64b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e64d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e650:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000e656:	6a 04                	push   0x4
c000e658:	6a 0f                	push   0xf
c000e65a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e65e:	50                   	push   eax
c000e65f:	e8 d6 3f 00 00       	call   c001263a <VgaText::puts(char const*, VgaColour, VgaColour)>
c000e664:	83 c4 10             	add    esp,0x10
c000e667:	90                   	nop
c000e668:	90                   	nop
c000e669:	83 c4 0c             	add    esp,0xc
c000e66c:	c3                   	ret    
c000e66d:	8d 76 00             	lea    esi,[esi+0x0]

c000e670 <KeGeneralProtectionFault(void*, void*)>:
c000e670:	83 ec 0c             	sub    esp,0xc
c000e673:	83 ec 08             	sub    esp,0x8
c000e676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e67a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e67e:	e8 dd bc 00 00       	call   c001a360 <HalHandleGeneralProtectionFault(void*, void*)>
c000e683:	83 c4 10             	add    esp,0x10
c000e686:	0f b6 c0             	movzx  eax,al
c000e689:	85 c0                	test   eax,eax
c000e68b:	75 2f                	jne    c000e6bc <KeGeneralProtectionFault(void*, void*)+0x4c>
c000e68d:	83 ec 0c             	sub    esp,0xc
c000e690:	68 64 46 02 c0       	push   0xc0024664
c000e695:	e8 86 ff ff ff       	call   c000e620 <KeDisplayProgramFault(char const*)>
c000e69a:	83 c4 10             	add    esp,0x10
c000e69d:	83 ec 0c             	sub    esp,0xc
c000e6a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6a4:	e8 1b be 00 00       	call   c001a4c4 <HalDisplayDebugInfo(void*)>
c000e6a9:	83 c4 10             	add    esp,0x10
c000e6ac:	83 ec 0c             	sub    esp,0xc
c000e6af:	6a 7e                	push   0x7e
c000e6b1:	e8 6e 96 00 00       	call   c0017d24 <KeTerminateCurrentThread(int)>
c000e6b6:	83 c4 10             	add    esp,0x10
c000e6b9:	eb 05                	jmp    c000e6c0 <KeGeneralProtectionFault(void*, void*)+0x50>
c000e6bb:	90                   	nop
c000e6bc:	90                   	nop
c000e6bd:	8d 76 00             	lea    esi,[esi+0x0]
c000e6c0:	83 c4 0c             	add    esp,0xc
c000e6c3:	c3                   	ret    

c000e6c4 <KePageFault(void*, void*)>:
c000e6c4:	83 ec 0c             	sub    esp,0xc
c000e6c7:	83 ec 08             	sub    esp,0x8
c000e6ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6d2:	e8 7c bd 00 00       	call   c001a453 <HalHandlePageFault(void*, void*)>
c000e6d7:	83 c4 10             	add    esp,0x10
c000e6da:	0f b6 c0             	movzx  eax,al
c000e6dd:	85 c0                	test   eax,eax
c000e6df:	75 2f                	jne    c000e710 <KePageFault(void*, void*)+0x4c>
c000e6e1:	83 ec 0c             	sub    esp,0xc
c000e6e4:	68 7d 46 02 c0       	push   0xc002467d
c000e6e9:	e8 32 ff ff ff       	call   c000e620 <KeDisplayProgramFault(char const*)>
c000e6ee:	83 c4 10             	add    esp,0x10
c000e6f1:	83 ec 0c             	sub    esp,0xc
c000e6f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6f8:	e8 c7 bd 00 00       	call   c001a4c4 <HalDisplayDebugInfo(void*)>
c000e6fd:	83 c4 10             	add    esp,0x10
c000e700:	83 ec 0c             	sub    esp,0xc
c000e703:	6a 7f                	push   0x7f
c000e705:	e8 1a 96 00 00       	call   c0017d24 <KeTerminateCurrentThread(int)>
c000e70a:	83 c4 10             	add    esp,0x10
c000e70d:	eb 05                	jmp    c000e714 <KePageFault(void*, void*)+0x50>
c000e70f:	90                   	nop
c000e710:	90                   	nop
c000e711:	8d 76 00             	lea    esi,[esi+0x0]
c000e714:	83 c4 0c             	add    esp,0xc
c000e717:	c3                   	ret    

c000e718 <KeOpcodeFault(void*, void*)>:
c000e718:	83 ec 0c             	sub    esp,0xc
c000e71b:	83 ec 08             	sub    esp,0x8
c000e71e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e722:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e726:	e8 57 bd 00 00       	call   c001a482 <HalHandleOpcodeFault(void*, void*)>
c000e72b:	83 c4 10             	add    esp,0x10
c000e72e:	0f b6 c0             	movzx  eax,al
c000e731:	85 c0                	test   eax,eax
c000e733:	75 2f                	jne    c000e764 <KeOpcodeFault(void*, void*)+0x4c>
c000e735:	83 ec 0c             	sub    esp,0xc
c000e738:	68 88 46 02 c0       	push   0xc0024688
c000e73d:	e8 de fe ff ff       	call   c000e620 <KeDisplayProgramFault(char const*)>
c000e742:	83 c4 10             	add    esp,0x10
c000e745:	83 ec 0c             	sub    esp,0xc
c000e748:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e74c:	e8 73 bd 00 00       	call   c001a4c4 <HalDisplayDebugInfo(void*)>
c000e751:	83 c4 10             	add    esp,0x10
c000e754:	83 ec 0c             	sub    esp,0xc
c000e757:	6a 7c                	push   0x7c
c000e759:	e8 c6 95 00 00       	call   c0017d24 <KeTerminateCurrentThread(int)>
c000e75e:	83 c4 10             	add    esp,0x10
c000e761:	eb 05                	jmp    c000e768 <KeOpcodeFault(void*, void*)+0x50>
c000e763:	90                   	nop
c000e764:	90                   	nop
c000e765:	8d 76 00             	lea    esi,[esi+0x0]
c000e768:	83 c4 0c             	add    esp,0xc
c000e76b:	c3                   	ret    

c000e76c <KeOtherFault(void*, void*)>:
c000e76c:	83 ec 0c             	sub    esp,0xc
c000e76f:	83 ec 0c             	sub    esp,0xc
c000e772:	68 a4 46 02 c0       	push   0xc00246a4
c000e777:	e8 a4 fe ff ff       	call   c000e620 <KeDisplayProgramFault(char const*)>
c000e77c:	83 c4 10             	add    esp,0x10
c000e77f:	83 ec 0c             	sub    esp,0xc
c000e782:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e786:	e8 39 bd 00 00       	call   c001a4c4 <HalDisplayDebugInfo(void*)>
c000e78b:	83 c4 10             	add    esp,0x10
c000e78e:	83 ec 0c             	sub    esp,0xc
c000e791:	6a 7d                	push   0x7d
c000e793:	e8 8c 95 00 00       	call   c0017d24 <KeTerminateCurrentThread(int)>
c000e798:	83 c4 10             	add    esp,0x10
c000e79b:	90                   	nop
c000e79c:	83 c4 0c             	add    esp,0xc
c000e79f:	c3                   	ret    

c000e7a0 <KeNonMaskableInterrupt(void*, void*)>:
c000e7a0:	83 ec 0c             	sub    esp,0xc
c000e7a3:	e8 aa c0 00 00       	call   c001a852 <HalReceivedNMI()>
c000e7a8:	90                   	nop
c000e7a9:	83 c4 0c             	add    esp,0xc
c000e7ac:	c3                   	ret    
c000e7ad:	8d 76 00             	lea    esi,[esi+0x0]

c000e7b0 <KeDoubleFault(void*, void*)>:
c000e7b0:	83 ec 0c             	sub    esp,0xc
c000e7b3:	83 ec 0c             	sub    esp,0xc
c000e7b6:	68 95 46 02 c0       	push   0xc0024695
c000e7bb:	e8 00 14 00 00       	call   c000fbc0 <KePanic(char const*)>
c000e7c0:	83 c4 10             	add    esp,0x10
c000e7c3:	90                   	nop
c000e7c4:	83 c4 0c             	add    esp,0xc
c000e7c7:	c3                   	ret    

c000e7c8 <GDTEntry::setBase(unsigned int)>:
c000e7c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e7cc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e7d0:	89 c1                	mov    ecx,eax
c000e7d2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e7d6:	c1 e9 10             	shr    ecx,0x10
c000e7d9:	c1 e8 18             	shr    eax,0x18
c000e7dc:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e7df:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e7e2:	c3                   	ret    
c000e7e3:	90                   	nop

c000e7e4 <GDTEntry::setLimit(unsigned int)>:
c000e7e4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e7e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e7ec:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e7ef:	66 89 01             	mov    WORD PTR [ecx],ax
c000e7f2:	83 e2 f0             	and    edx,0xfffffff0
c000e7f5:	c1 e8 10             	shr    eax,0x10
c000e7f8:	83 e0 0f             	and    eax,0xf
c000e7fb:	09 d0                	or     eax,edx
c000e7fd:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e800:	c3                   	ret    
c000e801:	90                   	nop

c000e802 <GDT::GDT()>:
c000e802:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e806:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e80c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e810:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e816:	90                   	nop
c000e817:	c3                   	ret    

c000e818 <GDT::addEntry(GDTEntry)>:
c000e818:	53                   	push   ebx
c000e819:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e81d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e821:	8b 02                	mov    eax,DWORD PTR [edx]
c000e823:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e827:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000e82b:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000e82f:	8d 48 01             	lea    ecx,[eax+0x1]
c000e832:	c1 e0 03             	shl    eax,0x3
c000e835:	89 0a                	mov    DWORD PTR [edx],ecx
c000e837:	5b                   	pop    ebx
c000e838:	c3                   	ret    
c000e839:	90                   	nop

c000e83a <GDT::getNumberOfEntries()>:
c000e83a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e83e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e840:	c3                   	ret    
c000e841:	90                   	nop

c000e842 <GDT::flush()>:
c000e842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e846:	8b 10                	mov    edx,DWORD PTR [eax]
c000e848:	83 c0 04             	add    eax,0x4
c000e84b:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e852:	a3 1a d1 02 c0       	mov    ds:0xc002d11a,eax
c000e857:	66 89 15 18 d1 02 c0 	mov    WORD PTR ds:0xc002d118,dx
c000e85e:	e9 f7 1a ff ff       	jmp    c000035a <loadGDT>
c000e863:	90                   	nop

c000e864 <GDT::setup()>:
c000e864:	57                   	push   edi
c000e865:	56                   	push   esi
c000e866:	53                   	push   ebx
c000e867:	83 ec 30             	sub    esp,0x30
c000e86a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e86e:	6a 00                	push   0x0
c000e870:	8d 74 24 14          	lea    esi,[esp+0x14]
c000e874:	56                   	push   esi
c000e875:	e8 4e ff ff ff       	call   c000e7c8 <GDTEntry::setBase(unsigned int)>
c000e87a:	6a 00                	push   0x0
c000e87c:	56                   	push   esi
c000e87d:	e8 62 ff ff ff       	call   c000e7e4 <GDTEntry::setLimit(unsigned int)>
c000e882:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000e88a:	6a 00                	push   0x0
c000e88c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000e890:	56                   	push   esi
c000e891:	e8 32 ff ff ff       	call   c000e7c8 <GDTEntry::setBase(unsigned int)>
c000e896:	68 ff ff ff 00       	push   0xffffff
c000e89b:	56                   	push   esi
c000e89c:	e8 43 ff ff ff       	call   c000e7e4 <GDTEntry::setLimit(unsigned int)>
c000e8a1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e8a5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e8a9:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e8ad:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000e8b1:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e8b6:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e8bb:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e8bf:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e8c3:	89 f8                	mov    eax,edi
c000e8c5:	89 fa                	mov    edx,edi
c000e8c7:	80 e4 f7             	and    ah,0xf7
c000e8ca:	80 ce 60             	or     dh,0x60
c000e8cd:	89 c7                	mov    edi,eax
c000e8cf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e8d3:	80 cc 60             	or     ah,0x60
c000e8d6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e8da:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e8de:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000e8e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e8e6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e8ea:	83 c4 20             	add    esp,0x20
c000e8ed:	6a 00                	push   0x0
c000e8ef:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e8f3:	50                   	push   eax
c000e8f4:	e8 cf fe ff ff       	call   c000e7c8 <GDTEntry::setBase(unsigned int)>
c000e8f9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000e8fd:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e901:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e905:	83 e0 3f             	and    eax,0x3f
c000e908:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000e90c:	6a 00                	push   0x0
c000e90e:	8d 44 24 34          	lea    eax,[esp+0x34]
c000e912:	50                   	push   eax
c000e913:	e8 b0 fe ff ff       	call   c000e7c8 <GDTEntry::setBase(unsigned int)>
c000e918:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000e91c:	83 e0 3f             	and    eax,0x3f
c000e91f:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000e923:	83 c4 0c             	add    esp,0xc
c000e926:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e92a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e92e:	53                   	push   ebx
c000e92f:	e8 e4 fe ff ff       	call   c000e818 <GDT::addEntry(GDTEntry)>
c000e934:	83 c4 0c             	add    esp,0xc
c000e937:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e93b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e93f:	53                   	push   ebx
c000e940:	e8 d3 fe ff ff       	call   c000e818 <GDT::addEntry(GDTEntry)>
c000e945:	83 c4 0c             	add    esp,0xc
c000e948:	57                   	push   edi
c000e949:	56                   	push   esi
c000e94a:	53                   	push   ebx
c000e94b:	e8 c8 fe ff ff       	call   c000e818 <GDT::addEntry(GDTEntry)>
c000e950:	83 c4 0c             	add    esp,0xc
c000e953:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e957:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e95b:	53                   	push   ebx
c000e95c:	e8 b7 fe ff ff       	call   c000e818 <GDT::addEntry(GDTEntry)>
c000e961:	83 c4 0c             	add    esp,0xc
c000e964:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e968:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e96c:	53                   	push   ebx
c000e96d:	e8 a6 fe ff ff       	call   c000e818 <GDT::addEntry(GDTEntry)>
c000e972:	83 c4 0c             	add    esp,0xc
c000e975:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e979:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e97d:	53                   	push   ebx
c000e97e:	e8 95 fe ff ff       	call   c000e818 <GDT::addEntry(GDTEntry)>
c000e983:	83 c4 0c             	add    esp,0xc
c000e986:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e98a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e98e:	53                   	push   ebx
c000e98f:	e8 84 fe ff ff       	call   c000e818 <GDT::addEntry(GDTEntry)>
c000e994:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e997:	e8 a6 fe ff ff       	call   c000e842 <GDT::flush()>
c000e99c:	83 c4 40             	add    esp,0x40
c000e99f:	5b                   	pop    ebx
c000e9a0:	5e                   	pop    esi
c000e9a1:	5f                   	pop    edi
c000e9a2:	c3                   	ret    

c000e9a3 <idleFunction(void*)>:
c000e9a3:	83 ec 0c             	sub    esp,0xc
c000e9a6:	f0 ff 0d 70 da 02 c0 	lock dec DWORD PTR ds:0xc002da70
c000e9ad:	83 3d 70 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da70,0x0
c000e9b4:	75 01                	jne    c000e9b7 <idleFunction(void*)+0x14>
c000e9b6:	fb                   	sti    
c000e9b7:	e8 31 bf 00 00       	call   c001a8ed <HalSystemIdle()>
c000e9bc:	e8 25 3e 01 00       	call   c00227e6 <idleCommon()>
c000e9c1:	eb f4                	jmp    c000e9b7 <idleFunction(void*)+0x14>
c000e9c3:	90                   	nop

c000e9c4 <IDTEntry::IDTEntry(bool)>:
c000e9c4:	53                   	push   ebx
c000e9c5:	83 ec 04             	sub    esp,0x4
c000e9c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9cc:	88 04 24             	mov    BYTE PTR [esp],al
c000e9cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9d3:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000e9d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9dd:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000e9e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9e5:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e9e8:	83 e2 f0             	and    edx,0xfffffff0
c000e9eb:	83 ca 0e             	or     edx,0xe
c000e9ee:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e9f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9f5:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e9f8:	83 e2 ef             	and    edx,0xffffffef
c000e9fb:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e9fe:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000ea02:	85 c0                	test   eax,eax
c000ea04:	74 06                	je     c000ea0c <IDTEntry::IDTEntry(bool)+0x48>
c000ea06:	b2 03                	mov    dl,0x3
c000ea08:	eb 06                	jmp    c000ea10 <IDTEntry::IDTEntry(bool)+0x4c>
c000ea0a:	66 90                	xchg   ax,ax
c000ea0c:	b2 00                	mov    dl,0x0
c000ea0e:	66 90                	xchg   ax,ax
c000ea10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea14:	83 e2 03             	and    edx,0x3
c000ea17:	89 d3                	mov    ebx,edx
c000ea19:	c1 e3 05             	shl    ebx,0x5
c000ea1c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ea1f:	83 e2 9f             	and    edx,0xffffff9f
c000ea22:	88 d1                	mov    cl,dl
c000ea24:	88 da                	mov    dl,bl
c000ea26:	09 ca                	or     edx,ecx
c000ea28:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ea2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea2f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ea32:	83 ca 80             	or     edx,0xffffff80
c000ea35:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ea38:	90                   	nop
c000ea39:	83 c4 04             	add    esp,0x4
c000ea3c:	5b                   	pop    ebx
c000ea3d:	c3                   	ret    

c000ea3e <IDTEntry::setOffset(unsigned int)>:
c000ea3e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ea42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea46:	66 89 02             	mov    WORD PTR [edx],ax
c000ea49:	c1 e8 10             	shr    eax,0x10
c000ea4c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ea50:	c3                   	ret    
c000ea51:	90                   	nop
c000ea52:	66 90                	xchg   ax,ax

c000ea54 <IDT::IDT()>:
c000ea54:	90                   	nop
c000ea55:	c3                   	ret    

c000ea56 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ea56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ea5a:	83 c0 30             	add    eax,0x30
c000ea5d:	c3                   	ret    

c000ea5e <IDT::addEntry(IDTEntry, int)>:
c000ea5e:	53                   	push   ebx
c000ea5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ea67:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ea6f:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ea72:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ea76:	5b                   	pop    ebx
c000ea77:	c3                   	ret    

c000ea78 <IDT::addEntry(int, void (*)(), bool)>:
c000ea78:	53                   	push   ebx
c000ea79:	83 ec 10             	sub    esp,0x10
c000ea7c:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ea81:	50                   	push   eax
c000ea82:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ea86:	53                   	push   ebx
c000ea87:	e8 38 ff ff ff       	call   c000e9c4 <IDTEntry::IDTEntry(bool)>
c000ea8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ea90:	53                   	push   ebx
c000ea91:	e8 a8 ff ff ff       	call   c000ea3e <IDTEntry::setOffset(unsigned int)>
c000ea96:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ea9a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea9e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eaa2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000eaa6:	e8 b3 ff ff ff       	call   c000ea5e <IDT::addEntry(IDTEntry, int)>
c000eaab:	83 c4 30             	add    esp,0x30
c000eaae:	5b                   	pop    ebx
c000eaaf:	c3                   	ret    

c000eab0 <IDT::flush()>:
c000eab0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eab4:	66 c7 05 20 d1 02 c0 ff 07 	mov    WORD PTR ds:0xc002d120,0x7ff
c000eabd:	a3 22 d1 02 c0       	mov    ds:0xc002d122,eax
c000eac2:	0f 01 1d 20 d1 02 c0 	lidtd  ds:0xc002d120
c000eac9:	c3                   	ret    

c000eaca <IDT::setup()>:
c000eaca:	57                   	push   edi
c000eacb:	56                   	push   esi
c000eacc:	53                   	push   ebx
c000eacd:	83 ec 10             	sub    esp,0x10
c000ead0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ead4:	6a 00                	push   0x0
c000ead6:	68 c0 1a 02 c0       	push   0xc0021ac0
c000eadb:	6a 00                	push   0x0
c000eadd:	53                   	push   ebx
c000eade:	e8 95 ff ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000eae3:	6a 00                	push   0x0
c000eae5:	68 d0 1a 02 c0       	push   0xc0021ad0
c000eaea:	6a 01                	push   0x1
c000eaec:	53                   	push   ebx
c000eaed:	e8 86 ff ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000eaf2:	83 c4 20             	add    esp,0x20
c000eaf5:	6a 00                	push   0x0
c000eaf7:	68 da 1a 02 c0       	push   0xc0021ada
c000eafc:	6a 02                	push   0x2
c000eafe:	53                   	push   ebx
c000eaff:	e8 74 ff ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000eb04:	6a 00                	push   0x0
c000eb06:	68 e4 1a 02 c0       	push   0xc0021ae4
c000eb0b:	6a 03                	push   0x3
c000eb0d:	53                   	push   ebx
c000eb0e:	e8 65 ff ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000eb13:	83 c4 20             	add    esp,0x20
c000eb16:	6a 00                	push   0x0
c000eb18:	68 ee 1a 02 c0       	push   0xc0021aee
c000eb1d:	6a 04                	push   0x4
c000eb1f:	53                   	push   ebx
c000eb20:	e8 53 ff ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000eb25:	6a 00                	push   0x0
c000eb27:	68 f8 1a 02 c0       	push   0xc0021af8
c000eb2c:	6a 05                	push   0x5
c000eb2e:	53                   	push   ebx
c000eb2f:	e8 44 ff ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000eb34:	83 c4 20             	add    esp,0x20
c000eb37:	6a 00                	push   0x0
c000eb39:	68 02 1b 02 c0       	push   0xc0021b02
c000eb3e:	6a 06                	push   0x6
c000eb40:	53                   	push   ebx
c000eb41:	e8 32 ff ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000eb46:	6a 00                	push   0x0
c000eb48:	68 0c 1b 02 c0       	push   0xc0021b0c
c000eb4d:	6a 07                	push   0x7
c000eb4f:	53                   	push   ebx
c000eb50:	e8 23 ff ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000eb55:	83 c4 20             	add    esp,0x20
c000eb58:	6a 00                	push   0x0
c000eb5a:	68 16 1b 02 c0       	push   0xc0021b16
c000eb5f:	6a 08                	push   0x8
c000eb61:	53                   	push   ebx
c000eb62:	e8 11 ff ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000eb67:	6a 00                	push   0x0
c000eb69:	68 1e 1b 02 c0       	push   0xc0021b1e
c000eb6e:	6a 09                	push   0x9
c000eb70:	53                   	push   ebx
c000eb71:	e8 02 ff ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000eb76:	83 c4 20             	add    esp,0x20
c000eb79:	6a 00                	push   0x0
c000eb7b:	68 28 1b 02 c0       	push   0xc0021b28
c000eb80:	6a 0a                	push   0xa
c000eb82:	53                   	push   ebx
c000eb83:	e8 f0 fe ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000eb88:	6a 00                	push   0x0
c000eb8a:	68 30 1b 02 c0       	push   0xc0021b30
c000eb8f:	6a 0b                	push   0xb
c000eb91:	53                   	push   ebx
c000eb92:	e8 e1 fe ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000eb97:	83 c4 20             	add    esp,0x20
c000eb9a:	6a 00                	push   0x0
c000eb9c:	68 38 1b 02 c0       	push   0xc0021b38
c000eba1:	6a 0c                	push   0xc
c000eba3:	53                   	push   ebx
c000eba4:	e8 cf fe ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000eba9:	6a 00                	push   0x0
c000ebab:	68 40 1b 02 c0       	push   0xc0021b40
c000ebb0:	6a 0d                	push   0xd
c000ebb2:	53                   	push   ebx
c000ebb3:	e8 c0 fe ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ebb8:	83 c4 20             	add    esp,0x20
c000ebbb:	6a 00                	push   0x0
c000ebbd:	68 5a 1b 02 c0       	push   0xc0021b5a
c000ebc2:	6a 0e                	push   0xe
c000ebc4:	53                   	push   ebx
c000ebc5:	e8 ae fe ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ebca:	6a 00                	push   0x0
c000ebcc:	68 62 1b 02 c0       	push   0xc0021b62
c000ebd1:	6a 0f                	push   0xf
c000ebd3:	53                   	push   ebx
c000ebd4:	e8 9f fe ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ebd9:	83 c4 20             	add    esp,0x20
c000ebdc:	6a 00                	push   0x0
c000ebde:	68 6c 1b 02 c0       	push   0xc0021b6c
c000ebe3:	6a 10                	push   0x10
c000ebe5:	53                   	push   ebx
c000ebe6:	e8 8d fe ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ebeb:	6a 00                	push   0x0
c000ebed:	68 76 1b 02 c0       	push   0xc0021b76
c000ebf2:	6a 11                	push   0x11
c000ebf4:	53                   	push   ebx
c000ebf5:	e8 7e fe ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ebfa:	83 c4 20             	add    esp,0x20
c000ebfd:	6a 00                	push   0x0
c000ebff:	68 80 1b 02 c0       	push   0xc0021b80
c000ec04:	6a 12                	push   0x12
c000ec06:	53                   	push   ebx
c000ec07:	e8 6c fe ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ec0c:	6a 01                	push   0x1
c000ec0e:	68 1a 1c 02 c0       	push   0xc0021c1a
c000ec13:	6a 60                	push   0x60
c000ec15:	53                   	push   ebx
c000ec16:	e8 5d fe ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ec1b:	83 c4 20             	add    esp,0x20
c000ec1e:	6a 00                	push   0x0
c000ec20:	68 21 1c 02 c0       	push   0xc0021c21
c000ec25:	6a 20                	push   0x20
c000ec27:	53                   	push   ebx
c000ec28:	e8 4b fe ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ec2d:	6a 00                	push   0x0
c000ec2f:	68 0c 1c 02 c0       	push   0xc0021c0c
c000ec34:	6a 21                	push   0x21
c000ec36:	53                   	push   ebx
c000ec37:	e8 3c fe ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ec3c:	83 c4 20             	add    esp,0x20
c000ec3f:	6a 00                	push   0x0
c000ec41:	68 13 1c 02 c0       	push   0xc0021c13
c000ec46:	6a 22                	push   0x22
c000ec48:	53                   	push   ebx
c000ec49:	e8 2a fe ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ec4e:	6a 00                	push   0x0
c000ec50:	68 8a 1b 02 c0       	push   0xc0021b8a
c000ec55:	6a 23                	push   0x23
c000ec57:	53                   	push   ebx
c000ec58:	e8 1b fe ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ec5d:	83 c4 20             	add    esp,0x20
c000ec60:	6a 00                	push   0x0
c000ec62:	68 94 1b 02 c0       	push   0xc0021b94
c000ec67:	6a 24                	push   0x24
c000ec69:	53                   	push   ebx
c000ec6a:	e8 09 fe ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ec6f:	6a 00                	push   0x0
c000ec71:	68 9e 1b 02 c0       	push   0xc0021b9e
c000ec76:	6a 25                	push   0x25
c000ec78:	53                   	push   ebx
c000ec79:	e8 fa fd ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ec7e:	83 c4 20             	add    esp,0x20
c000ec81:	6a 00                	push   0x0
c000ec83:	68 a8 1b 02 c0       	push   0xc0021ba8
c000ec88:	6a 26                	push   0x26
c000ec8a:	53                   	push   ebx
c000ec8b:	e8 e8 fd ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ec90:	6a 00                	push   0x0
c000ec92:	68 b2 1b 02 c0       	push   0xc0021bb2
c000ec97:	6a 27                	push   0x27
c000ec99:	53                   	push   ebx
c000ec9a:	e8 d9 fd ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ec9f:	83 c4 20             	add    esp,0x20
c000eca2:	6a 00                	push   0x0
c000eca4:	68 bc 1b 02 c0       	push   0xc0021bbc
c000eca9:	6a 28                	push   0x28
c000ecab:	53                   	push   ebx
c000ecac:	e8 c7 fd ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ecb1:	6a 00                	push   0x0
c000ecb3:	68 c6 1b 02 c0       	push   0xc0021bc6
c000ecb8:	6a 29                	push   0x29
c000ecba:	53                   	push   ebx
c000ecbb:	e8 b8 fd ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ecc0:	83 c4 20             	add    esp,0x20
c000ecc3:	6a 00                	push   0x0
c000ecc5:	68 d0 1b 02 c0       	push   0xc0021bd0
c000ecca:	6a 2a                	push   0x2a
c000eccc:	53                   	push   ebx
c000eccd:	e8 a6 fd ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ecd2:	6a 00                	push   0x0
c000ecd4:	68 da 1b 02 c0       	push   0xc0021bda
c000ecd9:	6a 2b                	push   0x2b
c000ecdb:	53                   	push   ebx
c000ecdc:	e8 97 fd ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ece1:	83 c4 20             	add    esp,0x20
c000ece4:	6a 00                	push   0x0
c000ece6:	68 e4 1b 02 c0       	push   0xc0021be4
c000eceb:	6a 2c                	push   0x2c
c000eced:	53                   	push   ebx
c000ecee:	e8 85 fd ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ecf3:	6a 00                	push   0x0
c000ecf5:	68 ee 1b 02 c0       	push   0xc0021bee
c000ecfa:	6a 2d                	push   0x2d
c000ecfc:	53                   	push   ebx
c000ecfd:	e8 76 fd ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ed02:	83 c4 20             	add    esp,0x20
c000ed05:	6a 00                	push   0x0
c000ed07:	68 f8 1b 02 c0       	push   0xc0021bf8
c000ed0c:	6a 2e                	push   0x2e
c000ed0e:	53                   	push   ebx
c000ed0f:	e8 64 fd ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ed14:	6a 00                	push   0x0
c000ed16:	68 02 1c 02 c0       	push   0xc0021c02
c000ed1b:	6a 2f                	push   0x2f
c000ed1d:	53                   	push   ebx
c000ed1e:	e8 55 fd ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ed23:	83 c4 20             	add    esp,0x20
c000ed26:	6a 00                	push   0x0
c000ed28:	68 24 1d 02 c0       	push   0xc0021d24
c000ed2d:	6a 30                	push   0x30
c000ed2f:	53                   	push   ebx
c000ed30:	e8 43 fd ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ed35:	6a 00                	push   0x0
c000ed37:	68 2e 1d 02 c0       	push   0xc0021d2e
c000ed3c:	6a 31                	push   0x31
c000ed3e:	53                   	push   ebx
c000ed3f:	e8 34 fd ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ed44:	83 c4 20             	add    esp,0x20
c000ed47:	6a 00                	push   0x0
c000ed49:	68 38 1d 02 c0       	push   0xc0021d38
c000ed4e:	6a 32                	push   0x32
c000ed50:	53                   	push   ebx
c000ed51:	e8 22 fd ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ed56:	6a 00                	push   0x0
c000ed58:	68 42 1d 02 c0       	push   0xc0021d42
c000ed5d:	6a 33                	push   0x33
c000ed5f:	53                   	push   ebx
c000ed60:	e8 13 fd ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ed65:	83 c4 20             	add    esp,0x20
c000ed68:	6a 00                	push   0x0
c000ed6a:	68 4c 1d 02 c0       	push   0xc0021d4c
c000ed6f:	6a 34                	push   0x34
c000ed71:	53                   	push   ebx
c000ed72:	e8 01 fd ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ed77:	6a 00                	push   0x0
c000ed79:	68 56 1d 02 c0       	push   0xc0021d56
c000ed7e:	6a 35                	push   0x35
c000ed80:	53                   	push   ebx
c000ed81:	e8 f2 fc ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ed86:	83 c4 20             	add    esp,0x20
c000ed89:	6a 00                	push   0x0
c000ed8b:	68 60 1d 02 c0       	push   0xc0021d60
c000ed90:	6a 36                	push   0x36
c000ed92:	53                   	push   ebx
c000ed93:	e8 e0 fc ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000ed98:	6a 00                	push   0x0
c000ed9a:	68 6a 1d 02 c0       	push   0xc0021d6a
c000ed9f:	6a 37                	push   0x37
c000eda1:	53                   	push   ebx
c000eda2:	e8 d1 fc ff ff       	call   c000ea78 <IDT::addEntry(int, void (*)(), bool)>
c000eda7:	83 c4 1c             	add    esp,0x1c
c000edaa:	6a 03                	push   0x3
c000edac:	6a 02                	push   0x2
c000edae:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000edb4:	e8 21 4c 00 00       	call   c00139da <VAS::allocatePages(int, int)>
c000edb9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000edc0:	89 c6                	mov    esi,eax
c000edc2:	e8 9c 09 00 00       	call   c000f763 <malloc>
c000edc7:	81 c6 00 20 00 00    	add    esi,0x2000
c000edcd:	89 04 24             	mov    DWORD PTR [esp],eax
c000edd0:	89 c7                	mov    edi,eax
c000edd2:	e8 cd 3c 00 00       	call   c0012aa4 <TSS::TSS()>
c000edd7:	83 c4 0c             	add    esp,0xc
c000edda:	68 16 1b 02 c0       	push   0xc0021b16
c000eddf:	56                   	push   esi
c000ede0:	57                   	push   edi
c000ede1:	e8 02 3d 00 00       	call   c0012ae8 <TSS::setup(unsigned long, unsigned long)>
c000ede6:	89 c6                	mov    esi,eax
c000ede8:	58                   	pop    eax
c000ede9:	5a                   	pop    edx
c000edea:	6a 00                	push   0x0
c000edec:	8d 44 24 14          	lea    eax,[esp+0x14]
c000edf0:	50                   	push   eax
c000edf1:	e8 ce fb ff ff       	call   c000e9c4 <IDTEntry::IDTEntry(bool)>
c000edf6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000edfa:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000edff:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ee06:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ee0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee10:	80 ce 05             	or     dh,0x5
c000ee13:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ee16:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ee1a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ee1e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ee21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee24:	e8 87 fc ff ff       	call   c000eab0 <IDT::flush()>
c000ee29:	83 c4 20             	add    esp,0x20
c000ee2c:	5b                   	pop    ebx
c000ee2d:	5e                   	pop    esi
c000ee2e:	5f                   	pop    edi
c000ee2f:	c3                   	ret    

c000ee30 <CPU::current()>:
c000ee30:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c000ee35:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ee3b:	c3                   	ret    

c000ee3c <operator new(unsigned long)>:
c000ee3c:	e9 22 09 00 00       	jmp    c000f763 <malloc>

c000ee41 <operator delete(void*)>:
c000ee41:	e9 3d 09 00 00       	jmp    c000f783 <rfree>

c000ee46 <disableIRQs()>:
c000ee46:	fa                   	cli    
c000ee47:	c3                   	ret    

c000ee48 <enableIRQs()>:
c000ee48:	fb                   	sti    
c000ee49:	c3                   	ret    

c000ee4a <lockScheduler()>:
c000ee4a:	fa                   	cli    
c000ee4b:	ff 05 70 da 02 c0    	inc    DWORD PTR ds:0xc002da70
c000ee51:	c3                   	ret    

c000ee52 <unlockScheduler()>:
c000ee52:	f0 ff 0d 70 da 02 c0 	lock dec DWORD PTR ds:0xc002da70
c000ee59:	83 3d 70 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da70,0x0
c000ee60:	75 01                	jne    c000ee63 <unlockScheduler()+0x11>
c000ee62:	fb                   	sti    
c000ee63:	c3                   	ret    

c000ee64 <lockStuff()>:
c000ee64:	fa                   	cli    
c000ee65:	ff 05 70 da 02 c0    	inc    DWORD PTR ds:0xc002da70
c000ee6b:	ff 05 6c da 02 c0    	inc    DWORD PTR ds:0xc002da6c
c000ee71:	c3                   	ret    

c000ee72 <unlockStuff()>:
c000ee72:	83 ec 0c             	sub    esp,0xc
c000ee75:	a1 6c da 02 c0       	mov    eax,ds:0xc002da6c
c000ee7a:	48                   	dec    eax
c000ee7b:	a3 6c da 02 c0       	mov    ds:0xc002da6c,eax
c000ee80:	75 18                	jne    c000ee9a <unlockStuff()+0x28>
c000ee82:	83 3d 68 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da68,0x0
c000ee89:	74 0f                	je     c000ee9a <unlockStuff()+0x28>
c000ee8b:	c7 05 68 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da68,0x0
c000ee95:	e8 8a 86 00 00       	call   c0017524 <schedule()>
c000ee9a:	f0 ff 0d 70 da 02 c0 	lock dec DWORD PTR ds:0xc002da70
c000eea1:	83 3d 70 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da70,0x0
c000eea8:	75 01                	jne    c000eeab <unlockStuff()+0x39>
c000eeaa:	fb                   	sti    
c000eeab:	83 c4 0c             	add    esp,0xc
c000eeae:	c3                   	ret    

c000eeaf <Virt::getAKernelVAS()>:
c000eeaf:	a1 90 d2 02 c0       	mov    eax,ds:0xc002d290
c000eeb4:	c3                   	ret    

c000eeb5 <__not_memcpy>:
c000eeb5:	57                   	push   edi
c000eeb6:	56                   	push   esi
c000eeb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eebb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eebf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eec3:	89 c7                	mov    edi,eax
c000eec5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000eec7:	5e                   	pop    esi
c000eec8:	5f                   	pop    edi
c000eec9:	c3                   	ret    

c000eeca <KeFormatDate(char*, int, int, int, int, bool)>:
c000eeca:	55                   	push   ebp
c000eecb:	b9 0a 00 00 00       	mov    ecx,0xa
c000eed0:	57                   	push   edi
c000eed1:	56                   	push   esi
c000eed2:	53                   	push   ebx
c000eed3:	bb e8 03 00 00       	mov    ebx,0x3e8
c000eed8:	81 ec ac 00 00 00    	sub    esp,0xac
c000eede:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000eee5:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000eeea:	99                   	cdq    
c000eeeb:	f7 f9                	idiv   ecx
c000eeed:	89 d5                	mov    ebp,edx
c000eeef:	99                   	cdq    
c000eef0:	f7 f9                	idiv   ecx
c000eef2:	8d 42 30             	lea    eax,[edx+0x30]
c000eef5:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000eef9:	8d 45 30             	lea    eax,[ebp+0x30]
c000eefc:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000ef00:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000ef07:	99                   	cdq    
c000ef08:	f7 fb                	idiv   ebx
c000ef0a:	bb 64 00 00 00       	mov    ebx,0x64
c000ef0f:	99                   	cdq    
c000ef10:	f7 f9                	idiv   ecx
c000ef12:	8d 42 30             	lea    eax,[edx+0x30]
c000ef15:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000ef19:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000ef20:	99                   	cdq    
c000ef21:	f7 fb                	idiv   ebx
c000ef23:	31 db                	xor    ebx,ebx
c000ef25:	99                   	cdq    
c000ef26:	f7 f9                	idiv   ecx
c000ef28:	8d 42 30             	lea    eax,[edx+0x30]
c000ef2b:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000ef2f:	0f b6 84 24 d4 00 00 00 	movzx  eax,BYTE PTR [esp+0xd4]
c000ef37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ef3b:	0f be 8b 44 d1 02 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffd2ebc]
c000ef42:	83 f9 59             	cmp    ecx,0x59
c000ef45:	74 1c                	je     c000ef63 <KeFormatDate(char*, int, int, int, int, bool)+0x99>
c000ef47:	8b ac 24 cc 00 00 00 	mov    ebp,DWORD PTR [esp+0xcc]
c000ef4e:	83 f9 4d             	cmp    ecx,0x4d
c000ef51:	0f 84 e3 00 00 00    	je     c000f03a <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000ef57:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c000ef5e:	e9 d7 00 00 00       	jmp    c000f03a <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000ef63:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000ef68:	74 27                	je     c000ef91 <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000ef6a:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000ef6e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ef73:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000ef77:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ef7b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000ef7f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000ef83:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000ef87:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000ef8b:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000ef8f:	eb 15                	jmp    c000efa6 <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000ef91:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000ef95:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000ef99:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000ef9d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000efa1:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000efa6:	50                   	push   eax
c000efa7:	50                   	push   eax
c000efa8:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000efac:	57                   	push   edi
c000efad:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000efb1:	56                   	push   esi
c000efb2:	e8 89 18 ff ff       	call   c0000840 <strcat>
c000efb7:	83 c4 10             	add    esp,0x10
c000efba:	83 fb 02             	cmp    ebx,0x2
c000efbd:	74 1a                	je     c000efd9 <KeFormatDate(char*, int, int, int, int, bool)+0x10f>
c000efbf:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000efc4:	a1 48 d1 02 c0       	mov    eax,ds:0xc002d148
c000efc9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000efcd:	55                   	push   ebp
c000efce:	55                   	push   ebp
c000efcf:	57                   	push   edi
c000efd0:	56                   	push   esi
c000efd1:	e8 6a 18 ff ff       	call   c0000840 <strcat>
c000efd6:	83 c4 10             	add    esp,0x10
c000efd9:	43                   	inc    ebx
c000efda:	83 fb 03             	cmp    ebx,0x3
c000efdd:	0f 85 58 ff ff ff    	jne    c000ef3b <KeFormatDate(char*, int, int, int, int, bool)+0x71>
c000efe3:	51                   	push   ecx
c000efe4:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000efeb:	6a 00                	push   0x0
c000efed:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000eff4:	e8 f7 14 ff ff       	call   c00004f0 <memset>
c000eff9:	89 34 24             	mov    DWORD PTR [esp],esi
c000effc:	e8 6f 15 ff ff       	call   c0000570 <strlen>
c000f001:	83 c4 10             	add    esp,0x10
c000f004:	40                   	inc    eax
c000f005:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000f00c:	72 17                	jb     c000f025 <KeFormatDate(char*, int, int, int, int, bool)+0x15b>
c000f00e:	52                   	push   edx
c000f00f:	52                   	push   edx
c000f010:	56                   	push   esi
c000f011:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f018:	e8 23 16 ff ff       	call   c0000640 <strcpy>
c000f01d:	83 c4 10             	add    esp,0x10
c000f020:	e9 8a 00 00 00       	jmp    c000f0af <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f025:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000f02c:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000f033:	8d 48 ff             	lea    ecx,[eax-0x1]
c000f036:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f038:	eb 75                	jmp    c000f0af <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f03a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000f03e:	89 ef                	mov    edi,ebp
c000f040:	50                   	push   eax
c000f041:	c1 ff 1f             	sar    edi,0x1f
c000f044:	50                   	push   eax
c000f045:	57                   	push   edi
c000f046:	55                   	push   ebp
c000f047:	e8 70 04 00 00       	call   c000f4bc <KeGetDigitsInNumber(long long)>
c000f04c:	83 c4 10             	add    esp,0x10
c000f04f:	48                   	dec    eax
c000f050:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f054:	75 1c                	jne    c000f072 <KeFormatDate(char*, int, int, int, int, bool)+0x1a8>
c000f056:	83 f9 44             	cmp    ecx,0x44
c000f059:	75 09                	jne    c000f064 <KeFormatDate(char*, int, int, int, int, bool)+0x19a>
c000f05b:	80 3d 60 d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d160,0x0
c000f062:	eb 0c                	jmp    c000f070 <KeFormatDate(char*, int, int, int, int, bool)+0x1a6>
c000f064:	83 f9 4d             	cmp    ecx,0x4d
c000f067:	75 2b                	jne    c000f094 <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f069:	80 3d 61 d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d161,0x0
c000f070:	74 22                	je     c000f094 <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f072:	89 e8                	mov    eax,ebp
c000f074:	b9 0a 00 00 00       	mov    ecx,0xa
c000f079:	99                   	cdq    
c000f07a:	f7 f9                	idiv   ecx
c000f07c:	89 d5                	mov    ebp,edx
c000f07e:	99                   	cdq    
c000f07f:	f7 f9                	idiv   ecx
c000f081:	83 c2 30             	add    edx,0x30
c000f084:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f088:	8d 55 30             	lea    edx,[ebp+0x30]
c000f08b:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000f08f:	e9 0d ff ff ff       	jmp    c000efa1 <KeFormatDate(char*, int, int, int, int, bool)+0xd7>
c000f094:	89 e8                	mov    eax,ebp
c000f096:	b9 0a 00 00 00       	mov    ecx,0xa
c000f09b:	99                   	cdq    
c000f09c:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f0a1:	f7 f9                	idiv   ecx
c000f0a3:	83 c2 30             	add    edx,0x30
c000f0a6:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f0aa:	e9 f7 fe ff ff       	jmp    c000efa6 <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000f0af:	81 c4 ac 00 00 00    	add    esp,0xac
c000f0b5:	5b                   	pop    ebx
c000f0b6:	5e                   	pop    esi
c000f0b7:	5f                   	pop    edi
c000f0b8:	5d                   	pop    ebp
c000f0b9:	c3                   	ret    

c000f0ba <KeFormatShortDate(char*, int, int, int, int)>:
c000f0ba:	83 ec 14             	sub    esp,0x14
c000f0bd:	6a 00                	push   0x0
c000f0bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0d3:	e8 f2 fd ff ff       	call   c000eeca <KeFormatDate(char*, int, int, int, int, bool)>
c000f0d8:	83 c4 2c             	add    esp,0x2c
c000f0db:	c3                   	ret    

c000f0dc <KeFormatLongDate(char*, int, int, int, int)>:
c000f0dc:	83 ec 14             	sub    esp,0x14
c000f0df:	6a 01                	push   0x1
c000f0e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0f5:	e8 d0 fd ff ff       	call   c000eeca <KeFormatDate(char*, int, int, int, int, bool)>
c000f0fa:	83 c4 2c             	add    esp,0x2c
c000f0fd:	c3                   	ret    

c000f0fe <KeSetLocale(klocale_t)>:
c000f0fe:	57                   	push   edi
c000f0ff:	b9 09 00 00 00       	mov    ecx,0x9
c000f104:	56                   	push   esi
c000f105:	bf 40 d1 02 c0       	mov    edi,0xc002d140
c000f10a:	fc                   	cld    
c000f10b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f10f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f111:	5e                   	pop    esi
c000f112:	5f                   	pop    edi
c000f113:	c3                   	ret    

c000f114 <KeInitialiseLocale()>:
c000f114:	57                   	push   edi
c000f115:	56                   	push   esi
c000f116:	83 ec 3c             	sub    esp,0x3c
c000f119:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000f121:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000f129:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000f131:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000f139:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000f140:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000f148:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000f150:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000f157:	68 cc 46 02 c0       	push   0xc00246cc
c000f15c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f160:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000f164:	50                   	push   eax
c000f165:	e8 d6 14 ff ff       	call   c0000640 <strcpy>
c000f16a:	83 ec 20             	sub    esp,0x20
c000f16d:	b9 09 00 00 00       	mov    ecx,0x9
c000f172:	fc                   	cld    
c000f173:	89 e7                	mov    edi,esp
c000f175:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f177:	e8 82 ff ff ff       	call   c000f0fe <KeSetLocale(klocale_t)>
c000f17c:	83 c4 64             	add    esp,0x64
c000f17f:	5e                   	pop    esi
c000f180:	5f                   	pop    edi
c000f181:	c3                   	ret    

c000f182 <KeFormatCurrency(char*, int, long long, long long)>:
c000f182:	c3                   	ret    

c000f183 <KeFormatCurrency(char*, int, double)>:
c000f183:	c3                   	ret    

c000f184 <KeFormatNumber(char*, long long, long long)>:
c000f184:	c3                   	ret    

c000f185 <KeFormatNumber(char*, double)>:
c000f185:	c3                   	ret    
c000f186:	66 90                	xchg   ax,ax

c000f188 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000f188:	55                   	push   ebp
c000f189:	57                   	push   edi
c000f18a:	56                   	push   esi
c000f18b:	53                   	push   ebx
c000f18c:	83 ec 5c             	sub    esp,0x5c
c000f18f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f193:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f197:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000f19b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f19f:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000f1a3:	bb 2f 35 02 c0       	mov    ebx,0xc002352f
c000f1a8:	bd 11 00 00 00       	mov    ebp,0x11
c000f1ad:	89 d0                	mov    eax,edx
c000f1af:	83 e0 01             	and    eax,0x1
c000f1b2:	74 10                	je     c000f1c4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x3c>
c000f1b4:	8a 03                	mov    al,BYTE PTR [ebx]
c000f1b6:	88 02                	mov    BYTE PTR [edx],al
c000f1b8:	8d 52 01             	lea    edx,[edx+0x1]
c000f1bb:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000f1be:	83 ed 01             	sub    ebp,0x1
c000f1c1:	8d 76 00             	lea    esi,[esi+0x0]
c000f1c4:	89 d0                	mov    eax,edx
c000f1c6:	83 e0 02             	and    eax,0x2
c000f1c9:	74 11                	je     c000f1dc <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000f1cb:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000f1ce:	66 89 02             	mov    WORD PTR [edx],ax
c000f1d1:	8d 52 02             	lea    edx,[edx+0x2]
c000f1d4:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000f1d7:	83 ed 02             	sub    ebp,0x2
c000f1da:	66 90                	xchg   ax,ax
c000f1dc:	89 e8                	mov    eax,ebp
c000f1de:	c1 e8 02             	shr    eax,0x2
c000f1e1:	fc                   	cld    
c000f1e2:	89 d7                	mov    edi,edx
c000f1e4:	89 de                	mov    esi,ebx
c000f1e6:	89 c1                	mov    ecx,eax
c000f1e8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f1ea:	89 f3                	mov    ebx,esi
c000f1ec:	89 fa                	mov    edx,edi
c000f1ee:	b9 00 00 00 00       	mov    ecx,0x0
c000f1f3:	89 e8                	mov    eax,ebp
c000f1f5:	83 e0 02             	and    eax,0x2
c000f1f8:	74 0e                	je     c000f208 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x80>
c000f1fa:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000f1fe:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000f202:	8d 41 02             	lea    eax,[ecx+0x2]
c000f205:	89 c1                	mov    ecx,eax
c000f207:	90                   	nop
c000f208:	89 e8                	mov    eax,ebp
c000f20a:	83 e0 01             	and    eax,0x1
c000f20d:	74 09                	je     c000f218 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x90>
c000f20f:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000f212:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000f215:	8d 76 00             	lea    esi,[esi+0x0]
c000f218:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000f21c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f220:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f224:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f228:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f22c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f230:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000f235:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f239:	89 c2                	mov    edx,eax
c000f23b:	c1 fa 1f             	sar    edx,0x1f
c000f23e:	52                   	push   edx
c000f23f:	50                   	push   eax
c000f240:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f244:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f248:	e8 c7 2e 01 00       	call   c0022114 <__udivdi3>
c000f24d:	83 c4 10             	add    esp,0x10
c000f250:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f254:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f258:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f25c:	80 f4 00             	xor    ah,0x0
c000f25f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f263:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f267:	80 f4 00             	xor    ah,0x0
c000f26a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f26e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000f272:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f276:	89 f8                	mov    eax,edi
c000f278:	09 f0                	or     eax,esi
c000f27a:	74 04                	je     c000f280 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xf8>
c000f27c:	eb b2                	jmp    c000f230 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa8>
c000f27e:	66 90                	xchg   ax,ax
c000f280:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f284:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f287:	90                   	nop
c000f288:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f28c:	89 c1                	mov    ecx,eax
c000f28e:	89 c3                	mov    ebx,eax
c000f290:	c1 fb 1f             	sar    ebx,0x1f
c000f293:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f297:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f29b:	53                   	push   ebx
c000f29c:	51                   	push   ecx
c000f29d:	52                   	push   edx
c000f29e:	50                   	push   eax
c000f29f:	e8 70 2f 01 00       	call   c0022214 <__umoddi3>
c000f2a4:	83 c4 10             	add    esp,0x10
c000f2a7:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000f2ac:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000f2b0:	01 c8                	add    eax,ecx
c000f2b2:	8a 10                	mov    dl,BYTE PTR [eax]
c000f2b4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f2b8:	88 10                	mov    BYTE PTR [eax],dl
c000f2ba:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f2be:	89 c2                	mov    edx,eax
c000f2c0:	c1 fa 1f             	sar    edx,0x1f
c000f2c3:	52                   	push   edx
c000f2c4:	50                   	push   eax
c000f2c5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f2c9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f2cd:	e8 42 2e 01 00       	call   c0022114 <__udivdi3>
c000f2d2:	83 c4 10             	add    esp,0x10
c000f2d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f2d9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f2dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f2e1:	80 f4 00             	xor    ah,0x0
c000f2e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f2e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f2ec:	80 f4 00             	xor    ah,0x0
c000f2ef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f2f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f2f7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f2fb:	89 f8                	mov    eax,edi
c000f2fd:	09 f0                	or     eax,esi
c000f2ff:	74 03                	je     c000f304 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x17c>
c000f301:	eb 85                	jmp    c000f288 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x100>
c000f303:	90                   	nop
c000f304:	90                   	nop
c000f305:	83 c4 5c             	add    esp,0x5c
c000f308:	5b                   	pop    ebx
c000f309:	5e                   	pop    esi
c000f30a:	5f                   	pop    edi
c000f30b:	5d                   	pop    ebp
c000f30c:	c3                   	ret    
c000f30d:	8d 76 00             	lea    esi,[esi+0x0]

c000f310 <KeBasedSignedIntegerToString(long long, char*, int)>:
c000f310:	55                   	push   ebp
c000f311:	57                   	push   edi
c000f312:	56                   	push   esi
c000f313:	53                   	push   ebx
c000f314:	83 ec 5c             	sub    esp,0x5c
c000f317:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f31b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f31f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000f323:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f327:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000f32b:	bb 2f 35 02 c0       	mov    ebx,0xc002352f
c000f330:	bd 11 00 00 00       	mov    ebp,0x11
c000f335:	89 d0                	mov    eax,edx
c000f337:	83 e0 01             	and    eax,0x1
c000f33a:	74 10                	je     c000f34c <KeBasedSignedIntegerToString(long long, char*, int)+0x3c>
c000f33c:	8a 03                	mov    al,BYTE PTR [ebx]
c000f33e:	88 02                	mov    BYTE PTR [edx],al
c000f340:	8d 52 01             	lea    edx,[edx+0x1]
c000f343:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000f346:	83 ed 01             	sub    ebp,0x1
c000f349:	8d 76 00             	lea    esi,[esi+0x0]
c000f34c:	89 d0                	mov    eax,edx
c000f34e:	83 e0 02             	and    eax,0x2
c000f351:	74 11                	je     c000f364 <KeBasedSignedIntegerToString(long long, char*, int)+0x54>
c000f353:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000f356:	66 89 02             	mov    WORD PTR [edx],ax
c000f359:	8d 52 02             	lea    edx,[edx+0x2]
c000f35c:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000f35f:	83 ed 02             	sub    ebp,0x2
c000f362:	66 90                	xchg   ax,ax
c000f364:	89 e8                	mov    eax,ebp
c000f366:	c1 e8 02             	shr    eax,0x2
c000f369:	fc                   	cld    
c000f36a:	89 d7                	mov    edi,edx
c000f36c:	89 de                	mov    esi,ebx
c000f36e:	89 c1                	mov    ecx,eax
c000f370:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f372:	89 f3                	mov    ebx,esi
c000f374:	89 fa                	mov    edx,edi
c000f376:	b9 00 00 00 00       	mov    ecx,0x0
c000f37b:	89 e8                	mov    eax,ebp
c000f37d:	83 e0 02             	and    eax,0x2
c000f380:	74 0e                	je     c000f390 <KeBasedSignedIntegerToString(long long, char*, int)+0x80>
c000f382:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000f386:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000f38a:	8d 41 02             	lea    eax,[ecx+0x2]
c000f38d:	89 c1                	mov    ecx,eax
c000f38f:	90                   	nop
c000f390:	89 e8                	mov    eax,ebp
c000f392:	83 e0 01             	and    eax,0x1
c000f395:	74 09                	je     c000f3a0 <KeBasedSignedIntegerToString(long long, char*, int)+0x90>
c000f397:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000f39a:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000f39d:	8d 76 00             	lea    esi,[esi+0x0]
c000f3a0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000f3a4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f3a8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000f3ad:	79 1d                	jns    c000f3cc <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000f3af:	f7 5c 24 18          	neg    DWORD PTR [esp+0x18]
c000f3b3:	83 54 24 1c 00       	adc    DWORD PTR [esp+0x1c],0x0
c000f3b8:	f7 5c 24 1c          	neg    DWORD PTR [esp+0x1c]
c000f3bc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f3c0:	8d 50 01             	lea    edx,[eax+0x1]
c000f3c3:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000f3c7:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000f3ca:	66 90                	xchg   ax,ax
c000f3cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3d0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3d4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f3d8:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f3dc:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000f3e1:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f3e5:	89 c2                	mov    edx,eax
c000f3e7:	c1 fa 1f             	sar    edx,0x1f
c000f3ea:	52                   	push   edx
c000f3eb:	50                   	push   eax
c000f3ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f3f0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f3f4:	e8 1b 2d 01 00       	call   c0022114 <__udivdi3>
c000f3f9:	83 c4 10             	add    esp,0x10
c000f3fc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f400:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f404:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f408:	80 f4 00             	xor    ah,0x0
c000f40b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f40f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f413:	80 f4 00             	xor    ah,0x0
c000f416:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f41a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000f41e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f422:	89 f8                	mov    eax,edi
c000f424:	09 f0                	or     eax,esi
c000f426:	74 04                	je     c000f42c <KeBasedSignedIntegerToString(long long, char*, int)+0x11c>
c000f428:	eb b2                	jmp    c000f3dc <KeBasedSignedIntegerToString(long long, char*, int)+0xcc>
c000f42a:	66 90                	xchg   ax,ax
c000f42c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f430:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f433:	90                   	nop
c000f434:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f438:	89 c1                	mov    ecx,eax
c000f43a:	89 c3                	mov    ebx,eax
c000f43c:	c1 fb 1f             	sar    ebx,0x1f
c000f43f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f443:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f447:	53                   	push   ebx
c000f448:	51                   	push   ecx
c000f449:	52                   	push   edx
c000f44a:	50                   	push   eax
c000f44b:	e8 44 2b 01 00       	call   c0021f94 <__moddi3>
c000f450:	83 c4 10             	add    esp,0x10
c000f453:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000f458:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000f45c:	01 c8                	add    eax,ecx
c000f45e:	8a 10                	mov    dl,BYTE PTR [eax]
c000f460:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f464:	88 10                	mov    BYTE PTR [eax],dl
c000f466:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f46a:	89 c2                	mov    edx,eax
c000f46c:	c1 fa 1f             	sar    edx,0x1f
c000f46f:	52                   	push   edx
c000f470:	50                   	push   eax
c000f471:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f475:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f479:	e8 ca 29 01 00       	call   c0021e48 <__divdi3>
c000f47e:	83 c4 10             	add    esp,0x10
c000f481:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f485:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f489:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f48d:	80 f4 00             	xor    ah,0x0
c000f490:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f494:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f498:	80 f4 00             	xor    ah,0x0
c000f49b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f49f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f4a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f4a7:	89 f8                	mov    eax,edi
c000f4a9:	09 f0                	or     eax,esi
c000f4ab:	74 03                	je     c000f4b0 <KeBasedSignedIntegerToString(long long, char*, int)+0x1a0>
c000f4ad:	eb 85                	jmp    c000f434 <KeBasedSignedIntegerToString(long long, char*, int)+0x124>
c000f4af:	90                   	nop
c000f4b0:	90                   	nop
c000f4b1:	83 c4 5c             	add    esp,0x5c
c000f4b4:	5b                   	pop    ebx
c000f4b5:	5e                   	pop    esi
c000f4b6:	5f                   	pop    edi
c000f4b7:	5d                   	pop    ebp
c000f4b8:	c3                   	ret    
c000f4b9:	8d 76 00             	lea    esi,[esi+0x0]

c000f4bc <KeGetDigitsInNumber(long long)>:
c000f4bc:	56                   	push   esi
c000f4bd:	53                   	push   ebx
c000f4be:	83 ec 24             	sub    esp,0x24
c000f4c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f4c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f4c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f4cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f4d1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000f4d9:	8d 76 00             	lea    esi,[esi+0x0]
c000f4dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4e0:	80 f4 00             	xor    ah,0x0
c000f4e3:	89 c3                	mov    ebx,eax
c000f4e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e9:	80 f4 00             	xor    ah,0x0
c000f4ec:	89 c6                	mov    esi,eax
c000f4ee:	89 f0                	mov    eax,esi
c000f4f0:	09 d8                	or     eax,ebx
c000f4f2:	74 28                	je     c000f51c <KeGetDigitsInNumber(long long)+0x60>
c000f4f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f4fc:	6a 00                	push   0x0
c000f4fe:	6a 0a                	push   0xa
c000f500:	52                   	push   edx
c000f501:	50                   	push   eax
c000f502:	e8 41 29 01 00       	call   c0021e48 <__divdi3>
c000f507:	83 c4 10             	add    esp,0x10
c000f50a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f50e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f512:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000f517:	eb c3                	jmp    c000f4dc <KeGetDigitsInNumber(long long)+0x20>
c000f519:	8d 76 00             	lea    esi,[esi+0x0]
c000f51c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f520:	83 c4 24             	add    esp,0x24
c000f523:	5b                   	pop    ebx
c000f524:	5e                   	pop    esi
c000f525:	c3                   	ret    
c000f526:	66 90                	xchg   ax,ax

c000f528 <KeItoa(unsigned long long, char*)>:
c000f528:	83 ec 1c             	sub    esp,0x1c
c000f52b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f52f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f533:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f537:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f53b:	6a 0a                	push   0xa
c000f53d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f541:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f549:	e8 3a fc ff ff       	call   c000f188 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f54e:	83 c4 10             	add    esp,0x10
c000f551:	90                   	nop
c000f552:	83 c4 1c             	add    esp,0x1c
c000f555:	c3                   	ret    
c000f556:	66 90                	xchg   ax,ax

c000f558 <KeItoa(long long, char*)>:
c000f558:	83 ec 1c             	sub    esp,0x1c
c000f55b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f55f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f563:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f567:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f56b:	6a 0a                	push   0xa
c000f56d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f571:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f575:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f579:	e8 92 fd ff ff       	call   c000f310 <KeBasedSignedIntegerToString(long long, char*, int)>
c000f57e:	83 c4 10             	add    esp,0x10
c000f581:	90                   	nop
c000f582:	83 c4 1c             	add    esp,0x1c
c000f585:	c3                   	ret    
c000f586:	66 90                	xchg   ax,ax

c000f588 <KeXtoa(unsigned long long, char*)>:
c000f588:	83 ec 1c             	sub    esp,0x1c
c000f58b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f58f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f593:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f597:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f59b:	6a 10                	push   0x10
c000f59d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f5a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f5a9:	e8 da fb ff ff       	call   c000f188 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f5ae:	83 c4 10             	add    esp,0x10
c000f5b1:	90                   	nop
c000f5b2:	83 c4 1c             	add    esp,0x1c
c000f5b5:	c3                   	ret    

c000f5b6 <sbrk>:
c000f5b6:	55                   	push   ebp
c000f5b7:	57                   	push   edi
c000f5b8:	56                   	push   esi
c000f5b9:	53                   	push   ebx
c000f5ba:	83 ec 1c             	sub    esp,0x1c
c000f5bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f5c1:	85 c0                	test   eax,eax
c000f5c3:	74 61                	je     c000f626 <sbrk+0x70>
c000f5c5:	78 66                	js     c000f62d <sbrk+0x77>
c000f5c7:	8b 15 b0 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb0
c000f5cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f5d1:	05 ff 0f 00 00       	add    eax,0xfff
c000f5d6:	89 c5                	mov    ebp,eax
c000f5d8:	78 6b                	js     c000f645 <sbrk+0x8f>
c000f5da:	c1 fd 0c             	sar    ebp,0xc
c000f5dd:	bb 00 00 00 00       	mov    ebx,0x0
c000f5e2:	8b 35 90 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d290
c000f5e8:	8b 3d b0 6e 02 c0    	mov    edi,DWORD PTR ds:0xc0026eb0
c000f5ee:	e8 c1 07 00 00       	call   c000fdb4 <Phys::allocatePage()>
c000f5f3:	68 01 04 00 00       	push   0x401
c000f5f8:	57                   	push   edi
c000f5f9:	50                   	push   eax
c000f5fa:	56                   	push   esi
c000f5fb:	e8 d6 42 00 00       	call   c00138d6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f600:	81 05 b0 6e 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0026eb0,0x1000
c000f60a:	83 c3 01             	add    ebx,0x1
c000f60d:	83 c4 10             	add    esp,0x10
c000f610:	39 dd                	cmp    ebp,ebx
c000f612:	75 ce                	jne    c000f5e2 <sbrk+0x2c>
c000f614:	0f 20 d8             	mov    eax,cr3
c000f617:	0f 22 d8             	mov    cr3,eax
c000f61a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f61e:	83 c4 1c             	add    esp,0x1c
c000f621:	5b                   	pop    ebx
c000f622:	5e                   	pop    esi
c000f623:	5f                   	pop    edi
c000f624:	5d                   	pop    ebp
c000f625:	c3                   	ret    
c000f626:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c000f62b:	eb f1                	jmp    c000f61e <sbrk+0x68>
c000f62d:	83 ec 08             	sub    esp,0x8
c000f630:	50                   	push   eax
c000f631:	68 d0 46 02 c0       	push   0xc00246d0
c000f636:	e8 41 79 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000f63b:	83 c4 10             	add    esp,0x10
c000f63e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f643:	eb d9                	jmp    c000f61e <sbrk+0x68>
c000f645:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c000f64b:	eb 8d                	jmp    c000f5da <sbrk+0x24>

c000f64d <sbrk_thunk>:
c000f64d:	83 ec 0c             	sub    esp,0xc
c000f650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f654:	3d ff bf 00 00       	cmp    eax,0xbfff
c000f659:	7f 10                	jg     c000f66b <sbrk_thunk+0x1e>
c000f65b:	83 ec 0c             	sub    esp,0xc
c000f65e:	50                   	push   eax
c000f65f:	e8 52 ff ff ff       	call   c000f5b6 <sbrk>
c000f664:	83 c4 10             	add    esp,0x10
c000f667:	83 c4 0c             	add    esp,0xc
c000f66a:	c3                   	ret    
c000f66b:	83 ec 08             	sub    esp,0x8
c000f66e:	50                   	push   eax
c000f66f:	68 00 47 02 c0       	push   0xc0024700
c000f674:	e8 03 79 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000f679:	83 c4 10             	add    esp,0x10
c000f67c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f681:	eb e4                	jmp    c000f667 <sbrk_thunk+0x1a>

c000f683 <mmap>:
c000f683:	55                   	push   ebp
c000f684:	57                   	push   edi
c000f685:	56                   	push   esi
c000f686:	53                   	push   ebx
c000f687:	83 ec 18             	sub    esp,0x18
c000f68a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f68e:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000f694:	89 fb                	mov    ebx,edi
c000f696:	c1 eb 0c             	shr    ebx,0xc
c000f699:	53                   	push   ebx
c000f69a:	e8 54 3b 00 00       	call   c00131f3 <Virt::allocateKernelVirtualPages(int)>
c000f69f:	89 c5                	mov    ebp,eax
c000f6a1:	83 c4 10             	add    esp,0x10
c000f6a4:	85 db                	test   ebx,ebx
c000f6a6:	7e 2f                	jle    c000f6d7 <mmap+0x54>
c000f6a8:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000f6ae:	01 c7                	add    edi,eax
c000f6b0:	89 c3                	mov    ebx,eax
c000f6b2:	8b 35 90 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d290
c000f6b8:	e8 f7 06 00 00       	call   c000fdb4 <Phys::allocatePage()>
c000f6bd:	68 01 04 00 00       	push   0x401
c000f6c2:	53                   	push   ebx
c000f6c3:	50                   	push   eax
c000f6c4:	56                   	push   esi
c000f6c5:	e8 0c 42 00 00       	call   c00138d6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f6ca:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f6d0:	83 c4 10             	add    esp,0x10
c000f6d3:	39 fb                	cmp    ebx,edi
c000f6d5:	75 db                	jne    c000f6b2 <mmap+0x2f>
c000f6d7:	89 e8                	mov    eax,ebp
c000f6d9:	83 c4 0c             	add    esp,0xc
c000f6dc:	5b                   	pop    ebx
c000f6dd:	5e                   	pop    esi
c000f6de:	5f                   	pop    edi
c000f6df:	5d                   	pop    ebp
c000f6e0:	c3                   	ret    

c000f6e1 <munmap>:
c000f6e1:	83 ec 18             	sub    esp,0x18
c000f6e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6e8:	e8 0e 3e 00 00       	call   c00134fb <Virt::freeKernelVirtualPages(unsigned long)>
c000f6ed:	b8 00 00 00 00       	mov    eax,0x0
c000f6f2:	83 c4 1c             	add    esp,0x1c
c000f6f5:	c3                   	ret    

c000f6f6 <liballoc_lock()>:
c000f6f6:	fa                   	cli    
c000f6f7:	83 05 70 da 02 c0 01 	add    DWORD PTR ds:0xc002da70,0x1
c000f6fe:	b8 00 00 00 00       	mov    eax,0x0
c000f703:	c3                   	ret    

c000f704 <liballoc_unlock()>:
c000f704:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c000f70c:	83 3d 70 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da70,0x0
c000f713:	75 01                	jne    c000f716 <liballoc_unlock()+0x12>
c000f715:	fb                   	sti    
c000f716:	b8 00 00 00 00       	mov    eax,0x0
c000f71b:	c3                   	ret    

c000f71c <liballoc_alloc(int)>:
c000f71c:	83 ec 10             	sub    esp,0x10
c000f71f:	6a 01                	push   0x1
c000f721:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f725:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000f72b:	e8 aa 42 00 00       	call   c00139da <VAS::allocatePages(int, int)>
c000f730:	83 c4 1c             	add    esp,0x1c
c000f733:	c3                   	ret    

c000f734 <liballoc_free(void*, int)>:
c000f734:	83 ec 14             	sub    esp,0x14
c000f737:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f73b:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c000f741:	e8 f2 3e 00 00       	call   c0013638 <VAS::freeAllocatedPages(unsigned long)>
c000f746:	b8 00 00 00 00       	mov    eax,0x0
c000f74b:	83 c4 1c             	add    esp,0x1c
c000f74e:	c3                   	ret    

c000f74f <realloc>:
c000f74f:	83 ec 14             	sub    esp,0x14
c000f752:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f756:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f75a:	e8 f8 1f ff ff       	call   c0001757 <dlrealloc>
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	c3                   	ret    

c000f763 <malloc>:
c000f763:	83 ec 18             	sub    esp,0x18
c000f766:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f76a:	e8 ab 1a ff ff       	call   c000121a <dlmalloc>
c000f76f:	83 c4 1c             	add    esp,0x1c
c000f772:	c3                   	ret    

c000f773 <free>:
c000f773:	83 ec 18             	sub    esp,0x18
c000f776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f77a:	e8 d4 15 ff ff       	call   c0000d53 <dlfree>
c000f77f:	83 c4 1c             	add    esp,0x1c
c000f782:	c3                   	ret    

c000f783 <rfree>:
c000f783:	83 ec 18             	sub    esp,0x18
c000f786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f78a:	e8 c4 15 ff ff       	call   c0000d53 <dlfree>
c000f78f:	83 c4 1c             	add    esp,0x1c
c000f792:	c3                   	ret    

c000f793 <calloc>:
c000f793:	56                   	push   esi
c000f794:	53                   	push   ebx
c000f795:	83 ec 10             	sub    esp,0x10
c000f798:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f79c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f7a1:	53                   	push   ebx
c000f7a2:	e8 bc ff ff ff       	call   c000f763 <malloc>
c000f7a7:	89 c6                	mov    esi,eax
c000f7a9:	83 c4 0c             	add    esp,0xc
c000f7ac:	53                   	push   ebx
c000f7ad:	6a 00                	push   0x0
c000f7af:	50                   	push   eax
c000f7b0:	e8 3b 0d ff ff       	call   c00004f0 <memset>
c000f7b5:	89 f0                	mov    eax,esi
c000f7b7:	83 c4 14             	add    esp,0x14
c000f7ba:	5b                   	pop    ebx
c000f7bb:	5e                   	pop    esi
c000f7bc:	c3                   	ret    
c000f7bd:	66 90                	xchg   ax,ax
c000f7bf:	90                   	nop

c000f7c0 <KeMailboxTryPost(Mailbox*, void*)>:
c000f7c0:	83 ec 10             	sub    esp,0x10
c000f7c3:	fa                   	cli    
c000f7c4:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c000f7c9:	83 c0 01             	add    eax,0x1
c000f7cc:	a3 70 da 02 c0       	mov    ds:0xc002da70,eax
c000f7d1:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f7d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f7dd:	85 c0                	test   eax,eax
c000f7df:	75 23                	jne    c000f804 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000f7e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7e5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f7e9:	89 10                	mov    DWORD PTR [eax],edx
c000f7eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f7f2:	8d 50 01             	lea    edx,[eax+0x1]
c000f7f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7f9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f7fc:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000f801:	8d 76 00             	lea    esi,[esi+0x0]
c000f804:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c000f80c:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c000f811:	85 c0                	test   eax,eax
c000f813:	75 03                	jne    c000f818 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000f815:	fb                   	sti    
c000f816:	66 90                	xchg   ax,ax
c000f818:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f81c:	83 c4 10             	add    esp,0x10
c000f81f:	c3                   	ret    

c000f820 <KeMailboxTryGet(Mailbox*, void**)>:
c000f820:	83 ec 10             	sub    esp,0x10
c000f823:	fa                   	cli    
c000f824:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c000f829:	83 c0 01             	add    eax,0x1
c000f82c:	a3 70 da 02 c0       	mov    ds:0xc002da70,eax
c000f831:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f836:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f83a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f83d:	83 f8 01             	cmp    eax,0x1
c000f840:	75 22                	jne    c000f864 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000f842:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f846:	8b 10                	mov    edx,DWORD PTR [eax]
c000f848:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f84c:	89 10                	mov    DWORD PTR [eax],edx
c000f84e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f852:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f855:	8d 50 ff             	lea    edx,[eax-0x1]
c000f858:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f85c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f85f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000f864:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c000f86c:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c000f871:	85 c0                	test   eax,eax
c000f873:	75 03                	jne    c000f878 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000f875:	fb                   	sti    
c000f876:	66 90                	xchg   ax,ax
c000f878:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f87c:	83 c4 10             	add    esp,0x10
c000f87f:	c3                   	ret    

c000f880 <KeMailboxCreate()>:
c000f880:	83 ec 1c             	sub    esp,0x1c
c000f883:	83 ec 0c             	sub    esp,0xc
c000f886:	6a 08                	push   0x8
c000f888:	e8 d6 fe ff ff       	call   c000f763 <malloc>
c000f88d:	83 c4 10             	add    esp,0x10
c000f890:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f894:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f898:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f89e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f8a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f8a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f8ad:	83 c4 1c             	add    esp,0x1c
c000f8b0:	c3                   	ret    
c000f8b1:	8d 76 00             	lea    esi,[esi+0x0]

c000f8b4 <KeMailboxPost(Mailbox*, void*)>:
c000f8b4:	83 ec 1c             	sub    esp,0x1c
c000f8b7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f8bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f8c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f8c4:	e8 f7 fe ff ff       	call   c000f7c0 <KeMailboxTryPost(Mailbox*, void*)>
c000f8c9:	83 c4 08             	add    esp,0x8
c000f8cc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f8d0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f8d4:	83 f0 01             	xor    eax,0x1
c000f8d7:	0f b6 c0             	movzx  eax,al
c000f8da:	85 c0                	test   eax,eax
c000f8dc:	74 26                	je     c000f904 <KeMailboxPost(Mailbox*, void*)+0x50>
c000f8de:	fa                   	cli    
c000f8df:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c000f8e4:	83 c0 01             	add    eax,0x1
c000f8e7:	a3 70 da 02 c0       	mov    ds:0xc002da70,eax
c000f8ec:	e8 33 7c 00 00       	call   c0017524 <schedule()>
c000f8f1:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c000f8f9:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c000f8fe:	85 c0                	test   eax,eax
c000f900:	75 02                	jne    c000f904 <KeMailboxPost(Mailbox*, void*)+0x50>
c000f902:	fb                   	sti    
c000f903:	90                   	nop
c000f904:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000f909:	85 c0                	test   eax,eax
c000f90b:	75 03                	jne    c000f910 <KeMailboxPost(Mailbox*, void*)+0x5c>
c000f90d:	eb ad                	jmp    c000f8bc <KeMailboxPost(Mailbox*, void*)+0x8>
c000f90f:	90                   	nop
c000f910:	90                   	nop
c000f911:	83 c4 1c             	add    esp,0x1c
c000f914:	c3                   	ret    
c000f915:	8d 76 00             	lea    esi,[esi+0x0]

c000f918 <KeMailboxGet(Mailbox*, void**)>:
c000f918:	83 ec 1c             	sub    esp,0x1c
c000f91b:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f920:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f924:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f928:	e8 f3 fe ff ff       	call   c000f820 <KeMailboxTryGet(Mailbox*, void**)>
c000f92d:	83 c4 08             	add    esp,0x8
c000f930:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f934:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f938:	83 f0 01             	xor    eax,0x1
c000f93b:	0f b6 c0             	movzx  eax,al
c000f93e:	85 c0                	test   eax,eax
c000f940:	74 26                	je     c000f968 <KeMailboxGet(Mailbox*, void**)+0x50>
c000f942:	fa                   	cli    
c000f943:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c000f948:	83 c0 01             	add    eax,0x1
c000f94b:	a3 70 da 02 c0       	mov    ds:0xc002da70,eax
c000f950:	e8 cf 7b 00 00       	call   c0017524 <schedule()>
c000f955:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c000f95d:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c000f962:	85 c0                	test   eax,eax
c000f964:	75 02                	jne    c000f968 <KeMailboxGet(Mailbox*, void**)+0x50>
c000f966:	fb                   	sti    
c000f967:	90                   	nop
c000f968:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000f96d:	85 c0                	test   eax,eax
c000f96f:	75 03                	jne    c000f974 <KeMailboxGet(Mailbox*, void**)+0x5c>
c000f971:	eb ad                	jmp    c000f920 <KeMailboxGet(Mailbox*, void**)+0x8>
c000f973:	90                   	nop
c000f974:	90                   	nop
c000f975:	83 c4 1c             	add    esp,0x1c
c000f978:	c3                   	ret    
c000f979:	8d 76 00             	lea    esi,[esi+0x0]

c000f97c <KeMailboxDestroy(Mailbox*)>:
c000f97c:	83 ec 0c             	sub    esp,0xc
c000f97f:	83 ec 0c             	sub    esp,0xc
c000f982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f986:	e8 e8 fd ff ff       	call   c000f773 <free>
c000f98b:	83 c4 10             	add    esp,0x10
c000f98e:	90                   	nop
c000f98f:	83 c4 0c             	add    esp,0xc
c000f992:	c3                   	ret    

c000f993 <KeFirstTask()>:
c000f993:	53                   	push   ebx
c000f994:	83 ec 08             	sub    esp,0x8
c000f997:	fb                   	sti    
c000f998:	e8 14 a9 00 00       	call   c001a2b1 <HalEnableNMI()>
c000f99d:	83 ec 0c             	sub    esp,0xc
c000f9a0:	68 0f 47 02 c0       	push   0xc002470f
c000f9a5:	e8 27 d8 ff ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c000f9aa:	c7 04 24 c4 07 00 00 	mov    DWORD PTR [esp],0x7c4
c000f9b1:	e8 ad fd ff ff       	call   c000f763 <malloc>
c000f9b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000f9bd:	89 c3                	mov    ebx,eax
c000f9bf:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c000f9c4:	50                   	push   eax
c000f9c5:	68 28 47 02 c0       	push   0xc0024728
c000f9ca:	6a 01                	push   0x1
c000f9cc:	53                   	push   ebx
c000f9cd:	e8 52 76 00 00       	call   c0017024 <Process::Process(bool, char const*, Process*, char**)>
c000f9d2:	83 c4 20             	add    esp,0x20
c000f9d5:	68 ff 00 00 00       	push   0xff
c000f9da:	6a 00                	push   0x0
c000f9dc:	68 a3 e9 00 c0       	push   0xc000e9a3
c000f9e1:	53                   	push   ebx
c000f9e2:	e8 7d 78 00 00       	call   c0017264 <Process::createThread(void (*)(void*), void*, int)>
c000f9e7:	8b 15 98 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da98
c000f9ed:	6a 7a                	push   0x7a
c000f9ef:	6a 00                	push   0x0
c000f9f1:	68 0c 7c 01 c0       	push   0xc0017c0c
c000f9f6:	52                   	push   edx
c000f9f7:	e8 68 78 00 00       	call   c0017264 <Process::createThread(void (*)(void*), void*, int)>
c000f9fc:	83 c4 14             	add    esp,0x14
c000f9ff:	a3 50 da 02 c0       	mov    ds:0xc002da50,eax
c000fa04:	68 b0 47 02 c0       	push   0xc00247b0
c000fa09:	e8 c3 d7 ff ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c000fa0e:	c6 05 0d d1 02 c0 01 	mov    BYTE PTR ds:0xc002d10d,0x1
c000fa15:	e8 8f 0c 00 00       	call   c00106a9 <KeInitRand()>
c000fa1a:	e8 bf 85 00 00       	call   c0017fde <Vm::initialise8086()>
c000fa1f:	e8 24 84 ff ff       	call   c0007e48 <Fs::initVFS()>
c000fa24:	c7 04 24 b1 43 02 c0 	mov    DWORD PTR [esp],0xc00243b1
c000fa2b:	e8 a1 d7 ff ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c000fa30:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c000fa35:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c000fa3b:	8b 10                	mov    edx,DWORD PTR [eax]
c000fa3d:	6a 00                	push   0x0
c000fa3f:	6a 00                	push   0x0
c000fa41:	6a 00                	push   0x0
c000fa43:	50                   	push   eax
c000fa44:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fa47:	83 c4 14             	add    esp,0x14
c000fa4a:	68 b0 47 02 c0       	push   0xc00247b0
c000fa4f:	e8 7d d7 ff ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c000fa54:	e8 d4 7b ff ff       	call   c000762d <KeInitialiseSymlinks()>
c000fa59:	e8 b8 ea ff ff       	call   c000e516 <KeLoadSystemEnv()>
c000fa5e:	e8 8b 0a 00 00       	call   c00104ee <KeSetupPowerManager()>
c000fa63:	c7 04 24 35 47 02 c0 	mov    DWORD PTR [esp],0xc0024735
c000fa6a:	e8 62 d7 ff ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c000fa6f:	59                   	pop    ecx
c000fa70:	8b 1d 08 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d108
c000fa76:	58                   	pop    eax
c000fa77:	6a 01                	push   0x1
c000fa79:	68 46 47 02 c0       	push   0xc0024746
c000fa7e:	e8 fb 6e 00 00       	call   c001697e <Thr::loadDLL(char const*, bool)>
c000fa83:	5a                   	pop    edx
c000fa84:	59                   	pop    ecx
c000fa85:	53                   	push   ebx
c000fa86:	50                   	push   eax
c000fa87:	e8 44 71 00 00       	call   c0016bd0 <Thr::executeDLL(unsigned long, void*)>
c000fa8c:	83 c4 10             	add    esp,0x10
c000fa8f:	83 ec 0c             	sub    esp,0xc
c000fa92:	6a 02                	push   0x2
c000fa94:	e8 4b 7b 00 00       	call   c00175e4 <blockTask(TaskState)>
c000fa99:	83 c4 10             	add    esp,0x10
c000fa9c:	eb f1                	jmp    c000fa8f <KeFirstTask()+0xfc>

c000fa9e <KeEntryPoint>:
c000fa9e:	57                   	push   edi
c000fa9f:	bf f9 03 00 00       	mov    edi,0x3f9
c000faa4:	56                   	push   esi
c000faa5:	31 f6                	xor    esi,esi
c000faa7:	53                   	push   ebx
c000faa8:	83 ec 20             	sub    esp,0x20
c000faab:	e8 e4 d6 ff ff       	call   c000d194 <KeInitialiseBootConfigurationFlags()>
c000fab0:	89 f0                	mov    eax,esi
c000fab2:	89 fa                	mov    edx,edi
c000fab4:	ee                   	out    dx,al
c000fab5:	bb fb 03 00 00       	mov    ebx,0x3fb
c000faba:	b0 80                	mov    al,0x80
c000fabc:	89 da                	mov    edx,ebx
c000fabe:	ee                   	out    dx,al
c000fabf:	b1 03                	mov    cl,0x3
c000fac1:	ba f8 03 00 00       	mov    edx,0x3f8
c000fac6:	88 c8                	mov    al,cl
c000fac8:	ee                   	out    dx,al
c000fac9:	89 f0                	mov    eax,esi
c000facb:	89 fa                	mov    edx,edi
c000facd:	ee                   	out    dx,al
c000face:	88 c8                	mov    al,cl
c000fad0:	89 da                	mov    edx,ebx
c000fad2:	ee                   	out    dx,al
c000fad3:	b0 c7                	mov    al,0xc7
c000fad5:	ba fa 03 00 00       	mov    edx,0x3fa
c000fada:	ee                   	out    dx,al
c000fadb:	b0 0b                	mov    al,0xb
c000fadd:	ba fc 03 00 00       	mov    edx,0x3fc
c000fae2:	ee                   	out    dx,al
c000fae3:	83 ec 0c             	sub    esp,0xc
c000fae6:	68 62 47 02 c0       	push   0xc0024762
c000faeb:	e8 8c 74 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000faf0:	e8 ad d6 ff ff       	call   c000d1a2 <KeDisplaySplashScreen()>
c000faf5:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fafa:	05 ff 0f 00 00       	add    eax,0xfff
c000faff:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fb04:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb07:	e8 2c 04 00 00       	call   c000ff38 <Phys::physicalMemorySetup(unsigned int)>
c000fb0c:	e8 c0 38 00 00       	call   c00133d1 <Virt::virtualMemorySetup()>
c000fb11:	e8 dc d5 ff ff       	call   c000d0f2 <KeInitialiseAtexit()>
c000fb16:	58                   	pop    eax
c000fb17:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fb1b:	53                   	push   ebx
c000fb1c:	e8 97 3b 00 00       	call   c00136b8 <VAS::VAS()>
c000fb21:	89 1d 90 d2 02 c0    	mov    DWORD PTR ds:0xc002d290,ebx
c000fb27:	e8 02 28 01 00       	call   c002232e <_init>
c000fb2c:	c7 04 24 79 47 02 c0 	mov    DWORD PTR [esp],0xc0024779
c000fb33:	e8 99 d6 ff ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c000fb38:	c7 04 24 68 01 00 00 	mov    DWORD PTR [esp],0x168
c000fb3f:	e8 1f fc ff ff       	call   c000f763 <malloc>
c000fb44:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb47:	89 c6                	mov    esi,eax
c000fb49:	e8 0a e4 ff ff       	call   c000df58 <Computer::Computer()>
c000fb4e:	8b 15 90 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d290
c000fb54:	89 35 08 d1 02 c0    	mov    DWORD PTR ds:0xc002d108,esi
c000fb5a:	52                   	push   edx
c000fb5b:	6a 00                	push   0x0
c000fb5d:	6a 00                	push   0x0
c000fb5f:	56                   	push   esi
c000fb60:	e8 37 e4 ff ff       	call   c000df9c <Computer::open(int, int, void*)>
c000fb65:	83 c4 14             	add    esp,0x14
c000fb68:	68 d4 47 02 c0       	push   0xc00247d4
c000fb6d:	e8 5f d6 ff ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c000fb72:	e8 9a ae 00 00       	call   c001aa11 <HalInitialiseCoprocessor()>
c000fb77:	c7 04 24 93 47 02 c0 	mov    DWORD PTR [esp],0xc0024793
c000fb7e:	e8 4e d6 ff ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c000fb83:	c7 04 24 93 f9 00 c0 	mov    DWORD PTR [esp],0xc000f993
c000fb8a:	e8 4d 78 00 00       	call   c00173dc <setupMultitasking(void (*)())>
c000fb8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb92:	e8 d7 3b 00 00       	call   c001376e <VAS::~VAS()>
c000fb97:	83 c4 30             	add    esp,0x30
c000fb9a:	5b                   	pop    ebx
c000fb9b:	5e                   	pop    esi
c000fb9c:	5f                   	pop    edi
c000fb9d:	c3                   	ret    
c000fb9e:	66 90                	xchg   ax,ax

c000fba0 <Mutex::Mutex()>:
c000fba0:	83 ec 0c             	sub    esp,0xc
c000fba3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fba7:	83 ec 08             	sub    esp,0x8
c000fbaa:	6a 01                	push   0x1
c000fbac:	50                   	push   eax
c000fbad:	e8 96 0d 00 00       	call   c0010948 <Semaphore::Semaphore(int)>
c000fbb2:	83 c4 10             	add    esp,0x10
c000fbb5:	90                   	nop
c000fbb6:	83 c4 0c             	add    esp,0xc
c000fbb9:	c3                   	ret    

c000fbba <KeIsKernelInPanic()>:
c000fbba:	a0 64 d1 02 c0       	mov    al,ds:0xc002d164
c000fbbf:	c3                   	ret    

c000fbc0 <KePanic(char const*)>:
c000fbc0:	c6 05 64 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d164,0x1
c000fbc7:	e9 c9 ae 00 00       	jmp    c001aa95 <HalPanic(char const*)>

c000fbcc <Phys::allocateDMA(unsigned long)>:
c000fbcc:	55                   	push   ebp
c000fbcd:	31 ed                	xor    ebp,ebp
c000fbcf:	57                   	push   edi
c000fbd0:	56                   	push   esi
c000fbd1:	53                   	push   ebx
c000fbd2:	31 db                	xor    ebx,ebx
c000fbd4:	83 ec 1c             	sub    esp,0x1c
c000fbd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fbdb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fbe3:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000fbe9:	31 c0                	xor    eax,eax
c000fbeb:	c1 ef 0c             	shr    edi,0xc
c000fbee:	eb 1b                	jmp    c000fc0b <Phys::allocateDMA(unsigned long)+0x3f>
c000fbf0:	85 c0                	test   eax,eax
c000fbf2:	75 06                	jne    c000fbfa <Phys::allocateDMA(unsigned long)+0x2e>
c000fbf4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fbf8:	89 dd                	mov    ebp,ebx
c000fbfa:	8d 70 01             	lea    esi,[eax+0x1]
c000fbfd:	39 f7                	cmp    edi,esi
c000fbff:	74 37                	je     c000fc38 <Phys::allocateDMA(unsigned long)+0x6c>
c000fc01:	89 f0                	mov    eax,esi
c000fc03:	83 c3 01             	add    ebx,0x1
c000fc06:	83 fb 0f             	cmp    ebx,0xf
c000fc09:	7f 13                	jg     c000fc1e <Phys::allocateDMA(unsigned long)+0x52>
c000fc0b:	80 bb 80 d1 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd2e80],0x0
c000fc12:	74 dc                	je     c000fbf0 <Phys::allocateDMA(unsigned long)+0x24>
c000fc14:	31 c0                	xor    eax,eax
c000fc16:	83 c3 01             	add    ebx,0x1
c000fc19:	83 fb 0f             	cmp    ebx,0xf
c000fc1c:	7e ed                	jle    c000fc0b <Phys::allocateDMA(unsigned long)+0x3f>
c000fc1e:	83 ec 0c             	sub    esp,0xc
c000fc21:	68 f8 47 02 c0       	push   0xc00247f8
c000fc26:	e8 95 ff ff ff       	call   c000fbc0 <KePanic(char const*)>
c000fc2b:	83 c4 10             	add    esp,0x10
c000fc2e:	31 c0                	xor    eax,eax
c000fc30:	83 c4 1c             	add    esp,0x1c
c000fc33:	5b                   	pop    ebx
c000fc34:	5e                   	pop    esi
c000fc35:	5f                   	pop    edi
c000fc36:	5d                   	pop    ebp
c000fc37:	c3                   	ret    
c000fc38:	89 e9                	mov    ecx,ebp
c000fc3a:	c1 f9 04             	sar    ecx,0x4
c000fc3d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000fc41:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000fc45:	89 ca                	mov    edx,ecx
c000fc47:	83 ea 01             	sub    edx,0x1
c000fc4a:	79 03                	jns    c000fc4f <Phys::allocateDMA(unsigned long)+0x83>
c000fc4c:	8d 51 0e             	lea    edx,[ecx+0xe]
c000fc4f:	c1 fa 04             	sar    edx,0x4
c000fc52:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000fc56:	74 08                	je     c000fc60 <Phys::allocateDMA(unsigned long)+0x94>
c000fc58:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000fc5c:	31 c0                	xor    eax,eax
c000fc5e:	eb b6                	jmp    c000fc16 <Phys::allocateDMA(unsigned long)+0x4a>
c000fc60:	85 f6                	test   esi,esi
c000fc62:	74 17                	je     c000fc7b <Phys::allocateDMA(unsigned long)+0xaf>
c000fc64:	8d 95 80 d1 02 c0    	lea    edx,[ebp-0x3ffd2e80]
c000fc6a:	8d 84 05 81 d1 02 c0 	lea    eax,[ebp+eax*1-0x3ffd2e7f]
c000fc71:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fc74:	83 c2 01             	add    edx,0x1
c000fc77:	39 d0                	cmp    eax,edx
c000fc79:	75 f6                	jne    c000fc71 <Phys::allocateDMA(unsigned long)+0xa5>
c000fc7b:	a1 78 d1 02 c0       	mov    eax,ds:0xc002d178
c000fc80:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fc84:	01 f8                	add    eax,edi
c000fc86:	85 d2                	test   edx,edx
c000fc88:	a3 78 d1 02 c0       	mov    ds:0xc002d178,eax
c000fc8d:	74 17                	je     c000fca6 <Phys::allocateDMA(unsigned long)+0xda>
c000fc8f:	83 ec 0c             	sub    esp,0xc
c000fc92:	68 f8 47 02 c0       	push   0xc00247f8
c000fc97:	e8 24 ff ff ff       	call   c000fbc0 <KePanic(char const*)>
c000fc9c:	83 c4 10             	add    esp,0x10
c000fc9f:	89 f0                	mov    eax,esi
c000fca1:	e9 5d ff ff ff       	jmp    c000fc03 <Phys::allocateDMA(unsigned long)+0x37>
c000fca6:	c1 e5 0c             	shl    ebp,0xc
c000fca9:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000fcaf:	e9 7c ff ff ff       	jmp    c000fc30 <Phys::allocateDMA(unsigned long)+0x64>

c000fcb4 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fcb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcb8:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000fcbe:	a1 78 d1 02 c0       	mov    eax,ds:0xc002d178
c000fcc3:	c1 ea 0c             	shr    edx,0xc
c000fcc6:	29 d0                	sub    eax,edx
c000fcc8:	a3 78 d1 02 c0       	mov    ds:0xc002d178,eax
c000fccd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fcd1:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000fcd6:	c1 e8 0c             	shr    eax,0xc
c000fcd9:	85 d2                	test   edx,edx
c000fcdb:	74 11                	je     c000fcee <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000fcdd:	05 80 d1 02 c0       	add    eax,0xc002d180
c000fce2:	01 c2                	add    edx,eax
c000fce4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fce7:	83 c0 01             	add    eax,0x1
c000fcea:	39 d0                	cmp    eax,edx
c000fcec:	75 f6                	jne    c000fce4 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000fcee:	c3                   	ret    

c000fcef <Phys::setPageState(unsigned long, bool)>:
c000fcef:	57                   	push   edi
c000fcf0:	56                   	push   esi
c000fcf1:	8b 35 b4 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026eb4
c000fcf7:	53                   	push   ebx
c000fcf8:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000fcfd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd01:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fd05:	0f b6 c0             	movzx  eax,al
c000fd08:	89 ca                	mov    edx,ecx
c000fd0a:	83 e1 07             	and    ecx,0x7
c000fd0d:	c1 ea 03             	shr    edx,0x3
c000fd10:	d3 c3                	rol    ebx,cl
c000fd12:	01 d6                	add    esi,edx
c000fd14:	d3 e0                	shl    eax,cl
c000fd16:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000fd19:	21 fb                	and    ebx,edi
c000fd1b:	88 1e                	mov    BYTE PTR [esi],bl
c000fd1d:	8b 1d b4 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb4
c000fd23:	01 da                	add    edx,ebx
c000fd25:	8a 0a                	mov    cl,BYTE PTR [edx]
c000fd27:	09 c8                	or     eax,ecx
c000fd29:	88 02                	mov    BYTE PTR [edx],al
c000fd2b:	5b                   	pop    ebx
c000fd2c:	5e                   	pop    esi
c000fd2d:	5f                   	pop    edi
c000fd2e:	c3                   	ret    

c000fd2f <Phys::getPageState(unsigned long)>:
c000fd2f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fd33:	8b 15 b4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb4
c000fd39:	89 c8                	mov    eax,ecx
c000fd3b:	83 e1 07             	and    ecx,0x7
c000fd3e:	c1 e8 03             	shr    eax,0x3
c000fd41:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fd45:	d3 f8                	sar    eax,cl
c000fd47:	83 e0 01             	and    eax,0x1
c000fd4a:	c3                   	ret    

c000fd4b <Phys::freePage(unsigned long)>:
c000fd4b:	53                   	push   ebx
c000fd4c:	83 ec 08             	sub    esp,0x8
c000fd4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd53:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000fd59:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000fd5f:	76 41                	jbe    c000fda2 <Phys::freePage(unsigned long)+0x57>
c000fd61:	c1 e8 0c             	shr    eax,0xc
c000fd64:	50                   	push   eax
c000fd65:	89 c3                	mov    ebx,eax
c000fd67:	e8 c3 ff ff ff       	call   c000fd2f <Phys::getPageState(unsigned long)>
c000fd6c:	5a                   	pop    edx
c000fd6d:	84 c0                	test   al,al
c000fd6f:	74 20                	je     c000fd91 <Phys::freePage(unsigned long)+0x46>
c000fd71:	83 ec 08             	sub    esp,0x8
c000fd74:	a1 78 d1 02 c0       	mov    eax,ds:0xc002d178
c000fd79:	6a 00                	push   0x0
c000fd7b:	83 e8 01             	sub    eax,0x1
c000fd7e:	53                   	push   ebx
c000fd7f:	a3 78 d1 02 c0       	mov    ds:0xc002d178,eax
c000fd84:	e8 66 ff ff ff       	call   c000fcef <Phys::setPageState(unsigned long, bool)>
c000fd89:	83 c4 10             	add    esp,0x10
c000fd8c:	83 c4 08             	add    esp,0x8
c000fd8f:	5b                   	pop    ebx
c000fd90:	c3                   	ret    
c000fd91:	c7 44 24 10 0a 48 02 c0 	mov    DWORD PTR [esp+0x10],0xc002480a
c000fd99:	83 c4 08             	add    esp,0x8
c000fd9c:	5b                   	pop    ebx
c000fd9d:	e9 1e fe ff ff       	jmp    c000fbc0 <KePanic(char const*)>
c000fda2:	68 00 10 00 00       	push   0x1000
c000fda7:	50                   	push   eax
c000fda8:	e8 07 ff ff ff       	call   c000fcb4 <Phys::freeDMA(unsigned long, unsigned long)>
c000fdad:	59                   	pop    ecx
c000fdae:	5b                   	pop    ebx
c000fdaf:	83 c4 08             	add    esp,0x8
c000fdb2:	5b                   	pop    ebx
c000fdb3:	c3                   	ret    

c000fdb4 <Phys::allocatePage()>:
c000fdb4:	56                   	push   esi
c000fdb5:	53                   	push   ebx
c000fdb6:	83 ec 14             	sub    esp,0x14
c000fdb9:	8b 35 6c d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d16c
c000fdbf:	89 f3                	mov    ebx,esi
c000fdc1:	eb 0a                	jmp    c000fdcd <Phys::allocatePage()+0x19>
c000fdc3:	89 1d 6c d1 02 c0    	mov    DWORD PTR ds:0xc002d16c,ebx
c000fdc9:	39 de                	cmp    esi,ebx
c000fdcb:	74 26                	je     c000fdf3 <Phys::allocatePage()+0x3f>
c000fdcd:	53                   	push   ebx
c000fdce:	e8 5c ff ff ff       	call   c000fd2f <Phys::getPageState(unsigned long)>
c000fdd3:	59                   	pop    ecx
c000fdd4:	84 c0                	test   al,al
c000fdd6:	74 5a                	je     c000fe32 <Phys::allocatePage()+0x7e>
c000fdd8:	83 c3 01             	add    ebx,0x1
c000fddb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fde1:	75 e0                	jne    c000fdc3 <Phys::allocatePage()+0xf>
c000fde3:	31 db                	xor    ebx,ebx
c000fde5:	c7 05 6c d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d16c,0x0
c000fdef:	39 de                	cmp    esi,ebx
c000fdf1:	75 da                	jne    c000fdcd <Phys::allocatePage()+0x19>
c000fdf3:	83 ec 0c             	sub    esp,0xc
c000fdf6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fdfb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fdfe:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c000fe04:	51                   	push   ecx
c000fe05:	e8 84 44 00 00       	call   c001428e <VAS::scanForEviction()>
c000fe0a:	83 c4 10             	add    esp,0x10
c000fe0d:	85 c0                	test   eax,eax
c000fe0f:	75 48                	jne    c000fe59 <Phys::allocatePage()+0xa5>
c000fe11:	83 ec 0c             	sub    esp,0xc
c000fe14:	68 64 48 02 c0       	push   0xc0024864
c000fe19:	e8 a2 fd ff ff       	call   c000fbc0 <KePanic(char const*)>
c000fe1e:	83 c4 10             	add    esp,0x10
c000fe21:	8b 1d 6c d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d16c
c000fe27:	53                   	push   ebx
c000fe28:	e8 02 ff ff ff       	call   c000fd2f <Phys::getPageState(unsigned long)>
c000fe2d:	59                   	pop    ecx
c000fe2e:	84 c0                	test   al,al
c000fe30:	75 a6                	jne    c000fdd8 <Phys::allocatePage()+0x24>
c000fe32:	6a 01                	push   0x1
c000fe34:	53                   	push   ebx
c000fe35:	e8 b5 fe ff ff       	call   c000fcef <Phys::setPageState(unsigned long, bool)>
c000fe3a:	8b 1d 78 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d178
c000fe40:	a1 6c d1 02 c0       	mov    eax,ds:0xc002d16c
c000fe45:	83 c3 01             	add    ebx,0x1
c000fe48:	5e                   	pop    esi
c000fe49:	89 1d 78 d1 02 c0    	mov    DWORD PTR ds:0xc002d178,ebx
c000fe4f:	c1 e0 0c             	shl    eax,0xc
c000fe52:	5a                   	pop    edx
c000fe53:	83 c4 14             	add    esp,0x14
c000fe56:	5b                   	pop    ebx
c000fe57:	5e                   	pop    esi
c000fe58:	c3                   	ret    
c000fe59:	83 ec 08             	sub    esp,0x8
c000fe5c:	8b 15 78 d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d178
c000fe62:	6a 01                	push   0x1
c000fe64:	83 c2 01             	add    edx,0x1
c000fe67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe6b:	89 15 78 d1 02 c0    	mov    DWORD PTR ds:0xc002d178,edx
c000fe71:	89 c2                	mov    edx,eax
c000fe73:	c1 ea 0c             	shr    edx,0xc
c000fe76:	52                   	push   edx
c000fe77:	e8 73 fe ff ff       	call   c000fcef <Phys::setPageState(unsigned long, bool)>
c000fe7c:	83 c4 10             	add    esp,0x10
c000fe7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe83:	eb ce                	jmp    c000fe53 <Phys::allocatePage()+0x9f>

c000fe85 <Phys::allocateContiguousPages(int)>:
c000fe85:	57                   	push   edi
c000fe86:	56                   	push   esi
c000fe87:	53                   	push   ebx
c000fe88:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fe8c:	fa                   	cli    
c000fe8d:	8b 15 70 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da70
c000fe93:	83 ec 0c             	sub    esp,0xc
c000fe96:	83 c2 01             	add    edx,0x1
c000fe99:	68 94 48 02 c0       	push   0xc0024894
c000fe9e:	89 15 70 da 02 c0    	mov    DWORD PTR ds:0xc002da70,edx
c000fea4:	31 db                	xor    ebx,ebx
c000fea6:	e8 d1 70 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000feab:	83 c4 10             	add    esp,0x10
c000feae:	85 db                	test   ebx,ebx
c000feb0:	75 11                	jne    c000fec3 <Phys::allocateContiguousPages(int)+0x3e>
c000feb2:	e8 fd fe ff ff       	call   c000fdb4 <Phys::allocatePage()>
c000feb7:	83 ff 01             	cmp    edi,0x1
c000feba:	89 c6                	mov    esi,eax
c000febc:	74 21                	je     c000fedf <Phys::allocateContiguousPages(int)+0x5a>
c000febe:	bb 01 00 00 00       	mov    ebx,0x1
c000fec3:	e8 ec fe ff ff       	call   c000fdb4 <Phys::allocatePage()>
c000fec8:	89 da                	mov    edx,ebx
c000feca:	c1 e2 0c             	shl    edx,0xc
c000fecd:	01 f2                	add    edx,esi
c000fecf:	39 c2                	cmp    edx,eax
c000fed1:	74 24                	je     c000fef7 <Phys::allocateContiguousPages(int)+0x72>
c000fed3:	bb 01 00 00 00       	mov    ebx,0x1
c000fed8:	89 c6                	mov    esi,eax
c000feda:	83 ff 01             	cmp    edi,0x1
c000fedd:	75 e4                	jne    c000fec3 <Phys::allocateContiguousPages(int)+0x3e>
c000fedf:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c000fee7:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c000feec:	85 c0                	test   eax,eax
c000feee:	75 01                	jne    c000fef1 <Phys::allocateContiguousPages(int)+0x6c>
c000fef0:	fb                   	sti    
c000fef1:	89 f0                	mov    eax,esi
c000fef3:	5b                   	pop    ebx
c000fef4:	5e                   	pop    esi
c000fef5:	5f                   	pop    edi
c000fef6:	c3                   	ret    
c000fef7:	83 c3 01             	add    ebx,0x1
c000fefa:	39 fb                	cmp    ebx,edi
c000fefc:	75 b0                	jne    c000feae <Phys::allocateContiguousPages(int)+0x29>
c000fefe:	eb df                	jmp    c000fedf <Phys::allocateContiguousPages(int)+0x5a>

c000ff00 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000ff00:	56                   	push   esi
c000ff01:	53                   	push   ebx
c000ff02:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff06:	39 1d 70 d1 02 c0    	cmp    DWORD PTR ds:0xc002d170,ebx
c000ff0c:	73 06                	jae    c000ff14 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000ff0e:	89 1d 70 d1 02 c0    	mov    DWORD PTR ds:0xc002d170,ebx
c000ff14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ff18:	c1 eb 0c             	shr    ebx,0xc
c000ff1b:	c1 e8 0c             	shr    eax,0xc
c000ff1e:	39 d8                	cmp    eax,ebx
c000ff20:	73 13                	jae    c000ff35 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000ff22:	6a 00                	push   0x0
c000ff24:	8d 70 01             	lea    esi,[eax+0x1]
c000ff27:	50                   	push   eax
c000ff28:	e8 c2 fd ff ff       	call   c000fcef <Phys::setPageState(unsigned long, bool)>
c000ff2d:	5a                   	pop    edx
c000ff2e:	89 f0                	mov    eax,esi
c000ff30:	59                   	pop    ecx
c000ff31:	39 f3                	cmp    ebx,esi
c000ff33:	75 ed                	jne    c000ff22 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000ff35:	5b                   	pop    ebx
c000ff36:	5e                   	pop    esi
c000ff37:	c3                   	ret    

c000ff38 <Phys::physicalMemorySetup(unsigned int)>:
c000ff38:	55                   	push   ebp
c000ff39:	57                   	push   edi
c000ff3a:	56                   	push   esi
c000ff3b:	53                   	push   ebx
c000ff3c:	83 ec 40             	sub    esp,0x40
c000ff3f:	6a 10                	push   0x10
c000ff41:	6a 00                	push   0x0
c000ff43:	68 80 d1 02 c0       	push   0xc002d180
c000ff48:	e8 a3 05 ff ff       	call   c00004f0 <memset>
c000ff4d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ff51:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ff56:	05 00 10 00 00       	add    eax,0x1000
c000ff5b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ff5f:	5b                   	pop    ebx
c000ff60:	31 db                	xor    ebx,ebx
c000ff62:	5e                   	pop    esi
c000ff63:	50                   	push   eax
c000ff64:	68 20 48 02 c0       	push   0xc0024820
c000ff69:	e8 0e 70 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000ff6e:	83 c4 10             	add    esp,0x10
c000ff71:	83 ec 08             	sub    esp,0x8
c000ff74:	6a 01                	push   0x1
c000ff76:	53                   	push   ebx
c000ff77:	83 c3 01             	add    ebx,0x1
c000ff7a:	e8 70 fd ff ff       	call   c000fcef <Phys::setPageState(unsigned long, bool)>
c000ff7f:	83 c4 10             	add    esp,0x10
c000ff82:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff88:	75 e7                	jne    c000ff71 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000ff8a:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c000ff91:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c000ff98:	c1 e0 08             	shl    eax,0x8
c000ff9b:	09 c2                	or     edx,eax
c000ff9d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ffa1:	0f 84 98 01 00 00    	je     c001013f <Phys::physicalMemorySetup(unsigned int)+0x207>
c000ffa7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000ffb3:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000ffb8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ffbc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000ffc4:	eb 1c                	jmp    c000ffe2 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c000ffc6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ffca:	83 c3 18             	add    ebx,0x18
c000ffcd:	83 c6 01             	add    esi,0x1
c000ffd0:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ffd4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffd8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000ffdc:	0f 84 6d 01 00 00    	je     c001014f <Phys::physicalMemorySetup(unsigned int)+0x217>
c000ffe2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ffe5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ffe8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000ffeb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ffef:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fff3:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fff5:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fff8:	01 f0                	add    eax,esi
c000fffa:	55                   	push   ebp
c000fffb:	11 fa                	adc    edx,edi
c000fffd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010001:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010005:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010009:	51                   	push   ecx
c001000a:	56                   	push   esi
c001000b:	68 f4 48 02 c0       	push   0xc00248f4
c0010010:	e8 67 6f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010015:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010019:	83 c4 10             	add    esp,0x10
c001001c:	09 f8                	or     eax,edi
c001001e:	0f 85 2b 01 00 00    	jne    c001014f <Phys::physicalMemorySetup(unsigned int)+0x217>
c0010024:	83 fd 01             	cmp    ebp,0x1
c0010027:	75 9d                	jne    c000ffc6 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0010029:	ba 00 00 08 00       	mov    edx,0x80000
c001002e:	89 c1                	mov    ecx,eax
c0010030:	39 f2                	cmp    edx,esi
c0010032:	19 f9                	sbb    ecx,edi
c0010034:	0f 82 ab 00 00 00    	jb     c00100e5 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c001003a:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001003e:	89 c1                	mov    ecx,eax
c0010040:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010044:	0f 83 9b 00 00 00    	jae    c00100e5 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c001004a:	ba 00 00 0a 00       	mov    edx,0xa0000
c001004f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010053:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010057:	39 fa                	cmp    edx,edi
c0010059:	19 e8                	sbb    eax,ebp
c001005b:	0f 82 b0 01 00 00    	jb     c0010211 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0010061:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010065:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010069:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c001006f:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010074:	83 d5 ff             	adc    ebp,0xffffffff
c0010077:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001007b:	31 c0                	xor    eax,eax
c001007d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010081:	39 fa                	cmp    edx,edi
c0010083:	89 c1                	mov    ecx,eax
c0010085:	19 e9                	sbb    ecx,ebp
c0010087:	0f 83 39 ff ff ff    	jae    c000ffc6 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c001008d:	be 00 00 08 00       	mov    esi,0x80000
c0010092:	83 ec 04             	sub    esp,0x4
c0010095:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010099:	57                   	push   edi
c001009a:	56                   	push   esi
c001009b:	68 18 49 02 c0       	push   0xc0024918
c00100a0:	e8 d7 6e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00100a5:	5d                   	pop    ebp
c00100a6:	58                   	pop    eax
c00100a7:	57                   	push   edi
c00100a8:	56                   	push   esi
c00100a9:	e8 52 fe ff ff       	call   c000ff00 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00100ae:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00100b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00100b6:	83 c4 0c             	add    esp,0xc
c00100b9:	0f ac d0 0c          	shrd   eax,edx,0xc
c00100bd:	8b 15 7c d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d17c
c00100c3:	01 d0                	add    eax,edx
c00100c5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00100cc:	a3 7c d1 02 c0       	mov    ds:0xc002d17c,eax
c00100d1:	52                   	push   edx
c00100d2:	50                   	push   eax
c00100d3:	68 46 48 02 c0       	push   0xc0024846
c00100d8:	e8 9f 6e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00100dd:	83 c4 10             	add    esp,0x10
c00100e0:	e9 e1 fe ff ff       	jmp    c000ffc6 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00100e5:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00100e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00100ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00100f1:	39 ea                	cmp    edx,ebp
c00100f3:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00100f7:	0f 82 c9 fe ff ff    	jb     c000ffc6 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00100fd:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010102:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010106:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c001010a:	0f 83 b6 fe ff ff    	jae    c000ffc6 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0010110:	39 ee                	cmp    esi,ebp
c0010112:	89 f8                	mov    eax,edi
c0010114:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010118:	0f 83 74 ff ff ff    	jae    c0010092 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c001011e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010122:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010126:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001012a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001012e:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010132:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010136:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001013a:	e9 53 ff ff ff       	jmp    c0010092 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c001013f:	83 ec 0c             	sub    esp,0xc
c0010142:	68 38 48 02 c0       	push   0xc0024838
c0010147:	e8 74 fa ff ff       	call   c000fbc0 <KePanic(char const*)>
c001014c:	83 c4 10             	add    esp,0x10
c001014f:	83 ec 08             	sub    esp,0x8
c0010152:	bb 60 00 00 00       	mov    ebx,0x60
c0010157:	6a 00                	push   0x0
c0010159:	6a 06                	push   0x6
c001015b:	e8 8f fb ff ff       	call   c000fcef <Phys::setPageState(unsigned long, bool)>
c0010160:	58                   	pop    eax
c0010161:	5a                   	pop    edx
c0010162:	6a 00                	push   0x0
c0010164:	6a 07                	push   0x7
c0010166:	e8 84 fb ff ff       	call   c000fcef <Phys::setPageState(unsigned long, bool)>
c001016b:	8b 0d 7c d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d17c
c0010171:	83 c4 10             	add    esp,0x10
c0010174:	83 c1 02             	add    ecx,0x2
c0010177:	89 0d 7c d1 02 c0    	mov    DWORD PTR ds:0xc002d17c,ecx
c001017d:	83 ec 08             	sub    esp,0x8
c0010180:	6a 00                	push   0x0
c0010182:	53                   	push   ebx
c0010183:	83 c3 01             	add    ebx,0x1
c0010186:	e8 64 fb ff ff       	call   c000fcef <Phys::setPageState(unsigned long, bool)>
c001018b:	83 c4 10             	add    esp,0x10
c001018e:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0010194:	75 e7                	jne    c001017d <Phys::physicalMemorySetup(unsigned int)+0x245>
c0010196:	a1 7c d1 02 c0       	mov    eax,ds:0xc002d17c
c001019b:	bb 40 01 00 00       	mov    ebx,0x140
c00101a0:	83 c0 20             	add    eax,0x20
c00101a3:	a3 7c d1 02 c0       	mov    ds:0xc002d17c,eax
c00101a8:	eb 26                	jmp    c00101d0 <Phys::physicalMemorySetup(unsigned int)+0x298>
c00101aa:	83 ec 08             	sub    esp,0x8
c00101ad:	6a 00                	push   0x0
c00101af:	53                   	push   ebx
c00101b0:	83 c3 01             	add    ebx,0x1
c00101b3:	e8 37 fb ff ff       	call   c000fcef <Phys::setPageState(unsigned long, bool)>
c00101b8:	a1 7c d1 02 c0       	mov    eax,ds:0xc002d17c
c00101bd:	83 c4 10             	add    esp,0x10
c00101c0:	83 c0 01             	add    eax,0x1
c00101c3:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00101c9:	a3 7c d1 02 c0       	mov    ds:0xc002d17c,eax
c00101ce:	74 07                	je     c00101d7 <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00101d0:	3d ff 03 00 00       	cmp    eax,0x3ff
c00101d5:	7e d3                	jle    c00101aa <Phys::physicalMemorySetup(unsigned int)+0x272>
c00101d7:	bb d0 01 00 00       	mov    ebx,0x1d0
c00101dc:	3d ff 07 00 00       	cmp    eax,0x7ff
c00101e1:	7f 26                	jg     c0010209 <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00101e3:	83 ec 08             	sub    esp,0x8
c00101e6:	6a 00                	push   0x0
c00101e8:	53                   	push   ebx
c00101e9:	83 c3 01             	add    ebx,0x1
c00101ec:	e8 fe fa ff ff       	call   c000fcef <Phys::setPageState(unsigned long, bool)>
c00101f1:	a1 7c d1 02 c0       	mov    eax,ds:0xc002d17c
c00101f6:	83 c4 10             	add    esp,0x10
c00101f9:	83 c0 01             	add    eax,0x1
c00101fc:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0010202:	a3 7c d1 02 c0       	mov    ds:0xc002d17c,eax
c0010207:	75 d3                	jne    c00101dc <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c0010209:	83 c4 3c             	add    esp,0x3c
c001020c:	5b                   	pop    ebx
c001020d:	5e                   	pop    esi
c001020e:	5f                   	pop    edi
c001020f:	5d                   	pop    ebp
c0010210:	c3                   	ret    
c0010211:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010219:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010221:	e9 3b fe ff ff       	jmp    c0010061 <Phys::physicalMemorySetup(unsigned int)+0x129>

c0010226 <Pipe::isAtty()>:
c0010226:	31 c0                	xor    eax,eax
c0010228:	c3                   	ret    
c0010229:	90                   	nop

c001022a <Pipe::~Pipe()>:
c001022a:	83 ec 0c             	sub    esp,0xc
c001022d:	ba 84 49 02 c0       	mov    edx,0xc0024984
c0010232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010236:	89 10                	mov    DWORD PTR [eax],edx
c0010238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001023c:	83 ec 0c             	sub    esp,0xc
c001023f:	50                   	push   eax
c0010240:	e8 41 2d 00 00       	call   c0012f86 <UnixFile::~UnixFile()>
c0010245:	83 c4 10             	add    esp,0x10
c0010248:	90                   	nop
c0010249:	83 c4 0c             	add    esp,0xc
c001024c:	c3                   	ret    
c001024d:	90                   	nop

c001024e <Pipe::~Pipe()>:
c001024e:	83 ec 0c             	sub    esp,0xc
c0010251:	83 ec 0c             	sub    esp,0xc
c0010254:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010258:	e8 cd ff ff ff       	call   c001022a <Pipe::~Pipe()>
c001025d:	83 c4 10             	add    esp,0x10
c0010260:	83 ec 08             	sub    esp,0x8
c0010263:	6a 20                	push   0x20
c0010265:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010269:	e8 0e d0 ff ff       	call   c000d27c <operator delete(void*, unsigned long)>
c001026e:	83 c4 10             	add    esp,0x10
c0010271:	83 c4 0c             	add    esp,0xc
c0010274:	c3                   	ret    
c0010275:	90                   	nop

c0010276 <Pipe::write(unsigned long long, void*, int*)>:
c0010276:	55                   	push   ebp
c0010277:	57                   	push   edi
c0010278:	56                   	push   esi
c0010279:	53                   	push   ebx
c001027a:	83 ec 1c             	sub    esp,0x1c
c001027d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010281:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010285:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0010288:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001028c:	89 04 24             	mov    DWORD PTR [esp],eax
c001028f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010293:	89 d8                	mov    eax,ebx
c0010295:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010298:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001029c:	89 d6                	mov    esi,edx
c001029e:	89 d7                	mov    edi,edx
c00102a0:	c1 ff 1f             	sar    edi,0x1f
c00102a3:	03 34 24             	add    esi,DWORD PTR [esp]
c00102a6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00102aa:	c1 f8 1f             	sar    eax,0x1f
c00102ad:	39 f3                	cmp    ebx,esi
c00102af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00102b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00102b7:	19 f8                	sbb    eax,edi
c00102b9:	b8 01 00 00 00       	mov    eax,0x1
c00102be:	72 6e                	jb     c001032e <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00102c0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00102c3:	01 d0                	add    eax,edx
c00102c5:	99                   	cdq    
c00102c6:	f7 fb                	idiv   ebx
c00102c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102cc:	29 d3                	sub    ebx,edx
c00102ce:	89 d7                	mov    edi,edx
c00102d0:	89 de                	mov    esi,ebx
c00102d2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00102d5:	c1 fb 1f             	sar    ebx,0x1f
c00102d8:	39 f2                	cmp    edx,esi
c00102da:	19 d8                	sbb    eax,ebx
c00102dc:	b8 00 00 00 00       	mov    eax,0x0
c00102e1:	72 04                	jb     c00102e7 <Pipe::write(unsigned long long, void*, int*)+0x71>
c00102e3:	89 d0                	mov    eax,edx
c00102e5:	29 f0                	sub    eax,esi
c00102e7:	89 d3                	mov    ebx,edx
c00102e9:	29 c3                	sub    ebx,eax
c00102eb:	74 0b                	je     c00102f8 <Pipe::write(unsigned long long, void*, int*)+0x82>
c00102ed:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00102f0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00102f4:	89 d9                	mov    ecx,ebx
c00102f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102f8:	85 c0                	test   eax,eax
c00102fa:	74 0d                	je     c0010309 <Pipe::write(unsigned long long, void*, int*)+0x93>
c00102fc:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010300:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010303:	89 de                	mov    esi,ebx
c0010305:	89 c1                	mov    ecx,eax
c0010307:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010309:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c001030c:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010311:	75 10                	jne    c0010323 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0010313:	83 ec 0c             	sub    esp,0xc
c0010316:	68 41 49 02 c0       	push   0xc0024941
c001031b:	e8 a0 f8 ff ff       	call   c000fbc0 <KePanic(char const*)>
c0010320:	83 c4 10             	add    esp,0x10
c0010323:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010327:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001032a:	89 08                	mov    DWORD PTR [eax],ecx
c001032c:	31 c0                	xor    eax,eax
c001032e:	83 c4 1c             	add    esp,0x1c
c0010331:	5b                   	pop    ebx
c0010332:	5e                   	pop    esi
c0010333:	5f                   	pop    edi
c0010334:	5d                   	pop    ebp
c0010335:	c3                   	ret    

c0010336 <Pipe::read(unsigned long long, void*, int*)>:
c0010336:	55                   	push   ebp
c0010337:	57                   	push   edi
c0010338:	56                   	push   esi
c0010339:	53                   	push   ebx
c001033a:	83 ec 1c             	sub    esp,0x1c
c001033d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010341:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010345:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010349:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001034c:	89 c8                	mov    eax,ecx
c001034e:	99                   	cdq    
c001034f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010353:	74 27                	je     c001037c <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010355:	39 f9                	cmp    ecx,edi
c0010357:	89 d1                	mov    ecx,edx
c0010359:	19 f1                	sbb    ecx,esi
c001035b:	73 1f                	jae    c001037c <Pipe::read(unsigned long long, void*, int*)+0x46>
c001035d:	fa                   	cli    
c001035e:	ff 05 70 da 02 c0    	inc    DWORD PTR ds:0xc002da70
c0010364:	e8 bb 71 00 00       	call   c0017524 <schedule()>
c0010369:	f0 ff 0d 70 da 02 c0 	lock dec DWORD PTR ds:0xc002da70
c0010370:	83 3d 70 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da70,0x0
c0010377:	75 d0                	jne    c0010349 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010379:	fb                   	sti    
c001037a:	eb cd                	jmp    c0010349 <Pipe::read(unsigned long long, void*, int*)+0x13>
c001037c:	39 f8                	cmp    eax,edi
c001037e:	89 d1                	mov    ecx,edx
c0010380:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010383:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010387:	19 f1                	sbb    ecx,esi
c0010389:	73 07                	jae    c0010392 <Pipe::read(unsigned long long, void*, int*)+0x5c>
c001038b:	89 04 24             	mov    DWORD PTR [esp],eax
c001038e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010392:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0010395:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0010398:	29 f7                	sub    edi,esi
c001039a:	89 f8                	mov    eax,edi
c001039c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00103a0:	99                   	cdq    
c00103a1:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00103a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103a8:	19 d0                	sbb    eax,edx
c00103aa:	73 07                	jae    c00103b3 <Pipe::read(unsigned long long, void*, int*)+0x7d>
c00103ac:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00103af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00103b3:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00103b6:	89 ea                	mov    edx,ebp
c00103b8:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00103bc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00103c1:	74 0d                	je     c00103d0 <Pipe::read(unsigned long long, void*, int*)+0x9a>
c00103c3:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00103c6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00103ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00103ce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103d0:	85 d2                	test   edx,edx
c00103d2:	74 11                	je     c00103e5 <Pipe::read(unsigned long long, void*, int*)+0xaf>
c00103d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00103d8:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00103db:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00103df:	89 d1                	mov    ecx,edx
c00103e1:	89 c7                	mov    edi,eax
c00103e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103e8:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00103eb:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103ee:	99                   	cdq    
c00103ef:	89 f7                	mov    edi,esi
c00103f1:	03 04 24             	add    eax,DWORD PTR [esp]
c00103f4:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00103f8:	c1 ff 1f             	sar    edi,0x1f
c00103fb:	57                   	push   edi
c00103fc:	56                   	push   esi
c00103fd:	52                   	push   edx
c00103fe:	50                   	push   eax
c00103ff:	e8 10 1e 01 00       	call   c0022214 <__umoddi3>
c0010404:	83 c4 10             	add    esp,0x10
c0010407:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001040a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001040f:	75 10                	jne    c0010421 <Pipe::read(unsigned long long, void*, int*)+0xeb>
c0010411:	83 ec 0c             	sub    esp,0xc
c0010414:	68 5e 49 02 c0       	push   0xc002495e
c0010419:	e8 a2 f7 ff ff       	call   c000fbc0 <KePanic(char const*)>
c001041e:	83 c4 10             	add    esp,0x10
c0010421:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010425:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010428:	89 10                	mov    DWORD PTR [eax],edx
c001042a:	83 c4 1c             	add    esp,0x1c
c001042d:	31 c0                	xor    eax,eax
c001042f:	5b                   	pop    ebx
c0010430:	5e                   	pop    esi
c0010431:	5f                   	pop    edi
c0010432:	5d                   	pop    ebp
c0010433:	c3                   	ret    

c0010434 <Pipe::Pipe(int)>:
c0010434:	83 ec 0c             	sub    esp,0xc
c0010437:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001043b:	83 ec 08             	sub    esp,0x8
c001043e:	6a 00                	push   0x0
c0010440:	50                   	push   eax
c0010441:	e8 5a 29 00 00       	call   c0012da0 <UnixFile::UnixFile(int)>
c0010446:	83 c4 10             	add    esp,0x10
c0010449:	ba 84 49 02 c0       	mov    edx,0xc0024984
c001044e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010452:	89 10                	mov    DWORD PTR [eax],edx
c0010454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010458:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001045c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001045f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010463:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001046a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001046e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010475:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010479:	83 ec 0c             	sub    esp,0xc
c001047c:	50                   	push   eax
c001047d:	e8 e1 f2 ff ff       	call   c000f763 <malloc>
c0010482:	83 c4 10             	add    esp,0x10
c0010485:	89 c2                	mov    edx,eax
c0010487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001048b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001048e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010492:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010496:	90                   	nop
c0010497:	83 c4 0c             	add    esp,0xc
c001049a:	c3                   	ret    

c001049b <KePowerThread(void*)>:
c001049b:	83 ec 0c             	sub    esp,0xc
c001049e:	f0 ff 0d 70 da 02 c0 	lock dec DWORD PTR ds:0xc002da70
c00104a5:	83 3d 70 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da70,0x0
c00104ac:	75 01                	jne    c00104af <KePowerThread(void*)+0x14>
c00104ae:	fb                   	sti    
c00104af:	c6 05 ac d1 02 c0 00 	mov    BYTE PTR ds:0xc002d1ac,0x0
c00104b6:	50                   	push   eax
c00104b7:	50                   	push   eax
c00104b8:	6a 00                	push   0x0
c00104ba:	6a 0a                	push   0xa
c00104bc:	e8 6f 72 00 00       	call   c0017730 <sleep(unsigned long long)>
c00104c1:	83 05 e4 d1 02 c0 0a 	add    DWORD PTR ds:0xc002d1e4,0xa
c00104c8:	83 c4 10             	add    esp,0x10
c00104cb:	eb e2                	jmp    c00104af <KePowerThread(void*)+0x14>

c00104cd <KeChangePowerSettings(PowerSettings)>:
c00104cd:	57                   	push   edi
c00104ce:	b9 09 00 00 00       	mov    ecx,0x9
c00104d3:	56                   	push   esi
c00104d4:	bf c0 d1 02 c0       	mov    edi,0xc002d1c0
c00104d9:	fc                   	cld    
c00104da:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00104de:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00104e0:	5e                   	pop    esi
c00104e1:	5f                   	pop    edi
c00104e2:	c3                   	ret    

c00104e3 <KeUserIOReceived()>:
c00104e3:	c7 05 e4 d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1e4,0x0
c00104ed:	c3                   	ret    

c00104ee <KeSetupPowerManager()>:
c00104ee:	83 ec 0c             	sub    esp,0xc
c00104f1:	c7 05 e4 d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1e4,0x0
c00104fb:	68 f0 00 00 00       	push   0xf0
c0010500:	c6 05 ac d1 02 c0 00 	mov    BYTE PTR ds:0xc002d1ac,0x0
c0010507:	6a 00                	push   0x0
c0010509:	68 9b 04 01 c0       	push   0xc001049b
c001050e:	ff 35 98 da 02 c0    	push   DWORD PTR ds:0xc002da98
c0010514:	e8 4b 6d 00 00       	call   c0017264 <Process::createThread(void (*)(void*), void*, int)>
c0010519:	c7 05 c0 d1 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002d1c0,0x2
c0010523:	c7 05 c4 d1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d1c4,0x1
c001052d:	c7 05 c8 d1 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002d1c8,0x3
c0010537:	c7 05 cc d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1cc,0x0
c0010541:	c7 05 d8 d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1d8,0x0
c001054b:	c7 05 d0 d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1d0,0x0
c0010555:	c7 05 dc d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1dc,0x0
c001055f:	c7 05 d4 d1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002d1d4,0x3c
c0010569:	c7 05 e0 d1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002d1e0,0x3c
c0010573:	83 c4 1c             	add    esp,0x1c
c0010576:	c3                   	ret    

c0010577 <KePrepareShutdown()>:
c0010577:	83 ec 0c             	sub    esp,0xc
c001057a:	e8 c9 cb ff ff       	call   c000d148 <KeExecuteAtexit()>
c001057f:	83 ec 0c             	sub    esp,0xc
c0010582:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0010587:	ff b0 64 01 00 00    	push   DWORD PTR [eax+0x164]
c001058d:	e8 2a 97 ff ff       	call   c0009cbc <Device::closeAll()>
c0010592:	83 c4 1c             	add    esp,0x1c
c0010595:	c3                   	ret    

c0010596 <KeRegisterShutdownHandler(void (*)())>:
c0010596:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001059a:	a3 a8 d1 02 c0       	mov    ds:0xc002d1a8,eax
c001059f:	c3                   	ret    

c00105a0 <KeRegisterRestartHandler(void (*)())>:
c00105a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105a4:	a3 a4 d1 02 c0       	mov    ds:0xc002d1a4,eax
c00105a9:	c3                   	ret    

c00105aa <KeRegisterSleepHandler(void (*)())>:
c00105aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105ae:	a3 a0 d1 02 c0       	mov    ds:0xc002d1a0,eax
c00105b3:	c3                   	ret    

c00105b4 <KeShutdown()>:
c00105b4:	83 ec 0c             	sub    esp,0xc
c00105b7:	e8 bb ff ff ff       	call   c0010577 <KePrepareShutdown()>
c00105bc:	a1 a8 d1 02 c0       	mov    eax,ds:0xc002d1a8
c00105c1:	85 c0                	test   eax,eax
c00105c3:	74 04                	je     c00105c9 <KeShutdown()+0x15>
c00105c5:	ff d0                	call   eax
c00105c7:	eb 10                	jmp    c00105d9 <KeShutdown()+0x25>
c00105c9:	83 ec 0c             	sub    esp,0xc
c00105cc:	68 98 49 02 c0       	push   0xc0024998
c00105d1:	e8 ea f5 ff ff       	call   c000fbc0 <KePanic(char const*)>
c00105d6:	83 c4 10             	add    esp,0x10
c00105d9:	83 ec 0c             	sub    esp,0xc
c00105dc:	68 b9 49 02 c0       	push   0xc00249b9
c00105e1:	e8 da f5 ff ff       	call   c000fbc0 <KePanic(char const*)>
c00105e6:	83 c4 1c             	add    esp,0x1c
c00105e9:	c3                   	ret    

c00105ea <KeSleep()>:
c00105ea:	a1 a0 d1 02 c0       	mov    eax,ds:0xc002d1a0
c00105ef:	85 c0                	test   eax,eax
c00105f1:	74 02                	je     c00105f5 <KeSleep()+0xb>
c00105f3:	ff e0                	jmp    eax
c00105f5:	c3                   	ret    

c00105f6 <KeHandlePowerButton()>:
c00105f6:	a1 c0 d1 02 c0       	mov    eax,ds:0xc002d1c0
c00105fb:	83 f8 02             	cmp    eax,0x2
c00105fe:	75 02                	jne    c0010602 <KeHandlePowerButton()+0xc>
c0010600:	eb b2                	jmp    c00105b4 <KeShutdown()>
c0010602:	48                   	dec    eax
c0010603:	75 02                	jne    c0010607 <KeHandlePowerButton()+0x11>
c0010605:	eb e3                	jmp    c00105ea <KeSleep()>
c0010607:	c3                   	ret    

c0010608 <KeHandleSleepButton()>:
c0010608:	a1 c4 d1 02 c0       	mov    eax,ds:0xc002d1c4
c001060d:	83 f8 02             	cmp    eax,0x2
c0010610:	75 02                	jne    c0010614 <KeHandleSleepButton()+0xc>
c0010612:	eb a0                	jmp    c00105b4 <KeShutdown()>
c0010614:	48                   	dec    eax
c0010615:	75 02                	jne    c0010619 <KeHandleSleepButton()+0x11>
c0010617:	eb d1                	jmp    c00105ea <KeSleep()>
c0010619:	c3                   	ret    

c001061a <KeRestart()>:
c001061a:	83 ec 0c             	sub    esp,0xc
c001061d:	e8 55 ff ff ff       	call   c0010577 <KePrepareShutdown()>
c0010622:	a1 a4 d1 02 c0       	mov    eax,ds:0xc002d1a4
c0010627:	85 c0                	test   eax,eax
c0010629:	74 02                	je     c001062d <KeRestart()+0x13>
c001062b:	ff d0                	call   eax
c001062d:	83 ec 0c             	sub    esp,0xc
c0010630:	68 dd 49 02 c0       	push   0xc00249dd
c0010635:	e8 86 f5 ff ff       	call   c000fbc0 <KePanic(char const*)>
c001063a:	83 c4 1c             	add    esp,0x1c
c001063d:	c3                   	ret    

c001063e <KeRand()>:
c001063e:	69 05 e8 d1 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002d1e8,0x2875
c0010648:	69 0d ec d1 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002d1ec,0xa2e7b175
c0010652:	53                   	push   ebx
c0010653:	01 c1                	add    ecx,eax
c0010655:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c001065a:	f7 25 e8 d1 02 c0    	mul    DWORD PTR ds:0xc002d1e8
c0010660:	01 ca                	add    edx,ecx
c0010662:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010667:	83 d2 00             	adc    edx,0x0
c001066a:	a3 e8 d1 02 c0       	mov    ds:0xc002d1e8,eax
c001066f:	0f b7 da             	movzx  ebx,dx
c0010672:	89 da                	mov    edx,ebx
c0010674:	89 1d ec d1 02 c0    	mov    DWORD PTR ds:0xc002d1ec,ebx
c001067a:	0f ac d0 0e          	shrd   eax,edx,0xe
c001067e:	5b                   	pop    ebx
c001067f:	c3                   	ret    

c0010680 <KeSeedRand(unsigned int)>:
c0010680:	53                   	push   ebx
c0010681:	83 ec 08             	sub    esp,0x8
c0010684:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010688:	e8 4e a7 00 00       	call   c001addb <HalGetRand()>
c001068d:	c7 05 ec d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1ec,0x0
c0010697:	31 d8                	xor    eax,ebx
c0010699:	a3 e8 d1 02 c0       	mov    ds:0xc002d1e8,eax
c001069e:	e8 9b ff ff ff       	call   c001063e <KeRand()>
c00106a3:	83 c4 08             	add    esp,0x8
c00106a6:	5b                   	pop    ebx
c00106a7:	eb 95                	jmp    c001063e <KeRand()>

c00106a9 <KeInitRand()>:
c00106a9:	83 ec 0c             	sub    esp,0xc
c00106ac:	e8 f8 a4 00 00       	call   c001aba9 <HalQueryPerformanceCounter()>
c00106b1:	0f 20 da             	mov    edx,cr3
c00106b4:	0f 22 da             	mov    cr3,edx
c00106b7:	0f 20 da             	mov    edx,cr3
c00106ba:	0f 22 da             	mov    cr3,edx
c00106bd:	0f 20 da             	mov    edx,cr3
c00106c0:	0f 22 da             	mov    cr3,edx
c00106c3:	0f 20 da             	mov    edx,cr3
c00106c6:	0f 22 da             	mov    cr3,edx
c00106c9:	83 ec 0c             	sub    esp,0xc
c00106cc:	35 03 8a 95 38       	xor    eax,0x38958a03
c00106d1:	50                   	push   eax
c00106d2:	e8 a9 ff ff ff       	call   c0010680 <KeSeedRand(unsigned int)>
c00106d7:	83 c4 1c             	add    esp,0x1c
c00106da:	c3                   	ret    
c00106db:	90                   	nop

c00106dc <KeResolveCompatibilitySymbol(char*)>:
c00106dc:	83 ec 0c             	sub    esp,0xc
c00106df:	83 ec 08             	sub    esp,0x8
c00106e2:	68 ec 49 02 c0       	push   0xc00249ec
c00106e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106eb:	e8 60 00 ff ff       	call   c0000750 <strcmp>
c00106f0:	83 c4 10             	add    esp,0x10
c00106f3:	85 c0                	test   eax,eax
c00106f5:	0f 94 c0             	sete   al
c00106f8:	0f b6 c0             	movzx  eax,al
c00106fb:	85 c0                	test   eax,eax
c00106fd:	74 0d                	je     c001070c <KeResolveCompatibilitySymbol(char*)+0x30>
c00106ff:	b8 08 d1 02 c0       	mov    eax,0xc002d108
c0010704:	e9 3b 02 00 00       	jmp    c0010944 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010709:	8d 76 00             	lea    esi,[esi+0x0]
c001070c:	83 ec 08             	sub    esp,0x8
c001070f:	68 f5 49 02 c0       	push   0xc00249f5
c0010714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010718:	e8 33 00 ff ff       	call   c0000750 <strcmp>
c001071d:	83 c4 10             	add    esp,0x10
c0010720:	85 c0                	test   eax,eax
c0010722:	0f 94 c0             	sete   al
c0010725:	0f b6 c0             	movzx  eax,al
c0010728:	85 c0                	test   eax,eax
c001072a:	74 0c                	je     c0010738 <KeResolveCompatibilitySymbol(char*)+0x5c>
c001072c:	b8 14 21 02 c0       	mov    eax,0xc0022114
c0010731:	e9 0e 02 00 00       	jmp    c0010944 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010736:	66 90                	xchg   ax,ax
c0010738:	83 ec 08             	sub    esp,0x8
c001073b:	68 ff 49 02 c0       	push   0xc00249ff
c0010740:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010744:	e8 07 00 ff ff       	call   c0000750 <strcmp>
c0010749:	83 c4 10             	add    esp,0x10
c001074c:	85 c0                	test   eax,eax
c001074e:	0f 94 c0             	sete   al
c0010751:	0f b6 c0             	movzx  eax,al
c0010754:	85 c0                	test   eax,eax
c0010756:	74 0c                	je     c0010764 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010758:	b8 08 d1 02 c0       	mov    eax,0xc002d108
c001075d:	e9 e2 01 00 00       	jmp    c0010944 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010762:	66 90                	xchg   ax,ax
c0010764:	83 ec 08             	sub    esp,0x8
c0010767:	68 12 4a 02 c0       	push   0xc0024a12
c001076c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010770:	e8 db ff fe ff       	call   c0000750 <strcmp>
c0010775:	83 c4 10             	add    esp,0x10
c0010778:	85 c0                	test   eax,eax
c001077a:	0f 94 c0             	sete   al
c001077d:	0f b6 c0             	movzx  eax,al
c0010780:	85 c0                	test   eax,eax
c0010782:	74 0c                	je     c0010790 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010784:	b8 48 1e 02 c0       	mov    eax,0xc0021e48
c0010789:	e9 b6 01 00 00       	jmp    c0010944 <KeResolveCompatibilitySymbol(char*)+0x268>
c001078e:	66 90                	xchg   ax,ax
c0010790:	83 ec 08             	sub    esp,0x8
c0010793:	68 1b 4a 02 c0       	push   0xc0024a1b
c0010798:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001079c:	e8 af ff fe ff       	call   c0000750 <strcmp>
c00107a1:	83 c4 10             	add    esp,0x10
c00107a4:	85 c0                	test   eax,eax
c00107a6:	0f 94 c0             	sete   al
c00107a9:	0f b6 c0             	movzx  eax,al
c00107ac:	85 c0                	test   eax,eax
c00107ae:	74 0c                	je     c00107bc <KeResolveCompatibilitySymbol(char*)+0xe0>
c00107b0:	b8 c0 fb 00 c0       	mov    eax,0xc000fbc0
c00107b5:	e9 8a 01 00 00       	jmp    c0010944 <KeResolveCompatibilitySymbol(char*)+0x268>
c00107ba:	66 90                	xchg   ax,ax
c00107bc:	83 ec 08             	sub    esp,0x8
c00107bf:	68 2e 4a 02 c0       	push   0xc0024a2e
c00107c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107c8:	e8 83 ff fe ff       	call   c0000750 <strcmp>
c00107cd:	83 c4 10             	add    esp,0x10
c00107d0:	85 c0                	test   eax,eax
c00107d2:	0f 94 c0             	sete   al
c00107d5:	0f b6 c0             	movzx  eax,al
c00107d8:	85 c0                	test   eax,eax
c00107da:	74 0c                	je     c00107e8 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00107dc:	b8 d1 d1 00 c0       	mov    eax,0xc000d1d1
c00107e1:	e9 5e 01 00 00       	jmp    c0010944 <KeResolveCompatibilitySymbol(char*)+0x268>
c00107e6:	66 90                	xchg   ax,ax
c00107e8:	83 ec 08             	sub    esp,0x8
c00107eb:	68 4b 4a 02 c0       	push   0xc0024a4b
c00107f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107f4:	e8 57 ff fe ff       	call   c0000750 <strcmp>
c00107f9:	83 c4 10             	add    esp,0x10
c00107fc:	85 c0                	test   eax,eax
c00107fe:	0f 94 c0             	sete   al
c0010801:	0f b6 c0             	movzx  eax,al
c0010804:	85 c0                	test   eax,eax
c0010806:	74 0c                	je     c0010814 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010808:	b8 14 22 02 c0       	mov    eax,0xc0022214
c001080d:	e9 32 01 00 00       	jmp    c0010944 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010812:	66 90                	xchg   ax,ax
c0010814:	83 ec 08             	sub    esp,0x8
c0010817:	68 55 4a 02 c0       	push   0xc0024a55
c001081c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010820:	e8 2b ff fe ff       	call   c0000750 <strcmp>
c0010825:	83 c4 10             	add    esp,0x10
c0010828:	85 c0                	test   eax,eax
c001082a:	0f 94 c0             	sete   al
c001082d:	0f b6 c0             	movzx  eax,al
c0010830:	85 c0                	test   eax,eax
c0010832:	74 0c                	je     c0010840 <KeResolveCompatibilitySymbol(char*)+0x164>
c0010834:	b8 94 1f 02 c0       	mov    eax,0xc0021f94
c0010839:	e9 06 01 00 00       	jmp    c0010944 <KeResolveCompatibilitySymbol(char*)+0x268>
c001083e:	66 90                	xchg   ax,ax
c0010840:	83 ec 08             	sub    esp,0x8
c0010843:	68 5e 4a 02 c0       	push   0xc0024a5e
c0010848:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001084c:	e8 ff fe fe ff       	call   c0000750 <strcmp>
c0010851:	83 c4 10             	add    esp,0x10
c0010854:	85 c0                	test   eax,eax
c0010856:	0f 94 c0             	sete   al
c0010859:	0f b6 c0             	movzx  eax,al
c001085c:	85 c0                	test   eax,eax
c001085e:	74 0c                	je     c001086c <KeResolveCompatibilitySymbol(char*)+0x190>
c0010860:	b8 0c d1 02 c0       	mov    eax,0xc002d10c
c0010865:	e9 da 00 00 00       	jmp    c0010944 <KeResolveCompatibilitySymbol(char*)+0x268>
c001086a:	66 90                	xchg   ax,ax
c001086c:	83 ec 08             	sub    esp,0x8
c001086f:	68 76 4a 02 c0       	push   0xc0024a76
c0010874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010878:	e8 d3 fe fe ff       	call   c0000750 <strcmp>
c001087d:	83 c4 10             	add    esp,0x10
c0010880:	85 c0                	test   eax,eax
c0010882:	0f 94 c0             	sete   al
c0010885:	0f b6 c0             	movzx  eax,al
c0010888:	85 c0                	test   eax,eax
c001088a:	74 0c                	je     c0010898 <KeResolveCompatibilitySymbol(char*)+0x1bc>
c001088c:	b8 0c d1 02 c0       	mov    eax,0xc002d10c
c0010891:	e9 ae 00 00 00       	jmp    c0010944 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010896:	66 90                	xchg   ax,ax
c0010898:	83 ec 08             	sub    esp,0x8
c001089b:	68 83 4a 02 c0       	push   0xc0024a83
c00108a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108a4:	e8 a7 fe fe ff       	call   c0000750 <strcmp>
c00108a9:	83 c4 10             	add    esp,0x10
c00108ac:	85 c0                	test   eax,eax
c00108ae:	0f 94 c0             	sete   al
c00108b1:	0f b6 c0             	movzx  eax,al
c00108b4:	85 c0                	test   eax,eax
c00108b6:	74 0c                	je     c00108c4 <KeResolveCompatibilitySymbol(char*)+0x1e8>
c00108b8:	b8 0d d1 02 c0       	mov    eax,0xc002d10d
c00108bd:	e9 82 00 00 00       	jmp    c0010944 <KeResolveCompatibilitySymbol(char*)+0x268>
c00108c2:	66 90                	xchg   ax,ax
c00108c4:	83 ec 08             	sub    esp,0x8
c00108c7:	68 90 4a 02 c0       	push   0xc0024a90
c00108cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108d0:	e8 7b fe fe ff       	call   c0000750 <strcmp>
c00108d5:	83 c4 10             	add    esp,0x10
c00108d8:	85 c0                	test   eax,eax
c00108da:	0f 94 c0             	sete   al
c00108dd:	0f b6 c0             	movzx  eax,al
c00108e0:	85 c0                	test   eax,eax
c00108e2:	74 08                	je     c00108ec <KeResolveCompatibilitySymbol(char*)+0x210>
c00108e4:	b8 0c d1 02 c0       	mov    eax,0xc002d10c
c00108e9:	eb 59                	jmp    c0010944 <KeResolveCompatibilitySymbol(char*)+0x268>
c00108eb:	90                   	nop
c00108ec:	83 ec 08             	sub    esp,0x8
c00108ef:	68 a1 4a 02 c0       	push   0xc0024aa1
c00108f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108f8:	e8 53 fe fe ff       	call   c0000750 <strcmp>
c00108fd:	83 c4 10             	add    esp,0x10
c0010900:	85 c0                	test   eax,eax
c0010902:	0f 94 c0             	sete   al
c0010905:	0f b6 c0             	movzx  eax,al
c0010908:	85 c0                	test   eax,eax
c001090a:	74 08                	je     c0010914 <KeResolveCompatibilitySymbol(char*)+0x238>
c001090c:	b8 0d d1 02 c0       	mov    eax,0xc002d10d
c0010911:	eb 31                	jmp    c0010944 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010913:	90                   	nop
c0010914:	83 ec 08             	sub    esp,0x8
c0010917:	68 b2 4a 02 c0       	push   0xc0024ab2
c001091c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010920:	e8 2b fe fe ff       	call   c0000750 <strcmp>
c0010925:	83 c4 10             	add    esp,0x10
c0010928:	85 c0                	test   eax,eax
c001092a:	0f 94 c0             	sete   al
c001092d:	0f b6 c0             	movzx  eax,al
c0010930:	85 c0                	test   eax,eax
c0010932:	74 08                	je     c001093c <KeResolveCompatibilitySymbol(char*)+0x260>
c0010934:	b8 24 7d 01 c0       	mov    eax,0xc0017d24
c0010939:	eb 09                	jmp    c0010944 <KeResolveCompatibilitySymbol(char*)+0x268>
c001093b:	90                   	nop
c001093c:	b8 00 00 00 00       	mov    eax,0x0
c0010941:	8d 76 00             	lea    esi,[esi+0x0]
c0010944:	83 c4 0c             	add    esp,0xc
c0010947:	c3                   	ret    

c0010948 <Semaphore::Semaphore(int)>:
c0010948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001094c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010950:	89 10                	mov    DWORD PTR [eax],edx
c0010952:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010956:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001095d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010961:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010968:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001096c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0010973:	90                   	nop
c0010974:	c3                   	ret    
c0010975:	90                   	nop
c0010976:	66 90                	xchg   ax,ax

c0010978 <Semaphore::tryAcquire()>:
c0010978:	83 ec 0c             	sub    esp,0xc
c001097b:	fa                   	cli    
c001097c:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c0010981:	83 c0 01             	add    eax,0x1
c0010984:	a3 70 da 02 c0       	mov    ds:0xc002da70,eax
c0010989:	a1 6c da 02 c0       	mov    eax,ds:0xc002da6c
c001098e:	83 c0 01             	add    eax,0x1
c0010991:	a3 6c da 02 c0       	mov    ds:0xc002da6c,eax
c0010996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001099a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001099d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00109a3:	39 c2                	cmp    edx,eax
c00109a5:	7d 59                	jge    c0010a00 <Semaphore::tryAcquire()+0x88>
c00109a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ab:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00109ae:	8d 50 01             	lea    edx,[eax+0x1]
c00109b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00109b8:	a1 6c da 02 c0       	mov    eax,ds:0xc002da6c
c00109bd:	83 e8 01             	sub    eax,0x1
c00109c0:	a3 6c da 02 c0       	mov    ds:0xc002da6c,eax
c00109c5:	a1 6c da 02 c0       	mov    eax,ds:0xc002da6c
c00109ca:	85 c0                	test   eax,eax
c00109cc:	75 1a                	jne    c00109e8 <Semaphore::tryAcquire()+0x70>
c00109ce:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c00109d3:	85 c0                	test   eax,eax
c00109d5:	74 11                	je     c00109e8 <Semaphore::tryAcquire()+0x70>
c00109d7:	c7 05 68 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da68,0x0
c00109e1:	e8 3e 6b 00 00       	call   c0017524 <schedule()>
c00109e6:	66 90                	xchg   ax,ax
c00109e8:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c00109f0:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c00109f5:	85 c0                	test   eax,eax
c00109f7:	75 03                	jne    c00109fc <Semaphore::tryAcquire()+0x84>
c00109f9:	fb                   	sti    
c00109fa:	66 90                	xchg   ax,ax
c00109fc:	b0 01                	mov    al,0x1
c00109fe:	eb 48                	jmp    c0010a48 <Semaphore::tryAcquire()+0xd0>
c0010a00:	a1 6c da 02 c0       	mov    eax,ds:0xc002da6c
c0010a05:	83 e8 01             	sub    eax,0x1
c0010a08:	a3 6c da 02 c0       	mov    ds:0xc002da6c,eax
c0010a0d:	a1 6c da 02 c0       	mov    eax,ds:0xc002da6c
c0010a12:	85 c0                	test   eax,eax
c0010a14:	75 1a                	jne    c0010a30 <Semaphore::tryAcquire()+0xb8>
c0010a16:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0010a1b:	85 c0                	test   eax,eax
c0010a1d:	74 11                	je     c0010a30 <Semaphore::tryAcquire()+0xb8>
c0010a1f:	c7 05 68 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da68,0x0
c0010a29:	e8 f6 6a 00 00       	call   c0017524 <schedule()>
c0010a2e:	66 90                	xchg   ax,ax
c0010a30:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c0010a38:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c0010a3d:	85 c0                	test   eax,eax
c0010a3f:	75 03                	jne    c0010a44 <Semaphore::tryAcquire()+0xcc>
c0010a41:	fb                   	sti    
c0010a42:	66 90                	xchg   ax,ax
c0010a44:	b0 00                	mov    al,0x0
c0010a46:	66 90                	xchg   ax,ax
c0010a48:	83 c4 0c             	add    esp,0xc
c0010a4b:	c3                   	ret    

c0010a4c <Semaphore::assertLocked(char const*)>:
c0010a4c:	83 ec 0c             	sub    esp,0xc
c0010a4f:	fa                   	cli    
c0010a50:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c0010a55:	83 c0 01             	add    eax,0x1
c0010a58:	a3 70 da 02 c0       	mov    ds:0xc002da70,eax
c0010a5d:	a1 6c da 02 c0       	mov    eax,ds:0xc002da6c
c0010a62:	83 c0 01             	add    eax,0x1
c0010a65:	a3 6c da 02 c0       	mov    ds:0xc002da6c,eax
c0010a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a6e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010a71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a75:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a77:	39 c2                	cmp    edx,eax
c0010a79:	7d 11                	jge    c0010a8c <Semaphore::assertLocked(char const*)+0x40>
c0010a7b:	83 ec 0c             	sub    esp,0xc
c0010a7e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010a82:	e8 39 f1 ff ff       	call   c000fbc0 <KePanic(char const*)>
c0010a87:	83 c4 10             	add    esp,0x10
c0010a8a:	66 90                	xchg   ax,ax
c0010a8c:	a1 6c da 02 c0       	mov    eax,ds:0xc002da6c
c0010a91:	83 e8 01             	sub    eax,0x1
c0010a94:	a3 6c da 02 c0       	mov    ds:0xc002da6c,eax
c0010a99:	a1 6c da 02 c0       	mov    eax,ds:0xc002da6c
c0010a9e:	85 c0                	test   eax,eax
c0010aa0:	75 1a                	jne    c0010abc <Semaphore::assertLocked(char const*)+0x70>
c0010aa2:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0010aa7:	85 c0                	test   eax,eax
c0010aa9:	74 11                	je     c0010abc <Semaphore::assertLocked(char const*)+0x70>
c0010aab:	c7 05 68 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da68,0x0
c0010ab5:	e8 6a 6a 00 00       	call   c0017524 <schedule()>
c0010aba:	66 90                	xchg   ax,ax
c0010abc:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c0010ac4:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c0010ac9:	85 c0                	test   eax,eax
c0010acb:	75 03                	jne    c0010ad0 <Semaphore::assertLocked(char const*)+0x84>
c0010acd:	fb                   	sti    
c0010ace:	66 90                	xchg   ax,ax
c0010ad0:	90                   	nop
c0010ad1:	83 c4 0c             	add    esp,0xc
c0010ad4:	c3                   	ret    
c0010ad5:	90                   	nop
c0010ad6:	66 90                	xchg   ax,ax

c0010ad8 <Semaphore::acquire(int)>:
c0010ad8:	83 ec 1c             	sub    esp,0x1c
c0010adb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0010ae0:	0f 84 ae 00 00 00    	je     c0010b94 <Semaphore::acquire(int)+0xbc>
c0010ae6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010aee:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0010af3:	90                   	nop
c0010af4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0010af9:	85 c0                	test   eax,eax
c0010afb:	0f 84 87 00 00 00    	je     c0010b88 <Semaphore::acquire(int)+0xb0>
c0010b01:	83 ec 0c             	sub    esp,0xc
c0010b04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010b08:	e8 6b fe ff ff       	call   c0010978 <Semaphore::tryAcquire()>
c0010b0d:	83 c4 10             	add    esp,0x10
c0010b10:	83 f0 01             	xor    eax,0x1
c0010b13:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0010b17:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0010b1b:	83 f0 01             	xor    eax,0x1
c0010b1e:	0f b6 c0             	movzx  eax,al
c0010b21:	85 c0                	test   eax,eax
c0010b23:	75 5f                	jne    c0010b84 <Semaphore::acquire(int)+0xac>
c0010b25:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0010b2a:	7f 34                	jg     c0010b60 <Semaphore::acquire(int)+0x88>
c0010b2c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010b30:	89 d0                	mov    eax,edx
c0010b32:	c1 e0 02             	shl    eax,0x2
c0010b35:	01 d0                	add    eax,edx
c0010b37:	01 c0                	add    eax,eax
c0010b39:	89 c2                	mov    edx,eax
c0010b3b:	c1 fa 1f             	sar    edx,0x1f
c0010b3e:	83 ec 08             	sub    esp,0x8
c0010b41:	52                   	push   edx
c0010b42:	50                   	push   eax
c0010b43:	e8 d0 6b 00 00       	call   c0017718 <milliTenthSleep(unsigned long long)>
c0010b48:	83 c4 10             	add    esp,0x10
c0010b4b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010b4f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0010b53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0010b5b:	eb 97                	jmp    c0010af4 <Semaphore::acquire(int)+0x1c>
c0010b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0010b60:	83 ec 08             	sub    esp,0x8
c0010b63:	6a 00                	push   0x0
c0010b65:	68 90 01 00 00       	push   0x190
c0010b6a:	e8 a9 6b 00 00       	call   c0017718 <milliTenthSleep(unsigned long long)>
c0010b6f:	83 c4 10             	add    esp,0x10
c0010b72:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0010b77:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0010b7c:	e9 73 ff ff ff       	jmp    c0010af4 <Semaphore::acquire(int)+0x1c>
c0010b81:	8d 76 00             	lea    esi,[esi+0x0]
c0010b84:	90                   	nop
c0010b85:	8d 76 00             	lea    esi,[esi+0x0]
c0010b88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b8c:	e9 fb 00 00 00       	jmp    c0010c8c <Semaphore::acquire(int)+0x1b4>
c0010b91:	8d 76 00             	lea    esi,[esi+0x0]
c0010b94:	fa                   	cli    
c0010b95:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c0010b9a:	83 c0 01             	add    eax,0x1
c0010b9d:	a3 70 da 02 c0       	mov    ds:0xc002da70,eax
c0010ba2:	a1 6c da 02 c0       	mov    eax,ds:0xc002da6c
c0010ba7:	83 c0 01             	add    eax,0x1
c0010baa:	a3 6c da 02 c0       	mov    ds:0xc002da6c,eax
c0010baf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bb3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010bb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bba:	8b 00                	mov    eax,DWORD PTR [eax]
c0010bbc:	39 c2                	cmp    edx,eax
c0010bbe:	7d 14                	jge    c0010bd4 <Semaphore::acquire(int)+0xfc>
c0010bc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bc4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010bc7:	8d 50 01             	lea    edx,[eax+0x1]
c0010bca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bce:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010bd1:	eb 6d                	jmp    c0010c40 <Semaphore::acquire(int)+0x168>
c0010bd3:	90                   	nop
c0010bd4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010bd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0010bdb:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010be2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010be6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010be9:	85 c0                	test   eax,eax
c0010beb:	75 13                	jne    c0010c00 <Semaphore::acquire(int)+0x128>
c0010bed:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010bf2:	8b 10                	mov    edx,DWORD PTR [eax]
c0010bf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bf8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bfb:	eb 17                	jmp    c0010c14 <Semaphore::acquire(int)+0x13c>
c0010bfd:	8d 76 00             	lea    esi,[esi+0x0]
c0010c00:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0010c05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c09:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010c0c:	8b 12                	mov    edx,DWORD PTR [edx]
c0010c0e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010c11:	8d 76 00             	lea    esi,[esi+0x0]
c0010c14:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010c19:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c1f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010c22:	83 ec 0c             	sub    esp,0xc
c0010c25:	68 c8 4a 02 c0       	push   0xc0024ac8
c0010c2a:	e8 4d 63 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010c2f:	83 c4 10             	add    esp,0x10
c0010c32:	83 ec 0c             	sub    esp,0xc
c0010c35:	6a 05                	push   0x5
c0010c37:	e8 a8 69 00 00       	call   c00175e4 <blockTask(TaskState)>
c0010c3c:	83 c4 10             	add    esp,0x10
c0010c3f:	90                   	nop
c0010c40:	a1 6c da 02 c0       	mov    eax,ds:0xc002da6c
c0010c45:	83 e8 01             	sub    eax,0x1
c0010c48:	a3 6c da 02 c0       	mov    ds:0xc002da6c,eax
c0010c4d:	a1 6c da 02 c0       	mov    eax,ds:0xc002da6c
c0010c52:	85 c0                	test   eax,eax
c0010c54:	75 1a                	jne    c0010c70 <Semaphore::acquire(int)+0x198>
c0010c56:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0010c5b:	85 c0                	test   eax,eax
c0010c5d:	74 11                	je     c0010c70 <Semaphore::acquire(int)+0x198>
c0010c5f:	c7 05 68 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da68,0x0
c0010c69:	e8 b6 68 00 00       	call   c0017524 <schedule()>
c0010c6e:	66 90                	xchg   ax,ax
c0010c70:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c0010c78:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c0010c7d:	85 c0                	test   eax,eax
c0010c7f:	75 03                	jne    c0010c84 <Semaphore::acquire(int)+0x1ac>
c0010c81:	fb                   	sti    
c0010c82:	66 90                	xchg   ax,ax
c0010c84:	b8 00 00 00 00       	mov    eax,0x0
c0010c89:	8d 76 00             	lea    esi,[esi+0x0]
c0010c8c:	83 c4 1c             	add    esp,0x1c
c0010c8f:	c3                   	ret    

c0010c90 <Semaphore::acquire()>:
c0010c90:	83 ec 0c             	sub    esp,0xc
c0010c93:	83 ec 08             	sub    esp,0x8
c0010c96:	6a 00                	push   0x0
c0010c98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c9c:	e8 37 fe ff ff       	call   c0010ad8 <Semaphore::acquire(int)>
c0010ca1:	83 c4 10             	add    esp,0x10
c0010ca4:	90                   	nop
c0010ca5:	83 c4 0c             	add    esp,0xc
c0010ca8:	c3                   	ret    
c0010ca9:	90                   	nop
c0010caa:	66 90                	xchg   ax,ax

c0010cac <Semaphore::release()>:
c0010cac:	83 ec 1c             	sub    esp,0x1c
c0010caf:	fa                   	cli    
c0010cb0:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c0010cb5:	83 c0 01             	add    eax,0x1
c0010cb8:	a3 70 da 02 c0       	mov    ds:0xc002da70,eax
c0010cbd:	a1 6c da 02 c0       	mov    eax,ds:0xc002da6c
c0010cc2:	83 c0 01             	add    eax,0x1
c0010cc5:	a3 6c da 02 c0       	mov    ds:0xc002da6c,eax
c0010cca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cd1:	85 c0                	test   eax,eax
c0010cd3:	74 2b                	je     c0010d00 <Semaphore::release()+0x54>
c0010cd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cd9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cdc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ce0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ce4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010ce7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ceb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010cee:	83 ec 0c             	sub    esp,0xc
c0010cf1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010cf5:	e8 86 6b 00 00       	call   c0017880 <unblockTask(ThreadControlBlock*)>
c0010cfa:	83 c4 10             	add    esp,0x10
c0010cfd:	eb 15                	jmp    c0010d14 <Semaphore::release()+0x68>
c0010cff:	90                   	nop
c0010d00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010d07:	8d 50 ff             	lea    edx,[eax-0x1]
c0010d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d0e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010d11:	8d 76 00             	lea    esi,[esi+0x0]
c0010d14:	a1 6c da 02 c0       	mov    eax,ds:0xc002da6c
c0010d19:	83 e8 01             	sub    eax,0x1
c0010d1c:	a3 6c da 02 c0       	mov    ds:0xc002da6c,eax
c0010d21:	a1 6c da 02 c0       	mov    eax,ds:0xc002da6c
c0010d26:	85 c0                	test   eax,eax
c0010d28:	75 1a                	jne    c0010d44 <Semaphore::release()+0x98>
c0010d2a:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0010d2f:	85 c0                	test   eax,eax
c0010d31:	74 11                	je     c0010d44 <Semaphore::release()+0x98>
c0010d33:	c7 05 68 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da68,0x0
c0010d3d:	e8 e2 67 00 00       	call   c0017524 <schedule()>
c0010d42:	66 90                	xchg   ax,ax
c0010d44:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c0010d4c:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c0010d51:	85 c0                	test   eax,eax
c0010d53:	75 03                	jne    c0010d58 <Semaphore::release()+0xac>
c0010d55:	fb                   	sti    
c0010d56:	66 90                	xchg   ax,ax
c0010d58:	90                   	nop
c0010d59:	83 c4 1c             	add    esp,0x1c
c0010d5c:	c3                   	ret    

c0010d5d <KiSigKill(int)>:
c0010d5d:	83 ec 0c             	sub    esp,0xc
c0010d60:	6a 00                	push   0x0
c0010d62:	6a 00                	push   0x0
c0010d64:	6a ff                	push   0xffffffff
c0010d66:	6a 01                	push   0x1
c0010d68:	e8 e5 72 01 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010d6d:	83 c4 1c             	add    esp,0x1c
c0010d70:	c3                   	ret    

c0010d71 <KiDefaultSignalHandlerIgnore(int)>:
c0010d71:	c3                   	ret    

c0010d72 <KiDefaultSignalHandlerPause(int)>:
c0010d72:	57                   	push   edi
c0010d73:	b9 07 00 00 00       	mov    ecx,0x7
c0010d78:	56                   	push   esi
c0010d79:	be 23 4b 02 c0       	mov    esi,0xc0024b23
c0010d7e:	83 ec 24             	sub    esp,0x24
c0010d81:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010d85:	fc                   	cld    
c0010d86:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010d88:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010d8c:	50                   	push   eax
c0010d8d:	6a 00                	push   0x0
c0010d8f:	6a 00                	push   0x0
c0010d91:	6a 27                	push   0x27
c0010d93:	e8 ba 72 01 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010d98:	83 c4 34             	add    esp,0x34
c0010d9b:	5e                   	pop    esi
c0010d9c:	5f                   	pop    edi
c0010d9d:	c3                   	ret    

c0010d9e <KiDefaultSignalHandlerResume(int)>:
c0010d9e:	57                   	push   edi
c0010d9f:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010da4:	56                   	push   esi
c0010da5:	be 3f 4b 02 c0       	mov    esi,0xc0024b3f
c0010daa:	83 ec 24             	sub    esp,0x24
c0010dad:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010db1:	fc                   	cld    
c0010db2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010db4:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010db8:	50                   	push   eax
c0010db9:	6a 00                	push   0x0
c0010dbb:	6a 00                	push   0x0
c0010dbd:	6a 27                	push   0x27
c0010dbf:	e8 8e 72 01 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010dc4:	83 c4 34             	add    esp,0x34
c0010dc7:	5e                   	pop    esi
c0010dc8:	5f                   	pop    edi
c0010dc9:	c3                   	ret    

c0010dca <KeDeinitSignals(SigHandlerBlock*)>:
c0010dca:	e9 a4 e9 ff ff       	jmp    c000f773 <free>

c0010dcf <KeInitSignals()>:
c0010dcf:	53                   	push   ebx
c0010dd0:	83 ec 14             	sub    esp,0x14
c0010dd3:	68 c8 00 00 00       	push   0xc8
c0010dd8:	e8 86 e9 ff ff       	call   c000f763 <malloc>
c0010ddd:	83 c4 0c             	add    esp,0xc
c0010de0:	89 c3                	mov    ebx,eax
c0010de2:	6a 04                	push   0x4
c0010de4:	6a 00                	push   0x0
c0010de6:	50                   	push   eax
c0010de7:	e8 04 f7 fe ff       	call   c00004f0 <memset>
c0010dec:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c0010df6:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c0010e00:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010e07:	83 c4 0c             	add    esp,0xc
c0010e0a:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0010e10:	6a 20                	push   0x20
c0010e12:	6a 00                	push   0x0
c0010e14:	50                   	push   eax
c0010e15:	e8 d6 f6 fe ff       	call   c00004f0 <memset>
c0010e1a:	83 c4 0c             	add    esp,0xc
c0010e1d:	6a 44                	push   0x44
c0010e1f:	6a 00                	push   0x0
c0010e21:	53                   	push   ebx
c0010e22:	e8 c9 f6 fe ff       	call   c00004f0 <memset>
c0010e27:	83 c4 0c             	add    esp,0xc
c0010e2a:	8d 83 88 00 00 00    	lea    eax,[ebx+0x88]
c0010e30:	6a 11                	push   0x11
c0010e32:	6a 00                	push   0x0
c0010e34:	50                   	push   eax
c0010e35:	e8 b6 f6 fe ff       	call   c00004f0 <memset>
c0010e3a:	89 d8                	mov    eax,ebx
c0010e3c:	83 c4 18             	add    esp,0x18
c0010e3f:	5b                   	pop    ebx
c0010e40:	c3                   	ret    

c0010e41 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010e41:	53                   	push   ebx
c0010e42:	b8 01 00 00 00       	mov    eax,0x1
c0010e47:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010e4b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e4f:	83 f9 10             	cmp    ecx,0x10
c0010e52:	7f 21                	jg     c0010e75 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010e54:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010e57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e5b:	89 03                	mov    DWORD PTR [ebx],eax
c0010e5d:	b8 01 00 00 00       	mov    eax,0x1
c0010e62:	d3 e0                	shl    eax,cl
c0010e64:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010e68:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010e6b:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010e73:	31 c0                	xor    eax,eax
c0010e75:	5b                   	pop    ebx
c0010e76:	c3                   	ret    

c0010e77 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010e77:	55                   	push   ebp
c0010e78:	57                   	push   edi
c0010e79:	bf 08 00 00 00       	mov    edi,0x8
c0010e7e:	56                   	push   esi
c0010e7f:	53                   	push   ebx
c0010e80:	83 ec 14             	sub    esp,0x14
c0010e83:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010e87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e8b:	68 5c 4b 02 c0       	push   0xc0024b5c
c0010e90:	e8 e7 60 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010e95:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010e9c:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010ea2:	83 c4 10             	add    esp,0x10
c0010ea5:	31 c9                	xor    ecx,ecx
c0010ea7:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010eab:	99                   	cdq    
c0010eac:	f7 ff                	idiv   edi
c0010eae:	8d 42 24             	lea    eax,[edx+0x24]
c0010eb1:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010eb5:	85 f6                	test   esi,esi
c0010eb7:	75 1a                	jne    c0010ed3 <KeRaiseSignal(SigHandlerBlock*, int)+0x5c>
c0010eb9:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010ebd:	89 7c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],edi
c0010ec1:	50                   	push   eax
c0010ec2:	50                   	push   eax
c0010ec3:	52                   	push   edx
c0010ec4:	68 72 4b 02 c0       	push   0xc0024b72
c0010ec9:	e8 ae 60 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010ece:	83 c4 10             	add    esp,0x10
c0010ed1:	eb 1b                	jmp    c0010eee <KeRaiseSignal(SigHandlerBlock*, int)+0x77>
c0010ed3:	41                   	inc    ecx
c0010ed4:	83 f9 08             	cmp    ecx,0x8
c0010ed7:	75 ce                	jne    c0010ea7 <KeRaiseSignal(SigHandlerBlock*, int)+0x30>
c0010ed9:	83 ec 0c             	sub    esp,0xc
c0010edc:	be 01 00 00 00       	mov    esi,0x1
c0010ee1:	68 93 4b 02 c0       	push   0xc0024b93
c0010ee6:	e8 91 60 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010eeb:	83 c4 10             	add    esp,0x10
c0010eee:	83 c4 0c             	add    esp,0xc
c0010ef1:	89 f0                	mov    eax,esi
c0010ef3:	5b                   	pop    ebx
c0010ef4:	5e                   	pop    esi
c0010ef5:	5f                   	pop    edi
c0010ef6:	5d                   	pop    ebp
c0010ef7:	c3                   	ret    

c0010ef8 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010ef8:	55                   	push   ebp
c0010ef9:	57                   	push   edi
c0010efa:	56                   	push   esi
c0010efb:	53                   	push   ebx
c0010efc:	83 ec 1c             	sub    esp,0x1c
c0010eff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010f03:	85 db                	test   ebx,ebx
c0010f05:	0f 84 e0 00 00 00    	je     c0010feb <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0010f0b:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010f12:	0f 84 d3 00 00 00    	je     c0010feb <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0010f18:	31 c9                	xor    ecx,ecx
c0010f1a:	bf 08 00 00 00       	mov    edi,0x8
c0010f1f:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010f25:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010f28:	99                   	cdq    
c0010f29:	f7 ff                	idiv   edi
c0010f2b:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010f32:	85 ed                	test   ebp,ebp
c0010f34:	0f 84 d2 00 00 00    	je     c001100c <KeCheckSignal(SigHandlerBlock*, int*)+0x114>
c0010f3a:	89 e9                	mov    ecx,ebp
c0010f3c:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010f42:	bf 01 00 00 00       	mov    edi,0x1
c0010f47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f4b:	d3 e7                	shl    edi,cl
c0010f4d:	31 c9                	xor    ecx,ecx
c0010f4f:	b8 01 00 00 00       	mov    eax,0x1
c0010f54:	d3 e0                	shl    eax,cl
c0010f56:	85 44 24 0c          	test   DWORD PTR [esp+0xc],eax
c0010f5a:	74 0a                	je     c0010f66 <KeCheckSignal(SigHandlerBlock*, int*)+0x6e>
c0010f5c:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010f60:	0f 85 85 00 00 00    	jne    c0010feb <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0010f66:	41                   	inc    ecx
c0010f67:	83 f9 11             	cmp    ecx,0x11
c0010f6a:	75 e3                	jne    c0010f4f <KeCheckSignal(SigHandlerBlock*, int*)+0x57>
c0010f6c:	46                   	inc    esi
c0010f6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f71:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010f77:	09 f8                	or     eax,edi
c0010f79:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010f84:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010f8a:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010f91:	31 c0                	xor    eax,eax
c0010f93:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010f9b:	74 09                	je     c0010fa6 <KeCheckSignal(SigHandlerBlock*, int*)+0xae>
c0010f9d:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010fa4:	eb 06                	jmp    c0010fac <KeCheckSignal(SigHandlerBlock*, int*)+0xb4>
c0010fa6:	40                   	inc    eax
c0010fa7:	83 f8 08             	cmp    eax,0x8
c0010faa:	75 e7                	jne    c0010f93 <KeCheckSignal(SigHandlerBlock*, int*)+0x9b>
c0010fac:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0010faf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0010fb3:	83 fd 09             	cmp    ebp,0x9
c0010fb6:	89 2a                	mov    DWORD PTR [edx],ebp
c0010fb8:	75 14                	jne    c0010fce <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0010fba:	83 ec 0c             	sub    esp,0xc
c0010fbd:	68 a4 4b 02 c0       	push   0xc0024ba4
c0010fc2:	e8 b5 5f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010fc7:	b8 5d 0d 01 c0       	mov    eax,0xc0010d5d
c0010fcc:	eb 39                	jmp    c0011007 <KeCheckSignal(SigHandlerBlock*, int*)+0x10f>
c0010fce:	83 f8 01             	cmp    eax,0x1
c0010fd1:	75 1c                	jne    c0010fef <KeCheckSignal(SigHandlerBlock*, int*)+0xf7>
c0010fd3:	83 ec 0c             	sub    esp,0xc
c0010fd6:	f7 d7                	not    edi
c0010fd8:	68 ae 4b 02 c0       	push   0xc0024bae
c0010fdd:	e8 9a 5f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010fe2:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010fe8:	83 c4 10             	add    esp,0x10
c0010feb:	31 c0                	xor    eax,eax
c0010fed:	eb 30                	jmp    c001101f <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0010fef:	85 c0                	test   eax,eax
c0010ff1:	75 2c                	jne    c001101f <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0010ff3:	83 ec 0c             	sub    esp,0xc
c0010ff6:	68 bb 4b 02 c0       	push   0xc0024bbb
c0010ffb:	e8 7c 5f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011000:	8b 04 ad c0 6e 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffd9140]
c0011007:	83 c4 10             	add    esp,0x10
c001100a:	eb 13                	jmp    c001101f <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c001100c:	46                   	inc    esi
c001100d:	41                   	inc    ecx
c001100e:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011014:	83 f9 08             	cmp    ecx,0x8
c0011017:	0f 85 02 ff ff ff    	jne    c0010f1f <KeCheckSignal(SigHandlerBlock*, int*)+0x27>
c001101d:	eb cc                	jmp    c0010feb <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c001101f:	83 c4 1c             	add    esp,0x1c
c0011022:	5b                   	pop    ebx
c0011023:	5e                   	pop    esi
c0011024:	5f                   	pop    edi
c0011025:	5d                   	pop    ebp
c0011026:	c3                   	ret    

c0011027 <KiCheckSignalZ>:
c0011027:	80 3d 0c d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d10c,0x0
c001102e:	74 43                	je     c0011073 <KiCheckSignalZ+0x4c>
c0011030:	83 ec 24             	sub    esp,0x24
c0011033:	8d 44 24 14          	lea    eax,[esp+0x14]
c0011037:	50                   	push   eax
c0011038:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001103d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011040:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0011046:	e8 ad fe ff ff       	call   c0010ef8 <KeCheckSignal(SigHandlerBlock*, int*)>
c001104b:	83 c4 10             	add    esp,0x10
c001104e:	31 d2                	xor    edx,edx
c0011050:	85 c0                	test   eax,eax
c0011052:	74 19                	je     c001106d <KiCheckSignalZ+0x46>
c0011054:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001105a:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001105d:	89 02                	mov    DWORD PTR [edx],eax
c001105f:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001106a:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001106d:	89 d0                	mov    eax,edx
c001106f:	83 c4 1c             	add    esp,0x1c
c0011072:	c3                   	ret    
c0011073:	31 d2                	xor    edx,edx
c0011075:	89 d0                	mov    eax,edx
c0011077:	c3                   	ret    

c0011078 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011078:	56                   	push   esi
c0011079:	53                   	push   ebx
c001107a:	bb 01 00 00 00       	mov    ebx,0x1
c001107f:	52                   	push   edx
c0011080:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011084:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011088:	d3 e3                	shl    ebx,cl
c001108a:	83 f9 10             	cmp    ecx,0x10
c001108d:	7f 08                	jg     c0011097 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c001108f:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011095:	75 10                	jne    c00110a7 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011097:	83 ec 0c             	sub    esp,0xc
c001109a:	68 de 4b 02 c0       	push   0xc0024bde
c001109f:	e8 1c eb ff ff       	call   c000fbc0 <KePanic(char const*)>
c00110a4:	83 c4 10             	add    esp,0x10
c00110a7:	f7 d3                	not    ebx
c00110a9:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00110af:	58                   	pop    eax
c00110b0:	5b                   	pop    ebx
c00110b1:	5e                   	pop    esi
c00110b2:	c3                   	ret    

c00110b3 <KiFinishSignalZ>:
c00110b3:	53                   	push   ebx
c00110b4:	83 ec 08             	sub    esp,0x8
c00110b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110c0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00110c3:	83 fa 08             	cmp    edx,0x8
c00110c6:	75 0c                	jne    c00110d4 <KiFinishSignalZ+0x21>
c00110c8:	83 ec 0c             	sub    esp,0xc
c00110cb:	50                   	push   eax
c00110cc:	e8 af 67 00 00       	call   c0017880 <unblockTask(ThreadControlBlock*)>
c00110d1:	83 c4 10             	add    esp,0x10
c00110d4:	50                   	push   eax
c00110d5:	50                   	push   eax
c00110d6:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c00110d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110de:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00110e1:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c00110e7:	e8 8c ff ff ff       	call   c0011078 <KeCompleteSignal(SigHandlerBlock*, int)>
c00110ec:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00110f2:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00110f9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011100:	83 c4 18             	add    esp,0x18
c0011103:	5b                   	pop    ebx
c0011104:	c3                   	ret    

c0011105 <SysSeekDir(regs*)>:
c0011105:	31 c0                	xor    eax,eax
c0011107:	31 d2                	xor    edx,edx
c0011109:	c3                   	ret    

c001110a <SysTellDir(regs*)>:
c001110a:	31 c0                	xor    eax,eax
c001110c:	31 d2                	xor    edx,edx
c001110e:	c3                   	ret    

c001110f <SysVerify(regs*)>:
c001110f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011113:	31 d2                	xor    edx,edx
c0011115:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011118:	c3                   	ret    

c0011119 <SysGetArgc(regs*)>:
c0011119:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001111e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011121:	8b 80 b6 05 00 00    	mov    eax,DWORD PTR [eax+0x5b6]
c0011127:	89 c2                	mov    edx,eax
c0011129:	c1 fa 1f             	sar    edx,0x1f
c001112c:	c3                   	ret    

c001112d <SysTTYName(regs*)>:
c001112d:	b8 01 00 00 00       	mov    eax,0x1
c0011132:	31 d2                	xor    edx,edx
c0011134:	c3                   	ret    

c0011135 <SysFormatDisk(regs*)>:
c0011135:	56                   	push   esi
c0011136:	53                   	push   ebx
c0011137:	83 ec 04             	sub    esp,0x4
c001113a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001113e:	8b 1d 04 c3 02 c0    	mov    ebx,DWORD PTR ds:0xc002c304
c0011144:	eb 28                	jmp    c001116e <SysFormatDisk(regs*)+0x39>
c0011146:	83 ec 0c             	sub    esp,0xc
c0011149:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001114c:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001114f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011151:	51                   	push   ecx
c0011152:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011155:	51                   	push   ecx
c0011156:	50                   	push   eax
c0011157:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c001115e:	50                   	push   eax
c001115f:	53                   	push   ebx
c0011160:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011163:	83 c4 20             	add    esp,0x20
c0011166:	83 f8 08             	cmp    eax,0x8
c0011169:	75 14                	jne    c001117f <SysFormatDisk(regs*)+0x4a>
c001116b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001116e:	85 db                	test   ebx,ebx
c0011170:	75 d4                	jne    c0011146 <SysFormatDisk(regs*)+0x11>
c0011172:	83 c4 04             	add    esp,0x4
c0011175:	b8 03 00 00 00       	mov    eax,0x3
c001117a:	31 d2                	xor    edx,edx
c001117c:	5b                   	pop    ebx
c001117d:	5e                   	pop    esi
c001117e:	c3                   	ret    
c001117f:	85 c0                	test   eax,eax
c0011181:	74 1f                	je     c00111a2 <SysFormatDisk(regs*)+0x6d>
c0011183:	83 f8 09             	cmp    eax,0x9
c0011186:	74 0d                	je     c0011195 <SysFormatDisk(regs*)+0x60>
c0011188:	83 c4 04             	add    esp,0x4
c001118b:	b8 02 00 00 00       	mov    eax,0x2
c0011190:	31 d2                	xor    edx,edx
c0011192:	5b                   	pop    ebx
c0011193:	5e                   	pop    esi
c0011194:	c3                   	ret    
c0011195:	83 c4 04             	add    esp,0x4
c0011198:	b8 01 00 00 00       	mov    eax,0x1
c001119d:	31 d2                	xor    edx,edx
c001119f:	5b                   	pop    ebx
c00111a0:	5e                   	pop    esi
c00111a1:	c3                   	ret    
c00111a2:	83 c4 04             	add    esp,0x4
c00111a5:	31 c0                	xor    eax,eax
c00111a7:	31 d2                	xor    edx,edx
c00111a9:	5b                   	pop    ebx
c00111aa:	5e                   	pop    esi
c00111ab:	c3                   	ret    

c00111ac <SysSetDiskVolumeLabel(regs*)>:
c00111ac:	56                   	push   esi
c00111ad:	53                   	push   ebx
c00111ae:	83 ec 04             	sub    esp,0x4
c00111b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00111b5:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00111b8:	83 f8 19             	cmp    eax,0x19
c00111bb:	77 33                	ja     c00111f0 <SysSetDiskVolumeLabel(regs*)+0x44>
c00111bd:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c00111c4:	85 c9                	test   ecx,ecx
c00111c6:	74 28                	je     c00111f0 <SysSetDiskVolumeLabel(regs*)+0x44>
c00111c8:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00111cb:	85 db                	test   ebx,ebx
c00111cd:	74 21                	je     c00111f0 <SysSetDiskVolumeLabel(regs*)+0x44>
c00111cf:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00111d5:	85 d2                	test   edx,edx
c00111d7:	74 17                	je     c00111f0 <SysSetDiskVolumeLabel(regs*)+0x44>
c00111d9:	8b 32                	mov    esi,DWORD PTR [edx]
c00111db:	53                   	push   ebx
c00111dc:	50                   	push   eax
c00111dd:	51                   	push   ecx
c00111de:	52                   	push   edx
c00111df:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c00111e2:	83 c4 10             	add    esp,0x10
c00111e5:	89 c2                	mov    edx,eax
c00111e7:	83 c4 04             	add    esp,0x4
c00111ea:	c1 fa 1f             	sar    edx,0x1f
c00111ed:	5b                   	pop    ebx
c00111ee:	5e                   	pop    esi
c00111ef:	c3                   	ret    
c00111f0:	83 c4 04             	add    esp,0x4
c00111f3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00111f8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00111fd:	5b                   	pop    ebx
c00111fe:	5e                   	pop    esi
c00111ff:	c3                   	ret    

c0011200 <SysGetDiskVolumeLabel(regs*)>:
c0011200:	57                   	push   edi
c0011201:	56                   	push   esi
c0011202:	53                   	push   ebx
c0011203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011207:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001120a:	83 fa 19             	cmp    edx,0x19
c001120d:	77 3c                	ja     c001124b <SysGetDiskVolumeLabel(regs*)+0x4b>
c001120f:	8b 0c 95 e0 ca 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd3520]
c0011216:	85 c9                	test   ecx,ecx
c0011218:	74 31                	je     c001124b <SysGetDiskVolumeLabel(regs*)+0x4b>
c001121a:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001121d:	85 db                	test   ebx,ebx
c001121f:	74 2a                	je     c001124b <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011221:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011224:	85 f6                	test   esi,esi
c0011226:	74 23                	je     c001124b <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011228:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c001122e:	85 c0                	test   eax,eax
c0011230:	74 19                	je     c001124b <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011232:	83 ec 0c             	sub    esp,0xc
c0011235:	8b 38                	mov    edi,DWORD PTR [eax]
c0011237:	56                   	push   esi
c0011238:	53                   	push   ebx
c0011239:	52                   	push   edx
c001123a:	51                   	push   ecx
c001123b:	50                   	push   eax
c001123c:	ff 57 58             	call   DWORD PTR [edi+0x58]
c001123f:	83 c4 20             	add    esp,0x20
c0011242:	89 c2                	mov    edx,eax
c0011244:	5b                   	pop    ebx
c0011245:	c1 fa 1f             	sar    edx,0x1f
c0011248:	5e                   	pop    esi
c0011249:	5f                   	pop    edi
c001124a:	c3                   	ret    
c001124b:	5b                   	pop    ebx
c001124c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011251:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011256:	5e                   	pop    esi
c0011257:	5f                   	pop    edi
c0011258:	c3                   	ret    

c0011259 <SysRealpath(regs*)>:
c0011259:	83 ec 0c             	sub    esp,0xc
c001125c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011260:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011263:	85 d2                	test   edx,edx
c0011265:	74 07                	je     c001126e <SysRealpath(regs*)+0x15>
c0011267:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001126a:	85 c0                	test   eax,eax
c001126c:	75 0b                	jne    c0011279 <SysRealpath(regs*)+0x20>
c001126e:	b8 01 00 00 00       	mov    eax,0x1
c0011273:	31 d2                	xor    edx,edx
c0011275:	83 c4 0c             	add    esp,0xc
c0011278:	c3                   	ret    
c0011279:	6a 00                	push   0x0
c001127b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011281:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0011284:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001128a:	51                   	push   ecx
c001128b:	52                   	push   edx
c001128c:	50                   	push   eax
c001128d:	e8 e0 6b ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011292:	83 c4 10             	add    esp,0x10
c0011295:	31 c0                	xor    eax,eax
c0011297:	31 d2                	xor    edx,edx
c0011299:	83 c4 0c             	add    esp,0xc
c001129c:	c3                   	ret    

c001129d <SysReadDir(regs*)>:
c001129d:	53                   	push   ebx
c001129e:	83 ec 18             	sub    esp,0x18
c00112a1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00112a5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00112a8:	83 f8 02             	cmp    eax,0x2
c00112ab:	76 61                	jbe    c001130e <SysReadDir(regs*)+0x71>
c00112ad:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00112b4:	77 49                	ja     c00112ff <SysReadDir(regs*)+0x62>
c00112b6:	83 ec 0c             	sub    esp,0xc
c00112b9:	50                   	push   eax
c00112ba:	e8 d6 1d 00 00       	call   c0013095 <KeGetFileFromDescriptor(int)>
c00112bf:	83 c4 10             	add    esp,0x10
c00112c2:	85 c0                	test   eax,eax
c00112c4:	74 39                	je     c00112ff <SysReadDir(regs*)+0x62>
c00112c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00112ce:	83 ec 0c             	sub    esp,0xc
c00112d1:	8b 10                	mov    edx,DWORD PTR [eax]
c00112d3:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00112d7:	51                   	push   ecx
c00112d8:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00112db:	51                   	push   ecx
c00112dc:	6a 00                	push   0x0
c00112de:	68 10 01 00 00       	push   0x110
c00112e3:	50                   	push   eax
c00112e4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00112e7:	83 c4 20             	add    esp,0x20
c00112ea:	85 c0                	test   eax,eax
c00112ec:	74 29                	je     c0011317 <SysReadDir(regs*)+0x7a>
c00112ee:	83 f8 07             	cmp    eax,0x7
c00112f1:	74 1b                	je     c001130e <SysReadDir(regs*)+0x71>
c00112f3:	b8 02 00 00 00       	mov    eax,0x2
c00112f8:	31 d2                	xor    edx,edx
c00112fa:	83 c4 18             	add    esp,0x18
c00112fd:	5b                   	pop    ebx
c00112fe:	c3                   	ret    
c00112ff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011304:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011309:	83 c4 18             	add    esp,0x18
c001130c:	5b                   	pop    ebx
c001130d:	c3                   	ret    
c001130e:	b8 01 00 00 00       	mov    eax,0x1
c0011313:	31 d2                	xor    edx,edx
c0011315:	eb e3                	jmp    c00112fa <SysReadDir(regs*)+0x5d>
c0011317:	31 c0                	xor    eax,eax
c0011319:	31 d2                	xor    edx,edx
c001131b:	eb dd                	jmp    c00112fa <SysReadDir(regs*)+0x5d>

c001131d <SysIsATTY(regs*)>:
c001131d:	83 ec 0c             	sub    esp,0xc
c0011320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011324:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011327:	83 f8 02             	cmp    eax,0x2
c001132a:	76 07                	jbe    c0011333 <SysIsATTY(regs*)+0x16>
c001132c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011331:	75 26                	jne    c0011359 <SysIsATTY(regs*)+0x3c>
c0011333:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011338:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001133b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0011341:	85 c0                	test   eax,eax
c0011343:	74 24                	je     c0011369 <SysIsATTY(regs*)+0x4c>
c0011345:	83 ec 0c             	sub    esp,0xc
c0011348:	8b 10                	mov    edx,DWORD PTR [eax]
c001134a:	50                   	push   eax
c001134b:	ff 12                	call   DWORD PTR [edx]
c001134d:	31 d2                	xor    edx,edx
c001134f:	0f b6 c0             	movzx  eax,al
c0011352:	83 c4 10             	add    esp,0x10
c0011355:	83 c4 0c             	add    esp,0xc
c0011358:	c3                   	ret    
c0011359:	83 ec 0c             	sub    esp,0xc
c001135c:	50                   	push   eax
c001135d:	e8 33 1d 00 00       	call   c0013095 <KeGetFileFromDescriptor(int)>
c0011362:	83 c4 10             	add    esp,0x10
c0011365:	85 c0                	test   eax,eax
c0011367:	75 dc                	jne    c0011345 <SysIsATTY(regs*)+0x28>
c0011369:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001136e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011373:	83 c4 0c             	add    esp,0xc
c0011376:	c3                   	ret    

c0011377 <SysSeek(regs*)>:
c0011377:	53                   	push   ebx
c0011378:	83 ec 08             	sub    esp,0x8
c001137b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001137f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011382:	8d 50 fd             	lea    edx,[eax-0x3]
c0011385:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001138b:	77 39                	ja     c00113c6 <SysSeek(regs*)+0x4f>
c001138d:	83 ec 0c             	sub    esp,0xc
c0011390:	50                   	push   eax
c0011391:	e8 ff 1c 00 00       	call   c0013095 <KeGetFileFromDescriptor(int)>
c0011396:	83 c4 10             	add    esp,0x10
c0011399:	85 c0                	test   eax,eax
c001139b:	74 29                	je     c00113c6 <SysSeek(regs*)+0x4f>
c001139d:	83 ec 04             	sub    esp,0x4
c00113a0:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00113a3:	31 db                	xor    ebx,ebx
c00113a5:	53                   	push   ebx
c00113a6:	51                   	push   ecx
c00113a7:	50                   	push   eax
c00113a8:	e8 b9 6e ff ff       	call   c0008266 <File::seek(unsigned long long)>
c00113ad:	83 c4 10             	add    esp,0x10
c00113b0:	85 c0                	test   eax,eax
c00113b2:	0f 95 c0             	setne  al
c00113b5:	31 d2                	xor    edx,edx
c00113b7:	0f b6 c0             	movzx  eax,al
c00113ba:	f7 d8                	neg    eax
c00113bc:	83 d2 00             	adc    edx,0x0
c00113bf:	83 c4 08             	add    esp,0x8
c00113c2:	f7 da                	neg    edx
c00113c4:	5b                   	pop    ebx
c00113c5:	c3                   	ret    
c00113c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113cb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113d0:	83 c4 08             	add    esp,0x8
c00113d3:	5b                   	pop    ebx
c00113d4:	c3                   	ret    

c00113d5 <SysTell(regs*)>:
c00113d5:	53                   	push   ebx
c00113d6:	83 ec 08             	sub    esp,0x8
c00113d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00113dd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00113e0:	83 f8 02             	cmp    eax,0x2
c00113e3:	76 56                	jbe    c001143b <SysTell(regs*)+0x66>
c00113e5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00113ea:	76 19                	jbe    c0011405 <SysTell(regs*)+0x30>
c00113ec:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00113ef:	31 d2                	xor    edx,edx
c00113f1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00113f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00113fe:	31 c0                	xor    eax,eax
c0011400:	83 c4 08             	add    esp,0x8
c0011403:	5b                   	pop    ebx
c0011404:	c3                   	ret    
c0011405:	83 ec 0c             	sub    esp,0xc
c0011408:	50                   	push   eax
c0011409:	e8 87 1c 00 00       	call   c0013095 <KeGetFileFromDescriptor(int)>
c001140e:	83 c4 10             	add    esp,0x10
c0011411:	85 c0                	test   eax,eax
c0011413:	74 26                	je     c001143b <SysTell(regs*)+0x66>
c0011415:	83 ec 08             	sub    esp,0x8
c0011418:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001141b:	52                   	push   edx
c001141c:	50                   	push   eax
c001141d:	e8 f0 6e ff ff       	call   c0008312 <File::tell(unsigned long long*)>
c0011422:	83 c4 10             	add    esp,0x10
c0011425:	85 c0                	test   eax,eax
c0011427:	0f 95 c0             	setne  al
c001142a:	31 d2                	xor    edx,edx
c001142c:	0f b6 c0             	movzx  eax,al
c001142f:	f7 d8                	neg    eax
c0011431:	83 d2 00             	adc    edx,0x0
c0011434:	83 c4 08             	add    esp,0x8
c0011437:	f7 da                	neg    edx
c0011439:	5b                   	pop    ebx
c001143a:	c3                   	ret    
c001143b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011440:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011445:	83 c4 08             	add    esp,0x8
c0011448:	5b                   	pop    ebx
c0011449:	c3                   	ret    

c001144a <SysSize(regs*)>:
c001144a:	53                   	push   ebx
c001144b:	83 ec 18             	sub    esp,0x18
c001144e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011452:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011455:	83 f8 02             	cmp    eax,0x2
c0011458:	76 5b                	jbe    c00114b5 <SysSize(regs*)+0x6b>
c001145a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001145f:	76 19                	jbe    c001147a <SysSize(regs*)+0x30>
c0011461:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011464:	31 d2                	xor    edx,edx
c0011466:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001146c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011473:	31 c0                	xor    eax,eax
c0011475:	83 c4 18             	add    esp,0x18
c0011478:	5b                   	pop    ebx
c0011479:	c3                   	ret    
c001147a:	83 ec 0c             	sub    esp,0xc
c001147d:	50                   	push   eax
c001147e:	e8 12 1c 00 00       	call   c0013095 <KeGetFileFromDescriptor(int)>
c0011483:	83 c4 10             	add    esp,0x10
c0011486:	85 c0                	test   eax,eax
c0011488:	74 2b                	je     c00114b5 <SysSize(regs*)+0x6b>
c001148a:	83 ec 04             	sub    esp,0x4
c001148d:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011491:	52                   	push   edx
c0011492:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011495:	52                   	push   edx
c0011496:	50                   	push   eax
c0011497:	e8 0e 70 ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c001149c:	83 c4 10             	add    esp,0x10
c001149f:	85 c0                	test   eax,eax
c00114a1:	0f 95 c0             	setne  al
c00114a4:	31 d2                	xor    edx,edx
c00114a6:	0f b6 c0             	movzx  eax,al
c00114a9:	f7 d8                	neg    eax
c00114ab:	83 d2 00             	adc    edx,0x0
c00114ae:	83 c4 18             	add    esp,0x18
c00114b1:	f7 da                	neg    edx
c00114b3:	5b                   	pop    ebx
c00114b4:	c3                   	ret    
c00114b5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114ba:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114bf:	83 c4 18             	add    esp,0x18
c00114c2:	5b                   	pop    ebx
c00114c3:	c3                   	ret    

c00114c4 <SysSizeFromFilename(regs*)>:
c00114c4:	55                   	push   ebp
c00114c5:	57                   	push   edi
c00114c6:	56                   	push   esi
c00114c7:	53                   	push   ebx
c00114c8:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00114ce:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00114d5:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00114d8:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00114db:	85 f6                	test   esi,esi
c00114dd:	74 34                	je     c0011513 <SysSizeFromFilename(regs*)+0x4f>
c00114df:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00114e5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00114e8:	83 f8 02             	cmp    eax,0x2
c00114eb:	76 2d                	jbe    c001151a <SysSizeFromFilename(regs*)+0x56>
c00114ed:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00114f2:	76 3b                	jbe    c001152f <SysSizeFromFilename(regs*)+0x6b>
c00114f4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00114f7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00114fd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011504:	81 c4 4c 02 00 00    	add    esp,0x24c
c001150a:	31 c0                	xor    eax,eax
c001150c:	5b                   	pop    ebx
c001150d:	31 d2                	xor    edx,edx
c001150f:	5e                   	pop    esi
c0011510:	5f                   	pop    edi
c0011511:	5d                   	pop    ebp
c0011512:	c3                   	ret    
c0011513:	89 f8                	mov    eax,edi
c0011515:	83 f8 02             	cmp    eax,0x2
c0011518:	77 d3                	ja     c00114ed <SysSizeFromFilename(regs*)+0x29>
c001151a:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011520:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011525:	5b                   	pop    ebx
c0011526:	ba ff ff ff ff       	mov    edx,0xffffffff
c001152b:	5e                   	pop    esi
c001152c:	5f                   	pop    edi
c001152d:	5d                   	pop    ebp
c001152e:	c3                   	ret    
c001152f:	83 ec 0c             	sub    esp,0xc
c0011532:	68 14 01 00 00       	push   0x114
c0011537:	e8 27 e2 ff ff       	call   c000f763 <malloc>
c001153c:	6a 01                	push   0x1
c001153e:	89 c5                	mov    ebp,eax
c0011540:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011545:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011548:	50                   	push   eax
c0011549:	57                   	push   edi
c001154a:	55                   	push   ebp
c001154b:	e8 3c 6b ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c0011550:	83 c4 20             	add    esp,0x20
c0011553:	85 ed                	test   ebp,ebp
c0011555:	74 c3                	je     c001151a <SysSizeFromFilename(regs*)+0x56>
c0011557:	83 ec 04             	sub    esp,0x4
c001155a:	8d 44 24 13          	lea    eax,[esp+0x13]
c001155e:	50                   	push   eax
c001155f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011562:	51                   	push   ecx
c0011563:	55                   	push   ebp
c0011564:	e8 41 6f ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c0011569:	89 c3                	mov    ebx,eax
c001156b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001156e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011571:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011574:	83 c4 10             	add    esp,0x10
c0011577:	85 db                	test   ebx,ebx
c0011579:	75 9f                	jne    c001151a <SysSizeFromFilename(regs*)+0x56>
c001157b:	6a 00                	push   0x0
c001157d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011582:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011585:	05 0c 01 00 00       	add    eax,0x10c
c001158a:	50                   	push   eax
c001158b:	57                   	push   edi
c001158c:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0011593:	53                   	push   ebx
c0011594:	e8 d9 68 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011599:	58                   	pop    eax
c001159a:	5a                   	pop    edx
c001159b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001159f:	50                   	push   eax
c00115a0:	53                   	push   ebx
c00115a1:	e8 53 63 ff ff       	call   c00078f9 <KeDereferenceSymlink(char const*, char*)>
c00115a6:	83 c4 10             	add    esp,0x10
c00115a9:	83 f8 01             	cmp    eax,0x1
c00115ac:	74 1a                	je     c00115c8 <SysSizeFromFilename(regs*)+0x104>
c00115ae:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00115b3:	74 26                	je     c00115db <SysSizeFromFilename(regs*)+0x117>
c00115b5:	85 f6                	test   esi,esi
c00115b7:	0f 84 47 ff ff ff    	je     c0011504 <SysSizeFromFilename(regs*)+0x40>
c00115bd:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00115c3:	e9 3c ff ff ff       	jmp    c0011504 <SysSizeFromFilename(regs*)+0x40>
c00115c8:	85 f6                	test   esi,esi
c00115ca:	0f 84 34 ff ff ff    	je     c0011504 <SysSizeFromFilename(regs*)+0x40>
c00115d0:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00115d6:	e9 29 ff ff ff       	jmp    c0011504 <SysSizeFromFilename(regs*)+0x40>
c00115db:	85 f6                	test   esi,esi
c00115dd:	0f 84 21 ff ff ff    	je     c0011504 <SysSizeFromFilename(regs*)+0x40>
c00115e3:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00115e9:	e9 16 ff ff ff       	jmp    c0011504 <SysSizeFromFilename(regs*)+0x40>

c00115ee <SysSizeFromFilenameNoSymlink(regs*)>:
c00115ee:	55                   	push   ebp
c00115ef:	57                   	push   edi
c00115f0:	56                   	push   esi
c00115f1:	53                   	push   ebx
c00115f2:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00115f8:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00115ff:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011602:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011605:	85 f6                	test   esi,esi
c0011607:	74 34                	je     c001163d <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c0011609:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001160f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011612:	83 f8 02             	cmp    eax,0x2
c0011615:	76 2d                	jbe    c0011644 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0011617:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001161c:	76 3b                	jbe    c0011659 <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c001161e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011621:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011627:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001162e:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011634:	31 c0                	xor    eax,eax
c0011636:	5b                   	pop    ebx
c0011637:	31 d2                	xor    edx,edx
c0011639:	5e                   	pop    esi
c001163a:	5f                   	pop    edi
c001163b:	5d                   	pop    ebp
c001163c:	c3                   	ret    
c001163d:	89 f8                	mov    eax,edi
c001163f:	83 f8 02             	cmp    eax,0x2
c0011642:	77 d3                	ja     c0011617 <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0011644:	81 c4 4c 02 00 00    	add    esp,0x24c
c001164a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001164f:	5b                   	pop    ebx
c0011650:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011655:	5e                   	pop    esi
c0011656:	5f                   	pop    edi
c0011657:	5d                   	pop    ebp
c0011658:	c3                   	ret    
c0011659:	83 ec 0c             	sub    esp,0xc
c001165c:	68 14 01 00 00       	push   0x114
c0011661:	e8 fd e0 ff ff       	call   c000f763 <malloc>
c0011666:	6a 00                	push   0x0
c0011668:	89 c5                	mov    ebp,eax
c001166a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001166f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011672:	50                   	push   eax
c0011673:	57                   	push   edi
c0011674:	55                   	push   ebp
c0011675:	e8 12 6a ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c001167a:	83 c4 20             	add    esp,0x20
c001167d:	85 ed                	test   ebp,ebp
c001167f:	74 c3                	je     c0011644 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0011681:	83 ec 04             	sub    esp,0x4
c0011684:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011688:	50                   	push   eax
c0011689:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001168c:	51                   	push   ecx
c001168d:	55                   	push   ebp
c001168e:	e8 17 6e ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c0011693:	89 c3                	mov    ebx,eax
c0011695:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011698:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001169b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001169e:	83 c4 10             	add    esp,0x10
c00116a1:	85 db                	test   ebx,ebx
c00116a3:	75 9f                	jne    c0011644 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00116a5:	6a 00                	push   0x0
c00116a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116ac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116af:	05 0c 01 00 00       	add    eax,0x10c
c00116b4:	50                   	push   eax
c00116b5:	57                   	push   edi
c00116b6:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00116bd:	53                   	push   ebx
c00116be:	e8 af 67 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00116c3:	58                   	pop    eax
c00116c4:	5a                   	pop    edx
c00116c5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00116c9:	50                   	push   eax
c00116ca:	53                   	push   ebx
c00116cb:	e8 29 62 ff ff       	call   c00078f9 <KeDereferenceSymlink(char const*, char*)>
c00116d0:	83 c4 10             	add    esp,0x10
c00116d3:	83 f8 01             	cmp    eax,0x1
c00116d6:	74 1a                	je     c00116f2 <SysSizeFromFilenameNoSymlink(regs*)+0x104>
c00116d8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00116dd:	74 26                	je     c0011705 <SysSizeFromFilenameNoSymlink(regs*)+0x117>
c00116df:	85 f6                	test   esi,esi
c00116e1:	0f 84 47 ff ff ff    	je     c001162e <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00116e7:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00116ed:	e9 3c ff ff ff       	jmp    c001162e <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00116f2:	85 f6                	test   esi,esi
c00116f4:	0f 84 34 ff ff ff    	je     c001162e <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00116fa:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011700:	e9 29 ff ff ff       	jmp    c001162e <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011705:	85 f6                	test   esi,esi
c0011707:	0f 84 21 ff ff ff    	je     c001162e <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001170d:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011713:	e9 16 ff ff ff       	jmp    c001162e <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c0011718 <SysClose(regs*)>:
c0011718:	53                   	push   ebx
c0011719:	83 ec 08             	sub    esp,0x8
c001171c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011720:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011723:	83 f8 02             	cmp    eax,0x2
c0011726:	76 41                	jbe    c0011769 <SysClose(regs*)+0x51>
c0011728:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001172e:	83 fa 01             	cmp    edx,0x1
c0011731:	76 2d                	jbe    c0011760 <SysClose(regs*)+0x48>
c0011733:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011738:	77 2f                	ja     c0011769 <SysClose(regs*)+0x51>
c001173a:	83 ec 0c             	sub    esp,0xc
c001173d:	50                   	push   eax
c001173e:	e8 52 19 00 00       	call   c0013095 <KeGetFileFromDescriptor(int)>
c0011743:	83 c4 10             	add    esp,0x10
c0011746:	89 c3                	mov    ebx,eax
c0011748:	85 c0                	test   eax,eax
c001174a:	74 1d                	je     c0011769 <SysClose(regs*)+0x51>
c001174c:	83 ec 0c             	sub    esp,0xc
c001174f:	50                   	push   eax
c0011750:	e8 b1 6a ff ff       	call   c0008206 <File::close()>
c0011755:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011757:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001175a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001175d:	83 c4 10             	add    esp,0x10
c0011760:	31 c0                	xor    eax,eax
c0011762:	31 d2                	xor    edx,edx
c0011764:	83 c4 08             	add    esp,0x8
c0011767:	5b                   	pop    ebx
c0011768:	c3                   	ret    
c0011769:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001176e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011773:	83 c4 08             	add    esp,0x8
c0011776:	5b                   	pop    ebx
c0011777:	c3                   	ret    

c0011778 <SysOpenDir(regs*)>:
c0011778:	56                   	push   esi
c0011779:	53                   	push   ebx
c001177a:	83 ec 04             	sub    esp,0x4
c001177d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011781:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011784:	85 c9                	test   ecx,ecx
c0011786:	74 5d                	je     c00117e5 <SysOpenDir(regs*)+0x6d>
c0011788:	83 ec 0c             	sub    esp,0xc
c001178b:	68 14 01 00 00       	push   0x114
c0011790:	e8 ce df ff ff       	call   c000f763 <malloc>
c0011795:	83 c4 0c             	add    esp,0xc
c0011798:	89 c6                	mov    esi,eax
c001179a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001179f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117a2:	50                   	push   eax
c00117a3:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00117a6:	52                   	push   edx
c00117a7:	56                   	push   esi
c00117a8:	e8 bd 6e ff ff       	call   c000866a <Directory::Directory(char const*, Process*)>
c00117ad:	83 c4 10             	add    esp,0x10
c00117b0:	85 f6                	test   esi,esi
c00117b2:	74 31                	je     c00117e5 <SysOpenDir(regs*)+0x6d>
c00117b4:	83 ec 0c             	sub    esp,0xc
c00117b7:	56                   	push   esi
c00117b8:	e8 75 6f ff ff       	call   c0008732 <Directory::open()>
c00117bd:	83 c4 10             	add    esp,0x10
c00117c0:	85 c0                	test   eax,eax
c00117c2:	75 21                	jne    c00117e5 <SysOpenDir(regs*)+0x6d>
c00117c4:	83 ec 0c             	sub    esp,0xc
c00117c7:	56                   	push   esi
c00117c8:	e8 cb 15 00 00       	call   c0012d98 <UnixFile::getFileDescriptor()>
c00117cd:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00117d0:	83 c4 10             	add    esp,0x10
c00117d3:	89 02                	mov    DWORD PTR [edx],eax
c00117d5:	c1 f8 1f             	sar    eax,0x1f
c00117d8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00117db:	83 c4 04             	add    esp,0x4
c00117de:	31 c0                	xor    eax,eax
c00117e0:	31 d2                	xor    edx,edx
c00117e2:	5b                   	pop    ebx
c00117e3:	5e                   	pop    esi
c00117e4:	c3                   	ret    
c00117e5:	83 c4 04             	add    esp,0x4
c00117e8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00117ed:	ba ff ff ff ff       	mov    edx,0xffffffff
c00117f2:	5b                   	pop    ebx
c00117f3:	5e                   	pop    esi
c00117f4:	c3                   	ret    

c00117f5 <SysMakeDir(regs*)>:
c00117f5:	56                   	push   esi
c00117f6:	53                   	push   ebx
c00117f7:	83 ec 10             	sub    esp,0x10
c00117fa:	68 14 01 00 00       	push   0x114
c00117ff:	e8 5f df ff ff       	call   c000f763 <malloc>
c0011804:	83 c4 0c             	add    esp,0xc
c0011807:	89 c3                	mov    ebx,eax
c0011809:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001180e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011811:	50                   	push   eax
c0011812:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011816:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011819:	52                   	push   edx
c001181a:	53                   	push   ebx
c001181b:	e8 4a 6e ff ff       	call   c000866a <Directory::Directory(char const*, Process*)>
c0011820:	83 c4 10             	add    esp,0x10
c0011823:	85 db                	test   ebx,ebx
c0011825:	74 2c                	je     c0011853 <SysMakeDir(regs*)+0x5e>
c0011827:	83 ec 0c             	sub    esp,0xc
c001182a:	53                   	push   ebx
c001182b:	e8 e2 70 ff ff       	call   c0008912 <Directory::create()>
c0011830:	89 c6                	mov    esi,eax
c0011832:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011837:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001183a:	83 c4 10             	add    esp,0x10
c001183d:	31 c0                	xor    eax,eax
c001183f:	85 f6                	test   esi,esi
c0011841:	0f 95 c0             	setne  al
c0011844:	31 d2                	xor    edx,edx
c0011846:	f7 d8                	neg    eax
c0011848:	83 d2 00             	adc    edx,0x0
c001184b:	83 c4 04             	add    esp,0x4
c001184e:	f7 da                	neg    edx
c0011850:	5b                   	pop    ebx
c0011851:	5e                   	pop    esi
c0011852:	c3                   	ret    
c0011853:	83 c4 04             	add    esp,0x4
c0011856:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001185b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011860:	5b                   	pop    ebx
c0011861:	5e                   	pop    esi
c0011862:	c3                   	ret    

c0011863 <SysCloseDir(regs*)>:
c0011863:	53                   	push   ebx
c0011864:	83 ec 08             	sub    esp,0x8
c0011867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001186b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001186e:	8d 50 fd             	lea    edx,[eax-0x3]
c0011871:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011877:	77 2f                	ja     c00118a8 <SysCloseDir(regs*)+0x45>
c0011879:	83 ec 0c             	sub    esp,0xc
c001187c:	50                   	push   eax
c001187d:	e8 13 18 00 00       	call   c0013095 <KeGetFileFromDescriptor(int)>
c0011882:	83 c4 10             	add    esp,0x10
c0011885:	89 c3                	mov    ebx,eax
c0011887:	85 c0                	test   eax,eax
c0011889:	74 1d                	je     c00118a8 <SysCloseDir(regs*)+0x45>
c001188b:	83 ec 0c             	sub    esp,0xc
c001188e:	50                   	push   eax
c001188f:	e8 fa 6e ff ff       	call   c000878e <Directory::close()>
c0011894:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011896:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011899:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001189c:	83 c4 10             	add    esp,0x10
c001189f:	31 c0                	xor    eax,eax
c00118a1:	31 d2                	xor    edx,edx
c00118a3:	83 c4 08             	add    esp,0x8
c00118a6:	5b                   	pop    ebx
c00118a7:	c3                   	ret    
c00118a8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118ad:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118b2:	83 c4 08             	add    esp,0x8
c00118b5:	5b                   	pop    ebx
c00118b6:	c3                   	ret    

c00118b7 <SysWait(regs*)>:
c00118b7:	83 ec 10             	sub    esp,0x10
c00118ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00118be:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00118c1:	52                   	push   edx
c00118c2:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00118c5:	51                   	push   ecx
c00118c6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00118c9:	50                   	push   eax
c00118ca:	e8 51 5d 00 00       	call   c0017620 <waitTask(int, int*, int)>
c00118cf:	83 c4 1c             	add    esp,0x1c
c00118d2:	89 c2                	mov    edx,eax
c00118d4:	c1 fa 1f             	sar    edx,0x1f
c00118d7:	c3                   	ret    

c00118d8 <SysNotImpl(regs*)>:
c00118d8:	83 ec 18             	sub    esp,0x18
c00118db:	68 ef 4b 02 c0       	push   0xc0024bef
c00118e0:	e8 db e2 ff ff       	call   c000fbc0 <KePanic(char const*)>
c00118e5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118ea:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118ef:	83 c4 1c             	add    esp,0x1c
c00118f2:	c3                   	ret    

c00118f3 <SysPanic(regs*)>:
c00118f3:	83 ec 18             	sub    esp,0x18
c00118f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118fa:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00118fd:	50                   	push   eax
c00118fe:	e8 bd e2 ff ff       	call   c000fbc0 <KePanic(char const*)>
c0011903:	b8 01 00 00 00       	mov    eax,0x1
c0011908:	31 d2                	xor    edx,edx
c001190a:	83 c4 1c             	add    esp,0x1c
c001190d:	c3                   	ret    

c001190e <SysRmdir(regs*)>:
c001190e:	56                   	push   esi
c001190f:	53                   	push   ebx
c0011910:	83 ec 20             	sub    esp,0x20
c0011913:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011917:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001191a:	68 14 01 00 00       	push   0x114
c001191f:	e8 3f de ff ff       	call   c000f763 <malloc>
c0011924:	6a 00                	push   0x0
c0011926:	89 c3                	mov    ebx,eax
c0011928:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001192d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011930:	50                   	push   eax
c0011931:	56                   	push   esi
c0011932:	53                   	push   ebx
c0011933:	e8 54 67 ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c0011938:	83 c4 14             	add    esp,0x14
c001193b:	53                   	push   ebx
c001193c:	e8 35 6a ff ff       	call   c0008376 <File::unlink()>
c0011941:	83 c4 10             	add    esp,0x10
c0011944:	85 db                	test   ebx,ebx
c0011946:	74 14                	je     c001195c <SysRmdir(regs*)+0x4e>
c0011948:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001194c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001194e:	83 ec 0c             	sub    esp,0xc
c0011951:	53                   	push   ebx
c0011952:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011955:	83 c4 10             	add    esp,0x10
c0011958:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001195c:	85 c0                	test   eax,eax
c001195e:	0f 95 c0             	setne  al
c0011961:	31 d2                	xor    edx,edx
c0011963:	0f b6 c0             	movzx  eax,al
c0011966:	f7 d8                	neg    eax
c0011968:	83 d2 00             	adc    edx,0x0
c001196b:	83 c4 14             	add    esp,0x14
c001196e:	f7 da                	neg    edx
c0011970:	5b                   	pop    ebx
c0011971:	5e                   	pop    esi
c0011972:	c3                   	ret    

c0011973 <SysUnlink(regs*)>:
c0011973:	56                   	push   esi
c0011974:	53                   	push   ebx
c0011975:	83 ec 20             	sub    esp,0x20
c0011978:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001197c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001197f:	68 14 01 00 00       	push   0x114
c0011984:	e8 da dd ff ff       	call   c000f763 <malloc>
c0011989:	6a 00                	push   0x0
c001198b:	89 c3                	mov    ebx,eax
c001198d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011992:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011995:	50                   	push   eax
c0011996:	56                   	push   esi
c0011997:	53                   	push   ebx
c0011998:	e8 ef 66 ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c001199d:	83 c4 14             	add    esp,0x14
c00119a0:	53                   	push   ebx
c00119a1:	e8 d0 69 ff ff       	call   c0008376 <File::unlink()>
c00119a6:	83 c4 10             	add    esp,0x10
c00119a9:	85 db                	test   ebx,ebx
c00119ab:	74 14                	je     c00119c1 <SysUnlink(regs*)+0x4e>
c00119ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00119b1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00119b3:	83 ec 0c             	sub    esp,0xc
c00119b6:	53                   	push   ebx
c00119b7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00119ba:	83 c4 10             	add    esp,0x10
c00119bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119c1:	85 c0                	test   eax,eax
c00119c3:	0f 95 c0             	setne  al
c00119c6:	31 d2                	xor    edx,edx
c00119c8:	0f b6 c0             	movzx  eax,al
c00119cb:	f7 d8                	neg    eax
c00119cd:	83 d2 00             	adc    edx,0x0
c00119d0:	83 c4 14             	add    esp,0x14
c00119d3:	f7 da                	neg    edx
c00119d5:	5b                   	pop    ebx
c00119d6:	5e                   	pop    esi
c00119d7:	c3                   	ret    

c00119d8 <SysGetArgv(regs*)>:
c00119d8:	83 ec 0c             	sub    esp,0xc
c00119db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00119df:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00119e2:	85 c0                	test   eax,eax
c00119e4:	78 2c                	js     c0011a12 <SysGetArgv(regs*)+0x3a>
c00119e6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00119ec:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00119ef:	3b 81 b6 05 00 00    	cmp    eax,DWORD PTR [ecx+0x5b6]
c00119f5:	7d 1b                	jge    c0011a12 <SysGetArgv(regs*)+0x3a>
c00119f7:	8b 84 81 ba 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x5ba]
c00119fe:	85 c0                	test   eax,eax
c0011a00:	74 18                	je     c0011a1a <SysGetArgv(regs*)+0x42>
c0011a02:	83 ec 08             	sub    esp,0x8
c0011a05:	50                   	push   eax
c0011a06:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011a09:	50                   	push   eax
c0011a0a:	e8 31 ec fe ff       	call   c0000640 <strcpy>
c0011a0f:	83 c4 10             	add    esp,0x10
c0011a12:	31 c0                	xor    eax,eax
c0011a14:	31 d2                	xor    edx,edx
c0011a16:	83 c4 0c             	add    esp,0xc
c0011a19:	c3                   	ret    
c0011a1a:	b8 01 00 00 00       	mov    eax,0x1
c0011a1f:	31 d2                	xor    edx,edx
c0011a21:	83 c4 0c             	add    esp,0xc
c0011a24:	c3                   	ret    

c0011a25 <SysUSleep(regs*)>:
c0011a25:	83 ec 1c             	sub    esp,0x1c
c0011a28:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011a2c:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011a2f:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011a32:	6a 00                	push   0x0
c0011a34:	6a 64                	push   0x64
c0011a36:	52                   	push   edx
c0011a37:	50                   	push   eax
c0011a38:	e8 d7 06 01 00       	call   c0022114 <__udivdi3>
c0011a3d:	83 c4 18             	add    esp,0x18
c0011a40:	52                   	push   edx
c0011a41:	50                   	push   eax
c0011a42:	e8 d1 5c 00 00       	call   c0017718 <milliTenthSleep(unsigned long long)>
c0011a47:	31 c0                	xor    eax,eax
c0011a49:	31 d2                	xor    edx,edx
c0011a4b:	83 c4 1c             	add    esp,0x1c
c0011a4e:	c3                   	ret    

c0011a4f <SysSpawn(regs*)>:
c0011a4f:	56                   	push   esi
c0011a50:	53                   	push   ebx
c0011a51:	83 ec 04             	sub    esp,0x4
c0011a54:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a58:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011a5b:	85 f6                	test   esi,esi
c0011a5d:	75 0a                	jne    c0011a69 <SysSpawn(regs*)+0x1a>
c0011a5f:	83 c4 04             	add    esp,0x4
c0011a62:	31 c0                	xor    eax,eax
c0011a64:	31 d2                	xor    edx,edx
c0011a66:	5b                   	pop    ebx
c0011a67:	5e                   	pop    esi
c0011a68:	c3                   	ret    
c0011a69:	83 ec 0c             	sub    esp,0xc
c0011a6c:	68 c4 07 00 00       	push   0x7c4
c0011a71:	e8 ed dc ff ff       	call   c000f763 <malloc>
c0011a76:	83 c4 10             	add    esp,0x10
c0011a79:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011a7c:	89 c6                	mov    esi,eax
c0011a7e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011a81:	85 c9                	test   ecx,ecx
c0011a83:	74 39                	je     c0011abe <SysSpawn(regs*)+0x6f>
c0011a85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a8a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a8d:	52                   	push   edx
c0011a8e:	50                   	push   eax
c0011a8f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a92:	50                   	push   eax
c0011a93:	56                   	push   esi
c0011a94:	e8 53 53 00 00       	call   c0016dec <Process::Process(char const*, Process*, char**)>
c0011a99:	83 c4 10             	add    esp,0x10
c0011a9c:	80 be be 07 00 00 00 	cmp    BYTE PTR [esi+0x7be],0x0
c0011aa3:	75 ba                	jne    c0011a5f <SysSpawn(regs*)+0x10>
c0011aa5:	83 ec 0c             	sub    esp,0xc
c0011aa8:	56                   	push   esi
c0011aa9:	e8 0e 59 00 00       	call   c00173bc <Process::createUserThread()>
c0011aae:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ab0:	83 c4 10             	add    esp,0x10
c0011ab3:	89 c2                	mov    edx,eax
c0011ab5:	83 c4 04             	add    esp,0x4
c0011ab8:	c1 fa 1f             	sar    edx,0x1f
c0011abb:	5b                   	pop    ebx
c0011abc:	5e                   	pop    esi
c0011abd:	c3                   	ret    
c0011abe:	31 c0                	xor    eax,eax
c0011ac0:	eb cb                	jmp    c0011a8d <SysSpawn(regs*)+0x3e>

c0011ac2 <SysGetEnv(regs*)>:
c0011ac2:	57                   	push   edi
c0011ac3:	56                   	push   esi
c0011ac4:	53                   	push   ebx
c0011ac5:	83 ec 1c             	sub    esp,0x1c
c0011ac8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011acc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ad1:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011ad4:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011ad7:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0011ada:	51                   	push   ecx
c0011adb:	e8 8b ca ff ff       	call   c000e56b <KeGetProcessTotalEnvCount(Process*)>
c0011ae0:	83 c4 10             	add    esp,0x10
c0011ae3:	39 c7                	cmp    edi,eax
c0011ae5:	7c 14                	jl     c0011afb <SysGetEnv(regs*)+0x39>
c0011ae7:	85 f6                	test   esi,esi
c0011ae9:	75 0b                	jne    c0011af6 <SysGetEnv(regs*)+0x34>
c0011aeb:	83 c4 10             	add    esp,0x10
c0011aee:	31 c0                	xor    eax,eax
c0011af0:	5b                   	pop    ebx
c0011af1:	31 d2                	xor    edx,edx
c0011af3:	5e                   	pop    esi
c0011af4:	5f                   	pop    edi
c0011af5:	c3                   	ret    
c0011af6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011af9:	eb f0                	jmp    c0011aeb <SysGetEnv(regs*)+0x29>
c0011afb:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011aff:	83 ec 04             	sub    esp,0x4
c0011b02:	57                   	push   edi
c0011b03:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011b09:	8b 7a 40             	mov    edi,DWORD PTR [edx+0x40]
c0011b0c:	57                   	push   edi
c0011b0d:	50                   	push   eax
c0011b0e:	e8 78 ca ff ff       	call   c000e58b <KeGetProcessEnvPair(Process*, int)>
c0011b13:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011b16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011b1a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011b1e:	83 c4 0c             	add    esp,0xc
c0011b21:	85 d2                	test   edx,edx
c0011b23:	75 23                	jne    c0011b48 <SysGetEnv(regs*)+0x86>
c0011b25:	83 ec 0c             	sub    esp,0xc
c0011b28:	50                   	push   eax
c0011b29:	e8 42 ea fe ff       	call   c0000570 <strlen>
c0011b2e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011b31:	89 c3                	mov    ebx,eax
c0011b33:	e8 38 ea fe ff       	call   c0000570 <strlen>
c0011b38:	83 c4 10             	add    esp,0x10
c0011b3b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011b3f:	83 c4 10             	add    esp,0x10
c0011b42:	31 d2                	xor    edx,edx
c0011b44:	5b                   	pop    ebx
c0011b45:	5e                   	pop    esi
c0011b46:	5f                   	pop    edi
c0011b47:	c3                   	ret    
c0011b48:	83 ec 08             	sub    esp,0x8
c0011b4b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011b4e:	50                   	push   eax
c0011b4f:	56                   	push   esi
c0011b50:	e8 eb ea fe ff       	call   c0000640 <strcpy>
c0011b55:	58                   	pop    eax
c0011b56:	5a                   	pop    edx
c0011b57:	68 09 4c 02 c0       	push   0xc0024c09
c0011b5c:	56                   	push   esi
c0011b5d:	e8 de ec fe ff       	call   c0000840 <strcat>
c0011b62:	59                   	pop    ecx
c0011b63:	5b                   	pop    ebx
c0011b64:	57                   	push   edi
c0011b65:	56                   	push   esi
c0011b66:	e8 d5 ec fe ff       	call   c0000840 <strcat>
c0011b6b:	83 c4 10             	add    esp,0x10
c0011b6e:	e9 78 ff ff ff       	jmp    c0011aeb <SysGetEnv(regs*)+0x29>

c0011b73 <SysSetFatAttrib(regs*)>:
c0011b73:	57                   	push   edi
c0011b74:	56                   	push   esi
c0011b75:	53                   	push   ebx
c0011b76:	83 ec 1c             	sub    esp,0x1c
c0011b79:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011b7d:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011b80:	68 14 01 00 00       	push   0x114
c0011b85:	e8 d9 db ff ff       	call   c000f763 <malloc>
c0011b8a:	83 c4 0c             	add    esp,0xc
c0011b8d:	89 c3                	mov    ebx,eax
c0011b8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b94:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b97:	50                   	push   eax
c0011b98:	57                   	push   edi
c0011b99:	53                   	push   ebx
c0011b9a:	e8 eb 65 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0011b9f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011ba2:	83 c4 0c             	add    esp,0xc
c0011ba5:	0f b6 d4             	movzx  edx,ah
c0011ba8:	0f b6 c0             	movzx  eax,al
c0011bab:	52                   	push   edx
c0011bac:	50                   	push   eax
c0011bad:	53                   	push   ebx
c0011bae:	e8 5d 68 ff ff       	call   c0008410 <File::chfatattr(unsigned char, unsigned char)>
c0011bb3:	83 c4 10             	add    esp,0x10
c0011bb6:	85 db                	test   ebx,ebx
c0011bb8:	74 14                	je     c0011bce <SysSetFatAttrib(regs*)+0x5b>
c0011bba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011bbe:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011bc0:	83 ec 0c             	sub    esp,0xc
c0011bc3:	53                   	push   ebx
c0011bc4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011bc7:	83 c4 10             	add    esp,0x10
c0011bca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bce:	85 c0                	test   eax,eax
c0011bd0:	0f 95 c0             	setne  al
c0011bd3:	31 d2                	xor    edx,edx
c0011bd5:	0f b6 c0             	movzx  eax,al
c0011bd8:	f7 d8                	neg    eax
c0011bda:	83 d2 00             	adc    edx,0x0
c0011bdd:	83 c4 10             	add    esp,0x10
c0011be0:	f7 da                	neg    edx
c0011be2:	5b                   	pop    ebx
c0011be3:	5e                   	pop    esi
c0011be4:	5f                   	pop    edi
c0011be5:	c3                   	ret    

c0011be6 <SysShutdown(regs*)>:
c0011be6:	83 ec 1c             	sub    esp,0x1c
c0011be9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011bed:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011bf0:	85 c9                	test   ecx,ecx
c0011bf2:	74 18                	je     c0011c0c <SysShutdown(regs*)+0x26>
c0011bf4:	83 f9 01             	cmp    ecx,0x1
c0011bf7:	74 26                	je     c0011c1f <SysShutdown(regs*)+0x39>
c0011bf9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011bfe:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c03:	83 f9 02             	cmp    ecx,0x2
c0011c06:	74 24                	je     c0011c2c <SysShutdown(regs*)+0x46>
c0011c08:	83 c4 1c             	add    esp,0x1c
c0011c0b:	c3                   	ret    
c0011c0c:	e8 a3 e9 ff ff       	call   c00105b4 <KeShutdown()>
c0011c11:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c16:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c1b:	83 c4 1c             	add    esp,0x1c
c0011c1e:	c3                   	ret    
c0011c1f:	e8 c6 e9 ff ff       	call   c00105ea <KeSleep()>
c0011c24:	31 c0                	xor    eax,eax
c0011c26:	31 d2                	xor    edx,edx
c0011c28:	83 c4 1c             	add    esp,0x1c
c0011c2b:	c3                   	ret    
c0011c2c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011c30:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011c34:	e8 e1 e9 ff ff       	call   c001061a <KeRestart()>
c0011c39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c3d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c41:	eb c5                	jmp    c0011c08 <SysShutdown(regs*)+0x22>

c0011c43 <SysPipe(regs*)>:
c0011c43:	57                   	push   edi
c0011c44:	56                   	push   esi
c0011c45:	53                   	push   ebx
c0011c46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c4a:	83 ec 0c             	sub    esp,0xc
c0011c4d:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011c50:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011c53:	6a 20                	push   0x20
c0011c55:	e8 09 db ff ff       	call   c000f763 <malloc>
c0011c5a:	89 c3                	mov    ebx,eax
c0011c5c:	58                   	pop    eax
c0011c5d:	5a                   	pop    edx
c0011c5e:	68 00 50 00 00       	push   0x5000
c0011c63:	53                   	push   ebx
c0011c64:	e8 cb e7 ff ff       	call   c0010434 <Pipe::Pipe(int)>
c0011c69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c6c:	e8 27 11 00 00       	call   c0012d98 <UnixFile::getFileDescriptor()>
c0011c71:	89 07                	mov    DWORD PTR [edi],eax
c0011c73:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c76:	e8 1d 11 00 00       	call   c0012d98 <UnixFile::getFileDescriptor()>
c0011c7b:	83 c4 10             	add    esp,0x10
c0011c7e:	89 06                	mov    DWORD PTR [esi],eax
c0011c80:	31 d2                	xor    edx,edx
c0011c82:	5b                   	pop    ebx
c0011c83:	31 c0                	xor    eax,eax
c0011c85:	5e                   	pop    esi
c0011c86:	5f                   	pop    edi
c0011c87:	c3                   	ret    

c0011c88 <SysGetUnixTime(regs*)>:
c0011c88:	57                   	push   edi
c0011c89:	56                   	push   esi
c0011c8a:	53                   	push   ebx
c0011c8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c8f:	83 ec 08             	sub    esp,0x8
c0011c92:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011c95:	52                   	push   edx
c0011c96:	68 0b 4c 02 c0       	push   0xc0024c0b
c0011c9b:	e8 dc 52 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011ca0:	83 c4 10             	add    esp,0x10
c0011ca3:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c0011ca7:	74 3d                	je     c0011ce6 <SysGetUnixTime(regs*)+0x5e>
c0011ca9:	83 ec 0c             	sub    esp,0xc
c0011cac:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0011cb1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011cb7:	50                   	push   eax
c0011cb8:	e8 7d 74 ff ff       	call   c000913a <Clock::timeInSecondsLocal()>
c0011cbd:	83 c4 0c             	add    esp,0xc
c0011cc0:	52                   	push   edx
c0011cc1:	50                   	push   eax
c0011cc2:	68 1f 4c 02 c0       	push   0xc0024c1f
c0011cc7:	e8 b0 52 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011ccc:	83 c4 10             	add    esp,0x10
c0011ccf:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0011cd4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011cda:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011cde:	5b                   	pop    ebx
c0011cdf:	5e                   	pop    esi
c0011ce0:	5f                   	pop    edi
c0011ce1:	e9 54 74 ff ff       	jmp    c000913a <Clock::timeInSecondsLocal()>
c0011ce6:	8b 35 50 cb 02 c0    	mov    esi,DWORD PTR ds:0xc002cb50
c0011cec:	8b 3d 54 cb 02 c0    	mov    edi,DWORD PTR ds:0xc002cb54
c0011cf2:	89 f0                	mov    eax,esi
c0011cf4:	89 fa                	mov    edx,edi
c0011cf6:	01 f0                	add    eax,esi
c0011cf8:	11 fa                	adc    edx,edi
c0011cfa:	01 f0                	add    eax,esi
c0011cfc:	11 fa                	adc    edx,edi
c0011cfe:	89 c1                	mov    ecx,eax
c0011d00:	89 d3                	mov    ebx,edx
c0011d02:	0f a4 cb 05          	shld   ebx,ecx,0x5
c0011d06:	c1 e1 05             	shl    ecx,0x5
c0011d09:	01 c8                	add    eax,ecx
c0011d0b:	11 da                	adc    edx,ebx
c0011d0d:	01 f0                	add    eax,esi
c0011d0f:	5b                   	pop    ebx
c0011d10:	11 fa                	adc    edx,edi
c0011d12:	5e                   	pop    esi
c0011d13:	5f                   	pop    edi
c0011d14:	c3                   	ret    

c0011d15 <string_ends_with(char const*, char const*)>:
c0011d15:	57                   	push   edi
c0011d16:	56                   	push   esi
c0011d17:	53                   	push   ebx
c0011d18:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d1c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011d20:	83 ec 0c             	sub    esp,0xc
c0011d23:	53                   	push   ebx
c0011d24:	e8 47 e8 fe ff       	call   c0000570 <strlen>
c0011d29:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d2c:	89 c6                	mov    esi,eax
c0011d2e:	e8 3d e8 fe ff       	call   c0000570 <strlen>
c0011d33:	83 c4 10             	add    esp,0x10
c0011d36:	39 c6                	cmp    esi,eax
c0011d38:	7d 06                	jge    c0011d40 <string_ends_with(char const*, char const*)+0x2b>
c0011d3a:	5b                   	pop    ebx
c0011d3b:	31 c0                	xor    eax,eax
c0011d3d:	5e                   	pop    esi
c0011d3e:	5f                   	pop    edi
c0011d3f:	c3                   	ret    
c0011d40:	83 ec 08             	sub    esp,0x8
c0011d43:	29 c6                	sub    esi,eax
c0011d45:	57                   	push   edi
c0011d46:	01 f3                	add    ebx,esi
c0011d48:	53                   	push   ebx
c0011d49:	e8 02 ea fe ff       	call   c0000750 <strcmp>
c0011d4e:	83 c4 10             	add    esp,0x10
c0011d51:	85 c0                	test   eax,eax
c0011d53:	5b                   	pop    ebx
c0011d54:	0f 94 c0             	sete   al
c0011d57:	5e                   	pop    esi
c0011d58:	0f b6 c0             	movzx  eax,al
c0011d5b:	5f                   	pop    edi
c0011d5c:	c3                   	ret    

c0011d5d <SysOpen(regs*)>:
c0011d5d:	56                   	push   esi
c0011d5e:	53                   	push   ebx
c0011d5f:	81 ec 04 01 00 00    	sub    esp,0x104
c0011d65:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011d6c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d6f:	85 c0                	test   eax,eax
c0011d71:	0f 84 bc 01 00 00    	je     c0011f33 <SysOpen(regs*)+0x1d6>
c0011d77:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d7a:	85 c0                	test   eax,eax
c0011d7c:	0f 84 b1 01 00 00    	je     c0011f33 <SysOpen(regs*)+0x1d6>
c0011d82:	6a 00                	push   0x0
c0011d84:	68 26 4c 02 c0       	push   0xc0024c26
c0011d89:	50                   	push   eax
c0011d8a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011d8e:	56                   	push   esi
c0011d8f:	e8 de 60 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011d94:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d97:	e8 d4 e7 fe ff       	call   c0000570 <strlen>
c0011d9c:	83 c4 10             	add    esp,0x10
c0011d9f:	83 e8 01             	sub    eax,0x1
c0011da2:	74 21                	je     c0011dc5 <SysOpen(regs*)+0x68>
c0011da4:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011da8:	eb 12                	jmp    c0011dbc <SysOpen(regs*)+0x5f>
c0011daa:	83 fa 3a             	cmp    edx,0x3a
c0011dad:	74 12                	je     c0011dc1 <SysOpen(regs*)+0x64>
c0011daf:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011db3:	83 e8 01             	sub    eax,0x1
c0011db6:	74 0d                	je     c0011dc5 <SysOpen(regs*)+0x68>
c0011db8:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011dbc:	83 fa 2e             	cmp    edx,0x2e
c0011dbf:	75 e9                	jne    c0011daa <SysOpen(regs*)+0x4d>
c0011dc1:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011dc5:	83 ec 08             	sub    esp,0x8
c0011dc8:	68 2a 4c 02 c0       	push   0xc0024c2a
c0011dcd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011dd0:	50                   	push   eax
c0011dd1:	e8 3f ff ff ff       	call   c0011d15 <string_ends_with(char const*, char const*)>
c0011dd6:	83 c4 10             	add    esp,0x10
c0011dd9:	85 c0                	test   eax,eax
c0011ddb:	74 1d                	je     c0011dfa <SysOpen(regs*)+0x9d>
c0011ddd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011de0:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011de6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011ded:	81 c4 04 01 00 00    	add    esp,0x104
c0011df3:	31 c0                	xor    eax,eax
c0011df5:	31 d2                	xor    edx,edx
c0011df7:	5b                   	pop    ebx
c0011df8:	5e                   	pop    esi
c0011df9:	c3                   	ret    
c0011dfa:	83 ec 08             	sub    esp,0x8
c0011dfd:	68 2f 4c 02 c0       	push   0xc0024c2f
c0011e02:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e05:	50                   	push   eax
c0011e06:	e8 0a ff ff ff       	call   c0011d15 <string_ends_with(char const*, char const*)>
c0011e0b:	83 c4 10             	add    esp,0x10
c0011e0e:	85 c0                	test   eax,eax
c0011e10:	75 cb                	jne    c0011ddd <SysOpen(regs*)+0x80>
c0011e12:	83 ec 08             	sub    esp,0x8
c0011e15:	68 2b 4c 02 c0       	push   0xc0024c2b
c0011e1a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e1d:	50                   	push   eax
c0011e1e:	e8 2d e9 fe ff       	call   c0000750 <strcmp>
c0011e23:	83 c4 10             	add    esp,0x10
c0011e26:	85 c0                	test   eax,eax
c0011e28:	74 b3                	je     c0011ddd <SysOpen(regs*)+0x80>
c0011e2a:	83 ec 08             	sub    esp,0x8
c0011e2d:	68 2a 4c 02 c0       	push   0xc0024c2a
c0011e32:	56                   	push   esi
c0011e33:	e8 dd fe ff ff       	call   c0011d15 <string_ends_with(char const*, char const*)>
c0011e38:	83 c4 10             	add    esp,0x10
c0011e3b:	85 c0                	test   eax,eax
c0011e3d:	75 9e                	jne    c0011ddd <SysOpen(regs*)+0x80>
c0011e3f:	83 ec 08             	sub    esp,0x8
c0011e42:	68 34 4c 02 c0       	push   0xc0024c34
c0011e47:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e4a:	50                   	push   eax
c0011e4b:	e8 c5 fe ff ff       	call   c0011d15 <string_ends_with(char const*, char const*)>
c0011e50:	83 c4 10             	add    esp,0x10
c0011e53:	85 c0                	test   eax,eax
c0011e55:	0f 85 eb 00 00 00    	jne    c0011f46 <SysOpen(regs*)+0x1e9>
c0011e5b:	83 ec 08             	sub    esp,0x8
c0011e5e:	68 39 4c 02 c0       	push   0xc0024c39
c0011e63:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e66:	50                   	push   eax
c0011e67:	e8 a9 fe ff ff       	call   c0011d15 <string_ends_with(char const*, char const*)>
c0011e6c:	83 c4 10             	add    esp,0x10
c0011e6f:	85 c0                	test   eax,eax
c0011e71:	0f 85 cf 00 00 00    	jne    c0011f46 <SysOpen(regs*)+0x1e9>
c0011e77:	83 ec 08             	sub    esp,0x8
c0011e7a:	68 35 4c 02 c0       	push   0xc0024c35
c0011e7f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011e82:	51                   	push   ecx
c0011e83:	e8 c8 e8 fe ff       	call   c0000750 <strcmp>
c0011e88:	83 c4 10             	add    esp,0x10
c0011e8b:	85 c0                	test   eax,eax
c0011e8d:	0f 84 b3 00 00 00    	je     c0011f46 <SysOpen(regs*)+0x1e9>
c0011e93:	83 ec 08             	sub    esp,0x8
c0011e96:	68 34 4c 02 c0       	push   0xc0024c34
c0011e9b:	56                   	push   esi
c0011e9c:	e8 74 fe ff ff       	call   c0011d15 <string_ends_with(char const*, char const*)>
c0011ea1:	83 c4 10             	add    esp,0x10
c0011ea4:	85 c0                	test   eax,eax
c0011ea6:	0f 85 9a 00 00 00    	jne    c0011f46 <SysOpen(regs*)+0x1e9>
c0011eac:	83 ec 0c             	sub    esp,0xc
c0011eaf:	68 14 01 00 00       	push   0x114
c0011eb4:	e8 aa d8 ff ff       	call   c000f763 <malloc>
c0011eb9:	83 c4 0c             	add    esp,0xc
c0011ebc:	89 c6                	mov    esi,eax
c0011ebe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ec3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ec6:	50                   	push   eax
c0011ec7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011eca:	52                   	push   edx
c0011ecb:	56                   	push   esi
c0011ecc:	e8 b9 62 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0011ed1:	83 c4 10             	add    esp,0x10
c0011ed4:	85 f6                	test   esi,esi
c0011ed6:	74 5b                	je     c0011f33 <SysOpen(regs*)+0x1d6>
c0011ed8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011edb:	0f b6 c2             	movzx  eax,dl
c0011ede:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011ee1:	89 d0                	mov    eax,edx
c0011ee3:	83 e0 01             	and    eax,0x1
c0011ee6:	f6 c2 02             	test   dl,0x2
c0011ee9:	74 03                	je     c0011eee <SysOpen(regs*)+0x191>
c0011eeb:	83 c8 02             	or     eax,0x2
c0011eee:	f6 c2 04             	test   dl,0x4
c0011ef1:	74 03                	je     c0011ef6 <SysOpen(regs*)+0x199>
c0011ef3:	83 c8 04             	or     eax,0x4
c0011ef6:	f6 c2 08             	test   dl,0x8
c0011ef9:	74 03                	je     c0011efe <SysOpen(regs*)+0x1a1>
c0011efb:	83 c8 0a             	or     eax,0xa
c0011efe:	80 e2 10             	and    dl,0x10
c0011f01:	74 03                	je     c0011f06 <SysOpen(regs*)+0x1a9>
c0011f03:	83 c8 12             	or     eax,0x12
c0011f06:	83 ec 08             	sub    esp,0x8
c0011f09:	50                   	push   eax
c0011f0a:	56                   	push   esi
c0011f0b:	e8 98 62 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0011f10:	83 c4 10             	add    esp,0x10
c0011f13:	85 c0                	test   eax,eax
c0011f15:	75 1c                	jne    c0011f33 <SysOpen(regs*)+0x1d6>
c0011f17:	83 ec 0c             	sub    esp,0xc
c0011f1a:	56                   	push   esi
c0011f1b:	e8 78 0e 00 00       	call   c0012d98 <UnixFile::getFileDescriptor()>
c0011f20:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011f23:	83 c4 10             	add    esp,0x10
c0011f26:	89 02                	mov    DWORD PTR [edx],eax
c0011f28:	c1 f8 1f             	sar    eax,0x1f
c0011f2b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011f2e:	e9 ba fe ff ff       	jmp    c0011ded <SysOpen(regs*)+0x90>
c0011f33:	81 c4 04 01 00 00    	add    esp,0x104
c0011f39:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f3e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f43:	5b                   	pop    ebx
c0011f44:	5e                   	pop    esi
c0011f45:	c3                   	ret    
c0011f46:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011f49:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011f4f:	e9 92 fe ff ff       	jmp    c0011de6 <SysOpen(regs*)+0x89>

c0011f54 <KeSystemCall(regs*, void*)>:
c0011f54:	53                   	push   ebx
c0011f55:	83 ec 08             	sub    esp,0x8
c0011f58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011f5c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011f5f:	83 f8 48             	cmp    eax,0x48
c0011f62:	77 16                	ja     c0011f7a <KeSystemCall(regs*, void*)+0x26>
c0011f64:	8b 14 85 20 6f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd90e0]
c0011f6b:	85 d2                	test   edx,edx
c0011f6d:	74 0b                	je     c0011f7a <KeSystemCall(regs*, void*)+0x26>
c0011f6f:	83 ec 0c             	sub    esp,0xc
c0011f72:	53                   	push   ebx
c0011f73:	ff d2                	call   edx
c0011f75:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011f78:	eb 0d                	jmp    c0011f87 <KeSystemCall(regs*, void*)+0x33>
c0011f7a:	52                   	push   edx
c0011f7b:	52                   	push   edx
c0011f7c:	50                   	push   eax
c0011f7d:	68 3e 4c 02 c0       	push   0xc0024c3e
c0011f82:	e8 f5 4f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011f87:	83 c4 10             	add    esp,0x10
c0011f8a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011f8f:	31 d2                	xor    edx,edx
c0011f91:	83 c4 08             	add    esp,0x8
c0011f94:	5b                   	pop    ebx
c0011f95:	c3                   	ret    

c0011f96 <VgaText::isAtty()>:
c0011f96:	b0 01                	mov    al,0x1
c0011f98:	c3                   	ret    
c0011f99:	90                   	nop

c0011f9a <VgaText::~VgaText()>:
c0011f9a:	83 ec 0c             	sub    esp,0xc
c0011f9d:	ba a8 4c 02 c0       	mov    edx,0xc0024ca8
c0011fa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fa6:	89 10                	mov    DWORD PTR [eax],edx
c0011fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fac:	83 ec 0c             	sub    esp,0xc
c0011faf:	50                   	push   eax
c0011fb0:	e8 d1 0f 00 00       	call   c0012f86 <UnixFile::~UnixFile()>
c0011fb5:	83 c4 10             	add    esp,0x10
c0011fb8:	90                   	nop
c0011fb9:	83 c4 0c             	add    esp,0xc
c0011fbc:	c3                   	ret    
c0011fbd:	90                   	nop

c0011fbe <VgaText::~VgaText()>:
c0011fbe:	83 ec 0c             	sub    esp,0xc
c0011fc1:	83 ec 0c             	sub    esp,0xc
c0011fc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011fc8:	e8 cd ff ff ff       	call   c0011f9a <VgaText::~VgaText()>
c0011fcd:	83 c4 10             	add    esp,0x10
c0011fd0:	83 ec 08             	sub    esp,0x8
c0011fd3:	68 84 01 00 00       	push   0x184
c0011fd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011fdc:	e8 9b b2 ff ff       	call   c000d27c <operator delete(void*, unsigned long)>
c0011fe1:	83 c4 10             	add    esp,0x10
c0011fe4:	83 c4 0c             	add    esp,0xc
c0011fe7:	c3                   	ret    

c0011fe8 <VgaText::read(unsigned long long, void*, int*)>:
c0011fe8:	83 ec 10             	sub    esp,0x10
c0011feb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011fef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011ff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ff7:	e8 a9 85 ff ff       	call   c000a5a5 <readKeyboard(VgaText*, char*, unsigned long)>
c0011ffc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012000:	89 02                	mov    DWORD PTR [edx],eax
c0012002:	31 c0                	xor    eax,eax
c0012004:	83 c4 1c             	add    esp,0x1c
c0012007:	c3                   	ret    

c0012008 <setTerminalScrollLock(bool)>:
c0012008:	c3                   	ret    

c0012009 <doTerminalCycle()>:
c0012009:	c3                   	ret    

c001200a <addToTerminalCycle(VgaText*)>:
c001200a:	c3                   	ret    

c001200b <scrollTerminalScrollLock(int)>:
c001200b:	c3                   	ret    

c001200c <VgaText::updateTitle()>:
c001200c:	c3                   	ret    
c001200d:	90                   	nop

c001200e <VgaText::load()>:
c001200e:	c3                   	ret    
c001200f:	90                   	nop

c0012010 <VgaText::updateCursor()>:
c0012010:	83 ec 14             	sub    esp,0x14
c0012013:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012017:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001201a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001201d:	e8 4a 9e 00 00       	call   c001be6c <HalConsoleCursorUpdate(int, int)>
c0012022:	83 c4 1c             	add    esp,0x1c
c0012025:	c3                   	ret    

c0012026 <VgaText::doANSI_SGR(int)>:
c0012026:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001202a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001202e:	85 d2                	test   edx,edx
c0012030:	75 0b                	jne    c001203d <VgaText::doANSI_SGR(int)+0x17>
c0012032:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0012035:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012038:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001203b:	eb 59                	jmp    c0012096 <VgaText::doANSI_SGR(int)+0x70>
c001203d:	83 fa 07             	cmp    edx,0x7
c0012040:	75 0b                	jne    c001204d <VgaText::doANSI_SGR(int)+0x27>
c0012042:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0012045:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0012048:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c001204b:	eb 49                	jmp    c0012096 <VgaText::doANSI_SGR(int)+0x70>
c001204d:	83 fa 1b             	cmp    edx,0x1b
c0012050:	74 e0                	je     c0012032 <VgaText::doANSI_SGR(int)+0xc>
c0012052:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0012055:	83 f9 07             	cmp    ecx,0x7
c0012058:	77 09                	ja     c0012063 <VgaText::doANSI_SGR(int)+0x3d>
c001205a:	8b 14 8d 80 70 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8f80]
c0012061:	eb 20                	jmp    c0012083 <VgaText::doANSI_SGR(int)+0x5d>
c0012063:	8d 4a d8             	lea    ecx,[edx-0x28]
c0012066:	83 f9 07             	cmp    ecx,0x7
c0012069:	77 09                	ja     c0012074 <VgaText::doANSI_SGR(int)+0x4e>
c001206b:	8b 14 8d 80 70 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8f80]
c0012072:	eb 22                	jmp    c0012096 <VgaText::doANSI_SGR(int)+0x70>
c0012074:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0012077:	83 f9 07             	cmp    ecx,0x7
c001207a:	77 0b                	ja     c0012087 <VgaText::doANSI_SGR(int)+0x61>
c001207c:	8b 14 95 38 6f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd90c8]
c0012083:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012086:	c3                   	ret    
c0012087:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001208a:	83 f9 07             	cmp    ecx,0x7
c001208d:	77 0a                	ja     c0012099 <VgaText::doANSI_SGR(int)+0x73>
c001208f:	8b 14 95 10 6f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd90f0]
c0012096:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0012099:	c3                   	ret    

c001209a <VgaText::setDefaultBgColour(VgaColour)>:
c001209a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001209e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120a2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00120a5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00120a8:	c3                   	ret    
c00120a9:	90                   	nop

c00120aa <VgaText::setDefaultFgColour(VgaColour)>:
c00120aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120b2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00120b5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00120b8:	c3                   	ret    
c00120b9:	90                   	nop

c00120ba <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00120ba:	53                   	push   ebx
c00120bb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00120bf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00120c3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00120c7:	51                   	push   ecx
c00120c8:	e8 cd ff ff ff       	call   c001209a <VgaText::setDefaultBgColour(VgaColour)>
c00120cd:	58                   	pop    eax
c00120ce:	5a                   	pop    edx
c00120cf:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00120d3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00120d7:	5b                   	pop    ebx
c00120d8:	eb d0                	jmp    c00120aa <VgaText::setDefaultFgColour(VgaColour)>

c00120da <VgaText::setTitleTextColour(VgaColour)>:
c00120da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120e2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00120e5:	c3                   	ret    

c00120e6 <VgaText::setTitleColour(VgaColour)>:
c00120e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120ee:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00120f1:	c3                   	ret    

c00120f2 <VgaText::setTitle(char*)>:
c00120f2:	c3                   	ret    
c00120f3:	90                   	nop

c00120f4 <VgaText::combineColours(unsigned char, unsigned char)>:
c00120f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120f8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00120fd:	83 e0 0f             	and    eax,0xf
c0012100:	c1 e2 04             	shl    edx,0x4
c0012103:	09 d0                	or     eax,edx
c0012105:	c3                   	ret    

c0012106 <VgaText::scrollScreen()>:
c0012106:	55                   	push   ebp
c0012107:	57                   	push   edi
c0012108:	56                   	push   esi
c0012109:	be 01 00 00 00       	mov    esi,0x1
c001210e:	53                   	push   ebx
c001210f:	83 ec 0c             	sub    esp,0xc
c0012112:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012116:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0012119:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001211f:	31 ff                	xor    edi,edi
c0012121:	01 e9                	add    ecx,ebp
c0012123:	8a 01                	mov    al,BYTE PTR [ecx]
c0012125:	83 fe 18             	cmp    esi,0x18
c0012128:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c001212e:	75 20                	jne    c0012150 <VgaText::scrollScreen()+0x4a>
c0012130:	f7 c7 01 00 00 00    	test   edi,0x1
c0012136:	74 15                	je     c001214d <VgaText::scrollScreen()+0x47>
c0012138:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001213c:	50                   	push   eax
c001213d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0012141:	50                   	push   eax
c0012142:	e8 ad ff ff ff       	call   c00120f4 <VgaText::combineColours(unsigned char, unsigned char)>
c0012147:	5a                   	pop    edx
c0012148:	5a                   	pop    edx
c0012149:	88 01                	mov    BYTE PTR [ecx],al
c001214b:	eb 03                	jmp    c0012150 <VgaText::scrollScreen()+0x4a>
c001214d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0012150:	47                   	inc    edi
c0012151:	41                   	inc    ecx
c0012152:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0012158:	75 c9                	jne    c0012123 <VgaText::scrollScreen()+0x1d>
c001215a:	46                   	inc    esi
c001215b:	83 fe 19             	cmp    esi,0x19
c001215e:	75 b9                	jne    c0012119 <VgaText::scrollScreen()+0x13>
c0012160:	39 1d f4 d1 02 c0    	cmp    DWORD PTR ds:0xc002d1f4,ebx
c0012166:	75 1f                	jne    c0012187 <VgaText::scrollScreen()+0x81>
c0012168:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001216c:	74 05                	je     c0012173 <VgaText::scrollScreen()+0x6d>
c001216e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0012171:	eb 14                	jmp    c0012187 <VgaText::scrollScreen()+0x81>
c0012173:	50                   	push   eax
c0012174:	50                   	push   eax
c0012175:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0012179:	50                   	push   eax
c001217a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001217e:	50                   	push   eax
c001217f:	e8 7c 9b 00 00       	call   c001bd00 <HalConsoleScroll(int, int)>
c0012184:	83 c4 10             	add    esp,0x10
c0012187:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001218b:	83 c4 0c             	add    esp,0xc
c001218e:	5b                   	pop    ebx
c001218f:	5e                   	pop    esi
c0012190:	5f                   	pop    edi
c0012191:	5d                   	pop    ebp
c0012192:	e9 79 fe ff ff       	jmp    c0012010 <VgaText::updateCursor()>
c0012197:	90                   	nop

c0012198 <VgaText::combineCharAndColour(char, unsigned char)>:
c0012198:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001219d:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00121a2:	c1 e0 08             	shl    eax,0x8
c00121a5:	09 d0                	or     eax,edx
c00121a7:	c3                   	ret    

c00121a8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00121a8:	55                   	push   ebp
c00121a9:	57                   	push   edi
c00121aa:	56                   	push   esi
c00121ab:	53                   	push   ebx
c00121ac:	83 ec 1c             	sub    esp,0x1c
c00121af:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00121b3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00121b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00121bb:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c00121be:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00121c2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00121c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00121ca:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00121ce:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00121d2:	85 ed                	test   ebp,ebp
c00121d4:	75 14                	jne    c00121ea <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c00121d6:	c7 44 24 30 52 4c 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024c52
c00121de:	83 c4 1c             	add    esp,0x1c
c00121e1:	5b                   	pop    ebx
c00121e2:	5e                   	pop    esi
c00121e3:	5f                   	pop    edi
c00121e4:	5d                   	pop    ebp
c00121e5:	e9 d6 d9 ff ff       	jmp    c000fbc0 <KePanic(char const*)>
c00121ea:	50                   	push   eax
c00121eb:	50                   	push   eax
c00121ec:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00121f1:	50                   	push   eax
c00121f2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00121f7:	50                   	push   eax
c00121f8:	e8 f7 fe ff ff       	call   c00120f4 <VgaText::combineColours(unsigned char, unsigned char)>
c00121fd:	5a                   	pop    edx
c00121fe:	0f be c9             	movsx  ecx,cl
c0012201:	5a                   	pop    edx
c0012202:	0f b6 c0             	movzx  eax,al
c0012205:	50                   	push   eax
c0012206:	51                   	push   ecx
c0012207:	e8 8c ff ff ff       	call   c0012198 <VgaText::combineCharAndColour(char, unsigned char)>
c001220c:	6b d6 50             	imul   edx,esi,0x50
c001220f:	83 c4 10             	add    esp,0x10
c0012212:	01 da                	add    edx,ebx
c0012214:	0f b7 d2             	movzx  edx,dx
c0012217:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c001221c:	39 3d f4 d1 02 c0    	cmp    DWORD PTR ds:0xc002d1f4,edi
c0012222:	75 28                	jne    c001224c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c0012224:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012228:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001222c:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012230:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012234:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0012238:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001223c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012240:	83 c4 1c             	add    esp,0x1c
c0012243:	5b                   	pop    ebx
c0012244:	5e                   	pop    esi
c0012245:	5f                   	pop    edi
c0012246:	5d                   	pop    ebp
c0012247:	e9 bc 9b 00 00       	jmp    c001be08 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001224c:	83 c4 1c             	add    esp,0x1c
c001224f:	5b                   	pop    ebx
c0012250:	5e                   	pop    esi
c0012251:	5f                   	pop    edi
c0012252:	5d                   	pop    ebp
c0012253:	c3                   	ret    

c0012254 <VgaText::getCursorX()>:
c0012254:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012258:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001225b:	c3                   	ret    

c001225c <VgaText::getCursorY()>:
c001225c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012260:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0012263:	c3                   	ret    

c0012264 <VgaText::setCursor(int, int)>:
c0012264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012268:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001226c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001226f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012273:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012276:	e9 95 fd ff ff       	jmp    c0012010 <VgaText::updateCursor()>

c001227b <setActiveTerminal(VgaText*)>:
c001227b:	53                   	push   ebx
c001227c:	83 ec 08             	sub    esp,0x8
c001227f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012283:	85 db                	test   ebx,ebx
c0012285:	75 11                	jne    c0012298 <setActiveTerminal(VgaText*)+0x1d>
c0012287:	c7 44 24 10 62 4c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024c62
c001228f:	83 c4 08             	add    esp,0x8
c0012292:	5b                   	pop    ebx
c0012293:	e9 28 d9 ff ff       	jmp    c000fbc0 <KePanic(char const*)>
c0012298:	a1 f4 d1 02 c0       	mov    eax,ds:0xc002d1f4
c001229d:	85 c0                	test   eax,eax
c001229f:	74 0c                	je     c00122ad <setActiveTerminal(VgaText*)+0x32>
c00122a1:	83 ec 0c             	sub    esp,0xc
c00122a4:	50                   	push   eax
c00122a5:	e8 66 fd ff ff       	call   c0012010 <VgaText::updateCursor()>
c00122aa:	83 c4 10             	add    esp,0x10
c00122ad:	89 1d f4 d1 02 c0    	mov    DWORD PTR ds:0xc002d1f4,ebx
c00122b3:	50                   	push   eax
c00122b4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00122b7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00122ba:	53                   	push   ebx
c00122bb:	e8 a4 ff ff ff       	call   c0012264 <VgaText::setCursor(int, int)>
c00122c0:	83 c4 18             	add    esp,0x18
c00122c3:	5b                   	pop    ebx
c00122c4:	c3                   	ret    
c00122c5:	90                   	nop

c00122c6 <VgaText::clearScreen()>:
c00122c6:	57                   	push   edi
c00122c7:	56                   	push   esi
c00122c8:	31 f6                	xor    esi,esi
c00122ca:	53                   	push   ebx
c00122cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00122cf:	52                   	push   edx
c00122d0:	6a 00                	push   0x0
c00122d2:	6a 00                	push   0x0
c00122d4:	53                   	push   ebx
c00122d5:	e8 8a ff ff ff       	call   c0012264 <VgaText::setCursor(int, int)>
c00122da:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00122e1:	83 c4 10             	add    esp,0x10
c00122e4:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00122e7:	7e 20                	jle    c0012309 <VgaText::clearScreen()+0x43>
c00122e9:	31 ff                	xor    edi,edi
c00122eb:	50                   	push   eax
c00122ec:	50                   	push   eax
c00122ed:	56                   	push   esi
c00122ee:	57                   	push   edi
c00122ef:	47                   	inc    edi
c00122f0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00122f3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00122f6:	6a 20                	push   0x20
c00122f8:	53                   	push   ebx
c00122f9:	e8 aa fe ff ff       	call   c00121a8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00122fe:	83 c4 20             	add    esp,0x20
c0012301:	83 ff 50             	cmp    edi,0x50
c0012304:	75 e5                	jne    c00122eb <VgaText::clearScreen()+0x25>
c0012306:	46                   	inc    esi
c0012307:	eb db                	jmp    c00122e4 <VgaText::clearScreen()+0x1e>
c0012309:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0012310:	5b                   	pop    ebx
c0012311:	5e                   	pop    esi
c0012312:	5f                   	pop    edi
c0012313:	c3                   	ret    

c0012314 <VgaText::setCursorX(int)>:
c0012314:	83 ec 10             	sub    esp,0x10
c0012317:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001231b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001231e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012322:	50                   	push   eax
c0012323:	e8 3c ff ff ff       	call   c0012264 <VgaText::setCursor(int, int)>
c0012328:	83 c4 1c             	add    esp,0x1c
c001232b:	c3                   	ret    

c001232c <VgaText::setCursorY(int)>:
c001232c:	83 ec 10             	sub    esp,0x10
c001232f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012333:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012337:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001233a:	50                   	push   eax
c001233b:	e8 24 ff ff ff       	call   c0012264 <VgaText::setCursor(int, int)>
c0012340:	83 c4 1c             	add    esp,0x1c
c0012343:	c3                   	ret    

c0012344 <VgaText::incrementCursor(bool)>:
c0012344:	56                   	push   esi
c0012345:	53                   	push   ebx
c0012346:	51                   	push   ecx
c0012347:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001234b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001234f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012352:	40                   	inc    eax
c0012353:	83 f8 50             	cmp    eax,0x50
c0012356:	74 05                	je     c001235d <VgaText::incrementCursor(bool)+0x19>
c0012358:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001235b:	eb 24                	jmp    c0012381 <VgaText::incrementCursor(bool)+0x3d>
c001235d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012360:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012367:	8d 50 01             	lea    edx,[eax+0x1]
c001236a:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001236d:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0012370:	75 0f                	jne    c0012381 <VgaText::incrementCursor(bool)+0x3d>
c0012372:	83 ec 0c             	sub    esp,0xc
c0012375:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012378:	53                   	push   ebx
c0012379:	e8 88 fd ff ff       	call   c0012106 <VgaText::scrollScreen()>
c001237e:	83 c4 10             	add    esp,0x10
c0012381:	89 f0                	mov    eax,esi
c0012383:	84 c0                	test   al,al
c0012385:	74 0c                	je     c0012393 <VgaText::incrementCursor(bool)+0x4f>
c0012387:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001238b:	5a                   	pop    edx
c001238c:	5b                   	pop    ebx
c001238d:	5e                   	pop    esi
c001238e:	e9 7d fc ff ff       	jmp    c0012010 <VgaText::updateCursor()>
c0012393:	58                   	pop    eax
c0012394:	5b                   	pop    ebx
c0012395:	5e                   	pop    esi
c0012396:	c3                   	ret    
c0012397:	90                   	nop

c0012398 <VgaText::decrementCursor(bool)>:
c0012398:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001239c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00123a0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00123a3:	85 c0                	test   eax,eax
c00123a5:	74 04                	je     c00123ab <VgaText::decrementCursor(bool)+0x13>
c00123a7:	48                   	dec    eax
c00123a8:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00123ab:	84 c9                	test   cl,cl
c00123ad:	74 09                	je     c00123b8 <VgaText::decrementCursor(bool)+0x20>
c00123af:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00123b3:	e9 58 fc ff ff       	jmp    c0012010 <VgaText::updateCursor()>
c00123b8:	c3                   	ret    
c00123b9:	90                   	nop

c00123ba <VgaText::putchar(char, VgaColour, VgaColour)>:
c00123ba:	53                   	push   ebx
c00123bb:	83 ec 08             	sub    esp,0x8
c00123be:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00123c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00123c7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00123cb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00123cf:	83 f8 07             	cmp    eax,0x7
c00123d2:	75 21                	jne    c00123f5 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00123d4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00123dc:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00123e4:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00123ec:	83 c4 08             	add    esp,0x8
c00123ef:	5b                   	pop    ebx
c00123f0:	e9 36 66 ff ff       	jmp    c0008a2b <KeBeep(int, int, bool)>
c00123f5:	83 f8 0d             	cmp    eax,0xd
c00123f8:	75 09                	jne    c0012403 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00123fa:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012401:	eb 2d                	jmp    c0012430 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0012403:	83 f8 0a             	cmp    eax,0xa
c0012406:	75 31                	jne    c0012439 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0012408:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001240b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012412:	8d 50 01             	lea    edx,[eax+0x1]
c0012415:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0012418:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001241b:	75 0f                	jne    c001242c <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c001241d:	83 ec 0c             	sub    esp,0xc
c0012420:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012423:	53                   	push   ebx
c0012424:	e8 dd fc ff ff       	call   c0012106 <VgaText::scrollScreen()>
c0012429:	83 c4 10             	add    esp,0x10
c001242c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012430:	83 c4 08             	add    esp,0x8
c0012433:	5b                   	pop    ebx
c0012434:	e9 d7 fb ff ff       	jmp    c0012010 <VgaText::updateCursor()>
c0012439:	83 f8 08             	cmp    eax,0x8
c001243c:	75 25                	jne    c0012463 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c001243e:	50                   	push   eax
c001243f:	50                   	push   eax
c0012440:	6a 01                	push   0x1
c0012442:	53                   	push   ebx
c0012443:	e8 50 ff ff ff       	call   c0012398 <VgaText::decrementCursor(bool)>
c0012448:	5a                   	pop    edx
c0012449:	59                   	pop    ecx
c001244a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001244d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012450:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012453:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012456:	6a 20                	push   0x20
c0012458:	53                   	push   ebx
c0012459:	e8 4a fd ff ff       	call   c00121a8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001245e:	83 c4 28             	add    esp,0x28
c0012461:	5b                   	pop    ebx
c0012462:	c3                   	ret    
c0012463:	83 ec 08             	sub    esp,0x8
c0012466:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012469:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001246c:	51                   	push   ecx
c001246d:	52                   	push   edx
c001246e:	50                   	push   eax
c001246f:	53                   	push   ebx
c0012470:	e8 33 fd ff ff       	call   c00121a8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012475:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0012479:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0012481:	83 c4 28             	add    esp,0x28
c0012484:	5b                   	pop    ebx
c0012485:	e9 ba fe ff ff       	jmp    c0012344 <VgaText::incrementCursor(bool)>

c001248a <VgaText::putchar(char)>:
c001248a:	57                   	push   edi
c001248b:	56                   	push   esi
c001248c:	53                   	push   ebx
c001248d:	83 ec 10             	sub    esp,0x10
c0012490:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012494:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012498:	89 f8                	mov    eax,edi
c001249a:	0f be c0             	movsx  eax,al
c001249d:	83 f8 5b             	cmp    eax,0x5b
c00124a0:	75 18                	jne    c00124ba <VgaText::putchar(char)+0x30>
c00124a2:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00124a6:	74 20                	je     c00124c8 <VgaText::putchar(char)+0x3e>
c00124a8:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00124ae:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00124b5:	e9 c1 00 00 00       	jmp    c001257b <VgaText::putchar(char)+0xf1>
c00124ba:	83 f8 1b             	cmp    eax,0x1b
c00124bd:	75 09                	jne    c00124c8 <VgaText::putchar(char)+0x3e>
c00124bf:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00124c3:	e9 b3 00 00 00       	jmp    c001257b <VgaText::putchar(char)+0xf1>
c00124c8:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00124cb:	84 c9                	test   cl,cl
c00124cd:	0f 84 98 00 00 00    	je     c001256b <VgaText::putchar(char)+0xe1>
c00124d3:	8d 77 c0             	lea    esi,[edi-0x40]
c00124d6:	89 f2                	mov    edx,esi
c00124d8:	80 fa 3e             	cmp    dl,0x3e
c00124db:	77 78                	ja     c0012555 <VgaText::putchar(char)+0xcb>
c00124dd:	83 f8 6d             	cmp    eax,0x6d
c00124e0:	75 47                	jne    c0012529 <VgaText::putchar(char)+0x9f>
c00124e2:	31 f6                	xor    esi,esi
c00124e4:	31 d2                	xor    edx,edx
c00124e6:	31 c0                	xor    eax,eax
c00124e8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00124eb:	7e 2d                	jle    c001251a <VgaText::putchar(char)+0x90>
c00124ed:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00124f2:	83 fa 3b             	cmp    edx,0x3b
c00124f5:	75 17                	jne    c001250e <VgaText::putchar(char)+0x84>
c00124f7:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00124fb:	50                   	push   eax
c00124fc:	53                   	push   ebx
c00124fd:	e8 24 fb ff ff       	call   c0012026 <VgaText::doANSI_SGR(int)>
c0012502:	59                   	pop    ecx
c0012503:	31 d2                	xor    edx,edx
c0012505:	5f                   	pop    edi
c0012506:	31 c0                	xor    eax,eax
c0012508:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001250c:	eb 09                	jmp    c0012517 <VgaText::putchar(char)+0x8d>
c001250e:	6b c0 0a             	imul   eax,eax,0xa
c0012511:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0012515:	88 ca                	mov    dl,cl
c0012517:	46                   	inc    esi
c0012518:	eb ce                	jmp    c00124e8 <VgaText::putchar(char)+0x5e>
c001251a:	84 d2                	test   dl,dl
c001251c:	74 2f                	je     c001254d <VgaText::putchar(char)+0xc3>
c001251e:	50                   	push   eax
c001251f:	53                   	push   ebx
c0012520:	e8 01 fb ff ff       	call   c0012026 <VgaText::doANSI_SGR(int)>
c0012525:	58                   	pop    eax
c0012526:	5a                   	pop    edx
c0012527:	eb 24                	jmp    c001254d <VgaText::putchar(char)+0xc3>
c0012529:	83 f8 4a             	cmp    eax,0x4a
c001252c:	75 1f                	jne    c001254d <VgaText::putchar(char)+0xc3>
c001252e:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0012532:	75 19                	jne    c001254d <VgaText::putchar(char)+0xc3>
c0012534:	83 ec 0c             	sub    esp,0xc
c0012537:	53                   	push   ebx
c0012538:	e8 89 fd ff ff       	call   c00122c6 <VgaText::clearScreen()>
c001253d:	83 c4 0c             	add    esp,0xc
c0012540:	6a 00                	push   0x0
c0012542:	6a 00                	push   0x0
c0012544:	53                   	push   ebx
c0012545:	e8 1a fd ff ff       	call   c0012264 <VgaText::setCursor(int, int)>
c001254a:	83 c4 10             	add    esp,0x10
c001254d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0012553:	eb 26                	jmp    c001257b <VgaText::putchar(char)+0xf1>
c0012555:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0012558:	83 f8 0e             	cmp    eax,0xe
c001255b:	7f 1e                	jg     c001257b <VgaText::putchar(char)+0xf1>
c001255d:	8d 48 01             	lea    ecx,[eax+0x1]
c0012560:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0012563:	89 f9                	mov    ecx,edi
c0012565:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0012569:	eb 10                	jmp    c001257b <VgaText::putchar(char)+0xf1>
c001256b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001256e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012571:	50                   	push   eax
c0012572:	53                   	push   ebx
c0012573:	e8 42 fe ff ff       	call   c00123ba <VgaText::putchar(char, VgaColour, VgaColour)>
c0012578:	83 c4 10             	add    esp,0x10
c001257b:	83 c4 10             	add    esp,0x10
c001257e:	5b                   	pop    ebx
c001257f:	5e                   	pop    esi
c0012580:	5f                   	pop    edi
c0012581:	c3                   	ret    

c0012582 <VgaText::putx(unsigned int)>:
c0012582:	57                   	push   edi
c0012583:	b9 11 00 00 00       	mov    ecx,0x11
c0012588:	56                   	push   esi
c0012589:	be 2f 35 02 c0       	mov    esi,0xc002352f
c001258e:	53                   	push   ebx
c001258f:	83 ec 20             	sub    esp,0x20
c0012592:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012596:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001259a:	fc                   	cld    
c001259b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001259d:	be 08 00 00 00       	mov    esi,0x8
c00125a2:	50                   	push   eax
c00125a3:	50                   	push   eax
c00125a4:	89 d8                	mov    eax,ebx
c00125a6:	c1 e3 04             	shl    ebx,0x4
c00125a9:	c1 e8 1c             	shr    eax,0x1c
c00125ac:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00125b1:	50                   	push   eax
c00125b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00125b6:	e8 cf fe ff ff       	call   c001248a <VgaText::putchar(char)>
c00125bb:	83 c4 10             	add    esp,0x10
c00125be:	4e                   	dec    esi
c00125bf:	75 e1                	jne    c00125a2 <VgaText::putx(unsigned int)+0x20>
c00125c1:	83 c4 20             	add    esp,0x20
c00125c4:	5b                   	pop    ebx
c00125c5:	5e                   	pop    esi
c00125c6:	5f                   	pop    edi
c00125c7:	c3                   	ret    

c00125c8 <VgaText::puts(char const*)>:
c00125c8:	53                   	push   ebx
c00125c9:	83 ec 08             	sub    esp,0x8
c00125cc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00125d0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00125d3:	85 c0                	test   eax,eax
c00125d5:	74 12                	je     c00125e9 <VgaText::puts(char const*)+0x21>
c00125d7:	43                   	inc    ebx
c00125d8:	51                   	push   ecx
c00125d9:	51                   	push   ecx
c00125da:	50                   	push   eax
c00125db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125df:	e8 a6 fe ff ff       	call   c001248a <VgaText::putchar(char)>
c00125e4:	83 c4 10             	add    esp,0x10
c00125e7:	eb e7                	jmp    c00125d0 <VgaText::puts(char const*)+0x8>
c00125e9:	83 c4 08             	add    esp,0x8
c00125ec:	5b                   	pop    ebx
c00125ed:	c3                   	ret    

c00125ee <VgaText::write(unsigned long long, void*, int*)>:
c00125ee:	55                   	push   ebp
c00125ef:	57                   	push   edi
c00125f0:	56                   	push   esi
c00125f1:	53                   	push   ebx
c00125f2:	83 ec 0c             	sub    esp,0xc
c00125f5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00125f9:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00125fd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012601:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0012608:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001260b:	39 eb                	cmp    ebx,ebp
c001260d:	74 13                	je     c0012622 <VgaText::write(unsigned long long, void*, int*)+0x34>
c001260f:	43                   	inc    ebx
c0012610:	50                   	push   eax
c0012611:	50                   	push   eax
c0012612:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0012616:	50                   	push   eax
c0012617:	56                   	push   esi
c0012618:	e8 6d fe ff ff       	call   c001248a <VgaText::putchar(char)>
c001261d:	83 c4 10             	add    esp,0x10
c0012620:	eb e9                	jmp    c001260b <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0012622:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0012629:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001262d:	89 38                	mov    DWORD PTR [eax],edi
c001262f:	83 c4 0c             	add    esp,0xc
c0012632:	31 c0                	xor    eax,eax
c0012634:	5b                   	pop    ebx
c0012635:	5e                   	pop    esi
c0012636:	5f                   	pop    edi
c0012637:	5d                   	pop    ebp
c0012638:	c3                   	ret    
c0012639:	90                   	nop

c001263a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001263a:	55                   	push   ebp
c001263b:	57                   	push   edi
c001263c:	56                   	push   esi
c001263d:	53                   	push   ebx
c001263e:	83 ec 1c             	sub    esp,0x1c
c0012641:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012645:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012649:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001264d:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c0012650:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012654:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012658:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001265c:	85 db                	test   ebx,ebx
c001265e:	75 14                	jne    c0012674 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3a>
c0012660:	c7 44 24 30 70 4c 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024c70
c0012668:	83 c4 1c             	add    esp,0x1c
c001266b:	5b                   	pop    ebx
c001266c:	5e                   	pop    esi
c001266d:	5f                   	pop    edi
c001266e:	5d                   	pop    ebp
c001266f:	e9 4c d5 ff ff       	jmp    c000fbc0 <KePanic(char const*)>
c0012674:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c001267b:	50                   	push   eax
c001267c:	50                   	push   eax
c001267d:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012682:	50                   	push   eax
c0012683:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012688:	50                   	push   eax
c0012689:	e8 66 fa ff ff       	call   c00120f4 <VgaText::combineColours(unsigned char, unsigned char)>
c001268e:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c0012692:	83 c4 10             	add    esp,0x10
c0012695:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c0012698:	0f b6 e8             	movzx  ebp,al
c001269b:	0f b7 c9             	movzx  ecx,cx
c001269e:	01 c9                	add    ecx,ecx
c00126a0:	01 cb                	add    ebx,ecx
c00126a2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00126a5:	85 c0                	test   eax,eax
c00126a7:	0f 84 ef 00 00 00    	je     c001279c <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c00126ad:	83 f8 0d             	cmp    eax,0xd
c00126b0:	75 0c                	jne    c00126be <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c00126b2:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c00126b9:	e9 d8 00 00 00       	jmp    c0012796 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00126be:	83 f8 0a             	cmp    eax,0xa
c00126c1:	75 44                	jne    c0012707 <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c00126c3:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00126c6:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c00126cd:	8d 48 01             	lea    ecx,[eax+0x1]
c00126d0:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c00126d3:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c00126d6:	75 0f                	jne    c00126e7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c00126d8:	83 ec 0c             	sub    esp,0xc
c00126db:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c00126de:	57                   	push   edi
c00126df:	e8 22 fa ff ff       	call   c0012106 <VgaText::scrollScreen()>
c00126e4:	83 c4 10             	add    esp,0x10
c00126e7:	83 ec 0c             	sub    esp,0xc
c00126ea:	57                   	push   edi
c00126eb:	e8 20 f9 ff ff       	call   c0012010 <VgaText::updateCursor()>
c00126f0:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c00126f4:	83 c4 10             	add    esp,0x10
c00126f7:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c00126fa:	0f b7 db             	movzx  ebx,bx
c00126fd:	01 db                	add    ebx,ebx
c00126ff:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012702:	e9 8f 00 00 00       	jmp    c0012796 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012707:	83 f8 08             	cmp    eax,0x8
c001270a:	75 34                	jne    c0012740 <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c001270c:	51                   	push   ecx
c001270d:	51                   	push   ecx
c001270e:	6a 01                	push   0x1
c0012710:	57                   	push   edi
c0012711:	e8 82 fc ff ff       	call   c0012398 <VgaText::decrementCursor(bool)>
c0012716:	5b                   	pop    ebx
c0012717:	58                   	pop    eax
c0012718:	ff 77 18             	push   DWORD PTR [edi+0x18]
c001271b:	ff 77 14             	push   DWORD PTR [edi+0x14]
c001271e:	ff 77 30             	push   DWORD PTR [edi+0x30]
c0012721:	ff 77 34             	push   DWORD PTR [edi+0x34]
c0012724:	6a 20                	push   0x20
c0012726:	57                   	push   edi
c0012727:	e8 7c fa ff ff       	call   c00121a8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001272c:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012730:	83 c4 20             	add    esp,0x20
c0012733:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012736:	0f b7 db             	movzx  ebx,bx
c0012739:	01 db                	add    ebx,ebx
c001273b:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c001273e:	eb 56                	jmp    c0012796 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012740:	52                   	push   edx
c0012741:	52                   	push   edx
c0012742:	55                   	push   ebp
c0012743:	50                   	push   eax
c0012744:	e8 4f fa ff ff       	call   c0012198 <VgaText::combineCharAndColour(char, unsigned char)>
c0012749:	83 c4 10             	add    esp,0x10
c001274c:	66 89 03             	mov    WORD PTR [ebx],ax
c001274f:	39 3d f4 d1 02 c0    	cmp    DWORD PTR ds:0xc002d1f4,edi
c0012755:	75 1d                	jne    c0012774 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0012757:	83 ec 0c             	sub    esp,0xc
c001275a:	ff 77 18             	push   DWORD PTR [edi+0x18]
c001275d:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012760:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012764:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012768:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001276b:	50                   	push   eax
c001276c:	e8 97 96 00 00       	call   c001be08 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012771:	83 c4 20             	add    esp,0x20
c0012774:	83 c3 02             	add    ebx,0x2
c0012777:	50                   	push   eax
c0012778:	50                   	push   eax
c0012779:	6a 00                	push   0x0
c001277b:	57                   	push   edi
c001277c:	e8 c3 fb ff ff       	call   c0012344 <VgaText::incrementCursor(bool)>
c0012781:	83 c4 10             	add    esp,0x10
c0012784:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c0012788:	75 0c                	jne    c0012796 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001278a:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c001278e:	0f b7 db             	movzx  ebx,bx
c0012791:	01 db                	add    ebx,ebx
c0012793:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012796:	46                   	inc    esi
c0012797:	e9 06 ff ff ff       	jmp    c00126a2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c001279c:	83 ec 0c             	sub    esp,0xc
c001279f:	57                   	push   edi
c00127a0:	e8 6b f8 ff ff       	call   c0012010 <VgaText::updateCursor()>
c00127a5:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c00127ac:	83 c4 2c             	add    esp,0x2c
c00127af:	5b                   	pop    ebx
c00127b0:	5e                   	pop    esi
c00127b1:	5f                   	pop    edi
c00127b2:	5d                   	pop    ebp
c00127b3:	c3                   	ret    

c00127b4 <VgaText::VgaText(char const*)>:
c00127b4:	56                   	push   esi
c00127b5:	53                   	push   ebx
c00127b6:	83 ec 04             	sub    esp,0x4
c00127b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127bd:	83 ec 08             	sub    esp,0x8
c00127c0:	6a 00                	push   0x0
c00127c2:	50                   	push   eax
c00127c3:	e8 d8 05 00 00       	call   c0012da0 <UnixFile::UnixFile(int)>
c00127c8:	83 c4 10             	add    esp,0x10
c00127cb:	ba a8 4c 02 c0       	mov    edx,0xc0024ca8
c00127d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127d4:	89 10                	mov    DWORD PTR [eax],edx
c00127d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127da:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00127e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127e5:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00127ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127f0:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00127f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127f8:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00127fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012800:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0012807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001280b:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0012812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012816:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c001281d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012821:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0012828:	83 ec 0c             	sub    esp,0xc
c001282b:	68 80 4c 02 c0       	push   0xc0024c80
c0012830:	e8 47 47 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012835:	83 c4 10             	add    esp,0x10
c0012838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001283c:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0012843:	83 ec 0c             	sub    esp,0xc
c0012846:	6a 01                	push   0x1
c0012848:	e8 a6 09 00 00       	call   c00131f3 <Virt::allocateKernelVirtualPages(int)>
c001284d:	83 c4 10             	add    esp,0x10
c0012850:	89 c2                	mov    edx,eax
c0012852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012856:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012859:	8b 1d 90 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d290
c001285f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012863:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012866:	89 c6                	mov    esi,eax
c0012868:	e8 47 d5 ff ff       	call   c000fdb4 <Phys::allocatePage()>
c001286d:	68 05 0c 00 00       	push   0xc05
c0012872:	56                   	push   esi
c0012873:	50                   	push   eax
c0012874:	53                   	push   ebx
c0012875:	e8 5c 10 00 00       	call   c00138d6 <VAS::mapPage(unsigned long, unsigned long, int)>
c001287a:	83 c4 10             	add    esp,0x10
c001287d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012881:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012884:	83 ec 04             	sub    esp,0x4
c0012887:	68 a0 0f 00 00       	push   0xfa0
c001288c:	6a 00                	push   0x0
c001288e:	50                   	push   eax
c001288f:	e8 5c dc fe ff       	call   c00004f0 <memset>
c0012894:	83 c4 10             	add    esp,0x10
c0012897:	83 ec 04             	sub    esp,0x4
c001289a:	6a 00                	push   0x0
c001289c:	6a 07                	push   0x7
c001289e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128a2:	e8 13 f8 ff ff       	call   c00120ba <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00128a7:	83 c4 10             	add    esp,0x10
c00128aa:	83 ec 04             	sub    esp,0x4
c00128ad:	6a 00                	push   0x0
c00128af:	6a 00                	push   0x0
c00128b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128b5:	e8 aa f9 ff ff       	call   c0012264 <VgaText::setCursor(int, int)>
c00128ba:	83 c4 10             	add    esp,0x10
c00128bd:	83 ec 0c             	sub    esp,0xc
c00128c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128c4:	e8 fd f9 ff ff       	call   c00122c6 <VgaText::clearScreen()>
c00128c9:	83 c4 10             	add    esp,0x10
c00128cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128d0:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00128d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128d8:	05 82 00 00 00       	add    eax,0x82
c00128dd:	83 ec 04             	sub    esp,0x4
c00128e0:	68 80 00 00 00       	push   0x80
c00128e5:	6a 00                	push   0x0
c00128e7:	50                   	push   eax
c00128e8:	e8 03 dc fe ff       	call   c00004f0 <memset>
c00128ed:	83 c4 10             	add    esp,0x10
c00128f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128f4:	05 02 01 00 00       	add    eax,0x102
c00128f9:	83 ec 04             	sub    esp,0x4
c00128fc:	68 80 00 00 00       	push   0x80
c0012901:	6a 00                	push   0x0
c0012903:	50                   	push   eax
c0012904:	e8 e7 db fe ff       	call   c00004f0 <memset>
c0012909:	83 c4 10             	add    esp,0x10
c001290c:	90                   	nop
c001290d:	83 c4 04             	add    esp,0x4
c0012910:	5b                   	pop    ebx
c0012911:	5e                   	pop    esi
c0012912:	c3                   	ret    
c0012913:	90                   	nop

c0012914 <VgaText::receiveKey(unsigned char)>:
c0012914:	55                   	push   ebp
c0012915:	57                   	push   edi
c0012916:	56                   	push   esi
c0012917:	53                   	push   ebx
c0012918:	83 ec 2c             	sub    esp,0x2c
c001291b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001291f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012923:	89 ef                	mov    edi,ebp
c0012925:	81 e7 ff 00 00 00    	and    edi,0xff
c001292b:	0f 84 66 01 00 00    	je     c0012a97 <VgaText::receiveKey(unsigned char)+0x183>
c0012931:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0012937:	83 ff 08             	cmp    edi,0x8
c001293a:	75 73                	jne    c00129af <VgaText::receiveKey(unsigned char)+0x9b>
c001293c:	83 ec 0c             	sub    esp,0xc
c001293f:	56                   	push   esi
c0012940:	e8 2b dc fe ff       	call   c0000570 <strlen>
c0012945:	83 c4 10             	add    esp,0x10
c0012948:	85 c0                	test   eax,eax
c001294a:	0f 84 02 01 00 00    	je     c0012a52 <VgaText::receiveKey(unsigned char)+0x13e>
c0012950:	50                   	push   eax
c0012951:	50                   	push   eax
c0012952:	6a 08                	push   0x8
c0012954:	53                   	push   ebx
c0012955:	e8 30 fb ff ff       	call   c001248a <VgaText::putchar(char)>
c001295a:	89 34 24             	mov    DWORD PTR [esp],esi
c001295d:	e8 0e dc fe ff       	call   c0000570 <strlen>
c0012962:	83 c4 10             	add    esp,0x10
c0012965:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c001296d:	83 fa 0d             	cmp    edx,0xd
c0012970:	89 d0                	mov    eax,edx
c0012972:	0f 95 c1             	setne  cl
c0012975:	83 fa 1f             	cmp    edx,0x1f
c0012978:	0f 9e c2             	setle  dl
c001297b:	0f b6 d2             	movzx  edx,dl
c001297e:	85 ca                	test   edx,ecx
c0012980:	74 17                	je     c0012999 <VgaText::receiveKey(unsigned char)+0x85>
c0012982:	83 e8 08             	sub    eax,0x8
c0012985:	3c 02                	cmp    al,0x2
c0012987:	76 10                	jbe    c0012999 <VgaText::receiveKey(unsigned char)+0x85>
c0012989:	55                   	push   ebp
c001298a:	55                   	push   ebp
c001298b:	68 93 4c 02 c0       	push   0xc0024c93
c0012990:	53                   	push   ebx
c0012991:	e8 32 fc ff ff       	call   c00125c8 <VgaText::puts(char const*)>
c0012996:	83 c4 10             	add    esp,0x10
c0012999:	83 ec 0c             	sub    esp,0xc
c001299c:	56                   	push   esi
c001299d:	e8 ce db fe ff       	call   c0000570 <strlen>
c00129a2:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c00129aa:	e9 a0 00 00 00       	jmp    c0012a4f <VgaText::receiveKey(unsigned char)+0x13b>
c00129af:	83 ec 0c             	sub    esp,0xc
c00129b2:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c00129b8:	50                   	push   eax
c00129b9:	e8 b2 db fe ff       	call   c0000570 <strlen>
c00129be:	89 34 24             	mov    DWORD PTR [esp],esi
c00129c1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00129c5:	e8 a6 db fe ff       	call   c0000570 <strlen>
c00129ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00129ce:	83 c4 10             	add    esp,0x10
c00129d1:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c00129d5:	3d 80 00 00 00       	cmp    eax,0x80
c00129da:	0f 87 b7 00 00 00    	ja     c0012a97 <VgaText::receiveKey(unsigned char)+0x183>
c00129e0:	8d 45 ff             	lea    eax,[ebp-0x1]
c00129e3:	8d 55 f7             	lea    edx,[ebp-0x9]
c00129e6:	3c 1e                	cmp    al,0x1e
c00129e8:	0f 96 c0             	setbe  al
c00129eb:	80 fa 01             	cmp    dl,0x1
c00129ee:	0f 97 c2             	seta   dl
c00129f1:	0f b6 d2             	movzx  edx,dl
c00129f4:	85 c2                	test   edx,eax
c00129f6:	74 2e                	je     c0012a26 <VgaText::receiveKey(unsigned char)+0x112>
c00129f8:	83 ff 0d             	cmp    edi,0xd
c00129fb:	74 29                	je     c0012a26 <VgaText::receiveKey(unsigned char)+0x112>
c00129fd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012a00:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012a03:	68 99 4c 02 c0       	push   0xc0024c99
c0012a08:	53                   	push   ebx
c0012a09:	e8 2c fc ff ff       	call   c001263a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0012a0e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012a11:	8d 45 40             	lea    eax,[ebp+0x40]
c0012a14:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012a17:	0f b6 c0             	movzx  eax,al
c0012a1a:	50                   	push   eax
c0012a1b:	53                   	push   ebx
c0012a1c:	e8 99 f9 ff ff       	call   c00123ba <VgaText::putchar(char, VgaColour, VgaColour)>
c0012a21:	83 c4 20             	add    esp,0x20
c0012a24:	eb 11                	jmp    c0012a37 <VgaText::receiveKey(unsigned char)+0x123>
c0012a26:	89 e8                	mov    eax,ebp
c0012a28:	51                   	push   ecx
c0012a29:	0f be c0             	movsx  eax,al
c0012a2c:	51                   	push   ecx
c0012a2d:	50                   	push   eax
c0012a2e:	53                   	push   ebx
c0012a2f:	e8 56 fa ff ff       	call   c001248a <VgaText::putchar(char)>
c0012a34:	83 c4 10             	add    esp,0x10
c0012a37:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012a3c:	89 e8                	mov    eax,ebp
c0012a3e:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0012a42:	52                   	push   edx
c0012a43:	52                   	push   edx
c0012a44:	8d 44 24 26          	lea    eax,[esp+0x26]
c0012a48:	50                   	push   eax
c0012a49:	56                   	push   esi
c0012a4a:	e8 f1 dd fe ff       	call   c0000840 <strcat>
c0012a4f:	83 c4 10             	add    esp,0x10
c0012a52:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0012a58:	b0 01                	mov    al,0x1
c0012a5a:	83 ff 1c             	cmp    edi,0x1c
c0012a5d:	77 0e                	ja     c0012a6d <VgaText::receiveKey(unsigned char)+0x159>
c0012a5f:	b8 08 04 00 10       	mov    eax,0x10000408
c0012a64:	89 f9                	mov    ecx,edi
c0012a66:	d3 e8                	shr    eax,cl
c0012a68:	f7 d0                	not    eax
c0012a6a:	83 e0 01             	and    eax,0x1
c0012a6d:	84 c0                	test   al,al
c0012a6f:	74 04                	je     c0012a75 <VgaText::receiveKey(unsigned char)+0x161>
c0012a71:	84 d2                	test   dl,dl
c0012a73:	74 22                	je     c0012a97 <VgaText::receiveKey(unsigned char)+0x183>
c0012a75:	81 c3 02 01 00 00    	add    ebx,0x102
c0012a7b:	50                   	push   eax
c0012a7c:	50                   	push   eax
c0012a7d:	56                   	push   esi
c0012a7e:	53                   	push   ebx
c0012a7f:	e8 bc dd fe ff       	call   c0000840 <strcat>
c0012a84:	83 c4 0c             	add    esp,0xc
c0012a87:	68 80 00 00 00       	push   0x80
c0012a8c:	6a 00                	push   0x0
c0012a8e:	56                   	push   esi
c0012a8f:	e8 5c da fe ff       	call   c00004f0 <memset>
c0012a94:	83 c4 10             	add    esp,0x10
c0012a97:	83 c4 2c             	add    esp,0x2c
c0012a9a:	5b                   	pop    ebx
c0012a9b:	5e                   	pop    esi
c0012a9c:	5f                   	pop    edi
c0012a9d:	5d                   	pop    ebp
c0012a9e:	c3                   	ret    
c0012a9f:	90                   	nop

c0012aa0 <VgaText::doUpdate()>:
c0012aa0:	c3                   	ret    
c0012aa1:	66 90                	xchg   ax,ax
c0012aa3:	90                   	nop

c0012aa4 <TSS::TSS()>:
c0012aa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012aa8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012aaf:	90                   	nop
c0012ab0:	c3                   	ret    
c0012ab1:	90                   	nop
c0012ab2:	66 90                	xchg   ax,ax

c0012ab4 <TSS::setESP(unsigned long)>:
c0012ab4:	55                   	push   ebp
c0012ab5:	89 e5                	mov    ebp,esp
c0012ab7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012aba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012abd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012ac0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012ac3:	90                   	nop
c0012ac4:	5d                   	pop    ebp
c0012ac5:	c3                   	ret    
c0012ac6:	66 90                	xchg   ax,ax

c0012ac8 <TSS::flush()>:
c0012ac8:	55                   	push   ebp
c0012ac9:	89 e5                	mov    ebp,esp
c0012acb:	83 ec 10             	sub    esp,0x10
c0012ace:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ad1:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ad3:	83 c8 03             	or     eax,0x3
c0012ad6:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0012ada:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0012ade:	66 89 d0             	mov    ax,dx
c0012ae1:	0f 00 d8             	ltr    ax
c0012ae4:	90                   	nop
c0012ae5:	c9                   	leave  
c0012ae6:	c3                   	ret    
c0012ae7:	90                   	nop

c0012ae8 <TSS::setup(unsigned long, unsigned long)>:
c0012ae8:	55                   	push   ebp
c0012ae9:	89 e5                	mov    ebp,esp
c0012aeb:	83 ec 18             	sub    esp,0x18
c0012aee:	83 ec 0c             	sub    esp,0xc
c0012af1:	6a 68                	push   0x68
c0012af3:	e8 6b cc ff ff       	call   c000f763 <malloc>
c0012af8:	83 c4 10             	add    esp,0x10
c0012afb:	89 c2                	mov    edx,eax
c0012afd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b00:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012b03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b09:	83 ec 08             	sub    esp,0x8
c0012b0c:	50                   	push   eax
c0012b0d:	68 bc 4c 02 c0       	push   0xc0024cbc
c0012b12:	e8 65 44 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012b17:	83 c4 10             	add    esp,0x10
c0012b1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b1d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b20:	83 ec 04             	sub    esp,0x4
c0012b23:	6a 68                	push   0x68
c0012b25:	6a 00                	push   0x0
c0012b27:	50                   	push   eax
c0012b28:	e8 c3 d9 fe ff       	call   c00004f0 <memset>
c0012b2d:	83 c4 10             	add    esp,0x10
c0012b30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b36:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0012b3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b3f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b42:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0012b48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b4b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b4e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012b51:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012b54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b57:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b5a:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0012b60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b63:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b66:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0012b6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b6f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b72:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0012b78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b7e:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0012b84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b8a:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0012b90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b93:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b96:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0012b9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012b9f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ba2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0012ba5:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0012ba8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bae:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012bb1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012bb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bb7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bba:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0012bc1:	83 ec 0c             	sub    esp,0xc
c0012bc4:	68 d3 4c 02 c0       	push   0xc0024cd3
c0012bc9:	e8 ae 43 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012bce:	83 c4 10             	add    esp,0x10
c0012bd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bd7:	0f 20 da             	mov    edx,cr3
c0012bda:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0012bdd:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0012be0:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0012be3:	83 ec 0c             	sub    esp,0xc
c0012be6:	68 d6 4c 02 c0       	push   0xc0024cd6
c0012beb:	e8 8c 43 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012bf0:	83 c4 10             	add    esp,0x10
c0012bf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bf6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bf9:	83 ec 08             	sub    esp,0x8
c0012bfc:	50                   	push   eax
c0012bfd:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012c00:	50                   	push   eax
c0012c01:	e8 c2 bb ff ff       	call   c000e7c8 <GDTEntry::setBase(unsigned int)>
c0012c06:	83 c4 10             	add    esp,0x10
c0012c09:	83 ec 08             	sub    esp,0x8
c0012c0c:	6a 68                	push   0x68
c0012c0e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012c11:	50                   	push   eax
c0012c12:	e8 cd bb ff ff       	call   c000e7e4 <GDTEntry::setLimit(unsigned int)>
c0012c17:	83 c4 10             	add    esp,0x10
c0012c1a:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0012c1e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012c21:	83 e0 0f             	and    eax,0xf
c0012c24:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012c27:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012c2a:	83 c8 40             	or     eax,0x40
c0012c2d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012c30:	83 ec 0c             	sub    esp,0xc
c0012c33:	68 d9 4c 02 c0       	push   0xc0024cd9
c0012c38:	e8 3f 43 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012c3d:	83 c4 10             	add    esp,0x10
c0012c40:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0012c45:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012c4b:	83 ec 08             	sub    esp,0x8
c0012c4e:	50                   	push   eax
c0012c4f:	68 dc 4c 02 c0       	push   0xc0024cdc
c0012c54:	e8 23 43 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012c59:	83 c4 10             	add    esp,0x10
c0012c5c:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0012c61:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012c67:	05 64 01 00 00       	add    eax,0x164
c0012c6c:	83 ec 04             	sub    esp,0x4
c0012c6f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0012c72:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0012c75:	50                   	push   eax
c0012c76:	e8 9d bb ff ff       	call   c000e818 <GDT::addEntry(GDTEntry)>
c0012c7b:	83 c4 10             	add    esp,0x10
c0012c7e:	89 c2                	mov    edx,eax
c0012c80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c83:	89 10                	mov    DWORD PTR [eax],edx
c0012c85:	83 ec 0c             	sub    esp,0xc
c0012c88:	68 f1 4c 02 c0       	push   0xc0024cf1
c0012c8d:	e8 ea 42 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012c92:	83 c4 10             	add    esp,0x10
c0012c95:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0012c9a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012ca0:	05 64 01 00 00       	add    eax,0x164
c0012ca5:	83 ec 0c             	sub    esp,0xc
c0012ca8:	50                   	push   eax
c0012ca9:	e8 94 bb ff ff       	call   c000e842 <GDT::flush()>
c0012cae:	83 c4 10             	add    esp,0x10
c0012cb1:	83 ec 0c             	sub    esp,0xc
c0012cb4:	68 f4 4c 02 c0       	push   0xc0024cf4
c0012cb9:	e8 be 42 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012cbe:	83 c4 10             	add    esp,0x10
c0012cc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012cc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cc6:	c9                   	leave  
c0012cc7:	c3                   	ret    

c0012cc8 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0012cc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ccc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012cd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cd3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012cd8:	75 08                	jne    c0012ce2 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0012cda:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012ce0:	eb 38                	jmp    c0012d1a <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0012ce2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012ce7:	75 17                	jne    c0012d00 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0012ce9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012cee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012cf1:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012cf7:	8b 10                	mov    edx,DWORD PTR [eax]
c0012cf9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012cfd:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0012d00:	89 c1                	mov    ecx,eax
c0012d02:	83 e1 fd             	and    ecx,0xfffffffd
c0012d05:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0012d0b:	74 cd                	je     c0012cda <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012d0d:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012d12:	83 e0 ef             	and    eax,0xffffffef
c0012d15:	83 f8 08             	cmp    eax,0x8
c0012d18:	76 c0                	jbe    c0012cda <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012d1a:	31 c0                	xor    eax,eax
c0012d1c:	c3                   	ret    
c0012d1d:	90                   	nop

c0012d1e <ReservedFilename::isAtty()>:
c0012d1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d22:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012d25:	31 c0                	xor    eax,eax
c0012d27:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0012d2d:	74 09                	je     c0012d38 <ReservedFilename::isAtty()+0x1a>
c0012d2f:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0012d35:	0f 94 c0             	sete   al
c0012d38:	c3                   	ret    
c0012d39:	90                   	nop

c0012d3a <ReservedFilename::write(unsigned long long, void*, int*)>:
c0012d3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012d42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d45:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012d49:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012d4e:	75 08                	jne    c0012d58 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0012d50:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012d56:	eb 3d                	jmp    c0012d95 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012d58:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012d5d:	75 17                	jne    c0012d76 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0012d5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d64:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012d67:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012d6d:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012d73:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0012d76:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012d7b:	75 04                	jne    c0012d81 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0012d7d:	89 0a                	mov    DWORD PTR [edx],ecx
c0012d7f:	eb 14                	jmp    c0012d95 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012d81:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0012d86:	74 c8                	je     c0012d50 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012d88:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012d8d:	83 e0 ef             	and    eax,0xffffffef
c0012d90:	83 f8 08             	cmp    eax,0x8
c0012d93:	76 bb                	jbe    c0012d50 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012d95:	31 c0                	xor    eax,eax
c0012d97:	c3                   	ret    

c0012d98 <UnixFile::getFileDescriptor()>:
c0012d98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d9f:	c3                   	ret    

c0012da0 <UnixFile::UnixFile(int)>:
c0012da0:	53                   	push   ebx
c0012da1:	83 ec 28             	sub    esp,0x28
c0012da4:	ba 20 4d 02 c0       	mov    edx,0xc0024d20
c0012da9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012dad:	89 10                	mov    DWORD PTR [eax],edx
c0012daf:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0012db7:	0f 8f 90 01 00 00    	jg     c0012f4d <UnixFile::UnixFile(int)+0x1ad>
c0012dbd:	a1 c0 70 02 c0       	mov    eax,ds:0xc00270c0
c0012dc2:	8d 50 01             	lea    edx,[eax+0x1]
c0012dc5:	89 15 c0 70 02 c0    	mov    DWORD PTR ds:0xc00270c0,edx
c0012dcb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012dcf:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012dd2:	83 ec 08             	sub    esp,0x8
c0012dd5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012dd9:	68 78 d2 02 c0       	push   0xc002d278
c0012dde:	e8 6b fa 00 00       	call   c002284e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0012de3:	83 c4 10             	add    esp,0x10
c0012de6:	a0 74 d2 02 c0       	mov    al,ds:0xc002d274
c0012deb:	83 f0 01             	xor    eax,0x1
c0012dee:	0f b6 c0             	movzx  eax,al
c0012df1:	85 c0                	test   eax,eax
c0012df3:	0f 84 55 01 00 00    	je     c0012f4e <UnixFile::UnixFile(int)+0x1ae>
c0012df9:	c6 05 74 d2 02 c0 01 	mov    BYTE PTR ds:0xc002d274,0x1
c0012e00:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0012e08:	83 ec 0c             	sub    esp,0xc
c0012e0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e0f:	e8 4f c9 ff ff       	call   c000f763 <malloc>
c0012e14:	83 c4 10             	add    esp,0x10
c0012e17:	89 c3                	mov    ebx,eax
c0012e19:	83 ec 08             	sub    esp,0x8
c0012e1c:	68 03 ff ff 0f       	push   0xfffff03
c0012e21:	53                   	push   ebx
c0012e22:	e8 2d 01 00 00       	call   c0012f54 <ReservedFilename::ReservedFilename(int)>
c0012e27:	83 c4 10             	add    esp,0x10
c0012e2a:	89 1d 6c d2 02 c0    	mov    DWORD PTR ds:0xc002d26c,ebx
c0012e30:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0012e38:	83 ec 0c             	sub    esp,0xc
c0012e3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e3f:	e8 1f c9 ff ff       	call   c000f763 <malloc>
c0012e44:	83 c4 10             	add    esp,0x10
c0012e47:	89 c3                	mov    ebx,eax
c0012e49:	83 ec 08             	sub    esp,0x8
c0012e4c:	68 01 ff ff 0f       	push   0xfffff01
c0012e51:	53                   	push   ebx
c0012e52:	e8 fd 00 00 00       	call   c0012f54 <ReservedFilename::ReservedFilename(int)>
c0012e57:	83 c4 10             	add    esp,0x10
c0012e5a:	89 1d 70 d2 02 c0    	mov    DWORD PTR ds:0xc002d270,ebx
c0012e60:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0012e68:	83 ec 0c             	sub    esp,0xc
c0012e6b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012e6f:	e8 ef c8 ff ff       	call   c000f763 <malloc>
c0012e74:	83 c4 10             	add    esp,0x10
c0012e77:	89 c3                	mov    ebx,eax
c0012e79:	83 ec 08             	sub    esp,0x8
c0012e7c:	68 00 ff ff 0f       	push   0xfffff00
c0012e81:	53                   	push   ebx
c0012e82:	e8 cd 00 00 00       	call   c0012f54 <ReservedFilename::ReservedFilename(int)>
c0012e87:	83 c4 10             	add    esp,0x10
c0012e8a:	89 1d 64 d2 02 c0    	mov    DWORD PTR ds:0xc002d264,ebx
c0012e90:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0012e98:	83 ec 0c             	sub    esp,0xc
c0012e9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012e9f:	e8 bf c8 ff ff       	call   c000f763 <malloc>
c0012ea4:	83 c4 10             	add    esp,0x10
c0012ea7:	89 c3                	mov    ebx,eax
c0012ea9:	83 ec 08             	sub    esp,0x8
c0012eac:	68 02 ff ff 0f       	push   0xfffff02
c0012eb1:	53                   	push   ebx
c0012eb2:	e8 9d 00 00 00       	call   c0012f54 <ReservedFilename::ReservedFilename(int)>
c0012eb7:	83 c4 10             	add    esp,0x10
c0012eba:	89 1d 68 d2 02 c0    	mov    DWORD PTR ds:0xc002d268,ebx
c0012ec0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012ec8:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0012ecd:	7f 7f                	jg     c0012f4e <UnixFile::UnixFile(int)+0x1ae>
c0012ecf:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0012ed7:	83 ec 0c             	sub    esp,0xc
c0012eda:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012ede:	e8 80 c8 ff ff       	call   c000f763 <malloc>
c0012ee3:	83 c4 10             	add    esp,0x10
c0012ee6:	89 c3                	mov    ebx,eax
c0012ee8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012eec:	05 10 ff ff 0f       	add    eax,0xfffff10
c0012ef1:	83 ec 08             	sub    esp,0x8
c0012ef4:	50                   	push   eax
c0012ef5:	53                   	push   ebx
c0012ef6:	e8 59 00 00 00       	call   c0012f54 <ReservedFilename::ReservedFilename(int)>
c0012efb:	83 c4 10             	add    esp,0x10
c0012efe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f02:	89 1c 85 40 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2dc0],ebx
c0012f09:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0012f11:	83 ec 0c             	sub    esp,0xc
c0012f14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012f18:	e8 46 c8 ff ff       	call   c000f763 <malloc>
c0012f1d:	83 c4 10             	add    esp,0x10
c0012f20:	89 c3                	mov    ebx,eax
c0012f22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f26:	05 20 ff ff 0f       	add    eax,0xfffff20
c0012f2b:	83 ec 08             	sub    esp,0x8
c0012f2e:	50                   	push   eax
c0012f2f:	53                   	push   ebx
c0012f30:	e8 1f 00 00 00       	call   c0012f54 <ReservedFilename::ReservedFilename(int)>
c0012f35:	83 c4 10             	add    esp,0x10
c0012f38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f3c:	89 1c 85 00 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2e00],ebx
c0012f43:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012f48:	e9 7b ff ff ff       	jmp    c0012ec8 <UnixFile::UnixFile(int)+0x128>
c0012f4d:	90                   	nop
c0012f4e:	83 c4 28             	add    esp,0x28
c0012f51:	5b                   	pop    ebx
c0012f52:	c3                   	ret    
c0012f53:	90                   	nop

c0012f54 <ReservedFilename::ReservedFilename(int)>:
c0012f54:	83 ec 0c             	sub    esp,0xc
c0012f57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f5b:	83 ec 08             	sub    esp,0x8
c0012f5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f62:	50                   	push   eax
c0012f63:	e8 38 fe ff ff       	call   c0012da0 <UnixFile::UnixFile(int)>
c0012f68:	83 c4 10             	add    esp,0x10
c0012f6b:	ba 3c 4d 02 c0       	mov    edx,0xc0024d3c
c0012f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f74:	89 10                	mov    DWORD PTR [eax],edx
c0012f76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f7a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012f7e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012f81:	90                   	nop
c0012f82:	83 c4 0c             	add    esp,0xc
c0012f85:	c3                   	ret    

c0012f86 <UnixFile::~UnixFile()>:
c0012f86:	83 ec 1c             	sub    esp,0x1c
c0012f89:	ba 20 4d 02 c0       	mov    edx,0xc0024d20
c0012f8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012f92:	89 10                	mov    DWORD PTR [eax],edx
c0012f94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012f98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f9b:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0012fa0:	7f 76                	jg     c0013018 <UnixFile::~UnixFile()+0x92>
c0012fa2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012faa:	83 ec 0c             	sub    esp,0xc
c0012fad:	68 78 d2 02 c0       	push   0xc002d278
c0012fb2:	e8 6b f9 00 00       	call   c0022922 <LinkedList<UnixFile>::getFirstElement()>
c0012fb7:	83 c4 10             	add    esp,0x10
c0012fba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012fbe:	83 ec 0c             	sub    esp,0xc
c0012fc1:	68 78 d2 02 c0       	push   0xc002d278
c0012fc6:	e8 5f f9 00 00       	call   c002292a <LinkedList<UnixFile>::removeFirst()>
c0012fcb:	83 c4 10             	add    esp,0x10
c0012fce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012fd2:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0012fd6:	74 43                	je     c001301b <UnixFile::~UnixFile()+0x95>
c0012fd8:	83 ec 08             	sub    esp,0x8
c0012fdb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012fdf:	68 78 d2 02 c0       	push   0xc002d278
c0012fe4:	e8 65 f8 00 00       	call   c002284e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0012fe9:	83 c4 10             	add    esp,0x10
c0012fec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012ff0:	8d 50 01             	lea    edx,[eax+0x1]
c0012ff3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012ff7:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0012ffc:	0f 94 c0             	sete   al
c0012fff:	0f b6 c0             	movzx  eax,al
c0013002:	85 c0                	test   eax,eax
c0013004:	74 a4                	je     c0012faa <UnixFile::~UnixFile()+0x24>
c0013006:	83 ec 0c             	sub    esp,0xc
c0013009:	68 f8 4c 02 c0       	push   0xc0024cf8
c001300e:	e8 ad cb ff ff       	call   c000fbc0 <KePanic(char const*)>
c0013013:	83 c4 10             	add    esp,0x10
c0013016:	eb 92                	jmp    c0012faa <UnixFile::~UnixFile()+0x24>
c0013018:	90                   	nop
c0013019:	eb 01                	jmp    c001301c <UnixFile::~UnixFile()+0x96>
c001301b:	90                   	nop
c001301c:	90                   	nop
c001301d:	83 c4 1c             	add    esp,0x1c
c0013020:	c3                   	ret    
c0013021:	90                   	nop

c0013022 <UnixFile::~UnixFile()>:
c0013022:	83 ec 0c             	sub    esp,0xc
c0013025:	83 ec 0c             	sub    esp,0xc
c0013028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001302c:	e8 55 ff ff ff       	call   c0012f86 <UnixFile::~UnixFile()>
c0013031:	83 c4 10             	add    esp,0x10
c0013034:	83 ec 08             	sub    esp,0x8
c0013037:	6a 0c                	push   0xc
c0013039:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001303d:	e8 3a a2 ff ff       	call   c000d27c <operator delete(void*, unsigned long)>
c0013042:	83 c4 10             	add    esp,0x10
c0013045:	83 c4 0c             	add    esp,0xc
c0013048:	c3                   	ret    
c0013049:	90                   	nop

c001304a <ReservedFilename::~ReservedFilename()>:
c001304a:	83 ec 0c             	sub    esp,0xc
c001304d:	ba 3c 4d 02 c0       	mov    edx,0xc0024d3c
c0013052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013056:	89 10                	mov    DWORD PTR [eax],edx
c0013058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001305c:	83 ec 0c             	sub    esp,0xc
c001305f:	50                   	push   eax
c0013060:	e8 21 ff ff ff       	call   c0012f86 <UnixFile::~UnixFile()>
c0013065:	83 c4 10             	add    esp,0x10
c0013068:	90                   	nop
c0013069:	83 c4 0c             	add    esp,0xc
c001306c:	c3                   	ret    
c001306d:	90                   	nop

c001306e <ReservedFilename::~ReservedFilename()>:
c001306e:	83 ec 0c             	sub    esp,0xc
c0013071:	83 ec 0c             	sub    esp,0xc
c0013074:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013078:	e8 cd ff ff ff       	call   c001304a <ReservedFilename::~ReservedFilename()>
c001307d:	83 c4 10             	add    esp,0x10
c0013080:	83 ec 08             	sub    esp,0x8
c0013083:	6a 0c                	push   0xc
c0013085:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013089:	e8 ee a1 ff ff       	call   c000d27c <operator delete(void*, unsigned long)>
c001308e:	83 c4 10             	add    esp,0x10
c0013091:	83 c4 0c             	add    esp,0xc
c0013094:	c3                   	ret    

c0013095 <KeGetFileFromDescriptor(int)>:
c0013095:	53                   	push   ebx
c0013096:	83 ec 08             	sub    esp,0x8
c0013099:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001309d:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00130a3:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00130a9:	7f 30                	jg     c00130db <KeGetFileFromDescriptor(int)+0x46>
c00130ab:	83 ec 0c             	sub    esp,0xc
c00130ae:	68 78 d2 02 c0       	push   0xc002d278
c00130b3:	e8 6a f8 00 00       	call   c0022922 <LinkedList<UnixFile>::getFirstElement()>
c00130b8:	83 c4 10             	add    esp,0x10
c00130bb:	8d 50 ff             	lea    edx,[eax-0x1]
c00130be:	83 fa fd             	cmp    edx,0xfffffffd
c00130c1:	76 04                	jbe    c00130c7 <KeGetFileFromDescriptor(int)+0x32>
c00130c3:	31 c0                	xor    eax,eax
c00130c5:	eb 6e                	jmp    c0013135 <KeGetFileFromDescriptor(int)+0xa0>
c00130c7:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00130ca:	74 69                	je     c0013135 <KeGetFileFromDescriptor(int)+0xa0>
c00130cc:	52                   	push   edx
c00130cd:	52                   	push   edx
c00130ce:	50                   	push   eax
c00130cf:	68 78 d2 02 c0       	push   0xc002d278
c00130d4:	e8 f3 f8 00 00       	call   c00229cc <LinkedList<UnixFile>::getNext(UnixFile*)>
c00130d9:	eb dd                	jmp    c00130b8 <KeGetFileFromDescriptor(int)+0x23>
c00130db:	a1 6c d2 02 c0       	mov    eax,ds:0xc002d26c
c00130e0:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00130e6:	74 4d                	je     c0013135 <KeGetFileFromDescriptor(int)+0xa0>
c00130e8:	a1 70 d2 02 c0       	mov    eax,ds:0xc002d270
c00130ed:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00130f3:	74 40                	je     c0013135 <KeGetFileFromDescriptor(int)+0xa0>
c00130f5:	a1 68 d2 02 c0       	mov    eax,ds:0xc002d268
c00130fa:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0013100:	74 33                	je     c0013135 <KeGetFileFromDescriptor(int)+0xa0>
c0013102:	a1 64 d2 02 c0       	mov    eax,ds:0xc002d264
c0013107:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001310d:	74 26                	je     c0013135 <KeGetFileFromDescriptor(int)+0xa0>
c001310f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0013115:	83 f8 08             	cmp    eax,0x8
c0013118:	77 09                	ja     c0013123 <KeGetFileFromDescriptor(int)+0x8e>
c001311a:	8b 04 85 40 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2dc0]
c0013121:	eb 12                	jmp    c0013135 <KeGetFileFromDescriptor(int)+0xa0>
c0013123:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0013129:	83 fb 08             	cmp    ebx,0x8
c001312c:	77 95                	ja     c00130c3 <KeGetFileFromDescriptor(int)+0x2e>
c001312e:	8b 04 9d 00 d2 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2e00]
c0013135:	83 c4 08             	add    esp,0x8
c0013138:	5b                   	pop    ebx
c0013139:	c3                   	ret    

c001313a <__static_initialization_and_destruction_0(int, int)>:
c001313a:	83 ec 0c             	sub    esp,0xc
c001313d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0013142:	75 34                	jne    c0013178 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013144:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001314c:	75 2a                	jne    c0013178 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001314e:	83 ec 0c             	sub    esp,0xc
c0013151:	68 78 d2 02 c0       	push   0xc002d278
c0013156:	e8 b1 f6 00 00       	call   c002280c <LinkedList<UnixFile>::LinkedList()>
c001315b:	83 c4 10             	add    esp,0x10
c001315e:	83 ec 04             	sub    esp,0x4
c0013161:	68 04 69 02 c0       	push   0xc0026904
c0013166:	68 78 d2 02 c0       	push   0xc002d278
c001316b:	68 0a 28 02 c0       	push   0xc002280a
c0013170:	e8 b7 a0 ff ff       	call   c000d22c <__cxa_atexit>
c0013175:	83 c4 10             	add    esp,0x10
c0013178:	90                   	nop
c0013179:	83 c4 0c             	add    esp,0xc
c001317c:	c3                   	ret    

c001317d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001317d:	83 ec 0c             	sub    esp,0xc
c0013180:	83 ec 08             	sub    esp,0x8
c0013183:	68 ff ff 00 00       	push   0xffff
c0013188:	6a 01                	push   0x1
c001318a:	e8 ab ff ff ff       	call   c001313a <__static_initialization_and_destruction_0(int, int)>
c001318f:	83 c4 10             	add    esp,0x10
c0013192:	83 c4 0c             	add    esp,0xc
c0013195:	c3                   	ret    

c0013196 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0013196:	53                   	push   ebx
c0013197:	8b 15 c8 70 02 c0    	mov    edx,DWORD PTR ds:0xc00270c8
c001319d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00131a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00131a5:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00131ab:	89 d8                	mov    eax,ebx
c00131ad:	d1 e8                	shr    eax,1
c00131af:	01 d0                	add    eax,edx
c00131b1:	80 e3 01             	and    bl,0x1
c00131b4:	8a 10                	mov    dl,BYTE PTR [eax]
c00131b6:	75 09                	jne    c00131c1 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00131b8:	83 e2 f0             	and    edx,0xfffffff0
c00131bb:	09 ca                	or     edx,ecx
c00131bd:	88 10                	mov    BYTE PTR [eax],dl
c00131bf:	5b                   	pop    ebx
c00131c0:	c3                   	ret    
c00131c1:	83 e2 0f             	and    edx,0xf
c00131c4:	0f b6 c9             	movzx  ecx,cl
c00131c7:	c1 e1 04             	shl    ecx,0x4
c00131ca:	09 ca                	or     edx,ecx
c00131cc:	88 10                	mov    BYTE PTR [eax],dl
c00131ce:	5b                   	pop    ebx
c00131cf:	c3                   	ret    

c00131d0 <Virt::getPageState(unsigned long)>:
c00131d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131d4:	8b 0d c8 70 02 c0    	mov    ecx,DWORD PTR ds:0xc00270c8
c00131da:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00131e0:	89 d0                	mov    eax,edx
c00131e2:	d1 e8                	shr    eax,1
c00131e4:	80 e2 01             	and    dl,0x1
c00131e7:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00131ea:	74 03                	je     c00131ef <Virt::getPageState(unsigned long)+0x1f>
c00131ec:	c1 e8 04             	shr    eax,0x4
c00131ef:	83 e0 0f             	and    eax,0xf
c00131f2:	c3                   	ret    

c00131f3 <Virt::allocateKernelVirtualPages(int)>:
c00131f3:	55                   	push   ebp
c00131f4:	31 ed                	xor    ebp,ebp
c00131f6:	57                   	push   edi
c00131f7:	31 ff                	xor    edi,edi
c00131f9:	56                   	push   esi
c00131fa:	53                   	push   ebx
c00131fb:	31 db                	xor    ebx,ebx
c00131fd:	83 ec 0c             	sub    esp,0xc
c0013200:	8b 35 c4 70 02 c0    	mov    esi,DWORD PTR ds:0xc00270c4
c0013206:	56                   	push   esi
c0013207:	e8 c4 ff ff ff       	call   c00131d0 <Virt::getPageState(unsigned long)>
c001320c:	5a                   	pop    edx
c001320d:	84 c0                	test   al,al
c001320f:	75 41                	jne    c0013252 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0013211:	85 db                	test   ebx,ebx
c0013213:	75 02                	jne    c0013217 <Virt::allocateKernelVirtualPages(int)+0x24>
c0013215:	89 f5                	mov    ebp,esi
c0013217:	83 c3 01             	add    ebx,0x1
c001321a:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c001321e:	74 5f                	je     c001327f <Virt::allocateKernelVirtualPages(int)+0x8c>
c0013220:	83 c6 01             	add    esi,0x1
c0013223:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0013229:	76 34                	jbe    c001325f <Virt::allocateKernelVirtualPages(int)+0x6c>
c001322b:	c7 05 c4 70 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00270c4,0xc8000
c0013235:	f7 c7 01 00 00 00    	test   edi,0x1
c001323b:	75 2a                	jne    c0013267 <Virt::allocateKernelVirtualPages(int)+0x74>
c001323d:	be 00 80 0c 00       	mov    esi,0xc8000
c0013242:	bf 01 00 00 00       	mov    edi,0x1
c0013247:	56                   	push   esi
c0013248:	e8 83 ff ff ff       	call   c00131d0 <Virt::getPageState(unsigned long)>
c001324d:	5a                   	pop    edx
c001324e:	84 c0                	test   al,al
c0013250:	74 bf                	je     c0013211 <Virt::allocateKernelVirtualPages(int)+0x1e>
c0013252:	31 db                	xor    ebx,ebx
c0013254:	83 c6 01             	add    esi,0x1
c0013257:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c001325d:	77 cc                	ja     c001322b <Virt::allocateKernelVirtualPages(int)+0x38>
c001325f:	89 35 c4 70 02 c0    	mov    DWORD PTR ds:0xc00270c4,esi
c0013265:	eb 9f                	jmp    c0013206 <Virt::allocateKernelVirtualPages(int)+0x13>
c0013267:	83 ec 0c             	sub    esp,0xc
c001326a:	68 50 4d 02 c0       	push   0xc0024d50
c001326f:	e8 4c c9 ff ff       	call   c000fbc0 <KePanic(char const*)>
c0013274:	8b 35 c4 70 02 c0    	mov    esi,DWORD PTR ds:0xc00270c4
c001327a:	83 c4 10             	add    esp,0x10
c001327d:	eb 87                	jmp    c0013206 <Virt::allocateKernelVirtualPages(int)+0x13>
c001327f:	89 2d c4 70 02 c0    	mov    DWORD PTR ds:0xc00270c4,ebp
c0013285:	83 fb 01             	cmp    ebx,0x1
c0013288:	74 6f                	je     c00132f9 <Virt::allocateKernelVirtualPages(int)+0x106>
c001328a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001328e:	85 c9                	test   ecx,ecx
c0013290:	74 49                	je     c00132db <Virt::allocateKernelVirtualPages(int)+0xe8>
c0013292:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013296:	89 e8                	mov    eax,ebp
c0013298:	31 db                	xor    ebx,ebx
c001329a:	8d 79 ff             	lea    edi,[ecx-0x1]
c001329d:	eb 18                	jmp    c00132b7 <Virt::allocateKernelVirtualPages(int)+0xc4>
c001329f:	6a 01                	push   0x1
c00132a1:	83 c3 01             	add    ebx,0x1
c00132a4:	50                   	push   eax
c00132a5:	e8 ec fe ff ff       	call   c0013196 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00132aa:	58                   	pop    eax
c00132ab:	5a                   	pop    edx
c00132ac:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00132b0:	74 29                	je     c00132db <Virt::allocateKernelVirtualPages(int)+0xe8>
c00132b2:	a1 c4 70 02 c0       	mov    eax,ds:0xc00270c4
c00132b7:	8d 50 01             	lea    edx,[eax+0x1]
c00132ba:	85 db                	test   ebx,ebx
c00132bc:	89 15 c4 70 02 c0    	mov    DWORD PTR ds:0xc00270c4,edx
c00132c2:	74 24                	je     c00132e8 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00132c4:	39 df                	cmp    edi,ebx
c00132c6:	75 d7                	jne    c001329f <Virt::allocateKernelVirtualPages(int)+0xac>
c00132c8:	6a 03                	push   0x3
c00132ca:	83 c3 01             	add    ebx,0x1
c00132cd:	50                   	push   eax
c00132ce:	e8 c3 fe ff ff       	call   c0013196 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00132d3:	59                   	pop    ecx
c00132d4:	5e                   	pop    esi
c00132d5:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00132d9:	75 d7                	jne    c00132b2 <Virt::allocateKernelVirtualPages(int)+0xbf>
c00132db:	83 c4 0c             	add    esp,0xc
c00132de:	89 e8                	mov    eax,ebp
c00132e0:	5b                   	pop    ebx
c00132e1:	c1 e0 0c             	shl    eax,0xc
c00132e4:	5e                   	pop    esi
c00132e5:	5f                   	pop    edi
c00132e6:	5d                   	pop    ebp
c00132e7:	c3                   	ret    
c00132e8:	6a 02                	push   0x2
c00132ea:	bb 01 00 00 00       	mov    ebx,0x1
c00132ef:	50                   	push   eax
c00132f0:	e8 a1 fe ff ff       	call   c0013196 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00132f5:	58                   	pop    eax
c00132f6:	5a                   	pop    edx
c00132f7:	eb b9                	jmp    c00132b2 <Virt::allocateKernelVirtualPages(int)+0xbf>
c00132f9:	6a 04                	push   0x4
c00132fb:	8d 45 01             	lea    eax,[ebp+0x1]
c00132fe:	55                   	push   ebp
c00132ff:	a3 c4 70 02 c0       	mov    ds:0xc00270c4,eax
c0013304:	e8 8d fe ff ff       	call   c0013196 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013309:	5b                   	pop    ebx
c001330a:	89 e8                	mov    eax,ebp
c001330c:	5e                   	pop    esi
c001330d:	c1 e0 0c             	shl    eax,0xc
c0013310:	83 c4 0c             	add    esp,0xc
c0013313:	5b                   	pop    ebx
c0013314:	5e                   	pop    esi
c0013315:	5f                   	pop    edi
c0013316:	5d                   	pop    ebp
c0013317:	c3                   	ret    

c0013318 <Virt::freeSwapfilePage(unsigned long)>:
c0013318:	53                   	push   ebx
c0013319:	8b 15 8c d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d28c
c001331f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013323:	b8 01 00 00 00       	mov    eax,0x1
c0013328:	89 cb                	mov    ebx,ecx
c001332a:	d3 e0                	shl    eax,cl
c001332c:	c1 eb 05             	shr    ebx,0x5
c001332f:	f7 d0                	not    eax
c0013331:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0013334:	21 c1                	and    ecx,eax
c0013336:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0013339:	5b                   	pop    ebx
c001333a:	c3                   	ret    

c001333b <Virt::swapIDToSector(unsigned long)>:
c001333b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001333f:	8b 15 cc 70 02 c0    	mov    edx,DWORD PTR ds:0xc00270cc
c0013345:	8b 0d d4 70 02 c0    	mov    ecx,DWORD PTR ds:0xc00270d4
c001334b:	0f af c2             	imul   eax,edx
c001334e:	01 c8                	add    eax,ecx
c0013350:	c3                   	ret    

c0013351 <Virt::allocateSwapfilePage()>:
c0013351:	55                   	push   ebp
c0013352:	31 d2                	xor    edx,edx
c0013354:	57                   	push   edi
c0013355:	56                   	push   esi
c0013356:	53                   	push   ebx
c0013357:	83 ec 0c             	sub    esp,0xc
c001335a:	8b 0d cc 70 02 c0    	mov    ecx,DWORD PTR ds:0xc00270cc
c0013360:	a1 d0 70 02 c0       	mov    eax,ds:0xc00270d0
c0013365:	f7 f1                	div    ecx
c0013367:	39 0d d0 70 02 c0    	cmp    DWORD PTR ds:0xc00270d0,ecx
c001336d:	72 2f                	jb     c001339e <Virt::allocateSwapfilePage()+0x4d>
c001336f:	8b 35 8c d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d28c
c0013375:	8b 16                	mov    edx,DWORD PTR [esi]
c0013377:	f6 c2 01             	test   dl,0x1
c001337a:	74 3e                	je     c00133ba <Virt::allocateSwapfilePage()+0x69>
c001337c:	31 c9                	xor    ecx,ecx
c001337e:	bf 01 00 00 00       	mov    edi,0x1
c0013383:	eb 12                	jmp    c0013397 <Virt::allocateSwapfilePage()+0x46>
c0013385:	89 fd                	mov    ebp,edi
c0013387:	89 ca                	mov    edx,ecx
c0013389:	d3 e5                	shl    ebp,cl
c001338b:	c1 ea 05             	shr    edx,0x5
c001338e:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0013391:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013393:	85 ea                	test   edx,ebp
c0013395:	74 2c                	je     c00133c3 <Virt::allocateSwapfilePage()+0x72>
c0013397:	83 c1 01             	add    ecx,0x1
c001339a:	39 c8                	cmp    eax,ecx
c001339c:	77 e7                	ja     c0013385 <Virt::allocateSwapfilePage()+0x34>
c001339e:	83 ec 0c             	sub    esp,0xc
c00133a1:	68 63 50 02 c0       	push   0xc0025063
c00133a6:	e8 15 c8 ff ff       	call   c000fbc0 <KePanic(char const*)>
c00133ab:	83 c4 10             	add    esp,0x10
c00133ae:	31 c9                	xor    ecx,ecx
c00133b0:	83 c4 0c             	add    esp,0xc
c00133b3:	89 c8                	mov    eax,ecx
c00133b5:	5b                   	pop    ebx
c00133b6:	5e                   	pop    esi
c00133b7:	5f                   	pop    edi
c00133b8:	5d                   	pop    ebp
c00133b9:	c3                   	ret    
c00133ba:	89 f3                	mov    ebx,esi
c00133bc:	bd 01 00 00 00       	mov    ebp,0x1
c00133c1:	31 c9                	xor    ecx,ecx
c00133c3:	09 ea                	or     edx,ebp
c00133c5:	89 c8                	mov    eax,ecx
c00133c7:	89 13                	mov    DWORD PTR [ebx],edx
c00133c9:	83 c4 0c             	add    esp,0xc
c00133cc:	5b                   	pop    ebx
c00133cd:	5e                   	pop    esi
c00133ce:	5f                   	pop    edi
c00133cf:	5d                   	pop    ebp
c00133d0:	c3                   	ret    

c00133d1 <Virt::virtualMemorySetup()>:
c00133d1:	53                   	push   ebx
c00133d2:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00133d7:	6a 0f                	push   0xf
c00133d9:	53                   	push   ebx
c00133da:	83 c3 01             	add    ebx,0x1
c00133dd:	e8 b4 fd ff ff       	call   c0013196 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00133e2:	58                   	pop    eax
c00133e3:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00133e9:	5a                   	pop    edx
c00133ea:	75 eb                	jne    c00133d7 <Virt::virtualMemorySetup()+0x6>
c00133ec:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00133f1:	6a 00                	push   0x0
c00133f3:	53                   	push   ebx
c00133f4:	83 c3 01             	add    ebx,0x1
c00133f7:	e8 9a fd ff ff       	call   c0013196 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00133fc:	59                   	pop    ecx
c00133fd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0013403:	58                   	pop    eax
c0013404:	75 eb                	jne    c00133f1 <Virt::virtualMemorySetup()+0x20>
c0013406:	bb 00 00 0d 00       	mov    ebx,0xd0000
c001340b:	6a 0f                	push   0xf
c001340d:	53                   	push   ebx
c001340e:	83 c3 01             	add    ebx,0x1
c0013411:	e8 80 fd ff ff       	call   c0013196 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013416:	58                   	pop    eax
c0013417:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001341d:	5a                   	pop    edx
c001341e:	75 eb                	jne    c001340b <Virt::virtualMemorySetup()+0x3a>
c0013420:	5b                   	pop    ebx
c0013421:	c3                   	ret    

c0013422 <Virt::setupPageSwapping(int)>:
c0013422:	53                   	push   ebx
c0013423:	83 ec 0c             	sub    esp,0xc
c0013426:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001342a:	a1 e8 ca 02 c0       	mov    eax,ds:0xc002cae8
c001342f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0013435:	8b 10                	mov    edx,DWORD PTR [eax]
c0013437:	53                   	push   ebx
c0013438:	c1 e3 0b             	shl    ebx,0xb
c001343b:	68 7a 50 02 c0       	push   0xc002507a
c0013440:	50                   	push   eax
c0013441:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0013444:	89 1d d0 70 02 c0    	mov    DWORD PTR ds:0xc00270d0,ebx
c001344a:	c6 05 d8 70 02 c0 43 	mov    BYTE PTR ds:0xc00270d8,0x43
c0013451:	c1 eb 08             	shr    ebx,0x8
c0013454:	a3 d4 70 02 c0       	mov    ds:0xc00270d4,eax
c0013459:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001345c:	c7 05 cc 70 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00270cc,0x8
c0013466:	e8 f8 c2 ff ff       	call   c000f763 <malloc>
c001346b:	83 c4 0c             	add    esp,0xc
c001346e:	89 c1                	mov    ecx,eax
c0013470:	a3 8c d2 02 c0       	mov    ds:0xc002d28c,eax
c0013475:	31 d2                	xor    edx,edx
c0013477:	a1 d0 70 02 c0       	mov    eax,ds:0xc00270d0
c001347c:	f7 35 cc 70 02 c0    	div    DWORD PTR ds:0xc00270cc
c0013482:	c1 e8 05             	shr    eax,0x5
c0013485:	50                   	push   eax
c0013486:	6a 00                	push   0x0
c0013488:	51                   	push   ecx
c0013489:	e8 62 d0 fe ff       	call   c00004f0 <memset>
c001348e:	83 c4 18             	add    esp,0x18
c0013491:	5b                   	pop    ebx
c0013492:	c3                   	ret    
c0013493:	90                   	nop

c0013494 <VAS::setCPUSpecific(unsigned long)>:
c0013494:	c3                   	ret    
c0013495:	90                   	nop

c0013496 <VAS::VAS(VAS*)>:
c0013496:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001349a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00134a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134a5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00134ac:	90                   	nop
c00134ad:	c3                   	ret    

c00134ae <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00134ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00134b2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00134b7:	89 c2                	mov    edx,eax
c00134b9:	c1 e8 0a             	shr    eax,0xa
c00134bc:	c1 ea 16             	shr    edx,0x16
c00134bf:	83 f9 01             	cmp    ecx,0x1
c00134c2:	19 c9                	sbb    ecx,ecx
c00134c4:	c1 e2 0c             	shl    edx,0xc
c00134c7:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00134cd:	25 fc 0f 00 00       	and    eax,0xffc
c00134d2:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00134d9:	01 d0                	add    eax,edx
c00134db:	c3                   	ret    

c00134dc <VAS::getPageTableEntry(unsigned long)>:
c00134dc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00134e0:	89 ca                	mov    edx,ecx
c00134e2:	c1 e9 0a             	shr    ecx,0xa
c00134e5:	c1 ea 16             	shr    edx,0x16
c00134e8:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00134ee:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00134f4:	c1 e0 0c             	shl    eax,0xc
c00134f7:	8d 04 08             	lea    eax,[eax+ecx*1]
c00134fa:	c3                   	ret    

c00134fb <Virt::freeKernelVirtualPages(unsigned long)>:
c00134fb:	55                   	push   ebp
c00134fc:	57                   	push   edi
c00134fd:	bf 01 00 00 00       	mov    edi,0x1
c0013502:	56                   	push   esi
c0013503:	53                   	push   ebx
c0013504:	83 ec 1c             	sub    esp,0x1c
c0013507:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001350b:	c1 ee 0c             	shr    esi,0xc
c001350e:	eb 48                	jmp    c0013558 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0013510:	83 ec 08             	sub    esp,0x8
c0013513:	a1 90 d2 02 c0       	mov    eax,ds:0xc002d290
c0013518:	55                   	push   ebp
c0013519:	50                   	push   eax
c001351a:	e8 bd ff ff ff       	call   c00134dc <VAS::getPageTableEntry(unsigned long)>
c001351f:	83 c4 10             	add    esp,0x10
c0013522:	8b 10                	mov    edx,DWORD PTR [eax]
c0013524:	f6 c6 04             	test   dh,0x4
c0013527:	75 70                	jne    c0013599 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0013529:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001352f:	83 fb 04             	cmp    ebx,0x4
c0013532:	0f 84 8a 00 00 00    	je     c00135c2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0013538:	83 fb 02             	cmp    ebx,0x2
c001353b:	0f 84 9a 00 00 00    	je     c00135db <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0013541:	83 fb 03             	cmp    ebx,0x3
c0013544:	0f 84 be 00 00 00    	je     c0013608 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c001354a:	83 fb 01             	cmp    ebx,0x1
c001354d:	0f 84 a2 00 00 00    	je     c00135f5 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013553:	83 c6 01             	add    esi,0x1
c0013556:	31 ff                	xor    edi,edi
c0013558:	56                   	push   esi
c0013559:	89 f5                	mov    ebp,esi
c001355b:	e8 70 fc ff ff       	call   c00131d0 <Virt::getPageState(unsigned long)>
c0013560:	c1 e5 0c             	shl    ebp,0xc
c0013563:	0f b6 d8             	movzx  ebx,al
c0013566:	5a                   	pop    edx
c0013567:	85 db                	test   ebx,ebx
c0013569:	75 a5                	jne    c0013510 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c001356b:	83 ec 0c             	sub    esp,0xc
c001356e:	68 91 50 02 c0       	push   0xc0025091
c0013573:	e8 48 c6 ff ff       	call   c000fbc0 <KePanic(char const*)>
c0013578:	5a                   	pop    edx
c0013579:	59                   	pop    ecx
c001357a:	55                   	push   ebp
c001357b:	8b 2d 90 d2 02 c0    	mov    ebp,DWORD PTR ds:0xc002d290
c0013581:	55                   	push   ebp
c0013582:	e8 55 ff ff ff       	call   c00134dc <VAS::getPageTableEntry(unsigned long)>
c0013587:	83 c4 10             	add    esp,0x10
c001358a:	8b 10                	mov    edx,DWORD PTR [eax]
c001358c:	f6 c6 04             	test   dh,0x4
c001358f:	75 08                	jne    c0013599 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0013591:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013597:	eb ba                	jmp    c0013553 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013599:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001359d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00135a3:	83 ec 0c             	sub    esp,0xc
c00135a6:	52                   	push   edx
c00135a7:	e8 9f c7 ff ff       	call   c000fd4b <Phys::freePage(unsigned long)>
c00135ac:	83 c4 10             	add    esp,0x10
c00135af:	83 fb 04             	cmp    ebx,0x4
c00135b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135b6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00135bc:	0f 85 76 ff ff ff    	jne    c0013538 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00135c2:	83 e7 01             	and    edi,0x1
c00135c5:	75 46                	jne    c001360d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00135c7:	c7 44 24 30 70 4d 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024d70
c00135cf:	83 c4 1c             	add    esp,0x1c
c00135d2:	5b                   	pop    ebx
c00135d3:	5e                   	pop    esi
c00135d4:	5f                   	pop    edi
c00135d5:	5d                   	pop    ebp
c00135d6:	e9 e5 c5 ff ff       	jmp    c000fbc0 <KePanic(char const*)>
c00135db:	83 e7 01             	and    edi,0x1
c00135de:	75 15                	jne    c00135f5 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00135e0:	83 ec 0c             	sub    esp,0xc
c00135e3:	68 ad 50 02 c0       	push   0xc00250ad
c00135e8:	e8 d3 c5 ff ff       	call   c000fbc0 <KePanic(char const*)>
c00135ed:	83 c4 10             	add    esp,0x10
c00135f0:	e9 5e ff ff ff       	jmp    c0013553 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00135f5:	83 ec 08             	sub    esp,0x8
c00135f8:	6a 00                	push   0x0
c00135fa:	56                   	push   esi
c00135fb:	e8 96 fb ff ff       	call   c0013196 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013600:	83 c4 10             	add    esp,0x10
c0013603:	e9 4b ff ff ff       	jmp    c0013553 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013608:	83 e7 01             	and    edi,0x1
c001360b:	75 16                	jne    c0013623 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c001360d:	83 ec 08             	sub    esp,0x8
c0013610:	6a 00                	push   0x0
c0013612:	56                   	push   esi
c0013613:	e8 7e fb ff ff       	call   c0013196 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013618:	83 c4 10             	add    esp,0x10
c001361b:	83 c4 1c             	add    esp,0x1c
c001361e:	5b                   	pop    ebx
c001361f:	5e                   	pop    esi
c0013620:	5f                   	pop    edi
c0013621:	5d                   	pop    ebp
c0013622:	c3                   	ret    
c0013623:	c7 44 24 30 c9 50 02 c0 	mov    DWORD PTR [esp+0x30],0xc00250c9
c001362b:	83 c4 1c             	add    esp,0x1c
c001362e:	5b                   	pop    ebx
c001362f:	5e                   	pop    esi
c0013630:	5f                   	pop    edi
c0013631:	5d                   	pop    ebp
c0013632:	e9 89 c5 ff ff       	jmp    c000fbc0 <KePanic(char const*)>
c0013637:	90                   	nop

c0013638 <VAS::freeAllocatedPages(unsigned long)>:
c0013638:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001363c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013640:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0013644:	74 09                	je     c001364f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0013646:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001364a:	e9 ac fe ff ff       	jmp    c00134fb <Virt::freeKernelVirtualPages(unsigned long)>
c001364f:	c7 44 24 04 94 4d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024d94
c0013657:	e9 20 39 ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>

c001365c <VAS::virtualToPhysical(unsigned long)>:
c001365c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013660:	50                   	push   eax
c0013661:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013665:	52                   	push   edx
c0013666:	e8 71 fe ff ff       	call   c00134dc <VAS::getPageTableEntry(unsigned long)>
c001366b:	59                   	pop    ecx
c001366c:	8b 00                	mov    eax,DWORD PTR [eax]
c001366e:	5a                   	pop    edx
c001366f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013674:	c3                   	ret    
c0013675:	90                   	nop

c0013676 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0013676:	55                   	push   ebp
c0013677:	57                   	push   edi
c0013678:	56                   	push   esi
c0013679:	53                   	push   ebx
c001367a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001367e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0013682:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013686:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001368a:	85 db                	test   ebx,ebx
c001368c:	7e 24                	jle    c00136b2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c001368e:	c1 e3 0c             	shl    ebx,0xc
c0013691:	01 f3                	add    ebx,esi
c0013693:	56                   	push   esi
c0013694:	81 c6 00 10 00 00    	add    esi,0x1000
c001369a:	55                   	push   ebp
c001369b:	e8 3c fe ff ff       	call   c00134dc <VAS::getPageTableEntry(unsigned long)>
c00136a0:	5a                   	pop    edx
c00136a1:	59                   	pop    ecx
c00136a2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00136a4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00136a8:	21 f9                	and    ecx,edi
c00136aa:	09 d1                	or     ecx,edx
c00136ac:	39 f3                	cmp    ebx,esi
c00136ae:	89 08                	mov    DWORD PTR [eax],ecx
c00136b0:	75 e1                	jne    c0013693 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c00136b2:	5b                   	pop    ebx
c00136b3:	5e                   	pop    esi
c00136b4:	5f                   	pop    edi
c00136b5:	5d                   	pop    ebp
c00136b6:	c3                   	ret    
c00136b7:	90                   	nop

c00136b8 <VAS::VAS()>:
c00136b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00136c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136c7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00136ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136d2:	a3 90 d2 02 c0       	mov    ds:0xc002d290,eax
c00136d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136db:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00136df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136e3:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00136e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136ea:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00136f1:	ba 7d 80 02 c0       	mov    edx,0xc002807d
c00136f6:	b8 00 80 02 c0       	mov    eax,0xc0028000
c00136fb:	29 c2                	sub    edx,eax
c00136fd:	89 d0                	mov    eax,edx
c00136ff:	05 ff 0f 00 00       	add    eax,0xfff
c0013704:	c1 e8 0c             	shr    eax,0xc
c0013707:	89 c2                	mov    edx,eax
c0013709:	b8 00 80 02 c0       	mov    eax,0xc0028000
c001370e:	6a 04                	push   0x4
c0013710:	6a ff                	push   0xffffffff
c0013712:	52                   	push   edx
c0013713:	50                   	push   eax
c0013714:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013718:	e8 59 ff ff ff       	call   c0013676 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001371d:	83 c4 14             	add    esp,0x14
c0013720:	90                   	nop
c0013721:	c3                   	ret    

c0013722 <VAS::setToWriteCombining(unsigned long, int)>:
c0013722:	a1 64 db 02 c0       	mov    eax,ds:0xc002db64
c0013727:	50                   	push   eax
c0013728:	6a ff                	push   0xffffffff
c001372a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001372e:	52                   	push   edx
c001372f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013733:	51                   	push   ecx
c0013734:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013738:	50                   	push   eax
c0013739:	e8 38 ff ff ff       	call   c0013676 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001373e:	83 c4 14             	add    esp,0x14
c0013741:	c3                   	ret    

c0013742 <VAS::mapOtherVASIn(bool, VAS*)>:
c0013742:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013746:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013749:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001374d:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0013750:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013755:	83 f8 01             	cmp    eax,0x1
c0013758:	19 c0                	sbb    eax,eax
c001375a:	83 ca 03             	or     edx,0x3
c001375d:	83 e0 fc             	and    eax,0xfffffffc
c0013760:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0013767:	0f 20 d8             	mov    eax,cr3
c001376a:	0f 22 d8             	mov    cr3,eax
c001376d:	c3                   	ret    

c001376e <VAS::~VAS()>:
c001376e:	83 ec 2c             	sub    esp,0x2c
c0013771:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013779:	fa                   	cli    
c001377a:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c001377f:	83 c0 01             	add    eax,0x1
c0013782:	a3 70 da 02 c0       	mov    ds:0xc002da70,eax
c0013787:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001378c:	8b 00                	mov    eax,DWORD PTR [eax]
c001378e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013791:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0013797:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001379b:	6a 01                	push   0x1
c001379d:	50                   	push   eax
c001379e:	e8 9f ff ff ff       	call   c0013742 <VAS::mapOtherVASIn(bool, VAS*)>
c00137a3:	83 c4 0c             	add    esp,0xc
c00137a6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00137ae:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00137b6:	0f 8f d8 00 00 00    	jg     c0013894 <VAS::~VAS()+0x126>
c00137bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00137c0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00137c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00137c7:	c1 e2 02             	shl    edx,0x2
c00137ca:	01 d0                	add    eax,edx
c00137cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00137ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00137d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d6:	83 e0 01             	and    eax,0x1
c00137d9:	0f 84 ab 00 00 00    	je     c001388a <VAS::~VAS()+0x11c>
c00137df:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00137e7:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00137ef:	7f 74                	jg     c0013865 <VAS::~VAS()+0xf7>
c00137f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137f5:	c1 e0 0a             	shl    eax,0xa
c00137f8:	89 c2                	mov    edx,eax
c00137fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137fe:	01 d0                	add    eax,edx
c0013800:	c1 e0 0c             	shl    eax,0xc
c0013803:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013807:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001380c:	8b 00                	mov    eax,DWORD PTR [eax]
c001380e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013811:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0013817:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001381b:	6a 01                	push   0x1
c001381d:	50                   	push   eax
c001381e:	e8 8b fc ff ff       	call   c00134ae <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0013823:	83 c4 0c             	add    esp,0xc
c0013826:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001382a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001382e:	8b 00                	mov    eax,DWORD PTR [eax]
c0013830:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013834:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013838:	25 01 04 00 00       	and    eax,0x401
c001383d:	3d 01 04 00 00       	cmp    eax,0x401
c0013842:	75 1a                	jne    c001385e <VAS::~VAS()+0xf0>
c0013844:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013848:	25 00 f0 ff ff       	and    eax,0xfffff000
c001384d:	83 ec 0c             	sub    esp,0xc
c0013850:	50                   	push   eax
c0013851:	e8 f5 c4 ff ff       	call   c000fd4b <Phys::freePage(unsigned long)>
c0013856:	83 c4 10             	add    esp,0x10
c0013859:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001385e:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0013863:	eb 82                	jmp    c00137e7 <VAS::~VAS()+0x79>
c0013865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013869:	25 00 04 00 00       	and    eax,0x400
c001386e:	74 1a                	je     c001388a <VAS::~VAS()+0x11c>
c0013870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013874:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013879:	83 ec 0c             	sub    esp,0xc
c001387c:	50                   	push   eax
c001387d:	e8 c9 c4 ff ff       	call   c000fd4b <Phys::freePage(unsigned long)>
c0013882:	83 c4 10             	add    esp,0x10
c0013885:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001388a:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001388f:	e9 1a ff ff ff       	jmp    c00137ae <VAS::~VAS()+0x40>
c0013894:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013898:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001389b:	83 ec 0c             	sub    esp,0xc
c001389e:	50                   	push   eax
c001389f:	e8 57 fc ff ff       	call   c00134fb <Virt::freeKernelVirtualPages(unsigned long)>
c00138a4:	83 c4 10             	add    esp,0x10
c00138a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00138ab:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00138ae:	83 ec 0c             	sub    esp,0xc
c00138b1:	50                   	push   eax
c00138b2:	e8 94 c4 ff ff       	call   c000fd4b <Phys::freePage(unsigned long)>
c00138b7:	83 c4 10             	add    esp,0x10
c00138ba:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00138bf:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c00138c7:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c00138cc:	85 c0                	test   eax,eax
c00138ce:	75 01                	jne    c00138d1 <VAS::~VAS()+0x163>
c00138d0:	fb                   	sti    
c00138d1:	90                   	nop
c00138d2:	83 c4 2c             	add    esp,0x2c
c00138d5:	c3                   	ret    

c00138d6 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00138d6:	55                   	push   ebp
c00138d7:	57                   	push   edi
c00138d8:	56                   	push   esi
c00138d9:	53                   	push   ebx
c00138da:	83 ec 1c             	sub    esp,0x1c
c00138dd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00138e1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00138e5:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00138eb:	77 08                	ja     c00138f5 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00138ed:	0f 20 d8             	mov    eax,cr3
c00138f0:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00138f3:	75 49                	jne    c001393e <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c00138f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00138f9:	09 d8                	or     eax,ebx
c00138fb:	a9 ff 0f 00 00       	test   eax,0xfff
c0013900:	75 59                	jne    c001395b <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0013902:	89 de                	mov    esi,ebx
c0013904:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013907:	c1 ee 16             	shr    esi,0x16
c001390a:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0013911:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0013915:	74 56                	je     c001396d <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0013917:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001391b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001391f:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0013925:	c1 eb 0a             	shr    ebx,0xa
c0013928:	c1 e6 0c             	shl    esi,0xc
c001392b:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013931:	09 d0                	or     eax,edx
c0013933:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0013936:	83 c4 1c             	add    esp,0x1c
c0013939:	5b                   	pop    ebx
c001393a:	5e                   	pop    esi
c001393b:	5f                   	pop    edi
c001393c:	5d                   	pop    ebp
c001393d:	c3                   	ret    
c001393e:	83 ec 0c             	sub    esp,0xc
c0013941:	68 b8 4d 02 c0       	push   0xc0024db8
c0013946:	e8 31 36 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001394b:	83 c4 10             	add    esp,0x10
c001394e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013952:	09 d8                	or     eax,ebx
c0013954:	a9 ff 0f 00 00       	test   eax,0xfff
c0013959:	74 a7                	je     c0013902 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001395b:	83 ec 0c             	sub    esp,0xc
c001395e:	68 20 4e 02 c0       	push   0xc0024e20
c0013963:	e8 58 c2 ff ff       	call   c000fbc0 <KePanic(char const*)>
c0013968:	83 c4 10             	add    esp,0x10
c001396b:	eb 95                	jmp    c0013902 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001396d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013971:	e8 3e c4 ff ff       	call   c000fdb4 <Phys::allocatePage()>
c0013976:	83 ec 0c             	sub    esp,0xc
c0013979:	89 c5                	mov    ebp,eax
c001397b:	8b 0d 90 d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d290
c0013981:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013985:	6a 01                	push   0x1
c0013987:	e8 67 f8 ff ff       	call   c00131f3 <Virt::allocateKernelVirtualPages(int)>
c001398c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013993:	6a 01                	push   0x1
c0013995:	50                   	push   eax
c0013996:	55                   	push   ebp
c0013997:	81 cd 07 04 00 00    	or     ebp,0x407
c001399d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00139a1:	51                   	push   ecx
c00139a2:	e8 19 01 00 00       	call   c0013ac0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00139a7:	83 c4 1c             	add    esp,0x1c
c00139aa:	68 00 10 00 00       	push   0x1000
c00139af:	6a 00                	push   0x0
c00139b1:	50                   	push   eax
c00139b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00139b6:	e8 35 cb fe ff       	call   c00004f0 <memset>
c00139bb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00139bf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00139c2:	e8 34 fb ff ff       	call   c00134fb <Virt::freeKernelVirtualPages(unsigned long)>
c00139c7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00139cb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00139ce:	83 c4 10             	add    esp,0x10
c00139d1:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00139d4:	e9 3e ff ff ff       	jmp    c0013917 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c00139d9:	90                   	nop

c00139da <VAS::allocatePages(int, int)>:
c00139da:	55                   	push   ebp
c00139db:	57                   	push   edi
c00139dc:	56                   	push   esi
c00139dd:	53                   	push   ebx
c00139de:	83 ec 1c             	sub    esp,0x1c
c00139e1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00139e5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00139e9:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c00139ed:	75 71                	jne    c0013a60 <VAS::allocatePages(int, int)+0x86>
c00139ef:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00139f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00139f6:	85 c0                	test   eax,eax
c00139f8:	74 4d                	je     c0013a47 <VAS::allocatePages(int, int)+0x6d>
c00139fa:	89 dd                	mov    ebp,ebx
c00139fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a00:	c1 e5 0c             	shl    ebp,0xc
c0013a03:	01 c5                	add    ebp,eax
c0013a05:	85 db                	test   ebx,ebx
c0013a07:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0013a0a:	7e 29                	jle    c0013a35 <VAS::allocatePages(int, int)+0x5b>
c0013a0c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013a10:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013a14:	81 cf 00 04 00 00    	or     edi,0x400
c0013a1a:	e8 95 c3 ff ff       	call   c000fdb4 <Phys::allocatePage()>
c0013a1f:	57                   	push   edi
c0013a20:	53                   	push   ebx
c0013a21:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013a27:	50                   	push   eax
c0013a28:	56                   	push   esi
c0013a29:	e8 a8 fe ff ff       	call   c00138d6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013a2e:	83 c4 10             	add    esp,0x10
c0013a31:	39 dd                	cmp    ebp,ebx
c0013a33:	75 e5                	jne    c0013a1a <VAS::allocatePages(int, int)+0x40>
c0013a35:	0f 20 d8             	mov    eax,cr3
c0013a38:	0f 22 d8             	mov    cr3,eax
c0013a3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a3f:	83 c4 1c             	add    esp,0x1c
c0013a42:	5b                   	pop    ebx
c0013a43:	5e                   	pop    esi
c0013a44:	5f                   	pop    edi
c0013a45:	5d                   	pop    ebp
c0013a46:	c3                   	ret    
c0013a47:	83 ec 0c             	sub    esp,0xc
c0013a4a:	68 44 4e 02 c0       	push   0xc0024e44
c0013a4f:	e8 6c c1 ff ff       	call   c000fbc0 <KePanic(char const*)>
c0013a54:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013a57:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013a5b:	83 c4 10             	add    esp,0x10
c0013a5e:	eb 9a                	jmp    c00139fa <VAS::allocatePages(int, int)+0x20>
c0013a60:	83 ec 0c             	sub    esp,0xc
c0013a63:	53                   	push   ebx
c0013a64:	e8 8a f7 ff ff       	call   c00131f3 <Virt::allocateKernelVirtualPages(int)>
c0013a69:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013a6d:	83 c4 10             	add    esp,0x10
c0013a70:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0013a75:	77 37                	ja     c0013aae <VAS::allocatePages(int, int)+0xd4>
c0013a77:	85 db                	test   ebx,ebx
c0013a79:	7e ba                	jle    c0013a35 <VAS::allocatePages(int, int)+0x5b>
c0013a7b:	c1 e3 0c             	shl    ebx,0xc
c0013a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a82:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013a86:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0013a89:	81 cf 00 04 00 00    	or     edi,0x400
c0013a8f:	89 c3                	mov    ebx,eax
c0013a91:	e8 1e c3 ff ff       	call   c000fdb4 <Phys::allocatePage()>
c0013a96:	57                   	push   edi
c0013a97:	53                   	push   ebx
c0013a98:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013a9e:	50                   	push   eax
c0013a9f:	56                   	push   esi
c0013aa0:	e8 31 fe ff ff       	call   c00138d6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013aa5:	83 c4 10             	add    esp,0x10
c0013aa8:	39 dd                	cmp    ebp,ebx
c0013aaa:	75 e5                	jne    c0013a91 <VAS::allocatePages(int, int)+0xb7>
c0013aac:	eb 87                	jmp    c0013a35 <VAS::allocatePages(int, int)+0x5b>
c0013aae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013ab2:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0013ab7:	09 c2                	or     edx,eax
c0013ab9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0013abd:	eb b8                	jmp    c0013a77 <VAS::allocatePages(int, int)+0x9d>
c0013abf:	90                   	nop

c0013ac0 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0013ac0:	55                   	push   ebp
c0013ac1:	57                   	push   edi
c0013ac2:	56                   	push   esi
c0013ac3:	53                   	push   ebx
c0013ac4:	83 ec 0c             	sub    esp,0xc
c0013ac7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013acb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013acf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013ad3:	85 db                	test   ebx,ebx
c0013ad5:	7e 2f                	jle    c0013b06 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0013ad7:	c1 e3 0c             	shl    ebx,0xc
c0013ada:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013ade:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0013ae2:	01 d3                	add    ebx,edx
c0013ae4:	55                   	push   ebp
c0013ae5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013ae9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013aed:	29 c2                	sub    edx,eax
c0013aef:	01 f2                	add    edx,esi
c0013af1:	52                   	push   edx
c0013af2:	56                   	push   esi
c0013af3:	81 c6 00 10 00 00    	add    esi,0x1000
c0013af9:	57                   	push   edi
c0013afa:	e8 d7 fd ff ff       	call   c00138d6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013aff:	83 c4 10             	add    esp,0x10
c0013b02:	39 de                	cmp    esi,ebx
c0013b04:	75 de                	jne    c0013ae4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0013b06:	0f 20 d8             	mov    eax,cr3
c0013b09:	0f 22 d8             	mov    cr3,eax
c0013b0c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013b10:	83 c4 0c             	add    esp,0xc
c0013b13:	5b                   	pop    ebx
c0013b14:	5e                   	pop    esi
c0013b15:	5f                   	pop    edi
c0013b16:	5d                   	pop    ebp
c0013b17:	c3                   	ret    

c0013b18 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0013b18:	55                   	push   ebp
c0013b19:	57                   	push   edi
c0013b1a:	56                   	push   esi
c0013b1b:	53                   	push   ebx
c0013b1c:	83 ec 1c             	sub    esp,0x1c
c0013b1f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013b23:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0013b27:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013b2b:	09 f8                	or     eax,edi
c0013b2d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0013b31:	a9 ff 0f 00 00       	test   eax,0xfff
c0013b36:	75 4f                	jne    c0013b87 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0013b38:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0013b3c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0013b3f:	c1 eb 16             	shr    ebx,0x16
c0013b42:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0013b49:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0013b4d:	74 52                	je     c0013ba1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0013b4f:	0f b6 f2             	movzx  esi,dl
c0013b52:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013b56:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0013b5a:	c1 e8 0a             	shr    eax,0xa
c0013b5d:	83 fe 01             	cmp    esi,0x1
c0013b60:	19 d2                	sbb    edx,edx
c0013b62:	c1 e3 0c             	shl    ebx,0xc
c0013b65:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0013b6b:	25 fc 0f 00 00       	and    eax,0xffc
c0013b70:	01 d8                	add    eax,ebx
c0013b72:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013b76:	09 d9                	or     ecx,ebx
c0013b78:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0013b7f:	83 c4 1c             	add    esp,0x1c
c0013b82:	5b                   	pop    ebx
c0013b83:	5e                   	pop    esi
c0013b84:	5f                   	pop    edi
c0013b85:	5d                   	pop    ebp
c0013b86:	c3                   	ret    
c0013b87:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0013b8b:	83 ec 0c             	sub    esp,0xc
c0013b8e:	68 70 4e 02 c0       	push   0xc0024e70
c0013b93:	e8 28 c0 ff ff       	call   c000fbc0 <KePanic(char const*)>
c0013b98:	83 c4 10             	add    esp,0x10
c0013b9b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013b9f:	eb 97                	jmp    c0013b38 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0013ba1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013ba5:	e8 0a c2 ff ff       	call   c000fdb4 <Phys::allocatePage()>
c0013baa:	83 ec 0c             	sub    esp,0xc
c0013bad:	89 c5                	mov    ebp,eax
c0013baf:	8b 0d 90 d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d290
c0013bb5:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013bb9:	6a 01                	push   0x1
c0013bbb:	e8 33 f6 ff ff       	call   c00131f3 <Virt::allocateKernelVirtualPages(int)>
c0013bc0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013bc7:	6a 01                	push   0x1
c0013bc9:	50                   	push   eax
c0013bca:	55                   	push   ebp
c0013bcb:	81 cd 07 04 00 00    	or     ebp,0x407
c0013bd1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013bd5:	51                   	push   ecx
c0013bd6:	e8 e5 fe ff ff       	call   c0013ac0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013bdb:	83 c4 1c             	add    esp,0x1c
c0013bde:	68 00 10 00 00       	push   0x1000
c0013be3:	6a 00                	push   0x0
c0013be5:	50                   	push   eax
c0013be6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013bea:	e8 01 c9 fe ff       	call   c00004f0 <memset>
c0013bef:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013bf3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013bf6:	e8 00 f9 ff ff       	call   c00134fb <Virt::freeKernelVirtualPages(unsigned long)>
c0013bfb:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0013bfe:	83 c4 10             	add    esp,0x10
c0013c01:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0013c04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013c08:	e9 42 ff ff ff       	jmp    c0013b4f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0013c0d:	90                   	nop

c0013c0e <VAS::VAS(bool)>:
c0013c0e:	53                   	push   ebx
c0013c0f:	83 ec 28             	sub    esp,0x28
c0013c12:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013c16:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013c1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c1e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c29:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013c30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c34:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013c38:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0013c3b:	e8 74 c1 ff ff       	call   c000fdb4 <Phys::allocatePage()>
c0013c40:	89 c2                	mov    edx,eax
c0013c42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c46:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013c49:	8b 1d 90 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d290
c0013c4f:	83 ec 0c             	sub    esp,0xc
c0013c52:	6a 01                	push   0x1
c0013c54:	e8 9a f5 ff ff       	call   c00131f3 <Virt::allocateKernelVirtualPages(int)>
c0013c59:	83 c4 10             	add    esp,0x10
c0013c5c:	89 c2                	mov    edx,eax
c0013c5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c62:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013c65:	83 ec 0c             	sub    esp,0xc
c0013c68:	6a 03                	push   0x3
c0013c6a:	6a 01                	push   0x1
c0013c6c:	52                   	push   edx
c0013c6d:	50                   	push   eax
c0013c6e:	53                   	push   ebx
c0013c6f:	e8 4c fe ff ff       	call   c0013ac0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013c74:	83 c4 20             	add    esp,0x20
c0013c77:	89 c2                	mov    edx,eax
c0013c79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c7d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013c80:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013c88:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0013c90:	7f 1d                	jg     c0013caf <VAS::VAS(bool)+0xa1>
c0013c92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c96:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013c99:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013c9d:	c1 e2 02             	shl    edx,0x2
c0013ca0:	01 d0                	add    eax,edx
c0013ca2:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013ca8:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013cad:	eb d9                	jmp    c0013c88 <VAS::VAS(bool)+0x7a>
c0013caf:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0013cb7:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0013cbf:	7f 59                	jg     c0013d1a <VAS::VAS(bool)+0x10c>
c0013cc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cc5:	2d 00 02 00 00       	sub    eax,0x200
c0013cca:	c1 e0 0c             	shl    eax,0xc
c0013ccd:	89 c2                	mov    edx,eax
c0013ccf:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0013cd4:	89 d1                	mov    ecx,edx
c0013cd6:	09 c1                	or     ecx,eax
c0013cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013cdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013cdf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ce3:	c1 e2 02             	shl    edx,0x2
c0013ce6:	01 d0                	add    eax,edx
c0013ce8:	83 c9 05             	or     ecx,0x5
c0013ceb:	89 ca                	mov    edx,ecx
c0013ced:	89 10                	mov    DWORD PTR [eax],edx
c0013cef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cf3:	2d 40 03 00 00       	sub    eax,0x340
c0013cf8:	83 f8 7f             	cmp    eax,0x7f
c0013cfb:	77 16                	ja     c0013d13 <VAS::VAS(bool)+0x105>
c0013cfd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d01:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013d04:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d08:	c1 e2 02             	shl    edx,0x2
c0013d0b:	01 d0                	add    eax,edx
c0013d0d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013d13:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013d18:	eb 9d                	jmp    c0013cb7 <VAS::VAS(bool)+0xa9>
c0013d1a:	8b 15 68 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db68
c0013d20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013d27:	05 20 0c 00 00       	add    eax,0xc20
c0013d2c:	81 ca 03 40 00 00    	or     edx,0x4003
c0013d32:	89 10                	mov    DWORD PTR [eax],edx
c0013d34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d38:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013d3b:	a1 68 db 02 c0       	mov    eax,ds:0xc002db68
c0013d40:	09 c2                	or     edx,eax
c0013d42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d46:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013d49:	05 fc 0f 00 00       	add    eax,0xffc
c0013d4e:	83 ca 03             	or     edx,0x3
c0013d51:	89 10                	mov    DWORD PTR [eax],edx
c0013d53:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0013d58:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013d5e:	83 ec 0c             	sub    esp,0xc
c0013d61:	50                   	push   eax
c0013d62:	e8 4b 5f ff ff       	call   c0009cb2 <Device::getName()>
c0013d67:	83 c4 10             	add    esp,0x10
c0013d6a:	83 ec 08             	sub    esp,0x8
c0013d6d:	68 e3 50 02 c0       	push   0xc00250e3
c0013d72:	50                   	push   eax
c0013d73:	e8 d8 c9 fe ff       	call   c0000750 <strcmp>
c0013d78:	83 c4 10             	add    esp,0x10
c0013d7b:	85 c0                	test   eax,eax
c0013d7d:	0f 94 c0             	sete   al
c0013d80:	0f b6 c0             	movzx  eax,al
c0013d83:	85 c0                	test   eax,eax
c0013d85:	74 68                	je     c0013def <VAS::VAS(bool)+0x1e1>
c0013d87:	fa                   	cli    
c0013d88:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0013d8d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013d93:	05 68 09 00 00       	add    eax,0x968
c0013d98:	83 ec 0c             	sub    esp,0xc
c0013d9b:	50                   	push   eax
c0013d9c:	e8 b5 ac ff ff       	call   c000ea56 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013da1:	83 c4 10             	add    esp,0x10
c0013da4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013da9:	89 c3                	mov    ebx,eax
c0013dab:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0013db0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013db6:	05 68 09 00 00       	add    eax,0x968
c0013dbb:	83 ec 0c             	sub    esp,0xc
c0013dbe:	50                   	push   eax
c0013dbf:	e8 92 ac ff ff       	call   c000ea56 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013dc4:	83 c4 10             	add    esp,0x10
c0013dc7:	83 ec 08             	sub    esp,0x8
c0013dca:	50                   	push   eax
c0013dcb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013dcf:	e8 08 f7 ff ff       	call   c00134dc <VAS::getPageTableEntry(unsigned long)>
c0013dd4:	83 c4 10             	add    esp,0x10
c0013dd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0013dd9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013dde:	6a 11                	push   0x11
c0013de0:	53                   	push   ebx
c0013de1:	50                   	push   eax
c0013de2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013de6:	e8 eb fa ff ff       	call   c00138d6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013deb:	83 c4 10             	add    esp,0x10
c0013dee:	fb                   	sti    
c0013def:	90                   	nop
c0013df0:	83 c4 28             	add    esp,0x28
c0013df3:	5b                   	pop    ebx
c0013df4:	c3                   	ret    
c0013df5:	90                   	nop

c0013df6 <VAS::evict(unsigned long)>:
c0013df6:	55                   	push   ebp
c0013df7:	57                   	push   edi
c0013df8:	56                   	push   esi
c0013df9:	53                   	push   ebx
c0013dfa:	83 ec 24             	sub    esp,0x24
c0013dfd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013e01:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013e05:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e09:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c0013e0e:	50                   	push   eax
c0013e0f:	68 f1 50 02 c0       	push   0xc00250f1
c0013e14:	e8 63 31 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013e19:	e8 33 f5 ff ff       	call   c0013351 <Virt::allocateSwapfilePage()>
c0013e1e:	83 c4 10             	add    esp,0x10
c0013e21:	89 c7                	mov    edi,eax
c0013e23:	a1 cc 70 02 c0       	mov    eax,ds:0xc00270cc
c0013e28:	85 c0                	test   eax,eax
c0013e2a:	7e 40                	jle    c0013e6c <VAS::evict(unsigned long)+0x76>
c0013e2c:	89 ee                	mov    esi,ebp
c0013e2e:	31 db                	xor    ebx,ebx
c0013e30:	83 ec 0c             	sub    esp,0xc
c0013e33:	57                   	push   edi
c0013e34:	e8 02 f5 ff ff       	call   c001333b <Virt::swapIDToSector(unsigned long)>
c0013e39:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e3c:	01 d8                	add    eax,ebx
c0013e3e:	6a 01                	push   0x1
c0013e40:	31 d2                	xor    edx,edx
c0013e42:	83 c3 01             	add    ebx,0x1
c0013e45:	52                   	push   edx
c0013e46:	81 c6 00 02 00 00    	add    esi,0x200
c0013e4c:	50                   	push   eax
c0013e4d:	0f be 05 d8 70 02 c0 	movsx  eax,BYTE PTR ds:0xc00270d8
c0013e54:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c0013e5b:	50                   	push   eax
c0013e5c:	e8 b3 6c ff ff       	call   c000ab14 <LogicalDisk::write(unsigned long long, int, void*)>
c0013e61:	83 c4 20             	add    esp,0x20
c0013e64:	39 1d cc 70 02 c0    	cmp    DWORD PTR ds:0xc00270cc,ebx
c0013e6a:	7f c4                	jg     c0013e30 <VAS::evict(unsigned long)+0x3a>
c0013e6c:	83 ec 08             	sub    esp,0x8
c0013e6f:	c1 e7 0c             	shl    edi,0xc
c0013e72:	55                   	push   ebp
c0013e73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e77:	50                   	push   eax
c0013e78:	e8 5f f6 ff ff       	call   c00134dc <VAS::getPageTableEntry(unsigned long)>
c0013e7d:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e7f:	89 d3                	mov    ebx,edx
c0013e81:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0013e87:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0013e8d:	09 d7                	or     edi,edx
c0013e8f:	89 38                	mov    DWORD PTR [eax],edi
c0013e91:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e94:	8b 15 88 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d288
c0013e9a:	83 c2 01             	add    edx,0x1
c0013e9d:	89 15 88 d2 02 c0    	mov    DWORD PTR ds:0xc002d288,edx
c0013ea3:	e8 a3 be ff ff       	call   c000fd4b <Phys::freePage(unsigned long)>
c0013ea8:	0f 20 d8             	mov    eax,cr3
c0013eab:	0f 22 d8             	mov    cr3,eax
c0013eae:	8b 0d 88 d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d288
c0013eb4:	51                   	push   ecx
c0013eb5:	55                   	push   ebp
c0013eb6:	53                   	push   ebx
c0013eb7:	68 94 4e 02 c0       	push   0xc0024e94
c0013ebc:	e8 bb 30 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013ec1:	83 c4 18             	add    esp,0x18
c0013ec4:	a1 84 d2 02 c0       	mov    eax,ds:0xc002d284
c0013ec9:	50                   	push   eax
c0013eca:	8d 50 01             	lea    edx,[eax+0x1]
c0013ecd:	68 06 51 02 c0       	push   0xc0025106
c0013ed2:	89 15 84 d2 02 c0    	mov    DWORD PTR ds:0xc002d284,edx
c0013ed8:	e8 9f 30 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013edd:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c0013ee2:	c7 44 24 40 18 51 02 c0 	mov    DWORD PTR [esp+0x40],0xc0025118
c0013eea:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0013eee:	83 c4 2c             	add    esp,0x2c
c0013ef1:	5b                   	pop    ebx
c0013ef2:	5e                   	pop    esi
c0013ef3:	5f                   	pop    edi
c0013ef4:	5d                   	pop    ebp
c0013ef5:	e9 82 30 ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>

c0013efa <VAS::canLockPage(unsigned long)>:
c0013efa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013efe:	50                   	push   eax
c0013eff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013f03:	52                   	push   edx
c0013f04:	e8 d3 f5 ff ff       	call   c00134dc <VAS::getPageTableEntry(unsigned long)>
c0013f09:	59                   	pop    ecx
c0013f0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f0c:	5a                   	pop    edx
c0013f0d:	c1 e8 0b             	shr    eax,0xb
c0013f10:	83 e0 01             	and    eax,0x1
c0013f13:	c3                   	ret    

c0013f14 <VAS::unlockPage(unsigned long)>:
c0013f14:	83 ec 0c             	sub    esp,0xc
c0013f17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f1b:	50                   	push   eax
c0013f1c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013f20:	52                   	push   edx
c0013f21:	e8 b6 f5 ff ff       	call   c00134dc <VAS::getPageTableEntry(unsigned long)>
c0013f26:	59                   	pop    ecx
c0013f27:	5a                   	pop    edx
c0013f28:	8b 10                	mov    edx,DWORD PTR [eax]
c0013f2a:	f6 c6 08             	test   dh,0x8
c0013f2d:	75 09                	jne    c0013f38 <VAS::unlockPage(unsigned long)+0x24>
c0013f2f:	80 ce 08             	or     dh,0x8
c0013f32:	89 10                	mov    DWORD PTR [eax],edx
c0013f34:	83 c4 0c             	add    esp,0xc
c0013f37:	c3                   	ret    
c0013f38:	c7 44 24 10 c8 4e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024ec8
c0013f40:	83 c4 0c             	add    esp,0xc
c0013f43:	e9 78 bc ff ff       	jmp    c000fbc0 <KePanic(char const*)>

c0013f48 <VAS::canLockPages(unsigned long, int)>:
c0013f48:	55                   	push   ebp
c0013f49:	57                   	push   edi
c0013f4a:	56                   	push   esi
c0013f4b:	53                   	push   ebx
c0013f4c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013f50:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0013f54:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013f58:	85 ff                	test   edi,edi
c0013f5a:	7e 23                	jle    c0013f7f <VAS::canLockPages(unsigned long, int)+0x37>
c0013f5c:	31 f6                	xor    esi,esi
c0013f5e:	eb 0d                	jmp    c0013f6d <VAS::canLockPages(unsigned long, int)+0x25>
c0013f60:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013f66:	83 c6 01             	add    esi,0x1
c0013f69:	39 f7                	cmp    edi,esi
c0013f6b:	74 0d                	je     c0013f7a <VAS::canLockPages(unsigned long, int)+0x32>
c0013f6d:	53                   	push   ebx
c0013f6e:	55                   	push   ebp
c0013f6f:	e8 86 ff ff ff       	call   c0013efa <VAS::canLockPage(unsigned long)>
c0013f74:	5a                   	pop    edx
c0013f75:	84 c0                	test   al,al
c0013f77:	59                   	pop    ecx
c0013f78:	75 e6                	jne    c0013f60 <VAS::canLockPages(unsigned long, int)+0x18>
c0013f7a:	5b                   	pop    ebx
c0013f7b:	5e                   	pop    esi
c0013f7c:	5f                   	pop    edi
c0013f7d:	5d                   	pop    ebp
c0013f7e:	c3                   	ret    
c0013f7f:	b0 01                	mov    al,0x1
c0013f81:	eb f7                	jmp    c0013f7a <VAS::canLockPages(unsigned long, int)+0x32>
c0013f83:	90                   	nop

c0013f84 <VAS::unlockPages(unsigned long, int)>:
c0013f84:	55                   	push   ebp
c0013f85:	57                   	push   edi
c0013f86:	56                   	push   esi
c0013f87:	53                   	push   ebx
c0013f88:	83 ec 0c             	sub    esp,0xc
c0013f8b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013f8f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013f93:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0013f97:	85 ff                	test   edi,edi
c0013f99:	7e 1c                	jle    c0013fb7 <VAS::unlockPages(unsigned long, int)+0x33>
c0013f9b:	31 f6                	xor    esi,esi
c0013f9d:	83 ec 08             	sub    esp,0x8
c0013fa0:	83 c6 01             	add    esi,0x1
c0013fa3:	53                   	push   ebx
c0013fa4:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013faa:	55                   	push   ebp
c0013fab:	e8 64 ff ff ff       	call   c0013f14 <VAS::unlockPage(unsigned long)>
c0013fb0:	83 c4 10             	add    esp,0x10
c0013fb3:	39 f7                	cmp    edi,esi
c0013fb5:	75 e6                	jne    c0013f9d <VAS::unlockPages(unsigned long, int)+0x19>
c0013fb7:	83 c4 0c             	add    esp,0xc
c0013fba:	5b                   	pop    ebx
c0013fbb:	5e                   	pop    esi
c0013fbc:	5f                   	pop    edi
c0013fbd:	5d                   	pop    ebp
c0013fbe:	c3                   	ret    
c0013fbf:	90                   	nop

c0013fc0 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0013fc0:	55                   	push   ebp
c0013fc1:	57                   	push   edi
c0013fc2:	56                   	push   esi
c0013fc3:	53                   	push   ebx
c0013fc4:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0013fca:	8b 84 24 34 10 00 00 	mov    eax,DWORD PTR [esp+0x1034]
c0013fd1:	89 c3                	mov    ebx,eax
c0013fd3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0013fd9:	3d ff ff bf ff       	cmp    eax,0xffbfffff
c0013fde:	77 11                	ja     c0013ff1 <VAS::tryLoadBackOffDisk(unsigned long)+0x31>
c0013fe0:	85 db                	test   ebx,ebx
c0013fe2:	75 1d                	jne    c0014001 <VAS::tryLoadBackOffDisk(unsigned long)+0x41>
c0013fe4:	31 c0                	xor    eax,eax
c0013fe6:	81 c4 1c 10 00 00    	add    esp,0x101c
c0013fec:	5b                   	pop    ebx
c0013fed:	5e                   	pop    esi
c0013fee:	5f                   	pop    edi
c0013fef:	5d                   	pop    ebp
c0013ff0:	c3                   	ret    
c0013ff1:	83 ec 0c             	sub    esp,0xc
c0013ff4:	68 2d 51 02 c0       	push   0xc002512d
c0013ff9:	e8 c2 bb ff ff       	call   c000fbc0 <KePanic(char const*)>
c0013ffe:	83 c4 10             	add    esp,0x10
c0014001:	83 ec 08             	sub    esp,0x8
c0014004:	53                   	push   ebx
c0014005:	8b b4 24 3c 10 00 00 	mov    esi,DWORD PTR [esp+0x103c]
c001400c:	56                   	push   esi
c001400d:	e8 ca f4 ff ff       	call   c00134dc <VAS::getPageTableEntry(unsigned long)>
c0014012:	83 c4 10             	add    esp,0x10
c0014015:	89 c2                	mov    edx,eax
c0014017:	85 c0                	test   eax,eax
c0014019:	74 c9                	je     c0013fe4 <VAS::tryLoadBackOffDisk(unsigned long)+0x24>
c001401b:	8b 28                	mov    ebp,DWORD PTR [eax]
c001401d:	f7 c5 00 02 00 00    	test   ebp,0x200
c0014023:	0f 85 ae 00 00 00    	jne    c00140d7 <VAS::tryLoadBackOffDisk(unsigned long)+0x117>
c0014029:	89 e8                	mov    eax,ebp
c001402b:	25 01 04 00 00       	and    eax,0x401
c0014030:	3d 00 04 00 00       	cmp    eax,0x400
c0014035:	75 ad                	jne    c0013fe4 <VAS::tryLoadBackOffDisk(unsigned long)+0x24>
c0014037:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001403b:	c1 ed 0c             	shr    ebp,0xc
c001403e:	e8 71 bd ff ff       	call   c000fdb4 <Phys::allocatePage()>
c0014043:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014047:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014049:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c001404f:	09 c1                	or     ecx,eax
c0014051:	81 c9 01 08 00 00    	or     ecx,0x801
c0014057:	89 0a                	mov    DWORD PTR [edx],ecx
c0014059:	8b 15 cc 70 02 c0    	mov    edx,DWORD PTR ds:0xc00270cc
c001405f:	85 d2                	test   edx,edx
c0014061:	7e 40                	jle    c00140a3 <VAS::tryLoadBackOffDisk(unsigned long)+0xe3>
c0014063:	89 df                	mov    edi,ebx
c0014065:	31 f6                	xor    esi,esi
c0014067:	83 ec 0c             	sub    esp,0xc
c001406a:	55                   	push   ebp
c001406b:	e8 cb f2 ff ff       	call   c001333b <Virt::swapIDToSector(unsigned long)>
c0014070:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014073:	01 f0                	add    eax,esi
c0014075:	6a 01                	push   0x1
c0014077:	31 d2                	xor    edx,edx
c0014079:	83 c6 01             	add    esi,0x1
c001407c:	52                   	push   edx
c001407d:	81 c7 00 02 00 00    	add    edi,0x200
c0014083:	50                   	push   eax
c0014084:	0f be 05 d8 70 02 c0 	movsx  eax,BYTE PTR ds:0xc00270d8
c001408b:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c0014092:	50                   	push   eax
c0014093:	e8 10 6a ff ff       	call   c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>
c0014098:	83 c4 20             	add    esp,0x20
c001409b:	39 35 cc 70 02 c0    	cmp    DWORD PTR ds:0xc00270cc,esi
c00140a1:	7f c4                	jg     c0014067 <VAS::tryLoadBackOffDisk(unsigned long)+0xa7>
c00140a3:	83 ec 04             	sub    esp,0x4
c00140a6:	a1 88 d2 02 c0       	mov    eax,ds:0xc002d288
c00140ab:	83 e8 01             	sub    eax,0x1
c00140ae:	50                   	push   eax
c00140af:	a3 88 d2 02 c0       	mov    ds:0xc002d288,eax
c00140b4:	53                   	push   ebx
c00140b5:	68 3f 51 02 c0       	push   0xc002513f
c00140ba:	e8 bd 2e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00140bf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00140c2:	e8 51 f2 ff ff       	call   c0013318 <Virt::freeSwapfilePage(unsigned long)>
c00140c7:	0f 20 d8             	mov    eax,cr3
c00140ca:	0f 22 d8             	mov    cr3,eax
c00140cd:	b0 01                	mov    al,0x1
c00140cf:	83 c4 10             	add    esp,0x10
c00140d2:	e9 0f ff ff ff       	jmp    c0013fe6 <VAS::tryLoadBackOffDisk(unsigned long)+0x26>
c00140d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00140db:	83 ec 0c             	sub    esp,0xc
c00140de:	68 f8 4e 02 c0       	push   0xc0024ef8
c00140e3:	e8 94 2e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00140e8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00140ec:	8b 32                	mov    esi,DWORD PTR [edx]
c00140ee:	e8 c1 bc ff ff       	call   c000fdb4 <Phys::allocatePage()>
c00140f3:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00140f9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00140fd:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00140ff:	83 c9 01             	or     ecx,0x1
c0014102:	89 0a                	mov    DWORD PTR [edx],ecx
c0014104:	0f 20 d9             	mov    ecx,cr3
c0014107:	0f 22 d9             	mov    cr3,ecx
c001410a:	bd 00 10 00 00       	mov    ebp,0x1000
c001410f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0014113:	89 e9                	mov    ecx,ebp
c0014115:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014117:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014119:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c001411f:	09 c8                	or     eax,ecx
c0014121:	83 c8 02             	or     eax,0x2
c0014124:	89 02                	mov    DWORD PTR [edx],eax
c0014126:	0f 20 d8             	mov    eax,cr3
c0014129:	0f 22 d8             	mov    cr3,eax
c001412c:	8d 74 24 20          	lea    esi,[esp+0x20]
c0014130:	89 df                	mov    edi,ebx
c0014132:	89 e9                	mov    ecx,ebp
c0014134:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014136:	b0 01                	mov    al,0x1
c0014138:	83 c4 10             	add    esp,0x10
c001413b:	e9 a6 fe ff ff       	jmp    c0013fe6 <VAS::tryLoadBackOffDisk(unsigned long)+0x26>

c0014140 <VAS::lockPage(unsigned long)>:
c0014140:	56                   	push   esi
c0014141:	53                   	push   ebx
c0014142:	83 ec 04             	sub    esp,0x4
c0014145:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014149:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001414d:	50                   	push   eax
c001414e:	56                   	push   esi
c001414f:	e8 88 f3 ff ff       	call   c00134dc <VAS::getPageTableEntry(unsigned long)>
c0014154:	5a                   	pop    edx
c0014155:	89 c3                	mov    ebx,eax
c0014157:	59                   	pop    ecx
c0014158:	8b 00                	mov    eax,DWORD PTR [eax]
c001415a:	a8 01                	test   al,0x1
c001415c:	74 10                	je     c001416e <VAS::lockPage(unsigned long)+0x2e>
c001415e:	f6 c4 08             	test   ah,0x8
c0014161:	74 28                	je     c001418b <VAS::lockPage(unsigned long)+0x4b>
c0014163:	80 e4 f7             	and    ah,0xf7
c0014166:	89 03                	mov    DWORD PTR [ebx],eax
c0014168:	83 c4 04             	add    esp,0x4
c001416b:	5b                   	pop    ebx
c001416c:	5e                   	pop    esi
c001416d:	c3                   	ret    
c001416e:	83 ec 08             	sub    esp,0x8
c0014171:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014176:	50                   	push   eax
c0014177:	56                   	push   esi
c0014178:	e8 43 fe ff ff       	call   c0013fc0 <VAS::tryLoadBackOffDisk(unsigned long)>
c001417d:	83 c4 10             	add    esp,0x10
c0014180:	84 c0                	test   al,al
c0014182:	74 19                	je     c001419d <VAS::lockPage(unsigned long)+0x5d>
c0014184:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014186:	f6 c4 08             	test   ah,0x8
c0014189:	75 d8                	jne    c0014163 <VAS::lockPage(unsigned long)+0x23>
c001418b:	c7 44 24 10 c8 4e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024ec8
c0014193:	83 c4 04             	add    esp,0x4
c0014196:	5b                   	pop    ebx
c0014197:	5e                   	pop    esi
c0014198:	e9 23 ba ff ff       	jmp    c000fbc0 <KePanic(char const*)>
c001419d:	83 ec 0c             	sub    esp,0xc
c00141a0:	68 18 4f 02 c0       	push   0xc0024f18
c00141a5:	e8 16 ba ff ff       	call   c000fbc0 <KePanic(char const*)>
c00141aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00141ac:	83 c4 10             	add    esp,0x10
c00141af:	eb ad                	jmp    c001415e <VAS::lockPage(unsigned long)+0x1e>
c00141b1:	90                   	nop

c00141b2 <VAS::lockPages(unsigned long, int)>:
c00141b2:	55                   	push   ebp
c00141b3:	57                   	push   edi
c00141b4:	56                   	push   esi
c00141b5:	53                   	push   ebx
c00141b6:	83 ec 0c             	sub    esp,0xc
c00141b9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00141bd:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00141c1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00141c5:	85 ff                	test   edi,edi
c00141c7:	7e 1c                	jle    c00141e5 <VAS::lockPages(unsigned long, int)+0x33>
c00141c9:	31 f6                	xor    esi,esi
c00141cb:	83 ec 08             	sub    esp,0x8
c00141ce:	83 c6 01             	add    esi,0x1
c00141d1:	53                   	push   ebx
c00141d2:	81 c3 00 10 00 00    	add    ebx,0x1000
c00141d8:	55                   	push   ebp
c00141d9:	e8 62 ff ff ff       	call   c0014140 <VAS::lockPage(unsigned long)>
c00141de:	83 c4 10             	add    esp,0x10
c00141e1:	39 f7                	cmp    edi,esi
c00141e3:	75 e6                	jne    c00141cb <VAS::lockPages(unsigned long, int)+0x19>
c00141e5:	83 c4 0c             	add    esp,0xc
c00141e8:	5b                   	pop    ebx
c00141e9:	5e                   	pop    esi
c00141ea:	5f                   	pop    edi
c00141eb:	5d                   	pop    ebp
c00141ec:	c3                   	ret    
c00141ed:	90                   	nop

c00141ee <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c00141ee:	55                   	push   ebp
c00141ef:	57                   	push   edi
c00141f0:	56                   	push   esi
c00141f1:	53                   	push   ebx
c00141f2:	83 ec 28             	sub    esp,0x28
c00141f5:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00141f9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00141fd:	50                   	push   eax
c00141fe:	e8 f0 ef ff ff       	call   c00131f3 <Virt::allocateKernelVirtualPages(int)>
c0014203:	83 c4 0c             	add    esp,0xc
c0014206:	89 c5                	mov    ebp,eax
c0014208:	6a 07                	push   0x7
c001420a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001420e:	52                   	push   edx
c001420f:	56                   	push   esi
c0014210:	e8 c5 f7 ff ff       	call   c00139da <VAS::allocatePages(int, int)>
c0014215:	83 c4 10             	add    esp,0x10
c0014218:	89 c7                	mov    edi,eax
c001421a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001421e:	85 c9                	test   ecx,ecx
c0014220:	74 2f                	je     c0014251 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0014222:	31 db                	xor    ebx,ebx
c0014224:	e8 8b bb ff ff       	call   c000fdb4 <Phys::allocatePage()>
c0014229:	83 c3 01             	add    ebx,0x1
c001422c:	6a 03                	push   0x3
c001422e:	55                   	push   ebp
c001422f:	50                   	push   eax
c0014230:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014234:	56                   	push   esi
c0014235:	e8 9c f6 ff ff       	call   c00138d6 <VAS::mapPage(unsigned long, unsigned long, int)>
c001423a:	6a 07                	push   0x7
c001423c:	57                   	push   edi
c001423d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014241:	50                   	push   eax
c0014242:	56                   	push   esi
c0014243:	e8 8e f6 ff ff       	call   c00138d6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014248:	83 c4 20             	add    esp,0x20
c001424b:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c001424f:	75 d3                	jne    c0014224 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0014251:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014255:	89 28                	mov    DWORD PTR [eax],ebp
c0014257:	83 c4 1c             	add    esp,0x1c
c001425a:	89 f8                	mov    eax,edi
c001425c:	5b                   	pop    ebx
c001425d:	5e                   	pop    esi
c001425e:	5f                   	pop    edi
c001425f:	5d                   	pop    ebp
c0014260:	c3                   	ret    
c0014261:	90                   	nop

c0014262 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0014262:	53                   	push   ebx
c0014263:	83 ec 14             	sub    esp,0x14
c0014266:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001426a:	68 48 4f 02 c0       	push   0xc0024f48
c001426f:	e8 08 2d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014274:	c7 04 24 a8 4f 02 c0 	mov    DWORD PTR [esp],0xc0024fa8
c001427b:	e8 fc 2c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014280:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014284:	83 c4 18             	add    esp,0x18
c0014287:	5b                   	pop    ebx
c0014288:	e9 6e f2 ff ff       	jmp    c00134fb <Virt::freeKernelVirtualPages(unsigned long)>
c001428d:	90                   	nop

c001428e <VAS::scanForEviction()>:
c001428e:	57                   	push   edi
c001428f:	56                   	push   esi
c0014290:	31 f6                	xor    esi,esi
c0014292:	53                   	push   ebx
c0014293:	83 ec 18             	sub    esp,0x18
c0014296:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001429a:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c001429f:	50                   	push   eax
c00142a0:	68 24 50 02 c0       	push   0xc0025024
c00142a5:	e8 d2 2c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00142aa:	c7 04 24 54 51 02 c0 	mov    DWORD PTR [esp],0xc0025154
c00142b1:	e8 c6 2c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00142b6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00142b9:	83 c4 10             	add    esp,0x10
c00142bc:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00142c2:	75 0e                	jne    c00142d2 <VAS::scanForEviction()+0x44>
c00142c4:	89 da                	mov    edx,ebx
c00142c6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00142c9:	c1 ea 16             	shr    edx,0x16
c00142cc:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00142d0:	74 5b                	je     c001432d <VAS::scanForEviction()+0x9f>
c00142d2:	83 ec 08             	sub    esp,0x8
c00142d5:	53                   	push   ebx
c00142d6:	57                   	push   edi
c00142d7:	e8 00 f2 ff ff       	call   c00134dc <VAS::getPageTableEntry(unsigned long)>
c00142dc:	83 c4 10             	add    esp,0x10
c00142df:	8b 10                	mov    edx,DWORD PTR [eax]
c00142e1:	89 d1                	mov    ecx,edx
c00142e3:	c1 e9 0c             	shr    ecx,0xc
c00142e6:	74 10                	je     c00142f8 <VAS::scanForEviction()+0x6a>
c00142e8:	89 d1                	mov    ecx,edx
c00142ea:	81 e1 01 08 00 00    	and    ecx,0x801
c00142f0:	81 f9 01 08 00 00    	cmp    ecx,0x801
c00142f6:	74 40                	je     c0014338 <VAS::scanForEviction()+0xaa>
c00142f8:	81 c3 00 10 00 00    	add    ebx,0x1000
c00142fe:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0014304:	76 2d                	jbe    c0014333 <VAS::scanForEviction()+0xa5>
c0014306:	83 c6 01             	add    esi,0x1
c0014309:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0014310:	83 fe 03             	cmp    esi,0x3
c0014313:	74 32                	je     c0014347 <VAS::scanForEviction()+0xb9>
c0014315:	31 db                	xor    ebx,ebx
c0014317:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001431d:	75 b3                	jne    c00142d2 <VAS::scanForEviction()+0x44>
c001431f:	89 da                	mov    edx,ebx
c0014321:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014324:	c1 ea 16             	shr    edx,0x16
c0014327:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001432b:	75 a5                	jne    c00142d2 <VAS::scanForEviction()+0x44>
c001432d:	81 c3 00 00 40 00    	add    ebx,0x400000
c0014333:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0014336:	eb 84                	jmp    c00142bc <VAS::scanForEviction()+0x2e>
c0014338:	f6 c2 20             	test   dl,0x20
c001433b:	74 13                	je     c0014350 <VAS::scanForEviction()+0xc2>
c001433d:	83 e2 df             	and    edx,0xffffffdf
c0014340:	89 10                	mov    DWORD PTR [eax],edx
c0014342:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0014345:	eb b1                	jmp    c00142f8 <VAS::scanForEviction()+0x6a>
c0014347:	83 c4 10             	add    esp,0x10
c001434a:	31 c0                	xor    eax,eax
c001434c:	5b                   	pop    ebx
c001434d:	5e                   	pop    esi
c001434e:	5f                   	pop    edi
c001434f:	c3                   	ret    
c0014350:	83 ec 08             	sub    esp,0x8
c0014353:	89 d0                	mov    eax,edx
c0014355:	25 00 f0 ff ff       	and    eax,0xfffff000
c001435a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001435e:	53                   	push   ebx
c001435f:	68 70 51 02 c0       	push   0xc0025170
c0014364:	e8 13 2c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014369:	58                   	pop    eax
c001436a:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c001436d:	5a                   	pop    edx
c001436e:	51                   	push   ecx
c001436f:	57                   	push   edi
c0014370:	e8 81 fa ff ff       	call   c0013df6 <VAS::evict(unsigned long)>
c0014375:	5b                   	pop    ebx
c0014376:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014379:	5e                   	pop    esi
c001437a:	50                   	push   eax
c001437b:	68 84 51 02 c0       	push   0xc0025184
c0014380:	e8 f7 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014385:	58                   	pop    eax
c0014386:	5a                   	pop    edx
c0014387:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001438b:	50                   	push   eax
c001438c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014390:	68 97 51 02 c0       	push   0xc0025197
c0014395:	e8 e2 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001439a:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c001439d:	81 c1 00 10 00 00    	add    ecx,0x1000
c00143a3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c00143a6:	8b 3d 70 da 02 c0    	mov    edi,DWORD PTR ds:0xc002da70
c00143ac:	5b                   	pop    ebx
c00143ad:	5e                   	pop    esi
c00143ae:	57                   	push   edi
c00143af:	68 44 50 02 c0       	push   0xc0025044
c00143b4:	e8 c3 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00143b9:	83 c4 10             	add    esp,0x10
c00143bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00143c0:	83 c4 10             	add    esp,0x10
c00143c3:	5b                   	pop    ebx
c00143c4:	5e                   	pop    esi
c00143c5:	5f                   	pop    edi
c00143c6:	c3                   	ret    

c00143c7 <mapVASFirstTime>:
c00143c7:	55                   	push   ebp
c00143c8:	57                   	push   edi
c00143c9:	56                   	push   esi
c00143ca:	53                   	push   ebx
c00143cb:	83 ec 0c             	sub    esp,0xc
c00143ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143d3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00143d6:	83 fa 01             	cmp    edx,0x1
c00143d9:	0f 84 cb 00 00 00    	je     c00144aa <mapVASFirstTime+0xe3>
c00143df:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00143e2:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00143e5:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00143ea:	c1 e5 15             	shl    ebp,0x15
c00143ed:	bf 00 90 e7 01       	mov    edi,0x1e79000
c00143f2:	8b b2 b2 05 00 00    	mov    esi,DWORD PTR [edx+0x5b2]
c00143f8:	29 eb                	sub    ebx,ebp
c00143fa:	29 ef                	sub    edi,ebp
c00143fc:	e8 b3 b9 ff ff       	call   c000fdb4 <Phys::allocatePage()>
c0014401:	83 ec 0c             	sub    esp,0xc
c0014404:	68 03 04 00 00       	push   0x403
c0014409:	6a 01                	push   0x1
c001440b:	53                   	push   ebx
c001440c:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014412:	50                   	push   eax
c0014413:	56                   	push   esi
c0014414:	e8 a7 f6 ff ff       	call   c0013ac0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014419:	83 c4 20             	add    esp,0x20
c001441c:	39 fb                	cmp    ebx,edi
c001441e:	75 dc                	jne    c00143fc <mapVASFirstTime+0x35>
c0014420:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0014425:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c001442a:	29 eb                	sub    ebx,ebp
c001442c:	29 ef                	sub    edi,ebp
c001442e:	e8 81 b9 ff ff       	call   c000fdb4 <Phys::allocatePage()>
c0014433:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0014437:	83 fa 01             	cmp    edx,0x1
c001443a:	19 d2                	sbb    edx,edx
c001443c:	83 ec 0c             	sub    esp,0xc
c001443f:	83 e2 04             	and    edx,0x4
c0014442:	81 c2 03 04 00 00    	add    edx,0x403
c0014448:	52                   	push   edx
c0014449:	6a 01                	push   0x1
c001444b:	53                   	push   ebx
c001444c:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014452:	50                   	push   eax
c0014453:	56                   	push   esi
c0014454:	e8 67 f6 ff ff       	call   c0013ac0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014459:	83 c4 20             	add    esp,0x20
c001445c:	39 df                	cmp    edi,ebx
c001445e:	75 ce                	jne    c001442e <mapVASFirstTime+0x67>
c0014460:	83 ec 0c             	sub    esp,0xc
c0014463:	bb 7c 90 02 c0       	mov    ebx,0xc002907c
c0014468:	6a 04                	push   0x4
c001446a:	81 eb 00 80 02 c0    	sub    ebx,0xc0028000
c0014470:	6a ff                	push   0xffffffff
c0014472:	c1 eb 0c             	shr    ebx,0xc
c0014475:	53                   	push   ebx
c0014476:	68 00 80 02 c0       	push   0xc0028000
c001447b:	56                   	push   esi
c001447c:	e8 f5 f1 ff ff       	call   c0013676 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0014481:	83 c4 14             	add    esp,0x14
c0014484:	a1 90 d2 02 c0       	mov    eax,ds:0xc002d290
c0014489:	6a 04                	push   0x4
c001448b:	6a ff                	push   0xffffffff
c001448d:	53                   	push   ebx
c001448e:	68 00 80 02 c0       	push   0xc0028000
c0014493:	50                   	push   eax
c0014494:	e8 dd f1 ff ff       	call   c0013676 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0014499:	0f 20 d8             	mov    eax,cr3
c001449c:	0f 22 d8             	mov    cr3,eax
c001449f:	83 c4 20             	add    esp,0x20
c00144a2:	83 c4 0c             	add    esp,0xc
c00144a5:	5b                   	pop    ebx
c00144a6:	5e                   	pop    esi
c00144a7:	5f                   	pop    edi
c00144a8:	5d                   	pop    ebp
c00144a9:	c3                   	ret    
c00144aa:	83 ec 0c             	sub    esp,0xc
c00144ad:	68 a4 51 02 c0       	push   0xc00251a4
c00144b2:	e8 c5 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00144b7:	83 c4 10             	add    esp,0x10
c00144ba:	83 c4 0c             	add    esp,0xc
c00144bd:	5b                   	pop    ebx
c00144be:	5e                   	pop    esi
c00144bf:	5f                   	pop    edi
c00144c0:	5d                   	pop    ebp
c00144c1:	c3                   	ret    

c00144c2 <SysAlarm(regs*)>:
c00144c2:	53                   	push   ebx
c00144c3:	83 ec 10             	sub    esp,0x10
c00144c6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00144ca:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00144cd:	68 bd 51 02 c0       	push   0xc00251bd
c00144d2:	e8 a5 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00144d7:	83 c4 0c             	add    esp,0xc
c00144da:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00144dd:	31 d2                	xor    edx,edx
c00144df:	52                   	push   edx
c00144e0:	50                   	push   eax
c00144e1:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00144e7:	e8 fc 11 00 00       	call   c00156e8 <KeAlarm(ThreadControlBlock*, unsigned long long)>
c00144ec:	83 c4 18             	add    esp,0x18
c00144ef:	5b                   	pop    ebx
c00144f0:	c3                   	ret    

c00144f1 <SysEject(regs*)>:
c00144f1:	83 ec 0c             	sub    esp,0xc
c00144f4:	83 ca ff             	or     edx,0xffffffff
c00144f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144fb:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00144fe:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014503:	83 e9 41             	sub    ecx,0x41
c0014506:	83 f9 19             	cmp    ecx,0x19
c0014509:	77 18                	ja     c0014523 <SysEject(regs*)+0x32>
c001450b:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0014512:	85 c9                	test   ecx,ecx
c0014514:	74 0d                	je     c0014523 <SysEject(regs*)+0x32>
c0014516:	83 ec 0c             	sub    esp,0xc
c0014519:	51                   	push   ecx
c001451a:	e8 1f 65 ff ff       	call   c000aa3e <LogicalDisk::eject()>
c001451f:	83 c4 10             	add    esp,0x10
c0014522:	99                   	cdq    
c0014523:	83 c4 0c             	add    esp,0xc
c0014526:	c3                   	ret    

c0014527 <SysExit(regs*)>:
c0014527:	83 ec 18             	sub    esp,0x18
c001452a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001452e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014531:	e8 ee 37 00 00       	call   c0017d24 <KeTerminateCurrentThread(int)>
c0014536:	83 c8 ff             	or     eax,0xffffffff
c0014539:	83 c4 1c             	add    esp,0x1c
c001453c:	89 c2                	mov    edx,eax
c001453e:	c3                   	ret    

c001453f <SysGetCwd(regs*)>:
c001453f:	83 ec 10             	sub    esp,0x10
c0014542:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014546:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014549:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001454c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014551:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014554:	e8 c5 38 ff ff       	call   c0007e1e <Fs::getcwd(Process*, char*, int)>
c0014559:	83 c4 1c             	add    esp,0x1c
c001455c:	99                   	cdq    
c001455d:	c3                   	ret    

c001455e <SysGetPID(regs*)>:
c001455e:	83 ec 14             	sub    esp,0x14
c0014561:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014566:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014569:	ff 30                	push   DWORD PTR [eax]
c001456b:	68 d2 51 02 c0       	push   0xc00251d2
c0014570:	e8 07 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014575:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001457a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001457d:	8b 00                	mov    eax,DWORD PTR [eax]
c001457f:	83 c4 1c             	add    esp,0x1c
c0014582:	99                   	cdq    
c0014583:	c3                   	ret    

c0014584 <SysGetRAMData(regs*)>:
c0014584:	8b 0d 7c d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d17c
c001458a:	a1 88 d2 02 c0       	mov    eax,ds:0xc002d288
c001458f:	03 05 78 d1 02 c0    	add    eax,DWORD PTR ds:0xc002d178
c0014595:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c001459b:	99                   	cdq    
c001459c:	f7 f9                	idiv   ecx
c001459e:	c1 e0 18             	shl    eax,0x18
c00145a1:	09 c8                	or     eax,ecx
c00145a3:	99                   	cdq    
c00145a4:	c3                   	ret    

c00145a5 <SysGetVGAPtr(regs*)>:
c00145a5:	55                   	push   ebp
c00145a6:	57                   	push   edi
c00145a7:	56                   	push   esi
c00145a8:	53                   	push   ebx
c00145a9:	83 ec 1c             	sub    esp,0x1c
c00145ac:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00145b0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00145b3:	83 f8 ff             	cmp    eax,0xffffffff
c00145b6:	74 23                	je     c00145db <SysGetVGAPtr(regs*)+0x36>
c00145b8:	83 ec 0c             	sub    esp,0xc
c00145bb:	50                   	push   eax
c00145bc:	e8 0f 32 00 00       	call   c00177d0 <KeProcessFromPID(int)>
c00145c1:	31 d2                	xor    edx,edx
c00145c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00145c7:	83 c4 10             	add    esp,0x10
c00145ca:	b8 01 00 00 00       	mov    eax,0x1
c00145cf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00145d4:	75 11                	jne    c00145e7 <SysGetVGAPtr(regs*)+0x42>
c00145d6:	e9 80 00 00 00       	jmp    c001465b <SysGetVGAPtr(regs*)+0xb6>
c00145db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00145e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00145e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00145eb:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00145ef:	8b a8 a6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5a6]
c00145f5:	74 0c                	je     c0014603 <SysGetVGAPtr(regs*)+0x5e>
c00145f7:	83 ec 0c             	sub    esp,0xc
c00145fa:	55                   	push   ebp
c00145fb:	e8 7b dc ff ff       	call   c001227b <setActiveTerminal(VgaText*)>
c0014600:	83 c4 10             	add    esp,0x10
c0014603:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0014606:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0014609:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001460e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014610:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0014613:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014616:	89 88 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],ecx
c001461c:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c001461f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014622:	89 88 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],ecx
c0014628:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001462c:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001462f:	0f b6 80 76 02 00 00 	movzx  eax,BYTE PTR [eax+0x276]
c0014636:	c1 e8 07             	shr    eax,0x7
c0014639:	89 81 a8 0f 00 00    	mov    DWORD PTR [ecx+0xfa8],eax
c001463f:	50                   	push   eax
c0014640:	50                   	push   eax
c0014641:	68 e1 51 02 c0       	push   0xc00251e1
c0014646:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014649:	05 ac 0f 00 00       	add    eax,0xfac
c001464e:	50                   	push   eax
c001464f:	e8 ec bf fe ff       	call   c0000640 <strcpy>
c0014654:	83 c4 10             	add    esp,0x10
c0014657:	31 c0                	xor    eax,eax
c0014659:	31 d2                	xor    edx,edx
c001465b:	83 c4 1c             	add    esp,0x1c
c001465e:	5b                   	pop    ebx
c001465f:	5e                   	pop    esi
c0014660:	5f                   	pop    edi
c0014661:	5d                   	pop    ebp
c0014662:	c3                   	ret    
c0014663:	90                   	nop

c0014664 <SysKill(regs*)>:
c0014664:	53                   	push   ebx
c0014665:	83 ec 08             	sub    esp,0x8
c0014668:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001466c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0014670:	75 16                	jne    c0014688 <SysKill(regs*)+0x24>
c0014672:	83 ec 0c             	sub    esp,0xc
c0014675:	68 eb 51 02 c0       	push   0xc00251eb
c001467a:	e8 41 b5 ff ff       	call   c000fbc0 <KePanic(char const*)>
c001467f:	83 c4 10             	add    esp,0x10
c0014682:	e9 89 00 00 00       	jmp    c0014710 <SysKill(regs*)+0xac>
c0014687:	90                   	nop
c0014688:	83 ec 0c             	sub    esp,0xc
c001468b:	68 8c da 02 c0       	push   0xc002da8c
c0014690:	e8 33 de 00 00       	call   c00224c8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014695:	8d 76 00             	lea    esi,[esi+0x0]
c0014698:	83 c4 10             	add    esp,0x10
c001469b:	85 c0                	test   eax,eax
c001469d:	74 19                	je     c00146b8 <SysKill(regs*)+0x54>
c001469f:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00146a2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00146a5:	39 0a                	cmp    DWORD PTR [edx],ecx
c00146a7:	74 33                	je     c00146dc <SysKill(regs*)+0x78>
c00146a9:	52                   	push   edx
c00146aa:	52                   	push   edx
c00146ab:	50                   	push   eax
c00146ac:	68 8c da 02 c0       	push   0xc002da8c
c00146b1:	e8 1e e3 00 00       	call   c00229d4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00146b6:	eb e0                	jmp    c0014698 <SysKill(regs*)+0x34>
c00146b8:	83 ec 0c             	sub    esp,0xc
c00146bb:	68 80 da 02 c0       	push   0xc002da80
c00146c0:	e8 03 de 00 00       	call   c00224c8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00146c5:	8d 76 00             	lea    esi,[esi+0x0]
c00146c8:	83 c4 10             	add    esp,0x10
c00146cb:	85 c0                	test   eax,eax
c00146cd:	74 41                	je     c0014710 <SysKill(regs*)+0xac>
c00146cf:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00146d2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00146d5:	39 0a                	cmp    DWORD PTR [edx],ecx
c00146d7:	75 27                	jne    c0014700 <SysKill(regs*)+0x9c>
c00146d9:	8d 76 00             	lea    esi,[esi+0x0]
c00146dc:	51                   	push   ecx
c00146dd:	51                   	push   ecx
c00146de:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00146e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146e6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00146e9:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c00146ef:	e8 83 c7 ff ff       	call   c0010e77 <KeRaiseSignal(SigHandlerBlock*, int)>
c00146f4:	83 c4 10             	add    esp,0x10
c00146f7:	31 c0                	xor    eax,eax
c00146f9:	31 d2                	xor    edx,edx
c00146fb:	eb 1b                	jmp    c0014718 <SysKill(regs*)+0xb4>
c00146fd:	8d 76 00             	lea    esi,[esi+0x0]
c0014700:	52                   	push   edx
c0014701:	52                   	push   edx
c0014702:	50                   	push   eax
c0014703:	68 80 da 02 c0       	push   0xc002da80
c0014708:	e8 c7 e2 00 00       	call   c00229d4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001470d:	eb b9                	jmp    c00146c8 <SysKill(regs*)+0x64>
c001470f:	90                   	nop
c0014710:	83 c8 ff             	or     eax,0xffffffff
c0014713:	89 c2                	mov    edx,eax
c0014715:	8d 76 00             	lea    esi,[esi+0x0]
c0014718:	83 c4 08             	add    esp,0x8
c001471b:	5b                   	pop    ebx
c001471c:	c3                   	ret    

c001471d <SysLoadDLL(regs*)>:
c001471d:	56                   	push   esi
c001471e:	53                   	push   ebx
c001471f:	31 d2                	xor    edx,edx
c0014721:	51                   	push   ecx
c0014722:	b8 01 00 00 00       	mov    eax,0x1
c0014727:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001472b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001472f:	0f 84 8c 00 00 00    	je     c00147c1 <SysLoadDLL(regs*)+0xa4>
c0014735:	83 ec 0c             	sub    esp,0xc
c0014738:	68 14 01 00 00       	push   0x114
c001473d:	e8 21 b0 ff ff       	call   c000f763 <malloc>
c0014742:	83 c4 0c             	add    esp,0xc
c0014745:	89 c3                	mov    ebx,eax
c0014747:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001474c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001474f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014752:	53                   	push   ebx
c0014753:	e8 32 3a ff ff       	call   c000818a <File::File(char const*, Process*)>
c0014758:	83 c4 10             	add    esp,0x10
c001475b:	31 d2                	xor    edx,edx
c001475d:	b8 02 00 00 00       	mov    eax,0x2
c0014762:	85 db                	test   ebx,ebx
c0014764:	74 5b                	je     c00147c1 <SysLoadDLL(regs*)+0xa4>
c0014766:	83 ec 0c             	sub    esp,0xc
c0014769:	53                   	push   ebx
c001476a:	e8 fd 3c ff ff       	call   c000846c <File::exists()>
c001476f:	83 c4 10             	add    esp,0x10
c0014772:	84 c0                	test   al,al
c0014774:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014776:	75 11                	jne    c0014789 <SysLoadDLL(regs*)+0x6c>
c0014778:	83 ec 0c             	sub    esp,0xc
c001477b:	53                   	push   ebx
c001477c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001477f:	83 c4 10             	add    esp,0x10
c0014782:	b8 03 00 00 00       	mov    eax,0x3
c0014787:	eb 36                	jmp    c00147bf <SysLoadDLL(regs*)+0xa2>
c0014789:	83 ec 0c             	sub    esp,0xc
c001478c:	53                   	push   ebx
c001478d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014790:	58                   	pop    eax
c0014791:	5a                   	pop    edx
c0014792:	6a 00                	push   0x0
c0014794:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014797:	e8 e2 21 00 00       	call   c001697e <Thr::loadDLL(char const*, bool)>
c001479c:	83 c4 10             	add    esp,0x10
c001479f:	89 c1                	mov    ecx,eax
c00147a1:	31 d2                	xor    edx,edx
c00147a3:	b8 04 00 00 00       	mov    eax,0x4
c00147a8:	85 c9                	test   ecx,ecx
c00147aa:	74 15                	je     c00147c1 <SysLoadDLL(regs*)+0xa4>
c00147ac:	53                   	push   ebx
c00147ad:	53                   	push   ebx
c00147ae:	ff 35 08 d1 02 c0    	push   DWORD PTR ds:0xc002d108
c00147b4:	51                   	push   ecx
c00147b5:	e8 16 24 00 00       	call   c0016bd0 <Thr::executeDLL(unsigned long, void*)>
c00147ba:	83 c4 10             	add    esp,0x10
c00147bd:	31 c0                	xor    eax,eax
c00147bf:	31 d2                	xor    edx,edx
c00147c1:	59                   	pop    ecx
c00147c2:	5b                   	pop    ebx
c00147c3:	5e                   	pop    esi
c00147c4:	c3                   	ret    

c00147c5 <SysPause(regs*)>:
c00147c5:	83 ec 18             	sub    esp,0x18
c00147c8:	6a 08                	push   0x8
c00147ca:	e8 15 2e 00 00       	call   c00175e4 <blockTask(TaskState)>
c00147cf:	31 c0                	xor    eax,eax
c00147d1:	31 d2                	xor    edx,edx
c00147d3:	83 c4 1c             	add    esp,0x1c
c00147d6:	c3                   	ret    

c00147d7 <SysPthreadCreate(regs*)>:
c00147d7:	83 ec 18             	sub    esp,0x18
c00147da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147df:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00147e2:	e8 d5 2b 00 00       	call   c00173bc <Process::createUserThread()>
c00147e7:	31 c0                	xor    eax,eax
c00147e9:	31 d2                	xor    edx,edx
c00147eb:	83 c4 1c             	add    esp,0x1c
c00147ee:	c3                   	ret    

c00147ef <SysPthreadGetTID(regs*)>:
c00147ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00147f7:	99                   	cdq    
c00147f8:	c3                   	ret    

c00147f9 <SysInternalPthreadGetContext(regs*)>:
c00147f9:	31 c0                	xor    eax,eax
c00147fb:	31 d2                	xor    edx,edx
c00147fd:	c3                   	ret    

c00147fe <SysInternalPthreadGetStartLocation(regs*)>:
c00147fe:	31 c0                	xor    eax,eax
c0014800:	31 d2                	xor    edx,edx
c0014802:	c3                   	ret    

c0014803 <SysPthreadJoin(regs*)>:
c0014803:	31 c0                	xor    eax,eax
c0014805:	31 d2                	xor    edx,edx
c0014807:	c3                   	ret    

c0014808 <SysPthreadExit(regs*)>:
c0014808:	83 ec 18             	sub    esp,0x18
c001480b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001480f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014812:	e8 0d 35 00 00       	call   c0017d24 <KeTerminateCurrentThread(int)>
c0014817:	83 c8 ff             	or     eax,0xffffffff
c001481a:	83 c4 1c             	add    esp,0x1c
c001481d:	89 c2                	mov    edx,eax
c001481f:	c3                   	ret    

c0014820 <SysRead(regs*)>:
c0014820:	57                   	push   edi
c0014821:	56                   	push   esi
c0014822:	53                   	push   ebx
c0014823:	83 ec 10             	sub    esp,0x10
c0014826:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001482a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001482d:	83 f8 02             	cmp    eax,0x2
c0014830:	77 10                	ja     c0014842 <SysRead(regs*)+0x22>
c0014832:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014837:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001483a:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0014840:	eb 0e                	jmp    c0014850 <SysRead(regs*)+0x30>
c0014842:	83 ec 0c             	sub    esp,0xc
c0014845:	50                   	push   eax
c0014846:	e8 4a e8 ff ff       	call   c0013095 <KeGetFileFromDescriptor(int)>
c001484b:	83 c4 10             	add    esp,0x10
c001484e:	89 c1                	mov    ecx,eax
c0014850:	83 c8 ff             	or     eax,0xffffffff
c0014853:	85 c9                	test   ecx,ecx
c0014855:	89 c2                	mov    edx,eax
c0014857:	74 28                	je     c0014881 <SysRead(regs*)+0x61>
c0014859:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014861:	31 ff                	xor    edi,edi
c0014863:	83 ec 0c             	sub    esp,0xc
c0014866:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014868:	8d 54 24 18          	lea    edx,[esp+0x18]
c001486c:	52                   	push   edx
c001486d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014870:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014873:	57                   	push   edi
c0014874:	56                   	push   esi
c0014875:	51                   	push   ecx
c0014876:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014879:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001487d:	83 c4 20             	add    esp,0x20
c0014880:	99                   	cdq    
c0014881:	83 c4 10             	add    esp,0x10
c0014884:	5b                   	pop    ebx
c0014885:	5e                   	pop    esi
c0014886:	5f                   	pop    edi
c0014887:	c3                   	ret    

c0014888 <SysRegisterSignal(regs*)>:
c0014888:	83 ec 18             	sub    esp,0x18
c001488b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001488f:	6a 00                	push   0x0
c0014891:	6a 00                	push   0x0
c0014893:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014896:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014899:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001489e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00148a1:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c00148a7:	e8 95 c5 ff ff       	call   c0010e41 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00148ac:	83 c4 2c             	add    esp,0x2c
c00148af:	99                   	cdq    
c00148b0:	c3                   	ret    

c00148b1 <readUnaligned32(unsigned char*)>:
c00148b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00148b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00148b7:	c3                   	ret    

c00148b8 <writeUnaligned32(unsigned char*, unsigned int)>:
c00148b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00148bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00148c0:	89 10                	mov    DWORD PTR [eax],edx
c00148c2:	c3                   	ret    

c00148c3 <createRectangularRegion(int, int, int, int)>:
c00148c3:	57                   	push   edi
c00148c4:	56                   	push   esi
c00148c5:	53                   	push   ebx
c00148c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00148ca:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00148ce:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00148d2:	83 ec 0c             	sub    esp,0xc
c00148d5:	56                   	push   esi
c00148d6:	83 c6 0b             	add    esi,0xb
c00148d9:	57                   	push   edi
c00148da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00148de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00148e2:	53                   	push   ebx
c00148e3:	e8 f4 e0 00 00       	call   c00229dc <Region::Region(int, int, int, int)>
c00148e8:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c00148eb:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00148ef:	83 c4 14             	add    esp,0x14
c00148f2:	56                   	push   esi
c00148f3:	e8 6b ae ff ff       	call   c000f763 <malloc>
c00148f8:	83 c4 0c             	add    esp,0xc
c00148fb:	89 03                	mov    DWORD PTR [ebx],eax
c00148fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014900:	6a 00                	push   0x0
c0014902:	50                   	push   eax
c0014903:	e8 e8 bb fe ff       	call   c00004f0 <memset>
c0014908:	8b 03                	mov    eax,DWORD PTR [ebx]
c001490a:	c6 00 03             	mov    BYTE PTR [eax],0x3
c001490d:	58                   	pop    eax
c001490e:	5a                   	pop    edx
c001490f:	57                   	push   edi
c0014910:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014912:	83 c0 08             	add    eax,0x8
c0014915:	50                   	push   eax
c0014916:	e8 9d ff ff ff       	call   c00148b8 <writeUnaligned32(unsigned char*, unsigned int)>
c001491b:	83 c4 10             	add    esp,0x10
c001491e:	89 d8                	mov    eax,ebx
c0014920:	5b                   	pop    ebx
c0014921:	5e                   	pop    esi
c0014922:	5f                   	pop    edi
c0014923:	c2 04 00             	ret    0x4

c0014926 <SysRegistryGetTypeFromPath(regs*)>:
c0014926:	53                   	push   ebx
c0014927:	81 ec 40 01 00 00    	sub    esp,0x140
c001492d:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014934:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014937:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001493a:	e8 91 95 ff ff       	call   c000ded0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001493f:	83 c4 10             	add    esp,0x10
c0014942:	89 c1                	mov    ecx,eax
c0014944:	85 c0                	test   eax,eax
c0014946:	74 15                	je     c001495d <SysRegistryGetTypeFromPath(regs*)+0x37>
c0014948:	50                   	push   eax
c0014949:	8d 44 24 08          	lea    eax,[esp+0x8]
c001494d:	50                   	push   eax
c001494e:	51                   	push   ecx
c001494f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014952:	e8 5d 91 ff ff       	call   c000dab4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014957:	83 c4 10             	add    esp,0x10
c001495a:	99                   	cdq    
c001495b:	eb 05                	jmp    c0014962 <SysRegistryGetTypeFromPath(regs*)+0x3c>
c001495d:	83 c8 ff             	or     eax,0xffffffff
c0014960:	89 c2                	mov    edx,eax
c0014962:	81 c4 38 01 00 00    	add    esp,0x138
c0014968:	5b                   	pop    ebx
c0014969:	c3                   	ret    

c001496a <SysRegistryReadExtent(regs*)>:
c001496a:	83 ec 1c             	sub    esp,0x1c
c001496d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014971:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014974:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014977:	85 c0                	test   eax,eax
c0014979:	79 1f                	jns    c001499a <SysRegistryReadExtent(regs*)+0x30>
c001497b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014980:	52                   	push   edx
c0014981:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014985:	52                   	push   edx
c0014986:	50                   	push   eax
c0014987:	51                   	push   ecx
c0014988:	e8 19 90 ff ff       	call   c000d9a6 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c001498d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014991:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014995:	83 c4 10             	add    esp,0x10
c0014998:	eb 14                	jmp    c00149ae <SysRegistryReadExtent(regs*)+0x44>
c001499a:	83 ec 04             	sub    esp,0x4
c001499d:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00149a0:	50                   	push   eax
c00149a1:	51                   	push   ecx
c00149a2:	e8 99 8a ff ff       	call   c000d440 <CmGetString(Reghive_Tag*, int, char*)>
c00149a7:	83 c4 10             	add    esp,0x10
c00149aa:	31 c0                	xor    eax,eax
c00149ac:	31 d2                	xor    edx,edx
c00149ae:	83 c4 1c             	add    esp,0x1c
c00149b1:	c3                   	ret    

c00149b2 <SysRegistryPathToExtentLookup(regs*)>:
c00149b2:	83 ec 14             	sub    esp,0x14
c00149b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149b9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00149bc:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00149bf:	e8 0c 95 ff ff       	call   c000ded0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00149c4:	83 c4 1c             	add    esp,0x1c
c00149c7:	99                   	cdq    
c00149c8:	c3                   	ret    

c00149c9 <SysRegistryEnterDirectory(regs*)>:
c00149c9:	83 ec 14             	sub    esp,0x14
c00149cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149d0:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00149d3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00149d6:	e8 dc 8a ff ff       	call   c000d4b7 <CmEnterDirectory(Reghive_Tag*, int)>
c00149db:	83 c4 1c             	add    esp,0x1c
c00149de:	99                   	cdq    
c00149df:	c3                   	ret    

c00149e0 <SysRegistryGetNext(regs*)>:
c00149e0:	83 ec 14             	sub    esp,0x14
c00149e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149e7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00149ea:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00149ed:	e8 04 8b ff ff       	call   c000d4f6 <CmGetNext(Reghive_Tag*, int)>
c00149f2:	83 c4 1c             	add    esp,0x1c
c00149f5:	99                   	cdq    
c00149f6:	c3                   	ret    

c00149f7 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00149f7:	57                   	push   edi
c00149f8:	56                   	push   esi
c00149f9:	53                   	push   ebx
c00149fa:	81 ec 34 01 00 00    	sub    esp,0x134
c0014a00:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014a07:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014a0b:	57                   	push   edi
c0014a0c:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014a0f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014a12:	e8 9d 90 ff ff       	call   c000dab4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014a17:	89 c3                	mov    ebx,eax
c0014a19:	58                   	pop    eax
c0014a1a:	5a                   	pop    edx
c0014a1b:	57                   	push   edi
c0014a1c:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014a1f:	e8 1c bc fe ff       	call   c0000640 <strcpy>
c0014a24:	89 d8                	mov    eax,ebx
c0014a26:	81 c4 40 01 00 00    	add    esp,0x140
c0014a2c:	99                   	cdq    
c0014a2d:	5b                   	pop    ebx
c0014a2e:	5e                   	pop    esi
c0014a2f:	5f                   	pop    edi
c0014a30:	c3                   	ret    

c0014a31 <SysRegistryOpen(regs*)>:
c0014a31:	83 ec 18             	sub    esp,0x18
c0014a34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a38:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014a3b:	e8 90 88 ff ff       	call   c000d2d0 <CmOpen(char const*)>
c0014a40:	83 c4 1c             	add    esp,0x1c
c0014a43:	99                   	cdq    
c0014a44:	c3                   	ret    

c0014a45 <SysRegistryClose(regs*)>:
c0014a45:	83 ec 18             	sub    esp,0x18
c0014a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a4c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014a4f:	e8 9a 89 ff ff       	call   c000d3ee <CmClose(Reghive_Tag*)>
c0014a54:	31 c0                	xor    eax,eax
c0014a56:	31 d2                	xor    edx,edx
c0014a58:	83 c4 1c             	add    esp,0x1c
c0014a5b:	c3                   	ret    

c0014a5c <SysRegistryEasyReadString(regs*)>:
c0014a5c:	57                   	push   edi
c0014a5d:	56                   	push   esi
c0014a5e:	53                   	push   ebx
c0014a5f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a63:	83 ec 0c             	sub    esp,0xc
c0014a66:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014a69:	e8 62 88 ff ff       	call   c000d2d0 <CmOpen(char const*)>
c0014a6e:	5a                   	pop    edx
c0014a6f:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014a72:	59                   	pop    ecx
c0014a73:	89 c3                	mov    ebx,eax
c0014a75:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014a78:	50                   	push   eax
c0014a79:	e8 52 94 ff ff       	call   c000ded0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014a7e:	83 c4 10             	add    esp,0x10
c0014a81:	89 c1                	mov    ecx,eax
c0014a83:	b8 01 00 00 00       	mov    eax,0x1
c0014a88:	85 c9                	test   ecx,ecx
c0014a8a:	7e 16                	jle    c0014aa2 <SysRegistryEasyReadString(regs*)+0x46>
c0014a8c:	50                   	push   eax
c0014a8d:	57                   	push   edi
c0014a8e:	51                   	push   ecx
c0014a8f:	53                   	push   ebx
c0014a90:	e8 ab 89 ff ff       	call   c000d440 <CmGetString(Reghive_Tag*, int, char*)>
c0014a95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a98:	e8 51 89 ff ff       	call   c000d3ee <CmClose(Reghive_Tag*)>
c0014a9d:	83 c4 10             	add    esp,0x10
c0014aa0:	31 c0                	xor    eax,eax
c0014aa2:	5b                   	pop    ebx
c0014aa3:	31 d2                	xor    edx,edx
c0014aa5:	5e                   	pop    esi
c0014aa6:	5f                   	pop    edi
c0014aa7:	c3                   	ret    

c0014aa8 <SysRegistryEasyReadInteger(regs*)>:
c0014aa8:	56                   	push   esi
c0014aa9:	53                   	push   ebx
c0014aaa:	83 ec 10             	sub    esp,0x10
c0014aad:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014ab1:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014ab4:	e8 17 88 ff ff       	call   c000d2d0 <CmOpen(char const*)>
c0014ab9:	5a                   	pop    edx
c0014aba:	89 c3                	mov    ebx,eax
c0014abc:	59                   	pop    ecx
c0014abd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014ac0:	50                   	push   eax
c0014ac1:	e8 0a 94 ff ff       	call   c000ded0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014ac6:	83 c4 10             	add    esp,0x10
c0014ac9:	89 c1                	mov    ecx,eax
c0014acb:	b8 01 00 00 00       	mov    eax,0x1
c0014ad0:	85 c9                	test   ecx,ecx
c0014ad2:	7e 18                	jle    c0014aec <SysRegistryEasyReadInteger(regs*)+0x44>
c0014ad4:	50                   	push   eax
c0014ad5:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014ad8:	51                   	push   ecx
c0014ad9:	53                   	push   ebx
c0014ada:	e8 c7 8e ff ff       	call   c000d9a6 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014adf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ae2:	e8 07 89 ff ff       	call   c000d3ee <CmClose(Reghive_Tag*)>
c0014ae7:	83 c4 10             	add    esp,0x10
c0014aea:	31 c0                	xor    eax,eax
c0014aec:	59                   	pop    ecx
c0014aed:	31 d2                	xor    edx,edx
c0014aef:	5b                   	pop    ebx
c0014af0:	5e                   	pop    esi
c0014af1:	c3                   	ret    

c0014af2 <performRegionOperation(Region, Region, RegionOperation)>:
c0014af2:	55                   	push   ebp
c0014af3:	57                   	push   edi
c0014af4:	56                   	push   esi
c0014af5:	53                   	push   ebx
c0014af6:	81 ec 84 00 00 00    	sub    esp,0x84
c0014afc:	8b ac 24 98 00 00 00 	mov    ebp,DWORD PTR [esp+0x98]
c0014b03:	8b 84 24 a4 00 00 00 	mov    eax,DWORD PTR [esp+0xa4]
c0014b0a:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0014b11:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
c0014b18:	8b b4 24 d0 00 00 00 	mov    esi,DWORD PTR [esp+0xd0]
c0014b1f:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0014b23:	8b bc 24 b0 00 00 00 	mov    edi,DWORD PTR [esp+0xb0]
c0014b2a:	8b 84 24 c0 00 00 00 	mov    eax,DWORD PTR [esp+0xc0]
c0014b31:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0014b35:	52                   	push   edx
c0014b36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014b3a:	57                   	push   edi
c0014b3b:	e8 c7 de 00 00       	call   c0022a07 <int min<int>(int, int)>
c0014b40:	5a                   	pop    edx
c0014b41:	59                   	pop    ecx
c0014b42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014b46:	56                   	push   esi
c0014b47:	53                   	push   ebx
c0014b48:	e8 ba de 00 00       	call   c0022a07 <int min<int>(int, int)>
c0014b4d:	5a                   	pop    edx
c0014b4e:	59                   	pop    ecx
c0014b4f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014b53:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014b57:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014b5b:	89 d0                	mov    eax,edx
c0014b5d:	03 84 24 bc 00 00 00 	add    eax,DWORD PTR [esp+0xbc]
c0014b64:	50                   	push   eax
c0014b65:	8b 84 24 a4 00 00 00 	mov    eax,DWORD PTR [esp+0xa4]
c0014b6c:	01 f8                	add    eax,edi
c0014b6e:	50                   	push   eax
c0014b6f:	e8 a2 de 00 00       	call   c0022a16 <int max<int>(int, int)>
c0014b74:	5a                   	pop    edx
c0014b75:	59                   	pop    ecx
c0014b76:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0014b7a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b7e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0014b82:	01 f0                	add    eax,esi
c0014b84:	50                   	push   eax
c0014b85:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0014b89:	01 d8                	add    eax,ebx
c0014b8b:	50                   	push   eax
c0014b8c:	e8 85 de 00 00       	call   c0022a16 <int max<int>(int, int)>
c0014b91:	5a                   	pop    edx
c0014b92:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014b96:	29 c8                	sub    eax,ecx
c0014b98:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0014b9c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014ba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ba4:	51                   	push   ecx
c0014ba5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014ba9:	55                   	push   ebp
c0014baa:	e8 2d de 00 00       	call   c00229dc <Region::Region(int, int, int, int)>
c0014baf:	8b 84 24 e0 00 00 00 	mov    eax,DWORD PTR [esp+0xe0]
c0014bb6:	c6 45 0c 01          	mov    BYTE PTR [ebp+0xc],0x1
c0014bba:	03 84 24 c4 00 00 00 	add    eax,DWORD PTR [esp+0xc4]
c0014bc1:	83 c4 14             	add    esp,0x14
c0014bc4:	01 c0                	add    eax,eax
c0014bc6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0014bc9:	50                   	push   eax
c0014bca:	e8 94 ab ff ff       	call   c000f763 <malloc>
c0014bcf:	83 c4 0c             	add    esp,0xc
c0014bd2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014bd5:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0014bd8:	6a 00                	push   0x0
c0014bda:	50                   	push   eax
c0014bdb:	e8 10 b9 fe ff       	call   c00004f0 <memset>
c0014be0:	83 c4 10             	add    esp,0x10
c0014be3:	39 f3                	cmp    ebx,esi
c0014be5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014be9:	7c 10                	jl     c0014bfb <performRegionOperation(Region, Region, RegionOperation)+0x109>
c0014beb:	89 d8                	mov    eax,ebx
c0014bed:	29 f0                	sub    eax,esi
c0014bef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0014bf3:	31 c0                	xor    eax,eax
c0014bf5:	39 f3                	cmp    ebx,esi
c0014bf7:	75 0e                	jne    c0014c07 <performRegionOperation(Region, Region, RegionOperation)+0x115>
c0014bf9:	eb 08                	jmp    c0014c03 <performRegionOperation(Region, Region, RegionOperation)+0x111>
c0014bfb:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0014c03:	89 f0                	mov    eax,esi
c0014c05:	29 d8                	sub    eax,ebx
c0014c07:	39 d7                	cmp    edi,edx
c0014c09:	7c 16                	jl     c0014c21 <performRegionOperation(Region, Region, RegionOperation)+0x12f>
c0014c0b:	89 fe                	mov    esi,edi
c0014c0d:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0014c15:	29 d6                	sub    esi,edx
c0014c17:	39 d7                	cmp    edi,edx
c0014c19:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0014c1d:	75 10                	jne    c0014c2f <performRegionOperation(Region, Region, RegionOperation)+0x13d>
c0014c1f:	eb 08                	jmp    c0014c29 <performRegionOperation(Region, Region, RegionOperation)+0x137>
c0014c21:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0014c29:	29 fa                	sub    edx,edi
c0014c2b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014c2f:	8b b4 24 94 00 00 00 	mov    esi,DWORD PTR [esp+0x94]
c0014c36:	8b bc 24 b0 00 00 00 	mov    edi,DWORD PTR [esp+0xb0]
c0014c3d:	f7 d8                	neg    eax
c0014c3f:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0014c43:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0014c47:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0014c4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c4f:	f7 df                	neg    edi
c0014c51:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014c55:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0014c59:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0014c5d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0014c61:	31 c0                	xor    eax,eax
c0014c63:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014c6b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0014c6f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0014c73:	3b 54 24 50          	cmp    edx,DWORD PTR [esp+0x50]
c0014c77:	0f 8d 36 05 00 00    	jge    c00151b3 <performRegionOperation(Region, Region, RegionOperation)+0x6c1>
c0014c7d:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0014c81:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014c85:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0014c89:	f7 d2                	not    edx
c0014c8b:	c1 ea 1f             	shr    edx,0x1f
c0014c8e:	39 7c 24 2c          	cmp    DWORD PTR [esp+0x2c],edi
c0014c92:	0f 9c c1             	setl   cl
c0014c95:	21 ca                	and    edx,ecx
c0014c97:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c0014c9b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014c9f:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0014ca3:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
c0014ca7:	f7 d2                	not    edx
c0014ca9:	88 4c 24 33          	mov    BYTE PTR [esp+0x33],cl
c0014cad:	0f 9c c1             	setl   cl
c0014cb0:	c1 ea 1f             	shr    edx,0x1f
c0014cb3:	21 ca                	and    edx,ecx
c0014cb5:	89 d6                	mov    esi,edx
c0014cb7:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0014cbc:	0f 85 d0 01 00 00    	jne    c0014e92 <performRegionOperation(Region, Region, RegionOperation)+0x3a0>
c0014cc2:	85 d2                	test   edx,edx
c0014cc4:	0f 84 c2 01 00 00    	je     c0014e8c <performRegionOperation(Region, Region, RegionOperation)+0x39a>
c0014cca:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0014cce:	83 bc 24 cc 00 00 00 01 	cmp    DWORD PTR [esp+0xcc],0x1
c0014cd6:	0f 85 84 01 00 00    	jne    c0014e60 <performRegionOperation(Region, Region, RegionOperation)+0x36e>
c0014cdc:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0014cdf:	75 2d                	jne    c0014d0e <performRegionOperation(Region, Region, RegionOperation)+0x21c>
c0014ce1:	85 c0                	test   eax,eax
c0014ce3:	75 31                	jne    c0014d16 <performRegionOperation(Region, Region, RegionOperation)+0x224>
c0014ce5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0014ce9:	b9 01 00 00 00       	mov    ecx,0x1
c0014cee:	03 7d 00             	add    edi,DWORD PTR [ebp+0x0]
c0014cf1:	89 de                	mov    esi,ebx
c0014cf3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014cf5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014cf9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014d01:	c7 44 24 28 01 00 00 00 	mov    DWORD PTR [esp+0x28],0x1
c0014d09:	e9 12 01 00 00       	jmp    c0014e20 <performRegionOperation(Region, Region, RegionOperation)+0x32e>
c0014d0e:	85 c0                	test   eax,eax
c0014d10:	0f 84 29 03 00 00    	je     c001503f <performRegionOperation(Region, Region, RegionOperation)+0x54d>
c0014d16:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014d1a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014d1f:	75 04                	jne    c0014d25 <performRegionOperation(Region, Region, RegionOperation)+0x233>
c0014d21:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014d25:	f7 c6 01 00 00 00    	test   esi,0x1
c0014d2b:	74 26                	je     c0014d53 <performRegionOperation(Region, Region, RegionOperation)+0x261>
c0014d2d:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0014d30:	c7 44 24 20 01 00 00 00 	mov    DWORD PTR [esp+0x20],0x1
c0014d38:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
c0014d3f:	85 c0                	test   eax,eax
c0014d41:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0014d45:	75 1c                	jne    c0014d63 <performRegionOperation(Region, Region, RegionOperation)+0x271>
c0014d47:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0014d4a:	c1 e0 02             	shl    eax,0x2
c0014d4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014d51:	eb 10                	jmp    c0014d63 <performRegionOperation(Region, Region, RegionOperation)+0x271>
c0014d53:	c7 44 24 28 04 00 00 00 	mov    DWORD PTR [esp+0x28],0x4
c0014d5b:	c7 44 24 20 01 00 00 00 	mov    DWORD PTR [esp+0x20],0x1
c0014d63:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0014d66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d6a:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c0014d6e:	39 c2                	cmp    edx,eax
c0014d70:	7d 24                	jge    c0014d96 <performRegionOperation(Region, Region, RegionOperation)+0x2a4>
c0014d72:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0014d76:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014d7b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014d7f:	74 08                	je     c0014d89 <performRegionOperation(Region, Region, RegionOperation)+0x297>
c0014d81:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0014d85:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014d89:	89 f0                	mov    eax,esi
c0014d8b:	31 d2                	xor    edx,edx
c0014d8d:	0f b6 c0             	movzx  eax,al
c0014d90:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014d94:	eb 49                	jmp    c0014ddf <performRegionOperation(Region, Region, RegionOperation)+0x2ed>
c0014d96:	01 c0                	add    eax,eax
c0014d98:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0014d9b:	52                   	push   edx
c0014d9c:	52                   	push   edx
c0014d9d:	50                   	push   eax
c0014d9e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0014da1:	e8 a9 a9 ff ff       	call   c000f74f <realloc>
c0014da6:	83 c4 10             	add    esp,0x10
c0014da9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014dac:	eb b5                	jmp    c0014d63 <performRegionOperation(Region, Region, RegionOperation)+0x271>
c0014dae:	39 c2                	cmp    edx,eax
c0014db0:	7d 5f                	jge    c0014e11 <performRegionOperation(Region, Region, RegionOperation)+0x31f>
c0014db2:	85 d2                	test   edx,edx
c0014db4:	75 3a                	jne    c0014df0 <performRegionOperation(Region, Region, RegionOperation)+0x2fe>
c0014db6:	b8 01 00 00 00       	mov    eax,0x1
c0014dbb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0014dc0:	74 03                	je     c0014dc5 <performRegionOperation(Region, Region, RegionOperation)+0x2d3>
c0014dc2:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0014dc5:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0014dc9:	8d 74 24 6c          	lea    esi,[esp+0x6c]
c0014dcd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014dd1:	b9 04 00 00 00       	mov    ecx,0x4
c0014dd6:	8d 3c 90             	lea    edi,[eax+edx*4]
c0014dd9:	03 7d 00             	add    edi,DWORD PTR [ebp+0x0]
c0014ddc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014dde:	42                   	inc    edx
c0014ddf:	b8 01 00 00 00       	mov    eax,0x1
c0014de4:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0014de9:	74 c3                	je     c0014dae <performRegionOperation(Region, Region, RegionOperation)+0x2bc>
c0014deb:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0014dee:	eb be                	jmp    c0014dae <performRegionOperation(Region, Region, RegionOperation)+0x2bc>
c0014df0:	b8 bb bb bb bb       	mov    eax,0xbbbbbbbb
c0014df5:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0014dfa:	74 c9                	je     c0014dc5 <performRegionOperation(Region, Region, RegionOperation)+0x2d3>
c0014dfc:	83 ec 0c             	sub    esp,0xc
c0014dff:	8d 04 93             	lea    eax,[ebx+edx*4]
c0014e02:	50                   	push   eax
c0014e03:	e8 a9 fa ff ff       	call   c00148b1 <readUnaligned32(unsigned char*)>
c0014e08:	83 c4 10             	add    esp,0x10
c0014e0b:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014e0f:	eb b4                	jmp    c0014dc5 <performRegionOperation(Region, Region, RegionOperation)+0x2d3>
c0014e11:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014e16:	75 08                	jne    c0014e20 <performRegionOperation(Region, Region, RegionOperation)+0x32e>
c0014e18:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0014e1c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014e20:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014e24:	01 7c 24 08          	add    DWORD PTR [esp+0x8],edi
c0014e28:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014e2d:	74 13                	je     c0014e42 <performRegionOperation(Region, Region, RegionOperation)+0x350>
c0014e2f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014e33:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0014e37:	01 74 24 0c          	add    DWORD PTR [esp+0xc],esi
c0014e3b:	c6 44 24 33 00       	mov    BYTE PTR [esp+0x33],0x0
c0014e40:	eb 0c                	jmp    c0014e4e <performRegionOperation(Region, Region, RegionOperation)+0x35c>
c0014e42:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0014e46:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0014e4a:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c0014e4e:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0014e52:	ff 44 24 48          	inc    DWORD PTR [esp+0x48]
c0014e56:	0f b6 44 24 33       	movzx  eax,BYTE PTR [esp+0x33]
c0014e5b:	e9 0b fe ff ff       	jmp    c0014c6b <performRegionOperation(Region, Region, RegionOperation)+0x179>
c0014e60:	83 bc 24 cc 00 00 00 02 	cmp    DWORD PTR [esp+0xcc],0x2
c0014e68:	74 15                	je     c0014e7f <performRegionOperation(Region, Region, RegionOperation)+0x38d>
c0014e6a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014e6f:	75 0e                	jne    c0014e7f <performRegionOperation(Region, Region, RegionOperation)+0x38d>
c0014e71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014e75:	be 01 00 00 00       	mov    esi,0x1
c0014e7a:	e9 5d fe ff ff       	jmp    c0014cdc <performRegionOperation(Region, Region, RegionOperation)+0x1ea>
c0014e7f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014e83:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0014e87:	e9 50 fe ff ff       	jmp    c0014cdc <performRegionOperation(Region, Region, RegionOperation)+0x1ea>
c0014e8c:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0014e90:	eb bc                	jmp    c0014e4e <performRegionOperation(Region, Region, RegionOperation)+0x35c>
c0014e92:	85 d2                	test   edx,edx
c0014e94:	0f 84 85 01 00 00    	je     c001501f <performRegionOperation(Region, Region, RegionOperation)+0x52d>
c0014e9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e9e:	8a 10                	mov    dl,BYTE PTR [eax]
c0014ea0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014ea4:	0f b6 18             	movzx  ebx,BYTE PTR [eax]
c0014ea7:	0f b6 c2             	movzx  eax,dl
c0014eaa:	85 db                	test   ebx,ebx
c0014eac:	75 44                	jne    c0014ef2 <performRegionOperation(Region, Region, RegionOperation)+0x400>
c0014eae:	85 c0                	test   eax,eax
c0014eb0:	75 4c                	jne    c0014efe <performRegionOperation(Region, Region, RegionOperation)+0x40c>
c0014eb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014eb6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014eb9:	8d 50 01             	lea    edx,[eax+0x1]
c0014ebc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0014ebf:	39 c2                	cmp    edx,eax
c0014ec1:	7c 16                	jl     c0014ed9 <performRegionOperation(Region, Region, RegionOperation)+0x3e7>
c0014ec3:	01 c0                	add    eax,eax
c0014ec5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0014ec8:	53                   	push   ebx
c0014ec9:	53                   	push   ebx
c0014eca:	50                   	push   eax
c0014ecb:	51                   	push   ecx
c0014ecc:	e8 7e a8 ff ff       	call   c000f74f <realloc>
c0014ed1:	83 c4 10             	add    esp,0x10
c0014ed4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014ed7:	eb d9                	jmp    c0014eb2 <performRegionOperation(Region, Region, RegionOperation)+0x3c0>
c0014ed9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014edd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014ee1:	c6 04 01 00          	mov    BYTE PTR [ecx+eax*1],0x0
c0014ee5:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0014ee9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0014eed:	e9 5c ff ff ff       	jmp    c0014e4e <performRegionOperation(Region, Region, RegionOperation)+0x35c>
c0014ef2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014ef6:	85 c0                	test   eax,eax
c0014ef8:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0014efc:	74 08                	je     c0014f06 <performRegionOperation(Region, Region, RegionOperation)+0x414>
c0014efe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f02:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014f06:	83 ec 0c             	sub    esp,0xc
c0014f09:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014f0d:	e8 9f f9 ff ff       	call   c00148b1 <readUnaligned32(unsigned char*)>
c0014f12:	59                   	pop    ecx
c0014f13:	89 c1                	mov    ecx,eax
c0014f15:	8d 40 ff             	lea    eax,[eax-0x1]
c0014f18:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014f1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014f20:	e8 8c f9 ff ff       	call   c00148b1 <readUnaligned32(unsigned char*)>
c0014f25:	83 c4 10             	add    esp,0x10
c0014f28:	8d 70 ff             	lea    esi,[eax-0x1]
c0014f2b:	85 db                	test   ebx,ebx
c0014f2d:	75 06                	jne    c0014f35 <performRegionOperation(Region, Region, RegionOperation)+0x443>
c0014f2f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014f33:	eb 0b                	jmp    c0014f40 <performRegionOperation(Region, Region, RegionOperation)+0x44e>
c0014f35:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0014f39:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0014f3c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0014f40:	84 d2                	test   dl,dl
c0014f42:	75 06                	jne    c0014f4a <performRegionOperation(Region, Region, RegionOperation)+0x458>
c0014f44:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0014f48:	eb 0b                	jmp    c0014f55 <performRegionOperation(Region, Region, RegionOperation)+0x463>
c0014f4a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014f4e:	8d 04 83             	lea    eax,[ebx+eax*4]
c0014f51:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014f55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014f59:	c6 44 24 4c 00       	mov    BYTE PTR [esp+0x4c],0x0
c0014f5e:	83 c0 04             	add    eax,0x4
c0014f61:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0014f69:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014f6d:	31 ff                	xor    edi,edi
c0014f6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014f73:	31 db                	xor    ebx,ebx
c0014f75:	83 c0 04             	add    eax,0x4
c0014f78:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014f7c:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0014f81:	75 0e                	jne    c0014f91 <performRegionOperation(Region, Region, RegionOperation)+0x49f>
c0014f83:	85 f6                	test   esi,esi
c0014f85:	74 4c                	je     c0014fd3 <performRegionOperation(Region, Region, RegionOperation)+0x4e1>
c0014f87:	c7 44 24 18 ff ff ff ff 	mov    DWORD PTR [esp+0x18],0xffffffff
c0014f8f:	eb 1f                	jmp    c0014fb0 <performRegionOperation(Region, Region, RegionOperation)+0x4be>
c0014f91:	83 ec 0c             	sub    esp,0xc
c0014f94:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014f98:	e8 14 f9 ff ff       	call   c00148b1 <readUnaligned32(unsigned char*)>
c0014f9d:	83 c4 10             	add    esp,0x10
c0014fa0:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0014fa4:	85 f6                	test   esi,esi
c0014fa6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014faa:	0f 84 c3 00 00 00    	je     c0015073 <performRegionOperation(Region, Region, RegionOperation)+0x581>
c0014fb0:	83 ec 0c             	sub    esp,0xc
c0014fb3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014fb7:	e8 f5 f8 ff ff       	call   c00148b1 <readUnaligned32(unsigned char*)>
c0014fbc:	83 c4 10             	add    esp,0x10
c0014fbf:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0014fc3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0014fc8:	0f 84 8a 00 00 00    	je     c0015058 <performRegionOperation(Region, Region, RegionOperation)+0x566>
c0014fce:	e9 a5 00 00 00       	jmp    c0015078 <performRegionOperation(Region, Region, RegionOperation)+0x586>
c0014fd3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0014fd6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0014fda:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014fdd:	8d 4e 04             	lea    ecx,[esi+0x4]
c0014fe0:	39 c1                	cmp    ecx,eax
c0014fe2:	7c 16                	jl     c0014ffa <performRegionOperation(Region, Region, RegionOperation)+0x508>
c0014fe4:	01 c0                	add    eax,eax
c0014fe6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0014fe9:	56                   	push   esi
c0014fea:	56                   	push   esi
c0014feb:	50                   	push   eax
c0014fec:	52                   	push   edx
c0014fed:	e8 5d a7 ff ff       	call   c000f74f <realloc>
c0014ff2:	83 c4 10             	add    esp,0x10
c0014ff5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014ff8:	eb d9                	jmp    c0014fd3 <performRegionOperation(Region, Region, RegionOperation)+0x4e1>
c0014ffa:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0014ffe:	41                   	inc    ecx
c0014fff:	53                   	push   ebx
c0015000:	53                   	push   ebx
c0015001:	51                   	push   ecx
c0015002:	03 54 24 14          	add    edx,DWORD PTR [esp+0x14]
c0015006:	52                   	push   edx
c0015007:	e8 ac f8 ff ff       	call   c00148b8 <writeUnaligned32(unsigned char*, unsigned int)>
c001500c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015010:	8d 04 88             	lea    eax,[eax+ecx*4]
c0015013:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015017:	83 c4 10             	add    esp,0x10
c001501a:	e9 2f fe ff ff       	jmp    c0014e4e <performRegionOperation(Region, Region, RegionOperation)+0x35c>
c001501f:	8b b4 24 cc 00 00 00 	mov    esi,DWORD PTR [esp+0xcc]
c0015026:	8d 56 ff             	lea    edx,[esi-0x1]
c0015029:	83 fa 01             	cmp    edx,0x1
c001502c:	0f 87 38 fe ff ff    	ja     c0014e6a <performRegionOperation(Region, Region, RegionOperation)+0x378>
c0015032:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015036:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001503a:	e9 9d fc ff ff       	jmp    c0014cdc <performRegionOperation(Region, Region, RegionOperation)+0x1ea>
c001503f:	f7 c6 01 00 00 00    	test   esi,0x1
c0015045:	0f 85 e2 fc ff ff    	jne    c0014d2d <performRegionOperation(Region, Region, RegionOperation)+0x23b>
c001504b:	c7 44 24 28 04 00 00 00 	mov    DWORD PTR [esp+0x28],0x4
c0015053:	e9 ef fc ff ff       	jmp    c0014d47 <performRegionOperation(Region, Region, RegionOperation)+0x255>
c0015058:	31 db                	xor    ebx,ebx
c001505a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001505e:	0f 85 13 01 00 00    	jne    c0015177 <performRegionOperation(Region, Region, RegionOperation)+0x685>
c0015064:	83 f7 01             	xor    edi,0x1
c0015067:	83 44 24 34 04       	add    DWORD PTR [esp+0x34],0x4
c001506c:	4e                   	dec    esi
c001506d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015071:	eb 2c                	jmp    c001509f <performRegionOperation(Region, Region, RegionOperation)+0x5ad>
c0015073:	83 c8 ff             	or     eax,0xffffffff
c0015076:	31 ff                	xor    edi,edi
c0015078:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001507c:	0f 85 ee 00 00 00    	jne    c0015170 <performRegionOperation(Region, Region, RegionOperation)+0x67e>
c0015082:	85 f6                	test   esi,esi
c0015084:	0f 84 18 01 00 00    	je     c00151a2 <performRegionOperation(Region, Region, RegionOperation)+0x6b0>
c001508a:	83 f3 01             	xor    ebx,0x1
c001508d:	83 44 24 28 04       	add    DWORD PTR [esp+0x28],0x4
c0015092:	ff 4c 24 20          	dec    DWORD PTR [esp+0x20]
c0015096:	83 f7 01             	xor    edi,0x1
c0015099:	83 44 24 34 04       	add    DWORD PTR [esp+0x34],0x4
c001509e:	4e                   	dec    esi
c001509f:	83 bc 24 cc 00 00 00 01 	cmp    DWORD PTR [esp+0xcc],0x1
c00150a7:	74 38                	je     c00150e1 <performRegionOperation(Region, Region, RegionOperation)+0x5ef>
c00150a9:	7f 10                	jg     c00150bb <performRegionOperation(Region, Region, RegionOperation)+0x5c9>
c00150ab:	83 bc 24 cc 00 00 00 00 	cmp    DWORD PTR [esp+0xcc],0x0
c00150b3:	75 36                	jne    c00150eb <performRegionOperation(Region, Region, RegionOperation)+0x5f9>
c00150b5:	89 d8                	mov    eax,ebx
c00150b7:	09 f8                	or     eax,edi
c00150b9:	eb 2a                	jmp    c00150e5 <performRegionOperation(Region, Region, RegionOperation)+0x5f3>
c00150bb:	83 bc 24 cc 00 00 00 02 	cmp    DWORD PTR [esp+0xcc],0x2
c00150c3:	74 10                	je     c00150d5 <performRegionOperation(Region, Region, RegionOperation)+0x5e3>
c00150c5:	83 bc 24 cc 00 00 00 03 	cmp    DWORD PTR [esp+0xcc],0x3
c00150cd:	75 1c                	jne    c00150eb <performRegionOperation(Region, Region, RegionOperation)+0x5f9>
c00150cf:	89 d8                	mov    eax,ebx
c00150d1:	31 f8                	xor    eax,edi
c00150d3:	eb 10                	jmp    c00150e5 <performRegionOperation(Region, Region, RegionOperation)+0x5f3>
c00150d5:	89 d8                	mov    eax,ebx
c00150d7:	83 f0 01             	xor    eax,0x1
c00150da:	09 f8                	or     eax,edi
c00150dc:	83 f0 01             	xor    eax,0x1
c00150df:	eb 04                	jmp    c00150e5 <performRegionOperation(Region, Region, RegionOperation)+0x5f3>
c00150e1:	89 d8                	mov    eax,ebx
c00150e3:	21 f8                	and    eax,edi
c00150e5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00150e9:	eb 10                	jmp    c00150fb <performRegionOperation(Region, Region, RegionOperation)+0x609>
c00150eb:	83 ec 0c             	sub    esp,0xc
c00150ee:	68 0c 52 02 c0       	push   0xc002520c
c00150f3:	e8 c8 aa ff ff       	call   c000fbc0 <KePanic(char const*)>
c00150f8:	83 c4 10             	add    esp,0x10
c00150fb:	8a 4c 24 4c          	mov    cl,BYTE PTR [esp+0x4c]
c00150ff:	38 4c 24 24          	cmp    BYTE PTR [esp+0x24],cl
c0015103:	75 0d                	jne    c0015112 <performRegionOperation(Region, Region, RegionOperation)+0x620>
c0015105:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0015109:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001510d:	e9 6a fe ff ff       	jmp    c0014f7c <performRegionOperation(Region, Region, RegionOperation)+0x48a>
c0015112:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0015116:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001511a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0015121:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015125:	8d 44 10 04          	lea    eax,[eax+edx*1+0x4]
c0015129:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001512d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0015130:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015133:	39 44 24 4c          	cmp    DWORD PTR [esp+0x4c],eax
c0015137:	7c 1e                	jl     c0015157 <performRegionOperation(Region, Region, RegionOperation)+0x665>
c0015139:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c001513d:	01 c0                	add    eax,eax
c001513f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0015142:	52                   	push   edx
c0015143:	52                   	push   edx
c0015144:	50                   	push   eax
c0015145:	51                   	push   ecx
c0015146:	e8 04 a6 ff ff       	call   c000f74f <realloc>
c001514b:	83 c4 10             	add    esp,0x10
c001514e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0015151:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0015155:	eb d6                	jmp    c001512d <performRegionOperation(Region, Region, RegionOperation)+0x63b>
c0015157:	50                   	push   eax
c0015158:	50                   	push   eax
c0015159:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001515d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015161:	01 d0                	add    eax,edx
c0015163:	01 c1                	add    ecx,eax
c0015165:	51                   	push   ecx
c0015166:	e8 4d f7 ff ff       	call   c00148b8 <writeUnaligned32(unsigned char*, unsigned int)>
c001516b:	83 c4 10             	add    esp,0x10
c001516e:	eb 95                	jmp    c0015105 <performRegionOperation(Region, Region, RegionOperation)+0x613>
c0015170:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0015175:	75 1d                	jne    c0015194 <performRegionOperation(Region, Region, RegionOperation)+0x6a2>
c0015177:	85 f6                	test   esi,esi
c0015179:	0f 85 e5 fe ff ff    	jne    c0015064 <performRegionOperation(Region, Region, RegionOperation)+0x572>
c001517f:	83 ec 0c             	sub    esp,0xc
c0015182:	68 0c 52 02 c0       	push   0xc002520c
c0015187:	e8 34 aa ff ff       	call   c000fbc0 <KePanic(char const*)>
c001518c:	83 c4 10             	add    esp,0x10
c001518f:	e9 0b ff ff ff       	jmp    c001509f <performRegionOperation(Region, Region, RegionOperation)+0x5ad>
c0015194:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0015198:	7e 08                	jle    c00151a2 <performRegionOperation(Region, Region, RegionOperation)+0x6b0>
c001519a:	85 f6                	test   esi,esi
c001519c:	0f 85 c2 fe ff ff    	jne    c0015064 <performRegionOperation(Region, Region, RegionOperation)+0x572>
c00151a2:	83 f3 01             	xor    ebx,0x1
c00151a5:	83 44 24 28 04       	add    DWORD PTR [esp+0x28],0x4
c00151aa:	ff 4c 24 20          	dec    DWORD PTR [esp+0x20]
c00151ae:	e9 ec fe ff ff       	jmp    c001509f <performRegionOperation(Region, Region, RegionOperation)+0x5ad>
c00151b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00151b7:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00151ba:	50                   	push   eax
c00151bb:	50                   	push   eax
c00151bc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00151c0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00151c3:	e8 87 a5 ff ff       	call   c000f74f <realloc>
c00151c8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00151cb:	81 c4 8c 00 00 00    	add    esp,0x8c
c00151d1:	89 e8                	mov    eax,ebp
c00151d3:	5b                   	pop    ebx
c00151d4:	5e                   	pop    esi
c00151d5:	5f                   	pop    edi
c00151d6:	5d                   	pop    ebp
c00151d7:	c2 04 00             	ret    0x4

c00151da <getRegionUnion(Region, Region)>:
c00151da:	57                   	push   edi
c00151db:	b9 07 00 00 00       	mov    ecx,0x7
c00151e0:	56                   	push   esi
c00151e1:	53                   	push   ebx
c00151e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00151e6:	6a 00                	push   0x0
c00151e8:	83 ec 1c             	sub    esp,0x1c
c00151eb:	8d 74 24 50          	lea    esi,[esp+0x50]
c00151ef:	fc                   	cld    
c00151f0:	89 e7                	mov    edi,esp
c00151f2:	83 ec 1c             	sub    esp,0x1c
c00151f5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00151f7:	8d 74 24 50          	lea    esi,[esp+0x50]
c00151fb:	89 e7                	mov    edi,esp
c00151fd:	b9 07 00 00 00       	mov    ecx,0x7
c0015202:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015204:	53                   	push   ebx
c0015205:	e8 e8 f8 ff ff       	call   c0014af2 <performRegionOperation(Region, Region, RegionOperation)>
c001520a:	89 d8                	mov    eax,ebx
c001520c:	83 c4 3c             	add    esp,0x3c
c001520f:	5b                   	pop    ebx
c0015210:	5e                   	pop    esi
c0015211:	5f                   	pop    edi
c0015212:	c2 04 00             	ret    0x4

c0015215 <getRegionDifference(Region, Region)>:
c0015215:	57                   	push   edi
c0015216:	b9 07 00 00 00       	mov    ecx,0x7
c001521b:	56                   	push   esi
c001521c:	53                   	push   ebx
c001521d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015221:	6a 02                	push   0x2
c0015223:	83 ec 1c             	sub    esp,0x1c
c0015226:	8d 74 24 50          	lea    esi,[esp+0x50]
c001522a:	fc                   	cld    
c001522b:	89 e7                	mov    edi,esp
c001522d:	83 ec 1c             	sub    esp,0x1c
c0015230:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015232:	8d 74 24 50          	lea    esi,[esp+0x50]
c0015236:	89 e7                	mov    edi,esp
c0015238:	b9 07 00 00 00       	mov    ecx,0x7
c001523d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001523f:	53                   	push   ebx
c0015240:	e8 ad f8 ff ff       	call   c0014af2 <performRegionOperation(Region, Region, RegionOperation)>
c0015245:	89 d8                	mov    eax,ebx
c0015247:	83 c4 3c             	add    esp,0x3c
c001524a:	5b                   	pop    ebx
c001524b:	5e                   	pop    esi
c001524c:	5f                   	pop    edi
c001524d:	c2 04 00             	ret    0x4

c0015250 <getRegionIntersection(Region, Region)>:
c0015250:	57                   	push   edi
c0015251:	b9 07 00 00 00       	mov    ecx,0x7
c0015256:	56                   	push   esi
c0015257:	53                   	push   ebx
c0015258:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001525c:	6a 01                	push   0x1
c001525e:	83 ec 1c             	sub    esp,0x1c
c0015261:	8d 74 24 50          	lea    esi,[esp+0x50]
c0015265:	fc                   	cld    
c0015266:	89 e7                	mov    edi,esp
c0015268:	83 ec 1c             	sub    esp,0x1c
c001526b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001526d:	8d 74 24 50          	lea    esi,[esp+0x50]
c0015271:	89 e7                	mov    edi,esp
c0015273:	b9 07 00 00 00       	mov    ecx,0x7
c0015278:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001527a:	53                   	push   ebx
c001527b:	e8 72 f8 ff ff       	call   c0014af2 <performRegionOperation(Region, Region, RegionOperation)>
c0015280:	89 d8                	mov    eax,ebx
c0015282:	83 c4 3c             	add    esp,0x3c
c0015285:	5b                   	pop    ebx
c0015286:	5e                   	pop    esi
c0015287:	5f                   	pop    edi
c0015288:	c2 04 00             	ret    0x4

c001528b <getRegionXOR(Region, Region)>:
c001528b:	57                   	push   edi
c001528c:	b9 07 00 00 00       	mov    ecx,0x7
c0015291:	56                   	push   esi
c0015292:	53                   	push   ebx
c0015293:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015297:	6a 03                	push   0x3
c0015299:	83 ec 1c             	sub    esp,0x1c
c001529c:	8d 74 24 50          	lea    esi,[esp+0x50]
c00152a0:	fc                   	cld    
c00152a1:	89 e7                	mov    edi,esp
c00152a3:	83 ec 1c             	sub    esp,0x1c
c00152a6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00152a8:	8d 74 24 50          	lea    esi,[esp+0x50]
c00152ac:	89 e7                	mov    edi,esp
c00152ae:	b9 07 00 00 00       	mov    ecx,0x7
c00152b3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00152b5:	53                   	push   ebx
c00152b6:	e8 37 f8 ff ff       	call   c0014af2 <performRegionOperation(Region, Region, RegionOperation)>
c00152bb:	89 d8                	mov    eax,ebx
c00152bd:	83 c4 3c             	add    esp,0x3c
c00152c0:	5b                   	pop    ebx
c00152c1:	5e                   	pop    esi
c00152c2:	5f                   	pop    edi
c00152c3:	c2 04 00             	ret    0x4

c00152c6 <SysSbrk(regs*)>:
c00152c6:	56                   	push   esi
c00152c7:	53                   	push   ebx
c00152c8:	50                   	push   eax
c00152c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00152d2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152d5:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00152d8:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c00152de:	85 db                	test   ebx,ebx
c00152e0:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00152e3:	74 02                	je     c00152e7 <SysSbrk(regs*)+0x21>
c00152e5:	79 06                	jns    c00152ed <SysSbrk(regs*)+0x27>
c00152e7:	89 f0                	mov    eax,esi
c00152e9:	31 d2                	xor    edx,edx
c00152eb:	eb 2a                	jmp    c0015317 <SysSbrk(regs*)+0x51>
c00152ed:	83 c8 ff             	or     eax,0xffffffff
c00152f0:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00152f6:	89 c2                	mov    edx,eax
c00152f8:	77 1d                	ja     c0015317 <SysSbrk(regs*)+0x51>
c00152fa:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0015300:	50                   	push   eax
c0015301:	c1 ea 0c             	shr    edx,0xc
c0015304:	68 07 0c 00 00       	push   0xc07
c0015309:	52                   	push   edx
c001530a:	51                   	push   ecx
c001530b:	e8 ca e6 ff ff       	call   c00139da <VAS::allocatePages(int, int)>
c0015310:	89 f0                	mov    eax,esi
c0015312:	31 d2                	xor    edx,edx
c0015314:	83 c4 10             	add    esp,0x10
c0015317:	59                   	pop    ecx
c0015318:	5b                   	pop    ebx
c0015319:	5e                   	pop    esi
c001531a:	c3                   	ret    

c001531b <SysSetCwd(regs*)>:
c001531b:	83 ec 14             	sub    esp,0x14
c001531e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015322:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015325:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001532a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001532d:	e8 d9 31 ff ff       	call   c000850b <Fs::setcwd(Process*, char*)>
c0015332:	83 c4 1c             	add    esp,0x1c
c0015335:	99                   	cdq    
c0015336:	c3                   	ret    

c0015337 <SysSetTime(regs*)>:
c0015337:	55                   	push   ebp
c0015338:	31 d2                	xor    edx,edx
c001533a:	57                   	push   edi
c001533b:	56                   	push   esi
c001533c:	be 18 00 00 00       	mov    esi,0x18
c0015341:	53                   	push   ebx
c0015342:	bb 3c 00 00 00       	mov    ebx,0x3c
c0015347:	83 ec 20             	sub    esp,0x20
c001534a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001534e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015351:	f7 f3                	div    ebx
c0015353:	89 d7                	mov    edi,edx
c0015355:	31 d2                	xor    edx,edx
c0015357:	f7 f3                	div    ebx
c0015359:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001535c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015360:	bb 10 0e 00 00       	mov    ebx,0xe10
c0015365:	31 d2                	xor    edx,edx
c0015367:	f7 f3                	div    ebx
c0015369:	31 d2                	xor    edx,edx
c001536b:	f7 f6                	div    esi
c001536d:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0015370:	89 d5                	mov    ebp,edx
c0015372:	89 c3                	mov    ebx,eax
c0015374:	be 0c 00 00 00       	mov    esi,0xc
c0015379:	83 e3 1f             	and    ebx,0x1f
c001537c:	c1 e8 05             	shr    eax,0x5
c001537f:	43                   	inc    ebx
c0015380:	31 d2                	xor    edx,edx
c0015382:	f7 f6                	div    esi
c0015384:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0015388:	57                   	push   edi
c0015389:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001538d:	55                   	push   ebp
c001538e:	0f b7 71 24          	movzx  esi,WORD PTR [ecx+0x24]
c0015392:	56                   	push   esi
c0015393:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015397:	53                   	push   ebx
c0015398:	68 13 52 02 c0       	push   0xc0025213
c001539d:	e8 da 1b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00153a2:	83 c4 1c             	add    esp,0x1c
c00153a5:	57                   	push   edi
c00153a6:	c1 e7 10             	shl    edi,0x10
c00153a9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00153ad:	55                   	push   ebp
c00153ae:	56                   	push   esi
c00153af:	c1 e6 10             	shl    esi,0x10
c00153b2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00153b6:	53                   	push   ebx
c00153b7:	68 35 52 02 c0       	push   0xc0025235
c00153bc:	e8 bb 1b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00153c1:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c00153c6:	31 d2                	xor    edx,edx
c00153c8:	8b 88 58 01 00 00    	mov    ecx,DWORD PTR [eax+0x158]
c00153ce:	31 c0                	xor    eax,eax
c00153d0:	88 d8                	mov    al,bl
c00153d2:	8a 64 24 2c          	mov    ah,BYTE PTR [esp+0x2c]
c00153d6:	0f b7 d8             	movzx  ebx,ax
c00153d9:	09 f3                	or     ebx,esi
c00153db:	89 d8                	mov    eax,ebx
c00153dd:	89 eb                	mov    ebx,ebp
c00153df:	88 5c 24 2c          	mov    BYTE PTR [esp+0x2c],bl
c00153e3:	88 da                	mov    dl,bl
c00153e5:	8a 74 24 28          	mov    dh,BYTE PTR [esp+0x28]
c00153e9:	83 c4 1c             	add    esp,0x1c
c00153ec:	89 d6                	mov    esi,edx
c00153ee:	81 e6 ff ff 00 ff    	and    esi,0xff00ffff
c00153f4:	09 fe                	or     esi,edi
c00153f6:	56                   	push   esi
c00153f7:	50                   	push   eax
c00153f8:	51                   	push   ecx
c00153f9:	e8 7e 41 ff ff       	call   c000957c <Clock::setTimeInDatetimeLocal(datetime_t)>
c00153fe:	83 c4 2c             	add    esp,0x2c
c0015401:	83 f0 01             	xor    eax,0x1
c0015404:	5b                   	pop    ebx
c0015405:	0f b6 c0             	movzx  eax,al
c0015408:	5e                   	pop    esi
c0015409:	31 d2                	xor    edx,edx
c001540b:	5f                   	pop    edi
c001540c:	5d                   	pop    ebp
c001540d:	c3                   	ret    

c001540e <SysSymlink(regs*)>:
c001540e:	56                   	push   esi
c001540f:	83 c8 ff             	or     eax,0xffffffff
c0015412:	53                   	push   ebx
c0015413:	89 c2                	mov    edx,eax
c0015415:	81 ec 34 02 00 00    	sub    esp,0x234
c001541b:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0015422:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0015426:	74 50                	je     c0015478 <SysSymlink(regs*)+0x6a>
c0015428:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001542b:	85 c9                	test   ecx,ecx
c001542d:	74 49                	je     c0015478 <SysSymlink(regs*)+0x6a>
c001542f:	6a 01                	push   0x1
c0015431:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015436:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015439:	05 0c 01 00 00       	add    eax,0x10c
c001543e:	50                   	push   eax
c001543f:	51                   	push   ecx
c0015440:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0015444:	56                   	push   esi
c0015445:	e8 28 2a ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001544a:	6a 01                	push   0x1
c001544c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015451:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015454:	05 0c 01 00 00       	add    eax,0x10c
c0015459:	50                   	push   eax
c001545a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001545d:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0015464:	53                   	push   ebx
c0015465:	e8 08 2a ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001546a:	83 c4 18             	add    esp,0x18
c001546d:	56                   	push   esi
c001546e:	53                   	push   ebx
c001546f:	e8 2c 26 ff ff       	call   c0007aa0 <KeCreateSymlink(char const*, char const*)>
c0015474:	83 c4 10             	add    esp,0x10
c0015477:	99                   	cdq    
c0015478:	81 c4 34 02 00 00    	add    esp,0x234
c001547e:	5b                   	pop    ebx
c001547f:	5e                   	pop    esi
c0015480:	c3                   	ret    

c0015481 <SysTimezone(regs*)>:
c0015481:	83 ec 0c             	sub    esp,0xc
c0015484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015488:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c001548c:	75 17                	jne    c00154a5 <SysTimezone(regs*)+0x24>
c001548e:	83 ec 0c             	sub    esp,0xc
c0015491:	68 57 52 02 c0       	push   0xc0025257
c0015496:	e8 e1 1a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001549b:	83 c8 ff             	or     eax,0xffffffff
c001549e:	83 c4 10             	add    esp,0x10
c00154a1:	89 c2                	mov    edx,eax
c00154a3:	eb 16                	jmp    c00154bb <SysTimezone(regs*)+0x3a>
c00154a5:	83 ec 0c             	sub    esp,0xc
c00154a8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00154ab:	e8 59 3b ff ff       	call   c0009009 <KeSetTimezone(int)>
c00154b0:	31 d2                	xor    edx,edx
c00154b2:	83 f0 01             	xor    eax,0x1
c00154b5:	83 c4 10             	add    esp,0x10
c00154b8:	0f b6 c0             	movzx  eax,al
c00154bb:	83 c4 0c             	add    esp,0xc
c00154be:	c3                   	ret    

c00154bf <SysTruncate(regs*)>:
c00154bf:	55                   	push   ebp
c00154c0:	57                   	push   edi
c00154c1:	31 ff                	xor    edi,edi
c00154c3:	56                   	push   esi
c00154c4:	53                   	push   ebx
c00154c5:	83 ec 0c             	sub    esp,0xc
c00154c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154cc:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00154cf:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00154d2:	89 ce                	mov    esi,ecx
c00154d4:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00154d8:	0f 84 9a 00 00 00    	je     c0015578 <SysTruncate(regs*)+0xb9>
c00154de:	83 ec 0c             	sub    esp,0xc
c00154e1:	68 14 01 00 00       	push   0x114
c00154e6:	e8 78 a2 ff ff       	call   c000f763 <malloc>
c00154eb:	83 c4 0c             	add    esp,0xc
c00154ee:	89 c3                	mov    ebx,eax
c00154f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154f5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00154f8:	55                   	push   ebp
c00154f9:	53                   	push   ebx
c00154fa:	e8 8b 2c ff ff       	call   c000818a <File::File(char const*, Process*)>
c00154ff:	83 c4 10             	add    esp,0x10
c0015502:	31 d2                	xor    edx,edx
c0015504:	b8 03 00 00 00       	mov    eax,0x3
c0015509:	85 db                	test   ebx,ebx
c001550b:	0f 84 a2 00 00 00    	je     c00155b3 <SysTruncate(regs*)+0xf4>
c0015511:	51                   	push   ecx
c0015512:	51                   	push   ecx
c0015513:	6a 02                	push   0x2
c0015515:	53                   	push   ebx
c0015516:	e8 8d 2c ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c001551b:	83 c4 10             	add    esp,0x10
c001551e:	85 c0                	test   eax,eax
c0015520:	74 13                	je     c0015535 <SysTruncate(regs*)+0x76>
c0015522:	83 ec 0c             	sub    esp,0xc
c0015525:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015527:	53                   	push   ebx
c0015528:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001552b:	83 c4 10             	add    esp,0x10
c001552e:	b8 04 00 00 00       	mov    eax,0x4
c0015533:	eb 7c                	jmp    c00155b1 <SysTruncate(regs*)+0xf2>
c0015535:	52                   	push   edx
c0015536:	57                   	push   edi
c0015537:	56                   	push   esi
c0015538:	53                   	push   ebx
c0015539:	e8 7e 2d ff ff       	call   c00082bc <File::truncate(unsigned long long)>
c001553e:	83 c4 10             	add    esp,0x10
c0015541:	85 c0                	test   eax,eax
c0015543:	74 1b                	je     c0015560 <SysTruncate(regs*)+0xa1>
c0015545:	83 ec 0c             	sub    esp,0xc
c0015548:	53                   	push   ebx
c0015549:	e8 b8 2c ff ff       	call   c0008206 <File::close()>
c001554e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015550:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015553:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015556:	83 c4 10             	add    esp,0x10
c0015559:	b8 05 00 00 00       	mov    eax,0x5
c001555e:	eb 51                	jmp    c00155b1 <SysTruncate(regs*)+0xf2>
c0015560:	83 ec 0c             	sub    esp,0xc
c0015563:	53                   	push   ebx
c0015564:	e8 9d 2c ff ff       	call   c0008206 <File::close()>
c0015569:	8b 03                	mov    eax,DWORD PTR [ebx]
c001556b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001556e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015571:	83 c4 10             	add    esp,0x10
c0015574:	31 c0                	xor    eax,eax
c0015576:	eb 39                	jmp    c00155b1 <SysTruncate(regs*)+0xf2>
c0015578:	31 d2                	xor    edx,edx
c001557a:	b8 01 00 00 00       	mov    eax,0x1
c001557f:	83 fd 02             	cmp    ebp,0x2
c0015582:	7e 2f                	jle    c00155b3 <SysTruncate(regs*)+0xf4>
c0015584:	83 ec 0c             	sub    esp,0xc
c0015587:	51                   	push   ecx
c0015588:	e8 08 db ff ff       	call   c0013095 <KeGetFileFromDescriptor(int)>
c001558d:	83 c4 10             	add    esp,0x10
c0015590:	89 c1                	mov    ecx,eax
c0015592:	31 d2                	xor    edx,edx
c0015594:	b8 02 00 00 00       	mov    eax,0x2
c0015599:	85 c9                	test   ecx,ecx
c001559b:	74 16                	je     c00155b3 <SysTruncate(regs*)+0xf4>
c001559d:	50                   	push   eax
c001559e:	57                   	push   edi
c001559f:	56                   	push   esi
c00155a0:	51                   	push   ecx
c00155a1:	e8 16 2d ff ff       	call   c00082bc <File::truncate(unsigned long long)>
c00155a6:	83 c4 10             	add    esp,0x10
c00155a9:	85 c0                	test   eax,eax
c00155ab:	0f 95 c0             	setne  al
c00155ae:	0f b6 c0             	movzx  eax,al
c00155b1:	31 d2                	xor    edx,edx
c00155b3:	83 c4 0c             	add    esp,0xc
c00155b6:	5b                   	pop    ebx
c00155b7:	5e                   	pop    esi
c00155b8:	5f                   	pop    edi
c00155b9:	5d                   	pop    ebp
c00155ba:	c3                   	ret    

c00155bb <SysWrite(regs*)>:
c00155bb:	57                   	push   edi
c00155bc:	56                   	push   esi
c00155bd:	53                   	push   ebx
c00155be:	83 ec 10             	sub    esp,0x10
c00155c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00155c5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00155c8:	83 f8 02             	cmp    eax,0x2
c00155cb:	77 10                	ja     c00155dd <SysWrite(regs*)+0x22>
c00155cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155d2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00155d5:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c00155db:	eb 0e                	jmp    c00155eb <SysWrite(regs*)+0x30>
c00155dd:	83 ec 0c             	sub    esp,0xc
c00155e0:	50                   	push   eax
c00155e1:	e8 af da ff ff       	call   c0013095 <KeGetFileFromDescriptor(int)>
c00155e6:	83 c4 10             	add    esp,0x10
c00155e9:	89 c1                	mov    ecx,eax
c00155eb:	83 c8 ff             	or     eax,0xffffffff
c00155ee:	85 c9                	test   ecx,ecx
c00155f0:	89 c2                	mov    edx,eax
c00155f2:	74 28                	je     c001561c <SysWrite(regs*)+0x61>
c00155f4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00155fc:	31 ff                	xor    edi,edi
c00155fe:	83 ec 0c             	sub    esp,0xc
c0015601:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015603:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015607:	52                   	push   edx
c0015608:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001560b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001560e:	57                   	push   edi
c001560f:	56                   	push   esi
c0015610:	51                   	push   ecx
c0015611:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015614:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015618:	83 c4 20             	add    esp,0x20
c001561b:	99                   	cdq    
c001561c:	83 c4 10             	add    esp,0x10
c001561f:	5b                   	pop    ebx
c0015620:	5e                   	pop    esi
c0015621:	5f                   	pop    edi
c0015622:	c3                   	ret    

c0015623 <SysWsbe(regs*)>:
c0015623:	55                   	push   ebp
c0015624:	57                   	push   edi
c0015625:	56                   	push   esi
c0015626:	53                   	push   ebx
c0015627:	83 ec 3c             	sub    esp,0x3c
c001562a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001562e:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0015635:	75 2d                	jne    c0015664 <SysWsbe(regs*)+0x41>
c0015637:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c001563e:	75 24                	jne    c0015664 <SysWsbe(regs*)+0x41>
c0015640:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c0015647:	75 1b                	jne    c0015664 <SysWsbe(regs*)+0x41>
c0015649:	6a 01                	push   0x1
c001564b:	6a 00                	push   0x0
c001564d:	68 79 9f 00 c0       	push   0xc0009f79
c0015652:	ff 35 98 da 02 c0    	push   DWORD PTR ds:0xc002da98
c0015658:	e8 07 1c 00 00       	call   c0017264 <Process::createThread(void (*)(void*), void*, int)>
c001565d:	83 c4 10             	add    esp,0x10
c0015660:	31 c0                	xor    eax,eax
c0015662:	eb 52                	jmp    c00156b6 <SysWsbe(regs*)+0x93>
c0015664:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015668:	be 6c 52 02 c0       	mov    esi,0xc002526c
c001566d:	b9 0b 00 00 00       	mov    ecx,0xb
c0015672:	fc                   	cld    
c0015673:	83 ec 0c             	sub    esp,0xc
c0015676:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015678:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001567c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015681:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015684:	8b b0 a6 05 00 00    	mov    esi,DWORD PTR [eax+0x5a6]
c001568a:	8b 06                	mov    eax,DWORD PTR [esi]
c001568c:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c001568f:	57                   	push   edi
c0015690:	e8 db ae fe ff       	call   c0000570 <strlen>
c0015695:	5a                   	pop    edx
c0015696:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001569a:	52                   	push   edx
c001569b:	31 d2                	xor    edx,edx
c001569d:	57                   	push   edi
c001569e:	52                   	push   edx
c001569f:	50                   	push   eax
c00156a0:	56                   	push   esi
c00156a1:	ff d5                	call   ebp
c00156a3:	83 c4 14             	add    esp,0x14
c00156a6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00156a9:	e8 76 26 00 00       	call   c0017d24 <KeTerminateCurrentThread(int)>
c00156ae:	83 c4 10             	add    esp,0x10
c00156b1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00156b6:	83 c4 3c             	add    esp,0x3c
c00156b9:	31 d2                	xor    edx,edx
c00156bb:	5b                   	pop    ebx
c00156bc:	5e                   	pop    esi
c00156bd:	5f                   	pop    edi
c00156be:	5d                   	pop    ebp
c00156bf:	c3                   	ret    

c00156c0 <SysYield(regs*)>:
c00156c0:	83 ec 0c             	sub    esp,0xc
c00156c3:	fa                   	cli    
c00156c4:	ff 05 70 da 02 c0    	inc    DWORD PTR ds:0xc002da70
c00156ca:	e8 55 1e 00 00       	call   c0017524 <schedule()>
c00156cf:	f0 ff 0d 70 da 02 c0 	lock dec DWORD PTR ds:0xc002da70
c00156d6:	83 3d 70 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da70,0x0
c00156dd:	75 01                	jne    c00156e0 <SysYield(regs*)+0x20>
c00156df:	fb                   	sti    
c00156e0:	31 c0                	xor    eax,eax
c00156e2:	31 d2                	xor    edx,edx
c00156e4:	83 c4 0c             	add    esp,0xc
c00156e7:	c3                   	ret    

c00156e8 <KeAlarm(ThreadControlBlock*, unsigned long long)>:
c00156e8:	55                   	push   ebp
c00156e9:	57                   	push   edi
c00156ea:	56                   	push   esi
c00156eb:	53                   	push   ebx
c00156ec:	83 ec 2c             	sub    esp,0x2c
c00156ef:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00156f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00156f7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00156fb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00156ff:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015703:	8b 7a 63             	mov    edi,DWORD PTR [edx+0x63]
c0015706:	0f b6 4a 67          	movzx  ecx,BYTE PTR [edx+0x67]
c001570a:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c001570e:	c1 e0 08             	shl    eax,0x8
c0015711:	09 c1                	or     ecx,eax
c0015713:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c0015717:	c1 e0 10             	shl    eax,0x10
c001571a:	09 c1                	or     ecx,eax
c001571c:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c0015720:	83 e0 7f             	and    eax,0x7f
c0015723:	c1 e0 18             	shl    eax,0x18
c0015726:	09 c8                	or     eax,ecx
c0015728:	89 c5                	mov    ebp,eax
c001572a:	89 f8                	mov    eax,edi
c001572c:	80 f4 00             	xor    ah,0x0
c001572f:	89 c3                	mov    ebx,eax
c0015731:	89 e8                	mov    eax,ebp
c0015733:	80 f4 00             	xor    ah,0x0
c0015736:	89 c6                	mov    esi,eax
c0015738:	89 f0                	mov    eax,esi
c001573a:	09 d8                	or     eax,ebx
c001573c:	74 42                	je     c0015780 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x98>
c001573e:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015742:	8b 4a 63             	mov    ecx,DWORD PTR [edx+0x63]
c0015745:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c0015749:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c001574d:	c1 e0 08             	shl    eax,0x8
c0015750:	09 c6                	or     esi,eax
c0015752:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c0015756:	c1 e0 10             	shl    eax,0x10
c0015759:	09 c6                	or     esi,eax
c001575b:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c001575f:	83 e0 7f             	and    eax,0x7f
c0015762:	c1 e0 18             	shl    eax,0x18
c0015765:	09 f0                	or     eax,esi
c0015767:	89 c3                	mov    ebx,eax
c0015769:	a1 50 cb 02 c0       	mov    eax,ds:0xc002cb50
c001576e:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c0015774:	29 c1                	sub    ecx,eax
c0015776:	19 d3                	sbb    ebx,edx
c0015778:	89 c8                	mov    eax,ecx
c001577a:	89 da                	mov    edx,ebx
c001577c:	eb 0e                	jmp    c001578c <KeAlarm(ThreadControlBlock*, unsigned long long)+0xa4>
c001577e:	66 90                	xchg   ax,ax
c0015780:	b8 00 00 00 00       	mov    eax,0x0
c0015785:	ba 00 00 00 00       	mov    edx,0x0
c001578a:	66 90                	xchg   ax,ax
c001578c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015790:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015798:	80 f4 00             	xor    ah,0x0
c001579b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001579f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00157a3:	80 f4 00             	xor    ah,0x0
c00157a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00157aa:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00157ae:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00157b2:	89 e8                	mov    eax,ebp
c00157b4:	09 f8                	or     eax,edi
c00157b6:	74 30                	je     c00157e8 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x100>
c00157b8:	8b 0d 50 cb 02 c0    	mov    ecx,DWORD PTR ds:0xc002cb50
c00157be:	8b 1d 54 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb54
c00157c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00157cc:	01 c8                	add    eax,ecx
c00157ce:	11 da                	adc    edx,ebx
c00157d0:	89 c6                	mov    esi,eax
c00157d2:	83 e6 ff             	and    esi,0xffffffff
c00157d5:	89 34 24             	mov    DWORD PTR [esp],esi
c00157d8:	89 d0                	mov    eax,edx
c00157da:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00157df:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00157e3:	eb 13                	jmp    c00157f8 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x110>
c00157e5:	8d 76 00             	lea    esi,[esi+0x0]
c00157e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00157ef:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00157f7:	90                   	nop
c00157f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00157fc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00157ff:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0015803:	89 cf                	mov    edi,ecx
c0015805:	89 78 63             	mov    DWORD PTR [eax+0x63],edi
c0015808:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001580b:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001580f:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0015814:	8a 48 67             	mov    cl,BYTE PTR [eax+0x67]
c0015817:	83 e1 00             	and    ecx,0x0
c001581a:	09 ca                	or     edx,ecx
c001581c:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c001581f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015823:	c1 ea 08             	shr    edx,0x8
c0015826:	0f b6 d2             	movzx  edx,dl
c0015829:	8a 48 68             	mov    cl,BYTE PTR [eax+0x68]
c001582c:	83 e1 00             	and    ecx,0x0
c001582f:	09 ca                	or     edx,ecx
c0015831:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0015834:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015838:	c1 ea 10             	shr    edx,0x10
c001583b:	0f b6 d2             	movzx  edx,dl
c001583e:	8a 48 69             	mov    cl,BYTE PTR [eax+0x69]
c0015841:	83 e1 00             	and    ecx,0x0
c0015844:	09 ca                	or     edx,ecx
c0015846:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0015849:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001584d:	c1 ea 18             	shr    edx,0x18
c0015850:	83 e2 7f             	and    edx,0x7f
c0015853:	89 d3                	mov    ebx,edx
c0015855:	83 e3 7f             	and    ebx,0x7f
c0015858:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c001585b:	83 e2 80             	and    edx,0xffffff80
c001585e:	88 d1                	mov    cl,dl
c0015860:	88 da                	mov    dl,bl
c0015862:	09 ca                	or     edx,ecx
c0015864:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c0015867:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001586b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001586f:	83 c4 2c             	add    esp,0x2c
c0015872:	5b                   	pop    ebx
c0015873:	5e                   	pop    esi
c0015874:	5f                   	pop    edi
c0015875:	5d                   	pop    ebp
c0015876:	c3                   	ret    
c0015877:	90                   	nop

c0015878 <KeCheckAlarm(ThreadControlBlock*)>:
c0015878:	55                   	push   ebp
c0015879:	57                   	push   edi
c001587a:	56                   	push   esi
c001587b:	53                   	push   ebx
c001587c:	83 ec 0c             	sub    esp,0xc
c001587f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015883:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c0015886:	0f b6 78 67          	movzx  edi,BYTE PTR [eax+0x67]
c001588a:	0f b6 68 68          	movzx  ebp,BYTE PTR [eax+0x68]
c001588e:	c1 e5 08             	shl    ebp,0x8
c0015891:	09 fd                	or     ebp,edi
c0015893:	0f b6 78 69          	movzx  edi,BYTE PTR [eax+0x69]
c0015897:	c1 e7 10             	shl    edi,0x10
c001589a:	09 ef                	or     edi,ebp
c001589c:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c00158a0:	83 e0 7f             	and    eax,0x7f
c00158a3:	c1 e0 18             	shl    eax,0x18
c00158a6:	09 f8                	or     eax,edi
c00158a8:	89 c1                	mov    ecx,eax
c00158aa:	89 d0                	mov    eax,edx
c00158ac:	80 f4 00             	xor    ah,0x0
c00158af:	89 c3                	mov    ebx,eax
c00158b1:	89 c8                	mov    eax,ecx
c00158b3:	80 f4 00             	xor    ah,0x0
c00158b6:	89 c6                	mov    esi,eax
c00158b8:	89 f0                	mov    eax,esi
c00158ba:	09 d8                	or     eax,ebx
c00158bc:	0f 84 9e 00 00 00    	je     c0015960 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c00158c2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00158c6:	8b 41 63             	mov    eax,DWORD PTR [ecx+0x63]
c00158c9:	0f b6 59 67          	movzx  ebx,BYTE PTR [ecx+0x67]
c00158cd:	0f b6 71 68          	movzx  esi,BYTE PTR [ecx+0x68]
c00158d1:	c1 e6 08             	shl    esi,0x8
c00158d4:	09 de                	or     esi,ebx
c00158d6:	0f b6 59 69          	movzx  ebx,BYTE PTR [ecx+0x69]
c00158da:	c1 e3 10             	shl    ebx,0x10
c00158dd:	09 f3                	or     ebx,esi
c00158df:	0f b6 49 6a          	movzx  ecx,BYTE PTR [ecx+0x6a]
c00158e3:	83 e1 7f             	and    ecx,0x7f
c00158e6:	c1 e1 18             	shl    ecx,0x18
c00158e9:	09 d9                	or     ecx,ebx
c00158eb:	89 ca                	mov    edx,ecx
c00158ed:	89 c1                	mov    ecx,eax
c00158ef:	89 d3                	mov    ebx,edx
c00158f1:	a1 50 cb 02 c0       	mov    eax,ds:0xc002cb50
c00158f6:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c00158fc:	39 c8                	cmp    eax,ecx
c00158fe:	89 d0                	mov    eax,edx
c0015900:	19 d8                	sbb    eax,ebx
c0015902:	72 5c                	jb     c0015960 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c0015904:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015908:	c7 40 63 00 00 00 00 	mov    DWORD PTR [eax+0x63],0x0
c001590f:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c0015912:	83 e2 00             	and    edx,0x0
c0015915:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0015918:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c001591b:	83 e2 00             	and    edx,0x0
c001591e:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0015921:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c0015924:	83 e2 00             	and    edx,0x0
c0015927:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c001592a:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c001592d:	83 e2 80             	and    edx,0xffffff80
c0015930:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c0015933:	83 ec 0c             	sub    esp,0xc
c0015936:	68 98 52 02 c0       	push   0xc0025298
c001593b:	e8 3c 16 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015940:	83 c4 10             	add    esp,0x10
c0015943:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015947:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001594a:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c0015950:	83 ec 08             	sub    esp,0x8
c0015953:	6a 0e                	push   0xe
c0015955:	50                   	push   eax
c0015956:	e8 1c b5 ff ff       	call   c0010e77 <KeRaiseSignal(SigHandlerBlock*, int)>
c001595b:	83 c4 10             	add    esp,0x10
c001595e:	66 90                	xchg   ax,ax
c0015960:	90                   	nop
c0015961:	83 c4 0c             	add    esp,0xc
c0015964:	5b                   	pop    ebx
c0015965:	5e                   	pop    esi
c0015966:	5f                   	pop    edi
c0015967:	5d                   	pop    ebp
c0015968:	c3                   	ret    

c0015969 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0015969:	55                   	push   ebp
c001596a:	57                   	push   edi
c001596b:	56                   	push   esi
c001596c:	53                   	push   ebx
c001596d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0015973:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001597b:	0f 95 c0             	setne  al
c001597e:	31 d2                	xor    edx,edx
c0015980:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0015988:	0f 94 c2             	sete   dl
c001598b:	85 c2                	test   edx,eax
c001598d:	74 34                	je     c00159c3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c001598f:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001599a:	74 27                	je     c00159c3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c001599c:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00159a3:	05 00 10 00 00       	add    eax,0x1000
c00159a8:	89 c1                	mov    ecx,eax
c00159aa:	25 00 f0 ff ff       	and    eax,0xfffff000
c00159af:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00159b5:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00159bc:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00159c3:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00159ca:	83 ec 0c             	sub    esp,0xc
c00159cd:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00159d3:	6a 01                	push   0x1
c00159d5:	e8 19 d8 ff ff       	call   c00131f3 <Virt::allocateKernelVirtualPages(int)>
c00159da:	83 c4 10             	add    esp,0x10
c00159dd:	89 c3                	mov    ebx,eax
c00159df:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00159e5:	0f 86 26 01 00 00    	jbe    c0015b11 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c00159eb:	c1 ee 0c             	shr    esi,0xc
c00159ee:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00159f5:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00159f9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015a01:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0015a08:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015a0c:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0015a13:	29 ef                	sub    edi,ebp
c0015a15:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0015a19:	0f 83 f9 00 00 00    	jae    c0015b18 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1af>
c0015a1f:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0015a25:	76 05                	jbe    c0015a2c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0015a27:	bf 00 10 00 00       	mov    edi,0x1000
c0015a2c:	83 ec 0c             	sub    esp,0xc
c0015a2f:	31 d2                	xor    edx,edx
c0015a31:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015a38:	8b 08                	mov    ecx,DWORD PTR [eax]
c0015a3a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0015a3e:	50                   	push   eax
c0015a3f:	8d 74 24 30          	lea    esi,[esp+0x30]
c0015a43:	56                   	push   esi
c0015a44:	52                   	push   edx
c0015a45:	57                   	push   edi
c0015a46:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0015a4d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015a50:	83 c4 20             	add    esp,0x20
c0015a53:	85 c0                	test   eax,eax
c0015a55:	75 06                	jne    c0015a5d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0015a57:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015a5b:	74 13                	je     c0015a70 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0015a5d:	83 ec 0c             	sub    esp,0xc
c0015a60:	53                   	push   ebx
c0015a61:	e8 95 da ff ff       	call   c00134fb <Virt::freeKernelVirtualPages(unsigned long)>
c0015a66:	83 c4 10             	add    esp,0x10
c0015a69:	31 c0                	xor    eax,eax
c0015a6b:	e9 80 01 00 00       	jmp    c0015bf0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c0015a70:	fa                   	cli    
c0015a71:	ff 05 70 da 02 c0    	inc    DWORD PTR ds:0xc002da70
c0015a77:	e8 38 a3 ff ff       	call   c000fdb4 <Phys::allocatePage()>
c0015a7c:	6a 07                	push   0x7
c0015a7e:	89 c7                	mov    edi,eax
c0015a80:	53                   	push   ebx
c0015a81:	50                   	push   eax
c0015a82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a87:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015a8a:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015a90:	e8 41 de ff ff       	call   c00138d6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0015a95:	83 c4 0c             	add    esp,0xc
c0015a98:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015a9f:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015aa5:	6a 00                	push   0x0
c0015aa7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015aac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015aaf:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015ab5:	e8 88 dc ff ff       	call   c0013742 <VAS::mapOtherVASIn(bool, VAS*)>
c0015aba:	58                   	pop    eax
c0015abb:	5a                   	pop    edx
c0015abc:	68 07 0c 00 00       	push   0xc07
c0015ac1:	55                   	push   ebp
c0015ac2:	57                   	push   edi
c0015ac3:	89 df                	mov    edi,ebx
c0015ac5:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0015acc:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015ad2:	6a 00                	push   0x0
c0015ad4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ad9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015adc:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015ae2:	e8 31 e0 ff ff       	call   c0013b18 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0015ae7:	b9 00 10 00 00       	mov    ecx,0x1000
c0015aec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015aee:	f0 ff 0d 70 da 02 c0 	lock dec DWORD PTR ds:0xc002da70
c0015af5:	83 c4 20             	add    esp,0x20
c0015af8:	83 3d 70 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da70,0x0
c0015aff:	75 01                	jne    c0015b02 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x199>
c0015b01:	fb                   	sti    
c0015b02:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015b08:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015b0c:	e9 f0 fe ff ff       	jmp    c0015a01 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0015b11:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0015b18:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015b1f:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0015b25:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0015b2b:	0f 86 b1 00 00 00    	jbe    c0015be2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c0015b31:	fa                   	cli    
c0015b32:	ff 05 70 da 02 c0    	inc    DWORD PTR ds:0xc002da70
c0015b38:	c1 ee 0c             	shr    esi,0xc
c0015b3b:	51                   	push   ecx
c0015b3c:	31 ff                	xor    edi,edi
c0015b3e:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015b45:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015b4b:	6a 00                	push   0x0
c0015b4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b52:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015b55:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015b5b:	e8 e2 db ff ff       	call   c0013742 <VAS::mapOtherVASIn(bool, VAS*)>
c0015b60:	83 c4 10             	add    esp,0x10
c0015b63:	e8 4c a2 ff ff       	call   c000fdb4 <Phys::allocatePage()>
c0015b68:	47                   	inc    edi
c0015b69:	6a 07                	push   0x7
c0015b6b:	53                   	push   ebx
c0015b6c:	50                   	push   eax
c0015b6d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015b71:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015b77:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015b7a:	ff b2 b2 05 00 00    	push   DWORD PTR [edx+0x5b2]
c0015b80:	e8 51 dd ff ff       	call   c00138d6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0015b85:	58                   	pop    eax
c0015b86:	5a                   	pop    edx
c0015b87:	68 07 0c 00 00       	push   0xc07
c0015b8c:	55                   	push   ebp
c0015b8d:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015b93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b97:	50                   	push   eax
c0015b98:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0015b9f:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015ba5:	6a 00                	push   0x0
c0015ba7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015baf:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015bb5:	e8 5e df ff ff       	call   c0013b18 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0015bba:	83 c4 1c             	add    esp,0x1c
c0015bbd:	68 00 10 00 00       	push   0x1000
c0015bc2:	6a 00                	push   0x0
c0015bc4:	53                   	push   ebx
c0015bc5:	e8 26 a9 fe ff       	call   c00004f0 <memset>
c0015bca:	83 c4 10             	add    esp,0x10
c0015bcd:	39 fe                	cmp    esi,edi
c0015bcf:	77 92                	ja     c0015b63 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1fa>
c0015bd1:	f0 ff 0d 70 da 02 c0 	lock dec DWORD PTR ds:0xc002da70
c0015bd8:	83 3d 70 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da70,0x0
c0015bdf:	75 01                	jne    c0015be2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c0015be1:	fb                   	sti    
c0015be2:	83 ec 0c             	sub    esp,0xc
c0015be5:	53                   	push   ebx
c0015be6:	e8 10 d9 ff ff       	call   c00134fb <Virt::freeKernelVirtualPages(unsigned long)>
c0015beb:	83 c4 10             	add    esp,0x10
c0015bee:	b0 01                	mov    al,0x1
c0015bf0:	81 c4 2c 10 00 00    	add    esp,0x102c
c0015bf6:	5b                   	pop    ebx
c0015bf7:	5e                   	pop    esi
c0015bf8:	5f                   	pop    edi
c0015bf9:	5d                   	pop    ebp
c0015bfa:	c3                   	ret    

c0015bfb <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0015bfb:	55                   	push   ebp
c0015bfc:	57                   	push   edi
c0015bfd:	56                   	push   esi
c0015bfe:	53                   	push   ebx
c0015bff:	83 ec 68             	sub    esp,0x68
c0015c02:	68 14 01 00 00       	push   0x114
c0015c07:	e8 57 9b ff ff       	call   c000f763 <malloc>
c0015c0c:	83 c4 0c             	add    esp,0xc
c0015c0f:	89 c6                	mov    esi,eax
c0015c11:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0015c15:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0015c19:	50                   	push   eax
c0015c1a:	e8 6b 25 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0015c1f:	5b                   	pop    ebx
c0015c20:	5f                   	pop    edi
c0015c21:	6a 01                	push   0x1
c0015c23:	56                   	push   esi
c0015c24:	e8 7f 25 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0015c29:	83 c4 10             	add    esp,0x10
c0015c2c:	85 c0                	test   eax,eax
c0015c2e:	0f 85 c6 01 00 00    	jne    c0015dfa <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015c34:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015c3c:	83 ec 0c             	sub    esp,0xc
c0015c3f:	6a 34                	push   0x34
c0015c41:	e8 1d 9b ff ff       	call   c000f763 <malloc>
c0015c46:	59                   	pop    ecx
c0015c47:	89 c3                	mov    ebx,eax
c0015c49:	8d 7c 24 34          	lea    edi,[esp+0x34]
c0015c4d:	8b 06                	mov    eax,DWORD PTR [esi]
c0015c4f:	57                   	push   edi
c0015c50:	53                   	push   ebx
c0015c51:	6a 00                	push   0x0
c0015c53:	6a 34                	push   0x34
c0015c55:	56                   	push   esi
c0015c56:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015c59:	83 c4 20             	add    esp,0x20
c0015c5c:	85 c0                	test   eax,eax
c0015c5e:	0f 85 96 01 00 00    	jne    c0015dfa <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015c64:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0015c6a:	0f 85 8a 01 00 00    	jne    c0015dfa <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015c70:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015c73:	85 c0                	test   eax,eax
c0015c75:	0f 84 7f 01 00 00    	je     c0015dfa <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015c7b:	52                   	push   edx
c0015c7c:	31 d2                	xor    edx,edx
c0015c7e:	52                   	push   edx
c0015c7f:	50                   	push   eax
c0015c80:	56                   	push   esi
c0015c81:	e8 e0 25 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015c86:	83 c4 10             	add    esp,0x10
c0015c89:	85 c0                	test   eax,eax
c0015c8b:	0f 85 69 01 00 00    	jne    c0015dfa <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015c91:	83 ec 0c             	sub    esp,0xc
c0015c94:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015c97:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0015c9b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015c9f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0015ca3:	0f af c2             	imul   eax,edx
c0015ca6:	50                   	push   eax
c0015ca7:	e8 b7 9a ff ff       	call   c000f763 <malloc>
c0015cac:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015cae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015cb2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015cb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015cb9:	31 ff                	xor    edi,edi
c0015cbb:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0015cbf:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0015cc3:	0f af c2             	imul   eax,edx
c0015cc6:	99                   	cdq    
c0015cc7:	52                   	push   edx
c0015cc8:	50                   	push   eax
c0015cc9:	56                   	push   esi
c0015cca:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015ccd:	83 c4 20             	add    esp,0x20
c0015cd0:	0f b7 c7             	movzx  eax,di
c0015cd3:	66 3b 7b 30          	cmp    di,WORD PTR [ebx+0x30]
c0015cd7:	73 71                	jae    c0015d4a <Thr::loadProgramIntoMemory(Process*, char const*)+0x14f>
c0015cd9:	6b c0 28             	imul   eax,eax,0x28
c0015cdc:	55                   	push   ebp
c0015cdd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015ce1:	0f b7 53 32          	movzx  edx,WORD PTR [ebx+0x32]
c0015ce5:	8b 04 01             	mov    eax,DWORD PTR [ecx+eax*1]
c0015ce8:	6b d2 28             	imul   edx,edx,0x28
c0015ceb:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015cef:	31 d2                	xor    edx,edx
c0015cf1:	52                   	push   edx
c0015cf2:	50                   	push   eax
c0015cf3:	56                   	push   esi
c0015cf4:	e8 6d 25 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015cf9:	83 c4 0c             	add    esp,0xc
c0015cfc:	6a 20                	push   0x20
c0015cfe:	6a 00                	push   0x0
c0015d00:	8d 6c 24 3c          	lea    ebp,[esp+0x3c]
c0015d04:	55                   	push   ebp
c0015d05:	e8 e6 a7 fe ff       	call   c00004f0 <memset>
c0015d0a:	58                   	pop    eax
c0015d0b:	8b 06                	mov    eax,DWORD PTR [esi]
c0015d0d:	8d 54 24 38          	lea    edx,[esp+0x38]
c0015d11:	52                   	push   edx
c0015d12:	55                   	push   ebp
c0015d13:	6a 00                	push   0x0
c0015d15:	6a 1f                	push   0x1f
c0015d17:	56                   	push   esi
c0015d18:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015d1b:	83 c4 18             	add    esp,0x18
c0015d1e:	55                   	push   ebp
c0015d1f:	68 a9 52 02 c0       	push   0xc00252a9
c0015d24:	e8 27 aa fe ff       	call   c0000750 <strcmp>
c0015d29:	83 c4 10             	add    esp,0x10
c0015d2c:	85 c0                	test   eax,eax
c0015d2e:	75 17                	jne    c0015d47 <Thr::loadProgramIntoMemory(Process*, char const*)+0x14c>
c0015d30:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0015d34:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c0015d38:	8a 80 76 02 00 00    	mov    al,BYTE PTR [eax+0x276]
c0015d3e:	83 c8 80             	or     eax,0xffffff80
c0015d41:	88 81 76 02 00 00    	mov    BYTE PTR [ecx+0x276],al
c0015d47:	47                   	inc    edi
c0015d48:	eb 86                	jmp    c0015cd0 <Thr::loadProgramIntoMemory(Process*, char const*)+0xd5>
c0015d4a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0015d4d:	85 c0                	test   eax,eax
c0015d4f:	0f 84 a5 00 00 00    	je     c0015dfa <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015d55:	31 d2                	xor    edx,edx
c0015d57:	57                   	push   edi
c0015d58:	52                   	push   edx
c0015d59:	50                   	push   eax
c0015d5a:	56                   	push   esi
c0015d5b:	e8 06 25 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015d60:	83 c4 10             	add    esp,0x10
c0015d63:	85 c0                	test   eax,eax
c0015d65:	0f 85 8f 00 00 00    	jne    c0015dfa <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015d6b:	83 ec 0c             	sub    esp,0xc
c0015d6e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0015d72:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0015d76:	31 ed                	xor    ebp,ebp
c0015d78:	0f af c2             	imul   eax,edx
c0015d7b:	50                   	push   eax
c0015d7c:	e8 e2 99 ff ff       	call   c000f763 <malloc>
c0015d81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015d85:	59                   	pop    ecx
c0015d86:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015d88:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015d8c:	50                   	push   eax
c0015d8d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015d91:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0015d95:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0015d99:	0f af c2             	imul   eax,edx
c0015d9c:	99                   	cdq    
c0015d9d:	52                   	push   edx
c0015d9e:	50                   	push   eax
c0015d9f:	56                   	push   esi
c0015da0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015da3:	83 c4 20             	add    esp,0x20
c0015da6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015dae:	0f b7 fd             	movzx  edi,bp
c0015db1:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0015db5:	0f 83 80 00 00 00    	jae    c0015e3b <Thr::loadProgramIntoMemory(Process*, char const*)+0x240>
c0015dbb:	c1 e7 05             	shl    edi,0x5
c0015dbe:	03 7c 24 10          	add    edi,DWORD PTR [esp+0x10]
c0015dc2:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0015dc5:	75 6e                	jne    c0015e35 <Thr::loadProgramIntoMemory(Process*, char const*)+0x23a>
c0015dc7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0015dca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015dce:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0015dd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015dd5:	52                   	push   edx
c0015dd6:	31 d2                	xor    edx,edx
c0015dd8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0015ddb:	52                   	push   edx
c0015ddc:	50                   	push   eax
c0015ddd:	56                   	push   esi
c0015dde:	e8 83 24 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015de3:	83 c4 10             	add    esp,0x10
c0015de6:	85 c0                	test   eax,eax
c0015de8:	74 17                	je     c0015e01 <Thr::loadProgramIntoMemory(Process*, char const*)+0x206>
c0015dea:	83 ec 0c             	sub    esp,0xc
c0015ded:	68 b8 52 02 c0       	push   0xc00252b8
c0015df2:	e8 85 11 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015df7:	83 c4 10             	add    esp,0x10
c0015dfa:	31 c0                	xor    eax,eax
c0015dfc:	e9 8a 00 00 00       	jmp    c0015e8b <Thr::loadProgramIntoMemory(Process*, char const*)+0x290>
c0015e01:	83 ec 0c             	sub    esp,0xc
c0015e04:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015e07:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0015e0a:	50                   	push   eax
c0015e0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015e0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e13:	56                   	push   esi
c0015e14:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0015e1b:	e8 49 fb ff ff       	call   c0015969 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0015e20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015e24:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0015e28:	83 c4 20             	add    esp,0x20
c0015e2b:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0015e2f:	73 04                	jae    c0015e35 <Thr::loadProgramIntoMemory(Process*, char const*)+0x23a>
c0015e31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e35:	45                   	inc    ebp
c0015e36:	e9 73 ff ff ff       	jmp    c0015dae <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b3>
c0015e3b:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c0015e3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015e43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e47:	89 91 ae 05 00 00    	mov    DWORD PTR [ecx+0x5ae],edx
c0015e4d:	83 ec 0c             	sub    esp,0xc
c0015e50:	8b 91 b2 05 00 00    	mov    edx,DWORD PTR [ecx+0x5b2]
c0015e56:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015e5b:	05 00 10 00 00       	add    eax,0x1000
c0015e60:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015e63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015e67:	e8 07 99 ff ff       	call   c000f773 <free>
c0015e6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e6f:	e8 ff 98 ff ff       	call   c000f773 <free>
c0015e74:	58                   	pop    eax
c0015e75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e79:	e8 f5 98 ff ff       	call   c000f773 <free>
c0015e7e:	89 34 24             	mov    DWORD PTR [esp],esi
c0015e81:	e8 80 23 ff ff       	call   c0008206 <File::close()>
c0015e86:	83 c4 10             	add    esp,0x10
c0015e89:	b0 01                	mov    al,0x1
c0015e8b:	83 c4 5c             	add    esp,0x5c
c0015e8e:	5b                   	pop    ebx
c0015e8f:	5e                   	pop    esi
c0015e90:	5f                   	pop    edi
c0015e91:	5d                   	pop    ebp
c0015e92:	c3                   	ret    

c0015e93 <Thr::runtimeReferenceHelper()>:
c0015e93:	83 ec 18             	sub    esp,0x18
c0015e96:	68 c0 52 02 c0       	push   0xc00252c0
c0015e9b:	e8 dc 10 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015ea0:	fa                   	cli    
c0015ea1:	83 c4 10             	add    esp,0x10
c0015ea4:	eb fe                	jmp    c0015ea4 <Thr::runtimeReferenceHelper()+0x11>

c0015ea6 <Thr::getAddressOfKernelSymbol(char const*)>:
c0015ea6:	57                   	push   edi
c0015ea7:	56                   	push   esi
c0015ea8:	53                   	push   ebx
c0015ea9:	31 db                	xor    ebx,ebx
c0015eab:	39 1d 40 da 02 c0    	cmp    DWORD PTR ds:0xc002da40,ebx
c0015eb1:	7e 3c                	jle    c0015eef <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0015eb3:	8b 34 9d c0 d9 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd2640]
c0015eba:	31 ff                	xor    edi,edi
c0015ebc:	39 3c 9d c0 d8 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd2740],edi
c0015ec3:	7e 27                	jle    c0015eec <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0015ec5:	50                   	push   eax
c0015ec6:	50                   	push   eax
c0015ec7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015ecb:	8b 06                	mov    eax,DWORD PTR [esi]
c0015ecd:	03 04 9d 40 d9 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd26c0]
c0015ed4:	50                   	push   eax
c0015ed5:	e8 76 a8 fe ff       	call   c0000750 <strcmp>
c0015eda:	83 c4 10             	add    esp,0x10
c0015edd:	85 c0                	test   eax,eax
c0015edf:	75 05                	jne    c0015ee6 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0015ee1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0015ee4:	eb 0b                	jmp    c0015ef1 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0015ee6:	83 c6 10             	add    esi,0x10
c0015ee9:	47                   	inc    edi
c0015eea:	eb d0                	jmp    c0015ebc <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0015eec:	43                   	inc    ebx
c0015eed:	eb bc                	jmp    c0015eab <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0015eef:	31 c0                	xor    eax,eax
c0015ef1:	5b                   	pop    ebx
c0015ef2:	5e                   	pop    esi
c0015ef3:	5f                   	pop    edi
c0015ef4:	c3                   	ret    

c0015ef5 <Thr::loadKernelSymbolTable(char const*)>:
c0015ef5:	55                   	push   ebp
c0015ef6:	57                   	push   edi
c0015ef7:	56                   	push   esi
c0015ef8:	53                   	push   ebx
c0015ef9:	83 ec 68             	sub    esp,0x68
c0015efc:	8b 35 98 da 02 c0    	mov    esi,DWORD PTR ds:0xc002da98
c0015f02:	68 14 01 00 00       	push   0x114
c0015f07:	e8 57 98 ff ff       	call   c000f763 <malloc>
c0015f0c:	83 c4 0c             	add    esp,0xc
c0015f0f:	89 c3                	mov    ebx,eax
c0015f11:	56                   	push   esi
c0015f12:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015f16:	50                   	push   eax
c0015f17:	e8 6e 22 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0015f1c:	5e                   	pop    esi
c0015f1d:	5f                   	pop    edi
c0015f1e:	6a 01                	push   0x1
c0015f20:	53                   	push   ebx
c0015f21:	e8 82 22 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0015f26:	83 c4 10             	add    esp,0x10
c0015f29:	85 c0                	test   eax,eax
c0015f2b:	74 0a                	je     c0015f37 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0015f2d:	83 ec 0c             	sub    esp,0xc
c0015f30:	68 e2 52 02 c0       	push   0xc00252e2
c0015f35:	eb 34                	jmp    c0015f6b <Thr::loadKernelSymbolTable(char const*)+0x76>
c0015f37:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015f3f:	83 ec 0c             	sub    esp,0xc
c0015f42:	6a 34                	push   0x34
c0015f44:	e8 1a 98 ff ff       	call   c000f763 <malloc>
c0015f49:	59                   	pop    ecx
c0015f4a:	89 c7                	mov    edi,eax
c0015f4c:	8d 74 24 34          	lea    esi,[esp+0x34]
c0015f50:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f52:	56                   	push   esi
c0015f53:	57                   	push   edi
c0015f54:	6a 00                	push   0x0
c0015f56:	6a 34                	push   0x34
c0015f58:	53                   	push   ebx
c0015f59:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015f5c:	83 c4 20             	add    esp,0x20
c0015f5f:	85 c0                	test   eax,eax
c0015f61:	74 17                	je     c0015f7a <Thr::loadKernelSymbolTable(char const*)+0x85>
c0015f63:	83 ec 0c             	sub    esp,0xc
c0015f66:	68 f9 52 02 c0       	push   0xc00252f9
c0015f6b:	e8 50 9c ff ff       	call   c000fbc0 <KePanic(char const*)>
c0015f70:	83 c4 10             	add    esp,0x10
c0015f73:	31 c0                	xor    eax,eax
c0015f75:	e9 31 02 00 00       	jmp    c00161ab <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0015f7a:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015f80:	75 e1                	jne    c0015f63 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015f82:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015f85:	85 c0                	test   eax,eax
c0015f87:	74 da                	je     c0015f63 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015f89:	52                   	push   edx
c0015f8a:	31 d2                	xor    edx,edx
c0015f8c:	52                   	push   edx
c0015f8d:	50                   	push   eax
c0015f8e:	53                   	push   ebx
c0015f8f:	e8 d2 22 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015f94:	83 c4 10             	add    esp,0x10
c0015f97:	85 c0                	test   eax,eax
c0015f99:	75 c8                	jne    c0015f63 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015f9b:	83 ec 0c             	sub    esp,0xc
c0015f9e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015fa2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015fa6:	31 ed                	xor    ebp,ebp
c0015fa8:	0f af c2             	imul   eax,edx
c0015fab:	50                   	push   eax
c0015fac:	e8 b2 97 ff ff       	call   c000f763 <malloc>
c0015fb1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015fb3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015fb7:	89 34 24             	mov    DWORD PTR [esp],esi
c0015fba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015fbe:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015fc2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015fc6:	0f af c2             	imul   eax,edx
c0015fc9:	99                   	cdq    
c0015fca:	52                   	push   edx
c0015fcb:	50                   	push   eax
c0015fcc:	53                   	push   ebx
c0015fcd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015fd0:	83 c4 20             	add    esp,0x20
c0015fd3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015fdb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015fe3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015feb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015ff3:	0f b7 f5             	movzx  esi,bp
c0015ff6:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0015ffa:	0f 83 a7 00 00 00    	jae    c00160a7 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0016000:	6b f6 28             	imul   esi,esi,0x28
c0016003:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016007:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001600a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001600e:	50                   	push   eax
c001600f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016013:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016017:	8b 16                	mov    edx,DWORD PTR [esi]
c0016019:	6b c0 28             	imul   eax,eax,0x28
c001601c:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016020:	89 d0                	mov    eax,edx
c0016022:	31 d2                	xor    edx,edx
c0016024:	52                   	push   edx
c0016025:	50                   	push   eax
c0016026:	53                   	push   ebx
c0016027:	e8 3a 22 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c001602c:	83 c4 0c             	add    esp,0xc
c001602f:	6a 20                	push   0x20
c0016031:	6a 00                	push   0x0
c0016033:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016037:	52                   	push   edx
c0016038:	e8 b3 a4 fe ff       	call   c00004f0 <memset>
c001603d:	58                   	pop    eax
c001603e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016040:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016044:	51                   	push   ecx
c0016045:	8d 54 24 40          	lea    edx,[esp+0x40]
c0016049:	52                   	push   edx
c001604a:	6a 00                	push   0x0
c001604c:	6a 1f                	push   0x1f
c001604e:	53                   	push   ebx
c001604f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016052:	83 c4 18             	add    esp,0x18
c0016055:	68 10 53 02 c0       	push   0xc0025310
c001605a:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001605e:	52                   	push   edx
c001605f:	e8 ec a6 fe ff       	call   c0000750 <strcmp>
c0016064:	83 c4 10             	add    esp,0x10
c0016067:	85 c0                	test   eax,eax
c0016069:	75 0f                	jne    c001607a <Thr::loadKernelSymbolTable(char const*)+0x185>
c001606b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001606e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016072:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001607a:	50                   	push   eax
c001607b:	50                   	push   eax
c001607c:	68 18 53 02 c0       	push   0xc0025318
c0016081:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016085:	50                   	push   eax
c0016086:	e8 c5 a6 fe ff       	call   c0000750 <strcmp>
c001608b:	83 c4 10             	add    esp,0x10
c001608e:	85 c0                	test   eax,eax
c0016090:	75 0f                	jne    c00160a1 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0016092:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016095:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016099:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001609d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00160a1:	45                   	inc    ebp
c00160a2:	e9 4c ff ff ff       	jmp    c0015ff3 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00160a7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00160ac:	75 10                	jne    c00160be <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00160ae:	83 ec 0c             	sub    esp,0xc
c00160b1:	68 20 53 02 c0       	push   0xc0025320
c00160b6:	e8 05 9b ff ff       	call   c000fbc0 <KePanic(char const*)>
c00160bb:	83 c4 10             	add    esp,0x10
c00160be:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00160c3:	75 10                	jne    c00160d5 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00160c5:	83 ec 0c             	sub    esp,0xc
c00160c8:	68 20 53 02 c0       	push   0xc0025320
c00160cd:	e8 ee 9a ff ff       	call   c000fbc0 <KePanic(char const*)>
c00160d2:	83 c4 10             	add    esp,0x10
c00160d5:	31 d2                	xor    edx,edx
c00160d7:	50                   	push   eax
c00160d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160dc:	52                   	push   edx
c00160dd:	50                   	push   eax
c00160de:	53                   	push   ebx
c00160df:	e8 82 21 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c00160e4:	5a                   	pop    edx
c00160e5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00160e9:	e8 75 96 ff ff       	call   c000f763 <malloc>
c00160ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00160f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00160f6:	31 c9                	xor    ecx,ecx
c00160f8:	5e                   	pop    esi
c00160f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00160fb:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00160ff:	55                   	push   ebp
c0016100:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016104:	51                   	push   ecx
c0016105:	52                   	push   edx
c0016106:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001610a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001610e:	53                   	push   ebx
c001610f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016112:	83 c4 14             	add    esp,0x14
c0016115:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016119:	e8 45 96 ff ff       	call   c000f763 <malloc>
c001611e:	89 c6                	mov    esi,eax
c0016120:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016122:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016125:	56                   	push   esi
c0016126:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001612a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001612e:	51                   	push   ecx
c001612f:	52                   	push   edx
c0016130:	53                   	push   ebx
c0016131:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016134:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016138:	8b 15 40 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da40
c001613e:	83 c4 1c             	add    esp,0x1c
c0016141:	c1 e8 04             	shr    eax,0x4
c0016144:	89 04 95 c0 d8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2740],eax
c001614b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001614f:	31 d2                	xor    edx,edx
c0016151:	52                   	push   edx
c0016152:	50                   	push   eax
c0016153:	53                   	push   ebx
c0016154:	e8 0d 21 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0016159:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001615b:	31 d2                	xor    edx,edx
c001615d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016160:	56                   	push   esi
c0016161:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016165:	52                   	push   edx
c0016166:	50                   	push   eax
c0016167:	53                   	push   ebx
c0016168:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001616b:	83 c4 14             	add    esp,0x14
c001616e:	53                   	push   ebx
c001616f:	e8 92 20 ff ff       	call   c0008206 <File::close()>
c0016174:	5d                   	pop    ebp
c0016175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016179:	e8 f5 95 ff ff       	call   c000f773 <free>
c001617e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016181:	e8 ed 95 ff ff       	call   c000f773 <free>
c0016186:	a1 40 da 02 c0       	mov    eax,ds:0xc002da40
c001618b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001618f:	8d 50 01             	lea    edx,[eax+0x1]
c0016192:	89 0c 85 c0 d9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2640],ecx
c0016199:	89 34 85 40 d9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd26c0],esi
c00161a0:	89 15 40 da 02 c0    	mov    DWORD PTR ds:0xc002da40,edx
c00161a6:	83 c4 10             	add    esp,0x10
c00161a9:	b0 01                	mov    al,0x1
c00161ab:	83 c4 5c             	add    esp,0x5c
c00161ae:	5b                   	pop    ebx
c00161af:	5e                   	pop    esi
c00161b0:	5f                   	pop    edi
c00161b1:	5d                   	pop    ebp
c00161b2:	c3                   	ret    

c00161b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00161b3:	55                   	push   ebp
c00161b4:	57                   	push   edi
c00161b5:	56                   	push   esi
c00161b6:	53                   	push   ebx
c00161b7:	81 ec 68 03 00 00    	sub    esp,0x368
c00161bd:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00161c4:	8b 1d 98 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da98
c00161ca:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00161ce:	68 14 01 00 00       	push   0x114
c00161d3:	e8 8b 95 ff ff       	call   c000f763 <malloc>
c00161d8:	83 c4 0c             	add    esp,0xc
c00161db:	89 c5                	mov    ebp,eax
c00161dd:	53                   	push   ebx
c00161de:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00161e5:	50                   	push   eax
c00161e6:	e8 9f 1f ff ff       	call   c000818a <File::File(char const*, Process*)>
c00161eb:	5e                   	pop    esi
c00161ec:	5f                   	pop    edi
c00161ed:	6a 01                	push   0x1
c00161ef:	55                   	push   ebp
c00161f0:	e8 b3 1f ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c00161f5:	83 c4 10             	add    esp,0x10
c00161f8:	85 c0                	test   eax,eax
c00161fa:	0f 85 b9 06 00 00    	jne    c00168b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0016200:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016208:	83 ec 0c             	sub    esp,0xc
c001620b:	6a 34                	push   0x34
c001620d:	e8 51 95 ff ff       	call   c000f763 <malloc>
c0016212:	5b                   	pop    ebx
c0016213:	89 c7                	mov    edi,eax
c0016215:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016219:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001621c:	53                   	push   ebx
c001621d:	57                   	push   edi
c001621e:	6a 00                	push   0x0
c0016220:	6a 34                	push   0x34
c0016222:	55                   	push   ebp
c0016223:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016226:	83 c4 20             	add    esp,0x20
c0016229:	85 c0                	test   eax,eax
c001622b:	0f 85 88 06 00 00    	jne    c00168b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0016231:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016237:	0f 85 7c 06 00 00    	jne    c00168b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c001623d:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016240:	85 c0                	test   eax,eax
c0016242:	0f 84 71 06 00 00    	je     c00168b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0016248:	31 d2                	xor    edx,edx
c001624a:	51                   	push   ecx
c001624b:	52                   	push   edx
c001624c:	50                   	push   eax
c001624d:	55                   	push   ebp
c001624e:	e8 13 20 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0016253:	83 c4 10             	add    esp,0x10
c0016256:	85 c0                	test   eax,eax
c0016258:	0f 85 5b 06 00 00    	jne    c00168b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c001625e:	83 ec 0c             	sub    esp,0xc
c0016261:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0016264:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001626c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016270:	0f af c2             	imul   eax,edx
c0016273:	50                   	push   eax
c0016274:	e8 ea 94 ff ff       	call   c000f763 <malloc>
c0016279:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001627c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016280:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016283:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016287:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001628b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001628f:	0f af c2             	imul   eax,edx
c0016292:	99                   	cdq    
c0016293:	52                   	push   edx
c0016294:	50                   	push   eax
c0016295:	55                   	push   ebp
c0016296:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016299:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001629c:	83 c4 20             	add    esp,0x20
c001629f:	85 c0                	test   eax,eax
c00162a1:	0f 84 12 06 00 00    	je     c00168b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c00162a7:	52                   	push   edx
c00162a8:	31 d2                	xor    edx,edx
c00162aa:	52                   	push   edx
c00162ab:	50                   	push   eax
c00162ac:	55                   	push   ebp
c00162ad:	e8 b4 1f ff ff       	call   c0008266 <File::seek(unsigned long long)>
c00162b2:	83 c4 10             	add    esp,0x10
c00162b5:	85 c0                	test   eax,eax
c00162b7:	0f 85 fc 05 00 00    	jne    c00168b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c00162bd:	83 ec 0c             	sub    esp,0xc
c00162c0:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00162c4:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00162c8:	31 f6                	xor    esi,esi
c00162ca:	0f af c2             	imul   eax,edx
c00162cd:	50                   	push   eax
c00162ce:	e8 90 94 ff ff       	call   c000f763 <malloc>
c00162d3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00162d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00162da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00162dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162e1:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00162e5:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00162e9:	0f af c2             	imul   eax,edx
c00162ec:	99                   	cdq    
c00162ed:	52                   	push   edx
c00162ee:	50                   	push   eax
c00162ef:	55                   	push   ebp
c00162f0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00162f3:	83 c4 20             	add    esp,0x20
c00162f6:	0f b7 de             	movzx  ebx,si
c00162f9:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c00162fd:	0f 83 85 00 00 00    	jae    c0016388 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d5>
c0016303:	c1 e3 05             	shl    ebx,0x5
c0016306:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c001630a:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001630d:	75 73                	jne    c0016382 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1cf>
c001630f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016312:	31 d2                	xor    edx,edx
c0016314:	89 04 24             	mov    DWORD PTR [esp],eax
c0016317:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001631a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001631e:	50                   	push   eax
c001631f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016322:	52                   	push   edx
c0016323:	50                   	push   eax
c0016324:	55                   	push   ebp
c0016325:	e8 3c 1f ff ff       	call   c0008266 <File::seek(unsigned long long)>
c001632a:	83 c4 10             	add    esp,0x10
c001632d:	85 c0                	test   eax,eax
c001632f:	0f 85 84 05 00 00    	jne    c00168b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0016335:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001633c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001633f:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0016343:	31 d2                	xor    edx,edx
c0016345:	03 04 24             	add    eax,DWORD PTR [esp]
c0016348:	83 ec 0c             	sub    esp,0xc
c001634b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001634f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016356:	50                   	push   eax
c0016357:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001635b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001635f:	52                   	push   edx
c0016360:	50                   	push   eax
c0016361:	55                   	push   ebp
c0016362:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016365:	83 c4 1c             	add    esp,0x1c
c0016368:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001636b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001636e:	50                   	push   eax
c001636f:	6a 00                	push   0x0
c0016371:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016375:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0016379:	50                   	push   eax
c001637a:	e8 71 a1 fe ff       	call   c00004f0 <memset>
c001637f:	83 c4 10             	add    esp,0x10
c0016382:	46                   	inc    esi
c0016383:	e9 6e ff ff ff       	jmp    c00162f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0016388:	31 db                	xor    ebx,ebx
c001638a:	50                   	push   eax
c001638b:	68 00 01 00 00       	push   0x100
c0016390:	6a 00                	push   0x0
c0016392:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016396:	50                   	push   eax
c0016397:	e8 54 a1 fe ff       	call   c00004f0 <memset>
c001639c:	83 c4 0c             	add    esp,0xc
c001639f:	68 00 01 00 00       	push   0x100
c00163a4:	6a 00                	push   0x0
c00163a6:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00163ad:	50                   	push   eax
c00163ae:	e8 3d a1 fe ff       	call   c00004f0 <memset>
c00163b3:	83 c4 10             	add    esp,0x10
c00163b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00163bd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00163c5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00163cd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00163d5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00163dd:	0f b7 f3             	movzx  esi,bx
c00163e0:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c00163e4:	0f 83 27 01 00 00    	jae    c0016511 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x35e>
c00163ea:	6b f6 28             	imul   esi,esi,0x28
c00163ed:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c00163f1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00163f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00163f8:	50                   	push   eax
c00163f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00163fd:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0016401:	8b 06                	mov    eax,DWORD PTR [esi]
c0016403:	6b d2 28             	imul   edx,edx,0x28
c0016406:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001640a:	31 d2                	xor    edx,edx
c001640c:	52                   	push   edx
c001640d:	50                   	push   eax
c001640e:	55                   	push   ebp
c001640f:	e8 52 1e ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0016414:	83 c4 0c             	add    esp,0xc
c0016417:	6a 20                	push   0x20
c0016419:	6a 00                	push   0x0
c001641b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016422:	51                   	push   ecx
c0016423:	e8 c8 a0 fe ff       	call   c00004f0 <memset>
c0016428:	58                   	pop    eax
c0016429:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001642c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0016430:	52                   	push   edx
c0016431:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0016438:	51                   	push   ecx
c0016439:	6a 00                	push   0x0
c001643b:	6a 1f                	push   0x1f
c001643d:	55                   	push   ebp
c001643e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016441:	83 c4 1c             	add    esp,0x1c
c0016444:	6a 09                	push   0x9
c0016446:	68 3a 53 02 c0       	push   0xc002533a
c001644b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016452:	51                   	push   ecx
c0016453:	e8 28 9f fe ff       	call   c0000380 <memcmp>
c0016458:	83 c4 10             	add    esp,0x10
c001645b:	85 c0                	test   eax,eax
c001645d:	75 1e                	jne    c001647d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2ca>
c001645f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016462:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016466:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001646a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001646d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016470:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0016477:	89 d0                	mov    eax,edx
c0016479:	40                   	inc    eax
c001647a:	89 04 24             	mov    DWORD PTR [esp],eax
c001647d:	51                   	push   ecx
c001647e:	6a 09                	push   0x9
c0016480:	68 44 53 02 c0       	push   0xc0025344
c0016485:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001648c:	50                   	push   eax
c001648d:	e8 ee 9e fe ff       	call   c0000380 <memcmp>
c0016492:	83 c4 10             	add    esp,0x10
c0016495:	85 c0                	test   eax,eax
c0016497:	75 1e                	jne    c00164b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x304>
c0016499:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001649c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00164a0:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00164a4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00164a7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00164aa:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00164b1:	89 d0                	mov    eax,edx
c00164b3:	40                   	inc    eax
c00164b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00164b7:	52                   	push   edx
c00164b8:	52                   	push   edx
c00164b9:	68 10 53 02 c0       	push   0xc0025310
c00164be:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00164c5:	50                   	push   eax
c00164c6:	e8 85 a2 fe ff       	call   c0000750 <strcmp>
c00164cb:	83 c4 10             	add    esp,0x10
c00164ce:	85 c0                	test   eax,eax
c00164d0:	75 0f                	jne    c00164e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32e>
c00164d2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00164d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00164d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00164dd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00164e1:	50                   	push   eax
c00164e2:	50                   	push   eax
c00164e3:	68 18 53 02 c0       	push   0xc0025318
c00164e8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00164ef:	50                   	push   eax
c00164f0:	e8 5b a2 fe ff       	call   c0000750 <strcmp>
c00164f5:	83 c4 10             	add    esp,0x10
c00164f8:	85 c0                	test   eax,eax
c00164fa:	75 0f                	jne    c001650b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x358>
c00164fc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00164ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016503:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016507:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001650b:	43                   	inc    ebx
c001650c:	e9 cc fe ff ff       	jmp    c00163dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22a>
c0016511:	31 d2                	xor    edx,edx
c0016513:	50                   	push   eax
c0016514:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016518:	52                   	push   edx
c0016519:	50                   	push   eax
c001651a:	55                   	push   ebp
c001651b:	e8 46 1d ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0016520:	58                   	pop    eax
c0016521:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016525:	e8 39 92 ff ff       	call   c000f763 <malloc>
c001652a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001652d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0016531:	31 d2                	xor    edx,edx
c0016533:	58                   	pop    eax
c0016534:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016538:	53                   	push   ebx
c0016539:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001653d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016541:	52                   	push   edx
c0016542:	50                   	push   eax
c0016543:	55                   	push   ebp
c0016544:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016547:	83 c4 14             	add    esp,0x14
c001654a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001654e:	e8 10 92 ff ff       	call   c000f763 <malloc>
c0016553:	31 d2                	xor    edx,edx
c0016555:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016559:	83 c4 0c             	add    esp,0xc
c001655c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016560:	52                   	push   edx
c0016561:	50                   	push   eax
c0016562:	55                   	push   ebp
c0016563:	e8 fe 1c ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0016568:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001656b:	31 d2                	xor    edx,edx
c001656d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016570:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016574:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016578:	52                   	push   edx
c0016579:	50                   	push   eax
c001657a:	55                   	push   ebp
c001657b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001657e:	83 c4 20             	add    esp,0x20
c0016581:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0016586:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001658e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016592:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016596:	39 34 24             	cmp    DWORD PTR [esp],esi
c0016599:	0f 84 1e 03 00 00    	je     c00168bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x70a>
c001659f:	8b 84 b4 50 01 00 00 	mov    eax,DWORD PTR [esp+esi*4+0x150]
c00165a6:	31 d2                	xor    edx,edx
c00165a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00165ac:	c1 e8 03             	shr    eax,0x3
c00165af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00165b3:	56                   	push   esi
c00165b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00165b8:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00165bc:	52                   	push   edx
c00165bd:	50                   	push   eax
c00165be:	55                   	push   ebp
c00165bf:	e8 a2 1c ff ff       	call   c0008266 <File::seek(unsigned long long)>
c00165c4:	58                   	pop    eax
c00165c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165c9:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00165d0:	e8 8e 91 ff ff       	call   c000f763 <malloc>
c00165d5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00165d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00165dc:	31 d2                	xor    edx,edx
c00165de:	58                   	pop    eax
c00165df:	8d 44 24 58          	lea    eax,[esp+0x58]
c00165e3:	50                   	push   eax
c00165e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00165e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00165ec:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00165f3:	52                   	push   edx
c00165f4:	50                   	push   eax
c00165f5:	55                   	push   ebp
c00165f6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00165f9:	83 c4 20             	add    esp,0x20
c00165fc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016604:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0016608:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c001660c:	0f 8d 8f 02 00 00    	jge    c00168a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ee>
c0016612:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016616:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001661a:	31 c9                	xor    ecx,ecx
c001661c:	8b 04 f0             	mov    eax,DWORD PTR [eax+esi*8]
c001661f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016623:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016627:	8b 44 f0 04          	mov    eax,DWORD PTR [eax+esi*8+0x4]
c001662b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001662f:	c1 e8 08             	shr    eax,0x8
c0016632:	89 c3                	mov    ebx,eax
c0016634:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016638:	c1 e3 04             	shl    ebx,0x4
c001663b:	03 5c 24 30          	add    ebx,DWORD PTR [esp+0x30]
c001663f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0016642:	85 d2                	test   edx,edx
c0016644:	0f 85 97 00 00 00    	jne    c00166e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52e>
c001664a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001664e:	83 ec 0c             	sub    esp,0xc
c0016651:	03 33                	add    esi,DWORD PTR [ebx]
c0016653:	56                   	push   esi
c0016654:	e8 4d f8 ff ff       	call   c0015ea6 <Thr::getAddressOfKernelSymbol(char const*)>
c0016659:	83 c4 10             	add    esp,0x10
c001665c:	89 c2                	mov    edx,eax
c001665e:	b1 01                	mov    cl,0x1
c0016660:	85 c0                	test   eax,eax
c0016662:	75 7d                	jne    c00166e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52e>
c0016664:	88 4c 24 3c          	mov    BYTE PTR [esp+0x3c],cl
c0016668:	83 ec 0c             	sub    esp,0xc
c001666b:	56                   	push   esi
c001666c:	e8 6b a0 ff ff       	call   c00106dc <KeResolveCompatibilitySymbol(char*)>
c0016671:	83 c4 10             	add    esp,0x10
c0016674:	89 c2                	mov    edx,eax
c0016676:	85 c0                	test   eax,eax
c0016678:	8a 4c 24 3c          	mov    cl,BYTE PTR [esp+0x3c]
c001667c:	75 63                	jne    c00166e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52e>
c001667e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016682:	51                   	push   ecx
c0016683:	51                   	push   ecx
c0016684:	56                   	push   esi
c0016685:	68 4e 53 02 c0       	push   0xc002534e
c001668a:	e8 ed 08 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001668f:	5e                   	pop    esi
c0016690:	58                   	pop    eax
c0016691:	68 68 53 02 c0       	push   0xc0025368
c0016696:	8d b4 24 5c 02 00 00 	lea    esi,[esp+0x25c]
c001669d:	56                   	push   esi
c001669e:	e8 9d 9f fe ff       	call   c0000640 <strcpy>
c00166a3:	58                   	pop    eax
c00166a4:	5a                   	pop    edx
c00166a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00166a9:	03 03                	add    eax,DWORD PTR [ebx]
c00166ab:	50                   	push   eax
c00166ac:	56                   	push   esi
c00166ad:	e8 8e a1 fe ff       	call   c0000840 <strcat>
c00166b2:	59                   	pop    ecx
c00166b3:	5b                   	pop    ebx
c00166b4:	68 02 54 02 c0       	push   0xc0025402
c00166b9:	56                   	push   esi
c00166ba:	e8 81 a1 fe ff       	call   c0000840 <strcat>
c00166bf:	83 c4 10             	add    esp,0x10
c00166c2:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00166c7:	0f 84 8e 01 00 00    	je     c001685b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00166cd:	83 ec 0c             	sub    esp,0xc
c00166d0:	56                   	push   esi
c00166d1:	e8 ea 94 ff ff       	call   c000fbc0 <KePanic(char const*)>
c00166d6:	83 c4 10             	add    esp,0x10
c00166d9:	8a 4c 24 37          	mov    cl,BYTE PTR [esp+0x37]
c00166dd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00166e1:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00166e6:	83 f8 01             	cmp    eax,0x1
c00166e9:	0f 85 ab 00 00 00    	jne    c001679a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e7>
c00166ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166f3:	8b 9c 24 74 03 00 00 	mov    ebx,DWORD PTR [esp+0x374]
c00166fa:	2b 5c 24 1c          	sub    ebx,DWORD PTR [esp+0x1c]
c00166fe:	01 d8                	add    eax,ebx
c0016700:	81 7c 24 14 01 04 00 00 	cmp    DWORD PTR [esp+0x14],0x401
c0016708:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001670c:	0f 94 44 24 3c       	sete   BYTE PTR [esp+0x3c]
c0016711:	81 7c 24 14 01 01 00 00 	cmp    DWORD PTR [esp+0x14],0x101
c0016719:	0f 94 c0             	sete   al
c001671c:	89 c6                	mov    esi,eax
c001671e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016722:	0b 74 24 3c          	or     esi,DWORD PTR [esp+0x3c]
c0016726:	8b 00                	mov    eax,DWORD PTR [eax]
c0016728:	84 c9                	test   cl,cl
c001672a:	89 f1                	mov    ecx,esi
c001672c:	0f b6 f1             	movzx  esi,cl
c001672f:	74 39                	je     c001676a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b7>
c0016731:	8d 1c 02             	lea    ebx,[edx+eax*1]
c0016734:	85 f6                	test   esi,esi
c0016736:	75 15                	jne    c001674d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59a>
c0016738:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001673c:	66 83 f8 0c          	cmp    ax,0xc
c0016740:	76 05                	jbe    c0016747 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x594>
c0016742:	b8 0c 00 00 00       	mov    eax,0xc
c0016747:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c001674b:	76 42                	jbe    c001678f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5dc>
c001674d:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0016752:	0f 84 03 01 00 00    	je     c001685b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0016758:	83 ec 0c             	sub    esp,0xc
c001675b:	68 7f 53 02 c0       	push   0xc002537f
c0016760:	e8 5b 94 ff ff       	call   c000fbc0 <KePanic(char const*)>
c0016765:	83 c4 10             	add    esp,0x10
c0016768:	eb 25                	jmp    c001678f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5dc>
c001676a:	01 c3                	add    ebx,eax
c001676c:	85 f6                	test   esi,esi
c001676e:	89 d8                	mov    eax,ebx
c0016770:	75 0d                	jne    c001677f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0016772:	0f b7 4f 30          	movzx  ecx,WORD PTR [edi+0x30]
c0016776:	3b 4c 24 24          	cmp    ecx,DWORD PTR [esp+0x24]
c001677a:	77 03                	ja     c001677f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001677c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c001677f:	8d 90 00 00 00 28    	lea    edx,[eax+0x28000000]
c0016785:	81 fa ff ff ff 00    	cmp    edx,0xffffff
c001678b:	76 02                	jbe    c001678f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5dc>
c001678d:	89 c3                	mov    ebx,eax
c001678f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016793:	89 18                	mov    DWORD PTR [eax],ebx
c0016795:	e9 fe 00 00 00       	jmp    c0016898 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e5>
c001679a:	83 f8 02             	cmp    eax,0x2
c001679d:	0f 85 8f 00 00 00    	jne    c0016832 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c00167a3:	8b 9c 24 74 03 00 00 	mov    ebx,DWORD PTR [esp+0x374]
c00167aa:	2b 5c 24 1c          	sub    ebx,DWORD PTR [esp+0x1c]
c00167ae:	03 5c 24 20          	add    ebx,DWORD PTR [esp+0x20]
c00167b2:	81 7c 24 14 01 04 00 00 	cmp    DWORD PTR [esp+0x14],0x401
c00167ba:	74 21                	je     c00167dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c00167bc:	81 7c 24 14 01 01 00 00 	cmp    DWORD PTR [esp+0x14],0x101
c00167c4:	74 17                	je     c00167dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c00167c6:	0f b7 77 30          	movzx  esi,WORD PTR [edi+0x30]
c00167ca:	b8 0a 00 00 00       	mov    eax,0xa
c00167cf:	83 fe 0e             	cmp    esi,0xe
c00167d2:	77 03                	ja     c00167d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c00167d4:	8d 46 fc             	lea    eax,[esi-0x4]
c00167d7:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c00167db:	76 27                	jbe    c0016804 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x651>
c00167dd:	88 4c 24 24          	mov    BYTE PTR [esp+0x24],cl
c00167e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00167e5:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00167ea:	74 6f                	je     c001685b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00167ec:	83 ec 0c             	sub    esp,0xc
c00167ef:	68 9b 53 02 c0       	push   0xc002539b
c00167f4:	e8 c7 93 ff ff       	call   c000fbc0 <KePanic(char const*)>
c00167f9:	83 c4 10             	add    esp,0x10
c00167fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016800:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
c0016804:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016806:	84 c9                	test   cl,cl
c0016808:	74 13                	je     c001681d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001680a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001680e:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0016815:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c0016819:	01 c1                	add    ecx,eax
c001681b:	eb 06                	jmp    c0016823 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c001681d:	89 c1                	mov    ecx,eax
c001681f:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c0016823:	01 ca                	add    edx,ecx
c0016825:	3d fe ff 0f 00       	cmp    eax,0xffffe
c001682a:	77 02                	ja     c001682e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c001682c:	89 c2                	mov    edx,eax
c001682e:	89 13                	mov    DWORD PTR [ebx],edx
c0016830:	eb 66                	jmp    c0016898 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e5>
c0016832:	52                   	push   edx
c0016833:	52                   	push   edx
c0016834:	50                   	push   eax
c0016835:	68 b7 53 02 c0       	push   0xc00253b7
c001683a:	e8 3d 07 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001683f:	83 c4 10             	add    esp,0x10
c0016842:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0016847:	74 12                	je     c001685b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0016849:	83 ec 0c             	sub    esp,0xc
c001684c:	68 c2 53 02 c0       	push   0xc00253c2
c0016851:	e8 6a 93 ff ff       	call   c000fbc0 <KePanic(char const*)>
c0016856:	83 c4 10             	add    esp,0x10
c0016859:	eb 3d                	jmp    c0016898 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e5>
c001685b:	83 ec 0c             	sub    esp,0xc
c001685e:	55                   	push   ebp
c001685f:	e8 a2 19 ff ff       	call   c0008206 <File::close()>
c0016864:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016867:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001686a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001686d:	59                   	pop    ecx
c001686e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016872:	e8 fc 8e ff ff       	call   c000f773 <free>
c0016877:	5b                   	pop    ebx
c0016878:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001687c:	e8 f2 8e ff ff       	call   c000f773 <free>
c0016881:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016884:	e8 ea 8e ff ff       	call   c000f773 <free>
c0016889:	5e                   	pop    esi
c001688a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001688e:	e8 e0 8e ff ff       	call   c000f773 <free>
c0016893:	83 c4 10             	add    esp,0x10
c0016896:	eb 21                	jmp    c00168b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0016898:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001689c:	e9 63 fd ff ff       	jmp    c0016604 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x451>
c00168a1:	83 ec 0c             	sub    esp,0xc
c00168a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00168a8:	e8 c6 8e ff ff       	call   c000f773 <free>
c00168ad:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00168b1:	83 c4 10             	add    esp,0x10
c00168b4:	e9 d9 fc ff ff       	jmp    c0016592 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c00168b9:	31 c0                	xor    eax,eax
c00168bb:	eb 33                	jmp    c00168f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73d>
c00168bd:	83 ec 0c             	sub    esp,0xc
c00168c0:	55                   	push   ebp
c00168c1:	e8 40 19 ff ff       	call   c0008206 <File::close()>
c00168c6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00168c9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00168cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00168cf:	58                   	pop    eax
c00168d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00168d4:	e8 9a 8e ff ff       	call   c000f773 <free>
c00168d9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00168dc:	e8 92 8e ff ff       	call   c000f773 <free>
c00168e1:	5a                   	pop    edx
c00168e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168e6:	e8 88 8e ff ff       	call   c000f773 <free>
c00168eb:	83 c4 10             	add    esp,0x10
c00168ee:	b0 01                	mov    al,0x1
c00168f0:	81 c4 5c 03 00 00    	add    esp,0x35c
c00168f6:	5b                   	pop    ebx
c00168f7:	5e                   	pop    esi
c00168f8:	5f                   	pop    edi
c00168f9:	5d                   	pop    ebp
c00168fa:	c3                   	ret    

c00168fb <Thr::getDriverBaseFromAddress(unsigned long)>:
c00168fb:	56                   	push   esi
c00168fc:	31 d2                	xor    edx,edx
c00168fe:	53                   	push   ebx
c00168ff:	8b 1d a0 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d2a0
c0016905:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016909:	39 d3                	cmp    ebx,edx
c001690b:	7e 1b                	jle    c0016928 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001690d:	8b 04 95 c0 d4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2b40]
c0016914:	39 c8                	cmp    eax,ecx
c0016916:	77 0d                	ja     c0016925 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0016918:	8b 34 95 c0 d2 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd2d40]
c001691f:	01 c6                	add    esi,eax
c0016921:	39 ce                	cmp    esi,ecx
c0016923:	77 05                	ja     c001692a <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0016925:	42                   	inc    edx
c0016926:	eb e1                	jmp    c0016909 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0016928:	31 c0                	xor    eax,eax
c001692a:	5b                   	pop    ebx
c001692b:	5e                   	pop    esi
c001692c:	c3                   	ret    

c001692d <Thr::getDriverNameFromAddress(unsigned long)>:
c001692d:	53                   	push   ebx
c001692e:	31 c0                	xor    eax,eax
c0016930:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016934:	8b 1d a0 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d2a0
c001693a:	39 c3                	cmp    ebx,eax
c001693c:	7e 22                	jle    c0016960 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001693e:	8b 14 85 c0 d4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2b40]
c0016945:	39 ca                	cmp    edx,ecx
c0016947:	77 14                	ja     c001695d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0016949:	03 14 85 c0 d2 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd2d40]
c0016950:	39 ca                	cmp    edx,ecx
c0016952:	76 09                	jbe    c001695d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0016954:	8b 04 85 c0 d6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2940]
c001695b:	eb 05                	jmp    c0016962 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001695d:	40                   	inc    eax
c001695e:	eb da                	jmp    c001693a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0016960:	31 c0                	xor    eax,eax
c0016962:	5b                   	pop    ebx
c0016963:	c3                   	ret    

c0016964 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0016964:	53                   	push   ebx
c0016965:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0016969:	53                   	push   ebx
c001696a:	e8 8c ff ff ff       	call   c00168fb <Thr::getDriverBaseFromAddress(unsigned long)>
c001696f:	5a                   	pop    edx
c0016970:	31 d2                	xor    edx,edx
c0016972:	85 c0                	test   eax,eax
c0016974:	74 04                	je     c001697a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0016976:	89 da                	mov    edx,ebx
c0016978:	29 c2                	sub    edx,eax
c001697a:	89 d0                	mov    eax,edx
c001697c:	5b                   	pop    ebx
c001697d:	c3                   	ret    

c001697e <Thr::loadDLL(char const*, bool)>:
c001697e:	55                   	push   ebp
c001697f:	57                   	push   edi
c0016980:	56                   	push   esi
c0016981:	53                   	push   ebx
c0016982:	81 ec 34 01 00 00    	sub    esp,0x134
c0016988:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001698f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016996:	56                   	push   esi
c0016997:	68 da 53 02 c0       	push   0xc00253da
c001699c:	e8 db 05 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00169a1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00169a8:	e8 b6 8d ff ff       	call   c000f763 <malloc>
c00169ad:	83 c4 0c             	add    esp,0xc
c00169b0:	89 c3                	mov    ebx,eax
c00169b2:	ff 35 98 da 02 c0    	push   DWORD PTR ds:0xc002da98
c00169b8:	56                   	push   esi
c00169b9:	50                   	push   eax
c00169ba:	e8 cb 17 ff ff       	call   c000818a <File::File(char const*, Process*)>
c00169bf:	83 c4 10             	add    esp,0x10
c00169c2:	85 db                	test   ebx,ebx
c00169c4:	75 3c                	jne    c0016a02 <Thr::loadDLL(char const*, bool)+0x84>
c00169c6:	89 f8                	mov    eax,edi
c00169c8:	84 c0                	test   al,al
c00169ca:	0f 84 f3 01 00 00    	je     c0016bc3 <Thr::loadDLL(char const*, bool)+0x245>
c00169d0:	55                   	push   ebp
c00169d1:	55                   	push   ebp
c00169d2:	68 eb 53 02 c0       	push   0xc00253eb
c00169d7:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00169db:	55                   	push   ebp
c00169dc:	e8 5f 9c fe ff       	call   c0000640 <strcpy>
c00169e1:	58                   	pop    eax
c00169e2:	5a                   	pop    edx
c00169e3:	56                   	push   esi
c00169e4:	55                   	push   ebp
c00169e5:	e8 56 9e fe ff       	call   c0000840 <strcat>
c00169ea:	59                   	pop    ecx
c00169eb:	58                   	pop    eax
c00169ec:	68 02 54 02 c0       	push   0xc0025402
c00169f1:	55                   	push   ebp
c00169f2:	e8 49 9e fe ff       	call   c0000840 <strcat>
c00169f7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00169fa:	e8 c1 91 ff ff       	call   c000fbc0 <KePanic(char const*)>
c00169ff:	83 c4 10             	add    esp,0x10
c0016a02:	51                   	push   ecx
c0016a03:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0016a07:	50                   	push   eax
c0016a08:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016a0c:	50                   	push   eax
c0016a0d:	53                   	push   ebx
c0016a0e:	e8 97 1a ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c0016a13:	83 c4 10             	add    esp,0x10
c0016a16:	89 c5                	mov    ebp,eax
c0016a18:	85 db                	test   ebx,ebx
c0016a1a:	74 0c                	je     c0016a28 <Thr::loadDLL(char const*, bool)+0xaa>
c0016a1c:	83 ec 0c             	sub    esp,0xc
c0016a1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a21:	53                   	push   ebx
c0016a22:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a25:	83 c4 10             	add    esp,0x10
c0016a28:	83 ec 0c             	sub    esp,0xc
c0016a2b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0016a30:	50                   	push   eax
c0016a31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a39:	55                   	push   ebp
c0016a3a:	68 04 54 02 c0       	push   0xc0025404
c0016a3f:	e8 38 05 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016a44:	83 c4 20             	add    esp,0x20
c0016a47:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0016a4c:	75 0a                	jne    c0016a58 <Thr::loadDLL(char const*, bool)+0xda>
c0016a4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a52:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0016a56:	75 3c                	jne    c0016a94 <Thr::loadDLL(char const*, bool)+0x116>
c0016a58:	89 f8                	mov    eax,edi
c0016a5a:	84 c0                	test   al,al
c0016a5c:	0f 84 49 01 00 00    	je     c0016bab <Thr::loadDLL(char const*, bool)+0x22d>
c0016a62:	51                   	push   ecx
c0016a63:	51                   	push   ecx
c0016a64:	68 25 54 02 c0       	push   0xc0025425
c0016a69:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0016a6d:	53                   	push   ebx
c0016a6e:	e8 cd 9b fe ff       	call   c0000640 <strcpy>
c0016a73:	5d                   	pop    ebp
c0016a74:	58                   	pop    eax
c0016a75:	56                   	push   esi
c0016a76:	53                   	push   ebx
c0016a77:	e8 c4 9d fe ff       	call   c0000840 <strcat>
c0016a7c:	58                   	pop    eax
c0016a7d:	5a                   	pop    edx
c0016a7e:	68 02 54 02 c0       	push   0xc0025402
c0016a83:	53                   	push   ebx
c0016a84:	e8 b7 9d fe ff       	call   c0000840 <strcat>
c0016a89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a8c:	e8 2f 91 ff ff       	call   c000fbc0 <KePanic(char const*)>
c0016a91:	83 c4 10             	add    esp,0x10
c0016a94:	52                   	push   edx
c0016a95:	6a 03                	push   0x3
c0016a97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a9b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016a9f:	05 ff 0f 00 00       	add    eax,0xfff
c0016aa4:	83 d2 00             	adc    edx,0x0
c0016aa7:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016aab:	50                   	push   eax
c0016aac:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c0016ab2:	e8 23 cf ff ff       	call   c00139da <VAS::allocatePages(int, int)>
c0016ab7:	59                   	pop    ecx
c0016ab8:	89 c3                	mov    ebx,eax
c0016aba:	5d                   	pop    ebp
c0016abb:	50                   	push   eax
c0016abc:	68 2b 48 02 c0       	push   0xc002482b
c0016ac1:	e8 b6 04 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016ac6:	89 34 24             	mov    DWORD PTR [esp],esi
c0016ac9:	e8 a2 9a fe ff       	call   c0000570 <strlen>
c0016ace:	8b 2d a0 d2 02 c0    	mov    ebp,DWORD PTR ds:0xc002d2a0
c0016ad4:	40                   	inc    eax
c0016ad5:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ad8:	e8 86 8c ff ff       	call   c000f763 <malloc>
c0016add:	89 04 ad c0 d6 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd2940],eax
c0016ae4:	58                   	pop    eax
c0016ae5:	a1 a0 d2 02 c0       	mov    eax,ds:0xc002d2a0
c0016aea:	5a                   	pop    edx
c0016aeb:	56                   	push   esi
c0016aec:	ff 34 85 c0 d6 02 c0 	push   DWORD PTR [eax*4-0x3ffd2940]
c0016af3:	e8 48 9b fe ff       	call   c0000640 <strcpy>
c0016af8:	a1 a0 d2 02 c0       	mov    eax,ds:0xc002d2a0
c0016afd:	8d 50 01             	lea    edx,[eax+0x1]
c0016b00:	89 1c 85 c0 d4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2b40],ebx
c0016b07:	89 15 a0 d2 02 c0    	mov    DWORD PTR ds:0xc002d2a0,edx
c0016b0d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016b11:	83 c4 0c             	add    esp,0xc
c0016b14:	89 14 85 c0 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2d40],edx
c0016b1b:	6a 01                	push   0x1
c0016b1d:	53                   	push   ebx
c0016b1e:	56                   	push   esi
c0016b1f:	e8 8f f6 ff ff       	call   c00161b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0016b24:	83 c4 10             	add    esp,0x10
c0016b27:	0f b6 c0             	movzx  eax,al
c0016b2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b2e:	85 c0                	test   eax,eax
c0016b30:	0f 85 89 00 00 00    	jne    c0016bbf <Thr::loadDLL(char const*, bool)+0x241>
c0016b36:	89 f8                	mov    eax,edi
c0016b38:	84 c0                	test   al,al
c0016b3a:	74 73                	je     c0016baf <Thr::loadDLL(char const*, bool)+0x231>
c0016b3c:	83 ec 0c             	sub    esp,0xc
c0016b3f:	68 3e 54 02 c0       	push   0xc002543e
c0016b44:	e8 77 90 ff ff       	call   c000fbc0 <KePanic(char const*)>
c0016b49:	83 c4 10             	add    esp,0x10
c0016b4c:	eb 61                	jmp    c0016baf <Thr::loadDLL(char const*, bool)+0x231>
c0016b4e:	50                   	push   eax
c0016b4f:	50                   	push   eax
c0016b50:	89 e8                	mov    eax,ebp
c0016b52:	c1 e0 0c             	shl    eax,0xc
c0016b55:	01 d8                	add    eax,ebx
c0016b57:	50                   	push   eax
c0016b58:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c0016b5e:	e8 79 c9 ff ff       	call   c00134dc <VAS::getPageTableEntry(unsigned long)>
c0016b63:	83 c4 10             	add    esp,0x10
c0016b66:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b68:	a8 60                	test   al,0x60
c0016b6a:	75 11                	jne    c0016b7d <Thr::loadDLL(char const*, bool)+0x1ff>
c0016b6c:	83 ec 0c             	sub    esp,0xc
c0016b6f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016b74:	50                   	push   eax
c0016b75:	e8 d1 91 ff ff       	call   c000fd4b <Phys::freePage(unsigned long)>
c0016b7a:	83 c4 10             	add    esp,0x10
c0016b7d:	45                   	inc    ebp
c0016b7e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016b86:	05 ff 0f 00 00       	add    eax,0xfff
c0016b8b:	bf 00 00 00 00       	mov    edi,0x0
c0016b90:	83 d2 00             	adc    edx,0x0
c0016b93:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016b97:	c1 ea 0c             	shr    edx,0xc
c0016b9a:	39 c5                	cmp    ebp,eax
c0016b9c:	89 d1                	mov    ecx,edx
c0016b9e:	89 f8                	mov    eax,edi
c0016ba0:	19 c8                	sbb    eax,ecx
c0016ba2:	72 aa                	jb     c0016b4e <Thr::loadDLL(char const*, bool)+0x1d0>
c0016ba4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016ba9:	75 18                	jne    c0016bc3 <Thr::loadDLL(char const*, bool)+0x245>
c0016bab:	31 db                	xor    ebx,ebx
c0016bad:	eb 14                	jmp    c0016bc3 <Thr::loadDLL(char const*, bool)+0x245>
c0016baf:	83 ec 0c             	sub    esp,0xc
c0016bb2:	68 5d 54 02 c0       	push   0xc002545d
c0016bb7:	e8 04 90 ff ff       	call   c000fbc0 <KePanic(char const*)>
c0016bbc:	83 c4 10             	add    esp,0x10
c0016bbf:	31 ed                	xor    ebp,ebp
c0016bc1:	eb bb                	jmp    c0016b7e <Thr::loadDLL(char const*, bool)+0x200>
c0016bc3:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016bc9:	89 d8                	mov    eax,ebx
c0016bcb:	5b                   	pop    ebx
c0016bcc:	5e                   	pop    esi
c0016bcd:	5f                   	pop    edi
c0016bce:	5d                   	pop    ebp
c0016bcf:	c3                   	ret    

c0016bd0 <Thr::executeDLL(unsigned long, void*)>:
c0016bd0:	56                   	push   esi
c0016bd1:	53                   	push   ebx
c0016bd2:	52                   	push   edx
c0016bd3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016bd7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016bdb:	85 db                	test   ebx,ebx
c0016bdd:	75 10                	jne    c0016bef <Thr::executeDLL(unsigned long, void*)+0x1f>
c0016bdf:	83 ec 0c             	sub    esp,0xc
c0016be2:	68 79 54 02 c0       	push   0xc0025479
c0016be7:	e8 d4 8f ff ff       	call   c000fbc0 <KePanic(char const*)>
c0016bec:	83 c4 10             	add    esp,0x10
c0016bef:	50                   	push   eax
c0016bf0:	50                   	push   eax
c0016bf1:	53                   	push   ebx
c0016bf2:	68 a3 54 02 c0       	push   0xc00254a3
c0016bf7:	e8 80 03 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016bfc:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016c00:	89 d8                	mov    eax,ebx
c0016c02:	83 c4 14             	add    esp,0x14
c0016c05:	5b                   	pop    ebx
c0016c06:	5e                   	pop    esi
c0016c07:	ff e0                	jmp    eax

c0016c09 <KeProcessExec(Process*, char const*)>:
c0016c09:	56                   	push   esi
c0016c0a:	53                   	push   ebx
c0016c0b:	83 ec 04             	sub    esp,0x4
c0016c0e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016c12:	8b b3 b2 05 00 00    	mov    esi,DWORD PTR [ebx+0x5b2]
c0016c18:	85 f6                	test   esi,esi
c0016c1a:	74 16                	je     c0016c32 <KeProcessExec(Process*, char const*)+0x29>
c0016c1c:	83 ec 0c             	sub    esp,0xc
c0016c1f:	56                   	push   esi
c0016c20:	e8 49 cb ff ff       	call   c001376e <VAS::~VAS()>
c0016c25:	58                   	pop    eax
c0016c26:	5a                   	pop    edx
c0016c27:	6a 14                	push   0x14
c0016c29:	56                   	push   esi
c0016c2a:	e8 4d 66 ff ff       	call   c000d27c <operator delete(void*, unsigned long)>
c0016c2f:	83 c4 10             	add    esp,0x10
c0016c32:	83 ec 0c             	sub    esp,0xc
c0016c35:	6a 14                	push   0x14
c0016c37:	e8 27 8b ff ff       	call   c000f763 <malloc>
c0016c3c:	89 c6                	mov    esi,eax
c0016c3e:	58                   	pop    eax
c0016c3f:	5a                   	pop    edx
c0016c40:	6a 00                	push   0x0
c0016c42:	56                   	push   esi
c0016c43:	e8 c6 cf ff ff       	call   c0013c0e <VAS::VAS(bool)>
c0016c48:	89 b3 b2 05 00 00    	mov    DWORD PTR [ebx+0x5b2],esi
c0016c4e:	59                   	pop    ecx
c0016c4f:	5e                   	pop    esi
c0016c50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c54:	50                   	push   eax
c0016c55:	53                   	push   ebx
c0016c56:	e8 a0 ef ff ff       	call   c0015bfb <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016c5b:	83 c4 14             	add    esp,0x14
c0016c5e:	31 c0                	xor    eax,eax
c0016c60:	5b                   	pop    ebx
c0016c61:	5e                   	pop    esi
c0016c62:	c3                   	ret    
c0016c63:	90                   	nop

c0016c64 <userModeEntryPoint(void*)>:
c0016c64:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c0016c6c:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c0016c71:	85 c0                	test   eax,eax
c0016c73:	75 03                	jne    c0016c78 <userModeEntryPoint(void*)+0x14>
c0016c75:	fb                   	sti    
c0016c76:	66 90                	xchg   ax,ax
c0016c78:	fb                   	sti    
c0016c79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c7e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016c81:	8b 80 ae 05 00 00    	mov    eax,DWORD PTR [eax+0x5ae]
c0016c87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016c8b:	e9 af 95 fe ff       	jmp    c000023f <goToUsermode>

c0016c90 <changeTSS>:
c0016c90:	83 ec 14             	sub    esp,0x14
c0016c93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c98:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0016c9b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0016ca0:	c1 e2 15             	shl    edx,0x15
c0016ca3:	29 d0                	sub    eax,edx
c0016ca5:	50                   	push   eax
c0016ca6:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0016cab:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016cb1:	05 68 11 00 00       	add    eax,0x1168
c0016cb6:	50                   	push   eax
c0016cb7:	e8 f8 bd ff ff       	call   c0012ab4 <TSS::setESP(unsigned long)>
c0016cbc:	83 c4 1c             	add    esp,0x1c
c0016cbf:	c3                   	ret    

c0016cc0 <switchToThread(ThreadControlBlock*)>:
c0016cc0:	57                   	push   edi
c0016cc1:	8b 0d 6c da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da6c
c0016cc7:	56                   	push   esi
c0016cc8:	85 c9                	test   ecx,ecx
c0016cca:	53                   	push   ebx
c0016ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016ccf:	0f 85 9b 00 00 00    	jne    c0016d70 <switchToThread(ThreadControlBlock*)+0xb0>
c0016cd5:	0f b6 53 44          	movzx  edx,BYTE PTR [ebx+0x44]
c0016cd9:	81 fa ff 00 00 00    	cmp    edx,0xff
c0016cdf:	0f 84 87 00 00 00    	je     c0016d6c <switchToThread(ThreadControlBlock*)+0xac>
c0016ce5:	b8 00 04 00 00       	mov    eax,0x400
c0016cea:	29 d0                	sub    eax,edx
c0016cec:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0016cef:	d1 f8                	sar    eax,1
c0016cf1:	01 d0                	add    eax,edx
c0016cf3:	90                   	nop
c0016cf4:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016cf7:	e8 ad 3e 00 00       	call   c001aba9 <HalQueryPerformanceCounter()>
c0016cfc:	a3 b0 da 02 c0       	mov    ds:0xc002dab0,eax
c0016d01:	89 15 b4 da 02 c0    	mov    DWORD PTR ds:0xc002dab4,edx
c0016d07:	89 c6                	mov    esi,eax
c0016d09:	89 d7                	mov    edi,edx
c0016d0b:	2b 35 a0 da 02 c0    	sub    esi,DWORD PTR ds:0xc002daa0
c0016d11:	a3 a0 da 02 c0       	mov    ds:0xc002daa0,eax
c0016d16:	1b 3d a4 da 02 c0    	sbb    edi,DWORD PTR ds:0xc002daa4
c0016d1c:	89 35 a8 da 02 c0    	mov    DWORD PTR ds:0xc002daa8,esi
c0016d22:	89 3d ac da 02 c0    	mov    DWORD PTR ds:0xc002daac,edi
c0016d28:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016d2e:	89 15 a4 da 02 c0    	mov    DWORD PTR ds:0xc002daa4,edx
c0016d34:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0016d37:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0016d3a:	01 c6                	add    esi,eax
c0016d3c:	11 d7                	adc    edi,edx
c0016d3e:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0016d41:	83 ec 0c             	sub    esp,0xc
c0016d44:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0016d47:	53                   	push   ebx
c0016d48:	e8 2a 95 fe ff       	call   c0000277 <switchToThreadASM>
c0016d4d:	0f 20 c0             	mov    eax,cr0
c0016d50:	83 c8 08             	or     eax,0x8
c0016d53:	0f 22 c0             	mov    cr0,eax
c0016d56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d5b:	83 c4 10             	add    esp,0x10
c0016d5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016d62:	5b                   	pop    ebx
c0016d63:	5e                   	pop    esi
c0016d64:	5f                   	pop    edi
c0016d65:	e9 0e eb ff ff       	jmp    c0015878 <KeCheckAlarm(ThreadControlBlock*)>
c0016d6a:	66 90                	xchg   ax,ax
c0016d6c:	31 c0                	xor    eax,eax
c0016d6e:	eb 84                	jmp    c0016cf4 <switchToThread(ThreadControlBlock*)+0x34>
c0016d70:	5b                   	pop    ebx
c0016d71:	c7 05 68 da 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002da68,0x1
c0016d7b:	5e                   	pop    esi
c0016d7c:	5f                   	pop    edi
c0016d7d:	c3                   	ret    
c0016d7e:	66 90                	xchg   ax,ax

c0016d80 <Process::addArgs(char**)>:
c0016d80:	57                   	push   edi
c0016d81:	56                   	push   esi
c0016d82:	53                   	push   ebx
c0016d83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016d87:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016d8b:	c7 86 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x5b6],0x0
c0016d95:	85 ff                	test   edi,edi
c0016d97:	74 4f                	je     c0016de8 <Process::addArgs(char**)+0x68>
c0016d99:	8b 07                	mov    eax,DWORD PTR [edi]
c0016d9b:	85 c0                	test   eax,eax
c0016d9d:	74 49                	je     c0016de8 <Process::addArgs(char**)+0x68>
c0016d9f:	31 db                	xor    ebx,ebx
c0016da1:	8d 76 00             	lea    esi,[esi+0x0]
c0016da4:	83 ec 0c             	sub    esp,0xc
c0016da7:	50                   	push   eax
c0016da8:	e8 c3 97 fe ff       	call   c0000570 <strlen>
c0016dad:	83 c0 01             	add    eax,0x1
c0016db0:	89 04 24             	mov    DWORD PTR [esp],eax
c0016db3:	e8 ab 89 ff ff       	call   c000f763 <malloc>
c0016db8:	89 84 9e ba 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x5ba],eax
c0016dbf:	5a                   	pop    edx
c0016dc0:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0016dc3:	59                   	pop    ecx
c0016dc4:	83 c3 01             	add    ebx,0x1
c0016dc7:	52                   	push   edx
c0016dc8:	50                   	push   eax
c0016dc9:	e8 72 98 fe ff       	call   c0000640 <strcpy>
c0016dce:	8b 8e b6 05 00 00    	mov    ecx,DWORD PTR [esi+0x5b6]
c0016dd4:	83 c4 10             	add    esp,0x10
c0016dd7:	83 c1 01             	add    ecx,0x1
c0016dda:	89 8e b6 05 00 00    	mov    DWORD PTR [esi+0x5b6],ecx
c0016de0:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0016de3:	85 c0                	test   eax,eax
c0016de5:	75 bd                	jne    c0016da4 <Process::addArgs(char**)+0x24>
c0016de7:	90                   	nop
c0016de8:	5b                   	pop    ebx
c0016de9:	5e                   	pop    esi
c0016dea:	5f                   	pop    edi
c0016deb:	c3                   	ret    

c0016dec <Process::Process(char const*, Process*, char**)>:
c0016dec:	56                   	push   esi
c0016ded:	53                   	push   ebx
c0016dee:	83 ec 14             	sub    esp,0x14
c0016df1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016df5:	05 0c 02 00 00       	add    eax,0x20c
c0016dfa:	bb 07 00 00 00       	mov    ebx,0x7
c0016dff:	89 c6                	mov    esi,eax
c0016e01:	8d 76 00             	lea    esi,[esi+0x0]
c0016e04:	85 db                	test   ebx,ebx
c0016e06:	78 14                	js     c0016e1c <Process::Process(char const*, Process*, char**)+0x30>
c0016e08:	83 ec 0c             	sub    esp,0xc
c0016e0b:	56                   	push   esi
c0016e0c:	e8 1b bc 00 00       	call   c0022a2c <ThreadControlBlock::ThreadControlBlock()>
c0016e11:	83 c4 10             	add    esp,0x10
c0016e14:	83 c6 73             	add    esi,0x73
c0016e17:	83 eb 01             	sub    ebx,0x1
c0016e1a:	eb e8                	jmp    c0016e04 <Process::Process(char const*, Process*, char**)+0x18>
c0016e1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e20:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016e27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e2b:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c0016e32:	83 ec 0c             	sub    esp,0xc
c0016e35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016e39:	e8 6a 76 ff ff       	call   c000e4a8 <KeNewProcessEnv(Process*)>
c0016e3e:	83 c4 10             	add    esp,0x10
c0016e41:	89 c2                	mov    edx,eax
c0016e43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e47:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016e4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e51:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016e5a:	a1 dc 70 02 c0       	mov    eax,ds:0xc00270dc
c0016e5f:	8d 50 01             	lea    edx,[eax+0x1]
c0016e62:	89 15 dc 70 02 c0    	mov    DWORD PTR ds:0xc00270dc,edx
c0016e68:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016e6c:	89 02                	mov    DWORD PTR [edx],eax
c0016e6e:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0016e76:	83 ec 0c             	sub    esp,0xc
c0016e79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016e7d:	e8 e1 88 ff ff       	call   c000f763 <malloc>
c0016e82:	83 c4 10             	add    esp,0x10
c0016e85:	89 c3                	mov    ebx,eax
c0016e87:	83 ec 08             	sub    esp,0x8
c0016e8a:	6a 00                	push   0x0
c0016e8c:	53                   	push   ebx
c0016e8d:	e8 7c cd ff ff       	call   c0013c0e <VAS::VAS(bool)>
c0016e92:	83 c4 10             	add    esp,0x10
c0016e95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e99:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0016e9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ea3:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016ead:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016eb1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016eb5:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0016ebb:	e8 0f 9f ff ff       	call   c0010dcf <KeInitSignals()>
c0016ec0:	89 c2                	mov    edx,eax
c0016ec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ec6:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016ecc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ed0:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016ed6:	85 c0                	test   eax,eax
c0016ed8:	74 42                	je     c0016f1c <Process::Process(char const*, Process*, char**)+0x130>
c0016eda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ede:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016ee4:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016eea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016eee:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016ef4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ef8:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016efe:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016f04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f08:	05 0c 01 00 00       	add    eax,0x10c
c0016f0d:	83 ec 08             	sub    esp,0x8
c0016f10:	52                   	push   edx
c0016f11:	50                   	push   eax
c0016f12:	e8 29 97 fe ff       	call   c0000640 <strcpy>
c0016f17:	83 c4 10             	add    esp,0x10
c0016f1a:	eb 7c                	jmp    c0016f98 <Process::Process(char const*, Process*, char**)+0x1ac>
c0016f1c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0016f24:	83 ec 0c             	sub    esp,0xc
c0016f27:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016f2b:	e8 33 88 ff ff       	call   c000f763 <malloc>
c0016f30:	83 c4 10             	add    esp,0x10
c0016f33:	89 c3                	mov    ebx,eax
c0016f35:	83 ec 08             	sub    esp,0x8
c0016f38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f3c:	53                   	push   ebx
c0016f3d:	e8 72 b8 ff ff       	call   c00127b4 <VgaText::VgaText(char const*)>
c0016f42:	83 c4 10             	add    esp,0x10
c0016f45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f49:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016f4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f53:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016f59:	83 ec 0c             	sub    esp,0xc
c0016f5c:	50                   	push   eax
c0016f5d:	e8 a8 b0 ff ff       	call   c001200a <addToTerminalCycle(VgaText*)>
c0016f62:	83 c4 10             	add    esp,0x10
c0016f65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f69:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016f6f:	83 ec 0c             	sub    esp,0xc
c0016f72:	50                   	push   eax
c0016f73:	e8 03 b3 ff ff       	call   c001227b <setActiveTerminal(VgaText*)>
c0016f78:	83 c4 10             	add    esp,0x10
c0016f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f7f:	05 0c 01 00 00       	add    eax,0x10c
c0016f84:	83 ec 08             	sub    esp,0x8
c0016f87:	68 c2 54 02 c0       	push   0xc00254c2
c0016f8c:	50                   	push   eax
c0016f8d:	e8 ae 96 fe ff       	call   c0000640 <strcpy>
c0016f92:	83 c4 10             	add    esp,0x10
c0016f95:	8d 76 00             	lea    esi,[esi+0x0]
c0016f98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f9c:	83 c0 0c             	add    eax,0xc
c0016f9f:	83 ec 08             	sub    esp,0x8
c0016fa2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016fa6:	50                   	push   eax
c0016fa7:	e8 94 96 fe ff       	call   c0000640 <strcpy>
c0016fac:	83 c4 10             	add    esp,0x10
c0016faf:	83 ec 08             	sub    esp,0x8
c0016fb2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016fb6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016fba:	e8 c1 fd ff ff       	call   c0016d80 <Process::addArgs(char**)>
c0016fbf:	83 c4 10             	add    esp,0x10
c0016fc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fc6:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016fcc:	83 e2 7f             	and    edx,0x7f
c0016fcf:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0016fd5:	83 ec 08             	sub    esp,0x8
c0016fd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016fdc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016fe0:	e8 16 ec ff ff       	call   c0015bfb <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016fe5:	83 c4 10             	add    esp,0x10
c0016fe8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016fec:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016ff0:	83 f0 01             	xor    eax,0x1
c0016ff3:	88 c2                	mov    dl,al
c0016ff5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff9:	88 90 be 07 00 00    	mov    BYTE PTR [eax+0x7be],dl
c0016fff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017003:	8b 10                	mov    edx,DWORD PTR [eax]
c0017005:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001700a:	52                   	push   edx
c001700b:	50                   	push   eax
c001700c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017010:	68 1c 55 02 c0       	push   0xc002551c
c0017015:	e8 62 ff fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001701a:	83 c4 10             	add    esp,0x10
c001701d:	90                   	nop
c001701e:	83 c4 14             	add    esp,0x14
c0017021:	5b                   	pop    ebx
c0017022:	5e                   	pop    esi
c0017023:	c3                   	ret    

c0017024 <Process::Process(bool, char const*, Process*, char**)>:
c0017024:	56                   	push   esi
c0017025:	53                   	push   ebx
c0017026:	83 ec 24             	sub    esp,0x24
c0017029:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001702d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017031:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017035:	05 0c 02 00 00       	add    eax,0x20c
c001703a:	bb 07 00 00 00       	mov    ebx,0x7
c001703f:	89 c6                	mov    esi,eax
c0017041:	8d 76 00             	lea    esi,[esi+0x0]
c0017044:	85 db                	test   ebx,ebx
c0017046:	78 14                	js     c001705c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0017048:	83 ec 0c             	sub    esp,0xc
c001704b:	56                   	push   esi
c001704c:	e8 db b9 00 00       	call   c0022a2c <ThreadControlBlock::ThreadControlBlock()>
c0017051:	83 c4 10             	add    esp,0x10
c0017054:	83 c6 73             	add    esi,0x73
c0017057:	83 eb 01             	sub    ebx,0x1
c001705a:	eb e8                	jmp    c0017044 <Process::Process(bool, char const*, Process*, char**)+0x20>
c001705c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017060:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0017067:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001706b:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c0017072:	83 ec 0c             	sub    esp,0xc
c0017075:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017079:	e8 2a 74 ff ff       	call   c000e4a8 <KeNewProcessEnv(Process*)>
c001707e:	83 c4 10             	add    esp,0x10
c0017081:	89 c2                	mov    edx,eax
c0017083:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017087:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c001708d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017091:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c001709a:	a1 dc 70 02 c0       	mov    eax,ds:0xc00270dc
c001709f:	8d 50 01             	lea    edx,[eax+0x1]
c00170a2:	89 15 dc 70 02 c0    	mov    DWORD PTR ds:0xc00270dc,edx
c00170a8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00170ac:	89 02                	mov    DWORD PTR [edx],eax
c00170ae:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00170b6:	83 ec 0c             	sub    esp,0xc
c00170b9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00170bd:	e8 a1 86 ff ff       	call   c000f763 <malloc>
c00170c2:	83 c4 10             	add    esp,0x10
c00170c5:	89 c3                	mov    ebx,eax
c00170c7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00170cc:	83 ec 08             	sub    esp,0x8
c00170cf:	50                   	push   eax
c00170d0:	53                   	push   ebx
c00170d1:	e8 38 cb ff ff       	call   c0013c0e <VAS::VAS(bool)>
c00170d6:	83 c4 10             	add    esp,0x10
c00170d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00170dd:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c00170e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00170e7:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c00170f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00170f5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00170f9:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c00170ff:	e8 cb 9c ff ff       	call   c0010dcf <KeInitSignals()>
c0017104:	89 c2                	mov    edx,eax
c0017106:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001710a:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0017110:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017114:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001711a:	85 c0                	test   eax,eax
c001711c:	74 42                	je     c0017160 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c001711e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017122:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0017128:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c001712e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017132:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0017138:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001713c:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0017142:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017148:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001714c:	05 0c 01 00 00       	add    eax,0x10c
c0017151:	83 ec 08             	sub    esp,0x8
c0017154:	52                   	push   edx
c0017155:	50                   	push   eax
c0017156:	e8 e5 94 fe ff       	call   c0000640 <strcpy>
c001715b:	83 c4 10             	add    esp,0x10
c001715e:	eb 7c                	jmp    c00171dc <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0017160:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0017168:	83 ec 0c             	sub    esp,0xc
c001716b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001716f:	e8 ef 85 ff ff       	call   c000f763 <malloc>
c0017174:	83 c4 10             	add    esp,0x10
c0017177:	89 c3                	mov    ebx,eax
c0017179:	83 ec 08             	sub    esp,0x8
c001717c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017180:	53                   	push   ebx
c0017181:	e8 2e b6 ff ff       	call   c00127b4 <VgaText::VgaText(char const*)>
c0017186:	83 c4 10             	add    esp,0x10
c0017189:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001718d:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0017193:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017197:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001719d:	83 ec 0c             	sub    esp,0xc
c00171a0:	50                   	push   eax
c00171a1:	e8 64 ae ff ff       	call   c001200a <addToTerminalCycle(VgaText*)>
c00171a6:	83 c4 10             	add    esp,0x10
c00171a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171ad:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00171b3:	83 ec 0c             	sub    esp,0xc
c00171b6:	50                   	push   eax
c00171b7:	e8 bf b0 ff ff       	call   c001227b <setActiveTerminal(VgaText*)>
c00171bc:	83 c4 10             	add    esp,0x10
c00171bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171c3:	05 0c 01 00 00       	add    eax,0x10c
c00171c8:	83 ec 08             	sub    esp,0x8
c00171cb:	68 c2 54 02 c0       	push   0xc00254c2
c00171d0:	50                   	push   eax
c00171d1:	e8 6a 94 fe ff       	call   c0000640 <strcpy>
c00171d6:	83 c4 10             	add    esp,0x10
c00171d9:	8d 76 00             	lea    esi,[esi+0x0]
c00171dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171e0:	83 c0 0c             	add    eax,0xc
c00171e3:	83 ec 08             	sub    esp,0x8
c00171e6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00171ea:	50                   	push   eax
c00171eb:	e8 50 94 fe ff       	call   c0000640 <strcpy>
c00171f0:	83 c4 10             	add    esp,0x10
c00171f3:	83 ec 08             	sub    esp,0x8
c00171f6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00171fa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00171fe:	e8 7d fb ff ff       	call   c0016d80 <Process::addArgs(char**)>
c0017203:	83 c4 10             	add    esp,0x10
c0017206:	90                   	nop
c0017207:	83 c4 24             	add    esp,0x24
c001720a:	5b                   	pop    ebx
c001720b:	5e                   	pop    esi
c001720c:	c3                   	ret    
c001720d:	8d 76 00             	lea    esi,[esi+0x0]

c0017210 <taskStartupFunction>:
c0017210:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017215:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0017218:	c3                   	ret    
c0017219:	8d 76 00             	lea    esi,[esi+0x0]

c001721c <KeDisablePreemption()>:
c001721c:	a1 4c da 02 c0       	mov    eax,ds:0xc002da4c
c0017221:	85 c0                	test   eax,eax
c0017223:	75 13                	jne    c0017238 <KeDisablePreemption()+0x1c>
c0017225:	8a 15 0c d1 02 c0    	mov    dl,BYTE PTR ds:0xc002d10c
c001722b:	c6 05 0c d1 02 c0 00 	mov    BYTE PTR ds:0xc002d10c,0x0
c0017232:	88 15 48 da 02 c0    	mov    BYTE PTR ds:0xc002da48,dl
c0017238:	83 c0 01             	add    eax,0x1
c001723b:	a3 4c da 02 c0       	mov    ds:0xc002da4c,eax
c0017240:	c3                   	ret    
c0017241:	8d 76 00             	lea    esi,[esi+0x0]

c0017244 <KeRestorePreemption()>:
c0017244:	a1 4c da 02 c0       	mov    eax,ds:0xc002da4c
c0017249:	83 e8 01             	sub    eax,0x1
c001724c:	a3 4c da 02 c0       	mov    ds:0xc002da4c,eax
c0017251:	75 0d                	jne    c0017260 <KeRestorePreemption()+0x1c>
c0017253:	a0 48 da 02 c0       	mov    al,ds:0xc002da48
c0017258:	a2 0c d1 02 c0       	mov    ds:0xc002d10c,al
c001725d:	8d 76 00             	lea    esi,[esi+0x0]
c0017260:	c3                   	ret    
c0017261:	90                   	nop
c0017262:	66 90                	xchg   ax,ax

c0017264 <Process::createThread(void (*)(void*), void*, int)>:
c0017264:	55                   	push   ebp
c0017265:	31 c9                	xor    ecx,ecx
c0017267:	57                   	push   edi
c0017268:	56                   	push   esi
c0017269:	53                   	push   ebx
c001726a:	83 ec 0c             	sub    esp,0xc
c001726d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017271:	66 8b b3 a4 05 00 00 	mov    si,WORD PTR [ebx+0x5a4]
c0017278:	89 f2                	mov    edx,esi
c001727a:	66 90                	xchg   ax,ax
c001727c:	0f b7 c2             	movzx  eax,dx
c001727f:	80 e2 01             	and    dl,0x1
c0017282:	74 18                	je     c001729c <Process::createThread(void (*)(void*), void*, int)+0x38>
c0017284:	d1 f8                	sar    eax,1
c0017286:	83 c1 01             	add    ecx,0x1
c0017289:	89 c2                	mov    edx,eax
c001728b:	83 f9 10             	cmp    ecx,0x10
c001728e:	75 ec                	jne    c001727c <Process::createThread(void (*)(void*), void*, int)+0x18>
c0017290:	83 c4 0c             	add    esp,0xc
c0017293:	31 db                	xor    ebx,ebx
c0017295:	89 d8                	mov    eax,ebx
c0017297:	5b                   	pop    ebx
c0017298:	5e                   	pop    esi
c0017299:	5f                   	pop    edi
c001729a:	5d                   	pop    ebp
c001729b:	c3                   	ret    
c001729c:	b8 01 00 00 00       	mov    eax,0x1
c00172a1:	d3 e0                	shl    eax,cl
c00172a3:	09 c6                	or     esi,eax
c00172a5:	8d 04 89             	lea    eax,[ecx+ecx*4]
c00172a8:	66 89 b3 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],si
c00172af:	01 c0                	add    eax,eax
c00172b1:	01 c8                	add    eax,ecx
c00172b3:	01 c0                	add    eax,eax
c00172b5:	01 c8                	add    eax,ecx
c00172b7:	8d 04 80             	lea    eax,[eax+eax*4]
c00172ba:	01 d8                	add    eax,ebx
c00172bc:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c00172c3:	75 0b                	jne    c00172d0 <Process::createThread(void (*)(void*), void*, int)+0x6c>
c00172c5:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c00172cf:	90                   	nop
c00172d0:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c00172d6:	83 ec 0c             	sub    esp,0xc
c00172d9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00172dc:	8d 04 89             	lea    eax,[ecx+ecx*4]
c00172df:	01 c0                	add    eax,eax
c00172e1:	01 c8                	add    eax,ecx
c00172e3:	01 c0                	add    eax,eax
c00172e5:	01 c8                	add    eax,ecx
c00172e7:	8d 3c 80             	lea    edi,[eax+eax*4]
c00172ea:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00172ed:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00172f3:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c00172f9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00172fd:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0017303:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0017309:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001730f:	89 ca                	mov    edx,ecx
c0017311:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0017318:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001731c:	c7 80 44 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x244],0x0
c0017326:	c7 80 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x26f],0x0
c0017330:	c6 80 73 02 00 00 00 	mov    BYTE PTR [eax+0x273],0x0
c0017337:	c6 80 74 02 00 00 00 	mov    BYTE PTR [eax+0x274],0x0
c001733e:	c6 80 75 02 00 00 00 	mov    BYTE PTR [eax+0x275],0x0
c0017345:	f7 da                	neg    edx
c0017347:	c1 e2 15             	shl    edx,0x15
c001734a:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0017350:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0017356:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001735a:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017364:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001736a:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c0017370:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0017376:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0017380:	83 e2 80             	and    edx,0xffffff80
c0017383:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001738d:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0017393:	68 00 01 00 00       	push   0x100
c0017398:	e8 c6 83 ff ff       	call   c000f763 <malloc>
c001739d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00173a0:	58                   	pop    eax
c00173a1:	5a                   	pop    edx
c00173a2:	53                   	push   ebx
c00173a3:	68 8c da 02 c0       	push   0xc002da8c
c00173a8:	e8 df b1 00 00       	call   c002258c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00173ad:	89 d8                	mov    eax,ebx
c00173af:	83 c4 10             	add    esp,0x10
c00173b2:	83 c4 0c             	add    esp,0xc
c00173b5:	5b                   	pop    ebx
c00173b6:	5e                   	pop    esi
c00173b7:	5f                   	pop    edi
c00173b8:	5d                   	pop    ebp
c00173b9:	c3                   	ret    
c00173ba:	66 90                	xchg   ax,ax

c00173bc <Process::createUserThread()>:
c00173bc:	83 ec 0c             	sub    esp,0xc
c00173bf:	68 80 00 00 00       	push   0x80
c00173c4:	6a 00                	push   0x0
c00173c6:	68 64 6c 01 c0       	push   0xc0016c64
c00173cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00173cf:	50                   	push   eax
c00173d0:	e8 8f fe ff ff       	call   c0017264 <Process::createThread(void (*)(void*), void*, int)>
c00173d5:	83 c4 1c             	add    esp,0x1c
c00173d8:	c3                   	ret    
c00173d9:	8d 76 00             	lea    esi,[esi+0x0]

c00173dc <setupMultitasking(void (*)())>:
c00173dc:	56                   	push   esi
c00173dd:	53                   	push   ebx
c00173de:	83 ec 04             	sub    esp,0x4
c00173e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00173e5:	eb 11                	jmp    c00173f8 <setupMultitasking(void (*)())+0x1c>
c00173e7:	90                   	nop
c00173e8:	83 ec 0c             	sub    esp,0xc
c00173eb:	68 8c da 02 c0       	push   0xc002da8c
c00173f0:	e8 db b0 00 00       	call   c00224d0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00173f5:	83 c4 10             	add    esp,0x10
c00173f8:	83 ec 0c             	sub    esp,0xc
c00173fb:	68 8c da 02 c0       	push   0xc002da8c
c0017400:	e8 a7 b0 00 00       	call   c00224ac <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017405:	83 c4 10             	add    esp,0x10
c0017408:	84 c0                	test   al,al
c001740a:	74 dc                	je     c00173e8 <setupMultitasking(void (*)())+0xc>
c001740c:	83 ec 0c             	sub    esp,0xc
c001740f:	68 c4 07 00 00       	push   0x7c4
c0017414:	e8 4a 83 ff ff       	call   c000f763 <malloc>
c0017419:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017420:	89 c3                	mov    ebx,eax
c0017422:	6a 00                	push   0x0
c0017424:	68 c6 54 02 c0       	push   0xc00254c6
c0017429:	6a 01                	push   0x1
c001742b:	50                   	push   eax
c001742c:	e8 f3 fb ff ff       	call   c0017024 <Process::Process(bool, char const*, Process*, char**)>
c0017431:	83 c4 14             	add    esp,0x14
c0017434:	8b 83 a6 05 00 00    	mov    eax,DWORD PTR [ebx+0x5a6]
c001743a:	89 1d 98 da 02 c0    	mov    DWORD PTR ds:0xc002da98,ebx
c0017440:	50                   	push   eax
c0017441:	e8 35 ae ff ff       	call   c001227b <setActiveTerminal(VgaText*)>
c0017446:	66 8b 83 a4 05 00 00 	mov    ax,WORD PTR [ebx+0x5a4]
c001744d:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c0017457:	83 c8 01             	or     eax,0x1
c001745a:	66 89 83 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],ax
c0017461:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0017467:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001746a:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0017474:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001747a:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0017480:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001748a:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0017494:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001749e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00174a4:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00174ae:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00174b4:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00174be:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00174c5:	e8 99 82 ff ff       	call   c000f763 <malloc>
c00174ca:	c7 83 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x26f],0x0
c00174d4:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00174da:	c6 83 73 02 00 00 00 	mov    BYTE PTR [ebx+0x273],0x0
c00174e1:	c6 83 74 02 00 00 00 	mov    BYTE PTR [ebx+0x274],0x0
c00174e8:	c6 83 75 02 00 00 00 	mov    BYTE PTR [ebx+0x275],0x0
c00174ef:	c6 83 76 02 00 00 00 	mov    BYTE PTR [ebx+0x276],0x0
c00174f6:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00174fc:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017502:	5a                   	pop    edx
c0017503:	59                   	pop    ecx
c0017504:	68 c2 54 02 c0       	push   0xc00254c2
c0017509:	50                   	push   eax
c001750a:	e8 31 91 fe ff       	call   c0000640 <strcpy>
c001750f:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0017516:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001751a:	83 c4 14             	add    esp,0x14
c001751d:	5b                   	pop    ebx
c001751e:	5e                   	pop    esi
c001751f:	e9 45 8d fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>

c0017524 <schedule()>:
c0017524:	8b 15 6c da 02 c0    	mov    edx,DWORD PTR ds:0xc002da6c
c001752a:	85 d2                	test   edx,edx
c001752c:	74 0e                	je     c001753c <schedule()+0x18>
c001752e:	c7 05 68 da 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002da68,0x1
c0017538:	c3                   	ret    
c0017539:	8d 76 00             	lea    esi,[esi+0x0]
c001753c:	53                   	push   ebx
c001753d:	83 ec 14             	sub    esp,0x14
c0017540:	68 8c da 02 c0       	push   0xc002da8c
c0017545:	e8 62 af 00 00       	call   c00224ac <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001754a:	83 c4 10             	add    esp,0x10
c001754d:	84 c0                	test   al,al
c001754f:	75 3f                	jne    c0017590 <schedule()+0x6c>
c0017551:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017556:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017559:	83 fa 01             	cmp    edx,0x1
c001755c:	74 3a                	je     c0017598 <schedule()+0x74>
c001755e:	66 90                	xchg   ax,ax
c0017560:	83 ec 0c             	sub    esp,0xc
c0017563:	68 8c da 02 c0       	push   0xc002da8c
c0017568:	e8 5b af 00 00       	call   c00224c8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001756d:	c7 04 24 8c da 02 c0 	mov    DWORD PTR [esp],0xc002da8c
c0017574:	89 c3                	mov    ebx,eax
c0017576:	e8 55 af 00 00       	call   c00224d0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001757b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017582:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017585:	e8 36 f7 ff ff       	call   c0016cc0 <switchToThread(ThreadControlBlock*)>
c001758a:	83 c4 10             	add    esp,0x10
c001758d:	8d 76 00             	lea    esi,[esi+0x0]
c0017590:	83 c4 08             	add    esp,0x8
c0017593:	5b                   	pop    ebx
c0017594:	c3                   	ret    
c0017595:	8d 76 00             	lea    esi,[esi+0x0]
c0017598:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001759f:	83 ec 08             	sub    esp,0x8
c00175a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175a7:	50                   	push   eax
c00175a8:	68 8c da 02 c0       	push   0xc002da8c
c00175ad:	e8 da af 00 00       	call   c002258c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00175b2:	83 c4 10             	add    esp,0x10
c00175b5:	eb a9                	jmp    c0017560 <schedule()+0x3c>
c00175b7:	90                   	nop

c00175b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00175b8:	83 ec 0c             	sub    esp,0xc
c00175bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00175c4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00175c7:	e8 58 ff ff ff       	call   c0017524 <schedule()>
c00175cc:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c00175d4:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c00175d9:	85 c0                	test   eax,eax
c00175db:	75 03                	jne    c00175e0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c00175dd:	fb                   	sti    
c00175de:	66 90                	xchg   ax,ax
c00175e0:	83 c4 0c             	add    esp,0xc
c00175e3:	c3                   	ret    

c00175e4 <blockTask(TaskState)>:
c00175e4:	83 ec 0c             	sub    esp,0xc
c00175e7:	fa                   	cli    
c00175e8:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c00175ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00175f1:	83 c0 01             	add    eax,0x1
c00175f4:	a3 70 da 02 c0       	mov    ds:0xc002da70,eax
c00175f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175fe:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017601:	e8 1e ff ff ff       	call   c0017524 <schedule()>
c0017606:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c001760e:	8b 15 70 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da70
c0017614:	85 d2                	test   edx,edx
c0017616:	75 04                	jne    c001761c <blockTask(TaskState)+0x38>
c0017618:	fb                   	sti    
c0017619:	8d 76 00             	lea    esi,[esi+0x0]
c001761c:	83 c4 0c             	add    esp,0xc
c001761f:	c3                   	ret    

c0017620 <waitTask(int, int*, int)>:
c0017620:	83 ec 18             	sub    esp,0x18
c0017623:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017628:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001762c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001762f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017633:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017638:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001763b:	6a 07                	push   0x7
c001763d:	e8 a2 ff ff ff       	call   c00175e4 <blockTask(TaskState)>
c0017642:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017647:	83 c4 10             	add    esp,0x10
c001764a:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001764d:	85 d2                	test   edx,edx
c001764f:	74 0b                	je     c001765c <waitTask(int, int*, int)+0x3c>
c0017651:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0017654:	89 02                	mov    DWORD PTR [edx],eax
c0017656:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001765b:	90                   	nop
c001765c:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001765f:	83 c4 0c             	add    esp,0xc
c0017662:	c3                   	ret    
c0017663:	90                   	nop

c0017664 <milliTenthSleepUntil(unsigned long long)>:
c0017664:	83 ec 0c             	sub    esp,0xc
c0017667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001766b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001766f:	3b 05 50 cb 02 c0    	cmp    eax,DWORD PTR ds:0xc002cb50
c0017675:	89 d1                	mov    ecx,edx
c0017677:	1b 0d 54 cb 02 c0    	sbb    ecx,DWORD PTR ds:0xc002cb54
c001767d:	73 05                	jae    c0017684 <milliTenthSleepUntil(unsigned long long)+0x20>
c001767f:	90                   	nop
c0017680:	83 c4 0c             	add    esp,0xc
c0017683:	c3                   	ret    
c0017684:	fa                   	cli    
c0017685:	8b 0d 70 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da70
c001768b:	83 ec 08             	sub    esp,0x8
c001768e:	83 c1 01             	add    ecx,0x1
c0017691:	89 0d 70 da 02 c0    	mov    DWORD PTR ds:0xc002da70,ecx
c0017697:	8b 0d 6c da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da6c
c001769d:	83 c1 01             	add    ecx,0x1
c00176a0:	89 0d 6c da 02 c0    	mov    DWORD PTR ds:0xc002da6c,ecx
c00176a6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00176ac:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c00176af:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c00176b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00176b7:	50                   	push   eax
c00176b8:	68 80 da 02 c0       	push   0xc002da80
c00176bd:	e8 ca ae 00 00       	call   c002258c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00176c2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00176c9:	e8 16 ff ff ff       	call   c00175e4 <blockTask(TaskState)>
c00176ce:	a1 6c da 02 c0       	mov    eax,ds:0xc002da6c
c00176d3:	83 c4 10             	add    esp,0x10
c00176d6:	83 e8 01             	sub    eax,0x1
c00176d9:	a3 6c da 02 c0       	mov    ds:0xc002da6c,eax
c00176de:	85 c0                	test   eax,eax
c00176e0:	75 0a                	jne    c00176ec <milliTenthSleepUntil(unsigned long long)+0x88>
c00176e2:	8b 15 68 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da68
c00176e8:	85 d2                	test   edx,edx
c00176ea:	75 18                	jne    c0017704 <milliTenthSleepUntil(unsigned long long)+0xa0>
c00176ec:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c00176f4:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c00176f9:	85 c0                	test   eax,eax
c00176fb:	75 83                	jne    c0017680 <milliTenthSleepUntil(unsigned long long)+0x1c>
c00176fd:	fb                   	sti    
c00176fe:	83 c4 0c             	add    esp,0xc
c0017701:	c3                   	ret    
c0017702:	66 90                	xchg   ax,ax
c0017704:	c7 05 68 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da68,0x0
c001770e:	e8 11 fe ff ff       	call   c0017524 <schedule()>
c0017713:	eb d7                	jmp    c00176ec <milliTenthSleepUntil(unsigned long long)+0x88>
c0017715:	8d 76 00             	lea    esi,[esi+0x0]

c0017718 <milliTenthSleep(unsigned long long)>:
c0017718:	a1 50 cb 02 c0       	mov    eax,ds:0xc002cb50
c001771d:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c0017723:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0017727:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001772b:	e9 34 ff ff ff       	jmp    c0017664 <milliTenthSleepUntil(unsigned long long)>

c0017730 <sleep(unsigned long long)>:
c0017730:	69 4c 24 08 10 27 00 00 	imul   ecx,DWORD PTR [esp+0x8],0x2710
c0017738:	b8 10 27 00 00       	mov    eax,0x2710
c001773d:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0017741:	01 ca                	add    edx,ecx
c0017743:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017747:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001774b:	eb cb                	jmp    c0017718 <milliTenthSleep(unsigned long long)>
c001774d:	8d 76 00             	lea    esi,[esi+0x0]

c0017750 <sleep(unsigned int)>:
c0017750:	83 ec 14             	sub    esp,0x14
c0017753:	b8 10 27 00 00       	mov    eax,0x2710
c0017758:	f7 64 24 18          	mul    DWORD PTR [esp+0x18]
c001775c:	52                   	push   edx
c001775d:	50                   	push   eax
c001775e:	e8 b5 ff ff ff       	call   c0017718 <milliTenthSleep(unsigned long long)>
c0017763:	83 c4 1c             	add    esp,0x1c
c0017766:	c3                   	ret    
c0017767:	90                   	nop

c0017768 <milliTenthSleep(unsigned int)>:
c0017768:	83 ec 14             	sub    esp,0x14
c001776b:	31 d2                	xor    edx,edx
c001776d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017771:	03 05 50 cb 02 c0    	add    eax,DWORD PTR ds:0xc002cb50
c0017777:	13 15 54 cb 02 c0    	adc    edx,DWORD PTR ds:0xc002cb54
c001777d:	52                   	push   edx
c001777e:	50                   	push   eax
c001777f:	e8 e0 fe ff ff       	call   c0017664 <milliTenthSleepUntil(unsigned long long)>
c0017784:	83 c4 1c             	add    esp,0x1c
c0017787:	c3                   	ret    

c0017788 <taskReturned>:
c0017788:	83 ec 18             	sub    esp,0x18
c001778b:	68 50 55 02 c0       	push   0xc0025550
c0017790:	e8 2b 84 ff ff       	call   c000fbc0 <KePanic(char const*)>
c0017795:	83 c4 10             	add    esp,0x10
c0017798:	83 ec 0c             	sub    esp,0xc
c001779b:	6a 02                	push   0x2
c001779d:	e8 42 fe ff ff       	call   c00175e4 <blockTask(TaskState)>
c00177a2:	fa                   	cli    
c00177a3:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c00177a8:	83 c0 01             	add    eax,0x1
c00177ab:	a3 70 da 02 c0       	mov    ds:0xc002da70,eax
c00177b0:	e8 6f fd ff ff       	call   c0017524 <schedule()>
c00177b5:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c00177bd:	8b 15 70 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da70
c00177c3:	83 c4 10             	add    esp,0x10
c00177c6:	85 d2                	test   edx,edx
c00177c8:	75 ce                	jne    c0017798 <taskReturned+0x10>
c00177ca:	fb                   	sti    
c00177cb:	eb cb                	jmp    c0017798 <taskReturned+0x10>
c00177cd:	8d 76 00             	lea    esi,[esi+0x0]

c00177d0 <KeProcessFromPID(int)>:
c00177d0:	57                   	push   edi
c00177d1:	56                   	push   esi
c00177d2:	53                   	push   ebx
c00177d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00177d7:	fa                   	cli    
c00177d8:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c00177dd:	83 ec 0c             	sub    esp,0xc
c00177e0:	83 c0 01             	add    eax,0x1
c00177e3:	68 8c da 02 c0       	push   0xc002da8c
c00177e8:	a3 70 da 02 c0       	mov    ds:0xc002da70,eax
c00177ed:	e8 d6 ac 00 00       	call   c00224c8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00177f2:	83 c4 10             	add    esp,0x10
c00177f5:	89 c7                	mov    edi,eax
c00177f7:	eb 17                	jmp    c0017810 <KeProcessFromPID(int)+0x40>
c00177f9:	8d 76 00             	lea    esi,[esi+0x0]
c00177fc:	83 ec 0c             	sub    esp,0xc
c00177ff:	68 8c da 02 c0       	push   0xc002da8c
c0017804:	e8 bf ac 00 00       	call   c00224c8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017809:	83 c4 10             	add    esp,0x10
c001780c:	39 f8                	cmp    eax,edi
c001780e:	74 50                	je     c0017860 <KeProcessFromPID(int)+0x90>
c0017810:	83 ec 0c             	sub    esp,0xc
c0017813:	68 8c da 02 c0       	push   0xc002da8c
c0017818:	e8 ab ac 00 00       	call   c00224c8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001781d:	c7 04 24 8c da 02 c0 	mov    DWORD PTR [esp],0xc002da8c
c0017824:	89 c3                	mov    ebx,eax
c0017826:	e8 a5 ac 00 00       	call   c00224d0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001782b:	59                   	pop    ecx
c001782c:	58                   	pop    eax
c001782d:	53                   	push   ebx
c001782e:	68 8c da 02 c0       	push   0xc002da8c
c0017833:	e8 54 ad 00 00       	call   c002258c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017838:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001783b:	83 c4 10             	add    esp,0x10
c001783e:	39 30                	cmp    DWORD PTR [eax],esi
c0017840:	75 ba                	jne    c00177fc <KeProcessFromPID(int)+0x2c>
c0017842:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c001784a:	8b 15 70 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da70
c0017850:	85 d2                	test   edx,edx
c0017852:	74 08                	je     c001785c <KeProcessFromPID(int)+0x8c>
c0017854:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017857:	5b                   	pop    ebx
c0017858:	5e                   	pop    esi
c0017859:	5f                   	pop    edi
c001785a:	c3                   	ret    
c001785b:	90                   	nop
c001785c:	fb                   	sti    
c001785d:	eb f5                	jmp    c0017854 <KeProcessFromPID(int)+0x84>
c001785f:	90                   	nop
c0017860:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c0017868:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c001786d:	85 c0                	test   eax,eax
c001786f:	75 07                	jne    c0017878 <KeProcessFromPID(int)+0xa8>
c0017871:	fb                   	sti    
c0017872:	31 c0                	xor    eax,eax
c0017874:	5b                   	pop    ebx
c0017875:	5e                   	pop    esi
c0017876:	5f                   	pop    edi
c0017877:	c3                   	ret    
c0017878:	5b                   	pop    ebx
c0017879:	31 c0                	xor    eax,eax
c001787b:	5e                   	pop    esi
c001787c:	5f                   	pop    edi
c001787d:	c3                   	ret    
c001787e:	66 90                	xchg   ax,ax

c0017880 <unblockTask(ThreadControlBlock*)>:
c0017880:	53                   	push   ebx
c0017881:	83 ec 08             	sub    esp,0x8
c0017884:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017888:	fa                   	cli    
c0017889:	8b 15 70 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da70
c001788f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017892:	83 c2 01             	add    edx,0x1
c0017895:	85 c0                	test   eax,eax
c0017897:	89 15 70 da 02 c0    	mov    DWORD PTR ds:0xc002da70,edx
c001789d:	74 6d                	je     c001790c <unblockTask(ThreadControlBlock*)+0x8c>
c001789f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00178a2:	83 f8 01             	cmp    eax,0x1
c00178a5:	74 39                	je     c00178e0 <unblockTask(ThreadControlBlock*)+0x60>
c00178a7:	83 ec 0c             	sub    esp,0xc
c00178aa:	68 8c da 02 c0       	push   0xc002da8c
c00178af:	e8 14 ac 00 00       	call   c00224c8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00178b4:	83 c4 10             	add    esp,0x10
c00178b7:	85 c0                	test   eax,eax
c00178b9:	75 1d                	jne    c00178d8 <unblockTask(ThreadControlBlock*)+0x58>
c00178bb:	eb 63                	jmp    c0017920 <unblockTask(ThreadControlBlock*)+0xa0>
c00178bd:	8d 76 00             	lea    esi,[esi+0x0]
c00178c0:	83 ec 08             	sub    esp,0x8
c00178c3:	50                   	push   eax
c00178c4:	68 8c da 02 c0       	push   0xc002da8c
c00178c9:	e8 06 b1 00 00       	call   c00229d4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00178ce:	83 c4 10             	add    esp,0x10
c00178d1:	85 c0                	test   eax,eax
c00178d3:	74 4b                	je     c0017920 <unblockTask(ThreadControlBlock*)+0xa0>
c00178d5:	8d 76 00             	lea    esi,[esi+0x0]
c00178d8:	39 c3                	cmp    ebx,eax
c00178da:	75 e4                	jne    c00178c0 <unblockTask(ThreadControlBlock*)+0x40>
c00178dc:	eb 12                	jmp    c00178f0 <unblockTask(ThreadControlBlock*)+0x70>
c00178de:	66 90                	xchg   ax,ax
c00178e0:	83 ec 0c             	sub    esp,0xc
c00178e3:	68 e4 54 02 c0       	push   0xc00254e4
c00178e8:	e8 8f f6 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00178ed:	83 c4 10             	add    esp,0x10
c00178f0:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c00178f8:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c00178fd:	85 c0                	test   eax,eax
c00178ff:	75 03                	jne    c0017904 <unblockTask(ThreadControlBlock*)+0x84>
c0017901:	fb                   	sti    
c0017902:	66 90                	xchg   ax,ax
c0017904:	83 c4 08             	add    esp,0x8
c0017907:	5b                   	pop    ebx
c0017908:	c3                   	ret    
c0017909:	8d 76 00             	lea    esi,[esi+0x0]
c001790c:	83 ec 0c             	sub    esp,0xc
c001790f:	68 cd 54 02 c0       	push   0xc00254cd
c0017914:	e8 63 f6 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017919:	83 c4 10             	add    esp,0x10
c001791c:	eb d2                	jmp    c00178f0 <unblockTask(ThreadControlBlock*)+0x70>
c001791e:	66 90                	xchg   ax,ax
c0017920:	83 ec 08             	sub    esp,0x8
c0017923:	53                   	push   ebx
c0017924:	68 8c da 02 c0       	push   0xc002da8c
c0017929:	e8 5e ac 00 00       	call   c002258c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001792e:	83 c4 10             	add    esp,0x10
c0017931:	eb bd                	jmp    c00178f0 <unblockTask(ThreadControlBlock*)+0x70>
c0017933:	90                   	nop

c0017934 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0017934:	55                   	push   ebp
c0017935:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001793a:	57                   	push   edi
c001793b:	56                   	push   esi
c001793c:	53                   	push   ebx
c001793d:	83 ec 1c             	sub    esp,0x1c
c0017940:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017944:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0017947:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001794a:	d3 c0                	rol    eax,cl
c001794c:	66 8b 8a a4 05 00 00 	mov    cx,WORD PTR [edx+0x5a4]
c0017953:	21 c8                	and    eax,ecx
c0017955:	66 89 82 a4 05 00 00 	mov    WORD PTR [edx+0x5a4],ax
c001795c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001795f:	66 83 b8 a4 05 00 00 00 	cmp    WORD PTR [eax+0x5a4],0x0
c0017967:	0f 85 b7 01 00 00    	jne    c0017b24 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c001796d:	8b a8 b6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5b6]
c0017973:	85 ed                	test   ebp,ebp
c0017975:	7e 29                	jle    c00179a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x6c>
c0017977:	31 f6                	xor    esi,esi
c0017979:	8d 76 00             	lea    esi,[esi+0x0]
c001797c:	83 ec 0c             	sub    esp,0xc
c001797f:	8b bc b0 ba 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x5ba]
c0017986:	83 c6 01             	add    esi,0x1
c0017989:	57                   	push   edi
c001798a:	e8 e4 7d ff ff       	call   c000f773 <free>
c001798f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017992:	83 c4 10             	add    esp,0x10
c0017995:	39 b0 b6 05 00 00    	cmp    DWORD PTR [eax+0x5b6],esi
c001799b:	7f df                	jg     c001797c <cleanupTerminatedTask(ThreadControlBlock*)+0x48>
c001799d:	8d 76 00             	lea    esi,[esi+0x0]
c00179a0:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c00179aa:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00179ad:	8b ae ba 07 00 00    	mov    ebp,DWORD PTR [esi+0x7ba]
c00179b3:	89 f7                	mov    edi,esi
c00179b5:	85 ed                	test   ebp,ebp
c00179b7:	74 1b                	je     c00179d4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00179b9:	83 ec 0c             	sub    esp,0xc
c00179bc:	55                   	push   ebp
c00179bd:	e8 02 6a ff ff       	call   c000e3c4 <EnvVarContainer::~EnvVarContainer()>
c00179c2:	59                   	pop    ecx
c00179c3:	5e                   	pop    esi
c00179c4:	6a 0c                	push   0xc
c00179c6:	55                   	push   ebp
c00179c7:	e8 b0 58 ff ff       	call   c000d27c <operator delete(void*, unsigned long)>
c00179cc:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00179cf:	83 c4 10             	add    esp,0x10
c00179d2:	89 f7                	mov    edi,esi
c00179d4:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c00179da:	85 c0                	test   eax,eax
c00179dc:	0f 84 b6 00 00 00    	je     c0017a98 <cleanupTerminatedTask(ThreadControlBlock*)+0x164>
c00179e2:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c00179e5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00179e9:	31 c9                	xor    ecx,ecx
c00179eb:	eb 17                	jmp    c0017a04 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00179ed:	8d 76 00             	lea    esi,[esi+0x0]
c00179f0:	83 c1 01             	add    ecx,0x1
c00179f3:	83 f9 10             	cmp    ecx,0x10
c00179f6:	0f 84 9c 00 00 00    	je     c0017a98 <cleanupTerminatedTask(ThreadControlBlock*)+0x164>
c00179fc:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0017a02:	66 90                	xchg   ax,ax
c0017a04:	0f b7 90 a4 05 00 00 	movzx  edx,WORD PTR [eax+0x5a4]
c0017a0b:	d3 fa                	sar    edx,cl
c0017a0d:	80 e2 01             	and    dl,0x1
c0017a10:	74 de                	je     c00179f0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017a12:	8d 14 89             	lea    edx,[ecx+ecx*4]
c0017a15:	01 d2                	add    edx,edx
c0017a17:	01 ca                	add    edx,ecx
c0017a19:	01 d2                	add    edx,edx
c0017a1b:	01 ca                	add    edx,ecx
c0017a1d:	8d 14 92             	lea    edx,[edx+edx*4]
c0017a20:	01 d0                	add    eax,edx
c0017a22:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0017a28:	83 fd 07             	cmp    ebp,0x7
c0017a2b:	75 c3                	jne    c00179f0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017a2d:	05 40 02 00 00       	add    eax,0x240
c0017a32:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0017a35:	83 fd ff             	cmp    ebp,0xffffffff
c0017a38:	0f 8c ee 00 00 00    	jl     c0017b2c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0017a3e:	0f 84 ac 01 00 00    	je     c0017bf0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2bc>
c0017a44:	85 ed                	test   ebp,ebp
c0017a46:	0f 84 90 01 00 00    	je     c0017bdc <cleanupTerminatedTask(ThreadControlBlock*)+0x2a8>
c0017a4c:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0017a4e:	75 a0                	jne    c00179f0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017a50:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0017a56:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017a5a:	01 d0                	add    eax,edx
c0017a5c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0017a60:	83 ec 0c             	sub    esp,0xc
c0017a63:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0017a69:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017a6c:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0017a72:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0017a79:	50                   	push   eax
c0017a7a:	e8 01 fe ff ff       	call   c0017880 <unblockTask(ThreadControlBlock*)>
c0017a7f:	83 c4 10             	add    esp,0x10
c0017a82:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017a85:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017a89:	89 f7                	mov    edi,esi
c0017a8b:	83 c1 01             	add    ecx,0x1
c0017a8e:	83 f9 10             	cmp    ecx,0x10
c0017a91:	0f 85 65 ff ff ff    	jne    c00179fc <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0017a97:	90                   	nop
c0017a98:	8b 86 a6 05 00 00    	mov    eax,DWORD PTR [esi+0x5a6]
c0017a9e:	85 c0                	test   eax,eax
c0017aa0:	74 62                	je     c0017b04 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c0017aa2:	8b 96 aa 05 00 00    	mov    edx,DWORD PTR [esi+0x5aa]
c0017aa8:	3b 82 a6 05 00 00    	cmp    eax,DWORD PTR [edx+0x5a6]
c0017aae:	74 54                	je     c0017b04 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c0017ab0:	83 ec 0c             	sub    esp,0xc
c0017ab3:	68 8c da 02 c0       	push   0xc002da8c
c0017ab8:	e8 0b aa 00 00       	call   c00224c8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017abd:	c7 04 24 8c da 02 c0 	mov    DWORD PTR [esp],0xc002da8c
c0017ac4:	89 c7                	mov    edi,eax
c0017ac6:	e8 e1 a9 00 00       	call   c00224ac <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017acb:	83 c4 10             	add    esp,0x10
c0017ace:	84 c0                	test   al,al
c0017ad0:	0f 84 ce 00 00 00    	je     c0017ba4 <cleanupTerminatedTask(ThreadControlBlock*)+0x270>
c0017ad6:	66 90                	xchg   ax,ax
c0017ad8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017adb:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0017ae1:	85 d2                	test   edx,edx
c0017ae3:	74 0f                	je     c0017af4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0017ae5:	83 ec 0c             	sub    esp,0xc
c0017ae8:	8b 02                	mov    eax,DWORD PTR [edx]
c0017aea:	52                   	push   edx
c0017aeb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017aee:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017af1:	83 c4 10             	add    esp,0x10
c0017af4:	c7 80 a6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5a6],0x0
c0017afe:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0017b01:	8d 76 00             	lea    esi,[esi+0x0]
c0017b04:	8b 9f b2 05 00 00    	mov    ebx,DWORD PTR [edi+0x5b2]
c0017b0a:	85 db                	test   ebx,ebx
c0017b0c:	74 16                	je     c0017b24 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c0017b0e:	83 ec 0c             	sub    esp,0xc
c0017b11:	53                   	push   ebx
c0017b12:	e8 57 bc ff ff       	call   c001376e <VAS::~VAS()>
c0017b17:	58                   	pop    eax
c0017b18:	5a                   	pop    edx
c0017b19:	6a 14                	push   0x14
c0017b1b:	53                   	push   ebx
c0017b1c:	e8 5b 57 ff ff       	call   c000d27c <operator delete(void*, unsigned long)>
c0017b21:	83 c4 10             	add    esp,0x10
c0017b24:	83 c4 1c             	add    esp,0x1c
c0017b27:	5b                   	pop    ebx
c0017b28:	5e                   	pop    esi
c0017b29:	5f                   	pop    edi
c0017b2a:	5d                   	pop    ebp
c0017b2b:	c3                   	ret    
c0017b2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017b30:	83 ec 0c             	sub    esp,0xc
c0017b33:	68 84 55 02 c0       	push   0xc0025584
c0017b38:	e8 83 80 ff ff       	call   c000fbc0 <KePanic(char const*)>
c0017b3d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017b40:	83 c4 10             	add    esp,0x10
c0017b43:	89 f7                	mov    edi,esi
c0017b45:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017b49:	e9 a2 fe ff ff       	jmp    c00179f0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017b4e:	66 90                	xchg   ax,ax
c0017b50:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0017b56:	39 82 a6 05 00 00    	cmp    DWORD PTR [edx+0x5a6],eax
c0017b5c:	75 1e                	jne    c0017b7c <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c0017b5e:	83 ec 0c             	sub    esp,0xc
c0017b61:	68 ec 55 02 c0       	push   0xc00255ec
c0017b66:	e8 11 f4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017b6b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0017b72:	e8 6d fa ff ff       	call   c00175e4 <blockTask(TaskState)>
c0017b77:	83 c4 10             	add    esp,0x10
c0017b7a:	66 90                	xchg   ax,ax
c0017b7c:	83 ec 08             	sub    esp,0x8
c0017b7f:	56                   	push   esi
c0017b80:	68 8c da 02 c0       	push   0xc002da8c
c0017b85:	e8 02 aa 00 00       	call   c002258c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017b8a:	c7 04 24 8c da 02 c0 	mov    DWORD PTR [esp],0xc002da8c
c0017b91:	e8 32 a9 00 00       	call   c00224c8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017b96:	83 c4 10             	add    esp,0x10
c0017b99:	39 f8                	cmp    eax,edi
c0017b9b:	0f 84 37 ff ff ff    	je     c0017ad8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a4>
c0017ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0017ba4:	83 ec 0c             	sub    esp,0xc
c0017ba7:	68 8c da 02 c0       	push   0xc002da8c
c0017bac:	e8 17 a9 00 00       	call   c00224c8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017bb1:	c7 04 24 8c da 02 c0 	mov    DWORD PTR [esp],0xc002da8c
c0017bb8:	89 c6                	mov    esi,eax
c0017bba:	e8 11 a9 00 00       	call   c00224d0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017bbf:	83 c4 10             	add    esp,0x10
c0017bc2:	39 f3                	cmp    ebx,esi
c0017bc4:	74 b6                	je     c0017b7c <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c0017bc6:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0017bc9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017bcc:	39 82 aa 05 00 00    	cmp    DWORD PTR [edx+0x5aa],eax
c0017bd2:	75 a8                	jne    c0017b7c <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c0017bd4:	e9 77 ff ff ff       	jmp    c0017b50 <cleanupTerminatedTask(ThreadControlBlock*)+0x21c>
c0017bd9:	8d 76 00             	lea    esi,[esi+0x0]
c0017bdc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017be0:	83 ec 0c             	sub    esp,0xc
c0017be3:	68 b8 55 02 c0       	push   0xc00255b8
c0017be8:	e9 4b ff ff ff       	jmp    c0017b38 <cleanupTerminatedTask(ThreadControlBlock*)+0x204>
c0017bed:	8d 76 00             	lea    esi,[esi+0x0]
c0017bf0:	8b 36                	mov    esi,DWORD PTR [esi]
c0017bf2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017bf6:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0017bf9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017bfc:	8b b8 aa 05 00 00    	mov    edi,DWORD PTR [eax+0x5aa]
c0017c02:	01 d7                	add    edi,edx
c0017c04:	89 f8                	mov    eax,edi
c0017c06:	e9 51 fe ff ff       	jmp    c0017a5c <cleanupTerminatedTask(ThreadControlBlock*)+0x128>
c0017c0b:	90                   	nop

c0017c0c <cleanerTaskFunction(void*)>:
c0017c0c:	53                   	push   ebx
c0017c0d:	83 ec 08             	sub    esp,0x8
c0017c10:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c0017c18:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c0017c1d:	85 c0                	test   eax,eax
c0017c1f:	75 03                	jne    c0017c24 <cleanerTaskFunction(void*)+0x18>
c0017c21:	fb                   	sti    
c0017c22:	66 90                	xchg   ax,ax
c0017c24:	fa                   	cli    
c0017c25:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c0017c2a:	83 c0 01             	add    eax,0x1
c0017c2d:	80 3d 54 da 02 c0 00 	cmp    BYTE PTR ds:0xc002da54,0x0
c0017c34:	a3 70 da 02 c0       	mov    ds:0xc002da70,eax
c0017c39:	0f 85 c9 00 00 00    	jne    c0017d08 <cleanerTaskFunction(void*)+0xfc>
c0017c3f:	83 ec 0c             	sub    esp,0xc
c0017c42:	6a 02                	push   0x2
c0017c44:	e8 6f f9 ff ff       	call   c00175b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017c49:	83 c4 10             	add    esp,0x10
c0017c4c:	c6 05 54 da 02 c0 00 	mov    BYTE PTR ds:0xc002da54,0x0
c0017c53:	fa                   	cli    
c0017c54:	8b 0d 70 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da70
c0017c5a:	8b 1d 6c da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da6c
c0017c60:	83 c1 01             	add    ecx,0x1
c0017c63:	83 c3 01             	add    ebx,0x1
c0017c66:	89 0d 70 da 02 c0    	mov    DWORD PTR ds:0xc002da70,ecx
c0017c6c:	89 1d 6c da 02 c0    	mov    DWORD PTR ds:0xc002da6c,ebx
c0017c72:	fa                   	cli    
c0017c73:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c0017c78:	83 c0 01             	add    eax,0x1
c0017c7b:	a3 70 da 02 c0       	mov    ds:0xc002da70,eax
c0017c80:	eb 2a                	jmp    c0017cac <cleanerTaskFunction(void*)+0xa0>
c0017c82:	66 90                	xchg   ax,ax
c0017c84:	83 ec 0c             	sub    esp,0xc
c0017c87:	68 74 da 02 c0       	push   0xc002da74
c0017c8c:	e8 37 a8 00 00       	call   c00224c8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017c91:	c7 04 24 74 da 02 c0 	mov    DWORD PTR [esp],0xc002da74
c0017c98:	89 c3                	mov    ebx,eax
c0017c9a:	e8 31 a8 00 00       	call   c00224d0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017c9f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017ca2:	e8 8d fc ff ff       	call   c0017934 <cleanupTerminatedTask(ThreadControlBlock*)>
c0017ca7:	83 c4 10             	add    esp,0x10
c0017caa:	66 90                	xchg   ax,ax
c0017cac:	83 ec 0c             	sub    esp,0xc
c0017caf:	68 74 da 02 c0       	push   0xc002da74
c0017cb4:	e8 f3 a7 00 00       	call   c00224ac <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017cb9:	83 c4 10             	add    esp,0x10
c0017cbc:	84 c0                	test   al,al
c0017cbe:	74 c4                	je     c0017c84 <cleanerTaskFunction(void*)+0x78>
c0017cc0:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c0017cc8:	8b 15 70 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da70
c0017cce:	85 d2                	test   edx,edx
c0017cd0:	75 02                	jne    c0017cd4 <cleanerTaskFunction(void*)+0xc8>
c0017cd2:	fb                   	sti    
c0017cd3:	90                   	nop
c0017cd4:	a1 6c da 02 c0       	mov    eax,ds:0xc002da6c
c0017cd9:	83 e8 01             	sub    eax,0x1
c0017cdc:	a3 6c da 02 c0       	mov    ds:0xc002da6c,eax
c0017ce1:	0f 85 29 ff ff ff    	jne    c0017c10 <cleanerTaskFunction(void*)+0x4>
c0017ce7:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0017cec:	85 c0                	test   eax,eax
c0017cee:	0f 84 1c ff ff ff    	je     c0017c10 <cleanerTaskFunction(void*)+0x4>
c0017cf4:	c7 05 68 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da68,0x0
c0017cfe:	e8 21 f8 ff ff       	call   c0017524 <schedule()>
c0017d03:	e9 08 ff ff ff       	jmp    c0017c10 <cleanerTaskFunction(void*)+0x4>
c0017d08:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c0017d10:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c0017d15:	85 c0                	test   eax,eax
c0017d17:	0f 85 2f ff ff ff    	jne    c0017c4c <cleanerTaskFunction(void*)+0x40>
c0017d1d:	fb                   	sti    
c0017d1e:	e9 29 ff ff ff       	jmp    c0017c4c <cleanerTaskFunction(void*)+0x40>
c0017d23:	90                   	nop

c0017d24 <KeTerminateCurrentThread(int)>:
c0017d24:	83 ec 14             	sub    esp,0x14
c0017d27:	fa                   	cli    
c0017d28:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c0017d2d:	83 c0 01             	add    eax,0x1
c0017d30:	a3 70 da 02 c0       	mov    ds:0xc002da70,eax
c0017d35:	a1 6c da 02 c0       	mov    eax,ds:0xc002da6c
c0017d3a:	83 c0 01             	add    eax,0x1
c0017d3d:	a3 6c da 02 c0       	mov    ds:0xc002da6c,eax
c0017d42:	fa                   	cli    
c0017d43:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c0017d48:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017d4c:	83 c0 01             	add    eax,0x1
c0017d4f:	a3 70 da 02 c0       	mov    ds:0xc002da70,eax
c0017d54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017d59:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0017d5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017d61:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0017d64:	50                   	push   eax
c0017d65:	68 74 da 02 c0       	push   0xc002da74
c0017d6a:	e8 1d a8 00 00       	call   c002258c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017d6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017d74:	83 c4 10             	add    esp,0x10
c0017d77:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0017d7e:	a1 50 da 02 c0       	mov    eax,ds:0xc002da50
c0017d83:	85 c0                	test   eax,eax
c0017d85:	0f 84 81 00 00 00    	je     c0017e0c <KeTerminateCurrentThread(int)+0xe8>
c0017d8b:	83 ec 0c             	sub    esp,0xc
c0017d8e:	c6 05 54 da 02 c0 01 	mov    BYTE PTR ds:0xc002da54,0x1
c0017d95:	50                   	push   eax
c0017d96:	e8 e5 fa ff ff       	call   c0017880 <unblockTask(ThreadControlBlock*)>
c0017d9b:	83 c4 10             	add    esp,0x10
c0017d9e:	66 90                	xchg   ax,ax
c0017da0:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c0017da8:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c0017dad:	85 c0                	test   eax,eax
c0017daf:	75 03                	jne    c0017db4 <KeTerminateCurrentThread(int)+0x90>
c0017db1:	fb                   	sti    
c0017db2:	66 90                	xchg   ax,ax
c0017db4:	a1 6c da 02 c0       	mov    eax,ds:0xc002da6c
c0017db9:	83 e8 01             	sub    eax,0x1
c0017dbc:	a3 6c da 02 c0       	mov    ds:0xc002da6c,eax
c0017dc1:	75 09                	jne    c0017dcc <KeTerminateCurrentThread(int)+0xa8>
c0017dc3:	83 3d 68 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da68,0x0
c0017dca:	75 54                	jne    c0017e20 <KeTerminateCurrentThread(int)+0xfc>
c0017dcc:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c0017dd4:	8b 0d 70 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da70
c0017dda:	85 c9                	test   ecx,ecx
c0017ddc:	75 06                	jne    c0017de4 <KeTerminateCurrentThread(int)+0xc0>
c0017dde:	66 90                	xchg   ax,ax
c0017de0:	fb                   	sti    
c0017de1:	8d 76 00             	lea    esi,[esi+0x0]
c0017de4:	fa                   	cli    
c0017de5:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c0017dea:	83 c0 01             	add    eax,0x1
c0017ded:	a3 70 da 02 c0       	mov    ds:0xc002da70,eax
c0017df2:	e8 2d f7 ff ff       	call   c0017524 <schedule()>
c0017df7:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c0017dff:	8b 15 70 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da70
c0017e05:	85 d2                	test   edx,edx
c0017e07:	75 db                	jne    c0017de4 <KeTerminateCurrentThread(int)+0xc0>
c0017e09:	eb d5                	jmp    c0017de0 <KeTerminateCurrentThread(int)+0xbc>
c0017e0b:	90                   	nop
c0017e0c:	83 ec 0c             	sub    esp,0xc
c0017e0f:	68 fb 54 02 c0       	push   0xc00254fb
c0017e14:	e8 63 f1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017e19:	83 c4 10             	add    esp,0x10
c0017e1c:	eb 82                	jmp    c0017da0 <KeTerminateCurrentThread(int)+0x7c>
c0017e1e:	66 90                	xchg   ax,ax
c0017e20:	c7 05 68 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da68,0x0
c0017e2a:	e8 f5 f6 ff ff       	call   c0017524 <schedule()>
c0017e2f:	eb 9b                	jmp    c0017dcc <KeTerminateCurrentThread(int)+0xa8>
c0017e31:	8d 76 00             	lea    esi,[esi+0x0]

c0017e34 <__static_initialization_and_destruction_0(int, int)>:
c0017e34:	83 ec 0c             	sub    esp,0xc
c0017e37:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017e3c:	0f 85 8e 00 00 00    	jne    c0017ed0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017e42:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0017e4a:	0f 85 80 00 00 00    	jne    c0017ed0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017e50:	83 ec 0c             	sub    esp,0xc
c0017e53:	68 8c da 02 c0       	push   0xc002da8c
c0017e58:	e8 1b ac 00 00       	call   c0022a78 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017e5d:	83 c4 10             	add    esp,0x10
c0017e60:	83 ec 04             	sub    esp,0x4
c0017e63:	68 04 69 02 c0       	push   0xc0026904
c0017e68:	68 8c da 02 c0       	push   0xc002da8c
c0017e6d:	68 28 2a 02 c0       	push   0xc0022a28
c0017e72:	e8 b5 53 ff ff       	call   c000d22c <__cxa_atexit>
c0017e77:	83 c4 10             	add    esp,0x10
c0017e7a:	83 ec 0c             	sub    esp,0xc
c0017e7d:	68 80 da 02 c0       	push   0xc002da80
c0017e82:	e8 f1 ab 00 00       	call   c0022a78 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017e87:	83 c4 10             	add    esp,0x10
c0017e8a:	83 ec 04             	sub    esp,0x4
c0017e8d:	68 04 69 02 c0       	push   0xc0026904
c0017e92:	68 80 da 02 c0       	push   0xc002da80
c0017e97:	68 28 2a 02 c0       	push   0xc0022a28
c0017e9c:	e8 8b 53 ff ff       	call   c000d22c <__cxa_atexit>
c0017ea1:	83 c4 10             	add    esp,0x10
c0017ea4:	83 ec 0c             	sub    esp,0xc
c0017ea7:	68 74 da 02 c0       	push   0xc002da74
c0017eac:	e8 c7 ab 00 00       	call   c0022a78 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017eb1:	83 c4 10             	add    esp,0x10
c0017eb4:	83 ec 04             	sub    esp,0x4
c0017eb7:	68 04 69 02 c0       	push   0xc0026904
c0017ebc:	68 74 da 02 c0       	push   0xc002da74
c0017ec1:	68 28 2a 02 c0       	push   0xc0022a28
c0017ec6:	e8 61 53 ff ff       	call   c000d22c <__cxa_atexit>
c0017ecb:	83 c4 10             	add    esp,0x10
c0017ece:	66 90                	xchg   ax,ax
c0017ed0:	90                   	nop
c0017ed1:	83 c4 0c             	add    esp,0xc
c0017ed4:	c3                   	ret    
c0017ed5:	8d 76 00             	lea    esi,[esi+0x0]

c0017ed8 <_GLOBAL__sub_I_keNextPID>:
c0017ed8:	83 ec 0c             	sub    esp,0xc
c0017edb:	83 ec 08             	sub    esp,0x8
c0017ede:	68 ff ff 00 00       	push   0xffff
c0017ee3:	6a 01                	push   0x1
c0017ee5:	e8 4a ff ff ff       	call   c0017e34 <__static_initialization_and_destruction_0(int, int)>
c0017eea:	83 c4 10             	add    esp,0x10
c0017eed:	83 c4 0c             	add    esp,0xc
c0017ef0:	c3                   	ret    

c0017ef1 <Vm::inbv(unsigned short)>:
c0017ef1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017ef5:	66 81 fa fe fe       	cmp    dx,0xfefe
c0017efa:	74 02                	je     c0017efe <Vm::inbv(unsigned short)+0xd>
c0017efc:	ec                   	in     al,dx
c0017efd:	c3                   	ret    
c0017efe:	a0 d0 da 02 c0       	mov    al,ds:0xc002dad0
c0017f03:	c3                   	ret    

c0017f04 <Vm::outbv(unsigned short, unsigned char)>:
c0017f04:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017f08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f0c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0017f11:	74 02                	je     c0017f15 <Vm::outbv(unsigned short, unsigned char)+0x11>
c0017f13:	ee                   	out    dx,al
c0017f14:	c3                   	ret    
c0017f15:	8b 0d d0 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002dad0
c0017f1b:	8d 51 01             	lea    edx,[ecx+0x1]
c0017f1e:	88 81 e0 da 02 c0    	mov    BYTE PTR [ecx-0x3ffd2520],al
c0017f24:	89 15 d0 da 02 c0    	mov    DWORD PTR ds:0xc002dad0,edx
c0017f2a:	83 fa 20             	cmp    edx,0x20
c0017f2d:	75 e5                	jne    c0017f14 <Vm::outbv(unsigned short, unsigned char)+0x10>
c0017f2f:	c7 05 d0 da 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002dad0,0x1f
c0017f39:	c3                   	ret    

c0017f3a <Vm::realToLinear(unsigned short, unsigned short)>:
c0017f3a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017f3f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017f44:	c1 e0 04             	shl    eax,0x4
c0017f47:	01 d0                	add    eax,edx
c0017f49:	c3                   	ret    

c0017f4a <Vm::getSegment(unsigned int)>:
c0017f4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f4e:	c1 e8 10             	shr    eax,0x10
c0017f51:	c3                   	ret    

c0017f52 <Vm::getOffset(unsigned int)>:
c0017f52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f56:	c3                   	ret    

c0017f57 <Vm::mainloop2()>:
c0017f57:	83 ec 18             	sub    esp,0x18
c0017f5a:	fa                   	cli    
c0017f5b:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c0017f60:	6a 02                	push   0x2
c0017f62:	83 c0 01             	add    eax,0x1
c0017f65:	c6 05 c9 da 02 c0 01 	mov    BYTE PTR ds:0xc002dac9,0x1
c0017f6c:	a3 70 da 02 c0       	mov    ds:0xc002da70,eax
c0017f71:	e8 42 f6 ff ff       	call   c00175b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017f76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f7b:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0017f7f:	52                   	push   edx
c0017f80:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0017f84:	52                   	push   edx
c0017f85:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0017f89:	52                   	push   edx
c0017f8a:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0017f8e:	50                   	push   eax
c0017f8f:	e8 7b 82 fe ff       	call   c000020f <goToVM86>
c0017f94:	83 c4 2c             	add    esp,0x2c
c0017f97:	c3                   	ret    

c0017f98 <Vm::mainVm8086Loop(void*)>:
c0017f98:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c0017fa0:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c0017fa5:	85 c0                	test   eax,eax
c0017fa7:	75 01                	jne    c0017faa <Vm::mainVm8086Loop(void*)+0x12>
c0017fa9:	fb                   	sti    
c0017faa:	eb ab                	jmp    c0017f57 <Vm::mainloop2()>

c0017fac <Vm::mainloop3(unsigned long)>:
c0017fac:	83 ec 18             	sub    esp,0x18
c0017faf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017fb3:	fa                   	cli    
c0017fb4:	8b 15 70 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da70
c0017fba:	6a 02                	push   0x2
c0017fbc:	83 c2 01             	add    edx,0x1
c0017fbf:	c6 05 c8 da 02 c0 01 	mov    BYTE PTR ds:0xc002dac8,0x1
c0017fc6:	89 15 70 da 02 c0    	mov    DWORD PTR ds:0xc002da70,edx
c0017fcc:	a3 c4 da 02 c0       	mov    ds:0xc002dac4,eax
c0017fd1:	e8 e2 f5 ff ff       	call   c00175b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017fd6:	83 c4 1c             	add    esp,0x1c
c0017fd9:	e9 79 ff ff ff       	jmp    c0017f57 <Vm::mainloop2()>

c0017fde <Vm::initialise8086()>:
c0017fde:	83 ec 0c             	sub    esp,0xc
c0017fe1:	68 80 00 00 00       	push   0x80
c0017fe6:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c0017feb:	6a 00                	push   0x0
c0017fed:	68 98 7f 01 c0       	push   0xc0017f98
c0017ff2:	50                   	push   eax
c0017ff3:	e8 6c f2 ff ff       	call   c0017264 <Process::createThread(void (*)(void*), void*, int)>
c0017ff8:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0017fff:	a3 cc da 02 c0       	mov    ds:0xc002dacc,eax
c0018004:	68 10 01 00 00       	push   0x110
c0018009:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c001800e:	6a 00                	push   0x0
c0018010:	6a 00                	push   0x0
c0018012:	8b 90 b2 05 00 00    	mov    edx,DWORD PTR [eax+0x5b2]
c0018018:	52                   	push   edx
c0018019:	e8 a2 ba ff ff       	call   c0013ac0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001801e:	83 c4 2c             	add    esp,0x2c
c0018021:	c3                   	ret    

c0018022 <Vm::resetConventionalMemory8086()>:
c0018022:	c3                   	ret    

c0018023 <Vm::finish8086()>:
c0018023:	53                   	push   ebx
c0018024:	83 ec 08             	sub    esp,0x8
c0018027:	eb 17                	jmp    c0018040 <Vm::finish8086()+0x1d>
c0018029:	e8 f6 f4 ff ff       	call   c0017524 <schedule()>
c001802e:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c0018036:	8b 0d 70 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da70
c001803c:	85 c9                	test   ecx,ecx
c001803e:	74 51                	je     c0018091 <Vm::finish8086()+0x6e>
c0018040:	fa                   	cli    
c0018041:	8b 1d 70 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da70
c0018047:	83 c3 01             	add    ebx,0x1
c001804a:	80 3d c8 da 02 c0 00 	cmp    BYTE PTR ds:0xc002dac8,0x0
c0018051:	89 1d 70 da 02 c0    	mov    DWORD PTR ds:0xc002da70,ebx
c0018057:	74 d0                	je     c0018029 <Vm::finish8086()+0x6>
c0018059:	83 ec 0c             	sub    esp,0xc
c001805c:	a1 cc da 02 c0       	mov    eax,ds:0xc002dacc
c0018061:	8b 1d c4 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dac4
c0018067:	50                   	push   eax
c0018068:	c6 05 c8 da 02 c0 00 	mov    BYTE PTR ds:0xc002dac8,0x0
c001806f:	e8 0c f8 ff ff       	call   c0017880 <unblockTask(ThreadControlBlock*)>
c0018074:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c001807c:	8b 15 70 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da70
c0018082:	83 c4 10             	add    esp,0x10
c0018085:	85 d2                	test   edx,edx
c0018087:	75 01                	jne    c001808a <Vm::finish8086()+0x67>
c0018089:	fb                   	sti    
c001808a:	89 d8                	mov    eax,ebx
c001808c:	83 c4 08             	add    esp,0x8
c001808f:	5b                   	pop    ebx
c0018090:	c3                   	ret    
c0018091:	fb                   	sti    
c0018092:	eb ac                	jmp    c0018040 <Vm::finish8086()+0x1d>

c0018094 <Vm::getOutput8086(unsigned char*)>:
c0018094:	57                   	push   edi
c0018095:	8b 0d d0 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002dad0
c001809b:	56                   	push   esi
c001809c:	be e0 da 02 c0       	mov    esi,0xc002dae0
c00180a1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00180a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00180a7:	a1 d0 da 02 c0       	mov    eax,ds:0xc002dad0
c00180ac:	5e                   	pop    esi
c00180ad:	c7 05 d0 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dad0,0x0
c00180b7:	5f                   	pop    edi
c00180b8:	c3                   	ret    

c00180b9 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00180b9:	55                   	push   ebp
c00180ba:	57                   	push   edi
c00180bb:	56                   	push   esi
c00180bc:	53                   	push   ebx
c00180bd:	83 ec 2c             	sub    esp,0x2c
c00180c0:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00180c4:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00180c8:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c00180cc:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00180d0:	80 3d c0 da 02 c0 00 	cmp    BYTE PTR ds:0xc002dac0,0x0
c00180d7:	75 1f                	jne    c00180f8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>
c00180d9:	e9 bb 00 00 00       	jmp    c0018199 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xe0>
c00180de:	e8 41 f4 ff ff       	call   c0017524 <schedule()>
c00180e3:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c00180eb:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c00180f0:	85 c0                	test   eax,eax
c00180f2:	0f 84 9b 00 00 00    	je     c0018193 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xda>
c00180f8:	fa                   	cli    
c00180f9:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c00180fe:	83 c0 01             	add    eax,0x1
c0018101:	80 3d c9 da 02 c0 00 	cmp    BYTE PTR ds:0xc002dac9,0x0
c0018108:	a3 70 da 02 c0       	mov    ds:0xc002da70,eax
c001810d:	74 cf                	je     c00180de <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x25>
c001810f:	83 ec 04             	sub    esp,0x4
c0018112:	a1 cc da 02 c0       	mov    eax,ds:0xc002dacc
c0018117:	c7 05 d0 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dad0,0x0
c0018121:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c0018125:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0018129:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001812d:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c0018131:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0018135:	0f b7 f6             	movzx  esi,si
c0018138:	6a 20                	push   0x20
c001813a:	0f b7 db             	movzx  ebx,bx
c001813d:	6a 00                	push   0x0
c001813f:	68 e0 da 02 c0       	push   0xc002dae0
c0018144:	e8 a7 83 fe ff       	call   c00004f0 <memset>
c0018149:	5a                   	pop    edx
c001814a:	59                   	pop    ecx
c001814b:	56                   	push   esi
c001814c:	53                   	push   ebx
c001814d:	e8 e8 fd ff ff       	call   c0017f3a <Vm::realToLinear(unsigned short, unsigned short)>
c0018152:	83 c4 10             	add    esp,0x10
c0018155:	89 c7                	mov    edi,eax
c0018157:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001815b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001815f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018161:	c6 05 c9 da 02 c0 00 	mov    BYTE PTR ds:0xc002dac9,0x0
c0018168:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c0018170:	8b 1d 70 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da70
c0018176:	85 db                	test   ebx,ebx
c0018178:	75 01                	jne    c001817b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xc2>
c001817a:	fb                   	sti    
c001817b:	83 ec 0c             	sub    esp,0xc
c001817e:	a1 cc da 02 c0       	mov    eax,ds:0xc002dacc
c0018183:	50                   	push   eax
c0018184:	e8 f7 f6 ff ff       	call   c0017880 <unblockTask(ThreadControlBlock*)>
c0018189:	83 c4 3c             	add    esp,0x3c
c001818c:	b0 01                	mov    al,0x1
c001818e:	5b                   	pop    ebx
c001818f:	5e                   	pop    esi
c0018190:	5f                   	pop    edi
c0018191:	5d                   	pop    ebp
c0018192:	c3                   	ret    
c0018193:	fb                   	sti    
c0018194:	e9 5f ff ff ff       	jmp    c00180f8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>
c0018199:	83 ec 0c             	sub    esp,0xc
c001819c:	68 14 01 00 00       	push   0x114
c00181a1:	e8 bd 75 ff ff       	call   c000f763 <malloc>
c00181a6:	83 c4 0c             	add    esp,0xc
c00181a9:	89 c2                	mov    edx,eax
c00181ab:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c00181b0:	50                   	push   eax
c00181b1:	68 14 56 02 c0       	push   0xc0025614
c00181b6:	52                   	push   edx
c00181b7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00181bb:	e8 ca ff fe ff       	call   c000818a <File::File(char const*, Process*)>
c00181c0:	58                   	pop    eax
c00181c1:	5a                   	pop    edx
c00181c2:	6a 12                	push   0x12
c00181c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181c8:	52                   	push   edx
c00181c9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00181cd:	e8 d6 ff fe ff       	call   c00081a8 <File::open(FileOpenMode)>
c00181d2:	59                   	pop    ecx
c00181d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181d7:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00181db:	8b 02                	mov    eax,DWORD PTR [edx]
c00181dd:	51                   	push   ecx
c00181de:	6a 00                	push   0x0
c00181e0:	6a 00                	push   0x0
c00181e2:	68 00 00 11 00       	push   0x110000
c00181e7:	52                   	push   edx
c00181e8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00181ec:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00181ef:	83 c4 14             	add    esp,0x14
c00181f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181f6:	52                   	push   edx
c00181f7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00181fb:	e8 06 00 ff ff       	call   c0008206 <File::close()>
c0018200:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018204:	8b 02                	mov    eax,DWORD PTR [edx]
c0018206:	89 14 24             	mov    DWORD PTR [esp],edx
c0018209:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001820c:	c6 05 c0 da 02 c0 01 	mov    BYTE PTR ds:0xc002dac0,0x1
c0018213:	83 c4 10             	add    esp,0x10
c0018216:	e9 dd fe ff ff       	jmp    c00180f8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>

c001821b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001821b:	55                   	push   ebp
c001821c:	57                   	push   edi
c001821d:	56                   	push   esi
c001821e:	53                   	push   ebx
c001821f:	83 ec 2c             	sub    esp,0x2c
c0018222:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018226:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001822a:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001822e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018232:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0018236:	80 3d c0 da 02 c0 00 	cmp    BYTE PTR ds:0xc002dac0,0x0
c001823d:	0f 84 59 01 00 00    	je     c001839c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x181>
c0018243:	83 ec 08             	sub    esp,0x8
c0018246:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001824a:	51                   	push   ecx
c001824b:	68 78 56 02 c0       	push   0xc0025678
c0018250:	e8 27 ed fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018255:	83 c4 10             	add    esp,0x10
c0018258:	eb 1a                	jmp    c0018274 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x59>
c001825a:	e8 c5 f2 ff ff       	call   c0017524 <schedule()>
c001825f:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c0018267:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c001826c:	85 c0                	test   eax,eax
c001826e:	0f 84 22 01 00 00    	je     c0018396 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17b>
c0018274:	fa                   	cli    
c0018275:	8b 15 70 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da70
c001827b:	8a 1d c9 da 02 c0    	mov    bl,BYTE PTR ds:0xc002dac9
c0018281:	83 c2 01             	add    edx,0x1
c0018284:	84 db                	test   bl,bl
c0018286:	89 15 70 da 02 c0    	mov    DWORD PTR ds:0xc002da70,edx
c001828c:	74 cc                	je     c001825a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>
c001828e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018292:	a1 cc da 02 c0       	mov    eax,ds:0xc002dacc
c0018297:	83 ec 04             	sub    esp,0x4
c001829a:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001829e:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c00182a2:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c00182a6:	66 89 68 5b          	mov    WORD PTR [eax+0x5b],bp
c00182aa:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00182ae:	c7 05 d0 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dad0,0x0
c00182b8:	6a 20                	push   0x20
c00182ba:	6a 00                	push   0x0
c00182bc:	68 e0 da 02 c0       	push   0xc002dae0
c00182c1:	e8 2a 82 fe ff       	call   c00004f0 <memset>
c00182c6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00182cd:	e8 91 74 ff ff       	call   c000f763 <malloc>
c00182d2:	83 c4 0c             	add    esp,0xc
c00182d5:	89 c7                	mov    edi,eax
c00182d7:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c00182dc:	50                   	push   eax
c00182dd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00182e1:	50                   	push   eax
c00182e2:	57                   	push   edi
c00182e3:	e8 a2 fe fe ff       	call   c000818a <File::File(char const*, Process*)>
c00182e8:	83 c4 10             	add    esp,0x10
c00182eb:	85 ff                	test   edi,edi
c00182ed:	0f 84 66 01 00 00    	je     c0018459 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x23e>
c00182f3:	83 ec 04             	sub    esp,0x4
c00182f6:	8d 44 24 17          	lea    eax,[esp+0x17]
c00182fa:	50                   	push   eax
c00182fb:	8d 44 24 20          	lea    eax,[esp+0x20]
c00182ff:	50                   	push   eax
c0018300:	57                   	push   edi
c0018301:	e8 a4 01 ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c0018306:	8a 4c 24 23          	mov    cl,BYTE PTR [esp+0x23]
c001830a:	83 c4 10             	add    esp,0x10
c001830d:	84 c9                	test   cl,cl
c001830f:	0f 85 e9 00 00 00    	jne    c00183fe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1e3>
c0018315:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018319:	83 ec 08             	sub    esp,0x8
c001831c:	6a 01                	push   0x1
c001831e:	57                   	push   edi
c001831f:	e8 84 fe fe ff       	call   c00081a8 <File::open(FileOpenMode)>
c0018324:	83 c4 10             	add    esp,0x10
c0018327:	85 c0                	test   eax,eax
c0018329:	0f 85 fd 00 00 00    	jne    c001842c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x211>
c001832f:	83 ec 08             	sub    esp,0x8
c0018332:	0f b7 c5             	movzx  eax,bp
c0018335:	0f b7 f6             	movzx  esi,si
c0018338:	56                   	push   esi
c0018339:	50                   	push   eax
c001833a:	e8 fb fb ff ff       	call   c0017f3a <Vm::realToLinear(unsigned short, unsigned short)>
c001833f:	5a                   	pop    edx
c0018340:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0018342:	8d 54 24 20          	lea    edx,[esp+0x20]
c0018346:	52                   	push   edx
c0018347:	50                   	push   eax
c0018348:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001834c:	56                   	push   esi
c001834d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0018351:	55                   	push   ebp
c0018352:	57                   	push   edi
c0018353:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0018356:	83 c4 14             	add    esp,0x14
c0018359:	57                   	push   edi
c001835a:	e8 a7 fe fe ff       	call   c0008206 <File::close()>
c001835f:	c6 05 c9 da 02 c0 00 	mov    BYTE PTR ds:0xc002dac9,0x0
c0018366:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c001836e:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c0018373:	83 c4 10             	add    esp,0x10
c0018376:	85 c0                	test   eax,eax
c0018378:	75 01                	jne    c001837b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x160>
c001837a:	fb                   	sti    
c001837b:	83 ec 0c             	sub    esp,0xc
c001837e:	a1 cc da 02 c0       	mov    eax,ds:0xc002dacc
c0018383:	50                   	push   eax
c0018384:	e8 f7 f4 ff ff       	call   c0017880 <unblockTask(ThreadControlBlock*)>
c0018389:	83 c4 10             	add    esp,0x10
c001838c:	83 c4 2c             	add    esp,0x2c
c001838f:	88 d8                	mov    al,bl
c0018391:	5b                   	pop    ebx
c0018392:	5e                   	pop    esi
c0018393:	5f                   	pop    edi
c0018394:	5d                   	pop    ebp
c0018395:	c3                   	ret    
c0018396:	fb                   	sti    
c0018397:	e9 d8 fe ff ff       	jmp    c0018274 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x59>
c001839c:	83 ec 0c             	sub    esp,0xc
c001839f:	68 14 01 00 00       	push   0x114
c00183a4:	e8 ba 73 ff ff       	call   c000f763 <malloc>
c00183a9:	83 c4 0c             	add    esp,0xc
c00183ac:	89 c3                	mov    ebx,eax
c00183ae:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c00183b3:	50                   	push   eax
c00183b4:	68 14 56 02 c0       	push   0xc0025614
c00183b9:	53                   	push   ebx
c00183ba:	e8 cb fd fe ff       	call   c000818a <File::File(char const*, Process*)>
c00183bf:	58                   	pop    eax
c00183c0:	5a                   	pop    edx
c00183c1:	6a 12                	push   0x12
c00183c3:	53                   	push   ebx
c00183c4:	e8 df fd fe ff       	call   c00081a8 <File::open(FileOpenMode)>
c00183c9:	59                   	pop    ecx
c00183ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c00183cc:	8d 4c 24 24          	lea    ecx,[esp+0x24]
c00183d0:	51                   	push   ecx
c00183d1:	6a 00                	push   0x0
c00183d3:	6a 00                	push   0x0
c00183d5:	68 00 00 11 00       	push   0x110000
c00183da:	53                   	push   ebx
c00183db:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00183de:	83 c4 14             	add    esp,0x14
c00183e1:	53                   	push   ebx
c00183e2:	e8 1f fe fe ff       	call   c0008206 <File::close()>
c00183e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00183e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00183ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00183ef:	c6 05 c0 da 02 c0 01 	mov    BYTE PTR ds:0xc002dac0,0x1
c00183f6:	83 c4 10             	add    esp,0x10
c00183f9:	e9 45 fe ff ff       	jmp    c0018243 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x28>
c00183fe:	83 ec 0c             	sub    esp,0xc
c0018401:	68 43 56 02 c0       	push   0xc0025643
c0018406:	e8 b5 77 ff ff       	call   c000fbc0 <KePanic(char const*)>
c001840b:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c0018413:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c0018418:	83 c4 10             	add    esp,0x10
c001841b:	85 c0                	test   eax,eax
c001841d:	75 01                	jne    c0018420 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x205>
c001841f:	fb                   	sti    
c0018420:	83 c4 2c             	add    esp,0x2c
c0018423:	31 db                	xor    ebx,ebx
c0018425:	88 d8                	mov    al,bl
c0018427:	5b                   	pop    ebx
c0018428:	5e                   	pop    esi
c0018429:	5f                   	pop    edi
c001842a:	5d                   	pop    ebp
c001842b:	c3                   	ret    
c001842c:	83 ec 0c             	sub    esp,0xc
c001842f:	68 5c 56 02 c0       	push   0xc002565c
c0018434:	e8 87 77 ff ff       	call   c000fbc0 <KePanic(char const*)>
c0018439:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c0018441:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c0018446:	83 c4 10             	add    esp,0x10
c0018449:	85 c0                	test   eax,eax
c001844b:	75 d3                	jne    c0018420 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x205>
c001844d:	fb                   	sti    
c001844e:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018452:	88 cb                	mov    bl,cl
c0018454:	e9 33 ff ff ff       	jmp    c001838c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x171>
c0018459:	83 ec 0c             	sub    esp,0xc
c001845c:	68 2f 56 02 c0       	push   0xc002562f
c0018461:	eb a3                	jmp    c0018406 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1eb>

c0018463 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018463:	57                   	push   edi
c0018464:	56                   	push   esi
c0018465:	53                   	push   ebx
c0018466:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001846a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001846e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018472:	83 e8 06             	sub    eax,0x6
c0018475:	0f b7 c0             	movzx  eax,ax
c0018478:	50                   	push   eax
c0018479:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001847e:	50                   	push   eax
c001847f:	e8 b6 fa ff ff       	call   c0017f3a <Vm::realToLinear(unsigned short, unsigned short)>
c0018484:	5a                   	pop    edx
c0018485:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018488:	5b                   	pop    ebx
c0018489:	8d 56 fa             	lea    edx,[esi-0x6]
c001848c:	8b 59 38             	mov    ebx,DWORD PTR [ecx+0x38]
c001848f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018495:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018498:	8d 53 02             	lea    edx,[ebx+0x2]
c001849b:	66 89 10             	mov    WORD PTR [eax],dx
c001849e:	66 8b 51 3c          	mov    dx,WORD PTR [ecx+0x3c]
c00184a2:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00184a6:	8b 59 40             	mov    ebx,DWORD PTR [ecx+0x40]
c00184a9:	66 8b 71 40          	mov    si,WORD PTR [ecx+0x40]
c00184ad:	0f b6 d7             	movzx  edx,bh
c00184b0:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00184b4:	c1 e2 08             	shl    edx,0x8
c00184b7:	8b 35 00 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002000
c00184bd:	80 7e 61 00          	cmp    BYTE PTR [esi+0x61],0x0
c00184c1:	0f b6 f3             	movzx  esi,bl
c00184c4:	74 2c                	je     c00184f2 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x8f>
c00184c6:	09 f2                	or     edx,esi
c00184c8:	80 ce 02             	or     dh,0x2
c00184cb:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00184cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00184d4:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00184d8:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c00184e0:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00184e3:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c00184eb:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00184ee:	5b                   	pop    ebx
c00184ef:	5e                   	pop    esi
c00184f0:	5f                   	pop    edi
c00184f1:	c3                   	ret    
c00184f2:	09 f2                	or     edx,esi
c00184f4:	80 e6 fd             	and    dh,0xfd
c00184f7:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00184fb:	eb d2                	jmp    c00184cf <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6c>

c00184fd <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00184fd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018502:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018507:	c1 e0 04             	shl    eax,0x4
c001850a:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001850d:	c3                   	ret    

c001850e <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001850e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018513:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018518:	c1 e0 04             	shl    eax,0x4
c001851b:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001851f:	c3                   	ret    

c0018520 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0018520:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018525:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001852a:	c1 e0 04             	shl    eax,0x4
c001852d:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0018530:	c3                   	ret    

c0018531 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018531:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018536:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001853b:	c1 e0 04             	shl    eax,0x4
c001853e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018542:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018545:	c3                   	ret    

c0018546 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018546:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001854b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018550:	c1 e0 04             	shl    eax,0x4
c0018553:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018557:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001855b:	c3                   	ret    

c001855c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001855c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018561:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018566:	c1 e0 04             	shl    eax,0x4
c0018569:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001856d:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018570:	c3                   	ret    

c0018571 <Vm::faultHandler(regs*)>:
c0018571:	55                   	push   ebp
c0018572:	57                   	push   edi
c0018573:	56                   	push   esi
c0018574:	53                   	push   ebx
c0018575:	83 ec 1c             	sub    esp,0x1c
c0018578:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001857c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001857f:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0018583:	89 c6                	mov    esi,eax
c0018585:	52                   	push   edx
c0018586:	0f b7 c0             	movzx  eax,ax
c0018589:	50                   	push   eax
c001858a:	e8 ab f9 ff ff       	call   c0017f3a <Vm::realToLinear(unsigned short, unsigned short)>
c001858f:	59                   	pop    ecx
c0018590:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0018593:	5f                   	pop    edi
c0018594:	0f b7 d5             	movzx  edx,bp
c0018597:	8b 7b 44             	mov    edi,DWORD PTR [ebx+0x44]
c001859a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001859e:	89 c1                	mov    ecx,eax
c00185a0:	0f b7 c7             	movzx  eax,di
c00185a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00185a7:	50                   	push   eax
c00185a8:	52                   	push   edx
c00185a9:	e8 8c f9 ff ff       	call   c0017f3a <Vm::realToLinear(unsigned short, unsigned short)>
c00185ae:	83 c4 08             	add    esp,0x8
c00185b1:	c6 44 24 06 06       	mov    BYTE PTR [esp+0x6],0x6
c00185b6:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c00185bb:	c6 44 24 05 00       	mov    BYTE PTR [esp+0x5],0x0
c00185c0:	8a 11                	mov    dl,BYTE PTR [ecx]
c00185c2:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c00185c6:	83 ea 26             	sub    edx,0x26
c00185c9:	0f b6 d2             	movzx  edx,dl
c00185cc:	81 fa d5 00 00 00    	cmp    edx,0xd5
c00185d2:	0f 87 04 04 00 00    	ja     c00189dc <Vm::faultHandler(regs*)+0x46b>
c00185d8:	ff 24 95 fc 56 02 c0 	jmp    DWORD PTR [edx*4-0x3ffda904]
c00185df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00185e4:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c00185e8:	b0 01                	mov    al,0x1
c00185ea:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00185ed:	83 c5 01             	add    ebp,0x1
c00185f0:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c00185f3:	83 c4 1c             	add    esp,0x1c
c00185f6:	5b                   	pop    ebx
c00185f7:	5e                   	pop    esi
c00185f8:	5f                   	pop    edi
c00185f9:	5d                   	pop    ebp
c00185fa:	c3                   	ret    
c00185fb:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00185fe:	c6 44 24 06 02       	mov    BYTE PTR [esp+0x6],0x2
c0018603:	83 c2 01             	add    edx,0x1
c0018606:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018609:	83 c1 01             	add    ecx,0x1
c001860c:	eb b2                	jmp    c00185c0 <Vm::faultHandler(regs*)+0x4f>
c001860e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018611:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c0018616:	83 c2 01             	add    edx,0x1
c0018619:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001861c:	eb eb                	jmp    c0018609 <Vm::faultHandler(regs*)+0x98>
c001861e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018621:	c6 44 24 06 05       	mov    BYTE PTR [esp+0x6],0x5
c0018626:	83 c2 01             	add    edx,0x1
c0018629:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001862c:	eb db                	jmp    c0018609 <Vm::faultHandler(regs*)+0x98>
c001862e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018631:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c0018636:	83 c2 01             	add    edx,0x1
c0018639:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001863c:	eb cb                	jmp    c0018609 <Vm::faultHandler(regs*)+0x98>
c001863e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018641:	c6 44 24 06 03       	mov    BYTE PTR [esp+0x6],0x3
c0018646:	83 c2 01             	add    edx,0x1
c0018649:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001864c:	eb bb                	jmp    c0018609 <Vm::faultHandler(regs*)+0x98>
c001864e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018651:	c6 44 24 06 04       	mov    BYTE PTR [esp+0x6],0x4
c0018656:	83 c2 01             	add    edx,0x1
c0018659:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001865c:	eb ab                	jmp    c0018609 <Vm::faultHandler(regs*)+0x98>
c001865e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018661:	c6 44 24 05 01       	mov    BYTE PTR [esp+0x5],0x1
c0018666:	83 c2 01             	add    edx,0x1
c0018669:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001866c:	eb 9b                	jmp    c0018609 <Vm::faultHandler(regs*)+0x98>
c001866e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018671:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0018676:	83 c2 01             	add    edx,0x1
c0018679:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001867c:	eb 8b                	jmp    c0018609 <Vm::faultHandler(regs*)+0x98>
c001867e:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018681:	f6 44 24 07 01       	test   BYTE PTR [esp+0x7],0x1
c0018686:	74 0d                	je     c0018695 <Vm::faultHandler(regs*)+0x124>
c0018688:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001868f:	0f 87 8a 06 00 00    	ja     c0018d1f <Vm::faultHandler(regs*)+0x7ae>
c0018695:	83 ec 0c             	sub    esp,0xc
c0018698:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001869c:	0f b7 f6             	movzx  esi,si
c001869f:	50                   	push   eax
c00186a0:	e8 4c f8 ff ff       	call   c0017ef1 <Vm::inbv(unsigned short)>
c00186a5:	83 c4 0c             	add    esp,0xc
c00186a8:	0f b6 c0             	movzx  eax,al
c00186ab:	50                   	push   eax
c00186ac:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00186b0:	50                   	push   eax
c00186b1:	56                   	push   esi
c00186b2:	e8 7a fe ff ff       	call   c0018531 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00186b7:	83 c4 10             	add    esp,0x10
c00186ba:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00186bd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00186c1:	0f 84 d6 05 00 00    	je     c0018c9d <Vm::faultHandler(regs*)+0x72c>
c00186c7:	83 e8 01             	sub    eax,0x1
c00186ca:	0f b7 c0             	movzx  eax,ax
c00186cd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00186d0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00186d3:	83 c0 01             	add    eax,0x1
c00186d6:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00186d9:	83 c4 1c             	add    esp,0x1c
c00186dc:	b0 01                	mov    al,0x1
c00186de:	5b                   	pop    ebx
c00186df:	5e                   	pop    esi
c00186e0:	5f                   	pop    edi
c00186e1:	5d                   	pop    ebp
c00186e2:	c3                   	ret    
c00186e3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00186e6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00186e9:	f6 44 24 07 01       	test   BYTE PTR [esp+0x7],0x1
c00186ee:	0f 85 98 04 00 00    	jne    c0018b8c <Vm::faultHandler(regs*)+0x61b>
c00186f4:	0f b7 c8             	movzx  ecx,ax
c00186f7:	0f b7 f6             	movzx  esi,si
c00186fa:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00186fd:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018702:	0f 84 35 05 00 00    	je     c0018c3d <Vm::faultHandler(regs*)+0x6cc>
c0018708:	ed                   	in     eax,dx
c0018709:	83 ec 04             	sub    esp,0x4
c001870c:	50                   	push   eax
c001870d:	51                   	push   ecx
c001870e:	56                   	push   esi
c001870f:	e8 48 fe ff ff       	call   c001855c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018714:	83 c4 10             	add    esp,0x10
c0018717:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001871a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001871e:	0f 84 9d 05 00 00    	je     c0018cc1 <Vm::faultHandler(regs*)+0x750>
c0018724:	83 e8 04             	sub    eax,0x4
c0018727:	25 ff ff 00 00       	and    eax,0xffff
c001872c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001872f:	eb 9f                	jmp    c00186d0 <Vm::faultHandler(regs*)+0x15f>
c0018731:	0f b6 44 24 06       	movzx  eax,BYTE PTR [esp+0x6]
c0018736:	83 f8 06             	cmp    eax,0x6
c0018739:	0f 87 60 03 00 00    	ja     c0018a9f <Vm::faultHandler(regs*)+0x52e>
c001873f:	ff 24 85 54 5a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda5ac]
c0018746:	0f b6 44 24 06       	movzx  eax,BYTE PTR [esp+0x6]
c001874b:	83 f8 06             	cmp    eax,0x6
c001874e:	0f 87 f6 02 00 00    	ja     c0018a4a <Vm::faultHandler(regs*)+0x4d9>
c0018754:	ff 24 85 70 5a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda590]
c001875b:	83 ec 08             	sub    esp,0x8
c001875e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018762:	50                   	push   eax
c0018763:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018767:	50                   	push   eax
c0018768:	e8 97 f7 ff ff       	call   c0017f04 <Vm::outbv(unsigned short, unsigned char)>
c001876d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0018770:	83 c4 10             	add    esp,0x10
c0018773:	83 c0 02             	add    eax,0x2
c0018776:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018779:	b0 01                	mov    al,0x1
c001877b:	e9 73 fe ff ff       	jmp    c00185f3 <Vm::faultHandler(regs*)+0x82>
c0018780:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018784:	3d ee 00 00 00       	cmp    eax,0xee
c0018789:	0f 84 5a 04 00 00    	je     c0018be9 <Vm::faultHandler(regs*)+0x678>
c001878f:	83 ec 0c             	sub    esp,0xc
c0018792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018796:	52                   	push   edx
c0018797:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001879b:	56                   	push   esi
c001879c:	51                   	push   ecx
c001879d:	50                   	push   eax
c001879e:	53                   	push   ebx
c001879f:	e8 bf fc ff ff       	call   c0018463 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00187a4:	83 c4 20             	add    esp,0x20
c00187a7:	b0 01                	mov    al,0x1
c00187a9:	e9 45 fe ff ff       	jmp    c00185f3 <Vm::faultHandler(regs*)+0x82>
c00187ae:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00187b2:	89 d1                	mov    ecx,edx
c00187b4:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00187b7:	c1 e1 08             	shl    ecx,0x8
c00187ba:	09 ca                	or     edx,ecx
c00187bc:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00187bf:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00187c3:	89 d1                	mov    ecx,edx
c00187c5:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00187c9:	c1 e1 08             	shl    ecx,0x8
c00187cc:	09 ca                	or     edx,ecx
c00187ce:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00187d1:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00187d5:	89 d1                	mov    ecx,edx
c00187d7:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00187db:	c1 e1 08             	shl    ecx,0x8
c00187de:	09 ca                	or     edx,ecx
c00187e0:	81 ca 00 02 02 00    	or     edx,0x20200
c00187e6:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00187e9:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00187ed:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00187f3:	d1 e8                	shr    eax,1
c00187f5:	83 e0 01             	and    eax,0x1
c00187f8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00187fb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00187fe:	83 c0 06             	add    eax,0x6
c0018801:	25 ff ff 00 00       	and    eax,0xffff
c0018806:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018809:	b0 01                	mov    al,0x1
c001880b:	e9 e3 fd ff ff       	jmp    c00185f3 <Vm::faultHandler(regs*)+0x82>
c0018810:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018813:	83 ec 0c             	sub    esp,0xc
c0018816:	b0 00                	mov    al,0x0
c0018818:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001881b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001881f:	50                   	push   eax
c0018820:	e8 cc f6 ff ff       	call   c0017ef1 <Vm::inbv(unsigned short)>
c0018825:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018828:	0f b6 c0             	movzx  eax,al
c001882b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001882e:	09 c2                	or     edx,eax
c0018830:	83 c1 02             	add    ecx,0x2
c0018833:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0018836:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0018839:	83 c4 10             	add    esp,0x10
c001883c:	b0 01                	mov    al,0x1
c001883e:	e9 b0 fd ff ff       	jmp    c00185f3 <Vm::faultHandler(regs*)+0x82>
c0018843:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018848:	0f 85 7a 03 00 00    	jne    c0018bc8 <Vm::faultHandler(regs*)+0x657>
c001884e:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0018851:	81 e6 00 00 ff ff    	and    esi,0xffff0000
c0018857:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001885a:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001885e:	66 ed                	in     ax,dx
c0018860:	0f b7 c0             	movzx  eax,ax
c0018863:	09 f0                	or     eax,esi
c0018865:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018868:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c001886b:	83 c0 02             	add    eax,0x2
c001886e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018871:	83 c4 1c             	add    esp,0x1c
c0018874:	b0 01                	mov    al,0x1
c0018876:	5b                   	pop    ebx
c0018877:	5e                   	pop    esi
c0018878:	5f                   	pop    edi
c0018879:	5d                   	pop    ebp
c001887a:	c3                   	ret    
c001887b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001887e:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018883:	0f 84 d7 02 00 00    	je     c0018b60 <Vm::faultHandler(regs*)+0x5ef>
c0018889:	83 ef 04             	sub    edi,0x4
c001888c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018892:	81 e7 ff ff 00 00    	and    edi,0xffff
c0018898:	89 7b 44             	mov    DWORD PTR [ebx+0x44],edi
c001889b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001889e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00188a4:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00188a8:	0f 84 22 fe ff ff    	je     c00186d0 <Vm::faultHandler(regs*)+0x15f>
c00188ae:	80 ce 02             	or     dh,0x2
c00188b1:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00188b4:	e9 17 fe ff ff       	jmp    c00186d0 <Vm::faultHandler(regs*)+0x15f>
c00188b9:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c00188be:	0f 84 6b 02 00 00    	je     c0018b2f <Vm::faultHandler(regs*)+0x5be>
c00188c4:	8b 10                	mov    edx,DWORD PTR [eax]
c00188c6:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00188cc:	81 ca 00 02 02 00    	or     edx,0x20200
c00188d2:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00188d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00188d7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00188dd:	c1 e8 09             	shr    eax,0x9
c00188e0:	83 e0 01             	and    eax,0x1
c00188e3:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00188e6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00188e9:	83 c0 04             	add    eax,0x4
c00188ec:	25 ff ff 00 00       	and    eax,0xffff
c00188f1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00188f4:	e9 d7 fd ff ff       	jmp    c00186d0 <Vm::faultHandler(regs*)+0x15f>
c00188f9:	83 ec 08             	sub    esp,0x8
c00188fc:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018900:	50                   	push   eax
c0018901:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018905:	50                   	push   eax
c0018906:	e8 f9 f5 ff ff       	call   c0017f04 <Vm::outbv(unsigned short, unsigned char)>
c001890b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001890e:	83 c4 10             	add    esp,0x10
c0018911:	83 c2 01             	add    edx,0x1
c0018914:	b0 01                	mov    al,0x1
c0018916:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018919:	e9 d5 fc ff ff       	jmp    c00185f3 <Vm::faultHandler(regs*)+0x82>
c001891e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018921:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018924:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018929:	0f 84 ac 02 00 00    	je     c0018bdb <Vm::faultHandler(regs*)+0x66a>
c001892f:	ef                   	out    dx,eax
c0018930:	e9 9b fd ff ff       	jmp    c00186d0 <Vm::faultHandler(regs*)+0x15f>
c0018935:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018938:	83 c2 01             	add    edx,0x1
c001893b:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001893e:	e9 c6 fc ff ff       	jmp    c0018609 <Vm::faultHandler(regs*)+0x98>
c0018943:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018948:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001894c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c001894f:	83 c0 01             	add    eax,0x1
c0018952:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018955:	b0 01                	mov    al,0x1
c0018957:	e9 97 fc ff ff       	jmp    c00185f3 <Vm::faultHandler(regs*)+0x82>
c001895c:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001895f:	83 ec 0c             	sub    esp,0xc
c0018962:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018966:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c001896c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001896f:	50                   	push   eax
c0018970:	e8 7c f5 ff ff       	call   c0017ef1 <Vm::inbv(unsigned short)>
c0018975:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0018978:	0f b6 c0             	movzx  eax,al
c001897b:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001897e:	09 c7                	or     edi,eax
c0018980:	83 c5 01             	add    ebp,0x1
c0018983:	89 7b 2c             	mov    DWORD PTR [ebx+0x2c],edi
c0018986:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0018989:	83 c4 10             	add    esp,0x10
c001898c:	b0 01                	mov    al,0x1
c001898e:	e9 60 fc ff ff       	jmp    c00185f3 <Vm::faultHandler(regs*)+0x82>
c0018993:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018996:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c001899b:	0f 85 34 02 00 00    	jne    c0018bd5 <Vm::faultHandler(regs*)+0x664>
c00189a1:	66 ed                	in     ax,dx
c00189a3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00189a6:	0f b7 c0             	movzx  eax,ax
c00189a9:	81 e2 00 00 ff ff    	and    edx,0xffff0000
c00189af:	09 d0                	or     eax,edx
c00189b1:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00189b4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00189b7:	83 c1 01             	add    ecx,0x1
c00189ba:	b0 01                	mov    al,0x1
c00189bc:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c00189bf:	e9 2f fc ff ff       	jmp    c00185f3 <Vm::faultHandler(regs*)+0x82>
c00189c4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00189c7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00189cb:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c00189d0:	0f 84 0c 02 00 00    	je     c0018be2 <Vm::faultHandler(regs*)+0x671>
c00189d6:	ef                   	out    dx,eax
c00189d7:	e9 8c fe ff ff       	jmp    c0018868 <Vm::faultHandler(regs*)+0x2f7>
c00189dc:	0f b6 74 24 04       	movzx  esi,BYTE PTR [esp+0x4]
c00189e1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00189e5:	50                   	push   eax
c00189e6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00189ea:	50                   	push   eax
c00189eb:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00189ef:	50                   	push   eax
c00189f0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00189f4:	50                   	push   eax
c00189f5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00189f9:	50                   	push   eax
c00189fa:	56                   	push   esi
c00189fb:	56                   	push   esi
c00189fc:	68 cc 56 02 c0       	push   0xc00256cc
c0018a01:	e8 76 e5 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018a06:	83 c4 20             	add    esp,0x20
c0018a09:	eb 05                	jmp    c0018a10 <Vm::faultHandler(regs*)+0x49f>
c0018a0b:	83 f8 5a             	cmp    eax,0x5a
c0018a0e:	74 27                	je     c0018a37 <Vm::faultHandler(regs*)+0x4c6>
c0018a10:	83 ec 0c             	sub    esp,0xc
c0018a13:	6a 60                	push   0x60
c0018a15:	e8 d7 f4 ff ff       	call   c0017ef1 <Vm::inbv(unsigned short)>
c0018a1a:	83 c4 10             	add    esp,0x10
c0018a1d:	0f b6 c0             	movzx  eax,al
c0018a20:	83 f8 1c             	cmp    eax,0x1c
c0018a23:	75 e6                	jne    c0018a0b <Vm::faultHandler(regs*)+0x49a>
c0018a25:	eb 10                	jmp    c0018a37 <Vm::faultHandler(regs*)+0x4c6>
c0018a27:	83 ec 0c             	sub    esp,0xc
c0018a2a:	6a 60                	push   0x60
c0018a2c:	e8 c0 f4 ff ff       	call   c0017ef1 <Vm::inbv(unsigned short)>
c0018a31:	83 c4 10             	add    esp,0x10
c0018a34:	0f b6 c0             	movzx  eax,al
c0018a37:	83 f8 1c             	cmp    eax,0x1c
c0018a3a:	74 eb                	je     c0018a27 <Vm::faultHandler(regs*)+0x4b6>
c0018a3c:	83 f8 5a             	cmp    eax,0x5a
c0018a3f:	74 e6                	je     c0018a27 <Vm::faultHandler(regs*)+0x4b6>
c0018a41:	31 c0                	xor    eax,eax
c0018a43:	e9 ab fb ff ff       	jmp    c00185f3 <Vm::faultHandler(regs*)+0x82>
c0018a48:	8b 33                	mov    esi,DWORD PTR [ebx]
c0018a4a:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0018a4d:	f6 44 24 07 01       	test   BYTE PTR [esp+0x7],0x1
c0018a52:	0f 85 9a 00 00 00    	jne    c0018af2 <Vm::faultHandler(regs*)+0x581>
c0018a58:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0018a5b:	0f b7 c5             	movzx  eax,bp
c0018a5e:	81 e1 00 04 00 00    	and    ecx,0x400
c0018a64:	0f b7 d6             	movzx  edx,si
c0018a67:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0018a6a:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018a6f:	0f 84 f8 01 00 00    	je     c0018c6d <Vm::faultHandler(regs*)+0x6fc>
c0018a75:	83 ec 08             	sub    esp,0x8
c0018a78:	50                   	push   eax
c0018a79:	52                   	push   edx
c0018a7a:	e8 a1 fa ff ff       	call   c0018520 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0018a7f:	83 c4 10             	add    esp,0x10
c0018a82:	89 fa                	mov    edx,edi
c0018a84:	ef                   	out    dx,eax
c0018a85:	85 c9                	test   ecx,ecx
c0018a87:	0f 84 44 02 00 00    	je     c0018cd1 <Vm::faultHandler(regs*)+0x760>
c0018a8d:	8d 45 fc             	lea    eax,[ebp-0x4]
c0018a90:	25 ff ff 00 00       	and    eax,0xffff
c0018a95:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018a98:	e9 33 fc ff ff       	jmp    c00186d0 <Vm::faultHandler(regs*)+0x15f>
c0018a9d:	8b 33                	mov    esi,DWORD PTR [ebx]
c0018a9f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018aa2:	f6 44 24 07 01       	test   BYTE PTR [esp+0x7],0x1
c0018aa7:	74 0b                	je     c0018ab4 <Vm::faultHandler(regs*)+0x543>
c0018aa9:	3d ff ff 00 00       	cmp    eax,0xffff
c0018aae:	0f 87 3a 02 00 00    	ja     c0018cee <Vm::faultHandler(regs*)+0x77d>
c0018ab4:	83 ec 08             	sub    esp,0x8
c0018ab7:	0f b7 c0             	movzx  eax,ax
c0018aba:	50                   	push   eax
c0018abb:	0f b7 c6             	movzx  eax,si
c0018abe:	50                   	push   eax
c0018abf:	e8 39 fa ff ff       	call   c00184fd <Vm::readByteFromReal(unsigned short, unsigned short)>
c0018ac4:	5e                   	pop    esi
c0018ac5:	0f b6 c0             	movzx  eax,al
c0018ac8:	5f                   	pop    edi
c0018ac9:	50                   	push   eax
c0018aca:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018ace:	50                   	push   eax
c0018acf:	e8 30 f4 ff ff       	call   c0017f04 <Vm::outbv(unsigned short, unsigned char)>
c0018ad4:	83 c4 10             	add    esp,0x10
c0018ad7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018ada:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018ade:	0f 84 ae 01 00 00    	je     c0018c92 <Vm::faultHandler(regs*)+0x721>
c0018ae4:	83 e8 01             	sub    eax,0x1
c0018ae7:	0f b7 c0             	movzx  eax,ax
c0018aea:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018aed:	e9 de fb ff ff       	jmp    c00186d0 <Vm::faultHandler(regs*)+0x15f>
c0018af2:	81 fd ff ff 00 00    	cmp    ebp,0xffff
c0018af8:	0f 86 5a ff ff ff    	jbe    c0018a58 <Vm::faultHandler(regs*)+0x4e7>
c0018afe:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018b02:	50                   	push   eax
c0018b03:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018b07:	50                   	push   eax
c0018b08:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018b0c:	50                   	push   eax
c0018b0d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018b11:	50                   	push   eax
c0018b12:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018b16:	50                   	push   eax
c0018b17:	6a 6f                	push   0x6f
c0018b19:	6a 6f                	push   0x6f
c0018b1b:	68 9c 56 02 c0       	push   0xc002569c
c0018b20:	e8 57 e4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018b25:	83 c4 20             	add    esp,0x20
c0018b28:	31 c0                	xor    eax,eax
c0018b2a:	e9 c4 fa ff ff       	jmp    c00185f3 <Vm::faultHandler(regs*)+0x82>
c0018b2f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018b32:	81 ca 00 02 02 00    	or     edx,0x20200
c0018b38:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018b3b:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0018b3e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018b44:	c1 e8 09             	shr    eax,0x9
c0018b47:	83 e0 01             	and    eax,0x1
c0018b4a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018b4d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018b50:	83 c0 02             	add    eax,0x2
c0018b53:	25 ff ff 00 00       	and    eax,0xffff
c0018b58:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018b5b:	e9 70 fb ff ff       	jmp    c00186d0 <Vm::faultHandler(regs*)+0x15f>
c0018b60:	83 ef 02             	sub    edi,0x2
c0018b63:	81 e7 ff ff 00 00    	and    edi,0xffff
c0018b69:	89 7b 44             	mov    DWORD PTR [ebx+0x44],edi
c0018b6c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018b70:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018b76:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018b7a:	0f 84 28 01 00 00    	je     c0018ca8 <Vm::faultHandler(regs*)+0x737>
c0018b80:	80 ce 02             	or     dh,0x2
c0018b83:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018b87:	e9 44 fb ff ff       	jmp    c00186d0 <Vm::faultHandler(regs*)+0x15f>
c0018b8c:	3d ff ff 00 00       	cmp    eax,0xffff
c0018b91:	0f 86 5d fb ff ff    	jbe    c00186f4 <Vm::faultHandler(regs*)+0x183>
c0018b97:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018b9b:	50                   	push   eax
c0018b9c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018ba0:	50                   	push   eax
c0018ba1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018ba5:	50                   	push   eax
c0018ba6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018baa:	50                   	push   eax
c0018bab:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018baf:	50                   	push   eax
c0018bb0:	6a 6d                	push   0x6d
c0018bb2:	6a 6d                	push   0x6d
c0018bb4:	68 9c 56 02 c0       	push   0xc002569c
c0018bb9:	e8 be e3 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018bbe:	83 c4 20             	add    esp,0x20
c0018bc1:	31 c0                	xor    eax,eax
c0018bc3:	e9 2b fa ff ff       	jmp    c00185f3 <Vm::faultHandler(regs*)+0x82>
c0018bc8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0018bcc:	ed                   	in     eax,dx
c0018bcd:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018bd0:	e9 93 fc ff ff       	jmp    c0018868 <Vm::faultHandler(regs*)+0x2f7>
c0018bd5:	ed                   	in     eax,dx
c0018bd6:	e9 d6 fd ff ff       	jmp    c00189b1 <Vm::faultHandler(regs*)+0x440>
c0018bdb:	66 ef                	out    dx,ax
c0018bdd:	e9 ee fa ff ff       	jmp    c00186d0 <Vm::faultHandler(regs*)+0x15f>
c0018be2:	66 ef                	out    dx,ax
c0018be4:	e9 7f fc ff ff       	jmp    c0018868 <Vm::faultHandler(regs*)+0x2f7>
c0018be9:	83 ec 0c             	sub    esp,0xc
c0018bec:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0018bef:	57                   	push   edi
c0018bf0:	e8 b7 f3 ff ff       	call   c0017fac <Vm::mainloop3(unsigned long)>
c0018bf5:	83 c4 10             	add    esp,0x10
c0018bf8:	b0 01                	mov    al,0x1
c0018bfa:	e9 f4 f9 ff ff       	jmp    c00185f3 <Vm::faultHandler(regs*)+0x82>
c0018bff:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0018c02:	e9 43 fe ff ff       	jmp    c0018a4a <Vm::faultHandler(regs*)+0x4d9>
c0018c07:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018c0a:	e9 3b fe ff ff       	jmp    c0018a4a <Vm::faultHandler(regs*)+0x4d9>
c0018c0f:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0018c12:	e9 33 fe ff ff       	jmp    c0018a4a <Vm::faultHandler(regs*)+0x4d9>
c0018c17:	89 ee                	mov    esi,ebp
c0018c19:	e9 2c fe ff ff       	jmp    c0018a4a <Vm::faultHandler(regs*)+0x4d9>
c0018c1e:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0018c21:	e9 79 fe ff ff       	jmp    c0018a9f <Vm::faultHandler(regs*)+0x52e>
c0018c26:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018c29:	e9 71 fe ff ff       	jmp    c0018a9f <Vm::faultHandler(regs*)+0x52e>
c0018c2e:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0018c31:	e9 69 fe ff ff       	jmp    c0018a9f <Vm::faultHandler(regs*)+0x52e>
c0018c36:	89 ee                	mov    esi,ebp
c0018c38:	e9 62 fe ff ff       	jmp    c0018a9f <Vm::faultHandler(regs*)+0x52e>
c0018c3d:	66 ed                	in     ax,dx
c0018c3f:	83 ec 04             	sub    esp,0x4
c0018c42:	0f b7 c0             	movzx  eax,ax
c0018c45:	50                   	push   eax
c0018c46:	51                   	push   ecx
c0018c47:	56                   	push   esi
c0018c48:	e8 f9 f8 ff ff       	call   c0018546 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018c4d:	83 c4 10             	add    esp,0x10
c0018c50:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018c53:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018c57:	0f 84 84 00 00 00    	je     c0018ce1 <Vm::faultHandler(regs*)+0x770>
c0018c5d:	83 e8 02             	sub    eax,0x2
c0018c60:	25 ff ff 00 00       	and    eax,0xffff
c0018c65:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018c68:	e9 63 fa ff ff       	jmp    c00186d0 <Vm::faultHandler(regs*)+0x15f>
c0018c6d:	83 ec 08             	sub    esp,0x8
c0018c70:	50                   	push   eax
c0018c71:	52                   	push   edx
c0018c72:	e8 97 f8 ff ff       	call   c001850e <Vm::readWordFromReal(unsigned short, unsigned short)>
c0018c77:	83 c4 10             	add    esp,0x10
c0018c7a:	89 fa                	mov    edx,edi
c0018c7c:	66 ef                	out    dx,ax
c0018c7e:	85 c9                	test   ecx,ecx
c0018c80:	74 32                	je     c0018cb4 <Vm::faultHandler(regs*)+0x743>
c0018c82:	8d 45 fe             	lea    eax,[ebp-0x2]
c0018c85:	25 ff ff 00 00       	and    eax,0xffff
c0018c8a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018c8d:	e9 3e fa ff ff       	jmp    c00186d0 <Vm::faultHandler(regs*)+0x15f>
c0018c92:	83 c0 01             	add    eax,0x1
c0018c95:	0f b7 c0             	movzx  eax,ax
c0018c98:	e9 4d fe ff ff       	jmp    c0018aea <Vm::faultHandler(regs*)+0x579>
c0018c9d:	83 c0 01             	add    eax,0x1
c0018ca0:	0f b7 c0             	movzx  eax,ax
c0018ca3:	e9 25 fa ff ff       	jmp    c00186cd <Vm::faultHandler(regs*)+0x15c>
c0018ca8:	80 e6 fd             	and    dh,0xfd
c0018cab:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018caf:	e9 1c fa ff ff       	jmp    c00186d0 <Vm::faultHandler(regs*)+0x15f>
c0018cb4:	8d 45 02             	lea    eax,[ebp+0x2]
c0018cb7:	25 ff ff 00 00       	and    eax,0xffff
c0018cbc:	e9 29 fe ff ff       	jmp    c0018aea <Vm::faultHandler(regs*)+0x579>
c0018cc1:	83 c0 04             	add    eax,0x4
c0018cc4:	25 ff ff 00 00       	and    eax,0xffff
c0018cc9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018ccc:	e9 ff f9 ff ff       	jmp    c00186d0 <Vm::faultHandler(regs*)+0x15f>
c0018cd1:	8d 45 04             	lea    eax,[ebp+0x4]
c0018cd4:	25 ff ff 00 00       	and    eax,0xffff
c0018cd9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018cdc:	e9 ef f9 ff ff       	jmp    c00186d0 <Vm::faultHandler(regs*)+0x15f>
c0018ce1:	83 c0 02             	add    eax,0x2
c0018ce4:	25 ff ff 00 00       	and    eax,0xffff
c0018ce9:	e9 df f9 ff ff       	jmp    c00186cd <Vm::faultHandler(regs*)+0x15c>
c0018cee:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018cf2:	50                   	push   eax
c0018cf3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018cf7:	50                   	push   eax
c0018cf8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018cfc:	50                   	push   eax
c0018cfd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018d01:	50                   	push   eax
c0018d02:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018d06:	50                   	push   eax
c0018d07:	6a 6e                	push   0x6e
c0018d09:	6a 6e                	push   0x6e
c0018d0b:	68 9c 56 02 c0       	push   0xc002569c
c0018d10:	e8 67 e2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018d15:	83 c4 20             	add    esp,0x20
c0018d18:	31 c0                	xor    eax,eax
c0018d1a:	e9 d4 f8 ff ff       	jmp    c00185f3 <Vm::faultHandler(regs*)+0x82>
c0018d1f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018d23:	50                   	push   eax
c0018d24:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018d28:	50                   	push   eax
c0018d29:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018d2d:	50                   	push   eax
c0018d2e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018d32:	50                   	push   eax
c0018d33:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018d37:	50                   	push   eax
c0018d38:	6a 6c                	push   0x6c
c0018d3a:	6a 6c                	push   0x6c
c0018d3c:	68 9c 56 02 c0       	push   0xc002569c
c0018d41:	e8 36 e2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018d46:	83 c4 20             	add    esp,0x20
c0018d49:	31 c0                	xor    eax,eax
c0018d4b:	e9 a3 f8 ff ff       	jmp    c00185f3 <Vm::faultHandler(regs*)+0x82>

c0018d50 <IOAPIC::close(int, int, void*)>:
c0018d50:	b8 00 00 00 00       	mov    eax,0x0
c0018d55:	c3                   	ret    

c0018d56 <apicGetBase()>:
c0018d56:	55                   	push   ebp
c0018d57:	89 e5                	mov    ebp,esp
c0018d59:	83 ec 18             	sub    esp,0x18
c0018d5c:	a0 8c db 02 c0       	mov    al,ds:0xc002db8c
c0018d61:	83 e0 08             	and    eax,0x8
c0018d64:	0f b6 c0             	movzx  eax,al
c0018d67:	85 c0                	test   eax,eax
c0018d69:	75 07                	jne    c0018d72 <apicGetBase()+0x1c>
c0018d6b:	b8 00 00 00 00       	mov    eax,0x0
c0018d70:	eb 1b                	jmp    c0018d8d <apicGetBase()+0x37>
c0018d72:	83 ec 0c             	sub    esp,0xc
c0018d75:	6a 1b                	push   0x1b
c0018d77:	e8 61 15 00 00       	call   c001a2dd <x86rdmsr(unsigned int)>
c0018d7c:	83 c4 10             	add    esp,0x10
c0018d7f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0018d82:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0018d85:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018d88:	25 00 00 ff ff       	and    eax,0xffff0000
c0018d8d:	c9                   	leave  
c0018d8e:	c3                   	ret    
c0018d8f:	90                   	nop

c0018d90 <IOAPIC::IOAPIC()>:
c0018d90:	83 ec 0c             	sub    esp,0xc
c0018d93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d97:	83 ec 08             	sub    esp,0x8
c0018d9a:	68 8c 5a 02 c0       	push   0xc0025a8c
c0018d9f:	50                   	push   eax
c0018da0:	e8 11 0e ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0018da5:	83 c4 10             	add    esp,0x10
c0018da8:	ba ac 5a 02 c0       	mov    edx,0xc0025aac
c0018dad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018db1:	89 10                	mov    DWORD PTR [eax],edx
c0018db3:	90                   	nop
c0018db4:	83 c4 0c             	add    esp,0xc
c0018db7:	c3                   	ret    

c0018db8 <apicOpen()>:
c0018db8:	55                   	push   ebp
c0018db9:	89 e5                	mov    ebp,esp
c0018dbb:	53                   	push   ebx
c0018dbc:	83 ec 34             	sub    esp,0x34
c0018dbf:	83 ec 0c             	sub    esp,0xc
c0018dc2:	68 94 5a 02 c0       	push   0xc0025a94
c0018dc7:	e8 b0 e1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018dcc:	83 c4 10             	add    esp,0x10
c0018dcf:	a0 40 db 02 c0       	mov    al,ds:0xc002db40
c0018dd4:	83 f0 01             	xor    eax,0x1
c0018dd7:	0f b6 c0             	movzx  eax,al
c0018dda:	85 c0                	test   eax,eax
c0018ddc:	0f 84 a3 00 00 00    	je     c0018e85 <apicOpen()+0xcd>
c0018de2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0018de6:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c0018deb:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0018def:	0f b6 c0             	movzx  eax,al
c0018df2:	39 c2                	cmp    edx,eax
c0018df4:	0f 83 84 00 00 00    	jae    c0018e7e <apicOpen()+0xc6>
c0018dfa:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c0018e01:	83 ec 0c             	sub    esp,0xc
c0018e04:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0018e07:	e8 57 69 ff ff       	call   c000f763 <malloc>
c0018e0c:	83 c4 10             	add    esp,0x10
c0018e0f:	89 c3                	mov    ebx,eax
c0018e11:	83 ec 0c             	sub    esp,0xc
c0018e14:	53                   	push   ebx
c0018e15:	e8 76 ff ff ff       	call   c0018d90 <IOAPIC::IOAPIC()>
c0018e1a:	83 c4 10             	add    esp,0x10
c0018e1d:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0018e20:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0018e24:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0018e27:	89 14 85 20 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd24e0],edx
c0018e2e:	a1 00 db 02 c0       	mov    eax,ds:0xc002db00
c0018e33:	83 c0 01             	add    eax,0x1
c0018e36:	a3 00 db 02 c0       	mov    ds:0xc002db00,eax
c0018e3b:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0018e40:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0018e46:	83 ec 08             	sub    esp,0x8
c0018e49:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0018e4c:	50                   	push   eax
c0018e4d:	e8 02 0c ff ff       	call   c0009a54 <Device::addChild(Device*)>
c0018e52:	83 c4 10             	add    esp,0x10
c0018e55:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018e58:	8b 00                	mov    eax,DWORD PTR [eax]
c0018e5a:	83 c0 08             	add    eax,0x8
c0018e5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0018e5f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0018e63:	6a 00                	push   0x0
c0018e65:	6a 00                	push   0x0
c0018e67:	52                   	push   edx
c0018e68:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0018e6b:	ff d0                	call   eax
c0018e6d:	83 c4 10             	add    esp,0x10
c0018e70:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c0018e73:	83 c0 01             	add    eax,0x1
c0018e76:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c0018e79:	e9 68 ff ff ff       	jmp    c0018de6 <apicOpen()+0x2e>
c0018e7e:	c6 05 40 db 02 c0 01 	mov    BYTE PTR ds:0xc002db40,0x1
c0018e85:	e8 cc fe ff ff       	call   c0018d56 <apicGetBase()>
c0018e8a:	05 f0 00 00 00       	add    eax,0xf0
c0018e8f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0018e92:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0018e95:	8b 00                	mov    eax,DWORD PTR [eax]
c0018e97:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0018e9a:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c0018ea1:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c0018ea8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0018eab:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0018eae:	89 10                	mov    DWORD PTR [eax],edx
c0018eb0:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0018eb7:	a1 8c cd 02 c0       	mov    eax,ds:0xc002cd8c
c0018ebc:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c0018ebf:	7d 7c                	jge    c0018f3d <apicOpen()+0x185>
c0018ec1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018ec4:	8b 04 85 a0 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3260]
c0018ecb:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c0018ece:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018ed1:	8b 04 85 a0 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3260]
c0018ed8:	c1 e8 08             	shr    eax,0x8
c0018edb:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0018edf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018ee2:	8b 04 85 a0 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3260]
c0018ee9:	c1 e8 18             	shr    eax,0x18
c0018eec:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0018eef:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018ef3:	3d ff 00 00 00       	cmp    eax,0xff
c0018ef8:	75 3a                	jne    c0018f34 <apicOpen()+0x17c>
c0018efa:	e8 57 fe ff ff       	call   c0018d56 <apicGetBase()>
c0018eff:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c0018f03:	83 fa 01             	cmp    edx,0x1
c0018f06:	75 07                	jne    c0018f0f <apicOpen()+0x157>
c0018f08:	ba 60 03 00 00       	mov    edx,0x360
c0018f0d:	eb 05                	jmp    c0018f14 <apicOpen()+0x15c>
c0018f0f:	ba 50 03 00 00       	mov    edx,0x350
c0018f14:	01 d0                	add    eax,edx
c0018f16:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0018f19:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018f1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0018f1e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0018f21:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0018f28:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0018f2c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018f2f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0018f32:	89 10                	mov    DWORD PTR [eax],edx
c0018f34:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0018f38:	e9 7a ff ff ff       	jmp    c0018eb7 <apicOpen()+0xff>
c0018f3d:	90                   	nop
c0018f3e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0018f41:	c9                   	leave  
c0018f42:	c3                   	ret    
c0018f43:	90                   	nop

c0018f44 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0018f44:	55                   	push   ebp
c0018f45:	89 e5                	mov    ebp,esp
c0018f47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f4a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018f50:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0018f53:	72 1d                	jb     c0018f72 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0018f55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f58:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0018f5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f61:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0018f67:	01 d0                	add    eax,edx
c0018f69:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0018f6c:	73 04                	jae    c0018f72 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0018f6e:	b0 01                	mov    al,0x1
c0018f70:	eb 02                	jmp    c0018f74 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0018f72:	b0 00                	mov    al,0x0
c0018f74:	5d                   	pop    ebp
c0018f75:	c3                   	ret    

c0018f76 <IOAPIC::read(int)>:
c0018f76:	55                   	push   ebp
c0018f77:	89 e5                	mov    ebp,esp
c0018f79:	83 ec 10             	sub    esp,0x10
c0018f7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f7f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018f85:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0018f88:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018f8b:	0f b6 d0             	movzx  edx,al
c0018f8e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018f91:	89 10                	mov    DWORD PTR [eax],edx
c0018f93:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018f96:	83 c0 10             	add    eax,0x10
c0018f99:	8b 00                	mov    eax,DWORD PTR [eax]
c0018f9b:	c9                   	leave  
c0018f9c:	c3                   	ret    
c0018f9d:	90                   	nop

c0018f9e <IOAPIC::open(int, int, void*)>:
c0018f9e:	55                   	push   ebp
c0018f9f:	89 e5                	mov    ebp,esp
c0018fa1:	57                   	push   edi
c0018fa2:	56                   	push   esi
c0018fa3:	53                   	push   ebx
c0018fa4:	83 ec 04             	sub    esp,0x4
c0018fa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018faa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0018fad:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018fb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fb6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018fbc:	8b 14 85 80 ce 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3180]
c0018fc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fc6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0018fcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fcf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018fd5:	8b 14 85 00 cf 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3100]
c0018fdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fdf:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0018fe5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fe8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018fee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ff1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0018ff7:	0f b6 f0             	movzx  esi,al
c0018ffa:	89 d0                	mov    eax,edx
c0018ffc:	ba 00 00 00 00       	mov    edx,0x0
c0019001:	89 c7                	mov    edi,eax
c0019003:	83 e7 ff             	and    edi,0xffffffff
c0019006:	89 f9                	mov    ecx,edi
c0019008:	0f b6 da             	movzx  ebx,dl
c001900b:	89 c8                	mov    eax,ecx
c001900d:	89 da                	mov    edx,ebx
c001900f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0019012:	8d 5e 08             	lea    ebx,[esi+0x8]
c0019015:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0019019:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001901d:	83 e0 00             	and    eax,0x0
c0019020:	09 d0                	or     eax,edx
c0019022:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0019026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019029:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001902f:	8d 50 01             	lea    edx,[eax+0x1]
c0019032:	88 d1                	mov    cl,dl
c0019034:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0019037:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001903d:	0f b6 d0             	movzx  edx,al
c0019040:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019043:	83 c2 08             	add    edx,0x8
c0019046:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001904a:	0f b6 c9             	movzx  ecx,cl
c001904d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0019053:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0019057:	6a 01                	push   0x1
c0019059:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001905c:	e8 15 ff ff ff       	call   c0018f76 <IOAPIC::read(int)>
c0019061:	83 c4 08             	add    esp,0x8
c0019064:	c1 f8 10             	sar    eax,0x10
c0019067:	0f b6 c0             	movzx  eax,al
c001906a:	8d 50 01             	lea    edx,[eax+0x1]
c001906d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019070:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0019076:	b8 00 00 00 00       	mov    eax,0x0
c001907b:	8d 65 f4             	lea    esp,[ebp-0xc]
c001907e:	5b                   	pop    ebx
c001907f:	5e                   	pop    esi
c0019080:	5f                   	pop    edi
c0019081:	5d                   	pop    ebp
c0019082:	c3                   	ret    
c0019083:	90                   	nop

c0019084 <IOAPIC::write(int, int)>:
c0019084:	55                   	push   ebp
c0019085:	89 e5                	mov    ebp,esp
c0019087:	83 ec 10             	sub    esp,0x10
c001908a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001908d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019093:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0019096:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0019099:	0f b6 d0             	movzx  edx,al
c001909c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001909f:	89 10                	mov    DWORD PTR [eax],edx
c00190a1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00190a4:	8d 50 10             	lea    edx,[eax+0x10]
c00190a7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00190aa:	89 02                	mov    DWORD PTR [edx],eax
c00190ac:	90                   	nop
c00190ad:	c9                   	leave  
c00190ae:	c3                   	ret    
c00190af:	90                   	nop

c00190b0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00190b0:	55                   	push   ebp
c00190b1:	89 e5                	mov    ebp,esp
c00190b3:	53                   	push   ebx
c00190b4:	83 ec 2c             	sub    esp,0x2c
c00190b7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00190ba:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00190bd:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00190c0:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00190c3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00190c6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00190c9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00190cc:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00190cf:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00190d2:	88 d8                	mov    al,bl
c00190d4:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00190d7:	88 c8                	mov    al,cl
c00190d9:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00190dc:	88 d0                	mov    al,dl
c00190de:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00190e1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00190e5:	83 c0 08             	add    eax,0x8
c00190e8:	01 c0                	add    eax,eax
c00190ea:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00190ed:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00190f1:	83 c0 08             	add    eax,0x8
c00190f4:	01 c0                	add    eax,eax
c00190f6:	83 c0 01             	add    eax,0x1
c00190f9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00190fc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00190ff:	50                   	push   eax
c0019100:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019103:	e8 6e fe ff ff       	call   c0018f76 <IOAPIC::read(int)>
c0019108:	83 c4 08             	add    esp,0x8
c001910b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001910e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0019115:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0019118:	c1 e0 18             	shl    eax,0x18
c001911b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001911e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0019121:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0019124:	52                   	push   edx
c0019125:	50                   	push   eax
c0019126:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019129:	e8 56 ff ff ff       	call   c0019084 <IOAPIC::write(int, int)>
c001912e:	83 c4 0c             	add    esp,0xc
c0019131:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0019134:	50                   	push   eax
c0019135:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019138:	e8 39 fe ff ff       	call   c0018f76 <IOAPIC::read(int)>
c001913d:	83 c4 08             	add    esp,0x8
c0019140:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0019143:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001914a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0019151:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0019158:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001915c:	85 c0                	test   eax,eax
c001915e:	74 09                	je     c0019169 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c0019160:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0019167:	eb 07                	jmp    c0019170 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c0019169:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0019170:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c0019174:	85 c0                	test   eax,eax
c0019176:	74 09                	je     c0019181 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c0019178:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001917f:	eb 07                	jmp    c0019188 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c0019181:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0019188:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001918f:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0019193:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0019196:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0019199:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001919c:	52                   	push   edx
c001919d:	50                   	push   eax
c001919e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00191a1:	e8 de fe ff ff       	call   c0019084 <IOAPIC::write(int, int)>
c00191a6:	83 c4 0c             	add    esp,0xc
c00191a9:	90                   	nop
c00191aa:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00191ad:	c9                   	leave  
c00191ae:	c3                   	ret    
c00191af:	90                   	nop

c00191b0 <noCopro(unsigned long)>:
c00191b0:	c3                   	ret    

c00191b1 <HalRestart()>:
c00191b1:	e4 64                	in     al,0x64
c00191b3:	a8 02                	test   al,0x2
c00191b5:	75 fa                	jne    c00191b1 <HalRestart()>
c00191b7:	b0 fe                	mov    al,0xfe
c00191b9:	e6 64                	out    0x64,al
c00191bb:	c3                   	ret    

c00191bc <HalShutdown()>:
c00191bc:	c3                   	ret    

c00191bd <HalSleep()>:
c00191bd:	c3                   	ret    

c00191be <CPU::close(int, int, void*)>:
c00191be:	31 c0                	xor    eax,eax
c00191c0:	c3                   	ret    

c00191c1 <x86ReadCMOS(unsigned char)>:
c00191c1:	83 ec 14             	sub    esp,0x14
c00191c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00191c8:	88 04 24             	mov    BYTE PTR [esp],al
c00191cb:	a0 6c db 02 c0       	mov    al,ds:0xc002db6c
c00191d0:	0f b6 c0             	movzx  eax,al
c00191d3:	85 c0                	test   eax,eax
c00191d5:	74 04                	je     c00191db <x86ReadCMOS(unsigned char)+0x1a>
c00191d7:	b2 00                	mov    dl,0x0
c00191d9:	eb 02                	jmp    c00191dd <x86ReadCMOS(unsigned char)+0x1c>
c00191db:	b2 80                	mov    dl,0x80
c00191dd:	8a 04 24             	mov    al,BYTE PTR [esp]
c00191e0:	09 d0                	or     eax,edx
c00191e2:	0f b6 c0             	movzx  eax,al
c00191e5:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c00191ec:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00191f0:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00191f4:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00191f9:	ee                   	out    dx,al
c00191fa:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0019201:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0019206:	89 c2                	mov    edx,eax
c0019208:	ec                   	in     al,dx
c0019209:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001920d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019211:	83 c4 14             	add    esp,0x14
c0019214:	c3                   	ret    

c0019215 <x86WriteCMOS(unsigned char, unsigned char)>:
c0019215:	83 ec 18             	sub    esp,0x18
c0019218:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001921c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019220:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c0019224:	88 04 24             	mov    BYTE PTR [esp],al
c0019227:	a0 6c db 02 c0       	mov    al,ds:0xc002db6c
c001922c:	0f b6 c0             	movzx  eax,al
c001922f:	85 c0                	test   eax,eax
c0019231:	74 04                	je     c0019237 <x86WriteCMOS(unsigned char, unsigned char)+0x22>
c0019233:	b2 00                	mov    dl,0x0
c0019235:	eb 02                	jmp    c0019239 <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0019237:	b2 80                	mov    dl,0x80
c0019239:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001923d:	09 d0                	or     eax,edx
c001923f:	0f b6 c0             	movzx  eax,al
c0019242:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0019249:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001924d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019251:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0019256:	ee                   	out    dx,al
c0019257:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001925b:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0019262:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0019266:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c001926a:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c001926f:	ee                   	out    dx,al
c0019270:	90                   	nop
c0019271:	83 c4 18             	add    esp,0x18
c0019274:	c3                   	ret    

c0019275 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0019275:	60                   	pusha  
c0019276:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001927a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001927e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019282:	9c                   	pushf  
c0019283:	fa                   	cli    
c0019284:	0f 09                	wbinvd 
c0019286:	0f 30                	wrmsr  
c0019288:	9d                   	popf   
c0019289:	89 c2                	mov    edx,eax
c001928b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001928f:	89 10                	mov    DWORD PTR [eax],edx
c0019291:	61                   	popa   
c0019292:	90                   	nop
c0019293:	c3                   	ret    

c0019294 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0019294:	60                   	pusha  
c0019295:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019299:	89 c1                	mov    ecx,eax
c001929b:	9c                   	pushf  
c001929c:	fa                   	cli    
c001929d:	0f 09                	wbinvd 
c001929f:	31 c0                	xor    eax,eax
c00192a1:	31 d2                	xor    edx,edx
c00192a3:	0f 32                	rdmsr  
c00192a5:	9d                   	popf   
c00192a6:	89 c2                	mov    edx,eax
c00192a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00192ac:	89 10                	mov    DWORD PTR [eax],edx
c00192ae:	61                   	popa   
c00192af:	90                   	nop
c00192b0:	c3                   	ret    

c00192b1 <AMD_K6_writeback(int, int, int)>:
c00192b1:	83 ec 20             	sub    esp,0x20
c00192b4:	a1 70 d1 02 c0       	mov    eax,ds:0xc002d170
c00192b9:	c1 e8 14             	shr    eax,0x14
c00192bc:	c1 e8 02             	shr    eax,0x2
c00192bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00192c3:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c00192c8:	0f 85 9e 00 00 00    	jne    c001936c <AMD_K6_writeback(int, int, int)+0xbb>
c00192ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00192d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00192d6:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c00192db:	75 19                	jne    c00192f6 <AMD_K6_writeback(int, int, int)+0x45>
c00192dd:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c00192e2:	7f 0a                	jg     c00192ee <AMD_K6_writeback(int, int, int)+0x3d>
c00192e4:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c00192ec:	eb 08                	jmp    c00192f6 <AMD_K6_writeback(int, int, int)+0x45>
c00192ee:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c00192f6:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c00192fb:	7c 6e                	jl     c001936b <AMD_K6_writeback(int, int, int)+0xba>
c00192fd:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0019302:	7e 09                	jle    c001930d <AMD_K6_writeback(int, int, int)+0x5c>
c0019304:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0019309:	74 36                	je     c0019341 <AMD_K6_writeback(int, int, int)+0x90>
c001930b:	eb 5e                	jmp    c001936b <AMD_K6_writeback(int, int, int)+0xba>
c001930d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019311:	50                   	push   eax
c0019312:	68 82 00 00 c0       	push   0xc0000082
c0019317:	e8 78 ff ff ff       	call   c0019294 <AMD_K6_read_msr(unsigned int, REGS*)>
c001931c:	83 c4 08             	add    esp,0x8
c001931f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019323:	01 c0                	add    eax,eax
c0019325:	83 e0 7f             	and    eax,0x7f
c0019328:	89 c2                	mov    edx,eax
c001932a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001932e:	50                   	push   eax
c001932f:	6a 00                	push   0x0
c0019331:	52                   	push   edx
c0019332:	68 82 00 00 c0       	push   0xc0000082
c0019337:	e8 39 ff ff ff       	call   c0019275 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c001933c:	83 c4 10             	add    esp,0x10
c001933f:	eb 2b                	jmp    c001936c <AMD_K6_writeback(int, int, int)+0xbb>
c0019341:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019345:	50                   	push   eax
c0019346:	68 82 00 00 c0       	push   0xc0000082
c001934b:	e8 44 ff ff ff       	call   c0019294 <AMD_K6_read_msr(unsigned int, REGS*)>
c0019350:	83 c4 08             	add    esp,0x8
c0019353:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019357:	50                   	push   eax
c0019358:	6a 00                	push   0x0
c001935a:	6a 00                	push   0x0
c001935c:	68 82 00 00 c0       	push   0xc0000082
c0019361:	e8 0f ff ff ff       	call   c0019275 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0019366:	83 c4 10             	add    esp,0x10
c0019369:	eb 01                	jmp    c001936c <AMD_K6_writeback(int, int, int)+0xbb>
c001936b:	90                   	nop
c001936c:	90                   	nop
c001936d:	83 c4 20             	add    esp,0x20
c0019370:	c3                   	ret    

c0019371 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0019371:	56                   	push   esi
c0019372:	53                   	push   ebx
c0019373:	a1 80 73 02 c0       	mov    eax,ds:0xc0027380
c0019378:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001937c:	75 32                	jne    c00193b0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001937e:	8b 15 60 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db60
c0019384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019388:	89 10                	mov    DWORD PTR [eax],edx
c001938a:	8b 15 5c db 02 c0    	mov    edx,DWORD PTR ds:0xc002db5c
c0019390:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019394:	89 10                	mov    DWORD PTR [eax],edx
c0019396:	8b 15 58 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db58
c001939c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00193a0:	89 10                	mov    DWORD PTR [eax],edx
c00193a2:	8b 15 54 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db54
c00193a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00193ac:	89 10                	mov    DWORD PTR [eax],edx
c00193ae:	eb 5c                	jmp    c001940c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c00193b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193b4:	ba 00 00 00 00       	mov    edx,0x0
c00193b9:	89 d1                	mov    ecx,edx
c00193bb:	0f a2                	cpuid  
c00193bd:	89 c6                	mov    esi,eax
c00193bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193c3:	89 30                	mov    DWORD PTR [eax],esi
c00193c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00193c9:	89 18                	mov    DWORD PTR [eax],ebx
c00193cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00193cf:	89 08                	mov    DWORD PTR [eax],ecx
c00193d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00193d5:	89 10                	mov    DWORD PTR [eax],edx
c00193d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193db:	a3 80 73 02 c0       	mov    ds:0xc0027380,eax
c00193e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00193e6:	a3 60 db 02 c0       	mov    ds:0xc002db60,eax
c00193eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00193ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00193f1:	a3 5c db 02 c0       	mov    ds:0xc002db5c,eax
c00193f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00193fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00193fc:	a3 58 db 02 c0       	mov    ds:0xc002db58,eax
c0019401:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019405:	8b 00                	mov    eax,DWORD PTR [eax]
c0019407:	a3 54 db 02 c0       	mov    ds:0xc002db54,eax
c001940c:	5b                   	pop    ebx
c001940d:	5e                   	pop    esi
c001940e:	c3                   	ret    

c001940f <cpuidCheckEDX(unsigned int)>:
c001940f:	83 ec 10             	sub    esp,0x10
c0019412:	89 e0                	mov    eax,esp
c0019414:	50                   	push   eax
c0019415:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019419:	50                   	push   eax
c001941a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001941e:	50                   	push   eax
c001941f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019423:	50                   	push   eax
c0019424:	6a 01                	push   0x1
c0019426:	e8 46 ff ff ff       	call   c0019371 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001942b:	83 c4 14             	add    esp,0x14
c001942e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019431:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019435:	0f 95 c0             	setne  al
c0019438:	83 c4 10             	add    esp,0x10
c001943b:	c3                   	ret    

c001943c <cpuidCheckECX(unsigned int)>:
c001943c:	83 ec 10             	sub    esp,0x10
c001943f:	89 e0                	mov    eax,esp
c0019441:	50                   	push   eax
c0019442:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019446:	50                   	push   eax
c0019447:	8d 44 24 10          	lea    eax,[esp+0x10]
c001944b:	50                   	push   eax
c001944c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019450:	50                   	push   eax
c0019451:	6a 01                	push   0x1
c0019453:	e8 19 ff ff ff       	call   c0019371 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019458:	83 c4 14             	add    esp,0x14
c001945b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001945f:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019463:	0f 95 c0             	setne  al
c0019466:	83 c4 10             	add    esp,0x10
c0019469:	c3                   	ret    

c001946a <cpuidCheckExtendedEBX(unsigned int)>:
c001946a:	83 ec 10             	sub    esp,0x10
c001946d:	89 e0                	mov    eax,esp
c001946f:	50                   	push   eax
c0019470:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019474:	50                   	push   eax
c0019475:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019479:	50                   	push   eax
c001947a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001947e:	50                   	push   eax
c001947f:	6a 07                	push   0x7
c0019481:	e8 eb fe ff ff       	call   c0019371 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019486:	83 c4 14             	add    esp,0x14
c0019489:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001948d:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019491:	0f 95 c0             	setne  al
c0019494:	83 c4 10             	add    esp,0x10
c0019497:	c3                   	ret    

c0019498 <cpuidCheckExtendedECX(unsigned int)>:
c0019498:	83 ec 10             	sub    esp,0x10
c001949b:	89 e0                	mov    eax,esp
c001949d:	50                   	push   eax
c001949e:	8d 44 24 08          	lea    eax,[esp+0x8]
c00194a2:	50                   	push   eax
c00194a3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00194a7:	50                   	push   eax
c00194a8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00194ac:	50                   	push   eax
c00194ad:	6a 07                	push   0x7
c00194af:	e8 bd fe ff ff       	call   c0019371 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00194b4:	83 c4 14             	add    esp,0x14
c00194b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00194bb:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00194bf:	0f 95 c0             	setne  al
c00194c2:	83 c4 10             	add    esp,0x10
c00194c5:	c3                   	ret    

c00194c6 <HalDetectFeatures()>:
c00194c6:	57                   	push   edi
c00194c7:	56                   	push   esi
c00194c8:	53                   	push   ebx
c00194c9:	81 ec 90 00 00 00    	sub    esp,0x90
c00194cf:	83 ec 04             	sub    esp,0x4
c00194d2:	6a 08                	push   0x8
c00194d4:	6a 00                	push   0x0
c00194d6:	68 8c db 02 c0       	push   0xc002db8c
c00194db:	e8 10 70 fe ff       	call   c00004f0 <memset>
c00194e0:	83 c4 10             	add    esp,0x10
c00194e3:	a0 8c db 02 c0       	mov    al,ds:0xc002db8c
c00194e8:	83 c8 04             	or     eax,0x4
c00194eb:	a2 8c db 02 c0       	mov    ds:0xc002db8c,al
c00194f0:	83 ec 0c             	sub    esp,0xc
c00194f3:	68 d0 5a 02 c0       	push   0xc0025ad0
c00194f8:	e8 7f da fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00194fd:	83 c4 10             	add    esp,0x10
c0019500:	e8 f4 6c fe ff       	call   c00001f9 <detectCPUID>
c0019505:	85 c0                	test   eax,eax
c0019507:	0f 95 c0             	setne  al
c001950a:	83 e0 01             	and    eax,0x1
c001950d:	83 e0 01             	and    eax,0x1
c0019510:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019513:	a0 8c db 02 c0       	mov    al,ds:0xc002db8c
c0019518:	83 e0 fd             	and    eax,0xfffffffd
c001951b:	88 c2                	mov    dl,al
c001951d:	88 c8                	mov    al,cl
c001951f:	09 d0                	or     eax,edx
c0019521:	a2 8c db 02 c0       	mov    ds:0xc002db8c,al
c0019526:	a0 8c db 02 c0       	mov    al,ds:0xc002db8c
c001952b:	83 e0 02             	and    eax,0x2
c001952e:	0f b6 c0             	movzx  eax,al
c0019531:	85 c0                	test   eax,eax
c0019533:	0f 84 84 02 00 00    	je     c00197bd <HalDetectFeatures()+0x2f7>
c0019539:	83 ec 0c             	sub    esp,0xc
c001953c:	6a 20                	push   0x20
c001953e:	e8 cc fe ff ff       	call   c001940f <cpuidCheckEDX(unsigned int)>
c0019543:	83 c4 10             	add    esp,0x10
c0019546:	83 e0 01             	and    eax,0x1
c0019549:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019550:	a0 8c db 02 c0       	mov    al,ds:0xc002db8c
c0019555:	83 e0 f7             	and    eax,0xfffffff7
c0019558:	88 c2                	mov    dl,al
c001955a:	88 c8                	mov    al,cl
c001955c:	09 d0                	or     eax,edx
c001955e:	a2 8c db 02 c0       	mov    ds:0xc002db8c,al
c0019563:	83 ec 0c             	sub    esp,0xc
c0019566:	68 00 00 00 04       	push   0x4000000
c001956b:	e8 9f fe ff ff       	call   c001940f <cpuidCheckEDX(unsigned int)>
c0019570:	83 c4 10             	add    esp,0x10
c0019573:	89 c1                	mov    ecx,eax
c0019575:	83 e1 01             	and    ecx,0x1
c0019578:	a0 8d db 02 c0       	mov    al,ds:0xc002db8d
c001957d:	83 e0 fe             	and    eax,0xfffffffe
c0019580:	88 c2                	mov    dl,al
c0019582:	88 c8                	mov    al,cl
c0019584:	09 d0                	or     eax,edx
c0019586:	a2 8d db 02 c0       	mov    ds:0xc002db8d,al
c001958b:	83 ec 0c             	sub    esp,0xc
c001958e:	68 80 00 00 00       	push   0x80
c0019593:	e8 77 fe ff ff       	call   c001940f <cpuidCheckEDX(unsigned int)>
c0019598:	83 c4 10             	add    esp,0x10
c001959b:	89 c1                	mov    ecx,eax
c001959d:	c1 e1 07             	shl    ecx,0x7
c00195a0:	a0 8d db 02 c0       	mov    al,ds:0xc002db8d
c00195a5:	83 e0 7f             	and    eax,0x7f
c00195a8:	88 c2                	mov    dl,al
c00195aa:	88 c8                	mov    al,cl
c00195ac:	09 d0                	or     eax,edx
c00195ae:	a2 8d db 02 c0       	mov    ds:0xc002db8d,al
c00195b3:	83 ec 0c             	sub    esp,0xc
c00195b6:	68 00 00 80 00       	push   0x800000
c00195bb:	e8 4f fe ff ff       	call   c001940f <cpuidCheckEDX(unsigned int)>
c00195c0:	83 c4 10             	add    esp,0x10
c00195c3:	83 e0 01             	and    eax,0x1
c00195c6:	89 c1                	mov    ecx,eax
c00195c8:	c1 e1 05             	shl    ecx,0x5
c00195cb:	a0 8c db 02 c0       	mov    al,ds:0xc002db8c
c00195d0:	83 e0 df             	and    eax,0xffffffdf
c00195d3:	88 c2                	mov    dl,al
c00195d5:	88 c8                	mov    al,cl
c00195d7:	09 d0                	or     eax,edx
c00195d9:	a2 8c db 02 c0       	mov    ds:0xc002db8c,al
c00195de:	83 ec 0c             	sub    esp,0xc
c00195e1:	6a 01                	push   0x1
c00195e3:	e8 9c 3b ff ff       	call   c000d184 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c00195e8:	83 c4 10             	add    esp,0x10
c00195eb:	0f b6 c0             	movzx  eax,al
c00195ee:	85 c0                	test   eax,eax
c00195f0:	75 17                	jne    c0019609 <HalDetectFeatures()+0x143>
c00195f2:	83 ec 0c             	sub    esp,0xc
c00195f5:	68 00 04 00 00       	push   0x400
c00195fa:	e8 85 3b ff ff       	call   c000d184 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c00195ff:	83 c4 10             	add    esp,0x10
c0019602:	0f b6 c0             	movzx  eax,al
c0019605:	85 c0                	test   eax,eax
c0019607:	74 04                	je     c001960d <HalDetectFeatures()+0x147>
c0019609:	b0 01                	mov    al,0x1
c001960b:	eb 02                	jmp    c001960f <HalDetectFeatures()+0x149>
c001960d:	b0 00                	mov    al,0x0
c001960f:	0f b6 c0             	movzx  eax,al
c0019612:	85 c0                	test   eax,eax
c0019614:	74 0f                	je     c0019625 <HalDetectFeatures()+0x15f>
c0019616:	a0 8c db 02 c0       	mov    al,ds:0xc002db8c
c001961b:	83 e0 fe             	and    eax,0xfffffffe
c001961e:	a2 8c db 02 c0       	mov    ds:0xc002db8c,al
c0019623:	eb 28                	jmp    c001964d <HalDetectFeatures()+0x187>
c0019625:	83 ec 0c             	sub    esp,0xc
c0019628:	68 00 02 00 00       	push   0x200
c001962d:	e8 dd fd ff ff       	call   c001940f <cpuidCheckEDX(unsigned int)>
c0019632:	83 c4 10             	add    esp,0x10
c0019635:	89 c1                	mov    ecx,eax
c0019637:	83 e1 01             	and    ecx,0x1
c001963a:	a0 8c db 02 c0       	mov    al,ds:0xc002db8c
c001963f:	83 e0 fe             	and    eax,0xfffffffe
c0019642:	88 c2                	mov    dl,al
c0019644:	88 c8                	mov    al,cl
c0019646:	09 d0                	or     eax,edx
c0019648:	a2 8c db 02 c0       	mov    ds:0xc002db8c,al
c001964d:	a0 8c db 02 c0       	mov    al,ds:0xc002db8c
c0019652:	83 e0 01             	and    eax,0x1
c0019655:	0f b6 c0             	movzx  eax,al
c0019658:	85 c0                	test   eax,eax
c001965a:	74 1c                	je     c0019678 <HalDetectFeatures()+0x1b2>
c001965c:	a0 8c db 02 c0       	mov    al,ds:0xc002db8c
c0019661:	83 e0 08             	and    eax,0x8
c0019664:	0f b6 c0             	movzx  eax,al
c0019667:	85 c0                	test   eax,eax
c0019669:	75 0d                	jne    c0019678 <HalDetectFeatures()+0x1b2>
c001966b:	a0 8c db 02 c0       	mov    al,ds:0xc002db8c
c0019670:	83 e0 fe             	and    eax,0xfffffffe
c0019673:	a2 8c db 02 c0       	mov    ds:0xc002db8c,al
c0019678:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0019680:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0019688:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0019690:	85 c0                	test   eax,eax
c0019692:	0f 84 ab 00 00 00    	je     c0019743 <HalDetectFeatures()+0x27d>
c0019698:	83 ec 0c             	sub    esp,0xc
c001969b:	6a 01                	push   0x1
c001969d:	e8 9a fd ff ff       	call   c001943c <cpuidCheckECX(unsigned int)>
c00196a2:	83 c4 10             	add    esp,0x10
c00196a5:	83 e0 01             	and    eax,0x1
c00196a8:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00196ab:	a0 8d db 02 c0       	mov    al,ds:0xc002db8d
c00196b0:	83 e0 fd             	and    eax,0xfffffffd
c00196b3:	88 c2                	mov    dl,al
c00196b5:	88 c8                	mov    al,cl
c00196b7:	09 d0                	or     eax,edx
c00196b9:	a2 8d db 02 c0       	mov    ds:0xc002db8d,al
c00196be:	83 ec 0c             	sub    esp,0xc
c00196c1:	68 00 02 00 00       	push   0x200
c00196c6:	e8 71 fd ff ff       	call   c001943c <cpuidCheckECX(unsigned int)>
c00196cb:	83 c4 10             	add    esp,0x10
c00196ce:	83 e0 01             	and    eax,0x1
c00196d1:	89 c1                	mov    ecx,eax
c00196d3:	c1 e1 04             	shl    ecx,0x4
c00196d6:	a0 8d db 02 c0       	mov    al,ds:0xc002db8d
c00196db:	83 e0 ef             	and    eax,0xffffffef
c00196de:	88 c2                	mov    dl,al
c00196e0:	88 c8                	mov    al,cl
c00196e2:	09 d0                	or     eax,edx
c00196e4:	a2 8d db 02 c0       	mov    ds:0xc002db8d,al
c00196e9:	83 ec 0c             	sub    esp,0xc
c00196ec:	68 00 00 08 00       	push   0x80000
c00196f1:	e8 46 fd ff ff       	call   c001943c <cpuidCheckECX(unsigned int)>
c00196f6:	83 c4 10             	add    esp,0x10
c00196f9:	83 e0 01             	and    eax,0x1
c00196fc:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019703:	a0 8d db 02 c0       	mov    al,ds:0xc002db8d
c0019708:	83 e0 fb             	and    eax,0xfffffffb
c001970b:	88 c2                	mov    dl,al
c001970d:	88 c8                	mov    al,cl
c001970f:	09 d0                	or     eax,edx
c0019711:	a2 8d db 02 c0       	mov    ds:0xc002db8d,al
c0019716:	83 ec 0c             	sub    esp,0xc
c0019719:	68 00 00 10 00       	push   0x100000
c001971e:	e8 19 fd ff ff       	call   c001943c <cpuidCheckECX(unsigned int)>
c0019723:	83 c4 10             	add    esp,0x10
c0019726:	83 e0 01             	and    eax,0x1
c0019729:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019730:	a0 8d db 02 c0       	mov    al,ds:0xc002db8d
c0019735:	83 e0 f7             	and    eax,0xfffffff7
c0019738:	88 c2                	mov    dl,al
c001973a:	88 c8                	mov    al,cl
c001973c:	09 d0                	or     eax,edx
c001973e:	a2 8d db 02 c0       	mov    ds:0xc002db8d,al
c0019743:	83 ec 0c             	sub    esp,0xc
c0019746:	8d 44 24 24          	lea    eax,[esp+0x24]
c001974a:	50                   	push   eax
c001974b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001974f:	50                   	push   eax
c0019750:	8d 44 24 34          	lea    eax,[esp+0x34]
c0019754:	50                   	push   eax
c0019755:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019759:	50                   	push   eax
c001975a:	68 00 00 00 80       	push   0x80000000
c001975f:	e8 0d fc ff ff       	call   c0019371 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019764:	83 c4 20             	add    esp,0x20
c0019767:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001976b:	3d 00 00 00 80       	cmp    eax,0x80000000
c0019770:	76 4b                	jbe    c00197bd <HalDetectFeatures()+0x2f7>
c0019772:	83 ec 0c             	sub    esp,0xc
c0019775:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019779:	50                   	push   eax
c001977a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001977e:	50                   	push   eax
c001977f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0019783:	50                   	push   eax
c0019784:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019788:	50                   	push   eax
c0019789:	68 01 00 00 80       	push   0x80000001
c001978e:	e8 de fb ff ff       	call   c0019371 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019793:	83 c4 20             	add    esp,0x20
c0019796:	a0 8c db 02 c0       	mov    al,ds:0xc002db8c
c001979b:	83 e0 bf             	and    eax,0xffffffbf
c001979e:	a2 8c db 02 c0       	mov    ds:0xc002db8c,al
c00197a3:	a0 8e db 02 c0       	mov    al,ds:0xc002db8e
c00197a8:	83 e0 fd             	and    eax,0xfffffffd
c00197ab:	a2 8e db 02 c0       	mov    ds:0xc002db8e,al
c00197b0:	a0 8e db 02 c0       	mov    al,ds:0xc002db8e
c00197b5:	83 e0 fe             	and    eax,0xfffffffe
c00197b8:	a2 8e db 02 c0       	mov    ds:0xc002db8e,al
c00197bd:	83 ec 0c             	sub    esp,0xc
c00197c0:	68 00 04 00 00       	push   0x400
c00197c5:	e8 ba 39 ff ff       	call   c000d184 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c00197ca:	83 c4 10             	add    esp,0x10
c00197cd:	0f b6 c0             	movzx  eax,al
c00197d0:	85 c0                	test   eax,eax
c00197d2:	74 0d                	je     c00197e1 <HalDetectFeatures()+0x31b>
c00197d4:	a0 8c db 02 c0       	mov    al,ds:0xc002db8c
c00197d9:	83 e0 fb             	and    eax,0xfffffffb
c00197dc:	a2 8c db 02 c0       	mov    ds:0xc002db8c,al
c00197e1:	c6 05 88 db 02 c0 01 	mov    BYTE PTR ds:0xc002db88,0x1
c00197e8:	83 ec 04             	sub    esp,0x4
c00197eb:	6a 0d                	push   0xd
c00197ed:	6a 00                	push   0x0
c00197ef:	68 70 db 02 c0       	push   0xc002db70
c00197f4:	e8 f7 6c fe ff       	call   c00004f0 <memset>
c00197f9:	83 c4 10             	add    esp,0x10
c00197fc:	a0 8c db 02 c0       	mov    al,ds:0xc002db8c
c0019801:	83 e0 02             	and    eax,0x2
c0019804:	0f b6 c0             	movzx  eax,al
c0019807:	85 c0                	test   eax,eax
c0019809:	0f 84 16 08 00 00    	je     c001a025 <HalDetectFeatures()+0xb5f>
c001980f:	83 ec 0c             	sub    esp,0xc
c0019812:	6a 10                	push   0x10
c0019814:	e8 f6 fb ff ff       	call   c001940f <cpuidCheckEDX(unsigned int)>
c0019819:	83 c4 10             	add    esp,0x10
c001981c:	83 e0 01             	and    eax,0x1
c001981f:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019826:	a0 8e db 02 c0       	mov    al,ds:0xc002db8e
c001982b:	83 e0 f7             	and    eax,0xfffffff7
c001982e:	88 c2                	mov    dl,al
c0019830:	88 c8                	mov    al,cl
c0019832:	09 d0                	or     eax,edx
c0019834:	a2 8e db 02 c0       	mov    ds:0xc002db8e,al
c0019839:	83 ec 0c             	sub    esp,0xc
c001983c:	6a 40                	push   0x40
c001983e:	e8 cc fb ff ff       	call   c001940f <cpuidCheckEDX(unsigned int)>
c0019843:	83 c4 10             	add    esp,0x10
c0019846:	83 e0 01             	and    eax,0x1
c0019849:	89 c1                	mov    ecx,eax
c001984b:	c1 e1 04             	shl    ecx,0x4
c001984e:	a0 8e db 02 c0       	mov    al,ds:0xc002db8e
c0019853:	83 e0 ef             	and    eax,0xffffffef
c0019856:	88 c2                	mov    dl,al
c0019858:	88 c8                	mov    al,cl
c001985a:	09 d0                	or     eax,edx
c001985c:	a2 8e db 02 c0       	mov    ds:0xc002db8e,al
c0019861:	83 ec 0c             	sub    esp,0xc
c0019864:	6a 08                	push   0x8
c0019866:	e8 a4 fb ff ff       	call   c001940f <cpuidCheckEDX(unsigned int)>
c001986b:	83 c4 10             	add    esp,0x10
c001986e:	83 e0 01             	and    eax,0x1
c0019871:	89 c1                	mov    ecx,eax
c0019873:	c1 e1 05             	shl    ecx,0x5
c0019876:	a0 8e db 02 c0       	mov    al,ds:0xc002db8e
c001987b:	83 e0 df             	and    eax,0xffffffdf
c001987e:	88 c2                	mov    dl,al
c0019880:	88 c8                	mov    al,cl
c0019882:	09 d0                	or     eax,edx
c0019884:	a2 8e db 02 c0       	mov    ds:0xc002db8e,al
c0019889:	83 ec 0c             	sub    esp,0xc
c001988c:	68 00 20 00 00       	push   0x2000
c0019891:	e8 79 fb ff ff       	call   c001940f <cpuidCheckEDX(unsigned int)>
c0019896:	83 c4 10             	add    esp,0x10
c0019899:	83 e0 01             	and    eax,0x1
c001989c:	89 c1                	mov    ecx,eax
c001989e:	c1 e1 06             	shl    ecx,0x6
c00198a1:	a0 8e db 02 c0       	mov    al,ds:0xc002db8e
c00198a6:	83 e0 bf             	and    eax,0xffffffbf
c00198a9:	88 c2                	mov    dl,al
c00198ab:	88 c8                	mov    al,cl
c00198ad:	09 d0                	or     eax,edx
c00198af:	a2 8e db 02 c0       	mov    ds:0xc002db8e,al
c00198b4:	83 ec 0c             	sub    esp,0xc
c00198b7:	68 00 00 01 00       	push   0x10000
c00198bc:	e8 4e fb ff ff       	call   c001940f <cpuidCheckEDX(unsigned int)>
c00198c1:	83 c4 10             	add    esp,0x10
c00198c4:	89 c1                	mov    ecx,eax
c00198c6:	c1 e1 07             	shl    ecx,0x7
c00198c9:	a0 8e db 02 c0       	mov    al,ds:0xc002db8e
c00198ce:	83 e0 7f             	and    eax,0x7f
c00198d1:	88 c2                	mov    dl,al
c00198d3:	88 c8                	mov    al,cl
c00198d5:	09 d0                	or     eax,edx
c00198d7:	a2 8e db 02 c0       	mov    ds:0xc002db8e,al
c00198dc:	83 ec 0c             	sub    esp,0xc
c00198df:	6a 01                	push   0x1
c00198e1:	e8 29 fb ff ff       	call   c001940f <cpuidCheckEDX(unsigned int)>
c00198e6:	83 c4 10             	add    esp,0x10
c00198e9:	83 e0 01             	and    eax,0x1
c00198ec:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00198f3:	a0 90 db 02 c0       	mov    al,ds:0xc002db90
c00198f8:	83 e0 f7             	and    eax,0xfffffff7
c00198fb:	88 c2                	mov    dl,al
c00198fd:	88 c8                	mov    al,cl
c00198ff:	09 d0                	or     eax,edx
c0019901:	a2 90 db 02 c0       	mov    ds:0xc002db90,al
c0019906:	83 ec 0c             	sub    esp,0xc
c0019909:	68 00 08 00 00       	push   0x800
c001990e:	e8 fc fa ff ff       	call   c001940f <cpuidCheckEDX(unsigned int)>
c0019913:	83 c4 10             	add    esp,0x10
c0019916:	89 c1                	mov    ecx,eax
c0019918:	83 e1 01             	and    ecx,0x1
c001991b:	a0 90 db 02 c0       	mov    al,ds:0xc002db90
c0019920:	83 e0 fe             	and    eax,0xfffffffe
c0019923:	88 c2                	mov    dl,al
c0019925:	88 c8                	mov    al,cl
c0019927:	09 d0                	or     eax,edx
c0019929:	a2 90 db 02 c0       	mov    ds:0xc002db90,al
c001992e:	a0 8e db 02 c0       	mov    al,ds:0xc002db8e
c0019933:	83 e0 40             	and    eax,0x40
c0019936:	0f b6 c0             	movzx  eax,al
c0019939:	85 c0                	test   eax,eax
c001993b:	74 0a                	je     c0019947 <HalDetectFeatures()+0x481>
c001993d:	c7 05 68 db 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002db68,0x100
c0019947:	a0 8e db 02 c0       	mov    al,ds:0xc002db8e
c001994c:	83 e0 80             	and    eax,0xffffff80
c001994f:	0f b6 c0             	movzx  eax,al
c0019952:	85 c0                	test   eax,eax
c0019954:	74 0a                	je     c0019960 <HalDetectFeatures()+0x49a>
c0019956:	c7 05 64 db 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002db64,0x80
c0019960:	83 ec 0c             	sub    esp,0xc
c0019963:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019967:	50                   	push   eax
c0019968:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001996c:	50                   	push   eax
c001996d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019971:	50                   	push   eax
c0019972:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019976:	50                   	push   eax
c0019977:	6a 00                	push   0x0
c0019979:	e8 f3 f9 ff ff       	call   c0019371 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001997e:	83 c4 20             	add    esp,0x20
c0019981:	c7 44 24 48 70 db 02 c0 	mov    DWORD PTR [esp+0x48],0xc002db70
c0019989:	8d 44 24 10          	lea    eax,[esp+0x10]
c001998d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0019991:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c0019999:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001999d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00199a1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00199a5:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00199a9:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00199ad:	89 c6                	mov    esi,eax
c00199af:	89 d7                	mov    edi,edx
c00199b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00199b3:	89 c8                	mov    eax,ecx
c00199b5:	89 fa                	mov    edx,edi
c00199b7:	89 f3                	mov    ebx,esi
c00199b9:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00199bd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00199c1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00199c5:	b8 74 db 02 c0       	mov    eax,0xc002db74
c00199ca:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00199ce:	8d 44 24 08          	lea    eax,[esp+0x8]
c00199d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00199d6:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c00199de:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00199e2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00199e6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00199ea:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00199ee:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c00199f2:	89 c6                	mov    esi,eax
c00199f4:	89 d7                	mov    edi,edx
c00199f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00199f8:	89 c8                	mov    eax,ecx
c00199fa:	89 fa                	mov    edx,edi
c00199fc:	89 f3                	mov    ebx,esi
c00199fe:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c0019a02:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c0019a06:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019a0a:	b8 78 db 02 c0       	mov    eax,0xc002db78
c0019a0f:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0019a16:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019a1a:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c0019a1e:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c0019a26:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0019a2d:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0019a31:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0019a35:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0019a3c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0019a40:	89 c6                	mov    esi,eax
c0019a42:	89 d7                	mov    edi,edx
c0019a44:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a46:	89 c8                	mov    eax,ecx
c0019a48:	89 fa                	mov    edx,edi
c0019a4a:	89 f3                	mov    ebx,esi
c0019a4c:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c0019a50:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c0019a54:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0019a58:	83 ec 08             	sub    esp,0x8
c0019a5b:	68 e5 5a 02 c0       	push   0xc0025ae5
c0019a60:	68 70 db 02 c0       	push   0xc002db70
c0019a65:	e8 e6 6c fe ff       	call   c0000750 <strcmp>
c0019a6a:	83 c4 10             	add    esp,0x10
c0019a6d:	85 c0                	test   eax,eax
c0019a6f:	74 19                	je     c0019a8a <HalDetectFeatures()+0x5c4>
c0019a71:	83 ec 08             	sub    esp,0x8
c0019a74:	68 f2 5a 02 c0       	push   0xc0025af2
c0019a79:	68 70 db 02 c0       	push   0xc002db70
c0019a7e:	e8 cd 6c fe ff       	call   c0000750 <strcmp>
c0019a83:	83 c4 10             	add    esp,0x10
c0019a86:	85 c0                	test   eax,eax
c0019a88:	75 04                	jne    c0019a8e <HalDetectFeatures()+0x5c8>
c0019a8a:	b0 01                	mov    al,0x1
c0019a8c:	eb 02                	jmp    c0019a90 <HalDetectFeatures()+0x5ca>
c0019a8e:	b0 00                	mov    al,0x0
c0019a90:	0f b6 c0             	movzx  eax,al
c0019a93:	85 c0                	test   eax,eax
c0019a95:	74 0f                	je     c0019aa6 <HalDetectFeatures()+0x5e0>
c0019a97:	c7 05 84 db 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002db84,0x2
c0019aa1:	e9 0d 03 00 00       	jmp    c0019db3 <HalDetectFeatures()+0x8ed>
c0019aa6:	83 ec 08             	sub    esp,0x8
c0019aa9:	68 ff 5a 02 c0       	push   0xc0025aff
c0019aae:	68 70 db 02 c0       	push   0xc002db70
c0019ab3:	e8 98 6c fe ff       	call   c0000750 <strcmp>
c0019ab8:	83 c4 10             	add    esp,0x10
c0019abb:	85 c0                	test   eax,eax
c0019abd:	74 19                	je     c0019ad8 <HalDetectFeatures()+0x612>
c0019abf:	83 ec 08             	sub    esp,0x8
c0019ac2:	68 0c 5b 02 c0       	push   0xc0025b0c
c0019ac7:	68 70 db 02 c0       	push   0xc002db70
c0019acc:	e8 7f 6c fe ff       	call   c0000750 <strcmp>
c0019ad1:	83 c4 10             	add    esp,0x10
c0019ad4:	85 c0                	test   eax,eax
c0019ad6:	75 04                	jne    c0019adc <HalDetectFeatures()+0x616>
c0019ad8:	b0 01                	mov    al,0x1
c0019ada:	eb 02                	jmp    c0019ade <HalDetectFeatures()+0x618>
c0019adc:	b0 00                	mov    al,0x0
c0019ade:	0f b6 c0             	movzx  eax,al
c0019ae1:	85 c0                	test   eax,eax
c0019ae3:	74 0f                	je     c0019af4 <HalDetectFeatures()+0x62e>
c0019ae5:	c7 05 84 db 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002db84,0x4
c0019aef:	e9 bf 02 00 00       	jmp    c0019db3 <HalDetectFeatures()+0x8ed>
c0019af4:	83 ec 08             	sub    esp,0x8
c0019af7:	68 19 5b 02 c0       	push   0xc0025b19
c0019afc:	68 70 db 02 c0       	push   0xc002db70
c0019b01:	e8 4a 6c fe ff       	call   c0000750 <strcmp>
c0019b06:	83 c4 10             	add    esp,0x10
c0019b09:	85 c0                	test   eax,eax
c0019b0b:	74 19                	je     c0019b26 <HalDetectFeatures()+0x660>
c0019b0d:	83 ec 08             	sub    esp,0x8
c0019b10:	68 26 5b 02 c0       	push   0xc0025b26
c0019b15:	68 70 db 02 c0       	push   0xc002db70
c0019b1a:	e8 31 6c fe ff       	call   c0000750 <strcmp>
c0019b1f:	83 c4 10             	add    esp,0x10
c0019b22:	85 c0                	test   eax,eax
c0019b24:	75 04                	jne    c0019b2a <HalDetectFeatures()+0x664>
c0019b26:	b0 01                	mov    al,0x1
c0019b28:	eb 02                	jmp    c0019b2c <HalDetectFeatures()+0x666>
c0019b2a:	b0 00                	mov    al,0x0
c0019b2c:	0f b6 c0             	movzx  eax,al
c0019b2f:	85 c0                	test   eax,eax
c0019b31:	74 0f                	je     c0019b42 <HalDetectFeatures()+0x67c>
c0019b33:	c7 05 84 db 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002db84,0x5
c0019b3d:	e9 71 02 00 00       	jmp    c0019db3 <HalDetectFeatures()+0x8ed>
c0019b42:	83 ec 08             	sub    esp,0x8
c0019b45:	68 33 5b 02 c0       	push   0xc0025b33
c0019b4a:	68 70 db 02 c0       	push   0xc002db70
c0019b4f:	e8 fc 6b fe ff       	call   c0000750 <strcmp>
c0019b54:	83 c4 10             	add    esp,0x10
c0019b57:	85 c0                	test   eax,eax
c0019b59:	0f 94 c0             	sete   al
c0019b5c:	0f b6 c0             	movzx  eax,al
c0019b5f:	85 c0                	test   eax,eax
c0019b61:	74 0f                	je     c0019b72 <HalDetectFeatures()+0x6ac>
c0019b63:	c7 05 84 db 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002db84,0x1
c0019b6d:	e9 41 02 00 00       	jmp    c0019db3 <HalDetectFeatures()+0x8ed>
c0019b72:	83 ec 08             	sub    esp,0x8
c0019b75:	68 40 5b 02 c0       	push   0xc0025b40
c0019b7a:	68 70 db 02 c0       	push   0xc002db70
c0019b7f:	e8 cc 6b fe ff       	call   c0000750 <strcmp>
c0019b84:	83 c4 10             	add    esp,0x10
c0019b87:	85 c0                	test   eax,eax
c0019b89:	0f 94 c0             	sete   al
c0019b8c:	0f b6 c0             	movzx  eax,al
c0019b8f:	85 c0                	test   eax,eax
c0019b91:	74 0f                	je     c0019ba2 <HalDetectFeatures()+0x6dc>
c0019b93:	c7 05 84 db 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002db84,0x3
c0019b9d:	e9 11 02 00 00       	jmp    c0019db3 <HalDetectFeatures()+0x8ed>
c0019ba2:	83 ec 08             	sub    esp,0x8
c0019ba5:	68 ff 5a 02 c0       	push   0xc0025aff
c0019baa:	68 70 db 02 c0       	push   0xc002db70
c0019baf:	e8 9c 6b fe ff       	call   c0000750 <strcmp>
c0019bb4:	83 c4 10             	add    esp,0x10
c0019bb7:	85 c0                	test   eax,eax
c0019bb9:	0f 94 c0             	sete   al
c0019bbc:	0f b6 c0             	movzx  eax,al
c0019bbf:	85 c0                	test   eax,eax
c0019bc1:	74 0f                	je     c0019bd2 <HalDetectFeatures()+0x70c>
c0019bc3:	c7 05 84 db 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002db84,0x6
c0019bcd:	e9 e1 01 00 00       	jmp    c0019db3 <HalDetectFeatures()+0x8ed>
c0019bd2:	83 ec 08             	sub    esp,0x8
c0019bd5:	68 4d 5b 02 c0       	push   0xc0025b4d
c0019bda:	68 70 db 02 c0       	push   0xc002db70
c0019bdf:	e8 6c 6b fe ff       	call   c0000750 <strcmp>
c0019be4:	83 c4 10             	add    esp,0x10
c0019be7:	85 c0                	test   eax,eax
c0019be9:	0f 94 c0             	sete   al
c0019bec:	0f b6 c0             	movzx  eax,al
c0019bef:	85 c0                	test   eax,eax
c0019bf1:	74 0f                	je     c0019c02 <HalDetectFeatures()+0x73c>
c0019bf3:	c7 05 84 db 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002db84,0x7
c0019bfd:	e9 b1 01 00 00       	jmp    c0019db3 <HalDetectFeatures()+0x8ed>
c0019c02:	83 ec 08             	sub    esp,0x8
c0019c05:	68 5a 5b 02 c0       	push   0xc0025b5a
c0019c0a:	68 70 db 02 c0       	push   0xc002db70
c0019c0f:	e8 3c 6b fe ff       	call   c0000750 <strcmp>
c0019c14:	83 c4 10             	add    esp,0x10
c0019c17:	85 c0                	test   eax,eax
c0019c19:	0f 94 c0             	sete   al
c0019c1c:	0f b6 c0             	movzx  eax,al
c0019c1f:	85 c0                	test   eax,eax
c0019c21:	74 0f                	je     c0019c32 <HalDetectFeatures()+0x76c>
c0019c23:	c7 05 84 db 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002db84,0x8
c0019c2d:	e9 81 01 00 00       	jmp    c0019db3 <HalDetectFeatures()+0x8ed>
c0019c32:	83 ec 08             	sub    esp,0x8
c0019c35:	68 67 5b 02 c0       	push   0xc0025b67
c0019c3a:	68 70 db 02 c0       	push   0xc002db70
c0019c3f:	e8 0c 6b fe ff       	call   c0000750 <strcmp>
c0019c44:	83 c4 10             	add    esp,0x10
c0019c47:	85 c0                	test   eax,eax
c0019c49:	0f 94 c0             	sete   al
c0019c4c:	0f b6 c0             	movzx  eax,al
c0019c4f:	85 c0                	test   eax,eax
c0019c51:	74 0f                	je     c0019c62 <HalDetectFeatures()+0x79c>
c0019c53:	c7 05 84 db 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002db84,0x9
c0019c5d:	e9 51 01 00 00       	jmp    c0019db3 <HalDetectFeatures()+0x8ed>
c0019c62:	83 ec 08             	sub    esp,0x8
c0019c65:	68 74 5b 02 c0       	push   0xc0025b74
c0019c6a:	68 70 db 02 c0       	push   0xc002db70
c0019c6f:	e8 dc 6a fe ff       	call   c0000750 <strcmp>
c0019c74:	83 c4 10             	add    esp,0x10
c0019c77:	85 c0                	test   eax,eax
c0019c79:	0f 94 c0             	sete   al
c0019c7c:	0f b6 c0             	movzx  eax,al
c0019c7f:	85 c0                	test   eax,eax
c0019c81:	74 0f                	je     c0019c92 <HalDetectFeatures()+0x7cc>
c0019c83:	c7 05 84 db 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002db84,0xa
c0019c8d:	e9 21 01 00 00       	jmp    c0019db3 <HalDetectFeatures()+0x8ed>
c0019c92:	83 ec 08             	sub    esp,0x8
c0019c95:	68 81 5b 02 c0       	push   0xc0025b81
c0019c9a:	68 70 db 02 c0       	push   0xc002db70
c0019c9f:	e8 ac 6a fe ff       	call   c0000750 <strcmp>
c0019ca4:	83 c4 10             	add    esp,0x10
c0019ca7:	85 c0                	test   eax,eax
c0019ca9:	0f 94 c0             	sete   al
c0019cac:	0f b6 c0             	movzx  eax,al
c0019caf:	85 c0                	test   eax,eax
c0019cb1:	74 0f                	je     c0019cc2 <HalDetectFeatures()+0x7fc>
c0019cb3:	c7 05 84 db 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002db84,0xb
c0019cbd:	e9 f1 00 00 00       	jmp    c0019db3 <HalDetectFeatures()+0x8ed>
c0019cc2:	83 ec 08             	sub    esp,0x8
c0019cc5:	68 8e 5b 02 c0       	push   0xc0025b8e
c0019cca:	68 70 db 02 c0       	push   0xc002db70
c0019ccf:	e8 7c 6a fe ff       	call   c0000750 <strcmp>
c0019cd4:	83 c4 10             	add    esp,0x10
c0019cd7:	85 c0                	test   eax,eax
c0019cd9:	0f 94 c0             	sete   al
c0019cdc:	0f b6 c0             	movzx  eax,al
c0019cdf:	85 c0                	test   eax,eax
c0019ce1:	74 0f                	je     c0019cf2 <HalDetectFeatures()+0x82c>
c0019ce3:	c7 05 84 db 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002db84,0xc
c0019ced:	e9 c1 00 00 00       	jmp    c0019db3 <HalDetectFeatures()+0x8ed>
c0019cf2:	83 ec 08             	sub    esp,0x8
c0019cf5:	68 9b 5b 02 c0       	push   0xc0025b9b
c0019cfa:	68 70 db 02 c0       	push   0xc002db70
c0019cff:	e8 4c 6a fe ff       	call   c0000750 <strcmp>
c0019d04:	83 c4 10             	add    esp,0x10
c0019d07:	85 c0                	test   eax,eax
c0019d09:	0f 94 c0             	sete   al
c0019d0c:	0f b6 c0             	movzx  eax,al
c0019d0f:	85 c0                	test   eax,eax
c0019d11:	74 0f                	je     c0019d22 <HalDetectFeatures()+0x85c>
c0019d13:	c7 05 84 db 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002db84,0xd
c0019d1d:	e9 91 00 00 00       	jmp    c0019db3 <HalDetectFeatures()+0x8ed>
c0019d22:	83 ec 08             	sub    esp,0x8
c0019d25:	68 a8 5b 02 c0       	push   0xc0025ba8
c0019d2a:	68 70 db 02 c0       	push   0xc002db70
c0019d2f:	e8 1c 6a fe ff       	call   c0000750 <strcmp>
c0019d34:	83 c4 10             	add    esp,0x10
c0019d37:	85 c0                	test   eax,eax
c0019d39:	0f 94 c0             	sete   al
c0019d3c:	0f b6 c0             	movzx  eax,al
c0019d3f:	85 c0                	test   eax,eax
c0019d41:	74 0c                	je     c0019d4f <HalDetectFeatures()+0x889>
c0019d43:	c7 05 84 db 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002db84,0xd
c0019d4d:	eb 64                	jmp    c0019db3 <HalDetectFeatures()+0x8ed>
c0019d4f:	83 ec 08             	sub    esp,0x8
c0019d52:	68 b5 5b 02 c0       	push   0xc0025bb5
c0019d57:	68 70 db 02 c0       	push   0xc002db70
c0019d5c:	e8 ef 69 fe ff       	call   c0000750 <strcmp>
c0019d61:	83 c4 10             	add    esp,0x10
c0019d64:	85 c0                	test   eax,eax
c0019d66:	0f 94 c0             	sete   al
c0019d69:	0f b6 c0             	movzx  eax,al
c0019d6c:	85 c0                	test   eax,eax
c0019d6e:	74 0c                	je     c0019d7c <HalDetectFeatures()+0x8b6>
c0019d70:	c7 05 84 db 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002db84,0xd
c0019d7a:	eb 37                	jmp    c0019db3 <HalDetectFeatures()+0x8ed>
c0019d7c:	83 ec 08             	sub    esp,0x8
c0019d7f:	68 c2 5b 02 c0       	push   0xc0025bc2
c0019d84:	68 70 db 02 c0       	push   0xc002db70
c0019d89:	e8 c2 69 fe ff       	call   c0000750 <strcmp>
c0019d8e:	83 c4 10             	add    esp,0x10
c0019d91:	85 c0                	test   eax,eax
c0019d93:	0f 94 c0             	sete   al
c0019d96:	0f b6 c0             	movzx  eax,al
c0019d99:	85 c0                	test   eax,eax
c0019d9b:	74 0c                	je     c0019da9 <HalDetectFeatures()+0x8e3>
c0019d9d:	c7 05 84 db 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002db84,0xd
c0019da7:	eb 0a                	jmp    c0019db3 <HalDetectFeatures()+0x8ed>
c0019da9:	c7 05 84 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db84,0x0
c0019db3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019db7:	83 f8 06             	cmp    eax,0x6
c0019dba:	0f 86 cc 00 00 00    	jbe    c0019e8c <HalDetectFeatures()+0x9c6>
c0019dc0:	83 ec 0c             	sub    esp,0xc
c0019dc3:	68 80 00 00 00       	push   0x80
c0019dc8:	e8 9d f6 ff ff       	call   c001946a <cpuidCheckExtendedEBX(unsigned int)>
c0019dcd:	83 c4 10             	add    esp,0x10
c0019dd0:	89 c1                	mov    ecx,eax
c0019dd2:	83 e1 01             	and    ecx,0x1
c0019dd5:	a0 8f db 02 c0       	mov    al,ds:0xc002db8f
c0019dda:	83 e0 fe             	and    eax,0xfffffffe
c0019ddd:	88 c2                	mov    dl,al
c0019ddf:	88 c8                	mov    al,cl
c0019de1:	09 d0                	or     eax,edx
c0019de3:	a2 8f db 02 c0       	mov    ds:0xc002db8f,al
c0019de8:	83 ec 0c             	sub    esp,0xc
c0019deb:	68 00 00 10 00       	push   0x100000
c0019df0:	e8 75 f6 ff ff       	call   c001946a <cpuidCheckExtendedEBX(unsigned int)>
c0019df5:	83 c4 10             	add    esp,0x10
c0019df8:	83 e0 01             	and    eax,0x1
c0019dfb:	89 c1                	mov    ecx,eax
c0019dfd:	c1 e1 06             	shl    ecx,0x6
c0019e00:	a0 8f db 02 c0       	mov    al,ds:0xc002db8f
c0019e05:	83 e0 bf             	and    eax,0xffffffbf
c0019e08:	88 c2                	mov    dl,al
c0019e0a:	88 c8                	mov    al,cl
c0019e0c:	09 d0                	or     eax,edx
c0019e0e:	a2 8f db 02 c0       	mov    ds:0xc002db8f,al
c0019e13:	83 ec 0c             	sub    esp,0xc
c0019e16:	68 00 00 04 00       	push   0x40000
c0019e1b:	e8 4a f6 ff ff       	call   c001946a <cpuidCheckExtendedEBX(unsigned int)>
c0019e20:	83 c4 10             	add    esp,0x10
c0019e23:	83 e0 01             	and    eax,0x1
c0019e26:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019e29:	a0 8f db 02 c0       	mov    al,ds:0xc002db8f
c0019e2e:	83 e0 fd             	and    eax,0xfffffffd
c0019e31:	88 c2                	mov    dl,al
c0019e33:	88 c8                	mov    al,cl
c0019e35:	09 d0                	or     eax,edx
c0019e37:	a2 8f db 02 c0       	mov    ds:0xc002db8f,al
c0019e3c:	83 ec 0c             	sub    esp,0xc
c0019e3f:	6a 04                	push   0x4
c0019e41:	e8 52 f6 ff ff       	call   c0019498 <cpuidCheckExtendedECX(unsigned int)>
c0019e46:	83 c4 10             	add    esp,0x10
c0019e49:	83 e0 01             	and    eax,0x1
c0019e4c:	89 c1                	mov    ecx,eax
c0019e4e:	c1 e1 05             	shl    ecx,0x5
c0019e51:	a0 8f db 02 c0       	mov    al,ds:0xc002db8f
c0019e56:	83 e0 df             	and    eax,0xffffffdf
c0019e59:	88 c2                	mov    dl,al
c0019e5b:	88 c8                	mov    al,cl
c0019e5d:	09 d0                	or     eax,edx
c0019e5f:	a2 8f db 02 c0       	mov    ds:0xc002db8f,al
c0019e64:	83 ec 0c             	sub    esp,0xc
c0019e67:	6a 20                	push   0x20
c0019e69:	e8 2a f6 ff ff       	call   c0019498 <cpuidCheckExtendedECX(unsigned int)>
c0019e6e:	83 c4 10             	add    esp,0x10
c0019e71:	83 e0 01             	and    eax,0x1
c0019e74:	89 c1                	mov    ecx,eax
c0019e76:	c1 e1 04             	shl    ecx,0x4
c0019e79:	a0 90 db 02 c0       	mov    al,ds:0xc002db90
c0019e7e:	83 e0 ef             	and    eax,0xffffffef
c0019e81:	88 c2                	mov    dl,al
c0019e83:	88 c8                	mov    al,cl
c0019e85:	09 d0                	or     eax,edx
c0019e87:	a2 90 db 02 c0       	mov    ds:0xc002db90,al
c0019e8c:	83 ec 0c             	sub    esp,0xc
c0019e8f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e93:	50                   	push   eax
c0019e94:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019e98:	50                   	push   eax
c0019e99:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019e9d:	50                   	push   eax
c0019e9e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019ea2:	50                   	push   eax
c0019ea3:	6a 01                	push   0x1
c0019ea5:	e8 c7 f4 ff ff       	call   c0019371 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019eaa:	83 c4 20             	add    esp,0x20
c0019ead:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019eb1:	83 e0 0f             	and    eax,0xf
c0019eb4:	a2 80 db 02 c0       	mov    ds:0xc002db80,al
c0019eb9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019ebd:	c1 e8 04             	shr    eax,0x4
c0019ec0:	83 e0 0f             	and    eax,0xf
c0019ec3:	a2 7e db 02 c0       	mov    ds:0xc002db7e,al
c0019ec8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019ecc:	c1 e8 08             	shr    eax,0x8
c0019ecf:	83 e0 0f             	and    eax,0xf
c0019ed2:	a2 7d db 02 c0       	mov    ds:0xc002db7d,al
c0019ed7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019edb:	c1 e8 0c             	shr    eax,0xc
c0019ede:	83 e0 03             	and    eax,0x3
c0019ee1:	a2 7f db 02 c0       	mov    ds:0xc002db7f,al
c0019ee6:	a0 7d db 02 c0       	mov    al,ds:0xc002db7d
c0019eeb:	0f b6 c0             	movzx  eax,al
c0019eee:	83 f8 06             	cmp    eax,0x6
c0019ef1:	74 0d                	je     c0019f00 <HalDetectFeatures()+0xa3a>
c0019ef3:	a0 7d db 02 c0       	mov    al,ds:0xc002db7d
c0019ef8:	0f b6 c0             	movzx  eax,al
c0019efb:	83 f8 0f             	cmp    eax,0xf
c0019efe:	75 18                	jne    c0019f18 <HalDetectFeatures()+0xa52>
c0019f00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019f04:	c1 e8 10             	shr    eax,0x10
c0019f07:	c1 e0 04             	shl    eax,0x4
c0019f0a:	88 c2                	mov    dl,al
c0019f0c:	a0 7e db 02 c0       	mov    al,ds:0xc002db7e
c0019f11:	09 d0                	or     eax,edx
c0019f13:	a2 7e db 02 c0       	mov    ds:0xc002db7e,al
c0019f18:	a0 7d db 02 c0       	mov    al,ds:0xc002db7d
c0019f1d:	0f b6 c0             	movzx  eax,al
c0019f20:	83 f8 0f             	cmp    eax,0xf
c0019f23:	75 15                	jne    c0019f3a <HalDetectFeatures()+0xa74>
c0019f25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019f29:	c1 e8 14             	shr    eax,0x14
c0019f2c:	88 c2                	mov    dl,al
c0019f2e:	a0 7d db 02 c0       	mov    al,ds:0xc002db7d
c0019f33:	01 d0                	add    eax,edx
c0019f35:	a2 7d db 02 c0       	mov    ds:0xc002db7d,al
c0019f3a:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c0019f42:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c0019f4a:	85 c0                	test   eax,eax
c0019f4c:	74 2d                	je     c0019f7b <HalDetectFeatures()+0xab5>
c0019f4e:	83 ec 0c             	sub    esp,0xc
c0019f51:	68 00 00 00 40       	push   0x40000000
c0019f56:	e8 e1 f4 ff ff       	call   c001943c <cpuidCheckECX(unsigned int)>
c0019f5b:	83 c4 10             	add    esp,0x10
c0019f5e:	83 e0 01             	and    eax,0x1
c0019f61:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019f68:	a0 8e db 02 c0       	mov    al,ds:0xc002db8e
c0019f6d:	83 e0 fb             	and    eax,0xfffffffb
c0019f70:	88 c2                	mov    dl,al
c0019f72:	88 c8                	mov    al,cl
c0019f74:	09 d0                	or     eax,edx
c0019f76:	a2 8e db 02 c0       	mov    ds:0xc002db8e,al
c0019f7b:	a0 8f db 02 c0       	mov    al,ds:0xc002db8f
c0019f80:	83 c8 04             	or     eax,0x4
c0019f83:	a2 8f db 02 c0       	mov    ds:0xc002db8f,al
c0019f88:	a0 8f db 02 c0       	mov    al,ds:0xc002db8f
c0019f8d:	83 c8 08             	or     eax,0x8
c0019f90:	a2 8f db 02 c0       	mov    ds:0xc002db8f,al
c0019f95:	a0 8f db 02 c0       	mov    al,ds:0xc002db8f
c0019f9a:	83 c8 10             	or     eax,0x10
c0019f9d:	a2 8f db 02 c0       	mov    ds:0xc002db8f,al
c0019fa2:	83 ec 0c             	sub    esp,0xc
c0019fa5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019fa9:	50                   	push   eax
c0019faa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019fae:	50                   	push   eax
c0019faf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019fb3:	50                   	push   eax
c0019fb4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019fb8:	50                   	push   eax
c0019fb9:	68 00 00 00 80       	push   0x80000000
c0019fbe:	e8 ae f3 ff ff       	call   c0019371 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019fc3:	83 c4 20             	add    esp,0x20
c0019fc6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019fca:	3d 00 00 00 80       	cmp    eax,0x80000000
c0019fcf:	0f 86 96 01 00 00    	jbe    c001a16b <HalDetectFeatures()+0xca5>
c0019fd5:	83 ec 0c             	sub    esp,0xc
c0019fd8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019fdc:	50                   	push   eax
c0019fdd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019fe1:	50                   	push   eax
c0019fe2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019fe6:	50                   	push   eax
c0019fe7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019feb:	50                   	push   eax
c0019fec:	68 01 00 00 80       	push   0x80000001
c0019ff1:	e8 7b f3 ff ff       	call   c0019371 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019ff6:	83 c4 20             	add    esp,0x20
c0019ff9:	a0 8f db 02 c0       	mov    al,ds:0xc002db8f
c0019ffe:	83 e0 7f             	and    eax,0x7f
c001a001:	a2 8f db 02 c0       	mov    ds:0xc002db8f,al
c001a006:	a0 90 db 02 c0       	mov    al,ds:0xc002db90
c001a00b:	83 e0 fb             	and    eax,0xfffffffb
c001a00e:	a2 90 db 02 c0       	mov    ds:0xc002db90,al
c001a013:	a0 90 db 02 c0       	mov    al,ds:0xc002db90
c001a018:	83 e0 fd             	and    eax,0xfffffffd
c001a01b:	a2 90 db 02 c0       	mov    ds:0xc002db90,al
c001a020:	e9 46 01 00 00       	jmp    c001a16b <HalDetectFeatures()+0xca5>
c001a025:	83 ec 08             	sub    esp,0x8
c001a028:	68 33 5b 02 c0       	push   0xc0025b33
c001a02d:	68 70 db 02 c0       	push   0xc002db70
c001a032:	e8 09 66 fe ff       	call   c0000640 <strcpy>
c001a037:	83 c4 10             	add    esp,0x10
c001a03a:	c7 05 84 db 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002db84,0x1
c001a044:	e8 7a 61 fe ff       	call   c00001c3 <is486>
c001a049:	85 c0                	test   eax,eax
c001a04b:	0f 95 c0             	setne  al
c001a04e:	0f b6 c0             	movzx  eax,al
c001a051:	85 c0                	test   eax,eax
c001a053:	0f 84 8d 00 00 00    	je     c001a0e6 <HalDetectFeatures()+0xc20>
c001a059:	a0 8f db 02 c0       	mov    al,ds:0xc002db8f
c001a05e:	83 c8 04             	or     eax,0x4
c001a061:	a2 8f db 02 c0       	mov    ds:0xc002db8f,al
c001a066:	a0 8f db 02 c0       	mov    al,ds:0xc002db8f
c001a06b:	83 c8 08             	or     eax,0x8
c001a06e:	a2 8f db 02 c0       	mov    ds:0xc002db8f,al
c001a073:	a0 8f db 02 c0       	mov    al,ds:0xc002db8f
c001a078:	83 c8 10             	or     eax,0x10
c001a07b:	a2 8f db 02 c0       	mov    ds:0xc002db8f,al
c001a080:	0f 20 c0             	mov    eax,cr0
c001a083:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a087:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a08b:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a092:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a099:	83 e0 04             	and    eax,0x4
c001a09c:	74 1e                	je     c001a0bc <HalDetectFeatures()+0xbf6>
c001a09e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a0a5:	83 e0 10             	and    eax,0x10
c001a0a8:	75 12                	jne    c001a0bc <HalDetectFeatures()+0xbf6>
c001a0aa:	a0 90 db 02 c0       	mov    al,ds:0xc002db90
c001a0af:	83 e0 f7             	and    eax,0xfffffff7
c001a0b2:	a2 90 db 02 c0       	mov    ds:0xc002db90,al
c001a0b7:	e9 af 00 00 00       	jmp    c001a16b <HalDetectFeatures()+0xca5>
c001a0bc:	e8 dd 60 fe ff       	call   c000019e <hasLegacyFPU>
c001a0c1:	83 e0 01             	and    eax,0x1
c001a0c4:	83 e0 01             	and    eax,0x1
c001a0c7:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a0ce:	a0 90 db 02 c0       	mov    al,ds:0xc002db90
c001a0d3:	83 e0 f7             	and    eax,0xfffffff7
c001a0d6:	88 c2                	mov    dl,al
c001a0d8:	88 c8                	mov    al,cl
c001a0da:	09 d0                	or     eax,edx
c001a0dc:	a2 90 db 02 c0       	mov    ds:0xc002db90,al
c001a0e1:	e9 85 00 00 00       	jmp    c001a16b <HalDetectFeatures()+0xca5>
c001a0e6:	a0 8f db 02 c0       	mov    al,ds:0xc002db8f
c001a0eb:	83 e0 fb             	and    eax,0xfffffffb
c001a0ee:	a2 8f db 02 c0       	mov    ds:0xc002db8f,al
c001a0f3:	a0 8f db 02 c0       	mov    al,ds:0xc002db8f
c001a0f8:	83 e0 f7             	and    eax,0xfffffff7
c001a0fb:	a2 8f db 02 c0       	mov    ds:0xc002db8f,al
c001a100:	a0 8f db 02 c0       	mov    al,ds:0xc002db8f
c001a105:	83 e0 ef             	and    eax,0xffffffef
c001a108:	a2 8f db 02 c0       	mov    ds:0xc002db8f,al
c001a10d:	0f 20 c0             	mov    eax,cr0
c001a110:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a114:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a118:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c001a11f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a126:	83 e0 04             	and    eax,0x4
c001a129:	74 1b                	je     c001a146 <HalDetectFeatures()+0xc80>
c001a12b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a132:	83 e0 10             	and    eax,0x10
c001a135:	75 0f                	jne    c001a146 <HalDetectFeatures()+0xc80>
c001a137:	a0 90 db 02 c0       	mov    al,ds:0xc002db90
c001a13c:	83 e0 f7             	and    eax,0xfffffff7
c001a13f:	a2 90 db 02 c0       	mov    ds:0xc002db90,al
c001a144:	eb 25                	jmp    c001a16b <HalDetectFeatures()+0xca5>
c001a146:	e8 53 60 fe ff       	call   c000019e <hasLegacyFPU>
c001a14b:	83 e0 01             	and    eax,0x1
c001a14e:	83 e0 01             	and    eax,0x1
c001a151:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a158:	a0 90 db 02 c0       	mov    al,ds:0xc002db90
c001a15d:	83 e0 f7             	and    eax,0xfffffff7
c001a160:	88 c2                	mov    dl,al
c001a162:	88 c8                	mov    al,cl
c001a164:	09 d0                	or     eax,edx
c001a166:	a2 90 db 02 c0       	mov    ds:0xc002db90,al
c001a16b:	a0 90 db 02 c0       	mov    al,ds:0xc002db90
c001a170:	83 e0 08             	and    eax,0x8
c001a173:	0f b6 c0             	movzx  eax,al
c001a176:	85 c0                	test   eax,eax
c001a178:	75 25                	jne    c001a19f <HalDetectFeatures()+0xcd9>
c001a17a:	e8 1f 60 fe ff       	call   c000019e <hasLegacyFPU>
c001a17f:	83 e0 01             	and    eax,0x1
c001a182:	83 e0 01             	and    eax,0x1
c001a185:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a18c:	a0 90 db 02 c0       	mov    al,ds:0xc002db90
c001a191:	83 e0 f7             	and    eax,0xfffffff7
c001a194:	88 c2                	mov    dl,al
c001a196:	88 c8                	mov    al,cl
c001a198:	09 d0                	or     eax,edx
c001a19a:	a2 90 db 02 c0       	mov    ds:0xc002db90,al
c001a19f:	a0 90 db 02 c0       	mov    al,ds:0xc002db90
c001a1a4:	83 e0 08             	and    eax,0x8
c001a1a7:	0f b6 c0             	movzx  eax,al
c001a1aa:	85 c0                	test   eax,eax
c001a1ac:	74 0d                	je     c001a1bb <HalDetectFeatures()+0xcf5>
c001a1ae:	a0 8c db 02 c0       	mov    al,ds:0xc002db8c
c001a1b3:	83 c8 10             	or     eax,0x10
c001a1b6:	a2 8c db 02 c0       	mov    ds:0xc002db8c,al
c001a1bb:	a0 8c db 02 c0       	mov    al,ds:0xc002db8c
c001a1c0:	83 e0 10             	and    eax,0x10
c001a1c3:	0f b6 c0             	movzx  eax,al
c001a1c6:	85 c0                	test   eax,eax
c001a1c8:	75 23                	jne    c001a1ed <HalDetectFeatures()+0xd27>
c001a1ca:	e8 07 7c 00 00       	call   c0021dd6 <x87Detect>
c001a1cf:	83 e0 01             	and    eax,0x1
c001a1d2:	83 e0 01             	and    eax,0x1
c001a1d5:	89 c1                	mov    ecx,eax
c001a1d7:	c1 e1 04             	shl    ecx,0x4
c001a1da:	a0 8c db 02 c0       	mov    al,ds:0xc002db8c
c001a1df:	83 e0 ef             	and    eax,0xffffffef
c001a1e2:	88 c2                	mov    dl,al
c001a1e4:	88 c8                	mov    al,cl
c001a1e6:	09 d0                	or     eax,edx
c001a1e8:	a2 8c db 02 c0       	mov    ds:0xc002db8c,al
c001a1ed:	a0 8d db 02 c0       	mov    al,ds:0xc002db8d
c001a1f2:	83 e0 01             	and    eax,0x1
c001a1f5:	0f b6 c0             	movzx  eax,al
c001a1f8:	85 c0                	test   eax,eax
c001a1fa:	75 2d                	jne    c001a229 <HalDetectFeatures()+0xd63>
c001a1fc:	a0 8d db 02 c0       	mov    al,ds:0xc002db8d
c001a201:	83 e0 02             	and    eax,0x2
c001a204:	0f b6 c0             	movzx  eax,al
c001a207:	85 c0                	test   eax,eax
c001a209:	75 1e                	jne    c001a229 <HalDetectFeatures()+0xd63>
c001a20b:	a0 8d db 02 c0       	mov    al,ds:0xc002db8d
c001a210:	83 e0 04             	and    eax,0x4
c001a213:	0f b6 c0             	movzx  eax,al
c001a216:	85 c0                	test   eax,eax
c001a218:	75 0f                	jne    c001a229 <HalDetectFeatures()+0xd63>
c001a21a:	a0 8d db 02 c0       	mov    al,ds:0xc002db8d
c001a21f:	83 e0 08             	and    eax,0x8
c001a222:	0f b6 c0             	movzx  eax,al
c001a225:	85 c0                	test   eax,eax
c001a227:	74 0d                	je     c001a236 <HalDetectFeatures()+0xd70>
c001a229:	a0 8c db 02 c0       	mov    al,ds:0xc002db8c
c001a22e:	83 c8 80             	or     eax,0xffffff80
c001a231:	a2 8c db 02 c0       	mov    ds:0xc002db8c,al
c001a236:	a0 8c db 02 c0       	mov    al,ds:0xc002db8c
c001a23b:	83 e0 10             	and    eax,0x10
c001a23e:	0f b6 c0             	movzx  eax,al
c001a241:	85 c0                	test   eax,eax
c001a243:	74 2f                	je     c001a274 <HalDetectFeatures()+0xdae>
c001a245:	a0 8c db 02 c0       	mov    al,ds:0xc002db8c
c001a24a:	83 e0 80             	and    eax,0xffffff80
c001a24d:	0f b6 c0             	movzx  eax,al
c001a250:	85 c0                	test   eax,eax
c001a252:	75 20                	jne    c001a274 <HalDetectFeatures()+0xdae>
c001a254:	e8 37 7b 00 00       	call   c0021d90 <sseDetect>
c001a259:	83 e0 01             	and    eax,0x1
c001a25c:	89 c1                	mov    ecx,eax
c001a25e:	c1 e1 07             	shl    ecx,0x7
c001a261:	a0 8c db 02 c0       	mov    al,ds:0xc002db8c
c001a266:	83 e0 7f             	and    eax,0x7f
c001a269:	88 c2                	mov    dl,al
c001a26b:	88 c8                	mov    al,cl
c001a26d:	09 d0                	or     eax,edx
c001a26f:	a2 8c db 02 c0       	mov    ds:0xc002db8c,al
c001a274:	a0 8c db 02 c0       	mov    al,ds:0xc002db8c
c001a279:	83 e0 80             	and    eax,0xffffff80
c001a27c:	0f b6 c0             	movzx  eax,al
c001a27f:	85 c0                	test   eax,eax
c001a281:	74 1c                	je     c001a29f <HalDetectFeatures()+0xdd9>
c001a283:	a0 8d db 02 c0       	mov    al,ds:0xc002db8d
c001a288:	83 e0 20             	and    eax,0x20
c001a28b:	0f b6 c0             	movzx  eax,al
c001a28e:	85 c0                	test   eax,eax
c001a290:	75 0d                	jne    c001a29f <HalDetectFeatures()+0xdd9>
c001a292:	a0 8d db 02 c0       	mov    al,ds:0xc002db8d
c001a297:	83 e0 df             	and    eax,0xffffffdf
c001a29a:	a2 8d db 02 c0       	mov    ds:0xc002db8d,al
c001a29f:	c6 05 88 db 02 c0 00 	mov    BYTE PTR ds:0xc002db88,0x0
c001a2a6:	90                   	nop
c001a2a7:	81 c4 90 00 00 00    	add    esp,0x90
c001a2ad:	5b                   	pop    ebx
c001a2ae:	5e                   	pop    esi
c001a2af:	5f                   	pop    edi
c001a2b0:	c3                   	ret    

c001a2b1 <HalEnableNMI()>:
c001a2b1:	c6 05 6c db 02 c0 01 	mov    BYTE PTR ds:0xc002db6c,0x1
c001a2b8:	6a 10                	push   0x10
c001a2ba:	e8 02 ef ff ff       	call   c00191c1 <x86ReadCMOS(unsigned char)>
c001a2bf:	83 c4 04             	add    esp,0x4
c001a2c2:	90                   	nop
c001a2c3:	c3                   	ret    

c001a2c4 <HalDisableNMI()>:
c001a2c4:	c6 05 6c db 02 c0 00 	mov    BYTE PTR ds:0xc002db6c,0x0
c001a2cb:	6a 10                	push   0x10
c001a2cd:	e8 ef ee ff ff       	call   c00191c1 <x86ReadCMOS(unsigned char)>
c001a2d2:	83 c4 04             	add    esp,0x4
c001a2d5:	90                   	nop
c001a2d6:	c3                   	ret    

c001a2d7 <HalGetNMIState()>:
c001a2d7:	a0 6c db 02 c0       	mov    al,ds:0xc002db6c
c001a2dc:	c3                   	ret    

c001a2dd <x86rdmsr(unsigned int)>:
c001a2dd:	83 ec 1c             	sub    esp,0x1c
c001a2e0:	a0 8c db 02 c0       	mov    al,ds:0xc002db8c
c001a2e5:	83 e0 08             	and    eax,0x8
c001a2e8:	0f b6 c0             	movzx  eax,al
c001a2eb:	85 c0                	test   eax,eax
c001a2ed:	75 10                	jne    c001a2ff <x86rdmsr(unsigned int)+0x22>
c001a2ef:	83 ec 0c             	sub    esp,0xc
c001a2f2:	68 ce 5b 02 c0       	push   0xc0025bce
c001a2f7:	e8 c4 58 ff ff       	call   c000fbc0 <KePanic(char const*)>
c001a2fc:	83 c4 10             	add    esp,0x10
c001a2ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a303:	89 c1                	mov    ecx,eax
c001a305:	0f 32                	rdmsr  
c001a307:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a30b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a30f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a313:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a317:	83 c4 1c             	add    esp,0x1c
c001a31a:	c3                   	ret    

c001a31b <x86wrmsr(unsigned int, unsigned long long)>:
c001a31b:	83 ec 1c             	sub    esp,0x1c
c001a31e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a322:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a326:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a32a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a32e:	a0 8c db 02 c0       	mov    al,ds:0xc002db8c
c001a333:	83 e0 08             	and    eax,0x8
c001a336:	0f b6 c0             	movzx  eax,al
c001a339:	85 c0                	test   eax,eax
c001a33b:	75 10                	jne    c001a34d <x86wrmsr(unsigned int, unsigned long long)+0x32>
c001a33d:	83 ec 0c             	sub    esp,0xc
c001a340:	68 d4 5b 02 c0       	push   0xc0025bd4
c001a345:	e8 76 58 ff ff       	call   c000fbc0 <KePanic(char const*)>
c001a34a:	83 c4 10             	add    esp,0x10
c001a34d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001a351:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a355:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a359:	0f 30                	wrmsr  
c001a35b:	90                   	nop
c001a35c:	83 c4 1c             	add    esp,0x1c
c001a35f:	c3                   	ret    

c001a360 <HalHandleGeneralProtectionFault(void*, void*)>:
c001a360:	83 ec 0c             	sub    esp,0xc
c001a363:	83 ec 0c             	sub    esp,0xc
c001a366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a36a:	e8 02 e2 ff ff       	call   c0018571 <Vm::faultHandler(regs*)>
c001a36f:	83 c4 10             	add    esp,0x10
c001a372:	83 c4 0c             	add    esp,0xc
c001a375:	c3                   	ret    

c001a376 <HalFindRSDP()>:
c001a376:	83 ec 1c             	sub    esp,0x1c
c001a379:	a1 7c d1 02 c0       	mov    eax,ds:0xc002d17c
c001a37e:	3d ff 07 00 00       	cmp    eax,0x7ff
c001a383:	7e 17                	jle    c001a39c <HalFindRSDP()+0x26>
c001a385:	83 ec 0c             	sub    esp,0xc
c001a388:	68 00 04 00 00       	push   0x400
c001a38d:	e8 f2 2d ff ff       	call   c000d184 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001a392:	83 c4 10             	add    esp,0x10
c001a395:	0f b6 c0             	movzx  eax,al
c001a398:	85 c0                	test   eax,eax
c001a39a:	74 04                	je     c001a3a0 <HalFindRSDP()+0x2a>
c001a39c:	b0 01                	mov    al,0x1
c001a39e:	eb 02                	jmp    c001a3a2 <HalFindRSDP()+0x2c>
c001a3a0:	b0 00                	mov    al,0x0
c001a3a2:	0f b6 c0             	movzx  eax,al
c001a3a5:	85 c0                	test   eax,eax
c001a3a7:	74 1d                	je     c001a3c6 <HalFindRSDP()+0x50>
c001a3a9:	a0 8c db 02 c0       	mov    al,ds:0xc002db8c
c001a3ae:	83 e0 fb             	and    eax,0xfffffffb
c001a3b1:	a2 8c db 02 c0       	mov    ds:0xc002db8c,al
c001a3b6:	83 ec 0c             	sub    esp,0xc
c001a3b9:	68 da 5b 02 c0       	push   0xc0025bda
c001a3be:	e8 b9 cb fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a3c3:	83 c4 10             	add    esp,0x10
c001a3c6:	a0 8c db 02 c0       	mov    al,ds:0xc002db8c
c001a3cb:	83 e0 04             	and    eax,0x4
c001a3ce:	0f b6 c0             	movzx  eax,al
c001a3d1:	85 c0                	test   eax,eax
c001a3d3:	75 17                	jne    c001a3ec <HalFindRSDP()+0x76>
c001a3d5:	83 ec 0c             	sub    esp,0xc
c001a3d8:	68 e9 5b 02 c0       	push   0xc0025be9
c001a3dd:	e8 9a cb fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a3e2:	83 c4 10             	add    esp,0x10
c001a3e5:	b8 00 00 00 00       	mov    eax,0x0
c001a3ea:	eb 63                	jmp    c001a44f <HalFindRSDP()+0xd9>
c001a3ec:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001a3f4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001a3fc:	77 2f                	ja     c001a42d <HalFindRSDP()+0xb7>
c001a3fe:	83 ec 04             	sub    esp,0x4
c001a401:	6a 08                	push   0x8
c001a403:	68 f3 5b 02 c0       	push   0xc0025bf3
c001a408:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a40c:	e8 6f 5f fe ff       	call   c0000380 <memcmp>
c001a411:	83 c4 10             	add    esp,0x10
c001a414:	85 c0                	test   eax,eax
c001a416:	0f 94 c0             	sete   al
c001a419:	0f b6 c0             	movzx  eax,al
c001a41c:	85 c0                	test   eax,eax
c001a41e:	74 06                	je     c001a426 <HalFindRSDP()+0xb0>
c001a420:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a424:	eb 29                	jmp    c001a44f <HalFindRSDP()+0xd9>
c001a426:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001a42b:	eb c7                	jmp    c001a3f4 <HalFindRSDP()+0x7e>
c001a42d:	83 ec 0c             	sub    esp,0xc
c001a430:	68 fc 5b 02 c0       	push   0xc0025bfc
c001a435:	e8 42 cb fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a43a:	83 c4 10             	add    esp,0x10
c001a43d:	a0 8c db 02 c0       	mov    al,ds:0xc002db8c
c001a442:	83 e0 fb             	and    eax,0xfffffffb
c001a445:	a2 8c db 02 c0       	mov    ds:0xc002db8c,al
c001a44a:	b8 00 00 00 00       	mov    eax,0x0
c001a44f:	83 c4 1c             	add    esp,0x1c
c001a452:	c3                   	ret    

c001a453 <HalHandlePageFault(void*, void*)>:
c001a453:	83 ec 1c             	sub    esp,0x1c
c001a456:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001a45b:	8b 00                	mov    eax,DWORD PTR [eax]
c001a45d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a460:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c001a466:	0f 20 d2             	mov    edx,cr2
c001a469:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a46d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a471:	83 ec 08             	sub    esp,0x8
c001a474:	52                   	push   edx
c001a475:	50                   	push   eax
c001a476:	e8 45 9b ff ff       	call   c0013fc0 <VAS::tryLoadBackOffDisk(unsigned long)>
c001a47b:	83 c4 10             	add    esp,0x10
c001a47e:	83 c4 1c             	add    esp,0x1c
c001a481:	c3                   	ret    

c001a482 <HalHandleOpcodeFault(void*, void*)>:
c001a482:	83 ec 1c             	sub    esp,0x1c
c001a485:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a489:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a48d:	a0 88 db 02 c0       	mov    al,ds:0xc002db88
c001a492:	0f b6 c0             	movzx  eax,al
c001a495:	85 c0                	test   eax,eax
c001a497:	74 25                	je     c001a4be <HalHandleOpcodeFault(void*, void*)+0x3c>
c001a499:	83 ec 0c             	sub    esp,0xc
c001a49c:	68 f4 5d 02 c0       	push   0xc0025df4
c001a4a1:	e8 d6 ca fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a4a6:	83 c4 10             	add    esp,0x10
c001a4a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a4ad:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a4b0:	8d 50 19             	lea    edx,[eax+0x19]
c001a4b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a4b7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a4ba:	b0 01                	mov    al,0x1
c001a4bc:	eb 02                	jmp    c001a4c0 <HalHandleOpcodeFault(void*, void*)+0x3e>
c001a4be:	b0 00                	mov    al,0x0
c001a4c0:	83 c4 1c             	add    esp,0x1c
c001a4c3:	c3                   	ret    

c001a4c4 <HalDisplayDebugInfo(void*)>:
c001a4c4:	83 ec 2c             	sub    esp,0x2c
c001a4c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a4cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a4cf:	0f 20 c0             	mov    eax,cr0
c001a4d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a4d6:	0f 20 d0             	mov    eax,cr2
c001a4d9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a4dd:	0f 20 d8             	mov    eax,cr3
c001a4e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a4e4:	0f 20 e0             	mov    eax,cr4
c001a4e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a4eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4ef:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001a4f2:	83 ec 08             	sub    esp,0x8
c001a4f5:	50                   	push   eax
c001a4f6:	68 16 5c 02 c0       	push   0xc0025c16
c001a4fb:	e8 7c ca fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a500:	83 c4 10             	add    esp,0x10
c001a503:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a507:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001a50a:	83 ec 08             	sub    esp,0x8
c001a50d:	50                   	push   eax
c001a50e:	68 07 5c 02 c0       	push   0xc0025c07
c001a513:	e8 64 ca fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a518:	83 c4 10             	add    esp,0x10
c001a51b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a51f:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001a522:	83 ec 08             	sub    esp,0x8
c001a525:	50                   	push   eax
c001a526:	68 12 5c 02 c0       	push   0xc0025c12
c001a52b:	e8 4c ca fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a530:	83 c4 10             	add    esp,0x10
c001a533:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a537:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a53a:	83 ec 08             	sub    esp,0x8
c001a53d:	50                   	push   eax
c001a53e:	68 21 5c 02 c0       	push   0xc0025c21
c001a543:	e8 34 ca fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a548:	83 c4 10             	add    esp,0x10
c001a54b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a54f:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001a552:	83 ec 08             	sub    esp,0x8
c001a555:	50                   	push   eax
c001a556:	68 2c 5c 02 c0       	push   0xc0025c2c
c001a55b:	e8 1c ca fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a560:	83 c4 10             	add    esp,0x10
c001a563:	83 ec 08             	sub    esp,0x8
c001a566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a56a:	68 37 5c 02 c0       	push   0xc0025c37
c001a56f:	e8 08 ca fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a574:	83 c4 10             	add    esp,0x10
c001a577:	83 ec 08             	sub    esp,0x8
c001a57a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a57e:	68 42 5c 02 c0       	push   0xc0025c42
c001a583:	e8 f4 c9 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a588:	83 c4 10             	add    esp,0x10
c001a58b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a58f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001a592:	c1 e0 05             	shl    eax,0x5
c001a595:	8d 90 e0 70 02 c0    	lea    edx,[eax-0x3ffd8f20]
c001a59b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a59f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001a5a2:	83 ec 04             	sub    esp,0x4
c001a5a5:	52                   	push   edx
c001a5a6:	50                   	push   eax
c001a5a7:	68 4d 5c 02 c0       	push   0xc0025c4d
c001a5ac:	e8 cb c9 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a5b1:	83 c4 10             	add    esp,0x10
c001a5b4:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c001a5b9:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a5bf:	83 ec 0c             	sub    esp,0xc
c001a5c2:	50                   	push   eax
c001a5c3:	e8 b3 7c ff ff       	call   c001227b <setActiveTerminal(VgaText*)>
c001a5c8:	83 c4 10             	add    esp,0x10
c001a5cb:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c001a5d0:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a5d6:	83 ec 08             	sub    esp,0x8
c001a5d9:	68 5c 5c 02 c0       	push   0xc0025c5c
c001a5de:	50                   	push   eax
c001a5df:	e8 e4 7f ff ff       	call   c00125c8 <VgaText::puts(char const*)>
c001a5e4:	83 c4 10             	add    esp,0x10
c001a5e7:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c001a5ec:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a5f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a5f6:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001a5f9:	83 ec 08             	sub    esp,0x8
c001a5fc:	52                   	push   edx
c001a5fd:	50                   	push   eax
c001a5fe:	e8 7f 7f ff ff       	call   c0012582 <VgaText::putx(unsigned int)>
c001a603:	83 c4 10             	add    esp,0x10
c001a606:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c001a60b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a611:	83 ec 08             	sub    esp,0x8
c001a614:	68 6a 5c 02 c0       	push   0xc0025c6a
c001a619:	50                   	push   eax
c001a61a:	e8 a9 7f ff ff       	call   c00125c8 <VgaText::puts(char const*)>
c001a61f:	83 c4 10             	add    esp,0x10
c001a622:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c001a627:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a62d:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001a632:	8b 12                	mov    edx,DWORD PTR [edx]
c001a634:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a637:	83 c2 0c             	add    edx,0xc
c001a63a:	83 ec 08             	sub    esp,0x8
c001a63d:	52                   	push   edx
c001a63e:	50                   	push   eax
c001a63f:	e8 84 7f ff ff       	call   c00125c8 <VgaText::puts(char const*)>
c001a644:	83 c4 10             	add    esp,0x10
c001a647:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c001a64c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a652:	83 ec 08             	sub    esp,0x8
c001a655:	68 73 5c 02 c0       	push   0xc0025c73
c001a65a:	50                   	push   eax
c001a65b:	e8 68 7f ff ff       	call   c00125c8 <VgaText::puts(char const*)>
c001a660:	83 c4 10             	add    esp,0x10
c001a663:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c001a668:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a66e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a672:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001a675:	83 ec 08             	sub    esp,0x8
c001a678:	52                   	push   edx
c001a679:	50                   	push   eax
c001a67a:	e8 03 7f ff ff       	call   c0012582 <VgaText::putx(unsigned int)>
c001a67f:	83 c4 10             	add    esp,0x10
c001a682:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c001a687:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a68d:	83 ec 08             	sub    esp,0x8
c001a690:	68 7b 5c 02 c0       	push   0xc0025c7b
c001a695:	50                   	push   eax
c001a696:	e8 2d 7f ff ff       	call   c00125c8 <VgaText::puts(char const*)>
c001a69b:	83 c4 10             	add    esp,0x10
c001a69e:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c001a6a3:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a6a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a6ad:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001a6b0:	83 ec 08             	sub    esp,0x8
c001a6b3:	52                   	push   edx
c001a6b4:	50                   	push   eax
c001a6b5:	e8 c8 7e ff ff       	call   c0012582 <VgaText::putx(unsigned int)>
c001a6ba:	83 c4 10             	add    esp,0x10
c001a6bd:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c001a6c2:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a6c8:	83 ec 08             	sub    esp,0x8
c001a6cb:	68 83 5c 02 c0       	push   0xc0025c83
c001a6d0:	50                   	push   eax
c001a6d1:	e8 f2 7e ff ff       	call   c00125c8 <VgaText::puts(char const*)>
c001a6d6:	83 c4 10             	add    esp,0x10
c001a6d9:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c001a6de:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a6e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a6e8:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001a6eb:	83 ec 08             	sub    esp,0x8
c001a6ee:	52                   	push   edx
c001a6ef:	50                   	push   eax
c001a6f0:	e8 8d 7e ff ff       	call   c0012582 <VgaText::putx(unsigned int)>
c001a6f5:	83 c4 10             	add    esp,0x10
c001a6f8:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c001a6fd:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a703:	83 ec 08             	sub    esp,0x8
c001a706:	68 8b 5c 02 c0       	push   0xc0025c8b
c001a70b:	50                   	push   eax
c001a70c:	e8 b7 7e ff ff       	call   c00125c8 <VgaText::puts(char const*)>
c001a711:	83 c4 10             	add    esp,0x10
c001a714:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c001a719:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a71f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a723:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001a726:	83 ec 08             	sub    esp,0x8
c001a729:	52                   	push   edx
c001a72a:	50                   	push   eax
c001a72b:	e8 52 7e ff ff       	call   c0012582 <VgaText::putx(unsigned int)>
c001a730:	83 c4 10             	add    esp,0x10
c001a733:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c001a738:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a73e:	83 ec 08             	sub    esp,0x8
c001a741:	68 93 5c 02 c0       	push   0xc0025c93
c001a746:	50                   	push   eax
c001a747:	e8 7c 7e ff ff       	call   c00125c8 <VgaText::puts(char const*)>
c001a74c:	83 c4 10             	add    esp,0x10
c001a74f:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c001a754:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a75a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a75e:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001a761:	83 ec 08             	sub    esp,0x8
c001a764:	52                   	push   edx
c001a765:	50                   	push   eax
c001a766:	e8 17 7e ff ff       	call   c0012582 <VgaText::putx(unsigned int)>
c001a76b:	83 c4 10             	add    esp,0x10
c001a76e:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c001a773:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a779:	83 ec 08             	sub    esp,0x8
c001a77c:	68 9b 5c 02 c0       	push   0xc0025c9b
c001a781:	50                   	push   eax
c001a782:	e8 41 7e ff ff       	call   c00125c8 <VgaText::puts(char const*)>
c001a787:	83 c4 10             	add    esp,0x10
c001a78a:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c001a78f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a795:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a799:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a79c:	83 ec 08             	sub    esp,0x8
c001a79f:	52                   	push   edx
c001a7a0:	50                   	push   eax
c001a7a1:	e8 dc 7d ff ff       	call   c0012582 <VgaText::putx(unsigned int)>
c001a7a6:	83 c4 10             	add    esp,0x10
c001a7a9:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c001a7ae:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a7b4:	83 ec 08             	sub    esp,0x8
c001a7b7:	68 a3 5c 02 c0       	push   0xc0025ca3
c001a7bc:	50                   	push   eax
c001a7bd:	e8 06 7e ff ff       	call   c00125c8 <VgaText::puts(char const*)>
c001a7c2:	83 c4 10             	add    esp,0x10
c001a7c5:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c001a7ca:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a7d0:	83 ec 08             	sub    esp,0x8
c001a7d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a7d7:	50                   	push   eax
c001a7d8:	e8 a5 7d ff ff       	call   c0012582 <VgaText::putx(unsigned int)>
c001a7dd:	83 c4 10             	add    esp,0x10
c001a7e0:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c001a7e5:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a7eb:	83 ec 08             	sub    esp,0x8
c001a7ee:	68 ac 5c 02 c0       	push   0xc0025cac
c001a7f3:	50                   	push   eax
c001a7f4:	e8 cf 7d ff ff       	call   c00125c8 <VgaText::puts(char const*)>
c001a7f9:	83 c4 10             	add    esp,0x10
c001a7fc:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c001a801:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a807:	83 ec 08             	sub    esp,0x8
c001a80a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a80e:	50                   	push   eax
c001a80f:	e8 6e 7d ff ff       	call   c0012582 <VgaText::putx(unsigned int)>
c001a814:	83 c4 10             	add    esp,0x10
c001a817:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c001a81c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a822:	83 ec 08             	sub    esp,0x8
c001a825:	68 b4 5c 02 c0       	push   0xc0025cb4
c001a82a:	50                   	push   eax
c001a82b:	e8 98 7d ff ff       	call   c00125c8 <VgaText::puts(char const*)>
c001a830:	83 c4 10             	add    esp,0x10
c001a833:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c001a838:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a83e:	83 ec 08             	sub    esp,0x8
c001a841:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a845:	50                   	push   eax
c001a846:	e8 37 7d ff ff       	call   c0012582 <VgaText::putx(unsigned int)>
c001a84b:	83 c4 10             	add    esp,0x10
c001a84e:	fa                   	cli    
c001a84f:	f4                   	hlt    
c001a850:	eb fe                	jmp    c001a850 <HalDisplayDebugInfo(void*)+0x38c>

c001a852 <HalReceivedNMI()>:
c001a852:	83 ec 1c             	sub    esp,0x1c
c001a855:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c001a85c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a860:	89 c2                	mov    edx,eax
c001a862:	ec                   	in     al,dx
c001a863:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001a867:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001a86b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a86f:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c001a876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a87a:	89 c2                	mov    edx,eax
c001a87c:	ec                   	in     al,dx
c001a87d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001a881:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001a885:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001a889:	83 ec 0c             	sub    esp,0xc
c001a88c:	68 bc 5c 02 c0       	push   0xc0025cbc
c001a891:	e8 e6 c6 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a896:	83 c4 10             	add    esp,0x10
c001a899:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001a89e:	83 e0 10             	and    eax,0x10
c001a8a1:	74 10                	je     c001a8b3 <HalReceivedNMI()+0x61>
c001a8a3:	83 ec 0c             	sub    esp,0xc
c001a8a6:	68 cd 5c 02 c0       	push   0xc0025ccd
c001a8ab:	e8 10 53 ff ff       	call   c000fbc0 <KePanic(char const*)>
c001a8b0:	83 c4 10             	add    esp,0x10
c001a8b3:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001a8b8:	83 e0 40             	and    eax,0x40
c001a8bb:	74 10                	je     c001a8cd <HalReceivedNMI()+0x7b>
c001a8bd:	83 ec 0c             	sub    esp,0xc
c001a8c0:	68 da 5c 02 c0       	push   0xc0025cda
c001a8c5:	e8 f6 52 ff ff       	call   c000fbc0 <KePanic(char const*)>
c001a8ca:	83 c4 10             	add    esp,0x10
c001a8cd:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001a8d1:	0f be c0             	movsx  eax,al
c001a8d4:	85 c0                	test   eax,eax
c001a8d6:	79 10                	jns    c001a8e8 <HalReceivedNMI()+0x96>
c001a8d8:	83 ec 0c             	sub    esp,0xc
c001a8db:	68 e4 5c 02 c0       	push   0xc0025ce4
c001a8e0:	e8 db 52 ff ff       	call   c000fbc0 <KePanic(char const*)>
c001a8e5:	83 c4 10             	add    esp,0x10
c001a8e8:	90                   	nop
c001a8e9:	83 c4 1c             	add    esp,0x1c
c001a8ec:	c3                   	ret    

c001a8ed <HalSystemIdle()>:
c001a8ed:	56                   	push   esi
c001a8ee:	53                   	push   ebx
c001a8ef:	83 ec 14             	sub    esp,0x14
c001a8f2:	a0 90 db 02 c0       	mov    al,ds:0xc002db90
c001a8f7:	83 e0 10             	and    eax,0x10
c001a8fa:	0f b6 c0             	movzx  eax,al
c001a8fd:	85 c0                	test   eax,eax
c001a8ff:	74 43                	je     c001a944 <HalSystemIdle()+0x57>
c001a901:	83 ec 0c             	sub    esp,0xc
c001a904:	68 e1 00 00 00       	push   0xe1
c001a909:	e8 cf f9 ff ff       	call   c001a2dd <x86rdmsr(unsigned int)>
c001a90e:	83 c4 10             	add    esp,0x10
c001a911:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a915:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a919:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a91d:	83 e0 02             	and    eax,0x2
c001a920:	89 c3                	mov    ebx,eax
c001a922:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a926:	83 e0 00             	and    eax,0x0
c001a929:	89 c6                	mov    esi,eax
c001a92b:	83 ec 04             	sub    esp,0x4
c001a92e:	56                   	push   esi
c001a92f:	53                   	push   ebx
c001a930:	68 e1 00 00 00       	push   0xe1
c001a935:	e8 e1 f9 ff ff       	call   c001a31b <x86wrmsr(unsigned int, unsigned long long)>
c001a93a:	83 c4 10             	add    esp,0x10
c001a93d:	e8 52 58 fe ff       	call   c0000194 <doTPAUSE>
c001a942:	eb 01                	jmp    c001a945 <HalSystemIdle()+0x58>
c001a944:	f4                   	hlt    
c001a945:	90                   	nop
c001a946:	83 c4 14             	add    esp,0x14
c001a949:	5b                   	pop    ebx
c001a94a:	5e                   	pop    esi
c001a94b:	c3                   	ret    

c001a94c <i386SaveCoprocessor(void*)>:
c001a94c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a950:	83 c0 3f             	add    eax,0x3f
c001a953:	83 e0 c0             	and    eax,0xffffffc0
c001a956:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a95a:	ff 25 50 db 02 c0    	jmp    DWORD PTR ds:0xc002db50

c001a960 <i386LoadCoprocessor(void*)>:
c001a960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a964:	83 c0 3f             	add    eax,0x3f
c001a967:	83 e0 c0             	and    eax,0xffffffc0
c001a96a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a96e:	ff 25 4c db 02 c0    	jmp    DWORD PTR ds:0xc002db4c

c001a974 <x87EmulHandler(regs*, void*)>:
c001a974:	53                   	push   ebx
c001a975:	83 ec 08             	sub    esp,0x8
c001a978:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a97d:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c001a981:	74 10                	je     c001a993 <x87EmulHandler(regs*, void*)+0x1f>
c001a983:	83 ec 0c             	sub    esp,0xc
c001a986:	68 f1 5c 02 c0       	push   0xc0025cf1
c001a98b:	e8 30 52 ff ff       	call   c000fbc0 <KePanic(char const*)>
c001a990:	83 c4 10             	add    esp,0x10
c001a993:	0f 20 c0             	mov    eax,cr0
c001a996:	a8 08                	test   al,0x8
c001a998:	74 59                	je     c001a9f3 <x87EmulHandler(regs*, void*)+0x7f>
c001a99a:	0f 06                	clts   
c001a99c:	a1 48 db 02 c0       	mov    eax,ds:0xc002db48
c001a9a1:	85 c0                	test   eax,eax
c001a9a3:	74 0e                	je     c001a9b3 <x87EmulHandler(regs*, void*)+0x3f>
c001a9a5:	83 ec 0c             	sub    esp,0xc
c001a9a8:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a9ab:	e8 9c ff ff ff       	call   c001a94c <i386SaveCoprocessor(void*)>
c001a9b0:	83 c4 10             	add    esp,0x10
c001a9b3:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001a9b9:	83 7b 59 00          	cmp    DWORD PTR [ebx+0x59],0x0
c001a9bd:	75 12                	jne    c001a9d1 <x87EmulHandler(regs*, void*)+0x5d>
c001a9bf:	83 ec 0c             	sub    esp,0xc
c001a9c2:	68 40 02 00 00       	push   0x240
c001a9c7:	e8 97 4d ff ff       	call   c000f763 <malloc>
c001a9cc:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c001a9cf:	eb 10                	jmp    c001a9e1 <x87EmulHandler(regs*, void*)+0x6d>
c001a9d1:	83 ec 0c             	sub    esp,0xc
c001a9d4:	a1 48 db 02 c0       	mov    eax,ds:0xc002db48
c001a9d9:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a9dc:	e8 7f ff ff ff       	call   c001a960 <i386LoadCoprocessor(void*)>
c001a9e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a9e6:	83 c4 10             	add    esp,0x10
c001a9e9:	a3 48 db 02 c0       	mov    ds:0xc002db48,eax
c001a9ee:	83 c4 08             	add    esp,0x8
c001a9f1:	5b                   	pop    ebx
c001a9f2:	c3                   	ret    
c001a9f3:	83 ec 0c             	sub    esp,0xc
c001a9f6:	68 05 5d 02 c0       	push   0xc0025d05
c001a9fb:	e8 7c c5 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001aa00:	c7 44 24 20 01 00 00 00 	mov    DWORD PTR [esp+0x20],0x1
c001aa08:	83 c4 18             	add    esp,0x18
c001aa0b:	5b                   	pop    ebx
c001aa0c:	e9 13 d3 ff ff       	jmp    c0017d24 <KeTerminateCurrentThread(int)>

c001aa11 <HalInitialiseCoprocessor()>:
c001aa11:	83 ec 10             	sub    esp,0x10
c001aa14:	c7 05 48 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db48,0x0
c001aa1e:	6a 00                	push   0x0
c001aa20:	68 74 a9 01 c0       	push   0xc001a974
c001aa25:	6a 07                	push   0x7
c001aa27:	e8 df 07 00 00       	call   c001b20b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aa2c:	a0 8c db 02 c0       	mov    al,ds:0xc002db8c
c001aa31:	83 c4 10             	add    esp,0x10
c001aa34:	a8 80                	test   al,0x80
c001aa36:	74 1c                	je     c001aa54 <HalInitialiseCoprocessor()+0x43>
c001aa38:	c7 05 50 db 02 c0 a8 1d 02 c0 	mov    DWORD PTR ds:0xc002db50,0xc0021da8
c001aa42:	c7 05 4c db 02 c0 b0 1d 02 c0 	mov    DWORD PTR ds:0xc002db4c,0xc0021db0
c001aa4c:	83 c4 0c             	add    esp,0xc
c001aa4f:	e9 64 73 00 00       	jmp    c0021db8 <sseInit>
c001aa54:	a8 10                	test   al,0x10
c001aa56:	74 1c                	je     c001aa74 <HalInitialiseCoprocessor()+0x63>
c001aa58:	c7 05 50 db 02 c0 f7 1d 02 c0 	mov    DWORD PTR ds:0xc002db50,0xc0021df7
c001aa62:	c7 05 4c db 02 c0 fe 1d 02 c0 	mov    DWORD PTR ds:0xc002db4c,0xc0021dfe
c001aa6c:	83 c4 0c             	add    esp,0xc
c001aa6f:	e9 91 73 00 00       	jmp    c0021e05 <x87Init>
c001aa74:	c7 05 50 db 02 c0 b0 91 01 c0 	mov    DWORD PTR ds:0xc002db50,0xc00191b0
c001aa7e:	c7 05 4c db 02 c0 b0 91 01 c0 	mov    DWORD PTR ds:0xc002db4c,0xc00191b0
c001aa88:	0f 20 c0             	mov    eax,cr0
c001aa8b:	83 c8 04             	or     eax,0x4
c001aa8e:	0f 22 c0             	mov    cr0,eax
c001aa91:	83 c4 0c             	add    esp,0xc
c001aa94:	c3                   	ret    

c001aa95 <HalPanic(char const*)>:
c001aa95:	53                   	push   ebx
c001aa96:	83 ec 10             	sub    esp,0x10
c001aa99:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aa9d:	fa                   	cli    
c001aa9e:	53                   	push   ebx
c001aa9f:	68 1b 5d 02 c0       	push   0xc0025d1b
c001aaa4:	e8 d3 c4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001aaa9:	a1 44 db 02 c0       	mov    eax,ds:0xc002db44
c001aaae:	83 c4 10             	add    esp,0x10
c001aab1:	85 c0                	test   eax,eax
c001aab3:	74 09                	je     c001aabe <HalPanic(char const*)+0x29>
c001aab5:	83 ec 0c             	sub    esp,0xc
c001aab8:	53                   	push   ebx
c001aab9:	ff d0                	call   eax
c001aabb:	83 c4 10             	add    esp,0x10
c001aabe:	a1 f4 d1 02 c0       	mov    eax,ds:0xc002d1f4
c001aac3:	85 c0                	test   eax,eax
c001aac5:	0f 84 dc 00 00 00    	je     c001aba7 <HalPanic(char const*)+0x112>
c001aacb:	52                   	push   edx
c001aacc:	6a 01                	push   0x1
c001aace:	6a 0f                	push   0xf
c001aad0:	50                   	push   eax
c001aad1:	e8 e4 75 ff ff       	call   c00120ba <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001aad6:	59                   	pop    ecx
c001aad7:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001aadd:	e8 e4 77 ff ff       	call   c00122c6 <VgaText::clearScreen()>
c001aae2:	58                   	pop    eax
c001aae3:	5a                   	pop    edx
c001aae4:	68 98 4c 02 c0       	push   0xc0024c98
c001aae9:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001aaef:	e8 fe 75 ff ff       	call   c00120f2 <VgaText::setTitle(char*)>
c001aaf4:	83 c4 0c             	add    esp,0xc
c001aaf7:	6a 01                	push   0x1
c001aaf9:	6a 0f                	push   0xf
c001aafb:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001ab01:	e8 b4 75 ff ff       	call   c00120ba <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001ab06:	59                   	pop    ecx
c001ab07:	58                   	pop    eax
c001ab08:	68 34 5d 02 c0       	push   0xc0025d34
c001ab0d:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001ab13:	e8 b0 7a ff ff       	call   c00125c8 <VgaText::puts(char const*)>
c001ab18:	83 c4 0c             	add    esp,0xc
c001ab1b:	6a 0f                	push   0xf
c001ab1d:	6a 01                	push   0x1
c001ab1f:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001ab25:	e8 90 75 ff ff       	call   c00120ba <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001ab2a:	58                   	pop    eax
c001ab2b:	5a                   	pop    edx
c001ab2c:	68 3d 5d 02 c0       	push   0xc0025d3d
c001ab31:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001ab37:	e8 8c 7a ff ff       	call   c00125c8 <VgaText::puts(char const*)>
c001ab3c:	83 c4 0c             	add    esp,0xc
c001ab3f:	6a 01                	push   0x1
c001ab41:	6a 0f                	push   0xf
c001ab43:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001ab49:	e8 6c 75 ff ff       	call   c00120ba <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001ab4e:	59                   	pop    ecx
c001ab4f:	58                   	pop    eax
c001ab50:	68 81 5d 02 c0       	push   0xc0025d81
c001ab55:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001ab5b:	e8 68 7a ff ff       	call   c00125c8 <VgaText::puts(char const*)>
c001ab60:	58                   	pop    eax
c001ab61:	5a                   	pop    edx
c001ab62:	68 4a 5d 02 c0       	push   0xc0025d4a
c001ab67:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001ab6d:	e8 56 7a ff ff       	call   c00125c8 <VgaText::puts(char const*)>
c001ab72:	59                   	pop    ecx
c001ab73:	58                   	pop    eax
c001ab74:	68 84 5d 02 c0       	push   0xc0025d84
c001ab79:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001ab7f:	e8 44 7a ff ff       	call   c00125c8 <VgaText::puts(char const*)>
c001ab84:	58                   	pop    eax
c001ab85:	5a                   	pop    edx
c001ab86:	53                   	push   ebx
c001ab87:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001ab8d:	e8 36 7a ff ff       	call   c00125c8 <VgaText::puts(char const*)>
c001ab92:	59                   	pop    ecx
c001ab93:	5b                   	pop    ebx
c001ab94:	68 81 5d 02 c0       	push   0xc0025d81
c001ab99:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c001ab9f:	e8 24 7a ff ff       	call   c00125c8 <VgaText::puts(char const*)>
c001aba4:	83 c4 10             	add    esp,0x10
c001aba7:	eb fe                	jmp    c001aba7 <HalPanic(char const*)+0x112>

c001aba9 <HalQueryPerformanceCounter()>:
c001aba9:	31 c0                	xor    eax,eax
c001abab:	31 d2                	xor    edx,edx
c001abad:	f6 05 8e db 02 c0 08 	test   BYTE PTR ds:0xc002db8e,0x8
c001abb4:	75 02                	jne    c001abb8 <HalQueryPerformanceCounter()+0xf>
c001abb6:	0f 31                	rdtsc  
c001abb8:	c3                   	ret    

c001abb9 <HalInitialise()>:
c001abb9:	53                   	push   ebx
c001abba:	83 ec 08             	sub    esp,0x8
c001abbd:	e8 04 e9 ff ff       	call   c00194c6 <HalDetectFeatures()>
c001abc2:	83 ec 0c             	sub    esp,0xc
c001abc5:	68 b1 91 01 c0       	push   0xc00191b1
c001abca:	e8 d1 59 ff ff       	call   c00105a0 <KeRegisterRestartHandler(void (*)())>
c001abcf:	c7 04 24 bc 91 01 c0 	mov    DWORD PTR [esp],0xc00191bc
c001abd6:	e8 bb 59 ff ff       	call   c0010596 <KeRegisterShutdownHandler(void (*)())>
c001abdb:	c7 04 24 bd 91 01 c0 	mov    DWORD PTR [esp],0xc00191bd
c001abe2:	e8 c3 59 ff ff       	call   c00105aa <KeRegisterSleepHandler(void (*)())>
c001abe7:	e8 d4 17 ff ff       	call   c000c3c0 <scanMADT()>
c001abec:	83 c4 10             	add    esp,0x10
c001abef:	80 3d 40 ce 02 c0 00 	cmp    BYTE PTR ds:0xc002ce40,0x0
c001abf6:	75 0d                	jne    c001ac05 <HalInitialise()+0x4c>
c001abf8:	a0 8c db 02 c0       	mov    al,ds:0xc002db8c
c001abfd:	83 e0 fe             	and    eax,0xfffffffe
c001ac00:	a2 8c db 02 c0       	mov    ds:0xc002db8c,al
c001ac05:	e8 de 08 00 00       	call   c001b4e8 <picOpen()>
c001ac0a:	f6 05 8c db 02 c0 01 	test   BYTE PTR ds:0xc002db8c,0x1
c001ac11:	74 0a                	je     c001ac1d <HalInitialise()+0x64>
c001ac13:	e8 20 08 00 00       	call   c001b438 <picDisable()>
c001ac18:	e8 9b e1 ff ff       	call   c0018db8 <apicOpen()>
c001ac1d:	bb 0f 00 00 00       	mov    ebx,0xf
c001ac22:	50                   	push   eax
c001ac23:	6a 00                	push   0x0
c001ac25:	68 a0 e7 00 c0       	push   0xc000e7a0
c001ac2a:	6a 02                	push   0x2
c001ac2c:	e8 da 05 00 00       	call   c001b20b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ac31:	83 c4 0c             	add    esp,0xc
c001ac34:	6a 00                	push   0x0
c001ac36:	68 18 e7 00 c0       	push   0xc000e718
c001ac3b:	6a 06                	push   0x6
c001ac3d:	e8 c9 05 00 00       	call   c001b20b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ac42:	83 c4 0c             	add    esp,0xc
c001ac45:	6a 00                	push   0x0
c001ac47:	68 b0 e7 00 c0       	push   0xc000e7b0
c001ac4c:	6a 08                	push   0x8
c001ac4e:	e8 b8 05 00 00       	call   c001b20b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ac53:	83 c4 0c             	add    esp,0xc
c001ac56:	6a 00                	push   0x0
c001ac58:	68 70 e6 00 c0       	push   0xc000e670
c001ac5d:	6a 0d                	push   0xd
c001ac5f:	e8 a7 05 00 00       	call   c001b20b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ac64:	83 c4 0c             	add    esp,0xc
c001ac67:	6a 00                	push   0x0
c001ac69:	68 c4 e6 00 c0       	push   0xc000e6c4
c001ac6e:	6a 0e                	push   0xe
c001ac70:	e8 96 05 00 00       	call   c001b20b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ac75:	83 c4 0c             	add    esp,0xc
c001ac78:	6a 00                	push   0x0
c001ac7a:	68 6c e7 00 c0       	push   0xc000e76c
c001ac7f:	6a 00                	push   0x0
c001ac81:	e8 85 05 00 00       	call   c001b20b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ac86:	83 c4 0c             	add    esp,0xc
c001ac89:	6a 00                	push   0x0
c001ac8b:	68 6c e7 00 c0       	push   0xc000e76c
c001ac90:	6a 01                	push   0x1
c001ac92:	e8 74 05 00 00       	call   c001b20b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ac97:	83 c4 0c             	add    esp,0xc
c001ac9a:	6a 00                	push   0x0
c001ac9c:	68 6c e7 00 c0       	push   0xc000e76c
c001aca1:	6a 03                	push   0x3
c001aca3:	e8 63 05 00 00       	call   c001b20b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aca8:	83 c4 0c             	add    esp,0xc
c001acab:	6a 00                	push   0x0
c001acad:	68 6c e7 00 c0       	push   0xc000e76c
c001acb2:	6a 04                	push   0x4
c001acb4:	e8 52 05 00 00       	call   c001b20b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001acb9:	83 c4 0c             	add    esp,0xc
c001acbc:	6a 00                	push   0x0
c001acbe:	68 6c e7 00 c0       	push   0xc000e76c
c001acc3:	6a 05                	push   0x5
c001acc5:	e8 41 05 00 00       	call   c001b20b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001acca:	83 c4 0c             	add    esp,0xc
c001accd:	6a 00                	push   0x0
c001accf:	68 6c e7 00 c0       	push   0xc000e76c
c001acd4:	6a 00                	push   0x0
c001acd6:	e8 30 05 00 00       	call   c001b20b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001acdb:	83 c4 0c             	add    esp,0xc
c001acde:	6a 00                	push   0x0
c001ace0:	68 6c e7 00 c0       	push   0xc000e76c
c001ace5:	6a 01                	push   0x1
c001ace7:	e8 1f 05 00 00       	call   c001b20b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001acec:	83 c4 0c             	add    esp,0xc
c001acef:	6a 00                	push   0x0
c001acf1:	68 6c e7 00 c0       	push   0xc000e76c
c001acf6:	6a 09                	push   0x9
c001acf8:	e8 0e 05 00 00       	call   c001b20b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001acfd:	83 c4 0c             	add    esp,0xc
c001ad00:	6a 00                	push   0x0
c001ad02:	68 6c e7 00 c0       	push   0xc000e76c
c001ad07:	6a 0a                	push   0xa
c001ad09:	e8 fd 04 00 00       	call   c001b20b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ad0e:	83 c4 0c             	add    esp,0xc
c001ad11:	6a 00                	push   0x0
c001ad13:	68 6c e7 00 c0       	push   0xc000e76c
c001ad18:	6a 0b                	push   0xb
c001ad1a:	e8 ec 04 00 00       	call   c001b20b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ad1f:	83 c4 10             	add    esp,0x10
c001ad22:	50                   	push   eax
c001ad23:	6a 00                	push   0x0
c001ad25:	68 6c e7 00 c0       	push   0xc000e76c
c001ad2a:	53                   	push   ebx
c001ad2b:	43                   	inc    ebx
c001ad2c:	e8 da 04 00 00       	call   c001b20b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ad31:	83 c4 10             	add    esp,0x10
c001ad34:	83 fb 1e             	cmp    ebx,0x1e
c001ad37:	75 e9                	jne    c001ad22 <HalInitialise()+0x169>
c001ad39:	50                   	push   eax
c001ad3a:	6a 00                	push   0x0
c001ad3c:	68 54 1f 01 c0       	push   0xc0011f54
c001ad41:	6a 60                	push   0x60
c001ad43:	e8 c3 04 00 00       	call   c001b20b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ad48:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c001ad4d:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001ad57:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001ad5e:	e8 00 4a ff ff       	call   c000f763 <malloc>
c001ad63:	89 04 24             	mov    DWORD PTR [esp],eax
c001ad66:	89 c3                	mov    ebx,eax
c001ad68:	e8 e9 0e 00 00       	call   c001bc56 <RTC::RTC()>
c001ad6d:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001ad77:	5a                   	pop    edx
c001ad78:	59                   	pop    ecx
c001ad79:	53                   	push   ebx
c001ad7a:	ff 35 08 d1 02 c0    	push   DWORD PTR ds:0xc002d108
c001ad80:	e8 cf ec fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001ad85:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad87:	6a 00                	push   0x0
c001ad89:	6a 00                	push   0x0
c001ad8b:	6a 00                	push   0x0
c001ad8d:	53                   	push   ebx
c001ad8e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ad91:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c001ad96:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
c001ad9c:	83 c4 28             	add    esp,0x28
c001ad9f:	5b                   	pop    ebx
c001ada0:	c3                   	ret    

c001ada1 <HalMakeBeep(int)>:
c001ada1:	53                   	push   ebx
c001ada2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001ada6:	85 db                	test   ebx,ebx
c001ada8:	75 07                	jne    c001adb1 <HalMakeBeep(int)+0x10>
c001adaa:	e4 61                	in     al,0x61
c001adac:	83 e0 fc             	and    eax,0xfffffffc
c001adaf:	eb 26                	jmp    c001add7 <HalMakeBeep(int)+0x36>
c001adb1:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001adb6:	99                   	cdq    
c001adb7:	f7 fb                	idiv   ebx
c001adb9:	89 c1                	mov    ecx,eax
c001adbb:	b0 b6                	mov    al,0xb6
c001adbd:	e6 43                	out    0x43,al
c001adbf:	88 c8                	mov    al,cl
c001adc1:	e6 42                	out    0x42,al
c001adc3:	89 c8                	mov    eax,ecx
c001adc5:	c1 e8 08             	shr    eax,0x8
c001adc8:	e6 42                	out    0x42,al
c001adca:	e4 61                	in     al,0x61
c001adcc:	89 c2                	mov    edx,eax
c001adce:	83 ca 03             	or     edx,0x3
c001add1:	38 d0                	cmp    al,dl
c001add3:	74 04                	je     c001add9 <HalMakeBeep(int)+0x38>
c001add5:	88 d0                	mov    al,dl
c001add7:	e6 61                	out    0x61,al
c001add9:	5b                   	pop    ebx
c001adda:	c3                   	ret    

c001addb <HalGetRand()>:
c001addb:	31 c0                	xor    eax,eax
c001addd:	c3                   	ret    

c001adde <HalEndOfInterrupt(int)>:
c001adde:	f6 05 8c db 02 c0 01 	test   BYTE PTR ds:0xc002db8c,0x1
c001ade5:	74 1d                	je     c001ae04 <HalEndOfInterrupt(int)+0x26>
c001ade7:	83 ec 18             	sub    esp,0x18
c001adea:	6a 1b                	push   0x1b
c001adec:	e8 ec f4 ff ff       	call   c001a2dd <x86rdmsr(unsigned int)>
c001adf1:	25 00 f0 ff ff       	and    eax,0xfffff000
c001adf6:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001ae00:	83 c4 1c             	add    esp,0x1c
c001ae03:	c3                   	ret    
c001ae04:	e9 63 08 00 00       	jmp    c001b66c <picEOI(int)>
c001ae09:	90                   	nop

c001ae0a <CPU::CPU()>:
c001ae0a:	83 ec 0c             	sub    esp,0xc
c001ae0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae11:	83 ec 08             	sub    esp,0x8
c001ae14:	68 22 5b 02 c0       	push   0xc0025b22
c001ae19:	50                   	push   eax
c001ae1a:	e8 97 ed fe ff       	call   c0009bb6 <Device::Device(char const*)>
c001ae1f:	83 c4 10             	add    esp,0x10
c001ae22:	ba 20 5e 02 c0       	mov    edx,0xc0025e20
c001ae27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae2b:	89 10                	mov    DWORD PTR [eax],edx
c001ae2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae31:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001ae3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae3f:	05 64 01 00 00       	add    eax,0x164
c001ae44:	83 ec 0c             	sub    esp,0xc
c001ae47:	50                   	push   eax
c001ae48:	e8 b5 39 ff ff       	call   c000e802 <GDT::GDT()>
c001ae4d:	83 c4 10             	add    esp,0x10
c001ae50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae54:	05 68 09 00 00       	add    eax,0x968
c001ae59:	83 ec 0c             	sub    esp,0xc
c001ae5c:	50                   	push   eax
c001ae5d:	e8 f2 3b ff ff       	call   c000ea54 <IDT::IDT()>
c001ae62:	83 c4 10             	add    esp,0x10
c001ae65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae69:	05 68 11 00 00       	add    eax,0x1168
c001ae6e:	83 ec 0c             	sub    esp,0xc
c001ae71:	50                   	push   eax
c001ae72:	e8 2d 7c ff ff       	call   c0012aa4 <TSS::TSS()>
c001ae77:	83 c4 10             	add    esp,0x10
c001ae7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae7e:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001ae88:	90                   	nop
c001ae89:	83 c4 0c             	add    esp,0xc
c001ae8c:	c3                   	ret    
c001ae8d:	90                   	nop

c001ae8e <CPU::setupSMEP()>:
c001ae8e:	0f 20 e0             	mov    eax,cr4
c001ae91:	0d 00 00 10 00       	or     eax,0x100000
c001ae96:	0f 22 e0             	mov    cr4,eax
c001ae99:	c3                   	ret    

c001ae9a <CPU::setupUMIP()>:
c001ae9a:	0f 20 e0             	mov    eax,cr4
c001ae9d:	80 cc 08             	or     ah,0x8
c001aea0:	0f 22 e0             	mov    cr4,eax
c001aea3:	c3                   	ret    

c001aea4 <CPU::setupTSC()>:
c001aea4:	0f 20 e0             	mov    eax,cr4
c001aea7:	83 c8 04             	or     eax,0x4
c001aeaa:	0f 22 e0             	mov    cr4,eax
c001aead:	c3                   	ret    

c001aeae <CPU::setupLargePages()>:
c001aeae:	0f 20 e0             	mov    eax,cr4
c001aeb1:	83 c8 10             	or     eax,0x10
c001aeb4:	0f 22 e0             	mov    cr4,eax
c001aeb7:	c3                   	ret    

c001aeb8 <CPU::setupPAT()>:
c001aeb8:	f6 05 8c db 02 c0 08 	test   BYTE PTR ds:0xc002db8c,0x8
c001aebf:	74 28                	je     c001aee9 <CPU::setupPAT()+0x31>
c001aec1:	53                   	push   ebx
c001aec2:	83 ec 14             	sub    esp,0x14
c001aec5:	68 77 02 00 00       	push   0x277
c001aeca:	e8 0e f4 ff ff       	call   c001a2dd <x86rdmsr(unsigned int)>
c001aecf:	83 c4 0c             	add    esp,0xc
c001aed2:	83 e2 f8             	and    edx,0xfffffff8
c001aed5:	83 ca 01             	or     edx,0x1
c001aed8:	52                   	push   edx
c001aed9:	50                   	push   eax
c001aeda:	68 77 02 00 00       	push   0x277
c001aedf:	e8 37 f4 ff ff       	call   c001a31b <x86wrmsr(unsigned int, unsigned long long)>
c001aee4:	83 c4 18             	add    esp,0x18
c001aee7:	5b                   	pop    ebx
c001aee8:	c3                   	ret    
c001aee9:	c3                   	ret    

c001aeea <CPU::setupMTRR()>:
c001aeea:	c3                   	ret    
c001aeeb:	90                   	nop

c001aeec <CPU::setupGlobalPages()>:
c001aeec:	0f 20 e0             	mov    eax,cr4
c001aeef:	0c 80                	or     al,0x80
c001aef1:	0f 22 e0             	mov    cr4,eax
c001aef4:	c3                   	ret    
c001aef5:	90                   	nop

c001aef6 <CPU::allowUsermodeDataAccess()>:
c001aef6:	f6 05 8f db 02 c0 40 	test   BYTE PTR ds:0xc002db8f,0x40
c001aefd:	74 03                	je     c001af02 <CPU::allowUsermodeDataAccess()+0xc>
c001aeff:	0f 01 cb             	stac   
c001af02:	c3                   	ret    
c001af03:	90                   	nop

c001af04 <CPU::prohibitUsermodeDataAccess()>:
c001af04:	f6 05 8f db 02 c0 40 	test   BYTE PTR ds:0xc002db8f,0x40
c001af0b:	74 03                	je     c001af10 <CPU::prohibitUsermodeDataAccess()+0xc>
c001af0d:	0f 01 ca             	clac   
c001af10:	c3                   	ret    
c001af11:	90                   	nop

c001af12 <CPU::setupSMAP()>:
c001af12:	0f 20 e0             	mov    eax,cr4
c001af15:	0d 00 00 20 00       	or     eax,0x200000
c001af1a:	0f 22 e0             	mov    cr4,eax
c001af1d:	eb e5                	jmp    c001af04 <CPU::prohibitUsermodeDataAccess()>
c001af1f:	90                   	nop

c001af20 <CPU::setupFeatures()>:
c001af20:	53                   	push   ebx
c001af21:	83 ec 08             	sub    esp,0x8
c001af24:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af28:	f6 05 8f db 02 c0 20 	test   BYTE PTR ds:0xc002db8f,0x20
c001af2f:	74 18                	je     c001af49 <CPU::setupFeatures()+0x29>
c001af31:	83 ec 0c             	sub    esp,0xc
c001af34:	68 8f 5d 02 c0       	push   0xc0025d8f
c001af39:	e8 3e c0 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001af3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af41:	e8 54 ff ff ff       	call   c001ae9a <CPU::setupUMIP()>
c001af46:	83 c4 10             	add    esp,0x10
c001af49:	f6 05 8e db 02 c0 08 	test   BYTE PTR ds:0xc002db8e,0x8
c001af50:	74 18                	je     c001af6a <CPU::setupFeatures()+0x4a>
c001af52:	83 ec 0c             	sub    esp,0xc
c001af55:	68 99 5d 02 c0       	push   0xc0025d99
c001af5a:	e8 1d c0 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001af5f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af62:	e8 3d ff ff ff       	call   c001aea4 <CPU::setupTSC()>
c001af67:	83 c4 10             	add    esp,0x10
c001af6a:	f6 05 8e db 02 c0 20 	test   BYTE PTR ds:0xc002db8e,0x20
c001af71:	74 18                	je     c001af8b <CPU::setupFeatures()+0x6b>
c001af73:	83 ec 0c             	sub    esp,0xc
c001af76:	68 a2 5d 02 c0       	push   0xc0025da2
c001af7b:	e8 fc bf fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001af80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af83:	e8 26 ff ff ff       	call   c001aeae <CPU::setupLargePages()>
c001af88:	83 c4 10             	add    esp,0x10
c001af8b:	f6 05 8e db 02 c0 40 	test   BYTE PTR ds:0xc002db8e,0x40
c001af92:	74 18                	je     c001afac <CPU::setupFeatures()+0x8c>
c001af94:	83 ec 0c             	sub    esp,0xc
c001af97:	68 ab 5d 02 c0       	push   0xc0025dab
c001af9c:	e8 db bf fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001afa1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afa4:	e8 43 ff ff ff       	call   c001aeec <CPU::setupGlobalPages()>
c001afa9:	83 c4 10             	add    esp,0x10
c001afac:	f6 05 8e db 02 c0 80 	test   BYTE PTR ds:0xc002db8e,0x80
c001afb3:	74 18                	je     c001afcd <CPU::setupFeatures()+0xad>
c001afb5:	83 ec 0c             	sub    esp,0xc
c001afb8:	68 bd 5d 02 c0       	push   0xc0025dbd
c001afbd:	e8 ba bf fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001afc2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afc5:	e8 ee fe ff ff       	call   c001aeb8 <CPU::setupPAT()>
c001afca:	83 c4 10             	add    esp,0x10
c001afcd:	f6 05 90 db 02 c0 04 	test   BYTE PTR ds:0xc002db90,0x4
c001afd4:	74 11                	je     c001afe7 <CPU::setupFeatures()+0xc7>
c001afd6:	c7 44 24 10 c6 5d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025dc6
c001afde:	83 c4 08             	add    esp,0x8
c001afe1:	5b                   	pop    ebx
c001afe2:	e9 95 bf fe ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c001afe7:	83 c4 08             	add    esp,0x8
c001afea:	5b                   	pop    ebx
c001afeb:	c3                   	ret    

c001afec <CPU::open(int, int, void*)>:
c001afec:	55                   	push   ebp
c001afed:	57                   	push   edi
c001afee:	56                   	push   esi
c001afef:	53                   	push   ebx
c001aff0:	83 ec 18             	sub    esp,0x18
c001aff3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001aff7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001affb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001afff:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001b005:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001b00b:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001b011:	50                   	push   eax
c001b012:	e8 4d 38 ff ff       	call   c000e864 <GDT::setup()>
c001b017:	83 c4 0c             	add    esp,0xc
c001b01a:	6a 00                	push   0x0
c001b01c:	68 ef be ad de       	push   0xdeadbeef
c001b021:	55                   	push   ebp
c001b022:	e8 c1 7a ff ff       	call   c0012ae8 <TSS::setup(unsigned long, unsigned long)>
c001b027:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b02a:	e8 99 7a ff ff       	call   c0012ac8 <TSS::flush()>
c001b02f:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001b035:	89 04 24             	mov    DWORD PTR [esp],eax
c001b038:	e8 8d 3a ff ff       	call   c000eaca <IDT::setup()>
c001b03d:	b8 00 04 00 00       	mov    eax,0x400
c001b042:	0f 23 f8             	mov    dr7,eax
c001b045:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001b04f:	e8 60 4d ff ff       	call   c000fdb4 <Phys::allocatePage()>
c001b054:	83 c4 10             	add    esp,0x10
c001b057:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001b05d:	85 f6                	test   esi,esi
c001b05f:	89 38                	mov    DWORD PTR [eax],edi
c001b061:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b067:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001b06a:	74 10                	je     c001b07c <CPU::open(int, int, void*)+0x90>
c001b06c:	50                   	push   eax
c001b06d:	50                   	push   eax
c001b06e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b074:	56                   	push   esi
c001b075:	e8 1a 84 ff ff       	call   c0013494 <VAS::setCPUSpecific(unsigned long)>
c001b07a:	eb 0d                	jmp    c001b089 <CPU::open(int, int, void*)+0x9d>
c001b07c:	83 ec 0c             	sub    esp,0xc
c001b07f:	68 d0 5d 02 c0       	push   0xc0025dd0
c001b084:	e8 37 4b ff ff       	call   c000fbc0 <KePanic(char const*)>
c001b089:	83 c4 10             	add    esp,0x10
c001b08c:	83 ec 0c             	sub    esp,0xc
c001b08f:	68 de 5d 02 c0       	push   0xc0025dde
c001b094:	e8 38 21 ff ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001b099:	e8 1b fb ff ff       	call   c001abb9 <HalInitialise()>
c001b09e:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
c001b0a5:	e8 da 20 ff ff       	call   c000d184 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001b0aa:	0f b6 c0             	movzx  eax,al
c001b0ad:	83 f8 01             	cmp    eax,0x1
c001b0b0:	19 c0                	sbb    eax,eax
c001b0b2:	83 e0 46             	and    eax,0x46
c001b0b5:	83 c0 1e             	add    eax,0x1e
c001b0b8:	89 04 24             	mov    DWORD PTR [esp],eax
c001b0bb:	e8 2d 00 ff ff       	call   c000b0ed <setupTimer(int)>
c001b0c0:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001b0c6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001b0cd:	e8 b2 20 ff ff       	call   c000d184 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001b0d2:	83 c4 10             	add    esp,0x10
c001b0d5:	84 c0                	test   al,al
c001b0d7:	74 0c                	je     c001b0e5 <CPU::open(int, int, void*)+0xf9>
c001b0d9:	83 ec 0c             	sub    esp,0xc
c001b0dc:	53                   	push   ebx
c001b0dd:	e8 3e fe ff ff       	call   c001af20 <CPU::setupFeatures()>
c001b0e2:	83 c4 10             	add    esp,0x10
c001b0e5:	83 c4 0c             	add    esp,0xc
c001b0e8:	31 c0                	xor    eax,eax
c001b0ea:	5b                   	pop    ebx
c001b0eb:	5e                   	pop    esi
c001b0ec:	5f                   	pop    edi
c001b0ed:	5d                   	pop    ebp
c001b0ee:	c3                   	ret    

c001b0ef <convertLegacyIRQNumber(int)>:
c001b0ef:	83 ec 0c             	sub    esp,0xc
c001b0f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0f6:	f6 05 8c db 02 c0 01 	test   BYTE PTR ds:0xc002db8c,0x1
c001b0fd:	74 0c                	je     c001b10b <convertLegacyIRQNumber(int)+0x1c>
c001b0ff:	83 f8 0f             	cmp    eax,0xf
c001b102:	7f 0b                	jg     c001b10f <convertLegacyIRQNumber(int)+0x20>
c001b104:	0f b6 80 48 69 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd96b8]
c001b10b:	83 c4 0c             	add    esp,0xc
c001b10e:	c3                   	ret    
c001b10f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b113:	83 ec 0c             	sub    esp,0xc
c001b116:	68 44 5e 02 c0       	push   0xc0025e44
c001b11b:	e8 a0 4a ff ff       	call   c000fbc0 <KePanic(char const*)>
c001b120:	83 c4 10             	add    esp,0x10
c001b123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b127:	83 c4 0c             	add    esp,0xc
c001b12a:	c3                   	ret    

c001b12b <KeSetupInterrupts()>:
c001b12b:	31 c0                	xor    eax,eax
c001b12d:	c7 80 a0 eb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1460],0x0
c001b137:	c7 80 a0 db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2460],0x0
c001b141:	c7 80 a4 eb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd145c],0x0
c001b14b:	c7 80 a4 db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd245c],0x0
c001b155:	c7 80 a8 eb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1458],0x0
c001b15f:	c7 80 a8 db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2458],0x0
c001b169:	c7 80 ac eb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1454],0x0
c001b173:	c7 80 ac db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2454],0x0
c001b17d:	83 c0 10             	add    eax,0x10
c001b180:	3d 00 10 00 00       	cmp    eax,0x1000
c001b185:	75 a6                	jne    c001b12d <KeSetupInterrupts()+0x2>
c001b187:	c3                   	ret    

c001b188 <int_handler>:
c001b188:	55                   	push   ebp
c001b189:	57                   	push   edi
c001b18a:	56                   	push   esi
c001b18b:	53                   	push   ebx
c001b18c:	83 ec 0c             	sub    esp,0xc
c001b18f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b193:	eb 02                	jmp    c001b197 <int_handler+0xf>
c001b195:	fa                   	cli    
c001b196:	f4                   	hlt    
c001b197:	e8 1e 4a ff ff       	call   c000fbba <KeIsKernelInPanic()>
c001b19c:	84 c0                	test   al,al
c001b19e:	75 f5                	jne    c001b195 <int_handler+0xd>
c001b1a0:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001b1a3:	8d 46 e0             	lea    eax,[esi-0x20]
c001b1a6:	83 f8 17             	cmp    eax,0x17
c001b1a9:	76 40                	jbe    c001b1eb <int_handler+0x63>
c001b1ab:	c1 e6 04             	shl    esi,0x4
c001b1ae:	31 db                	xor    ebx,ebx
c001b1b0:	8d ae a0 eb 02 c0    	lea    ebp,[esi-0x3ffd1460]
c001b1b6:	81 c6 a0 db 02 c0    	add    esi,0xc002dba0
c001b1bc:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001b1c0:	85 c0                	test   eax,eax
c001b1c2:	74 13                	je     c001b1d7 <int_handler+0x4f>
c001b1c4:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001b1c7:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001b1cb:	74 2c                	je     c001b1f9 <int_handler+0x71>
c001b1cd:	83 ec 08             	sub    esp,0x8
c001b1d0:	52                   	push   edx
c001b1d1:	57                   	push   edi
c001b1d2:	ff d0                	call   eax
c001b1d4:	83 c4 10             	add    esp,0x10
c001b1d7:	83 c3 01             	add    ebx,0x1
c001b1da:	83 fb 04             	cmp    ebx,0x4
c001b1dd:	75 dd                	jne    c001b1bc <int_handler+0x34>
c001b1df:	83 c4 0c             	add    esp,0xc
c001b1e2:	31 c0                	xor    eax,eax
c001b1e4:	5b                   	pop    ebx
c001b1e5:	31 d2                	xor    edx,edx
c001b1e7:	5e                   	pop    esi
c001b1e8:	5f                   	pop    edi
c001b1e9:	5d                   	pop    ebp
c001b1ea:	c3                   	ret    
c001b1eb:	83 ec 0c             	sub    esp,0xc
c001b1ee:	50                   	push   eax
c001b1ef:	e8 ea fb ff ff       	call   c001adde <HalEndOfInterrupt(int)>
c001b1f4:	83 c4 10             	add    esp,0x10
c001b1f7:	eb b2                	jmp    c001b1ab <int_handler+0x23>
c001b1f9:	83 ec 08             	sub    esp,0x8
c001b1fc:	52                   	push   edx
c001b1fd:	57                   	push   edi
c001b1fe:	ff d0                	call   eax
c001b200:	83 c4 10             	add    esp,0x10
c001b203:	83 c4 0c             	add    esp,0xc
c001b206:	5b                   	pop    ebx
c001b207:	5e                   	pop    esi
c001b208:	5f                   	pop    edi
c001b209:	5d                   	pop    ebp
c001b20a:	c3                   	ret    

c001b20b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001b20b:	56                   	push   esi
c001b20c:	31 c0                	xor    eax,eax
c001b20e:	53                   	push   ebx
c001b20f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b213:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b217:	89 ca                	mov    edx,ecx
c001b219:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b21d:	c1 e2 04             	shl    edx,0x4
c001b220:	83 bc 82 a0 eb 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd1460],0x0
c001b228:	74 17                	je     c001b241 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001b22a:	83 c0 01             	add    eax,0x1
c001b22d:	83 f8 04             	cmp    eax,0x4
c001b230:	75 ee                	jne    c001b220 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001b232:	c7 44 24 0c a5 5e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0025ea5
c001b23a:	5b                   	pop    ebx
c001b23b:	5e                   	pop    esi
c001b23c:	e9 7f 49 ff ff       	jmp    c000fbc0 <KePanic(char const*)>
c001b241:	8d 04 88             	lea    eax,[eax+ecx*4]
c001b244:	89 1c 85 a0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1460],ebx
c001b24b:	89 34 85 a0 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2460],esi
c001b252:	5b                   	pop    ebx
c001b253:	5e                   	pop    esi
c001b254:	c3                   	ret    

c001b255 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b255:	57                   	push   edi
c001b256:	f6 05 8c db 02 c0 01 	test   BYTE PTR ds:0xc002db8c,0x1
c001b25d:	56                   	push   esi
c001b25e:	53                   	push   ebx
c001b25f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b263:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b267:	74 54                	je     c001b2bd <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x68>
c001b269:	89 c7                	mov    edi,eax
c001b26b:	84 c0                	test   al,al
c001b26d:	74 1d                	je     c001b28c <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001b26f:	83 fe 0f             	cmp    esi,0xf
c001b272:	0f 8f d5 00 00 00    	jg     c001b34d <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf8>
c001b278:	0f b6 b6 48 69 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd96b8]
c001b27f:	0f b7 bc 36 20 ce 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd31e0]
c001b287:	d1 ef                	shr    edi,1
c001b289:	83 e7 01             	and    edi,0x1
c001b28c:	83 ec 08             	sub    esp,0x8
c001b28f:	a1 00 db 02 c0       	mov    eax,ds:0xc002db00
c001b294:	31 db                	xor    ebx,ebx
c001b296:	50                   	push   eax
c001b297:	68 b2 5e 02 c0       	push   0xc0025eb2
c001b29c:	e8 db bc fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b2a1:	83 c4 10             	add    esp,0x10
c001b2a4:	a1 00 db 02 c0       	mov    eax,ds:0xc002db00
c001b2a9:	85 c0                	test   eax,eax
c001b2ab:	7f 55                	jg     c001b302 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001b2ad:	83 ec 0c             	sub    esp,0xc
c001b2b0:	68 c9 5e 02 c0       	push   0xc0025ec9
c001b2b5:	e8 06 49 ff ff       	call   c000fbc0 <KePanic(char const*)>
c001b2ba:	83 c4 10             	add    esp,0x10
c001b2bd:	8d 7e 20             	lea    edi,[esi+0x20]
c001b2c0:	89 f8                	mov    eax,edi
c001b2c2:	31 d2                	xor    edx,edx
c001b2c4:	c1 e0 04             	shl    eax,0x4
c001b2c7:	8b 8c 90 a0 eb 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd1460]
c001b2ce:	85 c9                	test   ecx,ecx
c001b2d0:	0f 84 8e 00 00 00    	je     c001b364 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10f>
c001b2d6:	83 c2 01             	add    edx,0x1
c001b2d9:	83 fa 04             	cmp    edx,0x4
c001b2dc:	75 e9                	jne    c001b2c7 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001b2de:	83 ec 0c             	sub    esp,0xc
c001b2e1:	68 80 5e 02 c0       	push   0xc0025e80
c001b2e6:	e8 d5 48 ff ff       	call   c000fbc0 <KePanic(char const*)>
c001b2eb:	83 c4 10             	add    esp,0x10
c001b2ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b2f3:	5b                   	pop    ebx
c001b2f4:	5e                   	pop    esi
c001b2f5:	5f                   	pop    edi
c001b2f6:	c3                   	ret    
c001b2f7:	83 c3 01             	add    ebx,0x1
c001b2fa:	39 1d 00 db 02 c0    	cmp    DWORD PTR ds:0xc002db00,ebx
c001b300:	7e ab                	jle    c001b2ad <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x58>
c001b302:	83 ec 08             	sub    esp,0x8
c001b305:	8b 04 9d 20 db 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd24e0]
c001b30c:	56                   	push   esi
c001b30d:	50                   	push   eax
c001b30e:	e8 31 dc ff ff       	call   c0018f44 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001b313:	83 c4 10             	add    esp,0x10
c001b316:	84 c0                	test   al,al
c001b318:	74 dd                	je     c001b2f7 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa2>
c001b31a:	83 ec 04             	sub    esp,0x4
c001b31d:	89 f8                	mov    eax,edi
c001b31f:	8b 1c 9d 20 db 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd24e0]
c001b326:	0f b6 f8             	movzx  edi,al
c001b329:	57                   	push   edi
c001b32a:	8d 7e 20             	lea    edi,[esi+0x20]
c001b32d:	6a 00                	push   0x0
c001b32f:	89 f8                	mov    eax,edi
c001b331:	0f b6 c0             	movzx  eax,al
c001b334:	50                   	push   eax
c001b335:	89 f0                	mov    eax,esi
c001b337:	6a 00                	push   0x0
c001b339:	0f b6 c0             	movzx  eax,al
c001b33c:	6a 00                	push   0x0
c001b33e:	50                   	push   eax
c001b33f:	53                   	push   ebx
c001b340:	e8 6b dd ff ff       	call   c00190b0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001b345:	83 c4 20             	add    esp,0x20
c001b348:	e9 73 ff ff ff       	jmp    c001b2c0 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6b>
c001b34d:	83 ec 0c             	sub    esp,0xc
c001b350:	31 ff                	xor    edi,edi
c001b352:	68 44 5e 02 c0       	push   0xc0025e44
c001b357:	e8 64 48 ff ff       	call   c000fbc0 <KePanic(char const*)>
c001b35c:	83 c4 10             	add    esp,0x10
c001b35f:	e9 28 ff ff ff       	jmp    c001b28c <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001b364:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b367:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b36b:	89 14 85 a0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1460],edx
c001b372:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b376:	5b                   	pop    ebx
c001b377:	89 14 85 a0 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2460],edx
c001b37e:	89 f0                	mov    eax,esi
c001b380:	5e                   	pop    esi
c001b381:	5f                   	pop    edi
c001b382:	c3                   	ret    

c001b383 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001b383:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b387:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b38b:	c1 e0 04             	shl    eax,0x4
c001b38e:	8d 50 10             	lea    edx,[eax+0x10]
c001b391:	39 88 a0 eb 02 c0    	cmp    DWORD PTR [eax-0x3ffd1460],ecx
c001b397:	74 08                	je     c001b3a1 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001b399:	83 c0 04             	add    eax,0x4
c001b39c:	39 d0                	cmp    eax,edx
c001b39e:	75 f1                	jne    c001b391 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001b3a0:	c3                   	ret    
c001b3a1:	c7 80 a0 eb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1460],0x0
c001b3ab:	c7 80 a0 db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2460],0x0
c001b3b5:	eb e2                	jmp    c001b399 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001b3b7 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b3b7:	53                   	push   ebx
c001b3b8:	83 ec 08             	sub    esp,0x8
c001b3bb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b3bf:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b3c4:	74 09                	je     c001b3cf <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001b3c6:	f6 05 8c db 02 c0 01 	test   BYTE PTR ds:0xc002db8c,0x1
c001b3cd:	75 37                	jne    c001b406 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4f>
c001b3cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3d3:	83 c0 20             	add    eax,0x20
c001b3d6:	c1 e0 04             	shl    eax,0x4
c001b3d9:	8d 50 10             	lea    edx,[eax+0x10]
c001b3dc:	39 98 a0 eb 02 c0    	cmp    DWORD PTR [eax-0x3ffd1460],ebx
c001b3e2:	74 0c                	je     c001b3f0 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x39>
c001b3e4:	83 c0 04             	add    eax,0x4
c001b3e7:	39 d0                	cmp    eax,edx
c001b3e9:	75 f1                	jne    c001b3dc <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x25>
c001b3eb:	83 c4 08             	add    esp,0x8
c001b3ee:	5b                   	pop    ebx
c001b3ef:	c3                   	ret    
c001b3f0:	c7 80 a0 eb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1460],0x0
c001b3fa:	c7 80 a0 db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2460],0x0
c001b404:	eb de                	jmp    c001b3e4 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2d>
c001b406:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c001b40b:	7f 11                	jg     c001b41e <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x67>
c001b40d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b411:	0f b6 80 48 69 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd96b8]
c001b418:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b41c:	eb b1                	jmp    c001b3cf <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001b41e:	83 ec 0c             	sub    esp,0xc
c001b421:	68 d6 5e 02 c0       	push   0xc0025ed6
c001b426:	e8 95 47 ff ff       	call   c000fbc0 <KePanic(char const*)>
c001b42b:	83 c4 10             	add    esp,0x10
c001b42e:	eb 9f                	jmp    c001b3cf <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>

c001b430 <picIoWait()>:
c001b430:	eb 00                	jmp    c001b432 <picIoWait()+0x2>
c001b432:	eb 00                	jmp    c001b434 <picIoWait()+0x4>
c001b434:	90                   	nop
c001b435:	c3                   	ret    
c001b436:	66 90                	xchg   ax,ax

c001b438 <picDisable()>:
c001b438:	83 ec 10             	sub    esp,0x10
c001b43b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001b442:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001b447:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b44b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b450:	ee                   	out    dx,al
c001b451:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001b458:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001b45d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001b461:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001b466:	ee                   	out    dx,al
c001b467:	90                   	nop
c001b468:	83 c4 10             	add    esp,0x10
c001b46b:	c3                   	ret    

c001b46c <picGetIRQReg(int)>:
c001b46c:	83 ec 10             	sub    esp,0x10
c001b46f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b473:	0f b6 c0             	movzx  eax,al
c001b476:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001b47d:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001b481:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b485:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b48a:	ee                   	out    dx,al
c001b48b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b48f:	0f b6 c0             	movzx  eax,al
c001b492:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001b499:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b49d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b4a1:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b4a6:	ee                   	out    dx,al
c001b4a7:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001b4ae:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001b4b3:	89 c2                	mov    edx,eax
c001b4b5:	ec                   	in     al,dx
c001b4b6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b4ba:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b4be:	0f b6 c0             	movzx  eax,al
c001b4c1:	c1 e0 08             	shl    eax,0x8
c001b4c4:	89 c1                	mov    ecx,eax
c001b4c6:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001b4cd:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001b4d2:	89 c2                	mov    edx,eax
c001b4d4:	ec                   	in     al,dx
c001b4d5:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001b4d9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001b4dd:	0f b6 c0             	movzx  eax,al
c001b4e0:	09 c8                	or     eax,ecx
c001b4e2:	83 c4 10             	add    esp,0x10
c001b4e5:	c3                   	ret    
c001b4e6:	66 90                	xchg   ax,ax

c001b4e8 <picOpen()>:
c001b4e8:	83 ec 50             	sub    esp,0x50
c001b4eb:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001b4f2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001b4f7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b4fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b4ff:	ee                   	out    dx,al
c001b500:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001b507:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b50c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001b510:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b514:	ee                   	out    dx,al
c001b515:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001b51d:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001b525:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001b52c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b530:	89 c2                	mov    edx,eax
c001b532:	ec                   	in     al,dx
c001b533:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001b537:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001b53b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001b53f:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001b546:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b54a:	89 c2                	mov    edx,eax
c001b54c:	ec                   	in     al,dx
c001b54d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b551:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001b555:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001b559:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001b560:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001b565:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001b569:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b56d:	ee                   	out    dx,al
c001b56e:	e8 bd fe ff ff       	call   c001b430 <picIoWait()>
c001b573:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001b57a:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001b57f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001b583:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b587:	ee                   	out    dx,al
c001b588:	e8 a3 fe ff ff       	call   c001b430 <picIoWait()>
c001b58d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b591:	0f b6 c0             	movzx  eax,al
c001b594:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001b59b:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001b59f:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001b5a3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b5a7:	ee                   	out    dx,al
c001b5a8:	e8 83 fe ff ff       	call   c001b430 <picIoWait()>
c001b5ad:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001b5b1:	0f b6 c0             	movzx  eax,al
c001b5b4:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001b5bb:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b5bf:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b5c3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b5c7:	ee                   	out    dx,al
c001b5c8:	e8 63 fe ff ff       	call   c001b430 <picIoWait()>
c001b5cd:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001b5d4:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001b5d9:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001b5dd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b5e1:	ee                   	out    dx,al
c001b5e2:	e8 49 fe ff ff       	call   c001b430 <picIoWait()>
c001b5e7:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001b5ee:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001b5f3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001b5f7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b5fb:	ee                   	out    dx,al
c001b5fc:	e8 2f fe ff ff       	call   c001b430 <picIoWait()>
c001b601:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001b608:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001b60d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001b611:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b615:	ee                   	out    dx,al
c001b616:	e8 15 fe ff ff       	call   c001b430 <picIoWait()>
c001b61b:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001b622:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001b627:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001b62b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b62f:	ee                   	out    dx,al
c001b630:	e8 fb fd ff ff       	call   c001b430 <picIoWait()>
c001b635:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001b63a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001b641:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001b645:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001b649:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001b64d:	ee                   	out    dx,al
c001b64e:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001b653:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001b65a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b65e:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001b662:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001b666:	ee                   	out    dx,al
c001b667:	90                   	nop
c001b668:	83 c4 50             	add    esp,0x50
c001b66b:	c3                   	ret    

c001b66c <picEOI(int)>:
c001b66c:	83 ec 10             	sub    esp,0x10
c001b66f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001b674:	75 1e                	jne    c001b694 <picEOI(int)+0x28>
c001b676:	6a 0b                	push   0xb
c001b678:	e8 ef fd ff ff       	call   c001b46c <picGetIRQReg(int)>
c001b67d:	83 c4 04             	add    esp,0x4
c001b680:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001b685:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001b68a:	25 80 00 00 00       	and    eax,0x80
c001b68f:	74 73                	je     c001b704 <picEOI(int)+0x98>
c001b691:	8d 76 00             	lea    esi,[esi+0x0]
c001b694:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001b699:	75 31                	jne    c001b6cc <picEOI(int)+0x60>
c001b69b:	6a 0b                	push   0xb
c001b69d:	e8 ca fd ff ff       	call   c001b46c <picGetIRQReg(int)>
c001b6a2:	83 c4 04             	add    esp,0x4
c001b6a5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001b6aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6ae:	98                   	cwde   
c001b6af:	85 c0                	test   eax,eax
c001b6b1:	78 19                	js     c001b6cc <picEOI(int)+0x60>
c001b6b3:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001b6ba:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001b6bf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b6c3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b6c8:	ee                   	out    dx,al
c001b6c9:	eb 3d                	jmp    c001b708 <picEOI(int)+0x9c>
c001b6cb:	90                   	nop
c001b6cc:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001b6d1:	7e 19                	jle    c001b6ec <picEOI(int)+0x80>
c001b6d3:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001b6da:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001b6df:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b6e3:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b6e8:	ee                   	out    dx,al
c001b6e9:	8d 76 00             	lea    esi,[esi+0x0]
c001b6ec:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001b6f3:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001b6f8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b6fc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b701:	ee                   	out    dx,al
c001b702:	eb 04                	jmp    c001b708 <picEOI(int)+0x9c>
c001b704:	90                   	nop
c001b705:	8d 76 00             	lea    esi,[esi+0x0]
c001b708:	83 c4 10             	add    esp,0x10
c001b70b:	c3                   	ret    

c001b70c <RTC::open(int, int, void*)>:
c001b70c:	31 c0                	xor    eax,eax
c001b70e:	c3                   	ret    
c001b70f:	90                   	nop

c001b710 <RTC::close(int, int, void*)>:
c001b710:	31 c0                	xor    eax,eax
c001b712:	c3                   	ret    
c001b713:	90                   	nop

c001b714 <RTC::timeInSecondsUTC()>:
c001b714:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b718:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b71e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b724:	c3                   	ret    
c001b725:	90                   	nop

c001b726 <RTC::timeInDatetimeUTC()>:
c001b726:	53                   	push   ebx
c001b727:	83 ec 14             	sub    esp,0x14
c001b72a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b72e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b732:	8b 10                	mov    edx,DWORD PTR [eax]
c001b734:	50                   	push   eax
c001b735:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b738:	83 c4 0c             	add    esp,0xc
c001b73b:	52                   	push   edx
c001b73c:	50                   	push   eax
c001b73d:	53                   	push   ebx
c001b73e:	e8 07 df fe ff       	call   c000964a <KeSecondsToDatetime(unsigned long long)>
c001b743:	89 d8                	mov    eax,ebx
c001b745:	83 c4 14             	add    esp,0x14
c001b748:	5b                   	pop    ebx
c001b749:	c2 04 00             	ret    0x4

c001b74c <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001b74c:	56                   	push   esi
c001b74d:	53                   	push   ebx
c001b74e:	83 ec 14             	sub    esp,0x14
c001b751:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b755:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b757:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001b75a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b75e:	52                   	push   edx
c001b75f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b763:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b767:	50                   	push   eax
c001b768:	e8 dd de fe ff       	call   c000964a <KeSecondsToDatetime(unsigned long long)>
c001b76d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b771:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b775:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b779:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001b77d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001b781:	89 f0                	mov    eax,esi
c001b783:	83 c4 20             	add    esp,0x20
c001b786:	5b                   	pop    ebx
c001b787:	5e                   	pop    esi
c001b788:	ff e0                	jmp    eax

c001b78a <RTC::~RTC()>:
c001b78a:	83 ec 0c             	sub    esp,0xc
c001b78d:	ba 00 5f 02 c0       	mov    edx,0xc0025f00
c001b792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b796:	89 10                	mov    DWORD PTR [eax],edx
c001b798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b79c:	83 ec 0c             	sub    esp,0xc
c001b79f:	50                   	push   eax
c001b7a0:	e8 47 d9 fe ff       	call   c00090ec <Clock::~Clock()>
c001b7a5:	83 c4 10             	add    esp,0x10
c001b7a8:	90                   	nop
c001b7a9:	83 c4 0c             	add    esp,0xc
c001b7ac:	c3                   	ret    
c001b7ad:	90                   	nop

c001b7ae <RTC::~RTC()>:
c001b7ae:	83 ec 0c             	sub    esp,0xc
c001b7b1:	83 ec 0c             	sub    esp,0xc
c001b7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b7b8:	e8 cd ff ff ff       	call   c001b78a <RTC::~RTC()>
c001b7bd:	83 c4 10             	add    esp,0x10
c001b7c0:	83 ec 08             	sub    esp,0x8
c001b7c3:	68 60 01 00 00       	push   0x160
c001b7c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b7cc:	e8 ab 1a ff ff       	call   c000d27c <operator delete(void*, unsigned long)>
c001b7d1:	83 c4 10             	add    esp,0x10
c001b7d4:	83 c4 0c             	add    esp,0xc
c001b7d7:	c3                   	ret    

c001b7d8 <RTC::get_update_in_progress_flag()>:
c001b7d8:	83 ec 18             	sub    esp,0x18
c001b7db:	6a 0a                	push   0xa
c001b7dd:	e8 df d9 ff ff       	call   c00191c1 <x86ReadCMOS(unsigned char)>
c001b7e2:	83 c4 1c             	add    esp,0x1c
c001b7e5:	0f b6 c0             	movzx  eax,al
c001b7e8:	c1 e8 07             	shr    eax,0x7
c001b7eb:	c3                   	ret    

c001b7ec <RTC::completeRTCRefresh()>:
c001b7ec:	55                   	push   ebp
c001b7ed:	57                   	push   edi
c001b7ee:	56                   	push   esi
c001b7ef:	53                   	push   ebx
c001b7f0:	83 ec 3c             	sub    esp,0x3c
c001b7f3:	8b 1d 50 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb50
c001b7f9:	83 ec 0c             	sub    esp,0xc
c001b7fc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b800:	e8 d3 ff ff ff       	call   c001b7d8 <RTC::get_update_in_progress_flag()>
c001b805:	83 c4 10             	add    esp,0x10
c001b808:	84 c0                	test   al,al
c001b80a:	74 0e                	je     c001b81a <RTC::completeRTCRefresh()+0x2e>
c001b80c:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001b812:	3b 05 50 cb 02 c0    	cmp    eax,DWORD PTR ds:0xc002cb50
c001b818:	73 df                	jae    c001b7f9 <RTC::completeRTCRefresh()+0xd>
c001b81a:	83 ec 0c             	sub    esp,0xc
c001b81d:	6a 00                	push   0x0
c001b81f:	e8 9d d9 ff ff       	call   c00191c1 <x86ReadCMOS(unsigned char)>
c001b824:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001b82b:	89 c5                	mov    ebp,eax
c001b82d:	e8 8f d9 ff ff       	call   c00191c1 <x86ReadCMOS(unsigned char)>
c001b832:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b839:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001b83d:	e8 7f d9 ff ff       	call   c00191c1 <x86ReadCMOS(unsigned char)>
c001b842:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b849:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001b84d:	e8 6f d9 ff ff       	call   c00191c1 <x86ReadCMOS(unsigned char)>
c001b852:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b859:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b85d:	e8 5f d9 ff ff       	call   c00191c1 <x86ReadCMOS(unsigned char)>
c001b862:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b869:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b86d:	e8 4f d9 ff ff       	call   c00191c1 <x86ReadCMOS(unsigned char)>
c001b872:	0f b6 c0             	movzx  eax,al
c001b875:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001b879:	83 c4 10             	add    esp,0x10
c001b87c:	8b 1d 50 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb50
c001b882:	83 ec 0c             	sub    esp,0xc
c001b885:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b889:	e8 4a ff ff ff       	call   c001b7d8 <RTC::get_update_in_progress_flag()>
c001b88e:	83 c4 10             	add    esp,0x10
c001b891:	84 c0                	test   al,al
c001b893:	74 0e                	je     c001b8a3 <RTC::completeRTCRefresh()+0xb7>
c001b895:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001b89b:	3b 05 50 cb 02 c0    	cmp    eax,DWORD PTR ds:0xc002cb50
c001b8a1:	73 df                	jae    c001b882 <RTC::completeRTCRefresh()+0x96>
c001b8a3:	83 ec 0c             	sub    esp,0xc
c001b8a6:	6a 00                	push   0x0
c001b8a8:	e8 14 d9 ff ff       	call   c00191c1 <x86ReadCMOS(unsigned char)>
c001b8ad:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001b8b4:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b8b8:	e8 04 d9 ff ff       	call   c00191c1 <x86ReadCMOS(unsigned char)>
c001b8bd:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b8c4:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b8c8:	e8 f4 d8 ff ff       	call   c00191c1 <x86ReadCMOS(unsigned char)>
c001b8cd:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b8d4:	88 c3                	mov    bl,al
c001b8d6:	e8 e6 d8 ff ff       	call   c00191c1 <x86ReadCMOS(unsigned char)>
c001b8db:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b8e2:	89 c6                	mov    esi,eax
c001b8e4:	e8 d8 d8 ff ff       	call   c00191c1 <x86ReadCMOS(unsigned char)>
c001b8e9:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b8f0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b8f4:	e8 c8 d8 ff ff       	call   c00191c1 <x86ReadCMOS(unsigned char)>
c001b8f9:	89 e9                	mov    ecx,ebp
c001b8fb:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b8ff:	0f b6 f8             	movzx  edi,al
c001b902:	83 c4 10             	add    esp,0x10
c001b905:	0f b6 eb             	movzx  ebp,bl
c001b908:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001b90c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b911:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b916:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b91a:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b91e:	0f 94 c0             	sete   al
c001b921:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001b925:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c001b929:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001b92e:	0f 94 c2             	sete   dl
c001b931:	21 d0                	and    eax,edx
c001b933:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001b937:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001b93b:	0f 94 c2             	sete   dl
c001b93e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b942:	21 c2                	and    edx,eax
c001b944:	89 f0                	mov    eax,esi
c001b946:	0f b6 c0             	movzx  eax,al
c001b949:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b94d:	89 f0                	mov    eax,esi
c001b94f:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001b953:	0f 94 c0             	sete   al
c001b956:	21 d0                	and    eax,edx
c001b958:	31 d2                	xor    edx,edx
c001b95a:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001b95e:	0f 94 c2             	sete   dl
c001b961:	85 c2                	test   edx,eax
c001b963:	75 27                	jne    c001b98c <RTC::completeRTCRefresh()+0x1a0>
c001b965:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b969:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001b96d:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001b971:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001b975:	89 f0                	mov    eax,esi
c001b977:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c001b97b:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001b97f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b983:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b987:	e9 f0 fe ff ff       	jmp    c001b87c <RTC::completeRTCRefresh()+0x90>
c001b98c:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c001b990:	75 d3                	jne    c001b965 <RTC::completeRTCRefresh()+0x179>
c001b992:	83 ec 0c             	sub    esp,0xc
c001b995:	6a 0b                	push   0xb
c001b997:	e8 25 d8 ff ff       	call   c00191c1 <x86ReadCMOS(unsigned char)>
c001b99c:	83 c4 10             	add    esp,0x10
c001b99f:	a8 04                	test   al,0x4
c001b9a1:	75 7a                	jne    c001ba1d <RTC::completeRTCRefresh()+0x231>
c001b9a3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b9a7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b9ab:	83 e1 0f             	and    ecx,0xf
c001b9ae:	c1 ea 04             	shr    edx,0x4
c001b9b1:	83 e6 0f             	and    esi,0xf
c001b9b4:	6b d2 0a             	imul   edx,edx,0xa
c001b9b7:	c1 ef 04             	shr    edi,0x4
c001b9ba:	01 d1                	add    ecx,edx
c001b9bc:	6b ff 0a             	imul   edi,edi,0xa
c001b9bf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001b9c3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b9c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b9cb:	c1 ea 04             	shr    edx,0x4
c001b9ce:	83 e1 0f             	and    ecx,0xf
c001b9d1:	6b d2 0a             	imul   edx,edx,0xa
c001b9d4:	01 d1                	add    ecx,edx
c001b9d6:	89 ea                	mov    edx,ebp
c001b9d8:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001b9dc:	c1 ea 04             	shr    edx,0x4
c001b9df:	89 d9                	mov    ecx,ebx
c001b9e1:	83 e2 07             	and    edx,0x7
c001b9e4:	83 e1 0f             	and    ecx,0xf
c001b9e7:	6b d2 0a             	imul   edx,edx,0xa
c001b9ea:	83 e3 80             	and    ebx,0xffffff80
c001b9ed:	01 d1                	add    ecx,edx
c001b9ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b9f3:	09 cb                	or     ebx,ecx
c001b9f5:	c1 ea 04             	shr    edx,0x4
c001b9f8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b9fc:	6b d2 0a             	imul   edx,edx,0xa
c001b9ff:	83 e1 0f             	and    ecx,0xf
c001ba02:	01 d6                	add    esi,edx
c001ba04:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ba08:	c1 ea 04             	shr    edx,0x4
c001ba0b:	6b d2 0a             	imul   edx,edx,0xa
c001ba0e:	01 d1                	add    ecx,edx
c001ba10:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ba14:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001ba18:	83 e2 0f             	and    edx,0xf
c001ba1b:	01 d7                	add    edi,edx
c001ba1d:	a8 02                	test   al,0x2
c001ba1f:	75 15                	jne    c001ba36 <RTC::completeRTCRefresh()+0x24a>
c001ba21:	f6 c3 80             	test   bl,0x80
c001ba24:	74 10                	je     c001ba36 <RTC::completeRTCRefresh()+0x24a>
c001ba26:	83 e3 7f             	and    ebx,0x7f
c001ba29:	b9 18 00 00 00       	mov    ecx,0x18
c001ba2e:	8d 43 0c             	lea    eax,[ebx+0xc]
c001ba31:	99                   	cdq    
c001ba32:	f7 f9                	idiv   ecx
c001ba34:	88 d3                	mov    bl,dl
c001ba36:	8d af 6c 07 00 00    	lea    ebp,[edi+0x76c]
c001ba3c:	81 fd b1 07 00 00    	cmp    ebp,0x7b1
c001ba42:	77 06                	ja     c001ba4a <RTC::completeRTCRefresh()+0x25e>
c001ba44:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001ba4a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ba4f:	31 c9                	xor    ecx,ecx
c001ba51:	c1 e0 10             	shl    eax,0x10
c001ba54:	89 cf                	mov    edi,ecx
c001ba56:	c1 e5 10             	shl    ebp,0x10
c001ba59:	31 d2                	xor    edx,edx
c001ba5b:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001ba61:	09 c7                	or     edi,eax
c001ba63:	89 f0                	mov    eax,esi
c001ba65:	89 f9                	mov    ecx,edi
c001ba67:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ba6b:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001ba6f:	88 c2                	mov    dl,al
c001ba71:	88 d9                	mov    cl,bl
c001ba73:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c001ba77:	0f b7 c2             	movzx  eax,dx
c001ba7a:	09 e8                	or     eax,ebp
c001ba7c:	89 c2                	mov    edx,eax
c001ba7e:	50                   	push   eax
c001ba7f:	50                   	push   eax
c001ba80:	51                   	push   ecx
c001ba81:	52                   	push   edx
c001ba82:	e8 b5 d7 fe ff       	call   c000923c <KeDatetimeToSeconds(datetime_t)>
c001ba87:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001ba8b:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001ba91:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001ba97:	83 c4 4c             	add    esp,0x4c
c001ba9a:	5b                   	pop    ebx
c001ba9b:	5e                   	pop    esi
c001ba9c:	5f                   	pop    edi
c001ba9d:	5d                   	pop    ebp
c001ba9e:	c3                   	ret    
c001ba9f:	90                   	nop

c001baa0 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001baa0:	55                   	push   ebp
c001baa1:	57                   	push   edi
c001baa2:	56                   	push   esi
c001baa3:	53                   	push   ebx
c001baa4:	83 ec 34             	sub    esp,0x34
c001baa7:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001baab:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001baaf:	6a 00                	push   0x0
c001bab1:	89 fb                	mov    ebx,edi
c001bab3:	6a 00                	push   0x0
c001bab5:	e8 5b d7 ff ff       	call   c0019215 <x86WriteCMOS(unsigned char, unsigned char)>
c001baba:	5d                   	pop    ebp
c001babb:	58                   	pop    eax
c001babc:	6a 00                	push   0x0
c001babe:	6a 02                	push   0x2
c001bac0:	e8 50 d7 ff ff       	call   c0019215 <x86WriteCMOS(unsigned char, unsigned char)>
c001bac5:	31 d2                	xor    edx,edx
c001bac7:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001bace:	89 f9                	mov    ecx,edi
c001bad0:	89 f8                	mov    eax,edi
c001bad2:	c1 e9 10             	shr    ecx,0x10
c001bad5:	0f b6 c4             	movzx  eax,ah
c001bad8:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001badc:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001bae0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bae4:	b9 64 00 00 00       	mov    ecx,0x64
c001bae9:	89 f0                	mov    eax,esi
c001baeb:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001baef:	89 f0                	mov    eax,esi
c001baf1:	0f b6 c4             	movzx  eax,ah
c001baf4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001baf8:	89 f0                	mov    eax,esi
c001bafa:	c1 e8 10             	shr    eax,0x10
c001bafd:	f7 f1                	div    ecx
c001baff:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001bb03:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001bb07:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001bb0b:	e8 b1 d6 ff ff       	call   c00191c1 <x86ReadCMOS(unsigned char)>
c001bb10:	83 c4 10             	add    esp,0x10
c001bb13:	89 c5                	mov    ebp,eax
c001bb15:	a8 04                	test   al,0x4
c001bb17:	75 6e                	jne    c001bb87 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001bb19:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bb1d:	31 d2                	xor    edx,edx
c001bb1f:	0f b6 c1             	movzx  eax,cl
c001bb22:	b9 0a 00 00 00       	mov    ecx,0xa
c001bb27:	f7 f1                	div    ecx
c001bb29:	c1 e0 04             	shl    eax,0x4
c001bb2c:	09 d0                	or     eax,edx
c001bb2e:	31 d2                	xor    edx,edx
c001bb30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb34:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001bb39:	f7 f1                	div    ecx
c001bb3b:	c1 e0 04             	shl    eax,0x4
c001bb3e:	09 d0                	or     eax,edx
c001bb40:	31 d2                	xor    edx,edx
c001bb42:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bb46:	0f b6 c3             	movzx  eax,bl
c001bb49:	f7 f1                	div    ecx
c001bb4b:	c1 e0 04             	shl    eax,0x4
c001bb4e:	09 d0                	or     eax,edx
c001bb50:	31 d2                	xor    edx,edx
c001bb52:	89 c3                	mov    ebx,eax
c001bb54:	89 f0                	mov    eax,esi
c001bb56:	0f b6 c0             	movzx  eax,al
c001bb59:	f7 f1                	div    ecx
c001bb5b:	c1 e0 04             	shl    eax,0x4
c001bb5e:	09 d0                	or     eax,edx
c001bb60:	31 d2                	xor    edx,edx
c001bb62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bb66:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bb6b:	f7 f1                	div    ecx
c001bb6d:	c1 e0 04             	shl    eax,0x4
c001bb70:	09 d0                	or     eax,edx
c001bb72:	31 d2                	xor    edx,edx
c001bb74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bb78:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bb7c:	f7 f1                	div    ecx
c001bb7e:	c1 e0 04             	shl    eax,0x4
c001bb81:	09 d0                	or     eax,edx
c001bb83:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bb87:	83 e5 02             	and    ebp,0x2
c001bb8a:	75 1e                	jne    c001bbaa <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001bb8c:	0f b6 c3             	movzx  eax,bl
c001bb8f:	83 f8 0b             	cmp    eax,0xb
c001bb92:	76 10                	jbe    c001bba4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001bb94:	8d 53 f4             	lea    edx,[ebx-0xc]
c001bb97:	88 d3                	mov    bl,dl
c001bb99:	84 d2                	test   dl,dl
c001bb9b:	75 02                	jne    c001bb9f <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001bb9d:	b3 0c                	mov    bl,0xc
c001bb9f:	83 cb 80             	or     ebx,0xffffff80
c001bba2:	eb 06                	jmp    c001bbaa <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001bba4:	85 c0                	test   eax,eax
c001bba6:	75 02                	jne    c001bbaa <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001bba8:	b3 0c                	mov    bl,0xc
c001bbaa:	0f b6 db             	movzx  ebx,bl
c001bbad:	50                   	push   eax
c001bbae:	50                   	push   eax
c001bbaf:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001bbb4:	52                   	push   edx
c001bbb5:	6a 00                	push   0x0
c001bbb7:	e8 59 d6 ff ff       	call   c0019215 <x86WriteCMOS(unsigned char, unsigned char)>
c001bbbc:	5a                   	pop    edx
c001bbbd:	59                   	pop    ecx
c001bbbe:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bbc3:	50                   	push   eax
c001bbc4:	6a 02                	push   0x2
c001bbc6:	e8 4a d6 ff ff       	call   c0019215 <x86WriteCMOS(unsigned char, unsigned char)>
c001bbcb:	5e                   	pop    esi
c001bbcc:	5f                   	pop    edi
c001bbcd:	53                   	push   ebx
c001bbce:	6a 04                	push   0x4
c001bbd0:	e8 40 d6 ff ff       	call   c0019215 <x86WriteCMOS(unsigned char, unsigned char)>
c001bbd5:	5d                   	pop    ebp
c001bbd6:	58                   	pop    eax
c001bbd7:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001bbdc:	52                   	push   edx
c001bbdd:	6a 07                	push   0x7
c001bbdf:	e8 31 d6 ff ff       	call   c0019215 <x86WriteCMOS(unsigned char, unsigned char)>
c001bbe4:	58                   	pop    eax
c001bbe5:	5a                   	pop    edx
c001bbe6:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001bbeb:	50                   	push   eax
c001bbec:	6a 08                	push   0x8
c001bbee:	e8 22 d6 ff ff       	call   c0019215 <x86WriteCMOS(unsigned char, unsigned char)>
c001bbf3:	59                   	pop    ecx
c001bbf4:	5b                   	pop    ebx
c001bbf5:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001bbfa:	55                   	push   ebp
c001bbfb:	6a 09                	push   0x9
c001bbfd:	e8 13 d6 ff ff       	call   c0019215 <x86WriteCMOS(unsigned char, unsigned char)>
c001bc02:	5e                   	pop    esi
c001bc03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001bc07:	e8 e0 fb ff ff       	call   c001b7ec <RTC::completeRTCRefresh()>
c001bc0c:	83 c4 3c             	add    esp,0x3c
c001bc0f:	b0 01                	mov    al,0x1
c001bc11:	5b                   	pop    ebx
c001bc12:	5e                   	pop    esi
c001bc13:	5f                   	pop    edi
c001bc14:	5d                   	pop    ebp
c001bc15:	c3                   	ret    

c001bc16 <rtcIRQHandler(regs*, void*)>:
c001bc16:	53                   	push   ebx
c001bc17:	83 ec 14             	sub    esp,0x14
c001bc1a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bc1e:	6a 0c                	push   0xc
c001bc20:	e8 9c d5 ff ff       	call   c00191c1 <x86ReadCMOS(unsigned char)>
c001bc25:	83 c4 10             	add    esp,0x10
c001bc28:	a8 80                	test   al,0x80
c001bc2a:	74 24                	je     c001bc50 <rtcIRQHandler(regs*, void*)+0x3a>
c001bc2c:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001bc33:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001bc3a:	66 ff 05 a0 fb 02 c0 	inc    WORD PTR ds:0xc002fba0
c001bc41:	75 0d                	jne    c001bc50 <rtcIRQHandler(regs*, void*)+0x3a>
c001bc43:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001bc47:	83 c4 08             	add    esp,0x8
c001bc4a:	5b                   	pop    ebx
c001bc4b:	e9 9c fb ff ff       	jmp    c001b7ec <RTC::completeRTCRefresh()>
c001bc50:	83 c4 08             	add    esp,0x8
c001bc53:	5b                   	pop    ebx
c001bc54:	c3                   	ret    
c001bc55:	90                   	nop

c001bc56 <RTC::RTC()>:
c001bc56:	83 ec 1c             	sub    esp,0x1c
c001bc59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc5d:	83 ec 08             	sub    esp,0x8
c001bc60:	68 e3 5e 02 c0       	push   0xc0025ee3
c001bc65:	50                   	push   eax
c001bc66:	e8 4b d4 fe ff       	call   c00090b6 <Clock::Clock(char const*)>
c001bc6b:	83 c4 10             	add    esp,0x10
c001bc6e:	ba 00 5f 02 c0       	mov    edx,0xc0025f00
c001bc73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc77:	89 10                	mov    DWORD PTR [eax],edx
c001bc79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc7d:	83 ec 0c             	sub    esp,0xc
c001bc80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc84:	6a 01                	push   0x1
c001bc86:	68 16 bc 01 c0       	push   0xc001bc16
c001bc8b:	6a 08                	push   0x8
c001bc8d:	50                   	push   eax
c001bc8e:	e8 6d dd fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bc93:	83 c4 20             	add    esp,0x20
c001bc96:	89 c2                	mov    edx,eax
c001bc98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc9c:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001bca2:	fa                   	cli    
c001bca3:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c001bca8:	83 c0 01             	add    eax,0x1
c001bcab:	a3 70 da 02 c0       	mov    ds:0xc002da70,eax
c001bcb0:	83 ec 0c             	sub    esp,0xc
c001bcb3:	6a 0b                	push   0xb
c001bcb5:	e8 07 d5 ff ff       	call   c00191c1 <x86ReadCMOS(unsigned char)>
c001bcba:	83 c4 10             	add    esp,0x10
c001bcbd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001bcc1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bcc5:	83 c8 10             	or     eax,0x10
c001bcc8:	0f b6 c0             	movzx  eax,al
c001bccb:	83 ec 08             	sub    esp,0x8
c001bcce:	50                   	push   eax
c001bccf:	6a 0b                	push   0xb
c001bcd1:	e8 3f d5 ff ff       	call   c0019215 <x86WriteCMOS(unsigned char, unsigned char)>
c001bcd6:	83 c4 10             	add    esp,0x10
c001bcd9:	83 ec 0c             	sub    esp,0xc
c001bcdc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bce0:	e8 07 fb ff ff       	call   c001b7ec <RTC::completeRTCRefresh()>
c001bce5:	83 c4 10             	add    esp,0x10
c001bce8:	f0 83 2d 70 da 02 c0 01 	lock sub DWORD PTR ds:0xc002da70,0x1
c001bcf0:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c001bcf5:	85 c0                	test   eax,eax
c001bcf7:	75 01                	jne    c001bcfa <RTC::RTC()+0xa4>
c001bcf9:	fb                   	sti    
c001bcfa:	90                   	nop
c001bcfb:	83 c4 1c             	add    esp,0x1c
c001bcfe:	c3                   	ret    
c001bcff:	90                   	nop

c001bd00 <HalConsoleScroll(int, int)>:
c001bd00:	83 ec 10             	sub    esp,0x10
c001bd03:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001bd0b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001bd13:	90                   	nop
c001bd14:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001bd19:	0f 8f e1 00 00 00    	jg     c001be00 <HalConsoleScroll(int, int)+0x100>
c001bd1f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bd27:	90                   	nop
c001bd28:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001bd30:	0f 8f be 00 00 00    	jg     c001bdf4 <HalConsoleScroll(int, int)+0xf4>
c001bd36:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bd3a:	89 d0                	mov    eax,edx
c001bd3c:	c1 e0 02             	shl    eax,0x2
c001bd3f:	01 d0                	add    eax,edx
c001bd41:	c1 e0 05             	shl    eax,0x5
c001bd44:	89 c2                	mov    edx,eax
c001bd46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bd4a:	01 d0                	add    eax,edx
c001bd4c:	89 c2                	mov    edx,eax
c001bd4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd52:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001bd55:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bd59:	89 d0                	mov    eax,edx
c001bd5b:	c1 e0 02             	shl    eax,0x2
c001bd5e:	01 d0                	add    eax,edx
c001bd60:	c1 e0 05             	shl    eax,0x5
c001bd63:	89 c2                	mov    edx,eax
c001bd65:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bd69:	01 d0                	add    eax,edx
c001bd6b:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001bd71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd75:	01 c2                	add    edx,eax
c001bd77:	8a 01                	mov    al,BYTE PTR [ecx]
c001bd79:	88 02                	mov    BYTE PTR [edx],al
c001bd7b:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001bd80:	75 66                	jne    c001bde8 <HalConsoleScroll(int, int)+0xe8>
c001bd82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bd86:	83 e0 01             	and    eax,0x1
c001bd89:	74 39                	je     c001bdc4 <HalConsoleScroll(int, int)+0xc4>
c001bd8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bd8f:	83 e0 0f             	and    eax,0xf
c001bd92:	88 c2                	mov    dl,al
c001bd94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd98:	c1 e0 04             	shl    eax,0x4
c001bd9b:	09 d0                	or     eax,edx
c001bd9d:	88 c1                	mov    cl,al
c001bd9f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bda3:	89 d0                	mov    eax,edx
c001bda5:	c1 e0 02             	shl    eax,0x2
c001bda8:	01 d0                	add    eax,edx
c001bdaa:	c1 e0 05             	shl    eax,0x5
c001bdad:	89 c2                	mov    edx,eax
c001bdaf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bdb3:	01 d0                	add    eax,edx
c001bdb5:	89 c2                	mov    edx,eax
c001bdb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdbb:	01 d0                	add    eax,edx
c001bdbd:	88 ca                	mov    dl,cl
c001bdbf:	88 10                	mov    BYTE PTR [eax],dl
c001bdc1:	eb 25                	jmp    c001bde8 <HalConsoleScroll(int, int)+0xe8>
c001bdc3:	90                   	nop
c001bdc4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bdc8:	89 d0                	mov    eax,edx
c001bdca:	c1 e0 02             	shl    eax,0x2
c001bdcd:	01 d0                	add    eax,edx
c001bdcf:	c1 e0 05             	shl    eax,0x5
c001bdd2:	89 c2                	mov    edx,eax
c001bdd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bdd8:	01 d0                	add    eax,edx
c001bdda:	89 c2                	mov    edx,eax
c001bddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bde0:	01 d0                	add    eax,edx
c001bde2:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001bde5:	8d 76 00             	lea    esi,[esi+0x0]
c001bde8:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001bded:	e9 36 ff ff ff       	jmp    c001bd28 <HalConsoleScroll(int, int)+0x28>
c001bdf2:	66 90                	xchg   ax,ax
c001bdf4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001bdf9:	e9 16 ff ff ff       	jmp    c001bd14 <HalConsoleScroll(int, int)+0x14>
c001bdfe:	66 90                	xchg   ax,ax
c001be00:	90                   	nop
c001be01:	83 c4 10             	add    esp,0x10
c001be04:	c3                   	ret    
c001be05:	8d 76 00             	lea    esi,[esi+0x0]

c001be08 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001be08:	83 ec 14             	sub    esp,0x14
c001be0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001be0f:	88 04 24             	mov    BYTE PTR [esp],al
c001be12:	8a 04 24             	mov    al,BYTE PTR [esp]
c001be15:	0f b6 c0             	movzx  eax,al
c001be18:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001be1c:	89 d1                	mov    ecx,edx
c001be1e:	83 e1 0f             	and    ecx,0xf
c001be21:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001be25:	c1 e2 04             	shl    edx,0x4
c001be28:	0f b6 d2             	movzx  edx,dl
c001be2b:	09 ca                	or     edx,ecx
c001be2d:	c1 e2 08             	shl    edx,0x8
c001be30:	09 d0                	or     eax,edx
c001be32:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001be37:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001be3f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001be43:	89 d0                	mov    eax,edx
c001be45:	c1 e0 02             	shl    eax,0x2
c001be48:	01 d0                	add    eax,edx
c001be4a:	c1 e0 04             	shl    eax,0x4
c001be4d:	89 c2                	mov    edx,eax
c001be4f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001be53:	01 d0                	add    eax,edx
c001be55:	01 c0                	add    eax,eax
c001be57:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001be5b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001be5f:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001be64:	66 89 02             	mov    WORD PTR [edx],ax
c001be67:	90                   	nop
c001be68:	83 c4 14             	add    esp,0x14
c001be6b:	c3                   	ret    

c001be6c <HalConsoleCursorUpdate(int, int)>:
c001be6c:	83 ec 20             	sub    esp,0x20
c001be6f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001be73:	89 c2                	mov    edx,eax
c001be75:	c1 e2 02             	shl    edx,0x2
c001be78:	01 d0                	add    eax,edx
c001be7a:	c1 e0 04             	shl    eax,0x4
c001be7d:	89 c2                	mov    edx,eax
c001be7f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001be83:	01 d0                	add    eax,edx
c001be85:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001be8a:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001be91:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001be96:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001be9a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001be9e:	ee                   	out    dx,al
c001be9f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001bea4:	0f b6 c0             	movzx  eax,al
c001bea7:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001beae:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001beb2:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001beb6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001beba:	ee                   	out    dx,al
c001bebb:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001bec2:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001bec7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001becb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001becf:	ee                   	out    dx,al
c001bed0:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001bed5:	c1 e8 08             	shr    eax,0x8
c001bed8:	0f b6 c0             	movzx  eax,al
c001bedb:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001bee2:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001bee6:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001beea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001beee:	ee                   	out    dx,al
c001beef:	90                   	nop
c001bef0:	83 c4 20             	add    esp,0x20
c001bef3:	c3                   	ret    

c001bef4 <FAT::getName()>:
c001bef4:	b8 34 5f 02 c0       	mov    eax,0xc0025f34
c001bef9:	c3                   	ret    
c001befa:	66 90                	xchg   ax,ax

c001befc <FAT::tell(void*, unsigned long long*)>:
c001befc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001bf01:	75 09                	jne    c001bf0c <FAT::tell(void*, unsigned long long*)+0x10>
c001bf03:	b8 04 00 00 00       	mov    eax,0x4
c001bf08:	c3                   	ret    
c001bf09:	8d 76 00             	lea    esi,[esi+0x0]
c001bf0c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bf11:	75 09                	jne    c001bf1c <FAT::tell(void*, unsigned long long*)+0x20>
c001bf13:	b8 04 00 00 00       	mov    eax,0x4
c001bf18:	c3                   	ret    
c001bf19:	8d 76 00             	lea    esi,[esi+0x0]
c001bf1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bf20:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bf23:	ba 00 00 00 00       	mov    edx,0x0
c001bf28:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bf2c:	89 01                	mov    DWORD PTR [ecx],eax
c001bf2e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bf31:	b8 00 00 00 00       	mov    eax,0x0
c001bf36:	c3                   	ret    
c001bf37:	90                   	nop

c001bf38 <FAT::stat(void*, unsigned long long*)>:
c001bf38:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001bf3d:	75 09                	jne    c001bf48 <FAT::stat(void*, unsigned long long*)+0x10>
c001bf3f:	b8 04 00 00 00       	mov    eax,0x4
c001bf44:	c3                   	ret    
c001bf45:	8d 76 00             	lea    esi,[esi+0x0]
c001bf48:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bf4d:	75 09                	jne    c001bf58 <FAT::stat(void*, unsigned long long*)+0x20>
c001bf4f:	b8 04 00 00 00       	mov    eax,0x4
c001bf54:	c3                   	ret    
c001bf55:	8d 76 00             	lea    esi,[esi+0x0]
c001bf58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bf5c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001bf5f:	ba 00 00 00 00       	mov    edx,0x0
c001bf64:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bf68:	89 01                	mov    DWORD PTR [ecx],eax
c001bf6a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bf6d:	b8 00 00 00 00       	mov    eax,0x0
c001bf72:	c3                   	ret    
c001bf73:	90                   	nop

c001bf74 <FAT::~FAT()>:
c001bf74:	83 ec 0c             	sub    esp,0xc
c001bf77:	ba 80 5f 02 c0       	mov    edx,0xc0025f80
c001bf7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf80:	89 10                	mov    DWORD PTR [eax],edx
c001bf82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf86:	83 ec 0c             	sub    esp,0xc
c001bf89:	50                   	push   eax
c001bf8a:	e8 5d be fe ff       	call   c0007dec <Filesystem::~Filesystem()>
c001bf8f:	83 c4 10             	add    esp,0x10
c001bf92:	90                   	nop
c001bf93:	83 c4 0c             	add    esp,0xc
c001bf96:	c3                   	ret    
c001bf97:	90                   	nop

c001bf98 <FAT::~FAT()>:
c001bf98:	83 ec 0c             	sub    esp,0xc
c001bf9b:	83 ec 0c             	sub    esp,0xc
c001bf9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bfa2:	e8 cd ff ff ff       	call   c001bf74 <FAT::~FAT()>
c001bfa7:	83 c4 10             	add    esp,0x10
c001bfaa:	83 ec 08             	sub    esp,0x8
c001bfad:	6a 08                	push   0x8
c001bfaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bfb3:	e8 c4 12 ff ff       	call   c000d27c <operator delete(void*, unsigned long)>
c001bfb8:	83 c4 10             	add    esp,0x10
c001bfbb:	83 c4 0c             	add    esp,0xc
c001bfbe:	c3                   	ret    
c001bfbf:	90                   	nop

c001bfc0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001bfc0:	83 ec 1c             	sub    esp,0x1c
c001bfc3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001bfca:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001bfcf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bfd3:	8b 04 85 e0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0420]
c001bfda:	83 f8 ff             	cmp    eax,0xffffffff
c001bfdd:	75 35                	jne    c001c014 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001bfdf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001bfe3:	88 c2                	mov    dl,al
c001bfe5:	a1 c0 fb 02 c0       	mov    eax,ds:0xc002fbc0
c001bfea:	01 d0                	add    eax,edx
c001bfec:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001bff0:	8b 15 c0 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fbc0
c001bff6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bffa:	89 14 85 e0 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0420],edx
c001c001:	a1 c0 fb 02 c0       	mov    eax,ds:0xc002fbc0
c001c006:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c00a:	89 14 85 60 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd03a0],edx
c001c011:	eb 19                	jmp    c001c02c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001c013:	90                   	nop
c001c014:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001c018:	88 c2                	mov    dl,al
c001c01a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c01e:	8b 04 85 e0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0420]
c001c025:	01 d0                	add    eax,edx
c001c027:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001c02b:	90                   	nop
c001c02c:	83 ec 04             	sub    esp,0x4
c001c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c033:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c037:	8d 44 24 15          	lea    eax,[esp+0x15]
c001c03b:	50                   	push   eax
c001c03c:	e8 77 91 fe ff       	call   c00051b8 <f_getlabel>
c001c041:	83 c4 10             	add    esp,0x10
c001c044:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c048:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c04d:	75 09                	jne    c001c058 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001c04f:	b8 00 00 00 00       	mov    eax,0x0
c001c054:	eb 0a                	jmp    c001c060 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001c056:	66 90                	xchg   ax,ax
c001c058:	b8 01 00 00 00       	mov    eax,0x1
c001c05d:	8d 76 00             	lea    esi,[esi+0x0]
c001c060:	83 c4 1c             	add    esp,0x1c
c001c063:	c3                   	ret    

c001c064 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001c064:	57                   	push   edi
c001c065:	83 ec 58             	sub    esp,0x58
c001c068:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001c070:	8d 54 24 10          	lea    edx,[esp+0x10]
c001c074:	b8 00 00 00 00       	mov    eax,0x0
c001c079:	b9 0f 00 00 00       	mov    ecx,0xf
c001c07e:	fc                   	cld    
c001c07f:	89 d7                	mov    edi,edx
c001c081:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c083:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001c087:	8b 04 85 e0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0420]
c001c08e:	83 f8 ff             	cmp    eax,0xffffffff
c001c091:	75 35                	jne    c001c0c8 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001c093:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c097:	88 c2                	mov    dl,al
c001c099:	a1 c0 fb 02 c0       	mov    eax,ds:0xc002fbc0
c001c09e:	01 d0                	add    eax,edx
c001c0a0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c0a4:	8b 15 c0 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fbc0
c001c0aa:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001c0ae:	89 14 85 e0 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0420],edx
c001c0b5:	a1 c0 fb 02 c0       	mov    eax,ds:0xc002fbc0
c001c0ba:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001c0be:	89 14 85 60 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd03a0],edx
c001c0c5:	eb 19                	jmp    c001c0e0 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001c0c7:	90                   	nop
c001c0c8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c0cc:	88 c2                	mov    dl,al
c001c0ce:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001c0d2:	8b 04 85 e0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0420]
c001c0d9:	01 d0                	add    eax,edx
c001c0db:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c0df:	90                   	nop
c001c0e0:	83 ec 08             	sub    esp,0x8
c001c0e3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001c0e7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c0eb:	50                   	push   eax
c001c0ec:	e8 4f 47 fe ff       	call   c0000840 <strcat>
c001c0f1:	83 c4 10             	add    esp,0x10
c001c0f4:	83 ec 0c             	sub    esp,0xc
c001c0f7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c0fb:	50                   	push   eax
c001c0fc:	e8 08 92 fe ff       	call   c0005309 <f_setlabel>
c001c101:	83 c4 10             	add    esp,0x10
c001c104:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c108:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001c10d:	75 09                	jne    c001c118 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001c10f:	b8 00 00 00 00       	mov    eax,0x0
c001c114:	eb 0a                	jmp    c001c120 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001c116:	66 90                	xchg   ax,ax
c001c118:	b8 01 00 00 00       	mov    eax,0x1
c001c11d:	8d 76 00             	lea    esi,[esi+0x0]
c001c120:	83 c4 58             	add    esp,0x58
c001c123:	5f                   	pop    edi
c001c124:	c3                   	ret    
c001c125:	90                   	nop
c001c126:	66 90                	xchg   ax,ax

c001c128 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001c128:	83 ec 2c             	sub    esp,0x2c
c001c12b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001c133:	83 ec 08             	sub    esp,0x8
c001c136:	68 58 5f 02 c0       	push   0xc0025f58
c001c13b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c13f:	e8 0c 46 fe ff       	call   c0000750 <strcmp>
c001c144:	83 c4 10             	add    esp,0x10
c001c147:	85 c0                	test   eax,eax
c001c149:	0f 94 c0             	sete   al
c001c14c:	0f b6 c0             	movzx  eax,al
c001c14f:	85 c0                	test   eax,eax
c001c151:	74 0d                	je     c001c160 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001c153:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001c15b:	e9 c0 00 00 00       	jmp    c001c220 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001c160:	83 ec 08             	sub    esp,0x8
c001c163:	68 4a 5f 02 c0       	push   0xc0025f4a
c001c168:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c16c:	e8 df 45 fe ff       	call   c0000750 <strcmp>
c001c171:	83 c4 10             	add    esp,0x10
c001c174:	85 c0                	test   eax,eax
c001c176:	0f 94 c0             	sete   al
c001c179:	0f b6 c0             	movzx  eax,al
c001c17c:	85 c0                	test   eax,eax
c001c17e:	74 10                	je     c001c190 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001c180:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001c188:	e9 93 00 00 00       	jmp    c001c220 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001c18d:	8d 76 00             	lea    esi,[esi+0x0]
c001c190:	83 ec 08             	sub    esp,0x8
c001c193:	68 50 5f 02 c0       	push   0xc0025f50
c001c198:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c19c:	e8 af 45 fe ff       	call   c0000750 <strcmp>
c001c1a1:	83 c4 10             	add    esp,0x10
c001c1a4:	85 c0                	test   eax,eax
c001c1a6:	0f 94 c0             	sete   al
c001c1a9:	0f b6 c0             	movzx  eax,al
c001c1ac:	85 c0                	test   eax,eax
c001c1ae:	74 0c                	je     c001c1bc <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001c1b0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001c1b8:	eb 66                	jmp    c001c220 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001c1ba:	66 90                	xchg   ax,ax
c001c1bc:	83 ec 08             	sub    esp,0x8
c001c1bf:	68 5c 2f 02 c0       	push   0xc0022f5c
c001c1c4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c1c8:	e8 83 45 fe ff       	call   c0000750 <strcmp>
c001c1cd:	83 c4 10             	add    esp,0x10
c001c1d0:	85 c0                	test   eax,eax
c001c1d2:	0f 94 c0             	sete   al
c001c1d5:	0f b6 c0             	movzx  eax,al
c001c1d8:	85 c0                	test   eax,eax
c001c1da:	74 0c                	je     c001c1e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001c1dc:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001c1e4:	eb 3a                	jmp    c001c220 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001c1e6:	66 90                	xchg   ax,ax
c001c1e8:	83 ec 08             	sub    esp,0x8
c001c1eb:	68 56 5f 02 c0       	push   0xc0025f56
c001c1f0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c1f4:	e8 57 45 fe ff       	call   c0000750 <strcmp>
c001c1f9:	83 c4 10             	add    esp,0x10
c001c1fc:	85 c0                	test   eax,eax
c001c1fe:	0f 94 c0             	sete   al
c001c201:	0f b6 c0             	movzx  eax,al
c001c204:	85 c0                	test   eax,eax
c001c206:	74 0c                	je     c001c214 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001c208:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001c210:	eb 0e                	jmp    c001c220 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001c212:	66 90                	xchg   ax,ax
c001c214:	b8 08 00 00 00       	mov    eax,0x8
c001c219:	e9 ea 00 00 00       	jmp    c001c308 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001c21e:	66 90                	xchg   ax,ax
c001c220:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001c227:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001c22c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c230:	8b 04 85 e0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0420]
c001c237:	83 f8 ff             	cmp    eax,0xffffffff
c001c23a:	75 34                	jne    c001c270 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001c23c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001c240:	88 c2                	mov    dl,al
c001c242:	a1 c0 fb 02 c0       	mov    eax,ds:0xc002fbc0
c001c247:	01 d0                	add    eax,edx
c001c249:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001c24d:	8b 15 c0 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fbc0
c001c253:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c257:	89 14 85 e0 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0420],edx
c001c25e:	a1 c0 fb 02 c0       	mov    eax,ds:0xc002fbc0
c001c263:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c267:	89 14 85 60 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd03a0],edx
c001c26e:	eb 18                	jmp    c001c288 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001c270:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001c274:	88 c2                	mov    dl,al
c001c276:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c27a:	8b 04 85 e0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0420]
c001c281:	01 d0                	add    eax,edx
c001c283:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001c287:	90                   	nop
c001c288:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c28c:	88 04 24             	mov    BYTE PTR [esp],al
c001c28f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001c293:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c297:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c29f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001c2a4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c2ac:	83 ec 0c             	sub    esp,0xc
c001c2af:	68 00 20 00 00       	push   0x2000
c001c2b4:	e8 aa 34 ff ff       	call   c000f763 <malloc>
c001c2b9:	83 c4 10             	add    esp,0x10
c001c2bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c2c0:	68 00 20 00 00       	push   0x2000
c001c2c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2c9:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c2cd:	50                   	push   eax
c001c2ce:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001c2d2:	50                   	push   eax
c001c2d3:	e8 2e 93 fe ff       	call   c0005606 <f_mkfs>
c001c2d8:	83 c4 10             	add    esp,0x10
c001c2db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c2df:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c2e4:	75 0a                	jne    c001c2f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001c2e6:	b8 00 00 00 00       	mov    eax,0x0
c001c2eb:	eb 1b                	jmp    c001c308 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001c2ed:	8d 76 00             	lea    esi,[esi+0x0]
c001c2f0:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001c2f5:	75 09                	jne    c001c300 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001c2f7:	b8 09 00 00 00       	mov    eax,0x9
c001c2fc:	eb 0a                	jmp    c001c308 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001c2fe:	66 90                	xchg   ax,ax
c001c300:	b8 01 00 00 00       	mov    eax,0x1
c001c305:	8d 76 00             	lea    esi,[esi+0x0]
c001c308:	83 c4 2c             	add    esp,0x2c
c001c30b:	c3                   	ret    

c001c30c <FAT::tryMount(LogicalDisk*, int)>:
c001c30c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001c312:	a1 c0 fb 02 c0       	mov    eax,ds:0xc002fbc0
c001c317:	83 f8 14             	cmp    eax,0x14
c001c31a:	75 18                	jne    c001c334 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001c31c:	83 ec 0c             	sub    esp,0xc
c001c31f:	68 5c 5f 02 c0       	push   0xc0025f5c
c001c324:	e8 97 38 ff ff       	call   c000fbc0 <KePanic(char const*)>
c001c329:	83 c4 10             	add    esp,0x10
c001c32c:	b0 00                	mov    al,0x0
c001c32e:	e9 ed 01 00 00       	jmp    c001c520 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c333:	90                   	nop
c001c334:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001c33b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c341:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c347:	3d 00 02 00 00       	cmp    eax,0x200
c001c34c:	74 0a                	je     c001c358 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001c34e:	b0 00                	mov    al,0x0
c001c350:	e9 cb 01 00 00       	jmp    c001c520 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c355:	8d 76 00             	lea    esi,[esi+0x0]
c001c358:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001c360:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001c367:	8b 04 85 e0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0420]
c001c36e:	83 f8 ff             	cmp    eax,0xffffffff
c001c371:	74 09                	je     c001c37c <FAT::tryMount(LogicalDisk*, int)+0x70>
c001c373:	b0 01                	mov    al,0x1
c001c375:	e9 a6 01 00 00       	jmp    c001c520 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c37a:	66 90                	xchg   ax,ax
c001c37c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001c386:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001c38e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001c395:	88 c2                	mov    dl,al
c001c397:	a1 c0 fb 02 c0       	mov    eax,ds:0xc002fbc0
c001c39c:	01 d0                	add    eax,edx
c001c39e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001c3a5:	8b 15 c0 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fbc0
c001c3ab:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001c3b2:	89 14 85 e0 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0420],edx
c001c3b9:	a1 c0 fb 02 c0       	mov    eax,ds:0xc002fbc0
c001c3be:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001c3c5:	89 14 85 60 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd03a0],edx
c001c3cc:	83 ec 0c             	sub    esp,0xc
c001c3cf:	68 34 02 00 00       	push   0x234
c001c3d4:	e8 8a 33 ff ff       	call   c000f763 <malloc>
c001c3d9:	83 c4 10             	add    esp,0x10
c001c3dc:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001c3e3:	83 ec 04             	sub    esp,0x4
c001c3e6:	6a 00                	push   0x0
c001c3e8:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001c3ef:	50                   	push   eax
c001c3f0:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001c3f7:	e8 e5 79 fe ff       	call   c0003de1 <f_mount>
c001c3fc:	83 c4 10             	add    esp,0x10
c001c3ff:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001c406:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001c40e:	74 1c                	je     c001c42c <FAT::tryMount(LogicalDisk*, int)+0x120>
c001c410:	83 ec 0c             	sub    esp,0xc
c001c413:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001c41a:	e8 64 33 ff ff       	call   c000f783 <rfree>
c001c41f:	83 c4 10             	add    esp,0x10
c001c422:	b0 00                	mov    al,0x0
c001c424:	e9 f7 00 00 00       	jmp    c001c520 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c429:	8d 76 00             	lea    esi,[esi+0x0]
c001c42c:	83 ec 04             	sub    esp,0x4
c001c42f:	68 00 01 00 00       	push   0x100
c001c434:	6a 00                	push   0x0
c001c436:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001c43d:	50                   	push   eax
c001c43e:	e8 ad 40 fe ff       	call   c00004f0 <memset>
c001c443:	83 c4 10             	add    esp,0x10
c001c446:	83 ec 08             	sub    esp,0x8
c001c449:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001c450:	50                   	push   eax
c001c451:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001c458:	50                   	push   eax
c001c459:	e8 e2 43 fe ff       	call   c0000840 <strcat>
c001c45e:	83 c4 10             	add    esp,0x10
c001c461:	83 ec 08             	sub    esp,0x8
c001c464:	68 6a 5f 02 c0       	push   0xc0025f6a
c001c469:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001c470:	50                   	push   eax
c001c471:	e8 ca 43 fe ff       	call   c0000840 <strcat>
c001c476:	83 c4 10             	add    esp,0x10
c001c479:	83 ec 04             	sub    esp,0x4
c001c47c:	6a 01                	push   0x1
c001c47e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001c485:	50                   	push   eax
c001c486:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c48a:	50                   	push   eax
c001c48b:	e8 b3 79 fe ff       	call   c0003e43 <f_open>
c001c490:	83 c4 10             	add    esp,0x10
c001c493:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001c49a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001c4a1:	85 c0                	test   eax,eax
c001c4a3:	74 0b                	je     c001c4b0 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001c4a5:	78 31                	js     c001c4d8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001c4a7:	83 e8 04             	sub    eax,0x4
c001c4aa:	83 f8 01             	cmp    eax,0x1
c001c4ad:	77 29                	ja     c001c4d8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001c4af:	90                   	nop
c001c4b0:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001c4b8:	83 ec 0c             	sub    esp,0xc
c001c4bb:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c4bf:	50                   	push   eax
c001c4c0:	e8 4d 81 fe ff       	call   c0004612 <f_close>
c001c4c5:	83 c4 10             	add    esp,0x10
c001c4c8:	90                   	nop
c001c4c9:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001c4d1:	85 c0                	test   eax,eax
c001c4d3:	74 43                	je     c001c518 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001c4d5:	eb 31                	jmp    c001c508 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001c4d7:	90                   	nop
c001c4d8:	83 ec 0c             	sub    esp,0xc
c001c4db:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001c4e2:	e8 9c 32 ff ff       	call   c000f783 <rfree>
c001c4e7:	83 c4 10             	add    esp,0x10
c001c4ea:	83 ec 04             	sub    esp,0x4
c001c4ed:	6a 00                	push   0x0
c001c4ef:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001c4f6:	50                   	push   eax
c001c4f7:	6a 00                	push   0x0
c001c4f9:	e8 e3 78 fe ff       	call   c0003de1 <f_mount>
c001c4fe:	83 c4 10             	add    esp,0x10
c001c501:	b0 00                	mov    al,0x0
c001c503:	eb 1b                	jmp    c001c520 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c505:	8d 76 00             	lea    esi,[esi+0x0]
c001c508:	a1 c0 fb 02 c0       	mov    eax,ds:0xc002fbc0
c001c50d:	83 c0 01             	add    eax,0x1
c001c510:	a3 c0 fb 02 c0       	mov    ds:0xc002fbc0,eax
c001c515:	8d 76 00             	lea    esi,[esi+0x0]
c001c518:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001c51f:	90                   	nop
c001c520:	81 c4 4c 03 00 00    	add    esp,0x34c
c001c526:	c3                   	ret    
c001c527:	90                   	nop

c001c528 <FAT::allocateSwapfile(char const*, int)>:
c001c528:	55                   	push   ebp
c001c529:	57                   	push   edi
c001c52a:	56                   	push   esi
c001c52b:	53                   	push   ebx
c001c52c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001c532:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001c53d:	83 ec 0c             	sub    esp,0xc
c001c540:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001c547:	e8 17 32 ff ff       	call   c000f763 <malloc>
c001c54c:	83 c4 10             	add    esp,0x10
c001c54f:	89 c7                	mov    edi,eax
c001c551:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c001c556:	83 ec 04             	sub    esp,0x4
c001c559:	50                   	push   eax
c001c55a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001c561:	57                   	push   edi
c001c562:	e8 23 bc fe ff       	call   c000818a <File::File(char const*, Process*)>
c001c567:	83 c4 10             	add    esp,0x10
c001c56a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001c571:	83 ec 04             	sub    esp,0x4
c001c574:	8d 44 24 13          	lea    eax,[esp+0x13]
c001c578:	50                   	push   eax
c001c579:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c57d:	50                   	push   eax
c001c57e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c585:	e8 20 bf fe ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c001c58a:	83 c4 10             	add    esp,0x10
c001c58d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001c594:	c1 e0 14             	shl    eax,0x14
c001c597:	89 c7                	mov    edi,eax
c001c599:	89 c5                	mov    ebp,eax
c001c59b:	c1 fd 1f             	sar    ebp,0x1f
c001c59e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5a6:	89 f9                	mov    ecx,edi
c001c5a8:	31 c1                	xor    ecx,eax
c001c5aa:	89 cb                	mov    ebx,ecx
c001c5ac:	89 e9                	mov    ecx,ebp
c001c5ae:	31 d1                	xor    ecx,edx
c001c5b0:	89 ce                	mov    esi,ecx
c001c5b2:	89 f0                	mov    eax,esi
c001c5b4:	09 d8                	or     eax,ebx
c001c5b6:	0f 84 9c 00 00 00    	je     c001c658 <FAT::allocateSwapfile(char const*, int)+0x130>
c001c5bc:	83 ec 0c             	sub    esp,0xc
c001c5bf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c5c6:	e8 ab bd fe ff       	call   c0008376 <File::unlink()>
c001c5cb:	83 c4 10             	add    esp,0x10
c001c5ce:	83 ec 08             	sub    esp,0x8
c001c5d1:	6a 12                	push   0x12
c001c5d3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c5da:	e8 c9 bb fe ff       	call   c00081a8 <File::open(FileOpenMode)>
c001c5df:	83 c4 10             	add    esp,0x10
c001c5e2:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c5e9:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001c5ef:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001c5f6:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001c5fd:	c1 e0 14             	shl    eax,0x14
c001c600:	83 ec 04             	sub    esp,0x4
c001c603:	6a 01                	push   0x1
c001c605:	50                   	push   eax
c001c606:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001c60d:	e8 87 8e fe ff       	call   c0005499 <f_expand>
c001c612:	83 c4 10             	add    esp,0x10
c001c615:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c61c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c61e:	83 c0 10             	add    eax,0x10
c001c621:	8b 00                	mov    eax,DWORD PTR [eax]
c001c623:	83 ec 0c             	sub    esp,0xc
c001c626:	8d 54 24 24          	lea    edx,[esp+0x24]
c001c62a:	52                   	push   edx
c001c62b:	8d 54 24 30          	lea    edx,[esp+0x30]
c001c62f:	52                   	push   edx
c001c630:	6a 00                	push   0x0
c001c632:	68 00 04 00 00       	push   0x400
c001c637:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001c63e:	ff d0                	call   eax
c001c640:	83 c4 20             	add    esp,0x20
c001c643:	83 ec 0c             	sub    esp,0xc
c001c646:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c64d:	e8 b4 bb fe ff       	call   c0008206 <File::close()>
c001c652:	83 c4 10             	add    esp,0x10
c001c655:	8d 76 00             	lea    esi,[esi+0x0]
c001c658:	83 ec 08             	sub    esp,0x8
c001c65b:	6a 01                	push   0x1
c001c65d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c664:	e8 3f bb fe ff       	call   c00081a8 <File::open(FileOpenMode)>
c001c669:	83 c4 10             	add    esp,0x10
c001c66c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c673:	8b 00                	mov    eax,DWORD PTR [eax]
c001c675:	83 c0 0c             	add    eax,0xc
c001c678:	8b 00                	mov    eax,DWORD PTR [eax]
c001c67a:	83 ec 0c             	sub    esp,0xc
c001c67d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001c681:	52                   	push   edx
c001c682:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001c686:	52                   	push   edx
c001c687:	6a 00                	push   0x0
c001c689:	6a 04                	push   0x4
c001c68b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001c692:	ff d0                	call   eax
c001c694:	83 c4 20             	add    esp,0x20
c001c697:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c69e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001c6a4:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001c6ab:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001c6b2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001c6b5:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001c6bc:	83 ec 0c             	sub    esp,0xc
c001c6bf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c6c6:	e8 3b bb fe ff       	call   c0008206 <File::close()>
c001c6cb:	83 c4 10             	add    esp,0x10
c001c6ce:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001c6d5:	ba 00 00 00 00       	mov    edx,0x0
c001c6da:	81 c4 3c 04 00 00    	add    esp,0x43c
c001c6e0:	5b                   	pop    ebx
c001c6e1:	5e                   	pop    esi
c001c6e2:	5f                   	pop    edi
c001c6e3:	5d                   	pop    ebp
c001c6e4:	c3                   	ret    
c001c6e5:	90                   	nop
c001c6e6:	66 90                	xchg   ax,ax

c001c6e8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001c6e8:	57                   	push   edi
c001c6e9:	56                   	push   esi
c001c6ea:	53                   	push   ebx
c001c6eb:	81 ec 50 02 00 00    	sub    esp,0x250
c001c6f1:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001c6f9:	74 0d                	je     c001c708 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001c6fb:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001c703:	75 0f                	jne    c001c714 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001c705:	8d 76 00             	lea    esi,[esi+0x0]
c001c708:	b8 04 00 00 00       	mov    eax,0x4
c001c70d:	e9 3a 01 00 00       	jmp    c001c84c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c712:	66 90                	xchg   ax,ax
c001c714:	83 ec 08             	sub    esp,0x8
c001c717:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001c71e:	50                   	push   eax
c001c71f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001c726:	e8 b4 81 fe ff       	call   c00048df <f_readdir>
c001c72b:	83 c4 10             	add    esp,0x10
c001c72e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001c735:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001c73c:	83 ec 0c             	sub    esp,0xc
c001c73f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c746:	83 c0 16             	add    eax,0x16
c001c749:	50                   	push   eax
c001c74a:	e8 21 3e fe ff       	call   c0000570 <strlen>
c001c74f:	83 c4 10             	add    esp,0x10
c001c752:	ba 00 00 00 00       	mov    edx,0x0
c001c757:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c75b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001c75f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001c766:	0f b6 c0             	movzx  eax,al
c001c769:	83 e0 10             	and    eax,0x10
c001c76c:	74 0a                	je     c001c778 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001c76e:	b8 02 00 00 00       	mov    eax,0x2
c001c773:	eb 0b                	jmp    c001c780 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001c775:	8d 76 00             	lea    esi,[esi+0x0]
c001c778:	b8 01 00 00 00       	mov    eax,0x1
c001c77d:	8d 76 00             	lea    esi,[esi+0x0]
c001c780:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c784:	83 ec 08             	sub    esp,0x8
c001c787:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001c78e:	83 c0 16             	add    eax,0x16
c001c791:	50                   	push   eax
c001c792:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c796:	83 c0 10             	add    eax,0x10
c001c799:	50                   	push   eax
c001c79a:	e8 a1 3e fe ff       	call   c0000640 <strcpy>
c001c79f:	83 c4 10             	add    esp,0x10
c001c7a2:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001c7a9:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001c7b0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c7b4:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001c7bb:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001c7c2:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001c7c9:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001c7d0:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001c7d7:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001c7de:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001c7e5:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001c7ec:	89 c6                	mov    esi,eax
c001c7ee:	89 d7                	mov    edi,edx
c001c7f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c7f2:	89 c8                	mov    eax,ecx
c001c7f4:	89 fa                	mov    edx,edi
c001c7f6:	89 f3                	mov    ebx,esi
c001c7f8:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001c7ff:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001c806:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001c80d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001c814:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c81a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001c821:	0f be c0             	movsx  eax,al
c001c824:	85 c0                	test   eax,eax
c001c826:	75 08                	jne    c001c830 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001c828:	b8 07 00 00 00       	mov    eax,0x7
c001c82d:	eb 1d                	jmp    c001c84c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c82f:	90                   	nop
c001c830:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001c837:	85 c0                	test   eax,eax
c001c839:	75 09                	jne    c001c844 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001c83b:	b8 00 00 00 00       	mov    eax,0x0
c001c840:	eb 0a                	jmp    c001c84c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c842:	66 90                	xchg   ax,ax
c001c844:	b8 01 00 00 00       	mov    eax,0x1
c001c849:	8d 76 00             	lea    esi,[esi+0x0]
c001c84c:	81 c4 50 02 00 00    	add    esp,0x250
c001c852:	5b                   	pop    ebx
c001c853:	5e                   	pop    esi
c001c854:	5f                   	pop    edi
c001c855:	c3                   	ret    
c001c856:	66 90                	xchg   ax,ax

c001c858 <FAT::read(void*, unsigned long, void*, int*)>:
c001c858:	83 ec 1c             	sub    esp,0x1c
c001c85b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c860:	74 0a                	je     c001c86c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001c862:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c867:	75 0b                	jne    c001c874 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001c869:	8d 76 00             	lea    esi,[esi+0x0]
c001c86c:	b8 04 00 00 00       	mov    eax,0x4
c001c871:	eb 41                	jmp    c001c8b4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c873:	90                   	nop
c001c874:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c878:	50                   	push   eax
c001c879:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c87d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c881:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c885:	e8 7c 78 fe ff       	call   c0004106 <f_read>
c001c88a:	83 c4 10             	add    esp,0x10
c001c88d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c891:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c895:	89 c2                	mov    edx,eax
c001c897:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c89b:	89 10                	mov    DWORD PTR [eax],edx
c001c89d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c8a1:	85 c0                	test   eax,eax
c001c8a3:	75 07                	jne    c001c8ac <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001c8a5:	b8 00 00 00 00       	mov    eax,0x0
c001c8aa:	eb 08                	jmp    c001c8b4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c8ac:	b8 01 00 00 00       	mov    eax,0x1
c001c8b1:	8d 76 00             	lea    esi,[esi+0x0]
c001c8b4:	83 c4 1c             	add    esp,0x1c
c001c8b7:	c3                   	ret    

c001c8b8 <FAT::write(void*, unsigned long, void*, int*)>:
c001c8b8:	83 ec 1c             	sub    esp,0x1c
c001c8bb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c8c0:	74 0a                	je     c001c8cc <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001c8c2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c8c7:	75 0b                	jne    c001c8d4 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001c8c9:	8d 76 00             	lea    esi,[esi+0x0]
c001c8cc:	b8 04 00 00 00       	mov    eax,0x4
c001c8d1:	eb 41                	jmp    c001c914 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c8d3:	90                   	nop
c001c8d4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c8d8:	50                   	push   eax
c001c8d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c8dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c8e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c8e5:	e8 1b 7a fe ff       	call   c0004305 <f_write>
c001c8ea:	83 c4 10             	add    esp,0x10
c001c8ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c8f5:	89 c2                	mov    edx,eax
c001c8f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c8fb:	89 10                	mov    DWORD PTR [eax],edx
c001c8fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c901:	85 c0                	test   eax,eax
c001c903:	75 07                	jne    c001c90c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001c905:	b8 00 00 00 00       	mov    eax,0x0
c001c90a:	eb 08                	jmp    c001c914 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c90c:	b8 01 00 00 00       	mov    eax,0x1
c001c911:	8d 76 00             	lea    esi,[esi+0x0]
c001c914:	83 c4 1c             	add    esp,0x1c
c001c917:	c3                   	ret    

c001c918 <FAT::close(void*)>:
c001c918:	83 ec 1c             	sub    esp,0x1c
c001c91b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c920:	75 0a                	jne    c001c92c <FAT::close(void*)+0x14>
c001c922:	b8 04 00 00 00       	mov    eax,0x4
c001c927:	eb 3f                	jmp    c001c968 <FAT::close(void*)+0x50>
c001c929:	8d 76 00             	lea    esi,[esi+0x0]
c001c92c:	83 ec 0c             	sub    esp,0xc
c001c92f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c933:	e8 da 7c fe ff       	call   c0004612 <f_close>
c001c938:	83 c4 10             	add    esp,0x10
c001c93b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c93f:	83 ec 0c             	sub    esp,0xc
c001c942:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c946:	e8 28 2e ff ff       	call   c000f773 <free>
c001c94b:	83 c4 10             	add    esp,0x10
c001c94e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c952:	85 c0                	test   eax,eax
c001c954:	75 0a                	jne    c001c960 <FAT::close(void*)+0x48>
c001c956:	b8 00 00 00 00       	mov    eax,0x0
c001c95b:	eb 0b                	jmp    c001c968 <FAT::close(void*)+0x50>
c001c95d:	8d 76 00             	lea    esi,[esi+0x0]
c001c960:	b8 01 00 00 00       	mov    eax,0x1
c001c965:	8d 76 00             	lea    esi,[esi+0x0]
c001c968:	83 c4 1c             	add    esp,0x1c
c001c96b:	c3                   	ret    

c001c96c <FAT::closeDir(void*)>:
c001c96c:	83 ec 1c             	sub    esp,0x1c
c001c96f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c974:	75 0a                	jne    c001c980 <FAT::closeDir(void*)+0x14>
c001c976:	b8 04 00 00 00       	mov    eax,0x4
c001c97b:	eb 3f                	jmp    c001c9bc <FAT::closeDir(void*)+0x50>
c001c97d:	8d 76 00             	lea    esi,[esi+0x0]
c001c980:	83 ec 0c             	sub    esp,0xc
c001c983:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c987:	e8 31 7f fe ff       	call   c00048bd <f_closedir>
c001c98c:	83 c4 10             	add    esp,0x10
c001c98f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c993:	83 ec 0c             	sub    esp,0xc
c001c996:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c99a:	e8 d4 2d ff ff       	call   c000f773 <free>
c001c99f:	83 c4 10             	add    esp,0x10
c001c9a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9a6:	85 c0                	test   eax,eax
c001c9a8:	75 0a                	jne    c001c9b4 <FAT::closeDir(void*)+0x48>
c001c9aa:	b8 00 00 00 00       	mov    eax,0x0
c001c9af:	eb 0b                	jmp    c001c9bc <FAT::closeDir(void*)+0x50>
c001c9b1:	8d 76 00             	lea    esi,[esi+0x0]
c001c9b4:	b8 01 00 00 00       	mov    eax,0x1
c001c9b9:	8d 76 00             	lea    esi,[esi+0x0]
c001c9bc:	83 c4 1c             	add    esp,0x1c
c001c9bf:	c3                   	ret    

c001c9c0 <FAT::truncate(void*, unsigned long long)>:
c001c9c0:	83 ec 2c             	sub    esp,0x2c
c001c9c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c9c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c9cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c9cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c9d3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c9d8:	75 0a                	jne    c001c9e4 <FAT::truncate(void*, unsigned long long)+0x24>
c001c9da:	b8 04 00 00 00       	mov    eax,0x4
c001c9df:	eb 47                	jmp    c001ca28 <FAT::truncate(void*, unsigned long long)+0x68>
c001c9e1:	8d 76 00             	lea    esi,[esi+0x0]
c001c9e4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c9e8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c9eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c9ef:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001c9f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9fb:	83 ec 08             	sub    esp,0x8
c001c9fe:	50                   	push   eax
c001c9ff:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ca03:	e8 39 7c fe ff       	call   c0004641 <f_lseek>
c001ca08:	83 c4 10             	add    esp,0x10
c001ca0b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ca0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ca13:	85 c0                	test   eax,eax
c001ca15:	75 09                	jne    c001ca20 <FAT::truncate(void*, unsigned long long)+0x60>
c001ca17:	b8 00 00 00 00       	mov    eax,0x0
c001ca1c:	eb 0a                	jmp    c001ca28 <FAT::truncate(void*, unsigned long long)+0x68>
c001ca1e:	66 90                	xchg   ax,ax
c001ca20:	b8 01 00 00 00       	mov    eax,0x1
c001ca25:	8d 76 00             	lea    esi,[esi+0x0]
c001ca28:	83 c4 2c             	add    esp,0x2c
c001ca2b:	c3                   	ret    

c001ca2c <FAT::seek(void*, unsigned long long)>:
c001ca2c:	83 ec 2c             	sub    esp,0x2c
c001ca2f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ca33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ca37:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ca3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ca3f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001ca44:	75 0a                	jne    c001ca50 <FAT::seek(void*, unsigned long long)+0x24>
c001ca46:	b8 04 00 00 00       	mov    eax,0x4
c001ca4b:	eb 33                	jmp    c001ca80 <FAT::seek(void*, unsigned long long)+0x54>
c001ca4d:	8d 76 00             	lea    esi,[esi+0x0]
c001ca50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca54:	83 ec 08             	sub    esp,0x8
c001ca57:	50                   	push   eax
c001ca58:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ca5c:	e8 e0 7b fe ff       	call   c0004641 <f_lseek>
c001ca61:	83 c4 10             	add    esp,0x10
c001ca64:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ca68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca6c:	85 c0                	test   eax,eax
c001ca6e:	75 08                	jne    c001ca78 <FAT::seek(void*, unsigned long long)+0x4c>
c001ca70:	b8 00 00 00 00       	mov    eax,0x0
c001ca75:	eb 09                	jmp    c001ca80 <FAT::seek(void*, unsigned long long)+0x54>
c001ca77:	90                   	nop
c001ca78:	b8 01 00 00 00       	mov    eax,0x1
c001ca7d:	8d 76 00             	lea    esi,[esi+0x0]
c001ca80:	83 c4 2c             	add    esp,0x2c
c001ca83:	c3                   	ret    

c001ca84 <fatWrapperReadDisk>:
c001ca84:	53                   	push   ebx
c001ca85:	83 ec 18             	sub    esp,0x18
c001ca88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca8c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ca90:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ca95:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c001ca9c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001caa0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001caa4:	ba 00 00 00 00       	mov    edx,0x0
c001caa9:	83 ec 0c             	sub    esp,0xc
c001caac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001cab0:	53                   	push   ebx
c001cab1:	52                   	push   edx
c001cab2:	50                   	push   eax
c001cab3:	51                   	push   ecx
c001cab4:	e8 ef df fe ff       	call   c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>
c001cab9:	83 c4 20             	add    esp,0x20
c001cabc:	83 c4 18             	add    esp,0x18
c001cabf:	5b                   	pop    ebx
c001cac0:	c3                   	ret    
c001cac1:	8d 76 00             	lea    esi,[esi+0x0]

c001cac4 <fatWrapperWriteDisk>:
c001cac4:	53                   	push   ebx
c001cac5:	83 ec 18             	sub    esp,0x18
c001cac8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cacc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cad0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cad5:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c001cadc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cae0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cae4:	ba 00 00 00 00       	mov    edx,0x0
c001cae9:	83 ec 0c             	sub    esp,0xc
c001caec:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001caf0:	53                   	push   ebx
c001caf1:	52                   	push   edx
c001caf2:	50                   	push   eax
c001caf3:	51                   	push   ecx
c001caf4:	e8 1b e0 fe ff       	call   c000ab14 <LogicalDisk::write(unsigned long long, int, void*)>
c001caf9:	83 c4 20             	add    esp,0x20
c001cafc:	83 c4 18             	add    esp,0x18
c001caff:	5b                   	pop    ebx
c001cb00:	c3                   	ret    
c001cb01:	8d 76 00             	lea    esi,[esi+0x0]

c001cb04 <fatWrapperIoctl>:
c001cb04:	53                   	push   ebx
c001cb05:	83 ec 28             	sub    esp,0x28
c001cb08:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cb0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cb10:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001cb14:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001cb18:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cb1d:	83 f8 02             	cmp    eax,0x2
c001cb20:	75 32                	jne    c001cb54 <fatWrapperIoctl+0x50>
c001cb22:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cb26:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb2a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cb2f:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c001cb36:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001cb3c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001cb42:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cb46:	66 89 02             	mov    WORD PTR [edx],ax
c001cb49:	b8 00 00 00 00       	mov    eax,0x0
c001cb4e:	e9 c5 00 00 00       	jmp    c001cc18 <fatWrapperIoctl+0x114>
c001cb53:	90                   	nop
c001cb54:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cb59:	83 f8 01             	cmp    eax,0x1
c001cb5c:	75 6a                	jne    c001cbc8 <fatWrapperIoctl+0xc4>
c001cb5e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cb62:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb66:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cb6b:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c001cb72:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001cb78:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001cb7e:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001cb84:	89 c8                	mov    eax,ecx
c001cb86:	89 da                	mov    edx,ebx
c001cb88:	0f a4 c2 0a          	shld   edx,eax,0xa
c001cb8c:	c1 e0 0a             	shl    eax,0xa
c001cb8f:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001cb94:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c001cb9b:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001cba1:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001cba7:	89 cb                	mov    ebx,ecx
c001cba9:	c1 fb 1f             	sar    ebx,0x1f
c001cbac:	53                   	push   ebx
c001cbad:	51                   	push   ecx
c001cbae:	52                   	push   edx
c001cbaf:	50                   	push   eax
c001cbb0:	e8 5f 55 00 00       	call   c0022114 <__udivdi3>
c001cbb5:	83 c4 10             	add    esp,0x10
c001cbb8:	89 c2                	mov    edx,eax
c001cbba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cbbe:	89 10                	mov    DWORD PTR [eax],edx
c001cbc0:	b8 00 00 00 00       	mov    eax,0x0
c001cbc5:	eb 51                	jmp    c001cc18 <fatWrapperIoctl+0x114>
c001cbc7:	90                   	nop
c001cbc8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cbcd:	85 c0                	test   eax,eax
c001cbcf:	75 07                	jne    c001cbd8 <fatWrapperIoctl+0xd4>
c001cbd1:	b8 00 00 00 00       	mov    eax,0x0
c001cbd6:	eb 40                	jmp    c001cc18 <fatWrapperIoctl+0x114>
c001cbd8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cbdd:	83 f8 03             	cmp    eax,0x3
c001cbe0:	75 1a                	jne    c001cbfc <fatWrapperIoctl+0xf8>
c001cbe2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cbe6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cbea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cbee:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001cbf4:	b8 00 00 00 00       	mov    eax,0x0
c001cbf9:	eb 1d                	jmp    c001cc18 <fatWrapperIoctl+0x114>
c001cbfb:	90                   	nop
c001cbfc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cc01:	83 f8 04             	cmp    eax,0x4
c001cc04:	75 0a                	jne    c001cc10 <fatWrapperIoctl+0x10c>
c001cc06:	b8 00 00 00 00       	mov    eax,0x0
c001cc0b:	eb 0b                	jmp    c001cc18 <fatWrapperIoctl+0x114>
c001cc0d:	8d 76 00             	lea    esi,[esi+0x0]
c001cc10:	b8 04 00 00 00       	mov    eax,0x4
c001cc15:	8d 76 00             	lea    esi,[esi+0x0]
c001cc18:	83 c4 28             	add    esp,0x28
c001cc1b:	5b                   	pop    ebx
c001cc1c:	c3                   	ret    
c001cc1d:	90                   	nop
c001cc1e:	66 90                	xchg   ax,ax

c001cc20 <FAT::FAT()>:
c001cc20:	83 ec 1c             	sub    esp,0x1c
c001cc23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc27:	83 ec 0c             	sub    esp,0xc
c001cc2a:	50                   	push   eax
c001cc2b:	e8 98 b1 fe ff       	call   c0007dc8 <Filesystem::Filesystem()>
c001cc30:	83 c4 10             	add    esp,0x10
c001cc33:	ba 80 5f 02 c0       	mov    edx,0xc0025f80
c001cc38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc3c:	89 10                	mov    DWORD PTR [eax],edx
c001cc3e:	c7 05 c0 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fbc0,0x0
c001cc48:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cc50:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001cc55:	7f 19                	jg     c001cc70 <FAT::FAT()+0x50>
c001cc57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc5b:	c7 04 85 e0 fb 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd0420],0xffffffff
c001cc66:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001cc6b:	eb e3                	jmp    c001cc50 <FAT::FAT()+0x30>
c001cc6d:	8d 76 00             	lea    esi,[esi+0x0]
c001cc70:	90                   	nop
c001cc71:	83 c4 1c             	add    esp,0x1c
c001cc74:	c3                   	ret    
c001cc75:	90                   	nop
c001cc76:	66 90                	xchg   ax,ax

c001cc78 <FAT::fixFilepath(char*)>:
c001cc78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc7c:	8a 00                	mov    al,BYTE PTR [eax]
c001cc7e:	0f be c0             	movsx  eax,al
c001cc81:	83 f8 40             	cmp    eax,0x40
c001cc84:	7e 2e                	jle    c001ccb4 <FAT::fixFilepath(char*)+0x3c>
c001cc86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc8a:	8a 00                	mov    al,BYTE PTR [eax]
c001cc8c:	83 e8 41             	sub    eax,0x41
c001cc8f:	88 c2                	mov    dl,al
c001cc91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc95:	88 10                	mov    BYTE PTR [eax],dl
c001cc97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc9b:	8a 00                	mov    al,BYTE PTR [eax]
c001cc9d:	0f be c0             	movsx  eax,al
c001cca0:	8b 04 85 e0 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0420]
c001cca7:	83 c0 30             	add    eax,0x30
c001ccaa:	88 c2                	mov    dl,al
c001ccac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ccb0:	88 10                	mov    BYTE PTR [eax],dl
c001ccb2:	66 90                	xchg   ax,ax
c001ccb4:	90                   	nop
c001ccb5:	c3                   	ret    
c001ccb6:	66 90                	xchg   ax,ax

c001ccb8 <FAT::open(char const*, void**, FileOpenMode)>:
c001ccb8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ccbe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ccc6:	74 0c                	je     c001ccd4 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001ccc8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ccd0:	75 0e                	jne    c001cce0 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001ccd2:	66 90                	xchg   ax,ax
c001ccd4:	b8 04 00 00 00       	mov    eax,0x4
c001ccd9:	e9 46 01 00 00       	jmp    c001ce24 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001ccde:	66 90                	xchg   ax,ax
c001cce0:	83 ec 08             	sub    esp,0x8
c001cce3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ccea:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ccee:	50                   	push   eax
c001ccef:	e8 4c 39 fe ff       	call   c0000640 <strcpy>
c001ccf4:	83 c4 10             	add    esp,0x10
c001ccf7:	83 ec 08             	sub    esp,0x8
c001ccfa:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ccfe:	50                   	push   eax
c001ccff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cd06:	e8 6d ff ff ff       	call   c001cc78 <FAT::fixFilepath(char*)>
c001cd0b:	83 c4 10             	add    esp,0x10
c001cd0e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001cd16:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001cd1d:	83 e0 01             	and    eax,0x1
c001cd20:	74 12                	je     c001cd34 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001cd22:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001cd29:	83 c8 01             	or     eax,0x1
c001cd2c:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001cd33:	90                   	nop
c001cd34:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001cd3b:	83 e0 04             	and    eax,0x4
c001cd3e:	74 24                	je     c001cd64 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001cd40:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001cd47:	83 c8 30             	or     eax,0x30
c001cd4a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001cd51:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001cd58:	83 c8 02             	or     eax,0x2
c001cd5b:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001cd62:	66 90                	xchg   ax,ax
c001cd64:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001cd6b:	83 e0 02             	and    eax,0x2
c001cd6e:	74 14                	je     c001cd84 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001cd70:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001cd77:	83 c8 02             	or     eax,0x2
c001cd7a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001cd81:	8d 76 00             	lea    esi,[esi+0x0]
c001cd84:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001cd8b:	83 e0 08             	and    eax,0x8
c001cd8e:	74 14                	je     c001cda4 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001cd90:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001cd97:	83 c8 04             	or     eax,0x4
c001cd9a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001cda1:	8d 76 00             	lea    esi,[esi+0x0]
c001cda4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001cdab:	83 e0 10             	and    eax,0x10
c001cdae:	74 14                	je     c001cdc4 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001cdb0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001cdb7:	83 c8 08             	or     eax,0x8
c001cdba:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001cdc1:	8d 76 00             	lea    esi,[esi+0x0]
c001cdc4:	83 ec 0c             	sub    esp,0xc
c001cdc7:	68 28 02 00 00       	push   0x228
c001cdcc:	e8 92 29 ff ff       	call   c000f763 <malloc>
c001cdd1:	83 c4 10             	add    esp,0x10
c001cdd4:	89 c2                	mov    edx,eax
c001cdd6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001cddd:	89 10                	mov    DWORD PTR [eax],edx
c001cddf:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001cde7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001cdee:	8b 00                	mov    eax,DWORD PTR [eax]
c001cdf0:	83 ec 04             	sub    esp,0x4
c001cdf3:	52                   	push   edx
c001cdf4:	8d 54 24 10          	lea    edx,[esp+0x10]
c001cdf8:	52                   	push   edx
c001cdf9:	50                   	push   eax
c001cdfa:	e8 44 70 fe ff       	call   c0003e43 <f_open>
c001cdff:	83 c4 10             	add    esp,0x10
c001ce02:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001ce09:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001ce11:	74 09                	je     c001ce1c <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001ce13:	b8 01 00 00 00       	mov    eax,0x1
c001ce18:	eb 0a                	jmp    c001ce24 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001ce1a:	66 90                	xchg   ax,ax
c001ce1c:	b8 00 00 00 00       	mov    eax,0x0
c001ce21:	8d 76 00             	lea    esi,[esi+0x0]
c001ce24:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ce2a:	c3                   	ret    
c001ce2b:	90                   	nop

c001ce2c <FAT::openDir(char const*, void**)>:
c001ce2c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ce32:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ce3a:	74 0c                	je     c001ce48 <FAT::openDir(char const*, void**)+0x1c>
c001ce3c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ce44:	75 0e                	jne    c001ce54 <FAT::openDir(char const*, void**)+0x28>
c001ce46:	66 90                	xchg   ax,ax
c001ce48:	b8 04 00 00 00       	mov    eax,0x4
c001ce4d:	e9 82 00 00 00       	jmp    c001ced4 <FAT::openDir(char const*, void**)+0xa8>
c001ce52:	66 90                	xchg   ax,ax
c001ce54:	83 ec 08             	sub    esp,0x8
c001ce57:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ce5e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ce62:	50                   	push   eax
c001ce63:	e8 d8 37 fe ff       	call   c0000640 <strcpy>
c001ce68:	83 c4 10             	add    esp,0x10
c001ce6b:	83 ec 08             	sub    esp,0x8
c001ce6e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ce72:	50                   	push   eax
c001ce73:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ce7a:	e8 f9 fd ff ff       	call   c001cc78 <FAT::fixFilepath(char*)>
c001ce7f:	83 c4 10             	add    esp,0x10
c001ce82:	83 ec 0c             	sub    esp,0xc
c001ce85:	6a 30                	push   0x30
c001ce87:	e8 d7 28 ff ff       	call   c000f763 <malloc>
c001ce8c:	83 c4 10             	add    esp,0x10
c001ce8f:	89 c2                	mov    edx,eax
c001ce91:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ce98:	89 10                	mov    DWORD PTR [eax],edx
c001ce9a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001cea1:	8b 00                	mov    eax,DWORD PTR [eax]
c001cea3:	83 ec 08             	sub    esp,0x8
c001cea6:	8d 54 24 14          	lea    edx,[esp+0x14]
c001ceaa:	52                   	push   edx
c001ceab:	50                   	push   eax
c001ceac:	e8 41 79 fe ff       	call   c00047f2 <f_opendir>
c001ceb1:	83 c4 10             	add    esp,0x10
c001ceb4:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001cebb:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001cec3:	74 07                	je     c001cecc <FAT::openDir(char const*, void**)+0xa0>
c001cec5:	b8 01 00 00 00       	mov    eax,0x1
c001ceca:	eb 08                	jmp    c001ced4 <FAT::openDir(char const*, void**)+0xa8>
c001cecc:	b8 00 00 00 00       	mov    eax,0x0
c001ced1:	8d 76 00             	lea    esi,[esi+0x0]
c001ced4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ceda:	c3                   	ret    
c001cedb:	90                   	nop

c001cedc <FAT::stat(char const*, unsigned long long*, bool*)>:
c001cedc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001cee2:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001ceea:	75 0c                	jne    c001cef8 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001ceec:	b8 04 00 00 00       	mov    eax,0x4
c001cef1:	e9 d6 00 00 00       	jmp    c001cfcc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cef6:	66 90                	xchg   ax,ax
c001cef8:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001cf00:	75 0a                	jne    c001cf0c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001cf02:	b8 04 00 00 00       	mov    eax,0x4
c001cf07:	e9 c0 00 00 00       	jmp    c001cfcc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cf0c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001cf14:	75 0a                	jne    c001cf20 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001cf16:	b8 04 00 00 00       	mov    eax,0x4
c001cf1b:	e9 ac 00 00 00       	jmp    c001cfcc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cf20:	83 ec 08             	sub    esp,0x8
c001cf23:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001cf2a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001cf31:	50                   	push   eax
c001cf32:	e8 09 37 fe ff       	call   c0000640 <strcpy>
c001cf37:	83 c4 10             	add    esp,0x10
c001cf3a:	83 ec 08             	sub    esp,0x8
c001cf3d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001cf44:	50                   	push   eax
c001cf45:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001cf4c:	e8 27 fd ff ff       	call   c001cc78 <FAT::fixFilepath(char*)>
c001cf51:	83 c4 10             	add    esp,0x10
c001cf54:	83 ec 08             	sub    esp,0x8
c001cf57:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001cf5b:	50                   	push   eax
c001cf5c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001cf63:	50                   	push   eax
c001cf64:	e8 08 7a fe ff       	call   c0004971 <f_stat>
c001cf69:	83 c4 10             	add    esp,0x10
c001cf6c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001cf73:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001cf7a:	85 c0                	test   eax,eax
c001cf7c:	74 0a                	je     c001cf88 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001cf7e:	83 f8 04             	cmp    eax,0x4
c001cf81:	74 39                	je     c001cfbc <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001cf83:	eb 3f                	jmp    c001cfc4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001cf85:	8d 76 00             	lea    esi,[esi+0x0]
c001cf88:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001cf8c:	0f b6 c0             	movzx  eax,al
c001cf8f:	83 e0 10             	and    eax,0x10
c001cf92:	0f 95 c2             	setne  dl
c001cf95:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001cf9c:	88 10                	mov    BYTE PTR [eax],dl
c001cf9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cfa2:	ba 00 00 00 00       	mov    edx,0x0
c001cfa7:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001cfae:	89 01                	mov    DWORD PTR [ecx],eax
c001cfb0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001cfb3:	b8 00 00 00 00       	mov    eax,0x0
c001cfb8:	eb 12                	jmp    c001cfcc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cfba:	66 90                	xchg   ax,ax
c001cfbc:	b8 02 00 00 00       	mov    eax,0x2
c001cfc1:	eb 09                	jmp    c001cfcc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cfc3:	90                   	nop
c001cfc4:	b8 01 00 00 00       	mov    eax,0x1
c001cfc9:	8d 76 00             	lea    esi,[esi+0x0]
c001cfcc:	81 c4 2c 02 00 00    	add    esp,0x22c
c001cfd2:	c3                   	ret    
c001cfd3:	90                   	nop

c001cfd4 <FAT::unlink(char const*)>:
c001cfd4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cfda:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001cfe2:	75 08                	jne    c001cfec <FAT::unlink(char const*)+0x18>
c001cfe4:	b8 04 00 00 00       	mov    eax,0x4
c001cfe9:	eb 61                	jmp    c001d04c <FAT::unlink(char const*)+0x78>
c001cfeb:	90                   	nop
c001cfec:	83 ec 08             	sub    esp,0x8
c001cfef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cff6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cffa:	50                   	push   eax
c001cffb:	e8 40 36 fe ff       	call   c0000640 <strcpy>
c001d000:	83 c4 10             	add    esp,0x10
c001d003:	83 ec 08             	sub    esp,0x8
c001d006:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d00a:	50                   	push   eax
c001d00b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001d012:	e8 61 fc ff ff       	call   c001cc78 <FAT::fixFilepath(char*)>
c001d017:	83 c4 10             	add    esp,0x10
c001d01a:	83 ec 0c             	sub    esp,0xc
c001d01d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d021:	50                   	push   eax
c001d022:	e8 bc 7b fe ff       	call   c0004be3 <f_unlink>
c001d027:	83 c4 10             	add    esp,0x10
c001d02a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001d031:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001d038:	85 c0                	test   eax,eax
c001d03a:	75 08                	jne    c001d044 <FAT::unlink(char const*)+0x70>
c001d03c:	b8 00 00 00 00       	mov    eax,0x0
c001d041:	eb 09                	jmp    c001d04c <FAT::unlink(char const*)+0x78>
c001d043:	90                   	nop
c001d044:	b8 01 00 00 00       	mov    eax,0x1
c001d049:	8d 76 00             	lea    esi,[esi+0x0]
c001d04c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d052:	c3                   	ret    
c001d053:	90                   	nop

c001d054 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001d054:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001d05a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001d061:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001d068:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001d06c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d070:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001d078:	75 0a                	jne    c001d084 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001d07a:	b8 04 00 00 00       	mov    eax,0x4
c001d07f:	e9 7c 01 00 00       	jmp    c001d200 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001d084:	83 ec 08             	sub    esp,0x8
c001d087:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001d08e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001d092:	50                   	push   eax
c001d093:	e8 a8 35 fe ff       	call   c0000640 <strcpy>
c001d098:	83 c4 10             	add    esp,0x10
c001d09b:	83 ec 08             	sub    esp,0x8
c001d09e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d0a2:	50                   	push   eax
c001d0a3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001d0aa:	e8 c9 fb ff ff       	call   c001cc78 <FAT::fixFilepath(char*)>
c001d0af:	83 c4 10             	add    esp,0x10
c001d0b2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001d0ba:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001d0c2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d0c7:	83 e0 01             	and    eax,0x1
c001d0ca:	74 14                	je     c001d0e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001d0cc:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001d0d3:	83 c8 01             	or     eax,0x1
c001d0d6:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001d0dd:	8d 76 00             	lea    esi,[esi+0x0]
c001d0e0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d0e5:	83 e0 02             	and    eax,0x2
c001d0e8:	74 12                	je     c001d0fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001d0ea:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001d0f1:	83 c8 20             	or     eax,0x20
c001d0f4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001d0fb:	90                   	nop
c001d0fc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d101:	83 e0 04             	and    eax,0x4
c001d104:	74 12                	je     c001d118 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001d106:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001d10d:	83 c8 04             	or     eax,0x4
c001d110:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001d117:	90                   	nop
c001d118:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d11d:	83 e0 08             	and    eax,0x8
c001d120:	74 12                	je     c001d134 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001d122:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001d129:	83 c8 02             	or     eax,0x2
c001d12c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001d133:	90                   	nop
c001d134:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d139:	83 e0 01             	and    eax,0x1
c001d13c:	74 12                	je     c001d150 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001d13e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001d145:	83 c8 01             	or     eax,0x1
c001d148:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001d14f:	90                   	nop
c001d150:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d155:	83 e0 02             	and    eax,0x2
c001d158:	74 12                	je     c001d16c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001d15a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001d161:	83 c8 20             	or     eax,0x20
c001d164:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001d16b:	90                   	nop
c001d16c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d171:	83 e0 04             	and    eax,0x4
c001d174:	74 12                	je     c001d188 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001d176:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001d17d:	83 c8 04             	or     eax,0x4
c001d180:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001d187:	90                   	nop
c001d188:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d18d:	83 e0 08             	and    eax,0x8
c001d190:	74 12                	je     c001d1a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001d192:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001d199:	83 c8 02             	or     eax,0x2
c001d19c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001d1a3:	90                   	nop
c001d1a4:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001d1ab:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001d1b2:	09 d0                	or     eax,edx
c001d1b4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001d1bb:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001d1c3:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001d1cb:	83 ec 04             	sub    esp,0x4
c001d1ce:	52                   	push   edx
c001d1cf:	50                   	push   eax
c001d1d0:	8d 44 24 24          	lea    eax,[esp+0x24]
c001d1d4:	50                   	push   eax
c001d1d5:	e8 7e 7e fe ff       	call   c0005058 <f_chmod>
c001d1da:	83 c4 10             	add    esp,0x10
c001d1dd:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001d1e4:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001d1eb:	85 c0                	test   eax,eax
c001d1ed:	75 09                	jne    c001d1f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001d1ef:	b8 00 00 00 00       	mov    eax,0x0
c001d1f4:	eb 0a                	jmp    c001d200 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001d1f6:	66 90                	xchg   ax,ax
c001d1f8:	b8 01 00 00 00       	mov    eax,0x1
c001d1fd:	8d 76 00             	lea    esi,[esi+0x0]
c001d200:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d206:	c3                   	ret    
c001d207:	90                   	nop

c001d208 <FAT::rename(char const*, char const*)>:
c001d208:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001d20e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001d216:	74 0c                	je     c001d224 <FAT::rename(char const*, char const*)+0x1c>
c001d218:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001d220:	75 0e                	jne    c001d230 <FAT::rename(char const*, char const*)+0x28>
c001d222:	66 90                	xchg   ax,ax
c001d224:	b8 04 00 00 00       	mov    eax,0x4
c001d229:	e9 9e 00 00 00       	jmp    c001d2cc <FAT::rename(char const*, char const*)+0xc4>
c001d22e:	66 90                	xchg   ax,ax
c001d230:	83 ec 08             	sub    esp,0x8
c001d233:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001d23a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001d241:	50                   	push   eax
c001d242:	e8 f9 33 fe ff       	call   c0000640 <strcpy>
c001d247:	83 c4 10             	add    esp,0x10
c001d24a:	83 ec 08             	sub    esp,0x8
c001d24d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001d254:	50                   	push   eax
c001d255:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001d25c:	e8 17 fa ff ff       	call   c001cc78 <FAT::fixFilepath(char*)>
c001d261:	83 c4 10             	add    esp,0x10
c001d264:	83 ec 08             	sub    esp,0x8
c001d267:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001d26e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d272:	50                   	push   eax
c001d273:	e8 c8 33 fe ff       	call   c0000640 <strcpy>
c001d278:	83 c4 10             	add    esp,0x10
c001d27b:	83 ec 08             	sub    esp,0x8
c001d27e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d282:	50                   	push   eax
c001d283:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001d28a:	e8 e9 f9 ff ff       	call   c001cc78 <FAT::fixFilepath(char*)>
c001d28f:	83 c4 10             	add    esp,0x10
c001d292:	83 ec 08             	sub    esp,0x8
c001d295:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d299:	50                   	push   eax
c001d29a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001d2a1:	50                   	push   eax
c001d2a2:	e8 f9 7b fe ff       	call   c0004ea0 <f_rename>
c001d2a7:	83 c4 10             	add    esp,0x10
c001d2aa:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001d2b1:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001d2b8:	85 c0                	test   eax,eax
c001d2ba:	75 08                	jne    c001d2c4 <FAT::rename(char const*, char const*)+0xbc>
c001d2bc:	b8 00 00 00 00       	mov    eax,0x0
c001d2c1:	eb 09                	jmp    c001d2cc <FAT::rename(char const*, char const*)+0xc4>
c001d2c3:	90                   	nop
c001d2c4:	b8 01 00 00 00       	mov    eax,0x1
c001d2c9:	8d 76 00             	lea    esi,[esi+0x0]
c001d2cc:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d2d2:	c3                   	ret    
c001d2d3:	90                   	nop

c001d2d4 <FAT::mkdir(char const*)>:
c001d2d4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d2da:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001d2e2:	75 08                	jne    c001d2ec <FAT::mkdir(char const*)+0x18>
c001d2e4:	b8 04 00 00 00       	mov    eax,0x4
c001d2e9:	eb 61                	jmp    c001d34c <FAT::mkdir(char const*)+0x78>
c001d2eb:	90                   	nop
c001d2ec:	83 ec 08             	sub    esp,0x8
c001d2ef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001d2f6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d2fa:	50                   	push   eax
c001d2fb:	e8 40 33 fe ff       	call   c0000640 <strcpy>
c001d300:	83 c4 10             	add    esp,0x10
c001d303:	83 ec 08             	sub    esp,0x8
c001d306:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d30a:	50                   	push   eax
c001d30b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001d312:	e8 61 f9 ff ff       	call   c001cc78 <FAT::fixFilepath(char*)>
c001d317:	83 c4 10             	add    esp,0x10
c001d31a:	83 ec 0c             	sub    esp,0xc
c001d31d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d321:	50                   	push   eax
c001d322:	e8 de 79 fe ff       	call   c0004d05 <f_mkdir>
c001d327:	83 c4 10             	add    esp,0x10
c001d32a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001d331:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001d338:	85 c0                	test   eax,eax
c001d33a:	75 08                	jne    c001d344 <FAT::mkdir(char const*)+0x70>
c001d33c:	b8 00 00 00 00       	mov    eax,0x0
c001d341:	eb 09                	jmp    c001d34c <FAT::mkdir(char const*)+0x78>
c001d343:	90                   	nop
c001d344:	b8 01 00 00 00       	mov    eax,0x1
c001d349:	8d 76 00             	lea    esi,[esi+0x0]
c001d34c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d352:	c3                   	ret    
c001d353:	90                   	nop

c001d354 <FAT::exists(char const*)>:
c001d354:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001d35a:	83 ec 08             	sub    esp,0x8
c001d35d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001d364:	8d 44 24 10          	lea    eax,[esp+0x10]
c001d368:	50                   	push   eax
c001d369:	e8 d2 32 fe ff       	call   c0000640 <strcpy>
c001d36e:	83 c4 10             	add    esp,0x10
c001d371:	83 ec 08             	sub    esp,0x8
c001d374:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001d378:	50                   	push   eax
c001d379:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001d380:	e8 f3 f8 ff ff       	call   c001cc78 <FAT::fixFilepath(char*)>
c001d385:	83 c4 10             	add    esp,0x10
c001d388:	83 ec 08             	sub    esp,0x8
c001d38b:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001d392:	50                   	push   eax
c001d393:	8d 44 24 10          	lea    eax,[esp+0x10]
c001d397:	50                   	push   eax
c001d398:	e8 d4 75 fe ff       	call   c0004971 <f_stat>
c001d39d:	83 c4 10             	add    esp,0x10
c001d3a0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001d3a7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001d3ae:	85 c0                	test   eax,eax
c001d3b0:	75 06                	jne    c001d3b8 <FAT::exists(char const*)+0x64>
c001d3b2:	b0 01                	mov    al,0x1
c001d3b4:	eb 06                	jmp    c001d3bc <FAT::exists(char const*)+0x68>
c001d3b6:	66 90                	xchg   ax,ax
c001d3b8:	b0 00                	mov    al,0x0
c001d3ba:	66 90                	xchg   ax,ax
c001d3bc:	81 c4 2c 02 00 00    	add    esp,0x22c
c001d3c2:	c3                   	ret    
c001d3c3:	90                   	nop

c001d3c4 <isoReadDiscSectorHelper>:
c001d3c4:	83 ec 2c             	sub    esp,0x2c
c001d3c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d3cb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d3cf:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001d3d4:	83 e8 41             	sub    eax,0x41
c001d3d7:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c001d3de:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d3e2:	ba 00 00 00 00       	mov    edx,0x0
c001d3e7:	83 ec 0c             	sub    esp,0xc
c001d3ea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d3ee:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d3f2:	52                   	push   edx
c001d3f3:	50                   	push   eax
c001d3f4:	51                   	push   ecx
c001d3f5:	e8 ae d6 fe ff       	call   c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>
c001d3fa:	83 c4 20             	add    esp,0x20
c001d3fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d401:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001d406:	74 0c                	je     c001d414 <isoReadDiscSectorHelper+0x50>
c001d408:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d40c:	c1 e0 0b             	shl    eax,0xb
c001d40f:	eb 0b                	jmp    c001d41c <isoReadDiscSectorHelper+0x58>
c001d411:	8d 76 00             	lea    esi,[esi+0x0]
c001d414:	b8 00 00 00 00       	mov    eax,0x0
c001d419:	8d 76 00             	lea    esi,[esi+0x0]
c001d41c:	83 c4 2c             	add    esp,0x2c
c001d41f:	c3                   	ret    

c001d420 <iso_kprintf>:
c001d420:	83 ec 0c             	sub    esp,0xc
c001d423:	83 ec 08             	sub    esp,0x8
c001d426:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d42a:	68 58 5c 02 c0       	push   0xc0025c58
c001d42f:	e8 48 9b fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d434:	83 c4 10             	add    esp,0x10
c001d437:	90                   	nop
c001d438:	83 c4 0c             	add    esp,0xc
c001d43b:	c3                   	ret    

c001d43c <iso_kprintfd>:
c001d43c:	83 ec 0c             	sub    esp,0xc
c001d43f:	83 ec 08             	sub    esp,0x8
c001d442:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d446:	68 91 51 02 c0       	push   0xc0025191
c001d44b:	e8 2c 9b fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d450:	83 c4 10             	add    esp,0x10
c001d453:	90                   	nop
c001d454:	83 c4 0c             	add    esp,0xc
c001d457:	c3                   	ret    

c001d458 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001d458:	b8 08 00 00 00       	mov    eax,0x8
c001d45d:	c3                   	ret    

c001d45e <ISO9660::truncate(void*, unsigned long long)>:
c001d45e:	b8 01 00 00 00       	mov    eax,0x1
c001d463:	c3                   	ret    

c001d464 <ISO9660::getName()>:
c001d464:	b8 e4 5f 02 c0       	mov    eax,0xc0025fe4
c001d469:	c3                   	ret    

c001d46a <ISO9660::closeDir(void*)>:
c001d46a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d46e:	8b 00                	mov    eax,DWORD PTR [eax]
c001d470:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001d473:	90                   	nop

c001d474 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001d474:	b8 01 00 00 00       	mov    eax,0x1
c001d479:	c3                   	ret    

c001d47a <ISO9660::unlink(char const*)>:
c001d47a:	b8 01 00 00 00       	mov    eax,0x1
c001d47f:	c3                   	ret    

c001d480 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001d480:	b8 03 00 00 00       	mov    eax,0x3
c001d485:	c3                   	ret    

c001d486 <ISO9660::rename(char const*, char const*)>:
c001d486:	b8 01 00 00 00       	mov    eax,0x1
c001d48b:	c3                   	ret    

c001d48c <ISO9660::mkdir(char const*)>:
c001d48c:	b8 01 00 00 00       	mov    eax,0x1
c001d491:	c3                   	ret    

c001d492 <ISO9660::~ISO9660()>:
c001d492:	83 ec 0c             	sub    esp,0xc
c001d495:	ba 24 61 02 c0       	mov    edx,0xc0026124
c001d49a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d49e:	89 10                	mov    DWORD PTR [eax],edx
c001d4a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4a4:	83 ec 0c             	sub    esp,0xc
c001d4a7:	50                   	push   eax
c001d4a8:	e8 3f a9 fe ff       	call   c0007dec <Filesystem::~Filesystem()>
c001d4ad:	83 c4 10             	add    esp,0x10
c001d4b0:	90                   	nop
c001d4b1:	83 c4 0c             	add    esp,0xc
c001d4b4:	c3                   	ret    
c001d4b5:	90                   	nop

c001d4b6 <ISO9660::~ISO9660()>:
c001d4b6:	83 ec 0c             	sub    esp,0xc
c001d4b9:	83 ec 0c             	sub    esp,0xc
c001d4bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4c0:	e8 cd ff ff ff       	call   c001d492 <ISO9660::~ISO9660()>
c001d4c5:	83 c4 10             	add    esp,0x10
c001d4c8:	83 ec 08             	sub    esp,0x8
c001d4cb:	6a 08                	push   0x8
c001d4cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4d1:	e8 a6 fd fe ff       	call   c000d27c <operator delete(void*, unsigned long)>
c001d4d6:	83 c4 10             	add    esp,0x10
c001d4d9:	83 c4 0c             	add    esp,0xc
c001d4dc:	c3                   	ret    
c001d4dd:	90                   	nop

c001d4de <ISO9660::exists(char const*)>:
c001d4de:	83 ec 18             	sub    esp,0x18
c001d4e1:	68 ff 5f 02 c0       	push   0xc0025fff
c001d4e6:	e8 d5 26 ff ff       	call   c000fbc0 <KePanic(char const*)>
c001d4eb:	31 c0                	xor    eax,eax
c001d4ed:	83 c4 1c             	add    esp,0x1c
c001d4f0:	c3                   	ret    
c001d4f1:	90                   	nop

c001d4f2 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001d4f2:	56                   	push   esi
c001d4f3:	53                   	push   ebx
c001d4f4:	53                   	push   ebx
c001d4f5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d4f9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d4fd:	85 db                	test   ebx,ebx
c001d4ff:	0f 84 ca 00 00 00    	je     c001d5cf <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001d505:	85 f6                	test   esi,esi
c001d507:	0f 84 c2 00 00 00    	je     c001d5cf <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001d50d:	b8 03 00 00 00       	mov    eax,0x3
c001d512:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001d517:	0f 85 b7 00 00 00    	jne    c001d5d4 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d51d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001d51f:	0f be 05 c0 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fcc0
c001d526:	38 0d c0 fc 02 c0    	cmp    BYTE PTR ds:0xc002fcc0,cl
c001d52c:	74 1b                	je     c001d549 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001d52e:	85 c0                	test   eax,eax
c001d530:	74 10                	je     c001d542 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001d532:	83 ec 0c             	sub    esp,0xc
c001d535:	68 1d 60 02 c0       	push   0xc002601d
c001d53a:	e8 81 26 ff ff       	call   c000fbc0 <KePanic(char const*)>
c001d53f:	83 c4 10             	add    esp,0x10
c001d542:	8a 03                	mov    al,BYTE PTR [ebx]
c001d544:	a2 c0 fc 02 c0       	mov    ds:0xc002fcc0,al
c001d549:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d54c:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d553:	85 c0                	test   eax,eax
c001d555:	74 09                	je     c001d560 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001d557:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d55e:	74 48                	je     c001d5a8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001d560:	83 ec 0c             	sub    esp,0xc
c001d563:	68 2d 60 02 c0       	push   0xc002602d
c001d568:	e8 0f 9a fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d56d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d570:	83 c4 10             	add    esp,0x10
c001d573:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d57a:	85 c0                	test   eax,eax
c001d57c:	74 17                	je     c001d595 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001d57e:	83 ec 0c             	sub    esp,0xc
c001d581:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d588:	68 4d 60 02 c0       	push   0xc002604d
c001d58d:	e8 ea 99 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d592:	83 c4 10             	add    esp,0x10
c001d595:	83 ec 0c             	sub    esp,0xc
c001d598:	0f be 05 c0 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fcc0
c001d59f:	50                   	push   eax
c001d5a0:	e8 89 96 fe ff       	call   c0006c2e <init_percd>
c001d5a5:	83 c4 10             	add    esp,0x10
c001d5a8:	83 c3 03             	add    ebx,0x3
c001d5ab:	51                   	push   ecx
c001d5ac:	51                   	push   ecx
c001d5ad:	6a 00                	push   0x0
c001d5af:	53                   	push   ebx
c001d5b0:	e8 40 91 fe ff       	call   c00066f5 <iso_open>
c001d5b5:	83 c4 10             	add    esp,0x10
c001d5b8:	89 c2                	mov    edx,eax
c001d5ba:	b8 01 00 00 00       	mov    eax,0x1
c001d5bf:	83 fa ff             	cmp    edx,0xffffffff
c001d5c2:	74 10                	je     c001d5d4 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d5c4:	83 c2 32             	add    edx,0x32
c001d5c7:	31 c0                	xor    eax,eax
c001d5c9:	01 d2                	add    edx,edx
c001d5cb:	89 16                	mov    DWORD PTR [esi],edx
c001d5cd:	eb 05                	jmp    c001d5d4 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d5cf:	b8 04 00 00 00       	mov    eax,0x4
c001d5d4:	5a                   	pop    edx
c001d5d5:	5b                   	pop    ebx
c001d5d6:	5e                   	pop    esi
c001d5d7:	c3                   	ret    

c001d5d8 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001d5d8:	53                   	push   ebx
c001d5d9:	83 ec 08             	sub    esp,0x8
c001d5dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d5e0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d5e4:	85 c0                	test   eax,eax
c001d5e6:	74 2d                	je     c001d615 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001d5e8:	85 db                	test   ebx,ebx
c001d5ea:	74 29                	je     c001d615 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001d5ec:	b9 02 00 00 00       	mov    ecx,0x2
c001d5f1:	52                   	push   edx
c001d5f2:	99                   	cdq    
c001d5f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d5f7:	f7 f9                	idiv   ecx
c001d5f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d5fd:	83 e8 32             	sub    eax,0x32
c001d600:	50                   	push   eax
c001d601:	e8 97 91 fe ff       	call   c000679d <iso_read>
c001d606:	83 c4 10             	add    esp,0x10
c001d609:	89 03                	mov    DWORD PTR [ebx],eax
c001d60b:	09 d0                	or     eax,edx
c001d60d:	0f 94 c0             	sete   al
c001d610:	0f b6 c0             	movzx  eax,al
c001d613:	eb 05                	jmp    c001d61a <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001d615:	b8 04 00 00 00       	mov    eax,0x4
c001d61a:	83 c4 08             	add    esp,0x8
c001d61d:	5b                   	pop    ebx
c001d61e:	c3                   	ret    
c001d61f:	90                   	nop

c001d620 <ISO9660::seek(void*, unsigned long long)>:
c001d620:	57                   	push   edi
c001d621:	56                   	push   esi
c001d622:	b8 04 00 00 00       	mov    eax,0x4
c001d627:	51                   	push   ecx
c001d628:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d62c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d630:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d634:	85 d2                	test   edx,edx
c001d636:	74 26                	je     c001d65e <ISO9660::seek(void*, unsigned long long)+0x3e>
c001d638:	6a 00                	push   0x0
c001d63a:	b9 02 00 00 00       	mov    ecx,0x2
c001d63f:	57                   	push   edi
c001d640:	89 d0                	mov    eax,edx
c001d642:	56                   	push   esi
c001d643:	99                   	cdq    
c001d644:	f7 f9                	idiv   ecx
c001d646:	83 e8 32             	sub    eax,0x32
c001d649:	50                   	push   eax
c001d64a:	e8 64 92 fe ff       	call   c00068b3 <iso_seek>
c001d64f:	83 c4 10             	add    esp,0x10
c001d652:	31 f0                	xor    eax,esi
c001d654:	31 fa                	xor    edx,edi
c001d656:	09 d0                	or     eax,edx
c001d658:	0f 95 c0             	setne  al
c001d65b:	0f b6 c0             	movzx  eax,al
c001d65e:	5a                   	pop    edx
c001d65f:	5e                   	pop    esi
c001d660:	5f                   	pop    edi
c001d661:	c3                   	ret    

c001d662 <ISO9660::tell(void*, unsigned long long*)>:
c001d662:	53                   	push   ebx
c001d663:	83 ec 08             	sub    esp,0x8
c001d666:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d66a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d66e:	85 c0                	test   eax,eax
c001d670:	74 24                	je     c001d696 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001d672:	85 db                	test   ebx,ebx
c001d674:	74 20                	je     c001d696 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001d676:	83 ec 0c             	sub    esp,0xc
c001d679:	b9 02 00 00 00       	mov    ecx,0x2
c001d67e:	99                   	cdq    
c001d67f:	f7 f9                	idiv   ecx
c001d681:	83 e8 32             	sub    eax,0x32
c001d684:	50                   	push   eax
c001d685:	e8 ad 92 fe ff       	call   c0006937 <iso_tell>
c001d68a:	83 c4 10             	add    esp,0x10
c001d68d:	89 03                	mov    DWORD PTR [ebx],eax
c001d68f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001d692:	31 c0                	xor    eax,eax
c001d694:	eb 05                	jmp    c001d69b <ISO9660::tell(void*, unsigned long long*)+0x39>
c001d696:	b8 04 00 00 00       	mov    eax,0x4
c001d69b:	83 c4 08             	add    esp,0x8
c001d69e:	5b                   	pop    ebx
c001d69f:	c3                   	ret    

c001d6a0 <ISO9660::stat(void*, unsigned long long*)>:
c001d6a0:	53                   	push   ebx
c001d6a1:	83 ec 14             	sub    esp,0x14
c001d6a4:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d6a8:	68 71 60 02 c0       	push   0xc0026071
c001d6ad:	e8 ca 98 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d6b2:	83 c4 10             	add    esp,0x10
c001d6b5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001d6ba:	74 2c                	je     c001d6e8 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001d6bc:	85 db                	test   ebx,ebx
c001d6be:	74 28                	je     c001d6e8 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001d6c0:	83 ec 0c             	sub    esp,0xc
c001d6c3:	b9 02 00 00 00       	mov    ecx,0x2
c001d6c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6cc:	99                   	cdq    
c001d6cd:	f7 f9                	idiv   ecx
c001d6cf:	83 e8 32             	sub    eax,0x32
c001d6d2:	50                   	push   eax
c001d6d3:	e8 90 92 fe ff       	call   c0006968 <iso_total>
c001d6d8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d6df:	89 03                	mov    DWORD PTR [ebx],eax
c001d6e1:	83 c4 10             	add    esp,0x10
c001d6e4:	31 c0                	xor    eax,eax
c001d6e6:	eb 05                	jmp    c001d6ed <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001d6e8:	b8 04 00 00 00       	mov    eax,0x4
c001d6ed:	83 c4 08             	add    esp,0x8
c001d6f0:	5b                   	pop    ebx
c001d6f1:	c3                   	ret    

c001d6f2 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001d6f2:	55                   	push   ebp
c001d6f3:	57                   	push   edi
c001d6f4:	56                   	push   esi
c001d6f5:	53                   	push   ebx
c001d6f6:	83 ec 18             	sub    esp,0x18
c001d6f9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d6fd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d701:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d705:	68 79 60 02 c0       	push   0xc0026079
c001d70a:	e8 6d 98 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d70f:	83 c4 10             	add    esp,0x10
c001d712:	85 ff                	test   edi,edi
c001d714:	0f 94 c0             	sete   al
c001d717:	85 f6                	test   esi,esi
c001d719:	0f 94 c2             	sete   dl
c001d71c:	09 d0                	or     eax,edx
c001d71e:	a8 01                	test   al,0x1
c001d720:	0f 85 dd 00 00 00    	jne    c001d803 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001d726:	85 db                	test   ebx,ebx
c001d728:	0f 84 d5 00 00 00    	je     c001d803 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001d72e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001d731:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001d737:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001d73e:	0f be 05 c0 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fcc0
c001d745:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001d747:	38 0d c0 fc 02 c0    	cmp    BYTE PTR ds:0xc002fcc0,cl
c001d74d:	74 1b                	je     c001d76a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001d74f:	85 c0                	test   eax,eax
c001d751:	74 10                	je     c001d763 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001d753:	83 ec 0c             	sub    esp,0xc
c001d756:	68 1d 60 02 c0       	push   0xc002601d
c001d75b:	e8 60 24 ff ff       	call   c000fbc0 <KePanic(char const*)>
c001d760:	83 c4 10             	add    esp,0x10
c001d763:	8a 03                	mov    al,BYTE PTR [ebx]
c001d765:	a2 c0 fc 02 c0       	mov    ds:0xc002fcc0,al
c001d76a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d76d:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d774:	85 c0                	test   eax,eax
c001d776:	74 09                	je     c001d781 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001d778:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d77f:	74 51                	je     c001d7d2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001d781:	83 ec 0c             	sub    esp,0xc
c001d784:	68 81 60 02 c0       	push   0xc0026081
c001d789:	e8 ee 97 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d78e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d791:	83 c4 10             	add    esp,0x10
c001d794:	83 3c 85 dc c9 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd3624],0x0
c001d79c:	74 21                	je     c001d7bf <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001d79e:	83 ec 0c             	sub    esp,0xc
c001d7a1:	68 a1 60 02 c0       	push   0xc00260a1
c001d7a6:	e8 d1 97 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d7ab:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d7ae:	83 c4 10             	add    esp,0x10
c001d7b1:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d7b8:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d7bf:	83 ec 0c             	sub    esp,0xc
c001d7c2:	0f be 05 c0 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fcc0
c001d7c9:	50                   	push   eax
c001d7ca:	e8 5f 94 fe ff       	call   c0006c2e <init_percd>
c001d7cf:	83 c4 10             	add    esp,0x10
c001d7d2:	83 c3 03             	add    ebx,0x3
c001d7d5:	52                   	push   edx
c001d7d6:	52                   	push   edx
c001d7d7:	6a 00                	push   0x0
c001d7d9:	53                   	push   ebx
c001d7da:	e8 16 8f fe ff       	call   c00066f5 <iso_open>
c001d7df:	83 c4 10             	add    esp,0x10
c001d7e2:	89 c5                	mov    ebp,eax
c001d7e4:	83 f8 ff             	cmp    eax,0xffffffff
c001d7e7:	75 21                	jne    c001d80a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001d7e9:	50                   	push   eax
c001d7ea:	50                   	push   eax
c001d7eb:	6a 01                	push   0x1
c001d7ed:	53                   	push   ebx
c001d7ee:	e8 02 8f fe ff       	call   c00066f5 <iso_open>
c001d7f3:	83 c4 10             	add    esp,0x10
c001d7f6:	ba 02 00 00 00       	mov    edx,0x2
c001d7fb:	40                   	inc    eax
c001d7fc:	74 2b                	je     c001d829 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001d7fe:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001d801:	eb 24                	jmp    c001d827 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001d803:	ba 04 00 00 00       	mov    edx,0x4
c001d808:	eb 1f                	jmp    c001d829 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001d80a:	83 ec 0c             	sub    esp,0xc
c001d80d:	50                   	push   eax
c001d80e:	e8 55 91 fe ff       	call   c0006968 <iso_total>
c001d813:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001d81a:	89 07                	mov    DWORD PTR [edi],eax
c001d81c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d81f:	e8 5b 8f fe ff       	call   c000677f <iso_close>
c001d824:	83 c4 10             	add    esp,0x10
c001d827:	31 d2                	xor    edx,edx
c001d829:	83 c4 0c             	add    esp,0xc
c001d82c:	89 d0                	mov    eax,edx
c001d82e:	5b                   	pop    ebx
c001d82f:	5e                   	pop    esi
c001d830:	5f                   	pop    edi
c001d831:	5d                   	pop    ebp
c001d832:	c3                   	ret    
c001d833:	90                   	nop

c001d834 <ISO9660::close(void*)>:
c001d834:	83 ec 0c             	sub    esp,0xc
c001d837:	b8 04 00 00 00       	mov    eax,0x4
c001d83c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d840:	85 d2                	test   edx,edx
c001d842:	74 1b                	je     c001d85f <ISO9660::close(void*)+0x2b>
c001d844:	83 ec 0c             	sub    esp,0xc
c001d847:	b9 02 00 00 00       	mov    ecx,0x2
c001d84c:	89 d0                	mov    eax,edx
c001d84e:	99                   	cdq    
c001d84f:	f7 f9                	idiv   ecx
c001d851:	83 e8 32             	sub    eax,0x32
c001d854:	50                   	push   eax
c001d855:	e8 25 8f fe ff       	call   c000677f <iso_close>
c001d85a:	83 c4 10             	add    esp,0x10
c001d85d:	31 c0                	xor    eax,eax
c001d85f:	83 c4 0c             	add    esp,0xc
c001d862:	c3                   	ret    
c001d863:	90                   	nop

c001d864 <ISO9660::openDir(char const*, void**)>:
c001d864:	56                   	push   esi
c001d865:	53                   	push   ebx
c001d866:	50                   	push   eax
c001d867:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d86b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d86f:	85 db                	test   ebx,ebx
c001d871:	0f 84 bd 00 00 00    	je     c001d934 <ISO9660::openDir(char const*, void**)+0xd0>
c001d877:	85 f6                	test   esi,esi
c001d879:	0f 84 b5 00 00 00    	je     c001d934 <ISO9660::openDir(char const*, void**)+0xd0>
c001d87f:	8a 13                	mov    dl,BYTE PTR [ebx]
c001d881:	0f be 05 c0 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fcc0
c001d888:	38 15 c0 fc 02 c0    	cmp    BYTE PTR ds:0xc002fcc0,dl
c001d88e:	74 1b                	je     c001d8ab <ISO9660::openDir(char const*, void**)+0x47>
c001d890:	85 c0                	test   eax,eax
c001d892:	74 10                	je     c001d8a4 <ISO9660::openDir(char const*, void**)+0x40>
c001d894:	83 ec 0c             	sub    esp,0xc
c001d897:	68 1d 60 02 c0       	push   0xc002601d
c001d89c:	e8 1f 23 ff ff       	call   c000fbc0 <KePanic(char const*)>
c001d8a1:	83 c4 10             	add    esp,0x10
c001d8a4:	8a 03                	mov    al,BYTE PTR [ebx]
c001d8a6:	a2 c0 fc 02 c0       	mov    ds:0xc002fcc0,al
c001d8ab:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d8ae:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d8b5:	85 c0                	test   eax,eax
c001d8b7:	74 10                	je     c001d8c9 <ISO9660::openDir(char const*, void**)+0x65>
c001d8b9:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d8c0:	74 1a                	je     c001d8dc <ISO9660::openDir(char const*, void**)+0x78>
c001d8c2:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d8c9:	83 ec 0c             	sub    esp,0xc
c001d8cc:	0f be 05 c0 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fcc0
c001d8d3:	50                   	push   eax
c001d8d4:	e8 55 93 fe ff       	call   c0006c2e <init_percd>
c001d8d9:	83 c4 10             	add    esp,0x10
c001d8dc:	83 c3 03             	add    ebx,0x3
c001d8df:	50                   	push   eax
c001d8e0:	50                   	push   eax
c001d8e1:	6a 01                	push   0x1
c001d8e3:	53                   	push   ebx
c001d8e4:	e8 0c 8e fe ff       	call   c00066f5 <iso_open>
c001d8e9:	83 c4 10             	add    esp,0x10
c001d8ec:	89 c3                	mov    ebx,eax
c001d8ee:	83 f8 ff             	cmp    eax,0xffffffff
c001d8f1:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c001d8f6:	75 1c                	jne    c001d914 <ISO9660::openDir(char const*, void**)+0xb0>
c001d8f8:	53                   	push   ebx
c001d8f9:	53                   	push   ebx
c001d8fa:	68 c5 60 02 c0       	push   0xc00260c5
c001d8ff:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d905:	e8 be 4c ff ff       	call   c00125c8 <VgaText::puts(char const*)>
c001d90a:	83 c4 10             	add    esp,0x10
c001d90d:	b8 01 00 00 00       	mov    eax,0x1
c001d912:	eb 25                	jmp    c001d939 <ISO9660::openDir(char const*, void**)+0xd5>
c001d914:	01 db                	add    ebx,ebx
c001d916:	51                   	push   ecx
c001d917:	83 c3 65             	add    ebx,0x65
c001d91a:	51                   	push   ecx
c001d91b:	68 d8 60 02 c0       	push   0xc00260d8
c001d920:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d926:	e8 9d 4c ff ff       	call   c00125c8 <VgaText::puts(char const*)>
c001d92b:	89 1e                	mov    DWORD PTR [esi],ebx
c001d92d:	83 c4 10             	add    esp,0x10
c001d930:	31 c0                	xor    eax,eax
c001d932:	eb 05                	jmp    c001d939 <ISO9660::openDir(char const*, void**)+0xd5>
c001d934:	b8 04 00 00 00       	mov    eax,0x4
c001d939:	5a                   	pop    edx
c001d93a:	5b                   	pop    ebx
c001d93b:	5e                   	pop    esi
c001d93c:	c3                   	ret    
c001d93d:	90                   	nop

c001d93e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001d93e:	55                   	push   ebp
c001d93f:	57                   	push   edi
c001d940:	56                   	push   esi
c001d941:	53                   	push   ebx
c001d942:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d948:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001d94f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001d956:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001d95e:	0f 84 e7 00 00 00    	je     c001da4b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001d964:	85 db                	test   ebx,ebx
c001d966:	0f 84 df 00 00 00    	je     c001da4b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001d96c:	83 ec 0c             	sub    esp,0xc
c001d96f:	68 eb 60 02 c0       	push   0xc00260eb
c001d974:	e8 03 96 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d979:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001d980:	b9 02 00 00 00       	mov    ecx,0x2
c001d985:	99                   	cdq    
c001d986:	f7 f9                	idiv   ecx
c001d988:	83 e8 32             	sub    eax,0x32
c001d98b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d98e:	e8 27 90 fe ff       	call   c00069ba <iso_readdir>
c001d993:	83 c4 10             	add    esp,0x10
c001d996:	89 c6                	mov    esi,eax
c001d998:	85 c0                	test   eax,eax
c001d99a:	75 37                	jne    c001d9d3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001d99c:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c001d9a1:	56                   	push   esi
c001d9a2:	56                   	push   esi
c001d9a3:	68 f6 60 02 c0       	push   0xc00260f6
c001d9a8:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d9ae:	e8 15 4c ff ff       	call   c00125c8 <VgaText::puts(char const*)>
c001d9b3:	83 c4 0c             	add    esp,0xc
c001d9b6:	68 10 01 00 00       	push   0x110
c001d9bb:	6a 00                	push   0x0
c001d9bd:	57                   	push   edi
c001d9be:	e8 2d 2b fe ff       	call   c00004f0 <memset>
c001d9c3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d9c9:	83 c4 10             	add    esp,0x10
c001d9cc:	b8 01 00 00 00       	mov    eax,0x1
c001d9d1:	eb 7d                	jmp    c001da50 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001d9d3:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001d9d9:	8d 68 08             	lea    ebp,[eax+0x8]
c001d9dc:	83 ec 0c             	sub    esp,0xc
c001d9df:	55                   	push   ebp
c001d9e0:	e8 8b 2b fe ff       	call   c0000570 <strlen>
c001d9e5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d9ed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d9f1:	83 c4 10             	add    esp,0x10
c001d9f4:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001d9f8:	75 0a                	jne    c001da04 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001d9fa:	b8 02 00 00 00       	mov    eax,0x2
c001d9ff:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001da02:	74 05                	je     c001da09 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001da04:	b8 01 00 00 00       	mov    eax,0x1
c001da09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001da0d:	50                   	push   eax
c001da0e:	50                   	push   eax
c001da0f:	55                   	push   ebp
c001da10:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001da14:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001da18:	50                   	push   eax
c001da19:	e8 22 2c fe ff       	call   c0000640 <strcpy>
c001da1e:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001da25:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001da27:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001da2d:	5a                   	pop    edx
c001da2e:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c001da33:	59                   	pop    ecx
c001da34:	68 09 61 02 c0       	push   0xc0026109
c001da39:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001da3f:	e8 84 4b ff ff       	call   c00125c8 <VgaText::puts(char const*)>
c001da44:	83 c4 10             	add    esp,0x10
c001da47:	31 c0                	xor    eax,eax
c001da49:	eb 05                	jmp    c001da50 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001da4b:	b8 04 00 00 00       	mov    eax,0x4
c001da50:	81 c4 1c 01 00 00    	add    esp,0x11c
c001da56:	5b                   	pop    ebx
c001da57:	5e                   	pop    esi
c001da58:	5f                   	pop    edi
c001da59:	5d                   	pop    ebp
c001da5a:	c3                   	ret    

c001da5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001da5b:	57                   	push   edi
c001da5c:	56                   	push   esi
c001da5d:	53                   	push   ebx
c001da5e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da62:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001da66:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001da6a:	39 35 c4 fc 02 c0    	cmp    DWORD PTR ds:0xc002fcc4,esi
c001da70:	0f be cb             	movsx  ecx,bl
c001da73:	75 0b                	jne    c001da80 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001da75:	0f be 05 84 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027384
c001da7c:	39 c8                	cmp    eax,ecx
c001da7e:	74 47                	je     c001dac7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001da80:	83 ec 0c             	sub    esp,0xc
c001da83:	31 d2                	xor    edx,edx
c001da85:	68 e0 fc 02 c0       	push   0xc002fce0
c001da8a:	6a 01                	push   0x1
c001da8c:	52                   	push   edx
c001da8d:	56                   	push   esi
c001da8e:	ff 34 8d dc c9 02 c0 	push   DWORD PTR [ecx*4-0x3ffd3624]
c001da95:	e8 0e d0 fe ff       	call   c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>
c001da9a:	83 c4 20             	add    esp,0x20
c001da9d:	85 c0                	test   eax,eax
c001da9f:	75 0e                	jne    c001daaf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001daa1:	89 35 c4 fc 02 c0    	mov    DWORD PTR ds:0xc002fcc4,esi
c001daa7:	88 1d 84 73 02 c0    	mov    BYTE PTR ds:0xc0027384,bl
c001daad:	eb 18                	jmp    c001dac7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001daaf:	50                   	push   eax
c001dab0:	68 00 08 00 00       	push   0x800
c001dab5:	6a 00                	push   0x0
c001dab7:	57                   	push   edi
c001dab8:	e8 33 2a fe ff       	call   c00004f0 <memset>
c001dabd:	83 c4 10             	add    esp,0x10
c001dac0:	b8 01 00 00 00       	mov    eax,0x1
c001dac5:	eb 0e                	jmp    c001dad5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001dac7:	be e0 fc 02 c0       	mov    esi,0xc002fce0
c001dacc:	b9 00 08 00 00       	mov    ecx,0x800
c001dad1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dad3:	31 c0                	xor    eax,eax
c001dad5:	5b                   	pop    ebx
c001dad6:	5e                   	pop    esi
c001dad7:	5f                   	pop    edi
c001dad8:	c3                   	ret    
c001dad9:	90                   	nop

c001dada <ISO9660::tryMount(LogicalDisk*, int)>:
c001dada:	53                   	push   ebx
c001dadb:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001dae1:	c7 05 c4 fc 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002fcc4,0xdeadbeef
c001daeb:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001daf2:	8d 58 41             	lea    ebx,[eax+0x41]
c001daf5:	0f be db             	movsx  ebx,bl
c001daf8:	53                   	push   ebx
c001daf9:	8d 44 24 08          	lea    eax,[esp+0x8]
c001dafd:	50                   	push   eax
c001dafe:	6a 10                	push   0x10
c001db00:	e8 56 ff ff ff       	call   c001da5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001db05:	83 c4 10             	add    esp,0x10
c001db08:	31 d2                	xor    edx,edx
c001db0a:	85 c0                	test   eax,eax
c001db0c:	75 33                	jne    c001db41 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001db0e:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001db13:	75 2c                	jne    c001db41 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001db15:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001db1a:	75 25                	jne    c001db41 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001db1c:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001db21:	75 1e                	jne    c001db41 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001db23:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001db28:	75 17                	jne    c001db41 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001db2a:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001db2f:	75 10                	jne    c001db41 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001db31:	83 ec 0c             	sub    esp,0xc
c001db34:	53                   	push   ebx
c001db35:	e8 f4 90 fe ff       	call   c0006c2e <init_percd>
c001db3a:	83 c4 10             	add    esp,0x10
c001db3d:	40                   	inc    eax
c001db3e:	0f 95 c2             	setne  dl
c001db41:	88 d0                	mov    al,dl
c001db43:	81 c4 08 08 00 00    	add    esp,0x808
c001db49:	5b                   	pop    ebx
c001db4a:	c3                   	ret    
c001db4b:	90                   	nop

c001db4c <ISO9660::ISO9660()>:
c001db4c:	83 ec 0c             	sub    esp,0xc
c001db4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db53:	83 ec 0c             	sub    esp,0xc
c001db56:	50                   	push   eax
c001db57:	e8 6c a2 fe ff       	call   c0007dc8 <Filesystem::Filesystem()>
c001db5c:	83 c4 10             	add    esp,0x10
c001db5f:	ba 24 61 02 c0       	mov    edx,0xc0026124
c001db64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db68:	89 10                	mov    DWORD PTR [eax],edx
c001db6a:	e8 d1 91 fe ff       	call   c0006d40 <fs_iso9660_init>
c001db6f:	90                   	nop
c001db70:	83 c4 0c             	add    esp,0xc
c001db73:	c3                   	ret    

c001db74 <SoundCard::beginPlayback()>:
c001db74:	c7 44 24 04 88 61 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026188
c001db7c:	e9 3f 20 ff ff       	jmp    c000fbc0 <KePanic(char const*)>
c001db81:	90                   	nop

c001db82 <SoundCard::stopPlayback()>:
c001db82:	c7 44 24 04 88 61 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026188
c001db8a:	e9 31 20 ff ff       	jmp    c000fbc0 <KePanic(char const*)>
c001db8f:	90                   	nop

c001db90 <SoundCard::SoundCard(char const*)>:
c001db90:	83 ec 1c             	sub    esp,0x1c
c001db93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db97:	83 ec 08             	sub    esp,0x8
c001db9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db9e:	50                   	push   eax
c001db9f:	e8 12 c0 fe ff       	call   c0009bb6 <Device::Device(char const*)>
c001dba4:	83 c4 10             	add    esp,0x10
c001dba7:	ba d4 61 02 c0       	mov    edx,0xc00261d4
c001dbac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbb0:	89 10                	mov    DWORD PTR [eax],edx
c001dbb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbb6:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001dbbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbc1:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001dbcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbcf:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001dbd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbdd:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001dbe7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbeb:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001dbf5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001dbfd:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001dc02:	7f 1a                	jg     c001dc1e <SoundCard::SoundCard(char const*)+0x8e>
c001dc04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc08:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001dc0c:	83 c2 54             	add    edx,0x54
c001dc0f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001dc17:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001dc1c:	eb df                	jmp    c001dbfd <SoundCard::SoundCard(char const*)+0x6d>
c001dc1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc22:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001dc29:	90                   	nop
c001dc2a:	83 c4 1c             	add    esp,0x1c
c001dc2d:	c3                   	ret    

c001dc2e <SoundCard::~SoundCard()>:
c001dc2e:	83 ec 0c             	sub    esp,0xc
c001dc31:	ba d4 61 02 c0       	mov    edx,0xc00261d4
c001dc36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc3a:	89 10                	mov    DWORD PTR [eax],edx
c001dc3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc40:	83 ec 0c             	sub    esp,0xc
c001dc43:	50                   	push   eax
c001dc44:	e8 0d bd fe ff       	call   c0009956 <Device::~Device()>
c001dc49:	83 c4 10             	add    esp,0x10
c001dc4c:	90                   	nop
c001dc4d:	83 c4 0c             	add    esp,0xc
c001dc50:	c3                   	ret    
c001dc51:	90                   	nop

c001dc52 <SoundCard::~SoundCard()>:
c001dc52:	83 ec 0c             	sub    esp,0xc
c001dc55:	83 ec 0c             	sub    esp,0xc
c001dc58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc5c:	e8 cd ff ff ff       	call   c001dc2e <SoundCard::~SoundCard()>
c001dc61:	83 c4 10             	add    esp,0x10
c001dc64:	83 ec 08             	sub    esp,0x8
c001dc67:	68 e8 01 00 00       	push   0x1e8
c001dc6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc70:	e8 07 f6 fe ff       	call   c000d27c <operator delete(void*, unsigned long)>
c001dc75:	83 c4 10             	add    esp,0x10
c001dc78:	83 c4 0c             	add    esp,0xc
c001dc7b:	c3                   	ret    

c001dc7c <SoundCard::configureRates(int, int, int)>:
c001dc7c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001dc80:	31 c0                	xor    eax,eax
c001dc82:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001dc89:	75 20                	jne    c001dcab <SoundCard::configureRates(int, int, int)+0x2f>
c001dc8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dc8f:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001dc95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc99:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001dc9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dca3:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001dca9:	b0 01                	mov    al,0x1
c001dcab:	c3                   	ret    

c001dcac <SoundCard::getSamples16(int, short*)>:
c001dcac:	55                   	push   ebp
c001dcad:	57                   	push   edi
c001dcae:	31 ff                	xor    edi,edi
c001dcb0:	56                   	push   esi
c001dcb1:	53                   	push   ebx
c001dcb2:	31 db                	xor    ebx,ebx
c001dcb4:	83 ec 10             	sub    esp,0x10
c001dcb7:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001dcbb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001dcbf:	8d 04 36             	lea    eax,[esi+esi*1]
c001dcc2:	50                   	push   eax
c001dcc3:	6a 00                	push   0x0
c001dcc5:	55                   	push   ebp
c001dcc6:	e8 25 28 fe ff       	call   c00004f0 <memset>
c001dccb:	83 c4 10             	add    esp,0x10
c001dcce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcd2:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001dcd9:	85 c0                	test   eax,eax
c001dcdb:	74 1b                	je     c001dcf8 <SoundCard::getSamples16(int, short*)+0x4c>
c001dcdd:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001dce1:	75 15                	jne    c001dcf8 <SoundCard::getSamples16(int, short*)+0x4c>
c001dce3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001dce7:	55                   	push   ebp
c001dce8:	56                   	push   esi
c001dce9:	50                   	push   eax
c001dcea:	e8 8d 03 00 00       	call   c001e07c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001dcef:	83 c4 10             	add    esp,0x10
c001dcf2:	39 c7                	cmp    edi,eax
c001dcf4:	7d 02                	jge    c001dcf8 <SoundCard::getSamples16(int, short*)+0x4c>
c001dcf6:	89 c7                	mov    edi,eax
c001dcf8:	43                   	inc    ebx
c001dcf9:	83 fb 20             	cmp    ebx,0x20
c001dcfc:	75 d0                	jne    c001dcce <SoundCard::getSamples16(int, short*)+0x22>
c001dcfe:	83 c4 0c             	add    esp,0xc
c001dd01:	89 f8                	mov    eax,edi
c001dd03:	5b                   	pop    ebx
c001dd04:	5e                   	pop    esi
c001dd05:	5f                   	pop    edi
c001dd06:	5d                   	pop    ebp
c001dd07:	c3                   	ret    

c001dd08 <SoundCard::getSamples32(int, int*)>:
c001dd08:	55                   	push   ebp
c001dd09:	57                   	push   edi
c001dd0a:	31 ff                	xor    edi,edi
c001dd0c:	56                   	push   esi
c001dd0d:	31 f6                	xor    esi,esi
c001dd0f:	53                   	push   ebx
c001dd10:	83 ec 10             	sub    esp,0x10
c001dd13:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001dd17:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001dd1b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001dd1f:	c1 e0 02             	shl    eax,0x2
c001dd22:	50                   	push   eax
c001dd23:	6a 00                	push   0x0
c001dd25:	55                   	push   ebp
c001dd26:	e8 c5 27 fe ff       	call   c00004f0 <memset>
c001dd2b:	83 c4 10             	add    esp,0x10
c001dd2e:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001dd35:	85 c0                	test   eax,eax
c001dd37:	74 1b                	je     c001dd54 <SoundCard::getSamples32(int, int*)+0x4c>
c001dd39:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001dd3d:	75 15                	jne    c001dd54 <SoundCard::getSamples32(int, int*)+0x4c>
c001dd3f:	53                   	push   ebx
c001dd40:	55                   	push   ebp
c001dd41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dd45:	50                   	push   eax
c001dd46:	e8 fd 03 00 00       	call   c001e148 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001dd4b:	83 c4 10             	add    esp,0x10
c001dd4e:	39 c6                	cmp    esi,eax
c001dd50:	7d 02                	jge    c001dd54 <SoundCard::getSamples32(int, int*)+0x4c>
c001dd52:	89 c6                	mov    esi,eax
c001dd54:	47                   	inc    edi
c001dd55:	83 ff 20             	cmp    edi,0x20
c001dd58:	75 d4                	jne    c001dd2e <SoundCard::getSamples32(int, int*)+0x26>
c001dd5a:	85 f6                	test   esi,esi
c001dd5c:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001dd63:	75 0f                	jne    c001dd74 <SoundCard::getSamples32(int, int*)+0x6c>
c001dd65:	85 c0                	test   eax,eax
c001dd67:	74 1b                	je     c001dd84 <SoundCard::getSamples32(int, int*)+0x7c>
c001dd69:	83 ec 0c             	sub    esp,0xc
c001dd6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dd6e:	53                   	push   ebx
c001dd6f:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001dd72:	eb 0d                	jmp    c001dd81 <SoundCard::getSamples32(int, int*)+0x79>
c001dd74:	85 c0                	test   eax,eax
c001dd76:	75 0c                	jne    c001dd84 <SoundCard::getSamples32(int, int*)+0x7c>
c001dd78:	83 ec 0c             	sub    esp,0xc
c001dd7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dd7d:	53                   	push   ebx
c001dd7e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001dd81:	83 c4 10             	add    esp,0x10
c001dd84:	83 c4 0c             	add    esp,0xc
c001dd87:	89 f0                	mov    eax,esi
c001dd89:	5b                   	pop    ebx
c001dd8a:	5e                   	pop    esi
c001dd8b:	5f                   	pop    edi
c001dd8c:	5d                   	pop    ebp
c001dd8d:	c3                   	ret    

c001dd8e <SoundCard::addChannel(SoundPort*)>:
c001dd8e:	83 ec 0c             	sub    esp,0xc
c001dd91:	31 c0                	xor    eax,eax
c001dd93:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dd97:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001dd9f:	74 1b                	je     c001ddbc <SoundCard::addChannel(SoundPort*)+0x2e>
c001dda1:	40                   	inc    eax
c001dda2:	83 f8 20             	cmp    eax,0x20
c001dda5:	75 f0                	jne    c001dd97 <SoundCard::addChannel(SoundPort*)+0x9>
c001dda7:	83 ec 0c             	sub    esp,0xc
c001ddaa:	68 ad 61 02 c0       	push   0xc00261ad
c001ddaf:	e8 0c 1e ff ff       	call   c000fbc0 <KePanic(char const*)>
c001ddb4:	83 c4 10             	add    esp,0x10
c001ddb7:	83 c8 ff             	or     eax,0xffffffff
c001ddba:	eb 0b                	jmp    c001ddc7 <SoundCard::addChannel(SoundPort*)+0x39>
c001ddbc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ddc0:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001ddc7:	83 c4 0c             	add    esp,0xc
c001ddca:	c3                   	ret    
c001ddcb:	90                   	nop

c001ddcc <SoundCard::removeChannel(int)>:
c001ddcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ddd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ddd4:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001dddf:	c3                   	ret    

c001dde0 <SoundPort::SoundPort(int, int, int, int)>:
c001dde0:	83 ec 0c             	sub    esp,0xc
c001dde3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dde7:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ddee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddf2:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ddf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddfa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ddfe:	89 10                	mov    DWORD PTR [eax],edx
c001de00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de04:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001de08:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001de0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de0f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001de13:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001de16:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001de1b:	75 13                	jne    c001de30 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001de1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de21:	8b 00                	mov    eax,DWORD PTR [eax]
c001de23:	05 a0 0f 00 00       	add    eax,0xfa0
c001de28:	01 c0                	add    eax,eax
c001de2a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001de2e:	66 90                	xchg   ax,ax
c001de30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de34:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001de38:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001de3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de3f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001de46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de4a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001de4d:	c1 e0 02             	shl    eax,0x2
c001de50:	83 ec 0c             	sub    esp,0xc
c001de53:	50                   	push   eax
c001de54:	e8 0a 19 ff ff       	call   c000f763 <malloc>
c001de59:	83 c4 10             	add    esp,0x10
c001de5c:	89 c2                	mov    edx,eax
c001de5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de62:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001de65:	90                   	nop
c001de66:	83 c4 0c             	add    esp,0xc
c001de69:	c3                   	ret    
c001de6a:	66 90                	xchg   ax,ax

c001de6c <SoundPort::~SoundPort()>:
c001de6c:	83 ec 0c             	sub    esp,0xc
c001de6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de73:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001de76:	85 c0                	test   eax,eax
c001de78:	74 1e                	je     c001de98 <SoundPort::~SoundPort()+0x2c>
c001de7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de7e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001de81:	83 ec 0c             	sub    esp,0xc
c001de84:	50                   	push   eax
c001de85:	e8 e9 18 ff ff       	call   c000f773 <free>
c001de8a:	83 c4 10             	add    esp,0x10
c001de8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de91:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001de98:	90                   	nop
c001de99:	83 c4 0c             	add    esp,0xc
c001de9c:	c3                   	ret    
c001de9d:	90                   	nop
c001de9e:	66 90                	xchg   ax,ax

c001dea0 <SoundPort::unpause()>:
c001dea0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dea4:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001dea8:	c3                   	ret    
c001dea9:	90                   	nop
c001deaa:	66 90                	xchg   ax,ax

c001deac <SoundPort::pause()>:
c001deac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001deb0:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001deb4:	c3                   	ret    
c001deb5:	90                   	nop
c001deb6:	66 90                	xchg   ax,ax

c001deb8 <SoundPort::getBufferUsed()>:
c001deb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001debc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001debf:	c3                   	ret    

c001dec0 <SoundPort::getBufferSize()>:
c001dec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dec4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001dec7:	c3                   	ret    

c001dec8 <SoundPort::buffer8(signed char*, int)>:
c001dec8:	55                   	push   ebp
c001dec9:	57                   	push   edi
c001deca:	56                   	push   esi
c001decb:	53                   	push   ebx
c001decc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ded0:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001ded4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001ded7:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001deda:	74 70                	je     c001df4c <SoundPort::buffer8(signed char*, int)+0x84>
c001dedc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dee0:	85 c9                	test   ecx,ecx
c001dee2:	7e 68                	jle    c001df4c <SoundPort::buffer8(signed char*, int)+0x84>
c001dee4:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001dee8:	8d 48 01             	lea    ecx,[eax+0x1]
c001deeb:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001deee:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001def1:	89 f1                	mov    ecx,esi
c001def3:	c1 e1 18             	shl    ecx,0x18
c001def6:	29 f1                	sub    ecx,esi
c001def8:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001defb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001defe:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001df01:	74 51                	je     c001df54 <SoundPort::buffer8(signed char*, int)+0x8c>
c001df03:	31 ff                	xor    edi,edi
c001df05:	eb 25                	jmp    c001df2c <SoundPort::buffer8(signed char*, int)+0x64>
c001df07:	90                   	nop
c001df08:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001df0d:	8d 59 01             	lea    ebx,[ecx+0x1]
c001df10:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001df13:	89 f3                	mov    ebx,esi
c001df15:	c1 e3 18             	shl    ebx,0x18
c001df18:	29 f3                	sub    ebx,esi
c001df1a:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001df1d:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001df20:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001df23:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001df26:	74 1c                	je     c001df44 <SoundPort::buffer8(signed char*, int)+0x7c>
c001df28:	89 c7                	mov    edi,eax
c001df2a:	66 90                	xchg   ax,ax
c001df2c:	8d 47 01             	lea    eax,[edi+0x1]
c001df2f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001df33:	75 d3                	jne    c001df08 <SoundPort::buffer8(signed char*, int)+0x40>
c001df35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001df39:	8d 76 00             	lea    esi,[esi+0x0]
c001df3c:	5b                   	pop    ebx
c001df3d:	5e                   	pop    esi
c001df3e:	5f                   	pop    edi
c001df3f:	5d                   	pop    ebp
c001df40:	c3                   	ret    
c001df41:	8d 76 00             	lea    esi,[esi+0x0]
c001df44:	5b                   	pop    ebx
c001df45:	8d 47 02             	lea    eax,[edi+0x2]
c001df48:	5e                   	pop    esi
c001df49:	5f                   	pop    edi
c001df4a:	5d                   	pop    ebp
c001df4b:	c3                   	ret    
c001df4c:	5b                   	pop    ebx
c001df4d:	31 c0                	xor    eax,eax
c001df4f:	5e                   	pop    esi
c001df50:	5f                   	pop    edi
c001df51:	5d                   	pop    ebp
c001df52:	c3                   	ret    
c001df53:	90                   	nop
c001df54:	b8 01 00 00 00       	mov    eax,0x1
c001df59:	eb e1                	jmp    c001df3c <SoundPort::buffer8(signed char*, int)+0x74>
c001df5b:	90                   	nop

c001df5c <SoundPort::buffer16(short*, int)>:
c001df5c:	55                   	push   ebp
c001df5d:	57                   	push   edi
c001df5e:	56                   	push   esi
c001df5f:	53                   	push   ebx
c001df60:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001df64:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001df68:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001df6b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001df6e:	74 70                	je     c001dfe0 <SoundPort::buffer16(short*, int)+0x84>
c001df70:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001df74:	85 c9                	test   ecx,ecx
c001df76:	7e 68                	jle    c001dfe0 <SoundPort::buffer16(short*, int)+0x84>
c001df78:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001df7c:	8d 48 01             	lea    ecx,[eax+0x1]
c001df7f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001df82:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001df85:	89 f1                	mov    ecx,esi
c001df87:	c1 e1 10             	shl    ecx,0x10
c001df8a:	29 f1                	sub    ecx,esi
c001df8c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001df8f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001df92:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001df95:	74 51                	je     c001dfe8 <SoundPort::buffer16(short*, int)+0x8c>
c001df97:	31 ff                	xor    edi,edi
c001df99:	eb 25                	jmp    c001dfc0 <SoundPort::buffer16(short*, int)+0x64>
c001df9b:	90                   	nop
c001df9c:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001dfa1:	8d 59 01             	lea    ebx,[ecx+0x1]
c001dfa4:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001dfa7:	89 f3                	mov    ebx,esi
c001dfa9:	c1 e3 10             	shl    ebx,0x10
c001dfac:	29 f3                	sub    ebx,esi
c001dfae:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001dfb1:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001dfb4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dfb7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dfba:	74 1c                	je     c001dfd8 <SoundPort::buffer16(short*, int)+0x7c>
c001dfbc:	89 c7                	mov    edi,eax
c001dfbe:	66 90                	xchg   ax,ax
c001dfc0:	8d 47 01             	lea    eax,[edi+0x1]
c001dfc3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001dfc7:	75 d3                	jne    c001df9c <SoundPort::buffer16(short*, int)+0x40>
c001dfc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dfcd:	8d 76 00             	lea    esi,[esi+0x0]
c001dfd0:	5b                   	pop    ebx
c001dfd1:	5e                   	pop    esi
c001dfd2:	5f                   	pop    edi
c001dfd3:	5d                   	pop    ebp
c001dfd4:	c3                   	ret    
c001dfd5:	8d 76 00             	lea    esi,[esi+0x0]
c001dfd8:	5b                   	pop    ebx
c001dfd9:	8d 47 02             	lea    eax,[edi+0x2]
c001dfdc:	5e                   	pop    esi
c001dfdd:	5f                   	pop    edi
c001dfde:	5d                   	pop    ebp
c001dfdf:	c3                   	ret    
c001dfe0:	5b                   	pop    ebx
c001dfe1:	31 c0                	xor    eax,eax
c001dfe3:	5e                   	pop    esi
c001dfe4:	5f                   	pop    edi
c001dfe5:	5d                   	pop    ebp
c001dfe6:	c3                   	ret    
c001dfe7:	90                   	nop
c001dfe8:	b8 01 00 00 00       	mov    eax,0x1
c001dfed:	eb e1                	jmp    c001dfd0 <SoundPort::buffer16(short*, int)+0x74>
c001dfef:	90                   	nop

c001dff0 <SoundPort::buffer32(int*, int)>:
c001dff0:	55                   	push   ebp
c001dff1:	57                   	push   edi
c001dff2:	56                   	push   esi
c001dff3:	53                   	push   ebx
c001dff4:	83 ec 04             	sub    esp,0x4
c001dff7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dffb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfff:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001e002:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e006:	89 04 24             	mov    DWORD PTR [esp],eax
c001e009:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001e00c:	74 5a                	je     c001e068 <SoundPort::buffer32(int*, int)+0x78>
c001e00e:	85 c0                	test   eax,eax
c001e010:	7e 56                	jle    c001e068 <SoundPort::buffer32(int*, int)+0x78>
c001e012:	8d 71 01             	lea    esi,[ecx+0x1]
c001e015:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001e018:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001e01b:	8b 37                	mov    esi,DWORD PTR [edi]
c001e01d:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001e020:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001e023:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001e026:	74 4c                	je     c001e074 <SoundPort::buffer32(int*, int)+0x84>
c001e028:	31 f6                	xor    esi,esi
c001e02a:	eb 1c                	jmp    c001e048 <SoundPort::buffer32(int*, int)+0x58>
c001e02c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001e02f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001e032:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001e035:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001e038:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001e03c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001e03f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001e042:	74 18                	je     c001e05c <SoundPort::buffer32(int*, int)+0x6c>
c001e044:	89 de                	mov    esi,ebx
c001e046:	66 90                	xchg   ax,ax
c001e048:	8d 5e 01             	lea    ebx,[esi+0x1]
c001e04b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001e04e:	75 dc                	jne    c001e02c <SoundPort::buffer32(int*, int)+0x3c>
c001e050:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e053:	90                   	nop
c001e054:	83 c4 04             	add    esp,0x4
c001e057:	5b                   	pop    ebx
c001e058:	5e                   	pop    esi
c001e059:	5f                   	pop    edi
c001e05a:	5d                   	pop    ebp
c001e05b:	c3                   	ret    
c001e05c:	83 c4 04             	add    esp,0x4
c001e05f:	8d 46 02             	lea    eax,[esi+0x2]
c001e062:	5b                   	pop    ebx
c001e063:	5e                   	pop    esi
c001e064:	5f                   	pop    edi
c001e065:	5d                   	pop    ebp
c001e066:	c3                   	ret    
c001e067:	90                   	nop
c001e068:	83 c4 04             	add    esp,0x4
c001e06b:	31 c0                	xor    eax,eax
c001e06d:	5b                   	pop    ebx
c001e06e:	5e                   	pop    esi
c001e06f:	5f                   	pop    edi
c001e070:	5d                   	pop    ebp
c001e071:	c3                   	ret    
c001e072:	66 90                	xchg   ax,ax
c001e074:	b8 01 00 00 00       	mov    eax,0x1
c001e079:	eb d9                	jmp    c001e054 <SoundPort::buffer32(int*, int)+0x64>
c001e07b:	90                   	nop

c001e07c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001e07c:	57                   	push   edi
c001e07d:	56                   	push   esi
c001e07e:	53                   	push   ebx
c001e07f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e083:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001e087:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001e08d:	39 03                	cmp    DWORD PTR [ebx],eax
c001e08f:	74 13                	je     c001e0a4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001e091:	83 ec 0c             	sub    esp,0xc
c001e094:	68 00 62 02 c0       	push   0xc0026200
c001e099:	e8 22 1b ff ff       	call   c000fbc0 <KePanic(char const*)>
c001e09e:	83 c4 10             	add    esp,0x10
c001e0a1:	8d 76 00             	lea    esi,[esi+0x0]
c001e0a4:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001e0aa:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001e0ad:	74 11                	je     c001e0c0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001e0af:	83 ec 0c             	sub    esp,0xc
c001e0b2:	68 3f 62 02 c0       	push   0xc002623f
c001e0b7:	e8 04 1b ff ff       	call   c000fbc0 <KePanic(char const*)>
c001e0bc:	83 c4 10             	add    esp,0x10
c001e0bf:	90                   	nop
c001e0c0:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001e0c6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001e0c9:	74 11                	je     c001e0dc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001e0cb:	83 ec 0c             	sub    esp,0xc
c001e0ce:	68 3f 62 02 c0       	push   0xc002623f
c001e0d3:	e8 e8 1a ff ff       	call   c000fbc0 <KePanic(char const*)>
c001e0d8:	83 c4 10             	add    esp,0x10
c001e0db:	90                   	nop
c001e0dc:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001e0df:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001e0e3:	7e 07                	jle    c001e0ec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001e0e5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001e0e9:	8d 76 00             	lea    esi,[esi+0x0]
c001e0ec:	85 f6                	test   esi,esi
c001e0ee:	7e 2c                	jle    c001e11c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001e0f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e0f4:	8d 3c 36             	lea    edi,[esi+esi*1]
c001e0f7:	31 c9                	xor    ecx,ecx
c001e0f9:	01 d7                	add    edi,edx
c001e0fb:	90                   	nop
c001e0fc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001e0ff:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001e102:	85 c0                	test   eax,eax
c001e104:	79 06                	jns    c001e10c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001e106:	05 ff 7f 00 00       	add    eax,0x7fff
c001e10b:	90                   	nop
c001e10c:	c1 f8 0f             	sar    eax,0xf
c001e10f:	83 c1 04             	add    ecx,0x4
c001e112:	66 01 02             	add    WORD PTR [edx],ax
c001e115:	83 c2 02             	add    edx,0x2
c001e118:	39 d7                	cmp    edi,edx
c001e11a:	75 e0                	jne    c001e0fc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001e11c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001e11f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001e122:	83 ec 04             	sub    esp,0x4
c001e125:	29 f0                	sub    eax,esi
c001e127:	c1 e0 02             	shl    eax,0x2
c001e12a:	50                   	push   eax
c001e12b:	8d 04 b2             	lea    eax,[edx+esi*4]
c001e12e:	50                   	push   eax
c001e12f:	52                   	push   edx
c001e130:	e8 9b 22 fe ff       	call   c00003d0 <memmove>
c001e135:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001e138:	83 c4 10             	add    esp,0x10
c001e13b:	29 f0                	sub    eax,esi
c001e13d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001e140:	89 f0                	mov    eax,esi
c001e142:	5b                   	pop    ebx
c001e143:	5e                   	pop    esi
c001e144:	5f                   	pop    edi
c001e145:	c3                   	ret    
c001e146:	66 90                	xchg   ax,ax

c001e148 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001e148:	57                   	push   edi
c001e149:	56                   	push   esi
c001e14a:	53                   	push   ebx
c001e14b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e14f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e153:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e157:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001e15d:	39 06                	cmp    DWORD PTR [esi],eax
c001e15f:	74 13                	je     c001e174 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001e161:	83 ec 0c             	sub    esp,0xc
c001e164:	68 20 62 02 c0       	push   0xc0026220
c001e169:	e8 52 1a ff ff       	call   c000fbc0 <KePanic(char const*)>
c001e16e:	83 c4 10             	add    esp,0x10
c001e171:	8d 76 00             	lea    esi,[esi+0x0]
c001e174:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001e17a:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001e17d:	74 11                	je     c001e190 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001e17f:	83 ec 0c             	sub    esp,0xc
c001e182:	68 5b 62 02 c0       	push   0xc002625b
c001e187:	e8 34 1a ff ff       	call   c000fbc0 <KePanic(char const*)>
c001e18c:	83 c4 10             	add    esp,0x10
c001e18f:	90                   	nop
c001e190:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001e196:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001e199:	74 11                	je     c001e1ac <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001e19b:	83 ec 0c             	sub    esp,0xc
c001e19e:	68 5b 62 02 c0       	push   0xc002625b
c001e1a3:	e8 18 1a ff ff       	call   c000fbc0 <KePanic(char const*)>
c001e1a8:	83 c4 10             	add    esp,0x10
c001e1ab:	90                   	nop
c001e1ac:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001e1af:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001e1b3:	7e 07                	jle    c001e1bc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001e1b5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e1b9:	8d 76 00             	lea    esi,[esi+0x0]
c001e1bc:	85 ff                	test   edi,edi
c001e1be:	7e 1c                	jle    c001e1dc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001e1c0:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001e1c7:	31 c0                	xor    eax,eax
c001e1c9:	8d 76 00             	lea    esi,[esi+0x0]
c001e1cc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001e1cf:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001e1d2:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001e1d5:	83 c0 04             	add    eax,0x4
c001e1d8:	39 c1                	cmp    ecx,eax
c001e1da:	75 f0                	jne    c001e1cc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001e1dc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001e1df:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001e1e2:	83 ec 04             	sub    esp,0x4
c001e1e5:	29 f8                	sub    eax,edi
c001e1e7:	c1 e0 02             	shl    eax,0x2
c001e1ea:	50                   	push   eax
c001e1eb:	8d 04 ba             	lea    eax,[edx+edi*4]
c001e1ee:	50                   	push   eax
c001e1ef:	52                   	push   edx
c001e1f0:	e8 db 21 fe ff       	call   c00003d0 <memmove>
c001e1f5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001e1f8:	83 c4 10             	add    esp,0x10
c001e1fb:	29 f8                	sub    eax,edi
c001e1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001e200:	89 f8                	mov    eax,edi
c001e202:	5b                   	pop    ebx
c001e203:	5e                   	pop    esi
c001e204:	5f                   	pop    edi
c001e205:	c3                   	ret    

c001e206 <PCI::open(int, int, void*)>:
c001e206:	83 ec 18             	sub    esp,0x18
c001e209:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e20d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e211:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e217:	8b 10                	mov    edx,DWORD PTR [eax]
c001e219:	50                   	push   eax
c001e21a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001e21d:	31 c0                	xor    eax,eax
c001e21f:	83 c4 1c             	add    esp,0x1c
c001e222:	c3                   	ret    
c001e223:	90                   	nop

c001e224 <PCI::close(int, int, void*)>:
c001e224:	31 c0                	xor    eax,eax
c001e226:	c3                   	ret    
c001e227:	90                   	nop

c001e228 <PCI::PCI()>:
c001e228:	83 ec 0c             	sub    esp,0xc
c001e22b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e22f:	83 ec 08             	sub    esp,0x8
c001e232:	68 77 62 02 c0       	push   0xc0026277
c001e237:	50                   	push   eax
c001e238:	e8 27 a7 fe ff       	call   c0008964 <Bus::Bus(char const*)>
c001e23d:	83 c4 10             	add    esp,0x10
c001e240:	ba 84 63 02 c0       	mov    edx,0xc0026384
c001e245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e249:	89 10                	mov    DWORD PTR [eax],edx
c001e24b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e24f:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001e259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e25d:	a3 e0 04 03 c0       	mov    ds:0xc00304e0,eax
c001e262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e266:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e26c:	0f b6 d0             	movzx  edx,al
c001e26f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e273:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001e27a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e27e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e284:	0f b6 d0             	movzx  edx,al
c001e287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e28b:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001e290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e294:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e29a:	8d 50 01             	lea    edx,[eax+0x1]
c001e29d:	88 d1                	mov    cl,dl
c001e29f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e2a3:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001e2a9:	0f b6 d0             	movzx  edx,al
c001e2ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2b0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e2b4:	83 c9 c0             	or     ecx,0xffffffc0
c001e2b7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e2bb:	90                   	nop
c001e2bc:	83 c4 0c             	add    esp,0xc
c001e2bf:	c3                   	ret    

c001e2c0 <PCI::readBAR8(unsigned int, int)>:
c001e2c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e2c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e2c8:	f6 c2 01             	test   dl,0x1
c001e2cb:	74 07                	je     c001e2d4 <PCI::readBAR8(unsigned int, int)+0x14>
c001e2cd:	83 e2 fc             	and    edx,0xfffffffc
c001e2d0:	01 c2                	add    edx,eax
c001e2d2:	ec                   	in     al,dx
c001e2d3:	c3                   	ret    
c001e2d4:	83 e2 f0             	and    edx,0xfffffff0
c001e2d7:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001e2da:	c3                   	ret    
c001e2db:	90                   	nop

c001e2dc <PCI::readBAR16(unsigned int, int)>:
c001e2dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e2e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e2e4:	f6 c2 01             	test   dl,0x1
c001e2e7:	74 08                	je     c001e2f1 <PCI::readBAR16(unsigned int, int)+0x15>
c001e2e9:	83 e2 fc             	and    edx,0xfffffffc
c001e2ec:	01 c2                	add    edx,eax
c001e2ee:	66 ed                	in     ax,dx
c001e2f0:	c3                   	ret    
c001e2f1:	83 e2 f0             	and    edx,0xfffffff0
c001e2f4:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001e2f8:	c3                   	ret    
c001e2f9:	90                   	nop

c001e2fa <PCI::readBAR32(unsigned int, int)>:
c001e2fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e2fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e302:	f6 c2 01             	test   dl,0x1
c001e305:	74 07                	je     c001e30e <PCI::readBAR32(unsigned int, int)+0x14>
c001e307:	83 e2 fc             	and    edx,0xfffffffc
c001e30a:	01 c2                	add    edx,eax
c001e30c:	ed                   	in     eax,dx
c001e30d:	c3                   	ret    
c001e30e:	83 e2 f0             	and    edx,0xfffffff0
c001e311:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001e314:	c3                   	ret    
c001e315:	90                   	nop

c001e316 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001e316:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e31a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e31e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e322:	f6 c2 01             	test   dl,0x1
c001e325:	74 07                	je     c001e32e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001e327:	83 e2 fc             	and    edx,0xfffffffc
c001e32a:	01 ca                	add    edx,ecx
c001e32c:	ee                   	out    dx,al
c001e32d:	c3                   	ret    
c001e32e:	83 e2 f0             	and    edx,0xfffffff0
c001e331:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001e334:	c3                   	ret    
c001e335:	90                   	nop

c001e336 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001e336:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e33a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e33e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e342:	f6 c2 01             	test   dl,0x1
c001e345:	74 08                	je     c001e34f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001e347:	83 e2 fc             	and    edx,0xfffffffc
c001e34a:	01 ca                	add    edx,ecx
c001e34c:	66 ef                	out    dx,ax
c001e34e:	c3                   	ret    
c001e34f:	83 e2 f0             	and    edx,0xfffffff0
c001e352:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001e356:	c3                   	ret    
c001e357:	90                   	nop

c001e358 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001e358:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e35c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e360:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e364:	f6 c2 01             	test   dl,0x1
c001e367:	74 07                	je     c001e370 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001e369:	83 e2 fc             	and    edx,0xfffffffc
c001e36c:	01 ca                	add    edx,ecx
c001e36e:	ef                   	out    dx,eax
c001e36f:	c3                   	ret    
c001e370:	83 e2 f0             	and    edx,0xfffffff0
c001e373:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001e376:	c3                   	ret    
c001e377:	90                   	nop

c001e378 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001e378:	55                   	push   ebp
c001e379:	57                   	push   edi
c001e37a:	56                   	push   esi
c001e37b:	53                   	push   ebx
c001e37c:	83 ec 0c             	sub    esp,0xc
c001e37f:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001e384:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001e388:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001e38c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e390:	83 fe 07             	cmp    esi,0x7
c001e393:	76 10                	jbe    c001e3a5 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001e395:	83 ec 0c             	sub    esp,0xc
c001e398:	68 7f 62 02 c0       	push   0xc002627f
c001e39d:	e8 1e 18 ff ff       	call   c000fbc0 <KePanic(char const*)>
c001e3a2:	83 c4 10             	add    esp,0x10
c001e3a5:	0f b6 db             	movzx  ebx,bl
c001e3a8:	83 fb 0f             	cmp    ebx,0xf
c001e3ab:	76 10                	jbe    c001e3bd <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001e3ad:	83 ec 0c             	sub    esp,0xc
c001e3b0:	68 af 62 02 c0       	push   0xc00262af
c001e3b5:	e8 06 18 ff ff       	call   c000fbc0 <KePanic(char const*)>
c001e3ba:	83 c4 10             	add    esp,0x10
c001e3bd:	8d 04 36             	lea    eax,[esi+esi*1]
c001e3c0:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e3c5:	83 c8 f0             	or     eax,0xfffffff0
c001e3c8:	ee                   	out    dx,al
c001e3c9:	ba fa 0c 00 00       	mov    edx,0xcfa
c001e3ce:	89 e8                	mov    eax,ebp
c001e3d0:	ee                   	out    dx,al
c001e3d1:	83 c4 0c             	add    esp,0xc
c001e3d4:	89 d8                	mov    eax,ebx
c001e3d6:	89 f9                	mov    ecx,edi
c001e3d8:	c1 e0 08             	shl    eax,0x8
c001e3db:	0f b6 d9             	movzx  ebx,cl
c001e3de:	83 e3 fc             	and    ebx,0xfffffffc
c001e3e1:	09 d8                	or     eax,ebx
c001e3e3:	5b                   	pop    ebx
c001e3e4:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001e3e9:	5e                   	pop    esi
c001e3ea:	5f                   	pop    edi
c001e3eb:	5d                   	pop    ebp
c001e3ec:	c3                   	ret    
c001e3ed:	90                   	nop

c001e3ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001e3ee:	57                   	push   edi
c001e3ef:	56                   	push   esi
c001e3f0:	53                   	push   ebx
c001e3f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e3f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e3f9:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001e3ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e403:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e407:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e40b:	83 ff 01             	cmp    edi,0x1
c001e40e:	75 3f                	jne    c001e44f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001e410:	89 de                	mov    esi,ebx
c001e412:	0f b6 c0             	movzx  eax,al
c001e415:	81 e6 fc 00 00 00    	and    esi,0xfc
c001e41b:	c1 e0 10             	shl    eax,0x10
c001e41e:	0f b6 c9             	movzx  ecx,cl
c001e421:	09 f0                	or     eax,esi
c001e423:	c1 e1 08             	shl    ecx,0x8
c001e426:	0f b6 d2             	movzx  edx,dl
c001e429:	09 c8                	or     eax,ecx
c001e42b:	c1 e2 0b             	shl    edx,0xb
c001e42e:	09 d0                	or     eax,edx
c001e430:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e435:	0d 00 00 00 80       	or     eax,0x80000000
c001e43a:	ef                   	out    dx,eax
c001e43b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e440:	ed                   	in     eax,dx
c001e441:	83 e3 02             	and    ebx,0x2
c001e444:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001e44b:	d3 e8                	shr    eax,cl
c001e44d:	eb 44                	jmp    c001e493 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001e44f:	83 ff 02             	cmp    edi,0x2
c001e452:	75 2d                	jne    c001e481 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001e454:	83 ec 0c             	sub    esp,0xc
c001e457:	0f b6 c9             	movzx  ecx,cl
c001e45a:	0f b6 d2             	movzx  edx,dl
c001e45d:	0f b6 fb             	movzx  edi,bl
c001e460:	0f b6 c0             	movzx  eax,al
c001e463:	57                   	push   edi
c001e464:	51                   	push   ecx
c001e465:	52                   	push   edx
c001e466:	50                   	push   eax
c001e467:	56                   	push   esi
c001e468:	e8 0b ff ff ff       	call   c001e378 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e46d:	89 c2                	mov    edx,eax
c001e46f:	ed                   	in     eax,dx
c001e470:	83 e3 02             	and    ebx,0x2
c001e473:	83 c4 20             	add    esp,0x20
c001e476:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001e47d:	d3 e8                	shr    eax,cl
c001e47f:	eb 12                	jmp    c001e493 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001e481:	83 ec 0c             	sub    esp,0xc
c001e484:	68 df 62 02 c0       	push   0xc00262df
c001e489:	e8 32 17 ff ff       	call   c000fbc0 <KePanic(char const*)>
c001e48e:	83 c4 10             	add    esp,0x10
c001e491:	31 c0                	xor    eax,eax
c001e493:	5b                   	pop    ebx
c001e494:	5e                   	pop    esi
c001e495:	5f                   	pop    edi
c001e496:	c3                   	ret    
c001e497:	90                   	nop

c001e498 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001e498:	83 ec 18             	sub    esp,0x18
c001e49b:	6a 00                	push   0x0
c001e49d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e4a2:	50                   	push   eax
c001e4a3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e4a8:	50                   	push   eax
c001e4a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e4ae:	50                   	push   eax
c001e4af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e4b3:	e8 36 ff ff ff       	call   c001e3ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e4b8:	83 c4 2c             	add    esp,0x2c
c001e4bb:	c3                   	ret    

c001e4bc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001e4bc:	83 ec 18             	sub    esp,0x18
c001e4bf:	6a 0e                	push   0xe
c001e4c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e4c6:	50                   	push   eax
c001e4c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e4cc:	50                   	push   eax
c001e4cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e4d2:	50                   	push   eax
c001e4d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e4d7:	e8 12 ff ff ff       	call   c001e3ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e4dc:	83 c4 2c             	add    esp,0x2c
c001e4df:	0f b6 c0             	movzx  eax,al
c001e4e2:	c3                   	ret    
c001e4e3:	90                   	nop

c001e4e4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001e4e4:	55                   	push   ebp
c001e4e5:	57                   	push   edi
c001e4e6:	56                   	push   esi
c001e4e7:	53                   	push   ebx
c001e4e8:	83 ec 18             	sub    esp,0x18
c001e4eb:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001e4f0:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001e4f5:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001e4fa:	6a 0a                	push   0xa
c001e4fc:	56                   	push   esi
c001e4fd:	55                   	push   ebp
c001e4fe:	57                   	push   edi
c001e4ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e503:	e8 e6 fe ff ff       	call   c001e3ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e508:	83 c4 14             	add    esp,0x14
c001e50b:	89 c3                	mov    ebx,eax
c001e50d:	6a 0a                	push   0xa
c001e50f:	0f b6 db             	movzx  ebx,bl
c001e512:	56                   	push   esi
c001e513:	55                   	push   ebp
c001e514:	57                   	push   edi
c001e515:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e519:	e8 d0 fe ff ff       	call   c001e3ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e51e:	83 c4 2c             	add    esp,0x2c
c001e521:	25 00 ff 00 00       	and    eax,0xff00
c001e526:	09 d8                	or     eax,ebx
c001e528:	5b                   	pop    ebx
c001e529:	5e                   	pop    esi
c001e52a:	5f                   	pop    edi
c001e52b:	5d                   	pop    ebp
c001e52c:	c3                   	ret    
c001e52d:	90                   	nop

c001e52e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001e52e:	83 ec 18             	sub    esp,0x18
c001e531:	6a 08                	push   0x8
c001e533:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e538:	50                   	push   eax
c001e539:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e53e:	50                   	push   eax
c001e53f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e544:	50                   	push   eax
c001e545:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e549:	e8 a0 fe ff ff       	call   c001e3ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e54e:	83 c4 2c             	add    esp,0x2c
c001e551:	0f b6 c4             	movzx  eax,ah
c001e554:	c3                   	ret    
c001e555:	90                   	nop

c001e556 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001e556:	83 ec 18             	sub    esp,0x18
c001e559:	6a 08                	push   0x8
c001e55b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e560:	50                   	push   eax
c001e561:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e566:	50                   	push   eax
c001e567:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e56c:	50                   	push   eax
c001e56d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e571:	e8 78 fe ff ff       	call   c001e3ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e576:	83 c4 2c             	add    esp,0x2c
c001e579:	c3                   	ret    

c001e57a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001e57a:	83 ec 18             	sub    esp,0x18
c001e57d:	6a 3c                	push   0x3c
c001e57f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e584:	50                   	push   eax
c001e585:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e58a:	50                   	push   eax
c001e58b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e590:	50                   	push   eax
c001e591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e595:	e8 54 fe ff ff       	call   c001e3ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e59a:	83 c4 2c             	add    esp,0x2c
c001e59d:	c3                   	ret    

c001e59e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001e59e:	83 ec 18             	sub    esp,0x18
c001e5a1:	6a 18                	push   0x18
c001e5a3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e5a8:	50                   	push   eax
c001e5a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e5ae:	50                   	push   eax
c001e5af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e5b4:	50                   	push   eax
c001e5b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e5b9:	e8 30 fe ff ff       	call   c001e3ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e5be:	83 c4 2c             	add    esp,0x2c
c001e5c1:	0f b6 c4             	movzx  eax,ah
c001e5c4:	c3                   	ret    
c001e5c5:	90                   	nop

c001e5c6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001e5c6:	55                   	push   ebp
c001e5c7:	57                   	push   edi
c001e5c8:	56                   	push   esi
c001e5c9:	53                   	push   ebx
c001e5ca:	83 ec 28             	sub    esp,0x28
c001e5cd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e5d1:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001e5d6:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001e5db:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001e5e0:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001e5e7:	8d 43 12             	lea    eax,[ebx+0x12]
c001e5ea:	83 c3 10             	add    ebx,0x10
c001e5ed:	0f b6 c0             	movzx  eax,al
c001e5f0:	0f b6 db             	movzx  ebx,bl
c001e5f3:	50                   	push   eax
c001e5f4:	51                   	push   ecx
c001e5f5:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001e5f9:	57                   	push   edi
c001e5fa:	55                   	push   ebp
c001e5fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e5ff:	e8 ea fd ff ff       	call   c001e3ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e604:	83 c4 14             	add    esp,0x14
c001e607:	89 c6                	mov    esi,eax
c001e609:	53                   	push   ebx
c001e60a:	c1 e6 10             	shl    esi,0x10
c001e60d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e611:	51                   	push   ecx
c001e612:	57                   	push   edi
c001e613:	55                   	push   ebp
c001e614:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e618:	e8 d1 fd ff ff       	call   c001e3ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e61d:	83 c4 3c             	add    esp,0x3c
c001e620:	0f b7 c0             	movzx  eax,ax
c001e623:	5b                   	pop    ebx
c001e624:	09 f0                	or     eax,esi
c001e626:	5e                   	pop    esi
c001e627:	5f                   	pop    edi
c001e628:	5d                   	pop    ebp
c001e629:	c3                   	ret    

c001e62a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001e62a:	55                   	push   ebp
c001e62b:	57                   	push   edi
c001e62c:	56                   	push   esi
c001e62d:	53                   	push   ebx
c001e62e:	83 ec 0c             	sub    esp,0xc
c001e631:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001e635:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e639:	89 f5                	mov    ebp,esi
c001e63b:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001e641:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e645:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e649:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e64d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e651:	83 f9 01             	cmp    ecx,0x1
c001e654:	75 5d                	jne    c001e6b3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001e656:	0f b6 c8             	movzx  ecx,al
c001e659:	0f b6 d2             	movzx  edx,dl
c001e65c:	c1 e1 10             	shl    ecx,0x10
c001e65f:	c1 e2 0b             	shl    edx,0xb
c001e662:	89 f0                	mov    eax,esi
c001e664:	25 fc 00 00 00       	and    eax,0xfc
c001e669:	09 c1                	or     ecx,eax
c001e66b:	89 e8                	mov    eax,ebp
c001e66d:	0f b6 c0             	movzx  eax,al
c001e670:	c1 e0 08             	shl    eax,0x8
c001e673:	09 c1                	or     ecx,eax
c001e675:	09 d1                	or     ecx,edx
c001e677:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e67c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001e682:	89 c8                	mov    eax,ecx
c001e684:	ef                   	out    dx,eax
c001e685:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e68a:	ed                   	in     eax,dx
c001e68b:	0f b7 db             	movzx  ebx,bx
c001e68e:	83 e6 02             	and    esi,0x2
c001e691:	74 0a                	je     c001e69d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001e693:	0f b7 d0             	movzx  edx,ax
c001e696:	c1 e3 10             	shl    ebx,0x10
c001e699:	09 d3                	or     ebx,edx
c001e69b:	eb 05                	jmp    c001e6a2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001e69d:	66 31 c0             	xor    ax,ax
c001e6a0:	09 c3                	or     ebx,eax
c001e6a2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e6a7:	89 c8                	mov    eax,ecx
c001e6a9:	ef                   	out    dx,eax
c001e6aa:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e6af:	89 d8                	mov    eax,ebx
c001e6b1:	eb 41                	jmp    c001e6f4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001e6b3:	83 f9 02             	cmp    ecx,0x2
c001e6b6:	75 45                	jne    c001e6fd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001e6b8:	83 ec 0c             	sub    esp,0xc
c001e6bb:	0f b6 d2             	movzx  edx,dl
c001e6be:	89 f1                	mov    ecx,esi
c001e6c0:	0f b6 c0             	movzx  eax,al
c001e6c3:	0f b6 f1             	movzx  esi,cl
c001e6c6:	89 e9                	mov    ecx,ebp
c001e6c8:	56                   	push   esi
c001e6c9:	0f b6 c9             	movzx  ecx,cl
c001e6cc:	51                   	push   ecx
c001e6cd:	52                   	push   edx
c001e6ce:	50                   	push   eax
c001e6cf:	57                   	push   edi
c001e6d0:	e8 a3 fc ff ff       	call   c001e378 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e6d5:	89 c2                	mov    edx,eax
c001e6d7:	ed                   	in     eax,dx
c001e6d8:	83 c4 20             	add    esp,0x20
c001e6db:	0f b7 db             	movzx  ebx,bx
c001e6de:	f6 c2 02             	test   dl,0x2
c001e6e1:	74 0c                	je     c001e6ef <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001e6e3:	0f b7 c8             	movzx  ecx,ax
c001e6e6:	89 d8                	mov    eax,ebx
c001e6e8:	c1 e0 10             	shl    eax,0x10
c001e6eb:	09 c8                	or     eax,ecx
c001e6ed:	eb 05                	jmp    c001e6f4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001e6ef:	66 31 c0             	xor    ax,ax
c001e6f2:	09 d8                	or     eax,ebx
c001e6f4:	ef                   	out    dx,eax
c001e6f5:	83 c4 0c             	add    esp,0xc
c001e6f8:	5b                   	pop    ebx
c001e6f9:	5e                   	pop    esi
c001e6fa:	5f                   	pop    edi
c001e6fb:	5d                   	pop    ebp
c001e6fc:	c3                   	ret    
c001e6fd:	c7 44 24 20 df 62 02 c0 	mov    DWORD PTR [esp+0x20],0xc00262df
c001e705:	83 c4 0c             	add    esp,0xc
c001e708:	5b                   	pop    ebx
c001e709:	5e                   	pop    esi
c001e70a:	5f                   	pop    edi
c001e70b:	5d                   	pop    ebp
c001e70c:	e9 af 14 ff ff       	jmp    c000fbc0 <KePanic(char const*)>
c001e711:	90                   	nop

c001e712 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001e712:	55                   	push   ebp
c001e713:	57                   	push   edi
c001e714:	56                   	push   esi
c001e715:	53                   	push   ebx
c001e716:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001e71c:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001e723:	80 3d ec 04 03 c0 00 	cmp    BYTE PTR ds:0xc00304ec,0x0
c001e72a:	0f 85 bd 00 00 00    	jne    c001e7ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001e730:	83 ec 0c             	sub    esp,0xc
c001e733:	68 14 01 00 00       	push   0x114
c001e738:	e8 26 10 ff ff       	call   c000f763 <malloc>
c001e73d:	83 c4 0c             	add    esp,0xc
c001e740:	89 c3                	mov    ebx,eax
c001e742:	ff 35 98 da 02 c0    	push   DWORD PTR ds:0xc002da98
c001e748:	68 e5 62 02 c0       	push   0xc00262e5
c001e74d:	50                   	push   eax
c001e74e:	e8 37 9a fe ff       	call   c000818a <File::File(char const*, Process*)>
c001e753:	83 c4 10             	add    esp,0x10
c001e756:	85 db                	test   ebx,ebx
c001e758:	0f 84 67 02 00 00    	je     c001e9c5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e75e:	56                   	push   esi
c001e75f:	56                   	push   esi
c001e760:	6a 01                	push   0x1
c001e762:	53                   	push   ebx
c001e763:	e8 40 9a fe ff       	call   c00081a8 <File::open(FileOpenMode)>
c001e768:	83 c4 10             	add    esp,0x10
c001e76b:	85 c0                	test   eax,eax
c001e76d:	0f 85 52 02 00 00    	jne    c001e9c5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e773:	52                   	push   edx
c001e774:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001e778:	50                   	push   eax
c001e779:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e77d:	50                   	push   eax
c001e77e:	53                   	push   ebx
c001e77f:	e8 26 9d fe ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c001e784:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e788:	40                   	inc    eax
c001e789:	89 04 24             	mov    DWORD PTR [esp],eax
c001e78c:	e8 d2 0f ff ff       	call   c000f763 <malloc>
c001e791:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001e795:	a3 e8 04 03 c0       	mov    ds:0xc00304e8,eax
c001e79a:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001e79e:	59                   	pop    ecx
c001e79f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e7a1:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001e7a5:	51                   	push   ecx
c001e7a6:	50                   	push   eax
c001e7a7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e7ab:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e7af:	53                   	push   ebx
c001e7b0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e7b3:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001e7b7:	83 c4 20             	add    esp,0x20
c001e7ba:	89 c8                	mov    eax,ecx
c001e7bc:	99                   	cdq    
c001e7bd:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001e7c1:	0f 85 fe 01 00 00    	jne    c001e9c5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e7c7:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001e7cb:	0f 85 f4 01 00 00    	jne    c001e9c5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e7d1:	83 ec 0c             	sub    esp,0xc
c001e7d4:	53                   	push   ebx
c001e7d5:	e8 2c 9a fe ff       	call   c0008206 <File::close()>
c001e7da:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e7de:	c6 05 ec 04 03 c0 01 	mov    BYTE PTR ds:0xc00304ec,0x1
c001e7e5:	a3 e4 04 03 c0       	mov    ds:0xc00304e4,eax
c001e7ea:	83 c4 10             	add    esp,0x10
c001e7ed:	a1 e4 04 03 c0       	mov    eax,ds:0xc00304e4
c001e7f2:	8b 1d e8 04 03 c0    	mov    ebx,DWORD PTR ds:0xc00304e8
c001e7f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e7fc:	31 f6                	xor    esi,esi
c001e7fe:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001e806:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001e80d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001e812:	31 c9                	xor    ecx,ecx
c001e814:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001e81c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001e821:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001e829:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e82d:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001e835:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e839:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001e83d:	0f 8e 82 01 00 00    	jle    c001e9c5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e843:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001e846:	d4 40                	aam    0x40
c001e848:	d5 39                	aad    0x39
c001e84a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e84e:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001e852:	d4 40                	aam    0x40
c001e854:	d5 39                	aad    0x39
c001e856:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e85a:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001e85e:	d4 40                	aam    0x40
c001e860:	d5 39                	aad    0x39
c001e862:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e866:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001e86a:	d4 40                	aam    0x40
c001e86c:	d5 39                	aad    0x39
c001e86e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e872:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001e876:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001e87a:	3c 56                	cmp    al,0x56
c001e87c:	74 43                	je     c001e8c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001e87e:	d4 40                	aam    0x40
c001e880:	d5 39                	aad    0x39
c001e882:	8d 48 d0             	lea    ecx,[eax-0x30]
c001e885:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001e889:	0f b6 c9             	movzx  ecx,cl
c001e88c:	c1 e1 04             	shl    ecx,0x4
c001e88f:	d4 40                	aam    0x40
c001e891:	d5 39                	aad    0x39
c001e893:	83 e8 30             	sub    eax,0x30
c001e896:	0f b6 c0             	movzx  eax,al
c001e899:	09 c1                	or     ecx,eax
c001e89b:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001e89f:	c1 e1 04             	shl    ecx,0x4
c001e8a2:	d4 40                	aam    0x40
c001e8a4:	d5 39                	aad    0x39
c001e8a6:	83 e8 30             	sub    eax,0x30
c001e8a9:	0f b6 c0             	movzx  eax,al
c001e8ac:	09 c1                	or     ecx,eax
c001e8ae:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001e8b2:	c1 e1 04             	shl    ecx,0x4
c001e8b5:	d4 40                	aam    0x40
c001e8b7:	d5 39                	aad    0x39
c001e8b9:	83 e8 30             	sub    eax,0x30
c001e8bc:	0f b6 c0             	movzx  eax,al
c001e8bf:	09 c1                	or     ecx,eax
c001e8c1:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001e8c5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001e8c9:	3c 58                	cmp    al,0x58
c001e8cb:	74 47                	je     c001e914 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001e8cd:	d4 40                	aam    0x40
c001e8cf:	d5 39                	aad    0x39
c001e8d1:	8d 50 d0             	lea    edx,[eax-0x30]
c001e8d4:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001e8d8:	0f b6 d2             	movzx  edx,dl
c001e8db:	c1 e2 04             	shl    edx,0x4
c001e8de:	d4 40                	aam    0x40
c001e8e0:	d5 39                	aad    0x39
c001e8e2:	83 e8 30             	sub    eax,0x30
c001e8e5:	0f b6 c0             	movzx  eax,al
c001e8e8:	09 c2                	or     edx,eax
c001e8ea:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001e8ee:	c1 e2 04             	shl    edx,0x4
c001e8f1:	d4 40                	aam    0x40
c001e8f3:	d5 39                	aad    0x39
c001e8f5:	83 e8 30             	sub    eax,0x30
c001e8f8:	0f b6 c0             	movzx  eax,al
c001e8fb:	09 c2                	or     edx,eax
c001e8fd:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001e901:	c1 e2 04             	shl    edx,0x4
c001e904:	d4 40                	aam    0x40
c001e906:	d5 39                	aad    0x39
c001e908:	83 e8 30             	sub    eax,0x30
c001e90b:	0f b6 c0             	movzx  eax,al
c001e90e:	09 c2                	or     edx,eax
c001e910:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e914:	83 c6 10             	add    esi,0x10
c001e917:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001e91b:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001e91f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001e923:	83 fa 0a             	cmp    edx,0xa
c001e926:	74 0b                	je     c001e933 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001e928:	47                   	inc    edi
c001e929:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001e92d:	75 19                	jne    c001e948 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001e92f:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001e933:	31 c0                	xor    eax,eax
c001e935:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001e93a:	0f 94 c0             	sete   al
c001e93d:	01 c6                	add    esi,eax
c001e93f:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001e944:	75 0b                	jne    c001e951 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001e946:	eb 14                	jmp    c001e95c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001e948:	46                   	inc    esi
c001e949:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001e94c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001e94f:	eb ca                	jmp    c001e91b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001e951:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001e956:	0f 85 dd fe ff ff    	jne    c001e839 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e95c:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001e961:	74 10                	je     c001e973 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001e963:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001e968:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001e96d:	0f 85 c6 fe ff ff    	jne    c001e839 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e973:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e977:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e97b:	83 e8 30             	sub    eax,0x30
c001e97e:	83 ef 30             	sub    edi,0x30
c001e981:	c1 e0 04             	shl    eax,0x4
c001e984:	09 f8                	or     eax,edi
c001e986:	0f b6 c0             	movzx  eax,al
c001e989:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001e98d:	0f 85 a6 fe ff ff    	jne    c001e839 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e993:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e997:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001e99b:	83 e8 30             	sub    eax,0x30
c001e99e:	83 ef 30             	sub    edi,0x30
c001e9a1:	c1 e0 04             	shl    eax,0x4
c001e9a4:	09 f8                	or     eax,edi
c001e9a6:	0f b6 c0             	movzx  eax,al
c001e9a9:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e9ad:	0f 85 86 fe ff ff    	jne    c001e839 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e9b3:	50                   	push   eax
c001e9b4:	50                   	push   eax
c001e9b5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e9b9:	50                   	push   eax
c001e9ba:	55                   	push   ebp
c001e9bb:	e8 80 1c fe ff       	call   c0000640 <strcpy>
c001e9c0:	83 c4 10             	add    esp,0x10
c001e9c3:	eb 06                	jmp    c001e9cb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001e9c5:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001e9c9:	31 ed                	xor    ebp,ebp
c001e9cb:	81 c4 4c 01 00 00    	add    esp,0x14c
c001e9d1:	89 e8                	mov    eax,ebp
c001e9d3:	5b                   	pop    ebx
c001e9d4:	5e                   	pop    esi
c001e9d5:	5f                   	pop    edi
c001e9d6:	5d                   	pop    ebp
c001e9d7:	c3                   	ret    

c001e9d8 <PCI::checkBus(unsigned char)>:
c001e9d8:	56                   	push   esi
c001e9d9:	53                   	push   ebx
c001e9da:	31 db                	xor    ebx,ebx
c001e9dc:	51                   	push   ecx
c001e9dd:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e9e2:	52                   	push   edx
c001e9e3:	53                   	push   ebx
c001e9e4:	43                   	inc    ebx
c001e9e5:	56                   	push   esi
c001e9e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9ea:	e8 6f 03 00 00       	call   c001ed5e <PCI::checkDevice(unsigned char, unsigned char)>
c001e9ef:	83 c4 10             	add    esp,0x10
c001e9f2:	83 fb 20             	cmp    ebx,0x20
c001e9f5:	75 eb                	jne    c001e9e2 <PCI::checkBus(unsigned char)+0xa>
c001e9f7:	58                   	pop    eax
c001e9f8:	5b                   	pop    ebx
c001e9f9:	5e                   	pop    esi
c001e9fa:	c3                   	ret    
c001e9fb:	90                   	nop

c001e9fc <PCI::foundDevice(PCIDeviceInfo)>:
c001e9fc:	55                   	push   ebp
c001e9fd:	57                   	push   edi
c001e9fe:	56                   	push   esi
c001e9ff:	53                   	push   ebx
c001ea00:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001ea06:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001ea0e:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
c001ea15:	3d ff ff 00 00       	cmp    eax,0xffff
c001ea1a:	0f 84 b7 01 00 00    	je     c001ebd7 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001ea20:	0f b7 9c 24 a4 00 00 00 	movzx  ebx,WORD PTR [esp+0xa4]
c001ea28:	66 81 fb 06 04       	cmp    bx,0x406
c001ea2d:	75 32                	jne    c001ea61 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001ea2f:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001ea37:	50                   	push   eax
c001ea38:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001ea40:	50                   	push   eax
c001ea41:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001ea49:	50                   	push   eax
c001ea4a:	55                   	push   ebp
c001ea4b:	e8 4e fb ff ff       	call   c001e59e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001ea50:	59                   	pop    ecx
c001ea51:	0f b6 c0             	movzx  eax,al
c001ea54:	5b                   	pop    ebx
c001ea55:	50                   	push   eax
c001ea56:	55                   	push   ebp
c001ea57:	e8 7c ff ff ff       	call   c001e9d8 <PCI::checkBus(unsigned char)>
c001ea5c:	e9 16 01 00 00       	jmp    c001eb77 <PCI::foundDevice(PCIDeviceInfo)+0x17b>
c001ea61:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001ea68:	8b 85 cc 00 00 00    	mov    eax,DWORD PTR [ebp+0xcc]
c001ea6e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001ea72:	8b bc 24 a4 00 00 00 	mov    edi,DWORD PTR [esp+0xa4]
c001ea79:	0f b6 b4 24 c4 00 00 00 	movzx  esi,BYTE PTR [esp+0xc4]
c001ea81:	85 c0                	test   eax,eax
c001ea83:	74 36                	je     c001eabb <PCI::foundDevice(PCIDeviceInfo)+0xbf>
c001ea85:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001ea88:	85 d2                	test   edx,edx
c001ea8a:	74 2b                	je     c001eab7 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001ea8c:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001ea92:	31 f9                	xor    ecx,edi
c001ea94:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001ea9a:	75 1b                	jne    c001eab7 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001ea9c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eaa0:	39 8a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ecx
c001eaa6:	75 0f                	jne    c001eab7 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001eaa8:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001eaaf:	39 f2                	cmp    edx,esi
c001eab1:	0f 84 20 01 00 00    	je     c001ebd7 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001eab7:	8b 00                	mov    eax,DWORD PTR [eax]
c001eab9:	eb c6                	jmp    c001ea81 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001eabb:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001eabf:	be 18 63 02 c0       	mov    esi,0xc0026318
c001eac4:	b9 07 00 00 00       	mov    ecx,0x7
c001eac9:	fc                   	cld    
c001eaca:	31 d2                	xor    edx,edx
c001eacc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001eace:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001ead5:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001ead9:	b9 12 00 00 00       	mov    ecx,0x12
c001eade:	83 ec 0c             	sub    esp,0xc
c001eae1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001eae3:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001eaeb:	b9 0a 00 00 00       	mov    ecx,0xa
c001eaf0:	f7 f1                	div    ecx
c001eaf2:	83 c0 30             	add    eax,0x30
c001eaf5:	83 c2 30             	add    edx,0x30
c001eaf8:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001eafc:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001eb00:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001eb08:	31 d2                	xor    edx,edx
c001eb0a:	f7 f1                	div    ecx
c001eb0c:	83 c0 30             	add    eax,0x30
c001eb0f:	83 c2 30             	add    edx,0x30
c001eb12:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001eb16:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001eb1a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001eb1e:	50                   	push   eax
c001eb1f:	e8 ad e6 fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001eb24:	83 c4 10             	add    esp,0x10
c001eb27:	81 fb 01 06 00 00    	cmp    ebx,0x601
c001eb2d:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001eb34:	75 46                	jne    c001eb7c <PCI::foundDevice(PCIDeviceInfo)+0x180>
c001eb36:	83 ec 0c             	sub    esp,0xc
c001eb39:	68 64 01 00 00       	push   0x164
c001eb3e:	e8 20 0c ff ff       	call   c000f763 <malloc>
c001eb43:	89 c3                	mov    ebx,eax
c001eb45:	89 04 24             	mov    DWORD PTR [esp],eax
c001eb48:	e8 3b 11 00 00       	call   c001fc88 <SATABus::SATABus()>
c001eb4d:	58                   	pop    eax
c001eb4e:	5a                   	pop    edx
c001eb4f:	53                   	push   ebx
c001eb50:	55                   	push   ebp
c001eb51:	e8 fe ae fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001eb56:	83 ec 1c             	sub    esp,0x1c
c001eb59:	b9 09 00 00 00       	mov    ecx,0x9
c001eb5e:	89 e7                	mov    edi,esp
c001eb60:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001eb62:	53                   	push   ebx
c001eb63:	e8 32 ae fe ff       	call   c000999a <Device::preOpenPCI(PCIDeviceInfo)>
c001eb68:	83 c4 30             	add    esp,0x30
c001eb6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001eb6d:	6a 00                	push   0x0
c001eb6f:	6a 00                	push   0x0
c001eb71:	6a 00                	push   0x0
c001eb73:	53                   	push   ebx
c001eb74:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001eb77:	83 c4 10             	add    esp,0x10
c001eb7a:	eb 5b                	jmp    c001ebd7 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001eb7c:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001eb82:	75 19                	jne    c001eb9d <PCI::foundDevice(PCIDeviceInfo)+0x1a1>
c001eb84:	83 ec 0c             	sub    esp,0xc
c001eb87:	68 70 02 00 00       	push   0x270
c001eb8c:	e8 d2 0b ff ff       	call   c000f763 <malloc>
c001eb91:	89 c3                	mov    ebx,eax
c001eb93:	89 04 24             	mov    DWORD PTR [esp],eax
c001eb96:	e8 93 02 00 00       	call   c001ee2e <IDE::IDE()>
c001eb9b:	eb b0                	jmp    c001eb4d <PCI::foundDevice(PCIDeviceInfo)+0x151>
c001eb9d:	83 ec 0c             	sub    esp,0xc
c001eba0:	68 58 01 00 00       	push   0x158
c001eba5:	e8 b9 0b ff ff       	call   c000f763 <malloc>
c001ebaa:	89 c3                	mov    ebx,eax
c001ebac:	58                   	pop    eax
c001ebad:	5a                   	pop    edx
c001ebae:	68 fe 62 02 c0       	push   0xc00262fe
c001ebb3:	53                   	push   ebx
c001ebb4:	e8 4f b1 fe ff       	call   c0009d08 <DriverlessDevice::DriverlessDevice(char const*)>
c001ebb9:	59                   	pop    ecx
c001ebba:	5f                   	pop    edi
c001ebbb:	53                   	push   ebx
c001ebbc:	55                   	push   ebp
c001ebbd:	e8 92 ae fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001ebc2:	83 ec 1c             	sub    esp,0x1c
c001ebc5:	b9 09 00 00 00       	mov    ecx,0x9
c001ebca:	89 e7                	mov    edi,esp
c001ebcc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ebce:	53                   	push   ebx
c001ebcf:	e8 c6 ad fe ff       	call   c000999a <Device::preOpenPCI(PCIDeviceInfo)>
c001ebd4:	83 c4 30             	add    esp,0x30
c001ebd7:	81 c4 8c 00 00 00    	add    esp,0x8c
c001ebdd:	5b                   	pop    ebx
c001ebde:	5e                   	pop    esi
c001ebdf:	5f                   	pop    edi
c001ebe0:	5d                   	pop    ebp
c001ebe1:	c3                   	ret    

c001ebe2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001ebe2:	55                   	push   ebp
c001ebe3:	57                   	push   edi
c001ebe4:	56                   	push   esi
c001ebe5:	53                   	push   ebx
c001ebe6:	83 ec 68             	sub    esp,0x68
c001ebe9:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001ebed:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ebf4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ebf8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ebff:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001ec04:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ec08:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ec0f:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001ec14:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ec18:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001ec1d:	6a 0c                	push   0xc
c001ec1f:	57                   	push   edi
c001ec20:	53                   	push   ebx
c001ec21:	56                   	push   esi
c001ec22:	55                   	push   ebp
c001ec23:	e8 c6 f7 ff ff       	call   c001e3ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ec28:	83 c4 20             	add    esp,0x20
c001ec2b:	57                   	push   edi
c001ec2c:	53                   	push   ebx
c001ec2d:	56                   	push   esi
c001ec2e:	55                   	push   ebp
c001ec2f:	e8 b0 f8 ff ff       	call   c001e4e4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001ec34:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001ec39:	57                   	push   edi
c001ec3a:	53                   	push   ebx
c001ec3b:	56                   	push   esi
c001ec3c:	55                   	push   ebp
c001ec3d:	e8 38 f9 ff ff       	call   c001e57a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001ec42:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001ec46:	83 c4 14             	add    esp,0x14
c001ec49:	6a 3c                	push   0x3c
c001ec4b:	57                   	push   edi
c001ec4c:	53                   	push   ebx
c001ec4d:	56                   	push   esi
c001ec4e:	55                   	push   ebp
c001ec4f:	e8 9a f7 ff ff       	call   c001e3ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ec54:	0f b6 c4             	movzx  eax,ah
c001ec57:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ec5b:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001ec5f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001ec63:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c001ec68:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001ec6e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001ec74:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ec78:	83 c4 20             	add    esp,0x20
c001ec7b:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001ec80:	74 30                	je     c001ecb2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001ec82:	31 c0                	xor    eax,eax
c001ec84:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ec88:	7e 28                	jle    c001ecb2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001ec8a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001ec92:	39 cb                	cmp    ebx,ecx
c001ec94:	75 19                	jne    c001ecaf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001ec96:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001ec9e:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001eca2:	75 0b                	jne    c001ecaf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001eca4:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001ecab:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001ecaf:	40                   	inc    eax
c001ecb0:	eb d2                	jmp    c001ec84 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001ecb2:	31 d2                	xor    edx,edx
c001ecb4:	83 ec 0c             	sub    esp,0xc
c001ecb7:	57                   	push   edi
c001ecb8:	53                   	push   ebx
c001ecb9:	56                   	push   esi
c001ecba:	52                   	push   edx
c001ecbb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001ecbf:	55                   	push   ebp
c001ecc0:	e8 01 f9 ff ff       	call   c001e5c6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ecc5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ecc9:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001eccd:	42                   	inc    edx
c001ecce:	83 c4 20             	add    esp,0x20
c001ecd1:	83 fa 06             	cmp    edx,0x6
c001ecd4:	75 de                	jne    c001ecb4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001ecd6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ecda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ecde:	c1 e2 08             	shl    edx,0x8
c001ece1:	83 ec 0c             	sub    esp,0xc
c001ece4:	0f b6 c4             	movzx  eax,ah
c001ece7:	09 d0                	or     eax,edx
c001ece9:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001ecee:	6a 02                	push   0x2
c001ecf0:	57                   	push   edi
c001ecf1:	53                   	push   ebx
c001ecf2:	56                   	push   esi
c001ecf3:	55                   	push   ebp
c001ecf4:	e8 f5 f6 ff ff       	call   c001e3ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ecf9:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001ecfe:	83 c4 20             	add    esp,0x20
c001ed01:	57                   	push   edi
c001ed02:	53                   	push   ebx
c001ed03:	56                   	push   esi
c001ed04:	55                   	push   ebp
c001ed05:	e8 24 f8 ff ff       	call   c001e52e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001ed0a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001ed0e:	57                   	push   edi
c001ed0f:	53                   	push   ebx
c001ed10:	56                   	push   esi
c001ed11:	55                   	push   ebp
c001ed12:	e8 81 f7 ff ff       	call   c001e498 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ed17:	b9 09 00 00 00       	mov    ecx,0x9
c001ed1c:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001ed21:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001ed25:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001ed29:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001ed2d:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001ed31:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001ed35:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001ed39:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001ed3d:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001ed41:	83 ec 0c             	sub    esp,0xc
c001ed44:	fc                   	cld    
c001ed45:	89 e7                	mov    edi,esp
c001ed47:	8d 74 24 58          	lea    esi,[esp+0x58]
c001ed4b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ed4d:	55                   	push   ebp
c001ed4e:	e8 a9 fc ff ff       	call   c001e9fc <PCI::foundDevice(PCIDeviceInfo)>
c001ed53:	81 c4 8c 00 00 00    	add    esp,0x8c
c001ed59:	5b                   	pop    ebx
c001ed5a:	5e                   	pop    esi
c001ed5b:	5f                   	pop    edi
c001ed5c:	5d                   	pop    ebp
c001ed5d:	c3                   	ret    

c001ed5e <PCI::checkDevice(unsigned char, unsigned char)>:
c001ed5e:	55                   	push   ebp
c001ed5f:	57                   	push   edi
c001ed60:	56                   	push   esi
c001ed61:	53                   	push   ebx
c001ed62:	83 ec 0c             	sub    esp,0xc
c001ed65:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ed69:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001ed6e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001ed73:	6a 00                	push   0x0
c001ed75:	56                   	push   esi
c001ed76:	57                   	push   edi
c001ed77:	55                   	push   ebp
c001ed78:	e8 1b f7 ff ff       	call   c001e498 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ed7d:	6a 00                	push   0x0
c001ed7f:	56                   	push   esi
c001ed80:	57                   	push   edi
c001ed81:	55                   	push   ebp
c001ed82:	e8 5b fe ff ff       	call   c001ebe2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ed87:	83 c4 20             	add    esp,0x20
c001ed8a:	6a 00                	push   0x0
c001ed8c:	56                   	push   esi
c001ed8d:	57                   	push   edi
c001ed8e:	55                   	push   ebp
c001ed8f:	e8 28 f7 ff ff       	call   c001e4bc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ed94:	83 c4 10             	add    esp,0x10
c001ed97:	a8 80                	test   al,0x80
c001ed99:	74 2d                	je     c001edc8 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001ed9b:	bb 01 00 00 00       	mov    ebx,0x1
c001eda0:	53                   	push   ebx
c001eda1:	56                   	push   esi
c001eda2:	57                   	push   edi
c001eda3:	55                   	push   ebp
c001eda4:	e8 ef f6 ff ff       	call   c001e498 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001eda9:	83 c4 10             	add    esp,0x10
c001edac:	0f b7 c0             	movzx  eax,ax
c001edaf:	3d ff ff 00 00       	cmp    eax,0xffff
c001edb4:	74 0c                	je     c001edc2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001edb6:	53                   	push   ebx
c001edb7:	56                   	push   esi
c001edb8:	57                   	push   edi
c001edb9:	55                   	push   ebp
c001edba:	e8 23 fe ff ff       	call   c001ebe2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001edbf:	83 c4 10             	add    esp,0x10
c001edc2:	43                   	inc    ebx
c001edc3:	83 fb 08             	cmp    ebx,0x8
c001edc6:	75 d8                	jne    c001eda0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001edc8:	83 c4 0c             	add    esp,0xc
c001edcb:	5b                   	pop    ebx
c001edcc:	5e                   	pop    esi
c001edcd:	5f                   	pop    edi
c001edce:	5d                   	pop    ebp
c001edcf:	c3                   	ret    

c001edd0 <PCI::detect()>:
c001edd0:	56                   	push   esi
c001edd1:	53                   	push   ebx
c001edd2:	53                   	push   ebx
c001edd3:	31 db                	xor    ebx,ebx
c001edd5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001edd9:	6a 00                	push   0x0
c001eddb:	6a 00                	push   0x0
c001eddd:	6a 00                	push   0x0
c001eddf:	56                   	push   esi
c001ede0:	e8 d7 f6 ff ff       	call   c001e4bc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ede5:	83 c4 10             	add    esp,0x10
c001ede8:	a8 80                	test   al,0x80
c001edea:	75 21                	jne    c001ee0d <PCI::detect()+0x3d>
c001edec:	51                   	push   ecx
c001eded:	51                   	push   ecx
c001edee:	6a 00                	push   0x0
c001edf0:	56                   	push   esi
c001edf1:	e8 e2 fb ff ff       	call   c001e9d8 <PCI::checkBus(unsigned char)>
c001edf6:	83 c4 10             	add    esp,0x10
c001edf9:	eb 2a                	jmp    c001ee25 <PCI::detect()+0x55>
c001edfb:	52                   	push   edx
c001edfc:	52                   	push   edx
c001edfd:	53                   	push   ebx
c001edfe:	43                   	inc    ebx
c001edff:	56                   	push   esi
c001ee00:	e8 d3 fb ff ff       	call   c001e9d8 <PCI::checkBus(unsigned char)>
c001ee05:	83 c4 10             	add    esp,0x10
c001ee08:	83 fb 08             	cmp    ebx,0x8
c001ee0b:	74 18                	je     c001ee25 <PCI::detect()+0x55>
c001ee0d:	53                   	push   ebx
c001ee0e:	6a 00                	push   0x0
c001ee10:	6a 00                	push   0x0
c001ee12:	56                   	push   esi
c001ee13:	e8 80 f6 ff ff       	call   c001e498 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ee18:	83 c4 10             	add    esp,0x10
c001ee1b:	0f b7 c0             	movzx  eax,ax
c001ee1e:	3d ff ff 00 00       	cmp    eax,0xffff
c001ee23:	74 d6                	je     c001edfb <PCI::detect()+0x2b>
c001ee25:	58                   	pop    eax
c001ee26:	5b                   	pop    ebx
c001ee27:	5e                   	pop    esi
c001ee28:	c3                   	ret    
c001ee29:	90                   	nop

c001ee2a <IDE::close(int, int, void*)>:
c001ee2a:	83 c8 ff             	or     eax,0xffffffff
c001ee2d:	c3                   	ret    

c001ee2e <IDE::IDE()>:
c001ee2e:	83 ec 0c             	sub    esp,0xc
c001ee31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee35:	83 ec 08             	sub    esp,0x8
c001ee38:	68 a8 63 02 c0       	push   0xc00263a8
c001ee3d:	50                   	push   eax
c001ee3e:	e8 69 af fe ff       	call   c0009dac <HardDiskController::HardDiskController(char const*)>
c001ee43:	83 c4 10             	add    esp,0x10
c001ee46:	ba d4 64 02 c0       	mov    edx,0xc00264d4
c001ee4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee4f:	89 10                	mov    DWORD PTR [eax],edx
c001ee51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee55:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001ee5c:	90                   	nop
c001ee5d:	83 c4 0c             	add    esp,0xc
c001ee60:	c3                   	ret    
c001ee61:	90                   	nop

c001ee62 <IDE::prepareInterrupt(unsigned char)>:
c001ee62:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ee67:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ee6b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001ee73:	c3                   	ret    

c001ee74 <selectDrive(unsigned char, unsigned char)>:
c001ee74:	c3                   	ret    
c001ee75:	90                   	nop

c001ee76 <IDE::getBase(unsigned char)>:
c001ee76:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001ee7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee7f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001ee87:	c3                   	ret    

c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001ee88:	55                   	push   ebp
c001ee89:	57                   	push   edi
c001ee8a:	56                   	push   esi
c001ee8b:	53                   	push   ebx
c001ee8c:	83 ec 1c             	sub    esp,0x1c
c001ee8f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ee93:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ee97:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001ee9a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ee9e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001eea2:	80 f9 03             	cmp    cl,0x3
c001eea5:	77 4f                	ja     c001eef6 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001eea7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eeab:	0f b6 fa             	movzx  edi,dl
c001eeae:	0f b6 db             	movzx  ebx,bl
c001eeb1:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001eeb4:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001eeb9:	80 ca 80             	or     dl,0x80
c001eebc:	52                   	push   edx
c001eebd:	6a 0c                	push   0xc
c001eebf:	57                   	push   edi
c001eec0:	56                   	push   esi
c001eec1:	e8 c2 ff ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eec6:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001eecb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eecf:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001eed3:	ee                   	out    dx,al
c001eed4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001eed9:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001eedd:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001eee1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001eee5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001eeed:	83 c4 2c             	add    esp,0x2c
c001eef0:	5b                   	pop    ebx
c001eef1:	5e                   	pop    esi
c001eef2:	5f                   	pop    edi
c001eef3:	5d                   	pop    ebp
c001eef4:	eb 92                	jmp    c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eef6:	0f b6 cb             	movzx  ecx,bl
c001eef9:	83 f9 07             	cmp    ecx,0x7
c001eefc:	77 12                	ja     c001ef10 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001eefe:	0f b6 d2             	movzx  edx,dl
c001ef01:	0f b6 db             	movzx  ebx,bl
c001ef04:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001ef0c:	01 da                	add    edx,ebx
c001ef0e:	eb 2f                	jmp    c001ef3f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ef10:	83 f9 0d             	cmp    ecx,0xd
c001ef13:	77 13                	ja     c001ef28 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001ef15:	0f b6 d2             	movzx  edx,dl
c001ef18:	0f b6 db             	movzx  ebx,bl
c001ef1b:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001ef22:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ef26:	eb 17                	jmp    c001ef3f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ef28:	83 f9 15             	cmp    ecx,0x15
c001ef2b:	77 13                	ja     c001ef40 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001ef2d:	0f b6 d2             	movzx  edx,dl
c001ef30:	0f b6 db             	movzx  ebx,bl
c001ef33:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001ef3b:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ef3f:	ee                   	out    dx,al
c001ef40:	83 c4 1c             	add    esp,0x1c
c001ef43:	5b                   	pop    ebx
c001ef44:	5e                   	pop    esi
c001ef45:	5f                   	pop    edi
c001ef46:	5d                   	pop    ebp
c001ef47:	c3                   	ret    

c001ef48 <IDE::read(unsigned char, unsigned char)>:
c001ef48:	55                   	push   ebp
c001ef49:	57                   	push   edi
c001ef4a:	56                   	push   esi
c001ef4b:	53                   	push   ebx
c001ef4c:	83 ec 1c             	sub    esp,0x1c
c001ef4f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ef53:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ef57:	8d 43 f8             	lea    eax,[ebx-0x8]
c001ef5a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001ef5e:	3c 03                	cmp    al,0x3
c001ef60:	77 40                	ja     c001efa2 <IDE::read(unsigned char, unsigned char)+0x5a>
c001ef62:	0f b6 f9             	movzx  edi,cl
c001ef65:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001ef68:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ef6d:	0c 80                	or     al,0x80
c001ef6f:	50                   	push   eax
c001ef70:	6a 0c                	push   0xc
c001ef72:	57                   	push   edi
c001ef73:	56                   	push   esi
c001ef74:	e8 0f ff ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ef79:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001ef7e:	0f b6 d3             	movzx  edx,bl
c001ef81:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001ef85:	ec                   	in     al,dx
c001ef86:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ef8a:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001ef8f:	52                   	push   edx
c001ef90:	6a 0c                	push   0xc
c001ef92:	57                   	push   edi
c001ef93:	56                   	push   esi
c001ef94:	e8 ef fe ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ef99:	83 c4 20             	add    esp,0x20
c001ef9c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001efa0:	eb 4c                	jmp    c001efee <IDE::read(unsigned char, unsigned char)+0xa6>
c001efa2:	0f b6 d3             	movzx  edx,bl
c001efa5:	83 fa 07             	cmp    edx,0x7
c001efa8:	77 12                	ja     c001efbc <IDE::read(unsigned char, unsigned char)+0x74>
c001efaa:	0f b6 c9             	movzx  ecx,cl
c001efad:	0f b6 d3             	movzx  edx,bl
c001efb0:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001efb8:	01 c2                	add    edx,eax
c001efba:	eb 31                	jmp    c001efed <IDE::read(unsigned char, unsigned char)+0xa5>
c001efbc:	83 fa 0d             	cmp    edx,0xd
c001efbf:	77 13                	ja     c001efd4 <IDE::read(unsigned char, unsigned char)+0x8c>
c001efc1:	0f b6 c9             	movzx  ecx,cl
c001efc4:	0f b6 d3             	movzx  edx,bl
c001efc7:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001efce:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001efd2:	eb 19                	jmp    c001efed <IDE::read(unsigned char, unsigned char)+0xa5>
c001efd4:	31 c0                	xor    eax,eax
c001efd6:	83 fa 15             	cmp    edx,0x15
c001efd9:	77 13                	ja     c001efee <IDE::read(unsigned char, unsigned char)+0xa6>
c001efdb:	0f b6 c9             	movzx  ecx,cl
c001efde:	0f b6 d3             	movzx  edx,bl
c001efe1:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001efe9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001efed:	ec                   	in     al,dx
c001efee:	83 c4 1c             	add    esp,0x1c
c001eff1:	5b                   	pop    ebx
c001eff2:	5e                   	pop    esi
c001eff3:	5f                   	pop    edi
c001eff4:	5d                   	pop    ebp
c001eff5:	c3                   	ret    

c001eff6 <IDE::waitInterrupt(unsigned char)>:
c001eff6:	55                   	push   ebp
c001eff7:	57                   	push   edi
c001eff8:	56                   	push   esi
c001eff9:	53                   	push   ebx
c001effa:	31 db                	xor    ebx,ebx
c001effc:	83 ec 0c             	sub    esp,0xc
c001efff:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001f003:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001f008:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001f010:	89 e8                	mov    eax,ebp
c001f012:	84 c0                	test   al,al
c001f014:	75 31                	jne    c001f047 <IDE::waitInterrupt(unsigned char)+0x51>
c001f016:	52                   	push   edx
c001f017:	6a 0c                	push   0xc
c001f019:	56                   	push   esi
c001f01a:	57                   	push   edi
c001f01b:	e8 28 ff ff ff       	call   c001ef48 <IDE::read(unsigned char, unsigned char)>
c001f020:	83 c4 10             	add    esp,0x10
c001f023:	a8 01                	test   al,0x1
c001f025:	75 28                	jne    c001f04f <IDE::waitInterrupt(unsigned char)+0x59>
c001f027:	f6 c3 04             	test   bl,0x4
c001f02a:	75 13                	jne    c001f03f <IDE::waitInterrupt(unsigned char)+0x49>
c001f02c:	83 fb 32             	cmp    ebx,0x32
c001f02f:	7e 0e                	jle    c001f03f <IDE::waitInterrupt(unsigned char)+0x49>
c001f031:	50                   	push   eax
c001f032:	50                   	push   eax
c001f033:	6a 00                	push   0x0
c001f035:	6a 64                	push   0x64
c001f037:	e8 dc 86 ff ff       	call   c0017718 <milliTenthSleep(unsigned long long)>
c001f03c:	83 c4 10             	add    esp,0x10
c001f03f:	83 fb 3c             	cmp    ebx,0x3c
c001f042:	74 0b                	je     c001f04f <IDE::waitInterrupt(unsigned char)+0x59>
c001f044:	43                   	inc    ebx
c001f045:	eb c1                	jmp    c001f008 <IDE::waitInterrupt(unsigned char)+0x12>
c001f047:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001f04f:	83 c4 0c             	add    esp,0xc
c001f052:	89 e8                	mov    eax,ebp
c001f054:	5b                   	pop    ebx
c001f055:	5e                   	pop    esi
c001f056:	5f                   	pop    edi
c001f057:	5d                   	pop    ebp
c001f058:	c3                   	ret    

c001f059 <ideChannel0IRQHandler(regs*, void*)>:
c001f059:	83 ec 10             	sub    esp,0x10
c001f05c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f060:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001f067:	6a 07                	push   0x7
c001f069:	6a 00                	push   0x0
c001f06b:	50                   	push   eax
c001f06c:	e8 d7 fe ff ff       	call   c001ef48 <IDE::read(unsigned char, unsigned char)>
c001f071:	83 c4 1c             	add    esp,0x1c
c001f074:	c3                   	ret    

c001f075 <ideChannel1IRQHandler(regs*, void*)>:
c001f075:	83 ec 10             	sub    esp,0x10
c001f078:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f07c:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001f083:	6a 07                	push   0x7
c001f085:	6a 01                	push   0x1
c001f087:	50                   	push   eax
c001f088:	e8 bb fe ff ff       	call   c001ef48 <IDE::read(unsigned char, unsigned char)>
c001f08d:	83 c4 1c             	add    esp,0x1c
c001f090:	c3                   	ret    
c001f091:	90                   	nop

c001f092 <IDE::enableIRQs(unsigned char, bool)>:
c001f092:	57                   	push   edi
c001f093:	b8 02 00 00 00       	mov    eax,0x2
c001f098:	56                   	push   esi
c001f099:	53                   	push   ebx
c001f09a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f09e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f0a2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001f0a7:	74 02                	je     c001f0ab <IDE::enableIRQs(unsigned char, bool)+0x19>
c001f0a9:	31 c0                	xor    eax,eax
c001f0ab:	0f b6 db             	movzx  ebx,bl
c001f0ae:	bf 04 00 00 00       	mov    edi,0x4
c001f0b3:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001f0ba:	50                   	push   eax
c001f0bb:	6a 0c                	push   0xc
c001f0bd:	53                   	push   ebx
c001f0be:	56                   	push   esi
c001f0bf:	e8 c4 fd ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f0c4:	83 c4 10             	add    esp,0x10
c001f0c7:	50                   	push   eax
c001f0c8:	6a 0c                	push   0xc
c001f0ca:	53                   	push   ebx
c001f0cb:	56                   	push   esi
c001f0cc:	e8 77 fe ff ff       	call   c001ef48 <IDE::read(unsigned char, unsigned char)>
c001f0d1:	83 c4 10             	add    esp,0x10
c001f0d4:	4f                   	dec    edi
c001f0d5:	75 f0                	jne    c001f0c7 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001f0d7:	5b                   	pop    ebx
c001f0d8:	5e                   	pop    esi
c001f0d9:	5f                   	pop    edi
c001f0da:	c3                   	ret    
c001f0db:	90                   	nop

c001f0dc <IDE::open(int, int, void*)>:
c001f0dc:	57                   	push   edi
c001f0dd:	56                   	push   esi
c001f0de:	53                   	push   ebx
c001f0df:	83 ec 10             	sub    esp,0x10
c001f0e2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f0e6:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001f0ef:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001f0f8:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001f0ff:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001f106:	0f 85 84 02 00 00    	jne    c001f390 <IDE::open(int, int, void*)+0x2b4>
c001f10c:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001f112:	a8 70                	test   al,0x70
c001f114:	75 44                	jne    c001f15a <IDE::open(int, int, void*)+0x7e>
c001f116:	ba 20 84 00 00       	mov    edx,0x8420
c001f11b:	0f a3 c2             	bt     edx,eax
c001f11e:	73 3a                	jae    c001f15a <IDE::open(int, int, void*)+0x7e>
c001f120:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001f126:	83 ec 0c             	sub    esp,0xc
c001f129:	83 e0 fc             	and    eax,0xfffffffc
c001f12c:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001f133:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001f139:	83 e0 fc             	and    eax,0xfffffffc
c001f13c:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001f143:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001f149:	83 e0 fc             	and    eax,0xfffffffc
c001f14c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f153:	68 4d 3a 02 c0       	push   0xc0023a4d
c001f158:	eb 60                	jmp    c001f1ba <IDE::open(int, int, void*)+0xde>
c001f15a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001f164:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001f16e:	be 64 00 00 00       	mov    esi,0x64
c001f173:	57                   	push   edi
c001f174:	57                   	push   edi
c001f175:	68 c0 63 02 c0       	push   0xc00263c0
c001f17a:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001f17e:	57                   	push   edi
c001f17f:	e8 bc 14 fe ff       	call   c0000640 <strcpy>
c001f184:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001f18b:	31 d2                	xor    edx,edx
c001f18d:	89 c8                	mov    eax,ecx
c001f18f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001f192:	f7 f6                	div    esi
c001f194:	be 0a 00 00 00       	mov    esi,0xa
c001f199:	83 c0 30             	add    eax,0x30
c001f19c:	31 d2                	xor    edx,edx
c001f19e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f1a2:	89 c8                	mov    eax,ecx
c001f1a4:	f7 f6                	div    esi
c001f1a6:	89 d1                	mov    ecx,edx
c001f1a8:	31 d2                	xor    edx,edx
c001f1aa:	83 c1 30             	add    ecx,0x30
c001f1ad:	f7 f6                	div    esi
c001f1af:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001f1b3:	83 c2 30             	add    edx,0x30
c001f1b6:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001f1ba:	e8 12 e0 fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001f1bf:	bf f8 0c 00 00       	mov    edi,0xcf8
c001f1c4:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001f1cb:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001f1d2:	c1 e1 10             	shl    ecx,0x10
c001f1d5:	c1 e0 0b             	shl    eax,0xb
c001f1d8:	83 c4 10             	add    esp,0x10
c001f1db:	09 c1                	or     ecx,eax
c001f1dd:	89 fa                	mov    edx,edi
c001f1df:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001f1e6:	c1 e0 08             	shl    eax,0x8
c001f1e9:	09 c1                	or     ecx,eax
c001f1eb:	89 c8                	mov    eax,ecx
c001f1ed:	0d 08 00 00 80       	or     eax,0x80000008
c001f1f2:	ef                   	out    dx,eax
c001f1f3:	be fc 0c 00 00       	mov    esi,0xcfc
c001f1f8:	89 f2                	mov    edx,esi
c001f1fa:	ed                   	in     eax,dx
c001f1fb:	c1 e8 10             	shr    eax,0x10
c001f1fe:	3d ff ff 00 00       	cmp    eax,0xffff
c001f203:	0f 84 e5 00 00 00    	je     c001f2ee <IDE::open(int, int, void*)+0x212>
c001f209:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001f20f:	89 fa                	mov    edx,edi
c001f211:	89 c8                	mov    eax,ecx
c001f213:	ef                   	out    dx,eax
c001f214:	b0 fe                	mov    al,0xfe
c001f216:	89 f2                	mov    edx,esi
c001f218:	ee                   	out    dx,al
c001f219:	89 c8                	mov    eax,ecx
c001f21b:	89 fa                	mov    edx,edi
c001f21d:	ef                   	out    dx,eax
c001f21e:	89 f2                	mov    edx,esi
c001f220:	ed                   	in     eax,dx
c001f221:	3c fe                	cmp    al,0xfe
c001f223:	0f 85 85 00 00 00    	jne    c001f2ae <IDE::open(int, int, void*)+0x1d2>
c001f229:	83 ec 0c             	sub    esp,0xc
c001f22c:	68 83 3a 02 c0       	push   0xc0023a83
c001f231:	e8 9b df fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001f236:	c7 04 24 c6 63 02 c0 	mov    DWORD PTR [esp],0xc00263c6
c001f23d:	e8 3a 7d fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001f242:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001f24c:	c7 04 24 68 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d68
c001f253:	e8 79 df fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001f258:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001f25f:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001f266:	c1 e1 10             	shl    ecx,0x10
c001f269:	c1 e0 08             	shl    eax,0x8
c001f26c:	89 fa                	mov    edx,edi
c001f26e:	09 c1                	or     ecx,eax
c001f270:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001f277:	c1 e0 0b             	shl    eax,0xb
c001f27a:	09 c1                	or     ecx,eax
c001f27c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001f282:	89 c8                	mov    eax,ecx
c001f284:	ef                   	out    dx,eax
c001f285:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001f28b:	89 f2                	mov    edx,esi
c001f28d:	ee                   	out    dx,al
c001f28e:	89 c8                	mov    eax,ecx
c001f290:	89 fa                	mov    edx,edi
c001f292:	ef                   	out    dx,eax
c001f293:	89 f2                	mov    edx,esi
c001f295:	ed                   	in     eax,dx
c001f296:	0f b6 c0             	movzx  eax,al
c001f299:	83 c4 10             	add    esp,0x10
c001f29c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001f2a2:	74 5a                	je     c001f2fe <IDE::open(int, int, void*)+0x222>
c001f2a4:	83 ec 0c             	sub    esp,0xc
c001f2a7:	68 db 63 02 c0       	push   0xc00263db
c001f2ac:	eb 48                	jmp    c001f2f6 <IDE::open(int, int, void*)+0x21a>
c001f2ae:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001f2b7:	75 2b                	jne    c001f2e4 <IDE::open(int, int, void*)+0x208>
c001f2b9:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001f2c0:	3d 80 00 00 00       	cmp    eax,0x80
c001f2c5:	74 07                	je     c001f2ce <IDE::open(int, int, void*)+0x1f2>
c001f2c7:	3d 8a 00 00 00       	cmp    eax,0x8a
c001f2cc:	75 16                	jne    c001f2e4 <IDE::open(int, int, void*)+0x208>
c001f2ce:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001f2d5:	83 ec 0c             	sub    esp,0xc
c001f2d8:	68 3e 35 02 c0       	push   0xc002353e
c001f2dd:	e8 ef de fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001f2e2:	eb 17                	jmp    c001f2fb <IDE::open(int, int, void*)+0x21f>
c001f2e4:	83 ec 0c             	sub    esp,0xc
c001f2e7:	68 e3 63 02 c0       	push   0xc00263e3
c001f2ec:	eb 08                	jmp    c001f2f6 <IDE::open(int, int, void*)+0x21a>
c001f2ee:	83 ec 0c             	sub    esp,0xc
c001f2f1:	68 14 64 02 c0       	push   0xc0026414
c001f2f6:	e8 c5 08 ff ff       	call   c000fbc0 <KePanic(char const*)>
c001f2fb:	83 c4 10             	add    esp,0x10
c001f2fe:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001f305:	0f 84 bf 00 00 00    	je     c001f3ca <IDE::open(int, int, void*)+0x2ee>
c001f30b:	83 ec 0c             	sub    esp,0xc
c001f30e:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001f314:	83 e0 fc             	and    eax,0xfffffffc
c001f317:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001f31e:	83 c0 08             	add    eax,0x8
c001f321:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001f328:	68 3e 64 02 c0       	push   0xc002643e
c001f32d:	e8 4a 7c fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001f332:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001f339:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001f340:	50                   	push   eax
c001f341:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001f348:	50                   	push   eax
c001f349:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001f350:	50                   	push   eax
c001f351:	ff 35 e0 04 03 c0    	push   DWORD PTR ds:0xc00304e0
c001f357:	e8 92 f0 ff ff       	call   c001e3ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f35c:	83 c4 18             	add    esp,0x18
c001f35f:	83 c8 07             	or     eax,0x7
c001f362:	0f b7 c0             	movzx  eax,ax
c001f365:	50                   	push   eax
c001f366:	6a 04                	push   0x4
c001f368:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001f36f:	50                   	push   eax
c001f370:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001f377:	50                   	push   eax
c001f378:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001f37f:	50                   	push   eax
c001f380:	ff 35 e0 04 03 c0    	push   DWORD PTR ds:0xc00304e0
c001f386:	e8 9f f2 ff ff       	call   c001e62a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001f38b:	83 c4 20             	add    esp,0x20
c001f38e:	eb 3a                	jmp    c001f3ca <IDE::open(int, int, void*)+0x2ee>
c001f390:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001f396:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001f39d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001f3a4:	05 06 02 00 00       	add    eax,0x206
c001f3a9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f3b0:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001f3b7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001f3be:	05 06 02 00 00       	add    eax,0x206
c001f3c3:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f3ca:	83 ec 0c             	sub    esp,0xc
c001f3cd:	68 20 43 02 c0       	push   0xc0024320
c001f3d2:	e8 fa dd fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001f3d7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001f3dd:	83 c4 10             	add    esp,0x10
c001f3e0:	89 c2                	mov    edx,eax
c001f3e2:	83 e2 0f             	and    edx,0xf
c001f3e5:	83 fa 08             	cmp    edx,0x8
c001f3e8:	75 0a                	jne    c001f3f4 <IDE::open(int, int, void*)+0x318>
c001f3ea:	83 e8 02             	sub    eax,0x2
c001f3ed:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f3f4:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001f3fa:	89 c2                	mov    edx,eax
c001f3fc:	83 e2 0f             	and    edx,0xf
c001f3ff:	83 fa 08             	cmp    edx,0x8
c001f402:	75 0a                	jne    c001f40e <IDE::open(int, int, void*)+0x332>
c001f404:	83 e8 02             	sub    eax,0x2
c001f407:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f40e:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001f415:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001f41c:	89 d0                	mov    eax,edx
c001f41e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f421:	8d 7a 01             	lea    edi,[edx+0x1]
c001f424:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f428:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001f42c:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001f430:	83 e1 3f             	and    ecx,0x3f
c001f433:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001f437:	89 f9                	mov    ecx,edi
c001f439:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001f440:	0f b6 c9             	movzx  ecx,cl
c001f443:	8d 78 02             	lea    edi,[eax+0x2]
c001f446:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f449:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f44d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001f451:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001f455:	83 e2 3f             	and    edx,0x3f
c001f458:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001f45c:	89 f9                	mov    ecx,edi
c001f45e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001f464:	0f b6 d1             	movzx  edx,cl
c001f467:	8d 78 03             	lea    edi,[eax+0x3]
c001f46a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f46d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f471:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001f475:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001f479:	83 e1 3f             	and    ecx,0x3f
c001f47c:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001f480:	89 fa                	mov    edx,edi
c001f482:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001f488:	0f b6 ca             	movzx  ecx,dl
c001f48b:	8d 78 04             	lea    edi,[eax+0x4]
c001f48e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f491:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f495:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001f499:	89 fa                	mov    edx,edi
c001f49b:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001f4a1:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001f4a5:	83 e2 3f             	and    edx,0x3f
c001f4a8:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001f4ac:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001f4b3:	66 85 f6             	test   si,si
c001f4b6:	74 24                	je     c001f4dc <IDE::open(int, int, void*)+0x400>
c001f4b8:	89 f9                	mov    ecx,edi
c001f4ba:	83 c0 05             	add    eax,0x5
c001f4bd:	0f b6 d1             	movzx  edx,cl
c001f4c0:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f4c3:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f4c7:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001f4cb:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001f4d1:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001f4d5:	83 e0 3f             	and    eax,0x3f
c001f4d8:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001f4dc:	83 ec 0c             	sub    esp,0xc
c001f4df:	68 56 64 02 c0       	push   0xc0026456
c001f4e4:	e8 e8 dc fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001f4e9:	58                   	pop    eax
c001f4ea:	5a                   	pop    edx
c001f4eb:	6a 00                	push   0x0
c001f4ed:	53                   	push   ebx
c001f4ee:	e8 6f f9 ff ff       	call   c001ee62 <IDE::prepareInterrupt(unsigned char)>
c001f4f3:	59                   	pop    ecx
c001f4f4:	5e                   	pop    esi
c001f4f5:	6a 01                	push   0x1
c001f4f7:	53                   	push   ebx
c001f4f8:	e8 65 f9 ff ff       	call   c001ee62 <IDE::prepareInterrupt(unsigned char)>
c001f4fd:	c7 04 24 d8 5c 02 c0 	mov    DWORD PTR [esp],0xc0025cd8
c001f504:	e8 c8 dc fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001f509:	83 c4 0c             	add    esp,0xc
c001f50c:	6a 00                	push   0x0
c001f50e:	6a 00                	push   0x0
c001f510:	53                   	push   ebx
c001f511:	e8 7c fb ff ff       	call   c001f092 <IDE::enableIRQs(unsigned char, bool)>
c001f516:	83 c4 0c             	add    esp,0xc
c001f519:	6a 00                	push   0x0
c001f51b:	6a 01                	push   0x1
c001f51d:	53                   	push   ebx
c001f51e:	e8 6f fb ff ff       	call   c001f092 <IDE::enableIRQs(unsigned char, bool)>
c001f523:	c7 04 24 58 64 02 c0 	mov    DWORD PTR [esp],0xc0026458
c001f52a:	e8 a2 dc fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001f52f:	83 c4 10             	add    esp,0x10
c001f532:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001f539:	74 3c                	je     c001f577 <IDE::open(int, int, void*)+0x49b>
c001f53b:	83 ec 0c             	sub    esp,0xc
c001f53e:	53                   	push   ebx
c001f53f:	6a 01                	push   0x1
c001f541:	68 59 f0 01 c0       	push   0xc001f059
c001f546:	6a 0e                	push   0xe
c001f548:	53                   	push   ebx
c001f549:	e8 b2 a4 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f54e:	83 c4 14             	add    esp,0x14
c001f551:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001f557:	53                   	push   ebx
c001f558:	6a 01                	push   0x1
c001f55a:	68 75 f0 01 c0       	push   0xc001f075
c001f55f:	6a 0f                	push   0xf
c001f561:	53                   	push   ebx
c001f562:	e8 99 a4 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f567:	83 c4 14             	add    esp,0x14
c001f56a:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001f570:	68 6e 3f 02 c0       	push   0xc0023f6e
c001f575:	eb 40                	jmp    c001f5b7 <IDE::open(int, int, void*)+0x4db>
c001f577:	83 ec 0c             	sub    esp,0xc
c001f57a:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001f584:	53                   	push   ebx
c001f585:	6a 00                	push   0x0
c001f587:	68 59 f0 01 c0       	push   0xc001f059
c001f58c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001f592:	53                   	push   ebx
c001f593:	e8 68 a4 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f598:	83 c4 14             	add    esp,0x14
c001f59b:	53                   	push   ebx
c001f59c:	6a 00                	push   0x0
c001f59e:	68 75 f0 01 c0       	push   0xc001f075
c001f5a3:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001f5a9:	53                   	push   ebx
c001f5aa:	e8 51 a4 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f5af:	83 c4 14             	add    esp,0x14
c001f5b2:	68 6e 4c 02 c0       	push   0xc0024c6e
c001f5b7:	e8 15 dc fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001f5bc:	83 c4 10             	add    esp,0x10
c001f5bf:	83 ec 0c             	sub    esp,0xc
c001f5c2:	68 5a 64 02 c0       	push   0xc002645a
c001f5c7:	e8 05 dc fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001f5cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f5ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f5d1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001f5d4:	c7 04 24 e1 50 02 c0 	mov    DWORD PTR [esp],0xc00250e1
c001f5db:	e8 f1 db fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001f5e0:	83 c4 0c             	add    esp,0xc
c001f5e3:	6a 07                	push   0x7
c001f5e5:	6a 00                	push   0x0
c001f5e7:	53                   	push   ebx
c001f5e8:	e8 5b f9 ff ff       	call   c001ef48 <IDE::read(unsigned char, unsigned char)>
c001f5ed:	83 c4 0c             	add    esp,0xc
c001f5f0:	6a 07                	push   0x7
c001f5f2:	6a 01                	push   0x1
c001f5f4:	53                   	push   ebx
c001f5f5:	e8 4e f9 ff ff       	call   c001ef48 <IDE::read(unsigned char, unsigned char)>
c001f5fa:	c7 04 24 78 49 02 c0 	mov    DWORD PTR [esp],0xc0024978
c001f601:	e8 cb db fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001f606:	83 c4 0c             	add    esp,0xc
c001f609:	6a 01                	push   0x1
c001f60b:	6a 00                	push   0x0
c001f60d:	53                   	push   ebx
c001f60e:	e8 7f fa ff ff       	call   c001f092 <IDE::enableIRQs(unsigned char, bool)>
c001f613:	83 c4 0c             	add    esp,0xc
c001f616:	6a 01                	push   0x1
c001f618:	6a 01                	push   0x1
c001f61a:	53                   	push   ebx
c001f61b:	e8 72 fa ff ff       	call   c001f092 <IDE::enableIRQs(unsigned char, bool)>
c001f620:	c7 04 24 5d 64 02 c0 	mov    DWORD PTR [esp],0xc002645d
c001f627:	e8 a5 db fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001f62c:	83 c4 20             	add    esp,0x20
c001f62f:	31 c0                	xor    eax,eax
c001f631:	5b                   	pop    ebx
c001f632:	5e                   	pop    esi
c001f633:	5f                   	pop    edi
c001f634:	c3                   	ret    
c001f635:	90                   	nop

c001f636 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001f636:	55                   	push   ebp
c001f637:	57                   	push   edi
c001f638:	56                   	push   esi
c001f639:	53                   	push   ebx
c001f63a:	83 ec 1c             	sub    esp,0x1c
c001f63d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001f641:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f645:	8d 42 f8             	lea    eax,[edx-0x8]
c001f648:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f64c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001f650:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f654:	3c 03                	cmp    al,0x3
c001f656:	77 5a                	ja     c001f6b2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001f658:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f65c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f660:	0f b6 db             	movzx  ebx,bl
c001f663:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001f666:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f66b:	0c 80                	or     al,0x80
c001f66d:	50                   	push   eax
c001f66e:	6a 0c                	push   0xc
c001f670:	53                   	push   ebx
c001f671:	56                   	push   esi
c001f672:	e8 11 f8 ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f677:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001f67c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f680:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f684:	0f b6 d2             	movzx  edx,dl
c001f687:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001f68b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f68d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f692:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001f696:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001f69a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f69e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001f6a6:	83 c4 2c             	add    esp,0x2c
c001f6a9:	5b                   	pop    ebx
c001f6aa:	5e                   	pop    esi
c001f6ab:	5f                   	pop    edi
c001f6ac:	5d                   	pop    ebp
c001f6ad:	e9 d6 f7 ff ff       	jmp    c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f6b2:	0f b6 c2             	movzx  eax,dl
c001f6b5:	83 f8 07             	cmp    eax,0x7
c001f6b8:	77 12                	ja     c001f6cc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001f6ba:	0f b6 c2             	movzx  eax,dl
c001f6bd:	0f b6 db             	movzx  ebx,bl
c001f6c0:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001f6c8:	01 c2                	add    edx,eax
c001f6ca:	eb 2f                	jmp    c001f6fb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001f6cc:	83 f8 0d             	cmp    eax,0xd
c001f6cf:	77 13                	ja     c001f6e4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001f6d1:	0f b6 db             	movzx  ebx,bl
c001f6d4:	0f b6 d2             	movzx  edx,dl
c001f6d7:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001f6de:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001f6e2:	eb 17                	jmp    c001f6fb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001f6e4:	83 f8 15             	cmp    eax,0x15
c001f6e7:	77 14                	ja     c001f6fd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001f6e9:	0f b6 db             	movzx  ebx,bl
c001f6ec:	0f b6 d2             	movzx  edx,dl
c001f6ef:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001f6f7:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001f6fb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f6fd:	83 c4 1c             	add    esp,0x1c
c001f700:	5b                   	pop    ebx
c001f701:	5e                   	pop    esi
c001f702:	5f                   	pop    edi
c001f703:	5d                   	pop    ebp
c001f704:	c3                   	ret    
c001f705:	90                   	nop

c001f706 <IDE::detect()>:
c001f706:	55                   	push   ebp
c001f707:	57                   	push   edi
c001f708:	56                   	push   esi
c001f709:	53                   	push   ebx
c001f70a:	81 ec 28 02 00 00    	sub    esp,0x228
c001f710:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001f717:	68 5f 64 02 c0       	push   0xc002645f
c001f71c:	e8 b0 da fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001f721:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001f727:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001f72b:	83 c4 10             	add    esp,0x10
c001f72e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001f733:	0f 85 2f 04 00 00    	jne    c001fb68 <IDE::detect()+0x462>
c001f739:	83 ec 0c             	sub    esp,0xc
c001f73c:	31 f6                	xor    esi,esi
c001f73e:	68 62 64 02 c0       	push   0xc0026462
c001f743:	31 ff                	xor    edi,edi
c001f745:	e8 87 da fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001f74a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001f751:	83 c4 10             	add    esp,0x10
c001f754:	83 ec 0c             	sub    esp,0xc
c001f757:	68 65 64 02 c0       	push   0xc0026465
c001f75c:	e8 70 da fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001f761:	83 c4 10             	add    esp,0x10
c001f764:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f76b:	83 ec 0c             	sub    esp,0xc
c001f76e:	31 ed                	xor    ebp,ebp
c001f770:	68 68 64 02 c0       	push   0xc0026468
c001f775:	e8 57 da fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001f77a:	89 f8                	mov    eax,edi
c001f77c:	c1 e0 06             	shl    eax,0x6
c001f77f:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001f787:	c7 04 24 6b 64 02 c0 	mov    DWORD PTR [esp],0xc002646b
c001f78e:	e8 3e da fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001f793:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f797:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f79b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f79f:	c1 e0 04             	shl    eax,0x4
c001f7a2:	83 c8 a0             	or     eax,0xffffffa0
c001f7a5:	0f b6 c0             	movzx  eax,al
c001f7a8:	50                   	push   eax
c001f7a9:	6a 06                	push   0x6
c001f7ab:	56                   	push   esi
c001f7ac:	53                   	push   ebx
c001f7ad:	e8 d6 f6 ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7b2:	83 c4 1c             	add    esp,0x1c
c001f7b5:	6a 0c                	push   0xc
c001f7b7:	56                   	push   esi
c001f7b8:	53                   	push   ebx
c001f7b9:	e8 8a f7 ff ff       	call   c001ef48 <IDE::read(unsigned char, unsigned char)>
c001f7be:	83 c4 0c             	add    esp,0xc
c001f7c1:	6a 0c                	push   0xc
c001f7c3:	56                   	push   esi
c001f7c4:	53                   	push   ebx
c001f7c5:	e8 7e f7 ff ff       	call   c001ef48 <IDE::read(unsigned char, unsigned char)>
c001f7ca:	83 c4 0c             	add    esp,0xc
c001f7cd:	6a 0c                	push   0xc
c001f7cf:	56                   	push   esi
c001f7d0:	53                   	push   ebx
c001f7d1:	e8 72 f7 ff ff       	call   c001ef48 <IDE::read(unsigned char, unsigned char)>
c001f7d6:	83 c4 0c             	add    esp,0xc
c001f7d9:	6a 0c                	push   0xc
c001f7db:	56                   	push   esi
c001f7dc:	53                   	push   ebx
c001f7dd:	e8 66 f7 ff ff       	call   c001ef48 <IDE::read(unsigned char, unsigned char)>
c001f7e2:	c7 04 24 6e 64 02 c0 	mov    DWORD PTR [esp],0xc002646e
c001f7e9:	e8 e3 d9 fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001f7ee:	68 ec 00 00 00       	push   0xec
c001f7f3:	6a 07                	push   0x7
c001f7f5:	56                   	push   esi
c001f7f6:	53                   	push   ebx
c001f7f7:	e8 8c f6 ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7fc:	83 c4 1c             	add    esp,0x1c
c001f7ff:	6a 0c                	push   0xc
c001f801:	56                   	push   esi
c001f802:	53                   	push   ebx
c001f803:	e8 40 f7 ff ff       	call   c001ef48 <IDE::read(unsigned char, unsigned char)>
c001f808:	83 c4 0c             	add    esp,0xc
c001f80b:	6a 0c                	push   0xc
c001f80d:	56                   	push   esi
c001f80e:	53                   	push   ebx
c001f80f:	e8 34 f7 ff ff       	call   c001ef48 <IDE::read(unsigned char, unsigned char)>
c001f814:	83 c4 0c             	add    esp,0xc
c001f817:	6a 0c                	push   0xc
c001f819:	56                   	push   esi
c001f81a:	53                   	push   ebx
c001f81b:	e8 28 f7 ff ff       	call   c001ef48 <IDE::read(unsigned char, unsigned char)>
c001f820:	83 c4 0c             	add    esp,0xc
c001f823:	6a 0c                	push   0xc
c001f825:	56                   	push   esi
c001f826:	53                   	push   ebx
c001f827:	e8 1c f7 ff ff       	call   c001ef48 <IDE::read(unsigned char, unsigned char)>
c001f82c:	c7 04 24 71 64 02 c0 	mov    DWORD PTR [esp],0xc0026471
c001f833:	e8 99 d9 fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001f838:	83 c4 0c             	add    esp,0xc
c001f83b:	6a 0c                	push   0xc
c001f83d:	56                   	push   esi
c001f83e:	53                   	push   ebx
c001f83f:	e8 04 f7 ff ff       	call   c001ef48 <IDE::read(unsigned char, unsigned char)>
c001f844:	83 c4 10             	add    esp,0x10
c001f847:	84 c0                	test   al,al
c001f849:	75 1f                	jne    c001f86a <IDE::detect()+0x164>
c001f84b:	83 ec 0c             	sub    esp,0xc
c001f84e:	68 74 64 02 c0       	push   0xc0026474
c001f853:	e8 79 d9 fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001f858:	e9 e9 02 00 00       	jmp    c001fb46 <IDE::detect()+0x440>
c001f85d:	a8 80                	test   al,0x80
c001f85f:	74 21                	je     c001f882 <IDE::detect()+0x17c>
c001f861:	45                   	inc    ebp
c001f862:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001f868:	7f 1e                	jg     c001f888 <IDE::detect()+0x182>
c001f86a:	50                   	push   eax
c001f86b:	6a 0c                	push   0xc
c001f86d:	56                   	push   esi
c001f86e:	53                   	push   ebx
c001f86f:	e8 d4 f6 ff ff       	call   c001ef48 <IDE::read(unsigned char, unsigned char)>
c001f874:	83 c4 10             	add    esp,0x10
c001f877:	a8 01                	test   al,0x1
c001f879:	74 e2                	je     c001f85d <IDE::detect()+0x157>
c001f87b:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001f880:	eb 23                	jmp    c001f8a5 <IDE::detect()+0x19f>
c001f882:	a8 08                	test   al,0x8
c001f884:	74 db                	je     c001f861 <IDE::detect()+0x15b>
c001f886:	eb 18                	jmp    c001f8a0 <IDE::detect()+0x19a>
c001f888:	50                   	push   eax
c001f889:	50                   	push   eax
c001f88a:	6a 00                	push   0x0
c001f88c:	6a 32                	push   0x32
c001f88e:	e8 85 7e ff ff       	call   c0017718 <milliTenthSleep(unsigned long long)>
c001f893:	83 c4 10             	add    esp,0x10
c001f896:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001f89c:	75 cc                	jne    c001f86a <IDE::detect()+0x164>
c001f89e:	eb db                	jmp    c001f87b <IDE::detect()+0x175>
c001f8a0:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001f8a5:	83 ec 0c             	sub    esp,0xc
c001f8a8:	68 77 64 02 c0       	push   0xc0026477
c001f8ad:	e8 1f d9 fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001f8b2:	83 c4 10             	add    esp,0x10
c001f8b5:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f8ba:	74 5f                	je     c001f91b <IDE::detect()+0x215>
c001f8bc:	51                   	push   ecx
c001f8bd:	6a 04                	push   0x4
c001f8bf:	56                   	push   esi
c001f8c0:	53                   	push   ebx
c001f8c1:	e8 82 f6 ff ff       	call   c001ef48 <IDE::read(unsigned char, unsigned char)>
c001f8c6:	83 c4 0c             	add    esp,0xc
c001f8c9:	89 c5                	mov    ebp,eax
c001f8cb:	6a 05                	push   0x5
c001f8cd:	56                   	push   esi
c001f8ce:	53                   	push   ebx
c001f8cf:	e8 74 f6 ff ff       	call   c001ef48 <IDE::read(unsigned char, unsigned char)>
c001f8d4:	83 c4 10             	add    esp,0x10
c001f8d7:	89 e9                	mov    ecx,ebp
c001f8d9:	0f b6 c0             	movzx  eax,al
c001f8dc:	0f b6 e9             	movzx  ebp,cl
c001f8df:	83 fd 14             	cmp    ebp,0x14
c001f8e2:	75 07                	jne    c001f8eb <IDE::detect()+0x1e5>
c001f8e4:	3d eb 00 00 00       	cmp    eax,0xeb
c001f8e9:	eb 0e                	jmp    c001f8f9 <IDE::detect()+0x1f3>
c001f8eb:	3d 96 00 00 00       	cmp    eax,0x96
c001f8f0:	0f 85 53 02 00 00    	jne    c001fb49 <IDE::detect()+0x443>
c001f8f6:	83 fd 69             	cmp    ebp,0x69
c001f8f9:	0f 85 4a 02 00 00    	jne    c001fb49 <IDE::detect()+0x443>
c001f8ff:	68 a1 00 00 00       	push   0xa1
c001f904:	6a 07                	push   0x7
c001f906:	56                   	push   esi
c001f907:	53                   	push   ebx
c001f908:	e8 7b f5 ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f90d:	58                   	pop    eax
c001f90e:	5a                   	pop    edx
c001f90f:	6a 00                	push   0x0
c001f911:	6a 0a                	push   0xa
c001f913:	e8 00 7e ff ff       	call   c0017718 <milliTenthSleep(unsigned long long)>
c001f918:	83 c4 10             	add    esp,0x10
c001f91b:	83 ec 0c             	sub    esp,0xc
c001f91e:	89 fd                	mov    ebp,edi
c001f920:	68 7a 64 02 c0       	push   0xc002647a
c001f925:	c1 e5 06             	shl    ebp,0x6
c001f928:	e8 a4 d8 fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001f92d:	01 dd                	add    ebp,ebx
c001f92f:	8d 54 24 20          	lea    edx,[esp+0x20]
c001f933:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001f93a:	52                   	push   edx
c001f93b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001f93f:	6a 00                	push   0x0
c001f941:	56                   	push   esi
c001f942:	53                   	push   ebx
c001f943:	e8 ee fc ff ff       	call   c001f636 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001f948:	83 c4 14             	add    esp,0x14
c001f94b:	68 7e 64 02 c0       	push   0xc002647e
c001f950:	e8 7c d8 fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001f955:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001f95a:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001f961:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001f968:	89 f0                	mov    eax,esi
c001f96a:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001f970:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f974:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001f97a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f97e:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001f985:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001f98d:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001f994:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001f99c:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001f9a2:	c7 04 24 82 64 02 c0 	mov    DWORD PTR [esp],0xc0026482
c001f9a9:	e8 23 d8 fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001f9ae:	83 c4 10             	add    esp,0x10
c001f9b1:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001f9b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f9bc:	74 09                	je     c001f9c7 <IDE::detect()+0x2c1>
c001f9be:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001f9c5:	eb 07                	jmp    c001f9ce <IDE::detect()+0x2c8>
c001f9c7:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001f9ce:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f9d2:	89 f8                	mov    eax,edi
c001f9d4:	83 ec 0c             	sub    esp,0xc
c001f9d7:	c1 e0 06             	shl    eax,0x6
c001f9da:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001f9dd:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001f9e3:	68 86 64 02 c0       	push   0xc0026486
c001f9e8:	e8 e4 d7 fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001f9ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f9f1:	89 e8                	mov    eax,ebp
c001f9f3:	83 c4 10             	add    esp,0x10
c001f9f6:	8d 6a 28             	lea    ebp,[edx+0x28]
c001f9f9:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001f9fc:	83 c0 02             	add    eax,0x2
c001f9ff:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001fa05:	83 c2 02             	add    edx,0x2
c001fa08:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001fa0b:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001fa11:	39 d5                	cmp    ebp,edx
c001fa13:	75 e4                	jne    c001f9f9 <IDE::detect()+0x2f3>
c001fa15:	89 f8                	mov    eax,edi
c001fa17:	c1 e0 06             	shl    eax,0x6
c001fa1a:	01 d8                	add    eax,ebx
c001fa1c:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001fa23:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001fa2a:	c1 ea 09             	shr    edx,0x9
c001fa2d:	83 e2 01             	and    edx,0x1
c001fa30:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001fa37:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001fa3d:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001fa41:	74 0c                	je     c001fa4f <IDE::detect()+0x349>
c001fa43:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001fa4c:	0f 95 c2             	setne  dl
c001fa4f:	83 ec 0c             	sub    esp,0xc
c001fa52:	89 fd                	mov    ebp,edi
c001fa54:	c1 e5 06             	shl    ebp,0x6
c001fa57:	01 dd                	add    ebp,ebx
c001fa59:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001fa5f:	68 8a 64 02 c0       	push   0xc002648a
c001fa64:	e8 68 d7 fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001fa69:	83 c4 10             	add    esp,0x10
c001fa6c:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001fa71:	75 66                	jne    c001fad9 <IDE::detect()+0x3d3>
c001fa73:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001fa7a:	0f 84 b8 00 00 00    	je     c001fb38 <IDE::detect()+0x432>
c001fa80:	83 ec 0c             	sub    esp,0xc
c001fa83:	68 8e 64 02 c0       	push   0xc002648e
c001fa88:	e8 44 d7 fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001fa8d:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001fa94:	e8 ca fc fe ff       	call   c000f763 <malloc>
c001fa99:	89 04 24             	mov    DWORD PTR [esp],eax
c001fa9c:	89 c5                	mov    ebp,eax
c001fa9e:	e8 43 05 00 00       	call   c001ffe6 <ATA::ATA()>
c001faa3:	c7 04 24 92 64 02 c0 	mov    DWORD PTR [esp],0xc0026492
c001faaa:	e8 22 d7 fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001faaf:	59                   	pop    ecx
c001fab0:	58                   	pop    eax
c001fab1:	55                   	push   ebp
c001fab2:	53                   	push   ebx
c001fab3:	e8 9c 9f fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001fab8:	c7 04 24 97 64 02 c0 	mov    DWORD PTR [esp],0xc0026497
c001fabf:	e8 0d d7 fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001fac4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fac7:	53                   	push   ebx
c001fac8:	57                   	push   edi
c001fac9:	6a 00                	push   0x0
c001facb:	55                   	push   ebp
c001facc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001facf:	83 c4 14             	add    esp,0x14
c001fad2:	68 9c 64 02 c0       	push   0xc002649c
c001fad7:	eb 57                	jmp    c001fb30 <IDE::detect()+0x42a>
c001fad9:	83 ec 0c             	sub    esp,0xc
c001fadc:	68 a1 64 02 c0       	push   0xc00264a1
c001fae1:	e8 eb d6 fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001fae6:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001faed:	e8 71 fc fe ff       	call   c000f763 <malloc>
c001faf2:	89 04 24             	mov    DWORD PTR [esp],eax
c001faf5:	89 c5                	mov    ebp,eax
c001faf7:	e8 98 0c 00 00       	call   c0020794 <ATAPI::ATAPI()>
c001fafc:	c7 04 24 a7 64 02 c0 	mov    DWORD PTR [esp],0xc00264a7
c001fb03:	e8 c9 d6 fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001fb08:	58                   	pop    eax
c001fb09:	5a                   	pop    edx
c001fb0a:	55                   	push   ebp
c001fb0b:	53                   	push   ebx
c001fb0c:	e8 43 9f fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001fb11:	c7 04 24 ae 64 02 c0 	mov    DWORD PTR [esp],0xc00264ae
c001fb18:	e8 b4 d6 fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001fb1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fb20:	53                   	push   ebx
c001fb21:	57                   	push   edi
c001fb22:	6a 00                	push   0x0
c001fb24:	55                   	push   ebp
c001fb25:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fb28:	83 c4 14             	add    esp,0x14
c001fb2b:	68 b5 64 02 c0       	push   0xc00264b5
c001fb30:	e8 9c d6 fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001fb35:	83 c4 10             	add    esp,0x10
c001fb38:	83 ec 0c             	sub    esp,0xc
c001fb3b:	47                   	inc    edi
c001fb3c:	68 bc 64 02 c0       	push   0xc00264bc
c001fb41:	e8 8b d6 fe ff       	call   c000d1d1 <KeSetBootMessage(char const*)>
c001fb46:	83 c4 10             	add    esp,0x10
c001fb49:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001fb4d:	74 0c                	je     c001fb5b <IDE::detect()+0x455>
c001fb4f:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001fb56:	e9 10 fc ff ff       	jmp    c001f76b <IDE::detect()+0x65>
c001fb5b:	4e                   	dec    esi
c001fb5c:	74 0a                	je     c001fb68 <IDE::detect()+0x462>
c001fb5e:	be 01 00 00 00       	mov    esi,0x1
c001fb63:	e9 ec fb ff ff       	jmp    c001f754 <IDE::detect()+0x4e>
c001fb68:	81 c4 1c 02 00 00    	add    esp,0x21c
c001fb6e:	5b                   	pop    ebx
c001fb6f:	5e                   	pop    esi
c001fb70:	5f                   	pop    edi
c001fb71:	5d                   	pop    ebp
c001fb72:	c3                   	ret    
c001fb73:	90                   	nop

c001fb74 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001fb74:	55                   	push   ebp
c001fb75:	57                   	push   edi
c001fb76:	56                   	push   esi
c001fb77:	53                   	push   ebx
c001fb78:	83 ec 1c             	sub    esp,0x1c
c001fb7b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001fb7f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001fb83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001fb8b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001fb8f:	88 c3                	mov    bl,al
c001fb91:	25 ff 00 00 00       	and    eax,0xff
c001fb96:	0f 84 88 00 00 00    	je     c001fc24 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001fb9c:	83 ec 0c             	sub    esp,0xc
c001fb9f:	89 c7                	mov    edi,eax
c001fba1:	68 c0 64 02 c0       	push   0xc00264c0
c001fba6:	e8 d1 73 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001fbab:	83 c4 10             	add    esp,0x10
c001fbae:	83 ff 01             	cmp    edi,0x1
c001fbb1:	74 6b                	je     c001fc1e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001fbb3:	83 ff 02             	cmp    edi,0x2
c001fbb6:	75 58                	jne    c001fc10 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001fbb8:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001fbbd:	01 ff                	add    edi,edi
c001fbbf:	50                   	push   eax
c001fbc0:	09 fe                	or     esi,edi
c001fbc2:	6a 01                	push   0x1
c001fbc4:	89 f0                	mov    eax,esi
c001fbc6:	0f b6 f0             	movzx  esi,al
c001fbc9:	c1 e6 06             	shl    esi,0x6
c001fbcc:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001fbd4:	50                   	push   eax
c001fbd5:	55                   	push   ebp
c001fbd6:	e8 6d f3 ff ff       	call   c001ef48 <IDE::read(unsigned char, unsigned char)>
c001fbdb:	83 c4 10             	add    esp,0x10
c001fbde:	a8 01                	test   al,0x1
c001fbe0:	74 02                	je     c001fbe4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001fbe2:	b3 07                	mov    bl,0x7
c001fbe4:	a8 02                	test   al,0x2
c001fbe6:	74 02                	je     c001fbea <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001fbe8:	b3 03                	mov    bl,0x3
c001fbea:	a8 04                	test   al,0x4
c001fbec:	74 02                	je     c001fbf0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001fbee:	b3 14                	mov    bl,0x14
c001fbf0:	a8 08                	test   al,0x8
c001fbf2:	74 02                	je     c001fbf6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001fbf4:	b3 03                	mov    bl,0x3
c001fbf6:	a8 10                	test   al,0x10
c001fbf8:	74 02                	je     c001fbfc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001fbfa:	b3 15                	mov    bl,0x15
c001fbfc:	a8 20                	test   al,0x20
c001fbfe:	74 02                	je     c001fc02 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001fc00:	b3 03                	mov    bl,0x3
c001fc02:	a8 40                	test   al,0x40
c001fc04:	74 02                	je     c001fc08 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001fc06:	b3 16                	mov    bl,0x16
c001fc08:	a8 80                	test   al,0x80
c001fc0a:	74 18                	je     c001fc24 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001fc0c:	b3 0d                	mov    bl,0xd
c001fc0e:	eb 14                	jmp    c001fc24 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001fc10:	83 ff 03             	cmp    edi,0x3
c001fc13:	74 0d                	je     c001fc22 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001fc15:	83 ff 04             	cmp    edi,0x4
c001fc18:	75 0a                	jne    c001fc24 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001fc1a:	b3 08                	mov    bl,0x8
c001fc1c:	eb 06                	jmp    c001fc24 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001fc1e:	b3 13                	mov    bl,0x13
c001fc20:	eb 02                	jmp    c001fc24 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001fc22:	b3 17                	mov    bl,0x17
c001fc24:	83 c4 1c             	add    esp,0x1c
c001fc27:	88 d8                	mov    al,bl
c001fc29:	5b                   	pop    ebx
c001fc2a:	5e                   	pop    esi
c001fc2b:	5f                   	pop    edi
c001fc2c:	5d                   	pop    ebp
c001fc2d:	c3                   	ret    

c001fc2e <IDE::polling(unsigned char, unsigned int)>:
c001fc2e:	57                   	push   edi
c001fc2f:	56                   	push   esi
c001fc30:	53                   	push   ebx
c001fc31:	bb 04 00 00 00       	mov    ebx,0x4
c001fc36:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001fc3a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001fc3f:	52                   	push   edx
c001fc40:	6a 0c                	push   0xc
c001fc42:	56                   	push   esi
c001fc43:	57                   	push   edi
c001fc44:	e8 ff f2 ff ff       	call   c001ef48 <IDE::read(unsigned char, unsigned char)>
c001fc49:	83 c4 10             	add    esp,0x10
c001fc4c:	4b                   	dec    ebx
c001fc4d:	75 f0                	jne    c001fc3f <IDE::polling(unsigned char, unsigned int)+0x11>
c001fc4f:	bb a0 86 01 00       	mov    ebx,0x186a0
c001fc54:	50                   	push   eax
c001fc55:	6a 0c                	push   0xc
c001fc57:	56                   	push   esi
c001fc58:	57                   	push   edi
c001fc59:	e8 ea f2 ff ff       	call   c001ef48 <IDE::read(unsigned char, unsigned char)>
c001fc5e:	83 c4 10             	add    esp,0x10
c001fc61:	a8 01                	test   al,0x1
c001fc63:	75 17                	jne    c001fc7c <IDE::polling(unsigned char, unsigned int)+0x4e>
c001fc65:	a8 20                	test   al,0x20
c001fc67:	75 0f                	jne    c001fc78 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001fc69:	4b                   	dec    ebx
c001fc6a:	74 10                	je     c001fc7c <IDE::polling(unsigned char, unsigned int)+0x4e>
c001fc6c:	a8 80                	test   al,0x80
c001fc6e:	75 e4                	jne    c001fc54 <IDE::polling(unsigned char, unsigned int)+0x26>
c001fc70:	a8 08                	test   al,0x8
c001fc72:	74 e0                	je     c001fc54 <IDE::polling(unsigned char, unsigned int)+0x26>
c001fc74:	31 c0                	xor    eax,eax
c001fc76:	eb 06                	jmp    c001fc7e <IDE::polling(unsigned char, unsigned int)+0x50>
c001fc78:	b0 01                	mov    al,0x1
c001fc7a:	eb 02                	jmp    c001fc7e <IDE::polling(unsigned char, unsigned int)+0x50>
c001fc7c:	b0 02                	mov    al,0x2
c001fc7e:	5b                   	pop    ebx
c001fc7f:	5e                   	pop    esi
c001fc80:	5f                   	pop    edi
c001fc81:	c3                   	ret    

c001fc82 <SATABus::close(int, int, void*)>:
c001fc82:	31 c0                	xor    eax,eax
c001fc84:	c3                   	ret    
c001fc85:	90                   	nop

c001fc86 <SATABus::detect()>:
c001fc86:	c3                   	ret    
c001fc87:	90                   	nop

c001fc88 <SATABus::SATABus()>:
c001fc88:	83 ec 0c             	sub    esp,0xc
c001fc8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc8f:	83 ec 08             	sub    esp,0x8
c001fc92:	68 f8 64 02 c0       	push   0xc00264f8
c001fc97:	50                   	push   eax
c001fc98:	e8 0f a1 fe ff       	call   c0009dac <HardDiskController::HardDiskController(char const*)>
c001fc9d:	83 c4 10             	add    esp,0x10
c001fca0:	ba 24 65 02 c0       	mov    edx,0xc0026524
c001fca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca9:	89 10                	mov    DWORD PTR [eax],edx
c001fcab:	83 ec 0c             	sub    esp,0xc
c001fcae:	6a 50                	push   0x50
c001fcb0:	e8 d0 01 ff ff       	call   c000fe85 <Phys::allocateContiguousPages(int)>
c001fcb5:	83 c4 10             	add    esp,0x10
c001fcb8:	89 c2                	mov    edx,eax
c001fcba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcbe:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001fcc4:	83 ec 0c             	sub    esp,0xc
c001fcc7:	6a 50                	push   0x50
c001fcc9:	e8 25 35 ff ff       	call   c00131f3 <Virt::allocateKernelVirtualPages(int)>
c001fcce:	83 c4 10             	add    esp,0x10
c001fcd1:	89 c2                	mov    edx,eax
c001fcd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001fcdd:	a1 90 d2 02 c0       	mov    eax,ds:0xc002d290
c001fce2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fce6:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001fcec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fcf0:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001fcf6:	83 ec 0c             	sub    esp,0xc
c001fcf9:	6a 03                	push   0x3
c001fcfb:	6a 50                	push   0x50
c001fcfd:	51                   	push   ecx
c001fcfe:	52                   	push   edx
c001fcff:	50                   	push   eax
c001fd00:	e8 bb 3d ff ff       	call   c0013ac0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001fd05:	83 c4 20             	add    esp,0x20
c001fd08:	90                   	nop
c001fd09:	83 c4 0c             	add    esp,0xc
c001fd0c:	c3                   	ret    
c001fd0d:	90                   	nop

c001fd0e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001fd0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fd12:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001fd15:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001fd18:	09 c2                	or     edx,eax
c001fd1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd1e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001fd24:	8b 08                	mov    ecx,DWORD PTR [eax]
c001fd26:	31 c0                	xor    eax,eax
c001fd28:	c1 e9 08             	shr    ecx,0x8
c001fd2b:	83 e1 0f             	and    ecx,0xf
c001fd2e:	39 c8                	cmp    eax,ecx
c001fd30:	74 0a                	je     c001fd3c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001fd32:	f6 c2 01             	test   dl,0x1
c001fd35:	74 08                	je     c001fd3f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001fd37:	d1 ea                	shr    edx,1
c001fd39:	40                   	inc    eax
c001fd3a:	eb f2                	jmp    c001fd2e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001fd3c:	83 c8 ff             	or     eax,0xffffffff
c001fd3f:	c3                   	ret    

c001fd40 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001fd40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fd44:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001fd47:	89 c2                	mov    edx,eax
c001fd49:	c1 ea 08             	shr    edx,0x8
c001fd4c:	83 e2 0f             	and    edx,0xf
c001fd4f:	4a                   	dec    edx
c001fd50:	75 32                	jne    c001fd84 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001fd52:	83 e0 0f             	and    eax,0xf
c001fd55:	83 f8 03             	cmp    eax,0x3
c001fd58:	75 2a                	jne    c001fd84 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001fd5a:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001fd5d:	b8 02 00 00 00       	mov    eax,0x2
c001fd62:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001fd68:	74 1c                	je     c001fd86 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001fd6a:	b8 04 00 00 00       	mov    eax,0x4
c001fd6f:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001fd75:	74 0f                	je     c001fd86 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001fd77:	31 c0                	xor    eax,eax
c001fd79:	83 fa 03             	cmp    edx,0x3
c001fd7c:	0f 94 c0             	sete   al
c001fd7f:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001fd83:	c3                   	ret    
c001fd84:	31 c0                	xor    eax,eax
c001fd86:	c3                   	ret    
c001fd87:	90                   	nop

c001fd88 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001fd88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fd8c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fd8f:	0f ba e2 0f          	bt     edx,0xf
c001fd93:	72 f7                	jb     c001fd8c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001fd95:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fd98:	83 ca 10             	or     edx,0x10
c001fd9b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fd9e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fda1:	83 ca 01             	or     edx,0x1
c001fda4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fda7:	c3                   	ret    

c001fda8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001fda8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fdac:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fdaf:	83 e2 fe             	and    edx,0xfffffffe
c001fdb2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fdb5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fdb8:	83 e2 ef             	and    edx,0xffffffef
c001fdbb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fdbe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fdc1:	0f ba e2 0e          	bt     edx,0xe
c001fdc5:	72 f7                	jb     c001fdbe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001fdc7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fdca:	0f ba e2 0f          	bt     edx,0xf
c001fdce:	72 ee                	jb     c001fdbe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001fdd0:	c3                   	ret    
c001fdd1:	90                   	nop

c001fdd2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001fdd2:	55                   	push   ebp
c001fdd3:	57                   	push   edi
c001fdd4:	56                   	push   esi
c001fdd5:	53                   	push   ebx
c001fdd6:	83 ec 1c             	sub    esp,0x1c
c001fdd9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fddd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001fde1:	53                   	push   ebx
c001fde2:	56                   	push   esi
c001fde3:	e8 c0 ff ff ff       	call   c001fda8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001fde8:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001fdec:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001fdf2:	83 ec 0c             	sub    esp,0xc
c001fdf5:	c1 e5 0a             	shl    ebp,0xa
c001fdf8:	01 e8                	add    eax,ebp
c001fdfa:	89 03                	mov    DWORD PTR [ebx],eax
c001fdfc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fdfe:	68 00 04 00 00       	push   0x400
c001fe03:	6a 00                	push   0x0
c001fe05:	50                   	push   eax
c001fe06:	e8 e5 06 fe ff       	call   c00004f0 <memset>
c001fe0b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001fe11:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001fe15:	01 e8                	add    eax,ebp
c001fe17:	83 c4 1c             	add    esp,0x1c
c001fe1a:	89 03                	mov    DWORD PTR [ebx],eax
c001fe1c:	c1 e2 08             	shl    edx,0x8
c001fe1f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001fe26:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001fe2c:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001fe32:	01 f8                	add    eax,edi
c001fe34:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001fe37:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001fe3a:	68 00 01 00 00       	push   0x100
c001fe3f:	6a 00                	push   0x0
c001fe41:	50                   	push   eax
c001fe42:	e8 a9 06 fe ff       	call   c00004f0 <memset>
c001fe47:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001fe4d:	01 fa                	add    edx,edi
c001fe4f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001fe53:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001fe56:	c1 e7 0d             	shl    edi,0xd
c001fe59:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001fe60:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001fe66:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001fe6c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fe70:	31 ff                	xor    edi,edi
c001fe72:	83 c4 10             	add    esp,0x10
c001fe75:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001fe7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe7f:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001fe85:	83 c5 20             	add    ebp,0x20
c001fe88:	01 f8                	add    eax,edi
c001fe8a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001fe8d:	52                   	push   edx
c001fe8e:	68 00 01 00 00       	push   0x100
c001fe93:	6a 00                	push   0x0
c001fe95:	50                   	push   eax
c001fe96:	e8 55 06 fe ff       	call   c00004f0 <memset>
c001fe9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fe9f:	83 c4 10             	add    esp,0x10
c001fea2:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001fea8:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001feaf:	01 f8                	add    eax,edi
c001feb1:	81 c7 00 01 00 00    	add    edi,0x100
c001feb7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001feba:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001fec0:	75 b3                	jne    c001fe75 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001fec2:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001fec9:	50                   	push   eax
c001feca:	50                   	push   eax
c001fecb:	53                   	push   ebx
c001fecc:	56                   	push   esi
c001fecd:	e8 b6 fe ff ff       	call   c001fd88 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001fed2:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001fed9:	83 c4 2c             	add    esp,0x2c
c001fedc:	5b                   	pop    ebx
c001fedd:	5e                   	pop    esi
c001fede:	5f                   	pop    edi
c001fedf:	5d                   	pop    ebp
c001fee0:	c3                   	ret    
c001fee1:	90                   	nop

c001fee2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001fee2:	55                   	push   ebp
c001fee3:	57                   	push   edi
c001fee4:	56                   	push   esi
c001fee5:	53                   	push   ebx
c001fee6:	31 db                	xor    ebx,ebx
c001fee8:	83 ec 0c             	sub    esp,0xc
c001feeb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001feef:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fef3:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001fef6:	f7 c7 01 00 00 00    	test   edi,0x1
c001fefc:	74 7a                	je     c001ff78 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001fefe:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ff02:	89 d8                	mov    eax,ebx
c001ff04:	c1 e0 07             	shl    eax,0x7
c001ff07:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001ff0e:	55                   	push   ebp
c001ff0f:	56                   	push   esi
c001ff10:	e8 2b fe ff ff       	call   c001fd40 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001ff15:	5a                   	pop    edx
c001ff16:	83 f8 01             	cmp    eax,0x1
c001ff19:	59                   	pop    ecx
c001ff1a:	75 21                	jne    c001ff3d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001ff1c:	50                   	push   eax
c001ff1d:	53                   	push   ebx
c001ff1e:	55                   	push   ebp
c001ff1f:	56                   	push   esi
c001ff20:	e8 ad fe ff ff       	call   c001fdd2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ff25:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001ff2c:	e8 32 f8 fe ff       	call   c000f763 <malloc>
c001ff31:	89 c5                	mov    ebp,eax
c001ff33:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff36:	e8 25 0f 00 00       	call   c0020e60 <SATA::SATA()>
c001ff3b:	eb 24                	jmp    c001ff61 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001ff3d:	83 f8 04             	cmp    eax,0x4
c001ff40:	75 36                	jne    c001ff78 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001ff42:	51                   	push   ecx
c001ff43:	53                   	push   ebx
c001ff44:	55                   	push   ebp
c001ff45:	56                   	push   esi
c001ff46:	e8 87 fe ff ff       	call   c001fdd2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ff4b:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001ff52:	e8 0c f8 fe ff       	call   c000f763 <malloc>
c001ff57:	89 c5                	mov    ebp,eax
c001ff59:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff5c:	e8 97 12 00 00       	call   c00211f8 <SATAPI::SATAPI()>
c001ff61:	58                   	pop    eax
c001ff62:	5a                   	pop    edx
c001ff63:	55                   	push   ebp
c001ff64:	56                   	push   esi
c001ff65:	e8 ea 9a fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001ff6a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ff6d:	56                   	push   esi
c001ff6e:	6a 00                	push   0x0
c001ff70:	53                   	push   ebx
c001ff71:	55                   	push   ebp
c001ff72:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ff75:	83 c4 20             	add    esp,0x20
c001ff78:	d1 ef                	shr    edi,1
c001ff7a:	43                   	inc    ebx
c001ff7b:	83 fb 20             	cmp    ebx,0x20
c001ff7e:	0f 85 72 ff ff ff    	jne    c001fef6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001ff84:	83 c4 0c             	add    esp,0xc
c001ff87:	5b                   	pop    ebx
c001ff88:	5e                   	pop    esi
c001ff89:	5f                   	pop    edi
c001ff8a:	5d                   	pop    ebp
c001ff8b:	c3                   	ret    

c001ff8c <SATABus::open(int, int, void*)>:
c001ff8c:	53                   	push   ebx
c001ff8d:	83 ec 08             	sub    esp,0x8
c001ff90:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ff94:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001ff9a:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001ffa0:	e8 77 72 ff ff       	call   c001721c <KeDisablePreemption()>
c001ffa5:	52                   	push   edx
c001ffa6:	52                   	push   edx
c001ffa7:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001ffad:	53                   	push   ebx
c001ffae:	e8 2f ff ff ff       	call   c001fee2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001ffb3:	e8 8c 72 ff ff       	call   c0017244 <KeRestorePreemption()>
c001ffb8:	31 c0                	xor    eax,eax
c001ffba:	83 c4 18             	add    esp,0x18
c001ffbd:	5b                   	pop    ebx
c001ffbe:	c3                   	ret    
c001ffbf:	90                   	nop

c001ffc0 <ATA::close(int, int, void*)>:
c001ffc0:	83 ec 0c             	sub    esp,0xc
c001ffc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffc7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ffcd:	85 c0                	test   eax,eax
c001ffcf:	74 0c                	je     c001ffdd <ATA::close(int, int, void*)+0x1d>
c001ffd1:	83 ec 0c             	sub    esp,0xc
c001ffd4:	8b 10                	mov    edx,DWORD PTR [eax]
c001ffd6:	50                   	push   eax
c001ffd7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ffda:	83 c4 10             	add    esp,0x10
c001ffdd:	31 c0                	xor    eax,eax
c001ffdf:	83 c4 0c             	add    esp,0xc
c001ffe2:	c3                   	ret    
c001ffe3:	90                   	nop

c001ffe4 <ATA::powerSaving(PowerSavingLevel)>:
c001ffe4:	c3                   	ret    
c001ffe5:	90                   	nop

c001ffe6 <ATA::ATA()>:
c001ffe6:	83 ec 0c             	sub    esp,0xc
c001ffe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffed:	83 ec 04             	sub    esp,0x4
c001fff0:	68 00 02 00 00       	push   0x200
c001fff5:	68 a5 66 02 c0       	push   0xc00266a5
c001fffa:	50                   	push   eax
c001fffb:	e8 36 9e fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020000:	83 c4 10             	add    esp,0x10
c0020003:	ba 0c 66 02 c0       	mov    edx,0xc002660c
c0020008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002000c:	89 10                	mov    DWORD PTR [eax],edx
c002000e:	90                   	nop
c002000f:	83 c4 0c             	add    esp,0xc
c0020012:	c3                   	ret    
c0020013:	90                   	nop

c0020014 <ATA::flush(bool)>:
c0020014:	53                   	push   ebx
c0020015:	83 ec 08             	sub    esp,0x8
c0020018:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002001c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020021:	83 f8 01             	cmp    eax,0x1
c0020024:	19 c0                	sbb    eax,eax
c0020026:	83 e0 fd             	and    eax,0xfffffffd
c0020029:	05 ea 00 00 00       	add    eax,0xea
c002002e:	50                   	push   eax
c002002f:	6a 07                	push   0x7
c0020031:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020038:	50                   	push   eax
c0020039:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002003f:	e8 44 ee ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020044:	83 c4 0c             	add    esp,0xc
c0020047:	6a 00                	push   0x0
c0020049:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020050:	50                   	push   eax
c0020051:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020057:	e8 d2 fb ff ff       	call   c001fc2e <IDE::polling(unsigned char, unsigned int)>
c002005c:	83 c4 18             	add    esp,0x18
c002005f:	5b                   	pop    ebx
c0020060:	c3                   	ret    
c0020061:	90                   	nop

c0020062 <ATA::readyForCommand()>:
c0020062:	56                   	push   esi
c0020063:	53                   	push   ebx
c0020064:	31 db                	xor    ebx,ebx
c0020066:	50                   	push   eax
c0020067:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002006b:	50                   	push   eax
c002006c:	6a 0c                	push   0xc
c002006e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0020075:	50                   	push   eax
c0020076:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002007c:	e8 c7 ee ff ff       	call   c001ef48 <IDE::read(unsigned char, unsigned char)>
c0020081:	83 c4 10             	add    esp,0x10
c0020084:	a8 88                	test   al,0x88
c0020086:	74 20                	je     c00200a8 <ATA::readyForCommand()+0x46>
c0020088:	43                   	inc    ebx
c0020089:	83 fb 63             	cmp    ebx,0x63
c002008c:	7e dd                	jle    c002006b <ATA::readyForCommand()+0x9>
c002008e:	51                   	push   ecx
c002008f:	51                   	push   ecx
c0020090:	6a 00                	push   0x0
c0020092:	6a 0a                	push   0xa
c0020094:	e8 7f 76 ff ff       	call   c0017718 <milliTenthSleep(unsigned long long)>
c0020099:	83 c4 10             	add    esp,0x10
c002009c:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00200a2:	75 c7                	jne    c002006b <ATA::readyForCommand()+0x9>
c00200a4:	31 c0                	xor    eax,eax
c00200a6:	eb 02                	jmp    c00200aa <ATA::readyForCommand()+0x48>
c00200a8:	b0 01                	mov    al,0x1
c00200aa:	5a                   	pop    edx
c00200ab:	5b                   	pop    ebx
c00200ac:	5e                   	pop    esi
c00200ad:	c3                   	ret    

c00200ae <ATA::access(unsigned long long, int, void*, bool)>:
c00200ae:	55                   	push   ebp
c00200af:	57                   	push   edi
c00200b0:	56                   	push   esi
c00200b1:	53                   	push   ebx
c00200b2:	83 ec 2c             	sub    esp,0x2c
c00200b5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00200b9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00200bd:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00200c1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00200c5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00200c9:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00200cd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00200d1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00200d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00200db:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00200e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00200e5:	c1 e0 06             	shl    eax,0x6
c00200e8:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00200f0:	74 5d                	je     c002014f <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00200f2:	89 fa                	mov    edx,edi
c00200f4:	89 f0                	mov    eax,esi
c00200f6:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00200fa:	c1 ea 1c             	shr    edx,0x1c
c00200fd:	89 d1                	mov    ecx,edx
c00200ff:	09 c1                	or     ecx,eax
c0020101:	74 25                	je     c0020128 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0020103:	31 ed                	xor    ebp,ebp
c0020105:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002010c:	89 fa                	mov    edx,edi
c002010e:	89 f0                	mov    eax,esi
c0020110:	0f ad d0             	shrd   eax,edx,cl
c0020113:	d3 ea                	shr    edx,cl
c0020115:	f6 c1 20             	test   cl,0x20
c0020118:	74 02                	je     c002011c <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002011a:	89 d0                	mov    eax,edx
c002011c:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0020120:	45                   	inc    ebp
c0020121:	83 fd 06             	cmp    ebp,0x6
c0020124:	75 df                	jne    c0020105 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0020126:	eb 76                	jmp    c002019e <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0020128:	89 f0                	mov    eax,esi
c002012a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002012f:	89 fa                	mov    edx,edi
c0020131:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0020138:	0f ac d0 10          	shrd   eax,edx,0x10
c002013c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0020141:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0020145:	c1 ee 18             	shr    esi,0x18
c0020148:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002014d:	eb 56                	jmp    c00201a5 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002014f:	6a 00                	push   0x0
c0020151:	6a 3f                	push   0x3f
c0020153:	57                   	push   edi
c0020154:	56                   	push   esi
c0020155:	e8 ba 20 00 00       	call   c0022214 <__umoddi3>
c002015a:	83 c4 10             	add    esp,0x10
c002015d:	40                   	inc    eax
c002015e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0020162:	6a 00                	push   0x0
c0020164:	68 f0 03 00 00       	push   0x3f0
c0020169:	57                   	push   edi
c002016a:	56                   	push   esi
c002016b:	e8 a4 1f 00 00       	call   c0022114 <__udivdi3>
c0020170:	83 c4 10             	add    esp,0x10
c0020173:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0020178:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002017f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0020184:	6a 00                	push   0x0
c0020186:	6a 3f                	push   0x3f
c0020188:	57                   	push   edi
c0020189:	56                   	push   esi
c002018a:	e8 85 1f 00 00       	call   c0022114 <__udivdi3>
c002018f:	83 c4 10             	add    esp,0x10
c0020192:	83 e0 0f             	and    eax,0xf
c0020195:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002019a:	89 c6                	mov    esi,eax
c002019c:	eb 07                	jmp    c00201a5 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002019e:	31 f6                	xor    esi,esi
c00201a0:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00201a5:	55                   	push   ebp
c00201a6:	6a 00                	push   0x0
c00201a8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00201af:	50                   	push   eax
c00201b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00201b4:	e8 d9 ee ff ff       	call   c001f092 <IDE::enableIRQs(unsigned char, bool)>
c00201b9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00201bc:	e8 a1 fe ff ff       	call   c0020062 <ATA::readyForCommand()>
c00201c1:	83 c4 10             	add    esp,0x10
c00201c4:	84 c0                	test   al,al
c00201c6:	75 0a                	jne    c00201d2 <ATA::access(unsigned long long, int, void*, bool)+0x124>
c00201c8:	be 01 00 00 00       	mov    esi,0x1
c00201cd:	e9 c2 02 00 00       	jmp    c0020494 <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c00201d2:	fa                   	cli    
c00201d3:	ff 05 70 da 02 c0    	inc    DWORD PTR ds:0xc002da70
c00201d9:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00201df:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c00201e4:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00201ea:	75 0a                	jne    c00201f6 <ATA::access(unsigned long long, int, void*, bool)+0x148>
c00201ec:	c1 e0 04             	shl    eax,0x4
c00201ef:	09 c6                	or     esi,eax
c00201f1:	83 ce a0             	or     esi,0xffffffa0
c00201f4:	eb 08                	jmp    c00201fe <ATA::access(unsigned long long, int, void*, bool)+0x150>
c00201f6:	c1 e0 04             	shl    eax,0x4
c00201f9:	09 c6                	or     esi,eax
c00201fb:	83 ce e0             	or     esi,0xffffffe0
c00201fe:	89 f0                	mov    eax,esi
c0020200:	0f b6 d2             	movzx  edx,dl
c0020203:	0f b6 f0             	movzx  esi,al
c0020206:	56                   	push   esi
c0020207:	6a 06                	push   0x6
c0020209:	52                   	push   edx
c002020a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020210:	e8 73 ec ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020215:	83 c4 10             	add    esp,0x10
c0020218:	6a 00                	push   0x0
c002021a:	6a 01                	push   0x1
c002021c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020223:	50                   	push   eax
c0020224:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002022a:	e8 59 ec ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002022f:	83 c4 10             	add    esp,0x10
c0020232:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0020237:	83 f8 02             	cmp    eax,0x2
c002023a:	75 6e                	jne    c00202aa <ATA::access(unsigned long long, int, void*, bool)+0x1fc>
c002023c:	6a 00                	push   0x0
c002023e:	6a 08                	push   0x8
c0020240:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020247:	50                   	push   eax
c0020248:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002024e:	e8 35 ec ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020253:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0020258:	50                   	push   eax
c0020259:	6a 09                	push   0x9
c002025b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020262:	50                   	push   eax
c0020263:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020269:	e8 1a ec ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002026e:	83 c4 20             	add    esp,0x20
c0020271:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0020276:	50                   	push   eax
c0020277:	6a 0a                	push   0xa
c0020279:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020280:	50                   	push   eax
c0020281:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020287:	e8 fc eb ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002028c:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0020291:	50                   	push   eax
c0020292:	6a 0b                	push   0xb
c0020294:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002029b:	50                   	push   eax
c002029c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00202a2:	e8 e1 eb ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00202a7:	83 c4 20             	add    esp,0x20
c00202aa:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00202af:	50                   	push   eax
c00202b0:	6a 02                	push   0x2
c00202b2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00202b9:	50                   	push   eax
c00202ba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00202c0:	e8 c3 eb ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00202c5:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00202ca:	50                   	push   eax
c00202cb:	6a 03                	push   0x3
c00202cd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00202d4:	50                   	push   eax
c00202d5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00202db:	e8 a8 eb ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00202e0:	83 c4 20             	add    esp,0x20
c00202e3:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00202e8:	50                   	push   eax
c00202e9:	6a 04                	push   0x4
c00202eb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00202f2:	50                   	push   eax
c00202f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00202f9:	e8 8a eb ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00202fe:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020303:	50                   	push   eax
c0020304:	6a 05                	push   0x5
c0020306:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002030d:	50                   	push   eax
c002030e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020314:	e8 6f eb ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020319:	83 c4 20             	add    esp,0x20
c002031c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0020321:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0020326:	74 13                	je     c002033b <ATA::access(unsigned long long, int, void*, bool)+0x28d>
c0020328:	83 f8 02             	cmp    eax,0x2
c002032b:	74 20                	je     c002034d <ATA::access(unsigned long long, int, void*, bool)+0x29f>
c002032d:	48                   	dec    eax
c002032e:	0f 85 94 fe ff ff    	jne    c00201c8 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c0020334:	b8 30 00 00 00       	mov    eax,0x30
c0020339:	eb 1e                	jmp    c0020359 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c002033b:	83 f8 02             	cmp    eax,0x2
c002033e:	74 14                	je     c0020354 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c0020340:	48                   	dec    eax
c0020341:	b8 20 00 00 00       	mov    eax,0x20
c0020346:	74 11                	je     c0020359 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c0020348:	e9 7b fe ff ff       	jmp    c00201c8 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c002034d:	b8 34 00 00 00       	mov    eax,0x34
c0020352:	eb 05                	jmp    c0020359 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c0020354:	b8 24 00 00 00       	mov    eax,0x24
c0020359:	50                   	push   eax
c002035a:	6a 07                	push   0x7
c002035c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020363:	50                   	push   eax
c0020364:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002036a:	e8 19 eb ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002036f:	f0 ff 0d 70 da 02 c0 	lock dec DWORD PTR ds:0xc002da70
c0020376:	83 c4 10             	add    esp,0x10
c0020379:	83 3d 70 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da70,0x0
c0020380:	75 01                	jne    c0020383 <ATA::access(unsigned long long, int, void*, bool)+0x2d5>
c0020382:	fb                   	sti    
c0020383:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0020387:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c002038c:	85 f6                	test   esi,esi
c002038e:	0f 84 dd 00 00 00    	je     c0020471 <ATA::access(unsigned long long, int, void*, bool)+0x3c3>
c0020394:	57                   	push   edi
c0020395:	6a 01                	push   0x1
c0020397:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002039e:	50                   	push   eax
c002039f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00203a5:	e8 84 f8 ff ff       	call   c001fc2e <IDE::polling(unsigned char, unsigned int)>
c00203aa:	83 c4 10             	add    esp,0x10
c00203ad:	0f b6 c0             	movzx  eax,al
c00203b0:	85 c0                	test   eax,eax
c00203b2:	74 23                	je     c00203d7 <ATA::access(unsigned long long, int, void*, bool)+0x329>
c00203b4:	50                   	push   eax
c00203b5:	89 c6                	mov    esi,eax
c00203b7:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00203be:	50                   	push   eax
c00203bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00203c6:	50                   	push   eax
c00203c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00203cd:	e8 a2 f7 ff ff       	call   c001fb74 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00203d2:	e9 ba 00 00 00       	jmp    c0020491 <ATA::access(unsigned long long, int, void*, bool)+0x3e3>
c00203d7:	85 ed                	test   ebp,ebp
c00203d9:	74 49                	je     c0020424 <ATA::access(unsigned long long, int, void*, bool)+0x376>
c00203db:	fa                   	cli    
c00203dc:	ff 05 70 da 02 c0    	inc    DWORD PTR ds:0xc002da70
c00203e2:	31 c9                	xor    ecx,ecx
c00203e4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00203e8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00203ec:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c00203f0:	51                   	push   ecx
c00203f1:	51                   	push   ecx
c00203f2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00203f9:	50                   	push   eax
c00203fa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020400:	e8 71 ea ff ff       	call   c001ee76 <IDE::getBase(unsigned char)>
c0020405:	89 c2                	mov    edx,eax
c0020407:	89 f8                	mov    eax,edi
c0020409:	66 ef                	out    dx,ax
c002040b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002040f:	83 c4 10             	add    esp,0x10
c0020412:	41                   	inc    ecx
c0020413:	81 f9 00 01 00 00    	cmp    ecx,0x100
c0020419:	75 c9                	jne    c00203e4 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c002041b:	f0 ff 0d 70 da 02 c0 	lock dec DWORD PTR ds:0xc002da70
c0020422:	eb 35                	jmp    c0020459 <ATA::access(unsigned long long, int, void*, bool)+0x3ab>
c0020424:	fa                   	cli    
c0020425:	ff 05 70 da 02 c0    	inc    DWORD PTR ds:0xc002da70
c002042b:	52                   	push   edx
c002042c:	52                   	push   edx
c002042d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020434:	50                   	push   eax
c0020435:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002043b:	e8 36 ea ff ff       	call   c001ee76 <IDE::getBase(unsigned char)>
c0020440:	b9 00 01 00 00       	mov    ecx,0x100
c0020445:	89 c2                	mov    edx,eax
c0020447:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002044b:	fc                   	cld    
c002044c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002044f:	f0 ff 0d 70 da 02 c0 	lock dec DWORD PTR ds:0xc002da70
c0020456:	83 c4 10             	add    esp,0x10
c0020459:	83 3d 70 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da70,0x0
c0020460:	75 01                	jne    c0020463 <ATA::access(unsigned long long, int, void*, bool)+0x3b5>
c0020462:	fb                   	sti    
c0020463:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002046b:	4e                   	dec    esi
c002046c:	e9 1b ff ff ff       	jmp    c002038c <ATA::access(unsigned long long, int, void*, bool)+0x2de>
c0020471:	31 f6                	xor    esi,esi
c0020473:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0020478:	74 1a                	je     c0020494 <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c002047a:	50                   	push   eax
c002047b:	50                   	push   eax
c002047c:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0020481:	83 f8 02             	cmp    eax,0x2
c0020484:	0f 94 c0             	sete   al
c0020487:	0f b6 c0             	movzx  eax,al
c002048a:	50                   	push   eax
c002048b:	53                   	push   ebx
c002048c:	e8 83 fb ff ff       	call   c0020014 <ATA::flush(bool)>
c0020491:	83 c4 10             	add    esp,0x10
c0020494:	83 c4 2c             	add    esp,0x2c
c0020497:	89 f0                	mov    eax,esi
c0020499:	5b                   	pop    ebx
c002049a:	5e                   	pop    esi
c002049b:	5f                   	pop    edi
c002049c:	5d                   	pop    ebp
c002049d:	c3                   	ret    

c002049e <ATA::read(unsigned long long, int, void*)>:
c002049e:	57                   	push   edi
c002049f:	b8 04 00 00 00       	mov    eax,0x4
c00204a4:	56                   	push   esi
c00204a5:	53                   	push   ebx
c00204a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00204aa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00204ae:	8d 7a ff             	lea    edi,[edx-0x1]
c00204b1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00204b5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00204b9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00204bf:	77 25                	ja     c00204e6 <ATA::read(unsigned long long, int, void*)+0x48>
c00204c1:	b8 06 00 00 00       	mov    eax,0x6
c00204c6:	85 f6                	test   esi,esi
c00204c8:	74 1c                	je     c00204e6 <ATA::read(unsigned long long, int, void*)+0x48>
c00204ca:	50                   	push   eax
c00204cb:	50                   	push   eax
c00204cc:	6a 00                	push   0x0
c00204ce:	56                   	push   esi
c00204cf:	52                   	push   edx
c00204d0:	53                   	push   ebx
c00204d1:	51                   	push   ecx
c00204d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00204d6:	e8 d3 fb ff ff       	call   c00200ae <ATA::access(unsigned long long, int, void*, bool)>
c00204db:	83 c4 20             	add    esp,0x20
c00204de:	85 c0                	test   eax,eax
c00204e0:	0f 95 c0             	setne  al
c00204e3:	0f b6 c0             	movzx  eax,al
c00204e6:	5b                   	pop    ebx
c00204e7:	5e                   	pop    esi
c00204e8:	5f                   	pop    edi
c00204e9:	c3                   	ret    

c00204ea <ATA::write(unsigned long long, int, void*)>:
c00204ea:	57                   	push   edi
c00204eb:	b8 04 00 00 00       	mov    eax,0x4
c00204f0:	56                   	push   esi
c00204f1:	53                   	push   ebx
c00204f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00204f6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00204fa:	8d 7a ff             	lea    edi,[edx-0x1]
c00204fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020501:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020505:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002050b:	77 25                	ja     c0020532 <ATA::write(unsigned long long, int, void*)+0x48>
c002050d:	b8 06 00 00 00       	mov    eax,0x6
c0020512:	85 f6                	test   esi,esi
c0020514:	74 1c                	je     c0020532 <ATA::write(unsigned long long, int, void*)+0x48>
c0020516:	50                   	push   eax
c0020517:	50                   	push   eax
c0020518:	6a 01                	push   0x1
c002051a:	56                   	push   esi
c002051b:	52                   	push   edx
c002051c:	53                   	push   ebx
c002051d:	51                   	push   ecx
c002051e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020522:	e8 87 fb ff ff       	call   c00200ae <ATA::access(unsigned long long, int, void*, bool)>
c0020527:	83 c4 20             	add    esp,0x20
c002052a:	85 c0                	test   eax,eax
c002052c:	0f 95 c0             	setne  al
c002052f:	0f b6 c0             	movzx  eax,al
c0020532:	5b                   	pop    ebx
c0020533:	5e                   	pop    esi
c0020534:	5f                   	pop    edi
c0020535:	c3                   	ret    

c0020536 <ATA::detectCHS()>:
c0020536:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002053a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0020540:	c1 e0 06             	shl    eax,0x6
c0020543:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0020549:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0020553:	c7 44 24 04 48 65 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026548
c002055b:	e9 60 f6 fe ff       	jmp    c000fbc0 <KePanic(char const*)>

c0020560 <ATA::open(int, int, void*)>:
c0020560:	53                   	push   ebx
c0020561:	83 ec 08             	sub    esp,0x8
c0020564:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020568:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002056c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020570:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0020576:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002057c:	c1 e0 06             	shl    eax,0x6
c002057f:	01 d0                	add    eax,edx
c0020581:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0020588:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002058e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0020595:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002059f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00205a5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00205ac:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00205b3:	75 0c                	jne    c00205c1 <ATA::open(int, int, void*)+0x61>
c00205b5:	83 ec 0c             	sub    esp,0xc
c00205b8:	53                   	push   ebx
c00205b9:	e8 78 ff ff ff       	call   c0020536 <ATA::detectCHS()>
c00205be:	83 c4 10             	add    esp,0x10
c00205c1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00205c7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00205cd:	c1 e0 06             	shl    eax,0x6
c00205d0:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00205d7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00205e1:	d1 e8                	shr    eax,1
c00205e3:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00205e9:	6a 04                	push   0x4
c00205eb:	6a 0c                	push   0xc
c00205ed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00205f4:	50                   	push   eax
c00205f5:	52                   	push   edx
c00205f6:	e8 8d e8 ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00205fb:	90                   	nop
c00205fc:	90                   	nop
c00205fd:	6a 00                	push   0x0
c00205ff:	6a 0c                	push   0xc
c0020601:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020608:	50                   	push   eax
c0020609:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002060f:	e8 74 e8 ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020614:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002061a:	83 c4 20             	add    esp,0x20
c002061d:	c1 e0 06             	shl    eax,0x6
c0020620:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c0020626:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c002062d:	0f 84 00 01 00 00    	je     c0020733 <ATA::open(int, int, void*)+0x1d3>
c0020633:	83 ec 0c             	sub    esp,0xc
c0020636:	6a 08                	push   0x8
c0020638:	e8 48 f8 fe ff       	call   c000fe85 <Phys::allocateContiguousPages(int)>
c002063d:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0020643:	c7 04 24 5a 65 02 c0 	mov    DWORD PTR [esp],0xc002655a
c002064a:	e8 2d 69 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c002064f:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0020656:	e8 98 2b ff ff       	call   c00131f3 <Virt::allocateKernelVirtualPages(int)>
c002065b:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0020661:	6a 03                	push   0x3
c0020663:	50                   	push   eax
c0020664:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002066a:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c0020670:	e8 61 32 ff ff       	call   c00138d6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020675:	83 c4 20             	add    esp,0x20
c0020678:	e8 37 f7 fe ff       	call   c000fdb4 <Phys::allocatePage()>
c002067d:	83 ec 0c             	sub    esp,0xc
c0020680:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c0020686:	6a 01                	push   0x1
c0020688:	e8 66 2b ff ff       	call   c00131f3 <Virt::allocateKernelVirtualPages(int)>
c002068d:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c0020693:	6a 03                	push   0x3
c0020695:	50                   	push   eax
c0020696:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c002069c:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c00206a2:	e8 2f 32 ff ff       	call   c00138d6 <VAS::mapPage(unsigned long, unsigned long, int)>
c00206a7:	83 c4 14             	add    esp,0x14
c00206aa:	68 93 65 02 c0       	push   0xc0026593
c00206af:	e8 c8 68 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00206b4:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c00206bb:	50                   	push   eax
c00206bc:	6a 12                	push   0x12
c00206be:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00206c5:	50                   	push   eax
c00206c6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00206cc:	e8 b7 e7 ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00206d1:	83 c4 20             	add    esp,0x20
c00206d4:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c00206da:	0f b6 c4             	movzx  eax,ah
c00206dd:	50                   	push   eax
c00206de:	6a 13                	push   0x13
c00206e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00206e7:	50                   	push   eax
c00206e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00206ee:	e8 95 e7 ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00206f3:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c00206fa:	50                   	push   eax
c00206fb:	6a 14                	push   0x14
c00206fd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020704:	50                   	push   eax
c0020705:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002070b:	e8 78 e7 ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020710:	83 c4 20             	add    esp,0x20
c0020713:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c002071a:	50                   	push   eax
c002071b:	6a 15                	push   0x15
c002071d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020724:	50                   	push   eax
c0020725:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002072b:	e8 58 e7 ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020730:	83 c4 10             	add    esp,0x10
c0020733:	83 ec 0c             	sub    esp,0xc
c0020736:	53                   	push   ebx
c0020737:	e8 62 97 fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c002073c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002073f:	e8 fa a5 fe ff       	call   c000ad3e <createPartitionsForDisk(PhysicalDisk*)>
c0020744:	31 c0                	xor    eax,eax
c0020746:	83 c4 18             	add    esp,0x18
c0020749:	5b                   	pop    ebx
c002074a:	c3                   	ret    

c002074b <combineCharAndColour(char, unsigned char)>:
c002074b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020750:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c0020756:	c1 e0 08             	shl    eax,0x8
c0020759:	09 d0                	or     eax,edx
c002075b:	c3                   	ret    

c002075c <combineColours(unsigned char, unsigned char)>:
c002075c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020761:	c1 e0 04             	shl    eax,0x4
c0020764:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c0020768:	c3                   	ret    
c0020769:	90                   	nop

c002076a <ATAPI::write(unsigned long long, int, void*)>:
c002076a:	b8 03 00 00 00       	mov    eax,0x3
c002076f:	c3                   	ret    

c0020770 <ATAPI::close(int, int, void*)>:
c0020770:	83 ec 0c             	sub    esp,0xc
c0020773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020777:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002077d:	85 c0                	test   eax,eax
c002077f:	74 0c                	je     c002078d <ATAPI::close(int, int, void*)+0x1d>
c0020781:	83 ec 0c             	sub    esp,0xc
c0020784:	8b 10                	mov    edx,DWORD PTR [eax]
c0020786:	50                   	push   eax
c0020787:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002078a:	83 c4 10             	add    esp,0x10
c002078d:	31 c0                	xor    eax,eax
c002078f:	83 c4 0c             	add    esp,0xc
c0020792:	c3                   	ret    
c0020793:	90                   	nop

c0020794 <ATAPI::ATAPI()>:
c0020794:	83 ec 0c             	sub    esp,0xc
c0020797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002079b:	83 ec 04             	sub    esp,0x4
c002079e:	68 00 08 00 00       	push   0x800
c00207a3:	68 45 67 02 c0       	push   0xc0026745
c00207a8:	50                   	push   eax
c00207a9:	e8 88 96 fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00207ae:	83 c4 10             	add    esp,0x10
c00207b1:	ba 54 66 02 c0       	mov    edx,0xc0026654
c00207b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207ba:	89 10                	mov    DWORD PTR [eax],edx
c00207bc:	90                   	nop
c00207bd:	83 c4 0c             	add    esp,0xc
c00207c0:	c3                   	ret    
c00207c1:	90                   	nop

c00207c2 <ATAPI::readyForCommand()>:
c00207c2:	56                   	push   esi
c00207c3:	53                   	push   ebx
c00207c4:	31 db                	xor    ebx,ebx
c00207c6:	50                   	push   eax
c00207c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00207cb:	50                   	push   eax
c00207cc:	6a 0c                	push   0xc
c00207ce:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00207d5:	50                   	push   eax
c00207d6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00207dc:	e8 67 e7 ff ff       	call   c001ef48 <IDE::read(unsigned char, unsigned char)>
c00207e1:	83 c4 10             	add    esp,0x10
c00207e4:	a8 88                	test   al,0x88
c00207e6:	74 26                	je     c002080e <ATAPI::readyForCommand()+0x4c>
c00207e8:	43                   	inc    ebx
c00207e9:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c00207ef:	7e da                	jle    c00207cb <ATAPI::readyForCommand()+0x9>
c00207f1:	51                   	push   ecx
c00207f2:	51                   	push   ecx
c00207f3:	6a 00                	push   0x0
c00207f5:	68 5e 01 00 00       	push   0x15e
c00207fa:	e8 19 6f ff ff       	call   c0017718 <milliTenthSleep(unsigned long long)>
c00207ff:	83 c4 10             	add    esp,0x10
c0020802:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c0020808:	75 c1                	jne    c00207cb <ATAPI::readyForCommand()+0x9>
c002080a:	31 c0                	xor    eax,eax
c002080c:	eb 02                	jmp    c0020810 <ATAPI::readyForCommand()+0x4e>
c002080e:	b0 01                	mov    al,0x1
c0020810:	5a                   	pop    edx
c0020811:	5b                   	pop    ebx
c0020812:	5e                   	pop    esi
c0020813:	c3                   	ret    

c0020814 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0020814:	55                   	push   ebp
c0020815:	57                   	push   edi
c0020816:	56                   	push   esi
c0020817:	53                   	push   ebx
c0020818:	83 ec 20             	sub    esp,0x20
c002081b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002081f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0020823:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0020827:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002082b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002082f:	6a 01                	push   0x1
c0020831:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020838:	50                   	push   eax
c0020839:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002083f:	e8 4e e8 ff ff       	call   c001f092 <IDE::enableIRQs(unsigned char, bool)>
c0020844:	5e                   	pop    esi
c0020845:	58                   	pop    eax
c0020846:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002084d:	50                   	push   eax
c002084e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020854:	e8 09 e6 ff ff       	call   c001ee62 <IDE::prepareInterrupt(unsigned char)>
c0020859:	89 3c 24             	mov    DWORD PTR [esp],edi
c002085c:	e8 61 ff ff ff       	call   c00207c2 <ATAPI::readyForCommand()>
c0020861:	83 c4 10             	add    esp,0x10
c0020864:	84 c0                	test   al,al
c0020866:	75 0a                	jne    c0020872 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0020868:	bb 01 00 00 00       	mov    ebx,0x1
c002086d:	e9 60 02 00 00       	jmp    c0020ad2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c0020872:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c0020878:	c1 e0 04             	shl    eax,0x4
c002087b:	0f b6 c0             	movzx  eax,al
c002087e:	50                   	push   eax
c002087f:	6a 06                	push   0x6
c0020881:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020888:	50                   	push   eax
c0020889:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002088f:	e8 f4 e5 ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020894:	6a 00                	push   0x0
c0020896:	6a 01                	push   0x1
c0020898:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002089f:	50                   	push   eax
c00208a0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00208a6:	e8 dd e5 ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00208ab:	83 c4 20             	add    esp,0x20
c00208ae:	0f b6 c3             	movzx  eax,bl
c00208b1:	0f b6 df             	movzx  ebx,bh
c00208b4:	50                   	push   eax
c00208b5:	6a 04                	push   0x4
c00208b7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00208be:	50                   	push   eax
c00208bf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00208c5:	e8 be e5 ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00208ca:	53                   	push   ebx
c00208cb:	6a 05                	push   0x5
c00208cd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00208d4:	50                   	push   eax
c00208d5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00208db:	e8 a8 e5 ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00208e0:	83 c4 20             	add    esp,0x20
c00208e3:	68 a0 00 00 00       	push   0xa0
c00208e8:	6a 07                	push   0x7
c00208ea:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00208f1:	50                   	push   eax
c00208f2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00208f8:	e8 8b e5 ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00208fd:	83 c4 0c             	add    esp,0xc
c0020900:	6a 01                	push   0x1
c0020902:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020909:	50                   	push   eax
c002090a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020910:	e8 19 f3 ff ff       	call   c001fc2e <IDE::polling(unsigned char, unsigned int)>
c0020915:	83 c4 10             	add    esp,0x10
c0020918:	0f b6 d8             	movzx  ebx,al
c002091b:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c0020921:	85 db                	test   ebx,ebx
c0020923:	74 20                	je     c0020945 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0020925:	53                   	push   ebx
c0020926:	0f b6 c0             	movzx  eax,al
c0020929:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c0020930:	52                   	push   edx
c0020931:	50                   	push   eax
c0020932:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020938:	e8 37 f2 ff ff       	call   c001fb74 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002093d:	83 c4 10             	add    esp,0x10
c0020940:	e9 8d 01 00 00       	jmp    c0020ad2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c0020945:	0f b6 c0             	movzx  eax,al
c0020948:	53                   	push   ebx
c0020949:	53                   	push   ebx
c002094a:	50                   	push   eax
c002094b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020951:	e8 20 e5 ff ff       	call   c001ee76 <IDE::getBase(unsigned char)>
c0020956:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002095a:	b9 06 00 00 00       	mov    ecx,0x6
c002095f:	89 c2                	mov    edx,eax
c0020961:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0020964:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0020968:	83 c4 10             	add    esp,0x10
c002096b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0020970:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020974:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002097a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020981:	85 db                	test   ebx,ebx
c0020983:	0f 84 ec 00 00 00    	je     c0020a75 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c0020989:	51                   	push   ecx
c002098a:	51                   	push   ecx
c002098b:	52                   	push   edx
c002098c:	50                   	push   eax
c002098d:	e8 64 e6 ff ff       	call   c001eff6 <IDE::waitInterrupt(unsigned char)>
c0020992:	83 c4 10             	add    esp,0x10
c0020995:	84 c0                	test   al,al
c0020997:	0f 84 cb fe ff ff    	je     c0020868 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002099d:	56                   	push   esi
c002099e:	56                   	push   esi
c002099f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00209a6:	50                   	push   eax
c00209a7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00209ad:	e8 b0 e4 ff ff       	call   c001ee62 <IDE::prepareInterrupt(unsigned char)>
c00209b2:	83 c4 0c             	add    esp,0xc
c00209b5:	6a 04                	push   0x4
c00209b7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00209be:	50                   	push   eax
c00209bf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00209c5:	e8 7e e5 ff ff       	call   c001ef48 <IDE::read(unsigned char, unsigned char)>
c00209ca:	83 c4 0c             	add    esp,0xc
c00209cd:	89 c6                	mov    esi,eax
c00209cf:	6a 05                	push   0x5
c00209d1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00209d8:	50                   	push   eax
c00209d9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00209df:	e8 64 e5 ff ff       	call   c001ef48 <IDE::read(unsigned char, unsigned char)>
c00209e4:	89 f1                	mov    ecx,esi
c00209e6:	0f b6 c0             	movzx  eax,al
c00209e9:	0f b6 f1             	movzx  esi,cl
c00209ec:	c1 e0 08             	shl    eax,0x8
c00209ef:	09 c6                	or     esi,eax
c00209f1:	d1 fe                	sar    esi,1
c00209f3:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00209f7:	83 c4 10             	add    esp,0x10
c00209fa:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00209ff:	74 41                	je     c0020a42 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c0020a01:	31 c9                	xor    ecx,ecx
c0020a03:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020a09:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020a10:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0020a14:	75 0a                	jne    c0020a20 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c0020a16:	01 c9                	add    ecx,ecx
c0020a18:	01 cd                	add    ebp,ecx
c0020a1a:	4b                   	dec    ebx
c0020a1b:	e9 54 ff ff ff       	jmp    c0020974 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c0020a20:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0020a25:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020a29:	51                   	push   ecx
c0020a2a:	51                   	push   ecx
c0020a2b:	52                   	push   edx
c0020a2c:	50                   	push   eax
c0020a2d:	e8 44 e4 ff ff       	call   c001ee76 <IDE::getBase(unsigned char)>
c0020a32:	89 c2                	mov    edx,eax
c0020a34:	89 f0                	mov    eax,esi
c0020a36:	66 ef                	out    dx,ax
c0020a38:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0020a3c:	83 c4 10             	add    esp,0x10
c0020a3f:	41                   	inc    ecx
c0020a40:	eb c1                	jmp    c0020a03 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c0020a42:	31 f6                	xor    esi,esi
c0020a44:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020a4a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020a51:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0020a55:	75 06                	jne    c0020a5d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c0020a57:	01 f6                	add    esi,esi
c0020a59:	01 f5                	add    ebp,esi
c0020a5b:	eb bd                	jmp    c0020a1a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c0020a5d:	51                   	push   ecx
c0020a5e:	51                   	push   ecx
c0020a5f:	52                   	push   edx
c0020a60:	50                   	push   eax
c0020a61:	e8 10 e4 ff ff       	call   c001ee76 <IDE::getBase(unsigned char)>
c0020a66:	89 c2                	mov    edx,eax
c0020a68:	66 ed                	in     ax,dx
c0020a6a:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0020a6f:	83 c4 10             	add    esp,0x10
c0020a72:	46                   	inc    esi
c0020a73:	eb cf                	jmp    c0020a44 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c0020a75:	51                   	push   ecx
c0020a76:	51                   	push   ecx
c0020a77:	52                   	push   edx
c0020a78:	50                   	push   eax
c0020a79:	e8 78 e5 ff ff       	call   c001eff6 <IDE::waitInterrupt(unsigned char)>
c0020a7e:	83 c4 10             	add    esp,0x10
c0020a81:	84 c0                	test   al,al
c0020a83:	0f 84 df fd ff ff    	je     c0020868 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0020a89:	bb a0 86 01 00       	mov    ebx,0x186a0
c0020a8e:	52                   	push   edx
c0020a8f:	52                   	push   edx
c0020a90:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020a97:	50                   	push   eax
c0020a98:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020a9e:	e8 bf e3 ff ff       	call   c001ee62 <IDE::prepareInterrupt(unsigned char)>
c0020aa3:	83 c4 10             	add    esp,0x10
c0020aa6:	50                   	push   eax
c0020aa7:	50                   	push   eax
c0020aa8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020aaf:	50                   	push   eax
c0020ab0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020ab6:	e8 bb e3 ff ff       	call   c001ee76 <IDE::getBase(unsigned char)>
c0020abb:	8d 50 07             	lea    edx,[eax+0x7]
c0020abe:	ec                   	in     al,dx
c0020abf:	83 c4 10             	add    esp,0x10
c0020ac2:	a8 88                	test   al,0x88
c0020ac4:	74 0a                	je     c0020ad0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c0020ac6:	4b                   	dec    ebx
c0020ac7:	75 dd                	jne    c0020aa6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c0020ac9:	bb 02 00 00 00       	mov    ebx,0x2
c0020ace:	eb 02                	jmp    c0020ad2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c0020ad0:	31 db                	xor    ebx,ebx
c0020ad2:	83 c4 1c             	add    esp,0x1c
c0020ad5:	89 d8                	mov    eax,ebx
c0020ad7:	5b                   	pop    ebx
c0020ad8:	5e                   	pop    esi
c0020ad9:	5f                   	pop    edi
c0020ada:	5d                   	pop    ebp
c0020adb:	c3                   	ret    

c0020adc <ATAPI::diskRemoved()>:
c0020adc:	53                   	push   ebx
c0020add:	83 ec 14             	sub    esp,0x14
c0020ae0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020ae4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020aeb:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c0020af1:	e8 38 9f fe ff       	call   c000aa2e <LogicalDisk::unmount()>
c0020af6:	58                   	pop    eax
c0020af7:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020afd:	e8 0a a9 fe ff       	call   c000b40c <VCache::writeWriteBuffer()>
c0020b02:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0020b08:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020b0c:	83 c4 18             	add    esp,0x18
c0020b0f:	5b                   	pop    ebx
c0020b10:	e9 e7 a8 fe ff       	jmp    c000b3fc <VCache::invalidateReadBuffer()>
c0020b15:	90                   	nop

c0020b16 <ATAPI::eject()>:
c0020b16:	57                   	push   edi
c0020b17:	b9 03 00 00 00       	mov    ecx,0x3
c0020b1c:	53                   	push   ebx
c0020b1d:	83 ec 14             	sub    esp,0x14
c0020b20:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020b24:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020b28:	fc                   	cld    
c0020b29:	31 c0                	xor    eax,eax
c0020b2b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020b2d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020b32:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020b37:	50                   	push   eax
c0020b38:	50                   	push   eax
c0020b39:	6a 00                	push   0x0
c0020b3b:	6a 00                	push   0x0
c0020b3d:	6a 00                	push   0x0
c0020b3f:	6a 02                	push   0x2
c0020b41:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020b45:	50                   	push   eax
c0020b46:	53                   	push   ebx
c0020b47:	e8 c8 fc ff ff       	call   c0020814 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020b4c:	83 c4 14             	add    esp,0x14
c0020b4f:	53                   	push   ebx
c0020b50:	e8 87 ff ff ff       	call   c0020adc <ATAPI::diskRemoved()>
c0020b55:	83 c4 24             	add    esp,0x24
c0020b58:	31 c0                	xor    eax,eax
c0020b5a:	5b                   	pop    ebx
c0020b5b:	5f                   	pop    edi
c0020b5c:	c3                   	ret    
c0020b5d:	90                   	nop

c0020b5e <ATAPI::diskInserted()>:
c0020b5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020b62:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0020b69:	c3                   	ret    

c0020b6a <ATAPI::detectMedia()>:
c0020b6a:	56                   	push   esi
c0020b6b:	53                   	push   ebx
c0020b6c:	83 ec 28             	sub    esp,0x28
c0020b6f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020b73:	6a 0c                	push   0xc
c0020b75:	6a 00                	push   0x0
c0020b77:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0020b7b:	56                   	push   esi
c0020b7c:	e8 6f f9 fd ff       	call   c00004f0 <memset>
c0020b81:	58                   	pop    eax
c0020b82:	5a                   	pop    edx
c0020b83:	6a 00                	push   0x0
c0020b85:	6a 00                	push   0x0
c0020b87:	6a 00                	push   0x0
c0020b89:	6a 00                	push   0x0
c0020b8b:	56                   	push   esi
c0020b8c:	53                   	push   ebx
c0020b8d:	e8 82 fc ff ff       	call   c0020814 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020b92:	83 c4 1c             	add    esp,0x1c
c0020b95:	6a 0c                	push   0xc
c0020b97:	6a 00                	push   0x0
c0020b99:	56                   	push   esi
c0020b9a:	e8 51 f9 fd ff       	call   c00004f0 <memset>
c0020b9f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020ba4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020ba9:	59                   	pop    ecx
c0020baa:	58                   	pop    eax
c0020bab:	6a 01                	push   0x1
c0020bad:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020bb1:	50                   	push   eax
c0020bb2:	6a 00                	push   0x0
c0020bb4:	6a 12                	push   0x12
c0020bb6:	56                   	push   esi
c0020bb7:	53                   	push   ebx
c0020bb8:	e8 57 fc ff ff       	call   c0020814 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020bbd:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0020bc1:	83 c4 20             	add    esp,0x20
c0020bc4:	83 e0 7f             	and    eax,0x7f
c0020bc7:	83 f8 70             	cmp    eax,0x70
c0020bca:	74 15                	je     c0020be1 <ATAPI::detectMedia()+0x77>
c0020bcc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020bd3:	75 0c                	jne    c0020be1 <ATAPI::detectMedia()+0x77>
c0020bd5:	83 ec 0c             	sub    esp,0xc
c0020bd8:	53                   	push   ebx
c0020bd9:	e8 80 ff ff ff       	call   c0020b5e <ATAPI::diskInserted()>
c0020bde:	83 c4 10             	add    esp,0x10
c0020be1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020be5:	83 e0 0f             	and    eax,0xf
c0020be8:	83 f8 02             	cmp    eax,0x2
c0020beb:	75 1b                	jne    c0020c08 <ATAPI::detectMedia()+0x9e>
c0020bed:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0020bf2:	75 2d                	jne    c0020c21 <ATAPI::detectMedia()+0xb7>
c0020bf4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020bfb:	74 24                	je     c0020c21 <ATAPI::detectMedia()+0xb7>
c0020bfd:	83 ec 0c             	sub    esp,0xc
c0020c00:	53                   	push   ebx
c0020c01:	e8 d6 fe ff ff       	call   c0020adc <ATAPI::diskRemoved()>
c0020c06:	eb 16                	jmp    c0020c1e <ATAPI::detectMedia()+0xb4>
c0020c08:	85 c0                	test   eax,eax
c0020c0a:	75 15                	jne    c0020c21 <ATAPI::detectMedia()+0xb7>
c0020c0c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020c13:	75 0c                	jne    c0020c21 <ATAPI::detectMedia()+0xb7>
c0020c15:	83 ec 0c             	sub    esp,0xc
c0020c18:	53                   	push   ebx
c0020c19:	e8 40 ff ff ff       	call   c0020b5e <ATAPI::diskInserted()>
c0020c1e:	83 c4 10             	add    esp,0x10
c0020c21:	83 c4 24             	add    esp,0x24
c0020c24:	5b                   	pop    ebx
c0020c25:	5e                   	pop    esi
c0020c26:	c3                   	ret    
c0020c27:	90                   	nop

c0020c28 <ATAPI::open(int, int, void*)>:
c0020c28:	56                   	push   esi
c0020c29:	53                   	push   ebx
c0020c2a:	50                   	push   eax
c0020c2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020c33:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020c37:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020c3d:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0020c43:	c1 e0 06             	shl    eax,0x6
c0020c46:	01 d0                	add    eax,edx
c0020c48:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0020c4f:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0020c55:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0020c5c:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020c66:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020c6c:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020c73:	6a 04                	push   0x4
c0020c75:	6a 0c                	push   0xc
c0020c77:	51                   	push   ecx
c0020c78:	52                   	push   edx
c0020c79:	e8 0a e2 ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020c7e:	90                   	nop
c0020c7f:	90                   	nop
c0020c80:	6a 00                	push   0x0
c0020c82:	6a 0c                	push   0xc
c0020c84:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020c8b:	50                   	push   eax
c0020c8c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020c92:	e8 f1 e1 ff ff       	call   c001ee88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020c97:	83 c4 14             	add    esp,0x14
c0020c9a:	68 78 01 00 00       	push   0x178
c0020c9f:	e8 bf ea fe ff       	call   c000f763 <malloc>
c0020ca4:	83 c4 0c             	add    esp,0xc
c0020ca7:	89 c6                	mov    esi,eax
c0020ca9:	6a 00                	push   0x0
c0020cab:	68 ff ff ff 7f       	push   0x7fffffff
c0020cb0:	6a 00                	push   0x0
c0020cb2:	6a 00                	push   0x0
c0020cb4:	53                   	push   ebx
c0020cb5:	68 f7 67 02 c0       	push   0xc00267f7
c0020cba:	50                   	push   eax
c0020cbb:	e8 ac 9b fe ff       	call   c000a86c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020cc0:	83 c4 14             	add    esp,0x14
c0020cc3:	56                   	push   esi
c0020cc4:	e8 63 9c fe ff       	call   c000a92c <LogicalDisk::assignDriveLetter()>
c0020cc9:	5a                   	pop    edx
c0020cca:	0f be c0             	movsx  eax,al
c0020ccd:	59                   	pop    ecx
c0020cce:	50                   	push   eax
c0020ccf:	68 3c 66 02 c0       	push   0xc002663c
c0020cd4:	e8 a3 62 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020cd9:	58                   	pop    eax
c0020cda:	5a                   	pop    edx
c0020cdb:	56                   	push   esi
c0020cdc:	53                   	push   ebx
c0020cdd:	e8 72 8d fe ff       	call   c0009a54 <Device::addChild(Device*)>
c0020ce2:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0020ce8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020ceb:	e8 ae 91 fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c0020cf0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020cf7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020cfa:	e8 6b fe ff ff       	call   c0020b6a <ATAPI::detectMedia()>
c0020cff:	83 c4 14             	add    esp,0x14
c0020d02:	31 c0                	xor    eax,eax
c0020d04:	5b                   	pop    ebx
c0020d05:	5e                   	pop    esi
c0020d06:	c3                   	ret    
c0020d07:	90                   	nop

c0020d08 <ATAPI::read(unsigned long long, int, void*)>:
c0020d08:	55                   	push   ebp
c0020d09:	57                   	push   edi
c0020d0a:	56                   	push   esi
c0020d0b:	53                   	push   ebx
c0020d0c:	83 ec 1c             	sub    esp,0x1c
c0020d0f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0020d13:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020d17:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020d1b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020d22:	74 3c                	je     c0020d60 <ATAPI::read(unsigned long long, int, void*)+0x58>
c0020d24:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020d28:	b9 03 00 00 00       	mov    ecx,0x3
c0020d2d:	fc                   	cld    
c0020d2e:	31 c0                	xor    eax,eax
c0020d30:	0f ce                	bswap  esi
c0020d32:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020d34:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0020d39:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c0020d3d:	89 e8                	mov    eax,ebp
c0020d3f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0020d43:	50                   	push   eax
c0020d44:	50                   	push   eax
c0020d45:	55                   	push   ebp
c0020d46:	c1 e5 0b             	shl    ebp,0xb
c0020d49:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020d4d:	6a 00                	push   0x0
c0020d4f:	55                   	push   ebp
c0020d50:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020d54:	50                   	push   eax
c0020d55:	53                   	push   ebx
c0020d56:	e8 b9 fa ff ff       	call   c0020814 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020d5b:	83 c4 20             	add    esp,0x20
c0020d5e:	eb 1a                	jmp    c0020d7a <ATAPI::read(unsigned long long, int, void*)+0x72>
c0020d60:	83 ec 0c             	sub    esp,0xc
c0020d63:	53                   	push   ebx
c0020d64:	e8 01 fe ff ff       	call   c0020b6a <ATAPI::detectMedia()>
c0020d69:	83 c4 10             	add    esp,0x10
c0020d6c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020d73:	75 af                	jne    c0020d24 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0020d75:	b8 02 00 00 00       	mov    eax,0x2
c0020d7a:	83 c4 1c             	add    esp,0x1c
c0020d7d:	5b                   	pop    ebx
c0020d7e:	5e                   	pop    esi
c0020d7f:	5f                   	pop    edi
c0020d80:	5d                   	pop    ebp
c0020d81:	c3                   	ret    

c0020d82 <SATA::close(int, int, void*)>:
c0020d82:	83 ec 0c             	sub    esp,0xc
c0020d85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d89:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020d8f:	85 c0                	test   eax,eax
c0020d91:	74 0c                	je     c0020d9f <SATA::close(int, int, void*)+0x1d>
c0020d93:	83 ec 0c             	sub    esp,0xc
c0020d96:	8b 10                	mov    edx,DWORD PTR [eax]
c0020d98:	50                   	push   eax
c0020d99:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020d9c:	83 c4 10             	add    esp,0x10
c0020d9f:	31 c0                	xor    eax,eax
c0020da1:	83 c4 0c             	add    esp,0xc
c0020da4:	c3                   	ret    
c0020da5:	90                   	nop

c0020da6 <SATA::powerSaving(PowerSavingLevel)>:
c0020da6:	c3                   	ret    
c0020da7:	90                   	nop

c0020da8 <SATA::open(int, int, void*)>:
c0020da8:	56                   	push   esi
c0020da9:	53                   	push   ebx
c0020daa:	83 ec 10             	sub    esp,0x10
c0020dad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020db1:	68 84 66 02 c0       	push   0xc0026684
c0020db6:	e8 c1 61 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020dbb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020dbf:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020dc9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020dcf:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020dd9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020ddd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020de7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020ded:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020df4:	e8 bb ef fe ff       	call   c000fdb4 <Phys::allocatePage()>
c0020df9:	89 c6                	mov    esi,eax
c0020dfb:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020e01:	81 c6 00 10 00 00    	add    esi,0x1000
c0020e07:	e8 a8 ef fe ff       	call   c000fdb4 <Phys::allocatePage()>
c0020e0c:	83 c4 10             	add    esp,0x10
c0020e0f:	39 c6                	cmp    esi,eax
c0020e11:	74 10                	je     c0020e23 <SATA::open(int, int, void*)+0x7b>
c0020e13:	83 ec 0c             	sub    esp,0xc
c0020e16:	68 90 66 02 c0       	push   0xc0026690
c0020e1b:	e8 a0 ed fe ff       	call   c000fbc0 <KePanic(char const*)>
c0020e20:	83 c4 10             	add    esp,0x10
c0020e23:	83 ec 0c             	sub    esp,0xc
c0020e26:	6a 02                	push   0x2
c0020e28:	e8 c6 23 ff ff       	call   c00131f3 <Virt::allocateKernelVirtualPages(int)>
c0020e2d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020e33:	6a 03                	push   0x3
c0020e35:	50                   	push   eax
c0020e36:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0020e3c:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c0020e42:	e8 8f 2a ff ff       	call   c00138d6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020e47:	83 c4 14             	add    esp,0x14
c0020e4a:	53                   	push   ebx
c0020e4b:	e8 4e 90 fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c0020e50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020e53:	e8 e6 9e fe ff       	call   c000ad3e <createPartitionsForDisk(PhysicalDisk*)>
c0020e58:	83 c4 14             	add    esp,0x14
c0020e5b:	31 c0                	xor    eax,eax
c0020e5d:	5b                   	pop    ebx
c0020e5e:	5e                   	pop    esi
c0020e5f:	c3                   	ret    

c0020e60 <SATA::SATA()>:
c0020e60:	83 ec 0c             	sub    esp,0xc
c0020e63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e67:	83 ec 04             	sub    esp,0x4
c0020e6a:	68 00 02 00 00       	push   0x200
c0020e6f:	68 a4 66 02 c0       	push   0xc00266a4
c0020e74:	50                   	push   eax
c0020e75:	e8 bc 8f fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020e7a:	83 c4 10             	add    esp,0x10
c0020e7d:	ba 14 67 02 c0       	mov    edx,0xc0026714
c0020e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e86:	89 10                	mov    DWORD PTR [eax],edx
c0020e88:	90                   	nop
c0020e89:	83 c4 0c             	add    esp,0xc
c0020e8c:	c3                   	ret    
c0020e8d:	90                   	nop

c0020e8e <SATA::access(unsigned long long, int, void*, bool)>:
c0020e8e:	55                   	push   ebp
c0020e8f:	57                   	push   edi
c0020e90:	56                   	push   esi
c0020e91:	53                   	push   ebx
c0020e92:	83 ec 2c             	sub    esp,0x2c
c0020e95:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020e99:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020e9d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020ea1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020ea5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020ea9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ead:	fa                   	cli    
c0020eae:	ff 05 70 da 02 c0    	inc    DWORD PTR ds:0xc002da70
c0020eb4:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0020eb9:	7e 10                	jle    c0020ecb <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c0020ebb:	83 ec 0c             	sub    esp,0xc
c0020ebe:	68 b4 66 02 c0       	push   0xc00266b4
c0020ec3:	e8 f8 ec fe ff       	call   c000fbc0 <KePanic(char const*)>
c0020ec8:	83 c4 10             	add    esp,0x10
c0020ecb:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0020ed1:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020ed7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020edd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020ee1:	89 d0                	mov    eax,edx
c0020ee3:	c1 e0 07             	shl    eax,0x7
c0020ee6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020eea:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020ef4:	51                   	push   ecx
c0020ef5:	8d 42 02             	lea    eax,[edx+0x2]
c0020ef8:	51                   	push   ecx
c0020ef9:	c1 e0 07             	shl    eax,0x7
c0020efc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020f00:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020f04:	50                   	push   eax
c0020f05:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020f0b:	e8 fe ed ff ff       	call   c001fd0e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020f10:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020f14:	83 c4 10             	add    esp,0x10
c0020f17:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020f1c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020f20:	0f 84 a4 01 00 00    	je     c00210ca <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0020f26:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020f2a:	c1 e0 09             	shl    eax,0x9
c0020f2d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020f32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f36:	74 0e                	je     c0020f46 <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c0020f38:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020f3e:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020f42:	89 c1                	mov    ecx,eax
c0020f44:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020f46:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020f4c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020f50:	8d 42 02             	lea    eax,[edx+0x2]
c0020f53:	c1 e0 07             	shl    eax,0x7
c0020f56:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020f5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f5c:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020f62:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020f68:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020f6c:	c1 e1 05             	shl    ecx,0x5
c0020f6f:	01 c8                	add    eax,ecx
c0020f71:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020f75:	83 e1 01             	and    ecx,0x1
c0020f78:	89 ce                	mov    esi,ecx
c0020f7a:	8a 08                	mov    cl,BYTE PTR [eax]
c0020f7c:	c1 e6 06             	shl    esi,0x6
c0020f7f:	83 e1 bf             	and    ecx,0xffffffbf
c0020f82:	09 f1                	or     ecx,esi
c0020f84:	88 08                	mov    BYTE PTR [eax],cl
c0020f86:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020f88:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0020f8e:	81 c9 05 00 01 00    	or     ecx,0x10005
c0020f94:	89 08                	mov    DWORD PTR [eax],ecx
c0020f96:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020f9c:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0020fa2:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0020fa8:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0020fab:	50                   	push   eax
c0020fac:	68 90 00 00 00       	push   0x90
c0020fb1:	6a 00                	push   0x0
c0020fb3:	56                   	push   esi
c0020fb4:	e8 37 f5 fd ff       	call   c00004f0 <memset>
c0020fb9:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020fbf:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020fc5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020fc9:	83 c4 10             	add    esp,0x10
c0020fcc:	48                   	dec    eax
c0020fcd:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020fd2:	89 c1                	mov    ecx,eax
c0020fd4:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020fda:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020fdf:	09 c8                	or     eax,ecx
c0020fe1:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020fe7:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c0020fed:	83 c8 80             	or     eax,0xffffff80
c0020ff0:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c0020ff6:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020ff9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020ffd:	25 00 7f 00 00       	and    eax,0x7f00
c0021002:	0d 27 80 ff ff       	or     eax,0xffff8027
c0021007:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002100c:	66 89 06             	mov    WORD PTR [esi],ax
c002100f:	b0 35                	mov    al,0x35
c0021011:	75 02                	jne    c0021015 <SATA::access(unsigned long long, int, void*, bool)+0x187>
c0021013:	b0 25                	mov    al,0x25
c0021015:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0021018:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c002101c:	89 e8                	mov    eax,ebp
c002101e:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0021022:	c1 e8 10             	shr    eax,0x10
c0021025:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0021028:	89 e8                	mov    eax,ebp
c002102a:	c1 e8 18             	shr    eax,0x18
c002102d:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0021030:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0021034:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0021037:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002103b:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002103e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0021042:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0021046:	89 d6                	mov    esi,edx
c0021048:	31 c0                	xor    eax,eax
c002104a:	c1 e6 07             	shl    esi,0x7
c002104d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0021051:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0021057:	80 e1 88             	and    cl,0x88
c002105a:	74 0a                	je     c0021066 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c002105c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0021061:	74 0a                	je     c002106d <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0021063:	40                   	inc    eax
c0021064:	eb eb                	jmp    c0021051 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c0021066:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002106b:	75 0a                	jne    c0021077 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c002106d:	83 ec 0c             	sub    esp,0xc
c0021070:	68 ed 66 02 c0       	push   0xc00266ed
c0021075:	eb 36                	jmp    c00210ad <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c0021077:	b8 01 00 00 00       	mov    eax,0x1
c002107c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0021080:	c1 e2 07             	shl    edx,0x7
c0021083:	d3 e0                	shl    eax,cl
c0021085:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0021089:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002108f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0021095:	85 c8                	test   eax,ecx
c0021097:	74 25                	je     c00210be <SATA::access(unsigned long long, int, void*, bool)+0x230>
c0021099:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002109f:	0f ba e1 1e          	bt     ecx,0x1e
c00210a3:	73 ea                	jae    c002108f <SATA::access(unsigned long long, int, void*, bool)+0x201>
c00210a5:	83 ec 0c             	sub    esp,0xc
c00210a8:	68 fb 66 02 c0       	push   0xc00266fb
c00210ad:	e8 ca 5e fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00210b2:	f0 ff 0d 70 da 02 c0 	lock dec DWORD PTR ds:0xc002da70
c00210b9:	83 c4 10             	add    esp,0x10
c00210bc:	eb 13                	jmp    c00210d1 <SATA::access(unsigned long long, int, void*, bool)+0x243>
c00210be:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c00210c4:	0f ba e0 1e          	bt     eax,0x1e
c00210c8:	73 18                	jae    c00210e2 <SATA::access(unsigned long long, int, void*, bool)+0x254>
c00210ca:	f0 ff 0d 70 da 02 c0 	lock dec DWORD PTR ds:0xc002da70
c00210d1:	83 3d 70 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da70,0x0
c00210d8:	75 01                	jne    c00210db <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c00210da:	fb                   	sti    
c00210db:	b8 01 00 00 00       	mov    eax,0x1
c00210e0:	eb 2c                	jmp    c002110e <SATA::access(unsigned long long, int, void*, bool)+0x280>
c00210e2:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00210e7:	75 10                	jne    c00210f9 <SATA::access(unsigned long long, int, void*, bool)+0x26b>
c00210e9:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c00210ef:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00210f3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00210f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00210f9:	f0 ff 0d 70 da 02 c0 	lock dec DWORD PTR ds:0xc002da70
c0021100:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c0021105:	85 c0                	test   eax,eax
c0021107:	75 03                	jne    c002110c <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c0021109:	fb                   	sti    
c002110a:	eb 02                	jmp    c002110e <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002110c:	31 c0                	xor    eax,eax
c002110e:	83 c4 2c             	add    esp,0x2c
c0021111:	5b                   	pop    ebx
c0021112:	5e                   	pop    esi
c0021113:	5f                   	pop    edi
c0021114:	5d                   	pop    ebp
c0021115:	c3                   	ret    

c0021116 <SATA::read(unsigned long long, int, void*)>:
c0021116:	57                   	push   edi
c0021117:	b8 04 00 00 00       	mov    eax,0x4
c002111c:	56                   	push   esi
c002111d:	53                   	push   ebx
c002111e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021122:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021126:	8d 7a ff             	lea    edi,[edx-0x1]
c0021129:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002112d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0021131:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0021137:	77 25                	ja     c002115e <SATA::read(unsigned long long, int, void*)+0x48>
c0021139:	b8 06 00 00 00       	mov    eax,0x6
c002113e:	85 f6                	test   esi,esi
c0021140:	74 1c                	je     c002115e <SATA::read(unsigned long long, int, void*)+0x48>
c0021142:	50                   	push   eax
c0021143:	50                   	push   eax
c0021144:	6a 00                	push   0x0
c0021146:	56                   	push   esi
c0021147:	52                   	push   edx
c0021148:	53                   	push   ebx
c0021149:	51                   	push   ecx
c002114a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002114e:	e8 3b fd ff ff       	call   c0020e8e <SATA::access(unsigned long long, int, void*, bool)>
c0021153:	83 c4 20             	add    esp,0x20
c0021156:	85 c0                	test   eax,eax
c0021158:	0f 95 c0             	setne  al
c002115b:	0f b6 c0             	movzx  eax,al
c002115e:	5b                   	pop    ebx
c002115f:	5e                   	pop    esi
c0021160:	5f                   	pop    edi
c0021161:	c3                   	ret    

c0021162 <SATA::write(unsigned long long, int, void*)>:
c0021162:	55                   	push   ebp
c0021163:	b8 04 00 00 00       	mov    eax,0x4
c0021168:	57                   	push   edi
c0021169:	56                   	push   esi
c002116a:	53                   	push   ebx
c002116b:	83 ec 0c             	sub    esp,0xc
c002116e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021172:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021176:	8d 73 ff             	lea    esi,[ebx-0x1]
c0021179:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002117d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021181:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0021187:	77 3d                	ja     c00211c6 <SATA::write(unsigned long long, int, void*)+0x64>
c0021189:	b8 06 00 00 00       	mov    eax,0x6
c002118e:	85 ed                	test   ebp,ebp
c0021190:	74 34                	je     c00211c6 <SATA::write(unsigned long long, int, void*)+0x64>
c0021192:	c1 e3 09             	shl    ebx,0x9
c0021195:	01 eb                	add    ebx,ebp
c0021197:	89 d6                	mov    esi,edx
c0021199:	89 cf                	mov    edi,ecx
c002119b:	83 c6 01             	add    esi,0x1
c002119e:	83 d7 00             	adc    edi,0x0
c00211a1:	50                   	push   eax
c00211a2:	50                   	push   eax
c00211a3:	6a 01                	push   0x1
c00211a5:	55                   	push   ebp
c00211a6:	81 c5 00 02 00 00    	add    ebp,0x200
c00211ac:	6a 01                	push   0x1
c00211ae:	51                   	push   ecx
c00211af:	52                   	push   edx
c00211b0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00211b4:	e8 d5 fc ff ff       	call   c0020e8e <SATA::access(unsigned long long, int, void*, bool)>
c00211b9:	83 c4 20             	add    esp,0x20
c00211bc:	89 f2                	mov    edx,esi
c00211be:	89 f9                	mov    ecx,edi
c00211c0:	39 dd                	cmp    ebp,ebx
c00211c2:	75 d3                	jne    c0021197 <SATA::write(unsigned long long, int, void*)+0x35>
c00211c4:	31 c0                	xor    eax,eax
c00211c6:	83 c4 0c             	add    esp,0xc
c00211c9:	5b                   	pop    ebx
c00211ca:	5e                   	pop    esi
c00211cb:	5f                   	pop    edi
c00211cc:	5d                   	pop    ebp
c00211cd:	c3                   	ret    

c00211ce <SATAPI::write(unsigned long long, int, void*)>:
c00211ce:	b8 03 00 00 00       	mov    eax,0x3
c00211d3:	c3                   	ret    

c00211d4 <SATAPI::close(int, int, void*)>:
c00211d4:	83 ec 0c             	sub    esp,0xc
c00211d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211db:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00211e1:	85 c0                	test   eax,eax
c00211e3:	74 0c                	je     c00211f1 <SATAPI::close(int, int, void*)+0x1d>
c00211e5:	83 ec 0c             	sub    esp,0xc
c00211e8:	8b 10                	mov    edx,DWORD PTR [eax]
c00211ea:	50                   	push   eax
c00211eb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00211ee:	83 c4 10             	add    esp,0x10
c00211f1:	31 c0                	xor    eax,eax
c00211f3:	83 c4 0c             	add    esp,0xc
c00211f6:	c3                   	ret    
c00211f7:	90                   	nop

c00211f8 <SATAPI::SATAPI()>:
c00211f8:	83 ec 0c             	sub    esp,0xc
c00211fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211ff:	83 ec 04             	sub    esp,0x4
c0021202:	68 00 08 00 00       	push   0x800
c0021207:	68 44 67 02 c0       	push   0xc0026744
c002120c:	50                   	push   eax
c002120d:	e8 24 8c fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021212:	83 c4 10             	add    esp,0x10
c0021215:	ba 38 68 02 c0       	mov    edx,0xc0026838
c002121a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002121e:	89 10                	mov    DWORD PTR [eax],edx
c0021220:	90                   	nop
c0021221:	83 c4 0c             	add    esp,0xc
c0021224:	c3                   	ret    
c0021225:	90                   	nop

c0021226 <SATAPI::diskRemoved()>:
c0021226:	c3                   	ret    
c0021227:	90                   	nop

c0021228 <SATAPI::diskInserted()>:
c0021228:	83 ec 18             	sub    esp,0x18
c002122b:	68 50 67 02 c0       	push   0xc0026750
c0021230:	e8 47 5d fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0021235:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021239:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0021240:	83 c4 1c             	add    esp,0x1c
c0021243:	c3                   	ret    

c0021244 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0021244:	55                   	push   ebp
c0021245:	57                   	push   edi
c0021246:	56                   	push   esi
c0021247:	53                   	push   ebx
c0021248:	83 ec 34             	sub    esp,0x34
c002124b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002124f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021253:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0021257:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002125b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002125f:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0021265:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002126b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002126f:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0021275:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021279:	83 c0 02             	add    eax,0x2
c002127c:	c1 e0 07             	shl    eax,0x7
c002127f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0021283:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021287:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002128b:	c1 e0 07             	shl    eax,0x7
c002128e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0021292:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021296:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00212a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00212a4:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00212aa:	e8 5f ea ff ff       	call   c001fd0e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00212af:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00212b3:	83 c4 10             	add    esp,0x10
c00212b6:	b8 01 00 00 00       	mov    eax,0x1
c00212bb:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00212c0:	0f 84 57 02 00 00    	je     c002151d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c00212c6:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00212cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00212d2:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00212d8:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00212de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00212e2:	c1 e1 05             	shl    ecx,0x5
c00212e5:	01 c8                	add    eax,ecx
c00212e7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00212e9:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00212ef:	81 c9 25 00 01 00    	or     ecx,0x10025
c00212f5:	89 08                	mov    DWORD PTR [eax],ecx
c00212f7:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00212fd:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0021303:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0021309:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002130c:	8d 7b 40             	lea    edi,[ebx+0x40]
c002130f:	50                   	push   eax
c0021310:	68 90 00 00 00       	push   0x90
c0021315:	6a 00                	push   0x0
c0021317:	53                   	push   ebx
c0021318:	e8 d3 f1 fd ff       	call   c00004f0 <memset>
c002131d:	b9 0c 00 00 00       	mov    ecx,0xc
c0021322:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0021326:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021328:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c002132e:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0021332:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0021338:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002133c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021340:	48                   	dec    eax
c0021341:	25 ff ff 3f 00       	and    eax,0x3fffff
c0021346:	89 c1                	mov    ecx,eax
c0021348:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002134e:	25 00 00 c0 ff       	and    eax,0xffc00000
c0021353:	09 c8                	or     eax,ecx
c0021355:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002135b:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c0021361:	83 c8 80             	or     eax,0xffffff80
c0021364:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c002136a:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002136d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021371:	25 00 7f 00 00       	and    eax,0x7f00
c0021376:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c002137a:	0d 27 80 ff ff       	or     eax,0xffff8027
c002137f:	66 89 03             	mov    WORD PTR [ebx],ax
c0021382:	89 d0                	mov    eax,edx
c0021384:	c1 ea 18             	shr    edx,0x18
c0021387:	c1 e8 10             	shr    eax,0x10
c002138a:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002138d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0021390:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0021394:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0021397:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002139b:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002139e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00213a2:	83 c4 10             	add    esp,0x10
c00213a5:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00213a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00213ad:	31 c0                	xor    eax,eax
c00213af:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00213b5:	80 e1 88             	and    cl,0x88
c00213b8:	74 0a                	je     c00213c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c00213ba:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00213bf:	74 0a                	je     c00213cb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c00213c1:	40                   	inc    eax
c00213c2:	eb eb                	jmp    c00213af <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00213c4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00213c9:	75 43                	jne    c002140e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c00213cb:	83 ec 0c             	sub    esp,0xc
c00213ce:	68 68 67 02 c0       	push   0xc0026768
c00213d3:	e8 a4 5b fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00213d8:	58                   	pop    eax
c00213d9:	5a                   	pop    edx
c00213da:	68 7d 67 02 c0       	push   0xc002677d
c00213df:	ff 35 f4 d1 02 c0    	push   DWORD PTR ds:0xc002d1f4
c00213e5:	e8 de 11 ff ff       	call   c00125c8 <VgaText::puts(char const*)>
c00213ea:	59                   	pop    ecx
c00213eb:	5b                   	pop    ebx
c00213ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00213f0:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00213f6:	e8 ad e9 ff ff       	call   c001fda8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00213fb:	5e                   	pop    esi
c00213fc:	5f                   	pop    edi
c00213fd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0021401:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0021407:	e8 7c e9 ff ff       	call   c001fd88 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002140c:	eb 48                	jmp    c0021456 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c002140e:	be 01 00 00 00       	mov    esi,0x1
c0021413:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0021417:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002141b:	d3 e6                	shl    esi,cl
c002141d:	c1 e7 07             	shl    edi,0x7
c0021420:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0021426:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c002142b:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c002142f:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0021435:	85 c6                	test   esi,eax
c0021437:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002143d:	0f 84 a7 00 00 00    	je     c00214ea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a6>
c0021443:	0f ba e0 1e          	bt     eax,0x1e
c0021447:	73 1a                	jae    c0021463 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c0021449:	83 ec 0c             	sub    esp,0xc
c002144c:	68 8f 67 02 c0       	push   0xc002678f
c0021451:	e8 26 5b fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0021456:	83 c4 10             	add    esp,0x10
c0021459:	b8 01 00 00 00       	mov    eax,0x1
c002145e:	e9 ba 00 00 00       	jmp    c002151d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c0021463:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c0021469:	83 f8 0d             	cmp    eax,0xd
c002146c:	77 0b                	ja     c0021479 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x235>
c002146e:	50                   	push   eax
c002146f:	50                   	push   eax
c0021470:	6a 00                	push   0x0
c0021472:	68 c8 00 00 00       	push   0xc8
c0021477:	eb 2a                	jmp    c00214a3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c0021479:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c002147f:	83 f8 0d             	cmp    eax,0xd
c0021482:	77 0b                	ja     c002148f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c0021484:	51                   	push   ecx
c0021485:	51                   	push   ecx
c0021486:	6a 00                	push   0x0
c0021488:	68 58 02 00 00       	push   0x258
c002148d:	eb 14                	jmp    c00214a3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c002148f:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c0021495:	83 f8 06             	cmp    eax,0x6
c0021498:	77 11                	ja     c00214ab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c002149a:	52                   	push   edx
c002149b:	52                   	push   edx
c002149c:	6a 00                	push   0x0
c002149e:	68 dc 05 00 00       	push   0x5dc
c00214a3:	e8 70 62 ff ff       	call   c0017718 <milliTenthSleep(unsigned long long)>
c00214a8:	83 c4 10             	add    esp,0x10
c00214ab:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00214af:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c00214b2:	75 06                	jne    c00214ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x276>
c00214b4:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c00214b8:	74 16                	je     c00214d0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c00214ba:	83 fb 06             	cmp    ebx,0x6
c00214bd:	77 11                	ja     c00214d0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c00214bf:	50                   	push   eax
c00214c0:	50                   	push   eax
c00214c1:	6a 00                	push   0x0
c00214c3:	68 c4 09 00 00       	push   0x9c4
c00214c8:	e8 4b 62 ff ff       	call   c0017718 <milliTenthSleep(unsigned long long)>
c00214cd:	83 c4 10             	add    esp,0x10
c00214d0:	43                   	inc    ebx
c00214d1:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c00214d7:	0f 85 52 ff ff ff    	jne    c002142f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c00214dd:	83 ec 0c             	sub    esp,0xc
c00214e0:	68 a2 67 02 c0       	push   0xc00267a2
c00214e5:	e9 67 ff ff ff       	jmp    c0021451 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c00214ea:	0f ba e0 1e          	bt     eax,0x1e
c00214ee:	73 0d                	jae    c00214fd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b9>
c00214f0:	83 ec 0c             	sub    esp,0xc
c00214f3:	68 b6 67 02 c0       	push   0xc00267b6
c00214f8:	e9 54 ff ff ff       	jmp    c0021451 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c00214fd:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0021502:	74 17                	je     c002151b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c0021504:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0021509:	74 10                	je     c002151b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c002150b:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0021511:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0021515:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0021519:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002151b:	31 c0                	xor    eax,eax
c002151d:	83 c4 2c             	add    esp,0x2c
c0021520:	5b                   	pop    ebx
c0021521:	5e                   	pop    esi
c0021522:	5f                   	pop    edi
c0021523:	5d                   	pop    ebp
c0021524:	c3                   	ret    
c0021525:	90                   	nop

c0021526 <SATAPI::eject()>:
c0021526:	57                   	push   edi
c0021527:	b9 03 00 00 00       	mov    ecx,0x3
c002152c:	83 ec 18             	sub    esp,0x18
c002152f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021533:	fc                   	cld    
c0021534:	31 c0                	xor    eax,eax
c0021536:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021538:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002153d:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0021542:	50                   	push   eax
c0021543:	6a 00                	push   0x0
c0021545:	6a 00                	push   0x0
c0021547:	6a 00                	push   0x0
c0021549:	6a 00                	push   0x0
c002154b:	6a 02                	push   0x2
c002154d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021551:	50                   	push   eax
c0021552:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021556:	e8 e9 fc ff ff       	call   c0021244 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002155b:	31 c0                	xor    eax,eax
c002155d:	83 c4 38             	add    esp,0x38
c0021560:	5f                   	pop    edi
c0021561:	c3                   	ret    

c0021562 <SATAPI::detectMedia()>:
c0021562:	53                   	push   ebx
c0021563:	83 ec 14             	sub    esp,0x14
c0021566:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002156a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0021570:	e8 97 9e fe ff       	call   c000b40c <VCache::writeWriteBuffer()>
c0021575:	59                   	pop    ecx
c0021576:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002157c:	e8 7b 9e fe ff       	call   c000b3fc <VCache::invalidateReadBuffer()>
c0021581:	c7 04 24 cb 67 02 c0 	mov    DWORD PTR [esp],0xc00267cb
c0021588:	e8 ef 59 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c002158d:	83 c4 10             	add    esp,0x10
c0021590:	31 c0                	xor    eax,eax
c0021592:	8b 14 85 e0 ca 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3520]
c0021599:	85 d2                	test   edx,edx
c002159b:	74 0f                	je     c00215ac <SATAPI::detectMedia()+0x4a>
c002159d:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c00215a3:	75 07                	jne    c00215ac <SATAPI::detectMedia()+0x4a>
c00215a5:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c00215ac:	40                   	inc    eax
c00215ad:	83 f8 1a             	cmp    eax,0x1a
c00215b0:	75 e0                	jne    c0021592 <SATAPI::detectMedia()+0x30>
c00215b2:	83 c4 08             	add    esp,0x8
c00215b5:	5b                   	pop    ebx
c00215b6:	c3                   	ret    
c00215b7:	90                   	nop

c00215b8 <SATAPI::open(int, int, void*)>:
c00215b8:	56                   	push   esi
c00215b9:	53                   	push   ebx
c00215ba:	51                   	push   ecx
c00215bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00215bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00215c3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00215cd:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00215d3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00215dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00215e1:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00215eb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00215f1:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00215f8:	e8 b7 e7 fe ff       	call   c000fdb4 <Phys::allocatePage()>
c00215fd:	89 c6                	mov    esi,eax
c00215ff:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0021605:	81 c6 00 10 00 00    	add    esi,0x1000
c002160b:	e8 a4 e7 fe ff       	call   c000fdb4 <Phys::allocatePage()>
c0021610:	39 c6                	cmp    esi,eax
c0021612:	74 10                	je     c0021624 <SATAPI::open(int, int, void*)+0x6c>
c0021614:	83 ec 0c             	sub    esp,0xc
c0021617:	68 e0 67 02 c0       	push   0xc00267e0
c002161c:	e8 9f e5 fe ff       	call   c000fbc0 <KePanic(char const*)>
c0021621:	83 c4 10             	add    esp,0x10
c0021624:	83 ec 0c             	sub    esp,0xc
c0021627:	6a 02                	push   0x2
c0021629:	e8 c5 1b ff ff       	call   c00131f3 <Virt::allocateKernelVirtualPages(int)>
c002162e:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0021634:	6a 03                	push   0x3
c0021636:	50                   	push   eax
c0021637:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002163d:	ff 35 90 d2 02 c0    	push   DWORD PTR ds:0xc002d290
c0021643:	e8 8e 22 ff ff       	call   c00138d6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0021648:	83 c4 14             	add    esp,0x14
c002164b:	68 78 01 00 00       	push   0x178
c0021650:	e8 0e e1 fe ff       	call   c000f763 <malloc>
c0021655:	83 c4 0c             	add    esp,0xc
c0021658:	89 c6                	mov    esi,eax
c002165a:	6a 00                	push   0x0
c002165c:	68 ff ff ff 7f       	push   0x7fffffff
c0021661:	6a 00                	push   0x0
c0021663:	6a 00                	push   0x0
c0021665:	53                   	push   ebx
c0021666:	68 f6 67 02 c0       	push   0xc00267f6
c002166b:	50                   	push   eax
c002166c:	e8 fb 91 fe ff       	call   c000a86c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0021671:	83 c4 14             	add    esp,0x14
c0021674:	56                   	push   esi
c0021675:	e8 b2 92 fe ff       	call   c000a92c <LogicalDisk::assignDriveLetter()>
c002167a:	5a                   	pop    edx
c002167b:	0f be c0             	movsx  eax,al
c002167e:	59                   	pop    ecx
c002167f:	50                   	push   eax
c0021680:	68 3c 66 02 c0       	push   0xc002663c
c0021685:	e8 f2 58 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c002168a:	58                   	pop    eax
c002168b:	5a                   	pop    edx
c002168c:	56                   	push   esi
c002168d:	53                   	push   ebx
c002168e:	e8 c1 83 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c0021693:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0021699:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002169c:	e8 fd 87 fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c00216a1:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00216a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00216ab:	e8 b2 fe ff ff       	call   c0021562 <SATAPI::detectMedia()>
c00216b0:	83 c4 14             	add    esp,0x14
c00216b3:	31 c0                	xor    eax,eax
c00216b5:	5b                   	pop    ebx
c00216b6:	5e                   	pop    esi
c00216b7:	c3                   	ret    

c00216b8 <SATAPI::read(unsigned long long, int, void*)>:
c00216b8:	57                   	push   edi
c00216b9:	56                   	push   esi
c00216ba:	53                   	push   ebx
c00216bb:	83 ec 30             	sub    esp,0x30
c00216be:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00216c2:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00216c6:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00216ca:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00216ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00216d2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00216d6:	83 fe 04             	cmp    esi,0x4
c00216d9:	7e 10                	jle    c00216eb <SATAPI::read(unsigned long long, int, void*)+0x33>
c00216db:	83 ec 0c             	sub    esp,0xc
c00216de:	68 04 68 02 c0       	push   0xc0026804
c00216e3:	e8 d8 e4 fe ff       	call   c000fbc0 <KePanic(char const*)>
c00216e8:	83 c4 10             	add    esp,0x10
c00216eb:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00216f1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00216f7:	51                   	push   ecx
c00216f8:	50                   	push   eax
c00216f9:	83 c0 02             	add    eax,0x2
c00216fc:	c1 e0 07             	shl    eax,0x7
c00216ff:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c0021705:	50                   	push   eax
c0021706:	52                   	push   edx
c0021707:	e8 c6 e6 ff ff       	call   c001fdd2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002170c:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0021710:	b9 03 00 00 00       	mov    ecx,0x3
c0021715:	fc                   	cld    
c0021716:	31 c0                	xor    eax,eax
c0021718:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002171a:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c002171f:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0021724:	83 c4 0c             	add    esp,0xc
c0021727:	6a 00                	push   0x0
c0021729:	6a 00                	push   0x0
c002172b:	6a 00                	push   0x0
c002172d:	6a 00                	push   0x0
c002172f:	6a 02                	push   0x2
c0021731:	8d 44 24 30          	lea    eax,[esp+0x30]
c0021735:	50                   	push   eax
c0021736:	53                   	push   ebx
c0021737:	e8 08 fb ff ff       	call   c0021244 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002173c:	83 c4 20             	add    esp,0x20
c002173f:	85 c0                	test   eax,eax
c0021741:	75 44                	jne    c0021787 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c0021743:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021747:	b9 03 00 00 00       	mov    ecx,0x3
c002174c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002174e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021752:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c0021757:	0f c8                	bswap  eax
c0021759:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c002175d:	89 f0                	mov    eax,esi
c002175f:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0021763:	50                   	push   eax
c0021764:	56                   	push   esi
c0021765:	c1 e6 0b             	shl    esi,0xb
c0021768:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002176c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021770:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021774:	56                   	push   esi
c0021775:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0021779:	50                   	push   eax
c002177a:	53                   	push   ebx
c002177b:	e8 c4 fa ff ff       	call   c0021244 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021780:	83 c4 20             	add    esp,0x20
c0021783:	85 c0                	test   eax,eax
c0021785:	74 14                	je     c002179b <SATAPI::read(unsigned long long, int, void*)+0xe3>
c0021787:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002178b:	83 ec 0c             	sub    esp,0xc
c002178e:	53                   	push   ebx
c002178f:	e8 ce fd ff ff       	call   c0021562 <SATAPI::detectMedia()>
c0021794:	83 c4 10             	add    esp,0x10
c0021797:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002179b:	83 c4 30             	add    esp,0x30
c002179e:	5b                   	pop    ebx
c002179f:	5e                   	pop    esi
c00217a0:	5f                   	pop    edi
c00217a1:	c3                   	ret    
c00217a2:	66 90                	xchg   ax,ax

c00217a4 <APICTimer::close(int, int, void*)>:
c00217a4:	b8 00 00 00 00       	mov    eax,0x0
c00217a9:	c3                   	ret    
c00217aa:	66 90                	xchg   ax,ax

c00217ac <apicTimerHandler(regs*, void*)>:
c00217ac:	83 ec 0c             	sub    esp,0xc
c00217af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00217b3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00217b5:	b8 10 27 00 00       	mov    eax,0x2710
c00217ba:	ba 00 00 00 00       	mov    edx,0x0
c00217bf:	f7 f1                	div    ecx
c00217c1:	83 ec 0c             	sub    esp,0xc
c00217c4:	50                   	push   eax
c00217c5:	e8 5e 99 fe ff       	call   c000b128 <timerHandler(unsigned int)>
c00217ca:	83 c4 10             	add    esp,0x10
c00217cd:	90                   	nop
c00217ce:	83 c4 0c             	add    esp,0xc
c00217d1:	c3                   	ret    
c00217d2:	66 90                	xchg   ax,ax

c00217d4 <APICTimer::open(int, int, void*)>:
c00217d4:	83 ec 0c             	sub    esp,0xc
c00217d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217db:	8b 00                	mov    eax,DWORD PTR [eax]
c00217dd:	83 c0 24             	add    eax,0x24
c00217e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00217e2:	83 ec 08             	sub    esp,0x8
c00217e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217ed:	ff d0                	call   eax
c00217ef:	83 c4 10             	add    esp,0x10
c00217f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217f6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00217fa:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021804:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021808:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002180e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021812:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0021818:	83 ec 0c             	sub    esp,0xc
c002181b:	51                   	push   ecx
c002181c:	6a 01                	push   0x1
c002181e:	68 ac 17 02 c0       	push   0xc00217ac
c0021823:	52                   	push   edx
c0021824:	50                   	push   eax
c0021825:	e8 d6 81 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002182a:	83 c4 20             	add    esp,0x20
c002182d:	89 c2                	mov    edx,eax
c002182f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021833:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021839:	b8 00 00 00 00       	mov    eax,0x0
c002183e:	83 c4 0c             	add    esp,0xc
c0021841:	c3                   	ret    
c0021842:	66 90                	xchg   ax,ax

c0021844 <APICTimer::write(int)>:
c0021844:	83 ec 0c             	sub    esp,0xc
c0021847:	83 ec 0c             	sub    esp,0xc
c002184a:	68 68 68 02 c0       	push   0xc0026868
c002184f:	e8 6c e3 fe ff       	call   c000fbc0 <KePanic(char const*)>
c0021854:	83 c4 10             	add    esp,0x10
c0021857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002185b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002185f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021865:	90                   	nop
c0021866:	83 c4 0c             	add    esp,0xc
c0021869:	c3                   	ret    
c002186a:	66 90                	xchg   ax,ax

c002186c <APICTimer::APICTimer()>:
c002186c:	83 ec 0c             	sub    esp,0xc
c002186f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021873:	83 ec 08             	sub    esp,0x8
c0021876:	68 78 68 02 c0       	push   0xc0026878
c002187b:	50                   	push   eax
c002187c:	e8 db 97 fe ff       	call   c000b05c <Timer::Timer(char const*)>
c0021881:	83 c4 10             	add    esp,0x10
c0021884:	ba 8c 68 02 c0       	mov    edx,0xc002688c
c0021889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002188d:	89 10                	mov    DWORD PTR [eax],edx
c002188f:	90                   	nop
c0021890:	83 c4 0c             	add    esp,0xc
c0021893:	c3                   	ret    

c0021894 <PIT::write(int)>:
c0021894:	83 ec 10             	sub    esp,0x10
c0021897:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002189b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002189f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00218a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00218a9:	a3 f8 04 03 c0       	mov    ds:0xc00304f8,eax
c00218ae:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00218b3:	89 c2                	mov    edx,eax
c00218b5:	c1 fa 1f             	sar    edx,0x1f
c00218b8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00218bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00218c0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00218c7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00218cc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00218d0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00218d5:	ee                   	out    dx,al
c00218d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00218da:	0f b6 c0             	movzx  eax,al
c00218dd:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00218e4:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00218e8:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00218ec:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00218f1:	ee                   	out    dx,al
c00218f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00218f6:	c1 f8 08             	sar    eax,0x8
c00218f9:	0f b6 c0             	movzx  eax,al
c00218fc:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0021903:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0021907:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002190b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0021910:	ee                   	out    dx,al
c0021911:	90                   	nop
c0021912:	83 c4 10             	add    esp,0x10
c0021915:	c3                   	ret    
c0021916:	66 90                	xchg   ax,ax

c0021918 <pitHandler(regs*, void*)>:
c0021918:	83 ec 0c             	sub    esp,0xc
c002191b:	8b 0d f8 04 03 c0    	mov    ecx,DWORD PTR ds:0xc00304f8
c0021921:	b8 10 27 00 00       	mov    eax,0x2710
c0021926:	89 c2                	mov    edx,eax
c0021928:	c1 fa 1f             	sar    edx,0x1f
c002192b:	f7 f9                	idiv   ecx
c002192d:	83 ec 0c             	sub    esp,0xc
c0021930:	50                   	push   eax
c0021931:	e8 f2 97 fe ff       	call   c000b128 <timerHandler(unsigned int)>
c0021936:	83 c4 10             	add    esp,0x10
c0021939:	90                   	nop
c002193a:	83 c4 0c             	add    esp,0xc
c002193d:	c3                   	ret    
c002193e:	66 90                	xchg   ax,ax

c0021940 <PIT::open(int, int, void*)>:
c0021940:	83 ec 0c             	sub    esp,0xc
c0021943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021947:	8b 00                	mov    eax,DWORD PTR [eax]
c0021949:	83 c0 24             	add    eax,0x24
c002194c:	8b 00                	mov    eax,DWORD PTR [eax]
c002194e:	83 ec 08             	sub    esp,0x8
c0021951:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021955:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021959:	ff d0                	call   eax
c002195b:	83 c4 10             	add    esp,0x10
c002195e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021962:	83 ec 0c             	sub    esp,0xc
c0021965:	6a 00                	push   0x0
c0021967:	6a 01                	push   0x1
c0021969:	68 18 19 02 c0       	push   0xc0021918
c002196e:	6a 00                	push   0x0
c0021970:	50                   	push   eax
c0021971:	e8 8a 80 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021976:	83 c4 20             	add    esp,0x20
c0021979:	89 c2                	mov    edx,eax
c002197b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002197f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021985:	b8 00 00 00 00       	mov    eax,0x0
c002198a:	83 c4 0c             	add    esp,0xc
c002198d:	c3                   	ret    
c002198e:	66 90                	xchg   ax,ax

c0021990 <PIT::close(int, int, void*)>:
c0021990:	83 ec 0c             	sub    esp,0xc
c0021993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021997:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00219a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219a5:	6a 01                	push   0x1
c00219a7:	68 18 19 02 c0       	push   0xc0021918
c00219ac:	6a 00                	push   0x0
c00219ae:	50                   	push   eax
c00219af:	e8 82 80 fe ff       	call   c0009a36 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00219b4:	83 c4 10             	add    esp,0x10
c00219b7:	b8 00 00 00 00       	mov    eax,0x0
c00219bc:	83 c4 0c             	add    esp,0xc
c00219bf:	c3                   	ret    

c00219c0 <PIT::PIT()>:
c00219c0:	83 ec 0c             	sub    esp,0xc
c00219c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219c7:	83 ec 08             	sub    esp,0x8
c00219ca:	68 b4 68 02 c0       	push   0xc00268b4
c00219cf:	50                   	push   eax
c00219d0:	e8 87 96 fe ff       	call   c000b05c <Timer::Timer(char const*)>
c00219d5:	83 c4 10             	add    esp,0x10
c00219d8:	ba dc 68 02 c0       	mov    edx,0xc00268dc
c00219dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219e1:	89 10                	mov    DWORD PTR [eax],edx
c00219e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00219ed:	0f b6 d0             	movzx  edx,al
c00219f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219f4:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00219fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021a05:	0f b6 d0             	movzx  edx,al
c0021a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a0c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0021a11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a15:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021a1b:	8d 50 01             	lea    edx,[eax+0x1]
c0021a1e:	88 d1                	mov    cl,dl
c0021a20:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021a24:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0021a2a:	0f b6 d0             	movzx  edx,al
c0021a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a31:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021a35:	83 e1 3f             	and    ecx,0x3f
c0021a38:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021a3c:	90                   	nop
c0021a3d:	83 c4 0c             	add    esp,0xc
c0021a40:	c3                   	ret    
c0021a41:	66 90                	xchg   ax,ax
c0021a43:	66 90                	xchg   ax,ax
c0021a45:	66 90                	xchg   ax,ax
c0021a47:	66 90                	xchg   ax,ax
c0021a49:	66 90                	xchg   ax,ax
c0021a4b:	66 90                	xchg   ax,ax
c0021a4d:	66 90                	xchg   ax,ax
c0021a4f:	90                   	nop

c0021a50 <avxDetect>:
c0021a50:	b8 01 00 00 00       	mov    eax,0x1
c0021a55:	0f a2                	cpuid  
c0021a57:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c0021a5d:	74 15                	je     c0021a74 <avxDetect.noAVX>
c0021a5f:	b8 01 00 00 00       	mov    eax,0x1
c0021a64:	0f a2                	cpuid  
c0021a66:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c0021a6c:	74 06                	je     c0021a74 <avxDetect.noAVX>
c0021a6e:	b8 01 00 00 00       	mov    eax,0x1
c0021a73:	c3                   	ret    

c0021a74 <avxDetect.noAVX>:
c0021a74:	b8 00 00 00 00       	mov    eax,0x0
c0021a79:	c3                   	ret    

c0021a7a <avxSave>:
c0021a7a:	53                   	push   ebx
c0021a7b:	52                   	push   edx
c0021a7c:	31 c0                	xor    eax,eax
c0021a7e:	48                   	dec    eax
c0021a7f:	89 c2                	mov    edx,eax
c0021a81:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021a85:	0f ae 23             	xsave  [ebx]
c0021a88:	5a                   	pop    edx
c0021a89:	5b                   	pop    ebx
c0021a8a:	c3                   	ret    

c0021a8b <avxLoad>:
c0021a8b:	53                   	push   ebx
c0021a8c:	52                   	push   edx
c0021a8d:	31 c0                	xor    eax,eax
c0021a8f:	48                   	dec    eax
c0021a90:	89 c2                	mov    edx,eax
c0021a92:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021a96:	0f ae 2b             	xrstor [ebx]
c0021a99:	5a                   	pop    edx
c0021a9a:	5b                   	pop    ebx
c0021a9b:	c3                   	ret    

c0021a9c <avxInit>:
c0021a9c:	e8 17 03 00 00       	call   c0021db8 <sseInit>
c0021aa1:	50                   	push   eax
c0021aa2:	51                   	push   ecx
c0021aa3:	0f 20 e0             	mov    eax,cr4
c0021aa6:	0d 00 00 04 00       	or     eax,0x40000
c0021aab:	0f 22 e0             	mov    cr4,eax
c0021aae:	31 c9                	xor    ecx,ecx
c0021ab0:	0f 01 d0             	xgetbv 
c0021ab3:	0d 07 00 00 00       	or     eax,0x7
c0021ab8:	0f 01 d1             	xsetbv 
c0021abb:	59                   	pop    ecx
c0021abc:	58                   	pop    eax
c0021abd:	c3                   	ret    

c0021abe <avxClose>:
c0021abe:	c3                   	ret    
c0021abf:	90                   	nop

c0021ac0 <isr0>:
c0021ac0:	fa                   	cli    
c0021ac1:	68 00 00 00 00       	push   0x0
c0021ac6:	68 00 00 00 00       	push   0x0
c0021acb:	e9 56 01 00 00       	jmp    c0021c26 <int_common_stub>

c0021ad0 <isr1>:
c0021ad0:	fa                   	cli    
c0021ad1:	6a 00                	push   0x0
c0021ad3:	6a 01                	push   0x1
c0021ad5:	e9 4c 01 00 00       	jmp    c0021c26 <int_common_stub>

c0021ada <isr2>:
c0021ada:	fa                   	cli    
c0021adb:	6a 00                	push   0x0
c0021add:	6a 02                	push   0x2
c0021adf:	e9 42 01 00 00       	jmp    c0021c26 <int_common_stub>

c0021ae4 <isr3>:
c0021ae4:	fa                   	cli    
c0021ae5:	6a 00                	push   0x0
c0021ae7:	6a 03                	push   0x3
c0021ae9:	e9 38 01 00 00       	jmp    c0021c26 <int_common_stub>

c0021aee <isr4>:
c0021aee:	fa                   	cli    
c0021aef:	6a 00                	push   0x0
c0021af1:	6a 04                	push   0x4
c0021af3:	e9 2e 01 00 00       	jmp    c0021c26 <int_common_stub>

c0021af8 <isr5>:
c0021af8:	fa                   	cli    
c0021af9:	6a 00                	push   0x0
c0021afb:	6a 05                	push   0x5
c0021afd:	e9 24 01 00 00       	jmp    c0021c26 <int_common_stub>

c0021b02 <isr6>:
c0021b02:	fa                   	cli    
c0021b03:	6a 00                	push   0x0
c0021b05:	6a 06                	push   0x6
c0021b07:	e9 1a 01 00 00       	jmp    c0021c26 <int_common_stub>

c0021b0c <isr7>:
c0021b0c:	fa                   	cli    
c0021b0d:	6a 00                	push   0x0
c0021b0f:	6a 07                	push   0x7
c0021b11:	e9 10 01 00 00       	jmp    c0021c26 <int_common_stub>

c0021b16 <isr8>:
c0021b16:	fa                   	cli    
c0021b17:	6a 08                	push   0x8
c0021b19:	e9 08 01 00 00       	jmp    c0021c26 <int_common_stub>

c0021b1e <isr9>:
c0021b1e:	fa                   	cli    
c0021b1f:	6a 00                	push   0x0
c0021b21:	6a 09                	push   0x9
c0021b23:	e9 fe 00 00 00       	jmp    c0021c26 <int_common_stub>

c0021b28 <isr10>:
c0021b28:	fa                   	cli    
c0021b29:	6a 0a                	push   0xa
c0021b2b:	e9 f6 00 00 00       	jmp    c0021c26 <int_common_stub>

c0021b30 <isr11>:
c0021b30:	fa                   	cli    
c0021b31:	6a 0b                	push   0xb
c0021b33:	e9 ee 00 00 00       	jmp    c0021c26 <int_common_stub>

c0021b38 <isr12>:
c0021b38:	fa                   	cli    
c0021b39:	6a 0c                	push   0xc
c0021b3b:	e9 e6 00 00 00       	jmp    c0021c26 <int_common_stub>

c0021b40 <isr13>:
c0021b40:	fa                   	cli    
c0021b41:	6a 0d                	push   0xd
c0021b43:	53                   	push   ebx
c0021b44:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021b48:	81 fb e5 1c 02 c0    	cmp    ebx,0xc0021ce5
c0021b4e:	5b                   	pop    ebx
c0021b4f:	0f 84 92 01 00 00    	je     c0021ce7 <finishSignal2>
c0021b55:	e9 cc 00 00 00       	jmp    c0021c26 <int_common_stub>

c0021b5a <isr14>:
c0021b5a:	fa                   	cli    
c0021b5b:	6a 0e                	push   0xe
c0021b5d:	e9 c4 00 00 00       	jmp    c0021c26 <int_common_stub>

c0021b62 <isr15>:
c0021b62:	fa                   	cli    
c0021b63:	6a 00                	push   0x0
c0021b65:	6a 0f                	push   0xf
c0021b67:	e9 ba 00 00 00       	jmp    c0021c26 <int_common_stub>

c0021b6c <isr16>:
c0021b6c:	fa                   	cli    
c0021b6d:	6a 00                	push   0x0
c0021b6f:	6a 10                	push   0x10
c0021b71:	e9 b0 00 00 00       	jmp    c0021c26 <int_common_stub>

c0021b76 <isr17>:
c0021b76:	fa                   	cli    
c0021b77:	6a 00                	push   0x0
c0021b79:	6a 11                	push   0x11
c0021b7b:	e9 a6 00 00 00       	jmp    c0021c26 <int_common_stub>

c0021b80 <isr18>:
c0021b80:	fa                   	cli    
c0021b81:	6a 00                	push   0x0
c0021b83:	6a 12                	push   0x12
c0021b85:	e9 9c 00 00 00       	jmp    c0021c26 <int_common_stub>

c0021b8a <irq3>:
c0021b8a:	fa                   	cli    
c0021b8b:	6a 00                	push   0x0
c0021b8d:	6a 23                	push   0x23
c0021b8f:	e9 92 00 00 00       	jmp    c0021c26 <int_common_stub>

c0021b94 <irq4>:
c0021b94:	fa                   	cli    
c0021b95:	6a 00                	push   0x0
c0021b97:	6a 24                	push   0x24
c0021b99:	e9 88 00 00 00       	jmp    c0021c26 <int_common_stub>

c0021b9e <irq5>:
c0021b9e:	fa                   	cli    
c0021b9f:	6a 00                	push   0x0
c0021ba1:	6a 25                	push   0x25
c0021ba3:	e9 7e 00 00 00       	jmp    c0021c26 <int_common_stub>

c0021ba8 <irq6>:
c0021ba8:	fa                   	cli    
c0021ba9:	6a 00                	push   0x0
c0021bab:	6a 26                	push   0x26
c0021bad:	e9 74 00 00 00       	jmp    c0021c26 <int_common_stub>

c0021bb2 <irq7>:
c0021bb2:	fa                   	cli    
c0021bb3:	6a 00                	push   0x0
c0021bb5:	6a 27                	push   0x27
c0021bb7:	e9 6a 00 00 00       	jmp    c0021c26 <int_common_stub>

c0021bbc <irq8>:
c0021bbc:	fa                   	cli    
c0021bbd:	6a 00                	push   0x0
c0021bbf:	6a 28                	push   0x28
c0021bc1:	e9 60 00 00 00       	jmp    c0021c26 <int_common_stub>

c0021bc6 <irq9>:
c0021bc6:	fa                   	cli    
c0021bc7:	6a 00                	push   0x0
c0021bc9:	6a 29                	push   0x29
c0021bcb:	e9 56 00 00 00       	jmp    c0021c26 <int_common_stub>

c0021bd0 <irq10>:
c0021bd0:	fa                   	cli    
c0021bd1:	6a 00                	push   0x0
c0021bd3:	6a 2a                	push   0x2a
c0021bd5:	e9 4c 00 00 00       	jmp    c0021c26 <int_common_stub>

c0021bda <irq11>:
c0021bda:	fa                   	cli    
c0021bdb:	6a 00                	push   0x0
c0021bdd:	6a 2b                	push   0x2b
c0021bdf:	e9 42 00 00 00       	jmp    c0021c26 <int_common_stub>

c0021be4 <irq12>:
c0021be4:	fa                   	cli    
c0021be5:	6a 00                	push   0x0
c0021be7:	6a 2c                	push   0x2c
c0021be9:	e9 38 00 00 00       	jmp    c0021c26 <int_common_stub>

c0021bee <irq13>:
c0021bee:	fa                   	cli    
c0021bef:	6a 00                	push   0x0
c0021bf1:	6a 2d                	push   0x2d
c0021bf3:	e9 2e 00 00 00       	jmp    c0021c26 <int_common_stub>

c0021bf8 <irq14>:
c0021bf8:	fa                   	cli    
c0021bf9:	6a 00                	push   0x0
c0021bfb:	6a 2e                	push   0x2e
c0021bfd:	e9 24 00 00 00       	jmp    c0021c26 <int_common_stub>

c0021c02 <irq15>:
c0021c02:	fa                   	cli    
c0021c03:	6a 00                	push   0x0
c0021c05:	6a 2f                	push   0x2f
c0021c07:	e9 1a 00 00 00       	jmp    c0021c26 <int_common_stub>

c0021c0c <irq1>:
c0021c0c:	fa                   	cli    
c0021c0d:	6a 00                	push   0x0
c0021c0f:	6a 21                	push   0x21
c0021c11:	eb 13                	jmp    c0021c26 <int_common_stub>

c0021c13 <irq2>:
c0021c13:	fa                   	cli    
c0021c14:	6a 00                	push   0x0
c0021c16:	6a 22                	push   0x22
c0021c18:	eb 0c                	jmp    c0021c26 <int_common_stub>

c0021c1a <isr96>:
c0021c1a:	6a 00                	push   0x0
c0021c1c:	6a 60                	push   0x60
c0021c1e:	fb                   	sti    
c0021c1f:	eb 05                	jmp    c0021c26 <int_common_stub>

c0021c21 <irq0>:
c0021c21:	fa                   	cli    
c0021c22:	6a 00                	push   0x0
c0021c24:	6a 20                	push   0x20

c0021c26 <int_common_stub>:
c0021c26:	60                   	pusha  
c0021c27:	1e                   	push   ds
c0021c28:	06                   	push   es
c0021c29:	0f a0                	push   fs
c0021c2b:	0f a8                	push   gs
c0021c2d:	66 b8 10 00          	mov    ax,0x10
c0021c31:	66 8e d8             	mov    ds,ax
c0021c34:	66 8e c0             	mov    es,ax
c0021c37:	66 8e e0             	mov    fs,ax
c0021c3a:	66 8e e8             	mov    gs,ax
c0021c3d:	54                   	push   esp
c0021c3e:	fc                   	cld    
c0021c3f:	e8 44 95 ff ff       	call   c001b188 <int_handler>
c0021c44:	81 c4 04 00 00 00    	add    esp,0x4
c0021c4a:	0f a9                	pop    gs
c0021c4c:	0f a1                	pop    fs
c0021c4e:	07                   	pop    es
c0021c4f:	1f                   	pop    ds
c0021c50:	e8 d2 f3 fe ff       	call   c0011027 <KiCheckSignalZ>
c0021c55:	85 c0                	test   eax,eax
c0021c57:	75 08                	jne    c0021c61 <doSignals>
c0021c59:	61                   	popa   
c0021c5a:	81 c4 08 00 00 00    	add    esp,0x8
c0021c60:	cf                   	iret   

c0021c61 <doSignals>:
c0021c61:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c0021c66:	61                   	popa   
c0021c67:	53                   	push   ebx
c0021c68:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c0021c6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0021c71:	5b                   	pop    ebx
c0021c72:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c0021c77:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c0021c7a:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c0021c7d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0021c80:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c0021c83:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c0021c86:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c0021c89:	81 c4 08 00 00 00    	add    esp,0x8
c0021c8f:	5e                   	pop    esi
c0021c90:	5b                   	pop    ebx
c0021c91:	59                   	pop    ecx
c0021c92:	5a                   	pop    edx
c0021c93:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c0021c96:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c0021c99:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0021c9c:	52                   	push   edx
c0021c9d:	51                   	push   ecx
c0021c9e:	53                   	push   ebx
c0021c9f:	56                   	push   esi
c0021ca0:	81 ec 08 00 00 00    	sub    esp,0x8
c0021ca6:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c0021ca9:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0021cac:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c0021caf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021cb2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021cb5:	60                   	pusha  
c0021cb6:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c0021cbc:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0021cbf:	89 e3                	mov    ebx,esp
c0021cc1:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c0021cc4:	52                   	push   edx
c0021cc5:	68 e5 1c 02 c0       	push   0xc0021ce5
c0021cca:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c0021ccd:	89 dc                	mov    esp,ebx
c0021ccf:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0021cd2:	68 23 00 00 00       	push   0x23
c0021cd7:	51                   	push   ecx
c0021cd8:	68 02 02 00 00       	push   0x202
c0021cdd:	68 1b 00 00 00       	push   0x1b
c0021ce2:	ff 36                	push   DWORD PTR [esi]
c0021ce4:	cf                   	iret   

c0021ce5 <finishSignal>:
c0021ce5:	cd 0f                	int    0xf

c0021ce7 <finishSignal2>:
c0021ce7:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c0021ced:	e8 c1 f3 fe ff       	call   c00110b3 <KiFinishSignalZ>
c0021cf2:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c0021cf8:	68 23 00 00 00       	push   0x23
c0021cfd:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0021d00:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0021d03:	68 1b 00 00 00       	push   0x1b
c0021d08:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c0021d0b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021d0e:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0021d11:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0021d14:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021d17:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c0021d1a:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0021d1d:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c0021d20:	cf                   	iret   
c0021d21:	90                   	nop
c0021d22:	90                   	nop
c0021d23:	90                   	nop

c0021d24 <irq16>:
c0021d24:	fa                   	cli    
c0021d25:	6a 00                	push   0x0
c0021d27:	6a 30                	push   0x30
c0021d29:	e9 f8 fe ff ff       	jmp    c0021c26 <int_common_stub>

c0021d2e <irq17>:
c0021d2e:	fa                   	cli    
c0021d2f:	6a 00                	push   0x0
c0021d31:	6a 31                	push   0x31
c0021d33:	e9 ee fe ff ff       	jmp    c0021c26 <int_common_stub>

c0021d38 <irq18>:
c0021d38:	fa                   	cli    
c0021d39:	6a 00                	push   0x0
c0021d3b:	6a 32                	push   0x32
c0021d3d:	e9 e4 fe ff ff       	jmp    c0021c26 <int_common_stub>

c0021d42 <irq19>:
c0021d42:	fa                   	cli    
c0021d43:	6a 00                	push   0x0
c0021d45:	6a 33                	push   0x33
c0021d47:	e9 da fe ff ff       	jmp    c0021c26 <int_common_stub>

c0021d4c <irq20>:
c0021d4c:	fa                   	cli    
c0021d4d:	6a 00                	push   0x0
c0021d4f:	6a 34                	push   0x34
c0021d51:	e9 d0 fe ff ff       	jmp    c0021c26 <int_common_stub>

c0021d56 <irq21>:
c0021d56:	fa                   	cli    
c0021d57:	6a 00                	push   0x0
c0021d59:	6a 35                	push   0x35
c0021d5b:	e9 c6 fe ff ff       	jmp    c0021c26 <int_common_stub>

c0021d60 <irq22>:
c0021d60:	fa                   	cli    
c0021d61:	6a 00                	push   0x0
c0021d63:	6a 36                	push   0x36
c0021d65:	e9 bc fe ff ff       	jmp    c0021c26 <int_common_stub>

c0021d6a <irq23>:
c0021d6a:	fa                   	cli    
c0021d6b:	6a 00                	push   0x0
c0021d6d:	6a 37                	push   0x37
c0021d6f:	e9 b2 fe ff ff       	jmp    c0021c26 <int_common_stub>
c0021d74:	66 90                	xchg   ax,ax
c0021d76:	66 90                	xchg   ax,ax
c0021d78:	66 90                	xchg   ax,ax
c0021d7a:	66 90                	xchg   ax,ax
c0021d7c:	66 90                	xchg   ax,ax
c0021d7e:	66 90                	xchg   ax,ax

c0021d80 <i386GetRDRAND>:
c0021d80:	b9 64 00 00 00       	mov    ecx,0x64

c0021d85 <retry>:
c0021d85:	0f c7 f0             	rdrand eax
c0021d88:	72 05                	jb     c0021d8f <retry.done>
c0021d8a:	e2 f9                	loop   c0021d85 <retry>

c0021d8c <retry.fail>:
c0021d8c:	31 c0                	xor    eax,eax
c0021d8e:	c3                   	ret    

c0021d8f <retry.done>:
c0021d8f:	c3                   	ret    

c0021d90 <sseDetect>:
c0021d90:	b8 01 00 00 00       	mov    eax,0x1
c0021d95:	0f a2                	cpuid  
c0021d97:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0021d9d:	74 06                	je     c0021da5 <sseDetect.noSSE>
c0021d9f:	b8 01 00 00 00       	mov    eax,0x1
c0021da4:	c3                   	ret    

c0021da5 <sseDetect.noSSE>:
c0021da5:	31 c0                	xor    eax,eax
c0021da7:	c3                   	ret    

c0021da8 <sseSave>:
c0021da8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021dac:	0f ae 00             	fxsave [eax]
c0021daf:	c3                   	ret    

c0021db0 <sseLoad>:
c0021db0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021db4:	0f ae 08             	fxrstor [eax]
c0021db7:	c3                   	ret    

c0021db8 <sseInit>:
c0021db8:	e8 48 00 00 00       	call   c0021e05 <x87Init>
c0021dbd:	0f 20 e0             	mov    eax,cr4
c0021dc0:	66 0d 00 06          	or     ax,0x600
c0021dc4:	0f 22 e0             	mov    cr4,eax
c0021dc7:	c3                   	ret    

c0021dc8 <sseClose>:
c0021dc8:	c3                   	ret    
c0021dc9:	66 90                	xchg   ax,ax
c0021dcb:	66 90                	xchg   ax,ax
c0021dcd:	66 90                	xchg   ax,ax
c0021dcf:	90                   	nop

c0021dd0 <value_37F>:
c0021dd0:	7f 03                	jg     c0021dd5 <value_37A+0x1>

c0021dd2 <value_37E>:
c0021dd2:	7e 03                	jle    c0021dd7 <x87Detect+0x1>

c0021dd4 <value_37A>:
c0021dd4:	7a 03                	jp     c0021dd9 <x87Detect+0x3>

c0021dd6 <x87Detect>:
c0021dd6:	53                   	push   ebx
c0021dd7:	51                   	push   ecx
c0021dd8:	52                   	push   edx
c0021dd9:	b8 01 00 00 00       	mov    eax,0x1
c0021dde:	0f a2                	cpuid  
c0021de0:	f7 c2 01 00 00 00    	test   edx,0x1
c0021de6:	74 06                	je     c0021dee <x87Detect.nox87>
c0021de8:	b8 01 00 00 00       	mov    eax,0x1
c0021ded:	c3                   	ret    

c0021dee <x87Detect.nox87>:
c0021dee:	b8 00 00 00 00       	mov    eax,0x0
c0021df3:	5a                   	pop    edx
c0021df4:	59                   	pop    ecx
c0021df5:	5b                   	pop    ebx
c0021df6:	c3                   	ret    

c0021df7 <x87Save>:
c0021df7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021dfb:	dd 30                	fnsave [eax]
c0021dfd:	c3                   	ret    

c0021dfe <x87Load>:
c0021dfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e02:	dd 20                	frstor [eax]
c0021e04:	c3                   	ret    

c0021e05 <x87Init>:
c0021e05:	0f 20 c0             	mov    eax,cr0
c0021e08:	66 25 fb ff          	and    ax,0xfffb
c0021e0c:	66 0d 22 00          	or     ax,0x22
c0021e10:	0f 22 c0             	mov    cr0,eax
c0021e13:	db e3                	fninit 
c0021e15:	0f 06                	clts   
c0021e17:	d9 2d d4 1d 02 c0    	fldcw  WORD PTR ds:0xc0021dd4
c0021e1d:	c3                   	ret    

c0021e1e <x87Close>:
c0021e1e:	c3                   	ret    
c0021e1f:	90                   	nop

c0021e20 <__do_global_ctors_aux>:
c0021e20:	a1 20 2e 02 c0       	mov    eax,ds:0xc0022e20
c0021e25:	83 f8 ff             	cmp    eax,0xffffffff
c0021e28:	74 1a                	je     c0021e44 <__do_global_ctors_aux+0x24>
c0021e2a:	55                   	push   ebp
c0021e2b:	89 e5                	mov    ebp,esp
c0021e2d:	53                   	push   ebx
c0021e2e:	52                   	push   edx
c0021e2f:	bb 20 2e 02 c0       	mov    ebx,0xc0022e20
c0021e34:	ff d0                	call   eax
c0021e36:	83 eb 04             	sub    ebx,0x4
c0021e39:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021e3b:	83 f8 ff             	cmp    eax,0xffffffff
c0021e3e:	75 f4                	jne    c0021e34 <__do_global_ctors_aux+0x14>
c0021e40:	58                   	pop    eax
c0021e41:	5b                   	pop    ebx
c0021e42:	5d                   	pop    ebp
c0021e43:	c3                   	ret    
c0021e44:	c3                   	ret    
c0021e45:	66 90                	xchg   ax,ax
c0021e47:	90                   	nop

c0021e48 <__divdi3>:
c0021e48:	55                   	push   ebp
c0021e49:	57                   	push   edi
c0021e4a:	56                   	push   esi
c0021e4b:	53                   	push   ebx
c0021e4c:	83 ec 1c             	sub    esp,0x1c
c0021e4f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0021e53:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021e57:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021e5a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0021e5e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021e62:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021e66:	85 db                	test   ebx,ebx
c0021e68:	0f 88 8e 00 00 00    	js     c0021efc <__divdi3+0xb4>
c0021e6e:	89 dd                	mov    ebp,ebx
c0021e70:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021e78:	89 d3                	mov    ebx,edx
c0021e7a:	85 d2                	test   edx,edx
c0021e7c:	79 0d                	jns    c0021e8b <__divdi3+0x43>
c0021e7e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0021e82:	f7 d8                	neg    eax
c0021e84:	83 d2 00             	adc    edx,0x0
c0021e87:	f7 da                	neg    edx
c0021e89:	89 d3                	mov    ebx,edx
c0021e8b:	89 c7                	mov    edi,eax
c0021e8d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021e90:	85 db                	test   ebx,ebx
c0021e92:	75 48                	jne    c0021edc <__divdi3+0x94>
c0021e94:	39 ef                	cmp    edi,ebp
c0021e96:	76 24                	jbe    c0021ebc <__divdi3+0x74>
c0021e98:	89 ea                	mov    edx,ebp
c0021e9a:	f7 f7                	div    edi
c0021e9c:	89 c1                	mov    ecx,eax
c0021e9e:	31 f6                	xor    esi,esi
c0021ea0:	89 c8                	mov    eax,ecx
c0021ea2:	89 f2                	mov    edx,esi
c0021ea4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021ea8:	85 c9                	test   ecx,ecx
c0021eaa:	74 07                	je     c0021eb3 <__divdi3+0x6b>
c0021eac:	f7 d8                	neg    eax
c0021eae:	83 d2 00             	adc    edx,0x0
c0021eb1:	f7 da                	neg    edx
c0021eb3:	83 c4 1c             	add    esp,0x1c
c0021eb6:	5b                   	pop    ebx
c0021eb7:	5e                   	pop    esi
c0021eb8:	5f                   	pop    edi
c0021eb9:	5d                   	pop    ebp
c0021eba:	c3                   	ret    
c0021ebb:	90                   	nop
c0021ebc:	85 ff                	test   edi,edi
c0021ebe:	75 0b                	jne    c0021ecb <__divdi3+0x83>
c0021ec0:	b8 01 00 00 00       	mov    eax,0x1
c0021ec5:	31 d2                	xor    edx,edx
c0021ec7:	f7 f3                	div    ebx
c0021ec9:	89 c7                	mov    edi,eax
c0021ecb:	31 d2                	xor    edx,edx
c0021ecd:	89 e8                	mov    eax,ebp
c0021ecf:	f7 f7                	div    edi
c0021ed1:	89 c6                	mov    esi,eax
c0021ed3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021ed6:	f7 f7                	div    edi
c0021ed8:	89 c1                	mov    ecx,eax
c0021eda:	eb c4                	jmp    c0021ea0 <__divdi3+0x58>
c0021edc:	39 eb                	cmp    ebx,ebp
c0021ede:	77 3c                	ja     c0021f1c <__divdi3+0xd4>
c0021ee0:	0f bd f3             	bsr    esi,ebx
c0021ee3:	83 f6 1f             	xor    esi,0x1f
c0021ee6:	75 40                	jne    c0021f28 <__divdi3+0xe0>
c0021ee8:	39 eb                	cmp    ebx,ebp
c0021eea:	72 09                	jb     c0021ef5 <__divdi3+0xad>
c0021eec:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021eef:	0f 87 97 00 00 00    	ja     c0021f8c <__divdi3+0x144>
c0021ef5:	b9 01 00 00 00       	mov    ecx,0x1
c0021efa:	eb a4                	jmp    c0021ea0 <__divdi3+0x58>
c0021efc:	f7 d9                	neg    ecx
c0021efe:	83 d3 00             	adc    ebx,0x0
c0021f01:	f7 db                	neg    ebx
c0021f03:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021f06:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0021f0a:	89 dd                	mov    ebp,ebx
c0021f0c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0021f14:	e9 5f ff ff ff       	jmp    c0021e78 <__divdi3+0x30>
c0021f19:	8d 76 00             	lea    esi,[esi+0x0]
c0021f1c:	31 f6                	xor    esi,esi
c0021f1e:	31 c9                	xor    ecx,ecx
c0021f20:	e9 7b ff ff ff       	jmp    c0021ea0 <__divdi3+0x58>
c0021f25:	8d 76 00             	lea    esi,[esi+0x0]
c0021f28:	b8 20 00 00 00       	mov    eax,0x20
c0021f2d:	29 f0                	sub    eax,esi
c0021f2f:	89 f1                	mov    ecx,esi
c0021f31:	d3 e3                	shl    ebx,cl
c0021f33:	89 fa                	mov    edx,edi
c0021f35:	88 c1                	mov    cl,al
c0021f37:	d3 ea                	shr    edx,cl
c0021f39:	09 da                	or     edx,ebx
c0021f3b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021f3f:	89 f1                	mov    ecx,esi
c0021f41:	d3 e7                	shl    edi,cl
c0021f43:	89 eb                	mov    ebx,ebp
c0021f45:	88 c1                	mov    cl,al
c0021f47:	d3 eb                	shr    ebx,cl
c0021f49:	89 f1                	mov    ecx,esi
c0021f4b:	d3 e5                	shl    ebp,cl
c0021f4d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0021f50:	88 c1                	mov    cl,al
c0021f52:	d3 ea                	shr    edx,cl
c0021f54:	09 d5                	or     ebp,edx
c0021f56:	89 e8                	mov    eax,ebp
c0021f58:	89 da                	mov    edx,ebx
c0021f5a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0021f5e:	89 d3                	mov    ebx,edx
c0021f60:	89 c5                	mov    ebp,eax
c0021f62:	f7 e7                	mul    edi
c0021f64:	39 d3                	cmp    ebx,edx
c0021f66:	72 18                	jb     c0021f80 <__divdi3+0x138>
c0021f68:	74 0a                	je     c0021f74 <__divdi3+0x12c>
c0021f6a:	89 e9                	mov    ecx,ebp
c0021f6c:	31 f6                	xor    esi,esi
c0021f6e:	e9 2d ff ff ff       	jmp    c0021ea0 <__divdi3+0x58>
c0021f73:	90                   	nop
c0021f74:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0021f77:	89 f1                	mov    ecx,esi
c0021f79:	d3 e7                	shl    edi,cl
c0021f7b:	39 c7                	cmp    edi,eax
c0021f7d:	73 eb                	jae    c0021f6a <__divdi3+0x122>
c0021f7f:	90                   	nop
c0021f80:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0021f83:	31 f6                	xor    esi,esi
c0021f85:	e9 16 ff ff ff       	jmp    c0021ea0 <__divdi3+0x58>
c0021f8a:	66 90                	xchg   ax,ax
c0021f8c:	31 c9                	xor    ecx,ecx
c0021f8e:	e9 0d ff ff ff       	jmp    c0021ea0 <__divdi3+0x58>
c0021f93:	90                   	nop

c0021f94 <__moddi3>:
c0021f94:	55                   	push   ebp
c0021f95:	57                   	push   edi
c0021f96:	56                   	push   esi
c0021f97:	53                   	push   ebx
c0021f98:	83 ec 2c             	sub    esp,0x2c
c0021f9b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0021f9f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0021fa3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021fa7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0021fab:	85 db                	test   ebx,ebx
c0021fad:	0f 88 85 00 00 00    	js     c0022038 <__moddi3+0xa4>
c0021fb3:	89 de                	mov    esi,ebx
c0021fb5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021fbd:	89 d7                	mov    edi,edx
c0021fbf:	85 d2                	test   edx,edx
c0021fc1:	79 09                	jns    c0021fcc <__moddi3+0x38>
c0021fc3:	f7 d8                	neg    eax
c0021fc5:	83 d2 00             	adc    edx,0x0
c0021fc8:	f7 da                	neg    edx
c0021fca:	89 d7                	mov    edi,edx
c0021fcc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021fd0:	89 cd                	mov    ebp,ecx
c0021fd2:	85 ff                	test   edi,edi
c0021fd4:	75 52                	jne    c0022028 <__moddi3+0x94>
c0021fd6:	89 c3                	mov    ebx,eax
c0021fd8:	39 f0                	cmp    eax,esi
c0021fda:	76 24                	jbe    c0022000 <__moddi3+0x6c>
c0021fdc:	89 c8                	mov    eax,ecx
c0021fde:	89 f2                	mov    edx,esi
c0021fe0:	f7 f3                	div    ebx
c0021fe2:	89 d6                	mov    esi,edx
c0021fe4:	89 f0                	mov    eax,esi
c0021fe6:	31 d2                	xor    edx,edx
c0021fe8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021fec:	85 c9                	test   ecx,ecx
c0021fee:	74 07                	je     c0021ff7 <__moddi3+0x63>
c0021ff0:	f7 d8                	neg    eax
c0021ff2:	83 d2 00             	adc    edx,0x0
c0021ff5:	f7 da                	neg    edx
c0021ff7:	83 c4 2c             	add    esp,0x2c
c0021ffa:	5b                   	pop    ebx
c0021ffb:	5e                   	pop    esi
c0021ffc:	5f                   	pop    edi
c0021ffd:	5d                   	pop    ebp
c0021ffe:	c3                   	ret    
c0021fff:	90                   	nop
c0022000:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022004:	85 db                	test   ebx,ebx
c0022006:	75 0d                	jne    c0022015 <__moddi3+0x81>
c0022008:	b8 01 00 00 00       	mov    eax,0x1
c002200d:	31 d2                	xor    edx,edx
c002200f:	f7 f7                	div    edi
c0022011:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022015:	89 f0                	mov    eax,esi
c0022017:	31 d2                	xor    edx,edx
c0022019:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002201d:	f7 f7                	div    edi
c002201f:	89 e8                	mov    eax,ebp
c0022021:	f7 f7                	div    edi
c0022023:	89 d6                	mov    esi,edx
c0022025:	eb bd                	jmp    c0021fe4 <__moddi3+0x50>
c0022027:	90                   	nop
c0022028:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002202c:	39 f7                	cmp    edi,esi
c002202e:	76 20                	jbe    c0022050 <__moddi3+0xbc>
c0022030:	89 c8                	mov    eax,ecx
c0022032:	89 f2                	mov    edx,esi
c0022034:	eb b2                	jmp    c0021fe8 <__moddi3+0x54>
c0022036:	66 90                	xchg   ax,ax
c0022038:	f7 d9                	neg    ecx
c002203a:	83 d3 00             	adc    ebx,0x0
c002203d:	f7 db                	neg    ebx
c002203f:	89 de                	mov    esi,ebx
c0022041:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0022049:	e9 6f ff ff ff       	jmp    c0021fbd <__moddi3+0x29>
c002204e:	66 90                	xchg   ax,ax
c0022050:	0f bd c7             	bsr    eax,edi
c0022053:	83 f0 1f             	xor    eax,0x1f
c0022056:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002205a:	75 24                	jne    c0022080 <__moddi3+0xec>
c002205c:	39 f7                	cmp    edi,esi
c002205e:	72 06                	jb     c0022066 <__moddi3+0xd2>
c0022060:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0022064:	77 0c                	ja     c0022072 <__moddi3+0xde>
c0022066:	89 e9                	mov    ecx,ebp
c0022068:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002206c:	19 fe                	sbb    esi,edi
c002206e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022072:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022076:	89 f2                	mov    edx,esi
c0022078:	e9 6b ff ff ff       	jmp    c0021fe8 <__moddi3+0x54>
c002207d:	8d 76 00             	lea    esi,[esi+0x0]
c0022080:	b8 20 00 00 00       	mov    eax,0x20
c0022085:	89 c2                	mov    edx,eax
c0022087:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002208b:	29 da                	sub    edx,ebx
c002208d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022091:	88 d9                	mov    cl,bl
c0022093:	d3 e7                	shl    edi,cl
c0022095:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022099:	88 d1                	mov    cl,dl
c002209b:	d3 e8                	shr    eax,cl
c002209d:	09 c7                	or     edi,eax
c002209f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00220a3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00220a7:	89 d8                	mov    eax,ebx
c00220a9:	88 d9                	mov    cl,bl
c00220ab:	d3 e7                	shl    edi,cl
c00220ad:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00220b1:	89 f3                	mov    ebx,esi
c00220b3:	88 d1                	mov    cl,dl
c00220b5:	d3 eb                	shr    ebx,cl
c00220b7:	89 c7                	mov    edi,eax
c00220b9:	88 c1                	mov    cl,al
c00220bb:	d3 e6                	shl    esi,cl
c00220bd:	89 e8                	mov    eax,ebp
c00220bf:	88 d1                	mov    cl,dl
c00220c1:	d3 e8                	shr    eax,cl
c00220c3:	09 f0                	or     eax,esi
c00220c5:	89 f9                	mov    ecx,edi
c00220c7:	d3 e5                	shl    ebp,cl
c00220c9:	89 da                	mov    edx,ebx
c00220cb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00220cf:	89 d3                	mov    ebx,edx
c00220d1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00220d5:	89 c6                	mov    esi,eax
c00220d7:	89 d1                	mov    ecx,edx
c00220d9:	39 d3                	cmp    ebx,edx
c00220db:	72 27                	jb     c0022104 <__moddi3+0x170>
c00220dd:	74 21                	je     c0022100 <__moddi3+0x16c>
c00220df:	29 f5                	sub    ebp,esi
c00220e1:	19 cb                	sbb    ebx,ecx
c00220e3:	89 de                	mov    esi,ebx
c00220e5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00220e9:	d3 e6                	shl    esi,cl
c00220eb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00220ef:	89 f9                	mov    ecx,edi
c00220f1:	d3 ed                	shr    ebp,cl
c00220f3:	09 ee                	or     esi,ebp
c00220f5:	89 f0                	mov    eax,esi
c00220f7:	d3 eb                	shr    ebx,cl
c00220f9:	89 da                	mov    edx,ebx
c00220fb:	e9 e8 fe ff ff       	jmp    c0021fe8 <__moddi3+0x54>
c0022100:	39 c5                	cmp    ebp,eax
c0022102:	73 db                	jae    c00220df <__moddi3+0x14b>
c0022104:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022108:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002210c:	89 d1                	mov    ecx,edx
c002210e:	89 c6                	mov    esi,eax
c0022110:	eb cd                	jmp    c00220df <__moddi3+0x14b>
c0022112:	66 90                	xchg   ax,ax

c0022114 <__udivdi3>:
c0022114:	55                   	push   ebp
c0022115:	57                   	push   edi
c0022116:	56                   	push   esi
c0022117:	53                   	push   ebx
c0022118:	83 ec 1c             	sub    esp,0x1c
c002211b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002211f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022123:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022127:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002212b:	85 d2                	test   edx,edx
c002212d:	75 41                	jne    c0022170 <__udivdi3+0x5c>
c002212f:	39 f7                	cmp    edi,esi
c0022131:	76 15                	jbe    c0022148 <__udivdi3+0x34>
c0022133:	89 e8                	mov    eax,ebp
c0022135:	89 f2                	mov    edx,esi
c0022137:	f7 f7                	div    edi
c0022139:	31 db                	xor    ebx,ebx
c002213b:	89 da                	mov    edx,ebx
c002213d:	83 c4 1c             	add    esp,0x1c
c0022140:	5b                   	pop    ebx
c0022141:	5e                   	pop    esi
c0022142:	5f                   	pop    edi
c0022143:	5d                   	pop    ebp
c0022144:	c3                   	ret    
c0022145:	8d 76 00             	lea    esi,[esi+0x0]
c0022148:	89 f9                	mov    ecx,edi
c002214a:	85 ff                	test   edi,edi
c002214c:	75 0b                	jne    c0022159 <__udivdi3+0x45>
c002214e:	b8 01 00 00 00       	mov    eax,0x1
c0022153:	31 d2                	xor    edx,edx
c0022155:	f7 f7                	div    edi
c0022157:	89 c1                	mov    ecx,eax
c0022159:	31 d2                	xor    edx,edx
c002215b:	89 f0                	mov    eax,esi
c002215d:	f7 f1                	div    ecx
c002215f:	89 c3                	mov    ebx,eax
c0022161:	89 e8                	mov    eax,ebp
c0022163:	f7 f1                	div    ecx
c0022165:	89 da                	mov    edx,ebx
c0022167:	83 c4 1c             	add    esp,0x1c
c002216a:	5b                   	pop    ebx
c002216b:	5e                   	pop    esi
c002216c:	5f                   	pop    edi
c002216d:	5d                   	pop    ebp
c002216e:	c3                   	ret    
c002216f:	90                   	nop
c0022170:	39 f2                	cmp    edx,esi
c0022172:	77 1c                	ja     c0022190 <__udivdi3+0x7c>
c0022174:	0f bd da             	bsr    ebx,edx
c0022177:	83 f3 1f             	xor    ebx,0x1f
c002217a:	75 24                	jne    c00221a0 <__udivdi3+0x8c>
c002217c:	39 f2                	cmp    edx,esi
c002217e:	72 08                	jb     c0022188 <__udivdi3+0x74>
c0022180:	39 ef                	cmp    edi,ebp
c0022182:	0f 87 84 00 00 00    	ja     c002220c <__udivdi3+0xf8>
c0022188:	b8 01 00 00 00       	mov    eax,0x1
c002218d:	eb ac                	jmp    c002213b <__udivdi3+0x27>
c002218f:	90                   	nop
c0022190:	31 db                	xor    ebx,ebx
c0022192:	31 c0                	xor    eax,eax
c0022194:	89 da                	mov    edx,ebx
c0022196:	83 c4 1c             	add    esp,0x1c
c0022199:	5b                   	pop    ebx
c002219a:	5e                   	pop    esi
c002219b:	5f                   	pop    edi
c002219c:	5d                   	pop    ebp
c002219d:	c3                   	ret    
c002219e:	66 90                	xchg   ax,ax
c00221a0:	b8 20 00 00 00       	mov    eax,0x20
c00221a5:	29 d8                	sub    eax,ebx
c00221a7:	88 d9                	mov    cl,bl
c00221a9:	d3 e2                	shl    edx,cl
c00221ab:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00221af:	89 fa                	mov    edx,edi
c00221b1:	88 c1                	mov    cl,al
c00221b3:	d3 ea                	shr    edx,cl
c00221b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00221b9:	09 d1                	or     ecx,edx
c00221bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00221bf:	88 d9                	mov    cl,bl
c00221c1:	d3 e7                	shl    edi,cl
c00221c3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00221c7:	89 f7                	mov    edi,esi
c00221c9:	88 c1                	mov    cl,al
c00221cb:	d3 ef                	shr    edi,cl
c00221cd:	88 d9                	mov    cl,bl
c00221cf:	d3 e6                	shl    esi,cl
c00221d1:	89 ea                	mov    edx,ebp
c00221d3:	88 c1                	mov    cl,al
c00221d5:	d3 ea                	shr    edx,cl
c00221d7:	09 d6                	or     esi,edx
c00221d9:	89 f0                	mov    eax,esi
c00221db:	89 fa                	mov    edx,edi
c00221dd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00221e1:	89 d7                	mov    edi,edx
c00221e3:	89 c6                	mov    esi,eax
c00221e5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00221e9:	39 d7                	cmp    edi,edx
c00221eb:	72 13                	jb     c0022200 <__udivdi3+0xec>
c00221ed:	74 09                	je     c00221f8 <__udivdi3+0xe4>
c00221ef:	89 f0                	mov    eax,esi
c00221f1:	31 db                	xor    ebx,ebx
c00221f3:	e9 43 ff ff ff       	jmp    c002213b <__udivdi3+0x27>
c00221f8:	88 d9                	mov    cl,bl
c00221fa:	d3 e5                	shl    ebp,cl
c00221fc:	39 c5                	cmp    ebp,eax
c00221fe:	73 ef                	jae    c00221ef <__udivdi3+0xdb>
c0022200:	8d 46 ff             	lea    eax,[esi-0x1]
c0022203:	31 db                	xor    ebx,ebx
c0022205:	e9 31 ff ff ff       	jmp    c002213b <__udivdi3+0x27>
c002220a:	66 90                	xchg   ax,ax
c002220c:	31 c0                	xor    eax,eax
c002220e:	e9 28 ff ff ff       	jmp    c002213b <__udivdi3+0x27>
c0022213:	90                   	nop

c0022214 <__umoddi3>:
c0022214:	55                   	push   ebp
c0022215:	57                   	push   edi
c0022216:	56                   	push   esi
c0022217:	53                   	push   ebx
c0022218:	83 ec 1c             	sub    esp,0x1c
c002221b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002221f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022223:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022227:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002222b:	89 da                	mov    edx,ebx
c002222d:	85 c0                	test   eax,eax
c002222f:	75 37                	jne    c0022268 <__umoddi3+0x54>
c0022231:	39 df                	cmp    edi,ebx
c0022233:	76 13                	jbe    c0022248 <__umoddi3+0x34>
c0022235:	89 f0                	mov    eax,esi
c0022237:	f7 f7                	div    edi
c0022239:	89 d0                	mov    eax,edx
c002223b:	31 d2                	xor    edx,edx
c002223d:	83 c4 1c             	add    esp,0x1c
c0022240:	5b                   	pop    ebx
c0022241:	5e                   	pop    esi
c0022242:	5f                   	pop    edi
c0022243:	5d                   	pop    ebp
c0022244:	c3                   	ret    
c0022245:	8d 76 00             	lea    esi,[esi+0x0]
c0022248:	89 fd                	mov    ebp,edi
c002224a:	85 ff                	test   edi,edi
c002224c:	75 0b                	jne    c0022259 <__umoddi3+0x45>
c002224e:	b8 01 00 00 00       	mov    eax,0x1
c0022253:	31 d2                	xor    edx,edx
c0022255:	f7 f7                	div    edi
c0022257:	89 c5                	mov    ebp,eax
c0022259:	89 d8                	mov    eax,ebx
c002225b:	31 d2                	xor    edx,edx
c002225d:	f7 f5                	div    ebp
c002225f:	89 f0                	mov    eax,esi
c0022261:	f7 f5                	div    ebp
c0022263:	89 d0                	mov    eax,edx
c0022265:	eb d4                	jmp    c002223b <__umoddi3+0x27>
c0022267:	90                   	nop
c0022268:	89 f1                	mov    ecx,esi
c002226a:	39 d8                	cmp    eax,ebx
c002226c:	76 0a                	jbe    c0022278 <__umoddi3+0x64>
c002226e:	89 f0                	mov    eax,esi
c0022270:	83 c4 1c             	add    esp,0x1c
c0022273:	5b                   	pop    ebx
c0022274:	5e                   	pop    esi
c0022275:	5f                   	pop    edi
c0022276:	5d                   	pop    ebp
c0022277:	c3                   	ret    
c0022278:	0f bd e8             	bsr    ebp,eax
c002227b:	83 f5 1f             	xor    ebp,0x1f
c002227e:	75 1c                	jne    c002229c <__umoddi3+0x88>
c0022280:	39 d8                	cmp    eax,ebx
c0022282:	72 04                	jb     c0022288 <__umoddi3+0x74>
c0022284:	39 f7                	cmp    edi,esi
c0022286:	77 08                	ja     c0022290 <__umoddi3+0x7c>
c0022288:	89 da                	mov    edx,ebx
c002228a:	29 fe                	sub    esi,edi
c002228c:	19 c2                	sbb    edx,eax
c002228e:	89 f1                	mov    ecx,esi
c0022290:	89 c8                	mov    eax,ecx
c0022292:	83 c4 1c             	add    esp,0x1c
c0022295:	5b                   	pop    ebx
c0022296:	5e                   	pop    esi
c0022297:	5f                   	pop    edi
c0022298:	5d                   	pop    ebp
c0022299:	c3                   	ret    
c002229a:	66 90                	xchg   ax,ax
c002229c:	ba 20 00 00 00       	mov    edx,0x20
c00222a1:	29 ea                	sub    edx,ebp
c00222a3:	89 e9                	mov    ecx,ebp
c00222a5:	d3 e0                	shl    eax,cl
c00222a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00222ab:	89 f8                	mov    eax,edi
c00222ad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00222b1:	88 d1                	mov    cl,dl
c00222b3:	d3 e8                	shr    eax,cl
c00222b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00222b9:	09 c1                	or     ecx,eax
c00222bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00222bf:	89 e9                	mov    ecx,ebp
c00222c1:	d3 e7                	shl    edi,cl
c00222c3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00222c7:	89 d8                	mov    eax,ebx
c00222c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00222cd:	88 d1                	mov    cl,dl
c00222cf:	d3 e8                	shr    eax,cl
c00222d1:	89 c7                	mov    edi,eax
c00222d3:	89 e9                	mov    ecx,ebp
c00222d5:	d3 e3                	shl    ebx,cl
c00222d7:	89 f0                	mov    eax,esi
c00222d9:	88 d1                	mov    cl,dl
c00222db:	d3 e8                	shr    eax,cl
c00222dd:	09 d8                	or     eax,ebx
c00222df:	89 e9                	mov    ecx,ebp
c00222e1:	d3 e6                	shl    esi,cl
c00222e3:	89 f3                	mov    ebx,esi
c00222e5:	89 fa                	mov    edx,edi
c00222e7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00222eb:	89 d1                	mov    ecx,edx
c00222ed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00222f1:	89 c6                	mov    esi,eax
c00222f3:	89 d7                	mov    edi,edx
c00222f5:	39 d1                	cmp    ecx,edx
c00222f7:	72 27                	jb     c0022320 <__umoddi3+0x10c>
c00222f9:	74 21                	je     c002231c <__umoddi3+0x108>
c00222fb:	89 ca                	mov    edx,ecx
c00222fd:	29 f3                	sub    ebx,esi
c00222ff:	19 fa                	sbb    edx,edi
c0022301:	89 d0                	mov    eax,edx
c0022303:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0022307:	d3 e0                	shl    eax,cl
c0022309:	89 e9                	mov    ecx,ebp
c002230b:	d3 eb                	shr    ebx,cl
c002230d:	09 d8                	or     eax,ebx
c002230f:	d3 ea                	shr    edx,cl
c0022311:	83 c4 1c             	add    esp,0x1c
c0022314:	5b                   	pop    ebx
c0022315:	5e                   	pop    esi
c0022316:	5f                   	pop    edi
c0022317:	5d                   	pop    ebp
c0022318:	c3                   	ret    
c0022319:	8d 76 00             	lea    esi,[esi+0x0]
c002231c:	39 c3                	cmp    ebx,eax
c002231e:	73 db                	jae    c00222fb <__umoddi3+0xe7>
c0022320:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022324:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0022328:	89 d7                	mov    edi,edx
c002232a:	89 c6                	mov    esi,eax
c002232c:	eb cd                	jmp    c00222fb <__umoddi3+0xe7>

Disassembly of section .init:

c002232e <_init>:
c002232e:	55                   	push   ebp
c002232f:	89 e5                	mov    ebp,esp
c0022331:	e8 be dd fd ff       	call   c00000f4 <frame_dummy>
c0022336:	e8 e5 fa ff ff       	call   c0021e20 <__do_global_ctors_aux>
c002233b:	5d                   	pop    ebp
c002233c:	c3                   	ret    

Disassembly of section .fini:

c002233d <_fini>:
c002233d:	55                   	push   ebp
c002233e:	89 e5                	mov    ebp,esp
c0022340:	e8 3f dd fd ff       	call   c0000084 <__do_global_dtors_aux>
c0022345:	5d                   	pop    ebp
c0022346:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0022348 <DriverlessDevice::~DriverlessDevice()>:
c0022348:	ba 1c 3e 02 c0       	mov    edx,0xc0023e1c
c002234d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022351:	89 10                	mov    DWORD PTR [eax],edx
c0022353:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022357:	50                   	push   eax
c0022358:	e8 f9 75 fe ff       	call   c0009956 <Device::~Device()>
c002235d:	83 c4 04             	add    esp,0x4
c0022360:	90                   	nop
c0022361:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0022362 <DriverlessDevice::~DriverlessDevice()>:
c0022362:	83 ec 0c             	sub    esp,0xc
c0022365:	83 ec 0c             	sub    esp,0xc
c0022368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002236c:	e8 d7 ff ff ff       	call   c0022348 <DriverlessDevice::~DriverlessDevice()>
c0022371:	83 c4 10             	add    esp,0x10
c0022374:	83 ec 08             	sub    esp,0x8
c0022377:	68 58 01 00 00       	push   0x158
c002237c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022380:	e8 f7 ae fe ff       	call   c000d27c <operator delete(void*, unsigned long)>
c0022385:	83 c4 10             	add    esp,0x10
c0022388:	83 c4 0c             	add    esp,0xc
c002238b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002238c <LinkedList<Device>::addElement(Device*)>:
c002238c:	83 ec 0c             	sub    esp,0xc
c002238f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022394:	75 10                	jne    c00223a6 <LinkedList<Device>::addElement(Device*)+0x1a>
c0022396:	83 ec 0c             	sub    esp,0xc
c0022399:	68 b0 3d 02 c0       	push   0xc0023db0
c002239e:	e8 1d d8 fe ff       	call   c000fbc0 <KePanic(char const*)>
c00223a3:	83 c4 10             	add    esp,0x10
c00223a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00223ac:	85 c0                	test   eax,eax
c00223ae:	74 3a                	je     c00223ea <LinkedList<Device>::addElement(Device*)+0x5e>
c00223b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00223b7:	85 c0                	test   eax,eax
c00223b9:	74 2f                	je     c00223ea <LinkedList<Device>::addElement(Device*)+0x5e>
c00223bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00223c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00223c6:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00223cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00223d4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00223d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223db:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00223de:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00223e8:	eb 68                	jmp    c0022452 <LinkedList<Device>::addElement(Device*)+0xc6>
c00223ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00223f0:	85 c0                	test   eax,eax
c00223f2:	75 4e                	jne    c0022442 <LinkedList<Device>::addElement(Device*)+0xb6>
c00223f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00223fb:	85 c0                	test   eax,eax
c00223fd:	75 43                	jne    c0022442 <LinkedList<Device>::addElement(Device*)+0xb6>
c00223ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022403:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022407:	89 10                	mov    DWORD PTR [eax],edx
c0022409:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002240d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022411:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022418:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002241b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022429:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002242c:	85 c0                	test   eax,eax
c002242e:	74 22                	je     c0022452 <LinkedList<Device>::addElement(Device*)+0xc6>
c0022430:	83 ec 0c             	sub    esp,0xc
c0022433:	68 d2 3d 02 c0       	push   0xc0023dd2
c0022438:	e8 83 d7 fe ff       	call   c000fbc0 <KePanic(char const*)>
c002243d:	83 c4 10             	add    esp,0x10
c0022440:	eb 10                	jmp    c0022452 <LinkedList<Device>::addElement(Device*)+0xc6>
c0022442:	83 ec 0c             	sub    esp,0xc
c0022445:	68 dc 3d 02 c0       	push   0xc0023ddc
c002244a:	e8 71 d7 fe ff       	call   c000fbc0 <KePanic(char const*)>
c002244f:	83 c4 10             	add    esp,0x10
c0022452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022456:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022459:	8d 50 01             	lea    edx,[eax+0x1]
c002245c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022460:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022463:	90                   	nop
c0022464:	83 c4 0c             	add    esp,0xc
c0022467:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0022468 <LinkedList<Device>::LinkedList()>:
c0022468:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002246c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022472:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022476:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002247d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022481:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002248c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022492:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022496:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002249d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224a1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00224a8:	90                   	nop
c00224a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00224ac <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00224ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00224b2:	85 c0                	test   eax,eax
c00224b4:	75 0e                	jne    c00224c4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00224b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00224bd:	85 c0                	test   eax,eax
c00224bf:	75 03                	jne    c00224c4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00224c1:	b0 01                	mov    al,0x1
c00224c3:	c3                   	ret    
c00224c4:	b0 00                	mov    al,0x0
c00224c6:	90                   	nop
c00224c7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00224c8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00224c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00224ce:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00224d0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00224d0:	83 ec 0c             	sub    esp,0xc
c00224d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00224d9:	85 c0                	test   eax,eax
c00224db:	75 17                	jne    c00224f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c00224dd:	83 ec 0c             	sub    esp,0xc
c00224e0:	68 4c 40 02 c0       	push   0xc002404c
c00224e5:	e8 d6 d6 fe ff       	call   c000fbc0 <KePanic(char const*)>
c00224ea:	83 c4 10             	add    esp,0x10
c00224ed:	e9 96 00 00 00       	jmp    c0022588 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c00224f2:	66 90                	xchg   ax,ax
c00224f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00224fb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00224fe:	85 c0                	test   eax,eax
c0022500:	0f 95 c0             	setne  al
c0022503:	0f b6 c0             	movzx  eax,al
c0022506:	85 c0                	test   eax,eax
c0022508:	74 12                	je     c002251c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002250a:	83 ec 0c             	sub    esp,0xc
c002250d:	68 97 40 02 c0       	push   0xc0024097
c0022512:	e8 a9 d6 fe ff       	call   c000fbc0 <KePanic(char const*)>
c0022517:	83 c4 10             	add    esp,0x10
c002251a:	66 90                	xchg   ax,ax
c002251c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022520:	8b 00                	mov    eax,DWORD PTR [eax]
c0022522:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022525:	85 c0                	test   eax,eax
c0022527:	0f 94 c0             	sete   al
c002252a:	0f b6 c0             	movzx  eax,al
c002252d:	85 c0                	test   eax,eax
c002252f:	74 33                	je     c0022564 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0022531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022535:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002253b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002253f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002254a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002254d:	83 f8 01             	cmp    eax,0x1
c0022550:	74 22                	je     c0022574 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0022552:	83 ec 0c             	sub    esp,0xc
c0022555:	68 70 40 02 c0       	push   0xc0024070
c002255a:	e8 61 d6 fe ff       	call   c000fbc0 <KePanic(char const*)>
c002255f:	83 c4 10             	add    esp,0x10
c0022562:	eb 10                	jmp    c0022574 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0022564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022568:	8b 00                	mov    eax,DWORD PTR [eax]
c002256a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002256d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022571:	89 10                	mov    DWORD PTR [eax],edx
c0022573:	90                   	nop
c0022574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022578:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002257b:	8d 50 ff             	lea    edx,[eax-0x1]
c002257e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022582:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022585:	8d 76 00             	lea    esi,[esi+0x0]
c0022588:	83 c4 0c             	add    esp,0xc
c002258b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002258c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002258c:	83 ec 0c             	sub    esp,0xc
c002258f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022594:	75 12                	jne    c00225a8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0022596:	83 ec 0c             	sub    esp,0xc
c0022599:	68 b0 3d 02 c0       	push   0xc0023db0
c002259e:	e8 1d d6 fe ff       	call   c000fbc0 <KePanic(char const*)>
c00225a3:	83 c4 10             	add    esp,0x10
c00225a6:	66 90                	xchg   ax,ax
c00225a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00225ae:	85 c0                	test   eax,eax
c00225b0:	74 36                	je     c00225e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00225b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00225b9:	85 c0                	test   eax,eax
c00225bb:	74 2b                	je     c00225e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00225bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00225c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00225c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00225cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00225d3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00225d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00225dd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00225e4:	eb 6a                	jmp    c0022650 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00225e6:	66 90                	xchg   ax,ax
c00225e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00225ee:	85 c0                	test   eax,eax
c00225f0:	75 4e                	jne    c0022640 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00225f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00225f9:	85 c0                	test   eax,eax
c00225fb:	75 43                	jne    c0022640 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00225fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022601:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022605:	89 10                	mov    DWORD PTR [eax],edx
c0022607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002260b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002260f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022616:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022619:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022624:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022627:	85 c0                	test   eax,eax
c0022629:	74 25                	je     c0022650 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002262b:	83 ec 0c             	sub    esp,0xc
c002262e:	68 d2 3d 02 c0       	push   0xc0023dd2
c0022633:	e8 88 d5 fe ff       	call   c000fbc0 <KePanic(char const*)>
c0022638:	83 c4 10             	add    esp,0x10
c002263b:	eb 13                	jmp    c0022650 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002263d:	8d 76 00             	lea    esi,[esi+0x0]
c0022640:	83 ec 0c             	sub    esp,0xc
c0022643:	68 dc 3d 02 c0       	push   0xc0023ddc
c0022648:	e8 73 d5 fe ff       	call   c000fbc0 <KePanic(char const*)>
c002264d:	83 c4 10             	add    esp,0x10
c0022650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022654:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022657:	8d 50 01             	lea    edx,[eax+0x1]
c002265a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002265e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022661:	90                   	nop
c0022662:	83 c4 0c             	add    esp,0xc
c0022665:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0022668 <ACPI::~ACPI()>:
c0022668:	83 ec 0c             	sub    esp,0xc
c002266b:	ba 8c 44 02 c0       	mov    edx,0xc002448c
c0022670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022674:	89 10                	mov    DWORD PTR [eax],edx
c0022676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002267a:	83 ec 0c             	sub    esp,0xc
c002267d:	50                   	push   eax
c002267e:	e8 d3 72 fe ff       	call   c0009956 <Device::~Device()>
c0022683:	83 c4 10             	add    esp,0x10
c0022686:	90                   	nop
c0022687:	83 c4 0c             	add    esp,0xc
c002268a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002268c <ACPI::~ACPI()>:
c002268c:	83 ec 0c             	sub    esp,0xc
c002268f:	83 ec 0c             	sub    esp,0xc
c0022692:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022696:	e8 cd ff ff ff       	call   c0022668 <ACPI::~ACPI()>
c002269b:	83 c4 10             	add    esp,0x10
c002269e:	83 ec 08             	sub    esp,0x8
c00226a1:	68 64 12 00 00       	push   0x1264
c00226a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226aa:	e8 cd ab fe ff       	call   c000d27c <operator delete(void*, unsigned long)>
c00226af:	83 c4 10             	add    esp,0x10
c00226b2:	83 c4 0c             	add    esp,0xc
c00226b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00226b8 <LinkedList<Device>::~LinkedList()>:
c00226b8:	90                   	nop
c00226b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00226bc <LinkedList<Device>::isEmpty()>:
c00226bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00226c2:	85 c0                	test   eax,eax
c00226c4:	75 0e                	jne    c00226d4 <LinkedList<Device>::isEmpty()+0x18>
c00226c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00226cd:	85 c0                	test   eax,eax
c00226cf:	75 03                	jne    c00226d4 <LinkedList<Device>::isEmpty()+0x18>
c00226d1:	b0 01                	mov    al,0x1
c00226d3:	c3                   	ret    
c00226d4:	b0 00                	mov    al,0x0
c00226d6:	90                   	nop
c00226d7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00226d8 <LinkedList<Device>::getFirstElement()>:
c00226d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00226de:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00226e0 <LinkedList<Device>::removeFirst()>:
c00226e0:	83 ec 0c             	sub    esp,0xc
c00226e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00226e9:	85 c0                	test   eax,eax
c00226eb:	75 17                	jne    c0022704 <LinkedList<Device>::removeFirst()+0x24>
c00226ed:	83 ec 0c             	sub    esp,0xc
c00226f0:	68 4c 40 02 c0       	push   0xc002404c
c00226f5:	e8 c6 d4 fe ff       	call   c000fbc0 <KePanic(char const*)>
c00226fa:	83 c4 10             	add    esp,0x10
c00226fd:	e9 92 00 00 00       	jmp    c0022794 <LinkedList<Device>::removeFirst()+0xb4>
c0022702:	66 90                	xchg   ax,ax
c0022704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022708:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002270b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022711:	85 c0                	test   eax,eax
c0022713:	74 13                	je     c0022728 <LinkedList<Device>::removeFirst()+0x48>
c0022715:	83 ec 0c             	sub    esp,0xc
c0022718:	68 97 40 02 c0       	push   0xc0024097
c002271d:	e8 9e d4 fe ff       	call   c000fbc0 <KePanic(char const*)>
c0022722:	83 c4 10             	add    esp,0x10
c0022725:	8d 76 00             	lea    esi,[esi+0x0]
c0022728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002272c:	8b 00                	mov    eax,DWORD PTR [eax]
c002272e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022734:	85 c0                	test   eax,eax
c0022736:	75 34                	jne    c002276c <LinkedList<Device>::removeFirst()+0x8c>
c0022738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002273c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022746:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002274d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022751:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022754:	83 f8 01             	cmp    eax,0x1
c0022757:	74 27                	je     c0022780 <LinkedList<Device>::removeFirst()+0xa0>
c0022759:	83 ec 0c             	sub    esp,0xc
c002275c:	68 70 40 02 c0       	push   0xc0024070
c0022761:	e8 5a d4 fe ff       	call   c000fbc0 <KePanic(char const*)>
c0022766:	83 c4 10             	add    esp,0x10
c0022769:	eb 15                	jmp    c0022780 <LinkedList<Device>::removeFirst()+0xa0>
c002276b:	90                   	nop
c002276c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022770:	8b 00                	mov    eax,DWORD PTR [eax]
c0022772:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0022778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002277c:	89 10                	mov    DWORD PTR [eax],edx
c002277e:	66 90                	xchg   ax,ax
c0022780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022784:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022787:	8d 50 ff             	lea    edx,[eax-0x1]
c002278a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002278e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022791:	8d 76 00             	lea    esi,[esi+0x0]
c0022794:	83 c4 0c             	add    esp,0xc
c0022797:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0022798 <Computer::~Computer()>:
c0022798:	83 ec 0c             	sub    esp,0xc
c002279b:	ba 04 46 02 c0       	mov    edx,0xc0024604
c00227a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227a4:	89 10                	mov    DWORD PTR [eax],edx
c00227a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227aa:	83 ec 0c             	sub    esp,0xc
c00227ad:	50                   	push   eax
c00227ae:	e8 a3 71 fe ff       	call   c0009956 <Device::~Device()>
c00227b3:	83 c4 10             	add    esp,0x10
c00227b6:	90                   	nop
c00227b7:	83 c4 0c             	add    esp,0xc
c00227ba:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00227bc <Computer::~Computer()>:
c00227bc:	83 ec 0c             	sub    esp,0xc
c00227bf:	83 ec 0c             	sub    esp,0xc
c00227c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227c6:	e8 cd ff ff ff       	call   c0022798 <Computer::~Computer()>
c00227cb:	83 c4 10             	add    esp,0x10
c00227ce:	83 ec 08             	sub    esp,0x8
c00227d1:	68 68 01 00 00       	push   0x168
c00227d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227da:	e8 9d aa fe ff       	call   c000d27c <operator delete(void*, unsigned long)>
c00227df:	83 c4 10             	add    esp,0x10
c00227e2:	83 c4 0c             	add    esp,0xc
c00227e5:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00227e6 <idleCommon()>:
c00227e6:	83 ec 0c             	sub    esp,0xc
c00227e9:	fa                   	cli    
c00227ea:	ff 05 70 da 02 c0    	inc    DWORD PTR ds:0xc002da70
c00227f0:	e8 2f 4d ff ff       	call   c0017524 <schedule()>
c00227f5:	f0 ff 0d 70 da 02 c0 	lock dec DWORD PTR ds:0xc002da70
c00227fc:	83 3d 70 da 02 c0 00 	cmp    DWORD PTR ds:0xc002da70,0x0
c0022803:	75 01                	jne    c0022806 <idleCommon()+0x20>
c0022805:	fb                   	sti    
c0022806:	83 c4 0c             	add    esp,0xc
c0022809:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002280a <LinkedList<UnixFile>::~LinkedList()>:
c002280a:	90                   	nop
c002280b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002280c <LinkedList<UnixFile>::LinkedList()>:
c002280c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022810:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022816:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002281a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022821:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022825:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002282c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022830:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002283a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022841:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022845:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002284c:	90                   	nop
c002284d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002284e <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002284e:	83 ec 0c             	sub    esp,0xc
c0022851:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022856:	75 10                	jne    c0022868 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0022858:	83 ec 0c             	sub    esp,0xc
c002285b:	68 b0 3d 02 c0       	push   0xc0023db0
c0022860:	e8 5b d3 fe ff       	call   c000fbc0 <KePanic(char const*)>
c0022865:	83 c4 10             	add    esp,0x10
c0022868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002286c:	8b 00                	mov    eax,DWORD PTR [eax]
c002286e:	85 c0                	test   eax,eax
c0022870:	74 34                	je     c00228a6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022876:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022879:	85 c0                	test   eax,eax
c002287b:	74 29                	je     c00228a6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002287d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022881:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022884:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022888:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002288b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002288f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022893:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002289a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002289d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00228a4:	eb 65                	jmp    c002290b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00228a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00228ac:	85 c0                	test   eax,eax
c00228ae:	75 4b                	jne    c00228fb <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00228b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00228b7:	85 c0                	test   eax,eax
c00228b9:	75 40                	jne    c00228fb <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00228bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00228c3:	89 10                	mov    DWORD PTR [eax],edx
c00228c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00228cd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00228d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00228d7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00228de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00228e5:	85 c0                	test   eax,eax
c00228e7:	74 22                	je     c002290b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00228e9:	83 ec 0c             	sub    esp,0xc
c00228ec:	68 d2 3d 02 c0       	push   0xc0023dd2
c00228f1:	e8 ca d2 fe ff       	call   c000fbc0 <KePanic(char const*)>
c00228f6:	83 c4 10             	add    esp,0x10
c00228f9:	eb 10                	jmp    c002290b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00228fb:	83 ec 0c             	sub    esp,0xc
c00228fe:	68 dc 3d 02 c0       	push   0xc0023ddc
c0022903:	e8 b8 d2 fe ff       	call   c000fbc0 <KePanic(char const*)>
c0022908:	83 c4 10             	add    esp,0x10
c002290b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002290f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022912:	8d 50 01             	lea    edx,[eax+0x1]
c0022915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022919:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002291c:	90                   	nop
c002291d:	83 c4 0c             	add    esp,0xc
c0022920:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0022922 <LinkedList<UnixFile>::getFirstElement()>:
c0022922:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022926:	8b 00                	mov    eax,DWORD PTR [eax]
c0022928:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002292a <LinkedList<UnixFile>::removeFirst()>:
c002292a:	83 ec 0c             	sub    esp,0xc
c002292d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022931:	8b 00                	mov    eax,DWORD PTR [eax]
c0022933:	85 c0                	test   eax,eax
c0022935:	75 12                	jne    c0022949 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0022937:	83 ec 0c             	sub    esp,0xc
c002293a:	68 4c 40 02 c0       	push   0xc002404c
c002293f:	e8 7c d2 fe ff       	call   c000fbc0 <KePanic(char const*)>
c0022944:	83 c4 10             	add    esp,0x10
c0022947:	eb 7e                	jmp    c00229c7 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0022949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002294d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022950:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022953:	85 c0                	test   eax,eax
c0022955:	74 10                	je     c0022967 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0022957:	83 ec 0c             	sub    esp,0xc
c002295a:	68 97 40 02 c0       	push   0xc0024097
c002295f:	e8 5c d2 fe ff       	call   c000fbc0 <KePanic(char const*)>
c0022964:	83 c4 10             	add    esp,0x10
c0022967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002296b:	8b 00                	mov    eax,DWORD PTR [eax]
c002296d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022970:	85 c0                	test   eax,eax
c0022972:	75 33                	jne    c00229a7 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0022974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022978:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002297e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022982:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022989:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002298d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022990:	83 f8 01             	cmp    eax,0x1
c0022993:	74 21                	je     c00229b6 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022995:	83 ec 0c             	sub    esp,0xc
c0022998:	68 70 40 02 c0       	push   0xc0024070
c002299d:	e8 1e d2 fe ff       	call   c000fbc0 <KePanic(char const*)>
c00229a2:	83 c4 10             	add    esp,0x10
c00229a5:	eb 0f                	jmp    c00229b6 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00229a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00229ad:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00229b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229b4:	89 10                	mov    DWORD PTR [eax],edx
c00229b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00229bd:	8d 50 ff             	lea    edx,[eax-0x1]
c00229c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229c4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00229c7:	83 c4 0c             	add    esp,0xc
c00229ca:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00229cc <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00229cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00229d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00229d3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00229d4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00229d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00229d8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00229db:	c3                   	ret    

Disassembly of section .text._ZN6RegionC2Eiiii:

c00229dc <Region::Region(int, int, int, int)>:
c00229dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00229e4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00229e8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00229eb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00229f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00229f5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00229f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00229fc:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00229ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022a03:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022a06:	c3                   	ret    

Disassembly of section .text._Z3minIiET_S0_S0_:

c0022a07 <int min<int>(int, int)>:
c0022a07:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022a0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a0f:	39 d0                	cmp    eax,edx
c0022a11:	7e 02                	jle    c0022a15 <int min<int>(int, int)+0xe>
c0022a13:	89 d0                	mov    eax,edx
c0022a15:	c3                   	ret    

Disassembly of section .text._Z3maxIiET_S0_S0_:

c0022a16 <int max<int>(int, int)>:
c0022a16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022a1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a1e:	39 d0                	cmp    eax,edx
c0022a20:	7d 02                	jge    c0022a24 <int max<int>(int, int)+0xe>
c0022a22:	89 d0                	mov    eax,edx
c0022a24:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0022a28 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0022a28:	90                   	nop
c0022a29:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0022a2c <ThreadControlBlock::ThreadControlBlock()>:
c0022a2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a30:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022a37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a3b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0022a42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a46:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0022a4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a51:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0022a58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a5c:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0022a63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a67:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0022a6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a6f:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0022a73:	90                   	nop
c0022a74:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0022a78 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0022a78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a7c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022a82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a86:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022a8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a91:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022a98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a9c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022aa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022aa6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022aad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ab1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022ab8:	90                   	nop
c0022ab9:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0022aba <IOAPIC::~IOAPIC()>:
c0022aba:	83 ec 0c             	sub    esp,0xc
c0022abd:	ba ac 5a 02 c0       	mov    edx,0xc0025aac
c0022ac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ac6:	89 10                	mov    DWORD PTR [eax],edx
c0022ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022acc:	83 ec 0c             	sub    esp,0xc
c0022acf:	50                   	push   eax
c0022ad0:	e8 81 6e fe ff       	call   c0009956 <Device::~Device()>
c0022ad5:	83 c4 10             	add    esp,0x10
c0022ad8:	90                   	nop
c0022ad9:	83 c4 0c             	add    esp,0xc
c0022adc:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0022ade <IOAPIC::~IOAPIC()>:
c0022ade:	83 ec 0c             	sub    esp,0xc
c0022ae1:	83 ec 0c             	sub    esp,0xc
c0022ae4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ae8:	e8 cd ff ff ff       	call   c0022aba <IOAPIC::~IOAPIC()>
c0022aed:	83 c4 10             	add    esp,0x10
c0022af0:	83 ec 08             	sub    esp,0x8
c0022af3:	68 68 01 00 00       	push   0x168
c0022af8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022afc:	e8 7b a7 fe ff       	call   c000d27c <operator delete(void*, unsigned long)>
c0022b01:	83 c4 10             	add    esp,0x10
c0022b04:	83 c4 0c             	add    esp,0xc
c0022b07:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0022b08 <CPU::~CPU()>:
c0022b08:	83 ec 0c             	sub    esp,0xc
c0022b0b:	ba 20 5e 02 c0       	mov    edx,0xc0025e20
c0022b10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b14:	89 10                	mov    DWORD PTR [eax],edx
c0022b16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b1a:	83 ec 0c             	sub    esp,0xc
c0022b1d:	50                   	push   eax
c0022b1e:	e8 33 6e fe ff       	call   c0009956 <Device::~Device()>
c0022b23:	83 c4 10             	add    esp,0x10
c0022b26:	90                   	nop
c0022b27:	83 c4 0c             	add    esp,0xc
c0022b2a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0022b2c <CPU::~CPU()>:
c0022b2c:	83 ec 0c             	sub    esp,0xc
c0022b2f:	83 ec 0c             	sub    esp,0xc
c0022b32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b36:	e8 cd ff ff ff       	call   c0022b08 <CPU::~CPU()>
c0022b3b:	83 c4 10             	add    esp,0x10
c0022b3e:	83 ec 08             	sub    esp,0x8
c0022b41:	68 78 11 00 00       	push   0x1178
c0022b46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b4a:	e8 2d a7 fe ff       	call   c000d27c <operator delete(void*, unsigned long)>
c0022b4f:	83 c4 10             	add    esp,0x10
c0022b52:	83 c4 0c             	add    esp,0xc
c0022b55:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0022b56 <PCI::~PCI()>:
c0022b56:	83 ec 0c             	sub    esp,0xc
c0022b59:	ba 84 63 02 c0       	mov    edx,0xc0026384
c0022b5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b62:	89 10                	mov    DWORD PTR [eax],edx
c0022b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b68:	83 ec 0c             	sub    esp,0xc
c0022b6b:	50                   	push   eax
c0022b6c:	e8 2b 5e fe ff       	call   c000899c <Bus::~Bus()>
c0022b71:	83 c4 10             	add    esp,0x10
c0022b74:	90                   	nop
c0022b75:	83 c4 0c             	add    esp,0xc
c0022b78:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0022b7a <PCI::~PCI()>:
c0022b7a:	83 ec 0c             	sub    esp,0xc
c0022b7d:	83 ec 0c             	sub    esp,0xc
c0022b80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b84:	e8 cd ff ff ff       	call   c0022b56 <PCI::~PCI()>
c0022b89:	83 c4 10             	add    esp,0x10
c0022b8c:	83 ec 08             	sub    esp,0x8
c0022b8f:	68 5c 01 00 00       	push   0x15c
c0022b94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b98:	e8 df a6 fe ff       	call   c000d27c <operator delete(void*, unsigned long)>
c0022b9d:	83 c4 10             	add    esp,0x10
c0022ba0:	83 c4 0c             	add    esp,0xc
c0022ba3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0022ba4 <IDE::~IDE()>:
c0022ba4:	83 ec 0c             	sub    esp,0xc
c0022ba7:	ba d4 64 02 c0       	mov    edx,0xc00264d4
c0022bac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bb0:	89 10                	mov    DWORD PTR [eax],edx
c0022bb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bb6:	83 ec 0c             	sub    esp,0xc
c0022bb9:	50                   	push   eax
c0022bba:	e8 25 72 fe ff       	call   c0009de4 <HardDiskController::~HardDiskController()>
c0022bbf:	83 c4 10             	add    esp,0x10
c0022bc2:	90                   	nop
c0022bc3:	83 c4 0c             	add    esp,0xc
c0022bc6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0022bc8 <IDE::~IDE()>:
c0022bc8:	83 ec 0c             	sub    esp,0xc
c0022bcb:	83 ec 0c             	sub    esp,0xc
c0022bce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022bd2:	e8 cd ff ff ff       	call   c0022ba4 <IDE::~IDE()>
c0022bd7:	83 c4 10             	add    esp,0x10
c0022bda:	83 ec 08             	sub    esp,0x8
c0022bdd:	68 70 02 00 00       	push   0x270
c0022be2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022be6:	e8 91 a6 fe ff       	call   c000d27c <operator delete(void*, unsigned long)>
c0022beb:	83 c4 10             	add    esp,0x10
c0022bee:	83 c4 0c             	add    esp,0xc
c0022bf1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0022bf2 <SATABus::~SATABus()>:
c0022bf2:	83 ec 0c             	sub    esp,0xc
c0022bf5:	ba 24 65 02 c0       	mov    edx,0xc0026524
c0022bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bfe:	89 10                	mov    DWORD PTR [eax],edx
c0022c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c04:	83 ec 0c             	sub    esp,0xc
c0022c07:	50                   	push   eax
c0022c08:	e8 d7 71 fe ff       	call   c0009de4 <HardDiskController::~HardDiskController()>
c0022c0d:	83 c4 10             	add    esp,0x10
c0022c10:	90                   	nop
c0022c11:	83 c4 0c             	add    esp,0xc
c0022c14:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0022c16 <SATABus::~SATABus()>:
c0022c16:	83 ec 0c             	sub    esp,0xc
c0022c19:	83 ec 0c             	sub    esp,0xc
c0022c1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c20:	e8 cd ff ff ff       	call   c0022bf2 <SATABus::~SATABus()>
c0022c25:	83 c4 10             	add    esp,0x10
c0022c28:	83 ec 08             	sub    esp,0x8
c0022c2b:	68 64 01 00 00       	push   0x164
c0022c30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c34:	e8 43 a6 fe ff       	call   c000d27c <operator delete(void*, unsigned long)>
c0022c39:	83 c4 10             	add    esp,0x10
c0022c3c:	83 c4 0c             	add    esp,0xc
c0022c3f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0022c40 <ATA::~ATA()>:
c0022c40:	83 ec 0c             	sub    esp,0xc
c0022c43:	ba 0c 66 02 c0       	mov    edx,0xc002660c
c0022c48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c4c:	89 10                	mov    DWORD PTR [eax],edx
c0022c4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c52:	83 ec 0c             	sub    esp,0xc
c0022c55:	50                   	push   eax
c0022c56:	e8 6b 72 fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c0022c5b:	83 c4 10             	add    esp,0x10
c0022c5e:	90                   	nop
c0022c5f:	83 c4 0c             	add    esp,0xc
c0022c62:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0022c64 <ATA::~ATA()>:
c0022c64:	83 ec 0c             	sub    esp,0xc
c0022c67:	83 ec 0c             	sub    esp,0xc
c0022c6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c6e:	e8 cd ff ff ff       	call   c0022c40 <ATA::~ATA()>
c0022c73:	83 c4 10             	add    esp,0x10
c0022c76:	83 ec 08             	sub    esp,0x8
c0022c79:	68 8c 01 00 00       	push   0x18c
c0022c7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c82:	e8 f5 a5 fe ff       	call   c000d27c <operator delete(void*, unsigned long)>
c0022c87:	83 c4 10             	add    esp,0x10
c0022c8a:	83 c4 0c             	add    esp,0xc
c0022c8d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0022c8e <ATAPI::~ATAPI()>:
c0022c8e:	83 ec 0c             	sub    esp,0xc
c0022c91:	ba 54 66 02 c0       	mov    edx,0xc0026654
c0022c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c9a:	89 10                	mov    DWORD PTR [eax],edx
c0022c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ca0:	83 ec 0c             	sub    esp,0xc
c0022ca3:	50                   	push   eax
c0022ca4:	e8 1d 72 fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c0022ca9:	83 c4 10             	add    esp,0x10
c0022cac:	90                   	nop
c0022cad:	83 c4 0c             	add    esp,0xc
c0022cb0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0022cb2 <ATAPI::~ATAPI()>:
c0022cb2:	83 ec 0c             	sub    esp,0xc
c0022cb5:	83 ec 0c             	sub    esp,0xc
c0022cb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022cbc:	e8 cd ff ff ff       	call   c0022c8e <ATAPI::~ATAPI()>
c0022cc1:	83 c4 10             	add    esp,0x10
c0022cc4:	83 ec 08             	sub    esp,0x8
c0022cc7:	68 84 01 00 00       	push   0x184
c0022ccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022cd0:	e8 a7 a5 fe ff       	call   c000d27c <operator delete(void*, unsigned long)>
c0022cd5:	83 c4 10             	add    esp,0x10
c0022cd8:	83 c4 0c             	add    esp,0xc
c0022cdb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0022cdc <SATA::~SATA()>:
c0022cdc:	83 ec 0c             	sub    esp,0xc
c0022cdf:	ba 14 67 02 c0       	mov    edx,0xc0026714
c0022ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ce8:	89 10                	mov    DWORD PTR [eax],edx
c0022cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cee:	83 ec 0c             	sub    esp,0xc
c0022cf1:	50                   	push   eax
c0022cf2:	e8 cf 71 fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c0022cf7:	83 c4 10             	add    esp,0x10
c0022cfa:	90                   	nop
c0022cfb:	83 c4 0c             	add    esp,0xc
c0022cfe:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0022d00 <SATA::~SATA()>:
c0022d00:	83 ec 0c             	sub    esp,0xc
c0022d03:	83 ec 0c             	sub    esp,0xc
c0022d06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d0a:	e8 cd ff ff ff       	call   c0022cdc <SATA::~SATA()>
c0022d0f:	83 c4 10             	add    esp,0x10
c0022d12:	83 ec 08             	sub    esp,0x8
c0022d15:	68 7c 01 00 00       	push   0x17c
c0022d1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d1e:	e8 59 a5 fe ff       	call   c000d27c <operator delete(void*, unsigned long)>
c0022d23:	83 c4 10             	add    esp,0x10
c0022d26:	83 c4 0c             	add    esp,0xc
c0022d29:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0022d2a <SATAPI::~SATAPI()>:
c0022d2a:	83 ec 0c             	sub    esp,0xc
c0022d2d:	ba 38 68 02 c0       	mov    edx,0xc0026838
c0022d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d36:	89 10                	mov    DWORD PTR [eax],edx
c0022d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d3c:	83 ec 0c             	sub    esp,0xc
c0022d3f:	50                   	push   eax
c0022d40:	e8 81 71 fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c0022d45:	83 c4 10             	add    esp,0x10
c0022d48:	90                   	nop
c0022d49:	83 c4 0c             	add    esp,0xc
c0022d4c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0022d4e <SATAPI::~SATAPI()>:
c0022d4e:	83 ec 0c             	sub    esp,0xc
c0022d51:	83 ec 0c             	sub    esp,0xc
c0022d54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d58:	e8 cd ff ff ff       	call   c0022d2a <SATAPI::~SATAPI()>
c0022d5d:	83 c4 10             	add    esp,0x10
c0022d60:	83 ec 08             	sub    esp,0x8
c0022d63:	68 84 01 00 00       	push   0x184
c0022d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d6c:	e8 0b a5 fe ff       	call   c000d27c <operator delete(void*, unsigned long)>
c0022d71:	83 c4 10             	add    esp,0x10
c0022d74:	83 c4 0c             	add    esp,0xc
c0022d77:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0022d78 <APICTimer::~APICTimer()>:
c0022d78:	83 ec 0c             	sub    esp,0xc
c0022d7b:	ba 8c 68 02 c0       	mov    edx,0xc002688c
c0022d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d84:	89 10                	mov    DWORD PTR [eax],edx
c0022d86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d8a:	83 ec 0c             	sub    esp,0xc
c0022d8d:	50                   	push   eax
c0022d8e:	e8 01 83 fe ff       	call   c000b094 <Timer::~Timer()>
c0022d93:	83 c4 10             	add    esp,0x10
c0022d96:	90                   	nop
c0022d97:	83 c4 0c             	add    esp,0xc
c0022d9a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0022d9c <APICTimer::~APICTimer()>:
c0022d9c:	83 ec 0c             	sub    esp,0xc
c0022d9f:	83 ec 0c             	sub    esp,0xc
c0022da2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022da6:	e8 cd ff ff ff       	call   c0022d78 <APICTimer::~APICTimer()>
c0022dab:	83 c4 10             	add    esp,0x10
c0022dae:	83 ec 08             	sub    esp,0x8
c0022db1:	68 60 01 00 00       	push   0x160
c0022db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022dba:	e8 bd a4 fe ff       	call   c000d27c <operator delete(void*, unsigned long)>
c0022dbf:	83 c4 10             	add    esp,0x10
c0022dc2:	83 c4 0c             	add    esp,0xc
c0022dc5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0022dc8 <PIT::~PIT()>:
c0022dc8:	83 ec 0c             	sub    esp,0xc
c0022dcb:	ba dc 68 02 c0       	mov    edx,0xc00268dc
c0022dd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dd4:	89 10                	mov    DWORD PTR [eax],edx
c0022dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dda:	83 ec 0c             	sub    esp,0xc
c0022ddd:	50                   	push   eax
c0022dde:	e8 b1 82 fe ff       	call   c000b094 <Timer::~Timer()>
c0022de3:	83 c4 10             	add    esp,0x10
c0022de6:	90                   	nop
c0022de7:	83 c4 0c             	add    esp,0xc
c0022dea:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0022dec <PIT::~PIT()>:
c0022dec:	83 ec 0c             	sub    esp,0xc
c0022def:	83 ec 0c             	sub    esp,0xc
c0022df2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022df6:	e8 cd ff ff ff       	call   c0022dc8 <PIT::~PIT()>
c0022dfb:	83 c4 10             	add    esp,0x10
c0022dfe:	83 ec 08             	sub    esp,0x8
c0022e01:	68 5c 01 00 00       	push   0x15c
c0022e06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e0a:	e8 6d a4 fe ff       	call   c000d27c <operator delete(void*, unsigned long)>
c0022e0f:	83 c4 10             	add    esp,0x10
c0022e12:	83 c4 0c             	add    esp,0xc
c0022e15:	c3                   	ret    

Disassembly of section userkernel:

c0028000 <KiDefaultSignalHandlerAbort(int)>:
c0028000:	57                   	push   edi
c0028001:	b9 07 00 00 00       	mov    ecx,0x7
c0028006:	56                   	push   esi
c0028007:	be e7 4a 02 c0       	mov    esi,0xc0024ae7
c002800c:	83 ec 24             	sub    esp,0x24
c002800f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0028013:	fc                   	cld    
c0028014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0028016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002801a:	50                   	push   eax
c002801b:	6a 00                	push   0x0
c002801d:	6a 38                	push   0x38
c002801f:	6a 01                	push   0x1
c0028021:	e8 2c 00 00 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0028026:	83 c4 34             	add    esp,0x34
c0028029:	5e                   	pop    esi
c002802a:	5f                   	pop    edi
c002802b:	c3                   	ret    

c002802c <KiDefaultSignalHandlerTerminate(int)>:
c002802c:	57                   	push   edi
c002802d:	b9 08 00 00 00       	mov    ecx,0x8
c0028032:	56                   	push   esi
c0028033:	be 03 4b 02 c0       	mov    esi,0xc0024b03
c0028038:	83 ec 24             	sub    esp,0x24
c002803b:	89 e7                	mov    edi,esp
c002803d:	fc                   	cld    
c002803e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0028040:	54                   	push   esp
c0028041:	6a 00                	push   0x0
c0028043:	6a 37                	push   0x37
c0028045:	6a 01                	push   0x1
c0028047:	e8 06 00 00 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002804c:	83 c4 34             	add    esp,0x34
c002804f:	5e                   	pop    esi
c0028050:	5f                   	pop    edi
c0028051:	c3                   	ret    

c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0028052:	53                   	push   ebx
c0028053:	83 ec 10             	sub    esp,0x10
c0028056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002805a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002805e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0028062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0028066:	cd 60                	int    0x60
c0028068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002806c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028078:	83 c4 10             	add    esp,0x10
c002807b:	5b                   	pop    ebx
c002807c:	c3                   	ret    

Disassembly of section align_previous:

c0029000 <DO_NOT_DELETE()>:
c0029000:	c3                   	ret    
