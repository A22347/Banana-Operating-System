
packages/system/32/0001/system.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <beginx(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <beginx(void*)+0xd>	1000000d: R_386_PC32	begin(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <memcmp(void*, void*, unsigned long)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	83 ec 10             	sub    esp,0x10
1000001d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000020:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000023:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000026:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
10000029:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000002c:	8d 50 ff             	lea    edx,[eax-0x1]
1000002f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000032:	85 c0                	test   eax,eax
10000034:	74 12                	je     10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000036:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000039:	8a 10                	mov    dl,BYTE PTR [eax]
1000003b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000003e:	8a 00                	mov    al,BYTE PTR [eax]
10000040:	38 c2                	cmp    dl,al
10000042:	75 04                	jne    10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000044:	b0 01                	mov    al,0x1
10000046:	eb 02                	jmp    1000004a <memcmp(void*, void*, unsigned long)+0x33>
10000048:	b0 00                	mov    al,0x0
1000004a:	84 c0                	test   al,al
1000004c:	74 08                	je     10000056 <memcmp(void*, void*, unsigned long)+0x3f>
1000004e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000051:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
10000054:	eb d3                	jmp    10000029 <memcmp(void*, void*, unsigned long)+0x12>
10000056:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000059:	8a 00                	mov    al,BYTE PTR [eax]
1000005b:	0f b6 d0             	movzx  edx,al
1000005e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000061:	8a 00                	mov    al,BYTE PTR [eax]
10000063:	0f b6 c0             	movzx  eax,al
10000066:	29 c2                	sub    edx,eax
10000068:	89 d0                	mov    eax,edx
1000006a:	c9                   	leave  
1000006b:	c3                   	ret    

1000006c <memmove>:
1000006c:	55                   	push   ebp
1000006d:	89 e5                	mov    ebp,esp
1000006f:	83 ec 10             	sub    esp,0x10
10000072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000075:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000078:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000007b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
1000007e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000081:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
10000084:	76 1b                	jbe    100000a1 <memmove+0x35>
10000086:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
1000008a:	74 46                	je     100000d2 <memmove+0x66>
1000008c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000008f:	8a 10                	mov    dl,BYTE PTR [eax]
10000091:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000094:	88 10                	mov    BYTE PTR [eax],dl
10000096:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000099:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
1000009c:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000009f:	eb e5                	jmp    10000086 <memmove+0x1a>
100000a1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000a4:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
100000a7:	73 29                	jae    100000d2 <memmove+0x66>
100000a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000ac:	48                   	dec    eax
100000ad:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
100000b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000b3:	48                   	dec    eax
100000b4:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
100000b7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000bb:	74 15                	je     100000d2 <memmove+0x66>
100000bd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000c0:	8a 10                	mov    dl,BYTE PTR [eax]
100000c2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000c5:	88 10                	mov    BYTE PTR [eax],dl
100000c7:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100000ca:	ff 4d f8             	dec    DWORD PTR [ebp-0x8]
100000cd:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000d0:	eb e5                	jmp    100000b7 <memmove+0x4b>
100000d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000d5:	c9                   	leave  
100000d6:	c3                   	ret    

100000d7 <memset>:
100000d7:	55                   	push   ebp
100000d8:	89 e5                	mov    ebp,esp
100000da:	83 ec 10             	sub    esp,0x10
100000dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000e0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100000e3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000e7:	74 12                	je     100000fb <memset+0x24>
100000e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100000ec:	88 c2                	mov    dl,al
100000ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000f1:	88 10                	mov    BYTE PTR [eax],dl
100000f3:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
100000f6:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000f9:	eb e8                	jmp    100000e3 <memset+0xc>
100000fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000fe:	c9                   	leave  
100000ff:	c3                   	ret    

10000100 <strlen>:
10000100:	55                   	push   ebp
10000101:	89 e5                	mov    ebp,esp
10000103:	83 ec 10             	sub    esp,0x10
10000106:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
1000010d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000110:	8a 00                	mov    al,BYTE PTR [eax]
10000112:	84 c0                	test   al,al
10000114:	74 0c                	je     10000122 <strlen+0x22>
10000116:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000119:	40                   	inc    eax
1000011a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000011d:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
10000120:	eb eb                	jmp    1000010d <strlen+0xd>
10000122:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000125:	c9                   	leave  
10000126:	c3                   	ret    

10000127 <strpbrk(char const*, char const*)>:
10000127:	55                   	push   ebp
10000128:	89 e5                	mov    ebp,esp
1000012a:	83 ec 10             	sub    esp,0x10
1000012d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000130:	8a 00                	mov    al,BYTE PTR [eax]
10000132:	84 c0                	test   al,al
10000134:	74 30                	je     10000166 <strpbrk(char const*, char const*)+0x3f>
10000136:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000139:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000013c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000013f:	8a 00                	mov    al,BYTE PTR [eax]
10000141:	84 c0                	test   al,al
10000143:	74 18                	je     1000015d <strpbrk(char const*, char const*)+0x36>
10000145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000148:	8a 10                	mov    dl,BYTE PTR [eax]
1000014a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000014d:	8a 00                	mov    al,BYTE PTR [eax]
1000014f:	38 c2                	cmp    dl,al
10000151:	75 05                	jne    10000158 <strpbrk(char const*, char const*)+0x31>
10000153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000156:	eb 13                	jmp    1000016b <strpbrk(char const*, char const*)+0x44>
10000158:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
1000015b:	eb df                	jmp    1000013c <strpbrk(char const*, char const*)+0x15>
1000015d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000160:	40                   	inc    eax
10000161:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000164:	eb c7                	jmp    1000012d <strpbrk(char const*, char const*)+0x6>
10000166:	b8 00 00 00 00       	mov    eax,0x0
1000016b:	c9                   	leave  
1000016c:	c3                   	ret    

1000016d <strtok>:
1000016d:	55                   	push   ebp
1000016e:	89 e5                	mov    ebp,esp
10000170:	83 ec 10             	sub    esp,0x10
10000173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000176:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000179:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000017c:	85 c0                	test   eax,eax
1000017e:	75 18                	jne    10000198 <strtok+0x2b>
10000180:	a1 00 00 00 00       	mov    eax,ds:0x0	10000181: R_386_32	SavedPtr
10000185:	85 c0                	test   eax,eax
10000187:	75 07                	jne    10000190 <strtok+0x23>
10000189:	b8 00 00 00 00       	mov    eax,0x0
1000018e:	eb 6f                	jmp    100001ff <strtok+0x92>
10000190:	a1 00 00 00 00       	mov    eax,ds:0x0	10000191: R_386_32	SavedPtr
10000195:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000198:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000019b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000019e:	50                   	push   eax
1000019f:	e8 fc ff ff ff       	call   100001a0 <strtok+0x33>	100001a0: R_386_PC32	strpbrk(char const*, char const*)
100001a4:	83 c4 08             	add    esp,0x8
100001a7:	a3 00 00 00 00       	mov    ds:0x0,eax	100001a8: R_386_32	SavedPtr
100001ac:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100001ae: R_386_32	SavedPtr
100001b2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001b5:	39 c2                	cmp    edx,eax
100001b7:	75 22                	jne    100001db <strtok+0x6e>
100001b9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001bc:	8d 50 01             	lea    edx,[eax+0x1]
100001bf:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100001c2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001c8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100001cb:	50                   	push   eax
100001cc:	e8 fc ff ff ff       	call   100001cd <strtok+0x60>	100001cd: R_386_PC32	strpbrk(char const*, char const*)
100001d1:	83 c4 08             	add    esp,0x8
100001d4:	a3 00 00 00 00       	mov    ds:0x0,eax	100001d5: R_386_32	SavedPtr
100001d9:	eb d1                	jmp    100001ac <strtok+0x3f>
100001db:	a1 00 00 00 00       	mov    eax,ds:0x0	100001dc: R_386_32	SavedPtr
100001e0:	85 c0                	test   eax,eax
100001e2:	74 16                	je     100001fa <strtok+0x8d>
100001e4:	a1 00 00 00 00       	mov    eax,ds:0x0	100001e5: R_386_32	SavedPtr
100001e9:	8d 50 01             	lea    edx,[eax+0x1]
100001ec:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	100001ee: R_386_32	SavedPtr
100001f2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001f5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001f8:	eb 05                	jmp    100001ff <strtok+0x92>
100001fa:	b8 00 00 00 00       	mov    eax,0x0
100001ff:	c9                   	leave  
10000200:	c3                   	ret    

10000201 <strcpy>:
10000201:	55                   	push   ebp
10000202:	89 e5                	mov    ebp,esp
10000204:	83 ec 10             	sub    esp,0x10
10000207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000020a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000020d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000210:	8a 00                	mov    al,BYTE PTR [eax]
10000212:	84 c0                	test   al,al
10000214:	74 12                	je     10000228 <strcpy+0x27>
10000216:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000219:	8a 10                	mov    dl,BYTE PTR [eax]
1000021b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000021e:	88 10                	mov    BYTE PTR [eax],dl
10000220:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000223:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10000226:	eb e5                	jmp    1000020d <strcpy+0xc>
10000228:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000022b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000022e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000231:	c9                   	leave  
10000232:	c3                   	ret    

10000233 <strncpyxx(char*, char const*, unsigned long)>:
10000233:	55                   	push   ebp
10000234:	89 e5                	mov    ebp,esp
10000236:	83 ec 10             	sub    esp,0x10
10000239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000023c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000023f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000242:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000245:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000249:	74 23                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000024b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000024e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000251:	8d 42 01             	lea    eax,[edx+0x1]
10000254:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000257:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000025a:	8d 48 01             	lea    ecx,[eax+0x1]
1000025d:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
10000260:	8a 12                	mov    dl,BYTE PTR [edx]
10000262:	88 10                	mov    BYTE PTR [eax],dl
10000264:	8a 00                	mov    al,BYTE PTR [eax]
10000266:	84 c0                	test   al,al
10000268:	74 04                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000026a:	b0 01                	mov    al,0x1
1000026c:	eb 02                	jmp    10000270 <strncpyxx(char*, char const*, unsigned long)+0x3d>
1000026e:	b0 00                	mov    al,0x0
10000270:	84 c0                	test   al,al
10000272:	74 02                	je     10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000274:	eb cf                	jmp    10000245 <strncpyxx(char*, char const*, unsigned long)+0x12>
10000276:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000279:	8d 50 ff             	lea    edx,[eax-0x1]
1000027c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
1000027f:	85 c0                	test   eax,eax
10000281:	0f 95 c0             	setne  al
10000284:	84 c0                	test   al,al
10000286:	74 0b                	je     10000293 <strncpyxx(char*, char const*, unsigned long)+0x60>
10000288:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000028b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000028e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000291:	eb e3                	jmp    10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000296:	c9                   	leave  
10000297:	c3                   	ret    

10000298 <strcmp>:
10000298:	55                   	push   ebp
10000299:	89 e5                	mov    ebp,esp
1000029b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000029e:	8a 10                	mov    dl,BYTE PTR [eax]
100002a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002a3:	8a 00                	mov    al,BYTE PTR [eax]
100002a5:	38 c2                	cmp    dl,al
100002a7:	75 20                	jne    100002c9 <strcmp+0x31>
100002a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ac:	8d 50 01             	lea    edx,[eax+0x1]
100002af:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
100002b2:	8a 00                	mov    al,BYTE PTR [eax]
100002b4:	84 c0                	test   al,al
100002b6:	0f 94 c0             	sete   al
100002b9:	84 c0                	test   al,al
100002bb:	74 07                	je     100002c4 <strcmp+0x2c>
100002bd:	b8 00 00 00 00       	mov    eax,0x0
100002c2:	eb 19                	jmp    100002dd <strcmp+0x45>
100002c4:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
100002c7:	eb d2                	jmp    1000029b <strcmp+0x3>
100002c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002cc:	8a 00                	mov    al,BYTE PTR [eax]
100002ce:	0f b6 d0             	movzx  edx,al
100002d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002d4:	8a 00                	mov    al,BYTE PTR [eax]
100002d6:	0f b6 c0             	movzx  eax,al
100002d9:	29 c2                	sub    edx,eax
100002db:	89 d0                	mov    eax,edx
100002dd:	5d                   	pop    ebp
100002de:	c3                   	ret    

100002df <strchr(char const*, int)>:
100002df:	55                   	push   ebp
100002e0:	89 e5                	mov    ebp,esp
100002e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002e5:	8a 00                	mov    al,BYTE PTR [eax]
100002e7:	84 c0                	test   al,al
100002e9:	74 16                	je     10000301 <strchr(char const*, int)+0x22>
100002eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ee:	8a 00                	mov    al,BYTE PTR [eax]
100002f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100002f3:	38 d0                	cmp    al,dl
100002f5:	75 05                	jne    100002fc <strchr(char const*, int)+0x1d>
100002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002fa:	eb 0a                	jmp    10000306 <strchr(char const*, int)+0x27>
100002fc:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
100002ff:	eb e1                	jmp    100002e2 <strchr(char const*, int)+0x3>
10000301:	b8 00 00 00 00       	mov    eax,0x0
10000306:	5d                   	pop    ebp
10000307:	c3                   	ret    

10000308 <strncmp>:
10000308:	55                   	push   ebp
10000309:	89 e5                	mov    ebp,esp
1000030b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000030e:	8d 50 ff             	lea    edx,[eax-0x1]
10000311:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000314:	85 c0                	test   eax,eax
10000316:	74 12                	je     1000032a <strncmp+0x22>
10000318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000031b:	8a 10                	mov    dl,BYTE PTR [eax]
1000031d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000320:	8a 00                	mov    al,BYTE PTR [eax]
10000322:	38 c2                	cmp    dl,al
10000324:	75 04                	jne    1000032a <strncmp+0x22>
10000326:	b0 01                	mov    al,0x1
10000328:	eb 02                	jmp    1000032c <strncmp+0x24>
1000032a:	b0 00                	mov    al,0x0
1000032c:	84 c0                	test   al,al
1000032e:	74 20                	je     10000350 <strncmp+0x48>
10000330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000333:	8d 50 01             	lea    edx,[eax+0x1]
10000336:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
10000339:	8a 00                	mov    al,BYTE PTR [eax]
1000033b:	84 c0                	test   al,al
1000033d:	0f 94 c0             	sete   al
10000340:	84 c0                	test   al,al
10000342:	74 07                	je     1000034b <strncmp+0x43>
10000344:	b8 00 00 00 00       	mov    eax,0x0
10000349:	eb 19                	jmp    10000364 <strncmp+0x5c>
1000034b:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
1000034e:	eb bb                	jmp    1000030b <strncmp+0x3>
10000350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000353:	8a 00                	mov    al,BYTE PTR [eax]
10000355:	0f b6 d0             	movzx  edx,al
10000358:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000035b:	8a 00                	mov    al,BYTE PTR [eax]
1000035d:	0f b6 c0             	movzx  eax,al
10000360:	29 c2                	sub    edx,eax
10000362:	89 d0                	mov    eax,edx
10000364:	5d                   	pop    ebp
10000365:	c3                   	ret    

10000366 <strcat>:
10000366:	55                   	push   ebp
10000367:	89 e5                	mov    ebp,esp
10000369:	83 ec 10             	sub    esp,0x10
1000036c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000036f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000372:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000375:	8d 50 01             	lea    edx,[eax+0x1]
10000378:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
1000037b:	8a 00                	mov    al,BYTE PTR [eax]
1000037d:	84 c0                	test   al,al
1000037f:	0f 95 c0             	setne  al
10000382:	84 c0                	test   al,al
10000384:	74 02                	je     10000388 <strcat+0x22>
10000386:	eb ea                	jmp    10000372 <strcat+0xc>
10000388:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
1000038b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000038e:	8d 42 01             	lea    eax,[edx+0x1]
10000391:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000394:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000397:	8d 48 01             	lea    ecx,[eax+0x1]
1000039a:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
1000039d:	8a 12                	mov    dl,BYTE PTR [edx]
1000039f:	88 10                	mov    BYTE PTR [eax],dl
100003a1:	8a 00                	mov    al,BYTE PTR [eax]
100003a3:	84 c0                	test   al,al
100003a5:	0f 95 c0             	setne  al
100003a8:	84 c0                	test   al,al
100003aa:	74 02                	je     100003ae <strcat+0x48>
100003ac:	eb dd                	jmp    1000038b <strcat+0x25>
100003ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003b1:	c9                   	leave  
100003b2:	c3                   	ret    

100003b3 <strncat(char*, char const*, unsigned long)>:
100003b3:	55                   	push   ebp
100003b4:	89 e5                	mov    ebp,esp
100003b6:	83 ec 10             	sub    esp,0x10
100003b9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100003bd:	74 5c                	je     1000041b <strncat(char*, char const*, unsigned long)+0x68>
100003bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003c2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100003c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003c8:	8d 50 01             	lea    edx,[eax+0x1]
100003cb:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100003ce:	8a 00                	mov    al,BYTE PTR [eax]
100003d0:	84 c0                	test   al,al
100003d2:	0f 95 c0             	setne  al
100003d5:	84 c0                	test   al,al
100003d7:	74 02                	je     100003db <strncat(char*, char const*, unsigned long)+0x28>
100003d9:	eb ea                	jmp    100003c5 <strncat(char*, char const*, unsigned long)+0x12>
100003db:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100003de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100003e1:	8d 42 01             	lea    eax,[edx+0x1]
100003e4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
100003e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003ea:	8d 48 01             	lea    ecx,[eax+0x1]
100003ed:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
100003f0:	8a 12                	mov    dl,BYTE PTR [edx]
100003f2:	88 10                	mov    BYTE PTR [eax],dl
100003f4:	8a 00                	mov    al,BYTE PTR [eax]
100003f6:	84 c0                	test   al,al
100003f8:	74 0d                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
100003fa:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100003fd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000401:	74 04                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
10000403:	b0 01                	mov    al,0x1
10000405:	eb 02                	jmp    10000409 <strncat(char*, char const*, unsigned long)+0x56>
10000407:	b0 00                	mov    al,0x0
10000409:	84 c0                	test   al,al
1000040b:	74 02                	je     1000040f <strncat(char*, char const*, unsigned long)+0x5c>
1000040d:	eb cf                	jmp    100003de <strncat(char*, char const*, unsigned long)+0x2b>
1000040f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000413:	75 06                	jne    1000041b <strncat(char*, char const*, unsigned long)+0x68>
10000415:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000418:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000041b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000041e:	c9                   	leave  
1000041f:	c3                   	ret    

10000420 <strstr(char*, char*)>:
10000420:	55                   	push   ebp
10000421:	89 e5                	mov    ebp,esp
10000423:	83 ec 10             	sub    esp,0x10
10000426:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000429:	e8 fc ff ff ff       	call   1000042a <strstr(char*, char*)+0xa>	1000042a: R_386_PC32	strlen
1000042e:	83 c4 04             	add    esp,0x4
10000431:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000434:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
10000438:	75 05                	jne    1000043f <strstr(char*, char*)+0x1f>
1000043a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000043d:	eb 3f                	jmp    1000047e <strstr(char*, char*)+0x5e>
1000043f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000442:	50                   	push   eax
10000443:	e8 fc ff ff ff       	call   10000444 <strstr(char*, char*)+0x24>	10000444: R_386_PC32	strlen
10000448:	83 c4 04             	add    esp,0x4
1000044b:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
1000044e:	77 29                	ja     10000479 <strstr(char*, char*)+0x59>
10000450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000453:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
10000456:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000459:	50                   	push   eax
1000045a:	e8 fc ff ff ff       	call   1000045b <strstr(char*, char*)+0x3b>	1000045b: R_386_PC32	memcmp(void*, void*, unsigned long)
1000045f:	83 c4 0c             	add    esp,0xc
10000462:	85 c0                	test   eax,eax
10000464:	0f 94 c0             	sete   al
10000467:	84 c0                	test   al,al
10000469:	74 05                	je     10000470 <strstr(char*, char*)+0x50>
1000046b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000046e:	eb 0e                	jmp    1000047e <strstr(char*, char*)+0x5e>
10000470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000473:	40                   	inc    eax
10000474:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000477:	eb c6                	jmp    1000043f <strstr(char*, char*)+0x1f>
10000479:	b8 00 00 00 00       	mov    eax,0x0
1000047e:	c9                   	leave  
1000047f:	c3                   	ret    

10000480 <rmtree(char*)>:
10000480:	55                   	push   ebp
10000481:	89 e5                	mov    ebp,esp
10000483:	53                   	push   ebx
10000484:	81 ec 64 02 00 00    	sub    esp,0x264
1000048a:	68 2c 01 00 00       	push   0x12c
1000048f:	6a 00                	push   0x0
10000491:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000497:	50                   	push   eax
10000498:	e8 fc ff ff ff       	call   10000499 <rmtree(char*)+0x19>	10000499: R_386_PC32	memset
1000049d:	83 c4 0c             	add    esp,0xc
100004a0:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
100004a6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100004a9:	83 ec 0c             	sub    esp,0xc
100004ac:	68 14 01 00 00       	push   0x114
100004b1:	e8 fc ff ff ff       	call   100004b2 <rmtree(char*)+0x32>	100004b2: R_386_PC32	operator new(unsigned long)
100004b6:	83 c4 10             	add    esp,0x10
100004b9:	89 c3                	mov    ebx,eax
100004bb:	b8 00 20 00 c2       	mov    eax,0xc2002000
100004c0:	8b 00                	mov    eax,DWORD PTR [eax]
100004c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
100004c5:	83 ec 04             	sub    esp,0x4
100004c8:	50                   	push   eax
100004c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100004cc:	53                   	push   ebx
100004cd:	e8 fc ff ff ff       	call   100004ce <rmtree(char*)+0x4e>	100004ce: R_386_PC32	Directory::Directory(char const*, Process*)
100004d2:	83 c4 10             	add    esp,0x10
100004d5:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
100004d8:	83 ec 0c             	sub    esp,0xc
100004db:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100004de:	e8 fc ff ff ff       	call   100004df <rmtree(char*)+0x5f>	100004df: R_386_PC32	Directory::open()
100004e3:	83 c4 10             	add    esp,0x10
100004e6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100004e9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
100004ed:	74 24                	je     10000513 <rmtree(char*)+0x93>
100004ef:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100004f3:	0f 84 8b 01 00 00    	je     10000684 <rmtree(char*)+0x204>
100004f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100004fc:	8b 00                	mov    eax,DWORD PTR [eax]
100004fe:	83 c0 08             	add    eax,0x8
10000501:	8b 00                	mov    eax,DWORD PTR [eax]
10000503:	83 ec 0c             	sub    esp,0xc
10000506:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000509:	ff d0                	call   eax
1000050b:	83 c4 10             	add    esp,0x10
1000050e:	e9 72 01 00 00       	jmp    10000685 <rmtree(char*)+0x205>
10000513:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000516:	8b 00                	mov    eax,DWORD PTR [eax]
10000518:	83 c0 0c             	add    eax,0xc
1000051b:	8b 00                	mov    eax,DWORD PTR [eax]
1000051d:	83 ec 0c             	sub    esp,0xc
10000520:	8d 95 a4 fd ff ff    	lea    edx,[ebp-0x25c]
10000526:	52                   	push   edx
10000527:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000052a:	6a 00                	push   0x0
1000052c:	68 10 01 00 00       	push   0x110
10000531:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000534:	ff d0                	call   eax
10000536:	83 c4 20             	add    esp,0x20
10000539:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
1000053c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000540:	0f 85 04 01 00 00    	jne    1000064a <rmtree(char*)+0x1ca>
10000546:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000549:	83 c0 10             	add    eax,0x10
1000054c:	83 ec 08             	sub    esp,0x8
1000054f:	68 50 af 00 10       	push   0x1000af50	10000550: R_386_32	.text
10000554:	50                   	push   eax
10000555:	e8 fc ff ff ff       	call   10000556 <rmtree(char*)+0xd6>	10000556: R_386_PC32	strcmp
1000055a:	83 c4 10             	add    esp,0x10
1000055d:	85 c0                	test   eax,eax
1000055f:	74 b2                	je     10000513 <rmtree(char*)+0x93>
10000561:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000564:	83 c0 10             	add    eax,0x10
10000567:	83 ec 08             	sub    esp,0x8
1000056a:	68 52 af 00 10       	push   0x1000af52	1000056b: R_386_32	.text
1000056f:	50                   	push   eax
10000570:	e8 fc ff ff ff       	call   10000571 <rmtree(char*)+0xf1>	10000571: R_386_PC32	strcmp
10000575:	83 c4 10             	add    esp,0x10
10000578:	85 c0                	test   eax,eax
1000057a:	74 97                	je     10000513 <rmtree(char*)+0x93>
1000057c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000057f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000582:	83 e0 02             	and    eax,0x2
10000585:	85 c0                	test   eax,eax
10000587:	74 17                	je     100005a0 <rmtree(char*)+0x120>
10000589:	83 ec 0c             	sub    esp,0xc
1000058c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000592:	50                   	push   eax
10000593:	e8 fc ff ff ff       	call   10000594 <rmtree(char*)+0x114>	10000594: R_386_PC32	rmtree(char*)
10000598:	83 c4 10             	add    esp,0x10
1000059b:	e9 73 ff ff ff       	jmp    10000513 <rmtree(char*)+0x93>
100005a0:	83 ec 08             	sub    esp,0x8
100005a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100005a6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005ac:	50                   	push   eax
100005ad:	e8 fc ff ff ff       	call   100005ae <rmtree(char*)+0x12e>	100005ae: R_386_PC32	strcpy
100005b2:	83 c4 10             	add    esp,0x10
100005b5:	83 ec 08             	sub    esp,0x8
100005b8:	68 55 af 00 10       	push   0x1000af55	100005b9: R_386_32	.text
100005bd:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005c3:	50                   	push   eax
100005c4:	e8 fc ff ff ff       	call   100005c5 <rmtree(char*)+0x145>	100005c5: R_386_PC32	strcat
100005c9:	83 c4 10             	add    esp,0x10
100005cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100005cf:	83 c0 10             	add    eax,0x10
100005d2:	83 ec 08             	sub    esp,0x8
100005d5:	50                   	push   eax
100005d6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005dc:	50                   	push   eax
100005dd:	e8 fc ff ff ff       	call   100005de <rmtree(char*)+0x15e>	100005de: R_386_PC32	strcat
100005e2:	83 c4 10             	add    esp,0x10
100005e5:	83 ec 0c             	sub    esp,0xc
100005e8:	68 14 01 00 00       	push   0x114
100005ed:	e8 fc ff ff ff       	call   100005ee <rmtree(char*)+0x16e>	100005ee: R_386_PC32	operator new(unsigned long)
100005f2:	83 c4 10             	add    esp,0x10
100005f5:	89 c3                	mov    ebx,eax
100005f7:	b8 00 20 00 c2       	mov    eax,0xc2002000
100005fc:	8b 00                	mov    eax,DWORD PTR [eax]
100005fe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
10000601:	83 ec 04             	sub    esp,0x4
10000604:	50                   	push   eax
10000605:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
1000060b:	50                   	push   eax
1000060c:	53                   	push   ebx
1000060d:	e8 fc ff ff ff       	call   1000060e <rmtree(char*)+0x18e>	1000060e: R_386_PC32	File::File(char const*, Process*)
10000612:	83 c4 10             	add    esp,0x10
10000615:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10000618:	83 ec 0c             	sub    esp,0xc
1000061b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000061e:	e8 fc ff ff ff       	call   1000061f <rmtree(char*)+0x19f>	1000061f: R_386_PC32	File::unlink()
10000623:	83 c4 10             	add    esp,0x10
10000626:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
1000062a:	0f 84 e3 fe ff ff    	je     10000513 <rmtree(char*)+0x93>
10000630:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000633:	8b 00                	mov    eax,DWORD PTR [eax]
10000635:	83 c0 08             	add    eax,0x8
10000638:	8b 00                	mov    eax,DWORD PTR [eax]
1000063a:	83 ec 0c             	sub    esp,0xc
1000063d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000640:	ff d0                	call   eax
10000642:	83 c4 10             	add    esp,0x10
10000645:	e9 c9 fe ff ff       	jmp    10000513 <rmtree(char*)+0x93>
1000064a:	90                   	nop
1000064b:	83 ec 0c             	sub    esp,0xc
1000064e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000651:	e8 fc ff ff ff       	call   10000652 <rmtree(char*)+0x1d2>	10000652: R_386_PC32	Directory::close()
10000656:	83 c4 10             	add    esp,0x10
10000659:	83 ec 0c             	sub    esp,0xc
1000065c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000065f:	e8 fc ff ff ff       	call   10000660 <rmtree(char*)+0x1e0>	10000660: R_386_PC32	Directory::unlink()
10000664:	83 c4 10             	add    esp,0x10
10000667:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
1000066b:	74 18                	je     10000685 <rmtree(char*)+0x205>
1000066d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000670:	8b 00                	mov    eax,DWORD PTR [eax]
10000672:	83 c0 08             	add    eax,0x8
10000675:	8b 00                	mov    eax,DWORD PTR [eax]
10000677:	83 ec 0c             	sub    esp,0xc
1000067a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000067d:	ff d0                	call   eax
1000067f:	83 c4 10             	add    esp,0x10
10000682:	eb 01                	jmp    10000685 <rmtree(char*)+0x205>
10000684:	90                   	nop
10000685:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000688:	c9                   	leave  
10000689:	c3                   	ret    

1000068a <mkdir(char const*, int)>:
1000068a:	55                   	push   ebp
1000068b:	89 e5                	mov    ebp,esp
1000068d:	53                   	push   ebx
1000068e:	83 ec 14             	sub    esp,0x14
10000691:	83 ec 0c             	sub    esp,0xc
10000694:	68 14 01 00 00       	push   0x114
10000699:	e8 fc ff ff ff       	call   1000069a <mkdir(char const*, int)+0x10>	1000069a: R_386_PC32	operator new(unsigned long)
1000069e:	83 c4 10             	add    esp,0x10
100006a1:	89 c3                	mov    ebx,eax
100006a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100006a4: R_386_32	kernelProcess
100006a8:	83 ec 04             	sub    esp,0x4
100006ab:	50                   	push   eax
100006ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006af:	53                   	push   ebx
100006b0:	e8 fc ff ff ff       	call   100006b1 <mkdir(char const*, int)+0x27>	100006b1: R_386_PC32	Directory::Directory(char const*, Process*)
100006b5:	83 c4 10             	add    esp,0x10
100006b8:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
100006bb:	83 ec 0c             	sub    esp,0xc
100006be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006c1:	e8 fc ff ff ff       	call   100006c2 <mkdir(char const*, int)+0x38>	100006c2: R_386_PC32	Directory::create()
100006c6:	83 c4 10             	add    esp,0x10
100006c9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
100006cd:	74 15                	je     100006e4 <mkdir(char const*, int)+0x5a>
100006cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100006d2:	8b 00                	mov    eax,DWORD PTR [eax]
100006d4:	83 c0 08             	add    eax,0x8
100006d7:	8b 00                	mov    eax,DWORD PTR [eax]
100006d9:	83 ec 0c             	sub    esp,0xc
100006dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006df:	ff d0                	call   eax
100006e1:	83 c4 10             	add    esp,0x10
100006e4:	b8 00 00 00 00       	mov    eax,0x0
100006e9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100006ec:	c9                   	leave  
100006ed:	c3                   	ret    

100006ee <copytree(char*, char*)>:
100006ee:	55                   	push   ebp
100006ef:	89 e5                	mov    ebp,esp
100006f1:	53                   	push   ebx
100006f2:	81 ec 54 01 00 00    	sub    esp,0x154
100006f8:	83 ec 0c             	sub    esp,0xc
100006fb:	68 90 01 00 00       	push   0x190
10000700:	e8 fc ff ff ff       	call   10000701 <copytree(char*, char*)+0x13>	10000701: R_386_PC32	malloc
10000705:	83 c4 10             	add    esp,0x10
10000708:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
1000070b:	83 ec 0c             	sub    esp,0xc
1000070e:	68 90 01 00 00       	push   0x190
10000713:	e8 fc ff ff ff       	call   10000714 <copytree(char*, char*)+0x26>	10000714: R_386_PC32	malloc
10000718:	83 c4 10             	add    esp,0x10
1000071b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000071e:	83 ec 04             	sub    esp,0x4
10000721:	68 90 01 00 00       	push   0x190
10000726:	6a 00                	push   0x0
10000728:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000072b:	e8 fc ff ff ff       	call   1000072c <copytree(char*, char*)+0x3e>	1000072c: R_386_PC32	memset
10000730:	83 c4 10             	add    esp,0x10
10000733:	83 ec 04             	sub    esp,0x4
10000736:	68 90 01 00 00       	push   0x190
1000073b:	6a 00                	push   0x0
1000073d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000740:	e8 fc ff ff ff       	call   10000741 <copytree(char*, char*)+0x53>	10000741: R_386_PC32	memset
10000745:	83 c4 10             	add    esp,0x10
10000748:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
1000074e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000751:	83 ec 0c             	sub    esp,0xc
10000754:	68 14 01 00 00       	push   0x114
10000759:	e8 fc ff ff ff       	call   1000075a <copytree(char*, char*)+0x6c>	1000075a: R_386_PC32	operator new(unsigned long)
1000075e:	83 c4 10             	add    esp,0x10
10000761:	89 c3                	mov    ebx,eax
10000763:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000768:	8b 00                	mov    eax,DWORD PTR [eax]
1000076a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
1000076d:	83 ec 04             	sub    esp,0x4
10000770:	50                   	push   eax
10000771:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000774:	53                   	push   ebx
10000775:	e8 fc ff ff ff       	call   10000776 <copytree(char*, char*)+0x88>	10000776: R_386_PC32	Directory::Directory(char const*, Process*)
1000077a:	83 c4 10             	add    esp,0x10
1000077d:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10000780:	83 ec 0c             	sub    esp,0xc
10000783:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000786:	e8 fc ff ff ff       	call   10000787 <copytree(char*, char*)+0x99>	10000787: R_386_PC32	Directory::open()
1000078b:	83 c4 10             	add    esp,0x10
1000078e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000791:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10000795:	74 34                	je     100007cb <copytree(char*, char*)+0xdd>
10000797:	83 ec 0c             	sub    esp,0xc
1000079a:	68 57 af 00 10       	push   0x1000af57	1000079b: R_386_32	.text
1000079f:	e8 fc ff ff ff       	call   100007a0 <copytree(char*, char*)+0xb2>	100007a0: R_386_PC32	Dbg::kprintf(char const*, ...)
100007a4:	83 c4 10             	add    esp,0x10
100007a7:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
100007ab:	0f 84 90 03 00 00    	je     10000b41 <copytree(char*, char*)+0x453>
100007b1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007b4:	8b 00                	mov    eax,DWORD PTR [eax]
100007b6:	83 c0 08             	add    eax,0x8
100007b9:	8b 00                	mov    eax,DWORD PTR [eax]
100007bb:	83 ec 0c             	sub    esp,0xc
100007be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007c1:	ff d0                	call   eax
100007c3:	83 c4 10             	add    esp,0x10
100007c6:	e9 76 03 00 00       	jmp    10000b41 <copytree(char*, char*)+0x453>
100007cb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007ce:	8b 00                	mov    eax,DWORD PTR [eax]
100007d0:	83 c0 0c             	add    eax,0xc
100007d3:	8b 00                	mov    eax,DWORD PTR [eax]
100007d5:	83 ec 0c             	sub    esp,0xc
100007d8:	8d 95 b8 fe ff ff    	lea    edx,[ebp-0x148]
100007de:	52                   	push   edx
100007df:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100007e2:	6a 00                	push   0x0
100007e4:	68 10 01 00 00       	push   0x110
100007e9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007ec:	ff d0                	call   eax
100007ee:	83 c4 20             	add    esp,0x20
100007f1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100007f4:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100007f8:	0f 85 fb 02 00 00    	jne    10000af9 <copytree(char*, char*)+0x40b>
100007fe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000801:	83 c0 10             	add    eax,0x10
10000804:	83 ec 08             	sub    esp,0x8
10000807:	68 50 af 00 10       	push   0x1000af50	10000808: R_386_32	.text
1000080c:	50                   	push   eax
1000080d:	e8 fc ff ff ff       	call   1000080e <copytree(char*, char*)+0x120>	1000080e: R_386_PC32	strcmp
10000812:	83 c4 10             	add    esp,0x10
10000815:	85 c0                	test   eax,eax
10000817:	74 b2                	je     100007cb <copytree(char*, char*)+0xdd>
10000819:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000081c:	83 c0 10             	add    eax,0x10
1000081f:	83 ec 08             	sub    esp,0x8
10000822:	68 52 af 00 10       	push   0x1000af52	10000823: R_386_32	.text
10000827:	50                   	push   eax
10000828:	e8 fc ff ff ff       	call   10000829 <copytree(char*, char*)+0x13b>	10000829: R_386_PC32	strcmp
1000082d:	83 c4 10             	add    esp,0x10
10000830:	85 c0                	test   eax,eax
10000832:	74 97                	je     100007cb <copytree(char*, char*)+0xdd>
10000834:	83 ec 08             	sub    esp,0x8
10000837:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000083a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000083d:	e8 fc ff ff ff       	call   1000083e <copytree(char*, char*)+0x150>	1000083e: R_386_PC32	strcpy
10000842:	83 c4 10             	add    esp,0x10
10000845:	83 ec 08             	sub    esp,0x8
10000848:	68 55 af 00 10       	push   0x1000af55	10000849: R_386_32	.text
1000084d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000850:	e8 fc ff ff ff       	call   10000851 <copytree(char*, char*)+0x163>	10000851: R_386_PC32	strcat
10000855:	83 c4 10             	add    esp,0x10
10000858:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000085b:	83 c0 10             	add    eax,0x10
1000085e:	83 ec 08             	sub    esp,0x8
10000861:	50                   	push   eax
10000862:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000865:	e8 fc ff ff ff       	call   10000866 <copytree(char*, char*)+0x178>	10000866: R_386_PC32	strcat
1000086a:	83 c4 10             	add    esp,0x10
1000086d:	83 ec 08             	sub    esp,0x8
10000870:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000873:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000876:	e8 fc ff ff ff       	call   10000877 <copytree(char*, char*)+0x189>	10000877: R_386_PC32	strcpy
1000087b:	83 c4 10             	add    esp,0x10
1000087e:	83 ec 08             	sub    esp,0x8
10000881:	68 55 af 00 10       	push   0x1000af55	10000882: R_386_32	.text
10000886:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000889:	e8 fc ff ff ff       	call   1000088a <copytree(char*, char*)+0x19c>	1000088a: R_386_PC32	strcat
1000088e:	83 c4 10             	add    esp,0x10
10000891:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000894:	83 c0 10             	add    eax,0x10
10000897:	83 ec 08             	sub    esp,0x8
1000089a:	50                   	push   eax
1000089b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000089e:	e8 fc ff ff ff       	call   1000089f <copytree(char*, char*)+0x1b1>	1000089f: R_386_PC32	strcat
100008a3:	83 c4 10             	add    esp,0x10
100008a6:	83 ec 04             	sub    esp,0x4
100008a9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100008af:	68 71 af 00 10       	push   0x1000af71	100008b0: R_386_32	.text
100008b4:	e8 fc ff ff ff       	call   100008b5 <copytree(char*, char*)+0x1c7>	100008b5: R_386_PC32	Dbg::kprintf(char const*, ...)
100008b9:	83 c4 10             	add    esp,0x10
100008bc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100008bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
100008c2:	83 e0 02             	and    eax,0x2
100008c5:	85 c0                	test   eax,eax
100008c7:	74 47                	je     10000910 <copytree(char*, char*)+0x222>
100008c9:	83 ec 08             	sub    esp,0x8
100008cc:	68 c0 01 00 00       	push   0x1c0
100008d1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008d4:	e8 fc ff ff ff       	call   100008d5 <copytree(char*, char*)+0x1e7>	100008d5: R_386_PC32	mkdir(char const*, int)
100008d9:	83 c4 10             	add    esp,0x10
100008dc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100008df:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100008e3:	74 15                	je     100008fa <copytree(char*, char*)+0x20c>
100008e5:	83 ec 0c             	sub    esp,0xc
100008e8:	68 7b af 00 10       	push   0x1000af7b	100008e9: R_386_32	.text
100008ed:	e8 fc ff ff ff       	call   100008ee <copytree(char*, char*)+0x200>	100008ee: R_386_PC32	KePanic(char const*)
100008f2:	83 c4 10             	add    esp,0x10
100008f5:	e9 d1 fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
100008fa:	83 ec 08             	sub    esp,0x8
100008fd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000900:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000903:	e8 fc ff ff ff       	call   10000904 <copytree(char*, char*)+0x216>	10000904: R_386_PC32	copytree(char*, char*)
10000908:	83 c4 10             	add    esp,0x10
1000090b:	e9 bb fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000910:	83 ec 0c             	sub    esp,0xc
10000913:	68 14 01 00 00       	push   0x114
10000918:	e8 fc ff ff ff       	call   10000919 <copytree(char*, char*)+0x22b>	10000919: R_386_PC32	operator new(unsigned long)
1000091d:	83 c4 10             	add    esp,0x10
10000920:	89 c3                	mov    ebx,eax
10000922:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000927:	8b 00                	mov    eax,DWORD PTR [eax]
10000929:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
1000092c:	83 ec 04             	sub    esp,0x4
1000092f:	50                   	push   eax
10000930:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000933:	53                   	push   ebx
10000934:	e8 fc ff ff ff       	call   10000935 <copytree(char*, char*)+0x247>	10000935: R_386_PC32	File::File(char const*, Process*)
10000939:	83 c4 10             	add    esp,0x10
1000093c:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
1000093f:	83 ec 08             	sub    esp,0x8
10000942:	6a 01                	push   0x1
10000944:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000947:	e8 fc ff ff ff       	call   10000948 <copytree(char*, char*)+0x25a>	10000948: R_386_PC32	File::open(FileOpenMode)
1000094c:	83 c4 10             	add    esp,0x10
1000094f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000953:	75 15                	jne    1000096a <copytree(char*, char*)+0x27c>
10000955:	83 ec 0c             	sub    esp,0xc
10000958:	68 8c af 00 10       	push   0x1000af8c	10000959: R_386_32	.text
1000095d:	e8 fc ff ff ff       	call   1000095e <copytree(char*, char*)+0x270>	1000095e: R_386_PC32	KePanic(char const*)
10000962:	83 c4 10             	add    esp,0x10
10000965:	e9 8a 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
1000096a:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
1000096e:	0f 84 57 fe ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000974:	83 ec 0c             	sub    esp,0xc
10000977:	68 14 01 00 00       	push   0x114
1000097c:	e8 fc ff ff ff       	call   1000097d <copytree(char*, char*)+0x28f>	1000097d: R_386_PC32	operator new(unsigned long)
10000981:	83 c4 10             	add    esp,0x10
10000984:	89 c3                	mov    ebx,eax
10000986:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000098b:	8b 00                	mov    eax,DWORD PTR [eax]
1000098d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
10000990:	83 ec 04             	sub    esp,0x4
10000993:	50                   	push   eax
10000994:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000997:	53                   	push   ebx
10000998:	e8 fc ff ff ff       	call   10000999 <copytree(char*, char*)+0x2ab>	10000999: R_386_PC32	File::File(char const*, Process*)
1000099d:	83 c4 10             	add    esp,0x10
100009a0:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
100009a3:	83 ec 08             	sub    esp,0x8
100009a6:	6a 12                	push   0x12
100009a8:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009ab:	e8 fc ff ff ff       	call   100009ac <copytree(char*, char*)+0x2be>	100009ac: R_386_PC32	File::open(FileOpenMode)
100009b0:	83 c4 10             	add    esp,0x10
100009b3:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
100009b7:	75 23                	jne    100009dc <copytree(char*, char*)+0x2ee>
100009b9:	83 ec 0c             	sub    esp,0xc
100009bc:	68 8c af 00 10       	push   0x1000af8c	100009bd: R_386_32	.text
100009c1:	e8 fc ff ff ff       	call   100009c2 <copytree(char*, char*)+0x2d4>	100009c2: R_386_PC32	KePanic(char const*)
100009c6:	83 c4 10             	add    esp,0x10
100009c9:	83 ec 0c             	sub    esp,0xc
100009cc:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009cf:	e8 fc ff ff ff       	call   100009d0 <copytree(char*, char*)+0x2e2>	100009d0: R_386_PC32	File::close()
100009d4:	83 c4 10             	add    esp,0x10
100009d7:	e9 18 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
100009dc:	83 ec 0c             	sub    esp,0xc
100009df:	68 00 10 00 00       	push   0x1000
100009e4:	e8 fc ff ff ff       	call   100009e5 <copytree(char*, char*)+0x2f7>	100009e5: R_386_PC32	malloc
100009e9:	83 c4 10             	add    esp,0x10
100009ec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100009ef:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
100009f3:	75 31                	jne    10000a26 <copytree(char*, char*)+0x338>
100009f5:	83 ec 0c             	sub    esp,0xc
100009f8:	68 9b af 00 10       	push   0x1000af9b	100009f9: R_386_32	.text
100009fd:	e8 fc ff ff ff       	call   100009fe <copytree(char*, char*)+0x310>	100009fe: R_386_PC32	KePanic(char const*)
10000a02:	83 c4 10             	add    esp,0x10
10000a05:	83 ec 0c             	sub    esp,0xc
10000a08:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000a0b:	e8 fc ff ff ff       	call   10000a0c <copytree(char*, char*)+0x31e>	10000a0c: R_386_PC32	free
10000a10:	83 c4 10             	add    esp,0x10
10000a13:	83 ec 0c             	sub    esp,0xc
10000a16:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000a19:	e8 fc ff ff ff       	call   10000a1a <copytree(char*, char*)+0x32c>	10000a1a: R_386_PC32	free
10000a1e:	83 c4 10             	add    esp,0x10
10000a21:	e9 1c 01 00 00       	jmp    10000b42 <copytree(char*, char*)+0x454>
10000a26:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000a29:	8b 00                	mov    eax,DWORD PTR [eax]
10000a2b:	83 c0 0c             	add    eax,0xc
10000a2e:	8b 00                	mov    eax,DWORD PTR [eax]
10000a30:	83 ec 0c             	sub    esp,0xc
10000a33:	8d 95 b4 fe ff ff    	lea    edx,[ebp-0x14c]
10000a39:	52                   	push   edx
10000a3a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a3d:	6a 00                	push   0x0
10000a3f:	68 00 10 00 00       	push   0x1000
10000a44:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000a47:	ff d0                	call   eax
10000a49:	83 c4 20             	add    esp,0x20
10000a4c:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000a4f:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000a53:	75 37                	jne    10000a8c <copytree(char*, char*)+0x39e>
10000a55:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a58:	8b 00                	mov    eax,DWORD PTR [eax]
10000a5a:	83 c0 10             	add    eax,0x10
10000a5d:	8b 08                	mov    ecx,DWORD PTR [eax]
10000a5f:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a65:	99                   	cdq    
10000a66:	83 ec 0c             	sub    esp,0xc
10000a69:	8d 9d b0 fe ff ff    	lea    ebx,[ebp-0x150]
10000a6f:	53                   	push   ebx
10000a70:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a73:	52                   	push   edx
10000a74:	50                   	push   eax
10000a75:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000a78:	ff d1                	call   ecx
10000a7a:	83 c4 20             	add    esp,0x20
10000a7d:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a83:	3d 00 10 00 00       	cmp    eax,0x1000
10000a88:	75 05                	jne    10000a8f <copytree(char*, char*)+0x3a1>
10000a8a:	eb 9a                	jmp    10000a26 <copytree(char*, char*)+0x338>
10000a8c:	90                   	nop
10000a8d:	eb 01                	jmp    10000a90 <copytree(char*, char*)+0x3a2>
10000a8f:	90                   	nop
10000a90:	83 ec 0c             	sub    esp,0xc
10000a93:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a96:	e8 fc ff ff ff       	call   10000a97 <copytree(char*, char*)+0x3a9>	10000a97: R_386_PC32	free
10000a9b:	83 c4 10             	add    esp,0x10
10000a9e:	83 ec 0c             	sub    esp,0xc
10000aa1:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000aa4:	e8 fc ff ff ff       	call   10000aa5 <copytree(char*, char*)+0x3b7>	10000aa5: R_386_PC32	File::close()
10000aa9:	83 c4 10             	add    esp,0x10
10000aac:	83 ec 0c             	sub    esp,0xc
10000aaf:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000ab2:	e8 fc ff ff ff       	call   10000ab3 <copytree(char*, char*)+0x3c5>	10000ab3: R_386_PC32	File::close()
10000ab7:	83 c4 10             	add    esp,0x10
10000aba:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000abe:	74 15                	je     10000ad5 <copytree(char*, char*)+0x3e7>
10000ac0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000ac3:	8b 00                	mov    eax,DWORD PTR [eax]
10000ac5:	83 c0 08             	add    eax,0x8
10000ac8:	8b 00                	mov    eax,DWORD PTR [eax]
10000aca:	83 ec 0c             	sub    esp,0xc
10000acd:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ad0:	ff d0                	call   eax
10000ad2:	83 c4 10             	add    esp,0x10
10000ad5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
10000ad9:	0f 84 ec fc ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000adf:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000ae2:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae4:	83 c0 08             	add    eax,0x8
10000ae7:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae9:	83 ec 0c             	sub    esp,0xc
10000aec:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000aef:	ff d0                	call   eax
10000af1:	83 c4 10             	add    esp,0x10
10000af4:	e9 d2 fc ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000af9:	90                   	nop
10000afa:	83 ec 0c             	sub    esp,0xc
10000afd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000b00:	e8 fc ff ff ff       	call   10000b01 <copytree(char*, char*)+0x413>	10000b01: R_386_PC32	free
10000b05:	83 c4 10             	add    esp,0x10
10000b08:	83 ec 0c             	sub    esp,0xc
10000b0b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000b0e:	e8 fc ff ff ff       	call   10000b0f <copytree(char*, char*)+0x421>	10000b0f: R_386_PC32	free
10000b13:	83 c4 10             	add    esp,0x10
10000b16:	83 ec 0c             	sub    esp,0xc
10000b19:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b1c:	e8 fc ff ff ff       	call   10000b1d <copytree(char*, char*)+0x42f>	10000b1d: R_386_PC32	Directory::close()
10000b21:	83 c4 10             	add    esp,0x10
10000b24:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000b28:	74 18                	je     10000b42 <copytree(char*, char*)+0x454>
10000b2a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10000b2d:	8b 00                	mov    eax,DWORD PTR [eax]
10000b2f:	83 c0 08             	add    eax,0x8
10000b32:	8b 00                	mov    eax,DWORD PTR [eax]
10000b34:	83 ec 0c             	sub    esp,0xc
10000b37:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b3a:	ff d0                	call   eax
10000b3c:	83 c4 10             	add    esp,0x10
10000b3f:	eb 01                	jmp    10000b42 <copytree(char*, char*)+0x454>
10000b41:	90                   	nop
10000b42:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000b45:	c9                   	leave  
10000b46:	c3                   	ret    

10000b47 <backupTree(char*, unsigned short)>:
10000b47:	55                   	push   ebp
10000b48:	89 e5                	mov    ebp,esp
10000b4a:	57                   	push   edi
10000b4b:	56                   	push   esi
10000b4c:	53                   	push   ebx
10000b4d:	81 ec 8c 12 00 00    	sub    esp,0x128c
10000b53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000b56:	66 89 85 74 ed ff ff 	mov    WORD PTR [ebp-0x128c],ax
10000b5d:	83 ec 0c             	sub    esp,0xc
10000b60:	68 90 01 00 00       	push   0x190
10000b65:	e8 fc ff ff ff       	call   10000b66 <backupTree(char*, unsigned short)+0x1f>	10000b66: R_386_PC32	malloc
10000b6a:	83 c4 10             	add    esp,0x10
10000b6d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10000b70:	83 ec 04             	sub    esp,0x4
10000b73:	68 90 01 00 00       	push   0x190
10000b78:	6a 00                	push   0x0
10000b7a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000b7d:	e8 fc ff ff ff       	call   10000b7e <backupTree(char*, unsigned short)+0x37>	10000b7e: R_386_PC32	memset
10000b82:	83 c4 10             	add    esp,0x10
10000b85:	8d 85 a8 fe ff ff    	lea    eax,[ebp-0x158]
10000b8b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10000b8e:	83 ec 0c             	sub    esp,0xc
10000b91:	68 14 01 00 00       	push   0x114
10000b96:	e8 fc ff ff ff       	call   10000b97 <backupTree(char*, unsigned short)+0x50>	10000b97: R_386_PC32	operator new(unsigned long)
10000b9b:	83 c4 10             	add    esp,0x10
10000b9e:	89 c3                	mov    ebx,eax
10000ba0:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ba5:	8b 00                	mov    eax,DWORD PTR [eax]
10000ba7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
10000baa:	83 ec 04             	sub    esp,0x4
10000bad:	50                   	push   eax
10000bae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bb1:	53                   	push   ebx
10000bb2:	e8 fc ff ff ff       	call   10000bb3 <backupTree(char*, unsigned short)+0x6c>	10000bb3: R_386_PC32	Directory::Directory(char const*, Process*)
10000bb7:	83 c4 10             	add    esp,0x10
10000bba:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10000bbd:	83 ec 0c             	sub    esp,0xc
10000bc0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bc3:	e8 fc ff ff ff       	call   10000bc4 <backupTree(char*, unsigned short)+0x7d>	10000bc4: R_386_PC32	Directory::open()
10000bc8:	83 c4 10             	add    esp,0x10
10000bcb:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000bce:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000bd2:	74 34                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000bd4:	83 ec 0c             	sub    esp,0xc
10000bd7:	68 57 af 00 10       	push   0x1000af57	10000bd8: R_386_32	.text
10000bdc:	e8 fc ff ff ff       	call   10000bdd <backupTree(char*, unsigned short)+0x96>	10000bdd: R_386_PC32	Dbg::kprintf(char const*, ...)
10000be1:	83 c4 10             	add    esp,0x10
10000be4:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
10000be8:	0f 84 c8 05 00 00    	je     100011b6 <backupTree(char*, unsigned short)+0x66f>
10000bee:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000bf1:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf3:	83 c0 08             	add    eax,0x8
10000bf6:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf8:	83 ec 0c             	sub    esp,0xc
10000bfb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bfe:	ff d0                	call   eax
10000c00:	83 c4 10             	add    esp,0x10
10000c03:	e9 af 05 00 00       	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
10000c08:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000c0b:	8b 00                	mov    eax,DWORD PTR [eax]
10000c0d:	83 c0 0c             	add    eax,0xc
10000c10:	8b 00                	mov    eax,DWORD PTR [eax]
10000c12:	83 ec 0c             	sub    esp,0xc
10000c15:	8d 95 a4 fe ff ff    	lea    edx,[ebp-0x15c]
10000c1b:	52                   	push   edx
10000c1c:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000c1f:	6a 00                	push   0x0
10000c21:	68 10 01 00 00       	push   0x110
10000c26:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000c29:	ff d0                	call   eax
10000c2b:	83 c4 20             	add    esp,0x20
10000c2e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000c31:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
10000c35:	0f 85 41 05 00 00    	jne    1000117c <backupTree(char*, unsigned short)+0x635>
10000c3b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c3e:	83 c0 10             	add    eax,0x10
10000c41:	83 ec 08             	sub    esp,0x8
10000c44:	68 50 af 00 10       	push   0x1000af50	10000c45: R_386_32	.text
10000c49:	50                   	push   eax
10000c4a:	e8 fc ff ff ff       	call   10000c4b <backupTree(char*, unsigned short)+0x104>	10000c4b: R_386_PC32	strcmp
10000c4f:	83 c4 10             	add    esp,0x10
10000c52:	85 c0                	test   eax,eax
10000c54:	74 b2                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c56:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c59:	83 c0 10             	add    eax,0x10
10000c5c:	83 ec 08             	sub    esp,0x8
10000c5f:	68 52 af 00 10       	push   0x1000af52	10000c60: R_386_32	.text
10000c64:	50                   	push   eax
10000c65:	e8 fc ff ff ff       	call   10000c66 <backupTree(char*, unsigned short)+0x11f>	10000c66: R_386_PC32	strcmp
10000c6a:	83 c4 10             	add    esp,0x10
10000c6d:	85 c0                	test   eax,eax
10000c6f:	74 97                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c71:	83 ec 08             	sub    esp,0x8
10000c74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c77:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c7a:	e8 fc ff ff ff       	call   10000c7b <backupTree(char*, unsigned short)+0x134>	10000c7b: R_386_PC32	strcpy
10000c7f:	83 c4 10             	add    esp,0x10
10000c82:	83 ec 08             	sub    esp,0x8
10000c85:	68 55 af 00 10       	push   0x1000af55	10000c86: R_386_32	.text
10000c8a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c8d:	e8 fc ff ff ff       	call   10000c8e <backupTree(char*, unsigned short)+0x147>	10000c8e: R_386_PC32	strcat
10000c92:	83 c4 10             	add    esp,0x10
10000c95:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c98:	83 c0 10             	add    eax,0x10
10000c9b:	83 ec 08             	sub    esp,0x8
10000c9e:	50                   	push   eax
10000c9f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ca2:	e8 fc ff ff ff       	call   10000ca3 <backupTree(char*, unsigned short)+0x15c>	10000ca3: R_386_PC32	strcat
10000ca7:	83 c4 10             	add    esp,0x10
10000caa:	66 c7 45 e6 bc ad    	mov    WORD PTR [ebp-0x1a],0xadbc
10000cb0:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10000cb7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000cba:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cbd:	01 d0                	add    eax,edx
10000cbf:	83 c0 10             	add    eax,0x10
10000cc2:	8a 00                	mov    al,BYTE PTR [eax]
10000cc4:	84 c0                	test   al,al
10000cc6:	74 3c                	je     10000d04 <backupTree(char*, unsigned short)+0x1bd>
10000cc8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000ccb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cce:	01 d0                	add    eax,edx
10000cd0:	83 c0 10             	add    eax,0x10
10000cd3:	8a 00                	mov    al,BYTE PTR [eax]
10000cd5:	66 0f be d0          	movsx  dx,al
10000cd9:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000cdd:	31 d0                	xor    eax,edx
10000cdf:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000ce3:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000ce7:	c1 e0 03             	shl    eax,0x3
10000cea:	89 c2                	mov    edx,eax
10000cec:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000cf0:	c1 f8 0d             	sar    eax,0xd
10000cf3:	09 d0                	or     eax,edx
10000cf5:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000cf9:	66 81 6d e6 f1 06    	sub    WORD PTR [ebp-0x1a],0x6f1
10000cff:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10000d02:	eb b3                	jmp    10000cb7 <backupTree(char*, unsigned short)+0x170>
10000d04:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d07:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000d0a:	83 e0 02             	and    eax,0x2
10000d0d:	85 c0                	test   eax,eax
10000d0f:	74 37                	je     10000d48 <backupTree(char*, unsigned short)+0x201>
10000d11:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d14:	83 c0 10             	add    eax,0x10
10000d17:	83 ec 08             	sub    esp,0x8
10000d1a:	68 a5 af 00 10       	push   0x1000afa5	10000d1b: R_386_32	.text
10000d1f:	50                   	push   eax
10000d20:	e8 fc ff ff ff       	call   10000d21 <backupTree(char*, unsigned short)+0x1da>	10000d21: R_386_PC32	strcmp
10000d25:	83 c4 10             	add    esp,0x10
10000d28:	85 c0                	test   eax,eax
10000d2a:	0f 84 d8 fe ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d30:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000d34:	83 ec 08             	sub    esp,0x8
10000d37:	50                   	push   eax
10000d38:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000d3b:	e8 fc ff ff ff       	call   10000d3c <backupTree(char*, unsigned short)+0x1f5>	10000d3c: R_386_PC32	backupTree(char*, unsigned short)
10000d40:	83 c4 10             	add    esp,0x10
10000d43:	e9 c0 fe ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d48:	c6 85 a3 fe ff ff 00 	mov    BYTE PTR [ebp-0x15d],0x0
10000d4f:	83 ec 08             	sub    esp,0x8
10000d52:	68 ac af 00 10       	push   0x1000afac	10000d53: R_386_32	.text
10000d57:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d5d:	50                   	push   eax
10000d5e:	e8 fc ff ff ff       	call   10000d5f <backupTree(char*, unsigned short)+0x218>	10000d5f: R_386_PC32	strcpy
10000d63:	83 c4 10             	add    esp,0x10
10000d66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d69:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10000d6c:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000d72:	83 ec 08             	sub    esp,0x8
10000d75:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000d7b:	50                   	push   eax
10000d7c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d82:	50                   	push   eax
10000d83:	e8 fc ff ff ff       	call   10000d84 <backupTree(char*, unsigned short)+0x23d>	10000d84: R_386_PC32	strcat
10000d88:	83 c4 10             	add    esp,0x10
10000d8b:	83 ec 04             	sub    esp,0x4
10000d8e:	6a 09                	push   0x9
10000d90:	6a 00                	push   0x0
10000d92:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000d98:	50                   	push   eax
10000d99:	e8 fc ff ff ff       	call   10000d9a <backupTree(char*, unsigned short)+0x253>	10000d9a: R_386_PC32	memset
10000d9e:	83 c4 10             	add    esp,0x10
10000da1:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000da4:	83 c0 10             	add    eax,0x10
10000da7:	83 ec 04             	sub    esp,0x4
10000daa:	6a 08                	push   0x8
10000dac:	50                   	push   eax
10000dad:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000db3:	50                   	push   eax
10000db4:	e8 fc ff ff ff       	call   10000db5 <backupTree(char*, unsigned short)+0x26e>	10000db5: R_386_PC32	strncpyxx(char*, char const*, unsigned long)
10000db9:	83 c4 10             	add    esp,0x10
10000dbc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000dc3:	83 7d dc 07          	cmp    DWORD PTR [ebp-0x24],0x7
10000dc7:	0f 8f c5 00 00 00    	jg     10000e92 <backupTree(char*, unsigned short)+0x34b>
10000dcd:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000dd3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000dd6:	01 d0                	add    eax,edx
10000dd8:	8a 00                	mov    al,BYTE PTR [eax]
10000dda:	3c 60                	cmp    al,0x60
10000ddc:	7e 30                	jle    10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000dde:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000de4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000de7:	01 d0                	add    eax,edx
10000de9:	8a 00                	mov    al,BYTE PTR [eax]
10000deb:	3c 7a                	cmp    al,0x7a
10000ded:	7f 1f                	jg     10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000def:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000df5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000df8:	01 d0                	add    eax,edx
10000dfa:	8a 00                	mov    al,BYTE PTR [eax]
10000dfc:	83 e8 20             	sub    eax,0x20
10000dff:	88 c2                	mov    dl,al
10000e01:	8d 8d 99 fe ff ff    	lea    ecx,[ebp-0x167]
10000e07:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e0a:	01 c8                	add    eax,ecx
10000e0c:	88 10                	mov    BYTE PTR [eax],dl
10000e0e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e14:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e17:	01 d0                	add    eax,edx
10000e19:	8a 00                	mov    al,BYTE PTR [eax]
10000e1b:	3c 59                	cmp    al,0x59
10000e1d:	75 0e                	jne    10000e2d <backupTree(char*, unsigned short)+0x2e6>
10000e1f:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e25:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e28:	01 d0                	add    eax,edx
10000e2a:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e2d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e33:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e36:	01 d0                	add    eax,edx
10000e38:	8a 00                	mov    al,BYTE PTR [eax]
10000e3a:	3c 5a                	cmp    al,0x5a
10000e3c:	75 0e                	jne    10000e4c <backupTree(char*, unsigned short)+0x305>
10000e3e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e47:	01 d0                	add    eax,edx
10000e49:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e4c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e52:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e55:	01 d0                	add    eax,edx
10000e57:	8a 00                	mov    al,BYTE PTR [eax]
10000e59:	3c 20                	cmp    al,0x20
10000e5b:	75 0e                	jne    10000e6b <backupTree(char*, unsigned short)+0x324>
10000e5d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e63:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e66:	01 d0                	add    eax,edx
10000e68:	c6 00 59             	mov    BYTE PTR [eax],0x59
10000e6b:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e71:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e74:	01 d0                	add    eax,edx
10000e76:	8a 00                	mov    al,BYTE PTR [eax]
10000e78:	3c 2e                	cmp    al,0x2e
10000e7a:	75 0e                	jne    10000e8a <backupTree(char*, unsigned short)+0x343>
10000e7c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e82:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e85:	01 d0                	add    eax,edx
10000e87:	c6 00 5a             	mov    BYTE PTR [eax],0x5a
10000e8a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10000e8d:	e9 31 ff ff ff       	jmp    10000dc3 <backupTree(char*, unsigned short)+0x27c>
10000e92:	83 ec 08             	sub    esp,0x8
10000e95:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000e9b:	50                   	push   eax
10000e9c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ea2:	50                   	push   eax
10000ea3:	e8 fc ff ff ff       	call   10000ea4 <backupTree(char*, unsigned short)+0x35d>	10000ea4: R_386_PC32	strcat
10000ea8:	83 c4 10             	add    esp,0x10
10000eab:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000eae:	83 c0 10             	add    eax,0x10
10000eb1:	83 ec 0c             	sub    esp,0xc
10000eb4:	50                   	push   eax
10000eb5:	e8 fc ff ff ff       	call   10000eb6 <backupTree(char*, unsigned short)+0x36f>	10000eb6: R_386_PC32	strlen
10000eba:	83 c4 10             	add    esp,0x10
10000ebd:	83 c0 41             	add    eax,0x41
10000ec0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000ec6:	83 ec 08             	sub    esp,0x8
10000ec9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000ecf:	50                   	push   eax
10000ed0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ed6:	50                   	push   eax
10000ed7:	e8 fc ff ff ff       	call   10000ed8 <backupTree(char*, unsigned short)+0x391>	10000ed8: R_386_PC32	strcat
10000edc:	83 c4 10             	add    esp,0x10
10000edf:	83 ec 08             	sub    esp,0x8
10000ee2:	68 50 af 00 10       	push   0x1000af50	10000ee3: R_386_32	.text
10000ee7:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000eed:	50                   	push   eax
10000eee:	e8 fc ff ff ff       	call   10000eef <backupTree(char*, unsigned short)+0x3a8>	10000eef: R_386_PC32	strcat
10000ef3:	83 c4 10             	add    esp,0x10
10000ef6:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000efa:	25 65 07 00 00       	and    eax,0x765
10000eff:	33 85 74 ed ff ff    	xor    eax,DWORD PTR [ebp-0x128c]
10000f05:	66 89 45 c6          	mov    WORD PTR [ebp-0x3a],ax
10000f09:	8d 85 88 fe ff ff    	lea    eax,[ebp-0x178]
10000f0f:	bb c5 af 00 10       	mov    ebx,0x1000afc5	10000f10: R_386_32	.text
10000f14:	ba 11 00 00 00       	mov    edx,0x11
10000f19:	89 c7                	mov    edi,eax
10000f1b:	89 de                	mov    esi,ebx
10000f1d:	89 d1                	mov    ecx,edx
10000f1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000f21:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f25:	83 e0 0f             	and    eax,0xf
10000f28:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f2f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f35:	83 ec 08             	sub    esp,0x8
10000f38:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f3e:	50                   	push   eax
10000f3f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f45:	50                   	push   eax
10000f46:	e8 fc ff ff ff       	call   10000f47 <backupTree(char*, unsigned short)+0x400>	10000f47: R_386_PC32	strcat
10000f4b:	83 c4 10             	add    esp,0x10
10000f4e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f52:	c1 f8 04             	sar    eax,0x4
10000f55:	83 e0 0f             	and    eax,0xf
10000f58:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f5f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f65:	83 ec 08             	sub    esp,0x8
10000f68:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f6e:	50                   	push   eax
10000f6f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f75:	50                   	push   eax
10000f76:	e8 fc ff ff ff       	call   10000f77 <backupTree(char*, unsigned short)+0x430>	10000f77: R_386_PC32	strcat
10000f7b:	83 c4 10             	add    esp,0x10
10000f7e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f82:	c1 f8 08             	sar    eax,0x8
10000f85:	83 e0 0f             	and    eax,0xf
10000f88:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f8f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f95:	83 ec 08             	sub    esp,0x8
10000f98:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f9e:	50                   	push   eax
10000f9f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fa5:	50                   	push   eax
10000fa6:	e8 fc ff ff ff       	call   10000fa7 <backupTree(char*, unsigned short)+0x460>	10000fa7: R_386_PC32	strcat
10000fab:	83 c4 10             	add    esp,0x10
10000fae:	66 8b 45 c6          	mov    ax,WORD PTR [ebp-0x3a]
10000fb2:	66 c1 e8 0c          	shr    ax,0xc
10000fb6:	0f b7 c0             	movzx  eax,ax
10000fb9:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000fc0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000fc6:	83 ec 08             	sub    esp,0x8
10000fc9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000fcf:	50                   	push   eax
10000fd0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fd6:	50                   	push   eax
10000fd7:	e8 fc ff ff ff       	call   10000fd8 <backupTree(char*, unsigned short)+0x491>	10000fd8: R_386_PC32	strcat
10000fdc:	83 c4 10             	add    esp,0x10
10000fdf:	83 ec 0c             	sub    esp,0xc
10000fe2:	68 14 01 00 00       	push   0x114
10000fe7:	e8 fc ff ff ff       	call   10000fe8 <backupTree(char*, unsigned short)+0x4a1>	10000fe8: R_386_PC32	operator new(unsigned long)
10000fec:	83 c4 10             	add    esp,0x10
10000fef:	89 c3                	mov    ebx,eax
10000ff1:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ff6:	8b 00                	mov    eax,DWORD PTR [eax]
10000ff8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
10000ffb:	83 ec 04             	sub    esp,0x4
10000ffe:	50                   	push   eax
10000fff:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001002:	53                   	push   ebx
10001003:	e8 fc ff ff ff       	call   10001004 <backupTree(char*, unsigned short)+0x4bd>	10001004: R_386_PC32	File::File(char const*, Process*)
10001008:	83 c4 10             	add    esp,0x10
1000100b:	89 5d c0             	mov    DWORD PTR [ebp-0x40],ebx
1000100e:	83 ec 08             	sub    esp,0x8
10001011:	6a 01                	push   0x1
10001013:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001016:	e8 fc ff ff ff       	call   10001017 <backupTree(char*, unsigned short)+0x4d0>	10001017: R_386_PC32	File::open(FileOpenMode)
1000101b:	83 c4 10             	add    esp,0x10
1000101e:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001022:	75 15                	jne    10001039 <backupTree(char*, unsigned short)+0x4f2>
10001024:	83 ec 0c             	sub    esp,0xc
10001027:	68 8c af 00 10       	push   0x1000af8c	10001028: R_386_32	.text
1000102c:	e8 fc ff ff ff       	call   1000102d <backupTree(char*, unsigned short)+0x4e6>	1000102d: R_386_PC32	KePanic(char const*)
10001031:	83 c4 10             	add    esp,0x10
10001034:	e9 3e 01 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
10001039:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
1000103d:	0f 84 c5 fb ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001043:	83 ec 0c             	sub    esp,0xc
10001046:	68 14 01 00 00       	push   0x114
1000104b:	e8 fc ff ff ff       	call   1000104c <backupTree(char*, unsigned short)+0x505>	1000104c: R_386_PC32	operator new(unsigned long)
10001050:	83 c4 10             	add    esp,0x10
10001053:	89 c3                	mov    ebx,eax
10001055:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000105a:	8b 00                	mov    eax,DWORD PTR [eax]
1000105c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
1000105f:	83 ec 04             	sub    esp,0x4
10001062:	50                   	push   eax
10001063:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10001069:	50                   	push   eax
1000106a:	53                   	push   ebx
1000106b:	e8 fc ff ff ff       	call   1000106c <backupTree(char*, unsigned short)+0x525>	1000106c: R_386_PC32	File::File(char const*, Process*)
10001070:	83 c4 10             	add    esp,0x10
10001073:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
10001076:	83 ec 08             	sub    esp,0x8
10001079:	6a 12                	push   0x12
1000107b:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
1000107e:	e8 fc ff ff ff       	call   1000107f <backupTree(char*, unsigned short)+0x538>	1000107f: R_386_PC32	File::open(FileOpenMode)
10001083:	83 c4 10             	add    esp,0x10
10001086:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000108a:	75 23                	jne    100010af <backupTree(char*, unsigned short)+0x568>
1000108c:	83 ec 0c             	sub    esp,0xc
1000108f:	68 8c af 00 10       	push   0x1000af8c	10001090: R_386_32	.text
10001094:	e8 fc ff ff ff       	call   10001095 <backupTree(char*, unsigned short)+0x54e>	10001095: R_386_PC32	KePanic(char const*)
10001099:	83 c4 10             	add    esp,0x10
1000109c:	83 ec 0c             	sub    esp,0xc
1000109f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
100010a2:	e8 fc ff ff ff       	call   100010a3 <backupTree(char*, unsigned short)+0x55c>	100010a3: R_386_PC32	File::close()
100010a7:	83 c4 10             	add    esp,0x10
100010aa:	e9 c8 00 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
100010af:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100010b2:	8b 00                	mov    eax,DWORD PTR [eax]
100010b4:	83 c0 0c             	add    eax,0xc
100010b7:	8b 00                	mov    eax,DWORD PTR [eax]
100010b9:	83 ec 0c             	sub    esp,0xc
100010bc:	8d 95 84 fe ff ff    	lea    edx,[ebp-0x17c]
100010c2:	52                   	push   edx
100010c3:	8d 95 80 ee ff ff    	lea    edx,[ebp-0x1180]
100010c9:	52                   	push   edx
100010ca:	6a 00                	push   0x0
100010cc:	68 00 10 00 00       	push   0x1000
100010d1:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100010d4:	ff d0                	call   eax
100010d6:	83 c4 20             	add    esp,0x20
100010d9:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100010dc:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100010e0:	75 3b                	jne    1000111d <backupTree(char*, unsigned short)+0x5d6>
100010e2:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100010e5:	8b 00                	mov    eax,DWORD PTR [eax]
100010e7:	83 c0 10             	add    eax,0x10
100010ea:	8b 08                	mov    ecx,DWORD PTR [eax]
100010ec:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
100010f2:	99                   	cdq    
100010f3:	83 ec 0c             	sub    esp,0xc
100010f6:	8d 9d 80 fe ff ff    	lea    ebx,[ebp-0x180]
100010fc:	53                   	push   ebx
100010fd:	8d 9d 80 ee ff ff    	lea    ebx,[ebp-0x1180]
10001103:	53                   	push   ebx
10001104:	52                   	push   edx
10001105:	50                   	push   eax
10001106:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001109:	ff d1                	call   ecx
1000110b:	83 c4 20             	add    esp,0x20
1000110e:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
10001114:	3d 00 10 00 00       	cmp    eax,0x1000
10001119:	75 05                	jne    10001120 <backupTree(char*, unsigned short)+0x5d9>
1000111b:	eb 92                	jmp    100010af <backupTree(char*, unsigned short)+0x568>
1000111d:	90                   	nop
1000111e:	eb 01                	jmp    10001121 <backupTree(char*, unsigned short)+0x5da>
10001120:	90                   	nop
10001121:	83 ec 0c             	sub    esp,0xc
10001124:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001127:	e8 fc ff ff ff       	call   10001128 <backupTree(char*, unsigned short)+0x5e1>	10001128: R_386_PC32	File::close()
1000112c:	83 c4 10             	add    esp,0x10
1000112f:	83 ec 0c             	sub    esp,0xc
10001132:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001135:	e8 fc ff ff ff       	call   10001136 <backupTree(char*, unsigned short)+0x5ef>	10001136: R_386_PC32	File::close()
1000113a:	83 c4 10             	add    esp,0x10
1000113d:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001141:	74 15                	je     10001158 <backupTree(char*, unsigned short)+0x611>
10001143:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001146:	8b 00                	mov    eax,DWORD PTR [eax]
10001148:	83 c0 08             	add    eax,0x8
1000114b:	8b 00                	mov    eax,DWORD PTR [eax]
1000114d:	83 ec 0c             	sub    esp,0xc
10001150:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001153:	ff d0                	call   eax
10001155:	83 c4 10             	add    esp,0x10
10001158:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000115c:	0f 84 a6 fa ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001162:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10001165:	8b 00                	mov    eax,DWORD PTR [eax]
10001167:	83 c0 08             	add    eax,0x8
1000116a:	8b 00                	mov    eax,DWORD PTR [eax]
1000116c:	83 ec 0c             	sub    esp,0xc
1000116f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001172:	ff d0                	call   eax
10001174:	83 c4 10             	add    esp,0x10
10001177:	e9 8c fa ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
1000117c:	90                   	nop
1000117d:	83 ec 0c             	sub    esp,0xc
10001180:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001183:	e8 fc ff ff ff       	call   10001184 <backupTree(char*, unsigned short)+0x63d>	10001184: R_386_PC32	free
10001188:	83 c4 10             	add    esp,0x10
1000118b:	83 ec 0c             	sub    esp,0xc
1000118e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10001191:	e8 fc ff ff ff       	call   10001192 <backupTree(char*, unsigned short)+0x64b>	10001192: R_386_PC32	Directory::close()
10001196:	83 c4 10             	add    esp,0x10
10001199:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
1000119d:	74 18                	je     100011b7 <backupTree(char*, unsigned short)+0x670>
1000119f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100011a2:	8b 00                	mov    eax,DWORD PTR [eax]
100011a4:	83 c0 08             	add    eax,0x8
100011a7:	8b 00                	mov    eax,DWORD PTR [eax]
100011a9:	83 ec 0c             	sub    esp,0xc
100011ac:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100011af:	ff d0                	call   eax
100011b1:	83 c4 10             	add    esp,0x10
100011b4:	eb 01                	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
100011b6:	90                   	nop
100011b7:	8d 65 f4             	lea    esp,[ebp-0xc]
100011ba:	5b                   	pop    ebx
100011bb:	5e                   	pop    esi
100011bc:	5f                   	pop    edi
100011bd:	5d                   	pop    ebp
100011be:	c3                   	ret    

100011bf <createUser(char const*)>:
100011bf:	55                   	push   ebp
100011c0:	89 e5                	mov    ebp,esp
100011c2:	81 ec 08 01 00 00    	sub    esp,0x108
100011c8:	68 d6 af 00 10       	push   0x1000afd6	100011c9: R_386_32	.text
100011cd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011d3:	50                   	push   eax
100011d4:	e8 fc ff ff ff       	call   100011d5 <createUser(char const*)+0x16>	100011d5: R_386_PC32	strcpy
100011d9:	83 c4 08             	add    esp,0x8
100011dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100011df:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011e5:	50                   	push   eax
100011e6:	e8 fc ff ff ff       	call   100011e7 <createUser(char const*)+0x28>	100011e7: R_386_PC32	strcat
100011eb:	83 c4 08             	add    esp,0x8
100011ee:	83 ec 08             	sub    esp,0x8
100011f1:	68 c0 01 00 00       	push   0x1c0
100011f6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011fc:	50                   	push   eax
100011fd:	e8 fc ff ff ff       	call   100011fe <createUser(char const*)+0x3f>	100011fe: R_386_PC32	mkdir(char const*, int)
10001202:	83 c4 10             	add    esp,0x10
10001205:	83 ec 08             	sub    esp,0x8
10001208:	68 e0 af 00 10       	push   0x1000afe0	10001209: R_386_32	.text
1000120d:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001213:	50                   	push   eax
10001214:	e8 fc ff ff ff       	call   10001215 <createUser(char const*)+0x56>	10001215: R_386_PC32	strcat
10001219:	83 c4 10             	add    esp,0x10
1000121c:	83 ec 08             	sub    esp,0x8
1000121f:	68 c0 01 00 00       	push   0x1c0
10001224:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000122a:	50                   	push   eax
1000122b:	e8 fc ff ff ff       	call   1000122c <createUser(char const*)+0x6d>	1000122c: R_386_PC32	mkdir(char const*, int)
10001230:	83 c4 10             	add    esp,0x10
10001233:	83 ec 08             	sub    esp,0x8
10001236:	68 d6 af 00 10       	push   0x1000afd6	10001237: R_386_32	.text
1000123b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001241:	50                   	push   eax
10001242:	e8 fc ff ff ff       	call   10001243 <createUser(char const*)+0x84>	10001243: R_386_PC32	strcpy
10001247:	83 c4 10             	add    esp,0x10
1000124a:	83 ec 08             	sub    esp,0x8
1000124d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001250:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001256:	50                   	push   eax
10001257:	e8 fc ff ff ff       	call   10001258 <createUser(char const*)+0x99>	10001258: R_386_PC32	strcat
1000125c:	83 c4 10             	add    esp,0x10
1000125f:	83 ec 08             	sub    esp,0x8
10001262:	68 e9 af 00 10       	push   0x1000afe9	10001263: R_386_32	.text
10001267:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000126d:	50                   	push   eax
1000126e:	e8 fc ff ff ff       	call   1000126f <createUser(char const*)+0xb0>	1000126f: R_386_PC32	strcat
10001273:	83 c4 10             	add    esp,0x10
10001276:	83 ec 08             	sub    esp,0x8
10001279:	68 c0 01 00 00       	push   0x1c0
1000127e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001284:	50                   	push   eax
10001285:	e8 fc ff ff ff       	call   10001286 <createUser(char const*)+0xc7>	10001286: R_386_PC32	mkdir(char const*, int)
1000128a:	83 c4 10             	add    esp,0x10
1000128d:	83 ec 08             	sub    esp,0x8
10001290:	68 d6 af 00 10       	push   0x1000afd6	10001291: R_386_32	.text
10001295:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000129b:	50                   	push   eax
1000129c:	e8 fc ff ff ff       	call   1000129d <createUser(char const*)+0xde>	1000129d: R_386_PC32	strcpy
100012a1:	83 c4 10             	add    esp,0x10
100012a4:	83 ec 08             	sub    esp,0x8
100012a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100012aa:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012b0:	50                   	push   eax
100012b1:	e8 fc ff ff ff       	call   100012b2 <createUser(char const*)+0xf3>	100012b2: R_386_PC32	strcat
100012b6:	83 c4 10             	add    esp,0x10
100012b9:	83 ec 08             	sub    esp,0x8
100012bc:	68 f4 af 00 10       	push   0x1000aff4	100012bd: R_386_32	.text
100012c1:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012c7:	50                   	push   eax
100012c8:	e8 fc ff ff ff       	call   100012c9 <createUser(char const*)+0x10a>	100012c9: R_386_PC32	strcat
100012cd:	83 c4 10             	add    esp,0x10
100012d0:	83 ec 08             	sub    esp,0x8
100012d3:	68 c0 01 00 00       	push   0x1c0
100012d8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012de:	50                   	push   eax
100012df:	e8 fc ff ff ff       	call   100012e0 <createUser(char const*)+0x121>	100012e0: R_386_PC32	mkdir(char const*, int)
100012e4:	83 c4 10             	add    esp,0x10
100012e7:	83 ec 08             	sub    esp,0x8
100012ea:	68 d6 af 00 10       	push   0x1000afd6	100012eb: R_386_32	.text
100012ef:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012f5:	50                   	push   eax
100012f6:	e8 fc ff ff ff       	call   100012f7 <createUser(char const*)+0x138>	100012f7: R_386_PC32	strcpy
100012fb:	83 c4 10             	add    esp,0x10
100012fe:	83 ec 08             	sub    esp,0x8
10001301:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001304:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000130a:	50                   	push   eax
1000130b:	e8 fc ff ff ff       	call   1000130c <createUser(char const*)+0x14d>	1000130c: R_386_PC32	strcat
10001310:	83 c4 10             	add    esp,0x10
10001313:	83 ec 08             	sub    esp,0x8
10001316:	68 ff af 00 10       	push   0x1000afff	10001317: R_386_32	.text
1000131b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001321:	50                   	push   eax
10001322:	e8 fc ff ff ff       	call   10001323 <createUser(char const*)+0x164>	10001323: R_386_PC32	strcat
10001327:	83 c4 10             	add    esp,0x10
1000132a:	83 ec 08             	sub    esp,0x8
1000132d:	68 c0 01 00 00       	push   0x1c0
10001332:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001338:	50                   	push   eax
10001339:	e8 fc ff ff ff       	call   1000133a <createUser(char const*)+0x17b>	1000133a: R_386_PC32	mkdir(char const*, int)
1000133e:	83 c4 10             	add    esp,0x10
10001341:	83 ec 08             	sub    esp,0x8
10001344:	68 d6 af 00 10       	push   0x1000afd6	10001345: R_386_32	.text
10001349:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000134f:	50                   	push   eax
10001350:	e8 fc ff ff ff       	call   10001351 <createUser(char const*)+0x192>	10001351: R_386_PC32	strcpy
10001355:	83 c4 10             	add    esp,0x10
10001358:	83 ec 08             	sub    esp,0x8
1000135b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000135e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001364:	50                   	push   eax
10001365:	e8 fc ff ff ff       	call   10001366 <createUser(char const*)+0x1a7>	10001366: R_386_PC32	strcat
1000136a:	83 c4 10             	add    esp,0x10
1000136d:	83 ec 08             	sub    esp,0x8
10001370:	68 09 b0 00 10       	push   0x1000b009	10001371: R_386_32	.text
10001375:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000137b:	50                   	push   eax
1000137c:	e8 fc ff ff ff       	call   1000137d <createUser(char const*)+0x1be>	1000137d: R_386_PC32	strcat
10001381:	83 c4 10             	add    esp,0x10
10001384:	83 ec 08             	sub    esp,0x8
10001387:	68 c0 01 00 00       	push   0x1c0
1000138c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001392:	50                   	push   eax
10001393:	e8 fc ff ff ff       	call   10001394 <createUser(char const*)+0x1d5>	10001394: R_386_PC32	mkdir(char const*, int)
10001398:	83 c4 10             	add    esp,0x10
1000139b:	83 ec 08             	sub    esp,0x8
1000139e:	68 d6 af 00 10       	push   0x1000afd6	1000139f: R_386_32	.text
100013a3:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013a9:	50                   	push   eax
100013aa:	e8 fc ff ff ff       	call   100013ab <createUser(char const*)+0x1ec>	100013ab: R_386_PC32	strcpy
100013af:	83 c4 10             	add    esp,0x10
100013b2:	83 ec 08             	sub    esp,0x8
100013b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100013b8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013be:	50                   	push   eax
100013bf:	e8 fc ff ff ff       	call   100013c0 <createUser(char const*)+0x201>	100013c0: R_386_PC32	strcat
100013c4:	83 c4 10             	add    esp,0x10
100013c7:	83 ec 08             	sub    esp,0x8
100013ca:	68 14 b0 00 10       	push   0x1000b014	100013cb: R_386_32	.text
100013cf:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013d5:	50                   	push   eax
100013d6:	e8 fc ff ff ff       	call   100013d7 <createUser(char const*)+0x218>	100013d7: R_386_PC32	strcat
100013db:	83 c4 10             	add    esp,0x10
100013de:	83 ec 08             	sub    esp,0x8
100013e1:	68 c0 01 00 00       	push   0x1c0
100013e6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013ec:	50                   	push   eax
100013ed:	e8 fc ff ff ff       	call   100013ee <createUser(char const*)+0x22f>	100013ee: R_386_PC32	mkdir(char const*, int)
100013f2:	83 c4 10             	add    esp,0x10
100013f5:	83 ec 08             	sub    esp,0x8
100013f8:	68 d6 af 00 10       	push   0x1000afd6	100013f9: R_386_32	.text
100013fd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001403:	50                   	push   eax
10001404:	e8 fc ff ff ff       	call   10001405 <createUser(char const*)+0x246>	10001405: R_386_PC32	strcpy
10001409:	83 c4 10             	add    esp,0x10
1000140c:	83 ec 08             	sub    esp,0x8
1000140f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001412:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001418:	50                   	push   eax
10001419:	e8 fc ff ff ff       	call   1000141a <createUser(char const*)+0x25b>	1000141a: R_386_PC32	strcat
1000141e:	83 c4 10             	add    esp,0x10
10001421:	83 ec 08             	sub    esp,0x8
10001424:	68 1b b0 00 10       	push   0x1000b01b	10001425: R_386_32	.text
10001429:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000142f:	50                   	push   eax
10001430:	e8 fc ff ff ff       	call   10001431 <createUser(char const*)+0x272>	10001431: R_386_PC32	strcat
10001435:	83 c4 10             	add    esp,0x10
10001438:	83 ec 08             	sub    esp,0x8
1000143b:	68 c0 01 00 00       	push   0x1c0
10001440:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001446:	50                   	push   eax
10001447:	e8 fc ff ff ff       	call   10001448 <createUser(char const*)+0x289>	10001448: R_386_PC32	mkdir(char const*, int)
1000144c:	83 c4 10             	add    esp,0x10
1000144f:	83 ec 08             	sub    esp,0x8
10001452:	68 23 b0 00 10       	push   0x1000b023	10001453: R_386_32	.text
10001457:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000145d:	50                   	push   eax
1000145e:	e8 fc ff ff ff       	call   1000145f <createUser(char const*)+0x2a0>	1000145f: R_386_PC32	strcpy
10001463:	83 c4 10             	add    esp,0x10
10001466:	83 ec 08             	sub    esp,0x8
10001469:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000146c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001472:	50                   	push   eax
10001473:	e8 fc ff ff ff       	call   10001474 <createUser(char const*)+0x2b5>	10001474: R_386_PC32	strcat
10001478:	83 c4 10             	add    esp,0x10
1000147b:	83 ec 08             	sub    esp,0x8
1000147e:	68 c0 01 00 00       	push   0x1c0
10001483:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001489:	50                   	push   eax
1000148a:	e8 fc ff ff ff       	call   1000148b <createUser(char const*)+0x2cc>	1000148b: R_386_PC32	mkdir(char const*, int)
1000148f:	83 c4 10             	add    esp,0x10
10001492:	83 ec 08             	sub    esp,0x8
10001495:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000149b:	50                   	push   eax
1000149c:	68 3c b0 00 10       	push   0x1000b03c	1000149d: R_386_32	.text
100014a1:	e8 fc ff ff ff       	call   100014a2 <createUser(char const*)+0x2e3>	100014a2: R_386_PC32	copytree(char*, char*)
100014a6:	83 c4 10             	add    esp,0x10
100014a9:	90                   	nop
100014aa:	c9                   	leave  
100014ab:	c3                   	ret    

100014ac <drawBootScreen()>:
100014ac:	55                   	push   ebp
100014ad:	89 e5                	mov    ebp,esp
100014af:	83 ec 18             	sub    esp,0x18
100014b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100014b3: R_386_32	term
100014b7:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	100014b9: R_386_32	safemode
100014bd:	84 d2                	test   dl,dl
100014bf:	74 07                	je     100014c8 <drawBootScreen()+0x1c>
100014c1:	ba 00 00 00 00       	mov    edx,0x0
100014c6:	eb 05                	jmp    100014cd <drawBootScreen()+0x21>
100014c8:	ba 0b 00 00 00       	mov    edx,0xb
100014cd:	83 ec 08             	sub    esp,0x8
100014d0:	52                   	push   edx
100014d1:	50                   	push   eax
100014d2:	e8 fc ff ff ff       	call   100014d3 <drawBootScreen()+0x27>	100014d3: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
100014d7:	83 c4 10             	add    esp,0x10
100014da:	a1 00 00 00 00       	mov    eax,ds:0x0	100014db: R_386_32	term
100014df:	83 ec 08             	sub    esp,0x8
100014e2:	6a 00                	push   0x0
100014e4:	50                   	push   eax
100014e5:	e8 fc ff ff ff       	call   100014e6 <drawBootScreen()+0x3a>	100014e6: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
100014ea:	83 c4 10             	add    esp,0x10
100014ed:	a1 00 00 00 00       	mov    eax,ds:0x0	100014ee: R_386_32	term
100014f2:	83 ec 0c             	sub    esp,0xc
100014f5:	50                   	push   eax
100014f6:	e8 fc ff ff ff       	call   100014f7 <drawBootScreen()+0x4b>	100014f7: R_386_PC32	VgaText::clearScreen()
100014fb:	83 c4 10             	add    esp,0x10
100014fe:	a1 00 00 00 00       	mov    eax,ds:0x0	100014ff: R_386_32	term
10001503:	83 ec 08             	sub    esp,0x8
10001506:	68 5b b0 00 10       	push   0x1000b05b	10001507: R_386_32	.text
1000150b:	50                   	push   eax
1000150c:	e8 fc ff ff ff       	call   1000150d <drawBootScreen()+0x61>	1000150d: R_386_PC32	VgaText::setTitle(char*)
10001511:	83 c4 10             	add    esp,0x10
10001514:	a1 00 00 00 00       	mov    eax,ds:0x0	10001515: R_386_32	term
10001519:	83 ec 08             	sub    esp,0x8
1000151c:	6a 00                	push   0x0
1000151e:	50                   	push   eax
1000151f:	e8 fc ff ff ff       	call   10001520 <drawBootScreen()+0x74>	10001520: R_386_PC32	VgaText::setTitleColour(VgaColour)
10001524:	83 c4 10             	add    esp,0x10
10001527:	a1 00 00 00 00       	mov    eax,ds:0x0	10001528: R_386_32	term
1000152c:	83 ec 08             	sub    esp,0x8
1000152f:	6a 00                	push   0x0
10001531:	50                   	push   eax
10001532:	e8 fc ff ff ff       	call   10001533 <drawBootScreen()+0x87>	10001533: R_386_PC32	VgaText::setTitleTextColour(VgaColour)
10001537:	83 c4 10             	add    esp,0x10
1000153a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000153b: R_386_32	term
1000153f:	83 ec 04             	sub    esp,0x4
10001542:	6a 00                	push   0x0
10001544:	6a 00                	push   0x0
10001546:	50                   	push   eax
10001547:	e8 fc ff ff ff       	call   10001548 <drawBootScreen()+0x9c>	10001548: R_386_PC32	VgaText::setCursor(int, int)
1000154c:	83 c4 10             	add    esp,0x10
1000154f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001556:	83 7d f4 4f          	cmp    DWORD PTR [ebp-0xc],0x4f
1000155a:	7f 19                	jg     10001575 <drawBootScreen()+0xc9>
1000155c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000155d: R_386_32	term
10001561:	6a 00                	push   0x0
10001563:	6a 00                	push   0x0
10001565:	6a 20                	push   0x20
10001567:	50                   	push   eax
10001568:	e8 fc ff ff ff       	call   10001569 <drawBootScreen()+0xbd>	10001569: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000156d:	83 c4 10             	add    esp,0x10
10001570:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001573:	eb e1                	jmp    10001556 <drawBootScreen()+0xaa>
10001575:	a0 00 00 00 00       	mov    al,ds:0x0	10001576: R_386_32	showSidebar
1000157a:	84 c0                	test   al,al
1000157c:	0f 84 e7 00 00 00    	je     10001669 <drawBootScreen()+0x1bd>
10001582:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10001589:	83 7d f0 18          	cmp    DWORD PTR [ebp-0x10],0x18
1000158d:	7f 41                	jg     100015d0 <drawBootScreen()+0x124>
1000158f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001590: R_386_32	term
10001594:	83 ec 04             	sub    esp,0x4
10001597:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000159a:	6a 00                	push   0x0
1000159c:	50                   	push   eax
1000159d:	e8 fc ff ff ff       	call   1000159e <drawBootScreen()+0xf2>	1000159e: R_386_PC32	VgaText::setCursor(int, int)
100015a2:	83 c4 10             	add    esp,0x10
100015a5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100015ac:	83 7d ec 0f          	cmp    DWORD PTR [ebp-0x14],0xf
100015b0:	7f 19                	jg     100015cb <drawBootScreen()+0x11f>
100015b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100015b3: R_386_32	term
100015b7:	6a 00                	push   0x0
100015b9:	6a 00                	push   0x0
100015bb:	6a 20                	push   0x20
100015bd:	50                   	push   eax
100015be:	e8 fc ff ff ff       	call   100015bf <drawBootScreen()+0x113>	100015bf: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100015c3:	83 c4 10             	add    esp,0x10
100015c6:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100015c9:	eb e1                	jmp    100015ac <drawBootScreen()+0x100>
100015cb:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100015ce:	eb b9                	jmp    10001589 <drawBootScreen()+0xdd>
100015d0:	a1 00 00 00 00       	mov    eax,ds:0x0	100015d1: R_386_32	term
100015d5:	83 ec 04             	sub    esp,0x4
100015d8:	6a 01                	push   0x1
100015da:	6a 01                	push   0x1
100015dc:	50                   	push   eax
100015dd:	e8 fc ff ff ff       	call   100015de <drawBootScreen()+0x132>	100015de: R_386_PC32	VgaText::setCursor(int, int)
100015e2:	83 c4 10             	add    esp,0x10
100015e5:	a0 00 00 00 00       	mov    al,ds:0x0	100015e6: R_386_32	safemode
100015ea:	83 f0 01             	xor    eax,0x1
100015ed:	84 c0                	test   al,al
100015ef:	74 17                	je     10001608 <drawBootScreen()+0x15c>
100015f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100015f2: R_386_32	term
100015f6:	6a 00                	push   0x0
100015f8:	6a 0f                	push   0xf
100015fa:	68 5c b0 00 10       	push   0x1000b05c	100015fb: R_386_32	.text
100015ff:	50                   	push   eax
10001600:	e8 fc ff ff ff       	call   10001601 <drawBootScreen()+0x155>	10001601: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001605:	83 c4 10             	add    esp,0x10
10001608:	a1 00 00 00 00       	mov    eax,ds:0x0	10001609: R_386_32	term
1000160d:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	1000160f: R_386_32	safemode
10001613:	84 d2                	test   dl,dl
10001615:	74 07                	je     1000161e <drawBootScreen()+0x172>
10001617:	ba 0f 00 00 00       	mov    edx,0xf
1000161c:	eb 05                	jmp    10001623 <drawBootScreen()+0x177>
1000161e:	ba 0e 00 00 00       	mov    edx,0xe
10001623:	6a 00                	push   0x0
10001625:	52                   	push   edx
10001626:	68 df b0 00 10       	push   0x1000b0df	10001627: R_386_32	.text
1000162b:	50                   	push   eax
1000162c:	e8 fc ff ff ff       	call   1000162d <drawBootScreen()+0x181>	1000162d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001631:	83 c4 10             	add    esp,0x10
10001634:	a0 00 00 00 00       	mov    al,ds:0x0	10001635: R_386_32	safemode
10001639:	84 c0                	test   al,al
1000163b:	74 2c                	je     10001669 <drawBootScreen()+0x1bd>
1000163d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000163e: R_386_32	term
10001642:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10001644: R_386_32	safemode
10001648:	84 d2                	test   dl,dl
1000164a:	74 07                	je     10001653 <drawBootScreen()+0x1a7>
1000164c:	ba 0f 00 00 00       	mov    edx,0xf
10001651:	eb 05                	jmp    10001658 <drawBootScreen()+0x1ac>
10001653:	ba 0e 00 00 00       	mov    edx,0xe
10001658:	6a 00                	push   0x0
1000165a:	52                   	push   edx
1000165b:	68 fd b0 00 10       	push   0x1000b0fd	1000165c: R_386_32	.text
10001660:	50                   	push   eax
10001661:	e8 fc ff ff ff       	call   10001662 <drawBootScreen()+0x1b6>	10001662: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001666:	83 c4 10             	add    esp,0x10
10001669:	a1 00 00 00 00       	mov    eax,ds:0x0	1000166a: R_386_32	term
1000166e:	83 ec 08             	sub    esp,0x8
10001671:	6a 0f                	push   0xf
10001673:	50                   	push   eax
10001674:	e8 fc ff ff ff       	call   10001675 <drawBootScreen()+0x1c9>	10001675: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
10001679:	83 c4 10             	add    esp,0x10
1000167c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000167d: R_386_32	term
10001681:	83 ec 08             	sub    esp,0x8
10001684:	6a 00                	push   0x0
10001686:	50                   	push   eax
10001687:	e8 fc ff ff ff       	call   10001688 <drawBootScreen()+0x1dc>	10001688: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
1000168c:	83 c4 10             	add    esp,0x10
1000168f:	90                   	nop
10001690:	c9                   	leave  
10001691:	c3                   	ret    

10001692 <drawBasicWindowX(int, int, int, int, char const*, bool)>:
10001692:	55                   	push   ebp
10001693:	89 e5                	mov    ebp,esp
10001695:	53                   	push   ebx
10001696:	83 ec 34             	sub    esp,0x34
10001699:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
1000169c:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
1000169f:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
100016a2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100016a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100016ac:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
100016af:	7d 6c                	jge    1000171d <drawBasicWindowX(int, int, int, int, char const*, bool)+0x8b>
100016b1:	a1 00 00 00 00       	mov    eax,ds:0x0	100016b2: R_386_32	term
100016b6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100016b9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100016bc:	01 ca                	add    edx,ecx
100016be:	83 ec 04             	sub    esp,0x4
100016c1:	52                   	push   edx
100016c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100016c5:	50                   	push   eax
100016c6:	e8 fc ff ff ff       	call   100016c7 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x35>	100016c7: R_386_PC32	VgaText::setCursor(int, int)
100016cb:	83 c4 10             	add    esp,0x10
100016ce:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
100016d5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100016d8:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
100016db:	7d 3b                	jge    10001718 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x86>
100016dd:	a1 00 00 00 00       	mov    eax,ds:0x0	100016de: R_386_32	term
100016e2:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
100016e6:	74 07                	je     100016ef <drawBasicWindowX(int, int, int, int, char const*, bool)+0x5d>
100016e8:	b9 07 00 00 00       	mov    ecx,0x7
100016ed:	eb 05                	jmp    100016f4 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x62>
100016ef:	b9 0f 00 00 00       	mov    ecx,0xf
100016f4:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
100016f8:	74 07                	je     10001701 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x6f>
100016fa:	ba 07 00 00 00       	mov    edx,0x7
100016ff:	eb 05                	jmp    10001706 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x74>
10001701:	ba 0f 00 00 00       	mov    edx,0xf
10001706:	51                   	push   ecx
10001707:	52                   	push   edx
10001708:	6a 20                	push   0x20
1000170a:	50                   	push   eax
1000170b:	e8 fc ff ff ff       	call   1000170c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x7a>	1000170c: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001710:	83 c4 10             	add    esp,0x10
10001713:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
10001716:	eb bd                	jmp    100016d5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x43>
10001718:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000171b:	eb 8c                	jmp    100016a9 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17>
1000171d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000171e: R_386_32	term
10001722:	83 ec 04             	sub    esp,0x4
10001725:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001728:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000172b:	50                   	push   eax
1000172c:	e8 fc ff ff ff       	call   1000172d <drawBasicWindowX(int, int, int, int, char const*, bool)+0x9b>	1000172d: R_386_PC32	VgaText::setCursor(int, int)
10001731:	83 c4 10             	add    esp,0x10
10001734:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
1000173b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000173e:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10001741:	7d 43                	jge    10001786 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xf4>
10001743:	a1 00 00 00 00       	mov    eax,ds:0x0	10001744: R_386_32	term
10001748:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	1000174a: R_386_32	safemode
1000174e:	84 d2                	test   dl,dl
10001750:	74 07                	je     10001759 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xc7>
10001752:	b9 00 00 00 00       	mov    ecx,0x0
10001757:	eb 05                	jmp    1000175e <drawBasicWindowX(int, int, int, int, char const*, bool)+0xcc>
10001759:	b9 01 00 00 00       	mov    ecx,0x1
1000175e:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10001760: R_386_32	safemode
10001764:	84 d2                	test   dl,dl
10001766:	74 07                	je     1000176f <drawBasicWindowX(int, int, int, int, char const*, bool)+0xdd>
10001768:	ba 00 00 00 00       	mov    edx,0x0
1000176d:	eb 05                	jmp    10001774 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xe2>
1000176f:	ba 01 00 00 00       	mov    edx,0x1
10001774:	51                   	push   ecx
10001775:	52                   	push   edx
10001776:	6a 20                	push   0x20
10001778:	50                   	push   eax
10001779:	e8 fc ff ff ff       	call   1000177a <drawBasicWindowX(int, int, int, int, char const*, bool)+0xe8>	1000177a: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000177e:	83 c4 10             	add    esp,0x10
10001781:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
10001784:	eb b5                	jmp    1000173b <drawBasicWindowX(int, int, int, int, char const*, bool)+0xa9>
10001786:	a1 00 00 00 00       	mov    eax,ds:0x0	10001787: R_386_32	term
1000178b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
1000178e:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10001791:	01 d1                	add    ecx,edx
10001793:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001796:	42                   	inc    edx
10001797:	83 ec 04             	sub    esp,0x4
1000179a:	51                   	push   ecx
1000179b:	52                   	push   edx
1000179c:	50                   	push   eax
1000179d:	e8 fc ff ff ff       	call   1000179e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x10c>	1000179e: R_386_PC32	VgaText::setCursor(int, int)
100017a2:	83 c4 10             	add    esp,0x10
100017a5:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
100017ac:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100017af:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
100017b2:	7d 43                	jge    100017f7 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x165>
100017b4:	a1 00 00 00 00       	mov    eax,ds:0x0	100017b5: R_386_32	term
100017b9:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	100017bb: R_386_32	safemode
100017bf:	84 d2                	test   dl,dl
100017c1:	74 07                	je     100017ca <drawBasicWindowX(int, int, int, int, char const*, bool)+0x138>
100017c3:	b9 00 00 00 00       	mov    ecx,0x0
100017c8:	eb 05                	jmp    100017cf <drawBasicWindowX(int, int, int, int, char const*, bool)+0x13d>
100017ca:	b9 03 00 00 00       	mov    ecx,0x3
100017cf:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	100017d1: R_386_32	safemode
100017d5:	84 d2                	test   dl,dl
100017d7:	74 07                	je     100017e0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x14e>
100017d9:	ba 00 00 00 00       	mov    edx,0x0
100017de:	eb 05                	jmp    100017e5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x153>
100017e0:	ba 03 00 00 00       	mov    edx,0x3
100017e5:	51                   	push   ecx
100017e6:	52                   	push   edx
100017e7:	6a 20                	push   0x20
100017e9:	50                   	push   eax
100017ea:	e8 fc ff ff ff       	call   100017eb <drawBasicWindowX(int, int, int, int, char const*, bool)+0x159>	100017eb: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100017ef:	83 c4 10             	add    esp,0x10
100017f2:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
100017f5:	eb b5                	jmp    100017ac <drawBasicWindowX(int, int, int, int, char const*, bool)+0x11a>
100017f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100017fa:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100017fd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001800:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001803:	01 d0                	add    eax,edx
10001805:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001808:	0f 8d b3 00 00 00    	jge    100018c1 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x22f>
1000180e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000180f: R_386_32	term
10001813:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001816:	8d 4a 01             	lea    ecx,[edx+0x1]
10001819:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
1000181c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000181f:	01 da                	add    edx,ebx
10001821:	83 ec 04             	sub    esp,0x4
10001824:	51                   	push   ecx
10001825:	52                   	push   edx
10001826:	50                   	push   eax
10001827:	e8 fc ff ff ff       	call   10001828 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x196>	10001828: R_386_PC32	VgaText::setCursor(int, int)
1000182c:	83 c4 10             	add    esp,0x10
1000182f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001830: R_386_32	term
10001834:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10001836: R_386_32	safemode
1000183a:	84 d2                	test   dl,dl
1000183c:	74 07                	je     10001845 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1b3>
1000183e:	b9 00 00 00 00       	mov    ecx,0x0
10001843:	eb 05                	jmp    1000184a <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1b8>
10001845:	b9 03 00 00 00       	mov    ecx,0x3
1000184a:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	1000184c: R_386_32	safemode
10001850:	84 d2                	test   dl,dl
10001852:	74 07                	je     1000185b <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1c9>
10001854:	ba 00 00 00 00       	mov    edx,0x0
10001859:	eb 05                	jmp    10001860 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1ce>
1000185b:	ba 03 00 00 00       	mov    edx,0x3
10001860:	51                   	push   ecx
10001861:	52                   	push   edx
10001862:	6a 20                	push   0x20
10001864:	50                   	push   eax
10001865:	e8 fc ff ff ff       	call   10001866 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1d4>	10001866: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000186a:	83 c4 10             	add    esp,0x10
1000186d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001870:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001873:	01 d0                	add    eax,edx
10001875:	48                   	dec    eax
10001876:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001879:	74 3e                	je     100018b9 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x227>
1000187b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000187c: R_386_32	term
10001880:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001883:	42                   	inc    edx
10001884:	83 ec 04             	sub    esp,0x4
10001887:	52                   	push   edx
10001888:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000188b:	50                   	push   eax
1000188c:	e8 fc ff ff ff       	call   1000188d <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1fb>	1000188d: R_386_PC32	VgaText::setCursor(int, int)
10001891:	83 c4 10             	add    esp,0x10
10001894:	a1 00 00 00 00       	mov    eax,ds:0x0	10001895: R_386_32	term
10001899:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000189d:	74 07                	je     100018a6 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x214>
1000189f:	ba 07 00 00 00       	mov    edx,0x7
100018a4:	eb 05                	jmp    100018ab <drawBasicWindowX(int, int, int, int, char const*, bool)+0x219>
100018a6:	ba 0f 00 00 00       	mov    edx,0xf
100018ab:	52                   	push   edx
100018ac:	6a 00                	push   0x0
100018ae:	6a dd                	push   0xffffffdd
100018b0:	50                   	push   eax
100018b1:	e8 fc ff ff ff       	call   100018b2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x220>	100018b2: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100018b6:	83 c4 10             	add    esp,0x10
100018b9:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100018bc:	e9 3c ff ff ff       	jmp    100017fd <drawBasicWindowX(int, int, int, int, char const*, bool)+0x16b>
100018c1:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100018c4:	83 ec 0c             	sub    esp,0xc
100018c7:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100018ca:	e8 fc ff ff ff       	call   100018cb <drawBasicWindowX(int, int, int, int, char const*, bool)+0x239>	100018cb: R_386_PC32	strlen
100018cf:	83 c4 10             	add    esp,0x10
100018d2:	29 c3                	sub    ebx,eax
100018d4:	89 d8                	mov    eax,ebx
100018d6:	d1 e8                	shr    eax,1
100018d8:	48                   	dec    eax
100018d9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100018dc:	a1 00 00 00 00       	mov    eax,ds:0x0	100018dd: R_386_32	term
100018e1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100018e4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100018e7:	01 ca                	add    edx,ecx
100018e9:	83 ec 04             	sub    esp,0x4
100018ec:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100018ef:	52                   	push   edx
100018f0:	50                   	push   eax
100018f1:	e8 fc ff ff ff       	call   100018f2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x260>	100018f2: R_386_PC32	VgaText::setCursor(int, int)
100018f6:	83 c4 10             	add    esp,0x10
100018f9:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10001900:	83 ec 0c             	sub    esp,0xc
10001903:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10001906:	e8 fc ff ff ff       	call   10001907 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x275>	10001907: R_386_PC32	strlen
1000190b:	83 c4 10             	add    esp,0x10
1000190e:	89 c2                	mov    edx,eax
10001910:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10001913:	39 c2                	cmp    edx,eax
10001915:	76 3a                	jbe    10001951 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x2bf>
10001917:	a1 00 00 00 00       	mov    eax,ds:0x0	10001918: R_386_32	term
1000191c:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	1000191e: R_386_32	safemode
10001922:	84 d2                	test   dl,dl
10001924:	74 07                	je     1000192d <drawBasicWindowX(int, int, int, int, char const*, bool)+0x29b>
10001926:	b9 00 00 00 00       	mov    ecx,0x0
1000192b:	eb 05                	jmp    10001932 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x2a0>
1000192d:	b9 01 00 00 00       	mov    ecx,0x1
10001932:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
10001935:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10001938:	01 da                	add    edx,ebx
1000193a:	8a 12                	mov    dl,BYTE PTR [edx]
1000193c:	0f be d2             	movsx  edx,dl
1000193f:	51                   	push   ecx
10001940:	6a 0f                	push   0xf
10001942:	52                   	push   edx
10001943:	50                   	push   eax
10001944:	e8 fc ff ff ff       	call   10001945 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x2b3>	10001945: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001949:	83 c4 10             	add    esp,0x10
1000194c:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
1000194f:	eb af                	jmp    10001900 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x26e>
10001951:	90                   	nop
10001952:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10001955:	c9                   	leave  
10001956:	c3                   	ret    

10001957 <drawBasicWindow(int, int, int, int, char const*)>:
10001957:	55                   	push   ebp
10001958:	89 e5                	mov    ebp,esp
1000195a:	83 ec 08             	sub    esp,0x8
1000195d:	83 ec 08             	sub    esp,0x8
10001960:	6a 00                	push   0x0
10001962:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10001965:	ff 75 14             	push   DWORD PTR [ebp+0x14]
10001968:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000196b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000196e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001971:	e8 fc ff ff ff       	call   10001972 <drawBasicWindow(int, int, int, int, char const*)+0x1b>	10001972: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10001976:	83 c4 20             	add    esp,0x20
10001979:	90                   	nop
1000197a:	c9                   	leave  
1000197b:	c3                   	ret    

1000197c <lookupHex(char)>:
1000197c:	55                   	push   ebp
1000197d:	89 e5                	mov    ebp,esp
1000197f:	83 ec 04             	sub    esp,0x4
10001982:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001985:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
10001988:	80 7d fc 2f          	cmp    BYTE PTR [ebp-0x4],0x2f
1000198c:	7e 0f                	jle    1000199d <lookupHex(char)+0x21>
1000198e:	80 7d fc 39          	cmp    BYTE PTR [ebp-0x4],0x39
10001992:	7f 09                	jg     1000199d <lookupHex(char)+0x21>
10001994:	0f be 45 fc          	movsx  eax,BYTE PTR [ebp-0x4]
10001998:	83 e8 30             	sub    eax,0x30
1000199b:	eb 1c                	jmp    100019b9 <lookupHex(char)+0x3d>
1000199d:	80 7d fc 40          	cmp    BYTE PTR [ebp-0x4],0x40
100019a1:	7e 0f                	jle    100019b2 <lookupHex(char)+0x36>
100019a3:	80 7d fc 46          	cmp    BYTE PTR [ebp-0x4],0x46
100019a7:	7f 09                	jg     100019b2 <lookupHex(char)+0x36>
100019a9:	0f be 45 fc          	movsx  eax,BYTE PTR [ebp-0x4]
100019ad:	83 e8 37             	sub    eax,0x37
100019b0:	eb 07                	jmp    100019b9 <lookupHex(char)+0x3d>
100019b2:	0f be 45 fc          	movsx  eax,BYTE PTR [ebp-0x4]
100019b6:	83 e8 57             	sub    eax,0x57
100019b9:	c9                   	leave  
100019ba:	c3                   	ret    

100019bb <runRemoteInstall(void*)>:
100019bb:	55                   	push   ebp
100019bc:	89 e5                	mov    ebp,esp
100019be:	56                   	push   esi
100019bf:	53                   	push   ebx
100019c0:	83 ec 40             	sub    esp,0x40
100019c3:	f0 ff 0d 00 00 00 00 	lock dec DWORD PTR ds:0x0	100019c6: R_386_32	irqDisableCounter
100019ca:	a1 00 00 00 00       	mov    eax,ds:0x0	100019cb: R_386_32	irqDisableCounter
100019cf:	85 c0                	test   eax,eax
100019d1:	75 01                	jne    100019d4 <runRemoteInstall(void*)+0x19>
100019d3:	fb                   	sti    
100019d4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100019db:	6a 0c                	push   0xc
100019dd:	6a 00                	push   0x0
100019df:	8d 45 c4             	lea    eax,[ebp-0x3c]
100019e2:	50                   	push   eax
100019e3:	e8 fc ff ff ff       	call   100019e4 <runRemoteInstall(void*)+0x29>	100019e4: R_386_PC32	memset
100019e8:	83 c4 0c             	add    esp,0xc
100019eb:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100019ed: R_386_32	remoteInstallScript
100019f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100019f4:	01 d0                	add    eax,edx
100019f6:	8a 00                	mov    al,BYTE PTR [eax]
100019f8:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
100019fb:	a1 00 00 00 00       	mov    eax,ds:0x0	100019fc: R_386_32	remoteInstallScript
10001a00:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001a03:	42                   	inc    edx
10001a04:	01 d0                	add    eax,edx
10001a06:	8a 00                	mov    al,BYTE PTR [eax]
10001a08:	88 45 e2             	mov    BYTE PTR [ebp-0x1e],al
10001a0b:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a0c: R_386_32	remoteInstallScript
10001a10:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001a13:	83 c2 02             	add    edx,0x2
10001a16:	01 d0                	add    eax,edx
10001a18:	8a 00                	mov    al,BYTE PTR [eax]
10001a1a:	88 45 e1             	mov    BYTE PTR [ebp-0x1f],al
10001a1d:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a1e: R_386_32	remoteInstallScript
10001a22:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001a25:	83 c2 03             	add    edx,0x3
10001a28:	01 d0                	add    eax,edx
10001a2a:	8a 00                	mov    al,BYTE PTR [eax]
10001a2c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
10001a2f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a30: R_386_32	remoteInstallScript
10001a34:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001a37:	83 c2 04             	add    edx,0x4
10001a3a:	01 d0                	add    eax,edx
10001a3c:	8a 00                	mov    al,BYTE PTR [eax]
10001a3e:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
10001a41:	0f be 75 df          	movsx  esi,BYTE PTR [ebp-0x21]
10001a45:	0f be 5d e0          	movsx  ebx,BYTE PTR [ebp-0x20]
10001a49:	0f be 4d e1          	movsx  ecx,BYTE PTR [ebp-0x1f]
10001a4d:	0f be 55 e2          	movsx  edx,BYTE PTR [ebp-0x1e]
10001a51:	0f be 45 e3          	movsx  eax,BYTE PTR [ebp-0x1d]
10001a55:	83 ec 08             	sub    esp,0x8
10001a58:	56                   	push   esi
10001a59:	53                   	push   ebx
10001a5a:	51                   	push   ecx
10001a5b:	52                   	push   edx
10001a5c:	50                   	push   eax
10001a5d:	68 8c b1 00 10       	push   0x1000b18c	10001a5e: R_386_32	.text
10001a62:	e8 fc ff ff ff       	call   10001a63 <runRemoteInstall(void*)+0xa8>	10001a63: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a67:	83 c4 20             	add    esp,0x20
10001a6a:	80 7d e3 73          	cmp    BYTE PTR [ebp-0x1d],0x73
10001a6e:	75 11                	jne    10001a81 <runRemoteInstall(void*)+0xc6>
10001a70:	8a 45 e2             	mov    al,BYTE PTR [ebp-0x1e]
10001a73:	a2 00 00 00 00       	mov    ds:0x0,al	10001a74: R_386_32	installKey
10001a78:	83 45 f4 02          	add    DWORD PTR [ebp-0xc],0x2
10001a7c:	e9 6a ff ff ff       	jmp    100019eb <runRemoteInstall(void*)+0x30>
10001a81:	80 7d e3 46          	cmp    BYTE PTR [ebp-0x1d],0x46
10001a85:	74 0a                	je     10001a91 <runRemoteInstall(void*)+0xd6>
10001a87:	80 7d e3 66          	cmp    BYTE PTR [ebp-0x1d],0x66
10001a8b:	0f 85 e4 00 00 00    	jne    10001b75 <runRemoteInstall(void*)+0x1ba>
10001a91:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
10001a98:	0f be 45 e1          	movsx  eax,BYTE PTR [ebp-0x1f]
10001a9c:	83 ec 0c             	sub    esp,0xc
10001a9f:	50                   	push   eax
10001aa0:	e8 fc ff ff ff       	call   10001aa1 <runRemoteInstall(void*)+0xe6>	10001aa1: R_386_PC32	lookupHex(char)
10001aa5:	83 c4 10             	add    esp,0x10
10001aa8:	c1 e0 08             	shl    eax,0x8
10001aab:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10001aae:	0f be 45 e0          	movsx  eax,BYTE PTR [ebp-0x20]
10001ab2:	83 ec 0c             	sub    esp,0xc
10001ab5:	50                   	push   eax
10001ab6:	e8 fc ff ff ff       	call   10001ab7 <runRemoteInstall(void*)+0xfc>	10001ab7: R_386_PC32	lookupHex(char)
10001abb:	83 c4 10             	add    esp,0x10
10001abe:	c1 e0 04             	shl    eax,0x4
10001ac1:	01 45 d0             	add    DWORD PTR [ebp-0x30],eax
10001ac4:	0f be 45 df          	movsx  eax,BYTE PTR [ebp-0x21]
10001ac8:	83 ec 0c             	sub    esp,0xc
10001acb:	50                   	push   eax
10001acc:	e8 fc ff ff ff       	call   10001acd <runRemoteInstall(void*)+0x112>	10001acd: R_386_PC32	lookupHex(char)
10001ad1:	83 c4 10             	add    esp,0x10
10001ad4:	01 45 d0             	add    DWORD PTR [ebp-0x30],eax
10001ad7:	83 45 f4 05          	add    DWORD PTR [ebp-0xc],0x5
10001adb:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001ae2:	80 7d e2 30          	cmp    BYTE PTR [ebp-0x1e],0x30
10001ae6:	75 06                	jne    10001aee <runRemoteInstall(void*)+0x133>
10001ae8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001aeb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001aee:	80 7d e2 31          	cmp    BYTE PTR [ebp-0x1e],0x31
10001af2:	75 06                	jne    10001afa <runRemoteInstall(void*)+0x13f>
10001af4:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10001af7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001afa:	80 7d e2 32          	cmp    BYTE PTR [ebp-0x1e],0x32
10001afe:	75 06                	jne    10001b06 <runRemoteInstall(void*)+0x14b>
10001b00:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10001b03:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001b06:	80 7d e2 33          	cmp    BYTE PTR [ebp-0x1e],0x33
10001b0a:	75 06                	jne    10001b12 <runRemoteInstall(void*)+0x157>
10001b0c:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10001b0f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001b12:	80 7d e2 34          	cmp    BYTE PTR [ebp-0x1e],0x34
10001b16:	75 0b                	jne    10001b23 <runRemoteInstall(void*)+0x168>
10001b18:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b19: R_386_32	term
10001b1d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
10001b20:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001b23:	80 7d e2 35          	cmp    BYTE PTR [ebp-0x1e],0x35
10001b27:	75 0b                	jne    10001b34 <runRemoteInstall(void*)+0x179>
10001b29:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b2a: R_386_32	term
10001b2e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10001b31:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001b34:	80 7d e3 46          	cmp    BYTE PTR [ebp-0x1d],0x46
10001b38:	75 11                	jne    10001b4b <runRemoteInstall(void*)+0x190>
10001b3a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10001b3d:	3b 45 d0             	cmp    eax,DWORD PTR [ebp-0x30]
10001b40:	75 09                	jne    10001b4b <runRemoteInstall(void*)+0x190>
10001b42:	83 45 f4 05          	add    DWORD PTR [ebp-0xc],0x5
10001b46:	e9 7c 05 00 00       	jmp    100020c7 <runRemoteInstall(void*)+0x70c>
10001b4b:	80 7d e3 66          	cmp    BYTE PTR [ebp-0x1d],0x66
10001b4f:	0f 85 72 05 00 00    	jne    100020c7 <runRemoteInstall(void*)+0x70c>
10001b55:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10001b58:	3b 45 d0             	cmp    eax,DWORD PTR [ebp-0x30]
10001b5b:	0f 84 66 05 00 00    	je     100020c7 <runRemoteInstall(void*)+0x70c>
10001b61:	83 ec 08             	sub    esp,0x8
10001b64:	6a 00                	push   0x0
10001b66:	6a 64                	push   0x64
10001b68:	e8 fc ff ff ff       	call   10001b69 <runRemoteInstall(void*)+0x1ae>	10001b69: R_386_PC32	milliTenthSleep(unsigned long long)
10001b6d:	83 c4 10             	add    esp,0x10
10001b70:	e9 23 ff ff ff       	jmp    10001a98 <runRemoteInstall(void*)+0xdd>
10001b75:	80 7d e3 7b          	cmp    BYTE PTR [ebp-0x1d],0x7b
10001b79:	75 4a                	jne    10001bc5 <runRemoteInstall(void*)+0x20a>
10001b7b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001b7e:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10001b80: R_386_32	remoteInstallScript
10001b84:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10001b87:	8d 50 01             	lea    edx,[eax+0x1]
10001b8a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001b8d:	01 c8                	add    eax,ecx
10001b8f:	8a 00                	mov    al,BYTE PTR [eax]
10001b91:	88 45 de             	mov    BYTE PTR [ebp-0x22],al
10001b94:	80 7d de 7d          	cmp    BYTE PTR [ebp-0x22],0x7d
10001b98:	0f 84 2f 05 00 00    	je     100020cd <runRemoteInstall(void*)+0x712>
10001b9e:	8a 45 de             	mov    al,BYTE PTR [ebp-0x22]
10001ba1:	a2 00 00 00 00       	mov    ds:0x0,al	10001ba2: R_386_32	installKey
10001ba6:	a0 00 00 00 00       	mov    al,ds:0x0	10001ba7: R_386_32	installKey
10001bab:	84 c0                	test   al,al
10001bad:	0f 95 c0             	setne  al
10001bb0:	84 c0                	test   al,al
10001bb2:	74 ca                	je     10001b7e <runRemoteInstall(void*)+0x1c3>
10001bb4:	83 ec 08             	sub    esp,0x8
10001bb7:	6a 00                	push   0x0
10001bb9:	6a 64                	push   0x64
10001bbb:	e8 fc ff ff ff       	call   10001bbc <runRemoteInstall(void*)+0x201>	10001bbc: R_386_PC32	milliTenthSleep(unsigned long long)
10001bc0:	83 c4 10             	add    esp,0x10
10001bc3:	eb e1                	jmp    10001ba6 <runRemoteInstall(void*)+0x1eb>
10001bc5:	80 7d e3 71          	cmp    BYTE PTR [ebp-0x1d],0x71
10001bc9:	75 2d                	jne    10001bf8 <runRemoteInstall(void*)+0x23d>
10001bcb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001bce:	c6 05 00 00 00 00 7d 	mov    BYTE PTR ds:0x0,0x7d	10001bd0: R_386_32	installKey
10001bd5:	a0 00 00 00 00       	mov    al,ds:0x0	10001bd6: R_386_32	installKey
10001bda:	84 c0                	test   al,al
10001bdc:	0f 95 c0             	setne  al
10001bdf:	84 c0                	test   al,al
10001be1:	0f 84 04 fe ff ff    	je     100019eb <runRemoteInstall(void*)+0x30>
10001be7:	83 ec 08             	sub    esp,0x8
10001bea:	6a 00                	push   0x0
10001bec:	6a 64                	push   0x64
10001bee:	e8 fc ff ff ff       	call   10001bef <runRemoteInstall(void*)+0x234>	10001bef: R_386_PC32	milliTenthSleep(unsigned long long)
10001bf3:	83 c4 10             	add    esp,0x10
10001bf6:	eb dd                	jmp    10001bd5 <runRemoteInstall(void*)+0x21a>
10001bf8:	80 7d e3 57          	cmp    BYTE PTR [ebp-0x1d],0x57
10001bfc:	0f 85 86 00 00 00    	jne    10001c88 <runRemoteInstall(void*)+0x2cd>
10001c02:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001c06:	83 ec 0c             	sub    esp,0xc
10001c09:	50                   	push   eax
10001c0a:	e8 fc ff ff ff       	call   10001c0b <runRemoteInstall(void*)+0x250>	10001c0b: R_386_PC32	lookupHex(char)
10001c0f:	83 c4 10             	add    esp,0x10
10001c12:	c1 e0 04             	shl    eax,0x4
10001c15:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001c18:	0f be 45 e1          	movsx  eax,BYTE PTR [ebp-0x1f]
10001c1c:	83 ec 0c             	sub    esp,0xc
10001c1f:	50                   	push   eax
10001c20:	e8 fc ff ff ff       	call   10001c21 <runRemoteInstall(void*)+0x266>	10001c21: R_386_PC32	lookupHex(char)
10001c25:	83 c4 10             	add    esp,0x10
10001c28:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
10001c2b:	83 45 f4 03          	add    DWORD PTR [ebp-0xc],0x3
10001c2f:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
10001c32:	89 d0                	mov    eax,edx
10001c34:	c1 e0 02             	shl    eax,0x2
10001c37:	01 d0                	add    eax,edx
10001c39:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10001c40:	01 d0                	add    eax,edx
10001c42:	c1 e0 02             	shl    eax,0x2
10001c45:	83 ec 08             	sub    esp,0x8
10001c48:	50                   	push   eax
10001c49:	68 9a b1 00 10       	push   0x1000b19a	10001c4a: R_386_32	.text
10001c4e:	e8 fc ff ff ff       	call   10001c4f <runRemoteInstall(void*)+0x294>	10001c4f: R_386_PC32	Dbg::kprintf(char const*, ...)
10001c53:	83 c4 10             	add    esp,0x10
10001c56:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
10001c59:	89 d0                	mov    eax,edx
10001c5b:	c1 e0 02             	shl    eax,0x2
10001c5e:	01 d0                	add    eax,edx
10001c60:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10001c67:	01 d0                	add    eax,edx
10001c69:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10001c70:	01 d0                	add    eax,edx
10001c72:	c1 e0 03             	shl    eax,0x3
10001c75:	99                   	cdq    
10001c76:	83 ec 08             	sub    esp,0x8
10001c79:	52                   	push   edx
10001c7a:	50                   	push   eax
10001c7b:	e8 fc ff ff ff       	call   10001c7c <runRemoteInstall(void*)+0x2c1>	10001c7c: R_386_PC32	milliTenthSleep(unsigned long long)
10001c80:	83 c4 10             	add    esp,0x10
10001c83:	e9 63 fd ff ff       	jmp    100019eb <runRemoteInstall(void*)+0x30>
10001c88:	80 7d e3 67          	cmp    BYTE PTR [ebp-0x1d],0x67
10001c8c:	75 60                	jne    10001cee <runRemoteInstall(void*)+0x333>
10001c8e:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001c92:	83 ec 0c             	sub    esp,0xc
10001c95:	50                   	push   eax
10001c96:	e8 fc ff ff ff       	call   10001c97 <runRemoteInstall(void*)+0x2dc>	10001c97: R_386_PC32	lookupHex(char)
10001c9b:	83 c4 10             	add    esp,0x10
10001c9e:	c1 e0 0c             	shl    eax,0xc
10001ca1:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001ca4:	0f be 45 e1          	movsx  eax,BYTE PTR [ebp-0x1f]
10001ca8:	83 ec 0c             	sub    esp,0xc
10001cab:	50                   	push   eax
10001cac:	e8 fc ff ff ff       	call   10001cad <runRemoteInstall(void*)+0x2f2>	10001cad: R_386_PC32	lookupHex(char)
10001cb1:	83 c4 10             	add    esp,0x10
10001cb4:	c1 e0 08             	shl    eax,0x8
10001cb7:	01 45 d4             	add    DWORD PTR [ebp-0x2c],eax
10001cba:	0f be 45 e0          	movsx  eax,BYTE PTR [ebp-0x20]
10001cbe:	83 ec 0c             	sub    esp,0xc
10001cc1:	50                   	push   eax
10001cc2:	e8 fc ff ff ff       	call   10001cc3 <runRemoteInstall(void*)+0x308>	10001cc3: R_386_PC32	lookupHex(char)
10001cc7:	83 c4 10             	add    esp,0x10
10001cca:	c1 e0 04             	shl    eax,0x4
10001ccd:	01 45 d4             	add    DWORD PTR [ebp-0x2c],eax
10001cd0:	0f be 45 df          	movsx  eax,BYTE PTR [ebp-0x21]
10001cd4:	83 ec 0c             	sub    esp,0xc
10001cd7:	50                   	push   eax
10001cd8:	e8 fc ff ff ff       	call   10001cd9 <runRemoteInstall(void*)+0x31e>	10001cd9: R_386_PC32	lookupHex(char)
10001cdd:	83 c4 10             	add    esp,0x10
10001ce0:	01 45 d4             	add    DWORD PTR [ebp-0x2c],eax
10001ce3:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10001ce6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001ce9:	e9 fd fc ff ff       	jmp    100019eb <runRemoteInstall(void*)+0x30>
10001cee:	80 7d e3 4e          	cmp    BYTE PTR [ebp-0x1d],0x4e
10001cf2:	75 08                	jne    10001cfc <runRemoteInstall(void*)+0x341>
10001cf4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001cf7:	e9 ef fc ff ff       	jmp    100019eb <runRemoteInstall(void*)+0x30>
10001cfc:	80 7d e3 58          	cmp    BYTE PTR [ebp-0x1d],0x58
10001d00:	75 1b                	jne    10001d1d <runRemoteInstall(void*)+0x362>
10001d02:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10001d04: R_386_32	remoteInstall
10001d09:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10001d0b: R_386_32	blockUserTyping
10001d10:	90                   	nop
10001d11:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10001d13: R_386_32	blockUserTyping
10001d18:	e9 b6 03 00 00       	jmp    100020d3 <runRemoteInstall(void*)+0x718>
10001d1d:	80 7d e3 53          	cmp    BYTE PTR [ebp-0x1d],0x53
10001d21:	0f 85 80 00 00 00    	jne    10001da7 <runRemoteInstall(void*)+0x3ec>
10001d27:	0f be 45 e1          	movsx  eax,BYTE PTR [ebp-0x1f]
10001d2b:	83 ec 0c             	sub    esp,0xc
10001d2e:	50                   	push   eax
10001d2f:	e8 fc ff ff ff       	call   10001d30 <runRemoteInstall(void*)+0x375>	10001d30: R_386_PC32	lookupHex(char)
10001d34:	83 c4 10             	add    esp,0x10
10001d37:	89 c2                	mov    edx,eax
10001d39:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001d3d:	83 e8 31             	sub    eax,0x31
10001d40:	c1 e2 08             	shl    edx,0x8
10001d43:	89 54 85 c4          	mov    DWORD PTR [ebp+eax*4-0x3c],edx
10001d47:	0f be 45 e0          	movsx  eax,BYTE PTR [ebp-0x20]
10001d4b:	83 ec 0c             	sub    esp,0xc
10001d4e:	50                   	push   eax
10001d4f:	e8 fc ff ff ff       	call   10001d50 <runRemoteInstall(void*)+0x395>	10001d50: R_386_PC32	lookupHex(char)
10001d54:	83 c4 10             	add    esp,0x10
10001d57:	c1 e0 04             	shl    eax,0x4
10001d5a:	89 c1                	mov    ecx,eax
10001d5c:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001d60:	83 e8 31             	sub    eax,0x31
10001d63:	8b 54 85 c4          	mov    edx,DWORD PTR [ebp+eax*4-0x3c]
10001d67:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001d6b:	83 e8 31             	sub    eax,0x31
10001d6e:	01 ca                	add    edx,ecx
10001d70:	89 54 85 c4          	mov    DWORD PTR [ebp+eax*4-0x3c],edx
10001d74:	0f be 45 df          	movsx  eax,BYTE PTR [ebp-0x21]
10001d78:	83 ec 0c             	sub    esp,0xc
10001d7b:	50                   	push   eax
10001d7c:	e8 fc ff ff ff       	call   10001d7d <runRemoteInstall(void*)+0x3c2>	10001d7d: R_386_PC32	lookupHex(char)
10001d81:	83 c4 10             	add    esp,0x10
10001d84:	89 c1                	mov    ecx,eax
10001d86:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001d8a:	83 e8 31             	sub    eax,0x31
10001d8d:	8b 54 85 c4          	mov    edx,DWORD PTR [ebp+eax*4-0x3c]
10001d91:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001d95:	83 e8 31             	sub    eax,0x31
10001d98:	01 ca                	add    edx,ecx
10001d9a:	89 54 85 c4          	mov    DWORD PTR [ebp+eax*4-0x3c],edx
10001d9e:	83 45 f4 05          	add    DWORD PTR [ebp-0xc],0x5
10001da2:	e9 44 fc ff ff       	jmp    100019eb <runRemoteInstall(void*)+0x30>
10001da7:	80 7d e3 2b          	cmp    BYTE PTR [ebp-0x1d],0x2b
10001dab:	75 19                	jne    10001dc6 <runRemoteInstall(void*)+0x40b>
10001dad:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001db1:	83 e8 31             	sub    eax,0x31
10001db4:	8b 54 85 c4          	mov    edx,DWORD PTR [ebp+eax*4-0x3c]
10001db8:	42                   	inc    edx
10001db9:	89 54 85 c4          	mov    DWORD PTR [ebp+eax*4-0x3c],edx
10001dbd:	83 45 f4 02          	add    DWORD PTR [ebp-0xc],0x2
10001dc1:	e9 25 fc ff ff       	jmp    100019eb <runRemoteInstall(void*)+0x30>
10001dc6:	80 7d e3 2d          	cmp    BYTE PTR [ebp-0x1d],0x2d
10001dca:	75 19                	jne    10001de5 <runRemoteInstall(void*)+0x42a>
10001dcc:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001dd0:	83 e8 31             	sub    eax,0x31
10001dd3:	8b 54 85 c4          	mov    edx,DWORD PTR [ebp+eax*4-0x3c]
10001dd7:	4a                   	dec    edx
10001dd8:	89 54 85 c4          	mov    DWORD PTR [ebp+eax*4-0x3c],edx
10001ddc:	83 45 f4 02          	add    DWORD PTR [ebp-0xc],0x2
10001de0:	e9 06 fc ff ff       	jmp    100019eb <runRemoteInstall(void*)+0x30>
10001de5:	80 7d e3 30          	cmp    BYTE PTR [ebp-0x1d],0x30
10001de9:	75 18                	jne    10001e03 <runRemoteInstall(void*)+0x448>
10001deb:	0f be 45 e2          	movsx  eax,BYTE PTR [ebp-0x1e]
10001def:	83 e8 31             	sub    eax,0x31
10001df2:	c7 44 85 c4 00 00 00 00 	mov    DWORD PTR [ebp+eax*4-0x3c],0x0
10001dfa:	83 45 f4 02          	add    DWORD PTR [ebp-0xc],0x2
10001dfe:	e9 e8 fb ff ff       	jmp    100019eb <runRemoteInstall(void*)+0x30>
10001e03:	80 7d e3 3c          	cmp    BYTE PTR [ebp-0x1d],0x3c
10001e07:	0f 85 86 00 00 00    	jne    10001e93 <runRemoteInstall(void*)+0x4d8>
10001e0d:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10001e14:	80 7d e1 30          	cmp    BYTE PTR [ebp-0x1f],0x30
10001e18:	75 06                	jne    10001e20 <runRemoteInstall(void*)+0x465>
10001e1a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001e1d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001e20:	80 7d e1 31          	cmp    BYTE PTR [ebp-0x1f],0x31
10001e24:	75 06                	jne    10001e2c <runRemoteInstall(void*)+0x471>
10001e26:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10001e29:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001e2c:	80 7d e1 32          	cmp    BYTE PTR [ebp-0x1f],0x32
10001e30:	75 06                	jne    10001e38 <runRemoteInstall(void*)+0x47d>
10001e32:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10001e35:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001e38:	80 7d e1 33          	cmp    BYTE PTR [ebp-0x1f],0x33
10001e3c:	75 06                	jne    10001e44 <runRemoteInstall(void*)+0x489>
10001e3e:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10001e41:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001e44:	80 7d e1 35          	cmp    BYTE PTR [ebp-0x1f],0x35
10001e48:	75 0b                	jne    10001e55 <runRemoteInstall(void*)+0x49a>
10001e4a:	a1 00 00 00 00       	mov    eax,ds:0x0	10001e4b: R_386_32	term
10001e4f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
10001e52:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001e55:	80 7d e1 36          	cmp    BYTE PTR [ebp-0x1f],0x36
10001e59:	75 0b                	jne    10001e66 <runRemoteInstall(void*)+0x4ab>
10001e5b:	a1 00 00 00 00       	mov    eax,ds:0x0	10001e5c: R_386_32	term
10001e60:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10001e63:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001e66:	80 7d e2 31          	cmp    BYTE PTR [ebp-0x1e],0x31
10001e6a:	75 06                	jne    10001e72 <runRemoteInstall(void*)+0x4b7>
10001e6c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10001e6f:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10001e72:	80 7d e2 32          	cmp    BYTE PTR [ebp-0x1e],0x32
10001e76:	75 06                	jne    10001e7e <runRemoteInstall(void*)+0x4c3>
10001e78:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10001e7b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10001e7e:	80 7d e2 33          	cmp    BYTE PTR [ebp-0x1e],0x33
10001e82:	75 06                	jne    10001e8a <runRemoteInstall(void*)+0x4cf>
10001e84:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10001e87:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10001e8a:	83 45 f4 03          	add    DWORD PTR [ebp-0xc],0x3
10001e8e:	e9 58 fb ff ff       	jmp    100019eb <runRemoteInstall(void*)+0x30>
10001e93:	80 7d e3 3e          	cmp    BYTE PTR [ebp-0x1d],0x3e
10001e97:	0f 85 8f 00 00 00    	jne    10001f2c <runRemoteInstall(void*)+0x571>
10001e9d:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10001ea4:	80 7d e1 30          	cmp    BYTE PTR [ebp-0x1f],0x30
10001ea8:	75 06                	jne    10001eb0 <runRemoteInstall(void*)+0x4f5>
10001eaa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ead:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001eb0:	80 7d e1 31          	cmp    BYTE PTR [ebp-0x1f],0x31
10001eb4:	75 06                	jne    10001ebc <runRemoteInstall(void*)+0x501>
10001eb6:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10001eb9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001ebc:	80 7d e1 32          	cmp    BYTE PTR [ebp-0x1f],0x32
10001ec0:	75 06                	jne    10001ec8 <runRemoteInstall(void*)+0x50d>
10001ec2:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10001ec5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001ec8:	80 7d e1 33          	cmp    BYTE PTR [ebp-0x1f],0x33
10001ecc:	75 06                	jne    10001ed4 <runRemoteInstall(void*)+0x519>
10001ece:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10001ed1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001ed4:	80 7d e1 35          	cmp    BYTE PTR [ebp-0x1f],0x35
10001ed8:	75 0b                	jne    10001ee5 <runRemoteInstall(void*)+0x52a>
10001eda:	a1 00 00 00 00       	mov    eax,ds:0x0	10001edb: R_386_32	term
10001edf:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
10001ee2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001ee5:	80 7d e1 36          	cmp    BYTE PTR [ebp-0x1f],0x36
10001ee9:	75 0b                	jne    10001ef6 <runRemoteInstall(void*)+0x53b>
10001eeb:	a1 00 00 00 00       	mov    eax,ds:0x0	10001eec: R_386_32	term
10001ef0:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10001ef3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001ef6:	80 7d e2 31          	cmp    BYTE PTR [ebp-0x1e],0x31
10001efa:	75 09                	jne    10001f05 <runRemoteInstall(void*)+0x54a>
10001efc:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10001eff:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
10001f02:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10001f05:	80 7d e2 32          	cmp    BYTE PTR [ebp-0x1e],0x32
10001f09:	75 09                	jne    10001f14 <runRemoteInstall(void*)+0x559>
10001f0b:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10001f0e:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
10001f11:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10001f14:	80 7d e2 33          	cmp    BYTE PTR [ebp-0x1e],0x33
10001f18:	75 09                	jne    10001f23 <runRemoteInstall(void*)+0x568>
10001f1a:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10001f1d:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
10001f20:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10001f23:	83 45 f4 03          	add    DWORD PTR [ebp-0xc],0x3
10001f27:	e9 bf fa ff ff       	jmp    100019eb <runRemoteInstall(void*)+0x30>
10001f2c:	80 7d e3 63          	cmp    BYTE PTR [ebp-0x1d],0x63
10001f30:	75 0f                	jne    10001f41 <runRemoteInstall(void*)+0x586>
10001f32:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10001f34: R_386_32	installKey
10001f39:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001f3c:	e9 aa fa ff ff       	jmp    100019eb <runRemoteInstall(void*)+0x30>
10001f41:	80 7d e3 62          	cmp    BYTE PTR [ebp-0x1d],0x62
10001f45:	75 0f                	jne    10001f56 <runRemoteInstall(void*)+0x59b>
10001f47:	c6 05 00 00 00 00 08 	mov    BYTE PTR ds:0x0,0x8	10001f49: R_386_32	installKey
10001f4e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001f51:	e9 95 fa ff ff       	jmp    100019eb <runRemoteInstall(void*)+0x30>
10001f56:	80 7d e3 6e          	cmp    BYTE PTR [ebp-0x1d],0x6e
10001f5a:	75 0f                	jne    10001f6b <runRemoteInstall(void*)+0x5b0>
10001f5c:	c6 05 00 00 00 00 0a 	mov    BYTE PTR ds:0x0,0xa	10001f5e: R_386_32	installKey
10001f63:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001f66:	e9 80 fa ff ff       	jmp    100019eb <runRemoteInstall(void*)+0x30>
10001f6b:	80 7d e3 25          	cmp    BYTE PTR [ebp-0x1d],0x25
10001f6f:	75 0f                	jne    10001f80 <runRemoteInstall(void*)+0x5c5>
10001f71:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10001f73: R_386_32	blockUserTyping
10001f78:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001f7b:	e9 6b fa ff ff       	jmp    100019eb <runRemoteInstall(void*)+0x30>
10001f80:	80 7d e3 24          	cmp    BYTE PTR [ebp-0x1d],0x24
10001f84:	75 0f                	jne    10001f95 <runRemoteInstall(void*)+0x5da>
10001f86:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10001f88: R_386_32	blockUserTyping
10001f8d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001f90:	e9 56 fa ff ff       	jmp    100019eb <runRemoteInstall(void*)+0x30>
10001f95:	80 7d e3 75          	cmp    BYTE PTR [ebp-0x1d],0x75
10001f99:	75 0f                	jne    10001faa <runRemoteInstall(void*)+0x5ef>
10001f9b:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10001f9d: R_386_32	installKey
10001fa2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001fa5:	e9 41 fa ff ff       	jmp    100019eb <runRemoteInstall(void*)+0x30>
10001faa:	80 7d e3 64          	cmp    BYTE PTR [ebp-0x1d],0x64
10001fae:	75 0f                	jne    10001fbf <runRemoteInstall(void*)+0x604>
10001fb0:	c6 05 00 00 00 00 02 	mov    BYTE PTR ds:0x0,0x2	10001fb2: R_386_32	installKey
10001fb7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001fba:	e9 2c fa ff ff       	jmp    100019eb <runRemoteInstall(void*)+0x30>
10001fbf:	80 7d e3 6c          	cmp    BYTE PTR [ebp-0x1d],0x6c
10001fc3:	75 0f                	jne    10001fd4 <runRemoteInstall(void*)+0x619>
10001fc5:	c6 05 00 00 00 00 03 	mov    BYTE PTR ds:0x0,0x3	10001fc7: R_386_32	installKey
10001fcc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001fcf:	e9 17 fa ff ff       	jmp    100019eb <runRemoteInstall(void*)+0x30>
10001fd4:	80 7d e3 72          	cmp    BYTE PTR [ebp-0x1d],0x72
10001fd8:	75 0f                	jne    10001fe9 <runRemoteInstall(void*)+0x62e>
10001fda:	c6 05 00 00 00 00 04 	mov    BYTE PTR ds:0x0,0x4	10001fdc: R_386_32	installKey
10001fe1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001fe4:	e9 02 fa ff ff       	jmp    100019eb <runRemoteInstall(void*)+0x30>
10001fe9:	80 7d e3 70          	cmp    BYTE PTR [ebp-0x1d],0x70
10001fed:	75 0f                	jne    10001ffe <runRemoteInstall(void*)+0x643>
10001fef:	c6 05 00 00 00 00 7d 	mov    BYTE PTR ds:0x0,0x7d	10001ff1: R_386_32	installKey
10001ff6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001ff9:	e9 ed f9 ff ff       	jmp    100019eb <runRemoteInstall(void*)+0x30>
10001ffe:	80 7d e3 50          	cmp    BYTE PTR [ebp-0x1d],0x50
10002002:	75 0f                	jne    10002013 <runRemoteInstall(void*)+0x658>
10002004:	c6 05 00 00 00 00 7e 	mov    BYTE PTR ds:0x0,0x7e	10002006: R_386_32	installKey
1000200b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000200e:	e9 d8 f9 ff ff       	jmp    100019eb <runRemoteInstall(void*)+0x30>
10002013:	80 7d e3 74          	cmp    BYTE PTR [ebp-0x1d],0x74
10002017:	75 0f                	jne    10002028 <runRemoteInstall(void*)+0x66d>
10002019:	c6 05 00 00 00 00 09 	mov    BYTE PTR ds:0x0,0x9	1000201b: R_386_32	installKey
10002020:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10002023:	e9 c3 f9 ff ff       	jmp    100019eb <runRemoteInstall(void*)+0x30>
10002028:	80 7d e3 54          	cmp    BYTE PTR [ebp-0x1d],0x54
1000202c:	75 0f                	jne    1000203d <runRemoteInstall(void*)+0x682>
1000202e:	c6 05 00 00 00 00 7f 	mov    BYTE PTR ds:0x0,0x7f	10002030: R_386_32	installKey
10002035:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10002038:	e9 ae f9 ff ff       	jmp    100019eb <runRemoteInstall(void*)+0x30>
1000203d:	80 7d e3 65          	cmp    BYTE PTR [ebp-0x1d],0x65
10002041:	75 0f                	jne    10002052 <runRemoteInstall(void*)+0x697>
10002043:	c6 05 00 00 00 00 1b 	mov    BYTE PTR ds:0x0,0x1b	10002045: R_386_32	installKey
1000204a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000204d:	e9 99 f9 ff ff       	jmp    100019eb <runRemoteInstall(void*)+0x30>
10002052:	80 7d e3 6b          	cmp    BYTE PTR [ebp-0x1d],0x6b
10002056:	75 13                	jne    1000206b <runRemoteInstall(void*)+0x6b0>
10002058:	a0 00 00 00 00       	mov    al,ds:0x0	10002059: R_386_32	installKey
1000205d:	0f be c0             	movsx  eax,al
10002060:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10002063:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10002066:	e9 80 f9 ff ff       	jmp    100019eb <runRemoteInstall(void*)+0x30>
1000206b:	80 7d e3 77          	cmp    BYTE PTR [ebp-0x1d],0x77
1000206f:	75 26                	jne    10002097 <runRemoteInstall(void*)+0x6dc>
10002071:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10002074:	a0 00 00 00 00       	mov    al,ds:0x0	10002075: R_386_32	installKey
10002079:	84 c0                	test   al,al
1000207b:	0f 95 c0             	setne  al
1000207e:	84 c0                	test   al,al
10002080:	0f 84 65 f9 ff ff    	je     100019eb <runRemoteInstall(void*)+0x30>
10002086:	83 ec 08             	sub    esp,0x8
10002089:	6a 00                	push   0x0
1000208b:	6a 32                	push   0x32
1000208d:	e8 fc ff ff ff       	call   1000208e <runRemoteInstall(void*)+0x6d3>	1000208e: R_386_PC32	milliTenthSleep(unsigned long long)
10002092:	83 c4 10             	add    esp,0x10
10002095:	eb dd                	jmp    10002074 <runRemoteInstall(void*)+0x6b9>
10002097:	80 7d e3 2f          	cmp    BYTE PTR [ebp-0x1d],0x2f
1000209b:	0f 85 4a f9 ff ff    	jne    100019eb <runRemoteInstall(void*)+0x30>
100020a1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100020a4:	a0 00 00 00 00       	mov    al,ds:0x0	100020a5: R_386_32	installKey
100020a9:	84 c0                	test   al,al
100020ab:	0f 94 c0             	sete   al
100020ae:	84 c0                	test   al,al
100020b0:	0f 84 35 f9 ff ff    	je     100019eb <runRemoteInstall(void*)+0x30>
100020b6:	83 ec 08             	sub    esp,0x8
100020b9:	6a 00                	push   0x0
100020bb:	6a 32                	push   0x32
100020bd:	e8 fc ff ff ff       	call   100020be <runRemoteInstall(void*)+0x703>	100020be: R_386_PC32	milliTenthSleep(unsigned long long)
100020c2:	83 c4 10             	add    esp,0x10
100020c5:	eb dd                	jmp    100020a4 <runRemoteInstall(void*)+0x6e9>
100020c7:	90                   	nop
100020c8:	e9 1e f9 ff ff       	jmp    100019eb <runRemoteInstall(void*)+0x30>
100020cd:	90                   	nop
100020ce:	e9 18 f9 ff ff       	jmp    100019eb <runRemoteInstall(void*)+0x30>
100020d3:	83 ec 08             	sub    esp,0x8
100020d6:	6a 00                	push   0x0
100020d8:	6a 05                	push   0x5
100020da:	e8 fc ff ff ff       	call   100020db <runRemoteInstall(void*)+0x720>	100020db: R_386_PC32	sleep(unsigned long long)
100020df:	83 c4 10             	add    esp,0x10
100020e2:	eb ef                	jmp    100020d3 <runRemoteInstall(void*)+0x718>

100020e4 <bootInstallKeybrd(KeyboardToken, bool*)>:
100020e4:	55                   	push   ebp
100020e5:	89 e5                	mov    ebp,esp
100020e7:	a0 00 00 00 00       	mov    al,ds:0x0	100020e8: R_386_32	blockUserTyping
100020ec:	84 c0                	test   al,al
100020ee:	0f 85 b6 00 00 00    	jne    100021aa <bootInstallKeybrd(KeyboardToken, bool*)+0xc6>
100020f4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100020f7:	05 04 01 00 00       	add    eax,0x104
100020fc:	8a 00                	mov    al,BYTE PTR [eax]
100020fe:	84 c0                	test   al,al
10002100:	74 15                	je     10002117 <bootInstallKeybrd(KeyboardToken, bool*)+0x33>
10002102:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002105:	66 83 f8 09          	cmp    ax,0x9
10002109:	75 0c                	jne    10002117 <bootInstallKeybrd(KeyboardToken, bool*)+0x33>
1000210b:	c6 05 00 00 00 00 7f 	mov    BYTE PTR ds:0x0,0x7f	1000210d: R_386_32	installKey
10002112:	e9 97 00 00 00       	jmp    100021ae <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
10002117:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
1000211a:	84 c0                	test   al,al
1000211c:	0f 85 8b 00 00 00    	jne    100021ad <bootInstallKeybrd(KeyboardToken, bool*)+0xc9>
10002122:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002125:	66 3d 0a 02          	cmp    ax,0x20a
10002129:	75 09                	jne    10002134 <bootInstallKeybrd(KeyboardToken, bool*)+0x50>
1000212b:	c6 05 00 00 00 00 1b 	mov    BYTE PTR ds:0x0,0x1b	1000212d: R_386_32	installKey
10002132:	eb 7a                	jmp    100021ae <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
10002134:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002137:	66 3d 0d 02          	cmp    ax,0x20d
1000213b:	75 09                	jne    10002146 <bootInstallKeybrd(KeyboardToken, bool*)+0x62>
1000213d:	c6 05 00 00 00 00 03 	mov    BYTE PTR ds:0x0,0x3	1000213f: R_386_32	installKey
10002144:	eb 68                	jmp    100021ae <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
10002146:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002149:	66 3d 0e 02          	cmp    ax,0x20e
1000214d:	75 09                	jne    10002158 <bootInstallKeybrd(KeyboardToken, bool*)+0x74>
1000214f:	c6 05 00 00 00 00 04 	mov    BYTE PTR ds:0x0,0x4	10002151: R_386_32	installKey
10002156:	eb 56                	jmp    100021ae <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
10002158:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000215b:	66 3d 0b 02          	cmp    ax,0x20b
1000215f:	75 09                	jne    1000216a <bootInstallKeybrd(KeyboardToken, bool*)+0x86>
10002161:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10002163: R_386_32	installKey
10002168:	eb 44                	jmp    100021ae <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
1000216a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000216d:	66 3d 0c 02          	cmp    ax,0x20c
10002171:	75 09                	jne    1000217c <bootInstallKeybrd(KeyboardToken, bool*)+0x98>
10002173:	c6 05 00 00 00 00 02 	mov    BYTE PTR ds:0x0,0x2	10002175: R_386_32	installKey
1000217a:	eb 32                	jmp    100021ae <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
1000217c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000217f:	66 3d 04 02          	cmp    ax,0x204
10002183:	75 09                	jne    1000218e <bootInstallKeybrd(KeyboardToken, bool*)+0xaa>
10002185:	c6 05 00 00 00 00 7d 	mov    BYTE PTR ds:0x0,0x7d	10002187: R_386_32	installKey
1000218c:	eb 20                	jmp    100021ae <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
1000218e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002191:	66 3d 05 02          	cmp    ax,0x205
10002195:	75 09                	jne    100021a0 <bootInstallKeybrd(KeyboardToken, bool*)+0xbc>
10002197:	c6 05 00 00 00 00 7e 	mov    BYTE PTR ds:0x0,0x7e	10002199: R_386_32	installKey
1000219e:	eb 0e                	jmp    100021ae <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
100021a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021a3:	a2 00 00 00 00       	mov    ds:0x0,al	100021a4: R_386_32	installKey
100021a8:	eb 04                	jmp    100021ae <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
100021aa:	90                   	nop
100021ab:	eb 01                	jmp    100021ae <bootInstallKeybrd(KeyboardToken, bool*)+0xca>
100021ad:	90                   	nop
100021ae:	5d                   	pop    ebp
100021af:	c3                   	ret    

100021b0 <bootInstallTasks(int)>:
100021b0:	55                   	push   ebp
100021b1:	89 e5                	mov    ebp,esp
100021b3:	83 ec 08             	sub    esp,0x8
100021b6:	a1 00 00 00 00       	mov    eax,ds:0x0	100021b7: R_386_32	term
100021bb:	83 ec 04             	sub    esp,0x4
100021be:	6a 08                	push   0x8
100021c0:	6a 18                	push   0x18
100021c2:	50                   	push   eax
100021c3:	e8 fc ff ff ff       	call   100021c4 <bootInstallTasks(int)+0x14>	100021c4: R_386_PC32	VgaText::setCursor(int, int)
100021c8:	83 c4 10             	add    esp,0x10
100021cb:	a1 00 00 00 00       	mov    eax,ds:0x0	100021cc: R_386_32	term
100021d0:	83 ec 08             	sub    esp,0x8
100021d3:	68 b0 b1 00 10       	push   0x1000b1b0	100021d4: R_386_32	.text
100021d8:	50                   	push   eax
100021d9:	e8 fc ff ff ff       	call   100021da <bootInstallTasks(int)+0x2a>	100021da: R_386_PC32	VgaText::puts(char const*)
100021de:	83 c4 10             	add    esp,0x10
100021e1:	a1 00 00 00 00       	mov    eax,ds:0x0	100021e2: R_386_32	term
100021e6:	83 ec 04             	sub    esp,0x4
100021e9:	6a 0a                	push   0xa
100021eb:	6a 1a                	push   0x1a
100021ed:	50                   	push   eax
100021ee:	e8 fc ff ff ff       	call   100021ef <bootInstallTasks(int)+0x3f>	100021ef: R_386_PC32	VgaText::setCursor(int, int)
100021f3:	83 c4 10             	add    esp,0x10
100021f6:	a1 00 00 00 00       	mov    eax,ds:0x0	100021f7: R_386_32	term
100021fb:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
100021ff:	75 07                	jne    10002208 <bootInstallTasks(int)+0x58>
10002201:	ba d8 b1 00 10       	mov    edx,0x1000b1d8	10002202: R_386_32	.text
10002206:	eb 05                	jmp    1000220d <bootInstallTasks(int)+0x5d>
10002208:	ba db b1 00 10       	mov    edx,0x1000b1db	10002209: R_386_32	.text
1000220d:	83 ec 08             	sub    esp,0x8
10002210:	52                   	push   edx
10002211:	50                   	push   eax
10002212:	e8 fc ff ff ff       	call   10002213 <bootInstallTasks(int)+0x63>	10002213: R_386_PC32	VgaText::puts(char const*)
10002217:	83 c4 10             	add    esp,0x10
1000221a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000221b: R_386_32	term
1000221f:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10002223:	78 07                	js     1000222c <bootInstallTasks(int)+0x7c>
10002225:	ba 00 00 00 00       	mov    edx,0x0
1000222a:	eb 05                	jmp    10002231 <bootInstallTasks(int)+0x81>
1000222c:	ba 07 00 00 00       	mov    edx,0x7
10002231:	6a 0f                	push   0xf
10002233:	52                   	push   edx
10002234:	68 de b1 00 10       	push   0x1000b1de	10002235: R_386_32	.text
10002239:	50                   	push   eax
1000223a:	e8 fc ff ff ff       	call   1000223b <bootInstallTasks(int)+0x8b>	1000223b: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000223f:	83 c4 10             	add    esp,0x10
10002242:	a1 00 00 00 00       	mov    eax,ds:0x0	10002243: R_386_32	term
10002247:	83 ec 04             	sub    esp,0x4
1000224a:	6a 0b                	push   0xb
1000224c:	6a 1a                	push   0x1a
1000224e:	50                   	push   eax
1000224f:	e8 fc ff ff ff       	call   10002250 <bootInstallTasks(int)+0xa0>	10002250: R_386_PC32	VgaText::setCursor(int, int)
10002254:	83 c4 10             	add    esp,0x10
10002257:	a1 00 00 00 00       	mov    eax,ds:0x0	10002258: R_386_32	term
1000225c:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
10002260:	75 07                	jne    10002269 <bootInstallTasks(int)+0xb9>
10002262:	ba d8 b1 00 10       	mov    edx,0x1000b1d8	10002263: R_386_32	.text
10002267:	eb 05                	jmp    1000226e <bootInstallTasks(int)+0xbe>
10002269:	ba db b1 00 10       	mov    edx,0x1000b1db	1000226a: R_386_32	.text
1000226e:	83 ec 08             	sub    esp,0x8
10002271:	52                   	push   edx
10002272:	50                   	push   eax
10002273:	e8 fc ff ff ff       	call   10002274 <bootInstallTasks(int)+0xc4>	10002274: R_386_PC32	VgaText::puts(char const*)
10002278:	83 c4 10             	add    esp,0x10
1000227b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000227c: R_386_32	term
10002280:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10002284:	7e 07                	jle    1000228d <bootInstallTasks(int)+0xdd>
10002286:	ba 00 00 00 00       	mov    edx,0x0
1000228b:	eb 05                	jmp    10002292 <bootInstallTasks(int)+0xe2>
1000228d:	ba 07 00 00 00       	mov    edx,0x7
10002292:	6a 0f                	push   0xf
10002294:	52                   	push   edx
10002295:	68 f6 b1 00 10       	push   0x1000b1f6	10002296: R_386_32	.text
1000229a:	50                   	push   eax
1000229b:	e8 fc ff ff ff       	call   1000229c <bootInstallTasks(int)+0xec>	1000229c: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100022a0:	83 c4 10             	add    esp,0x10
100022a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100022a4: R_386_32	term
100022a8:	83 ec 04             	sub    esp,0x4
100022ab:	6a 0c                	push   0xc
100022ad:	6a 1a                	push   0x1a
100022af:	50                   	push   eax
100022b0:	e8 fc ff ff ff       	call   100022b1 <bootInstallTasks(int)+0x101>	100022b1: R_386_PC32	VgaText::setCursor(int, int)
100022b5:	83 c4 10             	add    esp,0x10
100022b8:	a1 00 00 00 00       	mov    eax,ds:0x0	100022b9: R_386_32	term
100022bd:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
100022c1:	75 07                	jne    100022ca <bootInstallTasks(int)+0x11a>
100022c3:	ba d8 b1 00 10       	mov    edx,0x1000b1d8	100022c4: R_386_32	.text
100022c8:	eb 05                	jmp    100022cf <bootInstallTasks(int)+0x11f>
100022ca:	ba db b1 00 10       	mov    edx,0x1000b1db	100022cb: R_386_32	.text
100022cf:	83 ec 08             	sub    esp,0x8
100022d2:	52                   	push   edx
100022d3:	50                   	push   eax
100022d4:	e8 fc ff ff ff       	call   100022d5 <bootInstallTasks(int)+0x125>	100022d5: R_386_PC32	VgaText::puts(char const*)
100022d9:	83 c4 10             	add    esp,0x10
100022dc:	a1 00 00 00 00       	mov    eax,ds:0x0	100022dd: R_386_32	term
100022e1:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
100022e5:	7e 07                	jle    100022ee <bootInstallTasks(int)+0x13e>
100022e7:	ba 00 00 00 00       	mov    edx,0x0
100022ec:	eb 05                	jmp    100022f3 <bootInstallTasks(int)+0x143>
100022ee:	ba 07 00 00 00       	mov    edx,0x7
100022f3:	6a 0f                	push   0xf
100022f5:	52                   	push   edx
100022f6:	68 0c b2 00 10       	push   0x1000b20c	100022f7: R_386_32	.text
100022fb:	50                   	push   eax
100022fc:	e8 fc ff ff ff       	call   100022fd <bootInstallTasks(int)+0x14d>	100022fd: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002301:	83 c4 10             	add    esp,0x10
10002304:	a1 00 00 00 00       	mov    eax,ds:0x0	10002305: R_386_32	term
10002309:	83 ec 04             	sub    esp,0x4
1000230c:	6a 0d                	push   0xd
1000230e:	6a 1a                	push   0x1a
10002310:	50                   	push   eax
10002311:	e8 fc ff ff ff       	call   10002312 <bootInstallTasks(int)+0x162>	10002312: R_386_PC32	VgaText::setCursor(int, int)
10002316:	83 c4 10             	add    esp,0x10
10002319:	a1 00 00 00 00       	mov    eax,ds:0x0	1000231a: R_386_32	term
1000231e:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10002322:	75 07                	jne    1000232b <bootInstallTasks(int)+0x17b>
10002324:	ba d8 b1 00 10       	mov    edx,0x1000b1d8	10002325: R_386_32	.text
10002329:	eb 05                	jmp    10002330 <bootInstallTasks(int)+0x180>
1000232b:	ba db b1 00 10       	mov    edx,0x1000b1db	1000232c: R_386_32	.text
10002330:	83 ec 08             	sub    esp,0x8
10002333:	52                   	push   edx
10002334:	50                   	push   eax
10002335:	e8 fc ff ff ff       	call   10002336 <bootInstallTasks(int)+0x186>	10002336: R_386_PC32	VgaText::puts(char const*)
1000233a:	83 c4 10             	add    esp,0x10
1000233d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000233e: R_386_32	term
10002342:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10002346:	7e 07                	jle    1000234f <bootInstallTasks(int)+0x19f>
10002348:	ba 00 00 00 00       	mov    edx,0x0
1000234d:	eb 05                	jmp    10002354 <bootInstallTasks(int)+0x1a4>
1000234f:	ba 07 00 00 00       	mov    edx,0x7
10002354:	6a 0f                	push   0xf
10002356:	52                   	push   edx
10002357:	68 22 b2 00 10       	push   0x1000b222	10002358: R_386_32	.text
1000235c:	50                   	push   eax
1000235d:	e8 fc ff ff ff       	call   1000235e <bootInstallTasks(int)+0x1ae>	1000235e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002362:	83 c4 10             	add    esp,0x10
10002365:	a1 00 00 00 00       	mov    eax,ds:0x0	10002366: R_386_32	term
1000236a:	83 ec 04             	sub    esp,0x4
1000236d:	6a 0e                	push   0xe
1000236f:	6a 1a                	push   0x1a
10002371:	50                   	push   eax
10002372:	e8 fc ff ff ff       	call   10002373 <bootInstallTasks(int)+0x1c3>	10002373: R_386_PC32	VgaText::setCursor(int, int)
10002377:	83 c4 10             	add    esp,0x10
1000237a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000237b: R_386_32	term
1000237f:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10002383:	75 07                	jne    1000238c <bootInstallTasks(int)+0x1dc>
10002385:	ba d8 b1 00 10       	mov    edx,0x1000b1d8	10002386: R_386_32	.text
1000238a:	eb 05                	jmp    10002391 <bootInstallTasks(int)+0x1e1>
1000238c:	ba db b1 00 10       	mov    edx,0x1000b1db	1000238d: R_386_32	.text
10002391:	83 ec 08             	sub    esp,0x8
10002394:	52                   	push   edx
10002395:	50                   	push   eax
10002396:	e8 fc ff ff ff       	call   10002397 <bootInstallTasks(int)+0x1e7>	10002397: R_386_PC32	VgaText::puts(char const*)
1000239b:	83 c4 10             	add    esp,0x10
1000239e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000239f: R_386_32	term
100023a3:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
100023a7:	7e 07                	jle    100023b0 <bootInstallTasks(int)+0x200>
100023a9:	ba 00 00 00 00       	mov    edx,0x0
100023ae:	eb 05                	jmp    100023b5 <bootInstallTasks(int)+0x205>
100023b0:	ba 07 00 00 00       	mov    edx,0x7
100023b5:	6a 0f                	push   0xf
100023b7:	52                   	push   edx
100023b8:	68 36 b2 00 10       	push   0x1000b236	100023b9: R_386_32	.text
100023bd:	50                   	push   eax
100023be:	e8 fc ff ff ff       	call   100023bf <bootInstallTasks(int)+0x20f>	100023bf: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100023c3:	83 c4 10             	add    esp,0x10
100023c6:	a1 00 00 00 00       	mov    eax,ds:0x0	100023c7: R_386_32	term
100023cb:	83 ec 04             	sub    esp,0x4
100023ce:	6a 0f                	push   0xf
100023d0:	6a 1a                	push   0x1a
100023d2:	50                   	push   eax
100023d3:	e8 fc ff ff ff       	call   100023d4 <bootInstallTasks(int)+0x224>	100023d4: R_386_PC32	VgaText::setCursor(int, int)
100023d8:	83 c4 10             	add    esp,0x10
100023db:	a1 00 00 00 00       	mov    eax,ds:0x0	100023dc: R_386_32	term
100023e0:	83 7d 08 05          	cmp    DWORD PTR [ebp+0x8],0x5
100023e4:	75 07                	jne    100023ed <bootInstallTasks(int)+0x23d>
100023e6:	ba d8 b1 00 10       	mov    edx,0x1000b1d8	100023e7: R_386_32	.text
100023eb:	eb 05                	jmp    100023f2 <bootInstallTasks(int)+0x242>
100023ed:	ba db b1 00 10       	mov    edx,0x1000b1db	100023ee: R_386_32	.text
100023f2:	83 ec 08             	sub    esp,0x8
100023f5:	52                   	push   edx
100023f6:	50                   	push   eax
100023f7:	e8 fc ff ff ff       	call   100023f8 <bootInstallTasks(int)+0x248>	100023f8: R_386_PC32	VgaText::puts(char const*)
100023fc:	83 c4 10             	add    esp,0x10
100023ff:	a1 00 00 00 00       	mov    eax,ds:0x0	10002400: R_386_32	term
10002404:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10002408:	7e 07                	jle    10002411 <bootInstallTasks(int)+0x261>
1000240a:	ba 00 00 00 00       	mov    edx,0x0
1000240f:	eb 05                	jmp    10002416 <bootInstallTasks(int)+0x266>
10002411:	ba 07 00 00 00       	mov    edx,0x7
10002416:	6a 0f                	push   0xf
10002418:	52                   	push   edx
10002419:	68 4e b2 00 10       	push   0x1000b24e	1000241a: R_386_32	.text
1000241e:	50                   	push   eax
1000241f:	e8 fc ff ff ff       	call   10002420 <bootInstallTasks(int)+0x270>	10002420: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002424:	83 c4 10             	add    esp,0x10
10002427:	90                   	nop
10002428:	c9                   	leave  
10002429:	c3                   	ret    

1000242a <ror(unsigned long long, int, int)>:
1000242a:	55                   	push   ebp
1000242b:	89 e5                	mov    ebp,esp
1000242d:	56                   	push   esi
1000242e:	53                   	push   ebx
1000242f:	83 ec 20             	sub    esp,0x20
10002432:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002435:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10002438:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000243b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
1000243e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10002441:	ba 01 00 00 00       	mov    edx,0x1
10002446:	88 c1                	mov    cl,al
10002448:	d3 e2                	shl    edx,cl
1000244a:	89 d0                	mov    eax,edx
1000244c:	48                   	dec    eax
1000244d:	99                   	cdq    
1000244e:	89 c1                	mov    ecx,eax
10002450:	23 4d e0             	and    ecx,DWORD PTR [ebp-0x20]
10002453:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10002456:	89 d0                	mov    eax,edx
10002458:	23 45 e4             	and    eax,DWORD PTR [ebp-0x1c]
1000245b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
1000245e:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10002461:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002464:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10002467:	0f ad d0             	shrd   eax,edx,cl
1000246a:	d3 ea                	shr    edx,cl
1000246c:	f6 c1 20             	test   cl,0x20
1000246f:	74 04                	je     10002475 <ror(unsigned long long, int, int)+0x4b>
10002471:	89 d0                	mov    eax,edx
10002473:	31 d2                	xor    edx,edx
10002475:	89 c3                	mov    ebx,eax
10002477:	89 d6                	mov    esi,edx
10002479:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000247c:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
1000247f:	89 c1                	mov    ecx,eax
10002481:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002484:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10002487:	0f a5 c2             	shld   edx,eax,cl
1000248a:	d3 e0                	shl    eax,cl
1000248c:	f6 c1 20             	test   cl,0x20
1000248f:	74 04                	je     10002495 <ror(unsigned long long, int, int)+0x6b>
10002491:	89 c2                	mov    edx,eax
10002493:	31 c0                	xor    eax,eax
10002495:	89 d1                	mov    ecx,edx
10002497:	89 c2                	mov    edx,eax
10002499:	89 d8                	mov    eax,ebx
1000249b:	09 d0                	or     eax,edx
1000249d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
100024a0:	89 f0                	mov    eax,esi
100024a2:	09 c8                	or     eax,ecx
100024a4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100024a7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100024aa:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100024ad:	83 c4 20             	add    esp,0x20
100024b0:	5b                   	pop    ebx
100024b1:	5e                   	pop    esi
100024b2:	5d                   	pop    ebp
100024b3:	c3                   	ret    

100024b4 <swapBits(unsigned long long, unsigned long long, unsigned long long)>:
100024b4:	55                   	push   ebp
100024b5:	89 e5                	mov    ebp,esp
100024b7:	56                   	push   esi
100024b8:	53                   	push   ebx
100024b9:	83 ec 40             	sub    esp,0x40
100024bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024bf:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100024c2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100024c5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100024c8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100024cb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
100024ce:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100024d1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100024d4:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100024d7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100024da:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
100024dd:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100024e0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
100024e3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100024e6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100024e9:	0f ad d0             	shrd   eax,edx,cl
100024ec:	d3 ea                	shr    edx,cl
100024ee:	f6 c1 20             	test   cl,0x20
100024f1:	74 04                	je     100024f7 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x43>
100024f3:	89 d0                	mov    eax,edx
100024f5:	31 d2                	xor    edx,edx
100024f7:	89 c3                	mov    ebx,eax
100024f9:	89 d6                	mov    esi,edx
100024fb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
100024fe:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002501:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10002504:	0f ad d0             	shrd   eax,edx,cl
10002507:	d3 ea                	shr    edx,cl
10002509:	f6 c1 20             	test   cl,0x20
1000250c:	74 04                	je     10002512 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x5e>
1000250e:	89 d0                	mov    eax,edx
10002510:	31 d2                	xor    edx,edx
10002512:	89 d1                	mov    ecx,edx
10002514:	89 c2                	mov    edx,eax
10002516:	89 d8                	mov    eax,ebx
10002518:	31 d0                	xor    eax,edx
1000251a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
1000251d:	89 f0                	mov    eax,esi
1000251f:	31 c8                	xor    eax,ecx
10002521:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10002524:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10002527:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
1000252a:	89 c6                	mov    esi,eax
1000252c:	83 e6 01             	and    esi,0x1
1000252f:	89 75 c8             	mov    DWORD PTR [ebp-0x38],esi
10002532:	89 d0                	mov    eax,edx
10002534:	83 e0 00             	and    eax,0x0
10002537:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
1000253a:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
1000253d:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
10002540:	89 c3                	mov    ebx,eax
10002542:	80 f7 00             	xor    bh,0x0
10002545:	89 5d b8             	mov    DWORD PTR [ebp-0x48],ebx
10002548:	89 d0                	mov    eax,edx
1000254a:	80 f4 00             	xor    ah,0x0
1000254d:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10002550:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
10002553:	8b 4d bc             	mov    ecx,DWORD PTR [ebp-0x44]
10002556:	89 c8                	mov    eax,ecx
10002558:	09 d0                	or     eax,edx
1000255a:	85 c0                	test   eax,eax
1000255c:	74 62                	je     100025c0 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x10c>
1000255e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10002561:	b8 01 00 00 00       	mov    eax,0x1
10002566:	ba 00 00 00 00       	mov    edx,0x0
1000256b:	0f a5 c2             	shld   edx,eax,cl
1000256e:	d3 e0                	shl    eax,cl
10002570:	f6 c1 20             	test   cl,0x20
10002573:	74 04                	je     10002579 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xc5>
10002575:	89 c2                	mov    edx,eax
10002577:	31 c0                	xor    eax,eax
10002579:	89 c3                	mov    ebx,eax
1000257b:	89 d6                	mov    esi,edx
1000257d:	89 d8                	mov    eax,ebx
1000257f:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10002582:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10002585:	89 f0                	mov    eax,esi
10002587:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
1000258a:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
1000258d:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10002590:	b8 01 00 00 00       	mov    eax,0x1
10002595:	ba 00 00 00 00       	mov    edx,0x0
1000259a:	0f a5 c2             	shld   edx,eax,cl
1000259d:	d3 e0                	shl    eax,cl
1000259f:	f6 c1 20             	test   cl,0x20
100025a2:	74 04                	je     100025a8 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xf4>
100025a4:	89 c2                	mov    edx,eax
100025a6:	31 c0                	xor    eax,eax
100025a8:	89 c1                	mov    ecx,eax
100025aa:	89 d3                	mov    ebx,edx
100025ac:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100025af:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
100025b2:	89 c6                	mov    esi,eax
100025b4:	31 ce                	xor    esi,ecx
100025b6:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
100025b9:	31 d3                	xor    ebx,edx
100025bb:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
100025be:	eb 0c                	jmp    100025cc <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x118>
100025c0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100025c3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100025c6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
100025c9:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
100025cc:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100025cf:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100025d2:	83 c4 40             	add    esp,0x40
100025d5:	5b                   	pop    ebx
100025d6:	5e                   	pop    esi
100025d7:	5d                   	pop    ebp
100025d8:	c3                   	ret    

100025d9 <getChecksum(unsigned int)>:
100025d9:	55                   	push   ebp
100025da:	89 e5                	mov    ebp,esp
100025dc:	56                   	push   esi
100025dd:	53                   	push   ebx
100025de:	83 ec 20             	sub    esp,0x20
100025e1:	66 c7 45 f6 49 4e    	mov    WORD PTR [ebp-0xa],0x4e49
100025e7:	66 c7 45 f4 79 6e    	mov    WORD PTR [ebp-0xc],0x6e79
100025ed:	66 c7 45 f2 67 61    	mov    WORD PTR [ebp-0xe],0x6167
100025f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025f6:	c1 e8 10             	shr    eax,0x10
100025f9:	89 c1                	mov    ecx,eax
100025fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025fe:	89 c2                	mov    edx,eax
10002600:	89 d0                	mov    eax,edx
10002602:	c1 e0 06             	shl    eax,0x6
10002605:	29 d0                	sub    eax,edx
10002607:	c1 e0 04             	shl    eax,0x4
1000260a:	01 d0                	add    eax,edx
1000260c:	31 c8                	xor    eax,ecx
1000260e:	66 89 45 f0          	mov    WORD PTR [ebp-0x10],ax
10002612:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10002616:	0f 84 b1 00 00 00    	je     100026cd <getChecksum(unsigned int)+0xf4>
1000261c:	b8 f4 02 00 00       	mov    eax,0x2f4
10002621:	ba 00 00 00 00       	mov    edx,0x0
10002626:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10002629:	89 c3                	mov    ebx,eax
1000262b:	be 00 00 00 00       	mov    esi,0x0
10002630:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002633:	ba 00 00 00 00       	mov    edx,0x0
10002638:	6a 1d                	push   0x1d
1000263a:	6a 05                	push   0x5
1000263c:	52                   	push   edx
1000263d:	50                   	push   eax
1000263e:	e8 fc ff ff ff       	call   1000263f <getChecksum(unsigned int)+0x66>	1000263f: R_386_PC32	ror(unsigned long long, int, int)
10002643:	83 c4 10             	add    esp,0x10
10002646:	05 52 3f 04 00       	add    eax,0x43f52
1000264b:	83 d2 00             	adc    edx,0x0
1000264e:	89 d9                	mov    ecx,ebx
10002650:	31 c1                	xor    ecx,eax
10002652:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
10002655:	31 d6                	xor    esi,edx
10002657:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
1000265a:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
1000265d:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10002661:	66 0f af c2          	imul   ax,dx
10002665:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
10002669:	b8 ea 00 00 00       	mov    eax,0xea
1000266e:	ba 00 00 00 00       	mov    edx,0x0
10002673:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10002676:	89 c3                	mov    ebx,eax
10002678:	be 00 00 00 00       	mov    esi,0x0
1000267d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002680:	ba 00 00 00 00       	mov    edx,0x0
10002685:	6a 1f                	push   0x1f
10002687:	6a 03                	push   0x3
10002689:	52                   	push   edx
1000268a:	50                   	push   eax
1000268b:	e8 fc ff ff ff       	call   1000268c <getChecksum(unsigned int)+0xb3>	1000268c: R_386_PC32	ror(unsigned long long, int, int)
10002690:	83 c4 10             	add    esp,0x10
10002693:	05 05 db 09 00       	add    eax,0x9db05
10002698:	83 d2 00             	adc    edx,0x0
1000269b:	89 d9                	mov    ecx,ebx
1000269d:	31 c1                	xor    ecx,eax
1000269f:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
100026a2:	31 d6                	xor    esi,edx
100026a4:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
100026a7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100026aa:	66 29 45 f4          	sub    WORD PTR [ebp-0xc],ax
100026ae:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
100026b2:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
100026b5:	25 d2 04 00 00       	and    eax,0x4d2
100026ba:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
100026be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100026c1:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
100026c5:	d1 6d 08             	shr    DWORD PTR [ebp+0x8],1
100026c8:	e9 45 ff ff ff       	jmp    10002612 <getChecksum(unsigned int)+0x39>
100026cd:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
100026d1:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
100026d4:	66 33 45 f2          	xor    ax,WORD PTR [ebp-0xe]
100026d8:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
100026db:	0f b7 c0             	movzx  eax,ax
100026de:	25 ff 7f 00 00       	and    eax,0x7fff
100026e3:	8d 65 f8             	lea    esp,[ebp-0x8]
100026e6:	5b                   	pop    ebx
100026e7:	5e                   	pop    esi
100026e8:	5d                   	pop    ebp
100026e9:	c3                   	ret    

100026ea <createKey(char*, unsigned int)>:
100026ea:	55                   	push   ebp
100026eb:	89 e5                	mov    ebp,esp
100026ed:	53                   	push   ebx
100026ee:	83 ec 34             	sub    esp,0x34
100026f1:	68 60 b2 00 10       	push   0x1000b260	100026f2: R_386_32	.text
100026f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100026f9:	e8 fc ff ff ff       	call   100026fa <createKey(char*, unsigned int)+0x10>	100026fa: R_386_PC32	strcpy
100026fe:	83 c4 08             	add    esp,0x8
10002701:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10002704:	bb 00 00 00 00       	mov    ebx,0x0
10002709:	89 c8                	mov    eax,ecx
1000270b:	89 da                	mov    edx,ebx
1000270d:	0f a4 c2 0f          	shld   edx,eax,0xf
10002711:	c1 e0 0f             	shl    eax,0xf
10002714:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10002717:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
1000271a:	83 ec 04             	sub    esp,0x4
1000271d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10002720:	e8 fc ff ff ff       	call   10002721 <createKey(char*, unsigned int)+0x37>	10002721: R_386_PC32	getChecksum(unsigned int)
10002725:	83 c4 08             	add    esp,0x8
10002728:	ba 00 00 00 00       	mov    edx,0x0
1000272d:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
10002730:	09 55 f4             	or     DWORD PTR [ebp-0xc],edx
10002733:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
1000273a:	81 7d ec db 24 00 00 	cmp    DWORD PTR [ebp-0x14],0x24db
10002741:	7f 7f                	jg     100027c2 <createKey(char*, unsigned int)+0xd8>
10002743:	81 75 f0 95 38 e4 b5 	xor    DWORD PTR [ebp-0x10],0xb5e43895
1000274a:	83 75 f4 37          	xor    DWORD PTR [ebp-0xc],0x37
1000274e:	6a 00                	push   0x0
10002750:	6a 08                	push   0x8
10002752:	6a 00                	push   0x0
10002754:	6a 03                	push   0x3
10002756:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10002759:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000275c:	e8 fc ff ff ff       	call   1000275d <createKey(char*, unsigned int)+0x73>	1000275d: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10002761:	83 c4 18             	add    esp,0x18
10002764:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10002767:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
1000276a:	6a 00                	push   0x0
1000276c:	6a 0c                	push   0xc
1000276e:	6a 00                	push   0x0
10002770:	6a 0d                	push   0xd
10002772:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10002775:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10002778:	e8 fc ff ff ff       	call   10002779 <createKey(char*, unsigned int)+0x8f>	10002779: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
1000277d:	83 c4 18             	add    esp,0x18
10002780:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10002783:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10002786:	6a 00                	push   0x0
10002788:	6a 16                	push   0x16
1000278a:	6a 00                	push   0x0
1000278c:	6a 25                	push   0x25
1000278e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10002791:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10002794:	e8 fc ff ff ff       	call   10002795 <createKey(char*, unsigned int)+0xab>	10002795: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10002799:	83 c4 18             	add    esp,0x18
1000279c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000279f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
100027a2:	6a 2a                	push   0x2a
100027a4:	6a 13                	push   0x13
100027a6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100027a9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100027ac:	e8 fc ff ff ff       	call   100027ad <createKey(char*, unsigned int)+0xc3>	100027ad: R_386_PC32	ror(unsigned long long, int, int)
100027b1:	83 c4 10             	add    esp,0x10
100027b4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100027b7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
100027ba:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100027bd:	e9 78 ff ff ff       	jmp    1000273a <createKey(char*, unsigned int)+0x50>
100027c2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027c5:	83 e0 0f             	and    eax,0xf
100027c8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
100027cb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027ce:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100027d1:	0f ac d0 04          	shrd   eax,edx,0x4
100027d5:	c1 ea 04             	shr    edx,0x4
100027d8:	89 c1                	mov    ecx,eax
100027da:	89 d3                	mov    ebx,edx
100027dc:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
100027df:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
100027e2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027e5:	83 e0 0f             	and    eax,0xf
100027e8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100027eb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027ee:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100027f1:	0f ac d0 04          	shrd   eax,edx,0x4
100027f5:	c1 ea 04             	shr    edx,0x4
100027f8:	89 c1                	mov    ecx,eax
100027fa:	89 d3                	mov    ebx,edx
100027fc:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
100027ff:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10002802:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002805:	83 e0 0f             	and    eax,0xf
10002808:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
1000280b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000280e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10002811:	0f ac d0 04          	shrd   eax,edx,0x4
10002815:	c1 ea 04             	shr    edx,0x4
10002818:	89 c1                	mov    ecx,eax
1000281a:	89 d3                	mov    ebx,edx
1000281c:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
1000281f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10002822:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002825:	25 ff 03 00 00       	and    eax,0x3ff
1000282a:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
1000282d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002830:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10002833:	0f ac d0 0a          	shrd   eax,edx,0xa
10002837:	c1 ea 0a             	shr    edx,0xa
1000283a:	89 c1                	mov    ecx,eax
1000283c:	89 d3                	mov    ebx,edx
1000283e:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10002841:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10002844:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002847:	25 ff 03 00 00       	and    eax,0x3ff
1000284c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
1000284f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002852:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10002855:	0f ac d0 0a          	shrd   eax,edx,0xa
10002859:	c1 ea 0a             	shr    edx,0xa
1000285c:	89 c1                	mov    ecx,eax
1000285e:	89 d3                	mov    ebx,edx
10002860:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10002863:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10002866:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002869:	25 ff 03 00 00       	and    eax,0x3ff
1000286e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10002871:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002874:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10002877:	0f ac d0 0a          	shrd   eax,edx,0xa
1000287b:	c1 ea 0a             	shr    edx,0xa
1000287e:	89 c1                	mov    ecx,eax
10002880:	89 d3                	mov    ebx,edx
10002882:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10002885:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10002888:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000288b:	05 00 00 00 00       	add    eax,0x0	1000288c: R_386_32	lookupA
10002890:	8a 10                	mov    dl,BYTE PTR [eax]
10002892:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002895:	88 10                	mov    BYTE PTR [eax],dl
10002897:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000289a:	8d 50 01             	lea    edx,[eax+0x1]
1000289d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100028a0:	05 00 00 00 00       	add    eax,0x0	100028a1: R_386_32	lookupA
100028a5:	8a 00                	mov    al,BYTE PTR [eax]
100028a7:	88 02                	mov    BYTE PTR [edx],al
100028a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100028ac:	8d 50 0f             	lea    edx,[eax+0xf]
100028af:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100028b2:	05 00 00 00 00       	add    eax,0x0	100028b3: R_386_32	lookupA
100028b7:	8a 00                	mov    al,BYTE PTR [eax]
100028b9:	88 02                	mov    BYTE PTR [edx],al
100028bb:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
100028be:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
100028c3:	f7 e9                	imul   ecx
100028c5:	c1 fa 05             	sar    edx,0x5
100028c8:	89 c8                	mov    eax,ecx
100028ca:	c1 f8 1f             	sar    eax,0x1f
100028cd:	29 c2                	sub    edx,eax
100028cf:	89 d0                	mov    eax,edx
100028d1:	b9 0a 00 00 00       	mov    ecx,0xa
100028d6:	99                   	cdq    
100028d7:	f7 f9                	idiv   ecx
100028d9:	89 d0                	mov    eax,edx
100028db:	8d 50 30             	lea    edx,[eax+0x30]
100028de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100028e1:	83 c0 03             	add    eax,0x3
100028e4:	88 10                	mov    BYTE PTR [eax],dl
100028e6:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
100028e9:	b8 67 66 66 66       	mov    eax,0x66666667
100028ee:	f7 e9                	imul   ecx
100028f0:	c1 fa 02             	sar    edx,0x2
100028f3:	89 c8                	mov    eax,ecx
100028f5:	c1 f8 1f             	sar    eax,0x1f
100028f8:	89 d1                	mov    ecx,edx
100028fa:	29 c1                	sub    ecx,eax
100028fc:	b8 67 66 66 66       	mov    eax,0x66666667
10002901:	f7 e9                	imul   ecx
10002903:	c1 fa 02             	sar    edx,0x2
10002906:	89 c8                	mov    eax,ecx
10002908:	c1 f8 1f             	sar    eax,0x1f
1000290b:	29 c2                	sub    edx,eax
1000290d:	89 d0                	mov    eax,edx
1000290f:	c1 e0 02             	shl    eax,0x2
10002912:	01 d0                	add    eax,edx
10002914:	01 c0                	add    eax,eax
10002916:	29 c1                	sub    ecx,eax
10002918:	89 ca                	mov    edx,ecx
1000291a:	88 d0                	mov    al,dl
1000291c:	8d 50 30             	lea    edx,[eax+0x30]
1000291f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002922:	83 c0 04             	add    eax,0x4
10002925:	88 10                	mov    BYTE PTR [eax],dl
10002927:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
1000292a:	b9 0a 00 00 00       	mov    ecx,0xa
1000292f:	99                   	cdq    
10002930:	f7 f9                	idiv   ecx
10002932:	89 d0                	mov    eax,edx
10002934:	8d 50 30             	lea    edx,[eax+0x30]
10002937:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000293a:	83 c0 05             	add    eax,0x5
1000293d:	88 10                	mov    BYTE PTR [eax],dl
1000293f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
10002942:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10002947:	f7 e9                	imul   ecx
10002949:	c1 fa 05             	sar    edx,0x5
1000294c:	89 c8                	mov    eax,ecx
1000294e:	c1 f8 1f             	sar    eax,0x1f
10002951:	29 c2                	sub    edx,eax
10002953:	89 d0                	mov    eax,edx
10002955:	b9 0a 00 00 00       	mov    ecx,0xa
1000295a:	99                   	cdq    
1000295b:	f7 f9                	idiv   ecx
1000295d:	89 d0                	mov    eax,edx
1000295f:	8d 50 30             	lea    edx,[eax+0x30]
10002962:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002965:	83 c0 07             	add    eax,0x7
10002968:	88 10                	mov    BYTE PTR [eax],dl
1000296a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
1000296d:	b8 67 66 66 66       	mov    eax,0x66666667
10002972:	f7 e9                	imul   ecx
10002974:	c1 fa 02             	sar    edx,0x2
10002977:	89 c8                	mov    eax,ecx
10002979:	c1 f8 1f             	sar    eax,0x1f
1000297c:	89 d1                	mov    ecx,edx
1000297e:	29 c1                	sub    ecx,eax
10002980:	b8 67 66 66 66       	mov    eax,0x66666667
10002985:	f7 e9                	imul   ecx
10002987:	c1 fa 02             	sar    edx,0x2
1000298a:	89 c8                	mov    eax,ecx
1000298c:	c1 f8 1f             	sar    eax,0x1f
1000298f:	29 c2                	sub    edx,eax
10002991:	89 d0                	mov    eax,edx
10002993:	c1 e0 02             	shl    eax,0x2
10002996:	01 d0                	add    eax,edx
10002998:	01 c0                	add    eax,eax
1000299a:	29 c1                	sub    ecx,eax
1000299c:	89 ca                	mov    edx,ecx
1000299e:	88 d0                	mov    al,dl
100029a0:	8d 50 30             	lea    edx,[eax+0x30]
100029a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100029a6:	83 c0 08             	add    eax,0x8
100029a9:	88 10                	mov    BYTE PTR [eax],dl
100029ab:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100029ae:	b9 0a 00 00 00       	mov    ecx,0xa
100029b3:	99                   	cdq    
100029b4:	f7 f9                	idiv   ecx
100029b6:	89 d0                	mov    eax,edx
100029b8:	8d 50 30             	lea    edx,[eax+0x30]
100029bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100029be:	83 c0 09             	add    eax,0x9
100029c1:	88 10                	mov    BYTE PTR [eax],dl
100029c3:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
100029c6:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
100029cb:	f7 e9                	imul   ecx
100029cd:	c1 fa 05             	sar    edx,0x5
100029d0:	89 c8                	mov    eax,ecx
100029d2:	c1 f8 1f             	sar    eax,0x1f
100029d5:	29 c2                	sub    edx,eax
100029d7:	89 d0                	mov    eax,edx
100029d9:	b9 0a 00 00 00       	mov    ecx,0xa
100029de:	99                   	cdq    
100029df:	f7 f9                	idiv   ecx
100029e1:	89 d0                	mov    eax,edx
100029e3:	8d 50 30             	lea    edx,[eax+0x30]
100029e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100029e9:	83 c0 0b             	add    eax,0xb
100029ec:	88 10                	mov    BYTE PTR [eax],dl
100029ee:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
100029f1:	b8 67 66 66 66       	mov    eax,0x66666667
100029f6:	f7 e9                	imul   ecx
100029f8:	c1 fa 02             	sar    edx,0x2
100029fb:	89 c8                	mov    eax,ecx
100029fd:	c1 f8 1f             	sar    eax,0x1f
10002a00:	89 d1                	mov    ecx,edx
10002a02:	29 c1                	sub    ecx,eax
10002a04:	b8 67 66 66 66       	mov    eax,0x66666667
10002a09:	f7 e9                	imul   ecx
10002a0b:	c1 fa 02             	sar    edx,0x2
10002a0e:	89 c8                	mov    eax,ecx
10002a10:	c1 f8 1f             	sar    eax,0x1f
10002a13:	29 c2                	sub    edx,eax
10002a15:	89 d0                	mov    eax,edx
10002a17:	c1 e0 02             	shl    eax,0x2
10002a1a:	01 d0                	add    eax,edx
10002a1c:	01 c0                	add    eax,eax
10002a1e:	29 c1                	sub    ecx,eax
10002a20:	89 ca                	mov    edx,ecx
10002a22:	88 d0                	mov    al,dl
10002a24:	8d 50 30             	lea    edx,[eax+0x30]
10002a27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a2a:	83 c0 0c             	add    eax,0xc
10002a2d:	88 10                	mov    BYTE PTR [eax],dl
10002a2f:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10002a32:	b9 0a 00 00 00       	mov    ecx,0xa
10002a37:	99                   	cdq    
10002a38:	f7 f9                	idiv   ecx
10002a3a:	89 d0                	mov    eax,edx
10002a3c:	8d 50 30             	lea    edx,[eax+0x30]
10002a3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a42:	83 c0 0d             	add    eax,0xd
10002a45:	88 10                	mov    BYTE PTR [eax],dl
10002a47:	90                   	nop
10002a48:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10002a4b:	c9                   	leave  
10002a4c:	c3                   	ret    

10002a4d <retrieveBits(char*)>:
10002a4d:	55                   	push   ebp
10002a4e:	89 e5                	mov    ebp,esp
10002a50:	57                   	push   edi
10002a51:	56                   	push   esi
10002a52:	53                   	push   ebx
10002a53:	83 ec 4c             	sub    esp,0x4c
10002a56:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
10002a5d:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
10002a64:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [ebp-0x1c],0xffffffff
10002a6b:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10002a72:	83 7d e0 0f          	cmp    DWORD PTR [ebp-0x20],0xf
10002a76:	7f 54                	jg     10002acc <retrieveBits(char*)+0x7f>
10002a78:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002a7b:	05 00 00 00 00       	add    eax,0x0	10002a7c: R_386_32	lookupA
10002a80:	8a 10                	mov    dl,BYTE PTR [eax]
10002a82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a85:	8a 00                	mov    al,BYTE PTR [eax]
10002a87:	38 c2                	cmp    dl,al
10002a89:	75 06                	jne    10002a91 <retrieveBits(char*)+0x44>
10002a8b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002a8e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10002a91:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002a94:	05 00 00 00 00       	add    eax,0x0	10002a95: R_386_32	lookupB
10002a99:	8a 10                	mov    dl,BYTE PTR [eax]
10002a9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a9e:	40                   	inc    eax
10002a9f:	8a 00                	mov    al,BYTE PTR [eax]
10002aa1:	38 c2                	cmp    dl,al
10002aa3:	75 06                	jne    10002aab <retrieveBits(char*)+0x5e>
10002aa5:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002aa8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10002aab:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002aae:	05 00 00 00 00       	add    eax,0x0	10002aaf: R_386_32	lookupC
10002ab3:	8a 10                	mov    dl,BYTE PTR [eax]
10002ab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ab8:	83 c0 0f             	add    eax,0xf
10002abb:	8a 00                	mov    al,BYTE PTR [eax]
10002abd:	38 c2                	cmp    dl,al
10002abf:	75 06                	jne    10002ac7 <retrieveBits(char*)+0x7a>
10002ac1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002ac4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002ac7:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10002aca:	eb a6                	jmp    10002a72 <retrieveBits(char*)+0x25>
10002acc:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
10002ad0:	74 0c                	je     10002ade <retrieveBits(char*)+0x91>
10002ad2:	83 7d e8 ff          	cmp    DWORD PTR [ebp-0x18],0xffffffff
10002ad6:	74 06                	je     10002ade <retrieveBits(char*)+0x91>
10002ad8:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10002adc:	75 0f                	jne    10002aed <retrieveBits(char*)+0xa0>
10002ade:	b8 00 00 00 00       	mov    eax,0x0
10002ae3:	ba 00 00 00 00       	mov    edx,0x0
10002ae8:	e9 02 02 00 00       	jmp    10002cef <retrieveBits(char*)+0x2a2>
10002aed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002af0:	83 c0 03             	add    eax,0x3
10002af3:	8a 00                	mov    al,BYTE PTR [eax]
10002af5:	0f be c0             	movsx  eax,al
10002af8:	8d 50 d0             	lea    edx,[eax-0x30]
10002afb:	89 d0                	mov    eax,edx
10002afd:	c1 e0 02             	shl    eax,0x2
10002b00:	01 d0                	add    eax,edx
10002b02:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002b09:	01 d0                	add    eax,edx
10002b0b:	c1 e0 02             	shl    eax,0x2
10002b0e:	89 c6                	mov    esi,eax
10002b10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b13:	83 c0 04             	add    eax,0x4
10002b16:	8a 00                	mov    al,BYTE PTR [eax]
10002b18:	0f be c0             	movsx  eax,al
10002b1b:	8d 50 d0             	lea    edx,[eax-0x30]
10002b1e:	89 d0                	mov    eax,edx
10002b20:	c1 e0 02             	shl    eax,0x2
10002b23:	01 d0                	add    eax,edx
10002b25:	01 c0                	add    eax,eax
10002b27:	8d 14 06             	lea    edx,[esi+eax*1]
10002b2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b2d:	83 c0 05             	add    eax,0x5
10002b30:	8a 00                	mov    al,BYTE PTR [eax]
10002b32:	0f be c0             	movsx  eax,al
10002b35:	83 e8 30             	sub    eax,0x30
10002b38:	01 d0                	add    eax,edx
10002b3a:	99                   	cdq    
10002b3b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10002b3e:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10002b41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b44:	83 c0 07             	add    eax,0x7
10002b47:	8a 00                	mov    al,BYTE PTR [eax]
10002b49:	0f be c0             	movsx  eax,al
10002b4c:	8d 50 d0             	lea    edx,[eax-0x30]
10002b4f:	89 d0                	mov    eax,edx
10002b51:	c1 e0 02             	shl    eax,0x2
10002b54:	01 d0                	add    eax,edx
10002b56:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002b5d:	01 d0                	add    eax,edx
10002b5f:	c1 e0 02             	shl    eax,0x2
10002b62:	89 c6                	mov    esi,eax
10002b64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b67:	83 c0 08             	add    eax,0x8
10002b6a:	8a 00                	mov    al,BYTE PTR [eax]
10002b6c:	0f be c0             	movsx  eax,al
10002b6f:	8d 50 d0             	lea    edx,[eax-0x30]
10002b72:	89 d0                	mov    eax,edx
10002b74:	c1 e0 02             	shl    eax,0x2
10002b77:	01 d0                	add    eax,edx
10002b79:	01 c0                	add    eax,eax
10002b7b:	8d 14 06             	lea    edx,[esi+eax*1]
10002b7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b81:	83 c0 09             	add    eax,0x9
10002b84:	8a 00                	mov    al,BYTE PTR [eax]
10002b86:	0f be c0             	movsx  eax,al
10002b89:	83 e8 30             	sub    eax,0x30
10002b8c:	01 d0                	add    eax,edx
10002b8e:	99                   	cdq    
10002b8f:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10002b92:	89 55 c4             	mov    DWORD PTR [ebp-0x3c],edx
10002b95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b98:	83 c0 0b             	add    eax,0xb
10002b9b:	8a 00                	mov    al,BYTE PTR [eax]
10002b9d:	0f be c0             	movsx  eax,al
10002ba0:	8d 50 d0             	lea    edx,[eax-0x30]
10002ba3:	89 d0                	mov    eax,edx
10002ba5:	c1 e0 02             	shl    eax,0x2
10002ba8:	01 d0                	add    eax,edx
10002baa:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002bb1:	01 d0                	add    eax,edx
10002bb3:	c1 e0 02             	shl    eax,0x2
10002bb6:	89 c6                	mov    esi,eax
10002bb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002bbb:	83 c0 0c             	add    eax,0xc
10002bbe:	8a 00                	mov    al,BYTE PTR [eax]
10002bc0:	0f be c0             	movsx  eax,al
10002bc3:	8d 50 d0             	lea    edx,[eax-0x30]
10002bc6:	89 d0                	mov    eax,edx
10002bc8:	c1 e0 02             	shl    eax,0x2
10002bcb:	01 d0                	add    eax,edx
10002bcd:	01 c0                	add    eax,eax
10002bcf:	8d 14 06             	lea    edx,[esi+eax*1]
10002bd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002bd5:	83 c0 0d             	add    eax,0xd
10002bd8:	8a 00                	mov    al,BYTE PTR [eax]
10002bda:	0f be c0             	movsx  eax,al
10002bdd:	83 e8 30             	sub    eax,0x30
10002be0:	01 d0                	add    eax,edx
10002be2:	99                   	cdq    
10002be3:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10002be6:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
10002be9:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10002bec:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10002bef:	0f a4 c2 0a          	shld   edx,eax,0xa
10002bf3:	c1 e0 0a             	shl    eax,0xa
10002bf6:	89 c6                	mov    esi,eax
10002bf8:	89 d7                	mov    edi,edx
10002bfa:	89 f0                	mov    eax,esi
10002bfc:	0b 45 c8             	or     eax,DWORD PTR [ebp-0x38]
10002bff:	89 c1                	mov    ecx,eax
10002c01:	89 f8                	mov    eax,edi
10002c03:	0b 45 cc             	or     eax,DWORD PTR [ebp-0x34]
10002c06:	89 c3                	mov    ebx,eax
10002c08:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10002c0b:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
10002c0e:	0f a4 c2 14          	shld   edx,eax,0x14
10002c12:	c1 e0 14             	shl    eax,0x14
10002c15:	89 ce                	mov    esi,ecx
10002c17:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10002c1a:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10002c1d:	0b 75 a8             	or     esi,DWORD PTR [ebp-0x58]
10002c20:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
10002c23:	89 d8                	mov    eax,ebx
10002c25:	0b 45 ac             	or     eax,DWORD PTR [ebp-0x54]
10002c28:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10002c2b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002c2e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002c31:	0f a4 c2 0c          	shld   edx,eax,0xc
10002c35:	c1 e0 0c             	shl    eax,0xc
10002c38:	89 c3                	mov    ebx,eax
10002c3a:	89 d6                	mov    esi,edx
10002c3c:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
10002c3f:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
10002c42:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10002c45:	c1 e0 04             	shl    eax,0x4
10002c48:	0b 45 ec             	or     eax,DWORD PTR [ebp-0x14]
10002c4b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10002c4e:	c1 e2 08             	shl    edx,0x8
10002c51:	09 d0                	or     eax,edx
10002c53:	99                   	cdq    
10002c54:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
10002c57:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
10002c5a:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10002c61:	81 7d d4 db 24 00 00 	cmp    DWORD PTR [ebp-0x2c],0x24db
10002c68:	7f 7f                	jg     10002ce9 <retrieveBits(char*)+0x29c>
10002c6a:	6a 2a                	push   0x2a
10002c6c:	6a 13                	push   0x13
10002c6e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002c71:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002c74:	e8 fc ff ff ff       	call   10002c75 <retrieveBits(char*)+0x228>	10002c75: R_386_PC32	ror(unsigned long long, int, int)
10002c79:	83 c4 10             	add    esp,0x10
10002c7c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002c7f:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002c82:	6a 00                	push   0x0
10002c84:	6a 08                	push   0x8
10002c86:	6a 00                	push   0x0
10002c88:	6a 03                	push   0x3
10002c8a:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002c8d:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002c90:	e8 fc ff ff ff       	call   10002c91 <retrieveBits(char*)+0x244>	10002c91: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10002c95:	83 c4 18             	add    esp,0x18
10002c98:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002c9b:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002c9e:	6a 00                	push   0x0
10002ca0:	6a 0c                	push   0xc
10002ca2:	6a 00                	push   0x0
10002ca4:	6a 0d                	push   0xd
10002ca6:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002ca9:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002cac:	e8 fc ff ff ff       	call   10002cad <retrieveBits(char*)+0x260>	10002cad: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10002cb1:	83 c4 18             	add    esp,0x18
10002cb4:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002cb7:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002cba:	6a 00                	push   0x0
10002cbc:	6a 16                	push   0x16
10002cbe:	6a 00                	push   0x0
10002cc0:	6a 25                	push   0x25
10002cc2:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002cc5:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002cc8:	e8 fc ff ff ff       	call   10002cc9 <retrieveBits(char*)+0x27c>	10002cc9: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10002ccd:	83 c4 18             	add    esp,0x18
10002cd0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002cd3:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002cd6:	81 75 d8 95 38 e4 b5 	xor    DWORD PTR [ebp-0x28],0xb5e43895
10002cdd:	83 75 dc 37          	xor    DWORD PTR [ebp-0x24],0x37
10002ce1:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10002ce4:	e9 78 ff ff ff       	jmp    10002c61 <retrieveBits(char*)+0x214>
10002ce9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002cec:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002cef:	8d 65 f4             	lea    esp,[ebp-0xc]
10002cf2:	5b                   	pop    ebx
10002cf3:	5e                   	pop    esi
10002cf4:	5f                   	pop    edi
10002cf5:	5d                   	pop    ebp
10002cf6:	c3                   	ret    

10002cf7 <checkKey(char*)>:
10002cf7:	55                   	push   ebp
10002cf8:	89 e5                	mov    ebp,esp
10002cfa:	53                   	push   ebx
10002cfb:	83 ec 14             	sub    esp,0x14
10002cfe:	83 ec 04             	sub    esp,0x4
10002d01:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002d04:	e8 fc ff ff ff       	call   10002d05 <checkKey(char*)+0xe>	10002d05: R_386_PC32	retrieveBits(char*)
10002d09:	83 c4 08             	add    esp,0x8
10002d0c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10002d0f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10002d12:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002d15:	25 ff 7f 00 00       	and    eax,0x7fff
10002d1a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10002d1d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002d20:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10002d23:	0f ac d0 0f          	shrd   eax,edx,0xf
10002d27:	c1 ea 0f             	shr    edx,0xf
10002d2a:	89 c1                	mov    ecx,eax
10002d2c:	89 d3                	mov    ebx,edx
10002d2e:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
10002d31:	83 ec 04             	sub    esp,0x4
10002d34:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002d37:	e8 fc ff ff ff       	call   10002d38 <checkKey(char*)+0x41>	10002d38: R_386_PC32	getChecksum(unsigned int)
10002d3c:	83 c4 08             	add    esp,0x8
10002d3f:	39 45 ec             	cmp    DWORD PTR [ebp-0x14],eax
10002d42:	0f 95 c0             	setne  al
10002d45:	84 c0                	test   al,al
10002d47:	74 07                	je     10002d50 <checkKey(char*)+0x59>
10002d49:	b8 00 00 00 00       	mov    eax,0x0
10002d4e:	eb 06                	jmp    10002d56 <checkKey(char*)+0x5f>
10002d50:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002d53:	83 e0 07             	and    eax,0x7
10002d56:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10002d59:	c9                   	leave  
10002d5a:	c3                   	ret    

10002d5b <changeKeyType(char*, int)>:
10002d5b:	55                   	push   ebp
10002d5c:	89 e5                	mov    ebp,esp
10002d5e:	83 ec 10             	sub    esp,0x10
10002d61:	83 ec 04             	sub    esp,0x4
10002d64:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002d67:	e8 fc ff ff ff       	call   10002d68 <changeKeyType(char*, int)+0xd>	10002d68: R_386_PC32	retrieveBits(char*)
10002d6c:	83 c4 08             	add    esp,0x8
10002d6f:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
10002d72:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10002d75:	83 65 f8 f8          	and    DWORD PTR [ebp-0x8],0xfffffff8
10002d79:	83 65 fc ff          	and    DWORD PTR [ebp-0x4],0xffffffff
10002d7d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10002d80:	99                   	cdq    
10002d81:	09 45 f8             	or     DWORD PTR [ebp-0x8],eax
10002d84:	09 55 fc             	or     DWORD PTR [ebp-0x4],edx
10002d87:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10002d8a:	50                   	push   eax
10002d8b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002d8e:	e8 fc ff ff ff       	call   10002d8f <changeKeyType(char*, int)+0x34>	10002d8f: R_386_PC32	createKey(char*, unsigned int)
10002d93:	83 c4 08             	add    esp,0x8
10002d96:	83 ec 04             	sub    esp,0x4
10002d99:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002d9c:	e8 fc ff ff ff       	call   10002d9d <changeKeyType(char*, int)+0x42>	10002d9d: R_386_PC32	checkKey(char*)
10002da1:	83 c4 08             	add    esp,0x8
10002da4:	85 c0                	test   eax,eax
10002da6:	0f 95 c0             	setne  al
10002da9:	c9                   	leave  
10002daa:	c3                   	ret    

10002dab <checkExtendedKey(char*)>:
10002dab:	55                   	push   ebp
10002dac:	89 e5                	mov    ebp,esp
10002dae:	83 ec 20             	sub    esp,0x20
10002db1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002db4:	8a 00                	mov    al,BYTE PTR [eax]
10002db6:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10002db9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002dbc:	8a 40 01             	mov    al,BYTE PTR [eax+0x1]
10002dbf:	88 45 ed             	mov    BYTE PTR [ebp-0x13],al
10002dc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002dc5:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
10002dc8:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
10002dcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002dce:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
10002dd1:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10002dd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002dd7:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
10002dda:	88 45 f0             	mov    BYTE PTR [ebp-0x10],al
10002ddd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002de0:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
10002de3:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
10002de6:	c6 45 f2 2d          	mov    BYTE PTR [ebp-0xe],0x2d
10002dea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ded:	8a 40 06             	mov    al,BYTE PTR [eax+0x6]
10002df0:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10002df3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002df6:	8a 40 07             	mov    al,BYTE PTR [eax+0x7]
10002df9:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
10002dfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002dff:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
10002e02:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
10002e05:	c6 45 f6 2d          	mov    BYTE PTR [ebp-0xa],0x2d
10002e09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002e0c:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10002e0f:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10002e12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002e15:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
10002e18:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
10002e1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002e1e:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
10002e21:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
10002e24:	c6 45 fa 2d          	mov    BYTE PTR [ebp-0x6],0x2d
10002e28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002e2b:	8a 40 0f             	mov    al,BYTE PTR [eax+0xf]
10002e2e:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10002e31:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002e34:	48                   	dec    eax
10002e35:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10002e38:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002e3b:	3c 2f                	cmp    al,0x2f
10002e3d:	75 04                	jne    10002e43 <checkExtendedKey(char*)+0x98>
10002e3f:	c6 45 ef 39          	mov    BYTE PTR [ebp-0x11],0x39
10002e43:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002e46:	48                   	dec    eax
10002e47:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
10002e4a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002e4d:	3c 2f                	cmp    al,0x2f
10002e4f:	75 04                	jne    10002e55 <checkExtendedKey(char*)+0xaa>
10002e51:	c6 45 f5 39          	mov    BYTE PTR [ebp-0xb],0x39
10002e55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002e58:	83 c0 0d             	add    eax,0xd
10002e5b:	8a 10                	mov    dl,BYTE PTR [eax]
10002e5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002e60:	83 c0 0c             	add    eax,0xc
10002e63:	8a 00                	mov    al,BYTE PTR [eax]
10002e65:	38 c2                	cmp    dl,al
10002e67:	74 0a                	je     10002e73 <checkExtendedKey(char*)+0xc8>
10002e69:	b8 00 00 00 00       	mov    eax,0x0
10002e6e:	e9 d6 00 00 00       	jmp    10002f49 <checkExtendedKey(char*)+0x19e>
10002e73:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002e76:	3c 2f                	cmp    al,0x2f
10002e78:	7e 07                	jle    10002e81 <checkExtendedKey(char*)+0xd6>
10002e7a:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002e7d:	3c 39                	cmp    al,0x39
10002e7f:	7e 0a                	jle    10002e8b <checkExtendedKey(char*)+0xe0>
10002e81:	b8 00 00 00 00       	mov    eax,0x0
10002e86:	e9 be 00 00 00       	jmp    10002f49 <checkExtendedKey(char*)+0x19e>
10002e8b:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
10002e8e:	3c 2f                	cmp    al,0x2f
10002e90:	7e 07                	jle    10002e99 <checkExtendedKey(char*)+0xee>
10002e92:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
10002e95:	3c 39                	cmp    al,0x39
10002e97:	7e 0a                	jle    10002ea3 <checkExtendedKey(char*)+0xf8>
10002e99:	b8 00 00 00 00       	mov    eax,0x0
10002e9e:	e9 a6 00 00 00       	jmp    10002f49 <checkExtendedKey(char*)+0x19e>
10002ea3:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002ea6:	3c 2f                	cmp    al,0x2f
10002ea8:	7e 07                	jle    10002eb1 <checkExtendedKey(char*)+0x106>
10002eaa:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002ead:	3c 39                	cmp    al,0x39
10002eaf:	7e 0a                	jle    10002ebb <checkExtendedKey(char*)+0x110>
10002eb1:	b8 00 00 00 00       	mov    eax,0x0
10002eb6:	e9 8e 00 00 00       	jmp    10002f49 <checkExtendedKey(char*)+0x19e>
10002ebb:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10002ebe:	3c 2f                	cmp    al,0x2f
10002ec0:	7e 07                	jle    10002ec9 <checkExtendedKey(char*)+0x11e>
10002ec2:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10002ec5:	3c 39                	cmp    al,0x39
10002ec7:	7e 07                	jle    10002ed0 <checkExtendedKey(char*)+0x125>
10002ec9:	b8 00 00 00 00       	mov    eax,0x0
10002ece:	eb 79                	jmp    10002f49 <checkExtendedKey(char*)+0x19e>
10002ed0:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
10002ed3:	3c 2f                	cmp    al,0x2f
10002ed5:	7e 07                	jle    10002ede <checkExtendedKey(char*)+0x133>
10002ed7:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
10002eda:	3c 39                	cmp    al,0x39
10002edc:	7e 07                	jle    10002ee5 <checkExtendedKey(char*)+0x13a>
10002ede:	b8 00 00 00 00       	mov    eax,0x0
10002ee3:	eb 64                	jmp    10002f49 <checkExtendedKey(char*)+0x19e>
10002ee5:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002ee8:	3c 2f                	cmp    al,0x2f
10002eea:	7e 07                	jle    10002ef3 <checkExtendedKey(char*)+0x148>
10002eec:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002eef:	3c 39                	cmp    al,0x39
10002ef1:	7e 07                	jle    10002efa <checkExtendedKey(char*)+0x14f>
10002ef3:	b8 00 00 00 00       	mov    eax,0x0
10002ef8:	eb 4f                	jmp    10002f49 <checkExtendedKey(char*)+0x19e>
10002efa:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10002efd:	3c 2f                	cmp    al,0x2f
10002eff:	7e 07                	jle    10002f08 <checkExtendedKey(char*)+0x15d>
10002f01:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10002f04:	3c 39                	cmp    al,0x39
10002f06:	7e 07                	jle    10002f0f <checkExtendedKey(char*)+0x164>
10002f08:	b8 00 00 00 00       	mov    eax,0x0
10002f0d:	eb 3a                	jmp    10002f49 <checkExtendedKey(char*)+0x19e>
10002f0f:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
10002f12:	3c 2f                	cmp    al,0x2f
10002f14:	7e 07                	jle    10002f1d <checkExtendedKey(char*)+0x172>
10002f16:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
10002f19:	3c 39                	cmp    al,0x39
10002f1b:	7e 07                	jle    10002f24 <checkExtendedKey(char*)+0x179>
10002f1d:	b8 00 00 00 00       	mov    eax,0x0
10002f22:	eb 25                	jmp    10002f49 <checkExtendedKey(char*)+0x19e>
10002f24:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
10002f27:	3c 2f                	cmp    al,0x2f
10002f29:	7e 07                	jle    10002f32 <checkExtendedKey(char*)+0x187>
10002f2b:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
10002f2e:	3c 39                	cmp    al,0x39
10002f30:	7e 07                	jle    10002f39 <checkExtendedKey(char*)+0x18e>
10002f32:	b8 00 00 00 00       	mov    eax,0x0
10002f37:	eb 10                	jmp    10002f49 <checkExtendedKey(char*)+0x19e>
10002f39:	83 ec 04             	sub    esp,0x4
10002f3c:	8d 45 ec             	lea    eax,[ebp-0x14]
10002f3f:	50                   	push   eax
10002f40:	e8 fc ff ff ff       	call   10002f41 <checkExtendedKey(char*)+0x196>	10002f41: R_386_PC32	checkKey(char*)
10002f45:	83 c4 08             	add    esp,0x8
10002f48:	90                   	nop
10002f49:	c9                   	leave  
10002f4a:	c3                   	ret    

10002f4b <loadTimezoneStrings()>:
10002f4b:	55                   	push   ebp
10002f4c:	89 e5                	mov    ebp,esp
10002f4e:	53                   	push   ebx
10002f4f:	83 ec 34             	sub    esp,0x34
10002f52:	83 ec 0c             	sub    esp,0xc
10002f55:	68 14 01 00 00       	push   0x114
10002f5a:	e8 fc ff ff ff       	call   10002f5b <loadTimezoneStrings()+0x10>	10002f5b: R_386_PC32	operator new(unsigned long)
10002f5f:	83 c4 10             	add    esp,0x10
10002f62:	89 c3                	mov    ebx,eax
10002f64:	a1 00 00 00 00       	mov    eax,ds:0x0	10002f65: R_386_32	kernelProcess
10002f69:	83 ec 04             	sub    esp,0x4
10002f6c:	50                   	push   eax
10002f6d:	68 74 b2 00 10       	push   0x1000b274	10002f6e: R_386_32	.text
10002f72:	53                   	push   ebx
10002f73:	e8 fc ff ff ff       	call   10002f74 <loadTimezoneStrings()+0x29>	10002f74: R_386_PC32	File::File(char const*, Process*)
10002f78:	83 c4 10             	add    esp,0x10
10002f7b:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10002f7e:	83 ec 08             	sub    esp,0x8
10002f81:	6a 01                	push   0x1
10002f83:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002f86:	e8 fc ff ff ff       	call   10002f87 <loadTimezoneStrings()+0x3c>	10002f87: R_386_PC32	File::open(FileOpenMode)
10002f8b:	83 c4 10             	add    esp,0x10
10002f8e:	83 ec 04             	sub    esp,0x4
10002f91:	8d 45 d7             	lea    eax,[ebp-0x29]
10002f94:	50                   	push   eax
10002f95:	8d 45 d8             	lea    eax,[ebp-0x28]
10002f98:	50                   	push   eax
10002f99:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002f9c:	e8 fc ff ff ff       	call   10002f9d <loadTimezoneStrings()+0x52>	10002f9d: R_386_PC32	File::stat(unsigned long long*, bool*)
10002fa1:	83 c4 10             	add    esp,0x10
10002fa4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002fa7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002faa:	83 ec 0c             	sub    esp,0xc
10002fad:	50                   	push   eax
10002fae:	e8 fc ff ff ff       	call   10002faf <loadTimezoneStrings()+0x64>	10002faf: R_386_PC32	malloc
10002fb3:	83 c4 10             	add    esp,0x10
10002fb6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002fb9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002fbc:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002fbf:	83 ec 04             	sub    esp,0x4
10002fc2:	50                   	push   eax
10002fc3:	6a 00                	push   0x0
10002fc5:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002fc8:	e8 fc ff ff ff       	call   10002fc9 <loadTimezoneStrings()+0x7e>	10002fc9: R_386_PC32	memset
10002fcd:	83 c4 10             	add    esp,0x10
10002fd0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10002fd3:	8b 00                	mov    eax,DWORD PTR [eax]
10002fd5:	83 c0 0c             	add    eax,0xc
10002fd8:	8b 08                	mov    ecx,DWORD PTR [eax]
10002fda:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002fdd:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002fe0:	83 ec 0c             	sub    esp,0xc
10002fe3:	8d 5d d0             	lea    ebx,[ebp-0x30]
10002fe6:	53                   	push   ebx
10002fe7:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002fea:	52                   	push   edx
10002feb:	50                   	push   eax
10002fec:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002fef:	ff d1                	call   ecx
10002ff1:	83 c4 20             	add    esp,0x20
10002ff4:	83 ec 0c             	sub    esp,0xc
10002ff7:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002ffa:	e8 fc ff ff ff       	call   10002ffb <loadTimezoneStrings()+0xb0>	10002ffb: R_386_PC32	File::close()
10002fff:	83 c4 10             	add    esp,0x10
10003002:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10003009:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10003010:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
10003017:	7f 39                	jg     10003052 <loadTimezoneStrings()+0x107>
10003019:	83 ec 0c             	sub    esp,0xc
1000301c:	6a 78                	push   0x78
1000301e:	e8 fc ff ff ff       	call   1000301f <loadTimezoneStrings()+0xd4>	1000301f: R_386_PC32	malloc
10003023:	83 c4 10             	add    esp,0x10
10003026:	89 c2                	mov    edx,eax
10003028:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000302b:	89 14 85 00 00 00 00 	mov    DWORD PTR [eax*4+0x0],edx	1000302e: R_386_32	timezoneStrings
10003032:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003035:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10003038: R_386_32	timezoneStrings
1000303c:	83 ec 08             	sub    esp,0x8
1000303f:	68 93 b2 00 10       	push   0x1000b293	10003040: R_386_32	.text
10003044:	50                   	push   eax
10003045:	e8 fc ff ff ff       	call   10003046 <loadTimezoneStrings()+0xfb>	10003046: R_386_PC32	strcpy
1000304a:	83 c4 10             	add    esp,0x10
1000304d:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
10003050:	eb be                	jmp    10003010 <loadTimezoneStrings()+0xc5>
10003052:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10003059:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000305c:	8d 50 01             	lea    edx,[eax+0x1]
1000305f:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
10003062:	89 c2                	mov    edx,eax
10003064:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003067:	01 d0                	add    eax,edx
10003069:	8a 00                	mov    al,BYTE PTR [eax]
1000306b:	88 45 ce             	mov    BYTE PTR [ebp-0x32],al
1000306e:	c6 45 cf 00          	mov    BYTE PTR [ebp-0x31],0x0
10003072:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
10003075:	3c 0d                	cmp    al,0xd
10003077:	0f 84 2a 01 00 00    	je     100031a7 <loadTimezoneStrings()+0x25c>
1000307d:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
10003080:	3c 09                	cmp    al,0x9
10003082:	75 3c                	jne    100030c0 <loadTimezoneStrings()+0x175>
10003084:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003087:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000308a: R_386_32	timezoneStrings
1000308e:	83 ec 0c             	sub    esp,0xc
10003091:	50                   	push   eax
10003092:	e8 fc ff ff ff       	call   10003093 <loadTimezoneStrings()+0x148>	10003093: R_386_PC32	strlen
10003097:	83 c4 10             	add    esp,0x10
1000309a:	83 f8 08             	cmp    eax,0x8
1000309d:	0f 87 0a 01 00 00    	ja     100031ad <loadTimezoneStrings()+0x262>
100030a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100030a6:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100030a9: R_386_32	timezoneStrings
100030ad:	83 ec 08             	sub    esp,0x8
100030b0:	68 93 b2 00 10       	push   0x1000b293	100030b1: R_386_32	.text
100030b5:	50                   	push   eax
100030b6:	e8 fc ff ff ff       	call   100030b7 <loadTimezoneStrings()+0x16c>	100030b7: R_386_PC32	strcat
100030bb:	83 c4 10             	add    esp,0x10
100030be:	eb c4                	jmp    10003084 <loadTimezoneStrings()+0x139>
100030c0:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
100030c3:	3c 0a                	cmp    al,0xa
100030c5:	75 67                	jne    1000312e <loadTimezoneStrings()+0x1e3>
100030c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100030ca:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100030cd: R_386_32	timezoneStrings
100030d1:	83 ec 0c             	sub    esp,0xc
100030d4:	50                   	push   eax
100030d5:	e8 fc ff ff ff       	call   100030d6 <loadTimezoneStrings()+0x18b>	100030d6: R_386_PC32	strlen
100030da:	83 c4 10             	add    esp,0x10
100030dd:	83 f8 35             	cmp    eax,0x35
100030e0:	77 1d                	ja     100030ff <loadTimezoneStrings()+0x1b4>
100030e2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100030e5:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100030e8: R_386_32	timezoneStrings
100030ec:	83 ec 08             	sub    esp,0x8
100030ef:	68 93 b2 00 10       	push   0x1000b293	100030f0: R_386_32	.text
100030f4:	50                   	push   eax
100030f5:	e8 fc ff ff ff       	call   100030f6 <loadTimezoneStrings()+0x1ab>	100030f6: R_386_PC32	strcat
100030fa:	83 c4 10             	add    esp,0x10
100030fd:	eb c8                	jmp    100030c7 <loadTimezoneStrings()+0x17c>
100030ff:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10003102:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10003105:	99                   	cdq    
10003106:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
10003109:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
1000310c:	39 c8                	cmp    eax,ecx
1000310e:	89 d0                	mov    eax,edx
10003110:	19 d8                	sbb    eax,ebx
10003112:	0f 82 9b 00 00 00    	jb     100031b3 <loadTimezoneStrings()+0x268>
10003118:	83 ec 0c             	sub    esp,0xc
1000311b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000311e:	e8 fc ff ff ff       	call   1000311f <loadTimezoneStrings()+0x1d4>	1000311f: R_386_PC32	free
10003123:	83 c4 10             	add    esp,0x10
10003126:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003129:	e9 8b 00 00 00       	jmp    100031b9 <loadTimezoneStrings()+0x26e>
1000312e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003131:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10003134: R_386_32	timezoneStrings
10003138:	83 ec 0c             	sub    esp,0xc
1000313b:	50                   	push   eax
1000313c:	e8 fc ff ff ff       	call   1000313d <loadTimezoneStrings()+0x1f2>	1000313d: R_386_PC32	strlen
10003141:	83 c4 10             	add    esp,0x10
10003144:	83 f8 31             	cmp    eax,0x31
10003147:	77 1f                	ja     10003168 <loadTimezoneStrings()+0x21d>
10003149:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000314c:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000314f: R_386_32	timezoneStrings
10003153:	83 ec 08             	sub    esp,0x8
10003156:	8d 55 ce             	lea    edx,[ebp-0x32]
10003159:	52                   	push   edx
1000315a:	50                   	push   eax
1000315b:	e8 fc ff ff ff       	call   1000315c <loadTimezoneStrings()+0x211>	1000315c: R_386_PC32	strcat
10003160:	83 c4 10             	add    esp,0x10
10003163:	e9 f1 fe ff ff       	jmp    10003059 <loadTimezoneStrings()+0x10e>
10003168:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000316b:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000316e: R_386_32	timezoneStrings
10003172:	83 ec 0c             	sub    esp,0xc
10003175:	50                   	push   eax
10003176:	e8 fc ff ff ff       	call   10003177 <loadTimezoneStrings()+0x22c>	10003177: R_386_PC32	strlen
1000317b:	83 c4 10             	add    esp,0x10
1000317e:	83 f8 32             	cmp    eax,0x32
10003181:	0f 85 d2 fe ff ff    	jne    10003059 <loadTimezoneStrings()+0x10e>
10003187:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000318a:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000318d: R_386_32	timezoneStrings
10003191:	83 ec 08             	sub    esp,0x8
10003194:	68 95 b2 00 10       	push   0x1000b295	10003195: R_386_32	.text
10003199:	50                   	push   eax
1000319a:	e8 fc ff ff ff       	call   1000319b <loadTimezoneStrings()+0x250>	1000319b: R_386_PC32	strcat
1000319f:	83 c4 10             	add    esp,0x10
100031a2:	e9 b2 fe ff ff       	jmp    10003059 <loadTimezoneStrings()+0x10e>
100031a7:	90                   	nop
100031a8:	e9 ac fe ff ff       	jmp    10003059 <loadTimezoneStrings()+0x10e>
100031ad:	90                   	nop
100031ae:	e9 a6 fe ff ff       	jmp    10003059 <loadTimezoneStrings()+0x10e>
100031b3:	90                   	nop
100031b4:	e9 a0 fe ff ff       	jmp    10003059 <loadTimezoneStrings()+0x10e>
100031b9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100031bc:	c9                   	leave  
100031bd:	c3                   	ret    

100031be <_bcrypt_rand>:
100031be:	55                   	push   ebp
100031bf:	89 e5                	mov    ebp,esp
100031c1:	83 ec 08             	sub    esp,0x8
100031c4:	e8 fc ff ff ff       	call   100031c5 <_bcrypt_rand+0x7>	100031c5: R_386_PC32	KeRand()
100031c9:	c9                   	leave  
100031ca:	c3                   	ret    

100031cb <firstRun(bool)>:
100031cb:	55                   	push   ebp
100031cc:	89 e5                	mov    ebp,esp
100031ce:	57                   	push   edi
100031cf:	56                   	push   esi
100031d0:	53                   	push   ebx
100031d1:	81 ec 5c 01 00 00    	sub    esp,0x15c
100031d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100031da:	88 85 a4 fe ff ff    	mov    BYTE PTR [ebp-0x15c],al
100031e0:	a0 00 00 00 00       	mov    al,ds:0x0	100031e1: R_386_32	remoteInstall
100031e5:	84 c0                	test   al,al
100031e7:	74 1f                	je     10003208 <firstRun(bool)+0x3d>
100031e9:	b8 00 20 00 c2       	mov    eax,0xc2002000
100031ee:	8b 00                	mov    eax,DWORD PTR [eax]
100031f0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
100031f3:	68 80 00 00 00       	push   0x80
100031f8:	6a 00                	push   0x0
100031fa:	68 00 00 00 00       	push   0x0	100031fb: R_386_32	runRemoteInstall(void*)
100031ff:	50                   	push   eax
10003200:	e8 fc ff ff ff       	call   10003201 <firstRun(bool)+0x36>	10003201: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10003205:	83 c4 10             	add    esp,0x10
10003208:	8a 85 a4 fe ff ff    	mov    al,BYTE PTR [ebp-0x15c]
1000320e:	83 f0 01             	xor    eax,0x1
10003211:	a2 00 00 00 00       	mov    ds:0x0,al	10003212: R_386_32	showSidebar
10003216:	a0 00 00 00 00       	mov    al,ds:0x0	10003217: R_386_32	createNewUserMode
1000321b:	84 c0                	test   al,al
1000321d:	74 5b                	je     1000327a <firstRun(bool)+0xaf>
1000321f:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003221: R_386_32	showSidebar
10003226:	83 ec 08             	sub    esp,0x8
10003229:	68 5b b0 00 10       	push   0x1000b05b	1000322a: R_386_32	.text
1000322e:	68 00 00 00 00       	push   0x0	1000322f: R_386_32	currName
10003233:	e8 fc ff ff ff       	call   10003234 <firstRun(bool)+0x69>	10003234: R_386_PC32	strcpy
10003238:	83 c4 10             	add    esp,0x10
1000323b:	83 ec 08             	sub    esp,0x8
1000323e:	68 5b b0 00 10       	push   0x1000b05b	1000323f: R_386_32	.text
10003243:	68 00 00 00 00       	push   0x0	10003244: R_386_32	currComp
10003248:	e8 fc ff ff ff       	call   10003249 <firstRun(bool)+0x7e>	10003249: R_386_PC32	strcpy
1000324d:	83 c4 10             	add    esp,0x10
10003250:	83 ec 08             	sub    esp,0x8
10003253:	68 5b b0 00 10       	push   0x1000b05b	10003254: R_386_32	.text
10003258:	68 00 00 00 00       	push   0x0	10003259: R_386_32	passwbufA
1000325d:	e8 fc ff ff ff       	call   1000325e <firstRun(bool)+0x93>	1000325e: R_386_PC32	strcpy
10003262:	83 c4 10             	add    esp,0x10
10003265:	83 ec 08             	sub    esp,0x8
10003268:	68 5b b0 00 10       	push   0x1000b05b	10003269: R_386_32	.text
1000326d:	68 00 00 00 00       	push   0x0	1000326e: R_386_32	passwbufB
10003272:	e8 fc ff ff ff       	call   10003273 <firstRun(bool)+0xa8>	10003273: R_386_PC32	strcpy
10003277:	83 c4 10             	add    esp,0x10
1000327a:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000327c: R_386_32	guiKeyboardHandler
	10003280: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
10003284:	83 ec 0c             	sub    esp,0xc
10003287:	68 9c b2 00 10       	push   0x1000b29c	10003288: R_386_32	.text
1000328c:	e8 fc ff ff ff       	call   1000328d <firstRun(bool)+0xc2>	1000328d: R_386_PC32	KeSetBootMessage(char const*)
10003291:	83 c4 10             	add    esp,0x10
10003294:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003296: R_386_32	VgaText::hiddenOut
1000329b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000329c: R_386_32	activeTerminal
100032a0:	83 ec 08             	sub    esp,0x8
100032a3:	68 c5 b2 00 10       	push   0x1000b2c5	100032a4: R_386_32	.text
100032a8:	50                   	push   eax
100032a9:	e8 fc ff ff ff       	call   100032aa <firstRun(bool)+0xdf>	100032aa: R_386_PC32	VgaText::puts(char const*)
100032ae:	83 c4 10             	add    esp,0x10
100032b1:	a1 00 00 00 00       	mov    eax,ds:0x0	100032b2: R_386_32	kernelProcess
100032b6:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
100032bc:	83 ec 08             	sub    esp,0x8
100032bf:	68 c5 b2 00 10       	push   0x1000b2c5	100032c0: R_386_32	.text
100032c4:	50                   	push   eax
100032c5:	e8 fc ff ff ff       	call   100032c6 <firstRun(bool)+0xfb>	100032c6: R_386_PC32	VgaText::puts(char const*)
100032ca:	83 c4 10             	add    esp,0x10
100032cd:	83 ec 0c             	sub    esp,0xc
100032d0:	68 84 01 00 00       	push   0x184
100032d5:	e8 fc ff ff ff       	call   100032d6 <firstRun(bool)+0x10b>	100032d6: R_386_PC32	operator new(unsigned long)
100032da:	83 c4 10             	add    esp,0x10
100032dd:	89 c3                	mov    ebx,eax
100032df:	83 ec 08             	sub    esp,0x8
100032e2:	68 cc b2 00 10       	push   0x1000b2cc	100032e3: R_386_32	.text
100032e7:	53                   	push   ebx
100032e8:	e8 fc ff ff ff       	call   100032e9 <firstRun(bool)+0x11e>	100032e9: R_386_PC32	VgaText::VgaText(char const*)
100032ed:	83 c4 10             	add    esp,0x10
100032f0:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	100032f2: R_386_32	term
100032f6:	a1 00 00 00 00       	mov    eax,ds:0x0	100032f7: R_386_32	term
100032fb:	83 ec 0c             	sub    esp,0xc
100032fe:	50                   	push   eax
100032ff:	e8 fc ff ff ff       	call   10003300 <firstRun(bool)+0x135>	10003300: R_386_PC32	setActiveTerminal(VgaText*)
10003304:	83 c4 10             	add    esp,0x10
10003307:	e8 fc ff ff ff       	call   10003308 <firstRun(bool)+0x13d>	10003308: R_386_PC32	drawBootScreen()
1000330c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003313:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
1000331a:	74 17                	je     10003333 <firstRun(bool)+0x168>
1000331c:	83 ec 08             	sub    esp,0x8
1000331f:	68 d1 b2 00 10       	push   0x1000b2d1	10003320: R_386_32	.text
10003324:	68 00 00 00 00       	push   0x0	10003325: R_386_32	pkeybuf
10003329:	e8 fc ff ff ff       	call   1000332a <firstRun(bool)+0x15f>	1000332a: R_386_PC32	strcpy
1000332e:	83 c4 10             	add    esp,0x10
10003331:	eb 15                	jmp    10003348 <firstRun(bool)+0x17d>
10003333:	83 ec 08             	sub    esp,0x8
10003336:	68 e2 b2 00 10       	push   0x1000b2e2	10003337: R_386_32	.text
1000333b:	68 00 00 00 00       	push   0x0	1000333c: R_386_32	pkeybuf
10003340:	e8 fc ff ff ff       	call   10003341 <firstRun(bool)+0x176>	10003341: R_386_PC32	strcpy
10003345:	83 c4 10             	add    esp,0x10
10003348:	8a 85 a4 fe ff ff    	mov    al,BYTE PTR [ebp-0x15c]
1000334e:	83 f0 01             	xor    eax,0x1
10003351:	84 c0                	test   al,al
10003353:	0f 84 82 1d 00 00    	je     100050db <firstRun(bool)+0x1f10>
10003359:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10003360:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10003362: R_386_32	tzsel
1000336a:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000336c: R_386_32	modesel
10003374:	eb 01                	jmp    10003377 <firstRun(bool)+0x1ac>
10003376:	90                   	nop
10003377:	e8 fc ff ff ff       	call   10003378 <firstRun(bool)+0x1ad>	10003378: R_386_PC32	drawBootScreen()
1000337c:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10003383:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003385: R_386_32	installKey
1000338a:	a0 00 00 00 00       	mov    al,ds:0x0	1000338b: R_386_32	createNewUserMode
1000338f:	84 c0                	test   al,al
10003391:	74 07                	je     1000339a <firstRun(bool)+0x1cf>
10003393:	b8 f3 b2 00 10       	mov    eax,0x1000b2f3	10003394: R_386_32	.text
10003398:	eb 05                	jmp    1000339f <firstRun(bool)+0x1d4>
1000339a:	b8 03 b3 00 10       	mov    eax,0x1000b303	1000339b: R_386_32	.text
1000339f:	83 ec 0c             	sub    esp,0xc
100033a2:	50                   	push   eax
100033a3:	6a 12                	push   0x12
100033a5:	6a 32                	push   0x32
100033a7:	6a 03                	push   0x3
100033a9:	6a 16                	push   0x16
100033ab:	e8 fc ff ff ff       	call   100033ac <firstRun(bool)+0x1e1>	100033ac: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100033b0:	83 c4 20             	add    esp,0x20
100033b3:	a1 00 00 00 00       	mov    eax,ds:0x0	100033b4: R_386_32	term
100033b8:	83 ec 04             	sub    esp,0x4
100033bb:	6a 06                	push   0x6
100033bd:	6a 18                	push   0x18
100033bf:	50                   	push   eax
100033c0:	e8 fc ff ff ff       	call   100033c1 <firstRun(bool)+0x1f6>	100033c1: R_386_PC32	VgaText::setCursor(int, int)
100033c5:	83 c4 10             	add    esp,0x10
100033c8:	a1 00 00 00 00       	mov    eax,ds:0x0	100033c9: R_386_32	term
100033cd:	83 ec 08             	sub    esp,0x8
100033d0:	68 10 b3 00 10       	push   0x1000b310	100033d1: R_386_32	.text
100033d5:	50                   	push   eax
100033d6:	e8 fc ff ff ff       	call   100033d7 <firstRun(bool)+0x20c>	100033d7: R_386_PC32	VgaText::puts(char const*)
100033db:	83 c4 10             	add    esp,0x10
100033de:	a1 00 00 00 00       	mov    eax,ds:0x0	100033df: R_386_32	term
100033e3:	83 ec 04             	sub    esp,0x4
100033e6:	6a 07                	push   0x7
100033e8:	6a 18                	push   0x18
100033ea:	50                   	push   eax
100033eb:	e8 fc ff ff ff       	call   100033ec <firstRun(bool)+0x221>	100033ec: R_386_PC32	VgaText::setCursor(int, int)
100033f0:	83 c4 10             	add    esp,0x10
100033f3:	a1 00 00 00 00       	mov    eax,ds:0x0	100033f4: R_386_32	term
100033f8:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	100033fa: R_386_32	createNewUserMode
100033fe:	84 d2                	test   dl,dl
10003400:	74 07                	je     10003409 <firstRun(bool)+0x23e>
10003402:	ba 40 b3 00 10       	mov    edx,0x1000b340	10003403: R_386_32	.text
10003407:	eb 05                	jmp    1000340e <firstRun(bool)+0x243>
10003409:	ba 62 b3 00 10       	mov    edx,0x1000b362	1000340a: R_386_32	.text
1000340e:	83 ec 08             	sub    esp,0x8
10003411:	52                   	push   edx
10003412:	50                   	push   eax
10003413:	e8 fc ff ff ff       	call   10003414 <firstRun(bool)+0x249>	10003414: R_386_PC32	VgaText::puts(char const*)
10003418:	83 c4 10             	add    esp,0x10
1000341b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000341c: R_386_32	term
10003420:	83 ec 04             	sub    esp,0x4
10003423:	6a 09                	push   0x9
10003425:	6a 18                	push   0x18
10003427:	50                   	push   eax
10003428:	e8 fc ff ff ff       	call   10003429 <firstRun(bool)+0x25e>	10003429: R_386_PC32	VgaText::setCursor(int, int)
1000342d:	83 c4 10             	add    esp,0x10
10003430:	a1 00 00 00 00       	mov    eax,ds:0x0	10003431: R_386_32	term
10003435:	83 ec 08             	sub    esp,0x8
10003438:	68 72 b3 00 10       	push   0x1000b372	10003439: R_386_32	.text
1000343d:	50                   	push   eax
1000343e:	e8 fc ff ff ff       	call   1000343f <firstRun(bool)+0x274>	1000343f: R_386_PC32	VgaText::puts(char const*)
10003443:	83 c4 10             	add    esp,0x10
10003446:	a0 00 00 00 00       	mov    al,ds:0x0	10003447: R_386_32	createNewUserMode
1000344b:	83 f0 01             	xor    eax,0x1
1000344e:	84 c0                	test   al,al
10003450:	74 2b                	je     1000347d <firstRun(bool)+0x2b2>
10003452:	a1 00 00 00 00       	mov    eax,ds:0x0	10003453: R_386_32	term
10003457:	83 ec 04             	sub    esp,0x4
1000345a:	6a 0b                	push   0xb
1000345c:	6a 18                	push   0x18
1000345e:	50                   	push   eax
1000345f:	e8 fc ff ff ff       	call   10003460 <firstRun(bool)+0x295>	10003460: R_386_PC32	VgaText::setCursor(int, int)
10003464:	83 c4 10             	add    esp,0x10
10003467:	a1 00 00 00 00       	mov    eax,ds:0x0	10003468: R_386_32	term
1000346c:	83 ec 08             	sub    esp,0x8
1000346f:	68 77 b3 00 10       	push   0x1000b377	10003470: R_386_32	.text
10003474:	50                   	push   eax
10003475:	e8 fc ff ff ff       	call   10003476 <firstRun(bool)+0x2ab>	10003476: R_386_PC32	VgaText::puts(char const*)
1000347a:	83 c4 10             	add    esp,0x10
1000347d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000347e: R_386_32	term
10003482:	83 ec 04             	sub    esp,0x4
10003485:	6a 0d                	push   0xd
10003487:	6a 18                	push   0x18
10003489:	50                   	push   eax
1000348a:	e8 fc ff ff ff       	call   1000348b <firstRun(bool)+0x2c0>	1000348b: R_386_PC32	VgaText::setCursor(int, int)
1000348f:	83 c4 10             	add    esp,0x10
10003492:	a1 00 00 00 00       	mov    eax,ds:0x0	10003493: R_386_32	term
10003497:	83 ec 08             	sub    esp,0x8
1000349a:	68 7f b3 00 10       	push   0x1000b37f	1000349b: R_386_32	.text
1000349f:	50                   	push   eax
100034a0:	e8 fc ff ff ff       	call   100034a1 <firstRun(bool)+0x2d6>	100034a1: R_386_PC32	VgaText::puts(char const*)
100034a5:	83 c4 10             	add    esp,0x10
100034a8:	a1 00 00 00 00       	mov    eax,ds:0x0	100034a9: R_386_32	term
100034ad:	83 ec 04             	sub    esp,0x4
100034b0:	6a 0f                	push   0xf
100034b2:	6a 18                	push   0x18
100034b4:	50                   	push   eax
100034b5:	e8 fc ff ff ff       	call   100034b6 <firstRun(bool)+0x2eb>	100034b6: R_386_PC32	VgaText::setCursor(int, int)
100034ba:	83 c4 10             	add    esp,0x10
100034bd:	a1 00 00 00 00       	mov    eax,ds:0x0	100034be: R_386_32	term
100034c2:	83 ec 08             	sub    esp,0x8
100034c5:	68 88 b3 00 10       	push   0x1000b388	100034c6: R_386_32	.text
100034ca:	50                   	push   eax
100034cb:	e8 fc ff ff ff       	call   100034cc <firstRun(bool)+0x301>	100034cc: R_386_PC32	VgaText::puts(char const*)
100034d0:	83 c4 10             	add    esp,0x10
100034d3:	a1 00 00 00 00       	mov    eax,ds:0x0	100034d4: R_386_32	term
100034d8:	83 ec 04             	sub    esp,0x4
100034db:	6a 10                	push   0x10
100034dd:	6a 18                	push   0x18
100034df:	50                   	push   eax
100034e0:	e8 fc ff ff ff       	call   100034e1 <firstRun(bool)+0x316>	100034e1: R_386_PC32	VgaText::setCursor(int, int)
100034e5:	83 c4 10             	add    esp,0x10
100034e8:	a1 00 00 00 00       	mov    eax,ds:0x0	100034e9: R_386_32	term
100034ed:	83 ec 08             	sub    esp,0x8
100034f0:	68 90 b3 00 10       	push   0x1000b390	100034f1: R_386_32	.text
100034f5:	50                   	push   eax
100034f6:	e8 fc ff ff ff       	call   100034f7 <firstRun(bool)+0x32c>	100034f7: R_386_PC32	VgaText::puts(char const*)
100034fb:	83 c4 10             	add    esp,0x10
100034fe:	a1 00 00 00 00       	mov    eax,ds:0x0	100034ff: R_386_32	term
10003503:	83 ec 04             	sub    esp,0x4
10003506:	6a 09                	push   0x9
10003508:	6a 21                	push   0x21
1000350a:	50                   	push   eax
1000350b:	e8 fc ff ff ff       	call   1000350c <firstRun(bool)+0x341>	1000350c: R_386_PC32	VgaText::setCursor(int, int)
10003510:	83 c4 10             	add    esp,0x10
10003513:	a1 00 00 00 00       	mov    eax,ds:0x0	10003514: R_386_32	term
10003518:	6a 07                	push   0x7
1000351a:	6a 00                	push   0x0
1000351c:	68 9c b3 00 10       	push   0x1000b39c	1000351d: R_386_32	.text
10003521:	50                   	push   eax
10003522:	e8 fc ff ff ff       	call   10003523 <firstRun(bool)+0x358>	10003523: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003527:	83 c4 10             	add    esp,0x10
1000352a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000352b: R_386_32	term
1000352f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10003533:	75 07                	jne    1000353c <firstRun(bool)+0x371>
10003535:	ba c1 b3 00 10       	mov    edx,0x1000b3c1	10003536: R_386_32	.text
1000353a:	eb 05                	jmp    10003541 <firstRun(bool)+0x376>
1000353c:	ba c4 b3 00 10       	mov    edx,0x1000b3c4	1000353d: R_386_32	.text
10003541:	6a 0f                	push   0xf
10003543:	6a 00                	push   0x0
10003545:	52                   	push   edx
10003546:	50                   	push   eax
10003547:	e8 fc ff ff ff       	call   10003548 <firstRun(bool)+0x37d>	10003548: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000354c:	83 c4 10             	add    esp,0x10
1000354f:	a1 00 00 00 00       	mov    eax,ds:0x0	10003550: R_386_32	term
10003554:	83 ec 08             	sub    esp,0x8
10003557:	6a 21                	push   0x21
10003559:	50                   	push   eax
1000355a:	e8 fc ff ff ff       	call   1000355b <firstRun(bool)+0x390>	1000355b: R_386_PC32	VgaText::setCursorX(int)
1000355f:	83 c4 10             	add    esp,0x10
10003562:	a1 00 00 00 00       	mov    eax,ds:0x0	10003563: R_386_32	term
10003567:	6a 07                	push   0x7
10003569:	6a 00                	push   0x0
1000356b:	68 00 00 00 00       	push   0x0	1000356c: R_386_32	currName
10003570:	50                   	push   eax
10003571:	e8 fc ff ff ff       	call   10003572 <firstRun(bool)+0x3a7>	10003572: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003576:	83 c4 10             	add    esp,0x10
10003579:	a0 00 00 00 00       	mov    al,ds:0x0	1000357a: R_386_32	createNewUserMode
1000357e:	83 f0 01             	xor    eax,0x1
10003581:	84 c0                	test   al,al
10003583:	74 7b                	je     10003600 <firstRun(bool)+0x435>
10003585:	a1 00 00 00 00       	mov    eax,ds:0x0	10003586: R_386_32	term
1000358a:	83 ec 04             	sub    esp,0x4
1000358d:	6a 0b                	push   0xb
1000358f:	6a 21                	push   0x21
10003591:	50                   	push   eax
10003592:	e8 fc ff ff ff       	call   10003593 <firstRun(bool)+0x3c8>	10003593: R_386_PC32	VgaText::setCursor(int, int)
10003597:	83 c4 10             	add    esp,0x10
1000359a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000359b: R_386_32	term
1000359f:	6a 07                	push   0x7
100035a1:	6a 00                	push   0x0
100035a3:	68 9c b3 00 10       	push   0x1000b39c	100035a4: R_386_32	.text
100035a8:	50                   	push   eax
100035a9:	e8 fc ff ff ff       	call   100035aa <firstRun(bool)+0x3df>	100035aa: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100035ae:	83 c4 10             	add    esp,0x10
100035b1:	a1 00 00 00 00       	mov    eax,ds:0x0	100035b2: R_386_32	term
100035b6:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
100035ba:	75 07                	jne    100035c3 <firstRun(bool)+0x3f8>
100035bc:	ba c1 b3 00 10       	mov    edx,0x1000b3c1	100035bd: R_386_32	.text
100035c1:	eb 05                	jmp    100035c8 <firstRun(bool)+0x3fd>
100035c3:	ba c4 b3 00 10       	mov    edx,0x1000b3c4	100035c4: R_386_32	.text
100035c8:	6a 0f                	push   0xf
100035ca:	6a 00                	push   0x0
100035cc:	52                   	push   edx
100035cd:	50                   	push   eax
100035ce:	e8 fc ff ff ff       	call   100035cf <firstRun(bool)+0x404>	100035cf: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100035d3:	83 c4 10             	add    esp,0x10
100035d6:	a1 00 00 00 00       	mov    eax,ds:0x0	100035d7: R_386_32	term
100035db:	83 ec 08             	sub    esp,0x8
100035de:	6a 21                	push   0x21
100035e0:	50                   	push   eax
100035e1:	e8 fc ff ff ff       	call   100035e2 <firstRun(bool)+0x417>	100035e2: R_386_PC32	VgaText::setCursorX(int)
100035e6:	83 c4 10             	add    esp,0x10
100035e9:	a1 00 00 00 00       	mov    eax,ds:0x0	100035ea: R_386_32	term
100035ee:	6a 07                	push   0x7
100035f0:	6a 00                	push   0x0
100035f2:	68 00 00 00 00       	push   0x0	100035f3: R_386_32	currComp
100035f7:	50                   	push   eax
100035f8:	e8 fc ff ff ff       	call   100035f9 <firstRun(bool)+0x42e>	100035f9: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100035fd:	83 c4 10             	add    esp,0x10
10003600:	a1 00 00 00 00       	mov    eax,ds:0x0	10003601: R_386_32	term
10003605:	83 ec 04             	sub    esp,0x4
10003608:	6a 0d                	push   0xd
1000360a:	6a 21                	push   0x21
1000360c:	50                   	push   eax
1000360d:	e8 fc ff ff ff       	call   1000360e <firstRun(bool)+0x443>	1000360e: R_386_PC32	VgaText::setCursor(int, int)
10003612:	83 c4 10             	add    esp,0x10
10003615:	a1 00 00 00 00       	mov    eax,ds:0x0	10003616: R_386_32	term
1000361a:	6a 07                	push   0x7
1000361c:	6a 00                	push   0x0
1000361e:	68 9c b3 00 10       	push   0x1000b39c	1000361f: R_386_32	.text
10003623:	50                   	push   eax
10003624:	e8 fc ff ff ff       	call   10003625 <firstRun(bool)+0x45a>	10003625: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003629:	83 c4 10             	add    esp,0x10
1000362c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000362d: R_386_32	term
10003631:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10003635:	75 07                	jne    1000363e <firstRun(bool)+0x473>
10003637:	ba c1 b3 00 10       	mov    edx,0x1000b3c1	10003638: R_386_32	.text
1000363c:	eb 05                	jmp    10003643 <firstRun(bool)+0x478>
1000363e:	ba c4 b3 00 10       	mov    edx,0x1000b3c4	1000363f: R_386_32	.text
10003643:	6a 0f                	push   0xf
10003645:	6a 00                	push   0x0
10003647:	52                   	push   edx
10003648:	50                   	push   eax
10003649:	e8 fc ff ff ff       	call   1000364a <firstRun(bool)+0x47f>	1000364a: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000364e:	83 c4 10             	add    esp,0x10
10003651:	a1 00 00 00 00       	mov    eax,ds:0x0	10003652: R_386_32	term
10003656:	83 ec 08             	sub    esp,0x8
10003659:	6a 21                	push   0x21
1000365b:	50                   	push   eax
1000365c:	e8 fc ff ff ff       	call   1000365d <firstRun(bool)+0x492>	1000365d: R_386_PC32	VgaText::setCursorX(int)
10003661:	83 c4 10             	add    esp,0x10
10003664:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
1000366b:	83 ec 0c             	sub    esp,0xc
1000366e:	68 00 00 00 00       	push   0x0	1000366f: R_386_32	passwbufA
10003673:	e8 fc ff ff ff       	call   10003674 <firstRun(bool)+0x4a9>	10003674: R_386_PC32	strlen
10003678:	83 c4 10             	add    esp,0x10
1000367b:	89 c2                	mov    edx,eax
1000367d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10003680:	39 c2                	cmp    edx,eax
10003682:	76 1c                	jbe    100036a0 <firstRun(bool)+0x4d5>
10003684:	a1 00 00 00 00       	mov    eax,ds:0x0	10003685: R_386_32	term
10003689:	6a 07                	push   0x7
1000368b:	6a 00                	push   0x0
1000368d:	68 c8 b3 00 10       	push   0x1000b3c8	1000368e: R_386_32	.text
10003692:	50                   	push   eax
10003693:	e8 fc ff ff ff       	call   10003694 <firstRun(bool)+0x4c9>	10003694: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003698:	83 c4 10             	add    esp,0x10
1000369b:	ff 45 d8             	inc    DWORD PTR [ebp-0x28]
1000369e:	eb cb                	jmp    1000366b <firstRun(bool)+0x4a0>
100036a0:	a1 00 00 00 00       	mov    eax,ds:0x0	100036a1: R_386_32	term
100036a5:	83 ec 04             	sub    esp,0x4
100036a8:	6a 0f                	push   0xf
100036aa:	6a 21                	push   0x21
100036ac:	50                   	push   eax
100036ad:	e8 fc ff ff ff       	call   100036ae <firstRun(bool)+0x4e3>	100036ae: R_386_PC32	VgaText::setCursor(int, int)
100036b2:	83 c4 10             	add    esp,0x10
100036b5:	a1 00 00 00 00       	mov    eax,ds:0x0	100036b6: R_386_32	term
100036ba:	6a 07                	push   0x7
100036bc:	6a 00                	push   0x0
100036be:	68 9c b3 00 10       	push   0x1000b39c	100036bf: R_386_32	.text
100036c3:	50                   	push   eax
100036c4:	e8 fc ff ff ff       	call   100036c5 <firstRun(bool)+0x4fa>	100036c5: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100036c9:	83 c4 10             	add    esp,0x10
100036cc:	a1 00 00 00 00       	mov    eax,ds:0x0	100036cd: R_386_32	term
100036d1:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
100036d5:	75 07                	jne    100036de <firstRun(bool)+0x513>
100036d7:	ba c1 b3 00 10       	mov    edx,0x1000b3c1	100036d8: R_386_32	.text
100036dc:	eb 05                	jmp    100036e3 <firstRun(bool)+0x518>
100036de:	ba c4 b3 00 10       	mov    edx,0x1000b3c4	100036df: R_386_32	.text
100036e3:	6a 0f                	push   0xf
100036e5:	6a 00                	push   0x0
100036e7:	52                   	push   edx
100036e8:	50                   	push   eax
100036e9:	e8 fc ff ff ff       	call   100036ea <firstRun(bool)+0x51f>	100036ea: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100036ee:	83 c4 10             	add    esp,0x10
100036f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100036f2: R_386_32	term
100036f6:	83 ec 08             	sub    esp,0x8
100036f9:	6a 21                	push   0x21
100036fb:	50                   	push   eax
100036fc:	e8 fc ff ff ff       	call   100036fd <firstRun(bool)+0x532>	100036fd: R_386_PC32	VgaText::setCursorX(int)
10003701:	83 c4 10             	add    esp,0x10
10003704:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
1000370b:	83 ec 0c             	sub    esp,0xc
1000370e:	68 00 00 00 00       	push   0x0	1000370f: R_386_32	passwbufB
10003713:	e8 fc ff ff ff       	call   10003714 <firstRun(bool)+0x549>	10003714: R_386_PC32	strlen
10003718:	83 c4 10             	add    esp,0x10
1000371b:	89 c2                	mov    edx,eax
1000371d:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10003720:	39 c2                	cmp    edx,eax
10003722:	76 1c                	jbe    10003740 <firstRun(bool)+0x575>
10003724:	a1 00 00 00 00       	mov    eax,ds:0x0	10003725: R_386_32	term
10003729:	6a 07                	push   0x7
1000372b:	6a 00                	push   0x0
1000372d:	68 c8 b3 00 10       	push   0x1000b3c8	1000372e: R_386_32	.text
10003732:	50                   	push   eax
10003733:	e8 fc ff ff ff       	call   10003734 <firstRun(bool)+0x569>	10003734: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003738:	83 c4 10             	add    esp,0x10
1000373b:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
1000373e:	eb cb                	jmp    1000370b <firstRun(bool)+0x540>
10003740:	a1 00 00 00 00       	mov    eax,ds:0x0	10003741: R_386_32	term
10003745:	83 ec 04             	sub    esp,0x4
10003748:	6a 14                	push   0x14
1000374a:	6a 18                	push   0x18
1000374c:	50                   	push   eax
1000374d:	e8 fc ff ff ff       	call   1000374e <firstRun(bool)+0x583>	1000374e: R_386_PC32	VgaText::setCursor(int, int)
10003752:	83 c4 10             	add    esp,0x10
10003755:	a1 00 00 00 00       	mov    eax,ds:0x0	10003756: R_386_32	term
1000375a:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	1000375c: R_386_32	safemode
10003760:	84 d2                	test   dl,dl
10003762:	74 07                	je     1000376b <firstRun(bool)+0x5a0>
10003764:	b9 00 00 00 00       	mov    ecx,0x0
10003769:	eb 05                	jmp    10003770 <firstRun(bool)+0x5a5>
1000376b:	b9 08 00 00 00       	mov    ecx,0x8
10003770:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10003774:	75 07                	jne    1000377d <firstRun(bool)+0x5b2>
10003776:	ba ca b3 00 10       	mov    edx,0x1000b3ca	10003777: R_386_32	.text
1000377b:	eb 05                	jmp    10003782 <firstRun(bool)+0x5b7>
1000377d:	ba e0 b3 00 10       	mov    edx,0x1000b3e0	1000377e: R_386_32	.text
10003782:	6a 0f                	push   0xf
10003784:	51                   	push   ecx
10003785:	52                   	push   edx
10003786:	50                   	push   eax
10003787:	e8 fc ff ff ff       	call   10003788 <firstRun(bool)+0x5bd>	10003788: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000378c:	83 c4 10             	add    esp,0x10
1000378f:	a1 00 00 00 00       	mov    eax,ds:0x0	10003790: R_386_32	term
10003794:	83 ec 04             	sub    esp,0x4
10003797:	6a 14                	push   0x14
10003799:	6a 3c                	push   0x3c
1000379b:	50                   	push   eax
1000379c:	e8 fc ff ff ff       	call   1000379d <firstRun(bool)+0x5d2>	1000379d: R_386_PC32	VgaText::setCursor(int, int)
100037a1:	83 c4 10             	add    esp,0x10
100037a4:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
100037a8:	74 19                	je     100037c3 <firstRun(bool)+0x5f8>
100037aa:	a1 00 00 00 00       	mov    eax,ds:0x0	100037ab: R_386_32	term
100037af:	6a 08                	push   0x8
100037b1:	6a 0f                	push   0xf
100037b3:	68 f7 b3 00 10       	push   0x1000b3f7	100037b4: R_386_32	.text
100037b8:	50                   	push   eax
100037b9:	e8 fc ff ff ff       	call   100037ba <firstRun(bool)+0x5ef>	100037ba: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100037be:	83 c4 10             	add    esp,0x10
100037c1:	eb 2c                	jmp    100037ef <firstRun(bool)+0x624>
100037c3:	a1 00 00 00 00       	mov    eax,ds:0x0	100037c4: R_386_32	term
100037c8:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	100037ca: R_386_32	safemode
100037ce:	84 d2                	test   dl,dl
100037d0:	74 07                	je     100037d9 <firstRun(bool)+0x60e>
100037d2:	ba 00 00 00 00       	mov    edx,0x0
100037d7:	eb 05                	jmp    100037de <firstRun(bool)+0x613>
100037d9:	ba 01 00 00 00       	mov    edx,0x1
100037de:	52                   	push   edx
100037df:	6a 0f                	push   0xf
100037e1:	68 f7 b3 00 10       	push   0x1000b3f7	100037e2: R_386_32	.text
100037e6:	50                   	push   eax
100037e7:	e8 fc ff ff ff       	call   100037e8 <firstRun(bool)+0x61d>	100037e8: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100037ec:	83 c4 10             	add    esp,0x10
100037ef:	a1 00 00 00 00       	mov    eax,ds:0x0	100037f0: R_386_32	term
100037f4:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
100037f8:	75 07                	jne    10003801 <firstRun(bool)+0x636>
100037fa:	ba 00 b4 00 10       	mov    edx,0x1000b400	100037fb: R_386_32	.text
100037ff:	eb 05                	jmp    10003806 <firstRun(bool)+0x63b>
10003801:	ba c4 b3 00 10       	mov    edx,0x1000b3c4	10003802: R_386_32	.text
10003806:	6a 0f                	push   0xf
10003808:	6a 00                	push   0x0
1000380a:	52                   	push   edx
1000380b:	50                   	push   eax
1000380c:	e8 fc ff ff ff       	call   1000380d <firstRun(bool)+0x642>	1000380d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003811:	83 c4 10             	add    esp,0x10
10003814:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10003818:	75 28                	jne    10003842 <firstRun(bool)+0x677>
1000381a:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	1000381c: R_386_32	term
10003820:	83 ec 0c             	sub    esp,0xc
10003823:	68 00 00 00 00       	push   0x0	10003824: R_386_32	currName
10003828:	e8 fc ff ff ff       	call   10003829 <firstRun(bool)+0x65e>	10003829: R_386_PC32	strlen
1000382d:	83 c4 10             	add    esp,0x10
10003830:	83 c0 21             	add    eax,0x21
10003833:	83 ec 04             	sub    esp,0x4
10003836:	6a 09                	push   0x9
10003838:	50                   	push   eax
10003839:	53                   	push   ebx
1000383a:	e8 fc ff ff ff       	call   1000383b <firstRun(bool)+0x670>	1000383b: R_386_PC32	VgaText::setCursor(int, int)
1000383f:	83 c4 10             	add    esp,0x10
10003842:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10003846:	75 28                	jne    10003870 <firstRun(bool)+0x6a5>
10003848:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	1000384a: R_386_32	term
1000384e:	83 ec 0c             	sub    esp,0xc
10003851:	68 00 00 00 00       	push   0x0	10003852: R_386_32	currComp
10003856:	e8 fc ff ff ff       	call   10003857 <firstRun(bool)+0x68c>	10003857: R_386_PC32	strlen
1000385b:	83 c4 10             	add    esp,0x10
1000385e:	83 c0 21             	add    eax,0x21
10003861:	83 ec 04             	sub    esp,0x4
10003864:	6a 0b                	push   0xb
10003866:	50                   	push   eax
10003867:	53                   	push   ebx
10003868:	e8 fc ff ff ff       	call   10003869 <firstRun(bool)+0x69e>	10003869: R_386_PC32	VgaText::setCursor(int, int)
1000386d:	83 c4 10             	add    esp,0x10
10003870:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10003874:	75 28                	jne    1000389e <firstRun(bool)+0x6d3>
10003876:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10003878: R_386_32	term
1000387c:	83 ec 0c             	sub    esp,0xc
1000387f:	68 00 00 00 00       	push   0x0	10003880: R_386_32	passwbufA
10003884:	e8 fc ff ff ff       	call   10003885 <firstRun(bool)+0x6ba>	10003885: R_386_PC32	strlen
10003889:	83 c4 10             	add    esp,0x10
1000388c:	83 c0 21             	add    eax,0x21
1000388f:	83 ec 04             	sub    esp,0x4
10003892:	6a 0d                	push   0xd
10003894:	50                   	push   eax
10003895:	53                   	push   ebx
10003896:	e8 fc ff ff ff       	call   10003897 <firstRun(bool)+0x6cc>	10003897: R_386_PC32	VgaText::setCursor(int, int)
1000389b:	83 c4 10             	add    esp,0x10
1000389e:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
100038a2:	75 28                	jne    100038cc <firstRun(bool)+0x701>
100038a4:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	100038a6: R_386_32	term
100038aa:	83 ec 0c             	sub    esp,0xc
100038ad:	68 00 00 00 00       	push   0x0	100038ae: R_386_32	passwbufB
100038b2:	e8 fc ff ff ff       	call   100038b3 <firstRun(bool)+0x6e8>	100038b3: R_386_PC32	strlen
100038b7:	83 c4 10             	add    esp,0x10
100038ba:	83 c0 21             	add    eax,0x21
100038bd:	83 ec 04             	sub    esp,0x4
100038c0:	6a 0f                	push   0xf
100038c2:	50                   	push   eax
100038c3:	53                   	push   ebx
100038c4:	e8 fc ff ff ff       	call   100038c5 <firstRun(bool)+0x6fa>	100038c5: R_386_PC32	VgaText::setCursor(int, int)
100038c9:	83 c4 10             	add    esp,0x10
100038cc:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
100038d0:	75 15                	jne    100038e7 <firstRun(bool)+0x71c>
100038d2:	a1 00 00 00 00       	mov    eax,ds:0x0	100038d3: R_386_32	term
100038d7:	83 ec 04             	sub    esp,0x4
100038da:	6a 02                	push   0x2
100038dc:	6a 00                	push   0x0
100038de:	50                   	push   eax
100038df:	e8 fc ff ff ff       	call   100038e0 <firstRun(bool)+0x715>	100038e0: R_386_PC32	VgaText::setCursor(int, int)
100038e4:	83 c4 10             	add    esp,0x10
100038e7:	a0 00 00 00 00       	mov    al,ds:0x0	100038e8: R_386_32	installKey
100038ec:	84 c0                	test   al,al
100038ee:	0f 94 c0             	sete   al
100038f1:	84 c0                	test   al,al
100038f3:	74 02                	je     100038f7 <firstRun(bool)+0x72c>
100038f5:	eb f0                	jmp    100038e7 <firstRun(bool)+0x71c>
100038f7:	a1 00 00 00 00       	mov    eax,ds:0x0	100038f8: R_386_32	term
100038fc:	05 82 00 00 00       	add    eax,0x82
10003901:	83 ec 04             	sub    esp,0x4
10003904:	6a 10                	push   0x10
10003906:	6a 00                	push   0x0
10003908:	50                   	push   eax
10003909:	e8 fc ff ff ff       	call   1000390a <firstRun(bool)+0x73f>	1000390a: R_386_PC32	memset
1000390e:	83 c4 10             	add    esp,0x10
10003911:	a1 00 00 00 00       	mov    eax,ds:0x0	10003912: R_386_32	term
10003916:	05 02 01 00 00       	add    eax,0x102
1000391b:	83 ec 04             	sub    esp,0x4
1000391e:	6a 10                	push   0x10
10003920:	6a 00                	push   0x0
10003922:	50                   	push   eax
10003923:	e8 fc ff ff ff       	call   10003924 <firstRun(bool)+0x759>	10003924: R_386_PC32	memset
10003928:	83 c4 10             	add    esp,0x10
1000392b:	a0 00 00 00 00       	mov    al,ds:0x0	1000392c: R_386_32	installKey
10003930:	3c 09                	cmp    al,0x9
10003932:	74 09                	je     1000393d <firstRun(bool)+0x772>
10003934:	a0 00 00 00 00       	mov    al,ds:0x0	10003935: R_386_32	installKey
10003939:	3c 0a                	cmp    al,0xa
1000393b:	75 04                	jne    10003941 <firstRun(bool)+0x776>
1000393d:	b0 01                	mov    al,0x1
1000393f:	eb 02                	jmp    10003943 <firstRun(bool)+0x778>
10003941:	b0 00                	mov    al,0x0
10003943:	84 c0                	test   al,al
10003945:	0f 84 c8 00 00 00    	je     10003a13 <firstRun(bool)+0x848>
1000394b:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
1000394f:	75 0d                	jne    1000395e <firstRun(bool)+0x793>
10003951:	a0 00 00 00 00       	mov    al,ds:0x0	10003952: R_386_32	installKey
10003956:	3c 0a                	cmp    al,0xa
10003958:	75 04                	jne    1000395e <firstRun(bool)+0x793>
1000395a:	b0 01                	mov    al,0x1
1000395c:	eb 02                	jmp    10003960 <firstRun(bool)+0x795>
1000395e:	b0 00                	mov    al,0x0
10003960:	84 c0                	test   al,al
10003962:	74 72                	je     100039d6 <firstRun(bool)+0x80b>
10003964:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003966: R_386_32	installKey
1000396b:	83 ec 08             	sub    esp,0x8
1000396e:	68 00 00 00 00       	push   0x0	1000396f: R_386_32	passwbufB
10003973:	68 00 00 00 00       	push   0x0	10003974: R_386_32	passwbufA
10003978:	e8 fc ff ff ff       	call   10003979 <firstRun(bool)+0x7ae>	10003979: R_386_PC32	strcmp
1000397d:	83 c4 10             	add    esp,0x10
10003980:	85 c0                	test   eax,eax
10003982:	75 21                	jne    100039a5 <firstRun(bool)+0x7da>
10003984:	83 ec 0c             	sub    esp,0xc
10003987:	68 00 00 00 00       	push   0x0	10003988: R_386_32	currName
1000398c:	e8 fc ff ff ff       	call   1000398d <firstRun(bool)+0x7c2>	1000398d: R_386_PC32	strlen
10003991:	83 c4 10             	add    esp,0x10
10003994:	85 c0                	test   eax,eax
10003996:	0f 85 26 03 00 00    	jne    10003cc2 <firstRun(bool)+0xaf7>
1000399c:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100039a3:	eb 57                	jmp    100039fc <firstRun(bool)+0x831>
100039a5:	c7 45 e0 02 00 00 00 	mov    DWORD PTR [ebp-0x20],0x2
100039ac:	83 ec 04             	sub    esp,0x4
100039af:	6a 30                	push   0x30
100039b1:	6a 00                	push   0x0
100039b3:	68 00 00 00 00       	push   0x0	100039b4: R_386_32	passwbufA
100039b8:	e8 fc ff ff ff       	call   100039b9 <firstRun(bool)+0x7ee>	100039b9: R_386_PC32	memset
100039bd:	83 c4 10             	add    esp,0x10
100039c0:	83 ec 04             	sub    esp,0x4
100039c3:	6a 30                	push   0x30
100039c5:	6a 00                	push   0x0
100039c7:	68 00 00 00 00       	push   0x0	100039c8: R_386_32	passwbufB
100039cc:	e8 fc ff ff ff       	call   100039cd <firstRun(bool)+0x802>	100039cd: R_386_PC32	memset
100039d1:	83 c4 10             	add    esp,0x10
100039d4:	eb 26                	jmp    100039fc <firstRun(bool)+0x831>
100039d6:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
100039d9:	a0 00 00 00 00       	mov    al,ds:0x0	100039da: R_386_32	createNewUserMode
100039de:	84 c0                	test   al,al
100039e0:	74 0d                	je     100039ef <firstRun(bool)+0x824>
100039e2:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
100039e6:	75 07                	jne    100039ef <firstRun(bool)+0x824>
100039e8:	c7 45 e0 02 00 00 00 	mov    DWORD PTR [ebp-0x20],0x2
100039ef:	83 7d e0 05          	cmp    DWORD PTR [ebp-0x20],0x5
100039f3:	75 07                	jne    100039fc <firstRun(bool)+0x831>
100039f5:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100039fc:	83 ec 08             	sub    esp,0x8
100039ff:	6a 00                	push   0x0
10003a01:	68 2c 01 00 00       	push   0x12c
10003a06:	e8 fc ff ff ff       	call   10003a07 <firstRun(bool)+0x83c>	10003a07: R_386_PC32	milliTenthSleep(unsigned long long)
10003a0b:	83 c4 10             	add    esp,0x10
10003a0e:	e9 a3 02 00 00       	jmp    10003cb6 <firstRun(bool)+0xaeb>
10003a13:	a0 00 00 00 00       	mov    al,ds:0x0	10003a14: R_386_32	installKey
10003a18:	3c 1f                	cmp    al,0x1f
10003a1a:	7e 0d                	jle    10003a29 <firstRun(bool)+0x85e>
10003a1c:	a0 00 00 00 00       	mov    al,ds:0x0	10003a1d: R_386_32	installKey
10003a21:	3c 7f                	cmp    al,0x7f
10003a23:	74 04                	je     10003a29 <firstRun(bool)+0x85e>
10003a25:	b0 01                	mov    al,0x1
10003a27:	eb 02                	jmp    10003a2b <firstRun(bool)+0x860>
10003a29:	b0 00                	mov    al,0x0
10003a2b:	84 c0                	test   al,al
10003a2d:	0f 84 39 01 00 00    	je     10003b6c <firstRun(bool)+0x9a1>
10003a33:	a0 00 00 00 00       	mov    al,ds:0x0	10003a34: R_386_32	installKey
10003a38:	88 85 c6 fe ff ff    	mov    BYTE PTR [ebp-0x13a],al
10003a3e:	c6 85 c7 fe ff ff 00 	mov    BYTE PTR [ebp-0x139],0x0
10003a45:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10003a49:	75 7e                	jne    10003ac9 <firstRun(bool)+0x8fe>
10003a4b:	83 ec 0c             	sub    esp,0xc
10003a4e:	68 00 00 00 00       	push   0x0	10003a4f: R_386_32	currName
10003a53:	e8 fc ff ff ff       	call   10003a54 <firstRun(bool)+0x889>	10003a54: R_386_PC32	strlen
10003a58:	83 c4 10             	add    esp,0x10
10003a5b:	83 f8 22             	cmp    eax,0x22
10003a5e:	77 69                	ja     10003ac9 <firstRun(bool)+0x8fe>
10003a60:	a0 00 00 00 00       	mov    al,ds:0x0	10003a61: R_386_32	installKey
10003a65:	3c 40                	cmp    al,0x40
10003a67:	7e 09                	jle    10003a72 <firstRun(bool)+0x8a7>
10003a69:	a0 00 00 00 00       	mov    al,ds:0x0	10003a6a: R_386_32	installKey
10003a6e:	3c 59                	cmp    al,0x59
10003a70:	7f 36                	jg     10003aa8 <firstRun(bool)+0x8dd>
10003a72:	a0 00 00 00 00       	mov    al,ds:0x0	10003a73: R_386_32	installKey
10003a77:	3c 60                	cmp    al,0x60
10003a79:	7e 09                	jle    10003a84 <firstRun(bool)+0x8b9>
10003a7b:	a0 00 00 00 00       	mov    al,ds:0x0	10003a7c: R_386_32	installKey
10003a80:	3c 79                	cmp    al,0x79
10003a82:	7f 24                	jg     10003aa8 <firstRun(bool)+0x8dd>
10003a84:	a0 00 00 00 00       	mov    al,ds:0x0	10003a85: R_386_32	installKey
10003a89:	3c 2f                	cmp    al,0x2f
10003a8b:	7e 09                	jle    10003a96 <firstRun(bool)+0x8cb>
10003a8d:	a0 00 00 00 00       	mov    al,ds:0x0	10003a8e: R_386_32	installKey
10003a92:	3c 38                	cmp    al,0x38
10003a94:	7f 12                	jg     10003aa8 <firstRun(bool)+0x8dd>
10003a96:	a0 00 00 00 00       	mov    al,ds:0x0	10003a97: R_386_32	installKey
10003a9b:	3c 5f                	cmp    al,0x5f
10003a9d:	74 09                	je     10003aa8 <firstRun(bool)+0x8dd>
10003a9f:	a0 00 00 00 00       	mov    al,ds:0x0	10003aa0: R_386_32	installKey
10003aa4:	3c 20                	cmp    al,0x20
10003aa6:	75 04                	jne    10003aac <firstRun(bool)+0x8e1>
10003aa8:	b0 01                	mov    al,0x1
10003aaa:	eb 02                	jmp    10003aae <firstRun(bool)+0x8e3>
10003aac:	b0 00                	mov    al,0x0
10003aae:	84 c0                	test   al,al
10003ab0:	74 17                	je     10003ac9 <firstRun(bool)+0x8fe>
10003ab2:	83 ec 08             	sub    esp,0x8
10003ab5:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003abb:	50                   	push   eax
10003abc:	68 00 00 00 00       	push   0x0	10003abd: R_386_32	currName
10003ac1:	e8 fc ff ff ff       	call   10003ac2 <firstRun(bool)+0x8f7>	10003ac2: R_386_PC32	strcat
10003ac6:	83 c4 10             	add    esp,0x10
10003ac9:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10003acd:	75 2c                	jne    10003afb <firstRun(bool)+0x930>
10003acf:	83 ec 0c             	sub    esp,0xc
10003ad2:	68 00 00 00 00       	push   0x0	10003ad3: R_386_32	currComp
10003ad7:	e8 fc ff ff ff       	call   10003ad8 <firstRun(bool)+0x90d>	10003ad8: R_386_PC32	strlen
10003adc:	83 c4 10             	add    esp,0x10
10003adf:	83 f8 22             	cmp    eax,0x22
10003ae2:	77 17                	ja     10003afb <firstRun(bool)+0x930>
10003ae4:	83 ec 08             	sub    esp,0x8
10003ae7:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003aed:	50                   	push   eax
10003aee:	68 00 00 00 00       	push   0x0	10003aef: R_386_32	currComp
10003af3:	e8 fc ff ff ff       	call   10003af4 <firstRun(bool)+0x929>	10003af4: R_386_PC32	strcat
10003af8:	83 c4 10             	add    esp,0x10
10003afb:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10003aff:	75 2c                	jne    10003b2d <firstRun(bool)+0x962>
10003b01:	83 ec 0c             	sub    esp,0xc
10003b04:	68 00 00 00 00       	push   0x0	10003b05: R_386_32	passwbufA
10003b09:	e8 fc ff ff ff       	call   10003b0a <firstRun(bool)+0x93f>	10003b0a: R_386_PC32	strlen
10003b0e:	83 c4 10             	add    esp,0x10
10003b11:	83 f8 22             	cmp    eax,0x22
10003b14:	77 17                	ja     10003b2d <firstRun(bool)+0x962>
10003b16:	83 ec 08             	sub    esp,0x8
10003b19:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003b1f:	50                   	push   eax
10003b20:	68 00 00 00 00       	push   0x0	10003b21: R_386_32	passwbufA
10003b25:	e8 fc ff ff ff       	call   10003b26 <firstRun(bool)+0x95b>	10003b26: R_386_PC32	strcat
10003b2a:	83 c4 10             	add    esp,0x10
10003b2d:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
10003b31:	0f 85 7f 01 00 00    	jne    10003cb6 <firstRun(bool)+0xaeb>
10003b37:	83 ec 0c             	sub    esp,0xc
10003b3a:	68 00 00 00 00       	push   0x0	10003b3b: R_386_32	passwbufB
10003b3f:	e8 fc ff ff ff       	call   10003b40 <firstRun(bool)+0x975>	10003b40: R_386_PC32	strlen
10003b44:	83 c4 10             	add    esp,0x10
10003b47:	83 f8 22             	cmp    eax,0x22
10003b4a:	0f 87 66 01 00 00    	ja     10003cb6 <firstRun(bool)+0xaeb>
10003b50:	83 ec 08             	sub    esp,0x8
10003b53:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003b59:	50                   	push   eax
10003b5a:	68 00 00 00 00       	push   0x0	10003b5b: R_386_32	passwbufB
10003b5f:	e8 fc ff ff ff       	call   10003b60 <firstRun(bool)+0x995>	10003b60: R_386_PC32	strcat
10003b64:	83 c4 10             	add    esp,0x10
10003b67:	e9 4a 01 00 00       	jmp    10003cb6 <firstRun(bool)+0xaeb>
10003b6c:	a0 00 00 00 00       	mov    al,ds:0x0	10003b6d: R_386_32	installKey
10003b71:	3c 1b                	cmp    al,0x1b
10003b73:	75 0d                	jne    10003b82 <firstRun(bool)+0x9b7>
10003b75:	a0 00 00 00 00       	mov    al,ds:0x0	10003b76: R_386_32	createNewUserMode
10003b7a:	84 c0                	test   al,al
10003b7c:	74 04                	je     10003b82 <firstRun(bool)+0x9b7>
10003b7e:	b0 01                	mov    al,0x1
10003b80:	eb 02                	jmp    10003b84 <firstRun(bool)+0x9b9>
10003b82:	b0 00                	mov    al,0x0
10003b84:	84 c0                	test   al,al
10003b86:	74 0c                	je     10003b94 <firstRun(bool)+0x9c9>
10003b88:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003b8a: R_386_32	createNewUserMode
10003b8f:	e9 19 1d 00 00       	jmp    100058ad <firstRun(bool)+0x26e2>
10003b94:	a0 00 00 00 00       	mov    al,ds:0x0	10003b95: R_386_32	installKey
10003b99:	3c 08                	cmp    al,0x8
10003b9b:	0f 94 c0             	sete   al
10003b9e:	84 c0                	test   al,al
10003ba0:	0f 84 ca 00 00 00    	je     10003c70 <firstRun(bool)+0xaa5>
10003ba6:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10003baa:	75 2c                	jne    10003bd8 <firstRun(bool)+0xa0d>
10003bac:	83 ec 0c             	sub    esp,0xc
10003baf:	68 00 00 00 00       	push   0x0	10003bb0: R_386_32	currName
10003bb4:	e8 fc ff ff ff       	call   10003bb5 <firstRun(bool)+0x9ea>	10003bb5: R_386_PC32	strlen
10003bb9:	83 c4 10             	add    esp,0x10
10003bbc:	85 c0                	test   eax,eax
10003bbe:	74 18                	je     10003bd8 <firstRun(bool)+0xa0d>
10003bc0:	83 ec 0c             	sub    esp,0xc
10003bc3:	68 00 00 00 00       	push   0x0	10003bc4: R_386_32	currName
10003bc8:	e8 fc ff ff ff       	call   10003bc9 <firstRun(bool)+0x9fe>	10003bc9: R_386_PC32	strlen
10003bcd:	83 c4 10             	add    esp,0x10
10003bd0:	48                   	dec    eax
10003bd1:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003bd3: R_386_32	currName
10003bd8:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10003bdc:	75 2c                	jne    10003c0a <firstRun(bool)+0xa3f>
10003bde:	83 ec 0c             	sub    esp,0xc
10003be1:	68 00 00 00 00       	push   0x0	10003be2: R_386_32	currComp
10003be6:	e8 fc ff ff ff       	call   10003be7 <firstRun(bool)+0xa1c>	10003be7: R_386_PC32	strlen
10003beb:	83 c4 10             	add    esp,0x10
10003bee:	85 c0                	test   eax,eax
10003bf0:	74 18                	je     10003c0a <firstRun(bool)+0xa3f>
10003bf2:	83 ec 0c             	sub    esp,0xc
10003bf5:	68 00 00 00 00       	push   0x0	10003bf6: R_386_32	currComp
10003bfa:	e8 fc ff ff ff       	call   10003bfb <firstRun(bool)+0xa30>	10003bfb: R_386_PC32	strlen
10003bff:	83 c4 10             	add    esp,0x10
10003c02:	48                   	dec    eax
10003c03:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003c05: R_386_32	currComp
10003c0a:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10003c0e:	75 2c                	jne    10003c3c <firstRun(bool)+0xa71>
10003c10:	83 ec 0c             	sub    esp,0xc
10003c13:	68 00 00 00 00       	push   0x0	10003c14: R_386_32	passwbufA
10003c18:	e8 fc ff ff ff       	call   10003c19 <firstRun(bool)+0xa4e>	10003c19: R_386_PC32	strlen
10003c1d:	83 c4 10             	add    esp,0x10
10003c20:	85 c0                	test   eax,eax
10003c22:	74 18                	je     10003c3c <firstRun(bool)+0xa71>
10003c24:	83 ec 0c             	sub    esp,0xc
10003c27:	68 00 00 00 00       	push   0x0	10003c28: R_386_32	passwbufA
10003c2c:	e8 fc ff ff ff       	call   10003c2d <firstRun(bool)+0xa62>	10003c2d: R_386_PC32	strlen
10003c31:	83 c4 10             	add    esp,0x10
10003c34:	48                   	dec    eax
10003c35:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003c37: R_386_32	passwbufA
10003c3c:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
10003c40:	75 74                	jne    10003cb6 <firstRun(bool)+0xaeb>
10003c42:	83 ec 0c             	sub    esp,0xc
10003c45:	68 00 00 00 00       	push   0x0	10003c46: R_386_32	passwbufB
10003c4a:	e8 fc ff ff ff       	call   10003c4b <firstRun(bool)+0xa80>	10003c4b: R_386_PC32	strlen
10003c4f:	83 c4 10             	add    esp,0x10
10003c52:	85 c0                	test   eax,eax
10003c54:	74 60                	je     10003cb6 <firstRun(bool)+0xaeb>
10003c56:	83 ec 0c             	sub    esp,0xc
10003c59:	68 00 00 00 00       	push   0x0	10003c5a: R_386_32	passwbufB
10003c5e:	e8 fc ff ff ff       	call   10003c5f <firstRun(bool)+0xa94>	10003c5f: R_386_PC32	strlen
10003c63:	83 c4 10             	add    esp,0x10
10003c66:	48                   	dec    eax
10003c67:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003c69: R_386_32	passwbufB
10003c6e:	eb 46                	jmp    10003cb6 <firstRun(bool)+0xaeb>
10003c70:	a0 00 00 00 00       	mov    al,ds:0x0	10003c71: R_386_32	installKey
10003c75:	3c 7f                	cmp    al,0x7f
10003c77:	0f 94 c0             	sete   al
10003c7a:	84 c0                	test   al,al
10003c7c:	74 38                	je     10003cb6 <firstRun(bool)+0xaeb>
10003c7e:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
10003c81:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
10003c85:	75 07                	jne    10003c8e <firstRun(bool)+0xac3>
10003c87:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10003c8e:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10003c92:	75 10                	jne    10003ca4 <firstRun(bool)+0xad9>
10003c94:	a0 00 00 00 00       	mov    al,ds:0x0	10003c95: R_386_32	createNewUserMode
10003c99:	84 c0                	test   al,al
10003c9b:	74 07                	je     10003ca4 <firstRun(bool)+0xad9>
10003c9d:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10003ca4:	83 ec 08             	sub    esp,0x8
10003ca7:	6a 00                	push   0x0
10003ca9:	68 2c 01 00 00       	push   0x12c
10003cae:	e8 fc ff ff ff       	call   10003caf <firstRun(bool)+0xae4>	10003caf: R_386_PC32	milliTenthSleep(unsigned long long)
10003cb3:	83 c4 10             	add    esp,0x10
10003cb6:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003cb8: R_386_32	installKey
10003cbd:	e9 3c f8 ff ff       	jmp    100034fe <firstRun(bool)+0x333>
10003cc2:	90                   	nop
10003cc3:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003cc5: R_386_32	installKey
10003cca:	83 ec 08             	sub    esp,0x8
10003ccd:	6a 00                	push   0x0
10003ccf:	68 d0 07 00 00       	push   0x7d0
10003cd4:	e8 fc ff ff ff       	call   10003cd5 <firstRun(bool)+0xb0a>	10003cd5: R_386_PC32	milliTenthSleep(unsigned long long)
10003cd9:	83 c4 10             	add    esp,0x10
10003cdc:	e8 fc ff ff ff       	call   10003cdd <firstRun(bool)+0xb12>	10003cdd: R_386_PC32	drawBootScreen()
10003ce1:	c7 45 bc 08 00 00 00 	mov    DWORD PTR [ebp-0x44],0x8
10003ce8:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10003cea: R_386_32	_bcrypt_errno
10003cf2:	83 ec 08             	sub    esp,0x8
10003cf5:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
10003cfb:	50                   	push   eax
10003cfc:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10003cff:	e8 fc ff ff ff       	call   10003d00 <firstRun(bool)+0xb35>	10003d00: R_386_PC32	bcrypt_gensalt
10003d04:	83 c4 10             	add    esp,0x10
10003d07:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10003d0a:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
10003d0e:	75 09                	jne    10003d19 <firstRun(bool)+0xb4e>
10003d10:	a1 00 00 00 00       	mov    eax,ds:0x0	10003d11: R_386_32	_bcrypt_errno
10003d15:	85 c0                	test   eax,eax
10003d17:	74 5e                	je     10003d77 <firstRun(bool)+0xbac>
10003d19:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10003d20:	83 ec 08             	sub    esp,0x8
10003d23:	68 04 b4 00 10       	push   0x1000b404	10003d24: R_386_32	.text
10003d28:	68 00 00 00 00       	push   0x0	10003d29: R_386_32	currName
10003d2d:	e8 fc ff ff ff       	call   10003d2e <firstRun(bool)+0xb63>	10003d2e: R_386_PC32	strcpy
10003d32:	83 c4 10             	add    esp,0x10
10003d35:	83 ec 08             	sub    esp,0x8
10003d38:	68 13 b4 00 10       	push   0x1000b413	10003d39: R_386_32	.text
10003d3d:	68 00 00 00 00       	push   0x0	10003d3e: R_386_32	currComp
10003d42:	e8 fc ff ff ff       	call   10003d43 <firstRun(bool)+0xb78>	10003d43: R_386_PC32	strcpy
10003d47:	83 c4 10             	add    esp,0x10
10003d4a:	83 ec 04             	sub    esp,0x4
10003d4d:	6a 50                	push   0x50
10003d4f:	6a 00                	push   0x0
10003d51:	68 00 00 00 00       	push   0x0	10003d52: R_386_32	passwbufA
10003d56:	e8 fc ff ff ff       	call   10003d57 <firstRun(bool)+0xb8c>	10003d57: R_386_PC32	memset
10003d5b:	83 c4 10             	add    esp,0x10
10003d5e:	83 ec 04             	sub    esp,0x4
10003d61:	6a 50                	push   0x50
10003d63:	6a 00                	push   0x0
10003d65:	68 00 00 00 00       	push   0x0	10003d66: R_386_32	passwbufB
10003d6a:	e8 fc ff ff ff       	call   10003d6b <firstRun(bool)+0xba0>	10003d6b: R_386_PC32	memset
10003d6f:	83 c4 10             	add    esp,0x10
10003d72:	e9 00 f6 ff ff       	jmp    10003377 <firstRun(bool)+0x1ac>
10003d77:	83 ec 08             	sub    esp,0x8
10003d7a:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
10003d80:	50                   	push   eax
10003d81:	68 00 00 00 00       	push   0x0	10003d82: R_386_32	passwsalt
10003d86:	e8 fc ff ff ff       	call   10003d87 <firstRun(bool)+0xbbc>	10003d87: R_386_PC32	strcpy
10003d8b:	83 c4 10             	add    esp,0x10
10003d8e:	83 ec 04             	sub    esp,0x4
10003d91:	68 00 00 00 00       	push   0x0	10003d92: R_386_32	passwhash
10003d96:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
10003d9c:	50                   	push   eax
10003d9d:	68 00 00 00 00       	push   0x0	10003d9e: R_386_32	passwbufA
10003da2:	e8 fc ff ff ff       	call   10003da3 <firstRun(bool)+0xbd8>	10003da3: R_386_PC32	bcrypt_hashpw
10003da7:	83 c4 10             	add    esp,0x10
10003daa:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10003dad:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
10003db1:	75 09                	jne    10003dbc <firstRun(bool)+0xbf1>
10003db3:	a1 00 00 00 00       	mov    eax,ds:0x0	10003db4: R_386_32	_bcrypt_errno
10003db8:	85 c0                	test   eax,eax
10003dba:	74 5e                	je     10003e1a <firstRun(bool)+0xc4f>
10003dbc:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10003dc3:	83 ec 08             	sub    esp,0x8
10003dc6:	68 04 b4 00 10       	push   0x1000b404	10003dc7: R_386_32	.text
10003dcb:	68 00 00 00 00       	push   0x0	10003dcc: R_386_32	currName
10003dd0:	e8 fc ff ff ff       	call   10003dd1 <firstRun(bool)+0xc06>	10003dd1: R_386_PC32	strcpy
10003dd5:	83 c4 10             	add    esp,0x10
10003dd8:	83 ec 08             	sub    esp,0x8
10003ddb:	68 25 b4 00 10       	push   0x1000b425	10003ddc: R_386_32	.text
10003de0:	68 00 00 00 00       	push   0x0	10003de1: R_386_32	currComp
10003de5:	e8 fc ff ff ff       	call   10003de6 <firstRun(bool)+0xc1b>	10003de6: R_386_PC32	strcpy
10003dea:	83 c4 10             	add    esp,0x10
10003ded:	83 ec 04             	sub    esp,0x4
10003df0:	6a 50                	push   0x50
10003df2:	6a 00                	push   0x0
10003df4:	68 00 00 00 00       	push   0x0	10003df5: R_386_32	passwbufA
10003df9:	e8 fc ff ff ff       	call   10003dfa <firstRun(bool)+0xc2f>	10003dfa: R_386_PC32	memset
10003dfe:	83 c4 10             	add    esp,0x10
10003e01:	83 ec 04             	sub    esp,0x4
10003e04:	6a 50                	push   0x50
10003e06:	6a 00                	push   0x0
10003e08:	68 00 00 00 00       	push   0x0	10003e09: R_386_32	passwbufB
10003e0d:	e8 fc ff ff ff       	call   10003e0e <firstRun(bool)+0xc43>	10003e0e: R_386_PC32	memset
10003e12:	83 c4 10             	add    esp,0x10
10003e15:	e9 5d f5 ff ff       	jmp    10003377 <firstRun(bool)+0x1ac>
10003e1a:	83 ec 04             	sub    esp,0x4
10003e1d:	6a 50                	push   0x50
10003e1f:	6a 00                	push   0x0
10003e21:	68 00 00 00 00       	push   0x0	10003e22: R_386_32	passwbufA
10003e26:	e8 fc ff ff ff       	call   10003e27 <firstRun(bool)+0xc5c>	10003e27: R_386_PC32	memset
10003e2b:	83 c4 10             	add    esp,0x10
10003e2e:	83 ec 04             	sub    esp,0x4
10003e31:	6a 50                	push   0x50
10003e33:	6a 00                	push   0x0
10003e35:	68 00 00 00 00       	push   0x0	10003e36: R_386_32	passwbufB
10003e3a:	e8 fc ff ff ff       	call   10003e3b <firstRun(bool)+0xc70>	10003e3b: R_386_PC32	memset
10003e3f:	83 c4 10             	add    esp,0x10
10003e42:	a0 00 00 00 00       	mov    al,ds:0x0	10003e43: R_386_32	createNewUserMode
10003e47:	84 c0                	test   al,al
10003e49:	74 16                	je     10003e61 <firstRun(bool)+0xc96>
10003e4b:	83 ec 0c             	sub    esp,0xc
10003e4e:	68 00 00 00 00       	push   0x0	10003e4f: R_386_32	currName
10003e53:	e8 fc ff ff ff       	call   10003e54 <firstRun(bool)+0xc89>	10003e54: R_386_PC32	createUser(char const*)
10003e58:	83 c4 10             	add    esp,0x10
10003e5b:	90                   	nop
10003e5c:	e9 4c 1a 00 00       	jmp    100058ad <firstRun(bool)+0x26e2>
10003e61:	83 ec 08             	sub    esp,0x8
10003e64:	6a 00                	push   0x0
10003e66:	68 d0 07 00 00       	push   0x7d0
10003e6b:	e8 fc ff ff ff       	call   10003e6c <firstRun(bool)+0xca1>	10003e6c: R_386_PC32	milliTenthSleep(unsigned long long)
10003e70:	83 c4 10             	add    esp,0x10
10003e73:	eb 01                	jmp    10003e76 <firstRun(bool)+0xcab>
10003e75:	90                   	nop
10003e76:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003e78: R_386_32	installKey
10003e7d:	e8 fc ff ff ff       	call   10003e7e <firstRun(bool)+0xcb3>	10003e7e: R_386_PC32	drawBootScreen()
10003e82:	83 ec 0c             	sub    esp,0xc
10003e85:	68 37 b4 00 10       	push   0x1000b437	10003e86: R_386_32	.text
10003e8a:	6a 0d                	push   0xd
10003e8c:	6a 32                	push   0x32
10003e8e:	6a 02                	push   0x2
10003e90:	6a 16                	push   0x16
10003e92:	e8 fc ff ff ff       	call   10003e93 <firstRun(bool)+0xcc8>	10003e93: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10003e97:	83 c4 20             	add    esp,0x20
10003e9a:	a1 00 00 00 00       	mov    eax,ds:0x0	10003e9b: R_386_32	Krnl::computer
10003e9f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
10003ea5:	a1 00 00 00 00       	mov    eax,ds:0x0	10003ea6: R_386_32	Krnl::computer
10003eaa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10003eb0:	8b 00                	mov    eax,DWORD PTR [eax]
10003eb2:	83 c0 28             	add    eax,0x28
10003eb5:	8b 00                	mov    eax,DWORD PTR [eax]
10003eb7:	8d 95 98 fe ff ff    	lea    edx,[ebp-0x168]
10003ebd:	83 ec 08             	sub    esp,0x8
10003ec0:	51                   	push   ecx
10003ec1:	52                   	push   edx
10003ec2:	ff d0                	call   eax
10003ec4:	83 c4 0c             	add    esp,0xc
10003ec7:	8b 85 98 fe ff ff    	mov    eax,DWORD PTR [ebp-0x168]
10003ecd:	8b 95 9c fe ff ff    	mov    edx,DWORD PTR [ebp-0x164]
10003ed3:	89 85 d4 fe ff ff    	mov    DWORD PTR [ebp-0x12c],eax
10003ed9:	89 95 d8 fe ff ff    	mov    DWORD PTR [ebp-0x128],edx
10003edf:	83 ec 08             	sub    esp,0x8
10003ee2:	68 45 b4 00 10       	push   0x1000b445	10003ee3: R_386_32	.text
10003ee7:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003eed:	50                   	push   eax
10003eee:	e8 fc ff ff ff       	call   10003eef <firstRun(bool)+0xd24>	10003eef: R_386_PC32	strcpy
10003ef3:	83 c4 10             	add    esp,0x10
10003ef6:	8a 85 d4 fe ff ff    	mov    al,BYTE PTR [ebp-0x12c]
10003efc:	0f b6 d0             	movzx  edx,al
10003eff:	89 d0                	mov    eax,edx
10003f01:	c1 e0 02             	shl    eax,0x2
10003f04:	01 d0                	add    eax,edx
10003f06:	c1 e0 03             	shl    eax,0x3
10003f09:	01 d0                	add    eax,edx
10003f0b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003f12:	01 d0                	add    eax,edx
10003f14:	66 c1 e8 08          	shr    ax,0x8
10003f18:	c0 e8 03             	shr    al,0x3
10003f1b:	83 c0 30             	add    eax,0x30
10003f1e:	88 85 40 ff ff ff    	mov    BYTE PTR [ebp-0xc0],al
10003f24:	8a 8d d4 fe ff ff    	mov    cl,BYTE PTR [ebp-0x12c]
10003f2a:	0f b6 d1             	movzx  edx,cl
10003f2d:	89 d0                	mov    eax,edx
10003f2f:	c1 e0 02             	shl    eax,0x2
10003f32:	01 d0                	add    eax,edx
10003f34:	c1 e0 03             	shl    eax,0x3
10003f37:	01 d0                	add    eax,edx
10003f39:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003f40:	01 d0                	add    eax,edx
10003f42:	66 c1 e8 08          	shr    ax,0x8
10003f46:	88 c2                	mov    dl,al
10003f48:	c0 ea 03             	shr    dl,0x3
10003f4b:	88 d0                	mov    al,dl
10003f4d:	c1 e0 02             	shl    eax,0x2
10003f50:	01 d0                	add    eax,edx
10003f52:	d1 e0                	shl    eax,1
10003f54:	29 c1                	sub    ecx,eax
10003f56:	88 ca                	mov    dl,cl
10003f58:	8d 42 30             	lea    eax,[edx+0x30]
10003f5b:	88 85 41 ff ff ff    	mov    BYTE PTR [ebp-0xbf],al
10003f61:	8a 85 d5 fe ff ff    	mov    al,BYTE PTR [ebp-0x12b]
10003f67:	0f b6 c8             	movzx  ecx,al
10003f6a:	b8 67 66 66 66       	mov    eax,0x66666667
10003f6f:	f7 e9                	imul   ecx
10003f71:	c1 fa 02             	sar    edx,0x2
10003f74:	89 c8                	mov    eax,ecx
10003f76:	c1 f8 1f             	sar    eax,0x1f
10003f79:	29 c2                	sub    edx,eax
10003f7b:	89 d0                	mov    eax,edx
10003f7d:	83 c0 30             	add    eax,0x30
10003f80:	88 85 43 ff ff ff    	mov    BYTE PTR [ebp-0xbd],al
10003f86:	8a 85 d5 fe ff ff    	mov    al,BYTE PTR [ebp-0x12b]
10003f8c:	0f b6 c8             	movzx  ecx,al
10003f8f:	b8 67 66 66 66       	mov    eax,0x66666667
10003f94:	f7 e9                	imul   ecx
10003f96:	c1 fa 02             	sar    edx,0x2
10003f99:	89 c8                	mov    eax,ecx
10003f9b:	c1 f8 1f             	sar    eax,0x1f
10003f9e:	29 c2                	sub    edx,eax
10003fa0:	89 d0                	mov    eax,edx
10003fa2:	c1 e0 02             	shl    eax,0x2
10003fa5:	01 d0                	add    eax,edx
10003fa7:	01 c0                	add    eax,eax
10003fa9:	29 c1                	sub    ecx,eax
10003fab:	89 ca                	mov    edx,ecx
10003fad:	88 d0                	mov    al,dl
10003faf:	83 c0 30             	add    eax,0x30
10003fb2:	88 85 44 ff ff ff    	mov    BYTE PTR [ebp-0xbc],al
10003fb8:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10003fbf:	0f b7 c8             	movzx  ecx,ax
10003fc2:	b8 d3 4d 62 10       	mov    eax,0x10624dd3
10003fc7:	f7 e9                	imul   ecx
10003fc9:	c1 fa 06             	sar    edx,0x6
10003fcc:	89 c8                	mov    eax,ecx
10003fce:	c1 f8 1f             	sar    eax,0x1f
10003fd1:	29 c2                	sub    edx,eax
10003fd3:	89 d0                	mov    eax,edx
10003fd5:	b9 0a 00 00 00       	mov    ecx,0xa
10003fda:	99                   	cdq    
10003fdb:	f7 f9                	idiv   ecx
10003fdd:	89 d0                	mov    eax,edx
10003fdf:	83 c0 30             	add    eax,0x30
10003fe2:	88 85 46 ff ff ff    	mov    BYTE PTR [ebp-0xba],al
10003fe8:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10003fef:	0f b7 c8             	movzx  ecx,ax
10003ff2:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10003ff7:	f7 e9                	imul   ecx
10003ff9:	c1 fa 05             	sar    edx,0x5
10003ffc:	89 c8                	mov    eax,ecx
10003ffe:	c1 f8 1f             	sar    eax,0x1f
10004001:	29 c2                	sub    edx,eax
10004003:	89 d0                	mov    eax,edx
10004005:	b9 0a 00 00 00       	mov    ecx,0xa
1000400a:	99                   	cdq    
1000400b:	f7 f9                	idiv   ecx
1000400d:	89 d0                	mov    eax,edx
1000400f:	83 c0 30             	add    eax,0x30
10004012:	88 85 47 ff ff ff    	mov    BYTE PTR [ebp-0xb9],al
10004018:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
1000401f:	0f b7 c8             	movzx  ecx,ax
10004022:	b8 67 66 66 66       	mov    eax,0x66666667
10004027:	f7 e9                	imul   ecx
10004029:	c1 fa 02             	sar    edx,0x2
1000402c:	89 c8                	mov    eax,ecx
1000402e:	c1 f8 1f             	sar    eax,0x1f
10004031:	89 d1                	mov    ecx,edx
10004033:	29 c1                	sub    ecx,eax
10004035:	b8 67 66 66 66       	mov    eax,0x66666667
1000403a:	f7 e9                	imul   ecx
1000403c:	c1 fa 02             	sar    edx,0x2
1000403f:	89 c8                	mov    eax,ecx
10004041:	c1 f8 1f             	sar    eax,0x1f
10004044:	29 c2                	sub    edx,eax
10004046:	89 d0                	mov    eax,edx
10004048:	c1 e0 02             	shl    eax,0x2
1000404b:	01 d0                	add    eax,edx
1000404d:	01 c0                	add    eax,eax
1000404f:	29 c1                	sub    ecx,eax
10004051:	89 ca                	mov    edx,ecx
10004053:	88 d0                	mov    al,dl
10004055:	83 c0 30             	add    eax,0x30
10004058:	88 85 48 ff ff ff    	mov    BYTE PTR [ebp-0xb8],al
1000405e:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10004065:	0f b7 c0             	movzx  eax,ax
10004068:	b9 0a 00 00 00       	mov    ecx,0xa
1000406d:	99                   	cdq    
1000406e:	f7 f9                	idiv   ecx
10004070:	89 d0                	mov    eax,edx
10004072:	83 c0 30             	add    eax,0x30
10004075:	88 85 49 ff ff ff    	mov    BYTE PTR [ebp-0xb7],al
1000407b:	8a 85 d8 fe ff ff    	mov    al,BYTE PTR [ebp-0x128]
10004081:	0f b6 d0             	movzx  edx,al
10004084:	89 d0                	mov    eax,edx
10004086:	c1 e0 02             	shl    eax,0x2
10004089:	01 d0                	add    eax,edx
1000408b:	c1 e0 03             	shl    eax,0x3
1000408e:	01 d0                	add    eax,edx
10004090:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10004097:	01 d0                	add    eax,edx
10004099:	66 c1 e8 08          	shr    ax,0x8
1000409d:	c0 e8 03             	shr    al,0x3
100040a0:	83 c0 30             	add    eax,0x30
100040a3:	88 85 4b ff ff ff    	mov    BYTE PTR [ebp-0xb5],al
100040a9:	8a 8d d8 fe ff ff    	mov    cl,BYTE PTR [ebp-0x128]
100040af:	0f b6 d1             	movzx  edx,cl
100040b2:	89 d0                	mov    eax,edx
100040b4:	c1 e0 02             	shl    eax,0x2
100040b7:	01 d0                	add    eax,edx
100040b9:	c1 e0 03             	shl    eax,0x3
100040bc:	01 d0                	add    eax,edx
100040be:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100040c5:	01 d0                	add    eax,edx
100040c7:	66 c1 e8 08          	shr    ax,0x8
100040cb:	88 c2                	mov    dl,al
100040cd:	c0 ea 03             	shr    dl,0x3
100040d0:	88 d0                	mov    al,dl
100040d2:	c1 e0 02             	shl    eax,0x2
100040d5:	01 d0                	add    eax,edx
100040d7:	d1 e0                	shl    eax,1
100040d9:	29 c1                	sub    ecx,eax
100040db:	88 ca                	mov    dl,cl
100040dd:	8d 42 30             	lea    eax,[edx+0x30]
100040e0:	88 85 4c ff ff ff    	mov    BYTE PTR [ebp-0xb4],al
100040e6:	8a 85 d9 fe ff ff    	mov    al,BYTE PTR [ebp-0x127]
100040ec:	0f b6 d0             	movzx  edx,al
100040ef:	89 d0                	mov    eax,edx
100040f1:	c1 e0 02             	shl    eax,0x2
100040f4:	01 d0                	add    eax,edx
100040f6:	c1 e0 03             	shl    eax,0x3
100040f9:	01 d0                	add    eax,edx
100040fb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10004102:	01 d0                	add    eax,edx
10004104:	66 c1 e8 08          	shr    ax,0x8
10004108:	c0 e8 03             	shr    al,0x3
1000410b:	83 c0 30             	add    eax,0x30
1000410e:	88 85 4e ff ff ff    	mov    BYTE PTR [ebp-0xb2],al
10004114:	8a 8d d9 fe ff ff    	mov    cl,BYTE PTR [ebp-0x127]
1000411a:	0f b6 d1             	movzx  edx,cl
1000411d:	89 d0                	mov    eax,edx
1000411f:	c1 e0 02             	shl    eax,0x2
10004122:	01 d0                	add    eax,edx
10004124:	c1 e0 03             	shl    eax,0x3
10004127:	01 d0                	add    eax,edx
10004129:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10004130:	01 d0                	add    eax,edx
10004132:	66 c1 e8 08          	shr    ax,0x8
10004136:	88 c2                	mov    dl,al
10004138:	c0 ea 03             	shr    dl,0x3
1000413b:	88 d0                	mov    al,dl
1000413d:	c1 e0 02             	shl    eax,0x2
10004140:	01 d0                	add    eax,edx
10004142:	d1 e0                	shl    eax,1
10004144:	29 c1                	sub    ecx,eax
10004146:	88 ca                	mov    dl,cl
10004148:	8d 42 30             	lea    eax,[edx+0x30]
1000414b:	88 85 4f ff ff ff    	mov    BYTE PTR [ebp-0xb1],al
10004151:	8a 85 da fe ff ff    	mov    al,BYTE PTR [ebp-0x126]
10004157:	0f b6 d0             	movzx  edx,al
1000415a:	89 d0                	mov    eax,edx
1000415c:	c1 e0 02             	shl    eax,0x2
1000415f:	01 d0                	add    eax,edx
10004161:	c1 e0 03             	shl    eax,0x3
10004164:	01 d0                	add    eax,edx
10004166:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000416d:	01 d0                	add    eax,edx
1000416f:	66 c1 e8 08          	shr    ax,0x8
10004173:	c0 e8 03             	shr    al,0x3
10004176:	83 c0 30             	add    eax,0x30
10004179:	88 85 51 ff ff ff    	mov    BYTE PTR [ebp-0xaf],al
1000417f:	8a 8d da fe ff ff    	mov    cl,BYTE PTR [ebp-0x126]
10004185:	0f b6 d1             	movzx  edx,cl
10004188:	89 d0                	mov    eax,edx
1000418a:	c1 e0 02             	shl    eax,0x2
1000418d:	01 d0                	add    eax,edx
1000418f:	c1 e0 03             	shl    eax,0x3
10004192:	01 d0                	add    eax,edx
10004194:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000419b:	01 d0                	add    eax,edx
1000419d:	66 c1 e8 08          	shr    ax,0x8
100041a1:	88 c2                	mov    dl,al
100041a3:	c0 ea 03             	shr    dl,0x3
100041a6:	88 d0                	mov    al,dl
100041a8:	c1 e0 02             	shl    eax,0x2
100041ab:	01 d0                	add    eax,edx
100041ad:	d1 e0                	shl    eax,1
100041af:	29 c1                	sub    ecx,eax
100041b1:	88 ca                	mov    dl,cl
100041b3:	8d 42 30             	lea    eax,[edx+0x30]
100041b6:	88 85 52 ff ff ff    	mov    BYTE PTR [ebp-0xae],al
100041bc:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100041c3:	a1 00 00 00 00       	mov    eax,ds:0x0	100041c4: R_386_32	term
100041c8:	83 ec 04             	sub    esp,0x4
100041cb:	6a 05                	push   0x5
100041cd:	6a 18                	push   0x18
100041cf:	50                   	push   eax
100041d0:	e8 fc ff ff ff       	call   100041d1 <firstRun(bool)+0x1006>	100041d1: R_386_PC32	VgaText::setCursor(int, int)
100041d5:	83 c4 10             	add    esp,0x10
100041d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100041d9: R_386_32	term
100041dd:	83 ec 08             	sub    esp,0x8
100041e0:	68 5c b4 00 10       	push   0x1000b45c	100041e1: R_386_32	.text
100041e5:	50                   	push   eax
100041e6:	e8 fc ff ff ff       	call   100041e7 <firstRun(bool)+0x101c>	100041e7: R_386_PC32	VgaText::puts(char const*)
100041eb:	83 c4 10             	add    esp,0x10
100041ee:	a1 00 00 00 00       	mov    eax,ds:0x0	100041ef: R_386_32	term
100041f3:	83 ec 04             	sub    esp,0x4
100041f6:	6a 06                	push   0x6
100041f8:	6a 18                	push   0x18
100041fa:	50                   	push   eax
100041fb:	e8 fc ff ff ff       	call   100041fc <firstRun(bool)+0x1031>	100041fc: R_386_PC32	VgaText::setCursor(int, int)
10004200:	83 c4 10             	add    esp,0x10
10004203:	a1 00 00 00 00       	mov    eax,ds:0x0	10004204: R_386_32	term
10004208:	83 ec 08             	sub    esp,0x8
1000420b:	68 84 b4 00 10       	push   0x1000b484	1000420c: R_386_32	.text
10004210:	50                   	push   eax
10004211:	e8 fc ff ff ff       	call   10004212 <firstRun(bool)+0x1047>	10004212: R_386_PC32	VgaText::puts(char const*)
10004216:	83 c4 10             	add    esp,0x10
10004219:	a1 00 00 00 00       	mov    eax,ds:0x0	1000421a: R_386_32	term
1000421e:	83 ec 04             	sub    esp,0x4
10004221:	6a 09                	push   0x9
10004223:	6a 1a                	push   0x1a
10004225:	50                   	push   eax
10004226:	e8 fc ff ff ff       	call   10004227 <firstRun(bool)+0x105c>	10004227: R_386_PC32	VgaText::setCursor(int, int)
1000422b:	83 c4 10             	add    esp,0x10
1000422e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000422f: R_386_32	term
10004233:	6a 0f                	push   0xf
10004235:	6a 07                	push   0x7
10004237:	68 9a b4 00 10       	push   0x1000b49a	10004238: R_386_32	.text
1000423c:	50                   	push   eax
1000423d:	e8 fc ff ff ff       	call   1000423e <firstRun(bool)+0x1073>	1000423e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004242:	83 c4 10             	add    esp,0x10
10004245:	a1 00 00 00 00       	mov    eax,ds:0x0	10004246: R_386_32	term
1000424a:	83 ec 04             	sub    esp,0x4
1000424d:	6a 18                	push   0x18
1000424f:	6a 11                	push   0x11
10004251:	50                   	push   eax
10004252:	e8 fc ff ff ff       	call   10004253 <firstRun(bool)+0x1088>	10004253: R_386_PC32	VgaText::setCursor(int, int)
10004257:	83 c4 10             	add    esp,0x10
1000425a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000425b: R_386_32	term
1000425f:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10004261: R_386_32	safemode
10004265:	84 d2                	test   dl,dl
10004267:	74 07                	je     10004270 <firstRun(bool)+0x10a5>
10004269:	b9 00 00 00 00       	mov    ecx,0x0
1000426e:	eb 05                	jmp    10004275 <firstRun(bool)+0x10aa>
10004270:	b9 0b 00 00 00       	mov    ecx,0xb
10004275:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10004277: R_386_32	safemode
1000427b:	84 d2                	test   dl,dl
1000427d:	74 07                	je     10004286 <firstRun(bool)+0x10bb>
1000427f:	ba 0f 00 00 00       	mov    edx,0xf
10004284:	eb 05                	jmp    1000428b <firstRun(bool)+0x10c0>
10004286:	ba 03 00 00 00       	mov    edx,0x3
1000428b:	51                   	push   ecx
1000428c:	52                   	push   edx
1000428d:	68 ae b4 00 10       	push   0x1000b4ae	1000428e: R_386_32	.text
10004292:	50                   	push   eax
10004293:	e8 fc ff ff ff       	call   10004294 <firstRun(bool)+0x10c9>	10004294: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004298:	83 c4 10             	add    esp,0x10
1000429b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000429c: R_386_32	term
100042a0:	83 ec 04             	sub    esp,0x4
100042a3:	6a 08                	push   0x8
100042a5:	6a 1a                	push   0x1a
100042a7:	50                   	push   eax
100042a8:	e8 fc ff ff ff       	call   100042a9 <firstRun(bool)+0x10de>	100042a9: R_386_PC32	VgaText::setCursor(int, int)
100042ad:	83 c4 10             	add    esp,0x10
100042b0:	a1 00 00 00 00       	mov    eax,ds:0x0	100042b1: R_386_32	term
100042b5:	83 ec 08             	sub    esp,0x8
100042b8:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
100042be:	52                   	push   edx
100042bf:	50                   	push   eax
100042c0:	e8 fc ff ff ff       	call   100042c1 <firstRun(bool)+0x10f6>	100042c1: R_386_PC32	VgaText::puts(char const*)
100042c5:	83 c4 10             	add    esp,0x10
100042c8:	a1 00 00 00 00       	mov    eax,ds:0x0	100042c9: R_386_32	term
100042cd:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100042d0:	83 c2 1a             	add    edx,0x1a
100042d3:	83 ec 04             	sub    esp,0x4
100042d6:	6a 08                	push   0x8
100042d8:	52                   	push   edx
100042d9:	50                   	push   eax
100042da:	e8 fc ff ff ff       	call   100042db <firstRun(bool)+0x1110>	100042db: R_386_PC32	VgaText::setCursor(int, int)
100042df:	83 c4 10             	add    esp,0x10
100042e2:	a1 00 00 00 00       	mov    eax,ds:0x0	100042e3: R_386_32	term
100042e7:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
100042ed:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100042f0:	01 ca                	add    edx,ecx
100042f2:	8a 12                	mov    dl,BYTE PTR [edx]
100042f4:	0f be d2             	movsx  edx,dl
100042f7:	6a 00                	push   0x0
100042f9:	6a 0f                	push   0xf
100042fb:	52                   	push   edx
100042fc:	50                   	push   eax
100042fd:	e8 fc ff ff ff       	call   100042fe <firstRun(bool)+0x1133>	100042fe: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10004302:	83 c4 10             	add    esp,0x10
10004305:	8a 85 4b ff ff ff    	mov    al,BYTE PTR [ebp-0xb5]
1000430b:	0f be c0             	movsx  eax,al
1000430e:	8d 50 d0             	lea    edx,[eax-0x30]
10004311:	89 d0                	mov    eax,edx
10004313:	c1 e0 02             	shl    eax,0x2
10004316:	01 d0                	add    eax,edx
10004318:	01 c0                	add    eax,eax
1000431a:	89 c2                	mov    edx,eax
1000431c:	8a 85 4c ff ff ff    	mov    al,BYTE PTR [ebp-0xb4]
10004322:	0f be c0             	movsx  eax,al
10004325:	83 e8 30             	sub    eax,0x30
10004328:	01 d0                	add    eax,edx
1000432a:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
1000432d:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
10004330:	b9 0c 00 00 00       	mov    ecx,0xc
10004335:	99                   	cdq    
10004336:	f7 f9                	idiv   ecx
10004338:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
1000433b:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
1000433f:	75 07                	jne    10004348 <firstRun(bool)+0x117d>
10004341:	c7 45 d0 0c 00 00 00 	mov    DWORD PTR [ebp-0x30],0xc
10004348:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [ebp-0xb2]
1000434e:	0f be c0             	movsx  eax,al
10004351:	8d 50 d0             	lea    edx,[eax-0x30]
10004354:	89 d0                	mov    eax,edx
10004356:	c1 e0 02             	shl    eax,0x2
10004359:	01 d0                	add    eax,edx
1000435b:	01 c0                	add    eax,eax
1000435d:	89 c2                	mov    edx,eax
1000435f:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [ebp-0xb1]
10004365:	0f be c0             	movsx  eax,al
10004368:	83 e8 30             	sub    eax,0x30
1000436b:	01 d0                	add    eax,edx
1000436d:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
10004370:	83 ec 04             	sub    esp,0x4
10004373:	6a 10                	push   0x10
10004375:	6a 00                	push   0x0
10004377:	8d 85 b6 fe ff ff    	lea    eax,[ebp-0x14a]
1000437d:	50                   	push   eax
1000437e:	e8 fc ff ff ff       	call   1000437f <firstRun(bool)+0x11b4>	1000437f: R_386_PC32	memset
10004383:	83 c4 10             	add    esp,0x10
10004386:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [ebp-0x54],0x0
1000438d:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10004390:	8d 50 01             	lea    edx,[eax+0x1]
10004393:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10004396:	c6 84 05 b6 fe ff ff 28 	mov    BYTE PTR [ebp+eax*1-0x14a],0x28
1000439e:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
100043a1:	b8 67 66 66 66       	mov    eax,0x66666667
100043a6:	f7 e9                	imul   ecx
100043a8:	c1 fa 02             	sar    edx,0x2
100043ab:	89 c8                	mov    eax,ecx
100043ad:	c1 f8 1f             	sar    eax,0x1f
100043b0:	29 c2                	sub    edx,eax
100043b2:	89 d0                	mov    eax,edx
100043b4:	8d 48 30             	lea    ecx,[eax+0x30]
100043b7:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
100043ba:	8d 50 01             	lea    edx,[eax+0x1]
100043bd:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100043c0:	88 ca                	mov    dl,cl
100043c2:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
100043c9:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
100043cc:	b8 67 66 66 66       	mov    eax,0x66666667
100043d1:	f7 e9                	imul   ecx
100043d3:	c1 fa 02             	sar    edx,0x2
100043d6:	89 c8                	mov    eax,ecx
100043d8:	c1 f8 1f             	sar    eax,0x1f
100043db:	29 c2                	sub    edx,eax
100043dd:	89 d0                	mov    eax,edx
100043df:	c1 e0 02             	shl    eax,0x2
100043e2:	01 d0                	add    eax,edx
100043e4:	01 c0                	add    eax,eax
100043e6:	29 c1                	sub    ecx,eax
100043e8:	89 ca                	mov    edx,ecx
100043ea:	88 d0                	mov    al,dl
100043ec:	8d 48 30             	lea    ecx,[eax+0x30]
100043ef:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
100043f2:	8d 50 01             	lea    edx,[eax+0x1]
100043f5:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100043f8:	88 ca                	mov    dl,cl
100043fa:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10004401:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10004404:	8d 50 01             	lea    edx,[eax+0x1]
10004407:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
1000440a:	c6 84 05 b6 fe ff ff 3a 	mov    BYTE PTR [ebp+eax*1-0x14a],0x3a
10004412:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
10004415:	b8 67 66 66 66       	mov    eax,0x66666667
1000441a:	f7 e9                	imul   ecx
1000441c:	c1 fa 02             	sar    edx,0x2
1000441f:	89 c8                	mov    eax,ecx
10004421:	c1 f8 1f             	sar    eax,0x1f
10004424:	29 c2                	sub    edx,eax
10004426:	89 d0                	mov    eax,edx
10004428:	8d 48 30             	lea    ecx,[eax+0x30]
1000442b:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
1000442e:	8d 50 01             	lea    edx,[eax+0x1]
10004431:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10004434:	88 ca                	mov    dl,cl
10004436:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
1000443d:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
10004440:	b8 67 66 66 66       	mov    eax,0x66666667
10004445:	f7 e9                	imul   ecx
10004447:	c1 fa 02             	sar    edx,0x2
1000444a:	89 c8                	mov    eax,ecx
1000444c:	c1 f8 1f             	sar    eax,0x1f
1000444f:	29 c2                	sub    edx,eax
10004451:	89 d0                	mov    eax,edx
10004453:	c1 e0 02             	shl    eax,0x2
10004456:	01 d0                	add    eax,edx
10004458:	01 c0                	add    eax,eax
1000445a:	29 c1                	sub    ecx,eax
1000445c:	89 ca                	mov    edx,ecx
1000445e:	88 d0                	mov    al,dl
10004460:	8d 48 30             	lea    ecx,[eax+0x30]
10004463:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10004466:	8d 50 01             	lea    edx,[eax+0x1]
10004469:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
1000446c:	88 ca                	mov    dl,cl
1000446e:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10004475:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10004478:	8d 50 01             	lea    edx,[eax+0x1]
1000447b:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
1000447e:	c6 84 05 b6 fe ff ff 20 	mov    BYTE PTR [ebp+eax*1-0x14a],0x20
10004486:	83 7d b4 0b          	cmp    DWORD PTR [ebp-0x4c],0xb
1000448a:	7e 04                	jle    10004490 <firstRun(bool)+0x12c5>
1000448c:	b2 50                	mov    dl,0x50
1000448e:	eb 02                	jmp    10004492 <firstRun(bool)+0x12c7>
10004490:	b2 41                	mov    dl,0x41
10004492:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10004495:	8d 48 01             	lea    ecx,[eax+0x1]
10004498:	89 4d ac             	mov    DWORD PTR [ebp-0x54],ecx
1000449b:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
100044a2:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
100044a5:	8d 50 01             	lea    edx,[eax+0x1]
100044a8:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100044ab:	c6 84 05 b6 fe ff ff 4d 	mov    BYTE PTR [ebp+eax*1-0x14a],0x4d
100044b3:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
100044b6:	8d 50 01             	lea    edx,[eax+0x1]
100044b9:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100044bc:	c6 84 05 b6 fe ff ff 29 	mov    BYTE PTR [ebp+eax*1-0x14a],0x29
100044c4:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	100044c6: R_386_32	term
100044ca:	83 ec 0c             	sub    esp,0xc
100044cd:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
100044d3:	50                   	push   eax
100044d4:	e8 fc ff ff ff       	call   100044d5 <firstRun(bool)+0x130a>	100044d5: R_386_PC32	strlen
100044d9:	83 c4 10             	add    esp,0x10
100044dc:	83 c0 1e             	add    eax,0x1e
100044df:	83 ec 04             	sub    esp,0x4
100044e2:	6a 08                	push   0x8
100044e4:	50                   	push   eax
100044e5:	53                   	push   ebx
100044e6:	e8 fc ff ff ff       	call   100044e7 <firstRun(bool)+0x131c>	100044e7: R_386_PC32	VgaText::setCursor(int, int)
100044eb:	83 c4 10             	add    esp,0x10
100044ee:	a1 00 00 00 00       	mov    eax,ds:0x0	100044ef: R_386_32	term
100044f3:	83 ec 08             	sub    esp,0x8
100044f6:	8d 95 b6 fe ff ff    	lea    edx,[ebp-0x14a]
100044fc:	52                   	push   edx
100044fd:	50                   	push   eax
100044fe:	e8 fc ff ff ff       	call   100044ff <firstRun(bool)+0x1334>	100044ff: R_386_PC32	VgaText::puts(char const*)
10004503:	83 c4 10             	add    esp,0x10
10004506:	a1 00 00 00 00       	mov    eax,ds:0x0	10004507: R_386_32	term
1000450b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000450e:	83 c2 1a             	add    edx,0x1a
10004511:	83 ec 04             	sub    esp,0x4
10004514:	6a 08                	push   0x8
10004516:	52                   	push   edx
10004517:	50                   	push   eax
10004518:	e8 fc ff ff ff       	call   10004519 <firstRun(bool)+0x134e>	10004519: R_386_PC32	VgaText::setCursor(int, int)
1000451d:	83 c4 10             	add    esp,0x10
10004520:	a0 00 00 00 00       	mov    al,ds:0x0	10004521: R_386_32	installKey
10004525:	84 c0                	test   al,al
10004527:	0f 94 c0             	sete   al
1000452a:	84 c0                	test   al,al
1000452c:	74 02                	je     10004530 <firstRun(bool)+0x1365>
1000452e:	eb f0                	jmp    10004520 <firstRun(bool)+0x1355>
10004530:	a1 00 00 00 00       	mov    eax,ds:0x0	10004531: R_386_32	term
10004535:	05 82 00 00 00       	add    eax,0x82
1000453a:	83 ec 04             	sub    esp,0x4
1000453d:	6a 10                	push   0x10
1000453f:	6a 00                	push   0x0
10004541:	50                   	push   eax
10004542:	e8 fc ff ff ff       	call   10004543 <firstRun(bool)+0x1378>	10004543: R_386_PC32	memset
10004547:	83 c4 10             	add    esp,0x10
1000454a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000454b: R_386_32	term
1000454f:	05 02 01 00 00       	add    eax,0x102
10004554:	83 ec 04             	sub    esp,0x4
10004557:	6a 10                	push   0x10
10004559:	6a 00                	push   0x0
1000455b:	50                   	push   eax
1000455c:	e8 fc ff ff ff       	call   1000455d <firstRun(bool)+0x1392>	1000455d: R_386_PC32	memset
10004561:	83 c4 10             	add    esp,0x10
10004564:	a0 00 00 00 00       	mov    al,ds:0x0	10004565: R_386_32	installKey
10004569:	3c 03                	cmp    al,0x3
1000456b:	74 09                	je     10004576 <firstRun(bool)+0x13ab>
1000456d:	a0 00 00 00 00       	mov    al,ds:0x0	1000456e: R_386_32	installKey
10004572:	3c 08                	cmp    al,0x8
10004574:	75 04                	jne    1000457a <firstRun(bool)+0x13af>
10004576:	b0 01                	mov    al,0x1
10004578:	eb 02                	jmp    1000457c <firstRun(bool)+0x13b1>
1000457a:	b0 00                	mov    al,0x0
1000457c:	84 c0                	test   al,al
1000457e:	74 58                	je     100045d8 <firstRun(bool)+0x140d>
10004580:	ff 4d e4             	dec    DWORD PTR [ebp-0x1c]
10004583:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10004587:	75 16                	jne    1000459f <firstRun(bool)+0x13d4>
10004589:	83 ec 0c             	sub    esp,0xc
1000458c:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10004592:	50                   	push   eax
10004593:	e8 fc ff ff ff       	call   10004594 <firstRun(bool)+0x13c9>	10004594: R_386_PC32	strlen
10004598:	83 c4 10             	add    esp,0x10
1000459b:	48                   	dec    eax
1000459c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
1000459f:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
100045a5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100045a8:	01 d0                	add    eax,edx
100045aa:	8a 00                	mov    al,BYTE PTR [eax]
100045ac:	3c 20                	cmp    al,0x20
100045ae:	74 d0                	je     10004580 <firstRun(bool)+0x13b5>
100045b0:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
100045b6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100045b9:	01 d0                	add    eax,edx
100045bb:	8a 00                	mov    al,BYTE PTR [eax]
100045bd:	3c 2f                	cmp    al,0x2f
100045bf:	74 bf                	je     10004580 <firstRun(bool)+0x13b5>
100045c1:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
100045c7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100045ca:	01 d0                	add    eax,edx
100045cc:	8a 00                	mov    al,BYTE PTR [eax]
100045ce:	3c 3a                	cmp    al,0x3a
100045d0:	0f 85 f8 04 00 00    	jne    10004ace <firstRun(bool)+0x1903>
100045d6:	eb a8                	jmp    10004580 <firstRun(bool)+0x13b5>
100045d8:	a0 00 00 00 00       	mov    al,ds:0x0	100045d9: R_386_32	installKey
100045dd:	3c 2f                	cmp    al,0x2f
100045df:	7e 09                	jle    100045ea <firstRun(bool)+0x141f>
100045e1:	a0 00 00 00 00       	mov    al,ds:0x0	100045e2: R_386_32	installKey
100045e6:	3c 39                	cmp    al,0x39
100045e8:	7e 12                	jle    100045fc <firstRun(bool)+0x1431>
100045ea:	a0 00 00 00 00       	mov    al,ds:0x0	100045eb: R_386_32	installKey
100045ef:	3c 20                	cmp    al,0x20
100045f1:	74 09                	je     100045fc <firstRun(bool)+0x1431>
100045f3:	a0 00 00 00 00       	mov    al,ds:0x0	100045f4: R_386_32	installKey
100045f8:	3c 04                	cmp    al,0x4
100045fa:	75 04                	jne    10004600 <firstRun(bool)+0x1435>
100045fc:	b0 01                	mov    al,0x1
100045fe:	eb 02                	jmp    10004602 <firstRun(bool)+0x1437>
10004600:	b0 00                	mov    al,0x0
10004602:	84 c0                	test   al,al
10004604:	0f 84 cf 01 00 00    	je     100047d9 <firstRun(bool)+0x160e>
1000460a:	a0 00 00 00 00       	mov    al,ds:0x0	1000460b: R_386_32	installKey
1000460f:	3c 2f                	cmp    al,0x2f
10004611:	7e 0d                	jle    10004620 <firstRun(bool)+0x1455>
10004613:	a0 00 00 00 00       	mov    al,ds:0x0	10004614: R_386_32	installKey
10004618:	3c 39                	cmp    al,0x39
1000461a:	7f 04                	jg     10004620 <firstRun(bool)+0x1455>
1000461c:	b0 01                	mov    al,0x1
1000461e:	eb 02                	jmp    10004622 <firstRun(bool)+0x1457>
10004620:	b0 00                	mov    al,0x0
10004622:	84 c0                	test   al,al
10004624:	0f 84 51 01 00 00    	je     1000477b <firstRun(bool)+0x15b0>
1000462a:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
1000462e:	75 0d                	jne    1000463d <firstRun(bool)+0x1472>
10004630:	a0 00 00 00 00       	mov    al,ds:0x0	10004631: R_386_32	installKey
10004635:	3c 33                	cmp    al,0x33
10004637:	7e 04                	jle    1000463d <firstRun(bool)+0x1472>
10004639:	b0 01                	mov    al,0x1
1000463b:	eb 02                	jmp    1000463f <firstRun(bool)+0x1474>
1000463d:	b0 00                	mov    al,0x0
1000463f:	84 c0                	test   al,al
10004641:	74 28                	je     1000466b <firstRun(bool)+0x14a0>
10004643:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004646:	8d 50 01             	lea    edx,[eax+0x1]
10004649:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
1000464c:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10004654:	a0 00 00 00 00       	mov    al,ds:0x0	10004655: R_386_32	installKey
10004659:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
1000465f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004662:	01 ca                	add    edx,ecx
10004664:	88 02                	mov    BYTE PTR [edx],al
10004666:	e9 10 01 00 00       	jmp    1000477b <firstRun(bool)+0x15b0>
1000466b:	83 7d e4 03          	cmp    DWORD PTR [ebp-0x1c],0x3
1000466f:	75 0d                	jne    1000467e <firstRun(bool)+0x14b3>
10004671:	a0 00 00 00 00       	mov    al,ds:0x0	10004672: R_386_32	installKey
10004676:	3c 31                	cmp    al,0x31
10004678:	7e 04                	jle    1000467e <firstRun(bool)+0x14b3>
1000467a:	b0 01                	mov    al,0x1
1000467c:	eb 02                	jmp    10004680 <firstRun(bool)+0x14b5>
1000467e:	b0 00                	mov    al,0x0
10004680:	84 c0                	test   al,al
10004682:	74 28                	je     100046ac <firstRun(bool)+0x14e1>
10004684:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004687:	8d 50 01             	lea    edx,[eax+0x1]
1000468a:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
1000468d:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10004695:	a0 00 00 00 00       	mov    al,ds:0x0	10004696: R_386_32	installKey
1000469a:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
100046a0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100046a3:	01 ca                	add    edx,ecx
100046a5:	88 02                	mov    BYTE PTR [edx],al
100046a7:	e9 cf 00 00 00       	jmp    1000477b <firstRun(bool)+0x15b0>
100046ac:	83 7d e4 0b          	cmp    DWORD PTR [ebp-0x1c],0xb
100046b0:	75 0d                	jne    100046bf <firstRun(bool)+0x14f4>
100046b2:	a0 00 00 00 00       	mov    al,ds:0x0	100046b3: R_386_32	installKey
100046b7:	3c 32                	cmp    al,0x32
100046b9:	7e 04                	jle    100046bf <firstRun(bool)+0x14f4>
100046bb:	b0 01                	mov    al,0x1
100046bd:	eb 02                	jmp    100046c1 <firstRun(bool)+0x14f6>
100046bf:	b0 00                	mov    al,0x0
100046c1:	84 c0                	test   al,al
100046c3:	74 28                	je     100046ed <firstRun(bool)+0x1522>
100046c5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100046c8:	8d 50 01             	lea    edx,[eax+0x1]
100046cb:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
100046ce:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
100046d6:	a0 00 00 00 00       	mov    al,ds:0x0	100046d7: R_386_32	installKey
100046db:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
100046e1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100046e4:	01 ca                	add    edx,ecx
100046e6:	88 02                	mov    BYTE PTR [edx],al
100046e8:	e9 8e 00 00 00       	jmp    1000477b <firstRun(bool)+0x15b0>
100046ed:	83 7d e4 0e          	cmp    DWORD PTR [ebp-0x1c],0xe
100046f1:	75 0d                	jne    10004700 <firstRun(bool)+0x1535>
100046f3:	a0 00 00 00 00       	mov    al,ds:0x0	100046f4: R_386_32	installKey
100046f8:	3c 35                	cmp    al,0x35
100046fa:	7e 04                	jle    10004700 <firstRun(bool)+0x1535>
100046fc:	b0 01                	mov    al,0x1
100046fe:	eb 02                	jmp    10004702 <firstRun(bool)+0x1537>
10004700:	b0 00                	mov    al,0x0
10004702:	84 c0                	test   al,al
10004704:	74 25                	je     1000472b <firstRun(bool)+0x1560>
10004706:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004709:	8d 50 01             	lea    edx,[eax+0x1]
1000470c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
1000470f:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10004717:	a0 00 00 00 00       	mov    al,ds:0x0	10004718: R_386_32	installKey
1000471c:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10004722:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004725:	01 ca                	add    edx,ecx
10004727:	88 02                	mov    BYTE PTR [edx],al
10004729:	eb 50                	jmp    1000477b <firstRun(bool)+0x15b0>
1000472b:	83 7d e4 11          	cmp    DWORD PTR [ebp-0x1c],0x11
1000472f:	75 0d                	jne    1000473e <firstRun(bool)+0x1573>
10004731:	a0 00 00 00 00       	mov    al,ds:0x0	10004732: R_386_32	installKey
10004736:	3c 35                	cmp    al,0x35
10004738:	7e 04                	jle    1000473e <firstRun(bool)+0x1573>
1000473a:	b0 01                	mov    al,0x1
1000473c:	eb 02                	jmp    10004740 <firstRun(bool)+0x1575>
1000473e:	b0 00                	mov    al,0x0
10004740:	84 c0                	test   al,al
10004742:	74 25                	je     10004769 <firstRun(bool)+0x159e>
10004744:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004747:	8d 50 01             	lea    edx,[eax+0x1]
1000474a:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
1000474d:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10004755:	a0 00 00 00 00       	mov    al,ds:0x0	10004756: R_386_32	installKey
1000475a:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10004760:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004763:	01 ca                	add    edx,ecx
10004765:	88 02                	mov    BYTE PTR [edx],al
10004767:	eb 12                	jmp    1000477b <firstRun(bool)+0x15b0>
10004769:	a0 00 00 00 00       	mov    al,ds:0x0	1000476a: R_386_32	installKey
1000476e:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10004774:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004777:	01 ca                	add    edx,ecx
10004779:	88 02                	mov    BYTE PTR [edx],al
1000477b:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
1000477e:	83 ec 0c             	sub    esp,0xc
10004781:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10004787:	50                   	push   eax
10004788:	e8 fc ff ff ff       	call   10004789 <firstRun(bool)+0x15be>	10004789: R_386_PC32	strlen
1000478d:	83 c4 10             	add    esp,0x10
10004790:	89 c2                	mov    edx,eax
10004792:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004795:	39 c2                	cmp    edx,eax
10004797:	77 07                	ja     100047a0 <firstRun(bool)+0x15d5>
10004799:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100047a0:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
100047a6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100047a9:	01 d0                	add    eax,edx
100047ab:	8a 00                	mov    al,BYTE PTR [eax]
100047ad:	3c 20                	cmp    al,0x20
100047af:	74 ca                	je     1000477b <firstRun(bool)+0x15b0>
100047b1:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
100047b7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100047ba:	01 d0                	add    eax,edx
100047bc:	8a 00                	mov    al,BYTE PTR [eax]
100047be:	3c 2f                	cmp    al,0x2f
100047c0:	74 b9                	je     1000477b <firstRun(bool)+0x15b0>
100047c2:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
100047c8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100047cb:	01 d0                	add    eax,edx
100047cd:	8a 00                	mov    al,BYTE PTR [eax]
100047cf:	3c 3a                	cmp    al,0x3a
100047d1:	0f 85 f7 02 00 00    	jne    10004ace <firstRun(bool)+0x1903>
100047d7:	eb a2                	jmp    1000477b <firstRun(bool)+0x15b0>
100047d9:	a0 00 00 00 00       	mov    al,ds:0x0	100047da: R_386_32	installKey
100047de:	3c 0a                	cmp    al,0xa
100047e0:	0f 94 c0             	sete   al
100047e3:	84 c0                	test   al,al
100047e5:	0f 84 d1 02 00 00    	je     10004abc <firstRun(bool)+0x18f1>
100047eb:	8a 85 40 ff ff ff    	mov    al,BYTE PTR [ebp-0xc0]
100047f1:	0f be c0             	movsx  eax,al
100047f4:	8d 50 d0             	lea    edx,[eax-0x30]
100047f7:	89 d0                	mov    eax,edx
100047f9:	c1 e0 02             	shl    eax,0x2
100047fc:	01 d0                	add    eax,edx
100047fe:	01 c0                	add    eax,eax
10004800:	89 c2                	mov    edx,eax
10004802:	8a 85 41 ff ff ff    	mov    al,BYTE PTR [ebp-0xbf]
10004808:	0f be c0             	movsx  eax,al
1000480b:	83 e8 30             	sub    eax,0x30
1000480e:	01 d0                	add    eax,edx
10004810:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10004813:	8a 85 43 ff ff ff    	mov    al,BYTE PTR [ebp-0xbd]
10004819:	0f be c0             	movsx  eax,al
1000481c:	8d 50 d0             	lea    edx,[eax-0x30]
1000481f:	89 d0                	mov    eax,edx
10004821:	c1 e0 02             	shl    eax,0x2
10004824:	01 d0                	add    eax,edx
10004826:	01 c0                	add    eax,eax
10004828:	89 c2                	mov    edx,eax
1000482a:	8a 85 44 ff ff ff    	mov    al,BYTE PTR [ebp-0xbc]
10004830:	0f be c0             	movsx  eax,al
10004833:	83 e8 30             	sub    eax,0x30
10004836:	01 d0                	add    eax,edx
10004838:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
1000483b:	8a 85 46 ff ff ff    	mov    al,BYTE PTR [ebp-0xba]
10004841:	0f be c0             	movsx  eax,al
10004844:	8d 50 d0             	lea    edx,[eax-0x30]
10004847:	89 d0                	mov    eax,edx
10004849:	c1 e0 02             	shl    eax,0x2
1000484c:	01 d0                	add    eax,edx
1000484e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10004855:	01 d0                	add    eax,edx
10004857:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000485e:	01 d0                	add    eax,edx
10004860:	c1 e0 03             	shl    eax,0x3
10004863:	89 c1                	mov    ecx,eax
10004865:	8a 85 47 ff ff ff    	mov    al,BYTE PTR [ebp-0xb9]
1000486b:	0f be c0             	movsx  eax,al
1000486e:	8d 50 d0             	lea    edx,[eax-0x30]
10004871:	89 d0                	mov    eax,edx
10004873:	c1 e0 02             	shl    eax,0x2
10004876:	01 d0                	add    eax,edx
10004878:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000487f:	01 d0                	add    eax,edx
10004881:	c1 e0 02             	shl    eax,0x2
10004884:	01 c1                	add    ecx,eax
10004886:	8a 85 48 ff ff ff    	mov    al,BYTE PTR [ebp-0xb8]
1000488c:	0f be c0             	movsx  eax,al
1000488f:	8d 50 d0             	lea    edx,[eax-0x30]
10004892:	89 d0                	mov    eax,edx
10004894:	c1 e0 02             	shl    eax,0x2
10004897:	01 d0                	add    eax,edx
10004899:	01 c0                	add    eax,eax
1000489b:	8d 14 01             	lea    edx,[ecx+eax*1]
1000489e:	8a 85 49 ff ff ff    	mov    al,BYTE PTR [ebp-0xb7]
100048a4:	0f be c0             	movsx  eax,al
100048a7:	83 e8 30             	sub    eax,0x30
100048aa:	01 d0                	add    eax,edx
100048ac:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
100048af:	8a 85 4b ff ff ff    	mov    al,BYTE PTR [ebp-0xb5]
100048b5:	0f be c0             	movsx  eax,al
100048b8:	8d 50 d0             	lea    edx,[eax-0x30]
100048bb:	89 d0                	mov    eax,edx
100048bd:	c1 e0 02             	shl    eax,0x2
100048c0:	01 d0                	add    eax,edx
100048c2:	01 c0                	add    eax,eax
100048c4:	89 c2                	mov    edx,eax
100048c6:	8a 85 4c ff ff ff    	mov    al,BYTE PTR [ebp-0xb4]
100048cc:	0f be c0             	movsx  eax,al
100048cf:	83 e8 30             	sub    eax,0x30
100048d2:	01 d0                	add    eax,edx
100048d4:	89 45 9c             	mov    DWORD PTR [ebp-0x64],eax
100048d7:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [ebp-0xb2]
100048dd:	0f be c0             	movsx  eax,al
100048e0:	8d 50 d0             	lea    edx,[eax-0x30]
100048e3:	89 d0                	mov    eax,edx
100048e5:	c1 e0 02             	shl    eax,0x2
100048e8:	01 d0                	add    eax,edx
100048ea:	01 c0                	add    eax,eax
100048ec:	89 c2                	mov    edx,eax
100048ee:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [ebp-0xb1]
100048f4:	0f be c0             	movsx  eax,al
100048f7:	83 e8 30             	sub    eax,0x30
100048fa:	01 d0                	add    eax,edx
100048fc:	89 45 98             	mov    DWORD PTR [ebp-0x68],eax
100048ff:	8a 85 51 ff ff ff    	mov    al,BYTE PTR [ebp-0xaf]
10004905:	0f be c0             	movsx  eax,al
10004908:	8d 50 d0             	lea    edx,[eax-0x30]
1000490b:	89 d0                	mov    eax,edx
1000490d:	c1 e0 02             	shl    eax,0x2
10004910:	01 d0                	add    eax,edx
10004912:	01 c0                	add    eax,eax
10004914:	89 c2                	mov    edx,eax
10004916:	8a 85 52 ff ff ff    	mov    al,BYTE PTR [ebp-0xae]
1000491c:	0f be c0             	movsx  eax,al
1000491f:	83 e8 30             	sub    eax,0x30
10004922:	01 d0                	add    eax,edx
10004924:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
10004927:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
1000492a:	83 e0 03             	and    eax,0x3
1000492d:	85 c0                	test   eax,eax
1000492f:	75 1f                	jne    10004950 <firstRun(bool)+0x1785>
10004931:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10004934:	b9 19 00 00 00       	mov    ecx,0x19
10004939:	99                   	cdq    
1000493a:	f7 f9                	idiv   ecx
1000493c:	89 d0                	mov    eax,edx
1000493e:	85 c0                	test   eax,eax
10004940:	75 0a                	jne    1000494c <firstRun(bool)+0x1781>
10004942:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10004945:	83 e0 0f             	and    eax,0xf
10004948:	85 c0                	test   eax,eax
1000494a:	75 04                	jne    10004950 <firstRun(bool)+0x1785>
1000494c:	b0 01                	mov    al,0x1
1000494e:	eb 02                	jmp    10004952 <firstRun(bool)+0x1787>
10004950:	b0 00                	mov    al,0x0
10004952:	88 45 93             	mov    BYTE PTR [ebp-0x6d],al
10004955:	83 7d a8 1f          	cmp    DWORD PTR [ebp-0x58],0x1f
10004959:	7e 0c                	jle    10004967 <firstRun(bool)+0x179c>
1000495b:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10004962:	e9 67 01 00 00       	jmp    10004ace <firstRun(bool)+0x1903>
10004967:	83 7d a8 1e          	cmp    DWORD PTR [ebp-0x58],0x1e
1000496b:	7e 2a                	jle    10004997 <firstRun(bool)+0x17cc>
1000496d:	83 7d a4 02          	cmp    DWORD PTR [ebp-0x5c],0x2
10004971:	74 18                	je     1000498b <firstRun(bool)+0x17c0>
10004973:	83 7d a4 04          	cmp    DWORD PTR [ebp-0x5c],0x4
10004977:	74 12                	je     1000498b <firstRun(bool)+0x17c0>
10004979:	83 7d a4 06          	cmp    DWORD PTR [ebp-0x5c],0x6
1000497d:	74 0c                	je     1000498b <firstRun(bool)+0x17c0>
1000497f:	83 7d a4 09          	cmp    DWORD PTR [ebp-0x5c],0x9
10004983:	74 06                	je     1000498b <firstRun(bool)+0x17c0>
10004985:	83 7d a4 0b          	cmp    DWORD PTR [ebp-0x5c],0xb
10004989:	75 0c                	jne    10004997 <firstRun(bool)+0x17cc>
1000498b:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10004992:	e9 37 01 00 00       	jmp    10004ace <firstRun(bool)+0x1903>
10004997:	83 7d a8 1d          	cmp    DWORD PTR [ebp-0x58],0x1d
1000499b:	75 1c                	jne    100049b9 <firstRun(bool)+0x17ee>
1000499d:	83 7d a4 02          	cmp    DWORD PTR [ebp-0x5c],0x2
100049a1:	75 16                	jne    100049b9 <firstRun(bool)+0x17ee>
100049a3:	8a 45 93             	mov    al,BYTE PTR [ebp-0x6d]
100049a6:	83 f0 01             	xor    eax,0x1
100049a9:	84 c0                	test   al,al
100049ab:	74 0c                	je     100049b9 <firstRun(bool)+0x17ee>
100049ad:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100049b4:	e9 15 01 00 00       	jmp    10004ace <firstRun(bool)+0x1903>
100049b9:	83 7d a8 00          	cmp    DWORD PTR [ebp-0x58],0x0
100049bd:	75 0c                	jne    100049cb <firstRun(bool)+0x1800>
100049bf:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100049c6:	e9 03 01 00 00       	jmp    10004ace <firstRun(bool)+0x1903>
100049cb:	83 7d a4 0c          	cmp    DWORD PTR [ebp-0x5c],0xc
100049cf:	7f 06                	jg     100049d7 <firstRun(bool)+0x180c>
100049d1:	83 7d a4 00          	cmp    DWORD PTR [ebp-0x5c],0x0
100049d5:	75 0c                	jne    100049e3 <firstRun(bool)+0x1818>
100049d7:	c7 45 e4 03 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x3
100049de:	e9 eb 00 00 00       	jmp    10004ace <firstRun(bool)+0x1903>
100049e3:	81 7d a0 b7 0b 00 00 	cmp    DWORD PTR [ebp-0x60],0xbb7
100049ea:	7f 09                	jg     100049f5 <firstRun(bool)+0x182a>
100049ec:	81 7d a0 b1 07 00 00 	cmp    DWORD PTR [ebp-0x60],0x7b1
100049f3:	7f 0c                	jg     10004a01 <firstRun(bool)+0x1836>
100049f5:	c7 45 e4 06 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x6
100049fc:	e9 cd 00 00 00       	jmp    10004ace <firstRun(bool)+0x1903>
10004a01:	83 7d 9c 17          	cmp    DWORD PTR [ebp-0x64],0x17
10004a05:	7e 0c                	jle    10004a13 <firstRun(bool)+0x1848>
10004a07:	c7 45 e4 0b 00 00 00 	mov    DWORD PTR [ebp-0x1c],0xb
10004a0e:	e9 bb 00 00 00       	jmp    10004ace <firstRun(bool)+0x1903>
10004a13:	83 7d 98 3b          	cmp    DWORD PTR [ebp-0x68],0x3b
10004a17:	7e 0c                	jle    10004a25 <firstRun(bool)+0x185a>
10004a19:	c7 45 e4 0e 00 00 00 	mov    DWORD PTR [ebp-0x1c],0xe
10004a20:	e9 a9 00 00 00       	jmp    10004ace <firstRun(bool)+0x1903>
10004a25:	83 7d 94 3b          	cmp    DWORD PTR [ebp-0x6c],0x3b
10004a29:	7e 0c                	jle    10004a37 <firstRun(bool)+0x186c>
10004a2b:	c7 45 e4 11 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x11
10004a32:	e9 97 00 00 00       	jmp    10004ace <firstRun(bool)+0x1903>
10004a37:	8b 45 98             	mov    eax,DWORD PTR [ebp-0x68]
10004a3a:	88 85 d9 fe ff ff    	mov    BYTE PTR [ebp-0x127],al
10004a40:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
10004a43:	88 85 da fe ff ff    	mov    BYTE PTR [ebp-0x126],al
10004a49:	8b 45 9c             	mov    eax,DWORD PTR [ebp-0x64]
10004a4c:	88 85 d8 fe ff ff    	mov    BYTE PTR [ebp-0x128],al
10004a52:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
10004a55:	88 85 d4 fe ff ff    	mov    BYTE PTR [ebp-0x12c],al
10004a5b:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
10004a5e:	88 85 d5 fe ff ff    	mov    BYTE PTR [ebp-0x12b],al
10004a64:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10004a67:	66 89 85 d6 fe ff ff 	mov    WORD PTR [ebp-0x12a],ax
10004a6e:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a6f: R_386_32	Krnl::computer
10004a73:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
10004a79:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a7a: R_386_32	Krnl::computer
10004a7e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10004a84:	8b 00                	mov    eax,DWORD PTR [eax]
10004a86:	83 c0 30             	add    eax,0x30
10004a89:	8b 00                	mov    eax,DWORD PTR [eax]
10004a8b:	83 ec 04             	sub    esp,0x4
10004a8e:	ff b5 d8 fe ff ff    	push   DWORD PTR [ebp-0x128]
10004a94:	ff b5 d4 fe ff ff    	push   DWORD PTR [ebp-0x12c]
10004a9a:	52                   	push   edx
10004a9b:	ff d0                	call   eax
10004a9d:	83 c4 10             	add    esp,0x10
10004aa0:	90                   	nop
10004aa1:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004aa3: R_386_32	installKey
10004aa8:	83 ec 08             	sub    esp,0x8
10004aab:	6a 00                	push   0x0
10004aad:	68 a0 0f 00 00       	push   0xfa0
10004ab2:	e8 fc ff ff ff       	call   10004ab3 <firstRun(bool)+0x18e8>	10004ab3: R_386_PC32	milliTenthSleep(unsigned long long)
10004ab7:	83 c4 10             	add    esp,0x10
10004aba:	eb 31                	jmp    10004aed <firstRun(bool)+0x1922>
10004abc:	a0 00 00 00 00       	mov    al,ds:0x0	10004abd: R_386_32	installKey
10004ac1:	3c 1b                	cmp    al,0x1b
10004ac3:	0f 94 c0             	sete   al
10004ac6:	84 c0                	test   al,al
10004ac8:	0f 85 a8 e8 ff ff    	jne    10003376 <firstRun(bool)+0x1ab>
10004ace:	83 ec 08             	sub    esp,0x8
10004ad1:	6a 00                	push   0x0
10004ad3:	68 f4 01 00 00       	push   0x1f4
10004ad8:	e8 fc ff ff ff       	call   10004ad9 <firstRun(bool)+0x190e>	10004ad9: R_386_PC32	milliTenthSleep(unsigned long long)
10004add:	83 c4 10             	add    esp,0x10
10004ae0:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004ae2: R_386_32	installKey
10004ae7:	e9 af f7 ff ff       	jmp    1000429b <firstRun(bool)+0x10d0>
10004aec:	90                   	nop
10004aed:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004aef: R_386_32	installKey
10004af4:	a0 00 00 00 00       	mov    al,ds:0x0	10004af5: R_386_32	firstTimeEnteringTimezone
10004af9:	84 c0                	test   al,al
10004afb:	74 18                	je     10004b15 <firstRun(bool)+0x194a>
10004afd:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004aff: R_386_32	firstTimeEnteringTimezone
10004b04:	c7 05 00 00 00 00 3b 00 00 00 	mov    DWORD PTR ds:0x0,0x3b	10004b06: R_386_32	tzsel
10004b0e:	c7 45 dc 30 00 00 00 	mov    DWORD PTR [ebp-0x24],0x30
10004b15:	e8 fc ff ff ff       	call   10004b16 <firstRun(bool)+0x194b>	10004b16: R_386_PC32	drawBootScreen()
10004b1a:	83 ec 0c             	sub    esp,0xc
10004b1d:	68 37 b4 00 10       	push   0x1000b437	10004b1e: R_386_32	.text
10004b22:	6a 14                	push   0x14
10004b24:	6a 3c                	push   0x3c
10004b26:	6a 01                	push   0x1
10004b28:	6a 12                	push   0x12
10004b2a:	e8 fc ff ff ff       	call   10004b2b <firstRun(bool)+0x1960>	10004b2b: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004b2f:	83 c4 20             	add    esp,0x20
10004b32:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b33: R_386_32	term
10004b37:	83 ec 04             	sub    esp,0x4
10004b3a:	6a 04                	push   0x4
10004b3c:	6a 14                	push   0x14
10004b3e:	50                   	push   eax
10004b3f:	e8 fc ff ff ff       	call   10004b40 <firstRun(bool)+0x1975>	10004b40: R_386_PC32	VgaText::setCursor(int, int)
10004b44:	83 c4 10             	add    esp,0x10
10004b47:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b48: R_386_32	term
10004b4c:	83 ec 08             	sub    esp,0x8
10004b4f:	68 c4 b4 00 10       	push   0x1000b4c4	10004b50: R_386_32	.text
10004b54:	50                   	push   eax
10004b55:	e8 fc ff ff ff       	call   10004b56 <firstRun(bool)+0x198b>	10004b56: R_386_PC32	VgaText::puts(char const*)
10004b5a:	83 c4 10             	add    esp,0x10
10004b5d:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b5e: R_386_32	term
10004b62:	83 ec 04             	sub    esp,0x4
10004b65:	6a 18                	push   0x18
10004b67:	6a 11                	push   0x11
10004b69:	50                   	push   eax
10004b6a:	e8 fc ff ff ff       	call   10004b6b <firstRun(bool)+0x19a0>	10004b6b: R_386_PC32	VgaText::setCursor(int, int)
10004b6f:	83 c4 10             	add    esp,0x10
10004b72:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b73: R_386_32	term
10004b77:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10004b79: R_386_32	safemode
10004b7d:	84 d2                	test   dl,dl
10004b7f:	74 07                	je     10004b88 <firstRun(bool)+0x19bd>
10004b81:	b9 00 00 00 00       	mov    ecx,0x0
10004b86:	eb 05                	jmp    10004b8d <firstRun(bool)+0x19c2>
10004b88:	b9 0b 00 00 00       	mov    ecx,0xb
10004b8d:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10004b8f: R_386_32	safemode
10004b93:	84 d2                	test   dl,dl
10004b95:	74 07                	je     10004b9e <firstRun(bool)+0x19d3>
10004b97:	ba 0f 00 00 00       	mov    edx,0xf
10004b9c:	eb 05                	jmp    10004ba3 <firstRun(bool)+0x19d8>
10004b9e:	ba 03 00 00 00       	mov    edx,0x3
10004ba3:	51                   	push   ecx
10004ba4:	52                   	push   edx
10004ba5:	68 ae b4 00 10       	push   0x1000b4ae	10004ba6: R_386_32	.text
10004baa:	50                   	push   eax
10004bab:	e8 fc ff ff ff       	call   10004bac <firstRun(bool)+0x19e1>	10004bac: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004bb0:	83 c4 10             	add    esp,0x10
10004bb3:	e8 fc ff ff ff       	call   10004bb4 <firstRun(bool)+0x19e9>	10004bb4: R_386_PC32	loadTimezoneStrings()
10004bb8:	89 45 8c             	mov    DWORD PTR [ebp-0x74],eax
10004bbb:	b8 d2 00 00 00       	mov    eax,0xd2
10004bc0:	99                   	cdq    
10004bc1:	f7 7d 8c             	idiv   DWORD PTR [ebp-0x74]
10004bc4:	89 45 88             	mov    DWORD PTR [ebp-0x78],eax
10004bc7:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
10004bce:	83 7d cc 0d          	cmp    DWORD PTR [ebp-0x34],0xd
10004bd2:	7f 32                	jg     10004c06 <firstRun(bool)+0x1a3b>
10004bd4:	a1 00 00 00 00       	mov    eax,ds:0x0	10004bd5: R_386_32	term
10004bd9:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
10004bdc:	83 c2 07             	add    edx,0x7
10004bdf:	83 ec 04             	sub    esp,0x4
10004be2:	52                   	push   edx
10004be3:	6a 4b                	push   0x4b
10004be5:	50                   	push   eax
10004be6:	e8 fc ff ff ff       	call   10004be7 <firstRun(bool)+0x1a1c>	10004be7: R_386_PC32	VgaText::setCursor(int, int)
10004beb:	83 c4 10             	add    esp,0x10
10004bee:	a1 00 00 00 00       	mov    eax,ds:0x0	10004bef: R_386_32	term
10004bf3:	83 ec 08             	sub    esp,0x8
10004bf6:	6a 20                	push   0x20
10004bf8:	50                   	push   eax
10004bf9:	e8 fc ff ff ff       	call   10004bfa <firstRun(bool)+0x1a2f>	10004bfa: R_386_PC32	VgaText::putchar(char)
10004bfe:	83 c4 10             	add    esp,0x10
10004c01:	ff 45 cc             	inc    DWORD PTR [ebp-0x34]
10004c04:	eb c8                	jmp    10004bce <firstRun(bool)+0x1a03>
10004c06:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
10004c0d:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10004c10:	3b 45 88             	cmp    eax,DWORD PTR [ebp-0x78]
10004c13:	7d 48                	jge    10004c5d <firstRun(bool)+0x1a92>
10004c15:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004c17: R_386_32	term
10004c1b:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10004c1e:	8d 58 07             	lea    ebx,[eax+0x7]
10004c21:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10004c24:	89 d0                	mov    eax,edx
10004c26:	01 c0                	add    eax,eax
10004c28:	01 d0                	add    eax,edx
10004c2a:	01 c0                	add    eax,eax
10004c2c:	01 d0                	add    eax,edx
10004c2e:	01 c0                	add    eax,eax
10004c30:	99                   	cdq    
10004c31:	f7 7d 8c             	idiv   DWORD PTR [ebp-0x74]
10004c34:	01 d8                	add    eax,ebx
10004c36:	83 ec 04             	sub    esp,0x4
10004c39:	50                   	push   eax
10004c3a:	6a 4b                	push   0x4b
10004c3c:	51                   	push   ecx
10004c3d:	e8 fc ff ff ff       	call   10004c3e <firstRun(bool)+0x1a73>	10004c3e: R_386_PC32	VgaText::setCursor(int, int)
10004c42:	83 c4 10             	add    esp,0x10
10004c45:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c46: R_386_32	term
10004c4a:	83 ec 08             	sub    esp,0x8
10004c4d:	6a db                	push   0xffffffdb
10004c4f:	50                   	push   eax
10004c50:	e8 fc ff ff ff       	call   10004c51 <firstRun(bool)+0x1a86>	10004c51: R_386_PC32	VgaText::putchar(char)
10004c55:	83 c4 10             	add    esp,0x10
10004c58:	ff 45 c8             	inc    DWORD PTR [ebp-0x38]
10004c5b:	eb b0                	jmp    10004c0d <firstRun(bool)+0x1a42>
10004c5d:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c5e: R_386_32	term
10004c62:	83 ec 04             	sub    esp,0x4
10004c65:	6a 06                	push   0x6
10004c67:	6a 4b                	push   0x4b
10004c69:	50                   	push   eax
10004c6a:	e8 fc ff ff ff       	call   10004c6b <firstRun(bool)+0x1aa0>	10004c6b: R_386_PC32	VgaText::setCursor(int, int)
10004c6f:	83 c4 10             	add    esp,0x10
10004c72:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c73: R_386_32	term
10004c77:	83 ec 08             	sub    esp,0x8
10004c7a:	6a 1e                	push   0x1e
10004c7c:	50                   	push   eax
10004c7d:	e8 fc ff ff ff       	call   10004c7e <firstRun(bool)+0x1ab3>	10004c7e: R_386_PC32	VgaText::putchar(char)
10004c82:	83 c4 10             	add    esp,0x10
10004c85:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c86: R_386_32	term
10004c8a:	83 ec 04             	sub    esp,0x4
10004c8d:	6a 14                	push   0x14
10004c8f:	6a 4b                	push   0x4b
10004c91:	50                   	push   eax
10004c92:	e8 fc ff ff ff       	call   10004c93 <firstRun(bool)+0x1ac8>	10004c93: R_386_PC32	VgaText::setCursor(int, int)
10004c97:	83 c4 10             	add    esp,0x10
10004c9a:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c9b: R_386_32	term
10004c9f:	83 ec 08             	sub    esp,0x8
10004ca2:	6a 1f                	push   0x1f
10004ca4:	50                   	push   eax
10004ca5:	e8 fc ff ff ff       	call   10004ca6 <firstRun(bool)+0x1adb>	10004ca6: R_386_PC32	VgaText::putchar(char)
10004caa:	83 c4 10             	add    esp,0x10
10004cad:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x0
10004cb4:	83 7d c4 0e          	cmp    DWORD PTR [ebp-0x3c],0xe
10004cb8:	7f 7e                	jg     10004d38 <firstRun(bool)+0x1b6d>
10004cba:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cbb: R_386_32	term
10004cbf:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10004cc2:	83 c2 06             	add    edx,0x6
10004cc5:	83 ec 04             	sub    esp,0x4
10004cc8:	52                   	push   edx
10004cc9:	6a 14                	push   0x14
10004ccb:	50                   	push   eax
10004ccc:	e8 fc ff ff ff       	call   10004ccd <firstRun(bool)+0x1b02>	10004ccd: R_386_PC32	VgaText::setCursor(int, int)
10004cd1:	83 c4 10             	add    esp,0x10
10004cd4:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cd5: R_386_32	term
10004cd9:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10004cdc:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10004cdf:	01 d1                	add    ecx,edx
10004ce1:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004ce3: R_386_32	tzsel
10004ce7:	39 d1                	cmp    ecx,edx
10004ce9:	75 07                	jne    10004cf2 <firstRun(bool)+0x1b27>
10004ceb:	bb 00 00 00 00       	mov    ebx,0x0
10004cf0:	eb 05                	jmp    10004cf7 <firstRun(bool)+0x1b2c>
10004cf2:	bb 0f 00 00 00       	mov    ebx,0xf
10004cf7:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10004cfa:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10004cfd:	01 d1                	add    ecx,edx
10004cff:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004d01: R_386_32	tzsel
10004d05:	39 d1                	cmp    ecx,edx
10004d07:	75 07                	jne    10004d10 <firstRun(bool)+0x1b45>
10004d09:	b9 0f 00 00 00       	mov    ecx,0xf
10004d0e:	eb 05                	jmp    10004d15 <firstRun(bool)+0x1b4a>
10004d10:	b9 00 00 00 00       	mov    ecx,0x0
10004d15:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
10004d18:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10004d1b:	01 f2                	add    edx,esi
10004d1d:	8b 14 95 00 00 00 00 	mov    edx,DWORD PTR [edx*4+0x0]	10004d20: R_386_32	timezoneStrings
10004d24:	53                   	push   ebx
10004d25:	51                   	push   ecx
10004d26:	52                   	push   edx
10004d27:	50                   	push   eax
10004d28:	e8 fc ff ff ff       	call   10004d29 <firstRun(bool)+0x1b5e>	10004d29: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004d2d:	83 c4 10             	add    esp,0x10
10004d30:	ff 45 c4             	inc    DWORD PTR [ebp-0x3c]
10004d33:	e9 7c ff ff ff       	jmp    10004cb4 <firstRun(bool)+0x1ae9>
10004d38:	a0 00 00 00 00       	mov    al,ds:0x0	10004d39: R_386_32	installKey
10004d3d:	84 c0                	test   al,al
10004d3f:	0f 94 c0             	sete   al
10004d42:	84 c0                	test   al,al
10004d44:	74 02                	je     10004d48 <firstRun(bool)+0x1b7d>
10004d46:	eb f0                	jmp    10004d38 <firstRun(bool)+0x1b6d>
10004d48:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d49: R_386_32	term
10004d4d:	05 82 00 00 00       	add    eax,0x82
10004d52:	83 ec 04             	sub    esp,0x4
10004d55:	6a 04                	push   0x4
10004d57:	6a 00                	push   0x0
10004d59:	50                   	push   eax
10004d5a:	e8 fc ff ff ff       	call   10004d5b <firstRun(bool)+0x1b90>	10004d5b: R_386_PC32	memset
10004d5f:	83 c4 10             	add    esp,0x10
10004d62:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d63: R_386_32	term
10004d67:	05 02 01 00 00       	add    eax,0x102
10004d6c:	83 ec 04             	sub    esp,0x4
10004d6f:	6a 04                	push   0x4
10004d71:	6a 00                	push   0x0
10004d73:	50                   	push   eax
10004d74:	e8 fc ff ff ff       	call   10004d75 <firstRun(bool)+0x1baa>	10004d75: R_386_PC32	memset
10004d79:	83 c4 10             	add    esp,0x10
10004d7c:	a0 00 00 00 00       	mov    al,ds:0x0	10004d7d: R_386_32	installKey
10004d81:	3c 01                	cmp    al,0x1
10004d83:	0f 94 c0             	sete   al
10004d86:	84 c0                	test   al,al
10004d88:	74 41                	je     10004dcb <firstRun(bool)+0x1c00>
10004d8a:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d8b: R_386_32	tzsel
10004d8f:	48                   	dec    eax
10004d90:	a3 00 00 00 00       	mov    ds:0x0,eax	10004d91: R_386_32	tzsel
10004d95:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d96: R_386_32	tzsel
10004d9a:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
10004d9d:	83 f8 04             	cmp    eax,0x4
10004da0:	7f 03                	jg     10004da5 <firstRun(bool)+0x1bda>
10004da2:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
10004da5:	a1 00 00 00 00       	mov    eax,ds:0x0	10004da6: R_386_32	tzsel
10004daa:	85 c0                	test   eax,eax
10004dac:	79 0a                	jns    10004db8 <firstRun(bool)+0x1bed>
10004dae:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004db0: R_386_32	tzsel
10004db8:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10004dbc:	0f 89 82 00 00 00    	jns    10004e44 <firstRun(bool)+0x1c79>
10004dc2:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10004dc9:	eb 79                	jmp    10004e44 <firstRun(bool)+0x1c79>
10004dcb:	a0 00 00 00 00       	mov    al,ds:0x0	10004dcc: R_386_32	installKey
10004dd0:	3c 02                	cmp    al,0x2
10004dd2:	0f 94 c0             	sete   al
10004dd5:	84 c0                	test   al,al
10004dd7:	74 4b                	je     10004e24 <firstRun(bool)+0x1c59>
10004dd9:	a1 00 00 00 00       	mov    eax,ds:0x0	10004dda: R_386_32	tzsel
10004dde:	40                   	inc    eax
10004ddf:	a3 00 00 00 00       	mov    ds:0x0,eax	10004de0: R_386_32	tzsel
10004de4:	a1 00 00 00 00       	mov    eax,ds:0x0	10004de5: R_386_32	tzsel
10004de9:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
10004dec:	83 f8 0a             	cmp    eax,0xa
10004def:	7e 03                	jle    10004df4 <firstRun(bool)+0x1c29>
10004df1:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10004df4:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
10004df7:	8d 50 ff             	lea    edx,[eax-0x1]
10004dfa:	a1 00 00 00 00       	mov    eax,ds:0x0	10004dfb: R_386_32	tzsel
10004dff:	39 c2                	cmp    edx,eax
10004e01:	7f 0b                	jg     10004e0e <firstRun(bool)+0x1c43>
10004e03:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
10004e06:	83 e8 02             	sub    eax,0x2
10004e09:	a3 00 00 00 00       	mov    ds:0x0,eax	10004e0a: R_386_32	tzsel
10004e0e:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
10004e11:	83 e8 0f             	sub    eax,0xf
10004e14:	39 45 dc             	cmp    DWORD PTR [ebp-0x24],eax
10004e17:	7c 2b                	jl     10004e44 <firstRun(bool)+0x1c79>
10004e19:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
10004e1c:	83 e8 10             	sub    eax,0x10
10004e1f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10004e22:	eb 20                	jmp    10004e44 <firstRun(bool)+0x1c79>
10004e24:	a0 00 00 00 00       	mov    al,ds:0x0	10004e25: R_386_32	installKey
10004e29:	3c 0a                	cmp    al,0xa
10004e2b:	0f 94 c0             	sete   al
10004e2e:	84 c0                	test   al,al
10004e30:	75 30                	jne    10004e62 <firstRun(bool)+0x1c97>
10004e32:	a0 00 00 00 00       	mov    al,ds:0x0	10004e33: R_386_32	installKey
10004e37:	3c 1b                	cmp    al,0x1b
10004e39:	0f 94 c0             	sete   al
10004e3c:	84 c0                	test   al,al
10004e3e:	0f 85 31 f0 ff ff    	jne    10003e75 <firstRun(bool)+0xcaa>
10004e44:	83 ec 08             	sub    esp,0x8
10004e47:	6a 00                	push   0x0
10004e49:	68 f4 01 00 00       	push   0x1f4
10004e4e:	e8 fc ff ff ff       	call   10004e4f <firstRun(bool)+0x1c84>	10004e4f: R_386_PC32	milliTenthSleep(unsigned long long)
10004e53:	83 c4 10             	add    esp,0x10
10004e56:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004e58: R_386_32	installKey
10004e5d:	e9 65 fd ff ff       	jmp    10004bc7 <firstRun(bool)+0x19fc>
10004e62:	90                   	nop
10004e63:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004e65: R_386_32	installKey
10004e6a:	83 ec 08             	sub    esp,0x8
10004e6d:	6a 00                	push   0x0
10004e6f:	68 a0 0f 00 00       	push   0xfa0
10004e74:	e8 fc ff ff ff       	call   10004e75 <firstRun(bool)+0x1caa>	10004e75: R_386_PC32	milliTenthSleep(unsigned long long)
10004e79:	83 c4 10             	add    esp,0x10
10004e7c:	eb 01                	jmp    10004e7f <firstRun(bool)+0x1cb4>
10004e7e:	90                   	nop
10004e7f:	e8 fc ff ff ff       	call   10004e80 <firstRun(bool)+0x1cb5>	10004e80: R_386_PC32	drawBootScreen()
10004e84:	83 ec 08             	sub    esp,0x8
10004e87:	6a 00                	push   0x0
10004e89:	68 58 1b 00 00       	push   0x1b58
10004e8e:	e8 fc ff ff ff       	call   10004e8f <firstRun(bool)+0x1cc4>	10004e8f: R_386_PC32	milliTenthSleep(unsigned long long)
10004e93:	83 c4 10             	add    esp,0x10
10004e96:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004e98: R_386_32	installKey
10004e9d:	e8 fc ff ff ff       	call   10004e9e <firstRun(bool)+0x1cd3>	10004e9e: R_386_PC32	drawBootScreen()
10004ea2:	83 ec 0c             	sub    esp,0xc
10004ea5:	68 f6 b4 00 10       	push   0x1000b4f6	10004ea6: R_386_32	.text
10004eaa:	6a 10                	push   0x10
10004eac:	6a 37                	push   0x37
10004eae:	6a 03                	push   0x3
10004eb0:	6a 14                	push   0x14
10004eb2:	e8 fc ff ff ff       	call   10004eb3 <firstRun(bool)+0x1ce8>	10004eb3: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004eb7:	83 c4 20             	add    esp,0x20
10004eba:	a1 00 00 00 00       	mov    eax,ds:0x0	10004ebb: R_386_32	term
10004ebf:	83 ec 04             	sub    esp,0x4
10004ec2:	6a 06                	push   0x6
10004ec4:	6a 16                	push   0x16
10004ec6:	50                   	push   eax
10004ec7:	e8 fc ff ff ff       	call   10004ec8 <firstRun(bool)+0x1cfd>	10004ec8: R_386_PC32	VgaText::setCursor(int, int)
10004ecc:	83 c4 10             	add    esp,0x10
10004ecf:	a1 00 00 00 00       	mov    eax,ds:0x0	10004ed0: R_386_32	term
10004ed4:	83 ec 08             	sub    esp,0x8
10004ed7:	68 08 b5 00 10       	push   0x1000b508	10004ed8: R_386_32	.text
10004edc:	50                   	push   eax
10004edd:	e8 fc ff ff ff       	call   10004ede <firstRun(bool)+0x1d13>	10004ede: R_386_PC32	VgaText::puts(char const*)
10004ee2:	83 c4 10             	add    esp,0x10
10004ee5:	a1 00 00 00 00       	mov    eax,ds:0x0	10004ee6: R_386_32	term
10004eea:	83 ec 04             	sub    esp,0x4
10004eed:	6a 07                	push   0x7
10004eef:	6a 16                	push   0x16
10004ef1:	50                   	push   eax
10004ef2:	e8 fc ff ff ff       	call   10004ef3 <firstRun(bool)+0x1d28>	10004ef3: R_386_PC32	VgaText::setCursor(int, int)
10004ef7:	83 c4 10             	add    esp,0x10
10004efa:	a1 00 00 00 00       	mov    eax,ds:0x0	10004efb: R_386_32	term
10004eff:	83 ec 08             	sub    esp,0x8
10004f02:	68 3c b5 00 10       	push   0x1000b53c	10004f03: R_386_32	.text
10004f07:	50                   	push   eax
10004f08:	e8 fc ff ff ff       	call   10004f09 <firstRun(bool)+0x1d3e>	10004f09: R_386_PC32	VgaText::puts(char const*)
10004f0d:	83 c4 10             	add    esp,0x10
10004f10:	a1 00 00 00 00       	mov    eax,ds:0x0	10004f11: R_386_32	term
10004f15:	83 ec 04             	sub    esp,0x4
10004f18:	6a 18                	push   0x18
10004f1a:	6a 11                	push   0x11
10004f1c:	50                   	push   eax
10004f1d:	e8 fc ff ff ff       	call   10004f1e <firstRun(bool)+0x1d53>	10004f1e: R_386_PC32	VgaText::setCursor(int, int)
10004f22:	83 c4 10             	add    esp,0x10
10004f25:	a1 00 00 00 00       	mov    eax,ds:0x0	10004f26: R_386_32	term
10004f2a:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10004f2c: R_386_32	safemode
10004f30:	84 d2                	test   dl,dl
10004f32:	74 07                	je     10004f3b <firstRun(bool)+0x1d70>
10004f34:	b9 00 00 00 00       	mov    ecx,0x0
10004f39:	eb 05                	jmp    10004f40 <firstRun(bool)+0x1d75>
10004f3b:	b9 0b 00 00 00       	mov    ecx,0xb
10004f40:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10004f42: R_386_32	safemode
10004f46:	84 d2                	test   dl,dl
10004f48:	74 07                	je     10004f51 <firstRun(bool)+0x1d86>
10004f4a:	ba 0f 00 00 00       	mov    edx,0xf
10004f4f:	eb 05                	jmp    10004f56 <firstRun(bool)+0x1d8b>
10004f51:	ba 03 00 00 00       	mov    edx,0x3
10004f56:	51                   	push   ecx
10004f57:	52                   	push   edx
10004f58:	68 ae b4 00 10       	push   0x1000b4ae	10004f59: R_386_32	.text
10004f5d:	50                   	push   eax
10004f5e:	e8 fc ff ff ff       	call   10004f5f <firstRun(bool)+0x1d94>	10004f5f: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004f63:	83 c4 10             	add    esp,0x10
10004f66:	c7 45 8c 03 00 00 00 	mov    DWORD PTR [ebp-0x74],0x3
10004f6d:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10004f73:	bb c0 b7 00 10       	mov    ebx,0x1000b7c0	10004f74: R_386_32	.text
10004f78:	ba 03 00 00 00       	mov    edx,0x3
10004f7d:	89 c7                	mov    edi,eax
10004f7f:	89 de                	mov    esi,ebx
10004f81:	89 d1                	mov    ecx,edx
10004f83:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10004f85:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [ebp-0x40],0x0
10004f8c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10004f8f:	3b 45 8c             	cmp    eax,DWORD PTR [ebp-0x74]
10004f92:	7d 68                	jge    10004ffc <firstRun(bool)+0x1e31>
10004f94:	a1 00 00 00 00       	mov    eax,ds:0x0	10004f95: R_386_32	term
10004f99:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
10004f9c:	83 c2 09             	add    edx,0x9
10004f9f:	83 ec 04             	sub    esp,0x4
10004fa2:	52                   	push   edx
10004fa3:	6a 16                	push   0x16
10004fa5:	50                   	push   eax
10004fa6:	e8 fc ff ff ff       	call   10004fa7 <firstRun(bool)+0x1ddc>	10004fa7: R_386_PC32	VgaText::setCursor(int, int)
10004fab:	83 c4 10             	add    esp,0x10
10004fae:	a1 00 00 00 00       	mov    eax,ds:0x0	10004faf: R_386_32	term
10004fb3:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004fb5: R_386_32	modesel
10004fb9:	39 55 c0             	cmp    DWORD PTR [ebp-0x40],edx
10004fbc:	75 07                	jne    10004fc5 <firstRun(bool)+0x1dfa>
10004fbe:	bb 00 00 00 00       	mov    ebx,0x0
10004fc3:	eb 05                	jmp    10004fca <firstRun(bool)+0x1dff>
10004fc5:	bb 0f 00 00 00       	mov    ebx,0xf
10004fca:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004fcc: R_386_32	modesel
10004fd0:	39 55 c0             	cmp    DWORD PTR [ebp-0x40],edx
10004fd3:	75 07                	jne    10004fdc <firstRun(bool)+0x1e11>
10004fd5:	b9 0f 00 00 00       	mov    ecx,0xf
10004fda:	eb 05                	jmp    10004fe1 <firstRun(bool)+0x1e16>
10004fdc:	b9 00 00 00 00       	mov    ecx,0x0
10004fe1:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
10004fe4:	8b 94 95 c8 fe ff ff 	mov    edx,DWORD PTR [ebp+edx*4-0x138]
10004feb:	53                   	push   ebx
10004fec:	51                   	push   ecx
10004fed:	52                   	push   edx
10004fee:	50                   	push   eax
10004fef:	e8 fc ff ff ff       	call   10004ff0 <firstRun(bool)+0x1e25>	10004ff0: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004ff4:	83 c4 10             	add    esp,0x10
10004ff7:	ff 45 c0             	inc    DWORD PTR [ebp-0x40]
10004ffa:	eb 90                	jmp    10004f8c <firstRun(bool)+0x1dc1>
10004ffc:	a0 00 00 00 00       	mov    al,ds:0x0	10004ffd: R_386_32	installKey
10005001:	84 c0                	test   al,al
10005003:	0f 94 c0             	sete   al
10005006:	84 c0                	test   al,al
10005008:	74 02                	je     1000500c <firstRun(bool)+0x1e41>
1000500a:	eb f0                	jmp    10004ffc <firstRun(bool)+0x1e31>
1000500c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000500d: R_386_32	term
10005011:	05 82 00 00 00       	add    eax,0x82
10005016:	83 ec 04             	sub    esp,0x4
10005019:	6a 04                	push   0x4
1000501b:	6a 00                	push   0x0
1000501d:	50                   	push   eax
1000501e:	e8 fc ff ff ff       	call   1000501f <firstRun(bool)+0x1e54>	1000501f: R_386_PC32	memset
10005023:	83 c4 10             	add    esp,0x10
10005026:	a1 00 00 00 00       	mov    eax,ds:0x0	10005027: R_386_32	term
1000502b:	05 02 01 00 00       	add    eax,0x102
10005030:	83 ec 04             	sub    esp,0x4
10005033:	6a 04                	push   0x4
10005035:	6a 00                	push   0x0
10005037:	50                   	push   eax
10005038:	e8 fc ff ff ff       	call   10005039 <firstRun(bool)+0x1e6e>	10005039: R_386_PC32	memset
1000503d:	83 c4 10             	add    esp,0x10
10005040:	a0 00 00 00 00       	mov    al,ds:0x0	10005041: R_386_32	installKey
10005045:	3c 01                	cmp    al,0x1
10005047:	0f 94 c0             	sete   al
1000504a:	84 c0                	test   al,al
1000504c:	74 20                	je     1000506e <firstRun(bool)+0x1ea3>
1000504e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000504f: R_386_32	modesel
10005053:	48                   	dec    eax
10005054:	a3 00 00 00 00       	mov    ds:0x0,eax	10005055: R_386_32	modesel
10005059:	a1 00 00 00 00       	mov    eax,ds:0x0	1000505a: R_386_32	modesel
1000505e:	85 c0                	test   eax,eax
10005060:	79 5a                	jns    100050bc <firstRun(bool)+0x1ef1>
10005062:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10005064: R_386_32	modesel
1000506c:	eb 4e                	jmp    100050bc <firstRun(bool)+0x1ef1>
1000506e:	a0 00 00 00 00       	mov    al,ds:0x0	1000506f: R_386_32	installKey
10005073:	3c 02                	cmp    al,0x2
10005075:	0f 94 c0             	sete   al
10005078:	84 c0                	test   al,al
1000507a:	74 20                	je     1000509c <firstRun(bool)+0x1ed1>
1000507c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000507d: R_386_32	modesel
10005081:	40                   	inc    eax
10005082:	a3 00 00 00 00       	mov    ds:0x0,eax	10005083: R_386_32	modesel
10005087:	a1 00 00 00 00       	mov    eax,ds:0x0	10005088: R_386_32	modesel
1000508c:	39 45 8c             	cmp    DWORD PTR [ebp-0x74],eax
1000508f:	7f 2b                	jg     100050bc <firstRun(bool)+0x1ef1>
10005091:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
10005094:	48                   	dec    eax
10005095:	a3 00 00 00 00       	mov    ds:0x0,eax	10005096: R_386_32	modesel
1000509a:	eb 20                	jmp    100050bc <firstRun(bool)+0x1ef1>
1000509c:	a0 00 00 00 00       	mov    al,ds:0x0	1000509d: R_386_32	installKey
100050a1:	3c 0a                	cmp    al,0xa
100050a3:	0f 94 c0             	sete   al
100050a6:	84 c0                	test   al,al
100050a8:	75 30                	jne    100050da <firstRun(bool)+0x1f0f>
100050aa:	a0 00 00 00 00       	mov    al,ds:0x0	100050ab: R_386_32	installKey
100050af:	3c 1b                	cmp    al,0x1b
100050b1:	0f 94 c0             	sete   al
100050b4:	84 c0                	test   al,al
100050b6:	0f 85 30 fa ff ff    	jne    10004aec <firstRun(bool)+0x1921>
100050bc:	83 ec 08             	sub    esp,0x8
100050bf:	6a 00                	push   0x0
100050c1:	68 f4 01 00 00       	push   0x1f4
100050c6:	e8 fc ff ff ff       	call   100050c7 <firstRun(bool)+0x1efc>	100050c7: R_386_PC32	milliTenthSleep(unsigned long long)
100050cb:	83 c4 10             	add    esp,0x10
100050ce:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100050d0: R_386_32	installKey
100050d5:	e9 ab fe ff ff       	jmp    10004f85 <firstRun(bool)+0x1dba>
100050da:	90                   	nop
100050db:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
100050e2:	0f 84 ff 00 00 00    	je     100051e7 <firstRun(bool)+0x201c>
100050e8:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100050ea: R_386_32	showSidebar
100050ef:	a1 00 00 00 00       	mov    eax,ds:0x0	100050f0: R_386_32	term
100050f4:	83 ec 0c             	sub    esp,0xc
100050f7:	50                   	push   eax
100050f8:	e8 fc ff ff ff       	call   100050f9 <firstRun(bool)+0x1f2e>	100050f9: R_386_PC32	setActiveTerminal(VgaText*)
100050fd:	83 c4 10             	add    esp,0x10
10005100:	e8 fc ff ff ff       	call   10005101 <firstRun(bool)+0x1f36>	10005101: R_386_PC32	drawBootScreen()
10005105:	83 ec 0c             	sub    esp,0xc
10005108:	68 71 b5 00 10       	push   0x1000b571	10005109: R_386_32	.text
1000510d:	6a 0d                	push   0xd
1000510f:	6a 32                	push   0x32
10005111:	6a 05                	push   0x5
10005113:	6a 16                	push   0x16
10005115:	e8 fc ff ff ff       	call   10005116 <firstRun(bool)+0x1f4b>	10005116: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000511a:	83 c4 20             	add    esp,0x20
1000511d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000511e: R_386_32	term
10005122:	83 ec 04             	sub    esp,0x4
10005125:	6a 08                	push   0x8
10005127:	6a 18                	push   0x18
10005129:	50                   	push   eax
1000512a:	e8 fc ff ff ff       	call   1000512b <firstRun(bool)+0x1f60>	1000512b: R_386_PC32	VgaText::setCursor(int, int)
1000512f:	83 c4 10             	add    esp,0x10
10005132:	a1 00 00 00 00       	mov    eax,ds:0x0	10005133: R_386_32	term
10005137:	83 ec 08             	sub    esp,0x8
1000513a:	68 88 b5 00 10       	push   0x1000b588	1000513b: R_386_32	.text
1000513f:	50                   	push   eax
10005140:	e8 fc ff ff ff       	call   10005141 <firstRun(bool)+0x1f76>	10005141: R_386_PC32	VgaText::puts(char const*)
10005145:	83 c4 10             	add    esp,0x10
10005148:	a1 00 00 00 00       	mov    eax,ds:0x0	10005149: R_386_32	term
1000514d:	83 ec 04             	sub    esp,0x4
10005150:	6a 0a                	push   0xa
10005152:	6a 18                	push   0x18
10005154:	50                   	push   eax
10005155:	e8 fc ff ff ff       	call   10005156 <firstRun(bool)+0x1f8b>	10005156: R_386_PC32	VgaText::setCursor(int, int)
1000515a:	83 c4 10             	add    esp,0x10
1000515d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000515e: R_386_32	term
10005162:	83 ec 08             	sub    esp,0x8
10005165:	68 b0 b5 00 10       	push   0x1000b5b0	10005166: R_386_32	.text
1000516a:	50                   	push   eax
1000516b:	e8 fc ff ff ff       	call   1000516c <firstRun(bool)+0x1fa1>	1000516c: R_386_PC32	VgaText::puts(char const*)
10005170:	83 c4 10             	add    esp,0x10
10005173:	a1 00 00 00 00       	mov    eax,ds:0x0	10005174: R_386_32	term
10005178:	83 ec 04             	sub    esp,0x4
1000517b:	6a 0b                	push   0xb
1000517d:	6a 18                	push   0x18
1000517f:	50                   	push   eax
10005180:	e8 fc ff ff ff       	call   10005181 <firstRun(bool)+0x1fb6>	10005181: R_386_PC32	VgaText::setCursor(int, int)
10005185:	83 c4 10             	add    esp,0x10
10005188:	a1 00 00 00 00       	mov    eax,ds:0x0	10005189: R_386_32	term
1000518d:	83 ec 08             	sub    esp,0x8
10005190:	68 d9 b5 00 10       	push   0x1000b5d9	10005191: R_386_32	.text
10005195:	50                   	push   eax
10005196:	e8 fc ff ff ff       	call   10005197 <firstRun(bool)+0x1fcc>	10005197: R_386_PC32	VgaText::puts(char const*)
1000519b:	83 c4 10             	add    esp,0x10
1000519e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000519f: R_386_32	term
100051a3:	83 ec 04             	sub    esp,0x4
100051a6:	6a 0e                	push   0xe
100051a8:	6a 18                	push   0x18
100051aa:	50                   	push   eax
100051ab:	e8 fc ff ff ff       	call   100051ac <firstRun(bool)+0x1fe1>	100051ac: R_386_PC32	VgaText::setCursor(int, int)
100051b0:	83 c4 10             	add    esp,0x10
100051b3:	a1 00 00 00 00       	mov    eax,ds:0x0	100051b4: R_386_32	term
100051b8:	83 ec 08             	sub    esp,0x8
100051bb:	68 e8 b5 00 10       	push   0x1000b5e8	100051bc: R_386_32	.text
100051c0:	50                   	push   eax
100051c1:	e8 fc ff ff ff       	call   100051c2 <firstRun(bool)+0x1ff7>	100051c2: R_386_PC32	VgaText::puts(char const*)
100051c6:	83 c4 10             	add    esp,0x10
100051c9:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100051cb: R_386_32	installKey
100051d0:	a0 00 00 00 00       	mov    al,ds:0x0	100051d1: R_386_32	installKey
100051d5:	84 c0                	test   al,al
100051d7:	0f 94 c0             	sete   al
100051da:	84 c0                	test   al,al
100051dc:	74 02                	je     100051e0 <firstRun(bool)+0x2015>
100051de:	eb f0                	jmp    100051d0 <firstRun(bool)+0x2005>
100051e0:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100051e2: R_386_32	installKey
100051e7:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100051e9: R_386_32	installKey
100051ee:	83 ec 08             	sub    esp,0x8
100051f1:	6a 00                	push   0x0
100051f3:	68 84 03 00 00       	push   0x384
100051f8:	e8 fc ff ff ff       	call   100051f9 <firstRun(bool)+0x202e>	100051f9: R_386_PC32	milliTenthSleep(unsigned long long)
100051fd:	83 c4 10             	add    esp,0x10
10005200:	e8 fc ff ff ff       	call   10005201 <firstRun(bool)+0x2036>	10005201: R_386_PC32	drawBootScreen()
10005205:	83 ec 08             	sub    esp,0x8
10005208:	6a 00                	push   0x0
1000520a:	68 18 2e 00 00       	push   0x2e18
1000520f:	e8 fc ff ff ff       	call   10005210 <firstRun(bool)+0x2045>	10005210: R_386_PC32	milliTenthSleep(unsigned long long)
10005214:	83 c4 10             	add    esp,0x10
10005217:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
1000521e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005220: R_386_32	installKey
10005225:	e8 fc ff ff ff       	call   10005226 <firstRun(bool)+0x205b>	10005226: R_386_PC32	drawBootScreen()
1000522a:	83 ec 0c             	sub    esp,0xc
1000522d:	68 12 b6 00 10       	push   0x1000b612	1000522e: R_386_32	.text
10005232:	6a 0e                	push   0xe
10005234:	6a 32                	push   0x32
10005236:	6a 02                	push   0x2
10005238:	6a 16                	push   0x16
1000523a:	e8 fc ff ff ff       	call   1000523b <firstRun(bool)+0x2070>	1000523b: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000523f:	83 c4 20             	add    esp,0x20
10005242:	a1 00 00 00 00       	mov    eax,ds:0x0	10005243: R_386_32	term
10005247:	83 ec 04             	sub    esp,0x4
1000524a:	6a 18                	push   0x18
1000524c:	6a 11                	push   0x11
1000524e:	50                   	push   eax
1000524f:	e8 fc ff ff ff       	call   10005250 <firstRun(bool)+0x2085>	10005250: R_386_PC32	VgaText::setCursor(int, int)
10005254:	83 c4 10             	add    esp,0x10
10005257:	a1 00 00 00 00       	mov    eax,ds:0x0	10005258: R_386_32	term
1000525c:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	1000525e: R_386_32	safemode
10005262:	84 d2                	test   dl,dl
10005264:	74 07                	je     1000526d <firstRun(bool)+0x20a2>
10005266:	b9 00 00 00 00       	mov    ecx,0x0
1000526b:	eb 05                	jmp    10005272 <firstRun(bool)+0x20a7>
1000526d:	b9 0b 00 00 00       	mov    ecx,0xb
10005272:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10005274: R_386_32	safemode
10005278:	84 d2                	test   dl,dl
1000527a:	74 07                	je     10005283 <firstRun(bool)+0x20b8>
1000527c:	ba 0f 00 00 00       	mov    edx,0xf
10005281:	eb 05                	jmp    10005288 <firstRun(bool)+0x20bd>
10005283:	ba 03 00 00 00       	mov    edx,0x3
10005288:	51                   	push   ecx
10005289:	52                   	push   edx
1000528a:	68 ae b4 00 10       	push   0x1000b4ae	1000528b: R_386_32	.text
1000528f:	50                   	push   eax
10005290:	e8 fc ff ff ff       	call   10005291 <firstRun(bool)+0x20c6>	10005291: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10005295:	83 c4 10             	add    esp,0x10
10005298:	a1 00 00 00 00       	mov    eax,ds:0x0	10005299: R_386_32	term
1000529d:	83 ec 04             	sub    esp,0x4
100052a0:	6a 05                	push   0x5
100052a2:	6a 18                	push   0x18
100052a4:	50                   	push   eax
100052a5:	e8 fc ff ff ff       	call   100052a6 <firstRun(bool)+0x20db>	100052a6: R_386_PC32	VgaText::setCursor(int, int)
100052aa:	83 c4 10             	add    esp,0x10
100052ad:	a1 00 00 00 00       	mov    eax,ds:0x0	100052ae: R_386_32	term
100052b2:	83 ec 08             	sub    esp,0x8
100052b5:	68 20 b6 00 10       	push   0x1000b620	100052b6: R_386_32	.text
100052ba:	50                   	push   eax
100052bb:	e8 fc ff ff ff       	call   100052bc <firstRun(bool)+0x20f1>	100052bc: R_386_PC32	VgaText::puts(char const*)
100052c0:	83 c4 10             	add    esp,0x10
100052c3:	a1 00 00 00 00       	mov    eax,ds:0x0	100052c4: R_386_32	term
100052c8:	83 ec 04             	sub    esp,0x4
100052cb:	6a 06                	push   0x6
100052cd:	6a 18                	push   0x18
100052cf:	50                   	push   eax
100052d0:	e8 fc ff ff ff       	call   100052d1 <firstRun(bool)+0x2106>	100052d1: R_386_PC32	VgaText::setCursor(int, int)
100052d5:	83 c4 10             	add    esp,0x10
100052d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100052d9: R_386_32	term
100052dd:	83 ec 08             	sub    esp,0x8
100052e0:	68 84 b4 00 10       	push   0x1000b484	100052e1: R_386_32	.text
100052e5:	50                   	push   eax
100052e6:	e8 fc ff ff ff       	call   100052e7 <firstRun(bool)+0x211c>	100052e7: R_386_PC32	VgaText::puts(char const*)
100052eb:	83 c4 10             	add    esp,0x10
100052ee:	c6 05 10 00 00 00 00 	mov    BYTE PTR ds:0x10,0x0	100052f0: R_386_32	pkeybuf
100052f5:	c6 05 11 00 00 00 00 	mov    BYTE PTR ds:0x11,0x0	100052f7: R_386_32	pkeybuf
100052fc:	a1 00 00 00 00       	mov    eax,ds:0x0	100052fd: R_386_32	term
10005301:	83 ec 04             	sub    esp,0x4
10005304:	6a 08                	push   0x8
10005306:	6a 1c                	push   0x1c
10005308:	50                   	push   eax
10005309:	e8 fc ff ff ff       	call   1000530a <firstRun(bool)+0x213f>	1000530a: R_386_PC32	VgaText::setCursor(int, int)
1000530e:	83 c4 10             	add    esp,0x10
10005311:	a1 00 00 00 00       	mov    eax,ds:0x0	10005312: R_386_32	term
10005316:	83 ec 08             	sub    esp,0x8
10005319:	68 00 00 00 00       	push   0x0	1000531a: R_386_32	pkeybuf
1000531e:	50                   	push   eax
1000531f:	e8 fc ff ff ff       	call   10005320 <firstRun(bool)+0x2155>	10005320: R_386_PC32	VgaText::puts(char const*)
10005324:	83 c4 10             	add    esp,0x10
10005327:	a1 00 00 00 00       	mov    eax,ds:0x0	10005328: R_386_32	term
1000532c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000532f:	83 c2 1c             	add    edx,0x1c
10005332:	83 ec 04             	sub    esp,0x4
10005335:	6a 08                	push   0x8
10005337:	52                   	push   edx
10005338:	50                   	push   eax
10005339:	e8 fc ff ff ff       	call   1000533a <firstRun(bool)+0x216f>	1000533a: R_386_PC32	VgaText::setCursor(int, int)
1000533e:	83 c4 10             	add    esp,0x10
10005341:	a1 00 00 00 00       	mov    eax,ds:0x0	10005342: R_386_32	term
10005346:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10005349:	81 c2 00 00 00 00    	add    edx,0x0	1000534b: R_386_32	pkeybuf
1000534f:	8a 12                	mov    dl,BYTE PTR [edx]
10005351:	0f be d2             	movsx  edx,dl
10005354:	6a 00                	push   0x0
10005356:	6a 0f                	push   0xf
10005358:	52                   	push   edx
10005359:	50                   	push   eax
1000535a:	e8 fc ff ff ff       	call   1000535b <firstRun(bool)+0x2190>	1000535b: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000535f:	83 c4 10             	add    esp,0x10
10005362:	a1 00 00 00 00       	mov    eax,ds:0x0	10005363: R_386_32	term
10005367:	83 ec 04             	sub    esp,0x4
1000536a:	6a 08                	push   0x8
1000536c:	6a 2c                	push   0x2c
1000536e:	50                   	push   eax
1000536f:	e8 fc ff ff ff       	call   10005370 <firstRun(bool)+0x21a5>	10005370: R_386_PC32	VgaText::setCursor(int, int)
10005374:	83 c4 10             	add    esp,0x10
10005377:	a1 00 00 00 00       	mov    eax,ds:0x0	10005378: R_386_32	term
1000537c:	6a 0f                	push   0xf
1000537e:	6a 0f                	push   0xf
10005380:	6a 20                	push   0x20
10005382:	50                   	push   eax
10005383:	e8 fc ff ff ff       	call   10005384 <firstRun(bool)+0x21b9>	10005384: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10005388:	83 c4 10             	add    esp,0x10
1000538b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000538c: R_386_32	term
10005390:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10005393:	83 c2 1c             	add    edx,0x1c
10005396:	83 ec 04             	sub    esp,0x4
10005399:	6a 08                	push   0x8
1000539b:	52                   	push   edx
1000539c:	50                   	push   eax
1000539d:	e8 fc ff ff ff       	call   1000539e <firstRun(bool)+0x21d3>	1000539e: R_386_PC32	VgaText::setCursor(int, int)
100053a2:	83 c4 10             	add    esp,0x10
100053a5:	a0 00 00 00 00       	mov    al,ds:0x0	100053a6: R_386_32	installKey
100053aa:	84 c0                	test   al,al
100053ac:	0f 94 c0             	sete   al
100053af:	84 c0                	test   al,al
100053b1:	74 02                	je     100053b5 <firstRun(bool)+0x21ea>
100053b3:	eb f0                	jmp    100053a5 <firstRun(bool)+0x21da>
100053b5:	a1 00 00 00 00       	mov    eax,ds:0x0	100053b6: R_386_32	term
100053ba:	05 82 00 00 00       	add    eax,0x82
100053bf:	83 ec 04             	sub    esp,0x4
100053c2:	6a 10                	push   0x10
100053c4:	6a 00                	push   0x0
100053c6:	50                   	push   eax
100053c7:	e8 fc ff ff ff       	call   100053c8 <firstRun(bool)+0x21fd>	100053c8: R_386_PC32	memset
100053cc:	83 c4 10             	add    esp,0x10
100053cf:	a1 00 00 00 00       	mov    eax,ds:0x0	100053d0: R_386_32	term
100053d4:	05 02 01 00 00       	add    eax,0x102
100053d9:	83 ec 04             	sub    esp,0x4
100053dc:	6a 10                	push   0x10
100053de:	6a 00                	push   0x0
100053e0:	50                   	push   eax
100053e1:	e8 fc ff ff ff       	call   100053e2 <firstRun(bool)+0x2217>	100053e2: R_386_PC32	memset
100053e6:	83 c4 10             	add    esp,0x10
100053e9:	a0 00 00 00 00       	mov    al,ds:0x0	100053ea: R_386_32	installKey
100053ee:	3c 03                	cmp    al,0x3
100053f0:	74 09                	je     100053fb <firstRun(bool)+0x2230>
100053f2:	a0 00 00 00 00       	mov    al,ds:0x0	100053f3: R_386_32	installKey
100053f7:	3c 08                	cmp    al,0x8
100053f9:	75 04                	jne    100053ff <firstRun(bool)+0x2234>
100053fb:	b0 01                	mov    al,0x1
100053fd:	eb 02                	jmp    10005401 <firstRun(bool)+0x2236>
100053ff:	b0 00                	mov    al,0x0
10005401:	84 c0                	test   al,al
10005403:	74 31                	je     10005436 <firstRun(bool)+0x226b>
10005405:	ff 4d e4             	dec    DWORD PTR [ebp-0x1c]
10005408:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
1000540c:	75 14                	jne    10005422 <firstRun(bool)+0x2257>
1000540e:	83 ec 0c             	sub    esp,0xc
10005411:	68 00 00 00 00       	push   0x0	10005412: R_386_32	pkeybuf
10005416:	e8 fc ff ff ff       	call   10005417 <firstRun(bool)+0x224c>	10005417: R_386_PC32	strlen
1000541b:	83 c4 10             	add    esp,0x10
1000541e:	48                   	dec    eax
1000541f:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10005422:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10005425:	05 00 00 00 00       	add    eax,0x0	10005426: R_386_32	pkeybuf
1000542a:	8a 00                	mov    al,BYTE PTR [eax]
1000542c:	3c 2d                	cmp    al,0x2d
1000542e:	0f 85 7b 03 00 00    	jne    100057af <firstRun(bool)+0x25e4>
10005434:	eb cf                	jmp    10005405 <firstRun(bool)+0x223a>
10005436:	a0 00 00 00 00       	mov    al,ds:0x0	10005437: R_386_32	installKey
1000543b:	3c 2f                	cmp    al,0x2f
1000543d:	7e 09                	jle    10005448 <firstRun(bool)+0x227d>
1000543f:	a0 00 00 00 00       	mov    al,ds:0x0	10005440: R_386_32	installKey
10005444:	3c 39                	cmp    al,0x39
10005446:	7e 36                	jle    1000547e <firstRun(bool)+0x22b3>
10005448:	a0 00 00 00 00       	mov    al,ds:0x0	10005449: R_386_32	installKey
1000544d:	3c 40                	cmp    al,0x40
1000544f:	7e 09                	jle    1000545a <firstRun(bool)+0x228f>
10005451:	a0 00 00 00 00       	mov    al,ds:0x0	10005452: R_386_32	installKey
10005456:	3c 5a                	cmp    al,0x5a
10005458:	7e 24                	jle    1000547e <firstRun(bool)+0x22b3>
1000545a:	a0 00 00 00 00       	mov    al,ds:0x0	1000545b: R_386_32	installKey
1000545f:	3c 60                	cmp    al,0x60
10005461:	7e 09                	jle    1000546c <firstRun(bool)+0x22a1>
10005463:	a0 00 00 00 00       	mov    al,ds:0x0	10005464: R_386_32	installKey
10005468:	3c 7a                	cmp    al,0x7a
1000546a:	7e 12                	jle    1000547e <firstRun(bool)+0x22b3>
1000546c:	a0 00 00 00 00       	mov    al,ds:0x0	1000546d: R_386_32	installKey
10005471:	3c 20                	cmp    al,0x20
10005473:	74 09                	je     1000547e <firstRun(bool)+0x22b3>
10005475:	a0 00 00 00 00       	mov    al,ds:0x0	10005476: R_386_32	installKey
1000547a:	3c 04                	cmp    al,0x4
1000547c:	75 04                	jne    10005482 <firstRun(bool)+0x22b7>
1000547e:	b0 01                	mov    al,0x1
10005480:	eb 02                	jmp    10005484 <firstRun(bool)+0x22b9>
10005482:	b0 00                	mov    al,0x0
10005484:	84 c0                	test   al,al
10005486:	0f 84 a3 00 00 00    	je     1000552f <firstRun(bool)+0x2364>
1000548c:	a0 00 00 00 00       	mov    al,ds:0x0	1000548d: R_386_32	installKey
10005491:	3c 2f                	cmp    al,0x2f
10005493:	7e 09                	jle    1000549e <firstRun(bool)+0x22d3>
10005495:	a0 00 00 00 00       	mov    al,ds:0x0	10005496: R_386_32	installKey
1000549a:	3c 39                	cmp    al,0x39
1000549c:	7e 24                	jle    100054c2 <firstRun(bool)+0x22f7>
1000549e:	a0 00 00 00 00       	mov    al,ds:0x0	1000549f: R_386_32	installKey
100054a3:	3c 40                	cmp    al,0x40
100054a5:	7e 09                	jle    100054b0 <firstRun(bool)+0x22e5>
100054a7:	a0 00 00 00 00       	mov    al,ds:0x0	100054a8: R_386_32	installKey
100054ac:	3c 5a                	cmp    al,0x5a
100054ae:	7e 12                	jle    100054c2 <firstRun(bool)+0x22f7>
100054b0:	a0 00 00 00 00       	mov    al,ds:0x0	100054b1: R_386_32	installKey
100054b5:	3c 60                	cmp    al,0x60
100054b7:	7e 0d                	jle    100054c6 <firstRun(bool)+0x22fb>
100054b9:	a0 00 00 00 00       	mov    al,ds:0x0	100054ba: R_386_32	installKey
100054be:	3c 7a                	cmp    al,0x7a
100054c0:	7f 04                	jg     100054c6 <firstRun(bool)+0x22fb>
100054c2:	b0 01                	mov    al,0x1
100054c4:	eb 02                	jmp    100054c8 <firstRun(bool)+0x22fd>
100054c6:	b0 00                	mov    al,0x0
100054c8:	84 c0                	test   al,al
100054ca:	74 2c                	je     100054f8 <firstRun(bool)+0x232d>
100054cc:	a0 00 00 00 00       	mov    al,ds:0x0	100054cd: R_386_32	installKey
100054d1:	3c 60                	cmp    al,0x60
100054d3:	7e 13                	jle    100054e8 <firstRun(bool)+0x231d>
100054d5:	a0 00 00 00 00       	mov    al,ds:0x0	100054d6: R_386_32	installKey
100054da:	3c 7a                	cmp    al,0x7a
100054dc:	7f 0a                	jg     100054e8 <firstRun(bool)+0x231d>
100054de:	a0 00 00 00 00       	mov    al,ds:0x0	100054df: R_386_32	installKey
100054e3:	83 e8 20             	sub    eax,0x20
100054e6:	eb 05                	jmp    100054ed <firstRun(bool)+0x2322>
100054e8:	a0 00 00 00 00       	mov    al,ds:0x0	100054e9: R_386_32	installKey
100054ed:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100054f0:	81 c2 00 00 00 00    	add    edx,0x0	100054f2: R_386_32	pkeybuf
100054f6:	88 02                	mov    BYTE PTR [edx],al
100054f8:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100054fb:	83 ec 0c             	sub    esp,0xc
100054fe:	68 00 00 00 00       	push   0x0	100054ff: R_386_32	pkeybuf
10005503:	e8 fc ff ff ff       	call   10005504 <firstRun(bool)+0x2339>	10005504: R_386_PC32	strlen
10005508:	83 c4 10             	add    esp,0x10
1000550b:	89 c2                	mov    edx,eax
1000550d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10005510:	39 c2                	cmp    edx,eax
10005512:	77 07                	ja     1000551b <firstRun(bool)+0x2350>
10005514:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
1000551b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000551e:	05 00 00 00 00       	add    eax,0x0	1000551f: R_386_32	pkeybuf
10005523:	8a 00                	mov    al,BYTE PTR [eax]
10005525:	3c 2d                	cmp    al,0x2d
10005527:	0f 85 82 02 00 00    	jne    100057af <firstRun(bool)+0x25e4>
1000552d:	eb c9                	jmp    100054f8 <firstRun(bool)+0x232d>
1000552f:	a0 00 00 00 00       	mov    al,ds:0x0	10005530: R_386_32	installKey
10005534:	3c 1b                	cmp    al,0x1b
10005536:	0f 94 c0             	sete   al
10005539:	84 c0                	test   al,al
1000553b:	0f 85 3d f9 ff ff    	jne    10004e7e <firstRun(bool)+0x1cb3>
10005541:	a0 00 00 00 00       	mov    al,ds:0x0	10005542: R_386_32	installKey
10005546:	3c 0a                	cmp    al,0xa
10005548:	0f 94 c0             	sete   al
1000554b:	84 c0                	test   al,al
1000554d:	0f 84 5c 02 00 00    	je     100057af <firstRun(bool)+0x25e4>
10005553:	83 ec 0c             	sub    esp,0xc
10005556:	68 00 00 00 00       	push   0x0	10005557: R_386_32	pkeybuf
1000555b:	e8 fc ff ff ff       	call   1000555c <firstRun(bool)+0x2391>	1000555c: R_386_PC32	checkExtendedKey(char*)
10005560:	83 c4 10             	add    esp,0x10
10005563:	85 c0                	test   eax,eax
10005565:	0f 95 c0             	setne  al
10005568:	88 45 87             	mov    BYTE PTR [ebp-0x79],al
1000556b:	80 7d 87 00          	cmp    BYTE PTR [ebp-0x79],0x0
1000556f:	74 61                	je     100055d2 <firstRun(bool)+0x2407>
10005571:	83 ec 08             	sub    esp,0x8
10005574:	6a 00                	push   0x0
10005576:	68 f0 0a 00 00       	push   0xaf0
1000557b:	e8 fc ff ff ff       	call   1000557c <firstRun(bool)+0x23b1>	1000557c: R_386_PC32	milliTenthSleep(unsigned long long)
10005580:	83 c4 10             	add    esp,0x10
10005583:	e8 fc ff ff ff       	call   10005584 <firstRun(bool)+0x23b9>	10005584: R_386_PC32	drawBootScreen()
10005588:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000558a: R_386_32	installKey
1000558f:	83 ec 08             	sub    esp,0x8
10005592:	6a 00                	push   0x0
10005594:	68 84 03 00 00       	push   0x384
10005599:	e8 fc ff ff ff       	call   1000559a <firstRun(bool)+0x23cf>	1000559a: R_386_PC32	milliTenthSleep(unsigned long long)
1000559e:	83 c4 10             	add    esp,0x10
100055a1:	e8 fc ff ff ff       	call   100055a2 <firstRun(bool)+0x23d7>	100055a2: R_386_PC32	drawBootScreen()
100055a6:	83 ec 08             	sub    esp,0x8
100055a9:	6a 00                	push   0x0
100055ab:	68 c0 12 00 00       	push   0x12c0
100055b0:	e8 fc ff ff ff       	call   100055b1 <firstRun(bool)+0x23e6>	100055b1: R_386_PC32	milliTenthSleep(unsigned long long)
100055b5:	83 c4 10             	add    esp,0x10
100055b8:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100055ba: R_386_32	installKey
100055bf:	90                   	nop
100055c0:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
100055c7:	0f 84 ee 01 00 00    	je     100057bb <firstRun(bool)+0x25f0>
100055cd:	e9 db 02 00 00       	jmp    100058ad <firstRun(bool)+0x26e2>
100055d2:	83 ec 08             	sub    esp,0x8
100055d5:	6a 00                	push   0x0
100055d7:	68 f0 0a 00 00       	push   0xaf0
100055dc:	e8 fc ff ff ff       	call   100055dd <firstRun(bool)+0x2412>	100055dd: R_386_PC32	milliTenthSleep(unsigned long long)
100055e1:	83 c4 10             	add    esp,0x10
100055e4:	e8 fc ff ff ff       	call   100055e5 <firstRun(bool)+0x241a>	100055e5: R_386_PC32	drawBootScreen()
100055e9:	83 ec 08             	sub    esp,0x8
100055ec:	6a 01                	push   0x1
100055ee:	68 12 b6 00 10       	push   0x1000b612	100055ef: R_386_32	.text
100055f3:	6a 0e                	push   0xe
100055f5:	6a 32                	push   0x32
100055f7:	6a 02                	push   0x2
100055f9:	6a 16                	push   0x16
100055fb:	e8 fc ff ff ff       	call   100055fc <firstRun(bool)+0x2431>	100055fc: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10005600:	83 c4 20             	add    esp,0x20
10005603:	a1 00 00 00 00       	mov    eax,ds:0x0	10005604: R_386_32	term
10005608:	83 ec 04             	sub    esp,0x4
1000560b:	6a 05                	push   0x5
1000560d:	6a 18                	push   0x18
1000560f:	50                   	push   eax
10005610:	e8 fc ff ff ff       	call   10005611 <firstRun(bool)+0x2446>	10005611: R_386_PC32	VgaText::setCursor(int, int)
10005615:	83 c4 10             	add    esp,0x10
10005618:	a1 00 00 00 00       	mov    eax,ds:0x0	10005619: R_386_32	term
1000561d:	6a 07                	push   0x7
1000561f:	6a 00                	push   0x0
10005621:	68 20 b6 00 10       	push   0x1000b620	10005622: R_386_32	.text
10005626:	50                   	push   eax
10005627:	e8 fc ff ff ff       	call   10005628 <firstRun(bool)+0x245d>	10005628: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000562c:	83 c4 10             	add    esp,0x10
1000562f:	a1 00 00 00 00       	mov    eax,ds:0x0	10005630: R_386_32	term
10005634:	83 ec 04             	sub    esp,0x4
10005637:	6a 06                	push   0x6
10005639:	6a 18                	push   0x18
1000563b:	50                   	push   eax
1000563c:	e8 fc ff ff ff       	call   1000563d <firstRun(bool)+0x2472>	1000563d: R_386_PC32	VgaText::setCursor(int, int)
10005641:	83 c4 10             	add    esp,0x10
10005644:	a1 00 00 00 00       	mov    eax,ds:0x0	10005645: R_386_32	term
10005649:	6a 07                	push   0x7
1000564b:	6a 00                	push   0x0
1000564d:	68 84 b4 00 10       	push   0x1000b484	1000564e: R_386_32	.text
10005652:	50                   	push   eax
10005653:	e8 fc ff ff ff       	call   10005654 <firstRun(bool)+0x2489>	10005654: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10005658:	83 c4 10             	add    esp,0x10
1000565b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000565c: R_386_32	term
10005660:	83 ec 04             	sub    esp,0x4
10005663:	6a 08                	push   0x8
10005665:	6a 1c                	push   0x1c
10005667:	50                   	push   eax
10005668:	e8 fc ff ff ff       	call   10005669 <firstRun(bool)+0x249e>	10005669: R_386_PC32	VgaText::setCursor(int, int)
1000566d:	83 c4 10             	add    esp,0x10
10005670:	a1 00 00 00 00       	mov    eax,ds:0x0	10005671: R_386_32	term
10005675:	6a 07                	push   0x7
10005677:	6a 00                	push   0x0
10005679:	68 00 00 00 00       	push   0x0	1000567a: R_386_32	pkeybuf
1000567e:	50                   	push   eax
1000567f:	e8 fc ff ff ff       	call   10005680 <firstRun(bool)+0x24b5>	10005680: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10005684:	83 c4 10             	add    esp,0x10
10005687:	a1 00 00 00 00       	mov    eax,ds:0x0	10005688: R_386_32	term
1000568c:	83 ec 04             	sub    esp,0x4
1000568f:	6a 08                	push   0x8
10005691:	6a 2c                	push   0x2c
10005693:	50                   	push   eax
10005694:	e8 fc ff ff ff       	call   10005695 <firstRun(bool)+0x24ca>	10005695: R_386_PC32	VgaText::setCursor(int, int)
10005699:	83 c4 10             	add    esp,0x10
1000569c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000569d: R_386_32	term
100056a1:	6a 07                	push   0x7
100056a3:	6a 07                	push   0x7
100056a5:	6a 20                	push   0x20
100056a7:	50                   	push   eax
100056a8:	e8 fc ff ff ff       	call   100056a9 <firstRun(bool)+0x24de>	100056a9: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100056ad:	83 c4 10             	add    esp,0x10
100056b0:	a1 00 00 00 00       	mov    eax,ds:0x0	100056b1: R_386_32	term
100056b5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100056b8:	83 c2 1c             	add    edx,0x1c
100056bb:	83 ec 04             	sub    esp,0x4
100056be:	6a 08                	push   0x8
100056c0:	52                   	push   edx
100056c1:	50                   	push   eax
100056c2:	e8 fc ff ff ff       	call   100056c3 <firstRun(bool)+0x24f8>	100056c3: R_386_PC32	VgaText::setCursor(int, int)
100056c7:	83 c4 10             	add    esp,0x10
100056ca:	83 ec 0c             	sub    esp,0xc
100056cd:	68 71 b5 00 10       	push   0x1000b571	100056ce: R_386_32	.text
100056d2:	6a 0b                	push   0xb
100056d4:	6a 2b                	push   0x2b
100056d6:	6a 0a                	push   0xa
100056d8:	6a 22                	push   0x22
100056da:	e8 fc ff ff ff       	call   100056db <firstRun(bool)+0x2510>	100056db: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100056df:	83 c4 20             	add    esp,0x20
100056e2:	a1 00 00 00 00       	mov    eax,ds:0x0	100056e3: R_386_32	term
100056e7:	83 ec 04             	sub    esp,0x4
100056ea:	6a 0d                	push   0xd
100056ec:	6a 24                	push   0x24
100056ee:	50                   	push   eax
100056ef:	e8 fc ff ff ff       	call   100056f0 <firstRun(bool)+0x2525>	100056f0: R_386_PC32	VgaText::setCursor(int, int)
100056f4:	83 c4 10             	add    esp,0x10
100056f7:	a1 00 00 00 00       	mov    eax,ds:0x0	100056f8: R_386_32	term
100056fc:	83 ec 08             	sub    esp,0x8
100056ff:	68 48 b6 00 10       	push   0x1000b648	10005700: R_386_32	.text
10005704:	50                   	push   eax
10005705:	e8 fc ff ff ff       	call   10005706 <firstRun(bool)+0x253b>	10005706: R_386_PC32	VgaText::puts(char const*)
1000570a:	83 c4 10             	add    esp,0x10
1000570d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000570e: R_386_32	term
10005712:	83 ec 04             	sub    esp,0x4
10005715:	6a 0f                	push   0xf
10005717:	6a 24                	push   0x24
10005719:	50                   	push   eax
1000571a:	e8 fc ff ff ff       	call   1000571b <firstRun(bool)+0x2550>	1000571b: R_386_PC32	VgaText::setCursor(int, int)
1000571f:	83 c4 10             	add    esp,0x10
10005722:	a1 00 00 00 00       	mov    eax,ds:0x0	10005723: R_386_32	term
10005727:	83 ec 08             	sub    esp,0x8
1000572a:	68 70 b6 00 10       	push   0x1000b670	1000572b: R_386_32	.text
1000572f:	50                   	push   eax
10005730:	e8 fc ff ff ff       	call   10005731 <firstRun(bool)+0x2566>	10005731: R_386_PC32	VgaText::puts(char const*)
10005735:	83 c4 10             	add    esp,0x10
10005738:	a1 00 00 00 00       	mov    eax,ds:0x0	10005739: R_386_32	term
1000573d:	83 ec 04             	sub    esp,0x4
10005740:	6a 10                	push   0x10
10005742:	6a 24                	push   0x24
10005744:	50                   	push   eax
10005745:	e8 fc ff ff ff       	call   10005746 <firstRun(bool)+0x257b>	10005746: R_386_PC32	VgaText::setCursor(int, int)
1000574a:	83 c4 10             	add    esp,0x10
1000574d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000574e: R_386_32	term
10005752:	83 ec 08             	sub    esp,0x8
10005755:	68 94 b6 00 10       	push   0x1000b694	10005756: R_386_32	.text
1000575a:	50                   	push   eax
1000575b:	e8 fc ff ff ff       	call   1000575c <firstRun(bool)+0x2591>	1000575c: R_386_PC32	VgaText::puts(char const*)
10005760:	83 c4 10             	add    esp,0x10
10005763:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005765: R_386_32	installKey
1000576a:	83 ec 08             	sub    esp,0x8
1000576d:	6a 00                	push   0x0
1000576f:	68 94 11 00 00       	push   0x1194
10005774:	e8 fc ff ff ff       	call   10005775 <firstRun(bool)+0x25aa>	10005775: R_386_PC32	milliTenthSleep(unsigned long long)
10005779:	83 c4 10             	add    esp,0x10
1000577c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000577e: R_386_32	installKey
10005783:	a0 00 00 00 00       	mov    al,ds:0x0	10005784: R_386_32	installKey
10005788:	84 c0                	test   al,al
1000578a:	0f 94 c0             	sete   al
1000578d:	84 c0                	test   al,al
1000578f:	74 02                	je     10005793 <firstRun(bool)+0x25c8>
10005791:	eb f0                	jmp    10005783 <firstRun(bool)+0x25b8>
10005793:	e8 fc ff ff ff       	call   10005794 <firstRun(bool)+0x25c9>	10005794: R_386_PC32	drawBootScreen()
10005798:	83 ec 08             	sub    esp,0x8
1000579b:	6a 00                	push   0x0
1000579d:	68 9c 18 00 00       	push   0x189c
100057a2:	e8 fc ff ff ff       	call   100057a3 <firstRun(bool)+0x25d8>	100057a3: R_386_PC32	milliTenthSleep(unsigned long long)
100057a7:	83 c4 10             	add    esp,0x10
100057aa:	e9 6f fa ff ff       	jmp    1000521e <firstRun(bool)+0x2053>
100057af:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100057b1: R_386_32	installKey
100057b6:	e9 33 fb ff ff       	jmp    100052ee <firstRun(bool)+0x2123>
100057bb:	e8 fc ff ff ff       	call   100057bc <firstRun(bool)+0x25f1>	100057bc: R_386_PC32	drawBootScreen()
100057c0:	83 ec 0c             	sub    esp,0xc
100057c3:	68 b5 b6 00 10       	push   0x1000b6b5	100057c4: R_386_32	.text
100057c8:	6a 0d                	push   0xd
100057ca:	6a 32                	push   0x32
100057cc:	6a 05                	push   0x5
100057ce:	6a 16                	push   0x16
100057d0:	e8 fc ff ff ff       	call   100057d1 <firstRun(bool)+0x2606>	100057d1: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100057d5:	83 c4 20             	add    esp,0x20
100057d8:	83 ec 0c             	sub    esp,0xc
100057db:	6a 00                	push   0x0
100057dd:	e8 fc ff ff ff       	call   100057de <firstRun(bool)+0x2613>	100057de: R_386_PC32	bootInstallTasks(int)
100057e2:	83 c4 10             	add    esp,0x10
100057e5:	83 ec 0c             	sub    esp,0xc
100057e8:	68 d0 b6 00 10       	push   0x1000b6d0	100057e9: R_386_32	.text
100057ed:	e8 fc ff ff ff       	call   100057ee <firstRun(bool)+0x2623>	100057ee: R_386_PC32	Dbg::kprintf(char const*, ...)
100057f2:	83 c4 10             	add    esp,0x10
100057f5:	c7 45 80 0c 00 00 00 	mov    DWORD PTR [ebp-0x80],0xc
100057fc:	83 ec 0c             	sub    esp,0xc
100057ff:	ff 75 80             	push   DWORD PTR [ebp-0x80]
10005802:	e8 fc ff ff ff       	call   10005803 <firstRun(bool)+0x2638>	10005803: R_386_PC32	Virt::setupPageSwapping(int)
10005807:	83 c4 10             	add    esp,0x10
1000580a:	83 ec 0c             	sub    esp,0xc
1000580d:	6a 01                	push   0x1
1000580f:	e8 fc ff ff ff       	call   10005810 <firstRun(bool)+0x2645>	10005810: R_386_PC32	bootInstallTasks(int)
10005814:	83 c4 10             	add    esp,0x10
10005817:	83 ec 0c             	sub    esp,0xc
1000581a:	68 f0 b6 00 10       	push   0x1000b6f0	1000581b: R_386_32	.text
1000581f:	e8 fc ff ff ff       	call   10005820 <firstRun(bool)+0x2655>	10005820: R_386_PC32	rmtree(char*)
10005824:	83 c4 10             	add    esp,0x10
10005827:	83 ec 0c             	sub    esp,0xc
1000582a:	68 0a b7 00 10       	push   0x1000b70a	1000582b: R_386_32	.text
1000582f:	e8 fc ff ff ff       	call   10005830 <firstRun(bool)+0x2665>	10005830: R_386_PC32	rmtree(char*)
10005834:	83 c4 10             	add    esp,0x10
10005837:	83 ec 08             	sub    esp,0x8
1000583a:	68 c0 01 00 00       	push   0x1c0
1000583f:	68 f0 b6 00 10       	push   0x1000b6f0	10005840: R_386_32	.text
10005844:	e8 fc ff ff ff       	call   10005845 <firstRun(bool)+0x267a>	10005845: R_386_PC32	mkdir(char const*, int)
10005849:	83 c4 10             	add    esp,0x10
1000584c:	83 ec 08             	sub    esp,0x8
1000584f:	68 c0 01 00 00       	push   0x1c0
10005854:	68 0a b7 00 10       	push   0x1000b70a	10005855: R_386_32	.text
10005859:	e8 fc ff ff ff       	call   1000585a <firstRun(bool)+0x268f>	1000585a: R_386_PC32	mkdir(char const*, int)
1000585e:	83 c4 10             	add    esp,0x10
10005861:	83 ec 08             	sub    esp,0x8
10005864:	68 f0 b6 00 10       	push   0x1000b6f0	10005865: R_386_32	.text
10005869:	68 24 b7 00 10       	push   0x1000b724	1000586a: R_386_32	.text
1000586e:	e8 fc ff ff ff       	call   1000586f <firstRun(bool)+0x26a4>	1000586f: R_386_PC32	copytree(char*, char*)
10005873:	83 c4 10             	add    esp,0x10
10005876:	83 ec 0c             	sub    esp,0xc
10005879:	6a 02                	push   0x2
1000587b:	e8 fc ff ff ff       	call   1000587c <firstRun(bool)+0x26b1>	1000587c: R_386_PC32	bootInstallTasks(int)
10005880:	83 c4 10             	add    esp,0x10
10005883:	83 ec 0c             	sub    esp,0xc
10005886:	68 00 00 00 00       	push   0x0	10005887: R_386_32	currName
1000588b:	e8 fc ff ff ff       	call   1000588c <firstRun(bool)+0x26c1>	1000588c: R_386_PC32	createUser(char const*)
10005890:	83 c4 10             	add    esp,0x10
10005893:	83 ec 0c             	sub    esp,0xc
10005896:	6a 03                	push   0x3
10005898:	e8 fc ff ff ff       	call   10005899 <firstRun(bool)+0x26ce>	10005899: R_386_PC32	bootInstallTasks(int)
1000589d:	83 c4 10             	add    esp,0x10
100058a0:	a0 00 00 00 00       	mov    al,ds:0x0	100058a1: R_386_32	safemode
100058a5:	83 f0 01             	xor    eax,0x1
100058a8:	a2 00 00 00 00       	mov    ds:0x0,al	100058a9: R_386_32	VgaText::hiddenOut
100058ad:	8d 65 f4             	lea    esp,[ebp-0xc]
100058b0:	5b                   	pop    ebx
100058b1:	5e                   	pop    esi
100058b2:	5f                   	pop    edi
100058b3:	5d                   	pop    ebp
100058b4:	c3                   	ret    

100058b5 <loadExtensions()>:
100058b5:	55                   	push   ebp
100058b6:	89 e5                	mov    ebp,esp
100058b8:	83 ec 08             	sub    esp,0x8
100058bb:	83 ec 0c             	sub    esp,0xc
100058be:	68 cc b7 00 10       	push   0x1000b7cc	100058bf: R_386_32	.text
100058c3:	e8 fc ff ff ff       	call   100058c4 <loadExtensions()+0xf>	100058c4: R_386_PC32	KeSetBootMessage(char const*)
100058c8:	83 c4 10             	add    esp,0x10
100058cb:	90                   	nop
100058cc:	c9                   	leave  
100058cd:	c3                   	ret    

100058ce <rgtree(Reghive_Tag*, int, int)>:
100058ce:	55                   	push   ebp
100058cf:	89 e5                	mov    ebp,esp
100058d1:	53                   	push   ebx
100058d2:	83 ec 44             	sub    esp,0x44
100058d5:	83 7d 0c 01          	cmp    DWORD PTR [ebp+0xc],0x1
100058d9:	75 16                	jne    100058f1 <rgtree(Reghive_Tag*, int, int)+0x23>
100058db:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100058df:	75 10                	jne    100058f1 <rgtree(Reghive_Tag*, int, int)+0x23>
100058e1:	83 ec 0c             	sub    esp,0xc
100058e4:	68 e2 b7 00 10       	push   0x1000b7e2	100058e5: R_386_32	.text
100058e9:	e8 fc ff ff ff       	call   100058ea <rgtree(Reghive_Tag*, int, int)+0x1c>	100058ea: R_386_PC32	Dbg::kprintf(char const*, ...)
100058ee:	83 c4 10             	add    esp,0x10
100058f1:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
100058f5:	0f 8e a9 00 00 00    	jle    100059a4 <rgtree(Reghive_Tag*, int, int)+0xd6>
100058fb:	83 ec 04             	sub    esp,0x4
100058fe:	6a 32                	push   0x32
10005900:	6a 00                	push   0x0
10005902:	8d 45 be             	lea    eax,[ebp-0x42]
10005905:	50                   	push   eax
10005906:	e8 fc ff ff ff       	call   10005907 <rgtree(Reghive_Tag*, int, int)+0x39>	10005907: R_386_PC32	memset
1000590b:	83 c4 10             	add    esp,0x10
1000590e:	83 ec 04             	sub    esp,0x4
10005911:	8d 45 be             	lea    eax,[ebp-0x42]
10005914:	50                   	push   eax
10005915:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10005918:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000591b:	e8 fc ff ff ff       	call   1000591c <rgtree(Reghive_Tag*, int, int)+0x4e>	1000591c: R_386_PC32	CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)
10005920:	83 c4 10             	add    esp,0x10
10005923:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10005926:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000592d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10005930:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10005933:	7d 15                	jge    1000594a <rgtree(Reghive_Tag*, int, int)+0x7c>
10005935:	83 ec 0c             	sub    esp,0xc
10005938:	68 93 b2 00 10       	push   0x1000b293	10005939: R_386_32	.text
1000593d:	e8 fc ff ff ff       	call   1000593e <rgtree(Reghive_Tag*, int, int)+0x70>	1000593e: R_386_PC32	Dbg::kprintf(char const*, ...)
10005942:	83 c4 10             	add    esp,0x10
10005945:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10005948:	eb e3                	jmp    1000592d <rgtree(Reghive_Tag*, int, int)+0x5f>
1000594a:	83 ec 08             	sub    esp,0x8
1000594d:	8d 45 be             	lea    eax,[ebp-0x42]
10005950:	50                   	push   eax
10005951:	68 e7 b7 00 10       	push   0x1000b7e7	10005952: R_386_32	.text
10005956:	e8 fc ff ff ff       	call   10005957 <rgtree(Reghive_Tag*, int, int)+0x89>	10005957: R_386_PC32	Dbg::kprintf(char const*, ...)
1000595b:	83 c4 10             	add    esp,0x10
1000595e:	83 7d f0 4e          	cmp    DWORD PTR [ebp-0x10],0x4e
10005962:	75 27                	jne    1000598b <rgtree(Reghive_Tag*, int, int)+0xbd>
10005964:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10005967:	8d 58 04             	lea    ebx,[eax+0x4]
1000596a:	83 ec 08             	sub    esp,0x8
1000596d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10005970:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005973:	e8 fc ff ff ff       	call   10005974 <rgtree(Reghive_Tag*, int, int)+0xa6>	10005974: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005978:	83 c4 10             	add    esp,0x10
1000597b:	83 ec 04             	sub    esp,0x4
1000597e:	53                   	push   ebx
1000597f:	50                   	push   eax
10005980:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005983:	e8 fc ff ff ff       	call   10005984 <rgtree(Reghive_Tag*, int, int)+0xb6>	10005984: R_386_PC32	rgtree(Reghive_Tag*, int, int)
10005988:	83 c4 10             	add    esp,0x10
1000598b:	83 ec 08             	sub    esp,0x8
1000598e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10005991:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005994:	e8 fc ff ff ff       	call   10005995 <rgtree(Reghive_Tag*, int, int)+0xc7>	10005995: R_386_PC32	CmGetNext(Reghive_Tag*, int)
10005999:	83 c4 10             	add    esp,0x10
1000599c:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
1000599f:	e9 4d ff ff ff       	jmp    100058f1 <rgtree(Reghive_Tag*, int, int)+0x23>
100059a4:	90                   	nop
100059a5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100059a8:	c9                   	leave  
100059a9:	c3                   	ret    

100059aa <getRegsafeName(char*, char*)>:
100059aa:	55                   	push   ebp
100059ab:	89 e5                	mov    ebp,esp
100059ad:	83 ec 10             	sub    esp,0x10
100059b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100059b3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100059b6:	e8 fc ff ff ff       	call   100059b7 <getRegsafeName(char*, char*)+0xd>	100059b7: R_386_PC32	strcpy
100059bb:	83 c4 08             	add    esp,0x8
100059be:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
100059c5:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
100059c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100059cb:	01 d0                	add    eax,edx
100059cd:	8a 00                	mov    al,BYTE PTR [eax]
100059cf:	84 c0                	test   al,al
100059d1:	74 7f                	je     10005a52 <getRegsafeName(char*, char*)+0xa8>
100059d3:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
100059d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100059d9:	01 d0                	add    eax,edx
100059db:	8a 00                	mov    al,BYTE PTR [eax]
100059dd:	3c 60                	cmp    al,0x60
100059df:	7e 42                	jle    10005a23 <getRegsafeName(char*, char*)+0x79>
100059e1:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
100059e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100059e7:	01 d0                	add    eax,edx
100059e9:	8a 00                	mov    al,BYTE PTR [eax]
100059eb:	3c 7a                	cmp    al,0x7a
100059ed:	7f 34                	jg     10005a23 <getRegsafeName(char*, char*)+0x79>
100059ef:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
100059f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100059f5:	01 d0                	add    eax,edx
100059f7:	8a 00                	mov    al,BYTE PTR [eax]
100059f9:	8d 48 9f             	lea    ecx,[eax-0x61]
100059fc:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
100059ff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005a02:	01 d0                	add    eax,edx
10005a04:	88 ca                	mov    dl,cl
10005a06:	88 10                	mov    BYTE PTR [eax],dl
10005a08:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005a0b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005a0e:	01 d0                	add    eax,edx
10005a10:	8a 00                	mov    al,BYTE PTR [eax]
10005a12:	8d 48 41             	lea    ecx,[eax+0x41]
10005a15:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005a18:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005a1b:	01 d0                	add    eax,edx
10005a1d:	88 ca                	mov    dl,cl
10005a1f:	88 10                	mov    BYTE PTR [eax],dl
10005a21:	eb 27                	jmp    10005a4a <getRegsafeName(char*, char*)+0xa0>
10005a23:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005a26:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005a29:	01 d0                	add    eax,edx
10005a2b:	8a 00                	mov    al,BYTE PTR [eax]
10005a2d:	3c 40                	cmp    al,0x40
10005a2f:	7e 0e                	jle    10005a3f <getRegsafeName(char*, char*)+0x95>
10005a31:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005a34:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005a37:	01 d0                	add    eax,edx
10005a39:	8a 00                	mov    al,BYTE PTR [eax]
10005a3b:	3c 5a                	cmp    al,0x5a
10005a3d:	7e 0b                	jle    10005a4a <getRegsafeName(char*, char*)+0xa0>
10005a3f:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005a42:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005a45:	01 d0                	add    eax,edx
10005a47:	c6 00 5a             	mov    BYTE PTR [eax],0x5a
10005a4a:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10005a4d:	e9 73 ff ff ff       	jmp    100059c5 <getRegsafeName(char*, char*)+0x1b>
10005a52:	90                   	nop
10005a53:	c9                   	leave  
10005a54:	c3                   	ret    

10005a55 <begin(void*)>:
10005a55:	55                   	push   ebp
10005a56:	89 e5                	mov    ebp,esp
10005a58:	57                   	push   edi
10005a59:	56                   	push   esi
10005a5a:	53                   	push   ebx
10005a5b:	81 ec 6c 07 00 00    	sub    esp,0x76c
10005a61:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
10005a65:	a1 00 00 00 00       	mov    eax,ds:0x0	10005a66: R_386_32	keBootSettings
10005a6a:	83 e0 02             	and    eax,0x2
10005a6d:	85 c0                	test   eax,eax
10005a6f:	0f 95 c0             	setne  al
10005a72:	a2 00 00 00 00       	mov    ds:0x0,al	10005a73: R_386_32	safemode
10005a77:	83 ec 0c             	sub    esp,0xc
10005a7a:	68 14 01 00 00       	push   0x114
10005a7f:	e8 fc ff ff ff       	call   10005a80 <begin(void*)+0x2b>	10005a80: R_386_PC32	operator new(unsigned long)
10005a84:	83 c4 10             	add    esp,0x10
10005a87:	89 c3                	mov    ebx,eax
10005a89:	a1 00 00 00 00       	mov    eax,ds:0x0	10005a8a: R_386_32	kernelProcess
10005a8e:	83 ec 04             	sub    esp,0x4
10005a91:	50                   	push   eax
10005a92:	68 ec b7 00 10       	push   0x1000b7ec	10005a93: R_386_32	.text
10005a97:	53                   	push   ebx
10005a98:	e8 fc ff ff ff       	call   10005a99 <begin(void*)+0x44>	10005a99: R_386_PC32	File::File(char const*, Process*)
10005a9d:	83 c4 10             	add    esp,0x10
10005aa0:	89 5d b4             	mov    DWORD PTR [ebp-0x4c],ebx
10005aa3:	83 7d b4 00          	cmp    DWORD PTR [ebp-0x4c],0x0
10005aa7:	75 10                	jne    10005ab9 <begin(void*)+0x64>
10005aa9:	83 ec 0c             	sub    esp,0xc
10005aac:	68 0a b8 00 10       	push   0x1000b80a	10005aad: R_386_32	.text
10005ab1:	e8 fc ff ff ff       	call   10005ab2 <begin(void*)+0x5d>	10005ab2: R_386_PC32	KePanic(char const*)
10005ab6:	83 c4 10             	add    esp,0x10
10005ab9:	83 ec 08             	sub    esp,0x8
10005abc:	6a 01                	push   0x1
10005abe:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10005ac1:	e8 fc ff ff ff       	call   10005ac2 <begin(void*)+0x6d>	10005ac2: R_386_PC32	File::open(FileOpenMode)
10005ac6:	83 c4 10             	add    esp,0x10
10005ac9:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
10005acc:	83 7d b0 00          	cmp    DWORD PTR [ebp-0x50],0x0
10005ad0:	75 10                	jne    10005ae2 <begin(void*)+0x8d>
10005ad2:	83 ec 0c             	sub    esp,0xc
10005ad5:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10005ad8:	e8 fc ff ff ff       	call   10005ad9 <begin(void*)+0x84>	10005ad9: R_386_PC32	File::close()
10005add:	83 c4 10             	add    esp,0x10
10005ae0:	eb 04                	jmp    10005ae6 <begin(void*)+0x91>
10005ae2:	c6 45 e7 01          	mov    BYTE PTR [ebp-0x19],0x1
10005ae6:	83 7d b4 00          	cmp    DWORD PTR [ebp-0x4c],0x0
10005aea:	74 15                	je     10005b01 <begin(void*)+0xac>
10005aec:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
10005aef:	8b 00                	mov    eax,DWORD PTR [eax]
10005af1:	83 c0 08             	add    eax,0x8
10005af4:	8b 00                	mov    eax,DWORD PTR [eax]
10005af6:	83 ec 0c             	sub    esp,0xc
10005af9:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10005afc:	ff d0                	call   eax
10005afe:	83 c4 10             	add    esp,0x10
10005b01:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10005b03: R_386_32	KeIsPreemptionOn
10005b08:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
10005b0c:	74 0f                	je     10005b1d <begin(void*)+0xc8>
10005b0e:	83 ec 0c             	sub    esp,0xc
10005b11:	6a 00                	push   0x0
10005b13:	e8 fc ff ff ff       	call   10005b14 <begin(void*)+0xbf>	10005b14: R_386_PC32	firstRun(bool)
10005b18:	83 c4 10             	add    esp,0x10
10005b1b:	eb 05                	jmp    10005b22 <begin(void*)+0xcd>
10005b1d:	e8 fc ff ff ff       	call   10005b1e <begin(void*)+0xc9>	10005b1e: R_386_PC32	loadExtensions()
10005b22:	8d 45 88             	lea    eax,[ebp-0x78]
10005b25:	bb 08 be 00 10       	mov    ebx,0x1000be08	10005b26: R_386_32	.text
10005b2a:	ba 04 00 00 00       	mov    edx,0x4
10005b2f:	89 c7                	mov    edi,eax
10005b31:	89 de                	mov    esi,ebx
10005b33:	89 d1                	mov    ecx,edx
10005b35:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10005b37:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
10005b3b:	0f 84 01 14 00 00    	je     10006f42 <begin(void*)+0x14ed>
10005b41:	83 ec 0c             	sub    esp,0xc
10005b44:	68 84 07 00 00       	push   0x784
10005b49:	e8 fc ff ff ff       	call   10005b4a <begin(void*)+0xf5>	10005b4a: R_386_PC32	operator new(unsigned long)
10005b4e:	83 c4 10             	add    esp,0x10
10005b51:	89 c3                	mov    ebx,eax
10005b53:	8d 45 88             	lea    eax,[ebp-0x78]
10005b56:	50                   	push   eax
10005b57:	6a 00                	push   0x0
10005b59:	68 1a b8 00 10       	push   0x1000b81a	10005b5a: R_386_32	.text
10005b5e:	53                   	push   ebx
10005b5f:	e8 fc ff ff ff       	call   10005b60 <begin(void*)+0x10b>	10005b60: R_386_PC32	Process::Process(char const*, Process*, char**)
10005b64:	83 c4 10             	add    esp,0x10
10005b67:	89 5d ac             	mov    DWORD PTR [ebp-0x54],ebx
10005b6a:	83 ec 0c             	sub    esp,0xc
10005b6d:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
10005b70:	e8 fc ff ff ff       	call   10005b71 <begin(void*)+0x11c>	10005b71: R_386_PC32	Process::createUserThread()
10005b75:	83 c4 10             	add    esp,0x10
10005b78:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005b7a: R_386_32	VgaText::hiddenOut
10005b7f:	a1 00 00 00 00       	mov    eax,ds:0x0	10005b80: R_386_32	term
10005b84:	83 ec 0c             	sub    esp,0xc
10005b87:	50                   	push   eax
10005b88:	e8 fc ff ff ff       	call   10005b89 <begin(void*)+0x134>	10005b89: R_386_PC32	setActiveTerminal(VgaText*)
10005b8d:	83 c4 10             	add    esp,0x10
10005b90:	e8 fc ff ff ff       	call   10005b91 <begin(void*)+0x13c>	10005b91: R_386_PC32	drawBootScreen()
10005b95:	83 ec 0c             	sub    esp,0xc
10005b98:	68 b5 b6 00 10       	push   0x1000b6b5	10005b99: R_386_32	.text
10005b9d:	6a 0d                	push   0xd
10005b9f:	6a 32                	push   0x32
10005ba1:	6a 05                	push   0x5
10005ba3:	6a 16                	push   0x16
10005ba5:	e8 fc ff ff ff       	call   10005ba6 <begin(void*)+0x151>	10005ba6: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10005baa:	83 c4 20             	add    esp,0x20
10005bad:	83 ec 0c             	sub    esp,0xc
10005bb0:	6a 03                	push   0x3
10005bb2:	e8 fc ff ff ff       	call   10005bb3 <begin(void*)+0x15e>	10005bb3: R_386_PC32	bootInstallTasks(int)
10005bb7:	83 c4 10             	add    esp,0x10
10005bba:	a0 00 00 00 00       	mov    al,ds:0x0	10005bbb: R_386_32	safemode
10005bbf:	83 f0 01             	xor    eax,0x1
10005bc2:	a2 00 00 00 00       	mov    ds:0x0,al	10005bc3: R_386_32	VgaText::hiddenOut
10005bc7:	a0 00 00 00 00       	mov    al,ds:0x0	10005bc8: R_386_32	safemode
10005bcc:	84 c0                	test   al,al
10005bce:	74 43                	je     10005c13 <begin(void*)+0x1be>
10005bd0:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10005bd3:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
10005bd9:	83 ec 0c             	sub    esp,0xc
10005bdc:	50                   	push   eax
10005bdd:	e8 fc ff ff ff       	call   10005bde <begin(void*)+0x189>	10005bde: R_386_PC32	setActiveTerminal(VgaText*)
10005be2:	83 c4 10             	add    esp,0x10
10005be5:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10005be8:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
10005bee:	83 ec 08             	sub    esp,0x8
10005bf1:	6a 00                	push   0x0
10005bf3:	50                   	push   eax
10005bf4:	e8 fc ff ff ff       	call   10005bf5 <begin(void*)+0x1a0>	10005bf5: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
10005bf9:	83 c4 10             	add    esp,0x10
10005bfc:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10005bff:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
10005c05:	83 ec 08             	sub    esp,0x8
10005c08:	6a 0f                	push   0xf
10005c0a:	50                   	push   eax
10005c0b:	e8 fc ff ff ff       	call   10005c0c <begin(void*)+0x1b7>	10005c0c: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
10005c10:	83 c4 10             	add    esp,0x10
10005c13:	83 ec 0c             	sub    esp,0xc
10005c16:	68 14 01 00 00       	push   0x114
10005c1b:	e8 fc ff ff ff       	call   10005c1c <begin(void*)+0x1c7>	10005c1c: R_386_PC32	operator new(unsigned long)
10005c20:	83 c4 10             	add    esp,0x10
10005c23:	89 c3                	mov    ebx,eax
10005c25:	a1 00 00 00 00       	mov    eax,ds:0x0	10005c26: R_386_32	kernelProcess
10005c2a:	83 ec 04             	sub    esp,0x4
10005c2d:	50                   	push   eax
10005c2e:	68 37 b8 00 10       	push   0x1000b837	10005c2f: R_386_32	.text
10005c33:	53                   	push   ebx
10005c34:	e8 fc ff ff ff       	call   10005c35 <begin(void*)+0x1e0>	10005c35: R_386_PC32	File::File(char const*, Process*)
10005c39:	83 c4 10             	add    esp,0x10
10005c3c:	89 5d a8             	mov    DWORD PTR [ebp-0x58],ebx
10005c3f:	83 ec 08             	sub    esp,0x8
10005c42:	6a 01                	push   0x1
10005c44:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005c47:	e8 fc ff ff ff       	call   10005c48 <begin(void*)+0x1f3>	10005c48: R_386_PC32	File::open(FileOpenMode)
10005c4c:	83 c4 10             	add    esp,0x10
10005c4f:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10005c52:	83 7d a4 00          	cmp    DWORD PTR [ebp-0x5c],0x0
10005c56:	75 39                	jne    10005c91 <begin(void*)+0x23c>
10005c58:	83 ec 0c             	sub    esp,0xc
10005c5b:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005c5e:	e8 fc ff ff ff       	call   10005c5f <begin(void*)+0x20a>	10005c5f: R_386_PC32	File::close()
10005c63:	83 c4 10             	add    esp,0x10
10005c66:	83 ec 0c             	sub    esp,0xc
10005c69:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005c6c:	e8 fc ff ff ff       	call   10005c6d <begin(void*)+0x218>	10005c6d: R_386_PC32	File::unlink()
10005c71:	83 c4 10             	add    esp,0x10
10005c74:	83 7d a8 00          	cmp    DWORD PTR [ebp-0x58],0x0
10005c78:	74 46                	je     10005cc0 <begin(void*)+0x26b>
10005c7a:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
10005c7d:	8b 00                	mov    eax,DWORD PTR [eax]
10005c7f:	83 c0 08             	add    eax,0x8
10005c82:	8b 00                	mov    eax,DWORD PTR [eax]
10005c84:	83 ec 0c             	sub    esp,0xc
10005c87:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005c8a:	ff d0                	call   eax
10005c8c:	83 c4 10             	add    esp,0x10
10005c8f:	eb 2f                	jmp    10005cc0 <begin(void*)+0x26b>
10005c91:	83 7d a8 00          	cmp    DWORD PTR [ebp-0x58],0x0
10005c95:	74 15                	je     10005cac <begin(void*)+0x257>
10005c97:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
10005c9a:	8b 00                	mov    eax,DWORD PTR [eax]
10005c9c:	83 c0 08             	add    eax,0x8
10005c9f:	8b 00                	mov    eax,DWORD PTR [eax]
10005ca1:	83 ec 0c             	sub    esp,0xc
10005ca4:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005ca7:	ff d0                	call   eax
10005ca9:	83 c4 10             	add    esp,0x10
10005cac:	83 ec 08             	sub    esp,0x8
10005caf:	6a 00                	push   0x0
10005cb1:	6a 01                	push   0x1
10005cb3:	e8 fc ff ff ff       	call   10005cb4 <begin(void*)+0x25f>	10005cb4: R_386_PC32	sleep(unsigned long long)
10005cb8:	83 c4 10             	add    esp,0x10
10005cbb:	e9 53 ff ff ff       	jmp    10005c13 <begin(void*)+0x1be>
10005cc0:	90                   	nop
10005cc1:	83 ec 08             	sub    esp,0x8
10005cc4:	6a 00                	push   0x0
10005cc6:	6a 01                	push   0x1
10005cc8:	e8 fc ff ff ff       	call   10005cc9 <begin(void*)+0x274>	10005cc9: R_386_PC32	sleep(unsigned long long)
10005ccd:	83 c4 10             	add    esp,0x10
10005cd0:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005cd2: R_386_32	VgaText::hiddenOut
10005cd7:	a1 00 00 00 00       	mov    eax,ds:0x0	10005cd8: R_386_32	term
10005cdc:	83 ec 0c             	sub    esp,0xc
10005cdf:	50                   	push   eax
10005ce0:	e8 fc ff ff ff       	call   10005ce1 <begin(void*)+0x28c>	10005ce1: R_386_PC32	setActiveTerminal(VgaText*)
10005ce5:	83 c4 10             	add    esp,0x10
10005ce8:	e8 fc ff ff ff       	call   10005ce9 <begin(void*)+0x294>	10005ce9: R_386_PC32	drawBootScreen()
10005ced:	83 ec 0c             	sub    esp,0xc
10005cf0:	68 b5 b6 00 10       	push   0x1000b6b5	10005cf1: R_386_32	.text
10005cf5:	6a 0d                	push   0xd
10005cf7:	6a 32                	push   0x32
10005cf9:	6a 05                	push   0x5
10005cfb:	6a 16                	push   0x16
10005cfd:	e8 fc ff ff ff       	call   10005cfe <begin(void*)+0x2a9>	10005cfe: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10005d02:	83 c4 20             	add    esp,0x20
10005d05:	83 ec 0c             	sub    esp,0xc
10005d08:	6a 04                	push   0x4
10005d0a:	e8 fc ff ff ff       	call   10005d0b <begin(void*)+0x2b6>	10005d0b: R_386_PC32	bootInstallTasks(int)
10005d0f:	83 c4 10             	add    esp,0x10
10005d12:	eb 01                	jmp    10005d15 <begin(void*)+0x2c0>
10005d14:	90                   	nop
10005d15:	83 ec 0c             	sub    esp,0xc
10005d18:	6a 05                	push   0x5
10005d1a:	e8 fc ff ff ff       	call   10005d1b <begin(void*)+0x2c6>	10005d1b: R_386_PC32	bootInstallTasks(int)
10005d1f:	83 c4 10             	add    esp,0x10
10005d22:	83 ec 0c             	sub    esp,0xc
10005d25:	68 44 b8 00 10       	push   0x1000b844	10005d26: R_386_32	.text
10005d2a:	e8 fc ff ff ff       	call   10005d2b <begin(void*)+0x2d6>	10005d2b: R_386_PC32	CmOpen(char const*)
10005d2f:	83 c4 10             	add    esp,0x10
10005d32:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10005d35:	a0 00 00 00 00       	mov    al,ds:0x0	10005d36: R_386_32	createNewUserMode
10005d3a:	83 f0 01             	xor    eax,0x1
10005d3d:	84 c0                	test   al,al
10005d3f:	74 15                	je     10005d56 <begin(void*)+0x301>
10005d41:	83 ec 04             	sub    esp,0x4
10005d44:	68 69 b8 00 10       	push   0x1000b869	10005d45: R_386_32	.text
10005d49:	6a 00                	push   0x0
10005d4b:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005d4e:	e8 fc ff ff ff       	call   10005d4f <begin(void*)+0x2fa>	10005d4f: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005d53:	83 c4 10             	add    esp,0x10
10005d56:	83 ec 08             	sub    esp,0x8
10005d59:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10005d5f:	50                   	push   eax
10005d60:	68 00 00 00 00       	push   0x0	10005d61: R_386_32	currName
10005d65:	e8 fc ff ff ff       	call   10005d66 <begin(void*)+0x311>	10005d66: R_386_PC32	getRegsafeName(char*, char*)
10005d6a:	83 c4 10             	add    esp,0x10
10005d6d:	83 ec 08             	sub    esp,0x8
10005d70:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10005d76:	50                   	push   eax
10005d77:	68 70 b8 00 10       	push   0x1000b870	10005d78: R_386_32	.text
10005d7c:	e8 fc ff ff ff       	call   10005d7d <begin(void*)+0x328>	10005d7d: R_386_PC32	Dbg::kprintf(char const*, ...)
10005d81:	83 c4 10             	add    esp,0x10
10005d84:	83 ec 08             	sub    esp,0x8
10005d87:	68 82 b8 00 10       	push   0x1000b882	10005d88: R_386_32	.text
10005d8c:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10005d92:	50                   	push   eax
10005d93:	e8 fc ff ff ff       	call   10005d94 <begin(void*)+0x33f>	10005d94: R_386_PC32	strcpy
10005d98:	83 c4 10             	add    esp,0x10
10005d9b:	83 ec 08             	sub    esp,0x8
10005d9e:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10005da4:	50                   	push   eax
10005da5:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10005dab:	50                   	push   eax
10005dac:	e8 fc ff ff ff       	call   10005dad <begin(void*)+0x358>	10005dad: R_386_PC32	strcat
10005db1:	83 c4 10             	add    esp,0x10
10005db4:	83 ec 08             	sub    esp,0x8
10005db7:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10005dbd:	50                   	push   eax
10005dbe:	68 90 b8 00 10       	push   0x1000b890	10005dbf: R_386_32	.text
10005dc3:	e8 fc ff ff ff       	call   10005dc4 <begin(void*)+0x36f>	10005dc4: R_386_PC32	Dbg::kprintf(char const*, ...)
10005dc8:	83 c4 10             	add    esp,0x10
10005dcb:	a0 00 00 00 00       	mov    al,ds:0x0	10005dcc: R_386_32	createNewUserMode
10005dd0:	83 f0 01             	xor    eax,0x1
10005dd3:	84 c0                	test   al,al
10005dd5:	0f 84 60 03 00 00    	je     1000613b <begin(void*)+0x6e6>
10005ddb:	83 ec 08             	sub    esp,0x8
10005dde:	68 69 b8 00 10       	push   0x1000b869	10005ddf: R_386_32	.text
10005de3:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005de6:	e8 fc ff ff ff       	call   10005de7 <begin(void*)+0x392>	10005de7: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005deb:	83 c4 10             	add    esp,0x10
10005dee:	83 ec 08             	sub    esp,0x8
10005df1:	50                   	push   eax
10005df2:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005df5:	e8 fc ff ff ff       	call   10005df6 <begin(void*)+0x3a1>	10005df6: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005dfa:	83 c4 10             	add    esp,0x10
10005dfd:	83 ec 04             	sub    esp,0x4
10005e00:	68 a3 b8 00 10       	push   0x1000b8a3	10005e01: R_386_32	.text
10005e05:	50                   	push   eax
10005e06:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005e09:	e8 fc ff ff ff       	call   10005e0a <begin(void*)+0x3b5>	10005e0a: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005e0e:	83 c4 10             	add    esp,0x10
10005e11:	83 ec 08             	sub    esp,0x8
10005e14:	68 69 b8 00 10       	push   0x1000b869	10005e15: R_386_32	.text
10005e19:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005e1c:	e8 fc ff ff ff       	call   10005e1d <begin(void*)+0x3c8>	10005e1d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005e21:	83 c4 10             	add    esp,0x10
10005e24:	83 ec 08             	sub    esp,0x8
10005e27:	50                   	push   eax
10005e28:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005e2b:	e8 fc ff ff ff       	call   10005e2c <begin(void*)+0x3d7>	10005e2c: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005e30:	83 c4 10             	add    esp,0x10
10005e33:	83 ec 04             	sub    esp,0x4
10005e36:	68 a9 b8 00 10       	push   0x1000b8a9	10005e37: R_386_32	.text
10005e3b:	50                   	push   eax
10005e3c:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005e3f:	e8 fc ff ff ff       	call   10005e40 <begin(void*)+0x3eb>	10005e40: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005e44:	83 c4 10             	add    esp,0x10
10005e47:	83 ec 08             	sub    esp,0x8
10005e4a:	68 69 b8 00 10       	push   0x1000b869	10005e4b: R_386_32	.text
10005e4f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005e52:	e8 fc ff ff ff       	call   10005e53 <begin(void*)+0x3fe>	10005e53: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005e57:	83 c4 10             	add    esp,0x10
10005e5a:	83 ec 08             	sub    esp,0x8
10005e5d:	50                   	push   eax
10005e5e:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005e61:	e8 fc ff ff ff       	call   10005e62 <begin(void*)+0x40d>	10005e62: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005e66:	83 c4 10             	add    esp,0x10
10005e69:	83 ec 04             	sub    esp,0x4
10005e6c:	68 ae b8 00 10       	push   0x1000b8ae	10005e6d: R_386_32	.text
10005e71:	50                   	push   eax
10005e72:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005e75:	e8 fc ff ff ff       	call   10005e76 <begin(void*)+0x421>	10005e76: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005e7a:	83 c4 10             	add    esp,0x10
10005e7d:	83 ec 08             	sub    esp,0x8
10005e80:	68 69 b8 00 10       	push   0x1000b869	10005e81: R_386_32	.text
10005e85:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005e88:	e8 fc ff ff ff       	call   10005e89 <begin(void*)+0x434>	10005e89: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005e8d:	83 c4 10             	add    esp,0x10
10005e90:	83 ec 08             	sub    esp,0x8
10005e93:	50                   	push   eax
10005e94:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005e97:	e8 fc ff ff ff       	call   10005e98 <begin(void*)+0x443>	10005e98: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005e9c:	83 c4 10             	add    esp,0x10
10005e9f:	83 ec 04             	sub    esp,0x4
10005ea2:	68 b3 b8 00 10       	push   0x1000b8b3	10005ea3: R_386_32	.text
10005ea7:	50                   	push   eax
10005ea8:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005eab:	e8 fc ff ff ff       	call   10005eac <begin(void*)+0x457>	10005eac: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005eb0:	83 c4 10             	add    esp,0x10
10005eb3:	83 ec 08             	sub    esp,0x8
10005eb6:	68 69 b8 00 10       	push   0x1000b869	10005eb7: R_386_32	.text
10005ebb:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005ebe:	e8 fc ff ff ff       	call   10005ebf <begin(void*)+0x46a>	10005ebf: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005ec3:	83 c4 10             	add    esp,0x10
10005ec6:	83 ec 08             	sub    esp,0x8
10005ec9:	50                   	push   eax
10005eca:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005ecd:	e8 fc ff ff ff       	call   10005ece <begin(void*)+0x479>	10005ece: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005ed2:	83 c4 10             	add    esp,0x10
10005ed5:	83 ec 04             	sub    esp,0x4
10005ed8:	68 b9 b8 00 10       	push   0x1000b8b9	10005ed9: R_386_32	.text
10005edd:	50                   	push   eax
10005ede:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005ee1:	e8 fc ff ff ff       	call   10005ee2 <begin(void*)+0x48d>	10005ee2: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005ee6:	83 c4 10             	add    esp,0x10
10005ee9:	83 ec 08             	sub    esp,0x8
10005eec:	68 c3 b8 00 10       	push   0x1000b8c3	10005eed: R_386_32	.text
10005ef1:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005ef4:	e8 fc ff ff ff       	call   10005ef5 <begin(void*)+0x4a0>	10005ef5: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005ef9:	83 c4 10             	add    esp,0x10
10005efc:	83 ec 08             	sub    esp,0x8
10005eff:	50                   	push   eax
10005f00:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005f03:	e8 fc ff ff ff       	call   10005f04 <begin(void*)+0x4af>	10005f04: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005f08:	83 c4 10             	add    esp,0x10
10005f0b:	83 ec 04             	sub    esp,0x4
10005f0e:	68 d4 b8 00 10       	push   0x1000b8d4	10005f0f: R_386_32	.text
10005f13:	50                   	push   eax
10005f14:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005f17:	e8 fc ff ff ff       	call   10005f18 <begin(void*)+0x4c3>	10005f18: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005f1c:	83 c4 10             	add    esp,0x10
10005f1f:	83 ec 08             	sub    esp,0x8
10005f22:	68 c3 b8 00 10       	push   0x1000b8c3	10005f23: R_386_32	.text
10005f27:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005f2a:	e8 fc ff ff ff       	call   10005f2b <begin(void*)+0x4d6>	10005f2b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005f2f:	83 c4 10             	add    esp,0x10
10005f32:	83 ec 08             	sub    esp,0x8
10005f35:	50                   	push   eax
10005f36:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005f39:	e8 fc ff ff ff       	call   10005f3a <begin(void*)+0x4e5>	10005f3a: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005f3e:	83 c4 10             	add    esp,0x10
10005f41:	83 ec 04             	sub    esp,0x4
10005f44:	68 d9 b8 00 10       	push   0x1000b8d9	10005f45: R_386_32	.text
10005f49:	50                   	push   eax
10005f4a:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005f4d:	e8 fc ff ff ff       	call   10005f4e <begin(void*)+0x4f9>	10005f4e: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005f52:	83 c4 10             	add    esp,0x10
10005f55:	83 ec 08             	sub    esp,0x8
10005f58:	68 c3 b8 00 10       	push   0x1000b8c3	10005f59: R_386_32	.text
10005f5d:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005f60:	e8 fc ff ff ff       	call   10005f61 <begin(void*)+0x50c>	10005f61: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005f65:	83 c4 10             	add    esp,0x10
10005f68:	83 ec 08             	sub    esp,0x8
10005f6b:	50                   	push   eax
10005f6c:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005f6f:	e8 fc ff ff ff       	call   10005f70 <begin(void*)+0x51b>	10005f70: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005f74:	83 c4 10             	add    esp,0x10
10005f77:	83 ec 04             	sub    esp,0x4
10005f7a:	68 de b8 00 10       	push   0x1000b8de	10005f7b: R_386_32	.text
10005f7f:	50                   	push   eax
10005f80:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005f83:	e8 fc ff ff ff       	call   10005f84 <begin(void*)+0x52f>	10005f84: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005f88:	83 c4 10             	add    esp,0x10
10005f8b:	83 ec 08             	sub    esp,0x8
10005f8e:	68 c3 b8 00 10       	push   0x1000b8c3	10005f8f: R_386_32	.text
10005f93:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005f96:	e8 fc ff ff ff       	call   10005f97 <begin(void*)+0x542>	10005f97: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005f9b:	83 c4 10             	add    esp,0x10
10005f9e:	83 ec 08             	sub    esp,0x8
10005fa1:	50                   	push   eax
10005fa2:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005fa5:	e8 fc ff ff ff       	call   10005fa6 <begin(void*)+0x551>	10005fa6: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005faa:	83 c4 10             	add    esp,0x10
10005fad:	83 ec 04             	sub    esp,0x4
10005fb0:	68 e4 b8 00 10       	push   0x1000b8e4	10005fb1: R_386_32	.text
10005fb5:	50                   	push   eax
10005fb6:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005fb9:	e8 fc ff ff ff       	call   10005fba <begin(void*)+0x565>	10005fba: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005fbe:	83 c4 10             	add    esp,0x10
10005fc1:	83 ec 08             	sub    esp,0x8
10005fc4:	68 c3 b8 00 10       	push   0x1000b8c3	10005fc5: R_386_32	.text
10005fc9:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005fcc:	e8 fc ff ff ff       	call   10005fcd <begin(void*)+0x578>	10005fcd: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005fd1:	83 c4 10             	add    esp,0x10
10005fd4:	83 ec 08             	sub    esp,0x8
10005fd7:	50                   	push   eax
10005fd8:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005fdb:	e8 fc ff ff ff       	call   10005fdc <begin(void*)+0x587>	10005fdc: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005fe0:	83 c4 10             	add    esp,0x10
10005fe3:	83 ec 04             	sub    esp,0x4
10005fe6:	68 e9 b8 00 10       	push   0x1000b8e9	10005fe7: R_386_32	.text
10005feb:	50                   	push   eax
10005fec:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005fef:	e8 fc ff ff ff       	call   10005ff0 <begin(void*)+0x59b>	10005ff0: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005ff4:	83 c4 10             	add    esp,0x10
10005ff7:	83 ec 08             	sub    esp,0x8
10005ffa:	68 c3 b8 00 10       	push   0x1000b8c3	10005ffb: R_386_32	.text
10005fff:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006002:	e8 fc ff ff ff       	call   10006003 <begin(void*)+0x5ae>	10006003: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006007:	83 c4 10             	add    esp,0x10
1000600a:	83 ec 08             	sub    esp,0x8
1000600d:	50                   	push   eax
1000600e:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006011:	e8 fc ff ff ff       	call   10006012 <begin(void*)+0x5bd>	10006012: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006016:	83 c4 10             	add    esp,0x10
10006019:	83 ec 04             	sub    esp,0x4
1000601c:	68 ef b8 00 10       	push   0x1000b8ef	1000601d: R_386_32	.text
10006021:	50                   	push   eax
10006022:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006025:	e8 fc ff ff ff       	call   10006026 <begin(void*)+0x5d1>	10006026: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000602a:	83 c4 10             	add    esp,0x10
1000602d:	83 ec 08             	sub    esp,0x8
10006030:	68 c3 b8 00 10       	push   0x1000b8c3	10006031: R_386_32	.text
10006035:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006038:	e8 fc ff ff ff       	call   10006039 <begin(void*)+0x5e4>	10006039: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000603d:	83 c4 10             	add    esp,0x10
10006040:	83 ec 08             	sub    esp,0x8
10006043:	50                   	push   eax
10006044:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006047:	e8 fc ff ff ff       	call   10006048 <begin(void*)+0x5f3>	10006048: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000604c:	83 c4 10             	add    esp,0x10
1000604f:	83 ec 04             	sub    esp,0x4
10006052:	68 fa b8 00 10       	push   0x1000b8fa	10006053: R_386_32	.text
10006057:	50                   	push   eax
10006058:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000605b:	e8 fc ff ff ff       	call   1000605c <begin(void*)+0x607>	1000605c: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10006060:	83 c4 10             	add    esp,0x10
10006063:	83 ec 08             	sub    esp,0x8
10006066:	68 05 b9 00 10       	push   0x1000b905	10006067: R_386_32	.text
1000606b:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000606e:	e8 fc ff ff ff       	call   1000606f <begin(void*)+0x61a>	1000606f: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006073:	83 c4 10             	add    esp,0x10
10006076:	83 ec 08             	sub    esp,0x8
10006079:	50                   	push   eax
1000607a:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000607d:	e8 fc ff ff ff       	call   1000607e <begin(void*)+0x629>	1000607e: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006082:	83 c4 10             	add    esp,0x10
10006085:	83 ec 04             	sub    esp,0x4
10006088:	68 11 b9 00 10       	push   0x1000b911	10006089: R_386_32	.text
1000608d:	50                   	push   eax
1000608e:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006091:	e8 fc ff ff ff       	call   10006092 <begin(void*)+0x63d>	10006092: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10006096:	83 c4 10             	add    esp,0x10
10006099:	83 ec 08             	sub    esp,0x8
1000609c:	68 1a b9 00 10       	push   0x1000b91a	1000609d: R_386_32	.text
100060a1:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100060a4:	e8 fc ff ff ff       	call   100060a5 <begin(void*)+0x650>	100060a5: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100060a9:	83 c4 10             	add    esp,0x10
100060ac:	83 ec 08             	sub    esp,0x8
100060af:	50                   	push   eax
100060b0:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100060b3:	e8 fc ff ff ff       	call   100060b4 <begin(void*)+0x65f>	100060b4: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100060b8:	83 c4 10             	add    esp,0x10
100060bb:	83 ec 04             	sub    esp,0x4
100060be:	68 27 b9 00 10       	push   0x1000b927	100060bf: R_386_32	.text
100060c3:	50                   	push   eax
100060c4:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100060c7:	e8 fc ff ff ff       	call   100060c8 <begin(void*)+0x673>	100060c8: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100060cc:	83 c4 10             	add    esp,0x10
100060cf:	83 ec 08             	sub    esp,0x8
100060d2:	68 1a b9 00 10       	push   0x1000b91a	100060d3: R_386_32	.text
100060d7:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100060da:	e8 fc ff ff ff       	call   100060db <begin(void*)+0x686>	100060db: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100060df:	83 c4 10             	add    esp,0x10
100060e2:	83 ec 08             	sub    esp,0x8
100060e5:	50                   	push   eax
100060e6:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100060e9:	e8 fc ff ff ff       	call   100060ea <begin(void*)+0x695>	100060ea: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100060ee:	83 c4 10             	add    esp,0x10
100060f1:	83 ec 04             	sub    esp,0x4
100060f4:	68 2c b9 00 10       	push   0x1000b92c	100060f5: R_386_32	.text
100060f9:	50                   	push   eax
100060fa:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100060fd:	e8 fc ff ff ff       	call   100060fe <begin(void*)+0x6a9>	100060fe: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10006102:	83 c4 10             	add    esp,0x10
10006105:	83 ec 08             	sub    esp,0x8
10006108:	68 1a b9 00 10       	push   0x1000b91a	10006109: R_386_32	.text
1000610d:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006110:	e8 fc ff ff ff       	call   10006111 <begin(void*)+0x6bc>	10006111: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006115:	83 c4 10             	add    esp,0x10
10006118:	83 ec 08             	sub    esp,0x8
1000611b:	50                   	push   eax
1000611c:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000611f:	e8 fc ff ff ff       	call   10006120 <begin(void*)+0x6cb>	10006120: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006124:	83 c4 10             	add    esp,0x10
10006127:	83 ec 04             	sub    esp,0x4
1000612a:	68 34 b9 00 10       	push   0x1000b934	1000612b: R_386_32	.text
1000612f:	50                   	push   eax
10006130:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006133:	e8 fc ff ff ff       	call   10006134 <begin(void*)+0x6df>	10006134: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10006138:	83 c4 10             	add    esp,0x10
1000613b:	83 ec 08             	sub    esp,0x8
1000613e:	68 3f b9 00 10       	push   0x1000b93f	1000613f: R_386_32	.text
10006143:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006146:	e8 fc ff ff ff       	call   10006147 <begin(void*)+0x6f2>	10006147: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000614b:	83 c4 10             	add    esp,0x10
1000614e:	83 ec 08             	sub    esp,0x8
10006151:	50                   	push   eax
10006152:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006155:	e8 fc ff ff ff       	call   10006156 <begin(void*)+0x701>	10006156: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000615a:	83 c4 10             	add    esp,0x10
1000615d:	83 ec 04             	sub    esp,0x4
10006160:	8d 95 48 ff ff ff    	lea    edx,[ebp-0xb8]
10006166:	52                   	push   edx
10006167:	50                   	push   eax
10006168:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000616b:	e8 fc ff ff ff       	call   1000616c <begin(void*)+0x717>	1000616c: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10006170:	83 c4 10             	add    esp,0x10
10006173:	83 ec 08             	sub    esp,0x8
10006176:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
1000617c:	50                   	push   eax
1000617d:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006180:	e8 fc ff ff ff       	call   10006181 <begin(void*)+0x72c>	10006181: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006185:	83 c4 10             	add    esp,0x10
10006188:	83 ec 08             	sub    esp,0x8
1000618b:	50                   	push   eax
1000618c:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000618f:	e8 fc ff ff ff       	call   10006190 <begin(void*)+0x73b>	10006190: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006194:	83 c4 10             	add    esp,0x10
10006197:	83 ec 04             	sub    esp,0x4
1000619a:	68 4c b9 00 10       	push   0x1000b94c	1000619b: R_386_32	.text
1000619f:	50                   	push   eax
100061a0:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100061a3:	e8 fc ff ff ff       	call   100061a4 <begin(void*)+0x74f>	100061a4: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100061a8:	83 c4 10             	add    esp,0x10
100061ab:	83 ec 08             	sub    esp,0x8
100061ae:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100061b4:	50                   	push   eax
100061b5:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100061b8:	e8 fc ff ff ff       	call   100061b9 <begin(void*)+0x764>	100061b9: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100061bd:	83 c4 10             	add    esp,0x10
100061c0:	83 ec 08             	sub    esp,0x8
100061c3:	50                   	push   eax
100061c4:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100061c7:	e8 fc ff ff ff       	call   100061c8 <begin(void*)+0x773>	100061c8: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100061cc:	83 c4 10             	add    esp,0x10
100061cf:	83 ec 04             	sub    esp,0x4
100061d2:	68 51 b9 00 10       	push   0x1000b951	100061d3: R_386_32	.text
100061d7:	50                   	push   eax
100061d8:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100061db:	e8 fc ff ff ff       	call   100061dc <begin(void*)+0x787>	100061dc: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100061e0:	83 c4 10             	add    esp,0x10
100061e3:	83 ec 08             	sub    esp,0x8
100061e6:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100061ec:	50                   	push   eax
100061ed:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100061f0:	e8 fc ff ff ff       	call   100061f1 <begin(void*)+0x79c>	100061f1: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100061f5:	83 c4 10             	add    esp,0x10
100061f8:	83 ec 08             	sub    esp,0x8
100061fb:	50                   	push   eax
100061fc:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100061ff:	e8 fc ff ff ff       	call   10006200 <begin(void*)+0x7ab>	10006200: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006204:	83 c4 10             	add    esp,0x10
10006207:	83 ec 04             	sub    esp,0x4
1000620a:	68 5a b9 00 10       	push   0x1000b95a	1000620b: R_386_32	.text
1000620f:	50                   	push   eax
10006210:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006213:	e8 fc ff ff ff       	call   10006214 <begin(void*)+0x7bf>	10006214: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10006218:	83 c4 10             	add    esp,0x10
1000621b:	83 ec 08             	sub    esp,0x8
1000621e:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006224:	50                   	push   eax
10006225:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006228:	e8 fc ff ff ff       	call   10006229 <begin(void*)+0x7d4>	10006229: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000622d:	83 c4 10             	add    esp,0x10
10006230:	83 ec 08             	sub    esp,0x8
10006233:	50                   	push   eax
10006234:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006237:	e8 fc ff ff ff       	call   10006238 <begin(void*)+0x7e3>	10006238: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000623c:	83 c4 10             	add    esp,0x10
1000623f:	83 ec 04             	sub    esp,0x4
10006242:	68 66 b9 00 10       	push   0x1000b966	10006243: R_386_32	.text
10006247:	50                   	push   eax
10006248:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000624b:	e8 fc ff ff ff       	call   1000624c <begin(void*)+0x7f7>	1000624c: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10006250:	83 c4 10             	add    esp,0x10
10006253:	83 ec 08             	sub    esp,0x8
10006256:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
1000625c:	50                   	push   eax
1000625d:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006260:	e8 fc ff ff ff       	call   10006261 <begin(void*)+0x80c>	10006261: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006265:	83 c4 10             	add    esp,0x10
10006268:	83 ec 08             	sub    esp,0x8
1000626b:	50                   	push   eax
1000626c:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000626f:	e8 fc ff ff ff       	call   10006270 <begin(void*)+0x81b>	10006270: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006274:	83 c4 10             	add    esp,0x10
10006277:	83 ec 04             	sub    esp,0x4
1000627a:	68 6e b9 00 10       	push   0x1000b96e	1000627b: R_386_32	.text
1000627f:	50                   	push   eax
10006280:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006283:	e8 fc ff ff ff       	call   10006284 <begin(void*)+0x82f>	10006284: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10006288:	83 c4 10             	add    esp,0x10
1000628b:	83 ec 08             	sub    esp,0x8
1000628e:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006294:	50                   	push   eax
10006295:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006298:	e8 fc ff ff ff       	call   10006299 <begin(void*)+0x844>	10006299: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000629d:	83 c4 10             	add    esp,0x10
100062a0:	83 ec 08             	sub    esp,0x8
100062a3:	50                   	push   eax
100062a4:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100062a7:	e8 fc ff ff ff       	call   100062a8 <begin(void*)+0x853>	100062a8: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100062ac:	83 c4 10             	add    esp,0x10
100062af:	83 ec 04             	sub    esp,0x4
100062b2:	68 78 b9 00 10       	push   0x1000b978	100062b3: R_386_32	.text
100062b7:	50                   	push   eax
100062b8:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100062bb:	e8 fc ff ff ff       	call   100062bc <begin(void*)+0x867>	100062bc: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100062c0:	83 c4 10             	add    esp,0x10
100062c3:	83 ec 08             	sub    esp,0x8
100062c6:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100062cc:	50                   	push   eax
100062cd:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100062d0:	e8 fc ff ff ff       	call   100062d1 <begin(void*)+0x87c>	100062d1: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100062d5:	83 c4 10             	add    esp,0x10
100062d8:	83 ec 08             	sub    esp,0x8
100062db:	50                   	push   eax
100062dc:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100062df:	e8 fc ff ff ff       	call   100062e0 <begin(void*)+0x88b>	100062e0: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100062e4:	83 c4 10             	add    esp,0x10
100062e7:	83 ec 04             	sub    esp,0x4
100062ea:	68 82 b9 00 10       	push   0x1000b982	100062eb: R_386_32	.text
100062ef:	50                   	push   eax
100062f0:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100062f3:	e8 fc ff ff ff       	call   100062f4 <begin(void*)+0x89f>	100062f4: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100062f8:	83 c4 10             	add    esp,0x10
100062fb:	83 ec 08             	sub    esp,0x8
100062fe:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006304:	50                   	push   eax
10006305:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006308:	e8 fc ff ff ff       	call   10006309 <begin(void*)+0x8b4>	10006309: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000630d:	83 c4 10             	add    esp,0x10
10006310:	83 ec 08             	sub    esp,0x8
10006313:	50                   	push   eax
10006314:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006317:	e8 fc ff ff ff       	call   10006318 <begin(void*)+0x8c3>	10006318: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000631c:	83 c4 10             	add    esp,0x10
1000631f:	83 ec 04             	sub    esp,0x4
10006322:	68 8b b9 00 10       	push   0x1000b98b	10006323: R_386_32	.text
10006327:	50                   	push   eax
10006328:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000632b:	e8 fc ff ff ff       	call   1000632c <begin(void*)+0x8d7>	1000632c: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10006330:	83 c4 10             	add    esp,0x10
10006333:	83 ec 08             	sub    esp,0x8
10006336:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
1000633c:	50                   	push   eax
1000633d:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006340:	e8 fc ff ff ff       	call   10006341 <begin(void*)+0x8ec>	10006341: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006345:	83 c4 10             	add    esp,0x10
10006348:	83 ec 08             	sub    esp,0x8
1000634b:	50                   	push   eax
1000634c:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000634f:	e8 fc ff ff ff       	call   10006350 <begin(void*)+0x8fb>	10006350: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006354:	83 c4 10             	add    esp,0x10
10006357:	83 ec 04             	sub    esp,0x4
1000635a:	68 92 b9 00 10       	push   0x1000b992	1000635b: R_386_32	.text
1000635f:	50                   	push   eax
10006360:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006363:	e8 fc ff ff ff       	call   10006364 <begin(void*)+0x90f>	10006364: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10006368:	83 c4 10             	add    esp,0x10
1000636b:	83 ec 08             	sub    esp,0x8
1000636e:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006374:	50                   	push   eax
10006375:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006378:	e8 fc ff ff ff       	call   10006379 <begin(void*)+0x924>	10006379: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000637d:	83 c4 10             	add    esp,0x10
10006380:	83 ec 08             	sub    esp,0x8
10006383:	50                   	push   eax
10006384:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006387:	e8 fc ff ff ff       	call   10006388 <begin(void*)+0x933>	10006388: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000638c:	83 c4 10             	add    esp,0x10
1000638f:	83 ec 04             	sub    esp,0x4
10006392:	68 98 b9 00 10       	push   0x1000b998	10006393: R_386_32	.text
10006397:	50                   	push   eax
10006398:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000639b:	e8 fc ff ff ff       	call   1000639c <begin(void*)+0x947>	1000639c: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100063a0:	83 c4 10             	add    esp,0x10
100063a3:	a0 00 00 00 00       	mov    al,ds:0x0	100063a4: R_386_32	createNewUserMode
100063a8:	83 f0 01             	xor    eax,0x1
100063ab:	84 c0                	test   al,al
100063ad:	0f 84 be 03 00 00    	je     10006771 <begin(void*)+0xd1c>
100063b3:	a1 00 00 00 00       	mov    eax,ds:0x0	100063b4: R_386_32	modesel
100063b8:	89 c3                	mov    ebx,eax
100063ba:	89 c6                	mov    esi,eax
100063bc:	c1 fe 1f             	sar    esi,0x1f
100063bf:	83 ec 08             	sub    esp,0x8
100063c2:	68 a3 b9 00 10       	push   0x1000b9a3	100063c3: R_386_32	.text
100063c7:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100063ca:	e8 fc ff ff ff       	call   100063cb <begin(void*)+0x976>	100063cb: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100063cf:	83 c4 10             	add    esp,0x10
100063d2:	83 ec 08             	sub    esp,0x8
100063d5:	50                   	push   eax
100063d6:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100063d9:	e8 fc ff ff ff       	call   100063da <begin(void*)+0x985>	100063da: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100063de:	83 c4 10             	add    esp,0x10
100063e1:	83 ec 08             	sub    esp,0x8
100063e4:	6a 6a                	push   0x6a
100063e6:	56                   	push   esi
100063e7:	53                   	push   ebx
100063e8:	68 af b9 00 10       	push   0x1000b9af	100063e9: R_386_32	.text
100063ed:	50                   	push   eax
100063ee:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100063f1:	e8 fc ff ff ff       	call   100063f2 <begin(void*)+0x99d>	100063f2: R_386_PC32	CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)
100063f6:	83 c4 20             	add    esp,0x20
100063f9:	a1 00 00 00 00       	mov    eax,ds:0x0	100063fa: R_386_32	tzsel
100063fe:	89 c3                	mov    ebx,eax
10006400:	89 c6                	mov    esi,eax
10006402:	c1 fe 1f             	sar    esi,0x1f
10006405:	83 ec 08             	sub    esp,0x8
10006408:	68 05 b9 00 10       	push   0x1000b905	10006409: R_386_32	.text
1000640d:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006410:	e8 fc ff ff ff       	call   10006411 <begin(void*)+0x9bc>	10006411: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006415:	83 c4 10             	add    esp,0x10
10006418:	83 ec 08             	sub    esp,0x8
1000641b:	50                   	push   eax
1000641c:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000641f:	e8 fc ff ff ff       	call   10006420 <begin(void*)+0x9cb>	10006420: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006424:	83 c4 10             	add    esp,0x10
10006427:	83 ec 08             	sub    esp,0x8
1000642a:	6a 6a                	push   0x6a
1000642c:	56                   	push   esi
1000642d:	53                   	push   ebx
1000642e:	68 b7 b9 00 10       	push   0x1000b9b7	1000642f: R_386_32	.text
10006433:	50                   	push   eax
10006434:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006437:	e8 fc ff ff ff       	call   10006438 <begin(void*)+0x9e3>	10006438: R_386_PC32	CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)
1000643c:	83 c4 20             	add    esp,0x20
1000643f:	a1 00 00 00 00       	mov    eax,ds:0x0	10006440: R_386_32	tzsel
10006444:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10006447: R_386_32	timezoneStrings
1000644b:	8d 58 01             	lea    ebx,[eax+0x1]
1000644e:	83 ec 08             	sub    esp,0x8
10006451:	68 c2 b9 00 10       	push   0x1000b9c2	10006452: R_386_32	.text
10006456:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006459:	e8 fc ff ff ff       	call   1000645a <begin(void*)+0xa05>	1000645a: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000645e:	83 c4 10             	add    esp,0x10
10006461:	83 ec 04             	sub    esp,0x4
10006464:	53                   	push   ebx
10006465:	50                   	push   eax
10006466:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006469:	e8 fc ff ff ff       	call   1000646a <begin(void*)+0xa15>	1000646a: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
1000646e:	83 c4 10             	add    esp,0x10
10006471:	83 ec 08             	sub    esp,0x8
10006474:	68 d7 b9 00 10       	push   0x1000b9d7	10006475: R_386_32	.text
10006479:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000647c:	e8 fc ff ff ff       	call   1000647d <begin(void*)+0xa28>	1000647d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006481:	83 c4 10             	add    esp,0x10
10006484:	83 ec 04             	sub    esp,0x4
10006487:	68 00 00 00 00       	push   0x0	10006488: R_386_32	currName
1000648c:	50                   	push   eax
1000648d:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006490:	e8 fc ff ff ff       	call   10006491 <begin(void*)+0xa3c>	10006491: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006495:	83 c4 10             	add    esp,0x10
10006498:	83 ec 08             	sub    esp,0x8
1000649b:	68 e9 b9 00 10       	push   0x1000b9e9	1000649c: R_386_32	.text
100064a0:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100064a3:	e8 fc ff ff ff       	call   100064a4 <begin(void*)+0xa4f>	100064a4: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100064a8:	83 c4 10             	add    esp,0x10
100064ab:	83 ec 04             	sub    esp,0x4
100064ae:	68 00 00 00 00       	push   0x0	100064af: R_386_32	currComp
100064b3:	50                   	push   eax
100064b4:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100064b7:	e8 fc ff ff ff       	call   100064b8 <begin(void*)+0xa63>	100064b8: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100064bc:	83 c4 10             	add    esp,0x10
100064bf:	83 ec 08             	sub    esp,0x8
100064c2:	68 fe b9 00 10       	push   0x1000b9fe	100064c3: R_386_32	.text
100064c7:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100064ca:	e8 fc ff ff ff       	call   100064cb <begin(void*)+0xa76>	100064cb: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100064cf:	83 c4 10             	add    esp,0x10
100064d2:	83 ec 04             	sub    esp,0x4
100064d5:	68 00 00 00 00       	push   0x0	100064d6: R_386_32	pkeybuf
100064da:	50                   	push   eax
100064db:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100064de:	e8 fc ff ff ff       	call   100064df <begin(void*)+0xa8a>	100064df: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100064e3:	83 c4 10             	add    esp,0x10
100064e6:	83 ec 08             	sub    esp,0x8
100064e9:	68 16 ba 00 10       	push   0x1000ba16	100064ea: R_386_32	.text
100064ee:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100064f1:	e8 fc ff ff ff       	call   100064f2 <begin(void*)+0xa9d>	100064f2: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100064f6:	83 c4 10             	add    esp,0x10
100064f9:	83 ec 08             	sub    esp,0x8
100064fc:	50                   	push   eax
100064fd:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006500:	e8 fc ff ff ff       	call   10006501 <begin(void*)+0xaac>	10006501: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006505:	83 c4 10             	add    esp,0x10
10006508:	83 ec 04             	sub    esp,0x4
1000650b:	68 2c ba 00 10       	push   0x1000ba2c	1000650c: R_386_32	.text
10006510:	50                   	push   eax
10006511:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006514:	e8 fc ff ff ff       	call   10006515 <begin(void*)+0xac0>	10006515: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10006519:	83 c4 10             	add    esp,0x10
1000651c:	83 ec 08             	sub    esp,0x8
1000651f:	68 30 ba 00 10       	push   0x1000ba30	10006520: R_386_32	.text
10006524:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006527:	e8 fc ff ff ff       	call   10006528 <begin(void*)+0xad3>	10006528: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000652c:	83 c4 10             	add    esp,0x10
1000652f:	83 ec 08             	sub    esp,0x8
10006532:	50                   	push   eax
10006533:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006536:	e8 fc ff ff ff       	call   10006537 <begin(void*)+0xae2>	10006537: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000653b:	83 c4 10             	add    esp,0x10
1000653e:	83 ec 04             	sub    esp,0x4
10006541:	68 2c ba 00 10       	push   0x1000ba2c	10006542: R_386_32	.text
10006546:	50                   	push   eax
10006547:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000654a:	e8 fc ff ff ff       	call   1000654b <begin(void*)+0xaf6>	1000654b: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000654f:	83 c4 10             	add    esp,0x10
10006552:	83 ec 08             	sub    esp,0x8
10006555:	68 47 ba 00 10       	push   0x1000ba47	10006556: R_386_32	.text
1000655a:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000655d:	e8 fc ff ff ff       	call   1000655e <begin(void*)+0xb09>	1000655e: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006562:	83 c4 10             	add    esp,0x10
10006565:	83 ec 08             	sub    esp,0x8
10006568:	50                   	push   eax
10006569:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000656c:	e8 fc ff ff ff       	call   1000656d <begin(void*)+0xb18>	1000656d: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006571:	83 c4 10             	add    esp,0x10
10006574:	83 ec 04             	sub    esp,0x4
10006577:	68 2c ba 00 10       	push   0x1000ba2c	10006578: R_386_32	.text
1000657c:	50                   	push   eax
1000657d:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006580:	e8 fc ff ff ff       	call   10006581 <begin(void*)+0xb2c>	10006581: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10006585:	83 c4 10             	add    esp,0x10
10006588:	83 ec 08             	sub    esp,0x8
1000658b:	68 5d ba 00 10       	push   0x1000ba5d	1000658c: R_386_32	.text
10006590:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006593:	e8 fc ff ff ff       	call   10006594 <begin(void*)+0xb3f>	10006594: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006598:	83 c4 10             	add    esp,0x10
1000659b:	83 ec 08             	sub    esp,0x8
1000659e:	50                   	push   eax
1000659f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100065a2:	e8 fc ff ff ff       	call   100065a3 <begin(void*)+0xb4e>	100065a3: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100065a7:	83 c4 10             	add    esp,0x10
100065aa:	83 ec 04             	sub    esp,0x4
100065ad:	68 2c ba 00 10       	push   0x1000ba2c	100065ae: R_386_32	.text
100065b2:	50                   	push   eax
100065b3:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100065b6:	e8 fc ff ff ff       	call   100065b7 <begin(void*)+0xb62>	100065b7: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100065bb:	83 c4 10             	add    esp,0x10
100065be:	83 ec 08             	sub    esp,0x8
100065c1:	68 73 ba 00 10       	push   0x1000ba73	100065c2: R_386_32	.text
100065c6:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100065c9:	e8 fc ff ff ff       	call   100065ca <begin(void*)+0xb75>	100065ca: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100065ce:	83 c4 10             	add    esp,0x10
100065d1:	83 ec 08             	sub    esp,0x8
100065d4:	50                   	push   eax
100065d5:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100065d8:	e8 fc ff ff ff       	call   100065d9 <begin(void*)+0xb84>	100065d9: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100065dd:	83 c4 10             	add    esp,0x10
100065e0:	83 ec 04             	sub    esp,0x4
100065e3:	68 2c ba 00 10       	push   0x1000ba2c	100065e4: R_386_32	.text
100065e8:	50                   	push   eax
100065e9:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100065ec:	e8 fc ff ff ff       	call   100065ed <begin(void*)+0xb98>	100065ed: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100065f1:	83 c4 10             	add    esp,0x10
100065f4:	83 ec 08             	sub    esp,0x8
100065f7:	68 8a ba 00 10       	push   0x1000ba8a	100065f8: R_386_32	.text
100065fc:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100065ff:	e8 fc ff ff ff       	call   10006600 <begin(void*)+0xbab>	10006600: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006604:	83 c4 10             	add    esp,0x10
10006607:	83 ec 04             	sub    esp,0x4
1000660a:	68 a4 ba 00 10       	push   0x1000baa4	1000660b: R_386_32	.text
1000660f:	50                   	push   eax
10006610:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006613:	e8 fc ff ff ff       	call   10006614 <begin(void*)+0xbbf>	10006614: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006618:	83 c4 10             	add    esp,0x10
1000661b:	83 ec 08             	sub    esp,0x8
1000661e:	68 c4 ba 00 10       	push   0x1000bac4	1000661f: R_386_32	.text
10006623:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006626:	e8 fc ff ff ff       	call   10006627 <begin(void*)+0xbd2>	10006627: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000662b:	83 c4 10             	add    esp,0x10
1000662e:	83 ec 04             	sub    esp,0x4
10006631:	68 df ba 00 10       	push   0x1000badf	10006632: R_386_32	.text
10006636:	50                   	push   eax
10006637:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000663a:	e8 fc ff ff ff       	call   1000663b <begin(void*)+0xbe6>	1000663b: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
1000663f:	83 c4 10             	add    esp,0x10
10006642:	83 ec 08             	sub    esp,0x8
10006645:	68 ed ba 00 10       	push   0x1000baed	10006646: R_386_32	.text
1000664a:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000664d:	e8 fc ff ff ff       	call   1000664e <begin(void*)+0xbf9>	1000664e: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006652:	83 c4 10             	add    esp,0x10
10006655:	83 ec 04             	sub    esp,0x4
10006658:	68 07 bb 00 10       	push   0x1000bb07	10006659: R_386_32	.text
1000665d:	50                   	push   eax
1000665e:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006661:	e8 fc ff ff ff       	call   10006662 <begin(void*)+0xc0d>	10006662: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006666:	83 c4 10             	add    esp,0x10
10006669:	83 ec 08             	sub    esp,0x8
1000666c:	68 1f bb 00 10       	push   0x1000bb1f	1000666d: R_386_32	.text
10006671:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006674:	e8 fc ff ff ff       	call   10006675 <begin(void*)+0xc20>	10006675: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006679:	83 c4 10             	add    esp,0x10
1000667c:	83 ec 04             	sub    esp,0x4
1000667f:	68 07 bb 00 10       	push   0x1000bb07	10006680: R_386_32	.text
10006684:	50                   	push   eax
10006685:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006688:	e8 fc ff ff ff       	call   10006689 <begin(void*)+0xc34>	10006689: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
1000668d:	83 c4 10             	add    esp,0x10
10006690:	83 ec 08             	sub    esp,0x8
10006693:	68 39 bb 00 10       	push   0x1000bb39	10006694: R_386_32	.text
10006698:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000669b:	e8 fc ff ff ff       	call   1000669c <begin(void*)+0xc47>	1000669c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100066a0:	83 c4 10             	add    esp,0x10
100066a3:	83 ec 04             	sub    esp,0x4
100066a6:	68 07 bb 00 10       	push   0x1000bb07	100066a7: R_386_32	.text
100066ab:	50                   	push   eax
100066ac:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100066af:	e8 fc ff ff ff       	call   100066b0 <begin(void*)+0xc5b>	100066b0: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100066b4:	83 c4 10             	add    esp,0x10
100066b7:	83 ec 08             	sub    esp,0x8
100066ba:	68 16 ba 00 10       	push   0x1000ba16	100066bb: R_386_32	.text
100066bf:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100066c2:	e8 fc ff ff ff       	call   100066c3 <begin(void*)+0xc6e>	100066c3: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100066c7:	83 c4 10             	add    esp,0x10
100066ca:	83 ec 08             	sub    esp,0x8
100066cd:	50                   	push   eax
100066ce:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100066d1:	e8 fc ff ff ff       	call   100066d2 <begin(void*)+0xc7d>	100066d2: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100066d6:	83 c4 10             	add    esp,0x10
100066d9:	83 ec 04             	sub    esp,0x4
100066dc:	68 54 bb 00 10       	push   0x1000bb54	100066dd: R_386_32	.text
100066e1:	50                   	push   eax
100066e2:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100066e5:	e8 fc ff ff ff       	call   100066e6 <begin(void*)+0xc91>	100066e6: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100066ea:	83 c4 10             	add    esp,0x10
100066ed:	83 ec 08             	sub    esp,0x8
100066f0:	68 30 ba 00 10       	push   0x1000ba30	100066f1: R_386_32	.text
100066f5:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100066f8:	e8 fc ff ff ff       	call   100066f9 <begin(void*)+0xca4>	100066f9: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100066fd:	83 c4 10             	add    esp,0x10
10006700:	83 ec 08             	sub    esp,0x8
10006703:	50                   	push   eax
10006704:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006707:	e8 fc ff ff ff       	call   10006708 <begin(void*)+0xcb3>	10006708: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000670c:	83 c4 10             	add    esp,0x10
1000670f:	83 ec 04             	sub    esp,0x4
10006712:	68 54 bb 00 10       	push   0x1000bb54	10006713: R_386_32	.text
10006717:	50                   	push   eax
10006718:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000671b:	e8 fc ff ff ff       	call   1000671c <begin(void*)+0xcc7>	1000671c: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10006720:	83 c4 10             	add    esp,0x10
10006723:	83 ec 08             	sub    esp,0x8
10006726:	68 58 bb 00 10       	push   0x1000bb58	10006727: R_386_32	.text
1000672b:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000672e:	e8 fc ff ff ff       	call   1000672f <begin(void*)+0xcda>	1000672f: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006733:	83 c4 10             	add    esp,0x10
10006736:	83 ec 04             	sub    esp,0x4
10006739:	68 72 bb 00 10       	push   0x1000bb72	1000673a: R_386_32	.text
1000673e:	50                   	push   eax
1000673f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006742:	e8 fc ff ff ff       	call   10006743 <begin(void*)+0xcee>	10006743: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006747:	83 c4 10             	add    esp,0x10
1000674a:	83 ec 08             	sub    esp,0x8
1000674d:	68 90 bb 00 10       	push   0x1000bb90	1000674e: R_386_32	.text
10006752:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006755:	e8 fc ff ff ff       	call   10006756 <begin(void*)+0xd01>	10006756: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000675a:	83 c4 10             	add    esp,0x10
1000675d:	83 ec 04             	sub    esp,0x4
10006760:	68 ab bb 00 10       	push   0x1000bbab	10006761: R_386_32	.text
10006765:	50                   	push   eax
10006766:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006769:	e8 fc ff ff ff       	call   1000676a <begin(void*)+0xd15>	1000676a: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
1000676e:	83 c4 10             	add    esp,0x10
10006771:	83 ec 08             	sub    esp,0x8
10006774:	68 82 b8 00 10       	push   0x1000b882	10006775: R_386_32	.text
10006779:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
1000677f:	50                   	push   eax
10006780:	e8 fc ff ff ff       	call   10006781 <begin(void*)+0xd2c>	10006781: R_386_PC32	strcpy
10006785:	83 c4 10             	add    esp,0x10
10006788:	83 ec 08             	sub    esp,0x8
1000678b:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006791:	50                   	push   eax
10006792:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006798:	50                   	push   eax
10006799:	e8 fc ff ff ff       	call   1000679a <begin(void*)+0xd45>	1000679a: R_386_PC32	strcat
1000679e:	83 c4 10             	add    esp,0x10
100067a1:	83 ec 08             	sub    esp,0x8
100067a4:	68 bb bb 00 10       	push   0x1000bbbb	100067a5: R_386_32	.text
100067a9:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100067af:	50                   	push   eax
100067b0:	e8 fc ff ff ff       	call   100067b1 <begin(void*)+0xd5c>	100067b1: R_386_PC32	strcat
100067b5:	83 c4 10             	add    esp,0x10
100067b8:	83 ec 08             	sub    esp,0x8
100067bb:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100067c1:	50                   	push   eax
100067c2:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100067c5:	e8 fc ff ff ff       	call   100067c6 <begin(void*)+0xd71>	100067c6: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100067ca:	83 c4 10             	add    esp,0x10
100067cd:	83 ec 04             	sub    esp,0x4
100067d0:	68 00 00 00 00       	push   0x0	100067d1: R_386_32	passwhash
100067d5:	50                   	push   eax
100067d6:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100067d9:	e8 fc ff ff ff       	call   100067da <begin(void*)+0xd85>	100067da: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100067de:	83 c4 10             	add    esp,0x10
100067e1:	83 ec 08             	sub    esp,0x8
100067e4:	68 82 b8 00 10       	push   0x1000b882	100067e5: R_386_32	.text
100067e9:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100067ef:	50                   	push   eax
100067f0:	e8 fc ff ff ff       	call   100067f1 <begin(void*)+0xd9c>	100067f1: R_386_PC32	strcpy
100067f5:	83 c4 10             	add    esp,0x10
100067f8:	83 ec 08             	sub    esp,0x8
100067fb:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006801:	50                   	push   eax
10006802:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006808:	50                   	push   eax
10006809:	e8 fc ff ff ff       	call   1000680a <begin(void*)+0xdb5>	1000680a: R_386_PC32	strcat
1000680e:	83 c4 10             	add    esp,0x10
10006811:	83 ec 08             	sub    esp,0x8
10006814:	68 c5 bb 00 10       	push   0x1000bbc5	10006815: R_386_32	.text
10006819:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
1000681f:	50                   	push   eax
10006820:	e8 fc ff ff ff       	call   10006821 <begin(void*)+0xdcc>	10006821: R_386_PC32	strcat
10006825:	83 c4 10             	add    esp,0x10
10006828:	83 ec 08             	sub    esp,0x8
1000682b:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006831:	50                   	push   eax
10006832:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006835:	e8 fc ff ff ff       	call   10006836 <begin(void*)+0xde1>	10006836: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000683a:	83 c4 10             	add    esp,0x10
1000683d:	83 ec 04             	sub    esp,0x4
10006840:	68 00 00 00 00       	push   0x0	10006841: R_386_32	passwsalt
10006845:	50                   	push   eax
10006846:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006849:	e8 fc ff ff ff       	call   1000684a <begin(void*)+0xdf5>	1000684a: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
1000684e:	83 c4 10             	add    esp,0x10
10006851:	83 ec 08             	sub    esp,0x8
10006854:	68 82 b8 00 10       	push   0x1000b882	10006855: R_386_32	.text
10006859:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
1000685f:	50                   	push   eax
10006860:	e8 fc ff ff ff       	call   10006861 <begin(void*)+0xe0c>	10006861: R_386_PC32	strcpy
10006865:	83 c4 10             	add    esp,0x10
10006868:	83 ec 08             	sub    esp,0x8
1000686b:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006871:	50                   	push   eax
10006872:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006878:	50                   	push   eax
10006879:	e8 fc ff ff ff       	call   1000687a <begin(void*)+0xe25>	1000687a: R_386_PC32	strcat
1000687e:	83 c4 10             	add    esp,0x10
10006881:	83 ec 08             	sub    esp,0x8
10006884:	68 cb bb 00 10       	push   0x1000bbcb	10006885: R_386_32	.text
10006889:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
1000688f:	50                   	push   eax
10006890:	e8 fc ff ff ff       	call   10006891 <begin(void*)+0xe3c>	10006891: R_386_PC32	strcat
10006895:	83 c4 10             	add    esp,0x10
10006898:	83 ec 08             	sub    esp,0x8
1000689b:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100068a1:	50                   	push   eax
100068a2:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100068a5:	e8 fc ff ff ff       	call   100068a6 <begin(void*)+0xe51>	100068a6: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100068aa:	83 c4 10             	add    esp,0x10
100068ad:	83 ec 04             	sub    esp,0x4
100068b0:	68 00 00 00 00       	push   0x0	100068b1: R_386_32	currName
100068b5:	50                   	push   eax
100068b6:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100068b9:	e8 fc ff ff ff       	call   100068ba <begin(void*)+0xe65>	100068ba: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100068be:	83 c4 10             	add    esp,0x10
100068c1:	83 ec 08             	sub    esp,0x8
100068c4:	68 d6 af 00 10       	push   0x1000afd6	100068c5: R_386_32	.text
100068c9:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
100068cf:	50                   	push   eax
100068d0:	e8 fc ff ff ff       	call   100068d1 <begin(void*)+0xe7c>	100068d1: R_386_PC32	strcpy
100068d5:	83 c4 10             	add    esp,0x10
100068d8:	83 ec 08             	sub    esp,0x8
100068db:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
100068e1:	50                   	push   eax
100068e2:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
100068e8:	50                   	push   eax
100068e9:	e8 fc ff ff ff       	call   100068ea <begin(void*)+0xe95>	100068ea: R_386_PC32	strcat
100068ee:	83 c4 10             	add    esp,0x10
100068f1:	83 ec 08             	sub    esp,0x8
100068f4:	68 e0 af 00 10       	push   0x1000afe0	100068f5: R_386_32	.text
100068f9:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
100068ff:	50                   	push   eax
10006900:	e8 fc ff ff ff       	call   10006901 <begin(void*)+0xeac>	10006901: R_386_PC32	strcat
10006905:	83 c4 10             	add    esp,0x10
10006908:	83 ec 08             	sub    esp,0x8
1000690b:	68 82 b8 00 10       	push   0x1000b882	1000690c: R_386_32	.text
10006910:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006916:	50                   	push   eax
10006917:	e8 fc ff ff ff       	call   10006918 <begin(void*)+0xec3>	10006918: R_386_PC32	strcpy
1000691c:	83 c4 10             	add    esp,0x10
1000691f:	83 ec 08             	sub    esp,0x8
10006922:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006928:	50                   	push   eax
10006929:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
1000692f:	50                   	push   eax
10006930:	e8 fc ff ff ff       	call   10006931 <begin(void*)+0xedc>	10006931: R_386_PC32	strcat
10006935:	83 c4 10             	add    esp,0x10
10006938:	83 ec 08             	sub    esp,0x8
1000693b:	68 d8 bb 00 10       	push   0x1000bbd8	1000693c: R_386_32	.text
10006940:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006946:	50                   	push   eax
10006947:	e8 fc ff ff ff       	call   10006948 <begin(void*)+0xef3>	10006948: R_386_PC32	strcat
1000694c:	83 c4 10             	add    esp,0x10
1000694f:	83 ec 08             	sub    esp,0x8
10006952:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006958:	50                   	push   eax
10006959:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000695c:	e8 fc ff ff ff       	call   1000695d <begin(void*)+0xf08>	1000695d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006961:	83 c4 10             	add    esp,0x10
10006964:	83 ec 04             	sub    esp,0x4
10006967:	8d 95 c2 fb ff ff    	lea    edx,[ebp-0x43e]
1000696d:	52                   	push   edx
1000696e:	50                   	push   eax
1000696f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006972:	e8 fc ff ff ff       	call   10006973 <begin(void*)+0xf1e>	10006973: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006977:	83 c4 10             	add    esp,0x10
1000697a:	83 ec 08             	sub    esp,0x8
1000697d:	68 d6 af 00 10       	push   0x1000afd6	1000697e: R_386_32	.text
10006982:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006988:	50                   	push   eax
10006989:	e8 fc ff ff ff       	call   1000698a <begin(void*)+0xf35>	1000698a: R_386_PC32	strcpy
1000698e:	83 c4 10             	add    esp,0x10
10006991:	83 ec 08             	sub    esp,0x8
10006994:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
1000699a:	50                   	push   eax
1000699b:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
100069a1:	50                   	push   eax
100069a2:	e8 fc ff ff ff       	call   100069a3 <begin(void*)+0xf4e>	100069a3: R_386_PC32	strcat
100069a7:	83 c4 10             	add    esp,0x10
100069aa:	83 ec 08             	sub    esp,0x8
100069ad:	68 e9 af 00 10       	push   0x1000afe9	100069ae: R_386_32	.text
100069b2:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
100069b8:	50                   	push   eax
100069b9:	e8 fc ff ff ff       	call   100069ba <begin(void*)+0xf65>	100069ba: R_386_PC32	strcat
100069be:	83 c4 10             	add    esp,0x10
100069c1:	83 ec 08             	sub    esp,0x8
100069c4:	68 82 b8 00 10       	push   0x1000b882	100069c5: R_386_32	.text
100069c9:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100069cf:	50                   	push   eax
100069d0:	e8 fc ff ff ff       	call   100069d1 <begin(void*)+0xf7c>	100069d1: R_386_PC32	strcpy
100069d5:	83 c4 10             	add    esp,0x10
100069d8:	83 ec 08             	sub    esp,0x8
100069db:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
100069e1:	50                   	push   eax
100069e2:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100069e8:	50                   	push   eax
100069e9:	e8 fc ff ff ff       	call   100069ea <begin(void*)+0xf95>	100069ea: R_386_PC32	strcat
100069ee:	83 c4 10             	add    esp,0x10
100069f1:	83 ec 08             	sub    esp,0x8
100069f4:	68 e1 bb 00 10       	push   0x1000bbe1	100069f5: R_386_32	.text
100069f9:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100069ff:	50                   	push   eax
10006a00:	e8 fc ff ff ff       	call   10006a01 <begin(void*)+0xfac>	10006a01: R_386_PC32	strcat
10006a05:	83 c4 10             	add    esp,0x10
10006a08:	83 ec 08             	sub    esp,0x8
10006a0b:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006a11:	50                   	push   eax
10006a12:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006a15:	e8 fc ff ff ff       	call   10006a16 <begin(void*)+0xfc1>	10006a16: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006a1a:	83 c4 10             	add    esp,0x10
10006a1d:	83 ec 04             	sub    esp,0x4
10006a20:	8d 95 c2 fb ff ff    	lea    edx,[ebp-0x43e]
10006a26:	52                   	push   edx
10006a27:	50                   	push   eax
10006a28:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006a2b:	e8 fc ff ff ff       	call   10006a2c <begin(void*)+0xfd7>	10006a2c: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006a30:	83 c4 10             	add    esp,0x10
10006a33:	83 ec 08             	sub    esp,0x8
10006a36:	68 d6 af 00 10       	push   0x1000afd6	10006a37: R_386_32	.text
10006a3b:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006a41:	50                   	push   eax
10006a42:	e8 fc ff ff ff       	call   10006a43 <begin(void*)+0xfee>	10006a43: R_386_PC32	strcpy
10006a47:	83 c4 10             	add    esp,0x10
10006a4a:	83 ec 08             	sub    esp,0x8
10006a4d:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006a53:	50                   	push   eax
10006a54:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006a5a:	50                   	push   eax
10006a5b:	e8 fc ff ff ff       	call   10006a5c <begin(void*)+0x1007>	10006a5c: R_386_PC32	strcat
10006a60:	83 c4 10             	add    esp,0x10
10006a63:	83 ec 08             	sub    esp,0x8
10006a66:	68 f4 af 00 10       	push   0x1000aff4	10006a67: R_386_32	.text
10006a6b:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006a71:	50                   	push   eax
10006a72:	e8 fc ff ff ff       	call   10006a73 <begin(void*)+0x101e>	10006a73: R_386_PC32	strcat
10006a77:	83 c4 10             	add    esp,0x10
10006a7a:	83 ec 08             	sub    esp,0x8
10006a7d:	68 82 b8 00 10       	push   0x1000b882	10006a7e: R_386_32	.text
10006a82:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006a88:	50                   	push   eax
10006a89:	e8 fc ff ff ff       	call   10006a8a <begin(void*)+0x1035>	10006a8a: R_386_PC32	strcpy
10006a8e:	83 c4 10             	add    esp,0x10
10006a91:	83 ec 08             	sub    esp,0x8
10006a94:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006a9a:	50                   	push   eax
10006a9b:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006aa1:	50                   	push   eax
10006aa2:	e8 fc ff ff ff       	call   10006aa3 <begin(void*)+0x104e>	10006aa3: R_386_PC32	strcat
10006aa7:	83 c4 10             	add    esp,0x10
10006aaa:	83 ec 08             	sub    esp,0x8
10006aad:	68 ec bb 00 10       	push   0x1000bbec	10006aae: R_386_32	.text
10006ab2:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006ab8:	50                   	push   eax
10006ab9:	e8 fc ff ff ff       	call   10006aba <begin(void*)+0x1065>	10006aba: R_386_PC32	strcat
10006abe:	83 c4 10             	add    esp,0x10
10006ac1:	83 ec 08             	sub    esp,0x8
10006ac4:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006aca:	50                   	push   eax
10006acb:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006ace:	e8 fc ff ff ff       	call   10006acf <begin(void*)+0x107a>	10006acf: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006ad3:	83 c4 10             	add    esp,0x10
10006ad6:	83 ec 04             	sub    esp,0x4
10006ad9:	8d 95 c2 fb ff ff    	lea    edx,[ebp-0x43e]
10006adf:	52                   	push   edx
10006ae0:	50                   	push   eax
10006ae1:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006ae4:	e8 fc ff ff ff       	call   10006ae5 <begin(void*)+0x1090>	10006ae5: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006ae9:	83 c4 10             	add    esp,0x10
10006aec:	83 ec 08             	sub    esp,0x8
10006aef:	68 d6 af 00 10       	push   0x1000afd6	10006af0: R_386_32	.text
10006af4:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006afa:	50                   	push   eax
10006afb:	e8 fc ff ff ff       	call   10006afc <begin(void*)+0x10a7>	10006afc: R_386_PC32	strcpy
10006b00:	83 c4 10             	add    esp,0x10
10006b03:	83 ec 08             	sub    esp,0x8
10006b06:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006b0c:	50                   	push   eax
10006b0d:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006b13:	50                   	push   eax
10006b14:	e8 fc ff ff ff       	call   10006b15 <begin(void*)+0x10c0>	10006b15: R_386_PC32	strcat
10006b19:	83 c4 10             	add    esp,0x10
10006b1c:	83 ec 08             	sub    esp,0x8
10006b1f:	68 ff af 00 10       	push   0x1000afff	10006b20: R_386_32	.text
10006b24:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006b2a:	50                   	push   eax
10006b2b:	e8 fc ff ff ff       	call   10006b2c <begin(void*)+0x10d7>	10006b2c: R_386_PC32	strcat
10006b30:	83 c4 10             	add    esp,0x10
10006b33:	83 ec 08             	sub    esp,0x8
10006b36:	68 82 b8 00 10       	push   0x1000b882	10006b37: R_386_32	.text
10006b3b:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006b41:	50                   	push   eax
10006b42:	e8 fc ff ff ff       	call   10006b43 <begin(void*)+0x10ee>	10006b43: R_386_PC32	strcpy
10006b47:	83 c4 10             	add    esp,0x10
10006b4a:	83 ec 08             	sub    esp,0x8
10006b4d:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006b53:	50                   	push   eax
10006b54:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006b5a:	50                   	push   eax
10006b5b:	e8 fc ff ff ff       	call   10006b5c <begin(void*)+0x1107>	10006b5c: R_386_PC32	strcat
10006b60:	83 c4 10             	add    esp,0x10
10006b63:	83 ec 08             	sub    esp,0x8
10006b66:	68 f7 bb 00 10       	push   0x1000bbf7	10006b67: R_386_32	.text
10006b6b:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006b71:	50                   	push   eax
10006b72:	e8 fc ff ff ff       	call   10006b73 <begin(void*)+0x111e>	10006b73: R_386_PC32	strcat
10006b77:	83 c4 10             	add    esp,0x10
10006b7a:	83 ec 08             	sub    esp,0x8
10006b7d:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006b83:	50                   	push   eax
10006b84:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006b87:	e8 fc ff ff ff       	call   10006b88 <begin(void*)+0x1133>	10006b88: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006b8c:	83 c4 10             	add    esp,0x10
10006b8f:	83 ec 04             	sub    esp,0x4
10006b92:	8d 95 c2 fb ff ff    	lea    edx,[ebp-0x43e]
10006b98:	52                   	push   edx
10006b99:	50                   	push   eax
10006b9a:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006b9d:	e8 fc ff ff ff       	call   10006b9e <begin(void*)+0x1149>	10006b9e: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006ba2:	83 c4 10             	add    esp,0x10
10006ba5:	83 ec 08             	sub    esp,0x8
10006ba8:	68 d6 af 00 10       	push   0x1000afd6	10006ba9: R_386_32	.text
10006bad:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006bb3:	50                   	push   eax
10006bb4:	e8 fc ff ff ff       	call   10006bb5 <begin(void*)+0x1160>	10006bb5: R_386_PC32	strcpy
10006bb9:	83 c4 10             	add    esp,0x10
10006bbc:	83 ec 08             	sub    esp,0x8
10006bbf:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006bc5:	50                   	push   eax
10006bc6:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006bcc:	50                   	push   eax
10006bcd:	e8 fc ff ff ff       	call   10006bce <begin(void*)+0x1179>	10006bce: R_386_PC32	strcat
10006bd2:	83 c4 10             	add    esp,0x10
10006bd5:	83 ec 08             	sub    esp,0x8
10006bd8:	68 1b b0 00 10       	push   0x1000b01b	10006bd9: R_386_32	.text
10006bdd:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006be3:	50                   	push   eax
10006be4:	e8 fc ff ff ff       	call   10006be5 <begin(void*)+0x1190>	10006be5: R_386_PC32	strcat
10006be9:	83 c4 10             	add    esp,0x10
10006bec:	83 ec 08             	sub    esp,0x8
10006bef:	68 82 b8 00 10       	push   0x1000b882	10006bf0: R_386_32	.text
10006bf4:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006bfa:	50                   	push   eax
10006bfb:	e8 fc ff ff ff       	call   10006bfc <begin(void*)+0x11a7>	10006bfc: R_386_PC32	strcpy
10006c00:	83 c4 10             	add    esp,0x10
10006c03:	83 ec 08             	sub    esp,0x8
10006c06:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006c0c:	50                   	push   eax
10006c0d:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006c13:	50                   	push   eax
10006c14:	e8 fc ff ff ff       	call   10006c15 <begin(void*)+0x11c0>	10006c15: R_386_PC32	strcat
10006c19:	83 c4 10             	add    esp,0x10
10006c1c:	83 ec 08             	sub    esp,0x8
10006c1f:	68 01 bc 00 10       	push   0x1000bc01	10006c20: R_386_32	.text
10006c24:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006c2a:	50                   	push   eax
10006c2b:	e8 fc ff ff ff       	call   10006c2c <begin(void*)+0x11d7>	10006c2c: R_386_PC32	strcat
10006c30:	83 c4 10             	add    esp,0x10
10006c33:	83 ec 08             	sub    esp,0x8
10006c36:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006c3c:	50                   	push   eax
10006c3d:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006c40:	e8 fc ff ff ff       	call   10006c41 <begin(void*)+0x11ec>	10006c41: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006c45:	83 c4 10             	add    esp,0x10
10006c48:	83 ec 04             	sub    esp,0x4
10006c4b:	8d 95 c2 fb ff ff    	lea    edx,[ebp-0x43e]
10006c51:	52                   	push   edx
10006c52:	50                   	push   eax
10006c53:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006c56:	e8 fc ff ff ff       	call   10006c57 <begin(void*)+0x1202>	10006c57: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006c5b:	83 c4 10             	add    esp,0x10
10006c5e:	83 ec 08             	sub    esp,0x8
10006c61:	68 d6 af 00 10       	push   0x1000afd6	10006c62: R_386_32	.text
10006c66:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006c6c:	50                   	push   eax
10006c6d:	e8 fc ff ff ff       	call   10006c6e <begin(void*)+0x1219>	10006c6e: R_386_PC32	strcpy
10006c72:	83 c4 10             	add    esp,0x10
10006c75:	83 ec 08             	sub    esp,0x8
10006c78:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006c7e:	50                   	push   eax
10006c7f:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006c85:	50                   	push   eax
10006c86:	e8 fc ff ff ff       	call   10006c87 <begin(void*)+0x1232>	10006c87: R_386_PC32	strcat
10006c8b:	83 c4 10             	add    esp,0x10
10006c8e:	83 ec 08             	sub    esp,0x8
10006c91:	68 14 b0 00 10       	push   0x1000b014	10006c92: R_386_32	.text
10006c96:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006c9c:	50                   	push   eax
10006c9d:	e8 fc ff ff ff       	call   10006c9e <begin(void*)+0x1249>	10006c9e: R_386_PC32	strcat
10006ca2:	83 c4 10             	add    esp,0x10
10006ca5:	83 ec 08             	sub    esp,0x8
10006ca8:	68 82 b8 00 10       	push   0x1000b882	10006ca9: R_386_32	.text
10006cad:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006cb3:	50                   	push   eax
10006cb4:	e8 fc ff ff ff       	call   10006cb5 <begin(void*)+0x1260>	10006cb5: R_386_PC32	strcpy
10006cb9:	83 c4 10             	add    esp,0x10
10006cbc:	83 ec 08             	sub    esp,0x8
10006cbf:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006cc5:	50                   	push   eax
10006cc6:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006ccc:	50                   	push   eax
10006ccd:	e8 fc ff ff ff       	call   10006cce <begin(void*)+0x1279>	10006cce: R_386_PC32	strcat
10006cd2:	83 c4 10             	add    esp,0x10
10006cd5:	83 ec 08             	sub    esp,0x8
10006cd8:	68 09 bc 00 10       	push   0x1000bc09	10006cd9: R_386_32	.text
10006cdd:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006ce3:	50                   	push   eax
10006ce4:	e8 fc ff ff ff       	call   10006ce5 <begin(void*)+0x1290>	10006ce5: R_386_PC32	strcat
10006ce9:	83 c4 10             	add    esp,0x10
10006cec:	83 ec 08             	sub    esp,0x8
10006cef:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006cf5:	50                   	push   eax
10006cf6:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006cf9:	e8 fc ff ff ff       	call   10006cfa <begin(void*)+0x12a5>	10006cfa: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006cfe:	83 c4 10             	add    esp,0x10
10006d01:	83 ec 04             	sub    esp,0x4
10006d04:	8d 95 c2 fb ff ff    	lea    edx,[ebp-0x43e]
10006d0a:	52                   	push   edx
10006d0b:	50                   	push   eax
10006d0c:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006d0f:	e8 fc ff ff ff       	call   10006d10 <begin(void*)+0x12bb>	10006d10: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006d14:	83 c4 10             	add    esp,0x10
10006d17:	83 ec 08             	sub    esp,0x8
10006d1a:	68 d6 af 00 10       	push   0x1000afd6	10006d1b: R_386_32	.text
10006d1f:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006d25:	50                   	push   eax
10006d26:	e8 fc ff ff ff       	call   10006d27 <begin(void*)+0x12d2>	10006d27: R_386_PC32	strcpy
10006d2b:	83 c4 10             	add    esp,0x10
10006d2e:	83 ec 08             	sub    esp,0x8
10006d31:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006d37:	50                   	push   eax
10006d38:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006d3e:	50                   	push   eax
10006d3f:	e8 fc ff ff ff       	call   10006d40 <begin(void*)+0x12eb>	10006d40: R_386_PC32	strcat
10006d44:	83 c4 10             	add    esp,0x10
10006d47:	83 ec 08             	sub    esp,0x8
10006d4a:	68 09 b0 00 10       	push   0x1000b009	10006d4b: R_386_32	.text
10006d4f:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10006d55:	50                   	push   eax
10006d56:	e8 fc ff ff ff       	call   10006d57 <begin(void*)+0x1302>	10006d57: R_386_PC32	strcat
10006d5b:	83 c4 10             	add    esp,0x10
10006d5e:	83 ec 08             	sub    esp,0x8
10006d61:	68 82 b8 00 10       	push   0x1000b882	10006d62: R_386_32	.text
10006d66:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006d6c:	50                   	push   eax
10006d6d:	e8 fc ff ff ff       	call   10006d6e <begin(void*)+0x1319>	10006d6e: R_386_PC32	strcpy
10006d72:	83 c4 10             	add    esp,0x10
10006d75:	83 ec 08             	sub    esp,0x8
10006d78:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10006d7e:	50                   	push   eax
10006d7f:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006d85:	50                   	push   eax
10006d86:	e8 fc ff ff ff       	call   10006d87 <begin(void*)+0x1332>	10006d87: R_386_PC32	strcat
10006d8b:	83 c4 10             	add    esp,0x10
10006d8e:	83 ec 08             	sub    esp,0x8
10006d91:	68 10 bc 00 10       	push   0x1000bc10	10006d92: R_386_32	.text
10006d96:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006d9c:	50                   	push   eax
10006d9d:	e8 fc ff ff ff       	call   10006d9e <begin(void*)+0x1349>	10006d9e: R_386_PC32	strcat
10006da2:	83 c4 10             	add    esp,0x10
10006da5:	83 ec 08             	sub    esp,0x8
10006da8:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10006dae:	50                   	push   eax
10006daf:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006db2:	e8 fc ff ff ff       	call   10006db3 <begin(void*)+0x135e>	10006db3: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006db7:	83 c4 10             	add    esp,0x10
10006dba:	83 ec 04             	sub    esp,0x4
10006dbd:	8d 95 c2 fb ff ff    	lea    edx,[ebp-0x43e]
10006dc3:	52                   	push   edx
10006dc4:	50                   	push   eax
10006dc5:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006dc8:	e8 fc ff ff ff       	call   10006dc9 <begin(void*)+0x1374>	10006dc9: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006dcd:	83 c4 10             	add    esp,0x10
10006dd0:	83 ec 0c             	sub    esp,0xc
10006dd3:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006dd6:	e8 fc ff ff ff       	call   10006dd7 <begin(void*)+0x1382>	10006dd7: R_386_PC32	CmClose(Reghive_Tag*)
10006ddb:	83 c4 10             	add    esp,0x10
10006dde:	a0 00 00 00 00       	mov    al,ds:0x0	10006ddf: R_386_32	createNewUserMode
10006de3:	84 c0                	test   al,al
10006de5:	0f 85 4c 08 00 00    	jne    10007637 <begin(void*)+0x1be2>
10006deb:	a1 00 00 00 00       	mov    eax,ds:0x0	10006dec: R_386_32	Krnl::computer
10006df0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
10006df6:	a1 00 00 00 00       	mov    eax,ds:0x0	10006df7: R_386_32	Krnl::computer
10006dfb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10006e01:	8b 00                	mov    eax,DWORD PTR [eax]
10006e03:	83 c0 24             	add    eax,0x24
10006e06:	8b 00                	mov    eax,DWORD PTR [eax]
10006e08:	83 ec 0c             	sub    esp,0xc
10006e0b:	52                   	push   edx
10006e0c:	ff d0                	call   eax
10006e0e:	83 c4 10             	add    esp,0x10
10006e11:	89 45 9c             	mov    DWORD PTR [ebp-0x64],eax
10006e14:	a1 00 00 00 00       	mov    eax,ds:0x0	10006e15: R_386_32	tzsel
10006e19:	83 ec 0c             	sub    esp,0xc
10006e1c:	50                   	push   eax
10006e1d:	e8 fc ff ff ff       	call   10006e1e <begin(void*)+0x13c9>	10006e1e: R_386_PC32	KeSetTimezone(int)
10006e22:	83 c4 10             	add    esp,0x10
10006e25:	a1 00 00 00 00       	mov    eax,ds:0x0	10006e26: R_386_32	Krnl::computer
10006e2a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
10006e30:	8b 45 9c             	mov    eax,DWORD PTR [ebp-0x64]
10006e33:	ba 00 00 00 00       	mov    edx,0x0
10006e38:	83 ec 04             	sub    esp,0x4
10006e3b:	52                   	push   edx
10006e3c:	50                   	push   eax
10006e3d:	51                   	push   ecx
10006e3e:	e8 fc ff ff ff       	call   10006e3f <begin(void*)+0x13ea>	10006e3f: R_386_PC32	Clock::setTimeInSecondsLocal(unsigned long long)
10006e43:	83 c4 10             	add    esp,0x10
10006e46:	83 ec 0c             	sub    esp,0xc
10006e49:	68 1c bc 00 10       	push   0x1000bc1c	10006e4a: R_386_32	.text
10006e4e:	e8 fc ff ff ff       	call   10006e4f <begin(void*)+0x13fa>	10006e4f: R_386_PC32	Dbg::kprintf(char const*, ...)
10006e53:	83 c4 10             	add    esp,0x10
10006e56:	a1 00 00 00 00       	mov    eax,ds:0x0	10006e57: R_386_32	term
10006e5b:	83 ec 0c             	sub    esp,0xc
10006e5e:	50                   	push   eax
10006e5f:	e8 fc ff ff ff       	call   10006e60 <begin(void*)+0x140b>	10006e60: R_386_PC32	setActiveTerminal(VgaText*)
10006e64:	83 c4 10             	add    esp,0x10
10006e67:	e8 fc ff ff ff       	call   10006e68 <begin(void*)+0x1413>	10006e68: R_386_PC32	drawBootScreen()
10006e6c:	83 ec 0c             	sub    esp,0xc
10006e6f:	68 b5 b6 00 10       	push   0x1000b6b5	10006e70: R_386_32	.text
10006e74:	6a 0d                	push   0xd
10006e76:	6a 32                	push   0x32
10006e78:	6a 05                	push   0x5
10006e7a:	6a 16                	push   0x16
10006e7c:	e8 fc ff ff ff       	call   10006e7d <begin(void*)+0x1428>	10006e7d: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10006e81:	83 c4 20             	add    esp,0x20
10006e84:	a1 00 00 00 00       	mov    eax,ds:0x0	10006e85: R_386_32	term
10006e89:	83 ec 04             	sub    esp,0x4
10006e8c:	6a 08                	push   0x8
10006e8e:	6a 18                	push   0x18
10006e90:	50                   	push   eax
10006e91:	e8 fc ff ff ff       	call   10006e92 <begin(void*)+0x143d>	10006e92: R_386_PC32	VgaText::setCursor(int, int)
10006e96:	83 c4 10             	add    esp,0x10
10006e99:	a1 00 00 00 00       	mov    eax,ds:0x0	10006e9a: R_386_32	term
10006e9e:	83 ec 08             	sub    esp,0x8
10006ea1:	68 44 bc 00 10       	push   0x1000bc44	10006ea2: R_386_32	.text
10006ea6:	50                   	push   eax
10006ea7:	e8 fc ff ff ff       	call   10006ea8 <begin(void*)+0x1453>	10006ea8: R_386_PC32	VgaText::puts(char const*)
10006eac:	83 c4 10             	add    esp,0x10
10006eaf:	a1 00 00 00 00       	mov    eax,ds:0x0	10006eb0: R_386_32	term
10006eb4:	83 ec 04             	sub    esp,0x4
10006eb7:	6a 0a                	push   0xa
10006eb9:	6a 18                	push   0x18
10006ebb:	50                   	push   eax
10006ebc:	e8 fc ff ff ff       	call   10006ebd <begin(void*)+0x1468>	10006ebd: R_386_PC32	VgaText::setCursor(int, int)
10006ec1:	83 c4 10             	add    esp,0x10
10006ec4:	a1 00 00 00 00       	mov    eax,ds:0x0	10006ec5: R_386_32	term
10006ec9:	83 ec 08             	sub    esp,0x8
10006ecc:	68 6c bc 00 10       	push   0x1000bc6c	10006ecd: R_386_32	.text
10006ed1:	50                   	push   eax
10006ed2:	e8 fc ff ff ff       	call   10006ed3 <begin(void*)+0x147e>	10006ed3: R_386_PC32	VgaText::puts(char const*)
10006ed7:	83 c4 10             	add    esp,0x10
10006eda:	a1 00 00 00 00       	mov    eax,ds:0x0	10006edb: R_386_32	term
10006edf:	83 ec 04             	sub    esp,0x4
10006ee2:	6a 0b                	push   0xb
10006ee4:	6a 18                	push   0x18
10006ee6:	50                   	push   eax
10006ee7:	e8 fc ff ff ff       	call   10006ee8 <begin(void*)+0x1493>	10006ee8: R_386_PC32	VgaText::setCursor(int, int)
10006eec:	83 c4 10             	add    esp,0x10
10006eef:	a1 00 00 00 00       	mov    eax,ds:0x0	10006ef0: R_386_32	term
10006ef4:	83 ec 08             	sub    esp,0x8
10006ef7:	68 98 bc 00 10       	push   0x1000bc98	10006ef8: R_386_32	.text
10006efc:	50                   	push   eax
10006efd:	e8 fc ff ff ff       	call   10006efe <begin(void*)+0x14a9>	10006efe: R_386_PC32	VgaText::puts(char const*)
10006f02:	83 c4 10             	add    esp,0x10
10006f05:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006f07: R_386_32	installKey
10006f0c:	a0 00 00 00 00       	mov    al,ds:0x0	10006f0d: R_386_32	installKey
10006f11:	84 c0                	test   al,al
10006f13:	0f 94 c0             	sete   al
10006f16:	84 c0                	test   al,al
10006f18:	74 02                	je     10006f1c <begin(void*)+0x14c7>
10006f1a:	eb f0                	jmp    10006f0c <begin(void*)+0x14b7>
10006f1c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006f1e: R_386_32	installKey
10006f23:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f24: R_386_32	term
10006f28:	83 ec 04             	sub    esp,0x4
10006f2b:	6a 0c                	push   0xc
10006f2d:	6a 18                	push   0x18
10006f2f:	50                   	push   eax
10006f30:	e8 fc ff ff ff       	call   10006f31 <begin(void*)+0x14dc>	10006f31: R_386_PC32	VgaText::setCursor(int, int)
10006f35:	83 c4 10             	add    esp,0x10
10006f38:	e8 fc ff ff ff       	call   10006f39 <begin(void*)+0x14e4>	10006f39: R_386_PC32	KeRestart()
10006f3d:	e9 5d 0e 00 00       	jmp    10007d9f <begin(void*)+0x234a>
10006f42:	e8 fc ff ff ff       	call   10006f43 <begin(void*)+0x14ee>	10006f43: R_386_PC32	KeLoadTimezone()
10006f47:	e8 fc ff ff ff       	call   10006f48 <begin(void*)+0x14f3>	10006f48: R_386_PC32	KeInitialiseLocale()
10006f4c:	83 ec 0c             	sub    esp,0xc
10006f4f:	68 44 b8 00 10       	push   0x1000b844	10006f50: R_386_32	.text
10006f54:	e8 fc ff ff ff       	call   10006f55 <begin(void*)+0x1500>	10006f55: R_386_PC32	CmOpen(char const*)
10006f59:	83 c4 10             	add    esp,0x10
10006f5c:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10006f5f:	83 ec 08             	sub    esp,0x8
10006f62:	68 fe b9 00 10       	push   0x1000b9fe	10006f63: R_386_32	.text
10006f67:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006f6a:	e8 fc ff ff ff       	call   10006f6b <begin(void*)+0x1516>	10006f6b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006f6f:	83 c4 10             	add    esp,0x10
10006f72:	83 ec 04             	sub    esp,0x4
10006f75:	8d 95 d4 fc ff ff    	lea    edx,[ebp-0x32c]
10006f7b:	52                   	push   edx
10006f7c:	50                   	push   eax
10006f7d:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006f80:	e8 fc ff ff ff       	call   10006f81 <begin(void*)+0x152c>	10006f81: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10006f85:	83 c4 10             	add    esp,0x10
10006f88:	83 ec 08             	sub    esp,0x8
10006f8b:	68 aa bc 00 10       	push   0x1000bcaa	10006f8c: R_386_32	.text
10006f90:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006f93:	e8 fc ff ff ff       	call   10006f94 <begin(void*)+0x153f>	10006f94: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006f98:	83 c4 10             	add    esp,0x10
10006f9b:	83 ec 04             	sub    esp,0x4
10006f9e:	8d 95 c8 fc ff ff    	lea    edx,[ebp-0x338]
10006fa4:	52                   	push   edx
10006fa5:	50                   	push   eax
10006fa6:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006fa9:	e8 fc ff ff ff       	call   10006faa <begin(void*)+0x1555>	10006faa: R_386_PC32	CmGetInteger(Reghive_Tag*, int, unsigned long long*)
10006fae:	83 c4 10             	add    esp,0x10
10006fb1:	83 ec 0c             	sub    esp,0xc
10006fb4:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006fb7:	e8 fc ff ff ff       	call   10006fb8 <begin(void*)+0x1563>	10006fb8: R_386_PC32	CmClose(Reghive_Tag*)
10006fbc:	83 c4 10             	add    esp,0x10
10006fbf:	83 ec 0c             	sub    esp,0xc
10006fc2:	8d 85 d4 fc ff ff    	lea    eax,[ebp-0x32c]
10006fc8:	50                   	push   eax
10006fc9:	e8 fc ff ff ff       	call   10006fca <begin(void*)+0x1575>	10006fca: R_386_PC32	checkExtendedKey(char*)
10006fce:	83 c4 10             	add    esp,0x10
10006fd1:	85 c0                	test   eax,eax
10006fd3:	0f 94 c0             	sete   al
10006fd6:	84 c0                	test   al,al
10006fd8:	0f 84 bd 01 00 00    	je     1000719b <begin(void*)+0x1746>
10006fde:	83 ec 0c             	sub    esp,0xc
10006fe1:	6a 01                	push   0x1
10006fe3:	e8 fc ff ff ff       	call   10006fe4 <begin(void*)+0x158f>	10006fe4: R_386_PC32	firstRun(bool)
10006fe8:	83 c4 10             	add    esp,0x10
10006feb:	83 ec 0c             	sub    esp,0xc
10006fee:	68 44 b8 00 10       	push   0x1000b844	10006fef: R_386_32	.text
10006ff3:	e8 fc ff ff ff       	call   10006ff4 <begin(void*)+0x159f>	10006ff4: R_386_PC32	CmOpen(char const*)
10006ff8:	83 c4 10             	add    esp,0x10
10006ffb:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10006ffe:	83 ec 04             	sub    esp,0x4
10007001:	68 69 b8 00 10       	push   0x1000b869	10007002: R_386_32	.text
10007006:	6a 00                	push   0x0
10007008:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000700b:	e8 fc ff ff ff       	call   1000700c <begin(void*)+0x15b7>	1000700c: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10007010:	83 c4 10             	add    esp,0x10
10007013:	83 ec 08             	sub    esp,0x8
10007016:	68 69 b8 00 10       	push   0x1000b869	10007017: R_386_32	.text
1000701b:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000701e:	e8 fc ff ff ff       	call   1000701f <begin(void*)+0x15ca>	1000701f: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10007023:	83 c4 10             	add    esp,0x10
10007026:	83 ec 08             	sub    esp,0x8
10007029:	50                   	push   eax
1000702a:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000702d:	e8 fc ff ff ff       	call   1000702e <begin(void*)+0x15d9>	1000702e: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10007032:	83 c4 10             	add    esp,0x10
10007035:	83 ec 04             	sub    esp,0x4
10007038:	68 a3 b8 00 10       	push   0x1000b8a3	10007039: R_386_32	.text
1000703d:	50                   	push   eax
1000703e:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007041:	e8 fc ff ff ff       	call   10007042 <begin(void*)+0x15ed>	10007042: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10007046:	83 c4 10             	add    esp,0x10
10007049:	83 ec 08             	sub    esp,0x8
1000704c:	68 1a b9 00 10       	push   0x1000b91a	1000704d: R_386_32	.text
10007051:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007054:	e8 fc ff ff ff       	call   10007055 <begin(void*)+0x1600>	10007055: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10007059:	83 c4 10             	add    esp,0x10
1000705c:	83 ec 08             	sub    esp,0x8
1000705f:	50                   	push   eax
10007060:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007063:	e8 fc ff ff ff       	call   10007064 <begin(void*)+0x160f>	10007064: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10007068:	83 c4 10             	add    esp,0x10
1000706b:	83 ec 04             	sub    esp,0x4
1000706e:	68 34 b9 00 10       	push   0x1000b934	1000706f: R_386_32	.text
10007073:	50                   	push   eax
10007074:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007077:	e8 fc ff ff ff       	call   10007078 <begin(void*)+0x1623>	10007078: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000707c:	83 c4 10             	add    esp,0x10
1000707f:	83 ec 08             	sub    esp,0x8
10007082:	68 fe b9 00 10       	push   0x1000b9fe	10007083: R_386_32	.text
10007087:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000708a:	e8 fc ff ff ff       	call   1000708b <begin(void*)+0x1636>	1000708b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000708f:	83 c4 10             	add    esp,0x10
10007092:	83 ec 04             	sub    esp,0x4
10007095:	68 00 00 00 00       	push   0x0	10007096: R_386_32	pkeybuf
1000709a:	50                   	push   eax
1000709b:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000709e:	e8 fc ff ff ff       	call   1000709f <begin(void*)+0x164a>	1000709f: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100070a3:	83 c4 10             	add    esp,0x10
100070a6:	83 ec 0c             	sub    esp,0xc
100070a9:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100070ac:	e8 fc ff ff ff       	call   100070ad <begin(void*)+0x1658>	100070ad: R_386_PC32	CmClose(Reghive_Tag*)
100070b1:	83 c4 10             	add    esp,0x10
100070b4:	a1 00 00 00 00       	mov    eax,ds:0x0	100070b5: R_386_32	term
100070b9:	83 ec 0c             	sub    esp,0xc
100070bc:	50                   	push   eax
100070bd:	e8 fc ff ff ff       	call   100070be <begin(void*)+0x1669>	100070be: R_386_PC32	setActiveTerminal(VgaText*)
100070c2:	83 c4 10             	add    esp,0x10
100070c5:	e8 fc ff ff ff       	call   100070c6 <begin(void*)+0x1671>	100070c6: R_386_PC32	drawBootScreen()
100070ca:	83 ec 0c             	sub    esp,0xc
100070cd:	68 be bc 00 10       	push   0x1000bcbe	100070ce: R_386_32	.text
100070d2:	6a 0d                	push   0xd
100070d4:	6a 32                	push   0x32
100070d6:	6a 05                	push   0x5
100070d8:	6a 16                	push   0x16
100070da:	e8 fc ff ff ff       	call   100070db <begin(void*)+0x1686>	100070db: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100070df:	83 c4 20             	add    esp,0x20
100070e2:	a1 00 00 00 00       	mov    eax,ds:0x0	100070e3: R_386_32	term
100070e7:	83 ec 04             	sub    esp,0x4
100070ea:	6a 08                	push   0x8
100070ec:	6a 18                	push   0x18
100070ee:	50                   	push   eax
100070ef:	e8 fc ff ff ff       	call   100070f0 <begin(void*)+0x169b>	100070f0: R_386_PC32	VgaText::setCursor(int, int)
100070f4:	83 c4 10             	add    esp,0x10
100070f7:	a1 00 00 00 00       	mov    eax,ds:0x0	100070f8: R_386_32	term
100070fc:	83 ec 08             	sub    esp,0x8
100070ff:	68 d4 bc 00 10       	push   0x1000bcd4	10007100: R_386_32	.text
10007104:	50                   	push   eax
10007105:	e8 fc ff ff ff       	call   10007106 <begin(void*)+0x16b1>	10007106: R_386_PC32	VgaText::puts(char const*)
1000710a:	83 c4 10             	add    esp,0x10
1000710d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000710e: R_386_32	term
10007112:	83 ec 04             	sub    esp,0x4
10007115:	6a 0a                	push   0xa
10007117:	6a 18                	push   0x18
10007119:	50                   	push   eax
1000711a:	e8 fc ff ff ff       	call   1000711b <begin(void*)+0x16c6>	1000711b: R_386_PC32	VgaText::setCursor(int, int)
1000711f:	83 c4 10             	add    esp,0x10
10007122:	a1 00 00 00 00       	mov    eax,ds:0x0	10007123: R_386_32	term
10007127:	83 ec 08             	sub    esp,0x8
1000712a:	68 6c bc 00 10       	push   0x1000bc6c	1000712b: R_386_32	.text
1000712f:	50                   	push   eax
10007130:	e8 fc ff ff ff       	call   10007131 <begin(void*)+0x16dc>	10007131: R_386_PC32	VgaText::puts(char const*)
10007135:	83 c4 10             	add    esp,0x10
10007138:	a1 00 00 00 00       	mov    eax,ds:0x0	10007139: R_386_32	term
1000713d:	83 ec 04             	sub    esp,0x4
10007140:	6a 0b                	push   0xb
10007142:	6a 18                	push   0x18
10007144:	50                   	push   eax
10007145:	e8 fc ff ff ff       	call   10007146 <begin(void*)+0x16f1>	10007146: R_386_PC32	VgaText::setCursor(int, int)
1000714a:	83 c4 10             	add    esp,0x10
1000714d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000714e: R_386_32	term
10007152:	83 ec 08             	sub    esp,0x8
10007155:	68 98 bc 00 10       	push   0x1000bc98	10007156: R_386_32	.text
1000715a:	50                   	push   eax
1000715b:	e8 fc ff ff ff       	call   1000715c <begin(void*)+0x1707>	1000715c: R_386_PC32	VgaText::puts(char const*)
10007160:	83 c4 10             	add    esp,0x10
10007163:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10007165: R_386_32	installKey
1000716a:	a0 00 00 00 00       	mov    al,ds:0x0	1000716b: R_386_32	installKey
1000716f:	84 c0                	test   al,al
10007171:	0f 94 c0             	sete   al
10007174:	84 c0                	test   al,al
10007176:	74 02                	je     1000717a <begin(void*)+0x1725>
10007178:	eb f0                	jmp    1000716a <begin(void*)+0x1715>
1000717a:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000717c: R_386_32	installKey
10007181:	a1 00 00 00 00       	mov    eax,ds:0x0	10007182: R_386_32	term
10007186:	83 ec 04             	sub    esp,0x4
10007189:	6a 0c                	push   0xc
1000718b:	6a 18                	push   0x18
1000718d:	50                   	push   eax
1000718e:	e8 fc ff ff ff       	call   1000718f <begin(void*)+0x173a>	1000718f: R_386_PC32	VgaText::setCursor(int, int)
10007193:	83 c4 10             	add    esp,0x10
10007196:	e8 fc ff ff ff       	call   10007197 <begin(void*)+0x1742>	10007197: R_386_PC32	KeRestart()
1000719b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000719d: R_386_32	showSidebar
100071a2:	83 ec 0c             	sub    esp,0xc
100071a5:	68 84 01 00 00       	push   0x184
100071aa:	e8 fc ff ff ff       	call   100071ab <begin(void*)+0x1756>	100071ab: R_386_PC32	operator new(unsigned long)
100071af:	83 c4 10             	add    esp,0x10
100071b2:	89 c3                	mov    ebx,eax
100071b4:	83 ec 08             	sub    esp,0x8
100071b7:	68 cc b2 00 10       	push   0x1000b2cc	100071b8: R_386_32	.text
100071bc:	53                   	push   ebx
100071bd:	e8 fc ff ff ff       	call   100071be <begin(void*)+0x1769>	100071be: R_386_PC32	VgaText::VgaText(char const*)
100071c2:	83 c4 10             	add    esp,0x10
100071c5:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	100071c7: R_386_32	term
100071cb:	a1 00 00 00 00       	mov    eax,ds:0x0	100071cc: R_386_32	term
100071d0:	83 ec 0c             	sub    esp,0xc
100071d3:	50                   	push   eax
100071d4:	e8 fc ff ff ff       	call   100071d5 <begin(void*)+0x1780>	100071d5: R_386_PC32	setActiveTerminal(VgaText*)
100071d9:	83 c4 10             	add    esp,0x10
100071dc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
100071e3:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100071ea:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100071ec: R_386_32	installKey
100071f1:	83 ec 04             	sub    esp,0x4
100071f4:	68 80 00 00 00       	push   0x80
100071f9:	6a 00                	push   0x0
100071fb:	8d 85 40 f9 ff ff    	lea    eax,[ebp-0x6c0]
10007201:	50                   	push   eax
10007202:	e8 fc ff ff ff       	call   10007203 <begin(void*)+0x17ae>	10007203: R_386_PC32	memset
10007207:	83 c4 10             	add    esp,0x10
1000720a:	83 ec 04             	sub    esp,0x4
1000720d:	68 80 00 00 00       	push   0x80
10007212:	6a 00                	push   0x0
10007214:	8d 85 c0 f9 ff ff    	lea    eax,[ebp-0x640]
1000721a:	50                   	push   eax
1000721b:	e8 fc ff ff ff       	call   1000721c <begin(void*)+0x17c7>	1000721c: R_386_PC32	memset
10007220:	83 c4 10             	add    esp,0x10
10007223:	83 ec 0c             	sub    esp,0xc
10007226:	68 44 b8 00 10       	push   0x1000b844	10007227: R_386_32	.text
1000722b:	e8 fc ff ff ff       	call   1000722c <begin(void*)+0x17d7>	1000722c: R_386_PC32	CmOpen(char const*)
10007230:	83 c4 10             	add    esp,0x10
10007233:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10007236:	83 ec 08             	sub    esp,0x8
10007239:	68 3f b9 00 10       	push   0x1000b93f	1000723a: R_386_32	.text
1000723e:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007241:	e8 fc ff ff ff       	call   10007242 <begin(void*)+0x17ed>	10007242: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10007246:	83 c4 10             	add    esp,0x10
10007249:	83 ec 08             	sub    esp,0x8
1000724c:	50                   	push   eax
1000724d:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007250:	e8 fc ff ff ff       	call   10007251 <begin(void*)+0x17fc>	10007251: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10007255:	83 c4 10             	add    esp,0x10
10007258:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
1000725b:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
1000725f:	0f 84 88 01 00 00    	je     100073ed <begin(void*)+0x1998>
10007265:	83 ec 04             	sub    esp,0x4
10007268:	6a 50                	push   0x50
1000726a:	6a 00                	push   0x0
1000726c:	8d 85 a0 f8 ff ff    	lea    eax,[ebp-0x760]
10007272:	50                   	push   eax
10007273:	e8 fc ff ff ff       	call   10007274 <begin(void*)+0x181f>	10007274: R_386_PC32	memset
10007278:	83 c4 10             	add    esp,0x10
1000727b:	83 ec 04             	sub    esp,0x4
1000727e:	8d 85 a0 f8 ff ff    	lea    eax,[ebp-0x760]
10007284:	50                   	push   eax
10007285:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10007288:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000728b:	e8 fc ff ff ff       	call   1000728c <begin(void*)+0x1837>	1000728c: R_386_PC32	CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)
10007290:	83 c4 10             	add    esp,0x10
10007293:	89 45 98             	mov    DWORD PTR [ebp-0x68],eax
10007296:	83 7d 98 4e          	cmp    DWORD PTR [ebp-0x68],0x4e
1000729a:	0f 85 34 01 00 00    	jne    100073d4 <begin(void*)+0x197f>
100072a0:	83 ec 0c             	sub    esp,0xc
100072a3:	6a 50                	push   0x50
100072a5:	e8 fc ff ff ff       	call   100072a6 <begin(void*)+0x1851>	100072a6: R_386_PC32	malloc
100072aa:	83 c4 10             	add    esp,0x10
100072ad:	89 c2                	mov    edx,eax
100072af:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100072b2:	89 94 85 c0 f9 ff ff 	mov    DWORD PTR [ebp+eax*4-0x640],edx
100072b9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100072bc:	8b 84 85 c0 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x640]
100072c3:	83 ec 08             	sub    esp,0x8
100072c6:	8d 95 a0 f8 ff ff    	lea    edx,[ebp-0x760]
100072cc:	52                   	push   edx
100072cd:	50                   	push   eax
100072ce:	e8 fc ff ff ff       	call   100072cf <begin(void*)+0x187a>	100072cf: R_386_PC32	strcpy
100072d3:	83 c4 10             	add    esp,0x10
100072d6:	83 ec 08             	sub    esp,0x8
100072d9:	68 82 b8 00 10       	push   0x1000b882	100072da: R_386_32	.text
100072de:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
100072e4:	50                   	push   eax
100072e5:	e8 fc ff ff ff       	call   100072e6 <begin(void*)+0x1891>	100072e6: R_386_PC32	strcpy
100072ea:	83 c4 10             	add    esp,0x10
100072ed:	83 ec 08             	sub    esp,0x8
100072f0:	8d 85 a0 f8 ff ff    	lea    eax,[ebp-0x760]
100072f6:	50                   	push   eax
100072f7:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
100072fd:	50                   	push   eax
100072fe:	e8 fc ff ff ff       	call   100072ff <begin(void*)+0x18aa>	100072ff: R_386_PC32	strcat
10007303:	83 c4 10             	add    esp,0x10
10007306:	83 ec 08             	sub    esp,0x8
10007309:	68 cb bb 00 10       	push   0x1000bbcb	1000730a: R_386_32	.text
1000730e:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10007314:	50                   	push   eax
10007315:	e8 fc ff ff ff       	call   10007316 <begin(void*)+0x18c1>	10007316: R_386_PC32	strcat
1000731a:	83 c4 10             	add    esp,0x10
1000731d:	83 ec 08             	sub    esp,0x8
10007320:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10007326:	50                   	push   eax
10007327:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000732a:	e8 fc ff ff ff       	call   1000732b <begin(void*)+0x18d6>	1000732b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000732f:	83 c4 10             	add    esp,0x10
10007332:	83 ec 04             	sub    esp,0x4
10007335:	8d 95 a0 f8 ff ff    	lea    edx,[ebp-0x760]
1000733b:	52                   	push   edx
1000733c:	50                   	push   eax
1000733d:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007340:	e8 fc ff ff ff       	call   10007341 <begin(void*)+0x18ec>	10007341: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10007345:	83 c4 10             	add    esp,0x10
10007348:	83 ec 0c             	sub    esp,0xc
1000734b:	6a 50                	push   0x50
1000734d:	e8 fc ff ff ff       	call   1000734e <begin(void*)+0x18f9>	1000734e: R_386_PC32	malloc
10007352:	83 c4 10             	add    esp,0x10
10007355:	89 c2                	mov    edx,eax
10007357:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000735a:	89 94 85 40 f9 ff ff 	mov    DWORD PTR [ebp+eax*4-0x6c0],edx
10007361:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10007364:	8b 84 85 40 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6c0]
1000736b:	83 ec 08             	sub    esp,0x8
1000736e:	68 93 b2 00 10       	push   0x1000b293	1000736f: R_386_32	.text
10007373:	50                   	push   eax
10007374:	e8 fc ff ff ff       	call   10007375 <begin(void*)+0x1920>	10007375: R_386_PC32	strcpy
10007379:	83 c4 10             	add    esp,0x10
1000737c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000737f:	8b 84 85 40 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6c0]
10007386:	83 ec 08             	sub    esp,0x8
10007389:	8d 95 a0 f8 ff ff    	lea    edx,[ebp-0x760]
1000738f:	52                   	push   edx
10007390:	50                   	push   eax
10007391:	e8 fc ff ff ff       	call   10007392 <begin(void*)+0x193d>	10007392: R_386_PC32	strcat
10007396:	83 c4 10             	add    esp,0x10
10007399:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000739c:	8b 84 85 40 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6c0]
100073a3:	83 ec 0c             	sub    esp,0xc
100073a6:	50                   	push   eax
100073a7:	e8 fc ff ff ff       	call   100073a8 <begin(void*)+0x1953>	100073a8: R_386_PC32	strlen
100073ac:	83 c4 10             	add    esp,0x10
100073af:	83 f8 31             	cmp    eax,0x31
100073b2:	77 1d                	ja     100073d1 <begin(void*)+0x197c>
100073b4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100073b7:	8b 84 85 40 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6c0]
100073be:	83 ec 08             	sub    esp,0x8
100073c1:	68 93 b2 00 10       	push   0x1000b293	100073c2: R_386_32	.text
100073c6:	50                   	push   eax
100073c7:	e8 fc ff ff ff       	call   100073c8 <begin(void*)+0x1973>	100073c8: R_386_PC32	strcat
100073cc:	83 c4 10             	add    esp,0x10
100073cf:	eb c8                	jmp    10007399 <begin(void*)+0x1944>
100073d1:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
100073d4:	83 ec 08             	sub    esp,0x8
100073d7:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100073da:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100073dd:	e8 fc ff ff ff       	call   100073de <begin(void*)+0x1989>	100073de: R_386_PC32	CmGetNext(Reghive_Tag*, int)
100073e2:	83 c4 10             	add    esp,0x10
100073e5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
100073e8:	e9 6e fe ff ff       	jmp    1000725b <begin(void*)+0x1806>
100073ed:	83 ec 0c             	sub    esp,0xc
100073f0:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100073f3:	e8 fc ff ff ff       	call   100073f4 <begin(void*)+0x199f>	100073f4: R_386_PC32	CmClose(Reghive_Tag*)
100073f8:	83 c4 10             	add    esp,0x10
100073fb:	83 ec 0c             	sub    esp,0xc
100073fe:	6a 50                	push   0x50
10007400:	e8 fc ff ff ff       	call   10007401 <begin(void*)+0x19ac>	10007401: R_386_PC32	malloc
10007405:	83 c4 10             	add    esp,0x10
10007408:	89 c2                	mov    edx,eax
1000740a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000740d:	89 94 85 40 f9 ff ff 	mov    DWORD PTR [ebp+eax*4-0x6c0],edx
10007414:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10007417:	8b 84 85 40 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6c0]
1000741e:	83 ec 08             	sub    esp,0x8
10007421:	68 f8 bc 00 10       	push   0x1000bcf8	10007422: R_386_32	.text
10007426:	50                   	push   eax
10007427:	e8 fc ff ff ff       	call   10007428 <begin(void*)+0x19d3>	10007428: R_386_PC32	strcpy
1000742c:	83 c4 10             	add    esp,0x10
1000742f:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10007432:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10007434: R_386_32	guiKeyboardHandler
	10007438: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
1000743c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000743e: R_386_32	installKey
10007443:	e8 fc ff ff ff       	call   10007444 <begin(void*)+0x19ef>	10007444: R_386_PC32	drawBootScreen()
10007448:	83 ec 0c             	sub    esp,0xc
1000744b:	68 2b bd 00 10       	push   0x1000bd2b	1000744c: R_386_32	.text
10007450:	6a 10                	push   0x10
10007452:	6a 39                	push   0x39
10007454:	6a 03                	push   0x3
10007456:	6a 0c                	push   0xc
10007458:	e8 fc ff ff ff       	call   10007459 <begin(void*)+0x1a04>	10007459: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000745d:	83 c4 20             	add    esp,0x20
10007460:	a1 00 00 00 00       	mov    eax,ds:0x0	10007461: R_386_32	term
10007465:	83 ec 04             	sub    esp,0x4
10007468:	6a 06                	push   0x6
1000746a:	6a 0e                	push   0xe
1000746c:	50                   	push   eax
1000746d:	e8 fc ff ff ff       	call   1000746e <begin(void*)+0x1a19>	1000746e: R_386_PC32	VgaText::setCursor(int, int)
10007472:	83 c4 10             	add    esp,0x10
10007475:	a1 00 00 00 00       	mov    eax,ds:0x0	10007476: R_386_32	term
1000747a:	6a 0f                	push   0xf
1000747c:	6a 00                	push   0x0
1000747e:	68 34 bd 00 10       	push   0x1000bd34	1000747f: R_386_32	.text
10007483:	50                   	push   eax
10007484:	e8 fc ff ff ff       	call   10007485 <begin(void*)+0x1a30>	10007485: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10007489:	83 c4 10             	add    esp,0x10
1000748c:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10007490:	75 0c                	jne    1000749e <begin(void*)+0x1a49>
10007492:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10007499:	e9 25 01 00 00       	jmp    100075c3 <begin(void*)+0x1b6e>
1000749e:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
100074a5:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100074a8:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
100074ab:	7d 63                	jge    10007510 <begin(void*)+0x1abb>
100074ad:	a1 00 00 00 00       	mov    eax,ds:0x0	100074ae: R_386_32	term
100074b2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
100074b5:	83 c2 08             	add    edx,0x8
100074b8:	83 ec 04             	sub    esp,0x4
100074bb:	52                   	push   edx
100074bc:	6a 0f                	push   0xf
100074be:	50                   	push   eax
100074bf:	e8 fc ff ff ff       	call   100074c0 <begin(void*)+0x1a6b>	100074c0: R_386_PC32	VgaText::setCursor(int, int)
100074c4:	83 c4 10             	add    esp,0x10
100074c7:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	100074c9: R_386_32	term
100074cd:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100074d0:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
100074d3:	75 07                	jne    100074dc <begin(void*)+0x1a87>
100074d5:	b9 00 00 00 00       	mov    ecx,0x0
100074da:	eb 05                	jmp    100074e1 <begin(void*)+0x1a8c>
100074dc:	b9 0f 00 00 00       	mov    ecx,0xf
100074e1:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100074e4:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
100074e7:	75 07                	jne    100074f0 <begin(void*)+0x1a9b>
100074e9:	ba 0f 00 00 00       	mov    edx,0xf
100074ee:	eb 05                	jmp    100074f5 <begin(void*)+0x1aa0>
100074f0:	ba 00 00 00 00       	mov    edx,0x0
100074f5:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100074f8:	8b 84 85 40 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6c0]
100074ff:	51                   	push   ecx
10007500:	52                   	push   edx
10007501:	50                   	push   eax
10007502:	53                   	push   ebx
10007503:	e8 fc ff ff ff       	call   10007504 <begin(void*)+0x1aaf>	10007504: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10007508:	83 c4 10             	add    esp,0x10
1000750b:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
1000750e:	eb 95                	jmp    100074a5 <begin(void*)+0x1a50>
10007510:	a0 00 00 00 00       	mov    al,ds:0x0	10007511: R_386_32	installKey
10007515:	84 c0                	test   al,al
10007517:	0f 94 c0             	sete   al
1000751a:	84 c0                	test   al,al
1000751c:	74 02                	je     10007520 <begin(void*)+0x1acb>
1000751e:	eb f0                	jmp    10007510 <begin(void*)+0x1abb>
10007520:	a1 00 00 00 00       	mov    eax,ds:0x0	10007521: R_386_32	term
10007525:	05 82 00 00 00       	add    eax,0x82
1000752a:	83 ec 04             	sub    esp,0x4
1000752d:	6a 04                	push   0x4
1000752f:	6a 00                	push   0x0
10007531:	50                   	push   eax
10007532:	e8 fc ff ff ff       	call   10007533 <begin(void*)+0x1ade>	10007533: R_386_PC32	memset
10007537:	83 c4 10             	add    esp,0x10
1000753a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000753b: R_386_32	term
1000753f:	05 02 01 00 00       	add    eax,0x102
10007544:	83 ec 04             	sub    esp,0x4
10007547:	6a 04                	push   0x4
10007549:	6a 00                	push   0x0
1000754b:	50                   	push   eax
1000754c:	e8 fc ff ff ff       	call   1000754d <begin(void*)+0x1af8>	1000754d: R_386_PC32	memset
10007551:	83 c4 10             	add    esp,0x10
10007554:	a0 00 00 00 00       	mov    al,ds:0x0	10007555: R_386_32	installKey
10007559:	3c 01                	cmp    al,0x1
1000755b:	0f 94 c0             	sete   al
1000755e:	84 c0                	test   al,al
10007560:	74 12                	je     10007574 <begin(void*)+0x1b1f>
10007562:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
10007565:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10007569:	79 39                	jns    100075a4 <begin(void*)+0x1b4f>
1000756b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10007572:	eb 30                	jmp    100075a4 <begin(void*)+0x1b4f>
10007574:	a0 00 00 00 00       	mov    al,ds:0x0	10007575: R_386_32	installKey
10007579:	3c 02                	cmp    al,0x2
1000757b:	0f 94 c0             	sete   al
1000757e:	84 c0                	test   al,al
10007580:	74 14                	je     10007596 <begin(void*)+0x1b41>
10007582:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10007585:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10007588:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
1000758b:	7f 17                	jg     100075a4 <begin(void*)+0x1b4f>
1000758d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10007590:	48                   	dec    eax
10007591:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10007594:	eb 0e                	jmp    100075a4 <begin(void*)+0x1b4f>
10007596:	a0 00 00 00 00       	mov    al,ds:0x0	10007597: R_386_32	installKey
1000759b:	3c 0a                	cmp    al,0xa
1000759d:	0f 94 c0             	sete   al
100075a0:	84 c0                	test   al,al
100075a2:	75 1e                	jne    100075c2 <begin(void*)+0x1b6d>
100075a4:	83 ec 08             	sub    esp,0x8
100075a7:	6a 00                	push   0x0
100075a9:	68 f4 01 00 00       	push   0x1f4
100075ae:	e8 fc ff ff ff       	call   100075af <begin(void*)+0x1b5a>	100075af: R_386_PC32	milliTenthSleep(unsigned long long)
100075b3:	83 c4 10             	add    esp,0x10
100075b6:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100075b8: R_386_32	installKey
100075bd:	e9 ca fe ff ff       	jmp    1000748c <begin(void*)+0x1a37>
100075c2:	90                   	nop
100075c3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100075c6:	48                   	dec    eax
100075c7:	39 45 dc             	cmp    DWORD PTR [ebp-0x24],eax
100075ca:	0f 85 af 00 00 00    	jne    1000767f <begin(void*)+0x1c2a>
100075d0:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100075d2: R_386_32	createNewUserMode
100075d7:	83 ec 0c             	sub    esp,0xc
100075da:	6a 00                	push   0x0
100075dc:	e8 fc ff ff ff       	call   100075dd <begin(void*)+0x1b88>	100075dd: R_386_PC32	firstRun(bool)
100075e1:	83 c4 10             	add    esp,0x10
100075e4:	a0 00 00 00 00       	mov    al,ds:0x0	100075e5: R_386_32	createNewUserMode
100075e9:	83 f0 01             	xor    eax,0x1
100075ec:	84 c0                	test   al,al
100075ee:	0f 84 20 e7 ff ff    	je     10005d14 <begin(void*)+0x2bf>
100075f4:	a1 00 00 00 00       	mov    eax,ds:0x0	100075f5: R_386_32	term
100075f9:	05 82 00 00 00       	add    eax,0x82
100075fe:	83 ec 04             	sub    esp,0x4
10007601:	6a 04                	push   0x4
10007603:	6a 00                	push   0x0
10007605:	50                   	push   eax
10007606:	e8 fc ff ff ff       	call   10007607 <begin(void*)+0x1bb2>	10007607: R_386_PC32	memset
1000760b:	83 c4 10             	add    esp,0x10
1000760e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000760f: R_386_32	term
10007613:	05 02 01 00 00       	add    eax,0x102
10007618:	83 ec 04             	sub    esp,0x4
1000761b:	6a 04                	push   0x4
1000761d:	6a 00                	push   0x0
1000761f:	50                   	push   eax
10007620:	e8 fc ff ff ff       	call   10007621 <begin(void*)+0x1bcc>	10007621: R_386_PC32	memset
10007625:	83 c4 10             	add    esp,0x10
10007628:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000762a: R_386_32	installKey
1000762f:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
10007632:	e9 ac fb ff ff       	jmp    100071e3 <begin(void*)+0x178e>
10007637:	90                   	nop
10007638:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000763a: R_386_32	createNewUserMode
1000763f:	a1 00 00 00 00       	mov    eax,ds:0x0	10007640: R_386_32	term
10007644:	05 82 00 00 00       	add    eax,0x82
10007649:	83 ec 04             	sub    esp,0x4
1000764c:	6a 04                	push   0x4
1000764e:	6a 00                	push   0x0
10007650:	50                   	push   eax
10007651:	e8 fc ff ff ff       	call   10007652 <begin(void*)+0x1bfd>	10007652: R_386_PC32	memset
10007656:	83 c4 10             	add    esp,0x10
10007659:	a1 00 00 00 00       	mov    eax,ds:0x0	1000765a: R_386_32	term
1000765e:	05 02 01 00 00       	add    eax,0x102
10007663:	83 ec 04             	sub    esp,0x4
10007666:	6a 04                	push   0x4
10007668:	6a 00                	push   0x0
1000766a:	50                   	push   eax
1000766b:	e8 fc ff ff ff       	call   1000766c <begin(void*)+0x1c17>	1000766c: R_386_PC32	memset
10007670:	83 c4 10             	add    esp,0x10
10007673:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10007675: R_386_32	installKey
1000767a:	e9 64 fb ff ff       	jmp    100071e3 <begin(void*)+0x178e>
1000767f:	83 ec 08             	sub    esp,0x8
10007682:	68 82 b8 00 10       	push   0x1000b882	10007683: R_386_32	.text
10007687:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
1000768d:	50                   	push   eax
1000768e:	e8 fc ff ff ff       	call   1000768f <begin(void*)+0x1c3a>	1000768f: R_386_PC32	strcpy
10007693:	83 c4 10             	add    esp,0x10
10007696:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10007699:	8b 84 85 c0 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x640]
100076a0:	83 ec 08             	sub    esp,0x8
100076a3:	50                   	push   eax
100076a4:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
100076aa:	50                   	push   eax
100076ab:	e8 fc ff ff ff       	call   100076ac <begin(void*)+0x1c57>	100076ac: R_386_PC32	strcat
100076b0:	83 c4 10             	add    esp,0x10
100076b3:	83 ec 08             	sub    esp,0x8
100076b6:	68 bb bb 00 10       	push   0x1000bbbb	100076b7: R_386_32	.text
100076bb:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
100076c1:	50                   	push   eax
100076c2:	e8 fc ff ff ff       	call   100076c3 <begin(void*)+0x1c6e>	100076c3: R_386_PC32	strcat
100076c7:	83 c4 10             	add    esp,0x10
100076ca:	83 ec 0c             	sub    esp,0xc
100076cd:	68 44 b8 00 10       	push   0x1000b844	100076ce: R_386_32	.text
100076d2:	e8 fc ff ff ff       	call   100076d3 <begin(void*)+0x1c7e>	100076d3: R_386_PC32	CmOpen(char const*)
100076d7:	83 c4 10             	add    esp,0x10
100076da:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
100076dd:	83 ec 08             	sub    esp,0x8
100076e0:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
100076e6:	50                   	push   eax
100076e7:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100076ea:	e8 fc ff ff ff       	call   100076eb <begin(void*)+0x1c96>	100076eb: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100076ef:	83 c4 10             	add    esp,0x10
100076f2:	83 ec 04             	sub    esp,0x4
100076f5:	8d 95 c2 fa ff ff    	lea    edx,[ebp-0x53e]
100076fb:	52                   	push   edx
100076fc:	50                   	push   eax
100076fd:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007700:	e8 fc ff ff ff       	call   10007701 <begin(void*)+0x1cac>	10007701: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10007705:	83 c4 10             	add    esp,0x10
10007708:	83 ec 08             	sub    esp,0x8
1000770b:	68 82 b8 00 10       	push   0x1000b882	1000770c: R_386_32	.text
10007710:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
10007716:	50                   	push   eax
10007717:	e8 fc ff ff ff       	call   10007718 <begin(void*)+0x1cc3>	10007718: R_386_PC32	strcpy
1000771c:	83 c4 10             	add    esp,0x10
1000771f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10007722:	8b 84 85 c0 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x640]
10007729:	83 ec 08             	sub    esp,0x8
1000772c:	50                   	push   eax
1000772d:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
10007733:	50                   	push   eax
10007734:	e8 fc ff ff ff       	call   10007735 <begin(void*)+0x1ce0>	10007735: R_386_PC32	strcat
10007739:	83 c4 10             	add    esp,0x10
1000773c:	83 ec 08             	sub    esp,0x8
1000773f:	68 c5 bb 00 10       	push   0x1000bbc5	10007740: R_386_32	.text
10007744:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
1000774a:	50                   	push   eax
1000774b:	e8 fc ff ff ff       	call   1000774c <begin(void*)+0x1cf7>	1000774c: R_386_PC32	strcat
10007750:	83 c4 10             	add    esp,0x10
10007753:	83 ec 08             	sub    esp,0x8
10007756:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
1000775c:	50                   	push   eax
1000775d:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007760:	e8 fc ff ff ff       	call   10007761 <begin(void*)+0x1d0c>	10007761: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10007765:	83 c4 10             	add    esp,0x10
10007768:	83 ec 04             	sub    esp,0x4
1000776b:	8d 95 f0 f8 ff ff    	lea    edx,[ebp-0x710]
10007771:	52                   	push   edx
10007772:	50                   	push   eax
10007773:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007776:	e8 fc ff ff ff       	call   10007777 <begin(void*)+0x1d22>	10007777: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
1000777b:	83 c4 10             	add    esp,0x10
1000777e:	83 ec 0c             	sub    esp,0xc
10007781:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10007784:	e8 fc ff ff ff       	call   10007785 <begin(void*)+0x1d30>	10007785: R_386_PC32	CmClose(Reghive_Tag*)
10007789:	83 c4 10             	add    esp,0x10
1000778c:	83 ec 04             	sub    esp,0x4
1000778f:	68 80 00 00 00       	push   0x80
10007794:	6a 00                	push   0x0
10007796:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
1000779c:	50                   	push   eax
1000779d:	e8 fc ff ff ff       	call   1000779e <begin(void*)+0x1d49>	1000779e: R_386_PC32	memset
100077a2:	83 c4 10             	add    esp,0x10
100077a5:	e8 fc ff ff ff       	call   100077a6 <begin(void*)+0x1d51>	100077a6: R_386_PC32	drawBootScreen()
100077aa:	83 ec 08             	sub    esp,0x8
100077ad:	6a 01                	push   0x1
100077af:	68 2b bd 00 10       	push   0x1000bd2b	100077b0: R_386_32	.text
100077b4:	6a 10                	push   0x10
100077b6:	6a 39                	push   0x39
100077b8:	6a 03                	push   0x3
100077ba:	6a 0c                	push   0xc
100077bc:	e8 fc ff ff ff       	call   100077bd <begin(void*)+0x1d68>	100077bd: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
100077c1:	83 c4 20             	add    esp,0x20
100077c4:	a1 00 00 00 00       	mov    eax,ds:0x0	100077c5: R_386_32	term
100077c9:	83 ec 04             	sub    esp,0x4
100077cc:	6a 06                	push   0x6
100077ce:	6a 0e                	push   0xe
100077d0:	50                   	push   eax
100077d1:	e8 fc ff ff ff       	call   100077d2 <begin(void*)+0x1d7d>	100077d2: R_386_PC32	VgaText::setCursor(int, int)
100077d6:	83 c4 10             	add    esp,0x10
100077d9:	a1 00 00 00 00       	mov    eax,ds:0x0	100077da: R_386_32	term
100077de:	6a 07                	push   0x7
100077e0:	6a 00                	push   0x0
100077e2:	68 34 bd 00 10       	push   0x1000bd34	100077e3: R_386_32	.text
100077e7:	50                   	push   eax
100077e8:	e8 fc ff ff ff       	call   100077e9 <begin(void*)+0x1d94>	100077e9: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100077ed:	83 c4 10             	add    esp,0x10
100077f0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100077f4:	7e 72                	jle    10007868 <begin(void*)+0x1e13>
100077f6:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
100077fd:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10007800:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
10007803:	7d 63                	jge    10007868 <begin(void*)+0x1e13>
10007805:	a1 00 00 00 00       	mov    eax,ds:0x0	10007806: R_386_32	term
1000780a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
1000780d:	83 c2 08             	add    edx,0x8
10007810:	83 ec 04             	sub    esp,0x4
10007813:	52                   	push   edx
10007814:	6a 0f                	push   0xf
10007816:	50                   	push   eax
10007817:	e8 fc ff ff ff       	call   10007818 <begin(void*)+0x1dc3>	10007818: R_386_PC32	VgaText::setCursor(int, int)
1000781c:	83 c4 10             	add    esp,0x10
1000781f:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10007821: R_386_32	term
10007825:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10007828:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
1000782b:	75 07                	jne    10007834 <begin(void*)+0x1ddf>
1000782d:	b9 00 00 00 00       	mov    ecx,0x0
10007832:	eb 05                	jmp    10007839 <begin(void*)+0x1de4>
10007834:	b9 07 00 00 00       	mov    ecx,0x7
10007839:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
1000783c:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
1000783f:	75 07                	jne    10007848 <begin(void*)+0x1df3>
10007841:	ba 07 00 00 00       	mov    edx,0x7
10007846:	eb 05                	jmp    1000784d <begin(void*)+0x1df8>
10007848:	ba 00 00 00 00       	mov    edx,0x0
1000784d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10007850:	8b 84 85 40 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6c0]
10007857:	51                   	push   ecx
10007858:	52                   	push   edx
10007859:	50                   	push   eax
1000785a:	53                   	push   ebx
1000785b:	e8 fc ff ff ff       	call   1000785c <begin(void*)+0x1e07>	1000785c: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10007860:	83 c4 10             	add    esp,0x10
10007863:	ff 45 d0             	inc    DWORD PTR [ebp-0x30]
10007866:	eb 95                	jmp    100077fd <begin(void*)+0x1da8>
10007868:	83 ec 0c             	sub    esp,0xc
1000786b:	68 2b bd 00 10       	push   0x1000bd2b	1000786c: R_386_32	.text
10007870:	6a 0b                	push   0xb
10007872:	6a 2d                	push   0x2d
10007874:	6a 0a                	push   0xa
10007876:	6a 1c                	push   0x1c
10007878:	e8 fc ff ff ff       	call   10007879 <begin(void*)+0x1e24>	10007879: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000787d:	83 c4 20             	add    esp,0x20
10007880:	c6 45 cf 01          	mov    BYTE PTR [ebp-0x31],0x1
10007884:	83 ec 04             	sub    esp,0x4
10007887:	8d 85 42 fb ff ff    	lea    eax,[ebp-0x4be]
1000788d:	50                   	push   eax
1000788e:	8d 85 f0 f8 ff ff    	lea    eax,[ebp-0x710]
10007894:	50                   	push   eax
10007895:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
1000789b:	50                   	push   eax
1000789c:	e8 fc ff ff ff       	call   1000789d <begin(void*)+0x1e48>	1000789d: R_386_PC32	bcrypt_hashpw
100078a1:	83 c4 10             	add    esp,0x10
100078a4:	83 ec 08             	sub    esp,0x8
100078a7:	8d 85 42 fb ff ff    	lea    eax,[ebp-0x4be]
100078ad:	50                   	push   eax
100078ae:	8d 85 c2 fa ff ff    	lea    eax,[ebp-0x53e]
100078b4:	50                   	push   eax
100078b5:	e8 fc ff ff ff       	call   100078b6 <begin(void*)+0x1e61>	100078b6: R_386_PC32	strcmp
100078ba:	83 c4 10             	add    esp,0x10
100078bd:	85 c0                	test   eax,eax
100078bf:	75 04                	jne    100078c5 <begin(void*)+0x1e70>
100078c1:	c6 45 cf 00          	mov    BYTE PTR [ebp-0x31],0x0
100078c5:	83 ec 04             	sub    esp,0x4
100078c8:	68 80 00 00 00       	push   0x80
100078cd:	6a 00                	push   0x0
100078cf:	8d 85 42 fb ff ff    	lea    eax,[ebp-0x4be]
100078d5:	50                   	push   eax
100078d6:	e8 fc ff ff ff       	call   100078d7 <begin(void*)+0x1e82>	100078d7: R_386_PC32	memset
100078db:	83 c4 10             	add    esp,0x10
100078de:	80 7d cf 00          	cmp    BYTE PTR [ebp-0x31],0x0
100078e2:	0f 84 9c 02 00 00    	je     10007b84 <begin(void*)+0x212f>
100078e8:	a1 00 00 00 00       	mov    eax,ds:0x0	100078e9: R_386_32	term
100078ed:	83 ec 04             	sub    esp,0x4
100078f0:	6a 0d                	push   0xd
100078f2:	6a 1e                	push   0x1e
100078f4:	50                   	push   eax
100078f5:	e8 fc ff ff ff       	call   100078f6 <begin(void*)+0x1ea1>	100078f6: R_386_PC32	VgaText::setCursor(int, int)
100078fa:	83 c4 10             	add    esp,0x10
100078fd:	a1 00 00 00 00       	mov    eax,ds:0x0	100078fe: R_386_32	term
10007902:	83 ec 08             	sub    esp,0x8
10007905:	68 64 bd 00 10       	push   0x1000bd64	10007906: R_386_32	.text
1000790a:	50                   	push   eax
1000790b:	e8 fc ff ff ff       	call   1000790c <begin(void*)+0x1eb7>	1000790c: R_386_PC32	VgaText::puts(char const*)
10007910:	83 c4 10             	add    esp,0x10
10007913:	a1 00 00 00 00       	mov    eax,ds:0x0	10007914: R_386_32	term
10007918:	83 ec 04             	sub    esp,0x4
1000791b:	6a 0e                	push   0xe
1000791d:	6a 1e                	push   0x1e
1000791f:	50                   	push   eax
10007920:	e8 fc ff ff ff       	call   10007921 <begin(void*)+0x1ecc>	10007921: R_386_PC32	VgaText::setCursor(int, int)
10007925:	83 c4 10             	add    esp,0x10
10007928:	a1 00 00 00 00       	mov    eax,ds:0x0	10007929: R_386_32	term
1000792d:	83 ec 08             	sub    esp,0x8
10007930:	68 8e bd 00 10       	push   0x1000bd8e	10007931: R_386_32	.text
10007935:	50                   	push   eax
10007936:	e8 fc ff ff ff       	call   10007937 <begin(void*)+0x1ee2>	10007937: R_386_PC32	VgaText::puts(char const*)
1000793b:	83 c4 10             	add    esp,0x10
1000793e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000793f: R_386_32	term
10007943:	83 ec 04             	sub    esp,0x4
10007946:	6a 10                	push   0x10
10007948:	6a 1e                	push   0x1e
1000794a:	50                   	push   eax
1000794b:	e8 fc ff ff ff       	call   1000794c <begin(void*)+0x1ef7>	1000794c: R_386_PC32	VgaText::setCursor(int, int)
10007950:	83 c4 10             	add    esp,0x10
10007953:	a1 00 00 00 00       	mov    eax,ds:0x0	10007954: R_386_32	term
10007958:	6a 07                	push   0x7
1000795a:	6a 00                	push   0x0
1000795c:	68 9c b3 00 10       	push   0x1000b39c	1000795d: R_386_32	.text
10007961:	50                   	push   eax
10007962:	e8 fc ff ff ff       	call   10007963 <begin(void*)+0x1f0e>	10007963: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10007967:	83 c4 10             	add    esp,0x10
1000796a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000796b: R_386_32	term
1000796f:	83 ec 08             	sub    esp,0x8
10007972:	6a 1e                	push   0x1e
10007974:	50                   	push   eax
10007975:	e8 fc ff ff ff       	call   10007976 <begin(void*)+0x1f21>	10007976: R_386_PC32	VgaText::setCursorX(int)
1000797a:	83 c4 10             	add    esp,0x10
1000797d:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
10007984:	83 ec 0c             	sub    esp,0xc
10007987:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
1000798d:	50                   	push   eax
1000798e:	e8 fc ff ff ff       	call   1000798f <begin(void*)+0x1f3a>	1000798f: R_386_PC32	strlen
10007993:	83 c4 10             	add    esp,0x10
10007996:	89 c2                	mov    edx,eax
10007998:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
1000799b:	39 c2                	cmp    edx,eax
1000799d:	76 1c                	jbe    100079bb <begin(void*)+0x1f66>
1000799f:	a1 00 00 00 00       	mov    eax,ds:0x0	100079a0: R_386_32	term
100079a4:	6a 07                	push   0x7
100079a6:	6a 00                	push   0x0
100079a8:	68 c8 b3 00 10       	push   0x1000b3c8	100079a9: R_386_32	.text
100079ad:	50                   	push   eax
100079ae:	e8 fc ff ff ff       	call   100079af <begin(void*)+0x1f5a>	100079af: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100079b3:	83 c4 10             	add    esp,0x10
100079b6:	ff 45 c8             	inc    DWORD PTR [ebp-0x38]
100079b9:	eb c9                	jmp    10007984 <begin(void*)+0x1f2f>
100079bb:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	100079bd: R_386_32	term
100079c1:	83 ec 0c             	sub    esp,0xc
100079c4:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
100079ca:	50                   	push   eax
100079cb:	e8 fc ff ff ff       	call   100079cc <begin(void*)+0x1f77>	100079cc: R_386_PC32	strlen
100079d0:	83 c4 10             	add    esp,0x10
100079d3:	83 c0 1e             	add    eax,0x1e
100079d6:	83 ec 04             	sub    esp,0x4
100079d9:	6a 10                	push   0x10
100079db:	50                   	push   eax
100079dc:	53                   	push   ebx
100079dd:	e8 fc ff ff ff       	call   100079de <begin(void*)+0x1f89>	100079de: R_386_PC32	VgaText::setCursor(int, int)
100079e2:	83 c4 10             	add    esp,0x10
100079e5:	a0 00 00 00 00       	mov    al,ds:0x0	100079e6: R_386_32	installKey
100079ea:	84 c0                	test   al,al
100079ec:	0f 94 c0             	sete   al
100079ef:	84 c0                	test   al,al
100079f1:	74 02                	je     100079f5 <begin(void*)+0x1fa0>
100079f3:	eb f0                	jmp    100079e5 <begin(void*)+0x1f90>
100079f5:	a1 00 00 00 00       	mov    eax,ds:0x0	100079f6: R_386_32	term
100079fa:	05 82 00 00 00       	add    eax,0x82
100079ff:	83 ec 04             	sub    esp,0x4
10007a02:	6a 10                	push   0x10
10007a04:	6a 00                	push   0x0
10007a06:	50                   	push   eax
10007a07:	e8 fc ff ff ff       	call   10007a08 <begin(void*)+0x1fb3>	10007a08: R_386_PC32	memset
10007a0c:	83 c4 10             	add    esp,0x10
10007a0f:	a1 00 00 00 00       	mov    eax,ds:0x0	10007a10: R_386_32	term
10007a14:	05 02 01 00 00       	add    eax,0x102
10007a19:	83 ec 04             	sub    esp,0x4
10007a1c:	6a 10                	push   0x10
10007a1e:	6a 00                	push   0x0
10007a20:	50                   	push   eax
10007a21:	e8 fc ff ff ff       	call   10007a22 <begin(void*)+0x1fcd>	10007a22: R_386_PC32	memset
10007a26:	83 c4 10             	add    esp,0x10
10007a29:	a0 00 00 00 00       	mov    al,ds:0x0	10007a2a: R_386_32	installKey
10007a2e:	3c 0a                	cmp    al,0xa
10007a30:	0f 94 c0             	sete   al
10007a33:	84 c0                	test   al,al
10007a35:	0f 84 88 00 00 00    	je     10007ac3 <begin(void*)+0x206e>
10007a3b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10007a3d: R_386_32	installKey
10007a42:	83 ec 04             	sub    esp,0x4
10007a45:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10007a4b:	50                   	push   eax
10007a4c:	8d 85 f0 f8 ff ff    	lea    eax,[ebp-0x710]
10007a52:	50                   	push   eax
10007a53:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
10007a59:	50                   	push   eax
10007a5a:	e8 fc ff ff ff       	call   10007a5b <begin(void*)+0x2006>	10007a5b: R_386_PC32	bcrypt_hashpw
10007a5f:	83 c4 10             	add    esp,0x10
10007a62:	8d 85 f0 f8 ff ff    	lea    eax,[ebp-0x710]
10007a68:	50                   	push   eax
10007a69:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10007a6f:	50                   	push   eax
10007a70:	8d 85 c2 fa ff ff    	lea    eax,[ebp-0x53e]
10007a76:	50                   	push   eax
10007a77:	68 a8 bd 00 10       	push   0x1000bda8	10007a78: R_386_32	.text
10007a7c:	e8 fc ff ff ff       	call   10007a7d <begin(void*)+0x2028>	10007a7d: R_386_PC32	Dbg::kprintf(char const*, ...)
10007a81:	83 c4 10             	add    esp,0x10
10007a84:	83 ec 08             	sub    esp,0x8
10007a87:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10007a8d:	50                   	push   eax
10007a8e:	8d 85 c2 fa ff ff    	lea    eax,[ebp-0x53e]
10007a94:	50                   	push   eax
10007a95:	e8 fc ff ff ff       	call   10007a96 <begin(void*)+0x2041>	10007a96: R_386_PC32	strcmp
10007a9a:	83 c4 10             	add    esp,0x10
10007a9d:	85 c0                	test   eax,eax
10007a9f:	0f 84 de 00 00 00    	je     10007b83 <begin(void*)+0x212e>
10007aa5:	83 ec 04             	sub    esp,0x4
10007aa8:	68 80 00 00 00       	push   0x80
10007aad:	6a 00                	push   0x0
10007aaf:	8d 85 c2 fb ff ff    	lea    eax,[ebp-0x43e]
10007ab5:	50                   	push   eax
10007ab6:	e8 fc ff ff ff       	call   10007ab7 <begin(void*)+0x2062>	10007ab7: R_386_PC32	memset
10007abb:	83 c4 10             	add    esp,0x10
10007abe:	e9 b4 00 00 00       	jmp    10007b77 <begin(void*)+0x2122>
10007ac3:	a0 00 00 00 00       	mov    al,ds:0x0	10007ac4: R_386_32	installKey
10007ac8:	3c 1f                	cmp    al,0x1f
10007aca:	7e 0d                	jle    10007ad9 <begin(void*)+0x2084>
10007acc:	a0 00 00 00 00       	mov    al,ds:0x0	10007acd: R_386_32	installKey
10007ad1:	3c 7f                	cmp    al,0x7f
10007ad3:	74 04                	je     10007ad9 <begin(void*)+0x2084>
10007ad5:	b0 01                	mov    al,0x1
10007ad7:	eb 02                	jmp    10007adb <begin(void*)+0x2086>
10007ad9:	b0 00                	mov    al,0x0
10007adb:	84 c0                	test   al,al
10007add:	74 44                	je     10007b23 <begin(void*)+0x20ce>
10007adf:	a0 00 00 00 00       	mov    al,ds:0x0	10007ae0: R_386_32	installKey
10007ae4:	88 85 c2 fc ff ff    	mov    BYTE PTR [ebp-0x33e],al
10007aea:	c6 85 c3 fc ff ff 00 	mov    BYTE PTR [ebp-0x33d],0x0
10007af1:	83 ec 0c             	sub    esp,0xc
10007af4:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
10007afa:	50                   	push   eax
10007afb:	e8 fc ff ff ff       	call   10007afc <begin(void*)+0x20a7>	10007afc: R_386_PC32	strlen
10007b00:	83 c4 10             	add    esp,0x10
10007b03:	83 f8 22             	cmp    eax,0x22
10007b06:	77 6f                	ja     10007b77 <begin(void*)+0x2122>
10007b08:	83 ec 08             	sub    esp,0x8
10007b0b:	8d 85 c2 fc ff ff    	lea    eax,[ebp-0x33e]
10007b11:	50                   	push   eax
10007b12:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
10007b18:	50                   	push   eax
10007b19:	e8 fc ff ff ff       	call   10007b1a <begin(void*)+0x20c5>	10007b1a: R_386_PC32	strcat
10007b1e:	83 c4 10             	add    esp,0x10
10007b21:	eb 54                	jmp    10007b77 <begin(void*)+0x2122>
10007b23:	a0 00 00 00 00       	mov    al,ds:0x0	10007b24: R_386_32	installKey
10007b28:	3c 08                	cmp    al,0x8
10007b2a:	0f 94 c0             	sete   al
10007b2d:	84 c0                	test   al,al
10007b2f:	74 33                	je     10007b64 <begin(void*)+0x210f>
10007b31:	83 ec 0c             	sub    esp,0xc
10007b34:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
10007b3a:	50                   	push   eax
10007b3b:	e8 fc ff ff ff       	call   10007b3c <begin(void*)+0x20e7>	10007b3c: R_386_PC32	strlen
10007b40:	83 c4 10             	add    esp,0x10
10007b43:	85 c0                	test   eax,eax
10007b45:	74 30                	je     10007b77 <begin(void*)+0x2122>
10007b47:	83 ec 0c             	sub    esp,0xc
10007b4a:	8d 85 42 fa ff ff    	lea    eax,[ebp-0x5be]
10007b50:	50                   	push   eax
10007b51:	e8 fc ff ff ff       	call   10007b52 <begin(void*)+0x20fd>	10007b52: R_386_PC32	strlen
10007b56:	83 c4 10             	add    esp,0x10
10007b59:	48                   	dec    eax
10007b5a:	c6 84 05 42 fa ff ff 00 	mov    BYTE PTR [ebp+eax*1-0x5be],0x0
10007b62:	eb 13                	jmp    10007b77 <begin(void*)+0x2122>
10007b64:	a0 00 00 00 00       	mov    al,ds:0x0	10007b65: R_386_32	installKey
10007b69:	3c 1b                	cmp    al,0x1b
10007b6b:	0f 94 c0             	sete   al
10007b6e:	84 c0                	test   al,al
10007b70:	74 05                	je     10007b77 <begin(void*)+0x2122>
10007b72:	e9 c5 f8 ff ff       	jmp    1000743c <begin(void*)+0x19e7>
10007b77:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10007b79: R_386_32	installKey
10007b7e:	e9 5b fd ff ff       	jmp    100078de <begin(void*)+0x1e89>
10007b83:	90                   	nop
10007b84:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10007b86: R_386_32	guiKeyboardHandler
10007b8e:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x0
10007b95:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007b98:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
10007b9b:	7d 69                	jge    10007c06 <begin(void*)+0x21b1>
10007b9d:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007ba0:	8b 84 85 40 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6c0]
10007ba7:	85 c0                	test   eax,eax
10007ba9:	74 24                	je     10007bcf <begin(void*)+0x217a>
10007bab:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007bae:	8b 84 85 40 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6c0]
10007bb5:	83 ec 0c             	sub    esp,0xc
10007bb8:	50                   	push   eax
10007bb9:	e8 fc ff ff ff       	call   10007bba <begin(void*)+0x2165>	10007bba: R_386_PC32	free
10007bbe:	83 c4 10             	add    esp,0x10
10007bc1:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007bc4:	c7 84 85 40 f9 ff ff 00 00 00 00 	mov    DWORD PTR [ebp+eax*4-0x6c0],0x0
10007bcf:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007bd2:	8b 84 85 c0 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x640]
10007bd9:	85 c0                	test   eax,eax
10007bdb:	74 24                	je     10007c01 <begin(void*)+0x21ac>
10007bdd:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007be0:	8b 84 85 c0 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x640]
10007be7:	83 ec 0c             	sub    esp,0xc
10007bea:	50                   	push   eax
10007beb:	e8 fc ff ff ff       	call   10007bec <begin(void*)+0x2197>	10007bec: R_386_PC32	free
10007bf0:	83 c4 10             	add    esp,0x10
10007bf3:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007bf6:	c7 84 85 c0 f9 ff ff 00 00 00 00 	mov    DWORD PTR [ebp+eax*4-0x640],0x0
10007c01:	ff 45 c4             	inc    DWORD PTR [ebp-0x3c]
10007c04:	eb 8f                	jmp    10007b95 <begin(void*)+0x2140>
10007c06:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10007c08: R_386_32	VgaText::hiddenOut
10007c0d:	83 ec 0c             	sub    esp,0xc
10007c10:	68 84 07 00 00       	push   0x784
10007c15:	e8 fc ff ff ff       	call   10007c16 <begin(void*)+0x21c1>	10007c16: R_386_PC32	operator new(unsigned long)
10007c1a:	83 c4 10             	add    esp,0x10
10007c1d:	89 c3                	mov    ebx,eax
10007c1f:	6a 00                	push   0x0
10007c21:	6a 00                	push   0x0
10007c23:	68 1a b8 00 10       	push   0x1000b81a	10007c24: R_386_32	.text
10007c28:	53                   	push   ebx
10007c29:	e8 fc ff ff ff       	call   10007c2a <begin(void*)+0x21d5>	10007c2a: R_386_PC32	Process::Process(char const*, Process*, char**)
10007c2e:	83 c4 10             	add    esp,0x10
10007c31:	89 5d ac             	mov    DWORD PTR [ebp-0x54],ebx
10007c34:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10007c37:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
10007c3d:	83 ec 0c             	sub    esp,0xc
10007c40:	50                   	push   eax
10007c41:	e8 fc ff ff ff       	call   10007c42 <begin(void*)+0x21ed>	10007c42: R_386_PC32	setActiveTerminal(VgaText*)
10007c46:	83 c4 10             	add    esp,0x10
10007c49:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [ebp-0x40],0x0
10007c50:	83 7d c0 18          	cmp    DWORD PTR [ebp-0x40],0x18
10007c54:	7f 2e                	jg     10007c84 <begin(void*)+0x222f>
10007c56:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [ebp-0x44],0x0
10007c5d:	83 7d bc 4f          	cmp    DWORD PTR [ebp-0x44],0x4f
10007c61:	7f 1c                	jg     10007c7f <begin(void*)+0x222a>
10007c63:	83 ec 0c             	sub    esp,0xc
10007c66:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10007c69:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10007c6c:	6a 00                	push   0x0
10007c6e:	6a 07                	push   0x7
10007c70:	6a 20                	push   0x20
10007c72:	e8 fc ff ff ff       	call   10007c73 <begin(void*)+0x221e>	10007c73: R_386_PC32	HalConsoleWriteCharacter(char, int, int, int, int)
10007c77:	83 c4 20             	add    esp,0x20
10007c7a:	ff 45 bc             	inc    DWORD PTR [ebp-0x44]
10007c7d:	eb de                	jmp    10007c5d <begin(void*)+0x2208>
10007c7f:	ff 45 c0             	inc    DWORD PTR [ebp-0x40]
10007c82:	eb cc                	jmp    10007c50 <begin(void*)+0x21fb>
10007c84:	a0 00 00 00 00       	mov    al,ds:0x0	10007c85: R_386_32	safemode
10007c89:	84 c0                	test   al,al
10007c8b:	74 40                	je     10007ccd <begin(void*)+0x2278>
10007c8d:	c7 45 b8 00 00 00 00 	mov    DWORD PTR [ebp-0x48],0x0
10007c94:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10007c97:	05 18 be 00 10       	add    eax,0x1000be18	10007c98: R_386_32	.text
10007c9c:	8a 00                	mov    al,BYTE PTR [eax]
10007c9e:	84 c0                	test   al,al
10007ca0:	74 2b                	je     10007ccd <begin(void*)+0x2278>
10007ca2:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10007ca5:	8d 50 44             	lea    edx,[eax+0x44]
10007ca8:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10007cab:	05 18 be 00 10       	add    eax,0x1000be18	10007cac: R_386_32	.text
10007cb0:	8a 00                	mov    al,BYTE PTR [eax]
10007cb2:	0f be c0             	movsx  eax,al
10007cb5:	83 ec 0c             	sub    esp,0xc
10007cb8:	6a 17                	push   0x17
10007cba:	52                   	push   edx
10007cbb:	6a 00                	push   0x0
10007cbd:	6a 0f                	push   0xf
10007cbf:	50                   	push   eax
10007cc0:	e8 fc ff ff ff       	call   10007cc1 <begin(void*)+0x226c>	10007cc1: R_386_PC32	HalConsoleWriteCharacter(char, int, int, int, int)
10007cc5:	83 c4 20             	add    esp,0x20
10007cc8:	ff 45 b8             	inc    DWORD PTR [ebp-0x48]
10007ccb:	eb c7                	jmp    10007c94 <begin(void*)+0x223f>
10007ccd:	83 ec 0c             	sub    esp,0xc
10007cd0:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
10007cd3:	e8 fc ff ff ff       	call   10007cd4 <begin(void*)+0x227f>	10007cd4: R_386_PC32	Process::createUserThread()
10007cd8:	83 c4 10             	add    esp,0x10
10007cdb:	a0 00 00 00 00       	mov    al,ds:0x0	10007cdc: R_386_32	safemode
10007ce0:	83 f0 01             	xor    eax,0x1
10007ce3:	84 c0                	test   al,al
10007ce5:	0f 84 9a 00 00 00    	je     10007d85 <begin(void*)+0x2330>
10007ceb:	8b 85 c8 fc ff ff    	mov    eax,DWORD PTR [ebp-0x338]
10007cf1:	8b 95 cc fc ff ff    	mov    edx,DWORD PTR [ebp-0x334]
10007cf7:	89 c6                	mov    esi,eax
10007cf9:	83 f6 01             	xor    esi,0x1
10007cfc:	89 b5 90 f8 ff ff    	mov    DWORD PTR [ebp-0x770],esi
10007d02:	89 d0                	mov    eax,edx
10007d04:	80 f4 00             	xor    ah,0x0
10007d07:	89 85 94 f8 ff ff    	mov    DWORD PTR [ebp-0x76c],eax
10007d0d:	8b b5 90 f8 ff ff    	mov    esi,DWORD PTR [ebp-0x770]
10007d13:	8b bd 94 f8 ff ff    	mov    edi,DWORD PTR [ebp-0x76c]
10007d19:	89 f8                	mov    eax,edi
10007d1b:	09 f0                	or     eax,esi
10007d1d:	85 c0                	test   eax,eax
10007d1f:	75 17                	jne    10007d38 <begin(void*)+0x22e3>
10007d21:	a1 00 00 00 00       	mov    eax,ds:0x0	10007d22: R_386_32	kernelProcess
10007d26:	6a 01                	push   0x1
10007d28:	6a 00                	push   0x0
10007d2a:	68 00 00 00 00       	push   0x0	10007d2b: R_386_32	startGUI(void*)
10007d2f:	50                   	push   eax
10007d30:	e8 fc ff ff ff       	call   10007d31 <begin(void*)+0x22dc>	10007d31: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10007d35:	83 c4 10             	add    esp,0x10
10007d38:	8b 85 c8 fc ff ff    	mov    eax,DWORD PTR [ebp-0x338]
10007d3e:	8b 95 cc fc ff ff    	mov    edx,DWORD PTR [ebp-0x334]
10007d44:	89 c7                	mov    edi,eax
10007d46:	83 f7 02             	xor    edi,0x2
10007d49:	89 bd 88 f8 ff ff    	mov    DWORD PTR [ebp-0x778],edi
10007d4f:	89 d0                	mov    eax,edx
10007d51:	80 f4 00             	xor    ah,0x0
10007d54:	89 85 8c f8 ff ff    	mov    DWORD PTR [ebp-0x774],eax
10007d5a:	8b b5 88 f8 ff ff    	mov    esi,DWORD PTR [ebp-0x778]
10007d60:	8b bd 8c f8 ff ff    	mov    edi,DWORD PTR [ebp-0x774]
10007d66:	89 f8                	mov    eax,edi
10007d68:	09 f0                	or     eax,esi
10007d6a:	85 c0                	test   eax,eax
10007d6c:	75 17                	jne    10007d85 <begin(void*)+0x2330>
10007d6e:	a1 00 00 00 00       	mov    eax,ds:0x0	10007d6f: R_386_32	kernelProcess
10007d73:	6a 01                	push   0x1
10007d75:	6a 00                	push   0x0
10007d77:	68 00 00 00 00       	push   0x0	10007d78: R_386_32	startGUIVESA(void*)
10007d7c:	50                   	push   eax
10007d7d:	e8 fc ff ff ff       	call   10007d7e <begin(void*)+0x2329>	10007d7e: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10007d82:	83 c4 10             	add    esp,0x10
10007d85:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10007d88:	8b 00                	mov    eax,DWORD PTR [eax]
10007d8a:	83 ec 04             	sub    esp,0x4
10007d8d:	6a 00                	push   0x0
10007d8f:	8d 95 c4 fc ff ff    	lea    edx,[ebp-0x33c]
10007d95:	52                   	push   edx
10007d96:	50                   	push   eax
10007d97:	e8 fc ff ff ff       	call   10007d98 <begin(void*)+0x2343>	10007d98: R_386_PC32	waitTask(int, int*, int)
10007d9c:	83 c4 10             	add    esp,0x10
10007d9f:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10007da1: R_386_32	Krnl::computer
10007da5:	a1 00 00 00 00       	mov    eax,ds:0x0	10007da6: R_386_32	Krnl::computer
10007daa:	8b 00                	mov    eax,DWORD PTR [eax]
10007dac:	83 c0 0c             	add    eax,0xc
10007daf:	8b 00                	mov    eax,DWORD PTR [eax]
10007db1:	6a 00                	push   0x0
10007db3:	6a 00                	push   0x0
10007db5:	6a 00                	push   0x0
10007db7:	52                   	push   edx
10007db8:	ff d0                	call   eax
10007dba:	83 c4 10             	add    esp,0x10
10007dbd:	83 ec 0c             	sub    esp,0xc
10007dc0:	68 c8 bd 00 10       	push   0x1000bdc8	10007dc1: R_386_32	.text
10007dc5:	e8 fc ff ff ff       	call   10007dc6 <begin(void*)+0x2371>	10007dc6: R_386_PC32	KePanic(char const*)
10007dca:	83 c4 10             	add    esp,0x10
10007dcd:	eb fe                	jmp    10007dcd <begin(void*)+0x2378>

10007dcf <clean>:
10007dcf:	57                   	push   edi
10007dd0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10007dd4:	b0 00                	mov    al,0x0
10007dd6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10007dda:	f3 aa                	rep stos BYTE PTR es:[edi],al
10007ddc:	5f                   	pop    edi
10007ddd:	c3                   	ret    

10007dde <BF_decode>:
10007dde:	55                   	push   ebp
10007ddf:	57                   	push   edi
10007de0:	56                   	push   esi
10007de1:	53                   	push   ebx
10007de2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10007de6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10007dea:	89 d6                	mov    esi,edx
10007dec:	03 74 24 1c          	add    esi,DWORD PTR [esp+0x1c]
10007df0:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
10007df3:	83 e8 20             	sub    eax,0x20
10007df6:	83 f8 5f             	cmp    eax,0x5f
10007df9:	0f 87 a3 00 00 00    	ja     10007ea2 <BF_decode+0xc4>
10007dff:	8a 80 00 d0 00 10    	mov    al,BYTE PTR [eax+0x1000d000]	10007e01: R_386_32	.data
10007e05:	3c 3f                	cmp    al,0x3f
10007e07:	0f 87 9f 00 00 00    	ja     10007eac <BF_decode+0xce>
10007e0d:	0f b6 4b 01          	movzx  ecx,BYTE PTR [ebx+0x1]
10007e11:	83 e9 20             	sub    ecx,0x20
10007e14:	83 f9 5f             	cmp    ecx,0x5f
10007e17:	0f 87 96 00 00 00    	ja     10007eb3 <BF_decode+0xd5>
10007e1d:	8a 89 00 d0 00 10    	mov    cl,BYTE PTR [ecx+0x1000d000]	10007e1f: R_386_32	.data
10007e23:	0f b6 f9             	movzx  edi,cl
10007e26:	83 ff 3f             	cmp    edi,0x3f
10007e29:	0f 87 8b 00 00 00    	ja     10007eba <BF_decode+0xdc>
10007e2f:	c1 e0 02             	shl    eax,0x2
10007e32:	c1 ef 04             	shr    edi,0x4
10007e35:	09 f8                	or     eax,edi
10007e37:	88 02                	mov    BYTE PTR [edx],al
10007e39:	89 d7                	mov    edi,edx
10007e3b:	8d 42 01             	lea    eax,[edx+0x1]
10007e3e:	39 c6                	cmp    esi,eax
10007e40:	76 7f                	jbe    10007ec1 <BF_decode+0xe3>
10007e42:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
10007e46:	83 e8 20             	sub    eax,0x20
10007e49:	83 f8 5f             	cmp    eax,0x5f
10007e4c:	77 7a                	ja     10007ec8 <BF_decode+0xea>
10007e4e:	8a 80 00 d0 00 10    	mov    al,BYTE PTR [eax+0x1000d000]	10007e50: R_386_32	.data
10007e54:	0f b6 e8             	movzx  ebp,al
10007e57:	83 fd 3f             	cmp    ebp,0x3f
10007e5a:	77 73                	ja     10007ecf <BF_decode+0xf1>
10007e5c:	c1 e1 04             	shl    ecx,0x4
10007e5f:	c1 ed 02             	shr    ebp,0x2
10007e62:	09 e9                	or     ecx,ebp
10007e64:	88 4a 01             	mov    BYTE PTR [edx+0x1],cl
10007e67:	8d 52 02             	lea    edx,[edx+0x2]
10007e6a:	39 d6                	cmp    esi,edx
10007e6c:	76 68                	jbe    10007ed6 <BF_decode+0xf8>
10007e6e:	83 c3 04             	add    ebx,0x4
10007e71:	0f b6 53 ff          	movzx  edx,BYTE PTR [ebx-0x1]
10007e75:	83 ea 20             	sub    edx,0x20
10007e78:	83 fa 5f             	cmp    edx,0x5f
10007e7b:	77 60                	ja     10007edd <BF_decode+0xff>
10007e7d:	8a 8a 00 d0 00 10    	mov    cl,BYTE PTR [edx+0x1000d000]	10007e7f: R_386_32	.data
10007e83:	80 f9 3f             	cmp    cl,0x3f
10007e86:	77 5c                	ja     10007ee4 <BF_decode+0x106>
10007e88:	8d 57 03             	lea    edx,[edi+0x3]
10007e8b:	c1 e0 06             	shl    eax,0x6
10007e8e:	09 c1                	or     ecx,eax
10007e90:	88 4a ff             	mov    BYTE PTR [edx-0x1],cl
10007e93:	39 d6                	cmp    esi,edx
10007e95:	0f 87 55 ff ff ff    	ja     10007df0 <BF_decode+0x12>
10007e9b:	b8 00 00 00 00       	mov    eax,0x0
10007ea0:	eb 05                	jmp    10007ea7 <BF_decode+0xc9>
10007ea2:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007ea7:	5b                   	pop    ebx
10007ea8:	5e                   	pop    esi
10007ea9:	5f                   	pop    edi
10007eaa:	5d                   	pop    ebp
10007eab:	c3                   	ret    
10007eac:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007eb1:	eb f4                	jmp    10007ea7 <BF_decode+0xc9>
10007eb3:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007eb8:	eb ed                	jmp    10007ea7 <BF_decode+0xc9>
10007eba:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007ebf:	eb e6                	jmp    10007ea7 <BF_decode+0xc9>
10007ec1:	b8 00 00 00 00       	mov    eax,0x0
10007ec6:	eb df                	jmp    10007ea7 <BF_decode+0xc9>
10007ec8:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007ecd:	eb d8                	jmp    10007ea7 <BF_decode+0xc9>
10007ecf:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007ed4:	eb d1                	jmp    10007ea7 <BF_decode+0xc9>
10007ed6:	b8 00 00 00 00       	mov    eax,0x0
10007edb:	eb ca                	jmp    10007ea7 <BF_decode+0xc9>
10007edd:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007ee2:	eb c3                	jmp    10007ea7 <BF_decode+0xc9>
10007ee4:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007ee9:	eb bc                	jmp    10007ea7 <BF_decode+0xc9>

10007eeb <BF_encode>:
10007eeb:	55                   	push   ebp
10007eec:	57                   	push   edi
10007eed:	56                   	push   esi
10007eee:	53                   	push   ebx
10007eef:	83 ec 04             	sub    esp,0x4
10007ef2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10007ef6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10007efa:	89 c7                	mov    edi,eax
10007efc:	03 7c 24 20          	add    edi,DWORD PTR [esp+0x20]
10007f00:	89 3c 24             	mov    DWORD PTR [esp],edi
10007f03:	0f b6 10             	movzx  edx,BYTE PTR [eax]
10007f06:	89 d6                	mov    esi,edx
10007f08:	c1 ee 02             	shr    esi,0x2
10007f0b:	8a 9e a0 cf 00 10    	mov    bl,BYTE PTR [esi+0x1000cfa0]	10007f0d: R_386_32	.data
10007f11:	88 19                	mov    BYTE PTR [ecx],bl
10007f13:	c1 e2 04             	shl    edx,0x4
10007f16:	83 e2 30             	and    edx,0x30
10007f19:	89 c7                	mov    edi,eax
10007f1b:	8d 70 01             	lea    esi,[eax+0x1]
10007f1e:	39 34 24             	cmp    DWORD PTR [esp],esi
10007f21:	76 51                	jbe    10007f74 <BF_encode+0x89>
10007f23:	0f b6 70 01          	movzx  esi,BYTE PTR [eax+0x1]
10007f27:	89 f5                	mov    ebp,esi
10007f29:	c1 ed 04             	shr    ebp,0x4
10007f2c:	09 ea                	or     edx,ebp
10007f2e:	8a 9a a0 cf 00 10    	mov    bl,BYTE PTR [edx+0x1000cfa0]	10007f30: R_386_32	.data
10007f34:	88 59 01             	mov    BYTE PTR [ecx+0x1],bl
10007f37:	c1 e6 02             	shl    esi,0x2
10007f3a:	83 e6 3c             	and    esi,0x3c
10007f3d:	83 c0 02             	add    eax,0x2
10007f40:	39 04 24             	cmp    DWORD PTR [esp],eax
10007f43:	76 40                	jbe    10007f85 <BF_encode+0x9a>
10007f45:	8d 47 03             	lea    eax,[edi+0x3]
10007f48:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
10007f4b:	0f b6 d3             	movzx  edx,bl
10007f4e:	c1 ea 06             	shr    edx,0x6
10007f51:	09 f2                	or     edx,esi
10007f53:	8a 92 a0 cf 00 10    	mov    dl,BYTE PTR [edx+0x1000cfa0]	10007f55: R_386_32	.data
10007f59:	88 51 02             	mov    BYTE PTR [ecx+0x2],dl
10007f5c:	83 c1 04             	add    ecx,0x4
10007f5f:	89 da                	mov    edx,ebx
10007f61:	83 e2 3f             	and    edx,0x3f
10007f64:	8a 9a a0 cf 00 10    	mov    bl,BYTE PTR [edx+0x1000cfa0]	10007f66: R_386_32	.data
10007f6a:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
10007f6d:	39 04 24             	cmp    DWORD PTR [esp],eax
10007f70:	77 91                	ja     10007f03 <BF_encode+0x18>
10007f72:	eb 09                	jmp    10007f7d <BF_encode+0x92>
10007f74:	8a 82 a0 cf 00 10    	mov    al,BYTE PTR [edx+0x1000cfa0]	10007f76: R_386_32	.data
10007f7a:	88 41 01             	mov    BYTE PTR [ecx+0x1],al
10007f7d:	83 c4 04             	add    esp,0x4
10007f80:	5b                   	pop    ebx
10007f81:	5e                   	pop    esi
10007f82:	5f                   	pop    edi
10007f83:	5d                   	pop    ebp
10007f84:	c3                   	ret    
10007f85:	8a 86 a0 cf 00 10    	mov    al,BYTE PTR [esi+0x1000cfa0]	10007f87: R_386_32	.data
10007f8b:	88 41 02             	mov    BYTE PTR [ecx+0x2],al
10007f8e:	eb ed                	jmp    10007f7d <BF_encode+0x92>

10007f90 <BF_swap>:
10007f90:	53                   	push   ebx
10007f91:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10007f95:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10007f99:	80 3d 60 d0 00 10 00 	cmp    BYTE PTR ds:0x1000d060,0x0	10007f9b: R_386_32	.data
10007fa0:	74 23                	je     10007fc5 <BF_swap+0x35>
10007fa2:	8b 01                	mov    eax,DWORD PTR [ecx]
10007fa4:	c1 c0 10             	rol    eax,0x10
10007fa7:	83 c1 04             	add    ecx,0x4
10007faa:	89 c2                	mov    edx,eax
10007fac:	c1 e2 08             	shl    edx,0x8
10007faf:	81 e2 00 ff 00 ff    	and    edx,0xff00ff00
10007fb5:	c1 e8 08             	shr    eax,0x8
10007fb8:	25 ff 00 ff 00       	and    eax,0xff00ff
10007fbd:	09 d0                	or     eax,edx
10007fbf:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
10007fc2:	4b                   	dec    ebx
10007fc3:	75 dd                	jne    10007fa2 <BF_swap+0x12>
10007fc5:	5b                   	pop    ebx
10007fc6:	c3                   	ret    

10007fc7 <BF_set_key>:
10007fc7:	55                   	push   ebp
10007fc8:	57                   	push   edi
10007fc9:	56                   	push   esi
10007fca:	53                   	push   ebx
10007fcb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10007fcf:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
10007fd3:	89 f9                	mov    ecx,edi
10007fd5:	be 00 00 00 00       	mov    esi,0x0
10007fda:	eb 2d                	jmp    10008009 <BF_set_key+0x42>
10007fdc:	89 f9                	mov    ecx,edi
10007fde:	4a                   	dec    edx
10007fdf:	74 10                	je     10007ff1 <BF_set_key+0x2a>
10007fe1:	c1 e0 08             	shl    eax,0x8
10007fe4:	0f b6 19             	movzx  ebx,BYTE PTR [ecx]
10007fe7:	09 d8                	or     eax,ebx
10007fe9:	80 39 00             	cmp    BYTE PTR [ecx],0x0
10007fec:	74 ee                	je     10007fdc <BF_set_key+0x15>
10007fee:	41                   	inc    ecx
10007fef:	eb ed                	jmp    10007fde <BF_set_key+0x17>
10007ff1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10007ff5:	89 04 b2             	mov    DWORD PTR [edx+esi*4],eax
10007ff8:	33 04 b5 40 cf 00 10 	xor    eax,DWORD PTR [esi*4+0x1000cf40]	10007ffb: R_386_32	.data
10007fff:	89 44 b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],eax
10008003:	46                   	inc    esi
10008004:	83 fe 12             	cmp    esi,0x12
10008007:	74 0c                	je     10008015 <BF_set_key+0x4e>
10008009:	ba 04 00 00 00       	mov    edx,0x4
1000800e:	b8 00 00 00 00       	mov    eax,0x0
10008013:	eb cc                	jmp    10007fe1 <BF_set_key+0x1a>
10008015:	5b                   	pop    ebx
10008016:	5e                   	pop    esi
10008017:	5f                   	pop    edi
10008018:	5d                   	pop    ebp
10008019:	c3                   	ret    

1000801a <_crypt_blowfish_rn>:
1000801a:	55                   	push   ebp
1000801b:	57                   	push   edi
1000801c:	56                   	push   esi
1000801d:	53                   	push   ebx
1000801e:	81 ec 00 11 00 00    	sub    esp,0x1100
10008024:	83 bc 24 20 11 00 00 3c 	cmp    DWORD PTR [esp+0x1120],0x3c
1000802c:	0f 8e 9e 2d 00 00    	jle    1000add0 <_crypt_blowfish_rn+0x2db6>
10008032:	8b 84 24 18 11 00 00 	mov    eax,DWORD PTR [esp+0x1118]
10008039:	80 38 24             	cmp    BYTE PTR [eax],0x24
1000803c:	0f 85 a8 2d 00 00    	jne    1000adea <_crypt_blowfish_rn+0x2dd0>
10008042:	80 78 01 32          	cmp    BYTE PTR [eax+0x1],0x32
10008046:	0f 85 9e 2d 00 00    	jne    1000adea <_crypt_blowfish_rn+0x2dd0>
1000804c:	80 78 02 61          	cmp    BYTE PTR [eax+0x2],0x61
10008050:	0f 85 94 2d 00 00    	jne    1000adea <_crypt_blowfish_rn+0x2dd0>
10008056:	80 78 03 24          	cmp    BYTE PTR [eax+0x3],0x24
1000805a:	0f 85 8a 2d 00 00    	jne    1000adea <_crypt_blowfish_rn+0x2dd0>
10008060:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
10008063:	8d 50 d0             	lea    edx,[eax-0x30]
10008066:	80 fa 03             	cmp    dl,0x3
10008069:	0f 87 7b 2d 00 00    	ja     1000adea <_crypt_blowfish_rn+0x2dd0>
1000806f:	8b 9c 24 18 11 00 00 	mov    ebx,DWORD PTR [esp+0x1118]
10008076:	8a 53 05             	mov    dl,BYTE PTR [ebx+0x5]
10008079:	8d 4a d0             	lea    ecx,[edx-0x30]
1000807c:	80 f9 09             	cmp    cl,0x9
1000807f:	0f 87 65 2d 00 00    	ja     1000adea <_crypt_blowfish_rn+0x2dd0>
10008085:	3c 33                	cmp    al,0x33
10008087:	0f 84 54 2d 00 00    	je     1000ade1 <_crypt_blowfish_rn+0x2dc7>
1000808d:	8b 9c 24 18 11 00 00 	mov    ebx,DWORD PTR [esp+0x1118]
10008094:	80 7b 06 24          	cmp    BYTE PTR [ebx+0x6],0x24
10008098:	0f 85 4c 2d 00 00    	jne    1000adea <_crypt_blowfish_rn+0x2dd0>
1000809e:	0f be c0             	movsx  eax,al
100080a1:	8d 84 80 10 ff ff ff 	lea    eax,[eax+eax*4-0xf0]
100080a8:	01 c0                	add    eax,eax
100080aa:	0f be d2             	movsx  edx,dl
100080ad:	8d 4c 10 d0          	lea    ecx,[eax+edx*1-0x30]
100080b1:	b8 01 00 00 00       	mov    eax,0x1
100080b6:	d3 e0                	shl    eax,cl
100080b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100080bc:	83 f8 0f             	cmp    eax,0xf
100080bf:	0f 86 3f 2d 00 00    	jbe    1000ae04 <_crypt_blowfish_rn+0x2dea>
100080c5:	6a 10                	push   0x10
100080c7:	8b 84 24 1c 11 00 00 	mov    eax,DWORD PTR [esp+0x111c]
100080ce:	83 c0 07             	add    eax,0x7
100080d1:	50                   	push   eax
100080d2:	8d 84 24 f0 10 00 00 	lea    eax,[esp+0x10f0]
100080d9:	50                   	push   eax
100080da:	e8 ff fc ff ff       	call   10007dde <BF_decode>
100080df:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
100080e3:	83 c4 0c             	add    esp,0xc
100080e6:	85 c0                	test   eax,eax
100080e8:	0f 85 16 2d 00 00    	jne    1000ae04 <_crypt_blowfish_rn+0x2dea>
100080ee:	6a 04                	push   0x4
100080f0:	8d 5c 24 5c          	lea    ebx,[esp+0x5c]
100080f4:	8d 84 24 ec 10 00 00 	lea    eax,[esp+0x10ec]
100080fb:	50                   	push   eax
100080fc:	e8 8f fe ff ff       	call   10007f90 <BF_swap>
10008101:	8d 84 24 60 10 00 00 	lea    eax,[esp+0x1060]
10008108:	50                   	push   eax
10008109:	8d 84 24 ac 10 00 00 	lea    eax,[esp+0x10ac]
10008110:	50                   	push   eax
10008111:	ff b4 24 24 11 00 00 	push   DWORD PTR [esp+0x1124]
10008118:	e8 aa fe ff ff       	call   10007fc7 <BF_set_key>
1000811d:	be 40 bf 00 10       	mov    esi,0x1000bf40	1000811e: R_386_32	.data
10008122:	b9 00 04 00 00       	mov    ecx,0x400
10008127:	89 df                	mov    edi,ebx
10008129:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000812b:	83 c4 14             	add    esp,0x14
1000812e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10008132:	89 04 24             	mov    DWORD PTR [esp],eax
10008135:	bb 00 00 00 00       	mov    ebx,0x0
1000813a:	b8 00 00 00 00       	mov    eax,0x0
1000813f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10008142:	83 e1 02             	and    ecx,0x2
10008145:	8d 91 24 04 00 00    	lea    edx,[ecx+0x424]
1000814b:	8b 54 94 58          	mov    edx,DWORD PTR [esp+edx*4+0x58]
1000814f:	33 94 24 58 10 00 00 	xor    edx,DWORD PTR [esp+0x1058]
10008156:	31 c2                	xor    edx,eax
10008158:	89 d7                	mov    edi,edx
1000815a:	c1 ef 06             	shr    edi,0x6
1000815d:	89 d5                	mov    ebp,edx
1000815f:	c1 ed 0e             	shr    ebp,0xe
10008162:	89 d0                	mov    eax,edx
10008164:	c1 e8 16             	shr    eax,0x16
10008167:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000816e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008174:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000817a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008180:	25 fc 03 00 00       	and    eax,0x3fc
10008185:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008189:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008190:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008197:	81 c1 25 04 00 00    	add    ecx,0x425
1000819d:	8b 4c 8c 58          	mov    ecx,DWORD PTR [esp+ecx*4+0x58]
100081a1:	33 8c 24 5c 10 00 00 	xor    ecx,DWORD PTR [esp+0x105c]
100081a8:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100081af:	31 c8                	xor    eax,ecx
100081b1:	31 c3                	xor    ebx,eax
100081b3:	89 d8                	mov    eax,ebx
100081b5:	c1 e8 06             	shr    eax,0x6
100081b8:	89 c1                	mov    ecx,eax
100081ba:	89 df                	mov    edi,ebx
100081bc:	c1 ef 0e             	shr    edi,0xe
100081bf:	89 d8                	mov    eax,ebx
100081c1:	c1 e8 16             	shr    eax,0x16
100081c4:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
100081cb:	81 e6 fc 03 00 00    	and    esi,0x3fc
100081d1:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100081d7:	81 e7 fc 03 00 00    	and    edi,0x3fc
100081dd:	25 fc 03 00 00       	and    eax,0x3fc
100081e2:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100081e6:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
100081ed:	33 84 0c 58 08 00 00 	xor    eax,DWORD PTR [esp+ecx*1+0x858]
100081f4:	33 94 24 60 10 00 00 	xor    edx,DWORD PTR [esp+0x1060]
100081fb:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008202:	89 c1                	mov    ecx,eax
10008204:	31 d1                	xor    ecx,edx
10008206:	89 ca                	mov    edx,ecx
10008208:	c1 ea 06             	shr    edx,0x6
1000820b:	89 cf                	mov    edi,ecx
1000820d:	c1 ef 0e             	shr    edi,0xe
10008210:	89 c8                	mov    eax,ecx
10008212:	c1 e8 16             	shr    eax,0x16
10008215:	8d 34 8d 00 00 00 00 	lea    esi,[ecx*4+0x0]
1000821c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008222:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008228:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000822e:	25 fc 03 00 00       	and    eax,0x3fc
10008233:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008237:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
1000823e:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10008245:	33 9c 24 64 10 00 00 	xor    ebx,DWORD PTR [esp+0x1064]
1000824c:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008253:	89 c2                	mov    edx,eax
10008255:	31 da                	xor    edx,ebx
10008257:	89 d6                	mov    esi,edx
10008259:	c1 ee 06             	shr    esi,0x6
1000825c:	89 d7                	mov    edi,edx
1000825e:	c1 ef 0e             	shr    edi,0xe
10008261:	89 d0                	mov    eax,edx
10008263:	c1 e8 16             	shr    eax,0x16
10008266:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
1000826d:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008273:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008279:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000827f:	25 fc 03 00 00       	and    eax,0x3fc
10008284:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008288:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
1000828f:	33 84 34 58 08 00 00 	xor    eax,DWORD PTR [esp+esi*1+0x858]
10008296:	33 8c 24 68 10 00 00 	xor    ecx,DWORD PTR [esp+0x1068]
1000829d:	03 84 1c 58 0c 00 00 	add    eax,DWORD PTR [esp+ebx*1+0xc58]
100082a4:	31 c8                	xor    eax,ecx
100082a6:	89 c3                	mov    ebx,eax
100082a8:	c1 eb 06             	shr    ebx,0x6
100082ab:	89 c7                	mov    edi,eax
100082ad:	c1 ef 0e             	shr    edi,0xe
100082b0:	89 c6                	mov    esi,eax
100082b2:	c1 ee 16             	shr    esi,0x16
100082b5:	89 f1                	mov    ecx,esi
100082b7:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100082be:	81 e6 fc 03 00 00    	and    esi,0x3fc
100082c4:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100082ca:	81 e7 fc 03 00 00    	and    edi,0x3fc
100082d0:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100082d6:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100082da:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100082e1:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
100082e8:	33 94 24 6c 10 00 00 	xor    edx,DWORD PTR [esp+0x106c]
100082ef:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100082f6:	31 ca                	xor    edx,ecx
100082f8:	89 d6                	mov    esi,edx
100082fa:	c1 ee 06             	shr    esi,0x6
100082fd:	89 d7                	mov    edi,edx
100082ff:	c1 ef 0e             	shr    edi,0xe
10008302:	89 d3                	mov    ebx,edx
10008304:	c1 eb 16             	shr    ebx,0x16
10008307:	89 d9                	mov    ecx,ebx
10008309:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10008310:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008316:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000831c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008322:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008328:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000832c:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10008333:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
1000833a:	33 84 24 70 10 00 00 	xor    eax,DWORD PTR [esp+0x1070]
10008341:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10008348:	31 c8                	xor    eax,ecx
1000834a:	89 c6                	mov    esi,eax
1000834c:	c1 ee 06             	shr    esi,0x6
1000834f:	89 c7                	mov    edi,eax
10008351:	c1 ef 0e             	shr    edi,0xe
10008354:	89 c3                	mov    ebx,eax
10008356:	c1 eb 16             	shr    ebx,0x16
10008359:	89 d9                	mov    ecx,ebx
1000835b:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10008362:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008368:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000836e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008374:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000837a:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000837e:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10008385:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
1000838c:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
10008393:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
1000839a:	31 ca                	xor    edx,ecx
1000839c:	89 d6                	mov    esi,edx
1000839e:	c1 ee 06             	shr    esi,0x6
100083a1:	89 d7                	mov    edi,edx
100083a3:	c1 ef 0e             	shr    edi,0xe
100083a6:	89 d3                	mov    ebx,edx
100083a8:	c1 eb 16             	shr    ebx,0x16
100083ab:	89 d9                	mov    ecx,ebx
100083ad:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
100083b4:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100083ba:	81 e6 fc 03 00 00    	and    esi,0x3fc
100083c0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100083c6:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100083cc:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100083d0:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100083d7:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
100083de:	33 84 24 78 10 00 00 	xor    eax,DWORD PTR [esp+0x1078]
100083e5:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
100083ec:	31 c8                	xor    eax,ecx
100083ee:	89 c6                	mov    esi,eax
100083f0:	c1 ee 06             	shr    esi,0x6
100083f3:	89 c7                	mov    edi,eax
100083f5:	c1 ef 0e             	shr    edi,0xe
100083f8:	89 c3                	mov    ebx,eax
100083fa:	c1 eb 16             	shr    ebx,0x16
100083fd:	89 d9                	mov    ecx,ebx
100083ff:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10008406:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000840c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008412:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008418:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000841e:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008422:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10008429:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10008430:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
10008437:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
1000843e:	31 ca                	xor    edx,ecx
10008440:	89 d6                	mov    esi,edx
10008442:	c1 ee 06             	shr    esi,0x6
10008445:	89 d7                	mov    edi,edx
10008447:	c1 ef 0e             	shr    edi,0xe
1000844a:	89 d3                	mov    ebx,edx
1000844c:	c1 eb 16             	shr    ebx,0x16
1000844f:	89 d9                	mov    ecx,ebx
10008451:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10008458:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000845e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008464:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000846a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008470:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008474:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
1000847b:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10008482:	33 84 24 80 10 00 00 	xor    eax,DWORD PTR [esp+0x1080]
10008489:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10008490:	31 c8                	xor    eax,ecx
10008492:	89 c6                	mov    esi,eax
10008494:	c1 ee 06             	shr    esi,0x6
10008497:	89 c7                	mov    edi,eax
10008499:	c1 ef 0e             	shr    edi,0xe
1000849c:	89 c3                	mov    ebx,eax
1000849e:	c1 eb 16             	shr    ebx,0x16
100084a1:	89 d9                	mov    ecx,ebx
100084a3:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
100084aa:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100084b0:	81 e6 fc 03 00 00    	and    esi,0x3fc
100084b6:	81 e7 fc 03 00 00    	and    edi,0x3fc
100084bc:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100084c2:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100084c6:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100084cd:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
100084d4:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
100084db:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
100084e2:	31 ca                	xor    edx,ecx
100084e4:	89 d6                	mov    esi,edx
100084e6:	c1 ee 06             	shr    esi,0x6
100084e9:	89 d7                	mov    edi,edx
100084eb:	c1 ef 0e             	shr    edi,0xe
100084ee:	89 d3                	mov    ebx,edx
100084f0:	c1 eb 16             	shr    ebx,0x16
100084f3:	89 d9                	mov    ecx,ebx
100084f5:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
100084fc:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008502:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008508:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000850e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008514:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008518:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
1000851f:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10008526:	33 84 24 88 10 00 00 	xor    eax,DWORD PTR [esp+0x1088]
1000852d:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10008534:	31 c8                	xor    eax,ecx
10008536:	89 c6                	mov    esi,eax
10008538:	c1 ee 06             	shr    esi,0x6
1000853b:	89 c7                	mov    edi,eax
1000853d:	c1 ef 0e             	shr    edi,0xe
10008540:	89 c3                	mov    ebx,eax
10008542:	c1 eb 16             	shr    ebx,0x16
10008545:	89 d9                	mov    ecx,ebx
10008547:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
1000854e:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008554:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000855a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008560:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008566:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000856a:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10008571:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10008578:	33 94 24 8c 10 00 00 	xor    edx,DWORD PTR [esp+0x108c]
1000857f:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10008586:	31 ca                	xor    edx,ecx
10008588:	89 d3                	mov    ebx,edx
1000858a:	c1 eb 06             	shr    ebx,0x6
1000858d:	89 d7                	mov    edi,edx
1000858f:	c1 ef 0e             	shr    edi,0xe
10008592:	89 d6                	mov    esi,edx
10008594:	c1 ee 16             	shr    esi,0x16
10008597:	89 f1                	mov    ecx,esi
10008599:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100085a0:	81 e6 fc 03 00 00    	and    esi,0x3fc
100085a6:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100085ac:	81 e7 fc 03 00 00    	and    edi,0x3fc
100085b2:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100085b8:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100085bc:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100085c3:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
100085ca:	33 84 24 90 10 00 00 	xor    eax,DWORD PTR [esp+0x1090]
100085d1:	89 cb                	mov    ebx,ecx
100085d3:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100085da:	31 d8                	xor    eax,ebx
100085dc:	89 c6                	mov    esi,eax
100085de:	c1 ee 06             	shr    esi,0x6
100085e1:	89 c7                	mov    edi,eax
100085e3:	c1 ef 0e             	shr    edi,0xe
100085e6:	89 c3                	mov    ebx,eax
100085e8:	c1 eb 16             	shr    ebx,0x16
100085eb:	89 d9                	mov    ecx,ebx
100085ed:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
100085f4:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100085fa:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008600:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008606:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000860c:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008610:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10008617:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
1000861e:	33 94 24 94 10 00 00 	xor    edx,DWORD PTR [esp+0x1094]
10008625:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
1000862c:	31 ca                	xor    edx,ecx
1000862e:	89 d3                	mov    ebx,edx
10008630:	c1 eb 06             	shr    ebx,0x6
10008633:	89 d7                	mov    edi,edx
10008635:	c1 ef 0e             	shr    edi,0xe
10008638:	89 d6                	mov    esi,edx
1000863a:	c1 ee 16             	shr    esi,0x16
1000863d:	89 f1                	mov    ecx,esi
1000863f:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008646:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000864c:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008652:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008658:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000865e:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008662:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10008669:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
10008670:	33 84 24 98 10 00 00 	xor    eax,DWORD PTR [esp+0x1098]
10008677:	89 cb                	mov    ebx,ecx
10008679:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008680:	31 c3                	xor    ebx,eax
10008682:	89 d0                	mov    eax,edx
10008684:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
1000868b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
1000868e:	89 84 8c 58 10 00 00 	mov    DWORD PTR [esp+ecx*4+0x1058],eax
10008695:	89 9c 8c 5c 10 00 00 	mov    DWORD PTR [esp+ecx*4+0x105c],ebx
1000869c:	83 c1 02             	add    ecx,0x2
1000869f:	89 0c 24             	mov    DWORD PTR [esp],ecx
100086a2:	83 f9 12             	cmp    ecx,0x12
100086a5:	0f 85 94 fa ff ff    	jne    1000813f <_crypt_blowfish_rn+0x125>
100086ab:	8d 4c 24 58          	lea    ecx,[esp+0x58]
100086af:	83 c1 10             	add    ecx,0x10
100086b2:	8b 94 24 f0 10 00 00 	mov    edx,DWORD PTR [esp+0x10f0]
100086b9:	33 94 24 58 10 00 00 	xor    edx,DWORD PTR [esp+0x1058]
100086c0:	31 c2                	xor    edx,eax
100086c2:	89 d7                	mov    edi,edx
100086c4:	c1 ef 06             	shr    edi,0x6
100086c7:	89 d5                	mov    ebp,edx
100086c9:	c1 ed 0e             	shr    ebp,0xe
100086cc:	89 d0                	mov    eax,edx
100086ce:	c1 e8 16             	shr    eax,0x16
100086d1:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100086d8:	81 e6 fc 03 00 00    	and    esi,0x3fc
100086de:	81 e7 fc 03 00 00    	and    edi,0x3fc
100086e4:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100086ea:	25 fc 03 00 00       	and    eax,0x3fc
100086ef:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100086f3:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100086fa:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008701:	89 c7                	mov    edi,eax
10008703:	8b 84 24 f4 10 00 00 	mov    eax,DWORD PTR [esp+0x10f4]
1000870a:	33 84 24 5c 10 00 00 	xor    eax,DWORD PTR [esp+0x105c]
10008711:	03 bc 34 58 0c 00 00 	add    edi,DWORD PTR [esp+esi*1+0xc58]
10008718:	31 f8                	xor    eax,edi
1000871a:	31 d8                	xor    eax,ebx
1000871c:	89 c7                	mov    edi,eax
1000871e:	c1 ef 06             	shr    edi,0x6
10008721:	89 c5                	mov    ebp,eax
10008723:	c1 ed 0e             	shr    ebp,0xe
10008726:	89 c3                	mov    ebx,eax
10008728:	c1 eb 16             	shr    ebx,0x16
1000872b:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008732:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008738:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000873e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008744:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000874a:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
1000874e:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008755:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000875c:	33 94 24 60 10 00 00 	xor    edx,DWORD PTR [esp+0x1060]
10008763:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000876a:	31 da                	xor    edx,ebx
1000876c:	89 d7                	mov    edi,edx
1000876e:	c1 ef 06             	shr    edi,0x6
10008771:	89 d5                	mov    ebp,edx
10008773:	c1 ed 0e             	shr    ebp,0xe
10008776:	89 d3                	mov    ebx,edx
10008778:	c1 eb 16             	shr    ebx,0x16
1000877b:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008782:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008788:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000878e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008794:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000879a:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
1000879e:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100087a5:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100087ac:	33 84 24 64 10 00 00 	xor    eax,DWORD PTR [esp+0x1064]
100087b3:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100087ba:	31 d8                	xor    eax,ebx
100087bc:	89 c7                	mov    edi,eax
100087be:	c1 ef 06             	shr    edi,0x6
100087c1:	89 c5                	mov    ebp,eax
100087c3:	c1 ed 0e             	shr    ebp,0xe
100087c6:	89 c3                	mov    ebx,eax
100087c8:	c1 eb 16             	shr    ebx,0x16
100087cb:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100087d2:	81 e6 fc 03 00 00    	and    esi,0x3fc
100087d8:	81 e7 fc 03 00 00    	and    edi,0x3fc
100087de:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100087e4:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100087ea:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100087ee:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100087f5:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100087fc:	33 94 24 68 10 00 00 	xor    edx,DWORD PTR [esp+0x1068]
10008803:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000880a:	31 da                	xor    edx,ebx
1000880c:	89 d7                	mov    edi,edx
1000880e:	c1 ef 06             	shr    edi,0x6
10008811:	89 d5                	mov    ebp,edx
10008813:	c1 ed 0e             	shr    ebp,0xe
10008816:	89 d3                	mov    ebx,edx
10008818:	c1 eb 16             	shr    ebx,0x16
1000881b:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008822:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008828:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000882e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008834:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000883a:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
1000883e:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008845:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000884c:	33 84 24 6c 10 00 00 	xor    eax,DWORD PTR [esp+0x106c]
10008853:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000885a:	31 d8                	xor    eax,ebx
1000885c:	89 c7                	mov    edi,eax
1000885e:	c1 ef 06             	shr    edi,0x6
10008861:	89 c5                	mov    ebp,eax
10008863:	c1 ed 0e             	shr    ebp,0xe
10008866:	89 c3                	mov    ebx,eax
10008868:	c1 eb 16             	shr    ebx,0x16
1000886b:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008872:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008878:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000887e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008884:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000888a:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
1000888e:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008895:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000889c:	33 94 24 70 10 00 00 	xor    edx,DWORD PTR [esp+0x1070]
100088a3:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100088aa:	31 da                	xor    edx,ebx
100088ac:	89 d7                	mov    edi,edx
100088ae:	c1 ef 06             	shr    edi,0x6
100088b1:	89 d5                	mov    ebp,edx
100088b3:	c1 ed 0e             	shr    ebp,0xe
100088b6:	89 d3                	mov    ebx,edx
100088b8:	c1 eb 16             	shr    ebx,0x16
100088bb:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100088c2:	81 e6 fc 03 00 00    	and    esi,0x3fc
100088c8:	81 e7 fc 03 00 00    	and    edi,0x3fc
100088ce:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100088d4:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100088da:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100088de:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100088e5:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100088ec:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
100088f3:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100088fa:	31 d8                	xor    eax,ebx
100088fc:	89 c7                	mov    edi,eax
100088fe:	c1 ef 06             	shr    edi,0x6
10008901:	89 c5                	mov    ebp,eax
10008903:	c1 ed 0e             	shr    ebp,0xe
10008906:	89 c3                	mov    ebx,eax
10008908:	c1 eb 16             	shr    ebx,0x16
1000890b:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008912:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008918:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000891e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008924:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000892a:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
1000892e:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008935:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000893c:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
10008943:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000894a:	31 da                	xor    edx,ebx
1000894c:	89 d7                	mov    edi,edx
1000894e:	c1 ef 06             	shr    edi,0x6
10008951:	89 d5                	mov    ebp,edx
10008953:	c1 ed 0e             	shr    ebp,0xe
10008956:	89 d3                	mov    ebx,edx
10008958:	c1 eb 16             	shr    ebx,0x16
1000895b:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008962:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008968:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000896e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008974:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000897a:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
1000897e:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008985:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000898c:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
10008993:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000899a:	31 d8                	xor    eax,ebx
1000899c:	89 c7                	mov    edi,eax
1000899e:	c1 ef 06             	shr    edi,0x6
100089a1:	89 c5                	mov    ebp,eax
100089a3:	c1 ed 0e             	shr    ebp,0xe
100089a6:	89 c3                	mov    ebx,eax
100089a8:	c1 eb 16             	shr    ebx,0x16
100089ab:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100089b2:	81 e6 fc 03 00 00    	and    esi,0x3fc
100089b8:	81 e7 fc 03 00 00    	and    edi,0x3fc
100089be:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100089c4:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100089ca:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100089ce:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100089d5:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100089dc:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
100089e3:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100089ea:	31 da                	xor    edx,ebx
100089ec:	89 d7                	mov    edi,edx
100089ee:	c1 ef 06             	shr    edi,0x6
100089f1:	89 d5                	mov    ebp,edx
100089f3:	c1 ed 0e             	shr    ebp,0xe
100089f6:	89 d3                	mov    ebx,edx
100089f8:	c1 eb 16             	shr    ebx,0x16
100089fb:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008a02:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008a08:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008a0e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008a14:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008a1a:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008a1e:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008a25:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008a2c:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10008a33:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008a3a:	31 d8                	xor    eax,ebx
10008a3c:	89 c7                	mov    edi,eax
10008a3e:	c1 ef 06             	shr    edi,0x6
10008a41:	89 c5                	mov    ebp,eax
10008a43:	c1 ed 0e             	shr    ebp,0xe
10008a46:	89 c3                	mov    ebx,eax
10008a48:	c1 eb 16             	shr    ebx,0x16
10008a4b:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008a52:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008a58:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008a5e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008a64:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008a6a:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008a6e:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008a75:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008a7c:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
10008a83:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008a8a:	31 da                	xor    edx,ebx
10008a8c:	89 d7                	mov    edi,edx
10008a8e:	c1 ef 06             	shr    edi,0x6
10008a91:	89 d5                	mov    ebp,edx
10008a93:	c1 ed 0e             	shr    ebp,0xe
10008a96:	89 d3                	mov    ebx,edx
10008a98:	c1 eb 16             	shr    ebx,0x16
10008a9b:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008aa2:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008aa8:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008aae:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008ab4:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008aba:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008abe:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008ac5:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008acc:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10008ad3:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008ada:	31 d8                	xor    eax,ebx
10008adc:	89 c7                	mov    edi,eax
10008ade:	c1 ef 06             	shr    edi,0x6
10008ae1:	89 c5                	mov    ebp,eax
10008ae3:	c1 ed 0e             	shr    ebp,0xe
10008ae6:	89 c3                	mov    ebx,eax
10008ae8:	c1 eb 16             	shr    ebx,0x16
10008aeb:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008af2:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008af8:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008afe:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008b04:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008b0a:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008b0e:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008b15:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008b1c:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
10008b23:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008b2a:	31 da                	xor    edx,ebx
10008b2c:	89 d7                	mov    edi,edx
10008b2e:	c1 ef 06             	shr    edi,0x6
10008b31:	89 d5                	mov    ebp,edx
10008b33:	c1 ed 0e             	shr    ebp,0xe
10008b36:	89 d3                	mov    ebx,edx
10008b38:	c1 eb 16             	shr    ebx,0x16
10008b3b:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008b42:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008b48:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008b4e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008b54:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008b5a:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008b5e:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008b65:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008b6c:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10008b73:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008b7a:	31 d8                	xor    eax,ebx
10008b7c:	89 c6                	mov    esi,eax
10008b7e:	c1 ee 06             	shr    esi,0x6
10008b81:	89 c5                	mov    ebp,eax
10008b83:	c1 ed 0e             	shr    ebp,0xe
10008b86:	89 c3                	mov    ebx,eax
10008b88:	c1 eb 16             	shr    ebx,0x16
10008b8b:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10008b92:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008b98:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008b9e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008ba4:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008baa:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008bae:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10008bb5:	33 9c 34 58 08 00 00 	xor    ebx,DWORD PTR [esp+esi*1+0x858]
10008bbc:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
10008bc3:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
10008bca:	31 da                	xor    edx,ebx
10008bcc:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10008bd3:	89 41 f0             	mov    DWORD PTR [ecx-0x10],eax
10008bd6:	89 51 f4             	mov    DWORD PTR [ecx-0xc],edx
10008bd9:	8b 9c 24 e8 10 00 00 	mov    ebx,DWORD PTR [esp+0x10e8]
10008be0:	33 9c 24 58 10 00 00 	xor    ebx,DWORD PTR [esp+0x1058]
10008be7:	31 d8                	xor    eax,ebx
10008be9:	89 c5                	mov    ebp,eax
10008beb:	c1 ed 06             	shr    ebp,0x6
10008bee:	89 c6                	mov    esi,eax
10008bf0:	c1 ee 0e             	shr    esi,0xe
10008bf3:	89 c3                	mov    ebx,eax
10008bf5:	c1 eb 16             	shr    ebx,0x16
10008bf8:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10008bff:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008c05:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008c0b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008c11:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008c17:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008c1b:	03 9c 34 58 04 00 00 	add    ebx,DWORD PTR [esp+esi*1+0x458]
10008c22:	33 9c 2c 58 08 00 00 	xor    ebx,DWORD PTR [esp+ebp*1+0x858]
10008c29:	8b b4 24 ec 10 00 00 	mov    esi,DWORD PTR [esp+0x10ec]
10008c30:	33 b4 24 5c 10 00 00 	xor    esi,DWORD PTR [esp+0x105c]
10008c37:	31 f2                	xor    edx,esi
10008c39:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
10008c40:	89 de                	mov    esi,ebx
10008c42:	31 d6                	xor    esi,edx
10008c44:	89 f5                	mov    ebp,esi
10008c46:	c1 ed 06             	shr    ebp,0x6
10008c49:	89 f3                	mov    ebx,esi
10008c4b:	c1 eb 0e             	shr    ebx,0xe
10008c4e:	89 f2                	mov    edx,esi
10008c50:	c1 ea 16             	shr    edx,0x16
10008c53:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10008c5a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008c60:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008c66:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008c6c:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008c72:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008c76:	03 94 1c 58 04 00 00 	add    edx,DWORD PTR [esp+ebx*1+0x458]
10008c7d:	33 94 2c 58 08 00 00 	xor    edx,DWORD PTR [esp+ebp*1+0x858]
10008c84:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10008c8b:	89 d3                	mov    ebx,edx
10008c8d:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
10008c94:	31 c3                	xor    ebx,eax
10008c96:	89 df                	mov    edi,ebx
10008c98:	c1 ef 06             	shr    edi,0x6
10008c9b:	89 dd                	mov    ebp,ebx
10008c9d:	c1 ed 0e             	shr    ebp,0xe
10008ca0:	89 da                	mov    edx,ebx
10008ca2:	c1 ea 16             	shr    edx,0x16
10008ca5:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
10008cac:	25 fc 03 00 00       	and    eax,0x3fc
10008cb1:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008cb7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008cbd:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008cc3:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008cc7:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008cce:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008cd5:	33 b4 24 64 10 00 00 	xor    esi,DWORD PTR [esp+0x1064]
10008cdc:	03 94 04 58 0c 00 00 	add    edx,DWORD PTR [esp+eax*1+0xc58]
10008ce3:	31 d6                	xor    esi,edx
10008ce5:	89 f0                	mov    eax,esi
10008ce7:	c1 e8 06             	shr    eax,0x6
10008cea:	89 f5                	mov    ebp,esi
10008cec:	c1 ed 0e             	shr    ebp,0xe
10008cef:	89 f2                	mov    edx,esi
10008cf1:	c1 ea 16             	shr    edx,0x16
10008cf4:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10008cfb:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008d01:	25 fc 03 00 00       	and    eax,0x3fc
10008d06:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008d0c:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008d12:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008d16:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008d1d:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
10008d24:	33 9c 24 68 10 00 00 	xor    ebx,DWORD PTR [esp+0x1068]
10008d2b:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
10008d32:	31 d3                	xor    ebx,edx
10008d34:	89 dd                	mov    ebp,ebx
10008d36:	c1 ed 06             	shr    ebp,0x6
10008d39:	89 da                	mov    edx,ebx
10008d3b:	c1 ea 0e             	shr    edx,0xe
10008d3e:	89 d8                	mov    eax,ebx
10008d40:	c1 e8 16             	shr    eax,0x16
10008d43:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
10008d4a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008d50:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008d56:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008d5c:	25 fc 03 00 00       	and    eax,0x3fc
10008d61:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008d65:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
10008d6c:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10008d73:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
10008d7a:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008d81:	89 c2                	mov    edx,eax
10008d83:	31 f2                	xor    edx,esi
10008d85:	89 d7                	mov    edi,edx
10008d87:	c1 ef 06             	shr    edi,0x6
10008d8a:	89 d5                	mov    ebp,edx
10008d8c:	c1 ed 0e             	shr    ebp,0xe
10008d8f:	89 d0                	mov    eax,edx
10008d91:	c1 e8 16             	shr    eax,0x16
10008d94:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008d9b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008da1:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008da7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008dad:	25 fc 03 00 00       	and    eax,0x3fc
10008db2:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008db6:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008dbd:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008dc4:	33 9c 24 70 10 00 00 	xor    ebx,DWORD PTR [esp+0x1070]
10008dcb:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008dd2:	31 c3                	xor    ebx,eax
10008dd4:	89 df                	mov    edi,ebx
10008dd6:	c1 ef 06             	shr    edi,0x6
10008dd9:	89 dd                	mov    ebp,ebx
10008ddb:	c1 ed 0e             	shr    ebp,0xe
10008dde:	89 d8                	mov    eax,ebx
10008de0:	c1 e8 16             	shr    eax,0x16
10008de3:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10008dea:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008df0:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008df6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008dfc:	25 fc 03 00 00       	and    eax,0x3fc
10008e01:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008e05:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008e0c:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008e13:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
10008e1a:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008e21:	31 c2                	xor    edx,eax
10008e23:	89 d7                	mov    edi,edx
10008e25:	c1 ef 06             	shr    edi,0x6
10008e28:	89 d5                	mov    ebp,edx
10008e2a:	c1 ed 0e             	shr    ebp,0xe
10008e2d:	89 d0                	mov    eax,edx
10008e2f:	c1 e8 16             	shr    eax,0x16
10008e32:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008e39:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008e3f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008e45:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008e4b:	25 fc 03 00 00       	and    eax,0x3fc
10008e50:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008e54:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008e5b:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008e62:	33 9c 24 78 10 00 00 	xor    ebx,DWORD PTR [esp+0x1078]
10008e69:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008e70:	31 c3                	xor    ebx,eax
10008e72:	89 df                	mov    edi,ebx
10008e74:	c1 ef 06             	shr    edi,0x6
10008e77:	89 dd                	mov    ebp,ebx
10008e79:	c1 ed 0e             	shr    ebp,0xe
10008e7c:	89 d8                	mov    eax,ebx
10008e7e:	c1 e8 16             	shr    eax,0x16
10008e81:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10008e88:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008e8e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008e94:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008e9a:	25 fc 03 00 00       	and    eax,0x3fc
10008e9f:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008ea3:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008eaa:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008eb1:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
10008eb8:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008ebf:	31 c2                	xor    edx,eax
10008ec1:	89 d7                	mov    edi,edx
10008ec3:	c1 ef 06             	shr    edi,0x6
10008ec6:	89 d5                	mov    ebp,edx
10008ec8:	c1 ed 0e             	shr    ebp,0xe
10008ecb:	89 d0                	mov    eax,edx
10008ecd:	c1 e8 16             	shr    eax,0x16
10008ed0:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008ed7:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008edd:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008ee3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008ee9:	25 fc 03 00 00       	and    eax,0x3fc
10008eee:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008ef2:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008ef9:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008f00:	33 9c 24 80 10 00 00 	xor    ebx,DWORD PTR [esp+0x1080]
10008f07:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008f0e:	31 c3                	xor    ebx,eax
10008f10:	89 df                	mov    edi,ebx
10008f12:	c1 ef 06             	shr    edi,0x6
10008f15:	89 dd                	mov    ebp,ebx
10008f17:	c1 ed 0e             	shr    ebp,0xe
10008f1a:	89 d8                	mov    eax,ebx
10008f1c:	c1 e8 16             	shr    eax,0x16
10008f1f:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10008f26:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008f2c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008f32:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008f38:	25 fc 03 00 00       	and    eax,0x3fc
10008f3d:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008f41:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008f48:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008f4f:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
10008f56:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008f5d:	31 d0                	xor    eax,edx
10008f5f:	89 c7                	mov    edi,eax
10008f61:	c1 ef 06             	shr    edi,0x6
10008f64:	89 c5                	mov    ebp,eax
10008f66:	c1 ed 0e             	shr    ebp,0xe
10008f69:	89 c2                	mov    edx,eax
10008f6b:	c1 ea 16             	shr    edx,0x16
10008f6e:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008f75:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008f7b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008f81:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008f87:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008f8d:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008f91:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008f98:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008f9f:	33 9c 24 88 10 00 00 	xor    ebx,DWORD PTR [esp+0x1088]
10008fa6:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008fad:	31 d3                	xor    ebx,edx
10008faf:	89 df                	mov    edi,ebx
10008fb1:	c1 ef 06             	shr    edi,0x6
10008fb4:	89 dd                	mov    ebp,ebx
10008fb6:	c1 ed 0e             	shr    ebp,0xe
10008fb9:	89 da                	mov    edx,ebx
10008fbb:	c1 ea 16             	shr    edx,0x16
10008fbe:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10008fc5:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008fcb:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008fd1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008fd7:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008fdd:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008fe1:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008fe8:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008fef:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10008ff6:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008ffd:	31 d0                	xor    eax,edx
10008fff:	89 c7                	mov    edi,eax
10009001:	c1 ef 06             	shr    edi,0x6
10009004:	89 c5                	mov    ebp,eax
10009006:	c1 ed 0e             	shr    ebp,0xe
10009009:	89 c2                	mov    edx,eax
1000900b:	c1 ea 16             	shr    edx,0x16
1000900e:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009015:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000901b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009021:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009027:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000902d:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009031:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009038:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000903f:	33 9c 24 90 10 00 00 	xor    ebx,DWORD PTR [esp+0x1090]
10009046:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000904d:	31 d3                	xor    ebx,edx
1000904f:	89 df                	mov    edi,ebx
10009051:	c1 ef 06             	shr    edi,0x6
10009054:	89 dd                	mov    ebp,ebx
10009056:	c1 ed 0e             	shr    ebp,0xe
10009059:	89 da                	mov    edx,ebx
1000905b:	c1 ea 16             	shr    edx,0x16
1000905e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10009065:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000906b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009071:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009077:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000907d:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009081:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009088:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000908f:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10009096:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000909d:	31 d0                	xor    eax,edx
1000909f:	89 c7                	mov    edi,eax
100090a1:	c1 ef 06             	shr    edi,0x6
100090a4:	89 c5                	mov    ebp,eax
100090a6:	c1 ed 0e             	shr    ebp,0xe
100090a9:	89 c2                	mov    edx,eax
100090ab:	c1 ea 16             	shr    edx,0x16
100090ae:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100090b5:	81 e6 fc 03 00 00    	and    esi,0x3fc
100090bb:	81 e7 fc 03 00 00    	and    edi,0x3fc
100090c1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100090c7:	81 e2 fc 03 00 00    	and    edx,0x3fc
100090cd:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100090d1:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100090d8:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100090df:	33 9c 24 98 10 00 00 	xor    ebx,DWORD PTR [esp+0x1098]
100090e6:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
100090ed:	31 d3                	xor    ebx,edx
100090ef:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
100090f6:	89 41 f8             	mov    DWORD PTR [ecx-0x8],eax
100090f9:	89 59 fc             	mov    DWORD PTR [ecx-0x4],ebx
100090fc:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
10009103:	39 d1                	cmp    ecx,edx
10009105:	0f 85 a4 f5 ff ff    	jne    100086af <_crypt_blowfish_rn+0x695>
1000910b:	8b 84 24 a0 10 00 00 	mov    eax,DWORD PTR [esp+0x10a0]
10009112:	31 84 24 58 10 00 00 	xor    DWORD PTR [esp+0x1058],eax
10009119:	8b 84 24 a4 10 00 00 	mov    eax,DWORD PTR [esp+0x10a4]
10009120:	31 84 24 5c 10 00 00 	xor    DWORD PTR [esp+0x105c],eax
10009127:	8b 84 24 a8 10 00 00 	mov    eax,DWORD PTR [esp+0x10a8]
1000912e:	31 84 24 60 10 00 00 	xor    DWORD PTR [esp+0x1060],eax
10009135:	8b 84 24 ac 10 00 00 	mov    eax,DWORD PTR [esp+0x10ac]
1000913c:	31 84 24 64 10 00 00 	xor    DWORD PTR [esp+0x1064],eax
10009143:	8b 84 24 b0 10 00 00 	mov    eax,DWORD PTR [esp+0x10b0]
1000914a:	31 84 24 68 10 00 00 	xor    DWORD PTR [esp+0x1068],eax
10009151:	8b 84 24 b4 10 00 00 	mov    eax,DWORD PTR [esp+0x10b4]
10009158:	31 84 24 6c 10 00 00 	xor    DWORD PTR [esp+0x106c],eax
1000915f:	8b 84 24 b8 10 00 00 	mov    eax,DWORD PTR [esp+0x10b8]
10009166:	31 84 24 70 10 00 00 	xor    DWORD PTR [esp+0x1070],eax
1000916d:	8b 84 24 bc 10 00 00 	mov    eax,DWORD PTR [esp+0x10bc]
10009174:	31 84 24 74 10 00 00 	xor    DWORD PTR [esp+0x1074],eax
1000917b:	8b 84 24 c0 10 00 00 	mov    eax,DWORD PTR [esp+0x10c0]
10009182:	31 84 24 78 10 00 00 	xor    DWORD PTR [esp+0x1078],eax
10009189:	8b 84 24 c4 10 00 00 	mov    eax,DWORD PTR [esp+0x10c4]
10009190:	31 84 24 7c 10 00 00 	xor    DWORD PTR [esp+0x107c],eax
10009197:	8b 84 24 c8 10 00 00 	mov    eax,DWORD PTR [esp+0x10c8]
1000919e:	31 84 24 80 10 00 00 	xor    DWORD PTR [esp+0x1080],eax
100091a5:	8b 84 24 cc 10 00 00 	mov    eax,DWORD PTR [esp+0x10cc]
100091ac:	31 84 24 84 10 00 00 	xor    DWORD PTR [esp+0x1084],eax
100091b3:	8b 84 24 d0 10 00 00 	mov    eax,DWORD PTR [esp+0x10d0]
100091ba:	31 84 24 88 10 00 00 	xor    DWORD PTR [esp+0x1088],eax
100091c1:	8b 84 24 d4 10 00 00 	mov    eax,DWORD PTR [esp+0x10d4]
100091c8:	31 84 24 8c 10 00 00 	xor    DWORD PTR [esp+0x108c],eax
100091cf:	8b 84 24 d8 10 00 00 	mov    eax,DWORD PTR [esp+0x10d8]
100091d6:	31 84 24 90 10 00 00 	xor    DWORD PTR [esp+0x1090],eax
100091dd:	8b 84 24 dc 10 00 00 	mov    eax,DWORD PTR [esp+0x10dc]
100091e4:	31 84 24 94 10 00 00 	xor    DWORD PTR [esp+0x1094],eax
100091eb:	8b 84 24 e0 10 00 00 	mov    eax,DWORD PTR [esp+0x10e0]
100091f2:	31 84 24 98 10 00 00 	xor    DWORD PTR [esp+0x1098],eax
100091f9:	8b 84 24 e4 10 00 00 	mov    eax,DWORD PTR [esp+0x10e4]
10009200:	31 84 24 9c 10 00 00 	xor    DWORD PTR [esp+0x109c],eax
10009207:	8d 9c 24 58 10 00 00 	lea    ebx,[esp+0x1058]
1000920e:	b9 00 00 00 00       	mov    ecx,0x0
10009213:	b8 00 00 00 00       	mov    eax,0x0
10009218:	83 c3 08             	add    ebx,0x8
1000921b:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10009222:	89 c7                	mov    edi,eax
10009224:	c1 ef 06             	shr    edi,0x6
10009227:	89 c5                	mov    ebp,eax
10009229:	c1 ed 0e             	shr    ebp,0xe
1000922c:	89 c2                	mov    edx,eax
1000922e:	c1 ea 16             	shr    edx,0x16
10009231:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009238:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000923e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009244:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000924a:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009250:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009254:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000925b:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009262:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10009269:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10009270:	31 ca                	xor    edx,ecx
10009272:	89 d5                	mov    ebp,edx
10009274:	c1 ed 06             	shr    ebp,0x6
10009277:	89 d6                	mov    esi,edx
10009279:	c1 ee 0e             	shr    esi,0xe
1000927c:	89 d1                	mov    ecx,edx
1000927e:	c1 e9 16             	shr    ecx,0x16
10009281:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
10009288:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000928e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009294:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000929a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100092a0:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100092a4:	03 8c 34 58 04 00 00 	add    ecx,DWORD PTR [esp+esi*1+0x458]
100092ab:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
100092b2:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
100092b9:	03 8c 3c 58 0c 00 00 	add    ecx,DWORD PTR [esp+edi*1+0xc58]
100092c0:	31 c8                	xor    eax,ecx
100092c2:	89 c7                	mov    edi,eax
100092c4:	c1 ef 06             	shr    edi,0x6
100092c7:	89 c5                	mov    ebp,eax
100092c9:	c1 ed 0e             	shr    ebp,0xe
100092cc:	89 c1                	mov    ecx,eax
100092ce:	c1 e9 16             	shr    ecx,0x16
100092d1:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100092d8:	81 e6 fc 03 00 00    	and    esi,0x3fc
100092de:	81 e7 fc 03 00 00    	and    edi,0x3fc
100092e4:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100092ea:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100092f0:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100092f4:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100092fb:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009302:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
10009309:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009310:	31 d1                	xor    ecx,edx
10009312:	89 cd                	mov    ebp,ecx
10009314:	c1 ed 06             	shr    ebp,0x6
10009317:	89 ce                	mov    esi,ecx
10009319:	c1 ee 0e             	shr    esi,0xe
1000931c:	89 ca                	mov    edx,ecx
1000931e:	c1 ea 16             	shr    edx,0x16
10009321:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10009328:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000932e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009334:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000933a:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009340:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009344:	03 94 34 58 04 00 00 	add    edx,DWORD PTR [esp+esi*1+0x458]
1000934b:	33 94 2c 58 08 00 00 	xor    edx,DWORD PTR [esp+ebp*1+0x858]
10009352:	33 84 24 68 10 00 00 	xor    eax,DWORD PTR [esp+0x1068]
10009359:	89 d6                	mov    esi,edx
1000935b:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10009362:	31 c6                	xor    esi,eax
10009364:	89 f2                	mov    edx,esi
10009366:	c1 ea 06             	shr    edx,0x6
10009369:	89 f5                	mov    ebp,esi
1000936b:	c1 ed 0e             	shr    ebp,0xe
1000936e:	89 f0                	mov    eax,esi
10009370:	c1 e8 16             	shr    eax,0x16
10009373:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000937a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009380:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009386:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000938c:	25 fc 03 00 00       	and    eax,0x3fc
10009391:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009395:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000939c:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
100093a3:	33 8c 24 6c 10 00 00 	xor    ecx,DWORD PTR [esp+0x106c]
100093aa:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
100093b1:	31 c8                	xor    eax,ecx
100093b3:	89 c7                	mov    edi,eax
100093b5:	c1 ef 06             	shr    edi,0x6
100093b8:	89 c5                	mov    ebp,eax
100093ba:	c1 ed 0e             	shr    ebp,0xe
100093bd:	89 c2                	mov    edx,eax
100093bf:	c1 ea 16             	shr    edx,0x16
100093c2:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
100093c9:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100093cf:	81 e7 fc 03 00 00    	and    edi,0x3fc
100093d5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100093db:	81 e2 fc 03 00 00    	and    edx,0x3fc
100093e1:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100093e5:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100093ec:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100093f3:	33 b4 24 70 10 00 00 	xor    esi,DWORD PTR [esp+0x1070]
100093fa:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009401:	31 f2                	xor    edx,esi
10009403:	89 d7                	mov    edi,edx
10009405:	c1 ef 06             	shr    edi,0x6
10009408:	89 d5                	mov    ebp,edx
1000940a:	c1 ed 0e             	shr    ebp,0xe
1000940d:	89 d1                	mov    ecx,edx
1000940f:	c1 e9 16             	shr    ecx,0x16
10009412:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009419:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000941f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009425:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000942b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009431:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009435:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000943c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009443:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
1000944a:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009451:	31 c8                	xor    eax,ecx
10009453:	89 c7                	mov    edi,eax
10009455:	c1 ef 06             	shr    edi,0x6
10009458:	89 c5                	mov    ebp,eax
1000945a:	c1 ed 0e             	shr    ebp,0xe
1000945d:	89 c1                	mov    ecx,eax
1000945f:	c1 e9 16             	shr    ecx,0x16
10009462:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009469:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000946f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009475:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000947b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009481:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009485:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000948c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009493:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
1000949a:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100094a1:	31 ca                	xor    edx,ecx
100094a3:	89 d7                	mov    edi,edx
100094a5:	c1 ef 06             	shr    edi,0x6
100094a8:	89 d5                	mov    ebp,edx
100094aa:	c1 ed 0e             	shr    ebp,0xe
100094ad:	89 d1                	mov    ecx,edx
100094af:	c1 e9 16             	shr    ecx,0x16
100094b2:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100094b9:	81 e6 fc 03 00 00    	and    esi,0x3fc
100094bf:	81 e7 fc 03 00 00    	and    edi,0x3fc
100094c5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100094cb:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100094d1:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100094d5:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100094dc:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100094e3:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
100094ea:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100094f1:	31 c8                	xor    eax,ecx
100094f3:	89 c7                	mov    edi,eax
100094f5:	c1 ef 06             	shr    edi,0x6
100094f8:	89 c5                	mov    ebp,eax
100094fa:	c1 ed 0e             	shr    ebp,0xe
100094fd:	89 c1                	mov    ecx,eax
100094ff:	c1 e9 16             	shr    ecx,0x16
10009502:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009509:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000950f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009515:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000951b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009521:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009525:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000952c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009533:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
1000953a:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009541:	31 ca                	xor    edx,ecx
10009543:	89 d7                	mov    edi,edx
10009545:	c1 ef 06             	shr    edi,0x6
10009548:	89 d5                	mov    ebp,edx
1000954a:	c1 ed 0e             	shr    ebp,0xe
1000954d:	89 d1                	mov    ecx,edx
1000954f:	c1 e9 16             	shr    ecx,0x16
10009552:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009559:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000955f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009565:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000956b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009571:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009575:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000957c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009583:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
1000958a:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009591:	31 c8                	xor    eax,ecx
10009593:	89 c7                	mov    edi,eax
10009595:	c1 ef 06             	shr    edi,0x6
10009598:	89 c5                	mov    ebp,eax
1000959a:	c1 ed 0e             	shr    ebp,0xe
1000959d:	89 c1                	mov    ecx,eax
1000959f:	c1 e9 16             	shr    ecx,0x16
100095a2:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100095a9:	81 e6 fc 03 00 00    	and    esi,0x3fc
100095af:	81 e7 fc 03 00 00    	and    edi,0x3fc
100095b5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100095bb:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100095c1:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100095c5:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100095cc:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100095d3:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
100095da:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100095e1:	31 ca                	xor    edx,ecx
100095e3:	89 d7                	mov    edi,edx
100095e5:	c1 ef 06             	shr    edi,0x6
100095e8:	89 d5                	mov    ebp,edx
100095ea:	c1 ed 0e             	shr    ebp,0xe
100095ed:	89 d1                	mov    ecx,edx
100095ef:	c1 e9 16             	shr    ecx,0x16
100095f2:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100095f9:	81 e6 fc 03 00 00    	and    esi,0x3fc
100095ff:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009605:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000960b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009611:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009615:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000961c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009623:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
1000962a:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009631:	31 c8                	xor    eax,ecx
10009633:	89 c7                	mov    edi,eax
10009635:	c1 ef 06             	shr    edi,0x6
10009638:	89 c5                	mov    ebp,eax
1000963a:	c1 ed 0e             	shr    ebp,0xe
1000963d:	89 c1                	mov    ecx,eax
1000963f:	c1 e9 16             	shr    ecx,0x16
10009642:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009649:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000964f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009655:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000965b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009661:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009665:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000966c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009673:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
1000967a:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009681:	31 ca                	xor    edx,ecx
10009683:	89 d7                	mov    edi,edx
10009685:	c1 ef 06             	shr    edi,0x6
10009688:	89 d5                	mov    ebp,edx
1000968a:	c1 ed 0e             	shr    ebp,0xe
1000968d:	89 d6                	mov    esi,edx
1000968f:	c1 ee 16             	shr    esi,0x16
10009692:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10009699:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000969f:	81 e7 fc 03 00 00    	and    edi,0x3fc
100096a5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100096ab:	81 e6 fc 03 00 00    	and    esi,0x3fc
100096b1:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
100096b5:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
100096bc:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
100096c3:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
100096ca:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
100096d1:	31 f0                	xor    eax,esi
100096d3:	89 c5                	mov    ebp,eax
100096d5:	c1 ed 06             	shr    ebp,0x6
100096d8:	89 c1                	mov    ecx,eax
100096da:	c1 e9 0e             	shr    ecx,0xe
100096dd:	89 c6                	mov    esi,eax
100096df:	c1 ee 16             	shr    esi,0x16
100096e2:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
100096e9:	81 e7 fc 03 00 00    	and    edi,0x3fc
100096ef:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100096f5:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100096fb:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009701:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10009705:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
1000970c:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10009713:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
1000971a:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10009721:	89 f1                	mov    ecx,esi
10009723:	31 d1                	xor    ecx,edx
10009725:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
1000972c:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
1000972f:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
10009732:	8d b4 24 a0 10 00 00 	lea    esi,[esp+0x10a0]
10009739:	39 f3                	cmp    ebx,esi
1000973b:	0f 85 d7 fa ff ff    	jne    10009218 <_crypt_blowfish_rn+0x11fe>
10009741:	8d 5c 24 58          	lea    ebx,[esp+0x58]
10009745:	83 c3 08             	add    ebx,0x8
10009748:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
1000974f:	89 c7                	mov    edi,eax
10009751:	c1 ef 06             	shr    edi,0x6
10009754:	89 c5                	mov    ebp,eax
10009756:	c1 ed 0e             	shr    ebp,0xe
10009759:	89 c2                	mov    edx,eax
1000975b:	c1 ea 16             	shr    edx,0x16
1000975e:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009765:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000976b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009771:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009777:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000977d:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009781:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009788:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000978f:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10009796:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
1000979d:	31 ca                	xor    edx,ecx
1000979f:	89 d7                	mov    edi,edx
100097a1:	c1 ef 06             	shr    edi,0x6
100097a4:	89 d5                	mov    ebp,edx
100097a6:	c1 ed 0e             	shr    ebp,0xe
100097a9:	89 d1                	mov    ecx,edx
100097ab:	c1 e9 16             	shr    ecx,0x16
100097ae:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100097b5:	81 e6 fc 03 00 00    	and    esi,0x3fc
100097bb:	81 e7 fc 03 00 00    	and    edi,0x3fc
100097c1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100097c7:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100097cd:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100097d1:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100097d8:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100097df:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
100097e6:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100097ed:	31 c1                	xor    ecx,eax
100097ef:	89 cd                	mov    ebp,ecx
100097f1:	c1 ed 06             	shr    ebp,0x6
100097f4:	89 c8                	mov    eax,ecx
100097f6:	c1 e8 0e             	shr    eax,0xe
100097f9:	89 ce                	mov    esi,ecx
100097fb:	c1 ee 16             	shr    esi,0x16
100097fe:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10009805:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000980b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009811:	25 fc 03 00 00       	and    eax,0x3fc
10009816:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000981c:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10009820:	03 b4 04 58 04 00 00 	add    esi,DWORD PTR [esp+eax*1+0x458]
10009827:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
1000982e:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
10009835:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
1000983c:	31 d6                	xor    esi,edx
1000983e:	89 f5                	mov    ebp,esi
10009840:	c1 ed 06             	shr    ebp,0x6
10009843:	89 f2                	mov    edx,esi
10009845:	c1 ea 0e             	shr    edx,0xe
10009848:	89 f0                	mov    eax,esi
1000984a:	c1 e8 16             	shr    eax,0x16
1000984d:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10009854:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000985a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009860:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009866:	25 fc 03 00 00       	and    eax,0x3fc
1000986b:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000986f:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
10009876:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
1000987d:	33 8c 24 68 10 00 00 	xor    ecx,DWORD PTR [esp+0x1068]
10009884:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000988b:	31 c1                	xor    ecx,eax
1000988d:	89 ca                	mov    edx,ecx
1000988f:	c1 ea 06             	shr    edx,0x6
10009892:	89 cd                	mov    ebp,ecx
10009894:	c1 ed 0e             	shr    ebp,0xe
10009897:	89 c8                	mov    eax,ecx
10009899:	c1 e8 16             	shr    eax,0x16
1000989c:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
100098a3:	81 e7 fc 03 00 00    	and    edi,0x3fc
100098a9:	81 e2 fc 03 00 00    	and    edx,0x3fc
100098af:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100098b5:	25 fc 03 00 00       	and    eax,0x3fc
100098ba:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100098be:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100098c5:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
100098cc:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
100098d3:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
100098da:	31 f0                	xor    eax,esi
100098dc:	89 c7                	mov    edi,eax
100098de:	c1 ef 06             	shr    edi,0x6
100098e1:	89 c5                	mov    ebp,eax
100098e3:	c1 ed 0e             	shr    ebp,0xe
100098e6:	89 c2                	mov    edx,eax
100098e8:	c1 ea 16             	shr    edx,0x16
100098eb:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100098f2:	81 e6 fc 03 00 00    	and    esi,0x3fc
100098f8:	81 e7 fc 03 00 00    	and    edi,0x3fc
100098fe:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009904:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000990a:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000990e:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009915:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000991c:	33 8c 24 70 10 00 00 	xor    ecx,DWORD PTR [esp+0x1070]
10009923:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000992a:	31 ca                	xor    edx,ecx
1000992c:	89 d7                	mov    edi,edx
1000992e:	c1 ef 06             	shr    edi,0x6
10009931:	89 d5                	mov    ebp,edx
10009933:	c1 ed 0e             	shr    ebp,0xe
10009936:	89 d1                	mov    ecx,edx
10009938:	c1 e9 16             	shr    ecx,0x16
1000993b:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009942:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009948:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000994e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009954:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000995a:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000995e:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009965:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000996c:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
10009973:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000997a:	31 c8                	xor    eax,ecx
1000997c:	89 c7                	mov    edi,eax
1000997e:	c1 ef 06             	shr    edi,0x6
10009981:	89 c5                	mov    ebp,eax
10009983:	c1 ed 0e             	shr    ebp,0xe
10009986:	89 c1                	mov    ecx,eax
10009988:	c1 e9 16             	shr    ecx,0x16
1000998b:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009992:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009998:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000999e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100099a4:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100099aa:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100099ae:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100099b5:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100099bc:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
100099c3:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100099ca:	31 ca                	xor    edx,ecx
100099cc:	89 d7                	mov    edi,edx
100099ce:	c1 ef 06             	shr    edi,0x6
100099d1:	89 d5                	mov    ebp,edx
100099d3:	c1 ed 0e             	shr    ebp,0xe
100099d6:	89 d1                	mov    ecx,edx
100099d8:	c1 e9 16             	shr    ecx,0x16
100099db:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100099e2:	81 e6 fc 03 00 00    	and    esi,0x3fc
100099e8:	81 e7 fc 03 00 00    	and    edi,0x3fc
100099ee:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100099f4:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100099fa:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100099fe:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009a05:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009a0c:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
10009a13:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009a1a:	31 c8                	xor    eax,ecx
10009a1c:	89 c7                	mov    edi,eax
10009a1e:	c1 ef 06             	shr    edi,0x6
10009a21:	89 c5                	mov    ebp,eax
10009a23:	c1 ed 0e             	shr    ebp,0xe
10009a26:	89 c1                	mov    ecx,eax
10009a28:	c1 e9 16             	shr    ecx,0x16
10009a2b:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009a32:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009a38:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009a3e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009a44:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009a4a:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009a4e:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009a55:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009a5c:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
10009a63:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009a6a:	31 ca                	xor    edx,ecx
10009a6c:	89 d7                	mov    edi,edx
10009a6e:	c1 ef 06             	shr    edi,0x6
10009a71:	89 d5                	mov    ebp,edx
10009a73:	c1 ed 0e             	shr    ebp,0xe
10009a76:	89 d1                	mov    ecx,edx
10009a78:	c1 e9 16             	shr    ecx,0x16
10009a7b:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009a82:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009a88:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009a8e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009a94:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009a9a:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009a9e:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009aa5:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009aac:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10009ab3:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009aba:	31 c8                	xor    eax,ecx
10009abc:	89 c7                	mov    edi,eax
10009abe:	c1 ef 06             	shr    edi,0x6
10009ac1:	89 c5                	mov    ebp,eax
10009ac3:	c1 ed 0e             	shr    ebp,0xe
10009ac6:	89 c1                	mov    ecx,eax
10009ac8:	c1 e9 16             	shr    ecx,0x16
10009acb:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009ad2:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009ad8:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009ade:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009ae4:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009aea:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009aee:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009af5:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009afc:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
10009b03:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009b0a:	31 ca                	xor    edx,ecx
10009b0c:	89 d7                	mov    edi,edx
10009b0e:	c1 ef 06             	shr    edi,0x6
10009b11:	89 d5                	mov    ebp,edx
10009b13:	c1 ed 0e             	shr    ebp,0xe
10009b16:	89 d1                	mov    ecx,edx
10009b18:	c1 e9 16             	shr    ecx,0x16
10009b1b:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009b22:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009b28:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009b2e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009b34:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009b3a:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009b3e:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009b45:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009b4c:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10009b53:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009b5a:	31 c8                	xor    eax,ecx
10009b5c:	89 c7                	mov    edi,eax
10009b5e:	c1 ef 06             	shr    edi,0x6
10009b61:	89 c5                	mov    ebp,eax
10009b63:	c1 ed 0e             	shr    ebp,0xe
10009b66:	89 c1                	mov    ecx,eax
10009b68:	c1 e9 16             	shr    ecx,0x16
10009b6b:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009b72:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009b78:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009b7e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009b84:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009b8a:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009b8e:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009b95:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009b9c:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
10009ba3:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009baa:	31 ca                	xor    edx,ecx
10009bac:	89 d7                	mov    edi,edx
10009bae:	c1 ef 06             	shr    edi,0x6
10009bb1:	89 d5                	mov    ebp,edx
10009bb3:	c1 ed 0e             	shr    ebp,0xe
10009bb6:	89 d6                	mov    esi,edx
10009bb8:	c1 ee 16             	shr    esi,0x16
10009bbb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10009bc2:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009bc8:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009bce:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009bd4:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009bda:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10009bde:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
10009be5:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
10009bec:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10009bf3:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
10009bfa:	31 f0                	xor    eax,esi
10009bfc:	89 c5                	mov    ebp,eax
10009bfe:	c1 ed 06             	shr    ebp,0x6
10009c01:	89 c1                	mov    ecx,eax
10009c03:	c1 e9 0e             	shr    ecx,0xe
10009c06:	89 c6                	mov    esi,eax
10009c08:	c1 ee 16             	shr    esi,0x16
10009c0b:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10009c12:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009c18:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009c1e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009c24:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009c2a:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10009c2e:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
10009c35:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10009c3c:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
10009c43:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10009c4a:	89 f1                	mov    ecx,esi
10009c4c:	31 d1                	xor    ecx,edx
10009c4e:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10009c55:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10009c58:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
10009c5b:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
10009c62:	39 d3                	cmp    ebx,edx
10009c64:	0f 85 db fa ff ff    	jne    10009745 <_crypt_blowfish_rn+0x172b>
10009c6a:	8b 94 24 e8 10 00 00 	mov    edx,DWORD PTR [esp+0x10e8]
10009c71:	8b 84 24 ec 10 00 00 	mov    eax,DWORD PTR [esp+0x10ec]
10009c78:	8b 9c 24 f0 10 00 00 	mov    ebx,DWORD PTR [esp+0x10f0]
10009c7f:	8b 8c 24 f4 10 00 00 	mov    ecx,DWORD PTR [esp+0x10f4]
10009c86:	31 94 24 58 10 00 00 	xor    DWORD PTR [esp+0x1058],edx
10009c8d:	31 84 24 5c 10 00 00 	xor    DWORD PTR [esp+0x105c],eax
10009c94:	31 9c 24 60 10 00 00 	xor    DWORD PTR [esp+0x1060],ebx
10009c9b:	31 8c 24 64 10 00 00 	xor    DWORD PTR [esp+0x1064],ecx
10009ca2:	31 94 24 68 10 00 00 	xor    DWORD PTR [esp+0x1068],edx
10009ca9:	31 84 24 6c 10 00 00 	xor    DWORD PTR [esp+0x106c],eax
10009cb0:	31 9c 24 70 10 00 00 	xor    DWORD PTR [esp+0x1070],ebx
10009cb7:	31 8c 24 74 10 00 00 	xor    DWORD PTR [esp+0x1074],ecx
10009cbe:	31 94 24 78 10 00 00 	xor    DWORD PTR [esp+0x1078],edx
10009cc5:	31 84 24 7c 10 00 00 	xor    DWORD PTR [esp+0x107c],eax
10009ccc:	31 9c 24 80 10 00 00 	xor    DWORD PTR [esp+0x1080],ebx
10009cd3:	31 8c 24 84 10 00 00 	xor    DWORD PTR [esp+0x1084],ecx
10009cda:	31 94 24 88 10 00 00 	xor    DWORD PTR [esp+0x1088],edx
10009ce1:	31 84 24 8c 10 00 00 	xor    DWORD PTR [esp+0x108c],eax
10009ce8:	31 9c 24 90 10 00 00 	xor    DWORD PTR [esp+0x1090],ebx
10009cef:	31 8c 24 94 10 00 00 	xor    DWORD PTR [esp+0x1094],ecx
10009cf6:	31 94 24 98 10 00 00 	xor    DWORD PTR [esp+0x1098],edx
10009cfd:	31 84 24 9c 10 00 00 	xor    DWORD PTR [esp+0x109c],eax
10009d04:	8d 9c 24 58 10 00 00 	lea    ebx,[esp+0x1058]
10009d0b:	be 00 00 00 00       	mov    esi,0x0
10009d10:	b8 00 00 00 00       	mov    eax,0x0
10009d15:	83 c3 08             	add    ebx,0x8
10009d18:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10009d1f:	89 c7                	mov    edi,eax
10009d21:	c1 ef 06             	shr    edi,0x6
10009d24:	89 c5                	mov    ebp,eax
10009d26:	c1 ed 0e             	shr    ebp,0xe
10009d29:	89 c2                	mov    edx,eax
10009d2b:	c1 ea 16             	shr    edx,0x16
10009d2e:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009d35:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009d3b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009d41:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009d47:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009d4d:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009d51:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009d58:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009d5f:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009d66:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10009d6d:	31 d6                	xor    esi,edx
10009d6f:	89 f7                	mov    edi,esi
10009d71:	c1 ef 06             	shr    edi,0x6
10009d74:	89 f5                	mov    ebp,esi
10009d76:	c1 ed 0e             	shr    ebp,0xe
10009d79:	89 f1                	mov    ecx,esi
10009d7b:	c1 e9 16             	shr    ecx,0x16
10009d7e:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10009d85:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009d8b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009d91:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009d97:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009d9d:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009da1:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009da8:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009daf:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10009db6:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009dbd:	31 c8                	xor    eax,ecx
10009dbf:	89 c5                	mov    ebp,eax
10009dc1:	c1 ed 06             	shr    ebp,0x6
10009dc4:	89 c2                	mov    edx,eax
10009dc6:	c1 ea 0e             	shr    edx,0xe
10009dc9:	89 c1                	mov    ecx,eax
10009dcb:	c1 e9 16             	shr    ecx,0x16
10009dce:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10009dd5:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009ddb:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009de1:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009de7:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009ded:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009df1:	03 8c 14 58 04 00 00 	add    ecx,DWORD PTR [esp+edx*1+0x458]
10009df8:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
10009dff:	33 b4 24 64 10 00 00 	xor    esi,DWORD PTR [esp+0x1064]
10009e06:	89 ca                	mov    edx,ecx
10009e08:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
10009e0f:	31 d6                	xor    esi,edx
10009e11:	89 f7                	mov    edi,esi
10009e13:	c1 ef 06             	shr    edi,0x6
10009e16:	89 f5                	mov    ebp,esi
10009e18:	c1 ed 0e             	shr    ebp,0xe
10009e1b:	89 f1                	mov    ecx,esi
10009e1d:	c1 e9 16             	shr    ecx,0x16
10009e20:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10009e27:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009e2d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009e33:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009e39:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009e3f:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009e43:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009e4a:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009e51:	33 84 24 68 10 00 00 	xor    eax,DWORD PTR [esp+0x1068]
10009e58:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009e5f:	31 c1                	xor    ecx,eax
10009e61:	89 cd                	mov    ebp,ecx
10009e63:	c1 ed 06             	shr    ebp,0x6
10009e66:	89 ca                	mov    edx,ecx
10009e68:	c1 ea 0e             	shr    edx,0xe
10009e6b:	89 c8                	mov    eax,ecx
10009e6d:	c1 e8 16             	shr    eax,0x16
10009e70:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10009e77:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009e7d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009e83:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009e89:	25 fc 03 00 00       	and    eax,0x3fc
10009e8e:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009e92:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
10009e99:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10009ea0:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
10009ea7:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009eae:	89 c2                	mov    edx,eax
10009eb0:	31 f2                	xor    edx,esi
10009eb2:	89 d5                	mov    ebp,edx
10009eb4:	c1 ed 06             	shr    ebp,0x6
10009eb7:	89 d6                	mov    esi,edx
10009eb9:	c1 ee 0e             	shr    esi,0xe
10009ebc:	89 d0                	mov    eax,edx
10009ebe:	c1 e8 16             	shr    eax,0x16
10009ec1:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
10009ec8:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009ece:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009ed4:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009eda:	25 fc 03 00 00       	and    eax,0x3fc
10009edf:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009ee3:	03 84 34 58 04 00 00 	add    eax,DWORD PTR [esp+esi*1+0x458]
10009eea:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10009ef1:	33 8c 24 70 10 00 00 	xor    ecx,DWORD PTR [esp+0x1070]
10009ef8:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009eff:	89 c6                	mov    esi,eax
10009f01:	31 ce                	xor    esi,ecx
10009f03:	89 f7                	mov    edi,esi
10009f05:	c1 ef 06             	shr    edi,0x6
10009f08:	89 f5                	mov    ebp,esi
10009f0a:	c1 ed 0e             	shr    ebp,0xe
10009f0d:	89 f0                	mov    eax,esi
10009f0f:	c1 e8 16             	shr    eax,0x16
10009f12:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
10009f19:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009f1f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009f25:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009f2b:	25 fc 03 00 00       	and    eax,0x3fc
10009f30:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009f34:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009f3b:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10009f42:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
10009f49:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10009f50:	31 c2                	xor    edx,eax
10009f52:	89 d7                	mov    edi,edx
10009f54:	c1 ef 06             	shr    edi,0x6
10009f57:	89 d5                	mov    ebp,edx
10009f59:	c1 ed 0e             	shr    ebp,0xe
10009f5c:	89 d0                	mov    eax,edx
10009f5e:	c1 e8 16             	shr    eax,0x16
10009f61:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10009f68:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009f6e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009f74:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009f7a:	25 fc 03 00 00       	and    eax,0x3fc
10009f7f:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009f83:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009f8a:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10009f91:	33 b4 24 78 10 00 00 	xor    esi,DWORD PTR [esp+0x1078]
10009f98:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10009f9f:	31 c6                	xor    esi,eax
10009fa1:	89 f7                	mov    edi,esi
10009fa3:	c1 ef 06             	shr    edi,0x6
10009fa6:	89 f5                	mov    ebp,esi
10009fa8:	c1 ed 0e             	shr    ebp,0xe
10009fab:	89 f0                	mov    eax,esi
10009fad:	c1 e8 16             	shr    eax,0x16
10009fb0:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
10009fb7:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009fbd:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009fc3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009fc9:	25 fc 03 00 00       	and    eax,0x3fc
10009fce:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009fd2:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009fd9:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10009fe0:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
10009fe7:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10009fee:	31 c2                	xor    edx,eax
10009ff0:	89 d7                	mov    edi,edx
10009ff2:	c1 ef 06             	shr    edi,0x6
10009ff5:	89 d5                	mov    ebp,edx
10009ff7:	c1 ed 0e             	shr    ebp,0xe
10009ffa:	89 d0                	mov    eax,edx
10009ffc:	c1 e8 16             	shr    eax,0x16
10009fff:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
1000a006:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a00c:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a012:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a018:	25 fc 03 00 00       	and    eax,0x3fc
1000a01d:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000a021:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000a028:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
1000a02f:	33 b4 24 80 10 00 00 	xor    esi,DWORD PTR [esp+0x1080]
1000a036:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
1000a03d:	31 c6                	xor    esi,eax
1000a03f:	89 f7                	mov    edi,esi
1000a041:	c1 ef 06             	shr    edi,0x6
1000a044:	89 f5                	mov    ebp,esi
1000a046:	c1 ed 0e             	shr    ebp,0xe
1000a049:	89 f0                	mov    eax,esi
1000a04b:	c1 e8 16             	shr    eax,0x16
1000a04e:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
1000a055:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a05b:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a061:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a067:	25 fc 03 00 00       	and    eax,0x3fc
1000a06c:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000a070:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000a077:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
1000a07e:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
1000a085:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
1000a08c:	31 d0                	xor    eax,edx
1000a08e:	89 c7                	mov    edi,eax
1000a090:	c1 ef 06             	shr    edi,0x6
1000a093:	89 c5                	mov    ebp,eax
1000a095:	c1 ed 0e             	shr    ebp,0xe
1000a098:	89 c2                	mov    edx,eax
1000a09a:	c1 ea 16             	shr    edx,0x16
1000a09d:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000a0a4:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a0aa:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a0b0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a0b6:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a0bc:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a0c0:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a0c7:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a0ce:	33 b4 24 88 10 00 00 	xor    esi,DWORD PTR [esp+0x1088]
1000a0d5:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000a0dc:	31 d6                	xor    esi,edx
1000a0de:	89 f7                	mov    edi,esi
1000a0e0:	c1 ef 06             	shr    edi,0x6
1000a0e3:	89 f5                	mov    ebp,esi
1000a0e5:	c1 ed 0e             	shr    ebp,0xe
1000a0e8:	89 f2                	mov    edx,esi
1000a0ea:	c1 ea 16             	shr    edx,0x16
1000a0ed:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
1000a0f4:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a0fa:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a100:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a106:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a10c:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a110:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a117:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a11e:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
1000a125:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000a12c:	31 d0                	xor    eax,edx
1000a12e:	89 c7                	mov    edi,eax
1000a130:	c1 ef 06             	shr    edi,0x6
1000a133:	89 c5                	mov    ebp,eax
1000a135:	c1 ed 0e             	shr    ebp,0xe
1000a138:	89 c2                	mov    edx,eax
1000a13a:	c1 ea 16             	shr    edx,0x16
1000a13d:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000a144:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a14a:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a150:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a156:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a15c:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a160:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a167:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a16e:	33 b4 24 90 10 00 00 	xor    esi,DWORD PTR [esp+0x1090]
1000a175:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000a17c:	31 d6                	xor    esi,edx
1000a17e:	89 f2                	mov    edx,esi
1000a180:	c1 ea 06             	shr    edx,0x6
1000a183:	89 f5                	mov    ebp,esi
1000a185:	c1 ed 0e             	shr    ebp,0xe
1000a188:	89 f1                	mov    ecx,esi
1000a18a:	c1 e9 16             	shr    ecx,0x16
1000a18d:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000a194:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a19a:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a1a0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a1a6:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a1ac:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a1b0:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a1b7:	33 8c 14 58 08 00 00 	xor    ecx,DWORD PTR [esp+edx*1+0x858]
1000a1be:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
1000a1c5:	03 8c 3c 58 0c 00 00 	add    ecx,DWORD PTR [esp+edi*1+0xc58]
1000a1cc:	31 c8                	xor    eax,ecx
1000a1ce:	89 c5                	mov    ebp,eax
1000a1d0:	c1 ed 06             	shr    ebp,0x6
1000a1d3:	89 c2                	mov    edx,eax
1000a1d5:	c1 ea 0e             	shr    edx,0xe
1000a1d8:	89 c1                	mov    ecx,eax
1000a1da:	c1 e9 16             	shr    ecx,0x16
1000a1dd:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
1000a1e4:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a1ea:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a1f0:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a1f6:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a1fc:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a200:	03 8c 14 58 04 00 00 	add    ecx,DWORD PTR [esp+edx*1+0x458]
1000a207:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
1000a20e:	33 b4 24 98 10 00 00 	xor    esi,DWORD PTR [esp+0x1098]
1000a215:	89 ca                	mov    edx,ecx
1000a217:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
1000a21e:	31 d6                	xor    esi,edx
1000a220:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
1000a227:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
1000a22a:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
1000a22d:	8d bc 24 a0 10 00 00 	lea    edi,[esp+0x10a0]
1000a234:	39 fb                	cmp    ebx,edi
1000a236:	0f 85 d9 fa ff ff    	jne    10009d15 <_crypt_blowfish_rn+0x1cfb>
1000a23c:	8d 5c 24 58          	lea    ebx,[esp+0x58]
1000a240:	83 c3 08             	add    ebx,0x8
1000a243:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
1000a24a:	89 c7                	mov    edi,eax
1000a24c:	c1 ef 06             	shr    edi,0x6
1000a24f:	89 c5                	mov    ebp,eax
1000a251:	c1 ed 0e             	shr    ebp,0xe
1000a254:	89 c2                	mov    edx,eax
1000a256:	c1 ea 16             	shr    edx,0x16
1000a259:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000a260:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a266:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a26c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a272:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a278:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a27c:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a283:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a28a:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000a291:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
1000a298:	31 f2                	xor    edx,esi
1000a29a:	89 d7                	mov    edi,edx
1000a29c:	c1 ef 06             	shr    edi,0x6
1000a29f:	89 d5                	mov    ebp,edx
1000a2a1:	c1 ed 0e             	shr    ebp,0xe
1000a2a4:	89 d6                	mov    esi,edx
1000a2a6:	c1 ee 16             	shr    esi,0x16
1000a2a9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
1000a2b0:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a2b6:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a2bc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a2c2:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a2c8:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000a2cc:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
1000a2d3:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
1000a2da:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
1000a2e1:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
1000a2e8:	31 c6                	xor    esi,eax
1000a2ea:	89 f7                	mov    edi,esi
1000a2ec:	c1 ef 06             	shr    edi,0x6
1000a2ef:	89 f5                	mov    ebp,esi
1000a2f1:	c1 ed 0e             	shr    ebp,0xe
1000a2f4:	89 f1                	mov    ecx,esi
1000a2f6:	c1 e9 16             	shr    ecx,0x16
1000a2f9:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
1000a300:	25 fc 03 00 00       	and    eax,0x3fc
1000a305:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a30b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a311:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a317:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a31b:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a322:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a329:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
1000a330:	03 8c 04 58 0c 00 00 	add    ecx,DWORD PTR [esp+eax*1+0xc58]
1000a337:	31 d1                	xor    ecx,edx
1000a339:	89 c8                	mov    eax,ecx
1000a33b:	c1 e8 06             	shr    eax,0x6
1000a33e:	89 cd                	mov    ebp,ecx
1000a340:	c1 ed 0e             	shr    ebp,0xe
1000a343:	89 ca                	mov    edx,ecx
1000a345:	c1 ea 16             	shr    edx,0x16
1000a348:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
1000a34f:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a355:	25 fc 03 00 00       	and    eax,0x3fc
1000a35a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a360:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a366:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a36a:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a371:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
1000a378:	33 b4 24 68 10 00 00 	xor    esi,DWORD PTR [esp+0x1068]
1000a37f:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
1000a386:	31 d6                	xor    esi,edx
1000a388:	89 f2                	mov    edx,esi
1000a38a:	c1 ea 06             	shr    edx,0x6
1000a38d:	89 f5                	mov    ebp,esi
1000a38f:	c1 ed 0e             	shr    ebp,0xe
1000a392:	89 f0                	mov    eax,esi
1000a394:	c1 e8 16             	shr    eax,0x16
1000a397:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000a39e:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a3a4:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a3aa:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a3b0:	25 fc 03 00 00       	and    eax,0x3fc
1000a3b5:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000a3b9:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000a3c0:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
1000a3c7:	33 8c 24 6c 10 00 00 	xor    ecx,DWORD PTR [esp+0x106c]
1000a3ce:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000a3d5:	31 c1                	xor    ecx,eax
1000a3d7:	89 c8                	mov    eax,ecx
1000a3d9:	c1 e8 06             	shr    eax,0x6
1000a3dc:	89 cd                	mov    ebp,ecx
1000a3de:	c1 ed 0e             	shr    ebp,0xe
1000a3e1:	89 ca                	mov    edx,ecx
1000a3e3:	c1 ea 16             	shr    edx,0x16
1000a3e6:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
1000a3ed:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a3f3:	25 fc 03 00 00       	and    eax,0x3fc
1000a3f8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a3fe:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a404:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a408:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a40f:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
1000a416:	33 b4 24 70 10 00 00 	xor    esi,DWORD PTR [esp+0x1070]
1000a41d:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
1000a424:	31 d6                	xor    esi,edx
1000a426:	89 f2                	mov    edx,esi
1000a428:	c1 ea 06             	shr    edx,0x6
1000a42b:	89 f5                	mov    ebp,esi
1000a42d:	c1 ed 0e             	shr    ebp,0xe
1000a430:	89 f0                	mov    eax,esi
1000a432:	c1 e8 16             	shr    eax,0x16
1000a435:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000a43c:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a442:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a448:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a44e:	25 fc 03 00 00       	and    eax,0x3fc
1000a453:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000a457:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000a45e:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
1000a465:	33 8c 24 74 10 00 00 	xor    ecx,DWORD PTR [esp+0x1074]
1000a46c:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000a473:	31 c1                	xor    ecx,eax
1000a475:	89 cf                	mov    edi,ecx
1000a477:	c1 ef 06             	shr    edi,0x6
1000a47a:	89 cd                	mov    ebp,ecx
1000a47c:	c1 ed 0e             	shr    ebp,0xe
1000a47f:	89 ca                	mov    edx,ecx
1000a481:	c1 ea 16             	shr    edx,0x16
1000a484:	8d 04 8d 00 00 00 00 	lea    eax,[ecx*4+0x0]
1000a48b:	25 fc 03 00 00       	and    eax,0x3fc
1000a490:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a496:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a49c:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a4a2:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a4a6:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a4ad:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a4b4:	33 b4 24 78 10 00 00 	xor    esi,DWORD PTR [esp+0x1078]
1000a4bb:	03 94 04 58 0c 00 00 	add    edx,DWORD PTR [esp+eax*1+0xc58]
1000a4c2:	31 d6                	xor    esi,edx
1000a4c4:	89 f2                	mov    edx,esi
1000a4c6:	c1 ea 06             	shr    edx,0x6
1000a4c9:	89 f5                	mov    ebp,esi
1000a4cb:	c1 ed 0e             	shr    ebp,0xe
1000a4ce:	89 f0                	mov    eax,esi
1000a4d0:	c1 e8 16             	shr    eax,0x16
1000a4d3:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000a4da:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a4e0:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a4e6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a4ec:	25 fc 03 00 00       	and    eax,0x3fc
1000a4f1:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000a4f5:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000a4fc:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
1000a503:	33 8c 24 7c 10 00 00 	xor    ecx,DWORD PTR [esp+0x107c]
1000a50a:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000a511:	31 c8                	xor    eax,ecx
1000a513:	89 c7                	mov    edi,eax
1000a515:	c1 ef 06             	shr    edi,0x6
1000a518:	89 c5                	mov    ebp,eax
1000a51a:	c1 ed 0e             	shr    ebp,0xe
1000a51d:	89 c2                	mov    edx,eax
1000a51f:	c1 ea 16             	shr    edx,0x16
1000a522:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000a529:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a52f:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a535:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a53b:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a541:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a545:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a54c:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a553:	33 b4 24 80 10 00 00 	xor    esi,DWORD PTR [esp+0x1080]
1000a55a:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000a561:	31 d6                	xor    esi,edx
1000a563:	89 f7                	mov    edi,esi
1000a565:	c1 ef 06             	shr    edi,0x6
1000a568:	89 f5                	mov    ebp,esi
1000a56a:	c1 ed 0e             	shr    ebp,0xe
1000a56d:	89 f1                	mov    ecx,esi
1000a56f:	c1 e9 16             	shr    ecx,0x16
1000a572:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
1000a579:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a57f:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a585:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a58b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a591:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a595:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a59c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a5a3:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
1000a5aa:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
1000a5b1:	31 c8                	xor    eax,ecx
1000a5b3:	89 c7                	mov    edi,eax
1000a5b5:	c1 ef 06             	shr    edi,0x6
1000a5b8:	89 c5                	mov    ebp,eax
1000a5ba:	c1 ed 0e             	shr    ebp,0xe
1000a5bd:	89 c2                	mov    edx,eax
1000a5bf:	c1 ea 16             	shr    edx,0x16
1000a5c2:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000a5c9:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a5cf:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a5d5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a5db:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a5e1:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a5e5:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a5ec:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a5f3:	33 b4 24 88 10 00 00 	xor    esi,DWORD PTR [esp+0x1088]
1000a5fa:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000a601:	31 d6                	xor    esi,edx
1000a603:	89 f7                	mov    edi,esi
1000a605:	c1 ef 06             	shr    edi,0x6
1000a608:	89 f5                	mov    ebp,esi
1000a60a:	c1 ed 0e             	shr    ebp,0xe
1000a60d:	89 f1                	mov    ecx,esi
1000a60f:	c1 e9 16             	shr    ecx,0x16
1000a612:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
1000a619:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a61f:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a625:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a62b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a631:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a635:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a63c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a643:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
1000a64a:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
1000a651:	31 c8                	xor    eax,ecx
1000a653:	89 c7                	mov    edi,eax
1000a655:	c1 ef 06             	shr    edi,0x6
1000a658:	89 c5                	mov    ebp,eax
1000a65a:	c1 ed 0e             	shr    ebp,0xe
1000a65d:	89 c2                	mov    edx,eax
1000a65f:	c1 ea 16             	shr    edx,0x16
1000a662:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000a669:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a66f:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a675:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a67b:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a681:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a685:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a68c:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a693:	33 b4 24 90 10 00 00 	xor    esi,DWORD PTR [esp+0x1090]
1000a69a:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000a6a1:	31 d6                	xor    esi,edx
1000a6a3:	89 f7                	mov    edi,esi
1000a6a5:	c1 ef 06             	shr    edi,0x6
1000a6a8:	89 f5                	mov    ebp,esi
1000a6aa:	c1 ed 0e             	shr    ebp,0xe
1000a6ad:	89 f1                	mov    ecx,esi
1000a6af:	c1 e9 16             	shr    ecx,0x16
1000a6b2:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
1000a6b9:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a6bf:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a6c5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a6cb:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a6d1:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a6d5:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a6dc:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a6e3:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
1000a6ea:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
1000a6f1:	31 c8                	xor    eax,ecx
1000a6f3:	89 c7                	mov    edi,eax
1000a6f5:	c1 ef 06             	shr    edi,0x6
1000a6f8:	89 c5                	mov    ebp,eax
1000a6fa:	c1 ed 0e             	shr    ebp,0xe
1000a6fd:	89 c2                	mov    edx,eax
1000a6ff:	c1 ea 16             	shr    edx,0x16
1000a702:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000a709:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a70f:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a715:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a71b:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a721:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a725:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a72c:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a733:	33 b4 24 98 10 00 00 	xor    esi,DWORD PTR [esp+0x1098]
1000a73a:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000a741:	31 d6                	xor    esi,edx
1000a743:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
1000a74a:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
1000a74d:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
1000a750:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
1000a757:	39 d3                	cmp    ebx,edx
1000a759:	0f 85 e1 fa ff ff    	jne    1000a240 <_crypt_blowfish_rn+0x2226>
1000a75f:	ff 4c 24 04          	dec    DWORD PTR [esp+0x4]
1000a763:	0f 85 a2 e9 ff ff    	jne    1000910b <_crypt_blowfish_rn+0x10f1>
1000a769:	8b 84 24 58 10 00 00 	mov    eax,DWORD PTR [esp+0x1058]
1000a770:	89 04 24             	mov    DWORD PTR [esp],eax
1000a773:	8b 84 24 5c 10 00 00 	mov    eax,DWORD PTR [esp+0x105c]
1000a77a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
1000a77e:	8b 84 24 60 10 00 00 	mov    eax,DWORD PTR [esp+0x1060]
1000a785:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
1000a789:	8b 84 24 64 10 00 00 	mov    eax,DWORD PTR [esp+0x1064]
1000a790:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000a794:	8b 84 24 68 10 00 00 	mov    eax,DWORD PTR [esp+0x1068]
1000a79b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
1000a79f:	8b 84 24 6c 10 00 00 	mov    eax,DWORD PTR [esp+0x106c]
1000a7a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000a7aa:	8b 84 24 70 10 00 00 	mov    eax,DWORD PTR [esp+0x1070]
1000a7b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000a7b5:	8b 84 24 74 10 00 00 	mov    eax,DWORD PTR [esp+0x1074]
1000a7bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000a7c0:	8b 84 24 78 10 00 00 	mov    eax,DWORD PTR [esp+0x1078]
1000a7c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000a7cb:	8b 84 24 7c 10 00 00 	mov    eax,DWORD PTR [esp+0x107c]
1000a7d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
1000a7d6:	8b 84 24 80 10 00 00 	mov    eax,DWORD PTR [esp+0x1080]
1000a7dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
1000a7e1:	8b 84 24 84 10 00 00 	mov    eax,DWORD PTR [esp+0x1084]
1000a7e8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000a7ec:	8b 84 24 88 10 00 00 	mov    eax,DWORD PTR [esp+0x1088]
1000a7f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
1000a7f7:	8b 84 24 8c 10 00 00 	mov    eax,DWORD PTR [esp+0x108c]
1000a7fe:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
1000a802:	8b 84 24 90 10 00 00 	mov    eax,DWORD PTR [esp+0x1090]
1000a809:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
1000a80d:	8b 84 24 94 10 00 00 	mov    eax,DWORD PTR [esp+0x1094]
1000a814:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
1000a818:	8b 84 24 98 10 00 00 	mov    eax,DWORD PTR [esp+0x1098]
1000a81f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
1000a823:	8b 84 24 9c 10 00 00 	mov    eax,DWORD PTR [esp+0x109c]
1000a82a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
1000a82e:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
1000a832:	89 5c 24 4c          	mov    DWORD PTR [esp+0x4c],ebx
1000a836:	8b 04 9d 20 bf 00 10 	mov    eax,DWORD PTR [ebx*4+0x1000bf20]	1000a839: R_386_32	.data
1000a83d:	8b 0c 9d 24 bf 00 10 	mov    ecx,DWORD PTR [ebx*4+0x1000bf24]	1000a840: R_386_32	.data
1000a844:	bb 40 00 00 00       	mov    ebx,0x40
1000a849:	33 04 24             	xor    eax,DWORD PTR [esp]
1000a84c:	89 c7                	mov    edi,eax
1000a84e:	c1 ef 06             	shr    edi,0x6
1000a851:	89 c5                	mov    ebp,eax
1000a853:	c1 ed 0e             	shr    ebp,0xe
1000a856:	89 c2                	mov    edx,eax
1000a858:	c1 ea 16             	shr    edx,0x16
1000a85b:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000a862:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a868:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a86e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a874:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a87a:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a87e:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000a885:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000a88c:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000a893:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
1000a897:	31 ca                	xor    edx,ecx
1000a899:	89 d7                	mov    edi,edx
1000a89b:	c1 ef 06             	shr    edi,0x6
1000a89e:	89 d5                	mov    ebp,edx
1000a8a0:	c1 ed 0e             	shr    ebp,0xe
1000a8a3:	89 d1                	mov    ecx,edx
1000a8a5:	c1 e9 16             	shr    ecx,0x16
1000a8a8:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000a8af:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a8b5:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a8bb:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a8c1:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a8c7:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a8cb:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a8d2:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a8d9:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
1000a8dd:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a8e4:	31 c1                	xor    ecx,eax
1000a8e6:	89 cd                	mov    ebp,ecx
1000a8e8:	c1 ed 06             	shr    ebp,0x6
1000a8eb:	89 ce                	mov    esi,ecx
1000a8ed:	c1 ee 0e             	shr    esi,0xe
1000a8f0:	89 c8                	mov    eax,ecx
1000a8f2:	c1 e8 16             	shr    eax,0x16
1000a8f5:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
1000a8fc:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a902:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a908:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a90e:	25 fc 03 00 00       	and    eax,0x3fc
1000a913:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000a917:	03 84 34 58 04 00 00 	add    eax,DWORD PTR [esp+esi*1+0x458]
1000a91e:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
1000a925:	33 54 24 0c          	xor    edx,DWORD PTR [esp+0xc]
1000a929:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000a930:	89 c6                	mov    esi,eax
1000a932:	31 d6                	xor    esi,edx
1000a934:	89 f5                	mov    ebp,esi
1000a936:	c1 ed 06             	shr    ebp,0x6
1000a939:	89 f2                	mov    edx,esi
1000a93b:	c1 ea 0e             	shr    edx,0xe
1000a93e:	89 f0                	mov    eax,esi
1000a940:	c1 e8 16             	shr    eax,0x16
1000a943:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000a94a:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a950:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a956:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a95c:	25 fc 03 00 00       	and    eax,0x3fc
1000a961:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000a965:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
1000a96c:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
1000a973:	33 4c 24 10          	xor    ecx,DWORD PTR [esp+0x10]
1000a977:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000a97e:	31 c1                	xor    ecx,eax
1000a980:	89 ca                	mov    edx,ecx
1000a982:	c1 ea 06             	shr    edx,0x6
1000a985:	89 cd                	mov    ebp,ecx
1000a987:	c1 ed 0e             	shr    ebp,0xe
1000a98a:	89 c8                	mov    eax,ecx
1000a98c:	c1 e8 16             	shr    eax,0x16
1000a98f:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
1000a996:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a99c:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a9a2:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a9a8:	25 fc 03 00 00       	and    eax,0x3fc
1000a9ad:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000a9b1:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000a9b8:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
1000a9bf:	33 74 24 14          	xor    esi,DWORD PTR [esp+0x14]
1000a9c3:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000a9ca:	31 f0                	xor    eax,esi
1000a9cc:	89 c7                	mov    edi,eax
1000a9ce:	c1 ef 06             	shr    edi,0x6
1000a9d1:	89 c5                	mov    ebp,eax
1000a9d3:	c1 ed 0e             	shr    ebp,0xe
1000a9d6:	89 c2                	mov    edx,eax
1000a9d8:	c1 ea 16             	shr    edx,0x16
1000a9db:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000a9e2:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a9e8:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a9ee:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a9f4:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000a9fa:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000a9fe:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000aa05:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000aa0c:	33 4c 24 18          	xor    ecx,DWORD PTR [esp+0x18]
1000aa10:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000aa17:	31 ca                	xor    edx,ecx
1000aa19:	89 d7                	mov    edi,edx
1000aa1b:	c1 ef 06             	shr    edi,0x6
1000aa1e:	89 d5                	mov    ebp,edx
1000aa20:	c1 ed 0e             	shr    ebp,0xe
1000aa23:	89 d1                	mov    ecx,edx
1000aa25:	c1 e9 16             	shr    ecx,0x16
1000aa28:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000aa2f:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000aa35:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000aa3b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000aa41:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000aa47:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000aa4b:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000aa52:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000aa59:	33 44 24 1c          	xor    eax,DWORD PTR [esp+0x1c]
1000aa5d:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000aa64:	31 c8                	xor    eax,ecx
1000aa66:	89 c7                	mov    edi,eax
1000aa68:	c1 ef 06             	shr    edi,0x6
1000aa6b:	89 c5                	mov    ebp,eax
1000aa6d:	c1 ed 0e             	shr    ebp,0xe
1000aa70:	89 c1                	mov    ecx,eax
1000aa72:	c1 e9 16             	shr    ecx,0x16
1000aa75:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000aa7c:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000aa82:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000aa88:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000aa8e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000aa94:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000aa98:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000aa9f:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000aaa6:	33 54 24 20          	xor    edx,DWORD PTR [esp+0x20]
1000aaaa:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000aab1:	31 ca                	xor    edx,ecx
1000aab3:	89 d7                	mov    edi,edx
1000aab5:	c1 ef 06             	shr    edi,0x6
1000aab8:	89 d5                	mov    ebp,edx
1000aaba:	c1 ed 0e             	shr    ebp,0xe
1000aabd:	89 d1                	mov    ecx,edx
1000aabf:	c1 e9 16             	shr    ecx,0x16
1000aac2:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000aac9:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000aacf:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000aad5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000aadb:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000aae1:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000aae5:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000aaec:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000aaf3:	33 44 24 24          	xor    eax,DWORD PTR [esp+0x24]
1000aaf7:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000aafe:	31 c8                	xor    eax,ecx
1000ab00:	89 c7                	mov    edi,eax
1000ab02:	c1 ef 06             	shr    edi,0x6
1000ab05:	89 c5                	mov    ebp,eax
1000ab07:	c1 ed 0e             	shr    ebp,0xe
1000ab0a:	89 c1                	mov    ecx,eax
1000ab0c:	c1 e9 16             	shr    ecx,0x16
1000ab0f:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000ab16:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000ab1c:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000ab22:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000ab28:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000ab2e:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000ab32:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000ab39:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000ab40:	33 54 24 28          	xor    edx,DWORD PTR [esp+0x28]
1000ab44:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000ab4b:	31 ca                	xor    edx,ecx
1000ab4d:	89 d7                	mov    edi,edx
1000ab4f:	c1 ef 06             	shr    edi,0x6
1000ab52:	89 d5                	mov    ebp,edx
1000ab54:	c1 ed 0e             	shr    ebp,0xe
1000ab57:	89 d1                	mov    ecx,edx
1000ab59:	c1 e9 16             	shr    ecx,0x16
1000ab5c:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000ab63:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000ab69:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000ab6f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000ab75:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000ab7b:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000ab7f:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000ab86:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000ab8d:	33 44 24 2c          	xor    eax,DWORD PTR [esp+0x2c]
1000ab91:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000ab98:	31 c8                	xor    eax,ecx
1000ab9a:	89 c7                	mov    edi,eax
1000ab9c:	c1 ef 06             	shr    edi,0x6
1000ab9f:	89 c5                	mov    ebp,eax
1000aba1:	c1 ed 0e             	shr    ebp,0xe
1000aba4:	89 c1                	mov    ecx,eax
1000aba6:	c1 e9 16             	shr    ecx,0x16
1000aba9:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000abb0:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000abb6:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000abbc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000abc2:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000abc8:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000abcc:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000abd3:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000abda:	33 54 24 30          	xor    edx,DWORD PTR [esp+0x30]
1000abde:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000abe5:	31 ca                	xor    edx,ecx
1000abe7:	89 d7                	mov    edi,edx
1000abe9:	c1 ef 06             	shr    edi,0x6
1000abec:	89 d5                	mov    ebp,edx
1000abee:	c1 ed 0e             	shr    ebp,0xe
1000abf1:	89 d1                	mov    ecx,edx
1000abf3:	c1 e9 16             	shr    ecx,0x16
1000abf6:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000abfd:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000ac03:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000ac09:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000ac0f:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000ac15:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000ac19:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000ac20:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000ac27:	33 44 24 34          	xor    eax,DWORD PTR [esp+0x34]
1000ac2b:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000ac32:	31 c8                	xor    eax,ecx
1000ac34:	89 c7                	mov    edi,eax
1000ac36:	c1 ef 06             	shr    edi,0x6
1000ac39:	89 c5                	mov    ebp,eax
1000ac3b:	c1 ed 0e             	shr    ebp,0xe
1000ac3e:	89 c1                	mov    ecx,eax
1000ac40:	c1 e9 16             	shr    ecx,0x16
1000ac43:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000ac4a:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000ac50:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000ac56:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000ac5c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000ac62:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000ac66:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000ac6d:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000ac74:	33 54 24 38          	xor    edx,DWORD PTR [esp+0x38]
1000ac78:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000ac7f:	31 ca                	xor    edx,ecx
1000ac81:	89 d7                	mov    edi,edx
1000ac83:	c1 ef 06             	shr    edi,0x6
1000ac86:	89 d5                	mov    ebp,edx
1000ac88:	c1 ed 0e             	shr    ebp,0xe
1000ac8b:	89 d6                	mov    esi,edx
1000ac8d:	c1 ee 16             	shr    esi,0x16
1000ac90:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
1000ac97:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000ac9d:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000aca3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000aca9:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000acaf:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000acb3:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
1000acba:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
1000acc1:	33 44 24 3c          	xor    eax,DWORD PTR [esp+0x3c]
1000acc5:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
1000accc:	31 f0                	xor    eax,esi
1000acce:	89 c5                	mov    ebp,eax
1000acd0:	c1 ed 06             	shr    ebp,0x6
1000acd3:	89 c1                	mov    ecx,eax
1000acd5:	c1 e9 0e             	shr    ecx,0xe
1000acd8:	89 c6                	mov    esi,eax
1000acda:	c1 ee 16             	shr    esi,0x16
1000acdd:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
1000ace4:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000acea:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000acf0:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000acf6:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000acfc:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000ad00:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
1000ad07:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
1000ad0e:	33 54 24 40          	xor    edx,DWORD PTR [esp+0x40]
1000ad12:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
1000ad19:	89 f1                	mov    ecx,esi
1000ad1b:	31 d1                	xor    ecx,edx
1000ad1d:	33 44 24 44          	xor    eax,DWORD PTR [esp+0x44]
1000ad21:	4b                   	dec    ebx
1000ad22:	0f 85 21 fb ff ff    	jne    1000a849 <_crypt_blowfish_rn+0x282f>
1000ad28:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
1000ad2c:	89 84 9c e8 10 00 00 	mov    DWORD PTR [esp+ebx*4+0x10e8],eax
1000ad33:	89 8c 9c ec 10 00 00 	mov    DWORD PTR [esp+ebx*4+0x10ec],ecx
1000ad3a:	83 44 24 48 02       	add    DWORD PTR [esp+0x48],0x2
1000ad3f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
1000ad43:	83 f8 06             	cmp    eax,0x6
1000ad46:	0f 85 e2 fa ff ff    	jne    1000a82e <_crypt_blowfish_rn+0x2814>
1000ad4c:	b9 07 00 00 00       	mov    ecx,0x7
1000ad51:	8b bc 24 1c 11 00 00 	mov    edi,DWORD PTR [esp+0x111c]
1000ad58:	8b b4 24 18 11 00 00 	mov    esi,DWORD PTR [esp+0x1118]
1000ad5f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000ad61:	8b 84 24 18 11 00 00 	mov    eax,DWORD PTR [esp+0x1118]
1000ad68:	0f be 40 1c          	movsx  eax,BYTE PTR [eax+0x1c]
1000ad6c:	8a 80 e0 cf 00 10    	mov    al,BYTE PTR [eax+0x1000cfe0]	1000ad6e: R_386_32	.data
1000ad72:	83 e0 30             	and    eax,0x30
1000ad75:	8a 80 a0 cf 00 10    	mov    al,BYTE PTR [eax+0x1000cfa0]	1000ad77: R_386_32	.data
1000ad7b:	88 04 24             	mov    BYTE PTR [esp],al
1000ad7e:	8b 9c 24 1c 11 00 00 	mov    ebx,DWORD PTR [esp+0x111c]
1000ad85:	88 43 1c             	mov    BYTE PTR [ebx+0x1c],al
1000ad88:	6a 06                	push   0x6
1000ad8a:	8d 74 24 5c          	lea    esi,[esp+0x5c]
1000ad8e:	8d 9c 24 ec 10 00 00 	lea    ebx,[esp+0x10ec]
1000ad95:	53                   	push   ebx
1000ad96:	e8 f5 d1 ff ff       	call   10007f90 <BF_swap>
1000ad9b:	6a 17                	push   0x17
1000ad9d:	53                   	push   ebx
1000ad9e:	8b 84 24 2c 11 00 00 	mov    eax,DWORD PTR [esp+0x112c]
1000ada5:	83 c0 1d             	add    eax,0x1d
1000ada8:	50                   	push   eax
1000ada9:	e8 3d d1 ff ff       	call   10007eeb <BF_encode>
1000adae:	8b 84 24 30 11 00 00 	mov    eax,DWORD PTR [esp+0x1130]
1000adb5:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
1000adb9:	68 a8 10 00 00       	push   0x10a8
1000adbe:	56                   	push   esi
1000adbf:	e8 0b d0 ff ff       	call   10007dcf <clean>
1000adc4:	83 c4 1c             	add    esp,0x1c
1000adc7:	8b 84 24 1c 11 00 00 	mov    eax,DWORD PTR [esp+0x111c]
1000adce:	eb 29                	jmp    1000adf9 <_crypt_blowfish_rn+0x2ddf>
1000add0:	c7 05 00 00 00 00 22 00 00 00 	mov    DWORD PTR ds:0x0,0x22	1000add2: R_386_32	_bcrypt_errno
1000adda:	b8 00 00 00 00       	mov    eax,0x0
1000addf:	eb 18                	jmp    1000adf9 <_crypt_blowfish_rn+0x2ddf>
1000ade1:	80 fa 31             	cmp    dl,0x31
1000ade4:	0f 8e a3 d2 ff ff    	jle    1000808d <_crypt_blowfish_rn+0x73>
1000adea:	c7 05 00 00 00 00 16 00 00 00 	mov    DWORD PTR ds:0x0,0x16	1000adec: R_386_32	_bcrypt_errno
1000adf4:	b8 00 00 00 00       	mov    eax,0x0
1000adf9:	81 c4 00 11 00 00    	add    esp,0x1100
1000adff:	5b                   	pop    ebx
1000ae00:	5e                   	pop    esi
1000ae01:	5f                   	pop    edi
1000ae02:	5d                   	pop    ebp
1000ae03:	c3                   	ret    
1000ae04:	6a 10                	push   0x10
1000ae06:	8d 84 24 ec 10 00 00 	lea    eax,[esp+0x10ec]
1000ae0d:	50                   	push   eax
1000ae0e:	e8 bc cf ff ff       	call   10007dcf <clean>
1000ae13:	c7 05 00 00 00 00 16 00 00 00 	mov    DWORD PTR ds:0x0,0x16	1000ae15: R_386_32	_bcrypt_errno
1000ae1d:	83 c4 08             	add    esp,0x8
1000ae20:	b8 00 00 00 00       	mov    eax,0x0
1000ae25:	eb d2                	jmp    1000adf9 <_crypt_blowfish_rn+0x2ddf>

1000ae27 <_crypt_gensalt_blowfish_rn>:
1000ae27:	53                   	push   ebx
1000ae28:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
1000ae2c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
1000ae30:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
1000ae35:	7e 19                	jle    1000ae50 <_crypt_gensalt_blowfish_rn+0x29>
1000ae37:	83 7c 24 18 1d       	cmp    DWORD PTR [esp+0x18],0x1d
1000ae3c:	0f 8e 88 00 00 00    	jle    1000aeca <_crypt_gensalt_blowfish_rn+0xa3>
1000ae42:	85 c9                	test   ecx,ecx
1000ae44:	74 33                	je     1000ae79 <_crypt_gensalt_blowfish_rn+0x52>
1000ae46:	8d 41 fc             	lea    eax,[ecx-0x4]
1000ae49:	83 f8 1b             	cmp    eax,0x1b
1000ae4c:	76 30                	jbe    1000ae7e <_crypt_gensalt_blowfish_rn+0x57>
1000ae4e:	eb 07                	jmp    1000ae57 <_crypt_gensalt_blowfish_rn+0x30>
1000ae50:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
1000ae55:	7e 03                	jle    1000ae5a <_crypt_gensalt_blowfish_rn+0x33>
1000ae57:	c6 03 00             	mov    BYTE PTR [ebx],0x0
1000ae5a:	83 7c 24 18 1d       	cmp    DWORD PTR [esp+0x18],0x1d
1000ae5f:	7e 11                	jle    1000ae72 <_crypt_gensalt_blowfish_rn+0x4b>
1000ae61:	b8 16 00 00 00       	mov    eax,0x16
1000ae66:	a3 00 00 00 00       	mov    ds:0x0,eax	1000ae67: R_386_32	_bcrypt_errno
1000ae6b:	b8 00 00 00 00       	mov    eax,0x0
1000ae70:	eb 56                	jmp    1000aec8 <_crypt_gensalt_blowfish_rn+0xa1>
1000ae72:	b8 22 00 00 00       	mov    eax,0x22
1000ae77:	eb ed                	jmp    1000ae66 <_crypt_gensalt_blowfish_rn+0x3f>
1000ae79:	b9 05 00 00 00       	mov    ecx,0x5
1000ae7e:	c6 03 24             	mov    BYTE PTR [ebx],0x24
1000ae81:	c6 43 01 32          	mov    BYTE PTR [ebx+0x1],0x32
1000ae85:	c6 43 02 61          	mov    BYTE PTR [ebx+0x2],0x61
1000ae89:	c6 43 03 24          	mov    BYTE PTR [ebx+0x3],0x24
1000ae8d:	b8 cd cc cc cc       	mov    eax,0xcccccccd
1000ae92:	f7 e1                	mul    ecx
1000ae94:	89 d0                	mov    eax,edx
1000ae96:	c1 e8 03             	shr    eax,0x3
1000ae99:	8d 50 30             	lea    edx,[eax+0x30]
1000ae9c:	88 53 04             	mov    BYTE PTR [ebx+0x4],dl
1000ae9f:	8d 04 80             	lea    eax,[eax+eax*4]
1000aea2:	01 c0                	add    eax,eax
1000aea4:	29 c1                	sub    ecx,eax
1000aea6:	83 c1 30             	add    ecx,0x30
1000aea9:	88 4b 05             	mov    BYTE PTR [ebx+0x5],cl
1000aeac:	c6 43 06 24          	mov    BYTE PTR [ebx+0x6],0x24
1000aeb0:	6a 10                	push   0x10
1000aeb2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000aeb6:	8d 43 07             	lea    eax,[ebx+0x7]
1000aeb9:	50                   	push   eax
1000aeba:	e8 2c d0 ff ff       	call   10007eeb <BF_encode>
1000aebf:	c6 43 1d 00          	mov    BYTE PTR [ebx+0x1d],0x0
1000aec3:	83 c4 0c             	add    esp,0xc
1000aec6:	89 d8                	mov    eax,ebx
1000aec8:	5b                   	pop    ebx
1000aec9:	c3                   	ret    
1000aeca:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
1000aecf:	7f 86                	jg     1000ae57 <_crypt_gensalt_blowfish_rn+0x30>
1000aed1:	b8 22 00 00 00       	mov    eax,0x22
1000aed6:	eb 8e                	jmp    1000ae66 <_crypt_gensalt_blowfish_rn+0x3f>

1000aed8 <bcrypt_gensalt>:
1000aed8:	57                   	push   edi
1000aed9:	56                   	push   esi
1000aeda:	53                   	push   ebx
1000aedb:	83 ec 10             	sub    esp,0x10
1000aede:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
1000aee2:	89 e3                	mov    ebx,esp
1000aee4:	8d 74 24 10          	lea    esi,[esp+0x10]
1000aee8:	e8 fc ff ff ff       	call   1000aee9 <bcrypt_gensalt+0x11>	1000aee9: R_386_PC32	_bcrypt_rand
1000aeed:	88 03                	mov    BYTE PTR [ebx],al
1000aeef:	43                   	inc    ebx
1000aef0:	39 f3                	cmp    ebx,esi
1000aef2:	75 f4                	jne    1000aee8 <bcrypt_gensalt+0x10>
1000aef4:	8d 47 fc             	lea    eax,[edi-0x4]
1000aef7:	83 f8 1b             	cmp    eax,0x1b
1000aefa:	76 05                	jbe    1000af01 <bcrypt_gensalt+0x29>
1000aefc:	bf 0c 00 00 00       	mov    edi,0xc
1000af01:	83 ec 0c             	sub    esp,0xc
1000af04:	6a 40                	push   0x40
1000af06:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
1000af0a:	6a 10                	push   0x10
1000af0c:	8d 44 24 18          	lea    eax,[esp+0x18]
1000af10:	50                   	push   eax
1000af11:	57                   	push   edi
1000af12:	e8 10 ff ff ff       	call   1000ae27 <_crypt_gensalt_blowfish_rn>
1000af17:	85 c0                	test   eax,eax
1000af19:	0f 94 c0             	sete   al
1000af1c:	0f b6 c0             	movzx  eax,al
1000af1f:	83 c4 30             	add    esp,0x30
1000af22:	5b                   	pop    ebx
1000af23:	5e                   	pop    esi
1000af24:	5f                   	pop    edi
1000af25:	c3                   	ret    

1000af26 <bcrypt_hashpw>:
1000af26:	6a 40                	push   0x40
1000af28:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000af2c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000af30:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000af34:	e8 e1 d0 ff ff       	call   1000801a <_crypt_blowfish_rn>
1000af39:	83 c4 10             	add    esp,0x10
1000af3c:	85 c0                	test   eax,eax
1000af3e:	0f 94 c0             	sete   al
1000af41:	0f b6 c0             	movzx  eax,al
1000af44:	c3                   	ret    
1000af45:	66 90                	xchg   ax,ax
1000af47:	90                   	nop

1000af48 <TERMINAL_KEYBUFFER_IN_SIZE>:
1000af48:	80 00 00 00                                         ....

1000af4c <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000af4c:	80 00 00 00 2e 00 2e 2e 00 2f 00 43 6f 75 6c 64     ........./.Could
1000af5c:	6e 27 74 20 6f 70 65 6e 20 62 61 73 65 20 70 61     n't open base pa
1000af6c:	74 68 2e 0a 00 25 73 20 2d 3e 20 25 73 0a 00 43     th...%s -> %s..C
1000af7c:	4f 55 4c 44 20 4e 4f 54 20 43 52 45 41 54 45 00     OULD NOT CREATE.
1000af8c:	43 4f 55 4c 44 20 4e 4f 54 20 43 4f 50 59 00 4e     COULD NOT COPY.N
1000af9c:	4f 20 4d 45 4d 4f 52 59 00 42 61 63 6b 75 70 00     O MEMORY.Backup.
1000afac:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
1000afbc:	2f 42 61 63 6b 75 70 2f 00 30 31 32 33 34 35 36     /Backup/.0123456
1000afcc:	37 38 39 41 42 43 44 45 46 00 43 3a 2f 55 73 65     789ABCDEF.C:/Use
1000afdc:	72 73 2f 00 2f 44 65 73 6b 74 6f 70 00 2f 44 6f     rs/./Desktop./Do
1000afec:	63 75 6d 65 6e 74 73 00 2f 44 6f 77 6e 6c 6f 61     cuments./Downloa
1000affc:	64 73 00 2f 50 69 63 74 75 72 65 73 00 2f 54 72     ds./Pictures./Tr
1000b00c:	61 73 68 20 42 69 6e 00 2f 4d 75 73 69 63 00 2f     ash Bin./Music./
1000b01c:	4d 6f 76 69 65 73 00 43 3a 2f 42 61 6e 61 6e 61     Movies.C:/Banana
1000b02c:	2f 52 65 67 69 73 74 72 79 2f 55 73 65 72 2f 00     /Registry/User/.
1000b03c:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
1000b04c:	72 79 2f 44 65 66 61 75 6c 74 55 73 65 72 00 00     ry/DefaultUser..
1000b05c:	43 68 65 63 6b 69 6e 67 0a 20 73 79 73 74 65 6d     Checking. system
1000b06c:	0a 20 72 65 71 75 69 72 65 6d 65 6e 74 73 0a 0a     . requirements..
1000b07c:	20 4c 65 67 61 6c 0a 20 6e 6f 74 69 63 65 73 0a      Legal. notices.
1000b08c:	0a 20 43 68 6f 6f 73 69 6e 67 20 61 0a 20 70 61     . Choosing a. pa
1000b09c:	72 74 69 74 69 6f 6e 0a 0a 20 46 6f 72 6d 61 74     rtition.. Format
1000b0ac:	74 69 6e 67 0a 0a 20 43 6f 70 79 69 6e 67 20 66     ting.. Copying f
1000b0bc:	69 6c 65 73 0a 0a 20 52 65 73 74 61 72 74 69 6e     iles.. Restartin
1000b0cc:	67 0a 20 79 6f 75 72 20 63 6f 6d 70 75 74 65 72     g. your computer
1000b0dc:	0a 0a 00 20 46 69 6e 61 6c 69 73 69 6e 67 20 74     ... Finalising t
1000b0ec:	68 65 0a 20 69 6e 73 74 61 6c 6c 61 74 69 6f 6e     he. installation
1000b0fc:	00 0a 0a 0a 0a 0a 0a 0a 0a 20 20 20 53 41 46 45     .........   SAFE
1000b10c:	20 4d 4f 44 45 00 00 00 25 57 30 38 3c 31 35 77      MODE...%W08<15w
1000b11c:	62 77 62 77 62 77 3e 31 35 46 31 30 30 30 67 30     bwbwbw>15F1000g0
1000b12c:	30 30 34 7b 41 6c 65 78 7d 77 6e 77 3c 31 35 77     004{Alex}wnw<15w
1000b13c:	62 77 62 77 62 77 3e 31 35 46 31 30 30 30 67 30     bwbwbw>15F1000g0
1000b14c:	30 32 34 7b 43 6f 6d 70 61 6e 79 20 4e 61 6d 65     024{Company Name
1000b15c:	7d 77 6e 77 77 6e 77 77 6e 77 77 6e 77 77 6e 77     }wnwwnwwnwwnwwnw
1000b16c:	77 6e 77 77 6e 77 77 6e 77 77 6e 77 77 6e 77 77     wnwwnwwnwwnwwnww
1000b17c:	6e 77 77 6e 77 77 6e 77 24 58 20 20 20 20 20 00     nwwnwwnw$X     .
1000b18c:	25 63 3a 20 25 63 25 63 25 63 25 63 0a 00 77 61     %c: %c%c%c%c..wa
1000b19c:	69 74 69 6e 67 20 25 64 20 6d 69 6c 6c 69 73 65     iting %d millise
1000b1ac:	63 0a 00 00 50 6c 65 61 73 65 20 77 61 69 74 20     c...Please wait 
1000b1bc:	77 68 69 6c 65 20 74 68 65 20 69 6e 73 74 61 6c     while the instal
1000b1cc:	6c 20 66 69 6e 69 73 68 65 73 2e 00 10 20 00 20     l finishes... . 
1000b1dc:	20 00 41 6c 6c 6f 63 61 74 69 6e 67 20 74 68 65      .Allocating the
1000b1ec:	20 73 77 61 70 66 69 6c 65 00 55 70 64 61 74 69      swapfile.Updati
1000b1fc:	6e 67 20 74 68 65 20 72 65 67 69 73 74 72 79 00     ng the registry.
1000b20c:	43 72 65 61 74 69 6e 67 20 75 73 65 72 20 61 63     Creating user ac
1000b21c:	63 6f 75 6e 74 00 49 6e 73 74 61 6c 6c 69 6e 67     count.Installing
1000b22c:	20 70 61 63 6b 61 67 65 73 00 42 61 63 6b 69 6e      packages.Backin
1000b23c:	67 20 75 70 20 73 79 73 74 65 6d 20 66 69 6c 65     g up system file
1000b24c:	73 00 46 69 6e 69 73 68 69 6e 67 20 74 6f 75 63     s.Finishing touc
1000b25c:	68 65 73 00 51 51 2d 30 30 30 2d 30 30 30 2d 30     hes.QQ-000-000-0
1000b26c:	30 30 2d 51 00 00 00 00 43 3a 2f 42 61 6e 61 6e     00-Q....C:/Banan
1000b27c:	61 2f 53 79 73 74 65 6d 2f 74 69 6d 65 7a 6f 6e     a/System/timezon
1000b28c:	65 73 2e 74 78 74 00 20 00 2e 2e 2e 20 00 00 00     es.txt. .... ...
1000b29c:	53 65 74 74 69 6e 67 20 75 70 20 74 68 65 20 73     Setting up the s
1000b2ac:	79 73 74 65 6d 20 66 6f 72 20 74 68 65 20 66 69     ystem for the fi
1000b2bc:	72 73 74 20 74 69 6d 65 00 0a 0a 0a 0a 0a 0a 00     rst time........
1000b2cc:	54 65 73 74 00 41 41 2d 30 30 30 30 30 2d 30 30     Test.AA-00000-00
1000b2dc:	30 30 30 2d 41 00 57 57 2d 38 38 33 38 38 2d 35     000-A.WW-88388-5
1000b2ec:	35 35 35 35 2d 4e 00 43 72 65 61 74 65 20 4e 65     5555-N.Create Ne
1000b2fc:	77 20 55 73 65 72 00 42 61 6e 61 6e 61 20 53 65     w User.Banana Se
1000b30c:	74 75 70 00 50 6c 65 61 73 65 20 65 6e 74 65 72     tup.Please enter
1000b31c:	20 79 6f 75 72 20 64 65 74 61 69 6c 73 2e 20 50      your details. P
1000b32c:	72 65 73 73 20 54 41 42 20 74 6f 20 73 77 69 74     ress TAB to swit
1000b33c:	63 68 00 00 62 65 74 77 65 65 6e 20 66 69 65 6c     ch..between fiel
1000b34c:	64 73 2c 20 6f 72 20 45 53 43 20 74 6f 20 63 61     ds, or ESC to ca
1000b35c:	6e 63 65 6c 2e 00 62 65 74 77 65 65 6e 20 66 69     ncel..between fi
1000b36c:	65 6c 64 73 2e 00 4e 61 6d 65 00 43 6f 6d 70 61     elds..Name.Compa
1000b37c:	6e 79 00 50 61 73 73 77 6f 72 64 00 43 6f 6e 66     ny.Password.Conf
1000b38c:	69 72 6d 00 70 61 73 73 77 6f 72 64 00 00 00 00     irm.password....
1000b39c:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000b3ac:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000b3bc:	20 20 20 20 00 20 11 00 20 20 20 00 2a 00 50 72         . ..   .*.Pr
1000b3cc:	65 73 73 20 45 4e 54 45 52 20 74 6f 20 73 75 62     ess ENTER to sub
1000b3dc:	6d 69 74 00 20 20 20 20 20 20 20 20 20 20 20 20     mit.            
1000b3ec:	20 20 20 20 20 20 20 20 20 20 00 20 20 20 4f 4b               .   OK
1000b3fc:	20 20 20 00 20 20 11 00 43 4f 55 4c 44 20 4e 4f        .  ..COULD NO
1000b40c:	54 20 53 41 56 45 00 59 4f 55 52 20 50 41 53 53     T SAVE.YOUR PASS
1000b41c:	57 4f 52 44 20 28 41 29 00 59 4f 55 52 20 50 41     WORD (A).YOUR PA
1000b42c:	53 53 57 4f 52 44 20 28 42 29 00 44 61 74 65 20     SSWORD (B).Date 
1000b43c:	61 6e 64 20 54 69 6d 65 00 31 34 2f 30 35 2f 32     and Time.14/05/2
1000b44c:	30 32 31 20 31 38 3a 35 35 3a 30 30 00 00 00 00     021 18:55:00....
1000b45c:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 74 68 65     Please enter the
1000b46c:	20 63 75 72 72 65 6e 74 20 64 61 74 65 20 61 6e      current date an
1000b47c:	64 20 74 69 6d 65 2c 00 61 6e 64 20 74 68 65 6e     d time,.and then
1000b48c:	20 70 72 65 73 73 20 45 4e 54 45 52 2e 00 44 44      press ENTER..DD
1000b49c:	2f 4d 4d 2f 59 59 59 59 20 48 48 3a 4d 4d 3a 53     /MM/YYYY HH:MM:S
1000b4ac:	53 00 45 53 43 3a 20 47 6f 20 62 61 63 6b 20 61     S.ESC: Go back a
1000b4bc:	20 73 63 72 65 65 6e 00 50 6c 65 61 73 65 20 73      screen.Please s
1000b4cc:	65 6c 65 63 74 20 79 6f 75 72 20 74 69 6d 65 7a     elect your timez
1000b4dc:	6f 6e 65 20 61 6e 64 20 74 68 65 6e 20 70 72 65     one and then pre
1000b4ec:	73 73 20 45 4e 54 45 52 2e 00 55 73 65 72 20 49     ss ENTER..User I
1000b4fc:	6e 74 65 72 66 61 63 65 00 00 00 00 50 6c 65 61     nterface....Plea
1000b50c:	73 65 20 73 65 6c 65 63 74 20 74 68 65 20 75 73     se select the us
1000b51c:	65 72 20 69 6e 74 65 72 66 61 63 65 20 79 6f 75     er interface you
1000b52c:	20 77 61 6e 74 20 42 61 6e 61 6e 61 00 00 00 00      want Banana....
1000b53c:	74 6f 20 62 6f 6f 74 20 69 6e 74 6f 20 62 79 20     to boot into by 
1000b54c:	64 65 66 61 75 6c 74 20 77 68 65 6e 20 79 6f 75     default when you
1000b55c:	20 73 74 61 72 74 20 74 68 65 20 63 6f 6d 70 75      start the compu
1000b56c:	74 65 72 2e 00 49 6e 76 61 6c 69 64 20 50 72 6f     ter..Invalid Pro
1000b57c:	64 75 63 74 20 4b 65 79 00 00 00 00 59 6f 75 20     duct Key....You 
1000b58c:	64 6f 20 6e 6f 74 20 68 61 76 65 20 61 20 76 61     do not have a va
1000b59c:	6c 69 64 20 70 72 6f 64 75 63 74 20 6b 65 79 2e     lid product key.
1000b5ac:	0a 00 00 00 59 6f 75 20 6e 65 65 64 20 61 20 76     ....You need a v
1000b5bc:	61 6c 69 64 20 70 72 6f 64 75 63 74 20 6b 65 79     alid product key
1000b5cc:	20 69 6e 20 6f 72 64 65 72 20 74 6f 00 75 73 65      in order to.use
1000b5dc:	20 42 61 6e 61 6e 61 2e 00 00 00 00 50 72 65 73      Banana.....Pres
1000b5ec:	73 20 45 4e 54 45 52 20 74 6f 20 72 65 2d 65 6e     s ENTER to re-en
1000b5fc:	74 65 72 20 79 6f 75 72 20 70 72 6f 64 75 63 74     ter your product
1000b60c:	20 6b 65 79 2e 00 50 72 6f 64 75 63 74 20 4b 65      key..Product Ke
1000b61c:	79 00 00 00 50 6c 65 61 73 65 20 65 6e 74 65 72     y...Please enter
1000b62c:	20 79 6f 75 72 20 70 72 6f 64 75 63 74 20 6b 65      your product ke
1000b63c:	79 20 62 65 6c 6f 77 2c 00 00 00 00 54 68 65 20     y below,....The 
1000b64c:	65 6e 74 65 72 65 64 20 70 72 6f 64 75 63 74 20     entered product 
1000b65c:	6b 65 79 20 77 61 73 20 69 6e 76 61 6c 69 64 2e     key was invalid.
1000b66c:	00 00 00 00 50 72 65 73 73 20 61 6e 79 20 6b 65     ....Press any ke
1000b67c:	79 20 74 6f 20 63 6f 6e 74 69 6e 75 65 20 61 6e     y to continue an
1000b68c:	64 20 74 68 65 6e 00 00 65 6e 74 65 72 20 74 68     d then..enter th
1000b69c:	65 20 70 72 6f 64 75 63 74 20 6b 65 79 20 63 6f     e product key co
1000b6ac:	72 72 65 63 74 6c 79 2e 00 46 69 6e 61 6c 69 73     rrectly..Finalis
1000b6bc:	69 6e 67 20 49 6e 73 74 61 6c 6c 61 74 69 6f 6e     ing Installation
1000b6cc:	00 00 00 00 53 59 53 54 45 4d 2e 44 4c 4c 20 54     ....SYSTEM.DLL T
1000b6dc:	4f 44 4f 3a 20 72 65 67 69 73 74 72 79 20 72 65     ODO: registry re
1000b6ec:	61 64 0a 00 43 3a 2f 42 61 6e 61 6e 61 2f 52 65     ad..C:/Banana/Re
1000b6fc:	67 69 73 74 72 79 2f 53 79 73 74 65 6d 00 43 3a     gistry/System.C:
1000b70c:	2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74 72 79     /Banana/Registry
1000b71c:	2f 55 73 65 72 00 00 00 43 3a 2f 42 61 6e 61 6e     /User...C:/Banan
1000b72c:	61 2f 52 65 67 69 73 74 72 79 2f 44 65 66 61 75     a/Registry/Defau
1000b73c:	6c 74 53 79 73 74 65 6d 00 00 00 00 20 42 6f 6f     ltSystem.... Boo
1000b74c:	74 20 74 6f 20 63 6f 6d 6d 61 6e 64 20 6c 69 6e     t to command lin
1000b75c:	65 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     e               
1000b76c:	00 00 00 00 20 42 6f 6f 74 20 74 6f 20 67 72 61     .... Boot to gra
1000b77c:	70 68 69 63 61 6c 20 69 6e 74 65 72 66 61 63 65     phical interface
1000b78c:	20 28 56 47 41 29 20 20 00 00 00 00 20 42 6f 6f      (VGA)  .... Boo
1000b79c:	74 20 74 6f 20 67 72 61 70 68 69 63 61 6c 20 69     t to graphical i
1000b7ac:	6e 74 65 72 66 61 63 65 20 28 56 45 53 41 29 20     nterface (VESA) 
1000b7bc:	00 00 00 00 48 b7 00 10 70 b7 00 10 98 b7 00 10     ....H...p.......	1000b7c0: R_386_32	.text
	1000b7c4: R_386_32	.text
	1000b7c8: R_386_32	.text
1000b7cc:	4c 6f 61 64 69 6e 67 20 65 78 74 65 6e 73 69 6f     Loading extensio
1000b7dc:	6e 73 2e 2e 2e 00 0a 0a 3a 0a 00 2f 25 73 0a 00     ns......:../%s..
1000b7ec:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
1000b7fc:	2f 73 65 74 75 70 69 73 64 2e 6f 6e 65 00 53 59     /setupisd.one.SY
1000b80c:	53 49 4e 49 54 20 46 41 49 4c 55 52 45 00 43 3a     SINIT FAILURE.C:
1000b81c:	2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d 2f 63     /Banana/System/c
1000b82c:	6f 6d 6d 61 6e 64 2e 65 78 65 00 43 3a 2f 44 45     ommand.exe.C:/DE
1000b83c:	2e 42 55 47 00 00 00 00 43 3a 2f 42 61 6e 61 6e     .BUG....C:/Banan
1000b84c:	61 2f 52 65 67 69 73 74 72 79 2f 53 79 73 74 65     a/Registry/Syste
1000b85c:	6d 2f 53 59 53 54 45 4d 2e 52 45 47 00 42 41 4e     m/SYSTEM.REG.BAN
1000b86c:	41 4e 41 00 72 65 67 73 61 66 65 6e 61 6d 65 20     ANA.regsafename 
1000b87c:	3d 20 25 73 0a 00 42 41 4e 41 4e 41 2f 55 53 45     = %s..BANANA/USE
1000b88c:	52 53 2f 00 75 73 65 72 42 61 73 65 50 61 74 68     RS/.userBasePath
1000b89c:	20 3d 20 25 73 0a 00 53 45 54 55 50 00 42 4f 4f      = %s..SETUP.BOO
1000b8ac:	54 00 54 49 4d 45 00 55 53 45 52 53 00 46 49 4c     T.TIME.USERS.FIL
1000b8bc:	45 41 53 53 4f 43 00 42 41 4e 41 4e 41 2f 46 49     EASSOC.BANANA/FI
1000b8cc:	4c 45 41 53 53 4f 43 00 4f 50 45 4e 00 45 44 49     LEASSOC.OPEN.EDI
1000b8dc:	54 00 50 52 49 4e 54 00 49 43 4f 4e 00 44 45 53     T.PRINT.ICON.DES
1000b8ec:	43 52 00 43 55 53 54 4f 4d 56 45 52 42 00 43 55     CR.CUSTOMVERB.CU
1000b8fc:	53 54 4f 4d 50 52 4f 47 00 42 41 4e 41 4e 41 2f     STOMPROG.BANANA/
1000b90c:	54 49 4d 45 00 54 49 4d 45 5a 4f 4e 45 00 42 41     TIME.TIMEZONE.BA
1000b91c:	4e 41 4e 41 2f 53 45 54 55 50 00 4e 41 4d 45 00     NANA/SETUP.NAME.
1000b92c:	43 4f 4d 50 41 4e 59 00 50 52 4f 44 55 43 54 4b     COMPANY.PRODUCTK
1000b93c:	45 59 00 42 41 4e 41 4e 41 2f 55 53 45 52 53 00     EY.BANANA/USERS.
1000b94c:	53 41 4c 54 00 50 41 53 53 57 4f 52 44 00 44 49     SALT.PASSWORD.DI
1000b95c:	53 50 4c 41 59 4e 41 4d 45 00 44 45 53 4b 54 4f     SPLAYNAME.DESKTO
1000b96c:	50 00 44 4f 43 55 4d 45 4e 54 53 00 44 4f 57 4e     P.DOCUMENTS.DOWN
1000b97c:	4c 4f 41 44 53 00 50 49 43 54 55 52 45 53 00 4d     LOADS.PICTURES.M
1000b98c:	4f 56 49 45 53 00 4d 55 53 49 43 00 52 45 43 59     OVIES.MUSIC.RECY
1000b99c:	43 4c 45 42 49 4e 00 42 41 4e 41 4e 41 2f 42 4f     CLEBIN.BANANA/BO
1000b9ac:	4f 54 00 41 55 54 4f 47 55 49 00 54 49 4d 45 5a     OT.AUTOGUI.TIMEZ
1000b9bc:	4f 4e 45 49 44 00 42 41 4e 41 4e 41 2f 54 49 4d     ONEID.BANANA/TIM
1000b9cc:	45 2f 54 49 4d 45 5a 4f 4e 45 00 42 41 4e 41 4e     E/TIMEZONE.BANAN
1000b9dc:	41 2f 53 45 54 55 50 2f 4e 41 4d 45 00 42 41 4e     A/SETUP/NAME.BAN
1000b9ec:	41 4e 41 2f 53 45 54 55 50 2f 43 4f 4d 50 41 4e     ANA/SETUP/COMPAN
1000b9fc:	59 00 42 41 4e 41 4e 41 2f 53 45 54 55 50 2f 50     Y.BANANA/SETUP/P
1000ba0c:	52 4f 44 55 43 54 4b 45 59 00 42 41 4e 41 4e 41     RODUCTKEY.BANANA
1000ba1c:	2f 46 49 4c 45 41 53 53 4f 43 2f 49 43 4f 4e 00     /FILEASSOC/ICON.
1000ba2c:	54 58 54 00 42 41 4e 41 4e 41 2f 46 49 4c 45 41     TXT.BANANA/FILEA
1000ba3c:	53 53 4f 43 2f 44 45 53 43 52 00 42 41 4e 41 4e     SSOC/DESCR.BANAN
1000ba4c:	41 2f 46 49 4c 45 41 53 53 4f 43 2f 4f 50 45 4e     A/FILEASSOC/OPEN
1000ba5c:	00 42 41 4e 41 4e 41 2f 46 49 4c 45 41 53 53 4f     .BANANA/FILEASSO
1000ba6c:	43 2f 45 44 49 54 00 42 41 4e 41 4e 41 2f 46 49     C/EDIT.BANANA/FI
1000ba7c:	4c 45 41 53 53 4f 43 2f 50 52 49 4e 54 00 42 41     LEASSOC/PRINT.BA
1000ba8c:	4e 41 4e 41 2f 46 49 4c 45 41 53 53 4f 43 2f 49     NANA/FILEASSOC/I
1000ba9c:	43 4f 4e 2f 54 58 54 00 43 3a 2f 42 61 6e 61 6e     CON/TXT.C:/Banan
1000baac:	61 2f 49 63 6f 6e 73 2f 63 6f 6c 6f 75 72 2f 74     a/Icons/colour/t
1000babc:	65 78 74 2e 74 67 61 00 42 41 4e 41 4e 41 2f 46     ext.tga.BANANA/F
1000bacc:	49 4c 45 41 53 53 4f 43 2f 44 45 53 43 52 2f 54     ILEASSOC/DESCR/T
1000badc:	58 54 00 54 65 78 74 20 44 6f 63 75 6d 65 6e 74     XT.Text Document
1000baec:	00 42 41 4e 41 4e 41 2f 46 49 4c 45 41 53 53 4f     .BANANA/FILEASSO
1000bafc:	43 2f 4f 50 45 4e 2f 54 58 54 00 43 3a 2f 42 61     C/OPEN/TXT.C:/Ba
1000bb0c:	6e 61 6e 61 2f 53 79 73 74 65 6d 2f 74 65 2e 65     nana/System/te.e
1000bb1c:	78 65 00 42 41 4e 41 4e 41 2f 46 49 4c 45 41 53     xe.BANANA/FILEAS
1000bb2c:	53 4f 43 2f 45 44 49 54 2f 54 58 54 00 42 41 4e     SOC/EDIT/TXT.BAN
1000bb3c:	41 4e 41 2f 46 49 4c 45 41 53 53 4f 43 2f 50 52     ANA/FILEASSOC/PR
1000bb4c:	49 4e 54 2f 54 58 54 00 49 53 4f 00 42 41 4e 41     INT/TXT.ISO.BANA
1000bb5c:	4e 41 2f 46 49 4c 45 41 53 53 4f 43 2f 49 43 4f     NA/FILEASSOC/ICO
1000bb6c:	4e 2f 49 53 4f 00 43 3a 2f 42 61 6e 61 6e 61 2f     N/ISO.C:/Banana/
1000bb7c:	49 63 6f 6e 73 2f 63 6f 6c 6f 75 72 2f 63 64 2e     Icons/colour/cd.
1000bb8c:	74 67 61 00 42 41 4e 41 4e 41 2f 46 49 4c 45 41     tga.BANANA/FILEA
1000bb9c:	53 53 4f 43 2f 44 45 53 43 52 2f 49 53 4f 00 44     SSOC/DESCR/ISO.D
1000bbac:	69 73 63 20 49 6d 61 67 65 20 46 69 6c 65 00 2f     isc Image File./
1000bbbc:	50 41 53 53 57 4f 52 44 00 2f 53 41 4c 54 00 2f     PASSWORD./SALT./
1000bbcc:	44 49 53 50 4c 41 59 4e 41 4d 45 00 2f 44 45 53     DISPLAYNAME./DES
1000bbdc:	4b 54 4f 50 00 2f 44 4f 43 55 4d 45 4e 54 53 00     KTOP./DOCUMENTS.
1000bbec:	2f 44 4f 57 4e 4c 4f 41 44 53 00 2f 50 49 43 54     /DOWNLOADS./PICT
1000bbfc:	55 52 45 53 00 2f 4d 4f 56 49 45 53 00 2f 4d 55     URES./MOVIES./MU
1000bc0c:	53 49 43 00 2f 52 45 43 59 43 4c 45 42 49 4e 00     SIC./RECYCLEBIN.
1000bc1c:	54 4f 44 4f 3a 20 64 65 74 65 63 74 20 6e 6f 72     TODO: detect nor
1000bc2c:	6d 61 6c 20 6b 65 72 6e 65 6c 20 76 73 20 4b 52     mal kernel vs KR
1000bc3c:	4e 4c 50 32 0a 00 00 00 54 68 65 20 69 6e 73 74     NLP2....The inst
1000bc4c:	61 6c 6c 61 74 69 6f 6e 20 68 61 73 20 62 65 65     allation has bee
1000bc5c:	6e 20 63 6f 6d 70 6c 65 74 65 64 2e 0a 00 00 00     n completed.....
1000bc6c:	50 6c 65 61 73 65 20 70 72 65 73 73 20 45 4e 54     Please press ENT
1000bc7c:	45 52 20 74 6f 20 72 65 73 74 61 72 74 20 79 6f     ER to restart yo
1000bc8c:	75 72 20 63 6f 6d 70 75 74 65 72 00 61 6e 64 20     ur computer.and 
1000bc9c:	73 74 61 72 74 20 42 61 6e 61 6e 61 2e 00 42 41     start Banana..BA
1000bcac:	4e 41 4e 41 2f 42 4f 4f 54 2f 41 55 54 4f 47 55     NANA/BOOT/AUTOGU
1000bcbc:	49 00 50 72 6f 64 75 63 74 20 4b 65 79 20 55 70     I.Product Key Up
1000bccc:	64 61 74 65 64 00 00 00 59 6f 75 72 20 70 72 6f     dated...Your pro
1000bcdc:	64 75 63 74 20 6b 65 79 20 68 61 73 20 62 65 65     duct key has bee
1000bcec:	6e 20 75 70 64 61 74 65 64 2e 0a 00 20 43 72 65     n updated... Cre
1000bcfc:	61 74 65 20 6e 65 77 20 75 73 65 72 2e 2e 2e 20     ate new user... 
1000bd0c:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000bd1c:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00 4c                   .L
1000bd2c:	6f 67 69 6e 00 00 00 00 50 6c 65 61 73 65 20 73     ogin....Please s
1000bd3c:	65 6c 65 63 74 20 79 6f 75 72 20 75 73 65 72 6e     elect your usern
1000bd4c:	61 6d 65 20 61 6e 64 20 70 72 65 73 73 20 45 4e     ame and press EN
1000bd5c:	54 45 52 2e 00 00 00 00 50 6c 65 61 73 65 20 74     TER.....Please t
1000bd6c:	79 70 65 20 79 6f 75 72 20 70 61 73 73 77 6f 72     ype your passwor
1000bd7c:	64 20 61 6e 64 20 70 72 65 73 73 20 45 4e 54 45     d and press ENTE
1000bd8c:	52 00 6f 72 20 70 72 65 73 73 20 45 53 43 20 74     R.or press ESC t
1000bd9c:	6f 20 67 6f 20 62 61 63 6b 2e 00 00 52 45 51 55     o go back...REQU
1000bdac:	49 52 45 44 3a 20 25 73 0a 47 4f 54 3a 20 25 73     IRED: %s.GOT: %s
1000bdbc:	0a 53 41 4c 54 3a 20 25 73 0a 00 00 49 74 20 69     .SALT: %s...It i
1000bdcc:	73 20 73 61 66 65 20 74 6f 20 74 75 72 6e 20 6f     s safe to turn o
1000bddc:	66 66 20 79 6f 75 72 20 50 43 00 63 61 6c 6c 00     ff your PC.call.
1000bdec:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
1000bdfc:	2f 69 6e 69 74 2e 62 61 74 00 00 00 1a b8 00 10     /init.bat.......	1000be08: R_386_32	.text
1000be0c:	e7 bd 00 10 ec bd 00 10 00 00 00 00 20 53 41 46     ............ SAF	1000be0c: R_386_32	.text
	1000be10: R_386_32	.text
1000be1c:	45 20 4d 4f 44 45 00                                E MODE.
