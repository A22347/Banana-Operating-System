
packages/system/32/0001/system.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <beginx(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <beginx(void*)+0xd>	1000000d: R_386_PC32	begin(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <memcmp(void*, void*, unsigned long)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	83 ec 10             	sub    esp,0x10
1000001d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000020:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000023:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000026:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
10000029:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000002c:	8d 50 ff             	lea    edx,[eax-0x1]
1000002f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000032:	85 c0                	test   eax,eax
10000034:	74 12                	je     10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000036:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000039:	8a 10                	mov    dl,BYTE PTR [eax]
1000003b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000003e:	8a 00                	mov    al,BYTE PTR [eax]
10000040:	38 c2                	cmp    dl,al
10000042:	75 04                	jne    10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000044:	b0 01                	mov    al,0x1
10000046:	eb 02                	jmp    1000004a <memcmp(void*, void*, unsigned long)+0x33>
10000048:	b0 00                	mov    al,0x0
1000004a:	84 c0                	test   al,al
1000004c:	74 08                	je     10000056 <memcmp(void*, void*, unsigned long)+0x3f>
1000004e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000051:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
10000054:	eb d3                	jmp    10000029 <memcmp(void*, void*, unsigned long)+0x12>
10000056:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000059:	8a 00                	mov    al,BYTE PTR [eax]
1000005b:	0f b6 d0             	movzx  edx,al
1000005e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000061:	8a 00                	mov    al,BYTE PTR [eax]
10000063:	0f b6 c0             	movzx  eax,al
10000066:	29 c2                	sub    edx,eax
10000068:	89 d0                	mov    eax,edx
1000006a:	c9                   	leave  
1000006b:	c3                   	ret    

1000006c <memmove>:
1000006c:	55                   	push   ebp
1000006d:	89 e5                	mov    ebp,esp
1000006f:	83 ec 10             	sub    esp,0x10
10000072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000075:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000078:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000007b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
1000007e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000081:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
10000084:	76 1b                	jbe    100000a1 <memmove+0x35>
10000086:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
1000008a:	74 46                	je     100000d2 <memmove+0x66>
1000008c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000008f:	8a 10                	mov    dl,BYTE PTR [eax]
10000091:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000094:	88 10                	mov    BYTE PTR [eax],dl
10000096:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000099:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
1000009c:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000009f:	eb e5                	jmp    10000086 <memmove+0x1a>
100000a1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000a4:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
100000a7:	73 29                	jae    100000d2 <memmove+0x66>
100000a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000ac:	48                   	dec    eax
100000ad:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
100000b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000b3:	48                   	dec    eax
100000b4:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
100000b7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000bb:	74 15                	je     100000d2 <memmove+0x66>
100000bd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000c0:	8a 10                	mov    dl,BYTE PTR [eax]
100000c2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000c5:	88 10                	mov    BYTE PTR [eax],dl
100000c7:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100000ca:	ff 4d f8             	dec    DWORD PTR [ebp-0x8]
100000cd:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000d0:	eb e5                	jmp    100000b7 <memmove+0x4b>
100000d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000d5:	c9                   	leave  
100000d6:	c3                   	ret    

100000d7 <memset>:
100000d7:	55                   	push   ebp
100000d8:	89 e5                	mov    ebp,esp
100000da:	83 ec 10             	sub    esp,0x10
100000dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000e0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100000e3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000e7:	74 12                	je     100000fb <memset+0x24>
100000e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100000ec:	88 c2                	mov    dl,al
100000ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000f1:	88 10                	mov    BYTE PTR [eax],dl
100000f3:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
100000f6:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000f9:	eb e8                	jmp    100000e3 <memset+0xc>
100000fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000fe:	c9                   	leave  
100000ff:	c3                   	ret    

10000100 <strlen>:
10000100:	55                   	push   ebp
10000101:	89 e5                	mov    ebp,esp
10000103:	83 ec 10             	sub    esp,0x10
10000106:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
1000010d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000110:	8a 00                	mov    al,BYTE PTR [eax]
10000112:	84 c0                	test   al,al
10000114:	74 0c                	je     10000122 <strlen+0x22>
10000116:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000119:	40                   	inc    eax
1000011a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000011d:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
10000120:	eb eb                	jmp    1000010d <strlen+0xd>
10000122:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000125:	c9                   	leave  
10000126:	c3                   	ret    

10000127 <strpbrk(char const*, char const*)>:
10000127:	55                   	push   ebp
10000128:	89 e5                	mov    ebp,esp
1000012a:	83 ec 10             	sub    esp,0x10
1000012d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000130:	8a 00                	mov    al,BYTE PTR [eax]
10000132:	84 c0                	test   al,al
10000134:	74 30                	je     10000166 <strpbrk(char const*, char const*)+0x3f>
10000136:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000139:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000013c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000013f:	8a 00                	mov    al,BYTE PTR [eax]
10000141:	84 c0                	test   al,al
10000143:	74 18                	je     1000015d <strpbrk(char const*, char const*)+0x36>
10000145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000148:	8a 10                	mov    dl,BYTE PTR [eax]
1000014a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000014d:	8a 00                	mov    al,BYTE PTR [eax]
1000014f:	38 c2                	cmp    dl,al
10000151:	75 05                	jne    10000158 <strpbrk(char const*, char const*)+0x31>
10000153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000156:	eb 13                	jmp    1000016b <strpbrk(char const*, char const*)+0x44>
10000158:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
1000015b:	eb df                	jmp    1000013c <strpbrk(char const*, char const*)+0x15>
1000015d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000160:	40                   	inc    eax
10000161:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000164:	eb c7                	jmp    1000012d <strpbrk(char const*, char const*)+0x6>
10000166:	b8 00 00 00 00       	mov    eax,0x0
1000016b:	c9                   	leave  
1000016c:	c3                   	ret    

1000016d <strtok>:
1000016d:	55                   	push   ebp
1000016e:	89 e5                	mov    ebp,esp
10000170:	83 ec 10             	sub    esp,0x10
10000173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000176:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000179:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000017c:	85 c0                	test   eax,eax
1000017e:	75 18                	jne    10000198 <strtok+0x2b>
10000180:	a1 00 00 00 00       	mov    eax,ds:0x0	10000181: R_386_32	SavedPtr
10000185:	85 c0                	test   eax,eax
10000187:	75 07                	jne    10000190 <strtok+0x23>
10000189:	b8 00 00 00 00       	mov    eax,0x0
1000018e:	eb 6f                	jmp    100001ff <strtok+0x92>
10000190:	a1 00 00 00 00       	mov    eax,ds:0x0	10000191: R_386_32	SavedPtr
10000195:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000198:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000019b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000019e:	50                   	push   eax
1000019f:	e8 fc ff ff ff       	call   100001a0 <strtok+0x33>	100001a0: R_386_PC32	strpbrk(char const*, char const*)
100001a4:	83 c4 08             	add    esp,0x8
100001a7:	a3 00 00 00 00       	mov    ds:0x0,eax	100001a8: R_386_32	SavedPtr
100001ac:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100001ae: R_386_32	SavedPtr
100001b2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001b5:	39 c2                	cmp    edx,eax
100001b7:	75 22                	jne    100001db <strtok+0x6e>
100001b9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001bc:	8d 50 01             	lea    edx,[eax+0x1]
100001bf:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100001c2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001c8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100001cb:	50                   	push   eax
100001cc:	e8 fc ff ff ff       	call   100001cd <strtok+0x60>	100001cd: R_386_PC32	strpbrk(char const*, char const*)
100001d1:	83 c4 08             	add    esp,0x8
100001d4:	a3 00 00 00 00       	mov    ds:0x0,eax	100001d5: R_386_32	SavedPtr
100001d9:	eb d1                	jmp    100001ac <strtok+0x3f>
100001db:	a1 00 00 00 00       	mov    eax,ds:0x0	100001dc: R_386_32	SavedPtr
100001e0:	85 c0                	test   eax,eax
100001e2:	74 16                	je     100001fa <strtok+0x8d>
100001e4:	a1 00 00 00 00       	mov    eax,ds:0x0	100001e5: R_386_32	SavedPtr
100001e9:	8d 50 01             	lea    edx,[eax+0x1]
100001ec:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	100001ee: R_386_32	SavedPtr
100001f2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001f5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001f8:	eb 05                	jmp    100001ff <strtok+0x92>
100001fa:	b8 00 00 00 00       	mov    eax,0x0
100001ff:	c9                   	leave  
10000200:	c3                   	ret    

10000201 <strcpy>:
10000201:	55                   	push   ebp
10000202:	89 e5                	mov    ebp,esp
10000204:	83 ec 10             	sub    esp,0x10
10000207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000020a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000020d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000210:	8a 00                	mov    al,BYTE PTR [eax]
10000212:	84 c0                	test   al,al
10000214:	74 12                	je     10000228 <strcpy+0x27>
10000216:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000219:	8a 10                	mov    dl,BYTE PTR [eax]
1000021b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000021e:	88 10                	mov    BYTE PTR [eax],dl
10000220:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000223:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10000226:	eb e5                	jmp    1000020d <strcpy+0xc>
10000228:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000022b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000022e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000231:	c9                   	leave  
10000232:	c3                   	ret    

10000233 <strncpyxx(char*, char const*, unsigned long)>:
10000233:	55                   	push   ebp
10000234:	89 e5                	mov    ebp,esp
10000236:	83 ec 10             	sub    esp,0x10
10000239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000023c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000023f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000242:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000245:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000249:	74 23                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000024b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000024e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000251:	8d 42 01             	lea    eax,[edx+0x1]
10000254:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000257:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000025a:	8d 48 01             	lea    ecx,[eax+0x1]
1000025d:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
10000260:	8a 12                	mov    dl,BYTE PTR [edx]
10000262:	88 10                	mov    BYTE PTR [eax],dl
10000264:	8a 00                	mov    al,BYTE PTR [eax]
10000266:	84 c0                	test   al,al
10000268:	74 04                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000026a:	b0 01                	mov    al,0x1
1000026c:	eb 02                	jmp    10000270 <strncpyxx(char*, char const*, unsigned long)+0x3d>
1000026e:	b0 00                	mov    al,0x0
10000270:	84 c0                	test   al,al
10000272:	74 02                	je     10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000274:	eb cf                	jmp    10000245 <strncpyxx(char*, char const*, unsigned long)+0x12>
10000276:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000279:	8d 50 ff             	lea    edx,[eax-0x1]
1000027c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
1000027f:	85 c0                	test   eax,eax
10000281:	0f 95 c0             	setne  al
10000284:	84 c0                	test   al,al
10000286:	74 0b                	je     10000293 <strncpyxx(char*, char const*, unsigned long)+0x60>
10000288:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000028b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000028e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000291:	eb e3                	jmp    10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000296:	c9                   	leave  
10000297:	c3                   	ret    

10000298 <strcmp>:
10000298:	55                   	push   ebp
10000299:	89 e5                	mov    ebp,esp
1000029b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000029e:	8a 10                	mov    dl,BYTE PTR [eax]
100002a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002a3:	8a 00                	mov    al,BYTE PTR [eax]
100002a5:	38 c2                	cmp    dl,al
100002a7:	75 20                	jne    100002c9 <strcmp+0x31>
100002a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ac:	8d 50 01             	lea    edx,[eax+0x1]
100002af:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
100002b2:	8a 00                	mov    al,BYTE PTR [eax]
100002b4:	84 c0                	test   al,al
100002b6:	0f 94 c0             	sete   al
100002b9:	84 c0                	test   al,al
100002bb:	74 07                	je     100002c4 <strcmp+0x2c>
100002bd:	b8 00 00 00 00       	mov    eax,0x0
100002c2:	eb 19                	jmp    100002dd <strcmp+0x45>
100002c4:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
100002c7:	eb d2                	jmp    1000029b <strcmp+0x3>
100002c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002cc:	8a 00                	mov    al,BYTE PTR [eax]
100002ce:	0f b6 d0             	movzx  edx,al
100002d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002d4:	8a 00                	mov    al,BYTE PTR [eax]
100002d6:	0f b6 c0             	movzx  eax,al
100002d9:	29 c2                	sub    edx,eax
100002db:	89 d0                	mov    eax,edx
100002dd:	5d                   	pop    ebp
100002de:	c3                   	ret    

100002df <strchr(char const*, int)>:
100002df:	55                   	push   ebp
100002e0:	89 e5                	mov    ebp,esp
100002e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002e5:	8a 00                	mov    al,BYTE PTR [eax]
100002e7:	84 c0                	test   al,al
100002e9:	74 16                	je     10000301 <strchr(char const*, int)+0x22>
100002eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ee:	8a 00                	mov    al,BYTE PTR [eax]
100002f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100002f3:	38 d0                	cmp    al,dl
100002f5:	75 05                	jne    100002fc <strchr(char const*, int)+0x1d>
100002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002fa:	eb 0a                	jmp    10000306 <strchr(char const*, int)+0x27>
100002fc:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
100002ff:	eb e1                	jmp    100002e2 <strchr(char const*, int)+0x3>
10000301:	b8 00 00 00 00       	mov    eax,0x0
10000306:	5d                   	pop    ebp
10000307:	c3                   	ret    

10000308 <strncmp>:
10000308:	55                   	push   ebp
10000309:	89 e5                	mov    ebp,esp
1000030b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000030e:	8d 50 ff             	lea    edx,[eax-0x1]
10000311:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000314:	85 c0                	test   eax,eax
10000316:	74 12                	je     1000032a <strncmp+0x22>
10000318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000031b:	8a 10                	mov    dl,BYTE PTR [eax]
1000031d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000320:	8a 00                	mov    al,BYTE PTR [eax]
10000322:	38 c2                	cmp    dl,al
10000324:	75 04                	jne    1000032a <strncmp+0x22>
10000326:	b0 01                	mov    al,0x1
10000328:	eb 02                	jmp    1000032c <strncmp+0x24>
1000032a:	b0 00                	mov    al,0x0
1000032c:	84 c0                	test   al,al
1000032e:	74 20                	je     10000350 <strncmp+0x48>
10000330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000333:	8d 50 01             	lea    edx,[eax+0x1]
10000336:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
10000339:	8a 00                	mov    al,BYTE PTR [eax]
1000033b:	84 c0                	test   al,al
1000033d:	0f 94 c0             	sete   al
10000340:	84 c0                	test   al,al
10000342:	74 07                	je     1000034b <strncmp+0x43>
10000344:	b8 00 00 00 00       	mov    eax,0x0
10000349:	eb 19                	jmp    10000364 <strncmp+0x5c>
1000034b:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
1000034e:	eb bb                	jmp    1000030b <strncmp+0x3>
10000350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000353:	8a 00                	mov    al,BYTE PTR [eax]
10000355:	0f b6 d0             	movzx  edx,al
10000358:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000035b:	8a 00                	mov    al,BYTE PTR [eax]
1000035d:	0f b6 c0             	movzx  eax,al
10000360:	29 c2                	sub    edx,eax
10000362:	89 d0                	mov    eax,edx
10000364:	5d                   	pop    ebp
10000365:	c3                   	ret    

10000366 <strcat>:
10000366:	55                   	push   ebp
10000367:	89 e5                	mov    ebp,esp
10000369:	83 ec 10             	sub    esp,0x10
1000036c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000036f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000372:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000375:	8d 50 01             	lea    edx,[eax+0x1]
10000378:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
1000037b:	8a 00                	mov    al,BYTE PTR [eax]
1000037d:	84 c0                	test   al,al
1000037f:	0f 95 c0             	setne  al
10000382:	84 c0                	test   al,al
10000384:	74 02                	je     10000388 <strcat+0x22>
10000386:	eb ea                	jmp    10000372 <strcat+0xc>
10000388:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
1000038b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000038e:	8d 42 01             	lea    eax,[edx+0x1]
10000391:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000394:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000397:	8d 48 01             	lea    ecx,[eax+0x1]
1000039a:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
1000039d:	8a 12                	mov    dl,BYTE PTR [edx]
1000039f:	88 10                	mov    BYTE PTR [eax],dl
100003a1:	8a 00                	mov    al,BYTE PTR [eax]
100003a3:	84 c0                	test   al,al
100003a5:	0f 95 c0             	setne  al
100003a8:	84 c0                	test   al,al
100003aa:	74 02                	je     100003ae <strcat+0x48>
100003ac:	eb dd                	jmp    1000038b <strcat+0x25>
100003ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003b1:	c9                   	leave  
100003b2:	c3                   	ret    

100003b3 <strncat(char*, char const*, unsigned long)>:
100003b3:	55                   	push   ebp
100003b4:	89 e5                	mov    ebp,esp
100003b6:	83 ec 10             	sub    esp,0x10
100003b9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100003bd:	74 5c                	je     1000041b <strncat(char*, char const*, unsigned long)+0x68>
100003bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003c2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100003c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003c8:	8d 50 01             	lea    edx,[eax+0x1]
100003cb:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100003ce:	8a 00                	mov    al,BYTE PTR [eax]
100003d0:	84 c0                	test   al,al
100003d2:	0f 95 c0             	setne  al
100003d5:	84 c0                	test   al,al
100003d7:	74 02                	je     100003db <strncat(char*, char const*, unsigned long)+0x28>
100003d9:	eb ea                	jmp    100003c5 <strncat(char*, char const*, unsigned long)+0x12>
100003db:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100003de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100003e1:	8d 42 01             	lea    eax,[edx+0x1]
100003e4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
100003e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003ea:	8d 48 01             	lea    ecx,[eax+0x1]
100003ed:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
100003f0:	8a 12                	mov    dl,BYTE PTR [edx]
100003f2:	88 10                	mov    BYTE PTR [eax],dl
100003f4:	8a 00                	mov    al,BYTE PTR [eax]
100003f6:	84 c0                	test   al,al
100003f8:	74 0d                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
100003fa:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100003fd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000401:	74 04                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
10000403:	b0 01                	mov    al,0x1
10000405:	eb 02                	jmp    10000409 <strncat(char*, char const*, unsigned long)+0x56>
10000407:	b0 00                	mov    al,0x0
10000409:	84 c0                	test   al,al
1000040b:	74 02                	je     1000040f <strncat(char*, char const*, unsigned long)+0x5c>
1000040d:	eb cf                	jmp    100003de <strncat(char*, char const*, unsigned long)+0x2b>
1000040f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000413:	75 06                	jne    1000041b <strncat(char*, char const*, unsigned long)+0x68>
10000415:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000418:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000041b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000041e:	c9                   	leave  
1000041f:	c3                   	ret    

10000420 <strstr(char*, char*)>:
10000420:	55                   	push   ebp
10000421:	89 e5                	mov    ebp,esp
10000423:	83 ec 10             	sub    esp,0x10
10000426:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000429:	e8 fc ff ff ff       	call   1000042a <strstr(char*, char*)+0xa>	1000042a: R_386_PC32	strlen
1000042e:	83 c4 04             	add    esp,0x4
10000431:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000434:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
10000438:	75 05                	jne    1000043f <strstr(char*, char*)+0x1f>
1000043a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000043d:	eb 3f                	jmp    1000047e <strstr(char*, char*)+0x5e>
1000043f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000442:	50                   	push   eax
10000443:	e8 fc ff ff ff       	call   10000444 <strstr(char*, char*)+0x24>	10000444: R_386_PC32	strlen
10000448:	83 c4 04             	add    esp,0x4
1000044b:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
1000044e:	77 29                	ja     10000479 <strstr(char*, char*)+0x59>
10000450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000453:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
10000456:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000459:	50                   	push   eax
1000045a:	e8 fc ff ff ff       	call   1000045b <strstr(char*, char*)+0x3b>	1000045b: R_386_PC32	memcmp(void*, void*, unsigned long)
1000045f:	83 c4 0c             	add    esp,0xc
10000462:	85 c0                	test   eax,eax
10000464:	0f 94 c0             	sete   al
10000467:	84 c0                	test   al,al
10000469:	74 05                	je     10000470 <strstr(char*, char*)+0x50>
1000046b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000046e:	eb 0e                	jmp    1000047e <strstr(char*, char*)+0x5e>
10000470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000473:	40                   	inc    eax
10000474:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000477:	eb c6                	jmp    1000043f <strstr(char*, char*)+0x1f>
10000479:	b8 00 00 00 00       	mov    eax,0x0
1000047e:	c9                   	leave  
1000047f:	c3                   	ret    

10000480 <rmtree(char*)>:
10000480:	55                   	push   ebp
10000481:	89 e5                	mov    ebp,esp
10000483:	53                   	push   ebx
10000484:	81 ec 64 02 00 00    	sub    esp,0x264
1000048a:	68 2c 01 00 00       	push   0x12c
1000048f:	6a 00                	push   0x0
10000491:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000497:	50                   	push   eax
10000498:	e8 fc ff ff ff       	call   10000499 <rmtree(char*)+0x19>	10000499: R_386_PC32	memset
1000049d:	83 c4 0c             	add    esp,0xc
100004a0:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
100004a6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100004a9:	83 ec 0c             	sub    esp,0xc
100004ac:	68 14 01 00 00       	push   0x114
100004b1:	e8 fc ff ff ff       	call   100004b2 <rmtree(char*)+0x32>	100004b2: R_386_PC32	operator new(unsigned long)
100004b6:	83 c4 10             	add    esp,0x10
100004b9:	89 c3                	mov    ebx,eax
100004bb:	b8 00 20 00 c2       	mov    eax,0xc2002000
100004c0:	8b 00                	mov    eax,DWORD PTR [eax]
100004c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
100004c5:	83 ec 04             	sub    esp,0x4
100004c8:	50                   	push   eax
100004c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100004cc:	53                   	push   ebx
100004cd:	e8 fc ff ff ff       	call   100004ce <rmtree(char*)+0x4e>	100004ce: R_386_PC32	Directory::Directory(char const*, Process*)
100004d2:	83 c4 10             	add    esp,0x10
100004d5:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
100004d8:	83 ec 0c             	sub    esp,0xc
100004db:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100004de:	e8 fc ff ff ff       	call   100004df <rmtree(char*)+0x5f>	100004df: R_386_PC32	Directory::open()
100004e3:	83 c4 10             	add    esp,0x10
100004e6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100004e9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
100004ed:	74 24                	je     10000513 <rmtree(char*)+0x93>
100004ef:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100004f3:	0f 84 8b 01 00 00    	je     10000684 <rmtree(char*)+0x204>
100004f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100004fc:	8b 00                	mov    eax,DWORD PTR [eax]
100004fe:	83 c0 08             	add    eax,0x8
10000501:	8b 00                	mov    eax,DWORD PTR [eax]
10000503:	83 ec 0c             	sub    esp,0xc
10000506:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000509:	ff d0                	call   eax
1000050b:	83 c4 10             	add    esp,0x10
1000050e:	e9 72 01 00 00       	jmp    10000685 <rmtree(char*)+0x205>
10000513:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000516:	8b 00                	mov    eax,DWORD PTR [eax]
10000518:	83 c0 0c             	add    eax,0xc
1000051b:	8b 00                	mov    eax,DWORD PTR [eax]
1000051d:	83 ec 0c             	sub    esp,0xc
10000520:	8d 95 a4 fd ff ff    	lea    edx,[ebp-0x25c]
10000526:	52                   	push   edx
10000527:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000052a:	6a 00                	push   0x0
1000052c:	68 10 01 00 00       	push   0x110
10000531:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000534:	ff d0                	call   eax
10000536:	83 c4 20             	add    esp,0x20
10000539:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
1000053c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000540:	0f 85 04 01 00 00    	jne    1000064a <rmtree(char*)+0x1ca>
10000546:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000549:	83 c0 10             	add    eax,0x10
1000054c:	83 ec 08             	sub    esp,0x8
1000054f:	68 e4 a4 00 10       	push   0x1000a4e4	10000550: R_386_32	.text
10000554:	50                   	push   eax
10000555:	e8 fc ff ff ff       	call   10000556 <rmtree(char*)+0xd6>	10000556: R_386_PC32	strcmp
1000055a:	83 c4 10             	add    esp,0x10
1000055d:	85 c0                	test   eax,eax
1000055f:	74 b2                	je     10000513 <rmtree(char*)+0x93>
10000561:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000564:	83 c0 10             	add    eax,0x10
10000567:	83 ec 08             	sub    esp,0x8
1000056a:	68 e6 a4 00 10       	push   0x1000a4e6	1000056b: R_386_32	.text
1000056f:	50                   	push   eax
10000570:	e8 fc ff ff ff       	call   10000571 <rmtree(char*)+0xf1>	10000571: R_386_PC32	strcmp
10000575:	83 c4 10             	add    esp,0x10
10000578:	85 c0                	test   eax,eax
1000057a:	74 97                	je     10000513 <rmtree(char*)+0x93>
1000057c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000057f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000582:	83 e0 02             	and    eax,0x2
10000585:	85 c0                	test   eax,eax
10000587:	74 17                	je     100005a0 <rmtree(char*)+0x120>
10000589:	83 ec 0c             	sub    esp,0xc
1000058c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000592:	50                   	push   eax
10000593:	e8 fc ff ff ff       	call   10000594 <rmtree(char*)+0x114>	10000594: R_386_PC32	rmtree(char*)
10000598:	83 c4 10             	add    esp,0x10
1000059b:	e9 73 ff ff ff       	jmp    10000513 <rmtree(char*)+0x93>
100005a0:	83 ec 08             	sub    esp,0x8
100005a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100005a6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005ac:	50                   	push   eax
100005ad:	e8 fc ff ff ff       	call   100005ae <rmtree(char*)+0x12e>	100005ae: R_386_PC32	strcpy
100005b2:	83 c4 10             	add    esp,0x10
100005b5:	83 ec 08             	sub    esp,0x8
100005b8:	68 e9 a4 00 10       	push   0x1000a4e9	100005b9: R_386_32	.text
100005bd:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005c3:	50                   	push   eax
100005c4:	e8 fc ff ff ff       	call   100005c5 <rmtree(char*)+0x145>	100005c5: R_386_PC32	strcat
100005c9:	83 c4 10             	add    esp,0x10
100005cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100005cf:	83 c0 10             	add    eax,0x10
100005d2:	83 ec 08             	sub    esp,0x8
100005d5:	50                   	push   eax
100005d6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005dc:	50                   	push   eax
100005dd:	e8 fc ff ff ff       	call   100005de <rmtree(char*)+0x15e>	100005de: R_386_PC32	strcat
100005e2:	83 c4 10             	add    esp,0x10
100005e5:	83 ec 0c             	sub    esp,0xc
100005e8:	68 14 01 00 00       	push   0x114
100005ed:	e8 fc ff ff ff       	call   100005ee <rmtree(char*)+0x16e>	100005ee: R_386_PC32	operator new(unsigned long)
100005f2:	83 c4 10             	add    esp,0x10
100005f5:	89 c3                	mov    ebx,eax
100005f7:	b8 00 20 00 c2       	mov    eax,0xc2002000
100005fc:	8b 00                	mov    eax,DWORD PTR [eax]
100005fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000601:	83 ec 04             	sub    esp,0x4
10000604:	50                   	push   eax
10000605:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
1000060b:	50                   	push   eax
1000060c:	53                   	push   ebx
1000060d:	e8 fc ff ff ff       	call   1000060e <rmtree(char*)+0x18e>	1000060e: R_386_PC32	File::File(char const*, Process*)
10000612:	83 c4 10             	add    esp,0x10
10000615:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10000618:	83 ec 0c             	sub    esp,0xc
1000061b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000061e:	e8 fc ff ff ff       	call   1000061f <rmtree(char*)+0x19f>	1000061f: R_386_PC32	File::unlink()
10000623:	83 c4 10             	add    esp,0x10
10000626:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
1000062a:	0f 84 e3 fe ff ff    	je     10000513 <rmtree(char*)+0x93>
10000630:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000633:	8b 00                	mov    eax,DWORD PTR [eax]
10000635:	83 c0 08             	add    eax,0x8
10000638:	8b 00                	mov    eax,DWORD PTR [eax]
1000063a:	83 ec 0c             	sub    esp,0xc
1000063d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000640:	ff d0                	call   eax
10000642:	83 c4 10             	add    esp,0x10
10000645:	e9 c9 fe ff ff       	jmp    10000513 <rmtree(char*)+0x93>
1000064a:	90                   	nop
1000064b:	83 ec 0c             	sub    esp,0xc
1000064e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000651:	e8 fc ff ff ff       	call   10000652 <rmtree(char*)+0x1d2>	10000652: R_386_PC32	Directory::close()
10000656:	83 c4 10             	add    esp,0x10
10000659:	83 ec 0c             	sub    esp,0xc
1000065c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000065f:	e8 fc ff ff ff       	call   10000660 <rmtree(char*)+0x1e0>	10000660: R_386_PC32	Directory::unlink()
10000664:	83 c4 10             	add    esp,0x10
10000667:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
1000066b:	74 18                	je     10000685 <rmtree(char*)+0x205>
1000066d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000670:	8b 00                	mov    eax,DWORD PTR [eax]
10000672:	83 c0 08             	add    eax,0x8
10000675:	8b 00                	mov    eax,DWORD PTR [eax]
10000677:	83 ec 0c             	sub    esp,0xc
1000067a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000067d:	ff d0                	call   eax
1000067f:	83 c4 10             	add    esp,0x10
10000682:	eb 01                	jmp    10000685 <rmtree(char*)+0x205>
10000684:	90                   	nop
10000685:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000688:	c9                   	leave  
10000689:	c3                   	ret    

1000068a <mkdir(char const*, int)>:
1000068a:	55                   	push   ebp
1000068b:	89 e5                	mov    ebp,esp
1000068d:	53                   	push   ebx
1000068e:	83 ec 14             	sub    esp,0x14
10000691:	83 ec 0c             	sub    esp,0xc
10000694:	68 14 01 00 00       	push   0x114
10000699:	e8 fc ff ff ff       	call   1000069a <mkdir(char const*, int)+0x10>	1000069a: R_386_PC32	operator new(unsigned long)
1000069e:	83 c4 10             	add    esp,0x10
100006a1:	89 c3                	mov    ebx,eax
100006a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100006a4: R_386_32	kernelProcess
100006a8:	83 ec 04             	sub    esp,0x4
100006ab:	50                   	push   eax
100006ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006af:	53                   	push   ebx
100006b0:	e8 fc ff ff ff       	call   100006b1 <mkdir(char const*, int)+0x27>	100006b1: R_386_PC32	Directory::Directory(char const*, Process*)
100006b5:	83 c4 10             	add    esp,0x10
100006b8:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
100006bb:	83 ec 0c             	sub    esp,0xc
100006be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006c1:	e8 fc ff ff ff       	call   100006c2 <mkdir(char const*, int)+0x38>	100006c2: R_386_PC32	Directory::create()
100006c6:	83 c4 10             	add    esp,0x10
100006c9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
100006cd:	74 15                	je     100006e4 <mkdir(char const*, int)+0x5a>
100006cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100006d2:	8b 00                	mov    eax,DWORD PTR [eax]
100006d4:	83 c0 08             	add    eax,0x8
100006d7:	8b 00                	mov    eax,DWORD PTR [eax]
100006d9:	83 ec 0c             	sub    esp,0xc
100006dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006df:	ff d0                	call   eax
100006e1:	83 c4 10             	add    esp,0x10
100006e4:	b8 00 00 00 00       	mov    eax,0x0
100006e9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100006ec:	c9                   	leave  
100006ed:	c3                   	ret    

100006ee <copytree(char*, char*)>:
100006ee:	55                   	push   ebp
100006ef:	89 e5                	mov    ebp,esp
100006f1:	53                   	push   ebx
100006f2:	81 ec 54 01 00 00    	sub    esp,0x154
100006f8:	83 ec 0c             	sub    esp,0xc
100006fb:	68 90 01 00 00       	push   0x190
10000700:	e8 fc ff ff ff       	call   10000701 <copytree(char*, char*)+0x13>	10000701: R_386_PC32	malloc
10000705:	83 c4 10             	add    esp,0x10
10000708:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
1000070b:	83 ec 0c             	sub    esp,0xc
1000070e:	68 90 01 00 00       	push   0x190
10000713:	e8 fc ff ff ff       	call   10000714 <copytree(char*, char*)+0x26>	10000714: R_386_PC32	malloc
10000718:	83 c4 10             	add    esp,0x10
1000071b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000071e:	83 ec 04             	sub    esp,0x4
10000721:	68 90 01 00 00       	push   0x190
10000726:	6a 00                	push   0x0
10000728:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000072b:	e8 fc ff ff ff       	call   1000072c <copytree(char*, char*)+0x3e>	1000072c: R_386_PC32	memset
10000730:	83 c4 10             	add    esp,0x10
10000733:	83 ec 04             	sub    esp,0x4
10000736:	68 90 01 00 00       	push   0x190
1000073b:	6a 00                	push   0x0
1000073d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000740:	e8 fc ff ff ff       	call   10000741 <copytree(char*, char*)+0x53>	10000741: R_386_PC32	memset
10000745:	83 c4 10             	add    esp,0x10
10000748:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
1000074e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000751:	83 ec 0c             	sub    esp,0xc
10000754:	68 14 01 00 00       	push   0x114
10000759:	e8 fc ff ff ff       	call   1000075a <copytree(char*, char*)+0x6c>	1000075a: R_386_PC32	operator new(unsigned long)
1000075e:	83 c4 10             	add    esp,0x10
10000761:	89 c3                	mov    ebx,eax
10000763:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000768:	8b 00                	mov    eax,DWORD PTR [eax]
1000076a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000076d:	83 ec 04             	sub    esp,0x4
10000770:	50                   	push   eax
10000771:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000774:	53                   	push   ebx
10000775:	e8 fc ff ff ff       	call   10000776 <copytree(char*, char*)+0x88>	10000776: R_386_PC32	Directory::Directory(char const*, Process*)
1000077a:	83 c4 10             	add    esp,0x10
1000077d:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10000780:	83 ec 0c             	sub    esp,0xc
10000783:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000786:	e8 fc ff ff ff       	call   10000787 <copytree(char*, char*)+0x99>	10000787: R_386_PC32	Directory::open()
1000078b:	83 c4 10             	add    esp,0x10
1000078e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000791:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10000795:	74 34                	je     100007cb <copytree(char*, char*)+0xdd>
10000797:	83 ec 0c             	sub    esp,0xc
1000079a:	68 eb a4 00 10       	push   0x1000a4eb	1000079b: R_386_32	.text
1000079f:	e8 fc ff ff ff       	call   100007a0 <copytree(char*, char*)+0xb2>	100007a0: R_386_PC32	Dbg::kprintf(char const*, ...)
100007a4:	83 c4 10             	add    esp,0x10
100007a7:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
100007ab:	0f 84 90 03 00 00    	je     10000b41 <copytree(char*, char*)+0x453>
100007b1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007b4:	8b 00                	mov    eax,DWORD PTR [eax]
100007b6:	83 c0 08             	add    eax,0x8
100007b9:	8b 00                	mov    eax,DWORD PTR [eax]
100007bb:	83 ec 0c             	sub    esp,0xc
100007be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007c1:	ff d0                	call   eax
100007c3:	83 c4 10             	add    esp,0x10
100007c6:	e9 76 03 00 00       	jmp    10000b41 <copytree(char*, char*)+0x453>
100007cb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007ce:	8b 00                	mov    eax,DWORD PTR [eax]
100007d0:	83 c0 0c             	add    eax,0xc
100007d3:	8b 00                	mov    eax,DWORD PTR [eax]
100007d5:	83 ec 0c             	sub    esp,0xc
100007d8:	8d 95 b8 fe ff ff    	lea    edx,[ebp-0x148]
100007de:	52                   	push   edx
100007df:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100007e2:	6a 00                	push   0x0
100007e4:	68 10 01 00 00       	push   0x110
100007e9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007ec:	ff d0                	call   eax
100007ee:	83 c4 20             	add    esp,0x20
100007f1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100007f4:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100007f8:	0f 85 fb 02 00 00    	jne    10000af9 <copytree(char*, char*)+0x40b>
100007fe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000801:	83 c0 10             	add    eax,0x10
10000804:	83 ec 08             	sub    esp,0x8
10000807:	68 e4 a4 00 10       	push   0x1000a4e4	10000808: R_386_32	.text
1000080c:	50                   	push   eax
1000080d:	e8 fc ff ff ff       	call   1000080e <copytree(char*, char*)+0x120>	1000080e: R_386_PC32	strcmp
10000812:	83 c4 10             	add    esp,0x10
10000815:	85 c0                	test   eax,eax
10000817:	74 b2                	je     100007cb <copytree(char*, char*)+0xdd>
10000819:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000081c:	83 c0 10             	add    eax,0x10
1000081f:	83 ec 08             	sub    esp,0x8
10000822:	68 e6 a4 00 10       	push   0x1000a4e6	10000823: R_386_32	.text
10000827:	50                   	push   eax
10000828:	e8 fc ff ff ff       	call   10000829 <copytree(char*, char*)+0x13b>	10000829: R_386_PC32	strcmp
1000082d:	83 c4 10             	add    esp,0x10
10000830:	85 c0                	test   eax,eax
10000832:	74 97                	je     100007cb <copytree(char*, char*)+0xdd>
10000834:	83 ec 08             	sub    esp,0x8
10000837:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000083a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000083d:	e8 fc ff ff ff       	call   1000083e <copytree(char*, char*)+0x150>	1000083e: R_386_PC32	strcpy
10000842:	83 c4 10             	add    esp,0x10
10000845:	83 ec 08             	sub    esp,0x8
10000848:	68 e9 a4 00 10       	push   0x1000a4e9	10000849: R_386_32	.text
1000084d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000850:	e8 fc ff ff ff       	call   10000851 <copytree(char*, char*)+0x163>	10000851: R_386_PC32	strcat
10000855:	83 c4 10             	add    esp,0x10
10000858:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000085b:	83 c0 10             	add    eax,0x10
1000085e:	83 ec 08             	sub    esp,0x8
10000861:	50                   	push   eax
10000862:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000865:	e8 fc ff ff ff       	call   10000866 <copytree(char*, char*)+0x178>	10000866: R_386_PC32	strcat
1000086a:	83 c4 10             	add    esp,0x10
1000086d:	83 ec 08             	sub    esp,0x8
10000870:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000873:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000876:	e8 fc ff ff ff       	call   10000877 <copytree(char*, char*)+0x189>	10000877: R_386_PC32	strcpy
1000087b:	83 c4 10             	add    esp,0x10
1000087e:	83 ec 08             	sub    esp,0x8
10000881:	68 e9 a4 00 10       	push   0x1000a4e9	10000882: R_386_32	.text
10000886:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000889:	e8 fc ff ff ff       	call   1000088a <copytree(char*, char*)+0x19c>	1000088a: R_386_PC32	strcat
1000088e:	83 c4 10             	add    esp,0x10
10000891:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000894:	83 c0 10             	add    eax,0x10
10000897:	83 ec 08             	sub    esp,0x8
1000089a:	50                   	push   eax
1000089b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000089e:	e8 fc ff ff ff       	call   1000089f <copytree(char*, char*)+0x1b1>	1000089f: R_386_PC32	strcat
100008a3:	83 c4 10             	add    esp,0x10
100008a6:	83 ec 04             	sub    esp,0x4
100008a9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100008af:	68 05 a5 00 10       	push   0x1000a505	100008b0: R_386_32	.text
100008b4:	e8 fc ff ff ff       	call   100008b5 <copytree(char*, char*)+0x1c7>	100008b5: R_386_PC32	Dbg::kprintf(char const*, ...)
100008b9:	83 c4 10             	add    esp,0x10
100008bc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100008bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
100008c2:	83 e0 02             	and    eax,0x2
100008c5:	85 c0                	test   eax,eax
100008c7:	74 47                	je     10000910 <copytree(char*, char*)+0x222>
100008c9:	83 ec 08             	sub    esp,0x8
100008cc:	68 c0 01 00 00       	push   0x1c0
100008d1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008d4:	e8 fc ff ff ff       	call   100008d5 <copytree(char*, char*)+0x1e7>	100008d5: R_386_PC32	mkdir(char const*, int)
100008d9:	83 c4 10             	add    esp,0x10
100008dc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100008df:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100008e3:	74 15                	je     100008fa <copytree(char*, char*)+0x20c>
100008e5:	83 ec 0c             	sub    esp,0xc
100008e8:	68 0f a5 00 10       	push   0x1000a50f	100008e9: R_386_32	.text
100008ed:	e8 fc ff ff ff       	call   100008ee <copytree(char*, char*)+0x200>	100008ee: R_386_PC32	KePanic(char const*)
100008f2:	83 c4 10             	add    esp,0x10
100008f5:	e9 d1 fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
100008fa:	83 ec 08             	sub    esp,0x8
100008fd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000900:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000903:	e8 fc ff ff ff       	call   10000904 <copytree(char*, char*)+0x216>	10000904: R_386_PC32	copytree(char*, char*)
10000908:	83 c4 10             	add    esp,0x10
1000090b:	e9 bb fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000910:	83 ec 0c             	sub    esp,0xc
10000913:	68 14 01 00 00       	push   0x114
10000918:	e8 fc ff ff ff       	call   10000919 <copytree(char*, char*)+0x22b>	10000919: R_386_PC32	operator new(unsigned long)
1000091d:	83 c4 10             	add    esp,0x10
10000920:	89 c3                	mov    ebx,eax
10000922:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000927:	8b 00                	mov    eax,DWORD PTR [eax]
10000929:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000092c:	83 ec 04             	sub    esp,0x4
1000092f:	50                   	push   eax
10000930:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000933:	53                   	push   ebx
10000934:	e8 fc ff ff ff       	call   10000935 <copytree(char*, char*)+0x247>	10000935: R_386_PC32	File::File(char const*, Process*)
10000939:	83 c4 10             	add    esp,0x10
1000093c:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
1000093f:	83 ec 08             	sub    esp,0x8
10000942:	6a 01                	push   0x1
10000944:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000947:	e8 fc ff ff ff       	call   10000948 <copytree(char*, char*)+0x25a>	10000948: R_386_PC32	File::open(FileOpenMode)
1000094c:	83 c4 10             	add    esp,0x10
1000094f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000953:	75 15                	jne    1000096a <copytree(char*, char*)+0x27c>
10000955:	83 ec 0c             	sub    esp,0xc
10000958:	68 20 a5 00 10       	push   0x1000a520	10000959: R_386_32	.text
1000095d:	e8 fc ff ff ff       	call   1000095e <copytree(char*, char*)+0x270>	1000095e: R_386_PC32	KePanic(char const*)
10000962:	83 c4 10             	add    esp,0x10
10000965:	e9 8a 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
1000096a:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
1000096e:	0f 84 57 fe ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000974:	83 ec 0c             	sub    esp,0xc
10000977:	68 14 01 00 00       	push   0x114
1000097c:	e8 fc ff ff ff       	call   1000097d <copytree(char*, char*)+0x28f>	1000097d: R_386_PC32	operator new(unsigned long)
10000981:	83 c4 10             	add    esp,0x10
10000984:	89 c3                	mov    ebx,eax
10000986:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000098b:	8b 00                	mov    eax,DWORD PTR [eax]
1000098d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000990:	83 ec 04             	sub    esp,0x4
10000993:	50                   	push   eax
10000994:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000997:	53                   	push   ebx
10000998:	e8 fc ff ff ff       	call   10000999 <copytree(char*, char*)+0x2ab>	10000999: R_386_PC32	File::File(char const*, Process*)
1000099d:	83 c4 10             	add    esp,0x10
100009a0:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
100009a3:	83 ec 08             	sub    esp,0x8
100009a6:	6a 12                	push   0x12
100009a8:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009ab:	e8 fc ff ff ff       	call   100009ac <copytree(char*, char*)+0x2be>	100009ac: R_386_PC32	File::open(FileOpenMode)
100009b0:	83 c4 10             	add    esp,0x10
100009b3:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
100009b7:	75 23                	jne    100009dc <copytree(char*, char*)+0x2ee>
100009b9:	83 ec 0c             	sub    esp,0xc
100009bc:	68 20 a5 00 10       	push   0x1000a520	100009bd: R_386_32	.text
100009c1:	e8 fc ff ff ff       	call   100009c2 <copytree(char*, char*)+0x2d4>	100009c2: R_386_PC32	KePanic(char const*)
100009c6:	83 c4 10             	add    esp,0x10
100009c9:	83 ec 0c             	sub    esp,0xc
100009cc:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009cf:	e8 fc ff ff ff       	call   100009d0 <copytree(char*, char*)+0x2e2>	100009d0: R_386_PC32	File::close()
100009d4:	83 c4 10             	add    esp,0x10
100009d7:	e9 18 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
100009dc:	83 ec 0c             	sub    esp,0xc
100009df:	68 00 10 00 00       	push   0x1000
100009e4:	e8 fc ff ff ff       	call   100009e5 <copytree(char*, char*)+0x2f7>	100009e5: R_386_PC32	malloc
100009e9:	83 c4 10             	add    esp,0x10
100009ec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100009ef:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
100009f3:	75 31                	jne    10000a26 <copytree(char*, char*)+0x338>
100009f5:	83 ec 0c             	sub    esp,0xc
100009f8:	68 2f a5 00 10       	push   0x1000a52f	100009f9: R_386_32	.text
100009fd:	e8 fc ff ff ff       	call   100009fe <copytree(char*, char*)+0x310>	100009fe: R_386_PC32	KePanic(char const*)
10000a02:	83 c4 10             	add    esp,0x10
10000a05:	83 ec 0c             	sub    esp,0xc
10000a08:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000a0b:	e8 fc ff ff ff       	call   10000a0c <copytree(char*, char*)+0x31e>	10000a0c: R_386_PC32	free
10000a10:	83 c4 10             	add    esp,0x10
10000a13:	83 ec 0c             	sub    esp,0xc
10000a16:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000a19:	e8 fc ff ff ff       	call   10000a1a <copytree(char*, char*)+0x32c>	10000a1a: R_386_PC32	free
10000a1e:	83 c4 10             	add    esp,0x10
10000a21:	e9 1c 01 00 00       	jmp    10000b42 <copytree(char*, char*)+0x454>
10000a26:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000a29:	8b 00                	mov    eax,DWORD PTR [eax]
10000a2b:	83 c0 0c             	add    eax,0xc
10000a2e:	8b 00                	mov    eax,DWORD PTR [eax]
10000a30:	83 ec 0c             	sub    esp,0xc
10000a33:	8d 95 b4 fe ff ff    	lea    edx,[ebp-0x14c]
10000a39:	52                   	push   edx
10000a3a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a3d:	6a 00                	push   0x0
10000a3f:	68 00 10 00 00       	push   0x1000
10000a44:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000a47:	ff d0                	call   eax
10000a49:	83 c4 20             	add    esp,0x20
10000a4c:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000a4f:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000a53:	75 37                	jne    10000a8c <copytree(char*, char*)+0x39e>
10000a55:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a58:	8b 00                	mov    eax,DWORD PTR [eax]
10000a5a:	83 c0 10             	add    eax,0x10
10000a5d:	8b 08                	mov    ecx,DWORD PTR [eax]
10000a5f:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a65:	99                   	cdq    
10000a66:	83 ec 0c             	sub    esp,0xc
10000a69:	8d 9d b0 fe ff ff    	lea    ebx,[ebp-0x150]
10000a6f:	53                   	push   ebx
10000a70:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a73:	52                   	push   edx
10000a74:	50                   	push   eax
10000a75:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000a78:	ff d1                	call   ecx
10000a7a:	83 c4 20             	add    esp,0x20
10000a7d:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a83:	3d 00 10 00 00       	cmp    eax,0x1000
10000a88:	75 05                	jne    10000a8f <copytree(char*, char*)+0x3a1>
10000a8a:	eb 9a                	jmp    10000a26 <copytree(char*, char*)+0x338>
10000a8c:	90                   	nop
10000a8d:	eb 01                	jmp    10000a90 <copytree(char*, char*)+0x3a2>
10000a8f:	90                   	nop
10000a90:	83 ec 0c             	sub    esp,0xc
10000a93:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a96:	e8 fc ff ff ff       	call   10000a97 <copytree(char*, char*)+0x3a9>	10000a97: R_386_PC32	free
10000a9b:	83 c4 10             	add    esp,0x10
10000a9e:	83 ec 0c             	sub    esp,0xc
10000aa1:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000aa4:	e8 fc ff ff ff       	call   10000aa5 <copytree(char*, char*)+0x3b7>	10000aa5: R_386_PC32	File::close()
10000aa9:	83 c4 10             	add    esp,0x10
10000aac:	83 ec 0c             	sub    esp,0xc
10000aaf:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000ab2:	e8 fc ff ff ff       	call   10000ab3 <copytree(char*, char*)+0x3c5>	10000ab3: R_386_PC32	File::close()
10000ab7:	83 c4 10             	add    esp,0x10
10000aba:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000abe:	74 15                	je     10000ad5 <copytree(char*, char*)+0x3e7>
10000ac0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000ac3:	8b 00                	mov    eax,DWORD PTR [eax]
10000ac5:	83 c0 08             	add    eax,0x8
10000ac8:	8b 00                	mov    eax,DWORD PTR [eax]
10000aca:	83 ec 0c             	sub    esp,0xc
10000acd:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ad0:	ff d0                	call   eax
10000ad2:	83 c4 10             	add    esp,0x10
10000ad5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
10000ad9:	0f 84 ec fc ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000adf:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000ae2:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae4:	83 c0 08             	add    eax,0x8
10000ae7:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae9:	83 ec 0c             	sub    esp,0xc
10000aec:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000aef:	ff d0                	call   eax
10000af1:	83 c4 10             	add    esp,0x10
10000af4:	e9 d2 fc ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000af9:	90                   	nop
10000afa:	83 ec 0c             	sub    esp,0xc
10000afd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000b00:	e8 fc ff ff ff       	call   10000b01 <copytree(char*, char*)+0x413>	10000b01: R_386_PC32	free
10000b05:	83 c4 10             	add    esp,0x10
10000b08:	83 ec 0c             	sub    esp,0xc
10000b0b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000b0e:	e8 fc ff ff ff       	call   10000b0f <copytree(char*, char*)+0x421>	10000b0f: R_386_PC32	free
10000b13:	83 c4 10             	add    esp,0x10
10000b16:	83 ec 0c             	sub    esp,0xc
10000b19:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b1c:	e8 fc ff ff ff       	call   10000b1d <copytree(char*, char*)+0x42f>	10000b1d: R_386_PC32	Directory::close()
10000b21:	83 c4 10             	add    esp,0x10
10000b24:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000b28:	74 18                	je     10000b42 <copytree(char*, char*)+0x454>
10000b2a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10000b2d:	8b 00                	mov    eax,DWORD PTR [eax]
10000b2f:	83 c0 08             	add    eax,0x8
10000b32:	8b 00                	mov    eax,DWORD PTR [eax]
10000b34:	83 ec 0c             	sub    esp,0xc
10000b37:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b3a:	ff d0                	call   eax
10000b3c:	83 c4 10             	add    esp,0x10
10000b3f:	eb 01                	jmp    10000b42 <copytree(char*, char*)+0x454>
10000b41:	90                   	nop
10000b42:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000b45:	c9                   	leave  
10000b46:	c3                   	ret    

10000b47 <backupTree(char*, unsigned short)>:
10000b47:	55                   	push   ebp
10000b48:	89 e5                	mov    ebp,esp
10000b4a:	57                   	push   edi
10000b4b:	56                   	push   esi
10000b4c:	53                   	push   ebx
10000b4d:	81 ec 8c 12 00 00    	sub    esp,0x128c
10000b53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000b56:	66 89 85 74 ed ff ff 	mov    WORD PTR [ebp-0x128c],ax
10000b5d:	83 ec 0c             	sub    esp,0xc
10000b60:	68 90 01 00 00       	push   0x190
10000b65:	e8 fc ff ff ff       	call   10000b66 <backupTree(char*, unsigned short)+0x1f>	10000b66: R_386_PC32	malloc
10000b6a:	83 c4 10             	add    esp,0x10
10000b6d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10000b70:	83 ec 04             	sub    esp,0x4
10000b73:	68 90 01 00 00       	push   0x190
10000b78:	6a 00                	push   0x0
10000b7a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000b7d:	e8 fc ff ff ff       	call   10000b7e <backupTree(char*, unsigned short)+0x37>	10000b7e: R_386_PC32	memset
10000b82:	83 c4 10             	add    esp,0x10
10000b85:	8d 85 a8 fe ff ff    	lea    eax,[ebp-0x158]
10000b8b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10000b8e:	83 ec 0c             	sub    esp,0xc
10000b91:	68 14 01 00 00       	push   0x114
10000b96:	e8 fc ff ff ff       	call   10000b97 <backupTree(char*, unsigned short)+0x50>	10000b97: R_386_PC32	operator new(unsigned long)
10000b9b:	83 c4 10             	add    esp,0x10
10000b9e:	89 c3                	mov    ebx,eax
10000ba0:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ba5:	8b 00                	mov    eax,DWORD PTR [eax]
10000ba7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000baa:	83 ec 04             	sub    esp,0x4
10000bad:	50                   	push   eax
10000bae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bb1:	53                   	push   ebx
10000bb2:	e8 fc ff ff ff       	call   10000bb3 <backupTree(char*, unsigned short)+0x6c>	10000bb3: R_386_PC32	Directory::Directory(char const*, Process*)
10000bb7:	83 c4 10             	add    esp,0x10
10000bba:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10000bbd:	83 ec 0c             	sub    esp,0xc
10000bc0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bc3:	e8 fc ff ff ff       	call   10000bc4 <backupTree(char*, unsigned short)+0x7d>	10000bc4: R_386_PC32	Directory::open()
10000bc8:	83 c4 10             	add    esp,0x10
10000bcb:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000bce:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000bd2:	74 34                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000bd4:	83 ec 0c             	sub    esp,0xc
10000bd7:	68 eb a4 00 10       	push   0x1000a4eb	10000bd8: R_386_32	.text
10000bdc:	e8 fc ff ff ff       	call   10000bdd <backupTree(char*, unsigned short)+0x96>	10000bdd: R_386_PC32	Dbg::kprintf(char const*, ...)
10000be1:	83 c4 10             	add    esp,0x10
10000be4:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
10000be8:	0f 84 c8 05 00 00    	je     100011b6 <backupTree(char*, unsigned short)+0x66f>
10000bee:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000bf1:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf3:	83 c0 08             	add    eax,0x8
10000bf6:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf8:	83 ec 0c             	sub    esp,0xc
10000bfb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bfe:	ff d0                	call   eax
10000c00:	83 c4 10             	add    esp,0x10
10000c03:	e9 af 05 00 00       	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
10000c08:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000c0b:	8b 00                	mov    eax,DWORD PTR [eax]
10000c0d:	83 c0 0c             	add    eax,0xc
10000c10:	8b 00                	mov    eax,DWORD PTR [eax]
10000c12:	83 ec 0c             	sub    esp,0xc
10000c15:	8d 95 a4 fe ff ff    	lea    edx,[ebp-0x15c]
10000c1b:	52                   	push   edx
10000c1c:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000c1f:	6a 00                	push   0x0
10000c21:	68 10 01 00 00       	push   0x110
10000c26:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000c29:	ff d0                	call   eax
10000c2b:	83 c4 20             	add    esp,0x20
10000c2e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000c31:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
10000c35:	0f 85 41 05 00 00    	jne    1000117c <backupTree(char*, unsigned short)+0x635>
10000c3b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c3e:	83 c0 10             	add    eax,0x10
10000c41:	83 ec 08             	sub    esp,0x8
10000c44:	68 e4 a4 00 10       	push   0x1000a4e4	10000c45: R_386_32	.text
10000c49:	50                   	push   eax
10000c4a:	e8 fc ff ff ff       	call   10000c4b <backupTree(char*, unsigned short)+0x104>	10000c4b: R_386_PC32	strcmp
10000c4f:	83 c4 10             	add    esp,0x10
10000c52:	85 c0                	test   eax,eax
10000c54:	74 b2                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c56:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c59:	83 c0 10             	add    eax,0x10
10000c5c:	83 ec 08             	sub    esp,0x8
10000c5f:	68 e6 a4 00 10       	push   0x1000a4e6	10000c60: R_386_32	.text
10000c64:	50                   	push   eax
10000c65:	e8 fc ff ff ff       	call   10000c66 <backupTree(char*, unsigned short)+0x11f>	10000c66: R_386_PC32	strcmp
10000c6a:	83 c4 10             	add    esp,0x10
10000c6d:	85 c0                	test   eax,eax
10000c6f:	74 97                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c71:	83 ec 08             	sub    esp,0x8
10000c74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c77:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c7a:	e8 fc ff ff ff       	call   10000c7b <backupTree(char*, unsigned short)+0x134>	10000c7b: R_386_PC32	strcpy
10000c7f:	83 c4 10             	add    esp,0x10
10000c82:	83 ec 08             	sub    esp,0x8
10000c85:	68 e9 a4 00 10       	push   0x1000a4e9	10000c86: R_386_32	.text
10000c8a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c8d:	e8 fc ff ff ff       	call   10000c8e <backupTree(char*, unsigned short)+0x147>	10000c8e: R_386_PC32	strcat
10000c92:	83 c4 10             	add    esp,0x10
10000c95:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c98:	83 c0 10             	add    eax,0x10
10000c9b:	83 ec 08             	sub    esp,0x8
10000c9e:	50                   	push   eax
10000c9f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ca2:	e8 fc ff ff ff       	call   10000ca3 <backupTree(char*, unsigned short)+0x15c>	10000ca3: R_386_PC32	strcat
10000ca7:	83 c4 10             	add    esp,0x10
10000caa:	66 c7 45 e6 bc ad    	mov    WORD PTR [ebp-0x1a],0xadbc
10000cb0:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10000cb7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000cba:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cbd:	01 d0                	add    eax,edx
10000cbf:	83 c0 10             	add    eax,0x10
10000cc2:	8a 00                	mov    al,BYTE PTR [eax]
10000cc4:	84 c0                	test   al,al
10000cc6:	74 3c                	je     10000d04 <backupTree(char*, unsigned short)+0x1bd>
10000cc8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000ccb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cce:	01 d0                	add    eax,edx
10000cd0:	83 c0 10             	add    eax,0x10
10000cd3:	8a 00                	mov    al,BYTE PTR [eax]
10000cd5:	66 0f be d0          	movsx  dx,al
10000cd9:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000cdd:	31 d0                	xor    eax,edx
10000cdf:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000ce3:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000ce7:	c1 e0 03             	shl    eax,0x3
10000cea:	89 c2                	mov    edx,eax
10000cec:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000cf0:	c1 f8 0d             	sar    eax,0xd
10000cf3:	09 d0                	or     eax,edx
10000cf5:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000cf9:	66 81 6d e6 f1 06    	sub    WORD PTR [ebp-0x1a],0x6f1
10000cff:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10000d02:	eb b3                	jmp    10000cb7 <backupTree(char*, unsigned short)+0x170>
10000d04:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d07:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000d0a:	83 e0 02             	and    eax,0x2
10000d0d:	85 c0                	test   eax,eax
10000d0f:	74 37                	je     10000d48 <backupTree(char*, unsigned short)+0x201>
10000d11:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d14:	83 c0 10             	add    eax,0x10
10000d17:	83 ec 08             	sub    esp,0x8
10000d1a:	68 39 a5 00 10       	push   0x1000a539	10000d1b: R_386_32	.text
10000d1f:	50                   	push   eax
10000d20:	e8 fc ff ff ff       	call   10000d21 <backupTree(char*, unsigned short)+0x1da>	10000d21: R_386_PC32	strcmp
10000d25:	83 c4 10             	add    esp,0x10
10000d28:	85 c0                	test   eax,eax
10000d2a:	0f 84 d8 fe ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d30:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000d34:	83 ec 08             	sub    esp,0x8
10000d37:	50                   	push   eax
10000d38:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000d3b:	e8 fc ff ff ff       	call   10000d3c <backupTree(char*, unsigned short)+0x1f5>	10000d3c: R_386_PC32	backupTree(char*, unsigned short)
10000d40:	83 c4 10             	add    esp,0x10
10000d43:	e9 c0 fe ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d48:	c6 85 a3 fe ff ff 00 	mov    BYTE PTR [ebp-0x15d],0x0
10000d4f:	83 ec 08             	sub    esp,0x8
10000d52:	68 40 a5 00 10       	push   0x1000a540	10000d53: R_386_32	.text
10000d57:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d5d:	50                   	push   eax
10000d5e:	e8 fc ff ff ff       	call   10000d5f <backupTree(char*, unsigned short)+0x218>	10000d5f: R_386_PC32	strcpy
10000d63:	83 c4 10             	add    esp,0x10
10000d66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d69:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10000d6c:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000d72:	83 ec 08             	sub    esp,0x8
10000d75:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000d7b:	50                   	push   eax
10000d7c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d82:	50                   	push   eax
10000d83:	e8 fc ff ff ff       	call   10000d84 <backupTree(char*, unsigned short)+0x23d>	10000d84: R_386_PC32	strcat
10000d88:	83 c4 10             	add    esp,0x10
10000d8b:	83 ec 04             	sub    esp,0x4
10000d8e:	6a 09                	push   0x9
10000d90:	6a 00                	push   0x0
10000d92:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000d98:	50                   	push   eax
10000d99:	e8 fc ff ff ff       	call   10000d9a <backupTree(char*, unsigned short)+0x253>	10000d9a: R_386_PC32	memset
10000d9e:	83 c4 10             	add    esp,0x10
10000da1:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000da4:	83 c0 10             	add    eax,0x10
10000da7:	83 ec 04             	sub    esp,0x4
10000daa:	6a 08                	push   0x8
10000dac:	50                   	push   eax
10000dad:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000db3:	50                   	push   eax
10000db4:	e8 fc ff ff ff       	call   10000db5 <backupTree(char*, unsigned short)+0x26e>	10000db5: R_386_PC32	strncpyxx(char*, char const*, unsigned long)
10000db9:	83 c4 10             	add    esp,0x10
10000dbc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000dc3:	83 7d dc 07          	cmp    DWORD PTR [ebp-0x24],0x7
10000dc7:	0f 8f c5 00 00 00    	jg     10000e92 <backupTree(char*, unsigned short)+0x34b>
10000dcd:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000dd3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000dd6:	01 d0                	add    eax,edx
10000dd8:	8a 00                	mov    al,BYTE PTR [eax]
10000dda:	3c 60                	cmp    al,0x60
10000ddc:	7e 30                	jle    10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000dde:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000de4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000de7:	01 d0                	add    eax,edx
10000de9:	8a 00                	mov    al,BYTE PTR [eax]
10000deb:	3c 7a                	cmp    al,0x7a
10000ded:	7f 1f                	jg     10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000def:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000df5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000df8:	01 d0                	add    eax,edx
10000dfa:	8a 00                	mov    al,BYTE PTR [eax]
10000dfc:	83 e8 20             	sub    eax,0x20
10000dff:	88 c2                	mov    dl,al
10000e01:	8d 8d 99 fe ff ff    	lea    ecx,[ebp-0x167]
10000e07:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e0a:	01 c8                	add    eax,ecx
10000e0c:	88 10                	mov    BYTE PTR [eax],dl
10000e0e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e14:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e17:	01 d0                	add    eax,edx
10000e19:	8a 00                	mov    al,BYTE PTR [eax]
10000e1b:	3c 59                	cmp    al,0x59
10000e1d:	75 0e                	jne    10000e2d <backupTree(char*, unsigned short)+0x2e6>
10000e1f:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e25:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e28:	01 d0                	add    eax,edx
10000e2a:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e2d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e33:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e36:	01 d0                	add    eax,edx
10000e38:	8a 00                	mov    al,BYTE PTR [eax]
10000e3a:	3c 5a                	cmp    al,0x5a
10000e3c:	75 0e                	jne    10000e4c <backupTree(char*, unsigned short)+0x305>
10000e3e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e47:	01 d0                	add    eax,edx
10000e49:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e4c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e52:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e55:	01 d0                	add    eax,edx
10000e57:	8a 00                	mov    al,BYTE PTR [eax]
10000e59:	3c 20                	cmp    al,0x20
10000e5b:	75 0e                	jne    10000e6b <backupTree(char*, unsigned short)+0x324>
10000e5d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e63:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e66:	01 d0                	add    eax,edx
10000e68:	c6 00 59             	mov    BYTE PTR [eax],0x59
10000e6b:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e71:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e74:	01 d0                	add    eax,edx
10000e76:	8a 00                	mov    al,BYTE PTR [eax]
10000e78:	3c 2e                	cmp    al,0x2e
10000e7a:	75 0e                	jne    10000e8a <backupTree(char*, unsigned short)+0x343>
10000e7c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e82:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e85:	01 d0                	add    eax,edx
10000e87:	c6 00 5a             	mov    BYTE PTR [eax],0x5a
10000e8a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10000e8d:	e9 31 ff ff ff       	jmp    10000dc3 <backupTree(char*, unsigned short)+0x27c>
10000e92:	83 ec 08             	sub    esp,0x8
10000e95:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000e9b:	50                   	push   eax
10000e9c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ea2:	50                   	push   eax
10000ea3:	e8 fc ff ff ff       	call   10000ea4 <backupTree(char*, unsigned short)+0x35d>	10000ea4: R_386_PC32	strcat
10000ea8:	83 c4 10             	add    esp,0x10
10000eab:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000eae:	83 c0 10             	add    eax,0x10
10000eb1:	83 ec 0c             	sub    esp,0xc
10000eb4:	50                   	push   eax
10000eb5:	e8 fc ff ff ff       	call   10000eb6 <backupTree(char*, unsigned short)+0x36f>	10000eb6: R_386_PC32	strlen
10000eba:	83 c4 10             	add    esp,0x10
10000ebd:	83 c0 41             	add    eax,0x41
10000ec0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000ec6:	83 ec 08             	sub    esp,0x8
10000ec9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000ecf:	50                   	push   eax
10000ed0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ed6:	50                   	push   eax
10000ed7:	e8 fc ff ff ff       	call   10000ed8 <backupTree(char*, unsigned short)+0x391>	10000ed8: R_386_PC32	strcat
10000edc:	83 c4 10             	add    esp,0x10
10000edf:	83 ec 08             	sub    esp,0x8
10000ee2:	68 e4 a4 00 10       	push   0x1000a4e4	10000ee3: R_386_32	.text
10000ee7:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000eed:	50                   	push   eax
10000eee:	e8 fc ff ff ff       	call   10000eef <backupTree(char*, unsigned short)+0x3a8>	10000eef: R_386_PC32	strcat
10000ef3:	83 c4 10             	add    esp,0x10
10000ef6:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000efa:	25 65 07 00 00       	and    eax,0x765
10000eff:	33 85 74 ed ff ff    	xor    eax,DWORD PTR [ebp-0x128c]
10000f05:	66 89 45 c6          	mov    WORD PTR [ebp-0x3a],ax
10000f09:	8d 85 88 fe ff ff    	lea    eax,[ebp-0x178]
10000f0f:	bb 59 a5 00 10       	mov    ebx,0x1000a559	10000f10: R_386_32	.text
10000f14:	ba 11 00 00 00       	mov    edx,0x11
10000f19:	89 c7                	mov    edi,eax
10000f1b:	89 de                	mov    esi,ebx
10000f1d:	89 d1                	mov    ecx,edx
10000f1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000f21:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f25:	83 e0 0f             	and    eax,0xf
10000f28:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f2f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f35:	83 ec 08             	sub    esp,0x8
10000f38:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f3e:	50                   	push   eax
10000f3f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f45:	50                   	push   eax
10000f46:	e8 fc ff ff ff       	call   10000f47 <backupTree(char*, unsigned short)+0x400>	10000f47: R_386_PC32	strcat
10000f4b:	83 c4 10             	add    esp,0x10
10000f4e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f52:	c1 f8 04             	sar    eax,0x4
10000f55:	83 e0 0f             	and    eax,0xf
10000f58:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f5f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f65:	83 ec 08             	sub    esp,0x8
10000f68:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f6e:	50                   	push   eax
10000f6f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f75:	50                   	push   eax
10000f76:	e8 fc ff ff ff       	call   10000f77 <backupTree(char*, unsigned short)+0x430>	10000f77: R_386_PC32	strcat
10000f7b:	83 c4 10             	add    esp,0x10
10000f7e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f82:	c1 f8 08             	sar    eax,0x8
10000f85:	83 e0 0f             	and    eax,0xf
10000f88:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f8f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f95:	83 ec 08             	sub    esp,0x8
10000f98:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f9e:	50                   	push   eax
10000f9f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fa5:	50                   	push   eax
10000fa6:	e8 fc ff ff ff       	call   10000fa7 <backupTree(char*, unsigned short)+0x460>	10000fa7: R_386_PC32	strcat
10000fab:	83 c4 10             	add    esp,0x10
10000fae:	66 8b 45 c6          	mov    ax,WORD PTR [ebp-0x3a]
10000fb2:	66 c1 e8 0c          	shr    ax,0xc
10000fb6:	0f b7 c0             	movzx  eax,ax
10000fb9:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000fc0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000fc6:	83 ec 08             	sub    esp,0x8
10000fc9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000fcf:	50                   	push   eax
10000fd0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fd6:	50                   	push   eax
10000fd7:	e8 fc ff ff ff       	call   10000fd8 <backupTree(char*, unsigned short)+0x491>	10000fd8: R_386_PC32	strcat
10000fdc:	83 c4 10             	add    esp,0x10
10000fdf:	83 ec 0c             	sub    esp,0xc
10000fe2:	68 14 01 00 00       	push   0x114
10000fe7:	e8 fc ff ff ff       	call   10000fe8 <backupTree(char*, unsigned short)+0x4a1>	10000fe8: R_386_PC32	operator new(unsigned long)
10000fec:	83 c4 10             	add    esp,0x10
10000fef:	89 c3                	mov    ebx,eax
10000ff1:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ff6:	8b 00                	mov    eax,DWORD PTR [eax]
10000ff8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000ffb:	83 ec 04             	sub    esp,0x4
10000ffe:	50                   	push   eax
10000fff:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001002:	53                   	push   ebx
10001003:	e8 fc ff ff ff       	call   10001004 <backupTree(char*, unsigned short)+0x4bd>	10001004: R_386_PC32	File::File(char const*, Process*)
10001008:	83 c4 10             	add    esp,0x10
1000100b:	89 5d c0             	mov    DWORD PTR [ebp-0x40],ebx
1000100e:	83 ec 08             	sub    esp,0x8
10001011:	6a 01                	push   0x1
10001013:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001016:	e8 fc ff ff ff       	call   10001017 <backupTree(char*, unsigned short)+0x4d0>	10001017: R_386_PC32	File::open(FileOpenMode)
1000101b:	83 c4 10             	add    esp,0x10
1000101e:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001022:	75 15                	jne    10001039 <backupTree(char*, unsigned short)+0x4f2>
10001024:	83 ec 0c             	sub    esp,0xc
10001027:	68 20 a5 00 10       	push   0x1000a520	10001028: R_386_32	.text
1000102c:	e8 fc ff ff ff       	call   1000102d <backupTree(char*, unsigned short)+0x4e6>	1000102d: R_386_PC32	KePanic(char const*)
10001031:	83 c4 10             	add    esp,0x10
10001034:	e9 3e 01 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
10001039:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
1000103d:	0f 84 c5 fb ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001043:	83 ec 0c             	sub    esp,0xc
10001046:	68 14 01 00 00       	push   0x114
1000104b:	e8 fc ff ff ff       	call   1000104c <backupTree(char*, unsigned short)+0x505>	1000104c: R_386_PC32	operator new(unsigned long)
10001050:	83 c4 10             	add    esp,0x10
10001053:	89 c3                	mov    ebx,eax
10001055:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000105a:	8b 00                	mov    eax,DWORD PTR [eax]
1000105c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000105f:	83 ec 04             	sub    esp,0x4
10001062:	50                   	push   eax
10001063:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10001069:	50                   	push   eax
1000106a:	53                   	push   ebx
1000106b:	e8 fc ff ff ff       	call   1000106c <backupTree(char*, unsigned short)+0x525>	1000106c: R_386_PC32	File::File(char const*, Process*)
10001070:	83 c4 10             	add    esp,0x10
10001073:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
10001076:	83 ec 08             	sub    esp,0x8
10001079:	6a 12                	push   0x12
1000107b:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
1000107e:	e8 fc ff ff ff       	call   1000107f <backupTree(char*, unsigned short)+0x538>	1000107f: R_386_PC32	File::open(FileOpenMode)
10001083:	83 c4 10             	add    esp,0x10
10001086:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000108a:	75 23                	jne    100010af <backupTree(char*, unsigned short)+0x568>
1000108c:	83 ec 0c             	sub    esp,0xc
1000108f:	68 20 a5 00 10       	push   0x1000a520	10001090: R_386_32	.text
10001094:	e8 fc ff ff ff       	call   10001095 <backupTree(char*, unsigned short)+0x54e>	10001095: R_386_PC32	KePanic(char const*)
10001099:	83 c4 10             	add    esp,0x10
1000109c:	83 ec 0c             	sub    esp,0xc
1000109f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
100010a2:	e8 fc ff ff ff       	call   100010a3 <backupTree(char*, unsigned short)+0x55c>	100010a3: R_386_PC32	File::close()
100010a7:	83 c4 10             	add    esp,0x10
100010aa:	e9 c8 00 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
100010af:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100010b2:	8b 00                	mov    eax,DWORD PTR [eax]
100010b4:	83 c0 0c             	add    eax,0xc
100010b7:	8b 00                	mov    eax,DWORD PTR [eax]
100010b9:	83 ec 0c             	sub    esp,0xc
100010bc:	8d 95 84 fe ff ff    	lea    edx,[ebp-0x17c]
100010c2:	52                   	push   edx
100010c3:	8d 95 80 ee ff ff    	lea    edx,[ebp-0x1180]
100010c9:	52                   	push   edx
100010ca:	6a 00                	push   0x0
100010cc:	68 00 10 00 00       	push   0x1000
100010d1:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100010d4:	ff d0                	call   eax
100010d6:	83 c4 20             	add    esp,0x20
100010d9:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100010dc:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100010e0:	75 3b                	jne    1000111d <backupTree(char*, unsigned short)+0x5d6>
100010e2:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100010e5:	8b 00                	mov    eax,DWORD PTR [eax]
100010e7:	83 c0 10             	add    eax,0x10
100010ea:	8b 08                	mov    ecx,DWORD PTR [eax]
100010ec:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
100010f2:	99                   	cdq    
100010f3:	83 ec 0c             	sub    esp,0xc
100010f6:	8d 9d 80 fe ff ff    	lea    ebx,[ebp-0x180]
100010fc:	53                   	push   ebx
100010fd:	8d 9d 80 ee ff ff    	lea    ebx,[ebp-0x1180]
10001103:	53                   	push   ebx
10001104:	52                   	push   edx
10001105:	50                   	push   eax
10001106:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001109:	ff d1                	call   ecx
1000110b:	83 c4 20             	add    esp,0x20
1000110e:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
10001114:	3d 00 10 00 00       	cmp    eax,0x1000
10001119:	75 05                	jne    10001120 <backupTree(char*, unsigned short)+0x5d9>
1000111b:	eb 92                	jmp    100010af <backupTree(char*, unsigned short)+0x568>
1000111d:	90                   	nop
1000111e:	eb 01                	jmp    10001121 <backupTree(char*, unsigned short)+0x5da>
10001120:	90                   	nop
10001121:	83 ec 0c             	sub    esp,0xc
10001124:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001127:	e8 fc ff ff ff       	call   10001128 <backupTree(char*, unsigned short)+0x5e1>	10001128: R_386_PC32	File::close()
1000112c:	83 c4 10             	add    esp,0x10
1000112f:	83 ec 0c             	sub    esp,0xc
10001132:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001135:	e8 fc ff ff ff       	call   10001136 <backupTree(char*, unsigned short)+0x5ef>	10001136: R_386_PC32	File::close()
1000113a:	83 c4 10             	add    esp,0x10
1000113d:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001141:	74 15                	je     10001158 <backupTree(char*, unsigned short)+0x611>
10001143:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001146:	8b 00                	mov    eax,DWORD PTR [eax]
10001148:	83 c0 08             	add    eax,0x8
1000114b:	8b 00                	mov    eax,DWORD PTR [eax]
1000114d:	83 ec 0c             	sub    esp,0xc
10001150:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001153:	ff d0                	call   eax
10001155:	83 c4 10             	add    esp,0x10
10001158:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000115c:	0f 84 a6 fa ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001162:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10001165:	8b 00                	mov    eax,DWORD PTR [eax]
10001167:	83 c0 08             	add    eax,0x8
1000116a:	8b 00                	mov    eax,DWORD PTR [eax]
1000116c:	83 ec 0c             	sub    esp,0xc
1000116f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001172:	ff d0                	call   eax
10001174:	83 c4 10             	add    esp,0x10
10001177:	e9 8c fa ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
1000117c:	90                   	nop
1000117d:	83 ec 0c             	sub    esp,0xc
10001180:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001183:	e8 fc ff ff ff       	call   10001184 <backupTree(char*, unsigned short)+0x63d>	10001184: R_386_PC32	free
10001188:	83 c4 10             	add    esp,0x10
1000118b:	83 ec 0c             	sub    esp,0xc
1000118e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10001191:	e8 fc ff ff ff       	call   10001192 <backupTree(char*, unsigned short)+0x64b>	10001192: R_386_PC32	Directory::close()
10001196:	83 c4 10             	add    esp,0x10
10001199:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
1000119d:	74 18                	je     100011b7 <backupTree(char*, unsigned short)+0x670>
1000119f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100011a2:	8b 00                	mov    eax,DWORD PTR [eax]
100011a4:	83 c0 08             	add    eax,0x8
100011a7:	8b 00                	mov    eax,DWORD PTR [eax]
100011a9:	83 ec 0c             	sub    esp,0xc
100011ac:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100011af:	ff d0                	call   eax
100011b1:	83 c4 10             	add    esp,0x10
100011b4:	eb 01                	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
100011b6:	90                   	nop
100011b7:	8d 65 f4             	lea    esp,[ebp-0xc]
100011ba:	5b                   	pop    ebx
100011bb:	5e                   	pop    esi
100011bc:	5f                   	pop    edi
100011bd:	5d                   	pop    ebp
100011be:	c3                   	ret    

100011bf <createUser(char const*)>:
100011bf:	55                   	push   ebp
100011c0:	89 e5                	mov    ebp,esp
100011c2:	81 ec 08 01 00 00    	sub    esp,0x108
100011c8:	68 6a a5 00 10       	push   0x1000a56a	100011c9: R_386_32	.text
100011cd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011d3:	50                   	push   eax
100011d4:	e8 fc ff ff ff       	call   100011d5 <createUser(char const*)+0x16>	100011d5: R_386_PC32	strcpy
100011d9:	83 c4 08             	add    esp,0x8
100011dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100011df:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011e5:	50                   	push   eax
100011e6:	e8 fc ff ff ff       	call   100011e7 <createUser(char const*)+0x28>	100011e7: R_386_PC32	strcat
100011eb:	83 c4 08             	add    esp,0x8
100011ee:	83 ec 08             	sub    esp,0x8
100011f1:	68 c0 01 00 00       	push   0x1c0
100011f6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011fc:	50                   	push   eax
100011fd:	e8 fc ff ff ff       	call   100011fe <createUser(char const*)+0x3f>	100011fe: R_386_PC32	mkdir(char const*, int)
10001202:	83 c4 10             	add    esp,0x10
10001205:	83 ec 08             	sub    esp,0x8
10001208:	68 74 a5 00 10       	push   0x1000a574	10001209: R_386_32	.text
1000120d:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001213:	50                   	push   eax
10001214:	e8 fc ff ff ff       	call   10001215 <createUser(char const*)+0x56>	10001215: R_386_PC32	strcat
10001219:	83 c4 10             	add    esp,0x10
1000121c:	83 ec 08             	sub    esp,0x8
1000121f:	68 c0 01 00 00       	push   0x1c0
10001224:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000122a:	50                   	push   eax
1000122b:	e8 fc ff ff ff       	call   1000122c <createUser(char const*)+0x6d>	1000122c: R_386_PC32	mkdir(char const*, int)
10001230:	83 c4 10             	add    esp,0x10
10001233:	83 ec 08             	sub    esp,0x8
10001236:	68 6a a5 00 10       	push   0x1000a56a	10001237: R_386_32	.text
1000123b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001241:	50                   	push   eax
10001242:	e8 fc ff ff ff       	call   10001243 <createUser(char const*)+0x84>	10001243: R_386_PC32	strcpy
10001247:	83 c4 10             	add    esp,0x10
1000124a:	83 ec 08             	sub    esp,0x8
1000124d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001250:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001256:	50                   	push   eax
10001257:	e8 fc ff ff ff       	call   10001258 <createUser(char const*)+0x99>	10001258: R_386_PC32	strcat
1000125c:	83 c4 10             	add    esp,0x10
1000125f:	83 ec 08             	sub    esp,0x8
10001262:	68 7d a5 00 10       	push   0x1000a57d	10001263: R_386_32	.text
10001267:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000126d:	50                   	push   eax
1000126e:	e8 fc ff ff ff       	call   1000126f <createUser(char const*)+0xb0>	1000126f: R_386_PC32	strcat
10001273:	83 c4 10             	add    esp,0x10
10001276:	83 ec 08             	sub    esp,0x8
10001279:	68 c0 01 00 00       	push   0x1c0
1000127e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001284:	50                   	push   eax
10001285:	e8 fc ff ff ff       	call   10001286 <createUser(char const*)+0xc7>	10001286: R_386_PC32	mkdir(char const*, int)
1000128a:	83 c4 10             	add    esp,0x10
1000128d:	83 ec 08             	sub    esp,0x8
10001290:	68 6a a5 00 10       	push   0x1000a56a	10001291: R_386_32	.text
10001295:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000129b:	50                   	push   eax
1000129c:	e8 fc ff ff ff       	call   1000129d <createUser(char const*)+0xde>	1000129d: R_386_PC32	strcpy
100012a1:	83 c4 10             	add    esp,0x10
100012a4:	83 ec 08             	sub    esp,0x8
100012a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100012aa:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012b0:	50                   	push   eax
100012b1:	e8 fc ff ff ff       	call   100012b2 <createUser(char const*)+0xf3>	100012b2: R_386_PC32	strcat
100012b6:	83 c4 10             	add    esp,0x10
100012b9:	83 ec 08             	sub    esp,0x8
100012bc:	68 88 a5 00 10       	push   0x1000a588	100012bd: R_386_32	.text
100012c1:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012c7:	50                   	push   eax
100012c8:	e8 fc ff ff ff       	call   100012c9 <createUser(char const*)+0x10a>	100012c9: R_386_PC32	strcat
100012cd:	83 c4 10             	add    esp,0x10
100012d0:	83 ec 08             	sub    esp,0x8
100012d3:	68 c0 01 00 00       	push   0x1c0
100012d8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012de:	50                   	push   eax
100012df:	e8 fc ff ff ff       	call   100012e0 <createUser(char const*)+0x121>	100012e0: R_386_PC32	mkdir(char const*, int)
100012e4:	83 c4 10             	add    esp,0x10
100012e7:	83 ec 08             	sub    esp,0x8
100012ea:	68 6a a5 00 10       	push   0x1000a56a	100012eb: R_386_32	.text
100012ef:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012f5:	50                   	push   eax
100012f6:	e8 fc ff ff ff       	call   100012f7 <createUser(char const*)+0x138>	100012f7: R_386_PC32	strcpy
100012fb:	83 c4 10             	add    esp,0x10
100012fe:	83 ec 08             	sub    esp,0x8
10001301:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001304:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000130a:	50                   	push   eax
1000130b:	e8 fc ff ff ff       	call   1000130c <createUser(char const*)+0x14d>	1000130c: R_386_PC32	strcat
10001310:	83 c4 10             	add    esp,0x10
10001313:	83 ec 08             	sub    esp,0x8
10001316:	68 93 a5 00 10       	push   0x1000a593	10001317: R_386_32	.text
1000131b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001321:	50                   	push   eax
10001322:	e8 fc ff ff ff       	call   10001323 <createUser(char const*)+0x164>	10001323: R_386_PC32	strcat
10001327:	83 c4 10             	add    esp,0x10
1000132a:	83 ec 08             	sub    esp,0x8
1000132d:	68 c0 01 00 00       	push   0x1c0
10001332:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001338:	50                   	push   eax
10001339:	e8 fc ff ff ff       	call   1000133a <createUser(char const*)+0x17b>	1000133a: R_386_PC32	mkdir(char const*, int)
1000133e:	83 c4 10             	add    esp,0x10
10001341:	83 ec 08             	sub    esp,0x8
10001344:	68 6a a5 00 10       	push   0x1000a56a	10001345: R_386_32	.text
10001349:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000134f:	50                   	push   eax
10001350:	e8 fc ff ff ff       	call   10001351 <createUser(char const*)+0x192>	10001351: R_386_PC32	strcpy
10001355:	83 c4 10             	add    esp,0x10
10001358:	83 ec 08             	sub    esp,0x8
1000135b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000135e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001364:	50                   	push   eax
10001365:	e8 fc ff ff ff       	call   10001366 <createUser(char const*)+0x1a7>	10001366: R_386_PC32	strcat
1000136a:	83 c4 10             	add    esp,0x10
1000136d:	83 ec 08             	sub    esp,0x8
10001370:	68 9d a5 00 10       	push   0x1000a59d	10001371: R_386_32	.text
10001375:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000137b:	50                   	push   eax
1000137c:	e8 fc ff ff ff       	call   1000137d <createUser(char const*)+0x1be>	1000137d: R_386_PC32	strcat
10001381:	83 c4 10             	add    esp,0x10
10001384:	83 ec 08             	sub    esp,0x8
10001387:	68 c0 01 00 00       	push   0x1c0
1000138c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001392:	50                   	push   eax
10001393:	e8 fc ff ff ff       	call   10001394 <createUser(char const*)+0x1d5>	10001394: R_386_PC32	mkdir(char const*, int)
10001398:	83 c4 10             	add    esp,0x10
1000139b:	83 ec 08             	sub    esp,0x8
1000139e:	68 6a a5 00 10       	push   0x1000a56a	1000139f: R_386_32	.text
100013a3:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013a9:	50                   	push   eax
100013aa:	e8 fc ff ff ff       	call   100013ab <createUser(char const*)+0x1ec>	100013ab: R_386_PC32	strcpy
100013af:	83 c4 10             	add    esp,0x10
100013b2:	83 ec 08             	sub    esp,0x8
100013b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100013b8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013be:	50                   	push   eax
100013bf:	e8 fc ff ff ff       	call   100013c0 <createUser(char const*)+0x201>	100013c0: R_386_PC32	strcat
100013c4:	83 c4 10             	add    esp,0x10
100013c7:	83 ec 08             	sub    esp,0x8
100013ca:	68 a8 a5 00 10       	push   0x1000a5a8	100013cb: R_386_32	.text
100013cf:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013d5:	50                   	push   eax
100013d6:	e8 fc ff ff ff       	call   100013d7 <createUser(char const*)+0x218>	100013d7: R_386_PC32	strcat
100013db:	83 c4 10             	add    esp,0x10
100013de:	83 ec 08             	sub    esp,0x8
100013e1:	68 c0 01 00 00       	push   0x1c0
100013e6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013ec:	50                   	push   eax
100013ed:	e8 fc ff ff ff       	call   100013ee <createUser(char const*)+0x22f>	100013ee: R_386_PC32	mkdir(char const*, int)
100013f2:	83 c4 10             	add    esp,0x10
100013f5:	83 ec 08             	sub    esp,0x8
100013f8:	68 6a a5 00 10       	push   0x1000a56a	100013f9: R_386_32	.text
100013fd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001403:	50                   	push   eax
10001404:	e8 fc ff ff ff       	call   10001405 <createUser(char const*)+0x246>	10001405: R_386_PC32	strcpy
10001409:	83 c4 10             	add    esp,0x10
1000140c:	83 ec 08             	sub    esp,0x8
1000140f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001412:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001418:	50                   	push   eax
10001419:	e8 fc ff ff ff       	call   1000141a <createUser(char const*)+0x25b>	1000141a: R_386_PC32	strcat
1000141e:	83 c4 10             	add    esp,0x10
10001421:	83 ec 08             	sub    esp,0x8
10001424:	68 af a5 00 10       	push   0x1000a5af	10001425: R_386_32	.text
10001429:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000142f:	50                   	push   eax
10001430:	e8 fc ff ff ff       	call   10001431 <createUser(char const*)+0x272>	10001431: R_386_PC32	strcat
10001435:	83 c4 10             	add    esp,0x10
10001438:	83 ec 08             	sub    esp,0x8
1000143b:	68 c0 01 00 00       	push   0x1c0
10001440:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001446:	50                   	push   eax
10001447:	e8 fc ff ff ff       	call   10001448 <createUser(char const*)+0x289>	10001448: R_386_PC32	mkdir(char const*, int)
1000144c:	83 c4 10             	add    esp,0x10
1000144f:	83 ec 08             	sub    esp,0x8
10001452:	68 b7 a5 00 10       	push   0x1000a5b7	10001453: R_386_32	.text
10001457:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000145d:	50                   	push   eax
1000145e:	e8 fc ff ff ff       	call   1000145f <createUser(char const*)+0x2a0>	1000145f: R_386_PC32	strcpy
10001463:	83 c4 10             	add    esp,0x10
10001466:	83 ec 08             	sub    esp,0x8
10001469:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000146c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001472:	50                   	push   eax
10001473:	e8 fc ff ff ff       	call   10001474 <createUser(char const*)+0x2b5>	10001474: R_386_PC32	strcat
10001478:	83 c4 10             	add    esp,0x10
1000147b:	83 ec 08             	sub    esp,0x8
1000147e:	68 c0 01 00 00       	push   0x1c0
10001483:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001489:	50                   	push   eax
1000148a:	e8 fc ff ff ff       	call   1000148b <createUser(char const*)+0x2cc>	1000148b: R_386_PC32	mkdir(char const*, int)
1000148f:	83 c4 10             	add    esp,0x10
10001492:	83 ec 08             	sub    esp,0x8
10001495:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000149b:	50                   	push   eax
1000149c:	68 d0 a5 00 10       	push   0x1000a5d0	1000149d: R_386_32	.text
100014a1:	e8 fc ff ff ff       	call   100014a2 <createUser(char const*)+0x2e3>	100014a2: R_386_PC32	copytree(char*, char*)
100014a6:	83 c4 10             	add    esp,0x10
100014a9:	90                   	nop
100014aa:	c9                   	leave  
100014ab:	c3                   	ret    

100014ac <drawBootScreen()>:
100014ac:	55                   	push   ebp
100014ad:	89 e5                	mov    ebp,esp
100014af:	83 ec 18             	sub    esp,0x18
100014b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100014b3: R_386_32	term
100014b7:	83 ec 08             	sub    esp,0x8
100014ba:	6a 0b                	push   0xb
100014bc:	50                   	push   eax
100014bd:	e8 fc ff ff ff       	call   100014be <drawBootScreen()+0x12>	100014be: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
100014c2:	83 c4 10             	add    esp,0x10
100014c5:	a1 00 00 00 00       	mov    eax,ds:0x0	100014c6: R_386_32	term
100014ca:	83 ec 08             	sub    esp,0x8
100014cd:	6a 00                	push   0x0
100014cf:	50                   	push   eax
100014d0:	e8 fc ff ff ff       	call   100014d1 <drawBootScreen()+0x25>	100014d1: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
100014d5:	83 c4 10             	add    esp,0x10
100014d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100014d9: R_386_32	term
100014dd:	83 ec 0c             	sub    esp,0xc
100014e0:	50                   	push   eax
100014e1:	e8 fc ff ff ff       	call   100014e2 <drawBootScreen()+0x36>	100014e2: R_386_PC32	VgaText::clearScreen()
100014e6:	83 c4 10             	add    esp,0x10
100014e9:	a1 00 00 00 00       	mov    eax,ds:0x0	100014ea: R_386_32	term
100014ee:	83 ec 08             	sub    esp,0x8
100014f1:	68 ef a5 00 10       	push   0x1000a5ef	100014f2: R_386_32	.text
100014f6:	50                   	push   eax
100014f7:	e8 fc ff ff ff       	call   100014f8 <drawBootScreen()+0x4c>	100014f8: R_386_PC32	VgaText::setTitle(char*)
100014fc:	83 c4 10             	add    esp,0x10
100014ff:	a1 00 00 00 00       	mov    eax,ds:0x0	10001500: R_386_32	term
10001504:	83 ec 08             	sub    esp,0x8
10001507:	6a 00                	push   0x0
10001509:	50                   	push   eax
1000150a:	e8 fc ff ff ff       	call   1000150b <drawBootScreen()+0x5f>	1000150b: R_386_PC32	VgaText::setTitleColour(VgaColour)
1000150f:	83 c4 10             	add    esp,0x10
10001512:	a1 00 00 00 00       	mov    eax,ds:0x0	10001513: R_386_32	term
10001517:	83 ec 08             	sub    esp,0x8
1000151a:	6a 00                	push   0x0
1000151c:	50                   	push   eax
1000151d:	e8 fc ff ff ff       	call   1000151e <drawBootScreen()+0x72>	1000151e: R_386_PC32	VgaText::setTitleTextColour(VgaColour)
10001522:	83 c4 10             	add    esp,0x10
10001525:	a1 00 00 00 00       	mov    eax,ds:0x0	10001526: R_386_32	term
1000152a:	83 ec 04             	sub    esp,0x4
1000152d:	6a 00                	push   0x0
1000152f:	6a 00                	push   0x0
10001531:	50                   	push   eax
10001532:	e8 fc ff ff ff       	call   10001533 <drawBootScreen()+0x87>	10001533: R_386_PC32	VgaText::setCursor(int, int)
10001537:	83 c4 10             	add    esp,0x10
1000153a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001541:	83 7d f4 4f          	cmp    DWORD PTR [ebp-0xc],0x4f
10001545:	7f 19                	jg     10001560 <drawBootScreen()+0xb4>
10001547:	a1 00 00 00 00       	mov    eax,ds:0x0	10001548: R_386_32	term
1000154c:	6a 00                	push   0x0
1000154e:	6a 00                	push   0x0
10001550:	6a 20                	push   0x20
10001552:	50                   	push   eax
10001553:	e8 fc ff ff ff       	call   10001554 <drawBootScreen()+0xa8>	10001554: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001558:	83 c4 10             	add    esp,0x10
1000155b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000155e:	eb e1                	jmp    10001541 <drawBootScreen()+0x95>
10001560:	a0 00 00 00 00       	mov    al,ds:0x0	10001561: R_386_32	showSidebar
10001565:	84 c0                	test   al,al
10001567:	0f 84 91 00 00 00    	je     100015fe <drawBootScreen()+0x152>
1000156d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10001574:	83 7d f0 18          	cmp    DWORD PTR [ebp-0x10],0x18
10001578:	7f 41                	jg     100015bb <drawBootScreen()+0x10f>
1000157a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000157b: R_386_32	term
1000157f:	83 ec 04             	sub    esp,0x4
10001582:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001585:	6a 00                	push   0x0
10001587:	50                   	push   eax
10001588:	e8 fc ff ff ff       	call   10001589 <drawBootScreen()+0xdd>	10001589: R_386_PC32	VgaText::setCursor(int, int)
1000158d:	83 c4 10             	add    esp,0x10
10001590:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001597:	83 7d ec 0f          	cmp    DWORD PTR [ebp-0x14],0xf
1000159b:	7f 19                	jg     100015b6 <drawBootScreen()+0x10a>
1000159d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000159e: R_386_32	term
100015a2:	6a 00                	push   0x0
100015a4:	6a 00                	push   0x0
100015a6:	6a 20                	push   0x20
100015a8:	50                   	push   eax
100015a9:	e8 fc ff ff ff       	call   100015aa <drawBootScreen()+0xfe>	100015aa: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100015ae:	83 c4 10             	add    esp,0x10
100015b1:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100015b4:	eb e1                	jmp    10001597 <drawBootScreen()+0xeb>
100015b6:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100015b9:	eb b9                	jmp    10001574 <drawBootScreen()+0xc8>
100015bb:	a1 00 00 00 00       	mov    eax,ds:0x0	100015bc: R_386_32	term
100015c0:	83 ec 04             	sub    esp,0x4
100015c3:	6a 01                	push   0x1
100015c5:	6a 01                	push   0x1
100015c7:	50                   	push   eax
100015c8:	e8 fc ff ff ff       	call   100015c9 <drawBootScreen()+0x11d>	100015c9: R_386_PC32	VgaText::setCursor(int, int)
100015cd:	83 c4 10             	add    esp,0x10
100015d0:	a1 00 00 00 00       	mov    eax,ds:0x0	100015d1: R_386_32	term
100015d5:	6a 00                	push   0x0
100015d7:	6a 0f                	push   0xf
100015d9:	68 f0 a5 00 10       	push   0x1000a5f0	100015da: R_386_32	.text
100015de:	50                   	push   eax
100015df:	e8 fc ff ff ff       	call   100015e0 <drawBootScreen()+0x134>	100015e0: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015e4:	83 c4 10             	add    esp,0x10
100015e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100015e8: R_386_32	term
100015ec:	6a 00                	push   0x0
100015ee:	6a 0e                	push   0xe
100015f0:	68 73 a6 00 10       	push   0x1000a673	100015f1: R_386_32	.text
100015f5:	50                   	push   eax
100015f6:	e8 fc ff ff ff       	call   100015f7 <drawBootScreen()+0x14b>	100015f7: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015fb:	83 c4 10             	add    esp,0x10
100015fe:	a1 00 00 00 00       	mov    eax,ds:0x0	100015ff: R_386_32	term
10001603:	83 ec 08             	sub    esp,0x8
10001606:	6a 0f                	push   0xf
10001608:	50                   	push   eax
10001609:	e8 fc ff ff ff       	call   1000160a <drawBootScreen()+0x15e>	1000160a: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
1000160e:	83 c4 10             	add    esp,0x10
10001611:	a1 00 00 00 00       	mov    eax,ds:0x0	10001612: R_386_32	term
10001616:	83 ec 08             	sub    esp,0x8
10001619:	6a 00                	push   0x0
1000161b:	50                   	push   eax
1000161c:	e8 fc ff ff ff       	call   1000161d <drawBootScreen()+0x171>	1000161d: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
10001621:	83 c4 10             	add    esp,0x10
10001624:	90                   	nop
10001625:	c9                   	leave  
10001626:	c3                   	ret    

10001627 <drawBasicWindowX(int, int, int, int, char const*, bool)>:
10001627:	55                   	push   ebp
10001628:	89 e5                	mov    ebp,esp
1000162a:	53                   	push   ebx
1000162b:	83 ec 34             	sub    esp,0x34
1000162e:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001631:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
10001634:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10001637:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000163e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10001641:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
10001644:	7d 6c                	jge    100016b2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x8b>
10001646:	a1 00 00 00 00       	mov    eax,ds:0x0	10001647: R_386_32	term
1000164b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
1000164e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001651:	01 ca                	add    edx,ecx
10001653:	83 ec 04             	sub    esp,0x4
10001656:	52                   	push   edx
10001657:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000165a:	50                   	push   eax
1000165b:	e8 fc ff ff ff       	call   1000165c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x35>	1000165c: R_386_PC32	VgaText::setCursor(int, int)
10001660:	83 c4 10             	add    esp,0x10
10001663:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000166a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000166d:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10001670:	7d 3b                	jge    100016ad <drawBasicWindowX(int, int, int, int, char const*, bool)+0x86>
10001672:	a1 00 00 00 00       	mov    eax,ds:0x0	10001673: R_386_32	term
10001677:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000167b:	74 07                	je     10001684 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x5d>
1000167d:	b9 07 00 00 00       	mov    ecx,0x7
10001682:	eb 05                	jmp    10001689 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x62>
10001684:	b9 0f 00 00 00       	mov    ecx,0xf
10001689:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000168d:	74 07                	je     10001696 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x6f>
1000168f:	ba 07 00 00 00       	mov    edx,0x7
10001694:	eb 05                	jmp    1000169b <drawBasicWindowX(int, int, int, int, char const*, bool)+0x74>
10001696:	ba 0f 00 00 00       	mov    edx,0xf
1000169b:	51                   	push   ecx
1000169c:	52                   	push   edx
1000169d:	6a 20                	push   0x20
1000169f:	50                   	push   eax
100016a0:	e8 fc ff ff ff       	call   100016a1 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x7a>	100016a1: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100016a5:	83 c4 10             	add    esp,0x10
100016a8:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100016ab:	eb bd                	jmp    1000166a <drawBasicWindowX(int, int, int, int, char const*, bool)+0x43>
100016ad:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100016b0:	eb 8c                	jmp    1000163e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17>
100016b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100016b3: R_386_32	term
100016b7:	83 ec 04             	sub    esp,0x4
100016ba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100016bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100016c0:	50                   	push   eax
100016c1:	e8 fc ff ff ff       	call   100016c2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x9b>	100016c2: R_386_PC32	VgaText::setCursor(int, int)
100016c6:	83 c4 10             	add    esp,0x10
100016c9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100016d0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100016d3:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
100016d6:	7d 19                	jge    100016f1 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xca>
100016d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100016d9: R_386_32	term
100016dd:	6a 01                	push   0x1
100016df:	6a 01                	push   0x1
100016e1:	6a 20                	push   0x20
100016e3:	50                   	push   eax
100016e4:	e8 fc ff ff ff       	call   100016e5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xbe>	100016e5: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100016e9:	83 c4 10             	add    esp,0x10
100016ec:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100016ef:	eb df                	jmp    100016d0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xa9>
100016f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100016f2: R_386_32	term
100016f6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100016f9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
100016fc:	01 d1                	add    ecx,edx
100016fe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001701:	42                   	inc    edx
10001702:	83 ec 04             	sub    esp,0x4
10001705:	51                   	push   ecx
10001706:	52                   	push   edx
10001707:	50                   	push   eax
10001708:	e8 fc ff ff ff       	call   10001709 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xe2>	10001709: R_386_PC32	VgaText::setCursor(int, int)
1000170d:	83 c4 10             	add    esp,0x10
10001710:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10001717:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000171a:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
1000171d:	7d 19                	jge    10001738 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x111>
1000171f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001720: R_386_32	term
10001724:	6a 03                	push   0x3
10001726:	6a 03                	push   0x3
10001728:	6a 20                	push   0x20
1000172a:	50                   	push   eax
1000172b:	e8 fc ff ff ff       	call   1000172c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x105>	1000172c: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001730:	83 c4 10             	add    esp,0x10
10001733:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
10001736:	eb df                	jmp    10001717 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xf0>
10001738:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000173b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
1000173e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001741:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001744:	01 d0                	add    eax,edx
10001746:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001749:	0f 8d 89 00 00 00    	jge    100017d8 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1b1>
1000174f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001750: R_386_32	term
10001754:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001757:	8d 4a 01             	lea    ecx,[edx+0x1]
1000175a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
1000175d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001760:	01 da                	add    edx,ebx
10001762:	83 ec 04             	sub    esp,0x4
10001765:	51                   	push   ecx
10001766:	52                   	push   edx
10001767:	50                   	push   eax
10001768:	e8 fc ff ff ff       	call   10001769 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x142>	10001769: R_386_PC32	VgaText::setCursor(int, int)
1000176d:	83 c4 10             	add    esp,0x10
10001770:	a1 00 00 00 00       	mov    eax,ds:0x0	10001771: R_386_32	term
10001775:	6a 03                	push   0x3
10001777:	6a 03                	push   0x3
10001779:	6a 20                	push   0x20
1000177b:	50                   	push   eax
1000177c:	e8 fc ff ff ff       	call   1000177d <drawBasicWindowX(int, int, int, int, char const*, bool)+0x156>	1000177d: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001781:	83 c4 10             	add    esp,0x10
10001784:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001787:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000178a:	01 d0                	add    eax,edx
1000178c:	48                   	dec    eax
1000178d:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001790:	74 3e                	je     100017d0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a9>
10001792:	a1 00 00 00 00       	mov    eax,ds:0x0	10001793: R_386_32	term
10001797:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000179a:	42                   	inc    edx
1000179b:	83 ec 04             	sub    esp,0x4
1000179e:	52                   	push   edx
1000179f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100017a2:	50                   	push   eax
100017a3:	e8 fc ff ff ff       	call   100017a4 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17d>	100017a4: R_386_PC32	VgaText::setCursor(int, int)
100017a8:	83 c4 10             	add    esp,0x10
100017ab:	a1 00 00 00 00       	mov    eax,ds:0x0	100017ac: R_386_32	term
100017b0:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
100017b4:	74 07                	je     100017bd <drawBasicWindowX(int, int, int, int, char const*, bool)+0x196>
100017b6:	ba 07 00 00 00       	mov    edx,0x7
100017bb:	eb 05                	jmp    100017c2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x19b>
100017bd:	ba 0f 00 00 00       	mov    edx,0xf
100017c2:	52                   	push   edx
100017c3:	6a 00                	push   0x0
100017c5:	6a dd                	push   0xffffffdd
100017c7:	50                   	push   eax
100017c8:	e8 fc ff ff ff       	call   100017c9 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a2>	100017c9: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100017cd:	83 c4 10             	add    esp,0x10
100017d0:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100017d3:	e9 66 ff ff ff       	jmp    1000173e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x117>
100017d8:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100017db:	83 ec 0c             	sub    esp,0xc
100017de:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100017e1:	e8 fc ff ff ff       	call   100017e2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1bb>	100017e2: R_386_PC32	strlen
100017e6:	83 c4 10             	add    esp,0x10
100017e9:	29 c3                	sub    ebx,eax
100017eb:	89 d8                	mov    eax,ebx
100017ed:	d1 e8                	shr    eax,1
100017ef:	48                   	dec    eax
100017f0:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100017f3:	a1 00 00 00 00       	mov    eax,ds:0x0	100017f4: R_386_32	term
100017f8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100017fb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100017fe:	01 ca                	add    edx,ecx
10001800:	83 ec 04             	sub    esp,0x4
10001803:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001806:	52                   	push   edx
10001807:	50                   	push   eax
10001808:	e8 fc ff ff ff       	call   10001809 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1e2>	10001809: R_386_PC32	VgaText::setCursor(int, int)
1000180d:	83 c4 10             	add    esp,0x10
10001810:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10001817:	83 ec 0c             	sub    esp,0xc
1000181a:	ff 75 18             	push   DWORD PTR [ebp+0x18]
1000181d:	e8 fc ff ff ff       	call   1000181e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f7>	1000181e: R_386_PC32	strlen
10001822:	83 c4 10             	add    esp,0x10
10001825:	89 c2                	mov    edx,eax
10001827:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000182a:	39 c2                	cmp    edx,eax
1000182c:	76 25                	jbe    10001853 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x22c>
1000182e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000182f: R_386_32	term
10001833:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001836:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10001839:	01 ca                	add    edx,ecx
1000183b:	8a 12                	mov    dl,BYTE PTR [edx]
1000183d:	0f be d2             	movsx  edx,dl
10001840:	6a 01                	push   0x1
10001842:	6a 0f                	push   0xf
10001844:	52                   	push   edx
10001845:	50                   	push   eax
10001846:	e8 fc ff ff ff       	call   10001847 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x220>	10001847: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000184b:	83 c4 10             	add    esp,0x10
1000184e:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10001851:	eb c4                	jmp    10001817 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f0>
10001853:	90                   	nop
10001854:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10001857:	c9                   	leave  
10001858:	c3                   	ret    

10001859 <drawBasicWindow(int, int, int, int, char const*)>:
10001859:	55                   	push   ebp
1000185a:	89 e5                	mov    ebp,esp
1000185c:	83 ec 08             	sub    esp,0x8
1000185f:	83 ec 08             	sub    esp,0x8
10001862:	6a 00                	push   0x0
10001864:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10001867:	ff 75 14             	push   DWORD PTR [ebp+0x14]
1000186a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000186d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001870:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001873:	e8 fc ff ff ff       	call   10001874 <drawBasicWindow(int, int, int, int, char const*)+0x1b>	10001874: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10001878:	83 c4 20             	add    esp,0x20
1000187b:	90                   	nop
1000187c:	c9                   	leave  
1000187d:	c3                   	ret    

1000187e <bootInstallKeybrd(KeyboardToken, bool*)>:
1000187e:	55                   	push   ebp
1000187f:	89 e5                	mov    ebp,esp
10001881:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001884:	05 04 01 00 00       	add    eax,0x104
10001889:	8a 00                	mov    al,BYTE PTR [eax]
1000188b:	84 c0                	test   al,al
1000188d:	74 15                	je     100018a4 <bootInstallKeybrd(KeyboardToken, bool*)+0x26>
1000188f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001892:	66 83 f8 09          	cmp    ax,0x9
10001896:	75 0c                	jne    100018a4 <bootInstallKeybrd(KeyboardToken, bool*)+0x26>
10001898:	c6 05 00 00 00 00 7f 	mov    BYTE PTR ds:0x0,0x7f	1000189a: R_386_32	installKey
1000189f:	e9 94 00 00 00       	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018a4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
100018a7:	84 c0                	test   al,al
100018a9:	0f 85 88 00 00 00    	jne    10001937 <bootInstallKeybrd(KeyboardToken, bool*)+0xb9>
100018af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018b2:	66 3d 0a 02          	cmp    ax,0x20a
100018b6:	75 09                	jne    100018c1 <bootInstallKeybrd(KeyboardToken, bool*)+0x43>
100018b8:	c6 05 00 00 00 00 1b 	mov    BYTE PTR ds:0x0,0x1b	100018ba: R_386_32	installKey
100018bf:	eb 77                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018c4:	66 3d 0d 02          	cmp    ax,0x20d
100018c8:	75 09                	jne    100018d3 <bootInstallKeybrd(KeyboardToken, bool*)+0x55>
100018ca:	c6 05 00 00 00 00 03 	mov    BYTE PTR ds:0x0,0x3	100018cc: R_386_32	installKey
100018d1:	eb 65                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018d6:	66 3d 0e 02          	cmp    ax,0x20e
100018da:	75 09                	jne    100018e5 <bootInstallKeybrd(KeyboardToken, bool*)+0x67>
100018dc:	c6 05 00 00 00 00 04 	mov    BYTE PTR ds:0x0,0x4	100018de: R_386_32	installKey
100018e3:	eb 53                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018e8:	66 3d 0b 02          	cmp    ax,0x20b
100018ec:	75 09                	jne    100018f7 <bootInstallKeybrd(KeyboardToken, bool*)+0x79>
100018ee:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100018f0: R_386_32	installKey
100018f5:	eb 41                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018fa:	66 3d 0c 02          	cmp    ax,0x20c
100018fe:	75 09                	jne    10001909 <bootInstallKeybrd(KeyboardToken, bool*)+0x8b>
10001900:	c6 05 00 00 00 00 02 	mov    BYTE PTR ds:0x0,0x2	10001902: R_386_32	installKey
10001907:	eb 2f                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
10001909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000190c:	66 3d 05 02          	cmp    ax,0x205
10001910:	75 09                	jne    1000191b <bootInstallKeybrd(KeyboardToken, bool*)+0x9d>
10001912:	c6 05 00 00 00 00 7d 	mov    BYTE PTR ds:0x0,0x7d	10001914: R_386_32	installKey
10001919:	eb 1d                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
1000191b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000191e:	66 3d 05 02          	cmp    ax,0x205
10001922:	75 09                	jne    1000192d <bootInstallKeybrd(KeyboardToken, bool*)+0xaf>
10001924:	c6 05 00 00 00 00 7e 	mov    BYTE PTR ds:0x0,0x7e	10001926: R_386_32	installKey
1000192b:	eb 0b                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
1000192d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001930:	a2 00 00 00 00       	mov    ds:0x0,al	10001931: R_386_32	installKey
10001935:	eb 01                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
10001937:	90                   	nop
10001938:	5d                   	pop    ebp
10001939:	c3                   	ret    

1000193a <bootInstallTasks(int)>:
1000193a:	55                   	push   ebp
1000193b:	89 e5                	mov    ebp,esp
1000193d:	83 ec 08             	sub    esp,0x8
10001940:	a1 00 00 00 00       	mov    eax,ds:0x0	10001941: R_386_32	term
10001945:	83 ec 04             	sub    esp,0x4
10001948:	6a 08                	push   0x8
1000194a:	6a 18                	push   0x18
1000194c:	50                   	push   eax
1000194d:	e8 fc ff ff ff       	call   1000194e <bootInstallTasks(int)+0x14>	1000194e: R_386_PC32	VgaText::setCursor(int, int)
10001952:	83 c4 10             	add    esp,0x10
10001955:	a1 00 00 00 00       	mov    eax,ds:0x0	10001956: R_386_32	term
1000195a:	83 ec 08             	sub    esp,0x8
1000195d:	68 94 a6 00 10       	push   0x1000a694	1000195e: R_386_32	.text
10001962:	50                   	push   eax
10001963:	e8 fc ff ff ff       	call   10001964 <bootInstallTasks(int)+0x2a>	10001964: R_386_PC32	VgaText::puts(char const*)
10001968:	83 c4 10             	add    esp,0x10
1000196b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000196c: R_386_32	term
10001970:	83 ec 04             	sub    esp,0x4
10001973:	6a 0a                	push   0xa
10001975:	6a 1a                	push   0x1a
10001977:	50                   	push   eax
10001978:	e8 fc ff ff ff       	call   10001979 <bootInstallTasks(int)+0x3f>	10001979: R_386_PC32	VgaText::setCursor(int, int)
1000197d:	83 c4 10             	add    esp,0x10
10001980:	a1 00 00 00 00       	mov    eax,ds:0x0	10001981: R_386_32	term
10001985:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001989:	75 07                	jne    10001992 <bootInstallTasks(int)+0x58>
1000198b:	ba bc a6 00 10       	mov    edx,0x1000a6bc	1000198c: R_386_32	.text
10001990:	eb 05                	jmp    10001997 <bootInstallTasks(int)+0x5d>
10001992:	ba bf a6 00 10       	mov    edx,0x1000a6bf	10001993: R_386_32	.text
10001997:	83 ec 08             	sub    esp,0x8
1000199a:	52                   	push   edx
1000199b:	50                   	push   eax
1000199c:	e8 fc ff ff ff       	call   1000199d <bootInstallTasks(int)+0x63>	1000199d: R_386_PC32	VgaText::puts(char const*)
100019a1:	83 c4 10             	add    esp,0x10
100019a4:	a1 00 00 00 00       	mov    eax,ds:0x0	100019a5: R_386_32	term
100019a9:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
100019ad:	78 07                	js     100019b6 <bootInstallTasks(int)+0x7c>
100019af:	ba 00 00 00 00       	mov    edx,0x0
100019b4:	eb 05                	jmp    100019bb <bootInstallTasks(int)+0x81>
100019b6:	ba 07 00 00 00       	mov    edx,0x7
100019bb:	6a 0f                	push   0xf
100019bd:	52                   	push   edx
100019be:	68 c2 a6 00 10       	push   0x1000a6c2	100019bf: R_386_32	.text
100019c3:	50                   	push   eax
100019c4:	e8 fc ff ff ff       	call   100019c5 <bootInstallTasks(int)+0x8b>	100019c5: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100019c9:	83 c4 10             	add    esp,0x10
100019cc:	a1 00 00 00 00       	mov    eax,ds:0x0	100019cd: R_386_32	term
100019d1:	83 ec 04             	sub    esp,0x4
100019d4:	6a 0b                	push   0xb
100019d6:	6a 1a                	push   0x1a
100019d8:	50                   	push   eax
100019d9:	e8 fc ff ff ff       	call   100019da <bootInstallTasks(int)+0xa0>	100019da: R_386_PC32	VgaText::setCursor(int, int)
100019de:	83 c4 10             	add    esp,0x10
100019e1:	a1 00 00 00 00       	mov    eax,ds:0x0	100019e2: R_386_32	term
100019e6:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
100019ea:	75 07                	jne    100019f3 <bootInstallTasks(int)+0xb9>
100019ec:	ba bc a6 00 10       	mov    edx,0x1000a6bc	100019ed: R_386_32	.text
100019f1:	eb 05                	jmp    100019f8 <bootInstallTasks(int)+0xbe>
100019f3:	ba bf a6 00 10       	mov    edx,0x1000a6bf	100019f4: R_386_32	.text
100019f8:	83 ec 08             	sub    esp,0x8
100019fb:	52                   	push   edx
100019fc:	50                   	push   eax
100019fd:	e8 fc ff ff ff       	call   100019fe <bootInstallTasks(int)+0xc4>	100019fe: R_386_PC32	VgaText::puts(char const*)
10001a02:	83 c4 10             	add    esp,0x10
10001a05:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a06: R_386_32	term
10001a0a:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001a0e:	7e 07                	jle    10001a17 <bootInstallTasks(int)+0xdd>
10001a10:	ba 00 00 00 00       	mov    edx,0x0
10001a15:	eb 05                	jmp    10001a1c <bootInstallTasks(int)+0xe2>
10001a17:	ba 07 00 00 00       	mov    edx,0x7
10001a1c:	6a 0f                	push   0xf
10001a1e:	52                   	push   edx
10001a1f:	68 da a6 00 10       	push   0x1000a6da	10001a20: R_386_32	.text
10001a24:	50                   	push   eax
10001a25:	e8 fc ff ff ff       	call   10001a26 <bootInstallTasks(int)+0xec>	10001a26: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a2a:	83 c4 10             	add    esp,0x10
10001a2d:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a2e: R_386_32	term
10001a32:	83 ec 04             	sub    esp,0x4
10001a35:	6a 0c                	push   0xc
10001a37:	6a 1a                	push   0x1a
10001a39:	50                   	push   eax
10001a3a:	e8 fc ff ff ff       	call   10001a3b <bootInstallTasks(int)+0x101>	10001a3b: R_386_PC32	VgaText::setCursor(int, int)
10001a3f:	83 c4 10             	add    esp,0x10
10001a42:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a43: R_386_32	term
10001a47:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10001a4b:	75 07                	jne    10001a54 <bootInstallTasks(int)+0x11a>
10001a4d:	ba bc a6 00 10       	mov    edx,0x1000a6bc	10001a4e: R_386_32	.text
10001a52:	eb 05                	jmp    10001a59 <bootInstallTasks(int)+0x11f>
10001a54:	ba bf a6 00 10       	mov    edx,0x1000a6bf	10001a55: R_386_32	.text
10001a59:	83 ec 08             	sub    esp,0x8
10001a5c:	52                   	push   edx
10001a5d:	50                   	push   eax
10001a5e:	e8 fc ff ff ff       	call   10001a5f <bootInstallTasks(int)+0x125>	10001a5f: R_386_PC32	VgaText::puts(char const*)
10001a63:	83 c4 10             	add    esp,0x10
10001a66:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a67: R_386_32	term
10001a6b:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
10001a6f:	7e 07                	jle    10001a78 <bootInstallTasks(int)+0x13e>
10001a71:	ba 00 00 00 00       	mov    edx,0x0
10001a76:	eb 05                	jmp    10001a7d <bootInstallTasks(int)+0x143>
10001a78:	ba 07 00 00 00       	mov    edx,0x7
10001a7d:	6a 0f                	push   0xf
10001a7f:	52                   	push   edx
10001a80:	68 f0 a6 00 10       	push   0x1000a6f0	10001a81: R_386_32	.text
10001a85:	50                   	push   eax
10001a86:	e8 fc ff ff ff       	call   10001a87 <bootInstallTasks(int)+0x14d>	10001a87: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a8b:	83 c4 10             	add    esp,0x10
10001a8e:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a8f: R_386_32	term
10001a93:	83 ec 04             	sub    esp,0x4
10001a96:	6a 0d                	push   0xd
10001a98:	6a 1a                	push   0x1a
10001a9a:	50                   	push   eax
10001a9b:	e8 fc ff ff ff       	call   10001a9c <bootInstallTasks(int)+0x162>	10001a9c: R_386_PC32	VgaText::setCursor(int, int)
10001aa0:	83 c4 10             	add    esp,0x10
10001aa3:	a1 00 00 00 00       	mov    eax,ds:0x0	10001aa4: R_386_32	term
10001aa8:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001aac:	75 07                	jne    10001ab5 <bootInstallTasks(int)+0x17b>
10001aae:	ba bc a6 00 10       	mov    edx,0x1000a6bc	10001aaf: R_386_32	.text
10001ab3:	eb 05                	jmp    10001aba <bootInstallTasks(int)+0x180>
10001ab5:	ba bf a6 00 10       	mov    edx,0x1000a6bf	10001ab6: R_386_32	.text
10001aba:	83 ec 08             	sub    esp,0x8
10001abd:	52                   	push   edx
10001abe:	50                   	push   eax
10001abf:	e8 fc ff ff ff       	call   10001ac0 <bootInstallTasks(int)+0x186>	10001ac0: R_386_PC32	VgaText::puts(char const*)
10001ac4:	83 c4 10             	add    esp,0x10
10001ac7:	a1 00 00 00 00       	mov    eax,ds:0x0	10001ac8: R_386_32	term
10001acc:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10001ad0:	7e 07                	jle    10001ad9 <bootInstallTasks(int)+0x19f>
10001ad2:	ba 00 00 00 00       	mov    edx,0x0
10001ad7:	eb 05                	jmp    10001ade <bootInstallTasks(int)+0x1a4>
10001ad9:	ba 07 00 00 00       	mov    edx,0x7
10001ade:	6a 0f                	push   0xf
10001ae0:	52                   	push   edx
10001ae1:	68 06 a7 00 10       	push   0x1000a706	10001ae2: R_386_32	.text
10001ae6:	50                   	push   eax
10001ae7:	e8 fc ff ff ff       	call   10001ae8 <bootInstallTasks(int)+0x1ae>	10001ae8: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001aec:	83 c4 10             	add    esp,0x10
10001aef:	a1 00 00 00 00       	mov    eax,ds:0x0	10001af0: R_386_32	term
10001af4:	83 ec 04             	sub    esp,0x4
10001af7:	6a 0e                	push   0xe
10001af9:	6a 1a                	push   0x1a
10001afb:	50                   	push   eax
10001afc:	e8 fc ff ff ff       	call   10001afd <bootInstallTasks(int)+0x1c3>	10001afd: R_386_PC32	VgaText::setCursor(int, int)
10001b01:	83 c4 10             	add    esp,0x10
10001b04:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b05: R_386_32	term
10001b09:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001b0d:	75 07                	jne    10001b16 <bootInstallTasks(int)+0x1dc>
10001b0f:	ba bc a6 00 10       	mov    edx,0x1000a6bc	10001b10: R_386_32	.text
10001b14:	eb 05                	jmp    10001b1b <bootInstallTasks(int)+0x1e1>
10001b16:	ba bf a6 00 10       	mov    edx,0x1000a6bf	10001b17: R_386_32	.text
10001b1b:	83 ec 08             	sub    esp,0x8
10001b1e:	52                   	push   edx
10001b1f:	50                   	push   eax
10001b20:	e8 fc ff ff ff       	call   10001b21 <bootInstallTasks(int)+0x1e7>	10001b21: R_386_PC32	VgaText::puts(char const*)
10001b25:	83 c4 10             	add    esp,0x10
10001b28:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b29: R_386_32	term
10001b2d:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001b31:	7e 07                	jle    10001b3a <bootInstallTasks(int)+0x200>
10001b33:	ba 00 00 00 00       	mov    edx,0x0
10001b38:	eb 05                	jmp    10001b3f <bootInstallTasks(int)+0x205>
10001b3a:	ba 07 00 00 00       	mov    edx,0x7
10001b3f:	6a 0f                	push   0xf
10001b41:	52                   	push   edx
10001b42:	68 1a a7 00 10       	push   0x1000a71a	10001b43: R_386_32	.text
10001b47:	50                   	push   eax
10001b48:	e8 fc ff ff ff       	call   10001b49 <bootInstallTasks(int)+0x20f>	10001b49: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001b4d:	83 c4 10             	add    esp,0x10
10001b50:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b51: R_386_32	term
10001b55:	83 ec 04             	sub    esp,0x4
10001b58:	6a 0f                	push   0xf
10001b5a:	6a 1a                	push   0x1a
10001b5c:	50                   	push   eax
10001b5d:	e8 fc ff ff ff       	call   10001b5e <bootInstallTasks(int)+0x224>	10001b5e: R_386_PC32	VgaText::setCursor(int, int)
10001b62:	83 c4 10             	add    esp,0x10
10001b65:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b66: R_386_32	term
10001b6a:	83 7d 08 05          	cmp    DWORD PTR [ebp+0x8],0x5
10001b6e:	75 07                	jne    10001b77 <bootInstallTasks(int)+0x23d>
10001b70:	ba bc a6 00 10       	mov    edx,0x1000a6bc	10001b71: R_386_32	.text
10001b75:	eb 05                	jmp    10001b7c <bootInstallTasks(int)+0x242>
10001b77:	ba bf a6 00 10       	mov    edx,0x1000a6bf	10001b78: R_386_32	.text
10001b7c:	83 ec 08             	sub    esp,0x8
10001b7f:	52                   	push   edx
10001b80:	50                   	push   eax
10001b81:	e8 fc ff ff ff       	call   10001b82 <bootInstallTasks(int)+0x248>	10001b82: R_386_PC32	VgaText::puts(char const*)
10001b86:	83 c4 10             	add    esp,0x10
10001b89:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b8a: R_386_32	term
10001b8e:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001b92:	7e 07                	jle    10001b9b <bootInstallTasks(int)+0x261>
10001b94:	ba 00 00 00 00       	mov    edx,0x0
10001b99:	eb 05                	jmp    10001ba0 <bootInstallTasks(int)+0x266>
10001b9b:	ba 07 00 00 00       	mov    edx,0x7
10001ba0:	6a 0f                	push   0xf
10001ba2:	52                   	push   edx
10001ba3:	68 32 a7 00 10       	push   0x1000a732	10001ba4: R_386_32	.text
10001ba8:	50                   	push   eax
10001ba9:	e8 fc ff ff ff       	call   10001baa <bootInstallTasks(int)+0x270>	10001baa: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001bae:	83 c4 10             	add    esp,0x10
10001bb1:	90                   	nop
10001bb2:	c9                   	leave  
10001bb3:	c3                   	ret    

10001bb4 <ror(unsigned long long, int, int)>:
10001bb4:	55                   	push   ebp
10001bb5:	89 e5                	mov    ebp,esp
10001bb7:	56                   	push   esi
10001bb8:	53                   	push   ebx
10001bb9:	83 ec 20             	sub    esp,0x20
10001bbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bbf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001bc2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001bc5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001bc8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001bcb:	ba 01 00 00 00       	mov    edx,0x1
10001bd0:	88 c1                	mov    cl,al
10001bd2:	d3 e2                	shl    edx,cl
10001bd4:	89 d0                	mov    eax,edx
10001bd6:	48                   	dec    eax
10001bd7:	99                   	cdq    
10001bd8:	89 c1                	mov    ecx,eax
10001bda:	23 4d e0             	and    ecx,DWORD PTR [ebp-0x20]
10001bdd:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001be0:	89 d0                	mov    eax,edx
10001be2:	23 45 e4             	and    eax,DWORD PTR [ebp-0x1c]
10001be5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001be8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10001beb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10001bee:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001bf1:	0f ad d0             	shrd   eax,edx,cl
10001bf4:	d3 ea                	shr    edx,cl
10001bf6:	f6 c1 20             	test   cl,0x20
10001bf9:	74 04                	je     10001bff <ror(unsigned long long, int, int)+0x4b>
10001bfb:	89 d0                	mov    eax,edx
10001bfd:	31 d2                	xor    edx,edx
10001bff:	89 c3                	mov    ebx,eax
10001c01:	89 d6                	mov    esi,edx
10001c03:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001c06:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
10001c09:	89 c1                	mov    ecx,eax
10001c0b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c0e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c11:	0f a5 c2             	shld   edx,eax,cl
10001c14:	d3 e0                	shl    eax,cl
10001c16:	f6 c1 20             	test   cl,0x20
10001c19:	74 04                	je     10001c1f <ror(unsigned long long, int, int)+0x6b>
10001c1b:	89 c2                	mov    edx,eax
10001c1d:	31 c0                	xor    eax,eax
10001c1f:	89 d1                	mov    ecx,edx
10001c21:	89 c2                	mov    edx,eax
10001c23:	89 d8                	mov    eax,ebx
10001c25:	09 d0                	or     eax,edx
10001c27:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001c2a:	89 f0                	mov    eax,esi
10001c2c:	09 c8                	or     eax,ecx
10001c2e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001c31:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001c34:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001c37:	83 c4 20             	add    esp,0x20
10001c3a:	5b                   	pop    ebx
10001c3b:	5e                   	pop    esi
10001c3c:	5d                   	pop    ebp
10001c3d:	c3                   	ret    

10001c3e <swapBits(unsigned long long, unsigned long long, unsigned long long)>:
10001c3e:	55                   	push   ebp
10001c3f:	89 e5                	mov    ebp,esp
10001c41:	56                   	push   esi
10001c42:	53                   	push   ebx
10001c43:	83 ec 40             	sub    esp,0x40
10001c46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c49:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001c4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001c4f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001c52:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001c55:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001c58:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001c5b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001c5e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001c61:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001c64:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001c67:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001c6a:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001c6d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c70:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c73:	0f ad d0             	shrd   eax,edx,cl
10001c76:	d3 ea                	shr    edx,cl
10001c78:	f6 c1 20             	test   cl,0x20
10001c7b:	74 04                	je     10001c81 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x43>
10001c7d:	89 d0                	mov    eax,edx
10001c7f:	31 d2                	xor    edx,edx
10001c81:	89 c3                	mov    ebx,eax
10001c83:	89 d6                	mov    esi,edx
10001c85:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001c88:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c8b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c8e:	0f ad d0             	shrd   eax,edx,cl
10001c91:	d3 ea                	shr    edx,cl
10001c93:	f6 c1 20             	test   cl,0x20
10001c96:	74 04                	je     10001c9c <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x5e>
10001c98:	89 d0                	mov    eax,edx
10001c9a:	31 d2                	xor    edx,edx
10001c9c:	89 d1                	mov    ecx,edx
10001c9e:	89 c2                	mov    edx,eax
10001ca0:	89 d8                	mov    eax,ebx
10001ca2:	31 d0                	xor    eax,edx
10001ca4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10001ca7:	89 f0                	mov    eax,esi
10001ca9:	31 c8                	xor    eax,ecx
10001cab:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001cae:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10001cb1:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10001cb4:	89 c6                	mov    esi,eax
10001cb6:	83 e6 01             	and    esi,0x1
10001cb9:	89 75 c8             	mov    DWORD PTR [ebp-0x38],esi
10001cbc:	89 d0                	mov    eax,edx
10001cbe:	83 e0 00             	and    eax,0x0
10001cc1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10001cc4:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10001cc7:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
10001cca:	89 c3                	mov    ebx,eax
10001ccc:	80 f7 00             	xor    bh,0x0
10001ccf:	89 5d b8             	mov    DWORD PTR [ebp-0x48],ebx
10001cd2:	89 d0                	mov    eax,edx
10001cd4:	80 f4 00             	xor    ah,0x0
10001cd7:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10001cda:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
10001cdd:	8b 4d bc             	mov    ecx,DWORD PTR [ebp-0x44]
10001ce0:	89 c8                	mov    eax,ecx
10001ce2:	09 d0                	or     eax,edx
10001ce4:	85 c0                	test   eax,eax
10001ce6:	74 62                	je     10001d4a <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x10c>
10001ce8:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001ceb:	b8 01 00 00 00       	mov    eax,0x1
10001cf0:	ba 00 00 00 00       	mov    edx,0x0
10001cf5:	0f a5 c2             	shld   edx,eax,cl
10001cf8:	d3 e0                	shl    eax,cl
10001cfa:	f6 c1 20             	test   cl,0x20
10001cfd:	74 04                	je     10001d03 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xc5>
10001cff:	89 c2                	mov    edx,eax
10001d01:	31 c0                	xor    eax,eax
10001d03:	89 c3                	mov    ebx,eax
10001d05:	89 d6                	mov    esi,edx
10001d07:	89 d8                	mov    eax,ebx
10001d09:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001d0c:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10001d0f:	89 f0                	mov    eax,esi
10001d11:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001d14:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10001d17:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001d1a:	b8 01 00 00 00       	mov    eax,0x1
10001d1f:	ba 00 00 00 00       	mov    edx,0x0
10001d24:	0f a5 c2             	shld   edx,eax,cl
10001d27:	d3 e0                	shl    eax,cl
10001d29:	f6 c1 20             	test   cl,0x20
10001d2c:	74 04                	je     10001d32 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xf4>
10001d2e:	89 c2                	mov    edx,eax
10001d30:	31 c0                	xor    eax,eax
10001d32:	89 c1                	mov    ecx,eax
10001d34:	89 d3                	mov    ebx,edx
10001d36:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001d39:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10001d3c:	89 c6                	mov    esi,eax
10001d3e:	31 ce                	xor    esi,ecx
10001d40:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
10001d43:	31 d3                	xor    ebx,edx
10001d45:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
10001d48:	eb 0c                	jmp    10001d56 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x118>
10001d4a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001d4d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001d50:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001d53:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10001d56:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001d59:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001d5c:	83 c4 40             	add    esp,0x40
10001d5f:	5b                   	pop    ebx
10001d60:	5e                   	pop    esi
10001d61:	5d                   	pop    ebp
10001d62:	c3                   	ret    

10001d63 <getChecksum(unsigned int)>:
10001d63:	55                   	push   ebp
10001d64:	89 e5                	mov    ebp,esp
10001d66:	56                   	push   esi
10001d67:	53                   	push   ebx
10001d68:	83 ec 20             	sub    esp,0x20
10001d6b:	66 c7 45 f6 49 4e    	mov    WORD PTR [ebp-0xa],0x4e49
10001d71:	66 c7 45 f4 79 6e    	mov    WORD PTR [ebp-0xc],0x6e79
10001d77:	66 c7 45 f2 67 61    	mov    WORD PTR [ebp-0xe],0x6167
10001d7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d80:	c1 e8 10             	shr    eax,0x10
10001d83:	89 c1                	mov    ecx,eax
10001d85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d88:	89 c2                	mov    edx,eax
10001d8a:	89 d0                	mov    eax,edx
10001d8c:	c1 e0 06             	shl    eax,0x6
10001d8f:	29 d0                	sub    eax,edx
10001d91:	c1 e0 04             	shl    eax,0x4
10001d94:	01 d0                	add    eax,edx
10001d96:	31 c8                	xor    eax,ecx
10001d98:	66 89 45 f0          	mov    WORD PTR [ebp-0x10],ax
10001d9c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001da0:	0f 84 b1 00 00 00    	je     10001e57 <getChecksum(unsigned int)+0xf4>
10001da6:	b8 f4 02 00 00       	mov    eax,0x2f4
10001dab:	ba 00 00 00 00       	mov    edx,0x0
10001db0:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001db3:	89 c3                	mov    ebx,eax
10001db5:	be 00 00 00 00       	mov    esi,0x0
10001dba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001dbd:	ba 00 00 00 00       	mov    edx,0x0
10001dc2:	6a 1d                	push   0x1d
10001dc4:	6a 05                	push   0x5
10001dc6:	52                   	push   edx
10001dc7:	50                   	push   eax
10001dc8:	e8 fc ff ff ff       	call   10001dc9 <getChecksum(unsigned int)+0x66>	10001dc9: R_386_PC32	ror(unsigned long long, int, int)
10001dcd:	83 c4 10             	add    esp,0x10
10001dd0:	05 52 3f 04 00       	add    eax,0x43f52
10001dd5:	83 d2 00             	adc    edx,0x0
10001dd8:	89 d9                	mov    ecx,ebx
10001dda:	31 c1                	xor    ecx,eax
10001ddc:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
10001ddf:	31 d6                	xor    esi,edx
10001de1:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
10001de4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10001de7:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001deb:	66 0f af c2          	imul   ax,dx
10001def:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
10001df3:	b8 ea 00 00 00       	mov    eax,0xea
10001df8:	ba 00 00 00 00       	mov    edx,0x0
10001dfd:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001e00:	89 c3                	mov    ebx,eax
10001e02:	be 00 00 00 00       	mov    esi,0x0
10001e07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e0a:	ba 00 00 00 00       	mov    edx,0x0
10001e0f:	6a 1f                	push   0x1f
10001e11:	6a 03                	push   0x3
10001e13:	52                   	push   edx
10001e14:	50                   	push   eax
10001e15:	e8 fc ff ff ff       	call   10001e16 <getChecksum(unsigned int)+0xb3>	10001e16: R_386_PC32	ror(unsigned long long, int, int)
10001e1a:	83 c4 10             	add    esp,0x10
10001e1d:	05 05 db 09 00       	add    eax,0x9db05
10001e22:	83 d2 00             	adc    edx,0x0
10001e25:	89 d9                	mov    ecx,ebx
10001e27:	31 c1                	xor    ecx,eax
10001e29:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
10001e2c:	31 d6                	xor    esi,edx
10001e2e:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
10001e31:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001e34:	66 29 45 f4          	sub    WORD PTR [ebp-0xc],ax
10001e38:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001e3c:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001e3f:	25 d2 04 00 00       	and    eax,0x4d2
10001e44:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001e48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e4b:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001e4f:	d1 6d 08             	shr    DWORD PTR [ebp+0x8],1
10001e52:	e9 45 ff ff ff       	jmp    10001d9c <getChecksum(unsigned int)+0x39>
10001e57:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001e5b:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001e5e:	66 33 45 f2          	xor    ax,WORD PTR [ebp-0xe]
10001e62:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001e65:	0f b7 c0             	movzx  eax,ax
10001e68:	25 ff 7f 00 00       	and    eax,0x7fff
10001e6d:	8d 65 f8             	lea    esp,[ebp-0x8]
10001e70:	5b                   	pop    ebx
10001e71:	5e                   	pop    esi
10001e72:	5d                   	pop    ebp
10001e73:	c3                   	ret    

10001e74 <createKey(char*, unsigned int)>:
10001e74:	55                   	push   ebp
10001e75:	89 e5                	mov    ebp,esp
10001e77:	53                   	push   ebx
10001e78:	83 ec 34             	sub    esp,0x34
10001e7b:	68 44 a7 00 10       	push   0x1000a744	10001e7c: R_386_32	.text
10001e80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e83:	e8 fc ff ff ff       	call   10001e84 <createKey(char*, unsigned int)+0x10>	10001e84: R_386_PC32	strcpy
10001e88:	83 c4 08             	add    esp,0x8
10001e8b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10001e8e:	bb 00 00 00 00       	mov    ebx,0x0
10001e93:	89 c8                	mov    eax,ecx
10001e95:	89 da                	mov    edx,ebx
10001e97:	0f a4 c2 0f          	shld   edx,eax,0xf
10001e9b:	c1 e0 0f             	shl    eax,0xf
10001e9e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ea1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ea4:	83 ec 04             	sub    esp,0x4
10001ea7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001eaa:	e8 fc ff ff ff       	call   10001eab <createKey(char*, unsigned int)+0x37>	10001eab: R_386_PC32	getChecksum(unsigned int)
10001eaf:	83 c4 08             	add    esp,0x8
10001eb2:	ba 00 00 00 00       	mov    edx,0x0
10001eb7:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
10001eba:	09 55 f4             	or     DWORD PTR [ebp-0xc],edx
10001ebd:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001ec4:	81 7d ec db 24 00 00 	cmp    DWORD PTR [ebp-0x14],0x24db
10001ecb:	7f 7f                	jg     10001f4c <createKey(char*, unsigned int)+0xd8>
10001ecd:	81 75 f0 95 38 e4 b5 	xor    DWORD PTR [ebp-0x10],0xb5e43895
10001ed4:	83 75 f4 37          	xor    DWORD PTR [ebp-0xc],0x37
10001ed8:	6a 00                	push   0x0
10001eda:	6a 08                	push   0x8
10001edc:	6a 00                	push   0x0
10001ede:	6a 03                	push   0x3
10001ee0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001ee3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001ee6:	e8 fc ff ff ff       	call   10001ee7 <createKey(char*, unsigned int)+0x73>	10001ee7: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001eeb:	83 c4 18             	add    esp,0x18
10001eee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ef1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ef4:	6a 00                	push   0x0
10001ef6:	6a 0c                	push   0xc
10001ef8:	6a 00                	push   0x0
10001efa:	6a 0d                	push   0xd
10001efc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001eff:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f02:	e8 fc ff ff ff       	call   10001f03 <createKey(char*, unsigned int)+0x8f>	10001f03: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001f07:	83 c4 18             	add    esp,0x18
10001f0a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f0d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f10:	6a 00                	push   0x0
10001f12:	6a 16                	push   0x16
10001f14:	6a 00                	push   0x0
10001f16:	6a 25                	push   0x25
10001f18:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001f1b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f1e:	e8 fc ff ff ff       	call   10001f1f <createKey(char*, unsigned int)+0xab>	10001f1f: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001f23:	83 c4 18             	add    esp,0x18
10001f26:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f29:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f2c:	6a 2a                	push   0x2a
10001f2e:	6a 13                	push   0x13
10001f30:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001f33:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f36:	e8 fc ff ff ff       	call   10001f37 <createKey(char*, unsigned int)+0xc3>	10001f37: R_386_PC32	ror(unsigned long long, int, int)
10001f3b:	83 c4 10             	add    esp,0x10
10001f3e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f41:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f44:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
10001f47:	e9 78 ff ff ff       	jmp    10001ec4 <createKey(char*, unsigned int)+0x50>
10001f4c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f4f:	83 e0 0f             	and    eax,0xf
10001f52:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001f55:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f58:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f5b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f5f:	c1 ea 04             	shr    edx,0x4
10001f62:	89 c1                	mov    ecx,eax
10001f64:	89 d3                	mov    ebx,edx
10001f66:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f69:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f6c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f6f:	83 e0 0f             	and    eax,0xf
10001f72:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001f75:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f78:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f7b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f7f:	c1 ea 04             	shr    edx,0x4
10001f82:	89 c1                	mov    ecx,eax
10001f84:	89 d3                	mov    ebx,edx
10001f86:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f89:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f8c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f8f:	83 e0 0f             	and    eax,0xf
10001f92:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001f95:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f98:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f9b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f9f:	c1 ea 04             	shr    edx,0x4
10001fa2:	89 c1                	mov    ecx,eax
10001fa4:	89 d3                	mov    ebx,edx
10001fa6:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fa9:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001fac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001faf:	25 ff 03 00 00       	and    eax,0x3ff
10001fb4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001fb7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fba:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001fbd:	0f ac d0 0a          	shrd   eax,edx,0xa
10001fc1:	c1 ea 0a             	shr    edx,0xa
10001fc4:	89 c1                	mov    ecx,eax
10001fc6:	89 d3                	mov    ebx,edx
10001fc8:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fcb:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001fce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fd1:	25 ff 03 00 00       	and    eax,0x3ff
10001fd6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001fd9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fdc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001fdf:	0f ac d0 0a          	shrd   eax,edx,0xa
10001fe3:	c1 ea 0a             	shr    edx,0xa
10001fe6:	89 c1                	mov    ecx,eax
10001fe8:	89 d3                	mov    ebx,edx
10001fea:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fed:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001ff0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ff3:	25 ff 03 00 00       	and    eax,0x3ff
10001ff8:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001ffb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ffe:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10002001:	0f ac d0 0a          	shrd   eax,edx,0xa
10002005:	c1 ea 0a             	shr    edx,0xa
10002008:	89 c1                	mov    ecx,eax
1000200a:	89 d3                	mov    ebx,edx
1000200c:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
1000200f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10002012:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10002015:	05 00 00 00 00       	add    eax,0x0	10002016: R_386_32	lookupA
1000201a:	8a 10                	mov    dl,BYTE PTR [eax]
1000201c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000201f:	88 10                	mov    BYTE PTR [eax],dl
10002021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002024:	8d 50 01             	lea    edx,[eax+0x1]
10002027:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000202a:	05 00 00 00 00       	add    eax,0x0	1000202b: R_386_32	lookupA
1000202f:	8a 00                	mov    al,BYTE PTR [eax]
10002031:	88 02                	mov    BYTE PTR [edx],al
10002033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002036:	8d 50 0f             	lea    edx,[eax+0xf]
10002039:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000203c:	05 00 00 00 00       	add    eax,0x0	1000203d: R_386_32	lookupA
10002041:	8a 00                	mov    al,BYTE PTR [eax]
10002043:	88 02                	mov    BYTE PTR [edx],al
10002045:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10002048:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
1000204d:	f7 e9                	imul   ecx
1000204f:	c1 fa 05             	sar    edx,0x5
10002052:	89 c8                	mov    eax,ecx
10002054:	c1 f8 1f             	sar    eax,0x1f
10002057:	29 c2                	sub    edx,eax
10002059:	89 d0                	mov    eax,edx
1000205b:	b9 0a 00 00 00       	mov    ecx,0xa
10002060:	99                   	cdq    
10002061:	f7 f9                	idiv   ecx
10002063:	89 d0                	mov    eax,edx
10002065:	8d 50 30             	lea    edx,[eax+0x30]
10002068:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000206b:	83 c0 03             	add    eax,0x3
1000206e:	88 10                	mov    BYTE PTR [eax],dl
10002070:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10002073:	b8 67 66 66 66       	mov    eax,0x66666667
10002078:	f7 e9                	imul   ecx
1000207a:	c1 fa 02             	sar    edx,0x2
1000207d:	89 c8                	mov    eax,ecx
1000207f:	c1 f8 1f             	sar    eax,0x1f
10002082:	89 d1                	mov    ecx,edx
10002084:	29 c1                	sub    ecx,eax
10002086:	b8 67 66 66 66       	mov    eax,0x66666667
1000208b:	f7 e9                	imul   ecx
1000208d:	c1 fa 02             	sar    edx,0x2
10002090:	89 c8                	mov    eax,ecx
10002092:	c1 f8 1f             	sar    eax,0x1f
10002095:	29 c2                	sub    edx,eax
10002097:	89 d0                	mov    eax,edx
10002099:	c1 e0 02             	shl    eax,0x2
1000209c:	01 d0                	add    eax,edx
1000209e:	01 c0                	add    eax,eax
100020a0:	29 c1                	sub    ecx,eax
100020a2:	89 ca                	mov    edx,ecx
100020a4:	88 d0                	mov    al,dl
100020a6:	8d 50 30             	lea    edx,[eax+0x30]
100020a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ac:	83 c0 04             	add    eax,0x4
100020af:	88 10                	mov    BYTE PTR [eax],dl
100020b1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100020b4:	b9 0a 00 00 00       	mov    ecx,0xa
100020b9:	99                   	cdq    
100020ba:	f7 f9                	idiv   ecx
100020bc:	89 d0                	mov    eax,edx
100020be:	8d 50 30             	lea    edx,[eax+0x30]
100020c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020c4:	83 c0 05             	add    eax,0x5
100020c7:	88 10                	mov    BYTE PTR [eax],dl
100020c9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100020cc:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
100020d1:	f7 e9                	imul   ecx
100020d3:	c1 fa 05             	sar    edx,0x5
100020d6:	89 c8                	mov    eax,ecx
100020d8:	c1 f8 1f             	sar    eax,0x1f
100020db:	29 c2                	sub    edx,eax
100020dd:	89 d0                	mov    eax,edx
100020df:	b9 0a 00 00 00       	mov    ecx,0xa
100020e4:	99                   	cdq    
100020e5:	f7 f9                	idiv   ecx
100020e7:	89 d0                	mov    eax,edx
100020e9:	8d 50 30             	lea    edx,[eax+0x30]
100020ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ef:	83 c0 07             	add    eax,0x7
100020f2:	88 10                	mov    BYTE PTR [eax],dl
100020f4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100020f7:	b8 67 66 66 66       	mov    eax,0x66666667
100020fc:	f7 e9                	imul   ecx
100020fe:	c1 fa 02             	sar    edx,0x2
10002101:	89 c8                	mov    eax,ecx
10002103:	c1 f8 1f             	sar    eax,0x1f
10002106:	89 d1                	mov    ecx,edx
10002108:	29 c1                	sub    ecx,eax
1000210a:	b8 67 66 66 66       	mov    eax,0x66666667
1000210f:	f7 e9                	imul   ecx
10002111:	c1 fa 02             	sar    edx,0x2
10002114:	89 c8                	mov    eax,ecx
10002116:	c1 f8 1f             	sar    eax,0x1f
10002119:	29 c2                	sub    edx,eax
1000211b:	89 d0                	mov    eax,edx
1000211d:	c1 e0 02             	shl    eax,0x2
10002120:	01 d0                	add    eax,edx
10002122:	01 c0                	add    eax,eax
10002124:	29 c1                	sub    ecx,eax
10002126:	89 ca                	mov    edx,ecx
10002128:	88 d0                	mov    al,dl
1000212a:	8d 50 30             	lea    edx,[eax+0x30]
1000212d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002130:	83 c0 08             	add    eax,0x8
10002133:	88 10                	mov    BYTE PTR [eax],dl
10002135:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002138:	b9 0a 00 00 00       	mov    ecx,0xa
1000213d:	99                   	cdq    
1000213e:	f7 f9                	idiv   ecx
10002140:	89 d0                	mov    eax,edx
10002142:	8d 50 30             	lea    edx,[eax+0x30]
10002145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002148:	83 c0 09             	add    eax,0x9
1000214b:	88 10                	mov    BYTE PTR [eax],dl
1000214d:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
10002150:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10002155:	f7 e9                	imul   ecx
10002157:	c1 fa 05             	sar    edx,0x5
1000215a:	89 c8                	mov    eax,ecx
1000215c:	c1 f8 1f             	sar    eax,0x1f
1000215f:	29 c2                	sub    edx,eax
10002161:	89 d0                	mov    eax,edx
10002163:	b9 0a 00 00 00       	mov    ecx,0xa
10002168:	99                   	cdq    
10002169:	f7 f9                	idiv   ecx
1000216b:	89 d0                	mov    eax,edx
1000216d:	8d 50 30             	lea    edx,[eax+0x30]
10002170:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002173:	83 c0 0b             	add    eax,0xb
10002176:	88 10                	mov    BYTE PTR [eax],dl
10002178:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
1000217b:	b8 67 66 66 66       	mov    eax,0x66666667
10002180:	f7 e9                	imul   ecx
10002182:	c1 fa 02             	sar    edx,0x2
10002185:	89 c8                	mov    eax,ecx
10002187:	c1 f8 1f             	sar    eax,0x1f
1000218a:	89 d1                	mov    ecx,edx
1000218c:	29 c1                	sub    ecx,eax
1000218e:	b8 67 66 66 66       	mov    eax,0x66666667
10002193:	f7 e9                	imul   ecx
10002195:	c1 fa 02             	sar    edx,0x2
10002198:	89 c8                	mov    eax,ecx
1000219a:	c1 f8 1f             	sar    eax,0x1f
1000219d:	29 c2                	sub    edx,eax
1000219f:	89 d0                	mov    eax,edx
100021a1:	c1 e0 02             	shl    eax,0x2
100021a4:	01 d0                	add    eax,edx
100021a6:	01 c0                	add    eax,eax
100021a8:	29 c1                	sub    ecx,eax
100021aa:	89 ca                	mov    edx,ecx
100021ac:	88 d0                	mov    al,dl
100021ae:	8d 50 30             	lea    edx,[eax+0x30]
100021b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021b4:	83 c0 0c             	add    eax,0xc
100021b7:	88 10                	mov    BYTE PTR [eax],dl
100021b9:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100021bc:	b9 0a 00 00 00       	mov    ecx,0xa
100021c1:	99                   	cdq    
100021c2:	f7 f9                	idiv   ecx
100021c4:	89 d0                	mov    eax,edx
100021c6:	8d 50 30             	lea    edx,[eax+0x30]
100021c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021cc:	83 c0 0d             	add    eax,0xd
100021cf:	88 10                	mov    BYTE PTR [eax],dl
100021d1:	90                   	nop
100021d2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100021d5:	c9                   	leave  
100021d6:	c3                   	ret    

100021d7 <retrieveBits(char*)>:
100021d7:	55                   	push   ebp
100021d8:	89 e5                	mov    ebp,esp
100021da:	57                   	push   edi
100021db:	56                   	push   esi
100021dc:	53                   	push   ebx
100021dd:	83 ec 4c             	sub    esp,0x4c
100021e0:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
100021e7:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
100021ee:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [ebp-0x1c],0xffffffff
100021f5:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100021fc:	83 7d e0 0f          	cmp    DWORD PTR [ebp-0x20],0xf
10002200:	7f 54                	jg     10002256 <retrieveBits(char*)+0x7f>
10002202:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002205:	05 00 00 00 00       	add    eax,0x0	10002206: R_386_32	lookupA
1000220a:	8a 10                	mov    dl,BYTE PTR [eax]
1000220c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000220f:	8a 00                	mov    al,BYTE PTR [eax]
10002211:	38 c2                	cmp    dl,al
10002213:	75 06                	jne    1000221b <retrieveBits(char*)+0x44>
10002215:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002218:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
1000221b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000221e:	05 00 00 00 00       	add    eax,0x0	1000221f: R_386_32	lookupB
10002223:	8a 10                	mov    dl,BYTE PTR [eax]
10002225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002228:	40                   	inc    eax
10002229:	8a 00                	mov    al,BYTE PTR [eax]
1000222b:	38 c2                	cmp    dl,al
1000222d:	75 06                	jne    10002235 <retrieveBits(char*)+0x5e>
1000222f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002232:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10002235:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002238:	05 00 00 00 00       	add    eax,0x0	10002239: R_386_32	lookupC
1000223d:	8a 10                	mov    dl,BYTE PTR [eax]
1000223f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002242:	83 c0 0f             	add    eax,0xf
10002245:	8a 00                	mov    al,BYTE PTR [eax]
10002247:	38 c2                	cmp    dl,al
10002249:	75 06                	jne    10002251 <retrieveBits(char*)+0x7a>
1000224b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000224e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002251:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10002254:	eb a6                	jmp    100021fc <retrieveBits(char*)+0x25>
10002256:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
1000225a:	74 0c                	je     10002268 <retrieveBits(char*)+0x91>
1000225c:	83 7d e8 ff          	cmp    DWORD PTR [ebp-0x18],0xffffffff
10002260:	74 06                	je     10002268 <retrieveBits(char*)+0x91>
10002262:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10002266:	75 0f                	jne    10002277 <retrieveBits(char*)+0xa0>
10002268:	b8 00 00 00 00       	mov    eax,0x0
1000226d:	ba 00 00 00 00       	mov    edx,0x0
10002272:	e9 02 02 00 00       	jmp    10002479 <retrieveBits(char*)+0x2a2>
10002277:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000227a:	83 c0 03             	add    eax,0x3
1000227d:	8a 00                	mov    al,BYTE PTR [eax]
1000227f:	0f be c0             	movsx  eax,al
10002282:	8d 50 d0             	lea    edx,[eax-0x30]
10002285:	89 d0                	mov    eax,edx
10002287:	c1 e0 02             	shl    eax,0x2
1000228a:	01 d0                	add    eax,edx
1000228c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002293:	01 d0                	add    eax,edx
10002295:	c1 e0 02             	shl    eax,0x2
10002298:	89 c6                	mov    esi,eax
1000229a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000229d:	83 c0 04             	add    eax,0x4
100022a0:	8a 00                	mov    al,BYTE PTR [eax]
100022a2:	0f be c0             	movsx  eax,al
100022a5:	8d 50 d0             	lea    edx,[eax-0x30]
100022a8:	89 d0                	mov    eax,edx
100022aa:	c1 e0 02             	shl    eax,0x2
100022ad:	01 d0                	add    eax,edx
100022af:	01 c0                	add    eax,eax
100022b1:	8d 14 06             	lea    edx,[esi+eax*1]
100022b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022b7:	83 c0 05             	add    eax,0x5
100022ba:	8a 00                	mov    al,BYTE PTR [eax]
100022bc:	0f be c0             	movsx  eax,al
100022bf:	83 e8 30             	sub    eax,0x30
100022c2:	01 d0                	add    eax,edx
100022c4:	99                   	cdq    
100022c5:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100022c8:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100022cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022ce:	83 c0 07             	add    eax,0x7
100022d1:	8a 00                	mov    al,BYTE PTR [eax]
100022d3:	0f be c0             	movsx  eax,al
100022d6:	8d 50 d0             	lea    edx,[eax-0x30]
100022d9:	89 d0                	mov    eax,edx
100022db:	c1 e0 02             	shl    eax,0x2
100022de:	01 d0                	add    eax,edx
100022e0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100022e7:	01 d0                	add    eax,edx
100022e9:	c1 e0 02             	shl    eax,0x2
100022ec:	89 c6                	mov    esi,eax
100022ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022f1:	83 c0 08             	add    eax,0x8
100022f4:	8a 00                	mov    al,BYTE PTR [eax]
100022f6:	0f be c0             	movsx  eax,al
100022f9:	8d 50 d0             	lea    edx,[eax-0x30]
100022fc:	89 d0                	mov    eax,edx
100022fe:	c1 e0 02             	shl    eax,0x2
10002301:	01 d0                	add    eax,edx
10002303:	01 c0                	add    eax,eax
10002305:	8d 14 06             	lea    edx,[esi+eax*1]
10002308:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000230b:	83 c0 09             	add    eax,0x9
1000230e:	8a 00                	mov    al,BYTE PTR [eax]
10002310:	0f be c0             	movsx  eax,al
10002313:	83 e8 30             	sub    eax,0x30
10002316:	01 d0                	add    eax,edx
10002318:	99                   	cdq    
10002319:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
1000231c:	89 55 c4             	mov    DWORD PTR [ebp-0x3c],edx
1000231f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002322:	83 c0 0b             	add    eax,0xb
10002325:	8a 00                	mov    al,BYTE PTR [eax]
10002327:	0f be c0             	movsx  eax,al
1000232a:	8d 50 d0             	lea    edx,[eax-0x30]
1000232d:	89 d0                	mov    eax,edx
1000232f:	c1 e0 02             	shl    eax,0x2
10002332:	01 d0                	add    eax,edx
10002334:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000233b:	01 d0                	add    eax,edx
1000233d:	c1 e0 02             	shl    eax,0x2
10002340:	89 c6                	mov    esi,eax
10002342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002345:	83 c0 0c             	add    eax,0xc
10002348:	8a 00                	mov    al,BYTE PTR [eax]
1000234a:	0f be c0             	movsx  eax,al
1000234d:	8d 50 d0             	lea    edx,[eax-0x30]
10002350:	89 d0                	mov    eax,edx
10002352:	c1 e0 02             	shl    eax,0x2
10002355:	01 d0                	add    eax,edx
10002357:	01 c0                	add    eax,eax
10002359:	8d 14 06             	lea    edx,[esi+eax*1]
1000235c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000235f:	83 c0 0d             	add    eax,0xd
10002362:	8a 00                	mov    al,BYTE PTR [eax]
10002364:	0f be c0             	movsx  eax,al
10002367:	83 e8 30             	sub    eax,0x30
1000236a:	01 d0                	add    eax,edx
1000236c:	99                   	cdq    
1000236d:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10002370:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
10002373:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10002376:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10002379:	0f a4 c2 0a          	shld   edx,eax,0xa
1000237d:	c1 e0 0a             	shl    eax,0xa
10002380:	89 c6                	mov    esi,eax
10002382:	89 d7                	mov    edi,edx
10002384:	89 f0                	mov    eax,esi
10002386:	0b 45 c8             	or     eax,DWORD PTR [ebp-0x38]
10002389:	89 c1                	mov    ecx,eax
1000238b:	89 f8                	mov    eax,edi
1000238d:	0b 45 cc             	or     eax,DWORD PTR [ebp-0x34]
10002390:	89 c3                	mov    ebx,eax
10002392:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10002395:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
10002398:	0f a4 c2 14          	shld   edx,eax,0x14
1000239c:	c1 e0 14             	shl    eax,0x14
1000239f:	89 ce                	mov    esi,ecx
100023a1:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
100023a4:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100023a7:	0b 75 a8             	or     esi,DWORD PTR [ebp-0x58]
100023aa:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
100023ad:	89 d8                	mov    eax,ebx
100023af:	0b 45 ac             	or     eax,DWORD PTR [ebp-0x54]
100023b2:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100023b5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100023b8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100023bb:	0f a4 c2 0c          	shld   edx,eax,0xc
100023bf:	c1 e0 0c             	shl    eax,0xc
100023c2:	89 c3                	mov    ebx,eax
100023c4:	89 d6                	mov    esi,edx
100023c6:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
100023c9:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
100023cc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100023cf:	c1 e0 04             	shl    eax,0x4
100023d2:	0b 45 ec             	or     eax,DWORD PTR [ebp-0x14]
100023d5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100023d8:	c1 e2 08             	shl    edx,0x8
100023db:	09 d0                	or     eax,edx
100023dd:	99                   	cdq    
100023de:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
100023e1:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
100023e4:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
100023eb:	81 7d d4 db 24 00 00 	cmp    DWORD PTR [ebp-0x2c],0x24db
100023f2:	7f 7f                	jg     10002473 <retrieveBits(char*)+0x29c>
100023f4:	6a 2a                	push   0x2a
100023f6:	6a 13                	push   0x13
100023f8:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100023fb:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100023fe:	e8 fc ff ff ff       	call   100023ff <retrieveBits(char*)+0x228>	100023ff: R_386_PC32	ror(unsigned long long, int, int)
10002403:	83 c4 10             	add    esp,0x10
10002406:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002409:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
1000240c:	6a 00                	push   0x0
1000240e:	6a 08                	push   0x8
10002410:	6a 00                	push   0x0
10002412:	6a 03                	push   0x3
10002414:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002417:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
1000241a:	e8 fc ff ff ff       	call   1000241b <retrieveBits(char*)+0x244>	1000241b: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
1000241f:	83 c4 18             	add    esp,0x18
10002422:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002425:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002428:	6a 00                	push   0x0
1000242a:	6a 0c                	push   0xc
1000242c:	6a 00                	push   0x0
1000242e:	6a 0d                	push   0xd
10002430:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002433:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002436:	e8 fc ff ff ff       	call   10002437 <retrieveBits(char*)+0x260>	10002437: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
1000243b:	83 c4 18             	add    esp,0x18
1000243e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002441:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002444:	6a 00                	push   0x0
10002446:	6a 16                	push   0x16
10002448:	6a 00                	push   0x0
1000244a:	6a 25                	push   0x25
1000244c:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000244f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002452:	e8 fc ff ff ff       	call   10002453 <retrieveBits(char*)+0x27c>	10002453: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10002457:	83 c4 18             	add    esp,0x18
1000245a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
1000245d:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002460:	81 75 d8 95 38 e4 b5 	xor    DWORD PTR [ebp-0x28],0xb5e43895
10002467:	83 75 dc 37          	xor    DWORD PTR [ebp-0x24],0x37
1000246b:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
1000246e:	e9 78 ff ff ff       	jmp    100023eb <retrieveBits(char*)+0x214>
10002473:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002476:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002479:	8d 65 f4             	lea    esp,[ebp-0xc]
1000247c:	5b                   	pop    ebx
1000247d:	5e                   	pop    esi
1000247e:	5f                   	pop    edi
1000247f:	5d                   	pop    ebp
10002480:	c3                   	ret    

10002481 <checkKey(char*)>:
10002481:	55                   	push   ebp
10002482:	89 e5                	mov    ebp,esp
10002484:	53                   	push   ebx
10002485:	83 ec 14             	sub    esp,0x14
10002488:	83 ec 04             	sub    esp,0x4
1000248b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000248e:	e8 fc ff ff ff       	call   1000248f <checkKey(char*)+0xe>	1000248f: R_386_PC32	retrieveBits(char*)
10002493:	83 c4 08             	add    esp,0x8
10002496:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10002499:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
1000249c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000249f:	25 ff 7f 00 00       	and    eax,0x7fff
100024a4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100024a7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100024aa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100024ad:	0f ac d0 0f          	shrd   eax,edx,0xf
100024b1:	c1 ea 0f             	shr    edx,0xf
100024b4:	89 c1                	mov    ecx,eax
100024b6:	89 d3                	mov    ebx,edx
100024b8:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
100024bb:	83 ec 04             	sub    esp,0x4
100024be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100024c1:	e8 fc ff ff ff       	call   100024c2 <checkKey(char*)+0x41>	100024c2: R_386_PC32	getChecksum(unsigned int)
100024c6:	83 c4 08             	add    esp,0x8
100024c9:	39 45 ec             	cmp    DWORD PTR [ebp-0x14],eax
100024cc:	0f 95 c0             	setne  al
100024cf:	84 c0                	test   al,al
100024d1:	74 07                	je     100024da <checkKey(char*)+0x59>
100024d3:	b8 00 00 00 00       	mov    eax,0x0
100024d8:	eb 06                	jmp    100024e0 <checkKey(char*)+0x5f>
100024da:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100024dd:	83 e0 07             	and    eax,0x7
100024e0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100024e3:	c9                   	leave  
100024e4:	c3                   	ret    

100024e5 <changeKeyType(char*, int)>:
100024e5:	55                   	push   ebp
100024e6:	89 e5                	mov    ebp,esp
100024e8:	83 ec 10             	sub    esp,0x10
100024eb:	83 ec 04             	sub    esp,0x4
100024ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100024f1:	e8 fc ff ff ff       	call   100024f2 <changeKeyType(char*, int)+0xd>	100024f2: R_386_PC32	retrieveBits(char*)
100024f6:	83 c4 08             	add    esp,0x8
100024f9:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
100024fc:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100024ff:	83 65 f8 f8          	and    DWORD PTR [ebp-0x8],0xfffffff8
10002503:	83 65 fc ff          	and    DWORD PTR [ebp-0x4],0xffffffff
10002507:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000250a:	99                   	cdq    
1000250b:	09 45 f8             	or     DWORD PTR [ebp-0x8],eax
1000250e:	09 55 fc             	or     DWORD PTR [ebp-0x4],edx
10002511:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10002514:	50                   	push   eax
10002515:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002518:	e8 fc ff ff ff       	call   10002519 <changeKeyType(char*, int)+0x34>	10002519: R_386_PC32	createKey(char*, unsigned int)
1000251d:	83 c4 08             	add    esp,0x8
10002520:	83 ec 04             	sub    esp,0x4
10002523:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002526:	e8 fc ff ff ff       	call   10002527 <changeKeyType(char*, int)+0x42>	10002527: R_386_PC32	checkKey(char*)
1000252b:	83 c4 08             	add    esp,0x8
1000252e:	85 c0                	test   eax,eax
10002530:	0f 95 c0             	setne  al
10002533:	c9                   	leave  
10002534:	c3                   	ret    

10002535 <checkExtendedKey(char*)>:
10002535:	55                   	push   ebp
10002536:	89 e5                	mov    ebp,esp
10002538:	83 ec 20             	sub    esp,0x20
1000253b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000253e:	8a 00                	mov    al,BYTE PTR [eax]
10002540:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10002543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002546:	8a 40 01             	mov    al,BYTE PTR [eax+0x1]
10002549:	88 45 ed             	mov    BYTE PTR [ebp-0x13],al
1000254c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000254f:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
10002552:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
10002555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002558:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
1000255b:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
1000255e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002561:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
10002564:	88 45 f0             	mov    BYTE PTR [ebp-0x10],al
10002567:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000256a:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
1000256d:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
10002570:	c6 45 f2 2d          	mov    BYTE PTR [ebp-0xe],0x2d
10002574:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002577:	8a 40 06             	mov    al,BYTE PTR [eax+0x6]
1000257a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
1000257d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002580:	8a 40 07             	mov    al,BYTE PTR [eax+0x7]
10002583:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
10002586:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002589:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
1000258c:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
1000258f:	c6 45 f6 2d          	mov    BYTE PTR [ebp-0xa],0x2d
10002593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002596:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10002599:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000259c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000259f:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
100025a2:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
100025a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025a8:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
100025ab:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
100025ae:	c6 45 fa 2d          	mov    BYTE PTR [ebp-0x6],0x2d
100025b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025b5:	8a 40 0f             	mov    al,BYTE PTR [eax+0xf]
100025b8:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
100025bb:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100025be:	48                   	dec    eax
100025bf:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
100025c2:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100025c5:	3c 2f                	cmp    al,0x2f
100025c7:	75 04                	jne    100025cd <checkExtendedKey(char*)+0x98>
100025c9:	c6 45 ef 39          	mov    BYTE PTR [ebp-0x11],0x39
100025cd:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025d0:	48                   	dec    eax
100025d1:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
100025d4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025d7:	3c 2f                	cmp    al,0x2f
100025d9:	75 04                	jne    100025df <checkExtendedKey(char*)+0xaa>
100025db:	c6 45 f5 39          	mov    BYTE PTR [ebp-0xb],0x39
100025df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025e2:	83 c0 0d             	add    eax,0xd
100025e5:	8a 10                	mov    dl,BYTE PTR [eax]
100025e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025ea:	83 c0 0c             	add    eax,0xc
100025ed:	8a 00                	mov    al,BYTE PTR [eax]
100025ef:	38 c2                	cmp    dl,al
100025f1:	74 0a                	je     100025fd <checkExtendedKey(char*)+0xc8>
100025f3:	b8 00 00 00 00       	mov    eax,0x0
100025f8:	e9 d6 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100025fd:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002600:	3c 2f                	cmp    al,0x2f
10002602:	7e 07                	jle    1000260b <checkExtendedKey(char*)+0xd6>
10002604:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002607:	3c 39                	cmp    al,0x39
10002609:	7e 0a                	jle    10002615 <checkExtendedKey(char*)+0xe0>
1000260b:	b8 00 00 00 00       	mov    eax,0x0
10002610:	e9 be 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002615:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
10002618:	3c 2f                	cmp    al,0x2f
1000261a:	7e 07                	jle    10002623 <checkExtendedKey(char*)+0xee>
1000261c:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
1000261f:	3c 39                	cmp    al,0x39
10002621:	7e 0a                	jle    1000262d <checkExtendedKey(char*)+0xf8>
10002623:	b8 00 00 00 00       	mov    eax,0x0
10002628:	e9 a6 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000262d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002630:	3c 2f                	cmp    al,0x2f
10002632:	7e 07                	jle    1000263b <checkExtendedKey(char*)+0x106>
10002634:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002637:	3c 39                	cmp    al,0x39
10002639:	7e 0a                	jle    10002645 <checkExtendedKey(char*)+0x110>
1000263b:	b8 00 00 00 00       	mov    eax,0x0
10002640:	e9 8e 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002645:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10002648:	3c 2f                	cmp    al,0x2f
1000264a:	7e 07                	jle    10002653 <checkExtendedKey(char*)+0x11e>
1000264c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
1000264f:	3c 39                	cmp    al,0x39
10002651:	7e 07                	jle    1000265a <checkExtendedKey(char*)+0x125>
10002653:	b8 00 00 00 00       	mov    eax,0x0
10002658:	eb 79                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000265a:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
1000265d:	3c 2f                	cmp    al,0x2f
1000265f:	7e 07                	jle    10002668 <checkExtendedKey(char*)+0x133>
10002661:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
10002664:	3c 39                	cmp    al,0x39
10002666:	7e 07                	jle    1000266f <checkExtendedKey(char*)+0x13a>
10002668:	b8 00 00 00 00       	mov    eax,0x0
1000266d:	eb 64                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000266f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002672:	3c 2f                	cmp    al,0x2f
10002674:	7e 07                	jle    1000267d <checkExtendedKey(char*)+0x148>
10002676:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002679:	3c 39                	cmp    al,0x39
1000267b:	7e 07                	jle    10002684 <checkExtendedKey(char*)+0x14f>
1000267d:	b8 00 00 00 00       	mov    eax,0x0
10002682:	eb 4f                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002684:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10002687:	3c 2f                	cmp    al,0x2f
10002689:	7e 07                	jle    10002692 <checkExtendedKey(char*)+0x15d>
1000268b:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
1000268e:	3c 39                	cmp    al,0x39
10002690:	7e 07                	jle    10002699 <checkExtendedKey(char*)+0x164>
10002692:	b8 00 00 00 00       	mov    eax,0x0
10002697:	eb 3a                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002699:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
1000269c:	3c 2f                	cmp    al,0x2f
1000269e:	7e 07                	jle    100026a7 <checkExtendedKey(char*)+0x172>
100026a0:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
100026a3:	3c 39                	cmp    al,0x39
100026a5:	7e 07                	jle    100026ae <checkExtendedKey(char*)+0x179>
100026a7:	b8 00 00 00 00       	mov    eax,0x0
100026ac:	eb 25                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100026ae:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
100026b1:	3c 2f                	cmp    al,0x2f
100026b3:	7e 07                	jle    100026bc <checkExtendedKey(char*)+0x187>
100026b5:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
100026b8:	3c 39                	cmp    al,0x39
100026ba:	7e 07                	jle    100026c3 <checkExtendedKey(char*)+0x18e>
100026bc:	b8 00 00 00 00       	mov    eax,0x0
100026c1:	eb 10                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100026c3:	83 ec 04             	sub    esp,0x4
100026c6:	8d 45 ec             	lea    eax,[ebp-0x14]
100026c9:	50                   	push   eax
100026ca:	e8 fc ff ff ff       	call   100026cb <checkExtendedKey(char*)+0x196>	100026cb: R_386_PC32	checkKey(char*)
100026cf:	83 c4 08             	add    esp,0x8
100026d2:	90                   	nop
100026d3:	c9                   	leave  
100026d4:	c3                   	ret    

100026d5 <loadTimezoneStrings()>:
100026d5:	55                   	push   ebp
100026d6:	89 e5                	mov    ebp,esp
100026d8:	53                   	push   ebx
100026d9:	83 ec 34             	sub    esp,0x34
100026dc:	83 ec 0c             	sub    esp,0xc
100026df:	68 14 01 00 00       	push   0x114
100026e4:	e8 fc ff ff ff       	call   100026e5 <loadTimezoneStrings()+0x10>	100026e5: R_386_PC32	operator new(unsigned long)
100026e9:	83 c4 10             	add    esp,0x10
100026ec:	89 c3                	mov    ebx,eax
100026ee:	a1 00 00 00 00       	mov    eax,ds:0x0	100026ef: R_386_32	kernelProcess
100026f3:	83 ec 04             	sub    esp,0x4
100026f6:	50                   	push   eax
100026f7:	68 58 a7 00 10       	push   0x1000a758	100026f8: R_386_32	.text
100026fc:	53                   	push   ebx
100026fd:	e8 fc ff ff ff       	call   100026fe <loadTimezoneStrings()+0x29>	100026fe: R_386_PC32	File::File(char const*, Process*)
10002702:	83 c4 10             	add    esp,0x10
10002705:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10002708:	83 ec 08             	sub    esp,0x8
1000270b:	6a 01                	push   0x1
1000270d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002710:	e8 fc ff ff ff       	call   10002711 <loadTimezoneStrings()+0x3c>	10002711: R_386_PC32	File::open(FileOpenMode)
10002715:	83 c4 10             	add    esp,0x10
10002718:	83 ec 04             	sub    esp,0x4
1000271b:	8d 45 d7             	lea    eax,[ebp-0x29]
1000271e:	50                   	push   eax
1000271f:	8d 45 d8             	lea    eax,[ebp-0x28]
10002722:	50                   	push   eax
10002723:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002726:	e8 fc ff ff ff       	call   10002727 <loadTimezoneStrings()+0x52>	10002727: R_386_PC32	File::stat(unsigned long long*, bool*)
1000272b:	83 c4 10             	add    esp,0x10
1000272e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002731:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002734:	83 ec 0c             	sub    esp,0xc
10002737:	50                   	push   eax
10002738:	e8 fc ff ff ff       	call   10002739 <loadTimezoneStrings()+0x64>	10002739: R_386_PC32	malloc
1000273d:	83 c4 10             	add    esp,0x10
10002740:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002743:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002746:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002749:	83 ec 04             	sub    esp,0x4
1000274c:	50                   	push   eax
1000274d:	6a 00                	push   0x0
1000274f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002752:	e8 fc ff ff ff       	call   10002753 <loadTimezoneStrings()+0x7e>	10002753: R_386_PC32	memset
10002757:	83 c4 10             	add    esp,0x10
1000275a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000275d:	8b 00                	mov    eax,DWORD PTR [eax]
1000275f:	83 c0 0c             	add    eax,0xc
10002762:	8b 08                	mov    ecx,DWORD PTR [eax]
10002764:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002767:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
1000276a:	83 ec 0c             	sub    esp,0xc
1000276d:	8d 5d d0             	lea    ebx,[ebp-0x30]
10002770:	53                   	push   ebx
10002771:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002774:	52                   	push   edx
10002775:	50                   	push   eax
10002776:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002779:	ff d1                	call   ecx
1000277b:	83 c4 20             	add    esp,0x20
1000277e:	83 ec 0c             	sub    esp,0xc
10002781:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002784:	e8 fc ff ff ff       	call   10002785 <loadTimezoneStrings()+0xb0>	10002785: R_386_PC32	File::close()
10002789:	83 c4 10             	add    esp,0x10
1000278c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10002793:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000279a:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
100027a1:	7f 39                	jg     100027dc <loadTimezoneStrings()+0x107>
100027a3:	83 ec 0c             	sub    esp,0xc
100027a6:	6a 78                	push   0x78
100027a8:	e8 fc ff ff ff       	call   100027a9 <loadTimezoneStrings()+0xd4>	100027a9: R_386_PC32	malloc
100027ad:	83 c4 10             	add    esp,0x10
100027b0:	89 c2                	mov    edx,eax
100027b2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027b5:	89 14 85 00 00 00 00 	mov    DWORD PTR [eax*4+0x0],edx	100027b8: R_386_32	timezoneStrings
100027bc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027bf:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100027c2: R_386_32	timezoneStrings
100027c6:	83 ec 08             	sub    esp,0x8
100027c9:	68 77 a7 00 10       	push   0x1000a777	100027ca: R_386_32	.text
100027ce:	50                   	push   eax
100027cf:	e8 fc ff ff ff       	call   100027d0 <loadTimezoneStrings()+0xfb>	100027d0: R_386_PC32	strcpy
100027d4:	83 c4 10             	add    esp,0x10
100027d7:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100027da:	eb be                	jmp    1000279a <loadTimezoneStrings()+0xc5>
100027dc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100027e3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100027e6:	8d 50 01             	lea    edx,[eax+0x1]
100027e9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
100027ec:	89 c2                	mov    edx,eax
100027ee:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100027f1:	01 d0                	add    eax,edx
100027f3:	8a 00                	mov    al,BYTE PTR [eax]
100027f5:	88 45 ce             	mov    BYTE PTR [ebp-0x32],al
100027f8:	c6 45 cf 00          	mov    BYTE PTR [ebp-0x31],0x0
100027fc:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
100027ff:	3c 0d                	cmp    al,0xd
10002801:	0f 84 2a 01 00 00    	je     10002931 <loadTimezoneStrings()+0x25c>
10002807:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
1000280a:	3c 09                	cmp    al,0x9
1000280c:	75 3c                	jne    1000284a <loadTimezoneStrings()+0x175>
1000280e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002811:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002814: R_386_32	timezoneStrings
10002818:	83 ec 0c             	sub    esp,0xc
1000281b:	50                   	push   eax
1000281c:	e8 fc ff ff ff       	call   1000281d <loadTimezoneStrings()+0x148>	1000281d: R_386_PC32	strlen
10002821:	83 c4 10             	add    esp,0x10
10002824:	83 f8 08             	cmp    eax,0x8
10002827:	0f 87 0a 01 00 00    	ja     10002937 <loadTimezoneStrings()+0x262>
1000282d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002830:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002833: R_386_32	timezoneStrings
10002837:	83 ec 08             	sub    esp,0x8
1000283a:	68 77 a7 00 10       	push   0x1000a777	1000283b: R_386_32	.text
1000283f:	50                   	push   eax
10002840:	e8 fc ff ff ff       	call   10002841 <loadTimezoneStrings()+0x16c>	10002841: R_386_PC32	strcat
10002845:	83 c4 10             	add    esp,0x10
10002848:	eb c4                	jmp    1000280e <loadTimezoneStrings()+0x139>
1000284a:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
1000284d:	3c 0a                	cmp    al,0xa
1000284f:	75 67                	jne    100028b8 <loadTimezoneStrings()+0x1e3>
10002851:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002854:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002857: R_386_32	timezoneStrings
1000285b:	83 ec 0c             	sub    esp,0xc
1000285e:	50                   	push   eax
1000285f:	e8 fc ff ff ff       	call   10002860 <loadTimezoneStrings()+0x18b>	10002860: R_386_PC32	strlen
10002864:	83 c4 10             	add    esp,0x10
10002867:	83 f8 35             	cmp    eax,0x35
1000286a:	77 1d                	ja     10002889 <loadTimezoneStrings()+0x1b4>
1000286c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000286f:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002872: R_386_32	timezoneStrings
10002876:	83 ec 08             	sub    esp,0x8
10002879:	68 77 a7 00 10       	push   0x1000a777	1000287a: R_386_32	.text
1000287e:	50                   	push   eax
1000287f:	e8 fc ff ff ff       	call   10002880 <loadTimezoneStrings()+0x1ab>	10002880: R_386_PC32	strcat
10002884:	83 c4 10             	add    esp,0x10
10002887:	eb c8                	jmp    10002851 <loadTimezoneStrings()+0x17c>
10002889:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000288c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000288f:	99                   	cdq    
10002890:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
10002893:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
10002896:	39 c8                	cmp    eax,ecx
10002898:	89 d0                	mov    eax,edx
1000289a:	19 d8                	sbb    eax,ebx
1000289c:	0f 82 9b 00 00 00    	jb     1000293d <loadTimezoneStrings()+0x268>
100028a2:	83 ec 0c             	sub    esp,0xc
100028a5:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
100028a8:	e8 fc ff ff ff       	call   100028a9 <loadTimezoneStrings()+0x1d4>	100028a9: R_386_PC32	free
100028ad:	83 c4 10             	add    esp,0x10
100028b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028b3:	e9 8b 00 00 00       	jmp    10002943 <loadTimezoneStrings()+0x26e>
100028b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028bb:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028be: R_386_32	timezoneStrings
100028c2:	83 ec 0c             	sub    esp,0xc
100028c5:	50                   	push   eax
100028c6:	e8 fc ff ff ff       	call   100028c7 <loadTimezoneStrings()+0x1f2>	100028c7: R_386_PC32	strlen
100028cb:	83 c4 10             	add    esp,0x10
100028ce:	83 f8 31             	cmp    eax,0x31
100028d1:	77 1f                	ja     100028f2 <loadTimezoneStrings()+0x21d>
100028d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028d6:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028d9: R_386_32	timezoneStrings
100028dd:	83 ec 08             	sub    esp,0x8
100028e0:	8d 55 ce             	lea    edx,[ebp-0x32]
100028e3:	52                   	push   edx
100028e4:	50                   	push   eax
100028e5:	e8 fc ff ff ff       	call   100028e6 <loadTimezoneStrings()+0x211>	100028e6: R_386_PC32	strcat
100028ea:	83 c4 10             	add    esp,0x10
100028ed:	e9 f1 fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
100028f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028f5:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028f8: R_386_32	timezoneStrings
100028fc:	83 ec 0c             	sub    esp,0xc
100028ff:	50                   	push   eax
10002900:	e8 fc ff ff ff       	call   10002901 <loadTimezoneStrings()+0x22c>	10002901: R_386_PC32	strlen
10002905:	83 c4 10             	add    esp,0x10
10002908:	83 f8 32             	cmp    eax,0x32
1000290b:	0f 85 d2 fe ff ff    	jne    100027e3 <loadTimezoneStrings()+0x10e>
10002911:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002914:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002917: R_386_32	timezoneStrings
1000291b:	83 ec 08             	sub    esp,0x8
1000291e:	68 79 a7 00 10       	push   0x1000a779	1000291f: R_386_32	.text
10002923:	50                   	push   eax
10002924:	e8 fc ff ff ff       	call   10002925 <loadTimezoneStrings()+0x250>	10002925: R_386_PC32	strcat
10002929:	83 c4 10             	add    esp,0x10
1000292c:	e9 b2 fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
10002931:	90                   	nop
10002932:	e9 ac fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
10002937:	90                   	nop
10002938:	e9 a6 fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
1000293d:	90                   	nop
1000293e:	e9 a0 fe ff ff       	jmp    100027e3 <loadTimezoneStrings()+0x10e>
10002943:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10002946:	c9                   	leave  
10002947:	c3                   	ret    

10002948 <_bcrypt_rand>:
10002948:	55                   	push   ebp
10002949:	89 e5                	mov    ebp,esp
1000294b:	83 ec 08             	sub    esp,0x8
1000294e:	e8 fc ff ff ff       	call   1000294f <_bcrypt_rand+0x7>	1000294f: R_386_PC32	KeRand()
10002953:	c9                   	leave  
10002954:	c3                   	ret    

10002955 <firstRun(bool)>:
10002955:	55                   	push   ebp
10002956:	89 e5                	mov    ebp,esp
10002958:	57                   	push   edi
10002959:	56                   	push   esi
1000295a:	53                   	push   ebx
1000295b:	81 ec 5c 01 00 00    	sub    esp,0x15c
10002961:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002964:	88 85 a4 fe ff ff    	mov    BYTE PTR [ebp-0x15c],al
1000296a:	8a 85 a4 fe ff ff    	mov    al,BYTE PTR [ebp-0x15c]
10002970:	83 f0 01             	xor    eax,0x1
10002973:	a2 00 00 00 00       	mov    ds:0x0,al	10002974: R_386_32	showSidebar
10002978:	a0 00 00 00 00       	mov    al,ds:0x0	10002979: R_386_32	createNewUserMode
1000297d:	84 c0                	test   al,al
1000297f:	74 4f                	je     100029d0 <firstRun(bool)+0x7b>
10002981:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002983: R_386_32	showSidebar
10002988:	68 ef a5 00 10       	push   0x1000a5ef	10002989: R_386_32	.text
1000298d:	68 00 00 00 00       	push   0x0	1000298e: R_386_32	currName
10002992:	e8 fc ff ff ff       	call   10002993 <firstRun(bool)+0x3e>	10002993: R_386_PC32	strcpy
10002997:	83 c4 08             	add    esp,0x8
1000299a:	68 ef a5 00 10       	push   0x1000a5ef	1000299b: R_386_32	.text
1000299f:	68 00 00 00 00       	push   0x0	100029a0: R_386_32	currComp
100029a4:	e8 fc ff ff ff       	call   100029a5 <firstRun(bool)+0x50>	100029a5: R_386_PC32	strcpy
100029a9:	83 c4 08             	add    esp,0x8
100029ac:	68 ef a5 00 10       	push   0x1000a5ef	100029ad: R_386_32	.text
100029b1:	68 00 00 00 00       	push   0x0	100029b2: R_386_32	passwbufA
100029b6:	e8 fc ff ff ff       	call   100029b7 <firstRun(bool)+0x62>	100029b7: R_386_PC32	strcpy
100029bb:	83 c4 08             	add    esp,0x8
100029be:	68 ef a5 00 10       	push   0x1000a5ef	100029bf: R_386_32	.text
100029c3:	68 00 00 00 00       	push   0x0	100029c4: R_386_32	passwbufB
100029c8:	e8 fc ff ff ff       	call   100029c9 <firstRun(bool)+0x74>	100029c9: R_386_PC32	strcpy
100029cd:	83 c4 08             	add    esp,0x8
100029d0:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100029d2: R_386_32	guiKeyboardHandler
	100029d6: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
100029da:	83 ec 0c             	sub    esp,0xc
100029dd:	68 80 a7 00 10       	push   0x1000a780	100029de: R_386_32	.text
100029e2:	e8 fc ff ff ff       	call   100029e3 <firstRun(bool)+0x8e>	100029e3: R_386_PC32	KeSetBootMessage(char const*)
100029e7:	83 c4 10             	add    esp,0x10
100029ea:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100029ec: R_386_32	VgaText::hiddenOut
100029f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100029f2: R_386_32	activeTerminal
100029f6:	83 ec 08             	sub    esp,0x8
100029f9:	68 a9 a7 00 10       	push   0x1000a7a9	100029fa: R_386_32	.text
100029fe:	50                   	push   eax
100029ff:	e8 fc ff ff ff       	call   10002a00 <firstRun(bool)+0xab>	10002a00: R_386_PC32	VgaText::puts(char const*)
10002a04:	83 c4 10             	add    esp,0x10
10002a07:	a1 00 00 00 00       	mov    eax,ds:0x0	10002a08: R_386_32	kernelProcess
10002a0c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
10002a12:	83 ec 08             	sub    esp,0x8
10002a15:	68 a9 a7 00 10       	push   0x1000a7a9	10002a16: R_386_32	.text
10002a1a:	50                   	push   eax
10002a1b:	e8 fc ff ff ff       	call   10002a1c <firstRun(bool)+0xc7>	10002a1c: R_386_PC32	VgaText::puts(char const*)
10002a20:	83 c4 10             	add    esp,0x10
10002a23:	83 ec 0c             	sub    esp,0xc
10002a26:	68 84 01 00 00       	push   0x184
10002a2b:	e8 fc ff ff ff       	call   10002a2c <firstRun(bool)+0xd7>	10002a2c: R_386_PC32	operator new(unsigned long)
10002a30:	83 c4 10             	add    esp,0x10
10002a33:	89 c3                	mov    ebx,eax
10002a35:	83 ec 08             	sub    esp,0x8
10002a38:	68 b0 a7 00 10       	push   0x1000a7b0	10002a39: R_386_32	.text
10002a3d:	53                   	push   ebx
10002a3e:	e8 fc ff ff ff       	call   10002a3f <firstRun(bool)+0xea>	10002a3f: R_386_PC32	VgaText::VgaText(char const*)
10002a43:	83 c4 10             	add    esp,0x10
10002a46:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10002a48: R_386_32	term
10002a4c:	a1 00 00 00 00       	mov    eax,ds:0x0	10002a4d: R_386_32	term
10002a51:	83 ec 0c             	sub    esp,0xc
10002a54:	50                   	push   eax
10002a55:	e8 fc ff ff ff       	call   10002a56 <firstRun(bool)+0x101>	10002a56: R_386_PC32	setActiveTerminal(VgaText*)
10002a5a:	83 c4 10             	add    esp,0x10
10002a5d:	e8 fc ff ff ff       	call   10002a5e <firstRun(bool)+0x109>	10002a5e: R_386_PC32	drawBootScreen()
10002a62:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10002a69:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
10002a70:	74 17                	je     10002a89 <firstRun(bool)+0x134>
10002a72:	83 ec 08             	sub    esp,0x8
10002a75:	68 b5 a7 00 10       	push   0x1000a7b5	10002a76: R_386_32	.text
10002a7a:	68 00 00 00 00       	push   0x0	10002a7b: R_386_32	pkeybuf
10002a7f:	e8 fc ff ff ff       	call   10002a80 <firstRun(bool)+0x12b>	10002a80: R_386_PC32	strcpy
10002a84:	83 c4 10             	add    esp,0x10
10002a87:	eb 15                	jmp    10002a9e <firstRun(bool)+0x149>
10002a89:	83 ec 08             	sub    esp,0x8
10002a8c:	68 c6 a7 00 10       	push   0x1000a7c6	10002a8d: R_386_32	.text
10002a91:	68 00 00 00 00       	push   0x0	10002a92: R_386_32	pkeybuf
10002a96:	e8 fc ff ff ff       	call   10002a97 <firstRun(bool)+0x142>	10002a97: R_386_PC32	strcpy
10002a9b:	83 c4 10             	add    esp,0x10
10002a9e:	8a 85 a4 fe ff ff    	mov    al,BYTE PTR [ebp-0x15c]
10002aa4:	83 f0 01             	xor    eax,0x1
10002aa7:	84 c0                	test   al,al
10002aa9:	0f 84 c6 1c 00 00    	je     10004775 <firstRun(bool)+0x1e20>
10002aaf:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10002ab6:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002ab8: R_386_32	tzsel
10002ac0:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002ac2: R_386_32	modesel
10002aca:	eb 01                	jmp    10002acd <firstRun(bool)+0x178>
10002acc:	90                   	nop
10002acd:	e8 fc ff ff ff       	call   10002ace <firstRun(bool)+0x179>	10002ace: R_386_PC32	drawBootScreen()
10002ad2:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10002ad9:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002adb: R_386_32	installKey
10002ae0:	a0 00 00 00 00       	mov    al,ds:0x0	10002ae1: R_386_32	createNewUserMode
10002ae5:	84 c0                	test   al,al
10002ae7:	74 07                	je     10002af0 <firstRun(bool)+0x19b>
10002ae9:	b8 d7 a7 00 10       	mov    eax,0x1000a7d7	10002aea: R_386_32	.text
10002aee:	eb 05                	jmp    10002af5 <firstRun(bool)+0x1a0>
10002af0:	b8 e7 a7 00 10       	mov    eax,0x1000a7e7	10002af1: R_386_32	.text
10002af5:	83 ec 0c             	sub    esp,0xc
10002af8:	50                   	push   eax
10002af9:	6a 12                	push   0x12
10002afb:	6a 32                	push   0x32
10002afd:	6a 03                	push   0x3
10002aff:	6a 16                	push   0x16
10002b01:	e8 fc ff ff ff       	call   10002b02 <firstRun(bool)+0x1ad>	10002b02: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10002b06:	83 c4 20             	add    esp,0x20
10002b09:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b0a: R_386_32	term
10002b0e:	83 ec 04             	sub    esp,0x4
10002b11:	6a 06                	push   0x6
10002b13:	6a 18                	push   0x18
10002b15:	50                   	push   eax
10002b16:	e8 fc ff ff ff       	call   10002b17 <firstRun(bool)+0x1c2>	10002b17: R_386_PC32	VgaText::setCursor(int, int)
10002b1b:	83 c4 10             	add    esp,0x10
10002b1e:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b1f: R_386_32	term
10002b23:	83 ec 08             	sub    esp,0x8
10002b26:	68 f4 a7 00 10       	push   0x1000a7f4	10002b27: R_386_32	.text
10002b2b:	50                   	push   eax
10002b2c:	e8 fc ff ff ff       	call   10002b2d <firstRun(bool)+0x1d8>	10002b2d: R_386_PC32	VgaText::puts(char const*)
10002b31:	83 c4 10             	add    esp,0x10
10002b34:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b35: R_386_32	term
10002b39:	83 ec 04             	sub    esp,0x4
10002b3c:	6a 07                	push   0x7
10002b3e:	6a 18                	push   0x18
10002b40:	50                   	push   eax
10002b41:	e8 fc ff ff ff       	call   10002b42 <firstRun(bool)+0x1ed>	10002b42: R_386_PC32	VgaText::setCursor(int, int)
10002b46:	83 c4 10             	add    esp,0x10
10002b49:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b4a: R_386_32	term
10002b4e:	8a 15 00 00 00 00    	mov    dl,BYTE PTR ds:0x0	10002b50: R_386_32	createNewUserMode
10002b54:	84 d2                	test   dl,dl
10002b56:	74 07                	je     10002b5f <firstRun(bool)+0x20a>
10002b58:	ba 24 a8 00 10       	mov    edx,0x1000a824	10002b59: R_386_32	.text
10002b5d:	eb 05                	jmp    10002b64 <firstRun(bool)+0x20f>
10002b5f:	ba 46 a8 00 10       	mov    edx,0x1000a846	10002b60: R_386_32	.text
10002b64:	83 ec 08             	sub    esp,0x8
10002b67:	52                   	push   edx
10002b68:	50                   	push   eax
10002b69:	e8 fc ff ff ff       	call   10002b6a <firstRun(bool)+0x215>	10002b6a: R_386_PC32	VgaText::puts(char const*)
10002b6e:	83 c4 10             	add    esp,0x10
10002b71:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b72: R_386_32	term
10002b76:	83 ec 04             	sub    esp,0x4
10002b79:	6a 09                	push   0x9
10002b7b:	6a 18                	push   0x18
10002b7d:	50                   	push   eax
10002b7e:	e8 fc ff ff ff       	call   10002b7f <firstRun(bool)+0x22a>	10002b7f: R_386_PC32	VgaText::setCursor(int, int)
10002b83:	83 c4 10             	add    esp,0x10
10002b86:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b87: R_386_32	term
10002b8b:	83 ec 08             	sub    esp,0x8
10002b8e:	68 56 a8 00 10       	push   0x1000a856	10002b8f: R_386_32	.text
10002b93:	50                   	push   eax
10002b94:	e8 fc ff ff ff       	call   10002b95 <firstRun(bool)+0x240>	10002b95: R_386_PC32	VgaText::puts(char const*)
10002b99:	83 c4 10             	add    esp,0x10
10002b9c:	a0 00 00 00 00       	mov    al,ds:0x0	10002b9d: R_386_32	createNewUserMode
10002ba1:	83 f0 01             	xor    eax,0x1
10002ba4:	84 c0                	test   al,al
10002ba6:	74 2b                	je     10002bd3 <firstRun(bool)+0x27e>
10002ba8:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ba9: R_386_32	term
10002bad:	83 ec 04             	sub    esp,0x4
10002bb0:	6a 0b                	push   0xb
10002bb2:	6a 18                	push   0x18
10002bb4:	50                   	push   eax
10002bb5:	e8 fc ff ff ff       	call   10002bb6 <firstRun(bool)+0x261>	10002bb6: R_386_PC32	VgaText::setCursor(int, int)
10002bba:	83 c4 10             	add    esp,0x10
10002bbd:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bbe: R_386_32	term
10002bc2:	83 ec 08             	sub    esp,0x8
10002bc5:	68 5b a8 00 10       	push   0x1000a85b	10002bc6: R_386_32	.text
10002bca:	50                   	push   eax
10002bcb:	e8 fc ff ff ff       	call   10002bcc <firstRun(bool)+0x277>	10002bcc: R_386_PC32	VgaText::puts(char const*)
10002bd0:	83 c4 10             	add    esp,0x10
10002bd3:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bd4: R_386_32	term
10002bd8:	83 ec 04             	sub    esp,0x4
10002bdb:	6a 0d                	push   0xd
10002bdd:	6a 18                	push   0x18
10002bdf:	50                   	push   eax
10002be0:	e8 fc ff ff ff       	call   10002be1 <firstRun(bool)+0x28c>	10002be1: R_386_PC32	VgaText::setCursor(int, int)
10002be5:	83 c4 10             	add    esp,0x10
10002be8:	a1 00 00 00 00       	mov    eax,ds:0x0	10002be9: R_386_32	term
10002bed:	83 ec 08             	sub    esp,0x8
10002bf0:	68 63 a8 00 10       	push   0x1000a863	10002bf1: R_386_32	.text
10002bf5:	50                   	push   eax
10002bf6:	e8 fc ff ff ff       	call   10002bf7 <firstRun(bool)+0x2a2>	10002bf7: R_386_PC32	VgaText::puts(char const*)
10002bfb:	83 c4 10             	add    esp,0x10
10002bfe:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bff: R_386_32	term
10002c03:	83 ec 04             	sub    esp,0x4
10002c06:	6a 0f                	push   0xf
10002c08:	6a 18                	push   0x18
10002c0a:	50                   	push   eax
10002c0b:	e8 fc ff ff ff       	call   10002c0c <firstRun(bool)+0x2b7>	10002c0c: R_386_PC32	VgaText::setCursor(int, int)
10002c10:	83 c4 10             	add    esp,0x10
10002c13:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c14: R_386_32	term
10002c18:	83 ec 08             	sub    esp,0x8
10002c1b:	68 6c a8 00 10       	push   0x1000a86c	10002c1c: R_386_32	.text
10002c20:	50                   	push   eax
10002c21:	e8 fc ff ff ff       	call   10002c22 <firstRun(bool)+0x2cd>	10002c22: R_386_PC32	VgaText::puts(char const*)
10002c26:	83 c4 10             	add    esp,0x10
10002c29:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c2a: R_386_32	term
10002c2e:	83 ec 04             	sub    esp,0x4
10002c31:	6a 10                	push   0x10
10002c33:	6a 18                	push   0x18
10002c35:	50                   	push   eax
10002c36:	e8 fc ff ff ff       	call   10002c37 <firstRun(bool)+0x2e2>	10002c37: R_386_PC32	VgaText::setCursor(int, int)
10002c3b:	83 c4 10             	add    esp,0x10
10002c3e:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c3f: R_386_32	term
10002c43:	83 ec 08             	sub    esp,0x8
10002c46:	68 74 a8 00 10       	push   0x1000a874	10002c47: R_386_32	.text
10002c4b:	50                   	push   eax
10002c4c:	e8 fc ff ff ff       	call   10002c4d <firstRun(bool)+0x2f8>	10002c4d: R_386_PC32	VgaText::puts(char const*)
10002c51:	83 c4 10             	add    esp,0x10
10002c54:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c55: R_386_32	term
10002c59:	83 ec 04             	sub    esp,0x4
10002c5c:	6a 09                	push   0x9
10002c5e:	6a 21                	push   0x21
10002c60:	50                   	push   eax
10002c61:	e8 fc ff ff ff       	call   10002c62 <firstRun(bool)+0x30d>	10002c62: R_386_PC32	VgaText::setCursor(int, int)
10002c66:	83 c4 10             	add    esp,0x10
10002c69:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c6a: R_386_32	term
10002c6e:	6a 07                	push   0x7
10002c70:	6a 00                	push   0x0
10002c72:	68 80 a8 00 10       	push   0x1000a880	10002c73: R_386_32	.text
10002c77:	50                   	push   eax
10002c78:	e8 fc ff ff ff       	call   10002c79 <firstRun(bool)+0x324>	10002c79: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c7d:	83 c4 10             	add    esp,0x10
10002c80:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c81: R_386_32	term
10002c85:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10002c89:	75 07                	jne    10002c92 <firstRun(bool)+0x33d>
10002c8b:	ba a5 a8 00 10       	mov    edx,0x1000a8a5	10002c8c: R_386_32	.text
10002c90:	eb 05                	jmp    10002c97 <firstRun(bool)+0x342>
10002c92:	ba a8 a8 00 10       	mov    edx,0x1000a8a8	10002c93: R_386_32	.text
10002c97:	6a 0f                	push   0xf
10002c99:	6a 00                	push   0x0
10002c9b:	52                   	push   edx
10002c9c:	50                   	push   eax
10002c9d:	e8 fc ff ff ff       	call   10002c9e <firstRun(bool)+0x349>	10002c9e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002ca2:	83 c4 10             	add    esp,0x10
10002ca5:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ca6: R_386_32	term
10002caa:	83 ec 08             	sub    esp,0x8
10002cad:	6a 21                	push   0x21
10002caf:	50                   	push   eax
10002cb0:	e8 fc ff ff ff       	call   10002cb1 <firstRun(bool)+0x35c>	10002cb1: R_386_PC32	VgaText::setCursorX(int)
10002cb5:	83 c4 10             	add    esp,0x10
10002cb8:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cb9: R_386_32	term
10002cbd:	6a 07                	push   0x7
10002cbf:	6a 00                	push   0x0
10002cc1:	68 00 00 00 00       	push   0x0	10002cc2: R_386_32	currName
10002cc6:	50                   	push   eax
10002cc7:	e8 fc ff ff ff       	call   10002cc8 <firstRun(bool)+0x373>	10002cc8: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002ccc:	83 c4 10             	add    esp,0x10
10002ccf:	a0 00 00 00 00       	mov    al,ds:0x0	10002cd0: R_386_32	createNewUserMode
10002cd4:	83 f0 01             	xor    eax,0x1
10002cd7:	84 c0                	test   al,al
10002cd9:	74 7b                	je     10002d56 <firstRun(bool)+0x401>
10002cdb:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cdc: R_386_32	term
10002ce0:	83 ec 04             	sub    esp,0x4
10002ce3:	6a 0b                	push   0xb
10002ce5:	6a 21                	push   0x21
10002ce7:	50                   	push   eax
10002ce8:	e8 fc ff ff ff       	call   10002ce9 <firstRun(bool)+0x394>	10002ce9: R_386_PC32	VgaText::setCursor(int, int)
10002ced:	83 c4 10             	add    esp,0x10
10002cf0:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cf1: R_386_32	term
10002cf5:	6a 07                	push   0x7
10002cf7:	6a 00                	push   0x0
10002cf9:	68 80 a8 00 10       	push   0x1000a880	10002cfa: R_386_32	.text
10002cfe:	50                   	push   eax
10002cff:	e8 fc ff ff ff       	call   10002d00 <firstRun(bool)+0x3ab>	10002d00: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d04:	83 c4 10             	add    esp,0x10
10002d07:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d08: R_386_32	term
10002d0c:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10002d10:	75 07                	jne    10002d19 <firstRun(bool)+0x3c4>
10002d12:	ba a5 a8 00 10       	mov    edx,0x1000a8a5	10002d13: R_386_32	.text
10002d17:	eb 05                	jmp    10002d1e <firstRun(bool)+0x3c9>
10002d19:	ba a8 a8 00 10       	mov    edx,0x1000a8a8	10002d1a: R_386_32	.text
10002d1e:	6a 0f                	push   0xf
10002d20:	6a 00                	push   0x0
10002d22:	52                   	push   edx
10002d23:	50                   	push   eax
10002d24:	e8 fc ff ff ff       	call   10002d25 <firstRun(bool)+0x3d0>	10002d25: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d29:	83 c4 10             	add    esp,0x10
10002d2c:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d2d: R_386_32	term
10002d31:	83 ec 08             	sub    esp,0x8
10002d34:	6a 21                	push   0x21
10002d36:	50                   	push   eax
10002d37:	e8 fc ff ff ff       	call   10002d38 <firstRun(bool)+0x3e3>	10002d38: R_386_PC32	VgaText::setCursorX(int)
10002d3c:	83 c4 10             	add    esp,0x10
10002d3f:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d40: R_386_32	term
10002d44:	6a 07                	push   0x7
10002d46:	6a 00                	push   0x0
10002d48:	68 00 00 00 00       	push   0x0	10002d49: R_386_32	currComp
10002d4d:	50                   	push   eax
10002d4e:	e8 fc ff ff ff       	call   10002d4f <firstRun(bool)+0x3fa>	10002d4f: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d53:	83 c4 10             	add    esp,0x10
10002d56:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d57: R_386_32	term
10002d5b:	83 ec 04             	sub    esp,0x4
10002d5e:	6a 0d                	push   0xd
10002d60:	6a 21                	push   0x21
10002d62:	50                   	push   eax
10002d63:	e8 fc ff ff ff       	call   10002d64 <firstRun(bool)+0x40f>	10002d64: R_386_PC32	VgaText::setCursor(int, int)
10002d68:	83 c4 10             	add    esp,0x10
10002d6b:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d6c: R_386_32	term
10002d70:	6a 07                	push   0x7
10002d72:	6a 00                	push   0x0
10002d74:	68 80 a8 00 10       	push   0x1000a880	10002d75: R_386_32	.text
10002d79:	50                   	push   eax
10002d7a:	e8 fc ff ff ff       	call   10002d7b <firstRun(bool)+0x426>	10002d7b: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d7f:	83 c4 10             	add    esp,0x10
10002d82:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d83: R_386_32	term
10002d87:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10002d8b:	75 07                	jne    10002d94 <firstRun(bool)+0x43f>
10002d8d:	ba a5 a8 00 10       	mov    edx,0x1000a8a5	10002d8e: R_386_32	.text
10002d92:	eb 05                	jmp    10002d99 <firstRun(bool)+0x444>
10002d94:	ba a8 a8 00 10       	mov    edx,0x1000a8a8	10002d95: R_386_32	.text
10002d99:	6a 0f                	push   0xf
10002d9b:	6a 00                	push   0x0
10002d9d:	52                   	push   edx
10002d9e:	50                   	push   eax
10002d9f:	e8 fc ff ff ff       	call   10002da0 <firstRun(bool)+0x44b>	10002da0: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002da4:	83 c4 10             	add    esp,0x10
10002da7:	a1 00 00 00 00       	mov    eax,ds:0x0	10002da8: R_386_32	term
10002dac:	83 ec 08             	sub    esp,0x8
10002daf:	6a 21                	push   0x21
10002db1:	50                   	push   eax
10002db2:	e8 fc ff ff ff       	call   10002db3 <firstRun(bool)+0x45e>	10002db3: R_386_PC32	VgaText::setCursorX(int)
10002db7:	83 c4 10             	add    esp,0x10
10002dba:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
10002dc1:	83 ec 0c             	sub    esp,0xc
10002dc4:	68 00 00 00 00       	push   0x0	10002dc5: R_386_32	passwbufA
10002dc9:	e8 fc ff ff ff       	call   10002dca <firstRun(bool)+0x475>	10002dca: R_386_PC32	strlen
10002dce:	83 c4 10             	add    esp,0x10
10002dd1:	89 c2                	mov    edx,eax
10002dd3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002dd6:	39 c2                	cmp    edx,eax
10002dd8:	76 1c                	jbe    10002df6 <firstRun(bool)+0x4a1>
10002dda:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ddb: R_386_32	term
10002ddf:	6a 07                	push   0x7
10002de1:	6a 00                	push   0x0
10002de3:	68 ac a8 00 10       	push   0x1000a8ac	10002de4: R_386_32	.text
10002de8:	50                   	push   eax
10002de9:	e8 fc ff ff ff       	call   10002dea <firstRun(bool)+0x495>	10002dea: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002dee:	83 c4 10             	add    esp,0x10
10002df1:	ff 45 d8             	inc    DWORD PTR [ebp-0x28]
10002df4:	eb cb                	jmp    10002dc1 <firstRun(bool)+0x46c>
10002df6:	a1 00 00 00 00       	mov    eax,ds:0x0	10002df7: R_386_32	term
10002dfb:	83 ec 04             	sub    esp,0x4
10002dfe:	6a 0f                	push   0xf
10002e00:	6a 21                	push   0x21
10002e02:	50                   	push   eax
10002e03:	e8 fc ff ff ff       	call   10002e04 <firstRun(bool)+0x4af>	10002e04: R_386_PC32	VgaText::setCursor(int, int)
10002e08:	83 c4 10             	add    esp,0x10
10002e0b:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e0c: R_386_32	term
10002e10:	6a 07                	push   0x7
10002e12:	6a 00                	push   0x0
10002e14:	68 80 a8 00 10       	push   0x1000a880	10002e15: R_386_32	.text
10002e19:	50                   	push   eax
10002e1a:	e8 fc ff ff ff       	call   10002e1b <firstRun(bool)+0x4c6>	10002e1b: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e1f:	83 c4 10             	add    esp,0x10
10002e22:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e23: R_386_32	term
10002e27:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
10002e2b:	75 07                	jne    10002e34 <firstRun(bool)+0x4df>
10002e2d:	ba a5 a8 00 10       	mov    edx,0x1000a8a5	10002e2e: R_386_32	.text
10002e32:	eb 05                	jmp    10002e39 <firstRun(bool)+0x4e4>
10002e34:	ba a8 a8 00 10       	mov    edx,0x1000a8a8	10002e35: R_386_32	.text
10002e39:	6a 0f                	push   0xf
10002e3b:	6a 00                	push   0x0
10002e3d:	52                   	push   edx
10002e3e:	50                   	push   eax
10002e3f:	e8 fc ff ff ff       	call   10002e40 <firstRun(bool)+0x4eb>	10002e40: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e44:	83 c4 10             	add    esp,0x10
10002e47:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e48: R_386_32	term
10002e4c:	83 ec 08             	sub    esp,0x8
10002e4f:	6a 21                	push   0x21
10002e51:	50                   	push   eax
10002e52:	e8 fc ff ff ff       	call   10002e53 <firstRun(bool)+0x4fe>	10002e53: R_386_PC32	VgaText::setCursorX(int)
10002e57:	83 c4 10             	add    esp,0x10
10002e5a:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10002e61:	83 ec 0c             	sub    esp,0xc
10002e64:	68 00 00 00 00       	push   0x0	10002e65: R_386_32	passwbufB
10002e69:	e8 fc ff ff ff       	call   10002e6a <firstRun(bool)+0x515>	10002e6a: R_386_PC32	strlen
10002e6e:	83 c4 10             	add    esp,0x10
10002e71:	89 c2                	mov    edx,eax
10002e73:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10002e76:	39 c2                	cmp    edx,eax
10002e78:	76 1c                	jbe    10002e96 <firstRun(bool)+0x541>
10002e7a:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e7b: R_386_32	term
10002e7f:	6a 07                	push   0x7
10002e81:	6a 00                	push   0x0
10002e83:	68 ac a8 00 10       	push   0x1000a8ac	10002e84: R_386_32	.text
10002e88:	50                   	push   eax
10002e89:	e8 fc ff ff ff       	call   10002e8a <firstRun(bool)+0x535>	10002e8a: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e8e:	83 c4 10             	add    esp,0x10
10002e91:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10002e94:	eb cb                	jmp    10002e61 <firstRun(bool)+0x50c>
10002e96:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e97: R_386_32	term
10002e9b:	83 ec 04             	sub    esp,0x4
10002e9e:	6a 14                	push   0x14
10002ea0:	6a 18                	push   0x18
10002ea2:	50                   	push   eax
10002ea3:	e8 fc ff ff ff       	call   10002ea4 <firstRun(bool)+0x54f>	10002ea4: R_386_PC32	VgaText::setCursor(int, int)
10002ea8:	83 c4 10             	add    esp,0x10
10002eab:	a1 00 00 00 00       	mov    eax,ds:0x0	10002eac: R_386_32	term
10002eb0:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10002eb4:	75 07                	jne    10002ebd <firstRun(bool)+0x568>
10002eb6:	ba ae a8 00 10       	mov    edx,0x1000a8ae	10002eb7: R_386_32	.text
10002ebb:	eb 05                	jmp    10002ec2 <firstRun(bool)+0x56d>
10002ebd:	ba c4 a8 00 10       	mov    edx,0x1000a8c4	10002ebe: R_386_32	.text
10002ec2:	6a 0f                	push   0xf
10002ec4:	6a 08                	push   0x8
10002ec6:	52                   	push   edx
10002ec7:	50                   	push   eax
10002ec8:	e8 fc ff ff ff       	call   10002ec9 <firstRun(bool)+0x574>	10002ec9: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002ecd:	83 c4 10             	add    esp,0x10
10002ed0:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ed1: R_386_32	term
10002ed5:	83 ec 04             	sub    esp,0x4
10002ed8:	6a 14                	push   0x14
10002eda:	6a 3c                	push   0x3c
10002edc:	50                   	push   eax
10002edd:	e8 fc ff ff ff       	call   10002ede <firstRun(bool)+0x589>	10002ede: R_386_PC32	VgaText::setCursor(int, int)
10002ee2:	83 c4 10             	add    esp,0x10
10002ee5:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10002ee9:	74 19                	je     10002f04 <firstRun(bool)+0x5af>
10002eeb:	a1 00 00 00 00       	mov    eax,ds:0x0	10002eec: R_386_32	term
10002ef0:	6a 08                	push   0x8
10002ef2:	6a 0f                	push   0xf
10002ef4:	68 db a8 00 10       	push   0x1000a8db	10002ef5: R_386_32	.text
10002ef9:	50                   	push   eax
10002efa:	e8 fc ff ff ff       	call   10002efb <firstRun(bool)+0x5a6>	10002efb: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002eff:	83 c4 10             	add    esp,0x10
10002f02:	eb 17                	jmp    10002f1b <firstRun(bool)+0x5c6>
10002f04:	a1 00 00 00 00       	mov    eax,ds:0x0	10002f05: R_386_32	term
10002f09:	6a 01                	push   0x1
10002f0b:	6a 0f                	push   0xf
10002f0d:	68 db a8 00 10       	push   0x1000a8db	10002f0e: R_386_32	.text
10002f12:	50                   	push   eax
10002f13:	e8 fc ff ff ff       	call   10002f14 <firstRun(bool)+0x5bf>	10002f14: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002f18:	83 c4 10             	add    esp,0x10
10002f1b:	a1 00 00 00 00       	mov    eax,ds:0x0	10002f1c: R_386_32	term
10002f20:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10002f24:	75 07                	jne    10002f2d <firstRun(bool)+0x5d8>
10002f26:	ba e4 a8 00 10       	mov    edx,0x1000a8e4	10002f27: R_386_32	.text
10002f2b:	eb 05                	jmp    10002f32 <firstRun(bool)+0x5dd>
10002f2d:	ba a8 a8 00 10       	mov    edx,0x1000a8a8	10002f2e: R_386_32	.text
10002f32:	6a 0f                	push   0xf
10002f34:	6a 00                	push   0x0
10002f36:	52                   	push   edx
10002f37:	50                   	push   eax
10002f38:	e8 fc ff ff ff       	call   10002f39 <firstRun(bool)+0x5e4>	10002f39: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002f3d:	83 c4 10             	add    esp,0x10
10002f40:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10002f44:	75 28                	jne    10002f6e <firstRun(bool)+0x619>
10002f46:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002f48: R_386_32	term
10002f4c:	83 ec 0c             	sub    esp,0xc
10002f4f:	68 00 00 00 00       	push   0x0	10002f50: R_386_32	currName
10002f54:	e8 fc ff ff ff       	call   10002f55 <firstRun(bool)+0x600>	10002f55: R_386_PC32	strlen
10002f59:	83 c4 10             	add    esp,0x10
10002f5c:	83 c0 21             	add    eax,0x21
10002f5f:	83 ec 04             	sub    esp,0x4
10002f62:	6a 09                	push   0x9
10002f64:	50                   	push   eax
10002f65:	53                   	push   ebx
10002f66:	e8 fc ff ff ff       	call   10002f67 <firstRun(bool)+0x612>	10002f67: R_386_PC32	VgaText::setCursor(int, int)
10002f6b:	83 c4 10             	add    esp,0x10
10002f6e:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10002f72:	75 28                	jne    10002f9c <firstRun(bool)+0x647>
10002f74:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002f76: R_386_32	term
10002f7a:	83 ec 0c             	sub    esp,0xc
10002f7d:	68 00 00 00 00       	push   0x0	10002f7e: R_386_32	currComp
10002f82:	e8 fc ff ff ff       	call   10002f83 <firstRun(bool)+0x62e>	10002f83: R_386_PC32	strlen
10002f87:	83 c4 10             	add    esp,0x10
10002f8a:	83 c0 21             	add    eax,0x21
10002f8d:	83 ec 04             	sub    esp,0x4
10002f90:	6a 0b                	push   0xb
10002f92:	50                   	push   eax
10002f93:	53                   	push   ebx
10002f94:	e8 fc ff ff ff       	call   10002f95 <firstRun(bool)+0x640>	10002f95: R_386_PC32	VgaText::setCursor(int, int)
10002f99:	83 c4 10             	add    esp,0x10
10002f9c:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10002fa0:	75 28                	jne    10002fca <firstRun(bool)+0x675>
10002fa2:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002fa4: R_386_32	term
10002fa8:	83 ec 0c             	sub    esp,0xc
10002fab:	68 00 00 00 00       	push   0x0	10002fac: R_386_32	passwbufA
10002fb0:	e8 fc ff ff ff       	call   10002fb1 <firstRun(bool)+0x65c>	10002fb1: R_386_PC32	strlen
10002fb5:	83 c4 10             	add    esp,0x10
10002fb8:	83 c0 21             	add    eax,0x21
10002fbb:	83 ec 04             	sub    esp,0x4
10002fbe:	6a 0d                	push   0xd
10002fc0:	50                   	push   eax
10002fc1:	53                   	push   ebx
10002fc2:	e8 fc ff ff ff       	call   10002fc3 <firstRun(bool)+0x66e>	10002fc3: R_386_PC32	VgaText::setCursor(int, int)
10002fc7:	83 c4 10             	add    esp,0x10
10002fca:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
10002fce:	75 28                	jne    10002ff8 <firstRun(bool)+0x6a3>
10002fd0:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002fd2: R_386_32	term
10002fd6:	83 ec 0c             	sub    esp,0xc
10002fd9:	68 00 00 00 00       	push   0x0	10002fda: R_386_32	passwbufB
10002fde:	e8 fc ff ff ff       	call   10002fdf <firstRun(bool)+0x68a>	10002fdf: R_386_PC32	strlen
10002fe3:	83 c4 10             	add    esp,0x10
10002fe6:	83 c0 21             	add    eax,0x21
10002fe9:	83 ec 04             	sub    esp,0x4
10002fec:	6a 0f                	push   0xf
10002fee:	50                   	push   eax
10002fef:	53                   	push   ebx
10002ff0:	e8 fc ff ff ff       	call   10002ff1 <firstRun(bool)+0x69c>	10002ff1: R_386_PC32	VgaText::setCursor(int, int)
10002ff5:	83 c4 10             	add    esp,0x10
10002ff8:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10002ffc:	75 15                	jne    10003013 <firstRun(bool)+0x6be>
10002ffe:	a1 00 00 00 00       	mov    eax,ds:0x0	10002fff: R_386_32	term
10003003:	83 ec 04             	sub    esp,0x4
10003006:	6a 02                	push   0x2
10003008:	6a 00                	push   0x0
1000300a:	50                   	push   eax
1000300b:	e8 fc ff ff ff       	call   1000300c <firstRun(bool)+0x6b7>	1000300c: R_386_PC32	VgaText::setCursor(int, int)
10003010:	83 c4 10             	add    esp,0x10
10003013:	a0 00 00 00 00       	mov    al,ds:0x0	10003014: R_386_32	installKey
10003018:	84 c0                	test   al,al
1000301a:	0f 94 c0             	sete   al
1000301d:	84 c0                	test   al,al
1000301f:	74 02                	je     10003023 <firstRun(bool)+0x6ce>
10003021:	eb f0                	jmp    10003013 <firstRun(bool)+0x6be>
10003023:	a1 00 00 00 00       	mov    eax,ds:0x0	10003024: R_386_32	term
10003028:	05 82 00 00 00       	add    eax,0x82
1000302d:	83 ec 04             	sub    esp,0x4
10003030:	6a 10                	push   0x10
10003032:	6a 00                	push   0x0
10003034:	50                   	push   eax
10003035:	e8 fc ff ff ff       	call   10003036 <firstRun(bool)+0x6e1>	10003036: R_386_PC32	memset
1000303a:	83 c4 10             	add    esp,0x10
1000303d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000303e: R_386_32	term
10003042:	05 02 01 00 00       	add    eax,0x102
10003047:	83 ec 04             	sub    esp,0x4
1000304a:	6a 10                	push   0x10
1000304c:	6a 00                	push   0x0
1000304e:	50                   	push   eax
1000304f:	e8 fc ff ff ff       	call   10003050 <firstRun(bool)+0x6fb>	10003050: R_386_PC32	memset
10003054:	83 c4 10             	add    esp,0x10
10003057:	a0 00 00 00 00       	mov    al,ds:0x0	10003058: R_386_32	installKey
1000305c:	3c 09                	cmp    al,0x9
1000305e:	74 09                	je     10003069 <firstRun(bool)+0x714>
10003060:	a0 00 00 00 00       	mov    al,ds:0x0	10003061: R_386_32	installKey
10003065:	3c 0a                	cmp    al,0xa
10003067:	75 04                	jne    1000306d <firstRun(bool)+0x718>
10003069:	b0 01                	mov    al,0x1
1000306b:	eb 02                	jmp    1000306f <firstRun(bool)+0x71a>
1000306d:	b0 00                	mov    al,0x0
1000306f:	84 c0                	test   al,al
10003071:	0f 84 c6 00 00 00    	je     1000313d <firstRun(bool)+0x7e8>
10003077:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
1000307b:	75 0d                	jne    1000308a <firstRun(bool)+0x735>
1000307d:	a0 00 00 00 00       	mov    al,ds:0x0	1000307e: R_386_32	installKey
10003082:	3c 0a                	cmp    al,0xa
10003084:	75 04                	jne    1000308a <firstRun(bool)+0x735>
10003086:	b0 01                	mov    al,0x1
10003088:	eb 02                	jmp    1000308c <firstRun(bool)+0x737>
1000308a:	b0 00                	mov    al,0x0
1000308c:	84 c0                	test   al,al
1000308e:	74 72                	je     10003102 <firstRun(bool)+0x7ad>
10003090:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003092: R_386_32	installKey
10003097:	83 ec 08             	sub    esp,0x8
1000309a:	68 00 00 00 00       	push   0x0	1000309b: R_386_32	passwbufB
1000309f:	68 00 00 00 00       	push   0x0	100030a0: R_386_32	passwbufA
100030a4:	e8 fc ff ff ff       	call   100030a5 <firstRun(bool)+0x750>	100030a5: R_386_PC32	strcmp
100030a9:	83 c4 10             	add    esp,0x10
100030ac:	85 c0                	test   eax,eax
100030ae:	75 21                	jne    100030d1 <firstRun(bool)+0x77c>
100030b0:	83 ec 0c             	sub    esp,0xc
100030b3:	68 00 00 00 00       	push   0x0	100030b4: R_386_32	currName
100030b8:	e8 fc ff ff ff       	call   100030b9 <firstRun(bool)+0x764>	100030b9: R_386_PC32	strlen
100030bd:	83 c4 10             	add    esp,0x10
100030c0:	85 c0                	test   eax,eax
100030c2:	0f 85 22 03 00 00    	jne    100033ea <firstRun(bool)+0xa95>
100030c8:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100030cf:	eb 57                	jmp    10003128 <firstRun(bool)+0x7d3>
100030d1:	c7 45 e0 02 00 00 00 	mov    DWORD PTR [ebp-0x20],0x2
100030d8:	83 ec 04             	sub    esp,0x4
100030db:	6a 30                	push   0x30
100030dd:	6a 00                	push   0x0
100030df:	68 00 00 00 00       	push   0x0	100030e0: R_386_32	passwbufA
100030e4:	e8 fc ff ff ff       	call   100030e5 <firstRun(bool)+0x790>	100030e5: R_386_PC32	memset
100030e9:	83 c4 10             	add    esp,0x10
100030ec:	83 ec 04             	sub    esp,0x4
100030ef:	6a 30                	push   0x30
100030f1:	6a 00                	push   0x0
100030f3:	68 00 00 00 00       	push   0x0	100030f4: R_386_32	passwbufB
100030f8:	e8 fc ff ff ff       	call   100030f9 <firstRun(bool)+0x7a4>	100030f9: R_386_PC32	memset
100030fd:	83 c4 10             	add    esp,0x10
10003100:	eb 26                	jmp    10003128 <firstRun(bool)+0x7d3>
10003102:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10003105:	a0 00 00 00 00       	mov    al,ds:0x0	10003106: R_386_32	createNewUserMode
1000310a:	84 c0                	test   al,al
1000310c:	74 0d                	je     1000311b <firstRun(bool)+0x7c6>
1000310e:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10003112:	75 07                	jne    1000311b <firstRun(bool)+0x7c6>
10003114:	c7 45 e0 02 00 00 00 	mov    DWORD PTR [ebp-0x20],0x2
1000311b:	83 7d e0 05          	cmp    DWORD PTR [ebp-0x20],0x5
1000311f:	75 07                	jne    10003128 <firstRun(bool)+0x7d3>
10003121:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10003128:	83 ec 0c             	sub    esp,0xc
1000312b:	68 2c 01 00 00       	push   0x12c
10003130:	e8 fc ff ff ff       	call   10003131 <firstRun(bool)+0x7dc>	10003131: R_386_PC32	milliTenthSleep(unsigned int)
10003135:	83 c4 10             	add    esp,0x10
10003138:	e9 a1 02 00 00       	jmp    100033de <firstRun(bool)+0xa89>
1000313d:	a0 00 00 00 00       	mov    al,ds:0x0	1000313e: R_386_32	installKey
10003142:	3c 1f                	cmp    al,0x1f
10003144:	7e 0d                	jle    10003153 <firstRun(bool)+0x7fe>
10003146:	a0 00 00 00 00       	mov    al,ds:0x0	10003147: R_386_32	installKey
1000314b:	3c 7f                	cmp    al,0x7f
1000314d:	74 04                	je     10003153 <firstRun(bool)+0x7fe>
1000314f:	b0 01                	mov    al,0x1
10003151:	eb 02                	jmp    10003155 <firstRun(bool)+0x800>
10003153:	b0 00                	mov    al,0x0
10003155:	84 c0                	test   al,al
10003157:	0f 84 39 01 00 00    	je     10003296 <firstRun(bool)+0x941>
1000315d:	a0 00 00 00 00       	mov    al,ds:0x0	1000315e: R_386_32	installKey
10003162:	88 85 c6 fe ff ff    	mov    BYTE PTR [ebp-0x13a],al
10003168:	c6 85 c7 fe ff ff 00 	mov    BYTE PTR [ebp-0x139],0x0
1000316f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10003173:	75 7e                	jne    100031f3 <firstRun(bool)+0x89e>
10003175:	83 ec 0c             	sub    esp,0xc
10003178:	68 00 00 00 00       	push   0x0	10003179: R_386_32	currName
1000317d:	e8 fc ff ff ff       	call   1000317e <firstRun(bool)+0x829>	1000317e: R_386_PC32	strlen
10003182:	83 c4 10             	add    esp,0x10
10003185:	83 f8 22             	cmp    eax,0x22
10003188:	77 69                	ja     100031f3 <firstRun(bool)+0x89e>
1000318a:	a0 00 00 00 00       	mov    al,ds:0x0	1000318b: R_386_32	installKey
1000318f:	3c 40                	cmp    al,0x40
10003191:	7e 09                	jle    1000319c <firstRun(bool)+0x847>
10003193:	a0 00 00 00 00       	mov    al,ds:0x0	10003194: R_386_32	installKey
10003198:	3c 59                	cmp    al,0x59
1000319a:	7f 36                	jg     100031d2 <firstRun(bool)+0x87d>
1000319c:	a0 00 00 00 00       	mov    al,ds:0x0	1000319d: R_386_32	installKey
100031a1:	3c 60                	cmp    al,0x60
100031a3:	7e 09                	jle    100031ae <firstRun(bool)+0x859>
100031a5:	a0 00 00 00 00       	mov    al,ds:0x0	100031a6: R_386_32	installKey
100031aa:	3c 79                	cmp    al,0x79
100031ac:	7f 24                	jg     100031d2 <firstRun(bool)+0x87d>
100031ae:	a0 00 00 00 00       	mov    al,ds:0x0	100031af: R_386_32	installKey
100031b3:	3c 2f                	cmp    al,0x2f
100031b5:	7e 09                	jle    100031c0 <firstRun(bool)+0x86b>
100031b7:	a0 00 00 00 00       	mov    al,ds:0x0	100031b8: R_386_32	installKey
100031bc:	3c 38                	cmp    al,0x38
100031be:	7f 12                	jg     100031d2 <firstRun(bool)+0x87d>
100031c0:	a0 00 00 00 00       	mov    al,ds:0x0	100031c1: R_386_32	installKey
100031c5:	3c 5f                	cmp    al,0x5f
100031c7:	74 09                	je     100031d2 <firstRun(bool)+0x87d>
100031c9:	a0 00 00 00 00       	mov    al,ds:0x0	100031ca: R_386_32	installKey
100031ce:	3c 20                	cmp    al,0x20
100031d0:	75 04                	jne    100031d6 <firstRun(bool)+0x881>
100031d2:	b0 01                	mov    al,0x1
100031d4:	eb 02                	jmp    100031d8 <firstRun(bool)+0x883>
100031d6:	b0 00                	mov    al,0x0
100031d8:	84 c0                	test   al,al
100031da:	74 17                	je     100031f3 <firstRun(bool)+0x89e>
100031dc:	83 ec 08             	sub    esp,0x8
100031df:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
100031e5:	50                   	push   eax
100031e6:	68 00 00 00 00       	push   0x0	100031e7: R_386_32	currName
100031eb:	e8 fc ff ff ff       	call   100031ec <firstRun(bool)+0x897>	100031ec: R_386_PC32	strcat
100031f0:	83 c4 10             	add    esp,0x10
100031f3:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
100031f7:	75 2c                	jne    10003225 <firstRun(bool)+0x8d0>
100031f9:	83 ec 0c             	sub    esp,0xc
100031fc:	68 00 00 00 00       	push   0x0	100031fd: R_386_32	currComp
10003201:	e8 fc ff ff ff       	call   10003202 <firstRun(bool)+0x8ad>	10003202: R_386_PC32	strlen
10003206:	83 c4 10             	add    esp,0x10
10003209:	83 f8 22             	cmp    eax,0x22
1000320c:	77 17                	ja     10003225 <firstRun(bool)+0x8d0>
1000320e:	83 ec 08             	sub    esp,0x8
10003211:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003217:	50                   	push   eax
10003218:	68 00 00 00 00       	push   0x0	10003219: R_386_32	currComp
1000321d:	e8 fc ff ff ff       	call   1000321e <firstRun(bool)+0x8c9>	1000321e: R_386_PC32	strcat
10003222:	83 c4 10             	add    esp,0x10
10003225:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10003229:	75 2c                	jne    10003257 <firstRun(bool)+0x902>
1000322b:	83 ec 0c             	sub    esp,0xc
1000322e:	68 00 00 00 00       	push   0x0	1000322f: R_386_32	passwbufA
10003233:	e8 fc ff ff ff       	call   10003234 <firstRun(bool)+0x8df>	10003234: R_386_PC32	strlen
10003238:	83 c4 10             	add    esp,0x10
1000323b:	83 f8 22             	cmp    eax,0x22
1000323e:	77 17                	ja     10003257 <firstRun(bool)+0x902>
10003240:	83 ec 08             	sub    esp,0x8
10003243:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003249:	50                   	push   eax
1000324a:	68 00 00 00 00       	push   0x0	1000324b: R_386_32	passwbufA
1000324f:	e8 fc ff ff ff       	call   10003250 <firstRun(bool)+0x8fb>	10003250: R_386_PC32	strcat
10003254:	83 c4 10             	add    esp,0x10
10003257:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
1000325b:	0f 85 7d 01 00 00    	jne    100033de <firstRun(bool)+0xa89>
10003261:	83 ec 0c             	sub    esp,0xc
10003264:	68 00 00 00 00       	push   0x0	10003265: R_386_32	passwbufB
10003269:	e8 fc ff ff ff       	call   1000326a <firstRun(bool)+0x915>	1000326a: R_386_PC32	strlen
1000326e:	83 c4 10             	add    esp,0x10
10003271:	83 f8 22             	cmp    eax,0x22
10003274:	0f 87 64 01 00 00    	ja     100033de <firstRun(bool)+0xa89>
1000327a:	83 ec 08             	sub    esp,0x8
1000327d:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003283:	50                   	push   eax
10003284:	68 00 00 00 00       	push   0x0	10003285: R_386_32	passwbufB
10003289:	e8 fc ff ff ff       	call   1000328a <firstRun(bool)+0x935>	1000328a: R_386_PC32	strcat
1000328e:	83 c4 10             	add    esp,0x10
10003291:	e9 48 01 00 00       	jmp    100033de <firstRun(bool)+0xa89>
10003296:	a0 00 00 00 00       	mov    al,ds:0x0	10003297: R_386_32	installKey
1000329b:	3c 1b                	cmp    al,0x1b
1000329d:	75 0d                	jne    100032ac <firstRun(bool)+0x957>
1000329f:	a0 00 00 00 00       	mov    al,ds:0x0	100032a0: R_386_32	createNewUserMode
100032a4:	84 c0                	test   al,al
100032a6:	74 04                	je     100032ac <firstRun(bool)+0x957>
100032a8:	b0 01                	mov    al,0x1
100032aa:	eb 02                	jmp    100032ae <firstRun(bool)+0x959>
100032ac:	b0 00                	mov    al,0x0
100032ae:	84 c0                	test   al,al
100032b0:	74 0c                	je     100032be <firstRun(bool)+0x969>
100032b2:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100032b4: R_386_32	createNewUserMode
100032b9:	e9 49 1c 00 00       	jmp    10004f07 <firstRun(bool)+0x25b2>
100032be:	a0 00 00 00 00       	mov    al,ds:0x0	100032bf: R_386_32	installKey
100032c3:	3c 08                	cmp    al,0x8
100032c5:	0f 94 c0             	sete   al
100032c8:	84 c0                	test   al,al
100032ca:	0f 84 ca 00 00 00    	je     1000339a <firstRun(bool)+0xa45>
100032d0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100032d4:	75 2c                	jne    10003302 <firstRun(bool)+0x9ad>
100032d6:	83 ec 0c             	sub    esp,0xc
100032d9:	68 00 00 00 00       	push   0x0	100032da: R_386_32	currName
100032de:	e8 fc ff ff ff       	call   100032df <firstRun(bool)+0x98a>	100032df: R_386_PC32	strlen
100032e3:	83 c4 10             	add    esp,0x10
100032e6:	85 c0                	test   eax,eax
100032e8:	74 18                	je     10003302 <firstRun(bool)+0x9ad>
100032ea:	83 ec 0c             	sub    esp,0xc
100032ed:	68 00 00 00 00       	push   0x0	100032ee: R_386_32	currName
100032f2:	e8 fc ff ff ff       	call   100032f3 <firstRun(bool)+0x99e>	100032f3: R_386_PC32	strlen
100032f7:	83 c4 10             	add    esp,0x10
100032fa:	48                   	dec    eax
100032fb:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	100032fd: R_386_32	currName
10003302:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10003306:	75 2c                	jne    10003334 <firstRun(bool)+0x9df>
10003308:	83 ec 0c             	sub    esp,0xc
1000330b:	68 00 00 00 00       	push   0x0	1000330c: R_386_32	currComp
10003310:	e8 fc ff ff ff       	call   10003311 <firstRun(bool)+0x9bc>	10003311: R_386_PC32	strlen
10003315:	83 c4 10             	add    esp,0x10
10003318:	85 c0                	test   eax,eax
1000331a:	74 18                	je     10003334 <firstRun(bool)+0x9df>
1000331c:	83 ec 0c             	sub    esp,0xc
1000331f:	68 00 00 00 00       	push   0x0	10003320: R_386_32	currComp
10003324:	e8 fc ff ff ff       	call   10003325 <firstRun(bool)+0x9d0>	10003325: R_386_PC32	strlen
10003329:	83 c4 10             	add    esp,0x10
1000332c:	48                   	dec    eax
1000332d:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	1000332f: R_386_32	currComp
10003334:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10003338:	75 2c                	jne    10003366 <firstRun(bool)+0xa11>
1000333a:	83 ec 0c             	sub    esp,0xc
1000333d:	68 00 00 00 00       	push   0x0	1000333e: R_386_32	passwbufA
10003342:	e8 fc ff ff ff       	call   10003343 <firstRun(bool)+0x9ee>	10003343: R_386_PC32	strlen
10003347:	83 c4 10             	add    esp,0x10
1000334a:	85 c0                	test   eax,eax
1000334c:	74 18                	je     10003366 <firstRun(bool)+0xa11>
1000334e:	83 ec 0c             	sub    esp,0xc
10003351:	68 00 00 00 00       	push   0x0	10003352: R_386_32	passwbufA
10003356:	e8 fc ff ff ff       	call   10003357 <firstRun(bool)+0xa02>	10003357: R_386_PC32	strlen
1000335b:	83 c4 10             	add    esp,0x10
1000335e:	48                   	dec    eax
1000335f:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003361: R_386_32	passwbufA
10003366:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
1000336a:	75 72                	jne    100033de <firstRun(bool)+0xa89>
1000336c:	83 ec 0c             	sub    esp,0xc
1000336f:	68 00 00 00 00       	push   0x0	10003370: R_386_32	passwbufB
10003374:	e8 fc ff ff ff       	call   10003375 <firstRun(bool)+0xa20>	10003375: R_386_PC32	strlen
10003379:	83 c4 10             	add    esp,0x10
1000337c:	85 c0                	test   eax,eax
1000337e:	74 5e                	je     100033de <firstRun(bool)+0xa89>
10003380:	83 ec 0c             	sub    esp,0xc
10003383:	68 00 00 00 00       	push   0x0	10003384: R_386_32	passwbufB
10003388:	e8 fc ff ff ff       	call   10003389 <firstRun(bool)+0xa34>	10003389: R_386_PC32	strlen
1000338d:	83 c4 10             	add    esp,0x10
10003390:	48                   	dec    eax
10003391:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003393: R_386_32	passwbufB
10003398:	eb 44                	jmp    100033de <firstRun(bool)+0xa89>
1000339a:	a0 00 00 00 00       	mov    al,ds:0x0	1000339b: R_386_32	installKey
1000339f:	3c 7f                	cmp    al,0x7f
100033a1:	0f 94 c0             	sete   al
100033a4:	84 c0                	test   al,al
100033a6:	74 36                	je     100033de <firstRun(bool)+0xa89>
100033a8:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
100033ab:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
100033af:	75 07                	jne    100033b8 <firstRun(bool)+0xa63>
100033b1:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100033b8:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
100033bc:	75 10                	jne    100033ce <firstRun(bool)+0xa79>
100033be:	a0 00 00 00 00       	mov    al,ds:0x0	100033bf: R_386_32	createNewUserMode
100033c3:	84 c0                	test   al,al
100033c5:	74 07                	je     100033ce <firstRun(bool)+0xa79>
100033c7:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100033ce:	83 ec 0c             	sub    esp,0xc
100033d1:	68 2c 01 00 00       	push   0x12c
100033d6:	e8 fc ff ff ff       	call   100033d7 <firstRun(bool)+0xa82>	100033d7: R_386_PC32	milliTenthSleep(unsigned int)
100033db:	83 c4 10             	add    esp,0x10
100033de:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100033e0: R_386_32	installKey
100033e5:	e9 6a f8 ff ff       	jmp    10002c54 <firstRun(bool)+0x2ff>
100033ea:	90                   	nop
100033eb:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100033ed: R_386_32	installKey
100033f2:	83 ec 0c             	sub    esp,0xc
100033f5:	68 d0 07 00 00       	push   0x7d0
100033fa:	e8 fc ff ff ff       	call   100033fb <firstRun(bool)+0xaa6>	100033fb: R_386_PC32	milliTenthSleep(unsigned int)
100033ff:	83 c4 10             	add    esp,0x10
10003402:	e8 fc ff ff ff       	call   10003403 <firstRun(bool)+0xaae>	10003403: R_386_PC32	drawBootScreen()
10003407:	c7 45 bc 08 00 00 00 	mov    DWORD PTR [ebp-0x44],0x8
1000340e:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10003410: R_386_32	_bcrypt_errno
10003418:	83 ec 08             	sub    esp,0x8
1000341b:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
10003421:	50                   	push   eax
10003422:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10003425:	e8 fc ff ff ff       	call   10003426 <firstRun(bool)+0xad1>	10003426: R_386_PC32	bcrypt_gensalt
1000342a:	83 c4 10             	add    esp,0x10
1000342d:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10003430:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
10003434:	75 09                	jne    1000343f <firstRun(bool)+0xaea>
10003436:	a1 00 00 00 00       	mov    eax,ds:0x0	10003437: R_386_32	_bcrypt_errno
1000343b:	85 c0                	test   eax,eax
1000343d:	74 5e                	je     1000349d <firstRun(bool)+0xb48>
1000343f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10003446:	83 ec 08             	sub    esp,0x8
10003449:	68 e8 a8 00 10       	push   0x1000a8e8	1000344a: R_386_32	.text
1000344e:	68 00 00 00 00       	push   0x0	1000344f: R_386_32	currName
10003453:	e8 fc ff ff ff       	call   10003454 <firstRun(bool)+0xaff>	10003454: R_386_PC32	strcpy
10003458:	83 c4 10             	add    esp,0x10
1000345b:	83 ec 08             	sub    esp,0x8
1000345e:	68 f7 a8 00 10       	push   0x1000a8f7	1000345f: R_386_32	.text
10003463:	68 00 00 00 00       	push   0x0	10003464: R_386_32	currComp
10003468:	e8 fc ff ff ff       	call   10003469 <firstRun(bool)+0xb14>	10003469: R_386_PC32	strcpy
1000346d:	83 c4 10             	add    esp,0x10
10003470:	83 ec 04             	sub    esp,0x4
10003473:	6a 50                	push   0x50
10003475:	6a 00                	push   0x0
10003477:	68 00 00 00 00       	push   0x0	10003478: R_386_32	passwbufA
1000347c:	e8 fc ff ff ff       	call   1000347d <firstRun(bool)+0xb28>	1000347d: R_386_PC32	memset
10003481:	83 c4 10             	add    esp,0x10
10003484:	83 ec 04             	sub    esp,0x4
10003487:	6a 50                	push   0x50
10003489:	6a 00                	push   0x0
1000348b:	68 00 00 00 00       	push   0x0	1000348c: R_386_32	passwbufB
10003490:	e8 fc ff ff ff       	call   10003491 <firstRun(bool)+0xb3c>	10003491: R_386_PC32	memset
10003495:	83 c4 10             	add    esp,0x10
10003498:	e9 30 f6 ff ff       	jmp    10002acd <firstRun(bool)+0x178>
1000349d:	83 ec 08             	sub    esp,0x8
100034a0:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
100034a6:	50                   	push   eax
100034a7:	68 00 00 00 00       	push   0x0	100034a8: R_386_32	passwsalt
100034ac:	e8 fc ff ff ff       	call   100034ad <firstRun(bool)+0xb58>	100034ad: R_386_PC32	strcpy
100034b1:	83 c4 10             	add    esp,0x10
100034b4:	83 ec 04             	sub    esp,0x4
100034b7:	68 00 00 00 00       	push   0x0	100034b8: R_386_32	passwhash
100034bc:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
100034c2:	50                   	push   eax
100034c3:	68 00 00 00 00       	push   0x0	100034c4: R_386_32	passwbufA
100034c8:	e8 fc ff ff ff       	call   100034c9 <firstRun(bool)+0xb74>	100034c9: R_386_PC32	bcrypt_hashpw
100034cd:	83 c4 10             	add    esp,0x10
100034d0:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100034d3:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100034d7:	75 09                	jne    100034e2 <firstRun(bool)+0xb8d>
100034d9:	a1 00 00 00 00       	mov    eax,ds:0x0	100034da: R_386_32	_bcrypt_errno
100034de:	85 c0                	test   eax,eax
100034e0:	74 5e                	je     10003540 <firstRun(bool)+0xbeb>
100034e2:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100034e9:	83 ec 08             	sub    esp,0x8
100034ec:	68 e8 a8 00 10       	push   0x1000a8e8	100034ed: R_386_32	.text
100034f1:	68 00 00 00 00       	push   0x0	100034f2: R_386_32	currName
100034f6:	e8 fc ff ff ff       	call   100034f7 <firstRun(bool)+0xba2>	100034f7: R_386_PC32	strcpy
100034fb:	83 c4 10             	add    esp,0x10
100034fe:	83 ec 08             	sub    esp,0x8
10003501:	68 09 a9 00 10       	push   0x1000a909	10003502: R_386_32	.text
10003506:	68 00 00 00 00       	push   0x0	10003507: R_386_32	currComp
1000350b:	e8 fc ff ff ff       	call   1000350c <firstRun(bool)+0xbb7>	1000350c: R_386_PC32	strcpy
10003510:	83 c4 10             	add    esp,0x10
10003513:	83 ec 04             	sub    esp,0x4
10003516:	6a 50                	push   0x50
10003518:	6a 00                	push   0x0
1000351a:	68 00 00 00 00       	push   0x0	1000351b: R_386_32	passwbufA
1000351f:	e8 fc ff ff ff       	call   10003520 <firstRun(bool)+0xbcb>	10003520: R_386_PC32	memset
10003524:	83 c4 10             	add    esp,0x10
10003527:	83 ec 04             	sub    esp,0x4
1000352a:	6a 50                	push   0x50
1000352c:	6a 00                	push   0x0
1000352e:	68 00 00 00 00       	push   0x0	1000352f: R_386_32	passwbufB
10003533:	e8 fc ff ff ff       	call   10003534 <firstRun(bool)+0xbdf>	10003534: R_386_PC32	memset
10003538:	83 c4 10             	add    esp,0x10
1000353b:	e9 8d f5 ff ff       	jmp    10002acd <firstRun(bool)+0x178>
10003540:	83 ec 04             	sub    esp,0x4
10003543:	6a 50                	push   0x50
10003545:	6a 00                	push   0x0
10003547:	68 00 00 00 00       	push   0x0	10003548: R_386_32	passwbufA
1000354c:	e8 fc ff ff ff       	call   1000354d <firstRun(bool)+0xbf8>	1000354d: R_386_PC32	memset
10003551:	83 c4 10             	add    esp,0x10
10003554:	83 ec 04             	sub    esp,0x4
10003557:	6a 50                	push   0x50
10003559:	6a 00                	push   0x0
1000355b:	68 00 00 00 00       	push   0x0	1000355c: R_386_32	passwbufB
10003560:	e8 fc ff ff ff       	call   10003561 <firstRun(bool)+0xc0c>	10003561: R_386_PC32	memset
10003565:	83 c4 10             	add    esp,0x10
10003568:	a0 00 00 00 00       	mov    al,ds:0x0	10003569: R_386_32	createNewUserMode
1000356d:	84 c0                	test   al,al
1000356f:	74 16                	je     10003587 <firstRun(bool)+0xc32>
10003571:	83 ec 0c             	sub    esp,0xc
10003574:	68 00 00 00 00       	push   0x0	10003575: R_386_32	currName
10003579:	e8 fc ff ff ff       	call   1000357a <firstRun(bool)+0xc25>	1000357a: R_386_PC32	createUser(char const*)
1000357e:	83 c4 10             	add    esp,0x10
10003581:	90                   	nop
10003582:	e9 80 19 00 00       	jmp    10004f07 <firstRun(bool)+0x25b2>
10003587:	83 ec 0c             	sub    esp,0xc
1000358a:	68 d0 07 00 00       	push   0x7d0
1000358f:	e8 fc ff ff ff       	call   10003590 <firstRun(bool)+0xc3b>	10003590: R_386_PC32	milliTenthSleep(unsigned int)
10003594:	83 c4 10             	add    esp,0x10
10003597:	eb 01                	jmp    1000359a <firstRun(bool)+0xc45>
10003599:	90                   	nop
1000359a:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000359c: R_386_32	installKey
100035a1:	e8 fc ff ff ff       	call   100035a2 <firstRun(bool)+0xc4d>	100035a2: R_386_PC32	drawBootScreen()
100035a6:	83 ec 0c             	sub    esp,0xc
100035a9:	68 1b a9 00 10       	push   0x1000a91b	100035aa: R_386_32	.text
100035ae:	6a 0d                	push   0xd
100035b0:	6a 32                	push   0x32
100035b2:	6a 02                	push   0x2
100035b4:	6a 16                	push   0x16
100035b6:	e8 fc ff ff ff       	call   100035b7 <firstRun(bool)+0xc62>	100035b7: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100035bb:	83 c4 20             	add    esp,0x20
100035be:	a1 00 00 00 00       	mov    eax,ds:0x0	100035bf: R_386_32	Krnl::computer
100035c3:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
100035c9:	a1 00 00 00 00       	mov    eax,ds:0x0	100035ca: R_386_32	Krnl::computer
100035ce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100035d4:	8b 00                	mov    eax,DWORD PTR [eax]
100035d6:	83 c0 28             	add    eax,0x28
100035d9:	8b 00                	mov    eax,DWORD PTR [eax]
100035db:	8d 95 98 fe ff ff    	lea    edx,[ebp-0x168]
100035e1:	83 ec 08             	sub    esp,0x8
100035e4:	51                   	push   ecx
100035e5:	52                   	push   edx
100035e6:	ff d0                	call   eax
100035e8:	83 c4 0c             	add    esp,0xc
100035eb:	8b 85 98 fe ff ff    	mov    eax,DWORD PTR [ebp-0x168]
100035f1:	8b 95 9c fe ff ff    	mov    edx,DWORD PTR [ebp-0x164]
100035f7:	89 85 d4 fe ff ff    	mov    DWORD PTR [ebp-0x12c],eax
100035fd:	89 95 d8 fe ff ff    	mov    DWORD PTR [ebp-0x128],edx
10003603:	83 ec 08             	sub    esp,0x8
10003606:	68 29 a9 00 10       	push   0x1000a929	10003607: R_386_32	.text
1000360b:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003611:	50                   	push   eax
10003612:	e8 fc ff ff ff       	call   10003613 <firstRun(bool)+0xcbe>	10003613: R_386_PC32	strcpy
10003617:	83 c4 10             	add    esp,0x10
1000361a:	8a 85 d4 fe ff ff    	mov    al,BYTE PTR [ebp-0x12c]
10003620:	0f b6 d0             	movzx  edx,al
10003623:	89 d0                	mov    eax,edx
10003625:	c1 e0 02             	shl    eax,0x2
10003628:	01 d0                	add    eax,edx
1000362a:	c1 e0 03             	shl    eax,0x3
1000362d:	01 d0                	add    eax,edx
1000362f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003636:	01 d0                	add    eax,edx
10003638:	66 c1 e8 08          	shr    ax,0x8
1000363c:	c0 e8 03             	shr    al,0x3
1000363f:	83 c0 30             	add    eax,0x30
10003642:	88 85 40 ff ff ff    	mov    BYTE PTR [ebp-0xc0],al
10003648:	8a 8d d4 fe ff ff    	mov    cl,BYTE PTR [ebp-0x12c]
1000364e:	0f b6 d1             	movzx  edx,cl
10003651:	89 d0                	mov    eax,edx
10003653:	c1 e0 02             	shl    eax,0x2
10003656:	01 d0                	add    eax,edx
10003658:	c1 e0 03             	shl    eax,0x3
1000365b:	01 d0                	add    eax,edx
1000365d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003664:	01 d0                	add    eax,edx
10003666:	66 c1 e8 08          	shr    ax,0x8
1000366a:	88 c2                	mov    dl,al
1000366c:	c0 ea 03             	shr    dl,0x3
1000366f:	88 d0                	mov    al,dl
10003671:	c1 e0 02             	shl    eax,0x2
10003674:	01 d0                	add    eax,edx
10003676:	d1 e0                	shl    eax,1
10003678:	29 c1                	sub    ecx,eax
1000367a:	88 ca                	mov    dl,cl
1000367c:	8d 42 30             	lea    eax,[edx+0x30]
1000367f:	88 85 41 ff ff ff    	mov    BYTE PTR [ebp-0xbf],al
10003685:	8a 85 d5 fe ff ff    	mov    al,BYTE PTR [ebp-0x12b]
1000368b:	0f b6 c8             	movzx  ecx,al
1000368e:	b8 67 66 66 66       	mov    eax,0x66666667
10003693:	f7 e9                	imul   ecx
10003695:	c1 fa 02             	sar    edx,0x2
10003698:	89 c8                	mov    eax,ecx
1000369a:	c1 f8 1f             	sar    eax,0x1f
1000369d:	29 c2                	sub    edx,eax
1000369f:	89 d0                	mov    eax,edx
100036a1:	83 c0 30             	add    eax,0x30
100036a4:	88 85 43 ff ff ff    	mov    BYTE PTR [ebp-0xbd],al
100036aa:	8a 85 d5 fe ff ff    	mov    al,BYTE PTR [ebp-0x12b]
100036b0:	0f b6 c8             	movzx  ecx,al
100036b3:	b8 67 66 66 66       	mov    eax,0x66666667
100036b8:	f7 e9                	imul   ecx
100036ba:	c1 fa 02             	sar    edx,0x2
100036bd:	89 c8                	mov    eax,ecx
100036bf:	c1 f8 1f             	sar    eax,0x1f
100036c2:	29 c2                	sub    edx,eax
100036c4:	89 d0                	mov    eax,edx
100036c6:	c1 e0 02             	shl    eax,0x2
100036c9:	01 d0                	add    eax,edx
100036cb:	01 c0                	add    eax,eax
100036cd:	29 c1                	sub    ecx,eax
100036cf:	89 ca                	mov    edx,ecx
100036d1:	88 d0                	mov    al,dl
100036d3:	83 c0 30             	add    eax,0x30
100036d6:	88 85 44 ff ff ff    	mov    BYTE PTR [ebp-0xbc],al
100036dc:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
100036e3:	0f b7 c8             	movzx  ecx,ax
100036e6:	b8 d3 4d 62 10       	mov    eax,0x10624dd3
100036eb:	f7 e9                	imul   ecx
100036ed:	c1 fa 06             	sar    edx,0x6
100036f0:	89 c8                	mov    eax,ecx
100036f2:	c1 f8 1f             	sar    eax,0x1f
100036f5:	29 c2                	sub    edx,eax
100036f7:	89 d0                	mov    eax,edx
100036f9:	b9 0a 00 00 00       	mov    ecx,0xa
100036fe:	99                   	cdq    
100036ff:	f7 f9                	idiv   ecx
10003701:	89 d0                	mov    eax,edx
10003703:	83 c0 30             	add    eax,0x30
10003706:	88 85 46 ff ff ff    	mov    BYTE PTR [ebp-0xba],al
1000370c:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10003713:	0f b7 c8             	movzx  ecx,ax
10003716:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
1000371b:	f7 e9                	imul   ecx
1000371d:	c1 fa 05             	sar    edx,0x5
10003720:	89 c8                	mov    eax,ecx
10003722:	c1 f8 1f             	sar    eax,0x1f
10003725:	29 c2                	sub    edx,eax
10003727:	89 d0                	mov    eax,edx
10003729:	b9 0a 00 00 00       	mov    ecx,0xa
1000372e:	99                   	cdq    
1000372f:	f7 f9                	idiv   ecx
10003731:	89 d0                	mov    eax,edx
10003733:	83 c0 30             	add    eax,0x30
10003736:	88 85 47 ff ff ff    	mov    BYTE PTR [ebp-0xb9],al
1000373c:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10003743:	0f b7 c8             	movzx  ecx,ax
10003746:	b8 67 66 66 66       	mov    eax,0x66666667
1000374b:	f7 e9                	imul   ecx
1000374d:	c1 fa 02             	sar    edx,0x2
10003750:	89 c8                	mov    eax,ecx
10003752:	c1 f8 1f             	sar    eax,0x1f
10003755:	89 d1                	mov    ecx,edx
10003757:	29 c1                	sub    ecx,eax
10003759:	b8 67 66 66 66       	mov    eax,0x66666667
1000375e:	f7 e9                	imul   ecx
10003760:	c1 fa 02             	sar    edx,0x2
10003763:	89 c8                	mov    eax,ecx
10003765:	c1 f8 1f             	sar    eax,0x1f
10003768:	29 c2                	sub    edx,eax
1000376a:	89 d0                	mov    eax,edx
1000376c:	c1 e0 02             	shl    eax,0x2
1000376f:	01 d0                	add    eax,edx
10003771:	01 c0                	add    eax,eax
10003773:	29 c1                	sub    ecx,eax
10003775:	89 ca                	mov    edx,ecx
10003777:	88 d0                	mov    al,dl
10003779:	83 c0 30             	add    eax,0x30
1000377c:	88 85 48 ff ff ff    	mov    BYTE PTR [ebp-0xb8],al
10003782:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10003789:	0f b7 c0             	movzx  eax,ax
1000378c:	b9 0a 00 00 00       	mov    ecx,0xa
10003791:	99                   	cdq    
10003792:	f7 f9                	idiv   ecx
10003794:	89 d0                	mov    eax,edx
10003796:	83 c0 30             	add    eax,0x30
10003799:	88 85 49 ff ff ff    	mov    BYTE PTR [ebp-0xb7],al
1000379f:	8a 85 d8 fe ff ff    	mov    al,BYTE PTR [ebp-0x128]
100037a5:	0f b6 d0             	movzx  edx,al
100037a8:	89 d0                	mov    eax,edx
100037aa:	c1 e0 02             	shl    eax,0x2
100037ad:	01 d0                	add    eax,edx
100037af:	c1 e0 03             	shl    eax,0x3
100037b2:	01 d0                	add    eax,edx
100037b4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100037bb:	01 d0                	add    eax,edx
100037bd:	66 c1 e8 08          	shr    ax,0x8
100037c1:	c0 e8 03             	shr    al,0x3
100037c4:	83 c0 30             	add    eax,0x30
100037c7:	88 85 4b ff ff ff    	mov    BYTE PTR [ebp-0xb5],al
100037cd:	8a 8d d8 fe ff ff    	mov    cl,BYTE PTR [ebp-0x128]
100037d3:	0f b6 d1             	movzx  edx,cl
100037d6:	89 d0                	mov    eax,edx
100037d8:	c1 e0 02             	shl    eax,0x2
100037db:	01 d0                	add    eax,edx
100037dd:	c1 e0 03             	shl    eax,0x3
100037e0:	01 d0                	add    eax,edx
100037e2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100037e9:	01 d0                	add    eax,edx
100037eb:	66 c1 e8 08          	shr    ax,0x8
100037ef:	88 c2                	mov    dl,al
100037f1:	c0 ea 03             	shr    dl,0x3
100037f4:	88 d0                	mov    al,dl
100037f6:	c1 e0 02             	shl    eax,0x2
100037f9:	01 d0                	add    eax,edx
100037fb:	d1 e0                	shl    eax,1
100037fd:	29 c1                	sub    ecx,eax
100037ff:	88 ca                	mov    dl,cl
10003801:	8d 42 30             	lea    eax,[edx+0x30]
10003804:	88 85 4c ff ff ff    	mov    BYTE PTR [ebp-0xb4],al
1000380a:	8a 85 d9 fe ff ff    	mov    al,BYTE PTR [ebp-0x127]
10003810:	0f b6 d0             	movzx  edx,al
10003813:	89 d0                	mov    eax,edx
10003815:	c1 e0 02             	shl    eax,0x2
10003818:	01 d0                	add    eax,edx
1000381a:	c1 e0 03             	shl    eax,0x3
1000381d:	01 d0                	add    eax,edx
1000381f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003826:	01 d0                	add    eax,edx
10003828:	66 c1 e8 08          	shr    ax,0x8
1000382c:	c0 e8 03             	shr    al,0x3
1000382f:	83 c0 30             	add    eax,0x30
10003832:	88 85 4e ff ff ff    	mov    BYTE PTR [ebp-0xb2],al
10003838:	8a 8d d9 fe ff ff    	mov    cl,BYTE PTR [ebp-0x127]
1000383e:	0f b6 d1             	movzx  edx,cl
10003841:	89 d0                	mov    eax,edx
10003843:	c1 e0 02             	shl    eax,0x2
10003846:	01 d0                	add    eax,edx
10003848:	c1 e0 03             	shl    eax,0x3
1000384b:	01 d0                	add    eax,edx
1000384d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003854:	01 d0                	add    eax,edx
10003856:	66 c1 e8 08          	shr    ax,0x8
1000385a:	88 c2                	mov    dl,al
1000385c:	c0 ea 03             	shr    dl,0x3
1000385f:	88 d0                	mov    al,dl
10003861:	c1 e0 02             	shl    eax,0x2
10003864:	01 d0                	add    eax,edx
10003866:	d1 e0                	shl    eax,1
10003868:	29 c1                	sub    ecx,eax
1000386a:	88 ca                	mov    dl,cl
1000386c:	8d 42 30             	lea    eax,[edx+0x30]
1000386f:	88 85 4f ff ff ff    	mov    BYTE PTR [ebp-0xb1],al
10003875:	8a 85 da fe ff ff    	mov    al,BYTE PTR [ebp-0x126]
1000387b:	0f b6 d0             	movzx  edx,al
1000387e:	89 d0                	mov    eax,edx
10003880:	c1 e0 02             	shl    eax,0x2
10003883:	01 d0                	add    eax,edx
10003885:	c1 e0 03             	shl    eax,0x3
10003888:	01 d0                	add    eax,edx
1000388a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003891:	01 d0                	add    eax,edx
10003893:	66 c1 e8 08          	shr    ax,0x8
10003897:	c0 e8 03             	shr    al,0x3
1000389a:	83 c0 30             	add    eax,0x30
1000389d:	88 85 51 ff ff ff    	mov    BYTE PTR [ebp-0xaf],al
100038a3:	8a 8d da fe ff ff    	mov    cl,BYTE PTR [ebp-0x126]
100038a9:	0f b6 d1             	movzx  edx,cl
100038ac:	89 d0                	mov    eax,edx
100038ae:	c1 e0 02             	shl    eax,0x2
100038b1:	01 d0                	add    eax,edx
100038b3:	c1 e0 03             	shl    eax,0x3
100038b6:	01 d0                	add    eax,edx
100038b8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100038bf:	01 d0                	add    eax,edx
100038c1:	66 c1 e8 08          	shr    ax,0x8
100038c5:	88 c2                	mov    dl,al
100038c7:	c0 ea 03             	shr    dl,0x3
100038ca:	88 d0                	mov    al,dl
100038cc:	c1 e0 02             	shl    eax,0x2
100038cf:	01 d0                	add    eax,edx
100038d1:	d1 e0                	shl    eax,1
100038d3:	29 c1                	sub    ecx,eax
100038d5:	88 ca                	mov    dl,cl
100038d7:	8d 42 30             	lea    eax,[edx+0x30]
100038da:	88 85 52 ff ff ff    	mov    BYTE PTR [ebp-0xae],al
100038e0:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100038e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100038e8: R_386_32	term
100038ec:	83 ec 04             	sub    esp,0x4
100038ef:	6a 05                	push   0x5
100038f1:	6a 18                	push   0x18
100038f3:	50                   	push   eax
100038f4:	e8 fc ff ff ff       	call   100038f5 <firstRun(bool)+0xfa0>	100038f5: R_386_PC32	VgaText::setCursor(int, int)
100038f9:	83 c4 10             	add    esp,0x10
100038fc:	a1 00 00 00 00       	mov    eax,ds:0x0	100038fd: R_386_32	term
10003901:	83 ec 08             	sub    esp,0x8
10003904:	68 40 a9 00 10       	push   0x1000a940	10003905: R_386_32	.text
10003909:	50                   	push   eax
1000390a:	e8 fc ff ff ff       	call   1000390b <firstRun(bool)+0xfb6>	1000390b: R_386_PC32	VgaText::puts(char const*)
1000390f:	83 c4 10             	add    esp,0x10
10003912:	a1 00 00 00 00       	mov    eax,ds:0x0	10003913: R_386_32	term
10003917:	83 ec 04             	sub    esp,0x4
1000391a:	6a 06                	push   0x6
1000391c:	6a 18                	push   0x18
1000391e:	50                   	push   eax
1000391f:	e8 fc ff ff ff       	call   10003920 <firstRun(bool)+0xfcb>	10003920: R_386_PC32	VgaText::setCursor(int, int)
10003924:	83 c4 10             	add    esp,0x10
10003927:	a1 00 00 00 00       	mov    eax,ds:0x0	10003928: R_386_32	term
1000392c:	83 ec 08             	sub    esp,0x8
1000392f:	68 68 a9 00 10       	push   0x1000a968	10003930: R_386_32	.text
10003934:	50                   	push   eax
10003935:	e8 fc ff ff ff       	call   10003936 <firstRun(bool)+0xfe1>	10003936: R_386_PC32	VgaText::puts(char const*)
1000393a:	83 c4 10             	add    esp,0x10
1000393d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000393e: R_386_32	term
10003942:	83 ec 04             	sub    esp,0x4
10003945:	6a 09                	push   0x9
10003947:	6a 1a                	push   0x1a
10003949:	50                   	push   eax
1000394a:	e8 fc ff ff ff       	call   1000394b <firstRun(bool)+0xff6>	1000394b: R_386_PC32	VgaText::setCursor(int, int)
1000394f:	83 c4 10             	add    esp,0x10
10003952:	a1 00 00 00 00       	mov    eax,ds:0x0	10003953: R_386_32	term
10003957:	6a 0f                	push   0xf
10003959:	6a 07                	push   0x7
1000395b:	68 7e a9 00 10       	push   0x1000a97e	1000395c: R_386_32	.text
10003960:	50                   	push   eax
10003961:	e8 fc ff ff ff       	call   10003962 <firstRun(bool)+0x100d>	10003962: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003966:	83 c4 10             	add    esp,0x10
10003969:	a1 00 00 00 00       	mov    eax,ds:0x0	1000396a: R_386_32	term
1000396e:	83 ec 04             	sub    esp,0x4
10003971:	6a 18                	push   0x18
10003973:	6a 11                	push   0x11
10003975:	50                   	push   eax
10003976:	e8 fc ff ff ff       	call   10003977 <firstRun(bool)+0x1022>	10003977: R_386_PC32	VgaText::setCursor(int, int)
1000397b:	83 c4 10             	add    esp,0x10
1000397e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000397f: R_386_32	term
10003983:	6a 0b                	push   0xb
10003985:	6a 03                	push   0x3
10003987:	68 92 a9 00 10       	push   0x1000a992	10003988: R_386_32	.text
1000398c:	50                   	push   eax
1000398d:	e8 fc ff ff ff       	call   1000398e <firstRun(bool)+0x1039>	1000398e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003992:	83 c4 10             	add    esp,0x10
10003995:	a1 00 00 00 00       	mov    eax,ds:0x0	10003996: R_386_32	term
1000399a:	83 ec 04             	sub    esp,0x4
1000399d:	6a 08                	push   0x8
1000399f:	6a 1a                	push   0x1a
100039a1:	50                   	push   eax
100039a2:	e8 fc ff ff ff       	call   100039a3 <firstRun(bool)+0x104e>	100039a3: R_386_PC32	VgaText::setCursor(int, int)
100039a7:	83 c4 10             	add    esp,0x10
100039aa:	a1 00 00 00 00       	mov    eax,ds:0x0	100039ab: R_386_32	term
100039af:	83 ec 08             	sub    esp,0x8
100039b2:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
100039b8:	52                   	push   edx
100039b9:	50                   	push   eax
100039ba:	e8 fc ff ff ff       	call   100039bb <firstRun(bool)+0x1066>	100039bb: R_386_PC32	VgaText::puts(char const*)
100039bf:	83 c4 10             	add    esp,0x10
100039c2:	a1 00 00 00 00       	mov    eax,ds:0x0	100039c3: R_386_32	term
100039c7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100039ca:	83 c2 1a             	add    edx,0x1a
100039cd:	83 ec 04             	sub    esp,0x4
100039d0:	6a 08                	push   0x8
100039d2:	52                   	push   edx
100039d3:	50                   	push   eax
100039d4:	e8 fc ff ff ff       	call   100039d5 <firstRun(bool)+0x1080>	100039d5: R_386_PC32	VgaText::setCursor(int, int)
100039d9:	83 c4 10             	add    esp,0x10
100039dc:	a1 00 00 00 00       	mov    eax,ds:0x0	100039dd: R_386_32	term
100039e1:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
100039e7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100039ea:	01 ca                	add    edx,ecx
100039ec:	8a 12                	mov    dl,BYTE PTR [edx]
100039ee:	0f be d2             	movsx  edx,dl
100039f1:	6a 00                	push   0x0
100039f3:	6a 0f                	push   0xf
100039f5:	52                   	push   edx
100039f6:	50                   	push   eax
100039f7:	e8 fc ff ff ff       	call   100039f8 <firstRun(bool)+0x10a3>	100039f8: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100039fc:	83 c4 10             	add    esp,0x10
100039ff:	8a 85 4b ff ff ff    	mov    al,BYTE PTR [ebp-0xb5]
10003a05:	0f be c0             	movsx  eax,al
10003a08:	8d 50 d0             	lea    edx,[eax-0x30]
10003a0b:	89 d0                	mov    eax,edx
10003a0d:	c1 e0 02             	shl    eax,0x2
10003a10:	01 d0                	add    eax,edx
10003a12:	01 c0                	add    eax,eax
10003a14:	89 c2                	mov    edx,eax
10003a16:	8a 85 4c ff ff ff    	mov    al,BYTE PTR [ebp-0xb4]
10003a1c:	0f be c0             	movsx  eax,al
10003a1f:	83 e8 30             	sub    eax,0x30
10003a22:	01 d0                	add    eax,edx
10003a24:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10003a27:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
10003a2a:	b9 0c 00 00 00       	mov    ecx,0xc
10003a2f:	99                   	cdq    
10003a30:	f7 f9                	idiv   ecx
10003a32:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
10003a35:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
10003a39:	75 07                	jne    10003a42 <firstRun(bool)+0x10ed>
10003a3b:	c7 45 d0 0c 00 00 00 	mov    DWORD PTR [ebp-0x30],0xc
10003a42:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [ebp-0xb2]
10003a48:	0f be c0             	movsx  eax,al
10003a4b:	8d 50 d0             	lea    edx,[eax-0x30]
10003a4e:	89 d0                	mov    eax,edx
10003a50:	c1 e0 02             	shl    eax,0x2
10003a53:	01 d0                	add    eax,edx
10003a55:	01 c0                	add    eax,eax
10003a57:	89 c2                	mov    edx,eax
10003a59:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [ebp-0xb1]
10003a5f:	0f be c0             	movsx  eax,al
10003a62:	83 e8 30             	sub    eax,0x30
10003a65:	01 d0                	add    eax,edx
10003a67:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
10003a6a:	83 ec 04             	sub    esp,0x4
10003a6d:	6a 10                	push   0x10
10003a6f:	6a 00                	push   0x0
10003a71:	8d 85 b6 fe ff ff    	lea    eax,[ebp-0x14a]
10003a77:	50                   	push   eax
10003a78:	e8 fc ff ff ff       	call   10003a79 <firstRun(bool)+0x1124>	10003a79: R_386_PC32	memset
10003a7d:	83 c4 10             	add    esp,0x10
10003a80:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [ebp-0x54],0x0
10003a87:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003a8a:	8d 50 01             	lea    edx,[eax+0x1]
10003a8d:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003a90:	c6 84 05 b6 fe ff ff 28 	mov    BYTE PTR [ebp+eax*1-0x14a],0x28
10003a98:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
10003a9b:	b8 67 66 66 66       	mov    eax,0x66666667
10003aa0:	f7 e9                	imul   ecx
10003aa2:	c1 fa 02             	sar    edx,0x2
10003aa5:	89 c8                	mov    eax,ecx
10003aa7:	c1 f8 1f             	sar    eax,0x1f
10003aaa:	29 c2                	sub    edx,eax
10003aac:	89 d0                	mov    eax,edx
10003aae:	8d 48 30             	lea    ecx,[eax+0x30]
10003ab1:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003ab4:	8d 50 01             	lea    edx,[eax+0x1]
10003ab7:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003aba:	88 ca                	mov    dl,cl
10003abc:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003ac3:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
10003ac6:	b8 67 66 66 66       	mov    eax,0x66666667
10003acb:	f7 e9                	imul   ecx
10003acd:	c1 fa 02             	sar    edx,0x2
10003ad0:	89 c8                	mov    eax,ecx
10003ad2:	c1 f8 1f             	sar    eax,0x1f
10003ad5:	29 c2                	sub    edx,eax
10003ad7:	89 d0                	mov    eax,edx
10003ad9:	c1 e0 02             	shl    eax,0x2
10003adc:	01 d0                	add    eax,edx
10003ade:	01 c0                	add    eax,eax
10003ae0:	29 c1                	sub    ecx,eax
10003ae2:	89 ca                	mov    edx,ecx
10003ae4:	88 d0                	mov    al,dl
10003ae6:	8d 48 30             	lea    ecx,[eax+0x30]
10003ae9:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003aec:	8d 50 01             	lea    edx,[eax+0x1]
10003aef:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003af2:	88 ca                	mov    dl,cl
10003af4:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003afb:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003afe:	8d 50 01             	lea    edx,[eax+0x1]
10003b01:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003b04:	c6 84 05 b6 fe ff ff 3a 	mov    BYTE PTR [ebp+eax*1-0x14a],0x3a
10003b0c:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
10003b0f:	b8 67 66 66 66       	mov    eax,0x66666667
10003b14:	f7 e9                	imul   ecx
10003b16:	c1 fa 02             	sar    edx,0x2
10003b19:	89 c8                	mov    eax,ecx
10003b1b:	c1 f8 1f             	sar    eax,0x1f
10003b1e:	29 c2                	sub    edx,eax
10003b20:	89 d0                	mov    eax,edx
10003b22:	8d 48 30             	lea    ecx,[eax+0x30]
10003b25:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b28:	8d 50 01             	lea    edx,[eax+0x1]
10003b2b:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003b2e:	88 ca                	mov    dl,cl
10003b30:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003b37:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
10003b3a:	b8 67 66 66 66       	mov    eax,0x66666667
10003b3f:	f7 e9                	imul   ecx
10003b41:	c1 fa 02             	sar    edx,0x2
10003b44:	89 c8                	mov    eax,ecx
10003b46:	c1 f8 1f             	sar    eax,0x1f
10003b49:	29 c2                	sub    edx,eax
10003b4b:	89 d0                	mov    eax,edx
10003b4d:	c1 e0 02             	shl    eax,0x2
10003b50:	01 d0                	add    eax,edx
10003b52:	01 c0                	add    eax,eax
10003b54:	29 c1                	sub    ecx,eax
10003b56:	89 ca                	mov    edx,ecx
10003b58:	88 d0                	mov    al,dl
10003b5a:	8d 48 30             	lea    ecx,[eax+0x30]
10003b5d:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b60:	8d 50 01             	lea    edx,[eax+0x1]
10003b63:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003b66:	88 ca                	mov    dl,cl
10003b68:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003b6f:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b72:	8d 50 01             	lea    edx,[eax+0x1]
10003b75:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003b78:	c6 84 05 b6 fe ff ff 20 	mov    BYTE PTR [ebp+eax*1-0x14a],0x20
10003b80:	83 7d b4 0b          	cmp    DWORD PTR [ebp-0x4c],0xb
10003b84:	7e 04                	jle    10003b8a <firstRun(bool)+0x1235>
10003b86:	b2 50                	mov    dl,0x50
10003b88:	eb 02                	jmp    10003b8c <firstRun(bool)+0x1237>
10003b8a:	b2 41                	mov    dl,0x41
10003b8c:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b8f:	8d 48 01             	lea    ecx,[eax+0x1]
10003b92:	89 4d ac             	mov    DWORD PTR [ebp-0x54],ecx
10003b95:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003b9c:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b9f:	8d 50 01             	lea    edx,[eax+0x1]
10003ba2:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003ba5:	c6 84 05 b6 fe ff ff 4d 	mov    BYTE PTR [ebp+eax*1-0x14a],0x4d
10003bad:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003bb0:	8d 50 01             	lea    edx,[eax+0x1]
10003bb3:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003bb6:	c6 84 05 b6 fe ff ff 29 	mov    BYTE PTR [ebp+eax*1-0x14a],0x29
10003bbe:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10003bc0: R_386_32	term
10003bc4:	83 ec 0c             	sub    esp,0xc
10003bc7:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003bcd:	50                   	push   eax
10003bce:	e8 fc ff ff ff       	call   10003bcf <firstRun(bool)+0x127a>	10003bcf: R_386_PC32	strlen
10003bd3:	83 c4 10             	add    esp,0x10
10003bd6:	83 c0 1e             	add    eax,0x1e
10003bd9:	83 ec 04             	sub    esp,0x4
10003bdc:	6a 08                	push   0x8
10003bde:	50                   	push   eax
10003bdf:	53                   	push   ebx
10003be0:	e8 fc ff ff ff       	call   10003be1 <firstRun(bool)+0x128c>	10003be1: R_386_PC32	VgaText::setCursor(int, int)
10003be5:	83 c4 10             	add    esp,0x10
10003be8:	a1 00 00 00 00       	mov    eax,ds:0x0	10003be9: R_386_32	term
10003bed:	83 ec 08             	sub    esp,0x8
10003bf0:	8d 95 b6 fe ff ff    	lea    edx,[ebp-0x14a]
10003bf6:	52                   	push   edx
10003bf7:	50                   	push   eax
10003bf8:	e8 fc ff ff ff       	call   10003bf9 <firstRun(bool)+0x12a4>	10003bf9: R_386_PC32	VgaText::puts(char const*)
10003bfd:	83 c4 10             	add    esp,0x10
10003c00:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c01: R_386_32	term
10003c05:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003c08:	83 c2 1a             	add    edx,0x1a
10003c0b:	83 ec 04             	sub    esp,0x4
10003c0e:	6a 08                	push   0x8
10003c10:	52                   	push   edx
10003c11:	50                   	push   eax
10003c12:	e8 fc ff ff ff       	call   10003c13 <firstRun(bool)+0x12be>	10003c13: R_386_PC32	VgaText::setCursor(int, int)
10003c17:	83 c4 10             	add    esp,0x10
10003c1a:	a0 00 00 00 00       	mov    al,ds:0x0	10003c1b: R_386_32	installKey
10003c1f:	84 c0                	test   al,al
10003c21:	0f 94 c0             	sete   al
10003c24:	84 c0                	test   al,al
10003c26:	74 02                	je     10003c2a <firstRun(bool)+0x12d5>
10003c28:	eb f0                	jmp    10003c1a <firstRun(bool)+0x12c5>
10003c2a:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c2b: R_386_32	term
10003c2f:	05 82 00 00 00       	add    eax,0x82
10003c34:	83 ec 04             	sub    esp,0x4
10003c37:	6a 10                	push   0x10
10003c39:	6a 00                	push   0x0
10003c3b:	50                   	push   eax
10003c3c:	e8 fc ff ff ff       	call   10003c3d <firstRun(bool)+0x12e8>	10003c3d: R_386_PC32	memset
10003c41:	83 c4 10             	add    esp,0x10
10003c44:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c45: R_386_32	term
10003c49:	05 02 01 00 00       	add    eax,0x102
10003c4e:	83 ec 04             	sub    esp,0x4
10003c51:	6a 10                	push   0x10
10003c53:	6a 00                	push   0x0
10003c55:	50                   	push   eax
10003c56:	e8 fc ff ff ff       	call   10003c57 <firstRun(bool)+0x1302>	10003c57: R_386_PC32	memset
10003c5b:	83 c4 10             	add    esp,0x10
10003c5e:	a0 00 00 00 00       	mov    al,ds:0x0	10003c5f: R_386_32	installKey
10003c63:	3c 03                	cmp    al,0x3
10003c65:	74 09                	je     10003c70 <firstRun(bool)+0x131b>
10003c67:	a0 00 00 00 00       	mov    al,ds:0x0	10003c68: R_386_32	installKey
10003c6c:	3c 08                	cmp    al,0x8
10003c6e:	75 04                	jne    10003c74 <firstRun(bool)+0x131f>
10003c70:	b0 01                	mov    al,0x1
10003c72:	eb 02                	jmp    10003c76 <firstRun(bool)+0x1321>
10003c74:	b0 00                	mov    al,0x0
10003c76:	84 c0                	test   al,al
10003c78:	74 58                	je     10003cd2 <firstRun(bool)+0x137d>
10003c7a:	ff 4d e4             	dec    DWORD PTR [ebp-0x1c]
10003c7d:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10003c81:	75 16                	jne    10003c99 <firstRun(bool)+0x1344>
10003c83:	83 ec 0c             	sub    esp,0xc
10003c86:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003c8c:	50                   	push   eax
10003c8d:	e8 fc ff ff ff       	call   10003c8e <firstRun(bool)+0x1339>	10003c8e: R_386_PC32	strlen
10003c92:	83 c4 10             	add    esp,0x10
10003c95:	48                   	dec    eax
10003c96:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10003c99:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003c9f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003ca2:	01 d0                	add    eax,edx
10003ca4:	8a 00                	mov    al,BYTE PTR [eax]
10003ca6:	3c 20                	cmp    al,0x20
10003ca8:	74 d0                	je     10003c7a <firstRun(bool)+0x1325>
10003caa:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003cb0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003cb3:	01 d0                	add    eax,edx
10003cb5:	8a 00                	mov    al,BYTE PTR [eax]
10003cb7:	3c 2f                	cmp    al,0x2f
10003cb9:	74 bf                	je     10003c7a <firstRun(bool)+0x1325>
10003cbb:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003cc1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003cc4:	01 d0                	add    eax,edx
10003cc6:	8a 00                	mov    al,BYTE PTR [eax]
10003cc8:	3c 3a                	cmp    al,0x3a
10003cca:	0f 85 f6 04 00 00    	jne    100041c6 <firstRun(bool)+0x1871>
10003cd0:	eb a8                	jmp    10003c7a <firstRun(bool)+0x1325>
10003cd2:	a0 00 00 00 00       	mov    al,ds:0x0	10003cd3: R_386_32	installKey
10003cd7:	3c 2f                	cmp    al,0x2f
10003cd9:	7e 09                	jle    10003ce4 <firstRun(bool)+0x138f>
10003cdb:	a0 00 00 00 00       	mov    al,ds:0x0	10003cdc: R_386_32	installKey
10003ce0:	3c 39                	cmp    al,0x39
10003ce2:	7e 12                	jle    10003cf6 <firstRun(bool)+0x13a1>
10003ce4:	a0 00 00 00 00       	mov    al,ds:0x0	10003ce5: R_386_32	installKey
10003ce9:	3c 20                	cmp    al,0x20
10003ceb:	74 09                	je     10003cf6 <firstRun(bool)+0x13a1>
10003ced:	a0 00 00 00 00       	mov    al,ds:0x0	10003cee: R_386_32	installKey
10003cf2:	3c 04                	cmp    al,0x4
10003cf4:	75 04                	jne    10003cfa <firstRun(bool)+0x13a5>
10003cf6:	b0 01                	mov    al,0x1
10003cf8:	eb 02                	jmp    10003cfc <firstRun(bool)+0x13a7>
10003cfa:	b0 00                	mov    al,0x0
10003cfc:	84 c0                	test   al,al
10003cfe:	0f 84 cf 01 00 00    	je     10003ed3 <firstRun(bool)+0x157e>
10003d04:	a0 00 00 00 00       	mov    al,ds:0x0	10003d05: R_386_32	installKey
10003d09:	3c 2f                	cmp    al,0x2f
10003d0b:	7e 0d                	jle    10003d1a <firstRun(bool)+0x13c5>
10003d0d:	a0 00 00 00 00       	mov    al,ds:0x0	10003d0e: R_386_32	installKey
10003d12:	3c 39                	cmp    al,0x39
10003d14:	7f 04                	jg     10003d1a <firstRun(bool)+0x13c5>
10003d16:	b0 01                	mov    al,0x1
10003d18:	eb 02                	jmp    10003d1c <firstRun(bool)+0x13c7>
10003d1a:	b0 00                	mov    al,0x0
10003d1c:	84 c0                	test   al,al
10003d1e:	0f 84 51 01 00 00    	je     10003e75 <firstRun(bool)+0x1520>
10003d24:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10003d28:	75 0d                	jne    10003d37 <firstRun(bool)+0x13e2>
10003d2a:	a0 00 00 00 00       	mov    al,ds:0x0	10003d2b: R_386_32	installKey
10003d2f:	3c 33                	cmp    al,0x33
10003d31:	7e 04                	jle    10003d37 <firstRun(bool)+0x13e2>
10003d33:	b0 01                	mov    al,0x1
10003d35:	eb 02                	jmp    10003d39 <firstRun(bool)+0x13e4>
10003d37:	b0 00                	mov    al,0x0
10003d39:	84 c0                	test   al,al
10003d3b:	74 28                	je     10003d65 <firstRun(bool)+0x1410>
10003d3d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003d40:	8d 50 01             	lea    edx,[eax+0x1]
10003d43:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003d46:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003d4e:	a0 00 00 00 00       	mov    al,ds:0x0	10003d4f: R_386_32	installKey
10003d53:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003d59:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003d5c:	01 ca                	add    edx,ecx
10003d5e:	88 02                	mov    BYTE PTR [edx],al
10003d60:	e9 10 01 00 00       	jmp    10003e75 <firstRun(bool)+0x1520>
10003d65:	83 7d e4 03          	cmp    DWORD PTR [ebp-0x1c],0x3
10003d69:	75 0d                	jne    10003d78 <firstRun(bool)+0x1423>
10003d6b:	a0 00 00 00 00       	mov    al,ds:0x0	10003d6c: R_386_32	installKey
10003d70:	3c 31                	cmp    al,0x31
10003d72:	7e 04                	jle    10003d78 <firstRun(bool)+0x1423>
10003d74:	b0 01                	mov    al,0x1
10003d76:	eb 02                	jmp    10003d7a <firstRun(bool)+0x1425>
10003d78:	b0 00                	mov    al,0x0
10003d7a:	84 c0                	test   al,al
10003d7c:	74 28                	je     10003da6 <firstRun(bool)+0x1451>
10003d7e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003d81:	8d 50 01             	lea    edx,[eax+0x1]
10003d84:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003d87:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003d8f:	a0 00 00 00 00       	mov    al,ds:0x0	10003d90: R_386_32	installKey
10003d94:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003d9a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003d9d:	01 ca                	add    edx,ecx
10003d9f:	88 02                	mov    BYTE PTR [edx],al
10003da1:	e9 cf 00 00 00       	jmp    10003e75 <firstRun(bool)+0x1520>
10003da6:	83 7d e4 0b          	cmp    DWORD PTR [ebp-0x1c],0xb
10003daa:	75 0d                	jne    10003db9 <firstRun(bool)+0x1464>
10003dac:	a0 00 00 00 00       	mov    al,ds:0x0	10003dad: R_386_32	installKey
10003db1:	3c 32                	cmp    al,0x32
10003db3:	7e 04                	jle    10003db9 <firstRun(bool)+0x1464>
10003db5:	b0 01                	mov    al,0x1
10003db7:	eb 02                	jmp    10003dbb <firstRun(bool)+0x1466>
10003db9:	b0 00                	mov    al,0x0
10003dbb:	84 c0                	test   al,al
10003dbd:	74 28                	je     10003de7 <firstRun(bool)+0x1492>
10003dbf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003dc2:	8d 50 01             	lea    edx,[eax+0x1]
10003dc5:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003dc8:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003dd0:	a0 00 00 00 00       	mov    al,ds:0x0	10003dd1: R_386_32	installKey
10003dd5:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003ddb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003dde:	01 ca                	add    edx,ecx
10003de0:	88 02                	mov    BYTE PTR [edx],al
10003de2:	e9 8e 00 00 00       	jmp    10003e75 <firstRun(bool)+0x1520>
10003de7:	83 7d e4 0e          	cmp    DWORD PTR [ebp-0x1c],0xe
10003deb:	75 0d                	jne    10003dfa <firstRun(bool)+0x14a5>
10003ded:	a0 00 00 00 00       	mov    al,ds:0x0	10003dee: R_386_32	installKey
10003df2:	3c 35                	cmp    al,0x35
10003df4:	7e 04                	jle    10003dfa <firstRun(bool)+0x14a5>
10003df6:	b0 01                	mov    al,0x1
10003df8:	eb 02                	jmp    10003dfc <firstRun(bool)+0x14a7>
10003dfa:	b0 00                	mov    al,0x0
10003dfc:	84 c0                	test   al,al
10003dfe:	74 25                	je     10003e25 <firstRun(bool)+0x14d0>
10003e00:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003e03:	8d 50 01             	lea    edx,[eax+0x1]
10003e06:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003e09:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003e11:	a0 00 00 00 00       	mov    al,ds:0x0	10003e12: R_386_32	installKey
10003e16:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003e1c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003e1f:	01 ca                	add    edx,ecx
10003e21:	88 02                	mov    BYTE PTR [edx],al
10003e23:	eb 50                	jmp    10003e75 <firstRun(bool)+0x1520>
10003e25:	83 7d e4 11          	cmp    DWORD PTR [ebp-0x1c],0x11
10003e29:	75 0d                	jne    10003e38 <firstRun(bool)+0x14e3>
10003e2b:	a0 00 00 00 00       	mov    al,ds:0x0	10003e2c: R_386_32	installKey
10003e30:	3c 35                	cmp    al,0x35
10003e32:	7e 04                	jle    10003e38 <firstRun(bool)+0x14e3>
10003e34:	b0 01                	mov    al,0x1
10003e36:	eb 02                	jmp    10003e3a <firstRun(bool)+0x14e5>
10003e38:	b0 00                	mov    al,0x0
10003e3a:	84 c0                	test   al,al
10003e3c:	74 25                	je     10003e63 <firstRun(bool)+0x150e>
10003e3e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003e41:	8d 50 01             	lea    edx,[eax+0x1]
10003e44:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003e47:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003e4f:	a0 00 00 00 00       	mov    al,ds:0x0	10003e50: R_386_32	installKey
10003e54:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003e5a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003e5d:	01 ca                	add    edx,ecx
10003e5f:	88 02                	mov    BYTE PTR [edx],al
10003e61:	eb 12                	jmp    10003e75 <firstRun(bool)+0x1520>
10003e63:	a0 00 00 00 00       	mov    al,ds:0x0	10003e64: R_386_32	installKey
10003e68:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003e6e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003e71:	01 ca                	add    edx,ecx
10003e73:	88 02                	mov    BYTE PTR [edx],al
10003e75:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10003e78:	83 ec 0c             	sub    esp,0xc
10003e7b:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003e81:	50                   	push   eax
10003e82:	e8 fc ff ff ff       	call   10003e83 <firstRun(bool)+0x152e>	10003e83: R_386_PC32	strlen
10003e87:	83 c4 10             	add    esp,0x10
10003e8a:	89 c2                	mov    edx,eax
10003e8c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003e8f:	39 c2                	cmp    edx,eax
10003e91:	77 07                	ja     10003e9a <firstRun(bool)+0x1545>
10003e93:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003e9a:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003ea0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003ea3:	01 d0                	add    eax,edx
10003ea5:	8a 00                	mov    al,BYTE PTR [eax]
10003ea7:	3c 20                	cmp    al,0x20
10003ea9:	74 ca                	je     10003e75 <firstRun(bool)+0x1520>
10003eab:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003eb1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003eb4:	01 d0                	add    eax,edx
10003eb6:	8a 00                	mov    al,BYTE PTR [eax]
10003eb8:	3c 2f                	cmp    al,0x2f
10003eba:	74 b9                	je     10003e75 <firstRun(bool)+0x1520>
10003ebc:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003ec2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003ec5:	01 d0                	add    eax,edx
10003ec7:	8a 00                	mov    al,BYTE PTR [eax]
10003ec9:	3c 3a                	cmp    al,0x3a
10003ecb:	0f 85 f5 02 00 00    	jne    100041c6 <firstRun(bool)+0x1871>
10003ed1:	eb a2                	jmp    10003e75 <firstRun(bool)+0x1520>
10003ed3:	a0 00 00 00 00       	mov    al,ds:0x0	10003ed4: R_386_32	installKey
10003ed8:	3c 0a                	cmp    al,0xa
10003eda:	0f 94 c0             	sete   al
10003edd:	84 c0                	test   al,al
10003edf:	0f 84 cf 02 00 00    	je     100041b4 <firstRun(bool)+0x185f>
10003ee5:	8a 85 40 ff ff ff    	mov    al,BYTE PTR [ebp-0xc0]
10003eeb:	0f be c0             	movsx  eax,al
10003eee:	8d 50 d0             	lea    edx,[eax-0x30]
10003ef1:	89 d0                	mov    eax,edx
10003ef3:	c1 e0 02             	shl    eax,0x2
10003ef6:	01 d0                	add    eax,edx
10003ef8:	01 c0                	add    eax,eax
10003efa:	89 c2                	mov    edx,eax
10003efc:	8a 85 41 ff ff ff    	mov    al,BYTE PTR [ebp-0xbf]
10003f02:	0f be c0             	movsx  eax,al
10003f05:	83 e8 30             	sub    eax,0x30
10003f08:	01 d0                	add    eax,edx
10003f0a:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10003f0d:	8a 85 43 ff ff ff    	mov    al,BYTE PTR [ebp-0xbd]
10003f13:	0f be c0             	movsx  eax,al
10003f16:	8d 50 d0             	lea    edx,[eax-0x30]
10003f19:	89 d0                	mov    eax,edx
10003f1b:	c1 e0 02             	shl    eax,0x2
10003f1e:	01 d0                	add    eax,edx
10003f20:	01 c0                	add    eax,eax
10003f22:	89 c2                	mov    edx,eax
10003f24:	8a 85 44 ff ff ff    	mov    al,BYTE PTR [ebp-0xbc]
10003f2a:	0f be c0             	movsx  eax,al
10003f2d:	83 e8 30             	sub    eax,0x30
10003f30:	01 d0                	add    eax,edx
10003f32:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10003f35:	8a 85 46 ff ff ff    	mov    al,BYTE PTR [ebp-0xba]
10003f3b:	0f be c0             	movsx  eax,al
10003f3e:	8d 50 d0             	lea    edx,[eax-0x30]
10003f41:	89 d0                	mov    eax,edx
10003f43:	c1 e0 02             	shl    eax,0x2
10003f46:	01 d0                	add    eax,edx
10003f48:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003f4f:	01 d0                	add    eax,edx
10003f51:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003f58:	01 d0                	add    eax,edx
10003f5a:	c1 e0 03             	shl    eax,0x3
10003f5d:	89 c1                	mov    ecx,eax
10003f5f:	8a 85 47 ff ff ff    	mov    al,BYTE PTR [ebp-0xb9]
10003f65:	0f be c0             	movsx  eax,al
10003f68:	8d 50 d0             	lea    edx,[eax-0x30]
10003f6b:	89 d0                	mov    eax,edx
10003f6d:	c1 e0 02             	shl    eax,0x2
10003f70:	01 d0                	add    eax,edx
10003f72:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003f79:	01 d0                	add    eax,edx
10003f7b:	c1 e0 02             	shl    eax,0x2
10003f7e:	01 c1                	add    ecx,eax
10003f80:	8a 85 48 ff ff ff    	mov    al,BYTE PTR [ebp-0xb8]
10003f86:	0f be c0             	movsx  eax,al
10003f89:	8d 50 d0             	lea    edx,[eax-0x30]
10003f8c:	89 d0                	mov    eax,edx
10003f8e:	c1 e0 02             	shl    eax,0x2
10003f91:	01 d0                	add    eax,edx
10003f93:	01 c0                	add    eax,eax
10003f95:	8d 14 01             	lea    edx,[ecx+eax*1]
10003f98:	8a 85 49 ff ff ff    	mov    al,BYTE PTR [ebp-0xb7]
10003f9e:	0f be c0             	movsx  eax,al
10003fa1:	83 e8 30             	sub    eax,0x30
10003fa4:	01 d0                	add    eax,edx
10003fa6:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10003fa9:	8a 85 4b ff ff ff    	mov    al,BYTE PTR [ebp-0xb5]
10003faf:	0f be c0             	movsx  eax,al
10003fb2:	8d 50 d0             	lea    edx,[eax-0x30]
10003fb5:	89 d0                	mov    eax,edx
10003fb7:	c1 e0 02             	shl    eax,0x2
10003fba:	01 d0                	add    eax,edx
10003fbc:	01 c0                	add    eax,eax
10003fbe:	89 c2                	mov    edx,eax
10003fc0:	8a 85 4c ff ff ff    	mov    al,BYTE PTR [ebp-0xb4]
10003fc6:	0f be c0             	movsx  eax,al
10003fc9:	83 e8 30             	sub    eax,0x30
10003fcc:	01 d0                	add    eax,edx
10003fce:	89 45 9c             	mov    DWORD PTR [ebp-0x64],eax
10003fd1:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [ebp-0xb2]
10003fd7:	0f be c0             	movsx  eax,al
10003fda:	8d 50 d0             	lea    edx,[eax-0x30]
10003fdd:	89 d0                	mov    eax,edx
10003fdf:	c1 e0 02             	shl    eax,0x2
10003fe2:	01 d0                	add    eax,edx
10003fe4:	01 c0                	add    eax,eax
10003fe6:	89 c2                	mov    edx,eax
10003fe8:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [ebp-0xb1]
10003fee:	0f be c0             	movsx  eax,al
10003ff1:	83 e8 30             	sub    eax,0x30
10003ff4:	01 d0                	add    eax,edx
10003ff6:	89 45 98             	mov    DWORD PTR [ebp-0x68],eax
10003ff9:	8a 85 51 ff ff ff    	mov    al,BYTE PTR [ebp-0xaf]
10003fff:	0f be c0             	movsx  eax,al
10004002:	8d 50 d0             	lea    edx,[eax-0x30]
10004005:	89 d0                	mov    eax,edx
10004007:	c1 e0 02             	shl    eax,0x2
1000400a:	01 d0                	add    eax,edx
1000400c:	01 c0                	add    eax,eax
1000400e:	89 c2                	mov    edx,eax
10004010:	8a 85 52 ff ff ff    	mov    al,BYTE PTR [ebp-0xae]
10004016:	0f be c0             	movsx  eax,al
10004019:	83 e8 30             	sub    eax,0x30
1000401c:	01 d0                	add    eax,edx
1000401e:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
10004021:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10004024:	83 e0 03             	and    eax,0x3
10004027:	85 c0                	test   eax,eax
10004029:	75 1f                	jne    1000404a <firstRun(bool)+0x16f5>
1000402b:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
1000402e:	b9 19 00 00 00       	mov    ecx,0x19
10004033:	99                   	cdq    
10004034:	f7 f9                	idiv   ecx
10004036:	89 d0                	mov    eax,edx
10004038:	85 c0                	test   eax,eax
1000403a:	75 0a                	jne    10004046 <firstRun(bool)+0x16f1>
1000403c:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
1000403f:	83 e0 0f             	and    eax,0xf
10004042:	85 c0                	test   eax,eax
10004044:	75 04                	jne    1000404a <firstRun(bool)+0x16f5>
10004046:	b0 01                	mov    al,0x1
10004048:	eb 02                	jmp    1000404c <firstRun(bool)+0x16f7>
1000404a:	b0 00                	mov    al,0x0
1000404c:	88 45 93             	mov    BYTE PTR [ebp-0x6d],al
1000404f:	83 7d a8 1f          	cmp    DWORD PTR [ebp-0x58],0x1f
10004053:	7e 0c                	jle    10004061 <firstRun(bool)+0x170c>
10004055:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
1000405c:	e9 65 01 00 00       	jmp    100041c6 <firstRun(bool)+0x1871>
10004061:	83 7d a8 1e          	cmp    DWORD PTR [ebp-0x58],0x1e
10004065:	7e 2a                	jle    10004091 <firstRun(bool)+0x173c>
10004067:	83 7d a4 02          	cmp    DWORD PTR [ebp-0x5c],0x2
1000406b:	74 18                	je     10004085 <firstRun(bool)+0x1730>
1000406d:	83 7d a4 04          	cmp    DWORD PTR [ebp-0x5c],0x4
10004071:	74 12                	je     10004085 <firstRun(bool)+0x1730>
10004073:	83 7d a4 06          	cmp    DWORD PTR [ebp-0x5c],0x6
10004077:	74 0c                	je     10004085 <firstRun(bool)+0x1730>
10004079:	83 7d a4 09          	cmp    DWORD PTR [ebp-0x5c],0x9
1000407d:	74 06                	je     10004085 <firstRun(bool)+0x1730>
1000407f:	83 7d a4 0b          	cmp    DWORD PTR [ebp-0x5c],0xb
10004083:	75 0c                	jne    10004091 <firstRun(bool)+0x173c>
10004085:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
1000408c:	e9 35 01 00 00       	jmp    100041c6 <firstRun(bool)+0x1871>
10004091:	83 7d a8 1d          	cmp    DWORD PTR [ebp-0x58],0x1d
10004095:	75 1c                	jne    100040b3 <firstRun(bool)+0x175e>
10004097:	83 7d a4 02          	cmp    DWORD PTR [ebp-0x5c],0x2
1000409b:	75 16                	jne    100040b3 <firstRun(bool)+0x175e>
1000409d:	8a 45 93             	mov    al,BYTE PTR [ebp-0x6d]
100040a0:	83 f0 01             	xor    eax,0x1
100040a3:	84 c0                	test   al,al
100040a5:	74 0c                	je     100040b3 <firstRun(bool)+0x175e>
100040a7:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100040ae:	e9 13 01 00 00       	jmp    100041c6 <firstRun(bool)+0x1871>
100040b3:	83 7d a8 00          	cmp    DWORD PTR [ebp-0x58],0x0
100040b7:	75 0c                	jne    100040c5 <firstRun(bool)+0x1770>
100040b9:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100040c0:	e9 01 01 00 00       	jmp    100041c6 <firstRun(bool)+0x1871>
100040c5:	83 7d a4 0c          	cmp    DWORD PTR [ebp-0x5c],0xc
100040c9:	7f 06                	jg     100040d1 <firstRun(bool)+0x177c>
100040cb:	83 7d a4 00          	cmp    DWORD PTR [ebp-0x5c],0x0
100040cf:	75 0c                	jne    100040dd <firstRun(bool)+0x1788>
100040d1:	c7 45 e4 03 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x3
100040d8:	e9 e9 00 00 00       	jmp    100041c6 <firstRun(bool)+0x1871>
100040dd:	81 7d a0 b7 0b 00 00 	cmp    DWORD PTR [ebp-0x60],0xbb7
100040e4:	7f 09                	jg     100040ef <firstRun(bool)+0x179a>
100040e6:	81 7d a0 b1 07 00 00 	cmp    DWORD PTR [ebp-0x60],0x7b1
100040ed:	7f 0c                	jg     100040fb <firstRun(bool)+0x17a6>
100040ef:	c7 45 e4 06 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x6
100040f6:	e9 cb 00 00 00       	jmp    100041c6 <firstRun(bool)+0x1871>
100040fb:	83 7d 9c 17          	cmp    DWORD PTR [ebp-0x64],0x17
100040ff:	7e 0c                	jle    1000410d <firstRun(bool)+0x17b8>
10004101:	c7 45 e4 0b 00 00 00 	mov    DWORD PTR [ebp-0x1c],0xb
10004108:	e9 b9 00 00 00       	jmp    100041c6 <firstRun(bool)+0x1871>
1000410d:	83 7d 98 3b          	cmp    DWORD PTR [ebp-0x68],0x3b
10004111:	7e 0c                	jle    1000411f <firstRun(bool)+0x17ca>
10004113:	c7 45 e4 0e 00 00 00 	mov    DWORD PTR [ebp-0x1c],0xe
1000411a:	e9 a7 00 00 00       	jmp    100041c6 <firstRun(bool)+0x1871>
1000411f:	83 7d 94 3b          	cmp    DWORD PTR [ebp-0x6c],0x3b
10004123:	7e 0c                	jle    10004131 <firstRun(bool)+0x17dc>
10004125:	c7 45 e4 11 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x11
1000412c:	e9 95 00 00 00       	jmp    100041c6 <firstRun(bool)+0x1871>
10004131:	8b 45 98             	mov    eax,DWORD PTR [ebp-0x68]
10004134:	88 85 d9 fe ff ff    	mov    BYTE PTR [ebp-0x127],al
1000413a:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
1000413d:	88 85 da fe ff ff    	mov    BYTE PTR [ebp-0x126],al
10004143:	8b 45 9c             	mov    eax,DWORD PTR [ebp-0x64]
10004146:	88 85 d8 fe ff ff    	mov    BYTE PTR [ebp-0x128],al
1000414c:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
1000414f:	88 85 d4 fe ff ff    	mov    BYTE PTR [ebp-0x12c],al
10004155:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
10004158:	88 85 d5 fe ff ff    	mov    BYTE PTR [ebp-0x12b],al
1000415e:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10004161:	66 89 85 d6 fe ff ff 	mov    WORD PTR [ebp-0x12a],ax
10004168:	a1 00 00 00 00       	mov    eax,ds:0x0	10004169: R_386_32	Krnl::computer
1000416d:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
10004173:	a1 00 00 00 00       	mov    eax,ds:0x0	10004174: R_386_32	Krnl::computer
10004178:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
1000417e:	8b 00                	mov    eax,DWORD PTR [eax]
10004180:	83 c0 30             	add    eax,0x30
10004183:	8b 00                	mov    eax,DWORD PTR [eax]
10004185:	83 ec 04             	sub    esp,0x4
10004188:	ff b5 d8 fe ff ff    	push   DWORD PTR [ebp-0x128]
1000418e:	ff b5 d4 fe ff ff    	push   DWORD PTR [ebp-0x12c]
10004194:	52                   	push   edx
10004195:	ff d0                	call   eax
10004197:	83 c4 10             	add    esp,0x10
1000419a:	90                   	nop
1000419b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000419d: R_386_32	installKey
100041a2:	83 ec 0c             	sub    esp,0xc
100041a5:	68 a0 0f 00 00       	push   0xfa0
100041aa:	e8 fc ff ff ff       	call   100041ab <firstRun(bool)+0x1856>	100041ab: R_386_PC32	milliTenthSleep(unsigned int)
100041af:	83 c4 10             	add    esp,0x10
100041b2:	eb 2f                	jmp    100041e3 <firstRun(bool)+0x188e>
100041b4:	a0 00 00 00 00       	mov    al,ds:0x0	100041b5: R_386_32	installKey
100041b9:	3c 1b                	cmp    al,0x1b
100041bb:	0f 94 c0             	sete   al
100041be:	84 c0                	test   al,al
100041c0:	0f 85 06 e9 ff ff    	jne    10002acc <firstRun(bool)+0x177>
100041c6:	83 ec 0c             	sub    esp,0xc
100041c9:	68 f4 01 00 00       	push   0x1f4
100041ce:	e8 fc ff ff ff       	call   100041cf <firstRun(bool)+0x187a>	100041cf: R_386_PC32	milliTenthSleep(unsigned int)
100041d3:	83 c4 10             	add    esp,0x10
100041d6:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100041d8: R_386_32	installKey
100041dd:	e9 b3 f7 ff ff       	jmp    10003995 <firstRun(bool)+0x1040>
100041e2:	90                   	nop
100041e3:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100041e5: R_386_32	installKey
100041ea:	a0 00 00 00 00       	mov    al,ds:0x0	100041eb: R_386_32	firstTimeEnteringTimezone
100041ef:	84 c0                	test   al,al
100041f1:	74 18                	je     1000420b <firstRun(bool)+0x18b6>
100041f3:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100041f5: R_386_32	firstTimeEnteringTimezone
100041fa:	c7 05 00 00 00 00 3b 00 00 00 	mov    DWORD PTR ds:0x0,0x3b	100041fc: R_386_32	tzsel
10004204:	c7 45 dc 30 00 00 00 	mov    DWORD PTR [ebp-0x24],0x30
1000420b:	e8 fc ff ff ff       	call   1000420c <firstRun(bool)+0x18b7>	1000420c: R_386_PC32	drawBootScreen()
10004210:	83 ec 0c             	sub    esp,0xc
10004213:	68 1b a9 00 10       	push   0x1000a91b	10004214: R_386_32	.text
10004218:	6a 14                	push   0x14
1000421a:	6a 3c                	push   0x3c
1000421c:	6a 01                	push   0x1
1000421e:	6a 12                	push   0x12
10004220:	e8 fc ff ff ff       	call   10004221 <firstRun(bool)+0x18cc>	10004221: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004225:	83 c4 20             	add    esp,0x20
10004228:	a1 00 00 00 00       	mov    eax,ds:0x0	10004229: R_386_32	term
1000422d:	83 ec 04             	sub    esp,0x4
10004230:	6a 04                	push   0x4
10004232:	6a 14                	push   0x14
10004234:	50                   	push   eax
10004235:	e8 fc ff ff ff       	call   10004236 <firstRun(bool)+0x18e1>	10004236: R_386_PC32	VgaText::setCursor(int, int)
1000423a:	83 c4 10             	add    esp,0x10
1000423d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000423e: R_386_32	term
10004242:	83 ec 08             	sub    esp,0x8
10004245:	68 a8 a9 00 10       	push   0x1000a9a8	10004246: R_386_32	.text
1000424a:	50                   	push   eax
1000424b:	e8 fc ff ff ff       	call   1000424c <firstRun(bool)+0x18f7>	1000424c: R_386_PC32	VgaText::puts(char const*)
10004250:	83 c4 10             	add    esp,0x10
10004253:	a1 00 00 00 00       	mov    eax,ds:0x0	10004254: R_386_32	term
10004258:	83 ec 04             	sub    esp,0x4
1000425b:	6a 18                	push   0x18
1000425d:	6a 11                	push   0x11
1000425f:	50                   	push   eax
10004260:	e8 fc ff ff ff       	call   10004261 <firstRun(bool)+0x190c>	10004261: R_386_PC32	VgaText::setCursor(int, int)
10004265:	83 c4 10             	add    esp,0x10
10004268:	a1 00 00 00 00       	mov    eax,ds:0x0	10004269: R_386_32	term
1000426d:	6a 0b                	push   0xb
1000426f:	6a 03                	push   0x3
10004271:	68 92 a9 00 10       	push   0x1000a992	10004272: R_386_32	.text
10004276:	50                   	push   eax
10004277:	e8 fc ff ff ff       	call   10004278 <firstRun(bool)+0x1923>	10004278: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000427c:	83 c4 10             	add    esp,0x10
1000427f:	e8 fc ff ff ff       	call   10004280 <firstRun(bool)+0x192b>	10004280: R_386_PC32	loadTimezoneStrings()
10004284:	89 45 8c             	mov    DWORD PTR [ebp-0x74],eax
10004287:	b8 d2 00 00 00       	mov    eax,0xd2
1000428c:	99                   	cdq    
1000428d:	f7 7d 8c             	idiv   DWORD PTR [ebp-0x74]
10004290:	89 45 88             	mov    DWORD PTR [ebp-0x78],eax
10004293:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
1000429a:	83 7d cc 0d          	cmp    DWORD PTR [ebp-0x34],0xd
1000429e:	7f 32                	jg     100042d2 <firstRun(bool)+0x197d>
100042a0:	a1 00 00 00 00       	mov    eax,ds:0x0	100042a1: R_386_32	term
100042a5:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
100042a8:	83 c2 07             	add    edx,0x7
100042ab:	83 ec 04             	sub    esp,0x4
100042ae:	52                   	push   edx
100042af:	6a 4b                	push   0x4b
100042b1:	50                   	push   eax
100042b2:	e8 fc ff ff ff       	call   100042b3 <firstRun(bool)+0x195e>	100042b3: R_386_PC32	VgaText::setCursor(int, int)
100042b7:	83 c4 10             	add    esp,0x10
100042ba:	a1 00 00 00 00       	mov    eax,ds:0x0	100042bb: R_386_32	term
100042bf:	83 ec 08             	sub    esp,0x8
100042c2:	6a 20                	push   0x20
100042c4:	50                   	push   eax
100042c5:	e8 fc ff ff ff       	call   100042c6 <firstRun(bool)+0x1971>	100042c6: R_386_PC32	VgaText::putchar(char)
100042ca:	83 c4 10             	add    esp,0x10
100042cd:	ff 45 cc             	inc    DWORD PTR [ebp-0x34]
100042d0:	eb c8                	jmp    1000429a <firstRun(bool)+0x1945>
100042d2:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
100042d9:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
100042dc:	3b 45 88             	cmp    eax,DWORD PTR [ebp-0x78]
100042df:	7d 48                	jge    10004329 <firstRun(bool)+0x19d4>
100042e1:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	100042e3: R_386_32	term
100042e7:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
100042ea:	8d 58 07             	lea    ebx,[eax+0x7]
100042ed:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100042f0:	89 d0                	mov    eax,edx
100042f2:	01 c0                	add    eax,eax
100042f4:	01 d0                	add    eax,edx
100042f6:	01 c0                	add    eax,eax
100042f8:	01 d0                	add    eax,edx
100042fa:	01 c0                	add    eax,eax
100042fc:	99                   	cdq    
100042fd:	f7 7d 8c             	idiv   DWORD PTR [ebp-0x74]
10004300:	01 d8                	add    eax,ebx
10004302:	83 ec 04             	sub    esp,0x4
10004305:	50                   	push   eax
10004306:	6a 4b                	push   0x4b
10004308:	51                   	push   ecx
10004309:	e8 fc ff ff ff       	call   1000430a <firstRun(bool)+0x19b5>	1000430a: R_386_PC32	VgaText::setCursor(int, int)
1000430e:	83 c4 10             	add    esp,0x10
10004311:	a1 00 00 00 00       	mov    eax,ds:0x0	10004312: R_386_32	term
10004316:	83 ec 08             	sub    esp,0x8
10004319:	6a db                	push   0xffffffdb
1000431b:	50                   	push   eax
1000431c:	e8 fc ff ff ff       	call   1000431d <firstRun(bool)+0x19c8>	1000431d: R_386_PC32	VgaText::putchar(char)
10004321:	83 c4 10             	add    esp,0x10
10004324:	ff 45 c8             	inc    DWORD PTR [ebp-0x38]
10004327:	eb b0                	jmp    100042d9 <firstRun(bool)+0x1984>
10004329:	a1 00 00 00 00       	mov    eax,ds:0x0	1000432a: R_386_32	term
1000432e:	83 ec 04             	sub    esp,0x4
10004331:	6a 06                	push   0x6
10004333:	6a 4b                	push   0x4b
10004335:	50                   	push   eax
10004336:	e8 fc ff ff ff       	call   10004337 <firstRun(bool)+0x19e2>	10004337: R_386_PC32	VgaText::setCursor(int, int)
1000433b:	83 c4 10             	add    esp,0x10
1000433e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000433f: R_386_32	term
10004343:	83 ec 08             	sub    esp,0x8
10004346:	6a 1e                	push   0x1e
10004348:	50                   	push   eax
10004349:	e8 fc ff ff ff       	call   1000434a <firstRun(bool)+0x19f5>	1000434a: R_386_PC32	VgaText::putchar(char)
1000434e:	83 c4 10             	add    esp,0x10
10004351:	a1 00 00 00 00       	mov    eax,ds:0x0	10004352: R_386_32	term
10004356:	83 ec 04             	sub    esp,0x4
10004359:	6a 14                	push   0x14
1000435b:	6a 4b                	push   0x4b
1000435d:	50                   	push   eax
1000435e:	e8 fc ff ff ff       	call   1000435f <firstRun(bool)+0x1a0a>	1000435f: R_386_PC32	VgaText::setCursor(int, int)
10004363:	83 c4 10             	add    esp,0x10
10004366:	a1 00 00 00 00       	mov    eax,ds:0x0	10004367: R_386_32	term
1000436b:	83 ec 08             	sub    esp,0x8
1000436e:	6a 1f                	push   0x1f
10004370:	50                   	push   eax
10004371:	e8 fc ff ff ff       	call   10004372 <firstRun(bool)+0x1a1d>	10004372: R_386_PC32	VgaText::putchar(char)
10004376:	83 c4 10             	add    esp,0x10
10004379:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x0
10004380:	83 7d c4 0e          	cmp    DWORD PTR [ebp-0x3c],0xe
10004384:	7f 7e                	jg     10004404 <firstRun(bool)+0x1aaf>
10004386:	a1 00 00 00 00       	mov    eax,ds:0x0	10004387: R_386_32	term
1000438b:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
1000438e:	83 c2 06             	add    edx,0x6
10004391:	83 ec 04             	sub    esp,0x4
10004394:	52                   	push   edx
10004395:	6a 14                	push   0x14
10004397:	50                   	push   eax
10004398:	e8 fc ff ff ff       	call   10004399 <firstRun(bool)+0x1a44>	10004399: R_386_PC32	VgaText::setCursor(int, int)
1000439d:	83 c4 10             	add    esp,0x10
100043a0:	a1 00 00 00 00       	mov    eax,ds:0x0	100043a1: R_386_32	term
100043a5:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
100043a8:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
100043ab:	01 d1                	add    ecx,edx
100043ad:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100043af: R_386_32	tzsel
100043b3:	39 d1                	cmp    ecx,edx
100043b5:	75 07                	jne    100043be <firstRun(bool)+0x1a69>
100043b7:	bb 00 00 00 00       	mov    ebx,0x0
100043bc:	eb 05                	jmp    100043c3 <firstRun(bool)+0x1a6e>
100043be:	bb 0f 00 00 00       	mov    ebx,0xf
100043c3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
100043c6:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
100043c9:	01 d1                	add    ecx,edx
100043cb:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100043cd: R_386_32	tzsel
100043d1:	39 d1                	cmp    ecx,edx
100043d3:	75 07                	jne    100043dc <firstRun(bool)+0x1a87>
100043d5:	b9 0f 00 00 00       	mov    ecx,0xf
100043da:	eb 05                	jmp    100043e1 <firstRun(bool)+0x1a8c>
100043dc:	b9 00 00 00 00       	mov    ecx,0x0
100043e1:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
100043e4:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
100043e7:	01 f2                	add    edx,esi
100043e9:	8b 14 95 00 00 00 00 	mov    edx,DWORD PTR [edx*4+0x0]	100043ec: R_386_32	timezoneStrings
100043f0:	53                   	push   ebx
100043f1:	51                   	push   ecx
100043f2:	52                   	push   edx
100043f3:	50                   	push   eax
100043f4:	e8 fc ff ff ff       	call   100043f5 <firstRun(bool)+0x1aa0>	100043f5: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100043f9:	83 c4 10             	add    esp,0x10
100043fc:	ff 45 c4             	inc    DWORD PTR [ebp-0x3c]
100043ff:	e9 7c ff ff ff       	jmp    10004380 <firstRun(bool)+0x1a2b>
10004404:	a0 00 00 00 00       	mov    al,ds:0x0	10004405: R_386_32	installKey
10004409:	84 c0                	test   al,al
1000440b:	0f 94 c0             	sete   al
1000440e:	84 c0                	test   al,al
10004410:	74 02                	je     10004414 <firstRun(bool)+0x1abf>
10004412:	eb f0                	jmp    10004404 <firstRun(bool)+0x1aaf>
10004414:	a1 00 00 00 00       	mov    eax,ds:0x0	10004415: R_386_32	term
10004419:	05 82 00 00 00       	add    eax,0x82
1000441e:	83 ec 04             	sub    esp,0x4
10004421:	6a 04                	push   0x4
10004423:	6a 00                	push   0x0
10004425:	50                   	push   eax
10004426:	e8 fc ff ff ff       	call   10004427 <firstRun(bool)+0x1ad2>	10004427: R_386_PC32	memset
1000442b:	83 c4 10             	add    esp,0x10
1000442e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000442f: R_386_32	term
10004433:	05 02 01 00 00       	add    eax,0x102
10004438:	83 ec 04             	sub    esp,0x4
1000443b:	6a 04                	push   0x4
1000443d:	6a 00                	push   0x0
1000443f:	50                   	push   eax
10004440:	e8 fc ff ff ff       	call   10004441 <firstRun(bool)+0x1aec>	10004441: R_386_PC32	memset
10004445:	83 c4 10             	add    esp,0x10
10004448:	a0 00 00 00 00       	mov    al,ds:0x0	10004449: R_386_32	installKey
1000444d:	3c 01                	cmp    al,0x1
1000444f:	0f 94 c0             	sete   al
10004452:	84 c0                	test   al,al
10004454:	74 41                	je     10004497 <firstRun(bool)+0x1b42>
10004456:	a1 00 00 00 00       	mov    eax,ds:0x0	10004457: R_386_32	tzsel
1000445b:	48                   	dec    eax
1000445c:	a3 00 00 00 00       	mov    ds:0x0,eax	1000445d: R_386_32	tzsel
10004461:	a1 00 00 00 00       	mov    eax,ds:0x0	10004462: R_386_32	tzsel
10004466:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
10004469:	83 f8 04             	cmp    eax,0x4
1000446c:	7f 03                	jg     10004471 <firstRun(bool)+0x1b1c>
1000446e:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
10004471:	a1 00 00 00 00       	mov    eax,ds:0x0	10004472: R_386_32	tzsel
10004476:	85 c0                	test   eax,eax
10004478:	79 0a                	jns    10004484 <firstRun(bool)+0x1b2f>
1000447a:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000447c: R_386_32	tzsel
10004484:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10004488:	0f 89 82 00 00 00    	jns    10004510 <firstRun(bool)+0x1bbb>
1000448e:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10004495:	eb 79                	jmp    10004510 <firstRun(bool)+0x1bbb>
10004497:	a0 00 00 00 00       	mov    al,ds:0x0	10004498: R_386_32	installKey
1000449c:	3c 02                	cmp    al,0x2
1000449e:	0f 94 c0             	sete   al
100044a1:	84 c0                	test   al,al
100044a3:	74 4b                	je     100044f0 <firstRun(bool)+0x1b9b>
100044a5:	a1 00 00 00 00       	mov    eax,ds:0x0	100044a6: R_386_32	tzsel
100044aa:	40                   	inc    eax
100044ab:	a3 00 00 00 00       	mov    ds:0x0,eax	100044ac: R_386_32	tzsel
100044b0:	a1 00 00 00 00       	mov    eax,ds:0x0	100044b1: R_386_32	tzsel
100044b5:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
100044b8:	83 f8 0a             	cmp    eax,0xa
100044bb:	7e 03                	jle    100044c0 <firstRun(bool)+0x1b6b>
100044bd:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
100044c0:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
100044c3:	8d 50 ff             	lea    edx,[eax-0x1]
100044c6:	a1 00 00 00 00       	mov    eax,ds:0x0	100044c7: R_386_32	tzsel
100044cb:	39 c2                	cmp    edx,eax
100044cd:	7f 0b                	jg     100044da <firstRun(bool)+0x1b85>
100044cf:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
100044d2:	83 e8 02             	sub    eax,0x2
100044d5:	a3 00 00 00 00       	mov    ds:0x0,eax	100044d6: R_386_32	tzsel
100044da:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
100044dd:	83 e8 0f             	sub    eax,0xf
100044e0:	39 45 dc             	cmp    DWORD PTR [ebp-0x24],eax
100044e3:	7c 2b                	jl     10004510 <firstRun(bool)+0x1bbb>
100044e5:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
100044e8:	83 e8 10             	sub    eax,0x10
100044eb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100044ee:	eb 20                	jmp    10004510 <firstRun(bool)+0x1bbb>
100044f0:	a0 00 00 00 00       	mov    al,ds:0x0	100044f1: R_386_32	installKey
100044f5:	3c 0a                	cmp    al,0xa
100044f7:	0f 94 c0             	sete   al
100044fa:	84 c0                	test   al,al
100044fc:	75 2e                	jne    1000452c <firstRun(bool)+0x1bd7>
100044fe:	a0 00 00 00 00       	mov    al,ds:0x0	100044ff: R_386_32	installKey
10004503:	3c 1b                	cmp    al,0x1b
10004505:	0f 94 c0             	sete   al
10004508:	84 c0                	test   al,al
1000450a:	0f 85 89 f0 ff ff    	jne    10003599 <firstRun(bool)+0xc44>
10004510:	83 ec 0c             	sub    esp,0xc
10004513:	68 f4 01 00 00       	push   0x1f4
10004518:	e8 fc ff ff ff       	call   10004519 <firstRun(bool)+0x1bc4>	10004519: R_386_PC32	milliTenthSleep(unsigned int)
1000451d:	83 c4 10             	add    esp,0x10
10004520:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004522: R_386_32	installKey
10004527:	e9 67 fd ff ff       	jmp    10004293 <firstRun(bool)+0x193e>
1000452c:	90                   	nop
1000452d:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000452f: R_386_32	installKey
10004534:	83 ec 0c             	sub    esp,0xc
10004537:	68 a0 0f 00 00       	push   0xfa0
1000453c:	e8 fc ff ff ff       	call   1000453d <firstRun(bool)+0x1be8>	1000453d: R_386_PC32	milliTenthSleep(unsigned int)
10004541:	83 c4 10             	add    esp,0x10
10004544:	eb 01                	jmp    10004547 <firstRun(bool)+0x1bf2>
10004546:	90                   	nop
10004547:	e8 fc ff ff ff       	call   10004548 <firstRun(bool)+0x1bf3>	10004548: R_386_PC32	drawBootScreen()
1000454c:	83 ec 0c             	sub    esp,0xc
1000454f:	68 58 1b 00 00       	push   0x1b58
10004554:	e8 fc ff ff ff       	call   10004555 <firstRun(bool)+0x1c00>	10004555: R_386_PC32	milliTenthSleep(unsigned int)
10004559:	83 c4 10             	add    esp,0x10
1000455c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000455e: R_386_32	installKey
10004563:	e8 fc ff ff ff       	call   10004564 <firstRun(bool)+0x1c0f>	10004564: R_386_PC32	drawBootScreen()
10004568:	83 ec 0c             	sub    esp,0xc
1000456b:	68 da a9 00 10       	push   0x1000a9da	1000456c: R_386_32	.text
10004570:	6a 10                	push   0x10
10004572:	6a 37                	push   0x37
10004574:	6a 03                	push   0x3
10004576:	6a 14                	push   0x14
10004578:	e8 fc ff ff ff       	call   10004579 <firstRun(bool)+0x1c24>	10004579: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000457d:	83 c4 20             	add    esp,0x20
10004580:	a1 00 00 00 00       	mov    eax,ds:0x0	10004581: R_386_32	term
10004585:	83 ec 04             	sub    esp,0x4
10004588:	6a 06                	push   0x6
1000458a:	6a 16                	push   0x16
1000458c:	50                   	push   eax
1000458d:	e8 fc ff ff ff       	call   1000458e <firstRun(bool)+0x1c39>	1000458e: R_386_PC32	VgaText::setCursor(int, int)
10004592:	83 c4 10             	add    esp,0x10
10004595:	a1 00 00 00 00       	mov    eax,ds:0x0	10004596: R_386_32	term
1000459a:	83 ec 08             	sub    esp,0x8
1000459d:	68 ec a9 00 10       	push   0x1000a9ec	1000459e: R_386_32	.text
100045a2:	50                   	push   eax
100045a3:	e8 fc ff ff ff       	call   100045a4 <firstRun(bool)+0x1c4f>	100045a4: R_386_PC32	VgaText::puts(char const*)
100045a8:	83 c4 10             	add    esp,0x10
100045ab:	a1 00 00 00 00       	mov    eax,ds:0x0	100045ac: R_386_32	term
100045b0:	83 ec 04             	sub    esp,0x4
100045b3:	6a 07                	push   0x7
100045b5:	6a 16                	push   0x16
100045b7:	50                   	push   eax
100045b8:	e8 fc ff ff ff       	call   100045b9 <firstRun(bool)+0x1c64>	100045b9: R_386_PC32	VgaText::setCursor(int, int)
100045bd:	83 c4 10             	add    esp,0x10
100045c0:	a1 00 00 00 00       	mov    eax,ds:0x0	100045c1: R_386_32	term
100045c5:	83 ec 08             	sub    esp,0x8
100045c8:	68 20 aa 00 10       	push   0x1000aa20	100045c9: R_386_32	.text
100045cd:	50                   	push   eax
100045ce:	e8 fc ff ff ff       	call   100045cf <firstRun(bool)+0x1c7a>	100045cf: R_386_PC32	VgaText::puts(char const*)
100045d3:	83 c4 10             	add    esp,0x10
100045d6:	a1 00 00 00 00       	mov    eax,ds:0x0	100045d7: R_386_32	term
100045db:	83 ec 04             	sub    esp,0x4
100045de:	6a 18                	push   0x18
100045e0:	6a 11                	push   0x11
100045e2:	50                   	push   eax
100045e3:	e8 fc ff ff ff       	call   100045e4 <firstRun(bool)+0x1c8f>	100045e4: R_386_PC32	VgaText::setCursor(int, int)
100045e8:	83 c4 10             	add    esp,0x10
100045eb:	a1 00 00 00 00       	mov    eax,ds:0x0	100045ec: R_386_32	term
100045f0:	6a 0b                	push   0xb
100045f2:	6a 03                	push   0x3
100045f4:	68 92 a9 00 10       	push   0x1000a992	100045f5: R_386_32	.text
100045f9:	50                   	push   eax
100045fa:	e8 fc ff ff ff       	call   100045fb <firstRun(bool)+0x1ca6>	100045fb: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100045ff:	83 c4 10             	add    esp,0x10
10004602:	c7 45 8c 03 00 00 00 	mov    DWORD PTR [ebp-0x74],0x3
10004609:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
1000460f:	bb a4 ac 00 10       	mov    ebx,0x1000aca4	10004610: R_386_32	.text
10004614:	ba 03 00 00 00       	mov    edx,0x3
10004619:	89 c7                	mov    edi,eax
1000461b:	89 de                	mov    esi,ebx
1000461d:	89 d1                	mov    ecx,edx
1000461f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10004621:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [ebp-0x40],0x0
10004628:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
1000462b:	3b 45 8c             	cmp    eax,DWORD PTR [ebp-0x74]
1000462e:	7d 68                	jge    10004698 <firstRun(bool)+0x1d43>
10004630:	a1 00 00 00 00       	mov    eax,ds:0x0	10004631: R_386_32	term
10004635:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
10004638:	83 c2 09             	add    edx,0x9
1000463b:	83 ec 04             	sub    esp,0x4
1000463e:	52                   	push   edx
1000463f:	6a 16                	push   0x16
10004641:	50                   	push   eax
10004642:	e8 fc ff ff ff       	call   10004643 <firstRun(bool)+0x1cee>	10004643: R_386_PC32	VgaText::setCursor(int, int)
10004647:	83 c4 10             	add    esp,0x10
1000464a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000464b: R_386_32	term
1000464f:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004651: R_386_32	modesel
10004655:	39 55 c0             	cmp    DWORD PTR [ebp-0x40],edx
10004658:	75 07                	jne    10004661 <firstRun(bool)+0x1d0c>
1000465a:	bb 00 00 00 00       	mov    ebx,0x0
1000465f:	eb 05                	jmp    10004666 <firstRun(bool)+0x1d11>
10004661:	bb 0f 00 00 00       	mov    ebx,0xf
10004666:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004668: R_386_32	modesel
1000466c:	39 55 c0             	cmp    DWORD PTR [ebp-0x40],edx
1000466f:	75 07                	jne    10004678 <firstRun(bool)+0x1d23>
10004671:	b9 0f 00 00 00       	mov    ecx,0xf
10004676:	eb 05                	jmp    1000467d <firstRun(bool)+0x1d28>
10004678:	b9 00 00 00 00       	mov    ecx,0x0
1000467d:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
10004680:	8b 94 95 c8 fe ff ff 	mov    edx,DWORD PTR [ebp+edx*4-0x138]
10004687:	53                   	push   ebx
10004688:	51                   	push   ecx
10004689:	52                   	push   edx
1000468a:	50                   	push   eax
1000468b:	e8 fc ff ff ff       	call   1000468c <firstRun(bool)+0x1d37>	1000468c: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004690:	83 c4 10             	add    esp,0x10
10004693:	ff 45 c0             	inc    DWORD PTR [ebp-0x40]
10004696:	eb 90                	jmp    10004628 <firstRun(bool)+0x1cd3>
10004698:	a0 00 00 00 00       	mov    al,ds:0x0	10004699: R_386_32	installKey
1000469d:	84 c0                	test   al,al
1000469f:	0f 94 c0             	sete   al
100046a2:	84 c0                	test   al,al
100046a4:	74 02                	je     100046a8 <firstRun(bool)+0x1d53>
100046a6:	eb f0                	jmp    10004698 <firstRun(bool)+0x1d43>
100046a8:	a1 00 00 00 00       	mov    eax,ds:0x0	100046a9: R_386_32	term
100046ad:	05 82 00 00 00       	add    eax,0x82
100046b2:	83 ec 04             	sub    esp,0x4
100046b5:	6a 04                	push   0x4
100046b7:	6a 00                	push   0x0
100046b9:	50                   	push   eax
100046ba:	e8 fc ff ff ff       	call   100046bb <firstRun(bool)+0x1d66>	100046bb: R_386_PC32	memset
100046bf:	83 c4 10             	add    esp,0x10
100046c2:	a1 00 00 00 00       	mov    eax,ds:0x0	100046c3: R_386_32	term
100046c7:	05 02 01 00 00       	add    eax,0x102
100046cc:	83 ec 04             	sub    esp,0x4
100046cf:	6a 04                	push   0x4
100046d1:	6a 00                	push   0x0
100046d3:	50                   	push   eax
100046d4:	e8 fc ff ff ff       	call   100046d5 <firstRun(bool)+0x1d80>	100046d5: R_386_PC32	memset
100046d9:	83 c4 10             	add    esp,0x10
100046dc:	a0 00 00 00 00       	mov    al,ds:0x0	100046dd: R_386_32	installKey
100046e1:	3c 01                	cmp    al,0x1
100046e3:	0f 94 c0             	sete   al
100046e6:	84 c0                	test   al,al
100046e8:	74 20                	je     1000470a <firstRun(bool)+0x1db5>
100046ea:	a1 00 00 00 00       	mov    eax,ds:0x0	100046eb: R_386_32	modesel
100046ef:	48                   	dec    eax
100046f0:	a3 00 00 00 00       	mov    ds:0x0,eax	100046f1: R_386_32	modesel
100046f5:	a1 00 00 00 00       	mov    eax,ds:0x0	100046f6: R_386_32	modesel
100046fa:	85 c0                	test   eax,eax
100046fc:	79 5a                	jns    10004758 <firstRun(bool)+0x1e03>
100046fe:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004700: R_386_32	modesel
10004708:	eb 4e                	jmp    10004758 <firstRun(bool)+0x1e03>
1000470a:	a0 00 00 00 00       	mov    al,ds:0x0	1000470b: R_386_32	installKey
1000470f:	3c 02                	cmp    al,0x2
10004711:	0f 94 c0             	sete   al
10004714:	84 c0                	test   al,al
10004716:	74 20                	je     10004738 <firstRun(bool)+0x1de3>
10004718:	a1 00 00 00 00       	mov    eax,ds:0x0	10004719: R_386_32	modesel
1000471d:	40                   	inc    eax
1000471e:	a3 00 00 00 00       	mov    ds:0x0,eax	1000471f: R_386_32	modesel
10004723:	a1 00 00 00 00       	mov    eax,ds:0x0	10004724: R_386_32	modesel
10004728:	39 45 8c             	cmp    DWORD PTR [ebp-0x74],eax
1000472b:	7f 2b                	jg     10004758 <firstRun(bool)+0x1e03>
1000472d:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
10004730:	48                   	dec    eax
10004731:	a3 00 00 00 00       	mov    ds:0x0,eax	10004732: R_386_32	modesel
10004736:	eb 20                	jmp    10004758 <firstRun(bool)+0x1e03>
10004738:	a0 00 00 00 00       	mov    al,ds:0x0	10004739: R_386_32	installKey
1000473d:	3c 0a                	cmp    al,0xa
1000473f:	0f 94 c0             	sete   al
10004742:	84 c0                	test   al,al
10004744:	75 2e                	jne    10004774 <firstRun(bool)+0x1e1f>
10004746:	a0 00 00 00 00       	mov    al,ds:0x0	10004747: R_386_32	installKey
1000474b:	3c 1b                	cmp    al,0x1b
1000474d:	0f 94 c0             	sete   al
10004750:	84 c0                	test   al,al
10004752:	0f 85 8a fa ff ff    	jne    100041e2 <firstRun(bool)+0x188d>
10004758:	83 ec 0c             	sub    esp,0xc
1000475b:	68 f4 01 00 00       	push   0x1f4
10004760:	e8 fc ff ff ff       	call   10004761 <firstRun(bool)+0x1e0c>	10004761: R_386_PC32	milliTenthSleep(unsigned int)
10004765:	83 c4 10             	add    esp,0x10
10004768:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000476a: R_386_32	installKey
1000476f:	e9 ad fe ff ff       	jmp    10004621 <firstRun(bool)+0x1ccc>
10004774:	90                   	nop
10004775:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
1000477c:	0f 84 ff 00 00 00    	je     10004881 <firstRun(bool)+0x1f2c>
10004782:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004784: R_386_32	showSidebar
10004789:	a1 00 00 00 00       	mov    eax,ds:0x0	1000478a: R_386_32	term
1000478e:	83 ec 0c             	sub    esp,0xc
10004791:	50                   	push   eax
10004792:	e8 fc ff ff ff       	call   10004793 <firstRun(bool)+0x1e3e>	10004793: R_386_PC32	setActiveTerminal(VgaText*)
10004797:	83 c4 10             	add    esp,0x10
1000479a:	e8 fc ff ff ff       	call   1000479b <firstRun(bool)+0x1e46>	1000479b: R_386_PC32	drawBootScreen()
1000479f:	83 ec 0c             	sub    esp,0xc
100047a2:	68 55 aa 00 10       	push   0x1000aa55	100047a3: R_386_32	.text
100047a7:	6a 0d                	push   0xd
100047a9:	6a 32                	push   0x32
100047ab:	6a 05                	push   0x5
100047ad:	6a 16                	push   0x16
100047af:	e8 fc ff ff ff       	call   100047b0 <firstRun(bool)+0x1e5b>	100047b0: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100047b4:	83 c4 20             	add    esp,0x20
100047b7:	a1 00 00 00 00       	mov    eax,ds:0x0	100047b8: R_386_32	term
100047bc:	83 ec 04             	sub    esp,0x4
100047bf:	6a 08                	push   0x8
100047c1:	6a 18                	push   0x18
100047c3:	50                   	push   eax
100047c4:	e8 fc ff ff ff       	call   100047c5 <firstRun(bool)+0x1e70>	100047c5: R_386_PC32	VgaText::setCursor(int, int)
100047c9:	83 c4 10             	add    esp,0x10
100047cc:	a1 00 00 00 00       	mov    eax,ds:0x0	100047cd: R_386_32	term
100047d1:	83 ec 08             	sub    esp,0x8
100047d4:	68 6c aa 00 10       	push   0x1000aa6c	100047d5: R_386_32	.text
100047d9:	50                   	push   eax
100047da:	e8 fc ff ff ff       	call   100047db <firstRun(bool)+0x1e86>	100047db: R_386_PC32	VgaText::puts(char const*)
100047df:	83 c4 10             	add    esp,0x10
100047e2:	a1 00 00 00 00       	mov    eax,ds:0x0	100047e3: R_386_32	term
100047e7:	83 ec 04             	sub    esp,0x4
100047ea:	6a 0a                	push   0xa
100047ec:	6a 18                	push   0x18
100047ee:	50                   	push   eax
100047ef:	e8 fc ff ff ff       	call   100047f0 <firstRun(bool)+0x1e9b>	100047f0: R_386_PC32	VgaText::setCursor(int, int)
100047f4:	83 c4 10             	add    esp,0x10
100047f7:	a1 00 00 00 00       	mov    eax,ds:0x0	100047f8: R_386_32	term
100047fc:	83 ec 08             	sub    esp,0x8
100047ff:	68 94 aa 00 10       	push   0x1000aa94	10004800: R_386_32	.text
10004804:	50                   	push   eax
10004805:	e8 fc ff ff ff       	call   10004806 <firstRun(bool)+0x1eb1>	10004806: R_386_PC32	VgaText::puts(char const*)
1000480a:	83 c4 10             	add    esp,0x10
1000480d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000480e: R_386_32	term
10004812:	83 ec 04             	sub    esp,0x4
10004815:	6a 0b                	push   0xb
10004817:	6a 18                	push   0x18
10004819:	50                   	push   eax
1000481a:	e8 fc ff ff ff       	call   1000481b <firstRun(bool)+0x1ec6>	1000481b: R_386_PC32	VgaText::setCursor(int, int)
1000481f:	83 c4 10             	add    esp,0x10
10004822:	a1 00 00 00 00       	mov    eax,ds:0x0	10004823: R_386_32	term
10004827:	83 ec 08             	sub    esp,0x8
1000482a:	68 bd aa 00 10       	push   0x1000aabd	1000482b: R_386_32	.text
1000482f:	50                   	push   eax
10004830:	e8 fc ff ff ff       	call   10004831 <firstRun(bool)+0x1edc>	10004831: R_386_PC32	VgaText::puts(char const*)
10004835:	83 c4 10             	add    esp,0x10
10004838:	a1 00 00 00 00       	mov    eax,ds:0x0	10004839: R_386_32	term
1000483d:	83 ec 04             	sub    esp,0x4
10004840:	6a 0e                	push   0xe
10004842:	6a 18                	push   0x18
10004844:	50                   	push   eax
10004845:	e8 fc ff ff ff       	call   10004846 <firstRun(bool)+0x1ef1>	10004846: R_386_PC32	VgaText::setCursor(int, int)
1000484a:	83 c4 10             	add    esp,0x10
1000484d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000484e: R_386_32	term
10004852:	83 ec 08             	sub    esp,0x8
10004855:	68 cc aa 00 10       	push   0x1000aacc	10004856: R_386_32	.text
1000485a:	50                   	push   eax
1000485b:	e8 fc ff ff ff       	call   1000485c <firstRun(bool)+0x1f07>	1000485c: R_386_PC32	VgaText::puts(char const*)
10004860:	83 c4 10             	add    esp,0x10
10004863:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004865: R_386_32	installKey
1000486a:	a0 00 00 00 00       	mov    al,ds:0x0	1000486b: R_386_32	installKey
1000486f:	84 c0                	test   al,al
10004871:	0f 94 c0             	sete   al
10004874:	84 c0                	test   al,al
10004876:	74 02                	je     1000487a <firstRun(bool)+0x1f25>
10004878:	eb f0                	jmp    1000486a <firstRun(bool)+0x1f15>
1000487a:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000487c: R_386_32	installKey
10004881:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004883: R_386_32	installKey
10004888:	83 ec 0c             	sub    esp,0xc
1000488b:	68 84 03 00 00       	push   0x384
10004890:	e8 fc ff ff ff       	call   10004891 <firstRun(bool)+0x1f3c>	10004891: R_386_PC32	milliTenthSleep(unsigned int)
10004895:	83 c4 10             	add    esp,0x10
10004898:	e8 fc ff ff ff       	call   10004899 <firstRun(bool)+0x1f44>	10004899: R_386_PC32	drawBootScreen()
1000489d:	83 ec 0c             	sub    esp,0xc
100048a0:	68 18 2e 00 00       	push   0x2e18
100048a5:	e8 fc ff ff ff       	call   100048a6 <firstRun(bool)+0x1f51>	100048a6: R_386_PC32	milliTenthSleep(unsigned int)
100048aa:	83 c4 10             	add    esp,0x10
100048ad:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100048b4:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100048b6: R_386_32	installKey
100048bb:	e8 fc ff ff ff       	call   100048bc <firstRun(bool)+0x1f67>	100048bc: R_386_PC32	drawBootScreen()
100048c0:	83 ec 0c             	sub    esp,0xc
100048c3:	68 f6 aa 00 10       	push   0x1000aaf6	100048c4: R_386_32	.text
100048c8:	6a 0e                	push   0xe
100048ca:	6a 32                	push   0x32
100048cc:	6a 02                	push   0x2
100048ce:	6a 16                	push   0x16
100048d0:	e8 fc ff ff ff       	call   100048d1 <firstRun(bool)+0x1f7c>	100048d1: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100048d5:	83 c4 20             	add    esp,0x20
100048d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100048d9: R_386_32	term
100048dd:	83 ec 04             	sub    esp,0x4
100048e0:	6a 18                	push   0x18
100048e2:	6a 11                	push   0x11
100048e4:	50                   	push   eax
100048e5:	e8 fc ff ff ff       	call   100048e6 <firstRun(bool)+0x1f91>	100048e6: R_386_PC32	VgaText::setCursor(int, int)
100048ea:	83 c4 10             	add    esp,0x10
100048ed:	a1 00 00 00 00       	mov    eax,ds:0x0	100048ee: R_386_32	term
100048f2:	6a 0b                	push   0xb
100048f4:	6a 03                	push   0x3
100048f6:	68 92 a9 00 10       	push   0x1000a992	100048f7: R_386_32	.text
100048fb:	50                   	push   eax
100048fc:	e8 fc ff ff ff       	call   100048fd <firstRun(bool)+0x1fa8>	100048fd: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004901:	83 c4 10             	add    esp,0x10
10004904:	a1 00 00 00 00       	mov    eax,ds:0x0	10004905: R_386_32	term
10004909:	83 ec 04             	sub    esp,0x4
1000490c:	6a 05                	push   0x5
1000490e:	6a 18                	push   0x18
10004910:	50                   	push   eax
10004911:	e8 fc ff ff ff       	call   10004912 <firstRun(bool)+0x1fbd>	10004912: R_386_PC32	VgaText::setCursor(int, int)
10004916:	83 c4 10             	add    esp,0x10
10004919:	a1 00 00 00 00       	mov    eax,ds:0x0	1000491a: R_386_32	term
1000491e:	83 ec 08             	sub    esp,0x8
10004921:	68 04 ab 00 10       	push   0x1000ab04	10004922: R_386_32	.text
10004926:	50                   	push   eax
10004927:	e8 fc ff ff ff       	call   10004928 <firstRun(bool)+0x1fd3>	10004928: R_386_PC32	VgaText::puts(char const*)
1000492c:	83 c4 10             	add    esp,0x10
1000492f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004930: R_386_32	term
10004934:	83 ec 04             	sub    esp,0x4
10004937:	6a 06                	push   0x6
10004939:	6a 18                	push   0x18
1000493b:	50                   	push   eax
1000493c:	e8 fc ff ff ff       	call   1000493d <firstRun(bool)+0x1fe8>	1000493d: R_386_PC32	VgaText::setCursor(int, int)
10004941:	83 c4 10             	add    esp,0x10
10004944:	a1 00 00 00 00       	mov    eax,ds:0x0	10004945: R_386_32	term
10004949:	83 ec 08             	sub    esp,0x8
1000494c:	68 68 a9 00 10       	push   0x1000a968	1000494d: R_386_32	.text
10004951:	50                   	push   eax
10004952:	e8 fc ff ff ff       	call   10004953 <firstRun(bool)+0x1ffe>	10004953: R_386_PC32	VgaText::puts(char const*)
10004957:	83 c4 10             	add    esp,0x10
1000495a:	c6 05 10 00 00 00 00 	mov    BYTE PTR ds:0x10,0x0	1000495c: R_386_32	pkeybuf
10004961:	c6 05 11 00 00 00 00 	mov    BYTE PTR ds:0x11,0x0	10004963: R_386_32	pkeybuf
10004968:	a1 00 00 00 00       	mov    eax,ds:0x0	10004969: R_386_32	term
1000496d:	83 ec 04             	sub    esp,0x4
10004970:	6a 08                	push   0x8
10004972:	6a 1c                	push   0x1c
10004974:	50                   	push   eax
10004975:	e8 fc ff ff ff       	call   10004976 <firstRun(bool)+0x2021>	10004976: R_386_PC32	VgaText::setCursor(int, int)
1000497a:	83 c4 10             	add    esp,0x10
1000497d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000497e: R_386_32	term
10004982:	83 ec 08             	sub    esp,0x8
10004985:	68 00 00 00 00       	push   0x0	10004986: R_386_32	pkeybuf
1000498a:	50                   	push   eax
1000498b:	e8 fc ff ff ff       	call   1000498c <firstRun(bool)+0x2037>	1000498c: R_386_PC32	VgaText::puts(char const*)
10004990:	83 c4 10             	add    esp,0x10
10004993:	a1 00 00 00 00       	mov    eax,ds:0x0	10004994: R_386_32	term
10004998:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000499b:	83 c2 1c             	add    edx,0x1c
1000499e:	83 ec 04             	sub    esp,0x4
100049a1:	6a 08                	push   0x8
100049a3:	52                   	push   edx
100049a4:	50                   	push   eax
100049a5:	e8 fc ff ff ff       	call   100049a6 <firstRun(bool)+0x2051>	100049a6: R_386_PC32	VgaText::setCursor(int, int)
100049aa:	83 c4 10             	add    esp,0x10
100049ad:	a1 00 00 00 00       	mov    eax,ds:0x0	100049ae: R_386_32	term
100049b2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100049b5:	81 c2 00 00 00 00    	add    edx,0x0	100049b7: R_386_32	pkeybuf
100049bb:	8a 12                	mov    dl,BYTE PTR [edx]
100049bd:	0f be d2             	movsx  edx,dl
100049c0:	6a 00                	push   0x0
100049c2:	6a 0f                	push   0xf
100049c4:	52                   	push   edx
100049c5:	50                   	push   eax
100049c6:	e8 fc ff ff ff       	call   100049c7 <firstRun(bool)+0x2072>	100049c7: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100049cb:	83 c4 10             	add    esp,0x10
100049ce:	a1 00 00 00 00       	mov    eax,ds:0x0	100049cf: R_386_32	term
100049d3:	83 ec 04             	sub    esp,0x4
100049d6:	6a 08                	push   0x8
100049d8:	6a 2c                	push   0x2c
100049da:	50                   	push   eax
100049db:	e8 fc ff ff ff       	call   100049dc <firstRun(bool)+0x2087>	100049dc: R_386_PC32	VgaText::setCursor(int, int)
100049e0:	83 c4 10             	add    esp,0x10
100049e3:	a1 00 00 00 00       	mov    eax,ds:0x0	100049e4: R_386_32	term
100049e8:	6a 0f                	push   0xf
100049ea:	6a 0f                	push   0xf
100049ec:	6a 20                	push   0x20
100049ee:	50                   	push   eax
100049ef:	e8 fc ff ff ff       	call   100049f0 <firstRun(bool)+0x209b>	100049f0: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100049f4:	83 c4 10             	add    esp,0x10
100049f7:	a1 00 00 00 00       	mov    eax,ds:0x0	100049f8: R_386_32	term
100049fc:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100049ff:	83 c2 1c             	add    edx,0x1c
10004a02:	83 ec 04             	sub    esp,0x4
10004a05:	6a 08                	push   0x8
10004a07:	52                   	push   edx
10004a08:	50                   	push   eax
10004a09:	e8 fc ff ff ff       	call   10004a0a <firstRun(bool)+0x20b5>	10004a0a: R_386_PC32	VgaText::setCursor(int, int)
10004a0e:	83 c4 10             	add    esp,0x10
10004a11:	a0 00 00 00 00       	mov    al,ds:0x0	10004a12: R_386_32	installKey
10004a16:	84 c0                	test   al,al
10004a18:	0f 94 c0             	sete   al
10004a1b:	84 c0                	test   al,al
10004a1d:	74 02                	je     10004a21 <firstRun(bool)+0x20cc>
10004a1f:	eb f0                	jmp    10004a11 <firstRun(bool)+0x20bc>
10004a21:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a22: R_386_32	term
10004a26:	05 82 00 00 00       	add    eax,0x82
10004a2b:	83 ec 04             	sub    esp,0x4
10004a2e:	6a 10                	push   0x10
10004a30:	6a 00                	push   0x0
10004a32:	50                   	push   eax
10004a33:	e8 fc ff ff ff       	call   10004a34 <firstRun(bool)+0x20df>	10004a34: R_386_PC32	memset
10004a38:	83 c4 10             	add    esp,0x10
10004a3b:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a3c: R_386_32	term
10004a40:	05 02 01 00 00       	add    eax,0x102
10004a45:	83 ec 04             	sub    esp,0x4
10004a48:	6a 10                	push   0x10
10004a4a:	6a 00                	push   0x0
10004a4c:	50                   	push   eax
10004a4d:	e8 fc ff ff ff       	call   10004a4e <firstRun(bool)+0x20f9>	10004a4e: R_386_PC32	memset
10004a52:	83 c4 10             	add    esp,0x10
10004a55:	a0 00 00 00 00       	mov    al,ds:0x0	10004a56: R_386_32	installKey
10004a5a:	3c 03                	cmp    al,0x3
10004a5c:	74 09                	je     10004a67 <firstRun(bool)+0x2112>
10004a5e:	a0 00 00 00 00       	mov    al,ds:0x0	10004a5f: R_386_32	installKey
10004a63:	3c 08                	cmp    al,0x8
10004a65:	75 04                	jne    10004a6b <firstRun(bool)+0x2116>
10004a67:	b0 01                	mov    al,0x1
10004a69:	eb 02                	jmp    10004a6d <firstRun(bool)+0x2118>
10004a6b:	b0 00                	mov    al,0x0
10004a6d:	84 c0                	test   al,al
10004a6f:	74 31                	je     10004aa2 <firstRun(bool)+0x214d>
10004a71:	ff 4d e4             	dec    DWORD PTR [ebp-0x1c]
10004a74:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10004a78:	75 14                	jne    10004a8e <firstRun(bool)+0x2139>
10004a7a:	83 ec 0c             	sub    esp,0xc
10004a7d:	68 00 00 00 00       	push   0x0	10004a7e: R_386_32	pkeybuf
10004a82:	e8 fc ff ff ff       	call   10004a83 <firstRun(bool)+0x212e>	10004a83: R_386_PC32	strlen
10004a87:	83 c4 10             	add    esp,0x10
10004a8a:	48                   	dec    eax
10004a8b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10004a8e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004a91:	05 00 00 00 00       	add    eax,0x0	10004a92: R_386_32	pkeybuf
10004a96:	8a 00                	mov    al,BYTE PTR [eax]
10004a98:	3c 2d                	cmp    al,0x2d
10004a9a:	0f 85 6f 03 00 00    	jne    10004e0f <firstRun(bool)+0x24ba>
10004aa0:	eb cf                	jmp    10004a71 <firstRun(bool)+0x211c>
10004aa2:	a0 00 00 00 00       	mov    al,ds:0x0	10004aa3: R_386_32	installKey
10004aa7:	3c 2f                	cmp    al,0x2f
10004aa9:	7e 09                	jle    10004ab4 <firstRun(bool)+0x215f>
10004aab:	a0 00 00 00 00       	mov    al,ds:0x0	10004aac: R_386_32	installKey
10004ab0:	3c 39                	cmp    al,0x39
10004ab2:	7e 36                	jle    10004aea <firstRun(bool)+0x2195>
10004ab4:	a0 00 00 00 00       	mov    al,ds:0x0	10004ab5: R_386_32	installKey
10004ab9:	3c 40                	cmp    al,0x40
10004abb:	7e 09                	jle    10004ac6 <firstRun(bool)+0x2171>
10004abd:	a0 00 00 00 00       	mov    al,ds:0x0	10004abe: R_386_32	installKey
10004ac2:	3c 5a                	cmp    al,0x5a
10004ac4:	7e 24                	jle    10004aea <firstRun(bool)+0x2195>
10004ac6:	a0 00 00 00 00       	mov    al,ds:0x0	10004ac7: R_386_32	installKey
10004acb:	3c 60                	cmp    al,0x60
10004acd:	7e 09                	jle    10004ad8 <firstRun(bool)+0x2183>
10004acf:	a0 00 00 00 00       	mov    al,ds:0x0	10004ad0: R_386_32	installKey
10004ad4:	3c 7a                	cmp    al,0x7a
10004ad6:	7e 12                	jle    10004aea <firstRun(bool)+0x2195>
10004ad8:	a0 00 00 00 00       	mov    al,ds:0x0	10004ad9: R_386_32	installKey
10004add:	3c 20                	cmp    al,0x20
10004adf:	74 09                	je     10004aea <firstRun(bool)+0x2195>
10004ae1:	a0 00 00 00 00       	mov    al,ds:0x0	10004ae2: R_386_32	installKey
10004ae6:	3c 04                	cmp    al,0x4
10004ae8:	75 04                	jne    10004aee <firstRun(bool)+0x2199>
10004aea:	b0 01                	mov    al,0x1
10004aec:	eb 02                	jmp    10004af0 <firstRun(bool)+0x219b>
10004aee:	b0 00                	mov    al,0x0
10004af0:	84 c0                	test   al,al
10004af2:	0f 84 a3 00 00 00    	je     10004b9b <firstRun(bool)+0x2246>
10004af8:	a0 00 00 00 00       	mov    al,ds:0x0	10004af9: R_386_32	installKey
10004afd:	3c 2f                	cmp    al,0x2f
10004aff:	7e 09                	jle    10004b0a <firstRun(bool)+0x21b5>
10004b01:	a0 00 00 00 00       	mov    al,ds:0x0	10004b02: R_386_32	installKey
10004b06:	3c 39                	cmp    al,0x39
10004b08:	7e 24                	jle    10004b2e <firstRun(bool)+0x21d9>
10004b0a:	a0 00 00 00 00       	mov    al,ds:0x0	10004b0b: R_386_32	installKey
10004b0f:	3c 40                	cmp    al,0x40
10004b11:	7e 09                	jle    10004b1c <firstRun(bool)+0x21c7>
10004b13:	a0 00 00 00 00       	mov    al,ds:0x0	10004b14: R_386_32	installKey
10004b18:	3c 5a                	cmp    al,0x5a
10004b1a:	7e 12                	jle    10004b2e <firstRun(bool)+0x21d9>
10004b1c:	a0 00 00 00 00       	mov    al,ds:0x0	10004b1d: R_386_32	installKey
10004b21:	3c 60                	cmp    al,0x60
10004b23:	7e 0d                	jle    10004b32 <firstRun(bool)+0x21dd>
10004b25:	a0 00 00 00 00       	mov    al,ds:0x0	10004b26: R_386_32	installKey
10004b2a:	3c 7a                	cmp    al,0x7a
10004b2c:	7f 04                	jg     10004b32 <firstRun(bool)+0x21dd>
10004b2e:	b0 01                	mov    al,0x1
10004b30:	eb 02                	jmp    10004b34 <firstRun(bool)+0x21df>
10004b32:	b0 00                	mov    al,0x0
10004b34:	84 c0                	test   al,al
10004b36:	74 2c                	je     10004b64 <firstRun(bool)+0x220f>
10004b38:	a0 00 00 00 00       	mov    al,ds:0x0	10004b39: R_386_32	installKey
10004b3d:	3c 60                	cmp    al,0x60
10004b3f:	7e 13                	jle    10004b54 <firstRun(bool)+0x21ff>
10004b41:	a0 00 00 00 00       	mov    al,ds:0x0	10004b42: R_386_32	installKey
10004b46:	3c 7a                	cmp    al,0x7a
10004b48:	7f 0a                	jg     10004b54 <firstRun(bool)+0x21ff>
10004b4a:	a0 00 00 00 00       	mov    al,ds:0x0	10004b4b: R_386_32	installKey
10004b4f:	83 e8 20             	sub    eax,0x20
10004b52:	eb 05                	jmp    10004b59 <firstRun(bool)+0x2204>
10004b54:	a0 00 00 00 00       	mov    al,ds:0x0	10004b55: R_386_32	installKey
10004b59:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004b5c:	81 c2 00 00 00 00    	add    edx,0x0	10004b5e: R_386_32	pkeybuf
10004b62:	88 02                	mov    BYTE PTR [edx],al
10004b64:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10004b67:	83 ec 0c             	sub    esp,0xc
10004b6a:	68 00 00 00 00       	push   0x0	10004b6b: R_386_32	pkeybuf
10004b6f:	e8 fc ff ff ff       	call   10004b70 <firstRun(bool)+0x221b>	10004b70: R_386_PC32	strlen
10004b74:	83 c4 10             	add    esp,0x10
10004b77:	89 c2                	mov    edx,eax
10004b79:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004b7c:	39 c2                	cmp    edx,eax
10004b7e:	77 07                	ja     10004b87 <firstRun(bool)+0x2232>
10004b80:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10004b87:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004b8a:	05 00 00 00 00       	add    eax,0x0	10004b8b: R_386_32	pkeybuf
10004b8f:	8a 00                	mov    al,BYTE PTR [eax]
10004b91:	3c 2d                	cmp    al,0x2d
10004b93:	0f 85 76 02 00 00    	jne    10004e0f <firstRun(bool)+0x24ba>
10004b99:	eb c9                	jmp    10004b64 <firstRun(bool)+0x220f>
10004b9b:	a0 00 00 00 00       	mov    al,ds:0x0	10004b9c: R_386_32	installKey
10004ba0:	3c 1b                	cmp    al,0x1b
10004ba2:	0f 94 c0             	sete   al
10004ba5:	84 c0                	test   al,al
10004ba7:	0f 85 99 f9 ff ff    	jne    10004546 <firstRun(bool)+0x1bf1>
10004bad:	a0 00 00 00 00       	mov    al,ds:0x0	10004bae: R_386_32	installKey
10004bb2:	3c 0a                	cmp    al,0xa
10004bb4:	0f 94 c0             	sete   al
10004bb7:	84 c0                	test   al,al
10004bb9:	0f 84 50 02 00 00    	je     10004e0f <firstRun(bool)+0x24ba>
10004bbf:	83 ec 0c             	sub    esp,0xc
10004bc2:	68 00 00 00 00       	push   0x0	10004bc3: R_386_32	pkeybuf
10004bc7:	e8 fc ff ff ff       	call   10004bc8 <firstRun(bool)+0x2273>	10004bc8: R_386_PC32	checkExtendedKey(char*)
10004bcc:	83 c4 10             	add    esp,0x10
10004bcf:	85 c0                	test   eax,eax
10004bd1:	0f 95 c0             	setne  al
10004bd4:	88 45 87             	mov    BYTE PTR [ebp-0x79],al
10004bd7:	80 7d 87 00          	cmp    BYTE PTR [ebp-0x79],0x0
10004bdb:	74 5b                	je     10004c38 <firstRun(bool)+0x22e3>
10004bdd:	83 ec 0c             	sub    esp,0xc
10004be0:	68 f0 0a 00 00       	push   0xaf0
10004be5:	e8 fc ff ff ff       	call   10004be6 <firstRun(bool)+0x2291>	10004be6: R_386_PC32	milliTenthSleep(unsigned int)
10004bea:	83 c4 10             	add    esp,0x10
10004bed:	e8 fc ff ff ff       	call   10004bee <firstRun(bool)+0x2299>	10004bee: R_386_PC32	drawBootScreen()
10004bf2:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004bf4: R_386_32	installKey
10004bf9:	83 ec 0c             	sub    esp,0xc
10004bfc:	68 84 03 00 00       	push   0x384
10004c01:	e8 fc ff ff ff       	call   10004c02 <firstRun(bool)+0x22ad>	10004c02: R_386_PC32	milliTenthSleep(unsigned int)
10004c06:	83 c4 10             	add    esp,0x10
10004c09:	e8 fc ff ff ff       	call   10004c0a <firstRun(bool)+0x22b5>	10004c0a: R_386_PC32	drawBootScreen()
10004c0e:	83 ec 0c             	sub    esp,0xc
10004c11:	68 c0 12 00 00       	push   0x12c0
10004c16:	e8 fc ff ff ff       	call   10004c17 <firstRun(bool)+0x22c2>	10004c17: R_386_PC32	milliTenthSleep(unsigned int)
10004c1b:	83 c4 10             	add    esp,0x10
10004c1e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004c20: R_386_32	installKey
10004c25:	90                   	nop
10004c26:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
10004c2d:	0f 84 e8 01 00 00    	je     10004e1b <firstRun(bool)+0x24c6>
10004c33:	e9 cf 02 00 00       	jmp    10004f07 <firstRun(bool)+0x25b2>
10004c38:	83 ec 0c             	sub    esp,0xc
10004c3b:	68 f0 0a 00 00       	push   0xaf0
10004c40:	e8 fc ff ff ff       	call   10004c41 <firstRun(bool)+0x22ec>	10004c41: R_386_PC32	milliTenthSleep(unsigned int)
10004c45:	83 c4 10             	add    esp,0x10
10004c48:	e8 fc ff ff ff       	call   10004c49 <firstRun(bool)+0x22f4>	10004c49: R_386_PC32	drawBootScreen()
10004c4d:	83 ec 08             	sub    esp,0x8
10004c50:	6a 01                	push   0x1
10004c52:	68 f6 aa 00 10       	push   0x1000aaf6	10004c53: R_386_32	.text
10004c57:	6a 0e                	push   0xe
10004c59:	6a 32                	push   0x32
10004c5b:	6a 02                	push   0x2
10004c5d:	6a 16                	push   0x16
10004c5f:	e8 fc ff ff ff       	call   10004c60 <firstRun(bool)+0x230b>	10004c60: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10004c64:	83 c4 20             	add    esp,0x20
10004c67:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c68: R_386_32	term
10004c6c:	83 ec 04             	sub    esp,0x4
10004c6f:	6a 05                	push   0x5
10004c71:	6a 18                	push   0x18
10004c73:	50                   	push   eax
10004c74:	e8 fc ff ff ff       	call   10004c75 <firstRun(bool)+0x2320>	10004c75: R_386_PC32	VgaText::setCursor(int, int)
10004c79:	83 c4 10             	add    esp,0x10
10004c7c:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c7d: R_386_32	term
10004c81:	6a 07                	push   0x7
10004c83:	6a 00                	push   0x0
10004c85:	68 04 ab 00 10       	push   0x1000ab04	10004c86: R_386_32	.text
10004c8a:	50                   	push   eax
10004c8b:	e8 fc ff ff ff       	call   10004c8c <firstRun(bool)+0x2337>	10004c8c: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004c90:	83 c4 10             	add    esp,0x10
10004c93:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c94: R_386_32	term
10004c98:	83 ec 04             	sub    esp,0x4
10004c9b:	6a 06                	push   0x6
10004c9d:	6a 18                	push   0x18
10004c9f:	50                   	push   eax
10004ca0:	e8 fc ff ff ff       	call   10004ca1 <firstRun(bool)+0x234c>	10004ca1: R_386_PC32	VgaText::setCursor(int, int)
10004ca5:	83 c4 10             	add    esp,0x10
10004ca8:	a1 00 00 00 00       	mov    eax,ds:0x0	10004ca9: R_386_32	term
10004cad:	6a 07                	push   0x7
10004caf:	6a 00                	push   0x0
10004cb1:	68 68 a9 00 10       	push   0x1000a968	10004cb2: R_386_32	.text
10004cb6:	50                   	push   eax
10004cb7:	e8 fc ff ff ff       	call   10004cb8 <firstRun(bool)+0x2363>	10004cb8: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004cbc:	83 c4 10             	add    esp,0x10
10004cbf:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cc0: R_386_32	term
10004cc4:	83 ec 04             	sub    esp,0x4
10004cc7:	6a 08                	push   0x8
10004cc9:	6a 1c                	push   0x1c
10004ccb:	50                   	push   eax
10004ccc:	e8 fc ff ff ff       	call   10004ccd <firstRun(bool)+0x2378>	10004ccd: R_386_PC32	VgaText::setCursor(int, int)
10004cd1:	83 c4 10             	add    esp,0x10
10004cd4:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cd5: R_386_32	term
10004cd9:	6a 07                	push   0x7
10004cdb:	6a 00                	push   0x0
10004cdd:	68 00 00 00 00       	push   0x0	10004cde: R_386_32	pkeybuf
10004ce2:	50                   	push   eax
10004ce3:	e8 fc ff ff ff       	call   10004ce4 <firstRun(bool)+0x238f>	10004ce4: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004ce8:	83 c4 10             	add    esp,0x10
10004ceb:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cec: R_386_32	term
10004cf0:	83 ec 04             	sub    esp,0x4
10004cf3:	6a 08                	push   0x8
10004cf5:	6a 2c                	push   0x2c
10004cf7:	50                   	push   eax
10004cf8:	e8 fc ff ff ff       	call   10004cf9 <firstRun(bool)+0x23a4>	10004cf9: R_386_PC32	VgaText::setCursor(int, int)
10004cfd:	83 c4 10             	add    esp,0x10
10004d00:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d01: R_386_32	term
10004d05:	6a 07                	push   0x7
10004d07:	6a 07                	push   0x7
10004d09:	6a 20                	push   0x20
10004d0b:	50                   	push   eax
10004d0c:	e8 fc ff ff ff       	call   10004d0d <firstRun(bool)+0x23b8>	10004d0d: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10004d11:	83 c4 10             	add    esp,0x10
10004d14:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d15: R_386_32	term
10004d19:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004d1c:	83 c2 1c             	add    edx,0x1c
10004d1f:	83 ec 04             	sub    esp,0x4
10004d22:	6a 08                	push   0x8
10004d24:	52                   	push   edx
10004d25:	50                   	push   eax
10004d26:	e8 fc ff ff ff       	call   10004d27 <firstRun(bool)+0x23d2>	10004d27: R_386_PC32	VgaText::setCursor(int, int)
10004d2b:	83 c4 10             	add    esp,0x10
10004d2e:	83 ec 0c             	sub    esp,0xc
10004d31:	68 55 aa 00 10       	push   0x1000aa55	10004d32: R_386_32	.text
10004d36:	6a 0b                	push   0xb
10004d38:	6a 2b                	push   0x2b
10004d3a:	6a 0a                	push   0xa
10004d3c:	6a 22                	push   0x22
10004d3e:	e8 fc ff ff ff       	call   10004d3f <firstRun(bool)+0x23ea>	10004d3f: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004d43:	83 c4 20             	add    esp,0x20
10004d46:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d47: R_386_32	term
10004d4b:	83 ec 04             	sub    esp,0x4
10004d4e:	6a 0d                	push   0xd
10004d50:	6a 24                	push   0x24
10004d52:	50                   	push   eax
10004d53:	e8 fc ff ff ff       	call   10004d54 <firstRun(bool)+0x23ff>	10004d54: R_386_PC32	VgaText::setCursor(int, int)
10004d58:	83 c4 10             	add    esp,0x10
10004d5b:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d5c: R_386_32	term
10004d60:	83 ec 08             	sub    esp,0x8
10004d63:	68 2c ab 00 10       	push   0x1000ab2c	10004d64: R_386_32	.text
10004d68:	50                   	push   eax
10004d69:	e8 fc ff ff ff       	call   10004d6a <firstRun(bool)+0x2415>	10004d6a: R_386_PC32	VgaText::puts(char const*)
10004d6e:	83 c4 10             	add    esp,0x10
10004d71:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d72: R_386_32	term
10004d76:	83 ec 04             	sub    esp,0x4
10004d79:	6a 0f                	push   0xf
10004d7b:	6a 24                	push   0x24
10004d7d:	50                   	push   eax
10004d7e:	e8 fc ff ff ff       	call   10004d7f <firstRun(bool)+0x242a>	10004d7f: R_386_PC32	VgaText::setCursor(int, int)
10004d83:	83 c4 10             	add    esp,0x10
10004d86:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d87: R_386_32	term
10004d8b:	83 ec 08             	sub    esp,0x8
10004d8e:	68 54 ab 00 10       	push   0x1000ab54	10004d8f: R_386_32	.text
10004d93:	50                   	push   eax
10004d94:	e8 fc ff ff ff       	call   10004d95 <firstRun(bool)+0x2440>	10004d95: R_386_PC32	VgaText::puts(char const*)
10004d99:	83 c4 10             	add    esp,0x10
10004d9c:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d9d: R_386_32	term
10004da1:	83 ec 04             	sub    esp,0x4
10004da4:	6a 10                	push   0x10
10004da6:	6a 24                	push   0x24
10004da8:	50                   	push   eax
10004da9:	e8 fc ff ff ff       	call   10004daa <firstRun(bool)+0x2455>	10004daa: R_386_PC32	VgaText::setCursor(int, int)
10004dae:	83 c4 10             	add    esp,0x10
10004db1:	a1 00 00 00 00       	mov    eax,ds:0x0	10004db2: R_386_32	term
10004db6:	83 ec 08             	sub    esp,0x8
10004db9:	68 78 ab 00 10       	push   0x1000ab78	10004dba: R_386_32	.text
10004dbe:	50                   	push   eax
10004dbf:	e8 fc ff ff ff       	call   10004dc0 <firstRun(bool)+0x246b>	10004dc0: R_386_PC32	VgaText::puts(char const*)
10004dc4:	83 c4 10             	add    esp,0x10
10004dc7:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004dc9: R_386_32	installKey
10004dce:	83 ec 0c             	sub    esp,0xc
10004dd1:	68 94 11 00 00       	push   0x1194
10004dd6:	e8 fc ff ff ff       	call   10004dd7 <firstRun(bool)+0x2482>	10004dd7: R_386_PC32	milliTenthSleep(unsigned int)
10004ddb:	83 c4 10             	add    esp,0x10
10004dde:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004de0: R_386_32	installKey
10004de5:	a0 00 00 00 00       	mov    al,ds:0x0	10004de6: R_386_32	installKey
10004dea:	84 c0                	test   al,al
10004dec:	0f 94 c0             	sete   al
10004def:	84 c0                	test   al,al
10004df1:	74 02                	je     10004df5 <firstRun(bool)+0x24a0>
10004df3:	eb f0                	jmp    10004de5 <firstRun(bool)+0x2490>
10004df5:	e8 fc ff ff ff       	call   10004df6 <firstRun(bool)+0x24a1>	10004df6: R_386_PC32	drawBootScreen()
10004dfa:	83 ec 0c             	sub    esp,0xc
10004dfd:	68 9c 18 00 00       	push   0x189c
10004e02:	e8 fc ff ff ff       	call   10004e03 <firstRun(bool)+0x24ae>	10004e03: R_386_PC32	milliTenthSleep(unsigned int)
10004e07:	83 c4 10             	add    esp,0x10
10004e0a:	e9 a5 fa ff ff       	jmp    100048b4 <firstRun(bool)+0x1f5f>
10004e0f:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004e11: R_386_32	installKey
10004e16:	e9 3f fb ff ff       	jmp    1000495a <firstRun(bool)+0x2005>
10004e1b:	e8 fc ff ff ff       	call   10004e1c <firstRun(bool)+0x24c7>	10004e1c: R_386_PC32	drawBootScreen()
10004e20:	83 ec 0c             	sub    esp,0xc
10004e23:	68 99 ab 00 10       	push   0x1000ab99	10004e24: R_386_32	.text
10004e28:	6a 0d                	push   0xd
10004e2a:	6a 32                	push   0x32
10004e2c:	6a 05                	push   0x5
10004e2e:	6a 16                	push   0x16
10004e30:	e8 fc ff ff ff       	call   10004e31 <firstRun(bool)+0x24dc>	10004e31: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004e35:	83 c4 20             	add    esp,0x20
10004e38:	83 ec 0c             	sub    esp,0xc
10004e3b:	6a 00                	push   0x0
10004e3d:	e8 fc ff ff ff       	call   10004e3e <firstRun(bool)+0x24e9>	10004e3e: R_386_PC32	bootInstallTasks(int)
10004e42:	83 c4 10             	add    esp,0x10
10004e45:	83 ec 0c             	sub    esp,0xc
10004e48:	68 b4 ab 00 10       	push   0x1000abb4	10004e49: R_386_32	.text
10004e4d:	e8 fc ff ff ff       	call   10004e4e <firstRun(bool)+0x24f9>	10004e4e: R_386_PC32	Dbg::kprintf(char const*, ...)
10004e52:	83 c4 10             	add    esp,0x10
10004e55:	c7 45 80 0c 00 00 00 	mov    DWORD PTR [ebp-0x80],0xc
10004e5c:	83 ec 0c             	sub    esp,0xc
10004e5f:	ff 75 80             	push   DWORD PTR [ebp-0x80]
10004e62:	e8 fc ff ff ff       	call   10004e63 <firstRun(bool)+0x250e>	10004e63: R_386_PC32	Virt::setupPageSwapping(int)
10004e67:	83 c4 10             	add    esp,0x10
10004e6a:	83 ec 0c             	sub    esp,0xc
10004e6d:	6a 01                	push   0x1
10004e6f:	e8 fc ff ff ff       	call   10004e70 <firstRun(bool)+0x251b>	10004e70: R_386_PC32	bootInstallTasks(int)
10004e74:	83 c4 10             	add    esp,0x10
10004e77:	83 ec 0c             	sub    esp,0xc
10004e7a:	68 d4 ab 00 10       	push   0x1000abd4	10004e7b: R_386_32	.text
10004e7f:	e8 fc ff ff ff       	call   10004e80 <firstRun(bool)+0x252b>	10004e80: R_386_PC32	rmtree(char*)
10004e84:	83 c4 10             	add    esp,0x10
10004e87:	83 ec 0c             	sub    esp,0xc
10004e8a:	68 ee ab 00 10       	push   0x1000abee	10004e8b: R_386_32	.text
10004e8f:	e8 fc ff ff ff       	call   10004e90 <firstRun(bool)+0x253b>	10004e90: R_386_PC32	rmtree(char*)
10004e94:	83 c4 10             	add    esp,0x10
10004e97:	83 ec 08             	sub    esp,0x8
10004e9a:	68 c0 01 00 00       	push   0x1c0
10004e9f:	68 d4 ab 00 10       	push   0x1000abd4	10004ea0: R_386_32	.text
10004ea4:	e8 fc ff ff ff       	call   10004ea5 <firstRun(bool)+0x2550>	10004ea5: R_386_PC32	mkdir(char const*, int)
10004ea9:	83 c4 10             	add    esp,0x10
10004eac:	83 ec 08             	sub    esp,0x8
10004eaf:	68 c0 01 00 00       	push   0x1c0
10004eb4:	68 ee ab 00 10       	push   0x1000abee	10004eb5: R_386_32	.text
10004eb9:	e8 fc ff ff ff       	call   10004eba <firstRun(bool)+0x2565>	10004eba: R_386_PC32	mkdir(char const*, int)
10004ebe:	83 c4 10             	add    esp,0x10
10004ec1:	83 ec 08             	sub    esp,0x8
10004ec4:	68 d4 ab 00 10       	push   0x1000abd4	10004ec5: R_386_32	.text
10004ec9:	68 08 ac 00 10       	push   0x1000ac08	10004eca: R_386_32	.text
10004ece:	e8 fc ff ff ff       	call   10004ecf <firstRun(bool)+0x257a>	10004ecf: R_386_PC32	copytree(char*, char*)
10004ed3:	83 c4 10             	add    esp,0x10
10004ed6:	83 ec 0c             	sub    esp,0xc
10004ed9:	6a 02                	push   0x2
10004edb:	e8 fc ff ff ff       	call   10004edc <firstRun(bool)+0x2587>	10004edc: R_386_PC32	bootInstallTasks(int)
10004ee0:	83 c4 10             	add    esp,0x10
10004ee3:	83 ec 0c             	sub    esp,0xc
10004ee6:	68 00 00 00 00       	push   0x0	10004ee7: R_386_32	currName
10004eeb:	e8 fc ff ff ff       	call   10004eec <firstRun(bool)+0x2597>	10004eec: R_386_PC32	createUser(char const*)
10004ef0:	83 c4 10             	add    esp,0x10
10004ef3:	83 ec 0c             	sub    esp,0xc
10004ef6:	6a 03                	push   0x3
10004ef8:	e8 fc ff ff ff       	call   10004ef9 <firstRun(bool)+0x25a4>	10004ef9: R_386_PC32	bootInstallTasks(int)
10004efd:	83 c4 10             	add    esp,0x10
10004f00:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10004f02: R_386_32	VgaText::hiddenOut
10004f07:	8d 65 f4             	lea    esp,[ebp-0xc]
10004f0a:	5b                   	pop    ebx
10004f0b:	5e                   	pop    esi
10004f0c:	5f                   	pop    edi
10004f0d:	5d                   	pop    ebp
10004f0e:	c3                   	ret    

10004f0f <loadExtensions()>:
10004f0f:	55                   	push   ebp
10004f10:	89 e5                	mov    ebp,esp
10004f12:	83 ec 08             	sub    esp,0x8
10004f15:	83 ec 0c             	sub    esp,0xc
10004f18:	68 b0 ac 00 10       	push   0x1000acb0	10004f19: R_386_32	.text
10004f1d:	e8 fc ff ff ff       	call   10004f1e <loadExtensions()+0xf>	10004f1e: R_386_PC32	KeSetBootMessage(char const*)
10004f22:	83 c4 10             	add    esp,0x10
10004f25:	90                   	nop
10004f26:	c9                   	leave  
10004f27:	c3                   	ret    

10004f28 <rgtree(Reghive_Tag*, int, int)>:
10004f28:	55                   	push   ebp
10004f29:	89 e5                	mov    ebp,esp
10004f2b:	53                   	push   ebx
10004f2c:	83 ec 44             	sub    esp,0x44
10004f2f:	83 7d 0c 01          	cmp    DWORD PTR [ebp+0xc],0x1
10004f33:	75 16                	jne    10004f4b <rgtree(Reghive_Tag*, int, int)+0x23>
10004f35:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10004f39:	75 10                	jne    10004f4b <rgtree(Reghive_Tag*, int, int)+0x23>
10004f3b:	83 ec 0c             	sub    esp,0xc
10004f3e:	68 c6 ac 00 10       	push   0x1000acc6	10004f3f: R_386_32	.text
10004f43:	e8 fc ff ff ff       	call   10004f44 <rgtree(Reghive_Tag*, int, int)+0x1c>	10004f44: R_386_PC32	Dbg::kprintf(char const*, ...)
10004f48:	83 c4 10             	add    esp,0x10
10004f4b:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
10004f4f:	0f 8e a9 00 00 00    	jle    10004ffe <rgtree(Reghive_Tag*, int, int)+0xd6>
10004f55:	83 ec 04             	sub    esp,0x4
10004f58:	6a 32                	push   0x32
10004f5a:	6a 00                	push   0x0
10004f5c:	8d 45 be             	lea    eax,[ebp-0x42]
10004f5f:	50                   	push   eax
10004f60:	e8 fc ff ff ff       	call   10004f61 <rgtree(Reghive_Tag*, int, int)+0x39>	10004f61: R_386_PC32	memset
10004f65:	83 c4 10             	add    esp,0x10
10004f68:	83 ec 04             	sub    esp,0x4
10004f6b:	8d 45 be             	lea    eax,[ebp-0x42]
10004f6e:	50                   	push   eax
10004f6f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10004f72:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004f75:	e8 fc ff ff ff       	call   10004f76 <rgtree(Reghive_Tag*, int, int)+0x4e>	10004f76: R_386_PC32	CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)
10004f7a:	83 c4 10             	add    esp,0x10
10004f7d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10004f80:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10004f87:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10004f8a:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10004f8d:	7d 15                	jge    10004fa4 <rgtree(Reghive_Tag*, int, int)+0x7c>
10004f8f:	83 ec 0c             	sub    esp,0xc
10004f92:	68 77 a7 00 10       	push   0x1000a777	10004f93: R_386_32	.text
10004f97:	e8 fc ff ff ff       	call   10004f98 <rgtree(Reghive_Tag*, int, int)+0x70>	10004f98: R_386_PC32	Dbg::kprintf(char const*, ...)
10004f9c:	83 c4 10             	add    esp,0x10
10004f9f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10004fa2:	eb e3                	jmp    10004f87 <rgtree(Reghive_Tag*, int, int)+0x5f>
10004fa4:	83 ec 08             	sub    esp,0x8
10004fa7:	8d 45 be             	lea    eax,[ebp-0x42]
10004faa:	50                   	push   eax
10004fab:	68 cb ac 00 10       	push   0x1000accb	10004fac: R_386_32	.text
10004fb0:	e8 fc ff ff ff       	call   10004fb1 <rgtree(Reghive_Tag*, int, int)+0x89>	10004fb1: R_386_PC32	Dbg::kprintf(char const*, ...)
10004fb5:	83 c4 10             	add    esp,0x10
10004fb8:	83 7d f0 4e          	cmp    DWORD PTR [ebp-0x10],0x4e
10004fbc:	75 27                	jne    10004fe5 <rgtree(Reghive_Tag*, int, int)+0xbd>
10004fbe:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10004fc1:	8d 58 04             	lea    ebx,[eax+0x4]
10004fc4:	83 ec 08             	sub    esp,0x8
10004fc7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10004fca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004fcd:	e8 fc ff ff ff       	call   10004fce <rgtree(Reghive_Tag*, int, int)+0xa6>	10004fce: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10004fd2:	83 c4 10             	add    esp,0x10
10004fd5:	83 ec 04             	sub    esp,0x4
10004fd8:	53                   	push   ebx
10004fd9:	50                   	push   eax
10004fda:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004fdd:	e8 fc ff ff ff       	call   10004fde <rgtree(Reghive_Tag*, int, int)+0xb6>	10004fde: R_386_PC32	rgtree(Reghive_Tag*, int, int)
10004fe2:	83 c4 10             	add    esp,0x10
10004fe5:	83 ec 08             	sub    esp,0x8
10004fe8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10004feb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004fee:	e8 fc ff ff ff       	call   10004fef <rgtree(Reghive_Tag*, int, int)+0xc7>	10004fef: R_386_PC32	CmGetNext(Reghive_Tag*, int)
10004ff3:	83 c4 10             	add    esp,0x10
10004ff6:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10004ff9:	e9 4d ff ff ff       	jmp    10004f4b <rgtree(Reghive_Tag*, int, int)+0x23>
10004ffe:	90                   	nop
10004fff:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10005002:	c9                   	leave  
10005003:	c3                   	ret    

10005004 <getRegsafeName(char*, char*)>:
10005004:	55                   	push   ebp
10005005:	89 e5                	mov    ebp,esp
10005007:	83 ec 10             	sub    esp,0x10
1000500a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000500d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10005010:	e8 fc ff ff ff       	call   10005011 <getRegsafeName(char*, char*)+0xd>	10005011: R_386_PC32	strcpy
10005015:	83 c4 08             	add    esp,0x8
10005018:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
1000501f:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005022:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005025:	01 d0                	add    eax,edx
10005027:	8a 00                	mov    al,BYTE PTR [eax]
10005029:	84 c0                	test   al,al
1000502b:	74 7f                	je     100050ac <getRegsafeName(char*, char*)+0xa8>
1000502d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005030:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005033:	01 d0                	add    eax,edx
10005035:	8a 00                	mov    al,BYTE PTR [eax]
10005037:	3c 60                	cmp    al,0x60
10005039:	7e 42                	jle    1000507d <getRegsafeName(char*, char*)+0x79>
1000503b:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
1000503e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005041:	01 d0                	add    eax,edx
10005043:	8a 00                	mov    al,BYTE PTR [eax]
10005045:	3c 7a                	cmp    al,0x7a
10005047:	7f 34                	jg     1000507d <getRegsafeName(char*, char*)+0x79>
10005049:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
1000504c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000504f:	01 d0                	add    eax,edx
10005051:	8a 00                	mov    al,BYTE PTR [eax]
10005053:	8d 48 9f             	lea    ecx,[eax-0x61]
10005056:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005059:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000505c:	01 d0                	add    eax,edx
1000505e:	88 ca                	mov    dl,cl
10005060:	88 10                	mov    BYTE PTR [eax],dl
10005062:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005065:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005068:	01 d0                	add    eax,edx
1000506a:	8a 00                	mov    al,BYTE PTR [eax]
1000506c:	8d 48 41             	lea    ecx,[eax+0x41]
1000506f:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005072:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005075:	01 d0                	add    eax,edx
10005077:	88 ca                	mov    dl,cl
10005079:	88 10                	mov    BYTE PTR [eax],dl
1000507b:	eb 27                	jmp    100050a4 <getRegsafeName(char*, char*)+0xa0>
1000507d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10005080:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005083:	01 d0                	add    eax,edx
10005085:	8a 00                	mov    al,BYTE PTR [eax]
10005087:	3c 40                	cmp    al,0x40
10005089:	7e 0e                	jle    10005099 <getRegsafeName(char*, char*)+0x95>
1000508b:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
1000508e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005091:	01 d0                	add    eax,edx
10005093:	8a 00                	mov    al,BYTE PTR [eax]
10005095:	3c 5a                	cmp    al,0x5a
10005097:	7e 0b                	jle    100050a4 <getRegsafeName(char*, char*)+0xa0>
10005099:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
1000509c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000509f:	01 d0                	add    eax,edx
100050a1:	c6 00 5a             	mov    BYTE PTR [eax],0x5a
100050a4:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
100050a7:	e9 73 ff ff ff       	jmp    1000501f <getRegsafeName(char*, char*)+0x1b>
100050ac:	90                   	nop
100050ad:	c9                   	leave  
100050ae:	c3                   	ret    

100050af <begin(void*)>:
100050af:	55                   	push   ebp
100050b0:	89 e5                	mov    ebp,esp
100050b2:	57                   	push   edi
100050b3:	56                   	push   esi
100050b4:	53                   	push   ebx
100050b5:	81 ec 5c 07 00 00    	sub    esp,0x75c
100050bb:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
100050bf:	83 ec 0c             	sub    esp,0xc
100050c2:	68 14 01 00 00       	push   0x114
100050c7:	e8 fc ff ff ff       	call   100050c8 <begin(void*)+0x19>	100050c8: R_386_PC32	operator new(unsigned long)
100050cc:	83 c4 10             	add    esp,0x10
100050cf:	89 c3                	mov    ebx,eax
100050d1:	a1 00 00 00 00       	mov    eax,ds:0x0	100050d2: R_386_32	kernelProcess
100050d6:	83 ec 04             	sub    esp,0x4
100050d9:	50                   	push   eax
100050da:	68 d0 ac 00 10       	push   0x1000acd0	100050db: R_386_32	.text
100050df:	53                   	push   ebx
100050e0:	e8 fc ff ff ff       	call   100050e1 <begin(void*)+0x32>	100050e1: R_386_PC32	File::File(char const*, Process*)
100050e5:	83 c4 10             	add    esp,0x10
100050e8:	89 5d b8             	mov    DWORD PTR [ebp-0x48],ebx
100050eb:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100050ef:	75 10                	jne    10005101 <begin(void*)+0x52>
100050f1:	83 ec 0c             	sub    esp,0xc
100050f4:	68 ee ac 00 10       	push   0x1000acee	100050f5: R_386_32	.text
100050f9:	e8 fc ff ff ff       	call   100050fa <begin(void*)+0x4b>	100050fa: R_386_PC32	KePanic(char const*)
100050fe:	83 c4 10             	add    esp,0x10
10005101:	83 ec 08             	sub    esp,0x8
10005104:	6a 01                	push   0x1
10005106:	ff 75 b8             	push   DWORD PTR [ebp-0x48]
10005109:	e8 fc ff ff ff       	call   1000510a <begin(void*)+0x5b>	1000510a: R_386_PC32	File::open(FileOpenMode)
1000510e:	83 c4 10             	add    esp,0x10
10005111:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10005114:	83 7d b4 00          	cmp    DWORD PTR [ebp-0x4c],0x0
10005118:	75 10                	jne    1000512a <begin(void*)+0x7b>
1000511a:	83 ec 0c             	sub    esp,0xc
1000511d:	ff 75 b8             	push   DWORD PTR [ebp-0x48]
10005120:	e8 fc ff ff ff       	call   10005121 <begin(void*)+0x72>	10005121: R_386_PC32	File::close()
10005125:	83 c4 10             	add    esp,0x10
10005128:	eb 04                	jmp    1000512e <begin(void*)+0x7f>
1000512a:	c6 45 e7 01          	mov    BYTE PTR [ebp-0x19],0x1
1000512e:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
10005132:	74 15                	je     10005149 <begin(void*)+0x9a>
10005134:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10005137:	8b 00                	mov    eax,DWORD PTR [eax]
10005139:	83 c0 08             	add    eax,0x8
1000513c:	8b 00                	mov    eax,DWORD PTR [eax]
1000513e:	83 ec 0c             	sub    esp,0xc
10005141:	ff 75 b8             	push   DWORD PTR [ebp-0x48]
10005144:	ff d0                	call   eax
10005146:	83 c4 10             	add    esp,0x10
10005149:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	1000514b: R_386_32	KeIsPreemptionOn
10005150:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
10005154:	74 0f                	je     10005165 <begin(void*)+0xb6>
10005156:	83 ec 0c             	sub    esp,0xc
10005159:	6a 00                	push   0x0
1000515b:	e8 fc ff ff ff       	call   1000515c <begin(void*)+0xad>	1000515c: R_386_PC32	firstRun(bool)
10005160:	83 c4 10             	add    esp,0x10
10005163:	eb 05                	jmp    1000516a <begin(void*)+0xbb>
10005165:	e8 fc ff ff ff       	call   10005166 <begin(void*)+0xb7>	10005166: R_386_PC32	loadExtensions()
1000516a:	8d 45 8c             	lea    eax,[ebp-0x74]
1000516d:	bb ec b2 00 10       	mov    ebx,0x1000b2ec	1000516e: R_386_32	.text
10005172:	ba 04 00 00 00       	mov    edx,0x4
10005177:	89 c7                	mov    edi,eax
10005179:	89 de                	mov    esi,ebx
1000517b:	89 d1                	mov    ecx,edx
1000517d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000517f:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
10005183:	0f 84 ab 13 00 00    	je     10006534 <begin(void*)+0x1485>
10005189:	83 ec 0c             	sub    esp,0xc
1000518c:	68 24 07 00 00       	push   0x724
10005191:	e8 fc ff ff ff       	call   10005192 <begin(void*)+0xe3>	10005192: R_386_PC32	operator new(unsigned long)
10005196:	83 c4 10             	add    esp,0x10
10005199:	89 c3                	mov    ebx,eax
1000519b:	8d 45 8c             	lea    eax,[ebp-0x74]
1000519e:	50                   	push   eax
1000519f:	6a 00                	push   0x0
100051a1:	68 fe ac 00 10       	push   0x1000acfe	100051a2: R_386_32	.text
100051a6:	53                   	push   ebx
100051a7:	e8 fc ff ff ff       	call   100051a8 <begin(void*)+0xf9>	100051a8: R_386_PC32	Process::Process(char const*, Process*, char**)
100051ac:	83 c4 10             	add    esp,0x10
100051af:	89 5d b0             	mov    DWORD PTR [ebp-0x50],ebx
100051b2:	83 ec 0c             	sub    esp,0xc
100051b5:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
100051b8:	e8 fc ff ff ff       	call   100051b9 <begin(void*)+0x10a>	100051b9: R_386_PC32	Process::createUserThread()
100051bd:	83 c4 10             	add    esp,0x10
100051c0:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100051c2: R_386_32	VgaText::hiddenOut
100051c7:	a1 00 00 00 00       	mov    eax,ds:0x0	100051c8: R_386_32	term
100051cc:	83 ec 0c             	sub    esp,0xc
100051cf:	50                   	push   eax
100051d0:	e8 fc ff ff ff       	call   100051d1 <begin(void*)+0x122>	100051d1: R_386_PC32	setActiveTerminal(VgaText*)
100051d5:	83 c4 10             	add    esp,0x10
100051d8:	e8 fc ff ff ff       	call   100051d9 <begin(void*)+0x12a>	100051d9: R_386_PC32	drawBootScreen()
100051dd:	83 ec 0c             	sub    esp,0xc
100051e0:	68 99 ab 00 10       	push   0x1000ab99	100051e1: R_386_32	.text
100051e5:	6a 0d                	push   0xd
100051e7:	6a 32                	push   0x32
100051e9:	6a 05                	push   0x5
100051eb:	6a 16                	push   0x16
100051ed:	e8 fc ff ff ff       	call   100051ee <begin(void*)+0x13f>	100051ee: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100051f2:	83 c4 20             	add    esp,0x20
100051f5:	83 ec 0c             	sub    esp,0xc
100051f8:	6a 03                	push   0x3
100051fa:	e8 fc ff ff ff       	call   100051fb <begin(void*)+0x14c>	100051fb: R_386_PC32	bootInstallTasks(int)
100051ff:	83 c4 10             	add    esp,0x10
10005202:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10005204: R_386_32	VgaText::hiddenOut
10005209:	83 ec 0c             	sub    esp,0xc
1000520c:	68 14 01 00 00       	push   0x114
10005211:	e8 fc ff ff ff       	call   10005212 <begin(void*)+0x163>	10005212: R_386_PC32	operator new(unsigned long)
10005216:	83 c4 10             	add    esp,0x10
10005219:	89 c3                	mov    ebx,eax
1000521b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000521c: R_386_32	kernelProcess
10005220:	83 ec 04             	sub    esp,0x4
10005223:	50                   	push   eax
10005224:	68 1b ad 00 10       	push   0x1000ad1b	10005225: R_386_32	.text
10005229:	53                   	push   ebx
1000522a:	e8 fc ff ff ff       	call   1000522b <begin(void*)+0x17c>	1000522b: R_386_PC32	File::File(char const*, Process*)
1000522f:	83 c4 10             	add    esp,0x10
10005232:	89 5d ac             	mov    DWORD PTR [ebp-0x54],ebx
10005235:	83 ec 08             	sub    esp,0x8
10005238:	6a 01                	push   0x1
1000523a:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
1000523d:	e8 fc ff ff ff       	call   1000523e <begin(void*)+0x18f>	1000523e: R_386_PC32	File::open(FileOpenMode)
10005242:	83 c4 10             	add    esp,0x10
10005245:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10005248:	83 7d a8 00          	cmp    DWORD PTR [ebp-0x58],0x0
1000524c:	75 39                	jne    10005287 <begin(void*)+0x1d8>
1000524e:	83 ec 0c             	sub    esp,0xc
10005251:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
10005254:	e8 fc ff ff ff       	call   10005255 <begin(void*)+0x1a6>	10005255: R_386_PC32	File::close()
10005259:	83 c4 10             	add    esp,0x10
1000525c:	83 ec 0c             	sub    esp,0xc
1000525f:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
10005262:	e8 fc ff ff ff       	call   10005263 <begin(void*)+0x1b4>	10005263: R_386_PC32	File::unlink()
10005267:	83 c4 10             	add    esp,0x10
1000526a:	83 7d ac 00          	cmp    DWORD PTR [ebp-0x54],0x0
1000526e:	74 44                	je     100052b4 <begin(void*)+0x205>
10005270:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10005273:	8b 00                	mov    eax,DWORD PTR [eax]
10005275:	83 c0 08             	add    eax,0x8
10005278:	8b 00                	mov    eax,DWORD PTR [eax]
1000527a:	83 ec 0c             	sub    esp,0xc
1000527d:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
10005280:	ff d0                	call   eax
10005282:	83 c4 10             	add    esp,0x10
10005285:	eb 2d                	jmp    100052b4 <begin(void*)+0x205>
10005287:	83 7d ac 00          	cmp    DWORD PTR [ebp-0x54],0x0
1000528b:	74 15                	je     100052a2 <begin(void*)+0x1f3>
1000528d:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10005290:	8b 00                	mov    eax,DWORD PTR [eax]
10005292:	83 c0 08             	add    eax,0x8
10005295:	8b 00                	mov    eax,DWORD PTR [eax]
10005297:	83 ec 0c             	sub    esp,0xc
1000529a:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
1000529d:	ff d0                	call   eax
1000529f:	83 c4 10             	add    esp,0x10
100052a2:	83 ec 0c             	sub    esp,0xc
100052a5:	6a 01                	push   0x1
100052a7:	e8 fc ff ff ff       	call   100052a8 <begin(void*)+0x1f9>	100052a8: R_386_PC32	sleep(unsigned int)
100052ac:	83 c4 10             	add    esp,0x10
100052af:	e9 55 ff ff ff       	jmp    10005209 <begin(void*)+0x15a>
100052b4:	90                   	nop
100052b5:	83 ec 0c             	sub    esp,0xc
100052b8:	6a 01                	push   0x1
100052ba:	e8 fc ff ff ff       	call   100052bb <begin(void*)+0x20c>	100052bb: R_386_PC32	sleep(unsigned int)
100052bf:	83 c4 10             	add    esp,0x10
100052c2:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100052c4: R_386_32	VgaText::hiddenOut
100052c9:	a1 00 00 00 00       	mov    eax,ds:0x0	100052ca: R_386_32	term
100052ce:	83 ec 0c             	sub    esp,0xc
100052d1:	50                   	push   eax
100052d2:	e8 fc ff ff ff       	call   100052d3 <begin(void*)+0x224>	100052d3: R_386_PC32	setActiveTerminal(VgaText*)
100052d7:	83 c4 10             	add    esp,0x10
100052da:	e8 fc ff ff ff       	call   100052db <begin(void*)+0x22c>	100052db: R_386_PC32	drawBootScreen()
100052df:	83 ec 0c             	sub    esp,0xc
100052e2:	68 99 ab 00 10       	push   0x1000ab99	100052e3: R_386_32	.text
100052e7:	6a 0d                	push   0xd
100052e9:	6a 32                	push   0x32
100052eb:	6a 05                	push   0x5
100052ed:	6a 16                	push   0x16
100052ef:	e8 fc ff ff ff       	call   100052f0 <begin(void*)+0x241>	100052f0: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100052f4:	83 c4 20             	add    esp,0x20
100052f7:	83 ec 0c             	sub    esp,0xc
100052fa:	6a 04                	push   0x4
100052fc:	e8 fc ff ff ff       	call   100052fd <begin(void*)+0x24e>	100052fd: R_386_PC32	bootInstallTasks(int)
10005301:	83 c4 10             	add    esp,0x10
10005304:	eb 01                	jmp    10005307 <begin(void*)+0x258>
10005306:	90                   	nop
10005307:	83 ec 0c             	sub    esp,0xc
1000530a:	6a 05                	push   0x5
1000530c:	e8 fc ff ff ff       	call   1000530d <begin(void*)+0x25e>	1000530d: R_386_PC32	bootInstallTasks(int)
10005311:	83 c4 10             	add    esp,0x10
10005314:	83 ec 0c             	sub    esp,0xc
10005317:	68 28 ad 00 10       	push   0x1000ad28	10005318: R_386_32	.text
1000531c:	e8 fc ff ff ff       	call   1000531d <begin(void*)+0x26e>	1000531d: R_386_PC32	CmOpen(char const*)
10005321:	83 c4 10             	add    esp,0x10
10005324:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10005327:	a0 00 00 00 00       	mov    al,ds:0x0	10005328: R_386_32	createNewUserMode
1000532c:	83 f0 01             	xor    eax,0x1
1000532f:	84 c0                	test   al,al
10005331:	74 15                	je     10005348 <begin(void*)+0x299>
10005333:	83 ec 04             	sub    esp,0x4
10005336:	68 4d ad 00 10       	push   0x1000ad4d	10005337: R_386_32	.text
1000533b:	6a 00                	push   0x0
1000533d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005340:	e8 fc ff ff ff       	call   10005341 <begin(void*)+0x292>	10005341: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005345:	83 c4 10             	add    esp,0x10
10005348:	83 ec 08             	sub    esp,0x8
1000534b:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10005351:	50                   	push   eax
10005352:	68 00 00 00 00       	push   0x0	10005353: R_386_32	currName
10005357:	e8 fc ff ff ff       	call   10005358 <begin(void*)+0x2a9>	10005358: R_386_PC32	getRegsafeName(char*, char*)
1000535c:	83 c4 10             	add    esp,0x10
1000535f:	83 ec 08             	sub    esp,0x8
10005362:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10005368:	50                   	push   eax
10005369:	68 54 ad 00 10       	push   0x1000ad54	1000536a: R_386_32	.text
1000536e:	e8 fc ff ff ff       	call   1000536f <begin(void*)+0x2c0>	1000536f: R_386_PC32	Dbg::kprintf(char const*, ...)
10005373:	83 c4 10             	add    esp,0x10
10005376:	83 ec 08             	sub    esp,0x8
10005379:	68 66 ad 00 10       	push   0x1000ad66	1000537a: R_386_32	.text
1000537e:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005384:	50                   	push   eax
10005385:	e8 fc ff ff ff       	call   10005386 <begin(void*)+0x2d7>	10005386: R_386_PC32	strcpy
1000538a:	83 c4 10             	add    esp,0x10
1000538d:	83 ec 08             	sub    esp,0x8
10005390:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10005396:	50                   	push   eax
10005397:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
1000539d:	50                   	push   eax
1000539e:	e8 fc ff ff ff       	call   1000539f <begin(void*)+0x2f0>	1000539f: R_386_PC32	strcat
100053a3:	83 c4 10             	add    esp,0x10
100053a6:	83 ec 08             	sub    esp,0x8
100053a9:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
100053af:	50                   	push   eax
100053b0:	68 74 ad 00 10       	push   0x1000ad74	100053b1: R_386_32	.text
100053b5:	e8 fc ff ff ff       	call   100053b6 <begin(void*)+0x307>	100053b6: R_386_PC32	Dbg::kprintf(char const*, ...)
100053ba:	83 c4 10             	add    esp,0x10
100053bd:	a0 00 00 00 00       	mov    al,ds:0x0	100053be: R_386_32	createNewUserMode
100053c2:	83 f0 01             	xor    eax,0x1
100053c5:	84 c0                	test   al,al
100053c7:	0f 84 60 03 00 00    	je     1000572d <begin(void*)+0x67e>
100053cd:	83 ec 08             	sub    esp,0x8
100053d0:	68 4d ad 00 10       	push   0x1000ad4d	100053d1: R_386_32	.text
100053d5:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100053d8:	e8 fc ff ff ff       	call   100053d9 <begin(void*)+0x32a>	100053d9: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100053dd:	83 c4 10             	add    esp,0x10
100053e0:	83 ec 08             	sub    esp,0x8
100053e3:	50                   	push   eax
100053e4:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100053e7:	e8 fc ff ff ff       	call   100053e8 <begin(void*)+0x339>	100053e8: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100053ec:	83 c4 10             	add    esp,0x10
100053ef:	83 ec 04             	sub    esp,0x4
100053f2:	68 87 ad 00 10       	push   0x1000ad87	100053f3: R_386_32	.text
100053f7:	50                   	push   eax
100053f8:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100053fb:	e8 fc ff ff ff       	call   100053fc <begin(void*)+0x34d>	100053fc: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005400:	83 c4 10             	add    esp,0x10
10005403:	83 ec 08             	sub    esp,0x8
10005406:	68 4d ad 00 10       	push   0x1000ad4d	10005407: R_386_32	.text
1000540b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000540e:	e8 fc ff ff ff       	call   1000540f <begin(void*)+0x360>	1000540f: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005413:	83 c4 10             	add    esp,0x10
10005416:	83 ec 08             	sub    esp,0x8
10005419:	50                   	push   eax
1000541a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000541d:	e8 fc ff ff ff       	call   1000541e <begin(void*)+0x36f>	1000541e: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005422:	83 c4 10             	add    esp,0x10
10005425:	83 ec 04             	sub    esp,0x4
10005428:	68 8d ad 00 10       	push   0x1000ad8d	10005429: R_386_32	.text
1000542d:	50                   	push   eax
1000542e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005431:	e8 fc ff ff ff       	call   10005432 <begin(void*)+0x383>	10005432: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005436:	83 c4 10             	add    esp,0x10
10005439:	83 ec 08             	sub    esp,0x8
1000543c:	68 4d ad 00 10       	push   0x1000ad4d	1000543d: R_386_32	.text
10005441:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005444:	e8 fc ff ff ff       	call   10005445 <begin(void*)+0x396>	10005445: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005449:	83 c4 10             	add    esp,0x10
1000544c:	83 ec 08             	sub    esp,0x8
1000544f:	50                   	push   eax
10005450:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005453:	e8 fc ff ff ff       	call   10005454 <begin(void*)+0x3a5>	10005454: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005458:	83 c4 10             	add    esp,0x10
1000545b:	83 ec 04             	sub    esp,0x4
1000545e:	68 92 ad 00 10       	push   0x1000ad92	1000545f: R_386_32	.text
10005463:	50                   	push   eax
10005464:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005467:	e8 fc ff ff ff       	call   10005468 <begin(void*)+0x3b9>	10005468: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000546c:	83 c4 10             	add    esp,0x10
1000546f:	83 ec 08             	sub    esp,0x8
10005472:	68 4d ad 00 10       	push   0x1000ad4d	10005473: R_386_32	.text
10005477:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000547a:	e8 fc ff ff ff       	call   1000547b <begin(void*)+0x3cc>	1000547b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000547f:	83 c4 10             	add    esp,0x10
10005482:	83 ec 08             	sub    esp,0x8
10005485:	50                   	push   eax
10005486:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005489:	e8 fc ff ff ff       	call   1000548a <begin(void*)+0x3db>	1000548a: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000548e:	83 c4 10             	add    esp,0x10
10005491:	83 ec 04             	sub    esp,0x4
10005494:	68 97 ad 00 10       	push   0x1000ad97	10005495: R_386_32	.text
10005499:	50                   	push   eax
1000549a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000549d:	e8 fc ff ff ff       	call   1000549e <begin(void*)+0x3ef>	1000549e: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100054a2:	83 c4 10             	add    esp,0x10
100054a5:	83 ec 08             	sub    esp,0x8
100054a8:	68 4d ad 00 10       	push   0x1000ad4d	100054a9: R_386_32	.text
100054ad:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054b0:	e8 fc ff ff ff       	call   100054b1 <begin(void*)+0x402>	100054b1: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100054b5:	83 c4 10             	add    esp,0x10
100054b8:	83 ec 08             	sub    esp,0x8
100054bb:	50                   	push   eax
100054bc:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054bf:	e8 fc ff ff ff       	call   100054c0 <begin(void*)+0x411>	100054c0: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100054c4:	83 c4 10             	add    esp,0x10
100054c7:	83 ec 04             	sub    esp,0x4
100054ca:	68 9d ad 00 10       	push   0x1000ad9d	100054cb: R_386_32	.text
100054cf:	50                   	push   eax
100054d0:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054d3:	e8 fc ff ff ff       	call   100054d4 <begin(void*)+0x425>	100054d4: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100054d8:	83 c4 10             	add    esp,0x10
100054db:	83 ec 08             	sub    esp,0x8
100054de:	68 a7 ad 00 10       	push   0x1000ada7	100054df: R_386_32	.text
100054e3:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054e6:	e8 fc ff ff ff       	call   100054e7 <begin(void*)+0x438>	100054e7: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100054eb:	83 c4 10             	add    esp,0x10
100054ee:	83 ec 08             	sub    esp,0x8
100054f1:	50                   	push   eax
100054f2:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100054f5:	e8 fc ff ff ff       	call   100054f6 <begin(void*)+0x447>	100054f6: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100054fa:	83 c4 10             	add    esp,0x10
100054fd:	83 ec 04             	sub    esp,0x4
10005500:	68 b8 ad 00 10       	push   0x1000adb8	10005501: R_386_32	.text
10005505:	50                   	push   eax
10005506:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005509:	e8 fc ff ff ff       	call   1000550a <begin(void*)+0x45b>	1000550a: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000550e:	83 c4 10             	add    esp,0x10
10005511:	83 ec 08             	sub    esp,0x8
10005514:	68 a7 ad 00 10       	push   0x1000ada7	10005515: R_386_32	.text
10005519:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000551c:	e8 fc ff ff ff       	call   1000551d <begin(void*)+0x46e>	1000551d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005521:	83 c4 10             	add    esp,0x10
10005524:	83 ec 08             	sub    esp,0x8
10005527:	50                   	push   eax
10005528:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000552b:	e8 fc ff ff ff       	call   1000552c <begin(void*)+0x47d>	1000552c: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005530:	83 c4 10             	add    esp,0x10
10005533:	83 ec 04             	sub    esp,0x4
10005536:	68 bd ad 00 10       	push   0x1000adbd	10005537: R_386_32	.text
1000553b:	50                   	push   eax
1000553c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000553f:	e8 fc ff ff ff       	call   10005540 <begin(void*)+0x491>	10005540: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005544:	83 c4 10             	add    esp,0x10
10005547:	83 ec 08             	sub    esp,0x8
1000554a:	68 a7 ad 00 10       	push   0x1000ada7	1000554b: R_386_32	.text
1000554f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005552:	e8 fc ff ff ff       	call   10005553 <begin(void*)+0x4a4>	10005553: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005557:	83 c4 10             	add    esp,0x10
1000555a:	83 ec 08             	sub    esp,0x8
1000555d:	50                   	push   eax
1000555e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005561:	e8 fc ff ff ff       	call   10005562 <begin(void*)+0x4b3>	10005562: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005566:	83 c4 10             	add    esp,0x10
10005569:	83 ec 04             	sub    esp,0x4
1000556c:	68 c2 ad 00 10       	push   0x1000adc2	1000556d: R_386_32	.text
10005571:	50                   	push   eax
10005572:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005575:	e8 fc ff ff ff       	call   10005576 <begin(void*)+0x4c7>	10005576: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000557a:	83 c4 10             	add    esp,0x10
1000557d:	83 ec 08             	sub    esp,0x8
10005580:	68 a7 ad 00 10       	push   0x1000ada7	10005581: R_386_32	.text
10005585:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005588:	e8 fc ff ff ff       	call   10005589 <begin(void*)+0x4da>	10005589: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000558d:	83 c4 10             	add    esp,0x10
10005590:	83 ec 08             	sub    esp,0x8
10005593:	50                   	push   eax
10005594:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005597:	e8 fc ff ff ff       	call   10005598 <begin(void*)+0x4e9>	10005598: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000559c:	83 c4 10             	add    esp,0x10
1000559f:	83 ec 04             	sub    esp,0x4
100055a2:	68 c8 ad 00 10       	push   0x1000adc8	100055a3: R_386_32	.text
100055a7:	50                   	push   eax
100055a8:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055ab:	e8 fc ff ff ff       	call   100055ac <begin(void*)+0x4fd>	100055ac: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100055b0:	83 c4 10             	add    esp,0x10
100055b3:	83 ec 08             	sub    esp,0x8
100055b6:	68 a7 ad 00 10       	push   0x1000ada7	100055b7: R_386_32	.text
100055bb:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055be:	e8 fc ff ff ff       	call   100055bf <begin(void*)+0x510>	100055bf: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100055c3:	83 c4 10             	add    esp,0x10
100055c6:	83 ec 08             	sub    esp,0x8
100055c9:	50                   	push   eax
100055ca:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055cd:	e8 fc ff ff ff       	call   100055ce <begin(void*)+0x51f>	100055ce: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100055d2:	83 c4 10             	add    esp,0x10
100055d5:	83 ec 04             	sub    esp,0x4
100055d8:	68 cd ad 00 10       	push   0x1000adcd	100055d9: R_386_32	.text
100055dd:	50                   	push   eax
100055de:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055e1:	e8 fc ff ff ff       	call   100055e2 <begin(void*)+0x533>	100055e2: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100055e6:	83 c4 10             	add    esp,0x10
100055e9:	83 ec 08             	sub    esp,0x8
100055ec:	68 a7 ad 00 10       	push   0x1000ada7	100055ed: R_386_32	.text
100055f1:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100055f4:	e8 fc ff ff ff       	call   100055f5 <begin(void*)+0x546>	100055f5: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100055f9:	83 c4 10             	add    esp,0x10
100055fc:	83 ec 08             	sub    esp,0x8
100055ff:	50                   	push   eax
10005600:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005603:	e8 fc ff ff ff       	call   10005604 <begin(void*)+0x555>	10005604: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005608:	83 c4 10             	add    esp,0x10
1000560b:	83 ec 04             	sub    esp,0x4
1000560e:	68 d3 ad 00 10       	push   0x1000add3	1000560f: R_386_32	.text
10005613:	50                   	push   eax
10005614:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005617:	e8 fc ff ff ff       	call   10005618 <begin(void*)+0x569>	10005618: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000561c:	83 c4 10             	add    esp,0x10
1000561f:	83 ec 08             	sub    esp,0x8
10005622:	68 a7 ad 00 10       	push   0x1000ada7	10005623: R_386_32	.text
10005627:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000562a:	e8 fc ff ff ff       	call   1000562b <begin(void*)+0x57c>	1000562b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000562f:	83 c4 10             	add    esp,0x10
10005632:	83 ec 08             	sub    esp,0x8
10005635:	50                   	push   eax
10005636:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005639:	e8 fc ff ff ff       	call   1000563a <begin(void*)+0x58b>	1000563a: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000563e:	83 c4 10             	add    esp,0x10
10005641:	83 ec 04             	sub    esp,0x4
10005644:	68 de ad 00 10       	push   0x1000adde	10005645: R_386_32	.text
10005649:	50                   	push   eax
1000564a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000564d:	e8 fc ff ff ff       	call   1000564e <begin(void*)+0x59f>	1000564e: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005652:	83 c4 10             	add    esp,0x10
10005655:	83 ec 08             	sub    esp,0x8
10005658:	68 e9 ad 00 10       	push   0x1000ade9	10005659: R_386_32	.text
1000565d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005660:	e8 fc ff ff ff       	call   10005661 <begin(void*)+0x5b2>	10005661: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005665:	83 c4 10             	add    esp,0x10
10005668:	83 ec 08             	sub    esp,0x8
1000566b:	50                   	push   eax
1000566c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000566f:	e8 fc ff ff ff       	call   10005670 <begin(void*)+0x5c1>	10005670: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005674:	83 c4 10             	add    esp,0x10
10005677:	83 ec 04             	sub    esp,0x4
1000567a:	68 f5 ad 00 10       	push   0x1000adf5	1000567b: R_386_32	.text
1000567f:	50                   	push   eax
10005680:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005683:	e8 fc ff ff ff       	call   10005684 <begin(void*)+0x5d5>	10005684: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005688:	83 c4 10             	add    esp,0x10
1000568b:	83 ec 08             	sub    esp,0x8
1000568e:	68 fe ad 00 10       	push   0x1000adfe	1000568f: R_386_32	.text
10005693:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005696:	e8 fc ff ff ff       	call   10005697 <begin(void*)+0x5e8>	10005697: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000569b:	83 c4 10             	add    esp,0x10
1000569e:	83 ec 08             	sub    esp,0x8
100056a1:	50                   	push   eax
100056a2:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056a5:	e8 fc ff ff ff       	call   100056a6 <begin(void*)+0x5f7>	100056a6: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100056aa:	83 c4 10             	add    esp,0x10
100056ad:	83 ec 04             	sub    esp,0x4
100056b0:	68 0b ae 00 10       	push   0x1000ae0b	100056b1: R_386_32	.text
100056b5:	50                   	push   eax
100056b6:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056b9:	e8 fc ff ff ff       	call   100056ba <begin(void*)+0x60b>	100056ba: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100056be:	83 c4 10             	add    esp,0x10
100056c1:	83 ec 08             	sub    esp,0x8
100056c4:	68 fe ad 00 10       	push   0x1000adfe	100056c5: R_386_32	.text
100056c9:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056cc:	e8 fc ff ff ff       	call   100056cd <begin(void*)+0x61e>	100056cd: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100056d1:	83 c4 10             	add    esp,0x10
100056d4:	83 ec 08             	sub    esp,0x8
100056d7:	50                   	push   eax
100056d8:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056db:	e8 fc ff ff ff       	call   100056dc <begin(void*)+0x62d>	100056dc: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100056e0:	83 c4 10             	add    esp,0x10
100056e3:	83 ec 04             	sub    esp,0x4
100056e6:	68 10 ae 00 10       	push   0x1000ae10	100056e7: R_386_32	.text
100056eb:	50                   	push   eax
100056ec:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100056ef:	e8 fc ff ff ff       	call   100056f0 <begin(void*)+0x641>	100056f0: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100056f4:	83 c4 10             	add    esp,0x10
100056f7:	83 ec 08             	sub    esp,0x8
100056fa:	68 fe ad 00 10       	push   0x1000adfe	100056fb: R_386_32	.text
100056ff:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005702:	e8 fc ff ff ff       	call   10005703 <begin(void*)+0x654>	10005703: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005707:	83 c4 10             	add    esp,0x10
1000570a:	83 ec 08             	sub    esp,0x8
1000570d:	50                   	push   eax
1000570e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005711:	e8 fc ff ff ff       	call   10005712 <begin(void*)+0x663>	10005712: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005716:	83 c4 10             	add    esp,0x10
10005719:	83 ec 04             	sub    esp,0x4
1000571c:	68 18 ae 00 10       	push   0x1000ae18	1000571d: R_386_32	.text
10005721:	50                   	push   eax
10005722:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005725:	e8 fc ff ff ff       	call   10005726 <begin(void*)+0x677>	10005726: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000572a:	83 c4 10             	add    esp,0x10
1000572d:	83 ec 08             	sub    esp,0x8
10005730:	68 23 ae 00 10       	push   0x1000ae23	10005731: R_386_32	.text
10005735:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005738:	e8 fc ff ff ff       	call   10005739 <begin(void*)+0x68a>	10005739: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000573d:	83 c4 10             	add    esp,0x10
10005740:	83 ec 08             	sub    esp,0x8
10005743:	50                   	push   eax
10005744:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005747:	e8 fc ff ff ff       	call   10005748 <begin(void*)+0x699>	10005748: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000574c:	83 c4 10             	add    esp,0x10
1000574f:	83 ec 04             	sub    esp,0x4
10005752:	8d 95 4c ff ff ff    	lea    edx,[ebp-0xb4]
10005758:	52                   	push   edx
10005759:	50                   	push   eax
1000575a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000575d:	e8 fc ff ff ff       	call   1000575e <begin(void*)+0x6af>	1000575e: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005762:	83 c4 10             	add    esp,0x10
10005765:	83 ec 08             	sub    esp,0x8
10005768:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
1000576e:	50                   	push   eax
1000576f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005772:	e8 fc ff ff ff       	call   10005773 <begin(void*)+0x6c4>	10005773: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005777:	83 c4 10             	add    esp,0x10
1000577a:	83 ec 08             	sub    esp,0x8
1000577d:	50                   	push   eax
1000577e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005781:	e8 fc ff ff ff       	call   10005782 <begin(void*)+0x6d3>	10005782: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005786:	83 c4 10             	add    esp,0x10
10005789:	83 ec 04             	sub    esp,0x4
1000578c:	68 30 ae 00 10       	push   0x1000ae30	1000578d: R_386_32	.text
10005791:	50                   	push   eax
10005792:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005795:	e8 fc ff ff ff       	call   10005796 <begin(void*)+0x6e7>	10005796: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000579a:	83 c4 10             	add    esp,0x10
1000579d:	83 ec 08             	sub    esp,0x8
100057a0:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
100057a6:	50                   	push   eax
100057a7:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057aa:	e8 fc ff ff ff       	call   100057ab <begin(void*)+0x6fc>	100057ab: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100057af:	83 c4 10             	add    esp,0x10
100057b2:	83 ec 08             	sub    esp,0x8
100057b5:	50                   	push   eax
100057b6:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057b9:	e8 fc ff ff ff       	call   100057ba <begin(void*)+0x70b>	100057ba: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100057be:	83 c4 10             	add    esp,0x10
100057c1:	83 ec 04             	sub    esp,0x4
100057c4:	68 35 ae 00 10       	push   0x1000ae35	100057c5: R_386_32	.text
100057c9:	50                   	push   eax
100057ca:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057cd:	e8 fc ff ff ff       	call   100057ce <begin(void*)+0x71f>	100057ce: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100057d2:	83 c4 10             	add    esp,0x10
100057d5:	83 ec 08             	sub    esp,0x8
100057d8:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
100057de:	50                   	push   eax
100057df:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057e2:	e8 fc ff ff ff       	call   100057e3 <begin(void*)+0x734>	100057e3: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100057e7:	83 c4 10             	add    esp,0x10
100057ea:	83 ec 08             	sub    esp,0x8
100057ed:	50                   	push   eax
100057ee:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057f1:	e8 fc ff ff ff       	call   100057f2 <begin(void*)+0x743>	100057f2: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100057f6:	83 c4 10             	add    esp,0x10
100057f9:	83 ec 04             	sub    esp,0x4
100057fc:	68 3e ae 00 10       	push   0x1000ae3e	100057fd: R_386_32	.text
10005801:	50                   	push   eax
10005802:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005805:	e8 fc ff ff ff       	call   10005806 <begin(void*)+0x757>	10005806: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000580a:	83 c4 10             	add    esp,0x10
1000580d:	83 ec 08             	sub    esp,0x8
10005810:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005816:	50                   	push   eax
10005817:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000581a:	e8 fc ff ff ff       	call   1000581b <begin(void*)+0x76c>	1000581b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000581f:	83 c4 10             	add    esp,0x10
10005822:	83 ec 08             	sub    esp,0x8
10005825:	50                   	push   eax
10005826:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005829:	e8 fc ff ff ff       	call   1000582a <begin(void*)+0x77b>	1000582a: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000582e:	83 c4 10             	add    esp,0x10
10005831:	83 ec 04             	sub    esp,0x4
10005834:	68 4a ae 00 10       	push   0x1000ae4a	10005835: R_386_32	.text
10005839:	50                   	push   eax
1000583a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000583d:	e8 fc ff ff ff       	call   1000583e <begin(void*)+0x78f>	1000583e: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005842:	83 c4 10             	add    esp,0x10
10005845:	83 ec 08             	sub    esp,0x8
10005848:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
1000584e:	50                   	push   eax
1000584f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005852:	e8 fc ff ff ff       	call   10005853 <begin(void*)+0x7a4>	10005853: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005857:	83 c4 10             	add    esp,0x10
1000585a:	83 ec 08             	sub    esp,0x8
1000585d:	50                   	push   eax
1000585e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005861:	e8 fc ff ff ff       	call   10005862 <begin(void*)+0x7b3>	10005862: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005866:	83 c4 10             	add    esp,0x10
10005869:	83 ec 04             	sub    esp,0x4
1000586c:	68 52 ae 00 10       	push   0x1000ae52	1000586d: R_386_32	.text
10005871:	50                   	push   eax
10005872:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005875:	e8 fc ff ff ff       	call   10005876 <begin(void*)+0x7c7>	10005876: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000587a:	83 c4 10             	add    esp,0x10
1000587d:	83 ec 08             	sub    esp,0x8
10005880:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005886:	50                   	push   eax
10005887:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000588a:	e8 fc ff ff ff       	call   1000588b <begin(void*)+0x7dc>	1000588b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000588f:	83 c4 10             	add    esp,0x10
10005892:	83 ec 08             	sub    esp,0x8
10005895:	50                   	push   eax
10005896:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005899:	e8 fc ff ff ff       	call   1000589a <begin(void*)+0x7eb>	1000589a: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000589e:	83 c4 10             	add    esp,0x10
100058a1:	83 ec 04             	sub    esp,0x4
100058a4:	68 5c ae 00 10       	push   0x1000ae5c	100058a5: R_386_32	.text
100058a9:	50                   	push   eax
100058aa:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058ad:	e8 fc ff ff ff       	call   100058ae <begin(void*)+0x7ff>	100058ae: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100058b2:	83 c4 10             	add    esp,0x10
100058b5:	83 ec 08             	sub    esp,0x8
100058b8:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
100058be:	50                   	push   eax
100058bf:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058c2:	e8 fc ff ff ff       	call   100058c3 <begin(void*)+0x814>	100058c3: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100058c7:	83 c4 10             	add    esp,0x10
100058ca:	83 ec 08             	sub    esp,0x8
100058cd:	50                   	push   eax
100058ce:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058d1:	e8 fc ff ff ff       	call   100058d2 <begin(void*)+0x823>	100058d2: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100058d6:	83 c4 10             	add    esp,0x10
100058d9:	83 ec 04             	sub    esp,0x4
100058dc:	68 66 ae 00 10       	push   0x1000ae66	100058dd: R_386_32	.text
100058e1:	50                   	push   eax
100058e2:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058e5:	e8 fc ff ff ff       	call   100058e6 <begin(void*)+0x837>	100058e6: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100058ea:	83 c4 10             	add    esp,0x10
100058ed:	83 ec 08             	sub    esp,0x8
100058f0:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
100058f6:	50                   	push   eax
100058f7:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100058fa:	e8 fc ff ff ff       	call   100058fb <begin(void*)+0x84c>	100058fb: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100058ff:	83 c4 10             	add    esp,0x10
10005902:	83 ec 08             	sub    esp,0x8
10005905:	50                   	push   eax
10005906:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005909:	e8 fc ff ff ff       	call   1000590a <begin(void*)+0x85b>	1000590a: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000590e:	83 c4 10             	add    esp,0x10
10005911:	83 ec 04             	sub    esp,0x4
10005914:	68 6f ae 00 10       	push   0x1000ae6f	10005915: R_386_32	.text
10005919:	50                   	push   eax
1000591a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000591d:	e8 fc ff ff ff       	call   1000591e <begin(void*)+0x86f>	1000591e: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005922:	83 c4 10             	add    esp,0x10
10005925:	83 ec 08             	sub    esp,0x8
10005928:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
1000592e:	50                   	push   eax
1000592f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005932:	e8 fc ff ff ff       	call   10005933 <begin(void*)+0x884>	10005933: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005937:	83 c4 10             	add    esp,0x10
1000593a:	83 ec 08             	sub    esp,0x8
1000593d:	50                   	push   eax
1000593e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005941:	e8 fc ff ff ff       	call   10005942 <begin(void*)+0x893>	10005942: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005946:	83 c4 10             	add    esp,0x10
10005949:	83 ec 04             	sub    esp,0x4
1000594c:	68 76 ae 00 10       	push   0x1000ae76	1000594d: R_386_32	.text
10005951:	50                   	push   eax
10005952:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005955:	e8 fc ff ff ff       	call   10005956 <begin(void*)+0x8a7>	10005956: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000595a:	83 c4 10             	add    esp,0x10
1000595d:	83 ec 08             	sub    esp,0x8
10005960:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005966:	50                   	push   eax
10005967:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000596a:	e8 fc ff ff ff       	call   1000596b <begin(void*)+0x8bc>	1000596b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000596f:	83 c4 10             	add    esp,0x10
10005972:	83 ec 08             	sub    esp,0x8
10005975:	50                   	push   eax
10005976:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005979:	e8 fc ff ff ff       	call   1000597a <begin(void*)+0x8cb>	1000597a: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000597e:	83 c4 10             	add    esp,0x10
10005981:	83 ec 04             	sub    esp,0x4
10005984:	68 7c ae 00 10       	push   0x1000ae7c	10005985: R_386_32	.text
10005989:	50                   	push   eax
1000598a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000598d:	e8 fc ff ff ff       	call   1000598e <begin(void*)+0x8df>	1000598e: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005992:	83 c4 10             	add    esp,0x10
10005995:	a0 00 00 00 00       	mov    al,ds:0x0	10005996: R_386_32	createNewUserMode
1000599a:	83 f0 01             	xor    eax,0x1
1000599d:	84 c0                	test   al,al
1000599f:	0f 84 be 03 00 00    	je     10005d63 <begin(void*)+0xcb4>
100059a5:	a1 00 00 00 00       	mov    eax,ds:0x0	100059a6: R_386_32	modesel
100059aa:	89 c3                	mov    ebx,eax
100059ac:	89 c6                	mov    esi,eax
100059ae:	c1 fe 1f             	sar    esi,0x1f
100059b1:	83 ec 08             	sub    esp,0x8
100059b4:	68 87 ae 00 10       	push   0x1000ae87	100059b5: R_386_32	.text
100059b9:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100059bc:	e8 fc ff ff ff       	call   100059bd <begin(void*)+0x90e>	100059bd: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100059c1:	83 c4 10             	add    esp,0x10
100059c4:	83 ec 08             	sub    esp,0x8
100059c7:	50                   	push   eax
100059c8:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100059cb:	e8 fc ff ff ff       	call   100059cc <begin(void*)+0x91d>	100059cc: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100059d0:	83 c4 10             	add    esp,0x10
100059d3:	83 ec 08             	sub    esp,0x8
100059d6:	6a 6a                	push   0x6a
100059d8:	56                   	push   esi
100059d9:	53                   	push   ebx
100059da:	68 93 ae 00 10       	push   0x1000ae93	100059db: R_386_32	.text
100059df:	50                   	push   eax
100059e0:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100059e3:	e8 fc ff ff ff       	call   100059e4 <begin(void*)+0x935>	100059e4: R_386_PC32	CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)
100059e8:	83 c4 20             	add    esp,0x20
100059eb:	a1 00 00 00 00       	mov    eax,ds:0x0	100059ec: R_386_32	tzsel
100059f0:	89 c3                	mov    ebx,eax
100059f2:	89 c6                	mov    esi,eax
100059f4:	c1 fe 1f             	sar    esi,0x1f
100059f7:	83 ec 08             	sub    esp,0x8
100059fa:	68 e9 ad 00 10       	push   0x1000ade9	100059fb: R_386_32	.text
100059ff:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a02:	e8 fc ff ff ff       	call   10005a03 <begin(void*)+0x954>	10005a03: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005a07:	83 c4 10             	add    esp,0x10
10005a0a:	83 ec 08             	sub    esp,0x8
10005a0d:	50                   	push   eax
10005a0e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a11:	e8 fc ff ff ff       	call   10005a12 <begin(void*)+0x963>	10005a12: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005a16:	83 c4 10             	add    esp,0x10
10005a19:	83 ec 08             	sub    esp,0x8
10005a1c:	6a 6a                	push   0x6a
10005a1e:	56                   	push   esi
10005a1f:	53                   	push   ebx
10005a20:	68 9b ae 00 10       	push   0x1000ae9b	10005a21: R_386_32	.text
10005a25:	50                   	push   eax
10005a26:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a29:	e8 fc ff ff ff       	call   10005a2a <begin(void*)+0x97b>	10005a2a: R_386_PC32	CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)
10005a2e:	83 c4 20             	add    esp,0x20
10005a31:	a1 00 00 00 00       	mov    eax,ds:0x0	10005a32: R_386_32	tzsel
10005a36:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10005a39: R_386_32	timezoneStrings
10005a3d:	8d 58 01             	lea    ebx,[eax+0x1]
10005a40:	83 ec 08             	sub    esp,0x8
10005a43:	68 a6 ae 00 10       	push   0x1000aea6	10005a44: R_386_32	.text
10005a48:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a4b:	e8 fc ff ff ff       	call   10005a4c <begin(void*)+0x99d>	10005a4c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005a50:	83 c4 10             	add    esp,0x10
10005a53:	83 ec 04             	sub    esp,0x4
10005a56:	53                   	push   ebx
10005a57:	50                   	push   eax
10005a58:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a5b:	e8 fc ff ff ff       	call   10005a5c <begin(void*)+0x9ad>	10005a5c: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005a60:	83 c4 10             	add    esp,0x10
10005a63:	83 ec 08             	sub    esp,0x8
10005a66:	68 bb ae 00 10       	push   0x1000aebb	10005a67: R_386_32	.text
10005a6b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a6e:	e8 fc ff ff ff       	call   10005a6f <begin(void*)+0x9c0>	10005a6f: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005a73:	83 c4 10             	add    esp,0x10
10005a76:	83 ec 04             	sub    esp,0x4
10005a79:	68 00 00 00 00       	push   0x0	10005a7a: R_386_32	currName
10005a7e:	50                   	push   eax
10005a7f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a82:	e8 fc ff ff ff       	call   10005a83 <begin(void*)+0x9d4>	10005a83: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005a87:	83 c4 10             	add    esp,0x10
10005a8a:	83 ec 08             	sub    esp,0x8
10005a8d:	68 cd ae 00 10       	push   0x1000aecd	10005a8e: R_386_32	.text
10005a92:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005a95:	e8 fc ff ff ff       	call   10005a96 <begin(void*)+0x9e7>	10005a96: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005a9a:	83 c4 10             	add    esp,0x10
10005a9d:	83 ec 04             	sub    esp,0x4
10005aa0:	68 00 00 00 00       	push   0x0	10005aa1: R_386_32	currComp
10005aa5:	50                   	push   eax
10005aa6:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005aa9:	e8 fc ff ff ff       	call   10005aaa <begin(void*)+0x9fb>	10005aaa: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005aae:	83 c4 10             	add    esp,0x10
10005ab1:	83 ec 08             	sub    esp,0x8
10005ab4:	68 e2 ae 00 10       	push   0x1000aee2	10005ab5: R_386_32	.text
10005ab9:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005abc:	e8 fc ff ff ff       	call   10005abd <begin(void*)+0xa0e>	10005abd: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005ac1:	83 c4 10             	add    esp,0x10
10005ac4:	83 ec 04             	sub    esp,0x4
10005ac7:	68 00 00 00 00       	push   0x0	10005ac8: R_386_32	pkeybuf
10005acc:	50                   	push   eax
10005acd:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ad0:	e8 fc ff ff ff       	call   10005ad1 <begin(void*)+0xa22>	10005ad1: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005ad5:	83 c4 10             	add    esp,0x10
10005ad8:	83 ec 08             	sub    esp,0x8
10005adb:	68 fa ae 00 10       	push   0x1000aefa	10005adc: R_386_32	.text
10005ae0:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ae3:	e8 fc ff ff ff       	call   10005ae4 <begin(void*)+0xa35>	10005ae4: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005ae8:	83 c4 10             	add    esp,0x10
10005aeb:	83 ec 08             	sub    esp,0x8
10005aee:	50                   	push   eax
10005aef:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005af2:	e8 fc ff ff ff       	call   10005af3 <begin(void*)+0xa44>	10005af3: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005af7:	83 c4 10             	add    esp,0x10
10005afa:	83 ec 04             	sub    esp,0x4
10005afd:	68 10 af 00 10       	push   0x1000af10	10005afe: R_386_32	.text
10005b02:	50                   	push   eax
10005b03:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b06:	e8 fc ff ff ff       	call   10005b07 <begin(void*)+0xa58>	10005b07: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005b0b:	83 c4 10             	add    esp,0x10
10005b0e:	83 ec 08             	sub    esp,0x8
10005b11:	68 14 af 00 10       	push   0x1000af14	10005b12: R_386_32	.text
10005b16:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b19:	e8 fc ff ff ff       	call   10005b1a <begin(void*)+0xa6b>	10005b1a: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005b1e:	83 c4 10             	add    esp,0x10
10005b21:	83 ec 08             	sub    esp,0x8
10005b24:	50                   	push   eax
10005b25:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b28:	e8 fc ff ff ff       	call   10005b29 <begin(void*)+0xa7a>	10005b29: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005b2d:	83 c4 10             	add    esp,0x10
10005b30:	83 ec 04             	sub    esp,0x4
10005b33:	68 10 af 00 10       	push   0x1000af10	10005b34: R_386_32	.text
10005b38:	50                   	push   eax
10005b39:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b3c:	e8 fc ff ff ff       	call   10005b3d <begin(void*)+0xa8e>	10005b3d: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005b41:	83 c4 10             	add    esp,0x10
10005b44:	83 ec 08             	sub    esp,0x8
10005b47:	68 2b af 00 10       	push   0x1000af2b	10005b48: R_386_32	.text
10005b4c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b4f:	e8 fc ff ff ff       	call   10005b50 <begin(void*)+0xaa1>	10005b50: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005b54:	83 c4 10             	add    esp,0x10
10005b57:	83 ec 08             	sub    esp,0x8
10005b5a:	50                   	push   eax
10005b5b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b5e:	e8 fc ff ff ff       	call   10005b5f <begin(void*)+0xab0>	10005b5f: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005b63:	83 c4 10             	add    esp,0x10
10005b66:	83 ec 04             	sub    esp,0x4
10005b69:	68 10 af 00 10       	push   0x1000af10	10005b6a: R_386_32	.text
10005b6e:	50                   	push   eax
10005b6f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b72:	e8 fc ff ff ff       	call   10005b73 <begin(void*)+0xac4>	10005b73: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005b77:	83 c4 10             	add    esp,0x10
10005b7a:	83 ec 08             	sub    esp,0x8
10005b7d:	68 41 af 00 10       	push   0x1000af41	10005b7e: R_386_32	.text
10005b82:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b85:	e8 fc ff ff ff       	call   10005b86 <begin(void*)+0xad7>	10005b86: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005b8a:	83 c4 10             	add    esp,0x10
10005b8d:	83 ec 08             	sub    esp,0x8
10005b90:	50                   	push   eax
10005b91:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005b94:	e8 fc ff ff ff       	call   10005b95 <begin(void*)+0xae6>	10005b95: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005b99:	83 c4 10             	add    esp,0x10
10005b9c:	83 ec 04             	sub    esp,0x4
10005b9f:	68 10 af 00 10       	push   0x1000af10	10005ba0: R_386_32	.text
10005ba4:	50                   	push   eax
10005ba5:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ba8:	e8 fc ff ff ff       	call   10005ba9 <begin(void*)+0xafa>	10005ba9: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005bad:	83 c4 10             	add    esp,0x10
10005bb0:	83 ec 08             	sub    esp,0x8
10005bb3:	68 57 af 00 10       	push   0x1000af57	10005bb4: R_386_32	.text
10005bb8:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005bbb:	e8 fc ff ff ff       	call   10005bbc <begin(void*)+0xb0d>	10005bbc: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005bc0:	83 c4 10             	add    esp,0x10
10005bc3:	83 ec 08             	sub    esp,0x8
10005bc6:	50                   	push   eax
10005bc7:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005bca:	e8 fc ff ff ff       	call   10005bcb <begin(void*)+0xb1c>	10005bcb: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005bcf:	83 c4 10             	add    esp,0x10
10005bd2:	83 ec 04             	sub    esp,0x4
10005bd5:	68 10 af 00 10       	push   0x1000af10	10005bd6: R_386_32	.text
10005bda:	50                   	push   eax
10005bdb:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005bde:	e8 fc ff ff ff       	call   10005bdf <begin(void*)+0xb30>	10005bdf: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005be3:	83 c4 10             	add    esp,0x10
10005be6:	83 ec 08             	sub    esp,0x8
10005be9:	68 6e af 00 10       	push   0x1000af6e	10005bea: R_386_32	.text
10005bee:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005bf1:	e8 fc ff ff ff       	call   10005bf2 <begin(void*)+0xb43>	10005bf2: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005bf6:	83 c4 10             	add    esp,0x10
10005bf9:	83 ec 04             	sub    esp,0x4
10005bfc:	68 88 af 00 10       	push   0x1000af88	10005bfd: R_386_32	.text
10005c01:	50                   	push   eax
10005c02:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c05:	e8 fc ff ff ff       	call   10005c06 <begin(void*)+0xb57>	10005c06: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005c0a:	83 c4 10             	add    esp,0x10
10005c0d:	83 ec 08             	sub    esp,0x8
10005c10:	68 a8 af 00 10       	push   0x1000afa8	10005c11: R_386_32	.text
10005c15:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c18:	e8 fc ff ff ff       	call   10005c19 <begin(void*)+0xb6a>	10005c19: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005c1d:	83 c4 10             	add    esp,0x10
10005c20:	83 ec 04             	sub    esp,0x4
10005c23:	68 c3 af 00 10       	push   0x1000afc3	10005c24: R_386_32	.text
10005c28:	50                   	push   eax
10005c29:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c2c:	e8 fc ff ff ff       	call   10005c2d <begin(void*)+0xb7e>	10005c2d: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005c31:	83 c4 10             	add    esp,0x10
10005c34:	83 ec 08             	sub    esp,0x8
10005c37:	68 d1 af 00 10       	push   0x1000afd1	10005c38: R_386_32	.text
10005c3c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c3f:	e8 fc ff ff ff       	call   10005c40 <begin(void*)+0xb91>	10005c40: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005c44:	83 c4 10             	add    esp,0x10
10005c47:	83 ec 04             	sub    esp,0x4
10005c4a:	68 eb af 00 10       	push   0x1000afeb	10005c4b: R_386_32	.text
10005c4f:	50                   	push   eax
10005c50:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c53:	e8 fc ff ff ff       	call   10005c54 <begin(void*)+0xba5>	10005c54: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005c58:	83 c4 10             	add    esp,0x10
10005c5b:	83 ec 08             	sub    esp,0x8
10005c5e:	68 03 b0 00 10       	push   0x1000b003	10005c5f: R_386_32	.text
10005c63:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c66:	e8 fc ff ff ff       	call   10005c67 <begin(void*)+0xbb8>	10005c67: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005c6b:	83 c4 10             	add    esp,0x10
10005c6e:	83 ec 04             	sub    esp,0x4
10005c71:	68 eb af 00 10       	push   0x1000afeb	10005c72: R_386_32	.text
10005c76:	50                   	push   eax
10005c77:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c7a:	e8 fc ff ff ff       	call   10005c7b <begin(void*)+0xbcc>	10005c7b: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005c7f:	83 c4 10             	add    esp,0x10
10005c82:	83 ec 08             	sub    esp,0x8
10005c85:	68 1d b0 00 10       	push   0x1000b01d	10005c86: R_386_32	.text
10005c8a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005c8d:	e8 fc ff ff ff       	call   10005c8e <begin(void*)+0xbdf>	10005c8e: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005c92:	83 c4 10             	add    esp,0x10
10005c95:	83 ec 04             	sub    esp,0x4
10005c98:	68 eb af 00 10       	push   0x1000afeb	10005c99: R_386_32	.text
10005c9d:	50                   	push   eax
10005c9e:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005ca1:	e8 fc ff ff ff       	call   10005ca2 <begin(void*)+0xbf3>	10005ca2: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005ca6:	83 c4 10             	add    esp,0x10
10005ca9:	83 ec 08             	sub    esp,0x8
10005cac:	68 fa ae 00 10       	push   0x1000aefa	10005cad: R_386_32	.text
10005cb1:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005cb4:	e8 fc ff ff ff       	call   10005cb5 <begin(void*)+0xc06>	10005cb5: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005cb9:	83 c4 10             	add    esp,0x10
10005cbc:	83 ec 08             	sub    esp,0x8
10005cbf:	50                   	push   eax
10005cc0:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005cc3:	e8 fc ff ff ff       	call   10005cc4 <begin(void*)+0xc15>	10005cc4: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005cc8:	83 c4 10             	add    esp,0x10
10005ccb:	83 ec 04             	sub    esp,0x4
10005cce:	68 38 b0 00 10       	push   0x1000b038	10005ccf: R_386_32	.text
10005cd3:	50                   	push   eax
10005cd4:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005cd7:	e8 fc ff ff ff       	call   10005cd8 <begin(void*)+0xc29>	10005cd8: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005cdc:	83 c4 10             	add    esp,0x10
10005cdf:	83 ec 08             	sub    esp,0x8
10005ce2:	68 14 af 00 10       	push   0x1000af14	10005ce3: R_386_32	.text
10005ce7:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005cea:	e8 fc ff ff ff       	call   10005ceb <begin(void*)+0xc3c>	10005ceb: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005cef:	83 c4 10             	add    esp,0x10
10005cf2:	83 ec 08             	sub    esp,0x8
10005cf5:	50                   	push   eax
10005cf6:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005cf9:	e8 fc ff ff ff       	call   10005cfa <begin(void*)+0xc4b>	10005cfa: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005cfe:	83 c4 10             	add    esp,0x10
10005d01:	83 ec 04             	sub    esp,0x4
10005d04:	68 38 b0 00 10       	push   0x1000b038	10005d05: R_386_32	.text
10005d09:	50                   	push   eax
10005d0a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d0d:	e8 fc ff ff ff       	call   10005d0e <begin(void*)+0xc5f>	10005d0e: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005d12:	83 c4 10             	add    esp,0x10
10005d15:	83 ec 08             	sub    esp,0x8
10005d18:	68 3c b0 00 10       	push   0x1000b03c	10005d19: R_386_32	.text
10005d1d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d20:	e8 fc ff ff ff       	call   10005d21 <begin(void*)+0xc72>	10005d21: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005d25:	83 c4 10             	add    esp,0x10
10005d28:	83 ec 04             	sub    esp,0x4
10005d2b:	68 56 b0 00 10       	push   0x1000b056	10005d2c: R_386_32	.text
10005d30:	50                   	push   eax
10005d31:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d34:	e8 fc ff ff ff       	call   10005d35 <begin(void*)+0xc86>	10005d35: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005d39:	83 c4 10             	add    esp,0x10
10005d3c:	83 ec 08             	sub    esp,0x8
10005d3f:	68 74 b0 00 10       	push   0x1000b074	10005d40: R_386_32	.text
10005d44:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d47:	e8 fc ff ff ff       	call   10005d48 <begin(void*)+0xc99>	10005d48: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005d4c:	83 c4 10             	add    esp,0x10
10005d4f:	83 ec 04             	sub    esp,0x4
10005d52:	68 8f b0 00 10       	push   0x1000b08f	10005d53: R_386_32	.text
10005d57:	50                   	push   eax
10005d58:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005d5b:	e8 fc ff ff ff       	call   10005d5c <begin(void*)+0xcad>	10005d5c: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005d60:	83 c4 10             	add    esp,0x10
10005d63:	83 ec 08             	sub    esp,0x8
10005d66:	68 66 ad 00 10       	push   0x1000ad66	10005d67: R_386_32	.text
10005d6b:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005d71:	50                   	push   eax
10005d72:	e8 fc ff ff ff       	call   10005d73 <begin(void*)+0xcc4>	10005d73: R_386_PC32	strcpy
10005d77:	83 c4 10             	add    esp,0x10
10005d7a:	83 ec 08             	sub    esp,0x8
10005d7d:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10005d83:	50                   	push   eax
10005d84:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005d8a:	50                   	push   eax
10005d8b:	e8 fc ff ff ff       	call   10005d8c <begin(void*)+0xcdd>	10005d8c: R_386_PC32	strcat
10005d90:	83 c4 10             	add    esp,0x10
10005d93:	83 ec 08             	sub    esp,0x8
10005d96:	68 9f b0 00 10       	push   0x1000b09f	10005d97: R_386_32	.text
10005d9b:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005da1:	50                   	push   eax
10005da2:	e8 fc ff ff ff       	call   10005da3 <begin(void*)+0xcf4>	10005da3: R_386_PC32	strcat
10005da7:	83 c4 10             	add    esp,0x10
10005daa:	83 ec 08             	sub    esp,0x8
10005dad:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005db3:	50                   	push   eax
10005db4:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005db7:	e8 fc ff ff ff       	call   10005db8 <begin(void*)+0xd09>	10005db8: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005dbc:	83 c4 10             	add    esp,0x10
10005dbf:	83 ec 04             	sub    esp,0x4
10005dc2:	68 00 00 00 00       	push   0x0	10005dc3: R_386_32	passwhash
10005dc7:	50                   	push   eax
10005dc8:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005dcb:	e8 fc ff ff ff       	call   10005dcc <begin(void*)+0xd1d>	10005dcc: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005dd0:	83 c4 10             	add    esp,0x10
10005dd3:	83 ec 08             	sub    esp,0x8
10005dd6:	68 66 ad 00 10       	push   0x1000ad66	10005dd7: R_386_32	.text
10005ddb:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005de1:	50                   	push   eax
10005de2:	e8 fc ff ff ff       	call   10005de3 <begin(void*)+0xd34>	10005de3: R_386_PC32	strcpy
10005de7:	83 c4 10             	add    esp,0x10
10005dea:	83 ec 08             	sub    esp,0x8
10005ded:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10005df3:	50                   	push   eax
10005df4:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005dfa:	50                   	push   eax
10005dfb:	e8 fc ff ff ff       	call   10005dfc <begin(void*)+0xd4d>	10005dfc: R_386_PC32	strcat
10005e00:	83 c4 10             	add    esp,0x10
10005e03:	83 ec 08             	sub    esp,0x8
10005e06:	68 a9 b0 00 10       	push   0x1000b0a9	10005e07: R_386_32	.text
10005e0b:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005e11:	50                   	push   eax
10005e12:	e8 fc ff ff ff       	call   10005e13 <begin(void*)+0xd64>	10005e13: R_386_PC32	strcat
10005e17:	83 c4 10             	add    esp,0x10
10005e1a:	83 ec 08             	sub    esp,0x8
10005e1d:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005e23:	50                   	push   eax
10005e24:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005e27:	e8 fc ff ff ff       	call   10005e28 <begin(void*)+0xd79>	10005e28: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005e2c:	83 c4 10             	add    esp,0x10
10005e2f:	83 ec 04             	sub    esp,0x4
10005e32:	68 00 00 00 00       	push   0x0	10005e33: R_386_32	passwsalt
10005e37:	50                   	push   eax
10005e38:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005e3b:	e8 fc ff ff ff       	call   10005e3c <begin(void*)+0xd8d>	10005e3c: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005e40:	83 c4 10             	add    esp,0x10
10005e43:	83 ec 08             	sub    esp,0x8
10005e46:	68 66 ad 00 10       	push   0x1000ad66	10005e47: R_386_32	.text
10005e4b:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005e51:	50                   	push   eax
10005e52:	e8 fc ff ff ff       	call   10005e53 <begin(void*)+0xda4>	10005e53: R_386_PC32	strcpy
10005e57:	83 c4 10             	add    esp,0x10
10005e5a:	83 ec 08             	sub    esp,0x8
10005e5d:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10005e63:	50                   	push   eax
10005e64:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005e6a:	50                   	push   eax
10005e6b:	e8 fc ff ff ff       	call   10005e6c <begin(void*)+0xdbd>	10005e6c: R_386_PC32	strcat
10005e70:	83 c4 10             	add    esp,0x10
10005e73:	83 ec 08             	sub    esp,0x8
10005e76:	68 af b0 00 10       	push   0x1000b0af	10005e77: R_386_32	.text
10005e7b:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005e81:	50                   	push   eax
10005e82:	e8 fc ff ff ff       	call   10005e83 <begin(void*)+0xdd4>	10005e83: R_386_PC32	strcat
10005e87:	83 c4 10             	add    esp,0x10
10005e8a:	83 ec 08             	sub    esp,0x8
10005e8d:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005e93:	50                   	push   eax
10005e94:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005e97:	e8 fc ff ff ff       	call   10005e98 <begin(void*)+0xde9>	10005e98: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005e9c:	83 c4 10             	add    esp,0x10
10005e9f:	83 ec 04             	sub    esp,0x4
10005ea2:	68 00 00 00 00       	push   0x0	10005ea3: R_386_32	currName
10005ea7:	50                   	push   eax
10005ea8:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005eab:	e8 fc ff ff ff       	call   10005eac <begin(void*)+0xdfd>	10005eac: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005eb0:	83 c4 10             	add    esp,0x10
10005eb3:	83 ec 08             	sub    esp,0x8
10005eb6:	68 6a a5 00 10       	push   0x1000a56a	10005eb7: R_386_32	.text
10005ebb:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10005ec1:	50                   	push   eax
10005ec2:	e8 fc ff ff ff       	call   10005ec3 <begin(void*)+0xe14>	10005ec3: R_386_PC32	strcpy
10005ec7:	83 c4 10             	add    esp,0x10
10005eca:	83 ec 08             	sub    esp,0x8
10005ecd:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10005ed3:	50                   	push   eax
10005ed4:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10005eda:	50                   	push   eax
10005edb:	e8 fc ff ff ff       	call   10005edc <begin(void*)+0xe2d>	10005edc: R_386_PC32	strcat
10005ee0:	83 c4 10             	add    esp,0x10
10005ee3:	83 ec 08             	sub    esp,0x8
10005ee6:	68 74 a5 00 10       	push   0x1000a574	10005ee7: R_386_32	.text
10005eeb:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10005ef1:	50                   	push   eax
10005ef2:	e8 fc ff ff ff       	call   10005ef3 <begin(void*)+0xe44>	10005ef3: R_386_PC32	strcat
10005ef7:	83 c4 10             	add    esp,0x10
10005efa:	83 ec 08             	sub    esp,0x8
10005efd:	68 66 ad 00 10       	push   0x1000ad66	10005efe: R_386_32	.text
10005f02:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005f08:	50                   	push   eax
10005f09:	e8 fc ff ff ff       	call   10005f0a <begin(void*)+0xe5b>	10005f0a: R_386_PC32	strcpy
10005f0e:	83 c4 10             	add    esp,0x10
10005f11:	83 ec 08             	sub    esp,0x8
10005f14:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10005f1a:	50                   	push   eax
10005f1b:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005f21:	50                   	push   eax
10005f22:	e8 fc ff ff ff       	call   10005f23 <begin(void*)+0xe74>	10005f23: R_386_PC32	strcat
10005f27:	83 c4 10             	add    esp,0x10
10005f2a:	83 ec 08             	sub    esp,0x8
10005f2d:	68 bc b0 00 10       	push   0x1000b0bc	10005f2e: R_386_32	.text
10005f32:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005f38:	50                   	push   eax
10005f39:	e8 fc ff ff ff       	call   10005f3a <begin(void*)+0xe8b>	10005f3a: R_386_PC32	strcat
10005f3e:	83 c4 10             	add    esp,0x10
10005f41:	83 ec 08             	sub    esp,0x8
10005f44:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005f4a:	50                   	push   eax
10005f4b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005f4e:	e8 fc ff ff ff       	call   10005f4f <begin(void*)+0xea0>	10005f4f: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005f53:	83 c4 10             	add    esp,0x10
10005f56:	83 ec 04             	sub    esp,0x4
10005f59:	8d 95 ca fb ff ff    	lea    edx,[ebp-0x436]
10005f5f:	52                   	push   edx
10005f60:	50                   	push   eax
10005f61:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005f64:	e8 fc ff ff ff       	call   10005f65 <begin(void*)+0xeb6>	10005f65: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005f69:	83 c4 10             	add    esp,0x10
10005f6c:	83 ec 08             	sub    esp,0x8
10005f6f:	68 6a a5 00 10       	push   0x1000a56a	10005f70: R_386_32	.text
10005f74:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10005f7a:	50                   	push   eax
10005f7b:	e8 fc ff ff ff       	call   10005f7c <begin(void*)+0xecd>	10005f7c: R_386_PC32	strcpy
10005f80:	83 c4 10             	add    esp,0x10
10005f83:	83 ec 08             	sub    esp,0x8
10005f86:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10005f8c:	50                   	push   eax
10005f8d:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10005f93:	50                   	push   eax
10005f94:	e8 fc ff ff ff       	call   10005f95 <begin(void*)+0xee6>	10005f95: R_386_PC32	strcat
10005f99:	83 c4 10             	add    esp,0x10
10005f9c:	83 ec 08             	sub    esp,0x8
10005f9f:	68 7d a5 00 10       	push   0x1000a57d	10005fa0: R_386_32	.text
10005fa4:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10005faa:	50                   	push   eax
10005fab:	e8 fc ff ff ff       	call   10005fac <begin(void*)+0xefd>	10005fac: R_386_PC32	strcat
10005fb0:	83 c4 10             	add    esp,0x10
10005fb3:	83 ec 08             	sub    esp,0x8
10005fb6:	68 66 ad 00 10       	push   0x1000ad66	10005fb7: R_386_32	.text
10005fbb:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005fc1:	50                   	push   eax
10005fc2:	e8 fc ff ff ff       	call   10005fc3 <begin(void*)+0xf14>	10005fc3: R_386_PC32	strcpy
10005fc7:	83 c4 10             	add    esp,0x10
10005fca:	83 ec 08             	sub    esp,0x8
10005fcd:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10005fd3:	50                   	push   eax
10005fd4:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005fda:	50                   	push   eax
10005fdb:	e8 fc ff ff ff       	call   10005fdc <begin(void*)+0xf2d>	10005fdc: R_386_PC32	strcat
10005fe0:	83 c4 10             	add    esp,0x10
10005fe3:	83 ec 08             	sub    esp,0x8
10005fe6:	68 c5 b0 00 10       	push   0x1000b0c5	10005fe7: R_386_32	.text
10005feb:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10005ff1:	50                   	push   eax
10005ff2:	e8 fc ff ff ff       	call   10005ff3 <begin(void*)+0xf44>	10005ff3: R_386_PC32	strcat
10005ff7:	83 c4 10             	add    esp,0x10
10005ffa:	83 ec 08             	sub    esp,0x8
10005ffd:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10006003:	50                   	push   eax
10006004:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006007:	e8 fc ff ff ff       	call   10006008 <begin(void*)+0xf59>	10006008: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000600c:	83 c4 10             	add    esp,0x10
1000600f:	83 ec 04             	sub    esp,0x4
10006012:	8d 95 ca fb ff ff    	lea    edx,[ebp-0x436]
10006018:	52                   	push   edx
10006019:	50                   	push   eax
1000601a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000601d:	e8 fc ff ff ff       	call   1000601e <begin(void*)+0xf6f>	1000601e: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006022:	83 c4 10             	add    esp,0x10
10006025:	83 ec 08             	sub    esp,0x8
10006028:	68 6a a5 00 10       	push   0x1000a56a	10006029: R_386_32	.text
1000602d:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006033:	50                   	push   eax
10006034:	e8 fc ff ff ff       	call   10006035 <begin(void*)+0xf86>	10006035: R_386_PC32	strcpy
10006039:	83 c4 10             	add    esp,0x10
1000603c:	83 ec 08             	sub    esp,0x8
1000603f:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10006045:	50                   	push   eax
10006046:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000604c:	50                   	push   eax
1000604d:	e8 fc ff ff ff       	call   1000604e <begin(void*)+0xf9f>	1000604e: R_386_PC32	strcat
10006052:	83 c4 10             	add    esp,0x10
10006055:	83 ec 08             	sub    esp,0x8
10006058:	68 88 a5 00 10       	push   0x1000a588	10006059: R_386_32	.text
1000605d:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006063:	50                   	push   eax
10006064:	e8 fc ff ff ff       	call   10006065 <begin(void*)+0xfb6>	10006065: R_386_PC32	strcat
10006069:	83 c4 10             	add    esp,0x10
1000606c:	83 ec 08             	sub    esp,0x8
1000606f:	68 66 ad 00 10       	push   0x1000ad66	10006070: R_386_32	.text
10006074:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
1000607a:	50                   	push   eax
1000607b:	e8 fc ff ff ff       	call   1000607c <begin(void*)+0xfcd>	1000607c: R_386_PC32	strcpy
10006080:	83 c4 10             	add    esp,0x10
10006083:	83 ec 08             	sub    esp,0x8
10006086:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
1000608c:	50                   	push   eax
1000608d:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10006093:	50                   	push   eax
10006094:	e8 fc ff ff ff       	call   10006095 <begin(void*)+0xfe6>	10006095: R_386_PC32	strcat
10006099:	83 c4 10             	add    esp,0x10
1000609c:	83 ec 08             	sub    esp,0x8
1000609f:	68 d0 b0 00 10       	push   0x1000b0d0	100060a0: R_386_32	.text
100060a4:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
100060aa:	50                   	push   eax
100060ab:	e8 fc ff ff ff       	call   100060ac <begin(void*)+0xffd>	100060ac: R_386_PC32	strcat
100060b0:	83 c4 10             	add    esp,0x10
100060b3:	83 ec 08             	sub    esp,0x8
100060b6:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
100060bc:	50                   	push   eax
100060bd:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100060c0:	e8 fc ff ff ff       	call   100060c1 <begin(void*)+0x1012>	100060c1: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100060c5:	83 c4 10             	add    esp,0x10
100060c8:	83 ec 04             	sub    esp,0x4
100060cb:	8d 95 ca fb ff ff    	lea    edx,[ebp-0x436]
100060d1:	52                   	push   edx
100060d2:	50                   	push   eax
100060d3:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100060d6:	e8 fc ff ff ff       	call   100060d7 <begin(void*)+0x1028>	100060d7: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100060db:	83 c4 10             	add    esp,0x10
100060de:	83 ec 08             	sub    esp,0x8
100060e1:	68 6a a5 00 10       	push   0x1000a56a	100060e2: R_386_32	.text
100060e6:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100060ec:	50                   	push   eax
100060ed:	e8 fc ff ff ff       	call   100060ee <begin(void*)+0x103f>	100060ee: R_386_PC32	strcpy
100060f2:	83 c4 10             	add    esp,0x10
100060f5:	83 ec 08             	sub    esp,0x8
100060f8:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
100060fe:	50                   	push   eax
100060ff:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006105:	50                   	push   eax
10006106:	e8 fc ff ff ff       	call   10006107 <begin(void*)+0x1058>	10006107: R_386_PC32	strcat
1000610b:	83 c4 10             	add    esp,0x10
1000610e:	83 ec 08             	sub    esp,0x8
10006111:	68 93 a5 00 10       	push   0x1000a593	10006112: R_386_32	.text
10006116:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000611c:	50                   	push   eax
1000611d:	e8 fc ff ff ff       	call   1000611e <begin(void*)+0x106f>	1000611e: R_386_PC32	strcat
10006122:	83 c4 10             	add    esp,0x10
10006125:	83 ec 08             	sub    esp,0x8
10006128:	68 66 ad 00 10       	push   0x1000ad66	10006129: R_386_32	.text
1000612d:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10006133:	50                   	push   eax
10006134:	e8 fc ff ff ff       	call   10006135 <begin(void*)+0x1086>	10006135: R_386_PC32	strcpy
10006139:	83 c4 10             	add    esp,0x10
1000613c:	83 ec 08             	sub    esp,0x8
1000613f:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10006145:	50                   	push   eax
10006146:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
1000614c:	50                   	push   eax
1000614d:	e8 fc ff ff ff       	call   1000614e <begin(void*)+0x109f>	1000614e: R_386_PC32	strcat
10006152:	83 c4 10             	add    esp,0x10
10006155:	83 ec 08             	sub    esp,0x8
10006158:	68 db b0 00 10       	push   0x1000b0db	10006159: R_386_32	.text
1000615d:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10006163:	50                   	push   eax
10006164:	e8 fc ff ff ff       	call   10006165 <begin(void*)+0x10b6>	10006165: R_386_PC32	strcat
10006169:	83 c4 10             	add    esp,0x10
1000616c:	83 ec 08             	sub    esp,0x8
1000616f:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10006175:	50                   	push   eax
10006176:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006179:	e8 fc ff ff ff       	call   1000617a <begin(void*)+0x10cb>	1000617a: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000617e:	83 c4 10             	add    esp,0x10
10006181:	83 ec 04             	sub    esp,0x4
10006184:	8d 95 ca fb ff ff    	lea    edx,[ebp-0x436]
1000618a:	52                   	push   edx
1000618b:	50                   	push   eax
1000618c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000618f:	e8 fc ff ff ff       	call   10006190 <begin(void*)+0x10e1>	10006190: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006194:	83 c4 10             	add    esp,0x10
10006197:	83 ec 08             	sub    esp,0x8
1000619a:	68 6a a5 00 10       	push   0x1000a56a	1000619b: R_386_32	.text
1000619f:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100061a5:	50                   	push   eax
100061a6:	e8 fc ff ff ff       	call   100061a7 <begin(void*)+0x10f8>	100061a7: R_386_PC32	strcpy
100061ab:	83 c4 10             	add    esp,0x10
100061ae:	83 ec 08             	sub    esp,0x8
100061b1:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
100061b7:	50                   	push   eax
100061b8:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100061be:	50                   	push   eax
100061bf:	e8 fc ff ff ff       	call   100061c0 <begin(void*)+0x1111>	100061c0: R_386_PC32	strcat
100061c4:	83 c4 10             	add    esp,0x10
100061c7:	83 ec 08             	sub    esp,0x8
100061ca:	68 af a5 00 10       	push   0x1000a5af	100061cb: R_386_32	.text
100061cf:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100061d5:	50                   	push   eax
100061d6:	e8 fc ff ff ff       	call   100061d7 <begin(void*)+0x1128>	100061d7: R_386_PC32	strcat
100061db:	83 c4 10             	add    esp,0x10
100061de:	83 ec 08             	sub    esp,0x8
100061e1:	68 66 ad 00 10       	push   0x1000ad66	100061e2: R_386_32	.text
100061e6:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
100061ec:	50                   	push   eax
100061ed:	e8 fc ff ff ff       	call   100061ee <begin(void*)+0x113f>	100061ee: R_386_PC32	strcpy
100061f2:	83 c4 10             	add    esp,0x10
100061f5:	83 ec 08             	sub    esp,0x8
100061f8:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
100061fe:	50                   	push   eax
100061ff:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10006205:	50                   	push   eax
10006206:	e8 fc ff ff ff       	call   10006207 <begin(void*)+0x1158>	10006207: R_386_PC32	strcat
1000620b:	83 c4 10             	add    esp,0x10
1000620e:	83 ec 08             	sub    esp,0x8
10006211:	68 e5 b0 00 10       	push   0x1000b0e5	10006212: R_386_32	.text
10006216:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
1000621c:	50                   	push   eax
1000621d:	e8 fc ff ff ff       	call   1000621e <begin(void*)+0x116f>	1000621e: R_386_PC32	strcat
10006222:	83 c4 10             	add    esp,0x10
10006225:	83 ec 08             	sub    esp,0x8
10006228:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
1000622e:	50                   	push   eax
1000622f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006232:	e8 fc ff ff ff       	call   10006233 <begin(void*)+0x1184>	10006233: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006237:	83 c4 10             	add    esp,0x10
1000623a:	83 ec 04             	sub    esp,0x4
1000623d:	8d 95 ca fb ff ff    	lea    edx,[ebp-0x436]
10006243:	52                   	push   edx
10006244:	50                   	push   eax
10006245:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006248:	e8 fc ff ff ff       	call   10006249 <begin(void*)+0x119a>	10006249: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
1000624d:	83 c4 10             	add    esp,0x10
10006250:	83 ec 08             	sub    esp,0x8
10006253:	68 6a a5 00 10       	push   0x1000a56a	10006254: R_386_32	.text
10006258:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000625e:	50                   	push   eax
1000625f:	e8 fc ff ff ff       	call   10006260 <begin(void*)+0x11b1>	10006260: R_386_PC32	strcpy
10006264:	83 c4 10             	add    esp,0x10
10006267:	83 ec 08             	sub    esp,0x8
1000626a:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10006270:	50                   	push   eax
10006271:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006277:	50                   	push   eax
10006278:	e8 fc ff ff ff       	call   10006279 <begin(void*)+0x11ca>	10006279: R_386_PC32	strcat
1000627d:	83 c4 10             	add    esp,0x10
10006280:	83 ec 08             	sub    esp,0x8
10006283:	68 a8 a5 00 10       	push   0x1000a5a8	10006284: R_386_32	.text
10006288:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000628e:	50                   	push   eax
1000628f:	e8 fc ff ff ff       	call   10006290 <begin(void*)+0x11e1>	10006290: R_386_PC32	strcat
10006294:	83 c4 10             	add    esp,0x10
10006297:	83 ec 08             	sub    esp,0x8
1000629a:	68 66 ad 00 10       	push   0x1000ad66	1000629b: R_386_32	.text
1000629f:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
100062a5:	50                   	push   eax
100062a6:	e8 fc ff ff ff       	call   100062a7 <begin(void*)+0x11f8>	100062a7: R_386_PC32	strcpy
100062ab:	83 c4 10             	add    esp,0x10
100062ae:	83 ec 08             	sub    esp,0x8
100062b1:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
100062b7:	50                   	push   eax
100062b8:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
100062be:	50                   	push   eax
100062bf:	e8 fc ff ff ff       	call   100062c0 <begin(void*)+0x1211>	100062c0: R_386_PC32	strcat
100062c4:	83 c4 10             	add    esp,0x10
100062c7:	83 ec 08             	sub    esp,0x8
100062ca:	68 ed b0 00 10       	push   0x1000b0ed	100062cb: R_386_32	.text
100062cf:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
100062d5:	50                   	push   eax
100062d6:	e8 fc ff ff ff       	call   100062d7 <begin(void*)+0x1228>	100062d7: R_386_PC32	strcat
100062db:	83 c4 10             	add    esp,0x10
100062de:	83 ec 08             	sub    esp,0x8
100062e1:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
100062e7:	50                   	push   eax
100062e8:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100062eb:	e8 fc ff ff ff       	call   100062ec <begin(void*)+0x123d>	100062ec: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100062f0:	83 c4 10             	add    esp,0x10
100062f3:	83 ec 04             	sub    esp,0x4
100062f6:	8d 95 ca fb ff ff    	lea    edx,[ebp-0x436]
100062fc:	52                   	push   edx
100062fd:	50                   	push   eax
100062fe:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006301:	e8 fc ff ff ff       	call   10006302 <begin(void*)+0x1253>	10006302: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006306:	83 c4 10             	add    esp,0x10
10006309:	83 ec 08             	sub    esp,0x8
1000630c:	68 6a a5 00 10       	push   0x1000a56a	1000630d: R_386_32	.text
10006311:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006317:	50                   	push   eax
10006318:	e8 fc ff ff ff       	call   10006319 <begin(void*)+0x126a>	10006319: R_386_PC32	strcpy
1000631d:	83 c4 10             	add    esp,0x10
10006320:	83 ec 08             	sub    esp,0x8
10006323:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10006329:	50                   	push   eax
1000632a:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006330:	50                   	push   eax
10006331:	e8 fc ff ff ff       	call   10006332 <begin(void*)+0x1283>	10006332: R_386_PC32	strcat
10006336:	83 c4 10             	add    esp,0x10
10006339:	83 ec 08             	sub    esp,0x8
1000633c:	68 9d a5 00 10       	push   0x1000a59d	1000633d: R_386_32	.text
10006341:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006347:	50                   	push   eax
10006348:	e8 fc ff ff ff       	call   10006349 <begin(void*)+0x129a>	10006349: R_386_PC32	strcat
1000634d:	83 c4 10             	add    esp,0x10
10006350:	83 ec 08             	sub    esp,0x8
10006353:	68 66 ad 00 10       	push   0x1000ad66	10006354: R_386_32	.text
10006358:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
1000635e:	50                   	push   eax
1000635f:	e8 fc ff ff ff       	call   10006360 <begin(void*)+0x12b1>	10006360: R_386_PC32	strcpy
10006364:	83 c4 10             	add    esp,0x10
10006367:	83 ec 08             	sub    esp,0x8
1000636a:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10006370:	50                   	push   eax
10006371:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
10006377:	50                   	push   eax
10006378:	e8 fc ff ff ff       	call   10006379 <begin(void*)+0x12ca>	10006379: R_386_PC32	strcat
1000637d:	83 c4 10             	add    esp,0x10
10006380:	83 ec 08             	sub    esp,0x8
10006383:	68 f4 b0 00 10       	push   0x1000b0f4	10006384: R_386_32	.text
10006388:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
1000638e:	50                   	push   eax
1000638f:	e8 fc ff ff ff       	call   10006390 <begin(void*)+0x12e1>	10006390: R_386_PC32	strcat
10006394:	83 c4 10             	add    esp,0x10
10006397:	83 ec 08             	sub    esp,0x8
1000639a:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
100063a0:	50                   	push   eax
100063a1:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100063a4:	e8 fc ff ff ff       	call   100063a5 <begin(void*)+0x12f6>	100063a5: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100063a9:	83 c4 10             	add    esp,0x10
100063ac:	83 ec 04             	sub    esp,0x4
100063af:	8d 95 ca fb ff ff    	lea    edx,[ebp-0x436]
100063b5:	52                   	push   edx
100063b6:	50                   	push   eax
100063b7:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100063ba:	e8 fc ff ff ff       	call   100063bb <begin(void*)+0x130c>	100063bb: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100063bf:	83 c4 10             	add    esp,0x10
100063c2:	83 ec 0c             	sub    esp,0xc
100063c5:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100063c8:	e8 fc ff ff ff       	call   100063c9 <begin(void*)+0x131a>	100063c9: R_386_PC32	CmClose(Reghive_Tag*)
100063cd:	83 c4 10             	add    esp,0x10
100063d0:	a0 00 00 00 00       	mov    al,ds:0x0	100063d1: R_386_32	createNewUserMode
100063d5:	84 c0                	test   al,al
100063d7:	0f 85 4a 08 00 00    	jne    10006c27 <begin(void*)+0x1b78>
100063dd:	a1 00 00 00 00       	mov    eax,ds:0x0	100063de: R_386_32	Krnl::computer
100063e2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
100063e8:	a1 00 00 00 00       	mov    eax,ds:0x0	100063e9: R_386_32	Krnl::computer
100063ed:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100063f3:	8b 00                	mov    eax,DWORD PTR [eax]
100063f5:	83 c0 24             	add    eax,0x24
100063f8:	8b 00                	mov    eax,DWORD PTR [eax]
100063fa:	83 ec 0c             	sub    esp,0xc
100063fd:	52                   	push   edx
100063fe:	ff d0                	call   eax
10006400:	83 c4 10             	add    esp,0x10
10006403:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10006406:	a1 00 00 00 00       	mov    eax,ds:0x0	10006407: R_386_32	tzsel
1000640b:	83 ec 0c             	sub    esp,0xc
1000640e:	50                   	push   eax
1000640f:	e8 fc ff ff ff       	call   10006410 <begin(void*)+0x1361>	10006410: R_386_PC32	KeSetTimezone(int)
10006414:	83 c4 10             	add    esp,0x10
10006417:	a1 00 00 00 00       	mov    eax,ds:0x0	10006418: R_386_32	Krnl::computer
1000641c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
10006422:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10006425:	ba 00 00 00 00       	mov    edx,0x0
1000642a:	83 ec 04             	sub    esp,0x4
1000642d:	52                   	push   edx
1000642e:	50                   	push   eax
1000642f:	51                   	push   ecx
10006430:	e8 fc ff ff ff       	call   10006431 <begin(void*)+0x1382>	10006431: R_386_PC32	Clock::setTimeInSecondsLocal(unsigned long long)
10006435:	83 c4 10             	add    esp,0x10
10006438:	83 ec 0c             	sub    esp,0xc
1000643b:	68 00 b1 00 10       	push   0x1000b100	1000643c: R_386_32	.text
10006440:	e8 fc ff ff ff       	call   10006441 <begin(void*)+0x1392>	10006441: R_386_PC32	Dbg::kprintf(char const*, ...)
10006445:	83 c4 10             	add    esp,0x10
10006448:	a1 00 00 00 00       	mov    eax,ds:0x0	10006449: R_386_32	term
1000644d:	83 ec 0c             	sub    esp,0xc
10006450:	50                   	push   eax
10006451:	e8 fc ff ff ff       	call   10006452 <begin(void*)+0x13a3>	10006452: R_386_PC32	setActiveTerminal(VgaText*)
10006456:	83 c4 10             	add    esp,0x10
10006459:	e8 fc ff ff ff       	call   1000645a <begin(void*)+0x13ab>	1000645a: R_386_PC32	drawBootScreen()
1000645e:	83 ec 0c             	sub    esp,0xc
10006461:	68 99 ab 00 10       	push   0x1000ab99	10006462: R_386_32	.text
10006466:	6a 0d                	push   0xd
10006468:	6a 32                	push   0x32
1000646a:	6a 05                	push   0x5
1000646c:	6a 16                	push   0x16
1000646e:	e8 fc ff ff ff       	call   1000646f <begin(void*)+0x13c0>	1000646f: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10006473:	83 c4 20             	add    esp,0x20
10006476:	a1 00 00 00 00       	mov    eax,ds:0x0	10006477: R_386_32	term
1000647b:	83 ec 04             	sub    esp,0x4
1000647e:	6a 08                	push   0x8
10006480:	6a 18                	push   0x18
10006482:	50                   	push   eax
10006483:	e8 fc ff ff ff       	call   10006484 <begin(void*)+0x13d5>	10006484: R_386_PC32	VgaText::setCursor(int, int)
10006488:	83 c4 10             	add    esp,0x10
1000648b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000648c: R_386_32	term
10006490:	83 ec 08             	sub    esp,0x8
10006493:	68 28 b1 00 10       	push   0x1000b128	10006494: R_386_32	.text
10006498:	50                   	push   eax
10006499:	e8 fc ff ff ff       	call   1000649a <begin(void*)+0x13eb>	1000649a: R_386_PC32	VgaText::puts(char const*)
1000649e:	83 c4 10             	add    esp,0x10
100064a1:	a1 00 00 00 00       	mov    eax,ds:0x0	100064a2: R_386_32	term
100064a6:	83 ec 04             	sub    esp,0x4
100064a9:	6a 0a                	push   0xa
100064ab:	6a 18                	push   0x18
100064ad:	50                   	push   eax
100064ae:	e8 fc ff ff ff       	call   100064af <begin(void*)+0x1400>	100064af: R_386_PC32	VgaText::setCursor(int, int)
100064b3:	83 c4 10             	add    esp,0x10
100064b6:	a1 00 00 00 00       	mov    eax,ds:0x0	100064b7: R_386_32	term
100064bb:	83 ec 08             	sub    esp,0x8
100064be:	68 50 b1 00 10       	push   0x1000b150	100064bf: R_386_32	.text
100064c3:	50                   	push   eax
100064c4:	e8 fc ff ff ff       	call   100064c5 <begin(void*)+0x1416>	100064c5: R_386_PC32	VgaText::puts(char const*)
100064c9:	83 c4 10             	add    esp,0x10
100064cc:	a1 00 00 00 00       	mov    eax,ds:0x0	100064cd: R_386_32	term
100064d1:	83 ec 04             	sub    esp,0x4
100064d4:	6a 0b                	push   0xb
100064d6:	6a 18                	push   0x18
100064d8:	50                   	push   eax
100064d9:	e8 fc ff ff ff       	call   100064da <begin(void*)+0x142b>	100064da: R_386_PC32	VgaText::setCursor(int, int)
100064de:	83 c4 10             	add    esp,0x10
100064e1:	a1 00 00 00 00       	mov    eax,ds:0x0	100064e2: R_386_32	term
100064e6:	83 ec 08             	sub    esp,0x8
100064e9:	68 7c b1 00 10       	push   0x1000b17c	100064ea: R_386_32	.text
100064ee:	50                   	push   eax
100064ef:	e8 fc ff ff ff       	call   100064f0 <begin(void*)+0x1441>	100064f0: R_386_PC32	VgaText::puts(char const*)
100064f4:	83 c4 10             	add    esp,0x10
100064f7:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100064f9: R_386_32	installKey
100064fe:	a0 00 00 00 00       	mov    al,ds:0x0	100064ff: R_386_32	installKey
10006503:	84 c0                	test   al,al
10006505:	0f 94 c0             	sete   al
10006508:	84 c0                	test   al,al
1000650a:	74 02                	je     1000650e <begin(void*)+0x145f>
1000650c:	eb f0                	jmp    100064fe <begin(void*)+0x144f>
1000650e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006510: R_386_32	installKey
10006515:	a1 00 00 00 00       	mov    eax,ds:0x0	10006516: R_386_32	term
1000651a:	83 ec 04             	sub    esp,0x4
1000651d:	6a 0c                	push   0xc
1000651f:	6a 18                	push   0x18
10006521:	50                   	push   eax
10006522:	e8 fc ff ff ff       	call   10006523 <begin(void*)+0x1474>	10006523: R_386_PC32	VgaText::setCursor(int, int)
10006527:	83 c4 10             	add    esp,0x10
1000652a:	e8 fc ff ff ff       	call   1000652b <begin(void*)+0x147c>	1000652b: R_386_PC32	KeRestart()
1000652f:	e9 02 0e 00 00       	jmp    10007336 <begin(void*)+0x2287>
10006534:	e8 fc ff ff ff       	call   10006535 <begin(void*)+0x1486>	10006535: R_386_PC32	KeLoadTimezone()
10006539:	e8 fc ff ff ff       	call   1000653a <begin(void*)+0x148b>	1000653a: R_386_PC32	KeInitialiseLocale()
1000653e:	83 ec 0c             	sub    esp,0xc
10006541:	68 28 ad 00 10       	push   0x1000ad28	10006542: R_386_32	.text
10006546:	e8 fc ff ff ff       	call   10006547 <begin(void*)+0x1498>	10006547: R_386_PC32	CmOpen(char const*)
1000654b:	83 c4 10             	add    esp,0x10
1000654e:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10006551:	83 ec 08             	sub    esp,0x8
10006554:	68 e2 ae 00 10       	push   0x1000aee2	10006555: R_386_32	.text
10006559:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000655c:	e8 fc ff ff ff       	call   1000655d <begin(void*)+0x14ae>	1000655d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006561:	83 c4 10             	add    esp,0x10
10006564:	83 ec 04             	sub    esp,0x4
10006567:	8d 95 d8 fc ff ff    	lea    edx,[ebp-0x328]
1000656d:	52                   	push   edx
1000656e:	50                   	push   eax
1000656f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006572:	e8 fc ff ff ff       	call   10006573 <begin(void*)+0x14c4>	10006573: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10006577:	83 c4 10             	add    esp,0x10
1000657a:	83 ec 08             	sub    esp,0x8
1000657d:	68 8e b1 00 10       	push   0x1000b18e	1000657e: R_386_32	.text
10006582:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006585:	e8 fc ff ff ff       	call   10006586 <begin(void*)+0x14d7>	10006586: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000658a:	83 c4 10             	add    esp,0x10
1000658d:	83 ec 04             	sub    esp,0x4
10006590:	8d 95 d0 fc ff ff    	lea    edx,[ebp-0x330]
10006596:	52                   	push   edx
10006597:	50                   	push   eax
10006598:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000659b:	e8 fc ff ff ff       	call   1000659c <begin(void*)+0x14ed>	1000659c: R_386_PC32	CmGetInteger(Reghive_Tag*, int, unsigned long long*)
100065a0:	83 c4 10             	add    esp,0x10
100065a3:	83 ec 0c             	sub    esp,0xc
100065a6:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100065a9:	e8 fc ff ff ff       	call   100065aa <begin(void*)+0x14fb>	100065aa: R_386_PC32	CmClose(Reghive_Tag*)
100065ae:	83 c4 10             	add    esp,0x10
100065b1:	83 ec 0c             	sub    esp,0xc
100065b4:	8d 85 d8 fc ff ff    	lea    eax,[ebp-0x328]
100065ba:	50                   	push   eax
100065bb:	e8 fc ff ff ff       	call   100065bc <begin(void*)+0x150d>	100065bc: R_386_PC32	checkExtendedKey(char*)
100065c0:	83 c4 10             	add    esp,0x10
100065c3:	85 c0                	test   eax,eax
100065c5:	0f 94 c0             	sete   al
100065c8:	84 c0                	test   al,al
100065ca:	0f 84 bd 01 00 00    	je     1000678d <begin(void*)+0x16de>
100065d0:	83 ec 0c             	sub    esp,0xc
100065d3:	6a 01                	push   0x1
100065d5:	e8 fc ff ff ff       	call   100065d6 <begin(void*)+0x1527>	100065d6: R_386_PC32	firstRun(bool)
100065da:	83 c4 10             	add    esp,0x10
100065dd:	83 ec 0c             	sub    esp,0xc
100065e0:	68 28 ad 00 10       	push   0x1000ad28	100065e1: R_386_32	.text
100065e5:	e8 fc ff ff ff       	call   100065e6 <begin(void*)+0x1537>	100065e6: R_386_PC32	CmOpen(char const*)
100065ea:	83 c4 10             	add    esp,0x10
100065ed:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
100065f0:	83 ec 04             	sub    esp,0x4
100065f3:	68 4d ad 00 10       	push   0x1000ad4d	100065f4: R_386_32	.text
100065f8:	6a 00                	push   0x0
100065fa:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100065fd:	e8 fc ff ff ff       	call   100065fe <begin(void*)+0x154f>	100065fe: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10006602:	83 c4 10             	add    esp,0x10
10006605:	83 ec 08             	sub    esp,0x8
10006608:	68 4d ad 00 10       	push   0x1000ad4d	10006609: R_386_32	.text
1000660d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006610:	e8 fc ff ff ff       	call   10006611 <begin(void*)+0x1562>	10006611: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006615:	83 c4 10             	add    esp,0x10
10006618:	83 ec 08             	sub    esp,0x8
1000661b:	50                   	push   eax
1000661c:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000661f:	e8 fc ff ff ff       	call   10006620 <begin(void*)+0x1571>	10006620: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006624:	83 c4 10             	add    esp,0x10
10006627:	83 ec 04             	sub    esp,0x4
1000662a:	68 87 ad 00 10       	push   0x1000ad87	1000662b: R_386_32	.text
1000662f:	50                   	push   eax
10006630:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006633:	e8 fc ff ff ff       	call   10006634 <begin(void*)+0x1585>	10006634: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10006638:	83 c4 10             	add    esp,0x10
1000663b:	83 ec 08             	sub    esp,0x8
1000663e:	68 fe ad 00 10       	push   0x1000adfe	1000663f: R_386_32	.text
10006643:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006646:	e8 fc ff ff ff       	call   10006647 <begin(void*)+0x1598>	10006647: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000664b:	83 c4 10             	add    esp,0x10
1000664e:	83 ec 08             	sub    esp,0x8
10006651:	50                   	push   eax
10006652:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006655:	e8 fc ff ff ff       	call   10006656 <begin(void*)+0x15a7>	10006656: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000665a:	83 c4 10             	add    esp,0x10
1000665d:	83 ec 04             	sub    esp,0x4
10006660:	68 18 ae 00 10       	push   0x1000ae18	10006661: R_386_32	.text
10006665:	50                   	push   eax
10006666:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006669:	e8 fc ff ff ff       	call   1000666a <begin(void*)+0x15bb>	1000666a: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000666e:	83 c4 10             	add    esp,0x10
10006671:	83 ec 08             	sub    esp,0x8
10006674:	68 e2 ae 00 10       	push   0x1000aee2	10006675: R_386_32	.text
10006679:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000667c:	e8 fc ff ff ff       	call   1000667d <begin(void*)+0x15ce>	1000667d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006681:	83 c4 10             	add    esp,0x10
10006684:	83 ec 04             	sub    esp,0x4
10006687:	68 00 00 00 00       	push   0x0	10006688: R_386_32	pkeybuf
1000668c:	50                   	push   eax
1000668d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006690:	e8 fc ff ff ff       	call   10006691 <begin(void*)+0x15e2>	10006691: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10006695:	83 c4 10             	add    esp,0x10
10006698:	83 ec 0c             	sub    esp,0xc
1000669b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000669e:	e8 fc ff ff ff       	call   1000669f <begin(void*)+0x15f0>	1000669f: R_386_PC32	CmClose(Reghive_Tag*)
100066a3:	83 c4 10             	add    esp,0x10
100066a6:	a1 00 00 00 00       	mov    eax,ds:0x0	100066a7: R_386_32	term
100066ab:	83 ec 0c             	sub    esp,0xc
100066ae:	50                   	push   eax
100066af:	e8 fc ff ff ff       	call   100066b0 <begin(void*)+0x1601>	100066b0: R_386_PC32	setActiveTerminal(VgaText*)
100066b4:	83 c4 10             	add    esp,0x10
100066b7:	e8 fc ff ff ff       	call   100066b8 <begin(void*)+0x1609>	100066b8: R_386_PC32	drawBootScreen()
100066bc:	83 ec 0c             	sub    esp,0xc
100066bf:	68 a2 b1 00 10       	push   0x1000b1a2	100066c0: R_386_32	.text
100066c4:	6a 0d                	push   0xd
100066c6:	6a 32                	push   0x32
100066c8:	6a 05                	push   0x5
100066ca:	6a 16                	push   0x16
100066cc:	e8 fc ff ff ff       	call   100066cd <begin(void*)+0x161e>	100066cd: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100066d1:	83 c4 20             	add    esp,0x20
100066d4:	a1 00 00 00 00       	mov    eax,ds:0x0	100066d5: R_386_32	term
100066d9:	83 ec 04             	sub    esp,0x4
100066dc:	6a 08                	push   0x8
100066de:	6a 18                	push   0x18
100066e0:	50                   	push   eax
100066e1:	e8 fc ff ff ff       	call   100066e2 <begin(void*)+0x1633>	100066e2: R_386_PC32	VgaText::setCursor(int, int)
100066e6:	83 c4 10             	add    esp,0x10
100066e9:	a1 00 00 00 00       	mov    eax,ds:0x0	100066ea: R_386_32	term
100066ee:	83 ec 08             	sub    esp,0x8
100066f1:	68 b8 b1 00 10       	push   0x1000b1b8	100066f2: R_386_32	.text
100066f6:	50                   	push   eax
100066f7:	e8 fc ff ff ff       	call   100066f8 <begin(void*)+0x1649>	100066f8: R_386_PC32	VgaText::puts(char const*)
100066fc:	83 c4 10             	add    esp,0x10
100066ff:	a1 00 00 00 00       	mov    eax,ds:0x0	10006700: R_386_32	term
10006704:	83 ec 04             	sub    esp,0x4
10006707:	6a 0a                	push   0xa
10006709:	6a 18                	push   0x18
1000670b:	50                   	push   eax
1000670c:	e8 fc ff ff ff       	call   1000670d <begin(void*)+0x165e>	1000670d: R_386_PC32	VgaText::setCursor(int, int)
10006711:	83 c4 10             	add    esp,0x10
10006714:	a1 00 00 00 00       	mov    eax,ds:0x0	10006715: R_386_32	term
10006719:	83 ec 08             	sub    esp,0x8
1000671c:	68 50 b1 00 10       	push   0x1000b150	1000671d: R_386_32	.text
10006721:	50                   	push   eax
10006722:	e8 fc ff ff ff       	call   10006723 <begin(void*)+0x1674>	10006723: R_386_PC32	VgaText::puts(char const*)
10006727:	83 c4 10             	add    esp,0x10
1000672a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000672b: R_386_32	term
1000672f:	83 ec 04             	sub    esp,0x4
10006732:	6a 0b                	push   0xb
10006734:	6a 18                	push   0x18
10006736:	50                   	push   eax
10006737:	e8 fc ff ff ff       	call   10006738 <begin(void*)+0x1689>	10006738: R_386_PC32	VgaText::setCursor(int, int)
1000673c:	83 c4 10             	add    esp,0x10
1000673f:	a1 00 00 00 00       	mov    eax,ds:0x0	10006740: R_386_32	term
10006744:	83 ec 08             	sub    esp,0x8
10006747:	68 7c b1 00 10       	push   0x1000b17c	10006748: R_386_32	.text
1000674c:	50                   	push   eax
1000674d:	e8 fc ff ff ff       	call   1000674e <begin(void*)+0x169f>	1000674e: R_386_PC32	VgaText::puts(char const*)
10006752:	83 c4 10             	add    esp,0x10
10006755:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006757: R_386_32	installKey
1000675c:	a0 00 00 00 00       	mov    al,ds:0x0	1000675d: R_386_32	installKey
10006761:	84 c0                	test   al,al
10006763:	0f 94 c0             	sete   al
10006766:	84 c0                	test   al,al
10006768:	74 02                	je     1000676c <begin(void*)+0x16bd>
1000676a:	eb f0                	jmp    1000675c <begin(void*)+0x16ad>
1000676c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000676e: R_386_32	installKey
10006773:	a1 00 00 00 00       	mov    eax,ds:0x0	10006774: R_386_32	term
10006778:	83 ec 04             	sub    esp,0x4
1000677b:	6a 0c                	push   0xc
1000677d:	6a 18                	push   0x18
1000677f:	50                   	push   eax
10006780:	e8 fc ff ff ff       	call   10006781 <begin(void*)+0x16d2>	10006781: R_386_PC32	VgaText::setCursor(int, int)
10006785:	83 c4 10             	add    esp,0x10
10006788:	e8 fc ff ff ff       	call   10006789 <begin(void*)+0x16da>	10006789: R_386_PC32	KeRestart()
1000678d:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000678f: R_386_32	showSidebar
10006794:	83 ec 0c             	sub    esp,0xc
10006797:	68 84 01 00 00       	push   0x184
1000679c:	e8 fc ff ff ff       	call   1000679d <begin(void*)+0x16ee>	1000679d: R_386_PC32	operator new(unsigned long)
100067a1:	83 c4 10             	add    esp,0x10
100067a4:	89 c3                	mov    ebx,eax
100067a6:	83 ec 08             	sub    esp,0x8
100067a9:	68 b0 a7 00 10       	push   0x1000a7b0	100067aa: R_386_32	.text
100067ae:	53                   	push   ebx
100067af:	e8 fc ff ff ff       	call   100067b0 <begin(void*)+0x1701>	100067b0: R_386_PC32	VgaText::VgaText(char const*)
100067b4:	83 c4 10             	add    esp,0x10
100067b7:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	100067b9: R_386_32	term
100067bd:	a1 00 00 00 00       	mov    eax,ds:0x0	100067be: R_386_32	term
100067c2:	83 ec 0c             	sub    esp,0xc
100067c5:	50                   	push   eax
100067c6:	e8 fc ff ff ff       	call   100067c7 <begin(void*)+0x1718>	100067c7: R_386_PC32	setActiveTerminal(VgaText*)
100067cb:	83 c4 10             	add    esp,0x10
100067ce:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
100067d5:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100067dc:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100067de: R_386_32	installKey
100067e3:	83 ec 04             	sub    esp,0x4
100067e6:	68 80 00 00 00       	push   0x80
100067eb:	6a 00                	push   0x0
100067ed:	8d 85 48 f9 ff ff    	lea    eax,[ebp-0x6b8]
100067f3:	50                   	push   eax
100067f4:	e8 fc ff ff ff       	call   100067f5 <begin(void*)+0x1746>	100067f5: R_386_PC32	memset
100067f9:	83 c4 10             	add    esp,0x10
100067fc:	83 ec 04             	sub    esp,0x4
100067ff:	68 80 00 00 00       	push   0x80
10006804:	6a 00                	push   0x0
10006806:	8d 85 c8 f9 ff ff    	lea    eax,[ebp-0x638]
1000680c:	50                   	push   eax
1000680d:	e8 fc ff ff ff       	call   1000680e <begin(void*)+0x175f>	1000680e: R_386_PC32	memset
10006812:	83 c4 10             	add    esp,0x10
10006815:	83 ec 0c             	sub    esp,0xc
10006818:	68 28 ad 00 10       	push   0x1000ad28	10006819: R_386_32	.text
1000681d:	e8 fc ff ff ff       	call   1000681e <begin(void*)+0x176f>	1000681e: R_386_PC32	CmOpen(char const*)
10006822:	83 c4 10             	add    esp,0x10
10006825:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10006828:	83 ec 08             	sub    esp,0x8
1000682b:	68 23 ae 00 10       	push   0x1000ae23	1000682c: R_386_32	.text
10006830:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006833:	e8 fc ff ff ff       	call   10006834 <begin(void*)+0x1785>	10006834: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006838:	83 c4 10             	add    esp,0x10
1000683b:	83 ec 08             	sub    esp,0x8
1000683e:	50                   	push   eax
1000683f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006842:	e8 fc ff ff ff       	call   10006843 <begin(void*)+0x1794>	10006843: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10006847:	83 c4 10             	add    esp,0x10
1000684a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
1000684d:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10006851:	0f 84 88 01 00 00    	je     100069df <begin(void*)+0x1930>
10006857:	83 ec 04             	sub    esp,0x4
1000685a:	6a 50                	push   0x50
1000685c:	6a 00                	push   0x0
1000685e:	8d 85 a8 f8 ff ff    	lea    eax,[ebp-0x758]
10006864:	50                   	push   eax
10006865:	e8 fc ff ff ff       	call   10006866 <begin(void*)+0x17b7>	10006866: R_386_PC32	memset
1000686a:	83 c4 10             	add    esp,0x10
1000686d:	83 ec 04             	sub    esp,0x4
10006870:	8d 85 a8 f8 ff ff    	lea    eax,[ebp-0x758]
10006876:	50                   	push   eax
10006877:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
1000687a:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000687d:	e8 fc ff ff ff       	call   1000687e <begin(void*)+0x17cf>	1000687e: R_386_PC32	CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)
10006882:	83 c4 10             	add    esp,0x10
10006885:	89 45 9c             	mov    DWORD PTR [ebp-0x64],eax
10006888:	83 7d 9c 4e          	cmp    DWORD PTR [ebp-0x64],0x4e
1000688c:	0f 85 34 01 00 00    	jne    100069c6 <begin(void*)+0x1917>
10006892:	83 ec 0c             	sub    esp,0xc
10006895:	6a 50                	push   0x50
10006897:	e8 fc ff ff ff       	call   10006898 <begin(void*)+0x17e9>	10006898: R_386_PC32	malloc
1000689c:	83 c4 10             	add    esp,0x10
1000689f:	89 c2                	mov    edx,eax
100068a1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100068a4:	89 94 85 c8 f9 ff ff 	mov    DWORD PTR [ebp+eax*4-0x638],edx
100068ab:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100068ae:	8b 84 85 c8 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x638]
100068b5:	83 ec 08             	sub    esp,0x8
100068b8:	8d 95 a8 f8 ff ff    	lea    edx,[ebp-0x758]
100068be:	52                   	push   edx
100068bf:	50                   	push   eax
100068c0:	e8 fc ff ff ff       	call   100068c1 <begin(void*)+0x1812>	100068c1: R_386_PC32	strcpy
100068c5:	83 c4 10             	add    esp,0x10
100068c8:	83 ec 08             	sub    esp,0x8
100068cb:	68 66 ad 00 10       	push   0x1000ad66	100068cc: R_386_32	.text
100068d0:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100068d6:	50                   	push   eax
100068d7:	e8 fc ff ff ff       	call   100068d8 <begin(void*)+0x1829>	100068d8: R_386_PC32	strcpy
100068dc:	83 c4 10             	add    esp,0x10
100068df:	83 ec 08             	sub    esp,0x8
100068e2:	8d 85 a8 f8 ff ff    	lea    eax,[ebp-0x758]
100068e8:	50                   	push   eax
100068e9:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100068ef:	50                   	push   eax
100068f0:	e8 fc ff ff ff       	call   100068f1 <begin(void*)+0x1842>	100068f1: R_386_PC32	strcat
100068f5:	83 c4 10             	add    esp,0x10
100068f8:	83 ec 08             	sub    esp,0x8
100068fb:	68 af b0 00 10       	push   0x1000b0af	100068fc: R_386_32	.text
10006900:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006906:	50                   	push   eax
10006907:	e8 fc ff ff ff       	call   10006908 <begin(void*)+0x1859>	10006908: R_386_PC32	strcat
1000690c:	83 c4 10             	add    esp,0x10
1000690f:	83 ec 08             	sub    esp,0x8
10006912:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
10006918:	50                   	push   eax
10006919:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000691c:	e8 fc ff ff ff       	call   1000691d <begin(void*)+0x186e>	1000691d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006921:	83 c4 10             	add    esp,0x10
10006924:	83 ec 04             	sub    esp,0x4
10006927:	8d 95 a8 f8 ff ff    	lea    edx,[ebp-0x758]
1000692d:	52                   	push   edx
1000692e:	50                   	push   eax
1000692f:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006932:	e8 fc ff ff ff       	call   10006933 <begin(void*)+0x1884>	10006933: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10006937:	83 c4 10             	add    esp,0x10
1000693a:	83 ec 0c             	sub    esp,0xc
1000693d:	6a 50                	push   0x50
1000693f:	e8 fc ff ff ff       	call   10006940 <begin(void*)+0x1891>	10006940: R_386_PC32	malloc
10006944:	83 c4 10             	add    esp,0x10
10006947:	89 c2                	mov    edx,eax
10006949:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000694c:	89 94 85 48 f9 ff ff 	mov    DWORD PTR [ebp+eax*4-0x6b8],edx
10006953:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006956:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
1000695d:	83 ec 08             	sub    esp,0x8
10006960:	68 77 a7 00 10       	push   0x1000a777	10006961: R_386_32	.text
10006965:	50                   	push   eax
10006966:	e8 fc ff ff ff       	call   10006967 <begin(void*)+0x18b8>	10006967: R_386_PC32	strcpy
1000696b:	83 c4 10             	add    esp,0x10
1000696e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006971:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
10006978:	83 ec 08             	sub    esp,0x8
1000697b:	8d 95 a8 f8 ff ff    	lea    edx,[ebp-0x758]
10006981:	52                   	push   edx
10006982:	50                   	push   eax
10006983:	e8 fc ff ff ff       	call   10006984 <begin(void*)+0x18d5>	10006984: R_386_PC32	strcat
10006988:	83 c4 10             	add    esp,0x10
1000698b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000698e:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
10006995:	83 ec 0c             	sub    esp,0xc
10006998:	50                   	push   eax
10006999:	e8 fc ff ff ff       	call   1000699a <begin(void*)+0x18eb>	1000699a: R_386_PC32	strlen
1000699e:	83 c4 10             	add    esp,0x10
100069a1:	83 f8 31             	cmp    eax,0x31
100069a4:	77 1d                	ja     100069c3 <begin(void*)+0x1914>
100069a6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100069a9:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
100069b0:	83 ec 08             	sub    esp,0x8
100069b3:	68 77 a7 00 10       	push   0x1000a777	100069b4: R_386_32	.text
100069b8:	50                   	push   eax
100069b9:	e8 fc ff ff ff       	call   100069ba <begin(void*)+0x190b>	100069ba: R_386_PC32	strcat
100069be:	83 c4 10             	add    esp,0x10
100069c1:	eb c8                	jmp    1000698b <begin(void*)+0x18dc>
100069c3:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
100069c6:	83 ec 08             	sub    esp,0x8
100069c9:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100069cc:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100069cf:	e8 fc ff ff ff       	call   100069d0 <begin(void*)+0x1921>	100069d0: R_386_PC32	CmGetNext(Reghive_Tag*, int)
100069d4:	83 c4 10             	add    esp,0x10
100069d7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
100069da:	e9 6e fe ff ff       	jmp    1000684d <begin(void*)+0x179e>
100069df:	83 ec 0c             	sub    esp,0xc
100069e2:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100069e5:	e8 fc ff ff ff       	call   100069e6 <begin(void*)+0x1937>	100069e6: R_386_PC32	CmClose(Reghive_Tag*)
100069ea:	83 c4 10             	add    esp,0x10
100069ed:	83 ec 0c             	sub    esp,0xc
100069f0:	6a 50                	push   0x50
100069f2:	e8 fc ff ff ff       	call   100069f3 <begin(void*)+0x1944>	100069f3: R_386_PC32	malloc
100069f7:	83 c4 10             	add    esp,0x10
100069fa:	89 c2                	mov    edx,eax
100069fc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100069ff:	89 94 85 48 f9 ff ff 	mov    DWORD PTR [ebp+eax*4-0x6b8],edx
10006a06:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006a09:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
10006a10:	83 ec 08             	sub    esp,0x8
10006a13:	68 dc b1 00 10       	push   0x1000b1dc	10006a14: R_386_32	.text
10006a18:	50                   	push   eax
10006a19:	e8 fc ff ff ff       	call   10006a1a <begin(void*)+0x196b>	10006a1a: R_386_PC32	strcpy
10006a1e:	83 c4 10             	add    esp,0x10
10006a21:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10006a24:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10006a26: R_386_32	guiKeyboardHandler
	10006a2a: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
10006a2e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006a30: R_386_32	installKey
10006a35:	e8 fc ff ff ff       	call   10006a36 <begin(void*)+0x1987>	10006a36: R_386_PC32	drawBootScreen()
10006a3a:	83 ec 0c             	sub    esp,0xc
10006a3d:	68 0f b2 00 10       	push   0x1000b20f	10006a3e: R_386_32	.text
10006a42:	6a 10                	push   0x10
10006a44:	6a 39                	push   0x39
10006a46:	6a 03                	push   0x3
10006a48:	6a 0c                	push   0xc
10006a4a:	e8 fc ff ff ff       	call   10006a4b <begin(void*)+0x199c>	10006a4b: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10006a4f:	83 c4 20             	add    esp,0x20
10006a52:	a1 00 00 00 00       	mov    eax,ds:0x0	10006a53: R_386_32	term
10006a57:	83 ec 04             	sub    esp,0x4
10006a5a:	6a 06                	push   0x6
10006a5c:	6a 0e                	push   0xe
10006a5e:	50                   	push   eax
10006a5f:	e8 fc ff ff ff       	call   10006a60 <begin(void*)+0x19b1>	10006a60: R_386_PC32	VgaText::setCursor(int, int)
10006a64:	83 c4 10             	add    esp,0x10
10006a67:	a1 00 00 00 00       	mov    eax,ds:0x0	10006a68: R_386_32	term
10006a6c:	6a 0f                	push   0xf
10006a6e:	6a 00                	push   0x0
10006a70:	68 18 b2 00 10       	push   0x1000b218	10006a71: R_386_32	.text
10006a75:	50                   	push   eax
10006a76:	e8 fc ff ff ff       	call   10006a77 <begin(void*)+0x19c8>	10006a77: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006a7b:	83 c4 10             	add    esp,0x10
10006a7e:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10006a82:	75 0c                	jne    10006a90 <begin(void*)+0x19e1>
10006a84:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10006a8b:	e9 23 01 00 00       	jmp    10006bb3 <begin(void*)+0x1b04>
10006a90:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10006a97:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10006a9a:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
10006a9d:	7d 63                	jge    10006b02 <begin(void*)+0x1a53>
10006a9f:	a1 00 00 00 00       	mov    eax,ds:0x0	10006aa0: R_386_32	term
10006aa4:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10006aa7:	83 c2 08             	add    edx,0x8
10006aaa:	83 ec 04             	sub    esp,0x4
10006aad:	52                   	push   edx
10006aae:	6a 0f                	push   0xf
10006ab0:	50                   	push   eax
10006ab1:	e8 fc ff ff ff       	call   10006ab2 <begin(void*)+0x1a03>	10006ab2: R_386_PC32	VgaText::setCursor(int, int)
10006ab6:	83 c4 10             	add    esp,0x10
10006ab9:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10006abb: R_386_32	term
10006abf:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10006ac2:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006ac5:	75 07                	jne    10006ace <begin(void*)+0x1a1f>
10006ac7:	b9 00 00 00 00       	mov    ecx,0x0
10006acc:	eb 05                	jmp    10006ad3 <begin(void*)+0x1a24>
10006ace:	b9 0f 00 00 00       	mov    ecx,0xf
10006ad3:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10006ad6:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006ad9:	75 07                	jne    10006ae2 <begin(void*)+0x1a33>
10006adb:	ba 0f 00 00 00       	mov    edx,0xf
10006ae0:	eb 05                	jmp    10006ae7 <begin(void*)+0x1a38>
10006ae2:	ba 00 00 00 00       	mov    edx,0x0
10006ae7:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10006aea:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
10006af1:	51                   	push   ecx
10006af2:	52                   	push   edx
10006af3:	50                   	push   eax
10006af4:	53                   	push   ebx
10006af5:	e8 fc ff ff ff       	call   10006af6 <begin(void*)+0x1a47>	10006af6: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006afa:	83 c4 10             	add    esp,0x10
10006afd:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10006b00:	eb 95                	jmp    10006a97 <begin(void*)+0x19e8>
10006b02:	a0 00 00 00 00       	mov    al,ds:0x0	10006b03: R_386_32	installKey
10006b07:	84 c0                	test   al,al
10006b09:	0f 94 c0             	sete   al
10006b0c:	84 c0                	test   al,al
10006b0e:	74 02                	je     10006b12 <begin(void*)+0x1a63>
10006b10:	eb f0                	jmp    10006b02 <begin(void*)+0x1a53>
10006b12:	a1 00 00 00 00       	mov    eax,ds:0x0	10006b13: R_386_32	term
10006b17:	05 82 00 00 00       	add    eax,0x82
10006b1c:	83 ec 04             	sub    esp,0x4
10006b1f:	6a 04                	push   0x4
10006b21:	6a 00                	push   0x0
10006b23:	50                   	push   eax
10006b24:	e8 fc ff ff ff       	call   10006b25 <begin(void*)+0x1a76>	10006b25: R_386_PC32	memset
10006b29:	83 c4 10             	add    esp,0x10
10006b2c:	a1 00 00 00 00       	mov    eax,ds:0x0	10006b2d: R_386_32	term
10006b31:	05 02 01 00 00       	add    eax,0x102
10006b36:	83 ec 04             	sub    esp,0x4
10006b39:	6a 04                	push   0x4
10006b3b:	6a 00                	push   0x0
10006b3d:	50                   	push   eax
10006b3e:	e8 fc ff ff ff       	call   10006b3f <begin(void*)+0x1a90>	10006b3f: R_386_PC32	memset
10006b43:	83 c4 10             	add    esp,0x10
10006b46:	a0 00 00 00 00       	mov    al,ds:0x0	10006b47: R_386_32	installKey
10006b4b:	3c 01                	cmp    al,0x1
10006b4d:	0f 94 c0             	sete   al
10006b50:	84 c0                	test   al,al
10006b52:	74 12                	je     10006b66 <begin(void*)+0x1ab7>
10006b54:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
10006b57:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10006b5b:	79 39                	jns    10006b96 <begin(void*)+0x1ae7>
10006b5d:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10006b64:	eb 30                	jmp    10006b96 <begin(void*)+0x1ae7>
10006b66:	a0 00 00 00 00       	mov    al,ds:0x0	10006b67: R_386_32	installKey
10006b6b:	3c 02                	cmp    al,0x2
10006b6d:	0f 94 c0             	sete   al
10006b70:	84 c0                	test   al,al
10006b72:	74 14                	je     10006b88 <begin(void*)+0x1ad9>
10006b74:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10006b77:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006b7a:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006b7d:	7f 17                	jg     10006b96 <begin(void*)+0x1ae7>
10006b7f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006b82:	48                   	dec    eax
10006b83:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10006b86:	eb 0e                	jmp    10006b96 <begin(void*)+0x1ae7>
10006b88:	a0 00 00 00 00       	mov    al,ds:0x0	10006b89: R_386_32	installKey
10006b8d:	3c 0a                	cmp    al,0xa
10006b8f:	0f 94 c0             	sete   al
10006b92:	84 c0                	test   al,al
10006b94:	75 1c                	jne    10006bb2 <begin(void*)+0x1b03>
10006b96:	83 ec 0c             	sub    esp,0xc
10006b99:	68 f4 01 00 00       	push   0x1f4
10006b9e:	e8 fc ff ff ff       	call   10006b9f <begin(void*)+0x1af0>	10006b9f: R_386_PC32	milliTenthSleep(unsigned int)
10006ba3:	83 c4 10             	add    esp,0x10
10006ba6:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006ba8: R_386_32	installKey
10006bad:	e9 cc fe ff ff       	jmp    10006a7e <begin(void*)+0x19cf>
10006bb2:	90                   	nop
10006bb3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006bb6:	48                   	dec    eax
10006bb7:	39 45 dc             	cmp    DWORD PTR [ebp-0x24],eax
10006bba:	0f 85 af 00 00 00    	jne    10006c6f <begin(void*)+0x1bc0>
10006bc0:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10006bc2: R_386_32	createNewUserMode
10006bc7:	83 ec 0c             	sub    esp,0xc
10006bca:	6a 00                	push   0x0
10006bcc:	e8 fc ff ff ff       	call   10006bcd <begin(void*)+0x1b1e>	10006bcd: R_386_PC32	firstRun(bool)
10006bd1:	83 c4 10             	add    esp,0x10
10006bd4:	a0 00 00 00 00       	mov    al,ds:0x0	10006bd5: R_386_32	createNewUserMode
10006bd9:	83 f0 01             	xor    eax,0x1
10006bdc:	84 c0                	test   al,al
10006bde:	0f 84 22 e7 ff ff    	je     10005306 <begin(void*)+0x257>
10006be4:	a1 00 00 00 00       	mov    eax,ds:0x0	10006be5: R_386_32	term
10006be9:	05 82 00 00 00       	add    eax,0x82
10006bee:	83 ec 04             	sub    esp,0x4
10006bf1:	6a 04                	push   0x4
10006bf3:	6a 00                	push   0x0
10006bf5:	50                   	push   eax
10006bf6:	e8 fc ff ff ff       	call   10006bf7 <begin(void*)+0x1b48>	10006bf7: R_386_PC32	memset
10006bfb:	83 c4 10             	add    esp,0x10
10006bfe:	a1 00 00 00 00       	mov    eax,ds:0x0	10006bff: R_386_32	term
10006c03:	05 02 01 00 00       	add    eax,0x102
10006c08:	83 ec 04             	sub    esp,0x4
10006c0b:	6a 04                	push   0x4
10006c0d:	6a 00                	push   0x0
10006c0f:	50                   	push   eax
10006c10:	e8 fc ff ff ff       	call   10006c11 <begin(void*)+0x1b62>	10006c11: R_386_PC32	memset
10006c15:	83 c4 10             	add    esp,0x10
10006c18:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006c1a: R_386_32	installKey
10006c1f:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
10006c22:	e9 ae fb ff ff       	jmp    100067d5 <begin(void*)+0x1726>
10006c27:	90                   	nop
10006c28:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006c2a: R_386_32	createNewUserMode
10006c2f:	a1 00 00 00 00       	mov    eax,ds:0x0	10006c30: R_386_32	term
10006c34:	05 82 00 00 00       	add    eax,0x82
10006c39:	83 ec 04             	sub    esp,0x4
10006c3c:	6a 04                	push   0x4
10006c3e:	6a 00                	push   0x0
10006c40:	50                   	push   eax
10006c41:	e8 fc ff ff ff       	call   10006c42 <begin(void*)+0x1b93>	10006c42: R_386_PC32	memset
10006c46:	83 c4 10             	add    esp,0x10
10006c49:	a1 00 00 00 00       	mov    eax,ds:0x0	10006c4a: R_386_32	term
10006c4e:	05 02 01 00 00       	add    eax,0x102
10006c53:	83 ec 04             	sub    esp,0x4
10006c56:	6a 04                	push   0x4
10006c58:	6a 00                	push   0x0
10006c5a:	50                   	push   eax
10006c5b:	e8 fc ff ff ff       	call   10006c5c <begin(void*)+0x1bad>	10006c5c: R_386_PC32	memset
10006c60:	83 c4 10             	add    esp,0x10
10006c63:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006c65: R_386_32	installKey
10006c6a:	e9 66 fb ff ff       	jmp    100067d5 <begin(void*)+0x1726>
10006c6f:	83 ec 08             	sub    esp,0x8
10006c72:	68 66 ad 00 10       	push   0x1000ad66	10006c73: R_386_32	.text
10006c77:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006c7d:	50                   	push   eax
10006c7e:	e8 fc ff ff ff       	call   10006c7f <begin(void*)+0x1bd0>	10006c7f: R_386_PC32	strcpy
10006c83:	83 c4 10             	add    esp,0x10
10006c86:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10006c89:	8b 84 85 c8 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x638]
10006c90:	83 ec 08             	sub    esp,0x8
10006c93:	50                   	push   eax
10006c94:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006c9a:	50                   	push   eax
10006c9b:	e8 fc ff ff ff       	call   10006c9c <begin(void*)+0x1bed>	10006c9c: R_386_PC32	strcat
10006ca0:	83 c4 10             	add    esp,0x10
10006ca3:	83 ec 08             	sub    esp,0x8
10006ca6:	68 9f b0 00 10       	push   0x1000b09f	10006ca7: R_386_32	.text
10006cab:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006cb1:	50                   	push   eax
10006cb2:	e8 fc ff ff ff       	call   10006cb3 <begin(void*)+0x1c04>	10006cb3: R_386_PC32	strcat
10006cb7:	83 c4 10             	add    esp,0x10
10006cba:	83 ec 0c             	sub    esp,0xc
10006cbd:	68 28 ad 00 10       	push   0x1000ad28	10006cbe: R_386_32	.text
10006cc2:	e8 fc ff ff ff       	call   10006cc3 <begin(void*)+0x1c14>	10006cc3: R_386_PC32	CmOpen(char const*)
10006cc7:	83 c4 10             	add    esp,0x10
10006cca:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10006ccd:	83 ec 08             	sub    esp,0x8
10006cd0:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006cd6:	50                   	push   eax
10006cd7:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006cda:	e8 fc ff ff ff       	call   10006cdb <begin(void*)+0x1c2c>	10006cdb: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006cdf:	83 c4 10             	add    esp,0x10
10006ce2:	83 ec 04             	sub    esp,0x4
10006ce5:	8d 95 ca fa ff ff    	lea    edx,[ebp-0x536]
10006ceb:	52                   	push   edx
10006cec:	50                   	push   eax
10006ced:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006cf0:	e8 fc ff ff ff       	call   10006cf1 <begin(void*)+0x1c42>	10006cf1: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10006cf5:	83 c4 10             	add    esp,0x10
10006cf8:	83 ec 08             	sub    esp,0x8
10006cfb:	68 66 ad 00 10       	push   0x1000ad66	10006cfc: R_386_32	.text
10006d00:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006d06:	50                   	push   eax
10006d07:	e8 fc ff ff ff       	call   10006d08 <begin(void*)+0x1c59>	10006d08: R_386_PC32	strcpy
10006d0c:	83 c4 10             	add    esp,0x10
10006d0f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10006d12:	8b 84 85 c8 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x638]
10006d19:	83 ec 08             	sub    esp,0x8
10006d1c:	50                   	push   eax
10006d1d:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006d23:	50                   	push   eax
10006d24:	e8 fc ff ff ff       	call   10006d25 <begin(void*)+0x1c76>	10006d25: R_386_PC32	strcat
10006d29:	83 c4 10             	add    esp,0x10
10006d2c:	83 ec 08             	sub    esp,0x8
10006d2f:	68 a9 b0 00 10       	push   0x1000b0a9	10006d30: R_386_32	.text
10006d34:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006d3a:	50                   	push   eax
10006d3b:	e8 fc ff ff ff       	call   10006d3c <begin(void*)+0x1c8d>	10006d3c: R_386_PC32	strcat
10006d40:	83 c4 10             	add    esp,0x10
10006d43:	83 ec 08             	sub    esp,0x8
10006d46:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006d4c:	50                   	push   eax
10006d4d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006d50:	e8 fc ff ff ff       	call   10006d51 <begin(void*)+0x1ca2>	10006d51: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006d55:	83 c4 10             	add    esp,0x10
10006d58:	83 ec 04             	sub    esp,0x4
10006d5b:	8d 95 f8 f8 ff ff    	lea    edx,[ebp-0x708]
10006d61:	52                   	push   edx
10006d62:	50                   	push   eax
10006d63:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006d66:	e8 fc ff ff ff       	call   10006d67 <begin(void*)+0x1cb8>	10006d67: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10006d6b:	83 c4 10             	add    esp,0x10
10006d6e:	83 ec 0c             	sub    esp,0xc
10006d71:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10006d74:	e8 fc ff ff ff       	call   10006d75 <begin(void*)+0x1cc6>	10006d75: R_386_PC32	CmClose(Reghive_Tag*)
10006d79:	83 c4 10             	add    esp,0x10
10006d7c:	83 ec 04             	sub    esp,0x4
10006d7f:	68 80 00 00 00       	push   0x80
10006d84:	6a 00                	push   0x0
10006d86:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006d8c:	50                   	push   eax
10006d8d:	e8 fc ff ff ff       	call   10006d8e <begin(void*)+0x1cdf>	10006d8e: R_386_PC32	memset
10006d92:	83 c4 10             	add    esp,0x10
10006d95:	e8 fc ff ff ff       	call   10006d96 <begin(void*)+0x1ce7>	10006d96: R_386_PC32	drawBootScreen()
10006d9a:	83 ec 08             	sub    esp,0x8
10006d9d:	6a 01                	push   0x1
10006d9f:	68 0f b2 00 10       	push   0x1000b20f	10006da0: R_386_32	.text
10006da4:	6a 10                	push   0x10
10006da6:	6a 39                	push   0x39
10006da8:	6a 03                	push   0x3
10006daa:	6a 0c                	push   0xc
10006dac:	e8 fc ff ff ff       	call   10006dad <begin(void*)+0x1cfe>	10006dad: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10006db1:	83 c4 20             	add    esp,0x20
10006db4:	a1 00 00 00 00       	mov    eax,ds:0x0	10006db5: R_386_32	term
10006db9:	83 ec 04             	sub    esp,0x4
10006dbc:	6a 06                	push   0x6
10006dbe:	6a 0e                	push   0xe
10006dc0:	50                   	push   eax
10006dc1:	e8 fc ff ff ff       	call   10006dc2 <begin(void*)+0x1d13>	10006dc2: R_386_PC32	VgaText::setCursor(int, int)
10006dc6:	83 c4 10             	add    esp,0x10
10006dc9:	a1 00 00 00 00       	mov    eax,ds:0x0	10006dca: R_386_32	term
10006dce:	6a 07                	push   0x7
10006dd0:	6a 00                	push   0x0
10006dd2:	68 18 b2 00 10       	push   0x1000b218	10006dd3: R_386_32	.text
10006dd7:	50                   	push   eax
10006dd8:	e8 fc ff ff ff       	call   10006dd9 <begin(void*)+0x1d2a>	10006dd9: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006ddd:	83 c4 10             	add    esp,0x10
10006de0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10006de4:	7e 72                	jle    10006e58 <begin(void*)+0x1da9>
10006de6:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
10006ded:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10006df0:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
10006df3:	7d 63                	jge    10006e58 <begin(void*)+0x1da9>
10006df5:	a1 00 00 00 00       	mov    eax,ds:0x0	10006df6: R_386_32	term
10006dfa:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
10006dfd:	83 c2 08             	add    edx,0x8
10006e00:	83 ec 04             	sub    esp,0x4
10006e03:	52                   	push   edx
10006e04:	6a 0f                	push   0xf
10006e06:	50                   	push   eax
10006e07:	e8 fc ff ff ff       	call   10006e08 <begin(void*)+0x1d59>	10006e08: R_386_PC32	VgaText::setCursor(int, int)
10006e0c:	83 c4 10             	add    esp,0x10
10006e0f:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10006e11: R_386_32	term
10006e15:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10006e18:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006e1b:	75 07                	jne    10006e24 <begin(void*)+0x1d75>
10006e1d:	b9 00 00 00 00       	mov    ecx,0x0
10006e22:	eb 05                	jmp    10006e29 <begin(void*)+0x1d7a>
10006e24:	b9 07 00 00 00       	mov    ecx,0x7
10006e29:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10006e2c:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006e2f:	75 07                	jne    10006e38 <begin(void*)+0x1d89>
10006e31:	ba 07 00 00 00       	mov    edx,0x7
10006e36:	eb 05                	jmp    10006e3d <begin(void*)+0x1d8e>
10006e38:	ba 00 00 00 00       	mov    edx,0x0
10006e3d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10006e40:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
10006e47:	51                   	push   ecx
10006e48:	52                   	push   edx
10006e49:	50                   	push   eax
10006e4a:	53                   	push   ebx
10006e4b:	e8 fc ff ff ff       	call   10006e4c <begin(void*)+0x1d9d>	10006e4c: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006e50:	83 c4 10             	add    esp,0x10
10006e53:	ff 45 d0             	inc    DWORD PTR [ebp-0x30]
10006e56:	eb 95                	jmp    10006ded <begin(void*)+0x1d3e>
10006e58:	83 ec 0c             	sub    esp,0xc
10006e5b:	68 0f b2 00 10       	push   0x1000b20f	10006e5c: R_386_32	.text
10006e60:	6a 0b                	push   0xb
10006e62:	6a 2d                	push   0x2d
10006e64:	6a 0a                	push   0xa
10006e66:	6a 1c                	push   0x1c
10006e68:	e8 fc ff ff ff       	call   10006e69 <begin(void*)+0x1dba>	10006e69: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10006e6d:	83 c4 20             	add    esp,0x20
10006e70:	c6 45 cf 01          	mov    BYTE PTR [ebp-0x31],0x1
10006e74:	83 ec 04             	sub    esp,0x4
10006e77:	8d 85 4a fb ff ff    	lea    eax,[ebp-0x4b6]
10006e7d:	50                   	push   eax
10006e7e:	8d 85 f8 f8 ff ff    	lea    eax,[ebp-0x708]
10006e84:	50                   	push   eax
10006e85:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006e8b:	50                   	push   eax
10006e8c:	e8 fc ff ff ff       	call   10006e8d <begin(void*)+0x1dde>	10006e8d: R_386_PC32	bcrypt_hashpw
10006e91:	83 c4 10             	add    esp,0x10
10006e94:	83 ec 08             	sub    esp,0x8
10006e97:	8d 85 4a fb ff ff    	lea    eax,[ebp-0x4b6]
10006e9d:	50                   	push   eax
10006e9e:	8d 85 ca fa ff ff    	lea    eax,[ebp-0x536]
10006ea4:	50                   	push   eax
10006ea5:	e8 fc ff ff ff       	call   10006ea6 <begin(void*)+0x1df7>	10006ea6: R_386_PC32	strcmp
10006eaa:	83 c4 10             	add    esp,0x10
10006ead:	85 c0                	test   eax,eax
10006eaf:	75 04                	jne    10006eb5 <begin(void*)+0x1e06>
10006eb1:	c6 45 cf 00          	mov    BYTE PTR [ebp-0x31],0x0
10006eb5:	83 ec 04             	sub    esp,0x4
10006eb8:	68 80 00 00 00       	push   0x80
10006ebd:	6a 00                	push   0x0
10006ebf:	8d 85 4a fb ff ff    	lea    eax,[ebp-0x4b6]
10006ec5:	50                   	push   eax
10006ec6:	e8 fc ff ff ff       	call   10006ec7 <begin(void*)+0x1e18>	10006ec7: R_386_PC32	memset
10006ecb:	83 c4 10             	add    esp,0x10
10006ece:	80 7d cf 00          	cmp    BYTE PTR [ebp-0x31],0x0
10006ed2:	0f 84 9c 02 00 00    	je     10007174 <begin(void*)+0x20c5>
10006ed8:	a1 00 00 00 00       	mov    eax,ds:0x0	10006ed9: R_386_32	term
10006edd:	83 ec 04             	sub    esp,0x4
10006ee0:	6a 0d                	push   0xd
10006ee2:	6a 1e                	push   0x1e
10006ee4:	50                   	push   eax
10006ee5:	e8 fc ff ff ff       	call   10006ee6 <begin(void*)+0x1e37>	10006ee6: R_386_PC32	VgaText::setCursor(int, int)
10006eea:	83 c4 10             	add    esp,0x10
10006eed:	a1 00 00 00 00       	mov    eax,ds:0x0	10006eee: R_386_32	term
10006ef2:	83 ec 08             	sub    esp,0x8
10006ef5:	68 48 b2 00 10       	push   0x1000b248	10006ef6: R_386_32	.text
10006efa:	50                   	push   eax
10006efb:	e8 fc ff ff ff       	call   10006efc <begin(void*)+0x1e4d>	10006efc: R_386_PC32	VgaText::puts(char const*)
10006f00:	83 c4 10             	add    esp,0x10
10006f03:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f04: R_386_32	term
10006f08:	83 ec 04             	sub    esp,0x4
10006f0b:	6a 0e                	push   0xe
10006f0d:	6a 1e                	push   0x1e
10006f0f:	50                   	push   eax
10006f10:	e8 fc ff ff ff       	call   10006f11 <begin(void*)+0x1e62>	10006f11: R_386_PC32	VgaText::setCursor(int, int)
10006f15:	83 c4 10             	add    esp,0x10
10006f18:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f19: R_386_32	term
10006f1d:	83 ec 08             	sub    esp,0x8
10006f20:	68 72 b2 00 10       	push   0x1000b272	10006f21: R_386_32	.text
10006f25:	50                   	push   eax
10006f26:	e8 fc ff ff ff       	call   10006f27 <begin(void*)+0x1e78>	10006f27: R_386_PC32	VgaText::puts(char const*)
10006f2b:	83 c4 10             	add    esp,0x10
10006f2e:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f2f: R_386_32	term
10006f33:	83 ec 04             	sub    esp,0x4
10006f36:	6a 10                	push   0x10
10006f38:	6a 1e                	push   0x1e
10006f3a:	50                   	push   eax
10006f3b:	e8 fc ff ff ff       	call   10006f3c <begin(void*)+0x1e8d>	10006f3c: R_386_PC32	VgaText::setCursor(int, int)
10006f40:	83 c4 10             	add    esp,0x10
10006f43:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f44: R_386_32	term
10006f48:	6a 07                	push   0x7
10006f4a:	6a 00                	push   0x0
10006f4c:	68 80 a8 00 10       	push   0x1000a880	10006f4d: R_386_32	.text
10006f51:	50                   	push   eax
10006f52:	e8 fc ff ff ff       	call   10006f53 <begin(void*)+0x1ea4>	10006f53: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006f57:	83 c4 10             	add    esp,0x10
10006f5a:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f5b: R_386_32	term
10006f5f:	83 ec 08             	sub    esp,0x8
10006f62:	6a 1e                	push   0x1e
10006f64:	50                   	push   eax
10006f65:	e8 fc ff ff ff       	call   10006f66 <begin(void*)+0x1eb7>	10006f66: R_386_PC32	VgaText::setCursorX(int)
10006f6a:	83 c4 10             	add    esp,0x10
10006f6d:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
10006f74:	83 ec 0c             	sub    esp,0xc
10006f77:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006f7d:	50                   	push   eax
10006f7e:	e8 fc ff ff ff       	call   10006f7f <begin(void*)+0x1ed0>	10006f7f: R_386_PC32	strlen
10006f83:	83 c4 10             	add    esp,0x10
10006f86:	89 c2                	mov    edx,eax
10006f88:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10006f8b:	39 c2                	cmp    edx,eax
10006f8d:	76 1c                	jbe    10006fab <begin(void*)+0x1efc>
10006f8f:	a1 00 00 00 00       	mov    eax,ds:0x0	10006f90: R_386_32	term
10006f94:	6a 07                	push   0x7
10006f96:	6a 00                	push   0x0
10006f98:	68 ac a8 00 10       	push   0x1000a8ac	10006f99: R_386_32	.text
10006f9d:	50                   	push   eax
10006f9e:	e8 fc ff ff ff       	call   10006f9f <begin(void*)+0x1ef0>	10006f9f: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006fa3:	83 c4 10             	add    esp,0x10
10006fa6:	ff 45 c8             	inc    DWORD PTR [ebp-0x38]
10006fa9:	eb c9                	jmp    10006f74 <begin(void*)+0x1ec5>
10006fab:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10006fad: R_386_32	term
10006fb1:	83 ec 0c             	sub    esp,0xc
10006fb4:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10006fba:	50                   	push   eax
10006fbb:	e8 fc ff ff ff       	call   10006fbc <begin(void*)+0x1f0d>	10006fbc: R_386_PC32	strlen
10006fc0:	83 c4 10             	add    esp,0x10
10006fc3:	83 c0 1e             	add    eax,0x1e
10006fc6:	83 ec 04             	sub    esp,0x4
10006fc9:	6a 10                	push   0x10
10006fcb:	50                   	push   eax
10006fcc:	53                   	push   ebx
10006fcd:	e8 fc ff ff ff       	call   10006fce <begin(void*)+0x1f1f>	10006fce: R_386_PC32	VgaText::setCursor(int, int)
10006fd2:	83 c4 10             	add    esp,0x10
10006fd5:	a0 00 00 00 00       	mov    al,ds:0x0	10006fd6: R_386_32	installKey
10006fda:	84 c0                	test   al,al
10006fdc:	0f 94 c0             	sete   al
10006fdf:	84 c0                	test   al,al
10006fe1:	74 02                	je     10006fe5 <begin(void*)+0x1f36>
10006fe3:	eb f0                	jmp    10006fd5 <begin(void*)+0x1f26>
10006fe5:	a1 00 00 00 00       	mov    eax,ds:0x0	10006fe6: R_386_32	term
10006fea:	05 82 00 00 00       	add    eax,0x82
10006fef:	83 ec 04             	sub    esp,0x4
10006ff2:	6a 10                	push   0x10
10006ff4:	6a 00                	push   0x0
10006ff6:	50                   	push   eax
10006ff7:	e8 fc ff ff ff       	call   10006ff8 <begin(void*)+0x1f49>	10006ff8: R_386_PC32	memset
10006ffc:	83 c4 10             	add    esp,0x10
10006fff:	a1 00 00 00 00       	mov    eax,ds:0x0	10007000: R_386_32	term
10007004:	05 02 01 00 00       	add    eax,0x102
10007009:	83 ec 04             	sub    esp,0x4
1000700c:	6a 10                	push   0x10
1000700e:	6a 00                	push   0x0
10007010:	50                   	push   eax
10007011:	e8 fc ff ff ff       	call   10007012 <begin(void*)+0x1f63>	10007012: R_386_PC32	memset
10007016:	83 c4 10             	add    esp,0x10
10007019:	a0 00 00 00 00       	mov    al,ds:0x0	1000701a: R_386_32	installKey
1000701e:	3c 0a                	cmp    al,0xa
10007020:	0f 94 c0             	sete   al
10007023:	84 c0                	test   al,al
10007025:	0f 84 88 00 00 00    	je     100070b3 <begin(void*)+0x2004>
1000702b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000702d: R_386_32	installKey
10007032:	83 ec 04             	sub    esp,0x4
10007035:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000703b:	50                   	push   eax
1000703c:	8d 85 f8 f8 ff ff    	lea    eax,[ebp-0x708]
10007042:	50                   	push   eax
10007043:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10007049:	50                   	push   eax
1000704a:	e8 fc ff ff ff       	call   1000704b <begin(void*)+0x1f9c>	1000704b: R_386_PC32	bcrypt_hashpw
1000704f:	83 c4 10             	add    esp,0x10
10007052:	8d 85 f8 f8 ff ff    	lea    eax,[ebp-0x708]
10007058:	50                   	push   eax
10007059:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000705f:	50                   	push   eax
10007060:	8d 85 ca fa ff ff    	lea    eax,[ebp-0x536]
10007066:	50                   	push   eax
10007067:	68 8c b2 00 10       	push   0x1000b28c	10007068: R_386_32	.text
1000706c:	e8 fc ff ff ff       	call   1000706d <begin(void*)+0x1fbe>	1000706d: R_386_PC32	Dbg::kprintf(char const*, ...)
10007071:	83 c4 10             	add    esp,0x10
10007074:	83 ec 08             	sub    esp,0x8
10007077:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
1000707d:	50                   	push   eax
1000707e:	8d 85 ca fa ff ff    	lea    eax,[ebp-0x536]
10007084:	50                   	push   eax
10007085:	e8 fc ff ff ff       	call   10007086 <begin(void*)+0x1fd7>	10007086: R_386_PC32	strcmp
1000708a:	83 c4 10             	add    esp,0x10
1000708d:	85 c0                	test   eax,eax
1000708f:	0f 84 de 00 00 00    	je     10007173 <begin(void*)+0x20c4>
10007095:	83 ec 04             	sub    esp,0x4
10007098:	68 80 00 00 00       	push   0x80
1000709d:	6a 00                	push   0x0
1000709f:	8d 85 ca fb ff ff    	lea    eax,[ebp-0x436]
100070a5:	50                   	push   eax
100070a6:	e8 fc ff ff ff       	call   100070a7 <begin(void*)+0x1ff8>	100070a7: R_386_PC32	memset
100070ab:	83 c4 10             	add    esp,0x10
100070ae:	e9 b4 00 00 00       	jmp    10007167 <begin(void*)+0x20b8>
100070b3:	a0 00 00 00 00       	mov    al,ds:0x0	100070b4: R_386_32	installKey
100070b8:	3c 1f                	cmp    al,0x1f
100070ba:	7e 0d                	jle    100070c9 <begin(void*)+0x201a>
100070bc:	a0 00 00 00 00       	mov    al,ds:0x0	100070bd: R_386_32	installKey
100070c1:	3c 7f                	cmp    al,0x7f
100070c3:	74 04                	je     100070c9 <begin(void*)+0x201a>
100070c5:	b0 01                	mov    al,0x1
100070c7:	eb 02                	jmp    100070cb <begin(void*)+0x201c>
100070c9:	b0 00                	mov    al,0x0
100070cb:	84 c0                	test   al,al
100070cd:	74 44                	je     10007113 <begin(void*)+0x2064>
100070cf:	a0 00 00 00 00       	mov    al,ds:0x0	100070d0: R_386_32	installKey
100070d4:	88 85 ca fc ff ff    	mov    BYTE PTR [ebp-0x336],al
100070da:	c6 85 cb fc ff ff 00 	mov    BYTE PTR [ebp-0x335],0x0
100070e1:	83 ec 0c             	sub    esp,0xc
100070e4:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
100070ea:	50                   	push   eax
100070eb:	e8 fc ff ff ff       	call   100070ec <begin(void*)+0x203d>	100070ec: R_386_PC32	strlen
100070f0:	83 c4 10             	add    esp,0x10
100070f3:	83 f8 22             	cmp    eax,0x22
100070f6:	77 6f                	ja     10007167 <begin(void*)+0x20b8>
100070f8:	83 ec 08             	sub    esp,0x8
100070fb:	8d 85 ca fc ff ff    	lea    eax,[ebp-0x336]
10007101:	50                   	push   eax
10007102:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10007108:	50                   	push   eax
10007109:	e8 fc ff ff ff       	call   1000710a <begin(void*)+0x205b>	1000710a: R_386_PC32	strcat
1000710e:	83 c4 10             	add    esp,0x10
10007111:	eb 54                	jmp    10007167 <begin(void*)+0x20b8>
10007113:	a0 00 00 00 00       	mov    al,ds:0x0	10007114: R_386_32	installKey
10007118:	3c 08                	cmp    al,0x8
1000711a:	0f 94 c0             	sete   al
1000711d:	84 c0                	test   al,al
1000711f:	74 33                	je     10007154 <begin(void*)+0x20a5>
10007121:	83 ec 0c             	sub    esp,0xc
10007124:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
1000712a:	50                   	push   eax
1000712b:	e8 fc ff ff ff       	call   1000712c <begin(void*)+0x207d>	1000712c: R_386_PC32	strlen
10007130:	83 c4 10             	add    esp,0x10
10007133:	85 c0                	test   eax,eax
10007135:	74 30                	je     10007167 <begin(void*)+0x20b8>
10007137:	83 ec 0c             	sub    esp,0xc
1000713a:	8d 85 4a fa ff ff    	lea    eax,[ebp-0x5b6]
10007140:	50                   	push   eax
10007141:	e8 fc ff ff ff       	call   10007142 <begin(void*)+0x2093>	10007142: R_386_PC32	strlen
10007146:	83 c4 10             	add    esp,0x10
10007149:	48                   	dec    eax
1000714a:	c6 84 05 4a fa ff ff 00 	mov    BYTE PTR [ebp+eax*1-0x5b6],0x0
10007152:	eb 13                	jmp    10007167 <begin(void*)+0x20b8>
10007154:	a0 00 00 00 00       	mov    al,ds:0x0	10007155: R_386_32	installKey
10007159:	3c 1b                	cmp    al,0x1b
1000715b:	0f 94 c0             	sete   al
1000715e:	84 c0                	test   al,al
10007160:	74 05                	je     10007167 <begin(void*)+0x20b8>
10007162:	e9 c7 f8 ff ff       	jmp    10006a2e <begin(void*)+0x197f>
10007167:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10007169: R_386_32	installKey
1000716e:	e9 5b fd ff ff       	jmp    10006ece <begin(void*)+0x1e1f>
10007173:	90                   	nop
10007174:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10007176: R_386_32	guiKeyboardHandler
1000717e:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x0
10007185:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007188:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
1000718b:	7d 69                	jge    100071f6 <begin(void*)+0x2147>
1000718d:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10007190:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
10007197:	85 c0                	test   eax,eax
10007199:	74 24                	je     100071bf <begin(void*)+0x2110>
1000719b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
1000719e:	8b 84 85 48 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x6b8]
100071a5:	83 ec 0c             	sub    esp,0xc
100071a8:	50                   	push   eax
100071a9:	e8 fc ff ff ff       	call   100071aa <begin(void*)+0x20fb>	100071aa: R_386_PC32	free
100071ae:	83 c4 10             	add    esp,0x10
100071b1:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100071b4:	c7 84 85 48 f9 ff ff 00 00 00 00 	mov    DWORD PTR [ebp+eax*4-0x6b8],0x0
100071bf:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100071c2:	8b 84 85 c8 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x638]
100071c9:	85 c0                	test   eax,eax
100071cb:	74 24                	je     100071f1 <begin(void*)+0x2142>
100071cd:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100071d0:	8b 84 85 c8 f9 ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x638]
100071d7:	83 ec 0c             	sub    esp,0xc
100071da:	50                   	push   eax
100071db:	e8 fc ff ff ff       	call   100071dc <begin(void*)+0x212d>	100071dc: R_386_PC32	free
100071e0:	83 c4 10             	add    esp,0x10
100071e3:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100071e6:	c7 84 85 c8 f9 ff ff 00 00 00 00 	mov    DWORD PTR [ebp+eax*4-0x638],0x0
100071f1:	ff 45 c4             	inc    DWORD PTR [ebp-0x3c]
100071f4:	eb 8f                	jmp    10007185 <begin(void*)+0x20d6>
100071f6:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100071f8: R_386_32	VgaText::hiddenOut
100071fd:	83 ec 0c             	sub    esp,0xc
10007200:	68 24 07 00 00       	push   0x724
10007205:	e8 fc ff ff ff       	call   10007206 <begin(void*)+0x2157>	10007206: R_386_PC32	operator new(unsigned long)
1000720a:	83 c4 10             	add    esp,0x10
1000720d:	89 c3                	mov    ebx,eax
1000720f:	6a 00                	push   0x0
10007211:	6a 00                	push   0x0
10007213:	68 fe ac 00 10       	push   0x1000acfe	10007214: R_386_32	.text
10007218:	53                   	push   ebx
10007219:	e8 fc ff ff ff       	call   1000721a <begin(void*)+0x216b>	1000721a: R_386_PC32	Process::Process(char const*, Process*, char**)
1000721e:	83 c4 10             	add    esp,0x10
10007221:	89 5d b0             	mov    DWORD PTR [ebp-0x50],ebx
10007224:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
10007227:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
1000722d:	83 ec 0c             	sub    esp,0xc
10007230:	50                   	push   eax
10007231:	e8 fc ff ff ff       	call   10007232 <begin(void*)+0x2183>	10007232: R_386_PC32	setActiveTerminal(VgaText*)
10007236:	83 c4 10             	add    esp,0x10
10007239:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [ebp-0x40],0x0
10007240:	83 7d c0 18          	cmp    DWORD PTR [ebp-0x40],0x18
10007244:	7f 2e                	jg     10007274 <begin(void*)+0x21c5>
10007246:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [ebp-0x44],0x0
1000724d:	83 7d bc 4f          	cmp    DWORD PTR [ebp-0x44],0x4f
10007251:	7f 1c                	jg     1000726f <begin(void*)+0x21c0>
10007253:	83 ec 0c             	sub    esp,0xc
10007256:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10007259:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
1000725c:	6a 00                	push   0x0
1000725e:	6a 07                	push   0x7
10007260:	6a 20                	push   0x20
10007262:	e8 fc ff ff ff       	call   10007263 <begin(void*)+0x21b4>	10007263: R_386_PC32	HalConsoleWriteCharacter(char, int, int, int, int)
10007267:	83 c4 20             	add    esp,0x20
1000726a:	ff 45 bc             	inc    DWORD PTR [ebp-0x44]
1000726d:	eb de                	jmp    1000724d <begin(void*)+0x219e>
1000726f:	ff 45 c0             	inc    DWORD PTR [ebp-0x40]
10007272:	eb cc                	jmp    10007240 <begin(void*)+0x2191>
10007274:	83 ec 0c             	sub    esp,0xc
10007277:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
1000727a:	e8 fc ff ff ff       	call   1000727b <begin(void*)+0x21cc>	1000727b: R_386_PC32	Process::createUserThread()
1000727f:	83 c4 10             	add    esp,0x10
10007282:	8b 85 d0 fc ff ff    	mov    eax,DWORD PTR [ebp-0x330]
10007288:	8b 95 d4 fc ff ff    	mov    edx,DWORD PTR [ebp-0x32c]
1000728e:	89 c6                	mov    esi,eax
10007290:	83 f6 01             	xor    esi,0x1
10007293:	89 b5 a0 f8 ff ff    	mov    DWORD PTR [ebp-0x760],esi
10007299:	89 d0                	mov    eax,edx
1000729b:	80 f4 00             	xor    ah,0x0
1000729e:	89 85 a4 f8 ff ff    	mov    DWORD PTR [ebp-0x75c],eax
100072a4:	8b b5 a0 f8 ff ff    	mov    esi,DWORD PTR [ebp-0x760]
100072aa:	8b bd a4 f8 ff ff    	mov    edi,DWORD PTR [ebp-0x75c]
100072b0:	89 f8                	mov    eax,edi
100072b2:	09 f0                	or     eax,esi
100072b4:	85 c0                	test   eax,eax
100072b6:	75 17                	jne    100072cf <begin(void*)+0x2220>
100072b8:	a1 00 00 00 00       	mov    eax,ds:0x0	100072b9: R_386_32	kernelProcess
100072bd:	6a 01                	push   0x1
100072bf:	6a 00                	push   0x0
100072c1:	68 00 00 00 00       	push   0x0	100072c2: R_386_32	startGUI(void*)
100072c6:	50                   	push   eax
100072c7:	e8 fc ff ff ff       	call   100072c8 <begin(void*)+0x2219>	100072c8: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
100072cc:	83 c4 10             	add    esp,0x10
100072cf:	8b 85 d0 fc ff ff    	mov    eax,DWORD PTR [ebp-0x330]
100072d5:	8b 95 d4 fc ff ff    	mov    edx,DWORD PTR [ebp-0x32c]
100072db:	89 c7                	mov    edi,eax
100072dd:	83 f7 02             	xor    edi,0x2
100072e0:	89 bd 98 f8 ff ff    	mov    DWORD PTR [ebp-0x768],edi
100072e6:	89 d0                	mov    eax,edx
100072e8:	80 f4 00             	xor    ah,0x0
100072eb:	89 85 9c f8 ff ff    	mov    DWORD PTR [ebp-0x764],eax
100072f1:	8b b5 98 f8 ff ff    	mov    esi,DWORD PTR [ebp-0x768]
100072f7:	8b bd 9c f8 ff ff    	mov    edi,DWORD PTR [ebp-0x764]
100072fd:	89 f8                	mov    eax,edi
100072ff:	09 f0                	or     eax,esi
10007301:	85 c0                	test   eax,eax
10007303:	75 17                	jne    1000731c <begin(void*)+0x226d>
10007305:	a1 00 00 00 00       	mov    eax,ds:0x0	10007306: R_386_32	kernelProcess
1000730a:	6a 01                	push   0x1
1000730c:	6a 00                	push   0x0
1000730e:	68 00 00 00 00       	push   0x0	1000730f: R_386_32	startGUIVESA(void*)
10007313:	50                   	push   eax
10007314:	e8 fc ff ff ff       	call   10007315 <begin(void*)+0x2266>	10007315: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10007319:	83 c4 10             	add    esp,0x10
1000731c:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
1000731f:	8b 00                	mov    eax,DWORD PTR [eax]
10007321:	83 ec 04             	sub    esp,0x4
10007324:	6a 00                	push   0x0
10007326:	8d 95 cc fc ff ff    	lea    edx,[ebp-0x334]
1000732c:	52                   	push   edx
1000732d:	50                   	push   eax
1000732e:	e8 fc ff ff ff       	call   1000732f <begin(void*)+0x2280>	1000732f: R_386_PC32	waitTask(int, int*, int)
10007333:	83 c4 10             	add    esp,0x10
10007336:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10007338: R_386_32	Krnl::computer
1000733c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000733d: R_386_32	Krnl::computer
10007341:	8b 00                	mov    eax,DWORD PTR [eax]
10007343:	83 c0 0c             	add    eax,0xc
10007346:	8b 00                	mov    eax,DWORD PTR [eax]
10007348:	6a 00                	push   0x0
1000734a:	6a 00                	push   0x0
1000734c:	6a 00                	push   0x0
1000734e:	52                   	push   edx
1000734f:	ff d0                	call   eax
10007351:	83 c4 10             	add    esp,0x10
10007354:	83 ec 0c             	sub    esp,0xc
10007357:	68 ac b2 00 10       	push   0x1000b2ac	10007358: R_386_32	.text
1000735c:	e8 fc ff ff ff       	call   1000735d <begin(void*)+0x22ae>	1000735d: R_386_PC32	KePanic(char const*)
10007361:	83 c4 10             	add    esp,0x10
10007364:	eb fe                	jmp    10007364 <begin(void*)+0x22b5>

10007366 <clean>:
10007366:	57                   	push   edi
10007367:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
1000736b:	b0 00                	mov    al,0x0
1000736d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10007371:	f3 aa                	rep stos BYTE PTR es:[edi],al
10007373:	5f                   	pop    edi
10007374:	c3                   	ret    

10007375 <BF_decode>:
10007375:	55                   	push   ebp
10007376:	57                   	push   edi
10007377:	56                   	push   esi
10007378:	53                   	push   ebx
10007379:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
1000737d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10007381:	89 d6                	mov    esi,edx
10007383:	03 74 24 1c          	add    esi,DWORD PTR [esp+0x1c]
10007387:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
1000738a:	83 e8 20             	sub    eax,0x20
1000738d:	83 f8 5f             	cmp    eax,0x5f
10007390:	0f 87 a3 00 00 00    	ja     10007439 <BF_decode+0xc4>
10007396:	8a 80 a0 c4 00 10    	mov    al,BYTE PTR [eax+0x1000c4a0]	10007398: R_386_32	.data
1000739c:	3c 3f                	cmp    al,0x3f
1000739e:	0f 87 9f 00 00 00    	ja     10007443 <BF_decode+0xce>
100073a4:	0f b6 4b 01          	movzx  ecx,BYTE PTR [ebx+0x1]
100073a8:	83 e9 20             	sub    ecx,0x20
100073ab:	83 f9 5f             	cmp    ecx,0x5f
100073ae:	0f 87 96 00 00 00    	ja     1000744a <BF_decode+0xd5>
100073b4:	8a 89 a0 c4 00 10    	mov    cl,BYTE PTR [ecx+0x1000c4a0]	100073b6: R_386_32	.data
100073ba:	0f b6 f9             	movzx  edi,cl
100073bd:	83 ff 3f             	cmp    edi,0x3f
100073c0:	0f 87 8b 00 00 00    	ja     10007451 <BF_decode+0xdc>
100073c6:	c1 e0 02             	shl    eax,0x2
100073c9:	c1 ef 04             	shr    edi,0x4
100073cc:	09 f8                	or     eax,edi
100073ce:	88 02                	mov    BYTE PTR [edx],al
100073d0:	89 d7                	mov    edi,edx
100073d2:	8d 42 01             	lea    eax,[edx+0x1]
100073d5:	39 c6                	cmp    esi,eax
100073d7:	76 7f                	jbe    10007458 <BF_decode+0xe3>
100073d9:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
100073dd:	83 e8 20             	sub    eax,0x20
100073e0:	83 f8 5f             	cmp    eax,0x5f
100073e3:	77 7a                	ja     1000745f <BF_decode+0xea>
100073e5:	8a 80 a0 c4 00 10    	mov    al,BYTE PTR [eax+0x1000c4a0]	100073e7: R_386_32	.data
100073eb:	0f b6 e8             	movzx  ebp,al
100073ee:	83 fd 3f             	cmp    ebp,0x3f
100073f1:	77 73                	ja     10007466 <BF_decode+0xf1>
100073f3:	c1 e1 04             	shl    ecx,0x4
100073f6:	c1 ed 02             	shr    ebp,0x2
100073f9:	09 e9                	or     ecx,ebp
100073fb:	88 4a 01             	mov    BYTE PTR [edx+0x1],cl
100073fe:	8d 52 02             	lea    edx,[edx+0x2]
10007401:	39 d6                	cmp    esi,edx
10007403:	76 68                	jbe    1000746d <BF_decode+0xf8>
10007405:	83 c3 04             	add    ebx,0x4
10007408:	0f b6 53 ff          	movzx  edx,BYTE PTR [ebx-0x1]
1000740c:	83 ea 20             	sub    edx,0x20
1000740f:	83 fa 5f             	cmp    edx,0x5f
10007412:	77 60                	ja     10007474 <BF_decode+0xff>
10007414:	8a 8a a0 c4 00 10    	mov    cl,BYTE PTR [edx+0x1000c4a0]	10007416: R_386_32	.data
1000741a:	80 f9 3f             	cmp    cl,0x3f
1000741d:	77 5c                	ja     1000747b <BF_decode+0x106>
1000741f:	8d 57 03             	lea    edx,[edi+0x3]
10007422:	c1 e0 06             	shl    eax,0x6
10007425:	09 c1                	or     ecx,eax
10007427:	88 4a ff             	mov    BYTE PTR [edx-0x1],cl
1000742a:	39 d6                	cmp    esi,edx
1000742c:	0f 87 55 ff ff ff    	ja     10007387 <BF_decode+0x12>
10007432:	b8 00 00 00 00       	mov    eax,0x0
10007437:	eb 05                	jmp    1000743e <BF_decode+0xc9>
10007439:	b8 ff ff ff ff       	mov    eax,0xffffffff
1000743e:	5b                   	pop    ebx
1000743f:	5e                   	pop    esi
10007440:	5f                   	pop    edi
10007441:	5d                   	pop    ebp
10007442:	c3                   	ret    
10007443:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007448:	eb f4                	jmp    1000743e <BF_decode+0xc9>
1000744a:	b8 ff ff ff ff       	mov    eax,0xffffffff
1000744f:	eb ed                	jmp    1000743e <BF_decode+0xc9>
10007451:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007456:	eb e6                	jmp    1000743e <BF_decode+0xc9>
10007458:	b8 00 00 00 00       	mov    eax,0x0
1000745d:	eb df                	jmp    1000743e <BF_decode+0xc9>
1000745f:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007464:	eb d8                	jmp    1000743e <BF_decode+0xc9>
10007466:	b8 ff ff ff ff       	mov    eax,0xffffffff
1000746b:	eb d1                	jmp    1000743e <BF_decode+0xc9>
1000746d:	b8 00 00 00 00       	mov    eax,0x0
10007472:	eb ca                	jmp    1000743e <BF_decode+0xc9>
10007474:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007479:	eb c3                	jmp    1000743e <BF_decode+0xc9>
1000747b:	b8 ff ff ff ff       	mov    eax,0xffffffff
10007480:	eb bc                	jmp    1000743e <BF_decode+0xc9>

10007482 <BF_encode>:
10007482:	55                   	push   ebp
10007483:	57                   	push   edi
10007484:	56                   	push   esi
10007485:	53                   	push   ebx
10007486:	83 ec 04             	sub    esp,0x4
10007489:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
1000748d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10007491:	89 c7                	mov    edi,eax
10007493:	03 7c 24 20          	add    edi,DWORD PTR [esp+0x20]
10007497:	89 3c 24             	mov    DWORD PTR [esp],edi
1000749a:	0f b6 10             	movzx  edx,BYTE PTR [eax]
1000749d:	89 d6                	mov    esi,edx
1000749f:	c1 ee 02             	shr    esi,0x2
100074a2:	8a 9e 40 c4 00 10    	mov    bl,BYTE PTR [esi+0x1000c440]	100074a4: R_386_32	.data
100074a8:	88 19                	mov    BYTE PTR [ecx],bl
100074aa:	c1 e2 04             	shl    edx,0x4
100074ad:	83 e2 30             	and    edx,0x30
100074b0:	89 c7                	mov    edi,eax
100074b2:	8d 70 01             	lea    esi,[eax+0x1]
100074b5:	39 34 24             	cmp    DWORD PTR [esp],esi
100074b8:	76 51                	jbe    1000750b <BF_encode+0x89>
100074ba:	0f b6 70 01          	movzx  esi,BYTE PTR [eax+0x1]
100074be:	89 f5                	mov    ebp,esi
100074c0:	c1 ed 04             	shr    ebp,0x4
100074c3:	09 ea                	or     edx,ebp
100074c5:	8a 9a 40 c4 00 10    	mov    bl,BYTE PTR [edx+0x1000c440]	100074c7: R_386_32	.data
100074cb:	88 59 01             	mov    BYTE PTR [ecx+0x1],bl
100074ce:	c1 e6 02             	shl    esi,0x2
100074d1:	83 e6 3c             	and    esi,0x3c
100074d4:	83 c0 02             	add    eax,0x2
100074d7:	39 04 24             	cmp    DWORD PTR [esp],eax
100074da:	76 40                	jbe    1000751c <BF_encode+0x9a>
100074dc:	8d 47 03             	lea    eax,[edi+0x3]
100074df:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
100074e2:	0f b6 d3             	movzx  edx,bl
100074e5:	c1 ea 06             	shr    edx,0x6
100074e8:	09 f2                	or     edx,esi
100074ea:	8a 92 40 c4 00 10    	mov    dl,BYTE PTR [edx+0x1000c440]	100074ec: R_386_32	.data
100074f0:	88 51 02             	mov    BYTE PTR [ecx+0x2],dl
100074f3:	83 c1 04             	add    ecx,0x4
100074f6:	89 da                	mov    edx,ebx
100074f8:	83 e2 3f             	and    edx,0x3f
100074fb:	8a 9a 40 c4 00 10    	mov    bl,BYTE PTR [edx+0x1000c440]	100074fd: R_386_32	.data
10007501:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
10007504:	39 04 24             	cmp    DWORD PTR [esp],eax
10007507:	77 91                	ja     1000749a <BF_encode+0x18>
10007509:	eb 09                	jmp    10007514 <BF_encode+0x92>
1000750b:	8a 82 40 c4 00 10    	mov    al,BYTE PTR [edx+0x1000c440]	1000750d: R_386_32	.data
10007511:	88 41 01             	mov    BYTE PTR [ecx+0x1],al
10007514:	83 c4 04             	add    esp,0x4
10007517:	5b                   	pop    ebx
10007518:	5e                   	pop    esi
10007519:	5f                   	pop    edi
1000751a:	5d                   	pop    ebp
1000751b:	c3                   	ret    
1000751c:	8a 86 40 c4 00 10    	mov    al,BYTE PTR [esi+0x1000c440]	1000751e: R_386_32	.data
10007522:	88 41 02             	mov    BYTE PTR [ecx+0x2],al
10007525:	eb ed                	jmp    10007514 <BF_encode+0x92>

10007527 <BF_swap>:
10007527:	53                   	push   ebx
10007528:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
1000752c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10007530:	80 3d 00 c5 00 10 00 	cmp    BYTE PTR ds:0x1000c500,0x0	10007532: R_386_32	.data
10007537:	74 23                	je     1000755c <BF_swap+0x35>
10007539:	8b 01                	mov    eax,DWORD PTR [ecx]
1000753b:	c1 c0 10             	rol    eax,0x10
1000753e:	83 c1 04             	add    ecx,0x4
10007541:	89 c2                	mov    edx,eax
10007543:	c1 e2 08             	shl    edx,0x8
10007546:	81 e2 00 ff 00 ff    	and    edx,0xff00ff00
1000754c:	c1 e8 08             	shr    eax,0x8
1000754f:	25 ff 00 ff 00       	and    eax,0xff00ff
10007554:	09 d0                	or     eax,edx
10007556:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
10007559:	4b                   	dec    ebx
1000755a:	75 dd                	jne    10007539 <BF_swap+0x12>
1000755c:	5b                   	pop    ebx
1000755d:	c3                   	ret    

1000755e <BF_set_key>:
1000755e:	55                   	push   ebp
1000755f:	57                   	push   edi
10007560:	56                   	push   esi
10007561:	53                   	push   ebx
10007562:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10007566:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
1000756a:	89 f9                	mov    ecx,edi
1000756c:	be 00 00 00 00       	mov    esi,0x0
10007571:	eb 2d                	jmp    100075a0 <BF_set_key+0x42>
10007573:	89 f9                	mov    ecx,edi
10007575:	4a                   	dec    edx
10007576:	74 10                	je     10007588 <BF_set_key+0x2a>
10007578:	c1 e0 08             	shl    eax,0x8
1000757b:	0f b6 19             	movzx  ebx,BYTE PTR [ecx]
1000757e:	09 d8                	or     eax,ebx
10007580:	80 39 00             	cmp    BYTE PTR [ecx],0x0
10007583:	74 ee                	je     10007573 <BF_set_key+0x15>
10007585:	41                   	inc    ecx
10007586:	eb ed                	jmp    10007575 <BF_set_key+0x17>
10007588:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
1000758c:	89 04 b2             	mov    DWORD PTR [edx+esi*4],eax
1000758f:	33 04 b5 e0 c3 00 10 	xor    eax,DWORD PTR [esi*4+0x1000c3e0]	10007592: R_386_32	.data
10007596:	89 44 b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],eax
1000759a:	46                   	inc    esi
1000759b:	83 fe 12             	cmp    esi,0x12
1000759e:	74 0c                	je     100075ac <BF_set_key+0x4e>
100075a0:	ba 04 00 00 00       	mov    edx,0x4
100075a5:	b8 00 00 00 00       	mov    eax,0x0
100075aa:	eb cc                	jmp    10007578 <BF_set_key+0x1a>
100075ac:	5b                   	pop    ebx
100075ad:	5e                   	pop    esi
100075ae:	5f                   	pop    edi
100075af:	5d                   	pop    ebp
100075b0:	c3                   	ret    

100075b1 <_crypt_blowfish_rn>:
100075b1:	55                   	push   ebp
100075b2:	57                   	push   edi
100075b3:	56                   	push   esi
100075b4:	53                   	push   ebx
100075b5:	81 ec 00 11 00 00    	sub    esp,0x1100
100075bb:	83 bc 24 20 11 00 00 3c 	cmp    DWORD PTR [esp+0x1120],0x3c
100075c3:	0f 8e 9e 2d 00 00    	jle    1000a367 <_crypt_blowfish_rn+0x2db6>
100075c9:	8b 84 24 18 11 00 00 	mov    eax,DWORD PTR [esp+0x1118]
100075d0:	80 38 24             	cmp    BYTE PTR [eax],0x24
100075d3:	0f 85 a8 2d 00 00    	jne    1000a381 <_crypt_blowfish_rn+0x2dd0>
100075d9:	80 78 01 32          	cmp    BYTE PTR [eax+0x1],0x32
100075dd:	0f 85 9e 2d 00 00    	jne    1000a381 <_crypt_blowfish_rn+0x2dd0>
100075e3:	80 78 02 61          	cmp    BYTE PTR [eax+0x2],0x61
100075e7:	0f 85 94 2d 00 00    	jne    1000a381 <_crypt_blowfish_rn+0x2dd0>
100075ed:	80 78 03 24          	cmp    BYTE PTR [eax+0x3],0x24
100075f1:	0f 85 8a 2d 00 00    	jne    1000a381 <_crypt_blowfish_rn+0x2dd0>
100075f7:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
100075fa:	8d 50 d0             	lea    edx,[eax-0x30]
100075fd:	80 fa 03             	cmp    dl,0x3
10007600:	0f 87 7b 2d 00 00    	ja     1000a381 <_crypt_blowfish_rn+0x2dd0>
10007606:	8b 9c 24 18 11 00 00 	mov    ebx,DWORD PTR [esp+0x1118]
1000760d:	8a 53 05             	mov    dl,BYTE PTR [ebx+0x5]
10007610:	8d 4a d0             	lea    ecx,[edx-0x30]
10007613:	80 f9 09             	cmp    cl,0x9
10007616:	0f 87 65 2d 00 00    	ja     1000a381 <_crypt_blowfish_rn+0x2dd0>
1000761c:	3c 33                	cmp    al,0x33
1000761e:	0f 84 54 2d 00 00    	je     1000a378 <_crypt_blowfish_rn+0x2dc7>
10007624:	8b 9c 24 18 11 00 00 	mov    ebx,DWORD PTR [esp+0x1118]
1000762b:	80 7b 06 24          	cmp    BYTE PTR [ebx+0x6],0x24
1000762f:	0f 85 4c 2d 00 00    	jne    1000a381 <_crypt_blowfish_rn+0x2dd0>
10007635:	0f be c0             	movsx  eax,al
10007638:	8d 84 80 10 ff ff ff 	lea    eax,[eax+eax*4-0xf0]
1000763f:	01 c0                	add    eax,eax
10007641:	0f be d2             	movsx  edx,dl
10007644:	8d 4c 10 d0          	lea    ecx,[eax+edx*1-0x30]
10007648:	b8 01 00 00 00       	mov    eax,0x1
1000764d:	d3 e0                	shl    eax,cl
1000764f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10007653:	83 f8 0f             	cmp    eax,0xf
10007656:	0f 86 3f 2d 00 00    	jbe    1000a39b <_crypt_blowfish_rn+0x2dea>
1000765c:	6a 10                	push   0x10
1000765e:	8b 84 24 1c 11 00 00 	mov    eax,DWORD PTR [esp+0x111c]
10007665:	83 c0 07             	add    eax,0x7
10007668:	50                   	push   eax
10007669:	8d 84 24 f0 10 00 00 	lea    eax,[esp+0x10f0]
10007670:	50                   	push   eax
10007671:	e8 ff fc ff ff       	call   10007375 <BF_decode>
10007676:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
1000767a:	83 c4 0c             	add    esp,0xc
1000767d:	85 c0                	test   eax,eax
1000767f:	0f 85 16 2d 00 00    	jne    1000a39b <_crypt_blowfish_rn+0x2dea>
10007685:	6a 04                	push   0x4
10007687:	8d 5c 24 5c          	lea    ebx,[esp+0x5c]
1000768b:	8d 84 24 ec 10 00 00 	lea    eax,[esp+0x10ec]
10007692:	50                   	push   eax
10007693:	e8 8f fe ff ff       	call   10007527 <BF_swap>
10007698:	8d 84 24 60 10 00 00 	lea    eax,[esp+0x1060]
1000769f:	50                   	push   eax
100076a0:	8d 84 24 ac 10 00 00 	lea    eax,[esp+0x10ac]
100076a7:	50                   	push   eax
100076a8:	ff b4 24 24 11 00 00 	push   DWORD PTR [esp+0x1124]
100076af:	e8 aa fe ff ff       	call   1000755e <BF_set_key>
100076b4:	be e0 b3 00 10       	mov    esi,0x1000b3e0	100076b5: R_386_32	.data
100076b9:	b9 00 04 00 00       	mov    ecx,0x400
100076be:	89 df                	mov    edi,ebx
100076c0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100076c2:	83 c4 14             	add    esp,0x14
100076c5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
100076c9:	89 04 24             	mov    DWORD PTR [esp],eax
100076cc:	bb 00 00 00 00       	mov    ebx,0x0
100076d1:	b8 00 00 00 00       	mov    eax,0x0
100076d6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
100076d9:	83 e1 02             	and    ecx,0x2
100076dc:	8d 91 24 04 00 00    	lea    edx,[ecx+0x424]
100076e2:	8b 54 94 58          	mov    edx,DWORD PTR [esp+edx*4+0x58]
100076e6:	33 94 24 58 10 00 00 	xor    edx,DWORD PTR [esp+0x1058]
100076ed:	31 c2                	xor    edx,eax
100076ef:	89 d7                	mov    edi,edx
100076f1:	c1 ef 06             	shr    edi,0x6
100076f4:	89 d5                	mov    ebp,edx
100076f6:	c1 ed 0e             	shr    ebp,0xe
100076f9:	89 d0                	mov    eax,edx
100076fb:	c1 e8 16             	shr    eax,0x16
100076fe:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007705:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000770b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007711:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007717:	25 fc 03 00 00       	and    eax,0x3fc
1000771c:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007720:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10007727:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
1000772e:	81 c1 25 04 00 00    	add    ecx,0x425
10007734:	8b 4c 8c 58          	mov    ecx,DWORD PTR [esp+ecx*4+0x58]
10007738:	33 8c 24 5c 10 00 00 	xor    ecx,DWORD PTR [esp+0x105c]
1000773f:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10007746:	31 c8                	xor    eax,ecx
10007748:	31 c3                	xor    ebx,eax
1000774a:	89 d8                	mov    eax,ebx
1000774c:	c1 e8 06             	shr    eax,0x6
1000774f:	89 c1                	mov    ecx,eax
10007751:	89 df                	mov    edi,ebx
10007753:	c1 ef 0e             	shr    edi,0xe
10007756:	89 d8                	mov    eax,ebx
10007758:	c1 e8 16             	shr    eax,0x16
1000775b:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10007762:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007768:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000776e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007774:	25 fc 03 00 00       	and    eax,0x3fc
10007779:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000777d:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
10007784:	33 84 0c 58 08 00 00 	xor    eax,DWORD PTR [esp+ecx*1+0x858]
1000778b:	33 94 24 60 10 00 00 	xor    edx,DWORD PTR [esp+0x1060]
10007792:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10007799:	89 c1                	mov    ecx,eax
1000779b:	31 d1                	xor    ecx,edx
1000779d:	89 ca                	mov    edx,ecx
1000779f:	c1 ea 06             	shr    edx,0x6
100077a2:	89 cf                	mov    edi,ecx
100077a4:	c1 ef 0e             	shr    edi,0xe
100077a7:	89 c8                	mov    eax,ecx
100077a9:	c1 e8 16             	shr    eax,0x16
100077ac:	8d 34 8d 00 00 00 00 	lea    esi,[ecx*4+0x0]
100077b3:	81 e6 fc 03 00 00    	and    esi,0x3fc
100077b9:	81 e2 fc 03 00 00    	and    edx,0x3fc
100077bf:	81 e7 fc 03 00 00    	and    edi,0x3fc
100077c5:	25 fc 03 00 00       	and    eax,0x3fc
100077ca:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100077ce:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
100077d5:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
100077dc:	33 9c 24 64 10 00 00 	xor    ebx,DWORD PTR [esp+0x1064]
100077e3:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100077ea:	89 c2                	mov    edx,eax
100077ec:	31 da                	xor    edx,ebx
100077ee:	89 d6                	mov    esi,edx
100077f0:	c1 ee 06             	shr    esi,0x6
100077f3:	89 d7                	mov    edi,edx
100077f5:	c1 ef 0e             	shr    edi,0xe
100077f8:	89 d0                	mov    eax,edx
100077fa:	c1 e8 16             	shr    eax,0x16
100077fd:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10007804:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000780a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007810:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007816:	25 fc 03 00 00       	and    eax,0x3fc
1000781b:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000781f:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
10007826:	33 84 34 58 08 00 00 	xor    eax,DWORD PTR [esp+esi*1+0x858]
1000782d:	33 8c 24 68 10 00 00 	xor    ecx,DWORD PTR [esp+0x1068]
10007834:	03 84 1c 58 0c 00 00 	add    eax,DWORD PTR [esp+ebx*1+0xc58]
1000783b:	31 c8                	xor    eax,ecx
1000783d:	89 c3                	mov    ebx,eax
1000783f:	c1 eb 06             	shr    ebx,0x6
10007842:	89 c7                	mov    edi,eax
10007844:	c1 ef 0e             	shr    edi,0xe
10007847:	89 c6                	mov    esi,eax
10007849:	c1 ee 16             	shr    esi,0x16
1000784c:	89 f1                	mov    ecx,esi
1000784e:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007855:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000785b:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007861:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007867:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000786d:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007871:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007878:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
1000787f:	33 94 24 6c 10 00 00 	xor    edx,DWORD PTR [esp+0x106c]
10007886:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000788d:	31 ca                	xor    edx,ecx
1000788f:	89 d6                	mov    esi,edx
10007891:	c1 ee 06             	shr    esi,0x6
10007894:	89 d7                	mov    edi,edx
10007896:	c1 ef 0e             	shr    edi,0xe
10007899:	89 d3                	mov    ebx,edx
1000789b:	c1 eb 16             	shr    ebx,0x16
1000789e:	89 d9                	mov    ecx,ebx
100078a0:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
100078a7:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100078ad:	81 e6 fc 03 00 00    	and    esi,0x3fc
100078b3:	81 e7 fc 03 00 00    	and    edi,0x3fc
100078b9:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100078bf:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100078c3:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100078ca:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
100078d1:	33 84 24 70 10 00 00 	xor    eax,DWORD PTR [esp+0x1070]
100078d8:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
100078df:	31 c8                	xor    eax,ecx
100078e1:	89 c6                	mov    esi,eax
100078e3:	c1 ee 06             	shr    esi,0x6
100078e6:	89 c7                	mov    edi,eax
100078e8:	c1 ef 0e             	shr    edi,0xe
100078eb:	89 c3                	mov    ebx,eax
100078ed:	c1 eb 16             	shr    ebx,0x16
100078f0:	89 d9                	mov    ecx,ebx
100078f2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
100078f9:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100078ff:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007905:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000790b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007911:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007915:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
1000791c:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007923:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
1000792a:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007931:	31 ca                	xor    edx,ecx
10007933:	89 d6                	mov    esi,edx
10007935:	c1 ee 06             	shr    esi,0x6
10007938:	89 d7                	mov    edi,edx
1000793a:	c1 ef 0e             	shr    edi,0xe
1000793d:	89 d3                	mov    ebx,edx
1000793f:	c1 eb 16             	shr    ebx,0x16
10007942:	89 d9                	mov    ecx,ebx
10007944:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
1000794b:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007951:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007957:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000795d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007963:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007967:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
1000796e:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007975:	33 84 24 78 10 00 00 	xor    eax,DWORD PTR [esp+0x1078]
1000797c:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007983:	31 c8                	xor    eax,ecx
10007985:	89 c6                	mov    esi,eax
10007987:	c1 ee 06             	shr    esi,0x6
1000798a:	89 c7                	mov    edi,eax
1000798c:	c1 ef 0e             	shr    edi,0xe
1000798f:	89 c3                	mov    ebx,eax
10007991:	c1 eb 16             	shr    ebx,0x16
10007994:	89 d9                	mov    ecx,ebx
10007996:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
1000799d:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100079a3:	81 e6 fc 03 00 00    	and    esi,0x3fc
100079a9:	81 e7 fc 03 00 00    	and    edi,0x3fc
100079af:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100079b5:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100079b9:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100079c0:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
100079c7:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
100079ce:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
100079d5:	31 ca                	xor    edx,ecx
100079d7:	89 d6                	mov    esi,edx
100079d9:	c1 ee 06             	shr    esi,0x6
100079dc:	89 d7                	mov    edi,edx
100079de:	c1 ef 0e             	shr    edi,0xe
100079e1:	89 d3                	mov    ebx,edx
100079e3:	c1 eb 16             	shr    ebx,0x16
100079e6:	89 d9                	mov    ecx,ebx
100079e8:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
100079ef:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100079f5:	81 e6 fc 03 00 00    	and    esi,0x3fc
100079fb:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007a01:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007a07:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007a0b:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007a12:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007a19:	33 84 24 80 10 00 00 	xor    eax,DWORD PTR [esp+0x1080]
10007a20:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007a27:	31 c8                	xor    eax,ecx
10007a29:	89 c6                	mov    esi,eax
10007a2b:	c1 ee 06             	shr    esi,0x6
10007a2e:	89 c7                	mov    edi,eax
10007a30:	c1 ef 0e             	shr    edi,0xe
10007a33:	89 c3                	mov    ebx,eax
10007a35:	c1 eb 16             	shr    ebx,0x16
10007a38:	89 d9                	mov    ecx,ebx
10007a3a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10007a41:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007a47:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007a4d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007a53:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007a59:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007a5d:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007a64:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007a6b:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
10007a72:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007a79:	31 ca                	xor    edx,ecx
10007a7b:	89 d6                	mov    esi,edx
10007a7d:	c1 ee 06             	shr    esi,0x6
10007a80:	89 d7                	mov    edi,edx
10007a82:	c1 ef 0e             	shr    edi,0xe
10007a85:	89 d3                	mov    ebx,edx
10007a87:	c1 eb 16             	shr    ebx,0x16
10007a8a:	89 d9                	mov    ecx,ebx
10007a8c:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10007a93:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007a99:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007a9f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007aa5:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007aab:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007aaf:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007ab6:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007abd:	33 84 24 88 10 00 00 	xor    eax,DWORD PTR [esp+0x1088]
10007ac4:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007acb:	31 c8                	xor    eax,ecx
10007acd:	89 c6                	mov    esi,eax
10007acf:	c1 ee 06             	shr    esi,0x6
10007ad2:	89 c7                	mov    edi,eax
10007ad4:	c1 ef 0e             	shr    edi,0xe
10007ad7:	89 c3                	mov    ebx,eax
10007ad9:	c1 eb 16             	shr    ebx,0x16
10007adc:	89 d9                	mov    ecx,ebx
10007ade:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10007ae5:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007aeb:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007af1:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007af7:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007afd:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007b01:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007b08:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007b0f:	33 94 24 8c 10 00 00 	xor    edx,DWORD PTR [esp+0x108c]
10007b16:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007b1d:	31 ca                	xor    edx,ecx
10007b1f:	89 d3                	mov    ebx,edx
10007b21:	c1 eb 06             	shr    ebx,0x6
10007b24:	89 d7                	mov    edi,edx
10007b26:	c1 ef 0e             	shr    edi,0xe
10007b29:	89 d6                	mov    esi,edx
10007b2b:	c1 ee 16             	shr    esi,0x16
10007b2e:	89 f1                	mov    ecx,esi
10007b30:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007b37:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007b3d:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007b43:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007b49:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007b4f:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007b53:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007b5a:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
10007b61:	33 84 24 90 10 00 00 	xor    eax,DWORD PTR [esp+0x1090]
10007b68:	89 cb                	mov    ebx,ecx
10007b6a:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007b71:	31 d8                	xor    eax,ebx
10007b73:	89 c6                	mov    esi,eax
10007b75:	c1 ee 06             	shr    esi,0x6
10007b78:	89 c7                	mov    edi,eax
10007b7a:	c1 ef 0e             	shr    edi,0xe
10007b7d:	89 c3                	mov    ebx,eax
10007b7f:	c1 eb 16             	shr    ebx,0x16
10007b82:	89 d9                	mov    ecx,ebx
10007b84:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10007b8b:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007b91:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007b97:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007b9d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007ba3:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007ba7:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007bae:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10007bb5:	33 94 24 94 10 00 00 	xor    edx,DWORD PTR [esp+0x1094]
10007bbc:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10007bc3:	31 ca                	xor    edx,ecx
10007bc5:	89 d3                	mov    ebx,edx
10007bc7:	c1 eb 06             	shr    ebx,0x6
10007bca:	89 d7                	mov    edi,edx
10007bcc:	c1 ef 0e             	shr    edi,0xe
10007bcf:	89 d6                	mov    esi,edx
10007bd1:	c1 ee 16             	shr    esi,0x16
10007bd4:	89 f1                	mov    ecx,esi
10007bd6:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007bdd:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007be3:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007be9:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007bef:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007bf5:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007bf9:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10007c00:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
10007c07:	33 84 24 98 10 00 00 	xor    eax,DWORD PTR [esp+0x1098]
10007c0e:	89 cb                	mov    ebx,ecx
10007c10:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007c17:	31 c3                	xor    ebx,eax
10007c19:	89 d0                	mov    eax,edx
10007c1b:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10007c22:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10007c25:	89 84 8c 58 10 00 00 	mov    DWORD PTR [esp+ecx*4+0x1058],eax
10007c2c:	89 9c 8c 5c 10 00 00 	mov    DWORD PTR [esp+ecx*4+0x105c],ebx
10007c33:	83 c1 02             	add    ecx,0x2
10007c36:	89 0c 24             	mov    DWORD PTR [esp],ecx
10007c39:	83 f9 12             	cmp    ecx,0x12
10007c3c:	0f 85 94 fa ff ff    	jne    100076d6 <_crypt_blowfish_rn+0x125>
10007c42:	8d 4c 24 58          	lea    ecx,[esp+0x58]
10007c46:	83 c1 10             	add    ecx,0x10
10007c49:	8b 94 24 f0 10 00 00 	mov    edx,DWORD PTR [esp+0x10f0]
10007c50:	33 94 24 58 10 00 00 	xor    edx,DWORD PTR [esp+0x1058]
10007c57:	31 c2                	xor    edx,eax
10007c59:	89 d7                	mov    edi,edx
10007c5b:	c1 ef 06             	shr    edi,0x6
10007c5e:	89 d5                	mov    ebp,edx
10007c60:	c1 ed 0e             	shr    ebp,0xe
10007c63:	89 d0                	mov    eax,edx
10007c65:	c1 e8 16             	shr    eax,0x16
10007c68:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007c6f:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007c75:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007c7b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007c81:	25 fc 03 00 00       	and    eax,0x3fc
10007c86:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007c8a:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10007c91:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10007c98:	89 c7                	mov    edi,eax
10007c9a:	8b 84 24 f4 10 00 00 	mov    eax,DWORD PTR [esp+0x10f4]
10007ca1:	33 84 24 5c 10 00 00 	xor    eax,DWORD PTR [esp+0x105c]
10007ca8:	03 bc 34 58 0c 00 00 	add    edi,DWORD PTR [esp+esi*1+0xc58]
10007caf:	31 f8                	xor    eax,edi
10007cb1:	31 d8                	xor    eax,ebx
10007cb3:	89 c7                	mov    edi,eax
10007cb5:	c1 ef 06             	shr    edi,0x6
10007cb8:	89 c5                	mov    ebp,eax
10007cba:	c1 ed 0e             	shr    ebp,0xe
10007cbd:	89 c3                	mov    ebx,eax
10007cbf:	c1 eb 16             	shr    ebx,0x16
10007cc2:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007cc9:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007ccf:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007cd5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007cdb:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007ce1:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007ce5:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007cec:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007cf3:	33 94 24 60 10 00 00 	xor    edx,DWORD PTR [esp+0x1060]
10007cfa:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007d01:	31 da                	xor    edx,ebx
10007d03:	89 d7                	mov    edi,edx
10007d05:	c1 ef 06             	shr    edi,0x6
10007d08:	89 d5                	mov    ebp,edx
10007d0a:	c1 ed 0e             	shr    ebp,0xe
10007d0d:	89 d3                	mov    ebx,edx
10007d0f:	c1 eb 16             	shr    ebx,0x16
10007d12:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007d19:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007d1f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007d25:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007d2b:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007d31:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007d35:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007d3c:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007d43:	33 84 24 64 10 00 00 	xor    eax,DWORD PTR [esp+0x1064]
10007d4a:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007d51:	31 d8                	xor    eax,ebx
10007d53:	89 c7                	mov    edi,eax
10007d55:	c1 ef 06             	shr    edi,0x6
10007d58:	89 c5                	mov    ebp,eax
10007d5a:	c1 ed 0e             	shr    ebp,0xe
10007d5d:	89 c3                	mov    ebx,eax
10007d5f:	c1 eb 16             	shr    ebx,0x16
10007d62:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007d69:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007d6f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007d75:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007d7b:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007d81:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007d85:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007d8c:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007d93:	33 94 24 68 10 00 00 	xor    edx,DWORD PTR [esp+0x1068]
10007d9a:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007da1:	31 da                	xor    edx,ebx
10007da3:	89 d7                	mov    edi,edx
10007da5:	c1 ef 06             	shr    edi,0x6
10007da8:	89 d5                	mov    ebp,edx
10007daa:	c1 ed 0e             	shr    ebp,0xe
10007dad:	89 d3                	mov    ebx,edx
10007daf:	c1 eb 16             	shr    ebx,0x16
10007db2:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007db9:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007dbf:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007dc5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007dcb:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007dd1:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007dd5:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007ddc:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007de3:	33 84 24 6c 10 00 00 	xor    eax,DWORD PTR [esp+0x106c]
10007dea:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007df1:	31 d8                	xor    eax,ebx
10007df3:	89 c7                	mov    edi,eax
10007df5:	c1 ef 06             	shr    edi,0x6
10007df8:	89 c5                	mov    ebp,eax
10007dfa:	c1 ed 0e             	shr    ebp,0xe
10007dfd:	89 c3                	mov    ebx,eax
10007dff:	c1 eb 16             	shr    ebx,0x16
10007e02:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007e09:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007e0f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007e15:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007e1b:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007e21:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007e25:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007e2c:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007e33:	33 94 24 70 10 00 00 	xor    edx,DWORD PTR [esp+0x1070]
10007e3a:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007e41:	31 da                	xor    edx,ebx
10007e43:	89 d7                	mov    edi,edx
10007e45:	c1 ef 06             	shr    edi,0x6
10007e48:	89 d5                	mov    ebp,edx
10007e4a:	c1 ed 0e             	shr    ebp,0xe
10007e4d:	89 d3                	mov    ebx,edx
10007e4f:	c1 eb 16             	shr    ebx,0x16
10007e52:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007e59:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007e5f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007e65:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007e6b:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007e71:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007e75:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007e7c:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007e83:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
10007e8a:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007e91:	31 d8                	xor    eax,ebx
10007e93:	89 c7                	mov    edi,eax
10007e95:	c1 ef 06             	shr    edi,0x6
10007e98:	89 c5                	mov    ebp,eax
10007e9a:	c1 ed 0e             	shr    ebp,0xe
10007e9d:	89 c3                	mov    ebx,eax
10007e9f:	c1 eb 16             	shr    ebx,0x16
10007ea2:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007ea9:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007eaf:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007eb5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007ebb:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007ec1:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007ec5:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007ecc:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007ed3:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
10007eda:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007ee1:	31 da                	xor    edx,ebx
10007ee3:	89 d7                	mov    edi,edx
10007ee5:	c1 ef 06             	shr    edi,0x6
10007ee8:	89 d5                	mov    ebp,edx
10007eea:	c1 ed 0e             	shr    ebp,0xe
10007eed:	89 d3                	mov    ebx,edx
10007eef:	c1 eb 16             	shr    ebx,0x16
10007ef2:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007ef9:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007eff:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007f05:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007f0b:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007f11:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007f15:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007f1c:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007f23:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
10007f2a:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007f31:	31 d8                	xor    eax,ebx
10007f33:	89 c7                	mov    edi,eax
10007f35:	c1 ef 06             	shr    edi,0x6
10007f38:	89 c5                	mov    ebp,eax
10007f3a:	c1 ed 0e             	shr    ebp,0xe
10007f3d:	89 c3                	mov    ebx,eax
10007f3f:	c1 eb 16             	shr    ebx,0x16
10007f42:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007f49:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007f4f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007f55:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007f5b:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007f61:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007f65:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007f6c:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007f73:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
10007f7a:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007f81:	31 da                	xor    edx,ebx
10007f83:	89 d7                	mov    edi,edx
10007f85:	c1 ef 06             	shr    edi,0x6
10007f88:	89 d5                	mov    ebp,edx
10007f8a:	c1 ed 0e             	shr    ebp,0xe
10007f8d:	89 d3                	mov    ebx,edx
10007f8f:	c1 eb 16             	shr    ebx,0x16
10007f92:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007f99:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007f9f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007fa5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007fab:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007fb1:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10007fb5:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007fbc:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10007fc3:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10007fca:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10007fd1:	31 d8                	xor    eax,ebx
10007fd3:	89 c7                	mov    edi,eax
10007fd5:	c1 ef 06             	shr    edi,0x6
10007fd8:	89 c5                	mov    ebp,eax
10007fda:	c1 ed 0e             	shr    ebp,0xe
10007fdd:	89 c3                	mov    ebx,eax
10007fdf:	c1 eb 16             	shr    ebx,0x16
10007fe2:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007fe9:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007fef:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007ff5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007ffb:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008001:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008005:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000800c:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008013:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
1000801a:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008021:	31 da                	xor    edx,ebx
10008023:	89 d7                	mov    edi,edx
10008025:	c1 ef 06             	shr    edi,0x6
10008028:	89 d5                	mov    ebp,edx
1000802a:	c1 ed 0e             	shr    ebp,0xe
1000802d:	89 d3                	mov    ebx,edx
1000802f:	c1 eb 16             	shr    ebx,0x16
10008032:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008039:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000803f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008045:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000804b:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008051:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008055:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000805c:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008063:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
1000806a:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008071:	31 d8                	xor    eax,ebx
10008073:	89 c7                	mov    edi,eax
10008075:	c1 ef 06             	shr    edi,0x6
10008078:	89 c5                	mov    ebp,eax
1000807a:	c1 ed 0e             	shr    ebp,0xe
1000807d:	89 c3                	mov    ebx,eax
1000807f:	c1 eb 16             	shr    ebx,0x16
10008082:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008089:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000808f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008095:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000809b:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100080a1:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100080a5:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100080ac:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100080b3:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
100080ba:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100080c1:	31 da                	xor    edx,ebx
100080c3:	89 d7                	mov    edi,edx
100080c5:	c1 ef 06             	shr    edi,0x6
100080c8:	89 d5                	mov    ebp,edx
100080ca:	c1 ed 0e             	shr    ebp,0xe
100080cd:	89 d3                	mov    ebx,edx
100080cf:	c1 eb 16             	shr    ebx,0x16
100080d2:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100080d9:	81 e6 fc 03 00 00    	and    esi,0x3fc
100080df:	81 e7 fc 03 00 00    	and    edi,0x3fc
100080e5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100080eb:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100080f1:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100080f5:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100080fc:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10008103:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
1000810a:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10008111:	31 d8                	xor    eax,ebx
10008113:	89 c6                	mov    esi,eax
10008115:	c1 ee 06             	shr    esi,0x6
10008118:	89 c5                	mov    ebp,eax
1000811a:	c1 ed 0e             	shr    ebp,0xe
1000811d:	89 c3                	mov    ebx,eax
1000811f:	c1 eb 16             	shr    ebx,0x16
10008122:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10008129:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000812f:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008135:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000813b:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008141:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10008145:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000814c:	33 9c 34 58 08 00 00 	xor    ebx,DWORD PTR [esp+esi*1+0x858]
10008153:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
1000815a:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
10008161:	31 da                	xor    edx,ebx
10008163:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
1000816a:	89 41 f0             	mov    DWORD PTR [ecx-0x10],eax
1000816d:	89 51 f4             	mov    DWORD PTR [ecx-0xc],edx
10008170:	8b 9c 24 e8 10 00 00 	mov    ebx,DWORD PTR [esp+0x10e8]
10008177:	33 9c 24 58 10 00 00 	xor    ebx,DWORD PTR [esp+0x1058]
1000817e:	31 d8                	xor    eax,ebx
10008180:	89 c5                	mov    ebp,eax
10008182:	c1 ed 06             	shr    ebp,0x6
10008185:	89 c6                	mov    esi,eax
10008187:	c1 ee 0e             	shr    esi,0xe
1000818a:	89 c3                	mov    ebx,eax
1000818c:	c1 eb 16             	shr    ebx,0x16
1000818f:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10008196:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000819c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100081a2:	81 e6 fc 03 00 00    	and    esi,0x3fc
100081a8:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100081ae:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100081b2:	03 9c 34 58 04 00 00 	add    ebx,DWORD PTR [esp+esi*1+0x458]
100081b9:	33 9c 2c 58 08 00 00 	xor    ebx,DWORD PTR [esp+ebp*1+0x858]
100081c0:	8b b4 24 ec 10 00 00 	mov    esi,DWORD PTR [esp+0x10ec]
100081c7:	33 b4 24 5c 10 00 00 	xor    esi,DWORD PTR [esp+0x105c]
100081ce:	31 f2                	xor    edx,esi
100081d0:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
100081d7:	89 de                	mov    esi,ebx
100081d9:	31 d6                	xor    esi,edx
100081db:	89 f5                	mov    ebp,esi
100081dd:	c1 ed 06             	shr    ebp,0x6
100081e0:	89 f3                	mov    ebx,esi
100081e2:	c1 eb 0e             	shr    ebx,0xe
100081e5:	89 f2                	mov    edx,esi
100081e7:	c1 ea 16             	shr    edx,0x16
100081ea:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
100081f1:	81 e7 fc 03 00 00    	and    edi,0x3fc
100081f7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100081fd:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10008203:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008209:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000820d:	03 94 1c 58 04 00 00 	add    edx,DWORD PTR [esp+ebx*1+0x458]
10008214:	33 94 2c 58 08 00 00 	xor    edx,DWORD PTR [esp+ebp*1+0x858]
1000821b:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10008222:	89 d3                	mov    ebx,edx
10008224:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
1000822b:	31 c3                	xor    ebx,eax
1000822d:	89 df                	mov    edi,ebx
1000822f:	c1 ef 06             	shr    edi,0x6
10008232:	89 dd                	mov    ebp,ebx
10008234:	c1 ed 0e             	shr    ebp,0xe
10008237:	89 da                	mov    edx,ebx
10008239:	c1 ea 16             	shr    edx,0x16
1000823c:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
10008243:	25 fc 03 00 00       	and    eax,0x3fc
10008248:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000824e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008254:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000825a:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000825e:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008265:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000826c:	33 b4 24 64 10 00 00 	xor    esi,DWORD PTR [esp+0x1064]
10008273:	03 94 04 58 0c 00 00 	add    edx,DWORD PTR [esp+eax*1+0xc58]
1000827a:	31 d6                	xor    esi,edx
1000827c:	89 f0                	mov    eax,esi
1000827e:	c1 e8 06             	shr    eax,0x6
10008281:	89 f5                	mov    ebp,esi
10008283:	c1 ed 0e             	shr    ebp,0xe
10008286:	89 f2                	mov    edx,esi
10008288:	c1 ea 16             	shr    edx,0x16
1000828b:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10008292:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008298:	25 fc 03 00 00       	and    eax,0x3fc
1000829d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100082a3:	81 e2 fc 03 00 00    	and    edx,0x3fc
100082a9:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100082ad:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100082b4:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
100082bb:	33 9c 24 68 10 00 00 	xor    ebx,DWORD PTR [esp+0x1068]
100082c2:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
100082c9:	31 d3                	xor    ebx,edx
100082cb:	89 dd                	mov    ebp,ebx
100082cd:	c1 ed 06             	shr    ebp,0x6
100082d0:	89 da                	mov    edx,ebx
100082d2:	c1 ea 0e             	shr    edx,0xe
100082d5:	89 d8                	mov    eax,ebx
100082d7:	c1 e8 16             	shr    eax,0x16
100082da:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
100082e1:	81 e7 fc 03 00 00    	and    edi,0x3fc
100082e7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100082ed:	81 e2 fc 03 00 00    	and    edx,0x3fc
100082f3:	25 fc 03 00 00       	and    eax,0x3fc
100082f8:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100082fc:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
10008303:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
1000830a:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
10008311:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008318:	89 c2                	mov    edx,eax
1000831a:	31 f2                	xor    edx,esi
1000831c:	89 d7                	mov    edi,edx
1000831e:	c1 ef 06             	shr    edi,0x6
10008321:	89 d5                	mov    ebp,edx
10008323:	c1 ed 0e             	shr    ebp,0xe
10008326:	89 d0                	mov    eax,edx
10008328:	c1 e8 16             	shr    eax,0x16
1000832b:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008332:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008338:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000833e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008344:	25 fc 03 00 00       	and    eax,0x3fc
10008349:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000834d:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008354:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
1000835b:	33 9c 24 70 10 00 00 	xor    ebx,DWORD PTR [esp+0x1070]
10008362:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008369:	31 c3                	xor    ebx,eax
1000836b:	89 df                	mov    edi,ebx
1000836d:	c1 ef 06             	shr    edi,0x6
10008370:	89 dd                	mov    ebp,ebx
10008372:	c1 ed 0e             	shr    ebp,0xe
10008375:	89 d8                	mov    eax,ebx
10008377:	c1 e8 16             	shr    eax,0x16
1000837a:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10008381:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008387:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000838d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008393:	25 fc 03 00 00       	and    eax,0x3fc
10008398:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000839c:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100083a3:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100083aa:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
100083b1:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100083b8:	31 c2                	xor    edx,eax
100083ba:	89 d7                	mov    edi,edx
100083bc:	c1 ef 06             	shr    edi,0x6
100083bf:	89 d5                	mov    ebp,edx
100083c1:	c1 ed 0e             	shr    ebp,0xe
100083c4:	89 d0                	mov    eax,edx
100083c6:	c1 e8 16             	shr    eax,0x16
100083c9:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100083d0:	81 e6 fc 03 00 00    	and    esi,0x3fc
100083d6:	81 e7 fc 03 00 00    	and    edi,0x3fc
100083dc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100083e2:	25 fc 03 00 00       	and    eax,0x3fc
100083e7:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100083eb:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100083f2:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100083f9:	33 9c 24 78 10 00 00 	xor    ebx,DWORD PTR [esp+0x1078]
10008400:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008407:	31 c3                	xor    ebx,eax
10008409:	89 df                	mov    edi,ebx
1000840b:	c1 ef 06             	shr    edi,0x6
1000840e:	89 dd                	mov    ebp,ebx
10008410:	c1 ed 0e             	shr    ebp,0xe
10008413:	89 d8                	mov    eax,ebx
10008415:	c1 e8 16             	shr    eax,0x16
10008418:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
1000841f:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008425:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000842b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008431:	25 fc 03 00 00       	and    eax,0x3fc
10008436:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000843a:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008441:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008448:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
1000844f:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10008456:	31 c2                	xor    edx,eax
10008458:	89 d7                	mov    edi,edx
1000845a:	c1 ef 06             	shr    edi,0x6
1000845d:	89 d5                	mov    ebp,edx
1000845f:	c1 ed 0e             	shr    ebp,0xe
10008462:	89 d0                	mov    eax,edx
10008464:	c1 e8 16             	shr    eax,0x16
10008467:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000846e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008474:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000847a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008480:	25 fc 03 00 00       	and    eax,0x3fc
10008485:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008489:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008490:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008497:	33 9c 24 80 10 00 00 	xor    ebx,DWORD PTR [esp+0x1080]
1000849e:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100084a5:	31 c3                	xor    ebx,eax
100084a7:	89 df                	mov    edi,ebx
100084a9:	c1 ef 06             	shr    edi,0x6
100084ac:	89 dd                	mov    ebp,ebx
100084ae:	c1 ed 0e             	shr    ebp,0xe
100084b1:	89 d8                	mov    eax,ebx
100084b3:	c1 e8 16             	shr    eax,0x16
100084b6:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
100084bd:	81 e6 fc 03 00 00    	and    esi,0x3fc
100084c3:	81 e7 fc 03 00 00    	and    edi,0x3fc
100084c9:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100084cf:	25 fc 03 00 00       	and    eax,0x3fc
100084d4:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100084d8:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100084df:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100084e6:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
100084ed:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100084f4:	31 d0                	xor    eax,edx
100084f6:	89 c7                	mov    edi,eax
100084f8:	c1 ef 06             	shr    edi,0x6
100084fb:	89 c5                	mov    ebp,eax
100084fd:	c1 ed 0e             	shr    ebp,0xe
10008500:	89 c2                	mov    edx,eax
10008502:	c1 ea 16             	shr    edx,0x16
10008505:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000850c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008512:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008518:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000851e:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008524:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008528:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000852f:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008536:	33 9c 24 88 10 00 00 	xor    ebx,DWORD PTR [esp+0x1088]
1000853d:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008544:	31 d3                	xor    ebx,edx
10008546:	89 df                	mov    edi,ebx
10008548:	c1 ef 06             	shr    edi,0x6
1000854b:	89 dd                	mov    ebp,ebx
1000854d:	c1 ed 0e             	shr    ebp,0xe
10008550:	89 da                	mov    edx,ebx
10008552:	c1 ea 16             	shr    edx,0x16
10008555:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
1000855c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008562:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008568:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000856e:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008574:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008578:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000857f:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008586:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
1000858d:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008594:	31 d0                	xor    eax,edx
10008596:	89 c7                	mov    edi,eax
10008598:	c1 ef 06             	shr    edi,0x6
1000859b:	89 c5                	mov    ebp,eax
1000859d:	c1 ed 0e             	shr    ebp,0xe
100085a0:	89 c2                	mov    edx,eax
100085a2:	c1 ea 16             	shr    edx,0x16
100085a5:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100085ac:	81 e6 fc 03 00 00    	and    esi,0x3fc
100085b2:	81 e7 fc 03 00 00    	and    edi,0x3fc
100085b8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100085be:	81 e2 fc 03 00 00    	and    edx,0x3fc
100085c4:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100085c8:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100085cf:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100085d6:	33 9c 24 90 10 00 00 	xor    ebx,DWORD PTR [esp+0x1090]
100085dd:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
100085e4:	31 d3                	xor    ebx,edx
100085e6:	89 df                	mov    edi,ebx
100085e8:	c1 ef 06             	shr    edi,0x6
100085eb:	89 dd                	mov    ebp,ebx
100085ed:	c1 ed 0e             	shr    ebp,0xe
100085f0:	89 da                	mov    edx,ebx
100085f2:	c1 ea 16             	shr    edx,0x16
100085f5:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
100085fc:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008602:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008608:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000860e:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008614:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008618:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000861f:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008626:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
1000862d:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008634:	31 d0                	xor    eax,edx
10008636:	89 c7                	mov    edi,eax
10008638:	c1 ef 06             	shr    edi,0x6
1000863b:	89 c5                	mov    ebp,eax
1000863d:	c1 ed 0e             	shr    ebp,0xe
10008640:	89 c2                	mov    edx,eax
10008642:	c1 ea 16             	shr    edx,0x16
10008645:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000864c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008652:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008658:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000865e:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008664:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008668:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000866f:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008676:	33 9c 24 98 10 00 00 	xor    ebx,DWORD PTR [esp+0x1098]
1000867d:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008684:	31 d3                	xor    ebx,edx
10008686:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
1000868d:	89 41 f8             	mov    DWORD PTR [ecx-0x8],eax
10008690:	89 59 fc             	mov    DWORD PTR [ecx-0x4],ebx
10008693:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
1000869a:	39 d1                	cmp    ecx,edx
1000869c:	0f 85 a4 f5 ff ff    	jne    10007c46 <_crypt_blowfish_rn+0x695>
100086a2:	8b 84 24 a0 10 00 00 	mov    eax,DWORD PTR [esp+0x10a0]
100086a9:	31 84 24 58 10 00 00 	xor    DWORD PTR [esp+0x1058],eax
100086b0:	8b 84 24 a4 10 00 00 	mov    eax,DWORD PTR [esp+0x10a4]
100086b7:	31 84 24 5c 10 00 00 	xor    DWORD PTR [esp+0x105c],eax
100086be:	8b 84 24 a8 10 00 00 	mov    eax,DWORD PTR [esp+0x10a8]
100086c5:	31 84 24 60 10 00 00 	xor    DWORD PTR [esp+0x1060],eax
100086cc:	8b 84 24 ac 10 00 00 	mov    eax,DWORD PTR [esp+0x10ac]
100086d3:	31 84 24 64 10 00 00 	xor    DWORD PTR [esp+0x1064],eax
100086da:	8b 84 24 b0 10 00 00 	mov    eax,DWORD PTR [esp+0x10b0]
100086e1:	31 84 24 68 10 00 00 	xor    DWORD PTR [esp+0x1068],eax
100086e8:	8b 84 24 b4 10 00 00 	mov    eax,DWORD PTR [esp+0x10b4]
100086ef:	31 84 24 6c 10 00 00 	xor    DWORD PTR [esp+0x106c],eax
100086f6:	8b 84 24 b8 10 00 00 	mov    eax,DWORD PTR [esp+0x10b8]
100086fd:	31 84 24 70 10 00 00 	xor    DWORD PTR [esp+0x1070],eax
10008704:	8b 84 24 bc 10 00 00 	mov    eax,DWORD PTR [esp+0x10bc]
1000870b:	31 84 24 74 10 00 00 	xor    DWORD PTR [esp+0x1074],eax
10008712:	8b 84 24 c0 10 00 00 	mov    eax,DWORD PTR [esp+0x10c0]
10008719:	31 84 24 78 10 00 00 	xor    DWORD PTR [esp+0x1078],eax
10008720:	8b 84 24 c4 10 00 00 	mov    eax,DWORD PTR [esp+0x10c4]
10008727:	31 84 24 7c 10 00 00 	xor    DWORD PTR [esp+0x107c],eax
1000872e:	8b 84 24 c8 10 00 00 	mov    eax,DWORD PTR [esp+0x10c8]
10008735:	31 84 24 80 10 00 00 	xor    DWORD PTR [esp+0x1080],eax
1000873c:	8b 84 24 cc 10 00 00 	mov    eax,DWORD PTR [esp+0x10cc]
10008743:	31 84 24 84 10 00 00 	xor    DWORD PTR [esp+0x1084],eax
1000874a:	8b 84 24 d0 10 00 00 	mov    eax,DWORD PTR [esp+0x10d0]
10008751:	31 84 24 88 10 00 00 	xor    DWORD PTR [esp+0x1088],eax
10008758:	8b 84 24 d4 10 00 00 	mov    eax,DWORD PTR [esp+0x10d4]
1000875f:	31 84 24 8c 10 00 00 	xor    DWORD PTR [esp+0x108c],eax
10008766:	8b 84 24 d8 10 00 00 	mov    eax,DWORD PTR [esp+0x10d8]
1000876d:	31 84 24 90 10 00 00 	xor    DWORD PTR [esp+0x1090],eax
10008774:	8b 84 24 dc 10 00 00 	mov    eax,DWORD PTR [esp+0x10dc]
1000877b:	31 84 24 94 10 00 00 	xor    DWORD PTR [esp+0x1094],eax
10008782:	8b 84 24 e0 10 00 00 	mov    eax,DWORD PTR [esp+0x10e0]
10008789:	31 84 24 98 10 00 00 	xor    DWORD PTR [esp+0x1098],eax
10008790:	8b 84 24 e4 10 00 00 	mov    eax,DWORD PTR [esp+0x10e4]
10008797:	31 84 24 9c 10 00 00 	xor    DWORD PTR [esp+0x109c],eax
1000879e:	8d 9c 24 58 10 00 00 	lea    ebx,[esp+0x1058]
100087a5:	b9 00 00 00 00       	mov    ecx,0x0
100087aa:	b8 00 00 00 00       	mov    eax,0x0
100087af:	83 c3 08             	add    ebx,0x8
100087b2:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
100087b9:	89 c7                	mov    edi,eax
100087bb:	c1 ef 06             	shr    edi,0x6
100087be:	89 c5                	mov    ebp,eax
100087c0:	c1 ed 0e             	shr    ebp,0xe
100087c3:	89 c2                	mov    edx,eax
100087c5:	c1 ea 16             	shr    edx,0x16
100087c8:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100087cf:	81 e6 fc 03 00 00    	and    esi,0x3fc
100087d5:	81 e7 fc 03 00 00    	and    edi,0x3fc
100087db:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100087e1:	81 e2 fc 03 00 00    	and    edx,0x3fc
100087e7:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100087eb:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100087f2:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100087f9:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008800:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10008807:	31 ca                	xor    edx,ecx
10008809:	89 d5                	mov    ebp,edx
1000880b:	c1 ed 06             	shr    ebp,0x6
1000880e:	89 d6                	mov    esi,edx
10008810:	c1 ee 0e             	shr    esi,0xe
10008813:	89 d1                	mov    ecx,edx
10008815:	c1 e9 16             	shr    ecx,0x16
10008818:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
1000881f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008825:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000882b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008831:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008837:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000883b:	03 8c 34 58 04 00 00 	add    ecx,DWORD PTR [esp+esi*1+0x458]
10008842:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
10008849:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10008850:	03 8c 3c 58 0c 00 00 	add    ecx,DWORD PTR [esp+edi*1+0xc58]
10008857:	31 c8                	xor    eax,ecx
10008859:	89 c7                	mov    edi,eax
1000885b:	c1 ef 06             	shr    edi,0x6
1000885e:	89 c5                	mov    ebp,eax
10008860:	c1 ed 0e             	shr    ebp,0xe
10008863:	89 c1                	mov    ecx,eax
10008865:	c1 e9 16             	shr    ecx,0x16
10008868:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000886f:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008875:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000887b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008881:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008887:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000888b:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008892:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008899:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
100088a0:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100088a7:	31 d1                	xor    ecx,edx
100088a9:	89 cd                	mov    ebp,ecx
100088ab:	c1 ed 06             	shr    ebp,0x6
100088ae:	89 ce                	mov    esi,ecx
100088b0:	c1 ee 0e             	shr    esi,0xe
100088b3:	89 ca                	mov    edx,ecx
100088b5:	c1 ea 16             	shr    edx,0x16
100088b8:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
100088bf:	81 e7 fc 03 00 00    	and    edi,0x3fc
100088c5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100088cb:	81 e6 fc 03 00 00    	and    esi,0x3fc
100088d1:	81 e2 fc 03 00 00    	and    edx,0x3fc
100088d7:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100088db:	03 94 34 58 04 00 00 	add    edx,DWORD PTR [esp+esi*1+0x458]
100088e2:	33 94 2c 58 08 00 00 	xor    edx,DWORD PTR [esp+ebp*1+0x858]
100088e9:	33 84 24 68 10 00 00 	xor    eax,DWORD PTR [esp+0x1068]
100088f0:	89 d6                	mov    esi,edx
100088f2:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
100088f9:	31 c6                	xor    esi,eax
100088fb:	89 f2                	mov    edx,esi
100088fd:	c1 ea 06             	shr    edx,0x6
10008900:	89 f5                	mov    ebp,esi
10008902:	c1 ed 0e             	shr    ebp,0xe
10008905:	89 f0                	mov    eax,esi
10008907:	c1 e8 16             	shr    eax,0x16
1000890a:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10008911:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008917:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000891d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008923:	25 fc 03 00 00       	and    eax,0x3fc
10008928:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000892c:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008933:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
1000893a:	33 8c 24 6c 10 00 00 	xor    ecx,DWORD PTR [esp+0x106c]
10008941:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008948:	31 c8                	xor    eax,ecx
1000894a:	89 c7                	mov    edi,eax
1000894c:	c1 ef 06             	shr    edi,0x6
1000894f:	89 c5                	mov    ebp,eax
10008951:	c1 ed 0e             	shr    ebp,0xe
10008954:	89 c2                	mov    edx,eax
10008956:	c1 ea 16             	shr    edx,0x16
10008959:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10008960:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008966:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000896c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008972:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008978:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000897c:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008983:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000898a:	33 b4 24 70 10 00 00 	xor    esi,DWORD PTR [esp+0x1070]
10008991:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10008998:	31 f2                	xor    edx,esi
1000899a:	89 d7                	mov    edi,edx
1000899c:	c1 ef 06             	shr    edi,0x6
1000899f:	89 d5                	mov    ebp,edx
100089a1:	c1 ed 0e             	shr    ebp,0xe
100089a4:	89 d1                	mov    ecx,edx
100089a6:	c1 e9 16             	shr    ecx,0x16
100089a9:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100089b0:	81 e6 fc 03 00 00    	and    esi,0x3fc
100089b6:	81 e7 fc 03 00 00    	and    edi,0x3fc
100089bc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100089c2:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100089c8:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100089cc:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100089d3:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100089da:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
100089e1:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100089e8:	31 c8                	xor    eax,ecx
100089ea:	89 c7                	mov    edi,eax
100089ec:	c1 ef 06             	shr    edi,0x6
100089ef:	89 c5                	mov    ebp,eax
100089f1:	c1 ed 0e             	shr    ebp,0xe
100089f4:	89 c1                	mov    ecx,eax
100089f6:	c1 e9 16             	shr    ecx,0x16
100089f9:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008a00:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008a06:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008a0c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008a12:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008a18:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008a1c:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008a23:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008a2a:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
10008a31:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008a38:	31 ca                	xor    edx,ecx
10008a3a:	89 d7                	mov    edi,edx
10008a3c:	c1 ef 06             	shr    edi,0x6
10008a3f:	89 d5                	mov    ebp,edx
10008a41:	c1 ed 0e             	shr    ebp,0xe
10008a44:	89 d1                	mov    ecx,edx
10008a46:	c1 e9 16             	shr    ecx,0x16
10008a49:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008a50:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008a56:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008a5c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008a62:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008a68:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008a6c:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008a73:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008a7a:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
10008a81:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008a88:	31 c8                	xor    eax,ecx
10008a8a:	89 c7                	mov    edi,eax
10008a8c:	c1 ef 06             	shr    edi,0x6
10008a8f:	89 c5                	mov    ebp,eax
10008a91:	c1 ed 0e             	shr    ebp,0xe
10008a94:	89 c1                	mov    ecx,eax
10008a96:	c1 e9 16             	shr    ecx,0x16
10008a99:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008aa0:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008aa6:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008aac:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008ab2:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008ab8:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008abc:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008ac3:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008aca:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
10008ad1:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008ad8:	31 ca                	xor    edx,ecx
10008ada:	89 d7                	mov    edi,edx
10008adc:	c1 ef 06             	shr    edi,0x6
10008adf:	89 d5                	mov    ebp,edx
10008ae1:	c1 ed 0e             	shr    ebp,0xe
10008ae4:	89 d1                	mov    ecx,edx
10008ae6:	c1 e9 16             	shr    ecx,0x16
10008ae9:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008af0:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008af6:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008afc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008b02:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008b08:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008b0c:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008b13:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008b1a:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10008b21:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008b28:	31 c8                	xor    eax,ecx
10008b2a:	89 c7                	mov    edi,eax
10008b2c:	c1 ef 06             	shr    edi,0x6
10008b2f:	89 c5                	mov    ebp,eax
10008b31:	c1 ed 0e             	shr    ebp,0xe
10008b34:	89 c1                	mov    ecx,eax
10008b36:	c1 e9 16             	shr    ecx,0x16
10008b39:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008b40:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008b46:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008b4c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008b52:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008b58:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008b5c:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008b63:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008b6a:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
10008b71:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008b78:	31 ca                	xor    edx,ecx
10008b7a:	89 d7                	mov    edi,edx
10008b7c:	c1 ef 06             	shr    edi,0x6
10008b7f:	89 d5                	mov    ebp,edx
10008b81:	c1 ed 0e             	shr    ebp,0xe
10008b84:	89 d1                	mov    ecx,edx
10008b86:	c1 e9 16             	shr    ecx,0x16
10008b89:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008b90:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008b96:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008b9c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008ba2:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008ba8:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008bac:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008bb3:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008bba:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10008bc1:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008bc8:	31 c8                	xor    eax,ecx
10008bca:	89 c7                	mov    edi,eax
10008bcc:	c1 ef 06             	shr    edi,0x6
10008bcf:	89 c5                	mov    ebp,eax
10008bd1:	c1 ed 0e             	shr    ebp,0xe
10008bd4:	89 c1                	mov    ecx,eax
10008bd6:	c1 e9 16             	shr    ecx,0x16
10008bd9:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008be0:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008be6:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008bec:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008bf2:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008bf8:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008bfc:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008c03:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008c0a:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
10008c11:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008c18:	31 ca                	xor    edx,ecx
10008c1a:	89 d7                	mov    edi,edx
10008c1c:	c1 ef 06             	shr    edi,0x6
10008c1f:	89 d5                	mov    ebp,edx
10008c21:	c1 ed 0e             	shr    ebp,0xe
10008c24:	89 d6                	mov    esi,edx
10008c26:	c1 ee 16             	shr    esi,0x16
10008c29:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10008c30:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008c36:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008c3c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008c42:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008c48:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10008c4c:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
10008c53:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
10008c5a:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10008c61:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
10008c68:	31 f0                	xor    eax,esi
10008c6a:	89 c5                	mov    ebp,eax
10008c6c:	c1 ed 06             	shr    ebp,0x6
10008c6f:	89 c1                	mov    ecx,eax
10008c71:	c1 e9 0e             	shr    ecx,0xe
10008c74:	89 c6                	mov    esi,eax
10008c76:	c1 ee 16             	shr    esi,0x16
10008c79:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10008c80:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008c86:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008c8c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008c92:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008c98:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10008c9c:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
10008ca3:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10008caa:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
10008cb1:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10008cb8:	89 f1                	mov    ecx,esi
10008cba:	31 d1                	xor    ecx,edx
10008cbc:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10008cc3:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10008cc6:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
10008cc9:	8d b4 24 a0 10 00 00 	lea    esi,[esp+0x10a0]
10008cd0:	39 f3                	cmp    ebx,esi
10008cd2:	0f 85 d7 fa ff ff    	jne    100087af <_crypt_blowfish_rn+0x11fe>
10008cd8:	8d 5c 24 58          	lea    ebx,[esp+0x58]
10008cdc:	83 c3 08             	add    ebx,0x8
10008cdf:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10008ce6:	89 c7                	mov    edi,eax
10008ce8:	c1 ef 06             	shr    edi,0x6
10008ceb:	89 c5                	mov    ebp,eax
10008ced:	c1 ed 0e             	shr    ebp,0xe
10008cf0:	89 c2                	mov    edx,eax
10008cf2:	c1 ea 16             	shr    edx,0x16
10008cf5:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008cfc:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008d02:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008d08:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008d0e:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008d14:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008d18:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008d1f:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008d26:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008d2d:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10008d34:	31 ca                	xor    edx,ecx
10008d36:	89 d7                	mov    edi,edx
10008d38:	c1 ef 06             	shr    edi,0x6
10008d3b:	89 d5                	mov    ebp,edx
10008d3d:	c1 ed 0e             	shr    ebp,0xe
10008d40:	89 d1                	mov    ecx,edx
10008d42:	c1 e9 16             	shr    ecx,0x16
10008d45:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008d4c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008d52:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008d58:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008d5e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008d64:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008d68:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008d6f:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008d76:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10008d7d:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008d84:	31 c1                	xor    ecx,eax
10008d86:	89 cd                	mov    ebp,ecx
10008d88:	c1 ed 06             	shr    ebp,0x6
10008d8b:	89 c8                	mov    eax,ecx
10008d8d:	c1 e8 0e             	shr    eax,0xe
10008d90:	89 ce                	mov    esi,ecx
10008d92:	c1 ee 16             	shr    esi,0x16
10008d95:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10008d9c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008da2:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008da8:	25 fc 03 00 00       	and    eax,0x3fc
10008dad:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008db3:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10008db7:	03 b4 04 58 04 00 00 	add    esi,DWORD PTR [esp+eax*1+0x458]
10008dbe:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10008dc5:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
10008dcc:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10008dd3:	31 d6                	xor    esi,edx
10008dd5:	89 f5                	mov    ebp,esi
10008dd7:	c1 ed 06             	shr    ebp,0x6
10008dda:	89 f2                	mov    edx,esi
10008ddc:	c1 ea 0e             	shr    edx,0xe
10008ddf:	89 f0                	mov    eax,esi
10008de1:	c1 e8 16             	shr    eax,0x16
10008de4:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10008deb:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008df1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008df7:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008dfd:	25 fc 03 00 00       	and    eax,0x3fc
10008e02:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008e06:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
10008e0d:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10008e14:	33 8c 24 68 10 00 00 	xor    ecx,DWORD PTR [esp+0x1068]
10008e1b:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008e22:	31 c1                	xor    ecx,eax
10008e24:	89 ca                	mov    edx,ecx
10008e26:	c1 ea 06             	shr    edx,0x6
10008e29:	89 cd                	mov    ebp,ecx
10008e2b:	c1 ed 0e             	shr    ebp,0xe
10008e2e:	89 c8                	mov    eax,ecx
10008e30:	c1 e8 16             	shr    eax,0x16
10008e33:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10008e3a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008e40:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008e46:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008e4c:	25 fc 03 00 00       	and    eax,0x3fc
10008e51:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008e55:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008e5c:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10008e63:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
10008e6a:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008e71:	31 f0                	xor    eax,esi
10008e73:	89 c7                	mov    edi,eax
10008e75:	c1 ef 06             	shr    edi,0x6
10008e78:	89 c5                	mov    ebp,eax
10008e7a:	c1 ed 0e             	shr    ebp,0xe
10008e7d:	89 c2                	mov    edx,eax
10008e7f:	c1 ea 16             	shr    edx,0x16
10008e82:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008e89:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008e8f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008e95:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008e9b:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008ea1:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008ea5:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008eac:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008eb3:	33 8c 24 70 10 00 00 	xor    ecx,DWORD PTR [esp+0x1070]
10008eba:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008ec1:	31 ca                	xor    edx,ecx
10008ec3:	89 d7                	mov    edi,edx
10008ec5:	c1 ef 06             	shr    edi,0x6
10008ec8:	89 d5                	mov    ebp,edx
10008eca:	c1 ed 0e             	shr    ebp,0xe
10008ecd:	89 d1                	mov    ecx,edx
10008ecf:	c1 e9 16             	shr    ecx,0x16
10008ed2:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008ed9:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008edf:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008ee5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008eeb:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008ef1:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008ef5:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008efc:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008f03:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
10008f0a:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008f11:	31 c8                	xor    eax,ecx
10008f13:	89 c7                	mov    edi,eax
10008f15:	c1 ef 06             	shr    edi,0x6
10008f18:	89 c5                	mov    ebp,eax
10008f1a:	c1 ed 0e             	shr    ebp,0xe
10008f1d:	89 c1                	mov    ecx,eax
10008f1f:	c1 e9 16             	shr    ecx,0x16
10008f22:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008f29:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008f2f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008f35:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008f3b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008f41:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008f45:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008f4c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008f53:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
10008f5a:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008f61:	31 ca                	xor    edx,ecx
10008f63:	89 d7                	mov    edi,edx
10008f65:	c1 ef 06             	shr    edi,0x6
10008f68:	89 d5                	mov    ebp,edx
10008f6a:	c1 ed 0e             	shr    ebp,0xe
10008f6d:	89 d1                	mov    ecx,edx
10008f6f:	c1 e9 16             	shr    ecx,0x16
10008f72:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008f79:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008f7f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008f85:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008f8b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008f91:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008f95:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008f9c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008fa3:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
10008faa:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008fb1:	31 c8                	xor    eax,ecx
10008fb3:	89 c7                	mov    edi,eax
10008fb5:	c1 ef 06             	shr    edi,0x6
10008fb8:	89 c5                	mov    ebp,eax
10008fba:	c1 ed 0e             	shr    ebp,0xe
10008fbd:	89 c1                	mov    ecx,eax
10008fbf:	c1 e9 16             	shr    ecx,0x16
10008fc2:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008fc9:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008fcf:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008fd5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008fdb:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008fe1:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008fe5:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008fec:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008ff3:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
10008ffa:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009001:	31 ca                	xor    edx,ecx
10009003:	89 d7                	mov    edi,edx
10009005:	c1 ef 06             	shr    edi,0x6
10009008:	89 d5                	mov    ebp,edx
1000900a:	c1 ed 0e             	shr    ebp,0xe
1000900d:	89 d1                	mov    ecx,edx
1000900f:	c1 e9 16             	shr    ecx,0x16
10009012:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009019:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000901f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009025:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000902b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009031:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009035:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000903c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009043:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
1000904a:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009051:	31 c8                	xor    eax,ecx
10009053:	89 c7                	mov    edi,eax
10009055:	c1 ef 06             	shr    edi,0x6
10009058:	89 c5                	mov    ebp,eax
1000905a:	c1 ed 0e             	shr    ebp,0xe
1000905d:	89 c1                	mov    ecx,eax
1000905f:	c1 e9 16             	shr    ecx,0x16
10009062:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009069:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000906f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009075:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000907b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009081:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009085:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000908c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009093:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
1000909a:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100090a1:	31 ca                	xor    edx,ecx
100090a3:	89 d7                	mov    edi,edx
100090a5:	c1 ef 06             	shr    edi,0x6
100090a8:	89 d5                	mov    ebp,edx
100090aa:	c1 ed 0e             	shr    ebp,0xe
100090ad:	89 d1                	mov    ecx,edx
100090af:	c1 e9 16             	shr    ecx,0x16
100090b2:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100090b9:	81 e6 fc 03 00 00    	and    esi,0x3fc
100090bf:	81 e7 fc 03 00 00    	and    edi,0x3fc
100090c5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100090cb:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100090d1:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100090d5:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100090dc:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100090e3:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
100090ea:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100090f1:	31 c8                	xor    eax,ecx
100090f3:	89 c7                	mov    edi,eax
100090f5:	c1 ef 06             	shr    edi,0x6
100090f8:	89 c5                	mov    ebp,eax
100090fa:	c1 ed 0e             	shr    ebp,0xe
100090fd:	89 c1                	mov    ecx,eax
100090ff:	c1 e9 16             	shr    ecx,0x16
10009102:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009109:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000910f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009115:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000911b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009121:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009125:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000912c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009133:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
1000913a:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009141:	31 ca                	xor    edx,ecx
10009143:	89 d7                	mov    edi,edx
10009145:	c1 ef 06             	shr    edi,0x6
10009148:	89 d5                	mov    ebp,edx
1000914a:	c1 ed 0e             	shr    ebp,0xe
1000914d:	89 d6                	mov    esi,edx
1000914f:	c1 ee 16             	shr    esi,0x16
10009152:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10009159:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000915f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009165:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000916b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009171:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10009175:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
1000917c:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
10009183:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
1000918a:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
10009191:	31 f0                	xor    eax,esi
10009193:	89 c5                	mov    ebp,eax
10009195:	c1 ed 06             	shr    ebp,0x6
10009198:	89 c1                	mov    ecx,eax
1000919a:	c1 e9 0e             	shr    ecx,0xe
1000919d:	89 c6                	mov    esi,eax
1000919f:	c1 ee 16             	shr    esi,0x16
100091a2:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
100091a9:	81 e7 fc 03 00 00    	and    edi,0x3fc
100091af:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100091b5:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100091bb:	81 e6 fc 03 00 00    	and    esi,0x3fc
100091c1:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
100091c5:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
100091cc:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
100091d3:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
100091da:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
100091e1:	89 f1                	mov    ecx,esi
100091e3:	31 d1                	xor    ecx,edx
100091e5:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
100091ec:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
100091ef:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
100091f2:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
100091f9:	39 d3                	cmp    ebx,edx
100091fb:	0f 85 db fa ff ff    	jne    10008cdc <_crypt_blowfish_rn+0x172b>
10009201:	8b 94 24 e8 10 00 00 	mov    edx,DWORD PTR [esp+0x10e8]
10009208:	8b 84 24 ec 10 00 00 	mov    eax,DWORD PTR [esp+0x10ec]
1000920f:	8b 9c 24 f0 10 00 00 	mov    ebx,DWORD PTR [esp+0x10f0]
10009216:	8b 8c 24 f4 10 00 00 	mov    ecx,DWORD PTR [esp+0x10f4]
1000921d:	31 94 24 58 10 00 00 	xor    DWORD PTR [esp+0x1058],edx
10009224:	31 84 24 5c 10 00 00 	xor    DWORD PTR [esp+0x105c],eax
1000922b:	31 9c 24 60 10 00 00 	xor    DWORD PTR [esp+0x1060],ebx
10009232:	31 8c 24 64 10 00 00 	xor    DWORD PTR [esp+0x1064],ecx
10009239:	31 94 24 68 10 00 00 	xor    DWORD PTR [esp+0x1068],edx
10009240:	31 84 24 6c 10 00 00 	xor    DWORD PTR [esp+0x106c],eax
10009247:	31 9c 24 70 10 00 00 	xor    DWORD PTR [esp+0x1070],ebx
1000924e:	31 8c 24 74 10 00 00 	xor    DWORD PTR [esp+0x1074],ecx
10009255:	31 94 24 78 10 00 00 	xor    DWORD PTR [esp+0x1078],edx
1000925c:	31 84 24 7c 10 00 00 	xor    DWORD PTR [esp+0x107c],eax
10009263:	31 9c 24 80 10 00 00 	xor    DWORD PTR [esp+0x1080],ebx
1000926a:	31 8c 24 84 10 00 00 	xor    DWORD PTR [esp+0x1084],ecx
10009271:	31 94 24 88 10 00 00 	xor    DWORD PTR [esp+0x1088],edx
10009278:	31 84 24 8c 10 00 00 	xor    DWORD PTR [esp+0x108c],eax
1000927f:	31 9c 24 90 10 00 00 	xor    DWORD PTR [esp+0x1090],ebx
10009286:	31 8c 24 94 10 00 00 	xor    DWORD PTR [esp+0x1094],ecx
1000928d:	31 94 24 98 10 00 00 	xor    DWORD PTR [esp+0x1098],edx
10009294:	31 84 24 9c 10 00 00 	xor    DWORD PTR [esp+0x109c],eax
1000929b:	8d 9c 24 58 10 00 00 	lea    ebx,[esp+0x1058]
100092a2:	be 00 00 00 00       	mov    esi,0x0
100092a7:	b8 00 00 00 00       	mov    eax,0x0
100092ac:	83 c3 08             	add    ebx,0x8
100092af:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
100092b6:	89 c7                	mov    edi,eax
100092b8:	c1 ef 06             	shr    edi,0x6
100092bb:	89 c5                	mov    ebp,eax
100092bd:	c1 ed 0e             	shr    ebp,0xe
100092c0:	89 c2                	mov    edx,eax
100092c2:	c1 ea 16             	shr    edx,0x16
100092c5:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
100092cc:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100092d2:	81 e7 fc 03 00 00    	and    edi,0x3fc
100092d8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100092de:	81 e2 fc 03 00 00    	and    edx,0x3fc
100092e4:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100092e8:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100092ef:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100092f6:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
100092fd:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10009304:	31 d6                	xor    esi,edx
10009306:	89 f7                	mov    edi,esi
10009308:	c1 ef 06             	shr    edi,0x6
1000930b:	89 f5                	mov    ebp,esi
1000930d:	c1 ed 0e             	shr    ebp,0xe
10009310:	89 f1                	mov    ecx,esi
10009312:	c1 e9 16             	shr    ecx,0x16
10009315:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
1000931c:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009322:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009328:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000932e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009334:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009338:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000933f:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009346:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
1000934d:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009354:	31 c8                	xor    eax,ecx
10009356:	89 c5                	mov    ebp,eax
10009358:	c1 ed 06             	shr    ebp,0x6
1000935b:	89 c2                	mov    edx,eax
1000935d:	c1 ea 0e             	shr    edx,0xe
10009360:	89 c1                	mov    ecx,eax
10009362:	c1 e9 16             	shr    ecx,0x16
10009365:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
1000936c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009372:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009378:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000937e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009384:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009388:	03 8c 14 58 04 00 00 	add    ecx,DWORD PTR [esp+edx*1+0x458]
1000938f:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
10009396:	33 b4 24 64 10 00 00 	xor    esi,DWORD PTR [esp+0x1064]
1000939d:	89 ca                	mov    edx,ecx
1000939f:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
100093a6:	31 d6                	xor    esi,edx
100093a8:	89 f7                	mov    edi,esi
100093aa:	c1 ef 06             	shr    edi,0x6
100093ad:	89 f5                	mov    ebp,esi
100093af:	c1 ed 0e             	shr    ebp,0xe
100093b2:	89 f1                	mov    ecx,esi
100093b4:	c1 e9 16             	shr    ecx,0x16
100093b7:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
100093be:	81 e2 fc 03 00 00    	and    edx,0x3fc
100093c4:	81 e7 fc 03 00 00    	and    edi,0x3fc
100093ca:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100093d0:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100093d6:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100093da:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100093e1:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100093e8:	33 84 24 68 10 00 00 	xor    eax,DWORD PTR [esp+0x1068]
100093ef:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
100093f6:	31 c1                	xor    ecx,eax
100093f8:	89 cd                	mov    ebp,ecx
100093fa:	c1 ed 06             	shr    ebp,0x6
100093fd:	89 ca                	mov    edx,ecx
100093ff:	c1 ea 0e             	shr    edx,0xe
10009402:	89 c8                	mov    eax,ecx
10009404:	c1 e8 16             	shr    eax,0x16
10009407:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
1000940e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009414:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000941a:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009420:	25 fc 03 00 00       	and    eax,0x3fc
10009425:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009429:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
10009430:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10009437:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
1000943e:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009445:	89 c2                	mov    edx,eax
10009447:	31 f2                	xor    edx,esi
10009449:	89 d5                	mov    ebp,edx
1000944b:	c1 ed 06             	shr    ebp,0x6
1000944e:	89 d6                	mov    esi,edx
10009450:	c1 ee 0e             	shr    esi,0xe
10009453:	89 d0                	mov    eax,edx
10009455:	c1 e8 16             	shr    eax,0x16
10009458:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
1000945f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009465:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000946b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009471:	25 fc 03 00 00       	and    eax,0x3fc
10009476:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000947a:	03 84 34 58 04 00 00 	add    eax,DWORD PTR [esp+esi*1+0x458]
10009481:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10009488:	33 8c 24 70 10 00 00 	xor    ecx,DWORD PTR [esp+0x1070]
1000948f:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009496:	89 c6                	mov    esi,eax
10009498:	31 ce                	xor    esi,ecx
1000949a:	89 f7                	mov    edi,esi
1000949c:	c1 ef 06             	shr    edi,0x6
1000949f:	89 f5                	mov    ebp,esi
100094a1:	c1 ed 0e             	shr    ebp,0xe
100094a4:	89 f0                	mov    eax,esi
100094a6:	c1 e8 16             	shr    eax,0x16
100094a9:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
100094b0:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100094b6:	81 e7 fc 03 00 00    	and    edi,0x3fc
100094bc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100094c2:	25 fc 03 00 00       	and    eax,0x3fc
100094c7:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100094cb:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100094d2:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100094d9:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
100094e0:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
100094e7:	31 c2                	xor    edx,eax
100094e9:	89 d7                	mov    edi,edx
100094eb:	c1 ef 06             	shr    edi,0x6
100094ee:	89 d5                	mov    ebp,edx
100094f0:	c1 ed 0e             	shr    ebp,0xe
100094f3:	89 d0                	mov    eax,edx
100094f5:	c1 e8 16             	shr    eax,0x16
100094f8:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
100094ff:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009505:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000950b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009511:	25 fc 03 00 00       	and    eax,0x3fc
10009516:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000951a:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009521:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10009528:	33 b4 24 78 10 00 00 	xor    esi,DWORD PTR [esp+0x1078]
1000952f:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10009536:	31 c6                	xor    esi,eax
10009538:	89 f7                	mov    edi,esi
1000953a:	c1 ef 06             	shr    edi,0x6
1000953d:	89 f5                	mov    ebp,esi
1000953f:	c1 ed 0e             	shr    ebp,0xe
10009542:	89 f0                	mov    eax,esi
10009544:	c1 e8 16             	shr    eax,0x16
10009547:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
1000954e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009554:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000955a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009560:	25 fc 03 00 00       	and    eax,0x3fc
10009565:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009569:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009570:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10009577:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
1000957e:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10009585:	31 c2                	xor    edx,eax
10009587:	89 d7                	mov    edi,edx
10009589:	c1 ef 06             	shr    edi,0x6
1000958c:	89 d5                	mov    ebp,edx
1000958e:	c1 ed 0e             	shr    ebp,0xe
10009591:	89 d0                	mov    eax,edx
10009593:	c1 e8 16             	shr    eax,0x16
10009596:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
1000959d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100095a3:	81 e7 fc 03 00 00    	and    edi,0x3fc
100095a9:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100095af:	25 fc 03 00 00       	and    eax,0x3fc
100095b4:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100095b8:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100095bf:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100095c6:	33 b4 24 80 10 00 00 	xor    esi,DWORD PTR [esp+0x1080]
100095cd:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
100095d4:	31 c6                	xor    esi,eax
100095d6:	89 f7                	mov    edi,esi
100095d8:	c1 ef 06             	shr    edi,0x6
100095db:	89 f5                	mov    ebp,esi
100095dd:	c1 ed 0e             	shr    ebp,0xe
100095e0:	89 f0                	mov    eax,esi
100095e2:	c1 e8 16             	shr    eax,0x16
100095e5:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
100095ec:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100095f2:	81 e7 fc 03 00 00    	and    edi,0x3fc
100095f8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100095fe:	25 fc 03 00 00       	and    eax,0x3fc
10009603:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009607:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000960e:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10009615:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
1000961c:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10009623:	31 d0                	xor    eax,edx
10009625:	89 c7                	mov    edi,eax
10009627:	c1 ef 06             	shr    edi,0x6
1000962a:	89 c5                	mov    ebp,eax
1000962c:	c1 ed 0e             	shr    ebp,0xe
1000962f:	89 c2                	mov    edx,eax
10009631:	c1 ea 16             	shr    edx,0x16
10009634:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000963b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009641:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009647:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000964d:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009653:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009657:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000965e:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009665:	33 b4 24 88 10 00 00 	xor    esi,DWORD PTR [esp+0x1088]
1000966c:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009673:	31 d6                	xor    esi,edx
10009675:	89 f7                	mov    edi,esi
10009677:	c1 ef 06             	shr    edi,0x6
1000967a:	89 f5                	mov    ebp,esi
1000967c:	c1 ed 0e             	shr    ebp,0xe
1000967f:	89 f2                	mov    edx,esi
10009681:	c1 ea 16             	shr    edx,0x16
10009684:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
1000968b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009691:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009697:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000969d:	81 e2 fc 03 00 00    	and    edx,0x3fc
100096a3:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100096a7:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100096ae:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100096b5:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
100096bc:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
100096c3:	31 d0                	xor    eax,edx
100096c5:	89 c7                	mov    edi,eax
100096c7:	c1 ef 06             	shr    edi,0x6
100096ca:	89 c5                	mov    ebp,eax
100096cc:	c1 ed 0e             	shr    ebp,0xe
100096cf:	89 c2                	mov    edx,eax
100096d1:	c1 ea 16             	shr    edx,0x16
100096d4:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
100096db:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100096e1:	81 e7 fc 03 00 00    	and    edi,0x3fc
100096e7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100096ed:	81 e2 fc 03 00 00    	and    edx,0x3fc
100096f3:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100096f7:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100096fe:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009705:	33 b4 24 90 10 00 00 	xor    esi,DWORD PTR [esp+0x1090]
1000970c:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009713:	31 d6                	xor    esi,edx
10009715:	89 f2                	mov    edx,esi
10009717:	c1 ea 06             	shr    edx,0x6
1000971a:	89 f5                	mov    ebp,esi
1000971c:	c1 ed 0e             	shr    ebp,0xe
1000971f:	89 f1                	mov    ecx,esi
10009721:	c1 e9 16             	shr    ecx,0x16
10009724:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000972b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009731:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009737:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000973d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009743:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009747:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000974e:	33 8c 14 58 08 00 00 	xor    ecx,DWORD PTR [esp+edx*1+0x858]
10009755:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
1000975c:	03 8c 3c 58 0c 00 00 	add    ecx,DWORD PTR [esp+edi*1+0xc58]
10009763:	31 c8                	xor    eax,ecx
10009765:	89 c5                	mov    ebp,eax
10009767:	c1 ed 06             	shr    ebp,0x6
1000976a:	89 c2                	mov    edx,eax
1000976c:	c1 ea 0e             	shr    edx,0xe
1000976f:	89 c1                	mov    ecx,eax
10009771:	c1 e9 16             	shr    ecx,0x16
10009774:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
1000977b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009781:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009787:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000978d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009793:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009797:	03 8c 14 58 04 00 00 	add    ecx,DWORD PTR [esp+edx*1+0x458]
1000979e:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
100097a5:	33 b4 24 98 10 00 00 	xor    esi,DWORD PTR [esp+0x1098]
100097ac:	89 ca                	mov    edx,ecx
100097ae:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
100097b5:	31 d6                	xor    esi,edx
100097b7:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
100097be:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
100097c1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
100097c4:	8d bc 24 a0 10 00 00 	lea    edi,[esp+0x10a0]
100097cb:	39 fb                	cmp    ebx,edi
100097cd:	0f 85 d9 fa ff ff    	jne    100092ac <_crypt_blowfish_rn+0x1cfb>
100097d3:	8d 5c 24 58          	lea    ebx,[esp+0x58]
100097d7:	83 c3 08             	add    ebx,0x8
100097da:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
100097e1:	89 c7                	mov    edi,eax
100097e3:	c1 ef 06             	shr    edi,0x6
100097e6:	89 c5                	mov    ebp,eax
100097e8:	c1 ed 0e             	shr    ebp,0xe
100097eb:	89 c2                	mov    edx,eax
100097ed:	c1 ea 16             	shr    edx,0x16
100097f0:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
100097f7:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100097fd:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009803:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009809:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000980f:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009813:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000981a:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009821:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009828:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
1000982f:	31 f2                	xor    edx,esi
10009831:	89 d7                	mov    edi,edx
10009833:	c1 ef 06             	shr    edi,0x6
10009836:	89 d5                	mov    ebp,edx
10009838:	c1 ed 0e             	shr    ebp,0xe
1000983b:	89 d6                	mov    esi,edx
1000983d:	c1 ee 16             	shr    esi,0x16
10009840:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10009847:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000984d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009853:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009859:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000985f:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10009863:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
1000986a:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
10009871:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10009878:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
1000987f:	31 c6                	xor    esi,eax
10009881:	89 f7                	mov    edi,esi
10009883:	c1 ef 06             	shr    edi,0x6
10009886:	89 f5                	mov    ebp,esi
10009888:	c1 ed 0e             	shr    ebp,0xe
1000988b:	89 f1                	mov    ecx,esi
1000988d:	c1 e9 16             	shr    ecx,0x16
10009890:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
10009897:	25 fc 03 00 00       	and    eax,0x3fc
1000989c:	81 e7 fc 03 00 00    	and    edi,0x3fc
100098a2:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100098a8:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100098ae:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100098b2:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100098b9:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100098c0:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
100098c7:	03 8c 04 58 0c 00 00 	add    ecx,DWORD PTR [esp+eax*1+0xc58]
100098ce:	31 d1                	xor    ecx,edx
100098d0:	89 c8                	mov    eax,ecx
100098d2:	c1 e8 06             	shr    eax,0x6
100098d5:	89 cd                	mov    ebp,ecx
100098d7:	c1 ed 0e             	shr    ebp,0xe
100098da:	89 ca                	mov    edx,ecx
100098dc:	c1 ea 16             	shr    edx,0x16
100098df:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
100098e6:	81 e7 fc 03 00 00    	and    edi,0x3fc
100098ec:	25 fc 03 00 00       	and    eax,0x3fc
100098f1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100098f7:	81 e2 fc 03 00 00    	and    edx,0x3fc
100098fd:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009901:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009908:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
1000990f:	33 b4 24 68 10 00 00 	xor    esi,DWORD PTR [esp+0x1068]
10009916:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
1000991d:	31 d6                	xor    esi,edx
1000991f:	89 f2                	mov    edx,esi
10009921:	c1 ea 06             	shr    edx,0x6
10009924:	89 f5                	mov    ebp,esi
10009926:	c1 ed 0e             	shr    ebp,0xe
10009929:	89 f0                	mov    eax,esi
1000992b:	c1 e8 16             	shr    eax,0x16
1000992e:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10009935:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000993b:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009941:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009947:	25 fc 03 00 00       	and    eax,0x3fc
1000994c:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009950:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009957:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
1000995e:	33 8c 24 6c 10 00 00 	xor    ecx,DWORD PTR [esp+0x106c]
10009965:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000996c:	31 c1                	xor    ecx,eax
1000996e:	89 c8                	mov    eax,ecx
10009970:	c1 e8 06             	shr    eax,0x6
10009973:	89 cd                	mov    ebp,ecx
10009975:	c1 ed 0e             	shr    ebp,0xe
10009978:	89 ca                	mov    edx,ecx
1000997a:	c1 ea 16             	shr    edx,0x16
1000997d:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10009984:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000998a:	25 fc 03 00 00       	and    eax,0x3fc
1000998f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009995:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000999b:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000999f:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100099a6:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
100099ad:	33 b4 24 70 10 00 00 	xor    esi,DWORD PTR [esp+0x1070]
100099b4:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
100099bb:	31 d6                	xor    esi,edx
100099bd:	89 f2                	mov    edx,esi
100099bf:	c1 ea 06             	shr    edx,0x6
100099c2:	89 f5                	mov    ebp,esi
100099c4:	c1 ed 0e             	shr    ebp,0xe
100099c7:	89 f0                	mov    eax,esi
100099c9:	c1 e8 16             	shr    eax,0x16
100099cc:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
100099d3:	81 e7 fc 03 00 00    	and    edi,0x3fc
100099d9:	81 e2 fc 03 00 00    	and    edx,0x3fc
100099df:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100099e5:	25 fc 03 00 00       	and    eax,0x3fc
100099ea:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100099ee:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100099f5:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
100099fc:	33 8c 24 74 10 00 00 	xor    ecx,DWORD PTR [esp+0x1074]
10009a03:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009a0a:	31 c1                	xor    ecx,eax
10009a0c:	89 cf                	mov    edi,ecx
10009a0e:	c1 ef 06             	shr    edi,0x6
10009a11:	89 cd                	mov    ebp,ecx
10009a13:	c1 ed 0e             	shr    ebp,0xe
10009a16:	89 ca                	mov    edx,ecx
10009a18:	c1 ea 16             	shr    edx,0x16
10009a1b:	8d 04 8d 00 00 00 00 	lea    eax,[ecx*4+0x0]
10009a22:	25 fc 03 00 00       	and    eax,0x3fc
10009a27:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009a2d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009a33:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009a39:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009a3d:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009a44:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009a4b:	33 b4 24 78 10 00 00 	xor    esi,DWORD PTR [esp+0x1078]
10009a52:	03 94 04 58 0c 00 00 	add    edx,DWORD PTR [esp+eax*1+0xc58]
10009a59:	31 d6                	xor    esi,edx
10009a5b:	89 f2                	mov    edx,esi
10009a5d:	c1 ea 06             	shr    edx,0x6
10009a60:	89 f5                	mov    ebp,esi
10009a62:	c1 ed 0e             	shr    ebp,0xe
10009a65:	89 f0                	mov    eax,esi
10009a67:	c1 e8 16             	shr    eax,0x16
10009a6a:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10009a71:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009a77:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009a7d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009a83:	25 fc 03 00 00       	and    eax,0x3fc
10009a88:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009a8c:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009a93:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10009a9a:	33 8c 24 7c 10 00 00 	xor    ecx,DWORD PTR [esp+0x107c]
10009aa1:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009aa8:	31 c8                	xor    eax,ecx
10009aaa:	89 c7                	mov    edi,eax
10009aac:	c1 ef 06             	shr    edi,0x6
10009aaf:	89 c5                	mov    ebp,eax
10009ab1:	c1 ed 0e             	shr    ebp,0xe
10009ab4:	89 c2                	mov    edx,eax
10009ab6:	c1 ea 16             	shr    edx,0x16
10009ab9:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009ac0:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009ac6:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009acc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009ad2:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009ad8:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009adc:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009ae3:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009aea:	33 b4 24 80 10 00 00 	xor    esi,DWORD PTR [esp+0x1080]
10009af1:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009af8:	31 d6                	xor    esi,edx
10009afa:	89 f7                	mov    edi,esi
10009afc:	c1 ef 06             	shr    edi,0x6
10009aff:	89 f5                	mov    ebp,esi
10009b01:	c1 ed 0e             	shr    ebp,0xe
10009b04:	89 f1                	mov    ecx,esi
10009b06:	c1 e9 16             	shr    ecx,0x16
10009b09:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10009b10:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009b16:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009b1c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009b22:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009b28:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009b2c:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009b33:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009b3a:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10009b41:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009b48:	31 c8                	xor    eax,ecx
10009b4a:	89 c7                	mov    edi,eax
10009b4c:	c1 ef 06             	shr    edi,0x6
10009b4f:	89 c5                	mov    ebp,eax
10009b51:	c1 ed 0e             	shr    ebp,0xe
10009b54:	89 c2                	mov    edx,eax
10009b56:	c1 ea 16             	shr    edx,0x16
10009b59:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009b60:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009b66:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009b6c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009b72:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009b78:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009b7c:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009b83:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009b8a:	33 b4 24 88 10 00 00 	xor    esi,DWORD PTR [esp+0x1088]
10009b91:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009b98:	31 d6                	xor    esi,edx
10009b9a:	89 f7                	mov    edi,esi
10009b9c:	c1 ef 06             	shr    edi,0x6
10009b9f:	89 f5                	mov    ebp,esi
10009ba1:	c1 ed 0e             	shr    ebp,0xe
10009ba4:	89 f1                	mov    ecx,esi
10009ba6:	c1 e9 16             	shr    ecx,0x16
10009ba9:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10009bb0:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009bb6:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009bbc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009bc2:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009bc8:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009bcc:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009bd3:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009bda:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10009be1:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009be8:	31 c8                	xor    eax,ecx
10009bea:	89 c7                	mov    edi,eax
10009bec:	c1 ef 06             	shr    edi,0x6
10009bef:	89 c5                	mov    ebp,eax
10009bf1:	c1 ed 0e             	shr    ebp,0xe
10009bf4:	89 c2                	mov    edx,eax
10009bf6:	c1 ea 16             	shr    edx,0x16
10009bf9:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009c00:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009c06:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009c0c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009c12:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009c18:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009c1c:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009c23:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009c2a:	33 b4 24 90 10 00 00 	xor    esi,DWORD PTR [esp+0x1090]
10009c31:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009c38:	31 d6                	xor    esi,edx
10009c3a:	89 f7                	mov    edi,esi
10009c3c:	c1 ef 06             	shr    edi,0x6
10009c3f:	89 f5                	mov    ebp,esi
10009c41:	c1 ed 0e             	shr    ebp,0xe
10009c44:	89 f1                	mov    ecx,esi
10009c46:	c1 e9 16             	shr    ecx,0x16
10009c49:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10009c50:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009c56:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009c5c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009c62:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009c68:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009c6c:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009c73:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009c7a:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10009c81:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10009c88:	31 c8                	xor    eax,ecx
10009c8a:	89 c7                	mov    edi,eax
10009c8c:	c1 ef 06             	shr    edi,0x6
10009c8f:	89 c5                	mov    ebp,eax
10009c91:	c1 ed 0e             	shr    ebp,0xe
10009c94:	89 c2                	mov    edx,eax
10009c96:	c1 ea 16             	shr    edx,0x16
10009c99:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10009ca0:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009ca6:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009cac:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009cb2:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009cb8:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009cbc:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009cc3:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009cca:	33 b4 24 98 10 00 00 	xor    esi,DWORD PTR [esp+0x1098]
10009cd1:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10009cd8:	31 d6                	xor    esi,edx
10009cda:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10009ce1:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10009ce4:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
10009ce7:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
10009cee:	39 d3                	cmp    ebx,edx
10009cf0:	0f 85 e1 fa ff ff    	jne    100097d7 <_crypt_blowfish_rn+0x2226>
10009cf6:	ff 4c 24 04          	dec    DWORD PTR [esp+0x4]
10009cfa:	0f 85 a2 e9 ff ff    	jne    100086a2 <_crypt_blowfish_rn+0x10f1>
10009d00:	8b 84 24 58 10 00 00 	mov    eax,DWORD PTR [esp+0x1058]
10009d07:	89 04 24             	mov    DWORD PTR [esp],eax
10009d0a:	8b 84 24 5c 10 00 00 	mov    eax,DWORD PTR [esp+0x105c]
10009d11:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10009d15:	8b 84 24 60 10 00 00 	mov    eax,DWORD PTR [esp+0x1060]
10009d1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10009d20:	8b 84 24 64 10 00 00 	mov    eax,DWORD PTR [esp+0x1064]
10009d27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10009d2b:	8b 84 24 68 10 00 00 	mov    eax,DWORD PTR [esp+0x1068]
10009d32:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10009d36:	8b 84 24 6c 10 00 00 	mov    eax,DWORD PTR [esp+0x106c]
10009d3d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10009d41:	8b 84 24 70 10 00 00 	mov    eax,DWORD PTR [esp+0x1070]
10009d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10009d4c:	8b 84 24 74 10 00 00 	mov    eax,DWORD PTR [esp+0x1074]
10009d53:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10009d57:	8b 84 24 78 10 00 00 	mov    eax,DWORD PTR [esp+0x1078]
10009d5e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10009d62:	8b 84 24 7c 10 00 00 	mov    eax,DWORD PTR [esp+0x107c]
10009d69:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10009d6d:	8b 84 24 80 10 00 00 	mov    eax,DWORD PTR [esp+0x1080]
10009d74:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10009d78:	8b 84 24 84 10 00 00 	mov    eax,DWORD PTR [esp+0x1084]
10009d7f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10009d83:	8b 84 24 88 10 00 00 	mov    eax,DWORD PTR [esp+0x1088]
10009d8a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10009d8e:	8b 84 24 8c 10 00 00 	mov    eax,DWORD PTR [esp+0x108c]
10009d95:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10009d99:	8b 84 24 90 10 00 00 	mov    eax,DWORD PTR [esp+0x1090]
10009da0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10009da4:	8b 84 24 94 10 00 00 	mov    eax,DWORD PTR [esp+0x1094]
10009dab:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10009daf:	8b 84 24 98 10 00 00 	mov    eax,DWORD PTR [esp+0x1098]
10009db6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10009dba:	8b 84 24 9c 10 00 00 	mov    eax,DWORD PTR [esp+0x109c]
10009dc1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10009dc5:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
10009dc9:	89 5c 24 4c          	mov    DWORD PTR [esp+0x4c],ebx
10009dcd:	8b 04 9d c0 b3 00 10 	mov    eax,DWORD PTR [ebx*4+0x1000b3c0]	10009dd0: R_386_32	.data
10009dd4:	8b 0c 9d c4 b3 00 10 	mov    ecx,DWORD PTR [ebx*4+0x1000b3c4]	10009dd7: R_386_32	.data
10009ddb:	bb 40 00 00 00       	mov    ebx,0x40
10009de0:	33 04 24             	xor    eax,DWORD PTR [esp]
10009de3:	89 c7                	mov    edi,eax
10009de5:	c1 ef 06             	shr    edi,0x6
10009de8:	89 c5                	mov    ebp,eax
10009dea:	c1 ed 0e             	shr    ebp,0xe
10009ded:	89 c2                	mov    edx,eax
10009def:	c1 ea 16             	shr    edx,0x16
10009df2:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009df9:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009dff:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009e05:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009e0b:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009e11:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009e15:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009e1c:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009e23:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10009e2a:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
10009e2e:	31 ca                	xor    edx,ecx
10009e30:	89 d7                	mov    edi,edx
10009e32:	c1 ef 06             	shr    edi,0x6
10009e35:	89 d5                	mov    ebp,edx
10009e37:	c1 ed 0e             	shr    ebp,0xe
10009e3a:	89 d1                	mov    ecx,edx
10009e3c:	c1 e9 16             	shr    ecx,0x16
10009e3f:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009e46:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009e4c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009e52:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009e58:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009e5e:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009e62:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009e69:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009e70:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
10009e74:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009e7b:	31 c1                	xor    ecx,eax
10009e7d:	89 cd                	mov    ebp,ecx
10009e7f:	c1 ed 06             	shr    ebp,0x6
10009e82:	89 ce                	mov    esi,ecx
10009e84:	c1 ee 0e             	shr    esi,0xe
10009e87:	89 c8                	mov    eax,ecx
10009e89:	c1 e8 16             	shr    eax,0x16
10009e8c:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10009e93:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009e99:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009e9f:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009ea5:	25 fc 03 00 00       	and    eax,0x3fc
10009eaa:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009eae:	03 84 34 58 04 00 00 	add    eax,DWORD PTR [esp+esi*1+0x458]
10009eb5:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10009ebc:	33 54 24 0c          	xor    edx,DWORD PTR [esp+0xc]
10009ec0:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009ec7:	89 c6                	mov    esi,eax
10009ec9:	31 d6                	xor    esi,edx
10009ecb:	89 f5                	mov    ebp,esi
10009ecd:	c1 ed 06             	shr    ebp,0x6
10009ed0:	89 f2                	mov    edx,esi
10009ed2:	c1 ea 0e             	shr    edx,0xe
10009ed5:	89 f0                	mov    eax,esi
10009ed7:	c1 e8 16             	shr    eax,0x16
10009eda:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10009ee1:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009ee7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009eed:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009ef3:	25 fc 03 00 00       	and    eax,0x3fc
10009ef8:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009efc:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
10009f03:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10009f0a:	33 4c 24 10          	xor    ecx,DWORD PTR [esp+0x10]
10009f0e:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009f15:	31 c1                	xor    ecx,eax
10009f17:	89 ca                	mov    edx,ecx
10009f19:	c1 ea 06             	shr    edx,0x6
10009f1c:	89 cd                	mov    ebp,ecx
10009f1e:	c1 ed 0e             	shr    ebp,0xe
10009f21:	89 c8                	mov    eax,ecx
10009f23:	c1 e8 16             	shr    eax,0x16
10009f26:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10009f2d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009f33:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009f39:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009f3f:	25 fc 03 00 00       	and    eax,0x3fc
10009f44:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009f48:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009f4f:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10009f56:	33 74 24 14          	xor    esi,DWORD PTR [esp+0x14]
10009f5a:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009f61:	31 f0                	xor    eax,esi
10009f63:	89 c7                	mov    edi,eax
10009f65:	c1 ef 06             	shr    edi,0x6
10009f68:	89 c5                	mov    ebp,eax
10009f6a:	c1 ed 0e             	shr    ebp,0xe
10009f6d:	89 c2                	mov    edx,eax
10009f6f:	c1 ea 16             	shr    edx,0x16
10009f72:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009f79:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009f7f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009f85:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009f8b:	81 e2 fc 03 00 00    	and    edx,0x3fc
10009f91:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10009f95:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009f9c:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10009fa3:	33 4c 24 18          	xor    ecx,DWORD PTR [esp+0x18]
10009fa7:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10009fae:	31 ca                	xor    edx,ecx
10009fb0:	89 d7                	mov    edi,edx
10009fb2:	c1 ef 06             	shr    edi,0x6
10009fb5:	89 d5                	mov    ebp,edx
10009fb7:	c1 ed 0e             	shr    ebp,0xe
10009fba:	89 d1                	mov    ecx,edx
10009fbc:	c1 e9 16             	shr    ecx,0x16
10009fbf:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009fc6:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009fcc:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009fd2:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009fd8:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009fde:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009fe2:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009fe9:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009ff0:	33 44 24 1c          	xor    eax,DWORD PTR [esp+0x1c]
10009ff4:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009ffb:	31 c8                	xor    eax,ecx
10009ffd:	89 c7                	mov    edi,eax
10009fff:	c1 ef 06             	shr    edi,0x6
1000a002:	89 c5                	mov    ebp,eax
1000a004:	c1 ed 0e             	shr    ebp,0xe
1000a007:	89 c1                	mov    ecx,eax
1000a009:	c1 e9 16             	shr    ecx,0x16
1000a00c:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000a013:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a019:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a01f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a025:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a02b:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a02f:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a036:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a03d:	33 54 24 20          	xor    edx,DWORD PTR [esp+0x20]
1000a041:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a048:	31 ca                	xor    edx,ecx
1000a04a:	89 d7                	mov    edi,edx
1000a04c:	c1 ef 06             	shr    edi,0x6
1000a04f:	89 d5                	mov    ebp,edx
1000a051:	c1 ed 0e             	shr    ebp,0xe
1000a054:	89 d1                	mov    ecx,edx
1000a056:	c1 e9 16             	shr    ecx,0x16
1000a059:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000a060:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a066:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a06c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a072:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a078:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a07c:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a083:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a08a:	33 44 24 24          	xor    eax,DWORD PTR [esp+0x24]
1000a08e:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a095:	31 c8                	xor    eax,ecx
1000a097:	89 c7                	mov    edi,eax
1000a099:	c1 ef 06             	shr    edi,0x6
1000a09c:	89 c5                	mov    ebp,eax
1000a09e:	c1 ed 0e             	shr    ebp,0xe
1000a0a1:	89 c1                	mov    ecx,eax
1000a0a3:	c1 e9 16             	shr    ecx,0x16
1000a0a6:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000a0ad:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a0b3:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a0b9:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a0bf:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a0c5:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a0c9:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a0d0:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a0d7:	33 54 24 28          	xor    edx,DWORD PTR [esp+0x28]
1000a0db:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a0e2:	31 ca                	xor    edx,ecx
1000a0e4:	89 d7                	mov    edi,edx
1000a0e6:	c1 ef 06             	shr    edi,0x6
1000a0e9:	89 d5                	mov    ebp,edx
1000a0eb:	c1 ed 0e             	shr    ebp,0xe
1000a0ee:	89 d1                	mov    ecx,edx
1000a0f0:	c1 e9 16             	shr    ecx,0x16
1000a0f3:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000a0fa:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a100:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a106:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a10c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a112:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a116:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a11d:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a124:	33 44 24 2c          	xor    eax,DWORD PTR [esp+0x2c]
1000a128:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a12f:	31 c8                	xor    eax,ecx
1000a131:	89 c7                	mov    edi,eax
1000a133:	c1 ef 06             	shr    edi,0x6
1000a136:	89 c5                	mov    ebp,eax
1000a138:	c1 ed 0e             	shr    ebp,0xe
1000a13b:	89 c1                	mov    ecx,eax
1000a13d:	c1 e9 16             	shr    ecx,0x16
1000a140:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000a147:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a14d:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a153:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a159:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a15f:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a163:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a16a:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a171:	33 54 24 30          	xor    edx,DWORD PTR [esp+0x30]
1000a175:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a17c:	31 ca                	xor    edx,ecx
1000a17e:	89 d7                	mov    edi,edx
1000a180:	c1 ef 06             	shr    edi,0x6
1000a183:	89 d5                	mov    ebp,edx
1000a185:	c1 ed 0e             	shr    ebp,0xe
1000a188:	89 d1                	mov    ecx,edx
1000a18a:	c1 e9 16             	shr    ecx,0x16
1000a18d:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000a194:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a19a:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a1a0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a1a6:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a1ac:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a1b0:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a1b7:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a1be:	33 44 24 34          	xor    eax,DWORD PTR [esp+0x34]
1000a1c2:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a1c9:	31 c8                	xor    eax,ecx
1000a1cb:	89 c7                	mov    edi,eax
1000a1cd:	c1 ef 06             	shr    edi,0x6
1000a1d0:	89 c5                	mov    ebp,eax
1000a1d2:	c1 ed 0e             	shr    ebp,0xe
1000a1d5:	89 c1                	mov    ecx,eax
1000a1d7:	c1 e9 16             	shr    ecx,0x16
1000a1da:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000a1e1:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a1e7:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a1ed:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a1f3:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a1f9:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000a1fd:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000a204:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000a20b:	33 54 24 38          	xor    edx,DWORD PTR [esp+0x38]
1000a20f:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000a216:	31 ca                	xor    edx,ecx
1000a218:	89 d7                	mov    edi,edx
1000a21a:	c1 ef 06             	shr    edi,0x6
1000a21d:	89 d5                	mov    ebp,edx
1000a21f:	c1 ed 0e             	shr    ebp,0xe
1000a222:	89 d6                	mov    esi,edx
1000a224:	c1 ee 16             	shr    esi,0x16
1000a227:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
1000a22e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a234:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a23a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a240:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a246:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000a24a:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
1000a251:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
1000a258:	33 44 24 3c          	xor    eax,DWORD PTR [esp+0x3c]
1000a25c:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
1000a263:	31 f0                	xor    eax,esi
1000a265:	89 c5                	mov    ebp,eax
1000a267:	c1 ed 06             	shr    ebp,0x6
1000a26a:	89 c1                	mov    ecx,eax
1000a26c:	c1 e9 0e             	shr    ecx,0xe
1000a26f:	89 c6                	mov    esi,eax
1000a271:	c1 ee 16             	shr    esi,0x16
1000a274:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
1000a27b:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000a281:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000a287:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000a28d:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000a293:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000a297:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
1000a29e:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
1000a2a5:	33 54 24 40          	xor    edx,DWORD PTR [esp+0x40]
1000a2a9:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
1000a2b0:	89 f1                	mov    ecx,esi
1000a2b2:	31 d1                	xor    ecx,edx
1000a2b4:	33 44 24 44          	xor    eax,DWORD PTR [esp+0x44]
1000a2b8:	4b                   	dec    ebx
1000a2b9:	0f 85 21 fb ff ff    	jne    10009de0 <_crypt_blowfish_rn+0x282f>
1000a2bf:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
1000a2c3:	89 84 9c e8 10 00 00 	mov    DWORD PTR [esp+ebx*4+0x10e8],eax
1000a2ca:	89 8c 9c ec 10 00 00 	mov    DWORD PTR [esp+ebx*4+0x10ec],ecx
1000a2d1:	83 44 24 48 02       	add    DWORD PTR [esp+0x48],0x2
1000a2d6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
1000a2da:	83 f8 06             	cmp    eax,0x6
1000a2dd:	0f 85 e2 fa ff ff    	jne    10009dc5 <_crypt_blowfish_rn+0x2814>
1000a2e3:	b9 07 00 00 00       	mov    ecx,0x7
1000a2e8:	8b bc 24 1c 11 00 00 	mov    edi,DWORD PTR [esp+0x111c]
1000a2ef:	8b b4 24 18 11 00 00 	mov    esi,DWORD PTR [esp+0x1118]
1000a2f6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000a2f8:	8b 84 24 18 11 00 00 	mov    eax,DWORD PTR [esp+0x1118]
1000a2ff:	0f be 40 1c          	movsx  eax,BYTE PTR [eax+0x1c]
1000a303:	8a 80 80 c4 00 10    	mov    al,BYTE PTR [eax+0x1000c480]	1000a305: R_386_32	.data
1000a309:	83 e0 30             	and    eax,0x30
1000a30c:	8a 80 40 c4 00 10    	mov    al,BYTE PTR [eax+0x1000c440]	1000a30e: R_386_32	.data
1000a312:	88 04 24             	mov    BYTE PTR [esp],al
1000a315:	8b 9c 24 1c 11 00 00 	mov    ebx,DWORD PTR [esp+0x111c]
1000a31c:	88 43 1c             	mov    BYTE PTR [ebx+0x1c],al
1000a31f:	6a 06                	push   0x6
1000a321:	8d 74 24 5c          	lea    esi,[esp+0x5c]
1000a325:	8d 9c 24 ec 10 00 00 	lea    ebx,[esp+0x10ec]
1000a32c:	53                   	push   ebx
1000a32d:	e8 f5 d1 ff ff       	call   10007527 <BF_swap>
1000a332:	6a 17                	push   0x17
1000a334:	53                   	push   ebx
1000a335:	8b 84 24 2c 11 00 00 	mov    eax,DWORD PTR [esp+0x112c]
1000a33c:	83 c0 1d             	add    eax,0x1d
1000a33f:	50                   	push   eax
1000a340:	e8 3d d1 ff ff       	call   10007482 <BF_encode>
1000a345:	8b 84 24 30 11 00 00 	mov    eax,DWORD PTR [esp+0x1130]
1000a34c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
1000a350:	68 a8 10 00 00       	push   0x10a8
1000a355:	56                   	push   esi
1000a356:	e8 0b d0 ff ff       	call   10007366 <clean>
1000a35b:	83 c4 1c             	add    esp,0x1c
1000a35e:	8b 84 24 1c 11 00 00 	mov    eax,DWORD PTR [esp+0x111c]
1000a365:	eb 29                	jmp    1000a390 <_crypt_blowfish_rn+0x2ddf>
1000a367:	c7 05 00 00 00 00 22 00 00 00 	mov    DWORD PTR ds:0x0,0x22	1000a369: R_386_32	_bcrypt_errno
1000a371:	b8 00 00 00 00       	mov    eax,0x0
1000a376:	eb 18                	jmp    1000a390 <_crypt_blowfish_rn+0x2ddf>
1000a378:	80 fa 31             	cmp    dl,0x31
1000a37b:	0f 8e a3 d2 ff ff    	jle    10007624 <_crypt_blowfish_rn+0x73>
1000a381:	c7 05 00 00 00 00 16 00 00 00 	mov    DWORD PTR ds:0x0,0x16	1000a383: R_386_32	_bcrypt_errno
1000a38b:	b8 00 00 00 00       	mov    eax,0x0
1000a390:	81 c4 00 11 00 00    	add    esp,0x1100
1000a396:	5b                   	pop    ebx
1000a397:	5e                   	pop    esi
1000a398:	5f                   	pop    edi
1000a399:	5d                   	pop    ebp
1000a39a:	c3                   	ret    
1000a39b:	6a 10                	push   0x10
1000a39d:	8d 84 24 ec 10 00 00 	lea    eax,[esp+0x10ec]
1000a3a4:	50                   	push   eax
1000a3a5:	e8 bc cf ff ff       	call   10007366 <clean>
1000a3aa:	c7 05 00 00 00 00 16 00 00 00 	mov    DWORD PTR ds:0x0,0x16	1000a3ac: R_386_32	_bcrypt_errno
1000a3b4:	83 c4 08             	add    esp,0x8
1000a3b7:	b8 00 00 00 00       	mov    eax,0x0
1000a3bc:	eb d2                	jmp    1000a390 <_crypt_blowfish_rn+0x2ddf>

1000a3be <_crypt_gensalt_blowfish_rn>:
1000a3be:	53                   	push   ebx
1000a3bf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
1000a3c3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
1000a3c7:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
1000a3cc:	7e 19                	jle    1000a3e7 <_crypt_gensalt_blowfish_rn+0x29>
1000a3ce:	83 7c 24 18 1d       	cmp    DWORD PTR [esp+0x18],0x1d
1000a3d3:	0f 8e 88 00 00 00    	jle    1000a461 <_crypt_gensalt_blowfish_rn+0xa3>
1000a3d9:	85 c9                	test   ecx,ecx
1000a3db:	74 33                	je     1000a410 <_crypt_gensalt_blowfish_rn+0x52>
1000a3dd:	8d 41 fc             	lea    eax,[ecx-0x4]
1000a3e0:	83 f8 1b             	cmp    eax,0x1b
1000a3e3:	76 30                	jbe    1000a415 <_crypt_gensalt_blowfish_rn+0x57>
1000a3e5:	eb 07                	jmp    1000a3ee <_crypt_gensalt_blowfish_rn+0x30>
1000a3e7:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
1000a3ec:	7e 03                	jle    1000a3f1 <_crypt_gensalt_blowfish_rn+0x33>
1000a3ee:	c6 03 00             	mov    BYTE PTR [ebx],0x0
1000a3f1:	83 7c 24 18 1d       	cmp    DWORD PTR [esp+0x18],0x1d
1000a3f6:	7e 11                	jle    1000a409 <_crypt_gensalt_blowfish_rn+0x4b>
1000a3f8:	b8 16 00 00 00       	mov    eax,0x16
1000a3fd:	a3 00 00 00 00       	mov    ds:0x0,eax	1000a3fe: R_386_32	_bcrypt_errno
1000a402:	b8 00 00 00 00       	mov    eax,0x0
1000a407:	eb 56                	jmp    1000a45f <_crypt_gensalt_blowfish_rn+0xa1>
1000a409:	b8 22 00 00 00       	mov    eax,0x22
1000a40e:	eb ed                	jmp    1000a3fd <_crypt_gensalt_blowfish_rn+0x3f>
1000a410:	b9 05 00 00 00       	mov    ecx,0x5
1000a415:	c6 03 24             	mov    BYTE PTR [ebx],0x24
1000a418:	c6 43 01 32          	mov    BYTE PTR [ebx+0x1],0x32
1000a41c:	c6 43 02 61          	mov    BYTE PTR [ebx+0x2],0x61
1000a420:	c6 43 03 24          	mov    BYTE PTR [ebx+0x3],0x24
1000a424:	b8 cd cc cc cc       	mov    eax,0xcccccccd
1000a429:	f7 e1                	mul    ecx
1000a42b:	89 d0                	mov    eax,edx
1000a42d:	c1 e8 03             	shr    eax,0x3
1000a430:	8d 50 30             	lea    edx,[eax+0x30]
1000a433:	88 53 04             	mov    BYTE PTR [ebx+0x4],dl
1000a436:	8d 04 80             	lea    eax,[eax+eax*4]
1000a439:	01 c0                	add    eax,eax
1000a43b:	29 c1                	sub    ecx,eax
1000a43d:	83 c1 30             	add    ecx,0x30
1000a440:	88 4b 05             	mov    BYTE PTR [ebx+0x5],cl
1000a443:	c6 43 06 24          	mov    BYTE PTR [ebx+0x6],0x24
1000a447:	6a 10                	push   0x10
1000a449:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000a44d:	8d 43 07             	lea    eax,[ebx+0x7]
1000a450:	50                   	push   eax
1000a451:	e8 2c d0 ff ff       	call   10007482 <BF_encode>
1000a456:	c6 43 1d 00          	mov    BYTE PTR [ebx+0x1d],0x0
1000a45a:	83 c4 0c             	add    esp,0xc
1000a45d:	89 d8                	mov    eax,ebx
1000a45f:	5b                   	pop    ebx
1000a460:	c3                   	ret    
1000a461:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
1000a466:	7f 86                	jg     1000a3ee <_crypt_gensalt_blowfish_rn+0x30>
1000a468:	b8 22 00 00 00       	mov    eax,0x22
1000a46d:	eb 8e                	jmp    1000a3fd <_crypt_gensalt_blowfish_rn+0x3f>

1000a46f <bcrypt_gensalt>:
1000a46f:	57                   	push   edi
1000a470:	56                   	push   esi
1000a471:	53                   	push   ebx
1000a472:	83 ec 10             	sub    esp,0x10
1000a475:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
1000a479:	89 e3                	mov    ebx,esp
1000a47b:	8d 74 24 10          	lea    esi,[esp+0x10]
1000a47f:	e8 fc ff ff ff       	call   1000a480 <bcrypt_gensalt+0x11>	1000a480: R_386_PC32	_bcrypt_rand
1000a484:	88 03                	mov    BYTE PTR [ebx],al
1000a486:	43                   	inc    ebx
1000a487:	39 f3                	cmp    ebx,esi
1000a489:	75 f4                	jne    1000a47f <bcrypt_gensalt+0x10>
1000a48b:	8d 47 fc             	lea    eax,[edi-0x4]
1000a48e:	83 f8 1b             	cmp    eax,0x1b
1000a491:	76 05                	jbe    1000a498 <bcrypt_gensalt+0x29>
1000a493:	bf 0c 00 00 00       	mov    edi,0xc
1000a498:	83 ec 0c             	sub    esp,0xc
1000a49b:	6a 40                	push   0x40
1000a49d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
1000a4a1:	6a 10                	push   0x10
1000a4a3:	8d 44 24 18          	lea    eax,[esp+0x18]
1000a4a7:	50                   	push   eax
1000a4a8:	57                   	push   edi
1000a4a9:	e8 10 ff ff ff       	call   1000a3be <_crypt_gensalt_blowfish_rn>
1000a4ae:	85 c0                	test   eax,eax
1000a4b0:	0f 94 c0             	sete   al
1000a4b3:	0f b6 c0             	movzx  eax,al
1000a4b6:	83 c4 30             	add    esp,0x30
1000a4b9:	5b                   	pop    ebx
1000a4ba:	5e                   	pop    esi
1000a4bb:	5f                   	pop    edi
1000a4bc:	c3                   	ret    

1000a4bd <bcrypt_hashpw>:
1000a4bd:	6a 40                	push   0x40
1000a4bf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000a4c3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000a4c7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000a4cb:	e8 e1 d0 ff ff       	call   100075b1 <_crypt_blowfish_rn>
1000a4d0:	83 c4 10             	add    esp,0x10
1000a4d3:	85 c0                	test   eax,eax
1000a4d5:	0f 94 c0             	sete   al
1000a4d8:	0f b6 c0             	movzx  eax,al
1000a4db:	c3                   	ret    

1000a4dc <TERMINAL_KEYBUFFER_IN_SIZE>:
1000a4dc:	80 00 00 00                                         ....

1000a4e0 <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000a4e0:	80 00 00 00 2e 00 2e 2e 00 2f 00 43 6f 75 6c 64     ........./.Could
1000a4f0:	6e 27 74 20 6f 70 65 6e 20 62 61 73 65 20 70 61     n't open base pa
1000a500:	74 68 2e 0a 00 25 73 20 2d 3e 20 25 73 0a 00 43     th...%s -> %s..C
1000a510:	4f 55 4c 44 20 4e 4f 54 20 43 52 45 41 54 45 00     OULD NOT CREATE.
1000a520:	43 4f 55 4c 44 20 4e 4f 54 20 43 4f 50 59 00 4e     COULD NOT COPY.N
1000a530:	4f 20 4d 45 4d 4f 52 59 00 42 61 63 6b 75 70 00     O MEMORY.Backup.
1000a540:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
1000a550:	2f 42 61 63 6b 75 70 2f 00 30 31 32 33 34 35 36     /Backup/.0123456
1000a560:	37 38 39 41 42 43 44 45 46 00 43 3a 2f 55 73 65     789ABCDEF.C:/Use
1000a570:	72 73 2f 00 2f 44 65 73 6b 74 6f 70 00 2f 44 6f     rs/./Desktop./Do
1000a580:	63 75 6d 65 6e 74 73 00 2f 44 6f 77 6e 6c 6f 61     cuments./Downloa
1000a590:	64 73 00 2f 50 69 63 74 75 72 65 73 00 2f 54 72     ds./Pictures./Tr
1000a5a0:	61 73 68 20 42 69 6e 00 2f 4d 75 73 69 63 00 2f     ash Bin./Music./
1000a5b0:	4d 6f 76 69 65 73 00 43 3a 2f 42 61 6e 61 6e 61     Movies.C:/Banana
1000a5c0:	2f 52 65 67 69 73 74 72 79 2f 55 73 65 72 2f 00     /Registry/User/.
1000a5d0:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
1000a5e0:	72 79 2f 44 65 66 61 75 6c 74 55 73 65 72 00 00     ry/DefaultUser..
1000a5f0:	43 68 65 63 6b 69 6e 67 0a 20 73 79 73 74 65 6d     Checking. system
1000a600:	0a 20 72 65 71 75 69 72 65 6d 65 6e 74 73 0a 0a     . requirements..
1000a610:	20 4c 65 67 61 6c 0a 20 6e 6f 74 69 63 65 73 0a      Legal. notices.
1000a620:	0a 20 43 68 6f 6f 73 69 6e 67 20 61 0a 20 70 61     . Choosing a. pa
1000a630:	72 74 69 74 69 6f 6e 0a 0a 20 46 6f 72 6d 61 74     rtition.. Format
1000a640:	74 69 6e 67 0a 0a 20 43 6f 70 79 69 6e 67 20 66     ting.. Copying f
1000a650:	69 6c 65 73 0a 0a 20 52 65 73 74 61 72 74 69 6e     iles.. Restartin
1000a660:	67 0a 20 79 6f 75 72 20 63 6f 6d 70 75 74 65 72     g. your computer
1000a670:	0a 0a 00 20 46 69 6e 61 6c 69 73 69 6e 67 20 74     ... Finalising t
1000a680:	68 65 0a 20 69 6e 73 74 61 6c 6c 61 74 69 6f 6e     he. installation
1000a690:	00 00 00 00 50 6c 65 61 73 65 20 77 61 69 74 20     ....Please wait 
1000a6a0:	77 68 69 6c 65 20 74 68 65 20 69 6e 73 74 61 6c     while the instal
1000a6b0:	6c 20 66 69 6e 69 73 68 65 73 2e 00 10 20 00 20     l finishes... . 
1000a6c0:	20 00 41 6c 6c 6f 63 61 74 69 6e 67 20 74 68 65      .Allocating the
1000a6d0:	20 73 77 61 70 66 69 6c 65 00 55 70 64 61 74 69      swapfile.Updati
1000a6e0:	6e 67 20 74 68 65 20 72 65 67 69 73 74 72 79 00     ng the registry.
1000a6f0:	43 72 65 61 74 69 6e 67 20 75 73 65 72 20 61 63     Creating user ac
1000a700:	63 6f 75 6e 74 00 49 6e 73 74 61 6c 6c 69 6e 67     count.Installing
1000a710:	20 70 61 63 6b 61 67 65 73 00 42 61 63 6b 69 6e      packages.Backin
1000a720:	67 20 75 70 20 73 79 73 74 65 6d 20 66 69 6c 65     g up system file
1000a730:	73 00 46 69 6e 69 73 68 69 6e 67 20 74 6f 75 63     s.Finishing touc
1000a740:	68 65 73 00 51 51 2d 30 30 30 2d 30 30 30 2d 30     hes.QQ-000-000-0
1000a750:	30 30 2d 51 00 00 00 00 43 3a 2f 42 61 6e 61 6e     00-Q....C:/Banan
1000a760:	61 2f 53 79 73 74 65 6d 2f 74 69 6d 65 7a 6f 6e     a/System/timezon
1000a770:	65 73 2e 74 78 74 00 20 00 2e 2e 2e 20 00 00 00     es.txt. .... ...
1000a780:	53 65 74 74 69 6e 67 20 75 70 20 74 68 65 20 73     Setting up the s
1000a790:	79 73 74 65 6d 20 66 6f 72 20 74 68 65 20 66 69     ystem for the fi
1000a7a0:	72 73 74 20 74 69 6d 65 00 0a 0a 0a 0a 0a 0a 00     rst time........
1000a7b0:	54 65 73 74 00 41 41 2d 30 30 30 30 30 2d 30 30     Test.AA-00000-00
1000a7c0:	30 30 30 2d 41 00 57 57 2d 38 38 33 38 38 2d 35     000-A.WW-88388-5
1000a7d0:	35 35 35 35 2d 4e 00 43 72 65 61 74 65 20 4e 65     5555-N.Create Ne
1000a7e0:	77 20 55 73 65 72 00 42 61 6e 61 6e 61 20 53 65     w User.Banana Se
1000a7f0:	74 75 70 00 50 6c 65 61 73 65 20 65 6e 74 65 72     tup.Please enter
1000a800:	20 79 6f 75 72 20 64 65 74 61 69 6c 73 2e 20 50      your details. P
1000a810:	72 65 73 73 20 54 41 42 20 74 6f 20 73 77 69 74     ress TAB to swit
1000a820:	63 68 00 00 62 65 74 77 65 65 6e 20 66 69 65 6c     ch..between fiel
1000a830:	64 73 2c 20 6f 72 20 45 53 43 20 74 6f 20 63 61     ds, or ESC to ca
1000a840:	6e 63 65 6c 2e 00 62 65 74 77 65 65 6e 20 66 69     ncel..between fi
1000a850:	65 6c 64 73 2e 00 4e 61 6d 65 00 43 6f 6d 70 61     elds..Name.Compa
1000a860:	6e 79 00 50 61 73 73 77 6f 72 64 00 43 6f 6e 66     ny.Password.Conf
1000a870:	69 72 6d 00 70 61 73 73 77 6f 72 64 00 00 00 00     irm.password....
1000a880:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000a890:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000a8a0:	20 20 20 20 00 20 11 00 20 20 20 00 2a 00 50 72         . ..   .*.Pr
1000a8b0:	65 73 73 20 45 4e 54 45 52 20 74 6f 20 73 75 62     ess ENTER to sub
1000a8c0:	6d 69 74 00 20 20 20 20 20 20 20 20 20 20 20 20     mit.            
1000a8d0:	20 20 20 20 20 20 20 20 20 20 00 20 20 20 4f 4b               .   OK
1000a8e0:	20 20 20 00 20 20 11 00 43 4f 55 4c 44 20 4e 4f        .  ..COULD NO
1000a8f0:	54 20 53 41 56 45 00 59 4f 55 52 20 50 41 53 53     T SAVE.YOUR PASS
1000a900:	57 4f 52 44 20 28 41 29 00 59 4f 55 52 20 50 41     WORD (A).YOUR PA
1000a910:	53 53 57 4f 52 44 20 28 42 29 00 44 61 74 65 20     SSWORD (B).Date 
1000a920:	61 6e 64 20 54 69 6d 65 00 31 34 2f 30 35 2f 32     and Time.14/05/2
1000a930:	30 32 31 20 31 38 3a 35 35 3a 30 30 00 00 00 00     021 18:55:00....
1000a940:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 74 68 65     Please enter the
1000a950:	20 63 75 72 72 65 6e 74 20 64 61 74 65 20 61 6e      current date an
1000a960:	64 20 74 69 6d 65 2c 00 61 6e 64 20 74 68 65 6e     d time,.and then
1000a970:	20 70 72 65 73 73 20 45 4e 54 45 52 2e 00 44 44      press ENTER..DD
1000a980:	2f 4d 4d 2f 59 59 59 59 20 48 48 3a 4d 4d 3a 53     /MM/YYYY HH:MM:S
1000a990:	53 00 45 53 43 3a 20 47 6f 20 62 61 63 6b 20 61     S.ESC: Go back a
1000a9a0:	20 73 63 72 65 65 6e 00 50 6c 65 61 73 65 20 73      screen.Please s
1000a9b0:	65 6c 65 63 74 20 79 6f 75 72 20 74 69 6d 65 7a     elect your timez
1000a9c0:	6f 6e 65 20 61 6e 64 20 74 68 65 6e 20 70 72 65     one and then pre
1000a9d0:	73 73 20 45 4e 54 45 52 2e 00 55 73 65 72 20 49     ss ENTER..User I
1000a9e0:	6e 74 65 72 66 61 63 65 00 00 00 00 50 6c 65 61     nterface....Plea
1000a9f0:	73 65 20 73 65 6c 65 63 74 20 74 68 65 20 75 73     se select the us
1000aa00:	65 72 20 69 6e 74 65 72 66 61 63 65 20 79 6f 75     er interface you
1000aa10:	20 77 61 6e 74 20 42 61 6e 61 6e 61 00 00 00 00      want Banana....
1000aa20:	74 6f 20 62 6f 6f 74 20 69 6e 74 6f 20 62 79 20     to boot into by 
1000aa30:	64 65 66 61 75 6c 74 20 77 68 65 6e 20 79 6f 75     default when you
1000aa40:	20 73 74 61 72 74 20 74 68 65 20 63 6f 6d 70 75      start the compu
1000aa50:	74 65 72 2e 00 49 6e 76 61 6c 69 64 20 50 72 6f     ter..Invalid Pro
1000aa60:	64 75 63 74 20 4b 65 79 00 00 00 00 59 6f 75 20     duct Key....You 
1000aa70:	64 6f 20 6e 6f 74 20 68 61 76 65 20 61 20 76 61     do not have a va
1000aa80:	6c 69 64 20 70 72 6f 64 75 63 74 20 6b 65 79 2e     lid product key.
1000aa90:	0a 00 00 00 59 6f 75 20 6e 65 65 64 20 61 20 76     ....You need a v
1000aaa0:	61 6c 69 64 20 70 72 6f 64 75 63 74 20 6b 65 79     alid product key
1000aab0:	20 69 6e 20 6f 72 64 65 72 20 74 6f 00 75 73 65      in order to.use
1000aac0:	20 42 61 6e 61 6e 61 2e 00 00 00 00 50 72 65 73      Banana.....Pres
1000aad0:	73 20 45 4e 54 45 52 20 74 6f 20 72 65 2d 65 6e     s ENTER to re-en
1000aae0:	74 65 72 20 79 6f 75 72 20 70 72 6f 64 75 63 74     ter your product
1000aaf0:	20 6b 65 79 2e 00 50 72 6f 64 75 63 74 20 4b 65      key..Product Ke
1000ab00:	79 00 00 00 50 6c 65 61 73 65 20 65 6e 74 65 72     y...Please enter
1000ab10:	20 79 6f 75 72 20 70 72 6f 64 75 63 74 20 6b 65      your product ke
1000ab20:	79 20 62 65 6c 6f 77 2c 00 00 00 00 54 68 65 20     y below,....The 
1000ab30:	65 6e 74 65 72 65 64 20 70 72 6f 64 75 63 74 20     entered product 
1000ab40:	6b 65 79 20 77 61 73 20 69 6e 76 61 6c 69 64 2e     key was invalid.
1000ab50:	00 00 00 00 50 72 65 73 73 20 61 6e 79 20 6b 65     ....Press any ke
1000ab60:	79 20 74 6f 20 63 6f 6e 74 69 6e 75 65 20 61 6e     y to continue an
1000ab70:	64 20 74 68 65 6e 00 00 65 6e 74 65 72 20 74 68     d then..enter th
1000ab80:	65 20 70 72 6f 64 75 63 74 20 6b 65 79 20 63 6f     e product key co
1000ab90:	72 72 65 63 74 6c 79 2e 00 46 69 6e 61 6c 69 73     rrectly..Finalis
1000aba0:	69 6e 67 20 49 6e 73 74 61 6c 6c 61 74 69 6f 6e     ing Installation
1000abb0:	00 00 00 00 53 59 53 54 45 4d 2e 44 4c 4c 20 54     ....SYSTEM.DLL T
1000abc0:	4f 44 4f 3a 20 72 65 67 69 73 74 72 79 20 72 65     ODO: registry re
1000abd0:	61 64 0a 00 43 3a 2f 42 61 6e 61 6e 61 2f 52 65     ad..C:/Banana/Re
1000abe0:	67 69 73 74 72 79 2f 53 79 73 74 65 6d 00 43 3a     gistry/System.C:
1000abf0:	2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74 72 79     /Banana/Registry
1000ac00:	2f 55 73 65 72 00 00 00 43 3a 2f 42 61 6e 61 6e     /User...C:/Banan
1000ac10:	61 2f 52 65 67 69 73 74 72 79 2f 44 65 66 61 75     a/Registry/Defau
1000ac20:	6c 74 53 79 73 74 65 6d 00 00 00 00 20 42 6f 6f     ltSystem.... Boo
1000ac30:	74 20 74 6f 20 63 6f 6d 6d 61 6e 64 20 6c 69 6e     t to command lin
1000ac40:	65 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     e               
1000ac50:	00 00 00 00 20 42 6f 6f 74 20 74 6f 20 67 72 61     .... Boot to gra
1000ac60:	70 68 69 63 61 6c 20 69 6e 74 65 72 66 61 63 65     phical interface
1000ac70:	20 28 56 47 41 29 20 20 00 00 00 00 20 42 6f 6f      (VGA)  .... Boo
1000ac80:	74 20 74 6f 20 67 72 61 70 68 69 63 61 6c 20 69     t to graphical i
1000ac90:	6e 74 65 72 66 61 63 65 20 28 56 45 53 41 29 20     nterface (VESA) 
1000aca0:	00 00 00 00 2c ac 00 10 54 ac 00 10 7c ac 00 10     ....,...T...|...	1000aca4: R_386_32	.text
	1000aca8: R_386_32	.text
	1000acac: R_386_32	.text
1000acb0:	4c 6f 61 64 69 6e 67 20 65 78 74 65 6e 73 69 6f     Loading extensio
1000acc0:	6e 73 2e 2e 2e 00 0a 0a 3a 0a 00 2f 25 73 0a 00     ns......:../%s..
1000acd0:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
1000ace0:	2f 73 65 74 75 70 69 73 64 2e 6f 6e 65 00 53 59     /setupisd.one.SY
1000acf0:	53 49 4e 49 54 20 46 41 49 4c 55 52 45 00 43 3a     SINIT FAILURE.C:
1000ad00:	2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d 2f 63     /Banana/System/c
1000ad10:	6f 6d 6d 61 6e 64 2e 65 78 65 00 43 3a 2f 44 45     ommand.exe.C:/DE
1000ad20:	2e 42 55 47 00 00 00 00 43 3a 2f 42 61 6e 61 6e     .BUG....C:/Banan
1000ad30:	61 2f 52 65 67 69 73 74 72 79 2f 53 79 73 74 65     a/Registry/Syste
1000ad40:	6d 2f 53 59 53 54 45 4d 2e 52 45 47 00 42 41 4e     m/SYSTEM.REG.BAN
1000ad50:	41 4e 41 00 72 65 67 73 61 66 65 6e 61 6d 65 20     ANA.regsafename 
1000ad60:	3d 20 25 73 0a 00 42 41 4e 41 4e 41 2f 55 53 45     = %s..BANANA/USE
1000ad70:	52 53 2f 00 75 73 65 72 42 61 73 65 50 61 74 68     RS/.userBasePath
1000ad80:	20 3d 20 25 73 0a 00 53 45 54 55 50 00 42 4f 4f      = %s..SETUP.BOO
1000ad90:	54 00 54 49 4d 45 00 55 53 45 52 53 00 46 49 4c     T.TIME.USERS.FIL
1000ada0:	45 41 53 53 4f 43 00 42 41 4e 41 4e 41 2f 46 49     EASSOC.BANANA/FI
1000adb0:	4c 45 41 53 53 4f 43 00 4f 50 45 4e 00 45 44 49     LEASSOC.OPEN.EDI
1000adc0:	54 00 50 52 49 4e 54 00 49 43 4f 4e 00 44 45 53     T.PRINT.ICON.DES
1000add0:	43 52 00 43 55 53 54 4f 4d 56 45 52 42 00 43 55     CR.CUSTOMVERB.CU
1000ade0:	53 54 4f 4d 50 52 4f 47 00 42 41 4e 41 4e 41 2f     STOMPROG.BANANA/
1000adf0:	54 49 4d 45 00 54 49 4d 45 5a 4f 4e 45 00 42 41     TIME.TIMEZONE.BA
1000ae00:	4e 41 4e 41 2f 53 45 54 55 50 00 4e 41 4d 45 00     NANA/SETUP.NAME.
1000ae10:	43 4f 4d 50 41 4e 59 00 50 52 4f 44 55 43 54 4b     COMPANY.PRODUCTK
1000ae20:	45 59 00 42 41 4e 41 4e 41 2f 55 53 45 52 53 00     EY.BANANA/USERS.
1000ae30:	53 41 4c 54 00 50 41 53 53 57 4f 52 44 00 44 49     SALT.PASSWORD.DI
1000ae40:	53 50 4c 41 59 4e 41 4d 45 00 44 45 53 4b 54 4f     SPLAYNAME.DESKTO
1000ae50:	50 00 44 4f 43 55 4d 45 4e 54 53 00 44 4f 57 4e     P.DOCUMENTS.DOWN
1000ae60:	4c 4f 41 44 53 00 50 49 43 54 55 52 45 53 00 4d     LOADS.PICTURES.M
1000ae70:	4f 56 49 45 53 00 4d 55 53 49 43 00 52 45 43 59     OVIES.MUSIC.RECY
1000ae80:	43 4c 45 42 49 4e 00 42 41 4e 41 4e 41 2f 42 4f     CLEBIN.BANANA/BO
1000ae90:	4f 54 00 41 55 54 4f 47 55 49 00 54 49 4d 45 5a     OT.AUTOGUI.TIMEZ
1000aea0:	4f 4e 45 49 44 00 42 41 4e 41 4e 41 2f 54 49 4d     ONEID.BANANA/TIM
1000aeb0:	45 2f 54 49 4d 45 5a 4f 4e 45 00 42 41 4e 41 4e     E/TIMEZONE.BANAN
1000aec0:	41 2f 53 45 54 55 50 2f 4e 41 4d 45 00 42 41 4e     A/SETUP/NAME.BAN
1000aed0:	41 4e 41 2f 53 45 54 55 50 2f 43 4f 4d 50 41 4e     ANA/SETUP/COMPAN
1000aee0:	59 00 42 41 4e 41 4e 41 2f 53 45 54 55 50 2f 50     Y.BANANA/SETUP/P
1000aef0:	52 4f 44 55 43 54 4b 45 59 00 42 41 4e 41 4e 41     RODUCTKEY.BANANA
1000af00:	2f 46 49 4c 45 41 53 53 4f 43 2f 49 43 4f 4e 00     /FILEASSOC/ICON.
1000af10:	54 58 54 00 42 41 4e 41 4e 41 2f 46 49 4c 45 41     TXT.BANANA/FILEA
1000af20:	53 53 4f 43 2f 44 45 53 43 52 00 42 41 4e 41 4e     SSOC/DESCR.BANAN
1000af30:	41 2f 46 49 4c 45 41 53 53 4f 43 2f 4f 50 45 4e     A/FILEASSOC/OPEN
1000af40:	00 42 41 4e 41 4e 41 2f 46 49 4c 45 41 53 53 4f     .BANANA/FILEASSO
1000af50:	43 2f 45 44 49 54 00 42 41 4e 41 4e 41 2f 46 49     C/EDIT.BANANA/FI
1000af60:	4c 45 41 53 53 4f 43 2f 50 52 49 4e 54 00 42 41     LEASSOC/PRINT.BA
1000af70:	4e 41 4e 41 2f 46 49 4c 45 41 53 53 4f 43 2f 49     NANA/FILEASSOC/I
1000af80:	43 4f 4e 2f 54 58 54 00 43 3a 2f 42 61 6e 61 6e     CON/TXT.C:/Banan
1000af90:	61 2f 49 63 6f 6e 73 2f 63 6f 6c 6f 75 72 2f 74     a/Icons/colour/t
1000afa0:	65 78 74 2e 74 67 61 00 42 41 4e 41 4e 41 2f 46     ext.tga.BANANA/F
1000afb0:	49 4c 45 41 53 53 4f 43 2f 44 45 53 43 52 2f 54     ILEASSOC/DESCR/T
1000afc0:	58 54 00 54 65 78 74 20 44 6f 63 75 6d 65 6e 74     XT.Text Document
1000afd0:	00 42 41 4e 41 4e 41 2f 46 49 4c 45 41 53 53 4f     .BANANA/FILEASSO
1000afe0:	43 2f 4f 50 45 4e 2f 54 58 54 00 43 3a 2f 42 61     C/OPEN/TXT.C:/Ba
1000aff0:	6e 61 6e 61 2f 53 79 73 74 65 6d 2f 74 65 2e 65     nana/System/te.e
1000b000:	78 65 00 42 41 4e 41 4e 41 2f 46 49 4c 45 41 53     xe.BANANA/FILEAS
1000b010:	53 4f 43 2f 45 44 49 54 2f 54 58 54 00 42 41 4e     SOC/EDIT/TXT.BAN
1000b020:	41 4e 41 2f 46 49 4c 45 41 53 53 4f 43 2f 50 52     ANA/FILEASSOC/PR
1000b030:	49 4e 54 2f 54 58 54 00 49 53 4f 00 42 41 4e 41     INT/TXT.ISO.BANA
1000b040:	4e 41 2f 46 49 4c 45 41 53 53 4f 43 2f 49 43 4f     NA/FILEASSOC/ICO
1000b050:	4e 2f 49 53 4f 00 43 3a 2f 42 61 6e 61 6e 61 2f     N/ISO.C:/Banana/
1000b060:	49 63 6f 6e 73 2f 63 6f 6c 6f 75 72 2f 63 64 2e     Icons/colour/cd.
1000b070:	74 67 61 00 42 41 4e 41 4e 41 2f 46 49 4c 45 41     tga.BANANA/FILEA
1000b080:	53 53 4f 43 2f 44 45 53 43 52 2f 49 53 4f 00 44     SSOC/DESCR/ISO.D
1000b090:	69 73 63 20 49 6d 61 67 65 20 46 69 6c 65 00 2f     isc Image File./
1000b0a0:	50 41 53 53 57 4f 52 44 00 2f 53 41 4c 54 00 2f     PASSWORD./SALT./
1000b0b0:	44 49 53 50 4c 41 59 4e 41 4d 45 00 2f 44 45 53     DISPLAYNAME./DES
1000b0c0:	4b 54 4f 50 00 2f 44 4f 43 55 4d 45 4e 54 53 00     KTOP./DOCUMENTS.
1000b0d0:	2f 44 4f 57 4e 4c 4f 41 44 53 00 2f 50 49 43 54     /DOWNLOADS./PICT
1000b0e0:	55 52 45 53 00 2f 4d 4f 56 49 45 53 00 2f 4d 55     URES./MOVIES./MU
1000b0f0:	53 49 43 00 2f 52 45 43 59 43 4c 45 42 49 4e 00     SIC./RECYCLEBIN.
1000b100:	54 4f 44 4f 3a 20 64 65 74 65 63 74 20 6e 6f 72     TODO: detect nor
1000b110:	6d 61 6c 20 6b 65 72 6e 65 6c 20 76 73 20 4b 52     mal kernel vs KR
1000b120:	4e 4c 50 32 0a 00 00 00 54 68 65 20 69 6e 73 74     NLP2....The inst
1000b130:	61 6c 6c 61 74 69 6f 6e 20 68 61 73 20 62 65 65     allation has bee
1000b140:	6e 20 63 6f 6d 70 6c 65 74 65 64 2e 0a 00 00 00     n completed.....
1000b150:	50 6c 65 61 73 65 20 70 72 65 73 73 20 45 4e 54     Please press ENT
1000b160:	45 52 20 74 6f 20 72 65 73 74 61 72 74 20 79 6f     ER to restart yo
1000b170:	75 72 20 63 6f 6d 70 75 74 65 72 00 61 6e 64 20     ur computer.and 
1000b180:	73 74 61 72 74 20 42 61 6e 61 6e 61 2e 00 42 41     start Banana..BA
1000b190:	4e 41 4e 41 2f 42 4f 4f 54 2f 41 55 54 4f 47 55     NANA/BOOT/AUTOGU
1000b1a0:	49 00 50 72 6f 64 75 63 74 20 4b 65 79 20 55 70     I.Product Key Up
1000b1b0:	64 61 74 65 64 00 00 00 59 6f 75 72 20 70 72 6f     dated...Your pro
1000b1c0:	64 75 63 74 20 6b 65 79 20 68 61 73 20 62 65 65     duct key has bee
1000b1d0:	6e 20 75 70 64 61 74 65 64 2e 0a 00 20 43 72 65     n updated... Cre
1000b1e0:	61 74 65 20 6e 65 77 20 75 73 65 72 2e 2e 2e 20     ate new user... 
1000b1f0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
1000b200:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00 4c                   .L
1000b210:	6f 67 69 6e 00 00 00 00 50 6c 65 61 73 65 20 73     ogin....Please s
1000b220:	65 6c 65 63 74 20 79 6f 75 72 20 75 73 65 72 6e     elect your usern
1000b230:	61 6d 65 20 61 6e 64 20 70 72 65 73 73 20 45 4e     ame and press EN
1000b240:	54 45 52 2e 00 00 00 00 50 6c 65 61 73 65 20 74     TER.....Please t
1000b250:	79 70 65 20 79 6f 75 72 20 70 61 73 73 77 6f 72     ype your passwor
1000b260:	64 20 61 6e 64 20 70 72 65 73 73 20 45 4e 54 45     d and press ENTE
1000b270:	52 00 6f 72 20 70 72 65 73 73 20 45 53 43 20 74     R.or press ESC t
1000b280:	6f 20 67 6f 20 62 61 63 6b 2e 00 00 52 45 51 55     o go back...REQU
1000b290:	49 52 45 44 3a 20 25 73 0a 47 4f 54 3a 20 25 73     IRED: %s.GOT: %s
1000b2a0:	0a 53 41 4c 54 3a 20 25 73 0a 00 00 49 74 20 69     .SALT: %s...It i
1000b2b0:	73 20 73 61 66 65 20 74 6f 20 74 75 72 6e 20 6f     s safe to turn o
1000b2c0:	66 66 20 79 6f 75 72 20 50 43 00 63 61 6c 6c 00     ff your PC.call.
1000b2d0:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
1000b2e0:	2f 69 6e 69 74 2e 62 61 74 00 00 00 fe ac 00 10     /init.bat.......	1000b2ec: R_386_32	.text
1000b2f0:	cb b2 00 10 d0 b2 00 10 00 00 00 00                 ............	1000b2f0: R_386_32	.text
	1000b2f4: R_386_32	.text
